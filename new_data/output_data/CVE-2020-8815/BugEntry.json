{"buggy_code": ["using System;\nusing System.Net.Sockets;\nusing System.Threading;\nusing System.Text.RegularExpressions;\nusing System.Net;\nusing System.Collections.Generic;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Linq;\n\nnamespace BearFTP\n{\n    class Program\n    {\n        //CONFIG\n        public static int PortDef = 21;\n        public static int PortPasv = 1222;\n        public static string Hostname = \"127.0.0.1\";\n        public static string Token = \"\";\n        public static string Banner = \"Welcome to FTP!\";\n\n        public static bool Report = true;\n        public static bool Ban = true;\n        public static bool PunishScans = true;\n        public static bool AllowAnonymous = false;\n        public static bool PerIPLogs = false;\n\n        public static int Max_PerSecond = 5;\n        public static int Max_Total = 6;\n        public static int BanLength = 3600;\n        public static int MaxErrors = 6;\n        public static int BufferSize = 8192;\n\n        //IP TempBan list (hostname:seconds)\n        public static List<Ban> bans = new List<Ban>();\n\n        //An instance of config to extract values\n        public static Config config;\n\n        //Used because everybody likes random numbers.\n        public static Random rnd = new Random();\n        public static readonly HttpClient client = new HttpClient();\n        //List of all connected (to main port) clients\n        public static List<Client> connected = new List<Client>();\n\n        //Default directory. TODO: Implement directories\n        public static Directory root = new Directory();\n\n        //Current version\n        public static string _VERSION = \"v0.3.0 BETA\";\n\n        //Default log.\n        public static StreamWriter logfile = new StreamWriter(\"log.txt\", true);\n\n        //Per-IP logs\n        public static List<StreamWriter> perips = new List<StreamWriter>();\n\n        //Dictionary of passvie clients (clients with PASV mode. Used to communicate directly later.)\n        public static Dictionary<Client, Connectivity> passives = new Dictionary<Client, Connectivity>();\n\n        //List of connections per second from hostname\n        public static List<Active> per_second = new List<Active>();\n        //List of overall connections from hostname\n        public static List<Active> actives = new List<Active>();\n\n        //List of overall connections to PASV\n        public static List<Active> pasv_actives = new List<Active>();\n\n        /// <summary>\n        /// Reports an IP\n        /// </summary>\n        /// <param name=\"hostname\">IP to report</param>\n        /// <param name=\"comment\">Logs or comments regarding report</param>\n        /// <param name=\"hacking\">Is accused in hacking?</param>\n        /// <param name=\"brute\">Is accused in bruting?</param>\n        /// <param name=\"webapp_h\">Is accused in webapp hacking?</param>\n        /// <param name=\"scanning\">Is accused in portscanning?</param>\n        /// <param name=\"ddos\">Is accused in DDoS</param>\n        /// <returns>A task to execute</returns>\n        public static async System.Threading.Tasks.Task ReportAsync(string hostname, string comment, bool hacking, bool brute, bool webapp_h, bool scanning, bool ddos)\n        {\n\n            string bad = \"\";\n            if (hacking)\n            {\n                bad += \"15,\";\n            }\n            if (brute)\n            {\n                bad += \"18,5,\";\n            }\n            if (webapp_h)\n            {\n                bad += \"21,\";\n            }\n            if (scanning)\n            {\n                bad += \"14,\";\n            }\n            if (ddos)\n            {\n                bad += \"4,\";\n            }\n            bad = bad.Substring(0, bad.Length - 1);\n            if (Report) {\n                try\n                {\n                    using (var httpClient = new HttpClient())\n                    {\n                        using (var request = new HttpRequestMessage(new HttpMethod(\"POST\"), \"https://api.abuseipdb.com/api/v2/report\"))\n                        {\n                            request.Headers.TryAddWithoutValidation(\"Key\", Token);\n                            request.Headers.TryAddWithoutValidation(\"Accept\", \"application/json\");\n\n                            var contentList = new List<string>();\n                            contentList.Add($\"ip={Uri.EscapeDataString(hostname)}\");\n                            contentList.Add(\"categories=\" + bad);\n                            contentList.Add($\"comment={Uri.EscapeDataString(comment)}\");\n                            request.Content = new StringContent(string.Join(\"&\", contentList));\n                            request.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/x-www-form-urlencoded\");\n                            Console.WriteLine(\"=== REPORTING IP.... \" + hostname);\n                            var response = await httpClient.SendAsync(request);\n                            if (response.StatusCode == HttpStatusCode.OK)\n                            {\n                                Console.WriteLine(\"=== REPORTED IP \" + hostname);\n                            }\n                            else\n                            {\n                                Console.WriteLine(\"=== ERROR WHILE REPORTING: \" + response.StatusCode.ToString());\n                                Console.WriteLine(\"=== \" + response.Content.ToString());\n                            }\n                        }\n                    }\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(e.StackTrace);\n                }\n            }\n            \n        }\n        /// <summary>\n        /// Hashes a string using md5\n        /// </summary>\n        /// <param name=\"input\">String to hash</param>\n        /// <returns>Hashed string</returns>\n        public static string md5(string input)\n        {\n            MD5 md5 = MD5.Create();\n            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(input);\n            byte[] hash = md5.ComputeHash(inputBytes);\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < hash.Length; i++)\n            {\n                sb.Append(hash[i].ToString(\"x2\"));\n            }\n            return sb.ToString();\n        }\n        public static List<File> files = new List<File>();\n\n        /// <summary>\n        /// Writes to the StreamWriter as well as logging actions\n        /// </summary>\n        /// <param name=\"text\">String to send over socket</param>\n        /// <param name=\"sw\">StreamWriter of a TCPClient</param>\n        /// <param name=\"IP\">Hostname of receiver</param>\n        /// <param name=\"perip\">PerIP StreamWriter</param>\n        public static void LogWrite(string text, StreamWriter sw, string IP, StreamWriter perip = null)\n        {\n            Log(text.Trim().Replace(\"\\r\", String.Empty).Replace(\"\\n\", String.Empty).Trim(), \"out\", true, IP, perip);\n            sw.Write(text);\n        }\n\n        /// <summary>\n        /// Used to calculate and format the string for PASV mode\n        /// </summary>\n        /// <param name=\"port\">Port of PASV</param>\n        /// <param name=\"host\">Hostname (IP ONLY!)</param>\n        /// <returns>Formatted string</returns>\n        public static string PasvInit(int port, string host)\n        {\n            string actual_host = host.Replace('.', ',');\n            string actual_port = \"\";\n            int p1 = 0;\n            int p2 = 0;\n            for (int i = 0; i < 255; i++)\n            {\n                if (port - (256 * i) < 256)\n                {\n                    p1 = i;\n                    break;\n                }\n            }\n            p2 = port - (256 * p1);\n\n            actual_port = p1 + \",\" + p2;\n\n            return \"(\" + actual_host + \",\" + actual_port + \")\";\n        }\n\n        /// <summary>\n        /// Checks using pastebin if a new version is out. Replace with your own URL\n        /// </summary>\n        /// <returns></returns>\n        public static bool CheckVersion()\n        {\n            using (var client = new WebClient())\n            {\n                try\n                {\n                    var responseString = client.DownloadString(\"https://pastebin.com/raw/9dCZvME9\");\n                    if (responseString.Trim() != _VERSION)\n                    {\n                        return false;\n                    }\n                    return true;\n                } catch { return false; }\n                \n            }\n        }\n\n        /// <summary>\n        /// Logs text and prints it to console\n        /// </summary>\n        /// <param name=\"text\">Text of a message</param>\n        /// <param name=\"dir\">Either \"in\" for << or \"out\" for >></param>\n        /// <param name=\"date\">Include date in format [MM/dd/yyyy HH:mm:ss] or not</param>\n        /// <param name=\"IP\">IP Address to include before date (you can't have this true and date set to false)</param>\n        /// <param name=\"sw\">PerIP StreamWriter handler</param>\n        public static void Log(string text, string dir, bool date = true, string IP = null, StreamWriter sw = null)\n        {\n            string Builder = \"\";\n            if (date)\n            {\n                if (IP == null)\n                {\n                    Builder += \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \";\n                } else\n                {\n                    Builder += \"[\" + IP + \" \" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \";\n                }\n            }\n            if (dir == \"in\")\n            {\n                Builder += \"<< \";\n            } else\n            {\n                Builder += \">> \";\n            }\n            \n            Builder += text;\n\n            Builder = Regex.Replace(Builder, @\"[^\\u0020-\\u007E]\", \" \");\n\n            if (sw != null && PerIPLogs)\n            {\n                try\n                {\n                    sw.WriteLine(Builder);\n                } catch\n                {\n\n                }\n            }\n\n            logfile.WriteLine(Builder);\n            Console.WriteLine(Builder);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.OutputEncoding = Encoding.Unicode;\n            logfile.AutoFlush = true;\n            Log(\"Initialized server! >>\", \"in\");\n            config = new Config(\"config.json\");\n            PortDef = config.PortDef;\n            PortPasv = config.PortPasv;\n            Hostname = config.Hostname;\n            Token = config.Token;\n            Banner = config.Banner;\n            Report = config.Report;\n            Ban = config.Ban;\n            PunishScans = config.PunishScans;\n            AllowAnonymous = config.AllowAnonymous;\n            Max_PerSecond = config.Max_PerSecond;\n            Max_Total = config.Max_Total;\n            BanLength = config.BanLength;\n            MaxErrors = config.MaxErrors;\n            BufferSize = config.BufferSize;\n            PerIPLogs = config.PerIPLogs;\n\n            if (PortDef == PortPasv)\n            {\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(\"-> You are probably running a default/incorrect config! Please, edit it before starting the server\");\n                Console.ResetColor();\n                Environment.Exit(1);\n            }\n\n            \n\n            //Yes, it starts..\n            Console.WriteLine(\"- BearFTP OpenSource HoneyPot Server \" + _VERSION + \" -\");\n            Console.WriteLine(\"- By IKTeam -> https://github.com/kolya5544/BearFTP -\");\n            Console.WriteLine(\"Checking for updates...\");\n            if (!CheckVersion())\n            {\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(\"----> You are *probably* running an outdated version of our software!\");\n                Console.ResetColor();\n            } else\n            {\n                Console.WriteLine(\"You are running the latest version!\");\n            }\n            Console.WriteLine(\"Running on \" + Hostname + \":\" + PortDef.ToString());\n            Console.WriteLine(\"PASV params: \" + PasvInit(PortPasv, Hostname));\n            root.path = \"/\";\n            InitializeFiles();\n            TcpListener ftp = new TcpListener(PortDef);\n            TcpListener pasv = new TcpListener(PortPasv);\n            //Ban expiration handling.\n            new Thread(new ThreadStart(() => {\n                Thread.CurrentThread.IsBackground = true;\n\n                while (true)\n                {\n                    Thread.Sleep(2000);\n                    for (int i = 0; i<bans.Count; i++) { \n                        bans[i].time -= 2;\n                        if (bans[i].time <= 0)\n                        {\n                            bans.Remove(bans[i]);\n                            i--;\n                        }\n                    }\n                }\n            })).Start();\n            //Connections per seconds (antibot) handling\n            new Thread(new ThreadStart(() => {\n                Thread.CurrentThread.IsBackground = true;\n\n                while (true)\n                {\n                    Thread.Sleep(1000);\n                    for (int i = 0; i < per_second.Count; i++)\n                    {\n                        if (per_second[i].connected > 0)\n                        {\n                            per_second[i].connected -= 1;\n                        }\n                    }\n                 //   Console.WriteLine(\"[DBG] Iterated per_second!\");\n                }\n            })).Start();\n            ftp.Start();\n            pasv.Start();\n            new Thread(() =>\n            {\n                Thread.CurrentThread.IsBackground = true;\n                while (true)\n                {\n                    TcpClient client = ftp.AcceptTcpClient();\n\n                    NetworkStream ns = client.GetStream();\n                    ns.ReadTimeout = 3000;\n                    ns.WriteTimeout = 3000;\n                    StreamReader sr = new StreamReader(ns);\n                    StreamWriter sw = new StreamWriter(ns);\n\n                    StreamWriter perip = null;\n\n                    sw.AutoFlush = true;\n                    string hostname = ((IPEndPoint)client.Client.RemoteEndPoint).Address.ToString();\n                    if (System.IO.Directory.Exists(\"iplogs\") && PerIPLogs)\n                    {\n                        try\n                        {\n                            if (!perips.Any(logs => ((FileStream)(logs.BaseStream)).Name.Contains(hostname)))\n                            {\n                                perip = new StreamWriter(\"iplogs/\" + hostname + \".txt\", true);\n                            perip.AutoFlush = true;\n                            \n                                perips.Add(perip);\n                            } else\n                            {\n                                foreach (StreamWriter ip in perips)\n                                {\n                                    if (((FileStream)(ip.BaseStream)).Name.Contains(hostname))\n                                    {\n                                        perip = ip; break;\n                                    }\n                                }\n                            }\n                        }\n                        catch\n                        {\n\n                        }\n                    }\n                    if (Active.CheckExists(hostname, actives))\n                    {\n                        if (Active.GetConnections(hostname, actives) >= Max_Total)\n                        {\n                            client.Close();\n                            if (Ban)\n                            {\n                                var aaa = new Ban();\n                                aaa.hostname = hostname;\n                                aaa.time = BanLength;\n                                bans.Add(aaa);\n                            }\n                        }\n                        else\n                        {\n                            Active.SetConnections(hostname, actives, Active.GetConnections(hostname, actives) + 1);\n                        }\n                    }\n                    else\n                    {\n                        actives.Add(new Active(hostname, 1));\n                    }\n\n                    if (Active.CheckExists(hostname, per_second))\n                    {\n                        if (Active.GetConnections(hostname, per_second) >= Max_PerSecond)\n                        {\n                            client.Close();\n                            if (Ban)\n                            {\n                                var aaa = new Ban();\n                                aaa.hostname = hostname;\n                                aaa.time = BanLength;\n                                bans.Add(aaa);\n                            }\n                        }\n                        else\n                        {\n                            Active.SetConnections(hostname, per_second, Active.GetConnections(hostname, per_second) + 1);\n                        }\n                    }\n                    else\n                    {\n                        per_second.Add(new Active(hostname, 1));\n                       \n                    }\n                    try\n                    {\n                        if (bans.Any(ban => ban.hostname == hostname))\n                        {\n                            client.Close();\n                        }\n                    }\n                    catch\n                    {\n\n                    }\n\n                    new Thread(new ThreadStart(() =>\n                    {\n                        Thread.CurrentThread.IsBackground = true;\n\n                        bool triggered = false;\n                        bool trigger2 = false;\n                        Client c = new Client(\"null\", \"null\", \"null\");\n                        string username = \"\";\n                        string password = \"\";\n                        string directory = \"/\";\n                        bool Authed = false;\n                        bool passive = false;\n                        int error = MaxErrors;\n                        \n\n                        //AbuseDBIP.com API\n                        bool hacking = false;\n                        bool bruteforce = false;\n                        bool webapp = false;\n                        string comment = \"\";\n\n\n                        bool banned = false;\n                        \n\n                        \n\n                        try\n                        {\n                            Thread.Sleep(100);\n                            Log(\"Connected - \" + hostname, \"in\", true, hostname, perip);\n                            LogWrite(\"220 \" + Banner.Replace(\"%host%\", Hostname) + \"\\r\\n\", sw, hostname, perip);\n\n                            while (client.Connected)\n                            {\n                                Thread.Sleep(100);\n                                //Receiving handler START\n                                string answ = \"\";\n                                bool flag = true;\n                                bool upper = true;\n\n                                while (flag)\n                                {\n                                    int a = sr.Read();\n                                    if (upper)\n                                    {\n                                        answ += char.ToUpper((char)a);\n                                    } else\n                                    {\n                                        answ += (char)a;\n                                    }\n                                    if (a == 13)\n                                    {\n                                        flag = false;\n                                    }\n                                    if (a == 0x20)\n                                    {\n                                        upper = false;\n                                    }\n                                    if (answ.Length > 128)\n                                    {\n                                        client.Close();\n                                    }\n                                }\n                                answ = answ.Trim();\n                                //Receiving handler END\n\n                                //Command processing.\n                                if (answ.Length >= 3) //We dont want dummies to spam/DDoS.\n                                {\n                                    Log(answ, \"in\", true, hostname, perip);\n                                }\n                                if (answ.StartsWith(\"CONNECT\") || answ.StartsWith(\"GET http\"))\n                                {\n                                    if (Ban)\n                                    {\n                                        var aaa = new Ban();\n                                        aaa.hostname = hostname;\n                                        aaa.time = BanLength;\n                                        bans.Add(aaa);\n                                        client.Close();\n                                    }\n                                    var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"System scanning (Proxy judging) using CONNECT or GET requests\", false, false, true, true, false);\n                                    a.Start();\n\n\n                                }\n                                if (answ.Length > 128)\n                                {\n                                    client.Close();\n                                }\n                                if (answ.StartsWith(\"OPTS\"))\n                                {\n                                    LogWrite(\"200 Encoding successfully changed!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.StartsWith(\"USER\") && username.Length < 3 && !Authed)\n                                {\n                                    string temp = answ.Substring(5).Trim();\n                                    Regex r = new Regex(\"^[a-zA-Z0-9]*$\");\n                                    if (r.IsMatch(temp) && temp.Length < 32 && temp.Length > 1 && (temp != \"anonymous\" && !AllowAnonymous))\n                                    {\n                                        username = temp;\n                                        LogWrite(\"331 This user is protected with password\\r\\n\", sw, hostname, perip);\n\n                                    }\n                                    else\n                                    {\n                                        LogWrite(\"530 Wrong username or/and password.\\r\\n\", sw, hostname, perip);\n                                        if (temp.Length > 128)\n                                        {\n                                            client.Close();\n                                        }\n                                    }\n                                }\n                                else if (answ.StartsWith(\"PASS\") && password.Length < 3 && !Authed)\n                                {\n                                    string temp = answ.Substring(5).Trim();\n                                    if (temp.Length < 32 && temp.Length > 1)\n                                    {\n                                        password = temp;\n                                        if (password == \"IEUser@\" && PunishScans)\n                                        {\n                                            if (Ban)\n                                            {\n                                                var aaa = new Ban();\n                                                aaa.hostname = hostname;\n                                                aaa.time = BanLength;\n                                                bans.Add(aaa);\n                                                client.Close();\n                                            }\n                                            var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"System scanning (port scanning) using NMAP\", false, false, false, true, false);\n                                            a.Start();\n\n\n\n                                        }\n                                        LogWrite(\"230 Successful login.\\r\\n\", sw, hostname, perip);\n                                        ns.ReadTimeout = 60000;\n                                        Authed = true;\n                                        c = new Client(username, password, hostname);\n\n                                        connected.Add(c);\n                                    }\n                                    else\n                                    {\n                                        LogWrite(\"530 Wrong username or/and password.\\r\\n\", sw, hostname, perip);\n                                        if (temp.Length > 128)\n                                        {\n                                            client.Close();\n                                        }\n                                    }\n                                }\n                                else if (answ.Trim() == \"SYST\")\n                                {\n                                    LogWrite(\"215 UNIX Type: L8\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim() == \"FEAT\")\n                                {\n                                    LogWrite(\"502 Command unavailable.\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim() == \"PWD\")\n                                {\n                                    LogWrite(\"257 \\\"\" + directory + \"\\\" is the current working directory\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim() == \"PORT\")\n                                {\n                                    LogWrite(\"502 Command unavailable.\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim().StartsWith(\"TYPE\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim().StartsWith(\"STOR\") && Authed)\n                                {\n                                    Thread.Sleep(2000);\n                                    if (passives.ContainsKey(c))\n                                    {\n                                        Connectivity connn;\n                                        passives.TryGetValue(c, out connn);\n                                        if (connn.tcp.Connected)\n                                        {\n                                            Thread.Sleep(1000);\n                                            LogWrite(\"150 Ok to send data.\\r\\n\", sw, hostname, perip);\n                                            Thread.Sleep(100);\n                                            List<byte> filess = new List<byte>();\n                                            var bytes = default(byte[]);\n                                            using (var memstream = new MemoryStream())\n                                            {\n                                                var buffer = new byte[512];\n                                                var bytesRead = default(int);\n                                                while ((bytesRead = connn.sr.BaseStream.Read(buffer, 0, buffer.Length)) > 0)\n                                                    memstream.Write(buffer, 0, bytesRead);\n                                                bytes = memstream.ToArray();\n                                            }\n                                            System.IO.File.WriteAllBytes(\"dumps/dump_i\" + rnd.Next(1, 2000000000).ToString() + \".txt\", bytes);\n                                            Thread.Sleep(200);\n                                            LogWrite(\"226 Transfer complete!\\r\\n\", sw, hostname, perip);\n\n                                            if (Ban)\n                                            {\n                                                var aaa = new Ban();\n                                                aaa.hostname = hostname;\n                                                aaa.time = BanLength;\n                                                bans.Add(aaa);\n                                                client.Close();\n                                            }\n                                            var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"Unauthorized system access using FTP\", true, false, false, false, false);\n                                            a.Start();\n\n\n                                        }\n                                        else\n                                        {\n                                            client.Close();\n                                            c.Connected = false;\n                                        }\n                                    }\n                                }\n                                else if (answ.StartsWith(\"RETR\") && Authed)\n                                {\n                                    Thread.Sleep(2000);\n                                    string filename = answ.Substring(5).Trim().Replace(\"/\", \"\");\n                                    File aaaa = null;\n                                    foreach (File aa in files)\n                                    {\n                                        if (aa.name == filename)\n                                        {\n                                            aaaa = aa;\n                                        }\n                                    }\n                                    if (passives.ContainsKey(c) && aaaa != null)\n                                    {\n                                        Connectivity connn;\n                                        passives.TryGetValue(c, out connn);\n                                        if (connn.tcp.Connected)\n                                        {\n                                            Thread.Sleep(1000);\n                                            LogWrite(\"150 Ok to send data.\\r\\n\", sw, hostname, perip);\n                                            Thread.Sleep(100);\n                                            //       byte[] file = aaaa.content;\n                                            //Encoding.ASCII.GetChars(file);\n                                            //      connn.sw.Write(chars, 0, file.Length);\n                                            //      connn.tcp.Close();\n                                            SendFile(aaaa, connn.sw);\n                                            connn.tcp.Close();\n                                            Thread.Sleep(200);\n                                            LogWrite(\"226 Transfer complete!\\r\\n\", sw, hostname, perip);\n\n                                            if (Ban)\n                                            {\n                                                var aaa = new Ban();\n                                                aaa.hostname = hostname;\n                                                aaa.time = BanLength;\n                                                bans.Add(aaa);\n                                                client.Close();\n                                            }\n                                            var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"Unauthorized system access using FTP\", true, false, false, false, false);\n                                            a.Start();\n                                        }\n                                        else\n                                        {\n                                            client.Close();\n                                            c.Connected = false;\n                                        }\n                                    }\n\n                                }\n                                else if (answ.Trim() == \"PASV\" && Authed)\n                                {\n                                    if (Authed && !passive)\n                                    {\n                                        LogWrite(\"227 Entering Passive Mode \" + PasvInit(PortPasv, Hostname) + \"\\r\\n\", sw, hostname, perip);\n                                        c.passive = true;\n                                    }\n                                }\n                                else if (answ.Trim().StartsWith(\"SIZE\") && Authed)\n                                {\n                                    string filename = answ.Substring(5).Trim().Replace(\"/\", \"\");\n                                    File aaaa = null;\n                                    foreach (File aa in files)\n                                    {\n                                        if (aa.name == filename)\n                                        {\n                                            aaaa = aa;\n                                        }\n                                    }\n                                    if (aaaa != null)\n                                    {\n                                        LogWrite(\"213 \" + aaaa.size.ToString(), sw, hostname, perip);\n                                    }\n                                }\n\n                                else if (answ.Trim().StartsWith(\"LIST\") && Authed)\n                                {\n                                    Thread.Sleep(1500);\n                                    if (passives.ContainsKey(c))\n                                    {\n                                        Connectivity connn;\n                                        passives.TryGetValue(c, out connn);\n                                        if (connn.tcp.Connected)\n                                        {\n                                            string Builder = \"\";\n                                            Builder += \"drwxrwxrwx 5 root root 12288 Dec  1 16:51 .\\r\\n\";\n                                            Builder += \"drwxrwxrwx 5 root root 12288 Dec  1 16:51 ..\\r\\n\";\n                                            int length = 5;\n                                            foreach (File file in files)\n                                            {\n                                                if (file.size.ToString().Length > length)\n                                                {\n                                                    length = file.size.ToString().Length;\n                                                }\n                                            }\n                                            foreach (File file in files)\n                                            {\n                                                Builder += file.chmod;\n                                                Builder += \" \" + rnd.Next(1, 9) + \" \";\n                                                Builder += \"root root \";\n                                                Builder += new string(' ', length - file.size.ToString().Length) + file.size.ToString();\n                                                Builder += \" \" + file.creation;\n                                                Builder += \" \" + file.name + \"\\r\\n\";\n                                            }\n                                            LogWrite(\"150 Here comes the directory listing.\\r\\n\", sw, hostname, perip);\n                                            Thread.Sleep(100);\n                                            connn.sw.Write(Builder);\n                                            connn.tcp.Close();\n                                            Thread.Sleep(100);\n                                            LogWrite(\"226 Directory send OK\\r\\n\", sw, hostname, perip);\n\n                                        }\n                                        else\n                                        {\n                                            client.Close();\n                                            c.Connected = false;\n                                        }\n                                    }\n                                }\n                                else if (answ.StartsWith(\"CWD\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.StartsWith(\"CPFR\"))\n                                {\n                                    //Fun part: tricking random exploiters. Very \"hackers\"\n                                    triggered = true; //First level trigger\n                                    LogWrite(\"350 Need more information.\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim().StartsWith(\"CPTO\") && triggered)\n                                {\n                                    LogWrite(\"250 Need more information.\\r\\n\", sw, hostname, perip);\n\n                                }\n                                else if (answ.Trim().StartsWith(\"AUTH\"))\n                                {\n                                    LogWrite(\"502 Please use plain FTP.\\r\\n\", sw, hostname, perip); // We dont want them to use security.\n                                }\n                                else if (Authed && username == \"admin\" && md5(password) == \"\")\n                                {\n                                    //Todo: admin cmds\n                                }\n                                else if (answ.Trim().StartsWith(\"CLNT\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (Authed && answ.Trim().StartsWith(\"NOOP\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                } else if (Authed && answ.Trim().StartsWith(\"REST\"))\n                                {\n                                    LogWrite(\"502 There is no such command.\\r\\n\", sw, hostname, perip);\n                                }\n                                else\n                                {\n                                    if (answ.Length >= 3)\n                                    {\n                                        error--;\n                                        if (error <= 0)\n                                        {\n                                            client.Close();\n                                        }\n\n                                    }\n                                }\n                                if (answ.Contains(\"php\") && triggered)\n                                {\n                                    trigger2 = true; //Second level trigger\n                                }\n                                if (trigger2)\n                                {\n                                    LogWrite(\"110 Illegal activity was detected.\\r\\n\", sw, hostname, perip);\n                                    LogWrite(\"110 Please, log off now.\\r\\n\", sw, hostname, perip);\n                                    if (Ban)\n                                    {\n                                        var aaa = new Ban();\n                                        aaa.hostname = hostname;\n                                        aaa.time = BanLength;\n                                        bans.Add(aaa);\n                                        client.Close();\n                                    }\n                                    var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"RCE Attempt at 21 port using ProFTPd exploit\", true, false, false, false, false);\n                                    a.Start();\n\n\n\n                                }\n\n                            }\n\n                        }\n                        catch (Exception e)\n                        {\n                            client.Close();\n                            c.Connected = false;\n                        }\n                        Active.SetConnections(hostname, actives, Active.GetConnections(hostname, actives) - 1);\n                        if (PerIPLogs)\n                        {\n                            try\n                            {\n                                perips.Remove(perip);\n                                perip.Close();\n                            } catch\n                            {\n\n                            }\n                        }\n                    }\n                    )).Start();\n                }\n            }).Start();\n            new Thread(() =>\n            {\n\n                //THIS IS A TOTAL MESS. DON'T TOUCH IT UNLESS YOU REALLY WANT TO EDIT PASV MODE ANYHOW.\n                //Shortly how it works:\n                //1. Client connects to main port.\n                //2. Initiates PASV mode\n                //3. He is then set as \"passive\"\n                //4. He connects to THIS one.\n                //5. He is then assigned a Connectivity based of his hostname and either or not he is still connected.\n                //6. This basically creates a link between Main socket and Pasv socket, allowing Main to access Pasv using a Dictionary.\n                Thread.CurrentThread.IsBackground = true;\n\n                Client cll = new Client(null, null, null);\n                while (true)\n                {\n                    TcpClient client = pasv.AcceptTcpClient();\n                    NetworkStream ns = client.GetStream();\n                    ns.ReadTimeout = 3000;\n                    ns.WriteTimeout = 3000;\n                    StreamReader sr = new StreamReader(ns);\n                    StreamWriter sw = new StreamWriter(ns);\n\n                    sw.AutoFlush = true;\n                    string hostname = ((IPEndPoint)client.Client.RemoteEndPoint).Address.ToString();\n\n                    try\n                    {\n                        if (bans.Any(ban => ban.hostname == hostname))\n                        {\n                            client.Close();\n                        }\n                    }\n                    catch\n                    {\n\n                    }\n\n                    if (Active.CheckExists(hostname, pasv_actives))\n                    {\n                        if (Active.GetConnections(hostname, pasv_actives) >= Max_Total)\n                        {\n                            client.Close();\n                            if (Ban)\n                            {\n                                var aaa = new Ban();\n                                aaa.hostname = hostname;\n                                aaa.time = BanLength;\n                                bans.Add(aaa);\n                            }\n                        }\n                        else\n                        {\n                            Active.SetConnections(hostname, pasv_actives, Active.GetConnections(hostname, pasv_actives) + 1);\n                        }\n                    }\n                    else\n                    {\n                        pasv_actives.Add(new Active(hostname, 1));\n                    }\n                    Thread user = new Thread(new ThreadStart(() =>\n                    {\n                        Thread.CurrentThread.IsBackground = true;\n\n                        Client c = new Client(\"1\", \"2\", \"3\");\n\n                        \n\n                        try\n                        {\n                            bool ispresent = false;\n                            foreach (Client cl in connected)\n                            {\n                                if (cl.hostname == hostname && cl.Connected)\n                                {\n                                    c = cl;\n                                    ispresent = true;\n                                }\n                            }\n                            if (!ispresent)\n                            {\n                                client.Close();\n\n                            }\n                            else\n                            {\n                                Connectivity ca = new Connectivity();\n                                ca.sr = sr;\n                                ca.sw = sw;\n                                ca.tcp = client;\n                                passives.Add(c, ca);\n                                /*  while (client.Connected)\n                                  {\n                                      Thread.Sleep(3000);\n                                  }*/\n                                for (int i = 0; client.Connected; i++)\n                                {\n                                    Thread.Sleep(1000);\n                                    if (i >= 120)\n                                    {\n                                        client.Close();\n                                        passives.Remove(c);\n                                    }\n                                }\n                                client.Close();\n                                passives.Remove(c);\n                            }\n                        }\n                        catch (Exception e)\n                        {\n                            if (!e.Message.StartsWith(\"An item\"))\n                            {\n                                client.Close();\n                                passives.Remove(c);\n                            }\n                        }\n                        Active.SetConnections(hostname, pasv_actives, Active.GetConnections(hostname, pasv_actives) - 1);\n                    }\n\n                    ));\n                    user.Start();\n\n\n                }\n            }).Start();\n            while (true)\n            {\n                string ok = Console.ReadLine();\n                //TODO: Internal command handler\n            }\n\n        }\n        /// <summary>\n        /// Initializes files for LIST or RETR.\n        /// </summary>\n        private static void InitializeFiles()\n        {\n            \n            if (config.files.Count > 0)\n            {\n                foreach (CJSON_FILE json in config.files)\n                {\n                    if (!json.Content.StartsWith(\"---\"))\n                    {\n                        File file = new File(json.Name, json.Content.Length, \"-rw-r--r--\", \"Dec 1 15:11\", json.Content, root);\n                        files.Add(file);\n                    } else\n                    {\n                        try\n                        {\n                            var filecontents = System.IO.File.ReadAllBytes(json.Content.Substring(3, json.Content.Length - 3));\n                            File file = new File(json.Name, filecontents.Length, \"-rw-r--r--\", \"Dec 1 15:11\", filecontents, root);\n                            files.Add(file);\n                        } catch (Exception e)\n                        {\n                            Console.WriteLine(e.Message);\n                        }\n\n                    }\n                }\n            } else\n            {\n                File file = new File(\"readme.txt\", 3, \"-rw-r--r--\", \"Dec 1 15:10\", \"Hi!\", root);\n                files.Add(file);\n            }\n            \n        }\n\n        /// <summary>\n        /// Sends contents of files in 2 kilobyte packs\n        /// </summary>\n        /// <param name=\"file\">File to send</param>\n        /// <param name=\"sw\">Actual StreamWriter of PASV mode</param>\n        public static void SendFile(File file, StreamWriter sw)\n        {\n            if (file.size <= BufferSize)\n            {\n                sw.BaseStream.Write(file.content, 0, file.size);\n            } else\n            {\n                //Ok boomer\n                //1. We calculate amount of steps (a.k.a how much should we do the loop)\n                //2. We calculate offtop based on steps we already passed\n                //3. We take BUFFERSIZE bytes since that offtop and send them......\n                //it's hard but here's the actual code:\n\n                int Steps = 0;\n                int Offtop = 0;\n                int Leftover = 0;\n\n                byte[] buffer = new byte[BufferSize];\n                Steps = Math.DivRem(file.size, BufferSize, out Leftover);\n                for(Offtop = 0; Offtop<Steps; Offtop++)\n                {\n                    Array.Copy(file.content, Offtop * BufferSize, buffer, 0, BufferSize);\n                    sw.BaseStream.Write(buffer, 0, buffer.Length);\n                    Thread.Sleep(50);  //Trying to limit possible attacks.\n                }\n                var last = new byte[file.size - Offtop * BufferSize];\n                Array.Copy(file.content, file.size - Leftover, last, 0, Leftover);\n                sw.BaseStream.Write(last, 0, last.Length);\n                Thread.Sleep(50);\n                return;\n            }\n        }\n    }\n}\n", "--> IT ONLY CONTAINS THE MOST RECENT CHANGES!\n\nv0.3.0:\n- Toggleable anonymous logins\n- Per-IP logs (create \"iplogs\" folder)\n- Max connections per second and max active connections are now changeable\n- Buffer size can now be changed (def.8192) \n- Fixed lower-case command handling\n- Final attempt to fix an encoding bug related to outputting control characters\n- Changeable bantime\n- Toggleable ban on big amount of errors (a.k.a some sort of service probe)\n- Moved default config to Resources"], "fixing_code": ["using System;\nusing System.Net.Sockets;\nusing System.Threading;\nusing System.Text.RegularExpressions;\nusing System.Net;\nusing System.Collections.Generic;\nusing System.Security.Cryptography;\nusing System.Text;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Linq;\n\nnamespace BearFTP\n{\n    class Program\n    {\n        //CONFIG\n        public static int PortDef = 21;\n        public static int PortPasv = 1222;\n        public static string Hostname = \"127.0.0.1\";\n        public static string Token = \"\";\n        public static string Banner = \"Welcome to FTP!\";\n\n        public static bool Report = true;\n        public static bool Ban = true;\n        public static bool PunishScans = true;\n        public static bool AllowAnonymous = false;\n        public static bool PerIPLogs = false;\n\n        public static int Max_PerSecond = 5;\n        public static int Max_Total = 6;\n        public static int BanLength = 3600;\n        public static int MaxErrors = 6;\n        public static int BufferSize = 8192;\n\n        //IP TempBan list (hostname:seconds)\n        public static List<Ban> bans = new List<Ban>();\n\n        //An instance of config to extract values\n        public static Config config;\n\n        //Used because everybody likes random numbers.\n        public static Random rnd = new Random();\n        public static readonly HttpClient client = new HttpClient();\n        //List of all connected (to main port) clients\n        public static List<Client> connected = new List<Client>();\n\n        //Default directory. TODO: Implement directories\n        public static Directory root = new Directory();\n\n        //Current version\n        public static string _VERSION = \"v0.3.0 BETA\";\n\n        //Default log.\n        public static StreamWriter logfile = new StreamWriter(\"log.txt\", true);\n\n        //Per-IP logs\n        public static List<StreamWriter> perips = new List<StreamWriter>();\n\n        //Dictionary of passvie clients (clients with PASV mode. Used to communicate directly later.)\n        public static Dictionary<Client, Connectivity> passives = new Dictionary<Client, Connectivity>();\n\n        //List of connections per second from hostname\n        public static List<Active> per_second = new List<Active>();\n        //List of overall connections from hostname\n        public static List<Active> actives = new List<Active>();\n\n        //List of overall connections to PASV\n        public static List<Active> pasv_actives = new List<Active>();\n\n        /// <summary>\n        /// Reports an IP\n        /// </summary>\n        /// <param name=\"hostname\">IP to report</param>\n        /// <param name=\"comment\">Logs or comments regarding report</param>\n        /// <param name=\"hacking\">Is accused in hacking?</param>\n        /// <param name=\"brute\">Is accused in bruting?</param>\n        /// <param name=\"webapp_h\">Is accused in webapp hacking?</param>\n        /// <param name=\"scanning\">Is accused in portscanning?</param>\n        /// <param name=\"ddos\">Is accused in DDoS</param>\n        /// <returns>A task to execute</returns>\n        public static async System.Threading.Tasks.Task ReportAsync(string hostname, string comment, bool hacking, bool brute, bool webapp_h, bool scanning, bool ddos)\n        {\n\n            string bad = \"\";\n            if (hacking)\n            {\n                bad += \"15,\";\n            }\n            if (brute)\n            {\n                bad += \"18,5,\";\n            }\n            if (webapp_h)\n            {\n                bad += \"21,\";\n            }\n            if (scanning)\n            {\n                bad += \"14,\";\n            }\n            if (ddos)\n            {\n                bad += \"4,\";\n            }\n            bad = bad.Substring(0, bad.Length - 1);\n            if (Report) {\n                try\n                {\n                    using (var httpClient = new HttpClient())\n                    {\n                        using (var request = new HttpRequestMessage(new HttpMethod(\"POST\"), \"https://api.abuseipdb.com/api/v2/report\"))\n                        {\n                            request.Headers.TryAddWithoutValidation(\"Key\", Token);\n                            request.Headers.TryAddWithoutValidation(\"Accept\", \"application/json\");\n\n                            var contentList = new List<string>();\n                            contentList.Add($\"ip={Uri.EscapeDataString(hostname)}\");\n                            contentList.Add(\"categories=\" + bad);\n                            contentList.Add($\"comment={Uri.EscapeDataString(comment)}\");\n                            request.Content = new StringContent(string.Join(\"&\", contentList));\n                            request.Content.Headers.ContentType = new MediaTypeHeaderValue(\"application/x-www-form-urlencoded\");\n                            Console.WriteLine(\"=== REPORTING IP.... \" + hostname);\n                            var response = await httpClient.SendAsync(request);\n                            if (response.StatusCode == HttpStatusCode.OK)\n                            {\n                                Console.WriteLine(\"=== REPORTED IP \" + hostname);\n                            }\n                            else\n                            {\n                                Console.WriteLine(\"=== ERROR WHILE REPORTING: \" + response.StatusCode.ToString());\n                                Console.WriteLine(\"=== \" + response.Content.ToString());\n                            }\n                        }\n                    }\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(e.StackTrace);\n                }\n            }\n            \n        }\n        /// <summary>\n        /// Hashes a string using md5\n        /// </summary>\n        /// <param name=\"input\">String to hash</param>\n        /// <returns>Hashed string</returns>\n        public static string md5(string input)\n        {\n            MD5 md5 = MD5.Create();\n            byte[] inputBytes = System.Text.Encoding.ASCII.GetBytes(input);\n            byte[] hash = md5.ComputeHash(inputBytes);\n            StringBuilder sb = new StringBuilder();\n            for (int i = 0; i < hash.Length; i++)\n            {\n                sb.Append(hash[i].ToString(\"x2\"));\n            }\n            return sb.ToString();\n        }\n        public static List<File> files = new List<File>();\n\n        /// <summary>\n        /// Writes to the StreamWriter as well as logging actions\n        /// </summary>\n        /// <param name=\"text\">String to send over socket</param>\n        /// <param name=\"sw\">StreamWriter of a TCPClient</param>\n        /// <param name=\"IP\">Hostname of receiver</param>\n        /// <param name=\"perip\">PerIP StreamWriter</param>\n        public static void LogWrite(string text, StreamWriter sw, string IP, StreamWriter perip = null)\n        {\n            Log(text.Trim().Replace(\"\\r\", String.Empty).Replace(\"\\n\", String.Empty).Trim(), \"out\", true, IP, perip);\n            sw.Write(text);\n        }\n\n        /// <summary>\n        /// Used to calculate and format the string for PASV mode\n        /// </summary>\n        /// <param name=\"port\">Port of PASV</param>\n        /// <param name=\"host\">Hostname (IP ONLY!)</param>\n        /// <returns>Formatted string</returns>\n        public static string PasvInit(int port, string host)\n        {\n            string actual_host = host.Replace('.', ',');\n            string actual_port = \"\";\n            int p1 = 0;\n            int p2 = 0;\n            for (int i = 0; i < 255; i++)\n            {\n                if (port - (256 * i) < 256)\n                {\n                    p1 = i;\n                    break;\n                }\n            }\n            p2 = port - (256 * p1);\n\n            actual_port = p1 + \",\" + p2;\n\n            return \"(\" + actual_host + \",\" + actual_port + \")\";\n        }\n\n        /// <summary>\n        /// Checks using pastebin if a new version is out. Replace with your own URL\n        /// </summary>\n        /// <returns></returns>\n        public static bool CheckVersion()\n        {\n            using (var client = new WebClient())\n            {\n                try\n                {\n                    var responseString = client.DownloadString(\"https://pastebin.com/raw/9dCZvME9\");\n                    if (responseString.Trim() != _VERSION)\n                    {\n                        return false;\n                    }\n                    return true;\n                } catch { return false; }\n                \n            }\n        }\n\n        /// <summary>\n        /// Logs text and prints it to console\n        /// </summary>\n        /// <param name=\"text\">Text of a message</param>\n        /// <param name=\"dir\">Either \"in\" for << or \"out\" for >></param>\n        /// <param name=\"date\">Include date in format [MM/dd/yyyy HH:mm:ss] or not</param>\n        /// <param name=\"IP\">IP Address to include before date (you can't have this true and date set to false)</param>\n        /// <param name=\"sw\">PerIP StreamWriter handler</param>\n        public static void Log(string text, string dir, bool date = true, string IP = null, StreamWriter sw = null)\n        {\n            string Builder = \"\";\n            if (date)\n            {\n                if (IP == null)\n                {\n                    Builder += \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \";\n                } else\n                {\n                    Builder += \"[\" + IP + \" \" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \";\n                }\n            }\n            if (dir == \"in\")\n            {\n                Builder += \"<< \";\n            } else\n            {\n                Builder += \">> \";\n            }\n            \n            Builder += text;\n\n            Builder = Regex.Replace(Builder, @\"[^\\u0020-\\u007E]\", \" \");\n\n            if (sw != null && PerIPLogs)\n            {\n                try\n                {\n                    sw.WriteLine(Builder);\n                } catch\n                {\n\n                }\n            }\n\n            logfile.WriteLine(Builder);\n            Console.WriteLine(Builder);\n        }\n\n        static void Main(string[] args)\n        {\n            Console.OutputEncoding = Encoding.Unicode;\n            logfile.AutoFlush = true;\n            Log(\"Initialized server! >>\", \"in\");\n            config = new Config(\"config.json\");\n            PortDef = config.PortDef;\n            PortPasv = config.PortPasv;\n            Hostname = config.Hostname;\n            Token = config.Token;\n            Banner = config.Banner;\n            Report = config.Report;\n            Ban = config.Ban;\n            PunishScans = config.PunishScans;\n            AllowAnonymous = config.AllowAnonymous;\n            Max_PerSecond = config.Max_PerSecond;\n            Max_Total = config.Max_Total;\n            BanLength = config.BanLength;\n            MaxErrors = config.MaxErrors;\n            BufferSize = config.BufferSize;\n            PerIPLogs = config.PerIPLogs;\n\n            if (PortDef == PortPasv)\n            {\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(\"-> You are probably running a default/incorrect config! Please, edit it before starting the server\");\n                Console.ResetColor();\n                Environment.Exit(1);\n            }\n\n            \n\n            //Yes, it starts..\n            Console.WriteLine(\"- BearFTP OpenSource HoneyPot Server \" + _VERSION + \" -\");\n            Console.WriteLine(\"- By IKTeam -> https://github.com/kolya5544/BearFTP -\");\n            Console.WriteLine(\"Checking for updates...\");\n            if (!CheckVersion())\n            {\n                Console.ForegroundColor = ConsoleColor.Red;\n                Console.WriteLine(\"----> You are *probably* running an outdated version of our software!\");\n                Console.ResetColor();\n            } else\n            {\n                Console.WriteLine(\"You are running the latest version!\");\n            }\n            Console.WriteLine(\"Running on \" + Hostname + \":\" + PortDef.ToString());\n            Console.WriteLine(\"PASV params: \" + PasvInit(PortPasv, Hostname));\n            root.path = \"/\";\n            InitializeFiles();\n            TcpListener ftp = new TcpListener(PortDef);\n            TcpListener pasv = new TcpListener(PortPasv);\n            //Ban expiration handling.\n            new Thread(new ThreadStart(() => {\n                Thread.CurrentThread.IsBackground = true;\n\n                while (true)\n                {\n                    Thread.Sleep(2000);\n                    for (int i = 0; i<bans.Count; i++) { \n                        bans[i].time -= 2;\n                        if (bans[i].time <= 0)\n                        {\n                            bans.Remove(bans[i]);\n                            i--;\n                        }\n                    }\n                }\n            })).Start();\n            //Connections per seconds (antibot) handling\n            new Thread(new ThreadStart(() => {\n                Thread.CurrentThread.IsBackground = true;\n\n                while (true)\n                {\n                    Thread.Sleep(1000);\n                    for (int i = 0; i < per_second.Count; i++)\n                    {\n                        if (per_second[i].connected > 0)\n                        {\n                            per_second[i].connected -= 1;\n                        }\n                    }\n                 //   Console.WriteLine(\"[DBG] Iterated per_second!\");\n                }\n            })).Start();\n            ftp.Start();\n            pasv.Start();\n            new Thread(() =>\n            {\n                Thread.CurrentThread.IsBackground = true;\n                while (true)\n                {\n                    TcpClient client = ftp.AcceptTcpClient();\n\n                    NetworkStream ns = client.GetStream();\n                    ns.ReadTimeout = 3000;\n                    ns.WriteTimeout = 3000;\n                    StreamReader sr = new StreamReader(ns);\n                    StreamWriter sw = new StreamWriter(ns);\n\n                    StreamWriter perip = null;\n\n                    sw.AutoFlush = true;\n                    string hostname = ((IPEndPoint)client.Client.RemoteEndPoint).Address.ToString();\n                    if (System.IO.Directory.Exists(\"iplogs\") && PerIPLogs)\n                    {\n                        try\n                        {\n                            if (!perips.Any(logs => ((FileStream)(logs.BaseStream)).Name.Contains(hostname)))\n                            {\n                                perip = new StreamWriter(\"iplogs/\" + hostname + \".txt\", true);\n                            perip.AutoFlush = true;\n                            \n                                perips.Add(perip);\n                            } else\n                            {\n                                foreach (StreamWriter ip in perips)\n                                {\n                                    if (((FileStream)(ip.BaseStream)).Name.Contains(hostname))\n                                    {\n                                        perip = ip; break;\n                                    }\n                                }\n                            }\n                        }\n                        catch\n                        {\n\n                        }\n                    }\n                    if (Active.CheckExists(hostname, actives))\n                    {\n                        if (Active.GetConnections(hostname, actives) >= Max_Total)\n                        {\n                            client.Close();\n                            if (Ban)\n                            {\n                                var aaa = new Ban();\n                                aaa.hostname = hostname;\n                                aaa.time = BanLength;\n                                bans.Add(aaa);\n                            }\n                        }\n                        else\n                        {\n                            Active.SetConnections(hostname, actives, Active.GetConnections(hostname, actives) + 1);\n                        }\n                    }\n                    else\n                    {\n                        actives.Add(new Active(hostname, 1));\n                    }\n\n                    if (Active.CheckExists(hostname, per_second))\n                    {\n                        if (Active.GetConnections(hostname, per_second) >= Max_PerSecond)\n                        {\n                            client.Close();\n                            if (Ban)\n                            {\n                                var aaa = new Ban();\n                                aaa.hostname = hostname;\n                                aaa.time = BanLength;\n                                bans.Add(aaa);\n                            }\n                        }\n                        else\n                        {\n                            Active.SetConnections(hostname, per_second, Active.GetConnections(hostname, per_second) + 1);\n                        }\n                    }\n                    else\n                    {\n                        per_second.Add(new Active(hostname, 1));\n                       \n                    }\n                    try\n                    {\n                        if (bans.Any(ban => ban.hostname == hostname))\n                        {\n                            client.Close();\n                        }\n                    }\n                    catch\n                    {\n\n                    }\n\n                    new Thread(new ThreadStart(() =>\n                    {\n                        Thread.CurrentThread.IsBackground = true;\n\n                        bool triggered = false;\n                        bool trigger2 = false;\n                        Client c = new Client(\"null\", \"null\", \"null\");\n                        string username = \"\";\n                        string password = \"\";\n                        string directory = \"/\";\n                        bool Authed = false;\n                        bool passive = false;\n                        int error = MaxErrors;\n                        \n\n                        //AbuseDBIP.com API\n                        bool hacking = false;\n                        bool bruteforce = false;\n                        bool webapp = false;\n                        string comment = \"\";\n\n\n                        bool banned = false;\n                        \n\n                        \n\n                        try\n                        {\n                            Thread.Sleep(100);\n                            Log(\"Connected - \" + hostname, \"in\", true, hostname, perip);\n                            LogWrite(\"220 \" + Banner.Replace(\"%host%\", Hostname) + \"\\r\\n\", sw, hostname, perip);\n\n                            while (client.Connected)\n                            {\n                                Thread.Sleep(100);\n                                \n                                string answ = sr.ReadLine(); //Who'd think this ACTUALLY works. BUT: It's doesnt work on Linux? (Needs testing)\n                                //Tested on Ubuntu 16.04 client and 18.04 server. Seems to work!\n                         \n                                string upperfix = answ.Split(' ')[0].ToUpper();\n                                answ.Replace(answ.Split(' ')[0], upperfix); //Fixing the lowercase commands an easy way\n\n                                //Command processing.\n                                if (answ.Length >= 3) //We dont want dummies to spam/DDoS.\n                                {\n                                    Log(answ, \"in\", true, hostname, perip);\n                                }\n                                if (answ.StartsWith(\"CONNECT\") || answ.StartsWith(\"GET http\"))\n                                {\n                                    if (Ban)\n                                    {\n                                        var aaa = new Ban();\n                                        aaa.hostname = hostname;\n                                        aaa.time = BanLength;\n                                        bans.Add(aaa);\n                                        client.Close();\n                                    }\n                                    var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"System scanning (Proxy judging) using CONNECT or GET requests\", false, false, true, true, false);\n                                    a.Start();\n\n\n                                }\n                                if (answ.Length > 128)\n                                {\n                                    client.Close();\n                                }\n                                if (answ.StartsWith(\"OPTS\"))\n                                {\n                                    LogWrite(\"200 Encoding successfully changed!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.StartsWith(\"USER\") && username.Length < 3 && !Authed)\n                                {\n                                    string temp = answ.Substring(5).Trim();\n                                    Regex r = new Regex(\"^[a-zA-Z0-9]*$\");\n                                    if (r.IsMatch(temp) && temp.Length < 32 && temp.Length > 1 && (temp != \"anonymous\" || AllowAnonymous))\n                                    {\n                                        username = temp;\n                                        LogWrite(\"331 This user is protected with password\\r\\n\", sw, hostname, perip);\n\n                                    }\n                                    else\n                                    {\n                                        LogWrite(\"530 Wrong username or/and password.\\r\\n\", sw, hostname, perip);\n                                        if (temp.Length > 128)\n                                        {\n                                            client.Close();\n                                        }\n                                    }\n                                }\n                                else if (answ.StartsWith(\"PASS\") && password.Length < 3 && !Authed)\n                                {\n                                    string temp = answ.Substring(5).Trim();\n                                    if (temp.Length < 32 && temp.Length > 1)\n                                    {\n                                        password = temp;\n                                        if (password == \"IEUser@\" && PunishScans)\n                                        {\n                                            if (Ban)\n                                            {\n                                                var aaa = new Ban();\n                                                aaa.hostname = hostname;\n                                                aaa.time = BanLength;\n                                                bans.Add(aaa);\n                                                client.Close();\n                                            }\n                                            var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"System scanning (port scanning) using NMAP\", false, false, false, true, false);\n                                            a.Start();\n\n\n\n                                        }\n                                        LogWrite(\"230 Successful login.\\r\\n\", sw, hostname, perip);\n                                        ns.ReadTimeout = 60000;\n                                        Authed = true;\n                                        c = new Client(username, password, hostname);\n\n                                        connected.Add(c);\n                                    }\n                                    else\n                                    {\n                                        LogWrite(\"530 Wrong username or/and password.\\r\\n\", sw, hostname, perip);\n                                        if (temp.Length > 128)\n                                        {\n                                            client.Close();\n                                        }\n                                    }\n                                }\n                                else if (answ.Trim() == \"SYST\")\n                                {\n                                    LogWrite(\"215 UNIX Type: L8\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim() == \"FEAT\")\n                                {\n                                    LogWrite(\"502 Command unavailable.\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim() == \"PWD\")\n                                {\n                                    LogWrite(\"257 \\\"\" + directory + \"\\\" is the current working directory\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim() == \"PORT\")\n                                {\n                                    LogWrite(\"502 Command unavailable.\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim().StartsWith(\"TYPE\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim().StartsWith(\"STOR\") && Authed)\n                                {\n                                    Thread.Sleep(2000);\n                                    if (passives.ContainsKey(c))\n                                    {\n                                        Connectivity connn;\n                                        passives.TryGetValue(c, out connn);\n                                        if (connn.tcp.Connected)\n                                        {\n                                            Thread.Sleep(1000);\n                                            LogWrite(\"150 Ok to send data.\\r\\n\", sw, hostname, perip);\n                                            Thread.Sleep(100);\n                                            List<byte> filess = new List<byte>();\n                                            var bytess = default(byte[]);\n                                            using (var memstream = new MemoryStream())\n                                            {\n                                                var buffer = new byte[512];\n                                                var bytesRead = default(int);\n                                                while ((bytesRead = connn.sr.BaseStream.Read(buffer, 0, buffer.Length)) > 0)\n                                                    memstream.Write(buffer, 0, bytesRead);\n                                                bytess = memstream.ToArray();\n                                            }\n                                            System.IO.File.WriteAllBytes(\"dumps/dump_i\" + rnd.Next(1, 2000000000).ToString() + \".txt\", bytess);\n                                            Thread.Sleep(200);\n                                            LogWrite(\"226 Transfer complete!\\r\\n\", sw, hostname, perip);\n\n                                            if (Ban)\n                                            {\n                                                var aaa = new Ban();\n                                                aaa.hostname = hostname;\n                                                aaa.time = BanLength;\n                                                bans.Add(aaa);\n                                                client.Close();\n                                            }\n                                            var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"Unauthorized system access using FTP\", true, false, false, false, false);\n                                            a.Start();\n\n\n                                        }\n                                        else\n                                        {\n                                            client.Close();\n                                            c.Connected = false;\n                                        }\n                                    }\n                                }\n                                else if (answ.StartsWith(\"RETR\") && Authed)\n                                {\n                                    Thread.Sleep(2000);\n                                    string filename = answ.Substring(5).Trim().Replace(\"/\", \"\");\n                                    File aaaa = null;\n                                    foreach (File aa in files)\n                                    {\n                                        if (aa.name == filename)\n                                        {\n                                            aaaa = aa;\n                                        }\n                                    }\n                                    if (passives.ContainsKey(c) && aaaa != null)\n                                    {\n                                        Connectivity connn;\n                                        passives.TryGetValue(c, out connn);\n                                        if (connn.tcp.Connected)\n                                        {\n                                            Thread.Sleep(1000);\n                                            LogWrite(\"150 Ok to send data.\\r\\n\", sw, hostname, perip);\n                                            Thread.Sleep(100);\n                                            //       byte[] file = aaaa.content;\n                                            //Encoding.ASCII.GetChars(file);\n                                            //      connn.sw.Write(chars, 0, file.Length);\n                                            //      connn.tcp.Close();\n                                            SendFile(aaaa, connn.sw);\n                                            connn.tcp.Close();\n                                            Thread.Sleep(200);\n                                            LogWrite(\"226 Transfer complete!\\r\\n\", sw, hostname, perip);\n\n                                            if (Ban)\n                                            {\n                                                var aaa = new Ban();\n                                                aaa.hostname = hostname;\n                                                aaa.time = BanLength;\n                                                bans.Add(aaa);\n                                                client.Close();\n                                            }\n                                            var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"Unauthorized system access using FTP\", true, false, false, false, false);\n                                            a.Start();\n                                        }\n                                        else\n                                        {\n                                            client.Close();\n                                            c.Connected = false;\n                                        }\n                                    }\n\n                                }\n                                else if (answ.Trim() == \"PASV\" && Authed)\n                                {\n                                    if (Authed && !passive)\n                                    {\n                                        LogWrite(\"227 Entering Passive Mode \" + PasvInit(PortPasv, Hostname) + \"\\r\\n\", sw, hostname, perip);\n                                        c.passive = true;\n                                    }\n                                }\n                                else if (answ.Trim().StartsWith(\"SIZE\") && Authed)\n                                {\n                                    string filename = answ.Substring(5).Trim().Replace(\"/\", \"\");\n                                    File aaaa = null;\n                                    foreach (File aa in files)\n                                    {\n                                        if (aa.name == filename)\n                                        {\n                                            aaaa = aa;\n                                        }\n                                    }\n                                    if (aaaa != null)\n                                    {\n                                        LogWrite(\"213 \" + aaaa.size.ToString(), sw, hostname, perip);\n                                    }\n                                }\n\n                                else if (answ.Trim().StartsWith(\"LIST\") && Authed)\n                                {\n                                    Thread.Sleep(1500);\n                                    if (passives.ContainsKey(c))\n                                    {\n                                        Connectivity connn;\n                                        passives.TryGetValue(c, out connn);\n                                        if (connn.tcp.Connected)\n                                        {\n                                            string Builder = \"\";\n                                            Builder += \"drwxrwxrwx 5 root root 12288 Dec  1 16:51 .\\r\\n\";\n                                            Builder += \"drwxrwxrwx 5 root root 12288 Dec  1 16:51 ..\\r\\n\";\n                                            int length = 5;\n                                            foreach (File file in files)\n                                            {\n                                                if (file.size.ToString().Length > length)\n                                                {\n                                                    length = file.size.ToString().Length;\n                                                }\n                                            }\n                                            foreach (File file in files)\n                                            {\n                                                Builder += file.chmod;\n                                                Builder += \" \" + rnd.Next(1, 9) + \" \";\n                                                Builder += \"root root \";\n                                                Builder += new string(' ', length - file.size.ToString().Length) + file.size.ToString();\n                                                Builder += \" \" + file.creation;\n                                                Builder += \" \" + file.name + \"\\r\\n\";\n                                            }\n                                            LogWrite(\"150 Here comes the directory listing.\\r\\n\", sw, hostname, perip);\n                                            Thread.Sleep(100);\n                                            connn.sw.Write(Builder);\n                                            connn.tcp.Close();\n                                            Thread.Sleep(100);\n                                            LogWrite(\"226 Directory send OK\\r\\n\", sw, hostname, perip);\n\n                                        }\n                                        else\n                                        {\n                                            client.Close();\n                                            c.Connected = false;\n                                        }\n                                    }\n                                }\n                                else if (answ.StartsWith(\"CWD\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.StartsWith(\"CPFR\"))\n                                {\n                                    //Fun part: tricking random exploiters. Very \"hackers\"\n                                    triggered = true; //First level trigger\n                                    LogWrite(\"350 Need more information.\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (answ.Trim().StartsWith(\"CPTO\") && triggered)\n                                {\n                                    LogWrite(\"250 Need more information.\\r\\n\", sw, hostname, perip);\n\n                                }\n                                else if (answ.Trim().StartsWith(\"AUTH\"))\n                                {\n                                    LogWrite(\"502 Please use plain FTP.\\r\\n\", sw, hostname, perip); // We dont want them to use security.\n                                }\n                                else if (Authed && username == \"admin\" && md5(password) == \"\")\n                                {\n                                    //Todo: admin cmds\n                                }\n                                else if (answ.Trim().StartsWith(\"CLNT\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                }\n                                else if (Authed && answ.Trim().StartsWith(\"NOOP\"))\n                                {\n                                    LogWrite(\"200 OK!\\r\\n\", sw, hostname, perip);\n                                } else if (Authed && answ.Trim().StartsWith(\"REST\"))\n                                {\n                                    LogWrite(\"502 There is no such command.\\r\\n\", sw, hostname, perip);\n                                }\n                                else\n                                {\n                                    if (answ.Length >= 3)\n                                    {\n                                        error--;\n                                        if (error <= 0)\n                                        {\n                                            client.Close();\n                                        }\n\n                                    }\n                                }\n                                if (answ.Contains(\"php\") && triggered)\n                                {\n                                    trigger2 = true; //Second level trigger\n                                }\n                                if (trigger2)\n                                {\n                                    LogWrite(\"110 Illegal activity was detected.\\r\\n\", sw, hostname, perip);\n                                    LogWrite(\"110 Please, log off now.\\r\\n\", sw, hostname, perip);\n                                    if (Ban)\n                                    {\n                                        var aaa = new Ban();\n                                        aaa.hostname = hostname;\n                                        aaa.time = BanLength;\n                                        bans.Add(aaa);\n                                        client.Close();\n                                    }\n                                    var a = ReportAsync(hostname, \"[\" + DateTime.Now.ToString(\"MM/dd/yyyy HH:mm:ss\") + \"] \" + \"RCE Attempt at 21 port using ProFTPd exploit\", true, false, false, false, false);\n                                    a.Start();\n\n\n\n                                }\n\n                            }\n\n                        }\n                        catch (Exception e)\n                        {\n                            client.Close();\n                            c.Connected = false;\n                        }\n                        Active.SetConnections(hostname, actives, Active.GetConnections(hostname, actives) - 1);\n                        if (PerIPLogs)\n                        {\n                            try\n                            {\n                                perips.Remove(perip);\n                                perip.Close();\n                            } catch\n                            {\n\n                            }\n                        }\n                    }\n                    )).Start();\n                }\n            }).Start();\n            new Thread(() =>\n            {\n\n                //THIS IS A TOTAL MESS. DON'T TOUCH IT UNLESS YOU REALLY WANT TO EDIT PASV MODE ANYHOW.\n                //Shortly how it works:\n                //1. Client connects to main port.\n                //2. Initiates PASV mode\n                //3. He is then set as \"passive\"\n                //4. He connects to THIS one.\n                //5. He is then assigned a Connectivity based of his hostname and either or not he is still connected.\n                //6. This basically creates a link between Main socket and Pasv socket, allowing Main to access Pasv using a Dictionary.\n                Thread.CurrentThread.IsBackground = true;\n\n                Client cll = new Client(null, null, null);\n                while (true)\n                {\n                    TcpClient client = pasv.AcceptTcpClient();\n                    NetworkStream ns = client.GetStream();\n                    ns.ReadTimeout = 3000;\n                    ns.WriteTimeout = 3000;\n                    StreamReader sr = new StreamReader(ns);\n                    StreamWriter sw = new StreamWriter(ns);\n\n                    sw.AutoFlush = true;\n                    string hostname = ((IPEndPoint)client.Client.RemoteEndPoint).Address.ToString();\n\n                    try\n                    {\n                        if (bans.Any(ban => ban.hostname == hostname))\n                        {\n                            client.Close();\n                        }\n                    }\n                    catch\n                    {\n\n                    }\n\n                    if (Active.CheckExists(hostname, pasv_actives))\n                    {\n                        if (Active.GetConnections(hostname, pasv_actives) >= Max_Total)\n                        {\n                            client.Close();\n                            if (Ban)\n                            {\n                                var aaa = new Ban();\n                                aaa.hostname = hostname;\n                                aaa.time = BanLength;\n                                bans.Add(aaa);\n                            }\n                        }\n                        else\n                        {\n                            Active.SetConnections(hostname, pasv_actives, Active.GetConnections(hostname, pasv_actives) + 1);\n                        }\n                    }\n                    else\n                    {\n                        pasv_actives.Add(new Active(hostname, 1));\n                    }\n                    Thread user = new Thread(new ThreadStart(() =>\n                    {\n                        Thread.CurrentThread.IsBackground = true;\n\n                        Client c = new Client(\"1\", \"2\", \"3\");\n\n                        \n\n                        try\n                        {\n                            bool ispresent = false;\n                            foreach (Client cl in connected)\n                            {\n                                if (cl.hostname == hostname && cl.Connected)\n                                {\n                                    c = cl;\n                                    ispresent = true;\n                                }\n                            }\n                            if (!ispresent)\n                            {\n                                client.Close();\n\n                            }\n                            else\n                            {\n                                Connectivity ca = new Connectivity();\n                                ca.sr = sr;\n                                ca.sw = sw;\n                                ca.tcp = client;\n                                passives.Add(c, ca);\n                                /*  while (client.Connected)\n                                  {\n                                      Thread.Sleep(3000);\n                                  }*/\n                                for (int i = 0; client.Connected; i++)\n                                {\n                                    Thread.Sleep(1000);\n                                    if (i >= 120)\n                                    {\n                                        client.Close();\n                                        passives.Remove(c);\n                                    }\n                                }\n                                client.Close();\n                                passives.Remove(c);\n                            }\n                        }\n                        catch (Exception e)\n                        {\n                            if (!e.Message.StartsWith(\"An item\"))\n                            {\n                                client.Close();\n                                passives.Remove(c);\n                            }\n                        }\n                        Active.SetConnections(hostname, pasv_actives, Active.GetConnections(hostname, pasv_actives) - 1);\n                    }\n\n                    ));\n                    user.Start();\n\n\n                }\n            }).Start();\n            while (true)\n            {\n                string ok = Console.ReadLine();\n                //TODO: Internal command handler\n            }\n\n        }\n        /// <summary>\n        /// Initializes files for LIST or RETR.\n        /// </summary>\n        private static void InitializeFiles()\n        {\n            \n            if (config.files.Count > 0)\n            {\n                foreach (CJSON_FILE json in config.files)\n                {\n                    if (!json.Content.StartsWith(\"---\"))\n                    {\n                        File file = new File(json.Name, json.Content.Length, \"-rw-r--r--\", \"Dec 1 15:11\", json.Content, root);\n                        files.Add(file);\n                    } else\n                    {\n                        try\n                        {\n                            var filecontents = System.IO.File.ReadAllBytes(json.Content.Substring(3, json.Content.Length - 3));\n                            File file = new File(json.Name, filecontents.Length, \"-rw-r--r--\", \"Dec 1 15:11\", filecontents, root);\n                            files.Add(file);\n                        } catch (Exception e)\n                        {\n                            Console.WriteLine(e.Message);\n                        }\n\n                    }\n                }\n            } else\n            {\n                File file = new File(\"readme.txt\", 3, \"-rw-r--r--\", \"Dec 1 15:10\", \"Hi!\", root);\n                files.Add(file);\n            }\n            \n        }\n\n        /// <summary>\n        /// Sends contents of files in 2 kilobyte packs\n        /// </summary>\n        /// <param name=\"file\">File to send</param>\n        /// <param name=\"sw\">Actual StreamWriter of PASV mode</param>\n        public static void SendFile(File file, StreamWriter sw)\n        {\n            if (file.size <= BufferSize)\n            {\n                sw.BaseStream.Write(file.content, 0, file.size);\n            } else\n            {\n                //Ok boomer\n                //1. We calculate amount of steps (a.k.a how much should we do the loop)\n                //2. We calculate offtop based on steps we already passed\n                //3. We take BUFFERSIZE bytes since that offtop and send them......\n                //it's hard but here's the actual code:\n\n                int Steps = 0;\n                int Offtop = 0;\n                int Leftover = 0;\n\n                byte[] buffer = new byte[BufferSize];\n                Steps = Math.DivRem(file.size, BufferSize, out Leftover);\n                for(Offtop = 0; Offtop<Steps; Offtop++)\n                {\n                    Array.Copy(file.content, Offtop * BufferSize, buffer, 0, BufferSize);\n                    sw.BaseStream.Write(buffer, 0, buffer.Length);\n                    Thread.Sleep(50);  //Trying to limit possible attacks.\n                }\n                var last = new byte[file.size - Offtop * BufferSize];\n                Array.Copy(file.content, file.size - Leftover, last, 0, Leftover);\n                sw.BaseStream.Write(last, 0, last.Length);\n                Thread.Sleep(50);\n                return;\n            }\n        }\n    }\n}\n", "--> IT ONLY CONTAINS THE MOST RECENT CHANGES!\n\nv0.3.1:\n- Fixed AllowAnonymous handling (oops)\n- One more attempt to fix encoding break on some characters (only affects console)\n- Fixed improper handling of incoming data on base socket (a.k.a base socket thread overuse fix)"], "filenames": ["BearFTP/Program.cs", "CHANGELOG.txt"], "buggy_code_start_loc": [498, 3], "buggy_code_end_loc": [657, 13], "fixing_code_start_loc": [498, 3], "fixing_code_end_loc": [633, 7], "type": "CWE-20", "message": "Improper connection handling in the base connection handler in IKTeam BearFTP before v0.3.1 allows a remote attacker to achieve denial of service via a Slowloris approach by sending a large volume of small packets.", "other": {"cve": {"id": "CVE-2020-8815", "sourceIdentifier": "cve@mitre.org", "published": "2020-02-12T15:15:14.803", "lastModified": "2020-02-19T20:18:09.183", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper connection handling in the base connection handler in IKTeam BearFTP before v0.3.1 allows a remote attacker to achieve denial of service via a Slowloris approach by sending a large volume of small packets."}, {"lang": "es", "value": "Un manejo inapropiado de la conexi\u00f3n en el manejador de conexi\u00f3n base en IKTeam BearFTP versiones anteriores a v0.3.1 permite a un atacante remoto alcanzar una denegaci\u00f3n de servicio por medio de un enfoque de Slowloris mediante el env\u00edo de un gran volumen de paquetes peque\u00f1os."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:iktm:bearftp:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.3.1", "matchCriteriaId": "7B3A67F1-FB51-47EF-ADC5-E099C79FF879"}]}]}], "references": [{"url": "https://github.com/kolya5544/BearFTP", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/kolya5544/BearFTP/blob/f5a8047587c1a96456d4f291c12b038b9ab0d0c5/BearFTP/Program.cs#L503-L525", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/kolya5544/BearFTP/commit/17a6ead72d4a25cbfcef5e27613aa0a5f88a4b26", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kolya5544/BearFTP/commit/66dc9d95e58bca133f265457d32007cdf38b66ad", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kolya5544/BearFTP/releases/tag/0.4.0", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kolya5544/BearFTP/commit/17a6ead72d4a25cbfcef5e27613aa0a5f88a4b26"}}