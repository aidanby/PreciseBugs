{"buggy_code": ["/*\n * JBoss, Home of Professional Open Source.\n * Copyright 2013, Red Hat, Inc., and individual contributors\n * as indicated by the @author tags. See the copyright.txt file in the\n * distribution for a full listing of individual contributors.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n\npackage org.jboss.as.controller.access.constraint;\n\nimport org.jboss.as.controller.ExpressionResolver;\nimport org.jboss.as.controller.VaultReader;\nimport org.jboss.as.controller.access.Action;\nimport org.jboss.as.controller.access.JmxAction;\nimport org.jboss.as.controller.access.JmxTarget;\nimport org.jboss.as.controller.access.TargetAttribute;\nimport org.jboss.as.controller.access.TargetResource;\nimport org.jboss.as.controller.access.rbac.StandardRole;\nimport org.jboss.as.controller.descriptions.ModelDescriptionConstants;\nimport org.jboss.dmr.ModelNode;\nimport org.jboss.dmr.ModelType;\nimport org.jboss.dmr.Property;\n\n/**\n * {@link Constraint} related to whether an attribute is considered security sensitive\n * because it contains a vault expression.\n *\n * @author Brian Stansberry (c) 2013 Red Hat Inc.\n */\npublic class SensitiveVaultExpressionConstraint extends AllowAllowNotConstraint {\n\n    public static final ConstraintFactory FACTORY = new Factory();\n\n    private static final SensitiveVaultExpressionConstraint SENSITIVE = new SensitiveVaultExpressionConstraint(true);\n    private static final SensitiveVaultExpressionConstraint NOT_SENSITIVE = new SensitiveVaultExpressionConstraint(false);\n    private static final SensitiveVaultExpressionConstraint ALLOWS = new SensitiveVaultExpressionConstraint(true, true);\n    private static final SensitiveVaultExpressionConstraint DISALLOWS = new SensitiveVaultExpressionConstraint(false, true);\n\n    private SensitiveVaultExpressionConstraint(boolean sensitive) {\n        super(sensitive);\n    }\n\n    private SensitiveVaultExpressionConstraint(boolean allowsSensitive, boolean allowsNonSensitive) {\n        super(allowsSensitive, allowsNonSensitive);\n    }\n\n    private static class Factory extends AbstractConstraintFactory {\n\n        @Override\n        public Constraint getStandardUserConstraint(StandardRole role, Action.ActionEffect actionEffect) {\n            if (role == StandardRole.ADMINISTRATOR\n                    || role == StandardRole.SUPERUSER\n                    || role == StandardRole.AUDITOR) {\n                return ALLOWS;\n            }\n            return DISALLOWS;\n        }\n\n        @Override\n        public Constraint getRequiredConstraint(Action.ActionEffect actionEffect, Action action, TargetAttribute target) {\n            return isSensitiveAction(action, actionEffect, target) ? SENSITIVE : NOT_SENSITIVE;\n        }\n\n        @Override\n        public Constraint getRequiredConstraint(Action.ActionEffect actionEffect, Action action, TargetResource target) {\n            return isSensitiveAction(action, actionEffect) ? SENSITIVE : NOT_SENSITIVE;\n        }\n\n        private boolean isSensitiveAction(Action action, Action.ActionEffect actionEffect) {\n            if (VaultExpressionSensitivityConfig.INSTANCE.isSensitive(actionEffect)) {\n                if (actionEffect == Action.ActionEffect.WRITE_RUNTIME || actionEffect == Action.ActionEffect.WRITE_CONFIG) {\n                    ModelNode operation = action.getOperation();\n                    for (Property property : operation.asPropertyList()) {\n                        if (isSensitiveValue(property.getValue())) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        private boolean isSensitiveAction(Action action, Action.ActionEffect actionEffect, TargetAttribute targetAttribute) {\n            if (VaultExpressionSensitivityConfig.INSTANCE.isSensitive(actionEffect)) {\n                if (actionEffect == Action.ActionEffect.WRITE_RUNTIME || actionEffect == Action.ActionEffect.WRITE_CONFIG) {\n                    ModelNode operation = action.getOperation();\n                    if (operation.hasDefined(targetAttribute.getAttributeName())) {\n                        if (isSensitiveValue(operation.get(targetAttribute.getAttributeName()))) {\n                            return true;\n                        }\n                    }\n                    if (ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION.equals(operation.get(ModelDescriptionConstants.OP).asString())\n                            && operation.hasDefined(ModelDescriptionConstants.VALUE)) {\n                        if (isSensitiveValue(operation.get(ModelDescriptionConstants.VALUE))) {\n                            return true;\n                        }\n                    }\n                }\n                if (actionEffect != Action.ActionEffect.ADDRESS) {\n                    if (isSensitiveValue(targetAttribute.getCurrentValue())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        private boolean isSensitiveValue(ModelNode value) {\n            if (value.getType() == ModelType.EXPRESSION\n                    || value.getType() == ModelType.STRING) {\n                String valueString = value.asString();\n                if (ExpressionResolver.EXPRESSION_PATTERN.matcher(valueString).matches()) {\n                    int start = valueString.indexOf(\"${\") + 2;\n                    int end = valueString.indexOf(\"}\", start);\n                    valueString = valueString.substring(start, end);\n                    return VaultReader.STANDARD_VAULT_PATTERN.matcher(valueString).matches();\n                }\n            }\n            return false;\n        }\n\n        @Override\n        protected int internalCompare(AbstractConstraintFactory other) {\n            // We have no preference\n            return 0;\n        }\n\n        @Override\n        public Constraint getRequiredConstraint(Action.ActionEffect actionEffect, JmxAction action, JmxTarget target) {\n            //TODO We could do something like this if the action provided the new value and the target\n            // provided the current value. But right now that data isn't provided.\n//            if (VaultExpressionSensitivityConfig.INSTANCE.isSensitive(actionEffect)) {\n//                if (actionEffect == Action.ActionEffect.WRITE_RUNTIME || actionEffect == Action.ActionEffect.WRITE_CONFIG) {\n//                    if (action.getNewValue() instanceof String && isSensitiveValue(new ModelNode(action.getNewValue().toString()))) {\n//                        return SENSITIVE;\n//                    }\n//                }\n//                if (actionEffect != Action.ActionEffect.ADDRESS) {\n//                    if (target.getCurrentValue() instanceof String && isSensitiveValue(new ModelNode(target.getCurrentValue().toString()))) {\n//                        return SENSITIVE;\n//                    }\n//                }\n//            }\n            return NOT_SENSITIVE;\n        }\n    }\n}\n\n", "/*\n * JBoss, Home of Professional Open Source.\n * Copyright 2013, Red Hat, Inc., and individual contributors\n * as indicated by the @author tags. See the copyright.txt file in the\n * distribution for a full listing of individual contributors.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n\npackage org.jboss.as.test.integration.mgmt.access;\n\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ACCESS_CONTROL;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.CONFIGURED_REQUIRES_READ;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.CONFIGURED_REQUIRES_WRITE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_RESOURCE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESPONSE_HEADERS;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VALUE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.CORE_SERVICE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VAULT;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VAULT_OPTIONS;\nimport static org.jboss.as.test.integration.management.util.ModelUtil.createOpNode;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.jboss.as.controller.client.OperationBuilder;\nimport org.jboss.as.controller.client.ModelControllerClient;\nimport org.jboss.as.test.integration.management.rbac.Outcome;\nimport org.jboss.as.test.integration.management.rbac.RbacUtil;\nimport org.jboss.dmr.ModelNode;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.wildfly.core.testrunner.ManagementClient;\nimport org.wildfly.core.testrunner.ServerSetup;\nimport org.wildfly.core.testrunner.ServerSetupTask;\nimport org.wildfly.core.testrunner.WildflyTestRunner;\nimport org.wildfly.test.security.VaultHandler;\n\n/**\n * @author Ladislav Thon <lthon@redhat.com>\n */\n@RunWith(WildflyTestRunner.class)\n@ServerSetup({StandardExtensionSetupTask.class, VaultExpressionSensitivityTestCase.VaultSetupTask.class, StandardUsersSetupTask.class})\npublic class VaultExpressionSensitivityTestCase extends AbstractRbacTestCase {\n    private static final String VAULT_EXPRESSION_SENSITIVITY = \"core-service=management/access=authorization/constraint=vault-expression\";\n\n    private static final String MASKED_DS = \"subsystem=rbac/rbac-constrained=MaskedDS\";\n\n    private static String vaultPassword;\n\n    static class VaultSetupTask implements ServerSetupTask {\n\n        private VaultHandler vaultHandler;\n        private static final String RESOURCE_LOCATION = VaultExpressionSensitivityTestCase.class.getProtectionDomain().getCodeSource().getLocation().getFile()\n                + \"vault-masked/\";\n        private static String DATA_SOURCE = \"MaskedDS\";\n\n        @Override\n        public void setup(ManagementClient managementClient) throws Exception {\n\n            VaultHandler.cleanFilesystem(RESOURCE_LOCATION, true);\n\n            ModelNode op;\n\n            // create new vault\n            vaultHandler = new VaultHandler(RESOURCE_LOCATION);\n\n            // create security attributes\n            String vaultBlock = \"ds_ExampleDS\";\n            String attributeName = \"password\";\n            String vaultPasswordString = vaultHandler.addSecuredAttribute(vaultBlock, attributeName,\n               \"sa\".toCharArray());\n\n            vaultPassword = \"${\" +vaultPasswordString + \"}\";\n\n            // create new vault setting in standalone\n            op = new ModelNode();\n            op.get(OP).set(ADD);\n            op.get(OP_ADDR).add(CORE_SERVICE, VAULT);\n            ModelNode vaultOption = op.get(VAULT_OPTIONS);\n            vaultOption.get(\"KEYSTORE_URL\").set(vaultHandler.getKeyStore());\n            vaultOption.get(\"KEYSTORE_PASSWORD\").set(vaultHandler.getMaskedKeyStorePassword());\n            vaultOption.get(\"KEYSTORE_ALIAS\").set(vaultHandler.getAlias());\n            vaultOption.get(\"SALT\").set(vaultHandler.getSalt());\n            vaultOption.get(\"ITERATION_COUNT\").set(vaultHandler.getIterationCountAsString());\n            vaultOption.get(\"ENC_FILE_DIR\").set(vaultHandler.getEncodedVaultFileDirectory());\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n\n            // create new datasource with right password\n            ModelNode address = new ModelNode();\n            address.add(SUBSYSTEM, \"rbac\");\n            address.add(\"rbac-constrained\", DATA_SOURCE);\n            address.protect();\n            op = new ModelNode();\n            op.get(OP).set(ADD);\n            op.get(OP_ADDR).set(address);\n            op.get(\"jndi-name\").set(\"java:jboss/datasources/\" + DATA_SOURCE);\n            op.get(\"new-connection-sql\").set(vaultPassword);\n            op.get(\"password\").set(vaultPassword);\n            op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n            op = createOpNode(MASKED_DS, WRITE_ATTRIBUTE_OPERATION);\n            op.get(NAME).set(\"new-connection-sql\");\n            op.get(VALUE).set(vaultPassword);\n            op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n        }\n\n        @Override\n        public void tearDown(ManagementClient managementClient) throws Exception {\n\n            ModelNode op;\n\n            // remove created datasources\n            op = new ModelNode();\n            op.get(OP).set(REMOVE);\n            op.get(OP_ADDR).add(SUBSYSTEM, \"rbac\");\n            op.get(OP_ADDR).add(\"rbac-constrained\", DATA_SOURCE);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n            // remove created vault\n            op = new ModelNode();\n            op.get(OP).set(REMOVE);\n            op.get(OP_ADDR).add(CORE_SERVICE, VAULT);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n            // remove temporary files\n            vaultHandler.cleanUp();\n\n        }\n\n    }\n    @Test\n    public void testReadSensitiveWriteSensitive() throws Exception {\n        changeVaultExpressionSensitivity(true, true);\n        try {\n            test(RbacUtil.MONITOR_USER, false, false);\n            test(RbacUtil.OPERATOR_USER, false, false);\n            test(RbacUtil.MAINTAINER_USER, false, false);\n            test(RbacUtil.DEPLOYER_USER, false, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    @Test\n    public void testReadNonSensitiveWriteSensitive() throws Exception {\n        changeVaultExpressionSensitivity(false, true);\n        try {\n            test(RbacUtil.MONITOR_USER, true, false);\n            test(RbacUtil.OPERATOR_USER, true, false);\n            test(RbacUtil.MAINTAINER_USER, true, false);\n            test(RbacUtil.DEPLOYER_USER, true, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    @Test\n    public void testReadSensitiveWriteNonSensitive() throws Exception {\n        // read sensitive and write non-sensitive together makes very little, but still\n        // note that the expectations are the same as in testReadSensitiveWriteSensitive\n\n        changeVaultExpressionSensitivity(true, false);\n        try {\n            test(RbacUtil.MONITOR_USER, false, false);\n            test(RbacUtil.OPERATOR_USER, false, false);\n            test(RbacUtil.MAINTAINER_USER, false, false);\n            test(RbacUtil.DEPLOYER_USER, false, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    @Test\n    public void testReadNonSensitiveWriteNonSensitive() throws Exception {\n        changeVaultExpressionSensitivity(false, false);\n        try {\n            test(RbacUtil.MONITOR_USER, true, false);\n            test(RbacUtil.OPERATOR_USER, true, false); // operator NO, it's a change in persistent configuration\n            test(RbacUtil.MAINTAINER_USER, true, true);\n            test(RbacUtil.DEPLOYER_USER, true, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    private void test(String userName, boolean canRead, boolean canWrite) throws Exception {\n        ModelControllerClient client = getClientForUser(userName);\n\n        // read-resource\n        ModelNode operation = createOpNode(MASKED_DS, READ_RESOURCE_OPERATION);\n        ModelNode result = RbacUtil.executeOperation(client, operation, Outcome.SUCCESS);\n        assertEquals(userName + \" should \" + (canRead ? \"\" : \"NOT\") + \" be able to read\", canRead, result.get(RESULT).hasDefined(\"new-connection-sql\"));\n        if (!canRead) {\n            assertTrue(result.hasDefined(RESPONSE_HEADERS));\n            List<ModelNode> filteredAttributes = result.get(RESPONSE_HEADERS, ACCESS_CONTROL).get(0).get(\"filtered-attributes\").asList();\n            assertTrue(filteredAttributes.contains(new ModelNode(\"new-connection-sql\")));\n        }\n\n        // read-attribute\n        operation = createOpNode(MASKED_DS, READ_ATTRIBUTE_OPERATION);\n        operation.get(NAME).set(\"new-connection-sql\");\n        RbacUtil.executeOperation(client, operation, canRead ? Outcome.SUCCESS : Outcome.UNAUTHORIZED);\n\n        // write-attribute\n        operation = createOpNode(MASKED_DS, WRITE_ATTRIBUTE_OPERATION);\n        operation.get(NAME).set(\"new-connection-sql\");\n        operation.get(VALUE).set(vaultPassword);\n        RbacUtil.executeOperation(client, operation, canWrite ? Outcome.SUCCESS : Outcome.UNAUTHORIZED);\n    }\n\n    // test utils\n\n    private void changeVaultExpressionSensitivity(Boolean readSensitive, Boolean writeSensitive) throws IOException {\n        ModelControllerClient client = getManagementClient().getControllerClient();\n\n        ModelNode operation;\n\n        if (readSensitive != null) {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, WRITE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_READ);\n            operation.get(VALUE).set(readSensitive);\n        } else {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, UNDEFINE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_READ);\n        }\n        client.execute(operation);\n\n        if (writeSensitive != null) {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, WRITE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_WRITE);\n            operation.get(VALUE).set(writeSensitive);\n        } else {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, UNDEFINE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_WRITE);\n        }\n        client.execute(operation);\n    }\n}\n"], "fixing_code": ["/*\n * JBoss, Home of Professional Open Source.\n * Copyright 2013, Red Hat, Inc., and individual contributors\n * as indicated by the @author tags. See the copyright.txt file in the\n * distribution for a full listing of individual contributors.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n\npackage org.jboss.as.controller.access.constraint;\n\nimport java.util.regex.Pattern;\n\nimport org.jboss.as.controller.access.Action;\nimport org.jboss.as.controller.access.JmxAction;\nimport org.jboss.as.controller.access.JmxTarget;\nimport org.jboss.as.controller.access.TargetAttribute;\nimport org.jboss.as.controller.access.TargetResource;\nimport org.jboss.as.controller.access.rbac.StandardRole;\nimport org.jboss.as.controller.descriptions.ModelDescriptionConstants;\nimport org.jboss.dmr.ModelNode;\nimport org.jboss.dmr.ModelType;\nimport org.jboss.dmr.Property;\n\n/**\n * {@link Constraint} related to whether an attribute is considered security sensitive\n * because it contains a vault expression.\n *\n * @author Brian Stansberry (c) 2013 Red Hat Inc.\n */\npublic class SensitiveVaultExpressionConstraint extends AllowAllowNotConstraint {\n\n    public static final ConstraintFactory FACTORY = new Factory();\n\n    private static final Pattern VAULT_EXPRESSION_PATTERN = Pattern.compile(\".*\\\\$\\\\{VAULT::.*::.*::.*}.*\");\n\n    private static final SensitiveVaultExpressionConstraint SENSITIVE = new SensitiveVaultExpressionConstraint(true);\n    private static final SensitiveVaultExpressionConstraint NOT_SENSITIVE = new SensitiveVaultExpressionConstraint(false);\n    private static final SensitiveVaultExpressionConstraint ALLOWS = new SensitiveVaultExpressionConstraint(true, true);\n    private static final SensitiveVaultExpressionConstraint DISALLOWS = new SensitiveVaultExpressionConstraint(false, true);\n\n    private SensitiveVaultExpressionConstraint(boolean sensitive) {\n        super(sensitive);\n    }\n\n    private SensitiveVaultExpressionConstraint(boolean allowsSensitive, boolean allowsNonSensitive) {\n        super(allowsSensitive, allowsNonSensitive);\n    }\n\n    private static class Factory extends AbstractConstraintFactory {\n\n        @Override\n        public Constraint getStandardUserConstraint(StandardRole role, Action.ActionEffect actionEffect) {\n            if (role == StandardRole.ADMINISTRATOR\n                    || role == StandardRole.SUPERUSER\n                    || role == StandardRole.AUDITOR) {\n                return ALLOWS;\n            }\n            return DISALLOWS;\n        }\n\n        @Override\n        public Constraint getRequiredConstraint(Action.ActionEffect actionEffect, Action action, TargetAttribute target) {\n            return isSensitiveAction(action, actionEffect, target) ? SENSITIVE : NOT_SENSITIVE;\n        }\n\n        @Override\n        public Constraint getRequiredConstraint(Action.ActionEffect actionEffect, Action action, TargetResource target) {\n            return isSensitiveAction(action, actionEffect) ? SENSITIVE : NOT_SENSITIVE;\n        }\n\n        private boolean isSensitiveAction(Action action, Action.ActionEffect actionEffect) {\n            if (VaultExpressionSensitivityConfig.INSTANCE.isSensitive(actionEffect)) {\n                if (actionEffect == Action.ActionEffect.WRITE_RUNTIME || actionEffect == Action.ActionEffect.WRITE_CONFIG) {\n                    ModelNode operation = action.getOperation();\n                    for (Property property : operation.asPropertyList()) {\n                        if (isSensitiveValue(property.getValue())) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n\n        private boolean isSensitiveAction(Action action, Action.ActionEffect actionEffect, TargetAttribute targetAttribute) {\n            if (VaultExpressionSensitivityConfig.INSTANCE.isSensitive(actionEffect)) {\n                if (actionEffect == Action.ActionEffect.WRITE_RUNTIME || actionEffect == Action.ActionEffect.WRITE_CONFIG) {\n                    ModelNode operation = action.getOperation();\n                    if (operation.hasDefined(targetAttribute.getAttributeName())) {\n                        if (isSensitiveValue(operation.get(targetAttribute.getAttributeName()))) {\n                            return true;\n                        }\n                    }\n                    if (ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION.equals(operation.get(ModelDescriptionConstants.OP).asString())\n                            && operation.hasDefined(ModelDescriptionConstants.VALUE)) {\n                        if (isSensitiveValue(operation.get(ModelDescriptionConstants.VALUE))) {\n                            return true;\n                        }\n                    }\n                }\n                if (actionEffect != Action.ActionEffect.ADDRESS) {\n                    if (isSensitiveValue(targetAttribute.getCurrentValue())) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        private boolean isSensitiveValue(ModelNode value) {\n            if (value.getType() == ModelType.EXPRESSION\n                    || value.getType() == ModelType.STRING) {\n                String valueString = value.asString();\n                return VAULT_EXPRESSION_PATTERN.matcher(valueString).matches();\n            }\n            return false;\n        }\n\n        @Override\n        protected int internalCompare(AbstractConstraintFactory other) {\n            // We have no preference\n            return 0;\n        }\n\n        @Override\n        public Constraint getRequiredConstraint(Action.ActionEffect actionEffect, JmxAction action, JmxTarget target) {\n            //TODO We could do something like this if the action provided the new value and the target\n            // provided the current value. But right now that data isn't provided.\n//            if (VaultExpressionSensitivityConfig.INSTANCE.isSensitive(actionEffect)) {\n//                if (actionEffect == Action.ActionEffect.WRITE_RUNTIME || actionEffect == Action.ActionEffect.WRITE_CONFIG) {\n//                    if (action.getNewValue() instanceof String && isSensitiveValue(new ModelNode(action.getNewValue().toString()))) {\n//                        return SENSITIVE;\n//                    }\n//                }\n//                if (actionEffect != Action.ActionEffect.ADDRESS) {\n//                    if (target.getCurrentValue() instanceof String && isSensitiveValue(new ModelNode(target.getCurrentValue().toString()))) {\n//                        return SENSITIVE;\n//                    }\n//                }\n//            }\n            return NOT_SENSITIVE;\n        }\n    }\n}\n\n", "/*\n * JBoss, Home of Professional Open Source.\n * Copyright 2013, Red Hat, Inc., and individual contributors\n * as indicated by the @author tags. See the copyright.txt file in the\n * distribution for a full listing of individual contributors.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n\npackage org.jboss.as.test.integration.mgmt.access;\n\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ACCESS_CONTROL;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.CONFIGURED_REQUIRES_READ;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.CONFIGURED_REQUIRES_WRITE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.NAME;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_ATTRIBUTE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.READ_RESOURCE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.REMOVE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESPONSE_HEADERS;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.RESULT;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VALUE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ADD;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.ALLOW_RESOURCE_SERVICE_RESTART;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.CORE_SERVICE;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OPERATION_HEADERS;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.OP_ADDR;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.SUBSYSTEM;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VAULT;\nimport static org.jboss.as.controller.descriptions.ModelDescriptionConstants.VAULT_OPTIONS;\nimport static org.jboss.as.test.integration.management.util.ModelUtil.createOpNode;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.jboss.as.controller.client.OperationBuilder;\nimport org.jboss.as.controller.client.ModelControllerClient;\nimport org.jboss.as.test.integration.management.rbac.Outcome;\nimport org.jboss.as.test.integration.management.rbac.RbacUtil;\nimport org.jboss.dmr.ModelNode;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.wildfly.core.testrunner.ManagementClient;\nimport org.wildfly.core.testrunner.ServerSetup;\nimport org.wildfly.core.testrunner.ServerSetupTask;\nimport org.wildfly.core.testrunner.WildflyTestRunner;\nimport org.wildfly.test.security.VaultHandler;\n\n/**\n * @author Ladislav Thon <lthon@redhat.com>\n */\n@RunWith(WildflyTestRunner.class)\n@ServerSetup({StandardExtensionSetupTask.class, VaultExpressionSensitivityTestCase.VaultSetupTask.class, StandardUsersSetupTask.class})\npublic class VaultExpressionSensitivityTestCase extends AbstractRbacTestCase {\n    private static final String VAULT_EXPRESSION_SENSITIVITY = \"core-service=management/access=authorization/constraint=vault-expression\";\n\n    private static final String MASKED_DS = \"subsystem=rbac/rbac-constrained=MaskedDS\";\n\n    private static String vaultPassword;\n\n    static class VaultSetupTask implements ServerSetupTask {\n\n        private VaultHandler vaultHandler;\n        private static final String RESOURCE_LOCATION = VaultExpressionSensitivityTestCase.class.getProtectionDomain().getCodeSource().getLocation().getFile()\n                + \"vault-masked/\";\n        private static String DATA_SOURCE = \"MaskedDS\";\n\n        @Override\n        public void setup(ManagementClient managementClient) throws Exception {\n\n            VaultHandler.cleanFilesystem(RESOURCE_LOCATION, true);\n\n            ModelNode op;\n\n            // create new vault\n            vaultHandler = new VaultHandler(RESOURCE_LOCATION);\n\n            // create security attributes\n            String vaultBlock = \"ds_ExampleDS\";\n            String attributeName = \"password\";\n            String vaultPasswordString = vaultHandler.addSecuredAttribute(vaultBlock, attributeName,\n               \"sa\".toCharArray());\n\n            vaultPassword = \"${\" +vaultPasswordString + \"}\";\n\n            // create new vault setting in standalone\n            op = new ModelNode();\n            op.get(OP).set(ADD);\n            op.get(OP_ADDR).add(CORE_SERVICE, VAULT);\n            ModelNode vaultOption = op.get(VAULT_OPTIONS);\n            vaultOption.get(\"KEYSTORE_URL\").set(vaultHandler.getKeyStore());\n            vaultOption.get(\"KEYSTORE_PASSWORD\").set(vaultHandler.getMaskedKeyStorePassword());\n            vaultOption.get(\"KEYSTORE_ALIAS\").set(vaultHandler.getAlias());\n            vaultOption.get(\"SALT\").set(vaultHandler.getSalt());\n            vaultOption.get(\"ITERATION_COUNT\").set(vaultHandler.getIterationCountAsString());\n            vaultOption.get(\"ENC_FILE_DIR\").set(vaultHandler.getEncodedVaultFileDirectory());\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n\n            // create new datasource with right password\n            ModelNode address = new ModelNode();\n            address.add(SUBSYSTEM, \"rbac\");\n            address.add(\"rbac-constrained\", DATA_SOURCE);\n            address.protect();\n            op = new ModelNode();\n            op.get(OP).set(ADD);\n            op.get(OP_ADDR).set(address);\n            op.get(\"jndi-name\").set(\"java:jboss/datasources/\" + DATA_SOURCE);\n            op.get(\"new-connection-sql\").set(vaultPassword);\n            op.get(\"password\").set(vaultPassword);\n            op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n            op = createOpNode(MASKED_DS, WRITE_ATTRIBUTE_OPERATION);\n            op.get(NAME).set(\"new-connection-sql\");\n            op.get(VALUE).set(vaultPassword);\n            op.get(OPERATION_HEADERS).get(ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n        }\n\n        @Override\n        public void tearDown(ManagementClient managementClient) throws Exception {\n\n            ModelNode op;\n\n            // remove created datasources\n            op = new ModelNode();\n            op.get(OP).set(REMOVE);\n            op.get(OP_ADDR).add(SUBSYSTEM, \"rbac\");\n            op.get(OP_ADDR).add(\"rbac-constrained\", DATA_SOURCE);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n            // remove created vault\n            op = new ModelNode();\n            op.get(OP).set(REMOVE);\n            op.get(OP_ADDR).add(CORE_SERVICE, VAULT);\n            managementClient.getControllerClient().execute(new OperationBuilder(op).build());\n\n            // remove temporary files\n            vaultHandler.cleanUp();\n\n        }\n\n    }\n    @Test\n    public void testReadSensitiveWriteSensitive() throws Exception {\n        changeVaultExpressionSensitivity(true, true);\n        try {\n            test(RbacUtil.MONITOR_USER, false, false);\n            test(RbacUtil.OPERATOR_USER, false, false);\n            test(RbacUtil.MAINTAINER_USER, false, false);\n            test(RbacUtil.DEPLOYER_USER, false, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    @Test\n    public void testReadNonSensitiveWriteSensitive() throws Exception {\n        changeVaultExpressionSensitivity(false, true);\n        try {\n            test(RbacUtil.MONITOR_USER, true, false);\n            test(RbacUtil.OPERATOR_USER, true, false);\n            test(RbacUtil.MAINTAINER_USER, true, false);\n            test(RbacUtil.DEPLOYER_USER, true, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    @Test\n    public void testReadSensitiveWriteNonSensitive() throws Exception {\n        // read sensitive and write non-sensitive together makes very little, but still\n        // note that the expectations are the same as in testReadSensitiveWriteSensitive\n\n        changeVaultExpressionSensitivity(true, false);\n        try {\n            test(RbacUtil.MONITOR_USER, false, false);\n            test(RbacUtil.OPERATOR_USER, false, false);\n            test(RbacUtil.MAINTAINER_USER, false, false);\n            test(RbacUtil.DEPLOYER_USER, false, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    @Test\n    public void testReadNonSensitiveWriteNonSensitive() throws Exception {\n        changeVaultExpressionSensitivity(false, false);\n        try {\n            test(RbacUtil.MONITOR_USER, true, false);\n            test(RbacUtil.OPERATOR_USER, true, false); // operator NO, it's a change in persistent configuration\n            test(RbacUtil.MAINTAINER_USER, true, true);\n            test(RbacUtil.DEPLOYER_USER, true, false);\n            test(RbacUtil.ADMINISTRATOR_USER, true, true);\n            test(RbacUtil.AUDITOR_USER, true, false);\n            test(RbacUtil.SUPERUSER_USER, true, true);\n        } finally {\n            changeVaultExpressionSensitivity(null, null);\n        }\n    }\n\n    /*\n     * Test if the Monitor role can smuggle a vault expression to retrieve the value from the vault.\n     */\n    @Test\n    public void testHiddenExpression() throws Exception {\n        ModelControllerClient client = getClientForUser(RbacUtil.MAINTAINER_USER);\n\n        ModelNode operation = createOpNode(\"subsystem=logging/logger=vault-test\", ADD);\n        operation.get(\"level\").set(\"${someproperty:XXX} \" + vaultPassword);\n        RbacUtil.executeOperation(client, operation, Outcome.UNAUTHORIZED);\n    }\n\n    private void test(String userName, boolean canRead, boolean canWrite) throws Exception {\n        ModelControllerClient client = getClientForUser(userName);\n\n        // read-resource\n        ModelNode operation = createOpNode(MASKED_DS, READ_RESOURCE_OPERATION);\n        ModelNode result = RbacUtil.executeOperation(client, operation, Outcome.SUCCESS);\n        assertEquals(userName + \" should \" + (canRead ? \"\" : \"NOT\") + \" be able to read\", canRead, result.get(RESULT).hasDefined(\"new-connection-sql\"));\n        if (!canRead) {\n            assertTrue(result.hasDefined(RESPONSE_HEADERS));\n            List<ModelNode> filteredAttributes = result.get(RESPONSE_HEADERS, ACCESS_CONTROL).get(0).get(\"filtered-attributes\").asList();\n            assertTrue(filteredAttributes.contains(new ModelNode(\"new-connection-sql\")));\n        }\n\n        // read-attribute\n        operation = createOpNode(MASKED_DS, READ_ATTRIBUTE_OPERATION);\n        operation.get(NAME).set(\"new-connection-sql\");\n        RbacUtil.executeOperation(client, operation, canRead ? Outcome.SUCCESS : Outcome.UNAUTHORIZED);\n\n        // write-attribute\n        operation = createOpNode(MASKED_DS, WRITE_ATTRIBUTE_OPERATION);\n        operation.get(NAME).set(\"new-connection-sql\");\n        operation.get(VALUE).set(vaultPassword);\n        RbacUtil.executeOperation(client, operation, canWrite ? Outcome.SUCCESS : Outcome.UNAUTHORIZED);\n    }\n\n    // test utils\n\n    private void changeVaultExpressionSensitivity(Boolean readSensitive, Boolean writeSensitive) throws IOException {\n        ModelControllerClient client = getManagementClient().getControllerClient();\n\n        ModelNode operation;\n\n        if (readSensitive != null) {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, WRITE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_READ);\n            operation.get(VALUE).set(readSensitive);\n        } else {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, UNDEFINE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_READ);\n        }\n        client.execute(operation);\n\n        if (writeSensitive != null) {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, WRITE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_WRITE);\n            operation.get(VALUE).set(writeSensitive);\n        } else {\n            operation = createOpNode(VAULT_EXPRESSION_SENSITIVITY, UNDEFINE_ATTRIBUTE_OPERATION);\n            operation.get(NAME).set(CONFIGURED_REQUIRES_WRITE);\n        }\n        client.execute(operation);\n    }\n}\n"], "filenames": ["controller/src/main/java/org/jboss/as/controller/access/constraint/SensitiveVaultExpressionConstraint.java", "testsuite/rbac/src/test/java/org/jboss/as/test/integration/mgmt/access/VaultExpressionSensitivityTestCase.java"], "buggy_code_start_loc": [25, 228], "buggy_code_end_loc": [132, 228], "fixing_code_start_loc": [25, 229], "fixing_code_end_loc": [129, 241], "type": "NVD-CWE-noinfo", "message": "A flaw was found in wildfly-core in all versions. If a vault expression is in the form of a single attribute that contains multiple expressions, a user who was granted access to the management interface can potentially access a vault expression they should not be able to access and possibly retrieve the item which was stored in the vault. The highest threat from this vulnerability is data confidentiality and integrity.", "other": {"cve": {"id": "CVE-2021-3644", "sourceIdentifier": "secalert@redhat.com", "published": "2022-08-26T16:15:09.163", "lastModified": "2022-08-31T20:02:01.757", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A flaw was found in wildfly-core in all versions. If a vault expression is in the form of a single attribute that contains multiple expressions, a user who was granted access to the management interface can potentially access a vault expression they should not be able to access and possibly retrieve the item which was stored in the vault. The highest threat from this vulnerability is data confidentiality and integrity."}, {"lang": "es", "value": "Se ha encontrado un fallo en wildfly-core en todas las versiones. Si una expresi\u00f3n de b\u00f3veda est\u00e1 en la forma de un solo atributo que contiene m\u00faltiples expresiones, un usuario al que le ha sido concedido acceso a la interfaz de administraci\u00f3n puede potencialmente acceder a una expresi\u00f3n de b\u00f3veda a la que no deber\u00eda poder acceder y posiblemente recuperar el elemento que estaba almacenado en la b\u00f3veda. La mayor amenaza de esta vulnerabilidad es la confidencialidad e integridad de los datos."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.3, "baseSeverity": "LOW"}, "exploitabilityScore": 0.7, "impactScore": 2.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:descision_manager:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "D5863BBF-829E-44EF-ACE8-61D5037251F6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:wildfly:16.0.0:-:*:*:*:*:*:*", "matchCriteriaId": "3DD1C6A5-62D1-42A0-9FE7-2654CD65D0B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:wildfly:17.0.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "964B390B-D38D-4F38-8E1B-A58FD084E5B6"}]}]}], "references": [{"url": "https://access.redhat.com/security/cve/CVE-2021-3644", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1976052", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Vendor Advisory"]}, {"url": "https://github.com/wildfly/wildfly-core/commit/06dd9884f6ba50470b1fb5a35198a8784f037714", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wildfly/wildfly-core/commit/6d8db43cd43b5994b7a14003db978064e086090b", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/wildfly/wildfly-core/pull/4668", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://issues.redhat.com/browse/WFCORE-5511", "source": "secalert@redhat.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/wildfly/wildfly-core/commit/06dd9884f6ba50470b1fb5a35198a8784f037714"}}