{"buggy_code": ["<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.3\" reference=\"XWiki.DocumentTreeMacros\" locale=\"\">\n  <web>XWiki</web>\n  <name>DocumentTreeMacros</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>XWiki.DocumentTree</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>Document Tree Macros</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>{{include reference=\"XWiki.SuggestSolrMacros\" /}}\n\n{{template name=\"documentTree_macros.vm\" /}}\n\n{{velocity output=\"false\"}}\n#macro (updateDocTreeConfigFromRequest)\n  #foreach ($entry in $docTreeConfig.entrySet())\n    #set ($valueFromRequest = $request.getParameter($entry.key))\n    #if (\"$!valueFromRequest\" != '')\n      #if ($entry.value.getClass().getName() == 'java.lang.Boolean')\n        #set ($entry.value = $valueFromRequest == 'true')\n      #elseif ($entry.value.iterator())\n        #set ($valuesFromRequest = $request.getParameterValues($entry.key))\n        #set ($discard = $entry.value.clear())\n        ## We need to convert the String[] to List&lt;String&gt; before calling addAll (which expects a collection).\n        #set ($discard = $entry.value.addAll($valuesFromRequest.subList(0, $valuesFromRequest.size())))\n      #else\n        #set ($entry.value = $valueFromRequest)\n      #end\n    #end\n  #end\n  ## Show the wikis only for global users.\n  #set ($docTreeConfig.showWikis = $docTreeConfig.showWikis &amp;&amp;\n    $xcontext.userReference.wikiReference.name == $xcontext.mainWikiName)\n  #if (\"$!docTreeConfig.root\" == '')\n    #if ($docTreeConfig.showWikis)\n      #set ($docTreeConfig.root = 'farm:*')\n    #else\n      #set ($docTreeConfig.root = \"wiki:$xcontext.database\")\n    #end\n  #end\n  ## Handle relative references\n  #makeNodeReferencesAbsolute($docTreeConfig ['root', 'openTo'])\n  ## Sort the child documents by (raw) title when the node label is the document title.\n  #if ($docTreeConfig.showDocumentTitle)\n    #set ($docTreeConfig.orderBy = 'title')\n  #end\n  ## Determine which hierarchy needs to be used.\n  #if ($docTreeConfig.showSpaces)\n    #if ($docTreeConfig.hierarchyMode == 'parentchild')\n      #set ($tree = $services.tree.parentChildOnNestedSpaces)\n    #else\n      #set ($tree = $services.tree.nestedSpaces)\n    #end\n  #elseif ($docTreeConfig.hierarchyMode == 'parentchild')\n    #set ($tree = $services.tree.parentChild)\n  #else\n    #set ($tree = $services.tree.nestedPages)\n  #end\n  #set ($discard = $tree.properties.putAll($docTreeConfig))\n#end\n\n#set ($documentPseudoNodeTypes = ['translations', 'attachments', 'classProperties', 'objects', 'addDocument',\n  'addAttachment'])\n#macro (makeNodeReferencesAbsolute $map $keys)\n  #foreach ($key in $keys)\n    #set ($nodeId = $map.get($key))\n    #set ($parts = $nodeId.split(':', 2))\n    #if ($parts &amp;&amp; $parts.size() == 2)\n      #set ($nodeType = $parts[0].toLowerCase())\n      #set ($nodeReference = $parts[1])\n      #set ($entityType = $nodeType)\n      #if ($documentPseudoNodeTypes.contains($nodeType))\n        #set ($entityType = 'document')\n      #end\n      #set ($discard = \"#evaluate(\"\"${escapetool.h}set (${escapetool.d}entityReference =\n        ${escapetool.d}services.model.resolve$stringtool.capitalize($entityType)(${escapetool.d}nodeReference))\"\")\")\n      #if ($entityReference)\n        #set ($nodeReference = $services.model.serialize($entityReference, 'default'))\n      #end\n      #set ($discard = $map.put($key, \"$nodeType:$nodeReference\"))\n    #end\n  #end\n#end\n\n#macro (handleDocumentTreeRequest)\n  #if ($request.action)\n    #if ($services.csrf.isTokenValid($request.form_token))\n      $response.sendError(400, 'The specified action is not supported.')\n    #elseif ($isAjaxRequest)\n      $response.sendError(403, 'The CSRF token is missing.')\n    #else\n      $response.sendRedirect($services.csrf.getResubmissionURL())\n    #end\n  #else\n    #set ($data = $NULL)\n    #if ($request.data == 'children')\n      #getChildren($request.id $data)\n    #elseif ($request.data == 'path')\n      #getPath($request.id $data)\n    #elseif ($request.data == 'contextMenu')\n      #getContextMenu($data)\n    #elseif ($request.data == 'suggestions')\n      #getSuggestions($data)\n    #end\n    #if ($data)\n      #postProcessDocumentTreeData($data)\n      #jsonResponse($data)\n    #else\n      $response.sendError(404)\n    #end\n  #end\n#end\n\n#macro (postProcessDocumentTreeData $data)\n  ## This is just a hook to allow post processing the document tree data.\n#end\n\n##------------------------------------------------------------\n## Children\n##------------------------------------------------------------\n\n#macro (getChildren $nodeId $return)\n  #set ($children = [])\n  #if ($nodeId == '#')\n    ## Return the top level nodes.\n    #set ($actualNodeId = $docTreeConfig.root)\n  #else\n    ## Return the children of the specified node.\n    #set ($actualNodeId = $nodeId)\n  #end\n  #set ($offset = $mathtool.max($numbertool.toNumber($request.offset).intValue(), 0))\n  #if (\"$!offset\" == '')\n    #set ($offset = 0)\n  #end\n  #set ($limit = $mathtool.max($numbertool.toNumber($request.limit).intValue(), 1))\n  #if (\"$!limit\" == '')\n    #set ($limit = 15)\n  #end\n  #if ($nodeId == '#' &amp;&amp; $docTreeConfig.showRoot)\n    #maybeAddNode($actualNodeId $children)\n  #else\n    #addChildNodes($actualNodeId $offset $limit $children)\n  #end\n  #if ($children.isEmpty() &amp;&amp; $nodeId == '#')\n    ## Inform the user that the tree is empty.\n    #addEmptyTreeNode($children)\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $children)\n#end\n\n#macro (maybeAddNode $nodeId $siblings $placeholder)\n  #set ($parts = $nodeId.split(':', 2))\n  #if ($parts &amp;&amp; $parts.size() == 2)\n    #set ($nodeType = $parts[0])\n    #set ($nodeReference = $parts[1])\n    #set ($discard = \"#evaluate(\"\"${escapetool.h}maybeAdd$stringtool.capitalize($nodeType)Node(\n      ${escapetool.d}nodeReference ${escapetool.d}siblings ${escapetool.d}placeholder)\"\")\")\n  #end\n#end\n\n#macro (addChildNodes $nodeId $offset $limit $children)\n  ## Avoid pages with only one node when paginating the child nodes.\n  #set ($actualLimit = $limit + 1)\n  #set ($childNodeIds = $tree.getChildren($nodeId, $offset, $actualLimit))\n  #set ($hasMoreChildNodes = false)\n  #if ($childNodeIds.size() &gt;= $actualLimit)\n    #set ($totalCount = $tree.getChildCount($nodeId))\n    #set ($newOffset = $offset + $actualLimit)\n    #if ($newOffset &lt; $totalCount)\n      ## There are at least 2 more child nodes.\n      #set ($hasMoreChildNodes = true)\n      #set ($newOffset = $newOffset - 1)\n      #set ($childNodeIds = $childNodeIds.subList(0, $limit))\n    #end\n  #end\n  #foreach ($childNodeId in $childNodeIds)\n    #maybeAddNode($childNodeId $children)\n  #end\n  #if ($hasMoreChildNodes)\n    #addPaginationNode($nodeId $newOffset $totalCount $children)\n  #end\n#end\n\n##\n## Farm Node\n##\n\n#macro (maybeAddFarmNode $nodeReference $siblings)\n  #set ($farmHomeReference = $services.model.resolveDocument('', 'default'))\n  #set ($discard = $siblings.add({\n    'id': 'farm:*',\n    'text': 'Farm',\n    'icon': 'fa fa-home',\n    'children': true,\n    'data': {\n      'type': 'farm',\n      'validChildren': ['wiki', 'pagination']\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($farmHomeReference)\n    }\n  }))\n#end\n\n##\n## Wiki Nodes\n##\n\n#macro (maybeAddWikiNode $wikiId $siblings $placeholder)\n  #set ($wiki = $services.wiki.getById($wikiId))\n  #if ($wiki &amp;&amp; (!$docTreeConfig.showOnlyViewable || $services.security.authorization.hasAccess('view', $wiki.reference)))\n    #addWikiNode($wiki $siblings)\n  #elseif ($placeholder)\n    #set ($discard = $siblings.add($placeholder))\n  #end\n#end\n\n#macro (addWikiNode $wiki $siblings)\n  ## The main wiki cannot be deleted. For the rest we need special rights.\n  #set ($canDeleteWiki = $wiki.id != $services.wiki.mainWikiId\n    &amp;&amp; $services.wiki.canDeleteWiki($xcontext.user, $wiki.id))\n  #if ($docTreeConfig.showWikiPrettyName)\n    #set ($label = $wiki.prettyName)\n  #else\n    #set ($label = $wiki.id)\n  #end\n  #set ($discard = $siblings.add({\n    'id': \"wiki:$wiki.id\",\n    'text': $label,\n    'icon': 'fa fa-hdd-o',\n    'children': true,\n    'data': {\n      'id': $wiki.id,\n      'type': 'wiki',\n      'validChildren': ['space', 'document', 'pagination'],\n      'canDelete': $canDeleteWiki\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($wiki.mainPageReference)\n    }\n  }))\n#end\n\n##\n## Space Nodes\n##\n\n#macro (maybeAddSpaceNode $spaceIdOrReference $siblings $placeholder)\n  #if ($spaceIdOrReference.type)\n    #set ($spaceReference = $spaceIdOrReference)\n  #else\n    #set ($spaceReference = $services.model.resolveSpace($spaceIdOrReference))\n  #end\n  #if (!$docTreeConfig.showOnlyViewable || $services.security.authorization.hasAccess('view', $spaceReference))\n    #addSpaceNode($spaceReference $siblings)\n  #elseif ($placeholder)\n    #set ($discard = $siblings.add($placeholder))\n  #end\n#end\n\n#macro (addSpaceNode $spaceReference $siblings)\n  #set ($spaceId = $services.model.serialize($spaceReference, 'default'))\n  #set ($hasSpaceAdmin = $services.security.authorization.hasAccess('admin', $spaceReference))\n  #set ($canViewSpace = $services.security.authorization.hasAccess('view', $spaceReference))\n  #if ($docTreeConfig.showTerminalDocuments)\n    ## Each space has at least one document or one sub-space. There's no such thing as \"empty space\" in the model.\n    #set ($hasChildren = true)\n  #else\n    ## We display only the nested spaces. This space might contain only documents.\n    #set ($hasChildren = $tree.getChildCount(\"space:$spaceId\") &gt; 0)\n  #end\n  #set ($discard = $siblings.add({\n    'id': \"space:$spaceId\",\n    'text': $spaceReference.name,\n    'icon': 'fa fa-folder-o',\n    'iconOpened': 'fa fa-folder-open-o',\n    'children': $hasChildren,\n    'data': {\n      'id': $spaceId,\n      'type': 'space',\n      'validChildren': ['addDocument', 'space', 'document', 'pagination'],\n      'hasContextMenu': true,\n      'draggable': $canViewSpace,\n      'canMove': $hasSpaceAdmin,\n      'canCopy': $canViewSpace,\n      'canRename': $hasSpaceAdmin,\n      'canDelete': $hasSpaceAdmin,\n      'createDocumentURL': $xwiki.getURL($spaceReference, 'create', $NULL),\n      'deleteURL': $xwiki.getURL($spaceReference, 'deletespace', $NULL)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($spaceReference)\n    }\n  }))\n#end\n\n##\n## Document Nodes\n##\n\n#macro (maybeAddDocumentNode $documentIdOrReference $siblings $placeholder)\n  #if ($documentIdOrReference.type)\n    #set ($documentReference = $documentIdOrReference)\n  #else\n    #set ($documentReference = $services.model.resolveDocument($documentIdOrReference))\n  #end\n  #if (!$docTreeConfig.showOnlyViewable || $services.security.authorization.hasAccess('view', $documentReference))\n    #addDocumentNode($documentReference $siblings)\n  #elseif ($placeholder)\n    #set ($discard = $siblings.add($placeholder))\n  #end\n#end\n\n#macro (addDocumentNode $documentReference $siblings)\n  #set ($documentId = $services.model.serialize($documentReference, 'default'))\n  #set ($label = $documentReference.name)\n  #if (!$docTreeConfig.showSpaces &amp;&amp;\n      $documentReference.name == $services.model.getEntityReference('DOCUMENT', 'default').name)\n    ## Use the space name as default value for the node label (in case the document is not viewable).\n    #set ($label = $documentReference.parent.name)\n  #end\n  #set ($canViewDoc = $services.security.authorization.hasAccess('view', $documentReference))\n  #set ($canDeleteDoc = $services.security.authorization.hasAccess('delete', $documentReference))\n  #if ($canViewDoc &amp;&amp; $docTreeConfig.showDocumentTitle)\n    ## Display the translated title.\n    #set ($translatedDocument = $xwiki.getDocument($documentReference).translatedDocument)\n    ## Make sure the displayed title is not affected by the sheet request parameter (e.g. when $translatedDocument is\n    ## the current document). By setting the title (even if we don't change it) the internal document instance is cloned\n    ## so it's going to be different than the current document instance (which is the target of the sheet parameter).\n    #set ($discard = $translatedDocument.setTitle($translatedDocument.title))\n    #set ($plainTitle = $translatedDocument.plainTitle)\n    #if (!$stringtool.isBlank($plainTitle))\n      #set ($label = $plainTitle)\n    #end\n  #end\n  #set ($hasChildren = $tree.getChildCount(\"document:$documentId\") &gt; 0)\n  #set ($discard = $siblings.add({\n    'id': \"document:$documentId\",\n    'text': $label,\n    'icon': 'fa fa-file-o',\n    'children': $hasChildren,\n    'data': {\n      'id': $services.model.serialize($documentReference, 'default'),\n      'type': 'document',\n      'validChildren': ['translations', 'attachments', 'attachment', 'classProperties', 'objects', 'document', 'pagination'],\n      'hasContextMenu': true,\n      'draggable': $canViewDoc,\n      'canDelete': $canDeleteDoc,\n      'canMove': $canDeleteDoc,\n      'canCopy': $canViewDoc,\n      'createDocumentURL': $xwiki.getURL($documentReference, 'create', $NULL)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference)\n    }\n  }))\n#end\n\n#macro (maybeAddAddDocumentNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('edit', $documentReference.parent))\n    #addAddDocumentNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addAddDocumentNode $documentReference $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"addDocument:$services.model.serialize($documentReference, 'default')\",\n    'text': 'New page...',\n    'icon': 'fa fa-plus-circle',\n    'children': false,\n    'data': {\n      'type': 'addDocument',\n      'validChildren': []\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference, 'create')\n    }\n  }))\n#end\n\n##\n## Translation Nodes\n##\n\n#macro (maybeAddTranslationsNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addTranslationsNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addTranslationsNode $documentReference $siblings)\n  #set ($discard = $children.add({\n    'id': \"translations:${documentReference}\",\n    'text': 'Translations',\n    'icon': 'fa fa-language',\n    'children': true,\n    'data': {\n      'type': 'translations',\n      'validChildren': ['translation'],\n      'canDelete': $services.security.authorization.hasAccess('delete', $documentReference)\n    }\n  }))\n#end\n\n#macro (maybeAddTranslationNode $nodeReference $siblings)\n  #set ($documentId = $stringtool.substringBeforeLast($nodeReference, '/'))\n  #set ($locale = $services.localization.toLocale($stringtool.substringAfterLast($nodeReference, '/')))\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #set ($translationReference = $services.model.createDocumentReference($documentReference, $locale))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addTranslationNode($translationReference $siblings)\n  #end\n#end\n\n#macro (addTranslationNode $translationReference $siblings)\n  #set ($currentLocale = $services.localization.currentLocale)\n  #set ($discard = $siblings.add({\n    'id': \"translation:$services.model.serialize($translationReference, 'default')_$translationReference.locale\",\n    'text': $translationReference.locale.getDisplayName($currentLocale),\n    'icon': 'fa fa-file-text-o',\n    'children': false,\n    'data': {\n      'type': 'translation',\n      'validChildren': [],\n      'canDelete': $services.security.authorization.hasAccess('delete', $translationReference)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($translationReference)\n    }\n  }))\n#end\n\n##\n## Attachment Nodes\n##\n\n#macro (maybeAddAttachmentsNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addAttachmentsNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addAttachmentsNode $documentReference $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"attachments:${documentReference}\",\n    'text': 'Attachments',\n    'icon': 'fa fa-paperclip',\n    'children': true,\n    'data': {\n      'type': 'attachments',\n      'validChildren': ['addAttachment', 'attachment', 'pagination'],\n      'hasContextMenu': true,\n      'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference, 'view', 'viewer=attachments')\n    }\n  }))\n#end\n\n#macro (maybeAddAttachmentNode $attachmentId $siblings))\n  #set ($attachmentReference = $services.model.resolveAttachment($attachmentId))\n  #set ($document = $xwiki.getDocument($attachmentReference))\n  #set ($attachment = $document.getAttachment($attachmentReference.name))\n  #if ($attachment)\n    #addAttachmentNode($attachment $siblings)\n  #end\n#end\n\n#macro (addAttachmentNode $attachment $siblings)\n  #set ($attachmentReference = $services.model.createAttachmentReference($attachment.document.documentReference,\n    $attachment.filename))\n  #set ($attachmentId = $services.model.serialize($attachmentReference, 'default'))\n  #set ($canEditDoc = $services.security.authorization.hasAccess('edit', $attachmentReference.parent))\n  #getAttachmentIcon($attachment $icon)\n  #set ($discard = $siblings.add({\n    'id': \"attachment:$attachmentId\",\n    'text': $attachment.filename,\n    'icon': $icon,\n    'children': false,\n    'data': {\n      'id': $attachmentId,\n      'type': 'attachment',\n      'validChildren': [],\n      'hasContextMenu': true,\n      'draggable': true,\n      'canRename': $canEditDoc,\n      'canDelete': $canEditDoc,\n      'canMove': $canEditDoc,\n      'canCopy': true,\n      'deleteURL': $attachment.document.getAttachmentURL($attachment.filename, 'delattachment'),\n      'mimetype': $attachment.mimeType\n    },\n    'a_attr': {\n      'href': $attachment.document.getAttachmentURL($attachment.filename)\n    }\n  }))\n#end\n\n#set ($fileIconByMediaType = {\n  'text': ['text/', 'application/xml', 'application/javascript', 'application/ecmascript', 'application/json', 'application/x-sh', '+xml'],\n  'image': ['image/'],\n  'audio': ['audio/'],\n  'video': ['video/'],\n  'pdf': ['application/pdf', 'application/postscript'],\n  'word': ['application/msword', 'application/vnd.ms-word.', 'application/vnd.oasis.opendocument.text', 'application/vnd.openxmlformats-officedocument.word'],\n  'powerpoint': ['application/vnd.ms-powerpoint', 'application/vnd.oasis.opendocument.presentation', 'application/vnd.openxmlformats-officedocument.presentation'],\n  'excel': ['application/vnd.ms-excel', 'application/vnd.oasis.opendocument.spreadsheet', 'application/vnd.openxmlformats-officedocument.spreadsheet'],\n  'archive': ['application/zip', 'application/x-gzip', 'application/x-bzip', 'application/x-tar', 'application/x-gtar', 'application/vnd.xara', '-archive', '-compressed', '-package', '+zip']\n})\n\n#macro (getAttachmentIcon $attachment $return)\n  #set ($mediaType = $attachment.mimeType)\n  #set ($icon = $NULL)\n  #foreach ($entry in $fileIconByMediaType.entrySet())\n    #foreach ($pattern in $entry.value)\n      #if ($mediaType.startsWith($pattern) || $mediaType.endsWith($pattern))\n        #set ($icon = $entry.key)\n        #break\n      #end\n    #end\n    #if ($icon)\n      #break\n    #end\n  #end\n  #set ($suffix = $stringtool.substringAfterLast($attachment.filename, '.'))\n  #set ($codeSuffixes = ['html', 'css', 'js', 'java', 'c', 'cpp', 'c++', 'cs', 'h', 'sql', 'php', 'ruby'])\n  #if (!$icon)\n    #set ($icon = 'fa fa-paperclip')\n  #elseif ($icon == 'text' &amp;&amp; $codeSuffixes.contains($suffix))\n    #set ($icon = 'fa fa-file-code-o')\n  #else\n    #set ($icon = \"fa fa-file-${icon}-o\")\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $icon)\n#end\n\n#macro (maybeAddAddAttachmentNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('edit', $documentReference))\n    #addAddAttachmentNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addAddAttachmentNode $documentReference $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"addAttachment:$documentReference\",\n    'text': 'Upload file...',\n    'icon': 'fa fa-plus-circle',\n    'children': false,\n    'data': {\n      'type': 'addAttachment',\n      'validChildren': []\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference, 'view', 'viewer=attachments')\n    }\n  }))\n#end\n\n##\n## Class Property Nodes\n##\n\n#macro (maybeAddClassPropertiesNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addClassPropertiesNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addClassPropertiesNode $documentReference $siblings)\n  #set ($discard = $children.add({\n    'id': \"classProperties:${documentReference}\",\n    'text': 'Class Properties',\n    'icon': 'fa fa-gears',\n    'children': true,\n    'data': {\n      'type': 'classProperties',\n      'validChildren': ['classProperty'],\n      'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n    }\n  }))\n#end\n\n#set ($iconByPropertyType = {\n  'Boolean': 'check-square-o',\n  'Date': 'calendar-o',\n  'DBList': 'database',\n  'Groups': 'group',\n  'Password': 'asterisk',\n  'Levels': 'lock',\n  'StaticList': 'list',\n  'TextArea': 'paragraph',\n  'DBTreeList': 'sitemap',\n  'Users': 'user'\n})\n\n#macro (maybeAddClassPropertyNode $classPropertyId $siblings)\n  #set ($classPropertyReference = $services.model.resolveClassProperty($classPropertyId))\n  #if ($services.security.authorization.hasAccess('view', $classPropertyReference.parent))\n    #addClassPropertyNode($classPropertyReference $siblings)\n  #end\n#end\n\n#macro (addClassPropertyNode $classPropertyReference $siblings)\n  #set ($classPropertyId = $services.model.serialize($classPropertyReference, 'default'))\n  #set ($xclass = $xwiki.getDocument($classPropertyReference).getxWikiClass())\n  #set ($property = $xclass.get($classPropertyReference.name))\n  #set ($icon = $iconByPropertyType.get($property.classType))\n  #if (!$icon)\n    #set ($icon = 'gear')\n  #end\n  #set ($discard = $siblings.add({\n    'id': \"classProperty:$classPropertyId\",\n    'text': $property.name,\n    'icon': \"fa fa-$icon\",\n    'children': false,\n    'data': {\n      'id': $classPropertyId,\n      'type': 'classProperty',\n      'validChildren': []\n    }\n  }))\n#end\n\n##\n## Object Nodes\n##\n\n#macro (maybeAddObjectsNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addObjectsNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addObjectsNode $documentReference $siblings)\n  #set ($discard = $children.add({\n    'id': \"objects:${documentReference}\",\n    'text': 'Objects',\n    'icon': 'fa fa-cubes',\n    'children': true,\n    'data': {\n      'type': 'objects',\n      'validChildren': ['objectsOfType'],\n      'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n    }\n  }))\n#end\n\n#macro (maybeAddObjectsOfTypeNode $nodeReference $siblings)\n  #set ($parts = $nodeReference.split('/', 2))\n  #if ($parts &amp;&amp; $parts.size() == 2)\n    #set ($documentReference = $services.model.resolveDocument($parts.get(0)))\n    #set ($classReference = $services.model.resolveDocument($parts.get(1)))\n    #if ($services.security.authorization.hasAccess('view', $documentReference))\n      #set ($discard = $children.add({\n        'id': \"objectsOfType:$documentReference/$classReference\",\n        'text': $services.model.serialize($classReference, 'local'),\n        'icon': 'fa fa-cubes',\n        'children': true,\n        'data': {\n          'type': 'objectsOfType',\n          'validChildren': ['object', 'pagination'],\n          'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n        }\n      }))\n    #end\n  #end\n#end\n\n#macro (maybeAddObjectNode $objectId $siblings)\n  #set ($objectReference = $services.model.resolveObject($objectId))\n  #getXObject($objectReference)\n  #if ($object)\n    #addObjectNode($object $objectReference $siblings)\n  #end\n#end\n\n#macro (getXObject $objectReference)\n  ## Object name is: Space.Class[index]\n  #set ($separatorIndex = $objectReference.name.lastIndexOf('['))\n  #set ($classId = $objectReference.name.substring(0, $separatorIndex))\n  #set ($objectNumber = $numbertool.toNumber($objectReference.name.substring($mathtool.add($separatorIndex, 1),\n    $mathtool.sub($objectReference.name.length(), 1))).intValue())\n  #set ($document = $xwiki.getDocument($objectReference))\n  #set ($object = $document.getObject($classId, $objectNumber))\n#end\n\n#macro (addObjectNode $object $objectReference $siblings)\n  #set ($objectId = $services.model.serialize($objectReference, 'default'))\n  #set ($discard = $children.add({\n    'id': \"object:$objectId\",\n    'text': \"[$object.number]\",\n    'icon': 'fa fa-cube',\n    'children': true,\n    'data': {\n      'id': $objectId,\n      'type': 'object',\n      'validChildren': ['objectProperty'],\n      'canDelete': $services.security.authorization.hasAccess('edit', $objectReference.parent)\n    }\n  }))\n#end\n\n#macro (maybeAddObjectPropertyNode $objectPropertyId $siblings)\n  #set ($objectPropertyReference = $services.model.resolveObjectProperty($objectPropertyId))\n  #set ($objectReference = $objectPropertyReference.parent)\n  #getXObject($objectReference)\n  #set ($property = $object.getProperty($objectPropertyReference.name))\n  #if ($property)\n    #addObjectPropertyNode($property $objectReference $siblings)\n  #end\n#end\n\n#macro (addObjectPropertyNode $property $objRef $siblings)\n  #set ($classId = $stringtool.substringBeforeLast($objRef.name, '['))\n  #set ($classRef = $services.model.resolveDocument($classId, 'explicit', $objRef))\n  #set ($xclass = $xwiki.getDocument($classRef).getxWikiClass())\n  #set ($icon = $iconByPropertyType.get($xclass.get($property.name).classType))\n  #if (!$icon)\n    #set ($icon = 'gear')\n  #end\n  #set ($objectPropertyReference = $services.model.createEntityReference($property.name, 'OBJECT_PROPERTY', $objRef))\n  #set ($objectPropertyId = $services.model.serialize($objectPropertyReference, 'default'))\n  #set ($discard = $siblings.add({\n    'id': \"objectProperty:$objectPropertyId\",\n    'text': $property.name,\n    'icon': \"fa fa-$icon\",\n    'children': false,\n    'data': {\n      'id': $objectPropertyId,\n      'type': 'objectProperty',\n      'validChildren': []\n    }\n  }))\n#end\n\n##\n## Pagination Nodes\n##\n\n#macro (addPaginationNode $parentId $offset $totalCount $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"pagination:$parentId\",\n    'text': $services.localization.render('index.documentTree.more', $!mathtool.sub($totalCount, $offset)),\n    'icon': 'fa fa-eye',\n    'children': false,\n    'data': {\n      'type': 'pagination',\n      'validChildren': [],\n      'canDelete': true,\n      'offset': $offset\n    }\n  }))\n#end\n\n##\n## Empty Tree Node\n##\n\n#macro (addEmptyTreeNode $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"empty\",\n    'text': $services.localization.render('index.documentTree.empty'),\n    'icon': 'fa fa-info-circle',\n    'children': false,\n    'data': {\n      'type': 'empty',\n      'validChildren': []\n    }\n  }))\n#end\n\n##------------------------------------------------------------\n## Path\n##------------------------------------------------------------\n\n#macro (getPath $nodeId $return)\n  #set ($path = [])\n  #if ($docTreeConfig.showRoot)\n    #maybeAddNode($docTreeConfig.root $path {})\n  #end\n  #foreach ($pathElement in $tree.getPath($nodeId))\n    #maybeAddNode($pathElement $path {})\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $path)\n#end\n\n##------------------------------------------------------------\n## Context Menu\n##------------------------------------------------------------\n\n#macro (getContextMenu $return)\n  #set ($contextMenuByNodeType = {})\n  #if ($docTreeConfig.showSpaces)\n    #addSpaceContextMenu($contextMenuByNodeType)\n  #end\n  #addDocumentContextMenu($contextMenuByNodeType)\n  #if ($docTreeConfig.showAttachments)\n    #addAttachmentsContextMenu($contextMenuByNodeType)\n    #addAttachmentContextMenu($contextMenuByNodeType)\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $contextMenuByNodeType)\n#end\n\n#macro (addSpaceContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.space = {\n    'createDocument': {\n      'label': 'New Page',\n      'icon': 'fa fa-file-o',\n      'action': 'openLink',\n      'parameters': {\n        'urlProperty': 'createDocumentURL'\n      }\n    },\n    'openLink': {\n      'separator_before': true,\n      'label': 'Go to Space',\n      'icon': 'fa fa-external-link'\n    },\n    'refresh': {\n      'label': 'Refresh',\n      'icon': 'fa fa-refresh'\n    },\n    'paste': {\n      'separator_before': true,\n      'label': 'Paste Into Space',\n      'icon': 'fa fa-clipboard'\n    },\n    'rename': {\n      'label': 'Rename...',\n      'icon': 'fa fa-pencil-square-o'\n    },\n    'remove': {\n      'label': 'Delete',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to move ALL the documents from this space to the recycle bin? If there are hidden documents in this space they will also be deleted.'\n      }\n    }\n  })\n#end\n\n#macro (addDocumentContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.document = {\n    'createDocument': {\n      'label': 'New Page',\n      'icon': 'fa fa-file-o',\n      'action': 'openLink',\n      'parameters': {\n        'urlProperty': 'createDocumentURL'\n      }\n    },\n    'openLink': {\n      'separator_before': true,\n      'label': 'Go to Page',\n      'icon': 'fa fa-external-link'\n    },\n    'refresh': {\n      'label': 'Refresh',\n      'icon': 'fa fa-refresh'\n    },\n    'cut': {\n      'separator_before': true,\n      'label': 'Cut',\n      'icon': 'fa fa-scissors'\n    },\n    'copy': {\n      'label': 'Copy',\n      'icon': 'fa fa-files-o'\n    },\n    'paste': {\n      'label': 'Paste',\n      'icon': 'fa fa-clipboard'\n    },\n    'remove': {\n      'separator_before': true,\n      'label': 'Delete',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to move this document to the recycle bin? All child documents will become orphan as a result.'\n      }\n    }\n  })\n#end\n\n#macro (addAttachmentsContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.attachments = {\n    'openLink': {\n      'label': 'Go to Attachments',\n      'icon': 'fa fa-external-link'\n    },\n    'refresh': {\n      'label': 'Refresh',\n      'icon': 'fa fa-refresh'\n    },\n    'paste': {\n      'separator_before': true,\n      'label': 'Paste',\n      'icon': 'fa fa-clipboard'\n    },\n    'remove': {\n      'label': 'Delete All',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to delete all the attachments of this page?'\n      }\n    }\n  })\n#end\n\n#macro (addAttachmentContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.attachment = {\n    'openLink': {\n      'label': 'Go to Attachment',\n      'icon': 'fa fa-external-link'\n    },\n    'cut': {\n      'separator_before': true,\n      'label': 'Cut',\n      'icon': 'fa fa-scissors'\n    },\n    'copy': {\n      'label': 'Copy',\n      'icon': 'fa fa-files-o'\n    },\n    'rename': {\n      'separator_before': true,\n      'label': 'Rename...',\n      'icon': 'fa fa-pencil-square-o'\n    },\n    'remove': {\n      'label': 'Delete',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to delete this attachment?'\n      }\n    }\n  })\n#end\n\n##------------------------------------------------------------\n## Finder Suggestions\n##------------------------------------------------------------\n\n#macro (getSuggestions $return)\n  #set ($limit = 6)\n  #set ($text = \"$!request.query\")\n  #set ($lists = [])\n  #getRootReference\n  #set ($ancestorsOf = {\n    'space': ['farm', 'wiki', 'space'],\n    'document': ['farm', 'wiki', 'space', 'document'],\n    'attachment': ['farm', 'wiki', 'space', 'document', 'attachments']\n  })\n  #if ((!$docTreeConfig.showSpaces || $docTreeConfig.showTerminalDocuments)\n      &amp;&amp; $ancestorsOf.document.contains($rootType))\n    #addDocumentSuggestions($text $limit $lists)\n  #end\n  #if ($docTreeConfig.showAttachments &amp;&amp; $ancestorsOf.attachment.contains($rootType))\n    #addAttachmentSuggestions($text $limit $lists)\n  #end\n  #if ($docTreeConfig.showSpaces &amp;&amp; $ancestorsOf.space.contains($rootType))\n    #addSpaceSuggestions($text $limit $lists)\n  #end\n  #limitTotalCount($lists $limit)\n  #set ($output = [])\n  #foreach ($list in $lists)\n    #foreach ($node in $list)\n      ## Use the node path as suggestion info.\n      #getPath($node.id $path)\n      ## The path is empty when the node is not found in the tree. This happens if the tree finder doesn't restrict the\n      ## search to the nodes that are available in the tree.\n      #if ($path.size() &gt; 0)\n        #displayPath($path)\n        #set ($node.data.info = $stringtool.join($path.subList(0, $mathtool.sub($path.size(), 1)), ' / '))\n        #set ($discard = $output.add($node))\n      #end\n    #end\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $output)\n#end\n\n#macro (getRootReference)\n  #set ($parts = $docTreeConfig.root.split(':', 2))\n  #if ($parts.size() == 2)\n    #set ($rootType = $parts[0])\n    #set ($rootReference = $parts[1])\n    #if ($rootType == 'wiki')\n      #set ($rootReference = $services.model.createWikiReference($parts[1]))\n    #elseif ($rootType == 'space')\n      #set ($rootReference = $services.model.resolveSpace($parts[1]))\n    #elseif ($rootType == 'document' || $rootType == 'attachments')\n      #set ($rootReference = $services.model.resolveDocument($parts[1]))\n    #end\n  #else\n    #set ($rootType = 'unknown')\n    #set ($rootReference = $parts[0])\n  #end\n#end\n\n#macro (addSpaceSuggestions $text $limit $suggestions)\n  #searchSpaces($text $limit $spaceReferences)\n  #set ($spaceSuggestions = [])\n  #foreach ($spaceReference in $spaceReferences)\n    #maybeAddSpaceNode($spaceReference $spaceSuggestions)\n  #end\n  #set ($discard = $suggestions.add($spaceSuggestions))\n#end\n\n#macro (searchSpaces $text $limit $return)\n  #set ($constraints = [\"upper(space.name) like upper(:spaceNamePattern) escape '!'\"])\n  #set ($params = {'spaceNamePattern': \"%$!text.replaceAll('([%_!])', '!$1')%\"})\n  #addSpaceLocationDatabaseConstraint($rootReference $constraints $params 'space.reference')\n  #set ($statement = \"select space.reference from XWikiSpace space where $stringtool.join($constraints, ' and ') \"\n    + \"order by lower(space.reference), space.reference\")\n  #set ($query = $services.query.hql($statement).setLimit($limit))\n  #addWikiLocationDatabaseConstraint($rootReference $query)\n  #if ($docTreeConfig.filterHiddenDocuments)\n    #set ($query = $query.addFilter('hidden/space'))\n  #end\n  #foreach ($entry in $params.entrySet())\n    #set ($query = $query.bindValue($entry.key, $entry.value))\n  #end\n  #set ($spaceReferences = [])\n  #foreach ($localSpaceRef in $query.execute())\n    #set ($discard = $spaceReferences.add($services.model.resolveSpace($localSpaceRef)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $spaceReferences)\n#end\n\n#macro (addDocumentSuggestions $text $limit $suggestions)\n  #searchDocuments($text $limit $documentReferences)\n  #set ($docSuggestions = [])\n  #foreach ($documentReference in $documentReferences)\n    #maybeAddDocumentNode($documentReference $docSuggestions)\n  #end\n  #set ($discard = $suggestions.add($docSuggestions))\n#end\n\n#macro (searchDocuments $text $limit $return)\n  #if ($xwiki.exists('XWiki.SuggestSolrMacros'))\n    #searchDocumentsSolr($text $limit $return)\n  #else\n    #searchDocumentsDatabase($text $limit $return)\n  #end\n#end\n\n#macro (searchDocumentsSolr $text $limit $return)\n  #set ($params = [\n    'fq=type:DOCUMENT',\n    'fq=doclocale:\"\"',\n    'qf=title^6 name^4 doccontent^2 doccontentraw',\n    'fl=wiki spaces name'\n  ])\n  #addCommonDocTreeSolrParams($params)\n  #set ($params = $stringtool.join($params, $util.newline))\n  #createSearchSuggestQuery($params $text $query)\n  #set ($discard = $query.setLimit($limit))\n  #set ($documentReferences = [])\n  #foreach ($result in $query.execute()[0].results)\n    #set ($discard = $documentReferences.add($services.solr.resolveDocument($result)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $documentReferences)\n#end\n\n#macro (searchDocumentsDatabase $text $limit $return)\n  #set ($constraints = [\n    'doc.translation = 0',\n    'doc.space = space.reference'\n  ])\n  #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n  #set ($matchDocTitle = \"upper(doc.title) like upper(:text) escape '!'\")\n  #set ($params = {'text': \"%$!text.replaceAll('([%_!])', '!$1')%\"})\n  #if ($docTreeConfig.showTerminalDocuments)\n    #set ($matchDocName = \"(doc.name &lt;&gt; '$defaultDocumentName' and upper(doc.name) like upper(:text) escape '!')\")\n    #set ($matchSpaceName = \"(doc.name = '$defaultDocumentName' and upper(space.name) like upper(:text) escape '!')\")\n    #set ($discard = $constraints.add(\"($matchDocTitle or $matchDocName or $matchSpaceName)\"))\n  #else\n    #set ($matchSpaceName = \"upper(space.name) like upper(:text) escape '!'\")\n    #set ($discard = $constraints.addAll([\n      \"doc.name = '$defaultDocumentName'\",\n      \"($matchDocTitle or $matchSpaceName)\"\n    ]))\n  #end\n  #addDocumentLocationDatabaseConstraint($rootReference $constraints $params)\n  #set ($constraints = $stringtool.join($constraints, ' and '))\n  #set ($statement = \"select doc.fullName from XWikiDocument doc, XWikiSpace space where $constraints\")\n  #set ($query = $services.query.hql($statement).setLimit($limit))\n  #foreach ($entry in $params.entrySet())\n    #set ($query = $query.bindValue($entry.key, $entry.value))\n  #end\n  #addWikiLocationDatabaseConstraint($rootReference $query)\n  #if ($docTreeConfig.filterHiddenDocuments)\n    #set ($query = $query.addFilter('hidden/document'))\n  #end\n  #set ($documentReferences = [])\n  #foreach ($docFullName in $query.execute())\n    #set ($discard = $documentReferences.add($services.model.resolveDocument($docFullName)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $documentReferences)\n#end\n\n#macro (addAttachmentSuggestions $text $limit $suggestions)\n  #searchAttachments($text $limit $attachmentReferences)\n  #set ($attachmentSuggestions = [])\n  #foreach ($attachmentReference in $attachmentReferences)\n    #set ($attachment = $xwiki.getDocument($attachmentReference.parent).getAttachment($attachmentReference.name))\n    #addAttachmentNode($attachment $attachmentSuggestions)\n  #end\n  #set ($discard = $suggestions.add($attachmentSuggestions))\n#end\n\n#macro (searchAttachments $text $limit $return)\n  #if ($xwiki.exists('XWiki.SuggestSolrMacros'))\n    #searchAttachmentsSolr($text $limit $return)\n  #else\n    #searchAttachmentsDatabase($text $limit $return)\n  #end\n#end\n\n#macro (searchAttachmentsSolr $text $limit $return)\n  #set ($params = [\n    'fq=type:ATTACHMENT',\n    'qf=filename^4 attcontent',\n    'fl=type wiki spaces name filename'\n  ])\n  #addCommonDocTreeSolrParams($params)\n  #set ($params = $stringtool.join($params, $util.newline))\n  #createSearchSuggestQuery($params $text $query)\n  #set ($discard = $query.setLimit($limit))\n  #set ($attachmentReferences = [])\n  #foreach ($result in $query.execute()[0].results)\n    #set ($discard = $attachmentReferences.add($services.solr.resolve($result)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $attachmentReferences)\n#end\n\n#macro (searchAttachmentsDatabase $text $limit $return)\n  #set ($constraints = [\"upper(attach.filename) like upper(:text) escape'!'\"])\n  #set ($params = {'text': \"%$!text.replaceAll('([%_!])', '!$1')%\"})\n  #if ($docTreeConfig.filterHiddenDocuments &amp;&amp; \"$!xwiki.getUserPreference('displayHiddenDocuments')\" != '1')\n    #set ($discard = $constraints.add(\"(doc.hidden &lt;&gt; true or doc.hidden is null)\"))\n  #end\n  #set ($exactMatch = $rootType == 'attachments')\n  #addDocumentLocationDatabaseConstraint($rootReference $constraints $params $exactMatch)\n  #set ($statement = \"where $stringtool.join($constraints, ' and ')\")\n  ##\n  ## Convert named parameters to positional parameters.\n  #set ($paramList = [])\n  #foreach ($item in $regextool.findAll($statement, ':(\\w+)'))\n    #set ($paramName = $item.get(1).getGroup())\n    #set ($discard = $paramList.add($params.get($paramName)))\n  #end\n  #set ($statement = $statement.replaceAll(':\\w+', '\\?'))\n  ##\n  ## TODO: Search in the wiki that corresponds to the root node.\n  #set ($attachments = $xwiki.searchAttachments($statement, $limit, 0, $paramList))\n  #set ($attachmentReferences = [])\n  #foreach ($attachment in $attachments)\n    #set ($discard = $attachmentReferences.add($services.model.createAttachmentReference(\n      $attachment.document.documentReference, $attachment.filename)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $attachmentReferences)\n#end\n\n#macro (addCommonDocTreeSolrParams $params)\n  #if ($rootType == 'wiki')\n    ## Limit the search to the specified wiki.\n    #addWikiLocationSolrParams($rootReference $params)\n  #elseif ($rootType == 'space')\n    ## Limit the search to the specified space.\n    #addSpaceLocationSolrParams($rootReference $params)\n  #elseif ($rootType == 'document')\n    ## Limit the search to the specified document.\n    #addDocumentLocationSolrParams($rootReference $params)\n  #elseif ($rootType == 'attachments')\n    ## Limit the search to the attachments of the specified document.\n    #addDocumentLocationSolrParams($rootReference $params true)\n  #end\n  #if (!$docTreeConfig.showTerminalDocuments)\n    #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n    #set ($discard = $params.add(\"fq=name:$defaultDocumentName\"))\n  #end\n  #if (!$docTreeConfig.filterHiddenDocuments)\n    ## Force the inclusion of the hidden documents.\n    #set ($discard = $params.add(\"fq=hidden:*\"))\n  #end\n#end\n\n#macro (addWikiLocationSolrParams $rootReference $params)\n  #set ($wikiReference = $rootReference.extractReference('WIKI'))\n  #if ($wikiReference)\n    #set ($discard = $params.add(\"fq=wiki:$wikiReference.name\"))\n  #end\n#end\n\n#macro (addWikiLocationDatabaseConstraint $rootReference $query)\n  #set ($wikiReference = $rootReference.extractReference('WIKI'))\n  #if ($wikiReference)\n    #set ($query = $query.setWiki($wikiReference.name))\n  #end\n#end\n\n#macro (addSpaceLocationSolrParams $rootReference $params $exactMatch)\n  #addWikiLocationSolrParams($rootReference $params)\n  #set ($spaceReference = $rootReference.extractReference('SPACE'))\n  #if ($spaceReference &amp;&amp; ($docTreeConfig.showSpaces || $docTreeConfig.hierarchyMode == 'reference'))\n    #set ($localSpaceReference = $services.model.serialize($spaceReference, 'local'))\n    #set ($spaceField = 'space_prefix')\n    #if ($exactMatch)\n      #set ($spaceField = 'space_exact')\n    #end\n    #set ($discard = $params.add(\"fq=$spaceField:\"\"$localSpaceReference\"\"\"))\n  #end\n#end\n\n#macro (addSpaceLocationDatabaseConstraint $rootReference $constraints $params $field)\n  #set ($spaceReference = $rootReference.extractReference('SPACE'))\n  #if ($spaceReference &amp;&amp; ($docTreeConfig.showSpaces || $docTreeConfig.hierarchyMode == 'reference'))\n    #set ($discard = $constraints.add(\"($field = :localSpaceReference or $field like :spaceReferencePattern escape '!')\"))\n    #set ($localSpaceReference = $services.model.serialize($spaceReference, 'local'))\n    #set ($discard = $params.put('localSpaceReference', $localSpaceReference))\n    #set ($spaceReferencePattern = $services.model.createEntityReference('x', 'SPACE', $spaceReference))\n    #set ($spaceReferencePattern = $services.model.serialize($spaceReferencePattern, 'local'))\n    #set ($spaceReferencePattern = $stringtool.removeEnd($spaceReferencePattern, 'x').replaceAll('([%_!])', '!$1'))\n    #set ($discard = $params.put('spaceReferencePattern', \"$spaceReferencePattern%\"))\n  #end\n#end\n\n#macro (addDocumentLocationSolrParams $rootReference $params $exactMatch)\n  #set ($documentReference = $rootReference.extractReference('DOCUMENT'))\n  #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n  #set ($macro.exactMatch = $exactMatch || ($docTreeConfig.hierarchyMode == 'reference'\n    &amp;&amp; $documentReference &amp;&amp; $documentReference.name != $defaultDocumentName))\n  #addSpaceLocationSolrParams($rootReference $params $macro.exactMatch)\n  #if ($documentReference &amp;&amp; $macro.exactMatch)\n    #set ($discard = $params.add(\"fq=name_exact:\"\"$documentReference.name\"\"\"))\n  #end\n#end\n\n#macro (addDocumentLocationDatabaseConstraint $rootReference $constraints $params $exactMatch)\n  #set ($documentReference = $rootReference.extractReference('DOCUMENT'))\n  #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n  #set ($macro.exactMatch = $exactMatch || ($docTreeConfig.hierarchyMode == 'reference'\n    &amp;&amp; $documentReference &amp;&amp; $documentReference.name != $defaultDocumentName))\n  #if ($documentReference &amp;&amp; $macro.exactMatch)\n    #set ($localDocumentReference = $services.model.serialize($documentReference, 'local'))\n    #set ($discard = $constraints.add('doc.fullName = :localDocumentReference'))\n    #set ($discard = $params.put('localDocumentReference', $localDocumentReference))\n  #elseif (!$macro.exactMatch)\n    #addSpaceLocationDatabaseConstraint($rootReference $constraints $params 'doc.space')\n  #end\n#end\n\n#macro (displayPath $path)\n  #foreach ($node in $path)\n    #set ($discard = $path.set($foreach.index, $node.text))\n  #end\n#end\n\n#macro (limitTotalCount $lists $limit)\n  ## Prepare the input.\n  #set ($input = [])\n  #foreach ($list in $lists)\n    ## We use queues to be able to easily remove items from the start.\n    #set ($queue = $collectiontool.queue)\n    #set ($discard = $queue.addAll($list))\n    #set ($discard = $input.add($queue))\n    ## We will add (part of) the items back later.\n    #set ($discard = $list.clear())\n  #end\n  ## Limit the total item count.\n  #set ($index = -1)\n  #foreach ($count in [1..$limit])\n    #foreach ($i in [1..$input.size()])\n      #set ($newIndex = ($index + $i) % $input.size())\n      #if ($input.get($newIndex).size() &gt; 0)\n        #set ($index = $newIndex)\n        #break\n      #end\n    #end\n    #if ($index &lt; 0 || $input.get($index).isEmpty())\n      #break\n    #else\n      #set ($discard = $lists.get($index).add($input.get($index).poll()))\n    #end\n  #end\n#end\n{{/velocity}}</content>\n</xwikidoc>\n"], "fixing_code": ["<?xml version=\"1.1\" encoding=\"UTF-8\"?>\n\n<!--\n * See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 2.1 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n-->\n\n<xwikidoc version=\"1.3\" reference=\"XWiki.DocumentTreeMacros\" locale=\"\">\n  <web>XWiki</web>\n  <name>DocumentTreeMacros</name>\n  <language/>\n  <defaultLanguage/>\n  <translation>0</translation>\n  <creator>xwiki:XWiki.Admin</creator>\n  <parent>XWiki.DocumentTree</parent>\n  <author>xwiki:XWiki.Admin</author>\n  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>\n  <version>1.1</version>\n  <title>Document Tree Macros</title>\n  <comment/>\n  <minorEdit>false</minorEdit>\n  <syntaxId>xwiki/2.1</syntaxId>\n  <hidden>true</hidden>\n  <content>{{include reference=\"XWiki.SuggestSolrMacros\" /}}\n\n{{template name=\"documentTree_macros.vm\" /}}\n\n{{velocity output=\"false\"}}\n#macro (updateDocTreeConfigFromRequest)\n  #foreach ($entry in $docTreeConfig.entrySet())\n    #set ($valueFromRequest = $request.getParameter($entry.key))\n    #if (\"$!valueFromRequest\" != '')\n      #if ($entry.value.getClass().getName() == 'java.lang.Boolean')\n        #set ($entry.value = $valueFromRequest == 'true')\n      #elseif ($entry.value.iterator())\n        #set ($valuesFromRequest = $request.getParameterValues($entry.key))\n        #set ($discard = $entry.value.clear())\n        ## We need to convert the String[] to List&lt;String&gt; before calling addAll (which expects a collection).\n        #set ($discard = $entry.value.addAll($valuesFromRequest.subList(0, $valuesFromRequest.size())))\n      #else\n        #set ($entry.value = $valueFromRequest)\n      #end\n    #end\n  #end\n  ## Show the wikis only for global users.\n  #set ($docTreeConfig.showWikis = $docTreeConfig.showWikis &amp;&amp;\n    $xcontext.userReference.wikiReference.name == $xcontext.mainWikiName)\n  #if (\"$!docTreeConfig.root\" == '')\n    #if ($docTreeConfig.showWikis)\n      #set ($docTreeConfig.root = 'farm:*')\n    #else\n      #set ($docTreeConfig.root = \"wiki:$xcontext.database\")\n    #end\n  #end\n  ## Handle relative references\n  #makeNodeReferencesAbsolute($docTreeConfig ['root', 'openTo'])\n  ## Sort the child documents by (raw) title when the node label is the document title.\n  #if ($docTreeConfig.showDocumentTitle)\n    #set ($docTreeConfig.orderBy = 'title')\n  #end\n  ## Determine which hierarchy needs to be used.\n  #if ($docTreeConfig.showSpaces)\n    #if ($docTreeConfig.hierarchyMode == 'parentchild')\n      #set ($tree = $services.tree.parentChildOnNestedSpaces)\n    #else\n      #set ($tree = $services.tree.nestedSpaces)\n    #end\n  #elseif ($docTreeConfig.hierarchyMode == 'parentchild')\n    #set ($tree = $services.tree.parentChild)\n  #else\n    #set ($tree = $services.tree.nestedPages)\n  #end\n  #set ($discard = $tree.properties.putAll($docTreeConfig))\n#end\n\n#set ($documentPseudoNodeTypes = ['translations', 'attachments', 'classProperties', 'objects', 'addDocument',\n  'addAttachment'])\n#macro (makeNodeReferencesAbsolute $map $keys)\n  #foreach ($key in $keys)\n    #set ($nodeId = $map.get($key))\n    #set ($parts = $nodeId.split(':', 2))\n    #if ($parts &amp;&amp; $parts.size() == 2)\n      #set ($nodeType = $parts[0].toLowerCase())\n      #set ($nodeReference = $parts[1])\n      #set ($entityType = $nodeType)\n      #if ($documentPseudoNodeTypes.contains($nodeType))\n        #set ($entityType = 'document')\n      #end\n      #set ($discard = \"#evaluate(\"\"${escapetool.h}set (${escapetool.d}entityReference =\n        ${escapetool.d}services.model.resolve$stringtool.capitalize($entityType)(${escapetool.d}nodeReference))\"\")\")\n      #if ($entityReference)\n        #set ($nodeReference = $services.model.serialize($entityReference, 'default'))\n      #end\n      #set ($discard = $map.put($key, \"$nodeType:$nodeReference\"))\n    #end\n  #end\n#end\n\n#macro (handleDocumentTreeRequest)\n  #if ($request.action)\n    #if ($services.csrf.isTokenValid($request.form_token))\n      $response.sendError(400, 'The specified action is not supported.')\n    #elseif ($isAjaxRequest)\n      $response.sendError(403, 'The CSRF token is missing.')\n    #else\n      $response.sendRedirect($services.csrf.getResubmissionURL())\n    #end\n  #else\n    #set ($data = $NULL)\n    #if ($request.data == 'children')\n      #getChildren($request.id $data)\n    #elseif ($request.data == 'path')\n      #getPath($request.id $data)\n    #elseif ($request.data == 'contextMenu')\n      #getContextMenu($data)\n    #elseif ($request.data == 'suggestions')\n      #getSuggestions($data)\n    #end\n    #if ($data)\n      #postProcessDocumentTreeData($data)\n      #jsonResponse($data)\n    #else\n      $response.sendError(404)\n    #end\n  #end\n#end\n\n#macro (postProcessDocumentTreeData $data)\n  ## This is just a hook to allow post processing the document tree data.\n#end\n\n##------------------------------------------------------------\n## Children\n##------------------------------------------------------------\n\n#macro (getChildren $nodeId $return)\n  #set ($children = [])\n  #if ($nodeId == '#')\n    ## Return the top level nodes.\n    #set ($actualNodeId = $docTreeConfig.root)\n  #else\n    ## Return the children of the specified node.\n    #set ($actualNodeId = $nodeId)\n  #end\n  #set ($offset = $mathtool.max($numbertool.toNumber($request.offset).intValue(), 0))\n  #if (\"$!offset\" == '')\n    #set ($offset = 0)\n  #end\n  #set ($limit = $mathtool.max($numbertool.toNumber($request.limit).intValue(), 1))\n  #if (\"$!limit\" == '')\n    #set ($limit = 15)\n  #end\n  #if ($nodeId == '#' &amp;&amp; $docTreeConfig.showRoot)\n    #maybeAddNode($actualNodeId $children)\n  #else\n    #addChildNodes($actualNodeId $offset $limit $children)\n  #end\n  #if ($children.isEmpty() &amp;&amp; $nodeId == '#')\n    ## Inform the user that the tree is empty.\n    #addEmptyTreeNode($children)\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $children)\n#end\n\n#macro (maybeAddNode $nodeId $siblings $placeholder)\n  #set ($parts = $nodeId.split(':', 2))\n  #if ($parts &amp;&amp; $parts.size() == 2)\n    #set ($nodeType = $parts[0])\n    #set ($nodeReference = $parts[1])\n    #set ($discard = \"#evaluate(\"\"${escapetool.h}maybeAdd$stringtool.capitalize($nodeType)Node(\n      ${escapetool.d}nodeReference ${escapetool.d}siblings ${escapetool.d}placeholder)\"\")\")\n  #end\n#end\n\n#macro (addChildNodes $nodeId $offset $limit $children)\n  ## Avoid pages with only one node when paginating the child nodes.\n  #set ($actualLimit = $limit + 1)\n  #set ($childNodeIds = $tree.getChildren($nodeId, $offset, $actualLimit))\n  #set ($hasMoreChildNodes = false)\n  #if ($childNodeIds.size() &gt;= $actualLimit)\n    #set ($totalCount = $tree.getChildCount($nodeId))\n    #set ($newOffset = $offset + $actualLimit)\n    #if ($newOffset &lt; $totalCount)\n      ## There are at least 2 more child nodes.\n      #set ($hasMoreChildNodes = true)\n      #set ($newOffset = $newOffset - 1)\n      #set ($childNodeIds = $childNodeIds.subList(0, $limit))\n    #end\n  #end\n  #foreach ($childNodeId in $childNodeIds)\n    #maybeAddNode($childNodeId $children)\n  #end\n  #if ($hasMoreChildNodes)\n    #addPaginationNode($nodeId $newOffset $totalCount $children)\n  #end\n#end\n\n##\n## Farm Node\n##\n\n#macro (maybeAddFarmNode $nodeReference $siblings)\n  #set ($farmHomeReference = $services.model.resolveDocument('', 'default'))\n  #set ($discard = $siblings.add({\n    'id': 'farm:*',\n    'text': 'Farm',\n    'icon': 'fa fa-home',\n    'children': true,\n    'data': {\n      'type': 'farm',\n      'validChildren': ['wiki', 'pagination']\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($farmHomeReference)\n    }\n  }))\n#end\n\n##\n## Wiki Nodes\n##\n\n#macro (maybeAddWikiNode $wikiId $siblings $placeholder)\n  #set ($wiki = $services.wiki.getById($wikiId))\n  #if ($wiki &amp;&amp; (!$docTreeConfig.showOnlyViewable || $services.security.authorization.hasAccess('view', $wiki.reference)))\n    #addWikiNode($wiki $siblings)\n  #elseif ($placeholder)\n    #set ($discard = $siblings.add($placeholder))\n  #end\n#end\n\n#macro (addWikiNode $wiki $siblings)\n  ## The main wiki cannot be deleted. For the rest we need special rights.\n  #set ($canDeleteWiki = $wiki.id != $services.wiki.mainWikiId\n    &amp;&amp; $services.wiki.canDeleteWiki($xcontext.user, $wiki.id))\n  #if ($docTreeConfig.showWikiPrettyName)\n    #set ($label = $wiki.prettyName)\n  #else\n    #set ($label = $wiki.id)\n  #end\n  #set ($discard = $siblings.add({\n    'id': \"wiki:$wiki.id\",\n    'text': $label,\n    'icon': 'fa fa-hdd-o',\n    'children': true,\n    'data': {\n      'id': $wiki.id,\n      'type': 'wiki',\n      'validChildren': ['space', 'document', 'pagination'],\n      'canDelete': $canDeleteWiki\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($wiki.mainPageReference)\n    }\n  }))\n#end\n\n##\n## Space Nodes\n##\n\n#macro (maybeAddSpaceNode $spaceIdOrReference $siblings $placeholder)\n  #if ($spaceIdOrReference.type)\n    #set ($spaceReference = $spaceIdOrReference)\n  #else\n    #set ($spaceReference = $services.model.resolveSpace($spaceIdOrReference))\n  #end\n  #if (!$docTreeConfig.showOnlyViewable || $services.security.authorization.hasAccess('view', $spaceReference))\n    #addSpaceNode($spaceReference $siblings)\n  #elseif ($placeholder)\n    #set ($discard = $siblings.add($placeholder))\n  #end\n#end\n\n#macro (addSpaceNode $spaceReference $siblings)\n  #set ($spaceId = $services.model.serialize($spaceReference, 'default'))\n  #set ($hasSpaceAdmin = $services.security.authorization.hasAccess('admin', $spaceReference))\n  #set ($canViewSpace = $services.security.authorization.hasAccess('view', $spaceReference))\n  #if ($docTreeConfig.showTerminalDocuments)\n    ## Each space has at least one document or one sub-space. There's no such thing as \"empty space\" in the model.\n    #set ($hasChildren = true)\n  #else\n    ## We display only the nested spaces. This space might contain only documents.\n    #set ($hasChildren = $tree.getChildCount(\"space:$spaceId\") &gt; 0)\n  #end\n  #set ($discard = $siblings.add({\n    'id': \"space:$spaceId\",\n    'text': $spaceReference.name,\n    'icon': 'fa fa-folder-o',\n    'iconOpened': 'fa fa-folder-open-o',\n    'children': $hasChildren,\n    'data': {\n      'id': $spaceId,\n      'type': 'space',\n      'validChildren': ['addDocument', 'space', 'document', 'pagination'],\n      'hasContextMenu': true,\n      'draggable': $canViewSpace,\n      'canMove': $hasSpaceAdmin,\n      'canCopy': $canViewSpace,\n      'canRename': $hasSpaceAdmin,\n      'canDelete': $hasSpaceAdmin,\n      'createDocumentURL': $xwiki.getURL($spaceReference, 'create', $NULL),\n      'deleteURL': $xwiki.getURL($spaceReference, 'deletespace', $NULL)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($spaceReference)\n    }\n  }))\n#end\n\n##\n## Document Nodes\n##\n\n#macro (maybeAddDocumentNode $documentIdOrReference $siblings $placeholder)\n  #if ($documentIdOrReference.type)\n    #set ($documentReference = $documentIdOrReference)\n  #else\n    #set ($documentReference = $services.model.resolveDocument($documentIdOrReference))\n  #end\n  #if (!$docTreeConfig.showOnlyViewable || $services.security.authorization.hasAccess('view', $documentReference))\n    #addDocumentNode($documentReference $siblings)\n  #elseif ($placeholder)\n    #set ($discard = $siblings.add($placeholder))\n  #end\n#end\n\n#macro (addDocumentNode $documentReference $siblings)\n  #set ($documentId = $services.model.serialize($documentReference, 'default'))\n  #set ($label = $documentReference.name)\n  #if (!$docTreeConfig.showSpaces &amp;&amp;\n      $documentReference.name == $services.model.getEntityReference('DOCUMENT', 'default').name)\n    ## Use the space name as default value for the node label (in case the document is not viewable).\n    #set ($label = $documentReference.parent.name)\n  #end\n  #set ($canViewDoc = $services.security.authorization.hasAccess('view', $documentReference))\n  #set ($canDeleteDoc = $services.security.authorization.hasAccess('delete', $documentReference))\n  #if ($canViewDoc &amp;&amp; $docTreeConfig.showDocumentTitle)\n    ## Display the translated title.\n    #set ($translatedDocument = $xwiki.getDocument($documentReference).translatedDocument)\n    #set ($plainTitle = $translatedDocument.plainTitle)\n    #if (!$stringtool.isBlank($plainTitle))\n      #set ($label = $plainTitle)\n    #end\n  #end\n  #set ($hasChildren = $tree.getChildCount(\"document:$documentId\") &gt; 0)\n  #set ($discard = $siblings.add({\n    'id': \"document:$documentId\",\n    'text': $label,\n    'icon': 'fa fa-file-o',\n    'children': $hasChildren,\n    'data': {\n      'id': $services.model.serialize($documentReference, 'default'),\n      'type': 'document',\n      'validChildren': ['translations', 'attachments', 'attachment', 'classProperties', 'objects', 'document', 'pagination'],\n      'hasContextMenu': true,\n      'draggable': $canViewDoc,\n      'canDelete': $canDeleteDoc,\n      'canMove': $canDeleteDoc,\n      'canCopy': $canViewDoc,\n      'createDocumentURL': $xwiki.getURL($documentReference, 'create', $NULL)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference)\n    }\n  }))\n#end\n\n#macro (maybeAddAddDocumentNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('edit', $documentReference.parent))\n    #addAddDocumentNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addAddDocumentNode $documentReference $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"addDocument:$services.model.serialize($documentReference, 'default')\",\n    'text': 'New page...',\n    'icon': 'fa fa-plus-circle',\n    'children': false,\n    'data': {\n      'type': 'addDocument',\n      'validChildren': []\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference, 'create')\n    }\n  }))\n#end\n\n##\n## Translation Nodes\n##\n\n#macro (maybeAddTranslationsNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addTranslationsNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addTranslationsNode $documentReference $siblings)\n  #set ($discard = $children.add({\n    'id': \"translations:${documentReference}\",\n    'text': 'Translations',\n    'icon': 'fa fa-language',\n    'children': true,\n    'data': {\n      'type': 'translations',\n      'validChildren': ['translation'],\n      'canDelete': $services.security.authorization.hasAccess('delete', $documentReference)\n    }\n  }))\n#end\n\n#macro (maybeAddTranslationNode $nodeReference $siblings)\n  #set ($documentId = $stringtool.substringBeforeLast($nodeReference, '/'))\n  #set ($locale = $services.localization.toLocale($stringtool.substringAfterLast($nodeReference, '/')))\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #set ($translationReference = $services.model.createDocumentReference($documentReference, $locale))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addTranslationNode($translationReference $siblings)\n  #end\n#end\n\n#macro (addTranslationNode $translationReference $siblings)\n  #set ($currentLocale = $services.localization.currentLocale)\n  #set ($discard = $siblings.add({\n    'id': \"translation:$services.model.serialize($translationReference, 'default')_$translationReference.locale\",\n    'text': $translationReference.locale.getDisplayName($currentLocale),\n    'icon': 'fa fa-file-text-o',\n    'children': false,\n    'data': {\n      'type': 'translation',\n      'validChildren': [],\n      'canDelete': $services.security.authorization.hasAccess('delete', $translationReference)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($translationReference)\n    }\n  }))\n#end\n\n##\n## Attachment Nodes\n##\n\n#macro (maybeAddAttachmentsNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addAttachmentsNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addAttachmentsNode $documentReference $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"attachments:${documentReference}\",\n    'text': 'Attachments',\n    'icon': 'fa fa-paperclip',\n    'children': true,\n    'data': {\n      'type': 'attachments',\n      'validChildren': ['addAttachment', 'attachment', 'pagination'],\n      'hasContextMenu': true,\n      'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference, 'view', 'viewer=attachments')\n    }\n  }))\n#end\n\n#macro (maybeAddAttachmentNode $attachmentId $siblings))\n  #set ($attachmentReference = $services.model.resolveAttachment($attachmentId))\n  #set ($document = $xwiki.getDocument($attachmentReference))\n  #set ($attachment = $document.getAttachment($attachmentReference.name))\n  #if ($attachment)\n    #addAttachmentNode($attachment $siblings)\n  #end\n#end\n\n#macro (addAttachmentNode $attachment $siblings)\n  #set ($attachmentReference = $services.model.createAttachmentReference($attachment.document.documentReference,\n    $attachment.filename))\n  #set ($attachmentId = $services.model.serialize($attachmentReference, 'default'))\n  #set ($canEditDoc = $services.security.authorization.hasAccess('edit', $attachmentReference.parent))\n  #getAttachmentIcon($attachment $icon)\n  #set ($discard = $siblings.add({\n    'id': \"attachment:$attachmentId\",\n    'text': $attachment.filename,\n    'icon': $icon,\n    'children': false,\n    'data': {\n      'id': $attachmentId,\n      'type': 'attachment',\n      'validChildren': [],\n      'hasContextMenu': true,\n      'draggable': true,\n      'canRename': $canEditDoc,\n      'canDelete': $canEditDoc,\n      'canMove': $canEditDoc,\n      'canCopy': true,\n      'deleteURL': $attachment.document.getAttachmentURL($attachment.filename, 'delattachment'),\n      'mimetype': $attachment.mimeType\n    },\n    'a_attr': {\n      'href': $attachment.document.getAttachmentURL($attachment.filename)\n    }\n  }))\n#end\n\n#set ($fileIconByMediaType = {\n  'text': ['text/', 'application/xml', 'application/javascript', 'application/ecmascript', 'application/json', 'application/x-sh', '+xml'],\n  'image': ['image/'],\n  'audio': ['audio/'],\n  'video': ['video/'],\n  'pdf': ['application/pdf', 'application/postscript'],\n  'word': ['application/msword', 'application/vnd.ms-word.', 'application/vnd.oasis.opendocument.text', 'application/vnd.openxmlformats-officedocument.word'],\n  'powerpoint': ['application/vnd.ms-powerpoint', 'application/vnd.oasis.opendocument.presentation', 'application/vnd.openxmlformats-officedocument.presentation'],\n  'excel': ['application/vnd.ms-excel', 'application/vnd.oasis.opendocument.spreadsheet', 'application/vnd.openxmlformats-officedocument.spreadsheet'],\n  'archive': ['application/zip', 'application/x-gzip', 'application/x-bzip', 'application/x-tar', 'application/x-gtar', 'application/vnd.xara', '-archive', '-compressed', '-package', '+zip']\n})\n\n#macro (getAttachmentIcon $attachment $return)\n  #set ($mediaType = $attachment.mimeType)\n  #set ($icon = $NULL)\n  #foreach ($entry in $fileIconByMediaType.entrySet())\n    #foreach ($pattern in $entry.value)\n      #if ($mediaType.startsWith($pattern) || $mediaType.endsWith($pattern))\n        #set ($icon = $entry.key)\n        #break\n      #end\n    #end\n    #if ($icon)\n      #break\n    #end\n  #end\n  #set ($suffix = $stringtool.substringAfterLast($attachment.filename, '.'))\n  #set ($codeSuffixes = ['html', 'css', 'js', 'java', 'c', 'cpp', 'c++', 'cs', 'h', 'sql', 'php', 'ruby'])\n  #if (!$icon)\n    #set ($icon = 'fa fa-paperclip')\n  #elseif ($icon == 'text' &amp;&amp; $codeSuffixes.contains($suffix))\n    #set ($icon = 'fa fa-file-code-o')\n  #else\n    #set ($icon = \"fa fa-file-${icon}-o\")\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $icon)\n#end\n\n#macro (maybeAddAddAttachmentNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('edit', $documentReference))\n    #addAddAttachmentNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addAddAttachmentNode $documentReference $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"addAttachment:$documentReference\",\n    'text': 'Upload file...',\n    'icon': 'fa fa-plus-circle',\n    'children': false,\n    'data': {\n      'type': 'addAttachment',\n      'validChildren': []\n    },\n    'a_attr': {\n      'href': $xwiki.getURL($documentReference, 'view', 'viewer=attachments')\n    }\n  }))\n#end\n\n##\n## Class Property Nodes\n##\n\n#macro (maybeAddClassPropertiesNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addClassPropertiesNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addClassPropertiesNode $documentReference $siblings)\n  #set ($discard = $children.add({\n    'id': \"classProperties:${documentReference}\",\n    'text': 'Class Properties',\n    'icon': 'fa fa-gears',\n    'children': true,\n    'data': {\n      'type': 'classProperties',\n      'validChildren': ['classProperty'],\n      'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n    }\n  }))\n#end\n\n#set ($iconByPropertyType = {\n  'Boolean': 'check-square-o',\n  'Date': 'calendar-o',\n  'DBList': 'database',\n  'Groups': 'group',\n  'Password': 'asterisk',\n  'Levels': 'lock',\n  'StaticList': 'list',\n  'TextArea': 'paragraph',\n  'DBTreeList': 'sitemap',\n  'Users': 'user'\n})\n\n#macro (maybeAddClassPropertyNode $classPropertyId $siblings)\n  #set ($classPropertyReference = $services.model.resolveClassProperty($classPropertyId))\n  #if ($services.security.authorization.hasAccess('view', $classPropertyReference.parent))\n    #addClassPropertyNode($classPropertyReference $siblings)\n  #end\n#end\n\n#macro (addClassPropertyNode $classPropertyReference $siblings)\n  #set ($classPropertyId = $services.model.serialize($classPropertyReference, 'default'))\n  #set ($xclass = $xwiki.getDocument($classPropertyReference).getxWikiClass())\n  #set ($property = $xclass.get($classPropertyReference.name))\n  #set ($icon = $iconByPropertyType.get($property.classType))\n  #if (!$icon)\n    #set ($icon = 'gear')\n  #end\n  #set ($discard = $siblings.add({\n    'id': \"classProperty:$classPropertyId\",\n    'text': $property.name,\n    'icon': \"fa fa-$icon\",\n    'children': false,\n    'data': {\n      'id': $classPropertyId,\n      'type': 'classProperty',\n      'validChildren': []\n    }\n  }))\n#end\n\n##\n## Object Nodes\n##\n\n#macro (maybeAddObjectsNode $documentId $siblings)\n  #set ($documentReference = $services.model.resolveDocument($documentId))\n  #if ($services.security.authorization.hasAccess('view', $documentReference))\n    #addObjectsNode($documentReference $siblings)\n  #end\n#end\n\n#macro (addObjectsNode $documentReference $siblings)\n  #set ($discard = $children.add({\n    'id': \"objects:${documentReference}\",\n    'text': 'Objects',\n    'icon': 'fa fa-cubes',\n    'children': true,\n    'data': {\n      'type': 'objects',\n      'validChildren': ['objectsOfType'],\n      'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n    }\n  }))\n#end\n\n#macro (maybeAddObjectsOfTypeNode $nodeReference $siblings)\n  #set ($parts = $nodeReference.split('/', 2))\n  #if ($parts &amp;&amp; $parts.size() == 2)\n    #set ($documentReference = $services.model.resolveDocument($parts.get(0)))\n    #set ($classReference = $services.model.resolveDocument($parts.get(1)))\n    #if ($services.security.authorization.hasAccess('view', $documentReference))\n      #set ($discard = $children.add({\n        'id': \"objectsOfType:$documentReference/$classReference\",\n        'text': $services.model.serialize($classReference, 'local'),\n        'icon': 'fa fa-cubes',\n        'children': true,\n        'data': {\n          'type': 'objectsOfType',\n          'validChildren': ['object', 'pagination'],\n          'canDelete': $services.security.authorization.hasAccess('edit', $documentReference)\n        }\n      }))\n    #end\n  #end\n#end\n\n#macro (maybeAddObjectNode $objectId $siblings)\n  #set ($objectReference = $services.model.resolveObject($objectId))\n  #getXObject($objectReference)\n  #if ($object)\n    #addObjectNode($object $objectReference $siblings)\n  #end\n#end\n\n#macro (getXObject $objectReference)\n  ## Object name is: Space.Class[index]\n  #set ($separatorIndex = $objectReference.name.lastIndexOf('['))\n  #set ($classId = $objectReference.name.substring(0, $separatorIndex))\n  #set ($objectNumber = $numbertool.toNumber($objectReference.name.substring($mathtool.add($separatorIndex, 1),\n    $mathtool.sub($objectReference.name.length(), 1))).intValue())\n  #set ($document = $xwiki.getDocument($objectReference))\n  #set ($object = $document.getObject($classId, $objectNumber))\n#end\n\n#macro (addObjectNode $object $objectReference $siblings)\n  #set ($objectId = $services.model.serialize($objectReference, 'default'))\n  #set ($discard = $children.add({\n    'id': \"object:$objectId\",\n    'text': \"[$object.number]\",\n    'icon': 'fa fa-cube',\n    'children': true,\n    'data': {\n      'id': $objectId,\n      'type': 'object',\n      'validChildren': ['objectProperty'],\n      'canDelete': $services.security.authorization.hasAccess('edit', $objectReference.parent)\n    }\n  }))\n#end\n\n#macro (maybeAddObjectPropertyNode $objectPropertyId $siblings)\n  #set ($objectPropertyReference = $services.model.resolveObjectProperty($objectPropertyId))\n  #set ($objectReference = $objectPropertyReference.parent)\n  #getXObject($objectReference)\n  #set ($property = $object.getProperty($objectPropertyReference.name))\n  #if ($property)\n    #addObjectPropertyNode($property $objectReference $siblings)\n  #end\n#end\n\n#macro (addObjectPropertyNode $property $objRef $siblings)\n  #set ($classId = $stringtool.substringBeforeLast($objRef.name, '['))\n  #set ($classRef = $services.model.resolveDocument($classId, 'explicit', $objRef))\n  #set ($xclass = $xwiki.getDocument($classRef).getxWikiClass())\n  #set ($icon = $iconByPropertyType.get($xclass.get($property.name).classType))\n  #if (!$icon)\n    #set ($icon = 'gear')\n  #end\n  #set ($objectPropertyReference = $services.model.createEntityReference($property.name, 'OBJECT_PROPERTY', $objRef))\n  #set ($objectPropertyId = $services.model.serialize($objectPropertyReference, 'default'))\n  #set ($discard = $siblings.add({\n    'id': \"objectProperty:$objectPropertyId\",\n    'text': $property.name,\n    'icon': \"fa fa-$icon\",\n    'children': false,\n    'data': {\n      'id': $objectPropertyId,\n      'type': 'objectProperty',\n      'validChildren': []\n    }\n  }))\n#end\n\n##\n## Pagination Nodes\n##\n\n#macro (addPaginationNode $parentId $offset $totalCount $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"pagination:$parentId\",\n    'text': $services.localization.render('index.documentTree.more', $!mathtool.sub($totalCount, $offset)),\n    'icon': 'fa fa-eye',\n    'children': false,\n    'data': {\n      'type': 'pagination',\n      'validChildren': [],\n      'canDelete': true,\n      'offset': $offset\n    }\n  }))\n#end\n\n##\n## Empty Tree Node\n##\n\n#macro (addEmptyTreeNode $siblings)\n  #set ($discard = $siblings.add({\n    'id': \"empty\",\n    'text': $services.localization.render('index.documentTree.empty'),\n    'icon': 'fa fa-info-circle',\n    'children': false,\n    'data': {\n      'type': 'empty',\n      'validChildren': []\n    }\n  }))\n#end\n\n##------------------------------------------------------------\n## Path\n##------------------------------------------------------------\n\n#macro (getPath $nodeId $return)\n  #set ($path = [])\n  #if ($docTreeConfig.showRoot)\n    #maybeAddNode($docTreeConfig.root $path {})\n  #end\n  #foreach ($pathElement in $tree.getPath($nodeId))\n    #maybeAddNode($pathElement $path {})\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $path)\n#end\n\n##------------------------------------------------------------\n## Context Menu\n##------------------------------------------------------------\n\n#macro (getContextMenu $return)\n  #set ($contextMenuByNodeType = {})\n  #if ($docTreeConfig.showSpaces)\n    #addSpaceContextMenu($contextMenuByNodeType)\n  #end\n  #addDocumentContextMenu($contextMenuByNodeType)\n  #if ($docTreeConfig.showAttachments)\n    #addAttachmentsContextMenu($contextMenuByNodeType)\n    #addAttachmentContextMenu($contextMenuByNodeType)\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $contextMenuByNodeType)\n#end\n\n#macro (addSpaceContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.space = {\n    'createDocument': {\n      'label': 'New Page',\n      'icon': 'fa fa-file-o',\n      'action': 'openLink',\n      'parameters': {\n        'urlProperty': 'createDocumentURL'\n      }\n    },\n    'openLink': {\n      'separator_before': true,\n      'label': 'Go to Space',\n      'icon': 'fa fa-external-link'\n    },\n    'refresh': {\n      'label': 'Refresh',\n      'icon': 'fa fa-refresh'\n    },\n    'paste': {\n      'separator_before': true,\n      'label': 'Paste Into Space',\n      'icon': 'fa fa-clipboard'\n    },\n    'rename': {\n      'label': 'Rename...',\n      'icon': 'fa fa-pencil-square-o'\n    },\n    'remove': {\n      'label': 'Delete',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to move ALL the documents from this space to the recycle bin? If there are hidden documents in this space they will also be deleted.'\n      }\n    }\n  })\n#end\n\n#macro (addDocumentContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.document = {\n    'createDocument': {\n      'label': 'New Page',\n      'icon': 'fa fa-file-o',\n      'action': 'openLink',\n      'parameters': {\n        'urlProperty': 'createDocumentURL'\n      }\n    },\n    'openLink': {\n      'separator_before': true,\n      'label': 'Go to Page',\n      'icon': 'fa fa-external-link'\n    },\n    'refresh': {\n      'label': 'Refresh',\n      'icon': 'fa fa-refresh'\n    },\n    'cut': {\n      'separator_before': true,\n      'label': 'Cut',\n      'icon': 'fa fa-scissors'\n    },\n    'copy': {\n      'label': 'Copy',\n      'icon': 'fa fa-files-o'\n    },\n    'paste': {\n      'label': 'Paste',\n      'icon': 'fa fa-clipboard'\n    },\n    'remove': {\n      'separator_before': true,\n      'label': 'Delete',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to move this document to the recycle bin? All child documents will become orphan as a result.'\n      }\n    }\n  })\n#end\n\n#macro (addAttachmentsContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.attachments = {\n    'openLink': {\n      'label': 'Go to Attachments',\n      'icon': 'fa fa-external-link'\n    },\n    'refresh': {\n      'label': 'Refresh',\n      'icon': 'fa fa-refresh'\n    },\n    'paste': {\n      'separator_before': true,\n      'label': 'Paste',\n      'icon': 'fa fa-clipboard'\n    },\n    'remove': {\n      'label': 'Delete All',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to delete all the attachments of this page?'\n      }\n    }\n  })\n#end\n\n#macro (addAttachmentContextMenu $contextMenuByNodeType)\n  #set ($contextMenuByNodeType.attachment = {\n    'openLink': {\n      'label': 'Go to Attachment',\n      'icon': 'fa fa-external-link'\n    },\n    'cut': {\n      'separator_before': true,\n      'label': 'Cut',\n      'icon': 'fa fa-scissors'\n    },\n    'copy': {\n      'label': 'Copy',\n      'icon': 'fa fa-files-o'\n    },\n    'rename': {\n      'separator_before': true,\n      'label': 'Rename...',\n      'icon': 'fa fa-pencil-square-o'\n    },\n    'remove': {\n      'label': 'Delete',\n      'icon': 'fa fa-trash-o',\n      'parameters': {\n        'confirmationMessage': 'Are you sure you want to delete this attachment?'\n      }\n    }\n  })\n#end\n\n##------------------------------------------------------------\n## Finder Suggestions\n##------------------------------------------------------------\n\n#macro (getSuggestions $return)\n  #set ($limit = 6)\n  #set ($text = \"$!request.query\")\n  #set ($lists = [])\n  #getRootReference\n  #set ($ancestorsOf = {\n    'space': ['farm', 'wiki', 'space'],\n    'document': ['farm', 'wiki', 'space', 'document'],\n    'attachment': ['farm', 'wiki', 'space', 'document', 'attachments']\n  })\n  #if ((!$docTreeConfig.showSpaces || $docTreeConfig.showTerminalDocuments)\n      &amp;&amp; $ancestorsOf.document.contains($rootType))\n    #addDocumentSuggestions($text $limit $lists)\n  #end\n  #if ($docTreeConfig.showAttachments &amp;&amp; $ancestorsOf.attachment.contains($rootType))\n    #addAttachmentSuggestions($text $limit $lists)\n  #end\n  #if ($docTreeConfig.showSpaces &amp;&amp; $ancestorsOf.space.contains($rootType))\n    #addSpaceSuggestions($text $limit $lists)\n  #end\n  #limitTotalCount($lists $limit)\n  #set ($output = [])\n  #foreach ($list in $lists)\n    #foreach ($node in $list)\n      ## Use the node path as suggestion info.\n      #getPath($node.id $path)\n      ## The path is empty when the node is not found in the tree. This happens if the tree finder doesn't restrict the\n      ## search to the nodes that are available in the tree.\n      #if ($path.size() &gt; 0)\n        #displayPath($path)\n        #set ($node.data.info = $stringtool.join($path.subList(0, $mathtool.sub($path.size(), 1)), ' / '))\n        #set ($discard = $output.add($node))\n      #end\n    #end\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $output)\n#end\n\n#macro (getRootReference)\n  #set ($parts = $docTreeConfig.root.split(':', 2))\n  #if ($parts.size() == 2)\n    #set ($rootType = $parts[0])\n    #set ($rootReference = $parts[1])\n    #if ($rootType == 'wiki')\n      #set ($rootReference = $services.model.createWikiReference($parts[1]))\n    #elseif ($rootType == 'space')\n      #set ($rootReference = $services.model.resolveSpace($parts[1]))\n    #elseif ($rootType == 'document' || $rootType == 'attachments')\n      #set ($rootReference = $services.model.resolveDocument($parts[1]))\n    #end\n  #else\n    #set ($rootType = 'unknown')\n    #set ($rootReference = $parts[0])\n  #end\n#end\n\n#macro (addSpaceSuggestions $text $limit $suggestions)\n  #searchSpaces($text $limit $spaceReferences)\n  #set ($spaceSuggestions = [])\n  #foreach ($spaceReference in $spaceReferences)\n    #maybeAddSpaceNode($spaceReference $spaceSuggestions)\n  #end\n  #set ($discard = $suggestions.add($spaceSuggestions))\n#end\n\n#macro (searchSpaces $text $limit $return)\n  #set ($constraints = [\"upper(space.name) like upper(:spaceNamePattern) escape '!'\"])\n  #set ($params = {'spaceNamePattern': \"%$!text.replaceAll('([%_!])', '!$1')%\"})\n  #addSpaceLocationDatabaseConstraint($rootReference $constraints $params 'space.reference')\n  #set ($statement = \"select space.reference from XWikiSpace space where $stringtool.join($constraints, ' and ') \"\n    + \"order by lower(space.reference), space.reference\")\n  #set ($query = $services.query.hql($statement).setLimit($limit))\n  #addWikiLocationDatabaseConstraint($rootReference $query)\n  #if ($docTreeConfig.filterHiddenDocuments)\n    #set ($query = $query.addFilter('hidden/space'))\n  #end\n  #foreach ($entry in $params.entrySet())\n    #set ($query = $query.bindValue($entry.key, $entry.value))\n  #end\n  #set ($spaceReferences = [])\n  #foreach ($localSpaceRef in $query.execute())\n    #set ($discard = $spaceReferences.add($services.model.resolveSpace($localSpaceRef)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $spaceReferences)\n#end\n\n#macro (addDocumentSuggestions $text $limit $suggestions)\n  #searchDocuments($text $limit $documentReferences)\n  #set ($docSuggestions = [])\n  #foreach ($documentReference in $documentReferences)\n    #maybeAddDocumentNode($documentReference $docSuggestions)\n  #end\n  #set ($discard = $suggestions.add($docSuggestions))\n#end\n\n#macro (searchDocuments $text $limit $return)\n  #if ($xwiki.exists('XWiki.SuggestSolrMacros'))\n    #searchDocumentsSolr($text $limit $return)\n  #else\n    #searchDocumentsDatabase($text $limit $return)\n  #end\n#end\n\n#macro (searchDocumentsSolr $text $limit $return)\n  #set ($params = [\n    'fq=type:DOCUMENT',\n    'fq=doclocale:\"\"',\n    'qf=title^6 name^4 doccontent^2 doccontentraw',\n    'fl=wiki spaces name'\n  ])\n  #addCommonDocTreeSolrParams($params)\n  #set ($params = $stringtool.join($params, $util.newline))\n  #createSearchSuggestQuery($params $text $query)\n  #set ($discard = $query.setLimit($limit))\n  #set ($documentReferences = [])\n  #foreach ($result in $query.execute()[0].results)\n    #set ($discard = $documentReferences.add($services.solr.resolveDocument($result)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $documentReferences)\n#end\n\n#macro (searchDocumentsDatabase $text $limit $return)\n  #set ($constraints = [\n    'doc.translation = 0',\n    'doc.space = space.reference'\n  ])\n  #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n  #set ($matchDocTitle = \"upper(doc.title) like upper(:text) escape '!'\")\n  #set ($params = {'text': \"%$!text.replaceAll('([%_!])', '!$1')%\"})\n  #if ($docTreeConfig.showTerminalDocuments)\n    #set ($matchDocName = \"(doc.name &lt;&gt; '$defaultDocumentName' and upper(doc.name) like upper(:text) escape '!')\")\n    #set ($matchSpaceName = \"(doc.name = '$defaultDocumentName' and upper(space.name) like upper(:text) escape '!')\")\n    #set ($discard = $constraints.add(\"($matchDocTitle or $matchDocName or $matchSpaceName)\"))\n  #else\n    #set ($matchSpaceName = \"upper(space.name) like upper(:text) escape '!'\")\n    #set ($discard = $constraints.addAll([\n      \"doc.name = '$defaultDocumentName'\",\n      \"($matchDocTitle or $matchSpaceName)\"\n    ]))\n  #end\n  #addDocumentLocationDatabaseConstraint($rootReference $constraints $params)\n  #set ($constraints = $stringtool.join($constraints, ' and '))\n  #set ($statement = \"select doc.fullName from XWikiDocument doc, XWikiSpace space where $constraints\")\n  #set ($query = $services.query.hql($statement).setLimit($limit))\n  #foreach ($entry in $params.entrySet())\n    #set ($query = $query.bindValue($entry.key, $entry.value))\n  #end\n  #addWikiLocationDatabaseConstraint($rootReference $query)\n  #if ($docTreeConfig.filterHiddenDocuments)\n    #set ($query = $query.addFilter('hidden/document'))\n  #end\n  #set ($documentReferences = [])\n  #foreach ($docFullName in $query.execute())\n    #set ($discard = $documentReferences.add($services.model.resolveDocument($docFullName)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $documentReferences)\n#end\n\n#macro (addAttachmentSuggestions $text $limit $suggestions)\n  #searchAttachments($text $limit $attachmentReferences)\n  #set ($attachmentSuggestions = [])\n  #foreach ($attachmentReference in $attachmentReferences)\n    #set ($attachment = $xwiki.getDocument($attachmentReference.parent).getAttachment($attachmentReference.name))\n    #addAttachmentNode($attachment $attachmentSuggestions)\n  #end\n  #set ($discard = $suggestions.add($attachmentSuggestions))\n#end\n\n#macro (searchAttachments $text $limit $return)\n  #if ($xwiki.exists('XWiki.SuggestSolrMacros'))\n    #searchAttachmentsSolr($text $limit $return)\n  #else\n    #searchAttachmentsDatabase($text $limit $return)\n  #end\n#end\n\n#macro (searchAttachmentsSolr $text $limit $return)\n  #set ($params = [\n    'fq=type:ATTACHMENT',\n    'qf=filename^4 attcontent',\n    'fl=type wiki spaces name filename'\n  ])\n  #addCommonDocTreeSolrParams($params)\n  #set ($params = $stringtool.join($params, $util.newline))\n  #createSearchSuggestQuery($params $text $query)\n  #set ($discard = $query.setLimit($limit))\n  #set ($attachmentReferences = [])\n  #foreach ($result in $query.execute()[0].results)\n    #set ($discard = $attachmentReferences.add($services.solr.resolve($result)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $attachmentReferences)\n#end\n\n#macro (searchAttachmentsDatabase $text $limit $return)\n  #set ($constraints = [\"upper(attach.filename) like upper(:text) escape'!'\"])\n  #set ($params = {'text': \"%$!text.replaceAll('([%_!])', '!$1')%\"})\n  #if ($docTreeConfig.filterHiddenDocuments &amp;&amp; \"$!xwiki.getUserPreference('displayHiddenDocuments')\" != '1')\n    #set ($discard = $constraints.add(\"(doc.hidden &lt;&gt; true or doc.hidden is null)\"))\n  #end\n  #set ($exactMatch = $rootType == 'attachments')\n  #addDocumentLocationDatabaseConstraint($rootReference $constraints $params $exactMatch)\n  #set ($statement = \"where $stringtool.join($constraints, ' and ')\")\n  ##\n  ## Convert named parameters to positional parameters.\n  #set ($paramList = [])\n  #foreach ($item in $regextool.findAll($statement, ':(\\w+)'))\n    #set ($paramName = $item.get(1).getGroup())\n    #set ($discard = $paramList.add($params.get($paramName)))\n  #end\n  #set ($statement = $statement.replaceAll(':\\w+', '\\?'))\n  ##\n  ## TODO: Search in the wiki that corresponds to the root node.\n  #set ($attachments = $xwiki.searchAttachments($statement, $limit, 0, $paramList))\n  #set ($attachmentReferences = [])\n  #foreach ($attachment in $attachments)\n    #set ($discard = $attachmentReferences.add($services.model.createAttachmentReference(\n      $attachment.document.documentReference, $attachment.filename)))\n  #end\n  #set ($return = $NULL)\n  #setVariable(\"$return\" $attachmentReferences)\n#end\n\n#macro (addCommonDocTreeSolrParams $params)\n  #if ($rootType == 'wiki')\n    ## Limit the search to the specified wiki.\n    #addWikiLocationSolrParams($rootReference $params)\n  #elseif ($rootType == 'space')\n    ## Limit the search to the specified space.\n    #addSpaceLocationSolrParams($rootReference $params)\n  #elseif ($rootType == 'document')\n    ## Limit the search to the specified document.\n    #addDocumentLocationSolrParams($rootReference $params)\n  #elseif ($rootType == 'attachments')\n    ## Limit the search to the attachments of the specified document.\n    #addDocumentLocationSolrParams($rootReference $params true)\n  #end\n  #if (!$docTreeConfig.showTerminalDocuments)\n    #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n    #set ($discard = $params.add(\"fq=name:$defaultDocumentName\"))\n  #end\n  #if (!$docTreeConfig.filterHiddenDocuments)\n    ## Force the inclusion of the hidden documents.\n    #set ($discard = $params.add(\"fq=hidden:*\"))\n  #end\n#end\n\n#macro (addWikiLocationSolrParams $rootReference $params)\n  #set ($wikiReference = $rootReference.extractReference('WIKI'))\n  #if ($wikiReference)\n    #set ($discard = $params.add(\"fq=wiki:$wikiReference.name\"))\n  #end\n#end\n\n#macro (addWikiLocationDatabaseConstraint $rootReference $query)\n  #set ($wikiReference = $rootReference.extractReference('WIKI'))\n  #if ($wikiReference)\n    #set ($query = $query.setWiki($wikiReference.name))\n  #end\n#end\n\n#macro (addSpaceLocationSolrParams $rootReference $params $exactMatch)\n  #addWikiLocationSolrParams($rootReference $params)\n  #set ($spaceReference = $rootReference.extractReference('SPACE'))\n  #if ($spaceReference &amp;&amp; ($docTreeConfig.showSpaces || $docTreeConfig.hierarchyMode == 'reference'))\n    #set ($localSpaceReference = $services.model.serialize($spaceReference, 'local'))\n    #set ($spaceField = 'space_prefix')\n    #if ($exactMatch)\n      #set ($spaceField = 'space_exact')\n    #end\n    #set ($discard = $params.add(\"fq=$spaceField:\"\"$localSpaceReference\"\"\"))\n  #end\n#end\n\n#macro (addSpaceLocationDatabaseConstraint $rootReference $constraints $params $field)\n  #set ($spaceReference = $rootReference.extractReference('SPACE'))\n  #if ($spaceReference &amp;&amp; ($docTreeConfig.showSpaces || $docTreeConfig.hierarchyMode == 'reference'))\n    #set ($discard = $constraints.add(\"($field = :localSpaceReference or $field like :spaceReferencePattern escape '!')\"))\n    #set ($localSpaceReference = $services.model.serialize($spaceReference, 'local'))\n    #set ($discard = $params.put('localSpaceReference', $localSpaceReference))\n    #set ($spaceReferencePattern = $services.model.createEntityReference('x', 'SPACE', $spaceReference))\n    #set ($spaceReferencePattern = $services.model.serialize($spaceReferencePattern, 'local'))\n    #set ($spaceReferencePattern = $stringtool.removeEnd($spaceReferencePattern, 'x').replaceAll('([%_!])', '!$1'))\n    #set ($discard = $params.put('spaceReferencePattern', \"$spaceReferencePattern%\"))\n  #end\n#end\n\n#macro (addDocumentLocationSolrParams $rootReference $params $exactMatch)\n  #set ($documentReference = $rootReference.extractReference('DOCUMENT'))\n  #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n  #set ($macro.exactMatch = $exactMatch || ($docTreeConfig.hierarchyMode == 'reference'\n    &amp;&amp; $documentReference &amp;&amp; $documentReference.name != $defaultDocumentName))\n  #addSpaceLocationSolrParams($rootReference $params $macro.exactMatch)\n  #if ($documentReference &amp;&amp; $macro.exactMatch)\n    #set ($discard = $params.add(\"fq=name_exact:\"\"$documentReference.name\"\"\"))\n  #end\n#end\n\n#macro (addDocumentLocationDatabaseConstraint $rootReference $constraints $params $exactMatch)\n  #set ($documentReference = $rootReference.extractReference('DOCUMENT'))\n  #set ($defaultDocumentName = $services.model.getEntityReference('DOCUMENT', 'default').name)\n  #set ($macro.exactMatch = $exactMatch || ($docTreeConfig.hierarchyMode == 'reference'\n    &amp;&amp; $documentReference &amp;&amp; $documentReference.name != $defaultDocumentName))\n  #if ($documentReference &amp;&amp; $macro.exactMatch)\n    #set ($localDocumentReference = $services.model.serialize($documentReference, 'local'))\n    #set ($discard = $constraints.add('doc.fullName = :localDocumentReference'))\n    #set ($discard = $params.put('localDocumentReference', $localDocumentReference))\n  #elseif (!$macro.exactMatch)\n    #addSpaceLocationDatabaseConstraint($rootReference $constraints $params 'doc.space')\n  #end\n#end\n\n#macro (displayPath $path)\n  #foreach ($node in $path)\n    #set ($discard = $path.set($foreach.index, $node.text))\n  #end\n#end\n\n#macro (limitTotalCount $lists $limit)\n  ## Prepare the input.\n  #set ($input = [])\n  #foreach ($list in $lists)\n    ## We use queues to be able to easily remove items from the start.\n    #set ($queue = $collectiontool.queue)\n    #set ($discard = $queue.addAll($list))\n    #set ($discard = $input.add($queue))\n    ## We will add (part of) the items back later.\n    #set ($discard = $list.clear())\n  #end\n  ## Limit the total item count.\n  #set ($index = -1)\n  #foreach ($count in [1..$limit])\n    #foreach ($i in [1..$input.size()])\n      #set ($newIndex = ($index + $i) % $input.size())\n      #if ($input.get($newIndex).size() &gt; 0)\n        #set ($index = $newIndex)\n        #break\n      #end\n    #end\n    #if ($index &lt; 0 || $input.get($index).isEmpty())\n      #break\n    #else\n      #set ($discard = $lists.get($index).add($input.get($index).poll()))\n    #end\n  #end\n#end\n{{/velocity}}</content>\n</xwikidoc>\n"], "filenames": ["xwiki-platform-core/xwiki-platform-index/xwiki-platform-index-tree/xwiki-platform-index-tree-macro/src/main/resources/XWiki/DocumentTreeMacros.xml"], "buggy_code_start_loc": [357], "buggy_code_end_loc": [361], "fixing_code_start_loc": [356], "fixing_code_end_loc": [356], "type": "CWE-863", "message": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. It's possible to execute a Velocity script without script right through the document tree. This has been patched in XWiki 14.10.7 and 15.2RC1.", "other": {"cve": {"id": "CVE-2023-50732", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-21T20:15:07.900", "lastModified": "2024-01-04T17:55:32.727", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. It's possible to execute a Velocity script without script right through the document tree. This has been patched in XWiki 14.10.7 and 15.2RC1."}, {"lang": "es", "value": "XWiki Platform es una plataforma wiki gen\u00e9rica que ofrece servicios de ejecuci\u00f3n para aplicaciones creadas sobre ella. Es posible ejecutar un script de Velocity sin script directamente a trav\u00e9s del \u00e1rbol de documentos. Esto ha sido parcheado en XWiki 14.10.7 y 15.2RC1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-863"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.3", "versionEndExcluding": "14.10.7", "matchCriteriaId": "BCBC97DA-9B2B-4A24-A5CB-DD15CBDD301B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "15.0", "versionEndExcluding": "15.2", "matchCriteriaId": "F1AD4421-AE75-43F7-9B8F-F0A739D166C8"}]}]}], "references": [{"url": "https://github.com/xwiki/xwiki-platform/commit/41d7dca2d30084966ca6a7ee537f39ee8354a7e3", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-p5f8-qf24-24cj", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Patch", "Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20625", "source": "security-advisories@github.com", "tags": ["Exploit", "Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/41d7dca2d30084966ca6a7ee537f39ee8354a7e3"}}