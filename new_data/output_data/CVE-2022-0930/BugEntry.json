{"buggy_code": ["<?php\nheader('Content-Type: application/json');\n\n$files_utils = new \\MicroweberPackages\\Utils\\System\\Files();\n$dangerous = $files_utils->get_dangerous_files_extentions();\n\n\nif (!mw()->user_manager->session_id() or (mw()->user_manager->session_all() == false)) {\n    // //session_start();\n}\n\n\n\n$validate_token = false;\nif (!isset($_SERVER['HTTP_REFERER'])) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":97, \"message\": \"You are not allowed to upload\"}}');\n} elseif (!stristr($_SERVER['HTTP_REFERER'], site_url())) {\n    //    if (!is_logged()){\n//        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You cannot upload from remote domains\"}}');\n//    }\n}\n\nif (!is_admin()) {\n    $validate_token = mw()->user_manager->csrf_validate($_GET);\n    if ($validate_token == false) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You are not allowed to upload\"}}');\n    }\n\n    $is_ajax = mw()->url_manager->is_ajax();\n    if (!$is_ajax) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":99, \"message\": \"You are not allowed to upload\"}}');\n    }\n}\n\n$host = (parse_url(site_url()));\n\n//$host_dir = false;\n$host_dir = 'default';\n\n\nif(defined('MW_IS_MULTISITE') and MW_IS_MULTISITE){\n    if (isset($host['host'])) {\n        $host_dir = $host['host'];\n        $host_dir = str_ireplace('www.', '', $host_dir);\n        $host_dir = str_ireplace('.', '-', $host_dir);\n    }\n}\n\n\n$fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n$is_ext = get_file_extension($fileName_ext);\n$is_ext = strtolower($is_ext);\n\n$is_dangerous_file = $files_utils->is_dangerous_file($fileName_ext);\n\nif ($is_dangerous_file) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":100, \"message\": \"You cannot upload scripts or executable files\"}}');\n}\n\n$allowed_to_upload = false;\n\nif (is_admin() != false) {\n    $allowed_to_upload = true;\n} else {\n    $uid = user_id();\n    if ($uid != 0) {\n        $user = mw()->user_manager->get_by_id($uid);\n        if (!empty($user) and isset($user['is_active']) and $user['is_active'] == 1) {\n            $are_allowed = 'img';\n            $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user/' . $user['id'] . DS;\n            if (isset($_REQUEST['autopath']) and $_REQUEST['autopath'] == 'user_hash') {\n                $up_path = md5($user['id'] . $user['created_at']);\n                $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user_hash/' . DS . $up_path . DS;\n            }\n            $allowed_to_upload = true;\n        }\n    } else {\n        $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/anonymous/';\n        $allowed_to_upload = true;\n    }\n\n\n}\n\n\nif ($allowed_to_upload == false) {\n    if (isset($_REQUEST['rel_type']) and isset($_REQUEST['custom_field_id']) and trim($_REQUEST['rel_type']) != '' and trim($_REQUEST['rel_type']) != 'false') {\n        $cfid = mw()->fields_manager->getById(intval($_REQUEST['custom_field_id']));\n        if ($cfid == false) {\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 90, \"message\": \"Custom field is not found\"}}');\n        } else {\n            $rel_error = false;\n            if (!isset($_REQUEST['rel_id'])) {\n                $rel_error = true;\n            }\n            if (!isset($cfid['rel_id'])) {\n                $rel_error = true;\n            }\n\n            if (($_REQUEST['rel_id']) != $cfid['rel_id']) {\n                $rel_error = true;\n            }\n\n\n\n\n\n            if ($rel_error) {\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 91, \"message\": \"You are not allowed to upload\"}}');\n            }\n        }\n\n        if ($cfid != false and isset($cfid['custom_field_type'])) {\n            if ($cfid['custom_field_type'] != 'upload') {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Custom field is not file upload type\"}}');\n            }\n            if ($cfid != false and (!isset($cfid['options']) or !isset($cfid['options']['file_types']))) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"File types is not set.\"}}');\n            }\n            if ($cfid != false and isset($cfid['file_types']) and empty($cfid['file_types'])) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"File types cannot by empty.\"}}');\n            }\n\n            if ($cfid != false and isset($cfid['options']) and isset($cfid['options']['file_types'])) {\n                $alloled_ft = array_values(($cfid['options']['file_types']));\n                if (empty($alloled_ft)) {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 104, \"message\": \"File types cannot by empty.\"}}');\n                } else {\n                    $are_allowed = '';\n                    $fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n                    foreach ($alloled_ft as $allowed_file_type_item) {\n                        if (trim($allowed_file_type_item) != '' and $fileName_ext != '') {\n                            $is_ext = get_file_extension($fileName_ext);\n                            $is_ext = strtolower($is_ext);\n\n                            switch ($is_ext) {\n                                case 'phtml':\n                                case 'php':\n                                case 'php12':\n                                case 'php11':\n                                case 'php10':\n                                case 'php9':\n                                case 'php8':\n                                case 'php7':\n                                case 'php6':\n                                case 'php5':\n                                case 'php4':\n                                case 'php3':\n                                case 'ptml':\n                                case 'html':\n                                case 'xhtml':\n                                case 'phtml':\n                                case 'shtml':\n                                case 'htm':\n                                case 'pl':\n                                case 'cgi':\n                                case 'rb':\n                                case 'py':\n                                case 'asp':\n                                case 'htaccess':\n                                case 'exe':\n                                case 'msi':\n                                case 'sh':\n                                case 'bat':\n                                case 'vbs':\n                                    $are_allowed = false;\n                                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":105, \"message\": \"You cannot upload scripts or executables\"}}');\n\n                                    break;\n\n\n                            }\n\n                            $are_allowed = $files_utils->get_allowed_files_extensions_for_upload($allowed_file_type_item);\n\n                            $pass_type_check = false;\n                            if ($are_allowed != false) {\n                                $are_allowed_a = explode(',', $are_allowed);\n                                if (!empty($are_allowed_a)) {\n                                    foreach ($are_allowed_a as $are_allowed_a_item) {\n                                        $are_allowed_a_item = strtolower(trim($are_allowed_a_item));\n                                        $is_ext = strtolower(trim($is_ext));\n\n                                        if ($are_allowed_a_item == '*') {\n                                            $pass_type_check = 1;\n                                        }\n\n                                        if ($are_allowed_a_item != '' and $are_allowed_a_item == $is_ext) {\n                                            $pass_type_check = 1;\n                                        }\n                                    }\n                                }\n                            }\n                            if ($pass_type_check == false) {\n                                header(\"HTTP/1.1 401 Unauthorized\");\n\n                                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":106, \"message\": \"You can only upload ' . $are_allowed . ' files.\"}}');\n                            } else {\n                                if (!isset($_REQUEST['captcha'])) {\n                                    if (!$validate_token) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":107, \"message\": \"Please enter the captcha answer!\"}}');\n                                    }\n                                } else {\n                                    $cap = mw()->user_manager->session_get('captcha');\n                                    if ($cap == false) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":108, \"message\": \"You must load a captcha first!\"}}');\n                                    }\n                                    $validate_captcha = $this->app->captcha_manager->validate($_REQUEST['captcha']);\n                                    if (!$validate_captcha) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":109, \"message\": \"Invalid captcha answer! \"}}');\n                                    } else {\n                                        if (!isset($_REQUEST['path'])) {\n                                            $_REQUEST['path'] = 'media/' . $host_dir . '/user_uploads' . DS . $_REQUEST['rel_type'] . DS;\n                                        }\n                                    }\n                                }\n\n                                //die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": PECATA - Not finished yet.\"}}');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        header(\"HTTP/1.1 401 Unauthorized\");\n\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 110, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n    }\n}\n\n\nif(!is_admin()){\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 111, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n\n    return response(array(\n        'error' => _e('Please enter captcha answer!', true),\n        'captcha_error' => true,\n        'form_data_required' => 'captcha',\n        'form_data_required_params' => array('captcha_parent_for_id' => $_REQUEST['rel_id']),\n        'form_data_module' => 'captcha'\n    ));\n}\n\n\n// Settings\n//$target_path = media_base_path() . DS;\n//$target_path = media_base_path() . DS . $host_dir . DS . 'uploaded' . DS;\n$target_path = media_uploads_path();\n$target_path = normalize_path($target_path, 0);\n\n$path_restirct = userfiles_path(); // the path the script should access\nif (isset($_REQUEST['path']) and trim($_REQUEST['path']) != '' and trim($_REQUEST['path']) != 'false') {\n    $path = urldecode($_REQUEST['path']);\n\n    $path = html_entity_decode($path);\n    $path = htmlspecialchars_decode($path, ENT_NOQUOTES);\n\n    //$path = urldecode($path);\n    $path = str_replace('%2F', '/', $path);\n    //$path = str_replace('%25252F','/',$path);\n\n    $path = normalize_path($path, 0);\n\n    $path = str_replace('..', '', $path);\n    $path = str_replace($path_restirct, '', $path);\n\n    // $target_path = userfiles_path() . DS . $path;\n    $target_path = media_uploads_path() . DS . $path;\n    $target_path = normalize_path($target_path, 1);\n}\n\n$targetDir = $target_path;\nif (!is_dir($targetDir)) {\n    mkdir_recursive($targetDir);\n}\n//$targetDir = 'uploads';\n\n$cleanupTargetDir = true;\n// Remove old files\n$maxFileAge = 5 * 3600;\n// Temp file age in seconds\n// 5 minutes execution time\n@set_time_limit(5 * 60);\n\n// Uncomment this one to fake upload time\n// usleep(5000);\n// Get parameters\n$chunk = isset($_REQUEST['chunk']) ? intval($_REQUEST['chunk']) : 0;\n$chunks = isset($_REQUEST['chunks']) ? intval($_REQUEST['chunks']) : 0;\n$fileName = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n// Clean the fileName for security reasons\n$fileNameExtension = get_file_extension($fileName);\n$fileName = \\MicroweberPackages\\Helper\\URLify::filter($fileName);\n//$fileName = url_title($fileName);\n//$fileName = preg_replace('/[\\p{P}\\p{Zs}\\w\\._]+/u', \"\", $fileName);\n// $fileName = preg_replace('/[^\\w\\._]+/', '_', $fileName);\n$fileName = preg_replace('/\\s+\\d+%|\\)/', '', $fileName);\n$fileName = preg_replace(\"/[\\/\\&%#\\$]/\", \"_\", $fileName);\n$fileName = preg_replace(\"/[\\\"\\']/\", \" \", $fileName);\n$fileName = str_replace(array('(', ')', \"'\", \"!\", \"`\", \"*\", \"#\"), '_', $fileName);\n$fileName = str_replace(' ', '_', $fileName);\n$fileName = str_replace('..', '.', $fileName);\n$fileName = strtolower($fileName);\n$fileName = mw()->url_manager->clean_url_wrappers($fileName);\n$fileName = substr($fileName, 0, -(strlen($fileNameExtension)));\n$fileName = $fileName . '.' . $fileNameExtension;\n\n\n$fileName_uniq = date('ymdhis') . uniqid() . $fileName;\n// Make sure the fileName is unique but only if chunking is disabled\nif ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {\n    $ext = strrpos($fileName, '.');\n    $fileName_a = substr($fileName, 0, $ext);\n    $fileName_b = substr($fileName, $ext);\n\n    $count = 1;\n    while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {\n        ++$count;\n    }\n\n    $fileName = $fileName_a . '_' . $count . $fileName_b;\n}\n\n$filePath = $targetDir . DIRECTORY_SEPARATOR . $fileName;\n$filePath_uniq = $targetDir . DIRECTORY_SEPARATOR . $fileName_uniq;\n\n// Create target dir\nif (!is_dir($targetDir)) {\n    @mkdir_recursive($targetDir);\n}\n\n$has_index = $targetDir . DIRECTORY_SEPARATOR . 'index.html';\n\nif (!is_file($has_index)) {\n    @touch($has_index);\n}\n\n// Remove old temp files\nif ($cleanupTargetDir && is_dir($targetDir) && ($dir = opendir($targetDir))) {\n    while (($file = readdir($dir)) !== false) {\n        $tmpfilePath = $targetDir . DIRECTORY_SEPARATOR . $file;\n\n        // Remove temp file if it is older than the max age and is not the current file\n        if (preg_match('/\\.part$/', $file) && (filemtime($tmpfilePath) < time() - $maxFileAge) && ($tmpfilePath != \"{$filePath}.part\")) {\n            @unlink($tmpfilePath);\n        }\n    }\n\n    closedir($dir);\n} else {\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 100, \"message\": \"Failed to open temp directory.\"}, \"id\" : \"id\"}');\n}\n\n\nif (isset($_SERVER['CONTENT_LENGTH']) and isset($_FILES['file'])) {\n    $filename_log = mw()->url_manager->slug($fileName);\n    $check = mw()->log_manager->get('one=true&no_cache=true&is_system=y&created_at=[mt]30 min ago&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&user_ip=' . user_ip());\n    $upl_size_log = $_SERVER['CONTENT_LENGTH'];\n    if (is_array($check) and isset($check['id'])) {\n        $upl_size_log = intval($upl_size_log) + intval($check['value']);\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip() . '&id=' . $check['id']);\n    } else {\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip());\n    }\n}\n\n// Look for the content type header\nif (isset($_SERVER['HTTP_CONTENT_TYPE'])) {\n    $contentType = $_SERVER['HTTP_CONTENT_TYPE'];\n}\n\nif (isset($_SERVER['CONTENT_TYPE'])) {\n    $contentType = $_SERVER['CONTENT_TYPE'];\n}\n\n// Handle non multipart uploads older WebKit versions didn't support multipart in HTML5\n$is_image = false;\n\n$engine = 'plupload';\n\n\nif ($engine == 'plupload') {\n\n\n    if (isset($contentType)) {\n        if (strpos($contentType, 'multipart') !== false) {\n            if ($_FILES['file']['error'] === UPLOAD_ERR_OK) {\n                //uploading successfully done\n            } else {\n                throw new UploadException($_FILES['file']['error']);\n            }\n        }\n\n        if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {\n\n            // Open temp file\n            $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n            if ($out) {\n                // Read binary input stream and append it to temp file\n                $in = fopen($_FILES['file']['tmp_name'], 'rb');\n\n                if ($in) {\n                    while ($buff = fread($in, 4096)) {\n                        fwrite($out, $buff);\n                    }\n                } else {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n                }\n                fclose($in);\n                fclose($out);\n\n                @unlink($_FILES['file']['tmp_name']);\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n            }\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"Failed to move uploaded file.\"}, \"id\" : \"id\"}');\n        }\n    } else {\n        // Open temp file\n        $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n        if ($out) {\n            // Read binary input stream and append it to temp file\n            $in = fopen('php://input', 'rb');\n\n            if ($in) {\n                while ($buff = fread($in, 4096)) {\n                    fwrite($out, $buff);\n                }\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n            }\n\n            fclose($in);\n            fclose($out);\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n        }\n    }\n\n} else {\n\n\n}\n\n\n$rerturn = array();\n\n\n// Check if file has been uploaded\nif (!$chunks || $chunk == $chunks - 1) {\n    // Strip the temp .part suffix off\n    $newfile = $filePath;\n    if (is_file($newfile)) {\n        $newfile = $filePath_uniq;\n    }\n\n\n    rename(\"{$filePath}.part\", $newfile);\n    $filePath = $newfile;\n\n    $automatic_image_resize_on_upload = get_option('automatic_image_resize_on_upload', 'website') == 'y';\n    $automatic_image_resize_on_upload_disabled = get_option('automatic_image_resize_on_upload', 'website') == 'd';\n\n    if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {\n        $ext = get_file_extension($filePath);\n\n        if (function_exists('finfo_open') and function_exists('finfo_file')) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension\n            $mime = @finfo_file($finfo, $filePath);\n            if ($mime) {\n                $upl_mime_ext = explode('/', $mime);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = explode('-', $upl_mime_ext);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = strtolower($upl_mime_ext);\n\n                if (in_array($upl_mime_ext, $dangerous)) {\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Cannot upload mime type ' . $upl_mime_ext . '\"}, \"id\" : \"id\"}');\n                }\n            }\n            finfo_close($finfo);\n        }\n\n        if ($ext == 'gif' || $ext == 'jpg' || $ext == 'jpeg' || $ext === 'jpe' || $ext == 'png'|| $ext == 'svg') {\n\n            $valid = false;\n            if ($ext === 'jpg' || $ext === 'jpeg' || $ext === 'jpe') {\n\n                // This will clear exif data - security issue\n                $imgCreatedFromJpeg = @imagecreatefromjpeg($filePath);\n                if ($imgCreatedFromJpeg) {\n                    imagejpeg($imgCreatedFromJpeg, $filePath);  // this will create fresh new image without exif sensitive data\n                    $valid = true;\n                }\n            } else if ($ext === 'png') {\n\n                $imgCreatedFromPng = @imagecreatefrompng($filePath);\n                if ($imgCreatedFromPng) {\n                    imagepng($imgCreatedFromPng, $filePath);  // this will create fresh new image without exif sensitive data\n                    $valid = true;\n                }\n\n            } else if ($ext === 'gif') {\n\n                $imgCreatedFromGif = @imagecreatefromgif($filePath);\n                if ($imgCreatedFromGif) {\n                    imagegif($imgCreatedFromGif, $filePath); // this will create fresh new image without exif sensitive data\n                    $valid = true;\n                }\n\n            } else if ($ext === 'svg') {\n\n                if (is_file($filePath)) {\n                    $sanitizer = new \\enshrined\\svgSanitize\\Sanitizer();\n                    // Load the dirty svg\n                    $dirtySVG = file_get_contents($filePath);\n                     // Pass it to the sanitizer and get it back clean\n                    $cleanSVG = $sanitizer->sanitize($dirtySVG);\n                    file_put_contents($filePath, $cleanSVG);\n\n                }\n               $valid = true;\n\n            } else {\n                $valid = false;\n            }\n\n            if (!$valid) {\n                @unlink($filePath);\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n            }\n        }\n\n    }\n\n\n    if ($is_ext == 'gif' || $is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n        try {\n\n            $size = getimagesize($filePath);\n            $is_image = true;\n            $filesize = filesize($filePath);\n            $rerturn['file_size'] = $filesize;\n            $rerturn['file_size_human'] = mw()->format->human_filesize($filesize);\n            $rerturn['image_size'] = $size;\n            // $auto_resize_treshold = 10000000; // 10MiB\n            $auto_resize_treshold = 2000000; // 2MiB\n\n            if ($is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n                $rerturn['automatic_image_resize_is_enabled'] = $automatic_image_resize_on_upload;\n                if (!$automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    // if image is big, ask to enable resizing\n                    $rerturn['ask_user_to_enable_auto_resizing'] = 1;\n                    $rerturn['ask_user_to_enable_auto_resizing_filesize'] = $filesize;\n\n                }\n                if (!$automatic_image_resize_on_upload_disabled and $automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    $maxDim = 1980;\n                    //@ini_set('memory_limit', '256M');\n\n                    list($width, $height, $type, $attr) = $size;\n                    if ($width > $maxDim || $height > $maxDim) {\n//                        $d1 = dirname($filePath);\n                        $d2 = basename($filePath);\n//                        $target_filename = $d1 . DS . 'auto_resized_' . $d2;\n                        $target_filename = $filePath;\n                        $fn = $filePath;\n                        $ratio = $size[0] / $size[1]; // width/height\n                        if ($ratio > 1) {\n                            $width = $maxDim;\n                            $height = $maxDim / $ratio;\n                        } else {\n                            $width = $maxDim * $ratio;\n                            $height = $maxDim;\n                        }\n                        $src = imagecreatefromstring(file_get_contents($fn));\n                        $dst = imagecreatetruecolor($width, $height);\n\n                        if ($is_ext == 'png') {\n                            // save transparency in alpha channel\n                            imagealphablending($dst, false);\n                            imagesavealpha($dst, true);\n\n                        }\n                        imagecopyresampled($dst, $src, 0, 0, 0, 0, $width, $height, $size[0], $size[1]);\n                        imagedestroy($src);\n\n                        if ($is_ext == 'png') {\n                            imagepng($dst, $target_filename); // adjust format as needed\n\n                        } else if ($is_ext == 'jpg' || $is_ext == 'jpeg') {\n                            imagejpeg($dst, $target_filename); // adjust format as needed\n                        }\n\n                        $rerturn['image_was_auto_resized'] = 1;\n                        $rerturn['image_was_auto_resized_msg'] = \"Image was automatically resized because it was \" . $rerturn['file_size_human'];\n\n                        imagedestroy($dst);\n                    }\n                }\n            }\n\n\n        } catch (Exception $e) {\n            @unlink($filePath);\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n\n        }\n    }\n\n\n    mw()->log_manager->delete('is_system=y&rel=uploader&created_at=[lt]30 min ago');\n    mw()->log_manager->delete('is_system=y&rel=uploader&session_id=' . mw()->user_manager->session_id());\n}\n$f_name = explode(DS, $filePath);\n$f_name = end($f_name);\n\n$filePath = mw()->url_manager->link_to_file($filePath);\n\n$rerturn['src'] = $filePath;\n$rerturn['name'] = $f_name;\n\n\nif (isset($upl_size_log) and $upl_size_log > 0) {\n    $rerturn['bytes_uploaded'] = $upl_size_log;\n}\n//$rerturn['ORIG_REQUEST'] = $_GET;\n\n\n/*\n * upload.php\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n */\n// HTTP headers for no cache etc\nheader('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\nheader('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\nheader('Cache-Control: no-store, no-cache, must-revalidate');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Pragma: no-cache');\n\n\necho json_encode($rerturn);\nif (mw()->user_manager->session_id() and !(mw()->user_manager->session_all() == false)) {\n    // @//session_write_close();\n}\n\nclass UploadException extends Exception\n{\n    public function __construct($code)\n    {\n        $message = $this->codeToMessage($code);\n        parent::__construct($message, $code);\n    }\n\n    private function codeToMessage($code)\n    {\n        switch ($code) {\n            case UPLOAD_ERR_INI_SIZE:\n                $message = 'The uploaded file exceeds the upload_max_filesize directive in php.ini';\n                break;\n            case UPLOAD_ERR_FORM_SIZE:\n                $message = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form';\n                break;\n            case UPLOAD_ERR_PARTIAL:\n                $message = 'The uploaded file was only partially uploaded';\n                break;\n            case UPLOAD_ERR_NO_FILE:\n                $message = 'No file was uploaded';\n                break;\n            case UPLOAD_ERR_NO_TMP_DIR:\n                $message = 'Missing a temporary folder';\n                break;\n            case UPLOAD_ERR_CANT_WRITE:\n                $message = 'Failed to write file to disk';\n                break;\n            case UPLOAD_ERR_EXTENSION:\n                $message = 'File upload stopped by extension';\n                break;\n\n            default:\n                $message = 'Unknown upload error';\n                break;\n        }\n\n        return $message;\n    }\n}\n\nexit;\n\n// Return JSON-RPC response\n//die('{\"jsonrpc\" : \"2.0\", \"result\" : null, \"id\" : \"id\"}');\n", "<?php\n\nnamespace MicroweberPackages\\Utils\\System;\n\nuse RecursiveIteratorIterator;\nuse RecursiveDirectoryIterator;\nuse FilesystemIterator;\n\n$mw_static_option_groups = array();\n\nclass Files\n{\n    /**\n     * Copies directory recursively.\n     *\n     * @param $source\n     * @param $destination\n     */\n    public function copy_directory($source, $destination)\n    {\n        static $copies;\n        if (is_dir($source)) {\n            @mkdir($destination);\n            $directory = dir($source);\n            while (false !== ($readdirectory = $directory->read())) {\n                if ($readdirectory == '.' || $readdirectory == '..') {\n                    continue;\n                }\n\n                $PathDir = $source . DIRECTORY_SEPARATOR . $readdirectory;\n                if (is_dir($PathDir)) {\n                    $this->copy_directory($PathDir, $destination . DIRECTORY_SEPARATOR . $readdirectory);\n                    continue;\n                }\n                $copies[] = $destination . DIRECTORY_SEPARATOR . $readdirectory;\n                copy($PathDir, $destination . DIRECTORY_SEPARATOR . $readdirectory);\n            }\n\n            $directory->close();\n        } else {\n            $copies[] = $destination;\n            copy($source, $destination);\n        }\n\n        return $copies;\n    }\n\n    /**\n     * Returns a human readable filesize.\n     *\n     * @category Files\n     *\n     * @author      wesman20 (php.net)\n     * @author      Jonas John\n     *\n     * @version     0.3\n     *\n     * @link        http://www.jonasjohn.de/snippets/php/readable-filesize.htm\n     */\n    public function file_size_nice($size)\n    {\n        // Adapted from: http://www.php.net/manual/en/function.filesize.php\n\n        $mod = 1024;\n\n        $units = explode(' ', 'B KB MB GB TB PB');\n        for ($i = 0; $size > $mod; ++$i) {\n            $size /= $mod;\n        }\n\n        return round($size, 2) . ' ' . $units[$i];\n    }\n\n\n    public function rmdir($dirPath)\n    {\n        foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dirPath, FilesystemIterator::SKIP_DOTS), RecursiveIteratorIterator::CHILD_FIRST) as $path) {\n            $path->isDir() && !$path->isLink() ? rmdir($path->getPathname()) : unlink($path->getPathname());\n        }\n        @rmdir($dirPath);\n    }\n\n//    public function dir_tree($path = '.', $params = false)\n//    {\n//        $params = parse_params($params);\n//        $dir = $path;\n//\n//        return $this->directory_tree_build($dir, $params);\n//    }\n\n    public function md5_dir($path)\n    {\n        if (!file_exists($path)) {\n            throw new \\Exception('Directory doesn\\'t exist.');\n        }\n\n        $directoryIterator = new \\DirectoryIterator($path);\n        $items = array();\n        foreach ($directoryIterator as $fileInfo) {\n            $filePath = $fileInfo->getPathname();\n            if (!$fileInfo->isDot()) {\n                if ($fileInfo->isFile()) {\n                    $md = md5_file($filePath);\n                    $filePath = normalize_path($filePath, false);\n                    $items [$md] = $filePath;\n                } else if ($fileInfo->isDir()) {\n                    $more = $this->md5_dir($filePath);\n                    foreach ($more as $k => $v) {\n                        $items [$k] = $v;\n                    }\n                }\n            }\n        }\n        return $items;\n    }\n\n\n    /**\n     * get_files.\n     *\n     *  Get an array that represents directory and files\n     *\n     * @category    files module api\n     *\n     * @version 1.0\n     *\n     * @since 0.320\n     *\n     * @return mixed Array with files\n     *\n     * @param array $params = array()     the params\n     * @param string $params ['directory']       The directory\n     * @param string $params ['keyword']       If set it will seach the dir and subdirs\n     */\n    public function get($params)\n    {\n        if (is_admin() == false) {\n            mw_error('Must be admin');\n        }\n\n        $params = parse_params($params);\n        if (!isset($params['directory'])) {\n            mw_error('You must define directory');\n        } else {\n            $directory = $params['directory'];\n        }\n\n\n        $filter_extensions = false;\n\n        if (isset($params['extensions']) and is_string($params['extensions'])) {\n            $filter_extensions = explode(',', $params['extensions']);\n        }\n\n        $hide_files = false;\n\n        if (isset($params['hide_files']) and is_string($params['hide_files'])) {\n            $hide_files = explode(',', $params['hide_files']);\n        } else if (isset($params['hide_files']) and is_array($params['hide_files'])) {\n            $hide_files = $params['hide_files'];\n        }\n        $restrict_path = false;\n\n        if (isset($params['restrict_path']) and is_string($params['restrict_path'])) {\n            $restrict_path = $params['restrict_path'];\n        }\n\n        if ($restrict_path) {\n            if (!strstr($directory, $restrict_path)) {\n                $directory = $restrict_path . $directory;\n            }\n        }\n\n        $from_search = 0;\n        $arrayItems = array();\n        if (isset($params['search']) and strval($params['search']) != '') {\n            $from_search = 1;\n            $arrayItems_search = $this->rglob($pattern = DS . '*' . $params['search'] . '*', $flags = 0, $directory);\n        } else {\n            if (!is_dir($directory . DS)) {\n                return false;\n            }\n\n            $arrayItems_search = array();\n            $myDirectory = opendir($directory . DS);\n\n\n\n            while ($entryName = readdir($myDirectory)) {\n\n                if(!empty($hide_files) && in_array($entryName,$hide_files)){\n                    continue;\n                }\n\n                if ($entryName != '..' and $entryName != '.') {\n                    $arrayItems_search[] = $entryName;\n                }\n            }\n\n            closedir($myDirectory);\n        }\n\n        if (!empty($arrayItems_search)) {\n//\n            //usort($myarray, create_function('$a,$b', 'return filemtime($a) - filemtime($b);'));\n\n            $arrayItems_f = array();\n            $arrayItems_d = array();\n            foreach ($arrayItems_search as $file) {\n                if ($from_search == 0) {\n                    $file = $directory . DS . $file;\n                }\n                if (is_file($file)) {\n\n                    $skip = false;\n                    $df = normalize_path($file, false);\n                    $file_ext = get_file_extension($df);\n\n\n                    if ($filter_extensions and !empty($filter_extensions)) {\n                        $skip = true;\n                        foreach ($filter_extensions as $filter_extension) {\n                            if ($filter_extension == $file_ext) {\n                                $skip = false;\n                            }\n                        }\n//                        if(array_search($file_ext,$filter_extensions)){\n//                           // $skip = false;\n//                        }\n                    }\n\n                    if ($skip == false) {\n                        if (!in_array($df, $arrayItems_f)) {\n                            $arrayItems_f[] = $df;\n                        }\n                    }\n                } else {\n                    $df = normalize_path($file, 1);\n                    if (!in_array($df, $arrayItems_d)) {\n                        $arrayItems_d[] = $df;\n                    }\n                }\n            }\n\n            /*\n            // Sort  by filetime\n            $sortedFiles = array();\n            foreach($arrayItems_f as $dir) {\n            \t$sortedFiles[filemtime($dir)] = $dir;\n            }\n            ksort($sortedFiles);\n            $sortedFiles = array_reverse($sortedFiles);\n            */\n\n\n            if (isset($params['sort_by']) and strval($params['sort_by']) != '') {\n                if (!isset($params['sort_order'])) {\n                    $sort_params = explode(' ', $params['sort_by']);\n                    if (isset($sort_params[1])) {\n                        $params['sort_by'] = $sort_params[0];\n                        $params['sort_order'] = $sort_params[1];\n                    }\n                }\n\n\n                if (isset($params['sort_order']) and strval($params['sort_order']) != '') {\n                    $ord = SORT_DESC;\n                    if (strtolower($params['sort_order']) == 'asc') {\n                        $ord = SORT_ASC;\n                    }\n                    $allowed_sort = array('basename', 'filemtime', 'filesize');\n                    if (in_array($params['sort_by'], $allowed_sort)) {\n                        array_multisort(array_map($params['sort_by'], $arrayItems_f), SORT_NUMERIC, $ord, $arrayItems_f);\n                    }\n                }\n            }\n\n            $arrayItems['files'] = $arrayItems_f;\n            $arrayItems['dirs'] = $arrayItems_d;\n        }\n\n\n        return $arrayItems;\n    }\n\n    /**\n     * Recursive glob().\n     *\n     * @category Files\n     *\n     * @uses is_array()\n     *\n     * @param int|string $pattern\n     *                            the pattern passed to glob()\n     * @param int $flags\n     *                            the flags passed to glob()\n     * @param string $path\n     *                            the path to scan\n     *\n     * @return mixed\n     *               an array of files in the given path matching the pattern.\n     */\n    public function rglob($pattern = '*', $flags = 0, $path = '')\n    {\n        if (!$path && ($dir = dirname($pattern)) != '.') {\n            if ($dir == '\\\\' || $dir == '/') {\n                $dir = '';\n            }\n\n            return $this->rglob(basename($pattern), $flags, $dir . DS);\n        }\n\n        if (stristr($path, '_notes') or stristr($path, '.git') or stristr($path, '.svn')) {\n            return false;\n        }\n\n        $paths = glob($path . '*', GLOB_ONLYDIR | GLOB_NOSORT);\n        $files = glob($path . $pattern, $flags);\n\n        if (is_array($paths)) {\n            foreach ($paths as $p) {\n                $temp = array();\n                if (is_dir($p) and is_readable($p)) {\n                    $temp = $this->rglob($pattern, false, $p . DS);\n                }\n\n                if (is_array($temp) and is_array($files)) {\n                    $files = array_merge($files, $temp);\n                } elseif (is_array($temp)) {\n                    $files = $temp;\n                }\n            }\n        }\n\n        return $files;\n    }\n\n    public function dir_tree_build($dir, $params = false)\n    {\n        $params = parse_params($params);\n        $class = 'directory_tree';\n        if (isset($params['class'])) {\n            $class = $params['class'];\n        }\n\n        $title_class = 'is_folder';\n        if (isset($params['title_class'])) {\n            $title_class = $params['title_class'];\n        }\n\n        $basedir = '';\n        if (isset($params['dir_name'])) {\n            $basedir = $params['dir_name'];\n        }\n\n        $max_depth = 100;\n        if (isset($params['max_depth'])) {\n            $max_depth = $params['max_depth'];\n        }\n\n        $url_param = 'file';\n        if (isset($params['url_param'])) {\n            $url_param = $params['url_param'];\n        }\n\n        if (isset($params['url'])) {\n            $url = $params['url'];\n        } else {\n            $url = mw()->url->current(true, true);\n        }\n\n        static $level = 0;\n\n        if ($max_depth > $level) {\n            ++$level;\n            $ffs = scandir($dir);\n            echo '<ul class=\"' . $class . ' depth_' . $level . '\">';\n            foreach ($ffs as $ff) {\n                $is_hidden = substr($ff, 0, 1);\n                if ($is_hidden == '_') {\n                } else {\n                    $file1 = $ff;\n\n                    if (strlen($file1) > 3) {\n                        $pos = strpos($file1, '_', 1);\n\n                        if ($pos != false) {\n                            $substr = substr($file1, 0, $pos);\n                            if (intval($substr) > 0) {\n                                $file1 = substr($file1, $pos, strlen($file1));\n                                $file1 = ltrim($file1, '_');\n                            }\n                        }\n                    }\n\n                    $file1 = str_replace('_', ' ', $file1);\n\n                    if ($ff != '.' && $ff != '..') {\n                        echo '<li class=\"' . $class . ' depth_' . $level . '\">';\n                        if (is_dir($dir . '/' . $ff)) {\n                            $is_index = $dir . DS . $ff . DS . 'index.php';\n                            $link_href = '';\n\n                            if (is_file($is_index)) {\n                                $link = $dir . '/' . $ff . '/index.php';\n                                if (trim($basedir) != '') {\n                                    $link = normalize_path($link, false);\n                                    $basedir = normalize_path($basedir, false);\n                                    $link = str_replace($basedir . DS, '', $link);\n                                    $link = str_replace('\\\\', '/', $link);\n                                    $link = urlencode($link);\n                                }\n                                $active_class = '';\n\n                                if (isset($_REQUEST[$url_param]) and urldecode($_REQUEST[$url_param]) == $link) {\n                                    $active_class = ' active ';\n                                }\n\n                                $file1 = \"<a class='{$active_class}' href='{$url}?{$url_param}={$link}'>{$file1}</a>\";\n                            }\n\n                            $h_start = ($level == 1) ? '<h2 class=\"' . $title_class . '\">' : '<h3 class=\"' . $title_class . '\">';\n                            $h_close = ($level == 1) ? '</h2>' : '</h3>';\n                            echo $h_start . $file1 . $h_close;\n                            $this->dir_tree_build($dir . '/' . $ff, $params);\n                        } else {\n                            $file1 = no_ext($file1);\n\n                            $link = $dir . '/' . $ff;\n\n                            if (trim($basedir) != '') {\n                                $link = normalize_path($link, false);\n                                $basedir = normalize_path($basedir, false);\n                                $link = str_replace($basedir . DS, '', $link);\n                            }\n\n                            $link = str_replace('\\\\', '/', $link);\n                            $class_path = str_replace('/', '--', $link);\n                            $class_path = str_replace(' ', '_', $class_path);\n                            $class_path = str_replace('.', '_', $class_path);\n                            $active_class = '';\n                            if (isset($_REQUEST[$url_param]) and urldecode($_REQUEST[$url_param]) == $link) {\n                                $active_class = ' active ';\n                            }\n\n                            $link_href = $file1;\n                            if ($link != false) {\n                                $link = urlencode($link);\n                                $link_href = \"<a class='{$active_class} page_{$class_path} ' href='{$url}?{$url_param}={$link}'>{$file1}</a>\";\n                            }\n\n                            echo $link_href;\n                        }\n                        echo '</li>';\n                    }\n                }\n            }\n            echo '</ul>';\n        }\n        --$level;\n    }\n\n    public function download_to_browser($filename)\n    {\n        if (file_exists($filename)) {\n            $name = basename($filename);\n            $ext = get_file_extension($filename);\n\n            header('Cache-Control: public');\n            if ($ext == 'zip') {\n                header('Content-Type: application/zip');\n                header('Content-Transfer-Encoding: Binary');\n            } elseif ($ext == 'sql') {\n                header('Content-type: text/plain; charset=utf-8');\n            }\n            header('Content-Description: File Transfer');\n            header('Content-Disposition: attachment; filename=' . $name);\n            header('Content-Length: ' . filesize($filename));\n            readfile($filename);\n            exit;\n//            if (function_exists('mime_content_type')) {\n//                $this->_readfile_laravel_chunked($filename);\n//            } else {\n//\n//            }\n            //$this->_readfile_chunked($filename);\n        }\n    }\n\n    private function _readfile_chunked($filename, $retbytes = true)\n    {\n        $filename = str_replace('..', '', $filename);\n        $chunk_size = 1024 * 1024;\n        $buffer = '';\n        $cnt = 0;\n        $handle = fopen($filename, 'rb');\n        if ($handle === false) {\n            return false;\n        }\n        while (!feof($handle)) {\n            $buffer = fread($handle, $chunk_size);\n            echo $buffer;\n            ob_flush();\n            flush();\n            if ($retbytes) {\n                $cnt += strlen($buffer);\n            }\n        }\n        $status = fclose($handle);\n        if ($retbytes && $status) {\n            return $cnt; // return num. bytes delivered like readfile() does.\n        }\n\n        return $status;\n    }\n\n    private function _readfile_laravel_chunked($path, $name = null, array $headers = array())\n    {\n        if (is_null($name)) {\n            $name = basename($path);\n        }\n\n        // Prepare the headers\n        $headers = array_merge(array(\n            'Content-Description' => 'File Transfer',\n            'Content-Type' => \\File::mime(\\File::extension($path)),\n            'Content-Transfer-Encoding' => 'binary',\n            'Expires' => 0,\n            'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',\n            'Pragma' => 'public',\n            'Content-Length' => \\File::size($path),\n        ), $headers);\n\n        $response = new \\Response('', 200, $headers);\n        $response->header('Content-Disposition', $response->disposition($name));\n\n        // If there's a session we should save it now\n        if (\\Config::get('session.driver') !== '') {\n            \\Session::save();\n        }\n\n        // Send the headers and the file\n        ob_end_clean();\n        $response->send_headers();\n\n        if ($fp = fread($path, 'rb')) {\n            while (!feof($fp) and (connection_status() == 0)) {\n                echo fread($fp, 8192);\n                flush();\n            }\n        }\n\n        // Finish off, like Laravel would\n        \\Event::fire('laravel.done', array($response));\n        $response->foundation->finish();\n\n        exit;\n    }\n\n\n    function get_dangerous_files_extentions()\n    {\n\n\n        $dangerous = array(\n            'phtml',\n            'php',\n            'php5',\n            'php6',\n            'php7',\n            'php72',\n            'php73',\n            'php74',\n            'php8',\n            'php81',\n            'php82',\n            'php56',\n            'php4',\n            'php3',\n            'phps',\n            'phpt',\n            'ptml',\n            'hphp',\n            'html',\n            'xhtml',\n            'phtml',\n            'shtml',\n            'htm',\n            'pl',\n            'js',\n            'cgi',\n            'rb',\n            'py',\n            'alfa',\n            'asp',\n            'aspx',\n            'htaccess',\n            'exe',\n            'msi',\n            'sh',\n            'bat',\n            'vbs',\n            'vb',\n            'lnk',\n            'jsp',\n            'jspx',\n\n            // from http://www.file-extensions.org/filetype/extension/name/program-executable-files\n            'action ',  //  Automator Action  Mac OS\n            'apk',      //     Application  Android\n            'app',      //     Executable  Mac OS\n            'bat',      //     Batch File  Windows\n            'bin',      //     Binary Executable  Windows, Mac OS, Linux\n            'cmd',      //     Command Script  Windows\n            'com',      //     Command File  Windows\n            'command',  //   Terminal Command  Mac OS\n            'cpl',      //     Control Panel Extension  Windows\n            'csh',      //     C Shell Script  Mac OS, Linux\n            'exe',      //     Executable  Windows\n            'gadget',   //  Windows Gadget  Windows\n            'inf1',     //      Setup Information File  Windows\n            'ins',      //     Internet Communication Settings  Windows\n            'inx',      //     InstallShield Compiled Script  Windows\n            'ipa',      //     Application  iOS\n            'isu',      //     InstallShield Uninstaller Script  Windows\n            'job',      //     Windows Task Scheduler Job File  Windows\n            'jse',      //     JScript Encoded File  Windows\n            'ksh',      //     Unix Korn Shell Script  Linux\n            'lnk',      //     File Shortcut  Windows\n            'msc',      //     Microsoft Common Console Document  Windows\n            'msi',      //     Windows Installer Package  Windows\n            'msp',      //     Windows Installer Patch  Windows\n            'mst',      //     Windows Installer Setup Transform File  Windows\n            'osx',      //     Executable  Mac OS\n            'out',      //     Executable  Linux\n            'paf',      //     Portable Application Installer File  Windows\n            'pif',      //     Program Information File  Windows\n            'prg',      //     Executable  GEM\n            'ps1',      //     Windows PowerShell Cmdlet  Windows\n            'reg',      //     Registry Data File  Windows\n            'rgs',      //     Registry Script  Windows\n            'run',      //     Executable  Linux\n            'sct',      //     Windows Scriptlet  Windows\n            'shb',      //     Windows Document Shortcut  Windows\n            'shs',      //     Shell Scrap Object  Windows\n            'u3p',      //     U3 Smart Application  Windows\n            'vb',       //    VBScript File  Windows\n            'vbe',      //     VBScript Encoded Script  Windows\n            'vbs',      //     VBScript File  Windows\n            'vbscript', //    Visual Basic Script  Windows\n            'workflow', //    Automator Workflow  Mac OS\n            'ws',       //    Windows Script  Windows\n            'wsf',      //  Windows Script  Windows\n\n            // from http://fileinfo.com/filetypes/executable\n            '0xe',        //    F-Secure Renamed Virus File',\n            '73k',        //    TI-73 Application',\n            '89k',        //    TI-89 Application',\n            '8ck',        //    TI-83 and TI-84 Plus Application\n            'a6p',        //    Authorware 6 Program',\n            'a7r',        //    Authorware 7 Runtime File',\n            'ac',        //    Autoconf Script',\n            'acc',        //    GEM Accessory File',\n            'acr',        //    ACRobot Script',\n            'action',        //    Automator Action',\n            'actm',        //    AutoCAD Action Macro File',\n            'ahk',        //    AutoHotkey Script',\n            'air',        //    Adobe AIR Installation Package',\n            'apk',        //    Android Package File',\n            'app',        //    Mac OS X Application',\n            'app',        //    FoxPro Generated Application',\n            'app',        //    Symbian OS Application',\n            'applescripT',        //    AppleScript File',\n            'arscript',        //    ArtRage Script',\n            'asb',        //    Alphacam Stone VB Macro File',\n            'azw2',        //    Kindle Active Content App File',\n            'ba_',        //    Renamed BAT File',\n            'bat',        //    DOS Batch File',\n            'beam',        //    Compiled Erlang File',\n            'bin',        //    Generic Binary Executable File',\n            'bin',        //    Unix Executable File',\n            'btm',        //    4DOS Batch File',\n            'caction',        //    Automator Converter Action',\n            'cel',        //    Celestia Script File',\n            'celx',        //    Celestia Script',\n            'cgi',        //    Common Gateway Interface Script',\n            'cmd',        //    Windows Command File',\n            'cof',        //    MPLAB COFF File',\n            'com',        //    DOS Command File',\n            'command',        //    Terminal Command File',\n            'csh',        //    C Shell Script',\n            'cyw',        //    Rbot.CYW Worm File',\n            'dek',        //    Eavesdropper Batch File',\n            'dld',        //    EdLog Compiled Program',\n            'dmc',        //    Medical Manager Script',\n            'dosexec',\n            'ds',        //    TWAIN Data Source',\n            'dxl',        //    Rational DOORS Script',\n            'e_e',        //    Renamed EXE File',\n            'ear',        //    Java Enterprise Archive File',\n            'ebm',        //    EXTRA! Basic Macro',\n            'ebs',        //    E-Run 1.x Script',\n            'ebs2',        //    E-Run 2.0 Script File',\n            'ecf',        //    SageCRM Component File',\n            'eham',        //    ExtraHAM Executable File',\n            'elf',        //    Nintendo Wii Game File',\n            'es',        //    SageCRM Script File',\n            'esh',        //    Extended Shell Batch File',\n            'ex4',        //    MetaTrader Program File',\n            'ex_',        //    Compressed Executable File',\n            'ex_',        //    Renamed Windows Executable File',\n            'exe',        //    Windows Executable File',\n            'exe',        //    PortableApps.com Application',\n            'exe1',        //    Renamed EXE File',\n            'exopc',        //    ExoPC Application',\n            'ezs',        //    EZ-R Stats Batch Script',\n            'ezt',        //    EZT Malicious Worm File',\n            'fas',        //    Compiled Fast-Load AutoLISP File'\n            'fas',        //    QuickSilver Fast Save Lisp File',\n            'fky',        //    FoxPro Macro',\n            'fpi',        //    FPS Creator Intelligence Script',\n            'frs',        //    Flash Renamer Script',\n            'fxp',        //    FoxPro Compiled Program',\n            'gadget',        //    Windows Gadget',\n            'gpe',        //    GP2X Video Game',\n            'gpu',        //    GP2X Utility Program',\n            'gs',        //    Geosoft Script',\n            'ham',        //    HAM Executable File',\n            'hms',        //    HostMonitor Script File',\n            'hpf',        //    HP9100A Program File',\n            'hta',        //    HTML Application',\n            'icd',        //    SafeDisc Encrypted Program',\n            'iim',        //    iMacro Macro File',\n            'ipa',        //    iOS Application',\n            'ipf',        //    SMS Installer Script',\n            'isu',        //    InstallShield Uninstaller Script'\n            'ita',        //    VTech InnoTab Application File',\n            'jar',        //    Java Archive File',\n            'js',        //    JScript Executable Script',\n            'jse',        //    JScript Encoded File',\n            'jsx',        //    ExtendScript Script File',\n            'kix',        //    KiXtart Script File',\n            'ksh',        //    Unix Korn Shell Script',\n            'lo',        //    Interleaf Compiled Lisp File',\n            'ls',        //    LightWave LScript File',\n            'm3g',        //    Mobile 3D Graphics Program',\n            'mam',        //    Microsoft Access Macro',\n            'mcr',        //    3ds Max Macroscript File',\n            'mcr',        //    Tecplot Macro',\n            'mel',        //    Maya Embedded Language File',\n            'mem',        //    Macro Editor Macro',\n            'mio',        //    MioEngine Application File',\n            'mm',        //    NeXtMidas Macro File',\n            'mpx',        //    FoxPro Compiled Menu Program',\n            'mrc',        //    mIRC Script File',\n            'mrp',        //    Mobile Application File',\n            'ms',        //    3ds Max Script File',\n            'ms',        //    Maxwell Script',\n            'msl',        //    Magick Scripting Language File',\n            'mxe',        //    Macro Express Playable Macro',\n            'n',        //    Neko Bytecode File',\n            'nexe',        //    Chrome Native Client Executable',\n            'ore',        //    Ore Executable File',\n            'osx',        //    PowerPC Executable File',\n            'otm',        //    Outlook Macro File',\n            'out',        //    Compiled Executable File',\n            'paf',        //    Portable Application Installer Fi\n            'paf.exe',        //    PortableApps.com Program File\n            'pex',        //    ProBoard Executable File',\n            'phar',        //    PHP Archive',\n            'pif',        //    Program Information File',\n            'plsc',        //    Messenger Plus! Live Script File'\n            'plx',        //    Perl Executable File',\n            'prc',        //    Palm Resource Code File',\n            'prg',        //    Program File',\n            'prg',        //    GEM Application',\n            'ps1',        //    Windows PowerShell Cmdlet File',\n            'pvd',        //    Instalit Script',\n            'pwc',        //    PictureTaker File',\n            'pyc',        //    Python Compiled File',\n            'pyo',        //    Python Optimized Code',\n            'qit',        //    QIT Trojan Horse File',\n            'qpx',        //    FoxPro Compiled Query Program',\n            'rbx',        //    Rembo-C Compiled Script',\n            'rfu',        //    Remote Firmware Update',\n            'rgs',        //    Registry Script',\n            'rox',        //    Actuate Report Object Executable\n            'rpj',        //    Real Pac Batch Job File',\n            'run',        //    Linux Executable File',\n            'rxe',        //    Lego Mindstorms NXT Executable Pr\n            's2a',        //    SEAL2 Application',\n            'sbs',        //    SPSS Script',\n            'sca',        //    Scala Script File',\n            'scar',        //    SCAR Script',\n            'scb',        //    Scala Published Script',\n            'scpt',        //    AppleScript Script File',\n            'scptd',        //    AppleScript Script Bundle',\n            'scr',        //    Script File',\n            'script',        //    Generic Script File',\n            'sct',        //    Windows Scriptlet',\n            'seed',        //    Linux Preseed File',\n            'shb',        //    Windows Document Shortcut',\n            'smm',        //    Ami Pro Macro',\n            'spr',        //    FoxPro Generated Screen File',\n            'tcp',        //    Tally Compiled Program File',\n            'thm',        //    Thermwood Macro File',\n            'tms',        //    Telemate Script',\n            'u3p',        //    U3 Smart Application',\n            'udf',        //    Excel User Defined Function',\n            'upx',        //    Ultimate Packer for eXecutables F\n            'vb',        //    VBScript File',    \t//\n            'vbe',        //    VBScript Encoded Script File',\n            'vbs',        //    VBScript File',\n            'vbscript',        //    Visual Basic Script',\n            'vdo',        //    Heathen Virus File',\n            'vexe',        //    Virus Executable File',\n            'vlx',        //    Compiled AutoLISP File',\n            'vpm',        //    Vox Proxy Macro File',\n            'vxp',        //    Mobile Application File',\n            'wcm',        //    WordPerfect Macro',\n            'widget',        //    Microsoft Windows Mobile Widget',\n            'widget',        //    Yahoo! Widget',\n            'wiz',        //    Microsoft Wizard File',\n            'workflow',        //    Automator Workflow',\n            'wpk',        //    WordPerfect Macro',\n            'wpm',        //    WordPerfect Macro File',\n            'ws',        //    Windows Script',\n            'wsf',        //    Windows Script File',\n            'wsh',        //    Windows Script Host Settings',\n            'x86',        //    Linux Executable File',\n            'xap',        //    Silverlight Application Package',\n            'xbap',        //    XAML Browser Application File',\n            'xlm',        //    Excel Macro',\n            'xqt',        //    SuperCalc Macro File',\n            'xys',        //    XYplorer Script File',\n            'zl9',        //    ZoneAlarm Quarantined EXE File\n            'swf',        //    Flash File\n\n            'key',\n            'asax',\n            'btapp',\n            'xd',\n            'fwtemplate',\n            'crdownload',\n            'whtt',\n            'ssp',\n            'fmp',\n            'jspa',\n            'obml16',\n            'a5w',\n            'crt',\n            'vrt',\n            'website',\n            'p7c',\n            'dll',\n            'php',\n            'mjs',\n            'dhtml',\n            'xul',\n            'bml',\n            'download',\n            'cshtml',\n            'vsdisco',\n            'codasite',\n            'webbookmark',\n            'rjs',\n            'wsdl',\n            'dml',\n            'aro',\n            'dcr',\n            'shtml',\n            'dochtml',\n            'dwt',\n            'spc',\n            'a4p',\n            'htaccess',\n            'ascx',\n            'pac',\n            'p7b',\n            'xhtm',\n            'oam',\n            'site',\n            'kit',\n            'aspx',\n            'zul',\n            'tpl',\n            'htm',\n            'seam',\n            'svr',\n            'pem',\n            'url',\n            'dap',\n            'appcache',\n            'chm',\n            'wbs',\n            'htc',\n            'ewp',\n            'gsp',\n            'asr',\n            'der',\n            'master',\n            'stc',\n            'ap',\n            'html',\n            'p12',\n            'xpd',\n            'fwp',\n            'epibrw',\n            'strm',\n            'xss',\n            'node',\n            'disco',\n            'gsp',\n            'pro',\n            'rss',\n            'gne',\n            'sdb',\n            'compressed',\n            'asp',\n            'browser',\n            'php2',\n            'sites2',\n            'dothtml',\n            'bok',\n            'axd',\n            'nzb',\n            'vdw',\n            'obml',\n            'mhtml',\n            'ashx',\n            'con',\n            'rhtml',\n            'alx',\n            'opml',\n            'web',\n            'chat',\n            'csr',\n            'do',\n            'sht',\n            'asa',\n            'cha',\n            'h5p',\n            'qf',\n            'olp',\n            'hyperesources',\n            'sparkle',\n            'razor',\n            'php4',\n            'cms',\n            'mml',\n            'jnlp',\n            'har',\n            'br',\n            'webloc',\n            'srf',\n            'cer',\n            'uhtml',\n            'pptmhtml',\n            'phtml',\n            'xbel',\n            'cfm',\n            'fwtemplateb',\n            'jspx',\n            'jsp',\n            'xfdl',\n            'zhtml',\n            'stml',\n            'jsonl',\n            'maff',\n            'dbm',\n            'aex',\n            'crl',\n            'mht',\n            'wml',\n            'sass',\n            'xht',\n            'awm',\n            'page',\n            'hdml',\n            'webmanifest',\n            'itms',\n            'sitemap',\n            'shtm',\n            'wpp',\n            'jss',\n            'oth',\n            'ucf',\n            'prf',\n            'freeway',\n            'edge',\n            'iqy',\n            'vrml',\n            'mvc',\n            'wdgt',\n            'discomap',\n            'psp',\n            'hxs',\n            'adr',\n            'hype',\n            'csp',\n            'xhtml',\n            'webarchive',\n            'qbo',\n            'jhtml',\n            'svc',\n            'phtm',\n            'rw3',\n            'tpl',\n            'stl',\n            'wbxml',\n            'p7',\n            'ndjson',\n            'ognc',\n            'fwtb',\n            'muse',\n            'vbd',\n            'sites',\n            'rt',\n            'esproj',\n            'private',\n            'srl',\n            'zhtml',\n            'vbhtml', \n            'hypetemplate',\n            'obml15',\n            'hypesymbol',\n            'pub',\n            'ece',\n            'mspx',\n            'docmhtml',\n            'xws',\n            'wgp',\n            'tvpi',\n            'woa',\n            'asmx',\n            'xbl',\n            'webhistory',\n            'idc',\n            'jws',\n            'lbc',\n            'att',\n            'tvvi',\n            'zvz',\n            'php3',\n            'webarchivexml',\n            'widget',\n            'swz',\n            'qrm',\n            'bwp',\n            'atom',\n            'cdf',\n            'map',\n            'hdm',\n            'php5',\n            'rwsw',\n            'wgt',\n            'nod',\n            'rflw',\n            'htx',\n            'mvr',\n            'an',\n            'rwp',\n            'lasso',\n            'vlp',\n            'stp',\n            'nxg',\n            'faces',\n            'kcmsf',\n            'ptw',\n            'less',\n            'saveddeck',\n            'ccbjs',\n            'wn',\n            'ppthtml',\n            'jcz',\n            'jvs',\n            'rwtheme',\n            'jst',\n            'mapx',\n            'cpg',\n            'wpx',\n            'qbx',\n            'suck',\n            'iwdgt',\n            'public',\n            'cphd',\n            'moz',\n            'zfo',\n            'stm',\n            'fcgi',\n            'itpc',\n            'cfml'\n        );\n\n\n        return $dangerous;\n    }\n\n\n    public function is_dangerous_file($file_name)\n    {\n        $dangerous = $this->get_dangerous_files_extentions();\n        $is_ext = get_file_extension($file_name);\n        $is_ext = strtolower($is_ext);\n\n        if (in_array($is_ext, $dangerous)) {\n            return true;\n        }\n\n    }\n\n\n    function get_allowed_files_extensions_for_upload($fileTypes = 'images')\n    {\n\n        $are_allowed = '';\n        switch ($fileTypes) {\n\n            case 'img':\n            case 'image':\n            case 'images':\n                $are_allowed .= ',png,gif,jpg,jpeg,tiff,bmp,svg';\n                break;\n            case 'video':\n            case 'videos':\n                $are_allowed .= ',avi,asf,mpg,mpeg,mp4,flv,mkv,webm,ogg,wma,mov,wmv';\n                break;\n            case 'file':\n            case 'files':\n                $are_allowed .= ',doc,docx,pdf,html,js,css,htm,rtf,txt,zip,gzip,rar,cad,xml,psd,xlsx,csv,7z';\n                break;\n            case 'documents':\n            case 'doc':\n                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xml,htm,html,xlr,xls,xlsx';\n                break;\n            case 'archives':\n            case 'arc':\n            case 'arch':\n                $are_allowed .= ',zip,zipx,gzip,rar,gz,7z,cbr,tar.gz';\n                break;\n            case 'all':\n                $are_allowed .= ',*';\n                break;\n            case '*':\n                $are_allowed .= ',*';\n                break;\n            default:\n                $are_allowed .= ',' . $fileTypes;\n        }\n\n        if($are_allowed){\n            $are_allowed = explode(',',$are_allowed);\n            array_unique($are_allowed);\n            $are_allowed = array_filter($are_allowed);\n            $are_allowed = implode(',', $are_allowed);\n        }\n\n        return $are_allowed;\n    }\n}\n"], "fixing_code": ["<?php\nheader('Content-Type: application/json');\n\n$files_utils = new \\MicroweberPackages\\Utils\\System\\Files();\n$dangerous = $files_utils->get_dangerous_files_extentions();\n\n\nif (!mw()->user_manager->session_id() or (mw()->user_manager->session_all() == false)) {\n    // //session_start();\n}\n\n\n\n$validate_token = false;\nif (!isset($_SERVER['HTTP_REFERER'])) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":97, \"message\": \"You are not allowed to upload\"}}');\n} elseif (!stristr($_SERVER['HTTP_REFERER'], site_url())) {\n    //    if (!is_logged()){\n//        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You cannot upload from remote domains\"}}');\n//    }\n}\n\nif (!is_admin()) {\n    $validate_token = mw()->user_manager->csrf_validate($_GET);\n    if ($validate_token == false) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": \"You are not allowed to upload\"}}');\n    }\n\n    $is_ajax = mw()->url_manager->is_ajax();\n    if (!$is_ajax) {\n        header(\"HTTP/1.1 401 Unauthorized\");\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":99, \"message\": \"You are not allowed to upload\"}}');\n    }\n}\n\n$host = (parse_url(site_url()));\n\n//$host_dir = false;\n$host_dir = 'default';\n\n\nif(defined('MW_IS_MULTISITE') and MW_IS_MULTISITE){\n    if (isset($host['host'])) {\n        $host_dir = $host['host'];\n        $host_dir = str_ireplace('www.', '', $host_dir);\n        $host_dir = str_ireplace('.', '-', $host_dir);\n    }\n}\n\n\n$fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n$is_ext = get_file_extension($fileName_ext);\n$is_ext = strtolower($is_ext);\n\n$is_allowed_file = $files_utils->is_allowed_file($fileName_ext);\n\nif ($is_allowed_file == false) {\n    header(\"HTTP/1.1 401 Unauthorized\");\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":100, \"message\": \"You cannot upload scripts or executable files\"}}');\n}\n\n$allowed_to_upload = false;\n\nif (is_admin() != false) {\n    $allowed_to_upload = true;\n} else {\n    $uid = user_id();\n    if ($uid != 0) {\n        $user = mw()->user_manager->get_by_id($uid);\n        if (!empty($user) and isset($user['is_active']) and $user['is_active'] == 1) {\n            $are_allowed = 'img';\n            $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user/' . $user['id'] . DS;\n            if (isset($_REQUEST['autopath']) and $_REQUEST['autopath'] == 'user_hash') {\n                $up_path = md5($user['id'] . $user['created_at']);\n                $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/user_hash/' . DS . $up_path . DS;\n            }\n            $allowed_to_upload = true;\n        }\n    } else {\n        $_REQUEST['path'] = 'media/' . $host_dir . DS . 'user_uploads/anonymous/';\n        $allowed_to_upload = true;\n    }\n\n\n}\n\n\nif ($allowed_to_upload == false) {\n    if (isset($_REQUEST['rel_type']) and isset($_REQUEST['custom_field_id']) and trim($_REQUEST['rel_type']) != '' and trim($_REQUEST['rel_type']) != 'false') {\n        $cfid = mw()->fields_manager->getById(intval($_REQUEST['custom_field_id']));\n        if ($cfid == false) {\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 90, \"message\": \"Custom field is not found\"}}');\n        } else {\n            $rel_error = false;\n            if (!isset($_REQUEST['rel_id'])) {\n                $rel_error = true;\n            }\n            if (!isset($cfid['rel_id'])) {\n                $rel_error = true;\n            }\n\n            if (($_REQUEST['rel_id']) != $cfid['rel_id']) {\n                $rel_error = true;\n            }\n\n\n\n\n\n            if ($rel_error) {\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 91, \"message\": \"You are not allowed to upload\"}}');\n            }\n        }\n\n        if ($cfid != false and isset($cfid['custom_field_type'])) {\n            if ($cfid['custom_field_type'] != 'upload') {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Custom field is not file upload type\"}}');\n            }\n            if ($cfid != false and (!isset($cfid['options']) or !isset($cfid['options']['file_types']))) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"File types is not set.\"}}');\n            }\n            if ($cfid != false and isset($cfid['file_types']) and empty($cfid['file_types'])) {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"File types cannot by empty.\"}}');\n            }\n\n            if ($cfid != false and isset($cfid['options']) and isset($cfid['options']['file_types'])) {\n                $alloled_ft = array_values(($cfid['options']['file_types']));\n                if (empty($alloled_ft)) {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 104, \"message\": \"File types cannot by empty.\"}}');\n                } else {\n                    $are_allowed = '';\n                    $fileName_ext = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n                    foreach ($alloled_ft as $allowed_file_type_item) {\n                        if (trim($allowed_file_type_item) != '' and $fileName_ext != '') {\n                            $is_ext = get_file_extension($fileName_ext);\n                            $is_ext = strtolower($is_ext);\n\n                            switch ($is_ext) {\n                                case 'phtml':\n                                case 'php':\n                                case 'php12':\n                                case 'php11':\n                                case 'php10':\n                                case 'php9':\n                                case 'php8':\n                                case 'php7':\n                                case 'php6':\n                                case 'php5':\n                                case 'php4':\n                                case 'php3':\n                                case 'ptml':\n                                case 'html':\n                                case 'xhtml':\n                                case 'phtml':\n                                case 'shtml':\n                                case 'htm':\n                                case 'pl':\n                                case 'cgi':\n                                case 'rb':\n                                case 'py':\n                                case 'asp':\n                                case 'htaccess':\n                                case 'exe':\n                                case 'msi':\n                                case 'sh':\n                                case 'bat':\n                                case 'vbs':\n                                    $are_allowed = false;\n                                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":105, \"message\": \"You cannot upload scripts or executables\"}}');\n\n                                    break;\n\n\n                            }\n\n                            $are_allowed = $files_utils->get_allowed_files_extensions_for_upload($allowed_file_type_item);\n\n                            $pass_type_check = false;\n                            if ($are_allowed != false) {\n                                $are_allowed_a = explode(',', $are_allowed);\n                                if (!empty($are_allowed_a)) {\n                                    foreach ($are_allowed_a as $are_allowed_a_item) {\n                                        $are_allowed_a_item = strtolower(trim($are_allowed_a_item));\n                                        $is_ext = strtolower(trim($is_ext));\n\n                                        if ($are_allowed_a_item == '*') {\n                                            $pass_type_check = 1;\n                                        }\n\n                                        if ($are_allowed_a_item != '' and $are_allowed_a_item == $is_ext) {\n                                            $pass_type_check = 1;\n                                        }\n                                    }\n                                }\n                            }\n                            if ($pass_type_check == false) {\n                                header(\"HTTP/1.1 401 Unauthorized\");\n\n                                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":106, \"message\": \"You can only upload ' . $are_allowed . ' files.\"}}');\n                            } else {\n                                if (!isset($_REQUEST['captcha'])) {\n                                    if (!$validate_token) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":107, \"message\": \"Please enter the captcha answer!\"}}');\n                                    }\n                                } else {\n                                    $cap = mw()->user_manager->session_get('captcha');\n                                    if ($cap == false) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":108, \"message\": \"You must load a captcha first!\"}}');\n                                    }\n                                    $validate_captcha = $this->app->captcha_manager->validate($_REQUEST['captcha']);\n                                    if (!$validate_captcha) {\n                                        header(\"HTTP/1.1 401 Unauthorized\");\n\n                                        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":109, \"message\": \"Invalid captcha answer! \"}}');\n                                    } else {\n                                        if (!isset($_REQUEST['path'])) {\n                                            $_REQUEST['path'] = 'media/' . $host_dir . '/user_uploads' . DS . $_REQUEST['rel_type'] . DS;\n                                        }\n                                    }\n                                }\n\n                                //die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\":98, \"message\": PECATA - Not finished yet.\"}}');\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        header(\"HTTP/1.1 401 Unauthorized\");\n\n        die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 110, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n    }\n}\n\n\nif(!is_admin()){\n\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 111, \"message\": \"Only admin can upload.\"}, \"id\" : \"id\"}');\n\n    return response(array(\n        'error' => _e('Please enter captcha answer!', true),\n        'captcha_error' => true,\n        'form_data_required' => 'captcha',\n        'form_data_required_params' => array('captcha_parent_for_id' => $_REQUEST['rel_id']),\n        'form_data_module' => 'captcha'\n    ));\n}\n\n\n// Settings\n//$target_path = media_base_path() . DS;\n//$target_path = media_base_path() . DS . $host_dir . DS . 'uploaded' . DS;\n$target_path = media_uploads_path();\n$target_path = normalize_path($target_path, 0);\n\n$path_restirct = userfiles_path(); // the path the script should access\nif (isset($_REQUEST['path']) and trim($_REQUEST['path']) != '' and trim($_REQUEST['path']) != 'false') {\n    $path = urldecode($_REQUEST['path']);\n\n    $path = html_entity_decode($path);\n    $path = htmlspecialchars_decode($path, ENT_NOQUOTES);\n\n    //$path = urldecode($path);\n    $path = str_replace('%2F', '/', $path);\n    //$path = str_replace('%25252F','/',$path);\n\n    $path = normalize_path($path, 0);\n\n    $path = str_replace('..', '', $path);\n    $path = str_replace($path_restirct, '', $path);\n\n    // $target_path = userfiles_path() . DS . $path;\n    $target_path = media_uploads_path() . DS . $path;\n    $target_path = normalize_path($target_path, 1);\n}\n\n$targetDir = $target_path;\nif (!is_dir($targetDir)) {\n    mkdir_recursive($targetDir);\n}\n//$targetDir = 'uploads';\n\n$cleanupTargetDir = true;\n// Remove old files\n$maxFileAge = 5 * 3600;\n// Temp file age in seconds\n// 5 minutes execution time\n@set_time_limit(5 * 60);\n\n// Uncomment this one to fake upload time\n// usleep(5000);\n// Get parameters\n$chunk = isset($_REQUEST['chunk']) ? intval($_REQUEST['chunk']) : 0;\n$chunks = isset($_REQUEST['chunks']) ? intval($_REQUEST['chunks']) : 0;\n$fileName = isset($_REQUEST['name']) ? $_REQUEST['name'] : '';\n\n// Clean the fileName for security reasons\n$fileNameExtension = get_file_extension($fileName);\n$fileName = \\MicroweberPackages\\Helper\\URLify::filter($fileName);\n//$fileName = url_title($fileName);\n//$fileName = preg_replace('/[\\p{P}\\p{Zs}\\w\\._]+/u', \"\", $fileName);\n// $fileName = preg_replace('/[^\\w\\._]+/', '_', $fileName);\n$fileName = preg_replace('/\\s+\\d+%|\\)/', '', $fileName);\n$fileName = preg_replace(\"/[\\/\\&%#\\$]/\", \"_\", $fileName);\n$fileName = preg_replace(\"/[\\\"\\']/\", \" \", $fileName);\n$fileName = str_replace(array('(', ')', \"'\", \"!\", \"`\", \"*\", \"#\"), '_', $fileName);\n$fileName = str_replace(' ', '_', $fileName);\n$fileName = str_replace('..', '.', $fileName);\n$fileName = strtolower($fileName);\n$fileName = mw()->url_manager->clean_url_wrappers($fileName);\n$fileName = substr($fileName, 0, -(strlen($fileNameExtension)));\n$fileName = $fileName . '.' . $fileNameExtension;\n\n\n$fileName_uniq = date('ymdhis') . uniqid() . $fileName;\n// Make sure the fileName is unique but only if chunking is disabled\nif ($chunks < 2 && file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName)) {\n    $ext = strrpos($fileName, '.');\n    $fileName_a = substr($fileName, 0, $ext);\n    $fileName_b = substr($fileName, $ext);\n\n    $count = 1;\n    while (file_exists($targetDir . DIRECTORY_SEPARATOR . $fileName_a . '_' . $count . $fileName_b)) {\n        ++$count;\n    }\n\n    $fileName = $fileName_a . '_' . $count . $fileName_b;\n}\n\n$filePath = $targetDir . DIRECTORY_SEPARATOR . $fileName;\n$filePath_uniq = $targetDir . DIRECTORY_SEPARATOR . $fileName_uniq;\n\n// Create target dir\nif (!is_dir($targetDir)) {\n    @mkdir_recursive($targetDir);\n}\n\n$has_index = $targetDir . DIRECTORY_SEPARATOR . 'index.html';\n\nif (!is_file($has_index)) {\n    @touch($has_index);\n}\n\n// Remove old temp files\nif ($cleanupTargetDir && is_dir($targetDir) && ($dir = opendir($targetDir))) {\n    while (($file = readdir($dir)) !== false) {\n        $tmpfilePath = $targetDir . DIRECTORY_SEPARATOR . $file;\n\n        // Remove temp file if it is older than the max age and is not the current file\n        if (preg_match('/\\.part$/', $file) && (filemtime($tmpfilePath) < time() - $maxFileAge) && ($tmpfilePath != \"{$filePath}.part\")) {\n            @unlink($tmpfilePath);\n        }\n    }\n\n    closedir($dir);\n} else {\n    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 100, \"message\": \"Failed to open temp directory.\"}, \"id\" : \"id\"}');\n}\n\n\nif (isset($_SERVER['CONTENT_LENGTH']) and isset($_FILES['file'])) {\n    $filename_log = mw()->url_manager->slug($fileName);\n    $check = mw()->log_manager->get('one=true&no_cache=true&is_system=y&created_at=[mt]30 min ago&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&user_ip=' . user_ip());\n    $upl_size_log = $_SERVER['CONTENT_LENGTH'];\n    if (is_array($check) and isset($check['id'])) {\n        $upl_size_log = intval($upl_size_log) + intval($check['value']);\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip() . '&id=' . $check['id']);\n    } else {\n        mw()->log_manager->save('no_cache=true&is_system=y&field=upload_size&rel=uploader&rel_id=' . $filename_log . '&value=' . $upl_size_log . '&user_ip=' . user_ip());\n    }\n}\n\n// Look for the content type header\nif (isset($_SERVER['HTTP_CONTENT_TYPE'])) {\n    $contentType = $_SERVER['HTTP_CONTENT_TYPE'];\n}\n\nif (isset($_SERVER['CONTENT_TYPE'])) {\n    $contentType = $_SERVER['CONTENT_TYPE'];\n}\n\n// Handle non multipart uploads older WebKit versions didn't support multipart in HTML5\n$is_image = false;\n\n$engine = 'plupload';\n\n\nif ($engine == 'plupload') {\n\n\n    if (isset($contentType)) {\n        if (strpos($contentType, 'multipart') !== false) {\n            if ($_FILES['file']['error'] === UPLOAD_ERR_OK) {\n                //uploading successfully done\n            } else {\n                throw new UploadException($_FILES['file']['error']);\n            }\n        }\n\n        if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {\n\n            // Open temp file\n            $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n            if ($out) {\n                // Read binary input stream and append it to temp file\n                $in = fopen($_FILES['file']['tmp_name'], 'rb');\n\n                if ($in) {\n                    while ($buff = fread($in, 4096)) {\n                        fwrite($out, $buff);\n                    }\n                } else {\n                    header(\"HTTP/1.1 401 Unauthorized\");\n\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n                }\n                fclose($in);\n                fclose($out);\n\n                @unlink($_FILES['file']['tmp_name']);\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n            }\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 103, \"message\": \"Failed to move uploaded file.\"}, \"id\" : \"id\"}');\n        }\n    } else {\n        // Open temp file\n        $out = fopen(\"{$filePath}.part\", $chunk == 0 ? 'wb' : 'ab');\n        if ($out) {\n            // Read binary input stream and append it to temp file\n            $in = fopen('php://input', 'rb');\n\n            if ($in) {\n                while ($buff = fread($in, 4096)) {\n                    fwrite($out, $buff);\n                }\n            } else {\n                header(\"HTTP/1.1 401 Unauthorized\");\n\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Failed to open input stream.\"}, \"id\" : \"id\"}');\n            }\n\n            fclose($in);\n            fclose($out);\n        } else {\n            header(\"HTTP/1.1 401 Unauthorized\");\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 102, \"message\": \"Failed to open output stream.\"}, \"id\" : \"id\"}');\n        }\n    }\n\n} else {\n\n\n}\n\n\n$rerturn = array();\n\n\n// Check if file has been uploaded\nif (!$chunks || $chunk == $chunks - 1) {\n    // Strip the temp .part suffix off\n    $newfile = $filePath;\n    if (is_file($newfile)) {\n        $newfile = $filePath_uniq;\n    }\n\n\n    rename(\"{$filePath}.part\", $newfile);\n    $filePath = $newfile;\n\n    $automatic_image_resize_on_upload = get_option('automatic_image_resize_on_upload', 'website') == 'y';\n    $automatic_image_resize_on_upload_disabled = get_option('automatic_image_resize_on_upload', 'website') == 'd';\n\n    if (is_file($filePath) and !$chunks || $chunk == $chunks - 1) {\n        $ext = get_file_extension($filePath);\n\n        if (function_exists('finfo_open') and function_exists('finfo_file')) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type ala mimetype extension\n            $mime = @finfo_file($finfo, $filePath);\n            if ($mime) {\n                $upl_mime_ext = explode('/', $mime);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = explode('-', $upl_mime_ext);\n                $upl_mime_ext = end($upl_mime_ext);\n                $upl_mime_ext = strtolower($upl_mime_ext);\n\n                if (in_array($upl_mime_ext, $dangerous)) {\n                    die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 101, \"message\": \"Cannot upload mime type ' . $upl_mime_ext . '\"}, \"id\" : \"id\"}');\n                }\n            }\n            finfo_close($finfo);\n        }\n\n        if ($ext == 'gif' || $ext == 'jpg' || $ext == 'jpeg' || $ext === 'jpe' || $ext == 'png'|| $ext == 'svg') {\n\n            $valid = false;\n            if ($ext === 'jpg' || $ext === 'jpeg' || $ext === 'jpe') {\n\n                // This will clear exif data - security issue\n                $imgCreatedFromJpeg = @imagecreatefromjpeg($filePath);\n                if ($imgCreatedFromJpeg) {\n                    imagejpeg($imgCreatedFromJpeg, $filePath);  // this will create fresh new image without exif sensitive data\n                    $valid = true;\n                }\n            } else if ($ext === 'png') {\n\n                $imgCreatedFromPng = @imagecreatefrompng($filePath);\n                if ($imgCreatedFromPng) {\n                    imagepng($imgCreatedFromPng, $filePath);  // this will create fresh new image without exif sensitive data\n                    $valid = true;\n                }\n\n            } else if ($ext === 'gif') {\n\n                $imgCreatedFromGif = @imagecreatefromgif($filePath);\n                if ($imgCreatedFromGif) {\n                    imagegif($imgCreatedFromGif, $filePath); // this will create fresh new image without exif sensitive data\n                    $valid = true;\n                }\n\n            } else if ($ext === 'svg') {\n\n                if (is_file($filePath)) {\n                    $sanitizer = new \\enshrined\\svgSanitize\\Sanitizer();\n                    // Load the dirty svg\n                    $dirtySVG = file_get_contents($filePath);\n                     // Pass it to the sanitizer and get it back clean\n                    $cleanSVG = $sanitizer->sanitize($dirtySVG);\n                    file_put_contents($filePath, $cleanSVG);\n\n                }\n               $valid = true;\n\n            } else {\n                $valid = false;\n            }\n\n            if (!$valid) {\n                @unlink($filePath);\n                die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n            }\n        }\n\n    }\n\n\n    if ($is_ext == 'gif' || $is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n        try {\n\n            $size = getimagesize($filePath);\n            $is_image = true;\n            $filesize = filesize($filePath);\n            $rerturn['file_size'] = $filesize;\n            $rerturn['file_size_human'] = mw()->format->human_filesize($filesize);\n            $rerturn['image_size'] = $size;\n            // $auto_resize_treshold = 10000000; // 10MiB\n            $auto_resize_treshold = 2000000; // 2MiB\n\n            if ($is_ext == 'jpg' || $is_ext == 'jpeg' || $is_ext == 'png') {\n                $rerturn['automatic_image_resize_is_enabled'] = $automatic_image_resize_on_upload;\n                if (!$automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    // if image is big, ask to enable resizing\n                    $rerturn['ask_user_to_enable_auto_resizing'] = 1;\n                    $rerturn['ask_user_to_enable_auto_resizing_filesize'] = $filesize;\n\n                }\n                if (!$automatic_image_resize_on_upload_disabled and $automatic_image_resize_on_upload and $filesize > $auto_resize_treshold) {\n                    $maxDim = 1980;\n                    //@ini_set('memory_limit', '256M');\n\n                    list($width, $height, $type, $attr) = $size;\n                    if ($width > $maxDim || $height > $maxDim) {\n//                        $d1 = dirname($filePath);\n                        $d2 = basename($filePath);\n//                        $target_filename = $d1 . DS . 'auto_resized_' . $d2;\n                        $target_filename = $filePath;\n                        $fn = $filePath;\n                        $ratio = $size[0] / $size[1]; // width/height\n                        if ($ratio > 1) {\n                            $width = $maxDim;\n                            $height = $maxDim / $ratio;\n                        } else {\n                            $width = $maxDim * $ratio;\n                            $height = $maxDim;\n                        }\n                        $src = imagecreatefromstring(file_get_contents($fn));\n                        $dst = imagecreatetruecolor($width, $height);\n\n                        if ($is_ext == 'png') {\n                            // save transparency in alpha channel\n                            imagealphablending($dst, false);\n                            imagesavealpha($dst, true);\n\n                        }\n                        imagecopyresampled($dst, $src, 0, 0, 0, 0, $width, $height, $size[0], $size[1]);\n                        imagedestroy($src);\n\n                        if ($is_ext == 'png') {\n                            imagepng($dst, $target_filename); // adjust format as needed\n\n                        } else if ($is_ext == 'jpg' || $is_ext == 'jpeg') {\n                            imagejpeg($dst, $target_filename); // adjust format as needed\n                        }\n\n                        $rerturn['image_was_auto_resized'] = 1;\n                        $rerturn['image_was_auto_resized_msg'] = \"Image was automatically resized because it was \" . $rerturn['file_size_human'];\n\n                        imagedestroy($dst);\n                    }\n                }\n            }\n\n\n        } catch (Exception $e) {\n            @unlink($filePath);\n\n            die('{\"jsonrpc\" : \"2.0\", \"error\" : {\"code\": 107, \"message\": \"File is not an image\"}, \"id\" : \"id\"}');\n\n        }\n    }\n\n\n    mw()->log_manager->delete('is_system=y&rel=uploader&created_at=[lt]30 min ago');\n    mw()->log_manager->delete('is_system=y&rel=uploader&session_id=' . mw()->user_manager->session_id());\n}\n$f_name = explode(DS, $filePath);\n$f_name = end($f_name);\n\n$filePath = mw()->url_manager->link_to_file($filePath);\n\n$rerturn['src'] = $filePath;\n$rerturn['name'] = $f_name;\n\n\nif (isset($upl_size_log) and $upl_size_log > 0) {\n    $rerturn['bytes_uploaded'] = $upl_size_log;\n}\n//$rerturn['ORIG_REQUEST'] = $_GET;\n\n\n/*\n * upload.php\n *\n * Copyright 2009, Moxiecode Systems AB\n * Released under GPL License.\n *\n * License: http://www.plupload.com/license\n * Contributing: http://www.plupload.com/contributing\n */\n// HTTP headers for no cache etc\nheader('Expires: Mon, 26 Jul 1997 05:00:00 GMT');\nheader('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');\nheader('Cache-Control: no-store, no-cache, must-revalidate');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Pragma: no-cache');\n\n\necho json_encode($rerturn);\nif (mw()->user_manager->session_id() and !(mw()->user_manager->session_all() == false)) {\n    // @//session_write_close();\n}\n\nclass UploadException extends Exception\n{\n    public function __construct($code)\n    {\n        $message = $this->codeToMessage($code);\n        parent::__construct($message, $code);\n    }\n\n    private function codeToMessage($code)\n    {\n        switch ($code) {\n            case UPLOAD_ERR_INI_SIZE:\n                $message = 'The uploaded file exceeds the upload_max_filesize directive in php.ini';\n                break;\n            case UPLOAD_ERR_FORM_SIZE:\n                $message = 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form';\n                break;\n            case UPLOAD_ERR_PARTIAL:\n                $message = 'The uploaded file was only partially uploaded';\n                break;\n            case UPLOAD_ERR_NO_FILE:\n                $message = 'No file was uploaded';\n                break;\n            case UPLOAD_ERR_NO_TMP_DIR:\n                $message = 'Missing a temporary folder';\n                break;\n            case UPLOAD_ERR_CANT_WRITE:\n                $message = 'Failed to write file to disk';\n                break;\n            case UPLOAD_ERR_EXTENSION:\n                $message = 'File upload stopped by extension';\n                break;\n\n            default:\n                $message = 'Unknown upload error';\n                break;\n        }\n\n        return $message;\n    }\n}\n\nexit;\n\n// Return JSON-RPC response\n//die('{\"jsonrpc\" : \"2.0\", \"result\" : null, \"id\" : \"id\"}');\n", "<?php\n\nnamespace MicroweberPackages\\Utils\\System;\n\nuse RecursiveIteratorIterator;\nuse RecursiveDirectoryIterator;\nuse FilesystemIterator;\n\n$mw_static_option_groups = array();\n\nclass Files\n{\n    /**\n     * Copies directory recursively.\n     *\n     * @param $source\n     * @param $destination\n     */\n    public function copy_directory($source, $destination)\n    {\n        static $copies;\n        if (is_dir($source)) {\n            @mkdir($destination);\n            $directory = dir($source);\n            while (false !== ($readdirectory = $directory->read())) {\n                if ($readdirectory == '.' || $readdirectory == '..') {\n                    continue;\n                }\n\n                $PathDir = $source . DIRECTORY_SEPARATOR . $readdirectory;\n                if (is_dir($PathDir)) {\n                    $this->copy_directory($PathDir, $destination . DIRECTORY_SEPARATOR . $readdirectory);\n                    continue;\n                }\n                $copies[] = $destination . DIRECTORY_SEPARATOR . $readdirectory;\n                copy($PathDir, $destination . DIRECTORY_SEPARATOR . $readdirectory);\n            }\n\n            $directory->close();\n        } else {\n            $copies[] = $destination;\n            copy($source, $destination);\n        }\n\n        return $copies;\n    }\n\n    /**\n     * Returns a human readable filesize.\n     *\n     * @category Files\n     *\n     * @author      wesman20 (php.net)\n     * @author      Jonas John\n     *\n     * @version     0.3\n     *\n     * @link        http://www.jonasjohn.de/snippets/php/readable-filesize.htm\n     */\n    public function file_size_nice($size)\n    {\n        // Adapted from: http://www.php.net/manual/en/function.filesize.php\n\n        $mod = 1024;\n\n        $units = explode(' ', 'B KB MB GB TB PB');\n        for ($i = 0; $size > $mod; ++$i) {\n            $size /= $mod;\n        }\n\n        return round($size, 2) . ' ' . $units[$i];\n    }\n\n\n    public function rmdir($dirPath)\n    {\n        foreach (new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dirPath, FilesystemIterator::SKIP_DOTS), RecursiveIteratorIterator::CHILD_FIRST) as $path) {\n            $path->isDir() && !$path->isLink() ? rmdir($path->getPathname()) : unlink($path->getPathname());\n        }\n        @rmdir($dirPath);\n    }\n\n//    public function dir_tree($path = '.', $params = false)\n//    {\n//        $params = parse_params($params);\n//        $dir = $path;\n//\n//        return $this->directory_tree_build($dir, $params);\n//    }\n\n    public function md5_dir($path)\n    {\n        if (!file_exists($path)) {\n            throw new \\Exception('Directory doesn\\'t exist.');\n        }\n\n        $directoryIterator = new \\DirectoryIterator($path);\n        $items = array();\n        foreach ($directoryIterator as $fileInfo) {\n            $filePath = $fileInfo->getPathname();\n            if (!$fileInfo->isDot()) {\n                if ($fileInfo->isFile()) {\n                    $md = md5_file($filePath);\n                    $filePath = normalize_path($filePath, false);\n                    $items [$md] = $filePath;\n                } else if ($fileInfo->isDir()) {\n                    $more = $this->md5_dir($filePath);\n                    foreach ($more as $k => $v) {\n                        $items [$k] = $v;\n                    }\n                }\n            }\n        }\n        return $items;\n    }\n\n\n    /**\n     * get_files.\n     *\n     *  Get an array that represents directory and files\n     *\n     * @category    files module api\n     *\n     * @version 1.0\n     *\n     * @since 0.320\n     *\n     * @return mixed Array with files\n     *\n     * @param array $params = array()     the params\n     * @param string $params ['directory']       The directory\n     * @param string $params ['keyword']       If set it will seach the dir and subdirs\n     */\n    public function get($params)\n    {\n        if (is_admin() == false) {\n            mw_error('Must be admin');\n        }\n\n        $params = parse_params($params);\n        if (!isset($params['directory'])) {\n            mw_error('You must define directory');\n        } else {\n            $directory = $params['directory'];\n        }\n\n\n        $filter_extensions = false;\n\n        if (isset($params['extensions']) and is_string($params['extensions'])) {\n            $filter_extensions = explode(',', $params['extensions']);\n        }\n\n        $hide_files = false;\n\n        if (isset($params['hide_files']) and is_string($params['hide_files'])) {\n            $hide_files = explode(',', $params['hide_files']);\n        } else if (isset($params['hide_files']) and is_array($params['hide_files'])) {\n            $hide_files = $params['hide_files'];\n        }\n        $restrict_path = false;\n\n        if (isset($params['restrict_path']) and is_string($params['restrict_path'])) {\n            $restrict_path = $params['restrict_path'];\n        }\n\n        if ($restrict_path) {\n            if (!strstr($directory, $restrict_path)) {\n                $directory = $restrict_path . $directory;\n            }\n        }\n\n        $from_search = 0;\n        $arrayItems = array();\n        if (isset($params['search']) and strval($params['search']) != '') {\n            $from_search = 1;\n            $arrayItems_search = $this->rglob($pattern = DS . '*' . $params['search'] . '*', $flags = 0, $directory);\n        } else {\n            if (!is_dir($directory . DS)) {\n                return false;\n            }\n\n            $arrayItems_search = array();\n            $myDirectory = opendir($directory . DS);\n\n\n\n            while ($entryName = readdir($myDirectory)) {\n\n                if(!empty($hide_files) && in_array($entryName,$hide_files)){\n                    continue;\n                }\n\n                if ($entryName != '..' and $entryName != '.') {\n                    $arrayItems_search[] = $entryName;\n                }\n            }\n\n            closedir($myDirectory);\n        }\n\n        if (!empty($arrayItems_search)) {\n//\n            //usort($myarray, create_function('$a,$b', 'return filemtime($a) - filemtime($b);'));\n\n            $arrayItems_f = array();\n            $arrayItems_d = array();\n            foreach ($arrayItems_search as $file) {\n                if ($from_search == 0) {\n                    $file = $directory . DS . $file;\n                }\n                if (is_file($file)) {\n\n                    $skip = false;\n                    $df = normalize_path($file, false);\n                    $file_ext = get_file_extension($df);\n\n\n                    if ($filter_extensions and !empty($filter_extensions)) {\n                        $skip = true;\n                        foreach ($filter_extensions as $filter_extension) {\n                            if ($filter_extension == $file_ext) {\n                                $skip = false;\n                            }\n                        }\n//                        if(array_search($file_ext,$filter_extensions)){\n//                           // $skip = false;\n//                        }\n                    }\n\n                    if ($skip == false) {\n                        if (!in_array($df, $arrayItems_f)) {\n                            $arrayItems_f[] = $df;\n                        }\n                    }\n                } else {\n                    $df = normalize_path($file, 1);\n                    if (!in_array($df, $arrayItems_d)) {\n                        $arrayItems_d[] = $df;\n                    }\n                }\n            }\n\n            /*\n            // Sort  by filetime\n            $sortedFiles = array();\n            foreach($arrayItems_f as $dir) {\n            \t$sortedFiles[filemtime($dir)] = $dir;\n            }\n            ksort($sortedFiles);\n            $sortedFiles = array_reverse($sortedFiles);\n            */\n\n\n            if (isset($params['sort_by']) and strval($params['sort_by']) != '') {\n                if (!isset($params['sort_order'])) {\n                    $sort_params = explode(' ', $params['sort_by']);\n                    if (isset($sort_params[1])) {\n                        $params['sort_by'] = $sort_params[0];\n                        $params['sort_order'] = $sort_params[1];\n                    }\n                }\n\n\n                if (isset($params['sort_order']) and strval($params['sort_order']) != '') {\n                    $ord = SORT_DESC;\n                    if (strtolower($params['sort_order']) == 'asc') {\n                        $ord = SORT_ASC;\n                    }\n                    $allowed_sort = array('basename', 'filemtime', 'filesize');\n                    if (in_array($params['sort_by'], $allowed_sort)) {\n                        array_multisort(array_map($params['sort_by'], $arrayItems_f), SORT_NUMERIC, $ord, $arrayItems_f);\n                    }\n                }\n            }\n\n            $arrayItems['files'] = $arrayItems_f;\n            $arrayItems['dirs'] = $arrayItems_d;\n        }\n\n\n        return $arrayItems;\n    }\n\n    /**\n     * Recursive glob().\n     *\n     * @category Files\n     *\n     * @uses is_array()\n     *\n     * @param int|string $pattern\n     *                            the pattern passed to glob()\n     * @param int $flags\n     *                            the flags passed to glob()\n     * @param string $path\n     *                            the path to scan\n     *\n     * @return mixed\n     *               an array of files in the given path matching the pattern.\n     */\n    public function rglob($pattern = '*', $flags = 0, $path = '')\n    {\n        if (!$path && ($dir = dirname($pattern)) != '.') {\n            if ($dir == '\\\\' || $dir == '/') {\n                $dir = '';\n            }\n\n            return $this->rglob(basename($pattern), $flags, $dir . DS);\n        }\n\n        if (stristr($path, '_notes') or stristr($path, '.git') or stristr($path, '.svn')) {\n            return false;\n        }\n\n        $paths = glob($path . '*', GLOB_ONLYDIR | GLOB_NOSORT);\n        $files = glob($path . $pattern, $flags);\n\n        if (is_array($paths)) {\n            foreach ($paths as $p) {\n                $temp = array();\n                if (is_dir($p) and is_readable($p)) {\n                    $temp = $this->rglob($pattern, false, $p . DS);\n                }\n\n                if (is_array($temp) and is_array($files)) {\n                    $files = array_merge($files, $temp);\n                } elseif (is_array($temp)) {\n                    $files = $temp;\n                }\n            }\n        }\n\n        return $files;\n    }\n\n    public function dir_tree_build($dir, $params = false)\n    {\n        $params = parse_params($params);\n        $class = 'directory_tree';\n        if (isset($params['class'])) {\n            $class = $params['class'];\n        }\n\n        $title_class = 'is_folder';\n        if (isset($params['title_class'])) {\n            $title_class = $params['title_class'];\n        }\n\n        $basedir = '';\n        if (isset($params['dir_name'])) {\n            $basedir = $params['dir_name'];\n        }\n\n        $max_depth = 100;\n        if (isset($params['max_depth'])) {\n            $max_depth = $params['max_depth'];\n        }\n\n        $url_param = 'file';\n        if (isset($params['url_param'])) {\n            $url_param = $params['url_param'];\n        }\n\n        if (isset($params['url'])) {\n            $url = $params['url'];\n        } else {\n            $url = mw()->url->current(true, true);\n        }\n\n        static $level = 0;\n\n        if ($max_depth > $level) {\n            ++$level;\n            $ffs = scandir($dir);\n            echo '<ul class=\"' . $class . ' depth_' . $level . '\">';\n            foreach ($ffs as $ff) {\n                $is_hidden = substr($ff, 0, 1);\n                if ($is_hidden == '_') {\n                } else {\n                    $file1 = $ff;\n\n                    if (strlen($file1) > 3) {\n                        $pos = strpos($file1, '_', 1);\n\n                        if ($pos != false) {\n                            $substr = substr($file1, 0, $pos);\n                            if (intval($substr) > 0) {\n                                $file1 = substr($file1, $pos, strlen($file1));\n                                $file1 = ltrim($file1, '_');\n                            }\n                        }\n                    }\n\n                    $file1 = str_replace('_', ' ', $file1);\n\n                    if ($ff != '.' && $ff != '..') {\n                        echo '<li class=\"' . $class . ' depth_' . $level . '\">';\n                        if (is_dir($dir . '/' . $ff)) {\n                            $is_index = $dir . DS . $ff . DS . 'index.php';\n                            $link_href = '';\n\n                            if (is_file($is_index)) {\n                                $link = $dir . '/' . $ff . '/index.php';\n                                if (trim($basedir) != '') {\n                                    $link = normalize_path($link, false);\n                                    $basedir = normalize_path($basedir, false);\n                                    $link = str_replace($basedir . DS, '', $link);\n                                    $link = str_replace('\\\\', '/', $link);\n                                    $link = urlencode($link);\n                                }\n                                $active_class = '';\n\n                                if (isset($_REQUEST[$url_param]) and urldecode($_REQUEST[$url_param]) == $link) {\n                                    $active_class = ' active ';\n                                }\n\n                                $file1 = \"<a class='{$active_class}' href='{$url}?{$url_param}={$link}'>{$file1}</a>\";\n                            }\n\n                            $h_start = ($level == 1) ? '<h2 class=\"' . $title_class . '\">' : '<h3 class=\"' . $title_class . '\">';\n                            $h_close = ($level == 1) ? '</h2>' : '</h3>';\n                            echo $h_start . $file1 . $h_close;\n                            $this->dir_tree_build($dir . '/' . $ff, $params);\n                        } else {\n                            $file1 = no_ext($file1);\n\n                            $link = $dir . '/' . $ff;\n\n                            if (trim($basedir) != '') {\n                                $link = normalize_path($link, false);\n                                $basedir = normalize_path($basedir, false);\n                                $link = str_replace($basedir . DS, '', $link);\n                            }\n\n                            $link = str_replace('\\\\', '/', $link);\n                            $class_path = str_replace('/', '--', $link);\n                            $class_path = str_replace(' ', '_', $class_path);\n                            $class_path = str_replace('.', '_', $class_path);\n                            $active_class = '';\n                            if (isset($_REQUEST[$url_param]) and urldecode($_REQUEST[$url_param]) == $link) {\n                                $active_class = ' active ';\n                            }\n\n                            $link_href = $file1;\n                            if ($link != false) {\n                                $link = urlencode($link);\n                                $link_href = \"<a class='{$active_class} page_{$class_path} ' href='{$url}?{$url_param}={$link}'>{$file1}</a>\";\n                            }\n\n                            echo $link_href;\n                        }\n                        echo '</li>';\n                    }\n                }\n            }\n            echo '</ul>';\n        }\n        --$level;\n    }\n\n    public function download_to_browser($filename)\n    {\n        if (file_exists($filename)) {\n            $name = basename($filename);\n            $ext = get_file_extension($filename);\n\n            header('Cache-Control: public');\n            if ($ext == 'zip') {\n                header('Content-Type: application/zip');\n                header('Content-Transfer-Encoding: Binary');\n            } elseif ($ext == 'sql') {\n                header('Content-type: text/plain; charset=utf-8');\n            }\n            header('Content-Description: File Transfer');\n            header('Content-Disposition: attachment; filename=' . $name);\n            header('Content-Length: ' . filesize($filename));\n            readfile($filename);\n            exit;\n//            if (function_exists('mime_content_type')) {\n//                $this->_readfile_laravel_chunked($filename);\n//            } else {\n//\n//            }\n            //$this->_readfile_chunked($filename);\n        }\n    }\n\n    private function _readfile_chunked($filename, $retbytes = true)\n    {\n        $filename = str_replace('..', '', $filename);\n        $chunk_size = 1024 * 1024;\n        $buffer = '';\n        $cnt = 0;\n        $handle = fopen($filename, 'rb');\n        if ($handle === false) {\n            return false;\n        }\n        while (!feof($handle)) {\n            $buffer = fread($handle, $chunk_size);\n            echo $buffer;\n            ob_flush();\n            flush();\n            if ($retbytes) {\n                $cnt += strlen($buffer);\n            }\n        }\n        $status = fclose($handle);\n        if ($retbytes && $status) {\n            return $cnt; // return num. bytes delivered like readfile() does.\n        }\n\n        return $status;\n    }\n\n    private function _readfile_laravel_chunked($path, $name = null, array $headers = array())\n    {\n        if (is_null($name)) {\n            $name = basename($path);\n        }\n\n        // Prepare the headers\n        $headers = array_merge(array(\n            'Content-Description' => 'File Transfer',\n            'Content-Type' => \\File::mime(\\File::extension($path)),\n            'Content-Transfer-Encoding' => 'binary',\n            'Expires' => 0,\n            'Cache-Control' => 'must-revalidate, post-check=0, pre-check=0',\n            'Pragma' => 'public',\n            'Content-Length' => \\File::size($path),\n        ), $headers);\n\n        $response = new \\Response('', 200, $headers);\n        $response->header('Content-Disposition', $response->disposition($name));\n\n        // If there's a session we should save it now\n        if (\\Config::get('session.driver') !== '') {\n            \\Session::save();\n        }\n\n        // Send the headers and the file\n        ob_end_clean();\n        $response->send_headers();\n\n        if ($fp = fread($path, 'rb')) {\n            while (!feof($fp) and (connection_status() == 0)) {\n                echo fread($fp, 8192);\n                flush();\n            }\n        }\n\n        // Finish off, like Laravel would\n        \\Event::fire('laravel.done', array($response));\n        $response->foundation->finish();\n\n        exit;\n    }\n\n\n    function get_dangerous_files_extentions()\n    {\n\n\n        $dangerous = array(\n            'phtml',\n            'php',\n            'php5',\n            'php6',\n            'php7',\n            'php72',\n            'php73',\n            'php74',\n            'php8',\n            'php81',\n            'php82',\n            'php56',\n            'php4',\n            'php3',\n            'phps',\n            'phpt',\n            'ptml',\n            'hphp',\n            'html',\n            'xhtml',\n            'phtml',\n            'shtml',\n            'htm',\n            'pl',\n            'js',\n            'cgi',\n            'rb',\n            'py',\n            'alfa',\n            'asp',\n            'aspx',\n            'htaccess',\n            'exe',\n            'msi',\n            'sh',\n            'bat',\n            'vbs',\n            'vb',\n            'lnk',\n            'jsp',\n            'jspx',\n\n            // from http://www.file-extensions.org/filetype/extension/name/program-executable-files\n            'action ',  //  Automator Action  Mac OS\n            'apk',      //     Application  Android\n            'app',      //     Executable  Mac OS\n            'bat',      //     Batch File  Windows\n            'bin',      //     Binary Executable  Windows, Mac OS, Linux\n            'cmd',      //     Command Script  Windows\n            'com',      //     Command File  Windows\n            'command',  //   Terminal Command  Mac OS\n            'cpl',      //     Control Panel Extension  Windows\n            'csh',      //     C Shell Script  Mac OS, Linux\n            'exe',      //     Executable  Windows\n            'gadget',   //  Windows Gadget  Windows\n            'inf1',     //      Setup Information File  Windows\n            'ins',      //     Internet Communication Settings  Windows\n            'inx',      //     InstallShield Compiled Script  Windows\n            'ipa',      //     Application  iOS\n            'isu',      //     InstallShield Uninstaller Script  Windows\n            'job',      //     Windows Task Scheduler Job File  Windows\n            'jse',      //     JScript Encoded File  Windows\n            'ksh',      //     Unix Korn Shell Script  Linux\n            'lnk',      //     File Shortcut  Windows\n            'msc',      //     Microsoft Common Console Document  Windows\n            'msi',      //     Windows Installer Package  Windows\n            'msp',      //     Windows Installer Patch  Windows\n            'mst',      //     Windows Installer Setup Transform File  Windows\n            'osx',      //     Executable  Mac OS\n            'out',      //     Executable  Linux\n            'paf',      //     Portable Application Installer File  Windows\n            'pif',      //     Program Information File  Windows\n            'prg',      //     Executable  GEM\n            'ps1',      //     Windows PowerShell Cmdlet  Windows\n            'reg',      //     Registry Data File  Windows\n            'rgs',      //     Registry Script  Windows\n            'run',      //     Executable  Linux\n            'sct',      //     Windows Scriptlet  Windows\n            'shb',      //     Windows Document Shortcut  Windows\n            'shs',      //     Shell Scrap Object  Windows\n            'u3p',      //     U3 Smart Application  Windows\n            'vb',       //    VBScript File  Windows\n            'vbe',      //     VBScript Encoded Script  Windows\n            'vbs',      //     VBScript File  Windows\n            'vbscript', //    Visual Basic Script  Windows\n            'workflow', //    Automator Workflow  Mac OS\n            'ws',       //    Windows Script  Windows\n            'wsf',      //  Windows Script  Windows\n\n            // from http://fileinfo.com/filetypes/executable\n            '0xe',        //    F-Secure Renamed Virus File',\n            '73k',        //    TI-73 Application',\n            '89k',        //    TI-89 Application',\n            '8ck',        //    TI-83 and TI-84 Plus Application\n            'a6p',        //    Authorware 6 Program',\n            'a7r',        //    Authorware 7 Runtime File',\n            'ac',        //    Autoconf Script',\n            'acc',        //    GEM Accessory File',\n            'acr',        //    ACRobot Script',\n            'action',        //    Automator Action',\n            'actm',        //    AutoCAD Action Macro File',\n            'ahk',        //    AutoHotkey Script',\n            'air',        //    Adobe AIR Installation Package',\n            'apk',        //    Android Package File',\n            'app',        //    Mac OS X Application',\n            'app',        //    FoxPro Generated Application',\n            'app',        //    Symbian OS Application',\n            'applescripT',        //    AppleScript File',\n            'arscript',        //    ArtRage Script',\n            'asb',        //    Alphacam Stone VB Macro File',\n            'azw2',        //    Kindle Active Content App File',\n            'ba_',        //    Renamed BAT File',\n            'bat',        //    DOS Batch File',\n            'beam',        //    Compiled Erlang File',\n            'bin',        //    Generic Binary Executable File',\n            'bin',        //    Unix Executable File',\n            'btm',        //    4DOS Batch File',\n            'caction',        //    Automator Converter Action',\n            'cel',        //    Celestia Script File',\n            'celx',        //    Celestia Script',\n            'cgi',        //    Common Gateway Interface Script',\n            'cmd',        //    Windows Command File',\n            'cof',        //    MPLAB COFF File',\n            'com',        //    DOS Command File',\n            'command',        //    Terminal Command File',\n            'csh',        //    C Shell Script',\n            'cyw',        //    Rbot.CYW Worm File',\n            'dek',        //    Eavesdropper Batch File',\n            'dld',        //    EdLog Compiled Program',\n            'dmc',        //    Medical Manager Script',\n            'dosexec',\n            'ds',        //    TWAIN Data Source',\n            'dxl',        //    Rational DOORS Script',\n            'e_e',        //    Renamed EXE File',\n            'ear',        //    Java Enterprise Archive File',\n            'ebm',        //    EXTRA! Basic Macro',\n            'ebs',        //    E-Run 1.x Script',\n            'ebs2',        //    E-Run 2.0 Script File',\n            'ecf',        //    SageCRM Component File',\n            'eham',        //    ExtraHAM Executable File',\n            'elf',        //    Nintendo Wii Game File',\n            'es',        //    SageCRM Script File',\n            'esh',        //    Extended Shell Batch File',\n            'ex4',        //    MetaTrader Program File',\n            'ex_',        //    Compressed Executable File',\n            'ex_',        //    Renamed Windows Executable File',\n            'exe',        //    Windows Executable File',\n            'exe',        //    PortableApps.com Application',\n            'exe1',        //    Renamed EXE File',\n            'exopc',        //    ExoPC Application',\n            'ezs',        //    EZ-R Stats Batch Script',\n            'ezt',        //    EZT Malicious Worm File',\n            'fas',        //    Compiled Fast-Load AutoLISP File'\n            'fas',        //    QuickSilver Fast Save Lisp File',\n            'fky',        //    FoxPro Macro',\n            'fpi',        //    FPS Creator Intelligence Script',\n            'frs',        //    Flash Renamer Script',\n            'fxp',        //    FoxPro Compiled Program',\n            'gadget',        //    Windows Gadget',\n            'gpe',        //    GP2X Video Game',\n            'gpu',        //    GP2X Utility Program',\n            'gs',        //    Geosoft Script',\n            'ham',        //    HAM Executable File',\n            'hms',        //    HostMonitor Script File',\n            'hpf',        //    HP9100A Program File',\n            'hta',        //    HTML Application',\n            'icd',        //    SafeDisc Encrypted Program',\n            'iim',        //    iMacro Macro File',\n            'ipa',        //    iOS Application',\n            'ipf',        //    SMS Installer Script',\n            'isu',        //    InstallShield Uninstaller Script'\n            'ita',        //    VTech InnoTab Application File',\n            'jar',        //    Java Archive File',\n            'js',        //    JScript Executable Script',\n            'jse',        //    JScript Encoded File',\n            'jsx',        //    ExtendScript Script File',\n            'kix',        //    KiXtart Script File',\n            'ksh',        //    Unix Korn Shell Script',\n            'lo',        //    Interleaf Compiled Lisp File',\n            'ls',        //    LightWave LScript File',\n            'm3g',        //    Mobile 3D Graphics Program',\n            'mam',        //    Microsoft Access Macro',\n            'mcr',        //    3ds Max Macroscript File',\n            'mcr',        //    Tecplot Macro',\n            'mel',        //    Maya Embedded Language File',\n            'mem',        //    Macro Editor Macro',\n            'mio',        //    MioEngine Application File',\n            'mm',        //    NeXtMidas Macro File',\n            'mpx',        //    FoxPro Compiled Menu Program',\n            'mrc',        //    mIRC Script File',\n            'mrp',        //    Mobile Application File',\n            'ms',        //    3ds Max Script File',\n            'ms',        //    Maxwell Script',\n            'msl',        //    Magick Scripting Language File',\n            'mxe',        //    Macro Express Playable Macro',\n            'n',        //    Neko Bytecode File',\n            'nexe',        //    Chrome Native Client Executable',\n            'ore',        //    Ore Executable File',\n            'osx',        //    PowerPC Executable File',\n            'otm',        //    Outlook Macro File',\n            'out',        //    Compiled Executable File',\n            'paf',        //    Portable Application Installer Fi\n            'paf.exe',        //    PortableApps.com Program File\n            'pex',        //    ProBoard Executable File',\n            'phar',        //    PHP Archive',\n            'pif',        //    Program Information File',\n            'plsc',        //    Messenger Plus! Live Script File'\n            'plx',        //    Perl Executable File',\n            'prc',        //    Palm Resource Code File',\n            'prg',        //    Program File',\n            'prg',        //    GEM Application',\n            'ps1',        //    Windows PowerShell Cmdlet File',\n            'pvd',        //    Instalit Script',\n            'pwc',        //    PictureTaker File',\n            'pyc',        //    Python Compiled File',\n            'pyo',        //    Python Optimized Code',\n            'qit',        //    QIT Trojan Horse File',\n            'qpx',        //    FoxPro Compiled Query Program',\n            'rbx',        //    Rembo-C Compiled Script',\n            'rfu',        //    Remote Firmware Update',\n            'rgs',        //    Registry Script',\n            'rox',        //    Actuate Report Object Executable\n            'rpj',        //    Real Pac Batch Job File',\n            'run',        //    Linux Executable File',\n            'rxe',        //    Lego Mindstorms NXT Executable Pr\n            's2a',        //    SEAL2 Application',\n            'sbs',        //    SPSS Script',\n            'sca',        //    Scala Script File',\n            'scar',        //    SCAR Script',\n            'scb',        //    Scala Published Script',\n            'scpt',        //    AppleScript Script File',\n            'scptd',        //    AppleScript Script Bundle',\n            'scr',        //    Script File',\n            'script',        //    Generic Script File',\n            'sct',        //    Windows Scriptlet',\n            'seed',        //    Linux Preseed File',\n            'shb',        //    Windows Document Shortcut',\n            'smm',        //    Ami Pro Macro',\n            'spr',        //    FoxPro Generated Screen File',\n            'tcp',        //    Tally Compiled Program File',\n            'thm',        //    Thermwood Macro File',\n            'tms',        //    Telemate Script',\n            'u3p',        //    U3 Smart Application',\n            'udf',        //    Excel User Defined Function',\n            'upx',        //    Ultimate Packer for eXecutables F\n            'vb',        //    VBScript File',    \t//\n            'vbe',        //    VBScript Encoded Script File',\n            'vbs',        //    VBScript File',\n            'vbscript',        //    Visual Basic Script',\n            'vdo',        //    Heathen Virus File',\n            'vexe',        //    Virus Executable File',\n            'vlx',        //    Compiled AutoLISP File',\n            'vpm',        //    Vox Proxy Macro File',\n            'vxp',        //    Mobile Application File',\n            'wcm',        //    WordPerfect Macro',\n            'widget',        //    Microsoft Windows Mobile Widget',\n            'widget',        //    Yahoo! Widget',\n            'wiz',        //    Microsoft Wizard File',\n            'workflow',        //    Automator Workflow',\n            'wpk',        //    WordPerfect Macro',\n            'wpm',        //    WordPerfect Macro File',\n            'ws',        //    Windows Script',\n            'wsf',        //    Windows Script File',\n            'wsh',        //    Windows Script Host Settings',\n            'x86',        //    Linux Executable File',\n            'xap',        //    Silverlight Application Package',\n            'xbap',        //    XAML Browser Application File',\n            'xlm',        //    Excel Macro',\n            'xqt',        //    SuperCalc Macro File',\n            'xys',        //    XYplorer Script File',\n            'zl9',        //    ZoneAlarm Quarantined EXE File\n            'swf',        //    Flash File\n\n            'key',\n            'asax',\n            'btapp',\n            'xd',\n            'fwtemplate',\n            'crdownload',\n            'whtt',\n            'ssp',\n            'fmp',\n            'jspa',\n            'obml16',\n            'a5w',\n            'crt',\n            'vrt',\n            'website',\n            'p7c',\n            'dll',\n            'php',\n            'mjs',\n            'dhtml',\n            'xul',\n            'bml',\n            'download',\n            'cshtml',\n            'vsdisco',\n            'codasite',\n            'webbookmark',\n            'rjs',\n            'wsdl',\n            'dml',\n            'aro',\n            'dcr',\n            'shtml',\n            'dochtml',\n            'dwt',\n            'spc',\n            'a4p',\n            'htaccess',\n            'ascx',\n            'pac',\n            'p7b',\n            'xhtm',\n            'oam',\n            'site',\n            'kit',\n            'aspx',\n            'zul',\n            'tpl',\n            'htm',\n            'seam',\n            'svr',\n            'pem',\n            'url',\n            'dap',\n            'appcache',\n            'chm',\n            'wbs',\n            'htc',\n            'ewp',\n            'gsp',\n            'asr',\n            'der',\n            'master',\n            'stc',\n            'ap',\n            'html',\n            'p12',\n            'xpd',\n            'fwp',\n            'epibrw',\n            'strm',\n            'xss',\n            'node',\n            'disco',\n            'gsp',\n            'pro',\n            'rss',\n            'gne',\n            'sdb',\n            'compressed',\n            'asp',\n            'browser',\n            'php2',\n            'sites2',\n            'dothtml',\n            'bok',\n            'axd',\n            'nzb',\n            'vdw',\n            'obml',\n            'mhtml',\n            'ashx',\n            'con',\n            'rhtml',\n            'alx',\n            'opml',\n            'web',\n            'chat',\n            'csr',\n            'do',\n            'sht',\n            'asa',\n            'cha',\n            'h5p',\n            'qf',\n            'olp',\n            'hyperesources',\n            'sparkle',\n            'razor',\n            'php4',\n            'cms',\n            'mml',\n            'jnlp',\n            'har',\n            'br',\n            'webloc',\n            'srf',\n            'cer',\n            'uhtml',\n            'pptmhtml',\n            'phtml',\n            'xbel',\n            'cfm',\n            'fwtemplateb',\n            'jspx',\n            'jsp',\n            'xfdl',\n            'zhtml',\n            'stml',\n            'jsonl',\n            'maff',\n            'dbm',\n            'aex',\n            'crl',\n            'mht',\n            'wml',\n            'sass',\n            'xht',\n            'awm',\n            'page',\n            'hdml',\n            'webmanifest',\n            'itms',\n            'sitemap',\n            'shtm',\n            'wpp',\n            'jss',\n            'oth',\n            'ucf',\n            'prf',\n            'freeway',\n            'edge',\n            'iqy',\n            'vrml',\n            'mvc',\n            'wdgt',\n            'discomap',\n            'psp',\n            'hxs',\n            'adr',\n            'hype',\n            'csp',\n            'xhtml',\n            'webarchive',\n            'qbo',\n            'jhtml',\n            'svc',\n            'phtm',\n            'rw3',\n            'tpl',\n            'stl',\n            'wbxml',\n            'p7',\n            'ndjson',\n            'ognc',\n            'fwtb',\n            'muse',\n            'vbd',\n            'sites',\n            'rt',\n            'esproj',\n            'private',\n            'srl',\n            'zhtml',\n            'vbhtml',\n            'hypetemplate',\n            'obml15',\n            'hypesymbol',\n            'pub',\n            'ece',\n            'mspx',\n            'docmhtml',\n            'xws',\n            'wgp',\n            'tvpi',\n            'woa',\n            'asmx',\n            'xbl',\n            'webhistory',\n            'idc',\n            'jws',\n            'lbc',\n            'att',\n            'tvvi',\n            'zvz',\n            'php3',\n            'webarchivexml',\n            'widget',\n            'swz',\n            'qrm',\n            'bwp',\n            'atom',\n            'cdf',\n            'map',\n            'hdm',\n            'php5',\n            'rwsw',\n            'wgt',\n            'nod',\n            'rflw',\n            'htx',\n            'mvr',\n            'an',\n            'rwp',\n            'lasso',\n            'vlp',\n            'stp',\n            'nxg',\n            'faces',\n            'kcmsf',\n            'ptw',\n            'less',\n            'saveddeck',\n            'ccbjs',\n            'wn',\n            'ppthtml',\n            'jcz',\n            'jvs',\n            'rwtheme',\n            'jst',\n            'mapx',\n            'cpg',\n            'wpx',\n            'qbx',\n            'suck',\n            'iwdgt',\n            'public',\n            'cphd',\n            'moz',\n            'zfo',\n            'stm',\n            'fcgi',\n            'itpc',\n            'cfml'\n        );\n\n\n        return $dangerous;\n    }\n\n\n    public function is_dangerous_file($file_name)\n    {\n        $dangerous = $this->get_dangerous_files_extentions();\n        $is_ext = get_file_extension($file_name);\n        $is_ext = strtolower($is_ext);\n\n        if (in_array($is_ext, $dangerous)) {\n            return true;\n        }\n\n    }\n\n    public function is_allowed_file($fileName)\n    {\n        $allowedImages = $this->get_allowed_files_extensions_for_upload('images');\n        $allowedVideos = $this->get_allowed_files_extensions_for_upload('videos');\n        $allowedAudios = $this->get_allowed_files_extensions_for_upload('audios');\n        $allowedFiles = $this->get_allowed_files_extensions_for_upload('files');\n        $allowedDocuments = $this->get_allowed_files_extensions_for_upload('documents');\n        $allowedArchives = $this->get_allowed_files_extensions_for_upload('archives');\n\n        $allowed = array_merge_recursive($allowedImages,$allowedVideos,$allowedAudios,$allowedFiles,$allowedDocuments,$allowedArchives);\n\n        $isExt = get_file_extension($fileName);\n        $isExt = strtolower($isExt);\n\n        if (in_array($isExt, $allowed)) {\n            return true;\n        }\n\n        return false;\n    }\n\n\n\n    function get_allowed_files_extensions_for_upload($fileTypes = 'images')\n    {\n\n        $are_allowed = '';\n        switch ($fileTypes) {\n\n            case 'img':\n            case 'image':\n            case 'images':\n                $are_allowed .= ',png,gif,jpg,jpeg,tiff,bmp,svg,webp,ico';\n                break;\n            case 'audio':\n            case 'audios':\n                $are_allowed .= ',mp3,mp4,ogg,wav,flac';\n                break;\n            case 'video':\n            case 'videos':\n                $are_allowed .= ',avi,asf,mpg,mpeg,mp4,flv,mkv,webm,ogg,ogv,3gp,3g2,wma,mov,wmv';\n                break;\n            case 'file':\n            case 'files':\n                $are_allowed .= ',doc,docx,pdf,html,js,css,htm,rtf,txt,zip,gzip,rar,cad,xml,psd,xlsx,csv,7z';\n                break;\n            case 'documents':\n            case 'doc':\n                $are_allowed .= ',doc,docx,pdf,log,msg,odt,pages,rtf,tex,txt,wpd,wps,pps,ppt,pptx,xml,htm,html,xlr,xls,xlsx';\n                break;\n            case 'archives':\n            case 'arc':\n            case 'arch':\n                $are_allowed .= ',zip,zipx,gzip,rar,gz,7z,cbr,tar.gz';\n                break;\n            case 'all':\n                $are_allowed .= ',*';\n                break;\n            case '*':\n                $are_allowed .= ',*';\n                break;\n            default:\n                $are_allowed .= ',' . $fileTypes;\n        }\n\n        if($are_allowed){\n            $are_allowed = explode(',',$are_allowed);\n            array_unique($are_allowed);\n            $are_allowed = array_filter($are_allowed);\n            $are_allowed = implode(',', $are_allowed);\n        }\n\n        return $are_allowed;\n    }\n}\n"], "filenames": ["src/MicroweberPackages/App/functions/plupload.php", "src/MicroweberPackages/Utils/System/Files.php"], "buggy_code_start_loc": [59, 1023], "buggy_code_end_loc": [62, 1127], "fixing_code_start_loc": [59, 1023], "fixing_code_end_loc": [62, 1153], "type": "CWE-79", "message": "File upload filter bypass leading to stored XSS in GitHub repository microweber/microweber prior to 1.2.12.", "other": {"cve": {"id": "CVE-2022-0930", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-12T14:15:07.960", "lastModified": "2022-03-18T19:18:43.827", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "File upload filter bypass leading to stored XSS in GitHub repository microweber/microweber prior to 1.2.12."}, {"lang": "es", "value": "Una omisi\u00f3n del filtro de subida de archivos conllevando a un ataque de tipo XSS almacenado en el repositorio de GitHub microweber/microweber versiones anteriores a 1.2.12"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.12", "matchCriteriaId": "D2D0BDAC-476F-4A5C-98AE-71B23E086168"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/33eb4cc0f80c1f86388c1862a8aee1061fa5d72e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d184ce19-9608-42f1-bc3d-06ece2d9a993", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/33eb4cc0f80c1f86388c1862a8aee1061fa5d72e"}}