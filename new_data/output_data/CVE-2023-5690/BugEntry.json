{"buggy_code": ["\"\"\"Custom tags for Core application.\"\"\"\n\nimport os\nimport re\nfrom functools import reduce\n\nimport pkg_resources\n\nfrom django import template\nfrom django.conf import settings\nfrom django.contrib.sessions.models import Session\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\nfrom django.utils import timezone\nfrom django.utils.encoding import smart_str\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import get_language, gettext as _\n\nfrom .. import models\nfrom .. import signals\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef core_menu(selection, user):\n    \"\"\"Build the top level menu.\"\"\"\n    entries = signals.extra_admin_menu_entries.send(\n        sender=\"core_menu\", location=\"top_menu\", user=user)\n    entries = reduce(lambda a, b: a + b, [entry[1] for entry in entries])\n    if user.is_superuser:\n        entries += [\n            {\"name\": \"settings\",\n             \"label\": _(\"Modoboa\"),\n             \"url\": reverse(\"core:index\")}\n        ]\n    if not len(entries):\n        return \"\"\n    return render_to_string(\"common/menulist.html\", {\n        \"entries\": entries,\n        \"selection\": selection,\n        \"user\": user}\n    )\n\n\n@register.simple_tag\ndef extensions_menu(selection, user):\n    menu = signals.extra_user_menu_entries.send(\n        sender=\"core_menu\", location=\"top_menu\", user=user)\n    menu = reduce(lambda a, b: a + b, [entry[1] for entry in menu])\n    return render_to_string(\"common/menulist.html\", {\n        \"selection\": selection, \"entries\": menu, \"user\": user\n    })\n\n\n@register.simple_tag\ndef admin_menu(selection, user):\n    entries = [\n        {\"name\": \"info\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"info/\",\n         \"label\": _(\"Information\")},\n        {\"name\": \"logs\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"logs/?sort_order=-date_created\",\n         \"label\": _(\"Logs\")},\n        {\"name\": \"parameters\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"parameters/\",\n         \"img\": \"\",\n         \"label\": _(\"Parameters\")},\n    ]\n    return render_to_string(\"common/menu.html\", {\n        \"entries\": entries,\n        \"css\": \"nav nav-sidebar\",\n        \"selection\": selection,\n        \"user\": user\n    })\n\n\n@register.simple_tag\ndef user_menu(user, selection):\n    entries = [\n        {\"name\": \"user\",\n         \"img\": \"fa fa-user\",\n         \"label\": user.fullname,\n         \"menu\": [\n                {\"name\": \"settings\",\n                 \"img\": \"fa fa-list\",\n                 \"label\": _(\"Settings\"),\n                 \"url\": reverse(\"core:user_index\")}\n         ]}\n    ]\n\n    extra_entries = signals.extra_user_menu_entries.send(\n        sender=\"user_menu\", location=\"options_menu\", user=user)\n    extra_entries = reduce(\n        lambda a, b: a + b, [entry[1] for entry in extra_entries])\n    entries[0][\"menu\"] += (\n        extra_entries + [{\"name\": \"logout\",\n                          \"url\": reverse(\"core:logout\"),\n                          \"label\": _(\"Logout\"),\n                          \"img\": \"fa fa-sign-out\"}]\n    )\n    return render_to_string(\"common/menulist.html\", {\n        \"selection\": selection, \"entries\": entries, \"user\": user\n    })\n\n\n@register.simple_tag\ndef uprefs_menu(selection, user):\n    entries = [\n        {\"name\": \"profile\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"profile/\",\n         \"label\": _(\"Profile\")},\n        {\"name\": \"preferences\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"preferences/\",\n         \"label\": _(\"Preferences\")},\n        {\"name\": \"security\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"security/\",\n         \"label\": _(\"Security\")},\n    ]\n    if user.is_superuser:\n        entries.append({\n            \"name\": \"api\",\n            \"class\": \"ajaxnav\",\n            \"url\": \"api/\",\n            \"label\": _(\"API\"),\n        })\n    extra_entries = signals.extra_user_menu_entries.send(\n        sender=\"user_menu\", location=\"uprefs_menu\", user=user)\n    extra_entries = reduce(\n        lambda a, b: a + b, [entry[1] for entry in extra_entries])\n    entries += extra_entries\n    entries = sorted(entries, key=lambda e: e[\"label\"])\n    return render_to_string(\"common/menu.html\", {\n        \"entries\": entries,\n        \"css\": \"nav nav-sidebar\",\n        \"selection\": selection,\n        \"user\": user\n    })\n\n\n@register.filter\ndef colorize_level(level):\n    \"\"\"A simple filter a text using a boostrap color.\"\"\"\n    classes = {\n        \"INFO\": \"text-info\",\n        \"WARNING\": \"text-warning\",\n        \"CRITICAL\": \"text-danger\"\n    }\n    if level not in classes:\n        return level\n    return \"<p class='%s'>%s</p>\" % (classes[level], level)\n\n\n@register.filter\ndef tohtml(message):\n    \"\"\"Simple tag to format a text using HTML.\"\"\"\n    return re.sub(r\"'(.*?)'\", r\"<strong>\\g<1></strong>\", message)\n\n\n@register.simple_tag\ndef visirule(field):\n    if not hasattr(field, \"form\") or \\\n            not hasattr(field.form, \"visirules\") or \\\n            field.html_name not in field.form.visirules:\n        return \"\"\n    rule = field.form.visirules[field.html_name]\n    return mark_safe(\n        \" data-visibility-field='{}' data-visibility-value='{}' \"\n        .format(rule[\"field\"], rule[\"value\"]))\n\n\n@register.simple_tag\ndef get_version():\n    return pkg_resources.get_distribution(\"modoboa\").version\n\n\nclass ConnectedUsers(template.Node):\n\n    def __init__(self, varname):\n        self.varname = varname\n\n    def render(self, context):\n        sessions = Session.objects.filter(expire_date__gte=timezone.now())\n        uid_list = []\n        # Build a list of user ids from that query\n        for session in sessions:\n            data = session.get_decoded()\n            uid = data.get(\"_auth_user_id\", None)\n            if uid:\n                uid_list.append(uid)\n\n        # Query all logged in users based on id list\n        context[self.varname] = (\n            models.User.objects.filter(pk__in=uid_list).distinct())\n        return \"\"\n\n\n@register.tag\ndef connected_users(parser, token):\n    try:\n        tag, a, varname = token.split_contents()\n    except ValueError:\n        raise template.TemplateSyntaxError(\n            \"connected_users usage: {% connected_users as users %}\"\n        )\n    return ConnectedUsers(varname)\n\n\n@register.simple_tag\ndef get_modoboa_logo():\n    try:\n        logo = settings.MODOBOA_CUSTOM_LOGO\n    except AttributeError:\n        logo = None\n    if logo is None:\n        return os.path.join(settings.STATIC_URL, \"css/modoboa.png\")\n    return logo\n\n\n@register.simple_tag\ndef load_optionalmenu(user):\n    menu = signals.extra_user_menu_entries.send(\n        sender=\"user_menu\", location=\"top_menu_middle\", user=user)\n    menu = reduce(\n        lambda a, b: a + b, [entry[1] for entry in menu])\n    return template.loader.render_to_string(\n        \"common/menulist.html\",\n        {\"entries\": menu, \"user\": user}\n    )\n\n\n@register.simple_tag\ndef display_messages(msgs):\n    text = \"\"\n    level = \"info\"\n    for m in msgs:\n        level = m.tags\n        text += smart_str(m) + \"\\\\\\n\"\n\n    if level == \"info\":\n        level = \"success\"\n        timeout = \"2000\"\n    else:\n        timeout = \"undefined\"\n\n    return mark_safe(\"\"\"\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        $('body').notify('%s', '%s', %s);\n    });\n</script>\n\"\"\" % (level, text, timeout))\n\n\n@register.filter\ndef currencyfmt(amount):\n    \"\"\"Simple temp. filter to replace babel.\"\"\"\n    lang = get_language()\n    if lang == \"fr\":\n        return u\"{} \u20ac\".format(amount)\n    return u\"\u20ac{}\".format(amount)\n", "\"\"\"Core authentication views.\"\"\"\n\nimport logging\n\nimport oath\n\nfrom django.conf import settings\nfrom django.http import (\n    HttpResponse, HttpResponseRedirect, Http404, JsonResponse)\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\nfrom django.utils import translation\nfrom django.utils.encoding import force_bytes\nfrom django.utils.html import escape\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.utils.translation import gettext as _\nfrom django.views import generic\nfrom django.views.decorators.cache import never_cache\n\nfrom django.contrib.auth import (\n    authenticate, login, logout, views as auth_views\n)\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.contrib.auth.tokens import default_token_generator\n\nimport django_otp\n\nfrom modoboa.core import forms\nfrom modoboa.core.password_hashers import get_password_hasher\nfrom modoboa.lib import cryptutils\nfrom modoboa.lib.views import UserFormKwargsMixin\nfrom modoboa.parameters import tools as param_tools\n\nfrom .. import models\nfrom .. import sms_backends\nfrom .. import signals\nfrom .base import find_nextlocation\n\nlogger = logging.getLogger(\"modoboa.auth\")\n\n\ndef dologin(request):\n    \"\"\"Try to authenticate.\"\"\"\n    error = None\n    if request.method == \"POST\":\n        form = forms.LoginForm(request.POST)\n        if form.is_valid():\n            logger = logging.getLogger(\"modoboa.auth\")\n            user = authenticate(username=form.cleaned_data[\"username\"],\n                                password=form.cleaned_data[\"password\"])\n            if user and user.is_active:\n                condition = (\n                    user.is_local and\n                    param_tools.get_global_parameter(\n                        \"update_scheme\", raise_exception=False)\n                )\n                if condition:\n                    # check if password scheme is correct\n                    scheme = param_tools.get_global_parameter(\n                        \"password_scheme\", raise_exception=False)\n                    # use SHA512CRYPT as default fallback\n                    if scheme is None:\n                        pwhash = get_password_hasher('sha512crypt')()\n                    else:\n                        pwhash = get_password_hasher(scheme)()\n                    if not user.password.startswith(pwhash.scheme):\n                        logging.info(\n                            _(\"Password scheme mismatch. Updating %s password\"),\n                            user.username\n                        )\n                        user.set_password(form.cleaned_data[\"password\"])\n                        user.save()\n                    if pwhash.needs_rehash(user.password):\n                        logging.info(\n                            _(\"Password hash parameter missmatch. \"\n                              \"Updating %s password\"),\n                            user.username\n                        )\n                        user.set_password(form.cleaned_data[\"password\"])\n                        user.save()\n\n                login(request, user)\n                if not form.cleaned_data[\"rememberme\"]:\n                    request.session.set_expiry(0)\n\n                translation.activate(request.user.language)\n\n                logger.info(\n                    _(\"User '%s' successfully logged in\") % user.username\n                )\n                signals.user_login.send(\n                    sender=\"dologin\",\n                    username=form.cleaned_data[\"username\"],\n                    password=form.cleaned_data[\"password\"])\n                response = HttpResponseRedirect(find_nextlocation(request, user))\n                response.set_cookie(settings.LANGUAGE_COOKIE_NAME, request.user.language)\n                return response\n\n            error = _(\n                \"Your username and password didn't match. Please try again.\")\n            logger.warning(\n                \"Failed connection attempt from '%(addr)s' as user '%(user)s'\"\n                % {\"addr\": request.META[\"REMOTE_ADDR\"],\n                   \"user\": escape(form.cleaned_data[\"username\"])}\n            )\n\n        nextlocation = request.POST.get(\"next\", \"\")\n        httpcode = 401\n    else:\n        form = forms.LoginForm()\n        nextlocation = request.GET.get(\"next\", \"\")\n        httpcode = 200\n\n    announcements = signals.get_announcements.send(\n        sender=\"login\", location=\"loginpage\")\n    announcements = [announcement[1] for announcement in announcements]\n    return HttpResponse(\n        render_to_string(\n            \"registration/login.html\", {\n                \"form\": form, \"error\": error, \"next\": nextlocation,\n                \"annoucements\": announcements},\n            request),\n        status=httpcode)\n\n\ndologin = never_cache(dologin)\n\n\ndef dologout(request):\n    \"\"\"Logout current user.\"\"\"\n    if not request.user.is_anonymous:\n        signals.user_logout.send(sender=\"dologout\", request=request)\n        logger = logging.getLogger(\"modoboa.auth\")\n        logger.info(\n            _(\"User '{}' successfully logged out\").format(\n                request.user.username))\n        logout(request)\n    return HttpResponseRedirect(reverse(\"core:login\"))\n\n\nclass PasswordResetView(auth_views.PasswordResetView):\n    \"\"\"Custom view to override form.\"\"\"\n\n    form_class = forms.PasswordResetForm\n\n    def setup(self, request, *args, **kwargs):\n        super().setup(request, *args, **kwargs)\n        self.from_email = request.localconfig.parameters.get_value(\n            \"sender_address\"\n        )\n\n    def get_context_data(self, **kwargs):\n        \"\"\"Include help text.\"\"\"\n        context = super().get_context_data(**kwargs)\n        context[\"announcement\"] = (\n            self.request.localconfig.parameters\n            .get_value(\"password_recovery_msg\")\n        )\n        return context\n\n    def form_valid(self, form):\n        \"\"\"Redirect to code verification page if needed.\"\"\"\n        sms_password_recovery = (\n            self.request.localconfig.parameters\n            .get_value(\"sms_password_recovery\")\n        )\n        if not sms_password_recovery:\n            return super().form_valid(form)\n        user = models.User._default_manager.filter(\n            email=form.cleaned_data[\"email\"], phone_number__isnull=False\n        ).first()\n        if not user:\n            # Fallback to email\n            return super().form_valid(form)\n        backend = sms_backends.get_active_backend(\n            self.request.localconfig.parameters)\n        secret = cryptutils.random_hex_key(20)\n        code = oath.totp(secret)\n        text = _(\n            \"Please use the following code to recover your Modoboa password: {}\"\n            .format(code)\n        )\n        if not backend.send(text, [str(user.phone_number)]):\n            return super().form_valid(form)\n        self.request.session[\"user_pk\"] = user.pk\n        self.request.session[\"totp_secret\"] = secret\n        return HttpResponseRedirect(reverse(\"password_reset_confirm_code\"))\n\n\nclass VerifySMSCodeView(generic.FormView):\n    \"\"\"View to verify a code received by SMS.\"\"\"\n\n    form_class = forms.VerifySMSCodeForm\n    template_name = \"registration/password_reset_confirm_code.html\"\n\n    def get_form_kwargs(self):\n        \"\"\"Include totp secret in kwargs.\"\"\"\n        kwargs = super().get_form_kwargs()\n        try:\n            kwargs.update({\"totp_secret\": self.request.session[\"totp_secret\"]})\n        except KeyError:\n            raise Http404\n        return kwargs\n\n    def form_valid(self, form):\n        \"\"\"Redirect to reset password form.\"\"\"\n        user = models.User.objects.get(pk=self.request.session.pop(\"user_pk\"))\n        self.request.session.pop(\"totp_secret\")\n        token = default_token_generator.make_token(user)\n        uid = urlsafe_base64_encode(force_bytes(user.pk))\n        url = reverse(\"password_reset_confirm\", args=[uid, token])\n        return HttpResponseRedirect(url)\n\n\nclass ResendSMSCodeView(generic.View):\n    \"\"\"A view to resend validation code.\"\"\"\n\n    def get(self, request, *args, **kwargs):\n        sms_password_recovery = (\n            self.request.localconfig.parameters\n            .get_value(\"sms_password_recovery\")\n        )\n        if not sms_password_recovery:\n            raise Http404\n        try:\n            user = models.User._default_manager.get(\n                pk=self.request.session[\"user_pk\"])\n        except KeyError:\n            raise Http404\n        backend = sms_backends.get_active_backend(\n            self.request.localconfig.parameters)\n        secret = cryptutils.random_hex_key(20)\n        code = oath.totp(secret)\n        text = _(\n            \"Please use the following code to recover your Modoboa password: {}\"\n            .format(code)\n        )\n        if not backend.send(text, [user.phone_number]):\n            raise Http404\n        self.request.session[\"totp_secret\"] = secret\n        return JsonResponse({\"status\": \"ok\"})\n\n\nclass TwoFactorCodeVerifyView(LoginRequiredMixin,\n                              UserFormKwargsMixin,\n                              generic.FormView):\n    \"\"\"View to verify a 2FA code after login.\"\"\"\n\n    form_class = forms.Verify2FACodeForm\n    template_name = \"registration/twofactor_code_verify.html\"\n\n    def form_valid(self, form):\n        \"\"\"Login user.\"\"\"\n        django_otp.login(self.request, form.cleaned_data[\"tfa_code\"])\n        return HttpResponseRedirect(\n            find_nextlocation(self.request, self.request.user)\n        )\n", "\"\"\"Custom template tags.\"\"\"\n\nfrom datetime import datetime\n\nfrom django import template\nfrom django.template import Context, Template\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import gettext as _\n\nfrom modoboa.core import signals as core_signals\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef join(items, sep=\",\"):\n    res = \"\"\n    for k, v in list(items.items()):\n        if res != \"\":\n            res += sep\n        res += \"%s : '%s'\" % (k, v)\n    return res\n\n\n@register.simple_tag\ndef tolist(values):\n    return mark_safe(\"[%s]\" % \",\".join(['\"%s\"' % v for v in values]))\n\n\n@register.simple_tag\ndef alert(msg, typ):\n    t = Template(\"\"\"<div class=\"alert alert-{{ type }}\" role=\"alert\">\n<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n{{ msg }}\n</div>\"\"\")  # NOQA:E501\n    return t.render(Context({\"type\": typ, \"msg\": msg}))\n\n\n@register.simple_tag\ndef render_link(linkdef, mdclass=\"\"):\n    t = Template(\"\"\"<a href=\"{{ link.url }}\" name=\"{{ link.name }}\" title=\"{{ link.title }}\"\n{% if link.modal %}data-toggle=\"ajaxmodal{% if link.autowidth %}-autowidth{% endif %}\"{% endif %}\n{% if link.modalcb %}modalcb=\"{{ link.modalcb }}\"{% endif %}\n{% if link.closecb %}closecb=\"{{ link.closecb }}\"{% endif %}\nclass=\"{{ mdclass }}{% if link.class %} {{ link.class }}{% endif %}\"\n{% if link.confirm %} onclick=\"return confirm('{{ link.confirm }}')\"{% endif %}\n{% for attr, value in link.extra_attributes.items %} {{ attr }}=\"{{ value }}\"{% endfor %}\n>\n{% if link.img %}<i class=\"{{ link.img }}\"></i>{% endif %}\n{{ link.label }}</a>\"\"\")  # NOQA:E501\n    return t.render(Context({\"link\": linkdef, \"mdclass\": mdclass}))\n\n\n@register.simple_tag\ndef progress_color(value):\n    value = int(value)\n    if value < 50:\n        return \"progress-bar progress-bar-info\"\n    if value < 80:\n        return \"progress-bar progress-bar-warning\"\n    return \"progress-bar progress-bar-danger\"\n\n\n@register.filter\ndef fromunix(value):\n    return datetime.fromtimestamp(int(value))\n\n\n@register.simple_tag\ndef render_tags(tags):\n    t = Template(\"\"\"{% for tag in tags %}\n<span class=\"label label-{% if tag.color %}{{ tag.color }}{% else %}default{% endif %}\">\n  <a href=\"#\" class=\"filter {{ tag.type }}\" name=\"{{ tag.name }}\">{{ tag.label }}</a>\n</span>\n{% endfor %}\n\"\"\")  # NOQA:E501\n    return t.render(Context({\"tags\": tags}))\n\n\n@register.simple_tag\ndef extra_static_content(caller, st_type, user):\n    \"\"\"Get extra static content from extensions.\n\n    :param str caller: the application (location) responsible for the call\n    :param str st_type: content type (css or js)\n    :param ``User`` user: connected user\n    \"\"\"\n    tpl = template.Template(\n        \"{% for sc in static_content %}{{ sc|safe }}{% endfor %}\"\n    )\n    static_content = core_signals.extra_static_content.send(\n        sender=\"extra_static_content\",\n        caller=caller, st_type=st_type, user=user)\n    static_content = [result[1] for result in static_content]\n    return tpl.render(\n        template.Context({\"static_content\": static_content})\n    )\n\n\n@register.filter(name=\"localize_header_name\")\ndef localize_header_name(headername):\n    \"\"\" Localizes the header names \"\"\"\n    names = {\n        \"From\": _(\"From\"),\n        \"To\": _(\"To\"),\n        \"Date\": _(\"Date\"),\n        \"Subject\": _(\"Subject\")\n    }\n    return names.get(headername, headername)\n", "/* ------- Media ------- */\n\n.sidebar { \n    display: none;\n}\n\n@media (max-width: 440px) {\n\n    .navbar .col-xs-8 {\n        padding-right: 0;\n    }\n}\n\n@media (max-width: 768px) {\n\n     tr th#tags,\n     td[name=\"tags\"] {\n         display: none;\n     }\n\n     /* button.navbar-toggle[data-target=\"#navigate-navbar-collapse\"]{ */\n     /*     margin-left: 20px; */\n     /* } */\n\n     /* .container > .navbar-header, .container-fluid > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-collapse { */\n     /*     margin-left: 0; */\n     /*     margin-right: 0; */\n     /* } */\n\n}\n\n@media (max-width: 1198px) {\n\n     .display-up-1198{\n         display: none;\n     }\n     .dropdown{\n         margin:0px;\n     }\n     .btn-group{\n         margin:0px;\n     }\n}\n\n@media (min-width: 768px) {\n\n    .sidebar {\n        position: fixed !important;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        width: 250px;\n        z-index: 1000;\n        display: block;\n        padding: 15px 0;\n        overflow: auto;\n        background-color: #f5f5f5;\n        border-right: 1px solid #ddd;\n    }\n\n    .main {\n        position: relative;\n        margin-left: 250px;\n    }\n\n}\n\n /* --------- general --------- */\n\n.container-fluid { \n    padding-left: 0;\n    padding-right: 0;\n}\n\n/* Form */\n\n#uprefs_content input[type=\"checkbox\"] {\n    margin-top: 10px;\n}\n/* Buttons */\n\n.navbar .btn-link:hover,\n.navbar .btn-link:focus{\n    text-decoration: none;\n}\n\n.well .nav > li > a {\n    padding: 2px 5px;\n}\n\n/* Colapse Nav */\n\n.navbar-inverse .navbar-toggle span {\n    color: white;\n}\n\n.navbar-toggle {\n    margin-top: 4px;\n    margin-bottom: 4px;\n}\n\n\n/* Global */\nbody { \n    padding-top: 50px;\n    padding-bottom: 50px;\n}\n\nh5 {\n    font-size: 15px;\n    font-weight: bold;\n}\n\nlabel {\n    font-weight: normal;\n}\n\n.modals div.input-group{\n    margin-bottom:8px;\n}\n\n.form-horizontal .param-label {\n    float: left;\n    padding-top: 5px;\n    text-align: left;\n    width: 250px;\n    margin-left: 20px;\n}\n\n.form-horizontal .input-group {\n    margin-bottom: 8px;\n}\n\n.dropdown{\n    margin-right: 20px;\n}\n\n.dropdown-menu .radio {\n    padding: 3px 15px;\n}\n\n.no-margin {\n    margin: 0 !important;\n}\n\n.buttons_list .bset {\n    display: none;\n}\n\n.buttons_list .active {\n    display: inline;\n}\n\n.tr-selected {\n    background-color: #F5F5F5;\n}\n\n.hidden {\n    display: none;\n}\n\n.label a {\n    color: #FFFFFF;\n    text-decoration: none;\n}\n\n.table-fixed {\n    table-layout: fixed;\n}\n\n\n\n/* --------- main page --------- */\n\n\n/* Top navbar section */\n\n.top-navbar{\n    border-radius: 0;\n}\n\n.display-less-1198{\n    display: none;\n}\n\n/* div#navigate-navbar-collapse.navbar-collapse { */\n/*     z-index: 9999; */\n/* } */\nhtml body div.navbar div.container-fluid div#navigate-navbar-collapse.collapse ul.nav li.dropdown a.dropdown-toggle{\n    color: white;\n}\n\n/* left sidebar */\n\n/* Sidebar navigation */\n.nav-sidebar {\n    /*margin-right: -21px;\n    margin-left: -20px;*/\n}\n.nav-sidebar li > a {\n    /*padding-right: 20px;\n    padding-left: 20px;*/\n}\n\n.nav-sidebar > li > a:hover { \n    background-color: #eee;\n}\n\n.nav-sidebar .active > a,\n.nav-sidebar .active > a:hover,\n.nav-sidebar .active > a:focus {\n    color: #fff;\n    background-color: #428bca;\n}\n\n.nav-sidebar > .nav-header {\n    color: #959595;\n    font-size: 12px;\n    font-weight: 700;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    padding-left: 10px;\n    margin-top: 10px;\n    margin-bottom: 5px;\n}\n\n /* Action buttons */\n\n .action-buttons {\n     margin-bottom: 4px;\n }\n\n.main { \n    padding: 20px 15px;\n}\n\n /* listing */\n\n/* Bottom navBar*/\n\n.nav-bottom {\n     margin-top: 80px;\n}\n\n#bottom-bar-middle {\n    text-align: center;\n}\n\n#bottom-bar-right{\n    text-align: right;\n}\n\n.navbar-text {\n    color: #999999 !important;\n    float:none;\n}\n\n/* Tables */\ntable th#actions {\n    text-align: right;\n}\n\ntable td[name=\"actions\"] {\n    text-align: right;\n}\n\n/* --------- specific pages --------- */\n\n/* identities tables */\n\n.muted a:hover{\n    color: black;\n    text-decoration: none;\n}\n\n.label {\n    margin-left: 1px;\n}\n\n\n /* modals */\n\n.modal-body .nav-pills { \n    margin-bottom: 15px;\n}\n\n /* settings */\n\n .container-fluid #uprefs_content .form-horizontal .form-actions {\n     margin-right: 16px;\n }\n\n /* Wizard */\n#wizard .carousel-inner {\n    overflow: visible;\n}\n\n/* Dashboard */\n.slogan {\n    padding-top: 15px;\n}\n", "{% load i18n lib_tags %}\n{% for entry in entries %}\n  {% if entry.separator %}\n  <li class=\"divider\">&nbsp;</li>\n  {% else %}\n    {% if entry.menu %}\n  <li class=\"dropdown {{ entry.class }}{% if selection == entry.name %} active{% endif %}\"> \n    <a class=\"dropdown-toggle\" name=\"{{ entry.name }}\" data-toggle=\"dropdown\" href=\"{{ entry.url }}\">\n      {% if entry.img %}<span class=\"{{ entry.img }}\"></span> {% endif %}{{ entry.label }}\n    </a>\n    <ul class=\"dropdown-menu\" {% if entry.width %}style=\"width: {{ entry.width }}px\"{% endif %}>\n      {% for sentry in entry.menu %}\n      <li>{% render_link sentry %}</li>\n      {% endfor %}\n    </ul>\n  </li>\n    {% else %}\n  <li class=\"{% if selection == entry.name %}active{% endif %}\">\n    {% render_link entry %}\n  </li>\n    {% endif %}\n  {% endif %}\n{% endfor %}\n", "<!DOCTYPE html>\n{% load static %}\n{% load i18n core_tags lib_tags %}\n<html lang=\"{{ LANGUAGE_CODE }}\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>{% block pagetitle %}{% endblock %}</title>\n    <link rel=\"icon\" type=\"image/png\" href=\"{% static 'css/logo-icon.png' %}\" />\n    <link rel=\"stylesheet\" href=\"{% static 'font-awesome/css/font-awesome.min.css' %}\">\n    <link rel=\"stylesheet\" href=\"{% static 'bootstrap/dist/css/bootstrap.min.css' %}\" />\n    <link rel=\"stylesheet\" href=\"{% static 'eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css' %}\" />\n    <link rel=\"stylesheet\" href=\"{% static 'selectize/dist/css/selectize.bootstrap3.css' %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/custom.css' %}\" />\n    {% block extra_css %}{% endblock %}\n  </head>\n\n  <body>\n    <div class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container-fluid\">\n\n          <button class=\"navbar-toggle collapsed pull-right\" data-target=\"#topmenu\" data-toggle=\"collapse\" type=\"button\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n\n          <button class=\"navbar-toggle collapsed pull-left\" data-target=\"#leftcol\" data-toggle=\"collapse\" type=\"button\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n\n\n        <div id=\"topmenu\" class=\"collapse navbar-collapse\">\n          <ul class=\"nav navbar-nav\">\n            {% if user.is_admin %}\n              <li{% if selection == \"dashboard\" %} class=\"active\"{% endif %}>\n                <a name=\"dashboard\" href=\"{% url 'core:dashboard' %}\">\n                  <span class=\"fa fa-home fa-lg\"></span>\n                </a>\n              </li>\n            {% endif %}\n            {% if selection %}\n              {% extensions_menu selection user %}{% core_menu selection user %}\n            {% else %}\n              {% extensions_menu \"\" user %}{% core_menu \"\" user %}\n            {% endif %}\n            {% load_optionalmenu user %}\n            <li class=\"divider\"></li>\n            {% if user.is_admin %}\n              <li>\n                <a name=\"newadmin\" href=\"/{{ new_admin }}\" target=\"_blank\">\n                  {% trans \"New admin\" %}\n                </a>\n              </li>\n            {% endif %}\n          </ul>\n          <ul class=\"nav navbar-nav navbar-right\">\n            {% if selection %}{% user_menu user selection %}{% else %}{% user_menu user \"\" %}{% endif %}\n          </ul>\n          {% include \"common/top_notifications.html\" %}\n        </div>\n      </div>\n    </div>\n\n    {% block content %}{% endblock %}\n\n    <!-- Javascript -->\n    <script src=\"{% static 'jquery/jquery.min.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'bootstrap/dist/js/bootstrap.min.js' %}\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\" src=\"{% static 'moment/min/moment.min.js' %}\"></script>\n    {% if LANGUAGE_CODE != \"en\" %}<script src=\"{{ STATIC_URL }}moment/locale/{{ LANGUAGE_CODE }}.js\" type=\"text/javascript\"></script>{% endif %}\n    <script src=\"{% static 'eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'selectize/dist/js/standalone/selectize.min.js' %}\" type=\"text/javascript\"></script>\n    {% if TEMPLATE_DEBUG %}\n      <script src=\"//maxcdn.bootstrapcdn.com/bootlint/0.4.0/bootlint.min.js\"></script>\n    {% endif %}\n    <script src=\"{% static 'js/global.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/csrf.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/confirmation.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/notify.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/poller.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/top_notifications.js' %}\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\" src=\"{% url 'javascript-catalog' %}\"></script>\n    <script type=\"text/javascript\">\n      var root_url = \"{% url 'core:root' %}\".replace(/\\/$/, \"\");\n      var top_notifications;\n      var userLang = \"{{ LANGUAGE_CODE }}\";\n\n      set_static_url(\"{{ STATIC_URL }}\");\n      $(document).ready(function() {\n          top_notifications = new TopNotifications({\n              url: \"{% url 'core:top_notifications_check' %}\",\n              interval: {{ notifications_check_interval }}\n          });\n      });\n    </script>\n    {% extra_static_content \"top\" \"js\" user %}\n    {% block extra_js %}{% endblock %}\n  </body>\n</html>\n"], "fixing_code": ["\"\"\"Custom tags for Core application.\"\"\"\n\nimport os\nimport re\nfrom functools import reduce\n\nimport pkg_resources\n\nfrom django import template\nfrom django.conf import settings\nfrom django.contrib.sessions.models import Session\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\nfrom django.utils import timezone\nfrom django.utils.encoding import smart_str\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import get_language, gettext as _\n\nfrom .. import models\nfrom .. import signals\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef core_menu(selection, user):\n    \"\"\"Build the top level menu.\"\"\"\n    entries = signals.extra_admin_menu_entries.send(\n        sender=\"core_menu\", location=\"top_menu\", user=user)\n    entries = reduce(lambda a, b: a + b, [entry[1] for entry in entries])\n    if user.is_superuser:\n        entries += [\n            {\"name\": \"settings\",\n             \"label\": _(\"Modoboa\"),\n             \"url\": reverse(\"core:index\")}\n        ]\n    if not len(entries):\n        return \"\"\n    return render_to_string(\"common/menulist.html\", {\n        \"entries\": entries,\n        \"selection\": selection,\n        \"user\": user}\n    )\n\n\n@register.simple_tag\ndef extensions_menu(selection, user):\n    menu = signals.extra_user_menu_entries.send(\n        sender=\"core_menu\", location=\"top_menu\", user=user)\n    menu = reduce(lambda a, b: a + b, [entry[1] for entry in menu])\n    return render_to_string(\"common/menulist.html\", {\n        \"selection\": selection, \"entries\": menu, \"user\": user\n    })\n\n\n@register.simple_tag\ndef admin_menu(selection, user):\n    entries = [\n        {\"name\": \"info\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"info/\",\n         \"label\": _(\"Information\")},\n        {\"name\": \"logs\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"logs/?sort_order=-date_created\",\n         \"label\": _(\"Logs\")},\n        {\"name\": \"parameters\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"parameters/\",\n         \"img\": \"\",\n         \"label\": _(\"Parameters\")},\n    ]\n    return render_to_string(\"common/menu.html\", {\n        \"entries\": entries,\n        \"css\": \"nav nav-sidebar\",\n        \"selection\": selection,\n        \"user\": user\n    })\n\n\n@register.simple_tag\ndef user_menu(request, selection):\n    entries = [\n        {\"name\": \"user\",\n         \"img\": \"fa fa-user\",\n         \"label\": request.user.fullname,\n         \"menu\": [\n                {\"name\": \"settings\",\n                 \"img\": \"fa fa-list\",\n                 \"label\": _(\"Settings\"),\n                 \"url\": reverse(\"core:user_index\")}\n         ]}\n    ]\n\n    extra_entries = signals.extra_user_menu_entries.send(\n        sender=\"user_menu\", location=\"options_menu\", user=request.user)\n    extra_entries = reduce(\n        lambda a, b: a + b, [entry[1] for entry in extra_entries])\n    entries[0][\"menu\"] += (\n        extra_entries + [{\n            \"name\": \"logout\",\n            \"url\": reverse(\"core:logout\"),\n            \"label\": _(\"Logout\"),\n            \"img\": \"fa fa-sign-out\",\n            \"method\": \"post\"\n        }]\n    )\n    return render_to_string(\"common/menulist.html\", {\n        \"request\": request, \"selection\": selection,\n        \"entries\": entries, \"user\": request.user\n    })\n\n\n@register.simple_tag\ndef uprefs_menu(selection, user):\n    entries = [\n        {\"name\": \"profile\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"profile/\",\n         \"label\": _(\"Profile\")},\n        {\"name\": \"preferences\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"preferences/\",\n         \"label\": _(\"Preferences\")},\n        {\"name\": \"security\",\n         \"class\": \"ajaxnav\",\n         \"url\": \"security/\",\n         \"label\": _(\"Security\")},\n    ]\n    if user.is_superuser:\n        entries.append({\n            \"name\": \"api\",\n            \"class\": \"ajaxnav\",\n            \"url\": \"api/\",\n            \"label\": _(\"API\"),\n        })\n    extra_entries = signals.extra_user_menu_entries.send(\n        sender=\"user_menu\", location=\"uprefs_menu\", user=user)\n    extra_entries = reduce(\n        lambda a, b: a + b, [entry[1] for entry in extra_entries])\n    entries += extra_entries\n    entries = sorted(entries, key=lambda e: e[\"label\"])\n    return render_to_string(\"common/menu.html\", {\n        \"entries\": entries,\n        \"css\": \"nav nav-sidebar\",\n        \"selection\": selection,\n        \"user\": user\n    })\n\n\n@register.filter\ndef colorize_level(level):\n    \"\"\"A simple filter a text using a boostrap color.\"\"\"\n    classes = {\n        \"INFO\": \"text-info\",\n        \"WARNING\": \"text-warning\",\n        \"CRITICAL\": \"text-danger\"\n    }\n    if level not in classes:\n        return level\n    return \"<p class='%s'>%s</p>\" % (classes[level], level)\n\n\n@register.filter\ndef tohtml(message):\n    \"\"\"Simple tag to format a text using HTML.\"\"\"\n    return re.sub(r\"'(.*?)'\", r\"<strong>\\g<1></strong>\", message)\n\n\n@register.simple_tag\ndef visirule(field):\n    if not hasattr(field, \"form\") or \\\n            not hasattr(field.form, \"visirules\") or \\\n            field.html_name not in field.form.visirules:\n        return \"\"\n    rule = field.form.visirules[field.html_name]\n    return mark_safe(\n        \" data-visibility-field='{}' data-visibility-value='{}' \"\n        .format(rule[\"field\"], rule[\"value\"]))\n\n\n@register.simple_tag\ndef get_version():\n    return pkg_resources.get_distribution(\"modoboa\").version\n\n\nclass ConnectedUsers(template.Node):\n\n    def __init__(self, varname):\n        self.varname = varname\n\n    def render(self, context):\n        sessions = Session.objects.filter(expire_date__gte=timezone.now())\n        uid_list = []\n        # Build a list of user ids from that query\n        for session in sessions:\n            data = session.get_decoded()\n            uid = data.get(\"_auth_user_id\", None)\n            if uid:\n                uid_list.append(uid)\n\n        # Query all logged in users based on id list\n        context[self.varname] = (\n            models.User.objects.filter(pk__in=uid_list).distinct())\n        return \"\"\n\n\n@register.tag\ndef connected_users(parser, token):\n    try:\n        tag, a, varname = token.split_contents()\n    except ValueError:\n        raise template.TemplateSyntaxError(\n            \"connected_users usage: {% connected_users as users %}\"\n        )\n    return ConnectedUsers(varname)\n\n\n@register.simple_tag\ndef get_modoboa_logo():\n    try:\n        logo = settings.MODOBOA_CUSTOM_LOGO\n    except AttributeError:\n        logo = None\n    if logo is None:\n        return os.path.join(settings.STATIC_URL, \"css/modoboa.png\")\n    return logo\n\n\n@register.simple_tag\ndef load_optionalmenu(user):\n    menu = signals.extra_user_menu_entries.send(\n        sender=\"user_menu\", location=\"top_menu_middle\", user=user)\n    menu = reduce(\n        lambda a, b: a + b, [entry[1] for entry in menu])\n    return template.loader.render_to_string(\n        \"common/menulist.html\",\n        {\"entries\": menu, \"user\": user}\n    )\n\n\n@register.simple_tag\ndef display_messages(msgs):\n    text = \"\"\n    level = \"info\"\n    for m in msgs:\n        level = m.tags\n        text += smart_str(m) + \"\\\\\\n\"\n\n    if level == \"info\":\n        level = \"success\"\n        timeout = \"2000\"\n    else:\n        timeout = \"undefined\"\n\n    return mark_safe(\"\"\"\n<script type=\"text/javascript\">\n    $(document).ready(function() {\n        $('body').notify('%s', '%s', %s);\n    });\n</script>\n\"\"\" % (level, text, timeout))\n\n\n@register.filter\ndef currencyfmt(amount):\n    \"\"\"Simple temp. filter to replace babel.\"\"\"\n    lang = get_language()\n    if lang == \"fr\":\n        return u\"{} \u20ac\".format(amount)\n    return u\"\u20ac{}\".format(amount)\n", "\"\"\"Core authentication views.\"\"\"\n\nimport logging\n\nimport oath\n\nfrom django.conf import settings\nfrom django.http import (\n    HttpResponse, HttpResponseRedirect, Http404, JsonResponse)\nfrom django.template.loader import render_to_string\nfrom django.urls import reverse\nfrom django.utils import translation\nfrom django.utils.encoding import force_bytes\nfrom django.utils.html import escape\nfrom django.utils.http import urlsafe_base64_encode\nfrom django.utils.translation import gettext as _\nfrom django.views import generic\nfrom django.views.decorators.cache import never_cache\nfrom django.views.decorators.http import require_http_methods\n\nfrom django.contrib.auth import (\n    authenticate, login, logout, views as auth_views\n)\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.contrib.auth.tokens import default_token_generator\n\nimport django_otp\n\nfrom modoboa.core import forms\nfrom modoboa.core.password_hashers import get_password_hasher\nfrom modoboa.lib import cryptutils\nfrom modoboa.lib.views import UserFormKwargsMixin\nfrom modoboa.parameters import tools as param_tools\n\nfrom .. import models\nfrom .. import sms_backends\nfrom .. import signals\nfrom .base import find_nextlocation\n\nlogger = logging.getLogger(\"modoboa.auth\")\n\n\ndef dologin(request):\n    \"\"\"Try to authenticate.\"\"\"\n    error = None\n    if request.method == \"POST\":\n        form = forms.LoginForm(request.POST)\n        if form.is_valid():\n            logger = logging.getLogger(\"modoboa.auth\")\n            user = authenticate(username=form.cleaned_data[\"username\"],\n                                password=form.cleaned_data[\"password\"])\n            if user and user.is_active:\n                condition = (\n                    user.is_local and\n                    param_tools.get_global_parameter(\n                        \"update_scheme\", raise_exception=False)\n                )\n                if condition:\n                    # check if password scheme is correct\n                    scheme = param_tools.get_global_parameter(\n                        \"password_scheme\", raise_exception=False)\n                    # use SHA512CRYPT as default fallback\n                    if scheme is None:\n                        pwhash = get_password_hasher('sha512crypt')()\n                    else:\n                        pwhash = get_password_hasher(scheme)()\n                    if not user.password.startswith(pwhash.scheme):\n                        logging.info(\n                            _(\"Password scheme mismatch. Updating %s password\"),\n                            user.username\n                        )\n                        user.set_password(form.cleaned_data[\"password\"])\n                        user.save()\n                    if pwhash.needs_rehash(user.password):\n                        logging.info(\n                            _(\"Password hash parameter missmatch. \"\n                              \"Updating %s password\"),\n                            user.username\n                        )\n                        user.set_password(form.cleaned_data[\"password\"])\n                        user.save()\n\n                login(request, user)\n                if not form.cleaned_data[\"rememberme\"]:\n                    request.session.set_expiry(0)\n\n                translation.activate(request.user.language)\n\n                logger.info(\n                    _(\"User '%s' successfully logged in\") % user.username\n                )\n                signals.user_login.send(\n                    sender=\"dologin\",\n                    username=form.cleaned_data[\"username\"],\n                    password=form.cleaned_data[\"password\"])\n                response = HttpResponseRedirect(find_nextlocation(request, user))\n                response.set_cookie(settings.LANGUAGE_COOKIE_NAME, request.user.language)\n                return response\n\n            error = _(\n                \"Your username and password didn't match. Please try again.\")\n            logger.warning(\n                \"Failed connection attempt from '%(addr)s' as user '%(user)s'\"\n                % {\"addr\": request.META[\"REMOTE_ADDR\"],\n                   \"user\": escape(form.cleaned_data[\"username\"])}\n            )\n\n        nextlocation = request.POST.get(\"next\", \"\")\n        httpcode = 401\n    else:\n        form = forms.LoginForm()\n        nextlocation = request.GET.get(\"next\", \"\")\n        httpcode = 200\n\n    announcements = signals.get_announcements.send(\n        sender=\"login\", location=\"loginpage\")\n    announcements = [announcement[1] for announcement in announcements]\n    return HttpResponse(\n        render_to_string(\n            \"registration/login.html\", {\n                \"form\": form, \"error\": error, \"next\": nextlocation,\n                \"annoucements\": announcements},\n            request),\n        status=httpcode)\n\n\ndologin = never_cache(dologin)\n\n\n@require_http_methods([\"POST\"])\ndef dologout(request):\n    \"\"\"Logout current user.\"\"\"\n    if not request.user.is_anonymous:\n        signals.user_logout.send(sender=\"dologout\", request=request)\n        logger = logging.getLogger(\"modoboa.auth\")\n        logger.info(\n            _(\"User '{}' successfully logged out\").format(\n                request.user.username))\n        logout(request)\n    return HttpResponseRedirect(reverse(\"core:login\"))\n\n\nclass PasswordResetView(auth_views.PasswordResetView):\n    \"\"\"Custom view to override form.\"\"\"\n\n    form_class = forms.PasswordResetForm\n\n    def setup(self, request, *args, **kwargs):\n        super().setup(request, *args, **kwargs)\n        self.from_email = request.localconfig.parameters.get_value(\n            \"sender_address\"\n        )\n\n    def get_context_data(self, **kwargs):\n        \"\"\"Include help text.\"\"\"\n        context = super().get_context_data(**kwargs)\n        context[\"announcement\"] = (\n            self.request.localconfig.parameters\n            .get_value(\"password_recovery_msg\")\n        )\n        return context\n\n    def form_valid(self, form):\n        \"\"\"Redirect to code verification page if needed.\"\"\"\n        sms_password_recovery = (\n            self.request.localconfig.parameters\n            .get_value(\"sms_password_recovery\")\n        )\n        if not sms_password_recovery:\n            return super().form_valid(form)\n        user = models.User._default_manager.filter(\n            email=form.cleaned_data[\"email\"], phone_number__isnull=False\n        ).first()\n        if not user:\n            # Fallback to email\n            return super().form_valid(form)\n        backend = sms_backends.get_active_backend(\n            self.request.localconfig.parameters)\n        secret = cryptutils.random_hex_key(20)\n        code = oath.totp(secret)\n        text = _(\n            \"Please use the following code to recover your Modoboa password: {}\"\n            .format(code)\n        )\n        if not backend.send(text, [str(user.phone_number)]):\n            return super().form_valid(form)\n        self.request.session[\"user_pk\"] = user.pk\n        self.request.session[\"totp_secret\"] = secret\n        return HttpResponseRedirect(reverse(\"password_reset_confirm_code\"))\n\n\nclass VerifySMSCodeView(generic.FormView):\n    \"\"\"View to verify a code received by SMS.\"\"\"\n\n    form_class = forms.VerifySMSCodeForm\n    template_name = \"registration/password_reset_confirm_code.html\"\n\n    def get_form_kwargs(self):\n        \"\"\"Include totp secret in kwargs.\"\"\"\n        kwargs = super().get_form_kwargs()\n        try:\n            kwargs.update({\"totp_secret\": self.request.session[\"totp_secret\"]})\n        except KeyError:\n            raise Http404\n        return kwargs\n\n    def form_valid(self, form):\n        \"\"\"Redirect to reset password form.\"\"\"\n        user = models.User.objects.get(pk=self.request.session.pop(\"user_pk\"))\n        self.request.session.pop(\"totp_secret\")\n        token = default_token_generator.make_token(user)\n        uid = urlsafe_base64_encode(force_bytes(user.pk))\n        url = reverse(\"password_reset_confirm\", args=[uid, token])\n        return HttpResponseRedirect(url)\n\n\nclass ResendSMSCodeView(generic.View):\n    \"\"\"A view to resend validation code.\"\"\"\n\n    def get(self, request, *args, **kwargs):\n        sms_password_recovery = (\n            self.request.localconfig.parameters\n            .get_value(\"sms_password_recovery\")\n        )\n        if not sms_password_recovery:\n            raise Http404\n        try:\n            user = models.User._default_manager.get(\n                pk=self.request.session[\"user_pk\"])\n        except KeyError:\n            raise Http404\n        backend = sms_backends.get_active_backend(\n            self.request.localconfig.parameters)\n        secret = cryptutils.random_hex_key(20)\n        code = oath.totp(secret)\n        text = _(\n            \"Please use the following code to recover your Modoboa password: {}\"\n            .format(code)\n        )\n        if not backend.send(text, [user.phone_number]):\n            raise Http404\n        self.request.session[\"totp_secret\"] = secret\n        return JsonResponse({\"status\": \"ok\"})\n\n\nclass TwoFactorCodeVerifyView(LoginRequiredMixin,\n                              UserFormKwargsMixin,\n                              generic.FormView):\n    \"\"\"View to verify a 2FA code after login.\"\"\"\n\n    form_class = forms.Verify2FACodeForm\n    template_name = \"registration/twofactor_code_verify.html\"\n\n    def form_valid(self, form):\n        \"\"\"Login user.\"\"\"\n        django_otp.login(self.request, form.cleaned_data[\"tfa_code\"])\n        return HttpResponseRedirect(\n            find_nextlocation(self.request, self.request.user)\n        )\n", "\"\"\"Custom template tags.\"\"\"\n\nfrom datetime import datetime\n\nfrom django import template\nfrom django.template import Context, RequestContext, Template\nfrom django.utils.safestring import mark_safe\nfrom django.utils.translation import gettext as _\n\nfrom modoboa.core import signals as core_signals\n\nregister = template.Library()\n\n\n@register.simple_tag\ndef join(items, sep=\",\"):\n    res = \"\"\n    for k, v in list(items.items()):\n        if res != \"\":\n            res += sep\n        res += \"%s : '%s'\" % (k, v)\n    return res\n\n\n@register.simple_tag\ndef tolist(values):\n    return mark_safe(\"[%s]\" % \",\".join(['\"%s\"' % v for v in values]))\n\n\n@register.simple_tag\ndef alert(msg, typ):\n    t = Template(\"\"\"<div class=\"alert alert-{{ type }}\" role=\"alert\">\n<button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n{{ msg }}\n</div>\"\"\")  # NOQA:E501\n    return t.render(Context({\"type\": typ, \"msg\": msg}))\n\n\n@register.simple_tag\ndef render_link(linkdef, mdclass=\"\"):\n    t = Template(\"\"\"<a href=\"{{ link.url }}\" name=\"{{ link.name }}\" title=\"{{ link.title }}\"\n{% if link.modal %}data-toggle=\"ajaxmodal{% if link.autowidth %}-autowidth{% endif %}\"{% endif %}\n{% if link.modalcb %}modalcb=\"{{ link.modalcb }}\"{% endif %}\n{% if link.closecb %}closecb=\"{{ link.closecb }}\"{% endif %}\nclass=\"{{ mdclass }}{% if link.class %} {{ link.class }}{% endif %}\"\n{% if link.confirm %} onclick=\"return confirm('{{ link.confirm }}')\"{% endif %}\n{% for attr, value in link.extra_attributes.items %} {{ attr }}=\"{{ value }}\"{% endfor %}\n>\n{% if link.img %}<i class=\"{{ link.img }}\"></i>{% endif %}\n{{ link.label }}</a>\"\"\")  # NOQA:E501\n    return t.render(Context({\"link\": linkdef, \"mdclass\": mdclass}))\n\n\n@register.simple_tag\ndef render_post_link(linkdef, request):\n    t = Template(\"\"\"<form method=\"post\" action=\"{{ link.url }}\">\n{% csrf_token %}\n<a class=\"menu-link\" href=\"#\" onclick=\"this.parentNode.submit()\">{% if link.img %}<i class=\"{{ link.img }}\"></i>{% endif %}{{ link.label }}</a>\n</form>\"\"\")\n    return t.render(RequestContext(request, {\"link\": linkdef}))\n\n\n@register.simple_tag\ndef progress_color(value):\n    value = int(value)\n    if value < 50:\n        return \"progress-bar progress-bar-info\"\n    if value < 80:\n        return \"progress-bar progress-bar-warning\"\n    return \"progress-bar progress-bar-danger\"\n\n\n@register.filter\ndef fromunix(value):\n    return datetime.fromtimestamp(int(value))\n\n\n@register.simple_tag\ndef render_tags(tags):\n    t = Template(\"\"\"{% for tag in tags %}\n<span class=\"label label-{% if tag.color %}{{ tag.color }}{% else %}default{% endif %}\">\n  <a href=\"#\" class=\"filter {{ tag.type }}\" name=\"{{ tag.name }}\">{{ tag.label }}</a>\n</span>\n{% endfor %}\n\"\"\")  # NOQA:E501\n    return t.render(Context({\"tags\": tags}))\n\n\n@register.simple_tag\ndef extra_static_content(caller, st_type, user):\n    \"\"\"Get extra static content from extensions.\n\n    :param str caller: the application (location) responsible for the call\n    :param str st_type: content type (css or js)\n    :param ``User`` user: connected user\n    \"\"\"\n    tpl = template.Template(\n        \"{% for sc in static_content %}{{ sc|safe }}{% endfor %}\"\n    )\n    static_content = core_signals.extra_static_content.send(\n        sender=\"extra_static_content\",\n        caller=caller, st_type=st_type, user=user)\n    static_content = [result[1] for result in static_content]\n    return tpl.render(\n        template.Context({\"static_content\": static_content})\n    )\n\n\n@register.filter(name=\"localize_header_name\")\ndef localize_header_name(headername):\n    \"\"\" Localizes the header names \"\"\"\n    names = {\n        \"From\": _(\"From\"),\n        \"To\": _(\"To\"),\n        \"Date\": _(\"Date\"),\n        \"Subject\": _(\"Subject\")\n    }\n    return names.get(headername, headername)\n", "/* ------- Media ------- */\n\n.sidebar {\n    display: none;\n}\n\n@media (max-width: 440px) {\n\n    .navbar .col-xs-8 {\n        padding-right: 0;\n    }\n}\n\n@media (max-width: 768px) {\n\n     tr th#tags,\n     td[name=\"tags\"] {\n         display: none;\n     }\n\n     /* button.navbar-toggle[data-target=\"#navigate-navbar-collapse\"]{ */\n     /*     margin-left: 20px; */\n     /* } */\n\n     /* .container > .navbar-header, .container-fluid > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-collapse { */\n     /*     margin-left: 0; */\n     /*     margin-right: 0; */\n     /* } */\n\n}\n\n@media (max-width: 1198px) {\n\n     .display-up-1198{\n         display: none;\n     }\n     .dropdown{\n         margin:0px;\n     }\n     .btn-group{\n         margin:0px;\n     }\n}\n\n@media (min-width: 768px) {\n\n    .sidebar {\n        position: fixed !important;\n        top: 51px;\n        bottom: 0;\n        left: 0;\n        width: 250px;\n        z-index: 1000;\n        display: block;\n        padding: 15px 0;\n        overflow: auto;\n        background-color: #f5f5f5;\n        border-right: 1px solid #ddd;\n    }\n\n    .main {\n        position: relative;\n        margin-left: 250px;\n    }\n\n}\n\n /* --------- general --------- */\n\n.container-fluid {\n    padding-left: 0;\n    padding-right: 0;\n}\n\n/* Form */\n\n#uprefs_content input[type=\"checkbox\"] {\n    margin-top: 10px;\n}\n/* Buttons */\n\n.navbar .btn-link:hover,\n.navbar .btn-link:focus{\n    text-decoration: none;\n}\n\n.well .nav > li > a {\n    padding: 2px 5px;\n}\n\n/* Colapse Nav */\n\n.navbar-inverse .navbar-toggle span {\n    color: white;\n}\n\n.navbar-toggle {\n    margin-top: 4px;\n    margin-bottom: 4px;\n}\n\n\n/* Global */\nbody {\n    padding-top: 50px;\n    padding-bottom: 50px;\n}\n\nh5 {\n    font-size: 15px;\n    font-weight: bold;\n}\n\nlabel {\n    font-weight: normal;\n}\n\n.modals div.input-group{\n    margin-bottom:8px;\n}\n\n.form-horizontal .param-label {\n    float: left;\n    padding-top: 5px;\n    text-align: left;\n    width: 250px;\n    margin-left: 20px;\n}\n\n.form-horizontal .input-group {\n    margin-bottom: 8px;\n}\n\n.dropdown{\n    margin-right: 20px;\n}\n\n.dropdown-menu .radio {\n    padding: 3px 15px;\n}\n\n.no-margin {\n    margin: 0 !important;\n}\n\n.buttons_list .bset {\n    display: none;\n}\n\n.buttons_list .active {\n    display: inline;\n}\n\n.tr-selected {\n    background-color: #F5F5F5;\n}\n\n.hidden {\n    display: none;\n}\n\n.label a {\n    color: #FFFFFF;\n    text-decoration: none;\n}\n\n.table-fixed {\n    table-layout: fixed;\n}\n\n.menu-link {\n\tdisplay: block;\n\tpadding: 3px 20px;\n\tclear: both;\n\tfont-weight: 400;\n\tline-height: 1.42857143;\n\tcolor: #333;\n\twhite-space: nowrap;\n}\n\n/* --------- main page --------- */\n\n\n/* Top navbar section */\n\n.top-navbar{\n    border-radius: 0;\n}\n\n.display-less-1198{\n    display: none;\n}\n\n/* div#navigate-navbar-collapse.navbar-collapse { */\n/*     z-index: 9999; */\n/* } */\nhtml body div.navbar div.container-fluid div#navigate-navbar-collapse.collapse ul.nav li.dropdown a.dropdown-toggle{\n    color: white;\n}\n\n/* left sidebar */\n\n/* Sidebar navigation */\n.nav-sidebar {\n    /*margin-right: -21px;\n    margin-left: -20px;*/\n}\n.nav-sidebar li > a {\n    /*padding-right: 20px;\n    padding-left: 20px;*/\n}\n\n.nav-sidebar > li > a:hover {\n    background-color: #eee;\n}\n\n.nav-sidebar .active > a,\n.nav-sidebar .active > a:hover,\n.nav-sidebar .active > a:focus {\n    color: #fff;\n    background-color: #428bca;\n}\n\n.nav-sidebar > .nav-header {\n    color: #959595;\n    font-size: 12px;\n    font-weight: 700;\n    letter-spacing: 1px;\n    text-transform: uppercase;\n    padding-left: 10px;\n    margin-top: 10px;\n    margin-bottom: 5px;\n}\n\n /* Action buttons */\n\n .action-buttons {\n     margin-bottom: 4px;\n }\n\n.main {\n    padding: 20px 15px;\n}\n\n /* listing */\n\n/* Bottom navBar*/\n\n.nav-bottom {\n     margin-top: 80px;\n}\n\n#bottom-bar-middle {\n    text-align: center;\n}\n\n#bottom-bar-right{\n    text-align: right;\n}\n\n.navbar-text {\n    color: #999999 !important;\n    float:none;\n}\n\n/* Tables */\ntable th#actions {\n    text-align: right;\n}\n\ntable td[name=\"actions\"] {\n    text-align: right;\n}\n\n/* --------- specific pages --------- */\n\n/* identities tables */\n\n.muted a:hover{\n    color: black;\n    text-decoration: none;\n}\n\n.label {\n    margin-left: 1px;\n}\n\n\n /* modals */\n\n.modal-body .nav-pills {\n    margin-bottom: 15px;\n}\n\n /* settings */\n\n .container-fluid #uprefs_content .form-horizontal .form-actions {\n     margin-right: 16px;\n }\n\n /* Wizard */\n#wizard .carousel-inner {\n    overflow: visible;\n}\n\n/* Dashboard */\n.slogan {\n    padding-top: 15px;\n}\n", "{% load i18n lib_tags %}\n{% for entry in entries %}\n  {% if entry.separator %}\n  <li class=\"divider\">&nbsp;</li>\n  {% else %}\n    {% if entry.menu %}\n  <li class=\"dropdown {{ entry.class }}{% if selection == entry.name %} active{% endif %}\">\n    <a class=\"dropdown-toggle\" name=\"{{ entry.name }}\" data-toggle=\"dropdown\" href=\"{{ entry.url }}\">\n      {% if entry.img %}<span class=\"{{ entry.img }}\"></span> {% endif %}{{ entry.label }}\n    </a>\n    <ul class=\"dropdown-menu\" {% if entry.width %}style=\"width: {{ entry.width }}px\"{% endif %}>\n      {% for sentry in entry.menu %}\n      <li>{% if sentry.method == \"post\" %}{% render_post_link sentry request %}{% else %}{% render_link sentry %}{% endif %}</li>\n      {% endfor %}\n    </ul>\n  </li>\n    {% else %}\n  <li class=\"{% if selection == entry.name %}active{% endif %}\">\n    {% if entry.method == \"post\" %}\n      {% render_post_link entry request %}\n    {% else %}\n      {% render_link entry %}\n    {% endif %}\n  </li>\n    {% endif %}\n  {% endif %}\n{% endfor %}\n", "<!DOCTYPE html>\n{% load static %}\n{% load i18n core_tags lib_tags %}\n<html lang=\"{{ LANGUAGE_CODE }}\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>{% block pagetitle %}{% endblock %}</title>\n    <link rel=\"icon\" type=\"image/png\" href=\"{% static 'css/logo-icon.png' %}\" />\n    <link rel=\"stylesheet\" href=\"{% static 'font-awesome/css/font-awesome.min.css' %}\">\n    <link rel=\"stylesheet\" href=\"{% static 'bootstrap/dist/css/bootstrap.min.css' %}\" />\n    <link rel=\"stylesheet\" href=\"{% static 'eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css' %}\" />\n    <link rel=\"stylesheet\" href=\"{% static 'selectize/dist/css/selectize.bootstrap3.css' %}\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/custom.css' %}\" />\n    {% block extra_css %}{% endblock %}\n  </head>\n\n  <body>\n    <div class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container-fluid\">\n\n          <button class=\"navbar-toggle collapsed pull-right\" data-target=\"#topmenu\" data-toggle=\"collapse\" type=\"button\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n\n          <button class=\"navbar-toggle collapsed pull-left\" data-target=\"#leftcol\" data-toggle=\"collapse\" type=\"button\">\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n\n\n        <div id=\"topmenu\" class=\"collapse navbar-collapse\">\n          <ul class=\"nav navbar-nav\">\n            {% if user.is_admin %}\n              <li{% if selection == \"dashboard\" %} class=\"active\"{% endif %}>\n                <a name=\"dashboard\" href=\"{% url 'core:dashboard' %}\">\n                  <span class=\"fa fa-home fa-lg\"></span>\n                </a>\n              </li>\n            {% endif %}\n            {% if selection %}\n              {% extensions_menu selection user %}{% core_menu selection user %}\n            {% else %}\n              {% extensions_menu \"\" user %}{% core_menu \"\" user %}\n            {% endif %}\n            {% load_optionalmenu user %}\n            <li class=\"divider\"></li>\n            {% if user.is_admin %}\n              <li>\n                <a name=\"newadmin\" href=\"/{{ new_admin }}\" target=\"_blank\">\n                  {% trans \"New admin\" %}\n                </a>\n              </li>\n            {% endif %}\n          </ul>\n          <ul class=\"nav navbar-nav navbar-right\">\n            {% if selection %}{% user_menu request selection %}{% else %}{% user_menu request \"\" %}{% endif %}\n          </ul>\n          {% include \"common/top_notifications.html\" %}\n        </div>\n      </div>\n    </div>\n\n    {% block content %}{% endblock %}\n\n    <!-- Javascript -->\n    <script src=\"{% static 'jquery/jquery.min.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'bootstrap/dist/js/bootstrap.min.js' %}\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\" src=\"{% static 'moment/min/moment.min.js' %}\"></script>\n    {% if LANGUAGE_CODE != \"en\" %}<script src=\"{{ STATIC_URL }}moment/locale/{{ LANGUAGE_CODE }}.js\" type=\"text/javascript\"></script>{% endif %}\n    <script src=\"{% static 'eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'selectize/dist/js/standalone/selectize.min.js' %}\" type=\"text/javascript\"></script>\n    {% if TEMPLATE_DEBUG %}\n      <script src=\"//maxcdn.bootstrapcdn.com/bootlint/0.4.0/bootlint.min.js\"></script>\n    {% endif %}\n    <script src=\"{% static 'js/global.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/csrf.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/confirmation.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/notify.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/poller.js' %}\" type=\"text/javascript\"></script>\n    <script src=\"{% static 'js/top_notifications.js' %}\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\" src=\"{% url 'javascript-catalog' %}\"></script>\n    <script type=\"text/javascript\">\n      var root_url = \"{% url 'core:root' %}\".replace(/\\/$/, \"\");\n      var top_notifications;\n      var userLang = \"{{ LANGUAGE_CODE }}\";\n\n      set_static_url(\"{{ STATIC_URL }}\");\n      $(document).ready(function() {\n          top_notifications = new TopNotifications({\n              url: \"{% url 'core:top_notifications_check' %}\",\n              interval: {{ notifications_check_interval }}\n          });\n      });\n    </script>\n    {% extra_static_content \"top\" \"js\" user %}\n    {% block extra_js %}{% endblock %}\n  </body>\n</html>\n"], "filenames": ["modoboa/core/templatetags/core_tags.py", "modoboa/core/views/auth.py", "modoboa/lib/templatetags/lib_tags.py", "modoboa/static/css/custom.css", "modoboa/templates/common/menulist.html", "modoboa/templates/nlayout.html"], "buggy_code_start_loc": [82, 18, 6, 3, 7, 63], "buggy_code_end_loc": [107, 128, 51, 284, 20, 64], "fixing_code_start_loc": [82, 19, 6, 3, 7, 63], "fixing_code_end_loc": [111, 131, 61, 292, 24, 64], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository modoboa/modoboa prior to 2.2.2.", "other": {"cve": {"id": "CVE-2023-5690", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-20T17:15:09.020", "lastModified": "2023-10-27T18:50:44.663", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository modoboa/modoboa prior to 2.2.2."}, {"lang": "es", "value": "Cross-Site Request Forgery (CSRF) en el repositorio de GitHub modoboa/modoboa antes de 2.2.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:modoboa:modoboa:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.2.2", "matchCriteriaId": "07F47C6D-A091-4637-90E1-9FDC92F2973E"}]}]}], "references": [{"url": "https://github.com/modoboa/modoboa/commit/23e4c25511c66c0548da001236f47e19e3f9e4d9", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/980c75a5-d978-4b0e-9bcc-2b2682c97e01", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/modoboa/modoboa/commit/23e4c25511c66c0548da001236f47e19e3f9e4d9"}}