{"buggy_code": ["<?php\n\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Http\\Exception\\NotAcceptableException;\nuse Cake\\Error\\Debugger;\n\nclass AuthKeysController extends AppController\n{\n    public $filterFields = ['Users.username', 'authkey', 'comment', 'Users.id'];\n    public $quickFilterFields = ['authkey', ['comment' => true]];\n    public $containFields = ['Users' => ['fields' => ['id', 'username']]];\n\n    public function index()\n    {\n        $currentUser = $this->ACL->getUser();\n        $conditions = [];\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['Users.organisation_id'] = $currentUser['organisation_id'];\n            if (empty($currentUser['role']['perm_org_admin'])) {\n                $conditions['Users.id'] = $currentUser['id'];\n            }\n        }\n        $this->CRUD->index([\n            'filters' => $this->filterFields,\n            'quickFilters' => $this->quickFilterFields,\n            'contain' => $this->containFields,\n            'exclude_fields' => ['authkey'],\n            'conditions' => $conditions,\n            'hidden' => []\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', $this->isAdmin ? 'Administration' : 'Cerebrate');\n    }\n\n    public function delete($id)\n    {\n        $currentUser = $this->ACL->getUser();\n        $conditions = [];\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['Users.organisation_id'] = $currentUser['organisation_id'];\n            if (empty($currentUser['role']['perm_org_admin'])) {\n                $conditions['Users.id'] = $currentUser['id'];\n            }\n        }\n        $this->CRUD->delete($id, ['conditions' => $conditions, 'contain' => 'Users']);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', $this->isAdmin ? 'Administration' : 'Cerebrate');\n    }\n\n    public function add()\n    {\n        $this->set('metaGroup', $this->isAdmin ? 'Administration' : 'Cerebrate');\n        $validUsers = [];\n        $userConditions = [];\n        $currentUser = $this->ACL->getUser();\n        if (empty($currentUser['role']['perm_admin'])) {\n            if (empty($currentUser['role']['perm_org_admin'])) {\n                $userConditions['id'] = $currentUser['id'];\n            } else {\n                $role_ids = $this->Users->Roles->find()->where(['perm_admin' => 0])->all()->extract('id')->toList();\n                $userConditions['role_id IN'] = $role_ids;\n            }\n        }\n        $users = $this->Users->find('list');\n        if (!empty($userConditions)) {\n            $users->where($userConditions);\n        }\n        $users = $users->order(['username' => 'asc'])->all()->toArray();\n        $this->CRUD->add([\n            'displayOnSuccess' => 'authkey_display',\n            'beforeSave' => function($data) use ($users) {\n                if (!in_array($data['user_id'], array_keys($users))) {\n                    throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n                }\n                return $data;\n            }\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload([\n            'displayOnSuccess' => 'authkey_display'\n        ]);\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->loadModel('Users');\n        $dropdownData = [\n            'user' => $users\n        ];\n        $this->set(compact('dropdownData'));\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\Http\\Exception\\NotFoundException;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\nuse Cake\\Http\\Exception\\ForbiddenException;\nuse Cake\\Http\\Exception\\NotAcceptableException;\nuse Cake\\Error\\Debugger;\n\nclass AuthKeysController extends AppController\n{\n    public $filterFields = ['Users.username', 'authkey', 'comment', 'Users.id'];\n    public $quickFilterFields = ['authkey', ['comment' => true]];\n    public $containFields = ['Users' => ['fields' => ['id', 'username']]];\n\n    public function index()\n    {\n        $currentUser = $this->ACL->getUser();\n        $conditions = [];\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['Users.organisation_id'] = $currentUser['organisation_id'];\n            if (empty($currentUser['role']['perm_org_admin'])) {\n                $conditions['Users.id'] = $currentUser['id'];\n            }\n        }\n        $this->CRUD->index([\n            'filters' => $this->filterFields,\n            'quickFilters' => $this->quickFilterFields,\n            'contain' => $this->containFields,\n            'exclude_fields' => ['authkey'],\n            'conditions' => $conditions,\n            'hidden' => []\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', $this->isAdmin ? 'Administration' : 'Cerebrate');\n    }\n\n    public function delete($id)\n    {\n        $currentUser = $this->ACL->getUser();\n        $conditions = [];\n        if (empty($currentUser['role']['perm_admin'])) {\n            $conditions['Users.organisation_id'] = $currentUser['organisation_id'];\n            if (empty($currentUser['role']['perm_org_admin'])) {\n                $conditions['Users.id'] = $currentUser['id'];\n            }\n        }\n        $this->CRUD->delete($id, ['conditions' => $conditions, 'contain' => 'Users']);\n        $responsePayload = $this->CRUD->getResponsePayload();\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->set('metaGroup', $this->isAdmin ? 'Administration' : 'Cerebrate');\n    }\n\n    public function add()\n    {\n        $this->set('metaGroup', $this->isAdmin ? 'Administration' : 'Cerebrate');\n        $validUsers = [];\n        $userConditions = [];\n        $currentUser = $this->ACL->getUser();\n        if (empty($currentUser['role']['perm_admin'])) {\n            if (empty($currentUser['role']['perm_org_admin'])) {\n                $userConditions['id'] = $currentUser['id'];\n            } else {\n                $role_ids = $this->Users->Roles->find()->where(['perm_admin' => 0, 'perm_org_admin' => 0])->all()->extract('id')->toList();\n                $userConditions['organisation_id'] = $currentUser['organisation_id'];\n                $userConditions['OR'] = [\n                    ['role_id IN' => $role_ids],\n                    ['id' => $currentUser['id']],\n                ];\n            }\n        }\n        $users = $this->Users->find('list');\n        if (!empty($userConditions)) {\n            $users->where($userConditions);\n        }\n        $users = $users->order(['username' => 'asc'])->all()->toArray();\n        $this->CRUD->add([\n            'displayOnSuccess' => 'authkey_display',\n            'beforeSave' => function($data) use ($users) {\n                if (!in_array($data['user_id'], array_keys($users))) {\n                    throw new MethodNotAllowedException(__('You are not authorised to do that.'));\n                }\n                return $data;\n            }\n        ]);\n        $responsePayload = $this->CRUD->getResponsePayload([\n            'displayOnSuccess' => 'authkey_display'\n        ]);\n        if (!empty($responsePayload)) {\n            return $responsePayload;\n        }\n        $this->loadModel('Users');\n        $dropdownData = [\n            'user' => $users\n        ];\n        $this->set(compact('dropdownData'));\n    }\n}\n"], "filenames": ["src/Controller/AuthKeysController.php"], "buggy_code_start_loc": [74], "buggy_code_end_loc": [76], "fixing_code_start_loc": [74], "fixing_code_end_loc": [80], "type": "NVD-CWE-noinfo", "message": "Cerebrate 1.12 does not properly consider organisation_id during creation of API keys.", "other": {"cve": {"id": "CVE-2023-26468", "sourceIdentifier": "cve@mitre.org", "published": "2023-02-24T00:15:12.217", "lastModified": "2023-03-03T16:32:03.623", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cerebrate 1.12 does not properly consider organisation_id during creation of API keys."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cerebrate-project:cerebrate:1.12:*:*:*:*:*:*:*", "matchCriteriaId": "087278E9-F2B1-4D6E-B2FF-D4C458DBD969"}]}]}], "references": [{"url": "https://github.com/cerebrate-project/cerebrate/commit/7ccf9252470a23acc38ad6ed13eecf523e368b48", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/cerebrate-project/cerebrate/commit/7ccf9252470a23acc38ad6ed13eecf523e368b48"}}