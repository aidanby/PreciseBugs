{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\n/**\n * StarterTheme TODO: FIXME:\n * In the old days, when updating an address, we actually:\n * - checked if the address was used by an order\n * - if so, just mark it as deleted and create a new one\n * - otherwise, update it like a normal entity\n * I *think* this is not necessary now because the invoicing thing\n * does its own historization. But this should be checked more thoroughly.\n */\nclass CustomerAddressFormCore extends AbstractForm\n{\n    private $language;\n\n    protected $template = 'customer/_partials/address-form.tpl';\n\n    private $address;\n\n    private $persister;\n\n    public function __construct(\n        Smarty $smarty,\n        Language $language,\n        TranslatorInterface $translator,\n        CustomerAddressPersister $persister,\n        CustomerAddressFormatter $formatter\n    ) {\n        parent::__construct(\n            $smarty,\n            $translator,\n            $formatter\n        );\n\n        $this->language = $language;\n        $this->persister = $persister;\n    }\n\n    public function loadAddressById($id_address)\n    {\n        $context = Context::getContext();\n\n        $this->address = new Address($id_address, $this->language->id);\n\n        if ($this->address->id === null) {\n            return Tools::redirect('index.php?controller=404');\n        }\n\n        if (!$context->customer->isLogged() && !$context->customer->isGuest()) {\n            return Tools::redirect('/index.php?controller=authentication');\n        }\n\n        if ($this->address->id_customer != $context->customer->id) {\n            return Tools::redirect('index.php?controller=404');\n        }\n\n        $params = get_object_vars($this->address);\n        $params['id_address'] = $this->address->id;\n\n        return $this->fillWith($params);\n    }\n\n    public function fillWith(array $params = [])\n    {\n        // This form is very tricky: fields may change depending on which\n        // country is being submitted!\n        // So we first update the format if a new id_country was set.\n        if (isset($params['id_country'])\n            && $params['id_country'] != $this->formatter->getCountry()->id\n        ) {\n            $this->formatter->setCountry(new Country(\n                $params['id_country'],\n                $this->language->id\n            ));\n        }\n\n        return parent::fillWith($params);\n    }\n\n    public function validate()\n    {\n        $is_valid = true;\n\n        if (($postcode = $this->getField('postcode'))) {\n            if ($postcode->isRequired()) {\n                $country = $this->formatter->getCountry();\n                if (!$country->checkZipCode($postcode->getValue())) {\n                    $postcode->addError($this->translator->trans(\n                        'Invalid postcode - should look like \"%zipcode%\"',\n                        array('%zipcode%' => $country->zip_code_format),\n                        'Shop.Forms.Errors'\n                    ));\n                    $is_valid = false;\n                }\n            }\n        }\n\n        if (($hookReturn = Hook::exec('actionValidateCustomerAddressForm', array('form' => $this))) !== '') {\n            $is_valid &= (bool) $hookReturn;\n        }\n\n        return $is_valid && parent::validate();\n    }\n\n    public function submit()\n    {\n        if (!$this->validate()) {\n            return false;\n        }\n\n        $address = new Address(\n            $this->getValue('id_address'),\n            $this->language->id\n        );\n\n        foreach ($this->formFields as $formField) {\n            $address->{$formField->getName()} = $formField->getValue();\n        }\n\n        if (!isset($this->formFields['id_state'])) {\n            $address->id_state = 0;\n        }\n\n        if (empty($address->alias)) {\n            $address->alias = $this->translator->trans('My Address', [], 'Shop.Theme.Checkout');\n        }\n\n        Hook::exec('actionSubmitCustomerAddressForm', array('address' => &$address));\n\n        $this->setAddress($address);\n\n        return $this->getPersister()->save(\n            $address,\n            $this->getValue('token')\n        );\n    }\n\n    /**\n     * @return Address\n     */\n    public function getAddress()\n    {\n        return $this->address;\n    }\n\n    /**\n     * @return CustomerAddressPersister\n     */\n    protected function getPersister()\n    {\n        return $this->persister;\n    }\n\n    protected function setAddress(Address $address)\n    {\n        $this->address = $address;\n    }\n\n    public function getTemplateVariables()\n    {\n        $context = Context::getContext();\n\n        if (!$this->formFields) {\n            // This is usually done by fillWith but the form may be\n            // rendered before fillWith is called.\n            // I don't want to assign formFields in the constructor\n            // because it accesses the DB and a constructor should not\n            // have side effects.\n            $this->formFields = $this->formatter->getFormat();\n        }\n\n        $this->setValue('token', $this->persister->getToken());\n        $formFields = array_map(\n            function (FormField $item) {\n                return $item->toArray();\n            },\n            $this->formFields\n        );\n\n        if (empty($formFields['firstname']['value'])) {\n            $formFields['firstname']['value'] = $context->customer->firstname;\n        }\n\n        if (empty($formFields['lastname']['value'])) {\n            $formFields['lastname']['value'] = $context->customer->lastname;\n        }\n\n        return array(\n            'id_address' => (isset($this->address->id)) ? $this->address->id : 0,\n            'action' => $this->action,\n            'errors' => $this->getErrors(),\n            'formFields' => $formFields,\n        );\n    }\n}\n", "<?php\n\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass CustomerAddressFormatterCore implements FormFormatterInterface\n{\n    private $country;\n    private $translator;\n    private $availableCountries;\n    private $definition;\n\n    public function __construct(\n        Country $country,\n        TranslatorInterface $translator,\n        array $availableCountries\n    ) {\n        $this->country = $country;\n        $this->translator = $translator;\n        $this->availableCountries = $availableCountries;\n        $this->definition = Address::$definition['fields'];\n    }\n\n    public function setCountry(Country $country)\n    {\n        $this->country = $country;\n\n        return $this;\n    }\n\n    public function getCountry()\n    {\n        return $this->country;\n    }\n\n    public function getFormat()\n    {\n        $fields = AddressFormat::getOrderedAddressFields(\n            $this->country->id,\n            true,\n            true\n        );\n        $required = array_flip(AddressFormat::getFieldsRequired());\n\n        $format = [\n            'id_address' => (new FormField())\n                ->setName('id_address')\n                ->setType('hidden'),\n            'id_customer' => (new FormField())\n                ->setName('id_customer')\n                ->setType('hidden'),\n            'back' => (new FormField())\n                ->setName('back')\n                ->setType('hidden'),\n            'token' => (new FormField())\n                ->setName('token')\n                ->setType('hidden'),\n            'alias' => (new FormField())\n                ->setName('alias')\n                ->setLabel(\n                    $this->getFieldLabel('alias')\n                ),\n        ];\n\n        foreach ($fields as $field) {\n            $formField = new FormField();\n            $formField->setName($field);\n\n            $fieldParts = explode(':', $field, 2);\n\n            if (count($fieldParts) === 1) {\n                if ($field === 'postcode') {\n                    if ($this->country->need_zip_code) {\n                        $formField->setRequired(true);\n                    }\n                } elseif ($field === 'phone') {\n                    $formField->setType('tel');\n                } elseif ($field === 'dni' && null !== $this->country) {\n                    if ($this->country->need_identification_number) {\n                        $formField->setRequired(true);\n                    }\n                }\n            } elseif (count($fieldParts) === 2) {\n                list($entity, $entityField) = $fieldParts;\n\n                // Fields specified using the Entity:field\n                // notation are actually references to other\n                // entities, so they should be displayed as a select\n                $formField->setType('select');\n\n                // Also, what we really want is the id of the linked entity\n                $formField->setName('id_' . strtolower($entity));\n\n                if ($entity === 'Country') {\n                    $formField->setType('countrySelect');\n                    $formField->setValue($this->country->id);\n                    foreach ($this->availableCountries as $country) {\n                        $formField->addAvailableValue(\n                            $country['id_country'],\n                            $country[$entityField]\n                        );\n                    }\n                } elseif ($entity === 'State') {\n                    if ($this->country->contains_states) {\n                        $states = State::getStatesByIdCountry($this->country->id, true);\n                        foreach ($states as $state) {\n                            $formField->addAvailableValue(\n                                $state['id_state'],\n                                $state[$entityField]\n                            );\n                        }\n                        $formField->setRequired(true);\n                    }\n                }\n            }\n\n            $formField->setLabel($this->getFieldLabel($field));\n            if (!$formField->isRequired()) {\n                // Only trust the $required array for fields\n                // that are not marked as required.\n                // $required doesn't have all the info, and fields\n                // may be required for other reasons than what\n                // AddressFormat::getFieldsRequired() says.\n                $formField->setRequired(\n                    array_key_exists($field, $required)\n                );\n            }\n\n            $format[$formField->getName()] = $formField;\n        }\n\n        //To add the extra fields in address form\n        $additionalAddressFormFields = Hook::exec('additionalCustomerAddressFields', array(), null, true);\n        if (is_array($additionalAddressFormFields)) {\n            foreach ($additionalAddressFormFields as $moduleName => $additionnalFormFields) {\n                if (!is_array($additionnalFormFields)) {\n                    continue;\n                }\n\n                foreach ($additionnalFormFields as $formField) {\n                    $formField->moduleName = $moduleName;\n                    $format[$moduleName . '_' . $formField->getName()] = $formField;\n                }\n            }\n        }\n\n        return $this->addConstraints(\n                $this->addMaxLength(\n                    $format\n                )\n        );\n    }\n\n    private function addConstraints(array $format)\n    {\n        foreach ($format as $field) {\n            if (!empty($this->definition[$field->getName()]['validate'])) {\n                $field->addConstraint(\n                    $this->definition[$field->getName()]['validate']\n                );\n            }\n        }\n\n        return $format;\n    }\n\n    private function addMaxLength(array $format)\n    {\n        foreach ($format as $field) {\n            if (!empty($this->definition[$field->getName()]['size'])) {\n                $field->setMaxLength(\n                    $this->definition[$field->getName()]['size']\n                );\n            }\n        }\n\n        return $format;\n    }\n\n    private function getFieldLabel($field)\n    {\n        // Country:name => Country, Country:iso_code => Country,\n        // same label regardless of which field is used for mapping.\n        $field = explode(':', $field)[0];\n\n        switch ($field) {\n            case 'alias':\n                return $this->translator->trans('Alias', [], 'Shop.Forms.Labels');\n            case 'firstname':\n                return $this->translator->trans('First name', [], 'Shop.Forms.Labels');\n            case 'lastname':\n                return $this->translator->trans('Last name', [], 'Shop.Forms.Labels');\n            case 'address1':\n                return $this->translator->trans('Address', [], 'Shop.Forms.Labels');\n            case 'address2':\n                return $this->translator->trans('Address Complement', [], 'Shop.Forms.Labels');\n            case 'postcode':\n                return $this->translator->trans('Zip/Postal Code', [], 'Shop.Forms.Labels');\n            case 'city':\n                return $this->translator->trans('City', [], 'Shop.Forms.Labels');\n            case 'Country':\n                return $this->translator->trans('Country', [], 'Shop.Forms.Labels');\n            case 'State':\n                return $this->translator->trans('State', [], 'Shop.Forms.Labels');\n            case 'phone':\n                return $this->translator->trans('Phone', [], 'Shop.Forms.Labels');\n            case 'phone_mobile':\n                return $this->translator->trans('Mobile phone', [], 'Shop.Forms.Labels');\n            case 'company':\n                return $this->translator->trans('Company', [], 'Shop.Forms.Labels');\n            case 'vat_number':\n                return $this->translator->trans('VAT number', [], 'Shop.Forms.Labels');\n            case 'dni':\n                return $this->translator->trans('Identification number', [], 'Shop.Forms.Labels');\n            case 'other':\n                return $this->translator->trans('Other', [], 'Shop.Forms.Labels');\n            default:\n                return $field;\n        }\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\n/**\n * StarterTheme TODO: B2B fields, Genders, CSRF.\n */\nclass CustomerFormCore extends AbstractForm\n{\n    protected $template = 'customer/_partials/customer-form.tpl';\n\n    private $context;\n    private $urls;\n\n    private $customerPersister;\n    private $guest_allowed;\n    private $passwordRequired = true;\n\n    public function __construct(\n        Smarty $smarty,\n        Context $context,\n        TranslatorInterface $translator,\n        CustomerFormatter $formatter,\n        CustomerPersister $customerPersister,\n        array $urls\n    ) {\n        parent::__construct(\n            $smarty,\n            $translator,\n            $formatter\n        );\n\n        $this->context = $context;\n        $this->urls = $urls;\n        $this->customerPersister = $customerPersister;\n    }\n\n    public function setGuestAllowed($guest_allowed = true)\n    {\n        $this->formatter->setPasswordRequired(!$guest_allowed);\n        $this->guest_allowed = $guest_allowed;\n\n        return $this;\n    }\n\n    public function setPasswordRequired($passwordRequired)\n    {\n        $this->passwordRequired = $passwordRequired;\n\n        return $this;\n    }\n\n    public function fillFromCustomer(Customer $customer)\n    {\n        $params = get_object_vars($customer);\n        $params['id_customer'] = $customer->id;\n        $params['birthday'] = $customer->birthday === '0000-00-00' ? null : Tools::displayDate($customer->birthday);\n\n        return $this->fillWith($params);\n    }\n\n    /**\n     * @return \\Customer\n     */\n    public function getCustomer()\n    {\n        $customer = new Customer($this->getValue('id_customer'));\n\n        foreach ($this->formFields as $field) {\n            $customerField = $field->getName();\n            if ($customerField === 'id_customer') {\n                $customerField = 'id';\n            }\n            if (property_exists($customer, $customerField)) {\n                $customer->$customerField = $field->getValue();\n            }\n        }\n\n        return $customer;\n    }\n\n    public function validate()\n    {\n        $emailField = $this->getField('email');\n        $id_customer = Customer::customerExists($emailField->getValue(), true, true);\n        $customer = $this->getCustomer();\n        if ($id_customer && $id_customer != $customer->id) {\n            $emailField->addError($this->translator->trans(\n                'The email is already used, please choose another one or sign in',\n                array(),\n                'Shop.Notifications.Error'\n            ));\n        }\n\n        // check birthdayField against null case is mandatory.\n        $birthdayField = $this->getField('birthday');\n        if (!empty($birthdayField) &&\n            !empty($birthdayField->getValue()) &&\n            Validate::isBirthDate($birthdayField->getValue(), Context::getContext()->language->date_format_lite)\n        ) {\n            $dateBuilt = DateTime::createFromFormat(\n                Context::getContext()->language->date_format_lite,\n                $birthdayField->getValue()\n            );\n            $birthdayField->setValue($dateBuilt->format('Y-m-d'));\n        }\n        $this->validateFieldsLengths();\n        $this->validateByModules();\n\n        return parent::validate();\n    }\n\n    protected function validateFieldsLengths()\n    {\n        $this->validateFieldLength('email', 255, $this->getEmailMaxLengthViolationMessage());\n        $this->validateFieldLength('firstname', 255, $this->getFirstNameMaxLengthViolationMessage());\n        $this->validateFieldLength('lastname', 255, $this->getLastNameMaxLengthViolationMessage());\n    }\n\n    /**\n     * @param $fieldName\n     * @param $maximumLength\n     * @param $violationMessage\n     */\n    protected function validateFieldLength($fieldName, $maximumLength, $violationMessage)\n    {\n        $emailField = $this->getField($fieldName);\n        if (strlen($emailField->getValue()) > $maximumLength) {\n            $emailField->addError($violationMessage);\n        }\n    }\n\n    /**\n     * @return mixed\n     */\n    protected function getEmailMaxLengthViolationMessage()\n    {\n        return $this->translator->trans(\n            'The %1$s field is too long (%2$d chars max).',\n            array('email', 255),\n            'Shop.Notifications.Error'\n        );\n    }\n\n    protected function getFirstNameMaxLengthViolationMessage()\n    {\n        return $this->translator->trans(\n            'The %1$s field is too long (%2$d chars max).',\n            array('first name', 255),\n            'Shop.Notifications.Error'\n        );\n    }\n\n    protected function getLastNameMaxLengthViolationMessage()\n    {\n        return $this->translator->trans(\n            'The %1$s field is too long (%2$d chars max).',\n            array('last name', 255),\n            'Shop.Notifications.Error'\n        );\n    }\n\n    public function submit()\n    {\n        if ($this->validate()) {\n            $clearTextPassword = $this->getValue('password');\n            $newPassword = $this->getValue('new_password');\n\n            $ok = $this->customerPersister->save(\n                $this->getCustomer(),\n                $clearTextPassword,\n                $newPassword,\n                $this->passwordRequired\n            );\n\n            if (!$ok) {\n                foreach ($this->customerPersister->getErrors() as $field => $errors) {\n                    $this->formFields[$field]->setErrors($errors);\n                }\n            }\n\n            return $ok;\n        }\n\n        return false;\n    }\n\n    public function getTemplateVariables()\n    {\n        return [\n            'action' => $this->action,\n            'urls' => $this->urls,\n            'errors' => $this->getErrors(),\n            'hook_create_account_form' => Hook::exec('displayCustomerAccountForm'),\n            'formFields' => array_map(\n                function (FormField $field) {\n                    return $field->toArray();\n                },\n                $this->formFields\n            ),\n        ];\n    }\n\n    /**\n     * This function call the hook validateCustomerFormFields of every modules\n     * which added one or several fields to the customer registration form.\n     *\n     * Note: they won't get all the fields from the form, but only the one\n     * they added.\n     */\n    private function validateByModules()\n    {\n        $formFieldsAssociated = array();\n        // Group FormField instances by module name\n        foreach ($this->formFields as $formField) {\n            if (!empty($formField->moduleName)) {\n                $formFieldsAssociated[$formField->moduleName][] = $formField;\n            }\n        }\n        // Because of security reasons (i.e password), we don't send all\n        // the values to the module but only the ones it created\n        foreach ($formFieldsAssociated as $moduleName => $formFields) {\n            if ($moduleId = Module::getModuleIdByName($moduleName)) {\n                // ToDo : replace Hook::exec with HookFinder, because we expect a specific class here\n                $validatedCustomerFormFields = Hook::exec('validateCustomerFormFields', array('fields' => $formFields), $moduleId, true);\n\n                if (is_array($validatedCustomerFormFields)) {\n                    array_merge($this->formFields, $validatedCustomerFormFields);\n                }\n            }\n        }\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass CustomerFormatterCore implements FormFormatterInterface\n{\n    private $translator;\n    private $language;\n\n    private $ask_for_birthdate = true;\n    private $ask_for_partner_optin = true;\n    private $partner_optin_is_required = true;\n    private $ask_for_password = true;\n    private $password_is_required = true;\n    private $ask_for_new_password = false;\n\n    public function __construct(\n        TranslatorInterface $translator,\n        Language $language\n    ) {\n        $this->translator = $translator;\n        $this->language = $language;\n    }\n\n    public function setAskForBirthdate($ask_for_birthdate)\n    {\n        $this->ask_for_birthdate = $ask_for_birthdate;\n\n        return $this;\n    }\n\n    public function setAskForPartnerOptin($ask_for_partner_optin)\n    {\n        $this->ask_for_partner_optin = $ask_for_partner_optin;\n\n        return $this;\n    }\n\n    public function setPartnerOptinRequired($partner_optin_is_required)\n    {\n        $this->partner_optin_is_required = $partner_optin_is_required;\n\n        return $this;\n    }\n\n    public function setAskForPassword($ask_for_password)\n    {\n        $this->ask_for_password = $ask_for_password;\n\n        return $this;\n    }\n\n    public function setAskForNewPassword($ask_for_new_password)\n    {\n        $this->ask_for_new_password = $ask_for_new_password;\n\n        return $this;\n    }\n\n    public function setPasswordRequired($password_is_required)\n    {\n        $this->password_is_required = $password_is_required;\n\n        return $this;\n    }\n\n    public function getFormat()\n    {\n        $format = [];\n\n        $format['id_customer'] = (new FormField())\n            ->setName('id_customer')\n            ->setType('hidden');\n\n        $genders = Gender::getGenders($this->language->id);\n        if ($genders->count() > 0) {\n            $genderField = (new FormField())\n                ->setName('id_gender')\n                ->setType('radio-buttons')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Social title',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                );\n            foreach ($genders as $gender) {\n                $genderField->addAvailableValue($gender->id, $gender->name);\n            }\n            $format[$genderField->getName()] = $genderField;\n        }\n\n        $format['firstname'] = (new FormField())\n            ->setName('firstname')\n            ->setLabel(\n                $this->translator->trans(\n                    'First name',\n                    [],\n                    'Shop.Forms.Labels'\n                )\n            )\n            ->setRequired(true);\n\n        $format['lastname'] = (new FormField())\n            ->setName('lastname')\n            ->setLabel(\n                $this->translator->trans(\n                    'Last name',\n                    [],\n                    'Shop.Forms.Labels'\n                )\n            )\n            ->setRequired(true);\n\n        if (Configuration::get('PS_B2B_ENABLE')) {\n            $format['company'] = (new FormField())\n                ->setName('company')\n                ->setType('text')\n                ->setLabel($this->translator->trans(\n                    'Company',\n                    [],\n                    'Shop.Forms.Labels'\n                ));\n            $format['siret'] = (new FormField())\n                ->setName('siret')\n                ->setType('text')\n                ->setLabel($this->translator->trans(\n                    // Please localize this string with the applicable registration number type in your country. For example : \"SIRET\" in France and \"C\u00f3digo fiscal\" in Spain.\n                    'Identification number',\n                    [],\n                    'Shop.Forms.Labels'\n                ));\n        }\n\n        $format['email'] = (new FormField())\n            ->setName('email')\n            ->setType('email')\n            ->setLabel(\n                $this->translator->trans(\n                    'Email',\n                    [],\n                    'Shop.Forms.Labels'\n                )\n            )\n            ->setRequired(true);\n\n        if ($this->ask_for_password) {\n            $format['password'] = (new FormField())\n                ->setName('password')\n                ->setType('password')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Password',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                )\n                ->setRequired($this->password_is_required);\n        }\n\n        if ($this->ask_for_new_password) {\n            $format['new_password'] = (new FormField())\n                ->setName('new_password')\n                ->setType('password')\n                ->setLabel(\n                    $this->translator->trans(\n                        'New password',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                );\n        }\n\n        if ($this->ask_for_birthdate) {\n            $format['birthday'] = (new FormField())\n                ->setName('birthday')\n                ->setType('text')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Birthdate',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                )\n                ->addAvailableValue('placeholder', Tools::getDateFormat())\n                ->addAvailableValue(\n                    'comment',\n                    $this->translator->trans('(E.g.: %date_format%)', array('%date_format%' => Tools::formatDateStr('31 May 1970')), 'Shop.Forms.Help')\n                );\n        }\n\n        if ($this->ask_for_partner_optin) {\n            $format['optin'] = (new FormField())\n                ->setName('optin')\n                ->setType('checkbox')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Receive offers from our partners',\n                        [],\n                        'Shop.Theme.Customeraccount'\n                    )\n                )\n                ->setRequired($this->partner_optin_is_required);\n        }\n\n        // ToDo, replace the hook exec with HookFinder when the associated PR will be merged\n        $additionalCustomerFormFields = Hook::exec('additionalCustomerFormFields', array(), null, true);\n\n        if (is_array($additionalCustomerFormFields)) {\n            foreach ($additionalCustomerFormFields as $moduleName => $additionnalFormFields) {\n                if (!is_array($additionnalFormFields)) {\n                    continue;\n                }\n\n                foreach ($additionnalFormFields as $formField) {\n                    $formField->moduleName = $moduleName;\n                    $format[$moduleName . '_' . $formField->getName()] = $formField;\n                }\n            }\n        }\n\n        // TODO: TVA etc.?\n\n        return $this->addConstraints($format);\n    }\n\n    private function addConstraints(array $format)\n    {\n        $constraints = Customer::$definition['fields'];\n\n        foreach ($format as $field) {\n            if (!empty($constraints[$field->getName()]['validate'])) {\n                $field->addConstraint(\n                    $constraints[$field->getName()]['validate']\n                );\n            }\n        }\n\n        return $format;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\n/**\n * StarterTheme TODO: FIXME:\n * In the old days, when updating an address, we actually:\n * - checked if the address was used by an order\n * - if so, just mark it as deleted and create a new one\n * - otherwise, update it like a normal entity\n * I *think* this is not necessary now because the invoicing thing\n * does its own historization. But this should be checked more thoroughly.\n */\nclass CustomerAddressFormCore extends AbstractForm\n{\n    private $language;\n\n    protected $template = 'customer/_partials/address-form.tpl';\n\n    private $address;\n\n    private $persister;\n\n    public function __construct(\n        Smarty $smarty,\n        Language $language,\n        TranslatorInterface $translator,\n        CustomerAddressPersister $persister,\n        CustomerAddressFormatter $formatter\n    ) {\n        parent::__construct(\n            $smarty,\n            $translator,\n            $formatter\n        );\n\n        $this->language = $language;\n        $this->persister = $persister;\n    }\n\n    public function loadAddressById($id_address)\n    {\n        $context = Context::getContext();\n\n        $this->address = new Address($id_address, $this->language->id);\n\n        if ($this->address->id === null) {\n            return Tools::redirect('index.php?controller=404');\n        }\n\n        if (!$context->customer->isLogged() && !$context->customer->isGuest()) {\n            return Tools::redirect('/index.php?controller=authentication');\n        }\n\n        if ($this->address->id_customer != $context->customer->id) {\n            return Tools::redirect('index.php?controller=404');\n        }\n\n        $params = get_object_vars($this->address);\n        $params['id_address'] = $this->address->id;\n\n        return $this->fillWith($params);\n    }\n\n    public function fillWith(array $params = [])\n    {\n        // This form is very tricky: fields may change depending on which\n        // country is being submitted!\n        // So we first update the format if a new id_country was set.\n        if (isset($params['id_country'])\n            && $params['id_country'] != $this->formatter->getCountry()->id\n        ) {\n            $this->formatter->setCountry(new Country(\n                $params['id_country'],\n                $this->language->id\n            ));\n        }\n\n        return parent::fillWith($params);\n    }\n\n    public function validate()\n    {\n        $is_valid = true;\n\n        if (($postcode = $this->getField('postcode'))) {\n            if ($postcode->isRequired()) {\n                $country = $this->formatter->getCountry();\n                if (!$country->checkZipCode($postcode->getValue())) {\n                    $postcode->addError($this->translator->trans(\n                        'Invalid postcode - should look like \"%zipcode%\"',\n                        array('%zipcode%' => $country->zip_code_format),\n                        'Shop.Forms.Errors'\n                    ));\n                    $is_valid = false;\n                }\n            }\n        }\n\n        if (($hookReturn = Hook::exec('actionValidateCustomerAddressForm', array('form' => $this))) !== '') {\n            $is_valid &= (bool) $hookReturn;\n        }\n\n        return $is_valid && parent::validate();\n    }\n\n    public function submit()\n    {\n        if (!$this->validate()) {\n            return false;\n        }\n\n        $address = new Address(\n            Tools::getValue('id_address'),\n            $this->language->id\n        );\n\n        foreach ($this->formFields as $formField) {\n            $address->{$formField->getName()} = $formField->getValue();\n        }\n\n        if (!isset($this->formFields['id_state'])) {\n            $address->id_state = 0;\n        }\n\n        if (empty($address->alias)) {\n            $address->alias = $this->translator->trans('My Address', [], 'Shop.Theme.Checkout');\n        }\n\n        Hook::exec('actionSubmitCustomerAddressForm', array('address' => &$address));\n\n        $this->setAddress($address);\n\n        return $this->getPersister()->save(\n            $address,\n            $this->getValue('token')\n        );\n    }\n\n    /**\n     * @return Address\n     */\n    public function getAddress()\n    {\n        return $this->address;\n    }\n\n    /**\n     * @return CustomerAddressPersister\n     */\n    protected function getPersister()\n    {\n        return $this->persister;\n    }\n\n    protected function setAddress(Address $address)\n    {\n        $this->address = $address;\n    }\n\n    public function getTemplateVariables()\n    {\n        $context = Context::getContext();\n\n        if (!$this->formFields) {\n            // This is usually done by fillWith but the form may be\n            // rendered before fillWith is called.\n            // I don't want to assign formFields in the constructor\n            // because it accesses the DB and a constructor should not\n            // have side effects.\n            $this->formFields = $this->formatter->getFormat();\n        }\n\n        $this->setValue('token', $this->persister->getToken());\n        $formFields = array_map(\n            function (FormField $item) {\n                return $item->toArray();\n            },\n            $this->formFields\n        );\n\n        if (empty($formFields['firstname']['value'])) {\n            $formFields['firstname']['value'] = $context->customer->firstname;\n        }\n\n        if (empty($formFields['lastname']['value'])) {\n            $formFields['lastname']['value'] = $context->customer->lastname;\n        }\n\n        return array(\n            'id_address' => (isset($this->address->id)) ? $this->address->id : 0,\n            'action' => $this->action,\n            'errors' => $this->getErrors(),\n            'formFields' => $formFields,\n        );\n    }\n}\n", "<?php\n\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass CustomerAddressFormatterCore implements FormFormatterInterface\n{\n    private $country;\n    private $translator;\n    private $availableCountries;\n    private $definition;\n\n    public function __construct(\n        Country $country,\n        TranslatorInterface $translator,\n        array $availableCountries\n    ) {\n        $this->country = $country;\n        $this->translator = $translator;\n        $this->availableCountries = $availableCountries;\n        $this->definition = Address::$definition['fields'];\n    }\n\n    public function setCountry(Country $country)\n    {\n        $this->country = $country;\n\n        return $this;\n    }\n\n    public function getCountry()\n    {\n        return $this->country;\n    }\n\n    public function getFormat()\n    {\n        $fields = AddressFormat::getOrderedAddressFields(\n            $this->country->id,\n            true,\n            true\n        );\n        $required = array_flip(AddressFormat::getFieldsRequired());\n\n        $format = [\n            'back' => (new FormField())\n                ->setName('back')\n                ->setType('hidden'),\n            'token' => (new FormField())\n                ->setName('token')\n                ->setType('hidden'),\n            'alias' => (new FormField())\n                ->setName('alias')\n                ->setLabel(\n                    $this->getFieldLabel('alias')\n                ),\n        ];\n\n        foreach ($fields as $field) {\n            $formField = new FormField();\n            $formField->setName($field);\n\n            $fieldParts = explode(':', $field, 2);\n\n            if (count($fieldParts) === 1) {\n                if ($field === 'postcode') {\n                    if ($this->country->need_zip_code) {\n                        $formField->setRequired(true);\n                    }\n                } elseif ($field === 'phone') {\n                    $formField->setType('tel');\n                } elseif ($field === 'dni' && null !== $this->country) {\n                    if ($this->country->need_identification_number) {\n                        $formField->setRequired(true);\n                    }\n                }\n            } elseif (count($fieldParts) === 2) {\n                list($entity, $entityField) = $fieldParts;\n\n                // Fields specified using the Entity:field\n                // notation are actually references to other\n                // entities, so they should be displayed as a select\n                $formField->setType('select');\n\n                // Also, what we really want is the id of the linked entity\n                $formField->setName('id_' . strtolower($entity));\n\n                if ($entity === 'Country') {\n                    $formField->setType('countrySelect');\n                    $formField->setValue($this->country->id);\n                    foreach ($this->availableCountries as $country) {\n                        $formField->addAvailableValue(\n                            $country['id_country'],\n                            $country[$entityField]\n                        );\n                    }\n                } elseif ($entity === 'State') {\n                    if ($this->country->contains_states) {\n                        $states = State::getStatesByIdCountry($this->country->id, true);\n                        foreach ($states as $state) {\n                            $formField->addAvailableValue(\n                                $state['id_state'],\n                                $state[$entityField]\n                            );\n                        }\n                        $formField->setRequired(true);\n                    }\n                }\n            }\n\n            $formField->setLabel($this->getFieldLabel($field));\n            if (!$formField->isRequired()) {\n                // Only trust the $required array for fields\n                // that are not marked as required.\n                // $required doesn't have all the info, and fields\n                // may be required for other reasons than what\n                // AddressFormat::getFieldsRequired() says.\n                $formField->setRequired(\n                    array_key_exists($field, $required)\n                );\n            }\n\n            $format[$formField->getName()] = $formField;\n        }\n\n        //To add the extra fields in address form\n        $additionalAddressFormFields = Hook::exec('additionalCustomerAddressFields', array(), null, true);\n        if (is_array($additionalAddressFormFields)) {\n            foreach ($additionalAddressFormFields as $moduleName => $additionnalFormFields) {\n                if (!is_array($additionnalFormFields)) {\n                    continue;\n                }\n\n                foreach ($additionnalFormFields as $formField) {\n                    $formField->moduleName = $moduleName;\n                    $format[$moduleName . '_' . $formField->getName()] = $formField;\n                }\n            }\n        }\n\n        return $this->addConstraints(\n                $this->addMaxLength(\n                    $format\n                )\n        );\n    }\n\n    private function addConstraints(array $format)\n    {\n        foreach ($format as $field) {\n            if (!empty($this->definition[$field->getName()]['validate'])) {\n                $field->addConstraint(\n                    $this->definition[$field->getName()]['validate']\n                );\n            }\n        }\n\n        return $format;\n    }\n\n    private function addMaxLength(array $format)\n    {\n        foreach ($format as $field) {\n            if (!empty($this->definition[$field->getName()]['size'])) {\n                $field->setMaxLength(\n                    $this->definition[$field->getName()]['size']\n                );\n            }\n        }\n\n        return $format;\n    }\n\n    private function getFieldLabel($field)\n    {\n        // Country:name => Country, Country:iso_code => Country,\n        // same label regardless of which field is used for mapping.\n        $field = explode(':', $field)[0];\n\n        switch ($field) {\n            case 'alias':\n                return $this->translator->trans('Alias', [], 'Shop.Forms.Labels');\n            case 'firstname':\n                return $this->translator->trans('First name', [], 'Shop.Forms.Labels');\n            case 'lastname':\n                return $this->translator->trans('Last name', [], 'Shop.Forms.Labels');\n            case 'address1':\n                return $this->translator->trans('Address', [], 'Shop.Forms.Labels');\n            case 'address2':\n                return $this->translator->trans('Address Complement', [], 'Shop.Forms.Labels');\n            case 'postcode':\n                return $this->translator->trans('Zip/Postal Code', [], 'Shop.Forms.Labels');\n            case 'city':\n                return $this->translator->trans('City', [], 'Shop.Forms.Labels');\n            case 'Country':\n                return $this->translator->trans('Country', [], 'Shop.Forms.Labels');\n            case 'State':\n                return $this->translator->trans('State', [], 'Shop.Forms.Labels');\n            case 'phone':\n                return $this->translator->trans('Phone', [], 'Shop.Forms.Labels');\n            case 'phone_mobile':\n                return $this->translator->trans('Mobile phone', [], 'Shop.Forms.Labels');\n            case 'company':\n                return $this->translator->trans('Company', [], 'Shop.Forms.Labels');\n            case 'vat_number':\n                return $this->translator->trans('VAT number', [], 'Shop.Forms.Labels');\n            case 'dni':\n                return $this->translator->trans('Identification number', [], 'Shop.Forms.Labels');\n            case 'other':\n                return $this->translator->trans('Other', [], 'Shop.Forms.Labels');\n            default:\n                return $field;\n        }\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\n/**\n * StarterTheme TODO: B2B fields, Genders, CSRF.\n */\nclass CustomerFormCore extends AbstractForm\n{\n    protected $template = 'customer/_partials/customer-form.tpl';\n\n    private $context;\n    private $urls;\n\n    private $customerPersister;\n    private $guest_allowed;\n    private $passwordRequired = true;\n\n    public function __construct(\n        Smarty $smarty,\n        Context $context,\n        TranslatorInterface $translator,\n        CustomerFormatter $formatter,\n        CustomerPersister $customerPersister,\n        array $urls\n    ) {\n        parent::__construct(\n            $smarty,\n            $translator,\n            $formatter\n        );\n\n        $this->context = $context;\n        $this->urls = $urls;\n        $this->customerPersister = $customerPersister;\n    }\n\n    public function setGuestAllowed($guest_allowed = true)\n    {\n        $this->formatter->setPasswordRequired(!$guest_allowed);\n        $this->guest_allowed = $guest_allowed;\n\n        return $this;\n    }\n\n    public function setPasswordRequired($passwordRequired)\n    {\n        $this->passwordRequired = $passwordRequired;\n\n        return $this;\n    }\n\n    public function fillFromCustomer(Customer $customer)\n    {\n        $params = get_object_vars($customer);\n        $params['birthday'] = $customer->birthday === '0000-00-00' ? null : Tools::displayDate($customer->birthday);\n\n        return $this->fillWith($params);\n    }\n\n    /**\n     * @return \\Customer\n     */\n    public function getCustomer()\n    {\n        $customer = new Customer($this->context->customer->id);\n\n        foreach ($this->formFields as $field) {\n            $customerField = $field->getName();\n            if (property_exists($customer, $customerField)) {\n                $customer->$customerField = $field->getValue();\n            }\n        }\n\n        return $customer;\n    }\n\n    public function validate()\n    {\n        $emailField = $this->getField('email');\n        $id_customer = Customer::customerExists($emailField->getValue(), true, true);\n        $customer = $this->getCustomer();\n        if ($id_customer && $id_customer != $customer->id) {\n            $emailField->addError($this->translator->trans(\n                'The email is already used, please choose another one or sign in',\n                array(),\n                'Shop.Notifications.Error'\n            ));\n        }\n\n        // check birthdayField against null case is mandatory.\n        $birthdayField = $this->getField('birthday');\n        if (!empty($birthdayField) &&\n            !empty($birthdayField->getValue()) &&\n            Validate::isBirthDate($birthdayField->getValue(), $this->context->language->date_format_lite)\n        ) {\n            $dateBuilt = DateTime::createFromFormat(\n                $this->context->language->date_format_lite,\n                $birthdayField->getValue()\n            );\n            $birthdayField->setValue($dateBuilt->format('Y-m-d'));\n        }\n        $this->validateFieldsLengths();\n        $this->validateByModules();\n\n        return parent::validate();\n    }\n\n    protected function validateFieldsLengths()\n    {\n        $this->validateFieldLength('email', 255, $this->getEmailMaxLengthViolationMessage());\n        $this->validateFieldLength('firstname', 255, $this->getFirstNameMaxLengthViolationMessage());\n        $this->validateFieldLength('lastname', 255, $this->getLastNameMaxLengthViolationMessage());\n    }\n\n    /**\n     * @param $fieldName\n     * @param $maximumLength\n     * @param $violationMessage\n     */\n    protected function validateFieldLength($fieldName, $maximumLength, $violationMessage)\n    {\n        $emailField = $this->getField($fieldName);\n        if (strlen($emailField->getValue()) > $maximumLength) {\n            $emailField->addError($violationMessage);\n        }\n    }\n\n    /**\n     * @return mixed\n     */\n    protected function getEmailMaxLengthViolationMessage()\n    {\n        return $this->translator->trans(\n            'The %1$s field is too long (%2$d chars max).',\n            array('email', 255),\n            'Shop.Notifications.Error'\n        );\n    }\n\n    protected function getFirstNameMaxLengthViolationMessage()\n    {\n        return $this->translator->trans(\n            'The %1$s field is too long (%2$d chars max).',\n            array('first name', 255),\n            'Shop.Notifications.Error'\n        );\n    }\n\n    protected function getLastNameMaxLengthViolationMessage()\n    {\n        return $this->translator->trans(\n            'The %1$s field is too long (%2$d chars max).',\n            array('last name', 255),\n            'Shop.Notifications.Error'\n        );\n    }\n\n    public function submit()\n    {\n        if ($this->validate()) {\n            $clearTextPassword = $this->getValue('password');\n            $newPassword = $this->getValue('new_password');\n\n            $ok = $this->customerPersister->save(\n                $this->getCustomer(),\n                $clearTextPassword,\n                $newPassword,\n                $this->passwordRequired\n            );\n\n            if (!$ok) {\n                foreach ($this->customerPersister->getErrors() as $field => $errors) {\n                    $this->formFields[$field]->setErrors($errors);\n                }\n            }\n\n            return $ok;\n        }\n\n        return false;\n    }\n\n    public function getTemplateVariables()\n    {\n        return [\n            'action' => $this->action,\n            'urls' => $this->urls,\n            'errors' => $this->getErrors(),\n            'hook_create_account_form' => Hook::exec('displayCustomerAccountForm'),\n            'formFields' => array_map(\n                function (FormField $field) {\n                    return $field->toArray();\n                },\n                $this->formFields\n            ),\n        ];\n    }\n\n    /**\n     * This function call the hook validateCustomerFormFields of every modules\n     * which added one or several fields to the customer registration form.\n     *\n     * Note: they won't get all the fields from the form, but only the one\n     * they added.\n     */\n    private function validateByModules()\n    {\n        $formFieldsAssociated = array();\n        // Group FormField instances by module name\n        foreach ($this->formFields as $formField) {\n            if (!empty($formField->moduleName)) {\n                $formFieldsAssociated[$formField->moduleName][] = $formField;\n            }\n        }\n        // Because of security reasons (i.e password), we don't send all\n        // the values to the module but only the ones it created\n        foreach ($formFieldsAssociated as $moduleName => $formFields) {\n            if ($moduleId = Module::getModuleIdByName($moduleName)) {\n                // ToDo : replace Hook::exec with HookFinder, because we expect a specific class here\n                $validatedCustomerFormFields = Hook::exec('validateCustomerFormFields', array('fields' => $formFields), $moduleId, true);\n\n                if (is_array($validatedCustomerFormFields)) {\n                    array_merge($this->formFields, $validatedCustomerFormFields);\n                }\n            }\n        }\n    }\n}\n", "<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\nuse Symfony\\Component\\Translation\\TranslatorInterface;\n\nclass CustomerFormatterCore implements FormFormatterInterface\n{\n    private $translator;\n    private $language;\n\n    private $ask_for_birthdate = true;\n    private $ask_for_partner_optin = true;\n    private $partner_optin_is_required = true;\n    private $ask_for_password = true;\n    private $password_is_required = true;\n    private $ask_for_new_password = false;\n\n    public function __construct(\n        TranslatorInterface $translator,\n        Language $language\n    ) {\n        $this->translator = $translator;\n        $this->language = $language;\n    }\n\n    public function setAskForBirthdate($ask_for_birthdate)\n    {\n        $this->ask_for_birthdate = $ask_for_birthdate;\n\n        return $this;\n    }\n\n    public function setAskForPartnerOptin($ask_for_partner_optin)\n    {\n        $this->ask_for_partner_optin = $ask_for_partner_optin;\n\n        return $this;\n    }\n\n    public function setPartnerOptinRequired($partner_optin_is_required)\n    {\n        $this->partner_optin_is_required = $partner_optin_is_required;\n\n        return $this;\n    }\n\n    public function setAskForPassword($ask_for_password)\n    {\n        $this->ask_for_password = $ask_for_password;\n\n        return $this;\n    }\n\n    public function setAskForNewPassword($ask_for_new_password)\n    {\n        $this->ask_for_new_password = $ask_for_new_password;\n\n        return $this;\n    }\n\n    public function setPasswordRequired($password_is_required)\n    {\n        $this->password_is_required = $password_is_required;\n\n        return $this;\n    }\n\n    public function getFormat()\n    {\n        $format = [];\n\n        $genders = Gender::getGenders($this->language->id);\n        if ($genders->count() > 0) {\n            $genderField = (new FormField())\n                ->setName('id_gender')\n                ->setType('radio-buttons')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Social title',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                );\n            foreach ($genders as $gender) {\n                $genderField->addAvailableValue($gender->id, $gender->name);\n            }\n            $format[$genderField->getName()] = $genderField;\n        }\n\n        $format['firstname'] = (new FormField())\n            ->setName('firstname')\n            ->setLabel(\n                $this->translator->trans(\n                    'First name',\n                    [],\n                    'Shop.Forms.Labels'\n                )\n            )\n            ->setRequired(true);\n\n        $format['lastname'] = (new FormField())\n            ->setName('lastname')\n            ->setLabel(\n                $this->translator->trans(\n                    'Last name',\n                    [],\n                    'Shop.Forms.Labels'\n                )\n            )\n            ->setRequired(true);\n\n        if (Configuration::get('PS_B2B_ENABLE')) {\n            $format['company'] = (new FormField())\n                ->setName('company')\n                ->setType('text')\n                ->setLabel($this->translator->trans(\n                    'Company',\n                    [],\n                    'Shop.Forms.Labels'\n                ));\n            $format['siret'] = (new FormField())\n                ->setName('siret')\n                ->setType('text')\n                ->setLabel($this->translator->trans(\n                    // Please localize this string with the applicable registration number type in your country. For example : \"SIRET\" in France and \"C\u00f3digo fiscal\" in Spain.\n                    'Identification number',\n                    [],\n                    'Shop.Forms.Labels'\n                ));\n        }\n\n        $format['email'] = (new FormField())\n            ->setName('email')\n            ->setType('email')\n            ->setLabel(\n                $this->translator->trans(\n                    'Email',\n                    [],\n                    'Shop.Forms.Labels'\n                )\n            )\n            ->setRequired(true);\n\n        if ($this->ask_for_password) {\n            $format['password'] = (new FormField())\n                ->setName('password')\n                ->setType('password')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Password',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                )\n                ->setRequired($this->password_is_required);\n        }\n\n        if ($this->ask_for_new_password) {\n            $format['new_password'] = (new FormField())\n                ->setName('new_password')\n                ->setType('password')\n                ->setLabel(\n                    $this->translator->trans(\n                        'New password',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                );\n        }\n\n        if ($this->ask_for_birthdate) {\n            $format['birthday'] = (new FormField())\n                ->setName('birthday')\n                ->setType('text')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Birthdate',\n                        [],\n                        'Shop.Forms.Labels'\n                    )\n                )\n                ->addAvailableValue('placeholder', Tools::getDateFormat())\n                ->addAvailableValue(\n                    'comment',\n                    $this->translator->trans('(E.g.: %date_format%)', array('%date_format%' => Tools::formatDateStr('31 May 1970')), 'Shop.Forms.Help')\n                );\n        }\n\n        if ($this->ask_for_partner_optin) {\n            $format['optin'] = (new FormField())\n                ->setName('optin')\n                ->setType('checkbox')\n                ->setLabel(\n                    $this->translator->trans(\n                        'Receive offers from our partners',\n                        [],\n                        'Shop.Theme.Customeraccount'\n                    )\n                )\n                ->setRequired($this->partner_optin_is_required);\n        }\n\n        // ToDo, replace the hook exec with HookFinder when the associated PR will be merged\n        $additionalCustomerFormFields = Hook::exec('additionalCustomerFormFields', array(), null, true);\n\n        if (is_array($additionalCustomerFormFields)) {\n            foreach ($additionalCustomerFormFields as $moduleName => $additionnalFormFields) {\n                if (!is_array($additionnalFormFields)) {\n                    continue;\n                }\n\n                foreach ($additionnalFormFields as $formField) {\n                    $formField->moduleName = $moduleName;\n                    $format[$moduleName . '_' . $formField->getName()] = $formField;\n                }\n            }\n        }\n\n        // TODO: TVA etc.?\n\n        return $this->addConstraints($format);\n    }\n\n    private function addConstraints(array $format)\n    {\n        $constraints = Customer::$definition['fields'];\n\n        foreach ($format as $field) {\n            if (!empty($constraints[$field->getName()]['validate'])) {\n                $field->addConstraint(\n                    $constraints[$field->getName()]['validate']\n                );\n            }\n        }\n\n        return $format;\n    }\n}\n"], "filenames": ["classes/form/CustomerAddressForm.php", "classes/form/CustomerAddressFormatter.php", "classes/form/CustomerForm.php", "classes/form/CustomerFormatter.php"], "buggy_code_start_loc": [137, 69, 79, 94], "buggy_code_end_loc": [138, 75, 126, 98], "fixing_code_start_loc": [137, 68, 78, 93], "fixing_code_end_loc": [138, 68, 122, 93], "type": "CWE-552", "message": "In PrestaShop before version 1.7.6.4, when a customer edits their address, they can freely change the id_address in the form, and thus steal someone else's address. It is the same with CustomerForm, you are able to change the id_customer and change all information of all accounts. The problem is patched in version 1.7.6.4.", "other": {"cve": {"id": "CVE-2020-5250", "sourceIdentifier": "security-advisories@github.com", "published": "2020-03-05T17:15:11.797", "lastModified": "2020-03-05T23:38:27.683", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop before version 1.7.6.4, when a customer edits their address, they can freely change the id_address in the form, and thus steal someone else's address. It is the same with CustomerForm, you are able to change the id_customer and change all information of all accounts. The problem is patched in version 1.7.6.4."}, {"lang": "es", "value": "En PrestaShop versiones anteriores a 1.7.6.4, cuando un cliente edita su direcci\u00f3n, ellos pueden cambiar libremente el id_address en el formulario y, por lo tanto, robar la direcci\u00f3n de otra persona. Es lo mismo con CustomerForm, pueden ser capaces de cambiar el id_customer y cambiar toda la informaci\u00f3n de todas las cuentas. El problema est\u00e1 parcheado en la versi\u00f3n 1.7.6.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-552"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-285"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.7.0.0", "versionEndExcluding": "1.7.6.4", "matchCriteriaId": "8A962EF6-2B49-4AF9-AD33-4AAAE7D4E087"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/a4a609b5064661f0b47ab5bc538e1a9cd3dd1069", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-mhfc-6rhg-fxp3", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/a4a609b5064661f0b47ab5bc538e1a9cd3dd1069"}}