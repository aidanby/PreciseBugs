{"buggy_code": ["package talentum.escenic.plugins.authenticator.authenticators;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport neo.dbaccess.Transaction;\nimport neo.dbaccess.TransactionOperation;\nimport neo.xredsys.content.ContentManager;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport talentum.escenic.plugins.authenticator.AuthenticationException;\nimport talentum.escenic.plugins.authenticator.RegistrationException;\nimport talentum.escenic.plugins.authenticator.ReminderException;\n\n/**\n * Database authenticator.\n * \n * @author stefan.norman\n */\npublic class DBAuthenticator extends Authenticator {\n\n\tprivate static Log log = LogFactory.getLog(DBAuthenticator.class);\n\n\tprivate String table;\n\tprivate String userClass;\n\tprivate HashMap columns = new HashMap();\n\n\tpublic String getTable() {\n\t\treturn table;\n\t}\n\n\tpublic void setTable(String table) {\n\t\tthis.table = table;\n\t}\n\n\tpublic String getUserClass() {\n\t\treturn userClass;\n\t}\n\n\tpublic void setUserClass(String userClass) {\n\t\tthis.userClass = userClass;\n\t}\n\n\tpublic void addColumn(String column,\n\t\t\tString columnName) {\n\t\tcolumns.put(column, columnName);\n\t}\n\n\tpublic AuthenticatedUser authenticate(String username, String password,\n\t\t\tString ipaddress) throws AuthenticationException {\n\t\tAuthenticatedUser user = null;\n\t\tif (username == null || username.trim().length() == 0\n\t\t\t\t|| password == null || password.trim().length() == 0) {\n\t\t\tthrow new AuthenticationException(\n\t\t\t\t\t\"Authentication failed: Invalid arguments\");\n\t\t}\n\t\ttry {\n\n\t\t\tContentManager contentManager = ContentManager.getContentManager();\n\t\t\tList result = new ArrayList();\n\t\t\tString sql = \"SELECT * FROM \" + table + \" WHERE \"\n\t\t\t\t\t+ columns.get(\"username\") + \"= ? AND \"\n\t\t\t\t\t+ columns.get(\"password\") + \"= '?'\";\n\t\t\t\n\t\t\tString[] preparedVariables = new String[] {username, password};\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\tif(log.isDebugEnabled()) {\n\t\t\t\tlog.debug(sql);\n\t\t\t}\n\t\t\tcontentManager.doQuery(new Query(sql, preparedVariables, result));\n\t\t\t\n\t\t\tif(log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"found \" + result.size() + \" records\");\n\t\t\t}\n\t\t\tif(result.size() > 0) {\n\t\t\t\t// get the first found row and create user object\n\t\t\t\tMap row = (Map) result.get(0);\n\n\t\t\t\t// intantiate the user class an add the map\n\t\t\t\tClass clazz = Class.forName(userClass);\n\t\t\t\tif(log.isDebugEnabled()) {\n\t\t\t\t\tlog.debug(\"creating user class \" + clazz.getName());\n\t\t\t\t}\n\t\t\t\tDBUser dbUser = (DBUser)clazz.newInstance();\n\t\t\t\tdbUser.init(row);\n\t\t\t\tuser = dbUser;\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Authentication failed: Finding user failed\");\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t\tif (user == null) {\n\t\t\tthrow new AuthenticationException(\n\t\t\t\t\t\"Authentication failed: User not found\");\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic void logout(String token) {\n\t\t// do nothing\n\t}\n\n\tpublic void passwordReminder(String emailAddress, String publication)\n\t\t\tthrows ReminderException {\n\t\t// do nothing\n\t}\n\n\tpublic void register(String username, String password)\n\t\t\tthrows RegistrationException {\n\t\t// do nothing\n\t}\n\n\tprivate Comparator getComparator() {\n\t\treturn new Comparator() {\n\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\tString[] arr1 = (String[]) o1;\n\t\t\t\tString[] arr2 = (String[]) o2;\n\t\t\t\tInteger i1 = new Integer(arr1[2]);\n\t\t\t\tInteger i2 = new Integer(arr2[2]);\n\t\t\t\treturn i1.compareTo(i2);\n\t\t\t}\n\t\t};\n\t}\n\t\n\tprivate static class Query implements TransactionOperation {\n\t\tprivate String query;\n\t\tprivate List list;\n\t\tprivate String[] variables;\n\n\t\tpublic Query(String query, String[] variables, List list) {\n\t\t\tthis.query = query;\n\t\t\tthis.variables = variables;\n\t\t\tthis.list = list;\n\t\t}\n\n\t\tpublic void execute(Transaction t) throws SQLException {\n\t\t\t//Statement st = t.getConnection().createStatement();\n\t\t\tStatement st = t.getConnection().prepareStatement(query, variables);\n\t\t\ttry {\n\t\t\t\tResultSet rs = st.executeQuery(query);\n\t\t\t\tResultSetMetaData metaData = rs.getMetaData();\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tMap map = new HashMap();\n\t\t\t\t\tfor (int i = 0; i < metaData.getColumnCount(); i++) {\n\t\t\t\t\t\tmap.put(metaData.getColumnLabel(i + 1), rs.getString(i + 1));\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(map);\n\t\t\t\t}\n\t        } finally {\n\t            st.close();\n\t        }\n\t\t}\n\t}\n}"], "fixing_code": ["package talentum.escenic.plugins.authenticator.authenticators;\n\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.ResultSetMetaData;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport neo.dbaccess.Transaction;\nimport neo.dbaccess.TransactionOperation;\nimport neo.xredsys.content.ContentManager;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\nimport talentum.escenic.plugins.authenticator.AuthenticationException;\nimport talentum.escenic.plugins.authenticator.RegistrationException;\nimport talentum.escenic.plugins.authenticator.ReminderException;\n\n/**\n * Database authenticator.\n * \n * @author stefan.norman\n */\npublic class DBAuthenticator extends Authenticator {\n\n\tprivate static Log log = LogFactory.getLog(DBAuthenticator.class);\n\n\tprivate String table;\n\tprivate String userClass;\n\tprivate HashMap columns = new HashMap();\n\n\tpublic String getTable() {\n\t\treturn table;\n\t}\n\n\tpublic void setTable(String table) {\n\t\tthis.table = table;\n\t}\n\n\tpublic String getUserClass() {\n\t\treturn userClass;\n\t}\n\n\tpublic void setUserClass(String userClass) {\n\t\tthis.userClass = userClass;\n\t}\n\n\tpublic void addColumn(String column,\n\t\t\tString columnName) {\n\t\tcolumns.put(column, columnName);\n\t}\n\n\tpublic AuthenticatedUser authenticate(String username, String password,\n\t\t\tString ipaddress) throws AuthenticationException {\n\t\tAuthenticatedUser user = null;\n\t\tif (username == null || username.trim().length() == 0\n\t\t\t\t|| password == null || password.trim().length() == 0) {\n\t\t\tthrow new AuthenticationException(\n\t\t\t\t\t\"Authentication failed: Invalid arguments\");\n\t\t}\n\t\ttry {\n\n\n\t\t\tContentManager contentManager = ContentManager.getContentManager();\n\t\t\tList result = new ArrayList();\n\t\t\tString sql = \"SELECT * FROM \" + table + \" WHERE \"\n\t\t\t\t\t+ columns.get(\"username\") + \"= ? AND \"\n\t\t\t\t\t+ columns.get(\"password\") + \"= ?\";\n\t\t\tif(log.isDebugEnabled()) {\n\t\t\t\tlog.debug(sql);\n\t\t\t}\n\t\t\tcontentManager.doQuery(new Query(sql, new String[] { username, password },  result));\n\t\t\t\n\t\t\tif(log.isDebugEnabled()) {\n\t\t\t\tlog.debug(\"found \" + result.size() + \" records\");\n\t\t\t}\n\t\t\tif(result.size() > 0) {\n\t\t\t\t// get the first found row and create user object\n\t\t\t\tMap row = (Map) result.get(0);\n\n\t\t\t\t// intantiate the user class an add the map\n\t\t\t\tClass clazz = Class.forName(userClass);\n\t\t\t\tif(log.isDebugEnabled()) {\n\t\t\t\t\tlog.debug(\"creating user class \" + clazz.getName());\n\t\t\t\t}\n\t\t\t\tDBUser dbUser = (DBUser)clazz.newInstance();\n\t\t\t\tdbUser.init(row);\n\t\t\t\tuser = dbUser;\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Authentication failed: Finding user failed\");\n\t\t\tif (log.isDebugEnabled()) {\n\t\t\t\tlog.debug(e.getMessage(), e);\n\t\t\t}\n\t\t}\n\t\tif (user == null) {\n\t\t\tthrow new AuthenticationException(\n\t\t\t\t\t\"Authentication failed: User not found\");\n\t\t}\n\t\treturn user;\n\t}\n\n\tpublic void logout(String token) {\n\t\t// do nothing\n\t}\n\n\tpublic void passwordReminder(String emailAddress, String publication)\n\t\t\tthrows ReminderException {\n\t\t// do nothing\n\t}\n\n\tpublic void register(String username, String password)\n\t\t\tthrows RegistrationException {\n\t\t// do nothing\n\t}\n\n\tprivate Comparator getComparator() {\n\t\treturn new Comparator() {\n\t\t\tpublic int compare(Object o1, Object o2) {\n\t\t\t\tString[] arr1 = (String[]) o1;\n\t\t\t\tString[] arr2 = (String[]) o2;\n\t\t\t\tInteger i1 = new Integer(arr1[2]);\n\t\t\t\tInteger i2 = new Integer(arr2[2]);\n\t\t\t\treturn i1.compareTo(i2);\n\t\t\t}\n\t\t};\n\t}\n\t\n\tprivate static class Query implements TransactionOperation {\n\t\tprivate String query;\n\t\tprivate String[] args;\n\t\tprivate List list;\n\n\t\tpublic Query(String query, String[] args, List list) {\n\t\t\tthis.query = query;\n\t\t\tthis.args = args;\n\t\t\tthis.list = list;\n\t\t}\n\n\t\tpublic void execute(Transaction t) throws SQLException {\n\t\t\tPreparedStatement prepStmt = t.getConnection().prepareStatement(query);\n\t\t\tprepStmt.setString(1, args[0]);\n\t\t\tprepStmt.setString(2, args[1]);\n\t\t\ttry {\n\t\t\t\tResultSet rs = prepStmt.executeQuery();\n\t\t\t\tResultSetMetaData metaData = rs.getMetaData();\n\t\t\t\twhile (rs.next()) {\n\t\t\t\t\tMap map = new HashMap();\n\t\t\t\t\tfor (int i = 0; i < metaData.getColumnCount(); i++) {\n\t\t\t\t\t\tmap.put(metaData.getColumnLabel(i + 1), rs.getString(i + 1));\n\t\t\t\t\t}\n\t\t\t\t\tlist.add(map);\n\t\t\t\t}\n\t        } finally {\n\t        \tprepStmt.close();\n\t        }\n\t\t}\n\t}\n}"], "filenames": ["src/java/talentum/escenic/plugins/authenticator/authenticators/DBAuthenticator.java"], "buggy_code_start_loc": [3], "buggy_code_end_loc": [167], "fixing_code_start_loc": [2], "fixing_code_end_loc": [162], "type": "CWE-89", "message": "A vulnerability was found in Bricco Authenticator Plugin. It has been declared as critical. This vulnerability affects the function authenticate/compare of the file src/java/talentum/escenic/plugins/authenticator/authenticators/DBAuthenticator.java. The manipulation leads to sql injection. Upgrading to version 1.39 is able to address this issue. The name of the patch is a5456633ff75e8f13705974c7ed1ce77f3f142d5. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218428.", "other": {"cve": {"id": "CVE-2013-10013", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-17T16:15:16.060", "lastModified": "2023-01-24T19:12:10.020", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Bricco Authenticator Plugin. It has been declared as critical. This vulnerability affects the function authenticate/compare of the file src/java/talentum/escenic/plugins/authenticator/authenticators/DBAuthenticator.java. The manipulation leads to sql injection. Upgrading to version 1.39 is able to address this issue. The name of the patch is a5456633ff75e8f13705974c7ed1ce77f3f142d5. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-218428."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:authenticator_plugin_project:authenticator_plugin:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.39", "matchCriteriaId": "F905E3D7-B3E1-4D78-9B80-17F14EC09F49"}]}]}], "references": [{"url": "https://github.com/Bricco/authenticator-plugin/commit/a5456633ff75e8f13705974c7ed1ce77f3f142d5", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Bricco/authenticator-plugin/releases/tag/1.39", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218428", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.218428", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/Bricco/authenticator-plugin/commit/a5456633ff75e8f13705974c7ed1ce77f3f142d5"}}