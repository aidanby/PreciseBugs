{"buggy_code": ["<?php\n/**\n ***********************************************************************************************\n * Various common functions\n *\n * @copyright 2004-2021 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\nif (basename($_SERVER['SCRIPT_FILENAME']) === 'function.php') {\n    exit('This page may not be called directly!');\n}\n\n/**\n * Function checks if the user is a member of the role.\n * If **userId** is not set than this will be checked for the current user\n * @param string $roleName The name of the role where the membership of the user should be checked\n * @param int    $userId   The id of the user who should be checked if he is a member of the role.\n *                         If @userId is not set than this will be checked for the current user\n * @return bool Returns **true** if the user is a member of the role\n */\nfunction hasRole($roleName, $userId = 0)\n{\n    if ($userId === 0) {\n        $userId = $GLOBALS['gCurrentUserId'];\n    }\n\n    $sql = 'SELECT mem_id\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n             WHERE mem_usr_id = ? -- $userId\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end    > ? -- DATE_NOW\n               AND rol_name   = ? -- $roleName\n               AND rol_valid  = true\n               AND (  cat_org_id = ? -- $GLOBALS[\\'gCurrentOrgId\\'\n                   OR cat_org_id IS NULL )';\n    $statement = $GLOBALS['gDb']->queryPrepared($sql, array($userId, DATE_NOW, DATE_NOW, $roleName, $GLOBALS['gCurrentOrgId']));\n\n    return $statement->rowCount() === 1;\n}\n\n/**\n * Function checks if the user is a member in a role of the current organization.\n * @param int $userId The id of the user who should be checked if he is a member of the current organization\n * @return bool Returns **true** if the user is a member\n */\nfunction isMember($userId)\n{\n    if ($userId === 0) {\n        return false;\n    }\n\n    $sql = 'SELECT COUNT(*) AS count\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n             WHERE mem_usr_id = ? -- $userId\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end    > ? -- DATE_NOW\n               AND rol_valid  = true\n               AND (  cat_org_id = ? -- $GLOBALS[\\'gCurrentOrgId\\']\n                   OR cat_org_id IS NULL )';\n    $statement = $GLOBALS['gDb']->queryPrepared($sql, array($userId, DATE_NOW, DATE_NOW, $GLOBALS['gCurrentOrgId']));\n\n    return $statement->fetchColumn() > 0;\n}\n\n/**\n * Function checks if the user is a group leader in a role of the current organization.\n * If you use the **roleId** parameter you can check if the user is group leader of that role.\n * @param int $userId The id of the user who should be checked if he is a group leader\n * @param int $roleId (optional) If set <> 0 than the function checks if the user is group leader of this role\n *                    otherwise it checks if the user is group leader in one role of the current organization\n * @return bool Returns **true** if the user is a group leader\n */\nfunction isGroupLeader($userId, $roleId = 0)\n{\n    if ($userId === 0) {\n        return false;\n    }\n\n    $sql = 'SELECT mem_id\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n             WHERE mem_usr_id = ? -- $userId\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end    > ? -- DATE_NOW\n               AND mem_leader = true\n               AND rol_valid  = true\n               AND (  cat_org_id = ? -- $GLOBALS[\\'gCurrentOrgId\\']\n                   OR cat_org_id IS NULL )';\n    $queryParams = array($userId, DATE_NOW, DATE_NOW, $GLOBALS['gCurrentOrgId']);\n\n    if ($roleId > 0) {\n        $sql .= ' AND mem_rol_id = ? -- $roleId';\n        $queryParams[] = $roleId;\n    }\n\n    $statement = $GLOBALS['gDb']->queryPrepared($sql, $queryParams);\n\n    return $statement->rowCount() > 0;\n}\n\n/**\n * diese Funktion gibt eine Seitennavigation in Anhaengigkeit der Anzahl Seiten zurueck\n * Teile dieser Funktion sind von generatePagination aus phpBB2\n * Beispiel:\n *     Seite: < Vorherige 1  2  3 ... 9  10  11 Naechste >\n *\n * @param string $baseUrl                  Basislink zum Modul (auch schon mit notwendigen Uebergabevariablen)\n * @param int    $itemsCount               Gesamtanzahl an Elementen\n * @param int    $itemsPerPage             Anzahl Elemente pro Seite\n * @param int    $pageStartItem            Mit dieser Elementnummer beginnt die aktuelle Seite\n * @param bool   $addPrevNextText          Links mit \"Vorherige\" \"Naechste\" anzeigen\n * @param string $queryParamName (optional) You can set a new name for the parameter that should be used as start parameter.\n * @return string\n */\nfunction admFuncGeneratePagination($baseUrl, $itemsCount, $itemsPerPage, $pageStartItem, $addPrevNextText = true, $queryParamName = 'start')\n{\n    global $gL10n;\n\n    if ($itemsCount === 0 || $itemsPerPage === 0) {\n        return '';\n    }\n\n    $totalPagesCount = (int) ceil($itemsCount / $itemsPerPage);\n\n    if ($totalPagesCount <= 1) {\n        return '';\n    }\n\n    /**\n     * @param int    $start\n     * @param int    $end\n     * @param int    $page\n     * @param string $url\n     * @param string $paramName\n     * @param int    $itemsPerPage\n     * @return string\n     */\n    function getListElementsFromTo($start, $end, $page, $url, $paramName, $itemsPerPage)\n    {\n        $pageNavString = '';\n\n        for ($i = $start; $i < $end; ++$i) {\n            if ($i === $page) {\n                $pageNavString .= getListElementString((string) $i, 'page-item active');\n            } else {\n                $pageNavString .= getListElementString((string) $i, 'page-item', $url, $paramName, ($i - 1) * $itemsPerPage);\n            }\n        }\n\n        return $pageNavString;\n    }\n\n    /**\n     * @param string $linkText\n     * @param string $className\n     * @param string $url\n     * @param string $paramName\n     * @param int    $paramValue\n     * @return string\n     */\n    function getListElementString($linkText, $className = '', $url = '', $paramName = '', $paramValue = null)\n    {\n        $classString = '';\n        if ($className !== '') {\n            $classString = ' class=\"'.$className.'\"';\n        }\n\n        $urlString = '#';\n        if ($url !== '') {\n            $urlString = $url.'&'.$paramName.'='.$paramValue;\n        }\n\n        return '<li'.$classString.'><a class=\"page-link\" href=\"'.$urlString.'\">'.$linkText.'</a></li>';\n    }\n\n    $onPage = (int) floor($pageStartItem / $itemsPerPage) + 1;\n\n    $pageNavigationString = '';\n\n    if ($totalPagesCount > 7) {\n        $initPageMax = ($totalPagesCount > 3) ? 3 : $totalPagesCount;\n\n        $pageNavigationString .= getListElementsFromTo(1, $initPageMax + 1, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n\n        if ($totalPagesCount > 3) {\n            $disabledLink = '<li class=\"page-item disabled\"><a>...</a></li>';\n\n            if ($onPage > 1 && $onPage < $totalPagesCount) {\n                $pageNavigationString .= ($onPage > 5) ? $disabledLink : '&nbsp;&nbsp;';\n\n                $initPageMin = ($onPage > 4) ? $onPage : 5;\n                $initPageMax = ($onPage < $totalPagesCount - 4) ? $onPage : $totalPagesCount - 4;\n\n                $pageNavigationString .= getListElementsFromTo($initPageMin - 1, $initPageMax + 2, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n\n                $pageNavigationString .= ($onPage < $totalPagesCount - 4) ? $disabledLink : '&nbsp;&nbsp;';\n            } else {\n                $pageNavigationString .= $disabledLink;\n            }\n\n            $pageNavigationString .= getListElementsFromTo($totalPagesCount - 2, $totalPagesCount + 1, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n        }\n    } else {\n        $pageNavigationString .= getListElementsFromTo(1, $totalPagesCount + 1, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n    }\n\n    if ($addPrevNextText) {\n        $pageNavClassPrev = '';\n        if ($onPage === 1) {\n            $pageNavClassPrev = 'page-item disabled';\n        }\n\n        $pageNavClassNext = '';\n        if ($onPage === $totalPagesCount) {\n            $pageNavClassNext = 'page-item disabled';\n        }\n\n        $pageNavigationPrevText = getListElementString($gL10n->get('SYS_BACK'), $pageNavClassPrev, $baseUrl, $queryParamName, ($onPage - 2) * $itemsPerPage);\n        $pageNavigationNextText = getListElementString($gL10n->get('SYS_PAGE_NEXT'), $pageNavClassNext, $baseUrl, $queryParamName, $onPage * $itemsPerPage);\n\n        $pageNavigationString = $pageNavigationPrevText.$pageNavigationString.$pageNavigationNextText;\n    }\n\n    $pageNavigationString = '<nav><ul class=\"pagination\">'.$pageNavigationString.'</ul></nav>';\n\n    return $pageNavigationString;\n}\n\n/**\n * Funktion gibt die maximale Pixelzahl zur\u00fcck die der Speicher verarbeiten kann\n * @return int\n */\nfunction admFuncProcessableImageSize()\n{\n    $memoryLimit = PhpIniUtils::getMemoryLimit();\n    // if memory_limit is disabled in php.ini\n    if (is_infinite($memoryLimit)) {\n        $memoryLimit = 128 * 1024 * 1024; // 128MB\n    }\n\n    // For each Pixel 3 Bytes are necessary (RGB)\n    $bytesPerPixel = 3;\n    // der Speicher muss doppelt zur Verf\u00fcgung stehen\n    // nach ein paar tests hat sich 2.5x als sicher herausgestellt\n    $factor = 2.5;\n\n    return (int) round($memoryLimit / ($bytesPerPixel * $factor));\n}\n\n/**\n * Verify the content of an array element if it's the expected datatype\n *\n * The function is designed to check the content of **$_GET** and **$_POST** elements and should be used at the\n * beginning of a script. If the value of the defined datatype is not valid then an error will be shown. If no\n * value was set then the parameter will be initialized. The function can be used with every array and their elements.\n * You can set several flags (like required value, datatype \u2026) that should be checked.\n *\n * @param array<string,mixed> $array        The array with the element that should be checked\n * @param string              $variableName Name of the array element that should be checked\n * @param string              $datatype     The datatype like **string**, **numeric**, **int**, **float**, **bool**, **boolean**, **html**,\n *                                          **date**, **file** or **folder** that is expected and which will be checked.\n *                                          Datatype **date** expects a date that has the Admidio default format from the\n *                                          preferences or the english date format **Y-m-d**\n * @param array<string,mixed> $options      (optional) An array with the following possible entries:\n *                                          - defaultValue : A value that will be set if the variable has no value\n *                                          - **requireValue** : If set to **true** than a value is required otherwise the function\n *                                                              returns an error\n *                                          - **validValues** :  An array with all values that the variable could have. If another\n *                                                              value is found than the function returns an error\n *                                          - **directOutput** : If set to **true** the function returns only the error string, if set\n *                                                              to false a html message with the error will be returned\n * @return mixed|null Returns the value of the element or the error message if a test failed\n *\n * **Code example**\n * ```\n * // numeric value that would get a default value 0 if not set\n * $getDateId = admFuncVariableIsValid($_GET, 'dat_id', 'numeric', array('defaultValue' => 0));\n *\n * // string that will be initialized with text of id DAT_DATES\n * $getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('DAT_DATES')));\n *\n * // string initialized with actual and the only allowed values are actual and old\n * $getMode = admFuncVariableIsValid($_GET, 'mode', 'string', array('defaultValue' => 'actual', 'validValues' => array('actual', 'old')));\n * ```\n */\nfunction admFuncVariableIsValid(array $array, $variableName, $datatype, array $options = array())\n{\n    global $gL10n, $gMessage, $gSettingsManager;\n\n    // create array with all options\n    $optionsDefault = array('defaultValue' => null, 'requireValue' => false, 'validValues' => null, 'directOutput' => null);\n    $optionsAll     = array_replace($optionsDefault, $options);\n\n    $errorMessage = '';\n    $value = null;\n\n    // set default value for each datatype if no value is given and no value was required\n    if (array_key_exists($variableName, $array) && $array[$variableName] !== '') {\n        $value = $array[$variableName];\n    } else {\n        if ($optionsAll['requireValue']) {\n            // if value is required an no value is given then show error\n            $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n        } elseif ($optionsAll['defaultValue'] !== null) {\n            // if a default value was set then take this value\n            $value = $optionsAll['defaultValue'];\n        } else {\n            // no value set then initialize the parameter\n            if ($datatype === 'bool' || $datatype === 'boolean') {\n                $value = false;\n            } elseif ($datatype === 'numeric' || $datatype === 'int') {\n                $value = 0;\n            } elseif ($datatype === 'float') {\n                $value = 0.0;\n            } else {\n                $value = '';\n            }\n\n            return $value;\n        }\n    }\n\n    // check if parameter has a valid value\n    // do a strict check with in_array because the function don't work properly\n    if ($optionsAll['validValues'] !== null && !in_array($value, $optionsAll['validValues'], true)) {\n        $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n    }\n\n    switch ($datatype) {\n        case 'file':\n            try {\n                if ($value !== '') {\n                    StringUtils::strIsValidFileName($value, false);\n                }\n            } catch (AdmException $e) {\n                $errorMessage = $e->getText();\n            }\n            break;\n\n        case 'date':\n            // check if date is a valid Admidio date format\n            $objAdmidioDate = \\DateTime::createFromFormat($gSettingsManager->getString('system_date'), $value);\n\n            if (!$objAdmidioDate) {\n                // check if date has english format\n                $objEnglishDate = \\DateTime::createFromFormat('Y-m-d', $value);\n\n                if (!$objEnglishDate) {\n                    $errorMessage = $gL10n->get('SYS_NOT_VALID_DATE_FORMAT', array($variableName));\n                }\n            }\n            break;\n\n        case 'bool': // fallthrough\n        case 'boolean':\n            $valid = filter_var($value, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);\n            if ($valid === null) {\n                $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n            }\n            $value = $valid;\n            break;\n\n        case 'int': // fallthrough\n        case 'float': // fallthrough\n        case 'numeric':\n            // numeric datatype should only contain numbers\n            if (!is_numeric($value)) {\n                $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n            } else {\n                if ($datatype === 'int') {\n                    $value = filter_var($value, FILTER_VALIDATE_INT);\n                } elseif ($datatype === 'float') {\n                    $value = filter_var($value, FILTER_VALIDATE_FLOAT);\n                } else {\n                    // https://www.php.net/manual/en/function.is-numeric.php#107326\n                    $value += 0;\n                }\n            }\n            break;\n\n        case 'string':\n            $value = SecurityUtils::encodeHTML(StringUtils::strStripTags($value));\n            break;\n\n        case 'html':\n            // check html string vor invalid tags and scripts\n            $value = Htmlawed::filter(stripslashes($value), array('safe' => 1));\n            break;\n    }\n\n    // wurde kein Fehler entdeckt, dann den Inhalt der Variablen zurueckgeben\n    if ($errorMessage === '') {\n        return $value;\n    }\n\n    if (isset($gMessage) && $gMessage instanceof Message) {\n        if ($optionsAll['directOutput']) {\n            $gMessage->showTextOnly(true);\n        }\n\n        $gMessage->show($errorMessage);\n    // => EXIT\n    } else {\n        echo $errorMessage;\n        exit();\n    }\n\n    return null;\n}\n\n/**\n * Creates a html fragment with information about user and time when the recordset was created\n * and when it was at last edited. Therefore all necessary data must be set in the function\n * parameters. If userId is not set then the function will show **deleted user**.\n * @param int         $userIdCreated   Id of the user who create the recordset.\n * @param string      $timestampCreate Date and time of the moment when the user create the recordset.\n * @param int         $userIdEdited    Id of the user last changed the recordset.\n * @param string|null $timestampEdited Date and time of the moment when the user last changed the recordset\n * @return string Returns a html string with usernames who creates item and edit item the last time\n */\nfunction admFuncShowCreateChangeInfoById($userIdCreated, $timestampCreate, $userIdEdited = 0, $timestampEdited = null)\n{\n    global $gDb, $gProfileFields, $gL10n, $gSettingsManager;\n\n    // only show info if system setting is activated\n    if ((int) $gSettingsManager->get('system_show_create_edit') === 0) {\n        return '';\n    }\n\n    // compose name of user who create the recordset\n    $htmlCreateName = '';\n    $userUuidCreated = '';\n    if ($timestampCreate) {\n        if ($userIdCreated > 0) {\n            $userCreate = new User($gDb, $gProfileFields, $userIdCreated);\n            $userUuidCreated = $userCreate->getValue('usr_uuid');\n\n            if ((int) $gSettingsManager->get('system_show_create_edit') === 1) {\n                $htmlCreateName = $userCreate->getValue('FIRST_NAME') . ' ' . $userCreate->getValue('LAST_NAME');\n            } else {\n                $htmlCreateName = $userCreate->getValue('usr_login_name');\n            }\n        } else {\n            $htmlCreateName = $gL10n->get('SYS_DELETED_USER');\n        }\n    }\n\n    // compose name of user who edit the recordset\n    $htmlEditName = '';\n    $userUuidEdited = '';\n    if ($timestampEdited) {\n        if ($userIdEdited > 0) {\n            $userEdit = new User($gDb, $gProfileFields, $userIdEdited);\n            $userUuidEdited = $userEdit->getValue('usr_uuid');\n\n            if ((int) $gSettingsManager->get('system_show_create_edit') === 1) {\n                $htmlEditName = $userEdit->getValue('FIRST_NAME') . ' ' . $userEdit->getValue('LAST_NAME');\n            } else {\n                $htmlEditName = $userEdit->getValue('usr_login_name');\n            }\n        } else {\n            $htmlEditName = $gL10n->get('SYS_DELETED_USER');\n        }\n    }\n\n    if ($htmlCreateName === '' && $htmlEditName === '') {\n        return '';\n    }\n\n    // get html output from other function\n    return admFuncShowCreateChangeInfoByName(\n        $htmlCreateName,\n        $timestampCreate,\n        $htmlEditName,\n        $timestampEdited,\n        $userUuidCreated,\n        $userUuidEdited\n    );\n}\n\n/**\n * Creates a html fragment with information about user and time when the recordset was created\n * and when it was at last edited. Therefore all necessary data must be set in the function\n * parameters. If user name is not set then the function will show **deleted user**.\n * @param string      $userNameCreated Id of the user who create the recordset.\n * @param string      $timestampCreate Date and time of the moment when the user create the recordset.\n * @param string|null $userNameEdited  Id of the user last changed the recordset.\n * @param string|null $timestampEdited Date and time of the moment when the user last changed the recordset\n * @param string      $userUuidCreated  (optional) The uuid of the user who create the recordset.\n *                                      If uuid is set than a link to the user profile will be created\n * @param string      $userUuidEdited   (optional) The uuid of the user last changed the recordset.\n *                                      If uuid is set than a link to the user profile will be created\n * @return string Returns a html string with usernames who creates item and edit item the last time\n */\nfunction admFuncShowCreateChangeInfoByName($userNameCreated, $timestampCreate, $userNameEdited = null, $timestampEdited = null, $userUuidCreated = '', $userUuidEdited = '')\n{\n    global $gL10n, $gValidLogin, $gSettingsManager;\n\n    // only show info if system setting is activated\n    if ((int) $gSettingsManager->get('system_show_create_edit') === 0) {\n        return '';\n    }\n\n    $html = '';\n\n    // compose name of user who create the recordset\n    if ($timestampCreate) {\n        $userNameCreated = trim($userNameCreated);\n\n        if ($userNameCreated === '') {\n            $userNameCreated = $gL10n->get('SYS_DELETED_USER');\n        }\n\n        // if valid login and a user id is given than create a link to the profile of this user\n        if ($gValidLogin && $userUuidCreated !== '' && $userNameCreated !== $gL10n->get('SYS_SYSTEM')) {\n            $userNameCreated = '<a href=\"' . SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/profile/profile.php', array('user_uuid' => $userUuidCreated)) .\n                               '\">' . $userNameCreated . '</a>';\n        }\n\n        $html .= '<span class=\"admidio-info-created\">' . $gL10n->get('SYS_CREATED_BY', array($userNameCreated, $timestampCreate)) . '</span>';\n    }\n\n    // compose name of user who edit the recordset\n    if ($timestampEdited) {\n        $userNameEdited = trim($userNameEdited);\n\n        if ($userNameEdited === '') {\n            $userNameEdited = $gL10n->get('SYS_DELETED_USER');\n        }\n\n        // if valid login and a user id is given than create a link to the profile of this user\n        if ($gValidLogin && $userUuidEdited !== '' && $userNameEdited !== $gL10n->get('SYS_SYSTEM')) {\n            $userNameEdited = '<a href=\"' . SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/profile/profile.php', array('user_uuid' => $userUuidEdited)) .\n                              '\">' . $userNameEdited . '</a>';\n        }\n\n        $html .= '<span class=\"info-edited\">' . $gL10n->get('SYS_LAST_EDITED_BY', array($userNameEdited, $timestampEdited)) . '</span>';\n    }\n\n    if ($html === '') {\n        return '';\n    }\n\n    return '<div class=\"admidio-info-created-edited\">' . $html . '</div>';\n}\n\n/**\n * Prefix url with \"http://\" if no protocol is defined and check if is valid url\n * @param $url string\n * @return false|string\n */\nfunction admFuncCheckUrl($url)\n{\n    // Homepage url have to start with \"http://\"\n    if (!StringUtils::strStartsWith($url, 'http://', false) && !StringUtils::strStartsWith($url, 'https://', false)) {\n        $url = 'http://' . $url;\n    }\n\n    // For Homepage only valid url chars are allowed\n    if (!StringUtils::strValidCharacters($url, 'url')) {\n        return false;\n    }\n\n    return $url;\n}\n\n/**\n * This is a safe method for redirecting.\n * @param string $url        The URL where redirecting to. Must be a absolute URL. (www.example.org)\n * @param int    $statusCode The status-code which should be send. (301, 302, 303 (default), 307)\n * @see https://www.owasp.org/index.php/Open_redirect\n */\nfunction admRedirect($url, $statusCode = 303)\n{\n    global $gLogger, $gMessage, $gL10n;\n\n    $loggerObject = array('url' => $url, 'statusCode' => $statusCode);\n\n    if (headers_sent()) {\n        $gLogger->error('REDIRECT: Header already sent!', $loggerObject);\n\n        $gMessage->show($gL10n->get('SYS_HEADER_ALREADY_SENT'));\n        // => EXIT\n    }\n    if (filter_var($url, FILTER_VALIDATE_URL) === false) {\n        $gLogger->error('REDIRECT: URL is not a valid URL!', $loggerObject);\n\n        $gMessage->show($gL10n->get('SYS_REDIRECT_URL_INVALID'));\n        // => EXIT\n    }\n    if (!in_array($statusCode, array(301, 302, 303, 307), true)) {\n        $gLogger->error('REDIRECT: Status Code is not allowed!', $loggerObject);\n\n        $gMessage->show($gL10n->get('SYS_STATUS_CODE_INVALID'));\n        // => EXIT\n    }\n\n    // Check if $url starts with the Admidio URL\n    if (strpos($url, ADMIDIO_URL) === 0) {\n        $gLogger->info('REDIRECT: Redirecting to internal URL!', $loggerObject);\n\n        // TODO check if user is authorized for url\n        $redirectUrl = $url;\n    } else {\n        $gLogger->notice('REDIRECT: Redirecting to external URL!', $loggerObject);\n\n        $redirectUrl = SecurityUtils::encodeUrl(ADMIDIO_URL . '/adm_program/system/redirect.php', array('url' => $url));\n    }\n\n    header('Location: ' . $redirectUrl, true, $statusCode);\n    exit();\n}\n\n/**\n * Calculates and formats the execution time\n * @param float $startTime The start time\n * @return string Returns the formated execution time\n */\nfunction getExecutionTime($startTime)\n{\n    $stopTime = microtime(true);\n\n    return number_format(($stopTime - $startTime) * 1000, 6, '.', '') . ' ms';\n}\n\n/**\n * Search all visible files or directories in the specified directory.\n * @deprecated 4.0.0:4.1.0 \"admFuncGetDirectoryEntries()\" is deprecated, use \"FileSystemUtils::getDirectoryContent()\" instead.\n * @param string $directory  The directory where the files or directories should be searched.\n * @param string $searchType This could be **file**, **dir**, **both** or **all** and represent\n *                           the type of entries that should be searched.\n * @return false|array<string,string> Returns an array with all found entries or false if an error occurs.\n */\nfunction admFuncGetDirectoryEntries($directory, $searchType = 'file')\n{\n    switch ($searchType) {\n        case 'file':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false, array(FileSystemUtils::CONTENT_TYPE_FILE)));\n        case 'dir':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false, array(FileSystemUtils::CONTENT_TYPE_DIRECTORY)));\n        case 'both':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false));\n        case 'all':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false));\n    }\n}\n", "<?php\n/**\n ***********************************************************************************************\n * @copyright 2004-2021 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\nfinal class StringUtils\n{\n    /**\n     * In case the multibyte functions are not supported, we fallback to a no-multibyte function\n     * IMPORTANT: If the fallback is used, the conversion of umlauts not work!\n     * StringUtils::strToLower\\(([\\w$\\[\\]()]+)\\) -> mb_strtolower($1, 'UTF-8')\n     * @param string $string\n     * @return string\n     */\n    public static function strToLower($string)\n    {\n        if (function_exists('mb_strtolower')) {\n            return mb_strtolower($string, 'UTF-8');\n        }\n\n        return strtolower($string);\n    }\n\n    /**\n     * In case the multibyte functions are not supported, we fallback to a no-multibyte function\n     * IMPORTANT: If the fallback is used, the conversion of umlauts not work!\n     * @param string $string\n     * @return string\n     */\n    public static function strToUpper($string)\n    {\n        if (function_exists('mb_strtoupper')) {\n            return mb_strtoupper($string, 'UTF-8');\n        }\n\n        return strtoupper($string);\n    }\n\n    /**\n     * Checks if a string contains another given string\n     * @param string $string        The string to check\n     * @param string $contains      The containing string pattern\n     * @param bool   $caseSensitive Flag to change between case-sensitive and case-insensitive\n     * @return bool Returns true if the string contains the other string\n     */\n    public static function strContains($string, $contains, $caseSensitive = true)\n    {\n        if ($caseSensitive) {\n            return str_contains($string, $contains);\n        }\n\n        return $contains === '' || stripos($string, $contains) !== false;\n    }\n\n    /**\n     * Checks if a string starts with another given string\n     * @param string $string        The string to check\n     * @param string $start         The starting string pattern\n     * @param bool   $caseSensitive Flag to change between case-sensitive and case-insensitive\n     * @return bool Returns true if the string starts with the other string\n     */\n    public static function strStartsWith($string, $start, $caseSensitive = true)\n    {\n        if ($caseSensitive) {\n            return str_starts_with($string, $start);\n        }\n\n        return substr_compare($string, $start, 0, strlen($start), true) === 0;\n    }\n\n    /**\n     * Checks if a string ends with another given string\n     * @param string $string        The string to check\n     * @param string $end           The ending string pattern\n     * @param bool   $caseSensitive Flag to change between case-sensitive and case-insensitive\n     * @return bool Returns true if the string ends with the other string\n     */\n    public static function strEndsWith($string, $end, $caseSensitive = true)\n    {\n        if ($caseSensitive) {\n            return str_ends_with($string, $end);\n        }\n\n        return $end === '' || ($string !== '' && substr_compare($string, $end, -strlen($end), true) === 0);\n    }\n\n    /**\n     * Easy way for multiple replacements in a string.\n     * @param string               $string   The string where to replace strings\n     * @param array<string,string> $replaces An array with search and replace values\n     * @return string The modified string\n     */\n    public static function strMultiReplace($string, $replaces)\n    {\n        return str_replace(array_keys($replaces), array_values($replaces), $string);\n    }\n\n    /**\n     * removes html, php code and blancs at beginning and end\n     * of string or all elements of array without ckeditor variables !!!\n     * @param array<string,string|array<mixed,string>> $srcArray\n     * @return array<string,string|array<mixed,string>>\n     */\n    public static function strStripSpecialTags(array $srcArray)\n    {\n        // \"ecard_message\" => ckeditor-variable\n        $specialKeys = array(\n            'ecard_message', 'ann_description', 'dat_description', 'gbc_text', 'gbo_text', 'lnk_description',\n            'msg_body', 'plugin_CKEditor', 'room_description', 'usf_description', 'mail_smtp_password'\n        );\n\n        foreach ($srcArray as $key => $value) {\n            if (!in_array($key, $specialKeys, true)) {\n                $srcArray[$key] = self::strStripTags($value);\n            }\n        }\n\n        return $srcArray;\n    }\n\n    /**\n     * removes html, php code and whitespaces at beginning and end of string or all elements of array\n     * @param string|array<mixed,string> $value\n     * @return string|array<mixed,string>\n     */\n    public static function strStripTags($value)\n    {\n        if (is_array($value)) {\n            // call function for every array element\n            $value = array_map('self::strStripTags', $value);\n        } else {\n            // remove whitespaces at beginning and end\n            $value = trim($value);\n            // removes html and php code\n            $value = strip_tags($value);\n        }\n\n        return $value;\n    }\n\n    /**\n     * Check if a string contains only valid characters. Therefore the string is\n     * compared with a hard coded list of valid characters for each datatype.\n     * @param string $string    The string that should be checked.\n     * @param string $checkType The type **noSpecialChar**, **email**, **file**, **url** or **phone** that will be checked.\n     *                          Each type has a different valid character list.\n     * @return bool Returns **true** if all characters of **string** match the internal character list.\n     */\n    public static function strValidCharacters($string, $checkType)\n    {\n        if (trim($string) === '') {\n            return false;\n        }\n\n        switch ($checkType) {\n            case 'noSpecialChar': // a simple e-mail address should still be possible (like username)\n                $validRegex = '/^[\\w.@+-]+$/i';\n                break;\n            case 'email':\n                $validRegex = '/^[\\w\u0413\u040e\u0413\u00a0\u0413\u045e\u0413\u0498\u0413\u04e8\u0413\u04b0\u0413\u00a7\u0413\u00a9\u0413\u0401\u0413\u04d8\u0413\u00ae\u0413\u04b1\u0413\u0456\u0413\u0406\u0413\u0499\u0413\u00b6\u0413\u04e9\u0413\u0451\u0415\u201c\u0413\u04d9\u0413\u2116\u0413\u00bb\u0413\u0458\u0413\u04b9.@+-]+$/i';\n                break;\n            case 'file':\n                $validRegex = '=^[^/?*;:~<>|\\\"\\\\\\\\]+\\.[^/?*;:~<>|\u0432\u0496\u04a1\\\"\\\\\\\\]+$=';\n                break;\n            case 'folder':\n                $validRegex = '=^[^/?*;:~<>|\\\"\\\\\\\\]+$=';\n                break;\n            case 'url':\n                $validRegex = '/^[\\w\u0413\u040e\u0413\u00a0\u0413\u045e\u0413\u0498\u0413\u04e8\u0413\u04b0\u0413\u00a7\u0413\u00a9\u0413\u0401\u0413\u04d8\u0413\u00ae\u0413\u04b1\u0413\u0456\u0413\u0406\u0413\u0499\u0413\u00b6\u0413\u04e9\u0413\u0451\u0415\u201c\u0413\u04d9\u0413\u2116\u0413\u00bb\u0413\u0458\u0413\u04b9$&!?() \\/%=#:~.@+-]+$/i';\n                break;\n            case 'phone':\n                $validRegex = '/^[\\d() \\/+-]+$/i';\n                break;\n            default:\n                return false;\n        }\n\n        // check if string contains only valid characters\n        if (!preg_match($validRegex, $string)) {\n            return false;\n        }\n\n        switch ($checkType) {\n            case 'email':\n                return filter_var(trim($string), FILTER_VALIDATE_EMAIL) !== false;\n            case 'url':\n                return filter_var(trim($string), FILTER_VALIDATE_URL) !== false;\n            default:\n                return true;\n        }\n    }\n\n    /**\n     * Check if a filename contains invalid characters. The characters will be checked with StringUtils::strValidCharacters.\n     * In addition the function checks if the name contains .. or a . at the beginning.\n     * @param string $filename     Name of the file that should be checked.\n     * @param bool $checkExtension If set to **true** then the extension will be checked against a block-list of extensions:\n     *                             php, php3, php4, php5, html, htm, htaccess, htpasswd, pl, js, vbs, asp, cgi, ssi, phar\n     * @throws AdmException SYS_FILENAME_EMPTY : Filename was empty\n     *                      SYS_FILENAME_INVALID : Filename contains invalid characters\n     *                      SYS_FILE_EXTENSION_INVALID : Filename contains invalid extension\n     * @return true Returns @true if filename contains only valid characters. Otherwise an AdmException is thrown\n     */\n    public static function strIsValidFileName($filename, $checkExtension = true)\n    {\n        $filename = urldecode($filename);\n\n        // If the filename was not empty\n        if (trim($filename) === '') {\n            throw new AdmException('SYS_FILENAME_EMPTY');\n        }\n\n        // filename should only contains valid characters and don't start with a dot\n        if (\n            basename($filename) !== $filename ||\n            self::strStartsWith($filename, '.') ||\n            self::strContains($filename, '//') ||\n            self::strContains($filename, '\\\\') ||\n            (!self::strValidCharacters($filename, 'file') && $checkExtension) ||\n            (!self::strValidCharacters($filename, 'folder') && !$checkExtension)\n        ) {\n            throw new AdmException('SYS_FILENAME_INVALID', array(self::strStripTags($filename)));\n        }\n\n        if ($checkExtension) {\n            // check if the extension is not listed as blocked\n            $extensionBlocklist = array('php', 'php3', 'php4', 'php5', 'pht', 'html', 'htm', 'phtml',\n                'shtml', 'htaccess', 'htpasswd', 'pl', 'js', 'vbs', 'asp',\n                'asa', 'cer', 'asax', 'swf', 'xap', 'cgi', 'ssi', 'phar', 'svg');\n            $fileExtension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n\n            if (in_array($fileExtension, $extensionBlocklist, true)) {\n                throw new AdmException('SYS_FILE_EXTENSION_INVALID');\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if a filename contains invalid characters. The characters will be checked with StringUtils::strValidCharacters.\n     * In addition the function checks if the name contains .. or a . at the beginning.\n     * @param string $filename     Name of the file that should be checked.\n     * @throws AdmException SYS_FILENAME_EMPTY : Filename was empty\n     *                      SYS_FILENAME_INVALID : Filename contains invalid characters\n     * @return true Returns @true if filename contains only valid characters. Otherwise an AdmException is thrown\n     */\n    public static function strIsValidFolderName($filename)\n    {\n        // If the filename was not empty\n        if (trim($filename) === '') {\n            throw new AdmException('SYS_FOLDER_NAME_EMPTY');\n        }\n\n        // filename should only contains valid characters and don't start with a dot\n        if (basename($filename) !== $filename || self::strStartsWith($filename, '.') || !self::strValidCharacters($filename, 'folder')) {\n            throw new AdmException('SYS_FOLDER_NAME_INVALID', array($filename));\n        }\n\n        return true;\n    }\n}\n", "<?php\n/**\n ***********************************************************************************************\n * Redirect to chosen url\n *\n * @copyright 2004-2021 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/******************************************************************************\n * Parameters:\n *\n * url - url that should be redirected\n *\n *****************************************************************************/\n\nrequire_once(__DIR__ . '/common.php');\n\n// Initialize and check the parameters\n$getUrl = admFuncVariableIsValid($_GET, 'url', 'string', array('requireValue' => true));\n\nif (filter_var($getUrl, FILTER_VALIDATE_URL) === false) {\n    $gMessage->show($gL10n->get('SYS_REDIRECT_URL_INVALID'));\n    // => EXIT\n}\n\n// create html page object\n$page = new HtmlPage('admidio-redirect', $gL10n->get('SYS_REDIRECT'));\n\n// add special header for automatic redirection after x seconds\n$page->addHeader('<meta http-equiv=\"refresh\" content=\"' . $gSettingsManager->getInt('weblinks_redirect_seconds') . '; url=' . $getUrl . '\">');\n\n// Counter z\u00e4hlt die sekunden bis zur Weiterleitung runter\n$page->addJavascript(\n    '\n    /**\n     * @param {bool} init\n     */\n    function countDown(init) {\n        if (init || --document.getElementById(\"counter\").firstChild.nodeValue > 0) {\n            window.setTimeout(\"countDown()\", 1000);\n        }\n    };\n    countDown(true);'\n);\n\n// Html des Modules ausgeben\n$page->addHtml(\n    '<p class=\"lead\">' .\n        $gL10n->get(\n            'SYS_REDIRECT_DESC',\n            array($gCurrentOrganization->getValue('org_longname'),\n            '<span id=\"counter\">' . $gSettingsManager->getInt('weblinks_redirect_seconds') . '</span>',\n            '<strong>' . $getUrl . '</strong>',\n            '<a href=\"' . $getUrl . '\" target=\"_self\">',\n            '</a>')\n        ) .\n    '</p>'\n);\n\n// show html of complete page\n$page->show();\n"], "fixing_code": ["<?php\n/**\n ***********************************************************************************************\n * Various common functions\n *\n * @copyright 2004-2021 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\nif (basename($_SERVER['SCRIPT_FILENAME']) === 'function.php') {\n    exit('This page may not be called directly!');\n}\n\n/**\n * Function checks if the user is a member of the role.\n * If **userId** is not set than this will be checked for the current user\n * @param string $roleName The name of the role where the membership of the user should be checked\n * @param int    $userId   The id of the user who should be checked if he is a member of the role.\n *                         If @userId is not set than this will be checked for the current user\n * @return bool Returns **true** if the user is a member of the role\n */\nfunction hasRole($roleName, $userId = 0)\n{\n    if ($userId === 0) {\n        $userId = $GLOBALS['gCurrentUserId'];\n    }\n\n    $sql = 'SELECT mem_id\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n             WHERE mem_usr_id = ? -- $userId\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end    > ? -- DATE_NOW\n               AND rol_name   = ? -- $roleName\n               AND rol_valid  = true\n               AND (  cat_org_id = ? -- $GLOBALS[\\'gCurrentOrgId\\'\n                   OR cat_org_id IS NULL )';\n    $statement = $GLOBALS['gDb']->queryPrepared($sql, array($userId, DATE_NOW, DATE_NOW, $roleName, $GLOBALS['gCurrentOrgId']));\n\n    return $statement->rowCount() === 1;\n}\n\n/**\n * Function checks if the user is a member in a role of the current organization.\n * @param int $userId The id of the user who should be checked if he is a member of the current organization\n * @return bool Returns **true** if the user is a member\n */\nfunction isMember($userId)\n{\n    if ($userId === 0) {\n        return false;\n    }\n\n    $sql = 'SELECT COUNT(*) AS count\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n             WHERE mem_usr_id = ? -- $userId\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end    > ? -- DATE_NOW\n               AND rol_valid  = true\n               AND (  cat_org_id = ? -- $GLOBALS[\\'gCurrentOrgId\\']\n                   OR cat_org_id IS NULL )';\n    $statement = $GLOBALS['gDb']->queryPrepared($sql, array($userId, DATE_NOW, DATE_NOW, $GLOBALS['gCurrentOrgId']));\n\n    return $statement->fetchColumn() > 0;\n}\n\n/**\n * Function checks if the user is a group leader in a role of the current organization.\n * If you use the **roleId** parameter you can check if the user is group leader of that role.\n * @param int $userId The id of the user who should be checked if he is a group leader\n * @param int $roleId (optional) If set <> 0 than the function checks if the user is group leader of this role\n *                    otherwise it checks if the user is group leader in one role of the current organization\n * @return bool Returns **true** if the user is a group leader\n */\nfunction isGroupLeader($userId, $roleId = 0)\n{\n    if ($userId === 0) {\n        return false;\n    }\n\n    $sql = 'SELECT mem_id\n              FROM '.TBL_MEMBERS.'\n        INNER JOIN '.TBL_ROLES.'\n                ON rol_id = mem_rol_id\n        INNER JOIN '.TBL_CATEGORIES.'\n                ON cat_id = rol_cat_id\n             WHERE mem_usr_id = ? -- $userId\n               AND mem_begin <= ? -- DATE_NOW\n               AND mem_end    > ? -- DATE_NOW\n               AND mem_leader = true\n               AND rol_valid  = true\n               AND (  cat_org_id = ? -- $GLOBALS[\\'gCurrentOrgId\\']\n                   OR cat_org_id IS NULL )';\n    $queryParams = array($userId, DATE_NOW, DATE_NOW, $GLOBALS['gCurrentOrgId']);\n\n    if ($roleId > 0) {\n        $sql .= ' AND mem_rol_id = ? -- $roleId';\n        $queryParams[] = $roleId;\n    }\n\n    $statement = $GLOBALS['gDb']->queryPrepared($sql, $queryParams);\n\n    return $statement->rowCount() > 0;\n}\n\n/**\n * diese Funktion gibt eine Seitennavigation in Anhaengigkeit der Anzahl Seiten zurueck\n * Teile dieser Funktion sind von generatePagination aus phpBB2\n * Beispiel:\n *     Seite: < Vorherige 1  2  3 ... 9  10  11 Naechste >\n *\n * @param string $baseUrl                  Basislink zum Modul (auch schon mit notwendigen Uebergabevariablen)\n * @param int    $itemsCount               Gesamtanzahl an Elementen\n * @param int    $itemsPerPage             Anzahl Elemente pro Seite\n * @param int    $pageStartItem            Mit dieser Elementnummer beginnt die aktuelle Seite\n * @param bool   $addPrevNextText          Links mit \"Vorherige\" \"Naechste\" anzeigen\n * @param string $queryParamName (optional) You can set a new name for the parameter that should be used as start parameter.\n * @return string\n */\nfunction admFuncGeneratePagination($baseUrl, $itemsCount, $itemsPerPage, $pageStartItem, $addPrevNextText = true, $queryParamName = 'start')\n{\n    global $gL10n;\n\n    if ($itemsCount === 0 || $itemsPerPage === 0) {\n        return '';\n    }\n\n    $totalPagesCount = (int) ceil($itemsCount / $itemsPerPage);\n\n    if ($totalPagesCount <= 1) {\n        return '';\n    }\n\n    /**\n     * @param int    $start\n     * @param int    $end\n     * @param int    $page\n     * @param string $url\n     * @param string $paramName\n     * @param int    $itemsPerPage\n     * @return string\n     */\n    function getListElementsFromTo($start, $end, $page, $url, $paramName, $itemsPerPage)\n    {\n        $pageNavString = '';\n\n        for ($i = $start; $i < $end; ++$i) {\n            if ($i === $page) {\n                $pageNavString .= getListElementString((string) $i, 'page-item active');\n            } else {\n                $pageNavString .= getListElementString((string) $i, 'page-item', $url, $paramName, ($i - 1) * $itemsPerPage);\n            }\n        }\n\n        return $pageNavString;\n    }\n\n    /**\n     * @param string $linkText\n     * @param string $className\n     * @param string $url\n     * @param string $paramName\n     * @param int    $paramValue\n     * @return string\n     */\n    function getListElementString($linkText, $className = '', $url = '', $paramName = '', $paramValue = null)\n    {\n        $classString = '';\n        if ($className !== '') {\n            $classString = ' class=\"'.$className.'\"';\n        }\n\n        $urlString = '#';\n        if ($url !== '') {\n            $urlString = $url.'&'.$paramName.'='.$paramValue;\n        }\n\n        return '<li'.$classString.'><a class=\"page-link\" href=\"'.$urlString.'\">'.$linkText.'</a></li>';\n    }\n\n    $onPage = (int) floor($pageStartItem / $itemsPerPage) + 1;\n\n    $pageNavigationString = '';\n\n    if ($totalPagesCount > 7) {\n        $initPageMax = ($totalPagesCount > 3) ? 3 : $totalPagesCount;\n\n        $pageNavigationString .= getListElementsFromTo(1, $initPageMax + 1, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n\n        if ($totalPagesCount > 3) {\n            $disabledLink = '<li class=\"page-item disabled\"><a>...</a></li>';\n\n            if ($onPage > 1 && $onPage < $totalPagesCount) {\n                $pageNavigationString .= ($onPage > 5) ? $disabledLink : '&nbsp;&nbsp;';\n\n                $initPageMin = ($onPage > 4) ? $onPage : 5;\n                $initPageMax = ($onPage < $totalPagesCount - 4) ? $onPage : $totalPagesCount - 4;\n\n                $pageNavigationString .= getListElementsFromTo($initPageMin - 1, $initPageMax + 2, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n\n                $pageNavigationString .= ($onPage < $totalPagesCount - 4) ? $disabledLink : '&nbsp;&nbsp;';\n            } else {\n                $pageNavigationString .= $disabledLink;\n            }\n\n            $pageNavigationString .= getListElementsFromTo($totalPagesCount - 2, $totalPagesCount + 1, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n        }\n    } else {\n        $pageNavigationString .= getListElementsFromTo(1, $totalPagesCount + 1, $onPage, $baseUrl, $queryParamName, $itemsPerPage);\n    }\n\n    if ($addPrevNextText) {\n        $pageNavClassPrev = '';\n        if ($onPage === 1) {\n            $pageNavClassPrev = 'page-item disabled';\n        }\n\n        $pageNavClassNext = '';\n        if ($onPage === $totalPagesCount) {\n            $pageNavClassNext = 'page-item disabled';\n        }\n\n        $pageNavigationPrevText = getListElementString($gL10n->get('SYS_BACK'), $pageNavClassPrev, $baseUrl, $queryParamName, ($onPage - 2) * $itemsPerPage);\n        $pageNavigationNextText = getListElementString($gL10n->get('SYS_PAGE_NEXT'), $pageNavClassNext, $baseUrl, $queryParamName, $onPage * $itemsPerPage);\n\n        $pageNavigationString = $pageNavigationPrevText.$pageNavigationString.$pageNavigationNextText;\n    }\n\n    $pageNavigationString = '<nav><ul class=\"pagination\">'.$pageNavigationString.'</ul></nav>';\n\n    return $pageNavigationString;\n}\n\n/**\n * Funktion gibt die maximale Pixelzahl zur\u00fcck die der Speicher verarbeiten kann\n * @return int\n */\nfunction admFuncProcessableImageSize()\n{\n    $memoryLimit = PhpIniUtils::getMemoryLimit();\n    // if memory_limit is disabled in php.ini\n    if (is_infinite($memoryLimit)) {\n        $memoryLimit = 128 * 1024 * 1024; // 128MB\n    }\n\n    // For each Pixel 3 Bytes are necessary (RGB)\n    $bytesPerPixel = 3;\n    // der Speicher muss doppelt zur Verf\u00fcgung stehen\n    // nach ein paar tests hat sich 2.5x als sicher herausgestellt\n    $factor = 2.5;\n\n    return (int) round($memoryLimit / ($bytesPerPixel * $factor));\n}\n\n/**\n * Verify the content of an array element if it's the expected datatype\n *\n * The function is designed to check the content of **$_GET** and **$_POST** elements and should be used at the\n * beginning of a script. If the value of the defined datatype is not valid then an error will be shown. If no\n * value was set then the parameter will be initialized. The function can be used with every array and their elements.\n * You can set several flags (like required value, datatype \u2026) that should be checked.\n *\n * @param array<string,mixed> $array        The array with the element that should be checked\n * @param string              $variableName Name of the array element that should be checked\n * @param string              $datatype     The datatype like **string**, **numeric**, **int**, **float**, **bool**, **boolean**, **html**,\n *                                          **url**, **date**, **file** or **folder** that is expected and which will be checked.\n *                                          Datatype **date** expects a date that has the Admidio default format from the\n *                                          preferences or the english date format **Y-m-d**\n * @param array<string,mixed> $options      (optional) An array with the following possible entries:\n *                                          - defaultValue : A value that will be set if the variable has no value\n *                                          - **requireValue** : If set to **true** than a value is required otherwise the function\n *                                                              returns an error\n *                                          - **validValues** :  An array with all values that the variable could have. If another\n *                                                              value is found than the function returns an error\n *                                          - **directOutput** : If set to **true** the function returns only the error string, if set\n *                                                              to false a html message with the error will be returned\n * @return mixed|null Returns the value of the element or the error message if a test failed\n *\n * **Code example**\n * ```\n * // numeric value that would get a default value 0 if not set\n * $getDateId = admFuncVariableIsValid($_GET, 'dat_id', 'numeric', array('defaultValue' => 0));\n *\n * // string that will be initialized with text of id DAT_DATES\n * $getHeadline = admFuncVariableIsValid($_GET, 'headline', 'string', array('defaultValue' => $gL10n->get('DAT_DATES')));\n *\n * // string initialized with actual and the only allowed values are actual and old\n * $getMode = admFuncVariableIsValid($_GET, 'mode', 'string', array('defaultValue' => 'actual', 'validValues' => array('actual', 'old')));\n * ```\n */\nfunction admFuncVariableIsValid(array $array, $variableName, $datatype, array $options = array())\n{\n    global $gL10n, $gMessage, $gSettingsManager;\n\n    // create array with all options\n    $optionsDefault = array('defaultValue' => null, 'requireValue' => false, 'validValues' => null, 'directOutput' => null);\n    $optionsAll     = array_replace($optionsDefault, $options);\n\n    $errorMessage = '';\n    $value = null;\n\n    // set default value for each datatype if no value is given and no value was required\n    if (array_key_exists($variableName, $array) && $array[$variableName] !== '') {\n        $value = $array[$variableName];\n    } else {\n        if ($optionsAll['requireValue']) {\n            // if value is required an no value is given then show error\n            $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n        } elseif ($optionsAll['defaultValue'] !== null) {\n            // if a default value was set then take this value\n            $value = $optionsAll['defaultValue'];\n        } else {\n            // no value set then initialize the parameter\n            if ($datatype === 'bool' || $datatype === 'boolean') {\n                $value = false;\n            } elseif ($datatype === 'numeric' || $datatype === 'int') {\n                $value = 0;\n            } elseif ($datatype === 'float') {\n                $value = 0.0;\n            } else {\n                $value = '';\n            }\n\n            return $value;\n        }\n    }\n\n    // check if parameter has a valid value\n    // do a strict check with in_array because the function don't work properly\n    if ($optionsAll['validValues'] !== null && !in_array($value, $optionsAll['validValues'], true)) {\n        $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n    }\n\n    switch ($datatype) {\n        case 'file': // fallthrough\n        case 'folder':\n            try {\n                if ($value !== '') {\n                    StringUtils::strIsValidFileName($value, false);\n                }\n            } catch (AdmException $e) {\n                $errorMessage = $e->getText();\n            }\n            break;\n\n        case 'date':\n            // check if date is a valid Admidio date format\n            $objAdmidioDate = \\DateTime::createFromFormat($gSettingsManager->getString('system_date'), $value);\n\n            if (!$objAdmidioDate) {\n                // check if date has english format\n                $objEnglishDate = \\DateTime::createFromFormat('Y-m-d', $value);\n\n                if (!$objEnglishDate) {\n                    $errorMessage = $gL10n->get('SYS_NOT_VALID_DATE_FORMAT', array($variableName));\n                }\n            }\n            break;\n\n        case 'bool': // fallthrough\n        case 'boolean':\n            $valid = filter_var($value, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);\n            if ($valid === null) {\n                $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n            }\n            $value = $valid;\n            break;\n\n        case 'int': // fallthrough\n        case 'float': // fallthrough\n        case 'numeric':\n            // numeric datatype should only contain numbers\n            if (!is_numeric($value)) {\n                $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n            } else {\n                if ($datatype === 'int') {\n                    $value = filter_var($value, FILTER_VALIDATE_INT);\n                } elseif ($datatype === 'float') {\n                    $value = filter_var($value, FILTER_VALIDATE_FLOAT);\n                } else {\n                    // https://www.php.net/manual/en/function.is-numeric.php#107326\n                    $value += 0;\n                }\n            }\n            break;\n\n        case 'string':\n            $value = SecurityUtils::encodeHTML(StringUtils::strStripTags($value));\n            break;\n\n        case 'html':\n            // check html string vor invalid tags and scripts\n            $value = Htmlawed::filter(stripslashes($value), array('safe' => 1));\n            break;\n\n        case 'url':\n            if (!StringUtils::strValidCharacters($value, 'url')) {\n                $errorMessage = $gL10n->get('SYS_INVALID_PAGE_VIEW');\n            }\n            break;\n    }\n\n    // wurde kein Fehler entdeckt, dann den Inhalt der Variablen zurueckgeben\n    if ($errorMessage === '') {\n        return $value;\n    }\n\n    if (isset($gMessage) && $gMessage instanceof Message) {\n        if ($optionsAll['directOutput']) {\n            $gMessage->showTextOnly(true);\n        }\n\n        $gMessage->show($errorMessage);\n    // => EXIT\n    } else {\n        echo $errorMessage;\n        exit();\n    }\n\n    return null;\n}\n\n/**\n * Creates a html fragment with information about user and time when the recordset was created\n * and when it was at last edited. Therefore all necessary data must be set in the function\n * parameters. If userId is not set then the function will show **deleted user**.\n * @param int         $userIdCreated   Id of the user who create the recordset.\n * @param string      $timestampCreate Date and time of the moment when the user create the recordset.\n * @param int         $userIdEdited    Id of the user last changed the recordset.\n * @param string|null $timestampEdited Date and time of the moment when the user last changed the recordset\n * @return string Returns a html string with usernames who creates item and edit item the last time\n */\nfunction admFuncShowCreateChangeInfoById($userIdCreated, $timestampCreate, $userIdEdited = 0, $timestampEdited = null)\n{\n    global $gDb, $gProfileFields, $gL10n, $gSettingsManager;\n\n    // only show info if system setting is activated\n    if ((int) $gSettingsManager->get('system_show_create_edit') === 0) {\n        return '';\n    }\n\n    // compose name of user who create the recordset\n    $htmlCreateName = '';\n    $userUuidCreated = '';\n    if ($timestampCreate) {\n        if ($userIdCreated > 0) {\n            $userCreate = new User($gDb, $gProfileFields, $userIdCreated);\n            $userUuidCreated = $userCreate->getValue('usr_uuid');\n\n            if ((int) $gSettingsManager->get('system_show_create_edit') === 1) {\n                $htmlCreateName = $userCreate->getValue('FIRST_NAME') . ' ' . $userCreate->getValue('LAST_NAME');\n            } else {\n                $htmlCreateName = $userCreate->getValue('usr_login_name');\n            }\n        } else {\n            $htmlCreateName = $gL10n->get('SYS_DELETED_USER');\n        }\n    }\n\n    // compose name of user who edit the recordset\n    $htmlEditName = '';\n    $userUuidEdited = '';\n    if ($timestampEdited) {\n        if ($userIdEdited > 0) {\n            $userEdit = new User($gDb, $gProfileFields, $userIdEdited);\n            $userUuidEdited = $userEdit->getValue('usr_uuid');\n\n            if ((int) $gSettingsManager->get('system_show_create_edit') === 1) {\n                $htmlEditName = $userEdit->getValue('FIRST_NAME') . ' ' . $userEdit->getValue('LAST_NAME');\n            } else {\n                $htmlEditName = $userEdit->getValue('usr_login_name');\n            }\n        } else {\n            $htmlEditName = $gL10n->get('SYS_DELETED_USER');\n        }\n    }\n\n    if ($htmlCreateName === '' && $htmlEditName === '') {\n        return '';\n    }\n\n    // get html output from other function\n    return admFuncShowCreateChangeInfoByName(\n        $htmlCreateName,\n        $timestampCreate,\n        $htmlEditName,\n        $timestampEdited,\n        $userUuidCreated,\n        $userUuidEdited\n    );\n}\n\n/**\n * Creates a html fragment with information about user and time when the recordset was created\n * and when it was at last edited. Therefore all necessary data must be set in the function\n * parameters. If user name is not set then the function will show **deleted user**.\n * @param string      $userNameCreated Id of the user who create the recordset.\n * @param string      $timestampCreate Date and time of the moment when the user create the recordset.\n * @param string|null $userNameEdited  Id of the user last changed the recordset.\n * @param string|null $timestampEdited Date and time of the moment when the user last changed the recordset\n * @param string      $userUuidCreated  (optional) The uuid of the user who create the recordset.\n *                                      If uuid is set than a link to the user profile will be created\n * @param string      $userUuidEdited   (optional) The uuid of the user last changed the recordset.\n *                                      If uuid is set than a link to the user profile will be created\n * @return string Returns a html string with usernames who creates item and edit item the last time\n */\nfunction admFuncShowCreateChangeInfoByName($userNameCreated, $timestampCreate, $userNameEdited = null, $timestampEdited = null, $userUuidCreated = '', $userUuidEdited = '')\n{\n    global $gL10n, $gValidLogin, $gSettingsManager;\n\n    // only show info if system setting is activated\n    if ((int) $gSettingsManager->get('system_show_create_edit') === 0) {\n        return '';\n    }\n\n    $html = '';\n\n    // compose name of user who create the recordset\n    if ($timestampCreate) {\n        $userNameCreated = trim($userNameCreated);\n\n        if ($userNameCreated === '') {\n            $userNameCreated = $gL10n->get('SYS_DELETED_USER');\n        }\n\n        // if valid login and a user id is given than create a link to the profile of this user\n        if ($gValidLogin && $userUuidCreated !== '' && $userNameCreated !== $gL10n->get('SYS_SYSTEM')) {\n            $userNameCreated = '<a href=\"' . SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/profile/profile.php', array('user_uuid' => $userUuidCreated)) .\n                               '\">' . $userNameCreated . '</a>';\n        }\n\n        $html .= '<span class=\"admidio-info-created\">' . $gL10n->get('SYS_CREATED_BY', array($userNameCreated, $timestampCreate)) . '</span>';\n    }\n\n    // compose name of user who edit the recordset\n    if ($timestampEdited) {\n        $userNameEdited = trim($userNameEdited);\n\n        if ($userNameEdited === '') {\n            $userNameEdited = $gL10n->get('SYS_DELETED_USER');\n        }\n\n        // if valid login and a user id is given than create a link to the profile of this user\n        if ($gValidLogin && $userUuidEdited !== '' && $userNameEdited !== $gL10n->get('SYS_SYSTEM')) {\n            $userNameEdited = '<a href=\"' . SecurityUtils::encodeUrl(ADMIDIO_URL . FOLDER_MODULES . '/profile/profile.php', array('user_uuid' => $userUuidEdited)) .\n                              '\">' . $userNameEdited . '</a>';\n        }\n\n        $html .= '<span class=\"info-edited\">' . $gL10n->get('SYS_LAST_EDITED_BY', array($userNameEdited, $timestampEdited)) . '</span>';\n    }\n\n    if ($html === '') {\n        return '';\n    }\n\n    return '<div class=\"admidio-info-created-edited\">' . $html . '</div>';\n}\n\n/**\n * Prefix url with \"http://\" if no protocol is defined and check if is valid url\n * @param $url string\n * @return false|string\n */\nfunction admFuncCheckUrl($url)\n{\n    // Homepage url have to start with \"http://\"\n    if (!StringUtils::strStartsWith($url, 'http://', false) && !StringUtils::strStartsWith($url, 'https://', false)) {\n        $url = 'http://' . $url;\n    }\n\n    // For Homepage only valid url chars are allowed\n    if (!StringUtils::strValidCharacters($url, 'url')) {\n        return false;\n    }\n\n    return $url;\n}\n\n/**\n * This is a safe method for redirecting.\n * @param string $url        The URL where redirecting to. Must be a absolute URL. (www.example.org)\n * @param int    $statusCode The status-code which should be send. (301, 302, 303 (default), 307)\n * @see https://www.owasp.org/index.php/Open_redirect\n */\nfunction admRedirect($url, $statusCode = 303)\n{\n    global $gLogger, $gMessage, $gL10n;\n\n    $loggerObject = array('url' => $url, 'statusCode' => $statusCode);\n\n    if (headers_sent()) {\n        $gLogger->error('REDIRECT: Header already sent!', $loggerObject);\n\n        $gMessage->show($gL10n->get('SYS_HEADER_ALREADY_SENT'));\n        // => EXIT\n    }\n    if (filter_var($url, FILTER_VALIDATE_URL) === false) {\n        $gLogger->error('REDIRECT: URL is not a valid URL!', $loggerObject);\n\n        $gMessage->show($gL10n->get('SYS_REDIRECT_URL_INVALID'));\n        // => EXIT\n    }\n    if (!in_array($statusCode, array(301, 302, 303, 307), true)) {\n        $gLogger->error('REDIRECT: Status Code is not allowed!', $loggerObject);\n\n        $gMessage->show($gL10n->get('SYS_STATUS_CODE_INVALID'));\n        // => EXIT\n    }\n\n    // Check if $url starts with the Admidio URL\n    if (strpos($url, ADMIDIO_URL) === 0) {\n        $gLogger->info('REDIRECT: Redirecting to internal URL!', $loggerObject);\n\n        // TODO check if user is authorized for url\n        $redirectUrl = $url;\n    } else {\n        $gLogger->notice('REDIRECT: Redirecting to external URL!', $loggerObject);\n\n        $redirectUrl = SecurityUtils::encodeUrl(ADMIDIO_URL . '/adm_program/system/redirect.php', array('url' => $url));\n    }\n\n    header('Location: ' . $redirectUrl, true, $statusCode);\n    exit();\n}\n\n/**\n * Calculates and formats the execution time\n * @param float $startTime The start time\n * @return string Returns the formated execution time\n */\nfunction getExecutionTime($startTime)\n{\n    $stopTime = microtime(true);\n\n    return number_format(($stopTime - $startTime) * 1000, 6, '.', '') . ' ms';\n}\n\n/**\n * Search all visible files or directories in the specified directory.\n * @deprecated 4.0.0:4.1.0 \"admFuncGetDirectoryEntries()\" is deprecated, use \"FileSystemUtils::getDirectoryContent()\" instead.\n * @param string $directory  The directory where the files or directories should be searched.\n * @param string $searchType This could be **file**, **dir**, **both** or **all** and represent\n *                           the type of entries that should be searched.\n * @return false|array<string,string> Returns an array with all found entries or false if an error occurs.\n */\nfunction admFuncGetDirectoryEntries($directory, $searchType = 'file')\n{\n    switch ($searchType) {\n        case 'file':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false, array(FileSystemUtils::CONTENT_TYPE_FILE)));\n        case 'dir':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false, array(FileSystemUtils::CONTENT_TYPE_DIRECTORY)));\n        case 'both':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false));\n        case 'all':\n            return array_keys(FileSystemUtils::getDirectoryContent($directory, false, false));\n    }\n}\n", "<?php\n/**\n ***********************************************************************************************\n * @copyright 2004-2021 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\nfinal class StringUtils\n{\n    /**\n     * In case the multibyte functions are not supported, we fallback to a no-multibyte function\n     * IMPORTANT: If the fallback is used, the conversion of umlauts not work!\n     * StringUtils::strToLower\\(([\\w$\\[\\]()]+)\\) -> mb_strtolower($1, 'UTF-8')\n     * @param string $string\n     * @return string\n     */\n    public static function strToLower($string)\n    {\n        if (function_exists('mb_strtolower')) {\n            return mb_strtolower($string, 'UTF-8');\n        }\n\n        return strtolower($string);\n    }\n\n    /**\n     * In case the multibyte functions are not supported, we fallback to a no-multibyte function\n     * IMPORTANT: If the fallback is used, the conversion of umlauts not work!\n     * @param string $string\n     * @return string\n     */\n    public static function strToUpper($string)\n    {\n        if (function_exists('mb_strtoupper')) {\n            return mb_strtoupper($string, 'UTF-8');\n        }\n\n        return strtoupper($string);\n    }\n\n    /**\n     * Checks if a string contains another given string\n     * @param string $string        The string to check\n     * @param string $contains      The containing string pattern\n     * @param bool   $caseSensitive Flag to change between case-sensitive and case-insensitive\n     * @return bool Returns true if the string contains the other string\n     */\n    public static function strContains($string, $contains, $caseSensitive = true)\n    {\n        if ($caseSensitive) {\n            return str_contains($string, $contains);\n        }\n\n        return $contains === '' || stripos($string, $contains) !== false;\n    }\n\n    /**\n     * Checks if a string starts with another given string\n     * @param string $string        The string to check\n     * @param string $start         The starting string pattern\n     * @param bool   $caseSensitive Flag to change between case-sensitive and case-insensitive\n     * @return bool Returns true if the string starts with the other string\n     */\n    public static function strStartsWith($string, $start, $caseSensitive = true)\n    {\n        if ($caseSensitive) {\n            return str_starts_with($string, $start);\n        }\n\n        return substr_compare($string, $start, 0, strlen($start), true) === 0;\n    }\n\n    /**\n     * Checks if a string ends with another given string\n     * @param string $string        The string to check\n     * @param string $end           The ending string pattern\n     * @param bool   $caseSensitive Flag to change between case-sensitive and case-insensitive\n     * @return bool Returns true if the string ends with the other string\n     */\n    public static function strEndsWith($string, $end, $caseSensitive = true)\n    {\n        if ($caseSensitive) {\n            return str_ends_with($string, $end);\n        }\n\n        return $end === '' || ($string !== '' && substr_compare($string, $end, -strlen($end), true) === 0);\n    }\n\n    /**\n     * Easy way for multiple replacements in a string.\n     * @param string               $string   The string where to replace strings\n     * @param array<string,string> $replaces An array with search and replace values\n     * @return string The modified string\n     */\n    public static function strMultiReplace($string, $replaces)\n    {\n        return str_replace(array_keys($replaces), array_values($replaces), $string);\n    }\n\n    /**\n     * removes html, php code and blancs at beginning and end\n     * of string or all elements of array without ckeditor variables !!!\n     * @param array<string,string|array<mixed,string>> $srcArray\n     * @return array<string,string|array<mixed,string>>\n     */\n    public static function strStripSpecialTags(array $srcArray)\n    {\n        // \"ecard_message\" => ckeditor-variable\n        $specialKeys = array(\n            'ecard_message', 'ann_description', 'dat_description', 'gbc_text', 'gbo_text', 'lnk_description',\n            'msg_body', 'plugin_CKEditor', 'room_description', 'usf_description', 'mail_smtp_password'\n        );\n\n        foreach ($srcArray as $key => $value) {\n            if (!in_array($key, $specialKeys, true)) {\n                $srcArray[$key] = self::strStripTags($value);\n            }\n        }\n\n        return $srcArray;\n    }\n\n    /**\n     * removes html, php code and whitespaces at beginning and end of string or all elements of array\n     * @param string|array<mixed,string> $value\n     * @return string|array<mixed,string>\n     */\n    public static function strStripTags($value)\n    {\n        if (is_array($value)) {\n            // call function for every array element\n            $value = array_map('self::strStripTags', $value);\n        } else {\n            // remove whitespaces at beginning and end\n            $value = trim($value);\n            // removes html and php code\n            $value = strip_tags($value);\n        }\n\n        return $value;\n    }\n\n    /**\n     * Check if a string contains only valid characters. Therefore the string is\n     * compared with a hard coded list of valid characters for each datatype.\n     * @param string $string    The string that should be checked.\n     * @param string $checkType The type **noSpecialChar**, **email**, **file**, **url** or **phone** that will be checked.\n     *                          Each type has a different valid character list.\n     * @return bool Returns **true** if all characters of **string** match the internal character list.\n     */\n    public static function strValidCharacters($string, $checkType)\n    {\n        if (trim($string) === '') {\n            return false;\n        }\n\n        switch ($checkType) {\n            case 'noSpecialChar': // a simple e-mail address should still be possible (like username)\n                $validRegex = '/^[\\w.@+-]+$/i';\n                break;\n            case 'email':\n                $validRegex = '/^[\\w\u0e23\u0e01\u0e23\u00a0\u0e23\u0e02\u0e23\u0e05\u0e23\u0e04\u0e23\u0e06\u0e23\u0e07\u0e23\u0e09\u0e23\u0e08\u0e23\u0e0a\u0e23\u0e0e\u0e23\u0e11\u0e23\u0e13\u0e23\u0e12\u0e23\u0e14\u0e23\u0e16\u0e23\u0e15\u0e23\u0e18\u0e25\u0093\u0e23\u0e1a\u0e23\u0e19\u0e23\u0e1b\u0e23\u0e1c\u0e23\u009f.@+-]+$/i';\n                break;\n            case 'file':\n                $validRegex = '=^[^/?*;:~<>|\\\"\\\\\\\\]+\\.[^/?*;:~<>|\u0e42\u0080\u009a\\\"\\\\\\\\]+$=';\n                break;\n            case 'folder':\n                $validRegex = '=^[^/?*;:~<>|\\\"\\\\\\\\]+$=';\n                break;\n            case 'url':\n                //$validRegex = '/^[\\w\u0e23\u0e01\u0e23\u00a0\u0e23\u0e02\u0e23\u0e05\u0e23\u0e04\u0e23\u0e06\u0e23\u0e07\u0e23\u0e09\u0e23\u0e08\u0e23\u0e0a\u0e23\u0e0e\u0e23\u0e11\u0e23\u0e13\u0e23\u0e12\u0e23\u0e14\u0e23\u0e16\u0e23\u0e15\u0e23\u0e18\u0e25\u0093\u0e23\u0e1a\u0e23\u0e19\u0e23\u0e1b\u0e23\u0e1c\u0e23\u009f$&!?() \\/%=#:~.@+-]+$/i';\n                $validRegex = '/\\b(?:(?:https?|ftp):\\/\\/|www\\.)[-a-z0-9+&@#\\/%?=~_|!:,.;]*[-a-z0-9+&@#\\/%=~_|]/i';\n                break;\n            case 'phone':\n                $validRegex = '/^[\\d() \\/+-]+$/i';\n                break;\n            default:\n                return false;\n        }\n\n        // check if string contains only valid characters\n        if (!preg_match($validRegex, $string)) {\n            return false;\n        }\n\n        switch ($checkType) {\n            case 'email':\n                return filter_var(trim($string), FILTER_VALIDATE_EMAIL) !== false;\n            case 'url':\n                return filter_var(trim($string), FILTER_VALIDATE_URL) !== false;\n            default:\n                return true;\n        }\n    }\n\n    /**\n     * Check if a filename contains invalid characters. The characters will be checked with StringUtils::strValidCharacters.\n     * In addition the function checks if the name contains .. or a . at the beginning.\n     * @param string $filename     Name of the file that should be checked.\n     * @param bool $checkExtension If set to **true** then the extension will be checked against a block-list of extensions:\n     *                             php, php3, php4, php5, html, htm, htaccess, htpasswd, pl, js, vbs, asp, cgi, ssi, phar\n     * @throws AdmException SYS_FILENAME_EMPTY : Filename was empty\n     *                      SYS_FILENAME_INVALID : Filename contains invalid characters\n     *                      SYS_FILE_EXTENSION_INVALID : Filename contains invalid extension\n     * @return true Returns @true if filename contains only valid characters. Otherwise an AdmException is thrown\n     */\n    public static function strIsValidFileName($filename, $checkExtension = true)\n    {\n        $filename = urldecode($filename);\n\n        // If the filename was not empty\n        if (trim($filename) === '') {\n            throw new AdmException('SYS_FILENAME_EMPTY');\n        }\n\n        // filename should only contains valid characters and don't start with a dot\n        if (\n            basename($filename) !== $filename ||\n            self::strStartsWith($filename, '.') ||\n            self::strContains($filename, '//') ||\n            self::strContains($filename, '\\\\') ||\n            (!self::strValidCharacters($filename, 'file') && $checkExtension) ||\n            (!self::strValidCharacters($filename, 'folder') && !$checkExtension)\n        ) {\n            throw new AdmException('SYS_FILENAME_INVALID', array(self::strStripTags($filename)));\n        }\n\n        if ($checkExtension) {\n            // check if the extension is not listed as blocked\n            $extensionBlocklist = array('php', 'php3', 'php4', 'php5', 'pht', 'html', 'htm', 'phtml',\n                'shtml', 'htaccess', 'htpasswd', 'pl', 'js', 'vbs', 'asp',\n                'asa', 'cer', 'asax', 'swf', 'xap', 'cgi', 'ssi', 'phar', 'svg');\n            $fileExtension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\n\n            if (in_array($fileExtension, $extensionBlocklist, true)) {\n                throw new AdmException('SYS_FILE_EXTENSION_INVALID');\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Check if a filename contains invalid characters. The characters will be checked with StringUtils::strValidCharacters.\n     * In addition the function checks if the name contains .. or a . at the beginning.\n     * @param string $filename     Name of the file that should be checked.\n     * @throws AdmException SYS_FILENAME_EMPTY : Filename was empty\n     *                      SYS_FILENAME_INVALID : Filename contains invalid characters\n     * @return true Returns @true if filename contains only valid characters. Otherwise an AdmException is thrown\n     */\n    public static function strIsValidFolderName($filename)\n    {\n        // If the filename was not empty\n        if (trim($filename) === '') {\n            throw new AdmException('SYS_FOLDER_NAME_EMPTY');\n        }\n\n        // filename should only contains valid characters and don't start with a dot\n        if (basename($filename) !== $filename || self::strStartsWith($filename, '.') || !self::strValidCharacters($filename, 'folder')) {\n            throw new AdmException('SYS_FOLDER_NAME_INVALID', array($filename));\n        }\n\n        return true;\n    }\n}\n", "<?php\n/**\n ***********************************************************************************************\n * Redirect to chosen url\n *\n * @copyright 2004-2021 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/******************************************************************************\n * Parameters:\n *\n * url - url that should be redirected\n *\n *****************************************************************************/\n\nrequire_once(__DIR__ . '/common.php');\n\n// Initialize and check the parameters\n$getUrl = admFuncVariableIsValid($_GET, 'url', 'url', array('requireValue' => true));\n\nif (filter_var($getUrl, FILTER_VALIDATE_URL) === false) {\n    $gMessage->show($gL10n->get('SYS_REDIRECT_URL_INVALID'));\n    // => EXIT\n}\n\n// create html page object\n$page = new HtmlPage('admidio-redirect', $gL10n->get('SYS_REDIRECT'));\n\n// add special header for automatic redirection after x seconds\n$page->addHeader('<meta http-equiv=\"refresh\" content=\"' . $gSettingsManager->getInt('weblinks_redirect_seconds') . '; url=' . $getUrl . '\">');\n\n// Counter z\u00e4hlt die sekunden bis zur Weiterleitung runter\n$page->addJavascript(\n    '\n    /**\n     * @param {bool} init\n     */\n    function countDown(init) {\n        if (init || --document.getElementById(\"counter\").firstChild.nodeValue > 0) {\n            window.setTimeout(\"countDown()\", 1000);\n        }\n    };\n    countDown(true);'\n);\n\n// Html des Modules ausgeben\n$page->addHtml(\n    '<p class=\"lead\">' .\n        $gL10n->get(\n            'SYS_REDIRECT_DESC',\n            array($gCurrentOrganization->getValue('org_longname'),\n            '<span id=\"counter\">' . $gSettingsManager->getInt('weblinks_redirect_seconds') . '</span>',\n            '<strong>' . $getUrl . '</strong>',\n            '<a href=\"' . $getUrl . '\" target=\"_self\">',\n            '</a>')\n        ) .\n    '</p>'\n);\n\n// show html of complete page\n$page->show();\n"], "filenames": ["adm_program/system/bootstrap/function.php", "adm_program/system/classes/StringUtils.php", "adm_program/system/redirect.php"], "buggy_code_start_loc": [274, 163, 22], "buggy_code_end_loc": [401, 173, 23], "fixing_code_start_loc": [274, 163, 22], "fixing_code_end_loc": [409, 174, 23], "type": "CWE-79", "message": "Admidio is a free open source user management system for websites of organizations and groups. A cross-site scripting vulnerability is present in Admidio prior to version 4.0.12. The Reflected XSS vulnerability occurs because redirect.php does not properly validate the value of the url parameter. Through this vulnerability, an attacker is capable to execute malicious scripts. This issue is patched in version 4.0.12.", "other": {"cve": {"id": "CVE-2021-43810", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-07T22:15:06.997", "lastModified": "2021-12-09T19:44:54.367", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Admidio is a free open source user management system for websites of organizations and groups. A cross-site scripting vulnerability is present in Admidio prior to version 4.0.12. The Reflected XSS vulnerability occurs because redirect.php does not properly validate the value of the url parameter. Through this vulnerability, an attacker is capable to execute malicious scripts. This issue is patched in version 4.0.12."}, {"lang": "es", "value": "Admidio es un sistema gratuito de administraci\u00f3n de usuarios de c\u00f3digo abierto para sitios web de organizaciones y grupos. Se presenta una vulnerabilidad de tipo cross-site scripting en Admidio versiones anteriores a 4.0.12. La vulnerabilidad de tipo XSS reflejada se produce porque el archivo redirect.php no comprueba correctamente el valor del par\u00e1metro url. Mediante esta vulnerabilidad, un atacante es capaz de ejecutar scripts maliciosos. Este problema est\u00e1 parcheado en la versi\u00f3n 4.0.12"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:admidio:admidio:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.12", "matchCriteriaId": "49D9EA34-4C02-4E67-866C-144321A50907"}]}]}], "references": [{"url": "https://github.com/Admidio/admidio/commit/c043267d362f7813543cc2785119bf3e3e54fe21", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Admidio/admidio/commit/fcb0609abc1d2f65bc1377866bd678e5d891404b", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Admidio/admidio/releases/tag/v4.0.12", "source": "security-advisories@github.com", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/Admidio/admidio/security/advisories/GHSA-3qgf-qgc3-42hh", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Admidio/admidio/commit/c043267d362f7813543cc2785119bf3e3e54fe21"}}