{"buggy_code": ["\n// State variables\nvar gCommentDlg = null;\nvar gEditCount = 0;\nvar gPublishing = false;\nvar gPendingSaveCount = 0;\nvar gPendingDiffFragments = {};\nvar gReviewBanner = $(\"#review-banner\");\nvar gDraftBanner = $(\"#draft-banner\");\nvar gDraftBannerButtons = $(\"input\", gDraftBanner);\nvar gFileAttachmentComments = {};\nvar gReviewRequest = new RB.ReviewRequest(gReviewRequestId,\n                                          gReviewRequestSitePrefix,\n                                          gReviewRequestPath);\n\n\n/*\n * \"complete\" signal handlers for various fields, designed to do\n * post-processing of the values for display.\n */\nvar gEditorCompleteHandlers = {\n    'bugs_closed': function(data) {\n        if (gBugTrackerURL == \"\") {\n            return data.join(\", \");\n        } else {\n            return urlizeList(data, function(item) {\n                return gBugTrackerURL.replace(\"%s\", item);\n            });\n        }\n    },\n    'target_groups': function(data) {\n        return urlizeList(data,\n            function(item) { return item.url; },\n            function(item) { return item.name; }\n        );\n    },\n    'target_people': function(data) {\n        return $(urlizeList(data,\n                            function(item) { return item.url; },\n                            function(item) { return item.username; }))\n            .addClass(\"user\")\n            .user_infobox();\n    },\n    'description': linkifyText,\n    'testing_done': linkifyText\n};\n\n\n/*\n * gCommentIssueManager takes care of setting the state of a particular\n * comment issue, and also takes care of notifying callbacks whenever\n * the state is successfully changed.\n */\nvar gCommentIssueManager = new function() {\n    var callbacks = {};\n    var comments = {};\n\n    /*\n     * setCommentState - set the state of comment issue\n     * @param review_id the id for the review that the comment belongs to\n     * @param comment_id the id of the comment with the issue\n     * @param comment_type the type of comment, either \"diff_comments\",\n     *                     \"screenshot_comments\", or \"file_attachment_comments\".\n     * @param state the state to set the comment issue to - either\n     *              \"open\", \"resolved\", or \"dropped\"\n     */\n    this.setCommentState = function(review_id, comment_id,\n                                    comment_type, state) {\n        var comment = getComment(review_id, comment_id, comment_type);\n        requestState(comment, state);\n    };\n\n    /*\n     * registerCallback - allows clients to register callbacks to be\n     * notified when a particular comment state is updated.\n     * @param comment_id the id of the comment to be notified about\n     * @param callback a function of the form:\n     *                 function(issue_state) {}\n     */\n    this.registerCallback = function(comment_id, callback) {\n        if (!callbacks[comment_id]) {\n            callbacks[comment_id] = [];\n        }\n\n        callbacks[comment_id].push(callback);\n    };\n\n    /*\n     * A helper function to either generate the appropriate\n     * comment object based on comment_type, or to grab the\n     * comment from a cache if it's been generated before.\n     */\n    function getComment(review_id, comment_id, comment_type) {\n        if (comments[comment_id]) {\n            return comments[comment_id];\n        }\n\n        var comment = null;\n\n        if (comment_type === \"diff_comments\") {\n            comment = gReviewRequest\n                .createReview(review_id)\n                .createDiffComment(comment_id);\n        } else if (comment_type === \"screenshot_comments\") {\n            comment = gReviewRequest\n                .createReview(review_id)\n                .createScreenshotComment(comment_id);\n        } else if (comment_type === \"file_attachment_comments\") {\n            comment = gReviewRequest\n                .createReview(review_id)\n                .createFileAttachmentComment(comment_id);\n        } else {\n            console.log(\"getComment received unexpected context type '%s'\",\n                        comment_type);\n        }\n\n        comments[comment_id] = comment;\n        return comment;\n    }\n\n    // Helper function to set the state of a comment\n    function requestState(comment, state) {\n        comment.ready(function() {\n            comment.issue_status = state;\n            comment.save({\n                success: function(rsp) {\n                    notifyCallbacks(comment.id, comment.issue_status);\n\n                    /*\n                     * We don't want the current user to receive the\n                     * notification that the review request has been\n                     * updated, since they themselves updated the\n                     * issue status.\n                     */\n                    if (rsp.last_activity_time) {\n                        gReviewRequest.markUpdated(rsp.last_activity_time);\n                    }\n                }\n            });\n        });\n    }\n\n    /*\n     * Helper function that notifies all callbacks registered for\n     * a particular comment\n     */\n    function notifyCallbacks(comment_id, issue_status) {\n        for (var i = 0; i < callbacks[comment_id].length; i++) {\n            callbacks[comment_id][i](issue_status);\n        }\n    }\n}();\n\n\n/*\n * Converts an array of items to a list of hyperlinks.\n *\n * By default, this will use the item as the URL and as the hyperlink text.\n * By overriding urlFunc and textFunc, the URL and text can be customized.\n *\n * @param {array}    list            The list of items.\n * @param {function} urlFunc         A function to return the URL for an item\n *                                   in the list.\n * @param {function} textFunc        A function to return the text for an item\n *                                   in the list.\n * @param {function} postProcessFunc Post-process generated elements in the\n                                     list.\n *\n * @return A string containing the HTML markup for the list of hyperlinks.\n */\nfunction urlizeList(list, urlFunc, textFunc, postProcessFunc) {\n    var str = \"\";\n\n    for (var i = 0; i < list.length; i++) {\n        var item = list[i];\n        str += '<a href=\"';\n        str += (urlFunc ? urlFunc(item) : item);\n        str += '\">';\n        str += (textFunc ? textFunc(item) : item);\n        str += '</a>';\n\n        if (i < list.length - 1) {\n            str += \", \";\n        }\n    }\n\n    return str;\n}\n\n\n/*\n * Linkifies a block of text, turning URLs, /r/#/ paths, nad bug numbers\n * into clickable links.\n *\n * @param {string} text  The text to linkify.\n *\n * @returns {string} The resulting HTML.\n */\nfunction linkifyText(text) {\n    text = text.htmlEncode();\n\n    /* Linkify all URLs. */\n    text = text.replace(\n        /\\b([a-z]+:\\/\\/[\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*([\\-A-Za-z0-9+@#\\/%=~_();|]|))/g,\n        function(url) {\n            /*\n             * We might catch an entity at the end of the URL. This is hard\n             * to avoid, since we can't rely on advanced RegExp techniques\n             * in all browsers. So, we'll now search for it and prevent it\n             * from being part of the URL if it exists. However, a URL with \n             * an open bracket will not have its close bracket removed. This\n             * was a modification to the original bug fix.\n             *\n             * See bug 1069.\n             */\n\n            var extra = '',\n                parts = url.match(/^(.*)(&[a-z]+;|\\))/),\n                openParen = url.match(/.*\\(.*/);\n\n            if (parts != null && openParen == null ) {\n                /* We caught an entity. Set it free. */\n                url = parts[1];\n                extra = parts[2];\n            }\n\n            return '<a href=\"' + url + '\">' + url + '</a>' + extra;\n        });\n\n\n    /* Linkify /r/#/ review request numbers */\n    text = text.replace(\n        /(^|\\s|&lt;)\\/(r\\/\\d+(\\/[\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|])?)/g,\n        '$1<a href=\"' + SITE_ROOT + '$2\">/$2</a>');\n\n    /* Bug numbers */\n    if (gBugTrackerURL != \"\") {\n        text = text.replace(/\\b(bug|issue) (#([^.\\s]+)|#?(\\d+))/gi,\n            function(text, m2, m3, bugnum1, bugnum2) {\n                /*\n                 * The bug number can appear in either of those groups,\n                 * depending on how this was typed, so try both.\n                 */\n                var bugnum = bugnum1 || bugnum2;\n\n                return '<a href=\"' +\n                       gBugTrackerURL.replace(\"%s\", bugnum) +\n                       '\">' + text + '</a>';\n            });\n    }\n\n    return text;\n}\n\n\n/*\n * Sets a field in the draft.\n *\n * If we're in the process of publishing, this will check if we have saved\n * all fields before publishing the draft.\n *\n * @param {string} field  The field name.\n * @param {string} value  The field value.\n */\nfunction setDraftField(field, value) {\n    gReviewRequest.setDraftField({\n        field: field,\n        value: value,\n        buttons: gDraftBannerButtons,\n        success: function(rsp) {\n            /* Checking if invalid user or group was entered. */\n            if (rsp.stat == \"fail\" && rsp.fields) {\n\n                $('#review-request-warning')\n                    .delay(6000)\n                    .fadeOut(400, function() {\n                        $(this).hide();\n                });\n\n                /* Wrap each term in quotes or a leading 'and'. */\n                $.each(rsp.fields[field], function(key, value) {\n                    var size = rsp.fields[field].length;\n\n                    if (key == size - 1 && size > 1) {\n                      rsp.fields[field][key] = \"and '\" + value + \"'\";\n                    } else {\n                      rsp.fields[field][key] = \"'\" + value + \"'\";\n                    }\n                });\n\n                var message = rsp.fields[field].join(\", \");\n\n                if (rsp.fields[field].length == 1) {\n                    if (field == \"target_groups\") {\n                        message = \"Group \" + message + \" does not exist.\";\n                    } else {\n                        message = \"User \" + message + \" does not exist.\";\n                    }\n                } else {\n                    if (field == \"target_groups\") {\n                        message = \"Groups \" + message + \" do not exist.\";\n                    } else {\n                        message = \"Users \" + message + \" do not exist.\";\n                    }\n                }\n\n                $(\"#review-request-warning\").html(message).show();\n            }\n\n            var func = gEditorCompleteHandlers[field];\n\n            if ($.isFunction(func)) {\n                $(\"#\" + field).html(func(rsp['draft'][field]));\n            }\n\n            gDraftBanner.show();\n\n            if (gPublishing) {\n                gPendingSaveCount--;\n\n                if (gPendingSaveCount == 0) {\n                    publishDraft();\n                }\n            }\n        },\n        error: function() {\n            gPublishing = false;\n        }\n    });\n}\n\n\n/*\n * An autocomplete() wrapper that converts our autocomplete data into the\n * format expected by jQuery.ui.autocomplete. It also adds some additional\n * explanatory text to the bottom of the autocomplete list.\n *\n * options has the following fields:\n *\n *    fieldName   - The field name (\"groups\" or \"people\").\n *    nameKey     - The key containing the name in the result data.\n *    descKey     - The key containing the description in the result\n *                  data. This is optional.\n *    extraParams - Extra parameters to send in the query. This is optional.\n *\n * @param {object} options    The options, as listed above.\n *\n * @return {jQuery} This jQuery set.\n */\n$.fn.reviewsAutoComplete = function(options) {\n    return this.each(function() {\n        $(this)\n            .autocomplete({\n                formatItem: function(data) {\n                    var s = data[options.nameKey];\n\n                    if (options.descKey) {\n                        s += \" <span>(\" + data[options.descKey] + \")</span>\";\n                    }\n\n                    return s;\n                },\n                matchCase: false,\n                multiple: true,\n                parse: function(data) {\n                    var jsonData = eval(\"(\" + data + \")\");\n                    var items = jsonData[options.fieldName];\n                    var parsed = [];\n\n                    for (var i = 0; i < items.length; i++) {\n                        var value = items[i];\n\n                        parsed.push({\n                            data: value,\n                            value: value[options.nameKey],\n                            result: value[options.nameKey]\n                        });\n                    }\n\n                    return parsed;\n                },\n                url: SITE_ROOT + gReviewRequestSitePrefix + \"api/\" + options.fieldName + \"/\",\n                extraParams: options.extraParams\n            })\n            .bind(\"autocompleteshow\", function() {\n                /*\n                 * Add the footer to the bottom of the results pane the\n                 * first time it's created.\n                 *\n                 * Note that we may have multiple .ui-autocomplete-results\n                 * elements, and we don't necessarily know which is tied to\n                 * this. So, we'll look for all instances that don't contain\n                 * a footer.\n                 */\n                var resultsPane = $(\".ui-autocomplete-results:not(\" +\n                                    \":has(.ui-autocomplete-footer))\");\n\n                if (resultsPane.length > 0) {\n                    $(\"<div/>\")\n                        .addClass(\"ui-autocomplete-footer\")\n                        .text(\"Press Tab to auto-complete.\")\n                        .appendTo(resultsPane);\n                }\n            });\n    });\n};\n\n\n/*\n * Publishes the draft to the server. This assumes all fields have been\n * saved.\n *\n * Checks all the fields to make sure we have the information we need\n * and then redirects the user to the publish URL.\n */\nfunction publishDraft() {\n    if ($.trim($(\"#target_groups\").html()) == \"\" &&\n        $.trim($(\"#target_people\").html()) == \"\") {\n        alert(\"There must be at least one reviewer or group \" +\n        \"before this review request can be published.\");\n    } else if ($.trim($(\"#summary\").html()) == \"\") {\n        alert(\"The draft must have a summary.\");\n    } else if ($.trim($(\"#description\").html()) == \"\") {\n        alert(\"The draft must have a description.\");\n    } else {\n        gReviewRequest.publish({\n            buttons: gDraftBannerButtons\n        });\n    }\n}\n\n\n/*\n * Handles a comment section in a review.\n *\n * This will handle the \"Add Comment\" link and the draft banners for the\n * review.\n *\n * @param {string} review_id     The review ID.\n * @param {string} context_id    The comment section context ID.\n * @param {string} context_type  The comment section context type.\n *\n * @return {jQuery} This jQuery.\n */\n$.fn.commentSection = function(review_id, context_id, context_type) {\n    var self = $(this);\n\n    var review = gReviewRequest.createReview(review_id);\n    var review_reply = review.createReply();\n\n    var sectionId = context_id;\n    var reviewEl = $(\"#review\" + review_id);\n    var commentsList = $(\".reply-comments\", self)\n    var bannersEl = $(\".banners\", reviewEl);\n    var bannerButtonsEl = $(\"input\", bannersEl)\n\n    var addCommentLink = $(\".add_comment_link\", self)\n        .click(function() {\n            createNewCommentForm();\n            return false;\n        });\n\n    var yourcomments = $(\"pre[id^=yourcomment_]\", self);\n\n    if (yourcomments.length > 0) {\n        createCommentEditor(yourcomments);\n        showReplyDraftBanner(review_id);\n        addCommentLink.hide();\n    }\n\n    /*\n     * Creates a new comment form in response to the \"Add Comment\" link.\n     */\n    function createNewCommentForm() {\n        var yourcomment_id = \"yourcomment_\" + review_id + \"_\" +\n                             context_type;\n        if (sectionId) {\n            yourcomment_id += \"_\" + sectionId;\n        }\n\n        yourcomment_id += \"-draft\";\n\n        var yourcomment = $(\"<li/>\")\n            .addClass(\"reply-comment draft editor\")\n            .attr(\"id\", yourcomment_id + \"-item\")\n            .append($(\"<dl/>\")\n                .append($(\"<dt/>\")\n                    .append($(\"<label/>\")\n                        .attr(\"for\", yourcomment_id)\n                        .append($(\"<a/>\")\n                            .attr(\"href\", gUserURL)\n                            .html(gUserFullName)\n                        )\n                    )\n                    .append('<dd><pre id=\"' + yourcomment_id + '\"/></dd>')\n                )\n            )\n            .appendTo(commentsList);\n\n        var yourcommentEl = $(\"#\" + yourcomment_id);\n        createCommentEditor(yourcommentEl);\n        yourcommentEl\n            .inlineEditor(\"startEdit\")\n            .bind(\"cancel\", function(el, initialValue) {\n                if (initialValue == \"\") {\n                    yourcomment.remove();\n                }\n            });\n\n        addCommentLink.hide();\n    }\n\n    /*\n     * Registers an inline editor for the comment form, handling setting the\n     * comment on the server.\n     *\n     * @param {jQuery} els  The elements to create editors for.\n     *\n     * @return {jQuery} The provided elements.\n     */\n    function createCommentEditor(els) {\n        return els.each(function() {\n            var self = $(this);\n\n            self\n                .inlineEditor({\n                    cls: \"inline-comment-editor\",\n                    editIconPath: MEDIA_URL + \"rb/images/edit.png?\" +\n                                  MEDIA_SERIAL,\n                    notifyUnchangedCompletion: true,\n                    multiline: true\n                })\n                .bind(\"beginEdit\", function() {\n                    gEditCount++;\n                })\n                .bind(\"complete\", function(e, value) {\n                    gEditCount--;\n\n                    self.html(linkifyText(self.text()));\n\n                    if (context_type == \"body_top\" ||\n                        context_type == \"body_bottom\") {\n                        review_reply[context_type] = value;\n                        obj = review_reply;\n                    } else if (context_type === \"diff_comments\") {\n                        obj = new RB.DiffCommentReply(review_reply, null,\n                                                      context_id);\n                        obj.setText(value);\n                    } else if (context_type === \"screenshot_comments\") {\n                        obj = new RB.ScreenshotCommentReply(review_reply, null,\n                                                            context_id);\n                        obj.setText(value);\n                    } else if (context_type === \"file_attachment_comments\") {\n                        obj = new RB.FileAttachmentCommentReply(\n                            review_reply, null, context_id);\n                        obj.setText(value);\n                    } else {\n                        /* Shouldn't be reached. */\n                        console.log(\"createCommentEditor received unexpected \" +\n                                    \"context type '%s'\",\n                                    context_type);\n                        return;\n                    }\n\n                    obj.save({\n                        buttons: bannerButtonsEl,\n                        success: function() {\n                            removeCommentFormIfEmpty(self);\n                            showReplyDraftBanner(review_id);\n                        }\n                    });\n                })\n                .bind(\"cancel\", function(e) {\n                    gEditCount--;\n                    addCommentLink.fadeIn();\n                    removeCommentFormIfEmpty(self);\n                });\n        });\n    }\n\n    /*\n     * Removes a comment form if the contents are empty.\n     *\n     * @param {jQuery} editorEl  The inline editor element.\n     */\n    function removeCommentFormIfEmpty(editorEl) {\n        var value = editorEl.inlineEditor(\"value\");\n\n        if (value.stripTags().strip() != \"\") {\n            return;\n        }\n\n        $(\"#\" + editorEl[0].id + \"-item\").hide(\"slow\", function() {\n            $(this).remove();\n\n            if ($(\".inline-comment-editor\", reviewEl).length == 0) {\n                bannersEl.children().remove();\n            }\n\n            addCommentLink.fadeIn();\n\n            /* Find out if we need to discard this. */\n            review_reply.discardIfEmpty({\n                buttons: bannerButtonsEl\n            });\n        });\n    }\n\n    /*\n     * Shows the reply draft banner on the review.\n     *\n     * @param {string} review_id  The review object's ID.\n     */\n    function showReplyDraftBanner(review_id) {\n        if (bannersEl.children().length == 0) {\n            bannersEl.append($.replyDraftBanner(review_reply,\n                                                bannerButtonsEl));\n        }\n    }\n};\n\n\n/* Handles a comment issue in either the review details page, or the\n * inline comment viewer.\n * @param review_id the id of the review that the comment belongs to\n * @param comment_id the id of the comment with the issue\n * @param comment_type dictates the type of comment - either\n *                     \"diff_comments\", \"screenshot_comments\" or\n *                     \"file_attachment_comments\".\n * @param issue_status the initial status of the comment - either\n *                     \"open\", \"resolved\" or \"dropped\"\n * @param interactive true if the user should be shown buttons to\n *                    manipulate the comment issue - otherwise false.\n */\n$.fn.commentIssue = function(review_id, comment_id, comment_type,\n                             issue_status, interactive) {\n    var self = this;\n    var OPEN = 'open';\n    var RESOLVED = 'resolved';\n    var DROPPED = 'dropped';\n\n    var issue_reopen_button = $(\".issue-button.reopen\", this);\n    var issue_resolve_button = $(\".issue-button.resolve\", this);\n    var issue_drop_button = $(\".issue-button.drop\", this);\n    self.review_id = review_id;\n    self.comment_id = comment_id;\n    self.comment_type = comment_type;\n    self.issue_status = issue_status;\n    self.interactive = interactive;\n\n    function disableButtons() {\n        issue_reopen_button.attr(\"disabled\", true);\n        issue_resolve_button.attr(\"disabled\", true);\n        issue_drop_button.attr(\"disabled\", true);\n    }\n\n    function enableButtons() {\n        issue_reopen_button.attr(\"disabled\", false);\n        issue_resolve_button.attr(\"disabled\", false);\n        issue_drop_button.attr(\"disabled\", false);\n    }\n\n    function enterState(state) {\n        disableButtons();\n        gCommentIssueManager.setCommentState(self.review_id, self.comment_id,\n                                             self.comment_type, state);\n    }\n\n    issue_reopen_button.click(function() {\n        enterState(OPEN);\n    });\n\n    issue_resolve_button.click(function() {\n        enterState(RESOLVED);\n    });\n\n    issue_drop_button.click(function() {\n        enterState(DROPPED);\n    });\n\n    self.enter_state = function(state) {\n        self.state = self.STATES[state];\n        self.state.enter();\n        if (self.interactive) {\n            self.state.showButtons();\n            enableButtons();\n        }\n    }\n\n    var open_state = {\n        enter: function() {\n            $(\".issue-button.reopen\", self).hide();\n            $(\".issue-state\", self)\n                .removeClass(\"dropped\")\n                .removeClass(\"resolved\")\n                .addClass(\"open\");\n            $(\".issue-message\", self)\n                .text(\"An issue was opened.\");\n        },\n        showButtons: function() {\n            $(\".issue-button.drop\", self).show();\n            $(\".issue-button.resolve\", self).show();\n        }\n    }\n\n    var resolved_state = {\n        enter: function() {\n            $(\".issue-button.resolve\", self).hide();\n            $(\".issue-button.drop\", self).hide();\n            $(\".issue-state\", self)\n                .removeClass(\"dropped\")\n                .removeClass(\"open\")\n                .addClass(\"resolved\");\n            $(\".issue-message\", self)\n                .text(\"The issue has been resolved.\");\n        },\n        showButtons: function() {\n            $(\".issue-button.reopen\", self).show();\n        }\n    }\n\n    var dropped_state = {\n        enter: function() {\n            $(\".issue-button.resolve\", self).hide();\n            $(\".issue-button.drop\", self).hide();\n            $(\".issue-state\", self)\n                .removeClass(\"open\")\n                .removeClass(\"resolved\")\n                .addClass(\"dropped\");\n            $(\".issue-message\", self)\n                .text(\"The issue has been dropped.\");\n        },\n        showButtons: function() {\n            $(\".issue-button.reopen\", self).show();\n        }\n    }\n\n    self.STATES = {};\n    self.STATES[OPEN] = open_state;\n    self.STATES[RESOLVED] = resolved_state;\n    self.STATES[DROPPED] = dropped_state;\n\n    // Set the comment to the initial state\n    self.enter_state(self.issue_status);\n\n    // Register to watch updates on the comment issue state\n    gCommentIssueManager\n        .registerCallback(self.comment_id, self.enter_state);\n\n    return self;\n}\n\n\n\n/*\n * Wraps an inline comment so that they can display issue\n * information.\n */\n$.fn.issueIndicator = function() {\n    var issue_indicator = $('<div/>')\n        .addClass('issue-state')\n        .appendTo(this);\n\n    var message = $('<span/>')\n        .addClass('issue-message')\n        .appendTo(issue_indicator);\n\n    return this;\n}\n\n\n/*\n * Wraps an inline comment so that it displays buttons\n * for setting the state of a comment issue.\n */\n$.fn.issueButtons = function() {\n    var issue_indicator = $(\".issue-state\", this);\n\n    var buttons = $('<div class=\"buttons\"/>')\n        .addClass('buttons')\n        .appendTo(issue_indicator);\n\n    var resolve_string = \"Fixed\";\n    var drop_string = \"Drop\";\n    var reopen_string = \"Re-open\";\n\n    var button_string = '<input type=\"button\" class=\"issue-button resolve\"'\n                      + 'value=\"' + resolve_string + '\"/>'\n                      + '<input type=\"button\" class=\"issue-button drop\"'\n                      + 'value=\"' + drop_string + '\"/>'\n                      + '<input type=\"button\" class=\"issue-button reopen\"'\n                      + 'value=\"' + reopen_string + '\"/>';\n\n    buttons.append(button_string);\n\n    return this;\n}\n\n\n/*\n * Creates a floating reply banner. The banner will stay in view while the\n * parent review is visible on screen.\n */\n$.replyDraftBanner = function(review_reply, bannerButtonsEl) {\n    var banner = $(\"<div/>\")\n        .addClass(\"banner\")\n        .append(\"<h1>This reply is a draft</h1>\")\n        .append(\" Be sure to publish when finished.\")\n        .append($('<input type=\"button\"/>')\n            .val(\"Publish\")\n            .click(function() {\n                review_reply.publish({\n                    buttons: bannerButtonsEl,\n                    success: function() {\n                        window.location = gReviewRequestPath;\n                    }\n                });\n            })\n        )\n        .append($('<input type=\"button\"/>')\n            .val(\"Discard\")\n            .click(function() {\n                review_reply.discard({\n                    buttons: bannerButtonsEl,\n                    success: function() {\n                        window.location = gReviewRequestPath;\n                    }\n                });\n            })\n        )\n        .floatReplyDraftBanner();\n\n    return banner;\n}\n\n/*\n * Floats a reply draft banner. This ensures it's always visible on screen\n * when the review is visible.\n */\n$.fn.floatReplyDraftBanner = function() {\n    return $(this).each(function() {\n        var self = $(this);\n        var floatSpacer = null;\n        var container = null;\n\n        $(window).scroll(updateFloatPosition);\n        $(window).resize(updateSize);\n        updateFloatPosition();\n\n        function updateSize() {\n            if (floatSpacer != null) {\n                floatSpacer.height(self.height() +\n                                   self.getExtents(\"bpm\", \"tb\"));\n                self.width(floatSpacer.parent().width() -\n                           self.getExtents(\"bpm\", \"lr\"));\n            }\n        }\n\n        function updateFloatPosition() {\n            if (self.parent().length == 0) {\n                return;\n            }\n\n            /*\n             * Something about the below causes the \"Publish\" button to never\n             * show up on IE8. Turn it into a fixed box on IE.\n             */\n            if ($.browser.msie) {\n                return;\n            }\n\n            if (floatSpacer == null) {\n                floatSpacer = self.wrap($(\"<div/>\")).parent();\n                updateSize();\n            }\n\n            if (container == null) {\n                container = self.closest('.review');\n            }\n\n            var containerTop = container.offset().top;\n            var windowTop = $(window).scrollTop();\n            var topOffset = floatSpacer.offset().top - windowTop;\n            var outerHeight = self.outerHeight();\n\n            if (!container.hasClass(\"collapsed\") &&\n                topOffset < 0 &&\n                containerTop < windowTop &&\n                windowTop < (containerTop + container.outerHeight() -\n                             outerHeight)) {\n                self.css({\n                    top: 0,\n                    position: \"fixed\"\n                });\n\n                updateSize();\n            } else {\n                self.css({\n                    top: null,\n                    position: null\n                });\n            }\n        }\n    });\n}\n\n\n/*\n * Creates the comment detail dialog for lines in a diff. This handles the\n * maintenance of comment blocks and shows existing comments on a block.\n *\n * @return {jQuery} This jQuery.\n */\n$.fn.commentDlg = function() {\n    var DIALOG_TOTAL_HEIGHT = 250;\n    var SLIDE_DISTANCE = 10;\n    var COMMENTS_BOX_WIDTH = 280;\n    var FORM_BOX_WIDTH = 380;\n    var self = this;\n\n    /* State */\n    var comment = null;\n    var textFieldWidthDiff = 0;\n    var textFieldHeightDiff = 0;\n    var dirty = false;\n    var ignoreKeyUp = false;\n\n    /* Page elements */\n    var draftForm    = $(\"#draft-form\", this);\n    var commentsPane = $(\"#review_comments\", this);\n    var commentsList = $(\"#review_comment_list\", this);\n    var actionField  = $(\"#comment_action\", draftForm);\n    var buttons      = $(\".buttons\", draftForm);\n    var statusField  = $(\".status\", draftForm);\n    var issueOptions = $(\"#comment-issue-options\", draftForm);\n\n    var issueField = $(\"#comment_issue\", draftForm)\n        .click(function() {\n            saveButton.attr(\"disabled\", textField.val() == \"\");\n            self.setDirty(true);\n        });\n    var cancelButton = $(\"#comment_cancel\", draftForm)\n        .click(function() {\n            comment.deleteIfEmpty();\n            self.close();\n        });\n    var deleteButton = $(\"#comment_delete\", this)\n        .click(function() {\n            comment.deleteComment();\n            self.close();\n        });\n    var saveButton = $(\"#comment_save\", this)\n        .click(function() {\n            comment.setText(textField.val());\n            comment.issue_opened = issueField[0].checked;\n            comment.save();\n            self.close();\n        });\n\n    var textField = $(\"#comment_text\", draftForm)\n        .keydown(function(e) { e.stopPropagation(); })\n        .keypress(function(e) {\n            e.stopPropagation();\n\n            switch (e.which) {\n                case 10:\n                case $.ui.keyCode.ENTER:\n                    /* Enter */\n                    if (e.ctrlKey) {\n                        ignoreKeyUp = true;\n                        saveButton.click();\n                    }\n                    break;\n\n                case $.ui.keyCode.ESCAPE:\n                    /* Escape */\n                    ignoreKeyUp = true;\n                    cancelButton.click();\n                    break;\n\n                case 73:\n                case 105:\n                    /* I */\n                    if (e.altKey) {\n                      issueField.click();\n                      ignoreKeyUp = true;\n                    }\n\n                    break;\n\n                default:\n                    ignoreKeyUp = false;\n                    break;\n            }\n        })\n        .keyup(function(e) {\n            /*\n             * We check if we want to ignore this event. The state from\n             * some shortcuts (control-enter) may not be settled, and we may\n             * end up setting this to dirty, causing page leave confirmations.\n             */\n            if (!ignoreKeyUp) {\n                self.setDirty(dirty || comment.text != textField.val());\n                saveButton.attr(\"disabled\", textField.val() == \"\");\n                e.stopPropagation();\n            }\n        });\n\n    this\n        .css(\"position\", \"absolute\")\n        .mousedown(function(evt) {\n            /*\n             * Prevent this from reaching the selection area, which will\n             * swallow the default action for the mouse down.\n             */\n            evt.stopPropagation();\n        })\n        .proxyTouchEvents();\n\n    if (!$.browser.msie || $.browser.version >= 9) {\n        /*\n         * resizable is pretty broken in IE 6/7.\n         */\n        var grip = $(\"<img/>\")\n            .addClass(\"ui-resizable-handle ui-resizable-grip\")\n            .attr(\"src\", MEDIA_URL + \"rb/images/resize-grip.png?\" +\n                         MEDIA_SERIAL)\n            .insertAfter(buttons)\n            .proxyTouchEvents();\n\n        this.resizable({\n            handles: $.browser.mobileSafari ? \"grip,se\"\n                                            : \"grip,n,e,s,w,se,sw,ne,nw\",\n            transparent: true,\n            resize: function() { self.handleResize(); }\n        });\n\n        var startOffset = null;\n        var baseWidth = null;\n        var baseHeight = null;\n\n        /*\n         * Enable resizing through a grip motion on a touchpad.\n         */\n        $([this[0], textField[0]])\n            .bind(\"gesturestart\", function(evt) {\n                startOffset = self.offset();\n                startWidth = self.width();\n                startHeight = self.height();\n            })\n            .bind(\"gesturechange\", function(evt) {\n                if (event.scale == 0) {\n                    return false;\n                }\n\n                var newWidth = startWidth * event.scale;\n                var newHeight = startHeight * event.scale;\n\n                self\n                    .width(newWidth)\n                    .height(newHeight)\n                    .move(startOffset.left - (newWidth - startWidth) / 2,\n                          startOffset.top - (newHeight - startHeight) / 2);\n                self.handleResize();\n\n                return false;\n            });\n\n        /* Reset the opacity, which resizable() changes. */\n        grip.css(\"opacity\", 100);\n    }\n\n    if (!$.browser.msie || $.browser.version >= 7) {\n        /*\n         * draggable works in IE7 and up, but not IE6.\n         */\n        this.draggable({\n            handle: $(\".title\", this).css(\"cursor\", \"move\")\n        });\n    }\n\n    if (!gUserAuthenticated) {\n        textField.attr(\"disabled\", true);\n        saveButton.attr(\"disabled\", true);\n    }\n\n    /*\n     * Sets the dirty state of the comment dialog.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.setDirty = function(newDirty) {\n        if (newDirty != dirty) {\n            dirty = newDirty;\n\n            if (dirty) {\n                gEditCount++;\n                statusField.html(\"This comment has unsaved changes.\");\n            } else {\n                gEditCount--;\n                statusField.empty();\n            }\n\n            if (this.is(\":visible\")) {\n                this.handleResize();\n            }\n        }\n\n        return this;\n    };\n\n    /*\n     * Opens the comment dialog and focuses the text field.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.open = function(fromEl) {\n        this\n            .css({\n                top: parseInt(this.css(\"top\")) - SLIDE_DISTANCE,\n                opacity: 0\n            })\n            .show()\n            .handleResize()\n            .animate({\n                top: \"+=\" + SLIDE_DISTANCE + \"px\",\n                opacity: 1\n            }, 350, \"swing\", function() {\n                self.scrollIntoView();\n            })\n            .setDirty(false);\n\n        textField.focus();\n\n        return this;\n    }\n\n    /*\n     * Closes the comment dialog, discarding the comment block if empty.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.close = function() {\n        if (self.is(\":visible\")) {\n            textField.val(\"\");\n            issueField[0].checked = false;\n\n            self\n                .setDirty(false)\n                .animate({\n                    top: \"-=\" + SLIDE_DISTANCE + \"px\",\n                    opacity: 0\n                }, 350, \"swing\", function() {\n                    self.hide();\n                    self.comment = null;\n                    self.trigger(\"close\");\n                });\n        } else {\n            self.trigger(\"close\");\n        }\n\n        return this;\n    }\n\n    /*\n     * Sets the list of existing comments to show.\n     *\n     * @param {array} comments    The array of comments to show.\n     * @param {string} replyType  The reply type for the comments listed.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.setCommentsList = function(comments, replyType) {\n        commentsList.empty();\n\n        /*\n         * Store the offsets of the text field so we can easily set\n         * them relative to the dialog size when resizing.\n         */\n        commentsPane.hide();\n\n        var showComments = false;\n\n        if (comments.length > 0) {\n            var odd = true;\n\n            $(comments).each(function(i) {\n                var item = $(\"<li/>\")\n                    .addClass(odd ? \"odd\" : \"even\");\n                var header = $(\"<h2/>\").appendTo(item).html(this.user.name);\n                var actions = $('<span class=\"actions\"/>')\n                    .appendTo(header);\n\n                $('<a href=\"' + this.url + '\">View</a>').appendTo(actions);\n                $('<a href=\"' + gReviewRequestPath +\n                  '?reply_id=' + this.comment_id +\n                  '&reply_type=' + replyType + '\">Reply</a>')\n                    .appendTo(actions);\n                $(\"<pre/>\").appendTo(item).text(this.text);\n\n                if (this.issue_opened) {\n                    var interactive = window['gEditable'];\n                    var issue = $('<div/>')\n                        .issueIndicator();\n\n                    if (interactive) {\n                        issue.issueButtons();\n                    }\n\n                    issue\n                        .commentIssue(this.review_id, this.comment_id,\n                                      replyType, this.issue_status, interactive)\n                        .appendTo(item);\n\n                    var self = this;\n\n                    gCommentIssueManager.registerCallback(this.comment_id,\n                        function(issue_status) {\n                            self.issue_status = issue_status;\n                        }\n                    );\n                }\n\n                item.appendTo(commentsList);\n\n                showComments = true;\n\n                odd = !odd;\n            });\n        }\n\n        commentsPane.setVisible(showComments);\n\n        /* Do this here so that calculations can be done before open() */\n        var width = FORM_BOX_WIDTH;\n\n        if (showComments) {\n            width += COMMENTS_BOX_WIDTH;\n        }\n\n        /* Don't let the text field bump up the size we set below. */\n        textField\n            .width(10)\n            .height(10);\n\n        self\n            .width(width)\n            .height(DIALOG_TOTAL_HEIGHT);\n\n        return this;\n    }\n\n    /*\n     * Sets the draft comment to modify. This will reset the default state of\n     * the comment dialog.\n     *\n     * @param {RB.Comment} newComment The new draft comment to set.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.setDraftComment = function(newComment) {\n        if (comment && comment != newComment) {\n            comment.deleteIfEmpty();\n        }\n\n        comment = newComment;\n\n        comment.ready(function() {\n            textField.val(comment.text);\n            issueField[0].checked = comment.issue_opened;\n\n            self.setDirty(false);\n\n            /* Set the initial button states */\n            deleteButton.setVisible(comment.loaded);\n        });\n\n        saveButton.attr(\"disabled\", true);\n\n        /* Clear the status field. */\n        statusField.empty();\n\n        return this;\n    }\n\n    /*\n     * Handles the resize of the comment dialog. This will lay out the\n     * elements in the dialog appropriately.\n     */\n    this.handleResize = function() {\n        var width = self.width();\n        var height = self.height();\n        var formWidth = width - draftForm.getExtents(\"bp\", \"lr\");\n        var boxHeight = height;\n        var commentsWidth = 0;\n\n        if (commentsPane.is(\":visible\")) {\n            commentsPane\n                .width(COMMENTS_BOX_WIDTH - commentsPane.getExtents(\"bp\", \"lr\"))\n                .height(boxHeight - commentsPane.getExtents(\"bp\", \"tb\"))\n                .move(0, 0, \"absolute\");\n\n            commentsList.height(commentsPane.height() -\n                                commentsList.position().top -\n                                commentsList.getExtents(\"bmp\", \"b\"));\n\n            commentsWidth = commentsPane.outerWidth(true);\n            formWidth -= commentsWidth;\n        }\n\n        draftForm\n            .width(formWidth)\n            .height(boxHeight - draftForm.getExtents(\"bp\", \"tb\"))\n            .move(commentsWidth, 0, \"absolute\");\n\n        var textFieldPos = textField.position();\n        textField\n            .width(draftForm.width() - textFieldPos.left -\n                   textField.getExtents(\"bmp\", \"r\"))\n            .height(draftForm.height() - textFieldPos.top -\n                    buttons.outerHeight(true) -\n                    statusField.height() -\n                    issueOptions.height() -\n                    textField.getExtents(\"bmp\", \"b\"));\n\n        return this;\n    }\n\n    return this;\n};\n\n\n/*\n * Creates a review form for modifying a new review.\n *\n * This provides editing capabilities for creating or modifying a new\n * review. The list of comments are retrieved from the server, providing\n * context for the comments.\n *\n * @param {RB.Review} review  The review to create or modify.\n *\n * @return {jQuery} The new review form element.\n */\n$.reviewForm = function(review) {\n    rbApiCall({\n        type: \"GET\",\n        dataType: \"html\",\n        data: {},\n        url: gReviewRequestPath + \"reviews/draft/inline-form/\",\n        success: function(html) {\n            createForm(html);\n        }\n    });\n\n    var dlg;\n    var buttons;\n\n    /*\n     * Creates the actual review form. This is called once we have\n     * the HTML for the form from the server.\n     *\n     * @param {string} formHTML  The HTML content for the form.\n     */\n    function createForm(formHTML) {\n        gEditCount++;\n\n        dlg = $(\"<div/>\")\n            .attr(\"id\", \"review-form\")\n            .appendTo(\"body\") // Needed for scripts embedded in the HTML\n            .html(formHTML)\n            .modalBox({\n                title: \"Review for: \" + gReviewRequestSummary,\n                stretchX: true,\n                stretchY: true,\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(\"Publish Review\")\n                        .click(function(e) {\n                            saveReview(true);\n                            return false;\n                        }),\n                    $('<input type=\"button\"/>')\n                        .val(\"Discard Review\")\n                        .click(function(e) {\n                            gEditCount--;\n                            review.deleteReview({\n                                buttons: buttons\n                            });\n                        }),\n                    $('<input type=\"button\"/>')\n                        .val(\"Cancel\")\n                        .click(function() {\n                            gEditCount--;\n                        }),\n                    $('<input type=\"button\"/>')\n                        .val(\"Save\")\n                        .click(function() {\n                            saveReview();\n                            return false;\n                        })\n                ]\n            })\n            .keypress(function(e) { e.stopPropagation(); })\n            .trigger(\"ready\");\n\n        buttons = $(\"input\", dlg);\n\n        var body_classes = [\"body-top\", \"body-bottom\"];\n\n        for (var i in body_classes) {\n            var cls = body_classes[i];\n            $(\".\" + cls, dlg)\n                .inlineEditor({\n                    cls: cls + \"-editor\",\n                    extraHeight: 50,\n                    forceOpen: true,\n                    multiline: true,\n                    notifyUnchangedCompletion: true,\n                    showButtons: false,\n                    showEditIcon: false\n                })\n                .bind(\"beginEdit\", function() {\n                    gEditCount++;\n                })\n                .bind(\"cancel complete\", function() {\n                    gEditCount--;\n                });\n        }\n\n        $(\"textarea:first\", dlg).focus();\n        dlg.attr(\"scrollTop\", 0);\n\n        loadDiffFragments(\"review_draft_diff_comments\",\n                          \"review_draft_comment_container\");\n    }\n\n    /*\n     * Saves the review.\n     *\n     * This sets the ship_it and body values, and saves all comments.\n     */\n    function saveReview(publish) {\n        $.funcQueue(\"reviewForm\").clear();\n\n        $(\".body-top, .body-bottom\").inlineEditor(\"save\");\n\n        $(\".comment-editable\", dlg).each(function() {\n            var editable = $(this);\n            var comment = editable.data('comment');\n            var issue = editable.next()[0];\n            var issueOpened = issue ? issue.checked : false;\n\n            if (editable.inlineEditor(\"dirty\") ||\n                issueOpened != comment.issue_opened) {\n                comment.issue_opened = issueOpened;\n                $.funcQueue(\"reviewForm\").add(function() {\n                    editable\n                        .one(\"saved\", $.funcQueue(\"reviewForm\").next)\n                        .inlineEditor(\"save\");\n              });\n            }\n        });\n\n        $.funcQueue(\"reviewForm\").add(function() {\n            review.ship_it = $(\"#id_shipit\", dlg)[0].checked;\n            review.body_top = $(\".body-top\", dlg).text();;\n            review.body_bottom = $(\".body-bottom\", dlg).text();;\n\n            var options = {\n                buttons: buttons,\n                success: $.funcQueue(\"reviewForm\").next\n            };\n\n            gEditCount--;\n\n            if (publish) {\n                review.publish(options);\n            }\n            else {\n                review.save(options);\n            }\n        });\n\n        $.funcQueue(\"reviewForm\").add(function() {\n            dlg.modalBox(\"destroy\");\n\n            if (publish) {\n                hideReviewBanner();\n                gReviewBanner.queue(function() {\n                    window.location = gReviewRequestPath;\n                });\n            } else {\n                showReviewBanner();\n            }\n        });\n\n        $.funcQueue(\"reviewForm\").start();\n    }\n};\n\n\n/*\n * Adds inline editing capabilities to a comment in the review form.\n *\n * @param {object} comment  A RB.DiffComment, RB.FileAttachmentComment\n *                          or RB.ScreenshotComment instance\n *                          to store the text on and save.\n */\n$.fn.reviewFormCommentEditor = function(comment) {\n    var self = this;\n\n    return this\n        .inlineEditor({\n            extraHeight: 50,\n            forceOpen: true,\n            multiline: true,\n            notifyUnchangedCompletion: true,\n            showButtons: false,\n            showEditIcon: false,\n            useEditIconOnly: false\n        })\n        .bind(\"beginEdit\", function() {\n            gEditCount++;\n        })\n        .bind(\"cancel\", function() {\n            gEditCount--;\n        })\n        .bind(\"complete\", function(e, value) {\n            gEditCount--;\n            comment.text = value;\n            comment.save({\n                success: function() {\n                    self.trigger(\"saved\");\n                }\n            });\n        })\n        .data('comment', comment);\n};\n\n\n/*\n * Adds inline editing capabilities to close description for a review request\n * which have been submitted or discarded.\n *\n * @param {int} type  1: RB.ReviewRequest.CLOSE_DISCARDED\n *                    2: RB.ReviewRequest.CLOSE_SUBMITTED\n */\n$.fn.reviewCloseCommentEditor = function(type) {\n    return this\n        .inlineEditor({\n            editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n            multiline: true,\n            startOpen: false\n        })\n        .bind(\"complete\", function(e, value) {\n            gReviewRequest.close({\n                type: type,\n                description: value\n            });\n        });\n}\n\n\n/*\n * Adds inline editing capabilities to a field for a review request.\n */\n$.fn.reviewRequestFieldEditor = function() {\n    return this.each(function() {\n        $(this)\n            .inlineEditor({\n                cls: this.id + \"-editor\",\n                editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n                multiline: this.tagName == \"PRE\",\n                showButtons: !$(this).hasClass(\"screenshot-editable\"),\n                startOpen: this.id == \"changedescription\",\n                useEditIconOnly: $(this).hasClass(\"comma-editable\")\n            })\n            .bind(\"beginEdit\", function() {\n                gEditCount++;\n            })\n            .bind(\"cancel\", function() {\n                gEditCount--;\n            })\n            .bind(\"complete\", function(e, value) {\n                gEditCount--;\n                setDraftField(this.id, value);\n            });\n    });\n}\n\n\n/*\n * Handles interaction and events with a screenshot thumbnail.\n\n * @return {jQuery} The provided screenshot containers.\n */\n$.fn.screenshotThumbnail = function() {\n    return $(this).each(function() {\n        var self = $(this);\n\n        var screenshot_id = self.attr(\"data-screenshot-id\");\n        var screenshot = gReviewRequest.createScreenshot(screenshot_id);\n        var captionEl = self.find(\".screenshot-caption\");\n\n        captionEl.find(\"a.edit\")\n            .inlineEditor({\n                cls: this.id + \"-editor\",\n                editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n                showButtons: false\n            })\n            .bind(\"beginEdit\", function() {\n                gEditCount++;\n            })\n            .bind(\"cancel\", function() {\n                gEditCount--;\n            })\n            .bind(\"complete\", function(e, value) {\n                gEditCount--;\n                screenshot.ready(function() {\n                    screenshot.caption = value;\n                    screenshot.save({\n                        buttons: gDraftBannerButtons,\n                        success: function(rsp) {\n                            gDraftBanner.show();\n                        }\n                    });\n                });\n            });\n\n        captionEl.find(\"a.delete\")\n            .click(function() {\n                screenshot.ready(function() {\n                    screenshot.deleteScreenshot()\n                    self.empty();\n                    gDraftBanner.show();\n                });\n\n                return false;\n            });\n    });\n}\n\n\n/*\n * Adds a new, dynamic thumbnail to the thumbnail list.\n *\n * If a screenshot object is given, then this will display actual\n * thumbnail data. Otherwise, this will display a spinner.\n *\n * @param {object} screenshot  The optional screenshot to display.\n *\n * @return {jQuery} The root screenshot thumbnail div.\n */\n$.newScreenshotThumbnail = function(screenshot) {\n    var container = $('<div/>')\n        .addClass(\"screenshot-container\");\n\n    var body = $('<div class=\"screenshot\"/>')\n        .addClass(\"screenshot\")\n        .appendTo(container);\n\n    var captionArea = $('<div/>')\n        .addClass(\"screenshot-caption\")\n        .appendTo(container);\n\n    if (screenshot) {\n        body.append($(\"<a/>\")\n            .attr(\"href\", \"s/\" + screenshot.id + \"/\")\n            .append($(\"<img/>\")\n                .attr({\n                    src: screenshot.thumbnail_url,\n                    alt: screenshot.caption\n                })\n            )\n        );\n\n        captionArea\n            .append($(\"<a/>\")\n                .addClass(\"screenshot-editable edit\")\n                .attr({\n                    href: \"#\",\n                    id: \"screenshot_\" + screenshot.id + \"_caption\"\n                })\n                .text(screenshot.caption)\n            )\n            .append($(\"<a/>\")\n                .addClass(\"delete\")\n                .attr(\"href\", \"#\")\n                .append($(\"<img/>\")\n                    .attr({\n                        src: MEDIA_URL + \"rb/images/delete.png?\" +\n                             MEDIA_SERIAL,\n                        alt: \"Delete Screenshot\"\n                    })\n                )\n            );\n\n        container\n            .attr(\"data-screenshot-id\", screenshot.id)\n            .screenshotThumbnail();\n    } else {\n        body.addClass(\"loading\");\n\n        captionArea.append(\"&nbsp;\");\n    }\n\n    var thumbnails = $(\"#screenshot-thumbnails\");\n    $(thumbnails.parent()[0]).show();\n    return container.insertBefore(thumbnails.find(\"br\"));\n};\n\n\n/*\n * Handles interaction and events with a file attachment.\n\n * @return {jQuery} The provided file attachment container.\n */\n$.fn.fileAttachment = function() {\n    return $(this).each(function() {\n        var self = $(this);\n\n        var fileID = self.attr(\"data-file-id\");\n        var fileAttachment = gReviewRequest.createFileAttachment(fileID);\n        var draftComment = null;\n        var comments = [];\n        var commentsProcessed = false;\n\n        self.find(\"a.edit\")\n            .inlineEditor({\n                cls: \"file-\" + fileID + \"-editor\",\n                editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n                showButtons: false\n            })\n            .bind(\"beginEdit\", function() {\n                gEditCount++;\n            })\n            .bind(\"cancel\", function() {\n                gEditCount--;\n            })\n            .bind(\"complete\", function(e, value) {\n                gEditCount--;\n                fileAttachment.ready(function() {\n                    fileAttachment.caption = value;\n                    fileAttachment.save({\n                        buttons: gDraftBannerButtons,\n                        success: function(rsp) {\n                            gDraftBanner.show();\n                        }\n                    });\n                });\n            });\n\n        var addCommentButton =\n            self.find('.file-add-comment a')\n                .click(function() {\n                    showCommentDlg();\n                    return false;\n                });\n\n        self.find(\"a.delete\")\n            .click(function() {\n                fileAttachment.ready(function() {\n                    fileAttachment.deleteFileAttachment()\n                    self.empty();\n                    gDraftBanner.show();\n                });\n\n                return false;\n            });\n\n        function showCommentDlg() {\n            gCommentDlg\n                .one(\"close\", function() {\n                    processComments();\n                    createDraftComment();\n\n                    gCommentDlg\n                        .setDraftComment(draftComment)\n                        .setCommentsList(comments, \"file_attachment_comments\")\n                        .positionToSide(addCommentButton, {\n                            side: 'b',\n                            fitOnScreen: true\n                        });\n                    gCommentDlg.open();\n                })\n                .close();\n        }\n\n        function processComments() {\n            if (commentsProcessed) {\n                return;\n            }\n\n            var attachmentComments = gFileAttachmentComments[fileID];\n\n            if (attachmentComments && attachmentComments.length > 0) {\n                for (var i in attachmentComments) {\n                    var comment = attachmentComments[i];\n\n                    if (comment.localdraft) {\n                        createDraftComment(comment.comment_id, comment.text);\n                    } else {\n                        comments.push(comment);\n                    }\n                }\n            }\n\n            commentsProcessed = true;\n        }\n\n        function createDraftComment(commentID, text) {\n            if (draftComment != null) {\n                return;\n            }\n\n            var self = this;\n            var review = gReviewRequest.createReview();\n            draftComment = review.createFileAttachmentComment(commentID,\n                                                              fileID);\n\n            if (text) {\n                draftComment.text = text;\n            }\n\n            $.event.add(draftComment, \"saved\", function() {\n                showReviewBanner();\n            });\n        }\n    });\n}\n\n\n/*\n * Adds a file to the file attachments list.\n *\n * If an FileAttachment object is given, then this will display the\n * file data. Otherwise, this will display a placeholder.\n *\n * @param {object} fileAttachment  The optional file to display.\n *\n * @return {jQuery} The root file attachment div.\n */\n$.newFileAttachment = function(fileAttachment) {\n    var container = $('<div/>')\n        .addClass('file-container');\n\n    var body = $('<div/>')\n        .addClass('file')\n        .appendTo(container);\n\n    var actions = $('<ul/>')\n        .addClass('actions')\n        .appendTo(body);\n\n    var fileHeader = $('<div/>')\n        .addClass('file-header')\n        .appendTo(body);\n\n    var fileCaption = $('<div/>')\n        .addClass('file-caption')\n        .append($('<a/>')\n            .addClass('edit'))\n        .appendTo(body);\n\n    if (fileAttachment) {\n        container.attr('data-file-id', fileAttachment.id);\n\n        actions.append($('<li/>')\n            .addClass('file-add-comment')\n            .append($('<a/>')\n                .attr('href', '#')\n                .text('Add Comment')));\n\n        fileHeader\n            .append($('<img/>')\n                .attr('src', fileAttachment.icon_url))\n            .append(' ')\n            .append($('<a/>')\n                .attr('href', fileAttachment.url)\n                .text(fileAttachment.filename))\n            .append(' ')\n            .append($('<a/>')\n                .addClass('delete')\n                .attr('href', '#')\n                .append($('<img/>')\n                    .attr({\n                        src: MEDIA_URL + 'rb/images/delete.png?' +\n                             MEDIA_SERIAL,\n                        alt: 'Delete File'\n                    })));\n\n        fileCaption.find('a')\n            .attr('href', fileAttachment.url)\n            .text(fileAttachment.caption);\n    }\n\n    container.fileAttachment();\n\n    var attachments = $(\"#file-list\");\n    $(attachments.parent()[0]).show();\n    return container.insertBefore(attachments.find(\"br\"));\n};\n\n\n/*\n * Sets the list of file attachment comments.\n */\nfunction setFileAttachmentComments(comments) {\n    gFileAttachmentComments = comments;\n}\n\n\n/*\n * Registers for updates to the review request. This will cause a pop-up\n * bubble to be displayed when updates of the specified type are displayed.\n *\n * @param {string} lastTimestamp  The last known update timestamp for\n *                                comparison purposes.\n * @param {string} type           The type of update to watch for, or\n *                                undefined for all types.\n */\nfunction registerForUpdates(lastTimestamp, type) {\n    function updateFavIcon(url) {\n        var head = $(\"head\");\n        head.find(\"link[rel=icon]\").remove();\n        head.append($(\"<link/>\")\n            .attr({\n                href: url,\n                rel: \"icon\",\n                type: \"image/x-icon\"\n            }));\n    }\n\n    var bubble = $(\"#updates-bubble\");\n    var summaryEl;\n    var userEl;\n\n    var faviconEl = $(\"head\").find(\"link[rel=icon]\");\n    var faviconURL = faviconEl.attr(\"href\");\n    var faviconNotifyURL = MEDIA_URL + \"rb/images/favicon_notify.ico?\" +\n                           MEDIA_SERIAL;\n\n    $.event.add(gReviewRequest, \"updated\", function(evt, info) {\n        if (bubble.length == 0) {\n            updateFavIcon(faviconNotifyURL);\n\n            bubble = $('<div id=\"updates-bubble\"/>');\n            summaryEl = $('<span/>')\n                .appendTo(bubble);\n            bubble.append(\" by \");\n            userEl = $('<a href=\"\" id=\"updates-bubble-user\"/>')\n                .appendTo(bubble);\n\n            bubble\n                .append(\n                    $('<span id=\"updates-bubble-buttons\"/>')\n                        .append($('<a href=\"#\">Update Page</a>')\n                            .click(function() {\n                                window.location = gReviewRequestPath;\n                                return false;\n                            }))\n                        .append(\" | \")\n                        .append($('<a href=\"#\">Ignore</a>')\n                            .click(function() {\n                                bubble.fadeOut();\n                                updateFavIcon(faviconURL);\n                                return false;\n                            }))\n                )\n                .appendTo(document.body);\n        }\n\n        summaryEl.text(info.summary);\n        userEl\n            .attr('href', info.user.url)\n            .text(info.user.fullname);\n\n        bubble\n            .hide()\n            .css(\"position\", $.browser.msie && $.browser.version == 6\n                             ? \"absolute\" : \"fixed\")\n            .fadeIn();\n    });\n\n    gReviewRequest.beginCheckForUpdates(type, lastTimestamp);\n}\n\n\n/*\n * Shows the review banner.\n */\nfunction showReviewBanner() {\n    if (gReviewBanner.is(\":hidden\")) {\n        gReviewBanner\n            .slideDown()\n            .find(\".banner\")\n                .hide()\n                .slideDown();\n    }\n}\n\n\n/*\n * Hides the review banner.\n */\nfunction hideReviewBanner() {\n    gReviewBanner\n        .slideUp()\n        .find(\".banner\")\n            .slideUp();\n}\n\n\n/*\n * Queues the load of a diff fragment from the server.\n *\n * This will be added to a list, which will fetch the comments in batches\n * based on file IDs.\n *\n * @param {string} queue_name  The name for this load queue.\n * @param {string} comment_id  The ID of the comment.\n * @param {string} key         The key for this request, using the\n *                             filediff and interfilediff.\n */\nfunction queueLoadDiffFragment(queue_name, comment_id, key) {\n    if (!gPendingDiffFragments[queue_name]) {\n        gPendingDiffFragments[queue_name] = {};\n    }\n\n    if (!gPendingDiffFragments[queue_name][key]) {\n        gPendingDiffFragments[queue_name][key] = [];\n    }\n\n    gPendingDiffFragments[queue_name][key].push(comment_id);\n}\n\n\n/*\n * Begins the loading of all diff fragments on the page belonging to\n * the specified queue and storing in containers with the specified\n * prefix.\n */\nfunction loadDiffFragments(queue_name, container_prefix) {\n    if (!gPendingDiffFragments[queue_name]) {\n        return;\n    }\n\n    for (var key in gPendingDiffFragments[queue_name]) {\n        var comments = gPendingDiffFragments[queue_name][key];\n        var url = gReviewRequestPath + \"fragments/diff-comments/\";\n\n        for (var i = 0; i < comments.length; i++) {\n            url += comments[i];\n\n            if (i != comments.length - 1) {\n                url += \",\"\n            }\n        }\n\n        url += \"/?queue=\" + queue_name +\n               \"&container_prefix=\" + container_prefix +\n               \"&\" + AJAX_SERIAL;\n\n        $.funcQueue(\"diff_comments\").add(function(url) {\n            var e = document.createElement(\"script\");\n            e.type = \"text/javascript\";\n            e.src = url;\n            document.body.appendChild(e);\n        }(url));\n    }\n\n    // Clear the list.\n    gPendingDiffFragments[queue_name] = {};\n\n    $.funcQueue(queue_name).start();\n}\n\n\n/*\n * Initializes drag-and-drop support.\n *\n * This makes it possible to drag screenshots and other files from a file\n * manager and drop them into Review Board. This requires browser support\n * for HTML 5 file drag-and-drop.\n */\nfunction initDnD() {\n    var dropIndicator = null;\n    var screenshotDropBox;\n    var fileDropBox;\n    var middleBox;\n    var removeDropIndicatorHandle = null;\n\n    $(document.body)\n        .bind(\"dragenter\", function(event) {\n            handleDragEnter(event);\n        });\n\n    function handleDragEnter(event) {\n        if (!dropIndicator) {\n            var height = $(window).height();\n\n            dropIndicator = $(\"<div/>\")\n                .addClass(\"drop-indicator\")\n                .appendTo(document.body)\n                .width($(window).width())\n                .height(height)\n                .bind(\"dragleave\", function(event) {\n                    /*\n                     * This should check whether we've exited the drop\n                     * indicator properly. It'll prevent problems when\n                     * transitioning between elements within the indicator.\n                     *\n                     * Note that while this should work cross-browser,\n                     * Firefox 4+ appears broken in that it doesn't send us\n                     * dropleave events on exiting the window.\n                     *\n                     * Also note that it doesn't appear that we need to check\n                     * the Y coordinate. X should be 0 in most cases when\n                     * leaving, except when dragging over the right scrollbar\n                     * in Chrome, when it'll be >= the container width.\n                     */\n                    if (event.pageX <= 0 ||\n                        event.pageX >= dropIndicator.width()) {\n                        handleDragExit();\n                    }\n\n                    return false;\n                })\n                .mouseenter(function() {\n                    /*\n                     * If we get a mouse enter, then the user has moved\n                     * the mouse over the drop indicator without there\n                     * being any drag-and-drop going on. This is likely due\n                     * to the broken Firefox 4+ behavior where dragleave\n                     * events when leaving windows aren't firing.\n                     */\n                    handleDragExit();\n                    return false;\n                });\n\n            screenshotDropBox = $(\"<div/>\")\n                .addClass(\"dropbox\")\n                .appendTo(dropIndicator)\n                .bind('drop', function(event) {\n                    return handleDrop(event, \"screenshot\");\n                });\n            var screenshotText = $(\"<h1/>\")\n                .text(\"Drop Screenshot\")\n                .appendTo(screenshotDropBox);\n\n            middleBox = $(\"<h2/>\")\n                .text(\"or\")\n                .appendTo(dropIndicator);\n\n            fileDropBox = $(\"<div/>\")\n                .addClass(\"dropbox\")\n                .appendTo(dropIndicator)\n                .bind('drop', function(event) {\n                    return handleDrop(event, \"file\");\n                });\n            var fileText = $(\"<h1/>\")\n                .text(\"Drop File Attachment\")\n                .appendTo(fileDropBox);\n\n            var dropBoxHeight = (height - middleBox.height()) / 2;\n            $([screenshotDropBox[0], fileDropBox[0]])\n                .height(dropBoxHeight)\n                .bind(\"dragover\", function() {\n                    var dt = event.originalEvent.dataTransfer;\n\n                    if (dt) {\n                        dt.dropEffect = \"copy\";\n                    }\n\n                    $(this).addClass(\"hover\");\n                    return false;\n                })\n                .bind(\"dragleave\", function(event) {\n                    var dt = event.originalEvent.dataTransfer;\n\n                    if (dt) {\n                        dt.dropEffect = \"none\";\n                    }\n\n                    $(this).removeClass(\"hover\");\n                });\n\n            screenshotText.css(\"margin-top\", -screenshotText.height() / 2);\n            fileText.css(\"margin-top\", -fileText.height() / 2);\n        }\n    }\n\n    function handleDragExit(closeImmediately) {\n        if (dropIndicator == null) {\n            return;\n        }\n\n        if (removeDropIndicatorHandle) {\n            window.clearInterval(removeDropIndicatorHandle);\n            removeDropIndicatorHandle = null;\n        }\n\n        if (closeImmediately) {\n            dropIndicator.fadeOut(function() {\n                dropIndicator.remove();\n                dropIndicator = null;\n            });\n        } else {\n            removeDropIndicatorHandle = window.setInterval(function() {\n                handleDragExit(true);\n            }, 1000);\n        }\n    }\n\n    function handleDrop(event, type) {\n        /* Do these early in case we hit some error. */\n        event.stopPropagation();\n        event.preventDefault();\n\n        var dt = event.originalEvent.dataTransfer;\n\n        var files = dt && dt.files;\n\n        if (!files) {\n            return;\n        }\n\n        if (type == \"screenshot\") {\n            var foundImages = false;\n\n            for (var i = 0; i < files.length; i++) {\n                var file = files[i];\n\n                if (file.type == \"image/jpeg\" ||\n                    file.type == \"image/pjpeg\" ||\n                    file.type == \"image/png\" ||\n                    file.type == \"image/bmp\" ||\n                    file.type == \"image/gif\" ||\n                    file.type == \"image/svg+xml\") {\n\n                    foundImages = true;\n\n                    uploadScreenshot(file);\n                }\n            }\n\n            if (foundImages) {\n                handleDragExit();\n            } else {\n                if (dropIndicator) {\n                    screenshotDropBox.empty();\n                    fileDropBox.empty();\n                    middleBox.html(\"None of the dropped files were valid \" +\n                                   \"images\");\n                }\n\n                setTimeout(function() {\n                    handleDragExit(true);\n                }, 1500);\n            }\n        } else if (type == \"file\") {\n            for (var i = 0; i < files.length; i++) {\n                uploadFile(files[i]);\n            }\n\n            handleDragExit(true);\n        }\n    }\n\n    function uploadScreenshot(file) {\n        /* Create a temporary screenshot thumbnail. */\n        var thumb = $.newScreenshotThumbnail()\n            .css(\"opacity\", 0)\n            .fadeTo(1000, 1);\n\n        var screenshot = gReviewRequest.createScreenshot();\n        screenshot.setFile(file);\n        screenshot.save({\n            buttons: gDraftBannerButtons,\n            success: function(rsp, screenshot) {\n                thumb.replaceWith($.newScreenshotThumbnail(screenshot));\n                gDraftBanner.show();\n            },\n            error: function(rsp, msg) {\n                thumb.remove();\n            }\n        });\n    }\n\n    function uploadFile(file) {\n        /* Create a temporary file listing. */\n        var thumb = $.newFileAttachment()\n            .css(\"opacity\", 0)\n            .fadeTo(1000, 1);\n\n        var fileAttachment = gReviewRequest.createFileAttachment();\n        fileAttachment.setFile(file);\n        fileAttachment.save({\n            buttons: gDraftBannerButtons,\n            success: function(rsp, fileAttachment) {\n                thumb.replaceWith($.newFileAttachment(fileAttachment));\n                gDraftBanner.show();\n            },\n            error: function(rsp, msg) {\n                thumb.remove();\n            }\n        });\n    }\n}\n\n$(document).ready(function() {\n    /* Provide support for expanding submenus in the action list. */\n    var menuitem = null;\n\n    function showMenu() {\n        if (menuitem) {\n            $(\"ul\", menuitem).fadeOut(\"fast\");\n            menuitem = null;\n        }\n\n        $(\"ul\", this).fadeIn(\"fast\");\n    }\n\n    function hideMenu() {\n        menuitem = $(this);\n        setTimeout(function() {\n            if (menuitem) {\n                $(\"ul\", menuitem).fadeOut(\"fast\");\n            }\n        }, 400);\n    }\n\n    $(\".actions > li:has(ul.menu)\")\n        .hover(showMenu, hideMenu)\n        .toggle(showMenu, hideMenu);\n\n    $(\"#btn-draft-publish\").click(function() {\n        /* Save all the fields if we need to. */\n        gPublishing = true;\n        var fields = $(\".editable:inlineEditorDirty\");\n        gPendingSaveCount = fields.length;\n\n        if (gPendingSaveCount == 0) {\n            publishDraft();\n        } else {\n            fields.inlineEditor(\"save\");\n        }\n\n        return false;\n    });\n\n    $(\"#btn-draft-discard\").click(function() {\n        gReviewRequest.discardDraft({\n            options: gDraftBannerButtons\n        });\n        return false;\n    });\n\n    $(\"#btn-review-request-discard, #discard-review-request-link\")\n        .click(function() {\n            gReviewRequest.close({\n                type: RB.ReviewRequest.CLOSE_DISCARDED,\n                buttons: gDraftBannerButtons\n            });\n            return false;\n        });\n\n    $(\"#link-review-request-close-submitted\").click(function() {\n        /*\n         * This is a non-destructive event, so don't confirm unless there's\n         * a draft.\n         */\n        var submit = true;\n        if ($(\"#draft-banner\").is(\":visible\")) {\n            submit = confirm(\"You have an unpublished draft. If you close \" +\n                             \"this review request, the draft will be \" +\n                             \"discarded. Are you sure you want to close \" +\n                             \"the review request?\");\n        }\n\n        if (submit) {\n            gReviewRequest.close({\n                type: RB.ReviewRequest.CLOSE_SUBMITTED,\n                buttons: gDraftBannerButtons\n            });\n        }\n\n        return false;\n    });\n\n    $(\"#btn-review-request-reopen\").click(function() {\n        gReviewRequest.reopen({\n            buttons: gDraftBannerButtons\n        });\n\n        return false;\n    });\n\n    $(\"#delete-review-request-link\").click(function() {\n        var dlg = $(\"<p/>\")\n            .text(\"This deletion cannot be undone. All diffs and reviews \" +\n                  \"will be deleted as well.\")\n            .modalBox({\n                title: \"Are you sure you want to delete this review request?\",\n                buttons: [\n                    $('<input type=\"button\" value=\"Cancel\"/>'),\n                    $('<input type=\"button\" value=\"Delete\"/>')\n                        .click(function(e) {\n                            gReviewRequest.deletePermanently({\n                                buttons: gDraftBannerButtons.add(\n                                    $(\"input\", dlg.modalBox(\"buttons\"))),\n                                success: function() {\n                                    window.location = SITE_ROOT;\n                                }\n                            });\n                        })\n                ]\n            });\n\n        return false;\n    });\n\n    var pendingReview = gReviewRequest.createReview();\n\n    /* Edit Review buttons. */\n    $(\"#review-link, #review-banner-edit\").click(function() {\n        $.reviewForm(pendingReview);\n    });\n\n    $(\"#shipit-link\").click(function() {\n        if (confirm(\"Are you sure you want to post this review?\")) {\n            pendingReview.ship_it = true;\n            pendingReview.body_top = \"Ship It!\";\n            pendingReview.publish({\n                buttons: null,\n                success: function() {\n                    hideReviewBanner();\n                    gReviewBanner.queue(function() {\n                        window.location = gReviewRequestPath;\n                    });\n                }\n            });\n        }\n    });\n\n    /* Review banner's Publish button. */\n    $(\"#review-banner-publish\").click(function() {\n        pendingReview.publish({\n            buttons: $(\"input\", gReviewBanner),\n            success: function() {\n                hideReviewBanner();\n                gReviewBanner.queue(function() {\n                    window.location = gReviewRequestPath;\n                });\n            }\n        });\n    });\n\n    /* Review banner's Delete button. */\n    $(\"#review-banner-discard\").click(function() {\n        var dlg = $(\"<p/>\")\n            .text(\"If you discard this review, all related comments will \" +\n                  \"be permanently deleted.\")\n            .modalBox({\n                title: \"Are you sure you want to discard this review?\",\n                buttons: [\n                    $('<input type=\"button\" value=\"Cancel\"/>'),\n                    $('<input type=\"button\" value=\"Discard\"/>')\n                        .click(function(e) {\n                            pendingReview.deleteReview({\n                                buttons: $(\"input\", gReviewBanner),\n                                success: function() {\n                                    hideReviewBanner();\n                                    gReviewBanner.queue(function() {\n                                        window.location = gReviewRequestPath;\n                                    });\n                                }\n                            });\n                        })\n                ]\n            });\n    });\n\n    $(\"pre.reviewtext, #description, #testing_done\").each(function() {\n        $(this).html(linkifyText($(this).text()));\n    });\n\n    /* Toggle the state of a review */\n    $(\".collapse-button\").click(function() {\n        $(this).closest(\".box\").toggleClass('collapsed');\n    });\n\n    /* Expand all reviews */\n    $(\"#expand-all\").click(function() {\n        $(\".collapsed\").removeClass(\"collapsed\");\n        return false;\n    });\n\n    gCommentDlg = $(\"#comment-detail\")\n        .commentDlg()\n        .css(\"z-index\", 999);\n    gCommentDlg.appendTo(\"body\");\n\n    $(\"#submitted-banner #changedescription.editable\").reviewCloseCommentEditor(RB.ReviewRequest.CLOSE_SUBMITTED);\n    $(\"#discard-banner #changedescription.editable\").reviewCloseCommentEditor(RB.ReviewRequest.CLOSE_DISCARDED);\n\n    if (gUserAuthenticated) {\n        if (window[\"gEditable\"]) {\n            $(\".editable\").reviewRequestFieldEditor();\n            $(\".screenshot-container\").screenshotThumbnail();\n            $(\".file-container\").fileAttachment();\n\n            var targetGroupsEl = $(\"#target_groups\");\n            var targetPeopleEl = $(\"#target_people\");\n\n            if (targetGroupsEl.length > 0) {\n                targetGroupsEl\n                    .inlineEditor(\"field\")\n                    .bind(\"beginEdit\", function() {\n                        gEditCount++;\n                    })\n                    .bind(\"cancel complete\", function() {\n                        gEditCount--;\n                    })\n                    .reviewsAutoComplete({\n                        fieldName: \"groups\",\n                        nameKey: \"name\",\n                        descKey: \"display_name\",\n                        extraParams: {\n                            displayname: 1\n                        }\n                    });\n            }\n\n            if (targetPeopleEl.length > 0) {\n                targetPeopleEl\n                    .inlineEditor(\"field\")\n                    .bind(\"beginEdit\", function() {\n                        gEditCount++;\n                    })\n                    .bind(\"cancel complete\", function() {\n                        gEditCount--;\n                    })\n                    .reviewsAutoComplete({\n                        fieldName: \"users\",\n                        nameKey: \"username\",\n                        descKey: \"fullname\",\n                        extraParams: {\n                            fullname: 1\n                        }\n                    });\n            }\n\n            /*\n             * Warn the user if they try to navigate away with unsaved comments.\n             *\n             * @param {event} evt The beforeunload event.\n             *\n             * @return {string} The dialog message (needed for IE).\n             */\n            window.onbeforeunload = function(evt) {\n                if (gEditCount > 0) {\n                    /*\n                     * On IE, the text must be set in evt.returnValue.\n                     *\n                     * On Firefox, it must be returned as a string.\n                     *\n                     * On Chrome, it must be returned as a string, but you\n                     * can't set it on evt.returnValue (it just ignores it).\n                     */\n                    var msg = \"You have unsaved changes that will \" +\n                              \"be lost if you navigate away from \" +\n                              \"this page.\";\n                    evt = evt || window.event;\n\n                    evt.returnValue = msg;\n                    return msg;\n                }\n            };\n\n            initDnD();\n        }\n    }\n\n    loadDiffFragments(\"diff_fragments\", \"comment_container\");\n});\n\n// vim: set et:sw=4:\n"], "fixing_code": ["\n// State variables\nvar gCommentDlg = null;\nvar gEditCount = 0;\nvar gPublishing = false;\nvar gPendingSaveCount = 0;\nvar gPendingDiffFragments = {};\nvar gReviewBanner = $(\"#review-banner\");\nvar gDraftBanner = $(\"#draft-banner\");\nvar gDraftBannerButtons = $(\"input\", gDraftBanner);\nvar gFileAttachmentComments = {};\nvar gReviewRequest = new RB.ReviewRequest(gReviewRequestId,\n                                          gReviewRequestSitePrefix,\n                                          gReviewRequestPath);\n\n\n/*\n * \"complete\" signal handlers for various fields, designed to do\n * post-processing of the values for display.\n */\nvar gEditorCompleteHandlers = {\n    'bugs_closed': function(data) {\n        if (gBugTrackerURL == \"\") {\n            return data.join(\", \");\n        } else {\n            return urlizeList(data, function(item) {\n                return gBugTrackerURL.replace(\"%s\", item);\n            });\n        }\n    },\n    'target_groups': function(data) {\n        return urlizeList(data,\n            function(item) { return item.url; },\n            function(item) { return item.name; }\n        );\n    },\n    'target_people': function(data) {\n        return $(urlizeList(data,\n                            function(item) { return item.url; },\n                            function(item) { return item.username; }))\n            .addClass(\"user\")\n            .user_infobox();\n    },\n    'description': linkifyText,\n    'testing_done': linkifyText\n};\n\n\n/*\n * gCommentIssueManager takes care of setting the state of a particular\n * comment issue, and also takes care of notifying callbacks whenever\n * the state is successfully changed.\n */\nvar gCommentIssueManager = new function() {\n    var callbacks = {};\n    var comments = {};\n\n    /*\n     * setCommentState - set the state of comment issue\n     * @param review_id the id for the review that the comment belongs to\n     * @param comment_id the id of the comment with the issue\n     * @param comment_type the type of comment, either \"diff_comments\",\n     *                     \"screenshot_comments\", or \"file_attachment_comments\".\n     * @param state the state to set the comment issue to - either\n     *              \"open\", \"resolved\", or \"dropped\"\n     */\n    this.setCommentState = function(review_id, comment_id,\n                                    comment_type, state) {\n        var comment = getComment(review_id, comment_id, comment_type);\n        requestState(comment, state);\n    };\n\n    /*\n     * registerCallback - allows clients to register callbacks to be\n     * notified when a particular comment state is updated.\n     * @param comment_id the id of the comment to be notified about\n     * @param callback a function of the form:\n     *                 function(issue_state) {}\n     */\n    this.registerCallback = function(comment_id, callback) {\n        if (!callbacks[comment_id]) {\n            callbacks[comment_id] = [];\n        }\n\n        callbacks[comment_id].push(callback);\n    };\n\n    /*\n     * A helper function to either generate the appropriate\n     * comment object based on comment_type, or to grab the\n     * comment from a cache if it's been generated before.\n     */\n    function getComment(review_id, comment_id, comment_type) {\n        if (comments[comment_id]) {\n            return comments[comment_id];\n        }\n\n        var comment = null;\n\n        if (comment_type === \"diff_comments\") {\n            comment = gReviewRequest\n                .createReview(review_id)\n                .createDiffComment(comment_id);\n        } else if (comment_type === \"screenshot_comments\") {\n            comment = gReviewRequest\n                .createReview(review_id)\n                .createScreenshotComment(comment_id);\n        } else if (comment_type === \"file_attachment_comments\") {\n            comment = gReviewRequest\n                .createReview(review_id)\n                .createFileAttachmentComment(comment_id);\n        } else {\n            console.log(\"getComment received unexpected context type '%s'\",\n                        comment_type);\n        }\n\n        comments[comment_id] = comment;\n        return comment;\n    }\n\n    // Helper function to set the state of a comment\n    function requestState(comment, state) {\n        comment.ready(function() {\n            comment.issue_status = state;\n            comment.save({\n                success: function(rsp) {\n                    notifyCallbacks(comment.id, comment.issue_status);\n\n                    /*\n                     * We don't want the current user to receive the\n                     * notification that the review request has been\n                     * updated, since they themselves updated the\n                     * issue status.\n                     */\n                    if (rsp.last_activity_time) {\n                        gReviewRequest.markUpdated(rsp.last_activity_time);\n                    }\n                }\n            });\n        });\n    }\n\n    /*\n     * Helper function that notifies all callbacks registered for\n     * a particular comment\n     */\n    function notifyCallbacks(comment_id, issue_status) {\n        for (var i = 0; i < callbacks[comment_id].length; i++) {\n            callbacks[comment_id][i](issue_status);\n        }\n    }\n}();\n\n\n/*\n * Converts an array of items to a list of hyperlinks.\n *\n * By default, this will use the item as the URL and as the hyperlink text.\n * By overriding urlFunc and textFunc, the URL and text can be customized.\n *\n * @param {array}    list            The list of items.\n * @param {function} urlFunc         A function to return the URL for an item\n *                                   in the list.\n * @param {function} textFunc        A function to return the text for an item\n *                                   in the list.\n * @param {function} postProcessFunc Post-process generated elements in the\n                                     list.\n *\n * @return A string containing the HTML markup for the list of hyperlinks.\n */\nfunction urlizeList(list, urlFunc, textFunc, postProcessFunc) {\n    var str = \"\";\n\n    for (var i = 0; i < list.length; i++) {\n        var item = list[i];\n        str += '<a href=\"';\n        str += (urlFunc ? urlFunc(item) : item);\n        str += '\">';\n        str += (textFunc ? textFunc(item) : item);\n        str += '</a>';\n\n        if (i < list.length - 1) {\n            str += \", \";\n        }\n    }\n\n    return str;\n}\n\n\n/*\n * Linkifies a block of text, turning URLs, /r/#/ paths, nad bug numbers\n * into clickable links.\n *\n * @param {string} text  The text to linkify.\n *\n * @returns {string} The resulting HTML.\n */\nfunction linkifyText(text) {\n    text = text.htmlEncode();\n\n    /* Linkify all URLs. */\n    text = text.replace(\n        /\\b([a-z]+:\\/\\/[\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*([\\-A-Za-z0-9+@#\\/%=~_();|]|))/g,\n        function(url) {\n            /*\n             * We might catch an entity at the end of the URL. This is hard\n             * to avoid, since we can't rely on advanced RegExp techniques\n             * in all browsers. So, we'll now search for it and prevent it\n             * from being part of the URL if it exists. However, a URL with \n             * an open bracket will not have its close bracket removed. This\n             * was a modification to the original bug fix.\n             *\n             * See bug 1069.\n             */\n\n            var extra = '',\n                parts = url.match(/^(.*)(&[a-z]+;|\\))/),\n                openParen = url.match(/.*\\(.*/);\n\n            if (parts != null && openParen == null ) {\n                /* We caught an entity. Set it free. */\n                url = parts[1];\n                extra = parts[2];\n            }\n\n            return '<a href=\"' + url + '\">' + url + '</a>' + extra;\n        });\n\n\n    /* Linkify /r/#/ review request numbers */\n    text = text.replace(\n        /(^|\\s|&lt;)\\/(r\\/\\d+(\\/[\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|])?)/g,\n        '$1<a href=\"' + SITE_ROOT + '$2\">/$2</a>');\n\n    /* Bug numbers */\n    if (gBugTrackerURL != \"\") {\n        text = text.replace(/\\b(bug|issue) (#([^.\\s]+)|#?(\\d+))/gi,\n            function(text, m2, m3, bugnum1, bugnum2) {\n                /*\n                 * The bug number can appear in either of those groups,\n                 * depending on how this was typed, so try both.\n                 */\n                var bugnum = bugnum1 || bugnum2;\n\n                return '<a href=\"' +\n                       gBugTrackerURL.replace(\"%s\", bugnum) +\n                       '\">' + text + '</a>';\n            });\n    }\n\n    return text;\n}\n\n\n/*\n * Sets a field in the draft.\n *\n * If we're in the process of publishing, this will check if we have saved\n * all fields before publishing the draft.\n *\n * @param {string} field  The field name.\n * @param {string} value  The field value.\n */\nfunction setDraftField(field, value) {\n    gReviewRequest.setDraftField({\n        field: field,\n        value: value,\n        buttons: gDraftBannerButtons,\n        success: function(rsp) {\n            /* Checking if invalid user or group was entered. */\n            if (rsp.stat == \"fail\" && rsp.fields) {\n\n                $('#review-request-warning')\n                    .delay(6000)\n                    .fadeOut(400, function() {\n                        $(this).hide();\n                });\n\n                /* Wrap each term in quotes or a leading 'and'. */\n                $.each(rsp.fields[field], function(key, value) {\n                    var size = rsp.fields[field].length;\n\n                    if (key == size - 1 && size > 1) {\n                      rsp.fields[field][key] = \"and '\" + value + \"'\";\n                    } else {\n                      rsp.fields[field][key] = \"'\" + value + \"'\";\n                    }\n                });\n\n                var message = rsp.fields[field].join(\", \");\n\n                if (rsp.fields[field].length == 1) {\n                    if (field == \"target_groups\") {\n                        message = \"Group \" + message + \" does not exist.\";\n                    } else {\n                        message = \"User \" + message + \" does not exist.\";\n                    }\n                } else {\n                    if (field == \"target_groups\") {\n                        message = \"Groups \" + message + \" do not exist.\";\n                    } else {\n                        message = \"Users \" + message + \" do not exist.\";\n                    }\n                }\n\n                $(\"#review-request-warning\").html(message).show();\n            }\n\n            var func = gEditorCompleteHandlers[field];\n\n            if ($.isFunction(func)) {\n                $(\"#\" + field).html(func(rsp['draft'][field]));\n            }\n\n            gDraftBanner.show();\n\n            if (gPublishing) {\n                gPendingSaveCount--;\n\n                if (gPendingSaveCount == 0) {\n                    publishDraft();\n                }\n            }\n        },\n        error: function() {\n            gPublishing = false;\n        }\n    });\n}\n\n\n/*\n * An autocomplete() wrapper that converts our autocomplete data into the\n * format expected by jQuery.ui.autocomplete. It also adds some additional\n * explanatory text to the bottom of the autocomplete list.\n *\n * options has the following fields:\n *\n *    fieldName   - The field name (\"groups\" or \"people\").\n *    nameKey     - The key containing the name in the result data.\n *    descKey     - The key containing the description in the result\n *                  data. This is optional.\n *    extraParams - Extra parameters to send in the query. This is optional.\n *\n * @param {object} options    The options, as listed above.\n *\n * @return {jQuery} This jQuery set.\n */\n$.fn.reviewsAutoComplete = function(options) {\n    return this.each(function() {\n        $(this)\n            .autocomplete({\n                formatItem: function(data) {\n                    var s = data[options.nameKey],\n                        desc;\n\n                    if (options.descKey) {\n                        desc = $('<div/>').text(data[options.descKey]).html();\n                        s += \" <span>(\" + desc + \")</span>\";\n                    }\n\n                    return s;\n                },\n                matchCase: false,\n                multiple: true,\n                parse: function(data) {\n                    var jsonData = eval(\"(\" + data + \")\");\n                    var items = jsonData[options.fieldName];\n                    var parsed = [];\n\n                    for (var i = 0; i < items.length; i++) {\n                        var value = items[i];\n\n                        parsed.push({\n                            data: value,\n                            value: value[options.nameKey],\n                            result: value[options.nameKey]\n                        });\n                    }\n\n                    return parsed;\n                },\n                url: SITE_ROOT + gReviewRequestSitePrefix + \"api/\" + options.fieldName + \"/\",\n                extraParams: options.extraParams\n            })\n            .bind(\"autocompleteshow\", function() {\n                /*\n                 * Add the footer to the bottom of the results pane the\n                 * first time it's created.\n                 *\n                 * Note that we may have multiple .ui-autocomplete-results\n                 * elements, and we don't necessarily know which is tied to\n                 * this. So, we'll look for all instances that don't contain\n                 * a footer.\n                 */\n                var resultsPane = $(\".ui-autocomplete-results:not(\" +\n                                    \":has(.ui-autocomplete-footer))\");\n\n                if (resultsPane.length > 0) {\n                    $(\"<div/>\")\n                        .addClass(\"ui-autocomplete-footer\")\n                        .text(\"Press Tab to auto-complete.\")\n                        .appendTo(resultsPane);\n                }\n            });\n    });\n};\n\n\n/*\n * Publishes the draft to the server. This assumes all fields have been\n * saved.\n *\n * Checks all the fields to make sure we have the information we need\n * and then redirects the user to the publish URL.\n */\nfunction publishDraft() {\n    if ($.trim($(\"#target_groups\").html()) == \"\" &&\n        $.trim($(\"#target_people\").html()) == \"\") {\n        alert(\"There must be at least one reviewer or group \" +\n        \"before this review request can be published.\");\n    } else if ($.trim($(\"#summary\").html()) == \"\") {\n        alert(\"The draft must have a summary.\");\n    } else if ($.trim($(\"#description\").html()) == \"\") {\n        alert(\"The draft must have a description.\");\n    } else {\n        gReviewRequest.publish({\n            buttons: gDraftBannerButtons\n        });\n    }\n}\n\n\n/*\n * Handles a comment section in a review.\n *\n * This will handle the \"Add Comment\" link and the draft banners for the\n * review.\n *\n * @param {string} review_id     The review ID.\n * @param {string} context_id    The comment section context ID.\n * @param {string} context_type  The comment section context type.\n *\n * @return {jQuery} This jQuery.\n */\n$.fn.commentSection = function(review_id, context_id, context_type) {\n    var self = $(this);\n\n    var review = gReviewRequest.createReview(review_id);\n    var review_reply = review.createReply();\n\n    var sectionId = context_id;\n    var reviewEl = $(\"#review\" + review_id);\n    var commentsList = $(\".reply-comments\", self)\n    var bannersEl = $(\".banners\", reviewEl);\n    var bannerButtonsEl = $(\"input\", bannersEl)\n\n    var addCommentLink = $(\".add_comment_link\", self)\n        .click(function() {\n            createNewCommentForm();\n            return false;\n        });\n\n    var yourcomments = $(\"pre[id^=yourcomment_]\", self);\n\n    if (yourcomments.length > 0) {\n        createCommentEditor(yourcomments);\n        showReplyDraftBanner(review_id);\n        addCommentLink.hide();\n    }\n\n    /*\n     * Creates a new comment form in response to the \"Add Comment\" link.\n     */\n    function createNewCommentForm() {\n        var yourcomment_id = \"yourcomment_\" + review_id + \"_\" +\n                             context_type;\n        if (sectionId) {\n            yourcomment_id += \"_\" + sectionId;\n        }\n\n        yourcomment_id += \"-draft\";\n\n        var yourcomment = $(\"<li/>\")\n            .addClass(\"reply-comment draft editor\")\n            .attr(\"id\", yourcomment_id + \"-item\")\n            .append($(\"<dl/>\")\n                .append($(\"<dt/>\")\n                    .append($(\"<label/>\")\n                        .attr(\"for\", yourcomment_id)\n                        .append($(\"<a/>\")\n                            .attr(\"href\", gUserURL)\n                            .html(gUserFullName)\n                        )\n                    )\n                    .append('<dd><pre id=\"' + yourcomment_id + '\"/></dd>')\n                )\n            )\n            .appendTo(commentsList);\n\n        var yourcommentEl = $(\"#\" + yourcomment_id);\n        createCommentEditor(yourcommentEl);\n        yourcommentEl\n            .inlineEditor(\"startEdit\")\n            .bind(\"cancel\", function(el, initialValue) {\n                if (initialValue == \"\") {\n                    yourcomment.remove();\n                }\n            });\n\n        addCommentLink.hide();\n    }\n\n    /*\n     * Registers an inline editor for the comment form, handling setting the\n     * comment on the server.\n     *\n     * @param {jQuery} els  The elements to create editors for.\n     *\n     * @return {jQuery} The provided elements.\n     */\n    function createCommentEditor(els) {\n        return els.each(function() {\n            var self = $(this);\n\n            self\n                .inlineEditor({\n                    cls: \"inline-comment-editor\",\n                    editIconPath: MEDIA_URL + \"rb/images/edit.png?\" +\n                                  MEDIA_SERIAL,\n                    notifyUnchangedCompletion: true,\n                    multiline: true\n                })\n                .bind(\"beginEdit\", function() {\n                    gEditCount++;\n                })\n                .bind(\"complete\", function(e, value) {\n                    gEditCount--;\n\n                    self.html(linkifyText(self.text()));\n\n                    if (context_type == \"body_top\" ||\n                        context_type == \"body_bottom\") {\n                        review_reply[context_type] = value;\n                        obj = review_reply;\n                    } else if (context_type === \"diff_comments\") {\n                        obj = new RB.DiffCommentReply(review_reply, null,\n                                                      context_id);\n                        obj.setText(value);\n                    } else if (context_type === \"screenshot_comments\") {\n                        obj = new RB.ScreenshotCommentReply(review_reply, null,\n                                                            context_id);\n                        obj.setText(value);\n                    } else if (context_type === \"file_attachment_comments\") {\n                        obj = new RB.FileAttachmentCommentReply(\n                            review_reply, null, context_id);\n                        obj.setText(value);\n                    } else {\n                        /* Shouldn't be reached. */\n                        console.log(\"createCommentEditor received unexpected \" +\n                                    \"context type '%s'\",\n                                    context_type);\n                        return;\n                    }\n\n                    obj.save({\n                        buttons: bannerButtonsEl,\n                        success: function() {\n                            removeCommentFormIfEmpty(self);\n                            showReplyDraftBanner(review_id);\n                        }\n                    });\n                })\n                .bind(\"cancel\", function(e) {\n                    gEditCount--;\n                    addCommentLink.fadeIn();\n                    removeCommentFormIfEmpty(self);\n                });\n        });\n    }\n\n    /*\n     * Removes a comment form if the contents are empty.\n     *\n     * @param {jQuery} editorEl  The inline editor element.\n     */\n    function removeCommentFormIfEmpty(editorEl) {\n        var value = editorEl.inlineEditor(\"value\");\n\n        if (value.stripTags().strip() != \"\") {\n            return;\n        }\n\n        $(\"#\" + editorEl[0].id + \"-item\").hide(\"slow\", function() {\n            $(this).remove();\n\n            if ($(\".inline-comment-editor\", reviewEl).length == 0) {\n                bannersEl.children().remove();\n            }\n\n            addCommentLink.fadeIn();\n\n            /* Find out if we need to discard this. */\n            review_reply.discardIfEmpty({\n                buttons: bannerButtonsEl\n            });\n        });\n    }\n\n    /*\n     * Shows the reply draft banner on the review.\n     *\n     * @param {string} review_id  The review object's ID.\n     */\n    function showReplyDraftBanner(review_id) {\n        if (bannersEl.children().length == 0) {\n            bannersEl.append($.replyDraftBanner(review_reply,\n                                                bannerButtonsEl));\n        }\n    }\n};\n\n\n/* Handles a comment issue in either the review details page, or the\n * inline comment viewer.\n * @param review_id the id of the review that the comment belongs to\n * @param comment_id the id of the comment with the issue\n * @param comment_type dictates the type of comment - either\n *                     \"diff_comments\", \"screenshot_comments\" or\n *                     \"file_attachment_comments\".\n * @param issue_status the initial status of the comment - either\n *                     \"open\", \"resolved\" or \"dropped\"\n * @param interactive true if the user should be shown buttons to\n *                    manipulate the comment issue - otherwise false.\n */\n$.fn.commentIssue = function(review_id, comment_id, comment_type,\n                             issue_status, interactive) {\n    var self = this;\n    var OPEN = 'open';\n    var RESOLVED = 'resolved';\n    var DROPPED = 'dropped';\n\n    var issue_reopen_button = $(\".issue-button.reopen\", this);\n    var issue_resolve_button = $(\".issue-button.resolve\", this);\n    var issue_drop_button = $(\".issue-button.drop\", this);\n    self.review_id = review_id;\n    self.comment_id = comment_id;\n    self.comment_type = comment_type;\n    self.issue_status = issue_status;\n    self.interactive = interactive;\n\n    function disableButtons() {\n        issue_reopen_button.attr(\"disabled\", true);\n        issue_resolve_button.attr(\"disabled\", true);\n        issue_drop_button.attr(\"disabled\", true);\n    }\n\n    function enableButtons() {\n        issue_reopen_button.attr(\"disabled\", false);\n        issue_resolve_button.attr(\"disabled\", false);\n        issue_drop_button.attr(\"disabled\", false);\n    }\n\n    function enterState(state) {\n        disableButtons();\n        gCommentIssueManager.setCommentState(self.review_id, self.comment_id,\n                                             self.comment_type, state);\n    }\n\n    issue_reopen_button.click(function() {\n        enterState(OPEN);\n    });\n\n    issue_resolve_button.click(function() {\n        enterState(RESOLVED);\n    });\n\n    issue_drop_button.click(function() {\n        enterState(DROPPED);\n    });\n\n    self.enter_state = function(state) {\n        self.state = self.STATES[state];\n        self.state.enter();\n        if (self.interactive) {\n            self.state.showButtons();\n            enableButtons();\n        }\n    }\n\n    var open_state = {\n        enter: function() {\n            $(\".issue-button.reopen\", self).hide();\n            $(\".issue-state\", self)\n                .removeClass(\"dropped\")\n                .removeClass(\"resolved\")\n                .addClass(\"open\");\n            $(\".issue-message\", self)\n                .text(\"An issue was opened.\");\n        },\n        showButtons: function() {\n            $(\".issue-button.drop\", self).show();\n            $(\".issue-button.resolve\", self).show();\n        }\n    }\n\n    var resolved_state = {\n        enter: function() {\n            $(\".issue-button.resolve\", self).hide();\n            $(\".issue-button.drop\", self).hide();\n            $(\".issue-state\", self)\n                .removeClass(\"dropped\")\n                .removeClass(\"open\")\n                .addClass(\"resolved\");\n            $(\".issue-message\", self)\n                .text(\"The issue has been resolved.\");\n        },\n        showButtons: function() {\n            $(\".issue-button.reopen\", self).show();\n        }\n    }\n\n    var dropped_state = {\n        enter: function() {\n            $(\".issue-button.resolve\", self).hide();\n            $(\".issue-button.drop\", self).hide();\n            $(\".issue-state\", self)\n                .removeClass(\"open\")\n                .removeClass(\"resolved\")\n                .addClass(\"dropped\");\n            $(\".issue-message\", self)\n                .text(\"The issue has been dropped.\");\n        },\n        showButtons: function() {\n            $(\".issue-button.reopen\", self).show();\n        }\n    }\n\n    self.STATES = {};\n    self.STATES[OPEN] = open_state;\n    self.STATES[RESOLVED] = resolved_state;\n    self.STATES[DROPPED] = dropped_state;\n\n    // Set the comment to the initial state\n    self.enter_state(self.issue_status);\n\n    // Register to watch updates on the comment issue state\n    gCommentIssueManager\n        .registerCallback(self.comment_id, self.enter_state);\n\n    return self;\n}\n\n\n\n/*\n * Wraps an inline comment so that they can display issue\n * information.\n */\n$.fn.issueIndicator = function() {\n    var issue_indicator = $('<div/>')\n        .addClass('issue-state')\n        .appendTo(this);\n\n    var message = $('<span/>')\n        .addClass('issue-message')\n        .appendTo(issue_indicator);\n\n    return this;\n}\n\n\n/*\n * Wraps an inline comment so that it displays buttons\n * for setting the state of a comment issue.\n */\n$.fn.issueButtons = function() {\n    var issue_indicator = $(\".issue-state\", this);\n\n    var buttons = $('<div class=\"buttons\"/>')\n        .addClass('buttons')\n        .appendTo(issue_indicator);\n\n    var resolve_string = \"Fixed\";\n    var drop_string = \"Drop\";\n    var reopen_string = \"Re-open\";\n\n    var button_string = '<input type=\"button\" class=\"issue-button resolve\"'\n                      + 'value=\"' + resolve_string + '\"/>'\n                      + '<input type=\"button\" class=\"issue-button drop\"'\n                      + 'value=\"' + drop_string + '\"/>'\n                      + '<input type=\"button\" class=\"issue-button reopen\"'\n                      + 'value=\"' + reopen_string + '\"/>';\n\n    buttons.append(button_string);\n\n    return this;\n}\n\n\n/*\n * Creates a floating reply banner. The banner will stay in view while the\n * parent review is visible on screen.\n */\n$.replyDraftBanner = function(review_reply, bannerButtonsEl) {\n    var banner = $(\"<div/>\")\n        .addClass(\"banner\")\n        .append(\"<h1>This reply is a draft</h1>\")\n        .append(\" Be sure to publish when finished.\")\n        .append($('<input type=\"button\"/>')\n            .val(\"Publish\")\n            .click(function() {\n                review_reply.publish({\n                    buttons: bannerButtonsEl,\n                    success: function() {\n                        window.location = gReviewRequestPath;\n                    }\n                });\n            })\n        )\n        .append($('<input type=\"button\"/>')\n            .val(\"Discard\")\n            .click(function() {\n                review_reply.discard({\n                    buttons: bannerButtonsEl,\n                    success: function() {\n                        window.location = gReviewRequestPath;\n                    }\n                });\n            })\n        )\n        .floatReplyDraftBanner();\n\n    return banner;\n}\n\n/*\n * Floats a reply draft banner. This ensures it's always visible on screen\n * when the review is visible.\n */\n$.fn.floatReplyDraftBanner = function() {\n    return $(this).each(function() {\n        var self = $(this);\n        var floatSpacer = null;\n        var container = null;\n\n        $(window).scroll(updateFloatPosition);\n        $(window).resize(updateSize);\n        updateFloatPosition();\n\n        function updateSize() {\n            if (floatSpacer != null) {\n                floatSpacer.height(self.height() +\n                                   self.getExtents(\"bpm\", \"tb\"));\n                self.width(floatSpacer.parent().width() -\n                           self.getExtents(\"bpm\", \"lr\"));\n            }\n        }\n\n        function updateFloatPosition() {\n            if (self.parent().length == 0) {\n                return;\n            }\n\n            /*\n             * Something about the below causes the \"Publish\" button to never\n             * show up on IE8. Turn it into a fixed box on IE.\n             */\n            if ($.browser.msie) {\n                return;\n            }\n\n            if (floatSpacer == null) {\n                floatSpacer = self.wrap($(\"<div/>\")).parent();\n                updateSize();\n            }\n\n            if (container == null) {\n                container = self.closest('.review');\n            }\n\n            var containerTop = container.offset().top;\n            var windowTop = $(window).scrollTop();\n            var topOffset = floatSpacer.offset().top - windowTop;\n            var outerHeight = self.outerHeight();\n\n            if (!container.hasClass(\"collapsed\") &&\n                topOffset < 0 &&\n                containerTop < windowTop &&\n                windowTop < (containerTop + container.outerHeight() -\n                             outerHeight)) {\n                self.css({\n                    top: 0,\n                    position: \"fixed\"\n                });\n\n                updateSize();\n            } else {\n                self.css({\n                    top: null,\n                    position: null\n                });\n            }\n        }\n    });\n}\n\n\n/*\n * Creates the comment detail dialog for lines in a diff. This handles the\n * maintenance of comment blocks and shows existing comments on a block.\n *\n * @return {jQuery} This jQuery.\n */\n$.fn.commentDlg = function() {\n    var DIALOG_TOTAL_HEIGHT = 250;\n    var SLIDE_DISTANCE = 10;\n    var COMMENTS_BOX_WIDTH = 280;\n    var FORM_BOX_WIDTH = 380;\n    var self = this;\n\n    /* State */\n    var comment = null;\n    var textFieldWidthDiff = 0;\n    var textFieldHeightDiff = 0;\n    var dirty = false;\n    var ignoreKeyUp = false;\n\n    /* Page elements */\n    var draftForm    = $(\"#draft-form\", this);\n    var commentsPane = $(\"#review_comments\", this);\n    var commentsList = $(\"#review_comment_list\", this);\n    var actionField  = $(\"#comment_action\", draftForm);\n    var buttons      = $(\".buttons\", draftForm);\n    var statusField  = $(\".status\", draftForm);\n    var issueOptions = $(\"#comment-issue-options\", draftForm);\n\n    var issueField = $(\"#comment_issue\", draftForm)\n        .click(function() {\n            saveButton.attr(\"disabled\", textField.val() == \"\");\n            self.setDirty(true);\n        });\n    var cancelButton = $(\"#comment_cancel\", draftForm)\n        .click(function() {\n            comment.deleteIfEmpty();\n            self.close();\n        });\n    var deleteButton = $(\"#comment_delete\", this)\n        .click(function() {\n            comment.deleteComment();\n            self.close();\n        });\n    var saveButton = $(\"#comment_save\", this)\n        .click(function() {\n            comment.setText(textField.val());\n            comment.issue_opened = issueField[0].checked;\n            comment.save();\n            self.close();\n        });\n\n    var textField = $(\"#comment_text\", draftForm)\n        .keydown(function(e) { e.stopPropagation(); })\n        .keypress(function(e) {\n            e.stopPropagation();\n\n            switch (e.which) {\n                case 10:\n                case $.ui.keyCode.ENTER:\n                    /* Enter */\n                    if (e.ctrlKey) {\n                        ignoreKeyUp = true;\n                        saveButton.click();\n                    }\n                    break;\n\n                case $.ui.keyCode.ESCAPE:\n                    /* Escape */\n                    ignoreKeyUp = true;\n                    cancelButton.click();\n                    break;\n\n                case 73:\n                case 105:\n                    /* I */\n                    if (e.altKey) {\n                      issueField.click();\n                      ignoreKeyUp = true;\n                    }\n\n                    break;\n\n                default:\n                    ignoreKeyUp = false;\n                    break;\n            }\n        })\n        .keyup(function(e) {\n            /*\n             * We check if we want to ignore this event. The state from\n             * some shortcuts (control-enter) may not be settled, and we may\n             * end up setting this to dirty, causing page leave confirmations.\n             */\n            if (!ignoreKeyUp) {\n                self.setDirty(dirty || comment.text != textField.val());\n                saveButton.attr(\"disabled\", textField.val() == \"\");\n                e.stopPropagation();\n            }\n        });\n\n    this\n        .css(\"position\", \"absolute\")\n        .mousedown(function(evt) {\n            /*\n             * Prevent this from reaching the selection area, which will\n             * swallow the default action for the mouse down.\n             */\n            evt.stopPropagation();\n        })\n        .proxyTouchEvents();\n\n    if (!$.browser.msie || $.browser.version >= 9) {\n        /*\n         * resizable is pretty broken in IE 6/7.\n         */\n        var grip = $(\"<img/>\")\n            .addClass(\"ui-resizable-handle ui-resizable-grip\")\n            .attr(\"src\", MEDIA_URL + \"rb/images/resize-grip.png?\" +\n                         MEDIA_SERIAL)\n            .insertAfter(buttons)\n            .proxyTouchEvents();\n\n        this.resizable({\n            handles: $.browser.mobileSafari ? \"grip,se\"\n                                            : \"grip,n,e,s,w,se,sw,ne,nw\",\n            transparent: true,\n            resize: function() { self.handleResize(); }\n        });\n\n        var startOffset = null;\n        var baseWidth = null;\n        var baseHeight = null;\n\n        /*\n         * Enable resizing through a grip motion on a touchpad.\n         */\n        $([this[0], textField[0]])\n            .bind(\"gesturestart\", function(evt) {\n                startOffset = self.offset();\n                startWidth = self.width();\n                startHeight = self.height();\n            })\n            .bind(\"gesturechange\", function(evt) {\n                if (event.scale == 0) {\n                    return false;\n                }\n\n                var newWidth = startWidth * event.scale;\n                var newHeight = startHeight * event.scale;\n\n                self\n                    .width(newWidth)\n                    .height(newHeight)\n                    .move(startOffset.left - (newWidth - startWidth) / 2,\n                          startOffset.top - (newHeight - startHeight) / 2);\n                self.handleResize();\n\n                return false;\n            });\n\n        /* Reset the opacity, which resizable() changes. */\n        grip.css(\"opacity\", 100);\n    }\n\n    if (!$.browser.msie || $.browser.version >= 7) {\n        /*\n         * draggable works in IE7 and up, but not IE6.\n         */\n        this.draggable({\n            handle: $(\".title\", this).css(\"cursor\", \"move\")\n        });\n    }\n\n    if (!gUserAuthenticated) {\n        textField.attr(\"disabled\", true);\n        saveButton.attr(\"disabled\", true);\n    }\n\n    /*\n     * Sets the dirty state of the comment dialog.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.setDirty = function(newDirty) {\n        if (newDirty != dirty) {\n            dirty = newDirty;\n\n            if (dirty) {\n                gEditCount++;\n                statusField.html(\"This comment has unsaved changes.\");\n            } else {\n                gEditCount--;\n                statusField.empty();\n            }\n\n            if (this.is(\":visible\")) {\n                this.handleResize();\n            }\n        }\n\n        return this;\n    };\n\n    /*\n     * Opens the comment dialog and focuses the text field.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.open = function(fromEl) {\n        this\n            .css({\n                top: parseInt(this.css(\"top\")) - SLIDE_DISTANCE,\n                opacity: 0\n            })\n            .show()\n            .handleResize()\n            .animate({\n                top: \"+=\" + SLIDE_DISTANCE + \"px\",\n                opacity: 1\n            }, 350, \"swing\", function() {\n                self.scrollIntoView();\n            })\n            .setDirty(false);\n\n        textField.focus();\n\n        return this;\n    }\n\n    /*\n     * Closes the comment dialog, discarding the comment block if empty.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.close = function() {\n        if (self.is(\":visible\")) {\n            textField.val(\"\");\n            issueField[0].checked = false;\n\n            self\n                .setDirty(false)\n                .animate({\n                    top: \"-=\" + SLIDE_DISTANCE + \"px\",\n                    opacity: 0\n                }, 350, \"swing\", function() {\n                    self.hide();\n                    self.comment = null;\n                    self.trigger(\"close\");\n                });\n        } else {\n            self.trigger(\"close\");\n        }\n\n        return this;\n    }\n\n    /*\n     * Sets the list of existing comments to show.\n     *\n     * @param {array} comments    The array of comments to show.\n     * @param {string} replyType  The reply type for the comments listed.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.setCommentsList = function(comments, replyType) {\n        commentsList.empty();\n\n        /*\n         * Store the offsets of the text field so we can easily set\n         * them relative to the dialog size when resizing.\n         */\n        commentsPane.hide();\n\n        var showComments = false;\n\n        if (comments.length > 0) {\n            var odd = true;\n\n            $(comments).each(function(i) {\n                var item = $(\"<li/>\")\n                    .addClass(odd ? \"odd\" : \"even\");\n                var header = $(\"<h2/>\").appendTo(item).html(this.user.name);\n                var actions = $('<span class=\"actions\"/>')\n                    .appendTo(header);\n\n                $('<a href=\"' + this.url + '\">View</a>').appendTo(actions);\n                $('<a href=\"' + gReviewRequestPath +\n                  '?reply_id=' + this.comment_id +\n                  '&reply_type=' + replyType + '\">Reply</a>')\n                    .appendTo(actions);\n                $(\"<pre/>\").appendTo(item).text(this.text);\n\n                if (this.issue_opened) {\n                    var interactive = window['gEditable'];\n                    var issue = $('<div/>')\n                        .issueIndicator();\n\n                    if (interactive) {\n                        issue.issueButtons();\n                    }\n\n                    issue\n                        .commentIssue(this.review_id, this.comment_id,\n                                      replyType, this.issue_status, interactive)\n                        .appendTo(item);\n\n                    var self = this;\n\n                    gCommentIssueManager.registerCallback(this.comment_id,\n                        function(issue_status) {\n                            self.issue_status = issue_status;\n                        }\n                    );\n                }\n\n                item.appendTo(commentsList);\n\n                showComments = true;\n\n                odd = !odd;\n            });\n        }\n\n        commentsPane.setVisible(showComments);\n\n        /* Do this here so that calculations can be done before open() */\n        var width = FORM_BOX_WIDTH;\n\n        if (showComments) {\n            width += COMMENTS_BOX_WIDTH;\n        }\n\n        /* Don't let the text field bump up the size we set below. */\n        textField\n            .width(10)\n            .height(10);\n\n        self\n            .width(width)\n            .height(DIALOG_TOTAL_HEIGHT);\n\n        return this;\n    }\n\n    /*\n     * Sets the draft comment to modify. This will reset the default state of\n     * the comment dialog.\n     *\n     * @param {RB.Comment} newComment The new draft comment to set.\n     *\n     * @return {jQuery} This jQuery.\n     */\n    this.setDraftComment = function(newComment) {\n        if (comment && comment != newComment) {\n            comment.deleteIfEmpty();\n        }\n\n        comment = newComment;\n\n        comment.ready(function() {\n            textField.val(comment.text);\n            issueField[0].checked = comment.issue_opened;\n\n            self.setDirty(false);\n\n            /* Set the initial button states */\n            deleteButton.setVisible(comment.loaded);\n        });\n\n        saveButton.attr(\"disabled\", true);\n\n        /* Clear the status field. */\n        statusField.empty();\n\n        return this;\n    }\n\n    /*\n     * Handles the resize of the comment dialog. This will lay out the\n     * elements in the dialog appropriately.\n     */\n    this.handleResize = function() {\n        var width = self.width();\n        var height = self.height();\n        var formWidth = width - draftForm.getExtents(\"bp\", \"lr\");\n        var boxHeight = height;\n        var commentsWidth = 0;\n\n        if (commentsPane.is(\":visible\")) {\n            commentsPane\n                .width(COMMENTS_BOX_WIDTH - commentsPane.getExtents(\"bp\", \"lr\"))\n                .height(boxHeight - commentsPane.getExtents(\"bp\", \"tb\"))\n                .move(0, 0, \"absolute\");\n\n            commentsList.height(commentsPane.height() -\n                                commentsList.position().top -\n                                commentsList.getExtents(\"bmp\", \"b\"));\n\n            commentsWidth = commentsPane.outerWidth(true);\n            formWidth -= commentsWidth;\n        }\n\n        draftForm\n            .width(formWidth)\n            .height(boxHeight - draftForm.getExtents(\"bp\", \"tb\"))\n            .move(commentsWidth, 0, \"absolute\");\n\n        var textFieldPos = textField.position();\n        textField\n            .width(draftForm.width() - textFieldPos.left -\n                   textField.getExtents(\"bmp\", \"r\"))\n            .height(draftForm.height() - textFieldPos.top -\n                    buttons.outerHeight(true) -\n                    statusField.height() -\n                    issueOptions.height() -\n                    textField.getExtents(\"bmp\", \"b\"));\n\n        return this;\n    }\n\n    return this;\n};\n\n\n/*\n * Creates a review form for modifying a new review.\n *\n * This provides editing capabilities for creating or modifying a new\n * review. The list of comments are retrieved from the server, providing\n * context for the comments.\n *\n * @param {RB.Review} review  The review to create or modify.\n *\n * @return {jQuery} The new review form element.\n */\n$.reviewForm = function(review) {\n    rbApiCall({\n        type: \"GET\",\n        dataType: \"html\",\n        data: {},\n        url: gReviewRequestPath + \"reviews/draft/inline-form/\",\n        success: function(html) {\n            createForm(html);\n        }\n    });\n\n    var dlg;\n    var buttons;\n\n    /*\n     * Creates the actual review form. This is called once we have\n     * the HTML for the form from the server.\n     *\n     * @param {string} formHTML  The HTML content for the form.\n     */\n    function createForm(formHTML) {\n        gEditCount++;\n\n        dlg = $(\"<div/>\")\n            .attr(\"id\", \"review-form\")\n            .appendTo(\"body\") // Needed for scripts embedded in the HTML\n            .html(formHTML)\n            .modalBox({\n                title: \"Review for: \" + gReviewRequestSummary,\n                stretchX: true,\n                stretchY: true,\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(\"Publish Review\")\n                        .click(function(e) {\n                            saveReview(true);\n                            return false;\n                        }),\n                    $('<input type=\"button\"/>')\n                        .val(\"Discard Review\")\n                        .click(function(e) {\n                            gEditCount--;\n                            review.deleteReview({\n                                buttons: buttons\n                            });\n                        }),\n                    $('<input type=\"button\"/>')\n                        .val(\"Cancel\")\n                        .click(function() {\n                            gEditCount--;\n                        }),\n                    $('<input type=\"button\"/>')\n                        .val(\"Save\")\n                        .click(function() {\n                            saveReview();\n                            return false;\n                        })\n                ]\n            })\n            .keypress(function(e) { e.stopPropagation(); })\n            .trigger(\"ready\");\n\n        buttons = $(\"input\", dlg);\n\n        var body_classes = [\"body-top\", \"body-bottom\"];\n\n        for (var i in body_classes) {\n            var cls = body_classes[i];\n            $(\".\" + cls, dlg)\n                .inlineEditor({\n                    cls: cls + \"-editor\",\n                    extraHeight: 50,\n                    forceOpen: true,\n                    multiline: true,\n                    notifyUnchangedCompletion: true,\n                    showButtons: false,\n                    showEditIcon: false\n                })\n                .bind(\"beginEdit\", function() {\n                    gEditCount++;\n                })\n                .bind(\"cancel complete\", function() {\n                    gEditCount--;\n                });\n        }\n\n        $(\"textarea:first\", dlg).focus();\n        dlg.attr(\"scrollTop\", 0);\n\n        loadDiffFragments(\"review_draft_diff_comments\",\n                          \"review_draft_comment_container\");\n    }\n\n    /*\n     * Saves the review.\n     *\n     * This sets the ship_it and body values, and saves all comments.\n     */\n    function saveReview(publish) {\n        $.funcQueue(\"reviewForm\").clear();\n\n        $(\".body-top, .body-bottom\").inlineEditor(\"save\");\n\n        $(\".comment-editable\", dlg).each(function() {\n            var editable = $(this);\n            var comment = editable.data('comment');\n            var issue = editable.next()[0];\n            var issueOpened = issue ? issue.checked : false;\n\n            if (editable.inlineEditor(\"dirty\") ||\n                issueOpened != comment.issue_opened) {\n                comment.issue_opened = issueOpened;\n                $.funcQueue(\"reviewForm\").add(function() {\n                    editable\n                        .one(\"saved\", $.funcQueue(\"reviewForm\").next)\n                        .inlineEditor(\"save\");\n              });\n            }\n        });\n\n        $.funcQueue(\"reviewForm\").add(function() {\n            review.ship_it = $(\"#id_shipit\", dlg)[0].checked;\n            review.body_top = $(\".body-top\", dlg).text();;\n            review.body_bottom = $(\".body-bottom\", dlg).text();;\n\n            var options = {\n                buttons: buttons,\n                success: $.funcQueue(\"reviewForm\").next\n            };\n\n            gEditCount--;\n\n            if (publish) {\n                review.publish(options);\n            }\n            else {\n                review.save(options);\n            }\n        });\n\n        $.funcQueue(\"reviewForm\").add(function() {\n            dlg.modalBox(\"destroy\");\n\n            if (publish) {\n                hideReviewBanner();\n                gReviewBanner.queue(function() {\n                    window.location = gReviewRequestPath;\n                });\n            } else {\n                showReviewBanner();\n            }\n        });\n\n        $.funcQueue(\"reviewForm\").start();\n    }\n};\n\n\n/*\n * Adds inline editing capabilities to a comment in the review form.\n *\n * @param {object} comment  A RB.DiffComment, RB.FileAttachmentComment\n *                          or RB.ScreenshotComment instance\n *                          to store the text on and save.\n */\n$.fn.reviewFormCommentEditor = function(comment) {\n    var self = this;\n\n    return this\n        .inlineEditor({\n            extraHeight: 50,\n            forceOpen: true,\n            multiline: true,\n            notifyUnchangedCompletion: true,\n            showButtons: false,\n            showEditIcon: false,\n            useEditIconOnly: false\n        })\n        .bind(\"beginEdit\", function() {\n            gEditCount++;\n        })\n        .bind(\"cancel\", function() {\n            gEditCount--;\n        })\n        .bind(\"complete\", function(e, value) {\n            gEditCount--;\n            comment.text = value;\n            comment.save({\n                success: function() {\n                    self.trigger(\"saved\");\n                }\n            });\n        })\n        .data('comment', comment);\n};\n\n\n/*\n * Adds inline editing capabilities to close description for a review request\n * which have been submitted or discarded.\n *\n * @param {int} type  1: RB.ReviewRequest.CLOSE_DISCARDED\n *                    2: RB.ReviewRequest.CLOSE_SUBMITTED\n */\n$.fn.reviewCloseCommentEditor = function(type) {\n    return this\n        .inlineEditor({\n            editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n            multiline: true,\n            startOpen: false\n        })\n        .bind(\"complete\", function(e, value) {\n            gReviewRequest.close({\n                type: type,\n                description: value\n            });\n        });\n}\n\n\n/*\n * Adds inline editing capabilities to a field for a review request.\n */\n$.fn.reviewRequestFieldEditor = function() {\n    return this.each(function() {\n        $(this)\n            .inlineEditor({\n                cls: this.id + \"-editor\",\n                editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n                multiline: this.tagName == \"PRE\",\n                showButtons: !$(this).hasClass(\"screenshot-editable\"),\n                startOpen: this.id == \"changedescription\",\n                useEditIconOnly: $(this).hasClass(\"comma-editable\")\n            })\n            .bind(\"beginEdit\", function() {\n                gEditCount++;\n            })\n            .bind(\"cancel\", function() {\n                gEditCount--;\n            })\n            .bind(\"complete\", function(e, value) {\n                gEditCount--;\n                setDraftField(this.id, value);\n            });\n    });\n}\n\n\n/*\n * Handles interaction and events with a screenshot thumbnail.\n\n * @return {jQuery} The provided screenshot containers.\n */\n$.fn.screenshotThumbnail = function() {\n    return $(this).each(function() {\n        var self = $(this);\n\n        var screenshot_id = self.attr(\"data-screenshot-id\");\n        var screenshot = gReviewRequest.createScreenshot(screenshot_id);\n        var captionEl = self.find(\".screenshot-caption\");\n\n        captionEl.find(\"a.edit\")\n            .inlineEditor({\n                cls: this.id + \"-editor\",\n                editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n                showButtons: false\n            })\n            .bind(\"beginEdit\", function() {\n                gEditCount++;\n            })\n            .bind(\"cancel\", function() {\n                gEditCount--;\n            })\n            .bind(\"complete\", function(e, value) {\n                gEditCount--;\n                screenshot.ready(function() {\n                    screenshot.caption = value;\n                    screenshot.save({\n                        buttons: gDraftBannerButtons,\n                        success: function(rsp) {\n                            gDraftBanner.show();\n                        }\n                    });\n                });\n            });\n\n        captionEl.find(\"a.delete\")\n            .click(function() {\n                screenshot.ready(function() {\n                    screenshot.deleteScreenshot()\n                    self.empty();\n                    gDraftBanner.show();\n                });\n\n                return false;\n            });\n    });\n}\n\n\n/*\n * Adds a new, dynamic thumbnail to the thumbnail list.\n *\n * If a screenshot object is given, then this will display actual\n * thumbnail data. Otherwise, this will display a spinner.\n *\n * @param {object} screenshot  The optional screenshot to display.\n *\n * @return {jQuery} The root screenshot thumbnail div.\n */\n$.newScreenshotThumbnail = function(screenshot) {\n    var container = $('<div/>')\n        .addClass(\"screenshot-container\");\n\n    var body = $('<div class=\"screenshot\"/>')\n        .addClass(\"screenshot\")\n        .appendTo(container);\n\n    var captionArea = $('<div/>')\n        .addClass(\"screenshot-caption\")\n        .appendTo(container);\n\n    if (screenshot) {\n        body.append($(\"<a/>\")\n            .attr(\"href\", \"s/\" + screenshot.id + \"/\")\n            .append($(\"<img/>\")\n                .attr({\n                    src: screenshot.thumbnail_url,\n                    alt: screenshot.caption\n                })\n            )\n        );\n\n        captionArea\n            .append($(\"<a/>\")\n                .addClass(\"screenshot-editable edit\")\n                .attr({\n                    href: \"#\",\n                    id: \"screenshot_\" + screenshot.id + \"_caption\"\n                })\n                .text(screenshot.caption)\n            )\n            .append($(\"<a/>\")\n                .addClass(\"delete\")\n                .attr(\"href\", \"#\")\n                .append($(\"<img/>\")\n                    .attr({\n                        src: MEDIA_URL + \"rb/images/delete.png?\" +\n                             MEDIA_SERIAL,\n                        alt: \"Delete Screenshot\"\n                    })\n                )\n            );\n\n        container\n            .attr(\"data-screenshot-id\", screenshot.id)\n            .screenshotThumbnail();\n    } else {\n        body.addClass(\"loading\");\n\n        captionArea.append(\"&nbsp;\");\n    }\n\n    var thumbnails = $(\"#screenshot-thumbnails\");\n    $(thumbnails.parent()[0]).show();\n    return container.insertBefore(thumbnails.find(\"br\"));\n};\n\n\n/*\n * Handles interaction and events with a file attachment.\n\n * @return {jQuery} The provided file attachment container.\n */\n$.fn.fileAttachment = function() {\n    return $(this).each(function() {\n        var self = $(this);\n\n        var fileID = self.attr(\"data-file-id\");\n        var fileAttachment = gReviewRequest.createFileAttachment(fileID);\n        var draftComment = null;\n        var comments = [];\n        var commentsProcessed = false;\n\n        self.find(\"a.edit\")\n            .inlineEditor({\n                cls: \"file-\" + fileID + \"-editor\",\n                editIconPath: MEDIA_URL + \"rb/images/edit.png?\" + MEDIA_SERIAL,\n                showButtons: false\n            })\n            .bind(\"beginEdit\", function() {\n                gEditCount++;\n            })\n            .bind(\"cancel\", function() {\n                gEditCount--;\n            })\n            .bind(\"complete\", function(e, value) {\n                gEditCount--;\n                fileAttachment.ready(function() {\n                    fileAttachment.caption = value;\n                    fileAttachment.save({\n                        buttons: gDraftBannerButtons,\n                        success: function(rsp) {\n                            gDraftBanner.show();\n                        }\n                    });\n                });\n            });\n\n        var addCommentButton =\n            self.find('.file-add-comment a')\n                .click(function() {\n                    showCommentDlg();\n                    return false;\n                });\n\n        self.find(\"a.delete\")\n            .click(function() {\n                fileAttachment.ready(function() {\n                    fileAttachment.deleteFileAttachment()\n                    self.empty();\n                    gDraftBanner.show();\n                });\n\n                return false;\n            });\n\n        function showCommentDlg() {\n            gCommentDlg\n                .one(\"close\", function() {\n                    processComments();\n                    createDraftComment();\n\n                    gCommentDlg\n                        .setDraftComment(draftComment)\n                        .setCommentsList(comments, \"file_attachment_comments\")\n                        .positionToSide(addCommentButton, {\n                            side: 'b',\n                            fitOnScreen: true\n                        });\n                    gCommentDlg.open();\n                })\n                .close();\n        }\n\n        function processComments() {\n            if (commentsProcessed) {\n                return;\n            }\n\n            var attachmentComments = gFileAttachmentComments[fileID];\n\n            if (attachmentComments && attachmentComments.length > 0) {\n                for (var i in attachmentComments) {\n                    var comment = attachmentComments[i];\n\n                    if (comment.localdraft) {\n                        createDraftComment(comment.comment_id, comment.text);\n                    } else {\n                        comments.push(comment);\n                    }\n                }\n            }\n\n            commentsProcessed = true;\n        }\n\n        function createDraftComment(commentID, text) {\n            if (draftComment != null) {\n                return;\n            }\n\n            var self = this;\n            var review = gReviewRequest.createReview();\n            draftComment = review.createFileAttachmentComment(commentID,\n                                                              fileID);\n\n            if (text) {\n                draftComment.text = text;\n            }\n\n            $.event.add(draftComment, \"saved\", function() {\n                showReviewBanner();\n            });\n        }\n    });\n}\n\n\n/*\n * Adds a file to the file attachments list.\n *\n * If an FileAttachment object is given, then this will display the\n * file data. Otherwise, this will display a placeholder.\n *\n * @param {object} fileAttachment  The optional file to display.\n *\n * @return {jQuery} The root file attachment div.\n */\n$.newFileAttachment = function(fileAttachment) {\n    var container = $('<div/>')\n        .addClass('file-container');\n\n    var body = $('<div/>')\n        .addClass('file')\n        .appendTo(container);\n\n    var actions = $('<ul/>')\n        .addClass('actions')\n        .appendTo(body);\n\n    var fileHeader = $('<div/>')\n        .addClass('file-header')\n        .appendTo(body);\n\n    var fileCaption = $('<div/>')\n        .addClass('file-caption')\n        .append($('<a/>')\n            .addClass('edit'))\n        .appendTo(body);\n\n    if (fileAttachment) {\n        container.attr('data-file-id', fileAttachment.id);\n\n        actions.append($('<li/>')\n            .addClass('file-add-comment')\n            .append($('<a/>')\n                .attr('href', '#')\n                .text('Add Comment')));\n\n        fileHeader\n            .append($('<img/>')\n                .attr('src', fileAttachment.icon_url))\n            .append(' ')\n            .append($('<a/>')\n                .attr('href', fileAttachment.url)\n                .text(fileAttachment.filename))\n            .append(' ')\n            .append($('<a/>')\n                .addClass('delete')\n                .attr('href', '#')\n                .append($('<img/>')\n                    .attr({\n                        src: MEDIA_URL + 'rb/images/delete.png?' +\n                             MEDIA_SERIAL,\n                        alt: 'Delete File'\n                    })));\n\n        fileCaption.find('a')\n            .attr('href', fileAttachment.url)\n            .text(fileAttachment.caption);\n    }\n\n    container.fileAttachment();\n\n    var attachments = $(\"#file-list\");\n    $(attachments.parent()[0]).show();\n    return container.insertBefore(attachments.find(\"br\"));\n};\n\n\n/*\n * Sets the list of file attachment comments.\n */\nfunction setFileAttachmentComments(comments) {\n    gFileAttachmentComments = comments;\n}\n\n\n/*\n * Registers for updates to the review request. This will cause a pop-up\n * bubble to be displayed when updates of the specified type are displayed.\n *\n * @param {string} lastTimestamp  The last known update timestamp for\n *                                comparison purposes.\n * @param {string} type           The type of update to watch for, or\n *                                undefined for all types.\n */\nfunction registerForUpdates(lastTimestamp, type) {\n    function updateFavIcon(url) {\n        var head = $(\"head\");\n        head.find(\"link[rel=icon]\").remove();\n        head.append($(\"<link/>\")\n            .attr({\n                href: url,\n                rel: \"icon\",\n                type: \"image/x-icon\"\n            }));\n    }\n\n    var bubble = $(\"#updates-bubble\");\n    var summaryEl;\n    var userEl;\n\n    var faviconEl = $(\"head\").find(\"link[rel=icon]\");\n    var faviconURL = faviconEl.attr(\"href\");\n    var faviconNotifyURL = MEDIA_URL + \"rb/images/favicon_notify.ico?\" +\n                           MEDIA_SERIAL;\n\n    $.event.add(gReviewRequest, \"updated\", function(evt, info) {\n        if (bubble.length == 0) {\n            updateFavIcon(faviconNotifyURL);\n\n            bubble = $('<div id=\"updates-bubble\"/>');\n            summaryEl = $('<span/>')\n                .appendTo(bubble);\n            bubble.append(\" by \");\n            userEl = $('<a href=\"\" id=\"updates-bubble-user\"/>')\n                .appendTo(bubble);\n\n            bubble\n                .append(\n                    $('<span id=\"updates-bubble-buttons\"/>')\n                        .append($('<a href=\"#\">Update Page</a>')\n                            .click(function() {\n                                window.location = gReviewRequestPath;\n                                return false;\n                            }))\n                        .append(\" | \")\n                        .append($('<a href=\"#\">Ignore</a>')\n                            .click(function() {\n                                bubble.fadeOut();\n                                updateFavIcon(faviconURL);\n                                return false;\n                            }))\n                )\n                .appendTo(document.body);\n        }\n\n        summaryEl.text(info.summary);\n        userEl\n            .attr('href', info.user.url)\n            .text(info.user.fullname);\n\n        bubble\n            .hide()\n            .css(\"position\", $.browser.msie && $.browser.version == 6\n                             ? \"absolute\" : \"fixed\")\n            .fadeIn();\n    });\n\n    gReviewRequest.beginCheckForUpdates(type, lastTimestamp);\n}\n\n\n/*\n * Shows the review banner.\n */\nfunction showReviewBanner() {\n    if (gReviewBanner.is(\":hidden\")) {\n        gReviewBanner\n            .slideDown()\n            .find(\".banner\")\n                .hide()\n                .slideDown();\n    }\n}\n\n\n/*\n * Hides the review banner.\n */\nfunction hideReviewBanner() {\n    gReviewBanner\n        .slideUp()\n        .find(\".banner\")\n            .slideUp();\n}\n\n\n/*\n * Queues the load of a diff fragment from the server.\n *\n * This will be added to a list, which will fetch the comments in batches\n * based on file IDs.\n *\n * @param {string} queue_name  The name for this load queue.\n * @param {string} comment_id  The ID of the comment.\n * @param {string} key         The key for this request, using the\n *                             filediff and interfilediff.\n */\nfunction queueLoadDiffFragment(queue_name, comment_id, key) {\n    if (!gPendingDiffFragments[queue_name]) {\n        gPendingDiffFragments[queue_name] = {};\n    }\n\n    if (!gPendingDiffFragments[queue_name][key]) {\n        gPendingDiffFragments[queue_name][key] = [];\n    }\n\n    gPendingDiffFragments[queue_name][key].push(comment_id);\n}\n\n\n/*\n * Begins the loading of all diff fragments on the page belonging to\n * the specified queue and storing in containers with the specified\n * prefix.\n */\nfunction loadDiffFragments(queue_name, container_prefix) {\n    if (!gPendingDiffFragments[queue_name]) {\n        return;\n    }\n\n    for (var key in gPendingDiffFragments[queue_name]) {\n        var comments = gPendingDiffFragments[queue_name][key];\n        var url = gReviewRequestPath + \"fragments/diff-comments/\";\n\n        for (var i = 0; i < comments.length; i++) {\n            url += comments[i];\n\n            if (i != comments.length - 1) {\n                url += \",\"\n            }\n        }\n\n        url += \"/?queue=\" + queue_name +\n               \"&container_prefix=\" + container_prefix +\n               \"&\" + AJAX_SERIAL;\n\n        $.funcQueue(\"diff_comments\").add(function(url) {\n            var e = document.createElement(\"script\");\n            e.type = \"text/javascript\";\n            e.src = url;\n            document.body.appendChild(e);\n        }(url));\n    }\n\n    // Clear the list.\n    gPendingDiffFragments[queue_name] = {};\n\n    $.funcQueue(queue_name).start();\n}\n\n\n/*\n * Initializes drag-and-drop support.\n *\n * This makes it possible to drag screenshots and other files from a file\n * manager and drop them into Review Board. This requires browser support\n * for HTML 5 file drag-and-drop.\n */\nfunction initDnD() {\n    var dropIndicator = null;\n    var screenshotDropBox;\n    var fileDropBox;\n    var middleBox;\n    var removeDropIndicatorHandle = null;\n\n    $(document.body)\n        .bind(\"dragenter\", function(event) {\n            handleDragEnter(event);\n        });\n\n    function handleDragEnter(event) {\n        if (!dropIndicator) {\n            var height = $(window).height();\n\n            dropIndicator = $(\"<div/>\")\n                .addClass(\"drop-indicator\")\n                .appendTo(document.body)\n                .width($(window).width())\n                .height(height)\n                .bind(\"dragleave\", function(event) {\n                    /*\n                     * This should check whether we've exited the drop\n                     * indicator properly. It'll prevent problems when\n                     * transitioning between elements within the indicator.\n                     *\n                     * Note that while this should work cross-browser,\n                     * Firefox 4+ appears broken in that it doesn't send us\n                     * dropleave events on exiting the window.\n                     *\n                     * Also note that it doesn't appear that we need to check\n                     * the Y coordinate. X should be 0 in most cases when\n                     * leaving, except when dragging over the right scrollbar\n                     * in Chrome, when it'll be >= the container width.\n                     */\n                    if (event.pageX <= 0 ||\n                        event.pageX >= dropIndicator.width()) {\n                        handleDragExit();\n                    }\n\n                    return false;\n                })\n                .mouseenter(function() {\n                    /*\n                     * If we get a mouse enter, then the user has moved\n                     * the mouse over the drop indicator without there\n                     * being any drag-and-drop going on. This is likely due\n                     * to the broken Firefox 4+ behavior where dragleave\n                     * events when leaving windows aren't firing.\n                     */\n                    handleDragExit();\n                    return false;\n                });\n\n            screenshotDropBox = $(\"<div/>\")\n                .addClass(\"dropbox\")\n                .appendTo(dropIndicator)\n                .bind('drop', function(event) {\n                    return handleDrop(event, \"screenshot\");\n                });\n            var screenshotText = $(\"<h1/>\")\n                .text(\"Drop Screenshot\")\n                .appendTo(screenshotDropBox);\n\n            middleBox = $(\"<h2/>\")\n                .text(\"or\")\n                .appendTo(dropIndicator);\n\n            fileDropBox = $(\"<div/>\")\n                .addClass(\"dropbox\")\n                .appendTo(dropIndicator)\n                .bind('drop', function(event) {\n                    return handleDrop(event, \"file\");\n                });\n            var fileText = $(\"<h1/>\")\n                .text(\"Drop File Attachment\")\n                .appendTo(fileDropBox);\n\n            var dropBoxHeight = (height - middleBox.height()) / 2;\n            $([screenshotDropBox[0], fileDropBox[0]])\n                .height(dropBoxHeight)\n                .bind(\"dragover\", function() {\n                    var dt = event.originalEvent.dataTransfer;\n\n                    if (dt) {\n                        dt.dropEffect = \"copy\";\n                    }\n\n                    $(this).addClass(\"hover\");\n                    return false;\n                })\n                .bind(\"dragleave\", function(event) {\n                    var dt = event.originalEvent.dataTransfer;\n\n                    if (dt) {\n                        dt.dropEffect = \"none\";\n                    }\n\n                    $(this).removeClass(\"hover\");\n                });\n\n            screenshotText.css(\"margin-top\", -screenshotText.height() / 2);\n            fileText.css(\"margin-top\", -fileText.height() / 2);\n        }\n    }\n\n    function handleDragExit(closeImmediately) {\n        if (dropIndicator == null) {\n            return;\n        }\n\n        if (removeDropIndicatorHandle) {\n            window.clearInterval(removeDropIndicatorHandle);\n            removeDropIndicatorHandle = null;\n        }\n\n        if (closeImmediately) {\n            dropIndicator.fadeOut(function() {\n                dropIndicator.remove();\n                dropIndicator = null;\n            });\n        } else {\n            removeDropIndicatorHandle = window.setInterval(function() {\n                handleDragExit(true);\n            }, 1000);\n        }\n    }\n\n    function handleDrop(event, type) {\n        /* Do these early in case we hit some error. */\n        event.stopPropagation();\n        event.preventDefault();\n\n        var dt = event.originalEvent.dataTransfer;\n\n        var files = dt && dt.files;\n\n        if (!files) {\n            return;\n        }\n\n        if (type == \"screenshot\") {\n            var foundImages = false;\n\n            for (var i = 0; i < files.length; i++) {\n                var file = files[i];\n\n                if (file.type == \"image/jpeg\" ||\n                    file.type == \"image/pjpeg\" ||\n                    file.type == \"image/png\" ||\n                    file.type == \"image/bmp\" ||\n                    file.type == \"image/gif\" ||\n                    file.type == \"image/svg+xml\") {\n\n                    foundImages = true;\n\n                    uploadScreenshot(file);\n                }\n            }\n\n            if (foundImages) {\n                handleDragExit();\n            } else {\n                if (dropIndicator) {\n                    screenshotDropBox.empty();\n                    fileDropBox.empty();\n                    middleBox.html(\"None of the dropped files were valid \" +\n                                   \"images\");\n                }\n\n                setTimeout(function() {\n                    handleDragExit(true);\n                }, 1500);\n            }\n        } else if (type == \"file\") {\n            for (var i = 0; i < files.length; i++) {\n                uploadFile(files[i]);\n            }\n\n            handleDragExit(true);\n        }\n    }\n\n    function uploadScreenshot(file) {\n        /* Create a temporary screenshot thumbnail. */\n        var thumb = $.newScreenshotThumbnail()\n            .css(\"opacity\", 0)\n            .fadeTo(1000, 1);\n\n        var screenshot = gReviewRequest.createScreenshot();\n        screenshot.setFile(file);\n        screenshot.save({\n            buttons: gDraftBannerButtons,\n            success: function(rsp, screenshot) {\n                thumb.replaceWith($.newScreenshotThumbnail(screenshot));\n                gDraftBanner.show();\n            },\n            error: function(rsp, msg) {\n                thumb.remove();\n            }\n        });\n    }\n\n    function uploadFile(file) {\n        /* Create a temporary file listing. */\n        var thumb = $.newFileAttachment()\n            .css(\"opacity\", 0)\n            .fadeTo(1000, 1);\n\n        var fileAttachment = gReviewRequest.createFileAttachment();\n        fileAttachment.setFile(file);\n        fileAttachment.save({\n            buttons: gDraftBannerButtons,\n            success: function(rsp, fileAttachment) {\n                thumb.replaceWith($.newFileAttachment(fileAttachment));\n                gDraftBanner.show();\n            },\n            error: function(rsp, msg) {\n                thumb.remove();\n            }\n        });\n    }\n}\n\n$(document).ready(function() {\n    /* Provide support for expanding submenus in the action list. */\n    var menuitem = null;\n\n    function showMenu() {\n        if (menuitem) {\n            $(\"ul\", menuitem).fadeOut(\"fast\");\n            menuitem = null;\n        }\n\n        $(\"ul\", this).fadeIn(\"fast\");\n    }\n\n    function hideMenu() {\n        menuitem = $(this);\n        setTimeout(function() {\n            if (menuitem) {\n                $(\"ul\", menuitem).fadeOut(\"fast\");\n            }\n        }, 400);\n    }\n\n    $(\".actions > li:has(ul.menu)\")\n        .hover(showMenu, hideMenu)\n        .toggle(showMenu, hideMenu);\n\n    $(\"#btn-draft-publish\").click(function() {\n        /* Save all the fields if we need to. */\n        gPublishing = true;\n        var fields = $(\".editable:inlineEditorDirty\");\n        gPendingSaveCount = fields.length;\n\n        if (gPendingSaveCount == 0) {\n            publishDraft();\n        } else {\n            fields.inlineEditor(\"save\");\n        }\n\n        return false;\n    });\n\n    $(\"#btn-draft-discard\").click(function() {\n        gReviewRequest.discardDraft({\n            options: gDraftBannerButtons\n        });\n        return false;\n    });\n\n    $(\"#btn-review-request-discard, #discard-review-request-link\")\n        .click(function() {\n            gReviewRequest.close({\n                type: RB.ReviewRequest.CLOSE_DISCARDED,\n                buttons: gDraftBannerButtons\n            });\n            return false;\n        });\n\n    $(\"#link-review-request-close-submitted\").click(function() {\n        /*\n         * This is a non-destructive event, so don't confirm unless there's\n         * a draft.\n         */\n        var submit = true;\n        if ($(\"#draft-banner\").is(\":visible\")) {\n            submit = confirm(\"You have an unpublished draft. If you close \" +\n                             \"this review request, the draft will be \" +\n                             \"discarded. Are you sure you want to close \" +\n                             \"the review request?\");\n        }\n\n        if (submit) {\n            gReviewRequest.close({\n                type: RB.ReviewRequest.CLOSE_SUBMITTED,\n                buttons: gDraftBannerButtons\n            });\n        }\n\n        return false;\n    });\n\n    $(\"#btn-review-request-reopen\").click(function() {\n        gReviewRequest.reopen({\n            buttons: gDraftBannerButtons\n        });\n\n        return false;\n    });\n\n    $(\"#delete-review-request-link\").click(function() {\n        var dlg = $(\"<p/>\")\n            .text(\"This deletion cannot be undone. All diffs and reviews \" +\n                  \"will be deleted as well.\")\n            .modalBox({\n                title: \"Are you sure you want to delete this review request?\",\n                buttons: [\n                    $('<input type=\"button\" value=\"Cancel\"/>'),\n                    $('<input type=\"button\" value=\"Delete\"/>')\n                        .click(function(e) {\n                            gReviewRequest.deletePermanently({\n                                buttons: gDraftBannerButtons.add(\n                                    $(\"input\", dlg.modalBox(\"buttons\"))),\n                                success: function() {\n                                    window.location = SITE_ROOT;\n                                }\n                            });\n                        })\n                ]\n            });\n\n        return false;\n    });\n\n    var pendingReview = gReviewRequest.createReview();\n\n    /* Edit Review buttons. */\n    $(\"#review-link, #review-banner-edit\").click(function() {\n        $.reviewForm(pendingReview);\n    });\n\n    $(\"#shipit-link\").click(function() {\n        if (confirm(\"Are you sure you want to post this review?\")) {\n            pendingReview.ship_it = true;\n            pendingReview.body_top = \"Ship It!\";\n            pendingReview.publish({\n                buttons: null,\n                success: function() {\n                    hideReviewBanner();\n                    gReviewBanner.queue(function() {\n                        window.location = gReviewRequestPath;\n                    });\n                }\n            });\n        }\n    });\n\n    /* Review banner's Publish button. */\n    $(\"#review-banner-publish\").click(function() {\n        pendingReview.publish({\n            buttons: $(\"input\", gReviewBanner),\n            success: function() {\n                hideReviewBanner();\n                gReviewBanner.queue(function() {\n                    window.location = gReviewRequestPath;\n                });\n            }\n        });\n    });\n\n    /* Review banner's Delete button. */\n    $(\"#review-banner-discard\").click(function() {\n        var dlg = $(\"<p/>\")\n            .text(\"If you discard this review, all related comments will \" +\n                  \"be permanently deleted.\")\n            .modalBox({\n                title: \"Are you sure you want to discard this review?\",\n                buttons: [\n                    $('<input type=\"button\" value=\"Cancel\"/>'),\n                    $('<input type=\"button\" value=\"Discard\"/>')\n                        .click(function(e) {\n                            pendingReview.deleteReview({\n                                buttons: $(\"input\", gReviewBanner),\n                                success: function() {\n                                    hideReviewBanner();\n                                    gReviewBanner.queue(function() {\n                                        window.location = gReviewRequestPath;\n                                    });\n                                }\n                            });\n                        })\n                ]\n            });\n    });\n\n    $(\"pre.reviewtext, #description, #testing_done\").each(function() {\n        $(this).html(linkifyText($(this).text()));\n    });\n\n    /* Toggle the state of a review */\n    $(\".collapse-button\").click(function() {\n        $(this).closest(\".box\").toggleClass('collapsed');\n    });\n\n    /* Expand all reviews */\n    $(\"#expand-all\").click(function() {\n        $(\".collapsed\").removeClass(\"collapsed\");\n        return false;\n    });\n\n    gCommentDlg = $(\"#comment-detail\")\n        .commentDlg()\n        .css(\"z-index\", 999);\n    gCommentDlg.appendTo(\"body\");\n\n    $(\"#submitted-banner #changedescription.editable\").reviewCloseCommentEditor(RB.ReviewRequest.CLOSE_SUBMITTED);\n    $(\"#discard-banner #changedescription.editable\").reviewCloseCommentEditor(RB.ReviewRequest.CLOSE_DISCARDED);\n\n    if (gUserAuthenticated) {\n        if (window[\"gEditable\"]) {\n            $(\".editable\").reviewRequestFieldEditor();\n            $(\".screenshot-container\").screenshotThumbnail();\n            $(\".file-container\").fileAttachment();\n\n            var targetGroupsEl = $(\"#target_groups\");\n            var targetPeopleEl = $(\"#target_people\");\n\n            if (targetGroupsEl.length > 0) {\n                targetGroupsEl\n                    .inlineEditor(\"field\")\n                    .bind(\"beginEdit\", function() {\n                        gEditCount++;\n                    })\n                    .bind(\"cancel complete\", function() {\n                        gEditCount--;\n                    })\n                    .reviewsAutoComplete({\n                        fieldName: \"groups\",\n                        nameKey: \"name\",\n                        descKey: \"display_name\",\n                        extraParams: {\n                            displayname: 1\n                        }\n                    });\n            }\n\n            if (targetPeopleEl.length > 0) {\n                targetPeopleEl\n                    .inlineEditor(\"field\")\n                    .bind(\"beginEdit\", function() {\n                        gEditCount++;\n                    })\n                    .bind(\"cancel complete\", function() {\n                        gEditCount--;\n                    })\n                    .reviewsAutoComplete({\n                        fieldName: \"users\",\n                        nameKey: \"username\",\n                        descKey: \"fullname\",\n                        extraParams: {\n                            fullname: 1\n                        }\n                    });\n            }\n\n            /*\n             * Warn the user if they try to navigate away with unsaved comments.\n             *\n             * @param {event} evt The beforeunload event.\n             *\n             * @return {string} The dialog message (needed for IE).\n             */\n            window.onbeforeunload = function(evt) {\n                if (gEditCount > 0) {\n                    /*\n                     * On IE, the text must be set in evt.returnValue.\n                     *\n                     * On Firefox, it must be returned as a string.\n                     *\n                     * On Chrome, it must be returned as a string, but you\n                     * can't set it on evt.returnValue (it just ignores it).\n                     */\n                    var msg = \"You have unsaved changes that will \" +\n                              \"be lost if you navigate away from \" +\n                              \"this page.\";\n                    evt = evt || window.event;\n\n                    evt.returnValue = msg;\n                    return msg;\n                }\n            };\n\n            initDnD();\n        }\n    }\n\n    loadDiffFragments(\"diff_fragments\", \"comment_container\");\n});\n\n// vim: set et:sw=4:\n"], "filenames": ["reviewboard/htdocs/media/rb/js/reviews.js"], "buggy_code_start_loc": [355], "buggy_code_end_loc": [359], "fixing_code_start_loc": [355], "fixing_code_end_loc": [361], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the auto-complete widget in htdocs/media/rb/js/reviews.js in Review Board 1.6.x before 1.6.17 and 1.7.x before 1.7.10 allows remote attackers to inject arbitrary web script or HTML via a full name.", "other": {"cve": {"id": "CVE-2013-2209", "sourceIdentifier": "secalert@redhat.com", "published": "2013-07-31T13:20:25.557", "lastModified": "2014-04-19T04:35:04.567", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the auto-complete widget in htdocs/media/rb/js/reviews.js in Review Board 1.6.x before 1.6.17 and 1.7.x before 1.7.10 allows remote attackers to inject arbitrary web script or HTML via a full name."}, {"lang": "es", "value": "Vulnerabilidad XSS en el widget de autocompletado en enhtdocs/media/rb/js/reviews.js en Review Board 1.6.x anteior a 1.6.17 y 1.7.x anterior a 1.7.10, permite a atacantes remotos inyectar secuencias de comandos web o HTML a trav\u00e9s de un nombre completo."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6:*:*:*:*:*:*:*", "matchCriteriaId": "C0352DAF-A027-44A3-A434-B74157628B47"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6:beta1:*:*:*:*:*:*", "matchCriteriaId": "A597DC1D-E221-41DE-9CD8-51AB2FABDAF4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6:beta2:*:*:*:*:*:*", "matchCriteriaId": "6A846979-B54C-4496-A3EF-4390791FA51F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6:rc1:*:*:*:*:*:*", "matchCriteriaId": "C08092DC-4E68-4154-85F6-C95BF5B30527"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6:rc2:*:*:*:*:*:*", "matchCriteriaId": "5786A26F-6FD4-4BB7-BC2B-A13EF753DEA3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "BE74A5E0-2F80-4416-9E7A-4DCED8165C8C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "40001863-E5A8-45EF-B036-B675B1EC9F63"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "DE7F4EE3-86A7-4E04-BA66-4D5B5BD8329F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.4:*:*:*:*:*:*:*", "matchCriteriaId": "9FCEA7E2-96D8-42C3-B007-62860D393F75"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.5:*:*:*:*:*:*:*", "matchCriteriaId": "E21F6A7B-378E-4CA5-B1B6-06245289FCB6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.6:*:*:*:*:*:*:*", "matchCriteriaId": "E8F888AA-F713-41BA-A1E8-635EF0F7113F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.7:*:*:*:*:*:*:*", "matchCriteriaId": "11BB9BA2-E840-42D1-8002-A9776EDCB1F7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.8:*:*:*:*:*:*:*", "matchCriteriaId": "A5359985-17E8-40B2-8981-1E9667220CDF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.9:*:*:*:*:*:*:*", "matchCriteriaId": "82B7C87B-626E-4CDE-8F32-429F649D6AB3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.10:*:*:*:*:*:*:*", "matchCriteriaId": "48F74009-87FA-42E5-AE26-44DBFAFCF022"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.11:*:*:*:*:*:*:*", "matchCriteriaId": "CE4C830F-ED4E-4D02-846F-3B67431AD9CA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.12:*:*:*:*:*:*:*", "matchCriteriaId": "487AC8EF-73D7-47DC-8DC0-ACD4777E6FB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.13:*:*:*:*:*:*:*", "matchCriteriaId": "ED8AA0DA-A295-446B-BCC3-F9DE48B281FB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.14:*:*:*:*:*:*:*", "matchCriteriaId": "48FC6757-C6F7-4E71-BD21-BAE66A6D39E3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.15:*:*:*:*:*:*:*", "matchCriteriaId": "B2360736-7C30-4506-9211-D565D2216F03"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.6.16:*:*:*:*:*:*:*", "matchCriteriaId": "0440E5D5-2F70-40B5-B1F4-9785DBE4C25B"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "2C4CB38D-0D63-4C6A-8C8C-062BF0BEC170"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "574DB13E-0396-4721-869C-360A9AEF533E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.1:*:*:*:*:*:*:*", "matchCriteriaId": "C98991C6-FF3E-4B7B-95A2-481B6AC63727"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.2:*:*:*:*:*:*:*", "matchCriteriaId": "23409449-A779-470C-91D9-F59F2A9EE888"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.3:*:*:*:*:*:*:*", "matchCriteriaId": "281B1D75-D46D-4665-8CEF-84B8126DC251"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.4:*:*:*:*:*:*:*", "matchCriteriaId": "7594F58E-6992-4100-BBEE-607BA0E31672"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.5:*:*:*:*:*:*:*", "matchCriteriaId": "DA83FB56-1AC2-4F31-B31E-D25317AD8DA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.6:*:*:*:*:*:*:*", "matchCriteriaId": "515B9F24-E857-420B-A9DB-1E0BE3E622B8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.7:*:*:*:*:*:*:*", "matchCriteriaId": "3E1B65A9-F2DE-4FBC-B63A-E835B77A0D93"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.8:*:*:*:*:*:*:*", "matchCriteriaId": "127661C5-6A2C-4A26-A882-D819B30C5430"}, {"vulnerable": true, "criteria": "cpe:2.3:a:reviewboard:review_board:1.7.9:*:*:*:*:*:*:*", "matchCriteriaId": "00653376-87FB-403B-8753-95D2907FDEEC"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2013/06/24/2", "source": "secalert@redhat.com"}, {"url": "http://www.reviewboard.org/docs/releasenotes/reviewboard/1.6.17/", "source": "secalert@redhat.com"}, {"url": "http://www.reviewboard.org/docs/releasenotes/reviewboard/1.7.10/", "source": "secalert@redhat.com"}, {"url": "http://www.reviewboard.org/news/2013/06/22/review-board-1617-and-1710-released/", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "http://www.tripwire.com/state-of-security/vulnerability-management/vulnerabilities-its-time-to-review-your-reviewboard", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=977423", "source": "secalert@redhat.com"}, {"url": "https://github.com/reviewboard/reviewboard/commit/4aaacbb1e628a80803ba1a55703db38fccdf7dbf", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/reviewboard/reviewboard/commit/4aaacbb1e628a80803ba1a55703db38fccdf7dbf"}}