{"buggy_code": ["<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006~2021 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\ndeclare (strict_types = 1);\n\nnamespace think;\n\n/**\n * \u591a\u8bed\u8a00\u7ba1\u7406\u7c7b\n * @package think\n */\nclass Lang\n{\n    protected $app;\n\n    /**\n     * \u914d\u7f6e\u53c2\u6570\n     * @var array\n     */\n    protected $config = [\n        // \u9ed8\u8ba4\u8bed\u8a00\n        'default_lang'    => 'zh-cn',\n        // \u5141\u8bb8\u7684\u8bed\u8a00\u5217\u8868\n        'allow_lang_list' => [],\n        // \u662f\u5426\u4f7f\u7528Cookie\u8bb0\u5f55\n        'use_cookie'      => true,\n        // \u6269\u5c55\u8bed\u8a00\u5305\n        'extend_list'     => [],\n        // \u591a\u8bed\u8a00cookie\u53d8\u91cf\n        'cookie_var'      => 'think_lang',\n        // \u591a\u8bed\u8a00header\u53d8\u91cf\n        'header_var'      => 'think-lang',\n        // \u591a\u8bed\u8a00\u81ea\u52a8\u4fa6\u6d4b\u53d8\u91cf\u540d\n        'detect_var'      => 'lang',\n        // Accept-Language\u8f6c\u4e49\u4e3a\u5bf9\u5e94\u8bed\u8a00\u5305\u540d\u79f0\n        'accept_language' => [\n            'zh-hans-cn' => 'zh-cn',\n        ],\n        // \u662f\u5426\u652f\u6301\u8bed\u8a00\u5206\u7ec4\n        'allow_group'     => false,\n    ];\n\n    /**\n     * \u591a\u8bed\u8a00\u4fe1\u606f\n     * @var array\n     */\n    private $lang = [];\n\n    /**\n     * \u5f53\u524d\u8bed\u8a00\n     * @var string\n     */\n    private $range = 'zh-cn';\n\n    /**\n     * \u6784\u9020\u65b9\u6cd5\n     * @access public\n     * @param array $config\n     */\n    public function __construct(App $app, array $config = [])\n    {\n        $this->config = array_merge($this->config, array_change_key_case($config));\n        $this->range  = $this->config['default_lang'];\n        $this->app    = $app;\n    }\n\n    public static function __make(App $app, Config $config)\n    {\n        return new static($app, $config->get('lang'));\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u8bed\u8a00\u914d\u7f6e\n     * @access public\n     * @return array\n     */\n    public function getConfig(): array\n    {\n        return $this->config;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u8bed\u8a00\n     * @access public\n     * @param string $lang \u8bed\u8a00\n     * @return void\n     */\n    public function setLangSet(string $lang): void\n    {\n        $this->range = $lang;\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u8bed\u8a00\n     * @access public\n     * @return string\n     */\n    public function getLangSet(): string\n    {\n        return $this->range;\n    }\n\n    /**\n     * \u83b7\u53d6\u9ed8\u8ba4\u8bed\u8a00\n     * @access public\n     * @return string\n     */\n    public function defaultLangSet()\n    {\n        return $this->config['default_lang'];\n    }\n\n    /**\n     * \u5207\u6362\u8bed\u8a00\n     * @access public\n     * @param string $langset \u8bed\u8a00\n     * @return void\n     */\n    public function switchLangSet(string $langset)\n    {\n        if (empty($langset)) {\n            return;\n        }\n\n        $this->setLangSet($langset);\n\n        // \u52a0\u8f7d\u7cfb\u7edf\u8bed\u8a00\u5305\n        $this->load([\n            $this->app->getThinkPath() . 'lang' . DIRECTORY_SEPARATOR . $langset . '.php',\n        ]);\n\n        // \u52a0\u8f7d\u7cfb\u7edf\u8bed\u8a00\u5305\n        $files = glob($this->app->getAppPath() . 'lang' . DIRECTORY_SEPARATOR . $langset . '.*');\n        $this->load($files);\n\n        // \u52a0\u8f7d\u6269\u5c55\uff08\u81ea\u5b9a\u4e49\uff09\u8bed\u8a00\u5305\n        $list = $this->app->config->get('lang.extend_list', []);\n\n        if (isset($list[$langset])) {\n            $this->load($list[$langset]);\n        }\n    }\n\n    /**\n     * \u52a0\u8f7d\u8bed\u8a00\u5b9a\u4e49(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\n     * @access public\n     * @param string|array $file  \u8bed\u8a00\u6587\u4ef6\n     * @param string       $range \u8bed\u8a00\u4f5c\u7528\u57df\n     * @return array\n     */\n    public function load($file, $range = ''): array\n    {\n        $range = $range ?: $this->range;\n        if (!isset($this->lang[$range])) {\n            $this->lang[$range] = [];\n        }\n\n        $lang = [];\n\n        foreach ((array) $file as $name) {\n            if (is_file($name)) {\n                $result = $this->parse($name);\n                $lang   = array_change_key_case($result) + $lang;\n            }\n        }\n\n        if (!empty($lang)) {\n            $this->lang[$range] = $lang + $this->lang[$range];\n        }\n\n        return $this->lang[$range];\n    }\n\n    /**\n     * \u89e3\u6790\u8bed\u8a00\u6587\u4ef6\n     * @access protected\n     * @param string $file \u8bed\u8a00\u6587\u4ef6\u540d\n     * @return array\n     */\n    protected function parse(string $file): array\n    {\n        $type = pathinfo($file, PATHINFO_EXTENSION);\n\n        switch ($type) {\n            case 'php':\n                $result = include $file;\n                break;\n            case 'yml':\n            case 'yaml':\n                if (function_exists('yaml_parse_file')) {\n                    $result = yaml_parse_file($file);\n                }\n                break;\n            case 'json':\n                $data = file_get_contents($file);\n\n                if (false !== $data) {\n                    $data = json_decode($data, true);\n\n                    if (json_last_error() === JSON_ERROR_NONE) {\n                        $result = $data;\n                    }\n                }\n\n                break;\n        }\n\n        return isset($result) && is_array($result) ? $result : [];\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u5426\u5b58\u5728\u8bed\u8a00\u5b9a\u4e49(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\n     * @access public\n     * @param string|null $name  \u8bed\u8a00\u53d8\u91cf\n     * @param string      $range \u8bed\u8a00\u4f5c\u7528\u57df\n     * @return bool\n     */\n    public function has(string $name, string $range = ''): bool\n    {\n        $range = $range ?: $this->range;\n\n        if ($this->config['allow_group'] && strpos($name, '.')) {\n            [$name1, $name2] = explode('.', $name, 2);\n            return isset($this->lang[$range][strtolower($name1)][$name2]);\n        }\n\n        return isset($this->lang[$range][strtolower($name)]);\n    }\n\n    /**\n     * \u83b7\u53d6\u8bed\u8a00\u5b9a\u4e49(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\n     * @access public\n     * @param string|null $name  \u8bed\u8a00\u53d8\u91cf\n     * @param array       $vars  \u53d8\u91cf\u66ff\u6362\n     * @param string      $range \u8bed\u8a00\u4f5c\u7528\u57df\n     * @return mixed\n     */\n    public function get(string $name = null, array $vars = [], string $range = '')\n    {\n        $range = $range ?: $this->range;\n\n        if (!isset($this->lang[$range])) {\n            $this->switchLangSet($range);\n        }\n\n        // \u7a7a\u53c2\u6570\u8fd4\u56de\u6240\u6709\u5b9a\u4e49\n        if (is_null($name)) {\n            return $this->lang[$range] ?? [];\n        }\n\n        if ($this->config['allow_group'] && strpos($name, '.')) {\n            [$name1, $name2] = explode('.', $name, 2);\n\n            $value = $this->lang[$range][strtolower($name1)][$name2] ?? $name;\n        } else {\n            $value = $this->lang[$range][strtolower($name)] ?? $name;\n        }\n\n        // \u53d8\u91cf\u89e3\u6790\n        if (!empty($vars) && is_array($vars)) {\n            /**\n             * Notes:\n             * \u4e3a\u4e86\u68c0\u6d4b\u7684\u65b9\u4fbf\uff0c\u6570\u5b57\u7d22\u5f15\u7684\u5224\u65ad\u4ec5\u4ec5\u662f\u53c2\u6570\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684key\u4e3a\u6570\u5b570\n             * \u6570\u5b57\u7d22\u5f15\u91c7\u7528\u7684\u662f\u7cfb\u7edf\u7684 sprintf \u51fd\u6570\u66ff\u6362\uff0c\u7528\u6cd5\u8bf7\u53c2\u8003 sprintf \u51fd\u6570\n             */\n            if (key($vars) === 0) {\n                // \u6570\u5b57\u7d22\u5f15\u89e3\u6790\n                array_unshift($vars, $value);\n                $value = call_user_func_array('sprintf', $vars);\n            } else {\n                // \u5173\u8054\u7d22\u5f15\u89e3\u6790\n                $replace = array_keys($vars);\n                foreach ($replace as &$v) {\n                    $v = \"{:{$v}}\";\n                }\n                $value = str_replace($replace, $vars, $value);\n            }\n        }\n\n        return $value;\n    }\n\n    /**\n     * \u81ea\u52a8\u4fa6\u6d4b\u8bbe\u7f6e\u83b7\u53d6\u8bed\u8a00\u9009\u62e9\n     * @deprecated\n     * @access public\n     * @param Request $request\n     * @return string\n     */\n    public function detect(Request $request): string\n    {\n        // \u81ea\u52a8\u4fa6\u6d4b\u8bbe\u7f6e\u83b7\u53d6\u8bed\u8a00\u9009\u62e9\n        $langSet = '';\n\n        if ($request->get($this->config['detect_var'])) {\n            // url\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = strtolower($request->get($this->config['detect_var']));\n        } elseif ($request->header($this->config['header_var'])) {\n            // Header\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = strtolower($request->header($this->config['header_var']));\n        } elseif ($request->cookie($this->config['cookie_var'])) {\n            // Cookie\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = strtolower($request->cookie($this->config['cookie_var']));\n        } elseif ($request->server('HTTP_ACCEPT_LANGUAGE')) {\n            // \u81ea\u52a8\u4fa6\u6d4b\u6d4f\u89c8\u5668\u8bed\u8a00\n            $match = preg_match('/^([a-z\\d\\-]+)/i', $request->server('HTTP_ACCEPT_LANGUAGE'), $matches);\n            if ($match) {\n                $langSet = strtolower($matches[1]);\n                if (isset($this->config['accept_language'][$langSet])) {\n                    $langSet = $this->config['accept_language'][$langSet];\n                }\n            }\n        }\n\n        if (empty($this->config['allow_lang_list']) || in_array($langSet, $this->config['allow_lang_list'])) {\n            // \u5408\u6cd5\u7684\u8bed\u8a00\n            $this->range = $langSet;\n        }\n\n        return $this->range;\n    }\n\n    /**\n     * \u4fdd\u5b58\u5f53\u524d\u8bed\u8a00\u5230Cookie\n     * @deprecated\n     * @access public\n     * @param Cookie $cookie Cookie\u5bf9\u8c61\n     * @return void\n     */\n    public function saveToCookie(Cookie $cookie)\n    {\n        if ($this->config['use_cookie']) {\n            $cookie->set($this->config['cookie_var'], $this->range);\n        }\n    }\n\n}\n", "<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006~2021 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\ndeclare (strict_types = 1);\n\nnamespace think\\middleware;\n\nuse Closure;\nuse think\\App;\nuse think\\Config;\nuse think\\Cookie;\nuse think\\Lang;\nuse think\\Request;\nuse think\\Response;\n\n/**\n * \u591a\u8bed\u8a00\u52a0\u8f7d\n */\nclass LoadLangPack\n{\n    protected $app;\n    protected $lang;\n    protected $config;\n\n    public function __construct(App $app, Lang $lang, Config $config)\n    {\n        $this->app    = $app;\n        $this->lang   = $lang;\n        $this->config = $lang->getConfig();\n    }\n\n    /**\n     * \u8def\u7531\u521d\u59cb\u5316\uff08\u8def\u7531\u89c4\u5219\u6ce8\u518c\uff09\n     * @access public\n     * @param Request $request\n     * @param Closure $next\n     * @return Response\n     */\n    public function handle($request, Closure $next)\n    {\n        // \u81ea\u52a8\u4fa6\u6d4b\u5f53\u524d\u8bed\u8a00\n        $langset = $this->detect($request);\n\n        if ($this->lang->defaultLangSet() != $langset) {\n            $this->lang->switchLangSet($langset);\n        }\n\n        $this->saveToCookie($this->app->cookie, $langset);\n\n        return $next($request);\n    }\n\n    /**\n     * \u81ea\u52a8\u4fa6\u6d4b\u8bbe\u7f6e\u83b7\u53d6\u8bed\u8a00\u9009\u62e9\n     * @access protected\n     * @param Request $request\n     * @return string\n     */\n    protected function detect(Request $request): string\n    {\n        // \u81ea\u52a8\u4fa6\u6d4b\u8bbe\u7f6e\u83b7\u53d6\u8bed\u8a00\u9009\u62e9\n        $langSet = '';\n\n        if ($request->get($this->config['detect_var'])) {\n            // url\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = strtolower($request->get($this->config['detect_var']));\n        } elseif ($request->header($this->config['header_var'])) {\n            // Header\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = strtolower($request->header($this->config['header_var']));\n        } elseif ($request->cookie($this->config['cookie_var'])) {\n            // Cookie\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = strtolower($request->cookie($this->config['cookie_var']));\n        } elseif ($request->server('HTTP_ACCEPT_LANGUAGE')) {\n            // \u81ea\u52a8\u4fa6\u6d4b\u6d4f\u89c8\u5668\u8bed\u8a00\n            $match = preg_match('/^([a-z\\d\\-]+)/i', $request->server('HTTP_ACCEPT_LANGUAGE'), $matches);\n            if ($match) {\n                $langSet = strtolower($matches[1]);\n                if (isset($this->config['accept_language'][$langSet])) {\n                    $langSet = $this->config['accept_language'][$langSet];\n                }\n            }\n        }\n\n        if (empty($this->config['allow_lang_list']) || in_array($langSet, $this->config['allow_lang_list'])) {\n            // \u5408\u6cd5\u7684\u8bed\u8a00\n            $range = $langSet;\n            $this->lang->setLangSet($range);\n        } else {\n            $range = $this->lang->getLangSet();\n        }\n\n        return $range;\n    }\n\n    /**\n     * \u4fdd\u5b58\u5f53\u524d\u8bed\u8a00\u5230Cookie\n     * @access protected\n     * @param Cookie $cookie Cookie\u5bf9\u8c61\n     * @param string $langSet \u8bed\u8a00\n     * @return void\n     */\n    protected function saveToCookie(Cookie $cookie, string $langSet)\n    {\n        if ($this->config['use_cookie']) {\n            $cookie->set($this->config['cookie_var'], $langSet);\n        }\n    }\n\n}\n"], "fixing_code": ["<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006~2021 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\ndeclare (strict_types = 1);\n\nnamespace think;\n\n/**\n * \u591a\u8bed\u8a00\u7ba1\u7406\u7c7b\n * @package think\n */\nclass Lang\n{\n    protected $app;\n\n    /**\n     * \u914d\u7f6e\u53c2\u6570\n     * @var array\n     */\n    protected $config = [\n        // \u9ed8\u8ba4\u8bed\u8a00\n        'default_lang'    => 'zh-cn',\n        // \u5141\u8bb8\u7684\u8bed\u8a00\u5217\u8868\n        'allow_lang_list' => [],\n        // \u662f\u5426\u4f7f\u7528Cookie\u8bb0\u5f55\n        'use_cookie'      => true,\n        // \u6269\u5c55\u8bed\u8a00\u5305\n        'extend_list'     => [],\n        // \u591a\u8bed\u8a00cookie\u53d8\u91cf\n        'cookie_var'      => 'think_lang',\n        // \u591a\u8bed\u8a00header\u53d8\u91cf\n        'header_var'      => 'think-lang',\n        // \u591a\u8bed\u8a00\u81ea\u52a8\u4fa6\u6d4b\u53d8\u91cf\u540d\n        'detect_var'      => 'lang',\n        // Accept-Language\u8f6c\u4e49\u4e3a\u5bf9\u5e94\u8bed\u8a00\u5305\u540d\u79f0\n        'accept_language' => [\n            'zh-hans-cn' => 'zh-cn',\n        ],\n        // \u662f\u5426\u652f\u6301\u8bed\u8a00\u5206\u7ec4\n        'allow_group'     => false,\n    ];\n\n    /**\n     * \u591a\u8bed\u8a00\u4fe1\u606f\n     * @var array\n     */\n    private $lang = [];\n\n    /**\n     * \u5f53\u524d\u8bed\u8a00\n     * @var string\n     */\n    private $range = 'zh-cn';\n\n    /**\n     * \u6784\u9020\u65b9\u6cd5\n     * @access public\n     * @param array $config\n     */\n    public function __construct(App $app, array $config = [])\n    {\n        $this->config = array_merge($this->config, array_change_key_case($config));\n        $this->range  = $this->config['default_lang'];\n        $this->app    = $app;\n    }\n\n    public static function __make(App $app, Config $config)\n    {\n        return new static($app, $config->get('lang'));\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u8bed\u8a00\u914d\u7f6e\n     * @access public\n     * @return array\n     */\n    public function getConfig(): array\n    {\n        return $this->config;\n    }\n\n    /**\n     * \u8bbe\u7f6e\u5f53\u524d\u8bed\u8a00\n     * @access public\n     * @param string $lang \u8bed\u8a00\n     * @return void\n     */\n    public function setLangSet(string $lang): void\n    {\n        $this->range = $lang;\n    }\n\n    /**\n     * \u83b7\u53d6\u5f53\u524d\u8bed\u8a00\n     * @access public\n     * @return string\n     */\n    public function getLangSet(): string\n    {\n        return $this->range;\n    }\n\n    /**\n     * \u83b7\u53d6\u9ed8\u8ba4\u8bed\u8a00\n     * @access public\n     * @return string\n     */\n    public function defaultLangSet()\n    {\n        return $this->config['default_lang'];\n    }\n\n    /**\n     * \u5207\u6362\u8bed\u8a00\n     * @access public\n     * @param string $langset \u8bed\u8a00\n     * @return void\n     */\n    public function switchLangSet(string $langset)\n    {\n        if (empty($langset)) {\n            return;\n        }\n\n        $this->setLangSet($langset);\n\n        // \u52a0\u8f7d\u7cfb\u7edf\u8bed\u8a00\u5305\n        $this->load([\n            $this->app->getThinkPath() . 'lang' . DIRECTORY_SEPARATOR . $langset . '.php',\n        ]);\n\n        // \u52a0\u8f7d\u7cfb\u7edf\u8bed\u8a00\u5305\n        $files = glob($this->app->getAppPath() . 'lang' . DIRECTORY_SEPARATOR . $langset . '.*');\n        $this->load($files);\n\n        // \u52a0\u8f7d\u6269\u5c55\uff08\u81ea\u5b9a\u4e49\uff09\u8bed\u8a00\u5305\n        $list = $this->app->config->get('lang.extend_list', []);\n\n        if (isset($list[$langset])) {\n            $this->load($list[$langset]);\n        }\n    }\n\n    /**\n     * \u52a0\u8f7d\u8bed\u8a00\u5b9a\u4e49(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\n     * @access public\n     * @param string|array $file  \u8bed\u8a00\u6587\u4ef6\n     * @param string       $range \u8bed\u8a00\u4f5c\u7528\u57df\n     * @return array\n     */\n    public function load($file, $range = ''): array\n    {\n        $range = $range ?: $this->range;\n        if (!isset($this->lang[$range])) {\n            $this->lang[$range] = [];\n        }\n\n        $lang = [];\n\n        foreach ((array) $file as $name) {\n            if (is_file($name)) {\n                $result = $this->parse($name);\n                $lang   = array_change_key_case($result) + $lang;\n            }\n        }\n\n        if (!empty($lang)) {\n            $this->lang[$range] = $lang + $this->lang[$range];\n        }\n\n        return $this->lang[$range];\n    }\n\n    /**\n     * \u89e3\u6790\u8bed\u8a00\u6587\u4ef6\n     * @access protected\n     * @param string $file \u8bed\u8a00\u6587\u4ef6\u540d\n     * @return array\n     */\n    protected function parse(string $file): array\n    {\n        $type = pathinfo($file, PATHINFO_EXTENSION);\n\n        switch ($type) {\n            case 'php':\n                $result = include $file;\n                break;\n            case 'yml':\n            case 'yaml':\n                if (function_exists('yaml_parse_file')) {\n                    $result = yaml_parse_file($file);\n                }\n                break;\n            case 'json':\n                $data = file_get_contents($file);\n\n                if (false !== $data) {\n                    $data = json_decode($data, true);\n\n                    if (json_last_error() === JSON_ERROR_NONE) {\n                        $result = $data;\n                    }\n                }\n\n                break;\n        }\n\n        return isset($result) && is_array($result) ? $result : [];\n    }\n\n    /**\n     * \u5224\u65ad\u662f\u5426\u5b58\u5728\u8bed\u8a00\u5b9a\u4e49(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\n     * @access public\n     * @param string|null $name  \u8bed\u8a00\u53d8\u91cf\n     * @param string      $range \u8bed\u8a00\u4f5c\u7528\u57df\n     * @return bool\n     */\n    public function has(string $name, string $range = ''): bool\n    {\n        $range = $range ?: $this->range;\n\n        if ($this->config['allow_group'] && strpos($name, '.')) {\n            [$name1, $name2] = explode('.', $name, 2);\n            return isset($this->lang[$range][strtolower($name1)][$name2]);\n        }\n\n        return isset($this->lang[$range][strtolower($name)]);\n    }\n\n    /**\n     * \u83b7\u53d6\u8bed\u8a00\u5b9a\u4e49(\u4e0d\u533a\u5206\u5927\u5c0f\u5199)\n     * @access public\n     * @param string|null $name  \u8bed\u8a00\u53d8\u91cf\n     * @param array       $vars  \u53d8\u91cf\u66ff\u6362\n     * @param string      $range \u8bed\u8a00\u4f5c\u7528\u57df\n     * @return mixed\n     */\n    public function get(string $name = null, array $vars = [], string $range = '')\n    {\n        $range = $range ?: $this->range;\n\n        if (!isset($this->lang[$range])) {\n            $this->switchLangSet($range);\n        }\n\n        // \u7a7a\u53c2\u6570\u8fd4\u56de\u6240\u6709\u5b9a\u4e49\n        if (is_null($name)) {\n            return $this->lang[$range] ?? [];\n        }\n\n        if ($this->config['allow_group'] && strpos($name, '.')) {\n            [$name1, $name2] = explode('.', $name, 2);\n\n            $value = $this->lang[$range][strtolower($name1)][$name2] ?? $name;\n        } else {\n            $value = $this->lang[$range][strtolower($name)] ?? $name;\n        }\n\n        // \u53d8\u91cf\u89e3\u6790\n        if (!empty($vars) && is_array($vars)) {\n            /**\n             * Notes:\n             * \u4e3a\u4e86\u68c0\u6d4b\u7684\u65b9\u4fbf\uff0c\u6570\u5b57\u7d22\u5f15\u7684\u5224\u65ad\u4ec5\u4ec5\u662f\u53c2\u6570\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684key\u4e3a\u6570\u5b570\n             * \u6570\u5b57\u7d22\u5f15\u91c7\u7528\u7684\u662f\u7cfb\u7edf\u7684 sprintf \u51fd\u6570\u66ff\u6362\uff0c\u7528\u6cd5\u8bf7\u53c2\u8003 sprintf \u51fd\u6570\n             */\n            if (key($vars) === 0) {\n                // \u6570\u5b57\u7d22\u5f15\u89e3\u6790\n                array_unshift($vars, $value);\n                $value = call_user_func_array('sprintf', $vars);\n            } else {\n                // \u5173\u8054\u7d22\u5f15\u89e3\u6790\n                $replace = array_keys($vars);\n                foreach ($replace as &$v) {\n                    $v = \"{:{$v}}\";\n                }\n                $value = str_replace($replace, $vars, $value);\n            }\n        }\n\n        return $value;\n    }\n\n}\n", "<?php\n// +----------------------------------------------------------------------\n// | ThinkPHP [ WE CAN DO IT JUST THINK ]\n// +----------------------------------------------------------------------\n// | Copyright (c) 2006~2021 http://thinkphp.cn All rights reserved.\n// +----------------------------------------------------------------------\n// | Licensed ( http://www.apache.org/licenses/LICENSE-2.0 )\n// +----------------------------------------------------------------------\n// | Author: liu21st <liu21st@gmail.com>\n// +----------------------------------------------------------------------\ndeclare (strict_types = 1);\n\nnamespace think\\middleware;\n\nuse Closure;\nuse think\\App;\nuse think\\Config;\nuse think\\Cookie;\nuse think\\Lang;\nuse think\\Request;\nuse think\\Response;\n\n/**\n * \u591a\u8bed\u8a00\u52a0\u8f7d\n */\nclass LoadLangPack\n{\n    protected $app;\n    protected $lang;\n    protected $config;\n\n    public function __construct(App $app, Lang $lang, Config $config)\n    {\n        $this->app    = $app;\n        $this->lang   = $lang;\n        $this->config = $lang->getConfig();\n    }\n\n    /**\n     * \u8def\u7531\u521d\u59cb\u5316\uff08\u8def\u7531\u89c4\u5219\u6ce8\u518c\uff09\n     * @access public\n     * @param Request $request\n     * @param Closure $next\n     * @return Response\n     */\n    public function handle($request, Closure $next)\n    {\n        // \u81ea\u52a8\u4fa6\u6d4b\u5f53\u524d\u8bed\u8a00\n        $langset = $this->detect($request);\n\n        if ($this->lang->defaultLangSet() != $langset) {\n            $this->lang->switchLangSet($langset);\n        }\n\n        $this->saveToCookie($this->app->cookie, $langset);\n\n        return $next($request);\n    }\n\n    /**\n     * \u81ea\u52a8\u4fa6\u6d4b\u8bbe\u7f6e\u83b7\u53d6\u8bed\u8a00\u9009\u62e9\n     * @access protected\n     * @param Request $request\n     * @return string\n     */\n    protected function detect(Request $request): string\n    {\n        // \u81ea\u52a8\u4fa6\u6d4b\u8bbe\u7f6e\u83b7\u53d6\u8bed\u8a00\u9009\u62e9\n        $langSet = '';\n\n        if ($request->get($this->config['detect_var'])) {\n            // url\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = $request->get($this->config['detect_var']);\n        } elseif ($request->header($this->config['header_var'])) {\n            // Header\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = $request->header($this->config['header_var']);\n        } elseif ($request->cookie($this->config['cookie_var'])) {\n            // Cookie\u4e2d\u8bbe\u7f6e\u4e86\u8bed\u8a00\u53d8\u91cf\n            $langSet = $request->cookie($this->config['cookie_var']);\n        } elseif ($request->server('HTTP_ACCEPT_LANGUAGE')) {\n            // \u81ea\u52a8\u4fa6\u6d4b\u6d4f\u89c8\u5668\u8bed\u8a00\n            $langSet = $request->server('HTTP_ACCEPT_LANGUAGE');\n        }\n\n        if (preg_match('/^([a-z\\d\\-]+)/i', $langSet, $matches)) {\n            $langSet = strtolower($matches[1]);\n            if (isset($this->config['accept_language'][$langSet])) {\n                $langSet = $this->config['accept_language'][$langSet];\n            }\n        }\n\n        if (empty($this->config['allow_lang_list']) || in_array($langSet, $this->config['allow_lang_list'])) {\n            // \u5408\u6cd5\u7684\u8bed\u8a00\n            $this->lang->setLangSet($langSet);\n        } else {\n            $langSet = $this->lang->getLangSet();\n        }\n\n        return $langSet;\n    }\n\n    /**\n     * \u4fdd\u5b58\u5f53\u524d\u8bed\u8a00\u5230Cookie\n     * @access protected\n     * @param Cookie $cookie Cookie\u5bf9\u8c61\n     * @param string $langSet \u8bed\u8a00\n     * @return void\n     */\n    protected function saveToCookie(Cookie $cookie, string $langSet)\n    {\n        if ($this->config['use_cookie']) {\n            $cookie->set($this->config['cookie_var'], $langSet);\n        }\n    }\n\n}\n"], "filenames": ["src/think/Lang.php", "src/think/middleware/LoadLangPack.php"], "buggy_code_start_loc": [290, 73], "buggy_code_end_loc": [344, 100], "fixing_code_start_loc": [289, 73], "fixing_code_end_loc": [289, 100], "type": "NVD-CWE-Other", "message": "ThinkPHP Framework before 6.0.14 allows local file inclusion via the lang parameter when the language pack feature is enabled (lang_switch_on=true). An unauthenticated and remote attacker can exploit this to execute arbitrary operating system commands, as demonstrated by including pearcmd.php.", "other": {"cve": {"id": "CVE-2022-47945", "sourceIdentifier": "cve@mitre.org", "published": "2022-12-23T21:15:09.203", "lastModified": "2022-12-30T22:15:31.740", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ThinkPHP Framework before 6.0.14 allows local file inclusion via the lang parameter when the language pack feature is enabled (lang_switch_on=true). An unauthenticated and remote attacker can exploit this to execute arbitrary operating system commands, as demonstrated by including pearcmd.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thinkphp:thinkphp:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.0.14", "matchCriteriaId": "0644DFF7-8EBC-4D6D-990F-31684DCB886B"}]}]}], "references": [{"url": "https://github.com/top-think/framework/commit/c4acb8b4001b98a0078eda25840d33e295a7f099", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/top-think/framework/compare/v6.0.13...v6.0.14", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://tttang.com/archive/1865/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/top-think/framework/commit/c4acb8b4001b98a0078eda25840d33e295a7f099"}}