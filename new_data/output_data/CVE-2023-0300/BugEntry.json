{"buggy_code": ["/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager;\n\nimport alfio.model.Audit;\nimport alfio.model.Ticket;\nimport alfio.model.group.Group;\nimport alfio.model.group.GroupMember;\nimport alfio.model.group.LinkedGroup;\nimport alfio.model.modification.GroupMemberModification;\nimport alfio.model.modification.GroupModification;\nimport alfio.model.modification.LinkedGroupModification;\nimport alfio.model.result.ErrorCode;\nimport alfio.model.result.Result;\nimport alfio.repository.AuditingRepository;\nimport alfio.repository.GroupRepository;\nimport alfio.repository.TicketRepository;\nimport ch.digitalfondue.npjt.AffectedRowCountAndKey;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.log4j.Log4j2;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.transaction.support.DefaultTransactionDefinition;\nimport org.springframework.transaction.support.TransactionTemplate;\n\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\nimport static alfio.model.group.LinkedGroup.MatchType.FULL;\nimport static alfio.model.group.LinkedGroup.Type.*;\nimport static java.util.Collections.singletonList;\n\n@Component\n@Log4j2\npublic class GroupManager {\n\n    private final GroupRepository groupRepository;\n    private final TicketRepository ticketRepository;\n    private final AuditingRepository auditingRepository;\n    private final TransactionTemplate requiresNewTransactionTemplate;\n\n    public GroupManager(GroupRepository groupRepository,\n                        TicketRepository ticketRepository,\n                        AuditingRepository auditingRepository,\n                        PlatformTransactionManager transactionManager) {\n        this.groupRepository = groupRepository;\n        this.ticketRepository = ticketRepository;\n        this.auditingRepository = auditingRepository;\n        this.requiresNewTransactionTemplate = new TransactionTemplate(transactionManager, new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRES_NEW));\n    }\n\n    public Result<Integer> createNew(GroupModification input) {\n        return requiresNewTransactionTemplate.execute(status -> {\n            Group wl = createNew(input.getName(), input.getDescription(), input.getOrganizationId());\n            Result<Integer> insertMembers = insertMembers(wl.getId(), input.getItems());\n            if(!insertMembers.isSuccess()) {\n                status.setRollbackOnly();\n            }\n            return insertMembers;\n        });\n    }\n\n    Group createNew(String name, String description, int organizationId) {\n        AffectedRowCountAndKey<Integer> insert = groupRepository.insert(name, description, organizationId);\n        return groupRepository.getById(insert.getKey());\n    }\n\n    @Transactional\n    public LinkedGroup createLink(int groupId,\n                                  int eventId,\n                                  LinkedGroupModification modification) {\n        Objects.requireNonNull(groupRepository.getById(groupId), \"Group not found\");\n        Validate.isTrue(modification.getType() != LIMITED_QUANTITY || modification.getMaxAllocation() != null, \"Missing max allocation\");\n        AffectedRowCountAndKey<Integer> configuration = groupRepository.createConfiguration(groupId, eventId,\n            modification.getTicketCategoryId(), modification.getType(), modification.getMatchType(), modification.getMaxAllocation());\n        return groupRepository.getConfiguration(configuration.getKey());\n    }\n\n    @Transactional\n    public LinkedGroup updateLink(int id, LinkedGroupModification modification) {\n        LinkedGroup original = groupRepository.getConfigurationForUpdate(id);\n        if(requiresCleanState(modification, original)) {\n            Validate.isTrue(groupRepository.countWhitelistedTicketsForConfiguration(original.getId()) == 0, \"Cannot update as there are already confirmed tickets.\");\n        }\n        groupRepository.updateConfiguration(id, modification.getGroupId(), original.getEventId(), modification.getTicketCategoryId(), modification.getType(), modification.getMatchType(), modification.getMaxAllocation());\n        return groupRepository.getConfiguration(id);\n    }\n\n    private boolean requiresCleanState(LinkedGroupModification modification, LinkedGroup original) {\n        return (original.getType() == UNLIMITED && modification.getType() != UNLIMITED)\n            || original.getGroupId() != modification.getGroupId()\n            || (modification.getType() == LIMITED_QUANTITY && modification.getMaxAllocation() != null && original.getMaxAllocation() != null && modification.getMaxAllocation().compareTo(original.getMaxAllocation()) < 0);\n    }\n\n    boolean isGroupLinked(int eventId, int categoryId) {\n        return CollectionUtils.isNotEmpty(findLinks(eventId, categoryId));\n    }\n\n    @Transactional(readOnly = true)\n    public List<Group> getAllActiveForOrganization(int organizationId) {\n        return groupRepository.getAllActiveForOrganization(organizationId);\n    }\n\n    @Transactional(readOnly = true)\n    public List<Group> getAllForOrganization(int organizationId) {\n        return groupRepository.getAllForOrganization(organizationId);\n    }\n\n    @Transactional\n    public Optional<GroupModification> loadComplete(int id) {\n        return groupRepository.getOptionalById(id)\n            .map(wl -> {\n                List<GroupMemberModification> items = groupRepository.getItems(wl.getId()).stream().map(i -> new GroupMemberModification(i.getId(), i.getValue(), i.getDescription())).collect(Collectors.toList());\n                return new GroupModification(wl.getId(), wl.getName(), wl.getDescription(), wl.getOrganizationId(), items);\n            });\n    }\n\n    @Transactional\n    public Optional<Group> findById(int groupId, int organizationId) {\n        return groupRepository.getOptionalById(groupId).filter(w -> w.getOrganizationId() == organizationId);\n    }\n\n    @Transactional\n    public boolean isAllowed(String value, int eventId, int categoryId) {\n\n        List<LinkedGroup> configurations = findLinks(eventId, categoryId);\n        if(CollectionUtils.isEmpty(configurations)) {\n            return true;\n        }\n        LinkedGroup configuration = configurations.get(0);\n        return getMatchingMember(configuration, value).isPresent();\n    }\n\n    @Transactional\n    public List<LinkedGroup> getLinksForEvent(int eventId) {\n        return groupRepository.findActiveConfigurationsForEvent(eventId);\n    }\n\n    @Transactional\n    public List<LinkedGroup> findLinks(int eventId, int categoryId) {\n        return groupRepository.findActiveConfigurationsFor(eventId, categoryId);\n    }\n\n    Result<Integer> insertMembers(int groupId, List<GroupMemberModification> members) {\n\n        Map<String, List<GroupMemberModification>> grouped = members.stream().collect(Collectors.groupingBy(GroupMemberModification::getValue));\n        List<String> duplicates = grouped.entrySet().stream().filter(e -> e.getValue().size() > 1).map(Map.Entry::getKey).collect(Collectors.toList());\n\n        return new Result.Builder<Integer>()\n            .checkPrecondition(duplicates::isEmpty, ErrorCode.lazy(() -> ErrorCode.custom(\"value.duplicate\", duplicates.stream().limit(10).collect(Collectors.joining(\", \")))))\n            .build(() -> Arrays.stream(groupRepository.insert(groupId, members)).sum());\n    }\n\n    @Transactional\n    public boolean acquireMemberForTicket(Ticket ticket) {\n        List<LinkedGroup> configurations = findLinks(ticket.getEventId(), ticket.getCategoryId());\n        if(CollectionUtils.isEmpty(configurations)) {\n            return true;\n        }\n        LinkedGroup configuration = configurations.get(0);\n        Optional<GroupMember> optionalItem = getMatchingMember(configuration, ticket.getEmail());\n        if(optionalItem.isEmpty()) {\n            return false;\n        }\n        GroupMember item = optionalItem.get();\n        boolean preventDuplication = configuration.getType() == ONCE_PER_VALUE;\n        boolean limitAssignments = preventDuplication || configuration.getType() == LIMITED_QUANTITY;\n        if(limitAssignments) {\n            //reload and lock configuration\n            configuration = groupRepository.getConfigurationForUpdate(configuration.getId());\n            int existing = groupRepository.countExistingWhitelistedTickets(item.getId(), configuration.getId());\n            int expected = preventDuplication ? 1 : Optional.ofNullable(configuration.getMaxAllocation()).orElse(0);\n            if(existing >= expected) {\n                return false;\n            }\n        }\n        groupRepository.insertWhitelistedTicket(item.getId(), configuration.getId(), ticket.getId(), preventDuplication ? Boolean.TRUE : null);\n        Map<String, Object> modifications = new HashMap<>();\n        modifications.put(\"itemId\", item.getId());\n        modifications.put(\"configurationId\", configuration.getId());\n        modifications.put(\"ticketId\", ticket.getId());\n        auditingRepository.insert(ticket.getTicketsReservationId(), null, ticket.getEventId(), Audit.EventType.GROUP_MEMBER_ACQUIRED, new Date(), Audit.EntityType.TICKET, String.valueOf(ticket.getId()), singletonList(modifications));\n        return true;\n    }\n\n    private Optional<GroupMember> getMatchingMember(LinkedGroup configuration, String email) {\n        String trimmed = StringUtils.trimToEmpty(email);\n        Optional<GroupMember> exactMatch = groupRepository.findItemByValueExactMatch(configuration.getGroupId(), trimmed);\n        if(exactMatch.isPresent() || configuration.getMatchType() == FULL) {\n            return exactMatch;\n        }\n        String partial = StringUtils.substringAfterLast(trimmed, \"@\");\n        return partial.length() > 0 ? groupRepository.findItemEndsWith(configuration.getId(), configuration.getGroupId(), \"%@\"+partial) : Optional.empty();\n    }\n\n    @Transactional\n    public void deleteWhitelistedTicketsForReservation(String reservationId) {\n        List<Integer> tickets = ticketRepository.findTicketsInReservation(reservationId).stream().map(Ticket::getId).collect(Collectors.toList());\n        if(!tickets.isEmpty()) {\n            int result = groupRepository.deleteExistingWhitelistedTickets(tickets);\n            log.trace(\"deleted {} whitelisted tickets for reservation {}\", result, reservationId);\n        }\n    }\n\n    @Transactional\n    public void disableLink(int linkId) {\n        Validate.isTrue(groupRepository.disableLink(linkId) == 1, \"Error while disabling link\");\n    }\n\n    @Transactional\n    public Optional<GroupModification> update(int listId, GroupModification modification) {\n\n        if(groupRepository.getOptionalById(listId).isEmpty() || CollectionUtils.isEmpty(modification.getItems())) {\n            return Optional.empty();\n        }\n\n        List<String> existingValues = groupRepository.getAllValuesIncludingNotActive(listId);\n        List<GroupMemberModification> notPresent = modification.getItems().stream()\n            .filter(i -> i.getId() == null && !existingValues.contains(i.getValue().strip().toLowerCase()))\n            .distinct()\n            .collect(Collectors.toList());\n\n        if(!notPresent.isEmpty()) {\n            var insertResult = insertMembers(listId, notPresent);\n            if(!insertResult.isSuccess()) {\n                var error = Objects.requireNonNull(insertResult.getFirstErrorOrNull());\n                throw new DuplicateGroupItemException(error.getDescription());\n            }\n        }\n        groupRepository.update(listId, modification.getName(), modification.getDescription());\n        return loadComplete(listId);\n    }\n\n    @Transactional\n    public boolean deactivateMembers(List<Integer> memberIds, int groupId) {\n        if(memberIds.isEmpty()) {\n            return false;\n        }\n        groupRepository.deactivateGroupMember(memberIds, groupId);\n        return true;\n    }\n\n    @Transactional\n    public boolean deactivateGroup(int groupId) {\n        List<Integer> members = groupRepository.getItems(groupId).stream().map(GroupMember::getId).collect(Collectors.toList());\n        if(!members.isEmpty()) {\n            Validate.isTrue(deactivateMembers(members, groupId), \"error while disabling group members\");\n        }\n        groupRepository.disableAllLinks(groupId);\n        Validate.isTrue(groupRepository.deactivateGroup(groupId) == 1, \"unexpected error while disabling group\");\n        return true;\n    }\n\n    @RequiredArgsConstructor\n    public static class WhitelistValidator implements Predicate<WhitelistValidationItem> {\n\n        private final int eventId;\n        private final GroupManager groupManager;\n\n        @Override\n        public boolean test(WhitelistValidationItem item) {\n            return groupManager.isAllowed(item.value, eventId, item.categoryId);\n        }\n    }\n\n    @RequiredArgsConstructor\n    public static class WhitelistValidationItem {\n        private final int categoryId;\n        private final String value;\n    }\n\n    public static class DuplicateGroupItemException extends RuntimeException {\n        public DuplicateGroupItemException(String message) {\n            super(message);\n        }\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.repository;\n\nimport alfio.model.group.Group;\nimport alfio.model.group.GroupMember;\nimport alfio.model.group.LinkedGroup;\nimport alfio.model.modification.GroupMemberModification;\nimport ch.digitalfondue.npjt.*;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@QueryRepository\npublic interface GroupRepository {\n\n    String BY_EVENT_ID = \"select * from group_link_active where event_id_fk = :eventId\";\n\n    @Query(\"insert into a_group(name, description, organization_id_fk) values(:name, :description, :orgId)\")\n    @AutoGeneratedKey(\"id\")\n    AffectedRowCountAndKey<Integer> insert(@Bind(\"name\") String name,\n                                           @Bind(\"description\") String description,\n                                           @Bind(\"orgId\") int organizationId);\n\n    @Query(\"select * from group_active where id = :id\")\n    Group getById(@Bind(\"id\") int id);\n\n    @Query(\"update a_group set name = :name, description = :description where id = :id\")\n    int update(@Bind(\"id\") int id, @Bind(\"name\") String name, @Bind(\"description\") String description);\n\n    @Query(\"select * from group_active where id = :id\")\n    Optional<Group> getOptionalById(@Bind(\"id\") int id);\n\n    @Query(\"select * from group_active where organization_id_fk = :organizationId order by name, description\")\n    List<Group> getAllActiveForOrganization(@Bind(\"organizationId\") int organizationId);\n\n    @Query(\"select * from a_group where organization_id_fk = :organizationId order by name, description\")\n    List<Group> getAllForOrganization(@Bind(\"organizationId\") int organizationId);\n\n    @Query(\"insert into group_link(a_group_id_fk, event_id_fk, ticket_category_id_fk, type, match_type, max_allocation)\" +\n        \" values(:groupId, :eventId, :ticketCategoryId, :type, :matchType, :maxAllocation)\")\n    @AutoGeneratedKey(\"id\")\n    AffectedRowCountAndKey<Integer> createConfiguration(@Bind(\"groupId\") int groupId,\n                                                        @Bind(\"eventId\") int eventId,\n                                                        @Bind(\"ticketCategoryId\") Integer ticketCategoryId,\n                                                        @Bind(\"type\") LinkedGroup.Type type,\n                                                        @Bind(\"matchType\") LinkedGroup.MatchType matchType,\n                                                        @Bind(\"maxAllocation\") Integer maxAllocation);\n\n    default int[] insert(int groupId, List<GroupMemberModification> members) {\n        MapSqlParameterSource[] params = members.stream()\n            .map(i -> new MapSqlParameterSource(\"groupId\", groupId).addValue(\"value\", i.getValue().toLowerCase()).addValue(\"description\", i.getDescription()))\n            .toArray(MapSqlParameterSource[]::new);\n\n        return getNamedParameterJdbcTemplate().batchUpdate(\"insert into group_member(a_group_id_fk, value, description) values(:groupId, :value, :description)\", params);\n    }\n\n    NamedParameterJdbcTemplate getNamedParameterJdbcTemplate();\n\n    @Query(\"select * from group_member_active where a_group_id_fk = :groupId order by value\")\n    List<GroupMember> getItems(@Bind(\"groupId\") int groupId);\n\n    @Query(\"select value from group_member where a_group_id_fk = :groupId order by value\")\n    List<String> getAllValuesIncludingNotActive(@Bind(\"groupId\") int groupId);\n\n    @Query(\"insert into whitelisted_ticket(group_member_id_fk, group_link_id_fk, ticket_id_fk, requires_unique_value)\" +\n        \" values(:itemId, :configurationId, :ticketId, :requiresUniqueValue)\")\n    int insertWhitelistedTicket(@Bind(\"itemId\") int itemId, @Bind(\"configurationId\") int configurationId, @Bind(\"ticketId\") int ticketId, @Bind(\"requiresUniqueValue\") Boolean requiresUniqueValue);\n\n    @Query(BY_EVENT_ID +\n        \" and ticket_category_id_fk = :categoryId\" +\n        \" union all select * from group_link_active where event_id_fk = :eventId and ticket_category_id_fk is null\")\n    List<LinkedGroup> findActiveConfigurationsFor(@Bind(\"eventId\") int eventId, @Bind(\"categoryId\") int categoryId);\n\n    @Query(BY_EVENT_ID)\n    List<LinkedGroup> findActiveConfigurationsForEvent(@Bind(\"eventId\") int eventId);\n\n    @Query(\"select count(*) from group_link_active where event_id_fk = :eventId\")\n    Integer countByEventId(@Bind(\"eventId\") int eventId);\n\n    @Query(\"select * from group_link_active where id = :configurationId\")\n    LinkedGroup getConfiguration(@Bind(\"configurationId\") int configurationId);\n\n    @Query(\"select * from group_link where id = :configurationId for update\")\n    LinkedGroup getConfigurationForUpdate(@Bind(\"configurationId\") int configurationId);\n\n    @Query(\"select count(*) from whitelisted_ticket where group_link_id_fk = :configurationId\")\n    int countWhitelistedTicketsForConfiguration(@Bind(\"configurationId\") int configurationId);\n\n    @Query(\"update group_link set a_group_id_fk = :groupId, event_id_fk = :eventId, ticket_category_id_fk = :categoryId, type = :type, match_type = :matchType, max_allocation = :maxAllocation where id = :id\")\n    int updateConfiguration(@Bind(\"id\") int configurationId,\n                            @Bind(\"groupId\") int groupId,\n                            @Bind(\"eventId\") int eventId,\n                            @Bind(\"categoryId\") Integer categoryId,\n                            @Bind(\"type\") LinkedGroup.Type type,\n                            @Bind(\"matchType\") LinkedGroup.MatchType matchType,\n                            @Bind(\"maxAllocation\") Integer maxAllocation);\n\n    @Query(\"update group_link set active = false where id = :id\")\n    int disableLink(@Bind(\"id\") int id);\n\n    @Query(\"update group_link set active = false where a_group_id_fk = :groupId\")\n    int disableAllLinks(@Bind(\"groupId\") int groupId);\n\n    @Query(\"select * from group_member_active wi where wi.a_group_id_fk = :groupId and lower(wi.value) = lower(:value)\")\n    Optional<GroupMember> findItemByValueExactMatch(@Bind(\"groupId\") int groupId, @Bind(\"value\") String value);\n\n    @Query(\"select * from group_member_active wi where wi.a_group_id_fk = :groupId and lower(wi.value) like lower(:value) limit 1\")\n    Optional<GroupMember> findItemEndsWith(@Bind(\"configurationId\") int configurationId,\n                                           @Bind(\"groupId\") int groupId,\n                                           @Bind(\"value\") String value);\n\n    @Query(\"select count(*) from whitelisted_ticket where group_member_id_fk = :itemId and group_link_id_fk = :configurationId\")\n    int countExistingWhitelistedTickets(@Bind(\"itemId\") int itemId,\n                                        @Bind(\"configurationId\") int configurationId);\n\n    @Query(\"delete from whitelisted_ticket where ticket_id_fk in (:ticketIds)\")\n    int deleteExistingWhitelistedTickets(@Bind(\"ticketIds\") List<Integer> ticketIds);\n\n    default void deactivateGroupMember(List<Integer> memberIds, int groupId) {\n        MapSqlParameterSource[] params = memberIds.stream().map(memberId ->\n                new MapSqlParameterSource(\"groupId\", groupId)\n                    .addValue(\"memberId\", memberId)\n                    .addValue(\"disabledPlaceholder\", UUID.randomUUID().toString())\n            ).toArray(MapSqlParameterSource[]::new);\n        getNamedParameterJdbcTemplate().batchUpdate(\"update group_member set active = false, value = 'DISABLED-' || :disabledPlaceholder where id = :memberId and a_group_id_fk = :groupId\", params);\n    }\n\n\n    @Query(\"update a_group set active = false where id = :groupId\")\n    int deactivateGroup(@Bind(\"groupId\") int groupId);\n}\n", "(function () {\n    \"use strict\";\n    var baseServices = angular.module('adminServices', ['angular-growl' , 'ngAnimate']);\n\n    baseServices.config(['$httpProvider', function($httpProvider) {\n        var token = $(\"meta[name='_csrf']\").attr(\"content\");\n        var header = $(\"meta[name='_csrf_header']\").attr(\"content\");\n        $httpProvider.defaults.headers.post['X-Requested-With'] = 'XMLHttpRequest';\n        $httpProvider.defaults.headers.post[header] = token;\n\n        $httpProvider.defaults.headers.patch = angular.copy($httpProvider.defaults.headers.post);\n        $httpProvider.defaults.headers.put = angular.copy($httpProvider.defaults.headers.post);\n        $httpProvider.defaults.headers.delete = angular.copy($httpProvider.defaults.headers.post);\n\n        $httpProvider.interceptors.push(['$rootScope', '$location', '$q', function($rootScope, $location, $q) {\n            return {\n                responseError: function(rejection) {//thanks to https://github.com/witoldsz/angular-http-auth/blob/master/src/http-auth-interceptor.js\n                    var status = rejection.status;\n                    if(status === 401) {\n                        $rootScope.$emit('ErrorNotLoggedIn');\n                        return false;\n                    }\n                    return $q.reject(rejection);\n                }\n            };\n        }]);\n    }]);\n\n    baseServices.service('PaymentProxyService', function($http, HttpErrorHandler) {\n        return {\n            getAllProxies : function(orgId) {\n                return $http.get('/admin/api/paymentProxies/'+orgId).error(HttpErrorHandler.handle);\n            }\n        };\n    });\n\n    baseServices.service('PurchaseContextService', function(EventService, SubscriptionService) {\n        return {\n            findAllReservations: function(type, contextName, page, search, status) {\n                if(type === 'event') {\n                    return EventService.findAllReservations(contextName, page, search, status);\n                } else {\n                    return SubscriptionService.findAllReservations(contextName, page, search, status);\n                }\n            }\n        };\n    })\n\n    baseServices.service('EventService', function($http, HttpErrorHandler, $uibModal, $window, $rootScope, $q, LocationService, $timeout) {\n\n        function copyGeoLocation(event) {\n            event.latitude = event.geolocation.latitude;\n            event.longitude = event.geolocation.longitude;\n            event.zoneId = event.geolocation.timeZone;\n        }\n\n        var service = {\n            data: {},\n            getAllEvents : function() {\n                return $http.get('/admin/api/events').error(HttpErrorHandler.handle);\n            },\n            getAllActiveEvents : function() {\n                return $http.get('/admin/api/active-events').error(HttpErrorHandler.handle);\n            },\n            getAllExpiredEvents : function() {\n                return $http.get('/admin/api/expired-events').error(HttpErrorHandler.handle);\n            },\n            getEvent: function(name) {\n                return $http.get('/admin/api/events/'+name).success(function(result) {\n                    $rootScope.$emit('EventLoaded', result.event);\n                }).error(HttpErrorHandler.handle);\n            },\n            getEventById: function(eventId) {\n                return $http.get('/admin/api/events/id/'+eventId).success(function(result) {\n                    $rootScope.$emit('EventLoaded', result);\n                }).error(HttpErrorHandler.handle);\n            },\n            checkEvent : function(event) {\n                return $http['post']('/admin/api/events/check', event).error(HttpErrorHandler.handle);\n            },\n            createEvent : function(event) {\n                copyGeoLocation(event);\n                return $http['post']('/admin/api/events/new', event).error(HttpErrorHandler.handle);\n            },\n            toggleActivation: function(id, active) {\n                return $http['put']('/admin/api/events/'+id+'/status?active='+active).error(HttpErrorHandler.handle);\n            },\n            updateEventHeader: function(eventHeader) {\n                var update = function() {\n                    return $http['post']('/admin/api/events/'+eventHeader.id+'/header/update', eventHeader).error(HttpErrorHandler.handle);\n                };\n                if(eventHeader.format === 'ONLINE') {\n                    return update();\n                }\n                //\n                if(eventHeader.geolocation && eventHeader.geolocation.latitude) {\n                    copyGeoLocation(eventHeader);\n                    //\n                    return update();\n                } else {\n                    return LocationService.clientGeolocate(eventHeader.location).then(function(geo) {\n                        eventHeader.latitude = geo.latitude;\n                        eventHeader.longitude = geo.longitude;\n                        eventHeader.zoneId = geo.timeZone;\n                        return update();\n                    })\n                }\n\n            },\n            getTicketsForCategory: function(event, ticketCategory, page, search) {\n              return $http.get('/admin/api/events/'+event.shortName+'/category/'+ticketCategory.id+'/ticket', {params: {page: page, search: search}}).error(HttpErrorHandler.handle);\n            },\n            updateEventPrices: function(eventPrices) {\n                return $http['post']('/admin/api/events/'+eventPrices.id+'/prices/update', eventPrices).error(HttpErrorHandler.handle);\n            },\n            saveTicketCategory: function(event, ticketCategory) {\n                var url = angular.isDefined(ticketCategory.id) ? ('/admin/api/events/' + event.id + '/categories/' + ticketCategory.id + '/update') : ('/admin/api/events/' + event.id + '/categories/new');\n                return $http['post'](url, ticketCategory).error(HttpErrorHandler.handle);\n            },\n            toggleTicketLocking: function(event, ticket, category) {\n                return $http['put']('/admin/api/events/' + event.shortName + '/categories/' + category.id + '/tickets/' + ticket.id +'/toggle-locking');\n            },\n            reallocateOrphans : function(srcCategory, targetCategoryId, eventId) {\n                return $http['put']('/admin/api/events/reallocate', {\n                    srcCategoryId: srcCategory.id,\n                    targetCategoryId: targetCategoryId,\n                    eventId: eventId\n                }).error(HttpErrorHandler.handle);\n            },\n            deleteCategory: function(category, event) {\n\n                var modal = $uibModal.open({\n                    size:'md',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/delete-category-modal.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.cancel = function() {\n                            modal.dismiss('canceled');\n                        };\n\n                        $scope.deleteCategory = function() {\n                            $http['delete']('/admin/api/events/'+event.shortName+'/category/'+category.id)\n                                .error(HttpErrorHandler.handle)\n                                .then(function() {\n                                    modal.close('OK');\n                                });\n                        };\n                        $scope.category = category;\n                    }\n                });\n                return modal.result;\n            },\n            unbindTickets: function(event, category) {\n                return $http['put']('/admin/api/events/'+event.shortName+'/category/'+category.id+'/unbind-tickets').error(HttpErrorHandler.handle);\n            },\n            getPendingPayments: function(eventName, forceReload) {\n                service.data.pendingPayments = service.data.pendingPayments || {};\n                var element = service.data.pendingPayments[eventName];\n                var now = moment();\n                if(!angular.isDefined(element) || now.subtract(20, 's').isAfter(element.ts) || forceReload) {\n                    var promise = $http.get('/admin/api/events/'+eventName+'/pending-payments').error(HttpErrorHandler.handle);\n                    element = {\n                        ts: moment(),\n                        payments: promise\n                    };\n                    service.data.pendingPayments[eventName] = element;\n                }\n                return element.payments;\n            },\n            getPendingPaymentsCount: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/pending-payments-count').error(HttpErrorHandler.handle).then(function(res) {var v = parseInt(res.data); return isNaN(v) ? 0 : v; });\n            },\n            registerPayment: function(eventName, reservationId) {\n                return $http['post']('/admin/api/events/'+eventName+'/pending-payments/'+reservationId+'/confirm').error(HttpErrorHandler.handle);\n            },\n            cancelPayment: function(eventName, reservationId, credit, notify) {\n                return $http['delete']('/admin/api/events/'+eventName+'/pending-payments/'+reservationId, {\n                    params: {\n                        credit: credit,\n                        notify: notify\n                    }\n                }).error(HttpErrorHandler.handle);\n            },\n            cancelMatchingPayment: function(eventName, reservationId, transactionId) {\n                return $http['delete']('/admin/api/events/'+eventName+'/reservation/'+reservationId+'/transaction/'+transactionId+'/discard').error(HttpErrorHandler.handle);\n            },\n            sendCodesByEmail: function(eventName, categoryId, pairs) {\n                return $http['post']('/admin/api/events/'+eventName+'/categories/'+categoryId+'/send-codes', pairs).error(HttpErrorHandler.handle);\n            },\n            loadSentCodes: function(eventName, categoryId) {\n                return $http['get']('/admin/api/events/'+eventName+'/categories/'+categoryId+'/sent-codes').error(HttpErrorHandler.handle);\n            },\n            deleteRecipientData: function(eventName, categoryId, codeId) {\n                return $http['delete']('/admin/api/events/'+eventName+'/categories/'+categoryId+'/codes/'+codeId+'/recipient').error(HttpErrorHandler.handle);\n            },\n            getSelectedLanguages: function(eventName) {\n                return $http['get']('/admin/api/events/'+eventName+'/languages').error(HttpErrorHandler.handle);\n            },\n            getAllLanguages: function() {\n                return $http['get']('/admin/api/events-all-languages').error(HttpErrorHandler.handle);\n            },\n            getSupportedLanguages: function() {\n                return $http['get']('/admin/api/events-supported-languages').error(HttpErrorHandler.handle);\n            },\n            getDynamicFieldTemplates: function() {\n                return $http['get']('/admin/api/event/additional-field/templates').error(HttpErrorHandler.handle);\n            },\n            getMessagesPreview: function(eventName, categoryId, messages) {\n                var queryString = angular.isNumber(categoryId) ? '?categoryId='+categoryId : '';\n                return $http['post']('/admin/api/events/'+eventName+'/messages/preview'+queryString, messages).error(HttpErrorHandler.handle);\n            },\n            sendMessages: function(eventName, categoryId, messages) {\n                var queryString = angular.isDefined(categoryId) && categoryId !== \"\" && categoryId !== null ? '?categoryId='+categoryId : '';\n                return $http['post']('/admin/api/events/'+eventName+'/messages/send'+queryString, messages).error(HttpErrorHandler.handle);\n            },\n            getFields : function(eventName) {\n                return $http['get']('/admin/api/events/'+eventName+'/fields');\n            },\n            getAdditionalFields: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/additional-field').error(HttpErrorHandler.handle);\n            },\n            getRestrictedValuesStats: function(eventName, id) {\n                return $http.get('/admin/api/events/'+eventName+'/additional-field/'+id+'/stats').error(HttpErrorHandler.handle);\n            },\n            saveFieldDescription: function(eventName, fieldDescription) {\n                return $http.post('/admin/api/events/'+eventName+'/additional-field/descriptions', fieldDescription);\n            },\n            addField: function(eventName, field) {\n            \treturn $http.post('/admin/api/events/'+eventName+'/additional-field/new', field).error(HttpErrorHandler.handle);\n            },\n            updateField: function(eventName, toUpdate) {\n\n                //new restrictedValues are complex objects, already present restrictedValues are plain string\n                if(toUpdate && toUpdate.restrictedValues && toUpdate.restrictedValues.length > 0) {\n                    var res = [];\n                    for(var i = 0; i < toUpdate.restrictedValues.length; i++) {\n                        res.push(toUpdate.restrictedValues[i].isNew ? toUpdate.restrictedValues[i].value: toUpdate.restrictedValues[i]);\n                    }\n                    toUpdate.restrictedValues = res;\n                }\n                //\n\n                return $http['post']('/admin/api/events/'+eventName+'/additional-field/'+toUpdate.id, toUpdate);\n            },\n            deleteField: function(eventName, id) {\n            \treturn $http['delete']('/admin/api/events/'+eventName+'/additional-field/'+id);\n            },\n            swapFieldPosition: function(eventName, id1, id2) {\n            \treturn $http.post('/admin/api/events/'+eventName+'/additional-field/swap-position/'+id1+'/'+id2, null);\n            },\n            moveField: function(eventName, id, position) {\n                return $http.post('/admin/api/events/'+eventName+'/additional-field/set-position/'+id, null, {\n                    params: {\n                        newPosition: position\n                    }\n                });\n            },\n            getAllReservationStatus : function(eventName) {\n                return $http.get('/admin/api/reservation/event/'+eventName+'/reservations/all-status');\n            },\n            findAllReservations: function(eventName, page, search, status) {\n                return $http.get('/admin/api/reservation/event/'+eventName+'/reservations/list', {params: {page: page, search: search, status: status}});\n            },\n            deleteEvent: function(event) {\n                var modal = $uibModal.open({\n                    size:'lg',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/delete-event-modal.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.cancel = function() {\n                            modal.dismiss('canceled');\n                        };\n\n                        $scope.deleteEvent = function() {\n                            $http['delete']('/admin/api/events/'+event.id).then(function() {\n                                modal.close('OK');\n                            });\n                        };\n                        $scope.event = event;\n                    }\n                });\n                return modal.result;\n            },\n\n            exportAttendees: function(event) {\n                var modal = $uibModal.open({\n                    size:'lg',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/select-field-modal.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.selected = {};\n                        $scope.format = 'excel';\n                        service.getFields(event.shortName).then(function(fields) {\n                            $scope.fields = fields.data;\n                            angular.forEach(fields.data, function(v) {\n                                $scope.selected[v.key] = false;\n                            })\n                        });\n\n                        $scope.selectAll = function() {\n                            angular.forEach($scope.selected, function(v,k) {\n                                $scope.selected[k] = true;\n                            });\n                        };\n\n                        $scope.deselectAll = function() {\n                            angular.forEach($scope.selected, function(v,k) {\n                                $scope.selected[k] = false;\n                            });\n                        };\n\n                        $scope.download = function() {\n                            var queryString = \"format=\"+$scope.format+\"&\";\n                            angular.forEach($scope.selected, function(v,k) {\n                                if(v) {\n                                    queryString+=\"fields=\"+k+\"&\";\n                                }\n                            });\n                            var pathName = $window.location.pathname;\n                            if(!pathName.endsWith(\"/\")) {\n                                pathName = pathName + \"/\";\n                            }\n                            $window.open(pathName+\"api/events/\"+event.shortName+\"/export?\"+queryString);\n                        };\n                    }\n                });\n            },\n            removeTicketModal: function(event, reservationId, ticketId, invoiceRequested) {\n                var deferred = $q.defer();\n                var promise = deferred.promise;\n\n                var modal = $uibModal.open({\n                    size:'lg',\n                    template:'<tickets-remove event=\"event\" can-generate-credit-note=\"invoiceRequested\" reservation-id=\"reservationId\" ticket-id=\"ticketId\" on-success=\"success(result)\" on-cancel=\"close()\"></tickets-remove>',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.event = event;\n                        $scope.ticketId = ticketId;\n                        $scope.reservationId = reservationId;\n                        $scope.invoiceRequested = invoiceRequested;\n                        $scope.close = function() {\n                            $scope.$dismiss(false);\n                        };\n\n                        $scope.success = function (result) {\n                            $scope.$close(result);\n                        }\n                    }\n                });\n                return modal.result;\n            },\n\n            removeTickets: function(eventName, reservationId, ticketIds, ticketIdsToRefund, notify, issueCreditNote) {\n                return $http.post('/admin/api/reservation/event/'+eventName+'/'+reservationId+'/remove-tickets', {\n                    ticketIds: ticketIds,\n                    refundTo: ticketIdsToRefund,\n                    notify : notify,\n                    issueCreditNote: issueCreditNote\n                });\n            },\n\n            countInvoices: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/invoices/count').error(HttpErrorHandler.handle);\n            },\n\n            getTicketsStatistics: function(eventName, from, to) {\n                return $http.get('/admin/api/events/'+eventName+'/ticket-sold-statistics', {params: {from: from, to: to}});\n            },\n\n            rearrangeCategories: function(event) {\n                var modal = $uibModal.open({\n                    size:'lg',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/rearrange-categories.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        var ctrl = this;\n                        ctrl.event = event;\n                        var setOrdinal = function(categories) {\n                            for(var i=0, o=1; i < categories.length; i++, o++) {\n                                var category = categories[i];\n                                category.ordinal = o;\n                            }\n                            return categories;\n                        };\n                        ctrl.categories = event.ticketCategories.map(function(category) {\n                            return {\n                                id: category.id,\n                                name: category.name,\n                                ordinal: category.ordinal\n                            };\n                        });\n                        ctrl.sortedCategories = setOrdinal(_.sortByAll(ctrl.categories, ['ordinal', 'formattedInception', 'id']));\n                        $scope.$on('categories-bag.drop', function (e, el) {\n                            $timeout(function() {\n                                ctrl.sortedCategories = setOrdinal(ctrl.sortedCategories);\n                            }, 10);\n                        });\n                        ctrl.swap = function(index, category, up) {\n                            var list = ctrl.sortedCategories.slice();\n                            var target = up ? index - 1 : index + 1;\n                            var toBeSwapped = list[target];\n                            list[target] = category;\n                            list[index] = toBeSwapped;\n                            ctrl.sortedCategories.length = 0;\n                            for(var i=0; i<list.length; i++) {\n                                ctrl.sortedCategories.push(list[i]);\n                            }\n                            setOrdinal(ctrl.sortedCategories);\n                        };\n                        ctrl.save = function() {\n                            $scope.$close(ctrl.sortedCategories);\n                        };\n                        ctrl.dismiss = function() {\n                            $scope.$dismiss(false);\n                        }\n\n                    },\n                    controllerAs:'$ctrl'\n                });\n                return modal.result.then(function(categories) {\n                    return $http.put('/admin/api/events/'+event.shortName+'/rearrange-categories', categories).error(HttpErrorHandler.handle);\n                });\n            },\n\n            createAdditionalService: function(eventId, additionalService) {\n                return $http.post('/admin/api/event/'+eventId+'/additional-services/', additionalService).error(HttpErrorHandler.handle);\n            },\n\n            updateEventMetadata: function(eventName, metadata) {\n                return $http.put('/admin/api/events/'+eventName+'/metadata', metadata).error(HttpErrorHandler.handle);\n            },\n            retrieveMetadata: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/metadata').error(HttpErrorHandler.handle);\n            },\n\n            updateCategoryMetadata: function(eventName, categoryId, metadata) {\n                return $http.put('/admin/api/events/'+eventName+'/category/'+categoryId+'/metadata', metadata).error(HttpErrorHandler.handle);\n            },\n            retrieveCategoryMetadata: function(eventName, categoryId) {\n                return $http.get('/admin/api/events/'+eventName+'/category/'+categoryId+'/metadata').error(HttpErrorHandler.handle);\n            },\n            executeCapability: function(eventName, capability, parameters) {\n                return $http.post('/admin/api/events/'+eventName+'/capability/'+capability, parameters);\n            }\n        };\n        return service;\n    });\n\n    baseServices.service(\"LocationService\", function($http, $q, HttpErrorHandler) {\n\n        var reqCounter = 0;\n\n        function getMapUrl(latitude, longitude) {\n            return $http.get('/admin/api/location/static-map-image', {params: {lat: latitude, lng: longitude}}).then(function(res) {\n                return res.data;\n            });\n        }\n\n\n        function handleGoogleGeolocate(location, locService, apiKeyAndProvider, resolve, reject) {\n            var key = apiKeyAndProvider.keys['MAPS_CLIENT_API_KEY'];\n\n            var keyParam = key ? ('&key='+encodeURIComponent(key)) : '';\n\n            if(!window.google || !window.google.maps) {\n\n                reqCounter++;\n\n                var script = document.createElement('script');\n\n                var callBackName = 'clientGeolocate'+reqCounter;\n\n                script.src = 'https://maps.googleapis.com/maps/api/js?libraries=places&callback='+callBackName+keyParam;\n                document.head.appendChild(script);\n                window[callBackName] = function() {\n                    search();\n                }\n            } else {\n                search();\n            }\n\n            function search() {\n                var geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({'address': location}, function(results, status) {\n                    if (status === 'OK') {\n                        var ret = {};\n                        ret.latitude = \"\"+results[0].geometry.location.lat()\n                        ret.longitude = \"\"+results[0].geometry.location.lng()\n                        $q.all([getMapUrl(ret.latitude, ret.longitude), locService.getTimezone(ret.latitude, ret.longitude)]).then(function(success) {\n                            ret.mapUrl = success[0];\n                            var tz = success[1];\n                            if(tz.data) {\n                                ret.timeZone = tz.data;\n                            }\n                            resolve(ret);\n                        }, function () {\n                            reject();\n                        })\n\n                    } else {\n                        reject();\n                    }\n                });\n            }\n        }\n\n        \n        function handleHEREGeolocate(location, locService, apiKeyAndProvider, resolve, reject) {\n            var apiKey = apiKeyAndProvider.keys['MAPS_HERE_API_KEY'];\n            $http.get('https://geocoder.ls.hereapi.com/6.2/geocode.json', {params: {apiKey: apiKey, searchtext: location}}).then(function(res) {\n                var view = res.data.Response.View;\n                if(view.length > 0 && view[0].Result.length > 0 && view[0].Result[0].Location) {\n                    var location = view[0].Result[0].Location;\n                    var pos = location.DisplayPosition;\n                    var ret = {latitude: pos.Latitude, longitude: pos.Longitude};\n\n                    $q.all([getMapUrl(ret.latitude, ret.longitude), locService.getTimezone(ret.latitude, ret.longitude)]).then(function(success) {\n                        ret.mapUrl = success[0];\n                        var tz = success[1];\n                        if(tz.data) {\n                            ret.timeZone = tz.data;\n                        }\n                        resolve(ret);\n                    }, function () {\n                        reject();\n                    })\n                } else {\n                    reject();\n                }\n\n            }, function () {\n                reject();\n            })\n        }\n\n        return {\n            mapApiKey: function() {\n                return $http.get('/admin/api/location/map-provider-client-api-key').then(function(res) {\n                    return res.data;\n                });\n            },\n            clientGeolocate: function(location) {\n                var locService = this;\n                return $q(function(resolve, reject) {\n\n                    locService.mapApiKey().then(function(apiKeyAndProvider) {\n\n                        if(apiKeyAndProvider.provider === 'GOOGLE') {\n                            handleGoogleGeolocate(location, locService, apiKeyAndProvider, resolve, reject);\n                        } else if (apiKeyAndProvider.provider === 'HERE') {\n                            handleHEREGeolocate(location, locService, apiKeyAndProvider, resolve, reject);\n                        } else {\n                            resolve({latitude: null, longitude: null});\n                        }\n                    })\n\n                });\n            },\n            getTimezone : function(latitude, longitude) {\n              return $http.get('/admin/api/location/timezone', {params: {lat: latitude, lng: longitude}});\n            },\n            getTimezones: function() {\n                return $http.get('/admin/api/location/timezones');\n            },\n            getMapUrl : getMapUrl\n        };\n    });\n\n    baseServices.service('ValidationService', function(NotificationHandler) {\n        return {\n            validationPerformer: function($q, validator, data, form) {\n                var deferred = $q.defer();\n                validator(data).success(this.validationResultHandler(form, deferred)).error(function(error) {\n                    deferred.reject(error);\n                });\n                return deferred.promise;\n            },\n            validationResultHandler: function(form, deferred) {\n                return function(validationResult) {\n                    if(validationResult.errorCount > 0) {\n                        if(form.$setError) {\n                            angular.forEach(validationResult.validationErrors, function(error) {\n                                form.$setError(error.fieldName, error.message);\n                            });\n                        } else if (form.$setValidity) {\n                            angular.forEach(validationResult.validationErrors, function(error) {\n                                form[error.fieldName].$setValidity(error.code, false);\n                            });\n                        } else {\n                            var firstError = validationResult.validationErrors[0];\n                            NotificationHandler.showError(firstError.description);\n                        }\n                        deferred.reject('invalid form');\n                    }\n                    deferred.resolve();\n                };\n            }\n        }\n    });\n\n    baseServices.service(\"HttpErrorHandler\", ['$log', 'NotificationHandler', function($log, NotificationHandler) {\n        var getMessage = function(body, status) {\n            switch(status) {\n                case 400:\n                    return 'Malformed Request';\n                case 404:\n                    return 'Resource not found';\n                case 403:\n                    return 'Your account is not authorized to perform this operation.';\n                case 500:\n                    return 'Internal Server Error: ' + body;\n                default:\n                    return 'Connection Error';\n            }\n        };\n        return {\n            handle : function(body, status) {\n                var message = getMessage(body, status);\n                $log.warn(message, status, body);\n                NotificationHandler.showError(message);\n            }\n        };\n    }]);\n\n    baseServices.service(\"NotificationHandler\", [\"growl\", function (growl) {\n        var config = {ttl: 5000, disableCountDown: true};\n        return {\n            showSuccess: function (message) {\n                return growl.success(message, config);\n            },\n            showWarning: function (message) {\n                return growl.warning(message, config);\n            },\n            showInfo : function (message) {\n                return growl.info(message, config);\n            },\n            showError : function (message) {\n                return growl.error(message, config);\n            }\n        }\n\n    }]);\n\n    baseServices.service(\"PriceCalculator\", function() {\n        var instance = {\n            calculateTotalPrice: function(event, viewMode) {\n                if(isNaN(event.regularPrice) || isNaN(event.vatPercentage)) {\n                    return '0.00';\n                }\n                var vat = numeral(0.0);\n                if((viewMode && angular.isDefined(event.id)) || !event.vatIncluded) {\n                    vat = instance.applyPercentage(event.regularPrice, event.vatPercentage);\n                }\n                return numeral(vat.add(event.regularPrice).format('0.00')).value();\n            },\n            calcBarValue: function(category) {\n                if(category.bounded) {\n                    return category.maxTickets || 1;\n                }\n                return 0;\n            },\n            calcCategoryPricePercent: function(category, event, editMode) {\n                if(isNaN(event.regularPrice) || isNaN(category.price)) {\n                    return '0.00';\n                }\n                return instance.calcPercentage(category.price, event.regularPrice).format('0.00');\n            },\n            calcCategoryPrice: function(category, event) {\n                if(isNaN(event.vatPercentage) || isNaN(category.price)) {\n                    return '0.00';\n                }\n                var vat = numeral(0.0);\n                if(event.vatIncluded) {\n                    vat = instance.applyPercentage(category.price, event.vatPercentage);\n                }\n                return numeral(category.price).add(vat).format('0.00');\n            },\n            calcPercentage: function(fraction, total) {\n                if(isNaN(fraction) || isNaN(total)){\n                    return numeral(0.0);\n                }\n                return numeral(numeral(fraction).divide(total).multiply(100).format('0.00'));\n            },\n            applyPercentage: function(total, percentage) {\n                return numeral(numeral(percentage).divide(100).multiply(total).format('0.00'));\n            }\n        };\n        return instance;\n    });\n    \n    baseServices.service(\"PromoCodeService\", function($http, HttpErrorHandler) {\n\n        function addUtfOffsetIfNecessary(promoCode) {\n            if(promoCode.eventId == null) {\n                promoCode.utcOffset = (new Date()).getTimezoneOffset()*-60; //in seconds\n            }\n        }\n\n        return {\n                add : function(promoCode) {\n                    addUtfOffsetIfNecessary(promoCode);\n                    return $http['post']('/admin/api/promo-code', promoCode).error(HttpErrorHandler.handle);\n                },\n                remove: function(promoCodeId) {\n                    return $http['delete']('/admin/api/promo-code/' + promoCodeId).error(HttpErrorHandler.handle);\n                },\n                list: function(eventId) {\n                    return $http.get('/admin/api/events/' + eventId + '/promo-code').error(HttpErrorHandler.handle);\n                },\n                listOrganization : function(organizationId) {\n                    return $http.get('/admin/api/organization/' + organizationId + '/promo-code').error(HttpErrorHandler.handle);\n                },\n                countUse : function(promoCodeId) {\n                    return $http.get('/admin/api/promo-code/' + promoCodeId + '/count-use');\n                },\n                disable: function(promoCodeId) {\n                    return $http['post']('/admin/api/promo-code/' + promoCodeId + '/disable');\n                },\n                update: function(promoCodeId, toUpdate) {\n                    addUtfOffsetIfNecessary(toUpdate);\n                    return $http.post('/admin/api/promo-code/' + promoCodeId, toUpdate);\n                },\n                getUsageDetails: function(promoCodeId, eventShortName) {\n                    return $http.get('/admin/api/promo-code/' + promoCodeId + '/detailed-usage', {\n                        params: {\n                            eventShortName\n                        }\n                    });\n                }\n        };\n    });\n\n    baseServices.service(\"CheckInService\", ['$http', 'HttpErrorHandler', '$window', function($http, HttpErrorHandler, $window) {\n        return {\n            findAllTicketIds : function(eventId) {\n                var sessionStorageKey = 'CHECK_IN_TIMESTAMP_'+eventId;\n                var since = $window.sessionStorage.getItem(sessionStorageKey);\n                var sinceParam = since ? '?changedSince='+since : '';\n                return $http.get('/admin/api/check-in/' + eventId + '/ticket-identifiers' + sinceParam)\n                    .then(function(resp) {\n                        $window.sessionStorage.setItem(sessionStorageKey, resp.headers('Alfio-TIME'));\n                        return resp;\n                    }, HttpErrorHandler.handle);\n            },\n\n            downloadTickets: function(eventId, ids) {\n                return $http.post('/admin/api/check-in/'+eventId+'/tickets', ids).error(HttpErrorHandler.handle);\n            },\n            \n            getTicket: function(eventId, code) {\n                var ticketIdentifier = code.split('/')[0];\n                return $http.get('/admin/api/check-in/' + eventId + '/ticket/' + ticketIdentifier + \"?qrCode=\" + encodeURIComponent(code)).error(HttpErrorHandler.handle);\n            },\n            \n            checkIn: function(eventId, ticket) {\n                var ticketIdentifier = ticket.code.split('/')[0];\n                return $http['post']('/admin/api/check-in/' + eventId + '/ticket/' + ticketIdentifier, ticket).error(HttpErrorHandler.handle);\n            },\n\n            manualCheckIn: function(ticket) {\n                return $http['post']('/admin/api/check-in/' + ticket.eventId + '/ticket/' + ticket.uuid + '/manual-check-in', ticket).error(HttpErrorHandler.handle);\n            },\n\n            revertCheckIn: function(ticket) {\n                return $http['post']('/admin/api/check-in/' + ticket.eventId + '/ticket/' + ticket.uuid + '/revert-check-in', ticket).error(HttpErrorHandler.handle);\n            },\n            \n            confirmPayment: function(eventId, ticket) {\n                var ticketIdentifier = ticket.code.split('/')[0];\n                return $http['post']('/admin/api/check-in/' + eventId + '/ticket/' + ticketIdentifier + '/confirm-on-site-payment').error(HttpErrorHandler.handle);\n            }\n        };\n    }]);\n\n    baseServices.service(\"FileUploadService\", function($http, HttpErrorHandler) {\n        return {\n            upload : function(file) {\n                return $http['post']('/admin/api/file/upload', file).error(HttpErrorHandler.handle);\n            },\n\n            uploadImageWithResize: function(file) {\n                return $http['post']('/admin/api/file/upload?resizeImage=true', file).error(HttpErrorHandler.handle);\n            }\n        };\n    });\n\n    baseServices.service('WaitingQueueService', ['$http', 'HttpErrorHandler', function($http, HttpErrorHandler) {\n        return {\n            getWaitingQueueStatus: function(eventName) {\n                return $http.get('/admin/api/event/'+eventName+'/waiting-queue/status').error(HttpErrorHandler.handle);\n            },\n            setPaused: function(eventName, status) {\n                return $http.put('/admin/api/event/'+eventName+'/waiting-queue/status', {status: status}).error(HttpErrorHandler.handle);\n            },\n            countSubscribers: function(eventName) {\n                return $http.get('/admin/api/event/'+eventName+'/waiting-queue/count').error(HttpErrorHandler.handle);\n            },\n            loadAllSubscribers: function(eventName) {\n                return $http.get('/admin/api/event/'+eventName+'/waiting-queue/load').error(HttpErrorHandler.handle);\n            },\n            removeSubscriber: function(eventName, subscriber) {\n                return $http['delete']('/admin/api/event/'+eventName+'/waiting-queue/subscriber/'+subscriber.id).error(HttpErrorHandler.handle);\n            },\n            restoreSubscriber: function(eventName, subscriber) {\n                return $http['put']('/admin/api/event/'+eventName+'/waiting-queue/subscriber/'+subscriber.id+'/restore').error(HttpErrorHandler.handle);\n            }\n        };\n    }]);\n\n    baseServices.service('UtilsService', ['$http', 'HttpErrorHandler', function($http, HttpErrorHandler) {\n        return {\n            generateShortName: function(displayName) {\n                return $http.get('/admin/api/utils/short-name/generate?displayName='+displayName).error(HttpErrorHandler.handle);\n            },\n            validateShortName: function(shortName) {\n                return $http['post']('/admin/api/utils/short-name/validate', null, {params: {shortName: shortName}}).error(HttpErrorHandler.handle);\n            },\n            renderCommonMark: function(text) {\n            \treturn $http.get('/admin/api/utils/render-commonmark', {params: {text: text}}).error(HttpErrorHandler.handle);\n            },\n            getApplicationInfo: function() {\n                return $http.get('/admin/api/utils/alfio/info').error(HttpErrorHandler.handle);\n            },\n            getAvailableCurrencies: function() {\n                return $http.get('/admin/api/utils/currencies').error(HttpErrorHandler.handle);\n            },\n            logout: function() {\n                return $http.post(\"/logout\", {}).error(HttpErrorHandler.handle);\n            },\n            getFirstTranslation: function(localized) {\n                var keys = Object.keys(localized);\n                if(keys.length > 0) {\n                    return localized[keys[0]];\n                }\n                return null;\n            }\n        };\n    }]);\n\n    baseServices.service('CountriesService', ['$http', 'HttpErrorHandler', '$q', function($http, HttpErrorHandler) {\n        var request = $http.get('/admin/api/utils/countriesForVat').then(function(res) {\n            return res.data;\n        }, HttpErrorHandler.handle);\n        return {\n            getCountries: function() {\n                return request;\n            },\n\n            getDescription: function(countryCode) {\n                return request.then(function(countries) {\n                    return countries[countryCode] || countryCode;\n                });\n            }\n\n        };\n    }]);\n\n    baseServices.service('MenuButtonService', ['EventService', '$window', '$uibModal', 'NotificationHandler', function(EventService, $window, $uibModal, NotificationHandler) {\n        return {\n            configureMenu: function(ctrl) {\n                ctrl.openFieldSelectionModal = function() {\n                    EventService.exportAttendees(ctrl.event);\n                };\n                ctrl.downloadSponsorsScan = function() {\n                    var pathName = $window.location.pathname;\n                    if(!pathName.endsWith(\"/\")) {\n                        pathName = pathName + \"/\";\n                    }\n                    $window.open(pathName+\"api/events/\"+ctrl.event.shortName+\"/sponsor-scan/export\");\n                };\n                ctrl.openWaitingQueueModal = function() {\n                    var outCtrl = ctrl;\n                    var modal = $uibModal.open({\n                        size:'lg',\n                        templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/download-waiting-queue.html',\n                        backdrop: 'static',\n                        controllerAs: 'ctrl',\n                        controller: function($scope) {\n                            var ctrl = this;\n                            $scope.format = 'excel';\n\n                            $scope.download = function() {\n                                var queryString = \"format=\"+$scope.format;\n                                var pathName = $window.location.pathname;\n                                if(!pathName.endsWith(\"/\")) {\n                                    pathName = pathName + \"/\";\n                                }\n                                $window.open(pathName+\"api/event/\" + outCtrl.event.shortName + \"/waiting-queue/download?\"+queryString);\n                            };\n\n                            ctrl.close = function() {\n                                modal.close();\n                            }\n                        }\n                    });\n                };\n                ctrl.downloadInvoices = function(type) {\n                    EventService.countInvoices(ctrl.event.shortName).then(function (res) {\n                        var count = res.data;\n                        if(count > 0) {\n                            var pathName = $window.location.pathname;\n                            if(!pathName.endsWith(\"/\")) {\n                                pathName = pathName + \"/\";\n                            }\n                            var suffix = '';\n                            if(type === 'xls') {\n                                suffix = '-xls';\n                            }\n                            $window.open(pathName+\"api/events/\"+ctrl.event.shortName+\"/all-documents\"+suffix);\n                        } else {\n                            NotificationHandler.showInfo(\"No invoices have been found.\");\n                        }\n                    });\n                };\n            }\n        }\n    }]);\n\n    baseServices.service('ImageTransformService', ['FileUploadService', '$window', '$q', function(FileUploadService, $window, $q) {\n        return {\n            transformAndUploadImages: function(files) {\n                var deferred = $q.defer();\n                var reader = new FileReader();\n                reader.onload = function(e) {\n                    var imageBase64 = e.target.result;\n                    var fileType = files[0].type;\n                    var fileName = files[0].name;\n                    var fileContent = imageBase64.substring(imageBase64.indexOf('base64,') + 7);\n                    if (fileType=== 'image/svg+xml') {\n                        var img = new Image();\n                        var fromSvgToPng = function(image) {\n                            var cnv = document.createElement('canvas');\n                            cnv.width = image.width;\n                            cnv.height = image.height;\n                            var canvasCtx = cnv.getContext('2d');\n                            canvasCtx.drawImage(image, 0, 0);\n                            var imgData = cnv.toDataURL('image/png');\n                            img.remove();\n                            fileType = \"image/png\";\n                            fileName = fileName+\".png\";\n                            fileContent = imgData.substring(imgData.indexOf('base64,') + 7);\n                            FileUploadService.uploadImageWithResize({file : fileContent, type : fileType, name : fileName}).then(function(res) {\n                                deferred.resolve({\n                                    imageBase64: imgData,\n                                    fileBlobId: res.data\n                                });\n                            }, function(err) {\n                                deferred.reject(null); // error is already notified by the NotificationService\n                            });\n                        };\n                        var parser = new DOMParser();\n                        var svgRoot = parser.parseFromString(atob(fileContent), 'text/xml').getElementsByTagName(\"svg\")[0];\n                        if (svgRoot.hasAttribute('height')) {\n                            img.height = svgRoot.getAttribute('height');\n                            img.width = svgRoot.getAttribute('width');\n                        } else {\n                            img.height = 500;\n                        }\n                        img.setAttribute('aria-hidden', 'true');\n                        img.style.position = 'absolute';\n                        img.style.top = '-10000px';\n                        img.style.left = '-10000px';\n                        img.onload = function() {\n                            // see FF limitation https://stackoverflow.com/a/61195034\n                            // we need to set in a explicit way the size _inside_ the svg\n                            svgRoot.setAttribute('width', img.width+'px');\n                            svgRoot.setAttribute('height', img.height+'px');\n                            var serializedSvg = new XMLSerializer().serializeToString(svgRoot);\n                            img.onload = function() {\n                                fromSvgToPng(img);\n                            }\n                            img.src = 'data:image/svg+xml;base64,'+btoa(serializedSvg);\n                        };\n                        $window.document.body.appendChild(img);\n                        img.src = imageBase64;\n                    } else {\n                        FileUploadService.uploadImageWithResize({file : fileContent, type : fileType, name : fileName}).then(function(res) {\n                            deferred.resolve({\n                                imageBase64: imageBase64,\n                                fileBlobId: res.data\n                            });\n                        }, function(err) {\n                            deferred.reject(null); // error is already notified by the NotificationService\n                        });\n                    }\n                };\n                if (files.length <= 0) {\n                    deferred.reject('Your image was not uploaded correctly.Please upload the image again');\n                } else if (!((files[0].type === 'image/png') || (files[0].type === 'image/jpeg') || (files[0].type === 'image/gif') || (files[0].type === 'image/svg+xml'))) {\n                    deferred.reject('Only PNG, JPG, GIF or SVG image files are accepted');\n                } else if (files[0].size > (1024 * 200)) {\n                    deferred.reject('Image size exceeds the allowable limit 200KB');\n                } else {\n                    reader.readAsDataURL(files[0]);\n                }\n                return deferred.promise;\n            }\n        };\n    }])\n})();", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.Ticket;\nimport alfio.model.TicketCategory;\nimport alfio.model.group.Group;\nimport alfio.model.group.LinkedGroup;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.*;\nimport alfio.model.result.Result;\nimport alfio.repository.EventRepository;\nimport alfio.repository.GroupRepository;\nimport alfio.repository.TicketRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.AuthorityRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.repository.user.UserRepository;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.time.DateUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.util.*;\n\nimport static alfio.test.util.IntegrationTestUtil.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\n@Transactional\npublic class GroupManagerIntegrationTest extends BaseIntegrationTest {\n\n    @Autowired\n    private EventManager eventManager;\n    @Autowired\n    private OrganizationRepository organizationRepository;\n    @Autowired\n    private UserManager userManager;\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private AuthorityRepository authorityRepository;\n    @Autowired\n    private TicketRepository ticketRepository;\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n    @Autowired\n    private EventRepository eventRepository;\n    @Autowired\n    private GroupRepository groupRepository;\n    @Autowired\n    private GroupManager groupManager;\n    @Autowired\n    private TicketReservationManager ticketReservationManager;\n\n    @BeforeEach\n    public void setup() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n        initAdminUser(userRepository, authorityRepository);\n    }\n\n    @Test\n    public void testLinkToEvent() {\n\n        List<TicketCategoryModification> categories = Collections.singletonList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 10,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(2), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> pair = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n        Event event = pair.getKey();\n        Group group = groupManager.createNew(\"test\", \"This is a test\", event.getOrganizationId());\n        assertNotNull(group);\n        LinkedGroupModification modification = new LinkedGroupModification(null, group.getId(), event.getId(), null, LinkedGroup.Type.ONCE_PER_VALUE, LinkedGroup.MatchType.FULL, null);\n        LinkedGroup configuration = groupManager.createLink(group.getId(), event.getId(), modification);\n        assertNotNull(configuration);\n        List<TicketCategory> ticketCategories = eventManager.loadTicketCategories(event);\n        int categoryId = ticketCategories.get(0).getId();\n        assertTrue(groupManager.isGroupLinked(event.getId(), categoryId));\n        List<LinkedGroup> activeConfigurations = groupRepository.findActiveConfigurationsFor(event.getId(), categoryId);\n        assertFalse(activeConfigurations.isEmpty(), \"ActiveConfigurations should be empty\");\n        assertEquals(1, activeConfigurations.size());\n        assertEquals(configuration.getId(), activeConfigurations.get(0).getId());\n        assertFalse(groupManager.isAllowed(\"test@test.ch\", event.getId(), categoryId), \"Group is empty, therefore no value is allowed\");\n        Result<Integer> items = groupManager.insertMembers(group.getId(), Collections.singletonList(new GroupMemberModification(null,\"test@test.ch\", \"description\")));\n        assertTrue(items.isSuccess());\n        assertEquals(Integer.valueOf(1), items.getData());\n        assertTrue(groupManager.isAllowed(\"test@test.ch\", event.getId(), categoryId));\n\n        TicketReservationModification ticketReservation = new TicketReservationModification();\n        ticketReservation.setAmount(1);\n        ticketReservation.setTicketCategoryId(categoryId);\n\n        String reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(new TicketReservationWithOptionalCodeModification(ticketReservation, Optional.empty())),\n            Collections.emptyList(), DateUtils.addDays(new Date(), 1), Optional.empty(), Locale.ENGLISH, false, null);\n\n        Ticket ticket = ticketRepository.findFirstTicketInReservation(reservationId).orElseThrow(NullPointerException::new);\n        ticketRepository.updateTicketOwnerById(ticket.getId(), \"test@test.ch\", \"This is a Test\", \"This is\", \"a Test\");\n\n        ticket = ticketRepository.findFirstTicketInReservation(reservationId).orElseThrow(NullPointerException::new);\n        assertTrue(groupManager.acquireMemberForTicket(ticket));\n\n        reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(new TicketReservationWithOptionalCodeModification(ticketReservation, Optional.empty())),\n            Collections.emptyList(), DateUtils.addDays(new Date(), 1), Optional.empty(), Locale.ENGLISH, false, null);\n\n        ticket = ticketRepository.findFirstTicketInReservation(reservationId).orElseThrow(NullPointerException::new);\n        assertFalse(groupManager.acquireMemberForTicket(ticket), \"shouldn't be allowed\");\n\n    }\n\n    @Test\n    public void testDuplicates() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 10,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(2), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> pair = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n        Event event = pair.getKey();\n        Group group = groupManager.createNew(\"test\", \"This is a test\", event.getOrganizationId());\n        assertNotNull(group);\n        LinkedGroupModification modification = new LinkedGroupModification(null, group.getId(), event.getId(), null, LinkedGroup.Type.ONCE_PER_VALUE, LinkedGroup.MatchType.FULL, null);\n        LinkedGroup configuration = groupManager.createLink(group.getId(), event.getId(), modification);\n        assertNotNull(configuration);\n        Result<Integer> items = groupManager.insertMembers(group.getId(), Arrays.asList(new GroupMemberModification(null,\"test@test.ch\", \"description\"), new GroupMemberModification(null,\"test@test.ch\", \"description\")));\n        Assertions.assertFalse(items.isSuccess());\n        assertEquals(\"value.duplicate\", items.getFirstErrorOrNull().getCode());\n        assertEquals(\"test@test.ch\", items.getFirstErrorOrNull().getDescription());\n    }\n}"], "fixing_code": ["/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager;\n\nimport alfio.model.Audit;\nimport alfio.model.Ticket;\nimport alfio.model.group.Group;\nimport alfio.model.group.GroupMember;\nimport alfio.model.group.LinkedGroup;\nimport alfio.model.modification.GroupMemberModification;\nimport alfio.model.modification.GroupModification;\nimport alfio.model.modification.LinkedGroupModification;\nimport alfio.model.result.ErrorCode;\nimport alfio.model.result.Result;\nimport alfio.repository.AuditingRepository;\nimport alfio.repository.GroupRepository;\nimport alfio.repository.TicketRepository;\nimport ch.digitalfondue.npjt.AffectedRowCountAndKey;\nimport lombok.RequiredArgsConstructor;\nimport lombok.extern.log4j.Log4j2;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.Validate;\nimport org.apache.commons.text.StringEscapeUtils;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.PlatformTransactionManager;\nimport org.springframework.transaction.TransactionDefinition;\nimport org.springframework.transaction.annotation.Transactional;\nimport org.springframework.transaction.support.DefaultTransactionDefinition;\nimport org.springframework.transaction.support.TransactionTemplate;\n\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\nimport static alfio.model.group.LinkedGroup.MatchType.FULL;\nimport static alfio.model.group.LinkedGroup.Type.*;\nimport static java.util.Collections.singletonList;\nimport static org.apache.commons.text.StringEscapeUtils.escapeHtml4;\n\n@Component\n@Log4j2\npublic class GroupManager {\n\n    private final GroupRepository groupRepository;\n    private final TicketRepository ticketRepository;\n    private final AuditingRepository auditingRepository;\n    private final TransactionTemplate requiresNewTransactionTemplate;\n\n    public GroupManager(GroupRepository groupRepository,\n                        TicketRepository ticketRepository,\n                        AuditingRepository auditingRepository,\n                        PlatformTransactionManager transactionManager) {\n        this.groupRepository = groupRepository;\n        this.ticketRepository = ticketRepository;\n        this.auditingRepository = auditingRepository;\n        this.requiresNewTransactionTemplate = new TransactionTemplate(transactionManager, new DefaultTransactionDefinition(TransactionDefinition.PROPAGATION_REQUIRES_NEW));\n    }\n\n    public Result<Integer> createNew(GroupModification input) {\n        return requiresNewTransactionTemplate.execute(status -> {\n            Group wl = createNew(input.getName(), input.getDescription(), input.getOrganizationId());\n            Result<Integer> insertMembers = insertMembers(wl.getId(), input.getItems());\n            if(!insertMembers.isSuccess()) {\n                status.setRollbackOnly();\n            }\n            return insertMembers;\n        });\n    }\n\n    Group createNew(String name, String description, int organizationId) {\n        AffectedRowCountAndKey<Integer> insert = groupRepository.insert(escapeHtml4(name), escapeHtml4(description), organizationId);\n        return groupRepository.getById(insert.getKey());\n    }\n\n    @Transactional\n    public LinkedGroup createLink(int groupId,\n                                  int eventId,\n                                  LinkedGroupModification modification) {\n        Objects.requireNonNull(groupRepository.getById(groupId), \"Group not found\");\n        Validate.isTrue(modification.getType() != LIMITED_QUANTITY || modification.getMaxAllocation() != null, \"Missing max allocation\");\n        AffectedRowCountAndKey<Integer> configuration = groupRepository.createConfiguration(groupId, eventId,\n            modification.getTicketCategoryId(), modification.getType(), modification.getMatchType(), modification.getMaxAllocation());\n        return groupRepository.getConfiguration(configuration.getKey());\n    }\n\n    @Transactional\n    public LinkedGroup updateLink(int id, LinkedGroupModification modification) {\n        LinkedGroup original = groupRepository.getConfigurationForUpdate(id);\n        if(requiresCleanState(modification, original)) {\n            Validate.isTrue(groupRepository.countWhitelistedTicketsForConfiguration(original.getId()) == 0, \"Cannot update as there are already confirmed tickets.\");\n        }\n        groupRepository.updateConfiguration(id, modification.getGroupId(), original.getEventId(), modification.getTicketCategoryId(), modification.getType(), modification.getMatchType(), modification.getMaxAllocation());\n        return groupRepository.getConfiguration(id);\n    }\n\n    private boolean requiresCleanState(LinkedGroupModification modification, LinkedGroup original) {\n        return (original.getType() == UNLIMITED && modification.getType() != UNLIMITED)\n            || original.getGroupId() != modification.getGroupId()\n            || (modification.getType() == LIMITED_QUANTITY && modification.getMaxAllocation() != null && original.getMaxAllocation() != null && modification.getMaxAllocation().compareTo(original.getMaxAllocation()) < 0);\n    }\n\n    boolean isGroupLinked(int eventId, int categoryId) {\n        return CollectionUtils.isNotEmpty(findLinks(eventId, categoryId));\n    }\n\n    @Transactional(readOnly = true)\n    public List<Group> getAllActiveForOrganization(int organizationId) {\n        return groupRepository.getAllActiveForOrganization(organizationId);\n    }\n\n    @Transactional(readOnly = true)\n    public List<Group> getAllForOrganization(int organizationId) {\n        return groupRepository.getAllForOrganization(organizationId);\n    }\n\n    @Transactional\n    public Optional<GroupModification> loadComplete(int id) {\n        return groupRepository.getOptionalById(id)\n            .map(wl -> {\n                List<GroupMemberModification> items = groupRepository.getItems(wl.getId()).stream().map(i -> new GroupMemberModification(i.getId(), i.getValue(), i.getDescription())).collect(Collectors.toList());\n                return new GroupModification(wl.getId(), wl.getName(), wl.getDescription(), wl.getOrganizationId(), items);\n            });\n    }\n\n    @Transactional\n    public Optional<Group> findById(int groupId, int organizationId) {\n        return groupRepository.getOptionalById(groupId).filter(w -> w.getOrganizationId() == organizationId);\n    }\n\n    @Transactional\n    public boolean isAllowed(String value, int eventId, int categoryId) {\n\n        List<LinkedGroup> configurations = findLinks(eventId, categoryId);\n        if(CollectionUtils.isEmpty(configurations)) {\n            return true;\n        }\n        LinkedGroup configuration = configurations.get(0);\n        return getMatchingMember(configuration, value).isPresent();\n    }\n\n    @Transactional\n    public List<LinkedGroup> getLinksForEvent(int eventId) {\n        return groupRepository.findActiveConfigurationsForEvent(eventId);\n    }\n\n    @Transactional\n    public List<LinkedGroup> findLinks(int eventId, int categoryId) {\n        return groupRepository.findActiveConfigurationsFor(eventId, categoryId);\n    }\n\n    Result<Integer> insertMembers(int groupId, List<GroupMemberModification> members) {\n\n        Map<String, List<GroupMemberModification>> grouped = members.stream().collect(Collectors.groupingBy(GroupMemberModification::getValue));\n        List<String> duplicates = grouped.entrySet().stream().filter(e -> e.getValue().size() > 1).map(Map.Entry::getKey).collect(Collectors.toList());\n\n        return new Result.Builder<Integer>()\n            .checkPrecondition(duplicates::isEmpty, ErrorCode.lazy(() -> ErrorCode.custom(\"value.duplicate\", duplicates.stream().limit(10).collect(Collectors.joining(\", \")))))\n            .build(() -> Arrays.stream(groupRepository.insert(groupId, members)).sum());\n    }\n\n    @Transactional\n    public boolean acquireMemberForTicket(Ticket ticket) {\n        List<LinkedGroup> configurations = findLinks(ticket.getEventId(), ticket.getCategoryId());\n        if(CollectionUtils.isEmpty(configurations)) {\n            return true;\n        }\n        LinkedGroup configuration = configurations.get(0);\n        Optional<GroupMember> optionalItem = getMatchingMember(configuration, ticket.getEmail());\n        if(optionalItem.isEmpty()) {\n            return false;\n        }\n        GroupMember item = optionalItem.get();\n        boolean preventDuplication = configuration.getType() == ONCE_PER_VALUE;\n        boolean limitAssignments = preventDuplication || configuration.getType() == LIMITED_QUANTITY;\n        if(limitAssignments) {\n            //reload and lock configuration\n            configuration = groupRepository.getConfigurationForUpdate(configuration.getId());\n            int existing = groupRepository.countExistingWhitelistedTickets(item.getId(), configuration.getId());\n            int expected = preventDuplication ? 1 : Optional.ofNullable(configuration.getMaxAllocation()).orElse(0);\n            if(existing >= expected) {\n                return false;\n            }\n        }\n        groupRepository.insertWhitelistedTicket(item.getId(), configuration.getId(), ticket.getId(), preventDuplication ? Boolean.TRUE : null);\n        Map<String, Object> modifications = new HashMap<>();\n        modifications.put(\"itemId\", item.getId());\n        modifications.put(\"configurationId\", configuration.getId());\n        modifications.put(\"ticketId\", ticket.getId());\n        auditingRepository.insert(ticket.getTicketsReservationId(), null, ticket.getEventId(), Audit.EventType.GROUP_MEMBER_ACQUIRED, new Date(), Audit.EntityType.TICKET, String.valueOf(ticket.getId()), singletonList(modifications));\n        return true;\n    }\n\n    private Optional<GroupMember> getMatchingMember(LinkedGroup configuration, String email) {\n        String trimmed = StringUtils.trimToEmpty(email);\n        Optional<GroupMember> exactMatch = groupRepository.findItemByValueExactMatch(configuration.getGroupId(), trimmed);\n        if(exactMatch.isPresent() || configuration.getMatchType() == FULL) {\n            return exactMatch;\n        }\n        String partial = StringUtils.substringAfterLast(trimmed, \"@\");\n        return partial.length() > 0 ? groupRepository.findItemEndsWith(configuration.getId(), configuration.getGroupId(), \"%@\"+partial) : Optional.empty();\n    }\n\n    @Transactional\n    public void deleteWhitelistedTicketsForReservation(String reservationId) {\n        List<Integer> tickets = ticketRepository.findTicketsInReservation(reservationId).stream().map(Ticket::getId).collect(Collectors.toList());\n        if(!tickets.isEmpty()) {\n            int result = groupRepository.deleteExistingWhitelistedTickets(tickets);\n            log.trace(\"deleted {} whitelisted tickets for reservation {}\", result, reservationId);\n        }\n    }\n\n    @Transactional\n    public void disableLink(int linkId) {\n        Validate.isTrue(groupRepository.disableLink(linkId) == 1, \"Error while disabling link\");\n    }\n\n    @Transactional\n    public Optional<GroupModification> update(int listId, GroupModification modification) {\n\n        if(groupRepository.getOptionalById(listId).isEmpty() || CollectionUtils.isEmpty(modification.getItems())) {\n            return Optional.empty();\n        }\n\n        List<String> existingValues = groupRepository.getAllValuesIncludingNotActive(listId);\n        List<GroupMemberModification> notPresent = modification.getItems().stream()\n            .filter(i -> i.getId() == null && !existingValues.contains(i.getValue().strip().toLowerCase()))\n            .distinct()\n            .collect(Collectors.toList());\n\n        if(!notPresent.isEmpty()) {\n            var insertResult = insertMembers(listId, notPresent);\n            if(!insertResult.isSuccess()) {\n                var error = Objects.requireNonNull(insertResult.getFirstErrorOrNull());\n                throw new DuplicateGroupItemException(error.getDescription());\n            }\n        }\n        groupRepository.update(listId, escapeHtml4(modification.getName()), escapeHtml4(modification.getDescription()));\n        return loadComplete(listId);\n    }\n\n    @Transactional\n    public boolean deactivateMembers(List<Integer> memberIds, int groupId) {\n        if(memberIds.isEmpty()) {\n            return false;\n        }\n        groupRepository.deactivateGroupMember(memberIds, groupId);\n        return true;\n    }\n\n    @Transactional\n    public boolean deactivateGroup(int groupId) {\n        List<Integer> members = groupRepository.getItems(groupId).stream().map(GroupMember::getId).collect(Collectors.toList());\n        if(!members.isEmpty()) {\n            Validate.isTrue(deactivateMembers(members, groupId), \"error while disabling group members\");\n        }\n        groupRepository.disableAllLinks(groupId);\n        Validate.isTrue(groupRepository.deactivateGroup(groupId) == 1, \"unexpected error while disabling group\");\n        return true;\n    }\n\n    @RequiredArgsConstructor\n    public static class WhitelistValidator implements Predicate<WhitelistValidationItem> {\n\n        private final int eventId;\n        private final GroupManager groupManager;\n\n        @Override\n        public boolean test(WhitelistValidationItem item) {\n            return groupManager.isAllowed(item.value, eventId, item.categoryId);\n        }\n    }\n\n    @RequiredArgsConstructor\n    public static class WhitelistValidationItem {\n        private final int categoryId;\n        private final String value;\n    }\n\n    public static class DuplicateGroupItemException extends RuntimeException {\n        public DuplicateGroupItemException(String message) {\n            super(message);\n        }\n    }\n}\n", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.repository;\n\nimport alfio.model.group.Group;\nimport alfio.model.group.GroupMember;\nimport alfio.model.group.LinkedGroup;\nimport alfio.model.modification.GroupMemberModification;\nimport ch.digitalfondue.npjt.*;\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\nimport static org.apache.commons.text.StringEscapeUtils.escapeHtml4;\n\n@QueryRepository\npublic interface GroupRepository {\n\n    String BY_EVENT_ID = \"select * from group_link_active where event_id_fk = :eventId\";\n\n    @Query(\"insert into a_group(name, description, organization_id_fk) values(:name, :description, :orgId)\")\n    @AutoGeneratedKey(\"id\")\n    AffectedRowCountAndKey<Integer> insert(@Bind(\"name\") String name,\n                                           @Bind(\"description\") String description,\n                                           @Bind(\"orgId\") int organizationId);\n\n    @Query(\"select * from group_active where id = :id\")\n    Group getById(@Bind(\"id\") int id);\n\n    @Query(\"update a_group set name = :name, description = :description where id = :id\")\n    int update(@Bind(\"id\") int id, @Bind(\"name\") String name, @Bind(\"description\") String description);\n\n    @Query(\"select * from group_active where id = :id\")\n    Optional<Group> getOptionalById(@Bind(\"id\") int id);\n\n    @Query(\"select * from group_active where organization_id_fk = :organizationId order by name, description\")\n    List<Group> getAllActiveForOrganization(@Bind(\"organizationId\") int organizationId);\n\n    @Query(\"select * from a_group where organization_id_fk = :organizationId order by name, description\")\n    List<Group> getAllForOrganization(@Bind(\"organizationId\") int organizationId);\n\n    @Query(\"insert into group_link(a_group_id_fk, event_id_fk, ticket_category_id_fk, type, match_type, max_allocation)\" +\n        \" values(:groupId, :eventId, :ticketCategoryId, :type, :matchType, :maxAllocation)\")\n    @AutoGeneratedKey(\"id\")\n    AffectedRowCountAndKey<Integer> createConfiguration(@Bind(\"groupId\") int groupId,\n                                                        @Bind(\"eventId\") int eventId,\n                                                        @Bind(\"ticketCategoryId\") Integer ticketCategoryId,\n                                                        @Bind(\"type\") LinkedGroup.Type type,\n                                                        @Bind(\"matchType\") LinkedGroup.MatchType matchType,\n                                                        @Bind(\"maxAllocation\") Integer maxAllocation);\n\n    default int[] insert(int groupId, List<GroupMemberModification> members) {\n        MapSqlParameterSource[] params = members.stream()\n            .map(i -> new MapSqlParameterSource(\"groupId\", groupId)\n                .addValue(\"value\", i.getValue().toLowerCase())\n                .addValue(\"description\", escapeHtml4(i.getDescription())))\n            .toArray(MapSqlParameterSource[]::new);\n\n        return getNamedParameterJdbcTemplate().batchUpdate(\"insert into group_member(a_group_id_fk, value, description) values(:groupId, :value, :description)\", params);\n    }\n\n    NamedParameterJdbcTemplate getNamedParameterJdbcTemplate();\n\n    @Query(\"select * from group_member_active where a_group_id_fk = :groupId order by value\")\n    List<GroupMember> getItems(@Bind(\"groupId\") int groupId);\n\n    @Query(\"select value from group_member where a_group_id_fk = :groupId order by value\")\n    List<String> getAllValuesIncludingNotActive(@Bind(\"groupId\") int groupId);\n\n    @Query(\"insert into whitelisted_ticket(group_member_id_fk, group_link_id_fk, ticket_id_fk, requires_unique_value)\" +\n        \" values(:itemId, :configurationId, :ticketId, :requiresUniqueValue)\")\n    int insertWhitelistedTicket(@Bind(\"itemId\") int itemId, @Bind(\"configurationId\") int configurationId, @Bind(\"ticketId\") int ticketId, @Bind(\"requiresUniqueValue\") Boolean requiresUniqueValue);\n\n    @Query(BY_EVENT_ID +\n        \" and ticket_category_id_fk = :categoryId\" +\n        \" union all select * from group_link_active where event_id_fk = :eventId and ticket_category_id_fk is null\")\n    List<LinkedGroup> findActiveConfigurationsFor(@Bind(\"eventId\") int eventId, @Bind(\"categoryId\") int categoryId);\n\n    @Query(BY_EVENT_ID)\n    List<LinkedGroup> findActiveConfigurationsForEvent(@Bind(\"eventId\") int eventId);\n\n    @Query(\"select count(*) from group_link_active where event_id_fk = :eventId\")\n    Integer countByEventId(@Bind(\"eventId\") int eventId);\n\n    @Query(\"select * from group_link_active where id = :configurationId\")\n    LinkedGroup getConfiguration(@Bind(\"configurationId\") int configurationId);\n\n    @Query(\"select * from group_link where id = :configurationId for update\")\n    LinkedGroup getConfigurationForUpdate(@Bind(\"configurationId\") int configurationId);\n\n    @Query(\"select count(*) from whitelisted_ticket where group_link_id_fk = :configurationId\")\n    int countWhitelistedTicketsForConfiguration(@Bind(\"configurationId\") int configurationId);\n\n    @Query(\"update group_link set a_group_id_fk = :groupId, event_id_fk = :eventId, ticket_category_id_fk = :categoryId, type = :type, match_type = :matchType, max_allocation = :maxAllocation where id = :id\")\n    int updateConfiguration(@Bind(\"id\") int configurationId,\n                            @Bind(\"groupId\") int groupId,\n                            @Bind(\"eventId\") int eventId,\n                            @Bind(\"categoryId\") Integer categoryId,\n                            @Bind(\"type\") LinkedGroup.Type type,\n                            @Bind(\"matchType\") LinkedGroup.MatchType matchType,\n                            @Bind(\"maxAllocation\") Integer maxAllocation);\n\n    @Query(\"update group_link set active = false where id = :id\")\n    int disableLink(@Bind(\"id\") int id);\n\n    @Query(\"update group_link set active = false where a_group_id_fk = :groupId\")\n    int disableAllLinks(@Bind(\"groupId\") int groupId);\n\n    @Query(\"select * from group_member_active wi where wi.a_group_id_fk = :groupId and lower(wi.value) = lower(:value)\")\n    Optional<GroupMember> findItemByValueExactMatch(@Bind(\"groupId\") int groupId, @Bind(\"value\") String value);\n\n    @Query(\"select * from group_member_active wi where wi.a_group_id_fk = :groupId and lower(wi.value) like lower(:value) limit 1\")\n    Optional<GroupMember> findItemEndsWith(@Bind(\"configurationId\") int configurationId,\n                                           @Bind(\"groupId\") int groupId,\n                                           @Bind(\"value\") String value);\n\n    @Query(\"select count(*) from whitelisted_ticket where group_member_id_fk = :itemId and group_link_id_fk = :configurationId\")\n    int countExistingWhitelistedTickets(@Bind(\"itemId\") int itemId,\n                                        @Bind(\"configurationId\") int configurationId);\n\n    @Query(\"delete from whitelisted_ticket where ticket_id_fk in (:ticketIds)\")\n    int deleteExistingWhitelistedTickets(@Bind(\"ticketIds\") List<Integer> ticketIds);\n\n    default void deactivateGroupMember(List<Integer> memberIds, int groupId) {\n        MapSqlParameterSource[] params = memberIds.stream().map(memberId ->\n                new MapSqlParameterSource(\"groupId\", groupId)\n                    .addValue(\"memberId\", memberId)\n                    .addValue(\"disabledPlaceholder\", UUID.randomUUID().toString())\n            ).toArray(MapSqlParameterSource[]::new);\n        getNamedParameterJdbcTemplate().batchUpdate(\"update group_member set active = false, value = 'DISABLED-' || :disabledPlaceholder where id = :memberId and a_group_id_fk = :groupId\", params);\n    }\n\n\n    @Query(\"update a_group set active = false where id = :groupId\")\n    int deactivateGroup(@Bind(\"groupId\") int groupId);\n}\n", "(function () {\n    \"use strict\";\n    var baseServices = angular.module('adminServices', ['angular-growl' , 'ngAnimate']);\n\n    baseServices.config(['$httpProvider', function($httpProvider) {\n        var token = $(\"meta[name='_csrf']\").attr(\"content\");\n        var header = $(\"meta[name='_csrf_header']\").attr(\"content\");\n        $httpProvider.defaults.headers.post['X-Requested-With'] = 'XMLHttpRequest';\n        $httpProvider.defaults.headers.post[header] = token;\n\n        $httpProvider.defaults.headers.patch = angular.copy($httpProvider.defaults.headers.post);\n        $httpProvider.defaults.headers.put = angular.copy($httpProvider.defaults.headers.post);\n        $httpProvider.defaults.headers.delete = angular.copy($httpProvider.defaults.headers.post);\n\n        $httpProvider.interceptors.push(['$rootScope', '$location', '$q', function($rootScope, $location, $q) {\n            return {\n                responseError: function(rejection) {//thanks to https://github.com/witoldsz/angular-http-auth/blob/master/src/http-auth-interceptor.js\n                    var status = rejection.status;\n                    if(status === 401) {\n                        $rootScope.$emit('ErrorNotLoggedIn');\n                        return false;\n                    }\n                    return $q.reject(rejection);\n                }\n            };\n        }]);\n    }]);\n\n    baseServices.service('PaymentProxyService', function($http, HttpErrorHandler) {\n        return {\n            getAllProxies : function(orgId) {\n                return $http.get('/admin/api/paymentProxies/'+orgId).error(HttpErrorHandler.handle);\n            }\n        };\n    });\n\n    baseServices.service('PurchaseContextService', function(EventService, SubscriptionService) {\n        return {\n            findAllReservations: function(type, contextName, page, search, status) {\n                if(type === 'event') {\n                    return EventService.findAllReservations(contextName, page, search, status);\n                } else {\n                    return SubscriptionService.findAllReservations(contextName, page, search, status);\n                }\n            }\n        };\n    })\n\n    baseServices.service('EventService', function($http, HttpErrorHandler, $uibModal, $window, $rootScope, $q, LocationService, $timeout) {\n\n        function copyGeoLocation(event) {\n            event.latitude = event.geolocation.latitude;\n            event.longitude = event.geolocation.longitude;\n            event.zoneId = event.geolocation.timeZone;\n        }\n\n        var service = {\n            data: {},\n            getAllEvents : function() {\n                return $http.get('/admin/api/events').error(HttpErrorHandler.handle);\n            },\n            getAllActiveEvents : function() {\n                return $http.get('/admin/api/active-events').error(HttpErrorHandler.handle);\n            },\n            getAllExpiredEvents : function() {\n                return $http.get('/admin/api/expired-events').error(HttpErrorHandler.handle);\n            },\n            getEvent: function(name) {\n                return $http.get('/admin/api/events/'+name).success(function(result) {\n                    $rootScope.$emit('EventLoaded', result.event);\n                }).error(HttpErrorHandler.handle);\n            },\n            getEventById: function(eventId) {\n                return $http.get('/admin/api/events/id/'+eventId).success(function(result) {\n                    $rootScope.$emit('EventLoaded', result);\n                }).error(HttpErrorHandler.handle);\n            },\n            checkEvent : function(event) {\n                return $http['post']('/admin/api/events/check', event).error(HttpErrorHandler.handle);\n            },\n            createEvent : function(event) {\n                copyGeoLocation(event);\n                return $http['post']('/admin/api/events/new', event).error(HttpErrorHandler.handle);\n            },\n            toggleActivation: function(id, active) {\n                return $http['put']('/admin/api/events/'+id+'/status?active='+active).error(HttpErrorHandler.handle);\n            },\n            updateEventHeader: function(eventHeader) {\n                var update = function() {\n                    return $http['post']('/admin/api/events/'+eventHeader.id+'/header/update', eventHeader).error(HttpErrorHandler.handle);\n                };\n                if(eventHeader.format === 'ONLINE') {\n                    return update();\n                }\n                //\n                if(eventHeader.geolocation && eventHeader.geolocation.latitude) {\n                    copyGeoLocation(eventHeader);\n                    //\n                    return update();\n                } else {\n                    return LocationService.clientGeolocate(eventHeader.location).then(function(geo) {\n                        eventHeader.latitude = geo.latitude;\n                        eventHeader.longitude = geo.longitude;\n                        eventHeader.zoneId = geo.timeZone;\n                        return update();\n                    })\n                }\n\n            },\n            getTicketsForCategory: function(event, ticketCategory, page, search) {\n              return $http.get('/admin/api/events/'+event.shortName+'/category/'+ticketCategory.id+'/ticket', {params: {page: page, search: search}}).error(HttpErrorHandler.handle);\n            },\n            updateEventPrices: function(eventPrices) {\n                return $http['post']('/admin/api/events/'+eventPrices.id+'/prices/update', eventPrices).error(HttpErrorHandler.handle);\n            },\n            saveTicketCategory: function(event, ticketCategory) {\n                var url = angular.isDefined(ticketCategory.id) ? ('/admin/api/events/' + event.id + '/categories/' + ticketCategory.id + '/update') : ('/admin/api/events/' + event.id + '/categories/new');\n                return $http['post'](url, ticketCategory).error(HttpErrorHandler.handle);\n            },\n            toggleTicketLocking: function(event, ticket, category) {\n                return $http['put']('/admin/api/events/' + event.shortName + '/categories/' + category.id + '/tickets/' + ticket.id +'/toggle-locking');\n            },\n            reallocateOrphans : function(srcCategory, targetCategoryId, eventId) {\n                return $http['put']('/admin/api/events/reallocate', {\n                    srcCategoryId: srcCategory.id,\n                    targetCategoryId: targetCategoryId,\n                    eventId: eventId\n                }).error(HttpErrorHandler.handle);\n            },\n            deleteCategory: function(category, event) {\n\n                var modal = $uibModal.open({\n                    size:'md',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/delete-category-modal.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.cancel = function() {\n                            modal.dismiss('canceled');\n                        };\n\n                        $scope.deleteCategory = function() {\n                            $http['delete']('/admin/api/events/'+event.shortName+'/category/'+category.id)\n                                .error(HttpErrorHandler.handle)\n                                .then(function() {\n                                    modal.close('OK');\n                                });\n                        };\n                        $scope.category = category;\n                    }\n                });\n                return modal.result;\n            },\n            unbindTickets: function(event, category) {\n                return $http['put']('/admin/api/events/'+event.shortName+'/category/'+category.id+'/unbind-tickets').error(HttpErrorHandler.handle);\n            },\n            getPendingPayments: function(eventName, forceReload) {\n                service.data.pendingPayments = service.data.pendingPayments || {};\n                var element = service.data.pendingPayments[eventName];\n                var now = moment();\n                if(!angular.isDefined(element) || now.subtract(20, 's').isAfter(element.ts) || forceReload) {\n                    var promise = $http.get('/admin/api/events/'+eventName+'/pending-payments').error(HttpErrorHandler.handle);\n                    element = {\n                        ts: moment(),\n                        payments: promise\n                    };\n                    service.data.pendingPayments[eventName] = element;\n                }\n                return element.payments;\n            },\n            getPendingPaymentsCount: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/pending-payments-count').error(HttpErrorHandler.handle).then(function(res) {var v = parseInt(res.data); return isNaN(v) ? 0 : v; });\n            },\n            registerPayment: function(eventName, reservationId) {\n                return $http['post']('/admin/api/events/'+eventName+'/pending-payments/'+reservationId+'/confirm').error(HttpErrorHandler.handle);\n            },\n            cancelPayment: function(eventName, reservationId, credit, notify) {\n                return $http['delete']('/admin/api/events/'+eventName+'/pending-payments/'+reservationId, {\n                    params: {\n                        credit: credit,\n                        notify: notify\n                    }\n                }).error(HttpErrorHandler.handle);\n            },\n            cancelMatchingPayment: function(eventName, reservationId, transactionId) {\n                return $http['delete']('/admin/api/events/'+eventName+'/reservation/'+reservationId+'/transaction/'+transactionId+'/discard').error(HttpErrorHandler.handle);\n            },\n            sendCodesByEmail: function(eventName, categoryId, pairs) {\n                return $http['post']('/admin/api/events/'+eventName+'/categories/'+categoryId+'/send-codes', pairs).error(HttpErrorHandler.handle);\n            },\n            loadSentCodes: function(eventName, categoryId) {\n                return $http['get']('/admin/api/events/'+eventName+'/categories/'+categoryId+'/sent-codes').error(HttpErrorHandler.handle);\n            },\n            deleteRecipientData: function(eventName, categoryId, codeId) {\n                return $http['delete']('/admin/api/events/'+eventName+'/categories/'+categoryId+'/codes/'+codeId+'/recipient').error(HttpErrorHandler.handle);\n            },\n            getSelectedLanguages: function(eventName) {\n                return $http['get']('/admin/api/events/'+eventName+'/languages').error(HttpErrorHandler.handle);\n            },\n            getAllLanguages: function() {\n                return $http['get']('/admin/api/events-all-languages').error(HttpErrorHandler.handle);\n            },\n            getSupportedLanguages: function() {\n                return $http['get']('/admin/api/events-supported-languages').error(HttpErrorHandler.handle);\n            },\n            getDynamicFieldTemplates: function() {\n                return $http['get']('/admin/api/event/additional-field/templates').error(HttpErrorHandler.handle);\n            },\n            getMessagesPreview: function(eventName, categoryId, messages) {\n                var queryString = angular.isNumber(categoryId) ? '?categoryId='+categoryId : '';\n                return $http['post']('/admin/api/events/'+eventName+'/messages/preview'+queryString, messages).error(HttpErrorHandler.handle);\n            },\n            sendMessages: function(eventName, categoryId, messages) {\n                var queryString = angular.isDefined(categoryId) && categoryId !== \"\" && categoryId !== null ? '?categoryId='+categoryId : '';\n                return $http['post']('/admin/api/events/'+eventName+'/messages/send'+queryString, messages).error(HttpErrorHandler.handle);\n            },\n            getFields : function(eventName) {\n                return $http['get']('/admin/api/events/'+eventName+'/fields');\n            },\n            getAdditionalFields: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/additional-field').error(HttpErrorHandler.handle);\n            },\n            getRestrictedValuesStats: function(eventName, id) {\n                return $http.get('/admin/api/events/'+eventName+'/additional-field/'+id+'/stats').error(HttpErrorHandler.handle);\n            },\n            saveFieldDescription: function(eventName, fieldDescription) {\n                return $http.post('/admin/api/events/'+eventName+'/additional-field/descriptions', fieldDescription);\n            },\n            addField: function(eventName, field) {\n            \treturn $http.post('/admin/api/events/'+eventName+'/additional-field/new', field).error(HttpErrorHandler.handle);\n            },\n            updateField: function(eventName, toUpdate) {\n\n                //new restrictedValues are complex objects, already present restrictedValues are plain string\n                if(toUpdate && toUpdate.restrictedValues && toUpdate.restrictedValues.length > 0) {\n                    var res = [];\n                    for(var i = 0; i < toUpdate.restrictedValues.length; i++) {\n                        res.push(toUpdate.restrictedValues[i].isNew ? toUpdate.restrictedValues[i].value: toUpdate.restrictedValues[i]);\n                    }\n                    toUpdate.restrictedValues = res;\n                }\n                //\n\n                return $http['post']('/admin/api/events/'+eventName+'/additional-field/'+toUpdate.id, toUpdate);\n            },\n            deleteField: function(eventName, id) {\n            \treturn $http['delete']('/admin/api/events/'+eventName+'/additional-field/'+id);\n            },\n            swapFieldPosition: function(eventName, id1, id2) {\n            \treturn $http.post('/admin/api/events/'+eventName+'/additional-field/swap-position/'+id1+'/'+id2, null);\n            },\n            moveField: function(eventName, id, position) {\n                return $http.post('/admin/api/events/'+eventName+'/additional-field/set-position/'+id, null, {\n                    params: {\n                        newPosition: position\n                    }\n                });\n            },\n            getAllReservationStatus : function(eventName) {\n                return $http.get('/admin/api/reservation/event/'+eventName+'/reservations/all-status');\n            },\n            findAllReservations: function(eventName, page, search, status) {\n                return $http.get('/admin/api/reservation/event/'+eventName+'/reservations/list', {params: {page: page, search: search, status: status}});\n            },\n            deleteEvent: function(event) {\n                var modal = $uibModal.open({\n                    size:'lg',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/delete-event-modal.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.cancel = function() {\n                            modal.dismiss('canceled');\n                        };\n\n                        $scope.deleteEvent = function() {\n                            $http['delete']('/admin/api/events/'+event.id).then(function() {\n                                modal.close('OK');\n                            });\n                        };\n                        $scope.event = event;\n                    }\n                });\n                return modal.result;\n            },\n\n            exportAttendees: function(event) {\n                var modal = $uibModal.open({\n                    size:'lg',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/select-field-modal.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.selected = {};\n                        $scope.format = 'excel';\n                        service.getFields(event.shortName).then(function(fields) {\n                            $scope.fields = fields.data;\n                            angular.forEach(fields.data, function(v) {\n                                $scope.selected[v.key] = false;\n                            })\n                        });\n\n                        $scope.selectAll = function() {\n                            angular.forEach($scope.selected, function(v,k) {\n                                $scope.selected[k] = true;\n                            });\n                        };\n\n                        $scope.deselectAll = function() {\n                            angular.forEach($scope.selected, function(v,k) {\n                                $scope.selected[k] = false;\n                            });\n                        };\n\n                        $scope.download = function() {\n                            var queryString = \"format=\"+$scope.format+\"&\";\n                            angular.forEach($scope.selected, function(v,k) {\n                                if(v) {\n                                    queryString+=\"fields=\"+k+\"&\";\n                                }\n                            });\n                            var pathName = $window.location.pathname;\n                            if(!pathName.endsWith(\"/\")) {\n                                pathName = pathName + \"/\";\n                            }\n                            $window.open(pathName+\"api/events/\"+event.shortName+\"/export?\"+queryString);\n                        };\n                    }\n                });\n            },\n            removeTicketModal: function(event, reservationId, ticketId, invoiceRequested) {\n                var deferred = $q.defer();\n                var promise = deferred.promise;\n\n                var modal = $uibModal.open({\n                    size:'lg',\n                    template:'<tickets-remove event=\"event\" can-generate-credit-note=\"invoiceRequested\" reservation-id=\"reservationId\" ticket-id=\"ticketId\" on-success=\"success(result)\" on-cancel=\"close()\"></tickets-remove>',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        $scope.event = event;\n                        $scope.ticketId = ticketId;\n                        $scope.reservationId = reservationId;\n                        $scope.invoiceRequested = invoiceRequested;\n                        $scope.close = function() {\n                            $scope.$dismiss(false);\n                        };\n\n                        $scope.success = function (result) {\n                            $scope.$close(result);\n                        }\n                    }\n                });\n                return modal.result;\n            },\n\n            removeTickets: function(eventName, reservationId, ticketIds, ticketIdsToRefund, notify, issueCreditNote) {\n                return $http.post('/admin/api/reservation/event/'+eventName+'/'+reservationId+'/remove-tickets', {\n                    ticketIds: ticketIds,\n                    refundTo: ticketIdsToRefund,\n                    notify : notify,\n                    issueCreditNote: issueCreditNote\n                });\n            },\n\n            countInvoices: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/invoices/count').error(HttpErrorHandler.handle);\n            },\n\n            getTicketsStatistics: function(eventName, from, to) {\n                return $http.get('/admin/api/events/'+eventName+'/ticket-sold-statistics', {params: {from: from, to: to}});\n            },\n\n            rearrangeCategories: function(event) {\n                var modal = $uibModal.open({\n                    size:'lg',\n                    templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/rearrange-categories.html',\n                    backdrop: 'static',\n                    controller: function($scope) {\n                        var ctrl = this;\n                        ctrl.event = event;\n                        var setOrdinal = function(categories) {\n                            for(var i=0, o=1; i < categories.length; i++, o++) {\n                                var category = categories[i];\n                                category.ordinal = o;\n                            }\n                            return categories;\n                        };\n                        ctrl.categories = event.ticketCategories.map(function(category) {\n                            return {\n                                id: category.id,\n                                name: category.name,\n                                ordinal: category.ordinal\n                            };\n                        });\n                        ctrl.sortedCategories = setOrdinal(_.sortByAll(ctrl.categories, ['ordinal', 'formattedInception', 'id']));\n                        $scope.$on('categories-bag.drop', function (e, el) {\n                            $timeout(function() {\n                                ctrl.sortedCategories = setOrdinal(ctrl.sortedCategories);\n                            }, 10);\n                        });\n                        ctrl.swap = function(index, category, up) {\n                            var list = ctrl.sortedCategories.slice();\n                            var target = up ? index - 1 : index + 1;\n                            var toBeSwapped = list[target];\n                            list[target] = category;\n                            list[index] = toBeSwapped;\n                            ctrl.sortedCategories.length = 0;\n                            for(var i=0; i<list.length; i++) {\n                                ctrl.sortedCategories.push(list[i]);\n                            }\n                            setOrdinal(ctrl.sortedCategories);\n                        };\n                        ctrl.save = function() {\n                            $scope.$close(ctrl.sortedCategories);\n                        };\n                        ctrl.dismiss = function() {\n                            $scope.$dismiss(false);\n                        }\n\n                    },\n                    controllerAs:'$ctrl'\n                });\n                return modal.result.then(function(categories) {\n                    return $http.put('/admin/api/events/'+event.shortName+'/rearrange-categories', categories).error(HttpErrorHandler.handle);\n                });\n            },\n\n            createAdditionalService: function(eventId, additionalService) {\n                return $http.post('/admin/api/event/'+eventId+'/additional-services/', additionalService).error(HttpErrorHandler.handle);\n            },\n\n            updateEventMetadata: function(eventName, metadata) {\n                return $http.put('/admin/api/events/'+eventName+'/metadata', metadata).error(HttpErrorHandler.handle);\n            },\n            retrieveMetadata: function(eventName) {\n                return $http.get('/admin/api/events/'+eventName+'/metadata').error(HttpErrorHandler.handle);\n            },\n\n            updateCategoryMetadata: function(eventName, categoryId, metadata) {\n                return $http.put('/admin/api/events/'+eventName+'/category/'+categoryId+'/metadata', metadata).error(HttpErrorHandler.handle);\n            },\n            retrieveCategoryMetadata: function(eventName, categoryId) {\n                return $http.get('/admin/api/events/'+eventName+'/category/'+categoryId+'/metadata').error(HttpErrorHandler.handle);\n            },\n            executeCapability: function(eventName, capability, parameters) {\n                return $http.post('/admin/api/events/'+eventName+'/capability/'+capability, parameters);\n            }\n        };\n        return service;\n    });\n\n    baseServices.service(\"LocationService\", function($http, $q, HttpErrorHandler) {\n\n        var reqCounter = 0;\n\n        function getMapUrl(latitude, longitude) {\n            return $http.get('/admin/api/location/static-map-image', {params: {lat: latitude, lng: longitude}}).then(function(res) {\n                return res.data;\n            });\n        }\n\n\n        function handleGoogleGeolocate(location, locService, apiKeyAndProvider, resolve, reject) {\n            var key = apiKeyAndProvider.keys['MAPS_CLIENT_API_KEY'];\n\n            var keyParam = key ? ('&key='+encodeURIComponent(key)) : '';\n\n            if(!window.google || !window.google.maps) {\n\n                reqCounter++;\n\n                var script = document.createElement('script');\n\n                var callBackName = 'clientGeolocate'+reqCounter;\n\n                script.src = 'https://maps.googleapis.com/maps/api/js?libraries=places&callback='+callBackName+keyParam;\n                document.head.appendChild(script);\n                window[callBackName] = function() {\n                    search();\n                }\n            } else {\n                search();\n            }\n\n            function search() {\n                var geocoder = new window.google.maps.Geocoder();\n                geocoder.geocode({'address': location}, function(results, status) {\n                    if (status === 'OK') {\n                        var ret = {};\n                        ret.latitude = \"\"+results[0].geometry.location.lat()\n                        ret.longitude = \"\"+results[0].geometry.location.lng()\n                        $q.all([getMapUrl(ret.latitude, ret.longitude), locService.getTimezone(ret.latitude, ret.longitude)]).then(function(success) {\n                            ret.mapUrl = success[0];\n                            var tz = success[1];\n                            if(tz.data) {\n                                ret.timeZone = tz.data;\n                            }\n                            resolve(ret);\n                        }, function () {\n                            reject();\n                        })\n\n                    } else {\n                        reject();\n                    }\n                });\n            }\n        }\n\n        \n        function handleHEREGeolocate(location, locService, apiKeyAndProvider, resolve, reject) {\n            var apiKey = apiKeyAndProvider.keys['MAPS_HERE_API_KEY'];\n            $http.get('https://geocoder.ls.hereapi.com/6.2/geocode.json', {params: {apiKey: apiKey, searchtext: location}}).then(function(res) {\n                var view = res.data.Response.View;\n                if(view.length > 0 && view[0].Result.length > 0 && view[0].Result[0].Location) {\n                    var location = view[0].Result[0].Location;\n                    var pos = location.DisplayPosition;\n                    var ret = {latitude: pos.Latitude, longitude: pos.Longitude};\n\n                    $q.all([getMapUrl(ret.latitude, ret.longitude), locService.getTimezone(ret.latitude, ret.longitude)]).then(function(success) {\n                        ret.mapUrl = success[0];\n                        var tz = success[1];\n                        if(tz.data) {\n                            ret.timeZone = tz.data;\n                        }\n                        resolve(ret);\n                    }, function () {\n                        reject();\n                    })\n                } else {\n                    reject();\n                }\n\n            }, function () {\n                reject();\n            })\n        }\n\n        return {\n            mapApiKey: function() {\n                return $http.get('/admin/api/location/map-provider-client-api-key').then(function(res) {\n                    return res.data;\n                });\n            },\n            clientGeolocate: function(location) {\n                var locService = this;\n                return $q(function(resolve, reject) {\n\n                    locService.mapApiKey().then(function(apiKeyAndProvider) {\n\n                        if(apiKeyAndProvider.provider === 'GOOGLE') {\n                            handleGoogleGeolocate(location, locService, apiKeyAndProvider, resolve, reject);\n                        } else if (apiKeyAndProvider.provider === 'HERE') {\n                            handleHEREGeolocate(location, locService, apiKeyAndProvider, resolve, reject);\n                        } else {\n                            resolve({latitude: null, longitude: null});\n                        }\n                    })\n\n                });\n            },\n            getTimezone : function(latitude, longitude) {\n              return $http.get('/admin/api/location/timezone', {params: {lat: latitude, lng: longitude}});\n            },\n            getTimezones: function() {\n                return $http.get('/admin/api/location/timezones');\n            },\n            getMapUrl : getMapUrl\n        };\n    });\n\n    baseServices.service('ValidationService', function(NotificationHandler) {\n        return {\n            validationPerformer: function($q, validator, data, form) {\n                var deferred = $q.defer();\n                validator(data).success(this.validationResultHandler(form, deferred)).error(function(error) {\n                    deferred.reject(error);\n                });\n                return deferred.promise;\n            },\n            validationResultHandler: function(form, deferred) {\n                return function(validationResult) {\n                    if(validationResult.errorCount > 0) {\n                        if(form.$setError) {\n                            angular.forEach(validationResult.validationErrors, function(error) {\n                                form.$setError(error.fieldName, error.message);\n                            });\n                        } else if (form.$setValidity) {\n                            angular.forEach(validationResult.validationErrors, function(error) {\n                                form[error.fieldName].$setValidity(error.code, false);\n                            });\n                        } else {\n                            var firstError = validationResult.validationErrors[0];\n                            NotificationHandler.showError(firstError.description);\n                        }\n                        deferred.reject('invalid form');\n                    }\n                    deferred.resolve();\n                };\n            }\n        }\n    });\n\n    baseServices.service(\"HttpErrorHandler\", ['$log', 'NotificationHandler', function($log, NotificationHandler) {\n        var getMessage = function(body, status) {\n            switch(status) {\n                case 400:\n                    return 'Malformed Request';\n                case 404:\n                    return 'Resource not found';\n                case 403:\n                    return 'Your account is not authorized to perform this operation.';\n                case 500:\n                    return 'Internal Server Error: ' + body;\n                default:\n                    return 'Connection Error';\n            }\n        };\n        return {\n            handle : function(body, status) {\n                var message = getMessage(body, status);\n                $log.warn(message, status, body);\n                NotificationHandler.showError(message);\n            }\n        };\n    }]);\n\n    baseServices.service(\"NotificationHandler\", [\"growl\", \"$sanitize\", function (growl, $sanitize) {\n        var config = {ttl: 5000, disableCountDown: true};\n        var sanitize = function(message) {\n            var sanitized = $sanitize(message);\n            return sanitized.split(' ').map(function(part) {\n                return encodeURIComponent(part);\n            }).join(' ');\n        };\n        return {\n            showSuccess: function (message) {\n                return growl.success(sanitize(message), config);\n            },\n            showWarning: function (message) {\n                return growl.warning(sanitize(message), config);\n            },\n            showInfo : function (message) {\n                return growl.info(sanitize(message), config);\n            },\n            showError : function (message) {\n                return growl.error(sanitize(message), config);\n            }\n        }\n\n    }]);\n\n    baseServices.service(\"PriceCalculator\", function() {\n        var instance = {\n            calculateTotalPrice: function(event, viewMode) {\n                if(isNaN(event.regularPrice) || isNaN(event.vatPercentage)) {\n                    return '0.00';\n                }\n                var vat = numeral(0.0);\n                if((viewMode && angular.isDefined(event.id)) || !event.vatIncluded) {\n                    vat = instance.applyPercentage(event.regularPrice, event.vatPercentage);\n                }\n                return numeral(vat.add(event.regularPrice).format('0.00')).value();\n            },\n            calcBarValue: function(category) {\n                if(category.bounded) {\n                    return category.maxTickets || 1;\n                }\n                return 0;\n            },\n            calcCategoryPricePercent: function(category, event, editMode) {\n                if(isNaN(event.regularPrice) || isNaN(category.price)) {\n                    return '0.00';\n                }\n                return instance.calcPercentage(category.price, event.regularPrice).format('0.00');\n            },\n            calcCategoryPrice: function(category, event) {\n                if(isNaN(event.vatPercentage) || isNaN(category.price)) {\n                    return '0.00';\n                }\n                var vat = numeral(0.0);\n                if(event.vatIncluded) {\n                    vat = instance.applyPercentage(category.price, event.vatPercentage);\n                }\n                return numeral(category.price).add(vat).format('0.00');\n            },\n            calcPercentage: function(fraction, total) {\n                if(isNaN(fraction) || isNaN(total)){\n                    return numeral(0.0);\n                }\n                return numeral(numeral(fraction).divide(total).multiply(100).format('0.00'));\n            },\n            applyPercentage: function(total, percentage) {\n                return numeral(numeral(percentage).divide(100).multiply(total).format('0.00'));\n            }\n        };\n        return instance;\n    });\n    \n    baseServices.service(\"PromoCodeService\", function($http, HttpErrorHandler) {\n\n        function addUtfOffsetIfNecessary(promoCode) {\n            if(promoCode.eventId == null) {\n                promoCode.utcOffset = (new Date()).getTimezoneOffset()*-60; //in seconds\n            }\n        }\n\n        return {\n                add : function(promoCode) {\n                    addUtfOffsetIfNecessary(promoCode);\n                    return $http['post']('/admin/api/promo-code', promoCode).error(HttpErrorHandler.handle);\n                },\n                remove: function(promoCodeId) {\n                    return $http['delete']('/admin/api/promo-code/' + promoCodeId).error(HttpErrorHandler.handle);\n                },\n                list: function(eventId) {\n                    return $http.get('/admin/api/events/' + eventId + '/promo-code').error(HttpErrorHandler.handle);\n                },\n                listOrganization : function(organizationId) {\n                    return $http.get('/admin/api/organization/' + organizationId + '/promo-code').error(HttpErrorHandler.handle);\n                },\n                countUse : function(promoCodeId) {\n                    return $http.get('/admin/api/promo-code/' + promoCodeId + '/count-use');\n                },\n                disable: function(promoCodeId) {\n                    return $http['post']('/admin/api/promo-code/' + promoCodeId + '/disable');\n                },\n                update: function(promoCodeId, toUpdate) {\n                    addUtfOffsetIfNecessary(toUpdate);\n                    return $http.post('/admin/api/promo-code/' + promoCodeId, toUpdate);\n                },\n                getUsageDetails: function(promoCodeId, eventShortName) {\n                    return $http.get('/admin/api/promo-code/' + promoCodeId + '/detailed-usage', {\n                        params: {\n                            eventShortName\n                        }\n                    });\n                }\n        };\n    });\n\n    baseServices.service(\"CheckInService\", ['$http', 'HttpErrorHandler', '$window', function($http, HttpErrorHandler, $window) {\n        return {\n            findAllTicketIds : function(eventId) {\n                var sessionStorageKey = 'CHECK_IN_TIMESTAMP_'+eventId;\n                var since = $window.sessionStorage.getItem(sessionStorageKey);\n                var sinceParam = since ? '?changedSince='+since : '';\n                return $http.get('/admin/api/check-in/' + eventId + '/ticket-identifiers' + sinceParam)\n                    .then(function(resp) {\n                        $window.sessionStorage.setItem(sessionStorageKey, resp.headers('Alfio-TIME'));\n                        return resp;\n                    }, HttpErrorHandler.handle);\n            },\n\n            downloadTickets: function(eventId, ids) {\n                return $http.post('/admin/api/check-in/'+eventId+'/tickets', ids).error(HttpErrorHandler.handle);\n            },\n            \n            getTicket: function(eventId, code) {\n                var ticketIdentifier = code.split('/')[0];\n                return $http.get('/admin/api/check-in/' + eventId + '/ticket/' + ticketIdentifier + \"?qrCode=\" + encodeURIComponent(code)).error(HttpErrorHandler.handle);\n            },\n            \n            checkIn: function(eventId, ticket) {\n                var ticketIdentifier = ticket.code.split('/')[0];\n                return $http['post']('/admin/api/check-in/' + eventId + '/ticket/' + ticketIdentifier, ticket).error(HttpErrorHandler.handle);\n            },\n\n            manualCheckIn: function(ticket) {\n                return $http['post']('/admin/api/check-in/' + ticket.eventId + '/ticket/' + ticket.uuid + '/manual-check-in', ticket).error(HttpErrorHandler.handle);\n            },\n\n            revertCheckIn: function(ticket) {\n                return $http['post']('/admin/api/check-in/' + ticket.eventId + '/ticket/' + ticket.uuid + '/revert-check-in', ticket).error(HttpErrorHandler.handle);\n            },\n            \n            confirmPayment: function(eventId, ticket) {\n                var ticketIdentifier = ticket.code.split('/')[0];\n                return $http['post']('/admin/api/check-in/' + eventId + '/ticket/' + ticketIdentifier + '/confirm-on-site-payment').error(HttpErrorHandler.handle);\n            }\n        };\n    }]);\n\n    baseServices.service(\"FileUploadService\", function($http, HttpErrorHandler) {\n        return {\n            upload : function(file) {\n                return $http['post']('/admin/api/file/upload', file).error(HttpErrorHandler.handle);\n            },\n\n            uploadImageWithResize: function(file) {\n                return $http['post']('/admin/api/file/upload?resizeImage=true', file).error(HttpErrorHandler.handle);\n            }\n        };\n    });\n\n    baseServices.service('WaitingQueueService', ['$http', 'HttpErrorHandler', function($http, HttpErrorHandler) {\n        return {\n            getWaitingQueueStatus: function(eventName) {\n                return $http.get('/admin/api/event/'+eventName+'/waiting-queue/status').error(HttpErrorHandler.handle);\n            },\n            setPaused: function(eventName, status) {\n                return $http.put('/admin/api/event/'+eventName+'/waiting-queue/status', {status: status}).error(HttpErrorHandler.handle);\n            },\n            countSubscribers: function(eventName) {\n                return $http.get('/admin/api/event/'+eventName+'/waiting-queue/count').error(HttpErrorHandler.handle);\n            },\n            loadAllSubscribers: function(eventName) {\n                return $http.get('/admin/api/event/'+eventName+'/waiting-queue/load').error(HttpErrorHandler.handle);\n            },\n            removeSubscriber: function(eventName, subscriber) {\n                return $http['delete']('/admin/api/event/'+eventName+'/waiting-queue/subscriber/'+subscriber.id).error(HttpErrorHandler.handle);\n            },\n            restoreSubscriber: function(eventName, subscriber) {\n                return $http['put']('/admin/api/event/'+eventName+'/waiting-queue/subscriber/'+subscriber.id+'/restore').error(HttpErrorHandler.handle);\n            }\n        };\n    }]);\n\n    baseServices.service('UtilsService', ['$http', 'HttpErrorHandler', function($http, HttpErrorHandler) {\n        return {\n            generateShortName: function(displayName) {\n                return $http.get('/admin/api/utils/short-name/generate?displayName='+displayName).error(HttpErrorHandler.handle);\n            },\n            validateShortName: function(shortName) {\n                return $http['post']('/admin/api/utils/short-name/validate', null, {params: {shortName: shortName}}).error(HttpErrorHandler.handle);\n            },\n            renderCommonMark: function(text) {\n            \treturn $http.get('/admin/api/utils/render-commonmark', {params: {text: text}}).error(HttpErrorHandler.handle);\n            },\n            getApplicationInfo: function() {\n                return $http.get('/admin/api/utils/alfio/info').error(HttpErrorHandler.handle);\n            },\n            getAvailableCurrencies: function() {\n                return $http.get('/admin/api/utils/currencies').error(HttpErrorHandler.handle);\n            },\n            logout: function() {\n                return $http.post(\"/logout\", {}).error(HttpErrorHandler.handle);\n            },\n            getFirstTranslation: function(localized) {\n                var keys = Object.keys(localized);\n                if(keys.length > 0) {\n                    return localized[keys[0]];\n                }\n                return null;\n            }\n        };\n    }]);\n\n    baseServices.service('CountriesService', ['$http', 'HttpErrorHandler', '$q', function($http, HttpErrorHandler) {\n        var request = $http.get('/admin/api/utils/countriesForVat').then(function(res) {\n            return res.data;\n        }, HttpErrorHandler.handle);\n        return {\n            getCountries: function() {\n                return request;\n            },\n\n            getDescription: function(countryCode) {\n                return request.then(function(countries) {\n                    return countries[countryCode] || countryCode;\n                });\n            }\n\n        };\n    }]);\n\n    baseServices.service('MenuButtonService', ['EventService', '$window', '$uibModal', 'NotificationHandler', function(EventService, $window, $uibModal, NotificationHandler) {\n        return {\n            configureMenu: function(ctrl) {\n                ctrl.openFieldSelectionModal = function() {\n                    EventService.exportAttendees(ctrl.event);\n                };\n                ctrl.downloadSponsorsScan = function() {\n                    var pathName = $window.location.pathname;\n                    if(!pathName.endsWith(\"/\")) {\n                        pathName = pathName + \"/\";\n                    }\n                    $window.open(pathName+\"api/events/\"+ctrl.event.shortName+\"/sponsor-scan/export\");\n                };\n                ctrl.openWaitingQueueModal = function() {\n                    var outCtrl = ctrl;\n                    var modal = $uibModal.open({\n                        size:'lg',\n                        templateUrl: window.ALFIO_CONTEXT_PATH + '/resources/angular-templates/admin/partials/event/fragment/download-waiting-queue.html',\n                        backdrop: 'static',\n                        controllerAs: 'ctrl',\n                        controller: function($scope) {\n                            var ctrl = this;\n                            $scope.format = 'excel';\n\n                            $scope.download = function() {\n                                var queryString = \"format=\"+$scope.format;\n                                var pathName = $window.location.pathname;\n                                if(!pathName.endsWith(\"/\")) {\n                                    pathName = pathName + \"/\";\n                                }\n                                $window.open(pathName+\"api/event/\" + outCtrl.event.shortName + \"/waiting-queue/download?\"+queryString);\n                            };\n\n                            ctrl.close = function() {\n                                modal.close();\n                            }\n                        }\n                    });\n                };\n                ctrl.downloadInvoices = function(type) {\n                    EventService.countInvoices(ctrl.event.shortName).then(function (res) {\n                        var count = res.data;\n                        if(count > 0) {\n                            var pathName = $window.location.pathname;\n                            if(!pathName.endsWith(\"/\")) {\n                                pathName = pathName + \"/\";\n                            }\n                            var suffix = '';\n                            if(type === 'xls') {\n                                suffix = '-xls';\n                            }\n                            $window.open(pathName+\"api/events/\"+ctrl.event.shortName+\"/all-documents\"+suffix);\n                        } else {\n                            NotificationHandler.showInfo(\"No invoices have been found.\");\n                        }\n                    });\n                };\n            }\n        }\n    }]);\n\n    baseServices.service('ImageTransformService', ['FileUploadService', '$window', '$q', function(FileUploadService, $window, $q) {\n        return {\n            transformAndUploadImages: function(files) {\n                var deferred = $q.defer();\n                var reader = new FileReader();\n                reader.onload = function(e) {\n                    var imageBase64 = e.target.result;\n                    var fileType = files[0].type;\n                    var fileName = files[0].name;\n                    var fileContent = imageBase64.substring(imageBase64.indexOf('base64,') + 7);\n                    if (fileType=== 'image/svg+xml') {\n                        var img = new Image();\n                        var fromSvgToPng = function(image) {\n                            var cnv = document.createElement('canvas');\n                            cnv.width = image.width;\n                            cnv.height = image.height;\n                            var canvasCtx = cnv.getContext('2d');\n                            canvasCtx.drawImage(image, 0, 0);\n                            var imgData = cnv.toDataURL('image/png');\n                            img.remove();\n                            fileType = \"image/png\";\n                            fileName = fileName+\".png\";\n                            fileContent = imgData.substring(imgData.indexOf('base64,') + 7);\n                            FileUploadService.uploadImageWithResize({file : fileContent, type : fileType, name : fileName}).then(function(res) {\n                                deferred.resolve({\n                                    imageBase64: imgData,\n                                    fileBlobId: res.data\n                                });\n                            }, function(err) {\n                                deferred.reject(null); // error is already notified by the NotificationService\n                            });\n                        };\n                        var parser = new DOMParser();\n                        var svgRoot = parser.parseFromString(atob(fileContent), 'text/xml').getElementsByTagName(\"svg\")[0];\n                        if (svgRoot.hasAttribute('height')) {\n                            img.height = svgRoot.getAttribute('height');\n                            img.width = svgRoot.getAttribute('width');\n                        } else {\n                            img.height = 500;\n                        }\n                        img.setAttribute('aria-hidden', 'true');\n                        img.style.position = 'absolute';\n                        img.style.top = '-10000px';\n                        img.style.left = '-10000px';\n                        img.onload = function() {\n                            // see FF limitation https://stackoverflow.com/a/61195034\n                            // we need to set in a explicit way the size _inside_ the svg\n                            svgRoot.setAttribute('width', img.width+'px');\n                            svgRoot.setAttribute('height', img.height+'px');\n                            var serializedSvg = new XMLSerializer().serializeToString(svgRoot);\n                            img.onload = function() {\n                                fromSvgToPng(img);\n                            }\n                            img.src = 'data:image/svg+xml;base64,'+btoa(serializedSvg);\n                        };\n                        $window.document.body.appendChild(img);\n                        img.src = imageBase64;\n                    } else {\n                        FileUploadService.uploadImageWithResize({file : fileContent, type : fileType, name : fileName}).then(function(res) {\n                            deferred.resolve({\n                                imageBase64: imageBase64,\n                                fileBlobId: res.data\n                            });\n                        }, function(err) {\n                            deferred.reject(null); // error is already notified by the NotificationService\n                        });\n                    }\n                };\n                if (files.length <= 0) {\n                    deferred.reject('Your image was not uploaded correctly.Please upload the image again');\n                } else if (!((files[0].type === 'image/png') || (files[0].type === 'image/jpeg') || (files[0].type === 'image/gif') || (files[0].type === 'image/svg+xml'))) {\n                    deferred.reject('Only PNG, JPG, GIF or SVG image files are accepted');\n                } else if (files[0].size > (1024 * 200)) {\n                    deferred.reject('Image size exceeds the allowable limit 200KB');\n                } else {\n                    reader.readAsDataURL(files[0]);\n                }\n                return deferred.promise;\n            }\n        };\n    }])\n})();", "/**\n * This file is part of alf.io.\n *\n * alf.io is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * alf.io is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with alf.io.  If not, see <http://www.gnu.org/licenses/>.\n */\npackage alfio.manager;\n\nimport alfio.TestConfiguration;\nimport alfio.config.DataSourceConfiguration;\nimport alfio.config.Initializer;\nimport alfio.manager.user.UserManager;\nimport alfio.model.Event;\nimport alfio.model.Ticket;\nimport alfio.model.TicketCategory;\nimport alfio.model.group.Group;\nimport alfio.model.group.LinkedGroup;\nimport alfio.model.metadata.AlfioMetadata;\nimport alfio.model.modification.*;\nimport alfio.model.result.Result;\nimport alfio.repository.EventRepository;\nimport alfio.repository.GroupRepository;\nimport alfio.repository.TicketRepository;\nimport alfio.repository.system.ConfigurationRepository;\nimport alfio.repository.user.AuthorityRepository;\nimport alfio.repository.user.OrganizationRepository;\nimport alfio.repository.user.UserRepository;\nimport alfio.test.util.IntegrationTestUtil;\nimport alfio.util.BaseIntegrationTest;\nimport alfio.util.ClockProvider;\nimport org.apache.commons.lang3.time.DateUtils;\nimport org.apache.commons.lang3.tuple.Pair;\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\nimport java.time.LocalTime;\nimport java.util.*;\n\nimport static alfio.test.util.IntegrationTestUtil.*;\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\n@ContextConfiguration(classes = {DataSourceConfiguration.class, TestConfiguration.class})\n@ActiveProfiles({Initializer.PROFILE_DEV, Initializer.PROFILE_DISABLE_JOBS, Initializer.PROFILE_INTEGRATION_TEST})\n@Transactional\npublic class GroupManagerIntegrationTest extends BaseIntegrationTest {\n\n    @Autowired\n    private EventManager eventManager;\n    @Autowired\n    private OrganizationRepository organizationRepository;\n    @Autowired\n    private UserManager userManager;\n    @Autowired\n    private UserRepository userRepository;\n    @Autowired\n    private AuthorityRepository authorityRepository;\n    @Autowired\n    private TicketRepository ticketRepository;\n    @Autowired\n    private ConfigurationRepository configurationRepository;\n    @Autowired\n    private EventRepository eventRepository;\n    @Autowired\n    private GroupRepository groupRepository;\n    @Autowired\n    private GroupManager groupManager;\n    @Autowired\n    private TicketReservationManager ticketReservationManager;\n\n    @BeforeEach\n    public void setup() {\n        IntegrationTestUtil.ensureMinimalConfiguration(configurationRepository);\n        initAdminUser(userRepository, authorityRepository);\n    }\n\n    @Test\n    public void testLinkToEvent() {\n\n        List<TicketCategoryModification> categories = Collections.singletonList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 10,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(2), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> pair = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n        Event event = pair.getKey();\n        Group group = groupManager.createNew(\"test\", \"This is a test\", event.getOrganizationId());\n        assertNotNull(group);\n        LinkedGroupModification modification = new LinkedGroupModification(null, group.getId(), event.getId(), null, LinkedGroup.Type.ONCE_PER_VALUE, LinkedGroup.MatchType.FULL, null);\n        LinkedGroup configuration = groupManager.createLink(group.getId(), event.getId(), modification);\n        assertNotNull(configuration);\n        List<TicketCategory> ticketCategories = eventManager.loadTicketCategories(event);\n        int categoryId = ticketCategories.get(0).getId();\n        assertTrue(groupManager.isGroupLinked(event.getId(), categoryId));\n        List<LinkedGroup> activeConfigurations = groupRepository.findActiveConfigurationsFor(event.getId(), categoryId);\n        assertFalse(activeConfigurations.isEmpty(), \"ActiveConfigurations should be empty\");\n        assertEquals(1, activeConfigurations.size());\n        assertEquals(configuration.getId(), activeConfigurations.get(0).getId());\n        assertFalse(groupManager.isAllowed(\"test@test.ch\", event.getId(), categoryId), \"Group is empty, therefore no value is allowed\");\n        Result<Integer> items = groupManager.insertMembers(group.getId(), Collections.singletonList(new GroupMemberModification(null,\"test@test.ch\", \"description\")));\n        assertTrue(items.isSuccess());\n        assertEquals(Integer.valueOf(1), items.getData());\n        assertTrue(groupManager.isAllowed(\"test@test.ch\", event.getId(), categoryId));\n\n        TicketReservationModification ticketReservation = new TicketReservationModification();\n        ticketReservation.setAmount(1);\n        ticketReservation.setTicketCategoryId(categoryId);\n\n        String reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(new TicketReservationWithOptionalCodeModification(ticketReservation, Optional.empty())),\n            Collections.emptyList(), DateUtils.addDays(new Date(), 1), Optional.empty(), Locale.ENGLISH, false, null);\n\n        Ticket ticket = ticketRepository.findFirstTicketInReservation(reservationId).orElseThrow(NullPointerException::new);\n        ticketRepository.updateTicketOwnerById(ticket.getId(), \"test@test.ch\", \"This is a Test\", \"This is\", \"a Test\");\n\n        ticket = ticketRepository.findFirstTicketInReservation(reservationId).orElseThrow(NullPointerException::new);\n        assertTrue(groupManager.acquireMemberForTicket(ticket));\n\n        reservationId = ticketReservationManager.createTicketReservation(event, Collections.singletonList(new TicketReservationWithOptionalCodeModification(ticketReservation, Optional.empty())),\n            Collections.emptyList(), DateUtils.addDays(new Date(), 1), Optional.empty(), Locale.ENGLISH, false, null);\n\n        ticket = ticketRepository.findFirstTicketInReservation(reservationId).orElseThrow(NullPointerException::new);\n        assertFalse(groupManager.acquireMemberForTicket(ticket), \"shouldn't be allowed\");\n\n    }\n\n    @Test\n    public void testDuplicates() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 10,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(2), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> pair = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n        Event event = pair.getKey();\n        Group group = groupManager.createNew(\"test\", \"This is a test\", event.getOrganizationId());\n        assertNotNull(group);\n        LinkedGroupModification modification = new LinkedGroupModification(null, group.getId(), event.getId(), null, LinkedGroup.Type.ONCE_PER_VALUE, LinkedGroup.MatchType.FULL, null);\n        LinkedGroup configuration = groupManager.createLink(group.getId(), event.getId(), modification);\n        assertNotNull(configuration);\n        Result<Integer> items = groupManager.insertMembers(group.getId(), Arrays.asList(new GroupMemberModification(null,\"test@test.ch\", \"description\"), new GroupMemberModification(null,\"test@test.ch\", \"description\")));\n        Assertions.assertFalse(items.isSuccess());\n        assertEquals(\"value.duplicate\", items.getFirstErrorOrNull().getCode());\n        assertEquals(\"test@test.ch\", items.getFirstErrorOrNull().getDescription());\n    }\n\n    @Test\n    void testEscape() {\n        List<TicketCategoryModification> categories = Collections.singletonList(\n            new TicketCategoryModification(null, \"default\", TicketCategory.TicketAccessType.INHERIT, 10,\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(1), LocalTime.now(ClockProvider.clock())),\n                new DateTimeModification(LocalDate.now(ClockProvider.clock()).plusDays(2), LocalTime.now(ClockProvider.clock())),\n                DESCRIPTION, BigDecimal.TEN, false, \"\", false, null, null, null, null, null, 0, null, null, AlfioMetadata.empty()));\n        Pair<Event, String> pair = initEvent(categories, organizationRepository, userManager, eventManager, eventRepository);\n        Event event = pair.getKey();\n        Group group = groupManager.createNew(\"test > 1\", \"This is a test < 1\", event.getOrganizationId());\n        assertNotNull(group);\n        assertEquals(\"This is a test &lt; 1\", group.getDescription());\n        assertEquals(\"test &gt; 1\", group.getName());\n        LinkedGroupModification modification = new LinkedGroupModification(null, group.getId(), event.getId(), null, LinkedGroup.Type.ONCE_PER_VALUE, LinkedGroup.MatchType.FULL, null);\n        LinkedGroup configuration = groupManager.createLink(group.getId(), event.getId(), modification);\n        assertNotNull(configuration);\n        Result<Integer> items = groupManager.insertMembers(group.getId(), List.of(new GroupMemberModification(null,\"test@test.ch\", \"description <>\")));\n        assertTrue(items.isSuccess());\n        var persistedGroup = groupManager.loadComplete(group.getId()).orElseThrow();\n        assertEquals(\"description &lt;&gt;\", persistedGroup.getItems().get(0).getDescription());\n        groupManager.update(group.getId(), new GroupModification(group.getId(), \"test > 1\", \"This is a test < 1\", event.getOrganizationId(), List.of(new GroupMemberModification(null,\"test@test.ch\", \"description <>\"))));\n        persistedGroup = groupManager.loadComplete(group.getId()).orElseThrow();\n        assertEquals(\"This is a test &lt; 1\", persistedGroup.getDescription());\n        assertEquals(\"test &gt; 1\", persistedGroup.getName());\n    }\n}"], "filenames": ["src/main/java/alfio/manager/GroupManager.java", "src/main/java/alfio/repository/GroupRepository.java", "src/main/webapp/resources/js/admin/service/service.js", "src/test/java/alfio/manager/GroupManagerIntegrationTest.java"], "buggy_code_start_loc": [37, 29, 625, 162], "buggy_code_end_loc": [251, 70, 639, 162], "fixing_code_start_loc": [38, 30, 625, 163], "fixing_code_end_loc": [253, 74, 645, 189], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository alfio-event/alf.io prior to 2.0-M4-2301.", "other": {"cve": {"id": "CVE-2023-0300", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-14T18:15:09.887", "lastModified": "2023-01-24T18:11:36.357", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository alfio-event/alf.io prior to 2.0-M4-2301."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 0.9, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opencollective:alf.io:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0-m4-2301", "matchCriteriaId": "B9FB5ECA-1427-4BF0-B085-59F23FC93247"}]}]}], "references": [{"url": "https://github.com/alfio-event/alf.io/commit/c1ae54ac84f1c7a5ec2831876f6445cb79be96fc", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0a91fec7-a76e-4ca3-80ba-81de1f10d59d", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/alfio-event/alf.io/commit/c1ae54ac84f1c7a5ec2831876f6445cb79be96fc"}}