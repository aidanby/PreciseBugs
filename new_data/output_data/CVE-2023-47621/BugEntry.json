{"buggy_code": ["<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Controllers;\n\nuse Carbon\\Carbon;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryCreated;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryDeleted;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryUpdated;\nuse DuncanMcClean\\GuestEntries\\Exceptions\\AssetContainerNotSpecified;\nuse DuncanMcClean\\GuestEntries\\Http\\Requests\\DestroyRequest;\nuse DuncanMcClean\\GuestEntries\\Http\\Requests\\StoreRequest;\nuse DuncanMcClean\\GuestEntries\\Http\\Requests\\UpdateRequest;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Controller;\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\Str;\nuse Statamic\\Facades\\Asset;\nuse Statamic\\Facades\\AssetContainer;\nuse Statamic\\Facades\\Collection;\nuse Statamic\\Facades\\Entry;\nuse Statamic\\Facades\\Site as SiteFacade;\nuse Statamic\\Fields\\Field;\nuse Statamic\\Fieldtypes\\Assets\\Assets as AssetFieldtype;\nuse Statamic\\Fieldtypes\\Date as DateFieldtype;\nuse Statamic\\Fieldtypes\\Replicator;\nuse Statamic\\Sites\\Site;\n\nclass GuestEntryController extends Controller\n{\n    protected $ignoredParameters = ['_token', '_collection', '_id', '_redirect', '_error_redirect', '_request', 'slug', 'published'];\n\n    public function store(StoreRequest $request)\n    {\n        if (! $this->honeypotPassed($request)) {\n            return $this->withSuccess($request);\n        }\n\n        $collection = Collection::find($request->get('_collection'));\n\n        /** @var \\Statamic\\Entries\\Entry $entry */\n        $entry = Entry::make()\n            ->collection($collection->handle())\n            ->locale($this->guessSiteFromRequest($request))\n            ->published(false);\n\n        if ($collection->dated()) {\n            $this->ignoredParameters[] = 'date';\n            $entry->date($request->get('date') ?? now());\n        }\n\n        if ($request->has('published')) {\n            $entry->published($request->get('published') == '1' || $request->get('published') == 'true' ? true : false);\n        }\n\n        foreach (Arr::except($request->all(), $this->ignoredParameters) as $key => $value) {\n            /** @var \\Statamic\\Fields\\Field $blueprintField */\n            $field = $collection->entryBlueprint()->field($key);\n\n            $entry->set(\n                $key,\n                $field\n                    ? $this->processField($field, $key, $value, $request)\n                    : $value\n            );\n        }\n\n        if ($request->has('slug')) {\n            $entry->slug($request->get('slug'));\n        } elseif ($collection->entryBlueprint()->hasField('title')) {\n            $entry->slug(\n                Str::slug($request->get('title') ?? $entry->autoGeneratedTitle(), '-', $entry->site()->lang())\n            );\n        }\n\n        $entry->touch();\n\n        event(new GuestEntryCreated($entry));\n\n        return $this->withSuccess($request);\n    }\n\n    public function update(UpdateRequest $request)\n    {\n        if (! $this->honeypotPassed($request)) {\n            return $this->withSuccess($request);\n        }\n\n        /** @var \\Statamic\\Entries\\Entry $entry */\n        $entry = Entry::find($request->get('_id'));\n\n        /** @var array $data */\n        $data = $entry->data()->toArray();\n\n        if ($request->has('slug')) {\n            $entry->slug($request->get('slug'));\n        }\n\n        if ($entry->collection()->dated()) {\n            $this->ignoredParameters[] = 'date';\n        }\n\n        if ($request->has('published')) {\n            $entry->published($request->get('published') == 1 || $request->get('published') == 'true' ? true : false);\n        }\n\n        foreach (Arr::except($request->all(), $this->ignoredParameters) as $key => $value) {\n            /** @var \\Statamic\\Fields\\Field $blueprintField */\n            $field = $entry->blueprint()->field($key);\n\n            $data[$key] = $field\n                ? $this->processField($field, $key, $value, $request)\n                : $value;\n        }\n\n        if ($entry->revisionsEnabled()) {\n            /** @var \\Statamic\\Revisions\\Revision $revision */\n            $revision = $entry->makeWorkingCopy();\n            $revision->id($entry->id());\n\n            $revision->attributes([\n                'title' => $entry->get('title'),\n                'slug' => $entry->slug(),\n                'published' => $entry->published(),\n                'data' => $data,\n            ]);\n\n            if ($entry->collection()->dated() && $request->has('date')) {\n                $revision->date($request->get('date'));\n            }\n\n            if ($request->user()) {\n                $revision->user($revision->user());\n            }\n\n            $revision->message(__('Guest Entry Updated'));\n            $revision->action('revision');\n\n            $revision->save();\n            $entry->save();\n        } else {\n            $entry->data($data);\n\n            if ($entry->collection()->dated() && $request->has('date')) {\n                $entry->date($request->get('date'));\n            }\n\n            $entry->touch();\n        }\n\n        event(new GuestEntryUpdated($entry));\n\n        return $this->withSuccess($request);\n    }\n\n    public function destroy(DestroyRequest $request)\n    {\n        if (! $this->honeypotPassed($request)) {\n            return $this->withSuccess($request);\n        }\n\n        $entry = Entry::find($request->get('_id'));\n\n        $entry->delete();\n\n        event(new GuestEntryDeleted($entry));\n\n        return $this->withSuccess($request);\n    }\n\n    protected function processField(Field $field, $key, $value, $request): mixed\n    {\n        if ($field && $field->fieldtype() instanceof Replicator) {\n            $replicatorField = $field;\n\n            return collect($value)\n                ->map(function ($item, $index) use ($replicatorField, $request) {\n                    $set = $item['type'] ?? array_values($replicatorField->fieldtype()->config('sets'))[0];\n\n                    return collect($item)\n                        ->reject(function ($value, $fieldHandle) {\n                            return $fieldHandle === 'type';\n                        })\n                        ->map(function ($value, $fieldHandle) use ($replicatorField, $index, $set, $request) {\n                            $field = collect($set['fields'])\n                                ->where('handle', $fieldHandle)\n                                ->map(function ($field) {\n                                    return new Field($field['handle'], $field['field']);\n                                })\n                                ->first();\n\n                            if (! $field) {\n                                return $value;\n                            }\n\n                            $key = \"{$replicatorField->handle()}.{$index}.{$fieldHandle}\";\n\n                            return $field\n                                ? $this->processField($field, $key, $value, $request)\n                                : $value;\n                        })\n                        ->merge([\n                            'type' => $item['type'] ?? array_keys($replicatorField->fieldtype()->config('sets'))[0],\n                        ])\n                        ->toArray();\n                })\n                ->toArray();\n        }\n\n        if ($field && $field->fieldtype() instanceof AssetFieldtype) {\n            $value = $this->uploadFile($key, $field, $request);\n        }\n\n        if ($field && $field->fieldtype() instanceof DateFieldtype) {\n            $format = $field->fieldtype()->config(\n                'format',\n                strlen($value) > 10 ? $field->fieldtype()::DEFAULT_DATETIME_FORMAT : $field->fieldtype()::DEFAULT_DATE_FORMAT\n            );\n\n            $value = Carbon::parse($value)->format($format);\n        }\n\n        return $value;\n    }\n\n    protected function uploadFile(string $key, Field $field, Request $request)\n    {\n        if (! isset($field->config()['container'])) {\n            throw new AssetContainerNotSpecified(\"Please specify an asset container on your [{$key}] field, in order for file uploads to work.\");\n        }\n\n        /** @var \\Statamic\\Assets\\AssetContainer $assetContainer */\n        $assetContainer = AssetContainer::findByHandle($field->config()['container']);\n\n        $files = [];\n\n        // Handle uploaded files.\n        $uploadedFiles = $request->file($key);\n\n        if (! is_array($uploadedFiles)) {\n            $uploadedFiles = [$uploadedFiles];\n        }\n\n        // Filter out any null values.\n        $uploadedFiles = collect($uploadedFiles)->filter()->toArray();\n\n        /* @var \\Illuminate\\Http\\Testing\\File $file */\n        foreach ($uploadedFiles as $uploadedFile) {\n            $path = '/'.$uploadedFile->storeAs(\n                isset($field->config()['folder'])\n                    ? $field->config()['folder']\n                    : '',\n                now()->timestamp.'-'.$uploadedFile->getClientOriginalName(),\n                $assetContainer->diskHandle()\n            );\n\n            // Does path start with a '/'? If so, strip it off.\n            if (substr($path, 0, 1) === '/') {\n                $path = substr($path, 1);\n            }\n\n            // Ensure asset is created in Statamic (otherwise, it won't show up in\n            // the Control Panel for sites with the Stache watcher disabled).\n            $asset = Asset::make()\n                ->container($assetContainer->handle())\n                ->path($path);\n\n            $asset->save();\n\n            // Push to the array\n            $files[] = $path;\n        }\n\n        // Handle existing files.\n        $existingFiles = $request->get($key, []);\n\n        foreach ($existingFiles as $existingFile) {\n            $files[] = $existingFile;\n        }\n\n        if (count($files) === 0) {\n            return null;\n        }\n\n        if (count($files) === 1) {\n            return $files[0];\n        }\n\n        return $files;\n    }\n\n    protected function honeypotPassed(Request $request): ?bool\n    {\n        $honeypot = config('guest-entries.honeypot');\n\n        if (! $honeypot) {\n            return true;\n        }\n\n        return empty($request->get($honeypot));\n    }\n\n    protected function guessSiteFromRequest($request): Site\n    {\n        if ($site = $request->get('site')) {\n            return SiteFacade::get($site);\n        }\n\n        foreach (SiteFacade::all() as $site) {\n            if (Str::contains($request->url(), $site->url())) {\n                return $site;\n            }\n        }\n\n        if ($referer = $request->header('referer')) {\n            foreach (SiteFacade::all() as $site) {\n                if (Str::contains($referer, $site->url())) {\n                    return $site;\n                }\n            }\n        }\n\n        return SiteFacade::current();\n    }\n\n    protected function withSuccess(Request $request, array $data = [])\n    {\n        if ($request->wantsJson()) {\n            $data = array_merge($data, [\n                'status' => 'success',\n                'message' => null,\n            ]);\n\n            return response()->json($data);\n        }\n\n        $request->session()->flash('guest-entries.success', true);\n\n        return $request->_redirect ?\n            redirect($request->_redirect)->with($data)\n            : back()->with($data);\n    }\n}\n", "<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Requests;\n\nuse DuncanMcClean\\GuestEntries\\Rules\\CollectionExists;\nuse DuncanMcClean\\GuestEntries\\Rules\\EntryExists;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass DestroyRequest extends FormRequest\n{\n    use Concerns\\WhitelistedCollections,\n        Concerns\\HandleFailedValidation;\n\n    public function authorize()\n    {\n        return $this->collectionIsWhitelisted($this->get('_collection'));\n    }\n\n    public function rules()\n    {\n        return [\n            '_collection' => ['required', 'string',\n                // new CollectionExists\n            ],\n            '_id' => ['required', 'string',\n                // new EntryExists\n            ],\n            '_redirect' => ['nullable', 'string'],\n            '_error_redirect' => ['nullable', 'string'],\n            '_request' => ['nullable', 'string'],\n        ];\n    }\n}\n", "<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Requests;\n\nuse DuncanMcClean\\GuestEntries\\Rules\\CollectionExists;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Statamic\\Facades\\Collection;\n\nclass StoreRequest extends FormRequest\n{\n    use Concerns\\AcceptsFormRequests,\n        Concerns\\WhitelistedCollections,\n        Concerns\\HandleFailedValidation;\n\n    public function authorize()\n    {\n        return $this->collectionIsWhitelisted($this->get('_collection'));\n    }\n\n    public function rules()\n    {\n        $rules = [\n            '_collection' => ['required', 'string',\n                // new CollectionExists\n            ],\n            '_redirect' => ['nullable', 'string'],\n            '_error_redirect' => ['nullable', 'string'],\n            '_request' => ['nullable', 'string'],\n            'slug' => [\n                Collection::find($this->get('_collection'))->autoGeneratesTitles()\n                    ? null\n                    : 'required_without:title',\n            ],\n        ];\n\n        if ($formRequest = $this->get('_request')) {\n            $rules = array_merge($this->buildFormRequest($formRequest, $this)->rules());\n        }\n\n        return $rules;\n    }\n\n    public function messages()\n    {\n        if ($formRequest = $this->get('_request')) {\n            return $this->buildFormRequest($formRequest, $this)->messages();\n        }\n\n        return [];\n    }\n}\n", "<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Requests;\n\nuse DuncanMcClean\\GuestEntries\\Rules\\CollectionExists;\nuse DuncanMcClean\\GuestEntries\\Rules\\EntryExists;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UpdateRequest extends FormRequest\n{\n    use Concerns\\AcceptsFormRequests,\n        Concerns\\WhitelistedCollections,\n        Concerns\\HandleFailedValidation;\n\n    public function authorize()\n    {\n        return $this->collectionIsWhitelisted($this->get('_collection'));\n    }\n\n    public function rules()\n    {\n        $rules = [\n            '_collection' => ['required', 'string',\n                // new CollectionExists\n            ],\n            '_id' => ['required', 'string',\n                // new EntryExists\n            ],\n            '_redirect' => ['nullable', 'string'],\n            '_error_redirect' => ['nullable', 'string'],\n            '_request' => ['nullable', 'string'],\n        ];\n\n        if ($formRequest = $this->get('_request')) {\n            $rules = array_merge($this->buildFormRequest($formRequest, $this)->rules());\n        }\n\n        return $rules;\n    }\n\n    public function messages()\n    {\n        if ($formRequest = $this->get('_request')) {\n            return $this->buildFormRequest($formRequest, $this)->messages();\n        }\n\n        return [];\n    }\n}\n", "<?php\n\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryCreated;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryDeleted;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryUpdated;\nuse DuncanMcClean\\GuestEntries\\Tests\\Fixtures\\FirstCustomStoreRequest;\nuse DuncanMcClean\\GuestEntries\\Tests\\Fixtures\\FirstCustomUpdateRequest;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Config;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\File;\nuse Spatie\\TestTime\\TestTime;\nuse Statamic\\Events\\EntrySaved;\nuse Statamic\\Facades\\Asset;\nuse Statamic\\Facades\\AssetContainer;\nuse Statamic\\Facades\\Blueprint;\nuse Statamic\\Facades\\Collection;\nuse Statamic\\Facades\\Entry;\nuse Statamic\\Facades\\Site;\n\nbeforeEach(function () {\n    File::deleteDirectory(app('stache')->store('entries')->directory());\n\n    $this->app['config']->set('guest-entries.collections', [\n        'comments' => true,\n        'albums' => true,\n    ]);\n});\n\nit('can store entry', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n});\n\nit('can store entry where slug is generated from title', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is fantastic',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is fantastic');\n    $this->assertSame($entry->slug(), 'this-is-fantastic');\n});\n\nit('can store entry when collection has title format', function () {\n    Collection::make('comments')->titleFormats(['default' => 'BLAH {{ name }}'])->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'name' => 'So, I was sitting there and somebody came up to me and I asked them something.',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'BLAH So, I was sitting there and somebody came up to me and I asked them something.');\n    $this->assertSame($entry->slug(), 'blah-so-i-was-sitting-there-and-somebody-came-up-to-me-and-i-asked-them-something');\n});\n\nit('can store entry with custom form request', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            '_request' => encrypt(FirstCustomStoreRequest::class),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect()\n        ->assertSessionHasErrors('description');\n});\n\nit('cant store entry if collection has not been whitelisted', function () {\n    Collection::make('smth')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('smth'),\n            'title' => 'Whatever',\n            'slug' => 'whatever',\n        ])\n        ->assertForbidden();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNull($entry);\n});\n\nit('can store entry and user is redirected', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            '_redirect' => encrypt('/bobs-your-uncle'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect('/bobs-your-uncle');\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n});\n\nit('can store entry and ensure ignored parameters are not saved', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            '_redirect' => encrypt('/whatever'),\n            '_error_redirect' => encrypt('/whatever-else'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNull($entry->get('_collection'));\n    $this->assertNull($entry->get('_redirect'));\n    $this->assertNull($entry->get('_error_redirect'));\n});\n\nit('can store entry and ensure updated at is set', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertNotNull($entry->get('updated_at'));\n});\n\nit('can store entry where collection is date ordered and ensure date is saved', function () {\n    TestTime::freeze('Y-m-d H:i', '2021-10-10 11:11');\n\n    Collection::make('comments')->dated(true)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('2021-10-10.this-is-great.md', $entry->path());\n});\n\nit('can store entry where collection is not date ordered and ensure date is saved', function () {\n    TestTime::freeze('Y-m-d H:i', '2021-10-10 11:11');\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'date',\n                            'field' => [\n                                'mode' => 'single',\n                                'time_enabled' => false,\n                                'time_required' => false,\n                                'earliest_date' => '1900-01-01',\n                                'format' => 'Y-m-d',\n                                'full_width' => false,\n                                'inline' => false,\n                                'columns' => 1,\n                                'rows' => 1,\n                                'display' => 'Date',\n                                'type' => 'date',\n                                'icon' => 'date',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->dated(false)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'date' => '2021-12-25',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->get('date'), '2021-12-25');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('this-is-great.md', $entry->path());\n});\n\nit('can store entry and ensure honeypot works if value is empty', function () {\n    Config::set('guest-entries.honeypot', 'postcode');\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great2',\n            'postcode' => '',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great2');\n});\n\nit('can store entry and ensure honeypot works if value is not empty', function () {\n    Config::set('guest-entries.honeypot', 'postcode');\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great3',\n            'postcode' => 'A12 34B',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNull($entry);\n});\n\nit('can store entry and ensure entry is unpublished by default', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertFalse($entry->published());\n});\n\nit('can store entry and ensure published status is updated', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'published' => '1',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertTrue($entry->published());\n});\n\nit('can store entry and ensure events and dispatched', function () {\n    Event::fake();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    Event::assertDispatchedTimes(GuestEntryCreated::class, 1);\n});\n\nit('can store entry and date is saved as part of file name if dated collection', function () {\n    Collection::make('comments')->dated(true)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'date' => '2021-06-06',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('2021-06-06.this-is-great.md', $entry->path());\n});\n\nit('can store entry and ensure file can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachment',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                                'max_items' => 1,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'attachment' => UploadedFile::fake()->create('foobar.png'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNotNull($entry->get('attachment'));\n    $this->assertIsString($entry->get('attachment'));\n});\n\nit('can store entry and ensure multiple files can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this->withoutExceptionHandling();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                UploadedFile::fake()->create('barfoo.jpg'),\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n});\n\nit('can store entry with one uploaded file and one existing file', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Asset::make()->container('assets')->path('blah-blah-blah.png')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this->withoutExceptionHandling();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                'blah-blah-blah.png',\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n\n    $this->assertStringContainsString('-foobar.png', $entry->get('attachments')[0]);\n    $this->assertStringContainsString('blah-blah-blah.png', $entry->get('attachments')[1]);\n});\n\nit('can store entry and ensure date is in same format defined in blueprint', function () {\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'date',\n                            'field' => [\n                                'mode' => 'single',\n                                'time_enabled' => false,\n                                'time_required' => false,\n                                'earliest_date' => '1900-01-01',\n                                'format' => 'Y',\n                                'full_width' => false,\n                                'inline' => false,\n                                'columns' => 1,\n                                'rows' => 1,\n                                'display' => 'Date',\n                                'type' => 'date',\n                                'icon' => 'date',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->dated(false)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'date' => '2009-06-06',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->get('date'), '2009');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('this-is-great.md', $entry->path());\n});\n\nit('can store entry and ensure created in correct site by request payload', function () {\n    Config::set('statamic.editions.pro', true);\n\n    Config::set('statamic.sites.sites', [\n        'one' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/one',\n        ],\n        'two' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/two',\n        ],\n    ]);\n\n    Site::setConfig(config('statamic.sites'));\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'site' => 'one',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertSame($entry->locale(), 'one');\n});\n\nit('can store entry and ensure created in correct site by referer', function () {\n    Config::set('statamic.editions.pro', true);\n\n    Config::set('statamic.sites.sites', [\n        'one' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/one',\n        ],\n        'two' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/two',\n        ],\n    ]);\n\n    Site::setConfig(config('statamic.sites'));\n\n    Collection::make('comments')->save();\n\n    $this\n        ->from('/two/something')\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertSame($entry->locale(), 'two');\n});\n\nit('can store entry and ensure created in correct site by current site fallback', function () {\n    Config::set('statamic.editions.pro', true);\n\n    Config::set('statamic.sites.sites', [\n        'one' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/one',\n        ],\n        'two' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/two',\n        ],\n    ]);\n\n    Site::setConfig(config('statamic.sites'));\n    Site::setCurrent('two');\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertSame($entry->locale(), 'two');\n});\n\nit('can store entry and ensure entry is only saved once', function () {\n    Event::fake();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    Event::assertDispatchedTimes(EntrySaved::class, 1);\n});\n\nit('can store entry with replicator field', function () {\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'text' => 'I have a Blue Peter badge!',\n                ],\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n});\n\nit('can store entry with replicator field and an assets field inside the replicator', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                            [\n                                                'handle' => 'document',\n                                                'field' => [\n                                                    'mode' => 'list',\n                                                    'container' => 'assets',\n                                                    'restrict' => false,\n                                                    'allow_uploads' => true,\n                                                    'show_filename' => true,\n                                                    'display' => 'Document',\n                                                    'type' => 'assets',\n                                                    'icon' => 'assets',\n                                                    'listable' => 'hidden',\n                                                    'max_items' => 1,\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this->withoutExceptionHandling();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'document' => UploadedFile::fake()->create('document.pdf', 100),\n                ],\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n\n    $this->assertIsString($entry->get('things')[0]['text']);\n    $this->assertIsString($entry->get('things')[1]['document']);\n});\n\nit('can update entry', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n});\n\nit('can update entry if collection has title format', function () {\n    Collection::make('albums')->titleFormats(['default' => '{{ artist }} - {{ name }}'])->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Guvna B - Allo Mate!',\n            'name' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'name' => 'Allo Mate',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Guvna B - Allo Mate');\n});\n\nit('can update entry with custom form request', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_request' => encrypt(FirstCustomUpdateRequest::class),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect()\n        ->assertSessionHasErrors('record_label');\n});\n\nit('cant update entry if collection has not been whitelisted', function () {\n    Collection::make('hahahahaha')->save();\n\n    Entry::make()\n        ->id('hahahahaha-idee')\n        ->collection('hahahahaha')\n        ->slug('smth')\n        ->data([\n            'title' => 'Smth',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('hahahahaha'),\n            '_id' => encrypt('hahahahaha-idee'),\n            'title' => 'Something',\n        ])\n        ->assertForbidden();\n\n    $entry = Entry::find('hahahahaha-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'hahahahaha');\n    $this->assertSame($entry->get('title'), 'Smth'); // Has not changed\n    $this->assertSame($entry->slug(), 'smth');\n});\n\nit('can update entry and user is redirected', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_redirect' => encrypt('/good-good-night'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect('/good-good-night');\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n});\n\nit('can update entry and ensure required parameters are notsaved', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_redirect' => encrypt('/something'),\n            '_error_redirect' => encrypt('/something-else'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNull($entry->get('_collection'));\n    $this->assertNull($entry->get('_id'));\n    $this->assertNull($entry->get('_redirect'));\n    $this->assertNull($entry->get('_error_redirect'));\n});\n\nit('can update entry and ensure updated at is set', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'updated_at' => 12345,\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('updated_at'));\n    $this->assertNotSame($entry->get('updated_at'), 12345);\n});\n\nit('can update entry and ensure published status is updated', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'published' => '1',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n    $this->assertTrue($entry->published());\n});\n\nit('can update entry and ensure events are dispatched', function () {\n    Event::fake();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    Event::assertDispatchedTimes(GuestEntryUpdated::class, 1);\n});\n\nit('can update entry and date is saved as part of file name if dated collection', function () {\n    Collection::make('albums')->dated(true)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'date' => '2021-09-09',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertStringContainsString('2021-09-09.allo-mate.md', $entry->path());\n});\n\nit('can update entry and ensure date is in same format as defined in blueprint', function () {\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'date',\n                            'field' => [\n                                'mode' => 'single',\n                                'time_enabled' => false,\n                                'time_required' => false,\n                                'earliest_date' => '1900-01-01',\n                                'format' => 'Y',\n                                'full_width' => false,\n                                'inline' => false,\n                                'columns' => 1,\n                                'rows' => 1,\n                                'display' => 'Date',\n                                'type' => 'date',\n                                'icon' => 'date',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->dated(false)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'date' => '2021-09-09',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->get('date'), '2021');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertStringContainsString('allo-mate.md', $entry->path());\n});\n\nit('can update entry and ensure file can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachment',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                                'max_items' => 1,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'attachment' => UploadedFile::fake()->image('something.jpg'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('attachment'));\n    $this->assertIsString($entry->get('attachment'));\n});\n\nit('can update entry and ensure multiple files can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                UploadedFile::fake()->create('barfoo.jpg'),\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n});\n\nit('can update entry with one uploaded file and one existing file', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Asset::make()->container('assets')->path('blah-blah-blah.png')->save();\n\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                'blah-blah-blah.png',\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n\n    $this->assertStringContainsString('-foobar.png', $entry->get('attachments')[0]);\n    $this->assertStringContainsString('blah-blah-blah.png', $entry->get('attachments')[1]);\n});\n\nit('can update entry with revisions enabled', function () {\n    Config::set('statamic.editions.pro', true);\n    Config::set('statamic.revisions.enabled', true);\n\n    Collection::make('albums')->revisionsEnabled(true)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n    $workingCopy = $entry->workingCopy();\n\n    $this->assertNotNull($entry);\n    $this->assertTrue($entry->revisionsEnabled());\n    $this->assertTrue($entry->hasWorkingCopy());\n    $this->assertSame($entry->collectionHandle(), 'albums');\n\n    $this->assertSame($workingCopy->message(), 'Guest Entry Updated');\n    $this->assertSame($workingCopy->action(), 'revision');\n    $this->assertSame($workingCopy->attributes(), [\n        'title' => 'Allo Mate!',\n        'slug' => 'allo-mate',\n        'published' => true,\n        'data' => [\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'record_label' => 'Unknown',\n        ],\n    ]);\n});\n\nit('can update entry and date and ensure date is saved normally if not dated collection', function () {\n    Collection::make('albums')->dated(false)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'date' => '2021-09-09',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->get('date'), '2021-09-09');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertStringContainsString('allo-mate.md', $entry->path());\n});\n\nit('can update entry and ensure entry is only saved once', function () {\n    Event::fake();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    Event::assertDispatchedTimes(EntrySaved::class, 2);\n});\n\nit('can update entry with replicator field', function () {\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'text' => 'I have a Blue Peter badge!',\n                ],\n            ],\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n});\n\nit('can update entry with replicator field and an assets field inside the replicator', function () {\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                            [\n                                                'handle' => 'document',\n                                                'field' => [\n                                                    'mode' => 'list',\n                                                    'container' => 'assets',\n                                                    'restrict' => false,\n                                                    'allow_uploads' => true,\n                                                    'show_filename' => true,\n                                                    'display' => 'Document',\n                                                    'type' => 'assets',\n                                                    'icon' => 'assets',\n                                                    'listable' => 'hidden',\n                                                    'max_items' => 1,\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'document' => UploadedFile::fake()->create('document.pdf', 100),\n                ],\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n\n    $this->assertIsString($entry->get('things')[0]['text']);\n    $this->assertIsString($entry->get('things')[1]['document']);\n});\n\nit('can destroy entry', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNull($entry);\n});\n\nit('cant destroy entry if collection has not been whitelisted', function () {\n    Collection::make('blahblah')->save();\n\n    Entry::make()\n        ->id('arg')\n        ->collection('blahblah')\n        ->slug('arg')\n        ->data([\n            'title' => 'Arrrrgg!',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('blahblah'),\n            '_id' => encrypt('arg'),\n        ])\n        ->assertForbidden();\n\n    $entry = Entry::find('arg');\n\n    $this->assertNotNull($entry);\n});\n\nit('can destroy entry if collection has not been whitelisted and user is redirected', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_redirect' => encrypt('/allo-mate'),\n        ])\n        ->assertRedirect('/allo-mate');\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNull($entry);\n});\n\nit('can destroy entry and ensure events are dispatched', function () {\n    Event::fake();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNull($entry);\n\n    Event::assertDispatchedTimes(GuestEntryDeleted::class, 1);\n});\n", "<?php\n\nuse DuncanMcClean\\GuestEntries\\Tags\\GuestEntriesTag;\nuse Illuminate\\Container\\EntryNotFoundException;\nuse Illuminate\\Support\\Facades\\Config;\nuse function PHPUnit\\Framework\\assertStringContainsString;\nuse Statamic\\Exceptions\\CollectionNotFoundException;\nuse Statamic\\Facades\\Antlers;\nuse Statamic\\Facades\\Collection;\nuse Statamic\\Facades\\Entry;\nuse Statamic\\Statamic;\nuse Statamic\\Tags\\Tags;\n\n$tag = null;\n\nbeforeEach(function () use (&$tag) {\n    Config::set('guest-entries.disable_form_parameter_validation', true);\n\n    /** @var Tags */\n    $tag = resolve(GuestEntriesTag::class)\n        ->setParser(Antlers::parser())\n        ->setContext([]);\n});\n\nit('returns create guest entry form', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n    ]);\n\n    $tag->setContent('\n        <h2>Create Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->create();\n\n    assertStringContainsString('http://localhost/!/guest-entries/create', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n\n    assertStringContainsString('<h2>Create Guestbook Entry</h2>', $usage);\n    assertStringContainsString('<textarea name=\"comment\"></textarea>', $usage);\n});\n\nit('throws an exception when attempting to retrurn create guest entry form if no collection is provided', function () use (&$tag) {\n    $tag->setParameters([\n        'collection' => null,\n    ]);\n\n    $tag->setContent('\n        <h2>Create Llalalalal Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->create();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return create guest entry form when collection does not exist', function () use (&$tag) {\n    $tag->setParameters([\n        'collection' => 'lalalalallalalal',\n    ]);\n\n    $tag->setContent('\n        <h2>Create Llalalalal Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->create();\n})->throws(CollectionNotFoundException::class);\n\nit('returns create guest entry form with redirect and error_redirect hidden inputs', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'redirect' => '/thank-you',\n        'error_redirect' => '/error',\n    ]);\n\n    $usage = $tag->create();\n\n    assertStringContainsString('http://localhost/!/guest-entries/create', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_redirect\" value=\"/thank-you\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_error_redirect\" value=\"/error\"', $usage);\n});\n\nit('returns update guest entry form', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Update Guestbook Entry</h2>', $usage);\n    assertStringContainsString('<textarea name=\"comment\"></textarea>', $usage);\n});\n\nit('throws an exception when attempting to return update guest entry create form if no collection is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return update guest entry form if no ID is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'blah',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(CollectionNotFoundException::class);\n\nit('throws an exception when attempting to return update guest entry form if no entry ID is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return update guest entry form when entry ID does not exist', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'blhabahahahah',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(EntryNotFoundException::class);\n\nit('returns update guest entry form and entry values can be used', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World', 'comment' => 'Something can go here'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry: {{ title }}</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\">Something can go here</textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Update Guestbook Entry: Hello World</h2>', $usage);\n    assertStringContainsString('<textarea name=\"comment\">Something can go here</textarea>', $usage);\n});\n\nit('returns update guest entry form with redirect and error_redirect hidden inputs', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n        'redirect' => '/thank-you',\n        'error_redirect' => '/error',\n    ]);\n\n    $usage = $tag->update();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_redirect\" value=\"/thank-you\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_error_redirect\" value=\"/error\"', $usage);\n});\n\nit('can fetch update guest entry form data', function () {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $form = Statamic::tag('guest-entries:update')->params([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ])->fetch();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $form['attrs_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $form['params_html']);\n    assertStringContainsString('Hello World', $form['title']);\n});\n\nit('returns delete guest entry form', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Delete Guestbook Entry</h2>', $usage);\n    assertStringContainsString('<button type=\"submit\">DELETE</button>', $usage);\n});\n\nit('throws an exception when attempting to return delete guest entry form if no collection is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return delete guest entry form when collection does not exist', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'blah',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(CollectionNotFoundException::class);\n\nit('throws an exception when attempting to return delete guest entry form if no entry ID is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return delete guest entry form when entry ID does not exist', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'blhabahahahah',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(EntryNotFoundException::class);\n\nit('returns delete guest entry form and entry values can be used', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry: {{ title }}</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Delete Guestbook Entry: Hello World</h2>', $usage);\n    assertStringContainsString('<button type=\"submit\">DELETE</button>', $usage);\n});\n\nit('returns delete guest entry form with redirect and error_redirect hidden inputs', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n        'redirect' => '/thank-you',\n        'error_redirect' => '/error',\n    ]);\n\n    $usage = $tag->delete();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_redirect\" value=\"/thank-you\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_error_redirect\" value=\"/error\"', $usage);\n});\n\nit('can fetch delete guest entry form data', function () {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $form = Statamic::tag('guest-entries:delete')->params([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ])->fetch();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $form['attrs_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $form['params_html']);\n    assertStringContainsString('Hello World', $form['title']);\n});\n"], "fixing_code": ["<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Controllers;\n\nuse Carbon\\Carbon;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryCreated;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryDeleted;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryUpdated;\nuse DuncanMcClean\\GuestEntries\\Exceptions\\AssetContainerNotSpecified;\nuse DuncanMcClean\\GuestEntries\\Http\\Requests\\DestroyRequest;\nuse DuncanMcClean\\GuestEntries\\Http\\Requests\\StoreRequest;\nuse DuncanMcClean\\GuestEntries\\Http\\Requests\\UpdateRequest;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Controller;\nuse Illuminate\\Support\\Arr;\nuse Illuminate\\Support\\Facades\\Validator;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Validation\\ValidationException;\nuse Statamic\\Facades\\Asset;\nuse Statamic\\Facades\\AssetContainer;\nuse Statamic\\Facades\\Collection;\nuse Statamic\\Facades\\Entry;\nuse Statamic\\Facades\\Site as SiteFacade;\nuse Statamic\\Fields\\Field;\nuse Statamic\\Fieldtypes\\Assets\\Assets as AssetFieldtype;\nuse Statamic\\Fieldtypes\\Date as DateFieldtype;\nuse Statamic\\Fieldtypes\\Replicator;\nuse Statamic\\Sites\\Site;\n\nclass GuestEntryController extends Controller\n{\n    protected $ignoredParameters = ['_token', '_collection', '_id', '_redirect', '_error_redirect', '_request', 'slug', 'published'];\n\n    public function store(StoreRequest $request)\n    {\n        if (! $this->honeypotPassed($request)) {\n            return $this->withSuccess($request);\n        }\n\n        $collection = Collection::find($request->get('_collection'));\n\n        /** @var \\Statamic\\Entries\\Entry $entry */\n        $entry = Entry::make()\n            ->collection($collection->handle())\n            ->locale($this->guessSiteFromRequest($request))\n            ->published(false);\n\n        if ($collection->dated()) {\n            $this->ignoredParameters[] = 'date';\n            $entry->date($request->get('date') ?? now());\n        }\n\n        if ($request->has('published')) {\n            $entry->published($request->get('published') == '1' || $request->get('published') == 'true' ? true : false);\n        }\n\n        foreach (Arr::except($request->all(), $this->ignoredParameters) as $key => $value) {\n            /** @var \\Statamic\\Fields\\Field $blueprintField */\n            $field = $collection->entryBlueprint()->field($key);\n\n            $entry->set(\n                $key,\n                $field\n                    ? $this->processField($field, $key, $value, $request)\n                    : $value\n            );\n        }\n\n        if ($request->has('slug')) {\n            $entry->slug($request->get('slug'));\n        } elseif ($collection->entryBlueprint()->hasField('title')) {\n            $entry->slug(\n                Str::slug($request->get('title') ?? $entry->autoGeneratedTitle(), '-', $entry->site()->lang())\n            );\n        }\n\n        $entry->touch();\n\n        event(new GuestEntryCreated($entry));\n\n        return $this->withSuccess($request);\n    }\n\n    public function update(UpdateRequest $request)\n    {\n        if (! $this->honeypotPassed($request)) {\n            return $this->withSuccess($request);\n        }\n\n        /** @var \\Statamic\\Entries\\Entry $entry */\n        $entry = Entry::find($request->get('_id'));\n\n        /** @var array $data */\n        $data = $entry->data()->toArray();\n\n        if ($request->has('slug')) {\n            $entry->slug($request->get('slug'));\n        }\n\n        if ($entry->collection()->dated()) {\n            $this->ignoredParameters[] = 'date';\n        }\n\n        if ($request->has('published')) {\n            $entry->published($request->get('published') == 1 || $request->get('published') == 'true' ? true : false);\n        }\n\n        foreach (Arr::except($request->all(), $this->ignoredParameters) as $key => $value) {\n            /** @var \\Statamic\\Fields\\Field $blueprintField */\n            $field = $entry->blueprint()->field($key);\n\n            $data[$key] = $field\n                ? $this->processField($field, $key, $value, $request)\n                : $value;\n        }\n\n        if ($entry->revisionsEnabled()) {\n            /** @var \\Statamic\\Revisions\\Revision $revision */\n            $revision = $entry->makeWorkingCopy();\n            $revision->id($entry->id());\n\n            $revision->attributes([\n                'title' => $entry->get('title'),\n                'slug' => $entry->slug(),\n                'published' => $entry->published(),\n                'data' => $data,\n            ]);\n\n            if ($entry->collection()->dated() && $request->has('date')) {\n                $revision->date($request->get('date'));\n            }\n\n            if ($request->user()) {\n                $revision->user($revision->user());\n            }\n\n            $revision->message(__('Guest Entry Updated'));\n            $revision->action('revision');\n\n            $revision->save();\n            $entry->save();\n        } else {\n            $entry->data($data);\n\n            if ($entry->collection()->dated() && $request->has('date')) {\n                $entry->date($request->get('date'));\n            }\n\n            $entry->touch();\n        }\n\n        event(new GuestEntryUpdated($entry));\n\n        return $this->withSuccess($request);\n    }\n\n    public function destroy(DestroyRequest $request)\n    {\n        if (! $this->honeypotPassed($request)) {\n            return $this->withSuccess($request);\n        }\n\n        $entry = Entry::find($request->get('_id'));\n\n        $entry->delete();\n\n        event(new GuestEntryDeleted($entry));\n\n        return $this->withSuccess($request);\n    }\n\n    protected function processField(Field $field, $key, $value, $request): mixed\n    {\n        if ($field && $field->fieldtype() instanceof Replicator) {\n            $replicatorField = $field;\n\n            return collect($value)\n                ->map(function ($item, $index) use ($replicatorField, $request) {\n                    $set = $item['type'] ?? array_values($replicatorField->fieldtype()->config('sets'))[0];\n\n                    return collect($item)\n                        ->reject(function ($value, $fieldHandle) {\n                            return $fieldHandle === 'type';\n                        })\n                        ->map(function ($value, $fieldHandle) use ($replicatorField, $index, $set, $request) {\n                            $field = collect($set['fields'])\n                                ->where('handle', $fieldHandle)\n                                ->map(function ($field) {\n                                    return new Field($field['handle'], $field['field']);\n                                })\n                                ->first();\n\n                            if (! $field) {\n                                return $value;\n                            }\n\n                            $key = \"{$replicatorField->handle()}.{$index}.{$fieldHandle}\";\n\n                            return $field\n                                ? $this->processField($field, $key, $value, $request)\n                                : $value;\n                        })\n                        ->merge([\n                            'type' => $item['type'] ?? array_keys($replicatorField->fieldtype()->config('sets'))[0],\n                        ])\n                        ->toArray();\n                })\n                ->toArray();\n        }\n\n        if ($field && $field->fieldtype() instanceof AssetFieldtype) {\n            $value = $this->uploadFile($key, $field, $request);\n        }\n\n        if ($field && $field->fieldtype() instanceof DateFieldtype) {\n            $format = $field->fieldtype()->config(\n                'format',\n                strlen($value) > 10 ? $field->fieldtype()::DEFAULT_DATETIME_FORMAT : $field->fieldtype()::DEFAULT_DATE_FORMAT\n            );\n\n            $value = Carbon::parse($value)->format($format);\n        }\n\n        return $value;\n    }\n\n    protected function uploadFile(string $key, Field $field, Request $request)\n    {\n        if (! isset($field->config()['container'])) {\n            throw new AssetContainerNotSpecified(\"Please specify an asset container on your [{$key}] field, in order for file uploads to work.\");\n        }\n\n        /** @var \\Statamic\\Assets\\AssetContainer $assetContainer */\n        $assetContainer = AssetContainer::findByHandle($field->config()['container']);\n\n        $files = [];\n\n        // Handle uploaded files.\n        $uploadedFiles = $request->file($key);\n\n        if (! is_array($uploadedFiles)) {\n            $uploadedFiles = [$uploadedFiles];\n        }\n\n        $uploadedFiles = collect($uploadedFiles)\n            ->each(function ($file) use ($key) {\n                if (in_array(trim(strtolower($file->getClientOriginalExtension())), ['php', 'php3', 'php4', 'php5', 'phtml'])) {\n                    $validator = Validator::make([], []);\n                    $validator->errors()->add($key, __('Failed to upload.'));\n\n                    throw new ValidationException($validator);\n                }\n            })\n            ->filter()\n            ->toArray();\n\n        /* @var \\Illuminate\\Http\\Testing\\File $file */\n        foreach ($uploadedFiles as $uploadedFile) {\n            $path = '/'.$uploadedFile->storeAs(\n                isset($field->config()['folder'])\n                    ? $field->config()['folder']\n                    : '',\n                now()->timestamp.'-'.$uploadedFile->getClientOriginalName(),\n                $assetContainer->diskHandle()\n            );\n\n            // Does path start with a '/'? If so, strip it off.\n            if (substr($path, 0, 1) === '/') {\n                $path = substr($path, 1);\n            }\n\n            // Ensure asset is created in Statamic (otherwise, it won't show up in\n            // the Control Panel for sites with the Stache watcher disabled).\n            $asset = Asset::make()\n                ->container($assetContainer->handle())\n                ->path($path);\n\n            $asset->save();\n\n            // Push to the array\n            $files[] = $path;\n        }\n\n        // Handle existing files.\n        $existingFiles = $request->get($key, []);\n\n        foreach ($existingFiles as $existingFile) {\n            $files[] = $existingFile;\n        }\n\n        if (count($files) === 0) {\n            return null;\n        }\n\n        if (count($files) === 1) {\n            return $files[0];\n        }\n\n        return $files;\n    }\n\n    protected function honeypotPassed(Request $request): ?bool\n    {\n        $honeypot = config('guest-entries.honeypot');\n\n        if (! $honeypot) {\n            return true;\n        }\n\n        return empty($request->get($honeypot));\n    }\n\n    protected function guessSiteFromRequest($request): Site\n    {\n        if ($site = $request->get('site')) {\n            return SiteFacade::get($site);\n        }\n\n        foreach (SiteFacade::all() as $site) {\n            if (Str::contains($request->url(), $site->url())) {\n                return $site;\n            }\n        }\n\n        if ($referer = $request->header('referer')) {\n            foreach (SiteFacade::all() as $site) {\n                if (Str::contains($referer, $site->url())) {\n                    return $site;\n                }\n            }\n        }\n\n        return SiteFacade::current();\n    }\n\n    protected function withSuccess(Request $request, array $data = [])\n    {\n        if ($request->wantsJson()) {\n            $data = array_merge($data, [\n                'status' => 'success',\n                'message' => null,\n            ]);\n\n            return response()->json($data);\n        }\n\n        $request->session()->flash('guest-entries.success', true);\n\n        return $request->_redirect ?\n            redirect($request->_redirect)->with($data)\n            : back()->with($data);\n    }\n}\n", "<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Requests;\n\nuse DuncanMcClean\\GuestEntries\\Rules\\CollectionExists;\nuse DuncanMcClean\\GuestEntries\\Rules\\EntryExists;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass DestroyRequest extends FormRequest\n{\n    use Concerns\\HandleFailedValidation,\n        Concerns\\WhitelistedCollections;\n\n    public function authorize()\n    {\n        return $this->collectionIsWhitelisted($this->get('_collection'));\n    }\n\n    public function rules()\n    {\n        return [\n            '_collection' => ['required', 'string',\n                // new CollectionExists\n            ],\n            '_id' => ['required', 'string',\n                // new EntryExists\n            ],\n            '_redirect' => ['nullable', 'string'],\n            '_error_redirect' => ['nullable', 'string'],\n            '_request' => ['nullable', 'string'],\n        ];\n    }\n}\n", "<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Requests;\n\nuse DuncanMcClean\\GuestEntries\\Rules\\CollectionExists;\nuse Illuminate\\Foundation\\Http\\FormRequest;\nuse Statamic\\Facades\\Collection;\n\nclass StoreRequest extends FormRequest\n{\n    use Concerns\\AcceptsFormRequests,\n        Concerns\\HandleFailedValidation,\n        Concerns\\WhitelistedCollections;\n\n    public function authorize()\n    {\n        return $this->collectionIsWhitelisted($this->get('_collection'));\n    }\n\n    public function rules()\n    {\n        $rules = [\n            '_collection' => ['required', 'string',\n                // new CollectionExists\n            ],\n            '_redirect' => ['nullable', 'string'],\n            '_error_redirect' => ['nullable', 'string'],\n            '_request' => ['nullable', 'string'],\n            'slug' => [\n                Collection::find($this->get('_collection'))->autoGeneratesTitles()\n                    ? null\n                    : 'required_without:title',\n            ],\n        ];\n\n        if ($formRequest = $this->get('_request')) {\n            $rules = array_merge($this->buildFormRequest($formRequest, $this)->rules());\n        }\n\n        return $rules;\n    }\n\n    public function messages()\n    {\n        if ($formRequest = $this->get('_request')) {\n            return $this->buildFormRequest($formRequest, $this)->messages();\n        }\n\n        return [];\n    }\n}\n", "<?php\n\nnamespace DuncanMcClean\\GuestEntries\\Http\\Requests;\n\nuse DuncanMcClean\\GuestEntries\\Rules\\CollectionExists;\nuse DuncanMcClean\\GuestEntries\\Rules\\EntryExists;\nuse Illuminate\\Foundation\\Http\\FormRequest;\n\nclass UpdateRequest extends FormRequest\n{\n    use Concerns\\AcceptsFormRequests,\n        Concerns\\HandleFailedValidation,\n        Concerns\\WhitelistedCollections;\n\n    public function authorize()\n    {\n        return $this->collectionIsWhitelisted($this->get('_collection'));\n    }\n\n    public function rules()\n    {\n        $rules = [\n            '_collection' => ['required', 'string',\n                // new CollectionExists\n            ],\n            '_id' => ['required', 'string',\n                // new EntryExists\n            ],\n            '_redirect' => ['nullable', 'string'],\n            '_error_redirect' => ['nullable', 'string'],\n            '_request' => ['nullable', 'string'],\n        ];\n\n        if ($formRequest = $this->get('_request')) {\n            $rules = array_merge($this->buildFormRequest($formRequest, $this)->rules());\n        }\n\n        return $rules;\n    }\n\n    public function messages()\n    {\n        if ($formRequest = $this->get('_request')) {\n            return $this->buildFormRequest($formRequest, $this)->messages();\n        }\n\n        return [];\n    }\n}\n", "<?php\n\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryCreated;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryDeleted;\nuse DuncanMcClean\\GuestEntries\\Events\\GuestEntryUpdated;\nuse DuncanMcClean\\GuestEntries\\Tests\\Fixtures\\FirstCustomStoreRequest;\nuse DuncanMcClean\\GuestEntries\\Tests\\Fixtures\\FirstCustomUpdateRequest;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Config;\nuse Illuminate\\Support\\Facades\\Event;\nuse Illuminate\\Support\\Facades\\File;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Spatie\\TestTime\\TestTime;\nuse Statamic\\Events\\EntrySaved;\nuse Statamic\\Facades\\Asset;\nuse Statamic\\Facades\\AssetContainer;\nuse Statamic\\Facades\\Blueprint;\nuse Statamic\\Facades\\Collection;\nuse Statamic\\Facades\\Entry;\nuse Statamic\\Facades\\Site;\n\nuse function PHPUnit\\Framework\\assertCount;\n\nbeforeEach(function () {\n    File::deleteDirectory(app('stache')->store('entries')->directory());\n\n    $this->app['config']->set('guest-entries.collections', [\n        'comments' => true,\n        'albums' => true,\n    ]);\n});\n\nit('can store entry', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n});\n\nit('can store entry where slug is generated from title', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is fantastic',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is fantastic');\n    $this->assertSame($entry->slug(), 'this-is-fantastic');\n});\n\nit('can store entry when collection has title format', function () {\n    Collection::make('comments')->titleFormats(['default' => 'BLAH {{ name }}'])->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'name' => 'So, I was sitting there and somebody came up to me and I asked them something.',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'BLAH So, I was sitting there and somebody came up to me and I asked them something.');\n    $this->assertSame($entry->slug(), 'blah-so-i-was-sitting-there-and-somebody-came-up-to-me-and-i-asked-them-something');\n});\n\nit('can store entry with custom form request', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            '_request' => encrypt(FirstCustomStoreRequest::class),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect()\n        ->assertSessionHasErrors('description');\n});\n\nit('cant store entry if collection has not been whitelisted', function () {\n    Collection::make('smth')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('smth'),\n            'title' => 'Whatever',\n            'slug' => 'whatever',\n        ])\n        ->assertForbidden();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNull($entry);\n});\n\nit('can store entry and user is redirected', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            '_redirect' => encrypt('/bobs-your-uncle'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect('/bobs-your-uncle');\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n});\n\nit('can store entry and ensure ignored parameters are not saved', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            '_redirect' => encrypt('/whatever'),\n            '_error_redirect' => encrypt('/whatever-else'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNull($entry->get('_collection'));\n    $this->assertNull($entry->get('_redirect'));\n    $this->assertNull($entry->get('_error_redirect'));\n});\n\nit('can store entry and ensure updated at is set', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertNotNull($entry->get('updated_at'));\n});\n\nit('can store entry where collection is date ordered and ensure date is saved', function () {\n    TestTime::freeze('Y-m-d H:i', '2021-10-10 11:11');\n\n    Collection::make('comments')->dated(true)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('2021-10-10.this-is-great.md', $entry->path());\n});\n\nit('can store entry where collection is not date ordered and ensure date is saved', function () {\n    TestTime::freeze('Y-m-d H:i', '2021-10-10 11:11');\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'date',\n                            'field' => [\n                                'mode' => 'single',\n                                'time_enabled' => false,\n                                'time_required' => false,\n                                'earliest_date' => '1900-01-01',\n                                'format' => 'Y-m-d',\n                                'full_width' => false,\n                                'inline' => false,\n                                'columns' => 1,\n                                'rows' => 1,\n                                'display' => 'Date',\n                                'type' => 'date',\n                                'icon' => 'date',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->dated(false)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'date' => '2021-12-25',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->get('date'), '2021-12-25');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('this-is-great.md', $entry->path());\n});\n\nit('can store entry and ensure honeypot works if value is empty', function () {\n    Config::set('guest-entries.honeypot', 'postcode');\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great2',\n            'postcode' => '',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great2');\n});\n\nit('can store entry and ensure honeypot works if value is not empty', function () {\n    Config::set('guest-entries.honeypot', 'postcode');\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great3',\n            'postcode' => 'A12 34B',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNull($entry);\n});\n\nit('can store entry and ensure entry is unpublished by default', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertFalse($entry->published());\n});\n\nit('can store entry and ensure published status is updated', function () {\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'published' => '1',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertTrue($entry->published());\n});\n\nit('can store entry and ensure events and dispatched', function () {\n    Event::fake();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    Event::assertDispatchedTimes(GuestEntryCreated::class, 1);\n});\n\nit('can store entry and date is saved as part of file name if dated collection', function () {\n    Collection::make('comments')->dated(true)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'date' => '2021-06-06',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('2021-06-06.this-is-great.md', $entry->path());\n});\n\nit('can store entry and ensure file can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachment',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                                'max_items' => 1,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'attachment' => UploadedFile::fake()->create('foobar.png'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNotNull($entry->get('attachment'));\n    $this->assertIsString($entry->get('attachment'));\n});\n\nit('cant store an entry when uploading a PHP file', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachment',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                                'max_items' => 1,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'attachment' => UploadedFile::fake()->image('foobar.php'),\n        ])\n        ->assertSessionHasErrors('attachment');\n\n    assertCount(0, Entry::all());\n\n    Storage::disk('local')->assertMissing('assets/foobar.php');\n});\n\nit('can store entry and ensure multiple files can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this->withoutExceptionHandling();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                UploadedFile::fake()->create('barfoo.jpg'),\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n});\n\nit('can store entry with one uploaded file and one existing file', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Asset::make()->container('assets')->path('blah-blah-blah.png')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this->withoutExceptionHandling();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                'blah-blah-blah.png',\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n\n    $this->assertStringContainsString('-foobar.png', $entry->get('attachments')[0]);\n    $this->assertStringContainsString('blah-blah-blah.png', $entry->get('attachments')[1]);\n});\n\nit('can store entry and ensure date is in same format defined in blueprint', function () {\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'date',\n                            'field' => [\n                                'mode' => 'single',\n                                'time_enabled' => false,\n                                'time_required' => false,\n                                'earliest_date' => '1900-01-01',\n                                'format' => 'Y',\n                                'full_width' => false,\n                                'inline' => false,\n                                'columns' => 1,\n                                'rows' => 1,\n                                'display' => 'Date',\n                                'type' => 'date',\n                                'icon' => 'date',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->dated(false)->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'date' => '2009-06-06',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->get('date'), '2009');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertStringContainsString('this-is-great.md', $entry->path());\n});\n\nit('can store entry and ensure created in correct site by request payload', function () {\n    Config::set('statamic.editions.pro', true);\n\n    Config::set('statamic.sites.sites', [\n        'one' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/one',\n        ],\n        'two' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/two',\n        ],\n    ]);\n\n    Site::setConfig(config('statamic.sites'));\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'site' => 'one',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertSame($entry->locale(), 'one');\n});\n\nit('can store entry and ensure created in correct site by referer', function () {\n    Config::set('statamic.editions.pro', true);\n\n    Config::set('statamic.sites.sites', [\n        'one' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/one',\n        ],\n        'two' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/two',\n        ],\n    ]);\n\n    Site::setConfig(config('statamic.sites'));\n\n    Collection::make('comments')->save();\n\n    $this\n        ->from('/two/something')\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertSame($entry->locale(), 'two');\n});\n\nit('can store entry and ensure created in correct site by current site fallback', function () {\n    Config::set('statamic.editions.pro', true);\n\n    Config::set('statamic.sites.sites', [\n        'one' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/one',\n        ],\n        'two' => [\n            'name' => config('app.name'),\n            'locale' => 'en_US',\n            'url' => '/two',\n        ],\n    ]);\n\n    Site::setConfig(config('statamic.sites'));\n    Site::setCurrent('two');\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n    $this->assertSame($entry->locale(), 'two');\n});\n\nit('can store entry and ensure entry is only saved once', function () {\n    Event::fake();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    Event::assertDispatchedTimes(EntrySaved::class, 1);\n});\n\nit('can store entry with replicator field', function () {\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'text' => 'I have a Blue Peter badge!',\n                ],\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n});\n\nit('can store entry with replicator field and an assets field inside the replicator', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('comments')\n        ->setNamespace('collections.comments')\n        ->setContents([\n            'title' => 'Comments',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                            [\n                                                'handle' => 'document',\n                                                'field' => [\n                                                    'mode' => 'list',\n                                                    'container' => 'assets',\n                                                    'restrict' => false,\n                                                    'allow_uploads' => true,\n                                                    'show_filename' => true,\n                                                    'display' => 'Document',\n                                                    'type' => 'assets',\n                                                    'icon' => 'assets',\n                                                    'listable' => 'hidden',\n                                                    'max_items' => 1,\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('comments')->save();\n\n    $this->withoutExceptionHandling();\n\n    $this\n        ->post(route('statamic.guest-entries.store'), [\n            '_collection' => encrypt('comments'),\n            'title' => 'This is great',\n            'slug' => 'this-is-great',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'document' => UploadedFile::fake()->create('document.pdf', 100),\n                ],\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::all()->last();\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'comments');\n    $this->assertSame($entry->get('title'), 'This is great');\n    $this->assertSame($entry->slug(), 'this-is-great');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n\n    $this->assertIsString($entry->get('things')[0]['text']);\n    $this->assertIsString($entry->get('things')[1]['document']);\n});\n\nit('can update entry', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n});\n\nit('can update entry if collection has title format', function () {\n    Collection::make('albums')->titleFormats(['default' => '{{ artist }} - {{ name }}'])->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Guvna B - Allo Mate!',\n            'name' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'name' => 'Allo Mate',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Guvna B - Allo Mate');\n});\n\nit('can update entry with custom form request', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_request' => encrypt(FirstCustomUpdateRequest::class),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect()\n        ->assertSessionHasErrors('record_label');\n});\n\nit('cant update entry if collection has not been whitelisted', function () {\n    Collection::make('hahahahaha')->save();\n\n    Entry::make()\n        ->id('hahahahaha-idee')\n        ->collection('hahahahaha')\n        ->slug('smth')\n        ->data([\n            'title' => 'Smth',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('hahahahaha'),\n            '_id' => encrypt('hahahahaha-idee'),\n            'title' => 'Something',\n        ])\n        ->assertForbidden();\n\n    $entry = Entry::find('hahahahaha-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'hahahahaha');\n    $this->assertSame($entry->get('title'), 'Smth'); // Has not changed\n    $this->assertSame($entry->slug(), 'smth');\n});\n\nit('can update entry and user is redirected', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_redirect' => encrypt('/good-good-night'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect('/good-good-night');\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n});\n\nit('can update entry and ensure required parameters are notsaved', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_redirect' => encrypt('/something'),\n            '_error_redirect' => encrypt('/something-else'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNull($entry->get('_collection'));\n    $this->assertNull($entry->get('_id'));\n    $this->assertNull($entry->get('_redirect'));\n    $this->assertNull($entry->get('_error_redirect'));\n});\n\nit('can update entry and ensure updated at is set', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'updated_at' => 12345,\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('updated_at'));\n    $this->assertNotSame($entry->get('updated_at'), 12345);\n});\n\nit('can update entry and ensure published status is updated', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'published' => '1',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n    $this->assertTrue($entry->published());\n});\n\nit('can update entry and ensure events are dispatched', function () {\n    Event::fake();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    Event::assertDispatchedTimes(GuestEntryUpdated::class, 1);\n});\n\nit('can update entry and date is saved as part of file name if dated collection', function () {\n    Collection::make('albums')->dated(true)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'date' => '2021-09-09',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertStringContainsString('2021-09-09.allo-mate.md', $entry->path());\n});\n\nit('can update entry and ensure date is in same format as defined in blueprint', function () {\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'date',\n                            'field' => [\n                                'mode' => 'single',\n                                'time_enabled' => false,\n                                'time_required' => false,\n                                'earliest_date' => '1900-01-01',\n                                'format' => 'Y',\n                                'full_width' => false,\n                                'inline' => false,\n                                'columns' => 1,\n                                'rows' => 1,\n                                'display' => 'Date',\n                                'type' => 'date',\n                                'icon' => 'date',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->dated(false)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'date' => '2021-09-09',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->get('date'), '2021');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertStringContainsString('allo-mate.md', $entry->path());\n});\n\nit('can update entry and ensure file can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachment',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                                'max_items' => 1,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'attachment' => UploadedFile::fake()->image('something.jpg'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('attachment'));\n    $this->assertIsString($entry->get('attachment'));\n});\n\nit('cant update entry when uploading a PHP file', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachment',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                                'max_items' => 1,\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'attachment' => UploadedFile::fake()->image('something.php'),\n        ])\n        ->assertSessionHasErrors('attachment');\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNull($entry->get('attachment'));\n\n    Storage::disk('local')->assertMissing('something.php');\n});\n\nit('can update entry and ensure multiple files can be uploaded', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                UploadedFile::fake()->create('barfoo.jpg'),\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n});\n\nit('can update entry with one uploaded file and one existing file', function () {\n    AssetContainer::make('assets')->disk('local')->save();\n\n    Asset::make()->container('assets')->path('blah-blah-blah.png')->save();\n\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'attachments',\n                            'field' => [\n                                'mode' => 'list',\n                                'container' => 'assets',\n                                'restrict' => false,\n                                'allow_uploads' => true,\n                                'show_filename' => true,\n                                'display' => 'Attachment',\n                                'type' => 'assets',\n                                'icon' => 'assets',\n                                'listable' => 'hidden',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'attachments' => [\n                UploadedFile::fake()->create('foobar.png'),\n                'blah-blah-blah.png',\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertNotNull($entry->get('attachments'));\n    $this->assertIsArray($entry->get('attachments'));\n    $this->assertSame(count($entry->get('attachments')), 2);\n\n    $this->assertStringContainsString('-foobar.png', $entry->get('attachments')[0]);\n    $this->assertStringContainsString('blah-blah-blah.png', $entry->get('attachments')[1]);\n});\n\nit('can update entry with revisions enabled', function () {\n    Config::set('statamic.editions.pro', true);\n    Config::set('statamic.revisions.enabled', true);\n\n    Collection::make('albums')->revisionsEnabled(true)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n    $workingCopy = $entry->workingCopy();\n\n    $this->assertNotNull($entry);\n    $this->assertTrue($entry->revisionsEnabled());\n    $this->assertTrue($entry->hasWorkingCopy());\n    $this->assertSame($entry->collectionHandle(), 'albums');\n\n    $this->assertSame($workingCopy->message(), 'Guest Entry Updated');\n    $this->assertSame($workingCopy->action(), 'revision');\n    $this->assertSame($workingCopy->attributes(), [\n        'title' => 'Allo Mate!',\n        'slug' => 'allo-mate',\n        'published' => true,\n        'data' => [\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'record_label' => 'Unknown',\n        ],\n    ]);\n});\n\nit('can update entry and date and ensure date is saved normally if not dated collection', function () {\n    Collection::make('albums')->dated(false)->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'date' => '2021-09-09',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->get('date'), '2021-09-09');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertStringContainsString('allo-mate.md', $entry->path());\n});\n\nit('can update entry and ensure entry is only saved once', function () {\n    Event::fake();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    Event::assertDispatchedTimes(EntrySaved::class, 2);\n});\n\nit('can update entry with replicator field', function () {\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'text' => 'I have a Blue Peter badge!',\n                ],\n            ],\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n});\n\nit('can update entry with replicator field and an assets field inside the replicator', function () {\n    Blueprint::make('albums')\n        ->setNamespace('collections.albums')\n        ->setContents([\n            'title' => 'Albums',\n            'sections' => [\n                'main' => [\n                    'display' => 'main',\n                    'fields' => [\n                        [\n                            'handle' => 'title',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'artist',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'slug',\n                            'field' => [\n                                'type' => 'slug',\n                            ],\n                        ],\n                        [\n                            'handle' => 'record_label',\n                            'field' => [\n                                'type' => 'text',\n                            ],\n                        ],\n                        [\n                            'handle' => 'things',\n                            'field' => [\n                                'sets' => [\n                                    'thing' => [\n                                        'display' => 'Thing',\n                                        'fields' => [\n                                            [\n                                                'handle' => 'link',\n                                                'field' => [\n                                                    'type' => 'text',\n                                                ],\n                                            ],\n                                            [\n                                                'handle' => 'document',\n                                                'field' => [\n                                                    'mode' => 'list',\n                                                    'container' => 'assets',\n                                                    'restrict' => false,\n                                                    'allow_uploads' => true,\n                                                    'show_filename' => true,\n                                                    'display' => 'Document',\n                                                    'type' => 'assets',\n                                                    'icon' => 'assets',\n                                                    'listable' => 'hidden',\n                                                    'max_items' => 1,\n                                                ],\n                                            ],\n                                        ],\n                                    ],\n                                ],\n                                'type' => 'replicator',\n                            ],\n                        ],\n                    ],\n                ],\n            ],\n        ])\n        ->save();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->post(route('statamic.guest-entries.update'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            'record_label' => 'Unknown',\n            'things' => [\n                [\n                    'text' => 'Woop die whoop!',\n                ],\n                [\n                    'document' => UploadedFile::fake()->create('document.pdf', 100),\n                ],\n            ],\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNotNull($entry);\n    $this->assertSame($entry->collectionHandle(), 'albums');\n    $this->assertSame($entry->get('title'), 'Allo Mate!');\n    $this->assertSame($entry->get('record_label'), 'Unknown');\n    $this->assertSame($entry->slug(), 'allo-mate');\n\n    $this->assertIsArray($entry->get('things'));\n    $this->assertCount(2, $entry->get('things'));\n\n    $this->assertIsString($entry->get('things')[0]['text']);\n    $this->assertIsString($entry->get('things')[1]['document']);\n});\n\nit('can destroy entry', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNull($entry);\n});\n\nit('cant destroy entry if collection has not been whitelisted', function () {\n    Collection::make('blahblah')->save();\n\n    Entry::make()\n        ->id('arg')\n        ->collection('blahblah')\n        ->slug('arg')\n        ->data([\n            'title' => 'Arrrrgg!',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('blahblah'),\n            '_id' => encrypt('arg'),\n        ])\n        ->assertForbidden();\n\n    $entry = Entry::find('arg');\n\n    $this->assertNotNull($entry);\n});\n\nit('can destroy entry if collection has not been whitelisted and user is redirected', function () {\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n            '_redirect' => encrypt('/allo-mate'),\n        ])\n        ->assertRedirect('/allo-mate');\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNull($entry);\n});\n\nit('can destroy entry and ensure events are dispatched', function () {\n    Event::fake();\n\n    Collection::make('albums')->save();\n\n    Entry::make()\n        ->id('allo-mate-idee')\n        ->collection('albums')\n        ->slug('allo-mate')\n        ->data([\n            'title' => 'Allo Mate!',\n            'artist' => 'Guvna B',\n        ])\n        ->save();\n\n    $this\n        ->delete(route('statamic.guest-entries.destroy'), [\n            '_collection' => encrypt('albums'),\n            '_id' => encrypt('allo-mate-idee'),\n        ])\n        ->assertRedirect();\n\n    $entry = Entry::find('allo-mate-idee');\n\n    $this->assertNull($entry);\n\n    Event::assertDispatchedTimes(GuestEntryDeleted::class, 1);\n});\n", "<?php\n\nuse DuncanMcClean\\GuestEntries\\Tags\\GuestEntriesTag;\nuse Illuminate\\Container\\EntryNotFoundException;\nuse Illuminate\\Support\\Facades\\Config;\nuse Statamic\\Exceptions\\CollectionNotFoundException;\nuse Statamic\\Facades\\Antlers;\nuse Statamic\\Facades\\Collection;\nuse Statamic\\Facades\\Entry;\nuse Statamic\\Statamic;\nuse Statamic\\Tags\\Tags;\n\nuse function PHPUnit\\Framework\\assertStringContainsString;\n\n$tag = null;\n\nbeforeEach(function () use (&$tag) {\n    Config::set('guest-entries.disable_form_parameter_validation', true);\n\n    /** @var Tags */\n    $tag = resolve(GuestEntriesTag::class)\n        ->setParser(Antlers::parser())\n        ->setContext([]);\n});\n\nit('returns create guest entry form', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n    ]);\n\n    $tag->setContent('\n        <h2>Create Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->create();\n\n    assertStringContainsString('http://localhost/!/guest-entries/create', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n\n    assertStringContainsString('<h2>Create Guestbook Entry</h2>', $usage);\n    assertStringContainsString('<textarea name=\"comment\"></textarea>', $usage);\n});\n\nit('throws an exception when attempting to retrurn create guest entry form if no collection is provided', function () use (&$tag) {\n    $tag->setParameters([\n        'collection' => null,\n    ]);\n\n    $tag->setContent('\n        <h2>Create Llalalalal Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->create();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return create guest entry form when collection does not exist', function () use (&$tag) {\n    $tag->setParameters([\n        'collection' => 'lalalalallalalal',\n    ]);\n\n    $tag->setContent('\n        <h2>Create Llalalalal Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->create();\n})->throws(CollectionNotFoundException::class);\n\nit('returns create guest entry form with redirect and error_redirect hidden inputs', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'redirect' => '/thank-you',\n        'error_redirect' => '/error',\n    ]);\n\n    $usage = $tag->create();\n\n    assertStringContainsString('http://localhost/!/guest-entries/create', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_redirect\" value=\"/thank-you\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_error_redirect\" value=\"/error\"', $usage);\n});\n\nit('returns update guest entry form', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Update Guestbook Entry</h2>', $usage);\n    assertStringContainsString('<textarea name=\"comment\"></textarea>', $usage);\n});\n\nit('throws an exception when attempting to return update guest entry create form if no collection is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return update guest entry form if no ID is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'blah',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(CollectionNotFoundException::class);\n\nit('throws an exception when attempting to return update guest entry form if no entry ID is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return update guest entry form when entry ID does not exist', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'blhabahahahah',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\"></textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n})->throws(EntryNotFoundException::class);\n\nit('returns update guest entry form and entry values can be used', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World', 'comment' => 'Something can go here'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Update Guestbook Entry: {{ title }}</h2>\n\n        <input name=\"name\">\n        <input name=\"email\">\n        <textarea name=\"comment\">Something can go here</textarea>\n\n        <button type=\"submit\">Submit</button>\n    ');\n\n    $usage = $tag->update();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Update Guestbook Entry: Hello World</h2>', $usage);\n    assertStringContainsString('<textarea name=\"comment\">Something can go here</textarea>', $usage);\n});\n\nit('returns update guest entry form with redirect and error_redirect hidden inputs', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n        'redirect' => '/thank-you',\n        'error_redirect' => '/error',\n    ]);\n\n    $usage = $tag->update();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_redirect\" value=\"/thank-you\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_error_redirect\" value=\"/error\"', $usage);\n});\n\nit('can fetch update guest entry form data', function () {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $form = Statamic::tag('guest-entries:update')->params([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ])->fetch();\n\n    assertStringContainsString('http://localhost/!/guest-entries/update', $form['attrs_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $form['params_html']);\n    assertStringContainsString('Hello World', $form['title']);\n});\n\nit('returns delete guest entry form', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Delete Guestbook Entry</h2>', $usage);\n    assertStringContainsString('<button type=\"submit\">DELETE</button>', $usage);\n});\n\nit('throws an exception when attempting to return delete guest entry form if no collection is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return delete guest entry form when collection does not exist', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'blah',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(CollectionNotFoundException::class);\n\nit('throws an exception when attempting to return delete guest entry form if no entry ID is provided', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(\\Exception::class);\n\nit('throws an exception when attempting to return delete guest entry form when entry ID does not exist', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'blhabahahahah',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n})->throws(EntryNotFoundException::class);\n\nit('returns delete guest entry form and entry values can be used', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ]);\n\n    $tag->setContent('\n        <h2>Delete Guestbook Entry: {{ title }}</h2>\n\n        <button type=\"submit\">DELETE</button>\n    ');\n\n    $usage = $tag->delete();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n\n    assertStringContainsString('<h2>Delete Guestbook Entry: Hello World</h2>', $usage);\n    assertStringContainsString('<button type=\"submit\">DELETE</button>', $usage);\n});\n\nit('returns delete guest entry form with redirect and error_redirect hidden inputs', function () use (&$tag) {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $tag->setParameters([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n        'redirect' => '/thank-you',\n        'error_redirect' => '/error',\n    ]);\n\n    $usage = $tag->delete();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_redirect\" value=\"/thank-you\"', $usage);\n    assertStringContainsString('<input type=\"hidden\" name=\"_error_redirect\" value=\"/error\"', $usage);\n});\n\nit('can fetch delete guest entry form data', function () {\n    Collection::make('guestbook')->save();\n\n    Entry::make()\n        ->collection('guestbook')\n        ->id('hello')\n        ->slug('hello')\n        ->data(['title' => 'Hello World'])\n        ->save();\n\n    $form = Statamic::tag('guest-entries:delete')->params([\n        'collection' => 'guestbook',\n        'id' => 'hello',\n    ])->fetch();\n\n    assertStringContainsString('http://localhost/!/guest-entries/delete', $form['attrs_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_token\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_collection\" value=\"guestbook\"', $form['params_html']);\n    assertStringContainsString('<input type=\"hidden\" name=\"_id\" value=\"hello\"', $form['params_html']);\n    assertStringContainsString('Hello World', $form['title']);\n});\n"], "filenames": ["src/Http/Controllers/GuestEntryController.php", "src/Http/Requests/DestroyRequest.php", "src/Http/Requests/StoreRequest.php", "src/Http/Requests/UpdateRequest.php", "tests/Http/Controllers/GuestEntryControllerTest.php", "tests/Tags/GuestEntriesTagTest.php"], "buggy_code_start_loc": [15, 11, 12, 12, 11, 6], "buggy_code_end_loc": [245, 13, 14, 14, 1467, 13], "fixing_code_start_loc": [16, 11, 12, 12, 12, 5], "fixing_code_end_loc": [256, 13, 14, 14, 1614, 15], "type": "CWE-434", "message": "Guest Entries is a php library which allows users to create, update & delete entries from the front-end of a site. In affected versions the file uploads feature did not prevent the upload of PHP files. This may lead to code execution on the server by authenticated users. This vulnerability is fixed in v3.1.2. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-47621", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-13T20:15:28.840", "lastModified": "2023-11-21T03:10:58.357", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Guest Entries is a php library which allows users to create, update & delete entries from the front-end of a site. In affected versions the file uploads feature did not prevent the upload of PHP files. This may lead to code execution on the server by authenticated users. This vulnerability is fixed in v3.1.2. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "Guest Entries es una librer\u00eda php que permite a los usuarios crear, actualizar y eliminar entradas desde el front-end de un sitio. En las versiones afectadas, la funci\u00f3n de carga de archivos no imped\u00eda la carga de archivos PHP. Esto puede provocar la ejecuci\u00f3n de c\u00f3digo en el servidor por parte de usuarios autenticados. Esta vulnerabilidad se solucion\u00f3 en v3.1.2. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:duncanmcclean:guest_entries:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.3", "matchCriteriaId": "19D836F5-2480-4AD1-885E-4F8F8B7494B0"}]}]}], "references": [{"url": "https://github.com/duncanmcclean/guest-entries/commit/a8e17b4413bfbbc337a887761a6c858ef1ddb4da", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/duncanmcclean/guest-entries/security/advisories/GHSA-rw82-mhmx-grmj", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/duncanmcclean/guest-entries/commit/a8e17b4413bfbbc337a887761a6c858ef1ddb4da"}}