{"buggy_code": ["<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Helpers\\Helper;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Transformers\\AssetMaintenancesTransformer;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetMaintenance;\nuse App\\Models\\Company;\nuse Auth;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Input;\n\n/**\n * This controller handles all actions related to Asset Maintenance for\n * the Snipe-IT Asset Management application.\n *\n * @version    v2.0\n */\nclass AssetMaintenancesController extends Controller\n{\n\n\n    /**\n     *  Generates the JSON response for asset maintenances listing view.\n     *\n     * @see AssetMaintenancesController::getIndex() method that generates view\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     * @since [v1.8]\n     * @return String JSON\n     */\n    public function index(Request $request)\n    {\n        $maintenances = AssetMaintenance::with('asset', 'asset.model','asset.location', 'supplier', 'asset.company', 'admin');\n\n        if ($request->filled('search')) {\n            $maintenances = $maintenances->TextSearch($request->input('search'));\n        }\n\n        if ($request->filled('asset_id')) {\n            $maintenances->where('asset_id', '=', $request->input('asset_id'));\n        }\n\n        // Set the offset to the API call's offset, unless the offset is higher than the actual count of items in which\n        // case we override with the actual count, so we should return 0 items.\n        $offset = (($maintenances) && ($request->get('offset') > $maintenances->count())) ? $maintenances->count() : $request->get('offset', 0);\n\n        // Check to make sure the limit is not higher than the max allowed\n        ((config('app.max_results') >= $request->input('limit')) && ($request->filled('limit'))) ? $limit = $request->input('limit') : $limit = config('app.max_results');\n\n\n        $allowed_columns = [\n                                'id',\n                                'title',\n                                'asset_maintenance_time',\n                                'asset_maintenance_type',\n                                'cost',\n                                'start_date',\n                                'completion_date',\n                                'notes',\n                                'asset_tag',\n                                'asset_name',\n                                'user_id'\n                            ];\n        $order = $request->input('order') === 'asc' ? 'asc' : 'desc';\n        $sort = in_array($request->input('sort'), $allowed_columns) ? e($request->input('sort')) : 'created_at';\n\n        switch ($sort) {\n            case 'user_id':\n                $maintenances = $maintenances->OrderAdmin($order);\n                break;\n            case 'asset_tag':\n                $maintenances = $maintenances->OrderByTag($order);\n                break;\n            case 'asset_name':\n                $maintenances = $maintenances->OrderByAssetName($order);\n                break;\n            default:\n                $maintenances = $maintenances->orderBy($sort, $order);\n                break;\n        }\n\n        $total = $maintenances->count();\n        $maintenances = $maintenances->skip($offset)->take($limit)->get();\n        return (new AssetMaintenancesTransformer())->transformAssetMaintenances($maintenances, $total);\n\n\n    }\n\n\n    /**\n     *  Validates and stores the new asset maintenance\n     *\n     * @see AssetMaintenancesController::getCreate() method for the form\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     * @since [v1.8]\n     * @return String JSON\n     */\n    public function store(Request $request)\n    {\n        // create a new model instance\n        $assetMaintenance = new AssetMaintenance();\n        $assetMaintenance->supplier_id = $request->input('supplier_id');\n        $assetMaintenance->is_warranty = $request->input('is_warranty');\n        $assetMaintenance->cost =  Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = e($request->input('notes'));\n        $asset = Asset::find(e($request->input('asset_id')));\n\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot add a maintenance for that asset'));\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n        $assetMaintenance->user_id                = Auth::id();\n\n        if (( $assetMaintenance->completion_date !== null )\n            && ( $assetMaintenance->start_date !== \"\" )\n            && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n        // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n            return response()->json(Helper::formatStandardApiResponse('success', $assetMaintenance, trans('admin/asset_maintenances/message.create.success')));\n\n        }\n\n        return response()->json(Helper::formatStandardApiResponse('error', null, $assetMaintenance->getErrors()));\n\n    }\n\n\n    /**\n     *  Validates and stores an update to an asset maintenance\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @param int $assetMaintenanceId\n     * @param int $request\n     * @version v1.0\n     * @since [v4.0]\n     * @return String JSON\n     */\n    public function update(Request $request, $assetMaintenanceId = null)\n    {\n        // Check if the asset maintenance exists\n        $assetMaintenance = AssetMaintenance::findOrFail($assetMaintenanceId);\n\n        if (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot edit a maintenance for that asset'));\n        }\n\n        $assetMaintenance->supplier_id = e($request->input('supplier_id'));\n        $assetMaintenance->is_warranty = e($request->input('is_warranty'));\n        $assetMaintenance->cost =  Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = e($request->input('notes'));\n\n        $asset = Asset::find(request('asset_id'));\n\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot edit a maintenance for that asset'));\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n\n        if (( $assetMaintenance->completion_date == null )\n        ) {\n            if (( $assetMaintenance->asset_maintenance_time !== 0 )\n                || ( !is_null($assetMaintenance->asset_maintenance_time) )\n            ) {\n                $assetMaintenance->asset_maintenance_time = null;\n            }\n        }\n\n        if (( $assetMaintenance->completion_date !== null )\n            && ( $assetMaintenance->start_date !== \"\" )\n            && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n        // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n\n            return response()->json(Helper::formatStandardApiResponse('success', $assetMaintenance, trans('admin/asset_maintenances/message.edit.success')));\n\n        }\n        return response()->json(Helper::formatStandardApiResponse('error', null, $assetMaintenance->getErrors()));\n    }\n\n    /**\n     *  Delete an asset maintenance\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @param int $assetMaintenanceId\n     * @version v1.0\n     * @since [v4.0]\n     * @return String JSON\n     */\n    public function destroy($assetMaintenanceId)\n    {\n        // Check if the asset maintenance exists\n        $assetMaintenance = AssetMaintenance::findOrFail($assetMaintenanceId);\n\n        if (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot delete a maintenance for that asset'));\n        }\n\n        $assetMaintenance->delete();\n\n        return response()->json(Helper::formatStandardApiResponse('success', $assetMaintenance, trans('admin/asset_maintenances/message.delete.success')));\n\n\n    }\n\n    /**\n     *  View an asset maintenance\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @param int $assetMaintenanceId\n     * @version v1.0\n     * @since [v4.0]\n     * @return String JSON\n     */\n    public function show($assetMaintenanceId)\n    {\n        $assetMaintenance = AssetMaintenance::findOrFail($assetMaintenanceId);\n        if (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot view a maintenance for that asset'));\n        }\n        return (new AssetMaintenancesTransformer())->transformAssetMaintenance($assetMaintenance);\n\n    }\n}\n", "<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetMaintenance;\nuse App\\Models\\Company;\nuse Auth;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Slack;\nuse Str;\nuse TCPDF;\nuse View;\n\n/**\n * This controller handles all actions related to Asset Maintenance for\n * the Snipe-IT Asset Management application.\n *\n * @version    v2.0\n */\nclass AssetMaintenancesController extends Controller\n{\n\n    /**\n    * Checks for permissions for this action.\n    *\n    * @todo This should be replaced with middleware and/or policies\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @version v1.0\n    * @since [v1.8]\n    * @return View\n    */\n    private static function getInsufficientPermissionsRedirect()\n    {\n        return redirect()->route('maintenances.index')\n          ->with('error', trans('general.insufficient_permissions'));\n    }\n\n    /**\n    *  Returns a view that invokes the ajax tables which actually contains\n    * the content for the asset maintenances listing, which is generated in getDatatable.\n    *\n    * @todo This should be replaced with middleware and/or policies\n    * @see AssetMaintenancesController::getDatatable() method that generates the JSON response\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @version v1.0\n    * @since [v1.8]\n    * @return View\n    */\n    public function index()\n    {\n        return view('asset_maintenances/index');\n    }\n\n\n\n    /**\n     *  Returns a form view to create a new asset maintenance.\n     *\n     * @see AssetMaintenancesController::postCreate() method that stores the data\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     * @since [v1.8]\n     * @return mixed\n     */\n    public function create()\n    {\n        $asset = null;\n\n        if ($asset = Asset::find(request('asset_id'))) {\n            // We have to set this so that the correct property is set in the select2 ajax dropdown\n            $asset->asset_id = $asset->id;\n        }\n\n        // Prepare Asset Maintenance Type List\n        $assetMaintenanceType = [\n                                    '' => 'Select an asset maintenance type',\n                                ] + AssetMaintenance::getImprovementOptions();\n        // Mark the selected asset, if it came in\n\n        return view('asset_maintenances/edit')\n                   ->with('asset', $asset)\n                   ->with('assetMaintenanceType', $assetMaintenanceType)\n                   ->with('item', new AssetMaintenance);\n    }\n\n    /**\n    *  Validates and stores the new asset maintenance\n    *\n    * @see AssetMaintenancesController::getCreate() method for the form\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @version v1.0\n    * @since [v1.8]\n    * @return mixed\n    */\n    public function store(Request $request)\n    {\n        // create a new model instance\n        $assetMaintenance = new AssetMaintenance();\n        $assetMaintenance->supplier_id = $request->input('supplier_id');\n        $assetMaintenance->is_warranty = $request->input('is_warranty');\n        $assetMaintenance->cost = Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = $request->input('notes');\n        $asset = Asset::find($request->input('asset_id'));\n\n        if ((!Company::isCurrentUserHasAccess($asset)) && ($asset!=null)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n        $assetMaintenance->user_id                = Auth::id();\n\n        if (( $assetMaintenance->completion_date !== null )\n            && ( $assetMaintenance->start_date !== \"\" )\n            && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n        // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n            // Redirect to the new asset maintenance page\n            return redirect()->route('maintenances.index')\n                           ->with('success', trans('admin/asset_maintenances/message.create.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($assetMaintenance->getErrors());\n\n    }\n\n    /**\n    *  Returns a form view to edit a selected asset maintenance.\n    *\n    * @see AssetMaintenancesController::postEdit() method that stores the data\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @param int $assetMaintenanceId\n    * @version v1.0\n    * @since [v1.8]\n    * @return mixed\n    */\n    public function edit($assetMaintenanceId = null)\n    {\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the improvement management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!$assetMaintenance->asset) {\n            return redirect()->route('maintenances.index')\n                ->with('error', 'The asset associated with this maintenance does not exist.');\n\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        if ($assetMaintenance->completion_date == '0000-00-00') {\n            $assetMaintenance->completion_date = null;\n        }\n\n        if ($assetMaintenance->start_date == '0000-00-00') {\n            $assetMaintenance->start_date = null;\n        }\n\n        if ($assetMaintenance->cost == '0.00') {\n            $assetMaintenance->cost = null;\n        }\n\n        // Prepare Improvement Type List\n        $assetMaintenanceType = [\n                                    '' => 'Select an improvement type',\n                                ] + AssetMaintenance::getImprovementOptions();\n\n        // Get Supplier List\n        // Render the view\n        return view('asset_maintenances/edit')\n                   ->with('selectedAsset', null)\n                   ->with('assetMaintenanceType', $assetMaintenanceType)\n                   ->with('item', $assetMaintenance);\n\n    }\n\n    /**\n     *  Validates and stores an update to an asset maintenance\n     *\n     * @see AssetMaintenancesController::postEdit() method that stores the data\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @param Request $request\n     * @param int $assetMaintenanceId\n     * @return mixed\n     * @version v1.0\n     * @since [v1.8]\n     */\n    public function update(Request $request, $assetMaintenanceId = null)\n    {\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the asset maintenance management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        $assetMaintenance->supplier_id = $request->input('supplier_id');\n        $assetMaintenance->is_warranty = $request->input('is_warranty');\n        $assetMaintenance->cost =  Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = $request->input('notes');\n\n        $asset = Asset::find(request('asset_id'));\n\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n\n        if (( $assetMaintenance->completion_date == null )\n        ) {\n            if (( $assetMaintenance->asset_maintenance_time !== 0 )\n              || ( !is_null($assetMaintenance->asset_maintenance_time) )\n            ) {\n                $assetMaintenance->asset_maintenance_time = null;\n            }\n        }\n\n        if (( $assetMaintenance->completion_date !== null )\n          && ( $assetMaintenance->start_date !== \"\" )\n          && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n      // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n\n            // Redirect to the new asset maintenance page\n            return redirect()->route('maintenances.index')\n                         ->with('success', trans('admin/asset_maintenances/message.edit.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($assetMaintenance->getErrors());\n    }\n\n    /**\n    *  Delete an asset maintenance\n    *\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @param int $assetMaintenanceId\n    * @version v1.0\n    * @since [v1.8]\n    * @return mixed\n    */\n    public function destroy($assetMaintenanceId)\n    {\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the asset maintenance management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        // Delete the asset maintenance\n        $assetMaintenance->delete();\n\n        // Redirect to the asset_maintenance management page\n        return redirect()->route('maintenances.index')\n                       ->with('success', trans('admin/asset_maintenances/message.delete.success'));\n    }\n\n    /**\n    *  View an asset maintenance\n    *\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @param int $assetMaintenanceId\n    * @version v1.0\n    * @since [v1.8]\n    * @return View\n    */\n    public function show($assetMaintenanceId)\n    {\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the asset maintenance management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        return view('asset_maintenances/view')->with('assetMaintenance', $assetMaintenance);\n    }\n}\n"], "fixing_code": ["<?php\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Helpers\\Helper;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Transformers\\AssetMaintenancesTransformer;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetMaintenance;\nuse App\\Models\\Company;\nuse Auth;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Input;\n\n/**\n * This controller handles all actions related to Asset Maintenance for\n * the Snipe-IT Asset Management application.\n *\n * @version    v2.0\n */\nclass AssetMaintenancesController extends Controller\n{\n\n\n    /**\n     *  Generates the JSON response for asset maintenances listing view.\n     *\n     * @see AssetMaintenancesController::getIndex() method that generates view\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     * @since [v1.8]\n     * @return String JSON\n     */\n    public function index(Request $request)\n    {\n        $this->authorize('view', Asset::class);\n        $maintenances = AssetMaintenance::with('asset', 'asset.model','asset.location', 'supplier', 'asset.company', 'admin');\n\n        if ($request->filled('search')) {\n            $maintenances = $maintenances->TextSearch($request->input('search'));\n        }\n\n        if ($request->filled('asset_id')) {\n            $maintenances->where('asset_id', '=', $request->input('asset_id'));\n        }\n\n        // Set the offset to the API call's offset, unless the offset is higher than the actual count of items in which\n        // case we override with the actual count, so we should return 0 items.\n        $offset = (($maintenances) && ($request->get('offset') > $maintenances->count())) ? $maintenances->count() : $request->get('offset', 0);\n\n        // Check to make sure the limit is not higher than the max allowed\n        ((config('app.max_results') >= $request->input('limit')) && ($request->filled('limit'))) ? $limit = $request->input('limit') : $limit = config('app.max_results');\n\n\n        $allowed_columns = [\n                                'id',\n                                'title',\n                                'asset_maintenance_time',\n                                'asset_maintenance_type',\n                                'cost',\n                                'start_date',\n                                'completion_date',\n                                'notes',\n                                'asset_tag',\n                                'asset_name',\n                                'user_id'\n                            ];\n        $order = $request->input('order') === 'asc' ? 'asc' : 'desc';\n        $sort = in_array($request->input('sort'), $allowed_columns) ? e($request->input('sort')) : 'created_at';\n\n        switch ($sort) {\n            case 'user_id':\n                $maintenances = $maintenances->OrderAdmin($order);\n                break;\n            case 'asset_tag':\n                $maintenances = $maintenances->OrderByTag($order);\n                break;\n            case 'asset_name':\n                $maintenances = $maintenances->OrderByAssetName($order);\n                break;\n            default:\n                $maintenances = $maintenances->orderBy($sort, $order);\n                break;\n        }\n\n        $total = $maintenances->count();\n        $maintenances = $maintenances->skip($offset)->take($limit)->get();\n        return (new AssetMaintenancesTransformer())->transformAssetMaintenances($maintenances, $total);\n\n\n    }\n\n\n    /**\n     *  Validates and stores the new asset maintenance\n     *\n     * @see AssetMaintenancesController::getCreate() method for the form\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     * @since [v1.8]\n     * @return String JSON\n     */\n    public function store(Request $request)\n    {\n        $this->authorize('edit', Asset::class);\n        // create a new model instance\n        $assetMaintenance = new AssetMaintenance();\n        $assetMaintenance->supplier_id = $request->input('supplier_id');\n        $assetMaintenance->is_warranty = $request->input('is_warranty');\n        $assetMaintenance->cost =  Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = e($request->input('notes'));\n        $asset = Asset::find(e($request->input('asset_id')));\n\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot add a maintenance for that asset'));\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n        $assetMaintenance->user_id                = Auth::id();\n\n        if (( $assetMaintenance->completion_date !== null )\n            && ( $assetMaintenance->start_date !== \"\" )\n            && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n        // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n            return response()->json(Helper::formatStandardApiResponse('success', $assetMaintenance, trans('admin/asset_maintenances/message.create.success')));\n\n        }\n\n        return response()->json(Helper::formatStandardApiResponse('error', null, $assetMaintenance->getErrors()));\n\n    }\n\n\n    /**\n     *  Validates and stores an update to an asset maintenance\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @param int $assetMaintenanceId\n     * @param int $request\n     * @version v1.0\n     * @since [v4.0]\n     * @return String JSON\n     */\n    public function update(Request $request, $assetMaintenanceId = null)\n    {\n        $this->authorize('edit', Asset::class);\n        // Check if the asset maintenance exists\n        $assetMaintenance = AssetMaintenance::findOrFail($assetMaintenanceId);\n\n        if (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot edit a maintenance for that asset'));\n        }\n\n        $assetMaintenance->supplier_id = e($request->input('supplier_id'));\n        $assetMaintenance->is_warranty = e($request->input('is_warranty'));\n        $assetMaintenance->cost =  Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = e($request->input('notes'));\n\n        $asset = Asset::find(request('asset_id'));\n\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot edit a maintenance for that asset'));\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n\n        if (( $assetMaintenance->completion_date == null )\n        ) {\n            if (( $assetMaintenance->asset_maintenance_time !== 0 )\n                || ( !is_null($assetMaintenance->asset_maintenance_time) )\n            ) {\n                $assetMaintenance->asset_maintenance_time = null;\n            }\n        }\n\n        if (( $assetMaintenance->completion_date !== null )\n            && ( $assetMaintenance->start_date !== \"\" )\n            && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n        // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n\n            return response()->json(Helper::formatStandardApiResponse('success', $assetMaintenance, trans('admin/asset_maintenances/message.edit.success')));\n\n        }\n        return response()->json(Helper::formatStandardApiResponse('error', null, $assetMaintenance->getErrors()));\n    }\n\n    /**\n     *  Delete an asset maintenance\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @param int $assetMaintenanceId\n     * @version v1.0\n     * @since [v4.0]\n     * @return String JSON\n     */\n    public function destroy($assetMaintenanceId)\n    {\n        $this->authorize('edit', Asset::class);\n        // Check if the asset maintenance exists\n        $assetMaintenance = AssetMaintenance::findOrFail($assetMaintenanceId);\n\n        if (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot delete a maintenance for that asset'));\n        }\n\n        $assetMaintenance->delete();\n\n        return response()->json(Helper::formatStandardApiResponse('success', $assetMaintenance, trans('admin/asset_maintenances/message.delete.success')));\n\n\n    }\n\n    /**\n     *  View an asset maintenance\n     *\n     * @author  A. Gianotto <snipe@snipe.net>\n     * @param int $assetMaintenanceId\n     * @version v1.0\n     * @since [v4.0]\n     * @return String JSON\n     */\n    public function show($assetMaintenanceId)\n    {\n        $this->authorize('view', Asset::class);\n        $assetMaintenance = AssetMaintenance::findOrFail($assetMaintenanceId);\n        if (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return response()->json(Helper::formatStandardApiResponse('error', null, 'You cannot view a maintenance for that asset'));\n        }\n        return (new AssetMaintenancesTransformer())->transformAssetMaintenance($assetMaintenance);\n\n    }\n}\n", "<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetMaintenance;\nuse App\\Models\\Company;\nuse Auth;\nuse Carbon\\Carbon;\nuse Illuminate\\Http\\Request;\nuse Slack;\nuse Str;\nuse TCPDF;\nuse View;\n\n/**\n * This controller handles all actions related to Asset Maintenance for\n * the Snipe-IT Asset Management application.\n *\n * @version    v2.0\n */\nclass AssetMaintenancesController extends Controller\n{\n\n    /**\n    * Checks for permissions for this action.\n    *\n    * @todo This should be replaced with middleware and/or policies\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @version v1.0\n    * @since [v1.8]\n    * @return View\n    */\n    private static function getInsufficientPermissionsRedirect()\n    {\n        return redirect()->route('maintenances.index')\n          ->with('error', trans('general.insufficient_permissions'));\n    }\n\n    /**\n    *  Returns a view that invokes the ajax tables which actually contains\n    * the content for the asset maintenances listing, which is generated in getDatatable.\n    *\n    * @todo This should be replaced with middleware and/or policies\n    * @see AssetMaintenancesController::getDatatable() method that generates the JSON response\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @version v1.0\n    * @since [v1.8]\n    * @return View\n    */\n    public function index()\n    {\n        $this->authorize('view', Asset::class);\n        return view('asset_maintenances/index');\n    }\n\n\n\n    /**\n     *  Returns a form view to create a new asset maintenance.\n     *\n     * @see AssetMaintenancesController::postCreate() method that stores the data\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @version v1.0\n     * @since [v1.8]\n     * @return mixed\n     */\n    public function create()\n    {\n        $this->authorize('edit', Asset::class);\n        $asset = null;\n\n        if ($asset = Asset::find(request('asset_id'))) {\n            // We have to set this so that the correct property is set in the select2 ajax dropdown\n            $asset->asset_id = $asset->id;\n        }\n\n        // Prepare Asset Maintenance Type List\n        $assetMaintenanceType = [\n                                    '' => 'Select an asset maintenance type',\n                                ] + AssetMaintenance::getImprovementOptions();\n        // Mark the selected asset, if it came in\n\n        return view('asset_maintenances/edit')\n                   ->with('asset', $asset)\n                   ->with('assetMaintenanceType', $assetMaintenanceType)\n                   ->with('item', new AssetMaintenance);\n    }\n\n    /**\n    *  Validates and stores the new asset maintenance\n    *\n    * @see AssetMaintenancesController::getCreate() method for the form\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @version v1.0\n    * @since [v1.8]\n    * @return mixed\n    */\n    public function store(Request $request)\n    {\n        $this->authorize('edit', Asset::class);\n        // create a new model instance\n        $assetMaintenance = new AssetMaintenance();\n        $assetMaintenance->supplier_id = $request->input('supplier_id');\n        $assetMaintenance->is_warranty = $request->input('is_warranty');\n        $assetMaintenance->cost = Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = $request->input('notes');\n        $asset = Asset::find($request->input('asset_id'));\n\n        if ((!Company::isCurrentUserHasAccess($asset)) && ($asset!=null)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n        $assetMaintenance->user_id                = Auth::id();\n\n        if (( $assetMaintenance->completion_date !== null )\n            && ( $assetMaintenance->start_date !== \"\" )\n            && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n        // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n            // Redirect to the new asset maintenance page\n            return redirect()->route('maintenances.index')\n                           ->with('success', trans('admin/asset_maintenances/message.create.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($assetMaintenance->getErrors());\n\n    }\n\n    /**\n    *  Returns a form view to edit a selected asset maintenance.\n    *\n    * @see AssetMaintenancesController::postEdit() method that stores the data\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @param int $assetMaintenanceId\n    * @version v1.0\n    * @since [v1.8]\n    * @return mixed\n    */\n    public function edit($assetMaintenanceId = null)\n    {\n        $this->authorize('edit', Asset::class);\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the improvement management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!$assetMaintenance->asset) {\n            return redirect()->route('maintenances.index')\n                ->with('error', 'The asset associated with this maintenance does not exist.');\n\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        if ($assetMaintenance->completion_date == '0000-00-00') {\n            $assetMaintenance->completion_date = null;\n        }\n\n        if ($assetMaintenance->start_date == '0000-00-00') {\n            $assetMaintenance->start_date = null;\n        }\n\n        if ($assetMaintenance->cost == '0.00') {\n            $assetMaintenance->cost = null;\n        }\n\n        // Prepare Improvement Type List\n        $assetMaintenanceType = [\n                                    '' => 'Select an improvement type',\n                                ] + AssetMaintenance::getImprovementOptions();\n\n        // Get Supplier List\n        // Render the view\n        return view('asset_maintenances/edit')\n                   ->with('selectedAsset', null)\n                   ->with('assetMaintenanceType', $assetMaintenanceType)\n                   ->with('item', $assetMaintenance);\n\n    }\n\n    /**\n     *  Validates and stores an update to an asset maintenance\n     *\n     * @see AssetMaintenancesController::postEdit() method that stores the data\n     * @author  Vincent Sposato <vincent.sposato@gmail.com>\n     * @param Request $request\n     * @param int $assetMaintenanceId\n     * @return mixed\n     * @version v1.0\n     * @since [v1.8]\n     */\n    public function update(Request $request, $assetMaintenanceId = null)\n    {\n        $this->authorize('edit', Asset::class);\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the asset maintenance management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        $assetMaintenance->supplier_id = $request->input('supplier_id');\n        $assetMaintenance->is_warranty = $request->input('is_warranty');\n        $assetMaintenance->cost =  Helper::ParseCurrency($request->input('cost'));\n        $assetMaintenance->notes = $request->input('notes');\n\n        $asset = Asset::find(request('asset_id'));\n\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        // Save the asset maintenance data\n        $assetMaintenance->asset_id               = $request->input('asset_id');\n        $assetMaintenance->asset_maintenance_type = $request->input('asset_maintenance_type');\n        $assetMaintenance->title                  = $request->input('title');\n        $assetMaintenance->start_date             = $request->input('start_date');\n        $assetMaintenance->completion_date        = $request->input('completion_date');\n\n        if (( $assetMaintenance->completion_date == null )\n        ) {\n            if (( $assetMaintenance->asset_maintenance_time !== 0 )\n              || ( !is_null($assetMaintenance->asset_maintenance_time) )\n            ) {\n                $assetMaintenance->asset_maintenance_time = null;\n            }\n        }\n\n        if (( $assetMaintenance->completion_date !== null )\n          && ( $assetMaintenance->start_date !== \"\" )\n          && ( $assetMaintenance->start_date !== \"0000-00-00\" )\n        ) {\n            $startDate                                = Carbon::parse($assetMaintenance->start_date);\n            $completionDate                           = Carbon::parse($assetMaintenance->completion_date);\n            $assetMaintenance->asset_maintenance_time = $completionDate->diffInDays($startDate);\n        }\n\n      // Was the asset maintenance created?\n        if ($assetMaintenance->save()) {\n\n            // Redirect to the new asset maintenance page\n            return redirect()->route('maintenances.index')\n                         ->with('success', trans('admin/asset_maintenances/message.edit.success'));\n        }\n        return redirect()->back()->withInput()->withErrors($assetMaintenance->getErrors());\n    }\n\n    /**\n    *  Delete an asset maintenance\n    *\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @param int $assetMaintenanceId\n    * @version v1.0\n    * @since [v1.8]\n    * @return mixed\n    */\n    public function destroy($assetMaintenanceId)\n    {\n        $this->authorize('edit', Asset::class);\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the asset maintenance management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        // Delete the asset maintenance\n        $assetMaintenance->delete();\n\n        // Redirect to the asset_maintenance management page\n        return redirect()->route('maintenances.index')\n                       ->with('success', trans('admin/asset_maintenances/message.delete.success'));\n    }\n\n    /**\n    *  View an asset maintenance\n    *\n    * @author  Vincent Sposato <vincent.sposato@gmail.com>\n    * @param int $assetMaintenanceId\n    * @version v1.0\n    * @since [v1.8]\n    * @return View\n    */\n    public function show($assetMaintenanceId)\n    {\n        $this->authorize('view', Asset::class);\n\n        // Check if the asset maintenance exists\n        if (is_null($assetMaintenance = AssetMaintenance::find($assetMaintenanceId))) {\n            // Redirect to the asset maintenance management page\n            return redirect()->route('maintenances.index')\n                           ->with('error', trans('admin/asset_maintenances/message.not_found'));\n        } elseif (!Company::isCurrentUserHasAccess($assetMaintenance->asset)) {\n            return static::getInsufficientPermissionsRedirect();\n        }\n\n        return view('asset_maintenances/view')->with('assetMaintenance', $assetMaintenance);\n    }\n}\n"], "filenames": ["app/Http/Controllers/Api/AssetMaintenancesController.php", "app/Http/Controllers/AssetMaintenancesController.php"], "buggy_code_start_loc": [35, 52], "buggy_code_end_loc": [243, 296], "fixing_code_start_loc": [36, 53], "fixing_code_end_loc": [249, 305], "type": "CWE-269", "message": "Improper Privilege Management in Packagist snipe/snipe-it prior to 5.3.11.", "other": {"cve": {"id": "CVE-2022-0611", "sourceIdentifier": "security@huntr.dev", "published": "2022-02-16T00:15:07.347", "lastModified": "2022-02-23T20:58:02.267", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Privilege Management in Packagist snipe/snipe-it prior to 5.3.11."}, {"lang": "es", "value": "Ua Administraci\u00f3n Inapropiada de Privilegios en Packagist snipe/snipe-it versiones anteriores a 5.3.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3.11", "matchCriteriaId": "2E69C757-5E35-4A65-ADAB-B7CA43791C1C"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/321be4733d3997fc738f0118e1b9af5905f95439", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/7b7447fc-f1b0-446c-b016-ee3f6511010b", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/321be4733d3997fc738f0118e1b9af5905f95439"}}