{"buggy_code": ["/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"absl/container/flat_hash_map.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/op_requires.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/platform/errors.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\ntemplate <class T>\nusing BatchedMap = std::vector<absl::flat_hash_map<int64_t, T>>;\n\nnamespace {\n// TODO(momernick): Extend this function to work with outputs of rank > 2.\ntemplate <class T>\nStatus OutputSparse(const BatchedMap<T>& per_batch_counts, int num_values,\n                    bool is_1d, OpKernelContext* context) {\n  int total_values = 0;\n  int num_batches = per_batch_counts.size();\n  for (const auto& per_batch_count : per_batch_counts) {\n    total_values += per_batch_count.size();\n  }\n\n  Tensor* indices;\n  int inner_dim = is_1d ? 1 : 2;\n  TF_RETURN_IF_ERROR(context->allocate_output(\n      0, TensorShape({total_values, inner_dim}), &indices));\n\n  Tensor* values;\n  TF_RETURN_IF_ERROR(\n      context->allocate_output(1, TensorShape({total_values}), &values));\n\n  auto output_indices = indices->matrix<int64_t>();\n  auto output_values = values->flat<T>();\n  int64_t value_loc = 0;\n  for (int b = 0; b < num_batches; ++b) {\n    const auto& per_batch_count = per_batch_counts[b];\n    std::vector<std::pair<int, T>> pairs(per_batch_count.begin(),\n                                         per_batch_count.end());\n    std::sort(pairs.begin(), pairs.end());\n    for (const auto& x : pairs) {\n      if (is_1d) {\n        output_indices(value_loc, 0) = x.first;\n      } else {\n        output_indices(value_loc, 0) = b;\n        output_indices(value_loc, 1) = x.first;\n      }\n      output_values(value_loc) = x.second;\n      ++value_loc;\n    }\n  }\n  Tensor* dense_shape;\n  if (is_1d) {\n    TF_RETURN_IF_ERROR(\n        context->allocate_output(2, TensorShape({1}), &dense_shape));\n    dense_shape->flat<int64_t>().data()[0] = num_values;\n  } else {\n    TF_RETURN_IF_ERROR(\n        context->allocate_output(2, TensorShape({2}), &dense_shape));\n    dense_shape->flat<int64_t>().data()[0] = num_batches;\n    dense_shape->flat<int64_t>().data()[1] = num_values;\n  }\n\n  return Status::OK();\n}\n\nint GetOutputSize(int max_seen, int max_length, int min_length) {\n  return max_length > 0 ? max_length : std::max((max_seen + 1), min_length);\n}\n\n}  // namespace\n\ntemplate <class T, class W>\nclass DenseCount : public OpKernel {\n public:\n  explicit DenseCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& data = context->input(0);\n    const Tensor& weights = context->input(1);\n    bool use_weights = weights.NumElements() > 0;\n\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsVector(data.shape()) ||\n                    TensorShapeUtils::IsMatrix(data.shape()),\n                errors::InvalidArgument(\n                    \"Input must be a 1 or 2-dimensional tensor. Got: \",\n                    data.shape().DebugString()));\n\n    if (use_weights) {\n      OP_REQUIRES(\n          context, weights.shape() == data.shape(),\n          errors::InvalidArgument(\n              \"Weights and data must have the same shape. Weight shape: \",\n              weights.shape().DebugString(),\n              \"; data shape: \", data.shape().DebugString()));\n    }\n\n    bool is_1d = TensorShapeUtils::IsVector(data.shape());\n    int negative_valued_axis = -1;\n    int num_batch_dimensions = (data.shape().dims() + negative_valued_axis);\n\n    int num_batch_elements = 1;\n    for (int i = 0; i < num_batch_dimensions; ++i) {\n      OP_REQUIRES(context, data.shape().dim_size(i) != 0,\n                  errors::InvalidArgument(\n                      \"Invalid input: Shapes dimension cannot be 0.\"));\n      num_batch_elements *= data.shape().dim_size(i);\n    }\n    int num_value_elements = data.shape().num_elements() / num_batch_elements;\n    auto per_batch_counts = BatchedMap<W>(num_batch_elements);\n\n    T max_value = 0;\n\n    const auto data_values = data.flat<T>();\n    const auto weight_values = weights.flat<W>();\n    int i = 0;\n    for (int b = 0; b < num_batch_elements; ++b) {\n      for (int v = 0; v < num_value_elements; ++v) {\n        const auto& value = data_values(i);\n        if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n          if (binary_output_) {\n            per_batch_counts[b][value] = 1;\n          } else if (use_weights) {\n            per_batch_counts[b][value] += weight_values(i);\n          } else {\n            per_batch_counts[b][value]++;\n          }\n          if (value > max_value) {\n            max_value = value;\n          }\n        }\n        ++i;\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n};\n\ntemplate <class T, class W>\nclass SparseCount : public OpKernel {\n public:\n  explicit SparseCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& indices = context->input(0);\n    const Tensor& values = context->input(1);\n    const Tensor& shape = context->input(2);\n    const Tensor& weights = context->input(3);\n    bool use_weights = weights.NumElements() > 0;\n\n    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(indices.shape()),\n                errors::InvalidArgument(\n                    \"Input indices must be a 2-dimensional tensor. Got: \",\n                    indices.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(values.shape()),\n                errors::InvalidArgument(\"Input values must be a vector. Got: \",\n                                        values.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(shape.shape()),\n                errors::InvalidArgument(\"Input shape must be a vector. Got: \",\n                                        shape.shape().DebugString()));\n    OP_REQUIRES(context,\n                values.shape().dim_size(0) == indices.shape().dim_size(0),\n                errors::InvalidArgument(\n                    \"Number of values must match first dimension of indices.\",\n                    \"Got \", values.shape().dim_size(0),\n                    \" values, indices shape: \", indices.shape().DebugString()));\n    OP_REQUIRES(\n        context, shape.shape().dim_size(0) == indices.shape().dim_size(1),\n        errors::InvalidArgument(\n            \"Number of dimensions must match second dimension of indices.\",\n            \"Got \", shape.shape().dim_size(0),\n            \" dimensions, indices shape: \", indices.shape().DebugString()));\n    OP_REQUIRES(context, shape.NumElements() > 0,\n                errors::InvalidArgument(\n                    \"The shape argument requires at least one element.\"));\n    // Validate indices: each index must be valid for the corresponding\n    // dimension. This could be possibly done better.\n    const auto indices_values = indices.matrix<int64_t>();\n    const auto shape_vector = shape.vec<int64_t>();\n    int num_values = values.NumElements();  // same as first dim of indices\n    int rank = indices.shape().dim_size(1);\n    for (int i = 0; i < num_values; ++i) {\n      for (int j = 0; j < rank; ++j) {\n        OP_REQUIRES(\n            context,\n            indices_values(i, j) >= 0 && indices_values(i, j) < shape_vector(j),\n            errors::InvalidArgument(\n                \"Invalid index value at \", i, \": dimension \", j, \" has value \",\n                indices_values(i, j), \" which is not in [0, \", shape_vector(j),\n                \") (as given by dense shape \", shape.DebugString()));\n      }\n    }\n\n    if (use_weights) {\n      OP_REQUIRES(\n          context, weights.shape() == values.shape(),\n          errors::InvalidArgument(\n              \"Weights and values must have the same shape. Weight shape: \",\n              weights.shape().DebugString(),\n              \"; values shape: \", values.shape().DebugString()));\n    }\n\n    bool is_1d = shape.NumElements() == 1;\n    int num_batches = is_1d ? 1 : shape_vector(0);\n\n    const auto values_values = values.flat<T>();\n    const auto weight_values = weights.flat<W>();\n\n    auto per_batch_counts = BatchedMap<W>(num_batches);\n\n    T max_value = 0;\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      int batch = is_1d ? 0 : indices_values(idx, 0);\n      if (batch >= num_batches) {\n        OP_REQUIRES(context, batch < num_batches,\n                    errors::InvalidArgument(\n                        \"Indices value along the first dimension must be \",\n                        \"lower than the first index of the shape.\", \"Got \",\n                        batch, \" as batch and \", num_batches,\n                        \" as the first dimension of the shape.\"));\n      }\n      const auto& value = values_values(idx);\n      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n        if (binary_output_) {\n          per_batch_counts[batch][value] = 1;\n        } else if (use_weights) {\n          per_batch_counts[batch][value] += weight_values(idx);\n        } else {\n          per_batch_counts[batch][value]++;\n        }\n        if (value > max_value) {\n          max_value = value;\n        }\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n  bool validate_;\n};\n\ntemplate <class T, class W>\nclass RaggedCount : public OpKernel {\n public:\n  explicit RaggedCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& splits = context->input(0);\n    const Tensor& values = context->input(1);\n    const Tensor& weights = context->input(2);\n    bool use_weights = weights.NumElements() > 0;\n    bool is_1d = false;\n\n    if (use_weights) {\n      OP_REQUIRES(\n          context, weights.shape() == values.shape(),\n          errors::InvalidArgument(\n              \"Weights and values must have the same shape. Weight shape: \",\n              weights.shape().DebugString(),\n              \"; values shape: \", values.shape().DebugString()));\n    }\n\n    const auto splits_values = splits.flat<int64_t>();\n    const auto values_values = values.flat<T>();\n    const auto weight_values = weights.flat<W>();\n    int num_batches = splits.NumElements() - 1;\n    int num_values = values.NumElements();\n\n    OP_REQUIRES(\n        context, num_batches > 0,\n        errors::InvalidArgument(\n            \"Must provide at least 2 elements for the splits argument\"));\n    OP_REQUIRES(context, splits_values(0) == 0,\n                errors::InvalidArgument(\"Splits must start with 0, not with \",\n                                        splits_values(0)));\n    OP_REQUIRES(context, splits_values(num_batches) == num_values,\n                errors::InvalidArgument(\n                    \"Splits must end with the number of values, got \",\n                    splits_values(num_batches), \" instead of \", num_values));\n\n    auto per_batch_counts = BatchedMap<W>(num_batches);\n    T max_value = 0;\n    int batch_idx = 0;\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      while (idx >= splits_values(batch_idx)) {\n        batch_idx++;\n      }\n      const auto& value = values_values(idx);\n      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n        if (binary_output_) {\n          per_batch_counts[batch_idx - 1][value] = 1;\n        } else if (use_weights) {\n          per_batch_counts[batch_idx - 1][value] += weight_values(idx);\n        } else {\n          per_batch_counts[batch_idx - 1][value]++;\n        }\n        if (value > max_value) {\n          max_value = value;\n        }\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n  bool validate_;\n};\n\n#define REGISTER_W(W_TYPE) \\\n  REGISTER(int32, W_TYPE)  \\\n  REGISTER(int64_t, W_TYPE)\n\n#define REGISTER(I_TYPE, W_TYPE)                                     \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"DenseCountSparseOutput\")             \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          DenseCount<I_TYPE, W_TYPE>)                \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseCountSparseOutput\")            \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          SparseCount<I_TYPE, W_TYPE>)               \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedCountSparseOutput\")            \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          RaggedCount<I_TYPE, W_TYPE>)\n\nTF_CALL_INTEGRAL_TYPES(REGISTER_W);\nTF_CALL_float(REGISTER_W);\nTF_CALL_double(REGISTER_W);\n\n#undef REGISTER_W\n#undef REGISTER\n\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include <limits>\n\n#include \"absl/container/flat_hash_map.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/op_requires.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/platform/errors.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\n// Don't allocate too large `BatchedMap<T>` objects\nstatic int kMaxBatches = std::numeric_limits<int>::max();\n\ntemplate <class T>\nusing BatchedMap = std::vector<absl::flat_hash_map<int64_t, T>>;\n\nnamespace {\n// TODO(momernick): Extend this function to work with outputs of rank > 2.\ntemplate <class T>\nStatus OutputSparse(const BatchedMap<T>& per_batch_counts, int num_values,\n                    bool is_1d, OpKernelContext* context) {\n  int total_values = 0;\n  int num_batches = per_batch_counts.size();\n  for (const auto& per_batch_count : per_batch_counts) {\n    total_values += per_batch_count.size();\n  }\n\n  Tensor* indices;\n  int inner_dim = is_1d ? 1 : 2;\n  TF_RETURN_IF_ERROR(context->allocate_output(\n      0, TensorShape({total_values, inner_dim}), &indices));\n\n  Tensor* values;\n  TF_RETURN_IF_ERROR(\n      context->allocate_output(1, TensorShape({total_values}), &values));\n\n  auto output_indices = indices->matrix<int64_t>();\n  auto output_values = values->flat<T>();\n  int64_t value_loc = 0;\n  for (int b = 0; b < num_batches; ++b) {\n    const auto& per_batch_count = per_batch_counts[b];\n    std::vector<std::pair<int, T>> pairs(per_batch_count.begin(),\n                                         per_batch_count.end());\n    std::sort(pairs.begin(), pairs.end());\n    for (const auto& x : pairs) {\n      if (is_1d) {\n        output_indices(value_loc, 0) = x.first;\n      } else {\n        output_indices(value_loc, 0) = b;\n        output_indices(value_loc, 1) = x.first;\n      }\n      output_values(value_loc) = x.second;\n      ++value_loc;\n    }\n  }\n  Tensor* dense_shape;\n  if (is_1d) {\n    TF_RETURN_IF_ERROR(\n        context->allocate_output(2, TensorShape({1}), &dense_shape));\n    dense_shape->flat<int64_t>().data()[0] = num_values;\n  } else {\n    TF_RETURN_IF_ERROR(\n        context->allocate_output(2, TensorShape({2}), &dense_shape));\n    dense_shape->flat<int64_t>().data()[0] = num_batches;\n    dense_shape->flat<int64_t>().data()[1] = num_values;\n  }\n\n  return Status::OK();\n}\n\nint GetOutputSize(int max_seen, int max_length, int min_length) {\n  return max_length > 0 ? max_length : std::max((max_seen + 1), min_length);\n}\n\n}  // namespace\n\ntemplate <class T, class W>\nclass DenseCount : public OpKernel {\n public:\n  explicit DenseCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& data = context->input(0);\n    const Tensor& weights = context->input(1);\n    bool use_weights = weights.NumElements() > 0;\n\n    OP_REQUIRES(context,\n                TensorShapeUtils::IsVector(data.shape()) ||\n                    TensorShapeUtils::IsMatrix(data.shape()),\n                errors::InvalidArgument(\n                    \"Input must be a 1 or 2-dimensional tensor. Got: \",\n                    data.shape().DebugString()));\n\n    if (use_weights) {\n      OP_REQUIRES(\n          context, weights.shape() == data.shape(),\n          errors::InvalidArgument(\n              \"Weights and data must have the same shape. Weight shape: \",\n              weights.shape().DebugString(),\n              \"; data shape: \", data.shape().DebugString()));\n    }\n\n    bool is_1d = TensorShapeUtils::IsVector(data.shape());\n    int negative_valued_axis = -1;\n    int num_batch_dimensions = (data.shape().dims() + negative_valued_axis);\n\n    int num_batch_elements = 1;\n    for (int i = 0; i < num_batch_dimensions; ++i) {\n      OP_REQUIRES(context, data.shape().dim_size(i) != 0,\n                  errors::InvalidArgument(\n                      \"Invalid input: Shapes dimension cannot be 0.\"));\n      num_batch_elements *= data.shape().dim_size(i);\n    }\n    int num_value_elements = data.shape().num_elements() / num_batch_elements;\n    auto per_batch_counts = BatchedMap<W>(num_batch_elements);\n\n    T max_value = 0;\n\n    const auto data_values = data.flat<T>();\n    const auto weight_values = weights.flat<W>();\n    int i = 0;\n    for (int b = 0; b < num_batch_elements; ++b) {\n      for (int v = 0; v < num_value_elements; ++v) {\n        const auto& value = data_values(i);\n        if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n          if (binary_output_) {\n            per_batch_counts[b][value] = 1;\n          } else if (use_weights) {\n            per_batch_counts[b][value] += weight_values(i);\n          } else {\n            per_batch_counts[b][value]++;\n          }\n          if (value > max_value) {\n            max_value = value;\n          }\n        }\n        ++i;\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n};\n\ntemplate <class T, class W>\nclass SparseCount : public OpKernel {\n public:\n  explicit SparseCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& indices = context->input(0);\n    const Tensor& values = context->input(1);\n    const Tensor& shape = context->input(2);\n    const Tensor& weights = context->input(3);\n    bool use_weights = weights.NumElements() > 0;\n\n    OP_REQUIRES(context, TensorShapeUtils::IsMatrix(indices.shape()),\n                errors::InvalidArgument(\n                    \"Input indices must be a 2-dimensional tensor. Got: \",\n                    indices.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(values.shape()),\n                errors::InvalidArgument(\"Input values must be a vector. Got: \",\n                                        values.shape().DebugString()));\n    OP_REQUIRES(context, TensorShapeUtils::IsVector(shape.shape()),\n                errors::InvalidArgument(\"Input shape must be a vector. Got: \",\n                                        shape.shape().DebugString()));\n    OP_REQUIRES(context,\n                values.shape().dim_size(0) == indices.shape().dim_size(0),\n                errors::InvalidArgument(\n                    \"Number of values must match first dimension of indices.\",\n                    \"Got \", values.shape().dim_size(0),\n                    \" values, indices shape: \", indices.shape().DebugString()));\n    OP_REQUIRES(\n        context, shape.shape().dim_size(0) == indices.shape().dim_size(1),\n        errors::InvalidArgument(\n            \"Number of dimensions must match second dimension of indices.\",\n            \"Got \", shape.shape().dim_size(0),\n            \" dimensions, indices shape: \", indices.shape().DebugString()));\n    OP_REQUIRES(context, shape.NumElements() > 0,\n                errors::InvalidArgument(\n                    \"The shape argument requires at least one element.\"));\n    // Validate indices: each index must be valid for the corresponding\n    // dimension. This could be possibly done better.\n    const auto indices_values = indices.matrix<int64_t>();\n    const auto shape_vector = shape.vec<int64_t>();\n    int num_values = values.NumElements();  // same as first dim of indices\n    int rank = indices.shape().dim_size(1);\n    for (int i = 0; i < num_values; ++i) {\n      for (int j = 0; j < rank; ++j) {\n        OP_REQUIRES(\n            context,\n            indices_values(i, j) >= 0 && indices_values(i, j) < shape_vector(j),\n            errors::InvalidArgument(\n                \"Invalid index value at \", i, \": dimension \", j, \" has value \",\n                indices_values(i, j), \" which is not in [0, \", shape_vector(j),\n                \") (as given by dense shape \", shape.DebugString()));\n      }\n    }\n\n    if (use_weights) {\n      OP_REQUIRES(\n          context, weights.shape() == values.shape(),\n          errors::InvalidArgument(\n              \"Weights and values must have the same shape. Weight shape: \",\n              weights.shape().DebugString(),\n              \"; values shape: \", values.shape().DebugString()));\n    }\n\n    bool is_1d = shape.NumElements() == 1;\n    int num_batches = is_1d ? 1 : shape_vector(0);\n    OP_REQUIRES(\n        context, 0 < num_batches && num_batches < kMaxBatches,\n        errors::InvalidArgument(\"Cannot allocate \", num_batches,\n                                \" batches, is the dense shape too wide?\"));\n\n    const auto values_values = values.flat<T>();\n    const auto weight_values = weights.flat<W>();\n\n    auto per_batch_counts = BatchedMap<W>(num_batches);\n\n    T max_value = 0;\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      int batch = is_1d ? 0 : indices_values(idx, 0);\n      if (batch >= num_batches) {\n        OP_REQUIRES(context, batch < num_batches,\n                    errors::InvalidArgument(\n                        \"Indices value along the first dimension must be \",\n                        \"lower than the first index of the shape.\", \"Got \",\n                        batch, \" as batch and \", num_batches,\n                        \" as the first dimension of the shape.\"));\n      }\n      const auto& value = values_values(idx);\n      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n        if (binary_output_) {\n          per_batch_counts[batch][value] = 1;\n        } else if (use_weights) {\n          per_batch_counts[batch][value] += weight_values(idx);\n        } else {\n          per_batch_counts[batch][value]++;\n        }\n        if (value > max_value) {\n          max_value = value;\n        }\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n  bool validate_;\n};\n\ntemplate <class T, class W>\nclass RaggedCount : public OpKernel {\n public:\n  explicit RaggedCount(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"minlength\", &minlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"maxlength\", &maxlength_));\n    OP_REQUIRES_OK(context, context->GetAttr(\"binary_output\", &binary_output_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& splits = context->input(0);\n    const Tensor& values = context->input(1);\n    const Tensor& weights = context->input(2);\n    bool use_weights = weights.NumElements() > 0;\n    bool is_1d = false;\n\n    if (use_weights) {\n      OP_REQUIRES(\n          context, weights.shape() == values.shape(),\n          errors::InvalidArgument(\n              \"Weights and values must have the same shape. Weight shape: \",\n              weights.shape().DebugString(),\n              \"; values shape: \", values.shape().DebugString()));\n    }\n\n    const auto splits_values = splits.flat<int64_t>();\n    const auto values_values = values.flat<T>();\n    const auto weight_values = weights.flat<W>();\n    int num_batches = splits.NumElements() - 1;\n    int num_values = values.NumElements();\n\n    OP_REQUIRES(\n        context, num_batches > 0,\n        errors::InvalidArgument(\n            \"Must provide at least 2 elements for the splits argument\"));\n    OP_REQUIRES(context, splits_values(0) == 0,\n                errors::InvalidArgument(\"Splits must start with 0, not with \",\n                                        splits_values(0)));\n    OP_REQUIRES(context, splits_values(num_batches) == num_values,\n                errors::InvalidArgument(\n                    \"Splits must end with the number of values, got \",\n                    splits_values(num_batches), \" instead of \", num_values));\n\n    auto per_batch_counts = BatchedMap<W>(num_batches);\n    T max_value = 0;\n    int batch_idx = 0;\n\n    for (int idx = 0; idx < num_values; ++idx) {\n      while (idx >= splits_values(batch_idx)) {\n        batch_idx++;\n      }\n      const auto& value = values_values(idx);\n      if (value >= 0 && (maxlength_ <= 0 || value < maxlength_)) {\n        if (binary_output_) {\n          per_batch_counts[batch_idx - 1][value] = 1;\n        } else if (use_weights) {\n          per_batch_counts[batch_idx - 1][value] += weight_values(idx);\n        } else {\n          per_batch_counts[batch_idx - 1][value]++;\n        }\n        if (value > max_value) {\n          max_value = value;\n        }\n      }\n    }\n\n    int num_output_values = GetOutputSize(max_value, maxlength_, minlength_);\n    OP_REQUIRES_OK(context, OutputSparse<W>(per_batch_counts, num_output_values,\n                                            is_1d, context));\n  }\n\n private:\n  int maxlength_;\n  int minlength_;\n  bool binary_output_;\n  bool validate_;\n};\n\n#define REGISTER_W(W_TYPE) \\\n  REGISTER(int32, W_TYPE)  \\\n  REGISTER(int64_t, W_TYPE)\n\n#define REGISTER(I_TYPE, W_TYPE)                                     \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"DenseCountSparseOutput\")             \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          DenseCount<I_TYPE, W_TYPE>)                \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"SparseCountSparseOutput\")            \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          SparseCount<I_TYPE, W_TYPE>)               \\\n                                                                     \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedCountSparseOutput\")            \\\n                              .TypeConstraint<I_TYPE>(\"T\")           \\\n                              .TypeConstraint<W_TYPE>(\"output_type\") \\\n                              .Device(DEVICE_CPU),                   \\\n                          RaggedCount<I_TYPE, W_TYPE>)\n\nTF_CALL_INTEGRAL_TYPES(REGISTER_W);\nTF_CALL_float(REGISTER_W);\nTF_CALL_double(REGISTER_W);\n\n#undef REGISTER_W\n#undef REGISTER\n\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/count_ops.cc"], "buggy_code_start_loc": [14], "buggy_code_end_loc": [237], "fixing_code_start_loc": [15], "fixing_code_end_loc": [247], "type": "CWE-190", "message": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `SparseCountSparseOutput` can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2022-21738", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-03T14:15:08.440", "lastModified": "2022-02-09T05:22:50.163", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `SparseCountSparseOutput` can be made to crash a TensorFlow process by an integer overflow whose result is then used in a memory allocation. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"lang": "es", "value": "Tensorflow es un marco de aprendizaje autom\u00e1tico de c\u00f3digo abierto. La implementaci\u00f3n de \"SparseCountSparseOutput\" puede hacer que un proceso de TensorFlow se bloquee por un desbordamiento de enteros cuyo resultado es usado en una asignaci\u00f3n de memoria. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.8.0. Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.7.1, TensorFlow versi\u00f3n 2.6.3, y TensorFlow versi\u00f3n 2.5.3, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.5.2", "matchCriteriaId": "688150BF-477C-48FC-9AEF-A79AC57A6DDC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.6.0", "versionEndIncluding": "2.6.2", "matchCriteriaId": "C9E69B60-8C97-47E2-9027-9598B8392E5D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:*:*:*:*:*:*:*", "matchCriteriaId": "2EDFAAB8-799C-4259-9102-944D4760DA2C"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/5100e359aef5c8021f2e71c7b986420b85ce7b3d/tensorflow/core/kernels/count_ops.cc#L168-L273", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/6f4d3e8139ec724dbbcb40505891c81dd1052c4a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-x4qx-4fjv-hmw6", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/6f4d3e8139ec724dbbcb40505891c81dd1052c4a"}}