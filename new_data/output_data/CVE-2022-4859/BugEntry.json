{"buggy_code": ["package org.joget.plugin.enterprise;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.userview.model.UserviewBuilderPalette;\nimport org.joget.apps.userview.model.UserviewMenu;\nimport org.joget.commons.util.ResourceBundleUtil;\nimport org.joget.commons.util.SetupManager;\nimport org.joget.commons.util.StringUtil;\nimport org.joget.commons.util.TimeZoneUtil;\nimport org.joget.directory.dao.UserDao;\nimport org.joget.directory.model.User;\nimport org.joget.directory.model.service.DirectoryUtil;\nimport org.joget.directory.model.service.ExtDirectoryManager;\nimport org.joget.directory.model.service.UserSecurity;\nimport org.joget.plugin.base.PluginManager;\nimport org.joget.workflow.model.service.WorkflowUserManager;\nimport org.joget.workflow.util.WorkflowUtil;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.context.ApplicationContext;\n\npublic class UserProfileMenu extends UserviewMenu {\n\n    @Override\n    public String getClassName() {\n        return getClass().getName();\n    }\n\n    @Override\n    public String getLabel() {\n        return \"User Profile\";\n    }\n\n    @Override\n    public String getIcon() {\n        return \"<i class=\\\"fas fa-user-edit\\\"></i>\";\n    }\n\n    public String getName() {\n        return \"User Profile Menu\";\n    }\n\n    public String getVersion() {\n        return \"5.0.0\";\n    }\n\n    public String getDescription() {\n        return \"\";\n    }\n\n    public String getPropertyOptions() {\n        return AppUtil.readPluginResource(getClass().getName(), \"/properties/userview/userProfileMenu.json\", null, true, \"message/userview/userProfileMenu\");\n    }\n\n    @Override\n    public String getDecoratedMenu() {\n        if (\"true\".equals(getRequestParameter(\"isPreview\")) || \"Yes\".equals(getPropertyString(\"showInPopupDialog\"))) {\n            // sanitize label\n            String label = getPropertyString(\"label\");\n            if (label != null) {\n                label = StringUtil.stripHtmlRelaxed(label);\n            }\n\n            String menu = \"<a onclick=\\\"menu_\" + getPropertyString(\"id\") + \"_showDialog();return false;\\\" class=\\\"menu-link\\\"><span>\" + label + \"</span></a>\";\n            menu += \"<script>\\n\";\n\n            if (\"Yes\".equals(getPropertyString(\"showInPopupDialog\"))) {\n                String url = getUrl() + \"?embed=true\";\n\n                menu += \"var menu_\" + getPropertyString(\"id\") + \"Dialog = new PopupDialog(\\\"\" + url + \"\\\",\\\"\\\");\\n\";\n            }\n            menu += \"function menu_\" + getPropertyString(\"id\") + \"_showDialog(){\\n\";\n            if (\"true\".equals(getRequestParameter(\"isPreview\"))) {\n                menu += \"alert('Feature disabled in Preview Mode.');\\n\";\n            } else {\n                menu += \"menu_\" + getPropertyString(\"id\") + \"Dialog.init();\\n\";\n            }\n            menu += \"}\\n</script>\";\n            return menu;\n        }\n        return null;\n    }\n\n    @Override\n    public boolean isHomePageSupported() {\n        return true;\n    }\n\n    @Override\n    public String getRenderPage() {\n        if (\"true\".equals(getRequestParameterString(\"isPreview\"))) {\n            setProperty(\"isPreview\", \"true\");\n        } else {\n            if (\"submit\".equals(getRequestParameterString(\"action\"))) {\n                // only allow POST\n                HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n                if (request != null && !\"POST\".equalsIgnoreCase(request.getMethod())) {\n                    PluginManager pluginManager = (PluginManager)AppUtil.getApplicationContext().getBean(\"pluginManager\");\n                    String content = pluginManager.getPluginFreeMarkerTemplate(new HashMap(), getClass().getName(), \"/templates/unauthorized.ftl\", null);\n                    return content;\n                }\n\n                submitForm();\n            } else {\n                viewForm(null);\n            }\n        }\n        Map model = new HashMap();\n        model.put(\"request\", getRequestParameters());\n        model.put(\"element\", this);\n        \n        PluginManager pluginManager = (PluginManager)AppUtil.getApplicationContext().getBean(\"pluginManager\");\n        String content = pluginManager.getPluginFreeMarkerTemplate(model, getClass().getName(), \"/templates/userProfile.ftl\", null);\n        return content;\n    }\n    \n    private void viewForm(User submittedData) {\n        setProperty(\"headerTitle\", getPropertyString(\"label\"));\n        setProperty(\"view\", \"formView\");\n\n        ApplicationContext ac = AppUtil.getApplicationContext();\n        WorkflowUserManager workflowUserManager = (WorkflowUserManager) ac.getBean(\"workflowUserManager\");\n        UserDao userDao = (UserDao) ac.getBean(\"userDao\");\n        User user = submittedData;\n        if (user == null) {\n            user = userDao.getUser(workflowUserManager.getCurrentUsername());\n        }\n        if (user != null && user.getReadonly()) {\n            return;\n        }\n        setProperty(\"user\", user);\n        setProperty(\"timezones\", TimeZoneUtil.getList());\n        \n        SetupManager setupManager = (SetupManager) ac.getBean(\"setupManager\");\n        String enableUserLocale = setupManager.getSettingValue(\"enableUserLocale\");\n        Map<String, String> localeStringList = new TreeMap<String, String>();\n        if(enableUserLocale != null && enableUserLocale.equalsIgnoreCase(\"true\")) {\n            String userLocale = setupManager.getSettingValue(\"userLocale\");\n            Collection<String> locales = new HashSet();\n            locales.addAll(Arrays.asList(userLocale.split(\",\")));\n            \n            Locale[] localeList = Locale.getAvailableLocales();\n            for (int x = 0; x < localeList.length; x++) {\n                String code = localeList[x].toString();\n                if (locales.contains(code)) {\n                    localeStringList.put(code, code + \" - \" +localeList[x].getDisplayName());\n                }\n            }\n        }\n        setProperty(\"enableUserLocale\", enableUserLocale);\n        setProperty(\"localeStringList\", localeStringList);\n        \n        UserSecurity us = DirectoryUtil.getUserSecurity();\n        if (us != null) {\n            setProperty(\"policies\", us.passwordPolicies());\n            setProperty(\"userProfileFooter\", us.getUserProfileFooter(user));\n        }\n        \n        String url = getUrl() + \"?action=submit\";\n        setProperty(\"actionUrl\", url);\n    }\n\n    private void submitForm() {\n        ApplicationContext ac = AppUtil.getApplicationContext();\n        WorkflowUserManager workflowUserManager = (WorkflowUserManager) ac.getBean(\"workflowUserManager\");\n        UserDao userDao = (UserDao) ac.getBean(\"userDao\");\n        User userObject = userDao.getUser(workflowUserManager.getCurrentUsername());\n        User currentUser = null;\n        if (userObject != null) {\n            currentUser = new User();\n            BeanUtils.copyProperties(userObject, currentUser);\n        }\n        ExtDirectoryManager directoryManager = (ExtDirectoryManager) AppUtil.getApplicationContext().getBean(\"directoryManager\");\n           \n        Collection<String> errors = new ArrayList<String>();\n        Collection<String> passwordErrors = new ArrayList<String>();\n        \n        boolean authenticated = false;\n        if (currentUser != null) {\n            if (!currentUser.getUsername().equals(getRequestParameterString(\"username\"))) {\n                HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n                if (request != null) {\n                    HttpSession session = request.getSession(false);\n                    if (session != null) {\n                        session.invalidate();\n                        authenticated = false;\n                    }\n                }\n            } else {\n                try {\n                    if (directoryManager.authenticate(currentUser.getUsername(), getRequestParameterString(\"oldPassword\"))) {\n                        authenticated = true;\n                    }\n                } catch (Exception e) { }\n            }\n        }\n        UserSecurity us = DirectoryUtil.getUserSecurity();\n        \n        if (\"\".equals(getPropertyString(\"f_firstName\"))) {\n            currentUser.setFirstName(getRequestParameterString(\"firstName\"));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_lastName\"))) {\n            currentUser.setLastName(getRequestParameterString(\"lastName\"));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_email\"))) {\n            currentUser.setEmail(getRequestParameterString(\"email\"));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_timeZone\"))) {\n            currentUser.setTimeZone(getRequestParameterString(\"timeZone\"));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_locale\"))) {\n            currentUser.setLocale(getRequestParameterString(\"locale\"));\n        }\n\n        if (!authenticated) {\n            if (errors == null) {\n                errors = new ArrayList<String>();\n            }\n            errors.add(ResourceBundleUtil.getMessage(\"console.directory.user.error.label.authenticationFailed\"));\n        } else {\n            if (us != null) {\n                errors = us.validateUserOnProfileUpdate(currentUser);\n            }\n\n            if (getRequestParameterString(\"password\") != null && !getRequestParameterString(\"password\").isEmpty() && us != null) {\n                passwordErrors = us.validatePassword(getRequestParameterString(\"username\"),  getRequestParameterString(\"oldPassword\"), getRequestParameterString(\"password\"), getRequestParameterString(\"confirmPassword\")); \n            }\n        }\n\n        setProperty(\"errors\", errors);\n        if (passwordErrors != null && !passwordErrors.isEmpty()) {\n            setProperty(\"passwordErrors\", passwordErrors);\n        }\n        \n        if (authenticated && (passwordErrors != null && passwordErrors.isEmpty()) && (errors != null && errors.isEmpty())) {\n            if (\"\".equals(getPropertyString(\"f_password\"))) {\n                if (getRequestParameterString(\"password\") != null && getRequestParameterString(\"confirmPassword\") != null && getRequestParameterString(\"password\").length() > 0 && getRequestParameterString(\"password\").equals(getRequestParameterString(\"confirmPassword\"))) {\n                    if (us != null) {\n                        currentUser.setPassword(us.encryptPassword(getRequestParameterString(\"username\"), getRequestParameterString(\"password\")));\n                    } else {\n                        currentUser.setPassword(StringUtil.md5Base16(getRequestParameterString(\"password\")));\n                    }\n                    currentUser.setConfirmPassword(getRequestParameterString(\"password\"));\n                }\n            }\n\n            if (currentUser.getUsername().equals(getRequestParameterString(\"username\"))) {\n                userDao.updateUser(currentUser);\n                if (us != null) {\n                    us.updateUserProfilePostProcessing(currentUser);\n                }\n                \n                setAlertMessage(getPropertyString(\"message\"));\n                setProperty(\"headerTitle\", getPropertyString(\"label\"));\n                if (getPropertyString(\"redirectURL\") != null && !getPropertyString(\"redirectURL\").isEmpty()) {\n                    setProperty(\"view\", \"redirect\");\n                    boolean redirectToParent = \"Yes\".equals(getPropertyString(\"showInPopupDialog\"));\n                    setRedirectUrl(getPropertyString(\"redirectURL\"), redirectToParent);\n                } else {\n                    setProperty(\"saved\", \"true\");\n                    viewForm(null);\n                }\n            }\n        } else {\n            viewForm(currentUser);\n        }\n    }\n\n    @Override\n    public String getCategory() {\n        return UserviewBuilderPalette.CATEGORY_GENERAL;\n    }\n}\n"], "fixing_code": ["package org.joget.plugin.enterprise;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.Locale;\nimport java.util.Map;\nimport java.util.TreeMap;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport org.joget.apps.app.service.AppUtil;\nimport org.joget.apps.userview.model.UserviewBuilderPalette;\nimport org.joget.apps.userview.model.UserviewMenu;\nimport org.joget.commons.util.ResourceBundleUtil;\nimport org.joget.commons.util.SecurityUtil;\nimport org.joget.commons.util.SetupManager;\nimport org.joget.commons.util.StringUtil;\nimport org.joget.commons.util.TimeZoneUtil;\nimport org.joget.directory.dao.UserDao;\nimport org.joget.directory.model.User;\nimport org.joget.directory.model.service.DirectoryUtil;\nimport org.joget.directory.model.service.ExtDirectoryManager;\nimport org.joget.directory.model.service.UserSecurity;\nimport org.joget.plugin.base.PluginManager;\nimport org.joget.workflow.model.service.WorkflowUserManager;\nimport org.joget.workflow.util.WorkflowUtil;\nimport org.springframework.beans.BeanUtils;\nimport org.springframework.context.ApplicationContext;\n\npublic class UserProfileMenu extends UserviewMenu {\n\n    @Override\n    public String getClassName() {\n        return getClass().getName();\n    }\n\n    @Override\n    public String getLabel() {\n        return \"User Profile\";\n    }\n\n    @Override\n    public String getIcon() {\n        return \"<i class=\\\"fas fa-user-edit\\\"></i>\";\n    }\n\n    public String getName() {\n        return \"User Profile Menu\";\n    }\n\n    public String getVersion() {\n        return \"5.0.0\";\n    }\n\n    public String getDescription() {\n        return \"\";\n    }\n\n    public String getPropertyOptions() {\n        return AppUtil.readPluginResource(getClass().getName(), \"/properties/userview/userProfileMenu.json\", null, true, \"message/userview/userProfileMenu\");\n    }\n\n    @Override\n    public String getDecoratedMenu() {\n        if (\"true\".equals(getRequestParameter(\"isPreview\")) || \"Yes\".equals(getPropertyString(\"showInPopupDialog\"))) {\n            // sanitize label\n            String label = getPropertyString(\"label\");\n            if (label != null) {\n                label = StringUtil.stripHtmlRelaxed(label);\n            }\n\n            String menu = \"<a onclick=\\\"menu_\" + getPropertyString(\"id\") + \"_showDialog();return false;\\\" class=\\\"menu-link\\\"><span>\" + label + \"</span></a>\";\n            menu += \"<script>\\n\";\n\n            if (\"Yes\".equals(getPropertyString(\"showInPopupDialog\"))) {\n                String url = getUrl() + \"?embed=true\";\n\n                menu += \"var menu_\" + getPropertyString(\"id\") + \"Dialog = new PopupDialog(\\\"\" + url + \"\\\",\\\"\\\");\\n\";\n            }\n            menu += \"function menu_\" + getPropertyString(\"id\") + \"_showDialog(){\\n\";\n            if (\"true\".equals(getRequestParameter(\"isPreview\"))) {\n                menu += \"alert('Feature disabled in Preview Mode.');\\n\";\n            } else {\n                menu += \"menu_\" + getPropertyString(\"id\") + \"Dialog.init();\\n\";\n            }\n            menu += \"}\\n</script>\";\n            return menu;\n        }\n        return null;\n    }\n\n    @Override\n    public boolean isHomePageSupported() {\n        return true;\n    }\n\n    @Override\n    public String getRenderPage() {\n        if (\"true\".equals(getRequestParameterString(\"isPreview\"))) {\n            setProperty(\"isPreview\", \"true\");\n        } else {\n            if (\"submit\".equals(getRequestParameterString(\"action\"))) {\n                // only allow POST\n                HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n                if (request != null && !\"POST\".equalsIgnoreCase(request.getMethod())) {\n                    PluginManager pluginManager = (PluginManager)AppUtil.getApplicationContext().getBean(\"pluginManager\");\n                    String content = pluginManager.getPluginFreeMarkerTemplate(new HashMap(), getClass().getName(), \"/templates/unauthorized.ftl\", null);\n                    return content;\n                }\n\n                submitForm();\n            } else {\n                viewForm(null);\n            }\n        }\n        Map model = new HashMap();\n        model.put(\"request\", getRequestParameters());\n        model.put(\"element\", this);\n        \n        PluginManager pluginManager = (PluginManager)AppUtil.getApplicationContext().getBean(\"pluginManager\");\n        String content = pluginManager.getPluginFreeMarkerTemplate(model, getClass().getName(), \"/templates/userProfile.ftl\", null);\n        return content;\n    }\n    \n    private void viewForm(User submittedData) {\n        setProperty(\"headerTitle\", getPropertyString(\"label\"));\n        setProperty(\"view\", \"formView\");\n\n        ApplicationContext ac = AppUtil.getApplicationContext();\n        WorkflowUserManager workflowUserManager = (WorkflowUserManager) ac.getBean(\"workflowUserManager\");\n        UserDao userDao = (UserDao) ac.getBean(\"userDao\");\n        User user = submittedData;\n        if (user == null) {\n            user = userDao.getUser(workflowUserManager.getCurrentUsername());\n        }\n        if (user != null && user.getReadonly()) {\n            return;\n        }\n        setProperty(\"user\", user);\n        setProperty(\"timezones\", TimeZoneUtil.getList());\n        \n        SetupManager setupManager = (SetupManager) ac.getBean(\"setupManager\");\n        String enableUserLocale = setupManager.getSettingValue(\"enableUserLocale\");\n        Map<String, String> localeStringList = new TreeMap<String, String>();\n        if(enableUserLocale != null && enableUserLocale.equalsIgnoreCase(\"true\")) {\n            String userLocale = setupManager.getSettingValue(\"userLocale\");\n            Collection<String> locales = new HashSet();\n            locales.addAll(Arrays.asList(userLocale.split(\",\")));\n            \n            Locale[] localeList = Locale.getAvailableLocales();\n            for (int x = 0; x < localeList.length; x++) {\n                String code = localeList[x].toString();\n                if (locales.contains(code)) {\n                    localeStringList.put(code, code + \" - \" +localeList[x].getDisplayName());\n                }\n            }\n        }\n        setProperty(\"enableUserLocale\", enableUserLocale);\n        setProperty(\"localeStringList\", localeStringList);\n        \n        UserSecurity us = DirectoryUtil.getUserSecurity();\n        if (us != null) {\n            setProperty(\"policies\", us.passwordPolicies());\n            setProperty(\"userProfileFooter\", us.getUserProfileFooter(user));\n        }\n        \n        String url = getUrl() + \"?action=submit\";\n        setProperty(\"actionUrl\", url);\n    }\n\n    private void submitForm() {\n        ApplicationContext ac = AppUtil.getApplicationContext();\n        WorkflowUserManager workflowUserManager = (WorkflowUserManager) ac.getBean(\"workflowUserManager\");\n        UserDao userDao = (UserDao) ac.getBean(\"userDao\");\n        User userObject = userDao.getUser(workflowUserManager.getCurrentUsername());\n        User currentUser = null;\n        if (userObject != null) {\n            currentUser = new User();\n            BeanUtils.copyProperties(userObject, currentUser);\n        }\n        ExtDirectoryManager directoryManager = (ExtDirectoryManager) AppUtil.getApplicationContext().getBean(\"directoryManager\");\n           \n        Collection<String> errors = new ArrayList<String>();\n        Collection<String> passwordErrors = new ArrayList<String>();\n        \n        boolean authenticated = false;\n        if (currentUser != null) {\n            if (!currentUser.getUsername().equals(getRequestParameterString(\"username\"))) {\n                HttpServletRequest request = WorkflowUtil.getHttpServletRequest();\n                if (request != null) {\n                    HttpSession session = request.getSession(false);\n                    if (session != null) {\n                        session.invalidate();\n                        authenticated = false;\n                    }\n                }\n            } else {\n                try {\n                    if (directoryManager.authenticate(currentUser.getUsername(), getRequestParameterString(\"oldPassword\"))) {\n                        authenticated = true;\n                    }\n                } catch (Exception e) { }\n            }\n        }\n        UserSecurity us = DirectoryUtil.getUserSecurity();\n        \n        if (\"\".equals(getPropertyString(\"f_firstName\")) && !StringUtil.stripAllHtmlTag(getRequestParameterString(\"firstName\")).isEmpty()) {\n            currentUser.setFirstName(StringUtil.stripAllHtmlTag(getRequestParameterString(\"firstName\")));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_lastName\"))) {\n            currentUser.setLastName(StringUtil.stripAllHtmlTag(getRequestParameterString(\"lastName\")));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_email\"))) {\n            currentUser.setEmail(getRequestParameterString(\"email\"));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_timeZone\"))) {\n            currentUser.setTimeZone(getRequestParameterString(\"timeZone\"));\n        }\n\n        if (\"\".equals(getPropertyString(\"f_locale\"))) {\n            currentUser.setLocale(getRequestParameterString(\"locale\"));\n        }\n\n        if (!authenticated) {\n            if (errors == null) {\n                errors = new ArrayList<String>();\n            }\n            errors.add(ResourceBundleUtil.getMessage(\"console.directory.user.error.label.authenticationFailed\"));\n        } else {\n            if (us != null) {\n                errors = us.validateUserOnProfileUpdate(currentUser);\n            }\n\n            if (getRequestParameterString(\"password\") != null && !getRequestParameterString(\"password\").isEmpty() && us != null) {\n                passwordErrors = us.validatePassword(getRequestParameterString(\"username\"),  getRequestParameterString(\"oldPassword\"), getRequestParameterString(\"password\"), getRequestParameterString(\"confirmPassword\")); \n            }\n        }\n\n        setProperty(\"errors\", errors);\n        if (passwordErrors != null && !passwordErrors.isEmpty()) {\n            setProperty(\"passwordErrors\", passwordErrors);\n        }\n        \n        if (authenticated && (passwordErrors != null && passwordErrors.isEmpty()) && (errors != null && errors.isEmpty())) {\n            if (\"\".equals(getPropertyString(\"f_password\"))) {\n                if (getRequestParameterString(\"password\") != null && getRequestParameterString(\"confirmPassword\") != null && getRequestParameterString(\"password\").length() > 0 && getRequestParameterString(\"password\").equals(getRequestParameterString(\"confirmPassword\"))) {\n                    if (us != null) {\n                        currentUser.setPassword(us.encryptPassword(getRequestParameterString(\"username\"), getRequestParameterString(\"password\")));\n                    } else {\n                        currentUser.setPassword(StringUtil.md5Base16(getRequestParameterString(\"password\")));\n                    }\n                    currentUser.setConfirmPassword(getRequestParameterString(\"password\"));\n                }\n            }\n\n            if (currentUser.getUsername().equals(getRequestParameterString(\"username\"))) {\n                userDao.updateUser(currentUser);\n                if (us != null) {\n                    us.updateUserProfilePostProcessing(currentUser);\n                }\n                \n                setAlertMessage(getPropertyString(\"message\"));\n                setProperty(\"headerTitle\", getPropertyString(\"label\"));\n                if (getPropertyString(\"redirectURL\") != null && !getPropertyString(\"redirectURL\").isEmpty()) {\n                    setProperty(\"view\", \"redirect\");\n                    boolean redirectToParent = \"Yes\".equals(getPropertyString(\"showInPopupDialog\"));\n                    setRedirectUrl(getPropertyString(\"redirectURL\"), redirectToParent);\n                } else {\n                    setProperty(\"saved\", \"true\");\n                    viewForm(null);\n                }\n            }\n        } else {\n            viewForm(currentUser);\n        }\n    }\n\n    @Override\n    public String getCategory() {\n        return UserviewBuilderPalette.CATEGORY_GENERAL;\n    }\n}\n"], "filenames": ["wflow-core/src/main/java/org/joget/plugin/enterprise/UserProfileMenu.java"], "buggy_code_start_loc": [16], "buggy_code_end_loc": [214], "fixing_code_start_loc": [17], "fixing_code_end_loc": [215], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, has been found in Joget up to 7.0.33. This issue affects the function submitForm of the file wflow-core/src/main/java/org/joget/plugin/enterprise/UserProfileMenu.java of the component User Profile Menu. The manipulation of the argument firstName/lastName leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 7.0.34 is able to address this issue. The name of the patch is 9a77f508a2bf8cf661d588f37a4cc29ecaea4fc8. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217055.", "other": {"cve": {"id": "CVE-2022-4859", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-30T12:15:09.513", "lastModified": "2023-01-06T20:30:45.270", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in Joget up to 7.0.33. This issue affects the function submitForm of the file wflow-core/src/main/java/org/joget/plugin/enterprise/UserProfileMenu.java of the component User Profile Menu. The manipulation of the argument firstName/lastName leads to cross site scripting. The attack may be initiated remotely. Upgrading to version 7.0.34 is able to address this issue. The name of the patch is 9a77f508a2bf8cf661d588f37a4cc29ecaea4fc8. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-217055."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joget:joget_dx:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.0.1", "versionEndExcluding": "7.0.34", "matchCriteriaId": "8A84F614-25F1-4B0E-BE74-214D54B5D7EC"}]}]}], "references": [{"url": "https://github.com/jogetworkflow/jw-community/commit/9a77f508a2bf8cf661d588f37a4cc29ecaea4fc8", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jogetworkflow/jw-community/releases/tag/7.0.34", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217055", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217055", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/jogetworkflow/jw-community/commit/9a77f508a2bf8cf661d588f37a4cc29ecaea4fc8"}}