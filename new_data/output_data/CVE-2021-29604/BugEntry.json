{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Op that looks up items from hashtable.\n//\n// Input:\n//     Tensor[0]: Hash key to lookup, dim.size == 1, int32\n//     Tensor[1]: Key of hashtable, dim.size == 1, int32\n//                *MUST* be sorted in ascending order.\n//     Tensor[2]: Value of hashtable, dim.size >= 1\n//                Tensor[1].Dim[0] == Tensor[2].Dim[0]\n//\n// Output:\n//   Output[0].dim[0] == Tensor[0].dim[0], num of lookups\n//   Each item in output is a raw bytes copy of corresponding item in input.\n//   When key does not exist in hashtable, the returned bytes are all 0s.\n//\n//   Output[1].dim = { Tensor[0].dim[0] }, num of lookups\n//   Each item indicates whether the corresponding lookup has a returned value.\n//   0 for missing key, 1 for found key.\n\n#include <stdint.h>\n\n#include <cstdlib>\n#include <cstring>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/string_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\n\nnamespace {\n\nint greater(const void* a, const void* b) {\n  return *static_cast<const int*>(a) - *static_cast<const int*>(b);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n\n  const TfLiteTensor* lookup;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);\n  TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);\n\n  const TfLiteTensor* key;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(key), 1);\n  TF_LITE_ENSURE_EQ(context, key->type, kTfLiteInt32);\n\n  const TfLiteTensor* value;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));\n  TF_LITE_ENSURE(context, NumDimensions(value) >= 1);\n  TF_LITE_ENSURE_EQ(context, SizeOfDimension(key, 0),\n                    SizeOfDimension(value, 0));\n  if (value->type == kTfLiteString) {\n    TF_LITE_ENSURE_EQ(context, NumDimensions(value), 1);\n  }\n\n  TfLiteTensor* hits;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));\n  TF_LITE_ENSURE_EQ(context, hits->type, kTfLiteUInt8);\n  TfLiteIntArray* hitSize = TfLiteIntArrayCreate(1);\n  hitSize->data[0] = SizeOfDimension(lookup, 0);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TF_LITE_ENSURE_EQ(context, value->type, output->type);\n\n  TfLiteStatus status = kTfLiteOk;\n  if (output->type != kTfLiteString) {\n    TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));\n    outputSize->data[0] = SizeOfDimension(lookup, 0);\n    for (int i = 1; i < NumDimensions(value); i++) {\n      outputSize->data[i] = SizeOfDimension(value, i);\n    }\n    status = context->ResizeTensor(context, output, outputSize);\n  }\n  if (context->ResizeTensor(context, hits, hitSize) != kTfLiteOk) {\n    status = kTfLiteError;\n  }\n  return status;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TfLiteTensor* hits;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));\n  const TfLiteTensor* lookup;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));\n  const TfLiteTensor* key;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));\n  const TfLiteTensor* value;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));\n\n  const int num_rows = SizeOfDimension(value, 0);\n  const int row_bytes = value->bytes / num_rows;\n  void* pointer = nullptr;\n  DynamicBuffer buf;\n\n  for (int i = 0; i < SizeOfDimension(lookup, 0); i++) {\n    int idx = -1;\n    pointer = bsearch(&(lookup->data.i32[i]), key->data.i32, num_rows,\n                      sizeof(int32_t), greater);\n    if (pointer != nullptr) {\n      idx = (reinterpret_cast<char*>(pointer) - (key->data.raw)) /\n            sizeof(int32_t);\n    }\n\n    if (idx >= num_rows || idx < 0) {\n      if (output->type == kTfLiteString) {\n        buf.AddString(nullptr, 0);\n      } else {\n        memset(output->data.raw + i * row_bytes, 0, row_bytes);\n      }\n      hits->data.uint8[i] = 0;\n    } else {\n      if (output->type == kTfLiteString) {\n        buf.AddString(GetString(value, idx));\n      } else {\n        memcpy(output->data.raw + i * row_bytes,\n               value->data.raw + idx * row_bytes, row_bytes);\n      }\n      hits->data.uint8[i] = 1;\n    }\n  }\n  if (output->type == kTfLiteString) {\n    buf.WriteToTensorAsVector(output);\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace\n\nTfLiteRegistration* Register_HASHTABLE_LOOKUP() {\n  static TfLiteRegistration r = {nullptr, nullptr, Prepare, Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// Op that looks up items from hashtable.\n//\n// Input:\n//     Tensor[0]: Hash key to lookup, dim.size == 1, int32\n//     Tensor[1]: Key of hashtable, dim.size == 1, int32\n//                *MUST* be sorted in ascending order.\n//     Tensor[2]: Value of hashtable, dim.size >= 1\n//                Tensor[1].Dim[0] == Tensor[2].Dim[0]\n//\n// Output:\n//   Output[0].dim[0] == Tensor[0].dim[0], num of lookups\n//   Each item in output is a raw bytes copy of corresponding item in input.\n//   When key does not exist in hashtable, the returned bytes are all 0s.\n//\n//   Output[1].dim = { Tensor[0].dim[0] }, num of lookups\n//   Each item indicates whether the corresponding lookup has a returned value.\n//   0 for missing key, 1 for found key.\n\n#include <stdint.h>\n\n#include <cstdlib>\n#include <cstring>\n\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/compatibility.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include \"tensorflow/lite/string_util.h\"\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\n\nnamespace {\n\nint greater(const void* a, const void* b) {\n  return *static_cast<const int*>(a) - *static_cast<const int*>(b);\n}\n\nTfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {\n  TF_LITE_ENSURE_EQ(context, NumInputs(node), 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 2);\n\n  const TfLiteTensor* lookup;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(lookup), 1);\n  TF_LITE_ENSURE_EQ(context, lookup->type, kTfLiteInt32);\n\n  const TfLiteTensor* key;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(key), 1);\n  TF_LITE_ENSURE_EQ(context, key->type, kTfLiteInt32);\n\n  const TfLiteTensor* value;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));\n  TF_LITE_ENSURE(context, NumDimensions(value) >= 1);\n  TF_LITE_ENSURE_EQ(context, SizeOfDimension(key, 0),\n                    SizeOfDimension(value, 0));\n  if (value->type == kTfLiteString) {\n    TF_LITE_ENSURE_EQ(context, NumDimensions(value), 1);\n  }\n\n  TfLiteTensor* hits;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));\n  TF_LITE_ENSURE_EQ(context, hits->type, kTfLiteUInt8);\n  TfLiteIntArray* hitSize = TfLiteIntArrayCreate(1);\n  hitSize->data[0] = SizeOfDimension(lookup, 0);\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TF_LITE_ENSURE_EQ(context, value->type, output->type);\n\n  TfLiteStatus status = kTfLiteOk;\n  if (output->type != kTfLiteString) {\n    TfLiteIntArray* outputSize = TfLiteIntArrayCreate(NumDimensions(value));\n    outputSize->data[0] = SizeOfDimension(lookup, 0);\n    for (int i = 1; i < NumDimensions(value); i++) {\n      outputSize->data[i] = SizeOfDimension(value, i);\n    }\n    status = context->ResizeTensor(context, output, outputSize);\n  }\n  if (context->ResizeTensor(context, hits, hitSize) != kTfLiteOk) {\n    status = kTfLiteError;\n  }\n  return status;\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TfLiteTensor* hits;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 1, &hits));\n  const TfLiteTensor* lookup;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &lookup));\n  const TfLiteTensor* key;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &key));\n  const TfLiteTensor* value;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &value));\n\n  const int num_rows = SizeOfDimension(value, 0);\n  TF_LITE_ENSURE(context, num_rows != 0);\n  const int row_bytes = value->bytes / num_rows;\n  void* pointer = nullptr;\n  DynamicBuffer buf;\n\n  for (int i = 0; i < SizeOfDimension(lookup, 0); i++) {\n    int idx = -1;\n    pointer = bsearch(&(lookup->data.i32[i]), key->data.i32, num_rows,\n                      sizeof(int32_t), greater);\n    if (pointer != nullptr) {\n      idx = (reinterpret_cast<char*>(pointer) - (key->data.raw)) /\n            sizeof(int32_t);\n    }\n\n    if (idx >= num_rows || idx < 0) {\n      if (output->type == kTfLiteString) {\n        buf.AddString(nullptr, 0);\n      } else {\n        memset(output->data.raw + i * row_bytes, 0, row_bytes);\n      }\n      hits->data.uint8[i] = 0;\n    } else {\n      if (output->type == kTfLiteString) {\n        buf.AddString(GetString(value, idx));\n      } else {\n        memcpy(output->data.raw + i * row_bytes,\n               value->data.raw + idx * row_bytes, row_bytes);\n      }\n      hits->data.uint8[i] = 1;\n    }\n  }\n  if (output->type == kTfLiteString) {\n    buf.WriteToTensorAsVector(output);\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace\n\nTfLiteRegistration* Register_HASHTABLE_LOOKUP() {\n  static TfLiteRegistration r = {nullptr, nullptr, Prepare, Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/hashtable_lookup.cc"], "buggy_code_start_loc": [114], "buggy_code_end_loc": [114], "fixing_code_start_loc": [115], "fixing_code_end_loc": [116], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. The TFLite implementation of hashtable lookup is vulnerable to a division by zero error(https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/hashtable_lookup.cc#L114-L115) An attacker can craft a model such that `values`'s first dimension would be 0. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29604", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:15.620", "lastModified": "2021-05-18T15:15:32.450", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. The TFLite implementation of hashtable lookup is vulnerable to a division by zero error(https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/hashtable_lookup.cc#L114-L115) An attacker can craft a model such that `values`'s first dimension would be 0. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;La implementaci\u00f3n de TFLite de b\u00fasqueda de tablas hash es vulnerable a un error de divisi\u00f3n por cero (https://github.com/tensorflow/tensorflow/blob/1a8e885b864c818198a5b2c0cbbeca5a1e833bc8/tensorflow/lite/kernels/hashtable_lookup.cc#L114-L115 craft a attacker) modelo tal que la primera dimensi\u00f3n de \"values\" ser\u00eda 0. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/5117e0851348065ed59c991562c0ec80d9193db2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-8rm6-75mf-7r7r", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/5117e0851348065ed59c991562c0ec80d9193db2"}}