{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * set of functions with the Privileges section in pma\n *\n * @package PhpMyAdmin\n */\nuse PMA\\libraries\\DatabaseInterface;\nuse PMA\\libraries\\Message;\nuse PMA\\libraries\\Template;\nuse PMA\\libraries\\Util;\n\n/**\n * Get Html for User Group Dialog\n *\n * @param string $username     username\n * @param bool   $is_menuswork Is menuswork set in configuration\n *\n * @return string html\n */\nfunction PMA_getHtmlForUserGroupDialog($username, $is_menuswork)\n{\n    $html = '';\n    if (! empty($_REQUEST['edit_user_group_dialog']) && $is_menuswork) {\n        $dialog = PMA_getHtmlToChooseUserGroup($username);\n        $response = PMA\\libraries\\Response::getInstance();\n        if ($GLOBALS['is_ajax_request']) {\n            $response->addJSON('message', $dialog);\n            exit;\n        } else {\n            $html .= $dialog;\n        }\n    }\n\n    return $html;\n}\n\n/**\n * Escapes wildcard in a database+table specification\n * before using it in a GRANT statement.\n *\n * Escaping a wildcard character in a GRANT is only accepted at the global\n * or database level, not at table level; this is why I remove\n * the escaping character. Internally, in mysql.tables_priv.Db there are\n * no escaping (for example test_db) but in mysql.db you'll see test\\_db\n * for a db-specific privilege.\n *\n * @param string $dbname    Database name\n * @param string $tablename Table name\n *\n * @return string the escaped (if necessary) database.table\n */\nfunction PMA_wildcardEscapeForGrant($dbname, $tablename)\n{\n    if (!mb_strlen($dbname)) {\n        $db_and_table = '*.*';\n    } else {\n        if (mb_strlen($tablename)) {\n            $db_and_table = Util::backquote(\n                Util::unescapeMysqlWildcards($dbname)\n            )\n            . '.' . Util::backquote($tablename);\n        } else {\n            $db_and_table = Util::backquote($dbname) . '.*';\n        }\n    }\n    return $db_and_table;\n}\n\n/**\n * Generates a condition on the user name\n *\n * @param string $initial the user's initial\n *\n * @return string   the generated condition\n */\nfunction PMA_rangeOfUsers($initial = '')\n{\n    // strtolower() is used because the User field\n    // might be BINARY, so LIKE would be case sensitive\n    if ($initial === null || $initial === '') {\n        return '';\n    }\n\n    $ret = \" WHERE `User` LIKE '\"\n        . Util::sqlAddSlashes($initial, true) . \"%'\"\n        . \" OR `User` LIKE '\"\n        . Util::sqlAddSlashes(mb_strtolower($initial), true)\n        . \"%'\";\n    return $ret;\n} // end function\n\n/**\n * Formats privilege name for a display\n *\n * @param array   $privilege Privilege information\n * @param boolean $html      Whether to use HTML\n *\n * @return string\n */\nfunction PMA_formatPrivilege($privilege, $html)\n{\n    if ($html) {\n        return '<dfn title=\"' . $privilege[2] . '\">'\n            . $privilege[1] . '</dfn>';\n    } else {\n        return $privilege[1];\n    }\n}\n\n/**\n * Parses privileges into an array, it modifies the array\n *\n * @param array &$row Results row from\n *\n * @return void\n */\nfunction PMA_fillInTablePrivileges(&$row)\n{\n    $row1 = $GLOBALS['dbi']->fetchSingleRow(\n        'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \\'Table_priv\\';',\n        'ASSOC', $GLOBALS['userlink']\n    );\n    // note: in MySQL 5.0.3 we get \"Create View', 'Show view';\n    // the View for Create is spelled with uppercase V\n    // the view for Show is spelled with lowercase v\n    // and there is a space between the words\n\n    $av_grants = explode(\n        '\\',\\'',\n        mb_substr(\n            $row1['Type'],\n            mb_strpos($row1['Type'], '(') + 2,\n            mb_strpos($row1['Type'], ')')\n            - mb_strpos($row1['Type'], '(') - 3\n        )\n    );\n\n    $users_grants = explode(',', $row['Table_priv']);\n\n    foreach ($av_grants as $current_grant) {\n        $row[$current_grant . '_priv']\n            = in_array($current_grant, $users_grants) ? 'Y' : 'N';\n    }\n    unset($row['Table_priv']);\n}\n\n\n/**\n * Extracts the privilege information of a priv table row\n *\n * @param array|null $row        the row\n * @param boolean    $enableHTML add <dfn> tag with tooltips\n * @param boolean    $tablePrivs whether row contains table privileges\n *\n * @global  resource $user_link the database connection\n *\n * @return array\n */\nfunction PMA_extractPrivInfo($row = null, $enableHTML = false, $tablePrivs = false)\n{\n    if ($tablePrivs) {\n        $grants = PMA_getTableGrantsArray();\n    } else {\n        $grants = PMA_getGrantsArray();\n    }\n\n    if (! is_null($row) && isset($row['Table_priv'])) {\n        PMA_fillInTablePrivileges($row);\n    }\n\n    $privs = array();\n    $allPrivileges = true;\n    foreach ($grants as $current_grant) {\n        if ((! is_null($row) && isset($row[$current_grant[0]]))\n            || (is_null($row) && isset($GLOBALS[$current_grant[0]]))\n        ) {\n            if ((! is_null($row) && $row[$current_grant[0]] == 'Y')\n                || (is_null($row)\n                && ($GLOBALS[$current_grant[0]] == 'Y'\n                || (is_array($GLOBALS[$current_grant[0]])\n                && count($GLOBALS[$current_grant[0]]) == $_REQUEST['column_count']\n                && empty($GLOBALS[$current_grant[0] . '_none']))))\n            ) {\n                $privs[] = PMA_formatPrivilege($current_grant, $enableHTML);\n            } elseif (! empty($GLOBALS[$current_grant[0]])\n                && is_array($GLOBALS[$current_grant[0]])\n                && empty($GLOBALS[$current_grant[0] . '_none'])\n            ) {\n                $privs[] = PMA_formatPrivilege($current_grant, $enableHTML)\n                    . ' (`' . join('`, `', $GLOBALS[$current_grant[0]]) . '`)';\n            } else {\n                $allPrivileges = false;\n            }\n        }\n    }\n    if (empty($privs)) {\n        if ($enableHTML) {\n            $privs[] = '<dfn title=\"' . __('No privileges.') . '\">USAGE</dfn>';\n        } else {\n            $privs[] = 'USAGE';\n        }\n    } elseif ($allPrivileges\n        && (! isset($_POST['grant_count']) || count($privs) == $_POST['grant_count'])\n    ) {\n        if ($enableHTML) {\n            $privs = array('<dfn title=\"'\n                . __('Includes all privileges except GRANT.')\n                . '\">ALL PRIVILEGES</dfn>'\n            );\n        } else {\n            $privs = array('ALL PRIVILEGES');\n        }\n    }\n    return $privs;\n} // end of the 'PMA_extractPrivInfo()' function\n\n/**\n * Returns an array of table grants and their descriptions\n *\n * @return array array of table grants\n */\nfunction PMA_getTableGrantsArray()\n{\n    return array(\n        array(\n            'Delete',\n            'DELETE',\n            $GLOBALS['strPrivDescDelete']\n        ),\n        array(\n            'Create',\n            'CREATE',\n            $GLOBALS['strPrivDescCreateTbl']\n        ),\n        array(\n            'Drop',\n            'DROP',\n            $GLOBALS['strPrivDescDropTbl']\n        ),\n        array(\n            'Index',\n            'INDEX',\n            $GLOBALS['strPrivDescIndex']\n        ),\n        array(\n            'Alter',\n            'ALTER',\n            $GLOBALS['strPrivDescAlter']\n        ),\n        array(\n            'Create View',\n            'CREATE_VIEW',\n            $GLOBALS['strPrivDescCreateView']\n        ),\n        array(\n            'Show view',\n            'SHOW_VIEW',\n            $GLOBALS['strPrivDescShowView']\n        ),\n        array(\n            'Trigger',\n            'TRIGGER',\n            $GLOBALS['strPrivDescTrigger']\n        ),\n    );\n}\n\n/**\n * Get the grants array which contains all the privilege types\n * and relevant grant messages\n *\n * @return array\n */\nfunction PMA_getGrantsArray()\n{\n    return array(\n        array(\n            'Select_priv',\n            'SELECT',\n            __('Allows reading data.')\n        ),\n        array(\n            'Insert_priv',\n            'INSERT',\n            __('Allows inserting and replacing data.')\n        ),\n        array(\n            'Update_priv',\n            'UPDATE',\n            __('Allows changing data.')\n        ),\n        array(\n            'Delete_priv',\n            'DELETE',\n            __('Allows deleting data.')\n        ),\n        array(\n            'Create_priv',\n            'CREATE',\n            __('Allows creating new databases and tables.')\n        ),\n        array(\n            'Drop_priv',\n            'DROP',\n            __('Allows dropping databases and tables.')\n        ),\n        array(\n            'Reload_priv',\n            'RELOAD',\n            __('Allows reloading server settings and flushing the server\\'s caches.')\n        ),\n        array(\n            'Shutdown_priv',\n            'SHUTDOWN',\n            __('Allows shutting down the server.')\n        ),\n        array(\n            'Process_priv',\n            'PROCESS',\n            __('Allows viewing processes of all users.')\n        ),\n        array(\n            'File_priv',\n            'FILE',\n            __('Allows importing data from and exporting data into files.')\n        ),\n        array(\n            'References_priv',\n            'REFERENCES',\n            __('Has no effect in this MySQL version.')\n        ),\n        array(\n            'Index_priv',\n            'INDEX',\n            __('Allows creating and dropping indexes.')\n        ),\n        array(\n            'Alter_priv',\n            'ALTER',\n            __('Allows altering the structure of existing tables.')\n        ),\n        array(\n            'Show_db_priv',\n            'SHOW DATABASES',\n            __('Gives access to the complete list of databases.')\n        ),\n        array(\n            'Super_priv',\n            'SUPER',\n            __(\n                'Allows connecting, even if maximum number of connections '\n                . 'is reached; required for most administrative operations '\n                . 'like setting global variables or killing threads of other users.'\n            )\n        ),\n        array(\n            'Create_tmp_table_priv',\n            'CREATE TEMPORARY TABLES',\n            __('Allows creating temporary tables.')\n        ),\n        array(\n            'Lock_tables_priv',\n            'LOCK TABLES',\n            __('Allows locking tables for the current thread.')\n        ),\n        array(\n            'Repl_slave_priv',\n            'REPLICATION SLAVE',\n            __('Needed for the replication slaves.')\n        ),\n        array(\n            'Repl_client_priv',\n            'REPLICATION CLIENT',\n            __('Allows the user to ask where the slaves / masters are.')\n        ),\n        array(\n            'Create_view_priv',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        ),\n        array(\n            'Event_priv',\n            'EVENT',\n            __('Allows to set up events for the event scheduler.')\n        ),\n        array(\n            'Trigger_priv',\n            'TRIGGER',\n            __('Allows creating and dropping triggers.')\n        ),\n        // for table privs:\n        array(\n            'Create View_priv',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        ),\n        array(\n            'Show_view_priv',\n            'SHOW VIEW',\n            __('Allows performing SHOW CREATE VIEW queries.')\n        ),\n        // for table privs:\n        array(\n            'Show view_priv',\n            'SHOW VIEW',\n            __('Allows performing SHOW CREATE VIEW queries.')\n        ),\n        array(\n            'Create_routine_priv',\n            'CREATE ROUTINE',\n            __('Allows creating stored routines.')\n        ),\n        array(\n            'Alter_routine_priv',\n            'ALTER ROUTINE',\n            __('Allows altering and dropping stored routines.')\n        ),\n        array(\n            'Create_user_priv',\n            'CREATE USER',\n            __('Allows creating, dropping and renaming user accounts.')\n        ),\n        array(\n            'Execute_priv',\n            'EXECUTE',\n            __('Allows executing stored routines.')\n        ),\n    );\n}\n\n/**\n * Displays on which column(s) a table-specific privilege is granted\n *\n * @param array  $columns          columns array\n * @param array  $row              first row from result or boolean false\n * @param string $name_for_select  privilege types - Select_priv, Insert_priv\n *                                 Update_priv, References_priv\n * @param string $priv_for_header  privilege for header\n * @param string $name             privilege name: insert, select, update, references\n * @param string $name_for_dfn     name for dfn\n * @param string $name_for_current name for current\n *\n * @return string $html_output html snippet\n */\nfunction PMA_getHtmlForColumnPrivileges($columns, $row, $name_for_select,\n    $priv_for_header, $name, $name_for_dfn, $name_for_current\n) {\n    $html_output = '<div class=\"item\" id=\"div_item_' . $name . '\">' . \"\\n\"\n        . '<label for=\"select_' . $name . '_priv\">' . \"\\n\"\n        . '<code><dfn title=\"' . $name_for_dfn . '\">'\n        . $priv_for_header . '</dfn></code>' . \"\\n\"\n        . '</label><br />' . \"\\n\"\n        . '<select id=\"select_' . $name . '_priv\" name=\"'\n        . $name_for_select . '[]\" multiple=\"multiple\" size=\"8\">' . \"\\n\";\n\n    foreach ($columns as $currCol => $currColPrivs) {\n        $html_output .= '<option '\n            . 'value=\"' . htmlspecialchars($currCol) . '\"';\n        if ($row[$name_for_select] == 'Y'\n            || $currColPrivs[$name_for_current]\n        ) {\n            $html_output .= ' selected=\"selected\"';\n        }\n        $html_output .= '>'\n            . htmlspecialchars($currCol) . '</option>' . \"\\n\";\n    }\n\n    $html_output .= '</select>' . \"\\n\"\n        . '<i>' . __('Or') . '</i>' . \"\\n\"\n        . '<label for=\"checkbox_' . $name_for_select\n        . '_none\"><input type=\"checkbox\"'\n        . ' name=\"' . $name_for_select . '_none\" id=\"checkbox_'\n        . $name_for_select . '_none\" title=\"'\n        . _pgettext('None privileges', 'None') . '\" />'\n        . _pgettext('None privileges', 'None') . '</label>' . \"\\n\"\n        . '</div>' . \"\\n\";\n    return $html_output;\n} // end function\n\n/**\n * Get sql query for display privileges table\n *\n * @param string $db       the database\n * @param string $table    the table\n * @param string $username username for database connection\n * @param string $hostname hostname for database connection\n *\n * @return string sql query\n */\nfunction PMA_getSqlQueryForDisplayPrivTable($db, $table, $username, $hostname)\n{\n    if ($db == '*') {\n        return \"SELECT * FROM `mysql`.`user`\"\n            . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n            . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"';\";\n    } elseif ($table == '*') {\n        return \"SELECT * FROM `mysql`.`db`\"\n            . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n            . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"'\"\n            . \" AND '\" . Util::unescapeMysqlWildcards($db) . \"'\"\n            . \" LIKE `Db`;\";\n    }\n    return \"SELECT `Table_priv`\"\n        . \" FROM `mysql`.`tables_priv`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"'\"\n        . \" AND `Db` = '\" . Util::unescapeMysqlWildcards($db) . \"'\"\n        . \" AND `Table_name` = '\" . Util::sqlAddSlashes($table) . \"';\";\n}\n\n/**\n * Displays a dropdown to select the user group\n * with menu items configured to each of them.\n *\n * @param string $username username\n *\n * @return string html to select the user group\n */\nfunction PMA_getHtmlToChooseUserGroup($username)\n{\n    $html_output = '<form class=\"ajax\" id=\"changeUserGroupForm\"'\n            . ' action=\"server_privileges.php\" method=\"post\">';\n    $params = array('username' => $username);\n    $html_output .= PMA_URL_getHiddenInputs($params);\n    $html_output .= '<fieldset id=\"fieldset_user_group_selection\">';\n    $html_output .= '<legend>' . __('User group') . '</legend>';\n\n    $cfgRelation = PMA_getRelationsParam();\n    $groupTable = Util::backquote($cfgRelation['db'])\n        . \".\" . Util::backquote($cfgRelation['usergroups']);\n    $userTable = Util::backquote($cfgRelation['db'])\n        . \".\" . Util::backquote($cfgRelation['users']);\n\n    $userGroups = array();\n    $sql_query = \"SELECT DISTINCT `usergroup` FROM \" . $groupTable;\n    $result = PMA_queryAsControlUser($sql_query, false);\n    if ($result) {\n        while ($row = $GLOBALS['dbi']->fetchRow($result)) {\n            $userGroups[] = $row[0];\n        }\n    }\n    $GLOBALS['dbi']->freeResult($result);\n\n    $userGroup = '';\n    if (isset($GLOBALS['username'])) {\n        $sql_query = \"SELECT `usergroup` FROM \" . $userTable\n            . \" WHERE `username` = '\" . Util::sqlAddSlashes($username) . \"'\";\n        $userGroup = $GLOBALS['dbi']->fetchValue(\n            $sql_query, 0, 0, $GLOBALS['controllink']\n        );\n    }\n\n    $html_output .= __('User group') . ': ';\n    $html_output .= '<select name=\"userGroup\">';\n    $html_output .= '<option value=\"\"></option>';\n    foreach ($userGroups as $oneUserGroup) {\n        $html_output .= '<option value=\"' . htmlspecialchars($oneUserGroup) . '\"'\n            . ($oneUserGroup == $userGroup ? ' selected=\"selected\"' : '')\n            . '>'\n            . htmlspecialchars($oneUserGroup)\n            . '</option>';\n    }\n    $html_output .= '</select>';\n    $html_output .= '<input type=\"hidden\" name=\"changeUserGroup\" value=\"1\">';\n    $html_output .= '</fieldset>';\n    $html_output .= '</form>';\n    return $html_output;\n}\n\n/**\n * Sets the user group from request values\n *\n * @param string $username  username\n * @param string $userGroup user group to set\n *\n * @return void\n */\nfunction PMA_setUserGroup($username, $userGroup)\n{\n    $cfgRelation = PMA_getRelationsParam();\n    $userTable = Util::backquote($cfgRelation['db'])\n        . \".\" . Util::backquote($cfgRelation['users']);\n\n    $sql_query = \"SELECT `usergroup` FROM \" . $userTable\n        . \" WHERE `username` = '\" . Util::sqlAddSlashes($username) . \"'\";\n    $oldUserGroup = $GLOBALS['dbi']->fetchValue(\n        $sql_query, 0, 0, $GLOBALS['controllink']\n    );\n\n    if ($oldUserGroup === false) {\n        $upd_query = \"INSERT INTO \" . $userTable . \"(`username`, `usergroup`)\"\n            . \" VALUES ('\" . Util::sqlAddSlashes($username) . \"', \"\n            . \"'\" . Util::sqlAddSlashes($userGroup) . \"')\";\n    } else {\n        if (empty($userGroup)) {\n            $upd_query = \"DELETE FROM \" . $userTable\n                . \" WHERE `username`='\" . Util::sqlAddSlashes($username) . \"'\";\n        } elseif ($oldUserGroup != $userGroup) {\n            $upd_query = \"UPDATE \" . $userTable\n                . \" SET `usergroup`='\" . Util::sqlAddSlashes($userGroup) . \"'\"\n                . \" WHERE `username`='\" . Util::sqlAddSlashes($username) . \"'\";\n        }\n    }\n    if (isset($upd_query)) {\n        PMA_queryAsControlUser($upd_query);\n    }\n}\n\n/**\n * Displays the privileges form table\n *\n * @param string  $db     the database\n * @param string  $table  the table\n * @param boolean $submit whether to display the submit button or not\n *\n * @global  array     $cfg         the phpMyAdmin configuration\n * @global  resource  $user_link   the database connection\n *\n * @return string html snippet\n */\nfunction PMA_getHtmlToDisplayPrivilegesTable($db = '*',\n    $table = '*', $submit = true\n) {\n    $html_output = '';\n    $sql_query = '';\n\n    if ($db == '*') {\n        $table = '*';\n    }\n\n    if (isset($GLOBALS['username'])) {\n        $username = $GLOBALS['username'];\n        $hostname = $GLOBALS['hostname'];\n        $sql_query = PMA_getSqlQueryForDisplayPrivTable(\n            $db, $table, $username, $hostname\n        );\n        $row = $GLOBALS['dbi']->fetchSingleRow($sql_query);\n    }\n    if (empty($row)) {\n        if ($table == '*' && $GLOBALS['is_superuser']) {\n            if ($db == '*') {\n                $sql_query = 'SHOW COLUMNS FROM `mysql`.`user`;';\n            } elseif ($table == '*') {\n                $sql_query = 'SHOW COLUMNS FROM `mysql`.`db`;';\n            }\n            $res = $GLOBALS['dbi']->query($sql_query);\n            while ($row1 = $GLOBALS['dbi']->fetchRow($res)) {\n                if (mb_substr($row1[0], 0, 4) == 'max_') {\n                    $row[$row1[0]] = 0;\n                } elseif (mb_substr($row1[0], 0, 5) == 'x509_'\n                    || mb_substr($row1[0], 0, 4) == 'ssl_'\n                ) {\n                    $row[$row1[0]] = '';\n                } else {\n                    $row[$row1[0]] = 'N';\n                }\n            }\n            $GLOBALS['dbi']->freeResult($res);\n        } elseif ($table == '*') {\n            $row = array();\n        } else {\n            $row = array('Table_priv' => '');\n        }\n    }\n    if (isset($row['Table_priv'])) {\n        PMA_fillInTablePrivileges($row);\n\n        // get columns\n        $res = $GLOBALS['dbi']->tryQuery(\n            'SHOW COLUMNS FROM '\n            . Util::backquote(\n                Util::unescapeMysqlWildcards($db)\n            )\n            . '.' . Util::backquote($table) . ';'\n        );\n        $columns = array();\n        if ($res) {\n            while ($row1 = $GLOBALS['dbi']->fetchRow($res)) {\n                $columns[$row1[0]] = array(\n                    'Select' => false,\n                    'Insert' => false,\n                    'Update' => false,\n                    'References' => false\n                );\n            }\n            $GLOBALS['dbi']->freeResult($res);\n        }\n        unset($res, $row1);\n    }\n    // table-specific privileges\n    if (! empty($columns)) {\n        $html_output .= PMA_getHtmlForTableSpecificPrivileges(\n            $username, $hostname, $db, $table, $columns, $row\n        );\n    } else {\n        // global or db-specific\n        $html_output .= PMA_getHtmlForGlobalOrDbSpecificPrivs($db, $table, $row);\n    }\n    $html_output .= '</fieldset>' . \"\\n\";\n    if ($submit) {\n        $html_output .= '<fieldset id=\"fieldset_user_privtable_footer\" '\n            . 'class=\"tblFooters\">' . \"\\n\"\n            . '<input type=\"hidden\" name=\"update_privs\" value=\"1\" />' . \"\\n\"\n            . '<input type=\"submit\" value=\"' . __('Go') . '\" />' . \"\\n\"\n            . '</fieldset>' . \"\\n\";\n    }\n    return $html_output;\n} // end of the 'PMA_displayPrivTable()' function\n\n/**\n * Get HTML for \"Require\"\n *\n * @param array $row privilege array\n *\n * @return string html snippet\n */\nfunction PMA_getHtmlForRequires($row)\n{\n    $html_output  = '<fieldset>';\n    $html_output .= '<legend>SSL</legend>';\n\n    $html_output .= '<div id=\"require_ssl_div\">';\n\n    // REQUIRE NONE\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_NONE\"'\n        . ' value=\"NONE\" title=\"'\n        . __(\n            'Does not require SSL-encrypted connections.'\n        )\n        . '\"'\n        . ((isset($row['ssl_type'])\n            && ($row['ssl_type'] == 'NONE'\n                || $row['ssl_type'] == ''))\n            ? ' checked=\"checked\"'\n            : ''\n        )\n        . '/>';\n\n    $html_output .= '<label for=\"ssl_type_NONE\"><code>'\n        . 'REQUIRE NONE'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    // REQUIRE SSL\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_ANY\"'\n        . ' value=\"ANY\" title=\"'\n        . __(\n            'Requires SSL-encrypted connections.'\n        )\n        . '\"'\n        . ((isset($row['ssl_type'])\n            && $row['ssl_type'] == 'ANY')\n            ? ' checked=\"checked\"'\n            : ''\n        )\n        . '/>';\n\n    $html_output .= '<label for=\"ssl_type_ANY\"><code>'\n        . 'REQUIRE SSL'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    // REQUIRE X509\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_X509\"'\n        . ' value=\"X509\" title=\"'\n        . __(\n            'Requires a valid X509 certificate.'\n        )\n        . '\"'\n        . ((isset($row['ssl_type']) && $row['ssl_type'] == 'X509')\n            ? ' checked=\"checked\"'\n            : ''\n        )\n        . '/>';\n\n    $html_output .= '<label for=\"ssl_type_X509\"><code>'\n        . 'REQUIRE X509'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    // Specified\n    $specified = (isset($row['ssl_type']) && $row['ssl_type'] == 'SPECIFIED');\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_specified\"'\n        . ' value=\"SPECIFIED\"' . ($specified ? ' checked=\"checked\"' : '') . '/>';\n\n    $html_output .= '<label for=\"ssl_type_specified\"><code>'\n        . 'SPECIFIED'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    $html_output .= '<div id=\"specified_div\" style=\"padding-left:20px;\">';\n\n    // REQUIRE CIPHER\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<label for=\"text_ssl_cipher\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Requires that a specific cipher method be used for a connection.'\n        )\n        . '\">'\n        . 'REQUIRE CIPHER'\n        . '</dfn></code></label>';\n    $html_output .= '<input type=\"text\" name=\"ssl_cipher\" id=\"text_ssl_cipher\" '\n        . 'value=\"' . (isset($row['ssl_cipher']) ? $row['ssl_cipher'] : '') . '\" '\n        . 'size=80\" title=\"'\n        . __(\n            'Requires that a specific cipher method be used for a connection.'\n        ) . '\"'\n        . (! $specified ? ' disabled' : '')\n        . ' />';\n    $html_output .= '</div>';\n\n    // REQUIRE ISSUER\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<label for=\"text_x509_issuer\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Requires that a valid X509 certificate issued by this CA be presented.'\n        )\n        . '\">'\n        . 'REQUIRE ISSUER'\n        . '</dfn></code></label>';\n    $html_output .= '<input type=\"text\" name=\"x509_issuer\" id=\"text_x509_issuer\" '\n        . 'value=\"' . (isset($row['x509_issuer']) ? $row['x509_issuer'] : '') . '\" '\n        . 'size=80\" title=\"'\n        . __(\n            'Requires that a valid X509 certificate issued by this CA be presented.'\n        ) . '\"'\n        . (! $specified ? ' disabled' : '')\n        . ' />';\n    $html_output .= '</div>';\n\n    // REQUIRE SUBJECT\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<label for=\"text_x509_subject\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Requires that a valid X509 certificate with this subject be presented.'\n        )\n        . '\">'\n        . 'REQUIRE SUBJECT'\n        . '</dfn></code></label>';\n    $html_output .= '<input type=\"text\" name=\"x509_subject\" id=\"text_x509_subject\" '\n        . 'value=\"' . (isset($row['x509_subject']) ? $row['x509_subject'] : '')\n        . '\" size=80\" title=\"'\n        . __(\n            'Requires that a valid X509 certificate with this subject be presented.'\n        ) . '\"'\n        . (! $specified ? ' disabled' : '')\n        . ' />';\n    $html_output .= '</div>';\n\n    $html_output .= '</div>';\n\n    $html_output .= '</div>';\n    $html_output .= '</fieldset>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for \"Resource limits\"\n *\n * @param array $row first row from result or boolean false\n *\n * @return string html snippet\n */\nfunction PMA_getHtmlForResourceLimits($row)\n{\n    $html_output = '<fieldset>' . \"\\n\"\n        . '<legend>' . __('Resource limits') . '</legend>' . \"\\n\"\n        . '<p><small>'\n        . '<i>' . __('Note: Setting these options to 0 (zero) removes the limit.')\n        . '</i></small></p>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_questions\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Limits the number of queries the user may send to the server per hour.'\n        )\n        . '\">'\n        . 'MAX QUERIES PER HOUR'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_questions\" id=\"text_max_questions\" '\n        . 'value=\"'\n        . (isset($row['max_questions']) ? $row['max_questions'] : '0')\n        . '\" min=\"0\" '\n        . 'title=\"'\n        . __(\n            'Limits the number of queries the user may send to the server per hour.'\n        )\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_updates\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Limits the number of commands that change any table '\n            . 'or database the user may execute per hour.'\n        ) . '\">'\n        . 'MAX UPDATES PER HOUR'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_updates\" id=\"text_max_updates\" '\n        . 'value=\"'\n        . (isset($row['max_updates']) ? $row['max_updates'] : '0')\n        . '\" min=\"0\" '\n        . 'title=\"'\n        . __(\n            'Limits the number of commands that change any table '\n            . 'or database the user may execute per hour.'\n        )\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_connections\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Limits the number of new connections the user may open per hour.'\n        ) . '\">'\n        . 'MAX CONNECTIONS PER HOUR'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_connections\" id=\"text_max_connections\" '\n        . 'value=\"'\n        . (isset($row['max_connections']) ? $row['max_connections'] : '0')\n        . '\" min=\"0\" '\n        . 'title=\"' . __(\n            'Limits the number of new connections the user may open per hour.'\n        )\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_user_connections\">'\n        . '<code><dfn title=\"'\n        . __('Limits the number of simultaneous connections the user may have.')\n        . '\">'\n        . 'MAX USER_CONNECTIONS'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_user_connections\" '\n        . 'id=\"text_max_user_connections\" '\n        . 'value=\"'\n        . (isset($row['max_user_connections']) ? $row['max_user_connections'] : '0')\n        . '\" '\n        . 'title=\"'\n        . __('Limits the number of simultaneous connections the user may have.')\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '</fieldset>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get the HTML snippet for routine specific privileges\n *\n * @param string $username   username for database connection\n * @param string $hostname   hostname for database connection\n * @param string $db         the database\n * @param string $routine    the routine\n * @param string $url_dbname url encoded db name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForRoutineSpecificPrivilges(\n    $username, $hostname, $db, $routine, $url_dbname\n) {\n    $header = PMA_getHtmlHeaderForUserProperties(\n        false, $url_dbname, $db, $username, $hostname, $routine\n    );\n\n    $sql = \"SELECT `Proc_priv`\"\n        . \" FROM `mysql`.`procs_priv`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"'\"\n        . \" AND `Db` = '\"\n        . Util::sqlAddSlashes(Util::unescapeMysqlWildcards($db)) . \"'\"\n        . \" AND `Routine_name` LIKE '\" . Util::sqlAddSlashes($routine) . \"';\";\n    $res = $GLOBALS['dbi']->fetchValue($sql);\n\n    $privs = array(\n        'Alter_routine_priv' => 'N',\n        'Execute_priv'       => 'N',\n        'Grant_priv'         => 'N',\n    );\n    foreach (explode(',', $res) as $priv) {\n        if ($priv == 'Alter Routine') {\n            $privs['Alter_routine_priv'] = 'Y';\n        } else {\n            $privs[$priv . '_priv'] = 'Y';\n        }\n    }\n\n    $routineArray   = array(PMA_getTriggerPrivilegeTable());\n    $privTableNames = array(__('Routine'));\n    $privCheckboxes = PMA_getHtmlForGlobalPrivTableWithCheckboxes(\n        $routineArray, $privTableNames, $privs\n    );\n\n    $data = array(\n        'username'       => $username,\n        'hostname'       => $hostname,\n        'database'       => $db,\n        'routine'        => $routine,\n        'grantCount'     => count($privs),\n        'privCheckboxes' => $privCheckboxes,\n        'header'         => $header,\n    );\n    $html_output = Template::get('privileges/edit_routine_privileges')\n        ->render($data);\n\n    return $html_output;\n}\n\n/**\n * Get routine privilege table as an array\n *\n * @return privilege type array\n */\nfunction PMA_getTriggerPrivilegeTable()\n{\n    $routinePrivTable = array(\n        array(\n            'Grant',\n            'GRANT',\n            __(\n                'Allows adding users and privileges '\n                . 'without reloading the privilege tables.'\n            )\n        ),\n        array(\n            'Alter_routine',\n            'ALTER ROUTINE',\n            __('Allows altering and dropping this routine.')\n        ),\n        array(\n            'Execute',\n            'EXECUTE',\n            __('Allows executing this routine.')\n        )\n    );\n    return $routinePrivTable;\n}\n\n/**\n * Get the HTML snippet for table specific privileges\n *\n * @param string $username username for database connection\n * @param string $hostname hostname for database connection\n * @param string $db       the database\n * @param string $table    the table\n * @param array  $columns  columns array\n * @param array  $row      current privileges row\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForTableSpecificPrivileges(\n    $username, $hostname, $db, $table, $columns, $row\n) {\n    $res = $GLOBALS['dbi']->query(\n        'SELECT `Column_name`, `Column_priv`'\n        . ' FROM `mysql`.`columns_priv`'\n        . ' WHERE `User`'\n        . ' = \\'' . Util::sqlAddSlashes($username) . \"'\"\n        . ' AND `Host`'\n        . ' = \\'' . Util::sqlAddSlashes($hostname) . \"'\"\n        . ' AND `Db`'\n        . ' = \\'' . Util::sqlAddSlashes(\n            Util::unescapeMysqlWildcards($db)\n        ) . \"'\"\n        . ' AND `Table_name`'\n        . ' = \\'' . Util::sqlAddSlashes($table) . '\\';'\n    );\n\n    while ($row1 = $GLOBALS['dbi']->fetchRow($res)) {\n        $row1[1] = explode(',', $row1[1]);\n        foreach ($row1[1] as $current) {\n            $columns[$row1[0]][$current] = true;\n        }\n    }\n    $GLOBALS['dbi']->freeResult($res);\n    unset($res, $row1, $current);\n\n    $html_output = '<input type=\"hidden\" name=\"grant_count\" '\n        . 'value=\"' . count($row) . '\" />' . \"\\n\"\n        . '<input type=\"hidden\" name=\"column_count\" '\n        . 'value=\"' . count($columns) . '\" />' . \"\\n\"\n        . '<fieldset id=\"fieldset_user_priv\">' . \"\\n\"\n        . '<legend data-submenu-label=\"Table\">' . __('Table-specific privileges')\n        . '</legend>'\n        . '<p><small><i>'\n        . __('Note: MySQL privilege names are expressed in English.')\n        . '</i></small></p>';\n\n    // privs that are attached to a specific column\n    $html_output .= PMA_getHtmlForAttachedPrivilegesToTableSpecificColumn(\n        $columns, $row\n    );\n\n    // privs that are not attached to a specific column\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . PMA_getHtmlForNotAttachedPrivilegesToTableSpecificColumn($row)\n        . '</div>' . \"\\n\";\n\n    // for Safari 2.0.2\n    $html_output .= '<div class=\"clearfloat\"></div>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for privileges that are attached to a specific column\n *\n * @param array $columns columns array\n * @param array $row     first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForAttachedPrivilegesToTableSpecificColumn($columns, $row)\n{\n    $html_output = PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'Select_priv', 'SELECT',\n        'select', __('Allows reading data.'), 'Select'\n    );\n\n    $html_output .= PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'Insert_priv', 'INSERT',\n        'insert', __('Allows inserting and replacing data.'), 'Insert'\n    );\n\n    $html_output .= PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'Update_priv', 'UPDATE',\n        'update', __('Allows changing data.'), 'Update'\n    );\n\n    $html_output .= PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'References_priv', 'REFERENCES', 'references',\n        __('Has no effect in this MySQL version.'), 'References'\n    );\n    return $html_output;\n}\n\n/**\n * Get HTML for privileges that are not attached to a specific column\n *\n * @param array $row first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForNotAttachedPrivilegesToTableSpecificColumn($row)\n{\n    $html_output = '';\n\n    foreach ($row as $current_grant => $current_grant_value) {\n        $grant_type = substr($current_grant, 0, -5);\n        if (in_array($grant_type, array('Select', 'Insert', 'Update', 'References'))\n        ) {\n            continue;\n        }\n        // make a substitution to match the messages variables;\n        // also we must substitute the grant we get, because we can't generate\n        // a form variable containing blanks (those would get changed to\n        // an underscore when receiving the POST)\n        if ($current_grant == 'Create View_priv') {\n            $tmp_current_grant = 'CreateView_priv';\n            $current_grant = 'Create_view_priv';\n        } elseif ($current_grant == 'Show view_priv') {\n            $tmp_current_grant = 'ShowView_priv';\n            $current_grant = 'Show_view_priv';\n        } else {\n            $tmp_current_grant = $current_grant;\n        }\n\n        $html_output .= '<div class=\"item\">' . \"\\n\"\n           . '<input type=\"checkbox\"'\n           . ' name=\"' . $current_grant . '\" id=\"checkbox_' . $current_grant\n           . '\" value=\"Y\" '\n           . ($current_grant_value == 'Y' ? 'checked=\"checked\" ' : '')\n           . 'title=\"';\n\n        $privGlobalName = 'strPrivDesc'\n            . mb_substr(\n                $tmp_current_grant,\n                0,\n                (mb_strlen($tmp_current_grant) - 5)\n            );\n        $html_output .= (isset($GLOBALS[$privGlobalName])\n                ? $GLOBALS[$privGlobalName]\n                : $GLOBALS[$privGlobalName . 'Tbl']\n            )\n            . '\"/>' . \"\\n\";\n\n        $privGlobalName1 = 'strPrivDesc'\n            . mb_substr(\n                $tmp_current_grant,\n                0,\n                - 5\n            );\n        $html_output .= '<label for=\"checkbox_' . $current_grant\n            . '\"><code><dfn title=\"'\n            . (isset($GLOBALS[$privGlobalName1])\n                ? $GLOBALS[$privGlobalName1]\n                : $GLOBALS[$privGlobalName1 . 'Tbl']\n            )\n            . '\">'\n            . mb_strtoupper(\n                mb_substr(\n                    $current_grant,\n                    0,\n                    -5\n                )\n            )\n            . '</dfn></code></label>' . \"\\n\"\n            . '</div>' . \"\\n\";\n    } // end foreach ()\n    return $html_output;\n}\n\n/**\n * Get HTML for global or database specific privileges\n *\n * @param string $db    the database\n * @param string $table the table\n * @param array  $row   first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForGlobalOrDbSpecificPrivs($db, $table, $row)\n{\n    $privTable_names = array(0 => __('Data'),\n        1 => __('Structure'),\n        2 => __('Administration')\n    );\n    $privTable = array();\n    // d a t a\n    $privTable[0] = PMA_getDataPrivilegeTable($db);\n\n    // s t r u c t u r e\n    $privTable[1] = PMA_getStructurePrivilegeTable($table, $row);\n\n    // a d m i n i s t r a t i o n\n    $privTable[2] = PMA_getAdministrationPrivilegeTable($db);\n\n    $html_output = '<input type=\"hidden\" name=\"grant_count\" value=\"'\n        . (count($privTable[0])\n            + count($privTable[1])\n            + count($privTable[2])\n            - (isset($row['Grant_priv']) ? 1 : 0)\n        )\n        . '\" />';\n    if ($db == '*') {\n        $legend     = __('Global privileges');\n        $menu_label = __('Global');\n    } else if ($table == '*') {\n        $legend     = __('Database-specific privileges');\n        $menu_label = __('Database');\n    } else {\n        $legend     = __('Table-specific privileges');\n        $menu_label = __('Table');\n    }\n    $html_output .= '<fieldset id=\"fieldset_user_global_rights\">'\n        . '<legend data-submenu-label=\"' . $menu_label . '\">' . $legend\n        . '<input type=\"checkbox\" id=\"addUsersForm_checkall\" '\n        . 'class=\"checkall_box\" title=\"' . __('Check all') . '\" /> '\n        . '<label for=\"addUsersForm_checkall\">' . __('Check all') . '</label> '\n        . '</legend>'\n        . '<p><small><i>'\n        . __('Note: MySQL privilege names are expressed in English.')\n        . '</i></small></p>';\n\n    // Output the Global privilege tables with checkboxes\n    $html_output .= PMA_getHtmlForGlobalPrivTableWithCheckboxes(\n        $privTable, $privTable_names, $row\n    );\n\n    // The \"Resource limits\" box is not displayed for db-specific privs\n    if ($db == '*') {\n        $html_output .= PMA_getHtmlForResourceLimits($row);\n        $html_output .= PMA_getHtmlForRequires($row);\n    }\n    // for Safari 2.0.2\n    $html_output .= '<div class=\"clearfloat\"></div>';\n\n    return $html_output;\n}\n\n/**\n * Get data privilege table as an array\n *\n * @param string $db the database\n *\n * @return string data privilege table\n */\nfunction PMA_getDataPrivilegeTable($db)\n{\n    $data_privTable = array(\n        array('Select', 'SELECT', __('Allows reading data.')),\n        array('Insert', 'INSERT', __('Allows inserting and replacing data.')),\n        array('Update', 'UPDATE', __('Allows changing data.')),\n        array('Delete', 'DELETE', __('Allows deleting data.'))\n    );\n    if ($db == '*') {\n        $data_privTable[]\n            = array('File',\n                'FILE',\n                __('Allows importing data from and exporting data into files.')\n            );\n    }\n    return $data_privTable;\n}\n\n/**\n * Get structure privilege table as an array\n *\n * @param string $table the table\n * @param array  $row   first row from result or boolean false\n *\n * @return string structure privilege table\n */\nfunction PMA_getStructurePrivilegeTable($table, $row)\n{\n    $structure_privTable = array(\n        array('Create',\n            'CREATE',\n            ($table == '*'\n                ? __('Allows creating new databases and tables.')\n                : __('Allows creating new tables.')\n            )\n        ),\n        array('Alter',\n            'ALTER',\n            __('Allows altering the structure of existing tables.')\n        ),\n        array('Index', 'INDEX', __('Allows creating and dropping indexes.')),\n        array('Drop',\n            'DROP',\n            ($table == '*'\n                ? __('Allows dropping databases and tables.')\n                : __('Allows dropping tables.')\n            )\n        ),\n        array('Create_tmp_table',\n            'CREATE TEMPORARY TABLES',\n            __('Allows creating temporary tables.')\n        ),\n        array('Show_view',\n            'SHOW VIEW',\n            __('Allows performing SHOW CREATE VIEW queries.')\n        ),\n        array('Create_routine',\n            'CREATE ROUTINE',\n            __('Allows creating stored routines.')\n        ),\n        array('Alter_routine',\n            'ALTER ROUTINE',\n            __('Allows altering and dropping stored routines.')\n        ),\n        array('Execute', 'EXECUTE', __('Allows executing stored routines.')),\n    );\n    // this one is for a db-specific priv: Create_view_priv\n    if (isset($row['Create_view_priv'])) {\n        $structure_privTable[] = array('Create_view',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        );\n    }\n    // this one is for a table-specific priv: Create View_priv\n    if (isset($row['Create View_priv'])) {\n        $structure_privTable[] = array('Create View',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        );\n    }\n    if (isset($row['Event_priv'])) {\n        // MySQL 5.1.6\n        $structure_privTable[] = array('Event',\n            'EVENT',\n            __('Allows to set up events for the event scheduler.')\n        );\n        $structure_privTable[] = array('Trigger',\n            'TRIGGER',\n            __('Allows creating and dropping triggers.')\n        );\n    }\n    return $structure_privTable;\n}\n\n/**\n * Get administration privilege table as an array\n *\n * @param string $db the table\n *\n * @return string administration privilege table\n */\nfunction PMA_getAdministrationPrivilegeTable($db)\n{\n    $adminPrivTable = array(\n        array('Grant',\n            'GRANT',\n            __(\n                'Allows adding users and privileges '\n                . 'without reloading the privilege tables.'\n            )\n        ),\n    );\n    if ($db == '*') {\n        $adminPrivTable[] = array('Super',\n            'SUPER',\n            __(\n                'Allows connecting, even if maximum number '\n                . 'of connections is reached; required for '\n                . 'most administrative operations like '\n                . 'setting global variables or killing threads of other users.'\n            )\n        );\n        $adminPrivTable[] = array('Process',\n            'PROCESS',\n            __('Allows viewing processes of all users.')\n        );\n        $adminPrivTable[] = array('Reload',\n            'RELOAD',\n            __('Allows reloading server settings and flushing the server\\'s caches.')\n        );\n        $adminPrivTable[] = array('Shutdown',\n            'SHUTDOWN',\n            __('Allows shutting down the server.')\n        );\n        $adminPrivTable[] = array('Show_db',\n            'SHOW DATABASES',\n            __('Gives access to the complete list of databases.')\n        );\n    }\n    $adminPrivTable[] = array('Lock_tables',\n        'LOCK TABLES',\n        __('Allows locking tables for the current thread.')\n    );\n    $adminPrivTable[] = array('References',\n        'REFERENCES',\n        __('Has no effect in this MySQL version.')\n    );\n    if ($db == '*') {\n        $adminPrivTable[] = array('Repl_client',\n            'REPLICATION CLIENT',\n            __('Allows the user to ask where the slaves / masters are.')\n        );\n        $adminPrivTable[] = array('Repl_slave',\n            'REPLICATION SLAVE',\n            __('Needed for the replication slaves.')\n        );\n        $adminPrivTable[] = array('Create_user',\n            'CREATE USER',\n            __('Allows creating, dropping and renaming user accounts.')\n        );\n    }\n    return $adminPrivTable;\n}\n\n/**\n * Get HTML snippet for global privileges table with check boxes\n *\n * @param array $privTable       privileges table array\n * @param array $privTable_names names of the privilege tables\n *                               (Data, Structure, Administration)\n * @param array $row             first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForGlobalPrivTableWithCheckboxes(\n    $privTable, $privTable_names, $row\n) {\n    $html_output = '';\n    foreach ($privTable as $i => $table) {\n        $html_output .= '<fieldset>' . \"\\n\"\n            . '<legend>' . \"\\n\"\n            . '<input type=\"checkbox\" class=\"sub_checkall_box\"'\n            . ' id=\"checkall_' . $privTable_names[$i] . '_priv\"'\n            . ' title=\"' . __('Check all') . '\"/>'\n            . '<label for=\"checkall_' . $privTable_names[$i] . '_priv\">'\n            . $privTable_names[$i] . '</label>' . \"\\n\"\n            . '</legend>' . \"\\n\";\n        foreach ($table as $priv) {\n            $html_output .= '<div class=\"item\">' . \"\\n\"\n                . '<input type=\"checkbox\" class=\"checkall\"'\n                . ' name=\"' . $priv[0] . '_priv\" '\n                . 'id=\"checkbox_' . $priv[0] . '_priv\"'\n                . ' value=\"Y\" title=\"' . $priv[2] . '\"'\n                . ((isset($row[$priv[0] . '_priv'])\n                    && $row[$priv[0] . '_priv'] == 'Y')\n                    ?  ' checked=\"checked\"'\n                    : ''\n                )\n                . '/>' . \"\\n\"\n                . '<label for=\"checkbox_' . $priv[0] . '_priv\">'\n                . '<code>'\n                . PMA_formatPrivilege($priv, true)\n                . '</code></label>' . \"\\n\"\n                . '</div>' . \"\\n\";\n        }\n        $html_output .= '</fieldset>' . \"\\n\";\n    }\n    return $html_output;\n}\n\n/**\n * Gets the currently active authentication plugins\n *\n * @param string $orig_auth_plugin Default Authentication plugin\n * @param string $mode             are we creating a new user or are we just\n *                                 changing  one?\n *                                 (allowed values: 'new', 'edit', 'change_pw')\n * @param string $versions         Is MySQL version newer or older than 5.5.7\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForAuthPluginsDropdown(\n    $orig_auth_plugin,\n    $mode = 'new',\n    $versions = 'new'\n) {\n    $html_output = '<select '\n        . 'id=\"select_authentication_plugin'\n        . ($mode =='change_pw' ? '_cp' : '') . '\" '\n        . 'name=\"authentication_plugin\" >';\n    if ($versions == 'new') {\n        $active_auth_plugins = PMA_getActiveAuthPlugins();\n\n        foreach ($active_auth_plugins as $plugin) {\n            if ($plugin['PLUGIN_NAME'] == 'mysql_old_password') {\n                continue;\n            }\n            // if description is known, enable its translation\n            if ('Native MySQL authentication' == $plugin['PLUGIN_DESCRIPTION']) {\n                $description = __('Native MySQL authentication');\n            } elseif ('SHA256 password authentication' == $plugin['PLUGIN_DESCRIPTION']) {\n                $description = __('SHA256 password authentication');\n            } else {\n                // but there can be other auth plugins, see\n                // https://github.com/phpmyadmin/phpmyadmin/issues/11561\n                $description = $plugin['PLUGIN_DESCRIPTION'];\n            }\n\n            $html_output .= '<option value=\"' . $plugin['PLUGIN_NAME'] . '\"'\n                . ($orig_auth_plugin == $plugin['PLUGIN_NAME'] ? 'selected ' : '')\n                . '>' . $description . '</option>';\n        }\n        $html_output .= '</select>';\n    } else {\n        $html_output .= '<option value=\"mysql_native_password\" >'\n            . __('Native MySQL Authentication') . '</option>'\n            . '</select>';\n    }\n\n    return $html_output;\n}\n/**\n * Gets the currently active authentication plugins\n *\n * @return array $result  array of plugin names and descriptions\n */\nfunction PMA_getActiveAuthPlugins()\n{\n    $get_plugins_query = \"SELECT `PLUGIN_NAME`, `PLUGIN_DESCRIPTION`\"\n        . \" FROM `information_schema`.`PLUGINS` \"\n        . \"WHERE `PLUGIN_TYPE` = 'AUTHENTICATION';\";\n    $resultset = $GLOBALS['dbi']->query($get_plugins_query);\n\n    $result = array();\n\n    while ($row = $GLOBALS['dbi']->fetchAssoc($resultset)) {\n        $result[] = $row;\n    }\n\n    return $result;\n}\n\n/**\n * Displays the fields used by the \"new user\" form as well as the\n * \"change login information / copy user\" form.\n *\n * @param string $mode     are we creating a new user or are we just\n *                         changing  one? (allowed values: 'new', 'change')\n * @param string $username User name\n * @param string $hostname Host name\n *\n * @global  array      $cfg     the phpMyAdmin configuration\n * @global  resource   $user_link the database connection\n *\n * @return string $html_output  a HTML snippet\n */\nfunction PMA_getHtmlForLoginInformationFields(\n    $mode = 'new',\n    $username = null,\n    $hostname = null\n) {\n    list($username_length, $hostname_length) = PMA_getUsernameAndHostnameLength();\n\n    if (isset($GLOBALS['username'])\n        && mb_strlen($GLOBALS['username']) === 0\n    ) {\n        $GLOBALS['pred_username'] = 'any';\n    }\n    $html_output = '<fieldset id=\"fieldset_add_user_login\">' . \"\\n\"\n        . '<legend>' . __('Login Information') . '</legend>' . \"\\n\"\n        . '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"select_pred_username\">' . \"\\n\"\n        . '    ' . __('User name:') . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '<span class=\"options\">' . \"\\n\";\n\n    $html_output .= '<select name=\"pred_username\" id=\"select_pred_username\" '\n        . 'title=\"' . __('User name') . '\">' . \"\\n\";\n\n    $html_output .= '<option value=\"any\"'\n        . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any')\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Any user')\n        . '</option>' . \"\\n\";\n\n    $html_output .= '<option value=\"userdefined\"'\n        . ((! isset($GLOBALS['pred_username'])\n                || $GLOBALS['pred_username'] == 'userdefined'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Use text field')\n        . ':</option>' . \"\\n\";\n\n    $html_output .= '</select>' . \"\\n\"\n        . '</span>' . \"\\n\";\n\n    $html_output .= '<input type=\"text\" name=\"username\" id=\"pma_username\" class=\"autofocus\"'\n        . ' maxlength=\"' . $username_length . '\" title=\"' . __('User name') . '\"'\n        . (empty($GLOBALS['username'])\n           ? ''\n           : ' value=\"' . htmlspecialchars(\n               isset($GLOBALS['new_username'])\n               ? $GLOBALS['new_username']\n               : $GLOBALS['username']\n           ) . '\"'\n        )\n        . ((! isset($GLOBALS['pred_username'])\n                || $GLOBALS['pred_username'] == 'userdefined'\n            )\n            ? 'required=\"required\"'\n            : '') . ' />' . \"\\n\";\n\n    $html_output .= '<div id=\"user_exists_warning\"'\n        . ' name=\"user_exists_warning\" style=\"display:none;\">'\n        . Message::notice(\n            __(\n                'An account already exists with the same username '\n                . 'but possibly a different hostname.'\n            )\n        )->getDisplay()\n        . '</div>';\n    $html_output .= '</div>';\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"select_pred_hostname\">' . \"\\n\"\n        . '    ' . __('Host name:') . \"\\n\"\n        . '</label>' . \"\\n\";\n\n    $html_output .= '<span class=\"options\">' . \"\\n\"\n        . '    <select name=\"pred_hostname\" id=\"select_pred_hostname\" '\n        . 'title=\"' . __('Host name') . '\"' . \"\\n\";\n    $_current_user = $GLOBALS['dbi']->fetchValue('SELECT USER();');\n    if (! empty($_current_user)) {\n        $thishost = str_replace(\n            \"'\",\n            '',\n            mb_substr(\n                $_current_user,\n                (mb_strrpos($_current_user, '@') + 1)\n            )\n        );\n        if ($thishost != 'localhost' && $thishost != '127.0.0.1') {\n            $html_output .= ' data-thishost=\"' . htmlspecialchars($thishost) . '\" ';\n        } else {\n            unset($thishost);\n        }\n    }\n    $html_output .= '>' . \"\\n\";\n    unset($_current_user);\n\n    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined\n    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {\n        switch (mb_strtolower($GLOBALS['hostname'])) {\n        case 'localhost':\n        case '127.0.0.1':\n            $GLOBALS['pred_hostname'] = 'localhost';\n            break;\n        case '%':\n            $GLOBALS['pred_hostname'] = 'any';\n            break;\n        default:\n            $GLOBALS['pred_hostname'] = 'userdefined';\n            break;\n        }\n    }\n    $html_output .=  '<option value=\"any\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'any'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Any host')\n        . '</option>' . \"\\n\"\n        . '<option value=\"localhost\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'localhost'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Local')\n        . '</option>' . \"\\n\";\n    if (! empty($thishost)) {\n        $html_output .= '<option value=\"thishost\"'\n            . ((isset($GLOBALS['pred_hostname'])\n                    && $GLOBALS['pred_hostname'] == 'thishost'\n                )\n                ? ' selected=\"selected\"'\n                : '') . '>'\n            . __('This Host')\n            . '</option>' . \"\\n\";\n    }\n    unset($thishost);\n    $html_output .= '<option value=\"hosttable\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'hosttable'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Use Host Table')\n        . '</option>' . \"\\n\";\n\n    $html_output .= '<option value=\"userdefined\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'userdefined'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Use text field:') . '</option>' . \"\\n\"\n        . '</select>' . \"\\n\"\n        . '</span>' . \"\\n\";\n\n    $html_output .= '<input type=\"text\" name=\"hostname\" id=\"pma_hostname\" maxlength=\"'\n        . $hostname_length . '\" value=\"'\n        // use default value of '%' to match with the default 'Any host'\n        . htmlspecialchars(isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '%')\n        . '\" title=\"' . __('Host name')\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'userdefined'\n            )\n            ? 'required=\"required\"'\n            : '')\n        . ' />' . \"\\n\"\n        . Util::showHint(\n            __(\n                'When Host table is used, this field is ignored '\n                . 'and values stored in Host table are used instead.'\n            )\n        )\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"select_pred_password\">' . \"\\n\"\n        . '    ' . __('Password:') . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '<span class=\"options\">' . \"\\n\"\n        . '<select name=\"pred_password\" id=\"select_pred_password\" title=\"'\n        . __('Password') . '\">' . \"\\n\"\n        . ($mode == 'change' ? '<option value=\"keep\" selected=\"selected\">'\n            . __('Do not change the password')\n            . '</option>' . \"\\n\" : '')\n        . '<option value=\"none\"';\n\n    if (isset($GLOBALS['username']) && $mode != 'change') {\n        $html_output .= '  selected=\"selected\"';\n    }\n    $html_output .= '>' . __('No Password') . '</option>' . \"\\n\"\n        . '<option value=\"userdefined\"'\n        . (isset($GLOBALS['username']) ? '' : ' selected=\"selected\"') . '>'\n        . __('Use text field')\n        . ':</option>' . \"\\n\"\n        . '</select>' . \"\\n\"\n        . '</span>' . \"\\n\"\n        . '<input type=\"password\" id=\"text_pma_pw\" name=\"pma_pw\" '\n        . 'title=\"' . __('Password') . '\" '\n        . (isset($GLOBALS['username']) ? '' : 'required=\"required\"')\n        . '/>' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\" '\n        . 'id=\"div_element_before_generate_password\">' . \"\\n\"\n        . '<label for=\"text_pma_pw2\">' . \"\\n\"\n        . '    ' . __('Re-type:') . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '<span class=\"options\">&nbsp;</span>' . \"\\n\"\n        . '<input type=\"password\" name=\"pma_pw2\" id=\"text_pma_pw2\" '\n        . 'title=\"' . __('Re-type') . '\" '\n        . (isset($GLOBALS['username']) ? '' : 'required=\"required\"')\n        . '/>' . \"\\n\"\n        . '</div>' . \"\\n\"\n        . '<div class=\"item\" id=\"authentication_plugin_div\">'\n        . '<label for=\"select_authentication_plugin\" >';\n\n    $serverType = Util::getServerType();\n    $orig_auth_plugin = PMA_getCurrentAuthenticationPlugin(\n        $mode,\n        $username,\n        $hostname\n    );\n\n    if (($serverType == 'MySQL'\n        && PMA_MYSQL_INT_VERSION >= 50507)\n        || ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200)\n    ) {\n        $html_output .= __('Authentication Plugin')\n        . '</label><span class=\"options\">&nbsp;</span>' . \"\\n\";\n\n        $auth_plugin_dropdown = PMA_getHtmlForAuthPluginsDropdown(\n            $orig_auth_plugin, $mode, 'new'\n        );\n    } else {\n        $html_output .= __('Password Hashing Method')\n            . '</label><span class=\"options\">&nbsp;</span>' . \"\\n\";\n        $auth_plugin_dropdown = PMA_getHtmlForAuthPluginsDropdown(\n            $orig_auth_plugin, $mode, 'old'\n        );\n    }\n    $html_output .= $auth_plugin_dropdown;\n\n    $html_output .= '<div '\n        . ($orig_auth_plugin != 'sha256_password' ? 'style=\"display:none\"' : '')\n        . ' id=\"ssl_reqd_warning\">'\n        . Message::notice(\n            __(\n                'This method requires using an \\'<i>SSL connection</i>\\' '\n                . 'or an \\'<i>unencrypted connection that encrypts the password '\n                . 'using RSA</i>\\'; while connecting to the server.'\n            )\n            . Util::showMySQLDocu('sha256-authentication-plugin')\n        )\n            ->getDisplay()\n        . '</div>';\n\n    $html_output .= '</div>' . \"\\n\"\n        // Generate password added here via jQuery\n       . '</fieldset>' . \"\\n\";\n\n    return $html_output;\n} // end of the 'PMA_getHtmlForLoginInformationFields()' function\n\n/**\n * Get username and hostname length\n *\n * @return array username length and hostname length\n */\nfunction PMA_getUsernameAndHostnameLength()\n{\n    /* Fallback values */\n    $username_length = 16;\n    $hostname_length = 41;\n\n    /* Try to get real lengths from the database */\n    $fields_info = $GLOBALS['dbi']->fetchResult(\n        'SELECT COLUMN_NAME, CHARACTER_MAXIMUM_LENGTH '\n        . 'FROM information_schema.columns '\n        . \"WHERE table_schema = 'mysql' AND table_name = 'user' \"\n        . \"AND COLUMN_NAME IN ('User', 'Host')\"\n    );\n    foreach ($fields_info as $val) {\n        if ($val['COLUMN_NAME'] == 'User') {\n            $username_length = $val['CHARACTER_MAXIMUM_LENGTH'];\n        } elseif ($val['COLUMN_NAME'] == 'Host') {\n            $hostname_length = $val['CHARACTER_MAXIMUM_LENGTH'];\n        }\n    }\n    return array($username_length, $hostname_length);\n}\n\n/**\n * Get current authentication plugin in use - for a user or globally\n *\n * @param string $mode     are we creating a new user or are we just\n *                         changing  one? (allowed values: 'new', 'change')\n * @param string $username User name\n * @param string $hostname Host name\n *\n * @return string authentication plugin in use\n */\nfunction PMA_getCurrentAuthenticationPlugin(\n    $mode = 'new',\n    $username = null,\n    $hostname = null\n) {\n    /* Fallback (standard) value */\n    $authentication_plugin = 'mysql_native_password';\n\n    if (isset($username) && isset($hostname)\n        && $mode == 'change'\n    ) {\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT `plugin` FROM `mysql`.`user` WHERE '\n            . '`User` = \"' . $username . '\" AND `Host` = \"' . $hostname . '\" LIMIT 1'\n        );\n        // Table 'mysql'.'user' may not exist for some previous\n        // versions of MySQL - in that case consider fallback value\n        if (isset($row) && $row) {\n            $authentication_plugin = $row['plugin'];\n        }\n    } elseif ($mode == 'change') {\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT CURRENT_USER() as user;'\n        );\n        if (isset($row) && $row) {\n            list($username, $hostname) = explode('@', $row['user']);\n        }\n\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT `plugin` FROM `mysql`.`user` WHERE '\n            . '`User` = \"' . $username . '\" AND `Host` = \"' . $hostname . '\"'\n        );\n        if (isset($row) && $row && ! empty($row['plugin'])) {\n            $authentication_plugin = $row['plugin'];\n        }\n    } elseif (PMA_MYSQL_INT_VERSION >= 50702) {\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT @@default_authentication_plugin'\n        );\n        $authentication_plugin = $row['@@default_authentication_plugin'];\n    }\n\n    return $authentication_plugin;\n}\n\n/**\n * Returns all the grants for a certain user on a certain host\n * Used in the export privileges for all users section\n *\n * @param string $user User name\n * @param string $host Host name\n *\n * @return string containing all the grants text\n */\nfunction PMA_getGrants($user, $host)\n{\n    $grants = $GLOBALS['dbi']->fetchResult(\n        \"SHOW GRANTS FOR '\"\n        . Util::sqlAddSlashes($user) . \"'@'\"\n        . Util::sqlAddSlashes($host) . \"'\"\n    );\n    $response = '';\n    foreach ($grants as $one_grant) {\n        $response .= $one_grant . \";\\n\\n\";\n    }\n    return $response;\n} // end of the 'PMA_getGrants()' function\n\n/**\n * Update password and get message for password updating\n *\n * @param string $err_url  error url\n * @param string $username username\n * @param string $hostname hostname\n *\n * @return string $message  success or error message after updating password\n */\nfunction PMA_updatePassword($err_url, $username, $hostname)\n{\n    // similar logic in user_password.php\n    $message = '';\n    $is_superuser = $GLOBALS['dbi']->isSuperuser();\n\n    if (empty($_REQUEST['nopass'])\n        && isset($_POST['pma_pw'])\n        && isset($_POST['pma_pw2'])\n    ) {\n        if ($_POST['pma_pw'] != $_POST['pma_pw2']) {\n            $message = Message::error(__('The passwords aren\\'t the same!'));\n        } elseif (empty($_POST['pma_pw']) || empty($_POST['pma_pw2'])) {\n            $message = Message::error(__('The password is empty!'));\n        }\n    }\n\n    // here $nopass could be == 1\n    if (empty($message)) {\n        $hashing_function = 'PASSWORD';\n        $serverType = Util::getServerType();\n        $authentication_plugin\n            = (isset($_REQUEST['authentication_plugin'])\n            ? $_REQUEST['authentication_plugin']\n            : PMA_getCurrentAuthenticationPlugin(\n                'change',\n                $username,\n                $hostname\n            ));\n\n        // Use 'ALTER USER ...' syntax for MySQL 5.7.6+\n        if ($serverType == 'MySQL'\n            && PMA_MYSQL_INT_VERSION >= 50706\n        ) {\n            if ($authentication_plugin != 'mysql_old_password') {\n                $query_prefix = \"ALTER USER '\"\n                    . Util::sqlAddSlashes($username)\n                    . \"'@'\" . Util::sqlAddSlashes($hostname) . \"'\"\n                    . \" IDENTIFIED WITH \"\n                    . $authentication_plugin\n                    . \" BY '\";\n            } else {\n                $query_prefix = \"ALTER USER '\"\n                    . Util::sqlAddSlashes($username)\n                    . \"'@'\" . Util::sqlAddSlashes($hostname) . \"'\"\n                    . \" IDENTIFIED BY '\";\n            }\n\n            // in $sql_query which will be displayed, hide the password\n            $sql_query = $query_prefix . \"*'\";\n\n            $local_query = $query_prefix\n                . Util::sqlAddSlashes($_POST['pma_pw']) . \"'\";\n        } else if ($serverType == 'MariaDB'\n            && PMA_MYSQL_INT_VERSION >= 50200\n            && $is_superuser\n        ) {\n            // Use 'UPDATE `mysql`.`user` ...' Syntax for MariaDB 5.2+\n            if ($authentication_plugin == 'mysql_native_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'mysql_native_password' type\n                $GLOBALS['dbi']->tryQuery('SET old_passwords = 0;');\n\n            } else if ($authentication_plugin == 'sha256_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'sha256_password' type\n                $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 2;');\n            }\n\n            $hashedPassword = PMA_getHashedPassword($_POST['pma_pw']);\n\n            $sql_query        = 'SET PASSWORD FOR \\''\n                . Util::sqlAddSlashes($username)\n                . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\' = '\n                . (($_POST['pma_pw'] == '')\n                    ? '\\'\\''\n                    : $hashing_function . '(\\''\n                    . preg_replace('@.@s', '*', $_POST['pma_pw']) . '\\')');\n\n            $local_query = \"UPDATE `mysql`.`user` SET \"\n                . \" `authentication_string` = '\" . $hashedPassword\n                . \"', `Password` = '', \"\n                . \" `plugin` = '\" . $authentication_plugin . \"'\"\n                . \" WHERE `User` = '\" . $username . \"' AND Host = '\"\n                . $hostname . \"';\";\n\n            $GLOBALS['dbi']->tryQuery(\"FLUSH PRIVILEGES;\");\n        } else {\n            // USE 'SET PASSWORD ...' syntax for rest of the versions\n            // Backup the old value, to be reset later\n            $row = $GLOBALS['dbi']->fetchSingleRow(\n                'SELECT @@old_passwords;'\n            );\n            $orig_value = $row['@@old_passwords'];\n            $update_plugin_query = \"UPDATE `mysql`.`user` SET\"\n                . \" `plugin` = '\" . $authentication_plugin . \"'\"\n                . \" WHERE `User` = '\" . $username . \"' AND Host = '\"\n                . $hostname . \"';\";\n\n            // Update the plugin for the user\n            if (!($GLOBALS['dbi']->tryQuery($update_plugin_query))) {\n                Util::mysqlDie(\n                    $GLOBALS['dbi']->getError(),\n                    $update_plugin_query,\n                    false, $err_url\n                );\n            }\n\n            $GLOBALS['dbi']->tryQuery(\"FLUSH PRIVILEGES;\");\n            if ($authentication_plugin == 'mysql_native_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'mysql_native_password' type\n                $GLOBALS['dbi']->tryQuery('SET old_passwords = 0;');\n            } else if ($authentication_plugin == 'sha256_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'sha256_password' type\n                $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 2;');\n            }\n            $sql_query        = 'SET PASSWORD FOR \\''\n                . Util::sqlAddSlashes($username)\n                . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\' = '\n                . (($_POST['pma_pw'] == '')\n                    ? '\\'\\''\n                    : $hashing_function . '(\\''\n                    . preg_replace('@.@s', '*', $_POST['pma_pw']) . '\\')');\n\n            $local_query      = 'SET PASSWORD FOR \\''\n                . Util::sqlAddSlashes($username)\n                . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\' = '\n                . (($_POST['pma_pw'] == '') ? '\\'\\'' : $hashing_function\n                . '(\\'' . Util::sqlAddSlashes($_POST['pma_pw']) . '\\')');\n        }\n\n        if (!($GLOBALS['dbi']->tryQuery($local_query))) {\n            Util::mysqlDie(\n                $GLOBALS['dbi']->getError(), $sql_query, false, $err_url\n            );\n        }\n        $message = Message::success(\n            __('The password for %s was changed successfully.')\n        );\n        $message->addParam(\n            '\\'' . htmlspecialchars($username)\n            . '\\'@\\'' . htmlspecialchars($hostname) . '\\''\n        );\n        if (isset($orig_value)) {\n            $GLOBALS['dbi']->tryQuery(\n                'SET `old_passwords` = ' . $orig_value . ';'\n            );\n        }\n    }\n    return $message;\n}\n\n/**\n * Revokes privileges and get message and SQL query for privileges revokes\n *\n * @param string $dbname    database name\n * @param string $tablename table name\n * @param string $username  username\n * @param string $hostname  host name\n * @param string $itemType  item type\n *\n * @return array ($message, $sql_query)\n */\nfunction PMA_getMessageAndSqlQueryForPrivilegesRevoke($dbname,\n    $tablename, $username, $hostname, $itemType\n) {\n    $db_and_table = PMA_wildcardEscapeForGrant($dbname, $tablename);\n\n    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $itemType . ' ' . $db_and_table\n        . ' FROM \\''\n        . Util::sqlAddSlashes($username) . '\\'@\\''\n        . Util::sqlAddSlashes($hostname) . '\\';';\n\n    $sql_query1 = 'REVOKE GRANT OPTION ON ' . $itemType . ' ' . $db_and_table\n        . ' FROM \\'' . Util::sqlAddSlashes($username) . '\\'@\\''\n        . Util::sqlAddSlashes($hostname) . '\\';';\n\n    $GLOBALS['dbi']->query($sql_query0);\n    if (! $GLOBALS['dbi']->tryQuery($sql_query1)) {\n        // this one may fail, too...\n        $sql_query1 = '';\n    }\n    $sql_query = $sql_query0 . ' ' . $sql_query1;\n    $message = Message::success(\n        __('You have revoked the privileges for %s.')\n    );\n    $message->addParam(\n        '\\'' . htmlspecialchars($username)\n        . '\\'@\\'' . htmlspecialchars($hostname) . '\\''\n    );\n\n    return array($message, $sql_query);\n}\n\n/**\n * Get REQUIRE cluase\n *\n * @return string REQUIRE clause\n */\nfunction PMA_getRequireClause()\n{\n    $arr = isset($_POST['ssl_type']) ? $_POST : $GLOBALS;\n    if (isset($arr['ssl_type']) && $arr['ssl_type'] == 'SPECIFIED') {\n        $require = array();\n        if (! empty($arr['ssl_cipher'])) {\n            $require[] = \"CIPHER '\"\n                    . Util::sqlAddSlashes($arr['ssl_cipher']) . \"'\";\n        }\n        if (! empty($arr['x509_issuer'])) {\n            $require[] = \"ISSUER '\"\n                    . Util::sqlAddSlashes($arr['x509_issuer']) . \"'\";\n        }\n        if (! empty($arr['x509_subject'])) {\n            $require[] = \"SUBJECT '\"\n                    . Util::sqlAddSlashes($arr['x509_subject']) . \"'\";\n        }\n        if (count($require)) {\n            $require_clause = \" REQUIRE \" . implode(\" AND \", $require);\n        } else {\n            $require_clause = \" REQUIRE NONE\";\n        }\n    } elseif (isset($arr['ssl_type']) && $arr['ssl_type'] == 'X509') {\n        $require_clause = \" REQUIRE X509\";\n    } elseif (isset($arr['ssl_type']) && $arr['ssl_type'] == 'ANY') {\n        $require_clause = \" REQUIRE SSL\";\n    } else {\n        $require_clause = \" REQUIRE NONE\";\n    }\n\n    return $require_clause;\n}\n\n/**\n * Get a WITH clause for 'update privileges' and 'add user'\n *\n * @return string $sql_query\n */\nfunction PMA_getWithClauseForAddUserAndUpdatePrivs()\n{\n    $sql_query = '';\n    if ((isset($_POST['Grant_priv']) && $_POST['Grant_priv'] == 'Y')\n        || (isset($GLOBALS['Grant_priv']) && $GLOBALS['Grant_priv'] == 'Y')\n    ) {\n        $sql_query .= ' GRANT OPTION';\n    }\n    if (isset($_POST['max_questions']) || isset($GLOBALS['max_questions'])) {\n        $max_questions = isset($_POST['max_questions'])\n            ? (int)$_POST['max_questions'] : (int)$GLOBALS['max_questions'];\n        $max_questions = max(0, $max_questions);\n        $sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;\n    }\n    if (isset($_POST['max_connections']) || isset($GLOBALS['max_connections'])) {\n        $max_connections = isset($_POST['max_connections'])\n            ? (int)$_POST['max_connections'] : (int)$GLOBALS['max_connections'];\n        $max_connections = max(0, $max_connections);\n        $sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;\n    }\n    if (isset($_POST['max_updates']) || isset($GLOBALS['max_updates'])) {\n        $max_updates = isset($_POST['max_updates'])\n            ? (int)$_POST['max_updates'] : (int)$GLOBALS['max_updates'];\n        $max_updates = max(0, $max_updates);\n        $sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;\n    }\n    if (isset($_POST['max_user_connections'])\n        || isset($GLOBALS['max_user_connections'])\n    ) {\n        $max_user_connections = isset($_POST['max_user_connections'])\n            ? (int)$_POST['max_user_connections']\n            : (int)$GLOBALS['max_user_connections'];\n        $max_user_connections = max(0, $max_user_connections);\n        $sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;\n    }\n    return ((!empty($sql_query)) ? ' WITH' . $sql_query : '');\n}\n\n/**\n * Get HTML for addUsersForm, This function call if isset($_REQUEST['adduser'])\n *\n * @param string $dbname database name\n *\n * @return string HTML for addUserForm\n */\nfunction PMA_getHtmlForAddUser($dbname)\n{\n    $html_output = '<h2>' . \"\\n\"\n       . Util::getIcon('b_usradd.png') . __('Add user account') . \"\\n\"\n       . '</h2>' . \"\\n\"\n       . '<form name=\"usersForm\" id=\"addUsersForm\"'\n       . ' onsubmit=\"return checkAddUser(this);\"'\n       . ' action=\"server_privileges.php\" method=\"post\" autocomplete=\"off\" >' . \"\\n\"\n       . PMA_URL_getHiddenInputs('', '')\n       . PMA_getHtmlForLoginInformationFields('new');\n\n    $html_output .= '<fieldset id=\"fieldset_add_user_database\">' . \"\\n\"\n        . '<legend>' . __('Database for user account') . '</legend>' . \"\\n\";\n\n    $html_output .= Util::getCheckbox(\n        'createdb-1',\n        __('Create database with same name and grant all privileges.'),\n        false, false, 'createdb-1'\n    );\n    $html_output .= '<br />' . \"\\n\";\n    $html_output .= Util::getCheckbox(\n        'createdb-2',\n        __('Grant all privileges on wildcard name (username\\\\_%).'),\n        false, false, 'createdb-2'\n    );\n    $html_output .= '<br />' . \"\\n\";\n\n    if (! empty($dbname) ) {\n        $html_output .= Util::getCheckbox(\n            'createdb-3',\n            sprintf(\n                __('Grant all privileges on database \"%s\".'),\n                htmlspecialchars($dbname)\n            ),\n            true,\n            false,\n            'createdb-3'\n        );\n        $html_output .= '<input type=\"hidden\" name=\"dbname\" value=\"'\n            . htmlspecialchars($dbname) . '\" />' . \"\\n\";\n        $html_output .= '<br />' . \"\\n\";\n    }\n\n    $html_output .= '</fieldset>' . \"\\n\";\n    if ($GLOBALS['is_grantuser']) {\n        $html_output .= PMA_getHtmlToDisplayPrivilegesTable('*', '*', false);\n    }\n    $html_output .= '<fieldset id=\"fieldset_add_user_footer\" class=\"tblFooters\">'\n        . \"\\n\"\n        . '<input type=\"hidden\" name=\"adduser_submit\" value=\"1\" />' . \"\\n\"\n        . '<input type=\"submit\" id=\"adduser_submit\" value=\"' . __('Go') . '\" />'\n        . \"\\n\"\n        . '</fieldset>' . \"\\n\"\n        . '</form>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get the list of privileges and list of compared privileges as strings\n * and return a array that contains both strings\n *\n * @return array $list_of_privileges, $list_of_compared_privileges\n */\nfunction PMA_getListOfPrivilegesAndComparedPrivileges()\n{\n    $list_of_privileges\n        = '`User`, '\n        . '`Host`, '\n        . '`Select_priv`, '\n        . '`Insert_priv`, '\n        . '`Update_priv`, '\n        . '`Delete_priv`, '\n        . '`Create_priv`, '\n        . '`Drop_priv`, '\n        . '`Grant_priv`, '\n        . '`Index_priv`, '\n        . '`Alter_priv`, '\n        . '`References_priv`, '\n        . '`Create_tmp_table_priv`, '\n        . '`Lock_tables_priv`, '\n        . '`Create_view_priv`, '\n        . '`Show_view_priv`, '\n        . '`Create_routine_priv`, '\n        . '`Alter_routine_priv`, '\n        . '`Execute_priv`';\n\n    $listOfComparedPrivs\n        = '`Select_priv` = \\'N\\''\n        . ' AND `Insert_priv` = \\'N\\''\n        . ' AND `Update_priv` = \\'N\\''\n        . ' AND `Delete_priv` = \\'N\\''\n        . ' AND `Create_priv` = \\'N\\''\n        . ' AND `Drop_priv` = \\'N\\''\n        . ' AND `Grant_priv` = \\'N\\''\n        . ' AND `References_priv` = \\'N\\''\n        . ' AND `Create_tmp_table_priv` = \\'N\\''\n        . ' AND `Lock_tables_priv` = \\'N\\''\n        . ' AND `Create_view_priv` = \\'N\\''\n        . ' AND `Show_view_priv` = \\'N\\''\n        . ' AND `Create_routine_priv` = \\'N\\''\n        . ' AND `Alter_routine_priv` = \\'N\\''\n        . ' AND `Execute_priv` = \\'N\\'';\n\n    $list_of_privileges .=\n        ', `Event_priv`, '\n        . '`Trigger_priv`';\n    $listOfComparedPrivs .=\n        ' AND `Event_priv` = \\'N\\''\n        . ' AND `Trigger_priv` = \\'N\\'';\n    return array($list_of_privileges, $listOfComparedPrivs);\n}\n\n/**\n * Get the HTML for routine based privileges\n *\n * @param string $db             database name\n * @param string $odd_row        row styling\n * @param string $index_checkbox starting index for rows to be added\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlTableBodyForSpecificDbRoutinePrivs($db, $odd_row, $index_checkbox)\n{\n    $sql_query = 'SELECT * FROM `mysql`.`procs_priv` WHERE Db = \"' . $db . '\";';\n    $res = $GLOBALS['dbi']->query($sql_query);\n    $html_output = '';\n    while ($row = $GLOBALS['dbi']->fetchAssoc($res)) {\n\n        $html_output .= '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">';\n\n        $html_output .= '<td';\n        $value = htmlspecialchars($row['User'] . '&amp;#27;' . $row['Host']);\n        $html_output .= '>';\n        $html_output .= '<input type=\"checkbox\" class=\"checkall\" '\n            . 'name=\"selected_usr[]\" '\n            . 'id=\"checkbox_sel_users_' . ($index_checkbox++) . '\" '\n            . 'value=\"' . $value . '\" /></td>';\n\n        $html_output .= '<td>' . $row['User']\n            . '</td>'\n            . '<td>' . $row['Host']\n            . '</td>'\n            . '<td>' . 'routine'\n            . '</td>'\n            . '<td>' . '<code>' . $row['Routine_name'] . '</code>'\n            . '</td>'\n            . '<td>' . 'Yes'\n            . '</td>';\n        $current_user = $row['User'];\n        $current_host = $row['Host'];\n        $routine = $row['Routine_name'];\n        $html_output .= '<td>';\n        if ($GLOBALS['is_grantuser']) {\n            $specific_db = (isset($row['Db']) && $row['Db'] != '*')\n                ? $row['Db'] : '';\n            $specific_table = (isset($row['Table_name'])\n                && $row['Table_name'] != '*')\n                ? $row['Table_name'] : '';\n            $html_output .= PMA_getUserLink(\n                'edit',\n                $current_user,\n                $current_host,\n                $specific_db,\n                $specific_table,\n                $routine\n            );\n        }\n        $html_output .= '</td>';\n\n        $html_output .= '</tr>';\n        $odd_row = !$odd_row;\n\n    }\n    return $html_output;\n}\n\n/**\n * Get the HTML for user form and check the privileges for a particular database.\n *\n * @param string $db database name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForSpecificDbPrivileges($db)\n{\n    $html_output = '';\n    if ($GLOBALS['is_superuser']) {\n        // check the privileges for a particular database.\n        $html_output  = '<form id=\"usersForm\" action=\"server_privileges.php\">';\n        $html_output .= PMA_URL_getHiddenInputs($db);\n        $html_output .= '<fieldset>';\n        $html_output .= '<legend>' . \"\\n\"\n            . Util::getIcon('b_usrcheck.png')\n            . '    '\n            . sprintf(\n                __('Users having access to \"%s\"'),\n                '<a href=\"' . Util::getScriptNameForOption(\n                    $GLOBALS['cfg']['DefaultTabDatabase'], 'database'\n                )\n                . PMA_URL_getCommon(array('db' => $db)) . '\">'\n                .  htmlspecialchars($db)\n                . '</a>'\n            )\n            . \"\\n\"\n            . '</legend>' . \"\\n\";\n\n        $html_output .= '<table id=\"dbspecificuserrights\" class=\"data\">';\n        $html_output .= PMA_getHtmlForPrivsTableHead();\n        $privMap = PMA_getPrivMap($db);\n        $html_output .= PMA_getHtmlTableBodyForSpecificDbOrTablePrivs($privMap, $db);\n        $html_output .= '</table>';\n\n        $html_output .= '<div class=\"floatleft\">';\n        $html_output .= Util::getWithSelected(\n            $GLOBALS['pmaThemeImage'], $GLOBALS['text_dir'], \"usersForm\"\n        );\n        $html_output .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_export',\n            __('Export'), 'b_tblexport.png', 'export'\n        );\n\n        $html_output .= '</fieldset>';\n        $html_output .= '</form>';\n    } else {\n        $html_output .= PMA_getHtmlForViewUsersError();\n    }\n\n    if ($GLOBALS['is_ajax_request'] == true\n        && empty($_REQUEST['ajax_page_request'])\n    ) {\n        $message = Message::success(__('User has been added.'));\n        $response = PMA\\libraries\\Response::getInstance();\n        $response->addJSON('message', $message);\n        $response->addJSON('user_form', $html_output);\n        exit;\n    } else {\n        // Offer to create a new user for the current database\n        $html_output .= PMA_getAddUserHtmlFieldset($db);\n    }\n    return $html_output;\n}\n\n/**\n * Get the HTML for user form and check the privileges for a particular table.\n *\n * @param string $db    database name\n * @param string $table table name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForSpecificTablePrivileges($db, $table)\n{\n    $html_output = '';\n    if ($GLOBALS['is_superuser']) {\n        // check the privileges for a particular table.\n        $html_output  = '<form id=\"usersForm\" action=\"server_privileges.php\">';\n        $html_output .= PMA_URL_getHiddenInputs($db, $table);\n        $html_output .= '<fieldset>';\n        $html_output .= '<legend>'\n            . Util::getIcon('b_usrcheck.png')\n            . sprintf(\n                __('Users having access to \"%s\"'),\n                '<a href=\"' . Util::getScriptNameForOption(\n                    $GLOBALS['cfg']['DefaultTabTable'], 'table'\n                )\n                . PMA_URL_getCommon(\n                    array(\n                        'db' => $db,\n                        'table' => $table,\n                    )\n                ) . '\">'\n                .  htmlspecialchars($db) . '.' . htmlspecialchars($table)\n                . '</a>'\n            )\n            . '</legend>';\n\n        $html_output .= '<table id=\"tablespecificuserrights\" class=\"data\">';\n        $html_output .= PMA_getHtmlForPrivsTableHead();\n        $privMap = PMA_getPrivMap($db);\n        $sql_query = \"SELECT `User`, `Host`, `Db`,\"\n            . \" 't' AS `Type`, `Table_name`, `Table_priv`\"\n            . \" FROM `mysql`.`tables_priv`\"\n            . \" WHERE '\" . Util::sqlAddSlashes($db) . \"' LIKE `Db`\"\n            . \"     AND '\" . Util::sqlAddSlashes($table) . \"' LIKE `Table_name`\"\n            . \"     AND NOT (`Table_priv` = '' AND Column_priv = '')\"\n            . \" ORDER BY `User` ASC, `Host` ASC, `Db` ASC, `Table_priv` ASC;\";\n        $res = $GLOBALS['dbi']->query($sql_query);\n        PMA_mergePrivMapFromResult($privMap, $res);\n        $html_output .= PMA_getHtmlTableBodyForSpecificDbOrTablePrivs($privMap, $db);\n        $html_output .= '</table>';\n\n        $html_output .= '<div class=\"floatleft\">';\n        $html_output .= Util::getWithSelected(\n            $GLOBALS['pmaThemeImage'], $GLOBALS['text_dir'], \"usersForm\"\n        );\n        $html_output .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_export',\n            __('Export'), 'b_tblexport.png', 'export'\n        );\n\n        $html_output .= '</fieldset>';\n        $html_output .= '</form>';\n    } else {\n        $html_output .= PMA_getHtmlForViewUsersError();\n    }\n    // Offer to create a new user for the current database\n    $html_output .= PMA_getAddUserHtmlFieldset($db, $table);\n    return $html_output;\n}\n\n/**\n * gets privilege map\n *\n * @param string $db the database\n *\n * @return array $privMap the privilege map\n */\nfunction PMA_getPrivMap($db)\n{\n    list($listOfPrivs, $listOfComparedPrivs)\n        = PMA_getListOfPrivilegesAndComparedPrivileges();\n    $sql_query\n        = \"(\"\n        . \" SELECT \" . $listOfPrivs . \", '*' AS `Db`, 'g' AS `Type`\"\n        . \" FROM `mysql`.`user`\"\n        . \" WHERE NOT (\" . $listOfComparedPrivs . \")\"\n        . \")\"\n        . \" UNION \"\n        . \"(\"\n        . \" SELECT \" . $listOfPrivs . \", `Db`, 'd' AS `Type`\"\n        . \" FROM `mysql`.`db`\"\n        . \" WHERE '\" . Util::sqlAddSlashes($db) . \"' LIKE `Db`\"\n        . \"     AND NOT (\" . $listOfComparedPrivs . \")\"\n        . \")\"\n        . \" ORDER BY `User` ASC, `Host` ASC, `Db` ASC;\";\n    $res = $GLOBALS['dbi']->query($sql_query);\n    $privMap = array();\n    PMA_mergePrivMapFromResult($privMap, $res);\n    return $privMap;\n}\n\n/**\n * merge privilege map and rows from resultset\n *\n * @param array  &$privMap the privilege map reference\n * @param object $result   the resultset of query\n *\n * @return void\n */\nfunction PMA_mergePrivMapFromResult(&$privMap, $result)\n{\n    while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n        $user = $row['User'];\n        $host = $row['Host'];\n        if (! isset($privMap[$user])) {\n            $privMap[$user] = array();\n        }\n        if (! isset($privMap[$user][$host])) {\n            $privMap[$user][$host] = array();\n        }\n        $privMap[$user][$host][] = $row;\n    }\n}\n\n/**\n * Get HTML snippet for privileges table head\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForPrivsTableHead()\n{\n    return '<thead>'\n        . '<tr>'\n        . '<th></th>'\n        . '<th>' . __('User name') . '</th>'\n        . '<th>' . __('Host name') . '</th>'\n        . '<th>' . __('Type') . '</th>'\n        . '<th>' . __('Privileges') . '</th>'\n        . '<th>' . __('Grant') . '</th>'\n        . '<th>' . __('Action') . '</th>'\n        . '</tr>'\n        . '</thead>';\n}\n\n/**\n * Get HTML error for View Users form\n * For non superusers such as grant/create users\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForViewUsersError()\n{\n    return Message::error(\n        __('Not enough privilege to view users.')\n    )->getDisplay();\n}\n\n/**\n * Get HTML snippet for table body of specific database or table privileges\n *\n * @param array  $privMap privilege map\n * @param string $db      database\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlTableBodyForSpecificDbOrTablePrivs($privMap, $db)\n{\n    $html_output = '<tbody>';\n    $index_checkbox = 0;\n    $odd_row = true;\n    if (empty($privMap)) {\n        $html_output .= '<tr class=\"odd\">'\n            . '<td colspan=\"6\">'\n            . __('No user found.')\n            . '</td>'\n            . '</tr>'\n            . '</tbody>';\n        return $html_output;\n    }\n\n    foreach ($privMap as $current_user => $val) {\n        foreach ($val as $current_host => $current_privileges) {\n            $nbPrivileges = count($current_privileges);\n            $html_output .= '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">';\n\n            $value = htmlspecialchars($current_user . '&amp;#27;' . $current_host);\n            $html_output .= '<td';\n            if ($nbPrivileges > 1) {\n                $html_output .= ' rowspan=\"' . $nbPrivileges . '\"';\n            }\n            $html_output .= '>';\n            $html_output .= '<input type=\"checkbox\" class=\"checkall\" '\n                . 'name=\"selected_usr[]\" '\n                . 'id=\"checkbox_sel_users_' . ($index_checkbox++) . '\" '\n                . 'value=\"' . $value . '\" /></td>' . \"\\n\";\n\n            // user\n            $html_output .= '<td';\n            if ($nbPrivileges > 1) {\n                $html_output .= ' rowspan=\"' . $nbPrivileges . '\"';\n            }\n            $html_output .= '>';\n            if (empty($current_user)) {\n                $html_output .= '<span style=\"color: #FF0000\">'\n                    . __('Any') . '</span>';\n            } else {\n                $html_output .= htmlspecialchars($current_user);\n            }\n            $html_output .= '</td>';\n\n            // host\n            $html_output .= '<td';\n            if ($nbPrivileges > 1) {\n                $html_output .= ' rowspan=\"' . $nbPrivileges . '\"';\n            }\n            $html_output .= '>';\n            $html_output .= htmlspecialchars($current_host);\n            $html_output .= '</td>';\n\n            $html_output .= PMA_getHtmlListOfPrivs(\n                $db, $current_privileges, $current_user,\n                $current_host, $odd_row\n            );\n\n            $odd_row = ! $odd_row;\n        }\n    }\n\n    //For fetching routine based privileges\n    $html_output .= PMA_getHtmlTableBodyForSpecificDbRoutinePrivs($db, $odd_row, $index_checkbox);\n    $html_output .= '</tbody>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML to display privileges\n *\n * @param string  $db                 Database name\n * @param array   $current_privileges List of privileges\n * @param string  $current_user       Current user\n * @param string  $current_host       Current host\n * @param boolean $odd_row            Current row is odd\n *\n * @return string HTML to display privileges\n */\nfunction PMA_getHtmlListOfPrivs(\n    $db, $current_privileges, $current_user,\n    $current_host, $odd_row\n) {\n    $nbPrivileges = count($current_privileges);\n    $html_output = null;\n    for ($i = 0; $i < $nbPrivileges; $i++) {\n        $current = $current_privileges[$i];\n\n        // type\n        $html_output .= '<td>';\n        if ($current['Type'] == 'g') {\n            $html_output .= __('global');\n        } elseif ($current['Type'] == 'd') {\n            if ($current['Db'] == Util::escapeMysqlWildcards($db)) {\n                $html_output .= __('database-specific');\n            } else {\n                $html_output .= __('wildcard') . ': '\n                    . '<code>'\n                    . htmlspecialchars($current['Db'])\n                    . '</code>';\n            }\n        } elseif ($current['Type'] == 't') {\n            $html_output .= __('table-specific');\n        }\n        $html_output .= '</td>';\n\n        // privileges\n        $html_output .= '<td>';\n        if (isset($current['Table_name'])) {\n            $privList = explode(',', $current['Table_priv']);\n            $privs = array();\n            $grantsArr = PMA_getTableGrantsArray();\n            foreach ($grantsArr as $grant) {\n                $privs[$grant[0]] = 'N';\n                foreach ($privList as $priv) {\n                    if ($grant[0] == $priv) {\n                        $privs[$grant[0]] = 'Y';\n                    }\n                }\n            }\n            $html_output .= '<code>'\n                . join(\n                    ',',\n                    PMA_extractPrivInfo($privs, true, true)\n                )\n                . '</code>';\n        } else {\n            $html_output .= '<code>'\n                . join(\n                    ',',\n                    PMA_extractPrivInfo($current, true, false)\n                )\n                . '</code>';\n        }\n        $html_output .= '</td>';\n\n        // grant\n        $html_output .= '<td>';\n        $containsGrant = false;\n        if (isset($current['Table_name'])) {\n            $privList = explode(',', $current['Table_priv']);\n            foreach ($privList as $priv) {\n                if ($priv == 'Grant') {\n                    $containsGrant = true;\n                }\n            }\n        } else {\n            $containsGrant = $current['Grant_priv'] == 'Y';\n        }\n        $html_output .= ($containsGrant ? __('Yes') : __('No'));\n        $html_output .= '</td>';\n\n        // action\n        $html_output .= '<td>';\n        if ($GLOBALS['is_grantuser']) {\n            $specific_db = (isset($current['Db']) && $current['Db'] != '*')\n                ? $current['Db'] : '';\n            $specific_table = (isset($current['Table_name'])\n                && $current['Table_name'] != '*')\n                ? $current['Table_name'] : '';\n            $html_output .= PMA_getUserLink(\n                'edit',\n                $current_user,\n                $current_host,\n                $specific_db,\n                $specific_table\n            );\n        }\n        $html_output .= '</td>';\n\n        $html_output .= '</tr>';\n        if (($i + 1) < $nbPrivileges) {\n            $html_output .= '<tr class=\"noclick '\n                . ($odd_row ? 'odd' : 'even') . '\">';\n        }\n    }\n    return $html_output;\n}\n\n/**\n * Returns edit, revoke or export link for a user.\n *\n * @param string $linktype    The link type (edit | revoke | export)\n * @param string $username    User name\n * @param string $hostname    Host name\n * @param string $dbname      Database name\n * @param string $tablename   Table name\n * @param string $routinename Routine name\n * @param string $initial     Initial value\n *\n * @return string HTML code with link\n */\nfunction PMA_getUserLink(\n    $linktype, $username, $hostname, $dbname = '',\n    $tablename = '', $routinename = '', $initial = ''\n) {\n    $html = '<a';\n    switch($linktype) {\n    case 'edit':\n        $html .= ' class=\"edit_user_anchor\"';\n        break;\n    case 'export':\n        $html .= ' class=\"export_user_anchor ajax\"';\n        break;\n    }\n    $params = array(\n        'username' => $username,\n        'hostname' => $hostname\n    );\n    switch($linktype) {\n    case 'edit':\n        $params['dbname'] = $dbname;\n        $params['tablename'] = $tablename;\n        $params['routinename'] = $routinename;\n        break;\n    case 'revoke':\n        $params['dbname'] = $dbname;\n        $params['tablename'] = $tablename;\n        $params['routinename'] = $routinename;\n        $params['revokeall'] = 1;\n        break;\n    case 'export':\n        $params['initial'] = $initial;\n        $params['export'] = 1;\n        break;\n    }\n\n    $html .= ' href=\"server_privileges.php'\n        . PMA_URL_getCommon($params)\n        . '\">';\n\n    switch($linktype) {\n    case 'edit':\n        $html .= Util::getIcon('b_usredit.png', __('Edit privileges'));\n        break;\n    case 'revoke':\n        $html .= Util::getIcon('b_usrdrop.png', __('Revoke'));\n        break;\n    case 'export':\n        $html .= Util::getIcon('b_tblexport.png', __('Export'));\n        break;\n    }\n    $html .= '</a>';\n\n    return $html;\n}\n\n/**\n * Returns user group edit link\n *\n * @param string $username User name\n *\n * @return string HTML code with link\n */\nfunction PMA_getUserGroupEditLink($username)\n{\n     return '<a class=\"edit_user_group_anchor ajax\"'\n        . ' href=\"server_privileges.php'\n        . PMA_URL_getCommon(array('username' => $username))\n        . '\">'\n        . Util::getIcon('b_usrlist.png', __('Edit user group'))\n        . '</a>';\n}\n\n/**\n * Returns number of defined user groups\n *\n * @return integer $user_group_count\n */\nfunction PMA_getUserGroupCount()\n{\n    $cfgRelation = PMA_getRelationsParam();\n    $user_group_table = Util::backquote($cfgRelation['db'])\n        . '.' . Util::backquote($cfgRelation['usergroups']);\n    $sql_query = 'SELECT COUNT(*) FROM ' . $user_group_table;\n    $user_group_count = $GLOBALS['dbi']->fetchValue(\n        $sql_query, 0, 0, $GLOBALS['controllink']\n    );\n\n    return $user_group_count;\n}\n\n/**\n * This function return the extra data array for the ajax behavior\n *\n * @param string $password  password\n * @param string $sql_query sql query\n * @param string $hostname  hostname\n * @param string $username  username\n *\n * @return array $extra_data\n */\nfunction PMA_getExtraDataForAjaxBehavior(\n    $password, $sql_query, $hostname, $username\n) {\n    if (isset($GLOBALS['dbname'])) {\n        //if (preg_match('/\\\\\\\\(?:_|%)/i', $dbname)) {\n        if (preg_match('/(?<!\\\\\\\\)(?:_|%)/i', $GLOBALS['dbname'])) {\n            $dbname_is_wildcard = true;\n        } else {\n            $dbname_is_wildcard = false;\n        }\n    }\n\n    $user_group_count = 0;\n    if ($GLOBALS['cfgRelation']['menuswork']) {\n        $user_group_count = PMA_getUserGroupCount();\n    }\n\n    $extra_data = array();\n    if (mb_strlen($sql_query)) {\n        $extra_data['sql_query'] = Util::getMessage(null, $sql_query);\n    }\n\n    if (isset($_REQUEST['change_copy'])) {\n        /**\n         * generate html on the fly for the new user that was just created.\n         */\n        $new_user_string = '<tr>' . \"\\n\"\n            . '<td> <input type=\"checkbox\" name=\"selected_usr[]\" '\n            . 'id=\"checkbox_sel_users_\"'\n            . 'value=\"'\n            . htmlspecialchars($username)\n            . '&amp;#27;' . htmlspecialchars($hostname) . '\" />'\n            . '</td>' . \"\\n\"\n            . '<td><label for=\"checkbox_sel_users_\">'\n            . (empty($_REQUEST['username'])\n                    ? '<span style=\"color: #FF0000\">' . __('Any') . '</span>'\n                    : htmlspecialchars($username) ) . '</label></td>' . \"\\n\"\n            . '<td>' . htmlspecialchars($hostname) . '</td>' . \"\\n\";\n\n        $new_user_string .= '<td>';\n\n        if (! empty($password) || isset($_POST['pma_pw'])) {\n            $new_user_string .= __('Yes');\n        } else {\n            $new_user_string .= '<span style=\"color: #FF0000\">'\n                . __('No')\n            . '</span>';\n        };\n\n        $new_user_string .= '</td>' . \"\\n\";\n        $new_user_string .= '<td>'\n            . '<code>' . join(', ', PMA_extractPrivInfo(null, true)) . '</code>'\n            . '</td>'; //Fill in privileges here\n\n        // if $cfg['Servers'][$i]['users'] and $cfg['Servers'][$i]['usergroups'] are\n        // enabled\n        $cfgRelation = PMA_getRelationsParam();\n        if (isset($cfgRelation['users']) && isset($cfgRelation['usergroups'])) {\n            $new_user_string .= '<td class=\"usrGroup\"></td>';\n        }\n\n        $new_user_string .= '<td>';\n        if ((isset($_POST['Grant_priv']) && $_POST['Grant_priv'] == 'Y')) {\n            $new_user_string .= __('Yes');\n        } else {\n            $new_user_string .= __('No');\n        }\n        $new_user_string .='</td>';\n\n        if ($GLOBALS['is_grantuser']) {\n            $new_user_string .= '<td>'\n                . PMA_getUserLink('edit', $username, $hostname)\n                . '</td>' . \"\\n\";\n        }\n\n        if ($cfgRelation['menuswork'] && $user_group_count > 0) {\n            $new_user_string .= '<td>'\n                . PMA_getUserGroupEditLink($username)\n                . '</td>' . \"\\n\";\n        }\n\n        $new_user_string .= '<td>'\n            . PMA_getUserLink(\n                'export',\n                $username,\n                $hostname,\n                '',\n                '',\n                '',\n                isset($_GET['initial']) ? $_GET['initial'] : ''\n            )\n            . '</td>' . \"\\n\";\n\n        $new_user_string .= '</tr>';\n\n        $extra_data['new_user_string'] = $new_user_string;\n\n        /**\n         * Generate the string for this alphabet's initial, to update the user\n         * pagination\n         */\n        $new_user_initial = mb_strtoupper(\n            mb_substr($username, 0, 1)\n        );\n        $newUserInitialString = '<a href=\"server_privileges.php'\n            . PMA_URL_getCommon(array('initial' => $new_user_initial)) . '\">'\n            . $new_user_initial . '</a>';\n        $extra_data['new_user_initial'] = $new_user_initial;\n        $extra_data['new_user_initial_string'] = $newUserInitialString;\n    }\n\n    if (isset($_POST['update_privs'])) {\n        $extra_data['db_specific_privs'] = false;\n        $extra_data['db_wildcard_privs'] = false;\n        if (isset($dbname_is_wildcard)) {\n            $extra_data['db_specific_privs'] = ! $dbname_is_wildcard;\n            $extra_data['db_wildcard_privs'] = $dbname_is_wildcard;\n        }\n        $new_privileges = join(', ', PMA_extractPrivInfo(null, true));\n\n        $extra_data['new_privileges'] = $new_privileges;\n    }\n\n    if (isset($_REQUEST['validate_username'])) {\n        $sql_query = \"SELECT * FROM `mysql`.`user` WHERE `User` = '\"\n            . $_REQUEST['username'] . \"';\";\n        $res = $GLOBALS['dbi']->query($sql_query);\n        $row = $GLOBALS['dbi']->fetchRow($res);\n        if (empty($row)) {\n            $extra_data['user_exists'] = false;\n        } else {\n            $extra_data['user_exists'] = true;\n        }\n    }\n\n    return $extra_data;\n}\n\n/**\n * Get the HTML snippet for change user login information\n *\n * @param string $username username\n * @param string $hostname host name\n *\n * @return string HTML snippet\n */\nfunction PMA_getChangeLoginInformationHtmlForm($username, $hostname)\n{\n    $choices = array(\n        '4' => __('\u2026 keep the old one.'),\n        '1' => __('\u2026 delete the old one from the user tables.'),\n        '2' => __(\n            '\u2026 revoke all active privileges from '\n            . 'the old one and delete it afterwards.'\n        ),\n        '3' => __(\n            '\u2026 delete the old one from the user tables '\n            . 'and reload the privileges afterwards.'\n        )\n    );\n\n    $html_output = '<form action=\"server_privileges.php\" '\n        . 'onsubmit=\"return checkAddUser(this);\" '\n        . 'method=\"post\" class=\"copyUserForm submenu-item\">' . \"\\n\"\n        . PMA_URL_getHiddenInputs('', '')\n        . '<input type=\"hidden\" name=\"old_username\" '\n        . 'value=\"' . htmlspecialchars($username) . '\" />' . \"\\n\"\n        . '<input type=\"hidden\" name=\"old_hostname\" '\n        . 'value=\"' . htmlspecialchars($hostname) . '\" />' . \"\\n\"\n        . '<fieldset id=\"fieldset_change_copy_user\">' . \"\\n\"\n        . '<legend data-submenu-label=\"' . __('Login Information') . '\">' . \"\\n\"\n        . __('Change login information / Copy user account')\n        . '</legend>' . \"\\n\"\n        . PMA_getHtmlForLoginInformationFields('change', $username, $hostname);\n\n    $html_output .= '<fieldset id=\"fieldset_mode\">' . \"\\n\"\n        . ' <legend>'\n        . __('Create a new user account with the same privileges and \u2026')\n        . '</legend>' . \"\\n\";\n    $html_output .= Util::getRadioFields(\n        'mode', $choices, '4', true\n    );\n    $html_output .= '</fieldset>' . \"\\n\"\n       . '</fieldset>' . \"\\n\";\n\n    $html_output .= '<fieldset id=\"fieldset_change_copy_user_footer\" '\n        . 'class=\"tblFooters\">' . \"\\n\"\n        . '<input type=\"hidden\" name=\"change_copy\" value=\"1\" />' . \"\\n\"\n        . '<input type=\"submit\" value=\"' . __('Go') . '\" />' . \"\\n\"\n        . '</fieldset>' . \"\\n\"\n        . '</form>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Provide a line with links to the relevant database and table\n *\n * @param string $url_dbname url database name that urlencode() string\n * @param string $dbname     database name\n * @param string $tablename  table name\n *\n * @return string HTML snippet\n */\nfunction PMA_getLinkToDbAndTable($url_dbname, $dbname, $tablename)\n{\n    $html_output = '[ ' . __('Database')\n        . ' <a href=\"' . Util::getScriptNameForOption(\n            $GLOBALS['cfg']['DefaultTabDatabase'], 'database'\n        )\n        . PMA_URL_getCommon(\n            array(\n                'db' => $url_dbname,\n                'reload' => 1\n            )\n        )\n        . '\">'\n        . htmlspecialchars($dbname) . ': '\n        . Util::getTitleForTarget(\n            $GLOBALS['cfg']['DefaultTabDatabase']\n        )\n        . \"</a> ]\\n\";\n\n    if (mb_strlen($tablename)) {\n        $html_output .= ' [ ' . __('Table') . ' <a href=\"'\n            . Util::getScriptNameForOption(\n                $GLOBALS['cfg']['DefaultTabTable'], 'table'\n            )\n            . PMA_URL_getCommon(\n                array(\n                    'db' => $url_dbname,\n                    'table' => $tablename,\n                    'reload' => 1,\n                )\n            )\n            . '\">' . htmlspecialchars($tablename) . ': '\n            . Util::getTitleForTarget(\n                $GLOBALS['cfg']['DefaultTabTable']\n            )\n            . \"</a> ]\\n\";\n    }\n    return $html_output;\n}\n\n/**\n * no db name given, so we want all privs for the given user\n * db name was given, so we want all user specific rights for this db\n * So this function returns user rights as an array\n *\n * @param string $username username\n * @param string $hostname host name\n * @param string $type     database or table\n * @param string $dbname   database name\n *\n * @return array $db_rights database rights\n */\nfunction PMA_getUserSpecificRights($username, $hostname, $type, $dbname = '')\n{\n    $user_host_condition = \" WHERE `User`\"\n        . \" = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host`\"\n        . \" = '\" . Util::sqlAddSlashes($hostname) . \"'\";\n\n    if ($type == 'database') {\n        $tables_to_search_for_users = array(\n            'tables_priv', 'columns_priv', 'procs_priv'\n        );\n        $dbOrTableName = 'Db';\n    } elseif ($type == 'table') {\n        $user_host_condition .= \" AND `Db` LIKE '\"\n            . Util::sqlAddSlashes($dbname, true) . \"'\";\n        $tables_to_search_for_users = array('columns_priv',);\n        $dbOrTableName = 'Table_name';\n    } else { // routine\n        $user_host_condition .= \" AND `Db` LIKE '\"\n            . Util::sqlAddSlashes($dbname, true) . \"'\";\n        $tables_to_search_for_users = array('procs_priv',);\n        $dbOrTableName = 'Routine_name';\n    }\n\n    // we also want privileges for this user not in table `db` but in other table\n    $tables = $GLOBALS['dbi']->fetchResult('SHOW TABLES FROM `mysql`;');\n\n    $db_rights_sqls = array();\n    foreach ($tables_to_search_for_users as $table_search_in) {\n        if (in_array($table_search_in, $tables)) {\n            $db_rights_sqls[] = '\n                SELECT DISTINCT `' . $dbOrTableName . '`\n                FROM `mysql`.' . Util::backquote($table_search_in)\n               . $user_host_condition;\n        }\n    }\n\n    $user_defaults = array(\n        $dbOrTableName  => '',\n        'Grant_priv'    => 'N',\n        'privs'         => array('USAGE'),\n        'Column_priv'   => true,\n    );\n\n    // for the rights\n    $db_rights = array();\n\n    $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'\n        . ' ORDER BY `' . $dbOrTableName . '` ASC';\n\n    $db_rights_result = $GLOBALS['dbi']->query($db_rights_sql);\n\n    while ($db_rights_row = $GLOBALS['dbi']->fetchAssoc($db_rights_result)) {\n        $db_rights_row = array_merge($user_defaults, $db_rights_row);\n        if ($type == 'database') {\n            // only Db names in the table `mysql`.`db` uses wildcards\n            // as we are in the db specific rights display we want\n            // all db names escaped, also from other sources\n            $db_rights_row['Db'] = Util::escapeMysqlWildcards(\n                $db_rights_row['Db']\n            );\n        }\n        $db_rights[$db_rights_row[$dbOrTableName]] = $db_rights_row;\n    }\n\n    $GLOBALS['dbi']->freeResult($db_rights_result);\n\n    if ($type == 'database') {\n        $sql_query = 'SELECT * FROM `mysql`.`db`'\n            . $user_host_condition . ' ORDER BY `Db` ASC';\n    } elseif ($type == 'table') {\n        $sql_query = 'SELECT `Table_name`,'\n            . ' `Table_priv`,'\n            . ' IF(`Column_priv` = _latin1 \\'\\', 0, 1)'\n            . ' AS \\'Column_priv\\''\n            . ' FROM `mysql`.`tables_priv`'\n            . $user_host_condition\n            . ' ORDER BY `Table_name` ASC;';\n    } else {\n        $sql_query = \"SELECT `Routine_name`, `Proc_priv`\"\n            . \" FROM `mysql`.`procs_priv`\"\n            . $user_host_condition\n            . \" ORDER BY `Routine_name`\";\n\n    }\n\n    $result = $GLOBALS['dbi']->query($sql_query);\n\n    while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n        if (isset($db_rights[$row[$dbOrTableName]])) {\n            $db_rights[$row[$dbOrTableName]]\n                = array_merge($db_rights[$row[$dbOrTableName]], $row);\n        } else {\n            $db_rights[$row[$dbOrTableName]] = $row;\n        }\n        if ($type == 'database') {\n            // there are db specific rights for this user\n            // so we can drop this db rights\n            $db_rights[$row['Db']]['can_delete'] = true;\n        }\n    }\n    $GLOBALS['dbi']->freeResult($result);\n    return $db_rights;\n}\n\n/**\n * Get a HTML table for display user's tabel specific or database specific rights\n *\n * @param string $username username\n * @param string $hostname host name\n * @param string $type     database, table or routine\n * @param string $dbname   database name\n *\n * @return array $html_output\n */\nfunction PMA_getHtmlForAllTableSpecificRights(\n    $username, $hostname, $type, $dbname = ''\n) {\n    $uiData = array(\n        'database' => array(\n            'formId'       => 'database_specific_priv',\n            'subMenuLabel' => __('Database'),\n            'legend'       => __('Database-specific privileges'),\n            'typeLabel'    => __('Database'),\n        ),\n        'table' => array(\n            'formId'       => 'table_specific_priv',\n            'subMenuLabel' => __('Table'),\n            'legend'       => __('Table-specific privileges'),\n            'typeLabel'    => __('Table'),\n        ),\n        'routine' => array(\n            'formId'       => 'routine_specific_priv',\n            'subMenuLabel' => __('Routine'),\n            'legend'       => __('Routine-specific privileges'),\n            'typeLabel'    => __('Routine'),\n        ),\n    );\n\n    /**\n     * no db name given, so we want all privs for the given user\n     * db name was given, so we want all user specific rights for this db\n     */\n    $db_rights = PMA_getUserSpecificRights($username, $hostname, $type, $dbname);\n    ksort($db_rights);\n\n    $foundRows = array();\n    $privileges = array();\n    foreach ($db_rights as $row) {\n        $onePrivilege = array();\n\n        $paramTableName = '';\n        $paramRoutineName = '';\n\n        if ($type == 'database') {\n            $name = $row['Db'];\n            $onePrivilege['grant']        = $row['Grant_priv'] == 'Y';\n            $onePrivilege['tablePrivs']   = ! empty($row['Table_priv'])\n                || ! empty($row['Column_priv']);\n            $onePrivilege['privileges'] = join(',', PMA_extractPrivInfo($row, true));\n\n            $paramDbName = $row['Db'];\n\n        } elseif ($type == 'table') {\n            $name = $row['Table_name'];\n            $onePrivilege['grant'] = in_array(\n                'Grant',\n                explode(',', $row['Table_priv'])\n            );\n            $onePrivilege['columnPrivs']  = ! empty($row['Column_priv']);\n            $onePrivilege['privileges'] = join(',', PMA_extractPrivInfo($row, true));\n\n            $paramDbName = $dbname;\n            $paramTableName = $row['Table_name'];\n\n        } else { // routine\n            $name = $row['Routine_name'];\n            $onePrivilege['grant'] = in_array(\n                'Grant',\n                explode(',', $row['Proc_priv'])\n            );\n\n            $privs = array(\n                'Alter_routine_priv' => 'N',\n                'Execute_priv'       => 'N',\n                'Grant_priv'         => 'N',\n            );\n            foreach (explode(',', $row['Proc_priv']) as $priv) {\n                if ($priv == 'Alter Routine') {\n                    $privs['Alter_routine_priv'] = 'Y';\n                } else {\n                    $privs[$priv . '_priv'] = 'Y';\n                }\n            }\n            $onePrivilege['privileges'] = join(\n                ',',\n                PMA_extractPrivInfo($privs, true)\n            );\n\n            $paramDbName = $dbname;\n            $paramRoutineName = $row['Routine_name'];\n        }\n\n        $foundRows[] = $name;\n        $onePrivilege['name'] = $name;\n\n        $onePrivilege['editLink'] = '';\n        if ($GLOBALS['is_grantuser']) {\n            $onePrivilege['editLink'] = PMA_getUserLink(\n                'edit',\n                $username,\n                $hostname,\n                $paramDbName,\n                $paramTableName,\n                $paramRoutineName\n            );\n        }\n\n        $onePrivilege['revokeLink'] = '';\n        if ($type != 'database' || ! empty($row['can_delete'])) {\n            $onePrivilege['revokeLink'] = PMA_getUserLink(\n                'revoke',\n                $username,\n                $hostname,\n                $paramDbName,\n                $paramTableName,\n                $paramRoutineName\n            );\n        }\n\n        $privileges[] = $onePrivilege;\n    }\n\n    $data = $uiData[$type];\n    $data['privileges'] = $privileges;\n    $data['userName']   = $username;\n    $data['hostName']   = $hostname;\n    $data['database']   = $dbname;\n    $data['type']       = $type;\n\n    if ($type == 'database') {\n\n        // we already have the list of databases from libraries/common.inc.php\n        // via $pma = new PMA;\n        $pred_db_array = $GLOBALS['dblist']->databases;\n        $databases_to_skip = array('information_schema', 'performance_schema');\n\n        $databases = array();\n        if (! empty($pred_db_array)) {\n            foreach ($pred_db_array as $current_db) {\n                if (in_array($current_db, $databases_to_skip)) {\n                    continue;\n                }\n                $current_db_escaped = Util::escapeMysqlWildcards($current_db);\n                // cannot use array_diff() once, outside of the loop,\n                // because the list of databases has special characters\n                // already escaped in $foundRows,\n                // contrary to the output of SHOW DATABASES\n                if (! in_array($current_db_escaped, $foundRows)) {\n                    $databases[] = $current_db;\n                }\n            }\n        }\n        $data['databases'] = $databases;\n\n    } elseif ($type == 'table') {\n        $result = @$GLOBALS['dbi']->tryQuery(\n            \"SHOW TABLES FROM \" . Util::backquote($dbname),\n            null,\n            DatabaseInterface::QUERY_STORE\n        );\n\n        $tables = array();\n        if ($result) {\n            while ($row = $GLOBALS['dbi']->fetchRow($result)) {\n                if (! in_array($row[0], $foundRows)) {\n                    $tables[] = $row[0];\n                }\n            }\n            $GLOBALS['dbi']->freeResult($result);\n        }\n        $data['tables'] = $tables;\n\n    } else { // routine\n        $routineData = $GLOBALS['dbi']->getRoutines($dbname);\n\n        $routines = array();\n        foreach ($routineData as $routine) {\n            if (! in_array($routine['name'], $foundRows)) {\n                $routines[] = $routine['name'];\n            }\n        }\n        $data['routines'] = $routines;\n    }\n\n    $html_output = Template::get('privileges/privileges_summary')\n        ->render($data);\n\n    return $html_output;\n}\n\n/**\n * Get HTML for display the users overview\n * (if less than 50 users, display them immediately)\n *\n * @param array  $result        ran sql query\n * @param array  $db_rights     user's database rights array\n * @param string $pmaThemeImage a image source link\n * @param string $text_dir      text directory\n *\n * @return string HTML snippet\n */\nfunction PMA_getUsersOverview($result, $db_rights, $pmaThemeImage, $text_dir)\n{\n    while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n        $row['privs'] = PMA_extractPrivInfo($row, true);\n        $db_rights[$row['User']][$row['Host']] = $row;\n    }\n    @$GLOBALS['dbi']->freeResult($result);\n    $user_group_count = 0;\n    if ($GLOBALS['cfgRelation']['menuswork']) {\n        $user_group_count = PMA_getUserGroupCount();\n    }\n\n    $html_output\n        = '<form name=\"usersForm\" id=\"usersForm\" action=\"server_privileges.php\" '\n        . 'method=\"post\">' . \"\\n\"\n        . PMA_URL_getHiddenInputs('', '')\n        . '<table id=\"tableuserrights\" class=\"data\">' . \"\\n\"\n        . '<thead>' . \"\\n\"\n        . '<tr><th></th>' . \"\\n\"\n        . '<th>' . __('User name') . '</th>' . \"\\n\"\n        . '<th>' . __('Host name') . '</th>' . \"\\n\"\n        . '<th>' . __('Password') . '</th>' . \"\\n\"\n        . '<th>' . __('Global privileges') . ' '\n        . Util::showHint(\n            __('Note: MySQL privilege names are expressed in English.')\n        )\n        . '</th>' . \"\\n\";\n    if ($GLOBALS['cfgRelation']['menuswork']) {\n        $html_output .= '<th>' . __('User group') . '</th>' . \"\\n\";\n    }\n    $html_output .= '<th>' . __('Grant') . '</th>' . \"\\n\"\n        . '<th colspan=\"' . ($user_group_count > 0 ? '3' : '2') . '\">'\n        . __('Action') . '</th>' . \"\\n\"\n        . '</tr>' . \"\\n\"\n        . '</thead>' . \"\\n\";\n\n    $html_output .= '<tbody>' . \"\\n\";\n    $html_output .= PMA_getHtmlTableBodyForUserRights($db_rights);\n    $html_output .= '</tbody>'\n        . '</table>' . \"\\n\";\n\n    $html_output .= '<div class=\"floatleft\">'\n        . Util::getWithSelected($pmaThemeImage, $text_dir, \"usersForm\") . \"\\n\";\n\n    $html_output .= Util::getButtonOrImage(\n        'submit_mult', 'mult_submit', 'submit_mult_export',\n        __('Export'), 'b_tblexport.png', 'export'\n    );\n    $html_output .= '<input type=\"hidden\" name=\"initial\" '\n        . 'value=\"' . (isset($_GET['initial']) ? htmlspecialchars($_GET['initial']) : '') . '\" />';\n    $html_output .= '</div>'\n        . '<div class=\"clear_both\" style=\"clear:both\"></div>';\n\n    // add/delete user fieldset\n    $html_output .= PMA_getFieldsetForAddDeleteUser();\n    $html_output .= '</form>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get table body for 'tableuserrights' table in userform\n *\n * @param array $db_rights user's database rights array\n *\n * @return string HTML snippet\n */\nfunction PMA_getHtmlTableBodyForUserRights($db_rights)\n{\n    $cfgRelation = PMA_getRelationsParam();\n    if ($cfgRelation['menuswork']) {\n        $users_table = Util::backquote($cfgRelation['db'])\n            . \".\" . Util::backquote($cfgRelation['users']);\n        $sql_query = 'SELECT * FROM ' . $users_table;\n        $result = PMA_queryAsControlUser($sql_query, false);\n        $group_assignment = array();\n        if ($result) {\n            while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n                $group_assignment[$row['username']] = $row['usergroup'];\n            }\n        }\n        $GLOBALS['dbi']->freeResult($result);\n\n        $user_group_count = PMA_getUserGroupCount();\n    }\n\n    $odd_row = true;\n    $index_checkbox = 0;\n    $html_output = '';\n    foreach ($db_rights as $user) {\n        ksort($user);\n        foreach ($user as $host) {\n            $index_checkbox++;\n            $html_output .= '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">'\n                . \"\\n\";\n            $html_output .= '<td>'\n                . '<input type=\"checkbox\" class=\"checkall\" name=\"selected_usr[]\" '\n                . 'id=\"checkbox_sel_users_'\n                . $index_checkbox . '\" value=\"'\n                . htmlspecialchars($host['User'] . '&amp;#27;' . $host['Host'])\n                . '\"'\n                . ' /></td>' . \"\\n\";\n\n            $html_output .= '<td><label '\n                . 'for=\"checkbox_sel_users_' . $index_checkbox . '\">'\n                . (empty($host['User'])\n                    ? '<span style=\"color: #FF0000\">' . __('Any') . '</span>'\n                    : htmlspecialchars($host['User'])) . '</label></td>' . \"\\n\"\n                . '<td>' . htmlspecialchars($host['Host']) . '</td>' . \"\\n\";\n\n            $html_output .= '<td>';\n\n            $password_column = 'Password';\n\n            $check_plugin_query = \"SELECT * FROM `mysql`.`user` WHERE \"\n                . \"`User` = '\" . $host['User'] . \"' AND `Host` = '\"\n                . $host['Host'] . \"'\";\n            $res = $GLOBALS['dbi']->fetchSingleRow($check_plugin_query);\n\n            if ((isset($res['authentication_string'])\n                && ! empty($res['authentication_string']))\n                || (isset($res['Password'])\n                && ! empty($res['Password']))\n            ) {\n                $host[$password_column] = 'Y';\n            } else {\n                $host[$password_column] = 'N';\n            }\n\n            switch ($host[$password_column]) {\n            case 'Y':\n                $html_output .= __('Yes');\n                break;\n            case 'N':\n                $html_output .= '<span style=\"color: #FF0000\">' . __('No')\n                    . '</span>';\n                break;\n            // this happens if this is a definition not coming from mysql.user\n            default:\n                $html_output .= '--'; // in future version, replace by \"not present\"\n                break;\n            } // end switch\n\n            $html_output .= '</td>' . \"\\n\";\n\n            $html_output .= '<td><code>' . \"\\n\"\n                . '' . implode(',' . \"\\n\" . '            ', $host['privs']) . \"\\n\"\n                . '</code></td>' . \"\\n\";\n            if ($cfgRelation['menuswork']) {\n                $html_output .= '<td class=\"usrGroup\">' . \"\\n\"\n                    . (isset($group_assignment[$host['User']])\n                        ? $group_assignment[$host['User']]\n                        : ''\n                    )\n                    . '</td>' . \"\\n\";\n            }\n            $html_output .= '<td>'\n                . ($host['Grant_priv'] == 'Y' ? __('Yes') : __('No'))\n                . '</td>' . \"\\n\";\n\n            if ($GLOBALS['is_grantuser']) {\n                $html_output .= '<td class=\"center\">'\n                    . PMA_getUserLink(\n                        'edit',\n                        $host['User'],\n                        $host['Host']\n                    )\n                    . '</td>';\n            }\n            if ($cfgRelation['menuswork'] && $user_group_count > 0) {\n                if (empty($host['User'])) {\n                    $html_output .= '<td class=\"center\"></td>';\n                } else {\n                    $html_output .= '<td class=\"center\">'\n                        . PMA_getUserGroupEditLink($host['User'])\n                        . '</td>';\n                }\n            }\n            $html_output .= '<td class=\"center\">'\n                . PMA_getUserLink(\n                    'export',\n                    $host['User'],\n                    $host['Host'],\n                    '',\n                    '',\n                    '',\n                    isset($_GET['initial']) ? $_GET['initial'] : ''\n                )\n                . '</td>';\n            $html_output .= '</tr>';\n            $odd_row = ! $odd_row;\n        }\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML fieldset for Add/Delete user\n *\n * @return string HTML snippet\n */\nfunction PMA_getFieldsetForAddDeleteUser()\n{\n    $html_output = PMA_getAddUserHtmlFieldset();\n    $html_output .= '<fieldset id=\"fieldset_delete_user\">'\n        . '<legend>' . \"\\n\"\n        . Util::getIcon('b_usrdrop.png')\n        . '            ' . __('Remove selected user accounts') . '' . \"\\n\"\n        . '</legend>' . \"\\n\";\n\n    $html_output .= '<input type=\"hidden\" name=\"mode\" value=\"2\" />' . \"\\n\"\n        . '('\n        . __(\n            'Revoke all active privileges from the users '\n            . 'and delete them afterwards.'\n        )\n        . ')'\n        . '<br />' . \"\\n\";\n\n    $html_output .= '<input type=\"checkbox\" '\n        . 'title=\"'\n        . __('Drop the databases that have the same names as the users.')\n        . '\" '\n        . 'name=\"drop_users_db\" id=\"checkbox_drop_users_db\" />' . \"\\n\";\n\n    $html_output .= '<label for=\"checkbox_drop_users_db\" '\n        . 'title=\"'\n        . __('Drop the databases that have the same names as the users.')\n        . '\">' . \"\\n\"\n        . '            '\n        . __('Drop the databases that have the same names as the users.')\n        . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '</fieldset>' . \"\\n\";\n\n    $html_output .= '<fieldset id=\"fieldset_delete_user_footer\" class=\"tblFooters\">'\n        . \"\\n\";\n    $html_output .= '<input type=\"submit\" name=\"delete\" '\n        . 'value=\"' . __('Go') . '\" id=\"buttonGo\" '\n        . 'class=\"ajax\"/>' . \"\\n\";\n\n    $html_output .= '</fieldset>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get HTML for Displays the initials\n *\n * @param array $array_initials array for all initials, even non A-Z\n *\n * @return string HTML snippet\n */\nfunction PMA_getHtmlForInitials($array_initials)\n{\n    // initialize to false the letters A-Z\n    for ($letter_counter = 1; $letter_counter < 27; $letter_counter++) {\n        if (! isset($array_initials[mb_chr($letter_counter + 64)])) {\n            $array_initials[mb_chr($letter_counter + 64)] = false;\n        }\n    }\n\n    $initials = $GLOBALS['dbi']->tryQuery(\n        'SELECT DISTINCT UPPER(LEFT(`User`,1)) FROM `user`'\n        . ' ORDER BY UPPER(LEFT(`User`,1)) ASC',\n        null,\n        PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n    if ($initials) {\n        while (list($tmp_initial) = $GLOBALS['dbi']->fetchRow($initials)) {\n            $array_initials[$tmp_initial] = true;\n        }\n    }\n\n    // Display the initials, which can be any characters, not\n    // just letters. For letters A-Z, we add the non-used letters\n    // as greyed out.\n\n    uksort($array_initials, \"strnatcasecmp\");\n\n    $html_output = '<table id=\"initials_table\" cellspacing=\"5\">'\n        . '<tr>';\n    foreach ($array_initials as $tmp_initial => $initial_was_found) {\n        if ($tmp_initial === null) {\n            continue;\n        }\n\n        if (!$initial_was_found) {\n            $html_output .= '<td>' . $tmp_initial . '</td>';\n            continue;\n        }\n\n        $html_output .= '<td>'\n            . '<a class=\"ajax'\n            . ((isset($_REQUEST['initial'])\n                && $_REQUEST['initial'] === $tmp_initial\n                ) ? ' active' : '')\n            . '\" href=\"server_privileges.php'\n            . PMA_URL_getCommon(array('initial' => $tmp_initial))\n            . '\">' . $tmp_initial\n            . '</a>'\n            . '</td>' . \"\\n\";\n    }\n    $html_output .= '<td>'\n        . '<a href=\"server_privileges.php'\n        . PMA_URL_getCommon(array('showall' => 1))\n        . '\" class=\"nowrap\">' . __('Show all') . '</a></td>' . \"\\n\";\n    $html_output .= '</tr></table>';\n\n    return $html_output;\n}\n\n/**\n * Get the database rights array for Display user overview\n *\n * @return array  $db_rights    database rights array\n */\nfunction PMA_getDbRightsForUserOverview()\n{\n    // we also want users not in table `user` but in other table\n    $tables = $GLOBALS['dbi']->fetchResult('SHOW TABLES FROM `mysql`;');\n\n    $tablesSearchForUsers = array(\n        'user', 'db', 'tables_priv', 'columns_priv', 'procs_priv',\n    );\n\n    $db_rights_sqls = array();\n    foreach ($tablesSearchForUsers as $table_search_in) {\n        if (in_array($table_search_in, $tables)) {\n            $db_rights_sqls[] = 'SELECT DISTINCT `User`, `Host` FROM `mysql`.`'\n                . $table_search_in . '` '\n                . (isset($_GET['initial'])\n                ? PMA_rangeOfUsers($_GET['initial'])\n                : '');\n        }\n    }\n    $user_defaults = array(\n        'User'       => '',\n        'Host'       => '%',\n        'Password'   => '?',\n        'Grant_priv' => 'N',\n        'privs'      => array('USAGE'),\n    );\n\n    // for the rights\n    $db_rights = array();\n\n    $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'\n        . ' ORDER BY `User` ASC, `Host` ASC';\n\n    $db_rights_result = $GLOBALS['dbi']->query($db_rights_sql);\n\n    while ($db_rights_row = $GLOBALS['dbi']->fetchAssoc($db_rights_result)) {\n        $db_rights_row = array_merge($user_defaults, $db_rights_row);\n        $db_rights[$db_rights_row['User']][$db_rights_row['Host']]\n            = $db_rights_row;\n    }\n    $GLOBALS['dbi']->freeResult($db_rights_result);\n    ksort($db_rights);\n\n    return $db_rights;\n}\n\n/**\n * Delete user and get message and sql query for delete user in privileges\n *\n * @param array $queries queries\n *\n * @return array Message\n */\nfunction PMA_deleteUser($queries)\n{\n    $sql_query = '';\n    if (empty($queries)) {\n        $message = Message::error(__('No users selected for deleting!'));\n    } else {\n        if ($_REQUEST['mode'] == 3) {\n            $queries[] = '# ' . __('Reloading the privileges') . ' \u2026';\n            $queries[] = 'FLUSH PRIVILEGES;';\n        }\n        $drop_user_error = '';\n        foreach ($queries as $sql_query) {\n            if ($sql_query{0} != '#') {\n                if (! $GLOBALS['dbi']->tryQuery($sql_query, $GLOBALS['userlink'])) {\n                    $drop_user_error .= $GLOBALS['dbi']->getError() . \"\\n\";\n                }\n            }\n        }\n        // tracking sets this, causing the deleted db to be shown in navi\n        unset($GLOBALS['db']);\n\n        $sql_query = join(\"\\n\", $queries);\n        if (! empty($drop_user_error)) {\n            $message = Message::rawError($drop_user_error);\n        } else {\n            $message = Message::success(\n                __('The selected users have been deleted successfully.')\n            );\n        }\n    }\n    return array($sql_query, $message);\n}\n\n/**\n * Update the privileges and return the success or error message\n *\n * @param string $username  username\n * @param string $hostname  host name\n * @param string $tablename table name\n * @param string $dbname    database name\n * @param string $itemType  item type\n *\n * @return Message success message or error message for update\n */\nfunction PMA_updatePrivileges($username, $hostname, $tablename, $dbname, $itemType)\n{\n    $db_and_table = PMA_wildcardEscapeForGrant($dbname, $tablename);\n\n    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $itemType . ' ' . $db_and_table\n        . ' FROM \\'' . Util::sqlAddSlashes($username)\n        . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n\n    if (! isset($_POST['Grant_priv']) || $_POST['Grant_priv'] != 'Y') {\n        $sql_query1 = 'REVOKE GRANT OPTION ON ' . $itemType . ' ' . $db_and_table\n            . ' FROM \\'' . Util::sqlAddSlashes($username) . '\\'@\\''\n            . Util::sqlAddSlashes($hostname) . '\\';';\n    } else {\n        $sql_query1 = '';\n    }\n\n    // Should not do a GRANT USAGE for a table-specific privilege, it\n    // causes problems later (cannot revoke it)\n    if (! (mb_strlen($tablename)\n        && 'USAGE' == implode('', PMA_extractPrivInfo()))\n    ) {\n        $sql_query2 = 'GRANT ' . join(', ', PMA_extractPrivInfo())\n            . ' ON ' . $itemType . ' ' . $db_and_table\n            . ' TO \\'' . Util::sqlAddSlashes($username) . '\\'@\\''\n            . Util::sqlAddSlashes($hostname) . '\\'';\n\n        if (! mb_strlen($dbname)) {\n            // add REQUIRE clause\n            $sql_query2 .= PMA_getRequireClause();\n        }\n\n        if ((isset($_POST['Grant_priv']) && $_POST['Grant_priv'] == 'Y')\n            || (! mb_strlen($dbname)\n            && (isset($_POST['max_questions']) || isset($_POST['max_connections'])\n            || isset($_POST['max_updates'])\n            || isset($_POST['max_user_connections'])))\n        ) {\n            $sql_query2 .= PMA_getWithClauseForAddUserAndUpdatePrivs();\n        }\n        $sql_query2 .= ';';\n    }\n    if (! $GLOBALS['dbi']->tryQuery($sql_query0)) {\n        // This might fail when the executing user does not have\n        // ALL PRIVILEGES himself.\n        // See https://sourceforge.net/p/phpmyadmin/bugs/3270/\n        $sql_query0 = '';\n    }\n    if (! empty($sql_query1) && ! $GLOBALS['dbi']->tryQuery($sql_query1)) {\n        // this one may fail, too...\n        $sql_query1 = '';\n    }\n    if (! empty($sql_query2)) {\n        $GLOBALS['dbi']->query($sql_query2);\n    } else {\n        $sql_query2 = '';\n    }\n    $sql_query = $sql_query0 . ' ' . $sql_query1 . ' ' . $sql_query2;\n    $message = Message::success(__('You have updated the privileges for %s.'));\n    $message->addParam(\n        '\\'' . htmlspecialchars($username)\n        . '\\'@\\'' . htmlspecialchars($hostname) . '\\''\n    );\n\n    return array($sql_query, $message);\n}\n\n/**\n * Get List of information: Changes / copies a user\n *\n * @return array\n */\nfunction PMA_getDataForChangeOrCopyUser()\n{\n    $queries = null;\n    $password = null;\n\n    if (isset($_REQUEST['change_copy'])) {\n        $user_host_condition = ' WHERE `User` = '\n            . \"'\" . Util::sqlAddSlashes($_REQUEST['old_username']) . \"'\"\n            . ' AND `Host` = '\n            . \"'\" . Util::sqlAddSlashes($_REQUEST['old_hostname']) . \"';\";\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT * FROM `mysql`.`user` ' . $user_host_condition\n        );\n        if (! $row) {\n            $response = PMA\\libraries\\Response::getInstance();\n            $response->addHTML(\n                Message::notice(__('No user found.'))->getDisplay()\n            );\n            unset($_REQUEST['change_copy']);\n        } else {\n            extract($row, EXTR_OVERWRITE);\n            foreach ($row as $key => $value) {\n                $GLOBALS[$key] = $value;\n            }\n            // Recent MySQL versions have the field \"Password\" in mysql.user,\n            // so the previous extract creates $Password but this script\n            // uses $password\n            if (! isset($password) && isset($Password)) {\n                $password = $Password;\n            }\n            if (Util::getServerType() == 'MySQL'\n                && PMA_MYSQL_INT_VERSION >= 50606\n                && PMA_MYSQL_INT_VERSION < 50706\n                && ((isset($authentication_string)\n                && empty($password))\n                || (isset($plugin)\n                && $plugin == 'sha256_password'))\n            ) {\n                $password = $authentication_string;\n            }\n\n            if (Util::getServerType() == 'MariaDB'\n                && PMA_MYSQL_INT_VERSION >= 50500\n                && isset($authentication_string)\n                && empty($password)\n            ) {\n                $password = $authentication_string;\n            }\n\n            // Always use 'authentication_string' column\n            // for MySQL 5.7.6+ since it does not have\n            // the 'password' column at all\n            if (Util::getServerType() == 'MySQL'\n                && PMA_MYSQL_INT_VERSION >= 50706\n                && isset($authentication_string)\n            ) {\n                $password = $authentication_string;\n            }\n\n            $queries = array();\n        }\n    }\n\n    return array($queries, $password);\n}\n\n/**\n * Update Data for information: Deletes users\n *\n * @param array $queries queries array\n *\n * @return array\n */\nfunction PMA_getDataForDeleteUsers($queries)\n{\n    if (isset($_REQUEST['change_copy'])) {\n        $selected_usr = array(\n            $_REQUEST['old_username'] . '&amp;#27;' . $_REQUEST['old_hostname']\n        );\n    } else {\n        $selected_usr = $_REQUEST['selected_usr'];\n        $queries = array();\n    }\n\n    // this happens, was seen in https://reports.phpmyadmin.net/reports/view/17146\n    if (! is_array($selected_usr)) {\n        return array();\n    }\n\n    foreach ($selected_usr as $each_user) {\n        list($this_user, $this_host) = explode('&amp;#27;', $each_user);\n        $queries[] = '# '\n            . sprintf(\n                __('Deleting %s'),\n                '\\'' . $this_user . '\\'@\\'' . $this_host . '\\''\n            )\n            . ' ...';\n        $queries[] = 'DROP USER \\''\n            . Util::sqlAddSlashes($this_user)\n            . '\\'@\\'' . Util::sqlAddSlashes($this_host) . '\\';';\n        PMA_relationsCleanupUser($this_user);\n\n        if (isset($_REQUEST['drop_users_db'])) {\n            $queries[] = 'DROP DATABASE IF EXISTS '\n                . Util::backquote($this_user) . ';';\n            $GLOBALS['reload'] = true;\n        }\n    }\n    return $queries;\n}\n\n/**\n * update Message For Reload\n *\n * @return array\n */\nfunction PMA_updateMessageForReload()\n{\n    $message = null;\n    if (isset($_REQUEST['flush_privileges'])) {\n        $sql_query = 'FLUSH PRIVILEGES;';\n        $GLOBALS['dbi']->query($sql_query);\n        $message = Message::success(\n            __('The privileges were reloaded successfully.')\n        );\n    }\n\n    if (isset($_REQUEST['validate_username'])) {\n        $message = Message::success();\n    }\n\n    return $message;\n}\n\n/**\n * update Data For Queries from queries_for_display\n *\n * @param array      $queries             queries array\n * @param array|null $queries_for_display queries array for display\n *\n * @return null\n */\nfunction PMA_getDataForQueries($queries, $queries_for_display)\n{\n    $tmp_count = 0;\n    foreach ($queries as $sql_query) {\n        if ($sql_query{0} != '#') {\n            $GLOBALS['dbi']->query($sql_query);\n        }\n        // when there is a query containing a hidden password, take it\n        // instead of the real query sent\n        if (isset($queries_for_display[$tmp_count])) {\n            $queries[$tmp_count] = $queries_for_display[$tmp_count];\n        }\n        $tmp_count++;\n    }\n\n    return $queries;\n}\n\n/**\n * update Data for information: Adds a user\n *\n * @param string $dbname      db name\n * @param string $username    user name\n * @param string $hostname    host name\n * @param string $password    password\n * @param bool   $is_menuwork is_menuwork set?\n *\n * @return array\n */\nfunction PMA_addUser(\n    $dbname, $username, $hostname,\n    $password, $is_menuwork\n) {\n    $_add_user_error = false;\n    $message = null;\n    $queries = null;\n    $queries_for_display = null;\n    $sql_query = null;\n\n    if (!isset($_REQUEST['adduser_submit']) && !isset($_REQUEST['change_copy'])) {\n        return array(\n            $message, $queries, $queries_for_display, $sql_query, $_add_user_error\n        );\n    }\n\n    if (!isset($_REQUEST['adduser_submit']) && !isset($_REQUEST['change_copy'])) {\n        return array(\n            $message,\n            $queries,\n            $queries_for_display,\n            $sql_query,\n            $_add_user_error\n        );\n    }\n\n    $sql_query = '';\n    if ($_POST['pred_username'] == 'any') {\n        $username = '';\n    }\n    switch ($_POST['pred_hostname']) {\n    case 'any':\n        $hostname = '%';\n        break;\n    case 'localhost':\n        $hostname = 'localhost';\n        break;\n    case 'hosttable':\n        $hostname = '';\n        break;\n    case 'thishost':\n        $_user_name = $GLOBALS['dbi']->fetchValue('SELECT USER()');\n        $hostname = mb_substr(\n            $_user_name,\n            (mb_strrpos($_user_name, '@') + 1)\n        );\n        unset($_user_name);\n        break;\n    }\n    $sql = \"SELECT '1' FROM `mysql`.`user`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"';\";\n    if ($GLOBALS['dbi']->fetchValue($sql) == 1) {\n        $message = Message::error(__('The user %s already exists!'));\n        $message->addParam(\n            '[em]\\'' . $username . '\\'@\\'' . $hostname . '\\'[/em]'\n        );\n        $_REQUEST['adduser'] = true;\n        $_add_user_error = true;\n\n        return array(\n            $message,\n            $queries,\n            $queries_for_display,\n            $sql_query,\n            $_add_user_error\n        );\n    }\n\n    list(\n        $create_user_real, $create_user_show, $real_sql_query, $sql_query,\n        $password_set_real, $password_set_show\n    ) = PMA_getSqlQueriesForDisplayAndAddUser(\n        $username, $hostname, (isset($password) ? $password : '')\n    );\n\n    if (empty($_REQUEST['change_copy'])) {\n        $_error = false;\n\n        if (isset($create_user_real)) {\n            if (!$GLOBALS['dbi']->tryQuery($create_user_real)) {\n                $_error = true;\n            }\n            if (isset($password_set_real) && !empty($password_set_real)\n                && isset($_REQUEST['authentication_plugin'])\n            ) {\n                PMA_setProperPasswordHashing(\n                    $_REQUEST['authentication_plugin']\n                );\n                if ($GLOBALS['dbi']->tryQuery($password_set_real)) {\n                    $sql_query .= $password_set_show;\n                }\n            }\n            $sql_query = $create_user_show . $sql_query;\n        }\n\n        list($sql_query, $message) = PMA_addUserAndCreateDatabase(\n            $_error,\n            $real_sql_query,\n            $sql_query,\n            $username,\n            $hostname,\n            isset($dbname) ? $dbname : null\n        );\n        if (!empty($_REQUEST['userGroup']) && $is_menuwork) {\n            PMA_setUserGroup($GLOBALS['username'], $_REQUEST['userGroup']);\n        }\n\n        return array(\n            $message,\n            $queries,\n            $queries_for_display,\n            $sql_query,\n            $_add_user_error\n        );\n    }\n\n    if (isset($create_user_real)) {\n        $queries[] = $create_user_real;\n    }\n    $queries[] = $real_sql_query;\n\n    if (isset($password_set_real) && ! empty($password_set_real)\n        && isset($_REQUEST['authentication_plugin'])\n    ) {\n        PMA_setProperPasswordHashing(\n            $_REQUEST['authentication_plugin']\n        );\n\n        $queries[] = $password_set_real;\n    }\n    // we put the query containing the hidden password in\n    // $queries_for_display, at the same position occupied\n    // by the real query in $queries\n    $tmp_count = count($queries);\n    if (isset($create_user_real)) {\n        $queries_for_display[$tmp_count - 2] = $create_user_show;\n    }\n    if (isset($password_set_real) && ! empty($password_set_real)) {\n        $queries_for_display[$tmp_count - 3] = $create_user_show;\n        $queries_for_display[$tmp_count - 2] = $sql_query;\n        $queries_for_display[$tmp_count - 1] = $password_set_show;\n    } else {\n        $queries_for_display[$tmp_count - 1] = $sql_query;\n    }\n\n    return array(\n        $message, $queries, $queries_for_display, $sql_query, $_add_user_error\n    );\n}\n\n/**\n * Sets proper value of `old_passwords` according to\n * the authentication plugin selected\n *\n * @param string $auth_plugin authentication plugin selected\n *\n * @return void\n */\nfunction PMA_setProperPasswordHashing($auth_plugin)\n{\n    // Set the hashing method used by PASSWORD()\n    // to be of type depending upon $authentication_plugin\n    if ($auth_plugin == 'sha256_password') {\n        $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 2');\n    } else if ($auth_plugin == 'mysql_old_password') {\n        $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 1');\n    } else {\n        $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 0');\n    }\n}\n\n/**\n * Update DB information: DB, Table, isWildcard\n *\n * @return array\n */\nfunction PMA_getDataForDBInfo()\n{\n    $username = null;\n    $hostname = null;\n    $dbname = null;\n    $tablename = null;\n    $routinename = null;\n    $dbname_is_wildcard = null;\n\n    if (isset($_REQUEST['username'])) {\n        $username = $_REQUEST['username'];\n    }\n    if (isset($_REQUEST['hostname'])) {\n        $hostname = $_REQUEST['hostname'];\n    }\n    /**\n     * Checks if a dropdown box has been used for selecting a database / table\n     */\n    if (PMA_isValid($_REQUEST['pred_tablename'])) {\n        $tablename = $_REQUEST['pred_tablename'];\n    } elseif (PMA_isValid($_REQUEST['tablename'])) {\n        $tablename = $_REQUEST['tablename'];\n    } else {\n        unset($tablename);\n    }\n\n    if (PMA_isValid($_REQUEST['pred_routinename'])) {\n        $routinename = $_REQUEST['pred_routinename'];\n    } elseif (PMA_isValid($_REQUEST['routinename'])) {\n        $routinename = $_REQUEST['routinename'];\n    } else {\n        unset($routinename);\n    }\n\n    if (isset($_REQUEST['pred_dbname'])) {\n        $is_valid_pred_dbname = true;\n        foreach ($_REQUEST['pred_dbname'] as $key => $db_name) {\n            if (! PMA_isValid($db_name)) {\n                $is_valid_pred_dbname = false;\n                break;\n            }\n        }\n    }\n\n    if (isset($_REQUEST['dbname'])) {\n        $is_valid_dbname = true;\n        if (is_array($_REQUEST['dbname'])) {\n            foreach ($_REQUEST['dbname'] as $key => $db_name) {\n                if (! PMA_isValid($db_name)) {\n                    $is_valid_dbname = false;\n                    break;\n                }\n            }\n        } else {\n            if (! PMA_isValid($_REQUEST['dbname'])) {\n                $is_valid_dbname = false;\n            }\n        }\n    }\n\n    if (isset($is_valid_pred_dbname) && $is_valid_pred_dbname) {\n        $dbname = $_REQUEST['pred_dbname'];\n        // If dbname contains only one database.\n        if (count($dbname) == 1) {\n            $dbname = $dbname[0];\n        }\n    } elseif (isset($is_valid_dbname) && $is_valid_dbname) {\n        $dbname = $_REQUEST['dbname'];\n    } else {\n        unset($dbname);\n        unset($tablename);\n    }\n\n    if (isset($dbname)) {\n        if (is_array($dbname)) {\n            $db_and_table = $dbname;\n            foreach ($db_and_table as $key => $db_name) {\n                $db_and_table[$key] .= '.';\n            }\n        } else {\n            $unescaped_db = Util::unescapeMysqlWildcards($dbname);\n            $db_and_table = Util::backquote($unescaped_db) . '.';\n        }\n        if (isset($tablename)) {\n            $db_and_table .= Util::backquote($tablename);\n        } else {\n            if (is_array($db_and_table)) {\n                foreach ($db_and_table as $key => $db_name) {\n                    $db_and_table[$key] .= '*';\n                }\n            } else {\n                $db_and_table .= '*';\n            }\n        }\n    } else {\n        $db_and_table = '*.*';\n    }\n\n    // check if given $dbname is a wildcard or not\n    if (isset($dbname)) {\n        //if (preg_match('/\\\\\\\\(?:_|%)/i', $dbname)) {\n        if (! is_array($dbname) && preg_match('/(?<!\\\\\\\\)(?:_|%)/i', $dbname)) {\n            $dbname_is_wildcard = true;\n        } else {\n            $dbname_is_wildcard = false;\n        }\n    }\n\n    return array(\n        $username, $hostname,\n        isset($dbname)? $dbname : null,\n        isset($tablename)? $tablename : null,\n        isset($routinename) ? $routinename : null,\n        $db_and_table,\n        $dbname_is_wildcard,\n    );\n}\n\n/**\n * Get title and textarea for export user definition in Privileges\n *\n * @param string $username username\n * @param string $hostname host name\n *\n * @return array ($title, $export)\n */\nfunction PMA_getListForExportUserDefinition($username, $hostname)\n{\n    $export = '<textarea class=\"export\" cols=\"60\" rows=\"15\">';\n\n    if (isset($_REQUEST['selected_usr'])) {\n        // export privileges for selected users\n        $title = __('Privileges');\n\n        //For removing duplicate entries of users\n        $_REQUEST['selected_usr'] = array_unique($_REQUEST['selected_usr']);\n\n        foreach ($_REQUEST['selected_usr'] as $export_user) {\n            $export_username = mb_substr(\n                $export_user, 0, mb_strpos($export_user, '&')\n            );\n            $export_hostname = mb_substr(\n                $export_user, mb_strrpos($export_user, ';') + 1\n            );\n            $export .= '# '\n                . sprintf(\n                    __('Privileges for %s'),\n                    '`' . htmlspecialchars($export_username)\n                    . '`@`' . htmlspecialchars($export_hostname) . '`'\n                )\n                . \"\\n\\n\";\n            $export .= PMA_getGrants($export_username, $export_hostname) . \"\\n\";\n        }\n    } else {\n        // export privileges for a single user\n        $title = __('User') . ' `' . htmlspecialchars($username)\n            . '`@`' . htmlspecialchars($hostname) . '`';\n        $export .= PMA_getGrants($username, $hostname);\n    }\n    // remove trailing whitespace\n    $export = trim($export);\n\n    $export .= '</textarea>';\n\n    return array($title, $export);\n}\n\n/**\n * Get HTML for display Add userfieldset\n *\n * @param string $db    the database\n * @param string $table the table name\n *\n * @return string html output\n */\nfunction PMA_getAddUserHtmlFieldset($db = '', $table = '')\n{\n    if (!$GLOBALS['is_createuser']) {\n        return '';\n    }\n    $rel_params = array();\n    $url_params = array(\n        'adduser' => 1\n    );\n    if (!empty($db)) {\n        $url_params['dbname']\n            = $rel_params['checkprivsdb']\n                = $db;\n    }\n    if (!empty($table)) {\n        $url_params['tablename']\n            = $rel_params['checkprivstable']\n                = $table;\n    }\n\n    return '<fieldset id=\"fieldset_add_user\">' . \"\\n\"\n        . '<legend>' . _pgettext('Create new user', 'New') . '</legend>'\n        . '<a id=\"add_user_anchor\" href=\"server_privileges.php'\n        . PMA_URL_getCommon($url_params) . '\" '\n        . (!empty($rel_params)\n            ? ('rel=\"' . PMA_URL_getCommon($rel_params) . '\" ')\n            : '')\n        . '>' . \"\\n\"\n        . Util::getIcon('b_usradd.png')\n        . '            ' . __('Add user account') . '</a>' . \"\\n\"\n        . '</fieldset>' . \"\\n\";\n}\n\n/**\n * Get HTML header for display User's properties\n *\n * @param boolean $dbname_is_wildcard whether database name is wildcard or not\n * @param string  $url_dbname         url database name that urlencode() string\n * @param string  $dbname             database name\n * @param string  $username           username\n * @param string  $hostname           host name\n * @param string  $tablename          table name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlHeaderForUserProperties(\n    $dbname_is_wildcard, $url_dbname, $dbname, $username, $hostname, $tablename\n) {\n    $html_output = '<h2>' . \"\\n\"\n       . Util::getIcon('b_usredit.png')\n       . __('Edit privileges:') . ' '\n       . __('User account');\n\n    if (! empty($dbname)) {\n        $html_output .= ' <i><a class=\"edit_user_anchor\"'\n            . ' href=\"server_privileges.php'\n            . PMA_URL_getCommon(\n                array(\n                    'username' => $username,\n                    'hostname' => $hostname,\n                    'dbname' => '',\n                    'tablename' => '',\n                )\n            )\n            . '\">\\'' . htmlspecialchars($username)\n            . '\\'@\\'' . htmlspecialchars($hostname)\n            . '\\'</a></i>' . \"\\n\";\n\n        $html_output .= ' - ';\n        $html_output .= ($dbname_is_wildcard\n            || is_array($dbname) && count($dbname) > 1)\n            ? __('Databases') : __('Database');\n        if (! empty($_REQUEST['tablename'])) {\n            $html_output .= ' <i><a href=\"server_privileges.php'\n                . PMA_URL_getCommon(\n                    array(\n                        'username' => $username,\n                        'hostname' => $hostname,\n                        'dbname' => $url_dbname,\n                        'tablename' => '',\n                    )\n                )\n                . '\">' . htmlspecialchars($dbname)\n                . '</a></i>';\n\n            $html_output .= ' - ' . __('Table')\n                . ' <i>' . htmlspecialchars($tablename) . '</i>';\n        } elseif (! empty($_REQUEST['routinename'])) {\n            $html_output .= ' <i><a href=\"server_privileges.php'\n                . PMA_URL_getCommon(\n                    array(\n                        'username' => $username,\n                        'hostname' => $hostname,\n                        'dbname' => $url_dbname,\n                        'routinename' => '',\n                    )\n                )\n                . '\">' . htmlspecialchars($dbname)\n                . '</a></i>';\n\n            $html_output .= ' - ' . __('Routine')\n                . ' <i>' . htmlspecialchars($tablename) . '</i>';\n        } else {\n            if (! is_array($dbname)) {\n                $dbname = array($dbname);\n            }\n            $html_output .= ' <i>'\n                . htmlspecialchars(implode(', ', $dbname))\n                . '</i>';\n        }\n\n    } else {\n        $html_output .= ' <i>\\'' . htmlspecialchars($username)\n            . '\\'@\\'' . htmlspecialchars($hostname)\n            . '\\'</i>' . \"\\n\";\n\n    }\n    $html_output .= '</h2>' . \"\\n\";\n    $cur_user = htmlspecialchars($GLOBALS['dbi']->getCurrentUser());\n    $user = htmlspecialchars($username . '@' . $hostname);\n    // Add a short notice for the user\n    // to remind him that he is editing his own privileges\n    if ($user === $cur_user) {\n        $html_output .= Message::notice(\n            __(\n                'Note: You are attempting to edit privileges of the '\n                . 'user with which you are currently logged in.'\n            )\n        )->getDisplay();\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for display user overview page\n *\n * @param string $pmaThemeImage a image source link\n * @param string $text_dir      text directory\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForUserOverview($pmaThemeImage, $text_dir)\n{\n    $html_output = '<h2>' . \"\\n\"\n       . Util::getIcon('b_usrlist.png')\n       . __('User accounts overview') . \"\\n\"\n       . '</h2>' . \"\\n\";\n\n    $password_column = 'Password';\n    $server_type = Util::getServerType();\n    if (($server_type == 'MySQL' || $server_type == 'Percona Server')\n        && PMA_MYSQL_INT_VERSION >= 50706\n    ) {\n        $password_column = 'authentication_string';\n    }\n    // $sql_query is for the initial-filtered,\n    // $sql_query_all is for counting the total no. of users\n\n    $sql_query = $sql_query_all = 'SELECT *,' .\n        \" IF(`\" . $password_column . \"` = _latin1 '', 'N', 'Y') AS 'Password'\" .\n        ' FROM `mysql`.`user`';\n\n    $sql_query .= (isset($_REQUEST['initial'])\n        ? PMA_rangeOfUsers($_REQUEST['initial'])\n        : '');\n\n    $sql_query .= ' ORDER BY `User` ASC, `Host` ASC;';\n    $sql_query_all .= ' ;';\n\n    $res = $GLOBALS['dbi']->tryQuery(\n        $sql_query, null, PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n    $res_all = $GLOBALS['dbi']->tryQuery(\n        $sql_query_all, null, PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n\n    if (! $res) {\n        // the query failed! This may have two reasons:\n        // - the user does not have enough privileges\n        // - the privilege tables use a structure of an earlier version.\n        // so let's try a more simple query\n\n        $GLOBALS['dbi']->freeResult($res);\n        $GLOBALS['dbi']->freeResult($res_all);\n        $sql_query = 'SELECT * FROM `mysql`.`user`';\n        $res = $GLOBALS['dbi']->tryQuery(\n            $sql_query, null, PMA\\libraries\\DatabaseInterface::QUERY_STORE\n        );\n\n        if (! $res) {\n            $html_output .= PMA_getHtmlForViewUsersError();\n            $html_output .= PMA_getAddUserHtmlFieldset();\n        } else {\n            // This message is hardcoded because I will replace it by\n            // a automatic repair feature soon.\n            $raw = 'Your privilege table structure seems to be older than'\n                . ' this MySQL version!<br />'\n                . 'Please run the <code>mysql_upgrade</code> command'\n                . '(<code>mysql_fix_privilege_tables</code> on older systems)'\n                . ' that should be included in your MySQL server distribution'\n                . ' to solve this problem!';\n            $html_output .= Message::rawError($raw)->getDisplay();\n        }\n        $GLOBALS['dbi']->freeResult($res);\n    } else {\n        $db_rights = PMA_getDbRightsForUserOverview();\n        // for all initials, even non A-Z\n        $array_initials = array();\n\n        foreach ($db_rights as $right) {\n            foreach ($right as $account) {\n                if (empty($account['User']) && $account['Host'] == 'localhost') {\n                    $html_output .= Message::notice(\n                        __(\n                            'A user account allowing any user from localhost to '\n                            . 'connect is present. This will prevent other users '\n                            . 'from connecting if the host part of their account '\n                            . 'allows a connection from any (%) host.'\n                        )\n                        . Util::showMySQLDocu('problems-connecting')\n                    )->getDisplay();\n                    break 2;\n                }\n            }\n        }\n\n        /**\n         * Displays the initials\n         * Also not necessary if there is less than 20 privileges\n         */\n        if ($GLOBALS['dbi']->numRows($res_all) > 20) {\n            $html_output .= PMA_getHtmlForInitials($array_initials);\n        }\n\n        /**\n        * Display the user overview\n        * (if less than 50 users, display them immediately)\n        */\n        if (isset($_REQUEST['initial'])\n            || isset($_REQUEST['showall'])\n            || $GLOBALS['dbi']->numRows($res) < 50\n        ) {\n            $html_output .= PMA_getUsersOverview(\n                $res, $db_rights, $pmaThemeImage, $text_dir\n            );\n        } else {\n            $html_output .= PMA_getAddUserHtmlFieldset();\n        } // end if (display overview)\n\n        if (! $GLOBALS['is_ajax_request']\n            || ! empty($_REQUEST['ajax_page_request'])\n        ) {\n            if ($GLOBALS['is_reload_priv']) {\n                $flushnote = new Message(\n                    __(\n                        'Note: phpMyAdmin gets the users\\' privileges directly '\n                        . 'from MySQL\\'s privilege tables. The content of these '\n                        . 'tables may differ from the privileges the server uses, '\n                        . 'if they have been changed manually. In this case, '\n                        . 'you should %sreload the privileges%s before you continue.'\n                    ),\n                    Message::NOTICE\n                );\n                $flushLink = '<a href=\"server_privileges.php'\n                    . PMA_URL_getCommon(array('flush_privileges' => 1))\n                    . '\" id=\"reload_privileges_anchor\">';\n                $flushnote->addParam(\n                    $flushLink,\n                    false\n                );\n                $flushnote->addParam('</a>', false);\n            } else {\n                $flushnote = new Message(\n                    __(\n                        'Note: phpMyAdmin gets the users\\' privileges directly '\n                        . 'from MySQL\\'s privilege tables. The content of these '\n                        . 'tables may differ from the privileges the server uses, '\n                        . 'if they have been changed manually. In this case, '\n                        . 'the privileges have to be reloaded but currently, you '\n                        . 'don\\'t have the RELOAD privilege.'\n                    )\n                    . Util::showMySQLDocu(\n                        'privileges-provided',\n                        false,\n                        'priv_reload'\n                    ),\n                    Message::NOTICE\n                );\n            }\n            $html_output .= $flushnote->getDisplay();\n        }\n    }\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for display user properties\n *\n * @param boolean $dbname_is_wildcard whether database name is wildcard or not\n * @param string  $url_dbname         url database name that urlencode() string\n * @param string  $username           username\n * @param string  $hostname           host name\n * @param string  $dbname             database name\n * @param string  $tablename          table name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForUserProperties($dbname_is_wildcard,$url_dbname,\n    $username, $hostname, $dbname, $tablename\n) {\n    $html_output  = '<div id=\"edit_user_dialog\">';\n    $html_output .= PMA_getHtmlHeaderForUserProperties(\n        $dbname_is_wildcard, $url_dbname, $dbname, $username, $hostname, $tablename\n    );\n\n    $sql = \"SELECT '1' FROM `mysql`.`user`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"';\";\n\n    $user_does_not_exists = (bool) ! $GLOBALS['dbi']->fetchValue($sql);\n\n    if ($user_does_not_exists) {\n        $html_output .= Message::error(\n            __('The selected user was not found in the privilege table.')\n        )->getDisplay();\n        $html_output .= PMA_getHtmlForLoginInformationFields();\n    }\n\n    $_params = array(\n        'username' => $username,\n        'hostname' => $hostname,\n    );\n    if (! is_array($dbname) && mb_strlen($dbname)) {\n        $_params['dbname'] = $dbname;\n        if (mb_strlen($tablename)) {\n            $_params['tablename'] = $tablename;\n        }\n    } else {\n        $_params['dbname'] = $dbname;\n    }\n\n    $html_output .= '<form class=\"submenu-item\" name=\"usersForm\" '\n        . 'id=\"addUsersForm\" action=\"server_privileges.php\" method=\"post\">' . \"\\n\";\n    $html_output .= PMA_URL_getHiddenInputs($_params);\n    $html_output .= PMA_getHtmlToDisplayPrivilegesTable(\n        // If $dbname is an array, pass any one db as all have same privs.\n        PMA_ifSetOr($dbname, (is_array($dbname)) ? $dbname[0] : '*', 'length'),\n        PMA_ifSetOr($tablename, '*', 'length')\n    );\n\n    $html_output .= '</form>' . \"\\n\";\n\n    if (! is_array($dbname) && ! mb_strlen($tablename)\n        && empty($dbname_is_wildcard)\n    ) {\n        // no table name was given, display all table specific rights\n        // but only if $dbname contains no wildcards\n        if (! mb_strlen($dbname)) {\n            $html_output .= PMA_getHtmlForAllTableSpecificRights(\n                $username, $hostname, 'database'\n            );\n        } else {\n            // unescape wildcards in dbname at table level\n            $unescaped_db = Util::unescapeMysqlWildcards($dbname);\n\n            $html_output .= PMA_getHtmlForAllTableSpecificRights(\n                $username, $hostname, 'table', $unescaped_db\n            );\n            $html_output .= PMA_getHtmlForAllTableSpecificRights(\n                $username, $hostname, 'routine', $unescaped_db\n            );\n        }\n    }\n\n    // Provide a line with links to the relevant database and table\n    if (! is_array($dbname) && mb_strlen($dbname)\n        && empty($dbname_is_wildcard)\n    ) {\n        $html_output .= PMA_getLinkToDbAndTable($url_dbname, $dbname, $tablename);\n\n    }\n\n    if (! is_array($dbname) && ! mb_strlen($dbname)\n        && ! $user_does_not_exists\n    ) {\n        //change login information\n        $html_output .= PMA_getHtmlForChangePassword(\n            'edit_other',\n            $username,\n            $hostname\n        );\n        $html_output .= PMA_getChangeLoginInformationHtmlForm($username, $hostname);\n    }\n    $html_output .= '</div>';\n\n    return $html_output;\n}\n\n/**\n * Get queries for Table privileges to change or copy user\n *\n * @param string $user_host_condition user host condition to\n *                                    select relevant table privileges\n * @param array  $queries             queries array\n * @param string $username            username\n * @param string $hostname            host name\n *\n * @return array  $queries\n */\nfunction PMA_getTablePrivsQueriesForChangeOrCopyUser($user_host_condition,\n    $queries, $username, $hostname\n) {\n    $res = $GLOBALS['dbi']->query(\n        'SELECT `Db`, `Table_name`, `Table_priv` FROM `mysql`.`tables_priv`'\n        . $user_host_condition,\n        $GLOBALS['userlink'],\n        PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n    while ($row = $GLOBALS['dbi']->fetchAssoc($res)) {\n\n        $res2 = $GLOBALS['dbi']->query(\n            'SELECT `Column_name`, `Column_priv`'\n            . ' FROM `mysql`.`columns_priv`'\n            . ' WHERE `User`'\n            . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_username']) . \"'\"\n            . ' AND `Host`'\n            . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_username']) . '\\''\n            . ' AND `Db`'\n            . ' = \\'' . Util::sqlAddSlashes($row['Db']) . \"'\"\n            . ' AND `Table_name`'\n            . ' = \\'' . Util::sqlAddSlashes($row['Table_name']) . \"'\"\n            . ';',\n            null,\n            PMA\\libraries\\DatabaseInterface::QUERY_STORE\n        );\n\n        $tmp_privs1 = PMA_extractPrivInfo($row);\n        $tmp_privs2 = array(\n            'Select' => array(),\n            'Insert' => array(),\n            'Update' => array(),\n            'References' => array()\n        );\n\n        while ($row2 = $GLOBALS['dbi']->fetchAssoc($res2)) {\n            $tmp_array = explode(',', $row2['Column_priv']);\n            if (in_array('Select', $tmp_array)) {\n                $tmp_privs2['Select'][] = $row2['Column_name'];\n            }\n            if (in_array('Insert', $tmp_array)) {\n                $tmp_privs2['Insert'][] = $row2['Column_name'];\n            }\n            if (in_array('Update', $tmp_array)) {\n                $tmp_privs2['Update'][] = $row2['Column_name'];\n            }\n            if (in_array('References', $tmp_array)) {\n                $tmp_privs2['References'][] = $row2['Column_name'];\n            }\n        }\n        if (count($tmp_privs2['Select']) > 0 && ! in_array('SELECT', $tmp_privs1)) {\n            $tmp_privs1[] = 'SELECT (`' . join('`, `', $tmp_privs2['Select']) . '`)';\n        }\n        if (count($tmp_privs2['Insert']) > 0 && ! in_array('INSERT', $tmp_privs1)) {\n            $tmp_privs1[] = 'INSERT (`' . join('`, `', $tmp_privs2['Insert']) . '`)';\n        }\n        if (count($tmp_privs2['Update']) > 0 && ! in_array('UPDATE', $tmp_privs1)) {\n            $tmp_privs1[] = 'UPDATE (`' . join('`, `', $tmp_privs2['Update']) . '`)';\n        }\n        if (count($tmp_privs2['References']) > 0\n            && ! in_array('REFERENCES', $tmp_privs1)\n        ) {\n            $tmp_privs1[]\n                = 'REFERENCES (`' . join('`, `', $tmp_privs2['References']) . '`)';\n        }\n\n        $queries[] = 'GRANT ' . join(', ', $tmp_privs1)\n            . ' ON ' . Util::backquote($row['Db']) . '.'\n            . Util::backquote($row['Table_name'])\n            . ' TO \\'' . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\''\n            . (in_array('Grant', explode(',', $row['Table_priv']))\n            ? ' WITH GRANT OPTION;'\n            : ';');\n    }\n    return $queries;\n}\n\n/**\n * Get queries for database specific privileges for change or copy user\n *\n * @param array  $queries  queries array with string\n * @param string $username username\n * @param string $hostname host name\n *\n * @return array $queries\n */\nfunction PMA_getDbSpecificPrivsQueriesForChangeOrCopyUser(\n    $queries, $username, $hostname\n) {\n    $user_host_condition = ' WHERE `User`'\n        . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_username']) . \"'\"\n        . ' AND `Host`'\n        . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_hostname']) . '\\';';\n\n    $res = $GLOBALS['dbi']->query(\n        'SELECT * FROM `mysql`.`db`' . $user_host_condition\n    );\n\n    while ($row = $GLOBALS['dbi']->fetchAssoc($res)) {\n        $queries[] = 'GRANT ' . join(', ', PMA_extractPrivInfo($row))\n            . ' ON ' . Util::backquote($row['Db']) . '.*'\n            . ' TO \\'' . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\''\n            . ($row['Grant_priv'] == 'Y' ? ' WITH GRANT OPTION;' : ';');\n    }\n    $GLOBALS['dbi']->freeResult($res);\n\n    $queries = PMA_getTablePrivsQueriesForChangeOrCopyUser(\n        $user_host_condition, $queries, $username, $hostname\n    );\n\n    return $queries;\n}\n\n/**\n * Prepares queries for adding users and\n * also create database and return query and message\n *\n * @param boolean $_error         whether user create or not\n * @param string  $real_sql_query SQL query for add a user\n * @param string  $sql_query      SQL query to be displayed\n * @param string  $username       username\n * @param string  $hostname       host name\n * @param string  $dbname         database name\n *\n * @return array  $sql_query, $message\n */\nfunction PMA_addUserAndCreateDatabase($_error, $real_sql_query, $sql_query,\n    $username, $hostname, $dbname\n) {\n    if ($_error || (!empty($real_sql_query)\n        && !$GLOBALS['dbi']->tryQuery($real_sql_query))\n    ) {\n        $_REQUEST['createdb-1'] = $_REQUEST['createdb-2']\n            = $_REQUEST['createdb-3'] = null;\n        $message = Message::rawError($GLOBALS['dbi']->getError());\n    } else {\n        $message = Message::success(__('You have added a new user.'));\n    }\n\n    if (isset($_REQUEST['createdb-1'])) {\n        // Create database with same name and grant all privileges\n        $q = 'CREATE DATABASE IF NOT EXISTS '\n            . Util::backquote(\n                Util::sqlAddSlashes($username)\n            ) . ';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n\n        /**\n         * Reload the navigation\n         */\n        $GLOBALS['reload'] = true;\n        $GLOBALS['db'] = $username;\n\n        $q = 'GRANT ALL PRIVILEGES ON '\n            . Util::backquote(\n                Util::escapeMysqlWildcards(\n                    Util::sqlAddSlashes($username)\n                )\n            ) . '.* TO \\''\n            . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n    }\n\n    if (isset($_REQUEST['createdb-2'])) {\n        // Grant all privileges on wildcard name (username\\_%)\n        $q = 'GRANT ALL PRIVILEGES ON '\n            . Util::backquote(\n                Util::sqlAddSlashes($username) . '\\_%'\n            ) . '.* TO \\''\n            . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n    }\n\n    if (isset($_REQUEST['createdb-3'])) {\n        // Grant all privileges on the specified database to the new user\n        $q = 'GRANT ALL PRIVILEGES ON '\n        . Util::backquote(\n            Util::sqlAddSlashes($dbname)\n        ) . '.* TO \\''\n        . Util::sqlAddSlashes($username)\n        . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n    }\n    return array($sql_query, $message);\n}\n\n/**\n * Get the hashed string for password\n *\n * @param string $password password\n *\n * @return string $hashedPassword\n */\nfunction PMA_getHashedPassword($password)\n{\n    $result = $GLOBALS['dbi']->fetchSingleRow(\n        \"SELECT PASSWORD('\" . $password . \"') AS `password`;\"\n    );\n\n    $hashedPassword = $result['password'];\n\n    return $hashedPassword;\n}\n\n\n/**\n * Get SQL queries for Display and Add user\n *\n * @param string $username username\n * @param string $hostname host name\n * @param string $password password\n *\n * @return array ($create_user_real, $create_user_show,$real_sql_query, $sql_query\n *                $password_set_real, $password_set_show)\n */\nfunction PMA_getSqlQueriesForDisplayAndAddUser($username, $hostname, $password)\n{\n    $slashedUsername = Util::sqlAddSlashes($username);\n    $slashedHostname = Util::sqlAddSlashes($hostname);\n    $slashedPassword = Util::sqlAddSlashes($password);\n    $serverType = Util::getServerType();\n\n    $create_user_stmt = sprintf(\n        'CREATE USER \\'%s\\'@\\'%s\\'',\n        $slashedUsername,\n        $slashedHostname\n    );\n\n    // See https://github.com/phpmyadmin/phpmyadmin/pull/11560#issuecomment-147158219\n    // for details regarding details of syntax usage for various versions\n\n    // 'IDENTIFIED WITH auth_plugin'\n    // is supported by MySQL 5.5.7+\n    if (($serverType == 'MySQL' || $serverType == 'Percona Server')\n        && PMA_MYSQL_INT_VERSION >= 50507\n        && isset($_REQUEST['authentication_plugin'])\n    ) {\n        $create_user_stmt .= ' IDENTIFIED WITH '\n            . $_REQUEST['authentication_plugin'];\n    }\n\n    // 'IDENTIFIED VIA auth_plugin'\n    // is supported by MariaDB 5.2+\n    if ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200\n        && isset($_REQUEST['authentication_plugin'])\n    ) {\n        $create_user_stmt .= ' IDENTIFIED VIA '\n            . $_REQUEST['authentication_plugin'];\n    }\n\n    $create_user_real = $create_user_show = $create_user_stmt;\n\n    $password_set_stmt = 'SET PASSWORD FOR \\'%s\\'@\\'%s\\' = \\'%s\\'';\n    $password_set_show = sprintf(\n        $password_set_stmt,\n        $slashedUsername,\n        $slashedHostname,\n        '***'\n    );\n\n    $sql_query_stmt = sprintf(\n        'GRANT %s ON *.* TO \\'%s\\'@\\'%s\\'',\n        join(', ', PMA_extractPrivInfo()),\n        $slashedUsername,\n        $slashedHostname\n    );\n    $real_sql_query = $sql_query = $sql_query_stmt;\n\n    // Set the proper hashing method\n    if (isset($_REQUEST['authentication_plugin'])) {\n        PMA_setProperPasswordHashing(\n            $_REQUEST['authentication_plugin']\n        );\n    }\n    // Use 'CREATE USER ... WITH ... AS ..' syntax for\n    // newer MySQL versions\n    // and 'CREATE USER ... USING .. VIA ..' syntax for\n    // newer MariaDB versions\n    if ((($serverType == 'MySQL' || $serverType == 'Percona Server')\n        && PMA_MYSQL_INT_VERSION >= 50706)\n        || ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200)\n    ) {\n        $password_set_real = null;\n\n        // Required for binding '%' with '%s'\n        $create_user_stmt = str_replace(\n            '%', '%%', $create_user_stmt\n        );\n\n        // MariaDB uses 'USING' whereas MySQL uses 'AS'\n        if ($serverType == 'MariaDB') {\n            $create_user_stmt .= ' USING \\'%s\\'';\n        } else {\n            $create_user_stmt .= ' AS \\'%s\\'';\n        }\n\n        if ($_POST['pred_password'] == 'keep') {\n            $create_user_real = sprintf(\n                $create_user_stmt,\n                $slashedPassword\n            );\n            $create_user_show = sprintf(\n                $create_user_stmt,\n                '***'\n            );\n        } else if ($_POST['pred_password'] == 'none') {\n            $create_user_real = sprintf(\n                $create_user_stmt,\n                null\n            );\n            $create_user_show = sprintf(\n                $create_user_stmt,\n                '***'\n            );\n        } else {\n            $hashedPassword = PMA_getHashedPassword($_POST['pma_pw']);\n            $create_user_real = sprintf(\n                $create_user_stmt,\n                $hashedPassword\n            );\n            $create_user_show = sprintf(\n                $create_user_stmt,\n                '***'\n            );\n        }\n    } else {\n        // Use 'SET PASSWORD' syntax for pre-5.7.6 MySQL versions\n        // and pre-5.2.0 MariaDB versions\n        if ($_POST['pred_password'] == 'keep') {\n            $password_set_real = sprintf(\n                $password_set_stmt,\n                $slashedUsername,\n                $slashedHostname,\n                $slashedPassword\n            );\n        } else if ($_POST['pred_password'] == 'none') {\n            $password_set_real = sprintf(\n                $password_set_stmt,\n                $slashedUsername,\n                $slashedHostname,\n                null\n            );\n        } else {\n            $hashedPassword = PMA_getHashedPassword($_POST['pma_pw']);\n            $password_set_real = sprintf(\n                $password_set_stmt,\n                $slashedUsername,\n                $slashedHostname,\n                $hashedPassword\n            );\n        }\n    }\n\n    // add REQUIRE clause\n    $require_clause = PMA_getRequireClause();\n    $real_sql_query .= $require_clause;\n    $sql_query .= $require_clause;\n\n    $with_clause = PMA_getWithClauseForAddUserAndUpdatePrivs();\n    $real_sql_query .= $with_clause;\n    $sql_query .= $with_clause;\n\n    if (isset($create_user_real)) {\n        $create_user_real .= ';';\n        $create_user_show .= ';';\n    }\n    $real_sql_query .= ';';\n    $sql_query .= ';';\n    // No Global GRANT_OPTION privilege\n    if (!$GLOBALS['is_grantuser']) {\n        $real_sql_query = '';\n        $sql_query = '';\n    }\n\n    // Use 'SET PASSWORD' for pre-5.7.6 MySQL versions\n    // and pre-5.2.0 MariaDB\n    if (($serverType == 'MySQL'\n        && PMA_MYSQL_INT_VERSION >= 50706)\n        || ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200)\n    ) {\n        $password_set_real = null;\n        $password_set_show = null;\n    } else {\n        $password_set_real .= \";\";\n        $password_set_show .= \";\";\n    }\n\n    return array($create_user_real,\n        $create_user_show,\n        $real_sql_query,\n        $sql_query,\n        $password_set_real,\n        $password_set_show\n    );\n}\n\n/**\n * Returns the type ('PROCEDURE' or 'FUNCTION') of the routine\n *\n * @param string $dbname      database\n * @param string $routineName routine\n *\n * @return string type\n */\nfunction PMA_getRoutineType($dbname, $routineName)\n{\n    $routineData = $GLOBALS['dbi']->getRoutines($dbname);\n\n    foreach ($routineData as $routine) {\n        if ($routine['name'] === $routineName) {\n            return $routine['type'];\n        }\n    }\n    return '';\n}\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * set of functions with the Privileges section in pma\n *\n * @package PhpMyAdmin\n */\nuse PMA\\libraries\\DatabaseInterface;\nuse PMA\\libraries\\Message;\nuse PMA\\libraries\\Template;\nuse PMA\\libraries\\Util;\n\n/**\n * Get Html for User Group Dialog\n *\n * @param string $username     username\n * @param bool   $is_menuswork Is menuswork set in configuration\n *\n * @return string html\n */\nfunction PMA_getHtmlForUserGroupDialog($username, $is_menuswork)\n{\n    $html = '';\n    if (! empty($_REQUEST['edit_user_group_dialog']) && $is_menuswork) {\n        $dialog = PMA_getHtmlToChooseUserGroup($username);\n        $response = PMA\\libraries\\Response::getInstance();\n        if ($GLOBALS['is_ajax_request']) {\n            $response->addJSON('message', $dialog);\n            exit;\n        } else {\n            $html .= $dialog;\n        }\n    }\n\n    return $html;\n}\n\n/**\n * Escapes wildcard in a database+table specification\n * before using it in a GRANT statement.\n *\n * Escaping a wildcard character in a GRANT is only accepted at the global\n * or database level, not at table level; this is why I remove\n * the escaping character. Internally, in mysql.tables_priv.Db there are\n * no escaping (for example test_db) but in mysql.db you'll see test\\_db\n * for a db-specific privilege.\n *\n * @param string $dbname    Database name\n * @param string $tablename Table name\n *\n * @return string the escaped (if necessary) database.table\n */\nfunction PMA_wildcardEscapeForGrant($dbname, $tablename)\n{\n    if (!mb_strlen($dbname)) {\n        $db_and_table = '*.*';\n    } else {\n        if (mb_strlen($tablename)) {\n            $db_and_table = Util::backquote(\n                Util::unescapeMysqlWildcards($dbname)\n            )\n            . '.' . Util::backquote($tablename);\n        } else {\n            $db_and_table = Util::backquote($dbname) . '.*';\n        }\n    }\n    return $db_and_table;\n}\n\n/**\n * Generates a condition on the user name\n *\n * @param string $initial the user's initial\n *\n * @return string   the generated condition\n */\nfunction PMA_rangeOfUsers($initial = '')\n{\n    // strtolower() is used because the User field\n    // might be BINARY, so LIKE would be case sensitive\n    if ($initial === null || $initial === '') {\n        return '';\n    }\n\n    $ret = \" WHERE `User` LIKE '\"\n        . Util::sqlAddSlashes($initial, true) . \"%'\"\n        . \" OR `User` LIKE '\"\n        . Util::sqlAddSlashes(mb_strtolower($initial), true)\n        . \"%'\";\n    return $ret;\n} // end function\n\n/**\n * Formats privilege name for a display\n *\n * @param array   $privilege Privilege information\n * @param boolean $html      Whether to use HTML\n *\n * @return string\n */\nfunction PMA_formatPrivilege($privilege, $html)\n{\n    if ($html) {\n        return '<dfn title=\"' . $privilege[2] . '\">'\n            . $privilege[1] . '</dfn>';\n    } else {\n        return $privilege[1];\n    }\n}\n\n/**\n * Parses privileges into an array, it modifies the array\n *\n * @param array &$row Results row from\n *\n * @return void\n */\nfunction PMA_fillInTablePrivileges(&$row)\n{\n    $row1 = $GLOBALS['dbi']->fetchSingleRow(\n        'SHOW COLUMNS FROM `mysql`.`tables_priv` LIKE \\'Table_priv\\';',\n        'ASSOC', $GLOBALS['userlink']\n    );\n    // note: in MySQL 5.0.3 we get \"Create View', 'Show view';\n    // the View for Create is spelled with uppercase V\n    // the view for Show is spelled with lowercase v\n    // and there is a space between the words\n\n    $av_grants = explode(\n        '\\',\\'',\n        mb_substr(\n            $row1['Type'],\n            mb_strpos($row1['Type'], '(') + 2,\n            mb_strpos($row1['Type'], ')')\n            - mb_strpos($row1['Type'], '(') - 3\n        )\n    );\n\n    $users_grants = explode(',', $row['Table_priv']);\n\n    foreach ($av_grants as $current_grant) {\n        $row[$current_grant . '_priv']\n            = in_array($current_grant, $users_grants) ? 'Y' : 'N';\n    }\n    unset($row['Table_priv']);\n}\n\n\n/**\n * Extracts the privilege information of a priv table row\n *\n * @param array|null $row        the row\n * @param boolean    $enableHTML add <dfn> tag with tooltips\n * @param boolean    $tablePrivs whether row contains table privileges\n *\n * @global  resource $user_link the database connection\n *\n * @return array\n */\nfunction PMA_extractPrivInfo($row = null, $enableHTML = false, $tablePrivs = false)\n{\n    if ($tablePrivs) {\n        $grants = PMA_getTableGrantsArray();\n    } else {\n        $grants = PMA_getGrantsArray();\n    }\n\n    if (! is_null($row) && isset($row['Table_priv'])) {\n        PMA_fillInTablePrivileges($row);\n    }\n\n    $privs = array();\n    $allPrivileges = true;\n    foreach ($grants as $current_grant) {\n        if ((! is_null($row) && isset($row[$current_grant[0]]))\n            || (is_null($row) && isset($GLOBALS[$current_grant[0]]))\n        ) {\n            if ((! is_null($row) && $row[$current_grant[0]] == 'Y')\n                || (is_null($row)\n                && ($GLOBALS[$current_grant[0]] == 'Y'\n                || (is_array($GLOBALS[$current_grant[0]])\n                && count($GLOBALS[$current_grant[0]]) == $_REQUEST['column_count']\n                && empty($GLOBALS[$current_grant[0] . '_none']))))\n            ) {\n                $privs[] = PMA_formatPrivilege($current_grant, $enableHTML);\n            } elseif (! empty($GLOBALS[$current_grant[0]])\n                && is_array($GLOBALS[$current_grant[0]])\n                && empty($GLOBALS[$current_grant[0] . '_none'])\n            ) {\n                $privs[] = PMA_formatPrivilege($current_grant, $enableHTML)\n                    . ' (`' . join('`, `', $GLOBALS[$current_grant[0]]) . '`)';\n            } else {\n                $allPrivileges = false;\n            }\n        }\n    }\n    if (empty($privs)) {\n        if ($enableHTML) {\n            $privs[] = '<dfn title=\"' . __('No privileges.') . '\">USAGE</dfn>';\n        } else {\n            $privs[] = 'USAGE';\n        }\n    } elseif ($allPrivileges\n        && (! isset($_POST['grant_count']) || count($privs) == $_POST['grant_count'])\n    ) {\n        if ($enableHTML) {\n            $privs = array('<dfn title=\"'\n                . __('Includes all privileges except GRANT.')\n                . '\">ALL PRIVILEGES</dfn>'\n            );\n        } else {\n            $privs = array('ALL PRIVILEGES');\n        }\n    }\n    return $privs;\n} // end of the 'PMA_extractPrivInfo()' function\n\n/**\n * Returns an array of table grants and their descriptions\n *\n * @return array array of table grants\n */\nfunction PMA_getTableGrantsArray()\n{\n    return array(\n        array(\n            'Delete',\n            'DELETE',\n            $GLOBALS['strPrivDescDelete']\n        ),\n        array(\n            'Create',\n            'CREATE',\n            $GLOBALS['strPrivDescCreateTbl']\n        ),\n        array(\n            'Drop',\n            'DROP',\n            $GLOBALS['strPrivDescDropTbl']\n        ),\n        array(\n            'Index',\n            'INDEX',\n            $GLOBALS['strPrivDescIndex']\n        ),\n        array(\n            'Alter',\n            'ALTER',\n            $GLOBALS['strPrivDescAlter']\n        ),\n        array(\n            'Create View',\n            'CREATE_VIEW',\n            $GLOBALS['strPrivDescCreateView']\n        ),\n        array(\n            'Show view',\n            'SHOW_VIEW',\n            $GLOBALS['strPrivDescShowView']\n        ),\n        array(\n            'Trigger',\n            'TRIGGER',\n            $GLOBALS['strPrivDescTrigger']\n        ),\n    );\n}\n\n/**\n * Get the grants array which contains all the privilege types\n * and relevant grant messages\n *\n * @return array\n */\nfunction PMA_getGrantsArray()\n{\n    return array(\n        array(\n            'Select_priv',\n            'SELECT',\n            __('Allows reading data.')\n        ),\n        array(\n            'Insert_priv',\n            'INSERT',\n            __('Allows inserting and replacing data.')\n        ),\n        array(\n            'Update_priv',\n            'UPDATE',\n            __('Allows changing data.')\n        ),\n        array(\n            'Delete_priv',\n            'DELETE',\n            __('Allows deleting data.')\n        ),\n        array(\n            'Create_priv',\n            'CREATE',\n            __('Allows creating new databases and tables.')\n        ),\n        array(\n            'Drop_priv',\n            'DROP',\n            __('Allows dropping databases and tables.')\n        ),\n        array(\n            'Reload_priv',\n            'RELOAD',\n            __('Allows reloading server settings and flushing the server\\'s caches.')\n        ),\n        array(\n            'Shutdown_priv',\n            'SHUTDOWN',\n            __('Allows shutting down the server.')\n        ),\n        array(\n            'Process_priv',\n            'PROCESS',\n            __('Allows viewing processes of all users.')\n        ),\n        array(\n            'File_priv',\n            'FILE',\n            __('Allows importing data from and exporting data into files.')\n        ),\n        array(\n            'References_priv',\n            'REFERENCES',\n            __('Has no effect in this MySQL version.')\n        ),\n        array(\n            'Index_priv',\n            'INDEX',\n            __('Allows creating and dropping indexes.')\n        ),\n        array(\n            'Alter_priv',\n            'ALTER',\n            __('Allows altering the structure of existing tables.')\n        ),\n        array(\n            'Show_db_priv',\n            'SHOW DATABASES',\n            __('Gives access to the complete list of databases.')\n        ),\n        array(\n            'Super_priv',\n            'SUPER',\n            __(\n                'Allows connecting, even if maximum number of connections '\n                . 'is reached; required for most administrative operations '\n                . 'like setting global variables or killing threads of other users.'\n            )\n        ),\n        array(\n            'Create_tmp_table_priv',\n            'CREATE TEMPORARY TABLES',\n            __('Allows creating temporary tables.')\n        ),\n        array(\n            'Lock_tables_priv',\n            'LOCK TABLES',\n            __('Allows locking tables for the current thread.')\n        ),\n        array(\n            'Repl_slave_priv',\n            'REPLICATION SLAVE',\n            __('Needed for the replication slaves.')\n        ),\n        array(\n            'Repl_client_priv',\n            'REPLICATION CLIENT',\n            __('Allows the user to ask where the slaves / masters are.')\n        ),\n        array(\n            'Create_view_priv',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        ),\n        array(\n            'Event_priv',\n            'EVENT',\n            __('Allows to set up events for the event scheduler.')\n        ),\n        array(\n            'Trigger_priv',\n            'TRIGGER',\n            __('Allows creating and dropping triggers.')\n        ),\n        // for table privs:\n        array(\n            'Create View_priv',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        ),\n        array(\n            'Show_view_priv',\n            'SHOW VIEW',\n            __('Allows performing SHOW CREATE VIEW queries.')\n        ),\n        // for table privs:\n        array(\n            'Show view_priv',\n            'SHOW VIEW',\n            __('Allows performing SHOW CREATE VIEW queries.')\n        ),\n        array(\n            'Create_routine_priv',\n            'CREATE ROUTINE',\n            __('Allows creating stored routines.')\n        ),\n        array(\n            'Alter_routine_priv',\n            'ALTER ROUTINE',\n            __('Allows altering and dropping stored routines.')\n        ),\n        array(\n            'Create_user_priv',\n            'CREATE USER',\n            __('Allows creating, dropping and renaming user accounts.')\n        ),\n        array(\n            'Execute_priv',\n            'EXECUTE',\n            __('Allows executing stored routines.')\n        ),\n    );\n}\n\n/**\n * Displays on which column(s) a table-specific privilege is granted\n *\n * @param array  $columns          columns array\n * @param array  $row              first row from result or boolean false\n * @param string $name_for_select  privilege types - Select_priv, Insert_priv\n *                                 Update_priv, References_priv\n * @param string $priv_for_header  privilege for header\n * @param string $name             privilege name: insert, select, update, references\n * @param string $name_for_dfn     name for dfn\n * @param string $name_for_current name for current\n *\n * @return string $html_output html snippet\n */\nfunction PMA_getHtmlForColumnPrivileges($columns, $row, $name_for_select,\n    $priv_for_header, $name, $name_for_dfn, $name_for_current\n) {\n    $html_output = '<div class=\"item\" id=\"div_item_' . $name . '\">' . \"\\n\"\n        . '<label for=\"select_' . $name . '_priv\">' . \"\\n\"\n        . '<code><dfn title=\"' . $name_for_dfn . '\">'\n        . $priv_for_header . '</dfn></code>' . \"\\n\"\n        . '</label><br />' . \"\\n\"\n        . '<select id=\"select_' . $name . '_priv\" name=\"'\n        . $name_for_select . '[]\" multiple=\"multiple\" size=\"8\">' . \"\\n\";\n\n    foreach ($columns as $currCol => $currColPrivs) {\n        $html_output .= '<option '\n            . 'value=\"' . htmlspecialchars($currCol) . '\"';\n        if ($row[$name_for_select] == 'Y'\n            || $currColPrivs[$name_for_current]\n        ) {\n            $html_output .= ' selected=\"selected\"';\n        }\n        $html_output .= '>'\n            . htmlspecialchars($currCol) . '</option>' . \"\\n\";\n    }\n\n    $html_output .= '</select>' . \"\\n\"\n        . '<i>' . __('Or') . '</i>' . \"\\n\"\n        . '<label for=\"checkbox_' . $name_for_select\n        . '_none\"><input type=\"checkbox\"'\n        . ' name=\"' . $name_for_select . '_none\" id=\"checkbox_'\n        . $name_for_select . '_none\" title=\"'\n        . _pgettext('None privileges', 'None') . '\" />'\n        . _pgettext('None privileges', 'None') . '</label>' . \"\\n\"\n        . '</div>' . \"\\n\";\n    return $html_output;\n} // end function\n\n/**\n * Get sql query for display privileges table\n *\n * @param string $db       the database\n * @param string $table    the table\n * @param string $username username for database connection\n * @param string $hostname hostname for database connection\n *\n * @return string sql query\n */\nfunction PMA_getSqlQueryForDisplayPrivTable($db, $table, $username, $hostname)\n{\n    if ($db == '*') {\n        return \"SELECT * FROM `mysql`.`user`\"\n            . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n            . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"';\";\n    } elseif ($table == '*') {\n        return \"SELECT * FROM `mysql`.`db`\"\n            . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n            . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"'\"\n            . \" AND '\" . Util::unescapeMysqlWildcards($db) . \"'\"\n            . \" LIKE `Db`;\";\n    }\n    return \"SELECT `Table_priv`\"\n        . \" FROM `mysql`.`tables_priv`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"'\"\n        . \" AND `Db` = '\" . Util::unescapeMysqlWildcards($db) . \"'\"\n        . \" AND `Table_name` = '\" . Util::sqlAddSlashes($table) . \"';\";\n}\n\n/**\n * Displays a dropdown to select the user group\n * with menu items configured to each of them.\n *\n * @param string $username username\n *\n * @return string html to select the user group\n */\nfunction PMA_getHtmlToChooseUserGroup($username)\n{\n    $html_output = '<form class=\"ajax\" id=\"changeUserGroupForm\"'\n            . ' action=\"server_privileges.php\" method=\"post\">';\n    $params = array('username' => $username);\n    $html_output .= PMA_URL_getHiddenInputs($params);\n    $html_output .= '<fieldset id=\"fieldset_user_group_selection\">';\n    $html_output .= '<legend>' . __('User group') . '</legend>';\n\n    $cfgRelation = PMA_getRelationsParam();\n    $groupTable = Util::backquote($cfgRelation['db'])\n        . \".\" . Util::backquote($cfgRelation['usergroups']);\n    $userTable = Util::backquote($cfgRelation['db'])\n        . \".\" . Util::backquote($cfgRelation['users']);\n\n    $userGroups = array();\n    $sql_query = \"SELECT DISTINCT `usergroup` FROM \" . $groupTable;\n    $result = PMA_queryAsControlUser($sql_query, false);\n    if ($result) {\n        while ($row = $GLOBALS['dbi']->fetchRow($result)) {\n            $userGroups[] = $row[0];\n        }\n    }\n    $GLOBALS['dbi']->freeResult($result);\n\n    $userGroup = '';\n    if (isset($GLOBALS['username'])) {\n        $sql_query = \"SELECT `usergroup` FROM \" . $userTable\n            . \" WHERE `username` = '\" . Util::sqlAddSlashes($username) . \"'\";\n        $userGroup = $GLOBALS['dbi']->fetchValue(\n            $sql_query, 0, 0, $GLOBALS['controllink']\n        );\n    }\n\n    $html_output .= __('User group') . ': ';\n    $html_output .= '<select name=\"userGroup\">';\n    $html_output .= '<option value=\"\"></option>';\n    foreach ($userGroups as $oneUserGroup) {\n        $html_output .= '<option value=\"' . htmlspecialchars($oneUserGroup) . '\"'\n            . ($oneUserGroup == $userGroup ? ' selected=\"selected\"' : '')\n            . '>'\n            . htmlspecialchars($oneUserGroup)\n            . '</option>';\n    }\n    $html_output .= '</select>';\n    $html_output .= '<input type=\"hidden\" name=\"changeUserGroup\" value=\"1\">';\n    $html_output .= '</fieldset>';\n    $html_output .= '</form>';\n    return $html_output;\n}\n\n/**\n * Sets the user group from request values\n *\n * @param string $username  username\n * @param string $userGroup user group to set\n *\n * @return void\n */\nfunction PMA_setUserGroup($username, $userGroup)\n{\n    $cfgRelation = PMA_getRelationsParam();\n    $userTable = Util::backquote($cfgRelation['db'])\n        . \".\" . Util::backquote($cfgRelation['users']);\n\n    $sql_query = \"SELECT `usergroup` FROM \" . $userTable\n        . \" WHERE `username` = '\" . Util::sqlAddSlashes($username) . \"'\";\n    $oldUserGroup = $GLOBALS['dbi']->fetchValue(\n        $sql_query, 0, 0, $GLOBALS['controllink']\n    );\n\n    if ($oldUserGroup === false) {\n        $upd_query = \"INSERT INTO \" . $userTable . \"(`username`, `usergroup`)\"\n            . \" VALUES ('\" . Util::sqlAddSlashes($username) . \"', \"\n            . \"'\" . Util::sqlAddSlashes($userGroup) . \"')\";\n    } else {\n        if (empty($userGroup)) {\n            $upd_query = \"DELETE FROM \" . $userTable\n                . \" WHERE `username`='\" . Util::sqlAddSlashes($username) . \"'\";\n        } elseif ($oldUserGroup != $userGroup) {\n            $upd_query = \"UPDATE \" . $userTable\n                . \" SET `usergroup`='\" . Util::sqlAddSlashes($userGroup) . \"'\"\n                . \" WHERE `username`='\" . Util::sqlAddSlashes($username) . \"'\";\n        }\n    }\n    if (isset($upd_query)) {\n        PMA_queryAsControlUser($upd_query);\n    }\n}\n\n/**\n * Displays the privileges form table\n *\n * @param string  $db     the database\n * @param string  $table  the table\n * @param boolean $submit whether to display the submit button or not\n *\n * @global  array     $cfg         the phpMyAdmin configuration\n * @global  resource  $user_link   the database connection\n *\n * @return string html snippet\n */\nfunction PMA_getHtmlToDisplayPrivilegesTable($db = '*',\n    $table = '*', $submit = true\n) {\n    $html_output = '';\n    $sql_query = '';\n\n    if ($db == '*') {\n        $table = '*';\n    }\n\n    if (isset($GLOBALS['username'])) {\n        $username = $GLOBALS['username'];\n        $hostname = $GLOBALS['hostname'];\n        $sql_query = PMA_getSqlQueryForDisplayPrivTable(\n            $db, $table, $username, $hostname\n        );\n        $row = $GLOBALS['dbi']->fetchSingleRow($sql_query);\n    }\n    if (empty($row)) {\n        if ($table == '*' && $GLOBALS['is_superuser']) {\n            if ($db == '*') {\n                $sql_query = 'SHOW COLUMNS FROM `mysql`.`user`;';\n            } elseif ($table == '*') {\n                $sql_query = 'SHOW COLUMNS FROM `mysql`.`db`;';\n            }\n            $res = $GLOBALS['dbi']->query($sql_query);\n            while ($row1 = $GLOBALS['dbi']->fetchRow($res)) {\n                if (mb_substr($row1[0], 0, 4) == 'max_') {\n                    $row[$row1[0]] = 0;\n                } elseif (mb_substr($row1[0], 0, 5) == 'x509_'\n                    || mb_substr($row1[0], 0, 4) == 'ssl_'\n                ) {\n                    $row[$row1[0]] = '';\n                } else {\n                    $row[$row1[0]] = 'N';\n                }\n            }\n            $GLOBALS['dbi']->freeResult($res);\n        } elseif ($table == '*') {\n            $row = array();\n        } else {\n            $row = array('Table_priv' => '');\n        }\n    }\n    if (isset($row['Table_priv'])) {\n        PMA_fillInTablePrivileges($row);\n\n        // get columns\n        $res = $GLOBALS['dbi']->tryQuery(\n            'SHOW COLUMNS FROM '\n            . Util::backquote(\n                Util::unescapeMysqlWildcards($db)\n            )\n            . '.' . Util::backquote($table) . ';'\n        );\n        $columns = array();\n        if ($res) {\n            while ($row1 = $GLOBALS['dbi']->fetchRow($res)) {\n                $columns[$row1[0]] = array(\n                    'Select' => false,\n                    'Insert' => false,\n                    'Update' => false,\n                    'References' => false\n                );\n            }\n            $GLOBALS['dbi']->freeResult($res);\n        }\n        unset($res, $row1);\n    }\n    // table-specific privileges\n    if (! empty($columns)) {\n        $html_output .= PMA_getHtmlForTableSpecificPrivileges(\n            $username, $hostname, $db, $table, $columns, $row\n        );\n    } else {\n        // global or db-specific\n        $html_output .= PMA_getHtmlForGlobalOrDbSpecificPrivs($db, $table, $row);\n    }\n    $html_output .= '</fieldset>' . \"\\n\";\n    if ($submit) {\n        $html_output .= '<fieldset id=\"fieldset_user_privtable_footer\" '\n            . 'class=\"tblFooters\">' . \"\\n\"\n            . '<input type=\"hidden\" name=\"update_privs\" value=\"1\" />' . \"\\n\"\n            . '<input type=\"submit\" value=\"' . __('Go') . '\" />' . \"\\n\"\n            . '</fieldset>' . \"\\n\";\n    }\n    return $html_output;\n} // end of the 'PMA_displayPrivTable()' function\n\n/**\n * Get HTML for \"Require\"\n *\n * @param array $row privilege array\n *\n * @return string html snippet\n */\nfunction PMA_getHtmlForRequires($row)\n{\n    $html_output  = '<fieldset>';\n    $html_output .= '<legend>SSL</legend>';\n\n    $html_output .= '<div id=\"require_ssl_div\">';\n\n    // REQUIRE NONE\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_NONE\"'\n        . ' value=\"NONE\" title=\"'\n        . __(\n            'Does not require SSL-encrypted connections.'\n        )\n        . '\"'\n        . ((isset($row['ssl_type'])\n            && ($row['ssl_type'] == 'NONE'\n                || $row['ssl_type'] == ''))\n            ? ' checked=\"checked\"'\n            : ''\n        )\n        . '/>';\n\n    $html_output .= '<label for=\"ssl_type_NONE\"><code>'\n        . 'REQUIRE NONE'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    // REQUIRE SSL\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_ANY\"'\n        . ' value=\"ANY\" title=\"'\n        . __(\n            'Requires SSL-encrypted connections.'\n        )\n        . '\"'\n        . ((isset($row['ssl_type'])\n            && $row['ssl_type'] == 'ANY')\n            ? ' checked=\"checked\"'\n            : ''\n        )\n        . '/>';\n\n    $html_output .= '<label for=\"ssl_type_ANY\"><code>'\n        . 'REQUIRE SSL'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    // REQUIRE X509\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_X509\"'\n        . ' value=\"X509\" title=\"'\n        . __(\n            'Requires a valid X509 certificate.'\n        )\n        . '\"'\n        . ((isset($row['ssl_type']) && $row['ssl_type'] == 'X509')\n            ? ' checked=\"checked\"'\n            : ''\n        )\n        . '/>';\n\n    $html_output .= '<label for=\"ssl_type_X509\"><code>'\n        . 'REQUIRE X509'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    // Specified\n    $specified = (isset($row['ssl_type']) && $row['ssl_type'] == 'SPECIFIED');\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<input type=\"radio\" name=\"ssl_type\" id=\"ssl_type_specified\"'\n        . ' value=\"SPECIFIED\"' . ($specified ? ' checked=\"checked\"' : '') . '/>';\n\n    $html_output .= '<label for=\"ssl_type_specified\"><code>'\n        . 'SPECIFIED'\n        . '</code></label>';\n    $html_output .= '</div>';\n\n    $html_output .= '<div id=\"specified_div\" style=\"padding-left:20px;\">';\n\n    // REQUIRE CIPHER\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<label for=\"text_ssl_cipher\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Requires that a specific cipher method be used for a connection.'\n        )\n        . '\">'\n        . 'REQUIRE CIPHER'\n        . '</dfn></code></label>';\n    $html_output .= '<input type=\"text\" name=\"ssl_cipher\" id=\"text_ssl_cipher\" '\n        . 'value=\"' . (isset($row['ssl_cipher']) ? htmlspecialchars($row['ssl_cipher']) : '') . '\" '\n        . 'size=80\" title=\"'\n        . __(\n            'Requires that a specific cipher method be used for a connection.'\n        ) . '\"'\n        . (! $specified ? ' disabled' : '')\n        . ' />';\n    $html_output .= '</div>';\n\n    // REQUIRE ISSUER\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<label for=\"text_x509_issuer\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Requires that a valid X509 certificate issued by this CA be presented.'\n        )\n        . '\">'\n        . 'REQUIRE ISSUER'\n        . '</dfn></code></label>';\n    $html_output .= '<input type=\"text\" name=\"x509_issuer\" id=\"text_x509_issuer\" '\n        . 'value=\"' . (isset($row['x509_issuer']) ? htmlspecialchars($row['x509_issuer']) : '') . '\" '\n        . 'size=80\" title=\"'\n        . __(\n            'Requires that a valid X509 certificate issued by this CA be presented.'\n        ) . '\"'\n        . (! $specified ? ' disabled' : '')\n        . ' />';\n    $html_output .= '</div>';\n\n    // REQUIRE SUBJECT\n    $html_output .= '<div class=\"item\">';\n    $html_output .= '<label for=\"text_x509_subject\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Requires that a valid X509 certificate with this subject be presented.'\n        )\n        . '\">'\n        . 'REQUIRE SUBJECT'\n        . '</dfn></code></label>';\n    $html_output .= '<input type=\"text\" name=\"x509_subject\" id=\"text_x509_subject\" '\n        . 'value=\"' . (isset($row['x509_subject']) ? htmlspecialchars($row['x509_subject']) : '')\n        . '\" size=80\" title=\"'\n        . __(\n            'Requires that a valid X509 certificate with this subject be presented.'\n        ) . '\"'\n        . (! $specified ? ' disabled' : '')\n        . ' />';\n    $html_output .= '</div>';\n\n    $html_output .= '</div>';\n\n    $html_output .= '</div>';\n    $html_output .= '</fieldset>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML for \"Resource limits\"\n *\n * @param array $row first row from result or boolean false\n *\n * @return string html snippet\n */\nfunction PMA_getHtmlForResourceLimits($row)\n{\n    $html_output = '<fieldset>' . \"\\n\"\n        . '<legend>' . __('Resource limits') . '</legend>' . \"\\n\"\n        . '<p><small>'\n        . '<i>' . __('Note: Setting these options to 0 (zero) removes the limit.')\n        . '</i></small></p>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_questions\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Limits the number of queries the user may send to the server per hour.'\n        )\n        . '\">'\n        . 'MAX QUERIES PER HOUR'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_questions\" id=\"text_max_questions\" '\n        . 'value=\"'\n        . (isset($row['max_questions']) ? $row['max_questions'] : '0')\n        . '\" min=\"0\" '\n        . 'title=\"'\n        . __(\n            'Limits the number of queries the user may send to the server per hour.'\n        )\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_updates\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Limits the number of commands that change any table '\n            . 'or database the user may execute per hour.'\n        ) . '\">'\n        . 'MAX UPDATES PER HOUR'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_updates\" id=\"text_max_updates\" '\n        . 'value=\"'\n        . (isset($row['max_updates']) ? $row['max_updates'] : '0')\n        . '\" min=\"0\" '\n        . 'title=\"'\n        . __(\n            'Limits the number of commands that change any table '\n            . 'or database the user may execute per hour.'\n        )\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_connections\">'\n        . '<code><dfn title=\"'\n        . __(\n            'Limits the number of new connections the user may open per hour.'\n        ) . '\">'\n        . 'MAX CONNECTIONS PER HOUR'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_connections\" id=\"text_max_connections\" '\n        . 'value=\"'\n        . (isset($row['max_connections']) ? $row['max_connections'] : '0')\n        . '\" min=\"0\" '\n        . 'title=\"' . __(\n            'Limits the number of new connections the user may open per hour.'\n        )\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"text_max_user_connections\">'\n        . '<code><dfn title=\"'\n        . __('Limits the number of simultaneous connections the user may have.')\n        . '\">'\n        . 'MAX USER_CONNECTIONS'\n        . '</dfn></code></label>' . \"\\n\"\n        . '<input type=\"number\" name=\"max_user_connections\" '\n        . 'id=\"text_max_user_connections\" '\n        . 'value=\"'\n        . (isset($row['max_user_connections']) ? $row['max_user_connections'] : '0')\n        . '\" '\n        . 'title=\"'\n        . __('Limits the number of simultaneous connections the user may have.')\n        . '\" />' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '</fieldset>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get the HTML snippet for routine specific privileges\n *\n * @param string $username   username for database connection\n * @param string $hostname   hostname for database connection\n * @param string $db         the database\n * @param string $routine    the routine\n * @param string $url_dbname url encoded db name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForRoutineSpecificPrivilges(\n    $username, $hostname, $db, $routine, $url_dbname\n) {\n    $header = PMA_getHtmlHeaderForUserProperties(\n        false, $url_dbname, $db, $username, $hostname, $routine\n    );\n\n    $sql = \"SELECT `Proc_priv`\"\n        . \" FROM `mysql`.`procs_priv`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"'\"\n        . \" AND `Db` = '\"\n        . Util::sqlAddSlashes(Util::unescapeMysqlWildcards($db)) . \"'\"\n        . \" AND `Routine_name` LIKE '\" . Util::sqlAddSlashes($routine) . \"';\";\n    $res = $GLOBALS['dbi']->fetchValue($sql);\n\n    $privs = array(\n        'Alter_routine_priv' => 'N',\n        'Execute_priv'       => 'N',\n        'Grant_priv'         => 'N',\n    );\n    foreach (explode(',', $res) as $priv) {\n        if ($priv == 'Alter Routine') {\n            $privs['Alter_routine_priv'] = 'Y';\n        } else {\n            $privs[$priv . '_priv'] = 'Y';\n        }\n    }\n\n    $routineArray   = array(PMA_getTriggerPrivilegeTable());\n    $privTableNames = array(__('Routine'));\n    $privCheckboxes = PMA_getHtmlForGlobalPrivTableWithCheckboxes(\n        $routineArray, $privTableNames, $privs\n    );\n\n    $data = array(\n        'username'       => $username,\n        'hostname'       => $hostname,\n        'database'       => $db,\n        'routine'        => $routine,\n        'grantCount'     => count($privs),\n        'privCheckboxes' => $privCheckboxes,\n        'header'         => $header,\n    );\n    $html_output = Template::get('privileges/edit_routine_privileges')\n        ->render($data);\n\n    return $html_output;\n}\n\n/**\n * Get routine privilege table as an array\n *\n * @return privilege type array\n */\nfunction PMA_getTriggerPrivilegeTable()\n{\n    $routinePrivTable = array(\n        array(\n            'Grant',\n            'GRANT',\n            __(\n                'Allows adding users and privileges '\n                . 'without reloading the privilege tables.'\n            )\n        ),\n        array(\n            'Alter_routine',\n            'ALTER ROUTINE',\n            __('Allows altering and dropping this routine.')\n        ),\n        array(\n            'Execute',\n            'EXECUTE',\n            __('Allows executing this routine.')\n        )\n    );\n    return $routinePrivTable;\n}\n\n/**\n * Get the HTML snippet for table specific privileges\n *\n * @param string $username username for database connection\n * @param string $hostname hostname for database connection\n * @param string $db       the database\n * @param string $table    the table\n * @param array  $columns  columns array\n * @param array  $row      current privileges row\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForTableSpecificPrivileges(\n    $username, $hostname, $db, $table, $columns, $row\n) {\n    $res = $GLOBALS['dbi']->query(\n        'SELECT `Column_name`, `Column_priv`'\n        . ' FROM `mysql`.`columns_priv`'\n        . ' WHERE `User`'\n        . ' = \\'' . Util::sqlAddSlashes($username) . \"'\"\n        . ' AND `Host`'\n        . ' = \\'' . Util::sqlAddSlashes($hostname) . \"'\"\n        . ' AND `Db`'\n        . ' = \\'' . Util::sqlAddSlashes(\n            Util::unescapeMysqlWildcards($db)\n        ) . \"'\"\n        . ' AND `Table_name`'\n        . ' = \\'' . Util::sqlAddSlashes($table) . '\\';'\n    );\n\n    while ($row1 = $GLOBALS['dbi']->fetchRow($res)) {\n        $row1[1] = explode(',', $row1[1]);\n        foreach ($row1[1] as $current) {\n            $columns[$row1[0]][$current] = true;\n        }\n    }\n    $GLOBALS['dbi']->freeResult($res);\n    unset($res, $row1, $current);\n\n    $html_output = '<input type=\"hidden\" name=\"grant_count\" '\n        . 'value=\"' . count($row) . '\" />' . \"\\n\"\n        . '<input type=\"hidden\" name=\"column_count\" '\n        . 'value=\"' . count($columns) . '\" />' . \"\\n\"\n        . '<fieldset id=\"fieldset_user_priv\">' . \"\\n\"\n        . '<legend data-submenu-label=\"Table\">' . __('Table-specific privileges')\n        . '</legend>'\n        . '<p><small><i>'\n        . __('Note: MySQL privilege names are expressed in English.')\n        . '</i></small></p>';\n\n    // privs that are attached to a specific column\n    $html_output .= PMA_getHtmlForAttachedPrivilegesToTableSpecificColumn(\n        $columns, $row\n    );\n\n    // privs that are not attached to a specific column\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . PMA_getHtmlForNotAttachedPrivilegesToTableSpecificColumn($row)\n        . '</div>' . \"\\n\";\n\n    // for Safari 2.0.2\n    $html_output .= '<div class=\"clearfloat\"></div>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for privileges that are attached to a specific column\n *\n * @param array $columns columns array\n * @param array $row     first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForAttachedPrivilegesToTableSpecificColumn($columns, $row)\n{\n    $html_output = PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'Select_priv', 'SELECT',\n        'select', __('Allows reading data.'), 'Select'\n    );\n\n    $html_output .= PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'Insert_priv', 'INSERT',\n        'insert', __('Allows inserting and replacing data.'), 'Insert'\n    );\n\n    $html_output .= PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'Update_priv', 'UPDATE',\n        'update', __('Allows changing data.'), 'Update'\n    );\n\n    $html_output .= PMA_getHtmlForColumnPrivileges(\n        $columns, $row, 'References_priv', 'REFERENCES', 'references',\n        __('Has no effect in this MySQL version.'), 'References'\n    );\n    return $html_output;\n}\n\n/**\n * Get HTML for privileges that are not attached to a specific column\n *\n * @param array $row first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForNotAttachedPrivilegesToTableSpecificColumn($row)\n{\n    $html_output = '';\n\n    foreach ($row as $current_grant => $current_grant_value) {\n        $grant_type = substr($current_grant, 0, -5);\n        if (in_array($grant_type, array('Select', 'Insert', 'Update', 'References'))\n        ) {\n            continue;\n        }\n        // make a substitution to match the messages variables;\n        // also we must substitute the grant we get, because we can't generate\n        // a form variable containing blanks (those would get changed to\n        // an underscore when receiving the POST)\n        if ($current_grant == 'Create View_priv') {\n            $tmp_current_grant = 'CreateView_priv';\n            $current_grant = 'Create_view_priv';\n        } elseif ($current_grant == 'Show view_priv') {\n            $tmp_current_grant = 'ShowView_priv';\n            $current_grant = 'Show_view_priv';\n        } else {\n            $tmp_current_grant = $current_grant;\n        }\n\n        $html_output .= '<div class=\"item\">' . \"\\n\"\n           . '<input type=\"checkbox\"'\n           . ' name=\"' . $current_grant . '\" id=\"checkbox_' . $current_grant\n           . '\" value=\"Y\" '\n           . ($current_grant_value == 'Y' ? 'checked=\"checked\" ' : '')\n           . 'title=\"';\n\n        $privGlobalName = 'strPrivDesc'\n            . mb_substr(\n                $tmp_current_grant,\n                0,\n                (mb_strlen($tmp_current_grant) - 5)\n            );\n        $html_output .= (isset($GLOBALS[$privGlobalName])\n                ? $GLOBALS[$privGlobalName]\n                : $GLOBALS[$privGlobalName . 'Tbl']\n            )\n            . '\"/>' . \"\\n\";\n\n        $privGlobalName1 = 'strPrivDesc'\n            . mb_substr(\n                $tmp_current_grant,\n                0,\n                - 5\n            );\n        $html_output .= '<label for=\"checkbox_' . $current_grant\n            . '\"><code><dfn title=\"'\n            . (isset($GLOBALS[$privGlobalName1])\n                ? $GLOBALS[$privGlobalName1]\n                : $GLOBALS[$privGlobalName1 . 'Tbl']\n            )\n            . '\">'\n            . mb_strtoupper(\n                mb_substr(\n                    $current_grant,\n                    0,\n                    -5\n                )\n            )\n            . '</dfn></code></label>' . \"\\n\"\n            . '</div>' . \"\\n\";\n    } // end foreach ()\n    return $html_output;\n}\n\n/**\n * Get HTML for global or database specific privileges\n *\n * @param string $db    the database\n * @param string $table the table\n * @param array  $row   first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForGlobalOrDbSpecificPrivs($db, $table, $row)\n{\n    $privTable_names = array(0 => __('Data'),\n        1 => __('Structure'),\n        2 => __('Administration')\n    );\n    $privTable = array();\n    // d a t a\n    $privTable[0] = PMA_getDataPrivilegeTable($db);\n\n    // s t r u c t u r e\n    $privTable[1] = PMA_getStructurePrivilegeTable($table, $row);\n\n    // a d m i n i s t r a t i o n\n    $privTable[2] = PMA_getAdministrationPrivilegeTable($db);\n\n    $html_output = '<input type=\"hidden\" name=\"grant_count\" value=\"'\n        . (count($privTable[0])\n            + count($privTable[1])\n            + count($privTable[2])\n            - (isset($row['Grant_priv']) ? 1 : 0)\n        )\n        . '\" />';\n    if ($db == '*') {\n        $legend     = __('Global privileges');\n        $menu_label = __('Global');\n    } else if ($table == '*') {\n        $legend     = __('Database-specific privileges');\n        $menu_label = __('Database');\n    } else {\n        $legend     = __('Table-specific privileges');\n        $menu_label = __('Table');\n    }\n    $html_output .= '<fieldset id=\"fieldset_user_global_rights\">'\n        . '<legend data-submenu-label=\"' . $menu_label . '\">' . $legend\n        . '<input type=\"checkbox\" id=\"addUsersForm_checkall\" '\n        . 'class=\"checkall_box\" title=\"' . __('Check all') . '\" /> '\n        . '<label for=\"addUsersForm_checkall\">' . __('Check all') . '</label> '\n        . '</legend>'\n        . '<p><small><i>'\n        . __('Note: MySQL privilege names are expressed in English.')\n        . '</i></small></p>';\n\n    // Output the Global privilege tables with checkboxes\n    $html_output .= PMA_getHtmlForGlobalPrivTableWithCheckboxes(\n        $privTable, $privTable_names, $row\n    );\n\n    // The \"Resource limits\" box is not displayed for db-specific privs\n    if ($db == '*') {\n        $html_output .= PMA_getHtmlForResourceLimits($row);\n        $html_output .= PMA_getHtmlForRequires($row);\n    }\n    // for Safari 2.0.2\n    $html_output .= '<div class=\"clearfloat\"></div>';\n\n    return $html_output;\n}\n\n/**\n * Get data privilege table as an array\n *\n * @param string $db the database\n *\n * @return string data privilege table\n */\nfunction PMA_getDataPrivilegeTable($db)\n{\n    $data_privTable = array(\n        array('Select', 'SELECT', __('Allows reading data.')),\n        array('Insert', 'INSERT', __('Allows inserting and replacing data.')),\n        array('Update', 'UPDATE', __('Allows changing data.')),\n        array('Delete', 'DELETE', __('Allows deleting data.'))\n    );\n    if ($db == '*') {\n        $data_privTable[]\n            = array('File',\n                'FILE',\n                __('Allows importing data from and exporting data into files.')\n            );\n    }\n    return $data_privTable;\n}\n\n/**\n * Get structure privilege table as an array\n *\n * @param string $table the table\n * @param array  $row   first row from result or boolean false\n *\n * @return string structure privilege table\n */\nfunction PMA_getStructurePrivilegeTable($table, $row)\n{\n    $structure_privTable = array(\n        array('Create',\n            'CREATE',\n            ($table == '*'\n                ? __('Allows creating new databases and tables.')\n                : __('Allows creating new tables.')\n            )\n        ),\n        array('Alter',\n            'ALTER',\n            __('Allows altering the structure of existing tables.')\n        ),\n        array('Index', 'INDEX', __('Allows creating and dropping indexes.')),\n        array('Drop',\n            'DROP',\n            ($table == '*'\n                ? __('Allows dropping databases and tables.')\n                : __('Allows dropping tables.')\n            )\n        ),\n        array('Create_tmp_table',\n            'CREATE TEMPORARY TABLES',\n            __('Allows creating temporary tables.')\n        ),\n        array('Show_view',\n            'SHOW VIEW',\n            __('Allows performing SHOW CREATE VIEW queries.')\n        ),\n        array('Create_routine',\n            'CREATE ROUTINE',\n            __('Allows creating stored routines.')\n        ),\n        array('Alter_routine',\n            'ALTER ROUTINE',\n            __('Allows altering and dropping stored routines.')\n        ),\n        array('Execute', 'EXECUTE', __('Allows executing stored routines.')),\n    );\n    // this one is for a db-specific priv: Create_view_priv\n    if (isset($row['Create_view_priv'])) {\n        $structure_privTable[] = array('Create_view',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        );\n    }\n    // this one is for a table-specific priv: Create View_priv\n    if (isset($row['Create View_priv'])) {\n        $structure_privTable[] = array('Create View',\n            'CREATE VIEW',\n            __('Allows creating new views.')\n        );\n    }\n    if (isset($row['Event_priv'])) {\n        // MySQL 5.1.6\n        $structure_privTable[] = array('Event',\n            'EVENT',\n            __('Allows to set up events for the event scheduler.')\n        );\n        $structure_privTable[] = array('Trigger',\n            'TRIGGER',\n            __('Allows creating and dropping triggers.')\n        );\n    }\n    return $structure_privTable;\n}\n\n/**\n * Get administration privilege table as an array\n *\n * @param string $db the table\n *\n * @return string administration privilege table\n */\nfunction PMA_getAdministrationPrivilegeTable($db)\n{\n    $adminPrivTable = array(\n        array('Grant',\n            'GRANT',\n            __(\n                'Allows adding users and privileges '\n                . 'without reloading the privilege tables.'\n            )\n        ),\n    );\n    if ($db == '*') {\n        $adminPrivTable[] = array('Super',\n            'SUPER',\n            __(\n                'Allows connecting, even if maximum number '\n                . 'of connections is reached; required for '\n                . 'most administrative operations like '\n                . 'setting global variables or killing threads of other users.'\n            )\n        );\n        $adminPrivTable[] = array('Process',\n            'PROCESS',\n            __('Allows viewing processes of all users.')\n        );\n        $adminPrivTable[] = array('Reload',\n            'RELOAD',\n            __('Allows reloading server settings and flushing the server\\'s caches.')\n        );\n        $adminPrivTable[] = array('Shutdown',\n            'SHUTDOWN',\n            __('Allows shutting down the server.')\n        );\n        $adminPrivTable[] = array('Show_db',\n            'SHOW DATABASES',\n            __('Gives access to the complete list of databases.')\n        );\n    }\n    $adminPrivTable[] = array('Lock_tables',\n        'LOCK TABLES',\n        __('Allows locking tables for the current thread.')\n    );\n    $adminPrivTable[] = array('References',\n        'REFERENCES',\n        __('Has no effect in this MySQL version.')\n    );\n    if ($db == '*') {\n        $adminPrivTable[] = array('Repl_client',\n            'REPLICATION CLIENT',\n            __('Allows the user to ask where the slaves / masters are.')\n        );\n        $adminPrivTable[] = array('Repl_slave',\n            'REPLICATION SLAVE',\n            __('Needed for the replication slaves.')\n        );\n        $adminPrivTable[] = array('Create_user',\n            'CREATE USER',\n            __('Allows creating, dropping and renaming user accounts.')\n        );\n    }\n    return $adminPrivTable;\n}\n\n/**\n * Get HTML snippet for global privileges table with check boxes\n *\n * @param array $privTable       privileges table array\n * @param array $privTable_names names of the privilege tables\n *                               (Data, Structure, Administration)\n * @param array $row             first row from result or boolean false\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForGlobalPrivTableWithCheckboxes(\n    $privTable, $privTable_names, $row\n) {\n    $html_output = '';\n    foreach ($privTable as $i => $table) {\n        $html_output .= '<fieldset>' . \"\\n\"\n            . '<legend>' . \"\\n\"\n            . '<input type=\"checkbox\" class=\"sub_checkall_box\"'\n            . ' id=\"checkall_' . $privTable_names[$i] . '_priv\"'\n            . ' title=\"' . __('Check all') . '\"/>'\n            . '<label for=\"checkall_' . $privTable_names[$i] . '_priv\">'\n            . $privTable_names[$i] . '</label>' . \"\\n\"\n            . '</legend>' . \"\\n\";\n        foreach ($table as $priv) {\n            $html_output .= '<div class=\"item\">' . \"\\n\"\n                . '<input type=\"checkbox\" class=\"checkall\"'\n                . ' name=\"' . $priv[0] . '_priv\" '\n                . 'id=\"checkbox_' . $priv[0] . '_priv\"'\n                . ' value=\"Y\" title=\"' . $priv[2] . '\"'\n                . ((isset($row[$priv[0] . '_priv'])\n                    && $row[$priv[0] . '_priv'] == 'Y')\n                    ?  ' checked=\"checked\"'\n                    : ''\n                )\n                . '/>' . \"\\n\"\n                . '<label for=\"checkbox_' . $priv[0] . '_priv\">'\n                . '<code>'\n                . PMA_formatPrivilege($priv, true)\n                . '</code></label>' . \"\\n\"\n                . '</div>' . \"\\n\";\n        }\n        $html_output .= '</fieldset>' . \"\\n\";\n    }\n    return $html_output;\n}\n\n/**\n * Gets the currently active authentication plugins\n *\n * @param string $orig_auth_plugin Default Authentication plugin\n * @param string $mode             are we creating a new user or are we just\n *                                 changing  one?\n *                                 (allowed values: 'new', 'edit', 'change_pw')\n * @param string $versions         Is MySQL version newer or older than 5.5.7\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForAuthPluginsDropdown(\n    $orig_auth_plugin,\n    $mode = 'new',\n    $versions = 'new'\n) {\n    $html_output = '<select '\n        . 'id=\"select_authentication_plugin'\n        . ($mode =='change_pw' ? '_cp' : '') . '\" '\n        . 'name=\"authentication_plugin\" >';\n    if ($versions == 'new') {\n        $active_auth_plugins = PMA_getActiveAuthPlugins();\n\n        foreach ($active_auth_plugins as $plugin) {\n            if ($plugin['PLUGIN_NAME'] == 'mysql_old_password') {\n                continue;\n            }\n            // if description is known, enable its translation\n            if ('Native MySQL authentication' == $plugin['PLUGIN_DESCRIPTION']) {\n                $description = __('Native MySQL authentication');\n            } elseif ('SHA256 password authentication' == $plugin['PLUGIN_DESCRIPTION']) {\n                $description = __('SHA256 password authentication');\n            } else {\n                // but there can be other auth plugins, see\n                // https://github.com/phpmyadmin/phpmyadmin/issues/11561\n                $description = $plugin['PLUGIN_DESCRIPTION'];\n            }\n\n            $html_output .= '<option value=\"' . $plugin['PLUGIN_NAME'] . '\"'\n                . ($orig_auth_plugin == $plugin['PLUGIN_NAME'] ? 'selected ' : '')\n                . '>' . $description . '</option>';\n        }\n        $html_output .= '</select>';\n    } else {\n        $html_output .= '<option value=\"mysql_native_password\" >'\n            . __('Native MySQL Authentication') . '</option>'\n            . '</select>';\n    }\n\n    return $html_output;\n}\n/**\n * Gets the currently active authentication plugins\n *\n * @return array $result  array of plugin names and descriptions\n */\nfunction PMA_getActiveAuthPlugins()\n{\n    $get_plugins_query = \"SELECT `PLUGIN_NAME`, `PLUGIN_DESCRIPTION`\"\n        . \" FROM `information_schema`.`PLUGINS` \"\n        . \"WHERE `PLUGIN_TYPE` = 'AUTHENTICATION';\";\n    $resultset = $GLOBALS['dbi']->query($get_plugins_query);\n\n    $result = array();\n\n    while ($row = $GLOBALS['dbi']->fetchAssoc($resultset)) {\n        $result[] = $row;\n    }\n\n    return $result;\n}\n\n/**\n * Displays the fields used by the \"new user\" form as well as the\n * \"change login information / copy user\" form.\n *\n * @param string $mode     are we creating a new user or are we just\n *                         changing  one? (allowed values: 'new', 'change')\n * @param string $username User name\n * @param string $hostname Host name\n *\n * @global  array      $cfg     the phpMyAdmin configuration\n * @global  resource   $user_link the database connection\n *\n * @return string $html_output  a HTML snippet\n */\nfunction PMA_getHtmlForLoginInformationFields(\n    $mode = 'new',\n    $username = null,\n    $hostname = null\n) {\n    list($username_length, $hostname_length) = PMA_getUsernameAndHostnameLength();\n\n    if (isset($GLOBALS['username'])\n        && mb_strlen($GLOBALS['username']) === 0\n    ) {\n        $GLOBALS['pred_username'] = 'any';\n    }\n    $html_output = '<fieldset id=\"fieldset_add_user_login\">' . \"\\n\"\n        . '<legend>' . __('Login Information') . '</legend>' . \"\\n\"\n        . '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"select_pred_username\">' . \"\\n\"\n        . '    ' . __('User name:') . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '<span class=\"options\">' . \"\\n\";\n\n    $html_output .= '<select name=\"pred_username\" id=\"select_pred_username\" '\n        . 'title=\"' . __('User name') . '\">' . \"\\n\";\n\n    $html_output .= '<option value=\"any\"'\n        . ((isset($GLOBALS['pred_username']) && $GLOBALS['pred_username'] == 'any')\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Any user')\n        . '</option>' . \"\\n\";\n\n    $html_output .= '<option value=\"userdefined\"'\n        . ((! isset($GLOBALS['pred_username'])\n                || $GLOBALS['pred_username'] == 'userdefined'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Use text field')\n        . ':</option>' . \"\\n\";\n\n    $html_output .= '</select>' . \"\\n\"\n        . '</span>' . \"\\n\";\n\n    $html_output .= '<input type=\"text\" name=\"username\" id=\"pma_username\" class=\"autofocus\"'\n        . ' maxlength=\"' . $username_length . '\" title=\"' . __('User name') . '\"'\n        . (empty($GLOBALS['username'])\n           ? ''\n           : ' value=\"' . htmlspecialchars(\n               isset($GLOBALS['new_username'])\n               ? $GLOBALS['new_username']\n               : $GLOBALS['username']\n           ) . '\"'\n        )\n        . ((! isset($GLOBALS['pred_username'])\n                || $GLOBALS['pred_username'] == 'userdefined'\n            )\n            ? 'required=\"required\"'\n            : '') . ' />' . \"\\n\";\n\n    $html_output .= '<div id=\"user_exists_warning\"'\n        . ' name=\"user_exists_warning\" style=\"display:none;\">'\n        . Message::notice(\n            __(\n                'An account already exists with the same username '\n                . 'but possibly a different hostname.'\n            )\n        )->getDisplay()\n        . '</div>';\n    $html_output .= '</div>';\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"select_pred_hostname\">' . \"\\n\"\n        . '    ' . __('Host name:') . \"\\n\"\n        . '</label>' . \"\\n\";\n\n    $html_output .= '<span class=\"options\">' . \"\\n\"\n        . '    <select name=\"pred_hostname\" id=\"select_pred_hostname\" '\n        . 'title=\"' . __('Host name') . '\"' . \"\\n\";\n    $_current_user = $GLOBALS['dbi']->fetchValue('SELECT USER();');\n    if (! empty($_current_user)) {\n        $thishost = str_replace(\n            \"'\",\n            '',\n            mb_substr(\n                $_current_user,\n                (mb_strrpos($_current_user, '@') + 1)\n            )\n        );\n        if ($thishost != 'localhost' && $thishost != '127.0.0.1') {\n            $html_output .= ' data-thishost=\"' . htmlspecialchars($thishost) . '\" ';\n        } else {\n            unset($thishost);\n        }\n    }\n    $html_output .= '>' . \"\\n\";\n    unset($_current_user);\n\n    // when we start editing a user, $GLOBALS['pred_hostname'] is not defined\n    if (! isset($GLOBALS['pred_hostname']) && isset($GLOBALS['hostname'])) {\n        switch (mb_strtolower($GLOBALS['hostname'])) {\n        case 'localhost':\n        case '127.0.0.1':\n            $GLOBALS['pred_hostname'] = 'localhost';\n            break;\n        case '%':\n            $GLOBALS['pred_hostname'] = 'any';\n            break;\n        default:\n            $GLOBALS['pred_hostname'] = 'userdefined';\n            break;\n        }\n    }\n    $html_output .=  '<option value=\"any\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'any'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Any host')\n        . '</option>' . \"\\n\"\n        . '<option value=\"localhost\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'localhost'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Local')\n        . '</option>' . \"\\n\";\n    if (! empty($thishost)) {\n        $html_output .= '<option value=\"thishost\"'\n            . ((isset($GLOBALS['pred_hostname'])\n                    && $GLOBALS['pred_hostname'] == 'thishost'\n                )\n                ? ' selected=\"selected\"'\n                : '') . '>'\n            . __('This Host')\n            . '</option>' . \"\\n\";\n    }\n    unset($thishost);\n    $html_output .= '<option value=\"hosttable\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'hosttable'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Use Host Table')\n        . '</option>' . \"\\n\";\n\n    $html_output .= '<option value=\"userdefined\"'\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'userdefined'\n            )\n            ? ' selected=\"selected\"'\n            : '') . '>'\n        . __('Use text field:') . '</option>' . \"\\n\"\n        . '</select>' . \"\\n\"\n        . '</span>' . \"\\n\";\n\n    $html_output .= '<input type=\"text\" name=\"hostname\" id=\"pma_hostname\" maxlength=\"'\n        . $hostname_length . '\" value=\"'\n        // use default value of '%' to match with the default 'Any host'\n        . htmlspecialchars(isset($GLOBALS['hostname']) ? $GLOBALS['hostname'] : '%')\n        . '\" title=\"' . __('Host name')\n        . ((isset($GLOBALS['pred_hostname'])\n                && $GLOBALS['pred_hostname'] == 'userdefined'\n            )\n            ? 'required=\"required\"'\n            : '')\n        . ' />' . \"\\n\"\n        . Util::showHint(\n            __(\n                'When Host table is used, this field is ignored '\n                . 'and values stored in Host table are used instead.'\n            )\n        )\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\">' . \"\\n\"\n        . '<label for=\"select_pred_password\">' . \"\\n\"\n        . '    ' . __('Password:') . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '<span class=\"options\">' . \"\\n\"\n        . '<select name=\"pred_password\" id=\"select_pred_password\" title=\"'\n        . __('Password') . '\">' . \"\\n\"\n        . ($mode == 'change' ? '<option value=\"keep\" selected=\"selected\">'\n            . __('Do not change the password')\n            . '</option>' . \"\\n\" : '')\n        . '<option value=\"none\"';\n\n    if (isset($GLOBALS['username']) && $mode != 'change') {\n        $html_output .= '  selected=\"selected\"';\n    }\n    $html_output .= '>' . __('No Password') . '</option>' . \"\\n\"\n        . '<option value=\"userdefined\"'\n        . (isset($GLOBALS['username']) ? '' : ' selected=\"selected\"') . '>'\n        . __('Use text field')\n        . ':</option>' . \"\\n\"\n        . '</select>' . \"\\n\"\n        . '</span>' . \"\\n\"\n        . '<input type=\"password\" id=\"text_pma_pw\" name=\"pma_pw\" '\n        . 'title=\"' . __('Password') . '\" '\n        . (isset($GLOBALS['username']) ? '' : 'required=\"required\"')\n        . '/>' . \"\\n\"\n        . '</div>' . \"\\n\";\n\n    $html_output .= '<div class=\"item\" '\n        . 'id=\"div_element_before_generate_password\">' . \"\\n\"\n        . '<label for=\"text_pma_pw2\">' . \"\\n\"\n        . '    ' . __('Re-type:') . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '<span class=\"options\">&nbsp;</span>' . \"\\n\"\n        . '<input type=\"password\" name=\"pma_pw2\" id=\"text_pma_pw2\" '\n        . 'title=\"' . __('Re-type') . '\" '\n        . (isset($GLOBALS['username']) ? '' : 'required=\"required\"')\n        . '/>' . \"\\n\"\n        . '</div>' . \"\\n\"\n        . '<div class=\"item\" id=\"authentication_plugin_div\">'\n        . '<label for=\"select_authentication_plugin\" >';\n\n    $serverType = Util::getServerType();\n    $orig_auth_plugin = PMA_getCurrentAuthenticationPlugin(\n        $mode,\n        $username,\n        $hostname\n    );\n\n    if (($serverType == 'MySQL'\n        && PMA_MYSQL_INT_VERSION >= 50507)\n        || ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200)\n    ) {\n        $html_output .= __('Authentication Plugin')\n        . '</label><span class=\"options\">&nbsp;</span>' . \"\\n\";\n\n        $auth_plugin_dropdown = PMA_getHtmlForAuthPluginsDropdown(\n            $orig_auth_plugin, $mode, 'new'\n        );\n    } else {\n        $html_output .= __('Password Hashing Method')\n            . '</label><span class=\"options\">&nbsp;</span>' . \"\\n\";\n        $auth_plugin_dropdown = PMA_getHtmlForAuthPluginsDropdown(\n            $orig_auth_plugin, $mode, 'old'\n        );\n    }\n    $html_output .= $auth_plugin_dropdown;\n\n    $html_output .= '<div '\n        . ($orig_auth_plugin != 'sha256_password' ? 'style=\"display:none\"' : '')\n        . ' id=\"ssl_reqd_warning\">'\n        . Message::notice(\n            __(\n                'This method requires using an \\'<i>SSL connection</i>\\' '\n                . 'or an \\'<i>unencrypted connection that encrypts the password '\n                . 'using RSA</i>\\'; while connecting to the server.'\n            )\n            . Util::showMySQLDocu('sha256-authentication-plugin')\n        )\n            ->getDisplay()\n        . '</div>';\n\n    $html_output .= '</div>' . \"\\n\"\n        // Generate password added here via jQuery\n       . '</fieldset>' . \"\\n\";\n\n    return $html_output;\n} // end of the 'PMA_getHtmlForLoginInformationFields()' function\n\n/**\n * Get username and hostname length\n *\n * @return array username length and hostname length\n */\nfunction PMA_getUsernameAndHostnameLength()\n{\n    /* Fallback values */\n    $username_length = 16;\n    $hostname_length = 41;\n\n    /* Try to get real lengths from the database */\n    $fields_info = $GLOBALS['dbi']->fetchResult(\n        'SELECT COLUMN_NAME, CHARACTER_MAXIMUM_LENGTH '\n        . 'FROM information_schema.columns '\n        . \"WHERE table_schema = 'mysql' AND table_name = 'user' \"\n        . \"AND COLUMN_NAME IN ('User', 'Host')\"\n    );\n    foreach ($fields_info as $val) {\n        if ($val['COLUMN_NAME'] == 'User') {\n            $username_length = $val['CHARACTER_MAXIMUM_LENGTH'];\n        } elseif ($val['COLUMN_NAME'] == 'Host') {\n            $hostname_length = $val['CHARACTER_MAXIMUM_LENGTH'];\n        }\n    }\n    return array($username_length, $hostname_length);\n}\n\n/**\n * Get current authentication plugin in use - for a user or globally\n *\n * @param string $mode     are we creating a new user or are we just\n *                         changing  one? (allowed values: 'new', 'change')\n * @param string $username User name\n * @param string $hostname Host name\n *\n * @return string authentication plugin in use\n */\nfunction PMA_getCurrentAuthenticationPlugin(\n    $mode = 'new',\n    $username = null,\n    $hostname = null\n) {\n    /* Fallback (standard) value */\n    $authentication_plugin = 'mysql_native_password';\n\n    if (isset($username) && isset($hostname)\n        && $mode == 'change'\n    ) {\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT `plugin` FROM `mysql`.`user` WHERE '\n            . '`User` = \"' . $username . '\" AND `Host` = \"' . $hostname . '\" LIMIT 1'\n        );\n        // Table 'mysql'.'user' may not exist for some previous\n        // versions of MySQL - in that case consider fallback value\n        if (isset($row) && $row) {\n            $authentication_plugin = $row['plugin'];\n        }\n    } elseif ($mode == 'change') {\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT CURRENT_USER() as user;'\n        );\n        if (isset($row) && $row) {\n            list($username, $hostname) = explode('@', $row['user']);\n        }\n\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT `plugin` FROM `mysql`.`user` WHERE '\n            . '`User` = \"' . $username . '\" AND `Host` = \"' . $hostname . '\"'\n        );\n        if (isset($row) && $row && ! empty($row['plugin'])) {\n            $authentication_plugin = $row['plugin'];\n        }\n    } elseif (PMA_MYSQL_INT_VERSION >= 50702) {\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT @@default_authentication_plugin'\n        );\n        $authentication_plugin = $row['@@default_authentication_plugin'];\n    }\n\n    return $authentication_plugin;\n}\n\n/**\n * Returns all the grants for a certain user on a certain host\n * Used in the export privileges for all users section\n *\n * @param string $user User name\n * @param string $host Host name\n *\n * @return string containing all the grants text\n */\nfunction PMA_getGrants($user, $host)\n{\n    $grants = $GLOBALS['dbi']->fetchResult(\n        \"SHOW GRANTS FOR '\"\n        . Util::sqlAddSlashes($user) . \"'@'\"\n        . Util::sqlAddSlashes($host) . \"'\"\n    );\n    $response = '';\n    foreach ($grants as $one_grant) {\n        $response .= $one_grant . \";\\n\\n\";\n    }\n    return $response;\n} // end of the 'PMA_getGrants()' function\n\n/**\n * Update password and get message for password updating\n *\n * @param string $err_url  error url\n * @param string $username username\n * @param string $hostname hostname\n *\n * @return string $message  success or error message after updating password\n */\nfunction PMA_updatePassword($err_url, $username, $hostname)\n{\n    // similar logic in user_password.php\n    $message = '';\n    $is_superuser = $GLOBALS['dbi']->isSuperuser();\n\n    if (empty($_REQUEST['nopass'])\n        && isset($_POST['pma_pw'])\n        && isset($_POST['pma_pw2'])\n    ) {\n        if ($_POST['pma_pw'] != $_POST['pma_pw2']) {\n            $message = Message::error(__('The passwords aren\\'t the same!'));\n        } elseif (empty($_POST['pma_pw']) || empty($_POST['pma_pw2'])) {\n            $message = Message::error(__('The password is empty!'));\n        }\n    }\n\n    // here $nopass could be == 1\n    if (empty($message)) {\n        $hashing_function = 'PASSWORD';\n        $serverType = Util::getServerType();\n        $authentication_plugin\n            = (isset($_REQUEST['authentication_plugin'])\n            ? $_REQUEST['authentication_plugin']\n            : PMA_getCurrentAuthenticationPlugin(\n                'change',\n                $username,\n                $hostname\n            ));\n\n        // Use 'ALTER USER ...' syntax for MySQL 5.7.6+\n        if ($serverType == 'MySQL'\n            && PMA_MYSQL_INT_VERSION >= 50706\n        ) {\n            if ($authentication_plugin != 'mysql_old_password') {\n                $query_prefix = \"ALTER USER '\"\n                    . Util::sqlAddSlashes($username)\n                    . \"'@'\" . Util::sqlAddSlashes($hostname) . \"'\"\n                    . \" IDENTIFIED WITH \"\n                    . $authentication_plugin\n                    . \" BY '\";\n            } else {\n                $query_prefix = \"ALTER USER '\"\n                    . Util::sqlAddSlashes($username)\n                    . \"'@'\" . Util::sqlAddSlashes($hostname) . \"'\"\n                    . \" IDENTIFIED BY '\";\n            }\n\n            // in $sql_query which will be displayed, hide the password\n            $sql_query = $query_prefix . \"*'\";\n\n            $local_query = $query_prefix\n                . Util::sqlAddSlashes($_POST['pma_pw']) . \"'\";\n        } else if ($serverType == 'MariaDB'\n            && PMA_MYSQL_INT_VERSION >= 50200\n            && $is_superuser\n        ) {\n            // Use 'UPDATE `mysql`.`user` ...' Syntax for MariaDB 5.2+\n            if ($authentication_plugin == 'mysql_native_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'mysql_native_password' type\n                $GLOBALS['dbi']->tryQuery('SET old_passwords = 0;');\n\n            } else if ($authentication_plugin == 'sha256_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'sha256_password' type\n                $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 2;');\n            }\n\n            $hashedPassword = PMA_getHashedPassword($_POST['pma_pw']);\n\n            $sql_query        = 'SET PASSWORD FOR \\''\n                . Util::sqlAddSlashes($username)\n                . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\' = '\n                . (($_POST['pma_pw'] == '')\n                    ? '\\'\\''\n                    : $hashing_function . '(\\''\n                    . preg_replace('@.@s', '*', $_POST['pma_pw']) . '\\')');\n\n            $local_query = \"UPDATE `mysql`.`user` SET \"\n                . \" `authentication_string` = '\" . $hashedPassword\n                . \"', `Password` = '', \"\n                . \" `plugin` = '\" . $authentication_plugin . \"'\"\n                . \" WHERE `User` = '\" . $username . \"' AND Host = '\"\n                . $hostname . \"';\";\n\n            $GLOBALS['dbi']->tryQuery(\"FLUSH PRIVILEGES;\");\n        } else {\n            // USE 'SET PASSWORD ...' syntax for rest of the versions\n            // Backup the old value, to be reset later\n            $row = $GLOBALS['dbi']->fetchSingleRow(\n                'SELECT @@old_passwords;'\n            );\n            $orig_value = $row['@@old_passwords'];\n            $update_plugin_query = \"UPDATE `mysql`.`user` SET\"\n                . \" `plugin` = '\" . $authentication_plugin . \"'\"\n                . \" WHERE `User` = '\" . $username . \"' AND Host = '\"\n                . $hostname . \"';\";\n\n            // Update the plugin for the user\n            if (!($GLOBALS['dbi']->tryQuery($update_plugin_query))) {\n                Util::mysqlDie(\n                    $GLOBALS['dbi']->getError(),\n                    $update_plugin_query,\n                    false, $err_url\n                );\n            }\n\n            $GLOBALS['dbi']->tryQuery(\"FLUSH PRIVILEGES;\");\n            if ($authentication_plugin == 'mysql_native_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'mysql_native_password' type\n                $GLOBALS['dbi']->tryQuery('SET old_passwords = 0;');\n            } else if ($authentication_plugin == 'sha256_password') {\n                // Set the hashing method used by PASSWORD()\n                // to be 'sha256_password' type\n                $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 2;');\n            }\n            $sql_query        = 'SET PASSWORD FOR \\''\n                . Util::sqlAddSlashes($username)\n                . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\' = '\n                . (($_POST['pma_pw'] == '')\n                    ? '\\'\\''\n                    : $hashing_function . '(\\''\n                    . preg_replace('@.@s', '*', $_POST['pma_pw']) . '\\')');\n\n            $local_query      = 'SET PASSWORD FOR \\''\n                . Util::sqlAddSlashes($username)\n                . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\' = '\n                . (($_POST['pma_pw'] == '') ? '\\'\\'' : $hashing_function\n                . '(\\'' . Util::sqlAddSlashes($_POST['pma_pw']) . '\\')');\n        }\n\n        if (!($GLOBALS['dbi']->tryQuery($local_query))) {\n            Util::mysqlDie(\n                $GLOBALS['dbi']->getError(), $sql_query, false, $err_url\n            );\n        }\n        $message = Message::success(\n            __('The password for %s was changed successfully.')\n        );\n        $message->addParam(\n            '\\'' . htmlspecialchars($username)\n            . '\\'@\\'' . htmlspecialchars($hostname) . '\\''\n        );\n        if (isset($orig_value)) {\n            $GLOBALS['dbi']->tryQuery(\n                'SET `old_passwords` = ' . $orig_value . ';'\n            );\n        }\n    }\n    return $message;\n}\n\n/**\n * Revokes privileges and get message and SQL query for privileges revokes\n *\n * @param string $dbname    database name\n * @param string $tablename table name\n * @param string $username  username\n * @param string $hostname  host name\n * @param string $itemType  item type\n *\n * @return array ($message, $sql_query)\n */\nfunction PMA_getMessageAndSqlQueryForPrivilegesRevoke($dbname,\n    $tablename, $username, $hostname, $itemType\n) {\n    $db_and_table = PMA_wildcardEscapeForGrant($dbname, $tablename);\n\n    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $itemType . ' ' . $db_and_table\n        . ' FROM \\''\n        . Util::sqlAddSlashes($username) . '\\'@\\''\n        . Util::sqlAddSlashes($hostname) . '\\';';\n\n    $sql_query1 = 'REVOKE GRANT OPTION ON ' . $itemType . ' ' . $db_and_table\n        . ' FROM \\'' . Util::sqlAddSlashes($username) . '\\'@\\''\n        . Util::sqlAddSlashes($hostname) . '\\';';\n\n    $GLOBALS['dbi']->query($sql_query0);\n    if (! $GLOBALS['dbi']->tryQuery($sql_query1)) {\n        // this one may fail, too...\n        $sql_query1 = '';\n    }\n    $sql_query = $sql_query0 . ' ' . $sql_query1;\n    $message = Message::success(\n        __('You have revoked the privileges for %s.')\n    );\n    $message->addParam(\n        '\\'' . htmlspecialchars($username)\n        . '\\'@\\'' . htmlspecialchars($hostname) . '\\''\n    );\n\n    return array($message, $sql_query);\n}\n\n/**\n * Get REQUIRE cluase\n *\n * @return string REQUIRE clause\n */\nfunction PMA_getRequireClause()\n{\n    $arr = isset($_POST['ssl_type']) ? $_POST : $GLOBALS;\n    if (isset($arr['ssl_type']) && $arr['ssl_type'] == 'SPECIFIED') {\n        $require = array();\n        if (! empty($arr['ssl_cipher'])) {\n            $require[] = \"CIPHER '\"\n                    . Util::sqlAddSlashes($arr['ssl_cipher']) . \"'\";\n        }\n        if (! empty($arr['x509_issuer'])) {\n            $require[] = \"ISSUER '\"\n                    . Util::sqlAddSlashes($arr['x509_issuer']) . \"'\";\n        }\n        if (! empty($arr['x509_subject'])) {\n            $require[] = \"SUBJECT '\"\n                    . Util::sqlAddSlashes($arr['x509_subject']) . \"'\";\n        }\n        if (count($require)) {\n            $require_clause = \" REQUIRE \" . implode(\" AND \", $require);\n        } else {\n            $require_clause = \" REQUIRE NONE\";\n        }\n    } elseif (isset($arr['ssl_type']) && $arr['ssl_type'] == 'X509') {\n        $require_clause = \" REQUIRE X509\";\n    } elseif (isset($arr['ssl_type']) && $arr['ssl_type'] == 'ANY') {\n        $require_clause = \" REQUIRE SSL\";\n    } else {\n        $require_clause = \" REQUIRE NONE\";\n    }\n\n    return $require_clause;\n}\n\n/**\n * Get a WITH clause for 'update privileges' and 'add user'\n *\n * @return string $sql_query\n */\nfunction PMA_getWithClauseForAddUserAndUpdatePrivs()\n{\n    $sql_query = '';\n    if ((isset($_POST['Grant_priv']) && $_POST['Grant_priv'] == 'Y')\n        || (isset($GLOBALS['Grant_priv']) && $GLOBALS['Grant_priv'] == 'Y')\n    ) {\n        $sql_query .= ' GRANT OPTION';\n    }\n    if (isset($_POST['max_questions']) || isset($GLOBALS['max_questions'])) {\n        $max_questions = isset($_POST['max_questions'])\n            ? (int)$_POST['max_questions'] : (int)$GLOBALS['max_questions'];\n        $max_questions = max(0, $max_questions);\n        $sql_query .= ' MAX_QUERIES_PER_HOUR ' . $max_questions;\n    }\n    if (isset($_POST['max_connections']) || isset($GLOBALS['max_connections'])) {\n        $max_connections = isset($_POST['max_connections'])\n            ? (int)$_POST['max_connections'] : (int)$GLOBALS['max_connections'];\n        $max_connections = max(0, $max_connections);\n        $sql_query .= ' MAX_CONNECTIONS_PER_HOUR ' . $max_connections;\n    }\n    if (isset($_POST['max_updates']) || isset($GLOBALS['max_updates'])) {\n        $max_updates = isset($_POST['max_updates'])\n            ? (int)$_POST['max_updates'] : (int)$GLOBALS['max_updates'];\n        $max_updates = max(0, $max_updates);\n        $sql_query .= ' MAX_UPDATES_PER_HOUR ' . $max_updates;\n    }\n    if (isset($_POST['max_user_connections'])\n        || isset($GLOBALS['max_user_connections'])\n    ) {\n        $max_user_connections = isset($_POST['max_user_connections'])\n            ? (int)$_POST['max_user_connections']\n            : (int)$GLOBALS['max_user_connections'];\n        $max_user_connections = max(0, $max_user_connections);\n        $sql_query .= ' MAX_USER_CONNECTIONS ' . $max_user_connections;\n    }\n    return ((!empty($sql_query)) ? ' WITH' . $sql_query : '');\n}\n\n/**\n * Get HTML for addUsersForm, This function call if isset($_REQUEST['adduser'])\n *\n * @param string $dbname database name\n *\n * @return string HTML for addUserForm\n */\nfunction PMA_getHtmlForAddUser($dbname)\n{\n    $html_output = '<h2>' . \"\\n\"\n       . Util::getIcon('b_usradd.png') . __('Add user account') . \"\\n\"\n       . '</h2>' . \"\\n\"\n       . '<form name=\"usersForm\" id=\"addUsersForm\"'\n       . ' onsubmit=\"return checkAddUser(this);\"'\n       . ' action=\"server_privileges.php\" method=\"post\" autocomplete=\"off\" >' . \"\\n\"\n       . PMA_URL_getHiddenInputs('', '')\n       . PMA_getHtmlForLoginInformationFields('new');\n\n    $html_output .= '<fieldset id=\"fieldset_add_user_database\">' . \"\\n\"\n        . '<legend>' . __('Database for user account') . '</legend>' . \"\\n\";\n\n    $html_output .= Util::getCheckbox(\n        'createdb-1',\n        __('Create database with same name and grant all privileges.'),\n        false, false, 'createdb-1'\n    );\n    $html_output .= '<br />' . \"\\n\";\n    $html_output .= Util::getCheckbox(\n        'createdb-2',\n        __('Grant all privileges on wildcard name (username\\\\_%).'),\n        false, false, 'createdb-2'\n    );\n    $html_output .= '<br />' . \"\\n\";\n\n    if (! empty($dbname) ) {\n        $html_output .= Util::getCheckbox(\n            'createdb-3',\n            sprintf(\n                __('Grant all privileges on database \"%s\".'),\n                htmlspecialchars($dbname)\n            ),\n            true,\n            false,\n            'createdb-3'\n        );\n        $html_output .= '<input type=\"hidden\" name=\"dbname\" value=\"'\n            . htmlspecialchars($dbname) . '\" />' . \"\\n\";\n        $html_output .= '<br />' . \"\\n\";\n    }\n\n    $html_output .= '</fieldset>' . \"\\n\";\n    if ($GLOBALS['is_grantuser']) {\n        $html_output .= PMA_getHtmlToDisplayPrivilegesTable('*', '*', false);\n    }\n    $html_output .= '<fieldset id=\"fieldset_add_user_footer\" class=\"tblFooters\">'\n        . \"\\n\"\n        . '<input type=\"hidden\" name=\"adduser_submit\" value=\"1\" />' . \"\\n\"\n        . '<input type=\"submit\" id=\"adduser_submit\" value=\"' . __('Go') . '\" />'\n        . \"\\n\"\n        . '</fieldset>' . \"\\n\"\n        . '</form>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get the list of privileges and list of compared privileges as strings\n * and return a array that contains both strings\n *\n * @return array $list_of_privileges, $list_of_compared_privileges\n */\nfunction PMA_getListOfPrivilegesAndComparedPrivileges()\n{\n    $list_of_privileges\n        = '`User`, '\n        . '`Host`, '\n        . '`Select_priv`, '\n        . '`Insert_priv`, '\n        . '`Update_priv`, '\n        . '`Delete_priv`, '\n        . '`Create_priv`, '\n        . '`Drop_priv`, '\n        . '`Grant_priv`, '\n        . '`Index_priv`, '\n        . '`Alter_priv`, '\n        . '`References_priv`, '\n        . '`Create_tmp_table_priv`, '\n        . '`Lock_tables_priv`, '\n        . '`Create_view_priv`, '\n        . '`Show_view_priv`, '\n        . '`Create_routine_priv`, '\n        . '`Alter_routine_priv`, '\n        . '`Execute_priv`';\n\n    $listOfComparedPrivs\n        = '`Select_priv` = \\'N\\''\n        . ' AND `Insert_priv` = \\'N\\''\n        . ' AND `Update_priv` = \\'N\\''\n        . ' AND `Delete_priv` = \\'N\\''\n        . ' AND `Create_priv` = \\'N\\''\n        . ' AND `Drop_priv` = \\'N\\''\n        . ' AND `Grant_priv` = \\'N\\''\n        . ' AND `References_priv` = \\'N\\''\n        . ' AND `Create_tmp_table_priv` = \\'N\\''\n        . ' AND `Lock_tables_priv` = \\'N\\''\n        . ' AND `Create_view_priv` = \\'N\\''\n        . ' AND `Show_view_priv` = \\'N\\''\n        . ' AND `Create_routine_priv` = \\'N\\''\n        . ' AND `Alter_routine_priv` = \\'N\\''\n        . ' AND `Execute_priv` = \\'N\\'';\n\n    $list_of_privileges .=\n        ', `Event_priv`, '\n        . '`Trigger_priv`';\n    $listOfComparedPrivs .=\n        ' AND `Event_priv` = \\'N\\''\n        . ' AND `Trigger_priv` = \\'N\\'';\n    return array($list_of_privileges, $listOfComparedPrivs);\n}\n\n/**\n * Get the HTML for routine based privileges\n *\n * @param string $db             database name\n * @param string $odd_row        row styling\n * @param string $index_checkbox starting index for rows to be added\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlTableBodyForSpecificDbRoutinePrivs($db, $odd_row, $index_checkbox)\n{\n    $sql_query = 'SELECT * FROM `mysql`.`procs_priv` WHERE Db = \"' . $db . '\";';\n    $res = $GLOBALS['dbi']->query($sql_query);\n    $html_output = '';\n    while ($row = $GLOBALS['dbi']->fetchAssoc($res)) {\n\n        $html_output .= '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">';\n\n        $html_output .= '<td';\n        $value = htmlspecialchars($row['User'] . '&amp;#27;' . $row['Host']);\n        $html_output .= '>';\n        $html_output .= '<input type=\"checkbox\" class=\"checkall\" '\n            . 'name=\"selected_usr[]\" '\n            . 'id=\"checkbox_sel_users_' . ($index_checkbox++) . '\" '\n            . 'value=\"' . $value . '\" /></td>';\n\n        $html_output .= '<td>' . $row['User']\n            . '</td>'\n            . '<td>' . $row['Host']\n            . '</td>'\n            . '<td>' . 'routine'\n            . '</td>'\n            . '<td>' . '<code>' . $row['Routine_name'] . '</code>'\n            . '</td>'\n            . '<td>' . 'Yes'\n            . '</td>';\n        $current_user = $row['User'];\n        $current_host = $row['Host'];\n        $routine = $row['Routine_name'];\n        $html_output .= '<td>';\n        if ($GLOBALS['is_grantuser']) {\n            $specific_db = (isset($row['Db']) && $row['Db'] != '*')\n                ? $row['Db'] : '';\n            $specific_table = (isset($row['Table_name'])\n                && $row['Table_name'] != '*')\n                ? $row['Table_name'] : '';\n            $html_output .= PMA_getUserLink(\n                'edit',\n                $current_user,\n                $current_host,\n                $specific_db,\n                $specific_table,\n                $routine\n            );\n        }\n        $html_output .= '</td>';\n\n        $html_output .= '</tr>';\n        $odd_row = !$odd_row;\n\n    }\n    return $html_output;\n}\n\n/**\n * Get the HTML for user form and check the privileges for a particular database.\n *\n * @param string $db database name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForSpecificDbPrivileges($db)\n{\n    $html_output = '';\n    if ($GLOBALS['is_superuser']) {\n        // check the privileges for a particular database.\n        $html_output  = '<form id=\"usersForm\" action=\"server_privileges.php\">';\n        $html_output .= PMA_URL_getHiddenInputs($db);\n        $html_output .= '<fieldset>';\n        $html_output .= '<legend>' . \"\\n\"\n            . Util::getIcon('b_usrcheck.png')\n            . '    '\n            . sprintf(\n                __('Users having access to \"%s\"'),\n                '<a href=\"' . Util::getScriptNameForOption(\n                    $GLOBALS['cfg']['DefaultTabDatabase'], 'database'\n                )\n                . PMA_URL_getCommon(array('db' => $db)) . '\">'\n                .  htmlspecialchars($db)\n                . '</a>'\n            )\n            . \"\\n\"\n            . '</legend>' . \"\\n\";\n\n        $html_output .= '<table id=\"dbspecificuserrights\" class=\"data\">';\n        $html_output .= PMA_getHtmlForPrivsTableHead();\n        $privMap = PMA_getPrivMap($db);\n        $html_output .= PMA_getHtmlTableBodyForSpecificDbOrTablePrivs($privMap, $db);\n        $html_output .= '</table>';\n\n        $html_output .= '<div class=\"floatleft\">';\n        $html_output .= Util::getWithSelected(\n            $GLOBALS['pmaThemeImage'], $GLOBALS['text_dir'], \"usersForm\"\n        );\n        $html_output .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_export',\n            __('Export'), 'b_tblexport.png', 'export'\n        );\n\n        $html_output .= '</fieldset>';\n        $html_output .= '</form>';\n    } else {\n        $html_output .= PMA_getHtmlForViewUsersError();\n    }\n\n    if ($GLOBALS['is_ajax_request'] == true\n        && empty($_REQUEST['ajax_page_request'])\n    ) {\n        $message = Message::success(__('User has been added.'));\n        $response = PMA\\libraries\\Response::getInstance();\n        $response->addJSON('message', $message);\n        $response->addJSON('user_form', $html_output);\n        exit;\n    } else {\n        // Offer to create a new user for the current database\n        $html_output .= PMA_getAddUserHtmlFieldset($db);\n    }\n    return $html_output;\n}\n\n/**\n * Get the HTML for user form and check the privileges for a particular table.\n *\n * @param string $db    database name\n * @param string $table table name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForSpecificTablePrivileges($db, $table)\n{\n    $html_output = '';\n    if ($GLOBALS['is_superuser']) {\n        // check the privileges for a particular table.\n        $html_output  = '<form id=\"usersForm\" action=\"server_privileges.php\">';\n        $html_output .= PMA_URL_getHiddenInputs($db, $table);\n        $html_output .= '<fieldset>';\n        $html_output .= '<legend>'\n            . Util::getIcon('b_usrcheck.png')\n            . sprintf(\n                __('Users having access to \"%s\"'),\n                '<a href=\"' . Util::getScriptNameForOption(\n                    $GLOBALS['cfg']['DefaultTabTable'], 'table'\n                )\n                . PMA_URL_getCommon(\n                    array(\n                        'db' => $db,\n                        'table' => $table,\n                    )\n                ) . '\">'\n                .  htmlspecialchars($db) . '.' . htmlspecialchars($table)\n                . '</a>'\n            )\n            . '</legend>';\n\n        $html_output .= '<table id=\"tablespecificuserrights\" class=\"data\">';\n        $html_output .= PMA_getHtmlForPrivsTableHead();\n        $privMap = PMA_getPrivMap($db);\n        $sql_query = \"SELECT `User`, `Host`, `Db`,\"\n            . \" 't' AS `Type`, `Table_name`, `Table_priv`\"\n            . \" FROM `mysql`.`tables_priv`\"\n            . \" WHERE '\" . Util::sqlAddSlashes($db) . \"' LIKE `Db`\"\n            . \"     AND '\" . Util::sqlAddSlashes($table) . \"' LIKE `Table_name`\"\n            . \"     AND NOT (`Table_priv` = '' AND Column_priv = '')\"\n            . \" ORDER BY `User` ASC, `Host` ASC, `Db` ASC, `Table_priv` ASC;\";\n        $res = $GLOBALS['dbi']->query($sql_query);\n        PMA_mergePrivMapFromResult($privMap, $res);\n        $html_output .= PMA_getHtmlTableBodyForSpecificDbOrTablePrivs($privMap, $db);\n        $html_output .= '</table>';\n\n        $html_output .= '<div class=\"floatleft\">';\n        $html_output .= Util::getWithSelected(\n            $GLOBALS['pmaThemeImage'], $GLOBALS['text_dir'], \"usersForm\"\n        );\n        $html_output .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_export',\n            __('Export'), 'b_tblexport.png', 'export'\n        );\n\n        $html_output .= '</fieldset>';\n        $html_output .= '</form>';\n    } else {\n        $html_output .= PMA_getHtmlForViewUsersError();\n    }\n    // Offer to create a new user for the current database\n    $html_output .= PMA_getAddUserHtmlFieldset($db, $table);\n    return $html_output;\n}\n\n/**\n * gets privilege map\n *\n * @param string $db the database\n *\n * @return array $privMap the privilege map\n */\nfunction PMA_getPrivMap($db)\n{\n    list($listOfPrivs, $listOfComparedPrivs)\n        = PMA_getListOfPrivilegesAndComparedPrivileges();\n    $sql_query\n        = \"(\"\n        . \" SELECT \" . $listOfPrivs . \", '*' AS `Db`, 'g' AS `Type`\"\n        . \" FROM `mysql`.`user`\"\n        . \" WHERE NOT (\" . $listOfComparedPrivs . \")\"\n        . \")\"\n        . \" UNION \"\n        . \"(\"\n        . \" SELECT \" . $listOfPrivs . \", `Db`, 'd' AS `Type`\"\n        . \" FROM `mysql`.`db`\"\n        . \" WHERE '\" . Util::sqlAddSlashes($db) . \"' LIKE `Db`\"\n        . \"     AND NOT (\" . $listOfComparedPrivs . \")\"\n        . \")\"\n        . \" ORDER BY `User` ASC, `Host` ASC, `Db` ASC;\";\n    $res = $GLOBALS['dbi']->query($sql_query);\n    $privMap = array();\n    PMA_mergePrivMapFromResult($privMap, $res);\n    return $privMap;\n}\n\n/**\n * merge privilege map and rows from resultset\n *\n * @param array  &$privMap the privilege map reference\n * @param object $result   the resultset of query\n *\n * @return void\n */\nfunction PMA_mergePrivMapFromResult(&$privMap, $result)\n{\n    while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n        $user = $row['User'];\n        $host = $row['Host'];\n        if (! isset($privMap[$user])) {\n            $privMap[$user] = array();\n        }\n        if (! isset($privMap[$user][$host])) {\n            $privMap[$user][$host] = array();\n        }\n        $privMap[$user][$host][] = $row;\n    }\n}\n\n/**\n * Get HTML snippet for privileges table head\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForPrivsTableHead()\n{\n    return '<thead>'\n        . '<tr>'\n        . '<th></th>'\n        . '<th>' . __('User name') . '</th>'\n        . '<th>' . __('Host name') . '</th>'\n        . '<th>' . __('Type') . '</th>'\n        . '<th>' . __('Privileges') . '</th>'\n        . '<th>' . __('Grant') . '</th>'\n        . '<th>' . __('Action') . '</th>'\n        . '</tr>'\n        . '</thead>';\n}\n\n/**\n * Get HTML error for View Users form\n * For non superusers such as grant/create users\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForViewUsersError()\n{\n    return Message::error(\n        __('Not enough privilege to view users.')\n    )->getDisplay();\n}\n\n/**\n * Get HTML snippet for table body of specific database or table privileges\n *\n * @param array  $privMap privilege map\n * @param string $db      database\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlTableBodyForSpecificDbOrTablePrivs($privMap, $db)\n{\n    $html_output = '<tbody>';\n    $index_checkbox = 0;\n    $odd_row = true;\n    if (empty($privMap)) {\n        $html_output .= '<tr class=\"odd\">'\n            . '<td colspan=\"6\">'\n            . __('No user found.')\n            . '</td>'\n            . '</tr>'\n            . '</tbody>';\n        return $html_output;\n    }\n\n    foreach ($privMap as $current_user => $val) {\n        foreach ($val as $current_host => $current_privileges) {\n            $nbPrivileges = count($current_privileges);\n            $html_output .= '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">';\n\n            $value = htmlspecialchars($current_user . '&amp;#27;' . $current_host);\n            $html_output .= '<td';\n            if ($nbPrivileges > 1) {\n                $html_output .= ' rowspan=\"' . $nbPrivileges . '\"';\n            }\n            $html_output .= '>';\n            $html_output .= '<input type=\"checkbox\" class=\"checkall\" '\n                . 'name=\"selected_usr[]\" '\n                . 'id=\"checkbox_sel_users_' . ($index_checkbox++) . '\" '\n                . 'value=\"' . $value . '\" /></td>' . \"\\n\";\n\n            // user\n            $html_output .= '<td';\n            if ($nbPrivileges > 1) {\n                $html_output .= ' rowspan=\"' . $nbPrivileges . '\"';\n            }\n            $html_output .= '>';\n            if (empty($current_user)) {\n                $html_output .= '<span style=\"color: #FF0000\">'\n                    . __('Any') . '</span>';\n            } else {\n                $html_output .= htmlspecialchars($current_user);\n            }\n            $html_output .= '</td>';\n\n            // host\n            $html_output .= '<td';\n            if ($nbPrivileges > 1) {\n                $html_output .= ' rowspan=\"' . $nbPrivileges . '\"';\n            }\n            $html_output .= '>';\n            $html_output .= htmlspecialchars($current_host);\n            $html_output .= '</td>';\n\n            $html_output .= PMA_getHtmlListOfPrivs(\n                $db, $current_privileges, $current_user,\n                $current_host, $odd_row\n            );\n\n            $odd_row = ! $odd_row;\n        }\n    }\n\n    //For fetching routine based privileges\n    $html_output .= PMA_getHtmlTableBodyForSpecificDbRoutinePrivs($db, $odd_row, $index_checkbox);\n    $html_output .= '</tbody>';\n\n    return $html_output;\n}\n\n/**\n * Get HTML to display privileges\n *\n * @param string  $db                 Database name\n * @param array   $current_privileges List of privileges\n * @param string  $current_user       Current user\n * @param string  $current_host       Current host\n * @param boolean $odd_row            Current row is odd\n *\n * @return string HTML to display privileges\n */\nfunction PMA_getHtmlListOfPrivs(\n    $db, $current_privileges, $current_user,\n    $current_host, $odd_row\n) {\n    $nbPrivileges = count($current_privileges);\n    $html_output = null;\n    for ($i = 0; $i < $nbPrivileges; $i++) {\n        $current = $current_privileges[$i];\n\n        // type\n        $html_output .= '<td>';\n        if ($current['Type'] == 'g') {\n            $html_output .= __('global');\n        } elseif ($current['Type'] == 'd') {\n            if ($current['Db'] == Util::escapeMysqlWildcards($db)) {\n                $html_output .= __('database-specific');\n            } else {\n                $html_output .= __('wildcard') . ': '\n                    . '<code>'\n                    . htmlspecialchars($current['Db'])\n                    . '</code>';\n            }\n        } elseif ($current['Type'] == 't') {\n            $html_output .= __('table-specific');\n        }\n        $html_output .= '</td>';\n\n        // privileges\n        $html_output .= '<td>';\n        if (isset($current['Table_name'])) {\n            $privList = explode(',', $current['Table_priv']);\n            $privs = array();\n            $grantsArr = PMA_getTableGrantsArray();\n            foreach ($grantsArr as $grant) {\n                $privs[$grant[0]] = 'N';\n                foreach ($privList as $priv) {\n                    if ($grant[0] == $priv) {\n                        $privs[$grant[0]] = 'Y';\n                    }\n                }\n            }\n            $html_output .= '<code>'\n                . join(\n                    ',',\n                    PMA_extractPrivInfo($privs, true, true)\n                )\n                . '</code>';\n        } else {\n            $html_output .= '<code>'\n                . join(\n                    ',',\n                    PMA_extractPrivInfo($current, true, false)\n                )\n                . '</code>';\n        }\n        $html_output .= '</td>';\n\n        // grant\n        $html_output .= '<td>';\n        $containsGrant = false;\n        if (isset($current['Table_name'])) {\n            $privList = explode(',', $current['Table_priv']);\n            foreach ($privList as $priv) {\n                if ($priv == 'Grant') {\n                    $containsGrant = true;\n                }\n            }\n        } else {\n            $containsGrant = $current['Grant_priv'] == 'Y';\n        }\n        $html_output .= ($containsGrant ? __('Yes') : __('No'));\n        $html_output .= '</td>';\n\n        // action\n        $html_output .= '<td>';\n        if ($GLOBALS['is_grantuser']) {\n            $specific_db = (isset($current['Db']) && $current['Db'] != '*')\n                ? $current['Db'] : '';\n            $specific_table = (isset($current['Table_name'])\n                && $current['Table_name'] != '*')\n                ? $current['Table_name'] : '';\n            $html_output .= PMA_getUserLink(\n                'edit',\n                $current_user,\n                $current_host,\n                $specific_db,\n                $specific_table\n            );\n        }\n        $html_output .= '</td>';\n\n        $html_output .= '</tr>';\n        if (($i + 1) < $nbPrivileges) {\n            $html_output .= '<tr class=\"noclick '\n                . ($odd_row ? 'odd' : 'even') . '\">';\n        }\n    }\n    return $html_output;\n}\n\n/**\n * Returns edit, revoke or export link for a user.\n *\n * @param string $linktype    The link type (edit | revoke | export)\n * @param string $username    User name\n * @param string $hostname    Host name\n * @param string $dbname      Database name\n * @param string $tablename   Table name\n * @param string $routinename Routine name\n * @param string $initial     Initial value\n *\n * @return string HTML code with link\n */\nfunction PMA_getUserLink(\n    $linktype, $username, $hostname, $dbname = '',\n    $tablename = '', $routinename = '', $initial = ''\n) {\n    $html = '<a';\n    switch($linktype) {\n    case 'edit':\n        $html .= ' class=\"edit_user_anchor\"';\n        break;\n    case 'export':\n        $html .= ' class=\"export_user_anchor ajax\"';\n        break;\n    }\n    $params = array(\n        'username' => $username,\n        'hostname' => $hostname\n    );\n    switch($linktype) {\n    case 'edit':\n        $params['dbname'] = $dbname;\n        $params['tablename'] = $tablename;\n        $params['routinename'] = $routinename;\n        break;\n    case 'revoke':\n        $params['dbname'] = $dbname;\n        $params['tablename'] = $tablename;\n        $params['routinename'] = $routinename;\n        $params['revokeall'] = 1;\n        break;\n    case 'export':\n        $params['initial'] = $initial;\n        $params['export'] = 1;\n        break;\n    }\n\n    $html .= ' href=\"server_privileges.php'\n        . PMA_URL_getCommon($params)\n        . '\">';\n\n    switch($linktype) {\n    case 'edit':\n        $html .= Util::getIcon('b_usredit.png', __('Edit privileges'));\n        break;\n    case 'revoke':\n        $html .= Util::getIcon('b_usrdrop.png', __('Revoke'));\n        break;\n    case 'export':\n        $html .= Util::getIcon('b_tblexport.png', __('Export'));\n        break;\n    }\n    $html .= '</a>';\n\n    return $html;\n}\n\n/**\n * Returns user group edit link\n *\n * @param string $username User name\n *\n * @return string HTML code with link\n */\nfunction PMA_getUserGroupEditLink($username)\n{\n     return '<a class=\"edit_user_group_anchor ajax\"'\n        . ' href=\"server_privileges.php'\n        . PMA_URL_getCommon(array('username' => $username))\n        . '\">'\n        . Util::getIcon('b_usrlist.png', __('Edit user group'))\n        . '</a>';\n}\n\n/**\n * Returns number of defined user groups\n *\n * @return integer $user_group_count\n */\nfunction PMA_getUserGroupCount()\n{\n    $cfgRelation = PMA_getRelationsParam();\n    $user_group_table = Util::backquote($cfgRelation['db'])\n        . '.' . Util::backquote($cfgRelation['usergroups']);\n    $sql_query = 'SELECT COUNT(*) FROM ' . $user_group_table;\n    $user_group_count = $GLOBALS['dbi']->fetchValue(\n        $sql_query, 0, 0, $GLOBALS['controllink']\n    );\n\n    return $user_group_count;\n}\n\n/**\n * This function return the extra data array for the ajax behavior\n *\n * @param string $password  password\n * @param string $sql_query sql query\n * @param string $hostname  hostname\n * @param string $username  username\n *\n * @return array $extra_data\n */\nfunction PMA_getExtraDataForAjaxBehavior(\n    $password, $sql_query, $hostname, $username\n) {\n    if (isset($GLOBALS['dbname'])) {\n        //if (preg_match('/\\\\\\\\(?:_|%)/i', $dbname)) {\n        if (preg_match('/(?<!\\\\\\\\)(?:_|%)/i', $GLOBALS['dbname'])) {\n            $dbname_is_wildcard = true;\n        } else {\n            $dbname_is_wildcard = false;\n        }\n    }\n\n    $user_group_count = 0;\n    if ($GLOBALS['cfgRelation']['menuswork']) {\n        $user_group_count = PMA_getUserGroupCount();\n    }\n\n    $extra_data = array();\n    if (mb_strlen($sql_query)) {\n        $extra_data['sql_query'] = Util::getMessage(null, $sql_query);\n    }\n\n    if (isset($_REQUEST['change_copy'])) {\n        /**\n         * generate html on the fly for the new user that was just created.\n         */\n        $new_user_string = '<tr>' . \"\\n\"\n            . '<td> <input type=\"checkbox\" name=\"selected_usr[]\" '\n            . 'id=\"checkbox_sel_users_\"'\n            . 'value=\"'\n            . htmlspecialchars($username)\n            . '&amp;#27;' . htmlspecialchars($hostname) . '\" />'\n            . '</td>' . \"\\n\"\n            . '<td><label for=\"checkbox_sel_users_\">'\n            . (empty($_REQUEST['username'])\n                    ? '<span style=\"color: #FF0000\">' . __('Any') . '</span>'\n                    : htmlspecialchars($username) ) . '</label></td>' . \"\\n\"\n            . '<td>' . htmlspecialchars($hostname) . '</td>' . \"\\n\";\n\n        $new_user_string .= '<td>';\n\n        if (! empty($password) || isset($_POST['pma_pw'])) {\n            $new_user_string .= __('Yes');\n        } else {\n            $new_user_string .= '<span style=\"color: #FF0000\">'\n                . __('No')\n            . '</span>';\n        };\n\n        $new_user_string .= '</td>' . \"\\n\";\n        $new_user_string .= '<td>'\n            . '<code>' . join(', ', PMA_extractPrivInfo(null, true)) . '</code>'\n            . '</td>'; //Fill in privileges here\n\n        // if $cfg['Servers'][$i]['users'] and $cfg['Servers'][$i]['usergroups'] are\n        // enabled\n        $cfgRelation = PMA_getRelationsParam();\n        if (isset($cfgRelation['users']) && isset($cfgRelation['usergroups'])) {\n            $new_user_string .= '<td class=\"usrGroup\"></td>';\n        }\n\n        $new_user_string .= '<td>';\n        if ((isset($_POST['Grant_priv']) && $_POST['Grant_priv'] == 'Y')) {\n            $new_user_string .= __('Yes');\n        } else {\n            $new_user_string .= __('No');\n        }\n        $new_user_string .='</td>';\n\n        if ($GLOBALS['is_grantuser']) {\n            $new_user_string .= '<td>'\n                . PMA_getUserLink('edit', $username, $hostname)\n                . '</td>' . \"\\n\";\n        }\n\n        if ($cfgRelation['menuswork'] && $user_group_count > 0) {\n            $new_user_string .= '<td>'\n                . PMA_getUserGroupEditLink($username)\n                . '</td>' . \"\\n\";\n        }\n\n        $new_user_string .= '<td>'\n            . PMA_getUserLink(\n                'export',\n                $username,\n                $hostname,\n                '',\n                '',\n                '',\n                isset($_GET['initial']) ? $_GET['initial'] : ''\n            )\n            . '</td>' . \"\\n\";\n\n        $new_user_string .= '</tr>';\n\n        $extra_data['new_user_string'] = $new_user_string;\n\n        /**\n         * Generate the string for this alphabet's initial, to update the user\n         * pagination\n         */\n        $new_user_initial = mb_strtoupper(\n            mb_substr($username, 0, 1)\n        );\n        $newUserInitialString = '<a href=\"server_privileges.php'\n            . PMA_URL_getCommon(array('initial' => $new_user_initial)) . '\">'\n            . $new_user_initial . '</a>';\n        $extra_data['new_user_initial'] = $new_user_initial;\n        $extra_data['new_user_initial_string'] = $newUserInitialString;\n    }\n\n    if (isset($_POST['update_privs'])) {\n        $extra_data['db_specific_privs'] = false;\n        $extra_data['db_wildcard_privs'] = false;\n        if (isset($dbname_is_wildcard)) {\n            $extra_data['db_specific_privs'] = ! $dbname_is_wildcard;\n            $extra_data['db_wildcard_privs'] = $dbname_is_wildcard;\n        }\n        $new_privileges = join(', ', PMA_extractPrivInfo(null, true));\n\n        $extra_data['new_privileges'] = $new_privileges;\n    }\n\n    if (isset($_REQUEST['validate_username'])) {\n        $sql_query = \"SELECT * FROM `mysql`.`user` WHERE `User` = '\"\n            . $_REQUEST['username'] . \"';\";\n        $res = $GLOBALS['dbi']->query($sql_query);\n        $row = $GLOBALS['dbi']->fetchRow($res);\n        if (empty($row)) {\n            $extra_data['user_exists'] = false;\n        } else {\n            $extra_data['user_exists'] = true;\n        }\n    }\n\n    return $extra_data;\n}\n\n/**\n * Get the HTML snippet for change user login information\n *\n * @param string $username username\n * @param string $hostname host name\n *\n * @return string HTML snippet\n */\nfunction PMA_getChangeLoginInformationHtmlForm($username, $hostname)\n{\n    $choices = array(\n        '4' => __('\u2026 keep the old one.'),\n        '1' => __('\u2026 delete the old one from the user tables.'),\n        '2' => __(\n            '\u2026 revoke all active privileges from '\n            . 'the old one and delete it afterwards.'\n        ),\n        '3' => __(\n            '\u2026 delete the old one from the user tables '\n            . 'and reload the privileges afterwards.'\n        )\n    );\n\n    $html_output = '<form action=\"server_privileges.php\" '\n        . 'onsubmit=\"return checkAddUser(this);\" '\n        . 'method=\"post\" class=\"copyUserForm submenu-item\">' . \"\\n\"\n        . PMA_URL_getHiddenInputs('', '')\n        . '<input type=\"hidden\" name=\"old_username\" '\n        . 'value=\"' . htmlspecialchars($username) . '\" />' . \"\\n\"\n        . '<input type=\"hidden\" name=\"old_hostname\" '\n        . 'value=\"' . htmlspecialchars($hostname) . '\" />' . \"\\n\"\n        . '<fieldset id=\"fieldset_change_copy_user\">' . \"\\n\"\n        . '<legend data-submenu-label=\"' . __('Login Information') . '\">' . \"\\n\"\n        . __('Change login information / Copy user account')\n        . '</legend>' . \"\\n\"\n        . PMA_getHtmlForLoginInformationFields('change', $username, $hostname);\n\n    $html_output .= '<fieldset id=\"fieldset_mode\">' . \"\\n\"\n        . ' <legend>'\n        . __('Create a new user account with the same privileges and \u2026')\n        . '</legend>' . \"\\n\";\n    $html_output .= Util::getRadioFields(\n        'mode', $choices, '4', true\n    );\n    $html_output .= '</fieldset>' . \"\\n\"\n       . '</fieldset>' . \"\\n\";\n\n    $html_output .= '<fieldset id=\"fieldset_change_copy_user_footer\" '\n        . 'class=\"tblFooters\">' . \"\\n\"\n        . '<input type=\"hidden\" name=\"change_copy\" value=\"1\" />' . \"\\n\"\n        . '<input type=\"submit\" value=\"' . __('Go') . '\" />' . \"\\n\"\n        . '</fieldset>' . \"\\n\"\n        . '</form>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Provide a line with links to the relevant database and table\n *\n * @param string $url_dbname url database name that urlencode() string\n * @param string $dbname     database name\n * @param string $tablename  table name\n *\n * @return string HTML snippet\n */\nfunction PMA_getLinkToDbAndTable($url_dbname, $dbname, $tablename)\n{\n    $html_output = '[ ' . __('Database')\n        . ' <a href=\"' . Util::getScriptNameForOption(\n            $GLOBALS['cfg']['DefaultTabDatabase'], 'database'\n        )\n        . PMA_URL_getCommon(\n            array(\n                'db' => $url_dbname,\n                'reload' => 1\n            )\n        )\n        . '\">'\n        . htmlspecialchars($dbname) . ': '\n        . Util::getTitleForTarget(\n            $GLOBALS['cfg']['DefaultTabDatabase']\n        )\n        . \"</a> ]\\n\";\n\n    if (mb_strlen($tablename)) {\n        $html_output .= ' [ ' . __('Table') . ' <a href=\"'\n            . Util::getScriptNameForOption(\n                $GLOBALS['cfg']['DefaultTabTable'], 'table'\n            )\n            . PMA_URL_getCommon(\n                array(\n                    'db' => $url_dbname,\n                    'table' => $tablename,\n                    'reload' => 1,\n                )\n            )\n            . '\">' . htmlspecialchars($tablename) . ': '\n            . Util::getTitleForTarget(\n                $GLOBALS['cfg']['DefaultTabTable']\n            )\n            . \"</a> ]\\n\";\n    }\n    return $html_output;\n}\n\n/**\n * no db name given, so we want all privs for the given user\n * db name was given, so we want all user specific rights for this db\n * So this function returns user rights as an array\n *\n * @param string $username username\n * @param string $hostname host name\n * @param string $type     database or table\n * @param string $dbname   database name\n *\n * @return array $db_rights database rights\n */\nfunction PMA_getUserSpecificRights($username, $hostname, $type, $dbname = '')\n{\n    $user_host_condition = \" WHERE `User`\"\n        . \" = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host`\"\n        . \" = '\" . Util::sqlAddSlashes($hostname) . \"'\";\n\n    if ($type == 'database') {\n        $tables_to_search_for_users = array(\n            'tables_priv', 'columns_priv', 'procs_priv'\n        );\n        $dbOrTableName = 'Db';\n    } elseif ($type == 'table') {\n        $user_host_condition .= \" AND `Db` LIKE '\"\n            . Util::sqlAddSlashes($dbname, true) . \"'\";\n        $tables_to_search_for_users = array('columns_priv',);\n        $dbOrTableName = 'Table_name';\n    } else { // routine\n        $user_host_condition .= \" AND `Db` LIKE '\"\n            . Util::sqlAddSlashes($dbname, true) . \"'\";\n        $tables_to_search_for_users = array('procs_priv',);\n        $dbOrTableName = 'Routine_name';\n    }\n\n    // we also want privileges for this user not in table `db` but in other table\n    $tables = $GLOBALS['dbi']->fetchResult('SHOW TABLES FROM `mysql`;');\n\n    $db_rights_sqls = array();\n    foreach ($tables_to_search_for_users as $table_search_in) {\n        if (in_array($table_search_in, $tables)) {\n            $db_rights_sqls[] = '\n                SELECT DISTINCT `' . $dbOrTableName . '`\n                FROM `mysql`.' . Util::backquote($table_search_in)\n               . $user_host_condition;\n        }\n    }\n\n    $user_defaults = array(\n        $dbOrTableName  => '',\n        'Grant_priv'    => 'N',\n        'privs'         => array('USAGE'),\n        'Column_priv'   => true,\n    );\n\n    // for the rights\n    $db_rights = array();\n\n    $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'\n        . ' ORDER BY `' . $dbOrTableName . '` ASC';\n\n    $db_rights_result = $GLOBALS['dbi']->query($db_rights_sql);\n\n    while ($db_rights_row = $GLOBALS['dbi']->fetchAssoc($db_rights_result)) {\n        $db_rights_row = array_merge($user_defaults, $db_rights_row);\n        if ($type == 'database') {\n            // only Db names in the table `mysql`.`db` uses wildcards\n            // as we are in the db specific rights display we want\n            // all db names escaped, also from other sources\n            $db_rights_row['Db'] = Util::escapeMysqlWildcards(\n                $db_rights_row['Db']\n            );\n        }\n        $db_rights[$db_rights_row[$dbOrTableName]] = $db_rights_row;\n    }\n\n    $GLOBALS['dbi']->freeResult($db_rights_result);\n\n    if ($type == 'database') {\n        $sql_query = 'SELECT * FROM `mysql`.`db`'\n            . $user_host_condition . ' ORDER BY `Db` ASC';\n    } elseif ($type == 'table') {\n        $sql_query = 'SELECT `Table_name`,'\n            . ' `Table_priv`,'\n            . ' IF(`Column_priv` = _latin1 \\'\\', 0, 1)'\n            . ' AS \\'Column_priv\\''\n            . ' FROM `mysql`.`tables_priv`'\n            . $user_host_condition\n            . ' ORDER BY `Table_name` ASC;';\n    } else {\n        $sql_query = \"SELECT `Routine_name`, `Proc_priv`\"\n            . \" FROM `mysql`.`procs_priv`\"\n            . $user_host_condition\n            . \" ORDER BY `Routine_name`\";\n\n    }\n\n    $result = $GLOBALS['dbi']->query($sql_query);\n\n    while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n        if (isset($db_rights[$row[$dbOrTableName]])) {\n            $db_rights[$row[$dbOrTableName]]\n                = array_merge($db_rights[$row[$dbOrTableName]], $row);\n        } else {\n            $db_rights[$row[$dbOrTableName]] = $row;\n        }\n        if ($type == 'database') {\n            // there are db specific rights for this user\n            // so we can drop this db rights\n            $db_rights[$row['Db']]['can_delete'] = true;\n        }\n    }\n    $GLOBALS['dbi']->freeResult($result);\n    return $db_rights;\n}\n\n/**\n * Get a HTML table for display user's tabel specific or database specific rights\n *\n * @param string $username username\n * @param string $hostname host name\n * @param string $type     database, table or routine\n * @param string $dbname   database name\n *\n * @return array $html_output\n */\nfunction PMA_getHtmlForAllTableSpecificRights(\n    $username, $hostname, $type, $dbname = ''\n) {\n    $uiData = array(\n        'database' => array(\n            'formId'       => 'database_specific_priv',\n            'subMenuLabel' => __('Database'),\n            'legend'       => __('Database-specific privileges'),\n            'typeLabel'    => __('Database'),\n        ),\n        'table' => array(\n            'formId'       => 'table_specific_priv',\n            'subMenuLabel' => __('Table'),\n            'legend'       => __('Table-specific privileges'),\n            'typeLabel'    => __('Table'),\n        ),\n        'routine' => array(\n            'formId'       => 'routine_specific_priv',\n            'subMenuLabel' => __('Routine'),\n            'legend'       => __('Routine-specific privileges'),\n            'typeLabel'    => __('Routine'),\n        ),\n    );\n\n    /**\n     * no db name given, so we want all privs for the given user\n     * db name was given, so we want all user specific rights for this db\n     */\n    $db_rights = PMA_getUserSpecificRights($username, $hostname, $type, $dbname);\n    ksort($db_rights);\n\n    $foundRows = array();\n    $privileges = array();\n    foreach ($db_rights as $row) {\n        $onePrivilege = array();\n\n        $paramTableName = '';\n        $paramRoutineName = '';\n\n        if ($type == 'database') {\n            $name = $row['Db'];\n            $onePrivilege['grant']        = $row['Grant_priv'] == 'Y';\n            $onePrivilege['tablePrivs']   = ! empty($row['Table_priv'])\n                || ! empty($row['Column_priv']);\n            $onePrivilege['privileges'] = join(',', PMA_extractPrivInfo($row, true));\n\n            $paramDbName = $row['Db'];\n\n        } elseif ($type == 'table') {\n            $name = $row['Table_name'];\n            $onePrivilege['grant'] = in_array(\n                'Grant',\n                explode(',', $row['Table_priv'])\n            );\n            $onePrivilege['columnPrivs']  = ! empty($row['Column_priv']);\n            $onePrivilege['privileges'] = join(',', PMA_extractPrivInfo($row, true));\n\n            $paramDbName = $dbname;\n            $paramTableName = $row['Table_name'];\n\n        } else { // routine\n            $name = $row['Routine_name'];\n            $onePrivilege['grant'] = in_array(\n                'Grant',\n                explode(',', $row['Proc_priv'])\n            );\n\n            $privs = array(\n                'Alter_routine_priv' => 'N',\n                'Execute_priv'       => 'N',\n                'Grant_priv'         => 'N',\n            );\n            foreach (explode(',', $row['Proc_priv']) as $priv) {\n                if ($priv == 'Alter Routine') {\n                    $privs['Alter_routine_priv'] = 'Y';\n                } else {\n                    $privs[$priv . '_priv'] = 'Y';\n                }\n            }\n            $onePrivilege['privileges'] = join(\n                ',',\n                PMA_extractPrivInfo($privs, true)\n            );\n\n            $paramDbName = $dbname;\n            $paramRoutineName = $row['Routine_name'];\n        }\n\n        $foundRows[] = $name;\n        $onePrivilege['name'] = $name;\n\n        $onePrivilege['editLink'] = '';\n        if ($GLOBALS['is_grantuser']) {\n            $onePrivilege['editLink'] = PMA_getUserLink(\n                'edit',\n                $username,\n                $hostname,\n                $paramDbName,\n                $paramTableName,\n                $paramRoutineName\n            );\n        }\n\n        $onePrivilege['revokeLink'] = '';\n        if ($type != 'database' || ! empty($row['can_delete'])) {\n            $onePrivilege['revokeLink'] = PMA_getUserLink(\n                'revoke',\n                $username,\n                $hostname,\n                $paramDbName,\n                $paramTableName,\n                $paramRoutineName\n            );\n        }\n\n        $privileges[] = $onePrivilege;\n    }\n\n    $data = $uiData[$type];\n    $data['privileges'] = $privileges;\n    $data['userName']   = $username;\n    $data['hostName']   = $hostname;\n    $data['database']   = $dbname;\n    $data['type']       = $type;\n\n    if ($type == 'database') {\n\n        // we already have the list of databases from libraries/common.inc.php\n        // via $pma = new PMA;\n        $pred_db_array = $GLOBALS['dblist']->databases;\n        $databases_to_skip = array('information_schema', 'performance_schema');\n\n        $databases = array();\n        if (! empty($pred_db_array)) {\n            foreach ($pred_db_array as $current_db) {\n                if (in_array($current_db, $databases_to_skip)) {\n                    continue;\n                }\n                $current_db_escaped = Util::escapeMysqlWildcards($current_db);\n                // cannot use array_diff() once, outside of the loop,\n                // because the list of databases has special characters\n                // already escaped in $foundRows,\n                // contrary to the output of SHOW DATABASES\n                if (! in_array($current_db_escaped, $foundRows)) {\n                    $databases[] = $current_db;\n                }\n            }\n        }\n        $data['databases'] = $databases;\n\n    } elseif ($type == 'table') {\n        $result = @$GLOBALS['dbi']->tryQuery(\n            \"SHOW TABLES FROM \" . Util::backquote($dbname),\n            null,\n            DatabaseInterface::QUERY_STORE\n        );\n\n        $tables = array();\n        if ($result) {\n            while ($row = $GLOBALS['dbi']->fetchRow($result)) {\n                if (! in_array($row[0], $foundRows)) {\n                    $tables[] = $row[0];\n                }\n            }\n            $GLOBALS['dbi']->freeResult($result);\n        }\n        $data['tables'] = $tables;\n\n    } else { // routine\n        $routineData = $GLOBALS['dbi']->getRoutines($dbname);\n\n        $routines = array();\n        foreach ($routineData as $routine) {\n            if (! in_array($routine['name'], $foundRows)) {\n                $routines[] = $routine['name'];\n            }\n        }\n        $data['routines'] = $routines;\n    }\n\n    $html_output = Template::get('privileges/privileges_summary')\n        ->render($data);\n\n    return $html_output;\n}\n\n/**\n * Get HTML for display the users overview\n * (if less than 50 users, display them immediately)\n *\n * @param array  $result        ran sql query\n * @param array  $db_rights     user's database rights array\n * @param string $pmaThemeImage a image source link\n * @param string $text_dir      text directory\n *\n * @return string HTML snippet\n */\nfunction PMA_getUsersOverview($result, $db_rights, $pmaThemeImage, $text_dir)\n{\n    while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n        $row['privs'] = PMA_extractPrivInfo($row, true);\n        $db_rights[$row['User']][$row['Host']] = $row;\n    }\n    @$GLOBALS['dbi']->freeResult($result);\n    $user_group_count = 0;\n    if ($GLOBALS['cfgRelation']['menuswork']) {\n        $user_group_count = PMA_getUserGroupCount();\n    }\n\n    $html_output\n        = '<form name=\"usersForm\" id=\"usersForm\" action=\"server_privileges.php\" '\n        . 'method=\"post\">' . \"\\n\"\n        . PMA_URL_getHiddenInputs('', '')\n        . '<table id=\"tableuserrights\" class=\"data\">' . \"\\n\"\n        . '<thead>' . \"\\n\"\n        . '<tr><th></th>' . \"\\n\"\n        . '<th>' . __('User name') . '</th>' . \"\\n\"\n        . '<th>' . __('Host name') . '</th>' . \"\\n\"\n        . '<th>' . __('Password') . '</th>' . \"\\n\"\n        . '<th>' . __('Global privileges') . ' '\n        . Util::showHint(\n            __('Note: MySQL privilege names are expressed in English.')\n        )\n        . '</th>' . \"\\n\";\n    if ($GLOBALS['cfgRelation']['menuswork']) {\n        $html_output .= '<th>' . __('User group') . '</th>' . \"\\n\";\n    }\n    $html_output .= '<th>' . __('Grant') . '</th>' . \"\\n\"\n        . '<th colspan=\"' . ($user_group_count > 0 ? '3' : '2') . '\">'\n        . __('Action') . '</th>' . \"\\n\"\n        . '</tr>' . \"\\n\"\n        . '</thead>' . \"\\n\";\n\n    $html_output .= '<tbody>' . \"\\n\";\n    $html_output .= PMA_getHtmlTableBodyForUserRights($db_rights);\n    $html_output .= '</tbody>'\n        . '</table>' . \"\\n\";\n\n    $html_output .= '<div class=\"floatleft\">'\n        . Util::getWithSelected($pmaThemeImage, $text_dir, \"usersForm\") . \"\\n\";\n\n    $html_output .= Util::getButtonOrImage(\n        'submit_mult', 'mult_submit', 'submit_mult_export',\n        __('Export'), 'b_tblexport.png', 'export'\n    );\n    $html_output .= '<input type=\"hidden\" name=\"initial\" '\n        . 'value=\"' . (isset($_GET['initial']) ? htmlspecialchars($_GET['initial']) : '') . '\" />';\n    $html_output .= '</div>'\n        . '<div class=\"clear_both\" style=\"clear:both\"></div>';\n\n    // add/delete user fieldset\n    $html_output .= PMA_getFieldsetForAddDeleteUser();\n    $html_output .= '</form>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get table body for 'tableuserrights' table in userform\n *\n * @param array $db_rights user's database rights array\n *\n * @return string HTML snippet\n */\nfunction PMA_getHtmlTableBodyForUserRights($db_rights)\n{\n    $cfgRelation = PMA_getRelationsParam();\n    if ($cfgRelation['menuswork']) {\n        $users_table = Util::backquote($cfgRelation['db'])\n            . \".\" . Util::backquote($cfgRelation['users']);\n        $sql_query = 'SELECT * FROM ' . $users_table;\n        $result = PMA_queryAsControlUser($sql_query, false);\n        $group_assignment = array();\n        if ($result) {\n            while ($row = $GLOBALS['dbi']->fetchAssoc($result)) {\n                $group_assignment[$row['username']] = $row['usergroup'];\n            }\n        }\n        $GLOBALS['dbi']->freeResult($result);\n\n        $user_group_count = PMA_getUserGroupCount();\n    }\n\n    $odd_row = true;\n    $index_checkbox = 0;\n    $html_output = '';\n    foreach ($db_rights as $user) {\n        ksort($user);\n        foreach ($user as $host) {\n            $index_checkbox++;\n            $html_output .= '<tr class=\"' . ($odd_row ? 'odd' : 'even') . '\">'\n                . \"\\n\";\n            $html_output .= '<td>'\n                . '<input type=\"checkbox\" class=\"checkall\" name=\"selected_usr[]\" '\n                . 'id=\"checkbox_sel_users_'\n                . $index_checkbox . '\" value=\"'\n                . htmlspecialchars($host['User'] . '&amp;#27;' . $host['Host'])\n                . '\"'\n                . ' /></td>' . \"\\n\";\n\n            $html_output .= '<td><label '\n                . 'for=\"checkbox_sel_users_' . $index_checkbox . '\">'\n                . (empty($host['User'])\n                    ? '<span style=\"color: #FF0000\">' . __('Any') . '</span>'\n                    : htmlspecialchars($host['User'])) . '</label></td>' . \"\\n\"\n                . '<td>' . htmlspecialchars($host['Host']) . '</td>' . \"\\n\";\n\n            $html_output .= '<td>';\n\n            $password_column = 'Password';\n\n            $check_plugin_query = \"SELECT * FROM `mysql`.`user` WHERE \"\n                . \"`User` = '\" . $host['User'] . \"' AND `Host` = '\"\n                . $host['Host'] . \"'\";\n            $res = $GLOBALS['dbi']->fetchSingleRow($check_plugin_query);\n\n            if ((isset($res['authentication_string'])\n                && ! empty($res['authentication_string']))\n                || (isset($res['Password'])\n                && ! empty($res['Password']))\n            ) {\n                $host[$password_column] = 'Y';\n            } else {\n                $host[$password_column] = 'N';\n            }\n\n            switch ($host[$password_column]) {\n            case 'Y':\n                $html_output .= __('Yes');\n                break;\n            case 'N':\n                $html_output .= '<span style=\"color: #FF0000\">' . __('No')\n                    . '</span>';\n                break;\n            // this happens if this is a definition not coming from mysql.user\n            default:\n                $html_output .= '--'; // in future version, replace by \"not present\"\n                break;\n            } // end switch\n\n            $html_output .= '</td>' . \"\\n\";\n\n            $html_output .= '<td><code>' . \"\\n\"\n                . '' . implode(',' . \"\\n\" . '            ', $host['privs']) . \"\\n\"\n                . '</code></td>' . \"\\n\";\n            if ($cfgRelation['menuswork']) {\n                $html_output .= '<td class=\"usrGroup\">' . \"\\n\"\n                    . (isset($group_assignment[$host['User']])\n                        ? $group_assignment[$host['User']]\n                        : ''\n                    )\n                    . '</td>' . \"\\n\";\n            }\n            $html_output .= '<td>'\n                . ($host['Grant_priv'] == 'Y' ? __('Yes') : __('No'))\n                . '</td>' . \"\\n\";\n\n            if ($GLOBALS['is_grantuser']) {\n                $html_output .= '<td class=\"center\">'\n                    . PMA_getUserLink(\n                        'edit',\n                        $host['User'],\n                        $host['Host']\n                    )\n                    . '</td>';\n            }\n            if ($cfgRelation['menuswork'] && $user_group_count > 0) {\n                if (empty($host['User'])) {\n                    $html_output .= '<td class=\"center\"></td>';\n                } else {\n                    $html_output .= '<td class=\"center\">'\n                        . PMA_getUserGroupEditLink($host['User'])\n                        . '</td>';\n                }\n            }\n            $html_output .= '<td class=\"center\">'\n                . PMA_getUserLink(\n                    'export',\n                    $host['User'],\n                    $host['Host'],\n                    '',\n                    '',\n                    '',\n                    isset($_GET['initial']) ? $_GET['initial'] : ''\n                )\n                . '</td>';\n            $html_output .= '</tr>';\n            $odd_row = ! $odd_row;\n        }\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML fieldset for Add/Delete user\n *\n * @return string HTML snippet\n */\nfunction PMA_getFieldsetForAddDeleteUser()\n{\n    $html_output = PMA_getAddUserHtmlFieldset();\n    $html_output .= '<fieldset id=\"fieldset_delete_user\">'\n        . '<legend>' . \"\\n\"\n        . Util::getIcon('b_usrdrop.png')\n        . '            ' . __('Remove selected user accounts') . '' . \"\\n\"\n        . '</legend>' . \"\\n\";\n\n    $html_output .= '<input type=\"hidden\" name=\"mode\" value=\"2\" />' . \"\\n\"\n        . '('\n        . __(\n            'Revoke all active privileges from the users '\n            . 'and delete them afterwards.'\n        )\n        . ')'\n        . '<br />' . \"\\n\";\n\n    $html_output .= '<input type=\"checkbox\" '\n        . 'title=\"'\n        . __('Drop the databases that have the same names as the users.')\n        . '\" '\n        . 'name=\"drop_users_db\" id=\"checkbox_drop_users_db\" />' . \"\\n\";\n\n    $html_output .= '<label for=\"checkbox_drop_users_db\" '\n        . 'title=\"'\n        . __('Drop the databases that have the same names as the users.')\n        . '\">' . \"\\n\"\n        . '            '\n        . __('Drop the databases that have the same names as the users.')\n        . \"\\n\"\n        . '</label>' . \"\\n\"\n        . '</fieldset>' . \"\\n\";\n\n    $html_output .= '<fieldset id=\"fieldset_delete_user_footer\" class=\"tblFooters\">'\n        . \"\\n\";\n    $html_output .= '<input type=\"submit\" name=\"delete\" '\n        . 'value=\"' . __('Go') . '\" id=\"buttonGo\" '\n        . 'class=\"ajax\"/>' . \"\\n\";\n\n    $html_output .= '</fieldset>' . \"\\n\";\n\n    return $html_output;\n}\n\n/**\n * Get HTML for Displays the initials\n *\n * @param array $array_initials array for all initials, even non A-Z\n *\n * @return string HTML snippet\n */\nfunction PMA_getHtmlForInitials($array_initials)\n{\n    // initialize to false the letters A-Z\n    for ($letter_counter = 1; $letter_counter < 27; $letter_counter++) {\n        if (! isset($array_initials[mb_chr($letter_counter + 64)])) {\n            $array_initials[mb_chr($letter_counter + 64)] = false;\n        }\n    }\n\n    $initials = $GLOBALS['dbi']->tryQuery(\n        'SELECT DISTINCT UPPER(LEFT(`User`,1)) FROM `user`'\n        . ' ORDER BY UPPER(LEFT(`User`,1)) ASC',\n        null,\n        PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n    if ($initials) {\n        while (list($tmp_initial) = $GLOBALS['dbi']->fetchRow($initials)) {\n            $array_initials[$tmp_initial] = true;\n        }\n    }\n\n    // Display the initials, which can be any characters, not\n    // just letters. For letters A-Z, we add the non-used letters\n    // as greyed out.\n\n    uksort($array_initials, \"strnatcasecmp\");\n\n    $html_output = '<table id=\"initials_table\" cellspacing=\"5\">'\n        . '<tr>';\n    foreach ($array_initials as $tmp_initial => $initial_was_found) {\n        if ($tmp_initial === null) {\n            continue;\n        }\n\n        if (!$initial_was_found) {\n            $html_output .= '<td>' . $tmp_initial . '</td>';\n            continue;\n        }\n\n        $html_output .= '<td>'\n            . '<a class=\"ajax'\n            . ((isset($_REQUEST['initial'])\n                && $_REQUEST['initial'] === $tmp_initial\n                ) ? ' active' : '')\n            . '\" href=\"server_privileges.php'\n            . PMA_URL_getCommon(array('initial' => $tmp_initial))\n            . '\">' . $tmp_initial\n            . '</a>'\n            . '</td>' . \"\\n\";\n    }\n    $html_output .= '<td>'\n        . '<a href=\"server_privileges.php'\n        . PMA_URL_getCommon(array('showall' => 1))\n        . '\" class=\"nowrap\">' . __('Show all') . '</a></td>' . \"\\n\";\n    $html_output .= '</tr></table>';\n\n    return $html_output;\n}\n\n/**\n * Get the database rights array for Display user overview\n *\n * @return array  $db_rights    database rights array\n */\nfunction PMA_getDbRightsForUserOverview()\n{\n    // we also want users not in table `user` but in other table\n    $tables = $GLOBALS['dbi']->fetchResult('SHOW TABLES FROM `mysql`;');\n\n    $tablesSearchForUsers = array(\n        'user', 'db', 'tables_priv', 'columns_priv', 'procs_priv',\n    );\n\n    $db_rights_sqls = array();\n    foreach ($tablesSearchForUsers as $table_search_in) {\n        if (in_array($table_search_in, $tables)) {\n            $db_rights_sqls[] = 'SELECT DISTINCT `User`, `Host` FROM `mysql`.`'\n                . $table_search_in . '` '\n                . (isset($_GET['initial'])\n                ? PMA_rangeOfUsers($_GET['initial'])\n                : '');\n        }\n    }\n    $user_defaults = array(\n        'User'       => '',\n        'Host'       => '%',\n        'Password'   => '?',\n        'Grant_priv' => 'N',\n        'privs'      => array('USAGE'),\n    );\n\n    // for the rights\n    $db_rights = array();\n\n    $db_rights_sql = '(' . implode(') UNION (', $db_rights_sqls) . ')'\n        . ' ORDER BY `User` ASC, `Host` ASC';\n\n    $db_rights_result = $GLOBALS['dbi']->query($db_rights_sql);\n\n    while ($db_rights_row = $GLOBALS['dbi']->fetchAssoc($db_rights_result)) {\n        $db_rights_row = array_merge($user_defaults, $db_rights_row);\n        $db_rights[$db_rights_row['User']][$db_rights_row['Host']]\n            = $db_rights_row;\n    }\n    $GLOBALS['dbi']->freeResult($db_rights_result);\n    ksort($db_rights);\n\n    return $db_rights;\n}\n\n/**\n * Delete user and get message and sql query for delete user in privileges\n *\n * @param array $queries queries\n *\n * @return array Message\n */\nfunction PMA_deleteUser($queries)\n{\n    $sql_query = '';\n    if (empty($queries)) {\n        $message = Message::error(__('No users selected for deleting!'));\n    } else {\n        if ($_REQUEST['mode'] == 3) {\n            $queries[] = '# ' . __('Reloading the privileges') . ' \u2026';\n            $queries[] = 'FLUSH PRIVILEGES;';\n        }\n        $drop_user_error = '';\n        foreach ($queries as $sql_query) {\n            if ($sql_query{0} != '#') {\n                if (! $GLOBALS['dbi']->tryQuery($sql_query, $GLOBALS['userlink'])) {\n                    $drop_user_error .= $GLOBALS['dbi']->getError() . \"\\n\";\n                }\n            }\n        }\n        // tracking sets this, causing the deleted db to be shown in navi\n        unset($GLOBALS['db']);\n\n        $sql_query = join(\"\\n\", $queries);\n        if (! empty($drop_user_error)) {\n            $message = Message::rawError($drop_user_error);\n        } else {\n            $message = Message::success(\n                __('The selected users have been deleted successfully.')\n            );\n        }\n    }\n    return array($sql_query, $message);\n}\n\n/**\n * Update the privileges and return the success or error message\n *\n * @param string $username  username\n * @param string $hostname  host name\n * @param string $tablename table name\n * @param string $dbname    database name\n * @param string $itemType  item type\n *\n * @return Message success message or error message for update\n */\nfunction PMA_updatePrivileges($username, $hostname, $tablename, $dbname, $itemType)\n{\n    $db_and_table = PMA_wildcardEscapeForGrant($dbname, $tablename);\n\n    $sql_query0 = 'REVOKE ALL PRIVILEGES ON ' . $itemType . ' ' . $db_and_table\n        . ' FROM \\'' . Util::sqlAddSlashes($username)\n        . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n\n    if (! isset($_POST['Grant_priv']) || $_POST['Grant_priv'] != 'Y') {\n        $sql_query1 = 'REVOKE GRANT OPTION ON ' . $itemType . ' ' . $db_and_table\n            . ' FROM \\'' . Util::sqlAddSlashes($username) . '\\'@\\''\n            . Util::sqlAddSlashes($hostname) . '\\';';\n    } else {\n        $sql_query1 = '';\n    }\n\n    // Should not do a GRANT USAGE for a table-specific privilege, it\n    // causes problems later (cannot revoke it)\n    if (! (mb_strlen($tablename)\n        && 'USAGE' == implode('', PMA_extractPrivInfo()))\n    ) {\n        $sql_query2 = 'GRANT ' . join(', ', PMA_extractPrivInfo())\n            . ' ON ' . $itemType . ' ' . $db_and_table\n            . ' TO \\'' . Util::sqlAddSlashes($username) . '\\'@\\''\n            . Util::sqlAddSlashes($hostname) . '\\'';\n\n        if (! mb_strlen($dbname)) {\n            // add REQUIRE clause\n            $sql_query2 .= PMA_getRequireClause();\n        }\n\n        if ((isset($_POST['Grant_priv']) && $_POST['Grant_priv'] == 'Y')\n            || (! mb_strlen($dbname)\n            && (isset($_POST['max_questions']) || isset($_POST['max_connections'])\n            || isset($_POST['max_updates'])\n            || isset($_POST['max_user_connections'])))\n        ) {\n            $sql_query2 .= PMA_getWithClauseForAddUserAndUpdatePrivs();\n        }\n        $sql_query2 .= ';';\n    }\n    if (! $GLOBALS['dbi']->tryQuery($sql_query0)) {\n        // This might fail when the executing user does not have\n        // ALL PRIVILEGES himself.\n        // See https://sourceforge.net/p/phpmyadmin/bugs/3270/\n        $sql_query0 = '';\n    }\n    if (! empty($sql_query1) && ! $GLOBALS['dbi']->tryQuery($sql_query1)) {\n        // this one may fail, too...\n        $sql_query1 = '';\n    }\n    if (! empty($sql_query2)) {\n        $GLOBALS['dbi']->query($sql_query2);\n    } else {\n        $sql_query2 = '';\n    }\n    $sql_query = $sql_query0 . ' ' . $sql_query1 . ' ' . $sql_query2;\n    $message = Message::success(__('You have updated the privileges for %s.'));\n    $message->addParam(\n        '\\'' . htmlspecialchars($username)\n        . '\\'@\\'' . htmlspecialchars($hostname) . '\\''\n    );\n\n    return array($sql_query, $message);\n}\n\n/**\n * Get List of information: Changes / copies a user\n *\n * @return array\n */\nfunction PMA_getDataForChangeOrCopyUser()\n{\n    $queries = null;\n    $password = null;\n\n    if (isset($_REQUEST['change_copy'])) {\n        $user_host_condition = ' WHERE `User` = '\n            . \"'\" . Util::sqlAddSlashes($_REQUEST['old_username']) . \"'\"\n            . ' AND `Host` = '\n            . \"'\" . Util::sqlAddSlashes($_REQUEST['old_hostname']) . \"';\";\n        $row = $GLOBALS['dbi']->fetchSingleRow(\n            'SELECT * FROM `mysql`.`user` ' . $user_host_condition\n        );\n        if (! $row) {\n            $response = PMA\\libraries\\Response::getInstance();\n            $response->addHTML(\n                Message::notice(__('No user found.'))->getDisplay()\n            );\n            unset($_REQUEST['change_copy']);\n        } else {\n            extract($row, EXTR_OVERWRITE);\n            foreach ($row as $key => $value) {\n                $GLOBALS[$key] = $value;\n            }\n            // Recent MySQL versions have the field \"Password\" in mysql.user,\n            // so the previous extract creates $Password but this script\n            // uses $password\n            if (! isset($password) && isset($Password)) {\n                $password = $Password;\n            }\n            if (Util::getServerType() == 'MySQL'\n                && PMA_MYSQL_INT_VERSION >= 50606\n                && PMA_MYSQL_INT_VERSION < 50706\n                && ((isset($authentication_string)\n                && empty($password))\n                || (isset($plugin)\n                && $plugin == 'sha256_password'))\n            ) {\n                $password = $authentication_string;\n            }\n\n            if (Util::getServerType() == 'MariaDB'\n                && PMA_MYSQL_INT_VERSION >= 50500\n                && isset($authentication_string)\n                && empty($password)\n            ) {\n                $password = $authentication_string;\n            }\n\n            // Always use 'authentication_string' column\n            // for MySQL 5.7.6+ since it does not have\n            // the 'password' column at all\n            if (Util::getServerType() == 'MySQL'\n                && PMA_MYSQL_INT_VERSION >= 50706\n                && isset($authentication_string)\n            ) {\n                $password = $authentication_string;\n            }\n\n            $queries = array();\n        }\n    }\n\n    return array($queries, $password);\n}\n\n/**\n * Update Data for information: Deletes users\n *\n * @param array $queries queries array\n *\n * @return array\n */\nfunction PMA_getDataForDeleteUsers($queries)\n{\n    if (isset($_REQUEST['change_copy'])) {\n        $selected_usr = array(\n            $_REQUEST['old_username'] . '&amp;#27;' . $_REQUEST['old_hostname']\n        );\n    } else {\n        $selected_usr = $_REQUEST['selected_usr'];\n        $queries = array();\n    }\n\n    // this happens, was seen in https://reports.phpmyadmin.net/reports/view/17146\n    if (! is_array($selected_usr)) {\n        return array();\n    }\n\n    foreach ($selected_usr as $each_user) {\n        list($this_user, $this_host) = explode('&amp;#27;', $each_user);\n        $queries[] = '# '\n            . sprintf(\n                __('Deleting %s'),\n                '\\'' . $this_user . '\\'@\\'' . $this_host . '\\''\n            )\n            . ' ...';\n        $queries[] = 'DROP USER \\''\n            . Util::sqlAddSlashes($this_user)\n            . '\\'@\\'' . Util::sqlAddSlashes($this_host) . '\\';';\n        PMA_relationsCleanupUser($this_user);\n\n        if (isset($_REQUEST['drop_users_db'])) {\n            $queries[] = 'DROP DATABASE IF EXISTS '\n                . Util::backquote($this_user) . ';';\n            $GLOBALS['reload'] = true;\n        }\n    }\n    return $queries;\n}\n\n/**\n * update Message For Reload\n *\n * @return array\n */\nfunction PMA_updateMessageForReload()\n{\n    $message = null;\n    if (isset($_REQUEST['flush_privileges'])) {\n        $sql_query = 'FLUSH PRIVILEGES;';\n        $GLOBALS['dbi']->query($sql_query);\n        $message = Message::success(\n            __('The privileges were reloaded successfully.')\n        );\n    }\n\n    if (isset($_REQUEST['validate_username'])) {\n        $message = Message::success();\n    }\n\n    return $message;\n}\n\n/**\n * update Data For Queries from queries_for_display\n *\n * @param array      $queries             queries array\n * @param array|null $queries_for_display queries array for display\n *\n * @return null\n */\nfunction PMA_getDataForQueries($queries, $queries_for_display)\n{\n    $tmp_count = 0;\n    foreach ($queries as $sql_query) {\n        if ($sql_query{0} != '#') {\n            $GLOBALS['dbi']->query($sql_query);\n        }\n        // when there is a query containing a hidden password, take it\n        // instead of the real query sent\n        if (isset($queries_for_display[$tmp_count])) {\n            $queries[$tmp_count] = $queries_for_display[$tmp_count];\n        }\n        $tmp_count++;\n    }\n\n    return $queries;\n}\n\n/**\n * update Data for information: Adds a user\n *\n * @param string $dbname      db name\n * @param string $username    user name\n * @param string $hostname    host name\n * @param string $password    password\n * @param bool   $is_menuwork is_menuwork set?\n *\n * @return array\n */\nfunction PMA_addUser(\n    $dbname, $username, $hostname,\n    $password, $is_menuwork\n) {\n    $_add_user_error = false;\n    $message = null;\n    $queries = null;\n    $queries_for_display = null;\n    $sql_query = null;\n\n    if (!isset($_REQUEST['adduser_submit']) && !isset($_REQUEST['change_copy'])) {\n        return array(\n            $message, $queries, $queries_for_display, $sql_query, $_add_user_error\n        );\n    }\n\n    if (!isset($_REQUEST['adduser_submit']) && !isset($_REQUEST['change_copy'])) {\n        return array(\n            $message,\n            $queries,\n            $queries_for_display,\n            $sql_query,\n            $_add_user_error\n        );\n    }\n\n    $sql_query = '';\n    if ($_POST['pred_username'] == 'any') {\n        $username = '';\n    }\n    switch ($_POST['pred_hostname']) {\n    case 'any':\n        $hostname = '%';\n        break;\n    case 'localhost':\n        $hostname = 'localhost';\n        break;\n    case 'hosttable':\n        $hostname = '';\n        break;\n    case 'thishost':\n        $_user_name = $GLOBALS['dbi']->fetchValue('SELECT USER()');\n        $hostname = mb_substr(\n            $_user_name,\n            (mb_strrpos($_user_name, '@') + 1)\n        );\n        unset($_user_name);\n        break;\n    }\n    $sql = \"SELECT '1' FROM `mysql`.`user`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"';\";\n    if ($GLOBALS['dbi']->fetchValue($sql) == 1) {\n        $message = Message::error(__('The user %s already exists!'));\n        $message->addParam(\n            '[em]\\'' . $username . '\\'@\\'' . $hostname . '\\'[/em]'\n        );\n        $_REQUEST['adduser'] = true;\n        $_add_user_error = true;\n\n        return array(\n            $message,\n            $queries,\n            $queries_for_display,\n            $sql_query,\n            $_add_user_error\n        );\n    }\n\n    list(\n        $create_user_real, $create_user_show, $real_sql_query, $sql_query,\n        $password_set_real, $password_set_show\n    ) = PMA_getSqlQueriesForDisplayAndAddUser(\n        $username, $hostname, (isset($password) ? $password : '')\n    );\n\n    if (empty($_REQUEST['change_copy'])) {\n        $_error = false;\n\n        if (isset($create_user_real)) {\n            if (!$GLOBALS['dbi']->tryQuery($create_user_real)) {\n                $_error = true;\n            }\n            if (isset($password_set_real) && !empty($password_set_real)\n                && isset($_REQUEST['authentication_plugin'])\n            ) {\n                PMA_setProperPasswordHashing(\n                    $_REQUEST['authentication_plugin']\n                );\n                if ($GLOBALS['dbi']->tryQuery($password_set_real)) {\n                    $sql_query .= $password_set_show;\n                }\n            }\n            $sql_query = $create_user_show . $sql_query;\n        }\n\n        list($sql_query, $message) = PMA_addUserAndCreateDatabase(\n            $_error,\n            $real_sql_query,\n            $sql_query,\n            $username,\n            $hostname,\n            isset($dbname) ? $dbname : null\n        );\n        if (!empty($_REQUEST['userGroup']) && $is_menuwork) {\n            PMA_setUserGroup($GLOBALS['username'], $_REQUEST['userGroup']);\n        }\n\n        return array(\n            $message,\n            $queries,\n            $queries_for_display,\n            $sql_query,\n            $_add_user_error\n        );\n    }\n\n    if (isset($create_user_real)) {\n        $queries[] = $create_user_real;\n    }\n    $queries[] = $real_sql_query;\n\n    if (isset($password_set_real) && ! empty($password_set_real)\n        && isset($_REQUEST['authentication_plugin'])\n    ) {\n        PMA_setProperPasswordHashing(\n            $_REQUEST['authentication_plugin']\n        );\n\n        $queries[] = $password_set_real;\n    }\n    // we put the query containing the hidden password in\n    // $queries_for_display, at the same position occupied\n    // by the real query in $queries\n    $tmp_count = count($queries);\n    if (isset($create_user_real)) {\n        $queries_for_display[$tmp_count - 2] = $create_user_show;\n    }\n    if (isset($password_set_real) && ! empty($password_set_real)) {\n        $queries_for_display[$tmp_count - 3] = $create_user_show;\n        $queries_for_display[$tmp_count - 2] = $sql_query;\n        $queries_for_display[$tmp_count - 1] = $password_set_show;\n    } else {\n        $queries_for_display[$tmp_count - 1] = $sql_query;\n    }\n\n    return array(\n        $message, $queries, $queries_for_display, $sql_query, $_add_user_error\n    );\n}\n\n/**\n * Sets proper value of `old_passwords` according to\n * the authentication plugin selected\n *\n * @param string $auth_plugin authentication plugin selected\n *\n * @return void\n */\nfunction PMA_setProperPasswordHashing($auth_plugin)\n{\n    // Set the hashing method used by PASSWORD()\n    // to be of type depending upon $authentication_plugin\n    if ($auth_plugin == 'sha256_password') {\n        $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 2');\n    } else if ($auth_plugin == 'mysql_old_password') {\n        $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 1');\n    } else {\n        $GLOBALS['dbi']->tryQuery('SET `old_passwords` = 0');\n    }\n}\n\n/**\n * Update DB information: DB, Table, isWildcard\n *\n * @return array\n */\nfunction PMA_getDataForDBInfo()\n{\n    $username = null;\n    $hostname = null;\n    $dbname = null;\n    $tablename = null;\n    $routinename = null;\n    $dbname_is_wildcard = null;\n\n    if (isset($_REQUEST['username'])) {\n        $username = $_REQUEST['username'];\n    }\n    if (isset($_REQUEST['hostname'])) {\n        $hostname = $_REQUEST['hostname'];\n    }\n    /**\n     * Checks if a dropdown box has been used for selecting a database / table\n     */\n    if (PMA_isValid($_REQUEST['pred_tablename'])) {\n        $tablename = $_REQUEST['pred_tablename'];\n    } elseif (PMA_isValid($_REQUEST['tablename'])) {\n        $tablename = $_REQUEST['tablename'];\n    } else {\n        unset($tablename);\n    }\n\n    if (PMA_isValid($_REQUEST['pred_routinename'])) {\n        $routinename = $_REQUEST['pred_routinename'];\n    } elseif (PMA_isValid($_REQUEST['routinename'])) {\n        $routinename = $_REQUEST['routinename'];\n    } else {\n        unset($routinename);\n    }\n\n    if (isset($_REQUEST['pred_dbname'])) {\n        $is_valid_pred_dbname = true;\n        foreach ($_REQUEST['pred_dbname'] as $key => $db_name) {\n            if (! PMA_isValid($db_name)) {\n                $is_valid_pred_dbname = false;\n                break;\n            }\n        }\n    }\n\n    if (isset($_REQUEST['dbname'])) {\n        $is_valid_dbname = true;\n        if (is_array($_REQUEST['dbname'])) {\n            foreach ($_REQUEST['dbname'] as $key => $db_name) {\n                if (! PMA_isValid($db_name)) {\n                    $is_valid_dbname = false;\n                    break;\n                }\n            }\n        } else {\n            if (! PMA_isValid($_REQUEST['dbname'])) {\n                $is_valid_dbname = false;\n            }\n        }\n    }\n\n    if (isset($is_valid_pred_dbname) && $is_valid_pred_dbname) {\n        $dbname = $_REQUEST['pred_dbname'];\n        // If dbname contains only one database.\n        if (count($dbname) == 1) {\n            $dbname = $dbname[0];\n        }\n    } elseif (isset($is_valid_dbname) && $is_valid_dbname) {\n        $dbname = $_REQUEST['dbname'];\n    } else {\n        unset($dbname);\n        unset($tablename);\n    }\n\n    if (isset($dbname)) {\n        if (is_array($dbname)) {\n            $db_and_table = $dbname;\n            foreach ($db_and_table as $key => $db_name) {\n                $db_and_table[$key] .= '.';\n            }\n        } else {\n            $unescaped_db = Util::unescapeMysqlWildcards($dbname);\n            $db_and_table = Util::backquote($unescaped_db) . '.';\n        }\n        if (isset($tablename)) {\n            $db_and_table .= Util::backquote($tablename);\n        } else {\n            if (is_array($db_and_table)) {\n                foreach ($db_and_table as $key => $db_name) {\n                    $db_and_table[$key] .= '*';\n                }\n            } else {\n                $db_and_table .= '*';\n            }\n        }\n    } else {\n        $db_and_table = '*.*';\n    }\n\n    // check if given $dbname is a wildcard or not\n    if (isset($dbname)) {\n        //if (preg_match('/\\\\\\\\(?:_|%)/i', $dbname)) {\n        if (! is_array($dbname) && preg_match('/(?<!\\\\\\\\)(?:_|%)/i', $dbname)) {\n            $dbname_is_wildcard = true;\n        } else {\n            $dbname_is_wildcard = false;\n        }\n    }\n\n    return array(\n        $username, $hostname,\n        isset($dbname)? $dbname : null,\n        isset($tablename)? $tablename : null,\n        isset($routinename) ? $routinename : null,\n        $db_and_table,\n        $dbname_is_wildcard,\n    );\n}\n\n/**\n * Get title and textarea for export user definition in Privileges\n *\n * @param string $username username\n * @param string $hostname host name\n *\n * @return array ($title, $export)\n */\nfunction PMA_getListForExportUserDefinition($username, $hostname)\n{\n    $export = '<textarea class=\"export\" cols=\"60\" rows=\"15\">';\n\n    if (isset($_REQUEST['selected_usr'])) {\n        // export privileges for selected users\n        $title = __('Privileges');\n\n        //For removing duplicate entries of users\n        $_REQUEST['selected_usr'] = array_unique($_REQUEST['selected_usr']);\n\n        foreach ($_REQUEST['selected_usr'] as $export_user) {\n            $export_username = mb_substr(\n                $export_user, 0, mb_strpos($export_user, '&')\n            );\n            $export_hostname = mb_substr(\n                $export_user, mb_strrpos($export_user, ';') + 1\n            );\n            $export .= '# '\n                . sprintf(\n                    __('Privileges for %s'),\n                    '`' . htmlspecialchars($export_username)\n                    . '`@`' . htmlspecialchars($export_hostname) . '`'\n                )\n                . \"\\n\\n\";\n            $export .= PMA_getGrants($export_username, $export_hostname) . \"\\n\";\n        }\n    } else {\n        // export privileges for a single user\n        $title = __('User') . ' `' . htmlspecialchars($username)\n            . '`@`' . htmlspecialchars($hostname) . '`';\n        $export .= PMA_getGrants($username, $hostname);\n    }\n    // remove trailing whitespace\n    $export = trim($export);\n\n    $export .= '</textarea>';\n\n    return array($title, $export);\n}\n\n/**\n * Get HTML for display Add userfieldset\n *\n * @param string $db    the database\n * @param string $table the table name\n *\n * @return string html output\n */\nfunction PMA_getAddUserHtmlFieldset($db = '', $table = '')\n{\n    if (!$GLOBALS['is_createuser']) {\n        return '';\n    }\n    $rel_params = array();\n    $url_params = array(\n        'adduser' => 1\n    );\n    if (!empty($db)) {\n        $url_params['dbname']\n            = $rel_params['checkprivsdb']\n                = $db;\n    }\n    if (!empty($table)) {\n        $url_params['tablename']\n            = $rel_params['checkprivstable']\n                = $table;\n    }\n\n    return '<fieldset id=\"fieldset_add_user\">' . \"\\n\"\n        . '<legend>' . _pgettext('Create new user', 'New') . '</legend>'\n        . '<a id=\"add_user_anchor\" href=\"server_privileges.php'\n        . PMA_URL_getCommon($url_params) . '\" '\n        . (!empty($rel_params)\n            ? ('rel=\"' . PMA_URL_getCommon($rel_params) . '\" ')\n            : '')\n        . '>' . \"\\n\"\n        . Util::getIcon('b_usradd.png')\n        . '            ' . __('Add user account') . '</a>' . \"\\n\"\n        . '</fieldset>' . \"\\n\";\n}\n\n/**\n * Get HTML header for display User's properties\n *\n * @param boolean $dbname_is_wildcard whether database name is wildcard or not\n * @param string  $url_dbname         url database name that urlencode() string\n * @param string  $dbname             database name\n * @param string  $username           username\n * @param string  $hostname           host name\n * @param string  $tablename          table name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlHeaderForUserProperties(\n    $dbname_is_wildcard, $url_dbname, $dbname, $username, $hostname, $tablename\n) {\n    $html_output = '<h2>' . \"\\n\"\n       . Util::getIcon('b_usredit.png')\n       . __('Edit privileges:') . ' '\n       . __('User account');\n\n    if (! empty($dbname)) {\n        $html_output .= ' <i><a class=\"edit_user_anchor\"'\n            . ' href=\"server_privileges.php'\n            . PMA_URL_getCommon(\n                array(\n                    'username' => $username,\n                    'hostname' => $hostname,\n                    'dbname' => '',\n                    'tablename' => '',\n                )\n            )\n            . '\">\\'' . htmlspecialchars($username)\n            . '\\'@\\'' . htmlspecialchars($hostname)\n            . '\\'</a></i>' . \"\\n\";\n\n        $html_output .= ' - ';\n        $html_output .= ($dbname_is_wildcard\n            || is_array($dbname) && count($dbname) > 1)\n            ? __('Databases') : __('Database');\n        if (! empty($_REQUEST['tablename'])) {\n            $html_output .= ' <i><a href=\"server_privileges.php'\n                . PMA_URL_getCommon(\n                    array(\n                        'username' => $username,\n                        'hostname' => $hostname,\n                        'dbname' => $url_dbname,\n                        'tablename' => '',\n                    )\n                )\n                . '\">' . htmlspecialchars($dbname)\n                . '</a></i>';\n\n            $html_output .= ' - ' . __('Table')\n                . ' <i>' . htmlspecialchars($tablename) . '</i>';\n        } elseif (! empty($_REQUEST['routinename'])) {\n            $html_output .= ' <i><a href=\"server_privileges.php'\n                . PMA_URL_getCommon(\n                    array(\n                        'username' => $username,\n                        'hostname' => $hostname,\n                        'dbname' => $url_dbname,\n                        'routinename' => '',\n                    )\n                )\n                . '\">' . htmlspecialchars($dbname)\n                . '</a></i>';\n\n            $html_output .= ' - ' . __('Routine')\n                . ' <i>' . htmlspecialchars($tablename) . '</i>';\n        } else {\n            if (! is_array($dbname)) {\n                $dbname = array($dbname);\n            }\n            $html_output .= ' <i>'\n                . htmlspecialchars(implode(', ', $dbname))\n                . '</i>';\n        }\n\n    } else {\n        $html_output .= ' <i>\\'' . htmlspecialchars($username)\n            . '\\'@\\'' . htmlspecialchars($hostname)\n            . '\\'</i>' . \"\\n\";\n\n    }\n    $html_output .= '</h2>' . \"\\n\";\n    $cur_user = htmlspecialchars($GLOBALS['dbi']->getCurrentUser());\n    $user = htmlspecialchars($username . '@' . $hostname);\n    // Add a short notice for the user\n    // to remind him that he is editing his own privileges\n    if ($user === $cur_user) {\n        $html_output .= Message::notice(\n            __(\n                'Note: You are attempting to edit privileges of the '\n                . 'user with which you are currently logged in.'\n            )\n        )->getDisplay();\n    }\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for display user overview page\n *\n * @param string $pmaThemeImage a image source link\n * @param string $text_dir      text directory\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForUserOverview($pmaThemeImage, $text_dir)\n{\n    $html_output = '<h2>' . \"\\n\"\n       . Util::getIcon('b_usrlist.png')\n       . __('User accounts overview') . \"\\n\"\n       . '</h2>' . \"\\n\";\n\n    $password_column = 'Password';\n    $server_type = Util::getServerType();\n    if (($server_type == 'MySQL' || $server_type == 'Percona Server')\n        && PMA_MYSQL_INT_VERSION >= 50706\n    ) {\n        $password_column = 'authentication_string';\n    }\n    // $sql_query is for the initial-filtered,\n    // $sql_query_all is for counting the total no. of users\n\n    $sql_query = $sql_query_all = 'SELECT *,' .\n        \" IF(`\" . $password_column . \"` = _latin1 '', 'N', 'Y') AS 'Password'\" .\n        ' FROM `mysql`.`user`';\n\n    $sql_query .= (isset($_REQUEST['initial'])\n        ? PMA_rangeOfUsers($_REQUEST['initial'])\n        : '');\n\n    $sql_query .= ' ORDER BY `User` ASC, `Host` ASC;';\n    $sql_query_all .= ' ;';\n\n    $res = $GLOBALS['dbi']->tryQuery(\n        $sql_query, null, PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n    $res_all = $GLOBALS['dbi']->tryQuery(\n        $sql_query_all, null, PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n\n    if (! $res) {\n        // the query failed! This may have two reasons:\n        // - the user does not have enough privileges\n        // - the privilege tables use a structure of an earlier version.\n        // so let's try a more simple query\n\n        $GLOBALS['dbi']->freeResult($res);\n        $GLOBALS['dbi']->freeResult($res_all);\n        $sql_query = 'SELECT * FROM `mysql`.`user`';\n        $res = $GLOBALS['dbi']->tryQuery(\n            $sql_query, null, PMA\\libraries\\DatabaseInterface::QUERY_STORE\n        );\n\n        if (! $res) {\n            $html_output .= PMA_getHtmlForViewUsersError();\n            $html_output .= PMA_getAddUserHtmlFieldset();\n        } else {\n            // This message is hardcoded because I will replace it by\n            // a automatic repair feature soon.\n            $raw = 'Your privilege table structure seems to be older than'\n                . ' this MySQL version!<br />'\n                . 'Please run the <code>mysql_upgrade</code> command'\n                . '(<code>mysql_fix_privilege_tables</code> on older systems)'\n                . ' that should be included in your MySQL server distribution'\n                . ' to solve this problem!';\n            $html_output .= Message::rawError($raw)->getDisplay();\n        }\n        $GLOBALS['dbi']->freeResult($res);\n    } else {\n        $db_rights = PMA_getDbRightsForUserOverview();\n        // for all initials, even non A-Z\n        $array_initials = array();\n\n        foreach ($db_rights as $right) {\n            foreach ($right as $account) {\n                if (empty($account['User']) && $account['Host'] == 'localhost') {\n                    $html_output .= Message::notice(\n                        __(\n                            'A user account allowing any user from localhost to '\n                            . 'connect is present. This will prevent other users '\n                            . 'from connecting if the host part of their account '\n                            . 'allows a connection from any (%) host.'\n                        )\n                        . Util::showMySQLDocu('problems-connecting')\n                    )->getDisplay();\n                    break 2;\n                }\n            }\n        }\n\n        /**\n         * Displays the initials\n         * Also not necessary if there is less than 20 privileges\n         */\n        if ($GLOBALS['dbi']->numRows($res_all) > 20) {\n            $html_output .= PMA_getHtmlForInitials($array_initials);\n        }\n\n        /**\n        * Display the user overview\n        * (if less than 50 users, display them immediately)\n        */\n        if (isset($_REQUEST['initial'])\n            || isset($_REQUEST['showall'])\n            || $GLOBALS['dbi']->numRows($res) < 50\n        ) {\n            $html_output .= PMA_getUsersOverview(\n                $res, $db_rights, $pmaThemeImage, $text_dir\n            );\n        } else {\n            $html_output .= PMA_getAddUserHtmlFieldset();\n        } // end if (display overview)\n\n        if (! $GLOBALS['is_ajax_request']\n            || ! empty($_REQUEST['ajax_page_request'])\n        ) {\n            if ($GLOBALS['is_reload_priv']) {\n                $flushnote = new Message(\n                    __(\n                        'Note: phpMyAdmin gets the users\\' privileges directly '\n                        . 'from MySQL\\'s privilege tables. The content of these '\n                        . 'tables may differ from the privileges the server uses, '\n                        . 'if they have been changed manually. In this case, '\n                        . 'you should %sreload the privileges%s before you continue.'\n                    ),\n                    Message::NOTICE\n                );\n                $flushLink = '<a href=\"server_privileges.php'\n                    . PMA_URL_getCommon(array('flush_privileges' => 1))\n                    . '\" id=\"reload_privileges_anchor\">';\n                $flushnote->addParam(\n                    $flushLink,\n                    false\n                );\n                $flushnote->addParam('</a>', false);\n            } else {\n                $flushnote = new Message(\n                    __(\n                        'Note: phpMyAdmin gets the users\\' privileges directly '\n                        . 'from MySQL\\'s privilege tables. The content of these '\n                        . 'tables may differ from the privileges the server uses, '\n                        . 'if they have been changed manually. In this case, '\n                        . 'the privileges have to be reloaded but currently, you '\n                        . 'don\\'t have the RELOAD privilege.'\n                    )\n                    . Util::showMySQLDocu(\n                        'privileges-provided',\n                        false,\n                        'priv_reload'\n                    ),\n                    Message::NOTICE\n                );\n            }\n            $html_output .= $flushnote->getDisplay();\n        }\n    }\n\n    return $html_output;\n}\n\n/**\n * Get HTML snippet for display user properties\n *\n * @param boolean $dbname_is_wildcard whether database name is wildcard or not\n * @param string  $url_dbname         url database name that urlencode() string\n * @param string  $username           username\n * @param string  $hostname           host name\n * @param string  $dbname             database name\n * @param string  $tablename          table name\n *\n * @return string $html_output\n */\nfunction PMA_getHtmlForUserProperties($dbname_is_wildcard,$url_dbname,\n    $username, $hostname, $dbname, $tablename\n) {\n    $html_output  = '<div id=\"edit_user_dialog\">';\n    $html_output .= PMA_getHtmlHeaderForUserProperties(\n        $dbname_is_wildcard, $url_dbname, $dbname, $username, $hostname, $tablename\n    );\n\n    $sql = \"SELECT '1' FROM `mysql`.`user`\"\n        . \" WHERE `User` = '\" . Util::sqlAddSlashes($username) . \"'\"\n        . \" AND `Host` = '\" . Util::sqlAddSlashes($hostname) . \"';\";\n\n    $user_does_not_exists = (bool) ! $GLOBALS['dbi']->fetchValue($sql);\n\n    if ($user_does_not_exists) {\n        $html_output .= Message::error(\n            __('The selected user was not found in the privilege table.')\n        )->getDisplay();\n        $html_output .= PMA_getHtmlForLoginInformationFields();\n    }\n\n    $_params = array(\n        'username' => $username,\n        'hostname' => $hostname,\n    );\n    if (! is_array($dbname) && mb_strlen($dbname)) {\n        $_params['dbname'] = $dbname;\n        if (mb_strlen($tablename)) {\n            $_params['tablename'] = $tablename;\n        }\n    } else {\n        $_params['dbname'] = $dbname;\n    }\n\n    $html_output .= '<form class=\"submenu-item\" name=\"usersForm\" '\n        . 'id=\"addUsersForm\" action=\"server_privileges.php\" method=\"post\">' . \"\\n\";\n    $html_output .= PMA_URL_getHiddenInputs($_params);\n    $html_output .= PMA_getHtmlToDisplayPrivilegesTable(\n        // If $dbname is an array, pass any one db as all have same privs.\n        PMA_ifSetOr($dbname, (is_array($dbname)) ? $dbname[0] : '*', 'length'),\n        PMA_ifSetOr($tablename, '*', 'length')\n    );\n\n    $html_output .= '</form>' . \"\\n\";\n\n    if (! is_array($dbname) && ! mb_strlen($tablename)\n        && empty($dbname_is_wildcard)\n    ) {\n        // no table name was given, display all table specific rights\n        // but only if $dbname contains no wildcards\n        if (! mb_strlen($dbname)) {\n            $html_output .= PMA_getHtmlForAllTableSpecificRights(\n                $username, $hostname, 'database'\n            );\n        } else {\n            // unescape wildcards in dbname at table level\n            $unescaped_db = Util::unescapeMysqlWildcards($dbname);\n\n            $html_output .= PMA_getHtmlForAllTableSpecificRights(\n                $username, $hostname, 'table', $unescaped_db\n            );\n            $html_output .= PMA_getHtmlForAllTableSpecificRights(\n                $username, $hostname, 'routine', $unescaped_db\n            );\n        }\n    }\n\n    // Provide a line with links to the relevant database and table\n    if (! is_array($dbname) && mb_strlen($dbname)\n        && empty($dbname_is_wildcard)\n    ) {\n        $html_output .= PMA_getLinkToDbAndTable($url_dbname, $dbname, $tablename);\n\n    }\n\n    if (! is_array($dbname) && ! mb_strlen($dbname)\n        && ! $user_does_not_exists\n    ) {\n        //change login information\n        $html_output .= PMA_getHtmlForChangePassword(\n            'edit_other',\n            $username,\n            $hostname\n        );\n        $html_output .= PMA_getChangeLoginInformationHtmlForm($username, $hostname);\n    }\n    $html_output .= '</div>';\n\n    return $html_output;\n}\n\n/**\n * Get queries for Table privileges to change or copy user\n *\n * @param string $user_host_condition user host condition to\n *                                    select relevant table privileges\n * @param array  $queries             queries array\n * @param string $username            username\n * @param string $hostname            host name\n *\n * @return array  $queries\n */\nfunction PMA_getTablePrivsQueriesForChangeOrCopyUser($user_host_condition,\n    $queries, $username, $hostname\n) {\n    $res = $GLOBALS['dbi']->query(\n        'SELECT `Db`, `Table_name`, `Table_priv` FROM `mysql`.`tables_priv`'\n        . $user_host_condition,\n        $GLOBALS['userlink'],\n        PMA\\libraries\\DatabaseInterface::QUERY_STORE\n    );\n    while ($row = $GLOBALS['dbi']->fetchAssoc($res)) {\n\n        $res2 = $GLOBALS['dbi']->query(\n            'SELECT `Column_name`, `Column_priv`'\n            . ' FROM `mysql`.`columns_priv`'\n            . ' WHERE `User`'\n            . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_username']) . \"'\"\n            . ' AND `Host`'\n            . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_username']) . '\\''\n            . ' AND `Db`'\n            . ' = \\'' . Util::sqlAddSlashes($row['Db']) . \"'\"\n            . ' AND `Table_name`'\n            . ' = \\'' . Util::sqlAddSlashes($row['Table_name']) . \"'\"\n            . ';',\n            null,\n            PMA\\libraries\\DatabaseInterface::QUERY_STORE\n        );\n\n        $tmp_privs1 = PMA_extractPrivInfo($row);\n        $tmp_privs2 = array(\n            'Select' => array(),\n            'Insert' => array(),\n            'Update' => array(),\n            'References' => array()\n        );\n\n        while ($row2 = $GLOBALS['dbi']->fetchAssoc($res2)) {\n            $tmp_array = explode(',', $row2['Column_priv']);\n            if (in_array('Select', $tmp_array)) {\n                $tmp_privs2['Select'][] = $row2['Column_name'];\n            }\n            if (in_array('Insert', $tmp_array)) {\n                $tmp_privs2['Insert'][] = $row2['Column_name'];\n            }\n            if (in_array('Update', $tmp_array)) {\n                $tmp_privs2['Update'][] = $row2['Column_name'];\n            }\n            if (in_array('References', $tmp_array)) {\n                $tmp_privs2['References'][] = $row2['Column_name'];\n            }\n        }\n        if (count($tmp_privs2['Select']) > 0 && ! in_array('SELECT', $tmp_privs1)) {\n            $tmp_privs1[] = 'SELECT (`' . join('`, `', $tmp_privs2['Select']) . '`)';\n        }\n        if (count($tmp_privs2['Insert']) > 0 && ! in_array('INSERT', $tmp_privs1)) {\n            $tmp_privs1[] = 'INSERT (`' . join('`, `', $tmp_privs2['Insert']) . '`)';\n        }\n        if (count($tmp_privs2['Update']) > 0 && ! in_array('UPDATE', $tmp_privs1)) {\n            $tmp_privs1[] = 'UPDATE (`' . join('`, `', $tmp_privs2['Update']) . '`)';\n        }\n        if (count($tmp_privs2['References']) > 0\n            && ! in_array('REFERENCES', $tmp_privs1)\n        ) {\n            $tmp_privs1[]\n                = 'REFERENCES (`' . join('`, `', $tmp_privs2['References']) . '`)';\n        }\n\n        $queries[] = 'GRANT ' . join(', ', $tmp_privs1)\n            . ' ON ' . Util::backquote($row['Db']) . '.'\n            . Util::backquote($row['Table_name'])\n            . ' TO \\'' . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\''\n            . (in_array('Grant', explode(',', $row['Table_priv']))\n            ? ' WITH GRANT OPTION;'\n            : ';');\n    }\n    return $queries;\n}\n\n/**\n * Get queries for database specific privileges for change or copy user\n *\n * @param array  $queries  queries array with string\n * @param string $username username\n * @param string $hostname host name\n *\n * @return array $queries\n */\nfunction PMA_getDbSpecificPrivsQueriesForChangeOrCopyUser(\n    $queries, $username, $hostname\n) {\n    $user_host_condition = ' WHERE `User`'\n        . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_username']) . \"'\"\n        . ' AND `Host`'\n        . ' = \\'' . Util::sqlAddSlashes($_REQUEST['old_hostname']) . '\\';';\n\n    $res = $GLOBALS['dbi']->query(\n        'SELECT * FROM `mysql`.`db`' . $user_host_condition\n    );\n\n    while ($row = $GLOBALS['dbi']->fetchAssoc($res)) {\n        $queries[] = 'GRANT ' . join(', ', PMA_extractPrivInfo($row))\n            . ' ON ' . Util::backquote($row['Db']) . '.*'\n            . ' TO \\'' . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\''\n            . ($row['Grant_priv'] == 'Y' ? ' WITH GRANT OPTION;' : ';');\n    }\n    $GLOBALS['dbi']->freeResult($res);\n\n    $queries = PMA_getTablePrivsQueriesForChangeOrCopyUser(\n        $user_host_condition, $queries, $username, $hostname\n    );\n\n    return $queries;\n}\n\n/**\n * Prepares queries for adding users and\n * also create database and return query and message\n *\n * @param boolean $_error         whether user create or not\n * @param string  $real_sql_query SQL query for add a user\n * @param string  $sql_query      SQL query to be displayed\n * @param string  $username       username\n * @param string  $hostname       host name\n * @param string  $dbname         database name\n *\n * @return array  $sql_query, $message\n */\nfunction PMA_addUserAndCreateDatabase($_error, $real_sql_query, $sql_query,\n    $username, $hostname, $dbname\n) {\n    if ($_error || (!empty($real_sql_query)\n        && !$GLOBALS['dbi']->tryQuery($real_sql_query))\n    ) {\n        $_REQUEST['createdb-1'] = $_REQUEST['createdb-2']\n            = $_REQUEST['createdb-3'] = null;\n        $message = Message::rawError($GLOBALS['dbi']->getError());\n    } else {\n        $message = Message::success(__('You have added a new user.'));\n    }\n\n    if (isset($_REQUEST['createdb-1'])) {\n        // Create database with same name and grant all privileges\n        $q = 'CREATE DATABASE IF NOT EXISTS '\n            . Util::backquote(\n                Util::sqlAddSlashes($username)\n            ) . ';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n\n        /**\n         * Reload the navigation\n         */\n        $GLOBALS['reload'] = true;\n        $GLOBALS['db'] = $username;\n\n        $q = 'GRANT ALL PRIVILEGES ON '\n            . Util::backquote(\n                Util::escapeMysqlWildcards(\n                    Util::sqlAddSlashes($username)\n                )\n            ) . '.* TO \\''\n            . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n    }\n\n    if (isset($_REQUEST['createdb-2'])) {\n        // Grant all privileges on wildcard name (username\\_%)\n        $q = 'GRANT ALL PRIVILEGES ON '\n            . Util::backquote(\n                Util::sqlAddSlashes($username) . '\\_%'\n            ) . '.* TO \\''\n            . Util::sqlAddSlashes($username)\n            . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n    }\n\n    if (isset($_REQUEST['createdb-3'])) {\n        // Grant all privileges on the specified database to the new user\n        $q = 'GRANT ALL PRIVILEGES ON '\n        . Util::backquote(\n            Util::sqlAddSlashes($dbname)\n        ) . '.* TO \\''\n        . Util::sqlAddSlashes($username)\n        . '\\'@\\'' . Util::sqlAddSlashes($hostname) . '\\';';\n        $sql_query .= $q;\n        if (! $GLOBALS['dbi']->tryQuery($q)) {\n            $message = Message::rawError($GLOBALS['dbi']->getError());\n        }\n    }\n    return array($sql_query, $message);\n}\n\n/**\n * Get the hashed string for password\n *\n * @param string $password password\n *\n * @return string $hashedPassword\n */\nfunction PMA_getHashedPassword($password)\n{\n    $result = $GLOBALS['dbi']->fetchSingleRow(\n        \"SELECT PASSWORD('\" . $password . \"') AS `password`;\"\n    );\n\n    $hashedPassword = $result['password'];\n\n    return $hashedPassword;\n}\n\n\n/**\n * Get SQL queries for Display and Add user\n *\n * @param string $username username\n * @param string $hostname host name\n * @param string $password password\n *\n * @return array ($create_user_real, $create_user_show,$real_sql_query, $sql_query\n *                $password_set_real, $password_set_show)\n */\nfunction PMA_getSqlQueriesForDisplayAndAddUser($username, $hostname, $password)\n{\n    $slashedUsername = Util::sqlAddSlashes($username);\n    $slashedHostname = Util::sqlAddSlashes($hostname);\n    $slashedPassword = Util::sqlAddSlashes($password);\n    $serverType = Util::getServerType();\n\n    $create_user_stmt = sprintf(\n        'CREATE USER \\'%s\\'@\\'%s\\'',\n        $slashedUsername,\n        $slashedHostname\n    );\n\n    // See https://github.com/phpmyadmin/phpmyadmin/pull/11560#issuecomment-147158219\n    // for details regarding details of syntax usage for various versions\n\n    // 'IDENTIFIED WITH auth_plugin'\n    // is supported by MySQL 5.5.7+\n    if (($serverType == 'MySQL' || $serverType == 'Percona Server')\n        && PMA_MYSQL_INT_VERSION >= 50507\n        && isset($_REQUEST['authentication_plugin'])\n    ) {\n        $create_user_stmt .= ' IDENTIFIED WITH '\n            . $_REQUEST['authentication_plugin'];\n    }\n\n    // 'IDENTIFIED VIA auth_plugin'\n    // is supported by MariaDB 5.2+\n    if ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200\n        && isset($_REQUEST['authentication_plugin'])\n    ) {\n        $create_user_stmt .= ' IDENTIFIED VIA '\n            . $_REQUEST['authentication_plugin'];\n    }\n\n    $create_user_real = $create_user_show = $create_user_stmt;\n\n    $password_set_stmt = 'SET PASSWORD FOR \\'%s\\'@\\'%s\\' = \\'%s\\'';\n    $password_set_show = sprintf(\n        $password_set_stmt,\n        $slashedUsername,\n        $slashedHostname,\n        '***'\n    );\n\n    $sql_query_stmt = sprintf(\n        'GRANT %s ON *.* TO \\'%s\\'@\\'%s\\'',\n        join(', ', PMA_extractPrivInfo()),\n        $slashedUsername,\n        $slashedHostname\n    );\n    $real_sql_query = $sql_query = $sql_query_stmt;\n\n    // Set the proper hashing method\n    if (isset($_REQUEST['authentication_plugin'])) {\n        PMA_setProperPasswordHashing(\n            $_REQUEST['authentication_plugin']\n        );\n    }\n    // Use 'CREATE USER ... WITH ... AS ..' syntax for\n    // newer MySQL versions\n    // and 'CREATE USER ... USING .. VIA ..' syntax for\n    // newer MariaDB versions\n    if ((($serverType == 'MySQL' || $serverType == 'Percona Server')\n        && PMA_MYSQL_INT_VERSION >= 50706)\n        || ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200)\n    ) {\n        $password_set_real = null;\n\n        // Required for binding '%' with '%s'\n        $create_user_stmt = str_replace(\n            '%', '%%', $create_user_stmt\n        );\n\n        // MariaDB uses 'USING' whereas MySQL uses 'AS'\n        if ($serverType == 'MariaDB') {\n            $create_user_stmt .= ' USING \\'%s\\'';\n        } else {\n            $create_user_stmt .= ' AS \\'%s\\'';\n        }\n\n        if ($_POST['pred_password'] == 'keep') {\n            $create_user_real = sprintf(\n                $create_user_stmt,\n                $slashedPassword\n            );\n            $create_user_show = sprintf(\n                $create_user_stmt,\n                '***'\n            );\n        } else if ($_POST['pred_password'] == 'none') {\n            $create_user_real = sprintf(\n                $create_user_stmt,\n                null\n            );\n            $create_user_show = sprintf(\n                $create_user_stmt,\n                '***'\n            );\n        } else {\n            $hashedPassword = PMA_getHashedPassword($_POST['pma_pw']);\n            $create_user_real = sprintf(\n                $create_user_stmt,\n                $hashedPassword\n            );\n            $create_user_show = sprintf(\n                $create_user_stmt,\n                '***'\n            );\n        }\n    } else {\n        // Use 'SET PASSWORD' syntax for pre-5.7.6 MySQL versions\n        // and pre-5.2.0 MariaDB versions\n        if ($_POST['pred_password'] == 'keep') {\n            $password_set_real = sprintf(\n                $password_set_stmt,\n                $slashedUsername,\n                $slashedHostname,\n                $slashedPassword\n            );\n        } else if ($_POST['pred_password'] == 'none') {\n            $password_set_real = sprintf(\n                $password_set_stmt,\n                $slashedUsername,\n                $slashedHostname,\n                null\n            );\n        } else {\n            $hashedPassword = PMA_getHashedPassword($_POST['pma_pw']);\n            $password_set_real = sprintf(\n                $password_set_stmt,\n                $slashedUsername,\n                $slashedHostname,\n                $hashedPassword\n            );\n        }\n    }\n\n    // add REQUIRE clause\n    $require_clause = PMA_getRequireClause();\n    $real_sql_query .= $require_clause;\n    $sql_query .= $require_clause;\n\n    $with_clause = PMA_getWithClauseForAddUserAndUpdatePrivs();\n    $real_sql_query .= $with_clause;\n    $sql_query .= $with_clause;\n\n    if (isset($create_user_real)) {\n        $create_user_real .= ';';\n        $create_user_show .= ';';\n    }\n    $real_sql_query .= ';';\n    $sql_query .= ';';\n    // No Global GRANT_OPTION privilege\n    if (!$GLOBALS['is_grantuser']) {\n        $real_sql_query = '';\n        $sql_query = '';\n    }\n\n    // Use 'SET PASSWORD' for pre-5.7.6 MySQL versions\n    // and pre-5.2.0 MariaDB\n    if (($serverType == 'MySQL'\n        && PMA_MYSQL_INT_VERSION >= 50706)\n        || ($serverType == 'MariaDB'\n        && PMA_MYSQL_INT_VERSION >= 50200)\n    ) {\n        $password_set_real = null;\n        $password_set_show = null;\n    } else {\n        $password_set_real .= \";\";\n        $password_set_show .= \";\";\n    }\n\n    return array($create_user_real,\n        $create_user_show,\n        $real_sql_query,\n        $sql_query,\n        $password_set_real,\n        $password_set_show\n    );\n}\n\n/**\n * Returns the type ('PROCEDURE' or 'FUNCTION') of the routine\n *\n * @param string $dbname      database\n * @param string $routineName routine\n *\n * @return string type\n */\nfunction PMA_getRoutineType($dbname, $routineName)\n{\n    $routineData = $GLOBALS['dbi']->getRoutines($dbname);\n\n    foreach ($routineData as $routine) {\n        if ($routine['name'] === $routineName) {\n            return $routine['type'];\n        }\n    }\n    return '';\n}\n"], "filenames": ["libraries/server_privileges.lib.php"], "buggy_code_start_loc": [809], "buggy_code_end_loc": [850], "fixing_code_start_loc": [809], "fixing_code_end_loc": [850], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.4.x before 4.4.15.7 and 4.6.x before 4.6.3 allow remote attackers to inject arbitrary web script or HTML via vectors involving (1) server-privileges certificate data fields on the user privileges page, (2) an \"invalid JSON\" error message in the error console, (3) a database name in the central columns implementation, (4) a group name, or (5) a search name in the bookmarks implementation.", "other": {"cve": {"id": "CVE-2016-5705", "sourceIdentifier": "cve@mitre.org", "published": "2016-07-03T01:59:17.393", "lastModified": "2018-10-30T16:27:35.843", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in phpMyAdmin 4.4.x before 4.4.15.7 and 4.6.x before 4.6.3 allow remote attackers to inject arbitrary web script or HTML via vectors involving (1) server-privileges certificate data fields on the user privileges page, (2) an \"invalid JSON\" error message in the error console, (3) a database name in the central columns implementation, (4) a group name, or (5) a search name in the bookmarks implementation."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de XSS en phpMyAdmin 4.4.x en versiones anteriores a 4.4.15.7 y 4.6.x en versiones anteriores a 4.6.3 permiten a atacantes remotos inyectar comandos web o HTML arbitrarios a trav\u00e9s de vectores relacionados con (1) campos de datos de certificado de server-privilegies en la p\u00e1gina de privilegios de usuario, (2) un error \"invalid JSON\" en la consola de error, (3) un nombre de database en las columnas centrales de implementaci\u00f3n, (4) un nombre de grupo o (5) un nombre de b\u00fasqueda en la implementaci\u00f3n de marcadores."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.1:*:*:*:*:*:*:*", "matchCriteriaId": "4863BE36-D16A-4D75-90D9-FD76DB5B48B7"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.2:*:*:*:*:*:*:*", "matchCriteriaId": "03117DF1-3BEC-4B8D-AD63-DBBDB2126081"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "C641F362-D37D-47CB-BE6C-36E5F116F844"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "A0EA8819-70F8-48DC-8667-6CF25E7D9C53"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "DD2796DA-3E74-4765-90D1-783849C7A44C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "4024DA77-BFE4-48C6-A2AF-46003071BDE8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "85631B69-7060-42D1-AE24-466BA10EB390"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "E62EDC79-47AA-4CED-AB7F-1E4D158EB653"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "13CD0228-728B-437A-84C1-BD7AFA52FFB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.4:*:*:*:*:*:*:*", "matchCriteriaId": "4BED20D9-C571-4BC5-9A54-450A364C6E43"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.5:*:*:*:*:*:*:*", "matchCriteriaId": "2A2B646D-DDFC-4CB2-B7F4-0C33AF18D14F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.6:*:*:*:*:*:*:*", "matchCriteriaId": "9CBF68B2-2BCF-4EEB-8A7C-D83DCAF1AFB4"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00113.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00114.html", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2016/dsa-3627", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/91378", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/03f73d48369703e0d3584699b08e24891c3295b8", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/0b7416c5f4439ed3f11c023785f2d4c49a1b09fc", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/364732e309cccb3fb56c938ed8d8bc0e04a3ca98", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/36df83a97a7f140fdb008b727a94f882847c6a6f", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/57ae483bad33059a885366d5445b7e1f6f29860a", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://security.gentoo.org/glsa/201701-32", "source": "cve@mitre.org"}, {"url": "https://www.phpmyadmin.net/security/PMASA-2016-21/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/03f73d48369703e0d3584699b08e24891c3295b8"}}