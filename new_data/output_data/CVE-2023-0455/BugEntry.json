{"buggy_code": ["<?php\n\n/**\n * *************************\n * Errors and Solutions\n * ************************\n * \n * If submit a large of data and return the following error in console: \n *   net::ERR_CONTENT_DECODING_FAILED\n * \n *      It happens when your HTTP request's headers claim that the content is gzip encoded, \n *      but it isn't. Turn off gzip encoding setting or make sure the content is in fact encoded.\n * \n * Please comment ob_start(\"ob_gzhandler\"); in loader.php file in check it is return.\n * \n * if it max_input_vars error, then increase it in php.ini file\n * \n * Continue updating....\n * \n */\n\n\n\n// Site Configuration\ndefine('ACTIVE_THEME', 'rui');\ndefine('TABLE_PREFIX', 'bms_');\ndefine('AUTO_LOGOUT_TIME', 300); // in Second. Default is five minutes\n\n// Directory Configuration\ndefine('DIR_CORE', DIR_BASE . 'core/');\ndefine('DIR_THEME', DIR_BASE . 'theme/' . ACTIVE_THEME . '/');\ndefine('DIR_MODULE', DIR_BASE . 'module/'); \ndefine('DIR_ASSETS', DIR_BASE . 'assets/'); \ndefine('DIR_INCLUDE', DIR_BASE . 'include/'); \ndefine('DIR_UPLOAD', DIR_ASSETS . 'upload/'); \ndefine('DIR_LOCAL', DIR_INCLUDE . 'local/'); \ndefine('DIR_LANG', DIR_LOCAL . 'lang/'); \ndefine('ERROR_PAGE', DIR_INCLUDE . 'static/errorpages/');\ndefine('SYSTEM_DOOR', DIR_INCLUDE . 'system/door/');\ndefine('SYSTEM_API', DIR_INCLUDE . 'system/api/');\ndefine('APPS', DIR_INCLUDE . 'apps/');\ndefine('LOAD_LIB', DIR_INCLUDE . 'lib/');\ndefine('DB_CONN', DIR_INCLUDE . 'db/db.php');\n\n\n/**\n * Max file upload size in MB\n * Note: Must be less then or euqal to PHP MAX_FILE_UPLOAD_SIZE and post_max_size\n */\n$_SETTINGS[\"MAX_UPLOAD_SIZE\"] = 8;\n\n/**\n * Define allowed mime type.\n * \n * Can be seen common mime type here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n * or\n *  https://www.iana.org/assignments/media-types/media-types.xhtml\n * \n */\n// Vaild image type for upload. must be in lower case\n$_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"] = array(\"jpeg\", \"jpg\", \"png\");\n\n// Valid document type for upload. must be in lower case\n$_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"] = array(\"pdf\", \"msword\", \"vnd.openxmlformats-officedocument.wordprocessingml.document\", \"vnd.ms-excel\", \"vnd.openxmlformats-officedocument.spreadsheetml.sheet\");\n\n// Valid audio type for upload\n$_SETTINGS[\"VALID_AUDIO_TYPE_FOR_UPLOAD\"] = array(\"mpeg\", \"ogg\", \"opus\", \"aac\", \"wav\", \"webm\");\n\n// Page title variable. All page title will be included here\n$_SETTINGS[\"PAGE_TITLE\"] = array();\n\n// Dynamic Menu variable.\n$_SETTINGS[\"NAV_MENU\"] = array();\n\n\n?>", "<?php\n/**\n * Trim all malicious input to protect SQL Injection and XXS\n * \n * @since 0.1\n * \n * @param string|int|bool\t$data\tdata to be trimed.\n * @param bool              $encoding if false then disable htmlspecialchars($data) and stripslashes() function. Default is true.\n * @return string|int|bool\treturn trimed data\n */\nfunction safe_input($data, $encoding = true) {\n\t$data = trim($data);\n    if($encoding === true) {\n        $data = stripslashes($data);\n        $data = htmlspecialchars($data, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401);\n    }\n\t$data = mysqli_real_escape_string($GLOBALS['conn'], $data);\n\treturn $data;\n}\n\n/**\n * Convert all applicable characters to HTML entities\n * \n * From PHP 8.1.0 the default flag is ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401\n * So, we make this for all version\n */\nfunction safe_entities($data) {\n    return htmlentities($data, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401);\n}\n\n/**\n * Determine the http or https and append with the domain.\n * \n * @since 0.1\n * \n * @return string\thttp:// or https://\n */\nfunction transfer_protocol() {\n\tif(isset($_SERVER['HTTPS']) && filter_var($_SERVER['HTTPS'], FILTER_VALIDATE_BOOLEAN)) {\n\t\treturn \"https://\";\n\t} else {\n\t\treturn \"http://\";\n\t}\n}\n\n/**\n * Return the root domain\n */\nfunction root_domain() {\n    return get_options(\"rootDomain\");\n}\n\n/**\n * @since 0.1\n * \n * @return string\tReturn the full application URL\n */\nfunction full_website_address() {\n\treturn transfer_protocol().root_domain(); \n}\n\n/**\n * Determine the homepage of the application.\n * \n * @since 0.1\n * \n * @return bool\t\tTrue or Fales\n */\nfunction is_home() {\n\t$get_uri = rtrim($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'],\"/\");\n\t$homepage = str_ireplace(transfer_protocol(), \"\", full_website_address());\n\t// posible other homepage\n\t$pohp = array($homepage, \"www.$homepage\", \"$homepage/index.php\", \"www.$homepage/index.php\");\n\n\treturn in_array($get_uri, $pohp);\n}\n\n/**\n * Redirect to a specific url\n * \n * @since 0.1\n * \n * @param string    $url where the url redirected.\n */\nfunction redirect($url) {\n    echo \"<script>window.location.href='{$url}';</script>\";\n}\n\n/**\n * \n * Discount calculator\n * \n * @since 0.1\n * \n * @param float|number        $amount The amount which need to calculate\n * @param string|number $discount   Fixed discount or Percantage. Eg 10 or 10%\n * \n * @return float   Discounted amount\n */\nfunction calculateDiscount($amount, $discount) {\n\n    if( empty($discount) or $discount === NULL or $discount === \"NULL\" ) {\n        return 0;\n    } else if(strpos($discount, \"%\") > 0) {\n\n        $amount = (float)$amount; \n        $discount = (float)rtrim($discount, \"%\");\n        \n        // For parcantage discount\n        return (float)round( ($discount/100) * $amount, get_options(\"decimalPlaces\") ); \n\n    } else {\n        \n        return (float)round($discount, get_options(\"decimalPlaces\"));\n\n    }\n\n}\n\n\nfunction calculatePercentage($amount, $discount) {\n\n    return number_format(( ( $discount / $amount ) * 100 ), 10, \".\", \"\") . \"%\";\n\n}\n\n\n/**\n * Generate and return the current page slug\n * \n * $_SERVER['HTTP_HOST'] returns the main domain\n * $_SERVER['REQUEST_URI'] returns the uri after the domain\n * root_domain() returns the configured domain\n * \n * @since 0.1\n * \n * @return string the page slug\n */\nfunction pageSlug() {\n\n    $URI = explode(root_domain(), rtrim($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'], \"/\"));\n    $URI = explode(\"?\", $URI[1]);\n    return trim($URI[0], '/');\n\n}\n\n/**\n * Tax Calculator\n */\nfunction calculateTax($amount, $taxRate) {\n\n    $amount = (float)$amount; \n    $taxRate = (float)rtrim($taxRate, \"%\");\n    \n    return round(($taxRate/100) * $amount, get_options(\"decimalPlaces\") ); \n}\n\n/** \n * in_arry_r() function for Multidimentional array.\n * \n * @since 0.1\n * \n * @param string|int    $needle     The string or number that need to find in the array.\n * @param array         $haystack   The array, where need to search.\n * @param bool          $strict     OPtional. Search the value with strictly (==== or ==). Default is false (==)\n * \n * @return bool         True or false. If found then return true, otherwise return false. \n*/\nfunction in_array_r($needle, $haystack, $strict = false) {\n    foreach ($haystack as $item) {\n        if (($strict ? $item === $needle : $item == $needle) || (is_array($item) && in_array_r($needle, $item, $strict))) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Block unauthorized access.\n * \n * @since 0.1\n * \n * @param bool      $stricted   Optional. Default is false. If make it true it will check there are has any HTTP REFERER. If not found, then block the request. \n * \n * @return bool     True or False. \n */\nfunction access_is_permitted($stricted = false) {\n    // header array\n    $headers = getallheaders();\n\n    //create_log(\"test\");\n\n    if( current_ip_is(\"Blocked\") ) {\n\n        return false;\n\n    }  else if(  get_options(\"canAccessOnlyPermittedIP\") === \"1\" and !current_ip_is(\"Permitted\") ) {\n\n        return false; \n\n    }  else if ($stricted) {\n            \n        if( isset($_SERVER['HTTP_REFERER']) and \n            strpos($_SERVER['HTTP_REFERER'], full_website_address())  === 0 and\n            isset($headers[\"Connection\"])\n        ) {\n            return true; \n        } \n        \n    }  else if (isset($headers[\"Connection\"])) { \n\n        return true;\n        \n    } else {\n\n        return false;\n\n    }\n\n    \n   \n}\n\n\n/**\n * Check if the current user ip is permitted or not\n * \n * @since 1.0.1\n * \n * @param string $action Permitted/Blocked. Case sensitive\n * \n * @return bool true/false\n */\n\nfunction current_ip_is($action) {\n\n    // Select the ip address\n    $check_ip = easySelectA(array(\n        \"table\"     => \"firewall\",\n        \"fields\"    => \"count(*) as count\",\n        \"where\"     => array(\n            \"fw_status = 'Active' and fw_action = '{$action}' and fw_ip_address\"  =>  get_ipaddr()\n        )\n    ));\n\n    if( $check_ip !== false and $check_ip[\"data\"][0][\"count\"] > 0  ) {\n        return true;\n    } else {\n        return false; \n    }\n\n}\n\n/**\n * Check the login status\n * \n * @since 0.1\n * \n * @return  bool    Return true if is login\n */\nfunction is_login() {\n    global $table_prefeix; // table prefix;\n\n    // If \"Don't Signout on inactivity\" is not checked and last activity is more then AUTO_LOGOUT_TIME \n    // Then return false and unset session.\n    if( isset($_COOKIE[\"keepAlive\"]) !== true and isset($_SESSION[\"LAST_ACTIVITY\"]) and (time() - $_SESSION[\"LAST_ACTIVITY\"]) > AUTO_LOGOUT_TIME ) {\n\n        session_unset();\n        return false;\n\n    }\n    \n\n    $sesionUserId = isset($_SESSION[\"uid\"]) ? $_SESSION[\"uid\"] : \"\";\n    $sessionPassAccessKey = isset($_SESSION[\"sak\"]) ? $_SESSION[\"sak\"] : \"\";\n    \n    // Select the user\n    defined('selectUser') ?: define('selectUser', easySelectA(array(\n        \"table\"     => \"users as user\",\n        \"fields\"    => \"user_email, user_emp_id, user_pass_aaccesskey\",\n        \"where\"     => array(\n            \"user.is_trash = 0 and user_id\" => $sesionUserId,\n            \" and user_pass_aaccesskey\" => $sessionPassAccessKey\n        )\n    )));\n\n    // define the variable\n    $sha1 = \"\";\n\n    if( selectUser !== false and isset($_SESSION[\"keepAliveOnNetworkChanges\"]) and $_SESSION[\"keepAliveOnNetworkChanges\"] === 1 ) {\n        $sha1 = sha1(selectUser[\"data\"][0][\"user_email\"].$_SERVER[\"HTTP_USER_AGENT\"]);\n    } else if(selectUser !== false) {\n        $sha1 = sha1(selectUser[\"data\"][0][\"user_email\"].$_SERVER[\"HTTP_USER_AGENT\"].$_SERVER[\"REMOTE_ADDR\"]);\n    }\n\n    if(isset($_SESSION[\"uid\"]) and isset($_SESSION[\"sak\"]) and $sha1 === $_SESSION[\"sak\"] and isset($_COOKIE[\"eid\"]) and selectUser[\"count\"] === 1 AND selectUser[\"data\"][0][\"user_emp_id\"] === $_COOKIE[\"eid\"]) {\n        \n        // Return true to say that we are now logged in.\n        return true; \n\n    } else {\n\n        // If any internal user try to change the eid then ban him to punish\n        // Will make it later.\n        //if(selectUser[\"data\"][0][\"user_emp_id\"] !== $_COOKIE[\"eid\"]) { }\n\n        // if any unathorized sessions are set then unset them.\n        if( isset($_SESSION) ) {\n            session_unset();\n        }\n\n        return false;\n\n    }\n}\n\n\n/**\n * check current user has a specific permission.\n * Example:\n * \n * current_user_can(\"accounts.View && accounts.Add\");\n * If both permission exists in current user then return true\n * \n * current_user_can(\"accounts.View || accounts.Add || accounts.Delete\");\n * If any one permission exists in current user then return true.\n * \n * Do not use || and && in signle function, like this:\n * current_user_can(\"accounts.View && accounts.Add || accounts.Edit || accounts.Delete\")\n * It Will return an unexpected result.\n * \n * Instead, use like this: (PHP Way)\n * current_user_can(\"accounts.View && accounts.Add) OR/AND current_user_can(accounts.Edit || accounts.Delete\")\n * \n * @since 0.1\n * \n * @param string $permission   The permision is need to check.\n * \n * @return bool If the permission exists then return true. \n */\n\n // Select the current user permission\n// We actually add this outside of function because, if we select it inside the current_user_can() function it will execute/ or select multitimes.\ndefined('USER_PERMISSIONS') ?: define('USER_PERMISSIONS', \n\n    !isset($_SESSION[\"uid\"]) ?: unserialize(\n        html_entity_decode(\n            easySelectA(array(\n                \"table\"     => \"users\",\n                \"fields\"    => \"user_permissions\",\n                \"where\"     => array(\n                    \"user_id\" => isset($_SESSION[\"uid\"]) ? $_SESSION[\"uid\"] : NULL\n                )\n            ))[\"data\"][0][\"user_permissions\"]\n        )\n    )\n);\n\n  // Start the function\nfunction current_user_can($permission) {\n\n\n    //create_log(\"current_user_can\", debug_backtrace());\n\n    // If current user is Super Admin then return it true\n    if( is_super_admin() ) {\n        return true;\n    }\n\n    // Check there is no || and && mark in the $permission string.\n    if( strpos($permission, \" || \") === false and strpos($permission, \" && \") === false ) {\n    \n        if( is_array(USER_PERMISSIONS) and in_array($permission, USER_PERMISSIONS) ) {\n            return true; \n        }\n    \n    }\n    \n    // Check the OR Condition.\n    // If any permission exists in the list then return true\n    if( strpos($permission, \" || \") !== false ) {\n\n        foreach(explode(\" || \", $permission) as $permission) {\n \n            // Check if the permission exists in user's permissions\n            // Here we must not use else: return false; with the OR Condition\n            // Because the condition can be true on second time loop\n            if( is_array(USER_PERMISSIONS) and in_array($permission, USER_PERMISSIONS) ) {\n                return true; \n            }\n\n        }\n\n    }\n    \n    // Check the AND Condition\n    // If all permission exists in the list the return true\n    if( strpos($permission, \" && \") !== false ) {\n\n        $permissionCarrier = array();\n        foreach(explode(\" && \", $permission) as $permission) {\n\n            // Check if the permission exists in user's permissions\n            if( is_array(USER_PERMISSIONS) and in_array($permission, USER_PERMISSIONS) ) {\n                $permissionCarrier[\"true\"]  = 1;\n            } else {\n                $permissionCarrier[\"false\"]  = 0;\n            }            \n        }\n\n        // If the false array key not exists then return true. \n        if( array_key_exists(\"false\", $permissionCarrier) === false ) {\n            return true;\n        }\n\n    }\n    \n}\n\n\n/**\n * The three function of bellow must not go to above of current_user_can() function.\n */\n\n\n/**\n * Function to generate menu from array\n * \n * :::::Permission::::::\n * If no permission set then the menu will be hidden\n * to show all user set the permission:  __? => true\n * If a submenu have permission for a user, then the parents menu will be shown, wither is not set any permission\n * If parents menu dont have access permission to user and if a submenu has the permission then the both of will be not shown\n * \n * The menus which are include in $menus[\"hidden\"] will be not showen\n * \n * @since 0.1\n * \n * @param array $menus  The menu array.\n * \n * @return string   The menu string.\n */\n\nfunction generateMenu(array $menus) {\n\n    global $_SETTINGS;\n    $generatedMenu = \"\";\n\n    foreach($menus as $menuName => $MenuContext) {\n\n        $modal = array_key_exists(\"t_modal\", $MenuContext) ? \"data-toggle='modal' data-target='{$MenuContext['t_modal']}'\" : \"\";\n        $linkCarrier = isset($MenuContext['t_link']) ? $MenuContext['t_link'] : \"\";\n        $iconCarrier = isset($MenuContext['t_icon']) ? $MenuContext['t_icon'] : \"\";\n        $dloadCarrier = isset($MenuContext['dload']) and $MenuContext['dload'] === true ? $MenuContext['dload'] : false;\n        $hasPermission = ( \n                            (\n                                has_permission($MenuContext) and is_array($MenuContext) and array_key_exists(\"__?\", $MenuContext) === false\n                            ) or\n                            ( \n                                isset($MenuContext[\"__?\"]) and $MenuContext[\"__?\"] === true \n                            )\n                        ) ? true : false;\n\n        // Add the Menu Title\n        if( isset($MenuContext[\"title\"]) ) {\n            $_SETTINGS[\"PAGE_TITLE\"][$MenuContext[\"t_link\"]] = $MenuContext[\"title\"];\n        }\n        \n        // unset key\n        unset(\n            $MenuContext[\"t_link\"], \n            $MenuContext[\"t_icon\"], \n            $MenuContext[\"t_modal\"], \n            $MenuContext[\"dload\"], \n            $MenuContext[\"title\"], \n            $MenuContext[\"__?\"]\n        );\n        \n        // If has permission and the menu name is not Hidden\n        if($hasPermission and $menuName !== \"Hidden\") {\n            \n            $hasSubMenu = ( !empty($MenuContext) and has_permission($MenuContext) ) ? true : false; \n            $subMenuArrowIcon = $hasSubMenu ? \"<span class='pull-right-container'> <i class='fa fa-angle-left pull-right'></i> </span>\" : \"\";\n\n            $getContent = ( $dloadCarrier === false and !empty($linkCarrier) and $linkCarrier !== \"#\" and empty($modal) ) ? \"onclick='getContent(this.href, event);'\" : \"\";\n        \n\n            $generatedMenu .= $hasSubMenu ? \"<li class='treeview'>\" : \"<li>\";\n                \n                $generatedMenu .= \"<a {$getContent} {$modal} href='{$linkCarrier}'>\n                        <i class='{$iconCarrier}'></i> \n                        <span>\". __($menuName) .\"</span>\n                        $subMenuArrowIcon\n                        </a>\";\n        \n                if($hasSubMenu) {\n\n                    $generatedMenu .= \"<ul class='treeview-menu'>\";\n                    $generatedMenu .= generateMenu($MenuContext);\n                    $generatedMenu .= \"</ul>\";\n\n                }\n    \n            $generatedMenu .= \"</li>\";\n\n        } else if($menuName === \"Hidden\") {\n\n            // If the menu item is hidden\n            // then not append these menus on $generatedMenu\n            // The recurson is only for get the titles\n            generateMenu($MenuContext);\n\n        }\n        \n    }\n\n    return $generatedMenu;\n  \n}\n\n\n/**\n * Generate an select option list for redirect after login settings\n */\nfunction generateSelectOptions(array $menus, $selected = \"\") {\n\n    foreach($menus as $menuName => $MenuContext) {\n\n\n        if( isset($MenuContext[\"t_link\"]) and $MenuContext[\"t_link\"] !== \"#\" ) {\n\n            $selectedOption = ($selected === $MenuContext[\"t_link\"] ) ? \"selected\" : \"\";\n            echo \"<option {$selected} value='{$MenuContext[\"t_link\"]}'>$menuName</option>\";\n\n        } else {\n\n            // create the option group\n            echo \"<optgroup label ='$menuName'>\";\n\n            // get the options\n            foreach( $MenuContext as $options => $optionContext ) {\n\n                if( isset($optionContext['t_link']) and !empty($optionContext['t_link']) ) {\n                    $selectedOption = ($selected === $optionContext[\"t_link\"] ) ? \"selected\" : \"\";\n                    echo \"<option {$selectedOption} value='{$optionContext[\"t_link\"]}'>$options</option>\";\n\n                }\n\n            }\n            \n            echo \"</optgroup>\";\n\n        }\n        \n    }\n  \n}\n\nfunction has_permission(array $MenuContext, $isNeedCheckUrl = false) {\n\n    // If super Admin then grant all permissions\n    if( is_super_admin() ) {\n        return true;\n    }\n\n    // Generate the current url\n    $url = transfer_protocol().strtok($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'], \"?\");\n\n    foreach($MenuContext as $key => $value) {\n\n        // If need to check the url\n        if($isNeedCheckUrl) {\n\n            if (  ( isset($value[\"__?\"]) and $value[\"__?\"] === true and $value[\"t_link\"] === $url ) or (is_array($value) and has_permission($value, true)) )  {\n          \n                return true; \n           }\n\n        } else {\n\n            if (  ( isset($value[\"__?\"]) and $value[\"__?\"] === true ) or (is_array($value) and has_permission($value)) )  {\n            \n                return true; \n\n           }\n        }\n\n    }\n\n    return false;\n\n}\n\n/** Detarmin if the current user is super admin or not\n * If suport admin, return true, otherwise false\n */\nfunction is_super_admin(){\n\n    // If super Admin then grant all permissions\n    if( is_array(USER_PERMISSIONS) and in_array(\"SuperAdmin\", USER_PERMISSIONS) ) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n\n/**\n * check current user has the permission to visit current page.\n * \n * @since 0.1\n * \n * @return bool If the permission exists then return true. \n */\nfunction current_user_can_visit_this_page() {\n    global $default_menu;\n    $defaultPermissionForAllUser = array (\"xhr\", \"info\", \"logout\", \"login\", \"api/v1\", \"invoice-print\", \"images\", \"print\", \"css\", \"js\", \"barcode\");\n    \n    if( has_permission($default_menu, true) or in_array(pageSlug(), $defaultPermissionForAllUser) ) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n\n/**\n * Insert data into Database.\n * \n * @since 0.1\n * \n * @param string\t$table\t\t\tThe table name, where the data will insert.\n * @param array\t\t$fieldAndValue\tThe field and field value array. All fields of table and these value have to be stored.\n * @param array\t\t$duplicateCheck\tOptional. For checking the data if exists on the DB. The array is same as easySelect() function's $where.\n * @param bool      @extraInfo      Optional. If needs last_insert_id the set it true. Default is false\n * \n * @return string|bool\tReturn true if data is successfully inserted into the table, otherwise it will throw the mysql error.\n */\nfunction easyInsert(\n    string $table,\n    array $fieldAndValue, \n    array $duplicateCheck=array(), \n    bool $extraInfo = false\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $fields = \"\";\t\t\t// The field variable will store all table field.\n    $fieldsValue = \"\";\t\t// The fieldValue variable will sotre all filed value\n\n\n    // If the duplicate Checker is enabled, then check if the data is duplicate or exists on the database, \n\t// If true then return error massage.\n\tif(!empty($duplicateCheck) and !isset($_POST[\"forceInsert\"]) ) {\n\t\tif (easySelect(\n\t\t\t$table,\n            \"*\",\n            array(),\n\t\t\t$duplicateCheck\n\t\t) !== false) {\n\t\t\treturn \"The data is already exists. <input type='checkbox' id='forceInsert' name='forceInsert'/> <label style='cursor: pointer;' for='forceInsert'>Force Insert</label> \";\n\t\t}\n\t}\n\n    foreach($fieldAndValue as $item => $itemsValue) {\n        $fields .= $item . \", \";\n\n        /**\n         * check if $itemsValue is array or not. if array then include the array value [bool] into the safe_input function\n         * It actually use if we dont need the htmlspecialchars() and stripslashes() function in safe_input() function\n         * If we set the second parameter false then htmlspecialchars() and stripslashes() function not be used. \n         **/ \n        if(is_array($itemsValue)) {\n\n            $fieldsValue .= \"'\".safe_input($itemsValue[0], $itemsValue[1]) .\"', \";\n\n        } else if( is_null($itemsValue) ) { // if the input value is null\n\n            $fieldsValue .= \"NULL, \";\n\n        } else if( strlen($itemsValue) < 1 ) { // If the input value is empty string\n\n            $fieldsValue .= \"'', \";\n\n        } else { // And in all other situation insert the input value.\n\n            $fieldsValue .= \"'\".safe_input($itemsValue) .\"', \";\n\n        }\n    }\n\n    $fields = rtrim($fields, \", \");\n    $fieldsValue = rtrim($fieldsValue, \", \");\n\t\n\t// Build the query\n   $sqlQuery = \"INSERT INTO {$table_prefeix}{$table} ($fields) VALUES ($fieldsValue)\"; \n\n\t// Run the Query\n\t$conn->query($sqlQuery);\n\n\t// Get the last insert ID. \n    $last_id = $conn->insert_id;\n    \n\t//check if last $conn->error is empty then return true. Otherwise return the error message.\n    if(empty($conn->error)) {\n\n        // If we need any extra info\n        if($extraInfo === true) {\n\n            return array (\n                \"status\" => \"success\",\n                \"last_insert_id\" => $last_id\n            );\n\n        } else {\n            return true; \n        }\n        \n    } else {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n        // create_log($sqlQuery, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        // return error msg\n        return $conn->error;\n    }\n\n}\n\n\n/**\n * Function to fetch data from database\n * \n * Example:\n * easySelect (\n * \t\t\"$table\", \t//The table\n * \t\t\"$field\",\t//The selector ($field), * or column name\n *      array (     // Join clause\n *          \"left join ... bla bla bla\"\n *      ),\n * \t\tarray (\t\t//Where Clause\n * \t\t\t\"group_name\" => \"love\",\n * \t\t\t\" OR group_id\" => \"1\",\n * \t\t),\n * \t\t\"group_id ASC\"\t//Order by clause\n * )\n * \n * @since 0.1\n * \n * @param string\t$table\t\tThe table name, from where the data will fetch.\n * @param string\t$field\t\tOptional. The selector or field of the table. Like * or the specific column name or multiple column seperating by comman(,)\n * @param array     $join       Optional. Join multiple table\n * @param array\t\t$where\t\tOptional. The where clause. Condition of selecting data\n * @param array \t$orderBy\tOptional. How the data will show. ASC OR DESC\n * @param array     $limit      Optional. Must be in numeric value. \n * \n * @return array/bool\t\t\tReturn all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.\n */\nfunction easySelect(\n    string $table, \n    string $field = \"\", \n    array $join=array(), \n    array $where=array(), \n    array $orderBy=array(), \n    array $limit=array()\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $dataFromDB = [];\n\n    // if field empty then input a star (*)\n    if(empty($field)) {\n        $field = \"*\";\n    }\n\n    // Build the query\n    $sqlQuery = \"SELECT SQL_CALC_FOUND_ROWS {$field} FROM {$table_prefeix}{$table}\";\n\n/*     // Check if the table exists\n    if($conn->query($sqlQuery) === false) {\n        return \"Table {$table} or field {$field} doesn't exist\";\n    } */\n\n    // Join clues for joining multiple table\n    $joinClues = \"\";\n    if(!empty($join)) {\n\n        foreach($join as $joinVar) {\n            $joinClues .= \"{$joinVar} \";\n        }\n\n    }\n\n    $sqlQuery .= \" {$joinClues}\";\n\n    // Where Cluase\n    if(!empty($where)) {\n\n        // If any where clause exists then append it with the query.\n        $whereClause = \"\";\n        \n        foreach($where as $whereField => $whereValue) {\n\n            // If where value is empty then its not need to include in wherecluase. \n            if($whereValue !== \"\" and $whereValue !== \"%\" and $whereValue !== \"%%\" ) {\n\n                if(!is_numeric($whereField) and stripos($whereField, \"LIKE\") > 0) { // Check if there any LIKE keyword in $whereField\n\n                    $whereClause .= \"{$whereField} '\".safe_input($whereValue).\"'\";\n    \n                } else if(!is_numeric($whereField)) {\n    \n                    $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n                    \n                } elseif(stripos($whereValue, \"between\") > 0) { // Check if the between keyword exists and data is not empty then the whare cluase will add with query. \n\n                    if(stripos($whereValue, \"BETWEEN '' and\") < 1) {\n\n                        $whereClause .= \" $whereValue\";\n                    }\n\n                } else {\n    \n                    $whereClause .= \" $whereValue\";\n                }\n\n            }\n            \n        }\n\n        // Append the where clause with $sqlQuery\n        $sqlQuery .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n\n    }\n\n    // OrderBy Clause\n    if(!empty($orderBy)) {\n\n        // If any order by clause exists then append it with the query.\n        $orderByClause = \"\";\n        foreach($orderBy as $orderByField => $orderByValue) {\n\n            // Only allow ASC AND DESC string in $orderByValue\n            if(!in_array(strtoupper($orderByValue), array(\"ASC\", \"DESC\"))) {\n                return \"Invalied order by clause. Allow only ASC OR DESC\";\n            }\n            \n            $orderByClause .= \"{$orderByField} {$orderByValue}, \";\n            \n        }\n        $orderByClause = rtrim($orderByClause, \", \");\n        // Append the Orderby Clause with $sqlQuery\n        $sqlQuery .= \" ORDER BY {$orderByClause}\";\n    }\n\n    // Limit Clause\n    if(!empty($limit)) {\n\n        // If any order by clause exists then append it with the query.\n        if(!is_numeric($limit[\"start\"]) or !is_numeric($limit[\"length\"])) {\n            return \"Limit clause must be a numeric value.\";\n        }\n\n        $limitStart = intval($limit[\"start\"]);\n        $limitLength = intval($limit[\"length\"]);\n     \n        // Append the Limit Clause with $sqlQuery\n        $sqlQuery .= \" LIMIT {$limitStart}, {$limitLength}\";\n    }\n\n   /*  echo  $sqlQuery ;\n    exit(); */\n\n    // Run the query and store the result into getResult variable.\n    $getResult = $conn->query($sqlQuery);\n\n    //create_log($sqlQuery);\n\n    // Check If the syntax has any error then throw an the error.\n    if($getResult === false) {\n        \n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n    }\n\n    // Check if there is more then Zero (0) result.\n    if($getResult->num_rows > 0) {\n        \n\n        // $countTotalFilteredRow = \"SELECT count(*) as totalFilteredRow FROM {$table_prefeix}{$table}\";\n        // $countTotalFilteredRow .= \" {$joinClues}\";\n        // $countTotalFilteredRow .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n        // $countTotalFilteredRow = $conn->query($countTotalFilteredRow)->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        $countTotalFilteredRow = $conn->query(\"SELECT found_rows() as totalFilteredRow;\")->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        // return all data in array format\n        return array(\n            \"has_data\" => true,\n            \"count\" => (int)$countTotalFilteredRow,\n            \"data\" => $getResult->fetch_all(true)\n        );\n\n    } else {\n        // Return false if there is no data.\n        return false;\n\n        /**\n         * return array(\n         *       \"has_data\" => false,\n           *     \"data\" => $getResult->fetch_all(true)\n         *   );\n         */\n\n\n    }\n    \n}\n\nfunction easySelectA(array $query) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $dataFromDB = [];\n    $table = $fields = $join = $where = $groupby = $orderBy = $limit = \"\";\n\n    // Lower case all key name.\n    $query = array_change_key_case($query, CASE_LOWER);\n\n    // Check if the table is declared or empty\n    if( !isset($query[\"table\"]) ) {\n        return \"Table name must be declared\";\n    } else if(empty($query[\"table\"]) or !is_string($query[\"table\"])) {\n        return \"The table must not be empty and must be a string\";\n    } else {\n        $table = $query[\"table\"];\n    }\n\n    // Check the filed\n    if( isset($query[\"fields\"]) and !is_string($query[\"fields\"]) ) {\n        return \"Fields must be string\";\n    } else if( !empty($query[\"fields\"]) ) {\n        $fields = $query[\"fields\"];\n    } else {\n        $fields = \"*\";\n    }\n\n    // Check join\n    if( isset($query[\"join\"]) and !is_array($query[\"join\"]) ) {\n        return \"Join claues must be array\";\n    } else if(isset($query[\"join\"])) {\n        $join = $query[\"join\"];\n    }\n\n    // Check where cluse\n    if( isset($query[\"where\"]) and !is_array($query[\"where\"]) ) {\n        return \"Where claues must be array\";\n    } elseif(isset($query[\"where\"])) {\n        $where = $query[\"where\"];\n    }\n\n    // Check group by cluse\n    if( isset($query[\"groupby\"]) and !is_string($query[\"groupby\"]) ) {\n        return \"Group by claues must be string\";\n    } elseif(isset($query[\"groupby\"])) {\n        $groupby = $query[\"groupby\"];\n    }\n\n    // Check orderBy cluse\n    if( isset($query[\"orderby\"]) and !is_array($query[\"orderby\"]) ) {\n        return \"Order by claues must be array\";\n    } elseif(isset($query[\"orderby\"])) {\n        $orderBy = $query[\"orderby\"];\n    }\n\n    // Check Limit \n    if( isset($query[\"limit\"]) and !is_array($query[\"limit\"]) ) {\n        return \"Order by claues must be array\";\n    } elseif(isset($query[\"limit\"])) {\n        $limit = $query[\"limit\"];\n    }\n\n\n    // Build the query\n    $sqlQuery = \"SELECT SQL_CALC_FOUND_ROWS {$fields} FROM {$table_prefeix}{$table}\";\n\n\n    // Join clues for joining multiple table\n    $joinClues = \"\";\n    if(!empty($join)) {\n\n        foreach($join as $joinVar) {\n            $joinClues .= \"{$joinVar} \";\n        }\n\n    }\n\n    $sqlQuery .= \" {$joinClues}\";\n\n    // Where Cluase\n    if(!empty($where)) {\n\n        // If any where clause exists then append it with the query.\n        $whereClause = \"\";\n        \n        foreach($where as $whereField => $whereValue) {\n\n            // If where value is empty then its not need to include in wherecluase. \n            if($whereValue !== \"\" and $whereValue !== \"%\" and $whereValue !== \"%%\" ) {\n\n                if(!is_numeric($whereField) and stripos($whereField, \"LIKE\") > 0) { // Check if there any LIKE keyword in $whereField\n\n                    $whereClause .= \"{$whereField} '\".safe_input($whereValue).\"'\";\n    \n                } else if(!is_numeric($whereField)) {\n    \n                    $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n                    \n                } elseif(stripos($whereValue, \"between\") > 0) { // Check if the between keyword exists and data is not empty then the whare cluase will add with query. \n\n                    if(stripos($whereValue, \"BETWEEN '' and\") < 1) {\n\n                        $whereClause .= \" $whereValue\";\n                    }\n\n                } else {\n    \n                    $whereClause .= \" $whereValue\";\n                }\n\n            }\n            \n        }\n\n        // Append the where clause with $sqlQuery\n        $sqlQuery .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n\n    }\n\n    // groupby clause\n    if(!empty($groupby)) {\n        $sqlQuery .= \" group by \" . $groupby;\n    }\n\n    // OrderBy Clause\n    if(!empty($orderBy)) {\n\n        // If any order by clause exists then append it with the query.\n        $orderByClause = \"\";\n        foreach($orderBy as $orderByField => $orderByValue) {\n\n            // Only allow ASC AND DESC string in $orderByValue\n            if(!in_array(strtoupper($orderByValue), array(\"ASC\", \"DESC\"))) {\n                return \"Invalied order by clause. Allow only ASC OR DESC\";\n            }\n            \n            $orderByClause .= \"{$orderByField} {$orderByValue}, \";\n            \n        }\n        $orderByClause = rtrim($orderByClause, \", \");\n        // Append the Orderby Clause with $sqlQuery\n        $sqlQuery .= \" ORDER BY {$orderByClause}\";\n    }\n\n    // Limit Clause\n    if(!empty($limit)) {\n\n        // If any order by clause exists then append it with the query.\n        if(!is_numeric($limit[\"start\"]) or !is_numeric($limit[\"length\"])) {\n            return \"Limit clause must be a numeric value.\";\n        }\n\n        $limitStart = intval($limit[\"start\"]);\n        $limitLength = intval($limit[\"length\"]);\n     \n        // Append the Limit Clause with $sqlQuery\n        $sqlQuery .= \" LIMIT {$limitStart}, {$limitLength}\";\n    }\n\n   /*  echo  $sqlQuery ;\n    exit(); */\n\n    // Run the query and store the result into getResult variable.\n    $getResult = $conn->query($sqlQuery);\n\n    //create_log($sqlQuery);\n\n    // Check If the syntax has any error then throw an the error.\n    if($getResult === false) {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n\n    }\n\n    // Check if there is more then Zero (0) result.\n    if($getResult->num_rows > 0) {\n\n        // $countTotalFilteredRow = \"SELECT count(*) as totalFilteredRow FROM {$table_prefeix}{$table}\";\n        // $countTotalFilteredRow .= \" {$joinClues}\";\n        // $countTotalFilteredRow .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n        // $countTotalFilteredRow = $conn->query($countTotalFilteredRow)->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        $countTotalFilteredRow = $conn->query(\"SELECT found_rows() as totalFilteredRow;\")->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        // return all data in array format\n        return array(\n            \"count\" => (int)$countTotalFilteredRow,\n            \"data\" => $getResult->fetch_all(true)\n        );\n\n    } else {\n        // Return false if there is no data.\n        return false;\n    }\n    \n}\n\n\n/**\n * easySelect Direct\n * \n * @since 0.1\n * \n * @param $query    The query which will run\n * \n * @return array/bool\t\t\tReturn all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.\n * \n */\nfunction easySelectD($query) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $dataFromDB = [];\n\n    /* echo $query;\n    exit(); */\n    // Run the query and store the result into getResult variable.\n    $getResult = $conn->query($query);\n\n    // Check If the syntax has any error then throw an the error.\n    if($getResult === false) {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n    }\n\n    // Check if there is more then Zero (0) result.\n    if($getResult->num_rows > 0) {\n        \n        // return all data in array format\n        return array(\n            \"count\" => $getResult->num_rows,\n            \"data\" => $getResult->fetch_all(true)\n        );\n\n    } else {\n        // Return false if there is no data.\n        return false;\n    }\n\n}\n\n\nfunction runQuery($query){\n   \n    global $conn;\t\t\t// MySQL connection variable.\n\n    $runQuery = $conn->query($query);\n\n    // Check If the syntax has any error then throw an the error. Otherwise return ture;\n    if($runQuery === false) {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n\n    } else {\n        return true;\n    }\n\n}\n\n\n/**\n * Function to move data to trash.\n * \n * @since 0.1\n * \n * @param string    $table  The table, from where the data will be moved into trash.\n * @param array     $where  The Where clues in array formate.\n * \n * @return string|bool      Return true if the data is successfully moved. Otherwise return the error massage.\n */\nfunction easyDelete(\n    string $table, \n    array $where\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n\n    // Check if the data exists or not\n    $DataToByDeleted = easySelect(\n        $table,\n        \"*\",\n        array(),\n        $where\n    );\n\n    if($DataToByDeleted === false) {\n        return \"There is no data found to delete.\";\n    }\n    \n    // Build the where clues\n    $whereClause = \"\";   \n    foreach($where as $whereField => $whereValue) {\n        $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n    }\n\n    // Build the query\n    $sqlQuery = \"UPDATE {$table_prefeix}{$table} SET is_trash=1 WHERE {$whereClause}\";  \n\n    // Run the query and check\n    if($conn->query($sqlQuery) === TRUE) {\n        \n        return true;\n\n    } else {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error;\n\n    }\n\n}\n\n\n/**\n * Function to delete data from database.\n * \n * @since 0.1\n * \n * @param string    $table  The table, from where the data will be deleted.\n * @param array     $where  The Where clues in array formate.\n * \n * @return string|bool      Return true if the data is successfully deleted. Otherwise return the error massage.\n */\nfunction easyPermDelete(\n    string $table, \n    array $where\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n    // Check if the data exists or not\n    $DataToByDeleted = easySelect(\n        $table,\n        \"*\",\n        array(),\n        $where\n    );\n\n    if($DataToByDeleted === false) {\n        return \"There is no data found to delete.\";\n    }\n    \n    // Build the where clues\n    $whereClause = \"\";   \n    foreach($where as $whereField => $whereValue) {\n        $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n    }\n\n    // Build the query\n    $sqlQuery = \"DELETE FROM {$table_prefeix}{$table} WHERE {$whereClause}\";\n\n    // Run the query and check\n    if($conn->query($sqlQuery) === TRUE) {\n        \n        // Save deleted data\n        save_deleted_date($table, $DataToByDeleted);\n\n        return true;\n    } else {\n        return $conn->error;\n    }\n}\n\n/**\n * Function to update any data\n * \n * @since 0.1\n * \n * @param string    $table  The table, from where the data will be deleted.\n * @param array     $set    The update field and values in array format\n * @param array     $where  The Where clues in array formate.\n * \n * @return string|bool\tReturn true if data is successfully updated, otherwise it will throw the mysql error.\n */\nfunction easyUpdate(\n    string $table, \n    array $set, \n    array $where\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n    // Check if the data exists or not\n    if(easySelect(\n        $table,\n        \"*\",\n        array(),\n        $where\n    ) === false) {\n        return \"There is no data found to edit.\";\n    }\n\n    // Build the set clues\n    $setClues = \"\";\n    foreach($set as $setField => $setValue) {\n        /**\n         * check if $setValue is array or not. if array then include the array value [bool] into the safe_input function\n         * It actually use if we dont need the htmlspecialchars() and stripslashes() function in safe_input() function\n         * If we set the second parameter false then htmlspecialchars() and stripslashes() function not be used. \n         **/ \n        if(is_array($setValue)) {\n\n            $setClues .= \"{$setField} = '\" . safe_input($setValue[0], $setValue[1]) . \"', \";\n\n        } else if( is_null($setValue) ) { // if the input value is null\n\n            $setClues .= \"{$setField} = NULL, \";\n\n        } else if( strlen($setValue) < 1 ) { // If the input value is empty string\n\n            $setClues .= \"{$setField} = '', \";\n\n        } else { // And in all other situation insert the input value.\n           \n            $setClues .= \"{$setField} = '\".safe_input($setValue) .\"', \";\n\n        }\n        \n    }\n\n    $setClues = rtrim($setClues, \", \");\n\n    // Build the query\n    $sqlQuery = \"UPDATE {$table_prefeix}{$table} SET {$setClues}\";  \n\n     // Build the where clues\n    $whereClause = \"\";   \n    foreach($where as $whereField => $whereValue) {\n         $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n    }\n\n    // Apend the where clues with sqlQuery\n   $sqlQuery .= \" WHERE {$whereClause}\";\n\n    /* echo $sqlQuery;\n    exit(); */\n\n    // Run the query and check\n    if($conn->query($sqlQuery) === TRUE) {\n        // Save the query\n        //save_query(\"UPDATE {$table_prefeix}{$table} SET {$setClues}  WHERE {$whereClause}\");\n        \n        return true;\n\n        \n        \n    } else {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error;\n\n    }\n\n}\n\n\n/**\n * save_query use for save the query into database. And we will this for uploading data into main server.\n * \n * @since 0.1\n * \n * @param string $query The query we need to save\n */\nfunction save_query($query) {\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $query = json_encode($query);\n    $conn->query(\"INSERT INTO {$table_prefeix}latest_queries (query_value) VALUES ($query)\");\n\n}\n\n\n/**\n * Function store deleted data in database\n * \n * @since 0.1\n * \n * @param string $table The table name where the data is deleted from. \n * @param array $data  The deleted data we need to store\n */\nfunction save_deleted_date($table, $data) {\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    \n    // Serialize the data\n    $data = serialize($data);\n\n    // Insert deleted data\n    $conn->query(\"INSERT INTO {$table_prefeix}deleted_data (deleted_from, deleted_data, deleted_by) VALUES ('{$table}', '{$data}', '{$_SESSION['uid']}')\");\n\n}\n\n/**\n * @since 0.1\n * \n * @param string    $fileInputName  The file upload input name\n * @param string    $type           Optional. type of upload file. Defalut is image.\n * @param string    $location       Optional. Where the uploaded file has stored. Default is db and return an blob string\n * \n */\nfunction easyUpload( \n    array $file, \n    string $location=\"db\",\n    string $newFileName=\"\",\n    string $type=\"image\"\n    ) {\n\n    /**\n     * Check if there a file\n     */\n    if(!isset($file[\"size\"]) or $file[\"size\"] < 1 ) {\n        return \"There is no file found to be uploaded.\";\n    }\n\n    global $_SETTINGS;\n\n    $type = strtolower($type);\n    $extensionName = strtolower(explode(\"/\", $file[\"type\"])[1]);\n    \n    $maxUploadSize = $_SETTINGS[\"MAX_UPLOAD_SIZE\"] * 1024 * 1024;\n\n    if ($maxUploadSize < $file[\"size\"]) {\n        return \"The file is exceeded the max upload size ({$_SETTINGS[\"MAX_UPLOAD_SIZE\"]} MB)\";\n    }\n\n    $validExtensionForUpload = [];\n    switch($type) {\n        case \"image\":       $validExtensionForUpload = $_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"]; break;\n        case \"document\":    $validExtensionForUpload = $_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"]; break;\n        case \"video\":       $validExtensionForUpload = $_SETTINGS[\"VALID_VIDEO_TYPE_FOR_UPLOAD\"]; break;\n        case \"audio\":       $validExtensionForUpload = $_SETTINGS[\"VALID_AUDIO_TYPE_FOR_UPLOAD\"]; break;\n        case \"program\":     $validExtensionForUpload = $_SETTINGS[\"VALID_PROGRAM_TYPE_FOR_UPLOAD\"]; break;\n        case 'all':         $validExtensionForUpload = array_merge($_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"], $_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"]); break;\n    }\n    \n    if(!in_array($extensionName, $validExtensionForUpload)) {\n\n        $validExtensionNameList = join(\", \", $validExtensionForUpload);\n\n        return \"Invalid {$type} type. Only {$validExtensionNameList} {$type} type are allowed to upload\";\n    }\n\n    /**\n     * If location is set to db then return the image as blob string\n     * Otherwise save the image in the desired location\n     */\n    if($location == \"db\") {\n        \n        return array (\n            \"success\"       => true,\n            \"imageType\"     => $file[\"type\"],\n            \"blobString\"    => file_get_contents($file[\"tmp_name\"])\n        );\n\n    } else {\n        \n        $uploadDir = DIR_UPLOAD . $location;\n\n        if(!is_dir($uploadDir) && !mkdir($uploadDir, 0777, true)) {\n            return \"Error creating directory\";\n        }\n\n        // If newFileName is not empty then change the file name by given\n        $file_name = rand().$file[\"name\"];\n        if(!empty($newFileName)) {\n\n            $file_extension = explode(\".\", $file_name);\n            $file_extension = end($file_extension);\n            $file_name = $newFileName . \".\" . $file_extension;\n\n        }\n\n\n        if(move_uploaded_file($file[\"tmp_name\"], $uploadDir .\"/\" . $file_name )) {\n\n            return array (\n                \"success\"      => true,\n                \"fileName\"     => $file_name\n            );\n\n        } else {\n\n            return \"Can not upload the file\";\n\n        }\n\n        /*\n        //upload code here\n        $data=file_get_contents($_FILES[$fileInputName][\"tmp_name\"]);\n\n        //upload webp\n        imagewebp(imagecreatefromstring($data),$location.$uploadedFileName.\".webp\",75);\n\n        //upload orginal image\n\n        switch($type){\n\n            case \"jpeg\":  imagejpeg(imagecreatefromstring($data),$location.$uploadedFileName.\".jpeg\",75);\n                          imagejpeg(imagescale(imagecreatefromstring($data), 200, 200), $location.$uploadedFileName.\"_thumb.jpeg\",80);\n                          \n                          break;\n            case \"png\":   imagepng(imagecreatefromstring($data),$location.$uploadedFileName.\".png\",75);\n                          imagepng(imagescale(imagecreatefromstring($data), 200, 200), $location.$uploadedFileName.\"_thumb.png\",80);\n                          break;\n            default:      imagejpeg(imagecreatefromstring($data),$location.$uploadedFileName.\".jpg\",75);\n                          imagejpeg(imagescale(imagecreatefromstring($data), 200, 200), $location.$uploadedFileName.\"_thumb.jpg\",80);\n                          break;\n\n        }\n\n        //upload webp thumb\n        imagewebp(imagescale(imagecreatefromstring($data), 200, 200), $location.$uploadedFileName.\"_thumb.webp\",80);\n        \n\n        */\n\n    }\n\n}\nfunction easyUpload_back(\n    string $fileInputName, \n    string $type=\"image\",\n    string $location=\"db\"\n    ) {\n\n    // Get the image size\n    $fileSize = isset($_FILES) ? $_FILES[$fileInputName][\"size\"] : 0;\n\n    /**\n     * Check if the $_FILES variable is not set and image type is grater then zero byte\n     *  if ture then throw an error.\n     */\n    if(!isset($_FILES) or $fileSize <= 1) {\n        return \"There is no file found to be uploaded. Please check the file input name and enter it correctly.\";\n    }\n\n    global $_SETTINGS;\n    $type = strtolower($type);\n\n    $reference = explode(\".\", $_FILES[$fileInputName][\"name\"]);\n    $file_extension = end($reference);\n    $extensionName = strtolower(explode(\"/\", $_FILES[$fileInputName][\"type\"])[1]);\n    \n    $maxUploadSize = $_SETTINGS[\"MAX_UPLOAD_SIZE\"] * 1024 * 1024;\n\n    if ($maxUploadSize <  $_FILES[$fileInputName][\"size\"]) {\n        return \"The file is exceeded the max upload size\";\n    }\n\n    $validExtensionForUpload = [];\n    switch($type) {\n        case \"image\":       $validExtensionForUpload = $_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"]; break;\n        case \"document\":    $validExtensionForUpload = $_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"]; break;\n        case \"video\":       $validExtensionForUpload = $_SETTINGS[\"VALID_VIDEO_TYPE_FOR_UPLOAD\"]; break;\n        case \"audio\":       $validExtensionForUpload = $_SETTINGS[\"VALID_AUDIO_TYPE_FOR_UPLOAD\"]; break;\n        case \"program\":     $validExtensionForUpload = $_SETTINGS[\"VALID_PROGRAM_TYPE_FOR_UPLOAD\"]; break;\n    }\n    \n    if(!in_array($extensionName, $validExtensionForUpload)) {\n\n        $validExtensionNameList = \"\";\n        foreach($validExtensionForUpload as $validExtension) {\n            $validExtensionNameList .= $validExtension . \", \";\n        }\n        $validExtensionNameList = rtrim($validExtensionNameList, \", \");\n\n        return \"Invalid {$type} type. Only {$validExtensionNameList} {$type} type are allowed to upload\";\n    }\n\n    /**\n     * If location is set to db then return the image as blob string\n     * Otherwise save the image in the desired location\n     */\n    if($location == \"db\") {\n        return array (\n            \"success\"       => true,\n            \"imageType\"     => $_FILES[$fileInputName][\"type\"],\n            \"blobString\"    => file_get_contents($_FILES[$fileInputName][\"tmp_name\"])\n        );\n    }\n\n}\n\n/**\n * Return modal header\n * \n * @since 0.1\n * \n * @param string    $title  Title of the modal\n * @param string    $action form action of the form\n * @param string    $formId Optional form id. Default is modalForm\n * \n * @return string|html  return the title with modal header and form\n */\nfunction modal_header(\n    string $title, \n    string $action,\n    string $formId = \"modalForm\"\n    ) {\n    echo '\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <h4 class=\"modal-title\">'. __($title) .'</h4>\n        </div> <!-- modal-header -->\n\n        <form method=\"post\" role=\"form\" id=\"'. $formId .'\" action=\"'.$action.'\"  enctype=\"multipart/form-data\">\n\n            <div class=\"modal-body\">    \n    ';\n}\n\n/**\n * Return modal footer\n * \n * @since 0.1\n * \n * @param string    $title  Title of the modal\n * \n * @return string|html  return the title with modal header and form\n */\nfunction modal_footer(\n    string $saveButton = \"Save changes\"\n    ) {\n    \n    echo '\n            </div> <!-- modal-body -->\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\">Close</button>\n                <button id=\"jqAjaxButton\" type=\"submit\" class=\"btn btn-primary\">'. __($saveButton) .'</button>\n            </div> <!-- modal-footer -->\n        </form>\n    ';\n}\n\n\n/**\n * Show year option since $start year to current year.\n * \n * @since 0.1\n * \n * @param int    $start_year. From which year the option will appear.\n * @param int    $getSelectedYear Optional. Which year is will be selected\n * @param int    $increase_year   Optional. If we need increase year from current year.\n * \n * @return string   select option with year value\n */\nfunction option_year(\n    int $start_year, \n    int $getSelectedYear = NULL, \n    int $increase_year = NULL\n    ) {\n\t$now = date('Y') + $increase_year;\n\n\t for ($y=$now; $y>=$start_year; $y--) {\n\t\t $selectedYear = ($y == $getSelectedYear) ? \"selected\" : \"\";\n\t\techo '  <option '. $selectedYear .' value=\"' . $y . '\">' . __($y) . '</option>' . PHP_EOL;\n    }\n}\n\n\n\n/**\n * Function to spell money\n * \n */\nfunction spellNumbers($number)\n{\n    $number = abs((float)$number);\n    $decimal = round($number - ($no = floor($number)), 2) * 100;\n    $hundred = null;\n    $digits_length = strlen($no);\n    $i = 0;\n    $str = array();\n    $words = array(0 => '', 1 => 'one', 2 => 'two',\n        3 => 'three', 4 => 'four', 5 => 'five', 6 => 'six',\n        7 => 'seven', 8 => 'eight', 9 => 'nine',\n        10 => 'ten', 11 => 'eleven', 12 => 'twelve',\n        13 => 'thirteen', 14 => 'fourteen', 15 => 'fifteen',\n        16 => 'sixteen', 17 => 'seventeen', 18 => 'eighteen',\n        19 => 'nineteen', 20 => 'twenty', 30 => 'thirty',\n        40 => 'forty', 50 => 'fifty', 60 => 'sixty',\n        70 => 'seventy', 80 => 'eighty', 90 => 'ninety');\n    $digits = array('', 'hundred','thousand','lakh', 'crore');\n    while( $i < $digits_length ) {\n        $divider = ($i == 2) ? 10 : 100;\n        $number = floor($no % $divider);\n        $no = floor($no / $divider);\n        $i += $divider == 10 ? 1 : 2;\n        if ($number) {\n            $plural = (($counter = count($str)) && $number > 9) ? 's' : null;\n            $hundred = ($counter == 1 && $str[0]) ? ($decimal > 0) ? \"\" : \" and \" : null;\n            $str [] = ($number < 21) ? $words[$number].' '. $digits[$counter]. $plural.' '.$hundred:$words[floor($number / 10) * 10].' '.$words[$number % 10]. ' '.$digits[$counter].$plural.' '.$hundred;\n        } else $str[] = null;\n    }\n    $Takas = implode('', array_reverse($str));\n    $paysa = ($decimal > 0) ? \" and \" . ($words[floor($decimal/10) * 10] . \" \" . $words[$decimal % 10]) . ' Paysa' : '';\n    return ucfirst(($Takas ? $Takas . ' Taka' : '') . $paysa);\n}\n\n/**\n * -----------------------------------------------\n * Calculate Product having quantity\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $product. Which product do I need to calculate the quantity\n * \n * @return int   Number of having product\n */\nfunction calculateProductHavingQuantity(int $productId) {\n    global $table_prefeix;\n\n    return easySelect(\n        \"products\",\n        \"product_id, ( IF(purchase_item_quantity IS NULL, 0, SUM(purchase_item_quantity) + if(returns_products_quantity is null, 0, returns_products_quantity) ) - IF(sale_item_quantity IS NULL, 0, SUM(sale_item_quantity))) AS having_item_quantity\",\n        array (\n            \"left join (select purchase_item_product_id, sum(purchase_item_quantity) as purchase_item_quantity from {$table_prefeix}product_purchase_items where is_trash = 0 group by purchase_item_product_id) as {$table_prefeix}product_purchase_items on purchase_item_product_id = product_id\",\n            \"left join (select sale_item_product_id, sum(sale_item_quantity) as sale_item_quantity from {$table_prefeix}sale_items where is_trash = 0 group by sale_item_product_id) as {$table_prefeix}sale_items on sale_item_product_id = product_id\",\n            \"left join (select product_return_items_product_id, sum(product_return_items_products_quantity) as returns_products_quantity from {$table_prefeix}product_return_items where is_trash = 0 group by product_return_items_product_id) as returns_product on product_id = product_return_items_product_id\"\n        ),\n        array (\n            \"product_id \" =>  $productId\n        )\n    )['data'][0][\"having_item_quantity\"];\n}\n\n\n/**\n * -----------------------------------------------\n * Calculate Customer Balance, Due etc\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $customer_id. \n * \n * @return array    details with customer payment information.\n * \n * This function no longer required and will be deleted in near version\n */\nfunction getCustomerPaymentInfo_back(int $customer_id) {\n    global $table_prefeix;\n\n    easySelectD(\n        \"select customer_id, if(customer_opening_balance is null, 0, customer_opening_balance) as customer_opening_balance,\n            if(sales_grand_total is null, 0, sales_grand_total) as sales_grand_total, \n            if(returns_grand_total is null, 0, returns_grand_total) as returns_grand_total,\n            if(received_payments_amount is null, 0, received_payments_amount) as total_received_payments,\n            if(received_payments_bonus is null, 0, received_payments_bonus) as total_given_bonus\n        from {$table_prefeix}customers\n        left join (\n            select\n                sales_customer_id,\n                sum(sales_grand_total) as sales_grand_total\n            from {$table_prefeix}sales where is_trash = 0 group by sales_customer_id\n        ) as sales on customer_id = sales_customer_id\n        left join ( \n            select \n                product_returns_customer_id, \n                sum(product_returns_grand_total) as returns_grand_total \n            from {$table_prefeix}product_returns where is_trash = 0 group by product_returns_customer_id\n        ) as product_returns on customer_id = product_returns_customer_id\n        left join ( \n            select \n                received_payments_from, \n                sum(received_payments_amount) as received_payments_amount, \n                sum(received_payments_bonus) as received_payments_bonus \n            from {$table_prefeix}received_payments where is_trash = 0 group by received_payments_from\n        ) as {$table_prefeix}received_payments on customer_id = received_payments_from\n        where customer_id = {$customer_id}\"\n    );\n\n}\n\n\n/**\n * -----------------------------------------------\n * Update customer info\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $customer_id. \n * \n * @return bool True/False\n * \n * This function no longer required and will be delete and near version\n */\nfunction updateCustomerPaymentInfo_back(int $customer_id) {\n\n    $gcpi = getCustomerPaymentInfo_back($customer_id); // $gcpi = get customer payment info\n\n    $customer_total_paid = ( $gcpi[\"customer_opening_balance\"] ) + $gcpi[\"returns_grand_total\"] + $gcpi[\"total_received_payments\"] + $gcpi[\"total_given_bonus\"];\n\n    $customer_due = $gcpi[\"sales_grand_total\"] - $customer_total_paid;\n\n    $customer_balance = 0;\n\n    // Calculate customer balance\n    if ($customer_due < 0) {\n        $customer_due = 0;\n        $customer_balance = $customer_total_paid - $gcpi[\"sales_grand_total\"];\n    }\n    \n\n    $updateCustomerPaymentInfo = easyUpdate(\n        \"customers\",\n        array (\n            \"customer_balance\"  => $customer_balance,\n            \"customer_due\"      => $customer_due\n        ),\n        array (\n            \"customer_id\"   => $customer_id\n        )\n    );\n    \n    return $updateCustomerPaymentInfo;\n\n}\n\n/**\n * -----------------------------------------------\n * Update Accounts Payment Info\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $accounts_id. Which accounts balance we need to update\n * \n * @return bool True/False\n */\nfunction updateAccountBalance(int $accounts_id) {\n    global $table_prefeix;\n\n    // This safe_input function does not required in this case\n    //$accounts_id = safe_input($accounts_id);\n\n    // gad = getAccountsData\n    $gad = easySelectD(\"\n        select accounts_id, accounts_opening_balance, \n            if(loan_amount_sum is null, 0, loan_amount_sum) as loan_amount_sum,\n            if(capital_amounts_sum is null, 0, capital_amounts_sum) as capital_amounts_sum,\n            if(incomes_amount_sum is null, 0, incomes_amount_sum) as incomes_amount_sum,\n            if(payment_amount_sum is null, 0, payment_amount_sum) as payment_amount_sum,\n            if(transfer_send_amount_sum is null, 0, transfer_send_amount_sum) as transfer_send_amount_sum,\n            if(transfer_received_amount_sum is null, 0, transfer_received_amount_sum) as transfer_received_amount_sum,\n            if(received_payments_amount_sum is null, 0, received_payments_amount_sum) as received_payments_amount_sum,\n            if(advance_payment_amount_sum is null, 0, advance_payment_amount_sum) as advance_payment_amount_sum,\n            if(payment_incoming_return_amount_sum is null, 0, payment_incoming_return_amount_sum) as payment_incoming_return_amount_sum,\n            if(payment_outgoing_return_amount_sum is null, 0, payment_outgoing_return_amount_sum) as payment_outgoing_return_amount_sum,\n            if(journal_incoming_payment is null, 0, journal_incoming_payment) as journal_incoming_payment_sum,\n            if(journal_outgoing_payment is null, 0, journal_outgoing_payment) as journal_outgoing_payment_sum\n        from {$table_prefeix}accounts\n        left join ( \n            select \n                loan_paying_from, \n                sum(loan_amount) as loan_amount_sum \n            from {$table_prefeix}loan \n            where is_trash = 0 \n            group by loan_paying_from\n        ) as {$table_prefeix}loan on loan_paying_from = accounts_id\n        left join ( \n            select \n                capital_accounts, \n                sum(capital_amounts) as capital_amounts_sum \n            from {$table_prefeix}capital \n            where is_trash = 0 \n            group by capital_accounts \n        ) as capital on capital_accounts = accounts_id\n        left join ( \n            select \n                incomes_accounts_id, \n                sum(incomes_amount) as incomes_amount_sum \n            from {$table_prefeix}incomes \n            where is_trash = 0 \n            group by incomes_accounts_id \n        ) as incomes on incomes_accounts_id = accounts_id\n        left join ( \n            select \n                payment_from, \n                sum(payment_amount) as payment_amount_sum \n            from {$table_prefeix}payments \n            where is_trash = 0 and payment_status != 'Cancel' and ( payment_type != 'Advance Adjustment' or payment_type is null ) \n            group by payment_from \n        ) as payments on payment_from = accounts_id\n        left join ( \n            select \n                transfer_money_from, \n                sum(transfer_money_amount) as transfer_send_amount_sum \n            from {$table_prefeix}transfer_money \n            where is_trash = 0 \n            group by transfer_money_from \n        ) as transfer_money_send on transfer_money_from = accounts_id\n        left join ( \n            select \n                transfer_money_to, \n                sum(transfer_money_amount) as transfer_received_amount_sum \n            from {$table_prefeix}transfer_money \n            where is_trash = 0 \n            group by transfer_money_to \n        ) as transfer_money_received on transfer_money_to = accounts_id\n        left join ( \n            select \n                received_payments_accounts, \n                sum(received_payments_amount) as received_payments_amount_sum\n            from {$table_prefeix}received_payments \n            where is_trash = 0 and received_payments_type != 'Discounts' \n            group by received_payments_accounts\n        ) as {$table_prefeix}received_payments on received_payments_accounts = accounts_id\n        left join ( \n            select \n                sum(advance_payment_amount) as advance_payment_amount_sum, \n                advance_payment_pay_from \n            from {$table_prefeix}advance_payments \n            where is_trash = 0 \n            group by advance_payment_pay_from \n        ) as get_advance_payments on advance_payment_pay_from = accounts_id\n        left join ( \n            select \n                payments_return_accounts, \n                sum( case when payments_return_type = 'Incoming' then payments_return_amount end ) as payment_incoming_return_amount_sum,\n                sum( case when payments_return_type = 'Outgoing' then payments_return_amount end ) as payment_outgoing_return_amount_sum\n            from {$table_prefeix}payments_return \n            where is_trash = 0 \n            group by payments_return_accounts \n        ) as get_return_payments on payments_return_accounts = accounts_id  \n        left join ( \n            select \n                journal_records_accounts, \n                sum( case when journal_records_payments_type = 'Incoming' then journal_records_payment_amount end) as journal_incoming_payment,\n                sum( case when journal_records_payments_type = 'Outgoing' then journal_records_payment_amount end) as journal_outgoing_payment \n            from {$table_prefeix}journal_records \n            where is_trash = 0  \n            group by journal_records_accounts \n        ) as journal_incoming_records on journal_incoming_records.journal_records_accounts = accounts_id\n        where accounts_id = {$accounts_id}\"\n    )[\"data\"][0];\n\n\n    $accounts_balance = ( \n                            $gad[\"accounts_opening_balance\"] + $gad[\"capital_amounts_sum\"] + $gad[\"incomes_amount_sum\"] + $gad[\"transfer_received_amount_sum\"] + $gad[\"received_payments_amount_sum\"] + $gad[\"payment_incoming_return_amount_sum\"] + $gad[\"journal_incoming_payment_sum\"]\n                        ) - ( \n                            $gad[\"loan_amount_sum\"] + $gad[\"payment_amount_sum\"] + $gad[\"transfer_send_amount_sum\"] + $gad[\"advance_payment_amount_sum\"] + $gad[\"journal_outgoing_payment_sum\"] + $gad[\"payment_outgoing_return_amount_sum\"]\n                        ); \n\n    // Update Accounts Balance\n    easyUpdate(\n        \"accounts\",\n        array (\n            \"accounts_balance\"  => $accounts_balance\n        ),\n        array (\n            \"accounts_id\"  => $accounts_id\n        )\n    );\n\n}\n\n\n/**\n * -----------------------------------------------\n * Get Employee Payable Amount\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $emp_id. The employee ID\n * @param string  $salary_type. \n * \n * @return string   Employee Payable Amount\n */\nfunction getEmployeePayableAmount(int $emp_id, string $salary_type) {\n    global $table_prefeix;\n\n    $emp_opening_balance_name = \"emp_opening_\". strtolower($salary_type);\n\n    $empPayableAmount = easySelectD(\"\n        select \n            emp_id,\n            ( ( if(salary_amount_sum is null, 0, salary_amount_sum) - if(payment_items_amount_sum is null, 0, payment_items_amount_sum) ) + ({$emp_opening_balance_name}) ) as emp_payable_amount\n        from {$table_prefeix}employees\n        left join ( select salary_emp_id, salary_type, sum(salary_amount) as salary_amount_sum from {$table_prefeix}salaries where is_trash = 0 and salary_type='{$salary_type}' group by salary_emp_id ) as {$table_prefeix}salaries on salary_emp_id = emp_id\n        left join ( select payment_items_employee, sum(payment_items_amount) as payment_items_amount_sum from {$table_prefeix}payment_items where is_trash = 0 and payment_items_type='{$salary_type}' group by payment_items_employee ) as get_payments_items on payment_items_employee = emp_id\n        where emp_id = {$emp_id}\n    \")[\"data\"][0][\"emp_payable_amount\"];\n\n    // if salary type is salary then add the installment amount with payable amount\n    if($salary_type === \"salary\") {\n\n        $paidLoan = easySelectD(\"\n            select sum(loan_installment_paying_amount) as loan_paid_amount from {$table_prefeix}loan_installment where is_trash = 0 and loan_installment_provider = '{$emp_id}' group by loan_installment_provider\n        \");\n\n        $empPayableAmount -= $paidLoan ? $paidLoan[\"data\"][0][\"loan_paid_amount\"] : 0;\n    }\n\n    return $empPayableAmount;\n\n}\n\n\n/**\n * -----------------------------------------------\n * Get Accounts Balance\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $accounts_id. \n * \n * @return string Accounts Balance \n */\nfunction accounts_balance(int $accounts_id) {\n\n    return easySelect(\n        \"accounts\",\n        \"accounts_balance\",\n        array(),\n        array (\n            \"accounts_id\"   => $accounts_id\n        )\n    )[\"data\"][0][\"accounts_balance\"];\n}\n\n/**\n * Insert Login information into database\n * \n * @since 0.1\n * \n * @param int @user_id The user id which we need to add login infomration\n * \n */\n\n function add_login_info(int $user_id) {\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n    $user_ip = safe_input(get_ipaddr());\n    $user_aggent = safe_input($_SERVER['HTTP_USER_AGENT']);\n    \n    // Insert User information Into Database\n    $conn->query(\"INSERT INTO {$table_prefeix}users_login_history (login_users_id, login_ip, login_user_aggent) \n                        VALUES ('{$user_id}', '{$user_ip}', '{$user_aggent}')\");\n    \n}\n\nfunction get_ipaddr() {\n    return $_SERVER['REMOTE_ADDR'];\n}\n\n\nfunction get_ip_address(){\n    \n    foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key){\n        if (array_key_exists($key, $_SERVER) === true){\n            foreach (explode(',', $_SERVER[$key]) as $ip){\n                $ip = trim($ip); // just to be safe\n\n                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false){\n                    return $ip;\n                }\n            }\n        }\n    }\n}\n\n/**\n * Get Option value\n * \n * @since 0.1\n * \n * @param string $optionName The option name which we need to parse/\n * \n * @return string The option value\n * \n */\n\nfunction get_options(string $optionName) {\n    \n    defined('ALL_OPTIONS') ?: define(\"ALL_OPTIONS\", array_column(easySelect(\"options\")[\"data\"], 'option_value', 'option_name'));\n    \n    // If found, return the result\n    if( is_array(ALL_OPTIONS) and array_key_exists($optionName, ALL_OPTIONS) ) {\n        \n        return ALL_OPTIONS[$optionName];\n    \n    // Else return error msg\n    } else {\n\n        return false;\n\n    }\n}\n\n/**\n * Set Option value\n * \n * @since 0.1\n * \n * @param string $optionName The option name which we need to set\n * @param string $optionValue The Option Value\n * \n * @return string The option value\n * \n */\nfunction set_options(string $optionName, string $optionValue) {\n\n    $getOption = easySelect(\n        \"options\",\n        \"*\",\n        array(),\n        array (\n            \"option_name\"  => $optionName\n        )\n    );\n    \n    if($getOption !== false) {\n        \n        // Update option\n        easyUpdate(\n            \"options\",\n            array (\n                \"option_value\"  => $optionValue\n            ),\n            array (\n                \"option_name\" => $optionName\n            )\n        );\n\n    } else {\n\n        //Insert option\n        easyInsert(\n            \"options\",\n            array (\n                \"option_name\" => $optionName,\n                \"option_value\"  => $optionValue\n            )\n        );\n\n    }\n    \n}\n\n/**\n * Send HTTP requirest\n * \n * @since 0.1\n * \n * @param string $url           The URL where we need to send the request\n * @param string/array  $data   The information which we need to send. \n * \n * @return string   The output of the url\n */\nfunction send_http_request(string $url, $data) {\n\n    $rc = curl_init();\n\n    $curlPostData = array (\n        \"postData\"  => $data\n    );\n\n    $header = array (\n        \"signature: dskfmx09@435uk*435&*dkfnl@4$343$75dflgldk45dfs*df34918skj%34&4$384hsdf34094%4598df$^lk,m()dkfn3483lkfsd324-lkj5+45lk=dfsdlk\"\n    );\n\n    curl_setopt($rc, CURLOPT_URL, $url);\n    curl_setopt($rc, CURLOPT_POST, true);\n    curl_setopt($rc, CURLOPT_POSTFIELDS, $curlPostData);\n    curl_setopt($rc, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($rc, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($rc, CURLOPT_CONNECTTIMEOUT, 5);\n\n    $output = curl_exec($rc);\n    curl_close($rc);\n\n    return $output;\n}\n\n\n/**\n * Format number to money\n * \n */\nfunction to_money(\n    float $number, \n    int $decimalPlaces = NULL,\n    string $decimalSeparator = \"\",\n\tstring $thousandSeparator = \"\",\n\tstring $currencySymbol = \"\",\n\tstring $currencySymbolPosition = \"\"\n    ) {\n      \n        $decimalPlaces = empty($decimalPlaces) ? get_options(\"decimalPlaces\") : $decimalPlaces;\n        $decimalSeparator = empty($decimalSeparator) ? get_options(\"decimalSeparator\") : $decimalSeparator;\n        $thousandSeparator = empty($thousandSeparator) ? get_options(\"thousandSeparator\") : $thousandSeparator;\n        $currencySymbol = empty($currencySymbol) ? get_options(\"currencySymbol\") : $currencySymbol;\n        $currencySymbolPosition = empty($currencySymbolPosition) ? get_options(\"currencySymbolPosition\") : $currencySymbolPosition;\n\n        $formatedNumber = number_format($number, $decimalPlaces, $decimalSeparator, $thousandSeparator);\n\n        if( strtolower($currencySymbolPosition) === \"right\" ) {\n            $formatedNumber = $formatedNumber . \" \" .  $currencySymbol;\n        } else {\n            $formatedNumber = $currencySymbol . \" \" . $formatedNumber;\n        }\n\n        return $formatedNumber;\n}\n\n\n/**\n * negative_value_is_allowed function\n * \n * @since 2.0.1\n * \n * @param int $accounts_id  The accounts id to check\n * @return bool if allow then return true otherwise false\n */\n\n function negative_value_is_allowed(int $accounts_id) {\n     $getData = easySelectA(array(\n         \"table\"    => \"accounts\",\n         \"fields\"   => \"negative_value_is_allow\",\n         \"where\"    => array(\n             \"accounts_id\"  => $accounts_id\n         )\n     ));\n\n     if(isset($getData[\"data\"][0][\"negative_value_is_allow\"]) and $getData[\"data\"][0][\"negative_value_is_allow\"] == 1) {\n         return true;\n     } else {\n         return false;\n     }\n }\n\n /**\n  * Function to minify html and js\n  */\n function sanitize_output($buffer) {\n\n    $search = array(\n        '/ \\/\\/.*\\n/',\n        '/\\>[^\\S ]+/s',     // strip whitespaces after tags, except space\n        '/[^\\S ]+\\</s',     // strip whitespaces before tags, except space\n        '/(\\s)+/s',         // shorten multiple whitespace sequences\n        '/<!--(.|\\s)*?-->/', // Remove HTML comments\n        '/\\/\\*(.|\\s)*?\\*\\//'\n    );\n    \n    $replace = array(\n        '',\n        '>',\n        '<',\n        '\\\\1',\n        '',\n        ''\n    );\n  \n    $buffer = preg_replace($search, $replace, $buffer);\n  \n    return $buffer;\n }\n\n\n /**\n  * Function to generate title\n  */\n  \nfunction get_title() {\n    \n    // Get the page titles\n    global $_SETTINGS;\n    \n    $currentUrl = transfer_protocol().explode(\"?\", $_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'])[0];\n\n    if( isset($_SETTINGS[\"PAGE_TITLE\"][$currentUrl]) ) {\n        return $_SETTINGS[\"PAGE_TITLE\"][$currentUrl];\n    } else {\n        return \"Not Found!\";\n    }\n\n}\n  \n  \n  /**\n   * Create getallheaders function if it is not exits\n   */\n  if (!function_exists('getallheaders')) {\n\n        function getallheaders() {\n            $headers = [];\n            foreach ($_SERVER as $name => $value) {\n                if (substr($name, 0, 5) == 'HTTP_') {\n                    $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;\n                }\n            }\n            return $headers;\n        }\n\n    }\n\n\n    /**\n     * Send SMS \n     * \n     * @since 2.0.1\n     * \n     * @param int    $number     The mobile where the sms will be sent\n     * @param string $msg        The message to be sent\n     * \n     * @return bool               Return true if sms sent successfull, otherwise false \n     */\n    function send_sms($number, $msg) {\n\n        global $table_prefeix;\n\n\t    $url = \"http://example.com/api.php\";\n        $data= array(\n            'username'=>\"username\",\n            'password'=>\"password\",\n            'number'=>$number,\n            'message'=>$msg\n        );\n\n        $ch = curl_init(); // Initialize cURL\n        curl_setopt($ch, CURLOPT_URL,$url);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $smsresult = curl_exec($ch);\n        $p = explode(\"|\",$smsresult);\n        $sendstatus = $p[0];\n\n        if( $sendstatus == 1101) {\n\n            $insertSmsLog = \"INSERT INTO {$table_prefeix}sms_sender(\n                send_to,\n                send_time,\n                sms_text,\n                status,\n                send_by\n            ) VALUES \";\n\n            // explode comma seperated value\n            $numbers = explode(\",\", $number);\n\n            foreach($numbers as $num) {\n\n                $insertSmsLog .= \"\n                (\n                    '\". safe_input($num) .\"',\n                    '\". date(\"Y-m-d H:i:s\") .\"',\n                    '\". safe_input($msg) .\"',\n                    'sent',\n                    '\". safe_input($_SESSION[\"uid\"]) .\"'\n                ),\";\n  \n            }\n            \n            // Run the built query\n            runQuery(substr_replace($insertSmsLog, \";\", -1, 1));\n\n            return true; \n\n        } else {\n            return false;\n        }\n\n    }\n\n\n    /**\n     * Get the Product type\n     * \n     * @since 2.0.2\n     * \n     * @param int   $product_id     The product id to check the type\n     * \n     * @return bool,string          Return the multiple product type and if grouped product then return with the product id list\n     */\n\n    function product_type($pid) {\n\n        $return = array(\n            \"is_variable\"   => false,\n            \"is_grouped\"    => false,\n            \"is_bundle\"     => false,\n            \"is_normal\"     => false,\n            \"product_ids\"   => \"\"\n        );\n\n        $selectProduct = easySelectA(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_type\",\n            \"where\" => array(\n                \"product_id\"    => $pid\n            )\n        ));\n\n        if($selectProduct and $selectProduct[\"data\"][0][\"product_type\"] === \"Grouped\") {\n\n            $return[\"is_grouped\"] = true;\n\n            // select the grouped product list\n            $return[\"product_ids\"] = easySelectA(array(\n                \"table\"     => \"bg_product_items\",\n                \"fields\"    => \"group_concat(bg_item_product_id) as product_list\",\n                \"where\"     => array(\n                    \"bg_product_id\" => $pid\n                )\n            ))[\"data\"][0][\"product_list\"];\n\n        } elseif($selectProduct and $selectProduct[\"data\"][0][\"product_type\"] === \"Bundle\") {\n\n            $return[\"is_bundle\"] = true;\n\n            // select the grouped product list\n            $return[\"product_ids\"] = easySelectA(array(\n                \"table\"     => \"bg_product_items\",\n                \"fields\"    => \"group_concat(bg_item_product_id) as product_list\",\n                \"where\"     => array(\n                    \"bg_product_id\" => $pid\n                )\n            ))[\"data\"][0][\"product_list\"];\n\n        } elseif($selectProduct and $selectProduct[\"data\"][0][\"product_type\"] === \"Variable\") {\n            \n            $return[\"is_variable\"] = true;\n\n        } else {\n\n            $return[\"is_normal\"] = true;\n\n        }\n\n       \n        return $return;\n\n\n    }\n\n    /**\n     * Check if the current user is biller or not\n     */\n    function is_biller() {\n\n        if ( isset($_SESSION['sid']) and isset($_SESSION['aid']) and isset($_SESSION['wid']) ) {\n            return true;\n        } else {\n            return false; \n        }\n\n    }\n\n    /**\n     * Payment reference Generator\n     * @since 2.1.1\n     * \n     * @param string $type the reference type to generate\n     * \n     * @return string the full reference\n     */\n    function payment_reference(string $type) {\n\n        // Default Referense Format\n        $referenceFormat = \"SALARY_PAY\";\n        if($type === \"bill\") {\n            $referenceFormat = \"BILL_PAY\";\n        }\n\n        $paymentReferences = \"{$referenceFormat}/{$_SESSION['uid']}/\";\n\n        // Select last payment references\n        $selectPaymentReference = easySelect(\n            \"payments\",\n            \"payment_reference\",\n            array(),\n            array (\n                \"payment_made_by\"   => $_SESSION['uid'],\n                \" AND payment_reference LIKE '{$referenceFormat}%'\",\n                \" AND payment_reference is not null\"\n            ),\n            array (\n                \"payment_id\" => \"DESC\"\n            ),\n            array (\n                \"start\" => 0,\n                \"length\" => 1\n            )\n        );\n\n        // check if there is minimum one records\n        if($selectPaymentReference) {\n            $getLastReferenceNo = (int)explode($paymentReferences, $selectPaymentReference[\"data\"][0][\"payment_reference\"])[1];\n            return $paymentReferences . ($getLastReferenceNo+1);\n\n        } else {\n            return \"{$paymentReferences}1\";\n        }\n\n    }\n\n\n    /**\n     * Translator function\n     * \n     * @since 2.1.1\n     * \n     * Example code: echo __('You have %1$d unread message and you were last visit %2$s days ago', 120, 5);\n     * \n     * Will be written latter \n     */\n    function __() {\n    \n        // Get arguments\n        $argc = func_get_args();\n        $total_arg = func_num_args();\n\n        // Get the string to be translated and convert to lower case\n        // $formated_text = strtolower($argc[0]); // Will Test it later\n        $formated_text = $argc[0];\n    \n        static $lang_pack = array(\n            \"global\"    => array(),\n            \"index\"     => array()\n        );\n\n        // Get the Language pack name\n        if(empty($lang_pack[\"index\"]) and isset($_COOKIE[\"lang\"])) {\n            \n            $langName = $_COOKIE[\"lang\"];\n\n            $langFile = DIR_LANG . $langName . \".php\";\n\n            // Check if the language file exists\n            if( file_exists($langFile) ) {\n                \n                require $langFile;\n\n                // Get the language array, change all keys to lower case and aissign to $lang_pack variable\n                // $lang_pack = isset($$langName[\"trdata\"]) ? array_change_key_case($$langName[\"trdata\"]) : array(); // Will test it later\n                $lang_pack[\"index\"] = isset($$langName[\"trDataIndex\"]) ? $$langName[\"trDataIndex\"] : array();\n                $lang_pack[\"global\"] = isset($$langName[\"trDataGlobal\"]) ? $$langName[\"trDataGlobal\"] : array();\n                \n            }\n\n        }\n        \n\n        $translations = \"\"; // All translation will store here\n        \n        if($total_arg  === 1 and !isset($lang_pack[\"index\"][$formated_text]) ) {\n    \n            $translations = $formated_text;\n    \n        } else if( $total_arg === 1 and isset($lang_pack[\"index\"][$formated_text]) ) {\n    \n            $translations = $lang_pack[\"index\"][$formated_text];\n    \n        } else if ( !isset($lang_pack[\"index\"][$formated_text]) ) {\n    \n            $translations = vsprintf($formated_text, array_splice($argc, 1));\n    \n        } else {\n    \n            // Text translation\n            $translations = vsprintf($lang_pack[\"index\"][$formated_text], array_splice($argc, 1));\n    \n        }\n\n        // English Numbers, Months, Weeks Translation to other language\n        $translations = empty($translations) ? $translations : strtr($translations, $lang_pack[\"global\"]);\n\n        // Return the translation\n        return $translations;\n        \n    }\n\n    /**\n     * Return error message with translation\n     */\n    function _e(...$args){\n\n        echo \"<div class='alert alert-danger'>\" . __(...$args) . \"</div>\";\n    }\n\n    /**\n     * Return success msg with translation\n     */\n    function _s(...$args){\n        echo \"<div class='alert alert-success'>\" . __(...$args) . \"</div>\";\n    }\n\n    //\n    function create_log(string $msg, array $debug_backtrace = array(), string $logFile = \"error.log\") {\n\n        // Get the debug backtrace\n        if(count($debug_backtrace) > 0) {\n            \n            $debug_backtrace = $debug_backtrace[0];\n\n        } else {\n            $debug_backtrace = debug_backtrace()[0];\n        }\n\n        // If error msg not empty\n        if(!empty($msg)) {\n\n            $fp = fopen(DIR_BASE . $logFile, \"a\");\n            fwrite($fp, date(\"Y-m-d H:i:s\") . \" {$msg}. {$debug_backtrace['file']}, Line {$debug_backtrace['line']} \\n\");\n            fclose($fp);\n        }\n\n    }\n\n\n    /**\n     * \n     * Product filters\n     */\n    function load_product_filters($id=\"\") {\n\n\n        static $filters = array();\n        $filters[\"category\"] = '<select id=\"productCategoryFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productCategoryList\">\n                                    <option value=\"\">'. __(\"All Category\") . '</option>';\n\n                                    if(!empty(get_options(\"defaultProductCategory\"))) {\n\n                                        $categories = easySelectA(array(\n                                            \"table\"     => \"product_category\",\n                                            \"where\"     => array(\n                                                \"category_id\"  => get_options(\"defaultProductCategory\")\n                                            )\n                                        ))[\"data\"][0];\n\n                                        $filters[\"category\"] .= '<option selected value=\"'. $categories[\"category_id\"] .'\">'. $categories[\"category_name\"] . '</option>';\n\n                                    }\n                                    \n        $filters[\"category\"] .= '</select>';\n        \n        $filters[\"brand\"]    = '<select id=\"productBrandFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productBrandList\">\n                                    <option value=\"\">'. __(\"All Brand\") .'</option>';\n        $filters[\"brand\"]   .= empty(get_options(\"defaultProductBrand\")) ?: \"<option selected value=\". get_options(\"defaultProductBrand\") .\">\". get_options(\"defaultProductBrand\") .\"</option>\";\n        $filters[\"brand\"]   .=  '</select>';\n\n        $filters[\"generic\"]  = '<select id=\"productGenericFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productGenericList\">\n                                    <option value=\"\">'. __(\"All Generic\") .'</option>';\n        $filters[\"generic\"]   .= empty(get_options(\"defaultProductGeneric\")) ?: \"<option selected value=\". get_options(\"defaultProductGeneric\") .\">\". get_options(\"defaultProductGeneric\") .\"</option>\";\n        $filters[\"generic\"]  .= '</select>';\n        \n        $filters[\"edition\"]  = '<select style=\"width:100%;\" id=\"productEditionFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productEditionList\">\n                                    <option value=\"\">'. __(\"All Editions...\") .'</option>';\n        $filters[\"edition\"]   .= empty(get_options(\"defaultProductEdition\")) ?: \"<option selected value=\". get_options(\"defaultProductEdition\") .\">\". get_options(\"defaultProductEdition\") .\"</option>\";\n        $filters[\"edition\"] .= '</select>';\n\n        $filters[\"author\"]  = '<select id=\"productAuthorFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=authorList\">\n                                <option value=\"\">'. __(\"All Author\") .'</option>\n                            </select>';\n        \n        \n        // Get product filter options\n        $getFilter = unserialize(get_options(\"defaultProductFilter\"));\n\n        // Calculate total column\n        $col = round(12 / count($getFilter));\n\n        foreach($getFilter as $fKey => $fValue) {\n\n            echo '<div class=\"col-md-'. $col .'\">\n                    <div class=\"form-group\">'.\n                        $filters[$fValue]\n                    .'</div>\n                </div>';\n\n        }\n\n\n    }\n\n    function set_local_storage($name, $value) {\n\n        echo \"<script>\n                localStorage.setItem('{$name}', '{$value}');\n            </script>\";\n\n    }\n\n\n/**\n * Generate nearest unit quantity \n * \n * @since 1.00\n * \n * @param number|init $product_id the product which to check\n * @param null|bool|int|float|string $qty The quantity\n * @param string      $unit The unit name\n * \n */\nfunction near_unit_qty($product_id, $qty, $unit) {\n\n    global $table_prefeix;\n\n    $getData = easySelectA(array(\n        \"table\"     => \"products as whereProduct\",\n        \"fields\"    => \"joinProduct.product_unit as product_unit, equal_unit_qnt, base_qnt\",\n        \"join\"      => array(\n            \"left join {$table_prefeix}products as joinProduct on joinProduct.product_name = whereProduct.product_name\",\n            \"left join {$table_prefeix}product_units on unit_name = joinProduct.product_unit\"\n        ),\n        \"where\"     => array(\n            \"joinProduct.is_trash = 0 and joinProduct.product_unit is not null and whereProduct.product_id\" => $product_id\n        ),\n        \"orderby\"   => array(\n            \"base_qnt\"  => \"DESC\"\n        )\n    ));\n    \n\n    if($getData !== false) {\n\n        $totalBaseQty = $qty;\n        $remainQty = 0;\n        $finalUnitName = \"\";\n        $finalQtyBasedOnUnit = 0;\n        \n        // Generate the base qty based on unit\n        foreach($getData[\"data\"] as $pKey => $pVal ) {\n        \n            if( $pVal[\"product_unit\"] === $unit) {\n        \n                $totalBaseQty *= $pVal[\"base_qnt\"];\n                break;\n        \n            }\n        \n        }\n        \n        // Now get the unit which base_qnt is grater then or equal to unitDevider\n        foreach($getData[\"data\"] as $pKey => $pVal ) {\n        \n            if( $pVal[\"base_qnt\"] <= $totalBaseQty) {\n        \n                $finalUnitName = $pVal[\"product_unit\"];\n                $remainQty = ($totalBaseQty % $pVal[\"base_qnt\"]);\n                $finalQtyBasedOnUnit = ($totalBaseQty - $remainQty) / $pVal[\"base_qnt\"];\n                break;\n        \n            }\n        \n        }\n\n\n        return $finalQtyBasedOnUnit . \" \" . $finalUnitName . ( $remainQty > 0 ? \", \" . near_unit_qty($product_id, $remainQty, $unit) : \"\");\n\n    } else {\n\n        return $qty . \" \" . $unit;\n\n    }\n\n\n}\n\n\n/**\n * Add module menu after specific index\n * \n * @since 1.0.0\n * \n * @param array $menu_array the menu array to be included\n * @param number|init $position The position, where after the module menu will be included\n */\nfunction add_menu(array $menu_array=array(), $position=\"\") {\n\n    global $default_menu;\n\n\n    // If the position is set then add the menu in speicifc position\n    if($position !== \"\") {\n\n        // Split the default menu in specific position with keeping the key/index name\n\n        // Get the first key\n        $first_key = array_key_first($menu_array);\n\n        // If the first key is set in the menu\n        if( isset($default_menu[$first_key]) ) {\n\n            $position = $position+4;\n            $beforePostion = array_slice($default_menu[$first_key], 0, $position, true);\n            $afterPostion = array_slice($default_menu[$first_key], $position, count($default_menu[$first_key]) - $position, true);\n\n            // Merge all menus into one\n            $default_menu[$first_key] = array_merge($beforePostion, $menu_array[$first_key], $afterPostion);\n\n        } else {\n\n            $beforePostion = array_slice($default_menu, 0, $position, true);\n            $afterPostion = array_slice($default_menu, $position, count($default_menu) - $position, true);\n\n            // Merge all menus into one\n            $default_menu = array_merge($beforePostion, $menu_array, $afterPostion);\n\n        }\n        \n\n        //print_r($default_menu);\n        \n\n    } else {\n\n        // Otherwise add the in last\n        $default_menu = array_merge($default_menu, $menu_array);\n\n    }\n    \n}\n\n/**\n * Add permission\n */\nfunction add_permission(array $permission) {\n\n    global $defaultPermission; \n    $defaultPermission = array_merge($defaultPermission, $permission);\n\n}\n\n/**\n * Get the first comment from a file\n * \n * @since 1.0.0\n * \n * @param string $file The file name with location\n * \n * @return string The comments\n */\nfunction getFirstComment($file) {\n    \n    $get_comments = array_filter(\n        token_get_all( file_get_contents($file)), function($comment) {\n            return $comment[0] == T_COMMENT || $comment[0] == T_DOC_COMMENT;\n        }\n    );\n\n    return array_shift($get_comments)[1];\n}\n\n\n/**\n * Find module's Name, URI, Version, Description, Author, Author URI, License etc\n * \n * @since 1.0.0\n * \n * @param string $find The string to find\n * @param string $comment The comment to find in\n * \n * @return string Return the value\n */\nfunction find_modules($find, $comment) {\n\n    $moduleInfo = preg_split(\"/\".$find.\":/i\", $comment);\n\n    if( isset($moduleInfo[1]) ) {\n        \n        return trim(explode(\"\\n\", $moduleInfo[1])[0]);\n\n    } else {\n        return \"\";\n    }\n\n}\n\n\n/**\n * Create array_key_first function if it is not exits\n */\nif (!function_exists('array_key_first')) {\n\n    function array_key_first(array $array) {\n        \n        foreach($array as $firstKey => $firstValue) {\n            return $firstKey;\n            break;\n        }\n        \n    }\n\n}\n\n/**\n * Converting times to times ago\n * Taken from: https://stackoverflow.com/a/18602474\n * \n * and Modified\n */\nfunction time_elapsed_string($datetime, $level = 1) {\n    $now = new DateTime;\n    $ago = new DateTime($datetime);\n    $diff = $now->diff($ago);\n\n    $diff->w = floor($diff->d / 7);\n    $diff->d -= $diff->w * 7;\n\n    $string = array(\n        'y' => 'year',\n        'm' => 'month',\n        'w' => 'week',\n        'd' => 'day',\n        'h' => 'hour',\n        'i' => 'minute',\n        's' => 'second',\n    );\n    foreach ($string as $k => &$v) {\n        if ($diff->$k) {\n            $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');\n        } else {\n            unset($string[$k]);\n        }\n    }\n\n    $string = array_slice($string, 0, $level);\n    return $string ? implode(', ', $string) . ' ago' : 'just now';\n}\n\n?>"], "fixing_code": ["<?php\n\n/**\n * *************************\n * Errors and Solutions\n * ************************\n * \n * If submit a large of data and return the following error in console: \n *   net::ERR_CONTENT_DECODING_FAILED\n * \n *      It happens when your HTTP request's headers claim that the content is gzip encoded, \n *      but it isn't. Turn off gzip encoding setting or make sure the content is in fact encoded.\n * \n * Please comment ob_start(\"ob_gzhandler\"); in loader.php file in check it is return.\n * \n * if it max_input_vars error, then increase it in php.ini file\n * \n * Continue updating....\n * \n */\n\n\n\n// Site Configuration\ndefine('ACTIVE_THEME', 'rui');\ndefine('TABLE_PREFIX', 'bms_');\ndefine('AUTO_LOGOUT_TIME', 300); // in Second. Default is five minutes\n\n// Directory Configuration\ndefine('DIR_CORE', DIR_BASE . 'core/');\ndefine('DIR_THEME', DIR_BASE . 'theme/' . ACTIVE_THEME . '/');\ndefine('DIR_MODULE', DIR_BASE . 'module/'); \ndefine('DIR_ASSETS', DIR_BASE . 'assets/'); \ndefine('DIR_INCLUDE', DIR_BASE . 'include/'); \ndefine('DIR_UPLOAD', DIR_ASSETS . 'upload/'); \ndefine('DIR_LOCAL', DIR_INCLUDE . 'local/'); \ndefine('DIR_LANG', DIR_LOCAL . 'lang/'); \ndefine('ERROR_PAGE', DIR_INCLUDE . 'static/errorpages/');\ndefine('SYSTEM_DOOR', DIR_INCLUDE . 'system/door/');\ndefine('SYSTEM_API', DIR_INCLUDE . 'system/api/');\ndefine('APPS', DIR_INCLUDE . 'apps/');\ndefine('LOAD_LIB', DIR_INCLUDE . 'lib/');\ndefine('DB_CONN', DIR_INCLUDE . 'db/db.php');\n\n\n/**\n * Max file upload size in MB\n * Note: Must be less then or euqal to PHP MAX_FILE_UPLOAD_SIZE and post_max_size\n */\n$_SETTINGS[\"MAX_UPLOAD_SIZE\"] = 8;\n\n/**\n * Define allowed extension and mime type.\n * \n * Can be seen common mime type here: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n * or\n *  https://www.iana.org/assignments/media-types/media-types.xhtml\n * \n */\n\n// Vaild image type for upload. must be in lower case\n$_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"] = array(\n    \"jpeg\"  => array(\"image/jpeg\"),\n    \"jpg\"   => array(\"image/jpeg\"),\n    \"png\"   => array(\"image/png\")\n);\n\n// Valid document type for upload. must be in lower case\n$_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"] = array(\n    \"pdf\"   => array(\"application/pdf\"),\n    \"doc\"   => array(\"application/msword\"),\n    \"docx\"  => array(\"vnd.openxmlformats-officedocument.wordprocessingml.document\"),\n    \"xls\"   => array(\"application/vnd.ms-excel\"),\n    \"xlsx\"  => array(\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\")\n);\n// Valid audio type for upload\n$_SETTINGS[\"VALID_AUDIO_TYPE_FOR_UPLOAD\"] = array(\n    \"oga\"   => array(\"audio/ogg\"),\n    \"opus\"  => array(\"audio/opus\"),\n    \"wav\"   => array(\"audio/wav\"),\n    \"weba\"  => array(\"audio/webm\")\n);\n\n// Valid video type for upload\n$_SETTINGS[\"VALID_VIDEO_TYPE_FOR_UPLOAD\"] = array(\n    \"mpeg\"  => array(\"video/mpeg\"),\n    \"ogv\"   => array(\"video/ogg\"),\n    \"webm\"  => array(\"video/webm\"),\n    \"mp4\"   => array(\"video/mp4\")\n);\n\n// Page title variable. All page title will be included here\n$_SETTINGS[\"PAGE_TITLE\"] = array();\n\n// Dynamic Menu variable.\n$_SETTINGS[\"NAV_MENU\"] = array();\n\n\n?>", "<?php\n/**\n * Trim all malicious input to protect SQL Injection and XXS\n * \n * @since 0.1\n * \n * @param string|int|bool\t$data\tdata to be trimed.\n * @param bool              $encoding if false then disable htmlspecialchars($data) and stripslashes() function. Default is true.\n * @return string|int|bool\treturn trimed data\n */\nfunction safe_input($data, $encoding = true) {\n\t$data = trim($data);\n    if($encoding === true) {\n        $data = stripslashes($data);\n        $data = htmlspecialchars($data, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401);\n    }\n\t$data = mysqli_real_escape_string($GLOBALS['conn'], $data);\n\treturn $data;\n}\n\n/**\n * Convert all applicable characters to HTML entities\n * \n * From PHP 8.1.0 the default flag is ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401\n * So, we make this for all version\n */\nfunction safe_entities($data) {\n    return htmlentities($data, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401);\n}\n\n/**\n * Determine the http or https and append with the domain.\n * \n * @since 0.1\n * \n * @return string\thttp:// or https://\n */\nfunction transfer_protocol() {\n\tif(isset($_SERVER['HTTPS']) && filter_var($_SERVER['HTTPS'], FILTER_VALIDATE_BOOLEAN)) {\n\t\treturn \"https://\";\n\t} else {\n\t\treturn \"http://\";\n\t}\n}\n\n/**\n * Return the root domain\n */\nfunction root_domain() {\n    return get_options(\"rootDomain\");\n}\n\n/**\n * @since 0.1\n * \n * @return string\tReturn the full application URL\n */\nfunction full_website_address() {\n\treturn transfer_protocol().root_domain(); \n}\n\n/**\n * Determine the homepage of the application.\n * \n * @since 0.1\n * \n * @return bool\t\tTrue or Fales\n */\nfunction is_home() {\n\t$get_uri = rtrim($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'],\"/\");\n\t$homepage = str_ireplace(transfer_protocol(), \"\", full_website_address());\n\t// posible other homepage\n\t$pohp = array($homepage, \"www.$homepage\", \"$homepage/index.php\", \"www.$homepage/index.php\");\n\n\treturn in_array($get_uri, $pohp);\n}\n\n/**\n * Redirect to a specific url\n * \n * @since 0.1\n * \n * @param string    $url where the url redirected.\n */\nfunction redirect($url) {\n    echo \"<script>window.location.href='{$url}';</script>\";\n}\n\n/**\n * \n * Discount calculator\n * \n * @since 0.1\n * \n * @param float|number        $amount The amount which need to calculate\n * @param string|number $discount   Fixed discount or Percantage. Eg 10 or 10%\n * \n * @return float   Discounted amount\n */\nfunction calculateDiscount($amount, $discount) {\n\n    if( empty($discount) or $discount === NULL or $discount === \"NULL\" ) {\n        return 0;\n    } else if(strpos($discount, \"%\") > 0) {\n\n        $amount = (float)$amount; \n        $discount = (float)rtrim($discount, \"%\");\n        \n        // For parcantage discount\n        return (float)round( ($discount/100) * $amount, get_options(\"decimalPlaces\") ); \n\n    } else {\n        \n        return (float)round($discount, get_options(\"decimalPlaces\"));\n\n    }\n\n}\n\n\nfunction calculatePercentage($amount, $discount) {\n\n    return number_format(( ( $discount / $amount ) * 100 ), 10, \".\", \"\") . \"%\";\n\n}\n\n\n/**\n * Generate and return the current page slug\n * \n * $_SERVER['HTTP_HOST'] returns the main domain\n * $_SERVER['REQUEST_URI'] returns the uri after the domain\n * root_domain() returns the configured domain\n * \n * @since 0.1\n * \n * @return string the page slug\n */\nfunction pageSlug() {\n\n    $URI = explode(root_domain(), rtrim($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'], \"/\"));\n    $URI = explode(\"?\", $URI[1]);\n    return trim($URI[0], '/');\n\n}\n\n/**\n * Tax Calculator\n */\nfunction calculateTax($amount, $taxRate) {\n\n    $amount = (float)$amount; \n    $taxRate = (float)rtrim($taxRate, \"%\");\n    \n    return round(($taxRate/100) * $amount, get_options(\"decimalPlaces\") ); \n}\n\n/** \n * in_arry_r() function for Multidimentional array.\n * \n * @since 0.1\n * \n * @param string|int    $needle     The string or number that need to find in the array.\n * @param array         $haystack   The array, where need to search.\n * @param bool          $strict     OPtional. Search the value with strictly (==== or ==). Default is false (==)\n * \n * @return bool         True or false. If found then return true, otherwise return false. \n*/\nfunction in_array_r($needle, $haystack, $strict = false) {\n    foreach ($haystack as $item) {\n        if (($strict ? $item === $needle : $item == $needle) || (is_array($item) && in_array_r($needle, $item, $strict))) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Block unauthorized access.\n * \n * @since 0.1\n * \n * @param bool      $stricted   Optional. Default is false. If make it true it will check there are has any HTTP REFERER. If not found, then block the request. \n * \n * @return bool     True or False. \n */\nfunction access_is_permitted($stricted = false) {\n    // header array\n    $headers = getallheaders();\n\n    //create_log(\"test\");\n\n    if( current_ip_is(\"Blocked\") ) {\n\n        return false;\n\n    }  else if(  get_options(\"canAccessOnlyPermittedIP\") === \"1\" and !current_ip_is(\"Permitted\") ) {\n\n        return false; \n\n    }  else if ($stricted) {\n            \n        if( isset($_SERVER['HTTP_REFERER']) and \n            strpos($_SERVER['HTTP_REFERER'], full_website_address())  === 0 and\n            isset($headers[\"Connection\"])\n        ) {\n            return true; \n        } \n        \n    }  else if (isset($headers[\"Connection\"])) { \n\n        return true;\n        \n    } else {\n\n        return false;\n\n    }\n\n    \n   \n}\n\n\n/**\n * Check if the current user ip is permitted or not\n * \n * @since 1.0.1\n * \n * @param string $action Permitted/Blocked. Case sensitive\n * \n * @return bool true/false\n */\n\nfunction current_ip_is($action) {\n\n    // Select the ip address\n    $check_ip = easySelectA(array(\n        \"table\"     => \"firewall\",\n        \"fields\"    => \"count(*) as count\",\n        \"where\"     => array(\n            \"fw_status = 'Active' and fw_action = '{$action}' and fw_ip_address\"  =>  get_ipaddr()\n        )\n    ));\n\n    if( $check_ip !== false and $check_ip[\"data\"][0][\"count\"] > 0  ) {\n        return true;\n    } else {\n        return false; \n    }\n\n}\n\n/**\n * Check the login status\n * \n * @since 0.1\n * \n * @return  bool    Return true if is login\n */\nfunction is_login() {\n    global $table_prefeix; // table prefix;\n\n    // If \"Don't Signout on inactivity\" is not checked and last activity is more then AUTO_LOGOUT_TIME \n    // Then return false and unset session.\n    if( isset($_COOKIE[\"keepAlive\"]) !== true and isset($_SESSION[\"LAST_ACTIVITY\"]) and (time() - $_SESSION[\"LAST_ACTIVITY\"]) > AUTO_LOGOUT_TIME ) {\n\n        session_unset();\n        return false;\n\n    }\n    \n\n    $sesionUserId = isset($_SESSION[\"uid\"]) ? $_SESSION[\"uid\"] : \"\";\n    $sessionPassAccessKey = isset($_SESSION[\"sak\"]) ? $_SESSION[\"sak\"] : \"\";\n    \n    // Select the user\n    defined('selectUser') ?: define('selectUser', easySelectA(array(\n        \"table\"     => \"users as user\",\n        \"fields\"    => \"user_email, user_emp_id, user_pass_aaccesskey\",\n        \"where\"     => array(\n            \"user.is_trash = 0 and user_id\" => $sesionUserId,\n            \" and user_pass_aaccesskey\" => $sessionPassAccessKey\n        )\n    )));\n\n    // define the variable\n    $sha1 = \"\";\n\n    if( selectUser !== false and isset($_SESSION[\"keepAliveOnNetworkChanges\"]) and $_SESSION[\"keepAliveOnNetworkChanges\"] === 1 ) {\n        $sha1 = sha1(selectUser[\"data\"][0][\"user_email\"].$_SERVER[\"HTTP_USER_AGENT\"]);\n    } else if(selectUser !== false) {\n        $sha1 = sha1(selectUser[\"data\"][0][\"user_email\"].$_SERVER[\"HTTP_USER_AGENT\"].$_SERVER[\"REMOTE_ADDR\"]);\n    }\n\n    if(isset($_SESSION[\"uid\"]) and isset($_SESSION[\"sak\"]) and $sha1 === $_SESSION[\"sak\"] and isset($_COOKIE[\"eid\"]) and selectUser[\"count\"] === 1 AND selectUser[\"data\"][0][\"user_emp_id\"] === $_COOKIE[\"eid\"]) {\n        \n        // Return true to say that we are now logged in.\n        return true; \n\n    } else {\n\n        // If any internal user try to change the eid then ban him to punish\n        // Will make it later.\n        //if(selectUser[\"data\"][0][\"user_emp_id\"] !== $_COOKIE[\"eid\"]) { }\n\n        // if any unathorized sessions are set then unset them.\n        if( isset($_SESSION) ) {\n            session_unset();\n        }\n\n        return false;\n\n    }\n}\n\n\n/**\n * check current user has a specific permission.\n * Example:\n * \n * current_user_can(\"accounts.View && accounts.Add\");\n * If both permission exists in current user then return true\n * \n * current_user_can(\"accounts.View || accounts.Add || accounts.Delete\");\n * If any one permission exists in current user then return true.\n * \n * Do not use || and && in signle function, like this:\n * current_user_can(\"accounts.View && accounts.Add || accounts.Edit || accounts.Delete\")\n * It Will return an unexpected result.\n * \n * Instead, use like this: (PHP Way)\n * current_user_can(\"accounts.View && accounts.Add) OR/AND current_user_can(accounts.Edit || accounts.Delete\")\n * \n * @since 0.1\n * \n * @param string $permission   The permision is need to check.\n * \n * @return bool If the permission exists then return true. \n */\n\n // Select the current user permission\n// We actually add this outside of function because, if we select it inside the current_user_can() function it will execute/ or select multitimes.\ndefined('USER_PERMISSIONS') ?: define('USER_PERMISSIONS', \n\n    !isset($_SESSION[\"uid\"]) ?: unserialize(\n        html_entity_decode(\n            easySelectA(array(\n                \"table\"     => \"users\",\n                \"fields\"    => \"user_permissions\",\n                \"where\"     => array(\n                    \"user_id\" => isset($_SESSION[\"uid\"]) ? $_SESSION[\"uid\"] : NULL\n                )\n            ))[\"data\"][0][\"user_permissions\"]\n        )\n    )\n);\n\n  // Start the function\nfunction current_user_can($permission) {\n\n\n    //create_log(\"current_user_can\", debug_backtrace());\n\n    // If current user is Super Admin then return it true\n    if( is_super_admin() ) {\n        return true;\n    }\n\n    // Check there is no || and && mark in the $permission string.\n    if( strpos($permission, \" || \") === false and strpos($permission, \" && \") === false ) {\n    \n        if( is_array(USER_PERMISSIONS) and in_array($permission, USER_PERMISSIONS) ) {\n            return true; \n        }\n    \n    }\n    \n    // Check the OR Condition.\n    // If any permission exists in the list then return true\n    if( strpos($permission, \" || \") !== false ) {\n\n        foreach(explode(\" || \", $permission) as $permission) {\n \n            // Check if the permission exists in user's permissions\n            // Here we must not use else: return false; with the OR Condition\n            // Because the condition can be true on second time loop\n            if( is_array(USER_PERMISSIONS) and in_array($permission, USER_PERMISSIONS) ) {\n                return true; \n            }\n\n        }\n\n    }\n    \n    // Check the AND Condition\n    // If all permission exists in the list the return true\n    if( strpos($permission, \" && \") !== false ) {\n\n        $permissionCarrier = array();\n        foreach(explode(\" && \", $permission) as $permission) {\n\n            // Check if the permission exists in user's permissions\n            if( is_array(USER_PERMISSIONS) and in_array($permission, USER_PERMISSIONS) ) {\n                $permissionCarrier[\"true\"]  = 1;\n            } else {\n                $permissionCarrier[\"false\"]  = 0;\n            }            \n        }\n\n        // If the false array key not exists then return true. \n        if( array_key_exists(\"false\", $permissionCarrier) === false ) {\n            return true;\n        }\n\n    }\n    \n}\n\n\n/**\n * The three function of bellow must not go to above of current_user_can() function.\n */\n\n\n/**\n * Function to generate menu from array\n * \n * :::::Permission::::::\n * If no permission set then the menu will be hidden\n * to show all user set the permission:  __? => true\n * If a submenu have permission for a user, then the parents menu will be shown, wither is not set any permission\n * If parents menu dont have access permission to user and if a submenu has the permission then the both of will be not shown\n * \n * The menus which are include in $menus[\"hidden\"] will be not showen\n * \n * @since 0.1\n * \n * @param array $menus  The menu array.\n * \n * @return string   The menu string.\n */\n\nfunction generateMenu(array $menus) {\n\n    global $_SETTINGS;\n    $generatedMenu = \"\";\n\n    foreach($menus as $menuName => $MenuContext) {\n\n        $modal = array_key_exists(\"t_modal\", $MenuContext) ? \"data-toggle='modal' data-target='{$MenuContext['t_modal']}'\" : \"\";\n        $linkCarrier = isset($MenuContext['t_link']) ? $MenuContext['t_link'] : \"\";\n        $iconCarrier = isset($MenuContext['t_icon']) ? $MenuContext['t_icon'] : \"\";\n        $dloadCarrier = isset($MenuContext['dload']) and $MenuContext['dload'] === true ? $MenuContext['dload'] : false;\n        $hasPermission = ( \n                            (\n                                has_permission($MenuContext) and is_array($MenuContext) and array_key_exists(\"__?\", $MenuContext) === false\n                            ) or\n                            ( \n                                isset($MenuContext[\"__?\"]) and $MenuContext[\"__?\"] === true \n                            )\n                        ) ? true : false;\n\n        // Add the Menu Title\n        if( isset($MenuContext[\"title\"]) ) {\n            $_SETTINGS[\"PAGE_TITLE\"][$MenuContext[\"t_link\"]] = $MenuContext[\"title\"];\n        }\n        \n        // unset key\n        unset(\n            $MenuContext[\"t_link\"], \n            $MenuContext[\"t_icon\"], \n            $MenuContext[\"t_modal\"], \n            $MenuContext[\"dload\"], \n            $MenuContext[\"title\"], \n            $MenuContext[\"__?\"]\n        );\n        \n        // If has permission and the menu name is not Hidden\n        if($hasPermission and $menuName !== \"Hidden\") {\n            \n            $hasSubMenu = ( !empty($MenuContext) and has_permission($MenuContext) ) ? true : false; \n            $subMenuArrowIcon = $hasSubMenu ? \"<span class='pull-right-container'> <i class='fa fa-angle-left pull-right'></i> </span>\" : \"\";\n\n            $getContent = ( $dloadCarrier === false and !empty($linkCarrier) and $linkCarrier !== \"#\" and empty($modal) ) ? \"onclick='getContent(this.href, event);'\" : \"\";\n        \n\n            $generatedMenu .= $hasSubMenu ? \"<li class='treeview'>\" : \"<li>\";\n                \n                $generatedMenu .= \"<a {$getContent} {$modal} href='{$linkCarrier}'>\n                        <i class='{$iconCarrier}'></i> \n                        <span>\". __($menuName) .\"</span>\n                        $subMenuArrowIcon\n                        </a>\";\n        \n                if($hasSubMenu) {\n\n                    $generatedMenu .= \"<ul class='treeview-menu'>\";\n                    $generatedMenu .= generateMenu($MenuContext);\n                    $generatedMenu .= \"</ul>\";\n\n                }\n    \n            $generatedMenu .= \"</li>\";\n\n        } else if($menuName === \"Hidden\") {\n\n            // If the menu item is hidden\n            // then not append these menus on $generatedMenu\n            // The recurson is only for get the titles\n            generateMenu($MenuContext);\n\n        }\n        \n    }\n\n    return $generatedMenu;\n  \n}\n\n\n/**\n * Generate an select option list for redirect after login settings\n */\nfunction generateSelectOptions(array $menus, $selected = \"\") {\n\n    foreach($menus as $menuName => $MenuContext) {\n\n\n        if( isset($MenuContext[\"t_link\"]) and $MenuContext[\"t_link\"] !== \"#\" ) {\n\n            $selectedOption = ($selected === $MenuContext[\"t_link\"] ) ? \"selected\" : \"\";\n            echo \"<option {$selected} value='{$MenuContext[\"t_link\"]}'>$menuName</option>\";\n\n        } else {\n\n            // create the option group\n            echo \"<optgroup label ='$menuName'>\";\n\n            // get the options\n            foreach( $MenuContext as $options => $optionContext ) {\n\n                if( isset($optionContext['t_link']) and !empty($optionContext['t_link']) ) {\n                    $selectedOption = ($selected === $optionContext[\"t_link\"] ) ? \"selected\" : \"\";\n                    echo \"<option {$selectedOption} value='{$optionContext[\"t_link\"]}'>$options</option>\";\n\n                }\n\n            }\n            \n            echo \"</optgroup>\";\n\n        }\n        \n    }\n  \n}\n\nfunction has_permission(array $MenuContext, $isNeedCheckUrl = false) {\n\n    // If super Admin then grant all permissions\n    if( is_super_admin() ) {\n        return true;\n    }\n\n    // Generate the current url\n    $url = transfer_protocol().strtok($_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'], \"?\");\n\n    foreach($MenuContext as $key => $value) {\n\n        // If need to check the url\n        if($isNeedCheckUrl) {\n\n            if (  ( isset($value[\"__?\"]) and $value[\"__?\"] === true and $value[\"t_link\"] === $url ) or (is_array($value) and has_permission($value, true)) )  {\n          \n                return true; \n           }\n\n        } else {\n\n            if (  ( isset($value[\"__?\"]) and $value[\"__?\"] === true ) or (is_array($value) and has_permission($value)) )  {\n            \n                return true; \n\n           }\n        }\n\n    }\n\n    return false;\n\n}\n\n/** Detarmin if the current user is super admin or not\n * If suport admin, return true, otherwise false\n */\nfunction is_super_admin(){\n\n    // If super Admin then grant all permissions\n    if( is_array(USER_PERMISSIONS) and in_array(\"SuperAdmin\", USER_PERMISSIONS) ) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n\n/**\n * check current user has the permission to visit current page.\n * \n * @since 0.1\n * \n * @return bool If the permission exists then return true. \n */\nfunction current_user_can_visit_this_page() {\n    global $default_menu;\n    $defaultPermissionForAllUser = array (\"xhr\", \"info\", \"logout\", \"login\", \"api/v1\", \"invoice-print\", \"images\", \"print\", \"css\", \"js\", \"barcode\");\n    \n    if( has_permission($default_menu, true) or in_array(pageSlug(), $defaultPermissionForAllUser) ) {\n        return true;\n    } else {\n        return false;\n    }\n\n}\n\n\n\n/**\n * Insert data into Database.\n * \n * @since 0.1\n * \n * @param string\t$table\t\t\tThe table name, where the data will insert.\n * @param array\t\t$fieldAndValue\tThe field and field value array. All fields of table and these value have to be stored.\n * @param array\t\t$duplicateCheck\tOptional. For checking the data if exists on the DB. The array is same as easySelect() function's $where.\n * @param bool      @extraInfo      Optional. If needs last_insert_id the set it true. Default is false\n * \n * @return string|bool\tReturn true if data is successfully inserted into the table, otherwise it will throw the mysql error.\n */\nfunction easyInsert(\n    string $table,\n    array $fieldAndValue, \n    array $duplicateCheck=array(), \n    bool $extraInfo = false\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $fields = \"\";\t\t\t// The field variable will store all table field.\n    $fieldsValue = \"\";\t\t// The fieldValue variable will sotre all filed value\n\n\n    // If the duplicate Checker is enabled, then check if the data is duplicate or exists on the database, \n\t// If true then return error massage.\n\tif(!empty($duplicateCheck) and !isset($_POST[\"forceInsert\"]) ) {\n\t\tif (easySelect(\n\t\t\t$table,\n            \"*\",\n            array(),\n\t\t\t$duplicateCheck\n\t\t) !== false) {\n\t\t\treturn \"The data is already exists. <input type='checkbox' id='forceInsert' name='forceInsert'/> <label style='cursor: pointer;' for='forceInsert'>Force Insert</label> \";\n\t\t}\n\t}\n\n    foreach($fieldAndValue as $item => $itemsValue) {\n        $fields .= $item . \", \";\n\n        /**\n         * check if $itemsValue is array or not. if array then include the array value [bool] into the safe_input function\n         * It actually use if we dont need the htmlspecialchars() and stripslashes() function in safe_input() function\n         * If we set the second parameter false then htmlspecialchars() and stripslashes() function not be used. \n         **/ \n        if(is_array($itemsValue)) {\n\n            $fieldsValue .= \"'\".safe_input($itemsValue[0], $itemsValue[1]) .\"', \";\n\n        } else if( is_null($itemsValue) ) { // if the input value is null\n\n            $fieldsValue .= \"NULL, \";\n\n        } else if( strlen($itemsValue) < 1 ) { // If the input value is empty string\n\n            $fieldsValue .= \"'', \";\n\n        } else { // And in all other situation insert the input value.\n\n            $fieldsValue .= \"'\".safe_input($itemsValue) .\"', \";\n\n        }\n    }\n\n    $fields = rtrim($fields, \", \");\n    $fieldsValue = rtrim($fieldsValue, \", \");\n\t\n\t// Build the query\n   $sqlQuery = \"INSERT INTO {$table_prefeix}{$table} ($fields) VALUES ($fieldsValue)\"; \n\n\t// Run the Query\n\t$conn->query($sqlQuery);\n\n\t// Get the last insert ID. \n    $last_id = $conn->insert_id;\n    \n\t//check if last $conn->error is empty then return true. Otherwise return the error message.\n    if(empty($conn->error)) {\n\n        // If we need any extra info\n        if($extraInfo === true) {\n\n            return array (\n                \"status\" => \"success\",\n                \"last_insert_id\" => $last_id\n            );\n\n        } else {\n            return true; \n        }\n        \n    } else {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n        // create_log($sqlQuery, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        // return error msg\n        return $conn->error;\n    }\n\n}\n\n\n/**\n * Function to fetch data from database\n * \n * Example:\n * easySelect (\n * \t\t\"$table\", \t//The table\n * \t\t\"$field\",\t//The selector ($field), * or column name\n *      array (     // Join clause\n *          \"left join ... bla bla bla\"\n *      ),\n * \t\tarray (\t\t//Where Clause\n * \t\t\t\"group_name\" => \"love\",\n * \t\t\t\" OR group_id\" => \"1\",\n * \t\t),\n * \t\t\"group_id ASC\"\t//Order by clause\n * )\n * \n * @since 0.1\n * \n * @param string\t$table\t\tThe table name, from where the data will fetch.\n * @param string\t$field\t\tOptional. The selector or field of the table. Like * or the specific column name or multiple column seperating by comman(,)\n * @param array     $join       Optional. Join multiple table\n * @param array\t\t$where\t\tOptional. The where clause. Condition of selecting data\n * @param array \t$orderBy\tOptional. How the data will show. ASC OR DESC\n * @param array     $limit      Optional. Must be in numeric value. \n * \n * @return array/bool\t\t\tReturn all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.\n */\nfunction easySelect(\n    string $table, \n    string $field = \"\", \n    array $join=array(), \n    array $where=array(), \n    array $orderBy=array(), \n    array $limit=array()\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $dataFromDB = [];\n\n    // if field empty then input a star (*)\n    if(empty($field)) {\n        $field = \"*\";\n    }\n\n    // Build the query\n    $sqlQuery = \"SELECT SQL_CALC_FOUND_ROWS {$field} FROM {$table_prefeix}{$table}\";\n\n/*     // Check if the table exists\n    if($conn->query($sqlQuery) === false) {\n        return \"Table {$table} or field {$field} doesn't exist\";\n    } */\n\n    // Join clues for joining multiple table\n    $joinClues = \"\";\n    if(!empty($join)) {\n\n        foreach($join as $joinVar) {\n            $joinClues .= \"{$joinVar} \";\n        }\n\n    }\n\n    $sqlQuery .= \" {$joinClues}\";\n\n    // Where Cluase\n    if(!empty($where)) {\n\n        // If any where clause exists then append it with the query.\n        $whereClause = \"\";\n        \n        foreach($where as $whereField => $whereValue) {\n\n            // If where value is empty then its not need to include in wherecluase. \n            if($whereValue !== \"\" and $whereValue !== \"%\" and $whereValue !== \"%%\" ) {\n\n                if(!is_numeric($whereField) and stripos($whereField, \"LIKE\") > 0) { // Check if there any LIKE keyword in $whereField\n\n                    $whereClause .= \"{$whereField} '\".safe_input($whereValue).\"'\";\n    \n                } else if(!is_numeric($whereField)) {\n    \n                    $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n                    \n                } elseif(stripos($whereValue, \"between\") > 0) { // Check if the between keyword exists and data is not empty then the whare cluase will add with query. \n\n                    if(stripos($whereValue, \"BETWEEN '' and\") < 1) {\n\n                        $whereClause .= \" $whereValue\";\n                    }\n\n                } else {\n    \n                    $whereClause .= \" $whereValue\";\n                }\n\n            }\n            \n        }\n\n        // Append the where clause with $sqlQuery\n        $sqlQuery .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n\n    }\n\n    // OrderBy Clause\n    if(!empty($orderBy)) {\n\n        // If any order by clause exists then append it with the query.\n        $orderByClause = \"\";\n        foreach($orderBy as $orderByField => $orderByValue) {\n\n            // Only allow ASC AND DESC string in $orderByValue\n            if(!in_array(strtoupper($orderByValue), array(\"ASC\", \"DESC\"))) {\n                return \"Invalied order by clause. Allow only ASC OR DESC\";\n            }\n            \n            $orderByClause .= \"{$orderByField} {$orderByValue}, \";\n            \n        }\n        $orderByClause = rtrim($orderByClause, \", \");\n        // Append the Orderby Clause with $sqlQuery\n        $sqlQuery .= \" ORDER BY {$orderByClause}\";\n    }\n\n    // Limit Clause\n    if(!empty($limit)) {\n\n        // If any order by clause exists then append it with the query.\n        if(!is_numeric($limit[\"start\"]) or !is_numeric($limit[\"length\"])) {\n            return \"Limit clause must be a numeric value.\";\n        }\n\n        $limitStart = intval($limit[\"start\"]);\n        $limitLength = intval($limit[\"length\"]);\n     \n        // Append the Limit Clause with $sqlQuery\n        $sqlQuery .= \" LIMIT {$limitStart}, {$limitLength}\";\n    }\n\n   /*  echo  $sqlQuery ;\n    exit(); */\n\n    // Run the query and store the result into getResult variable.\n    $getResult = $conn->query($sqlQuery);\n\n    //create_log($sqlQuery);\n\n    // Check If the syntax has any error then throw an the error.\n    if($getResult === false) {\n        \n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n    }\n\n    // Check if there is more then Zero (0) result.\n    if($getResult->num_rows > 0) {\n        \n\n        // $countTotalFilteredRow = \"SELECT count(*) as totalFilteredRow FROM {$table_prefeix}{$table}\";\n        // $countTotalFilteredRow .= \" {$joinClues}\";\n        // $countTotalFilteredRow .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n        // $countTotalFilteredRow = $conn->query($countTotalFilteredRow)->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        $countTotalFilteredRow = $conn->query(\"SELECT found_rows() as totalFilteredRow;\")->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        // return all data in array format\n        return array(\n            \"has_data\" => true,\n            \"count\" => (int)$countTotalFilteredRow,\n            \"data\" => $getResult->fetch_all(true)\n        );\n\n    } else {\n        // Return false if there is no data.\n        return false;\n\n        /**\n         * return array(\n         *       \"has_data\" => false,\n           *     \"data\" => $getResult->fetch_all(true)\n         *   );\n         */\n\n\n    }\n    \n}\n\nfunction easySelectA(array $query) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $dataFromDB = [];\n    $table = $fields = $join = $where = $groupby = $orderBy = $limit = \"\";\n\n    // Lower case all key name.\n    $query = array_change_key_case($query, CASE_LOWER);\n\n    // Check if the table is declared or empty\n    if( !isset($query[\"table\"]) ) {\n        return \"Table name must be declared\";\n    } else if(empty($query[\"table\"]) or !is_string($query[\"table\"])) {\n        return \"The table must not be empty and must be a string\";\n    } else {\n        $table = $query[\"table\"];\n    }\n\n    // Check the filed\n    if( isset($query[\"fields\"]) and !is_string($query[\"fields\"]) ) {\n        return \"Fields must be string\";\n    } else if( !empty($query[\"fields\"]) ) {\n        $fields = $query[\"fields\"];\n    } else {\n        $fields = \"*\";\n    }\n\n    // Check join\n    if( isset($query[\"join\"]) and !is_array($query[\"join\"]) ) {\n        return \"Join claues must be array\";\n    } else if(isset($query[\"join\"])) {\n        $join = $query[\"join\"];\n    }\n\n    // Check where cluse\n    if( isset($query[\"where\"]) and !is_array($query[\"where\"]) ) {\n        return \"Where claues must be array\";\n    } elseif(isset($query[\"where\"])) {\n        $where = $query[\"where\"];\n    }\n\n    // Check group by cluse\n    if( isset($query[\"groupby\"]) and !is_string($query[\"groupby\"]) ) {\n        return \"Group by claues must be string\";\n    } elseif(isset($query[\"groupby\"])) {\n        $groupby = $query[\"groupby\"];\n    }\n\n    // Check orderBy cluse\n    if( isset($query[\"orderby\"]) and !is_array($query[\"orderby\"]) ) {\n        return \"Order by claues must be array\";\n    } elseif(isset($query[\"orderby\"])) {\n        $orderBy = $query[\"orderby\"];\n    }\n\n    // Check Limit \n    if( isset($query[\"limit\"]) and !is_array($query[\"limit\"]) ) {\n        return \"Order by claues must be array\";\n    } elseif(isset($query[\"limit\"])) {\n        $limit = $query[\"limit\"];\n    }\n\n\n    // Build the query\n    $sqlQuery = \"SELECT SQL_CALC_FOUND_ROWS {$fields} FROM {$table_prefeix}{$table}\";\n\n\n    // Join clues for joining multiple table\n    $joinClues = \"\";\n    if(!empty($join)) {\n\n        foreach($join as $joinVar) {\n            $joinClues .= \"{$joinVar} \";\n        }\n\n    }\n\n    $sqlQuery .= \" {$joinClues}\";\n\n    // Where Cluase\n    if(!empty($where)) {\n\n        // If any where clause exists then append it with the query.\n        $whereClause = \"\";\n        \n        foreach($where as $whereField => $whereValue) {\n\n            // If where value is empty then its not need to include in wherecluase. \n            if($whereValue !== \"\" and $whereValue !== \"%\" and $whereValue !== \"%%\" ) {\n\n                if(!is_numeric($whereField) and stripos($whereField, \"LIKE\") > 0) { // Check if there any LIKE keyword in $whereField\n\n                    $whereClause .= \"{$whereField} '\".safe_input($whereValue).\"'\";\n    \n                } else if(!is_numeric($whereField)) {\n    \n                    $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n                    \n                } elseif(stripos($whereValue, \"between\") > 0) { // Check if the between keyword exists and data is not empty then the whare cluase will add with query. \n\n                    if(stripos($whereValue, \"BETWEEN '' and\") < 1) {\n\n                        $whereClause .= \" $whereValue\";\n                    }\n\n                } else {\n    \n                    $whereClause .= \" $whereValue\";\n                }\n\n            }\n            \n        }\n\n        // Append the where clause with $sqlQuery\n        $sqlQuery .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n\n    }\n\n    // groupby clause\n    if(!empty($groupby)) {\n        $sqlQuery .= \" group by \" . $groupby;\n    }\n\n    // OrderBy Clause\n    if(!empty($orderBy)) {\n\n        // If any order by clause exists then append it with the query.\n        $orderByClause = \"\";\n        foreach($orderBy as $orderByField => $orderByValue) {\n\n            // Only allow ASC AND DESC string in $orderByValue\n            if(!in_array(strtoupper($orderByValue), array(\"ASC\", \"DESC\"))) {\n                return \"Invalied order by clause. Allow only ASC OR DESC\";\n            }\n            \n            $orderByClause .= \"{$orderByField} {$orderByValue}, \";\n            \n        }\n        $orderByClause = rtrim($orderByClause, \", \");\n        // Append the Orderby Clause with $sqlQuery\n        $sqlQuery .= \" ORDER BY {$orderByClause}\";\n    }\n\n    // Limit Clause\n    if(!empty($limit)) {\n\n        // If any order by clause exists then append it with the query.\n        if(!is_numeric($limit[\"start\"]) or !is_numeric($limit[\"length\"])) {\n            return \"Limit clause must be a numeric value.\";\n        }\n\n        $limitStart = intval($limit[\"start\"]);\n        $limitLength = intval($limit[\"length\"]);\n     \n        // Append the Limit Clause with $sqlQuery\n        $sqlQuery .= \" LIMIT {$limitStart}, {$limitLength}\";\n    }\n\n   /*  echo  $sqlQuery ;\n    exit(); */\n\n    // Run the query and store the result into getResult variable.\n    $getResult = $conn->query($sqlQuery);\n\n    //create_log($sqlQuery);\n\n    // Check If the syntax has any error then throw an the error.\n    if($getResult === false) {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n\n    }\n\n    // Check if there is more then Zero (0) result.\n    if($getResult->num_rows > 0) {\n\n        // $countTotalFilteredRow = \"SELECT count(*) as totalFilteredRow FROM {$table_prefeix}{$table}\";\n        // $countTotalFilteredRow .= \" {$joinClues}\";\n        // $countTotalFilteredRow .= empty($whereClause) ? \"\" : \" WHERE {$whereClause}\";\n        // $countTotalFilteredRow = $conn->query($countTotalFilteredRow)->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        $countTotalFilteredRow = $conn->query(\"SELECT found_rows() as totalFilteredRow;\")->fetch_all(true)[0][\"totalFilteredRow\"];\n\n        // return all data in array format\n        return array(\n            \"count\" => (int)$countTotalFilteredRow,\n            \"data\" => $getResult->fetch_all(true)\n        );\n\n    } else {\n        // Return false if there is no data.\n        return false;\n    }\n    \n}\n\n\n/**\n * easySelect Direct\n * \n * @since 0.1\n * \n * @param $query    The query which will run\n * \n * @return array/bool\t\t\tReturn all data with array format. [count] return number of records and [data] retruns all records. Return error massage if the query is wrong. Return False if there is no data.\n * \n */\nfunction easySelectD($query) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $dataFromDB = [];\n\n    /* echo $query;\n    exit(); */\n    // Run the query and store the result into getResult variable.\n    $getResult = $conn->query($query);\n\n    // Check If the syntax has any error then throw an the error.\n    if($getResult === false) {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n    }\n\n    // Check if there is more then Zero (0) result.\n    if($getResult->num_rows > 0) {\n        \n        // return all data in array format\n        return array(\n            \"count\" => $getResult->num_rows,\n            \"data\" => $getResult->fetch_all(true)\n        );\n\n    } else {\n        // Return false if there is no data.\n        return false;\n    }\n\n}\n\n\nfunction runQuery($query){\n   \n    global $conn;\t\t\t// MySQL connection variable.\n\n    $runQuery = $conn->query($query);\n\n    // Check If the syntax has any error then throw an the error. Otherwise return ture;\n    if($runQuery === false) {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error; // Return the error\n\n    } else {\n        return true;\n    }\n\n}\n\n\n/**\n * Function to move data to trash.\n * \n * @since 0.1\n * \n * @param string    $table  The table, from where the data will be moved into trash.\n * @param array     $where  The Where clues in array formate.\n * \n * @return string|bool      Return true if the data is successfully moved. Otherwise return the error massage.\n */\nfunction easyDelete(\n    string $table, \n    array $where\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n\n    // Check if the data exists or not\n    $DataToByDeleted = easySelect(\n        $table,\n        \"*\",\n        array(),\n        $where\n    );\n\n    if($DataToByDeleted === false) {\n        return \"There is no data found to delete.\";\n    }\n    \n    // Build the where clues\n    $whereClause = \"\";   \n    foreach($where as $whereField => $whereValue) {\n        $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n    }\n\n    // Build the query\n    $sqlQuery = \"UPDATE {$table_prefeix}{$table} SET is_trash=1 WHERE {$whereClause}\";  \n\n    // Run the query and check\n    if($conn->query($sqlQuery) === TRUE) {\n        \n        return true;\n\n    } else {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error;\n\n    }\n\n}\n\n\n/**\n * Function to delete data from database.\n * \n * @since 0.1\n * \n * @param string    $table  The table, from where the data will be deleted.\n * @param array     $where  The Where clues in array formate.\n * \n * @return string|bool      Return true if the data is successfully deleted. Otherwise return the error massage.\n */\nfunction easyPermDelete(\n    string $table, \n    array $where\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n    // Check if the data exists or not\n    $DataToByDeleted = easySelect(\n        $table,\n        \"*\",\n        array(),\n        $where\n    );\n\n    if($DataToByDeleted === false) {\n        return \"There is no data found to delete.\";\n    }\n    \n    // Build the where clues\n    $whereClause = \"\";   \n    foreach($where as $whereField => $whereValue) {\n        $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n    }\n\n    // Build the query\n    $sqlQuery = \"DELETE FROM {$table_prefeix}{$table} WHERE {$whereClause}\";\n\n    // Run the query and check\n    if($conn->query($sqlQuery) === TRUE) {\n        \n        // Save deleted data\n        save_deleted_date($table, $DataToByDeleted);\n\n        return true;\n    } else {\n        return $conn->error;\n    }\n}\n\n/**\n * Function to update any data\n * \n * @since 0.1\n * \n * @param string    $table  The table, from where the data will be deleted.\n * @param array     $set    The update field and values in array format\n * @param array     $where  The Where clues in array formate.\n * \n * @return string|bool\tReturn true if data is successfully updated, otherwise it will throw the mysql error.\n */\nfunction easyUpdate(\n    string $table, \n    array $set, \n    array $where\n    ) {\n\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n    // Check if the data exists or not\n    if(easySelect(\n        $table,\n        \"*\",\n        array(),\n        $where\n    ) === false) {\n        return \"There is no data found to edit.\";\n    }\n\n    // Build the set clues\n    $setClues = \"\";\n    foreach($set as $setField => $setValue) {\n        /**\n         * check if $setValue is array or not. if array then include the array value [bool] into the safe_input function\n         * It actually use if we dont need the htmlspecialchars() and stripslashes() function in safe_input() function\n         * If we set the second parameter false then htmlspecialchars() and stripslashes() function not be used. \n         **/ \n        if(is_array($setValue)) {\n\n            $setClues .= \"{$setField} = '\" . safe_input($setValue[0], $setValue[1]) . \"', \";\n\n        } else if( is_null($setValue) ) { // if the input value is null\n\n            $setClues .= \"{$setField} = NULL, \";\n\n        } else if( strlen($setValue) < 1 ) { // If the input value is empty string\n\n            $setClues .= \"{$setField} = '', \";\n\n        } else { // And in all other situation insert the input value.\n           \n            $setClues .= \"{$setField} = '\".safe_input($setValue) .\"', \";\n\n        }\n        \n    }\n\n    $setClues = rtrim($setClues, \", \");\n\n    // Build the query\n    $sqlQuery = \"UPDATE {$table_prefeix}{$table} SET {$setClues}\";  \n\n     // Build the where clues\n    $whereClause = \"\";   \n    foreach($where as $whereField => $whereValue) {\n         $whereClause .= \"{$whereField} = '\".safe_input($whereValue).\"'\";\n    }\n\n    // Apend the where clues with sqlQuery\n   $sqlQuery .= \" WHERE {$whereClause}\";\n\n    /* echo $sqlQuery;\n    exit(); */\n\n    // Run the query and check\n    if($conn->query($sqlQuery) === TRUE) {\n        // Save the query\n        //save_query(\"UPDATE {$table_prefeix}{$table} SET {$setClues}  WHERE {$whereClause}\");\n        \n        return true;\n\n        \n        \n    } else {\n\n        // insert log \n        create_log($conn->error, debug_backtrace());\n\n        // Keep the transaction error record\n        $conn->get_all_error[] = $conn->error;\n\n        return $conn->error;\n\n    }\n\n}\n\n\n/**\n * save_query use for save the query into database. And we will this for uploading data into main server.\n * \n * @since 0.1\n * \n * @param string $query The query we need to save\n */\nfunction save_query($query) {\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    $query = json_encode($query);\n    $conn->query(\"INSERT INTO {$table_prefeix}latest_queries (query_value) VALUES ($query)\");\n\n}\n\n\n/**\n * Function store deleted data in database\n * \n * @since 0.1\n * \n * @param string $table The table name where the data is deleted from. \n * @param array $data  The deleted data we need to store\n */\nfunction save_deleted_date($table, $data) {\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n    \n    // Serialize the data\n    $data = serialize($data);\n\n    // Insert deleted data\n    $conn->query(\"INSERT INTO {$table_prefeix}deleted_data (deleted_from, deleted_data, deleted_by) VALUES ('{$table}', '{$data}', '{$_SESSION['uid']}')\");\n\n}\n\n/**\n * @since 0.1\n * \n * @param string    $fileInputName  The file upload input name\n * @param string    $type           Optional. type of upload file. Defalut is image.\n * @param string    $location       Optional. Where the uploaded file has stored. Default is db and return an blob string\n * \n */\n\n function easyUpload( \n    array $file, \n    string $location=\"db\",\n    string $newFileName=\"\",\n    string $type=\"image\"\n    ) {\n\n    /**\n     * Check if there a file\n     */\n    if(!isset($file[\"size\"]) or $file[\"size\"] < 1 ) {\n        return \"There is no file found to be uploaded.\";\n    }\n\n    global $_SETTINGS;\n\n    $mimeType = strtolower($file[\"type\"]);\n    $extension = explode(\".\", $file[\"name\"]);\n    $extension = end($extension);\n    \n    $maxUploadSize = $_SETTINGS[\"MAX_UPLOAD_SIZE\"] * 1024 * 1024;\n\n    if ($maxUploadSize < $file[\"size\"]) {\n        return \"The file is exceeded the max upload size ({$_SETTINGS[\"MAX_UPLOAD_SIZE\"]} MB)\";\n    }\n\n    $validFileForUpload = [];\n    switch($type) {\n        case \"image\":       $validFileForUpload = $_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"]; break;\n        case \"document\":    $validFileForUpload = $_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"]; break;\n        case \"video\":       $validFileForUpload = $_SETTINGS[\"VALID_VIDEO_TYPE_FOR_UPLOAD\"]; break;\n        case \"audio\":       $validFileForUpload = $_SETTINGS[\"VALID_AUDIO_TYPE_FOR_UPLOAD\"]; break;\n        case \"program\":     $validFileForUpload = $_SETTINGS[\"VALID_PROGRAM_TYPE_FOR_UPLOAD\"]; break;\n        case 'all':         $validFileForUpload = array_merge($_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"], $_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"]); break;\n    }\n\n\n    // Validate both file extension and mime type\n    if( isset( $validFileForUpload[$extension] ) AND in_array( $mimeType, $validFileForUpload[$extension] )  ) {\n\n\n        /**\n         * If location is set to db then return the image as blob string\n         * Otherwise save the image in the desired location\n         */\n        if($location == \"db\") {\n            \n            return array (\n                \"success\"       => true,\n                \"imageType\"     => $file[\"type\"],\n                \"blobString\"    => file_get_contents($file[\"tmp_name\"])\n            );\n\n        } else {\n            \n            $uploadDir = DIR_UPLOAD . $location;\n\n            if(!is_dir($uploadDir) && !mkdir($uploadDir, 0777, true)) {\n                return \"Error creating directory\";\n            }\n\n            // If newFileName is not empty then change the file name by given\n            $file_name = rand().$file[\"name\"];\n            if(!empty($newFileName)) {\n\n                $file_extension = explode(\".\", $file_name);\n                $file_extension = end($file_extension);\n                $file_name = $newFileName . \".\" . $file_extension;\n\n            }\n\n\n            if(move_uploaded_file($file[\"tmp_name\"], $uploadDir .\"/\" . $file_name )) {\n\n                return array (\n                    \"success\"      => true,\n                    \"fileName\"     => $file_name\n                );\n\n            } else {\n\n                return \"Can not upload the file\";\n\n            }\n\n        }\n\n\n    } else {\n\n        return \"Invalid {$type} type.\"; // Only {$validExtensionNameList} {$type} type are allowed to upload\";\n\n    }\n    \n}\n\n\nfunction easyUpload_back(\n    string $fileInputName, \n    string $type=\"image\",\n    string $location=\"db\"\n    ) {\n\n    // Get the image size\n    $fileSize = isset($_FILES) ? $_FILES[$fileInputName][\"size\"] : 0;\n\n    /**\n     * Check if the $_FILES variable is not set and image type is grater then zero byte\n     *  if ture then throw an error.\n     */\n    if(!isset($_FILES) or $fileSize <= 1) {\n        return \"There is no file found to be uploaded. Please check the file input name and enter it correctly.\";\n    }\n\n    global $_SETTINGS;\n    $type = strtolower($type);\n\n    $reference = explode(\".\", $_FILES[$fileInputName][\"name\"]);\n    $file_extension = end($reference);\n    $extensionName = strtolower(explode(\"/\", $_FILES[$fileInputName][\"type\"])[1]);\n    \n    $maxUploadSize = $_SETTINGS[\"MAX_UPLOAD_SIZE\"] * 1024 * 1024;\n\n    if ($maxUploadSize <  $_FILES[$fileInputName][\"size\"]) {\n        return \"The file is exceeded the max upload size\";\n    }\n\n    $validExtensionForUpload = [];\n    switch($type) {\n        case \"image\":       $validExtensionForUpload = $_SETTINGS[\"VALID_IMAGE_TYPE_FOR_UPLOAD\"]; break;\n        case \"document\":    $validExtensionForUpload = $_SETTINGS[\"VALID_DOCUMENT_TYPE_FOR_UPLOAD\"]; break;\n        case \"video\":       $validExtensionForUpload = $_SETTINGS[\"VALID_VIDEO_TYPE_FOR_UPLOAD\"]; break;\n        case \"audio\":       $validExtensionForUpload = $_SETTINGS[\"VALID_AUDIO_TYPE_FOR_UPLOAD\"]; break;\n        case \"program\":     $validExtensionForUpload = $_SETTINGS[\"VALID_PROGRAM_TYPE_FOR_UPLOAD\"]; break;\n    }\n    \n    if(!in_array($extensionName, $validExtensionForUpload)) {\n\n        $validExtensionNameList = \"\";\n        foreach($validExtensionForUpload as $validExtension) {\n            $validExtensionNameList .= $validExtension . \", \";\n        }\n        $validExtensionNameList = rtrim($validExtensionNameList, \", \");\n\n        return \"Invalid {$type} type. Only {$validExtensionNameList} {$type} type are allowed to upload\";\n    }\n\n    /**\n     * If location is set to db then return the image as blob string\n     * Otherwise save the image in the desired location\n     */\n    if($location == \"db\") {\n        return array (\n            \"success\"       => true,\n            \"imageType\"     => $_FILES[$fileInputName][\"type\"],\n            \"blobString\"    => file_get_contents($_FILES[$fileInputName][\"tmp_name\"])\n        );\n    }\n\n}\n\n/**\n * Return modal header\n * \n * @since 0.1\n * \n * @param string    $title  Title of the modal\n * @param string    $action form action of the form\n * @param string    $formId Optional form id. Default is modalForm\n * \n * @return string|html  return the title with modal header and form\n */\nfunction modal_header(\n    string $title, \n    string $action,\n    string $formId = \"modalForm\"\n    ) {\n    echo '\n        <div class=\"modal-header\">\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <h4 class=\"modal-title\">'. __($title) .'</h4>\n        </div> <!-- modal-header -->\n\n        <form method=\"post\" role=\"form\" id=\"'. $formId .'\" action=\"'.$action.'\"  enctype=\"multipart/form-data\">\n\n            <div class=\"modal-body\">    \n    ';\n}\n\n/**\n * Return modal footer\n * \n * @since 0.1\n * \n * @param string    $title  Title of the modal\n * \n * @return string|html  return the title with modal header and form\n */\nfunction modal_footer(\n    string $saveButton = \"Save changes\"\n    ) {\n    \n    echo '\n            </div> <!-- modal-body -->\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default pull-left\" data-dismiss=\"modal\">Close</button>\n                <button id=\"jqAjaxButton\" type=\"submit\" class=\"btn btn-primary\">'. __($saveButton) .'</button>\n            </div> <!-- modal-footer -->\n        </form>\n    ';\n}\n\n\n/**\n * Show year option since $start year to current year.\n * \n * @since 0.1\n * \n * @param int    $start_year. From which year the option will appear.\n * @param int    $getSelectedYear Optional. Which year is will be selected\n * @param int    $increase_year   Optional. If we need increase year from current year.\n * \n * @return string   select option with year value\n */\nfunction option_year(\n    int $start_year, \n    int $getSelectedYear = NULL, \n    int $increase_year = NULL\n    ) {\n\t$now = date('Y') + $increase_year;\n\n\t for ($y=$now; $y>=$start_year; $y--) {\n\t\t $selectedYear = ($y == $getSelectedYear) ? \"selected\" : \"\";\n\t\techo '  <option '. $selectedYear .' value=\"' . $y . '\">' . __($y) . '</option>' . PHP_EOL;\n    }\n}\n\n\n\n/**\n * Function to spell money\n * \n */\nfunction spellNumbers($number)\n{\n    $number = abs((float)$number);\n    $decimal = round($number - ($no = floor($number)), 2) * 100;\n    $hundred = null;\n    $digits_length = strlen($no);\n    $i = 0;\n    $str = array();\n    $words = array(0 => '', 1 => 'one', 2 => 'two',\n        3 => 'three', 4 => 'four', 5 => 'five', 6 => 'six',\n        7 => 'seven', 8 => 'eight', 9 => 'nine',\n        10 => 'ten', 11 => 'eleven', 12 => 'twelve',\n        13 => 'thirteen', 14 => 'fourteen', 15 => 'fifteen',\n        16 => 'sixteen', 17 => 'seventeen', 18 => 'eighteen',\n        19 => 'nineteen', 20 => 'twenty', 30 => 'thirty',\n        40 => 'forty', 50 => 'fifty', 60 => 'sixty',\n        70 => 'seventy', 80 => 'eighty', 90 => 'ninety');\n    $digits = array('', 'hundred','thousand','lakh', 'crore');\n    while( $i < $digits_length ) {\n        $divider = ($i == 2) ? 10 : 100;\n        $number = floor($no % $divider);\n        $no = floor($no / $divider);\n        $i += $divider == 10 ? 1 : 2;\n        if ($number) {\n            $plural = (($counter = count($str)) && $number > 9) ? 's' : null;\n            $hundred = ($counter == 1 && $str[0]) ? ($decimal > 0) ? \"\" : \" and \" : null;\n            $str [] = ($number < 21) ? $words[$number].' '. $digits[$counter]. $plural.' '.$hundred:$words[floor($number / 10) * 10].' '.$words[$number % 10]. ' '.$digits[$counter].$plural.' '.$hundred;\n        } else $str[] = null;\n    }\n    $Takas = implode('', array_reverse($str));\n    $paysa = ($decimal > 0) ? \" and \" . ($words[floor($decimal/10) * 10] . \" \" . $words[$decimal % 10]) . ' Paysa' : '';\n    return ucfirst(($Takas ? $Takas . ' Taka' : '') . $paysa);\n}\n\n/**\n * -----------------------------------------------\n * Calculate Product having quantity\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $product. Which product do I need to calculate the quantity\n * \n * @return int   Number of having product\n */\nfunction calculateProductHavingQuantity(int $productId) {\n    global $table_prefeix;\n\n    return easySelect(\n        \"products\",\n        \"product_id, ( IF(purchase_item_quantity IS NULL, 0, SUM(purchase_item_quantity) + if(returns_products_quantity is null, 0, returns_products_quantity) ) - IF(sale_item_quantity IS NULL, 0, SUM(sale_item_quantity))) AS having_item_quantity\",\n        array (\n            \"left join (select purchase_item_product_id, sum(purchase_item_quantity) as purchase_item_quantity from {$table_prefeix}product_purchase_items where is_trash = 0 group by purchase_item_product_id) as {$table_prefeix}product_purchase_items on purchase_item_product_id = product_id\",\n            \"left join (select sale_item_product_id, sum(sale_item_quantity) as sale_item_quantity from {$table_prefeix}sale_items where is_trash = 0 group by sale_item_product_id) as {$table_prefeix}sale_items on sale_item_product_id = product_id\",\n            \"left join (select product_return_items_product_id, sum(product_return_items_products_quantity) as returns_products_quantity from {$table_prefeix}product_return_items where is_trash = 0 group by product_return_items_product_id) as returns_product on product_id = product_return_items_product_id\"\n        ),\n        array (\n            \"product_id \" =>  $productId\n        )\n    )['data'][0][\"having_item_quantity\"];\n}\n\n\n/**\n * -----------------------------------------------\n * Calculate Customer Balance, Due etc\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $customer_id. \n * \n * @return array    details with customer payment information.\n * \n * This function no longer required and will be deleted in near version\n */\nfunction getCustomerPaymentInfo_back(int $customer_id) {\n    global $table_prefeix;\n\n    easySelectD(\n        \"select customer_id, if(customer_opening_balance is null, 0, customer_opening_balance) as customer_opening_balance,\n            if(sales_grand_total is null, 0, sales_grand_total) as sales_grand_total, \n            if(returns_grand_total is null, 0, returns_grand_total) as returns_grand_total,\n            if(received_payments_amount is null, 0, received_payments_amount) as total_received_payments,\n            if(received_payments_bonus is null, 0, received_payments_bonus) as total_given_bonus\n        from {$table_prefeix}customers\n        left join (\n            select\n                sales_customer_id,\n                sum(sales_grand_total) as sales_grand_total\n            from {$table_prefeix}sales where is_trash = 0 group by sales_customer_id\n        ) as sales on customer_id = sales_customer_id\n        left join ( \n            select \n                product_returns_customer_id, \n                sum(product_returns_grand_total) as returns_grand_total \n            from {$table_prefeix}product_returns where is_trash = 0 group by product_returns_customer_id\n        ) as product_returns on customer_id = product_returns_customer_id\n        left join ( \n            select \n                received_payments_from, \n                sum(received_payments_amount) as received_payments_amount, \n                sum(received_payments_bonus) as received_payments_bonus \n            from {$table_prefeix}received_payments where is_trash = 0 group by received_payments_from\n        ) as {$table_prefeix}received_payments on customer_id = received_payments_from\n        where customer_id = {$customer_id}\"\n    );\n\n}\n\n\n/**\n * -----------------------------------------------\n * Update customer info\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $customer_id. \n * \n * @return bool True/False\n * \n * This function no longer required and will be delete and near version\n */\nfunction updateCustomerPaymentInfo_back(int $customer_id) {\n\n    $gcpi = getCustomerPaymentInfo_back($customer_id); // $gcpi = get customer payment info\n\n    $customer_total_paid = ( $gcpi[\"customer_opening_balance\"] ) + $gcpi[\"returns_grand_total\"] + $gcpi[\"total_received_payments\"] + $gcpi[\"total_given_bonus\"];\n\n    $customer_due = $gcpi[\"sales_grand_total\"] - $customer_total_paid;\n\n    $customer_balance = 0;\n\n    // Calculate customer balance\n    if ($customer_due < 0) {\n        $customer_due = 0;\n        $customer_balance = $customer_total_paid - $gcpi[\"sales_grand_total\"];\n    }\n    \n\n    $updateCustomerPaymentInfo = easyUpdate(\n        \"customers\",\n        array (\n            \"customer_balance\"  => $customer_balance,\n            \"customer_due\"      => $customer_due\n        ),\n        array (\n            \"customer_id\"   => $customer_id\n        )\n    );\n    \n    return $updateCustomerPaymentInfo;\n\n}\n\n/**\n * -----------------------------------------------\n * Update Accounts Payment Info\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $accounts_id. Which accounts balance we need to update\n * \n * @return bool True/False\n */\nfunction updateAccountBalance(int $accounts_id) {\n    global $table_prefeix;\n\n    // This safe_input function does not required in this case\n    //$accounts_id = safe_input($accounts_id);\n\n    // gad = getAccountsData\n    $gad = easySelectD(\"\n        select accounts_id, accounts_opening_balance, \n            if(loan_amount_sum is null, 0, loan_amount_sum) as loan_amount_sum,\n            if(capital_amounts_sum is null, 0, capital_amounts_sum) as capital_amounts_sum,\n            if(incomes_amount_sum is null, 0, incomes_amount_sum) as incomes_amount_sum,\n            if(payment_amount_sum is null, 0, payment_amount_sum) as payment_amount_sum,\n            if(transfer_send_amount_sum is null, 0, transfer_send_amount_sum) as transfer_send_amount_sum,\n            if(transfer_received_amount_sum is null, 0, transfer_received_amount_sum) as transfer_received_amount_sum,\n            if(received_payments_amount_sum is null, 0, received_payments_amount_sum) as received_payments_amount_sum,\n            if(advance_payment_amount_sum is null, 0, advance_payment_amount_sum) as advance_payment_amount_sum,\n            if(payment_incoming_return_amount_sum is null, 0, payment_incoming_return_amount_sum) as payment_incoming_return_amount_sum,\n            if(payment_outgoing_return_amount_sum is null, 0, payment_outgoing_return_amount_sum) as payment_outgoing_return_amount_sum,\n            if(journal_incoming_payment is null, 0, journal_incoming_payment) as journal_incoming_payment_sum,\n            if(journal_outgoing_payment is null, 0, journal_outgoing_payment) as journal_outgoing_payment_sum\n        from {$table_prefeix}accounts\n        left join ( \n            select \n                loan_paying_from, \n                sum(loan_amount) as loan_amount_sum \n            from {$table_prefeix}loan \n            where is_trash = 0 \n            group by loan_paying_from\n        ) as {$table_prefeix}loan on loan_paying_from = accounts_id\n        left join ( \n            select \n                capital_accounts, \n                sum(capital_amounts) as capital_amounts_sum \n            from {$table_prefeix}capital \n            where is_trash = 0 \n            group by capital_accounts \n        ) as capital on capital_accounts = accounts_id\n        left join ( \n            select \n                incomes_accounts_id, \n                sum(incomes_amount) as incomes_amount_sum \n            from {$table_prefeix}incomes \n            where is_trash = 0 \n            group by incomes_accounts_id \n        ) as incomes on incomes_accounts_id = accounts_id\n        left join ( \n            select \n                payment_from, \n                sum(payment_amount) as payment_amount_sum \n            from {$table_prefeix}payments \n            where is_trash = 0 and payment_status != 'Cancel' and ( payment_type != 'Advance Adjustment' or payment_type is null ) \n            group by payment_from \n        ) as payments on payment_from = accounts_id\n        left join ( \n            select \n                transfer_money_from, \n                sum(transfer_money_amount) as transfer_send_amount_sum \n            from {$table_prefeix}transfer_money \n            where is_trash = 0 \n            group by transfer_money_from \n        ) as transfer_money_send on transfer_money_from = accounts_id\n        left join ( \n            select \n                transfer_money_to, \n                sum(transfer_money_amount) as transfer_received_amount_sum \n            from {$table_prefeix}transfer_money \n            where is_trash = 0 \n            group by transfer_money_to \n        ) as transfer_money_received on transfer_money_to = accounts_id\n        left join ( \n            select \n                received_payments_accounts, \n                sum(received_payments_amount) as received_payments_amount_sum\n            from {$table_prefeix}received_payments \n            where is_trash = 0 and received_payments_type != 'Discounts' \n            group by received_payments_accounts\n        ) as {$table_prefeix}received_payments on received_payments_accounts = accounts_id\n        left join ( \n            select \n                sum(advance_payment_amount) as advance_payment_amount_sum, \n                advance_payment_pay_from \n            from {$table_prefeix}advance_payments \n            where is_trash = 0 \n            group by advance_payment_pay_from \n        ) as get_advance_payments on advance_payment_pay_from = accounts_id\n        left join ( \n            select \n                payments_return_accounts, \n                sum( case when payments_return_type = 'Incoming' then payments_return_amount end ) as payment_incoming_return_amount_sum,\n                sum( case when payments_return_type = 'Outgoing' then payments_return_amount end ) as payment_outgoing_return_amount_sum\n            from {$table_prefeix}payments_return \n            where is_trash = 0 \n            group by payments_return_accounts \n        ) as get_return_payments on payments_return_accounts = accounts_id  \n        left join ( \n            select \n                journal_records_accounts, \n                sum( case when journal_records_payments_type = 'Incoming' then journal_records_payment_amount end) as journal_incoming_payment,\n                sum( case when journal_records_payments_type = 'Outgoing' then journal_records_payment_amount end) as journal_outgoing_payment \n            from {$table_prefeix}journal_records \n            where is_trash = 0  \n            group by journal_records_accounts \n        ) as journal_incoming_records on journal_incoming_records.journal_records_accounts = accounts_id\n        where accounts_id = {$accounts_id}\"\n    )[\"data\"][0];\n\n\n    $accounts_balance = ( \n                            $gad[\"accounts_opening_balance\"] + $gad[\"capital_amounts_sum\"] + $gad[\"incomes_amount_sum\"] + $gad[\"transfer_received_amount_sum\"] + $gad[\"received_payments_amount_sum\"] + $gad[\"payment_incoming_return_amount_sum\"] + $gad[\"journal_incoming_payment_sum\"]\n                        ) - ( \n                            $gad[\"loan_amount_sum\"] + $gad[\"payment_amount_sum\"] + $gad[\"transfer_send_amount_sum\"] + $gad[\"advance_payment_amount_sum\"] + $gad[\"journal_outgoing_payment_sum\"] + $gad[\"payment_outgoing_return_amount_sum\"]\n                        ); \n\n    // Update Accounts Balance\n    easyUpdate(\n        \"accounts\",\n        array (\n            \"accounts_balance\"  => $accounts_balance\n        ),\n        array (\n            \"accounts_id\"  => $accounts_id\n        )\n    );\n\n}\n\n\n/**\n * -----------------------------------------------\n * Get Employee Payable Amount\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $emp_id. The employee ID\n * @param string  $salary_type. \n * \n * @return string   Employee Payable Amount\n */\nfunction getEmployeePayableAmount(int $emp_id, string $salary_type) {\n    global $table_prefeix;\n\n    $emp_opening_balance_name = \"emp_opening_\". strtolower($salary_type);\n\n    $empPayableAmount = easySelectD(\"\n        select \n            emp_id,\n            ( ( if(salary_amount_sum is null, 0, salary_amount_sum) - if(payment_items_amount_sum is null, 0, payment_items_amount_sum) ) + ({$emp_opening_balance_name}) ) as emp_payable_amount\n        from {$table_prefeix}employees\n        left join ( select salary_emp_id, salary_type, sum(salary_amount) as salary_amount_sum from {$table_prefeix}salaries where is_trash = 0 and salary_type='{$salary_type}' group by salary_emp_id ) as {$table_prefeix}salaries on salary_emp_id = emp_id\n        left join ( select payment_items_employee, sum(payment_items_amount) as payment_items_amount_sum from {$table_prefeix}payment_items where is_trash = 0 and payment_items_type='{$salary_type}' group by payment_items_employee ) as get_payments_items on payment_items_employee = emp_id\n        where emp_id = {$emp_id}\n    \")[\"data\"][0][\"emp_payable_amount\"];\n\n    // if salary type is salary then add the installment amount with payable amount\n    if($salary_type === \"salary\") {\n\n        $paidLoan = easySelectD(\"\n            select sum(loan_installment_paying_amount) as loan_paid_amount from {$table_prefeix}loan_installment where is_trash = 0 and loan_installment_provider = '{$emp_id}' group by loan_installment_provider\n        \");\n\n        $empPayableAmount -= $paidLoan ? $paidLoan[\"data\"][0][\"loan_paid_amount\"] : 0;\n    }\n\n    return $empPayableAmount;\n\n}\n\n\n/**\n * -----------------------------------------------\n * Get Accounts Balance\n * -----------------------------------------------\n * \n * @since 0.1\n * \n * @param int $accounts_id. \n * \n * @return string Accounts Balance \n */\nfunction accounts_balance(int $accounts_id) {\n\n    return easySelect(\n        \"accounts\",\n        \"accounts_balance\",\n        array(),\n        array (\n            \"accounts_id\"   => $accounts_id\n        )\n    )[\"data\"][0][\"accounts_balance\"];\n}\n\n/**\n * Insert Login information into database\n * \n * @since 0.1\n * \n * @param int @user_id The user id which we need to add login infomration\n * \n */\n\n function add_login_info(int $user_id) {\n    global $table_prefeix;\t// table prefix;\n    global $conn;\t\t\t// MySQL connection variable.\n\n    $user_ip = safe_input(get_ipaddr());\n    $user_aggent = safe_input($_SERVER['HTTP_USER_AGENT']);\n    \n    // Insert User information Into Database\n    $conn->query(\"INSERT INTO {$table_prefeix}users_login_history (login_users_id, login_ip, login_user_aggent) \n                        VALUES ('{$user_id}', '{$user_ip}', '{$user_aggent}')\");\n    \n}\n\nfunction get_ipaddr() {\n    return $_SERVER['REMOTE_ADDR'];\n}\n\n\nfunction get_ip_address(){\n    \n    foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key){\n        if (array_key_exists($key, $_SERVER) === true){\n            foreach (explode(',', $_SERVER[$key]) as $ip){\n                $ip = trim($ip); // just to be safe\n\n                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false){\n                    return $ip;\n                }\n            }\n        }\n    }\n}\n\n/**\n * Get Option value\n * \n * @since 0.1\n * \n * @param string $optionName The option name which we need to parse/\n * \n * @return string The option value\n * \n */\n\nfunction get_options(string $optionName) {\n    \n    defined('ALL_OPTIONS') ?: define(\"ALL_OPTIONS\", array_column(easySelect(\"options\")[\"data\"], 'option_value', 'option_name'));\n    \n    // If found, return the result\n    if( is_array(ALL_OPTIONS) and array_key_exists($optionName, ALL_OPTIONS) ) {\n        \n        return ALL_OPTIONS[$optionName];\n    \n    // Else return error msg\n    } else {\n\n        return false;\n\n    }\n}\n\n/**\n * Set Option value\n * \n * @since 0.1\n * \n * @param string $optionName The option name which we need to set\n * @param string $optionValue The Option Value\n * \n * @return string The option value\n * \n */\nfunction set_options(string $optionName, string $optionValue) {\n\n    $getOption = easySelect(\n        \"options\",\n        \"*\",\n        array(),\n        array (\n            \"option_name\"  => $optionName\n        )\n    );\n    \n    if($getOption !== false) {\n        \n        // Update option\n        easyUpdate(\n            \"options\",\n            array (\n                \"option_value\"  => $optionValue\n            ),\n            array (\n                \"option_name\" => $optionName\n            )\n        );\n\n    } else {\n\n        //Insert option\n        easyInsert(\n            \"options\",\n            array (\n                \"option_name\" => $optionName,\n                \"option_value\"  => $optionValue\n            )\n        );\n\n    }\n    \n}\n\n/**\n * Send HTTP requirest\n * \n * @since 0.1\n * \n * @param string $url           The URL where we need to send the request\n * @param string/array  $data   The information which we need to send. \n * \n * @return string   The output of the url\n */\nfunction send_http_request(string $url, $data) {\n\n    $rc = curl_init();\n\n    $curlPostData = array (\n        \"postData\"  => $data\n    );\n\n    $header = array (\n        \"signature: dskfmx09@435uk*435&*dkfnl@4$343$75dflgldk45dfs*df34918skj%34&4$384hsdf34094%4598df$^lk,m()dkfn3483lkfsd324-lkj5+45lk=dfsdlk\"\n    );\n\n    curl_setopt($rc, CURLOPT_URL, $url);\n    curl_setopt($rc, CURLOPT_POST, true);\n    curl_setopt($rc, CURLOPT_POSTFIELDS, $curlPostData);\n    curl_setopt($rc, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($rc, CURLOPT_HTTPHEADER, $header);\n    curl_setopt($rc, CURLOPT_CONNECTTIMEOUT, 5);\n\n    $output = curl_exec($rc);\n    curl_close($rc);\n\n    return $output;\n}\n\n\n/**\n * Format number to money\n * \n */\nfunction to_money(\n    float $number, \n    int $decimalPlaces = NULL,\n    string $decimalSeparator = \"\",\n\tstring $thousandSeparator = \"\",\n\tstring $currencySymbol = \"\",\n\tstring $currencySymbolPosition = \"\"\n    ) {\n      \n        $decimalPlaces = empty($decimalPlaces) ? get_options(\"decimalPlaces\") : $decimalPlaces;\n        $decimalSeparator = empty($decimalSeparator) ? get_options(\"decimalSeparator\") : $decimalSeparator;\n        $thousandSeparator = empty($thousandSeparator) ? get_options(\"thousandSeparator\") : $thousandSeparator;\n        $currencySymbol = empty($currencySymbol) ? get_options(\"currencySymbol\") : $currencySymbol;\n        $currencySymbolPosition = empty($currencySymbolPosition) ? get_options(\"currencySymbolPosition\") : $currencySymbolPosition;\n\n        $formatedNumber = number_format($number, $decimalPlaces, $decimalSeparator, $thousandSeparator);\n\n        if( strtolower($currencySymbolPosition) === \"right\" ) {\n            $formatedNumber = $formatedNumber . \" \" .  $currencySymbol;\n        } else {\n            $formatedNumber = $currencySymbol . \" \" . $formatedNumber;\n        }\n\n        return $formatedNumber;\n}\n\n\n/**\n * negative_value_is_allowed function\n * \n * @since 2.0.1\n * \n * @param int $accounts_id  The accounts id to check\n * @return bool if allow then return true otherwise false\n */\n\n function negative_value_is_allowed(int $accounts_id) {\n     $getData = easySelectA(array(\n         \"table\"    => \"accounts\",\n         \"fields\"   => \"negative_value_is_allow\",\n         \"where\"    => array(\n             \"accounts_id\"  => $accounts_id\n         )\n     ));\n\n     if(isset($getData[\"data\"][0][\"negative_value_is_allow\"]) and $getData[\"data\"][0][\"negative_value_is_allow\"] == 1) {\n         return true;\n     } else {\n         return false;\n     }\n }\n\n /**\n  * Function to minify html and js\n  */\n function sanitize_output($buffer) {\n\n    $search = array(\n        '/ \\/\\/.*\\n/',\n        '/\\>[^\\S ]+/s',     // strip whitespaces after tags, except space\n        '/[^\\S ]+\\</s',     // strip whitespaces before tags, except space\n        '/(\\s)+/s',         // shorten multiple whitespace sequences\n        '/<!--(.|\\s)*?-->/', // Remove HTML comments\n        '/\\/\\*(.|\\s)*?\\*\\//'\n    );\n    \n    $replace = array(\n        '',\n        '>',\n        '<',\n        '\\\\1',\n        '',\n        ''\n    );\n  \n    $buffer = preg_replace($search, $replace, $buffer);\n  \n    return $buffer;\n }\n\n\n /**\n  * Function to generate title\n  */\n  \nfunction get_title() {\n    \n    // Get the page titles\n    global $_SETTINGS;\n    \n    $currentUrl = transfer_protocol().explode(\"?\", $_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'])[0];\n\n    if( isset($_SETTINGS[\"PAGE_TITLE\"][$currentUrl]) ) {\n        return $_SETTINGS[\"PAGE_TITLE\"][$currentUrl];\n    } else {\n        return \"Not Found!\";\n    }\n\n}\n  \n  \n  /**\n   * Create getallheaders function if it is not exits\n   */\n  if (!function_exists('getallheaders')) {\n\n        function getallheaders() {\n            $headers = [];\n            foreach ($_SERVER as $name => $value) {\n                if (substr($name, 0, 5) == 'HTTP_') {\n                    $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;\n                }\n            }\n            return $headers;\n        }\n\n    }\n\n\n    /**\n     * Send SMS \n     * \n     * @since 2.0.1\n     * \n     * @param int    $number     The mobile where the sms will be sent\n     * @param string $msg        The message to be sent\n     * \n     * @return bool               Return true if sms sent successfull, otherwise false \n     */\n    function send_sms($number, $msg) {\n\n        global $table_prefeix;\n\n\t    $url = \"http://example.com/api.php\";\n        $data= array(\n            'username'=>\"username\",\n            'password'=>\"password\",\n            'number'=>$number,\n            'message'=>$msg\n        );\n\n        $ch = curl_init(); // Initialize cURL\n        curl_setopt($ch, CURLOPT_URL,$url);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        $smsresult = curl_exec($ch);\n        $p = explode(\"|\",$smsresult);\n        $sendstatus = $p[0];\n\n        if( $sendstatus == 1101) {\n\n            $insertSmsLog = \"INSERT INTO {$table_prefeix}sms_sender(\n                send_to,\n                send_time,\n                sms_text,\n                status,\n                send_by\n            ) VALUES \";\n\n            // explode comma seperated value\n            $numbers = explode(\",\", $number);\n\n            foreach($numbers as $num) {\n\n                $insertSmsLog .= \"\n                (\n                    '\". safe_input($num) .\"',\n                    '\". date(\"Y-m-d H:i:s\") .\"',\n                    '\". safe_input($msg) .\"',\n                    'sent',\n                    '\". safe_input($_SESSION[\"uid\"]) .\"'\n                ),\";\n  \n            }\n            \n            // Run the built query\n            runQuery(substr_replace($insertSmsLog, \";\", -1, 1));\n\n            return true; \n\n        } else {\n            return false;\n        }\n\n    }\n\n\n    /**\n     * Get the Product type\n     * \n     * @since 2.0.2\n     * \n     * @param int   $product_id     The product id to check the type\n     * \n     * @return bool,string          Return the multiple product type and if grouped product then return with the product id list\n     */\n\n    function product_type($pid) {\n\n        $return = array(\n            \"is_variable\"   => false,\n            \"is_grouped\"    => false,\n            \"is_bundle\"     => false,\n            \"is_normal\"     => false,\n            \"product_ids\"   => \"\"\n        );\n\n        $selectProduct = easySelectA(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_type\",\n            \"where\" => array(\n                \"product_id\"    => $pid\n            )\n        ));\n\n        if($selectProduct and $selectProduct[\"data\"][0][\"product_type\"] === \"Grouped\") {\n\n            $return[\"is_grouped\"] = true;\n\n            // select the grouped product list\n            $return[\"product_ids\"] = easySelectA(array(\n                \"table\"     => \"bg_product_items\",\n                \"fields\"    => \"group_concat(bg_item_product_id) as product_list\",\n                \"where\"     => array(\n                    \"bg_product_id\" => $pid\n                )\n            ))[\"data\"][0][\"product_list\"];\n\n        } elseif($selectProduct and $selectProduct[\"data\"][0][\"product_type\"] === \"Bundle\") {\n\n            $return[\"is_bundle\"] = true;\n\n            // select the grouped product list\n            $return[\"product_ids\"] = easySelectA(array(\n                \"table\"     => \"bg_product_items\",\n                \"fields\"    => \"group_concat(bg_item_product_id) as product_list\",\n                \"where\"     => array(\n                    \"bg_product_id\" => $pid\n                )\n            ))[\"data\"][0][\"product_list\"];\n\n        } elseif($selectProduct and $selectProduct[\"data\"][0][\"product_type\"] === \"Variable\") {\n            \n            $return[\"is_variable\"] = true;\n\n        } else {\n\n            $return[\"is_normal\"] = true;\n\n        }\n\n       \n        return $return;\n\n\n    }\n\n    /**\n     * Check if the current user is biller or not\n     */\n    function is_biller() {\n\n        if ( isset($_SESSION['sid']) and isset($_SESSION['aid']) and isset($_SESSION['wid']) ) {\n            return true;\n        } else {\n            return false; \n        }\n\n    }\n\n    /**\n     * Payment reference Generator\n     * @since 2.1.1\n     * \n     * @param string $type the reference type to generate\n     * \n     * @return string the full reference\n     */\n    function payment_reference(string $type) {\n\n        // Default Referense Format\n        $referenceFormat = \"SALARY_PAY\";\n        if($type === \"bill\") {\n            $referenceFormat = \"BILL_PAY\";\n        }\n\n        $paymentReferences = \"{$referenceFormat}/{$_SESSION['uid']}/\";\n\n        // Select last payment references\n        $selectPaymentReference = easySelect(\n            \"payments\",\n            \"payment_reference\",\n            array(),\n            array (\n                \"payment_made_by\"   => $_SESSION['uid'],\n                \" AND payment_reference LIKE '{$referenceFormat}%'\",\n                \" AND payment_reference is not null\"\n            ),\n            array (\n                \"payment_id\" => \"DESC\"\n            ),\n            array (\n                \"start\" => 0,\n                \"length\" => 1\n            )\n        );\n\n        // check if there is minimum one records\n        if($selectPaymentReference) {\n            $getLastReferenceNo = (int)explode($paymentReferences, $selectPaymentReference[\"data\"][0][\"payment_reference\"])[1];\n            return $paymentReferences . ($getLastReferenceNo+1);\n\n        } else {\n            return \"{$paymentReferences}1\";\n        }\n\n    }\n\n\n    /**\n     * Translator function\n     * \n     * @since 2.1.1\n     * \n     * Example code: echo __('You have %1$d unread message and you were last visit %2$s days ago', 120, 5);\n     * \n     * Will be written latter \n     */\n    function __() {\n    \n        // Get arguments\n        $argc = func_get_args();\n        $total_arg = func_num_args();\n\n        // Get the string to be translated and convert to lower case\n        // $formated_text = strtolower($argc[0]); // Will Test it later\n        $formated_text = $argc[0];\n    \n        static $lang_pack = array(\n            \"global\"    => array(),\n            \"index\"     => array()\n        );\n\n        // Get the Language pack name\n        if(empty($lang_pack[\"index\"]) and isset($_COOKIE[\"lang\"])) {\n            \n            $langName = $_COOKIE[\"lang\"];\n\n            $langFile = DIR_LANG . $langName . \".php\";\n\n            // Check if the language file exists\n            if( file_exists($langFile) ) {\n                \n                require $langFile;\n\n                // Get the language array, change all keys to lower case and aissign to $lang_pack variable\n                // $lang_pack = isset($$langName[\"trdata\"]) ? array_change_key_case($$langName[\"trdata\"]) : array(); // Will test it later\n                $lang_pack[\"index\"] = isset($$langName[\"trDataIndex\"]) ? $$langName[\"trDataIndex\"] : array();\n                $lang_pack[\"global\"] = isset($$langName[\"trDataGlobal\"]) ? $$langName[\"trDataGlobal\"] : array();\n                \n            }\n\n        }\n        \n\n        $translations = \"\"; // All translation will store here\n        \n        if($total_arg  === 1 and !isset($lang_pack[\"index\"][$formated_text]) ) {\n    \n            $translations = $formated_text;\n    \n        } else if( $total_arg === 1 and isset($lang_pack[\"index\"][$formated_text]) ) {\n    \n            $translations = $lang_pack[\"index\"][$formated_text];\n    \n        } else if ( !isset($lang_pack[\"index\"][$formated_text]) ) {\n    \n            $translations = vsprintf($formated_text, array_splice($argc, 1));\n    \n        } else {\n    \n            // Text translation\n            $translations = vsprintf($lang_pack[\"index\"][$formated_text], array_splice($argc, 1));\n    \n        }\n\n        // English Numbers, Months, Weeks Translation to other language\n        $translations = empty($translations) ? $translations : strtr($translations, $lang_pack[\"global\"]);\n\n        // Return the translation\n        return $translations;\n        \n    }\n\n    /**\n     * Return error message with translation\n     */\n    function _e(...$args){\n\n        echo \"<div class='alert alert-danger'>\" . __(...$args) . \"</div>\";\n    }\n\n    /**\n     * Return success msg with translation\n     */\n    function _s(...$args){\n        echo \"<div class='alert alert-success'>\" . __(...$args) . \"</div>\";\n    }\n\n    //\n    function create_log(string $msg, array $debug_backtrace = array(), string $logFile = \"error.log\") {\n\n        // Get the debug backtrace\n        if(count($debug_backtrace) > 0) {\n            \n            $debug_backtrace = $debug_backtrace[0];\n\n        } else {\n            $debug_backtrace = debug_backtrace()[0];\n        }\n\n        // If error msg not empty\n        if(!empty($msg)) {\n\n            $fp = fopen(DIR_BASE . $logFile, \"a\");\n            fwrite($fp, date(\"Y-m-d H:i:s\") . \" {$msg}. {$debug_backtrace['file']}, Line {$debug_backtrace['line']} \\n\");\n            fclose($fp);\n        }\n\n    }\n\n\n    /**\n     * \n     * Product filters\n     */\n    function load_product_filters($id=\"\") {\n\n\n        static $filters = array();\n        $filters[\"category\"] = '<select id=\"productCategoryFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productCategoryList\">\n                                    <option value=\"\">'. __(\"All Category\") . '</option>';\n\n                                    if(!empty(get_options(\"defaultProductCategory\"))) {\n\n                                        $categories = easySelectA(array(\n                                            \"table\"     => \"product_category\",\n                                            \"where\"     => array(\n                                                \"category_id\"  => get_options(\"defaultProductCategory\")\n                                            )\n                                        ))[\"data\"][0];\n\n                                        $filters[\"category\"] .= '<option selected value=\"'. $categories[\"category_id\"] .'\">'. $categories[\"category_name\"] . '</option>';\n\n                                    }\n                                    \n        $filters[\"category\"] .= '</select>';\n        \n        $filters[\"brand\"]    = '<select id=\"productBrandFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productBrandList\">\n                                    <option value=\"\">'. __(\"All Brand\") .'</option>';\n        $filters[\"brand\"]   .= empty(get_options(\"defaultProductBrand\")) ?: \"<option selected value=\". get_options(\"defaultProductBrand\") .\">\". get_options(\"defaultProductBrand\") .\"</option>\";\n        $filters[\"brand\"]   .=  '</select>';\n\n        $filters[\"generic\"]  = '<select id=\"productGenericFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productGenericList\">\n                                    <option value=\"\">'. __(\"All Generic\") .'</option>';\n        $filters[\"generic\"]   .= empty(get_options(\"defaultProductGeneric\")) ?: \"<option selected value=\". get_options(\"defaultProductGeneric\") .\">\". get_options(\"defaultProductGeneric\") .\"</option>\";\n        $filters[\"generic\"]  .= '</select>';\n        \n        $filters[\"edition\"]  = '<select style=\"width:100%;\" id=\"productEditionFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=productEditionList\">\n                                    <option value=\"\">'. __(\"All Editions...\") .'</option>';\n        $filters[\"edition\"]   .= empty(get_options(\"defaultProductEdition\")) ?: \"<option selected value=\". get_options(\"defaultProductEdition\") .\">\". get_options(\"defaultProductEdition\") .\"</option>\";\n        $filters[\"edition\"] .= '</select>';\n\n        $filters[\"author\"]  = '<select id=\"productAuthorFilter'.$id.'\" class=\"form-control select2Ajax\" select2-ajax-url=\"'. full_website_address() .'/info/?module=select2&page=authorList\">\n                                <option value=\"\">'. __(\"All Author\") .'</option>\n                            </select>';\n        \n        \n        // Get product filter options\n        $getFilter = unserialize(get_options(\"defaultProductFilter\"));\n\n        // Calculate total column\n        $col = round(12 / count($getFilter));\n\n        foreach($getFilter as $fKey => $fValue) {\n\n            echo '<div class=\"col-md-'. $col .'\">\n                    <div class=\"form-group\">'.\n                        $filters[$fValue]\n                    .'</div>\n                </div>';\n\n        }\n\n\n    }\n\n    function set_local_storage($name, $value) {\n\n        echo \"<script>\n                localStorage.setItem('{$name}', '{$value}');\n            </script>\";\n\n    }\n\n\n/**\n * Generate nearest unit quantity \n * \n * @since 1.00\n * \n * @param number|init $product_id the product which to check\n * @param null|bool|int|float|string $qty The quantity\n * @param string      $unit The unit name\n * \n */\nfunction near_unit_qty($product_id, $qty, $unit) {\n\n    global $table_prefeix;\n\n    $getData = easySelectA(array(\n        \"table\"     => \"products as whereProduct\",\n        \"fields\"    => \"joinProduct.product_unit as product_unit, equal_unit_qnt, base_qnt\",\n        \"join\"      => array(\n            \"left join {$table_prefeix}products as joinProduct on joinProduct.product_name = whereProduct.product_name\",\n            \"left join {$table_prefeix}product_units on unit_name = joinProduct.product_unit\"\n        ),\n        \"where\"     => array(\n            \"joinProduct.is_trash = 0 and joinProduct.product_unit is not null and whereProduct.product_id\" => $product_id\n        ),\n        \"orderby\"   => array(\n            \"base_qnt\"  => \"DESC\"\n        )\n    ));\n    \n\n    if($getData !== false) {\n\n        $totalBaseQty = $qty;\n        $remainQty = 0;\n        $finalUnitName = \"\";\n        $finalQtyBasedOnUnit = 0;\n        \n        // Generate the base qty based on unit\n        foreach($getData[\"data\"] as $pKey => $pVal ) {\n        \n            if( $pVal[\"product_unit\"] === $unit) {\n        \n                $totalBaseQty *= $pVal[\"base_qnt\"];\n                break;\n        \n            }\n        \n        }\n        \n        // Now get the unit which base_qnt is grater then or equal to unitDevider\n        foreach($getData[\"data\"] as $pKey => $pVal ) {\n        \n            if( $pVal[\"base_qnt\"] <= $totalBaseQty) {\n        \n                $finalUnitName = $pVal[\"product_unit\"];\n                $remainQty = ($totalBaseQty % $pVal[\"base_qnt\"]);\n                $finalQtyBasedOnUnit = ($totalBaseQty - $remainQty) / $pVal[\"base_qnt\"];\n                break;\n        \n            }\n        \n        }\n\n\n        return $finalQtyBasedOnUnit . \" \" . $finalUnitName . ( $remainQty > 0 ? \", \" . near_unit_qty($product_id, $remainQty, $unit) : \"\");\n\n    } else {\n\n        return $qty . \" \" . $unit;\n\n    }\n\n\n}\n\n\n/**\n * Add module menu after specific index\n * \n * @since 1.0.0\n * \n * @param array $menu_array the menu array to be included\n * @param number|init $position The position, where after the module menu will be included\n */\nfunction add_menu(array $menu_array=array(), $position=\"\") {\n\n    global $default_menu;\n\n\n    // If the position is set then add the menu in speicifc position\n    if($position !== \"\") {\n\n        // Split the default menu in specific position with keeping the key/index name\n\n        // Get the first key\n        $first_key = array_key_first($menu_array);\n\n        // If the first key is set in the menu\n        if( isset($default_menu[$first_key]) ) {\n\n            $position = $position+4;\n            $beforePostion = array_slice($default_menu[$first_key], 0, $position, true);\n            $afterPostion = array_slice($default_menu[$first_key], $position, count($default_menu[$first_key]) - $position, true);\n\n            // Merge all menus into one\n            $default_menu[$first_key] = array_merge($beforePostion, $menu_array[$first_key], $afterPostion);\n\n        } else {\n\n            $beforePostion = array_slice($default_menu, 0, $position, true);\n            $afterPostion = array_slice($default_menu, $position, count($default_menu) - $position, true);\n\n            // Merge all menus into one\n            $default_menu = array_merge($beforePostion, $menu_array, $afterPostion);\n\n        }\n        \n\n        //print_r($default_menu);\n        \n\n    } else {\n\n        // Otherwise add the in last\n        $default_menu = array_merge($default_menu, $menu_array);\n\n    }\n    \n}\n\n/**\n * Add permission\n */\nfunction add_permission(array $permission) {\n\n    global $defaultPermission; \n    $defaultPermission = array_merge($defaultPermission, $permission);\n\n}\n\n/**\n * Get the first comment from a file\n * \n * @since 1.0.0\n * \n * @param string $file The file name with location\n * \n * @return string The comments\n */\nfunction getFirstComment($file) {\n    \n    $get_comments = array_filter(\n        token_get_all( file_get_contents($file)), function($comment) {\n            return $comment[0] == T_COMMENT || $comment[0] == T_DOC_COMMENT;\n        }\n    );\n\n    return array_shift($get_comments)[1];\n}\n\n\n/**\n * Find module's Name, URI, Version, Description, Author, Author URI, License etc\n * \n * @since 1.0.0\n * \n * @param string $find The string to find\n * @param string $comment The comment to find in\n * \n * @return string Return the value\n */\nfunction find_modules($find, $comment) {\n\n    $moduleInfo = preg_split(\"/\".$find.\":/i\", $comment);\n\n    if( isset($moduleInfo[1]) ) {\n        \n        return trim(explode(\"\\n\", $moduleInfo[1])[0]);\n\n    } else {\n        return \"\";\n    }\n\n}\n\n\n/**\n * Create array_key_first function if it is not exits\n */\nif (!function_exists('array_key_first')) {\n\n    function array_key_first(array $array) {\n        \n        foreach($array as $firstKey => $firstValue) {\n            return $firstKey;\n            break;\n        }\n        \n    }\n\n}\n\n/**\n * Converting times to times ago\n * Taken from: https://stackoverflow.com/a/18602474\n * \n * and Modified\n */\nfunction time_elapsed_string($datetime, $level = 1) {\n    $now = new DateTime;\n    $ago = new DateTime($datetime);\n    $diff = $now->diff($ago);\n\n    $diff->w = floor($diff->d / 7);\n    $diff->d -= $diff->w * 7;\n\n    $string = array(\n        'y' => 'year',\n        'm' => 'month',\n        'w' => 'week',\n        'd' => 'day',\n        'h' => 'hour',\n        'i' => 'minute',\n        's' => 'second',\n    );\n    foreach ($string as $k => &$v) {\n        if ($diff->$k) {\n            $v = $diff->$k . ' ' . $v . ($diff->$k > 1 ? 's' : '');\n        } else {\n            unset($string[$k]);\n        }\n    }\n\n    $string = array_slice($string, 0, $level);\n    return $string ? implode(', ', $string) . ' ago' : 'just now';\n}\n\n?>"], "filenames": ["core/config.php", "core/functions.php"], "buggy_code_start_loc": [53, 1467], "buggy_code_end_loc": [68, 1586], "fixing_code_start_loc": [53, 1467], "fixing_code_end_loc": [91, 1565], "type": "CWE-434", "message": "Unrestricted Upload of File with Dangerous Type in GitHub repository unilogies/bumsys prior to v1.0.3-beta.", "other": {"cve": {"id": "CVE-2023-0455", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-26T22:15:26.083", "lastModified": "2023-06-01T17:15:09.687", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Unrestricted Upload of File with Dangerous Type in GitHub repository unilogies/bumsys prior to v1.0.3-beta."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bumsys_project:bumsys:1.0.0:beta:*:*:*:*:*:*", "matchCriteriaId": "85284323-E1F7-4DD3-ACE0-BEF645A98467"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bumsys_project:bumsys:1.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "7151AD95-D208-4251-B074-8920465566AC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:bumsys_project:bumsys:1.0.2:beta:*:*:*:*:*:*", "matchCriteriaId": "C4C4B022-F7E0-4E37-8A5B-B4D72AEF52ED"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/172674/Bumsys-Business-Management-System-1.0.3-beta-Shell-Upload.html", "source": "security@huntr.dev"}, {"url": "https://github.com/unilogies/bumsys/commit/a5beff7868ab63bf4ec752a1102f8da033c66b28", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b5e9c578-1a33-4745-bf6b-e7cdb89793f7", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/unilogies/bumsys/commit/a5beff7868ab63bf4ec752a1102f8da033c66b28"}}