{"buggy_code": ["import {insertText} from './text'\n\nexport function install(el: HTMLElement): void {\n  el.addEventListener('dragover', onDragover)\n  el.addEventListener('drop', onDrop)\n  el.addEventListener('paste', onPaste)\n}\n\nexport function uninstall(el: HTMLElement): void {\n  el.removeEventListener('dragover', onDragover)\n  el.removeEventListener('drop', onDrop)\n  el.removeEventListener('paste', onPaste)\n}\n\nfunction onDrop(event: DragEvent) {\n  const transfer = event.dataTransfer\n  if (!transfer) return\n  if (hasFile(transfer)) return\n\n  const textToPaste = generateText(transfer)\n  if (!textToPaste) return\n\n  event.stopPropagation()\n  event.preventDefault()\n\n  const field = event.currentTarget\n  if (field instanceof HTMLTextAreaElement) {\n    insertText(field, textToPaste)\n  }\n}\n\nfunction onDragover(event: DragEvent) {\n  const transfer = event.dataTransfer\n  if (transfer) transfer.dropEffect = 'copy'\n}\n\nfunction onPaste(event: ClipboardEvent) {\n  if (!event.clipboardData) return\n\n  const textToPaste = generateText(event.clipboardData)\n  if (!textToPaste) return\n\n  event.stopPropagation()\n  event.preventDefault()\n\n  const field = event.currentTarget\n  if (field instanceof HTMLTextAreaElement) {\n    insertText(field, textToPaste)\n  }\n}\n\nfunction hasFile(transfer: DataTransfer): boolean {\n  return Array.from(transfer.types).indexOf('Files') >= 0\n}\n\nfunction columnText(column: Element): string {\n  const noBreakSpace = '\\u00A0'\n  const text = (column.textContent || '').trim().replace(/\\|/g, '\\\\|').replace(/\\n/g, ' ')\n  return text || noBreakSpace\n}\n\nfunction tableHeaders(row: Element): string[] {\n  return Array.from(row.querySelectorAll('td, th')).map(columnText)\n}\n\nfunction tableMarkdown(node: Element): string {\n  const rows = Array.from(node.querySelectorAll('tr'))\n\n  const firstRow = rows.shift()\n  if (!firstRow) return ''\n  const headers = tableHeaders(firstRow)\n  const spacers = headers.map(() => '--')\n  const header = `${headers.join(' | ')}\\n${spacers.join(' | ')}\\n`\n\n  const body = rows\n    .map(row => {\n      return Array.from(row.querySelectorAll('td')).map(columnText).join(' | ')\n    })\n    .join('\\n')\n\n  return `\\n${header}${body}\\n\\n`\n}\n\nfunction generateText(transfer: DataTransfer): string | undefined {\n  if (Array.from(transfer.types).indexOf('text/html') === -1) return\n\n  const html = transfer.getData('text/html')\n  if (!/<table/i.test(html)) return\n\n  const el = document.createElement('div')\n  el.innerHTML = html\n  let table = el.querySelector('table')\n  table = !table || table.closest('[data-paste-markdown-skip]') ? null : table\n  if (!table) return\n\n  const formattedTable = tableMarkdown(table)\n\n  return html.replace(/<meta.*?>/, '').replace(/<table[.\\S\\s]*<\\/table>/, `\\n${formattedTable}`)\n}\n", "import subscribe from '../dist/index.esm.js'\n\ndescribe('paste-markdown', function () {\n  describe('installed on textarea', function () {\n    let subscription, textarea\n    beforeEach(function () {\n      document.body.innerHTML = `\n        <textarea data-paste-markdown></textarea>\n      `\n\n      textarea = document.querySelector('textarea[data-paste-markdown]')\n      subscription = subscribe(textarea)\n    })\n\n    afterEach(function () {\n      subscription.unsubscribe()\n      document.body.innerHTML = ''\n    })\n\n    it('turns image uris into markdown', function () {\n      paste(textarea, {'text/uri-list': 'https://github.com/github.png\\r\\nhttps://github.com/hubot.png'})\n      assert.include(textarea.value, '![](https://github.com/github.png)\\n\\n![](https://github.com/hubot.png)')\n    })\n\n    it('turns html tables into markdown', function () {\n      const data = {\n        'text/html': `\n        <table>\n          <thead><tr><th>name</th><th>origin</th></tr></thead>\n          <tbody>\n            <tr><td>hubot</td><td>github</td></tr>\n            <tr><td>bender</td><td>futurama</td></tr>\n          </tbody>\n        </table>\n        `\n      }\n      paste(textarea, data)\n      assert.include(textarea.value, 'name | origin\\n-- | --\\nhubot | github\\nbender | futurama')\n    })\n\n    it('retains text around tables', async function () {\n      const data = {\n        'text/html': `\n        <p>Here is a cool table</p>\n        <table>\n          <thead><tr><th>name</th><th>origin</th></tr></thead>\n          <tbody>\n            <tr><td>hubot</td><td>github</td></tr>\n            <tr><td>bender</td><td>futurama</td></tr>\n          </tbody>\n        </table>\n        <p>Very cool</p>\n        `\n      }\n\n      paste(textarea, data)\n      assert.equal(\n        textarea.value.trim(),\n        // eslint-disable-next-line github/unescaped-html-literal\n        '<p>Here is a cool table</p>\\n        \\n\\nname | origin\\n-- | --\\nhubot | github\\nbender | futurama\\n\\n\\n        <p>Very cool</p>'\n      )\n    })\n\n    it('rejects layout tables', function () {\n      const data = {\n        'text/html': `\n        <table data-paste-markdown-skip>\n          <thead><tr><th>name</th><th>origin</th></tr></thead>\n          <tbody>\n            <tr><td>hubot</td><td>github</td></tr>\n            <tr><td>bender</td><td>futurama</td></tr>\n          </tbody>\n        </table>\n        `\n      }\n      paste(textarea, data)\n\n      // Synthetic paste events don't manipulate the DOM. A empty textarea\n      // means that the event handler didn't fire and normal paste happened.\n      assert.equal(textarea.value, '')\n    })\n\n    it('accepts x-gfm', function () {\n      paste(textarea, {'text/plain': 'hello', 'text/x-gfm': '# hello'})\n      assert.include(textarea.value, '# hello')\n    })\n  })\n})\n\nfunction paste(textarea, data) {\n  const dataTransfer = new DataTransfer()\n  for (const key in data) {\n    dataTransfer.setData(key, data[key])\n  }\n  const event = new ClipboardEvent('paste', {\n    clipboardData: dataTransfer\n  })\n  textarea.dispatchEvent(event)\n}\n"], "fixing_code": ["import {insertText} from './text'\n\nexport function install(el: HTMLElement): void {\n  el.addEventListener('dragover', onDragover)\n  el.addEventListener('drop', onDrop)\n  el.addEventListener('paste', onPaste)\n}\n\nexport function uninstall(el: HTMLElement): void {\n  el.removeEventListener('dragover', onDragover)\n  el.removeEventListener('drop', onDrop)\n  el.removeEventListener('paste', onPaste)\n}\n\nfunction onDrop(event: DragEvent) {\n  const transfer = event.dataTransfer\n  if (!transfer) return\n  if (hasFile(transfer)) return\n\n  const textToPaste = generateText(transfer)\n  if (!textToPaste) return\n\n  event.stopPropagation()\n  event.preventDefault()\n\n  const field = event.currentTarget\n  if (field instanceof HTMLTextAreaElement) {\n    insertText(field, textToPaste)\n  }\n}\n\nfunction onDragover(event: DragEvent) {\n  const transfer = event.dataTransfer\n  if (transfer) transfer.dropEffect = 'copy'\n}\n\nfunction onPaste(event: ClipboardEvent) {\n  if (!event.clipboardData) return\n\n  const textToPaste = generateText(event.clipboardData)\n  if (!textToPaste) return\n\n  event.stopPropagation()\n  event.preventDefault()\n\n  const field = event.currentTarget\n  if (field instanceof HTMLTextAreaElement) {\n    insertText(field, textToPaste)\n  }\n}\n\nfunction hasFile(transfer: DataTransfer): boolean {\n  return Array.from(transfer.types).indexOf('Files') >= 0\n}\n\nfunction columnText(column: Element): string {\n  const noBreakSpace = '\\u00A0'\n  const text = (column.textContent || '').trim().replace(/\\|/g, '\\\\|').replace(/\\n/g, ' ')\n  return text || noBreakSpace\n}\n\nfunction tableHeaders(row: Element): string[] {\n  return Array.from(row.querySelectorAll('td, th')).map(columnText)\n}\n\nfunction tableMarkdown(node: Element): string {\n  const rows = Array.from(node.querySelectorAll('tr'))\n\n  const firstRow = rows.shift()\n  if (!firstRow) return ''\n  const headers = tableHeaders(firstRow)\n  const spacers = headers.map(() => '--')\n  const header = `${headers.join(' | ')}\\n${spacers.join(' | ')}\\n`\n\n  const body = rows\n    .map(row => {\n      return Array.from(row.querySelectorAll('td')).map(columnText).join(' | ')\n    })\n    .join('\\n')\n\n  return `\\n${header}${body}\\n\\n`\n}\n\nfunction generateText(transfer: DataTransfer): string | undefined {\n  if (Array.from(transfer.types).indexOf('text/html') === -1) return\n\n  const html = transfer.getData('text/html')\n  if (!/<table/i.test(html)) return\n\n  const parser = new DOMParser()\n  const parsedDocument = parser.parseFromString(html, 'text/html')\n\n  let table = parsedDocument.querySelector('table')\n  table = !table || table.closest('[data-paste-markdown-skip]') ? null : table\n  if (!table) return\n\n  const formattedTable = tableMarkdown(table)\n\n  return html.replace(/<meta.*?>/, '').replace(/<table[.\\S\\s]*<\\/table>/, `\\n${formattedTable}`)\n}\n", "import subscribe from '../dist/index.esm.js'\n\ndescribe('paste-markdown', function () {\n  describe('installed on textarea', function () {\n    let subscription, textarea\n    beforeEach(function () {\n      document.body.innerHTML = `\n        <textarea data-paste-markdown></textarea>\n      `\n\n      textarea = document.querySelector('textarea[data-paste-markdown]')\n      subscription = subscribe(textarea)\n    })\n\n    afterEach(function () {\n      subscription.unsubscribe()\n      document.body.innerHTML = ''\n    })\n\n    it('turns image uris into markdown', function () {\n      paste(textarea, {'text/uri-list': 'https://github.com/github.png\\r\\nhttps://github.com/hubot.png'})\n      assert.include(textarea.value, '![](https://github.com/github.png)\\n\\n![](https://github.com/hubot.png)')\n    })\n\n    it('turns html tables into markdown', function () {\n      const data = {\n        'text/html': `\n        <table>\n          <thead><tr><th>name</th><th>origin</th></tr></thead>\n          <tbody>\n            <tr><td>hubot</td><td>github</td></tr>\n            <tr><td>bender</td><td>futurama</td></tr>\n          </tbody>\n        </table>\n        `\n      }\n      paste(textarea, data)\n      assert.include(textarea.value, 'name | origin\\n-- | --\\nhubot | github\\nbender | futurama')\n    })\n\n    it(\"doesn't execute JavaScript\", async function () {\n      let alertCalled = false\n      window.secretFunction = function () {\n        alertCalled = true\n      }\n      const data = {\n        'text/html': `XSS<img/src/onerror=secretFunction()><table>`\n      }\n      paste(textarea, data)\n\n      await wait(100)\n\n      assert.isFalse(alertCalled, 'A XSS was possible as alert was called')\n    })\n\n    it('retains text around tables', async function () {\n      const data = {\n        'text/html': `\n        <p>Here is a cool table</p>\n        <table>\n          <thead><tr><th>name</th><th>origin</th></tr></thead>\n          <tbody>\n            <tr><td>hubot</td><td>github</td></tr>\n            <tr><td>bender</td><td>futurama</td></tr>\n          </tbody>\n        </table>\n        <p>Very cool</p>\n        `\n      }\n\n      paste(textarea, data)\n      assert.equal(\n        textarea.value.trim(),\n        // eslint-disable-next-line github/unescaped-html-literal\n        '<p>Here is a cool table</p>\\n        \\n\\nname | origin\\n-- | --\\nhubot | github\\nbender | futurama\\n\\n\\n        <p>Very cool</p>'\n      )\n    })\n\n    it('rejects layout tables', function () {\n      const data = {\n        'text/html': `\n        <table data-paste-markdown-skip>\n          <thead><tr><th>name</th><th>origin</th></tr></thead>\n          <tbody>\n            <tr><td>hubot</td><td>github</td></tr>\n            <tr><td>bender</td><td>futurama</td></tr>\n          </tbody>\n        </table>\n        `\n      }\n      paste(textarea, data)\n\n      // Synthetic paste events don't manipulate the DOM. A empty textarea\n      // means that the event handler didn't fire and normal paste happened.\n      assert.equal(textarea.value, '')\n    })\n\n    it('accepts x-gfm', function () {\n      paste(textarea, {'text/plain': 'hello', 'text/x-gfm': '# hello'})\n      assert.include(textarea.value, '# hello')\n    })\n  })\n})\n\nfunction paste(textarea, data) {\n  const dataTransfer = new DataTransfer()\n  for (const key in data) {\n    dataTransfer.setData(key, data[key])\n  }\n  const event = new ClipboardEvent('paste', {\n    clipboardData: dataTransfer\n  })\n  textarea.dispatchEvent(event)\n}\n\nfunction wait(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n"], "filenames": ["src/paste-markdown-table.ts", "test/test.js"], "buggy_code_start_loc": [90, 38], "buggy_code_end_loc": [93, 99], "fixing_code_start_loc": [90, 39], "fixing_code_end_loc": [94, 119], "type": "CWE-79", "message": "@github/paste-markdown is an npm package for pasting markdown objects. A self Cross-Site Scripting vulnerability exists in the @github/paste-markdown before version 0.3.4. If the clipboard data contains the string `<table>`, a **div** is dynamically created, and the clipboard content is copied into its **innerHTML** property without any sanitization, resulting in improper execution of JavaScript in the browser of the victim (the user who pasted the code). Users directed to copy text from a malicious website and paste it into pages that utilize this library are affected. This is fixed in version 0.3.4. Refer the to the referenced GitHub Advisory for more details including an example exploit.", "other": {"cve": {"id": "CVE-2021-37700", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-12T21:15:09.173", "lastModified": "2021-08-23T14:29:29.177", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "@github/paste-markdown is an npm package for pasting markdown objects. A self Cross-Site Scripting vulnerability exists in the @github/paste-markdown before version 0.3.4. If the clipboard data contains the string `<table>`, a **div** is dynamically created, and the clipboard content is copied into its **innerHTML** property without any sanitization, resulting in improper execution of JavaScript in the browser of the victim (the user who pasted the code). Users directed to copy text from a malicious website and paste it into pages that utilize this library are affected. This is fixed in version 0.3.4. Refer the to the referenced GitHub Advisory for more details including an example exploit."}, {"lang": "es", "value": "@github/paste-markdown es un paquete npm para pegar objetos markdown. Se presenta una vulnerabilidad de tipo Cross-Site Scripting en @github/paste-markdown versiones anteriores a 0.3.4. Si los datos del portapapeles contienen la cadena \"(table)\", se crea din\u00e1micamente un **div**, y el contenido del portapapeles es copiado en su propiedad **innerHTML** sin ning\u00fan tipo de saneo, resultando en una ejecuci\u00f3n inapropiada de JavaScript en el navegador de la v\u00edctima (el usuario que peg\u00f3 el c\u00f3digo). Est\u00e1n afectados los usuarios a los que se les indica que copien texto de un sitio web malicioso y lo peguen en p\u00e1ginas que usan esta biblioteca. Esto se ha corregido en la versi\u00f3n 0.3.4. Consulte el aviso de GitHub al que se hace referencia para obtener m\u00e1s detalles, incluido un ejemplo de explotaci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:paste-markdown_project:paste-markdown:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.3.4", "matchCriteriaId": "8C011892-0763-45BB-B8AF-DAC9819E4861"}]}]}], "references": [{"url": "https://github.com/github/paste-markdown/commit/32b7ea3f29ae8f256f9d19768387be42678ddf30", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/github/paste-markdown/releases/tag/v0.3.4", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/github/paste-markdown/security/advisories/GHSA-gpfj-4j6g-c4w9", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/@github/paste-markdown", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/github/paste-markdown/commit/32b7ea3f29ae8f256f9d19768387be42678ddf30"}}