{"buggy_code": ["<?php\n\n/* Copyright (c) 1998-2012 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once (\"./Services/Bookmarks/classes/class.ilBookmarkFolder.php\");\nrequire_once (\"./Services/Bookmarks/classes/class.ilBookmark.php\");\nrequire_once (\"./Services/Table/classes/class.ilTableGUI.php\");\n\n/**\n * GUI class for personal bookmark administration. It manages folders and bookmarks\n * with the help of the two corresponding core classes ilBookmarkFolder and ilBookmark.\n * Their methods are called in this User Interface class.\n * @author       Alex Killing <alex.killing@gmx.de>\n * @author       Manfred Thaler <manfred.thaler@endo7.com>\n * @version      $Id$\n * @ingroup      ServicesBookmarks\n * @ilCtrl_Calls ilBookmarkAdministrationGUI:\n */\nclass ilBookmarkAdministrationGUI\n{\n\t/**\n\t * @var ilCtrl\n\t */\n\tprotected $ctrl;\n\n\t/**\n\t * @var ilObjUser\n\t */\n\tprotected $user;\n\n\t/**\n\t * @var ilToolbarGUI\n\t */\n\tprotected $toolbar;\n\n\t/**\n\t * @var ilErrorHandling\n\t */\n\tprotected $error;\n\n\t/**\n\t * @var ilTabsGUI\n\t */\n\tprotected $tabs;\n\n\t/**\n\t * User Id\n\t * @var integer\n\t * @access public\n\t */\n\tvar $user_id;\n\n\t/**\n\t * ilias object\n\t * @var object ilias\n\t * @access public\n\t */\n\tvar $tpl;\n\tvar $lng;\n\n\tvar $tree;\n\tvar $id;\n\tvar $data;\n\tvar $textwidth = 100;\n\n\t/**\n\t * Constructor\n\t * @access    public\n\t * @param    integer        user_id (optional)\n\t */\n\tfunction __construct()\n\t{\n\t\tglobal $DIC;\n\n\t\t$this->user = $DIC->user();\n\t\t$this->toolbar = $DIC->toolbar();\n\t\t$this->error = $DIC[\"ilErr\"];\n\t\t$this->tabs = $DIC->tabs();\n\t\t$tpl = $DIC[\"tpl\"];\n\t\t$lng = $DIC->language();\n\t\t$ilCtrl = $DIC->ctrl();\n\t\t$ilUser = $DIC->user();\n\n//\t\t$tpl->enableAdvancedColumnLayout(true, false);\n\n\t\t$tpl->getStandardTemplate();\n\t\t\n\t\t//print_r($_SESSION[\"error_post_vars\"]);\n\t\t// if no bookmark folder id is given, take dummy root node id (that is 1)\n\t\t$this->id = (empty($_GET[\"bmf_id\"]))\n\t\t\t? 1\n\t\t\t: $_GET[\"bmf_id\"];\n\t\n\t\t// initiate variables\n\t\t$this->tpl   = $tpl;\n\t\t$this->lng   = $lng;\n\t\t$this->ctrl  = $ilCtrl;\n\t\t$this->ctrl->setParameter($this, \"bmf_id\", $this->id);\n\t\t$this->user_id = $ilUser->getId();\n\n\t\t$this->tree = new ilTree($this->user_id);\n\t\t$this->tree->setTableNames('bookmark_tree', 'bookmark_data');\n\t\t$this->root_id = $this->tree->readRootId();\n\n\t\t$this->lng->loadLanguageModule(\"bkm\");\n\t\t\n\t\t$this->mode = \"tree\";\n\t}\n\n\t/**\n\t * execute command\n\t */\n\tfunction executeCommand()\n\t{\n\t\t$next_class = $this->ctrl->getNextClass();\n\n\t\tswitch($next_class)\n\t\t{\n\t\t\tdefault:\n\t\t\t\t$cmd = $this->ctrl->getCmd(\"view\");\n\t\t\t\t$this->displayHeader();\n\t\t\t\t$this->$cmd();\n\t\t\t\tif($this->getMode() == 'tree')\n\t\t\t\t{\n\t\t\t\t\t$this->explorer();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\t$this->tpl->show(true);\n\t\treturn true;\n\t}\n\n\tfunction executeAction()\n\t{\n\t\tswitch($_POST[\"selected_cmd\"])\n\t\t{\n\t\t\tcase \"delete\":\n\t\t\t\t$this->delete();\n\t\t\t\tbreak;\n\t\t\tcase \"export\":\n\t\t\t\t$this->export();\n\t\t\t\tbreak;\n\t\t\tcase \"sendmail\":\n\t\t\t\t$this->sendmail();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->view();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * return display mode\n\t * flat or tree\n\t */\n\tfunction getMode()\n\t{\n\t\treturn $this->mode;\n\t}\n\n\t/**\n\t * output explorer tree with bookmark folders\n\t */\n\tfunction explorer()\n\t{\n\t\t$tpl = $this->tpl;\n\n\t\tinclude_once(\"./Services/Bookmarks/classes/class.ilBookmarkExplorerGUI.php\");\n\t\t$exp = new ilBookmarkExplorerGUI($this, \"explorer\");\n\t\tif (!$exp->handleCommand())\n\t\t{\n\t\t\t$tpl->setLeftNavContent($exp->getHTML());\n\t\t}\n\t}\n\n\n\t/**\n\t * display header and locator\n\t */\n\tfunction displayHeader()\n\t{\n\t\t// output locator\n\t\t$this->displayLocator();\n\n\t\t// output message\n\t\tif($this->message)\n\t\t{\n\t\t\tilUtil::sendInfo($this->message);\n\t\t}\n\t\tilUtil::infoPanel();\n\n\t\t$this->tpl->setTitle($this->lng->txt(\"bookmarks\"));\n\t}\n\n\t/*\n\t* display content of bookmark folder\n\t*/\n\tfunction view()\n\t{\t\t\n\t\t$ilToolbar = $this->toolbar;\n\t\t\n\t\tif($this->id > 0 && !$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\t\t\n\t\t$ilToolbar->addButton($this->lng->txt(\"bookmark_new\"), \n\t\t\t$this->ctrl->getLinkTarget($this, \"newFormBookmark\"));\n\t\t$ilToolbar->addButton($this->lng->txt(\"bookmark_folder_new\"), \n\t\t\t$this->ctrl->getLinkTarget($this, \"newFormBookmarkFolder\"));\n\n\t\t$objects = ilBookmarkFolder::getObjects($this->id);\n\n\t\tinclude_once 'Services/Bookmarks/classes/class.ilBookmarkAdministrationTableGUI.php';\n\t\t$table = new ilBookmarkAdministrationTableGUI($this);\n\t\t$table->setId('bookmark_adm_table');\t\t\n\t\t$table->setData($objects);\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $table->getHTML());\n\t}\n\n\t/**\n\t * output a cell in object list\n\t */\n\tfunction add_cell($val, $link = \"\")\n\t{\n\t\tif(!empty($link))\n\t\t{\n\t\t\t$this->tpl->setCurrentBlock(\"begin_link\");\n\t\t\t$this->tpl->setVariable(\"LINK_TARGET\", $link);\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t$this->tpl->touchBlock(\"end_link\");\n\t\t}\n\n\t\t$this->tpl->setCurrentBlock(\"text\");\n\t\t$this->tpl->setVariable(\"TEXT_CONTENT\", $val);\n\t\t$this->tpl->parseCurrentBlock();\n\t\t$this->tpl->setCurrentBlock(\"table_cell\");\n\t\t$this->tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * display locator\n\t */\n\tfunction displayLocator()\n\t{\n\t\t$lng = $this->lng;\n\n\t\tif(empty($this->id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->tpl->addBlockFile(\"LOCATOR\", \"locator\", \"tpl.locator.html\", \"Services/Locator\");\n\n\t\t$path = $this->tree->getPathFull($this->id);\n//print_r($path);\n\t\t$modifier = 1;\n\n\t\treturn;\n\t\t$this->tpl->setVariable(\"TXT_LOCATOR\", $this->lng->txt(\"locator\"));\n\t\t$this->tpl->touchBlock(\"locator_separator\");\n\t\t$this->tpl->touchBlock(\"locator_item\");\n\t\t//$this->tpl->setCurrentBlock(\"locator_item\");\n\t\t//$this->tpl->setVariable(\"ITEM\", $this->lng->txt(\"personal_desktop\"));\n\t\t//$this->tpl->setVariable(\"LINK_ITEM\", $this->ctrl->getLinkTargetByClass(\"ilpersonaldesktopgui\"));\n\t\t//$this->tpl->setVariable(\"LINK_TARGET\",\"target=\\\"\".\n\t\t//\tilFrameTargetInfo::_getFrame(\"MainContent\").\"\\\"\");\n\t\t//$this->tpl->parseCurrentBlock();\n\n\t\tforeach($path as $key => $row)\n\t\t{\n\t\t\tif($key < count($path) - $modifier)\n\t\t\t{\n\t\t\t\t$this->tpl->touchBlock(\"locator_separator\");\n\t\t\t}\n\n\t\t\t$this->tpl->setCurrentBlock(\"locator_item\");\n\t\t\t$title = ($row[\"child\"] == 1) ?\n\t\t\t\t$lng->txt(\"bookmarks\") :\n\t\t\t\t$row[\"title\"];\n\t\t\t$this->tpl->setVariable(\"ITEM\", $title);\n\t\t\t$this->ctrl->setParameter($this, \"bmf_id\", $row[\"child\"]);\n\t\t\t$this->tpl->setVariable(\"LINK_ITEM\",\n\t\t\t\t$this->ctrl->getLinkTarget($this));\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\n\t\t$this->tpl->setCurrentBlock(\"locator\");\n\n\t\t$this->tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * new form\n\t */\n\tfunction newForm($type)\n\t{\n\t\tif(!$type)\n\t\t\t$type = $_POST[\"type\"];\n\t\tswitch($type)\n\t\t{\n\t\t\tcase \"bmf\":\n\t\t\t\t$this->newFormBookmarkFolder();\n\t\t\t\tbreak;\n\n\t\t\tcase \"bm\":\n\t\t\t\t$this->newFormBookmark();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * display new bookmark folder form\n\t */\n\tfunction newFormBookmarkFolder()\n\t{\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t$form = $this->initFormBookmarkFolder();\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $form->getHTML());\n\t}\n\n\t/**\n\t * init bookmark folder create/edit form\n\t * @param string form action type; valid values: createBookmark, updateBookmark\n\t */\n\tprivate function initFormBookmarkFolder($action = 'createBookmarkFolder')\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\t\t$ilUser = $this->user;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tinclude_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\t\t$form = new ilPropertyFormGUI();\n\t\t$form->setTopAnchor(\"bookmark_top\");\n\n\t\t$form->setTitle($lng->txt(\"bookmark_folder_new\"));\n\n\t\tif($action == 'updateBookmarkFolder')\n\t\t{\n\t\t\t$ilCtrl->setParameter($this, 'bmf_id', $this->id);\n\t\t\t$ilCtrl->setParameter($this, 'obj_id', $_GET[\"obj_id\"]);\n\t\t}\n\n\t\t$hash = ($ilUser->prefs[\"screen_reader_optimization\"])\n\t\t\t? \"bookmark_top\"\n\t\t\t: \"\";\n\n\t\t$form->setFormAction($ilCtrl->getFormAction($this, $action, $hash));\n\n\t\t$ilCtrl->clearParameters($this);\n\n\t\t// title\n\t\t$prop = new ilTextInputGUI($lng->txt(\"title\"), \"title\");\n\t\t$prop->setRequired(true);\n\t\t$form->addItem($prop);\n\n\t\t// buttons\n\t\t$form->addCommandButton($action, $lng->txt('save'));\n\t\t$form->addCommandButton('cancel', $lng->txt('cancel'));\n\t\treturn $form;\n\t}\n\n\t/**\n\t * display edit bookmark folder form\n\t */\n\tfunction editFormBookmarkFolder()\n\t{\t\t\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\t\t\n\t\t$bmf  = new ilBookmarkFolder($_GET[\"obj_id\"]);\n\t\t$form = $this->initFormBookmarkFolder('updateBookmarkFolder', $this->id);\n\t\t$form->setValuesByArray\n\t\t(\n\t\t\tarray\n\t\t\t(\n\t\t\t\t\"title\"  => $this->get_last(\"title\", $bmf->getTitle()),\n\t\t\t\t\"obj_id\" => $_GET[\"obj_id\"],\n\t\t\t)\n\t\t);\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $form->getHTML());\n\t}\n\n\n\t/**\n\t * init Bookmark create/edit form\n\t * @param string form action type; valid values: createBookmark, updateBookmark\n\t */\n\tprivate function initFormBookmark($action = 'createBookmark')\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\t\t$ilUser = $this->user;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tinclude_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\t\t$form = new ilPropertyFormGUI();\n\t\t$form->setTopAnchor(\"bookmark_top\");\n\n\t\t$form->setTitle($lng->txt(\"bookmark_new\"));\n\n\t\tif($action == 'updateBookmark')\n\t\t{\n\t\t\t$ilCtrl->setParameter($this, 'bmf_id', $this->id);\n\t\t\t$ilCtrl->setParameter($this, 'obj_id', $_GET[\"obj_id\"]);\n\t\t}\n\n\t\t$hash = ($ilUser->prefs[\"screen_reader_optimization\"])\n\t\t\t? \"bookmark_top\"\n\t\t\t: \"\";\n\n\t\t$form->setFormAction($ilCtrl->getFormAction($this, $action, $hash));\n\t\t$ilCtrl->clearParameters($this);\n\t\t// title\n\t\t$prop = new ilTextInputGUI($lng->txt(\"title\"), \"title\");\n\t\t$prop->setValue($_GET['bm_title']);\n\t\t$prop->setRequired(true);\n\t\t$form->addItem($prop);\n\n\t\t// description\n\t\t$prop = new ilTextAreaInputGUI($lng->txt('description'), 'description');\n\t\t$form->addItem($prop);\n\n\t\t// target link\n\t\t$prop = new ilTextInputGUI($lng->txt('bookmark_target'), 'target');\n\t\t$prop->setValue($_GET['bm_link']);\n\t\t$prop->setRequired(true);\n\t\t$form->addItem($prop);\n\n\t\t// hidden redirect field\n\t\tif($_GET['return_to'])\n\t\t{\n\t\t\t$prop = new ilHiddenInputGUI('return_to');\n\t\t\t$prop->setValue($_GET['return_to']);\n\t\t\t$form->addItem($prop);\n\n\t\t\t$prop = new ilHiddenInputGUI('return_to_url');\n\t\t\tif($_GET['return_to_url'])\n\t\t\t\t$prop->setValue($_GET['return_to_url']);\n\t\t\telse\n\t\t\t\t$prop->setValue($_GET['bm_link']);\n\t\t\t$form->addItem($prop);\n\t\t}\n\n\t\t// buttons\n\t\t$form->addCommandButton($action, $lng->txt('save'));\n\t\t$form->addCommandButton('cancel', $lng->txt('cancel'));\n\n\t\t// keep imports? \n\t\t/*\n\t\t$this->tpl->setCurrentBlock('bkm_import');\n\t\t$this->tpl->setVariable(\"TXT_IMPORT_BKM\", $this->lng->txt(\"bkm_import\"));\n\t\t$this->tpl->setVariable(\"TXT_FILE\", $this->lng->txt(\"file_add\"));\n\t\t$this->tpl->setVariable(\"TXT_IMPORT\", $this->lng->txt(\"import\"));\n\t\t$this->tpl->parseCurrentBlock();\n\t\t//vd($_POST);\n\t\t*/\n\n\t\treturn $form;\n\t}\n\n\t/**\n\t * Init import bookmark form\n\n\t */\n\tprivate function initImportBookmarksForm()\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\t\t$ilUser = $this->user;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tinclude_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\t\t$form = new ilPropertyFormGUI();\n\t\t$form->setFormAction($ilCtrl->getFormAction($this, \"importFile\")); // #16133\n\t\t$form->setTopAnchor(\"bookmark_top\");\n\t\t$form->setTitle($lng->txt(\"bkm_import\"));\n\n\t\t$fi = new ilFileInputGUI($lng->txt(\"file_add\"), \"bkmfile\");\n\t\t$fi->setRequired(true);\n\t\t$form->addItem($fi);\n\n\t\t$form->addCommandButton(\"importFile\", $lng->txt('import'));\n\t\t$form->addCommandButton('cancel', $lng->txt('cancel'));\n\n\t\treturn $form;\n\t}\n\n\t/**\n\t * display new bookmark form\n\t */\n\tfunction newFormBookmark()\n\t{\n\t\t$form  = $this->initFormBookmark();\n\t\t$html1 = $form->getHTML();\n\t\t$html2 = '';\n\t\tif(!$_REQUEST[\"bm_link\"])\n\t\t{\n\t\t\t$form2 = $this->initImportBookmarksForm();\n\t\t\t$html2 = \"<br />\" . $form2->getHTML();\n\t\t}\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $html1 . $html2);\n\t}\n\n\n\t/**\n\t * get stored post var in case of an error/warning otherwise return passed value\n\t */\n\tfunction get_last($a_var, $a_value)\n\t{\n\t\treturn (!empty($_POST[$a_var])) ?\n\t\t\tilUtil::prepareFormOutput(($_POST[$a_var]), true) :\n\t\t\tilUtil::prepareFormOutput($a_value);\n\t}\n\n\t/**\n\t * display edit bookmark form\n\t */\n\tfunction editFormBookmark()\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t$form     = $this->initFormBookmark('updateBookmark');\n\t\t$bookmark = new ilBookmark($_GET[\"obj_id\"]);\n\t\t$form->setValuesByArray\n\t\t(\n\t\t\tarray\n\t\t\t(\n\t\t\t\t\"title\"       => $bookmark->getTitle(),\n\t\t\t\t\"target\"      => $bookmark->getTarget(),\n\t\t\t\t\"description\" => $bookmark->getDescription(),\n\t\t\t\t\"obj_id\"      => $_GET[\"obj_id\"],\n\t\t\t)\n\t\t);\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $form->getHTML());\n\t}\n\n\n\t/**\n\t * create new bookmark folder in db\n\t */\n\tfunction createBookmarkFolder()\n\t{\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->newFormBookmarkFolder();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// create bookmark folder\n\t\t\t$bmf = new ilBookmarkFolder();\n\t\t\t$bmf->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bmf->setParent($this->id);\n\t\t\t$bmf->create();\n\n\t\t\tilUtil::sendSuccess($this->lng->txt(\"bkm_fold_created\"), true);\n\n\t\t$ilCtrl = $this->ctrl;\n\t\t\t$ilCtrl->saveParameter($this, 'bmf_id');\n\t\t\t$ilCtrl->redirect($this, 'view');\n\t\t}\n\t}\n\n\n\t/**\n\t * update bookmark folder\n\t */\n\tfunction updateBookmarkFolder()\n\t{\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->editFormBookmarkFolder();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// update bookmark folder\n\t\t\t$bmf = new ilBookmarkFolder($_GET[\"obj_id\"]);\n\t\t\t$bmf->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bmf->update();\n\n\t\t$ilCtrl = $this->ctrl;\n\t\t\t$ilCtrl->saveParameter($this, 'bmf_id');\n\t\t\t$ilCtrl->redirect($this, 'view');\n\t\t}\n\t}\n\n\n\t/**\n\t * create new bookmark in db\n\t */\n\tfunction createBookmark()\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title and target\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->newFormBookmark();\n\t\t}\n\t\telse if(empty($_POST[\"target\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_target\"));\n\t\t\t$this->newFormBookmark();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// create bookmark\n\t\t\t$bm = new ilBookmark();\n\t\t\t$bm->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bm->setDescription(ilUtil::stripSlashes($_POST[\"description\"]));\n\t\t\t$bm->setTarget(ilUtil::stripSlashes($_POST[\"target\"]));\n\t\t\t$bm->setParent($this->id);\n\t\t\t$bm->create();\n\n\t\t\tilUtil::sendInfo($lng->txt('bookmark_added'), true);\n\n\t\t\tif($_POST['return_to'])\n\t\t\t\tilUtil::redirect($_POST['return_to_url']);\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ilCtrl->saveParameter($this, 'bmf_id');\n\t\t\t\t$ilCtrl->redirect($this, 'view');\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * update bookmark in db\n\t */\n\tfunction updateBookmark()\n\t{\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title and target\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->editFormBookmark();\n\t\t}\n\t\telse if(empty($_POST[\"target\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_target\"));\n\t\t\t$this->editFormBookmark();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// update bookmark\n\t\t\t$bm = new ilBookmark($_GET[\"obj_id\"]);\n\t\t\t$bm->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bm->setTarget(ilUtil::stripSlashes($_POST[\"target\"]));\n\t\t\t$bm->setDescription(ilUtil::stripSlashes($_POST[\"description\"]));\n\t\t\t$bm->update();\n\n\t\t\t$this->view();\n\t\t}\n\t}\n\n\t/**\n\t * export bookmarks\n\t */\n\tfunction export($deliver = true)\n\t{\n\t\t$ilErr = $this->error;\n\t\t$ilUser = $this->user;\n\n\t\t$bm_ids = $_GET['bm_id'] ? array($_GET['bm_id']) : $_POST['bm_id'];\n\t\tif(!$bm_ids)\n\t\t{\n\t\t\t$ilErr->raiseError($this->lng->txt(\"no_checkbox\"), $ilErr->MESSAGE);\n\t\t}\n\t\t$export_ids = array();\n\t\tforeach($bm_ids as $id)\n\t\t{\n\t\t\tif($this->tree->isInTree($id))\n\t\t\t{\n\t\t\t\t//list($type, $obj_id) = explode(\":\", $id);\n\t\t\t\t//$export_ids[]=$obj_id;\n\t\t\t\t$export_ids[] = $id;\n\t\t\t}\n\t\t}\n\n\t\trequire_once (\"./Services/Bookmarks/classes/class.ilBookmarkImportExport.php\");\n\t\t$html_content = ilBookmarkImportExport::_exportBookmark($export_ids, true,\n\t\t\t$this->lng->txt(\"bookmarks_of\") . \" \" . $ilUser->getFullname());\n\n\t\tif($deliver)\n\t\t{\n\t\t\tilUtil::deliverData($html_content, 'bookmarks.html', \"application/save\", $charset = \"\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $html_content;\n\t\t}\n\t}\n\n\t/**\n\t * send  bookmarks as attachment\n\t */\n\tfunction sendmail()\n\t{\n\t\t$ilUser = $this->user;\n\t\tinclude_once './Services/Mail/classes/class.ilFileDataMail.php';\n\t\trequire_once \"Services/Mail/classes/class.ilFormatMail.php\";\n\t\t$mfile = new ilFileDataMail($ilUser->getId());\n\t\t$umail = new ilFormatMail($ilUser->getId());\n\n\t\t$html_content = $this->export(false);\n\t\t$tempfile     = ilUtil::ilTempnam();\n\t\t$fp           = fopen($tempfile, 'w');\n\t\tfwrite($fp, $html_content);\n\t\tfclose($fp);\n\t\t$filename = 'bookmarks.html';\n\t\t$mfile->copyAttachmentFile($tempfile, $filename);\n\t\t$umail->savePostData($ilUser->getId(), array($filename),\n\t\t\t'', '', '', '', '',\n\t\t\t'',\n\t\t\t'', 0);\n\n\t\trequire_once 'Services/Mail/classes/class.ilMailFormCall.php';\n\t\tilUtil::redirect(ilMailFormCall::getRedirectTarget($this, '', array(), array('type' => 'attach')));\n\t}\n\n\t/**\n\t * display deletion conformation screen\n\t */\n\tfunction delete()\n\t{\n\t\t$ilErr = $this->error;\n\n\t\t$bm_ids = $_GET['bm_id'] ? array($_GET['bm_id']) : $_POST['bm_id'];\n\t\tif(!$bm_ids)\n\t\t{\n\t\t\t$ilErr->raiseError($this->lng->txt(\"no_checkbox\"), $ilErr->MESSAGE);\n\t\t}\n\n\t\t$this->ctrl->setParameter($this, \"bmf_id\", $this->id);\n\n\t\t// display confirmation message\n\t\tinclude_once(\"./Services/Utilities/classes/class.ilConfirmationGUI.php\");\n\t\t$cgui = new ilConfirmationGUI();\n\t\t$cgui->setFormAction($this->ctrl->getFormAction($this));\n\t\t$cgui->setHeaderText($this->lng->txt(\"info_delete_sure\"));\n\t\t$cgui->setCancel($this->lng->txt(\"cancel\"), \"cancel\");\n\t\t$cgui->setConfirm($this->lng->txt(\"confirm\"), \"confirm\");\n\n\t\tforeach($bm_ids as $obj_id)\n\t\t{\n\t\t\t$type = ilBookmark::_getTypeOfId($obj_id);\n\n\t\t\tif(!$this->tree->isInTree($obj_id))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch($type)\n\t\t\t{\n\t\t\t\tcase \"bmf\":\n\t\t\t\t\t$BookmarkFolder = new ilBookmarkFolder($obj_id);\n\t\t\t\t\t$title          = $BookmarkFolder->getTitle();\n\t\t\t\t\t$target         = \"\";\n\t\t\t\t\tunset($BookmarkFolder);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"bm\":\n\t\t\t\t\t$Bookmark = new ilBookmark($obj_id);\n\t\t\t\t\t$title    = $Bookmark->getTitle();\n\t\t\t\t\t$target   = $Bookmark->getTarget();\n\t\t\t\t\tunset($Bookmark);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$caption = ilUtil::getImageTagByType($type, $this->tpl->tplPath) .\n\t\t\t\t\" \" . $title;\n\t\t\tif($target)\n\t\t\t{\n\t\t\t\t$caption .= \" (\" . ilUtil::shortenText($target, $this->textwidth, true) . \")\";\n\t\t\t}\n\n\t\t\t$cgui->addItem(\"id[]\", $obj_id, $caption);\n\t\t}\n\n\t\t$this->tpl->setContent($cgui->getHTML());\n\t}\n\n\t/**\n\t * cancel deletion,insert, update\n\t */\n\tfunction cancel()\n\t{\n\t\tif($_POST['return_to'])\n\t\t\tilUtil::redirect($_POST['return_to_url']);\n\t\telse\n\t\t\t$this->view();\n\t}\n\n\t/**\n\t * deletion confirmed -> delete folders / bookmarks\n\t */\n\tfunction confirm()\n\t{\n\t\t$ilErr = $this->error;\n\n\t\t// AT LEAST ONE OBJECT HAS TO BE CHOSEN.\n\t\tif(!$_POST[\"id\"])\n\t\t{\n\t\t\t$ilErr->raiseError($this->lng->txt(\"no_checkbox\"), $ilErr->MESSAGE);\n\t\t}\n\n\t\t// FOR ALL SELECTED OBJECTS\n\t\tforeach($_POST[\"id\"] as $id)\n\t\t{\n\t\t\t$type = ilBookmark::_getTypeOfId($id);\n\n\t\t\t// get node data and subtree nodes\n\t\t\tif($this->tree->isInTree($id))\n\t\t\t{\n\t\t\t\t$node_data     = $this->tree->getNodeData($id);\n\t\t\t\t$subtree_nodes = $this->tree->getSubTree($node_data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// delete tree\n\t\t\t$this->tree->deleteTree($node_data);\n\n\t\t\t// delete objects of subtree nodes\n\t\t\tforeach($subtree_nodes as $node)\n\t\t\t{\n\t\t\t\tswitch($node[\"type\"])\n\t\t\t\t{\n\t\t\t\t\tcase \"bmf\":\n\t\t\t\t\t\t$BookmarkFolder = new ilBookmarkFolder($node[\"obj_id\"]);\n\t\t\t\t\t\t$BookmarkFolder->delete();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"bm\":\n\t\t\t\t\t\t$Bookmark = new ilBookmark($node[\"obj_id\"]);\n\t\t\t\t\t\t$Bookmark->delete();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Feedback\n\t\tilUtil::sendSuccess($this->lng->txt(\"info_deleted\"), true);\n\n\t\t$this->view();\n\t}\n\n\n\t/**\n\t * display subobject addition selection\n\t */\n\tfunction showPossibleSubObjects()\n\t{\n\t\t$actions = array(\n\t\t\t\"delete\"  => $this->lng->txt(\"delete\"),\n\t\t\t\"export\"  => $this->lng->txt(\"export\"),\n\t\t\t\"sendmail\"=> $this->lng->txt(\"bkm_sendmail\"),\n\t\t);\n\n\t\t$subobj = array(\"bm\", \"bmf\");\n\n\t\tif(is_array($subobj))\n\t\t{\n\t\t\t//build form\n\t\t\t$opts = ilUtil::formSelect(\"\", \"type\", $subobj);\n\n\t\t\t$this->tpl->setCurrentBlock(\"add_object\");\n\t\t\t$this->tpl->setVariable(\"COLUMN_COUNTS\", 7);\n\t\t\t$this->tpl->setVariable(\"SELECT_OBJTYPE\", $opts);\n\t\t\t$this->tpl->setVariable(\"BTN_NAME\", \"newForm\");\n\t\t\t$this->tpl->setVariable(\"TXT_ADD\", $this->lng->txt(\"add\"));\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TPLPATH\", $this->tpl->tplPath);\n\n\t\t$this->tpl->setCurrentBlock(\"tbl_action_select\");\n\t\t$this->tpl->setVariable(\"SELECT_ACTION\", ilUtil::formSelect($_SESSION[\"error_post_vars\"]['action'], \"action\", $actions, false, true));\n\t\t$this->tpl->setVariable(\"BTN_NAME\", \"executeAction\");\n\t\t$this->tpl->setVariable(\"BTN_VALUE\", $this->lng->txt(\"execute\"));\n\n\t\t/*\n\t\t$this->tpl->setVariable(\"BTN_NAME\",\"delete\");\n\t\t$this->tpl->setVariable(\"BTN_VALUE\",$this->lng->txt(\"delete\"));\n\t\t$this->tpl->parseCurrentBlock();\n\n\t\t$this->tpl->setVariable(\"BTN_NAME\",\"export\");\n\t\t$this->tpl->setVariable(\"BTN_VALUE\",$this->lng->txt(\"export\"));\n\t\t$this->tpl->parseCurrentBlock();\n\t\t*/\n\t\t$this->tpl->parseCurrentBlock();\n\n\t}\n\n\t/**\n\t * Get Bookmark list for personal desktop.\n\t */\n\tfunction getHTML()\n\t{\n\t\tinclude_once(\"./Services/Bookmarks/classes/class.ilBookmarkBlockGUI.php\");\n\t\t$bookmark_block_gui = new ilBookmarkBlockGUI(\"ilpersonaldesktopgui\", \"show\");\n\n\t\treturn $bookmark_block_gui->getHTML();\n\t}\n\n\t/**\n\t * imports a bookmark file into database\n\t * display status information or report errors messages\n\t * in case of error\n\t * @access    public\n\t */\n\tfunction importFile()\n\t{\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tif($_FILES[\"bkmfile\"][\"error\"] > UPLOAD_ERR_OK)\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"import_file_not_valid\"));\n\t\t\t$this->newFormBookmark();\n\t\t\treturn;\n\t\t}\n\t\trequire_once (\"./Services/Bookmarks/classes/class.ilBookmarkImportExport.php\");\n\t\t$objects = ilBookmarkImportExport::_parseFile($_FILES[\"bkmfile\"]['tmp_name']);\n\t\tif($objects === false)\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"import_file_not_valid\"));\n\t\t\t$this->newFormBookmark();\n\t\t\treturn;\n\t\t}\n\t\t// holds the number of created objects\n\t\t$num_create = array('bm'=> 0, 'bmf'=> 0);\n\t\t$this->__importBookmarks($objects, $num_create, $this->id, 0);\n\n\t\tilUtil::sendSuccess(sprintf($this->lng->txt(\"bkm_import_ok\"), $num_create['bm'],\n\t\t\t$num_create['bmf']));\n\t\t$this->view();\n\n\n\t}\n\n\t/**\n\t * creates the bookmarks and folders\n\t * @param    array            array of objects\n\t * @param    array            stores the number of created objects\n\t * @param    folder_id        id where to store the bookmarks\n\t * @param    start_key        key of the objects array where to start\n\t * @access    private\n\t */\n\tfunction __importBookmarks(&$objects, &$num_create, $folder_id, $start_key = 0)\n\t{\n\t\tif(is_array($objects[$start_key]))\n\t\t{\n\t\t\tforeach($objects[$start_key] as $obj_key=> $object)\n\t\t\t{\n\t\t\t\tswitch($object['type'])\n\t\t\t\t{\n\t\t\t\t\tcase 'bm':\n\t\t\t\t\t\tif(!$object[\"title\"]) continue;\n\t\t\t\t\t\tif(!$object[\"target\"]) continue;\n\t\t\t\t\t\t$bm = new ilBookmark();\n\t\t\t\t\t\t$bm->setTitle($object[\"title\"]);\n\t\t\t\t\t\t$bm->setDescription($object[\"description\"]);\n\t\t\t\t\t\t$bm->setTarget($object[\"target\"]);\n\t\t\t\t\t\t$bm->setParent($folder_id);\n\t\t\t\t\t\t$bm->create();\n\t\t\t\t\t\t$num_create['bm']++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bmf':\n\t\t\t\t\t\tif(!$object[\"title\"]) continue;\n\t\t\t\t\t\t$bmf = new ilBookmarkFolder();\n\t\t\t\t\t\t$bmf->setTitle($object[\"title\"]);\n\t\t\t\t\t\t$bmf->setParent($folder_id);\n\t\t\t\t\t\t$bmf->create();\n\t\t\t\t\t\t$num_create['bmf']++;\n\t\t\t\t\t\tif(is_array($objects[$obj_key]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->__importBookmarks($objects, $num_create,\n\t\t\t\t\t\t\t\t$bmf->getId(), $obj_key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction move()\n\t{\n\t\t$ilUser = $this->user;\n\t\t$ilTabs = $this->tabs;\n\t\t$tpl = $this->tpl;\n\n\t\t$bm_ids = $_REQUEST['bm_id'];\n\t\tif(!$bm_ids && $_GET[\"bm_id_tgt\"] == \"\")\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"no_checkbox\"));\n\t\t\treturn $this->view();\n\t\t}\n\n\t\t$ilTabs->setBackTarget($this->lng->txt(\"back\"), $this->ctrl->getLinkTarget($this));\n\n\t\t$this->ctrl->setParameter($this, \"bm_id_tgt\", $_GET[\"bm_id_tgt\"] ?  $_GET[\"bm_id_tgt\"] : implode(\";\", $bm_ids));\n\t\tilUtil::sendInfo($this->lng->txt(\"bookmark_select_target\"));\n\t\tinclude_once(\"./Services/Bookmarks/classes/class.ilBookmarkMoveExplorerGUI.php\");\n\t\t$exp = new ilBookmarkMoveExplorerGUI($this, \"move\");\n\t\tif (!$exp->handleCommand())\n\t\t{\n\t\t\t$this->mode = \"flat\";\n\t\t\t$this->tpl->setContent($exp->getHTML());\n\t\t}\n\t}\n\n\tfunction confirmedMove()\n\t{\n\t\t$ilUser = $this->user;\n\n\t\t$tgt    = (int)$_REQUEST[\"bmfmv_id\"];\n\t\t$bm_ids = explode(\";\", $_REQUEST['bm_id_tgt']);\n\t\tif(!$bm_ids || !$tgt)\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"no_checkbox\"));\n\t\t\treturn $this->view();\n\t\t}\n\n\t\t$tree = new ilTree($ilUser->getId());\n\t\t$tree->setTableNames('bookmark_tree', 'bookmark_data');\n\n\t\t$tgt_node = $tree->getNodeData($tgt);\n\n\t\t// sanity check\n\t\tforeach($bm_ids as $node_id)\n\t\t{\n\t\t\tif($tree->isGrandChild($node_id, $tgt))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"error\"), true);\n\t\t\t\t$this->ctrl->redirect($this, \"view\");\n\t\t\t}\n\n\t\t\t$node = $tree->getNodeData($node_id);\n\n\t\t\t// already at correct position\n\t\t\tif($node[\"parent\"] == $tgt)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$tree->moveTree($node_id, $tgt);\n\t\t}\n\n\t\tilUtil::sendSuccess($this->lng->txt(\"bookmark_moved_ok\"), true);\n\t\t$this->ctrl->setParameter($this, \"bmf_id\", $tgt);\n\t\t$this->ctrl->redirect($this, \"view\");\n\t}\n}"], "fixing_code": ["<?php\n\n/* Copyright (c) 1998-2012 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once (\"./Services/Bookmarks/classes/class.ilBookmarkFolder.php\");\nrequire_once (\"./Services/Bookmarks/classes/class.ilBookmark.php\");\nrequire_once (\"./Services/Table/classes/class.ilTableGUI.php\");\n\n/**\n * GUI class for personal bookmark administration. It manages folders and bookmarks\n * with the help of the two corresponding core classes ilBookmarkFolder and ilBookmark.\n * Their methods are called in this User Interface class.\n * @author       Alex Killing <alex.killing@gmx.de>\n * @author       Manfred Thaler <manfred.thaler@endo7.com>\n * @version      $Id$\n * @ingroup      ServicesBookmarks\n * @ilCtrl_Calls ilBookmarkAdministrationGUI:\n */\nclass ilBookmarkAdministrationGUI\n{\n\t/**\n\t * @var ilCtrl\n\t */\n\tprotected $ctrl;\n\n\t/**\n\t * @var ilObjUser\n\t */\n\tprotected $user;\n\n\t/**\n\t * @var ilToolbarGUI\n\t */\n\tprotected $toolbar;\n\n\t/**\n\t * @var ilErrorHandling\n\t */\n\tprotected $error;\n\n\t/**\n\t * @var ilTabsGUI\n\t */\n\tprotected $tabs;\n\n\t/**\n\t * User Id\n\t * @var integer\n\t * @access public\n\t */\n\tvar $user_id;\n\n\t/**\n\t * ilias object\n\t * @var object ilias\n\t * @access public\n\t */\n\tvar $tpl;\n\tvar $lng;\n\n\tvar $tree;\n\tvar $id;\n\tvar $data;\n\tvar $textwidth = 100;\n\n\t/**\n\t * Constructor\n\t * @access    public\n\t * @param    integer        user_id (optional)\n\t */\n\tfunction __construct()\n\t{\n\t\tglobal $DIC;\n\n\t\t$this->user = $DIC->user();\n\t\t$this->toolbar = $DIC->toolbar();\n\t\t$this->error = $DIC[\"ilErr\"];\n\t\t$this->tabs = $DIC->tabs();\n\t\t$tpl = $DIC[\"tpl\"];\n\t\t$lng = $DIC->language();\n\t\t$ilCtrl = $DIC->ctrl();\n\t\t$ilUser = $DIC->user();\n\n//\t\t$tpl->enableAdvancedColumnLayout(true, false);\n\n\t\t$tpl->getStandardTemplate();\n\t\t\n\t\t//print_r($_SESSION[\"error_post_vars\"]);\n\t\t// if no bookmark folder id is given, take dummy root node id (that is 1)\n\t\t$this->id = (empty($_GET[\"bmf_id\"]))\n\t\t\t? 1\n\t\t\t: $_GET[\"bmf_id\"];\n\t\n\t\t// initiate variables\n\t\t$this->tpl   = $tpl;\n\t\t$this->lng   = $lng;\n\t\t$this->ctrl  = $ilCtrl;\n\t\t$this->ctrl->setParameter($this, \"bmf_id\", $this->id);\n\t\t$this->user_id = $ilUser->getId();\n\n\t\t$this->tree = new ilTree($this->user_id);\n\t\t$this->tree->setTableNames('bookmark_tree', 'bookmark_data');\n\t\t$this->root_id = $this->tree->readRootId();\n\n\t\t$this->lng->loadLanguageModule(\"bkm\");\n\t\t\n\t\t$this->mode = \"tree\";\n\t}\n\n\t/**\n\t * execute command\n\t */\n\tfunction executeCommand()\n\t{\n\t\t$next_class = $this->ctrl->getNextClass();\n\n\t\tswitch($next_class)\n\t\t{\n\t\t\tdefault:\n\t\t\t\t$cmd = $this->ctrl->getCmd(\"view\");\n\t\t\t\t$this->displayHeader();\n\t\t\t\t$this->$cmd();\n\t\t\t\tif($this->getMode() == 'tree')\n\t\t\t\t{\n\t\t\t\t\t$this->explorer();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\t$this->tpl->show(true);\n\t\treturn true;\n\t}\n\n\tfunction executeAction()\n\t{\n\t\tswitch($_POST[\"selected_cmd\"])\n\t\t{\n\t\t\tcase \"delete\":\n\t\t\t\t$this->delete();\n\t\t\t\tbreak;\n\t\t\tcase \"export\":\n\t\t\t\t$this->export();\n\t\t\t\tbreak;\n\t\t\tcase \"sendmail\":\n\t\t\t\t$this->sendmail();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$this->view();\n\t\t\t\tbreak;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * return display mode\n\t * flat or tree\n\t */\n\tfunction getMode()\n\t{\n\t\treturn $this->mode;\n\t}\n\n\t/**\n\t * output explorer tree with bookmark folders\n\t */\n\tfunction explorer()\n\t{\n\t\t$tpl = $this->tpl;\n\n\t\tinclude_once(\"./Services/Bookmarks/classes/class.ilBookmarkExplorerGUI.php\");\n\t\t$exp = new ilBookmarkExplorerGUI($this, \"explorer\");\n\t\tif (!$exp->handleCommand())\n\t\t{\n\t\t\t$tpl->setLeftNavContent($exp->getHTML());\n\t\t}\n\t}\n\n\n\t/**\n\t * display header and locator\n\t */\n\tfunction displayHeader()\n\t{\n\t\t// output locator\n\t\t$this->displayLocator();\n\n\t\t// output message\n\t\tif($this->message)\n\t\t{\n\t\t\tilUtil::sendInfo($this->message);\n\t\t}\n\t\tilUtil::infoPanel();\n\n\t\t$this->tpl->setTitle($this->lng->txt(\"bookmarks\"));\n\t}\n\n\t/*\n\t* display content of bookmark folder\n\t*/\n\tfunction view()\n\t{\t\t\n\t\t$ilToolbar = $this->toolbar;\n\t\t\n\t\tif($this->id > 0 && !$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\t\t\n\t\t$ilToolbar->addButton($this->lng->txt(\"bookmark_new\"), \n\t\t\t$this->ctrl->getLinkTarget($this, \"newFormBookmark\"));\n\t\t$ilToolbar->addButton($this->lng->txt(\"bookmark_folder_new\"), \n\t\t\t$this->ctrl->getLinkTarget($this, \"newFormBookmarkFolder\"));\n\n\t\t$objects = ilBookmarkFolder::getObjects($this->id);\n\n\t\tinclude_once 'Services/Bookmarks/classes/class.ilBookmarkAdministrationTableGUI.php';\n\t\t$table = new ilBookmarkAdministrationTableGUI($this);\n\t\t$table->setId('bookmark_adm_table');\t\t\n\t\t$table->setData($objects);\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $table->getHTML());\n\t}\n\n\t/**\n\t * output a cell in object list\n\t */\n\tfunction add_cell($val, $link = \"\")\n\t{\n\t\tif(!empty($link))\n\t\t{\n\t\t\t$this->tpl->setCurrentBlock(\"begin_link\");\n\t\t\t$this->tpl->setVariable(\"LINK_TARGET\", $link);\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t$this->tpl->touchBlock(\"end_link\");\n\t\t}\n\n\t\t$this->tpl->setCurrentBlock(\"text\");\n\t\t$this->tpl->setVariable(\"TEXT_CONTENT\", $val);\n\t\t$this->tpl->parseCurrentBlock();\n\t\t$this->tpl->setCurrentBlock(\"table_cell\");\n\t\t$this->tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * display locator\n\t */\n\tfunction displayLocator()\n\t{\n\t\t$lng = $this->lng;\n\n\t\tif(empty($this->id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->tpl->addBlockFile(\"LOCATOR\", \"locator\", \"tpl.locator.html\", \"Services/Locator\");\n\n\t\t$path = $this->tree->getPathFull($this->id);\n//print_r($path);\n\t\t$modifier = 1;\n\n\t\treturn;\n\t\t$this->tpl->setVariable(\"TXT_LOCATOR\", $this->lng->txt(\"locator\"));\n\t\t$this->tpl->touchBlock(\"locator_separator\");\n\t\t$this->tpl->touchBlock(\"locator_item\");\n\t\t//$this->tpl->setCurrentBlock(\"locator_item\");\n\t\t//$this->tpl->setVariable(\"ITEM\", $this->lng->txt(\"personal_desktop\"));\n\t\t//$this->tpl->setVariable(\"LINK_ITEM\", $this->ctrl->getLinkTargetByClass(\"ilpersonaldesktopgui\"));\n\t\t//$this->tpl->setVariable(\"LINK_TARGET\",\"target=\\\"\".\n\t\t//\tilFrameTargetInfo::_getFrame(\"MainContent\").\"\\\"\");\n\t\t//$this->tpl->parseCurrentBlock();\n\n\t\tforeach($path as $key => $row)\n\t\t{\n\t\t\tif($key < count($path) - $modifier)\n\t\t\t{\n\t\t\t\t$this->tpl->touchBlock(\"locator_separator\");\n\t\t\t}\n\n\t\t\t$this->tpl->setCurrentBlock(\"locator_item\");\n\t\t\t$title = ($row[\"child\"] == 1) ?\n\t\t\t\t$lng->txt(\"bookmarks\") :\n\t\t\t\t$row[\"title\"];\n\t\t\t$this->tpl->setVariable(\"ITEM\", $title);\n\t\t\t$this->ctrl->setParameter($this, \"bmf_id\", $row[\"child\"]);\n\t\t\t$this->tpl->setVariable(\"LINK_ITEM\",\n\t\t\t\t$this->ctrl->getLinkTarget($this));\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\n\t\t$this->tpl->setCurrentBlock(\"locator\");\n\n\t\t$this->tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * new form\n\t */\n\tfunction newForm($type)\n\t{\n\t\tif(!$type)\n\t\t\t$type = $_POST[\"type\"];\n\t\tswitch($type)\n\t\t{\n\t\t\tcase \"bmf\":\n\t\t\t\t$this->newFormBookmarkFolder();\n\t\t\t\tbreak;\n\n\t\t\tcase \"bm\":\n\t\t\t\t$this->newFormBookmark();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * display new bookmark folder form\n\t */\n\tfunction newFormBookmarkFolder()\n\t{\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t$form = $this->initFormBookmarkFolder();\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $form->getHTML());\n\t}\n\n\t/**\n\t * init bookmark folder create/edit form\n\t * @param string form action type; valid values: createBookmark, updateBookmark\n\t */\n\tprivate function initFormBookmarkFolder($action = 'createBookmarkFolder')\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\t\t$ilUser = $this->user;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tinclude_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\t\t$form = new ilPropertyFormGUI();\n\t\t$form->setTopAnchor(\"bookmark_top\");\n\n\t\t$form->setTitle($lng->txt(\"bookmark_folder_new\"));\n\n\t\tif($action == 'updateBookmarkFolder')\n\t\t{\n\t\t\t$ilCtrl->setParameter($this, 'bmf_id', $this->id);\n\t\t\t$ilCtrl->setParameter($this, 'obj_id', $_GET[\"obj_id\"]);\n\t\t}\n\n\t\t$hash = ($ilUser->prefs[\"screen_reader_optimization\"])\n\t\t\t? \"bookmark_top\"\n\t\t\t: \"\";\n\n\t\t$form->setFormAction($ilCtrl->getFormAction($this, $action, $hash));\n\n\t\t$ilCtrl->clearParameters($this);\n\n\t\t// title\n\t\t$prop = new ilTextInputGUI($lng->txt(\"title\"), \"title\");\n\t\t$prop->setRequired(true);\n\t\t$form->addItem($prop);\n\n\t\t// buttons\n\t\t$form->addCommandButton($action, $lng->txt('save'));\n\t\t$form->addCommandButton('cancel', $lng->txt('cancel'));\n\t\treturn $form;\n\t}\n\n\t/**\n\t * display edit bookmark folder form\n\t */\n\tfunction editFormBookmarkFolder()\n\t{\t\t\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\t\t\n\t\t$bmf  = new ilBookmarkFolder($_GET[\"obj_id\"]);\n\t\t$form = $this->initFormBookmarkFolder('updateBookmarkFolder', $this->id);\n\t\t$form->setValuesByArray\n\t\t(\n\t\t\tarray\n\t\t\t(\n\t\t\t\t\"title\"  => $this->get_last(\"title\", $bmf->getTitle()),\n\t\t\t\t\"obj_id\" => $_GET[\"obj_id\"],\n\t\t\t)\n\t\t);\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $form->getHTML());\n\t}\n\n\n\t/**\n\t * init Bookmark create/edit form\n\t * @param string form action type; valid values: createBookmark, updateBookmark\n\t */\n\tprivate function initFormBookmark($action = 'createBookmark')\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\t\t$ilUser = $this->user;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tinclude_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\t\t$form = new ilPropertyFormGUI();\n\t\t$form->setTopAnchor(\"bookmark_top\");\n\n\t\t$form->setTitle($lng->txt(\"bookmark_new\"));\n\n\t\tif($action == 'updateBookmark')\n\t\t{\n\t\t\t$ilCtrl->setParameter($this, 'bmf_id', $this->id);\n\t\t\t$ilCtrl->setParameter($this, 'obj_id', $_GET[\"obj_id\"]);\n\t\t}\n\n\t\t$hash = ($ilUser->prefs[\"screen_reader_optimization\"])\n\t\t\t? \"bookmark_top\"\n\t\t\t: \"\";\n\n\t\t$form->setFormAction($ilCtrl->getFormAction($this, $action, $hash));\n\t\t$ilCtrl->clearParameters($this);\n\t\t// title\n\t\t$prop = new ilTextInputGUI($lng->txt(\"title\"), \"title\");\n\t\t$prop->setValue($_GET['bm_title']);\n\t\t$prop->setRequired(true);\n\t\t$form->addItem($prop);\n\n\t\t// description\n\t\t$prop = new ilTextAreaInputGUI($lng->txt('description'), 'description');\n\t\t$form->addItem($prop);\n\n\t\t// target link\n\t\t$prop = new ilTextInputGUI($lng->txt('bookmark_target'), 'target');\n\t\t$prop->setValue($_GET['bm_link']);\n\t\t$prop->setRequired(true);\n\t\t$form->addItem($prop);\n\n\t\t// hidden redirect field\n\t\tif($_GET['return_to'])\n\t\t{\n\t\t\t$prop = new ilHiddenInputGUI('return_to');\n\t\t\t$prop->setValue($_GET['return_to']);\n\t\t\t$form->addItem($prop);\n\n\t\t\t$prop = new ilHiddenInputGUI('return_to_url');\n\t\t\tif($_GET['return_to_url'])\n\t\t\t\t$prop->setValue($_GET['return_to_url']);\n\t\t\telse\n\t\t\t\t$prop->setValue($_GET['bm_link']);\n\t\t\t$form->addItem($prop);\n\t\t}\n\n\t\t// buttons\n\t\t$form->addCommandButton($action, $lng->txt('save'));\n\t\t$form->addCommandButton('cancel', $lng->txt('cancel'));\n\n\t\t// keep imports? \n\t\t/*\n\t\t$this->tpl->setCurrentBlock('bkm_import');\n\t\t$this->tpl->setVariable(\"TXT_IMPORT_BKM\", $this->lng->txt(\"bkm_import\"));\n\t\t$this->tpl->setVariable(\"TXT_FILE\", $this->lng->txt(\"file_add\"));\n\t\t$this->tpl->setVariable(\"TXT_IMPORT\", $this->lng->txt(\"import\"));\n\t\t$this->tpl->parseCurrentBlock();\n\t\t//vd($_POST);\n\t\t*/\n\n\t\treturn $form;\n\t}\n\n\t/**\n\t * Init import bookmark form\n\n\t */\n\tprivate function initImportBookmarksForm()\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\t\t$ilUser = $this->user;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tinclude_once 'Services/Form/classes/class.ilPropertyFormGUI.php';\n\t\t$form = new ilPropertyFormGUI();\n\t\t$form->setFormAction($ilCtrl->getFormAction($this, \"importFile\")); // #16133\n\t\t$form->setTopAnchor(\"bookmark_top\");\n\t\t$form->setTitle($lng->txt(\"bkm_import\"));\n\n\t\t$fi = new ilFileInputGUI($lng->txt(\"file_add\"), \"bkmfile\");\n\t\t$fi->setRequired(true);\n\t\t$form->addItem($fi);\n\n\t\t$form->addCommandButton(\"importFile\", $lng->txt('import'));\n\t\t$form->addCommandButton('cancel', $lng->txt('cancel'));\n\n\t\treturn $form;\n\t}\n\n\t/**\n\t * display new bookmark form\n\t */\n\tfunction newFormBookmark()\n\t{\n\t\t$form  = $this->initFormBookmark();\n\t\t$html1 = $form->getHTML();\n\t\t$html2 = '';\n\t\tif(!$_REQUEST[\"bm_link\"])\n\t\t{\n\t\t\t$form2 = $this->initImportBookmarksForm();\n\t\t\t$html2 = \"<br />\" . $form2->getHTML();\n\t\t}\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $html1 . $html2);\n\t}\n\n\n\t/**\n\t * get stored post var in case of an error/warning otherwise return passed value\n\t */\n\tfunction get_last($a_var, $a_value)\n\t{\n\t\treturn (!empty($_POST[$a_var])) ?\n\t\t\tilUtil::prepareFormOutput(($_POST[$a_var]), true) :\n\t\t\tilUtil::prepareFormOutput($a_value);\n\t}\n\n\t/**\n\t * display edit bookmark form\n\t */\n\tfunction editFormBookmark()\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t$form     = $this->initFormBookmark('updateBookmark');\n\t\t$bookmark = new ilBookmark($_GET[\"obj_id\"]);\n\t\t$form->setValuesByArray\n\t\t(\n\t\t\tarray\n\t\t\t(\n\t\t\t\t\"title\"       => $bookmark->getTitle(),\n\t\t\t\t\"target\"      => $bookmark->getTarget(),\n\t\t\t\t\"description\" => $bookmark->getDescription(),\n\t\t\t\t\"obj_id\"      => $_GET[\"obj_id\"],\n\t\t\t)\n\t\t);\n\t\t$this->tpl->setVariable(\"ADM_CONTENT\", $form->getHTML());\n\t}\n\n\n\t/**\n\t * create new bookmark folder in db\n\t */\n\tfunction createBookmarkFolder()\n\t{\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->newFormBookmarkFolder();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// create bookmark folder\n\t\t\t$bmf = new ilBookmarkFolder();\n\t\t\t$bmf->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bmf->setParent($this->id);\n\t\t\t$bmf->create();\n\n\t\t\tilUtil::sendSuccess($this->lng->txt(\"bkm_fold_created\"), true);\n\n\t\t$ilCtrl = $this->ctrl;\n\t\t\t$ilCtrl->saveParameter($this, 'bmf_id');\n\t\t\t$ilCtrl->redirect($this, 'view');\n\t\t}\n\t}\n\n\n\t/**\n\t * update bookmark folder\n\t */\n\tfunction updateBookmarkFolder()\n\t{\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->editFormBookmarkFolder();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// update bookmark folder\n\t\t\t$bmf = new ilBookmarkFolder($_GET[\"obj_id\"]);\n\t\t\t$bmf->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bmf->update();\n\n\t\t$ilCtrl = $this->ctrl;\n\t\t\t$ilCtrl->saveParameter($this, 'bmf_id');\n\t\t\t$ilCtrl->redirect($this, 'view');\n\t\t}\n\t}\n\n\n\t/**\n\t * create new bookmark in db\n\t */\n\tfunction createBookmark()\n\t{\n\t\t$lng = $this->lng;\n\t\t$ilCtrl = $this->ctrl;\n\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title and target\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->newFormBookmark();\n\t\t}\n\t\telse if(empty($_POST[\"target\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_target\"));\n\t\t\t$this->newFormBookmark();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// create bookmark\n\t\t\t$bm = new ilBookmark();\n\t\t\t$bm->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bm->setDescription(ilUtil::stripSlashes($_POST[\"description\"]));\n\t\t\t$bm->setTarget(ilUtil::stripSlashes($_POST[\"target\"]));\n\t\t\t$bm->setParent($this->id);\n\t\t\t$bm->create();\n\n\t\t\tilUtil::sendInfo($lng->txt('bookmark_added'), true);\n\n\t\t\t$ilCtrl->saveParameter($this, 'bmf_id');\n\t\t\t$ilCtrl->redirect($this, 'view');\n\t\t}\n\t}\n\n\t/**\n\t * update bookmark in db\n\t */\n\tfunction updateBookmark()\n\t{\n\t\tif(!$this->tree->isInTree($_GET[\"obj_id\"]))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'obj_id', '');\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\t// check title and target\n\t\tif(empty($_POST[\"title\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_title\"));\n\t\t\t$this->editFormBookmark();\n\t\t}\n\t\telse if(empty($_POST[\"target\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"please_enter_target\"));\n\t\t\t$this->editFormBookmark();\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// update bookmark\n\t\t\t$bm = new ilBookmark($_GET[\"obj_id\"]);\n\t\t\t$bm->setTitle(ilUtil::stripSlashes($_POST[\"title\"]));\n\t\t\t$bm->setTarget(ilUtil::stripSlashes($_POST[\"target\"]));\n\t\t\t$bm->setDescription(ilUtil::stripSlashes($_POST[\"description\"]));\n\t\t\t$bm->update();\n\n\t\t\t$this->view();\n\t\t}\n\t}\n\n\t/**\n\t * export bookmarks\n\t */\n\tfunction export($deliver = true)\n\t{\n\t\t$ilErr = $this->error;\n\t\t$ilUser = $this->user;\n\n\t\t$bm_ids = $_GET['bm_id'] ? array($_GET['bm_id']) : $_POST['bm_id'];\n\t\tif(!$bm_ids)\n\t\t{\n\t\t\t$ilErr->raiseError($this->lng->txt(\"no_checkbox\"), $ilErr->MESSAGE);\n\t\t}\n\t\t$export_ids = array();\n\t\tforeach($bm_ids as $id)\n\t\t{\n\t\t\tif($this->tree->isInTree($id))\n\t\t\t{\n\t\t\t\t//list($type, $obj_id) = explode(\":\", $id);\n\t\t\t\t//$export_ids[]=$obj_id;\n\t\t\t\t$export_ids[] = $id;\n\t\t\t}\n\t\t}\n\n\t\trequire_once (\"./Services/Bookmarks/classes/class.ilBookmarkImportExport.php\");\n\t\t$html_content = ilBookmarkImportExport::_exportBookmark($export_ids, true,\n\t\t\t$this->lng->txt(\"bookmarks_of\") . \" \" . $ilUser->getFullname());\n\n\t\tif($deliver)\n\t\t{\n\t\t\tilUtil::deliverData($html_content, 'bookmarks.html', \"application/save\", $charset = \"\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn $html_content;\n\t\t}\n\t}\n\n\t/**\n\t * send  bookmarks as attachment\n\t */\n\tfunction sendmail()\n\t{\n\t\t$ilUser = $this->user;\n\t\tinclude_once './Services/Mail/classes/class.ilFileDataMail.php';\n\t\trequire_once \"Services/Mail/classes/class.ilFormatMail.php\";\n\t\t$mfile = new ilFileDataMail($ilUser->getId());\n\t\t$umail = new ilFormatMail($ilUser->getId());\n\n\t\t$html_content = $this->export(false);\n\t\t$tempfile     = ilUtil::ilTempnam();\n\t\t$fp           = fopen($tempfile, 'w');\n\t\tfwrite($fp, $html_content);\n\t\tfclose($fp);\n\t\t$filename = 'bookmarks.html';\n\t\t$mfile->copyAttachmentFile($tempfile, $filename);\n\t\t$umail->savePostData($ilUser->getId(), array($filename),\n\t\t\t'', '', '', '', '',\n\t\t\t'',\n\t\t\t'', 0);\n\n\t\trequire_once 'Services/Mail/classes/class.ilMailFormCall.php';\n\t\tilUtil::redirect(ilMailFormCall::getRedirectTarget($this, '', array(), array('type' => 'attach')));\n\t}\n\n\t/**\n\t * display deletion conformation screen\n\t */\n\tfunction delete()\n\t{\n\t\t$ilErr = $this->error;\n\n\t\t$bm_ids = $_GET['bm_id'] ? array($_GET['bm_id']) : $_POST['bm_id'];\n\t\tif(!$bm_ids)\n\t\t{\n\t\t\t$ilErr->raiseError($this->lng->txt(\"no_checkbox\"), $ilErr->MESSAGE);\n\t\t}\n\n\t\t$this->ctrl->setParameter($this, \"bmf_id\", $this->id);\n\n\t\t// display confirmation message\n\t\tinclude_once(\"./Services/Utilities/classes/class.ilConfirmationGUI.php\");\n\t\t$cgui = new ilConfirmationGUI();\n\t\t$cgui->setFormAction($this->ctrl->getFormAction($this));\n\t\t$cgui->setHeaderText($this->lng->txt(\"info_delete_sure\"));\n\t\t$cgui->setCancel($this->lng->txt(\"cancel\"), \"cancel\");\n\t\t$cgui->setConfirm($this->lng->txt(\"confirm\"), \"confirm\");\n\n\t\tforeach($bm_ids as $obj_id)\n\t\t{\n\t\t\t$type = ilBookmark::_getTypeOfId($obj_id);\n\n\t\t\tif(!$this->tree->isInTree($obj_id))\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch($type)\n\t\t\t{\n\t\t\t\tcase \"bmf\":\n\t\t\t\t\t$BookmarkFolder = new ilBookmarkFolder($obj_id);\n\t\t\t\t\t$title          = $BookmarkFolder->getTitle();\n\t\t\t\t\t$target         = \"\";\n\t\t\t\t\tunset($BookmarkFolder);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"bm\":\n\t\t\t\t\t$Bookmark = new ilBookmark($obj_id);\n\t\t\t\t\t$title    = $Bookmark->getTitle();\n\t\t\t\t\t$target   = $Bookmark->getTarget();\n\t\t\t\t\tunset($Bookmark);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$caption = ilUtil::getImageTagByType($type, $this->tpl->tplPath) .\n\t\t\t\t\" \" . $title;\n\t\t\tif($target)\n\t\t\t{\n\t\t\t\t$caption .= \" (\" . ilUtil::shortenText($target, $this->textwidth, true) . \")\";\n\t\t\t}\n\n\t\t\t$cgui->addItem(\"id[]\", $obj_id, $caption);\n\t\t}\n\n\t\t$this->tpl->setContent($cgui->getHTML());\n\t}\n\n\t/**\n\t * cancel deletion,insert, update\n\t */\n\tfunction cancel()\n\t{\n\t\t$this->view();\n\t}\n\n\t/**\n\t * deletion confirmed -> delete folders / bookmarks\n\t */\n\tfunction confirm()\n\t{\n\t\t$ilErr = $this->error;\n\n\t\t// AT LEAST ONE OBJECT HAS TO BE CHOSEN.\n\t\tif(!$_POST[\"id\"])\n\t\t{\n\t\t\t$ilErr->raiseError($this->lng->txt(\"no_checkbox\"), $ilErr->MESSAGE);\n\t\t}\n\n\t\t// FOR ALL SELECTED OBJECTS\n\t\tforeach($_POST[\"id\"] as $id)\n\t\t{\n\t\t\t$type = ilBookmark::_getTypeOfId($id);\n\n\t\t\t// get node data and subtree nodes\n\t\t\tif($this->tree->isInTree($id))\n\t\t\t{\n\t\t\t\t$node_data     = $this->tree->getNodeData($id);\n\t\t\t\t$subtree_nodes = $this->tree->getSubTree($node_data);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// delete tree\n\t\t\t$this->tree->deleteTree($node_data);\n\n\t\t\t// delete objects of subtree nodes\n\t\t\tforeach($subtree_nodes as $node)\n\t\t\t{\n\t\t\t\tswitch($node[\"type\"])\n\t\t\t\t{\n\t\t\t\t\tcase \"bmf\":\n\t\t\t\t\t\t$BookmarkFolder = new ilBookmarkFolder($node[\"obj_id\"]);\n\t\t\t\t\t\t$BookmarkFolder->delete();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase \"bm\":\n\t\t\t\t\t\t$Bookmark = new ilBookmark($node[\"obj_id\"]);\n\t\t\t\t\t\t$Bookmark->delete();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Feedback\n\t\tilUtil::sendSuccess($this->lng->txt(\"info_deleted\"), true);\n\n\t\t$this->view();\n\t}\n\n\n\t/**\n\t * display subobject addition selection\n\t */\n\tfunction showPossibleSubObjects()\n\t{\n\t\t$actions = array(\n\t\t\t\"delete\"  => $this->lng->txt(\"delete\"),\n\t\t\t\"export\"  => $this->lng->txt(\"export\"),\n\t\t\t\"sendmail\"=> $this->lng->txt(\"bkm_sendmail\"),\n\t\t);\n\n\t\t$subobj = array(\"bm\", \"bmf\");\n\n\t\tif(is_array($subobj))\n\t\t{\n\t\t\t//build form\n\t\t\t$opts = ilUtil::formSelect(\"\", \"type\", $subobj);\n\n\t\t\t$this->tpl->setCurrentBlock(\"add_object\");\n\t\t\t$this->tpl->setVariable(\"COLUMN_COUNTS\", 7);\n\t\t\t$this->tpl->setVariable(\"SELECT_OBJTYPE\", $opts);\n\t\t\t$this->tpl->setVariable(\"BTN_NAME\", \"newForm\");\n\t\t\t$this->tpl->setVariable(\"TXT_ADD\", $this->lng->txt(\"add\"));\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TPLPATH\", $this->tpl->tplPath);\n\n\t\t$this->tpl->setCurrentBlock(\"tbl_action_select\");\n\t\t$this->tpl->setVariable(\"SELECT_ACTION\", ilUtil::formSelect($_SESSION[\"error_post_vars\"]['action'], \"action\", $actions, false, true));\n\t\t$this->tpl->setVariable(\"BTN_NAME\", \"executeAction\");\n\t\t$this->tpl->setVariable(\"BTN_VALUE\", $this->lng->txt(\"execute\"));\n\n\t\t/*\n\t\t$this->tpl->setVariable(\"BTN_NAME\",\"delete\");\n\t\t$this->tpl->setVariable(\"BTN_VALUE\",$this->lng->txt(\"delete\"));\n\t\t$this->tpl->parseCurrentBlock();\n\n\t\t$this->tpl->setVariable(\"BTN_NAME\",\"export\");\n\t\t$this->tpl->setVariable(\"BTN_VALUE\",$this->lng->txt(\"export\"));\n\t\t$this->tpl->parseCurrentBlock();\n\t\t*/\n\t\t$this->tpl->parseCurrentBlock();\n\n\t}\n\n\t/**\n\t * Get Bookmark list for personal desktop.\n\t */\n\tfunction getHTML()\n\t{\n\t\tinclude_once(\"./Services/Bookmarks/classes/class.ilBookmarkBlockGUI.php\");\n\t\t$bookmark_block_gui = new ilBookmarkBlockGUI(\"ilpersonaldesktopgui\", \"show\");\n\n\t\treturn $bookmark_block_gui->getHTML();\n\t}\n\n\t/**\n\t * imports a bookmark file into database\n\t * display status information or report errors messages\n\t * in case of error\n\t * @access    public\n\t */\n\tfunction importFile()\n\t{\n\t\tif(!$this->tree->isInTree($this->id))\n\t\t{\n\t\t\t$this->ctrl->setParameter($this, 'bmf_id', '');\n\t\t\t$this->ctrl->redirect($this);\n\t\t}\n\n\t\tif($_FILES[\"bkmfile\"][\"error\"] > UPLOAD_ERR_OK)\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"import_file_not_valid\"));\n\t\t\t$this->newFormBookmark();\n\t\t\treturn;\n\t\t}\n\t\trequire_once (\"./Services/Bookmarks/classes/class.ilBookmarkImportExport.php\");\n\t\t$objects = ilBookmarkImportExport::_parseFile($_FILES[\"bkmfile\"]['tmp_name']);\n\t\tif($objects === false)\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"import_file_not_valid\"));\n\t\t\t$this->newFormBookmark();\n\t\t\treturn;\n\t\t}\n\t\t// holds the number of created objects\n\t\t$num_create = array('bm'=> 0, 'bmf'=> 0);\n\t\t$this->__importBookmarks($objects, $num_create, $this->id, 0);\n\n\t\tilUtil::sendSuccess(sprintf($this->lng->txt(\"bkm_import_ok\"), $num_create['bm'],\n\t\t\t$num_create['bmf']));\n\t\t$this->view();\n\n\n\t}\n\n\t/**\n\t * creates the bookmarks and folders\n\t * @param    array            array of objects\n\t * @param    array            stores the number of created objects\n\t * @param    folder_id        id where to store the bookmarks\n\t * @param    start_key        key of the objects array where to start\n\t * @access    private\n\t */\n\tfunction __importBookmarks(&$objects, &$num_create, $folder_id, $start_key = 0)\n\t{\n\t\tif(is_array($objects[$start_key]))\n\t\t{\n\t\t\tforeach($objects[$start_key] as $obj_key=> $object)\n\t\t\t{\n\t\t\t\tswitch($object['type'])\n\t\t\t\t{\n\t\t\t\t\tcase 'bm':\n\t\t\t\t\t\tif(!$object[\"title\"]) continue;\n\t\t\t\t\t\tif(!$object[\"target\"]) continue;\n\t\t\t\t\t\t$bm = new ilBookmark();\n\t\t\t\t\t\t$bm->setTitle($object[\"title\"]);\n\t\t\t\t\t\t$bm->setDescription($object[\"description\"]);\n\t\t\t\t\t\t$bm->setTarget($object[\"target\"]);\n\t\t\t\t\t\t$bm->setParent($folder_id);\n\t\t\t\t\t\t$bm->create();\n\t\t\t\t\t\t$num_create['bm']++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bmf':\n\t\t\t\t\t\tif(!$object[\"title\"]) continue;\n\t\t\t\t\t\t$bmf = new ilBookmarkFolder();\n\t\t\t\t\t\t$bmf->setTitle($object[\"title\"]);\n\t\t\t\t\t\t$bmf->setParent($folder_id);\n\t\t\t\t\t\t$bmf->create();\n\t\t\t\t\t\t$num_create['bmf']++;\n\t\t\t\t\t\tif(is_array($objects[$obj_key]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$this->__importBookmarks($objects, $num_create,\n\t\t\t\t\t\t\t\t$bmf->getId(), $obj_key);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction move()\n\t{\n\t\t$ilUser = $this->user;\n\t\t$ilTabs = $this->tabs;\n\t\t$tpl = $this->tpl;\n\n\t\t$bm_ids = $_REQUEST['bm_id'];\n\t\tif(!$bm_ids && $_GET[\"bm_id_tgt\"] == \"\")\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"no_checkbox\"));\n\t\t\treturn $this->view();\n\t\t}\n\n\t\t$ilTabs->setBackTarget($this->lng->txt(\"back\"), $this->ctrl->getLinkTarget($this));\n\n\t\t$this->ctrl->setParameter($this, \"bm_id_tgt\", $_GET[\"bm_id_tgt\"] ?  $_GET[\"bm_id_tgt\"] : implode(\";\", $bm_ids));\n\t\tilUtil::sendInfo($this->lng->txt(\"bookmark_select_target\"));\n\t\tinclude_once(\"./Services/Bookmarks/classes/class.ilBookmarkMoveExplorerGUI.php\");\n\t\t$exp = new ilBookmarkMoveExplorerGUI($this, \"move\");\n\t\tif (!$exp->handleCommand())\n\t\t{\n\t\t\t$this->mode = \"flat\";\n\t\t\t$this->tpl->setContent($exp->getHTML());\n\t\t}\n\t}\n\n\tfunction confirmedMove()\n\t{\n\t\t$ilUser = $this->user;\n\n\t\t$tgt    = (int)$_REQUEST[\"bmfmv_id\"];\n\t\t$bm_ids = explode(\";\", $_REQUEST['bm_id_tgt']);\n\t\tif(!$bm_ids || !$tgt)\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"no_checkbox\"));\n\t\t\treturn $this->view();\n\t\t}\n\n\t\t$tree = new ilTree($ilUser->getId());\n\t\t$tree->setTableNames('bookmark_tree', 'bookmark_data');\n\n\t\t$tgt_node = $tree->getNodeData($tgt);\n\n\t\t// sanity check\n\t\tforeach($bm_ids as $node_id)\n\t\t{\n\t\t\tif($tree->isGrandChild($node_id, $tgt))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"error\"), true);\n\t\t\t\t$this->ctrl->redirect($this, \"view\");\n\t\t\t}\n\n\t\t\t$node = $tree->getNodeData($node_id);\n\n\t\t\t// already at correct position\n\t\t\tif($node[\"parent\"] == $tgt)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$tree->moveTree($node_id, $tgt);\n\t\t}\n\n\t\tilUtil::sendSuccess($this->lng->txt(\"bookmark_moved_ok\"), true);\n\t\t$this->ctrl->setParameter($this, \"bmf_id\", $tgt);\n\t\t$this->ctrl->redirect($this, \"view\");\n\t}\n}"], "filenames": ["Services/Bookmarks/classes/class.ilBookmarkAdministrationGUI.php"], "buggy_code_start_loc": [682], "buggy_code_end_loc": [864], "fixing_code_start_loc": [682], "fixing_code_end_loc": [856], "type": "CWE-601", "message": "ILIAS 5.1.x, 5.2.x, and 5.3.x before 5.3.5 redirects a logged-in user to a third-party site via the return_to_url parameter.", "other": {"cve": {"id": "CVE-2018-11119", "sourceIdentifier": "cve@mitre.org", "published": "2018-05-17T13:29:00.413", "lastModified": "2018-06-15T19:39:10.197", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ILIAS 5.1.x, 5.2.x, and 5.3.x before 5.3.5 redirects a logged-in user to a third-party site via the return_to_url parameter."}, {"lang": "es", "value": "ILIAS 5.1.x, 5.2.x y 5.3.x en versiones anteriores a la 5.3.5 redirecciona a un usuario que ha iniciado sesi\u00f3n a un sitio de terceros mediante el par\u00e1metro return_to_url."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.1.0", "versionEndIncluding": "5.1.26", "matchCriteriaId": "0F3792D7-FE39-4C56-B7D9-B67B0B0C94E8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2.0", "versionEndIncluding": "5.2.15", "matchCriteriaId": "5D26A1D2-92C7-4540-BE93-2FCFE7EAC5D3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.3.0", "versionEndIncluding": "5.3.4", "matchCriteriaId": "AE2188AF-D708-4548-80E4-72AB685C4DAF"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.1.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "98C8D659-2BE5-484E-B97E-BF821B106D47"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.2.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "A89A7A96-92A8-4222-8959-FA9A27601FE1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.2.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "F373F01C-F090-44A9-ACB6-030F8CB85402"}, {"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:5.2.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "992F70E2-77FA-4E92-A373-592960C9DF57"}]}]}], "references": [{"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/01a24cf04fe8dddf1da59ca497580637973482b6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.ilias.de/docu/goto.php?target=st_229", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/ILIAS-eLearning/ILIAS/commit/01a24cf04fe8dddf1da59ca497580637973482b6"}}