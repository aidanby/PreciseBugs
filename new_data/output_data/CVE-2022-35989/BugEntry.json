{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/nn_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/maxpooling_op.h\"\n\n#include <type_traits>\n#include <vector>\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/common_runtime/device.h\"\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_slice.h\"\n#include \"tensorflow/core/kernels/conv_2d.h\"\n#include \"tensorflow/core/kernels/eigen_pooling.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/kernels/pooling_ops_common.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/gtl/array_slice.h\"\n#include \"tensorflow/core/util/determinism.h\"\n#include \"tensorflow/core/util/env_var.h\"\n#include \"tensorflow/core/util/padding.h\"\n#include \"tensorflow/core/util/tensor_format.h\"\n#include \"tensorflow/core/util/use_cudnn.h\"\n\n#if GOOGLE_CUDA\n#include \"third_party/gpus/cudnn/cudnn.h\"\n#endif  // GOOGLE_CUDA\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/kernels/maxpooling_op_gpu.h\"\n#include \"tensorflow/core/kernels/pooling_ops_common_gpu.h\"\n#include \"tensorflow/core/platform/stream_executor.h\"\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nconst int kInvalidMaxPoolingIndex = -1;\n\ntemplate <typename Device, typename T, typename Targmax>\nstatic void SpatialMaxPoolWithArgMaxHelper(\n    OpKernelContext* context, Tensor* output, Tensor* output_arg_max,\n    Tensor* input_backprop, const Tensor& tensor_in, const Tensor& out_backprop,\n    const PoolParameters& params, const bool include_batch_in_index) {\n  if (input_backprop != nullptr) {\n    OP_REQUIRES(\n        context, include_batch_in_index,\n        errors::Internal(\n            \"SpatialMaxPoolWithArgMaxHelper requires include_batch_in_index \"\n            \"to be True when input_backprop != nullptr\"));\n    OP_REQUIRES(\n        context, (std::is_same<Targmax, int64_t>::value),\n        errors::Internal(\"SpatialMaxPoolWithArgMaxHelper requires Targmax \"\n                         \"to be int64 when input_backprop != nullptr\"));\n  }\n  if (tensor_in.NumElements() == 0 || output->NumElements() == 0) return;\n\n  typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n      ConstEigenMatrixMap;\n  typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n      EigenMatrixMap;\n  typedef Eigen::Map<Eigen::Matrix<Targmax, Eigen::Dynamic, Eigen::Dynamic>>\n      EigenIndexMatrixMap;\n\n  ConstEigenMatrixMap in_mat(\n      tensor_in.flat<T>().data(), params.depth,\n      params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);\n  EigenMatrixMap out_mat(\n      output->flat<T>().data(), params.depth,\n      params.out_width * params.out_height * params.tensor_in_batch);\n  EigenIndexMatrixMap out_arg_max_mat(\n      output_arg_max->flat<Targmax>().data(), params.depth,\n      params.out_width * params.out_height * params.tensor_in_batch);\n\n  const DeviceBase::CpuWorkerThreads& worker_threads =\n      *(context->device()->tensorflow_cpu_worker_threads());\n\n  // The following code basically does the following:\n  // 1. Flattens the input and output tensors into two dimensional arrays.\n  //    tensor_in_as_matrix:\n  //      depth by (tensor_in_cols * tensor_in_rows * tensor_in_batch)\n  //    output_as_matrix:\n  //      depth by (out_width * out_height * tensor_in_batch)\n  //\n  // 2. Walks through the set of columns in the flattened tensor_in_as_matrix,\n  //    and updates the corresponding column(s) in output_as_matrix with the\n  //    max value.\n  auto shard = [&params, &in_mat, &out_mat, &out_arg_max_mat, &input_backprop,\n                &output_arg_max, &out_backprop,\n                include_batch_in_index](int64_t start, int64_t limit) {\n    const int32_t depth = params.depth;\n    const int32_t in_rows = params.tensor_in_rows;\n    const int32_t in_cols = params.tensor_in_cols;\n    const int32_t pad_top = params.pad_top;\n    const int32_t pad_left = params.pad_left;\n    const int32_t window_rows = params.window_rows;\n    const int32_t window_cols = params.window_cols;\n    const int32_t row_stride = params.row_stride;\n    const int32_t col_stride = params.col_stride;\n    const int32_t out_height = params.out_height;\n    const int32_t out_width = params.out_width;\n\n    {\n      // Initializes the output tensor with MIN<T>.\n      const int32_t output_image_size = out_height * out_width * depth;\n      EigenMatrixMap out_shard(out_mat.data() + start * output_image_size, 1,\n                               (limit - start) * output_image_size);\n      out_shard.setConstant(Eigen::NumTraits<T>::lowest());\n      EigenIndexMatrixMap out_arg_max_shard(\n          out_arg_max_mat.data() + start * output_image_size, 1,\n          (limit - start) * output_image_size);\n      out_arg_max_shard.setConstant(kInvalidMaxPoolingIndex);\n    }\n\n    for (int64_t b = start; b < limit; ++b) {\n      for (int h = 0; h < in_rows; ++h) {\n        for (int w = 0; w < in_cols; ++w) {\n          // (h_start, h_end) * (w_start, w_end) is the range that the input\n          // vector projects to.\n          const int hpad = h + pad_top;\n          const int wpad = w + pad_left;\n          const int h_start =\n              (hpad < window_rows) ? 0 : (hpad - window_rows) / row_stride + 1;\n          const int h_end = std::min(hpad / row_stride + 1, out_height);\n          const int w_start =\n              (wpad < window_cols) ? 0 : (wpad - window_cols) / col_stride + 1;\n          const int w_end = std::min(wpad / col_stride + 1, out_width);\n          // compute elementwise max\n          const int64_t in_index = (b * in_rows + h) * in_cols + w;\n          for (int ph = h_start; ph < h_end; ++ph) {\n            const int64_t out_index_base = (b * out_height + ph) * out_width;\n            for (int pw = w_start; pw < w_end; ++pw) {\n              const int64_t out_index = out_index_base + pw;\n              /// NOTES(zhengxq): not using the eigen matrix operation for\n              /// now.\n              for (int d = 0; d < depth; ++d) {\n                const T& input_ref = in_mat.coeffRef(d, in_index);\n                T& output_ref = out_mat.coeffRef(d, out_index);\n                Targmax& out_arg_max_ref =\n                    out_arg_max_mat.coeffRef(d, out_index);\n                if (output_ref < input_ref ||\n                    out_arg_max_ref == kInvalidMaxPoolingIndex) {\n                  output_ref = input_ref;\n                  if (include_batch_in_index) {\n                    out_arg_max_ref = in_index * depth + d;\n                  } else {\n                    out_arg_max_ref = (h * in_cols + w) * depth + d;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (input_backprop != nullptr) {\n      auto input_backprop_flat = input_backprop->flat<T>();\n      auto out_arg_max_flat = output_arg_max->flat<int64_t>();\n      auto out_backprop_flat = out_backprop.flat<T>();\n\n      // Initialize output to 0.\n      const int64_t in_size = in_rows * in_cols * depth;\n      const int64_t in_start = start * in_size;\n      const int64_t in_end = limit * in_size;\n      EigenMatrixMap in_shard(input_backprop_flat.data() + in_start, 1,\n                              in_end - in_start);\n      in_shard.setConstant(T(0));\n\n      // Backpropagate.\n      const int out_size = out_height * out_width * depth;\n      const int out_start = start * out_size;\n      const int out_end = limit * out_size;\n      for (int index = out_start; index < out_end; ++index) {\n        int input_backprop_index = out_arg_max_flat(index);\n        // Although this check is in the inner loop, it is worth its value\n        // so we don't end up with memory corruptions. Our benchmark shows that\n        // the performance impact is quite small\n        // CHECK(input_backprop_index >= in_start && input_backprop_index <\n        // in_end)\n        FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);\n        if (index < out_backprop.NumElements()) {\n          input_backprop_flat(input_backprop_index) += out_backprop_flat(index);\n        }\n      }\n    }\n  };\n\n  const int64_t shard_cost = params.tensor_in_rows * params.tensor_in_cols *\n                             params.depth * params.window_rows *\n                             params.window_cols;\n  Shard(worker_threads.num_threads, worker_threads.workers,\n        params.tensor_in_batch, shard_cost, shard);\n}\n\n// The operation to compute MaxPool gradients.\n// It takes three inputs:\n//   - The original input tensor\n//   - The original output tensor\n//   - Backprop tensor for output\n// It produces one output: backprop tensor for input.\ntemplate <class Device, class T>\nclass MaxPoolingGradOp : public OpKernel {\n public:\n  explicit MaxPoolingGradOp(OpKernelConstruction* context) : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\"Default MaxPoolingGradOp only supports NHWC \",\n                                \"on device type \",\n                                DeviceTypeString(context->device_type())));\n\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n      OP_REQUIRES(\n          context, ksize_[3] == 1 && stride_[3] == 1,\n          errors::Unimplemented(\n              \"MaxPoolingGrad is not yet supported on the depth dimension.\"));\n    }\n\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n\n    if (padding_ == Padding::EXPLICIT) {\n      OP_REQUIRES_OK(\n          context, context->GetAttr(\"explicit_paddings\", &explicit_paddings_));\n      OP_REQUIRES_OK(context, CheckValidPadding(padding_, explicit_paddings_,\n                                                /*num_dims=*/4, data_format_));\n    }\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_backprop should have 4 dimensions.\n    OP_REQUIRES(context, out_backprop.dims() == 4,\n                errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));\n\n    const TensorShape& output_shape = tensor_in.shape();\n\n    Tensor tensor_out_dup;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_temp(\n                                {1}, DataTypeToEnum<T>::v(), tensor_out.shape(),\n                                &tensor_out_dup));\n    Tensor tensor_out_arg_max;\n    OP_REQUIRES_OK(context, context->allocate_temp(DataTypeToEnum<int64_t>::v(),\n                                                   tensor_out.shape(),\n                                                   &tensor_out_arg_max));\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, ksize[0] == 1 && stride[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES(\n        context, ksize[3] == 1 && stride[3] == 1,\n        errors::Unimplemented(\n            \"MaxPoolingGrad is not yet supported on the depth dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          explicit_paddings_,\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, tensor_out.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected orig_output shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", tensor_out.shape()));\n    OP_REQUIRES(context, out_backprop.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected grad shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", out_backprop.shape()));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {0}, 0, output_shape, &output));\n\n    SpatialMaxPoolWithArgMaxHelper<CPUDevice, T, int64_t>(\n        context, &tensor_out_dup, &tensor_out_arg_max, output, tensor_in,\n        out_backprop, params, true);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <class T>\nclass MaxPoolingGradOp<Eigen::GpuDevice, T> : public OpKernel {\n public:\n  typedef Eigen::GpuDevice Device;\n\n  explicit MaxPoolingGradOp(OpKernelConstruction* context) : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n      const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n      OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    if (padding_ == Padding::EXPLICIT) {\n      OP_REQUIRES_OK(\n          context, context->GetAttr(\"explicit_paddings\", &explicit_paddings_));\n      OP_REQUIRES_OK(context, CheckValidPadding(padding_, explicit_paddings_,\n                                                /*num_dims=*/4, data_format_));\n    }\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional 4\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_backprop should have 4 dimensions.\n    OP_REQUIRES(context, out_backprop.dims() == 4,\n                errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));\n\n    TensorShape output_shape = tensor_in.shape();\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    const int32_t ksize_n = GetTensorDim(ksize, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    int64_t pad_top, pad_bottom, pad_left, pad_right;\n    if (padding_ == Padding::EXPLICIT) {\n      GetExplicitPaddingForDim(explicit_paddings_, data_format_, 'H',\n                               /*pad_top=*/&pad_top,\n                               /*pad_bottom=*/&pad_bottom);\n      GetExplicitPaddingForDim(explicit_paddings_, data_format_, 'W',\n                               /*pad_left=*/&pad_left,\n                               /*pad_right=*/&pad_right);\n    }\n    DnnPoolingGradOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize,\n                                 stride, padding_, explicit_paddings_,\n                                 data_format_, &tensor_in, &tensor_out,\n                                 out_backprop, output_shape, propagate_nans_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n  bool propagate_nans_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// The operation to compute gradient of MaxPool gradients.\n// It takes three inputs:\n//   - The original input tensor\n//   - The original output tensor\n//   - Backprop tensor for output gradients\n// It produces one output: backprop tensor for output gradient.\ntemplate <class Device, class T>\nclass MaxPoolingGradGradOp : public OpKernel {\n public:\n  explicit MaxPoolingGradGradOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\n            \"Default MaxPoolingGradGradOp only supports NHWC \",\n            \"on device type \", DeviceTypeString(context->device_type())));\n\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n      OP_REQUIRES(context, ksize_[3] == 1 && stride_[3] == 1,\n                  errors::Unimplemented(\"MaxPoolingGradGrad is not yet \"\n                                        \"supported on the depth dimension.\"));\n    }\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_grad_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_grad_backprop should have 4 dimensions.\n    OP_REQUIRES(\n        context, out_grad_backprop.dims() == 4,\n        errors::InvalidArgument(\"out_grad_backprop must be 4-dimensional\"));\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, ksize[0] == 1 && stride[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES(\n        context, ksize[3] == 1 && stride[3] == 1,\n        errors::Unimplemented(\n            \"MaxPoolingGrad is not yet supported on the depth dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, tensor_out.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected orig_output shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", tensor_out.shape()));\n    OP_REQUIRES(\n        context, out_grad_backprop.shape() == tensor_in.shape(),\n        errors::InvalidArgument(\"Expected grad shape to be \", tensor_in.shape(),\n                                \", but got \", out_grad_backprop.shape()));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {2}, 0, tensor_out.shape(), &output));\n\n    SpatialMaxPoolGradGrad(context, output, tensor_in, tensor_out,\n                           out_grad_backprop, params, padding_);\n  }\n\n private:\n  void SpatialMaxPoolGradGrad(OpKernelContext* context, Tensor* bottom_diff,\n                              const Tensor& tensor_in, const Tensor& tensor_out,\n                              const Tensor& top_diff,\n                              const PoolParameters& params,\n                              const Padding& padding) {\n    typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n        ConstEigenMatrixMap;\n    typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n        EigenMatrixMap;\n\n    ConstEigenMatrixMap in_mat(\n        tensor_in.flat<T>().data(), params.depth,\n        params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);\n    ConstEigenMatrixMap out_mat(\n        tensor_out.flat<T>().data(), params.depth,\n        params.out_width * params.out_height * params.tensor_in_batch);\n    ConstEigenMatrixMap top_diff_mat(\n        top_diff.flat<T>().data(), params.depth,\n        params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);\n    EigenMatrixMap bottom_diff_mat(\n        bottom_diff->flat<T>().data(), params.depth,\n        params.out_width * params.out_height * params.tensor_in_batch);\n\n    const DeviceBase::CpuWorkerThreads& worker_threads =\n        *(context->device()->tensorflow_cpu_worker_threads());\n\n    // The following code basically does the following:\n    // 1. Flattens the input, output, top_diff and bottom_diff tensors into\n    //    two dimensional arrays.\n    //    tensor_in_as_matrix:\n    //      depth by (tensor_in_cols * tensor_in_rows * tensor_in_batch)\n    //    tensor_out_as_matrix:\n    //      depth by (out_width * out_height * tensor_in_batch)\n    //    top_diff_as_matrix:\n    //      depth by (tensor_in_cols * tensor_in_rows * tensor_in_batch)\n    //    bottom_diff_as_matrix:\n    //      depth by (out_width * out_height * tensor_in_batch)\n    //\n    // 2. Walks through the set of columns in the flattened\n    //    tensor_in_as_matrix, tensor_out_as_matrix, top_diff_as_matrix\n    //    and updates the column(s) corresponding to the maximum values in\n    //    tensor_out_as_matrix with the corresponding values in\n    //    top_diff_as_matrix.\n    auto shard = [&params, &in_mat, &out_mat, &top_diff_mat, &bottom_diff_mat](\n                     int64_t start, int64_t limit) {\n      const int32_t depth = params.depth;\n      const int32_t in_rows = params.tensor_in_rows;\n      const int32_t in_cols = params.tensor_in_cols;\n      const int32_t pad_top = params.pad_top;\n      const int32_t pad_left = params.pad_left;\n      const int32_t window_rows = params.window_rows;\n      const int32_t window_cols = params.window_cols;\n      const int32_t row_stride = params.row_stride;\n      const int32_t col_stride = params.col_stride;\n      const int32_t out_height = params.out_height;\n      const int32_t out_width = params.out_width;\n\n      {\n        // Initializes the output grad backprop tensor with 0.\n        const int32_t output_image_size = out_height * out_width * params.depth;\n        EigenMatrixMap bottom_diff_shard(\n            bottom_diff_mat.data() + start * output_image_size, 1,\n            (limit - start) * output_image_size);\n        bottom_diff_shard.setZero();\n      }\n\n      for (int b = start; b < limit; ++b) {\n        for (int ph = 0; ph < out_height; ++ph) {\n          for (int pw = 0; pw < out_width; ++pw) {\n            // (h_start, h_end) * (w_start, w_end) is the range that the input\n            // vector projects to.\n            int h_start = ph * row_stride - pad_top;\n            const int h_end = std::min(h_start + window_rows, in_rows);\n            int w_start = pw * col_stride - pad_left;\n            const int w_end = std::min(w_start + window_cols, in_cols);\n            h_start = std::max(h_start, 0);\n            w_start = std::max(w_start, 0);\n            const int out_index = (b * out_height + ph) * out_width + pw;\n            // Find value corresponding to the input maximum in top_diff.\n            for (int d = 0; d < depth; ++d) {\n              const T& output_ref = out_mat.coeffRef(d, out_index);\n              bool should_stop = false;\n              for (int h = h_start; h < h_end && !should_stop; ++h) {\n                for (int w = w_start; w < w_end && !should_stop; ++w) {\n                  const int in_index = (b * in_rows + h) * in_cols + w;\n                  const T& input_ref = in_mat.coeffRef(d, in_index);\n                  if (output_ref == input_ref) {\n                    T& bottom_diff_ref = bottom_diff_mat.coeffRef(d, out_index);\n                    bottom_diff_ref = top_diff_mat.coeffRef(d, in_index);\n                    should_stop = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    const int64_t shard_cost = params.out_width * params.out_height *\n                               params.depth * params.window_rows *\n                               params.window_cols;\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          params.tensor_in_batch, shard_cost, shard);\n  }\n\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <class T>\nclass MaxPoolingGradGradOp<Eigen::GpuDevice, T> : public OpKernel {\n public:\n  typedef Eigen::GpuDevice Device;\n\n  explicit MaxPoolingGradGradOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n      const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n      OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_grad_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional 4\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_grad_backprop should have 4 dimensions.\n    OP_REQUIRES(\n        context, out_grad_backprop.dims() == 4,\n        errors::InvalidArgument(\"out_grad_backprop must be 4-dimensional\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, tensor_out.shape(), &output));\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    const int32_t ksize_n = GetTensorDim(ksize, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, tensor_out.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected orig_output shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", tensor_out.shape()));\n    OP_REQUIRES(\n        context, out_grad_backprop.shape() == tensor_in.shape(),\n        errors::InvalidArgument(\"Expected grad shape to be \", tensor_in.shape(),\n                                \", but got \", out_grad_backprop.shape()));\n\n    functor::MaxPoolGradBackwardNoMask<T>()(\n        data_format_, tensor_in.flat<T>().data(), tensor_out.flat<T>().data(),\n        params.tensor_in_batch, params.out_height, params.out_width,\n        params.depth, params.tensor_in_rows, params.tensor_in_cols,\n        params.window_rows, params.window_cols, params.row_stride,\n        params.col_stride, params.pad_top, params.pad_left,\n        out_grad_backprop.flat<T>().data(), output->flat<T>().data(),\n        context->eigen_device<Eigen::GpuDevice>());\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n  bool use_dnn_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename T>\nstruct LaunchMaxPoolingNoMask;\n\ntemplate <typename Device, typename T>\nclass MaxPoolingNoMaskOp : public OpKernel {\n public:\n  explicit MaxPoolingNoMaskOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\n            \"Default MaxPoolingNoMaskOp only supports NHWC on device type \",\n            DeviceTypeString(context->device_type())));\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES(\n        context, padding_ != EXPLICIT,\n        errors::Unimplemented(\n            \"Explicit padding is not supported for MaxPoolingNoMaskOp.\"));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n\n    LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                              output);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n};\n\ntemplate <typename Device, typename T>\nclass MaxPoolingNoMaskV2Op : public OpKernel {\n public:\n  explicit MaxPoolingNoMaskV2Op(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\n            \"Default MaxPoolingNoMaskOp only supports NHWC on device type \",\n            DeviceTypeString(context->device_type())));\n    if (context->num_inputs() == 1) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window stride field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n\n    if (context->num_inputs() != 1) {\n      const Tensor& tensor_ksize = context->input(1);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(2);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, ksize[0] == 1 && stride[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n\n    LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                              output);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n};\n\ntemplate <typename Device, typename T, typename Targmax>\nstruct LaunchMaxPoolingWithArgmax;\n\ntemplate <typename T, typename Targmax>\nstruct LaunchMaxPoolingWithArgmax<CPUDevice, T, Targmax> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& input, Tensor* output, Tensor* argmax,\n                     bool propagate_nans, bool include_batch_in_index) {\n    Tensor unused;\n    SpatialMaxPoolWithArgMaxHelper<CPUDevice, T, Targmax>(\n        context, output, argmax, /*input_backprop=*/nullptr, input, unused,\n        params, include_batch_in_index);\n  }\n};\n\ntemplate <typename Device, typename T, typename Targmax>\nclass MaxPoolingWithArgmaxOp : public OpKernel {\n public:\n  explicit MaxPoolingWithArgmaxOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"include_batch_in_index\",\n                                             &include_batch_in_index_));\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional (2)\"));\n    OP_REQUIRES(context, tensor_in.NumElements() > 0,\n                errors::InvalidArgument(\"tensor_in must not be empty (2)\"));\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n    Tensor* argmax = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, out_shape, &argmax));\n\n    LaunchMaxPoolingWithArgmax<Device, T, Targmax>::launch(\n        context, params, tensor_in, output, argmax, propagate_nans_,\n        include_batch_in_index_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  bool propagate_nans_;\n  bool include_batch_in_index_;\n};\n\ntemplate <typename Device, typename T>\nstruct LaunchMaxPoolingGradWithArgmax;\n\ntemplate <typename T>\nstruct LaunchMaxPoolingGradWithArgmax<CPUDevice, T> {\n  typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n      EigenMatrixMap;\n\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& grad_in, const Tensor& argmax,\n                     Tensor* grad_out, const bool include_batch_in_index) {\n    const DeviceBase::CpuWorkerThreads& worker_threads =\n        *(context->device()->tensorflow_cpu_worker_threads());\n\n    auto shard = [&grad_in, &argmax, &grad_out, include_batch_in_index](\n                     int64_t start, int64_t limit) {\n      const int64_t batch_size =\n          GetTensorDim(grad_out->shape(), FORMAT_NHWC, 'N');\n      const int64_t output_size_per_batch =\n          grad_out->NumElements() / batch_size;\n      const int64_t input_size_per_batch = grad_in.NumElements() / batch_size;\n\n      {\n        auto grad_out_flat = grad_out->flat<T>();\n        auto argmax_flat = argmax.flat<int64_t>();\n        auto grad_in_flat = grad_in.flat<T>();\n\n        const int64_t output_start = start * output_size_per_batch;\n        const int64_t output_end = limit * output_size_per_batch;\n        EigenMatrixMap inputShard(grad_out_flat.data() + output_start, 1,\n                                  output_end - output_start);\n        inputShard.setConstant(T(0));\n\n        const int input_start = start * input_size_per_batch;\n        const int input_end = limit * input_size_per_batch;\n        for (int64_t index = input_start; index < input_end; index++) {\n          if (index >= argmax.NumElements()) {\n            break;\n          }\n          int64_t grad_out_index = argmax_flat(index);\n          if (!include_batch_in_index) {\n            const int64_t cur_batch = index / input_size_per_batch;\n            grad_out_index += cur_batch * output_size_per_batch;\n          }\n          CHECK(grad_out_index >= output_start && grad_out_index < output_end)\n              << \"Invalid output gradient index: \" << grad_out_index << \", \"\n              << output_start << \", \" << output_end;\n          grad_out_flat(grad_out_index) += grad_in_flat(index);\n        }\n      }\n    };\n\n    const int64_t batch_size =\n        GetTensorDim(grad_out->shape(), FORMAT_NHWC, 'N');\n    const int64_t shard_cost = grad_out->NumElements() / batch_size;\n    Shard(worker_threads.num_threads, worker_threads.workers, batch_size,\n          shard_cost, shard);\n  }\n};\n\n// TODO(b/175733711): Support int32 argmax type in MaxPoolGradWithArgmax op.\ntemplate <typename Device, typename T>\nclass MaxPoolingGradWithArgmaxOp : public OpKernel {\n public:\n  explicit MaxPoolingGradWithArgmaxOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format_str;\n    if (std::is_same<Device, GPUDevice>::value) {\n      OP_REQUIRES(context, !tensorflow::OpDeterminismRequired(),\n                  errors::Unimplemented(\"Determinism is not yet supported \"\n                                        \"for MaxPoolGradWithArgmax.\"));\n    }\n    auto status = context->GetAttr(\"data_format\", &data_format_str);\n    if (status.ok()) {\n      OP_REQUIRES(context, FormatFromString(data_format_str, &data_format_),\n                  errors::InvalidArgument(\"Invalid data format\"));\n    }\n\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"include_batch_in_index\",\n                                             &include_batch_in_index_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& grad_in = context->input(1);\n    const Tensor& argmax = context->input(2);\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, grad_in.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected grad shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", grad_in.shape()));\n    OP_REQUIRES(context, argmax.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected argmax shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", argmax.shape()));\n\n    TensorShape out_shape({params.tensor_in_batch, params.tensor_in_rows,\n                           params.tensor_in_cols, params.depth});\n    Tensor* grad_out = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {0}, 0, out_shape, &grad_out));\n\n    if (out_shape.num_elements() == 0) return;  // nothing to be done\n\n    LaunchMaxPoolingGradWithArgmax<Device, T>::launch(\n        context, params, grad_in, argmax, grad_out, include_batch_in_index_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n  bool include_batch_in_index_;\n};\n\ntemplate <typename Device, typename T>\nstruct LaunchMaxPoolingGradGradWithArgmax;\n\ntemplate <typename Device, typename T>\nclass MaxPoolingGradGradWithArgmaxOp : public OpKernel {\n public:\n  explicit MaxPoolingGradGradWithArgmaxOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"include_batch_in_index\",\n                                             &include_batch_in_index_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& grad_in = context->input(1);\n    const Tensor& argmax = context->input(2);\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(\n        context, grad_in.shape() == tensor_in.shape(),\n        errors::InvalidArgument(\"Expected grad shape to be \", tensor_in.shape(),\n                                \", but got \", grad_in.shape()));\n    OP_REQUIRES(context, argmax.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected argmax shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", argmax.shape()));\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n\n    Tensor* grad_out = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {0}, 0, out_shape, &grad_out));\n\n    LaunchMaxPoolingGradGradWithArgmax<Device, T>::launch(\n        context, params, grad_in, argmax, grad_out, include_batch_in_index_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  bool include_batch_in_index_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\ntemplate <typename T>\nclass MaxPoolingNoMaskOp<GPUDevice, T> : public OpKernel {\n public:\n  typedef GPUDevice Device;\n  explicit MaxPoolingNoMaskOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES_OK(context,\n                   context->GetAttr(\"explicit_paddings\", &explicit_paddings_));\n    const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    PoolParameters params{\n        context,      ksize_,           stride_, padding_, explicit_paddings_,\n        data_format_, tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape =\n        ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,\n                        params.out_width, params.depth);\n\n    // Assuming qint8 <--> NCHW_VECT_C (int8x4) here.\n    constexpr bool is_int8x4 = std::is_same<T, qint8>::value;\n    OP_REQUIRES(context, (is_int8x4 == (data_format_ == FORMAT_NCHW_VECT_C)),\n                errors::InvalidArgument(\n                    \"qint8 should be used with data_format NCHW_VECT_C.\"));\n\n#if CUDNN_VERSION >= 7300\n    DnnPoolingOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize_,\n                             stride_, padding_, explicit_paddings_,\n                             data_format_, tensor_in, out_shape,\n                             propagate_nans_);\n#else\n    // These is_int8x4 checks avoid linker errors for missing qint8 kernels.\n    if (!is_int8x4 && data_format_ == FORMAT_NCHW) {\n      DnnPoolingOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize_,\n                               stride_, padding_, explicit_paddings_,\n                               data_format_, tensor_in, out_shape,\n                               propagate_nans_);\n    } else {\n#if !defined(TENSORFLOW_USE_ROCM)\n      OP_REQUIRES(context, padding_ != EXPLICIT,\n                  errors::Unimplemented(\"Explicit padding is not supported \",\n                                        \"when CUDNN is not enabled.\"));\n#endif\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n      if (is_int8x4) {\n        LaunchMaxPoolingNoMask_NCHW_VECT_C<Device>::launch(context, params,\n                                                           tensor_in, output);\n      } else if (data_format_ == FORMAT_NHWC) {\n        LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                                  output, propagate_nans_);\n      } else {\n        LOG(FATAL) << \"MaxPool currently only supports the following (layout, \"\n                      \"type) combinations: (NHWC, non-qint8), \"\n                      \"(NCHW, non-qint8) or (NCHW_VECT_C, qint8). The \"\n                      \"requested combination (\"\n                   << ToString(data_format_) << \", \"\n                   << DataTypeString(DataTypeToEnum<T>::v())\n                   << \") is not supported.\";\n      }\n    }\n#endif\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n  bool propagate_nans_;\n};\n\ntemplate <typename T>\nclass MaxPoolingNoMaskV2Op<GPUDevice, T> : public OpKernel {\n public:\n  typedef GPUDevice Device;\n  explicit MaxPoolingNoMaskV2Op(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    if (context->num_inputs() == 1) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window stride field must \"\n                                          \"specify 4 dimensions\"));\n      const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n      const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n      OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n\n    if (context->num_inputs() != 1) {\n      const Tensor& tensor_ksize = context->input(1);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(2);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    const int32_t ksize_n = GetTensorDim(ksize, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape =\n        ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,\n                        params.out_width, params.depth);\n    if (data_format_ == FORMAT_NCHW) {\n      DnnPoolingOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize,\n                               stride, padding_, explicit_paddings_,\n                               data_format_, tensor_in, out_shape,\n                               propagate_nans_);\n    } else {\n      CHECK(data_format_ == FORMAT_NHWC)\n          << \"MaxPool only supports NCHW or NHWC format\";\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n      LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                                output, propagate_nans_);\n    }\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n  bool propagate_nans_;\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingNoMask<Eigen::GpuDevice, T> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& input, Tensor* output, bool propagate_nans) {\n    bool status = functor::MaxPoolForwardWithOptionalArgmax<T>()(\n        input.flat<T>().data(), params.tensor_in_batch, params.tensor_in_rows,\n        params.tensor_in_cols, params.depth, params.out_height,\n        params.out_width, params.window_rows, params.window_cols,\n        params.row_stride, params.col_stride, params.pad_top, params.pad_left,\n        output->flat<T>().data(), nullptr, context->eigen_gpu_device(),\n        propagate_nans, false);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolForwardNoMask\"));\n    }\n  }\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingWithArgmax<Eigen::GpuDevice, T, int64_t> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& input, Tensor* output, Tensor* argmax,\n                     bool propagate_nans, bool include_batch_in_index) {\n    bool status = functor::MaxPoolForwardWithOptionalArgmax<T>()(\n        input.flat<T>().data(), params.tensor_in_batch, params.tensor_in_rows,\n        params.tensor_in_cols, params.depth, params.out_height,\n        params.out_width, params.window_rows, params.window_cols,\n        params.row_stride, params.col_stride, params.pad_top, params.pad_left,\n        output->flat<T>().data(),\n        reinterpret_cast<int64_t*>(argmax->flat<int64_t>().data()),\n        context->eigen_gpu_device(), propagate_nans, include_batch_in_index);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolForwardWithArgmax\"));\n    }\n  }\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingGradWithArgmax<Eigen::GpuDevice, T> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& grad_in, const Tensor& argmax,\n                     Tensor* grad_out, const bool include_batch_in_index) {\n    const int input_size = params.tensor_in_batch * params.tensor_in_rows *\n                           params.tensor_in_cols * params.depth;\n    const int output_size = params.tensor_in_batch * params.out_height *\n                            params.out_width * params.depth;\n    const int top_offset = params.out_height * params.out_width * params.depth;\n    const int bottom_offset =\n        params.tensor_in_rows * params.tensor_in_cols * params.depth;\n    bool status = functor::MaxPoolBackwardWithArgmax<T>()(\n        output_size, input_size, grad_in.flat<T>().data(),\n        reinterpret_cast<const int64_t*>(argmax.flat<int64_t>().data()),\n        top_offset, bottom_offset, grad_out->flat<T>().data(),\n        context->eigen_gpu_device(), include_batch_in_index);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolBackwardWithArgmax\"));\n    }\n  }\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingGradGradWithArgmax<Eigen::GpuDevice, T> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& grad_in, const Tensor& argmax,\n                     Tensor* grad_out, const bool include_batch_in_index) {\n    const int input_size = params.tensor_in_batch * params.tensor_in_rows *\n                           params.tensor_in_cols * params.depth;\n    const int output_size = params.tensor_in_batch * params.out_height *\n                            params.out_width * params.depth;\n    const int top_offset =\n        params.tensor_in_rows * params.tensor_in_cols * params.depth;\n    const int bottom_offset =\n        params.out_width * params.out_height * params.depth;\n    bool status = functor::MaxPoolGradBackwardWithArgmax<T>()(\n        output_size, input_size, grad_in.flat<T>().data(),\n        reinterpret_cast<const int64_t*>(argmax.flat<int64_t>().data()),\n        top_offset, bottom_offset, grad_out->flat<T>().data(),\n        context->eigen_gpu_device(), include_batch_in_index);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolGradBackwardWithArgmax\"));\n    }\n  }\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_MAX_POOL_KERNELS(D, T)                                  \\\n  REGISTER_KERNEL_BUILDER(                                               \\\n      Name(\"MaxPoolGrad\").Device(DEVICE_##D).TypeConstraint<T>(\"T\"),     \\\n      MaxPoolingGradOp<D##Device, T>);                                   \\\n  REGISTER_KERNEL_BUILDER(                                               \\\n      Name(\"MaxPoolGradGrad\").Device(DEVICE_##D).TypeConstraint<T>(\"T\"), \\\n      MaxPoolingGradGradOp<D##Device, T>);                               \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradV2\")                          \\\n                              .Device(DEVICE_##D)                        \\\n                              .HostMemory(\"ksize\")                       \\\n                              .HostMemory(\"strides\")                     \\\n                              .TypeConstraint<T>(\"T\"),                   \\\n                          MaxPoolingGradOp<D##Device, T>);               \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradGradV2\")                      \\\n                              .Device(DEVICE_##D)                        \\\n                              .HostMemory(\"ksize\")                       \\\n                              .HostMemory(\"strides\")                     \\\n                              .TypeConstraint<T>(\"T\"),                   \\\n                          MaxPoolingGradGradOp<D##Device, T>)            \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolWithArgmax\")                      \\\n                              .Device(DEVICE_##D)                        \\\n                              .TypeConstraint<int64_t>(\"Targmax\")        \\\n                              .TypeConstraint<T>(\"T\"),                   \\\n                          MaxPoolingWithArgmaxOp<D##Device, T, int64>);  \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradWithArgmax\")                  \\\n                              .Device(DEVICE_##D)                        \\\n                              .TypeConstraint<T>(\"T\")                    \\\n                              .TypeConstraint<int64_t>(\"Targmax\"),       \\\n                          MaxPoolingGradWithArgmaxOp<D##Device, T>);\n\n// Below kernels implemented only for CPU device.\n#define REGISTER_CPU_ONLY_POOL_KERNELS(T)                          \\\n  REGISTER_KERNEL_BUILDER(                                         \\\n      Name(\"MaxPool\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"),   \\\n      MaxPoolingOp<CPUDevice, T>);                                 \\\n  REGISTER_KERNEL_BUILDER(                                         \\\n      Name(\"MaxPoolV2\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      MaxPoolingV2Op<CPUDevice, T>);                               \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolWithArgmax\")                \\\n                              .Device(DEVICE_CPU)                  \\\n                              .TypeConstraint<int32>(\"Targmax\")    \\\n                              .TypeConstraint<T>(\"T\"),             \\\n                          MaxPoolingWithArgmaxOp<CPUDevice, T, int32>);\nTF_CALL_REAL_NUMBER_TYPES(REGISTER_CPU_ONLY_POOL_KERNELS);\n#undef REGISTER_CPU_ONLY_POOL_KERNELS\n\n#define REGISTER_CPU_MAX_POOL_KERNELS(T) REGISTER_MAX_POOL_KERNELS(CPU, T);\nTF_CALL_REAL_NUMBER_TYPES(REGISTER_CPU_MAX_POOL_KERNELS);\n#undef REGISTER_CPU_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// Forward declarations for the functor specializations for GPU.\nnamespace functor {\n#define DECLARE_GPU_SPEC(T)                                            \\\n  template <>                                                          \\\n  void SpatialMaxPooling<Eigen::GpuDevice, T>::operator()(             \\\n      const Eigen::GpuDevice& d, typename TTypes<T, 4>::Tensor output, \\\n      typename TTypes<T, 4>::ConstTensor input, int window_rows,       \\\n      int window_cols, int row_stride, int col_stride,                 \\\n      const Eigen::PaddingType& padding);                              \\\n  extern template struct SpatialMaxPooling<Eigen::GpuDevice, T>;\n\nTF_CALL_GPU_NUMBER_TYPES(DECLARE_GPU_SPEC);\n#undef DECLARE_GPU_SPEC\n}  // namespace functor\n\n#define REGISTER_GPU_MAX_POOL_KERNELS(T) REGISTER_MAX_POOL_KERNELS(GPU, T)\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_GPU_MAX_POOL_KERNELS);\n#undef REGISTER_GPU_MAX_POOL_KERNELS\n\n// Below kernels currently implemented only for GPU device.\n// Note(jiayq): Currently, the Caffe custom implementation is faster than the\n// default Eigen implementation so we are using the custom kernel as the\n// default. However, you can explicitly invoke the eigen version using\n// kernel_label_map.\n#define REGISTER_GPU_ONLY_POOL_KERNELS(T)                          \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPool\")                          \\\n                              .Device(DEVICE_GPU)                  \\\n                              .TypeConstraint<T>(\"T\")              \\\n                              .Label(\"eigen_tensor\"),              \\\n                          MaxPoolingOp<GPUDevice, T>);             \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")                        \\\n                              .Device(DEVICE_GPU)                  \\\n                              .HostMemory(\"ksize\")                 \\\n                              .HostMemory(\"strides\")               \\\n                              .TypeConstraint<T>(\"T\")              \\\n                              .Label(\"eigen_tensor\"),              \\\n                          MaxPoolingV2Op<GPUDevice, T>);           \\\n  REGISTER_KERNEL_BUILDER(                                         \\\n      Name(\"MaxPool\").Device(DEVICE_GPU).TypeConstraint<T>(\"T\"),   \\\n      MaxPoolingNoMaskOp<GPUDevice, T>);                           \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")                        \\\n                              .Device(DEVICE_GPU)                  \\\n                              .HostMemory(\"ksize\")                 \\\n                              .HostMemory(\"strides\")               \\\n                              .TypeConstraint<T>(\"T\"),             \\\n                          MaxPoolingNoMaskV2Op<GPUDevice, T>);     \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradGradWithArgmax\")        \\\n                              .Device(DEVICE_GPU)                  \\\n                              .TypeConstraint<T>(\"T\")              \\\n                              .TypeConstraint<int64_t>(\"Targmax\"), \\\n                          MaxPoolingGradGradWithArgmaxOp<GPUDevice, T>);\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_GPU_ONLY_POOL_KERNELS);\n\n// TODO(b/65847473): Re-enable once the underlying build error is fixed.\n#if !defined(PLATFORM_WINDOWS)\nREGISTER_KERNEL_BUILDER(\n    Name(\"MaxPool\").Device(DEVICE_GPU).TypeConstraint<qint8>(\"T\"),\n    MaxPoolingNoMaskOp<GPUDevice, qint8>);\n\nREGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"ksize\")\n                            .HostMemory(\"strides\")\n                            .TypeConstraint<qint8>(\"T\"),\n                        MaxPoolingV2Op<GPUDevice, qint8>);\n\nREGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"ksize\")\n                            .HostMemory(\"strides\")\n                            .TypeConstraint<qint8>(\"T\")\n                            .Label(\"eigen_tensor\"),\n                        MaxPoolingV2Op<GPUDevice, qint8>);\n#endif  // !defined(PLATFORM_WINDOWS)\n\n#undef REGISTER_GPU_ONLY_POOL_KERNELS\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#undef REGISTER_MAX_POOL_KERNELS\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for pooling operations.\"\"\"\n\nimport collections\nimport os\n\nfrom absl.testing import parameterized\nimport numpy as np\n\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors_impl\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nimport tensorflow.python.framework.config as config_exec\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gen_array_ops\nfrom tensorflow.python.ops import gen_nn_ops\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import nn_ops\nfrom tensorflow.python.ops import variables\nimport tensorflow.python.ops.nn_grad  # pylint: disable=unused-import\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.platform import tf_logging\n\n\ndef GetDeviceScope(self, use_gpu=False):\n  if context.executing_eagerly():\n    if use_gpu and test.is_gpu_available():\n      return ops.device(\"GPU:0\")\n    return ops.device(\"CPU:0\")\n  else:\n    return self.session(use_gpu=use_gpu)\n\n\n# TODO(jlebar): Convert the rest of this file to parameters.parameterized().\n# Then remove GetTestConfigs() and rename GetTestConfigsDicts().\ndef GetTestConfigsDicts(v1_fn,\n                        v2_fn=None,\n                        one_dimensional=False,\n                        allow_gpu=True):\n  # (data_format, use_gpu) tuple\n  if one_dimensional:\n    configs0 = [\n        (\"NWC\", False),\n        (\"NWC\", True),\n        (\"NCW\", True),\n    ]\n  else:\n    configs0 = [\n        (\"NHWC\", False),\n        (\"NHWC\", True),\n        (\"NCHW\", True),\n    ]\n    # NCHW_VECT_C only supported for max_pool.\n    if (v1_fn == nn_ops.max_pool or v1_fn == nn_ops.max_pool1d or\n        v2_fn == nn_ops.max_pool_v2 or v2_fn == gen_nn_ops.max_pool_v2):\n      configs0.append((\"NCHW_VECT_C\", True))\n\n  # (data_format, use_gpu, data_type) tuple\n  configs1 = []\n  for data_format, use_gpu in configs0:\n    configs1.append((data_format, use_gpu, dtypes.float32))\n\n    # In our test, VECT_C always uses float32.  (It gets converted to int8 in\n    # the test runner.)\n    if data_format == \"NCHW_VECT_C\":\n      continue\n\n    configs1 += [(data_format, use_gpu, dtypes.float16),\n                 (data_format, use_gpu, dtypes.float64)]\n\n  # Convert from tuple to dict and add v1/v2 versions.\n  ret = []\n  for data_format, use_gpu, data_type in configs1:\n    ret.append({\n        \"pool_func\": v1_fn,\n        \"data_format\": data_format,\n        \"data_type\": data_type,\n        \"use_gpu\": use_gpu,\n        \"v2\": False\n    })\n    if v2_fn:\n      ret.append({\n          \"pool_func\": v2_fn,\n          \"data_format\": data_format,\n          \"data_type\": data_type,\n          \"use_gpu\": use_gpu,\n          \"v2\": False\n      })\n      ret.append({\n          \"pool_func\": v2_fn,\n          \"data_format\": data_format,\n          \"data_type\": data_type,\n          \"use_gpu\": use_gpu,\n          \"v2\": True\n      })\n\n  # Filter out GPU configs if necessary.\n  if not allow_gpu:\n    ret = [c for c in ret if not c[\"use_gpu\"]]\n\n  return ret\n\n\ndef GetTestConfigs(include_nchw_vect_c=False, one_dimensional=False):\n  \"\"\"Get all the valid tests configs to run.\n\n  Args:\n    include_nchw_vect_c: Whether to include NCHW_VECT_C in the test configs.\n    one_dimensional: If it's a 1D test\n\n  Returns:\n    all the valid test configs as tuples of data_format and use_gpu.\n  \"\"\"\n  if one_dimensional:\n    test_configs = [(\"NWC\", False), (\"NWC\", True)]\n    if test.is_gpu_available(cuda_only=True):\n      test_configs += [(\"NCW\", True)]\n    return test_configs\n  test_configs = [(\"NHWC\", False), (\"NHWC\", True)]\n  if not test.is_gpu_available(cuda_only=True):\n    tf_logging.info(\"NCHW and NCHW_VECT_C tests skipped because not run with \"\n                    \"--config=cuda or no GPUs available.\")\n    return test_configs\n  # \"NCHW\" format is currently supported exclusively on CUDA GPUs.\n  test_configs += [(\"NCHW\", True)]\n  if include_nchw_vect_c:\n    if test.is_gpu_available(\n        cuda_only=True, min_cuda_compute_capability=(6, 1)):\n      test_configs += [(\"NCHW_VECT_C\", True)]\n    else:\n      tf_logging.info(\"NCHW_VECT_C test skipped because no GPUs with \"\n                      \"compute capability >= 6.1 are available.\")\n\n  return test_configs\n\n\ndef GetShrunkInceptionMaxPoolShapes(shrink=30):\n  \"\"\"Iterator for some of the max pool ops in the Inception 2015 model.\n\n  Args:\n    shrink: Factor to shrink depth relative to Inception.\n\n  Yields:\n    Tuple (name, input_size, filter_size, out_size, strides, padding)\n  \"\"\"\n  names = [\"maxpool2\", \"maxpool3\", \"maxpool4\", \"maxpool5\"]\n  input_sizes = [[32, 71, 71, 192], [32, 35, 35, 288], [32, 17, 17, 1248],\n                 [32, 8, 8, 2048]]\n  filter_sizes = [[1, 3, 3, 1], [1, 3, 3, 1], [1, 3, 3, 1], [1, 3, 3, 1]]\n  output_sizes = [[32, 35, 35, 192], [32, 17, 17, 288], [32, 8, 8, 1248],\n                  [32, 8, 8, 2048]]\n  strides = [[1, 2, 2, 1], [1, 2, 2, 1], [1, 2, 2, 1], [1, 1, 1, 1]]\n  # Shrink each depth value\n  for i in input_sizes:\n    i[3] //= shrink\n  for o in output_sizes:\n    o[3] //= shrink\n  paddings = [\"VALID\", \"VALID\", \"VALID\", \"SAME\"]\n  for n, i, f, o, s, p in zip(names, input_sizes, filter_sizes, output_sizes,\n                              strides, paddings):\n    yield n, i, f, o, s, p\n\n\n@test_util.with_eager_op_as_function\nclass PoolingTest(test.TestCase, parameterized.TestCase):\n\n  def _isMaxPool(self, func):\n    return func in (nn_ops.max_pool, nn_ops.max_pool_v2)\n\n  def _VerifyOneType(self, pool_func, input_sizes, ksize, strides, padding,\n                     data_format, data_type, expected, use_gpu, v2,\n                     use_negative_input=False):\n    \"\"\"Verifies the output values of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      ksize: The kernel size dimensions\n      strides: The stride dimensions\n      padding: Padding type.\n      data_format: The data format we use to run the pooling operation.\n      data_type: The data type to use to run the pooling operation.\n      expected: An array containing the expected operation outputs.\n      use_gpu: Whether we are running on GPU.\n      v2: Whether to use v2 version.\n      use_negative_input: If the input values should be negative.\n    \"\"\"\n    # Check that this test is compatible with the hardware we have.  (Really\n    # this should be done in GetTestConfigsDicts(), but when that runs, we\n    # haven't initialized enough of TF to know what our hardware is!)\n    if use_gpu and not test.is_gpu_available():\n      self.skipTest(\"No GPU is available.\")\n    if use_gpu and data_type == dtypes.float64 and test.is_built_with_rocm():\n      self.skipTest(\"ROCm pooling ops don't support float64.\")\n    if use_gpu and data_format == \"NCHW_VECT_C\" and not test.is_gpu_available(\n        cuda_only=True, min_cuda_compute_capability=(6, 1)):\n      self.skipTest(\"NCHW_VECT_C requires sm61+.\")\n\n    if v2 and data_format != \"NHWC\":\n      self.skipTest(\"v2 not supported for %s\" % data_format)\n    if v2 and not isinstance(padding, str):\n      self.skipTest(\"non-constant ksize/strides requires nonexplicit padding\")\n    if data_format == \"NCHW_VECT_C\":\n      if data_type != dtypes.float32:\n        self.skipTest(\"quantization to qint8 not implemented for %r\" %\n                      data_type)\n      if input_sizes[-1] % 4 != 0:\n        self.skipTest(\"Skipping test for depth %d\" % input_sizes[-1])\n\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    tf_logging.info(\"Running %s test. %r %r %d %r %r %r %s\", data_format, v2,\n                    input_sizes, total_size, pool_func, ksize, strides,\n                    data_type)\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1, wrapping round to -127 after 127 to support int8.\n    y = -1 if use_negative_input else 1\n    x = [(((f + 128) % 255) - 127)*y for f in range(total_size)]\n    with self.cached_session(use_gpu=use_gpu):\n      t = constant_op.constant(x, shape=input_sizes, dtype=data_type)\n      if data_format in (\"NCHW\", \"NCHW_VECT_C\", \"NCW\"):\n        if data_format == \"NCHW_VECT_C\":\n          t = test_util.NHWCToNCHW_VECT_C(t)\n          t, _, _ = gen_array_ops.quantize_v2(t, -128.0, 127.0, dtypes.qint8)\n        else:\n          t = test_util.NHWCToNCHW(t)\n        ksize = test_util.NHWCToNCHW(ksize)\n        strides = test_util.NHWCToNCHW(strides)\n        if isinstance(padding, list):\n          padding = test_util.NHWCToNCHW(padding)\n      ksize_placeholder = array_ops.placeholder(dtypes.int32, shape=[4])\n      strides_placeholder = array_ops.placeholder(dtypes.int32, shape=[4])\n      if v2:\n        t = pool_func(\n            t,\n            ksize=ksize_placeholder,\n            strides=strides_placeholder,\n            padding=padding,\n            data_format=data_format)\n      else:\n        t = pool_func(\n            t,\n            ksize=ksize,\n            strides=strides,\n            padding=padding,\n            data_format=data_format)\n      if data_format == \"NCHW_VECT_C\":\n        t = gen_array_ops.dequantize(t, -128, 127)\n        t = test_util.NCHW_VECT_CToNHWC(t)\n      elif data_format == \"NCHW\":\n        t = test_util.NCHWToNHWC(t)\n      if v2:\n        actual = t.eval(feed_dict={\n            ksize_placeholder: ksize,\n            strides_placeholder: strides\n        })\n      else:\n        actual = self.evaluate(t)\n        self.assertShapeEqual(actual, t)\n      self.assertAllCloseAccordingToType(expected, actual.flatten())\n\n  def _VerifyOneTest(self, pool_func, input_sizes, ksize, strides, padding,\n                     data_format, expected, use_gpu, v2,\n                     use_negative_input=False):\n    \"\"\"Verifies the output values of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      ksize: The kernel size dimensions\n      strides: The stride dimensions\n      padding: Padding type.\n      data_format: The data format we use to run the pooling operation.\n      expected: An array containing the expected operation outputs.\n      use_gpu: Whether we are running on GPU.\n      v2: Whether to use v2 version.\n      use_negative_input: If the input values should be negative.\"\n    \"\"\"\n    if data_format == \"NCHW_VECT_C\":\n      avg_pool_func = nn_ops.avg_pool\n      tf_logging.info(\"pool_func=%s\", pool_func)\n      if pool_func == avg_pool_func:\n        tf_logging.info(\"NCHW_VECT_C not yet implemented for avg_pool\")\n        return\n      if (self._isMaxPool(pool_func) and isinstance(padding, list)):\n        tf_logging.info(\"NCHW_VECT_C not yet implemented for max pool\" +\n                        \" with explicit padding\")\n        return\n\n    self._VerifyOneType(pool_func, input_sizes, ksize, strides, padding,\n                        data_format, dtypes.float32, expected, use_gpu, v2,\n                        use_negative_input)\n    if not test.is_built_with_rocm():\n      # double datatype is not supported for pooling ops on the ROCm platform\n      self._VerifyOneType(pool_func, input_sizes, ksize, strides, padding,\n                          data_format, dtypes.float64, expected, use_gpu, v2,\n                          use_negative_input)\n\n    if not use_gpu or test_util.GpuSupportsHalfMatMulAndConv():\n      self._VerifyOneType(pool_func, input_sizes, ksize, strides, padding,\n                          data_format, dtypes.float16, expected, use_gpu, v2,\n                          use_negative_input)\n\n  def _VerifyValues(self,\n                    pool_func,\n                    input_sizes,\n                    ksize,\n                    strides,\n                    padding,\n                    expected,\n                    use_gpu,\n                    v2=False,\n                    one_dim=False,\n                    use_negative_input=False):\n    \"\"\"Verifies the output values of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      ksize: The kernel size dimensions\n      strides: The stride dimensions\n      padding: Padding type.\n      expected: An array containing the expected operation outputs.\n      use_gpu: Whether we are running on GPU.\n      v2: Whether to use v2 version.\n      one_dim: If one dimensional pools should be done instead of two\n        dimensional pools.\n      use_negative_input: If the input values should be negative.\n    \"\"\"\n    for (data_format, use_gpu_2) in GetTestConfigs(\n        include_nchw_vect_c=True, one_dimensional=one_dim):\n      if use_gpu_2 == use_gpu:\n        self._VerifyOneTest(pool_func, input_sizes, ksize, strides, padding,\n                            data_format, expected, use_gpu, v2,\n                            use_negative_input)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolValidPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"VALID\",\n        expected=[7.0, 8.0, 9.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolEmpty(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 0],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"VALID\",\n        expected=[],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 2, 4, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[8.5, 9.5, 10.5, 14.5, 15.5, 16.5],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindow(self, **kwargs):\n    # input is:\n    # [1.0, 2.0\n    #  3.0  4.0]\n    #\n    # Window of [x, x] should do:\n    #  [avg(1.0, 2.0), avg(2.0, padded0),\n    #   avg(3.0, 4.0), avg(4.0, padded0)]\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 1],\n        ksize=[1, 1, 2, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[1.5, 2.0, 3.5, 4.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindow_2(self, **kwargs):\n    # Window of [x,\n    #            x] should do:\n    #  [avg(1.0, 3.0), avg(2.0, 4.0)\n    #   avg(3.0, padded0), avg(4.0, padded0)]\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 1],\n        ksize=[1, 2, 1, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[2.0, 3.0, 3.0, 4.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindowMultiBatch(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[2, 2, 2, 2],\n        ksize=[1, 1, 2, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[\n            2.0, 3.0, 3.0, 4.0, 6.0, 7.0, 7.0, 8.0, 10.0, 11.0, 11.0, 12.0,\n            14.0, 15.0, 15.0, 16.0\n        ],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindowMultiBatch_2(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[2, 2, 2, 2],\n        ksize=[1, 2, 1, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[\n            3.0, 4.0, 5.0, 6.0, 5.0, 6.0, 7.0, 8.0, 11.0, 12.0, 13.0, 14.0,\n            13.0, 14.0, 15.0, 16.0\n        ],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolValidPaddingUnevenStride(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 1, 2, 1],\n        padding=\"VALID\",\n        expected=[7.0, 8.0, 9.0, 16.0, 17.0, 18.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolValidPaddingUnevenStride_2(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 1, 1],\n        padding=\"VALID\",\n        expected=[7.0, 8.0, 9.0, 10.0, 11.0, 12.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePadding_2(self, **kwargs):\n    expected_output = [\n        11.0, 12.0, 13.0, 14.0, 19.0, 20.0, 21.0, 22.0, 43.0, 44.0, 45.0, 46.0,\n        51.0, 52.0, 53.0, 54.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 4],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingPacket_4(self, **kwargs):\n    expected_output = [\n        21.0, 22.0, 23.0, 24.0, 27.0, 28.0, 29.0, 30.0, 45.0, 46.0, 47.0, 48.0,\n        51.0, 52.0, 53.0, 54.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 4],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingPacket_8(self, **kwargs):\n    expected_output = [\n        -12.0, -11.0, -10.0, -9.0, -8.0, -7.0, -6.0, -5.0, 4.0, 5.0, 6.0, 7.0,\n        8.0, 9.0, 10.0, 11.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0,\n        32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, -3.5, -54.0, -53.0, -52.0,\n        -51.0, -50.0, -49.0, -48.0, -47.0, -38.0, -37.0, -36.0, -35.0, -34.0,\n        -33.0, -32.0, -31.0, -22.0, -21.0, -20.0, -19.0, -18.0, -17.0, -16.0,\n        -15.0, -10.0, -9.0, -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -11.0, -10.0,\n        -9.0, -8.0, -7.0, -6.0, -5.0, -4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\n        12.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 33.0, 34.0, 35.0,\n        36.0, 37.0, 38.0, -3.5, -2.5, -85.0, -84.0, -83.0, -82.0, -81.0, -80.0,\n        -79.0, -78.0, -69.0, -68.0, -67.0, -66.0, -65.0, -64.0, -63.0, -62.0,\n        -53.0, -52.0, -51.0, -50.0, -49.0, -48.0, -47.0, -46.0, -41.0, -40.0,\n        -39.0, -38.0, -37.0, -36.0, -35.0, -34.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolEmptyInput(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[0, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[],\n        **kwargs)\n\n  @test_util.run_in_graph_and_eager_modes\n  def testRawAvgPoolLargeKsizeRaiseError(self):\n    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n      with self.cached_session():\n        t = gen_nn_ops.avg_pool(\n            value=np.ones([1, 1, 1, 1]),\n            ksize=[1, 1e20, 1, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"SAME\",\n            data_format=\"NHWC\")\n        self.evaluate(t)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolValidPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"VALID\",\n        expected=[13.0, 14.0, 15.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 2, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[13.0, 14.0, 15.0, 16.0, 17.0, 18.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolZeroExplicitPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [0, 0], [0, 0], [0, 0]],\n        expected=[9.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolNegativeInputExpPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [2, 1], [2, 1], [0, 0]],\n        expected=[-1, -1, -1, -1],\n        use_negative_input=True,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPadding(self, **kwargs):\n    expected_output = [9.0, 9.0]\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [0, 2], [0, 1], [0, 0]],\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPaddingAdvanced(self, **kwargs):\n    expected_output = [7, 9, 11, 12, 19, 21, 23, 24, 31, 33, 35, 36, 31, 33,\n                       35, 36]\n    self._VerifyOneType(\n        input_sizes=[1, 6, 6, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [1, 2], [2, 1], [0, 0]],\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolNegativeInputExpPaddingAdv(self, **kwargs):\n    expected_output = [-1, -1, -3, -5, -7, -7, -9, -11, -19, -19, -21, -23, -31,\n                       -31, -33, -35]\n\n    self._VerifyOneType(\n        input_sizes=[1, 6, 6, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [1, 2], [2, 1], [0, 0]],\n        expected=expected_output,\n        use_negative_input=True,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPadding2_(self, **kwargs):\n    expected_output = [9.0, 9.0]\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [0, 2], [0, 1], [0, 0]],\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool1d, nn_ops.max_pool_v2, one_dimensional=True))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPadding_1D(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 1],\n        ksize=[1, 2, 1],\n        strides=[1, 2, 1],\n        padding=[[0, 0], [0, 1], [0, 0]],\n        expected=[2.0, 3.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePaddingNonSquareWindow(self, **kwargs):\n    # input is:\n    # [1.0, 2.0\n    #  3.0  4.0]\n    #\n    # Window of [x, x] should do:\n    #\n    #  [max(1.0, 2.0), max(2.0, padded0),\n    #   max(3.0, 4.0), max(4.0, padded0)]\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 1],\n        ksize=[1, 1, 2, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[2.0, 2.0, 4.0, 4.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolValidPaddingUnevenStride(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 1, 2, 1],\n        padding=\"VALID\",\n        expected=[6.0, 8.0, 10.0, 12.0, 14.0, 16.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolValidPaddingUnevenStride2_(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 1, 1],\n        padding=\"VALID\",\n        expected=[6.0, 7.0, 8.0, 14.0, 15.0, 16.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePaddingPacket4_(self, **kwargs):\n    expected_output = [\n        21.0, 22.0, 23.0, 24.0, 29.0, 30.0, 31.0, 32.0, 53.0, 54.0, 55.0, 56.0,\n        61.0, 62.0, 63.0, 64.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 4],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePaddingPacket8_(self, **kwargs):\n    expected_output = [\n        81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 97.0, 98.0, 99.0, 100.0,\n        101.0, 102.0, 103.0, 104.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0,\n        119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 120.0,\n        18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 34.0, 35.0, 36.0, 37.0,\n        38.0, 39.0, 40.0, 41.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0,\n        58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 82.0, 83.0, 84.0, 85.0,\n        86.0, 87.0, 88.0, 89.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0,\n        105.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0,\n        123.0, 124.0, 125.0, 126.0, 127.0, 120.0, 121.0, -45.0, -44.0, -43.0,\n        -42.0, -41.0, -40.0, -39.0, -38.0, -29.0, -28.0, -27.0, -26.0, -25.0,\n        -24.0, -23.0, -22.0, -13.0, -12.0, -11.0, -10.0, -9.0, -8.0, -7.0, -6.0,\n        -5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolEmptyInput(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[0, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[],\n        **kwargs)\n\n  # Tests for DepthwiseMaxPooling on CPU only.\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool, gen_nn_ops.max_pool_v2, allow_gpu=False))\n  @test_util.run_deprecated_v1\n  def testDepthwiseMaxPool1x1DepthWindow(self, **kwargs):\n    # input is:\n    # [1.0, ..., 10.0] along depth,\n    #\n    # We maxpool by depth in patches of 2.\n    self._VerifyOneType(\n        input_sizes=[1, 1, 1, 10],\n        ksize=[1, 1, 1, 2],\n        strides=[1, 1, 1, 2],\n        padding=\"SAME\",\n        expected=[2.0, 4.0, 6.0, 8.0, 10.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool, gen_nn_ops.max_pool_v2, allow_gpu=False))\n  @test_util.run_deprecated_v1\n  def testDepthwiseMaxPool2x2DepthWindow(self, **kwargs):\n    # input is:\n    #\n    # a 2x2x6 cube, and we depthwise max across 3 to produce a 2x2x2\n    # output.  Each node has contiguous values, so the depthwise max\n    # should be multiples of 3.0.\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 6],\n        ksize=[1, 1, 1, 3],\n        strides=[1, 1, 1, 3],\n        padding=\"SAME\",\n        expected=[3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool, gen_nn_ops.max_pool_v2, allow_gpu=False))\n  @test_util.run_deprecated_v1\n  def testMaxPoolKernelSmallerThanStrideValid(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 7, 7, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 3, 3, 1],\n        padding=\"VALID\",\n        expected=[9, 12, 30, 33],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolKernelSmallerThanStride(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 7, 7, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 3, 3, 1],\n        padding=\"VALID\",\n        expected=[5, 8, 26, 29],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2) +\n      GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testKernelSmallerThanStrideSame1_(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 1, 1, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[1, 3, 7, 9],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2) +\n      GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testKernelSmallerThanStrideSame2_(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 1],\n        ksize=[1, 1, 1, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[1, 3, 9, 11],\n        **kwargs)\n\n  def _testDepthwiseMaxPoolInvalidConfig(self,\n                                         in_size,\n                                         ksize,\n                                         strides,\n                                         error_msg,\n                                         use_gpu=False):\n    with self.cached_session(use_gpu=use_gpu):\n      t = constant_op.constant(1.0, shape=in_size)\n      with self.assertRaisesRegex(errors_impl.UnimplementedError, error_msg):\n        t = nn_ops.max_pool(\n            t, ksize=ksize, strides=strides, padding=\"SAME\").eval()\n\n  @test_util.disable_xla(\"b/123338077\")  # Passes with XLA\n  def testDepthwiseMaxPoolInvalidConfigs(self):\n    self._testDepthwiseMaxPoolInvalidConfig(\n        [1, 2, 2, 4], [1, 2, 2, 2], [1, 1, 1, 2],\n        \"exactly one of pooling across depth\")\n    self._testDepthwiseMaxPoolInvalidConfig(\n        [1, 2, 2, 4], [1, 1, 1, 2], [1, 1, 1, 1],\n        \"depth window to equal the depth stride\")\n    self._testDepthwiseMaxPoolInvalidConfig([1, 2, 2, 4], [1, 1, 1, 3],\n                                            [1, 1, 1, 3], \"evenly divide\")\n    if test.is_gpu_available():\n      with self.session():\n        t = variables.Variable(np.ones([1, 2, 2, 4]))\n        self.evaluate(variables.global_variables_initializer())\n        with self.assertRaisesOpError(\"for CPU devices\"):\n          nn_ops.max_pool(\n              t, ksize=[1, 1, 1, 2], strides=[1, 1, 1, 2],\n              padding=\"SAME\").eval()\n\n  # The following are tests that verify that the CPU and GPU implementations\n  # produce the same results.\n  def _CompareMaxPoolingFwd(self, input_shape, ksize, strides, padding):\n    # double datatype is currently not supported for pooling ops\n    # on the ROCm platform\n    for dtype in [np.float32, np.float16] \\\n        + [np.float64] if not test.is_built_with_rocm() else []:\n      tensor_input = np.random.rand(*input_shape).astype(dtype)\n      with self.cached_session():\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op, _ = nn_ops.max_pool_with_argmax(t, ksize, strides, padding)\n        gpu_val = self.evaluate(out_op)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = nn_ops.max_pool(t, ksize, strides, padding)\n        cpu_val = self.evaluate(out_op)\n      self.assertAllCloseAccordingToType(cpu_val, gpu_val)\n\n  def _CompareMaxPoolingBk(self, input_shape, output_shape, ksize, strides,\n                           padding):\n    # double datatype is currently not supported for pooling ops\n    # on the ROCm platform\n    for dtype in [np.float32, np.float16] \\\n        + [np.float64] if not test.is_built_with_rocm() else []:\n      # Generate numbers in a narrow range, so that there are many duplicates\n      # in the input.\n      tensor_input = np.random.random_integers(0, 3, input_shape).astype(dtype)\n      tensor_output = np.random.rand(*output_shape).astype(dtype)\n      with self.cached_session():\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        _, argmax_op = nn_ops.max_pool_with_argmax(t, ksize, strides, padding)\n        argmax = self.evaluate(argmax_op)\n        grad_in = constant_op.constant(tensor_output, shape=output_shape)\n        out_op = gen_nn_ops.max_pool_grad_with_argmax(t, grad_in, argmax, ksize,\n                                                      strides, padding)\n        gpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(gpu_val, out_op)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = nn_ops.max_pool(t, ksize, strides, padding)\n        orig_out = self.evaluate(out_op)\n        grad_in = constant_op.constant(tensor_output, shape=output_shape)\n        out_op = gen_nn_ops.max_pool_grad(t, orig_out, grad_in, ksize, strides,\n                                          padding)\n        cpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(cpu_val, out_op)\n      # The CPU version accumulates its gradient on fp16, so it's less\n      # accurate than the GPU version that does the accumulation on fp32\n      self.assertAllCloseAccordingToType(\n          cpu_val, gpu_val, half_rtol=0.01, half_atol=0.01)\n\n  def _CompareMaxPoolingGradBk(self, input_shape, output_shape, ksize, strides,\n                               padding):\n    # double datatype is currently not supported for pooling ops\n    # on the ROCm platform\n    for dtype in [np.float32, np.float16] \\\n        + [np.float64] if not test.is_built_with_rocm() else []:\n      # Generate numbers in a narrow range, so that there are many duplicates\n      # in the input.\n      tensor_input = np.random.random_integers(0, 3, input_shape).astype(dtype)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        _, argmax_op = nn_ops.max_pool_with_argmax(t, ksize, strides, padding)\n        argmax = self.evaluate(argmax_op)\n        grad_in = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = gen_nn_ops.max_pool_grad_grad_with_argmax(\n            t, grad_in, argmax, ksize, strides, padding)\n        gpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(gpu_val, out_op)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = nn_ops.max_pool(t, ksize, strides, padding)\n        orig_out = self.evaluate(out_op)\n        grad_in = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = gen_nn_ops.max_pool_grad_grad(t, orig_out, grad_in, ksize,\n                                               strides, padding)\n        cpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(cpu_val, out_op)\n      # The CPU version accumulates its gradient on fp16, so it's less\n      # accurate than the GPU version that does the accumulation on fp32\n      self.assertAllCloseAccordingToType(\n          cpu_val, gpu_val, half_rtol=0.01, half_atol=0.01)\n\n  def testMaxPoolingWithArgmax(self):\n    tensor_input = [\n        1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 1.0\n    ]\n\n    Config = collections.namedtuple(\n        \"Config\", [\"use_gpu\", \"include_batch_in_index\", \"argmax\", \"Targmax\"])\n    configs = [\n        Config(False, False, [0, 1, 3, 5, 0, 2, 6, 8], dtypes.int64),\n        Config(False, True, [0, 1, 3, 5, 9, 11, 15, 17], dtypes.int64),\n        Config(False, False, [0, 1, 3, 5, 0, 2, 6, 8], dtypes.int32),\n        Config(False, True, [0, 1, 3, 5, 9, 11, 15, 17], dtypes.int32),\n        Config(True, False, [0, 1, 3, 5, 0, 2, 6, 8], dtypes.int64),\n        Config(True, True, [0, 1, 3, 5, 9, 11, 15, 17], dtypes.int64),\n    ]\n\n    for config in configs:\n      with GetDeviceScope(self, use_gpu=config.use_gpu):\n        t = constant_op.constant(tensor_input, shape=[2, 3, 3, 1])\n        out_op, argmax_op = nn_ops.max_pool_with_argmax(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 1, 1, 1],\n            Targmax=config.Targmax,\n            padding=\"VALID\",\n            include_batch_in_index=config.include_batch_in_index)\n        out, argmax = self.evaluate([out_op, argmax_op])\n        self.assertShapeEqual(out, out_op)\n        self.assertShapeEqual(argmax, argmax_op)\n        self.assertAllClose(out.ravel(),\n                            [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n        self.assertAllEqual(argmax.ravel(), config.argmax)\n\n  def testMaxPoolingGradWithArgmax(self):\n    orig_input = [\n        1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 1.0\n    ]\n    tensor_input = [11.0, 12.0, 13.0, 14.0, 21.0, 22.0, 23.0, 24.0]\n\n    Config = collections.namedtuple(\n        \"Config\", [\"use_gpu\", \"include_batch_in_index\", \"argmax\"])\n    configs = [\n        Config(False, False, [0, 1, 3, 5, 0, 2, 6, 8]),\n        Config(False, True, [0, 1, 3, 5, 9, 11, 15, 17]),\n        Config(True, False, [0, 1, 3, 5, 0, 2, 6, 8]),\n        Config(True, True, [0, 1, 3, 5, 9, 11, 15, 17])\n    ]\n\n    for config in configs:\n      with GetDeviceScope(self, config.use_gpu):\n        orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n        t = constant_op.constant(tensor_input, shape=[2, 2, 2, 1])\n        argmax_t = constant_op.constant(\n            config.argmax, shape=[2, 2, 2, 1], dtype=dtypes.int64)\n        out_op = gen_nn_ops.max_pool_grad_with_argmax(\n            orig_in,\n            t,\n            argmax_t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"VALID\",\n            include_batch_in_index=config.include_batch_in_index)\n        out = self.evaluate(out_op).flatten()\n        self.assertAllClose(out, [\n            11.0, 12.0, 0.0, 13.0, 0.0, 14.0, 0.0, 0.0, 0.0, 21.0, 0.0, 22.0,\n            0.0, 0.0, 0.0, 23.0, 0.0, 24.0\n        ])\n\n  def testMaxPoolingGradThrowDeterminismError(self):\n    if test.is_gpu_available(cuda_only=True):\n      try:\n        config_exec.enable_op_determinism()\n        orig_input = [\n            1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 1.0\n        ]\n        tensor_input = [11.0, 12.0, 13.0, 14.0, 21.0, 22.0, 23.0, 24.0]\n\n        with GetDeviceScope(self, True):\n          orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n          t = constant_op.constant(tensor_input, shape=[2, 2, 2, 1])\n          argmax_t = constant_op.constant(\n              [0, 1, 3, 5, 0, 2, 6, 8], shape=[2, 2, 2, 1], dtype=dtypes.int64)\n          with self.assertRaisesRegexp(\n              errors_impl.UnimplementedError, \"Determinism is not yet supported \"\n              \"for MaxPoolGradWithArgmax.\"):\n            out_op = gen_nn_ops.max_pool_grad_with_argmax(\n                orig_in,\n                t,\n                argmax_t,\n                ksize=[1, 2, 2, 1],\n                strides=[1, 1, 1, 1],\n                padding=\"VALID\",\n                include_batch_in_index=False)\n            self.evaluate(out_op)\n      finally:\n        config_exec.disable_op_determinism()\n    else:\n      try:\n        config_exec.enable_op_determinism()\n        orig_input = [\n            1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 1.0\n        ]\n        tensor_input = [11.0, 12.0, 13.0, 14.0, 21.0, 22.0, 23.0, 24.0]\n\n        with GetDeviceScope(self, False):\n          orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n          t = constant_op.constant(tensor_input, shape=[2, 2, 2, 1])\n          argmax_t = constant_op.constant(\n              [0, 1, 3, 5, 0, 2, 6, 8], shape=[2, 2, 2, 1], dtype=dtypes.int64)\n          out_op = gen_nn_ops.max_pool_grad_with_argmax(\n              orig_in,\n              t,\n              argmax_t,\n              ksize=[1, 2, 2, 1],\n              strides=[1, 1, 1, 1],\n              padding=\"VALID\",\n              include_batch_in_index=False)\n          self.evaluate(out_op)\n      finally:\n        config_exec.disable_op_determinism()\n\n  def testMaxPoolingGradGradWithArgmax(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    orig_input = [\n        1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 1.0\n    ]\n    tensor_input = [\n        11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 21.0, 22.0, 23.0,\n        24.0, 25.0, 26.0, 27.0, 28.0, 29.0\n    ]\n\n    Config = collections.namedtuple(\n        \"Config\", [\"use_gpu\", \"include_batch_in_index\", \"argmax\"])\n    configs = [\n        Config(True, False, [0, 1, 3, 5, 0, 2, 6, 8]),\n        Config(True, True, [0, 1, 3, 5, 9, 11, 15, 17])\n    ]\n\n    for config in configs:\n      with GetDeviceScope(self, config.use_gpu):\n        orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n        t = constant_op.constant(tensor_input, shape=[2, 3, 3, 1])\n        argmax_t = constant_op.constant(\n            config.argmax, shape=[2, 2, 2, 1], dtype=dtypes.int64)\n        out_op = gen_nn_ops.max_pool_grad_grad_with_argmax(\n            orig_in,\n            t,\n            argmax_t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"VALID\",\n            include_batch_in_index=config.include_batch_in_index)\n        out = self.evaluate(out_op).flatten()\n        self.assertAllClose(out,\n                            [11.0, 12.0, 14.0, 16.0, 21.0, 23.0, 27.0, 29.0])\n\n  def _ConstructAndTestGradient(self,\n                                pool_func,\n                                input_sizes,\n                                output_sizes,\n                                window_rows,\n                                window_cols,\n                                row_stride,\n                                col_stride,\n                                padding,\n                                data_format,\n                                use_gpu,\n                                x_init_value=None):\n    \"\"\"Verifies the gradients of the max or avg pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      output_sizes: Output tensor dimensions.\n      window_rows: kernel size in row dim\n      window_cols: kernel size in col dim\n      row_stride: Row Stride.\n      col_stride: Col Stride.\n      padding: Padding type.\n      data_format: Data format.\n      use_gpu: whether we are running on GPU\n      x_init_value: Values to be passed to the gradient checker.\n    \"\"\"\n    assert input_sizes[0] == output_sizes[0]\n    assert input_sizes[3] == output_sizes[3]\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1.\n    x = [f * 1.0 for f in range(1, total_size + 1)]\n    with self.cached_session(use_gpu=use_gpu):\n      input_tensor = constant_op.constant(x, shape=input_sizes, name=\"input\")\n      if pool_func == nn_ops.avg_pool:\n        func_name = \"avg_pool\"\n        err_tolerance = 1e-4\n      else:\n        if x_init_value is None:\n          x_init_value = np.asfarray(\n              np.arange(1, total_size + 1),\n              dtype=np.float32).reshape(input_sizes)\n        func_name = \"max_pool\"\n        err_tolerance = 1e-3\n      if data_format == \"NCHW\":\n        ksize = [1, 1, window_rows, window_cols]\n        strides = [1, 1, row_stride, col_stride]\n        if isinstance(padding, list):\n          padding = test_util.NHWCToNCHW(padding)\n        t = test_util.NHWCToNCHW(input_tensor)\n      else:\n        ksize = [1, window_rows, window_cols, 1]\n        strides = [1, row_stride, col_stride, 1]\n        t = input_tensor\n      t = pool_func(\n          t,\n          ksize=ksize,\n          strides=strides,\n          padding=padding,\n          data_format=data_format,\n          name=func_name)\n      if data_format == \"NCHW\":\n        t = test_util.NCHWToNHWC(t)\n\n      err = gradient_checker.compute_gradient_error(\n          input_tensor,\n          input_sizes,\n          t,\n          output_sizes,\n          x_init_value=x_init_value,\n          delta=1e-2)\n    tf_logging.info(\"%s gradient error = %.4f\" % (func_name, err))\n    self.assertLess(err, err_tolerance)\n\n  def _ConstructAndTestSecondGradient(self,\n                                      pool_func,\n                                      input_sizes,\n                                      output_sizes,\n                                      window_rows,\n                                      window_cols,\n                                      row_stride,\n                                      col_stride,\n                                      padding,\n                                      data_format,\n                                      use_gpu,\n                                      x_init_value=None):\n    \"\"\"Verifies the second-order gradients of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      output_sizes: Output tensor dimensions.\n      window_rows: kernel size in row dim\n      window_cols: kernel size in col dim\n      row_stride: Row Stride.\n      col_stride: Col Stride.\n      padding: Padding type.\n      data_format: Data format.\n      use_gpu: whether we are running on GPU\n      x_init_value: Values to be passed to the gradient checker.\n    \"\"\"\n    assert input_sizes[0] == output_sizes[0]\n    assert input_sizes[3] == output_sizes[3]\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1.\n    x = [f * 1.0 for f in range(1, total_size + 1)]\n    with self.cached_session(use_gpu=use_gpu):\n      input_tensor = constant_op.constant(x, shape=input_sizes, name=\"input\")\n      if pool_func == nn_ops.avg_pool:\n        func_name = \"avg_pool\"\n        err_tolerance = 1e-3\n      else:\n        if x_init_value is None:\n          x_init_value = np.asfarray(\n              np.arange(1, total_size + 1),\n              dtype=np.float32).reshape(input_sizes)\n        func_name = \"max_pool\"\n        err_tolerance = 1e-2\n      if data_format == \"NCHW\":\n        ksize = [1, 1, window_rows, window_rows]\n        strides = [1, 1, row_stride, col_stride]\n        t = test_util.NHWCToNCHW(input_tensor)\n      else:\n        ksize = [1, window_rows, window_rows, 1]\n        strides = [1, row_stride, col_stride, 1]\n        t = input_tensor\n      t = pool_func(\n          t,\n          ksize=ksize,\n          strides=strides,\n          padding=padding,\n          data_format=data_format,\n          name=func_name)\n      if data_format == \"NCHW\":\n        t = test_util.NHWCToNCHW(t)\n\n      t_g = gradients_impl.gradients(t**2, input_tensor)[0]\n      err = gradient_checker.compute_gradient_error(\n          input_tensor,\n          input_sizes,\n          t_g,\n          input_sizes,\n          x_init_value=x_init_value,\n          delta=1e-2)\n    tf_logging.info(\"%s second-order gradient error = %.4f\" % (func_name, err))\n    self.assertLess(err, err_tolerance)\n\n  def _testMaxPoolGradValidPadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 3, 3, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding2_1_6(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 6, 6, 3],\n          output_sizes=[2, 5, 5, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding2_1_7(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 7, 7, 3],\n          output_sizes=[2, 6, 6, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding1_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 3, 3, 1],\n          output_sizes=[1, 2, 2, 1],\n          window_rows=1,\n          window_cols=1,\n          row_stride=2,\n          col_stride=2,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 2, 3],\n          output_sizes=[2, 1, 1, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding1_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 1, 2, 3],\n          window_rows=1,\n          window_cols=1,\n          row_stride=2,\n          col_stride=2,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding2_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 1, 2, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding3_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 7, 7, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPadding_1(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 7, 7, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [1, 1], [1, 1], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPadding_2(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 6, 8, 1],\n          window_rows=3,\n          window_cols=5,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [0, 1], [2, 3], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPaddingLeftGreater(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 6, 8, 1],\n          window_rows=3,\n          window_cols=5,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [0, 1], [3, 2], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPaddingBatchChannel(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[4, 7, 7, 3],\n          output_sizes=[4, 6, 8, 3],\n          window_rows=3,\n          window_cols=5,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [0, 1], [3, 2], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPaddingStrides(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 4, 3, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=2,\n          col_stride=3,\n          padding=[[0, 0], [1, 1], [1, 1], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGrad(self):\n    for (data_format, use_gpu) in GetTestConfigs():\n      self._testMaxPoolGradValidPadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding1_2(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding2_1_6(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding2_1_7(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding1_2(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding2_1(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding3_1(data_format, use_gpu)\n      self._testMaxPoolExplicitPadding_1(data_format, use_gpu)\n      self._testMaxPoolExplicitPadding_2(data_format, use_gpu)\n      self._testMaxPoolExplicitPaddingStrides(data_format, use_gpu)\n      self._testMaxPoolExplicitPaddingLeftGreater(data_format, use_gpu)\n      self._testMaxPoolExplicitPaddingBatchChannel(data_format, use_gpu)\n\n  def _MaxPoolGrad(self, orig_input, orig_output, grad, window_rows,\n                   window_cols, row_stride, col_stride, padding, v2):\n    \"\"\"Max Pooling Gradient.\n\n    Args:\n      orig_input: A float Tensor. The original input tensor.\n      orig_output: A float Tensor. The original output tensor.\n      grad: A float Tensor.\n        The 4D (batch x rows x cols x depth) output backprop.\n      window_rows: integer. Kernel size along rows dimension.\n      window_cols: integer. Kernel size along cols dimension.\n      row_stride: integer. Stride along rows dimension\n      col_stride: integer. Stride along cols dimension\n      padding: PoolingOpDef.Padding.  Padding type.\n\n    Returns:\n      A Tensor.\n    \"\"\"\n    pool_func = gen_nn_ops.max_pool_grad_v2 if v2 else gen_nn_ops.max_pool_grad\n    if v2:\n      return pool_func(orig_input, orig_output, grad,\n                       [1, window_rows, window_cols, 1],\n                       [1, row_stride, col_stride, 1], padding)\n    else:\n      padding, explicit_paddings = nn_ops.convert_padding(padding)\n      return pool_func(orig_input, orig_output, grad,\n                       [1, window_rows, window_cols, 1],\n                       [1, row_stride, col_stride, 1], padding,\n                       explicit_paddings)\n\n  def _testMaxPoolGradDirect(self, input_data, output_backprop,\n                             expected_input_backprop, input_sizes, output_sizes,\n                             window_rows, window_cols, row_stride, col_stride,\n                             padding, use_gpu, v2):\n    pool_func = gen_nn_ops.max_pool_v2 if v2 else nn_ops.max_pool\n    with self.cached_session(use_gpu=use_gpu):\n      input_tensor = variables.Variable(\n          np.array(input_data, dtype=np.float32).reshape(input_sizes))\n      self.evaluate(variables.global_variables_initializer())\n      output_tensor = pool_func(input_tensor, [1, window_rows, window_cols, 1],\n                                [1, row_stride, col_stride, 1], padding)\n      output_backprop_tensor = constant_op.constant(\n          output_backprop, shape=output_sizes)\n\n      input_backprop_tensor = self._MaxPoolGrad(\n          input_tensor, output_tensor, output_backprop_tensor, window_rows,\n          window_cols, row_stride, col_stride, padding, v2)\n\n      actual_input_backprop = self.evaluate(input_backprop_tensor)\n      self.assertShapeEqual(actual_input_backprop, input_backprop_tensor)\n      actual_input_backprop = actual_input_backprop.flatten()\n      actual_input_backprop = self._GetNdArray(actual_input_backprop)\n\n      actual_output = self.evaluate(output_tensor).flatten()\n      actual_output = self._GetNdArray(actual_output)\n\n      self.assertAllClose(\n          expected_input_backprop, actual_input_backprop, rtol=1e-6, atol=1e-6)\n\n  def _testMaxPoolGradDirect1_1(self):\n    input_data = [\n        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n        1.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        11.0, 12.0, 13.0, 0.0, 15.0, 16.0, 17.0, 0.0, 19.0, 20.0, 21.0, 0.0,\n        0.0, 0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [True, False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=\"VALID\",\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradDirect1_2(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 17.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [True, False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=\"VALID\",\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradDirect1_3(self):\n    input_data = [\n        1.0,\n        0.0,\n        1.0,\n        0.0,\n        0.0,\n        1.0,\n        0.0,\n        1.0,\n        1.0,\n        0.0,\n        1.0,\n        0.0,\n        0.0,\n        1.0,\n        0.0,\n        1.0,\n    ]\n    output_backprop = [\n        11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0,\n        23.0, 24.0, 25.0, 26.0\n    ]\n    expected_input_backprop = [\n        54,\n        0.0,\n        62,\n        0.0,\n        0.0,\n        60,\n        0.0,\n        22.0,\n        47,\n        0.0,\n        51,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [True, False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 4, 4, 1],\n            window_rows=3,\n            window_cols=3,\n            row_stride=1,\n            col_stride=1,\n            padding=\"SAME\",\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradZeroExplicitPadding(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 17.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=[[0, 0], [0, 0], [0, 0], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradExplicitPadding_1(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0,\n                       20.0, 21.0, 22.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 49.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 22.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 4, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=[[0, 0], [0, 0], [0, 1], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradExplicitPadding_2(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        54.0, 0.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 39.0, 0.0, 21.0, 0.0, 0.0,\n        0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=3,\n            window_cols=3,\n            row_stride=2,\n            col_stride=2,\n            padding=[[0, 0], [2, 1], [2, 1], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradExplicitPadding_3(self):\n    input_data = [\n        -1.0, -5.0, -1.0, -5.0, -5.0, -1.0, -5.0, -1.0, -1.0, -5.0, -1.0, -5.0,\n        -5.0, -1.0, -5.0, -1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0,\n                       20.0, 21.0, 22.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 49.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 22.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 4, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=[[0, 0], [0, 0], [0, 1], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  @test_util.no_xla_auto_jit(\"b/123923733\")  # NaNs handled differently\n  def _testMaxPoolGradDirectWithNans2_1(self):\n    input_data = [float(\"nan\")] * 16\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    # Test the CPU implementation, which propagates diffs in case of NaN\n    expected_input_backprop_tf_cpu = [\n        11.0, 12.0, 13.0, 0.0, 15.0, 16.0, 17.0, 0.0, 19.0, 20.0, 21.0, 0.0,\n        0.0, 0.0, 0.0, 0.0\n    ]\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_tf_cpu,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=False,\n          v2=v2)\n\n    if not test.is_gpu_available():\n      return\n\n    # The functionality associated with TF_ENABLE_NANPROP is currently\n    # not supported on the ROCm platform, so skip this part of the test\n    # NANs in input lead to non-deterministic results, and hence skipping\n    # the remaining tests altogether on the ROCm platform\n    if test.is_built_with_rocm():\n      return\n\n    # Test the GPU implementation that uses cudnn for now.\n    saved_nanprop = os.environ.get(\"TF_ENABLE_MAXPOOL_NANPROP\")\n    # Do not propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"0\"\n    expected_input_backprop_cudnn = [\n        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n        0.0, 0.0\n    ]\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    # Propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"1\"\n    expected_input_backprop_cudnn = expected_input_backprop_tf_cpu\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    if saved_nanprop:\n      os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = saved_nanprop\n    else:\n      del os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"]\n\n  @test_util.no_xla_auto_jit(\"b/123923733\")  # NaNs handled differently\n  def _testMaxPoolGradDirectWithNans2_2(self):\n    input_data = [float(\"nan\")] * 16\n    output_backprop = [\n        float(\"nan\"), 12.0, 13.0, 15.0,\n        float(\"nan\"), 17.0, 19.0, 20.0,\n        float(\"nan\")\n    ]\n    # Test the CPU implementation, which propagates diffs in case of NaN\n    expected_input_backprop_tf_cpu = [\n        float(\"nan\"), 12.0, 13.0, 0.0, 15.0,\n        float(\"nan\"), 17.0, 0.0, 19.0, 20.0,\n        float(\"nan\"), 0.0, 0.0, 0.0, 0.0, 0.0\n    ]\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_tf_cpu,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=False,\n          v2=v2)\n\n    if not test.is_gpu_available():\n      return\n\n    # The functionality associated with TF_ENABLE_NANPROP is currently\n    # not supported on the ROCm platform, so skip this part of the test\n    # NANs in input lead to non-deterministic results, and hence skipping\n    # the remaining tests altogether on the ROCm platform\n    if test.is_built_with_rocm():\n      return\n\n    # Test the GPU implementation that uses cudnn for now.\n    saved_nanprop = os.environ.get(\"TF_ENABLE_MAXPOOL_NANPROP\")\n    # Do not propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"0\"\n    expected_input_backprop_cudnn = [\n        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n        0.0, 0.0\n    ]\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    # Propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"1\"\n    expected_input_backprop_cudnn = expected_input_backprop_tf_cpu\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    if saved_nanprop:\n      os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = saved_nanprop\n    else:\n      del os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"]\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradDirect(self):\n    self._testMaxPoolGradDirect1_1()\n    self._testMaxPoolGradDirect1_2()\n    self._testMaxPoolGradDirect1_3()\n    self._testMaxPoolGradDirectWithNans2_1()\n    self._testMaxPoolGradDirectWithNans2_2()\n    self._testMaxPoolGradZeroExplicitPadding()\n    self._testMaxPoolGradExplicitPadding_1()\n    self._testMaxPoolGradExplicitPadding_2()\n    self._testMaxPoolGradExplicitPadding_3()\n\n  def _testMaxPoolGradGradValidPadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[1, 3, 3, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradValidPadding2_1_6(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 6, 6, 3],\n          output_sizes=[2, 5, 5, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradValidPadding2_1_7(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 7, 7, 3],\n          output_sizes=[2, 6, 6, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradValidPadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 2, 3],\n          output_sizes=[2, 1, 1, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding2_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 1, 2, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding3_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 7, 7, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradGrad(self):\n    for (data_format, use_gpu) in GetTestConfigs():\n      self._testMaxPoolGradGradValidPadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradGradValidPadding2_1_6(data_format, use_gpu)\n      self._testMaxPoolGradGradValidPadding2_1_7(data_format, use_gpu)\n      self._testMaxPoolGradGradValidPadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding2_1(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding3_1(data_format, use_gpu)\n\n  def _MaxPoolGradGrad(self, orig_input, orig_output, grad, window_rows,\n                       window_cols, row_stride, col_stride, padding):\n    \"\"\"Max Pooling Second-Order Gradient.\n\n    Args:\n      orig_input: A float Tensor. The original input tensor.\n      orig_output: A float Tensor. The original output tensor.\n      grad: A float Tensor.\n        The 4D (batch x out_rows x out_cols x depth) output backprop.\n      window_rows: integer. Kernel size along rows dimension.\n      window_cols: integer. Kernel size along cols dimension.\n      row_stride: integer. Stride along rows dimension\n      col_stride: integer. Stride along cols dimension\n      padding: PoolingOpDef.Padding.  Padding type.\n\n    Returns:\n      A Tensor.\n    \"\"\"\n    return gen_nn_ops.max_pool_grad_grad(\n        orig_input, orig_output, grad, [1, window_rows, window_cols, 1],\n        [1, row_stride, col_stride, 1], padding)\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGrad(self):\n    for (data_format, use_gpu) in GetTestConfigs():\n      self._testAvgPoolGradValidPadding1_1(data_format, use_gpu)\n      self._testAvgPoolGradValidPadding1_2(data_format, use_gpu)\n      self._testAvgPoolGradValidPadding2_1(data_format, use_gpu)\n      self._testAvgPoolGradValidPadding2_2(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding1_1(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding1_2(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding2_1(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding2_2(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding3_1(data_format, use_gpu)\n\n  def _testAvgPoolGradValidPadding1_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 3, 3, 3],\n        output_sizes=[2, 3, 3, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=1,\n        col_stride=1,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradValidPadding1_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 3, 3, 3],\n        output_sizes=[2, 2, 2, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=2,\n        col_stride=2,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradValidPadding2_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 3, 3, 3],\n        output_sizes=[2, 2, 2, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=1,\n        col_stride=1,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradValidPadding2_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 2, 3],\n        output_sizes=[2, 1, 1, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=2,\n        col_stride=2,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding1_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 2, 4, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=1,\n        col_stride=1,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding1_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 1, 2, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=2,\n        col_stride=2,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding2_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 2, 4, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=1,\n        col_stride=1,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding2_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 1, 2, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=2,\n        col_stride=2,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding3_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[1, 7, 7, 1],\n        output_sizes=[1, 7, 7, 1],\n        window_rows=3,\n        window_cols=3,\n        row_stride=1,\n        col_stride=1,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  @test_util.run_deprecated_v1\n  def testShapeFunctionEdgeCases(self):\n    # All shapes unknown.\n    for pool_func in [nn_ops.max_pool, nn_ops.avg_pool]:\n      p = pool_func(\n          array_ops.placeholder(dtypes.float32),\n          ksize=[1, 1, 1, 1],\n          strides=[1, 1, 1, 1],\n          padding=\"SAME\")\n      self.assertEqual([None, None, None, None], p.get_shape().as_list())\n    p, am = nn_ops.max_pool_with_argmax(\n        array_ops.placeholder(dtypes.float32),\n        ksize=[1, 1, 1, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\")\n    self.assertEqual([None, None, None, None], p.get_shape().as_list())\n    self.assertEqual([None, None, None, None], am.get_shape().as_list())\n\n    # Incorrect input shape.\n    for pool_func in [\n        nn_ops.max_pool, nn_ops.avg_pool, nn_ops.max_pool_with_argmax\n    ]:\n      with self.assertRaises(ValueError):\n        pool_func(\n            array_ops.placeholder(dtypes.float32, shape=[1, 3]),\n            ksize=[1, 1, 1, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  @test_util.disable_xla(\"b/123337890\")  # Error messages differ\n  def testOpEdgeCases(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      pool_funcs = [nn_ops.max_pool, nn_ops.avg_pool]\n      if test.is_gpu_available():\n        pool_funcs.append(nn_ops.max_pool_with_argmax)\n      for pool_func in pool_funcs:\n        if pool_func != nn_ops.max_pool:\n          # Illegal strides.\n          with self.assertRaisesRegex(\n              errors_impl.UnimplementedError,\n              \"Pooling is not yet supported on the batch\"):\n            sess.run(\n                pool_func(\n                    array_ops.placeholder(dtypes.float32),\n                    ksize=[1, 1, 1, 1],\n                    strides=[2, 1, 1, 1],\n                    padding=\"SAME\"))\n\n        # Filter too large.\n        with self.assertRaisesRegex(ValueError, \"Negative dimension size\"):\n          sess.run(\n              pool_func(\n                  array_ops.placeholder(dtypes.float32, shape=[32, 20, 20, 3]),\n                  ksize=[1, 20, 21, 1],\n                  strides=[1, 1, 1, 1],\n                  padding=\"VALID\"))\n        with self.assertRaisesRegex(ValueError, \"Negative dimension size\"):\n          pool_func(\n              array_ops.placeholder(dtypes.float32, shape=[32, 20, 20, 3]),\n              ksize=[1, 21, 20, 1],\n              strides=[1, 1, 1, 1],\n              padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testEdgeCasesRaiseErrors(self):\n    with self.assertRaisesRegexp(\n        ValueError, \"NCHW_VECT_C.*is not supported with \"\n        \"explicit padding|XLA does not support pooling ops with explicit \"\n        \"padding\"):\n      nn_ops.max_pool(\n          array_ops.placeholder(dtypes.float32, shape=[1, 3, 3, 1]),\n          ksize=[1, 2, 2, 1],\n          strides=[1, 2, 2, 1],\n          padding=[[0, 0], [0, 1], [0, 1], [0, 0]],\n          data_format=\"NCHW_VECT_C\")\n    with self.assertRaisesRegexp(\n        ValueError, \"Explicit padding is not supported with an input \"\n                    \"tensor of rank 5\"):\n      nn_ops.max_pool_v2(\n          array_ops.placeholder(dtypes.float32, shape=[1, 3, 3, 1, 1]),\n          ksize=[1, 2, 2, 1, 1],\n          strides=[1, 2, 2, 1, 1],\n          padding=[[0, 0], [0, 1], [0, 1], [0, 0]],\n          data_format=\"NCHW\")\n    with self.assertRaisesRegexp(\n        ValueError, \"Attr 'padding' of 'MaxPoolV2' Op passed \"\n                    \"string 'EXPLICIT'\"):\n      gen_nn_ops.max_pool_v2(\n          array_ops.placeholder(dtypes.float32, shape=[1, 3, 3, 1, 1]),\n          ksize=[1, 2, 2, 1, 1],\n          strides=[1, 2, 2, 1, 1],\n          padding=\"EXPLICIT\",\n          data_format=\"NHWC\")\n\n  @test_util.run_deprecated_v1\n  def testEdgeCasesExcessPadding(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      with self.assertRaisesRegexp(\n          (errors_impl.UnimplementedError, errors_impl.InvalidArgumentError),\n          \"Right padding 2 needs to be smaller than the window size 2|\"\n          \"XLA does not support pooling ops with explicit padding\"):\n        input_sizes = [1, 3, 3, 1]\n        x = [(((f + 128) % 255) - 127) for f in range(9)]\n        t = constant_op.constant(x, shape=input_sizes, dtype=dtypes.float32)\n        sess.run(gen_nn_ops.max_pool(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"EXPLICIT\",\n            explicit_paddings=[0, 0, 0, 1, 0, 2, 0, 0],\n            data_format=\"NHWC\"))\n\n  @test_util.run_deprecated_v1\n  def testNegativePadding(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      with self.assertRaisesRegexp(\n          ValueError, \"All elements of explicit_paddings must be \"\n                      \"nonnegative for\"):\n        input_sizes = [1, 3, 3, 1]\n        x = [(((f + 128) % 255) - 127) for f in range(9)]\n        t = constant_op.constant(x, shape=input_sizes, dtype=dtypes.float32)\n        sess.run(gen_nn_ops.max_pool(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"EXPLICIT\",\n            explicit_paddings=[0, 0, -1, -1, -1, -1, 0, 0],\n            data_format=\"NHWC\"))\n\n  @test_util.run_deprecated_v1\n  def testExplicitPaddingBatch(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      with self.assertRaisesRegexp(\n          ValueError, \"Nonzero explicit padding in the batch or depth \"\n                      \"dimensions is not supported\"):\n        input_sizes = [1, 3, 3, 1]\n        x = [(((f + 128) % 255) - 127) for f in range(9)]\n        t = constant_op.constant(x, shape=input_sizes, dtype=dtypes.float32)\n        sess.run(gen_nn_ops.max_pool(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"EXPLICIT\",\n            explicit_paddings=[1, 1, 1, 1, 1, 1, 0, 0],\n            data_format=\"NHWC\"))\n\n  @test_util.disable_xla(\n      \"b/205634417\")  # XLA is not throwing shape errors for multiple *Grad ops.\n  def testMaxPoolGradEagerShapeErrors(self):\n    with context.eager_mode():\n      orig_in = array_ops.ones((1, 1, 1, 1))\n\n      # Test invalid orig_out shape\n      orig_out = array_ops.ones((1, 1, 1, 2))\n      grad = array_ops.ones((1, 1, 1, 1))\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected orig_output shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected orig_output shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n\n      # Test invalid grad shape\n      orig_out = array_ops.ones((1, 1, 1, 1))\n      grad = array_ops.ones((1, 1, 1, 2))\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n\n  def testMaxPoolGradWithArgmaxEagerShapeErrors(self):\n    with context.eager_mode():\n      inp = array_ops.ones((1, 1, 1, 1))\n\n      # Test invalid grad shape\n      grad = array_ops.ones((1, 1, 1, 2))\n      argmax = array_ops.zeros((1, 1, 1, 1), dtype=dtypes.int64)\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_with_argmax(\n            inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      # max_pool_grad_grad_with_argmax is only implemented for GPUs\n      if test.is_gpu_available():\n        with self.assertRaisesRegex(\n            errors_impl.InvalidArgumentError,\n            r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n          gen_nn_ops.max_pool_grad_grad_with_argmax(\n              inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n              padding=\"VALID\")\n\n      # Test invalid argmax shape\n      grad = array_ops.ones((1, 1, 1, 1))\n      argmax = array_ops.ones((1, 1, 1, 2), dtype=dtypes.int64)\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected argmax shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_with_argmax(\n            inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      # max_pool_grad_grad_with_argmax is only implemented for GPUs\n      if test.is_gpu_available():\n        with self.assertRaisesRegex(\n            errors_impl.InvalidArgumentError,\n            r\"Expected argmax shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n          gen_nn_ops.max_pool_grad_grad_with_argmax(\n              inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n              padding=\"VALID\")\n\n  def testAvgPoolGradInvalidInputShapeRaiseError(self):\n    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n      with self.cached_session():\n        orig_input_shape = constant_op.constant(\n            -536870912, shape=[4], dtype=dtypes.int32)\n        grad = constant_op.constant(\n            .0890338004362538, shape=[1, 5, 7, 1], dtype=dtypes.float64)\n        t = gen_nn_ops.AvgPoolGrad(\n            orig_input_shape=orig_input_shape,\n            grad=grad,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"VALID\",\n            data_format=\"NHWC\")\n        self.evaluate(t)\n\n\ndef GetMaxPoolFwdTest(input_size, filter_size, strides, padding):\n\n  def Test(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    self._CompareMaxPoolingFwd(input_size, filter_size, strides, padding)\n\n  return Test\n\n\ndef GetMaxPoolGradTest(input_size, filter_size, output_size, strides, padding):\n\n  def Test(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    self._CompareMaxPoolingBk(input_size, output_size, filter_size, strides,\n                              padding)\n\n  return Test\n\n\ndef GetMaxPoolGradGradTest(input_size, filter_size, output_size, strides,\n                           padding):\n\n  def Test(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    self._CompareMaxPoolingGradBk(input_size, output_size, filter_size, strides,\n                                  padding)\n\n  return Test\n\n\nif __name__ == \"__main__\":\n  for (name_, input_size_, filter_size_, output_size_, stride_,\n       padding_) in GetShrunkInceptionMaxPoolShapes():\n    setattr(PoolingTest, \"testMaxPoolFwd_\" + name_,\n            GetMaxPoolFwdTest(input_size_, filter_size_, stride_, padding_))\n    setattr(PoolingTest, \"testMaxPoolGrad_\" + name_,\n            GetMaxPoolGradTest(input_size_, filter_size_, output_size_, stride_,\n                               padding_))\n    setattr(PoolingTest, \"testMaxPoolGradGrad_\" + name_,\n            GetMaxPoolGradGradTest(input_size_, filter_size_, output_size_,\n                                   stride_, padding_))\n  test.main()\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/nn_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/maxpooling_op.h\"\n\n#include <type_traits>\n#include <vector>\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/common_runtime/device.h\"\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/numeric_op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_slice.h\"\n#include \"tensorflow/core/kernels/conv_2d.h\"\n#include \"tensorflow/core/kernels/eigen_pooling.h\"\n#include \"tensorflow/core/kernels/ops_util.h\"\n#include \"tensorflow/core/kernels/pooling_ops_common.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/gtl/array_slice.h\"\n#include \"tensorflow/core/util/determinism.h\"\n#include \"tensorflow/core/util/env_var.h\"\n#include \"tensorflow/core/util/padding.h\"\n#include \"tensorflow/core/util/tensor_format.h\"\n#include \"tensorflow/core/util/use_cudnn.h\"\n\n#if GOOGLE_CUDA\n#include \"third_party/gpus/cudnn/cudnn.h\"\n#endif  // GOOGLE_CUDA\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#include \"tensorflow/core/kernels/maxpooling_op_gpu.h\"\n#include \"tensorflow/core/kernels/pooling_ops_common_gpu.h\"\n#include \"tensorflow/core/platform/stream_executor.h\"\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nconst int kInvalidMaxPoolingIndex = -1;\n\ntemplate <typename Device, typename T, typename Targmax>\nstatic void SpatialMaxPoolWithArgMaxHelper(\n    OpKernelContext* context, Tensor* output, Tensor* output_arg_max,\n    Tensor* input_backprop, const Tensor& tensor_in, const Tensor& out_backprop,\n    const PoolParameters& params, const bool include_batch_in_index) {\n  if (input_backprop != nullptr) {\n    OP_REQUIRES(\n        context, include_batch_in_index,\n        errors::Internal(\n            \"SpatialMaxPoolWithArgMaxHelper requires include_batch_in_index \"\n            \"to be True when input_backprop != nullptr\"));\n    OP_REQUIRES(\n        context, (std::is_same<Targmax, int64_t>::value),\n        errors::Internal(\"SpatialMaxPoolWithArgMaxHelper requires Targmax \"\n                         \"to be int64 when input_backprop != nullptr\"));\n  }\n  if (tensor_in.NumElements() == 0 || output->NumElements() == 0) return;\n\n  typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n      ConstEigenMatrixMap;\n  typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n      EigenMatrixMap;\n  typedef Eigen::Map<Eigen::Matrix<Targmax, Eigen::Dynamic, Eigen::Dynamic>>\n      EigenIndexMatrixMap;\n\n  ConstEigenMatrixMap in_mat(\n      tensor_in.flat<T>().data(), params.depth,\n      params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);\n  EigenMatrixMap out_mat(\n      output->flat<T>().data(), params.depth,\n      params.out_width * params.out_height * params.tensor_in_batch);\n  EigenIndexMatrixMap out_arg_max_mat(\n      output_arg_max->flat<Targmax>().data(), params.depth,\n      params.out_width * params.out_height * params.tensor_in_batch);\n\n  const DeviceBase::CpuWorkerThreads& worker_threads =\n      *(context->device()->tensorflow_cpu_worker_threads());\n\n  // The following code basically does the following:\n  // 1. Flattens the input and output tensors into two dimensional arrays.\n  //    tensor_in_as_matrix:\n  //      depth by (tensor_in_cols * tensor_in_rows * tensor_in_batch)\n  //    output_as_matrix:\n  //      depth by (out_width * out_height * tensor_in_batch)\n  //\n  // 2. Walks through the set of columns in the flattened tensor_in_as_matrix,\n  //    and updates the corresponding column(s) in output_as_matrix with the\n  //    max value.\n  auto shard = [&params, &in_mat, &out_mat, &out_arg_max_mat, &input_backprop,\n                &output_arg_max, &out_backprop,\n                include_batch_in_index](int64_t start, int64_t limit) {\n    const int32_t depth = params.depth;\n    const int32_t in_rows = params.tensor_in_rows;\n    const int32_t in_cols = params.tensor_in_cols;\n    const int32_t pad_top = params.pad_top;\n    const int32_t pad_left = params.pad_left;\n    const int32_t window_rows = params.window_rows;\n    const int32_t window_cols = params.window_cols;\n    const int32_t row_stride = params.row_stride;\n    const int32_t col_stride = params.col_stride;\n    const int32_t out_height = params.out_height;\n    const int32_t out_width = params.out_width;\n\n    {\n      // Initializes the output tensor with MIN<T>.\n      const int32_t output_image_size = out_height * out_width * depth;\n      EigenMatrixMap out_shard(out_mat.data() + start * output_image_size, 1,\n                               (limit - start) * output_image_size);\n      out_shard.setConstant(Eigen::NumTraits<T>::lowest());\n      EigenIndexMatrixMap out_arg_max_shard(\n          out_arg_max_mat.data() + start * output_image_size, 1,\n          (limit - start) * output_image_size);\n      out_arg_max_shard.setConstant(kInvalidMaxPoolingIndex);\n    }\n\n    for (int64_t b = start; b < limit; ++b) {\n      for (int h = 0; h < in_rows; ++h) {\n        for (int w = 0; w < in_cols; ++w) {\n          // (h_start, h_end) * (w_start, w_end) is the range that the input\n          // vector projects to.\n          const int hpad = h + pad_top;\n          const int wpad = w + pad_left;\n          const int h_start =\n              (hpad < window_rows) ? 0 : (hpad - window_rows) / row_stride + 1;\n          const int h_end = std::min(hpad / row_stride + 1, out_height);\n          const int w_start =\n              (wpad < window_cols) ? 0 : (wpad - window_cols) / col_stride + 1;\n          const int w_end = std::min(wpad / col_stride + 1, out_width);\n          // compute elementwise max\n          const int64_t in_index = (b * in_rows + h) * in_cols + w;\n          for (int ph = h_start; ph < h_end; ++ph) {\n            const int64_t out_index_base = (b * out_height + ph) * out_width;\n            for (int pw = w_start; pw < w_end; ++pw) {\n              const int64_t out_index = out_index_base + pw;\n              /// NOTES(zhengxq): not using the eigen matrix operation for\n              /// now.\n              for (int d = 0; d < depth; ++d) {\n                const T& input_ref = in_mat.coeffRef(d, in_index);\n                T& output_ref = out_mat.coeffRef(d, out_index);\n                Targmax& out_arg_max_ref =\n                    out_arg_max_mat.coeffRef(d, out_index);\n                if (output_ref < input_ref ||\n                    out_arg_max_ref == kInvalidMaxPoolingIndex) {\n                  output_ref = input_ref;\n                  if (include_batch_in_index) {\n                    out_arg_max_ref = in_index * depth + d;\n                  } else {\n                    out_arg_max_ref = (h * in_cols + w) * depth + d;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    if (input_backprop != nullptr) {\n      auto input_backprop_flat = input_backprop->flat<T>();\n      auto out_arg_max_flat = output_arg_max->flat<int64_t>();\n      auto out_backprop_flat = out_backprop.flat<T>();\n\n      // Initialize output to 0.\n      const int64_t in_size = in_rows * in_cols * depth;\n      const int64_t in_start = start * in_size;\n      const int64_t in_end = limit * in_size;\n      EigenMatrixMap in_shard(input_backprop_flat.data() + in_start, 1,\n                              in_end - in_start);\n      in_shard.setConstant(T(0));\n\n      // Backpropagate.\n      const int out_size = out_height * out_width * depth;\n      const int out_start = start * out_size;\n      const int out_end = limit * out_size;\n      for (int index = out_start; index < out_end; ++index) {\n        int input_backprop_index = out_arg_max_flat(index);\n        // Although this check is in the inner loop, it is worth its value\n        // so we don't end up with memory corruptions. Our benchmark shows that\n        // the performance impact is quite small\n        // CHECK(input_backprop_index >= in_start && input_backprop_index <\n        // in_end)\n        FastBoundsCheck(input_backprop_index - in_start, in_end - in_start);\n        if (index < out_backprop.NumElements()) {\n          input_backprop_flat(input_backprop_index) += out_backprop_flat(index);\n        }\n      }\n    }\n  };\n\n  const int64_t shard_cost = params.tensor_in_rows * params.tensor_in_cols *\n                             params.depth * params.window_rows *\n                             params.window_cols;\n  Shard(worker_threads.num_threads, worker_threads.workers,\n        params.tensor_in_batch, shard_cost, shard);\n}\n\n// The operation to compute MaxPool gradients.\n// It takes three inputs:\n//   - The original input tensor\n//   - The original output tensor\n//   - Backprop tensor for output\n// It produces one output: backprop tensor for input.\ntemplate <class Device, class T>\nclass MaxPoolingGradOp : public OpKernel {\n public:\n  explicit MaxPoolingGradOp(OpKernelConstruction* context) : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\"Default MaxPoolingGradOp only supports NHWC \",\n                                \"on device type \",\n                                DeviceTypeString(context->device_type())));\n\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n      OP_REQUIRES(\n          context, ksize_[3] == 1 && stride_[3] == 1,\n          errors::Unimplemented(\n              \"MaxPoolingGrad is not yet supported on the depth dimension.\"));\n    }\n\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n\n    if (padding_ == Padding::EXPLICIT) {\n      OP_REQUIRES_OK(\n          context, context->GetAttr(\"explicit_paddings\", &explicit_paddings_));\n      OP_REQUIRES_OK(context, CheckValidPadding(padding_, explicit_paddings_,\n                                                /*num_dims=*/4, data_format_));\n    }\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_backprop should have 4 dimensions.\n    OP_REQUIRES(context, out_backprop.dims() == 4,\n                errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));\n\n    const TensorShape& output_shape = tensor_in.shape();\n\n    Tensor tensor_out_dup;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_temp(\n                                {1}, DataTypeToEnum<T>::v(), tensor_out.shape(),\n                                &tensor_out_dup));\n    Tensor tensor_out_arg_max;\n    OP_REQUIRES_OK(context, context->allocate_temp(DataTypeToEnum<int64_t>::v(),\n                                                   tensor_out.shape(),\n                                                   &tensor_out_arg_max));\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, ksize[0] == 1 && stride[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES(\n        context, ksize[3] == 1 && stride[3] == 1,\n        errors::Unimplemented(\n            \"MaxPoolingGrad is not yet supported on the depth dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          explicit_paddings_,\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, tensor_out.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected orig_output shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", tensor_out.shape()));\n    OP_REQUIRES(context, out_backprop.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected grad shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", out_backprop.shape()));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {0}, 0, output_shape, &output));\n\n    SpatialMaxPoolWithArgMaxHelper<CPUDevice, T, int64_t>(\n        context, &tensor_out_dup, &tensor_out_arg_max, output, tensor_in,\n        out_backprop, params, true);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <class T>\nclass MaxPoolingGradOp<Eigen::GpuDevice, T> : public OpKernel {\n public:\n  typedef Eigen::GpuDevice Device;\n\n  explicit MaxPoolingGradOp(OpKernelConstruction* context) : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n      const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n      OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    if (padding_ == Padding::EXPLICIT) {\n      OP_REQUIRES_OK(\n          context, context->GetAttr(\"explicit_paddings\", &explicit_paddings_));\n      OP_REQUIRES_OK(context, CheckValidPadding(padding_, explicit_paddings_,\n                                                /*num_dims=*/4, data_format_));\n    }\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional 4\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_backprop should have 4 dimensions.\n    OP_REQUIRES(context, out_backprop.dims() == 4,\n                errors::InvalidArgument(\"out_backprop must be 4-dimensional\"));\n\n    TensorShape output_shape = tensor_in.shape();\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    const int32_t ksize_n = GetTensorDim(ksize, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    int64_t pad_top, pad_bottom, pad_left, pad_right;\n    if (padding_ == Padding::EXPLICIT) {\n      GetExplicitPaddingForDim(explicit_paddings_, data_format_, 'H',\n                               /*pad_top=*/&pad_top,\n                               /*pad_bottom=*/&pad_bottom);\n      GetExplicitPaddingForDim(explicit_paddings_, data_format_, 'W',\n                               /*pad_left=*/&pad_left,\n                               /*pad_right=*/&pad_right);\n    }\n    DnnPoolingGradOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize,\n                                 stride, padding_, explicit_paddings_,\n                                 data_format_, &tensor_in, &tensor_out,\n                                 out_backprop, output_shape, propagate_nans_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n  bool propagate_nans_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// The operation to compute gradient of MaxPool gradients.\n// It takes three inputs:\n//   - The original input tensor\n//   - The original output tensor\n//   - Backprop tensor for output gradients\n// It produces one output: backprop tensor for output gradient.\ntemplate <class Device, class T>\nclass MaxPoolingGradGradOp : public OpKernel {\n public:\n  explicit MaxPoolingGradGradOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\n            \"Default MaxPoolingGradGradOp only supports NHWC \",\n            \"on device type \", DeviceTypeString(context->device_type())));\n\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n      OP_REQUIRES(context, ksize_[3] == 1 && stride_[3] == 1,\n                  errors::Unimplemented(\"MaxPoolingGradGrad is not yet \"\n                                        \"supported on the depth dimension.\"));\n    }\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_grad_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_grad_backprop should have 4 dimensions.\n    OP_REQUIRES(\n        context, out_grad_backprop.dims() == 4,\n        errors::InvalidArgument(\"out_grad_backprop must be 4-dimensional\"));\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, ksize[0] == 1 && stride[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES(\n        context, ksize[3] == 1 && stride[3] == 1,\n        errors::Unimplemented(\n            \"MaxPoolingGrad is not yet supported on the depth dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, tensor_out.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected orig_output shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", tensor_out.shape()));\n    OP_REQUIRES(\n        context, out_grad_backprop.shape() == tensor_in.shape(),\n        errors::InvalidArgument(\"Expected grad shape to be \", tensor_in.shape(),\n                                \", but got \", out_grad_backprop.shape()));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {2}, 0, tensor_out.shape(), &output));\n\n    SpatialMaxPoolGradGrad(context, output, tensor_in, tensor_out,\n                           out_grad_backprop, params, padding_);\n  }\n\n private:\n  void SpatialMaxPoolGradGrad(OpKernelContext* context, Tensor* bottom_diff,\n                              const Tensor& tensor_in, const Tensor& tensor_out,\n                              const Tensor& top_diff,\n                              const PoolParameters& params,\n                              const Padding& padding) {\n    typedef Eigen::Map<const Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n        ConstEigenMatrixMap;\n    typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n        EigenMatrixMap;\n\n    ConstEigenMatrixMap in_mat(\n        tensor_in.flat<T>().data(), params.depth,\n        params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);\n    ConstEigenMatrixMap out_mat(\n        tensor_out.flat<T>().data(), params.depth,\n        params.out_width * params.out_height * params.tensor_in_batch);\n    ConstEigenMatrixMap top_diff_mat(\n        top_diff.flat<T>().data(), params.depth,\n        params.tensor_in_cols * params.tensor_in_rows * params.tensor_in_batch);\n    EigenMatrixMap bottom_diff_mat(\n        bottom_diff->flat<T>().data(), params.depth,\n        params.out_width * params.out_height * params.tensor_in_batch);\n\n    const DeviceBase::CpuWorkerThreads& worker_threads =\n        *(context->device()->tensorflow_cpu_worker_threads());\n\n    // The following code basically does the following:\n    // 1. Flattens the input, output, top_diff and bottom_diff tensors into\n    //    two dimensional arrays.\n    //    tensor_in_as_matrix:\n    //      depth by (tensor_in_cols * tensor_in_rows * tensor_in_batch)\n    //    tensor_out_as_matrix:\n    //      depth by (out_width * out_height * tensor_in_batch)\n    //    top_diff_as_matrix:\n    //      depth by (tensor_in_cols * tensor_in_rows * tensor_in_batch)\n    //    bottom_diff_as_matrix:\n    //      depth by (out_width * out_height * tensor_in_batch)\n    //\n    // 2. Walks through the set of columns in the flattened\n    //    tensor_in_as_matrix, tensor_out_as_matrix, top_diff_as_matrix\n    //    and updates the column(s) corresponding to the maximum values in\n    //    tensor_out_as_matrix with the corresponding values in\n    //    top_diff_as_matrix.\n    auto shard = [&params, &in_mat, &out_mat, &top_diff_mat, &bottom_diff_mat](\n                     int64_t start, int64_t limit) {\n      const int32_t depth = params.depth;\n      const int32_t in_rows = params.tensor_in_rows;\n      const int32_t in_cols = params.tensor_in_cols;\n      const int32_t pad_top = params.pad_top;\n      const int32_t pad_left = params.pad_left;\n      const int32_t window_rows = params.window_rows;\n      const int32_t window_cols = params.window_cols;\n      const int32_t row_stride = params.row_stride;\n      const int32_t col_stride = params.col_stride;\n      const int32_t out_height = params.out_height;\n      const int32_t out_width = params.out_width;\n\n      {\n        // Initializes the output grad backprop tensor with 0.\n        const int32_t output_image_size = out_height * out_width * params.depth;\n        EigenMatrixMap bottom_diff_shard(\n            bottom_diff_mat.data() + start * output_image_size, 1,\n            (limit - start) * output_image_size);\n        bottom_diff_shard.setZero();\n      }\n\n      for (int b = start; b < limit; ++b) {\n        for (int ph = 0; ph < out_height; ++ph) {\n          for (int pw = 0; pw < out_width; ++pw) {\n            // (h_start, h_end) * (w_start, w_end) is the range that the input\n            // vector projects to.\n            int h_start = ph * row_stride - pad_top;\n            const int h_end = std::min(h_start + window_rows, in_rows);\n            int w_start = pw * col_stride - pad_left;\n            const int w_end = std::min(w_start + window_cols, in_cols);\n            h_start = std::max(h_start, 0);\n            w_start = std::max(w_start, 0);\n            const int out_index = (b * out_height + ph) * out_width + pw;\n            // Find value corresponding to the input maximum in top_diff.\n            for (int d = 0; d < depth; ++d) {\n              const T& output_ref = out_mat.coeffRef(d, out_index);\n              bool should_stop = false;\n              for (int h = h_start; h < h_end && !should_stop; ++h) {\n                for (int w = w_start; w < w_end && !should_stop; ++w) {\n                  const int in_index = (b * in_rows + h) * in_cols + w;\n                  const T& input_ref = in_mat.coeffRef(d, in_index);\n                  if (output_ref == input_ref) {\n                    T& bottom_diff_ref = bottom_diff_mat.coeffRef(d, out_index);\n                    bottom_diff_ref = top_diff_mat.coeffRef(d, in_index);\n                    should_stop = true;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    const int64_t shard_cost = params.out_width * params.out_height *\n                               params.depth * params.window_rows *\n                               params.window_cols;\n    Shard(worker_threads.num_threads, worker_threads.workers,\n          params.tensor_in_batch, shard_cost, shard);\n  }\n\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <class T>\nclass MaxPoolingGradGradOp<Eigen::GpuDevice, T> : public OpKernel {\n public:\n  typedef Eigen::GpuDevice Device;\n\n  explicit MaxPoolingGradGradOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    if (context->num_inputs() == 3) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window strides field must \"\n                                          \"specify 4 dimensions\"));\n      const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n      const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n      OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& tensor_out = context->input(1);\n    const Tensor& out_grad_backprop = context->input(2);\n\n    // For maxpooling, tensor_in should have 4 dimensions.\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional 4\"));\n    OP_REQUIRES(context, tensor_out.dims() == 4,\n                errors::InvalidArgument(\"tensor_out must be 4-dimensional\"));\n    // For maxpooling, out_grad_backprop should have 4 dimensions.\n    OP_REQUIRES(\n        context, out_grad_backprop.dims() == 4,\n        errors::InvalidArgument(\"out_grad_backprop must be 4-dimensional\"));\n\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, tensor_out.shape(), &output));\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n    if (context->num_inputs() == 5) {\n      const Tensor& tensor_ksize = context->input(3);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(4);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window strides field must \"\n                                        \"specify 4 dimensions\"));\n    const int32_t ksize_n = GetTensorDim(ksize, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, tensor_out.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected orig_output shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", tensor_out.shape()));\n    OP_REQUIRES(\n        context, out_grad_backprop.shape() == tensor_in.shape(),\n        errors::InvalidArgument(\"Expected grad shape to be \", tensor_in.shape(),\n                                \", but got \", out_grad_backprop.shape()));\n\n    functor::MaxPoolGradBackwardNoMask<T>()(\n        data_format_, tensor_in.flat<T>().data(), tensor_out.flat<T>().data(),\n        params.tensor_in_batch, params.out_height, params.out_width,\n        params.depth, params.tensor_in_rows, params.tensor_in_cols,\n        params.window_rows, params.window_cols, params.row_stride,\n        params.col_stride, params.pad_top, params.pad_left,\n        out_grad_backprop.flat<T>().data(), output->flat<T>().data(),\n        context->eigen_device<Eigen::GpuDevice>());\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n  bool use_dnn_;\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\ntemplate <typename Device, typename T>\nstruct LaunchMaxPoolingNoMask;\n\ntemplate <typename Device, typename T>\nclass MaxPoolingNoMaskOp : public OpKernel {\n public:\n  explicit MaxPoolingNoMaskOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\n            \"Default MaxPoolingNoMaskOp only supports NHWC on device type \",\n            DeviceTypeString(context->device_type())));\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES(\n        context, padding_ != EXPLICIT,\n        errors::Unimplemented(\n            \"Explicit padding is not supported for MaxPoolingNoMaskOp.\"));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n\n    LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                              output);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n};\n\ntemplate <typename Device, typename T>\nclass MaxPoolingNoMaskV2Op : public OpKernel {\n public:\n  explicit MaxPoolingNoMaskV2Op(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES(\n        context, data_format_ == FORMAT_NHWC,\n        errors::InvalidArgument(\n            \"Default MaxPoolingNoMaskOp only supports NHWC on device type \",\n            DeviceTypeString(context->device_type())));\n    if (context->num_inputs() == 1) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window stride field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n\n    if (context->num_inputs() != 1) {\n      const Tensor& tensor_ksize = context->input(1);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(2);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, ksize[0] == 1 && stride[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n\n    LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                              output);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n};\n\ntemplate <typename Device, typename T, typename Targmax>\nstruct LaunchMaxPoolingWithArgmax;\n\ntemplate <typename T, typename Targmax>\nstruct LaunchMaxPoolingWithArgmax<CPUDevice, T, Targmax> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& input, Tensor* output, Tensor* argmax,\n                     bool propagate_nans, bool include_batch_in_index) {\n    Tensor unused;\n    SpatialMaxPoolWithArgMaxHelper<CPUDevice, T, Targmax>(\n        context, output, argmax, /*input_backprop=*/nullptr, input, unused,\n        params, include_batch_in_index);\n  }\n};\n\ntemplate <typename Device, typename T, typename Targmax>\nclass MaxPoolingWithArgmaxOp : public OpKernel {\n public:\n  explicit MaxPoolingWithArgmaxOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"include_batch_in_index\",\n                                             &include_batch_in_index_));\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    OP_REQUIRES(context, tensor_in.dims() == 4,\n                errors::InvalidArgument(\"tensor_in must be 4-dimensional (2)\"));\n    OP_REQUIRES(context, tensor_in.NumElements() > 0,\n                errors::InvalidArgument(\"tensor_in must not be empty (2)\"));\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n    Tensor* output = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n    Tensor* argmax = nullptr;\n    OP_REQUIRES_OK(context, context->allocate_output(1, out_shape, &argmax));\n\n    LaunchMaxPoolingWithArgmax<Device, T, Targmax>::launch(\n        context, params, tensor_in, output, argmax, propagate_nans_,\n        include_batch_in_index_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  bool propagate_nans_;\n  bool include_batch_in_index_;\n};\n\ntemplate <typename Device, typename T>\nstruct LaunchMaxPoolingGradWithArgmax;\n\ntemplate <typename T>\nstruct LaunchMaxPoolingGradWithArgmax<CPUDevice, T> {\n  typedef Eigen::Map<Eigen::Matrix<T, Eigen::Dynamic, Eigen::Dynamic>>\n      EigenMatrixMap;\n\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& grad_in, const Tensor& argmax,\n                     Tensor* grad_out, const bool include_batch_in_index) {\n    const DeviceBase::CpuWorkerThreads& worker_threads =\n        *(context->device()->tensorflow_cpu_worker_threads());\n\n    auto shard = [&grad_in, &argmax, &grad_out, include_batch_in_index](\n                     int64_t start, int64_t limit) {\n      const int64_t batch_size =\n          GetTensorDim(grad_out->shape(), FORMAT_NHWC, 'N');\n      const int64_t output_size_per_batch =\n          grad_out->NumElements() / batch_size;\n      const int64_t input_size_per_batch = grad_in.NumElements() / batch_size;\n\n      {\n        auto grad_out_flat = grad_out->flat<T>();\n        auto argmax_flat = argmax.flat<int64_t>();\n        auto grad_in_flat = grad_in.flat<T>();\n\n        const int64_t output_start = start * output_size_per_batch;\n        const int64_t output_end = limit * output_size_per_batch;\n        EigenMatrixMap inputShard(grad_out_flat.data() + output_start, 1,\n                                  output_end - output_start);\n        inputShard.setConstant(T(0));\n\n        const int input_start = start * input_size_per_batch;\n        const int input_end = limit * input_size_per_batch;\n        for (int64_t index = input_start; index < input_end; index++) {\n          if (index >= argmax.NumElements()) {\n            break;\n          }\n          int64_t grad_out_index = argmax_flat(index);\n          if (!include_batch_in_index) {\n            const int64_t cur_batch = index / input_size_per_batch;\n            grad_out_index += cur_batch * output_size_per_batch;\n          }\n          CHECK(grad_out_index >= output_start && grad_out_index < output_end)\n              << \"Invalid output gradient index: \" << grad_out_index << \", \"\n              << output_start << \", \" << output_end;\n          grad_out_flat(grad_out_index) += grad_in_flat(index);\n        }\n      }\n    };\n\n    const int64_t batch_size =\n        GetTensorDim(grad_out->shape(), FORMAT_NHWC, 'N');\n    const int64_t shard_cost = grad_out->NumElements() / batch_size;\n    Shard(worker_threads.num_threads, worker_threads.workers, batch_size,\n          shard_cost, shard);\n  }\n};\n\n// TODO(b/175733711): Support int32 argmax type in MaxPoolGradWithArgmax op.\ntemplate <typename Device, typename T>\nclass MaxPoolingGradWithArgmaxOp : public OpKernel {\n public:\n  explicit MaxPoolingGradWithArgmaxOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format_str;\n    if (std::is_same<Device, GPUDevice>::value) {\n      OP_REQUIRES(context, !tensorflow::OpDeterminismRequired(),\n                  errors::Unimplemented(\"Determinism is not yet supported \"\n                                        \"for MaxPoolGradWithArgmax.\"));\n    }\n    auto status = context->GetAttr(\"data_format\", &data_format_str);\n    if (status.ok()) {\n      OP_REQUIRES(context, FormatFromString(data_format_str, &data_format_),\n                  errors::InvalidArgument(\"Invalid data format\"));\n    }\n\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"include_batch_in_index\",\n                                             &include_batch_in_index_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& grad_in = context->input(1);\n    const Tensor& argmax = context->input(2);\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(context, grad_in.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected grad shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", grad_in.shape()));\n    OP_REQUIRES(context, argmax.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected argmax shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", argmax.shape()));\n\n    TensorShape out_shape({params.tensor_in_batch, params.tensor_in_rows,\n                           params.tensor_in_cols, params.depth});\n    Tensor* grad_out = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {0}, 0, out_shape, &grad_out));\n\n    if (out_shape.num_elements() == 0) return;  // nothing to be done\n\n    LaunchMaxPoolingGradWithArgmax<Device, T>::launch(\n        context, params, grad_in, argmax, grad_out, include_batch_in_index_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  TensorFormat data_format_;\n  bool include_batch_in_index_;\n};\n\ntemplate <typename Device, typename T>\nstruct LaunchMaxPoolingGradGradWithArgmax;\n\ntemplate <typename Device, typename T>\nclass MaxPoolingGradGradWithArgmaxOp : public OpKernel {\n public:\n  explicit MaxPoolingGradGradWithArgmaxOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES(context, ksize_[0] == 1 && stride_[0] == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"include_batch_in_index\",\n                                             &include_batch_in_index_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n    const Tensor& grad_in = context->input(1);\n    const Tensor& argmax = context->input(2);\n\n    PoolParameters params{context,\n                          ksize_,\n                          stride_,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          FORMAT_NHWC,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n    OP_REQUIRES(\n        context, grad_in.shape() == tensor_in.shape(),\n        errors::InvalidArgument(\"Expected grad shape to be \", tensor_in.shape(),\n                                \", but got \", grad_in.shape()));\n    OP_REQUIRES(context, argmax.shape() == params.forward_output_shape(),\n                errors::InvalidArgument(\"Expected argmax shape to be \",\n                                        params.forward_output_shape(),\n                                        \", but got \", argmax.shape()));\n\n    TensorShape out_shape({params.tensor_in_batch, params.out_height,\n                           params.out_width, params.depth});\n\n    Tensor* grad_out = nullptr;\n    OP_REQUIRES_OK(context, context->forward_input_or_allocate_output(\n                                {0}, 0, out_shape, &grad_out));\n\n    LaunchMaxPoolingGradGradWithArgmax<Device, T>::launch(\n        context, params, grad_in, argmax, grad_out, include_batch_in_index_);\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  bool include_batch_in_index_;\n};\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\ntemplate <typename T>\nclass MaxPoolingNoMaskOp<GPUDevice, T> : public OpKernel {\n public:\n  typedef GPUDevice Device;\n  explicit MaxPoolingNoMaskOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n    OP_REQUIRES(context, ksize_.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n    OP_REQUIRES(context, stride_.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    OP_REQUIRES_OK(context,\n                   context->GetAttr(\"explicit_paddings\", &explicit_paddings_));\n    const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    PoolParameters params{\n        context,      ksize_,           stride_, padding_, explicit_paddings_,\n        data_format_, tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape =\n        ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,\n                        params.out_width, params.depth);\n\n    // Degenerate pooling output should return an empty tensor.\n    if (out_shape.num_elements() == 0) {\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n      return;\n    }\n\n    // Assuming qint8 <--> NCHW_VECT_C (int8x4) here.\n    constexpr bool is_int8x4 = std::is_same<T, qint8>::value;\n    OP_REQUIRES(context, (is_int8x4 == (data_format_ == FORMAT_NCHW_VECT_C)),\n                errors::InvalidArgument(\n                    \"qint8 should be used with data_format NCHW_VECT_C.\"));\n\n#if CUDNN_VERSION >= 7300\n    DnnPoolingOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize_,\n                             stride_, padding_, explicit_paddings_,\n                             data_format_, tensor_in, out_shape,\n                             propagate_nans_);\n#else\n    // These is_int8x4 checks avoid linker errors for missing qint8 kernels.\n    if (!is_int8x4 && data_format_ == FORMAT_NCHW) {\n      DnnPoolingOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize_,\n                               stride_, padding_, explicit_paddings_,\n                               data_format_, tensor_in, out_shape,\n                               propagate_nans_);\n    } else {\n#if !defined(TENSORFLOW_USE_ROCM)\n      OP_REQUIRES(context, padding_ != EXPLICIT,\n                  errors::Unimplemented(\"Explicit padding is not supported \",\n                                        \"when CUDNN is not enabled.\"));\n#endif\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n      if (is_int8x4) {\n        LaunchMaxPoolingNoMask_NCHW_VECT_C<Device>::launch(context, params,\n                                                           tensor_in, output);\n      } else if (data_format_ == FORMAT_NHWC) {\n        LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                                  output, propagate_nans_);\n      } else {\n        LOG(FATAL) << \"MaxPool currently only supports the following (layout, \"\n                      \"type) combinations: (NHWC, non-qint8), \"\n                      \"(NCHW, non-qint8) or (NCHW_VECT_C, qint8). The \"\n                      \"requested combination (\"\n                   << ToString(data_format_) << \", \"\n                   << DataTypeString(DataTypeToEnum<T>::v())\n                   << \") is not supported.\";\n      }\n    }\n#endif\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n  bool propagate_nans_;\n};\n\ntemplate <typename T>\nclass MaxPoolingNoMaskV2Op<GPUDevice, T> : public OpKernel {\n public:\n  typedef GPUDevice Device;\n  explicit MaxPoolingNoMaskV2Op(OpKernelConstruction* context)\n      : OpKernel(context) {\n    string data_format;\n    OP_REQUIRES_OK(context, context->GetAttr(\"data_format\", &data_format));\n    OP_REQUIRES(context, FormatFromString(data_format, &data_format_),\n                errors::InvalidArgument(\"Invalid data format\"));\n    if (context->num_inputs() == 1) {\n      OP_REQUIRES_OK(context, context->GetAttr(\"ksize\", &ksize_));\n      OP_REQUIRES(context, ksize_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window ksize field must \"\n                                          \"specify 4 dimensions\"));\n      OP_REQUIRES_OK(context, context->GetAttr(\"strides\", &stride_));\n      OP_REQUIRES(context, stride_.size() == 4,\n                  errors::InvalidArgument(\"Sliding window stride field must \"\n                                          \"specify 4 dimensions\"));\n      const int32_t ksize_n = GetTensorDim(ksize_, data_format_, 'N');\n      const int32_t stride_n = GetTensorDim(stride_, data_format_, 'N');\n      OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                  errors::Unimplemented(\n                      \"Pooling is not yet supported on the batch dimension.\"));\n    }\n    OP_REQUIRES_OK(context, context->GetAttr(\"padding\", &padding_));\n    TF_CHECK_OK(ReadBoolFromEnvVar(\"TF_ENABLE_MAXPOOL_NANPROP\", false,\n                                   &propagate_nans_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& tensor_in = context->input(0);\n\n    std::vector<int32> ksize = ksize_;\n    std::vector<int32> stride = stride_;\n\n    if (context->num_inputs() != 1) {\n      const Tensor& tensor_ksize = context->input(1);\n      auto value_ksize = tensor_ksize.flat<int32>();\n      ksize.resize(tensor_ksize.shape().num_elements());\n      std::copy_n(&value_ksize(0), ksize.size(), ksize.begin());\n\n      const Tensor& tensor_stride = context->input(2);\n      auto value_stride = tensor_stride.flat<int32>();\n      stride.resize(tensor_stride.shape().num_elements());\n      std::copy_n(&value_stride(0), stride.size(), stride.begin());\n    }\n    OP_REQUIRES(context, ksize.size() == 4,\n                errors::InvalidArgument(\"Sliding window ksize field must \"\n                                        \"specify 4 dimensions\"));\n    OP_REQUIRES(context, stride.size() == 4,\n                errors::InvalidArgument(\"Sliding window stride field must \"\n                                        \"specify 4 dimensions\"));\n    const int32_t ksize_n = GetTensorDim(ksize, data_format_, 'N');\n    const int32_t stride_n = GetTensorDim(stride, data_format_, 'N');\n    OP_REQUIRES(context, ksize_n == 1 && stride_n == 1,\n                errors::Unimplemented(\n                    \"Pooling is not yet supported on the batch dimension.\"));\n\n    PoolParameters params{context,\n                          ksize,\n                          stride,\n                          padding_,\n                          /*explicit_paddings=*/{},\n                          data_format_,\n                          tensor_in.shape()};\n    if (!context->status().ok()) {\n      return;\n    }\n\n    TensorShape out_shape =\n        ShapeFromFormat(data_format_, params.tensor_in_batch, params.out_height,\n                        params.out_width, params.depth);\n    if (data_format_ == FORMAT_NCHW) {\n      DnnPoolingOp<T>::Compute(context, se::dnn::PoolingMode::kMaximum, ksize,\n                               stride, padding_, explicit_paddings_,\n                               data_format_, tensor_in, out_shape,\n                               propagate_nans_);\n    } else {\n      CHECK(data_format_ == FORMAT_NHWC)\n          << \"MaxPool only supports NCHW or NHWC format\";\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context, context->allocate_output(0, out_shape, &output));\n      LaunchMaxPoolingNoMask<Device, T>::launch(context, params, tensor_in,\n                                                output, propagate_nans_);\n    }\n  }\n\n private:\n  std::vector<int32> ksize_;\n  std::vector<int32> stride_;\n  Padding padding_;\n  std::vector<int64_t> explicit_paddings_;\n  TensorFormat data_format_;\n  bool propagate_nans_;\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingNoMask<Eigen::GpuDevice, T> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& input, Tensor* output, bool propagate_nans) {\n    bool status = functor::MaxPoolForwardWithOptionalArgmax<T>()(\n        input.flat<T>().data(), params.tensor_in_batch, params.tensor_in_rows,\n        params.tensor_in_cols, params.depth, params.out_height,\n        params.out_width, params.window_rows, params.window_cols,\n        params.row_stride, params.col_stride, params.pad_top, params.pad_left,\n        output->flat<T>().data(), nullptr, context->eigen_gpu_device(),\n        propagate_nans, false);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolForwardNoMask\"));\n    }\n  }\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingWithArgmax<Eigen::GpuDevice, T, int64_t> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& input, Tensor* output, Tensor* argmax,\n                     bool propagate_nans, bool include_batch_in_index) {\n    bool status = functor::MaxPoolForwardWithOptionalArgmax<T>()(\n        input.flat<T>().data(), params.tensor_in_batch, params.tensor_in_rows,\n        params.tensor_in_cols, params.depth, params.out_height,\n        params.out_width, params.window_rows, params.window_cols,\n        params.row_stride, params.col_stride, params.pad_top, params.pad_left,\n        output->flat<T>().data(),\n        reinterpret_cast<int64_t*>(argmax->flat<int64_t>().data()),\n        context->eigen_gpu_device(), propagate_nans, include_batch_in_index);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolForwardWithArgmax\"));\n    }\n  }\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingGradWithArgmax<Eigen::GpuDevice, T> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& grad_in, const Tensor& argmax,\n                     Tensor* grad_out, const bool include_batch_in_index) {\n    const int input_size = params.tensor_in_batch * params.tensor_in_rows *\n                           params.tensor_in_cols * params.depth;\n    const int output_size = params.tensor_in_batch * params.out_height *\n                            params.out_width * params.depth;\n    const int top_offset = params.out_height * params.out_width * params.depth;\n    const int bottom_offset =\n        params.tensor_in_rows * params.tensor_in_cols * params.depth;\n    bool status = functor::MaxPoolBackwardWithArgmax<T>()(\n        output_size, input_size, grad_in.flat<T>().data(),\n        reinterpret_cast<const int64_t*>(argmax.flat<int64_t>().data()),\n        top_offset, bottom_offset, grad_out->flat<T>().data(),\n        context->eigen_gpu_device(), include_batch_in_index);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolBackwardWithArgmax\"));\n    }\n  }\n};\n\ntemplate <typename T>\nstruct LaunchMaxPoolingGradGradWithArgmax<Eigen::GpuDevice, T> {\n  static void launch(OpKernelContext* context, const PoolParameters& params,\n                     const Tensor& grad_in, const Tensor& argmax,\n                     Tensor* grad_out, const bool include_batch_in_index) {\n    const int input_size = params.tensor_in_batch * params.tensor_in_rows *\n                           params.tensor_in_cols * params.depth;\n    const int output_size = params.tensor_in_batch * params.out_height *\n                            params.out_width * params.depth;\n    const int top_offset =\n        params.tensor_in_rows * params.tensor_in_cols * params.depth;\n    const int bottom_offset =\n        params.out_width * params.out_height * params.depth;\n    bool status = functor::MaxPoolGradBackwardWithArgmax<T>()(\n        output_size, input_size, grad_in.flat<T>().data(),\n        reinterpret_cast<const int64_t*>(argmax.flat<int64_t>().data()),\n        top_offset, bottom_offset, grad_out->flat<T>().data(),\n        context->eigen_gpu_device(), include_batch_in_index);\n    if (!status) {\n      context->SetStatus(\n          errors::Internal(\"Failed launching MaxPoolGradBackwardWithArgmax\"));\n    }\n  }\n};\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#define REGISTER_MAX_POOL_KERNELS(D, T)                                  \\\n  REGISTER_KERNEL_BUILDER(                                               \\\n      Name(\"MaxPoolGrad\").Device(DEVICE_##D).TypeConstraint<T>(\"T\"),     \\\n      MaxPoolingGradOp<D##Device, T>);                                   \\\n  REGISTER_KERNEL_BUILDER(                                               \\\n      Name(\"MaxPoolGradGrad\").Device(DEVICE_##D).TypeConstraint<T>(\"T\"), \\\n      MaxPoolingGradGradOp<D##Device, T>);                               \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradV2\")                          \\\n                              .Device(DEVICE_##D)                        \\\n                              .HostMemory(\"ksize\")                       \\\n                              .HostMemory(\"strides\")                     \\\n                              .TypeConstraint<T>(\"T\"),                   \\\n                          MaxPoolingGradOp<D##Device, T>);               \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradGradV2\")                      \\\n                              .Device(DEVICE_##D)                        \\\n                              .HostMemory(\"ksize\")                       \\\n                              .HostMemory(\"strides\")                     \\\n                              .TypeConstraint<T>(\"T\"),                   \\\n                          MaxPoolingGradGradOp<D##Device, T>)            \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolWithArgmax\")                      \\\n                              .Device(DEVICE_##D)                        \\\n                              .TypeConstraint<int64_t>(\"Targmax\")        \\\n                              .TypeConstraint<T>(\"T\"),                   \\\n                          MaxPoolingWithArgmaxOp<D##Device, T, int64>);  \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradWithArgmax\")                  \\\n                              .Device(DEVICE_##D)                        \\\n                              .TypeConstraint<T>(\"T\")                    \\\n                              .TypeConstraint<int64_t>(\"Targmax\"),       \\\n                          MaxPoolingGradWithArgmaxOp<D##Device, T>);\n\n// Below kernels implemented only for CPU device.\n#define REGISTER_CPU_ONLY_POOL_KERNELS(T)                          \\\n  REGISTER_KERNEL_BUILDER(                                         \\\n      Name(\"MaxPool\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"),   \\\n      MaxPoolingOp<CPUDevice, T>);                                 \\\n  REGISTER_KERNEL_BUILDER(                                         \\\n      Name(\"MaxPoolV2\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      MaxPoolingV2Op<CPUDevice, T>);                               \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolWithArgmax\")                \\\n                              .Device(DEVICE_CPU)                  \\\n                              .TypeConstraint<int32>(\"Targmax\")    \\\n                              .TypeConstraint<T>(\"T\"),             \\\n                          MaxPoolingWithArgmaxOp<CPUDevice, T, int32>);\nTF_CALL_REAL_NUMBER_TYPES(REGISTER_CPU_ONLY_POOL_KERNELS);\n#undef REGISTER_CPU_ONLY_POOL_KERNELS\n\n#define REGISTER_CPU_MAX_POOL_KERNELS(T) REGISTER_MAX_POOL_KERNELS(CPU, T);\nTF_CALL_REAL_NUMBER_TYPES(REGISTER_CPU_MAX_POOL_KERNELS);\n#undef REGISTER_CPU_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// Forward declarations for the functor specializations for GPU.\nnamespace functor {\n#define DECLARE_GPU_SPEC(T)                                            \\\n  template <>                                                          \\\n  void SpatialMaxPooling<Eigen::GpuDevice, T>::operator()(             \\\n      const Eigen::GpuDevice& d, typename TTypes<T, 4>::Tensor output, \\\n      typename TTypes<T, 4>::ConstTensor input, int window_rows,       \\\n      int window_cols, int row_stride, int col_stride,                 \\\n      const Eigen::PaddingType& padding);                              \\\n  extern template struct SpatialMaxPooling<Eigen::GpuDevice, T>;\n\nTF_CALL_GPU_NUMBER_TYPES(DECLARE_GPU_SPEC);\n#undef DECLARE_GPU_SPEC\n}  // namespace functor\n\n#define REGISTER_GPU_MAX_POOL_KERNELS(T) REGISTER_MAX_POOL_KERNELS(GPU, T)\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_GPU_MAX_POOL_KERNELS);\n#undef REGISTER_GPU_MAX_POOL_KERNELS\n\n// Below kernels currently implemented only for GPU device.\n// Note(jiayq): Currently, the Caffe custom implementation is faster than the\n// default Eigen implementation so we are using the custom kernel as the\n// default. However, you can explicitly invoke the eigen version using\n// kernel_label_map.\n#define REGISTER_GPU_ONLY_POOL_KERNELS(T)                          \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPool\")                          \\\n                              .Device(DEVICE_GPU)                  \\\n                              .TypeConstraint<T>(\"T\")              \\\n                              .Label(\"eigen_tensor\"),              \\\n                          MaxPoolingOp<GPUDevice, T>);             \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")                        \\\n                              .Device(DEVICE_GPU)                  \\\n                              .HostMemory(\"ksize\")                 \\\n                              .HostMemory(\"strides\")               \\\n                              .TypeConstraint<T>(\"T\")              \\\n                              .Label(\"eigen_tensor\"),              \\\n                          MaxPoolingV2Op<GPUDevice, T>);           \\\n  REGISTER_KERNEL_BUILDER(                                         \\\n      Name(\"MaxPool\").Device(DEVICE_GPU).TypeConstraint<T>(\"T\"),   \\\n      MaxPoolingNoMaskOp<GPUDevice, T>);                           \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")                        \\\n                              .Device(DEVICE_GPU)                  \\\n                              .HostMemory(\"ksize\")                 \\\n                              .HostMemory(\"strides\")               \\\n                              .TypeConstraint<T>(\"T\"),             \\\n                          MaxPoolingNoMaskV2Op<GPUDevice, T>);     \\\n  REGISTER_KERNEL_BUILDER(Name(\"MaxPoolGradGradWithArgmax\")        \\\n                              .Device(DEVICE_GPU)                  \\\n                              .TypeConstraint<T>(\"T\")              \\\n                              .TypeConstraint<int64_t>(\"Targmax\"), \\\n                          MaxPoolingGradGradWithArgmaxOp<GPUDevice, T>);\nTF_CALL_GPU_NUMBER_TYPES(REGISTER_GPU_ONLY_POOL_KERNELS);\n\n// TODO(b/65847473): Re-enable once the underlying build error is fixed.\n#if !defined(PLATFORM_WINDOWS)\nREGISTER_KERNEL_BUILDER(\n    Name(\"MaxPool\").Device(DEVICE_GPU).TypeConstraint<qint8>(\"T\"),\n    MaxPoolingNoMaskOp<GPUDevice, qint8>);\n\nREGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"ksize\")\n                            .HostMemory(\"strides\")\n                            .TypeConstraint<qint8>(\"T\"),\n                        MaxPoolingV2Op<GPUDevice, qint8>);\n\nREGISTER_KERNEL_BUILDER(Name(\"MaxPoolV2\")\n                            .Device(DEVICE_GPU)\n                            .HostMemory(\"ksize\")\n                            .HostMemory(\"strides\")\n                            .TypeConstraint<qint8>(\"T\")\n                            .Label(\"eigen_tensor\"),\n                        MaxPoolingV2Op<GPUDevice, qint8>);\n#endif  // !defined(PLATFORM_WINDOWS)\n\n#undef REGISTER_GPU_ONLY_POOL_KERNELS\n\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n#undef REGISTER_MAX_POOL_KERNELS\n\n}  // namespace tensorflow\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for pooling operations.\"\"\"\n\nimport collections\nimport os\n\nfrom absl.testing import parameterized\nimport numpy as np\n\nfrom tensorflow.python.eager import context\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors_impl\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import test_util\nimport tensorflow.python.framework.config as config_exec\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gen_array_ops\nfrom tensorflow.python.ops import gen_nn_ops\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import gradients_impl\nfrom tensorflow.python.ops import nn_ops\nfrom tensorflow.python.ops import variables\nimport tensorflow.python.ops.nn_grad  # pylint: disable=unused-import\nfrom tensorflow.python.platform import test\nfrom tensorflow.python.platform import tf_logging\n\n\ndef GetDeviceScope(self, use_gpu=False):\n  if context.executing_eagerly():\n    if use_gpu and test.is_gpu_available():\n      return ops.device(\"GPU:0\")\n    return ops.device(\"CPU:0\")\n  else:\n    return self.session(use_gpu=use_gpu)\n\n\n# TODO(jlebar): Convert the rest of this file to parameters.parameterized().\n# Then remove GetTestConfigs() and rename GetTestConfigsDicts().\ndef GetTestConfigsDicts(v1_fn,\n                        v2_fn=None,\n                        one_dimensional=False,\n                        allow_gpu=True):\n  # (data_format, use_gpu) tuple\n  if one_dimensional:\n    configs0 = [\n        (\"NWC\", False),\n        (\"NWC\", True),\n        (\"NCW\", True),\n    ]\n  else:\n    configs0 = [\n        (\"NHWC\", False),\n        (\"NHWC\", True),\n        (\"NCHW\", True),\n    ]\n    # NCHW_VECT_C only supported for max_pool.\n    if (v1_fn == nn_ops.max_pool or v1_fn == nn_ops.max_pool1d or\n        v2_fn == nn_ops.max_pool_v2 or v2_fn == gen_nn_ops.max_pool_v2):\n      configs0.append((\"NCHW_VECT_C\", True))\n\n  # (data_format, use_gpu, data_type) tuple\n  configs1 = []\n  for data_format, use_gpu in configs0:\n    configs1.append((data_format, use_gpu, dtypes.float32))\n\n    # In our test, VECT_C always uses float32.  (It gets converted to int8 in\n    # the test runner.)\n    if data_format == \"NCHW_VECT_C\":\n      continue\n\n    configs1 += [(data_format, use_gpu, dtypes.float16),\n                 (data_format, use_gpu, dtypes.float64)]\n\n  # Convert from tuple to dict and add v1/v2 versions.\n  ret = []\n  for data_format, use_gpu, data_type in configs1:\n    ret.append({\n        \"pool_func\": v1_fn,\n        \"data_format\": data_format,\n        \"data_type\": data_type,\n        \"use_gpu\": use_gpu,\n        \"v2\": False\n    })\n    if v2_fn:\n      ret.append({\n          \"pool_func\": v2_fn,\n          \"data_format\": data_format,\n          \"data_type\": data_type,\n          \"use_gpu\": use_gpu,\n          \"v2\": False\n      })\n      ret.append({\n          \"pool_func\": v2_fn,\n          \"data_format\": data_format,\n          \"data_type\": data_type,\n          \"use_gpu\": use_gpu,\n          \"v2\": True\n      })\n\n  # Filter out GPU configs if necessary.\n  if not allow_gpu:\n    ret = [c for c in ret if not c[\"use_gpu\"]]\n\n  return ret\n\n\ndef GetTestConfigs(include_nchw_vect_c=False, one_dimensional=False):\n  \"\"\"Get all the valid tests configs to run.\n\n  Args:\n    include_nchw_vect_c: Whether to include NCHW_VECT_C in the test configs.\n    one_dimensional: If it's a 1D test\n\n  Returns:\n    all the valid test configs as tuples of data_format and use_gpu.\n  \"\"\"\n  if one_dimensional:\n    test_configs = [(\"NWC\", False), (\"NWC\", True)]\n    if test.is_gpu_available(cuda_only=True):\n      test_configs += [(\"NCW\", True)]\n    return test_configs\n  test_configs = [(\"NHWC\", False), (\"NHWC\", True)]\n  if not test.is_gpu_available(cuda_only=True):\n    tf_logging.info(\"NCHW and NCHW_VECT_C tests skipped because not run with \"\n                    \"--config=cuda or no GPUs available.\")\n    return test_configs\n  # \"NCHW\" format is currently supported exclusively on CUDA GPUs.\n  test_configs += [(\"NCHW\", True)]\n  if include_nchw_vect_c:\n    if test.is_gpu_available(\n        cuda_only=True, min_cuda_compute_capability=(6, 1)):\n      test_configs += [(\"NCHW_VECT_C\", True)]\n    else:\n      tf_logging.info(\"NCHW_VECT_C test skipped because no GPUs with \"\n                      \"compute capability >= 6.1 are available.\")\n\n  return test_configs\n\n\ndef GetShrunkInceptionMaxPoolShapes(shrink=30):\n  \"\"\"Iterator for some of the max pool ops in the Inception 2015 model.\n\n  Args:\n    shrink: Factor to shrink depth relative to Inception.\n\n  Yields:\n    Tuple (name, input_size, filter_size, out_size, strides, padding)\n  \"\"\"\n  names = [\"maxpool2\", \"maxpool3\", \"maxpool4\", \"maxpool5\"]\n  input_sizes = [[32, 71, 71, 192], [32, 35, 35, 288], [32, 17, 17, 1248],\n                 [32, 8, 8, 2048]]\n  filter_sizes = [[1, 3, 3, 1], [1, 3, 3, 1], [1, 3, 3, 1], [1, 3, 3, 1]]\n  output_sizes = [[32, 35, 35, 192], [32, 17, 17, 288], [32, 8, 8, 1248],\n                  [32, 8, 8, 2048]]\n  strides = [[1, 2, 2, 1], [1, 2, 2, 1], [1, 2, 2, 1], [1, 1, 1, 1]]\n  # Shrink each depth value\n  for i in input_sizes:\n    i[3] //= shrink\n  for o in output_sizes:\n    o[3] //= shrink\n  paddings = [\"VALID\", \"VALID\", \"VALID\", \"SAME\"]\n  for n, i, f, o, s, p in zip(names, input_sizes, filter_sizes, output_sizes,\n                              strides, paddings):\n    yield n, i, f, o, s, p\n\n\n@test_util.with_eager_op_as_function\nclass PoolingTest(test.TestCase, parameterized.TestCase):\n\n  def _isMaxPool(self, func):\n    return func in (nn_ops.max_pool, nn_ops.max_pool_v2)\n\n  def _VerifyOneType(self, pool_func, input_sizes, ksize, strides, padding,\n                     data_format, data_type, expected, use_gpu, v2,\n                     use_negative_input=False):\n    \"\"\"Verifies the output values of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      ksize: The kernel size dimensions\n      strides: The stride dimensions\n      padding: Padding type.\n      data_format: The data format we use to run the pooling operation.\n      data_type: The data type to use to run the pooling operation.\n      expected: An array containing the expected operation outputs.\n      use_gpu: Whether we are running on GPU.\n      v2: Whether to use v2 version.\n      use_negative_input: If the input values should be negative.\n    \"\"\"\n    # Check that this test is compatible with the hardware we have.  (Really\n    # this should be done in GetTestConfigsDicts(), but when that runs, we\n    # haven't initialized enough of TF to know what our hardware is!)\n    if use_gpu and not test.is_gpu_available():\n      self.skipTest(\"No GPU is available.\")\n    if use_gpu and data_type == dtypes.float64 and test.is_built_with_rocm():\n      self.skipTest(\"ROCm pooling ops don't support float64.\")\n    if use_gpu and data_format == \"NCHW_VECT_C\" and not test.is_gpu_available(\n        cuda_only=True, min_cuda_compute_capability=(6, 1)):\n      self.skipTest(\"NCHW_VECT_C requires sm61+.\")\n\n    if v2 and data_format != \"NHWC\":\n      self.skipTest(\"v2 not supported for %s\" % data_format)\n    if v2 and not isinstance(padding, str):\n      self.skipTest(\"non-constant ksize/strides requires nonexplicit padding\")\n    if data_format == \"NCHW_VECT_C\":\n      if data_type != dtypes.float32:\n        self.skipTest(\"quantization to qint8 not implemented for %r\" %\n                      data_type)\n      if input_sizes[-1] % 4 != 0:\n        self.skipTest(\"Skipping test for depth %d\" % input_sizes[-1])\n\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    tf_logging.info(\"Running %s test. %r %r %d %r %r %r %s\", data_format, v2,\n                    input_sizes, total_size, pool_func, ksize, strides,\n                    data_type)\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1, wrapping round to -127 after 127 to support int8.\n    y = -1 if use_negative_input else 1\n    x = [(((f + 128) % 255) - 127)*y for f in range(total_size)]\n    with self.cached_session(use_gpu=use_gpu):\n      t = constant_op.constant(x, shape=input_sizes, dtype=data_type)\n      if data_format in (\"NCHW\", \"NCHW_VECT_C\", \"NCW\"):\n        if data_format == \"NCHW_VECT_C\":\n          t = test_util.NHWCToNCHW_VECT_C(t)\n          t, _, _ = gen_array_ops.quantize_v2(t, -128.0, 127.0, dtypes.qint8)\n        else:\n          t = test_util.NHWCToNCHW(t)\n        ksize = test_util.NHWCToNCHW(ksize)\n        strides = test_util.NHWCToNCHW(strides)\n        if isinstance(padding, list):\n          padding = test_util.NHWCToNCHW(padding)\n      ksize_placeholder = array_ops.placeholder(dtypes.int32, shape=[4])\n      strides_placeholder = array_ops.placeholder(dtypes.int32, shape=[4])\n      if v2:\n        t = pool_func(\n            t,\n            ksize=ksize_placeholder,\n            strides=strides_placeholder,\n            padding=padding,\n            data_format=data_format)\n      else:\n        t = pool_func(\n            t,\n            ksize=ksize,\n            strides=strides,\n            padding=padding,\n            data_format=data_format)\n      if data_format == \"NCHW_VECT_C\":\n        t = gen_array_ops.dequantize(t, -128, 127)\n        t = test_util.NCHW_VECT_CToNHWC(t)\n      elif data_format == \"NCHW\":\n        t = test_util.NCHWToNHWC(t)\n      if v2:\n        actual = t.eval(feed_dict={\n            ksize_placeholder: ksize,\n            strides_placeholder: strides\n        })\n      else:\n        actual = self.evaluate(t)\n        self.assertShapeEqual(actual, t)\n      self.assertAllCloseAccordingToType(expected, actual.flatten())\n\n  def _VerifyOneTest(self, pool_func, input_sizes, ksize, strides, padding,\n                     data_format, expected, use_gpu, v2,\n                     use_negative_input=False):\n    \"\"\"Verifies the output values of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      ksize: The kernel size dimensions\n      strides: The stride dimensions\n      padding: Padding type.\n      data_format: The data format we use to run the pooling operation.\n      expected: An array containing the expected operation outputs.\n      use_gpu: Whether we are running on GPU.\n      v2: Whether to use v2 version.\n      use_negative_input: If the input values should be negative.\"\n    \"\"\"\n    if data_format == \"NCHW_VECT_C\":\n      avg_pool_func = nn_ops.avg_pool\n      tf_logging.info(\"pool_func=%s\", pool_func)\n      if pool_func == avg_pool_func:\n        tf_logging.info(\"NCHW_VECT_C not yet implemented for avg_pool\")\n        return\n      if (self._isMaxPool(pool_func) and isinstance(padding, list)):\n        tf_logging.info(\"NCHW_VECT_C not yet implemented for max pool\" +\n                        \" with explicit padding\")\n        return\n\n    self._VerifyOneType(pool_func, input_sizes, ksize, strides, padding,\n                        data_format, dtypes.float32, expected, use_gpu, v2,\n                        use_negative_input)\n    if not test.is_built_with_rocm():\n      # double datatype is not supported for pooling ops on the ROCm platform\n      self._VerifyOneType(pool_func, input_sizes, ksize, strides, padding,\n                          data_format, dtypes.float64, expected, use_gpu, v2,\n                          use_negative_input)\n\n    if not use_gpu or test_util.GpuSupportsHalfMatMulAndConv():\n      self._VerifyOneType(pool_func, input_sizes, ksize, strides, padding,\n                          data_format, dtypes.float16, expected, use_gpu, v2,\n                          use_negative_input)\n\n  def _VerifyValues(self,\n                    pool_func,\n                    input_sizes,\n                    ksize,\n                    strides,\n                    padding,\n                    expected,\n                    use_gpu,\n                    v2=False,\n                    one_dim=False,\n                    use_negative_input=False):\n    \"\"\"Verifies the output values of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      ksize: The kernel size dimensions\n      strides: The stride dimensions\n      padding: Padding type.\n      expected: An array containing the expected operation outputs.\n      use_gpu: Whether we are running on GPU.\n      v2: Whether to use v2 version.\n      one_dim: If one dimensional pools should be done instead of two\n        dimensional pools.\n      use_negative_input: If the input values should be negative.\n    \"\"\"\n    for (data_format, use_gpu_2) in GetTestConfigs(\n        include_nchw_vect_c=True, one_dimensional=one_dim):\n      if use_gpu_2 == use_gpu:\n        self._VerifyOneTest(pool_func, input_sizes, ksize, strides, padding,\n                            data_format, expected, use_gpu, v2,\n                            use_negative_input)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolValidPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"VALID\",\n        expected=[7.0, 8.0, 9.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolEmpty(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 0],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"VALID\",\n        expected=[],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 2, 4, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[8.5, 9.5, 10.5, 14.5, 15.5, 16.5],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindow(self, **kwargs):\n    # input is:\n    # [1.0, 2.0\n    #  3.0  4.0]\n    #\n    # Window of [x, x] should do:\n    #  [avg(1.0, 2.0), avg(2.0, padded0),\n    #   avg(3.0, 4.0), avg(4.0, padded0)]\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 1],\n        ksize=[1, 1, 2, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[1.5, 2.0, 3.5, 4.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindow_2(self, **kwargs):\n    # Window of [x,\n    #            x] should do:\n    #  [avg(1.0, 3.0), avg(2.0, 4.0)\n    #   avg(3.0, padded0), avg(4.0, padded0)]\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 1],\n        ksize=[1, 2, 1, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[2.0, 3.0, 3.0, 4.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindowMultiBatch(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[2, 2, 2, 2],\n        ksize=[1, 1, 2, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[\n            2.0, 3.0, 3.0, 4.0, 6.0, 7.0, 7.0, 8.0, 10.0, 11.0, 11.0, 12.0,\n            14.0, 15.0, 15.0, 16.0\n        ],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingNonSquareWindowMultiBatch_2(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[2, 2, 2, 2],\n        ksize=[1, 2, 1, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[\n            3.0, 4.0, 5.0, 6.0, 5.0, 6.0, 7.0, 8.0, 11.0, 12.0, 13.0, 14.0,\n            13.0, 14.0, 15.0, 16.0\n        ],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolValidPaddingUnevenStride(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 1, 2, 1],\n        padding=\"VALID\",\n        expected=[7.0, 8.0, 9.0, 16.0, 17.0, 18.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolValidPaddingUnevenStride_2(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 1, 1],\n        padding=\"VALID\",\n        expected=[7.0, 8.0, 9.0, 10.0, 11.0, 12.0],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePadding_2(self, **kwargs):\n    expected_output = [\n        11.0, 12.0, 13.0, 14.0, 19.0, 20.0, 21.0, 22.0, 43.0, 44.0, 45.0, 46.0,\n        51.0, 52.0, 53.0, 54.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 4],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingPacket_4(self, **kwargs):\n    expected_output = [\n        21.0, 22.0, 23.0, 24.0, 27.0, 28.0, 29.0, 30.0, 45.0, 46.0, 47.0, 48.0,\n        51.0, 52.0, 53.0, 54.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 4],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolSamePaddingPacket_8(self, **kwargs):\n    expected_output = [\n        -12.0, -11.0, -10.0, -9.0, -8.0, -7.0, -6.0, -5.0, 4.0, 5.0, 6.0, 7.0,\n        8.0, 9.0, 10.0, 11.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0,\n        32.0, 33.0, 34.0, 35.0, 36.0, 37.0, 38.0, -3.5, -54.0, -53.0, -52.0,\n        -51.0, -50.0, -49.0, -48.0, -47.0, -38.0, -37.0, -36.0, -35.0, -34.0,\n        -33.0, -32.0, -31.0, -22.0, -21.0, -20.0, -19.0, -18.0, -17.0, -16.0,\n        -15.0, -10.0, -9.0, -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -11.0, -10.0,\n        -9.0, -8.0, -7.0, -6.0, -5.0, -4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\n        12.0, 21.0, 22.0, 23.0, 24.0, 25.0, 26.0, 27.0, 28.0, 33.0, 34.0, 35.0,\n        36.0, 37.0, 38.0, -3.5, -2.5, -85.0, -84.0, -83.0, -82.0, -81.0, -80.0,\n        -79.0, -78.0, -69.0, -68.0, -67.0, -66.0, -65.0, -64.0, -63.0, -62.0,\n        -53.0, -52.0, -51.0, -50.0, -49.0, -48.0, -47.0, -46.0, -41.0, -40.0,\n        -39.0, -38.0, -37.0, -36.0, -35.0, -34.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolEmptyInput(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[0, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[],\n        **kwargs)\n\n  @test_util.run_in_graph_and_eager_modes\n  def testRawAvgPoolLargeKsizeRaiseError(self):\n    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n      with self.cached_session():\n        t = gen_nn_ops.avg_pool(\n            value=np.ones([1, 1, 1, 1]),\n            ksize=[1, 1e20, 1, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"SAME\",\n            data_format=\"NHWC\")\n        self.evaluate(t)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolValidPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"VALID\",\n        expected=[13.0, 14.0, 15.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 2, 3, 3],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[13.0, 14.0, 15.0, 16.0, 17.0, 18.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolZeroExplicitPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [0, 0], [0, 0], [0, 0]],\n        expected=[9.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolNegativeInputExpPadding(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [2, 1], [2, 1], [0, 0]],\n        expected=[-1, -1, -1, -1],\n        use_negative_input=True,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPadding(self, **kwargs):\n    expected_output = [9.0, 9.0]\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [0, 2], [0, 1], [0, 0]],\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPaddingAdvanced(self, **kwargs):\n    expected_output = [7, 9, 11, 12, 19, 21, 23, 24, 31, 33, 35, 36, 31, 33,\n                       35, 36]\n    self._VerifyOneType(\n        input_sizes=[1, 6, 6, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [1, 2], [2, 1], [0, 0]],\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolNegativeInputExpPaddingAdv(self, **kwargs):\n    expected_output = [-1, -1, -3, -5, -7, -7, -9, -11, -19, -19, -21, -23, -31,\n                       -31, -33, -35]\n\n    self._VerifyOneType(\n        input_sizes=[1, 6, 6, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [1, 2], [2, 1], [0, 0]],\n        expected=expected_output,\n        use_negative_input=True,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, nn_ops.max_pool_v2))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPadding2_(self, **kwargs):\n    expected_output = [9.0, 9.0]\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=[[0, 0], [0, 2], [0, 1], [0, 0]],\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool1d, nn_ops.max_pool_v2, one_dimensional=True))\n  @test_util.xla_allow_fallback(\"XLA doesn't support explicit padding\")\n  @test_util.run_deprecated_v1\n  def testMaxPoolExplicitPadding_1D(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 1],\n        ksize=[1, 2, 1],\n        strides=[1, 2, 1],\n        padding=[[0, 0], [0, 1], [0, 0]],\n        expected=[2.0, 3.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePaddingNonSquareWindow(self, **kwargs):\n    # input is:\n    # [1.0, 2.0\n    #  3.0  4.0]\n    #\n    # Window of [x, x] should do:\n    #\n    #  [max(1.0, 2.0), max(2.0, padded0),\n    #   max(3.0, 4.0), max(4.0, padded0)]\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 1],\n        ksize=[1, 1, 2, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\",\n        expected=[2.0, 2.0, 4.0, 4.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolValidPaddingUnevenStride(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 1, 2, 1],\n        padding=\"VALID\",\n        expected=[6.0, 8.0, 10.0, 12.0, 14.0, 16.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolValidPaddingUnevenStride2_(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 1, 1],\n        padding=\"VALID\",\n        expected=[6.0, 7.0, 8.0, 14.0, 15.0, 16.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePaddingPacket4_(self, **kwargs):\n    expected_output = [\n        21.0, 22.0, 23.0, 24.0, 29.0, 30.0, 31.0, 32.0, 53.0, 54.0, 55.0, 56.0,\n        61.0, 62.0, 63.0, 64.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 4],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolSamePaddingPacket8_(self, **kwargs):\n    expected_output = [\n        81.0, 82.0, 83.0, 84.0, 85.0, 86.0, 87.0, 88.0, 97.0, 98.0, 99.0, 100.0,\n        101.0, 102.0, 103.0, 104.0, 113.0, 114.0, 115.0, 116.0, 117.0, 118.0,\n        119.0, 120.0, 121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 120.0,\n        18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0, 34.0, 35.0, 36.0, 37.0,\n        38.0, 39.0, 40.0, 41.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0,\n        58.0, 59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 82.0, 83.0, 84.0, 85.0,\n        86.0, 87.0, 88.0, 89.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0,\n        105.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0, 121.0, 122.0,\n        123.0, 124.0, 125.0, 126.0, 127.0, 120.0, 121.0, -45.0, -44.0, -43.0,\n        -42.0, -41.0, -40.0, -39.0, -38.0, -29.0, -28.0, -27.0, -26.0, -25.0,\n        -24.0, -23.0, -22.0, -13.0, -12.0, -11.0, -10.0, -9.0, -8.0, -7.0, -6.0,\n        -5.0, -4.0, -3.0, -2.0, -1.0, 0.0, 1.0, 2.0\n    ]\n    self._VerifyOneType(\n        input_sizes=[1, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=expected_output,\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolEmptyInput(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[0, 8, 8, 8],\n        ksize=[1, 3, 3, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2))\n  @test_util.run_deprecated_v1\n  def testMaxPoolInvalidFilterSize(self, **kwargs):\n    with self.cached_session(use_gpu=test.is_gpu_available()):\n      t = constant_op.constant(1.0, shape=[1, 1, 1, 1])\n      with self.assertRaisesRegex(\n          (errors_impl.InvalidArgumentError, ValueError),\n          \"Negative dimension size\"):\n        t = self.evaluate(\n            nn_ops.max_pool(t, ksize=[1, 1, 2, 1], strides=1, padding=\"VALID\"))\n\n  # Tests for DepthwiseMaxPooling on CPU only.\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool, gen_nn_ops.max_pool_v2, allow_gpu=False))\n  @test_util.run_deprecated_v1\n  def testDepthwiseMaxPool1x1DepthWindow(self, **kwargs):\n    # input is:\n    # [1.0, ..., 10.0] along depth,\n    #\n    # We maxpool by depth in patches of 2.\n    self._VerifyOneType(\n        input_sizes=[1, 1, 1, 10],\n        ksize=[1, 1, 1, 2],\n        strides=[1, 1, 1, 2],\n        padding=\"SAME\",\n        expected=[2.0, 4.0, 6.0, 8.0, 10.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool, gen_nn_ops.max_pool_v2, allow_gpu=False))\n  @test_util.run_deprecated_v1\n  def testDepthwiseMaxPool2x2DepthWindow(self, **kwargs):\n    # input is:\n    #\n    # a 2x2x6 cube, and we depthwise max across 3 to produce a 2x2x2\n    # output.  Each node has contiguous values, so the depthwise max\n    # should be multiples of 3.0.\n    self._VerifyOneType(\n        input_sizes=[1, 2, 2, 6],\n        ksize=[1, 1, 1, 3],\n        strides=[1, 1, 1, 3],\n        padding=\"SAME\",\n        expected=[3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0, 24.0],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(\n          nn_ops.max_pool, gen_nn_ops.max_pool_v2, allow_gpu=False))\n  @test_util.run_deprecated_v1\n  def testMaxPoolKernelSmallerThanStrideValid(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 7, 7, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 3, 3, 1],\n        padding=\"VALID\",\n        expected=[9, 12, 30, 33],\n        **kwargs)\n\n  @parameterized.parameters(GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testAvgPoolKernelSmallerThanStride(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 7, 7, 1],\n        ksize=[1, 2, 2, 1],\n        strides=[1, 3, 3, 1],\n        padding=\"VALID\",\n        expected=[5, 8, 26, 29],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2) +\n      GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testKernelSmallerThanStrideSame1_(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 3, 3, 1],\n        ksize=[1, 1, 1, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[1, 3, 7, 9],\n        **kwargs)\n\n  @parameterized.parameters(\n      GetTestConfigsDicts(nn_ops.max_pool, gen_nn_ops.max_pool_v2) +\n      GetTestConfigsDicts(nn_ops.avg_pool))\n  @test_util.run_deprecated_v1\n  def testKernelSmallerThanStrideSame2_(self, **kwargs):\n    self._VerifyOneType(\n        input_sizes=[1, 4, 4, 1],\n        ksize=[1, 1, 1, 1],\n        strides=[1, 2, 2, 1],\n        padding=\"SAME\",\n        expected=[1, 3, 9, 11],\n        **kwargs)\n\n  def _testDepthwiseMaxPoolInvalidConfig(self,\n                                         in_size,\n                                         ksize,\n                                         strides,\n                                         error_msg,\n                                         use_gpu=False):\n    with self.cached_session(use_gpu=use_gpu):\n      t = constant_op.constant(1.0, shape=in_size)\n      with self.assertRaisesRegex(errors_impl.UnimplementedError, error_msg):\n        t = nn_ops.max_pool(\n            t, ksize=ksize, strides=strides, padding=\"SAME\").eval()\n\n  @test_util.disable_xla(\"b/123338077\")  # Passes with XLA\n  def testDepthwiseMaxPoolInvalidConfigs(self):\n    self._testDepthwiseMaxPoolInvalidConfig(\n        [1, 2, 2, 4], [1, 2, 2, 2], [1, 1, 1, 2],\n        \"exactly one of pooling across depth\")\n    self._testDepthwiseMaxPoolInvalidConfig(\n        [1, 2, 2, 4], [1, 1, 1, 2], [1, 1, 1, 1],\n        \"depth window to equal the depth stride\")\n    self._testDepthwiseMaxPoolInvalidConfig([1, 2, 2, 4], [1, 1, 1, 3],\n                                            [1, 1, 1, 3], \"evenly divide\")\n    if test.is_gpu_available():\n      with self.session():\n        t = variables.Variable(np.ones([1, 2, 2, 4]))\n        self.evaluate(variables.global_variables_initializer())\n        with self.assertRaisesOpError(\"for CPU devices\"):\n          nn_ops.max_pool(\n              t, ksize=[1, 1, 1, 2], strides=[1, 1, 1, 2],\n              padding=\"SAME\").eval()\n\n  # The following are tests that verify that the CPU and GPU implementations\n  # produce the same results.\n  def _CompareMaxPoolingFwd(self, input_shape, ksize, strides, padding):\n    # double datatype is currently not supported for pooling ops\n    # on the ROCm platform\n    for dtype in [np.float32, np.float16] \\\n        + [np.float64] if not test.is_built_with_rocm() else []:\n      tensor_input = np.random.rand(*input_shape).astype(dtype)\n      with self.cached_session():\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op, _ = nn_ops.max_pool_with_argmax(t, ksize, strides, padding)\n        gpu_val = self.evaluate(out_op)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = nn_ops.max_pool(t, ksize, strides, padding)\n        cpu_val = self.evaluate(out_op)\n      self.assertAllCloseAccordingToType(cpu_val, gpu_val)\n\n  def _CompareMaxPoolingBk(self, input_shape, output_shape, ksize, strides,\n                           padding):\n    # double datatype is currently not supported for pooling ops\n    # on the ROCm platform\n    for dtype in [np.float32, np.float16] \\\n        + [np.float64] if not test.is_built_with_rocm() else []:\n      # Generate numbers in a narrow range, so that there are many duplicates\n      # in the input.\n      tensor_input = np.random.random_integers(0, 3, input_shape).astype(dtype)\n      tensor_output = np.random.rand(*output_shape).astype(dtype)\n      with self.cached_session():\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        _, argmax_op = nn_ops.max_pool_with_argmax(t, ksize, strides, padding)\n        argmax = self.evaluate(argmax_op)\n        grad_in = constant_op.constant(tensor_output, shape=output_shape)\n        out_op = gen_nn_ops.max_pool_grad_with_argmax(t, grad_in, argmax, ksize,\n                                                      strides, padding)\n        gpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(gpu_val, out_op)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = nn_ops.max_pool(t, ksize, strides, padding)\n        orig_out = self.evaluate(out_op)\n        grad_in = constant_op.constant(tensor_output, shape=output_shape)\n        out_op = gen_nn_ops.max_pool_grad(t, orig_out, grad_in, ksize, strides,\n                                          padding)\n        cpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(cpu_val, out_op)\n      # The CPU version accumulates its gradient on fp16, so it's less\n      # accurate than the GPU version that does the accumulation on fp32\n      self.assertAllCloseAccordingToType(\n          cpu_val, gpu_val, half_rtol=0.01, half_atol=0.01)\n\n  def _CompareMaxPoolingGradBk(self, input_shape, output_shape, ksize, strides,\n                               padding):\n    # double datatype is currently not supported for pooling ops\n    # on the ROCm platform\n    for dtype in [np.float32, np.float16] \\\n        + [np.float64] if not test.is_built_with_rocm() else []:\n      # Generate numbers in a narrow range, so that there are many duplicates\n      # in the input.\n      tensor_input = np.random.random_integers(0, 3, input_shape).astype(dtype)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        _, argmax_op = nn_ops.max_pool_with_argmax(t, ksize, strides, padding)\n        argmax = self.evaluate(argmax_op)\n        grad_in = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = gen_nn_ops.max_pool_grad_grad_with_argmax(\n            t, grad_in, argmax, ksize, strides, padding)\n        gpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(gpu_val, out_op)\n      with self.cached_session(use_gpu=False):\n        t = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = nn_ops.max_pool(t, ksize, strides, padding)\n        orig_out = self.evaluate(out_op)\n        grad_in = constant_op.constant(tensor_input, shape=input_shape)\n        out_op = gen_nn_ops.max_pool_grad_grad(t, orig_out, grad_in, ksize,\n                                               strides, padding)\n        cpu_val = self.evaluate(out_op)\n        self.assertShapeEqual(cpu_val, out_op)\n      # The CPU version accumulates its gradient on fp16, so it's less\n      # accurate than the GPU version that does the accumulation on fp32\n      self.assertAllCloseAccordingToType(\n          cpu_val, gpu_val, half_rtol=0.01, half_atol=0.01)\n\n  def testMaxPoolingWithArgmax(self):\n    tensor_input = [\n        1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 1.0\n    ]\n\n    Config = collections.namedtuple(\n        \"Config\", [\"use_gpu\", \"include_batch_in_index\", \"argmax\", \"Targmax\"])\n    configs = [\n        Config(False, False, [0, 1, 3, 5, 0, 2, 6, 8], dtypes.int64),\n        Config(False, True, [0, 1, 3, 5, 9, 11, 15, 17], dtypes.int64),\n        Config(False, False, [0, 1, 3, 5, 0, 2, 6, 8], dtypes.int32),\n        Config(False, True, [0, 1, 3, 5, 9, 11, 15, 17], dtypes.int32),\n        Config(True, False, [0, 1, 3, 5, 0, 2, 6, 8], dtypes.int64),\n        Config(True, True, [0, 1, 3, 5, 9, 11, 15, 17], dtypes.int64),\n    ]\n\n    for config in configs:\n      with GetDeviceScope(self, use_gpu=config.use_gpu):\n        t = constant_op.constant(tensor_input, shape=[2, 3, 3, 1])\n        out_op, argmax_op = nn_ops.max_pool_with_argmax(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 1, 1, 1],\n            Targmax=config.Targmax,\n            padding=\"VALID\",\n            include_batch_in_index=config.include_batch_in_index)\n        out, argmax = self.evaluate([out_op, argmax_op])\n        self.assertShapeEqual(out, out_op)\n        self.assertShapeEqual(argmax, argmax_op)\n        self.assertAllClose(out.ravel(),\n                            [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0])\n        self.assertAllEqual(argmax.ravel(), config.argmax)\n\n  def testMaxPoolingGradWithArgmax(self):\n    orig_input = [\n        1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 1.0\n    ]\n    tensor_input = [11.0, 12.0, 13.0, 14.0, 21.0, 22.0, 23.0, 24.0]\n\n    Config = collections.namedtuple(\n        \"Config\", [\"use_gpu\", \"include_batch_in_index\", \"argmax\"])\n    configs = [\n        Config(False, False, [0, 1, 3, 5, 0, 2, 6, 8]),\n        Config(False, True, [0, 1, 3, 5, 9, 11, 15, 17]),\n        Config(True, False, [0, 1, 3, 5, 0, 2, 6, 8]),\n        Config(True, True, [0, 1, 3, 5, 9, 11, 15, 17])\n    ]\n\n    for config in configs:\n      with GetDeviceScope(self, config.use_gpu):\n        orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n        t = constant_op.constant(tensor_input, shape=[2, 2, 2, 1])\n        argmax_t = constant_op.constant(\n            config.argmax, shape=[2, 2, 2, 1], dtype=dtypes.int64)\n        out_op = gen_nn_ops.max_pool_grad_with_argmax(\n            orig_in,\n            t,\n            argmax_t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"VALID\",\n            include_batch_in_index=config.include_batch_in_index)\n        out = self.evaluate(out_op).flatten()\n        self.assertAllClose(out, [\n            11.0, 12.0, 0.0, 13.0, 0.0, 14.0, 0.0, 0.0, 0.0, 21.0, 0.0, 22.0,\n            0.0, 0.0, 0.0, 23.0, 0.0, 24.0\n        ])\n\n  def testMaxPoolingGradThrowDeterminismError(self):\n    if test.is_gpu_available(cuda_only=True):\n      try:\n        config_exec.enable_op_determinism()\n        orig_input = [\n            1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 1.0\n        ]\n        tensor_input = [11.0, 12.0, 13.0, 14.0, 21.0, 22.0, 23.0, 24.0]\n\n        with GetDeviceScope(self, True):\n          orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n          t = constant_op.constant(tensor_input, shape=[2, 2, 2, 1])\n          argmax_t = constant_op.constant(\n              [0, 1, 3, 5, 0, 2, 6, 8], shape=[2, 2, 2, 1], dtype=dtypes.int64)\n          with self.assertRaisesRegexp(\n              errors_impl.UnimplementedError, \"Determinism is not yet supported \"\n              \"for MaxPoolGradWithArgmax.\"):\n            out_op = gen_nn_ops.max_pool_grad_with_argmax(\n                orig_in,\n                t,\n                argmax_t,\n                ksize=[1, 2, 2, 1],\n                strides=[1, 1, 1, 1],\n                padding=\"VALID\",\n                include_batch_in_index=False)\n            self.evaluate(out_op)\n      finally:\n        config_exec.disable_op_determinism()\n    else:\n      try:\n        config_exec.enable_op_determinism()\n        orig_input = [\n            1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n            0.0, 1.0, 0.0, 1.0\n        ]\n        tensor_input = [11.0, 12.0, 13.0, 14.0, 21.0, 22.0, 23.0, 24.0]\n\n        with GetDeviceScope(self, False):\n          orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n          t = constant_op.constant(tensor_input, shape=[2, 2, 2, 1])\n          argmax_t = constant_op.constant(\n              [0, 1, 3, 5, 0, 2, 6, 8], shape=[2, 2, 2, 1], dtype=dtypes.int64)\n          out_op = gen_nn_ops.max_pool_grad_with_argmax(\n              orig_in,\n              t,\n              argmax_t,\n              ksize=[1, 2, 2, 1],\n              strides=[1, 1, 1, 1],\n              padding=\"VALID\",\n              include_batch_in_index=False)\n          self.evaluate(out_op)\n      finally:\n        config_exec.disable_op_determinism()\n\n  def testMaxPoolingGradGradWithArgmax(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    orig_input = [\n        1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 1.0\n    ]\n    tensor_input = [\n        11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 21.0, 22.0, 23.0,\n        24.0, 25.0, 26.0, 27.0, 28.0, 29.0\n    ]\n\n    Config = collections.namedtuple(\n        \"Config\", [\"use_gpu\", \"include_batch_in_index\", \"argmax\"])\n    configs = [\n        Config(True, False, [0, 1, 3, 5, 0, 2, 6, 8]),\n        Config(True, True, [0, 1, 3, 5, 9, 11, 15, 17])\n    ]\n\n    for config in configs:\n      with GetDeviceScope(self, config.use_gpu):\n        orig_in = constant_op.constant(orig_input, shape=[2, 3, 3, 1])\n        t = constant_op.constant(tensor_input, shape=[2, 3, 3, 1])\n        argmax_t = constant_op.constant(\n            config.argmax, shape=[2, 2, 2, 1], dtype=dtypes.int64)\n        out_op = gen_nn_ops.max_pool_grad_grad_with_argmax(\n            orig_in,\n            t,\n            argmax_t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"VALID\",\n            include_batch_in_index=config.include_batch_in_index)\n        out = self.evaluate(out_op).flatten()\n        self.assertAllClose(out,\n                            [11.0, 12.0, 14.0, 16.0, 21.0, 23.0, 27.0, 29.0])\n\n  def _ConstructAndTestGradient(self,\n                                pool_func,\n                                input_sizes,\n                                output_sizes,\n                                window_rows,\n                                window_cols,\n                                row_stride,\n                                col_stride,\n                                padding,\n                                data_format,\n                                use_gpu,\n                                x_init_value=None):\n    \"\"\"Verifies the gradients of the max or avg pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      output_sizes: Output tensor dimensions.\n      window_rows: kernel size in row dim\n      window_cols: kernel size in col dim\n      row_stride: Row Stride.\n      col_stride: Col Stride.\n      padding: Padding type.\n      data_format: Data format.\n      use_gpu: whether we are running on GPU\n      x_init_value: Values to be passed to the gradient checker.\n    \"\"\"\n    assert input_sizes[0] == output_sizes[0]\n    assert input_sizes[3] == output_sizes[3]\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1.\n    x = [f * 1.0 for f in range(1, total_size + 1)]\n    with self.cached_session(use_gpu=use_gpu):\n      input_tensor = constant_op.constant(x, shape=input_sizes, name=\"input\")\n      if pool_func == nn_ops.avg_pool:\n        func_name = \"avg_pool\"\n        err_tolerance = 1e-4\n      else:\n        if x_init_value is None:\n          x_init_value = np.asfarray(\n              np.arange(1, total_size + 1),\n              dtype=np.float32).reshape(input_sizes)\n        func_name = \"max_pool\"\n        err_tolerance = 1e-3\n      if data_format == \"NCHW\":\n        ksize = [1, 1, window_rows, window_cols]\n        strides = [1, 1, row_stride, col_stride]\n        if isinstance(padding, list):\n          padding = test_util.NHWCToNCHW(padding)\n        t = test_util.NHWCToNCHW(input_tensor)\n      else:\n        ksize = [1, window_rows, window_cols, 1]\n        strides = [1, row_stride, col_stride, 1]\n        t = input_tensor\n      t = pool_func(\n          t,\n          ksize=ksize,\n          strides=strides,\n          padding=padding,\n          data_format=data_format,\n          name=func_name)\n      if data_format == \"NCHW\":\n        t = test_util.NCHWToNHWC(t)\n\n      err = gradient_checker.compute_gradient_error(\n          input_tensor,\n          input_sizes,\n          t,\n          output_sizes,\n          x_init_value=x_init_value,\n          delta=1e-2)\n    tf_logging.info(\"%s gradient error = %.4f\" % (func_name, err))\n    self.assertLess(err, err_tolerance)\n\n  def _ConstructAndTestSecondGradient(self,\n                                      pool_func,\n                                      input_sizes,\n                                      output_sizes,\n                                      window_rows,\n                                      window_cols,\n                                      row_stride,\n                                      col_stride,\n                                      padding,\n                                      data_format,\n                                      use_gpu,\n                                      x_init_value=None):\n    \"\"\"Verifies the second-order gradients of the pooling function.\n\n    Args:\n      pool_func: Function to be called, co.MaxPool, co.AvgPool,\n        or the Lua version.\n      input_sizes: Input tensor dimensions.\n      output_sizes: Output tensor dimensions.\n      window_rows: kernel size in row dim\n      window_cols: kernel size in col dim\n      row_stride: Row Stride.\n      col_stride: Col Stride.\n      padding: Padding type.\n      data_format: Data format.\n      use_gpu: whether we are running on GPU\n      x_init_value: Values to be passed to the gradient checker.\n    \"\"\"\n    assert input_sizes[0] == output_sizes[0]\n    assert input_sizes[3] == output_sizes[3]\n    total_size = 1\n    for s in input_sizes:\n      total_size *= s\n    # Initializes the input tensor with array containing incrementing\n    # numbers from 1.\n    x = [f * 1.0 for f in range(1, total_size + 1)]\n    with self.cached_session(use_gpu=use_gpu):\n      input_tensor = constant_op.constant(x, shape=input_sizes, name=\"input\")\n      if pool_func == nn_ops.avg_pool:\n        func_name = \"avg_pool\"\n        err_tolerance = 1e-3\n      else:\n        if x_init_value is None:\n          x_init_value = np.asfarray(\n              np.arange(1, total_size + 1),\n              dtype=np.float32).reshape(input_sizes)\n        func_name = \"max_pool\"\n        err_tolerance = 1e-2\n      if data_format == \"NCHW\":\n        ksize = [1, 1, window_rows, window_rows]\n        strides = [1, 1, row_stride, col_stride]\n        t = test_util.NHWCToNCHW(input_tensor)\n      else:\n        ksize = [1, window_rows, window_rows, 1]\n        strides = [1, row_stride, col_stride, 1]\n        t = input_tensor\n      t = pool_func(\n          t,\n          ksize=ksize,\n          strides=strides,\n          padding=padding,\n          data_format=data_format,\n          name=func_name)\n      if data_format == \"NCHW\":\n        t = test_util.NHWCToNCHW(t)\n\n      t_g = gradients_impl.gradients(t**2, input_tensor)[0]\n      err = gradient_checker.compute_gradient_error(\n          input_tensor,\n          input_sizes,\n          t_g,\n          input_sizes,\n          x_init_value=x_init_value,\n          delta=1e-2)\n    tf_logging.info(\"%s second-order gradient error = %.4f\" % (func_name, err))\n    self.assertLess(err, err_tolerance)\n\n  def _testMaxPoolGradValidPadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 3, 3, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding2_1_6(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 6, 6, 3],\n          output_sizes=[2, 5, 5, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding2_1_7(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 7, 7, 3],\n          output_sizes=[2, 6, 6, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding1_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 3, 3, 1],\n          output_sizes=[1, 2, 2, 1],\n          window_rows=1,\n          window_cols=1,\n          row_stride=2,\n          col_stride=2,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradValidPadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 2, 3],\n          output_sizes=[2, 1, 1, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding1_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 1, 2, 3],\n          window_rows=1,\n          window_cols=1,\n          row_stride=2,\n          col_stride=2,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding2_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 1, 2, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradSamePadding3_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 7, 7, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPadding_1(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 7, 7, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [1, 1], [1, 1], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPadding_2(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 6, 8, 1],\n          window_rows=3,\n          window_cols=5,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [0, 1], [2, 3], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPaddingLeftGreater(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 6, 8, 1],\n          window_rows=3,\n          window_cols=5,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [0, 1], [3, 2], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPaddingBatchChannel(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[4, 7, 7, 3],\n          output_sizes=[4, 6, 8, 3],\n          window_rows=3,\n          window_cols=5,\n          row_stride=1,\n          col_stride=1,\n          padding=[[0, 0], [0, 1], [3, 2], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolExplicitPaddingStrides(self, data_format, use_gpu):\n    for pool_func in [nn_ops.max_pool]:\n      self._ConstructAndTestGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 4, 3, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=2,\n          col_stride=3,\n          padding=[[0, 0], [1, 1], [1, 1], [0, 0]],\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGrad(self):\n    for (data_format, use_gpu) in GetTestConfigs():\n      self._testMaxPoolGradValidPadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding1_2(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding2_1_6(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding2_1_7(data_format, use_gpu)\n      self._testMaxPoolGradValidPadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding1_2(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding2_1(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradSamePadding3_1(data_format, use_gpu)\n      self._testMaxPoolExplicitPadding_1(data_format, use_gpu)\n      self._testMaxPoolExplicitPadding_2(data_format, use_gpu)\n      self._testMaxPoolExplicitPaddingStrides(data_format, use_gpu)\n      self._testMaxPoolExplicitPaddingLeftGreater(data_format, use_gpu)\n      self._testMaxPoolExplicitPaddingBatchChannel(data_format, use_gpu)\n\n  def _MaxPoolGrad(self, orig_input, orig_output, grad, window_rows,\n                   window_cols, row_stride, col_stride, padding, v2):\n    \"\"\"Max Pooling Gradient.\n\n    Args:\n      orig_input: A float Tensor. The original input tensor.\n      orig_output: A float Tensor. The original output tensor.\n      grad: A float Tensor.\n        The 4D (batch x rows x cols x depth) output backprop.\n      window_rows: integer. Kernel size along rows dimension.\n      window_cols: integer. Kernel size along cols dimension.\n      row_stride: integer. Stride along rows dimension\n      col_stride: integer. Stride along cols dimension\n      padding: PoolingOpDef.Padding.  Padding type.\n\n    Returns:\n      A Tensor.\n    \"\"\"\n    pool_func = gen_nn_ops.max_pool_grad_v2 if v2 else gen_nn_ops.max_pool_grad\n    if v2:\n      return pool_func(orig_input, orig_output, grad,\n                       [1, window_rows, window_cols, 1],\n                       [1, row_stride, col_stride, 1], padding)\n    else:\n      padding, explicit_paddings = nn_ops.convert_padding(padding)\n      return pool_func(orig_input, orig_output, grad,\n                       [1, window_rows, window_cols, 1],\n                       [1, row_stride, col_stride, 1], padding,\n                       explicit_paddings)\n\n  def _testMaxPoolGradDirect(self, input_data, output_backprop,\n                             expected_input_backprop, input_sizes, output_sizes,\n                             window_rows, window_cols, row_stride, col_stride,\n                             padding, use_gpu, v2):\n    pool_func = gen_nn_ops.max_pool_v2 if v2 else nn_ops.max_pool\n    with self.cached_session(use_gpu=use_gpu):\n      input_tensor = variables.Variable(\n          np.array(input_data, dtype=np.float32).reshape(input_sizes))\n      self.evaluate(variables.global_variables_initializer())\n      output_tensor = pool_func(input_tensor, [1, window_rows, window_cols, 1],\n                                [1, row_stride, col_stride, 1], padding)\n      output_backprop_tensor = constant_op.constant(\n          output_backprop, shape=output_sizes)\n\n      input_backprop_tensor = self._MaxPoolGrad(\n          input_tensor, output_tensor, output_backprop_tensor, window_rows,\n          window_cols, row_stride, col_stride, padding, v2)\n\n      actual_input_backprop = self.evaluate(input_backprop_tensor)\n      self.assertShapeEqual(actual_input_backprop, input_backprop_tensor)\n      actual_input_backprop = actual_input_backprop.flatten()\n      actual_input_backprop = self._GetNdArray(actual_input_backprop)\n\n      actual_output = self.evaluate(output_tensor).flatten()\n      actual_output = self._GetNdArray(actual_output)\n\n      self.assertAllClose(\n          expected_input_backprop, actual_input_backprop, rtol=1e-6, atol=1e-6)\n\n  def _testMaxPoolGradDirect1_1(self):\n    input_data = [\n        1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n        1.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        11.0, 12.0, 13.0, 0.0, 15.0, 16.0, 17.0, 0.0, 19.0, 20.0, 21.0, 0.0,\n        0.0, 0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [True, False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=\"VALID\",\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradDirect1_2(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 17.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [True, False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=\"VALID\",\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradDirect1_3(self):\n    input_data = [\n        1.0,\n        0.0,\n        1.0,\n        0.0,\n        0.0,\n        1.0,\n        0.0,\n        1.0,\n        1.0,\n        0.0,\n        1.0,\n        0.0,\n        0.0,\n        1.0,\n        0.0,\n        1.0,\n    ]\n    output_backprop = [\n        11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0,\n        23.0, 24.0, 25.0, 26.0\n    ]\n    expected_input_backprop = [\n        54,\n        0.0,\n        62,\n        0.0,\n        0.0,\n        60,\n        0.0,\n        22.0,\n        47,\n        0.0,\n        51,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n        0.0,\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [True, False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 4, 4, 1],\n            window_rows=3,\n            window_cols=3,\n            row_stride=1,\n            col_stride=1,\n            padding=\"SAME\",\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradZeroExplicitPadding(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 17.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=[[0, 0], [0, 0], [0, 0], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradExplicitPadding_1(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0,\n                       20.0, 21.0, 22.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 49.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 22.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 4, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=[[0, 0], [0, 0], [0, 1], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradExplicitPadding_2(self):\n    input_data = [\n        1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0,\n        0.0, 1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    expected_input_backprop = [\n        54.0, 0.0, 30.0, 0.0, 0.0, 0.0, 0.0, 0.0, 39.0, 0.0, 21.0, 0.0, 0.0,\n        0.0, 0.0, 0.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 3, 1],\n            window_rows=3,\n            window_cols=3,\n            row_stride=2,\n            col_stride=2,\n            padding=[[0, 0], [2, 1], [2, 1], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  def _testMaxPoolGradExplicitPadding_3(self):\n    input_data = [\n        -1.0, -5.0, -1.0, -5.0, -5.0, -1.0, -5.0, -1.0, -1.0, -5.0, -1.0, -5.0,\n        -5.0, -1.0, -5.0, -1.0\n    ]\n    output_backprop = [11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0,\n                       20.0, 21.0, 22.0]\n    expected_input_backprop = [\n        11.0, 0.0, 25.0, 0.0, 0.0, 31.0, 0.0, 49.0, 19.0, 0.0, 41.0, 0.0, 0.0,\n        0.0, 0.0, 22.0\n    ]\n\n    for use_gpu in True, False:\n      for v2 in [False]:\n        self._testMaxPoolGradDirect(\n            input_data,\n            output_backprop,\n            expected_input_backprop,\n            input_sizes=[1, 4, 4, 1],\n            output_sizes=[1, 3, 4, 1],\n            window_rows=2,\n            window_cols=2,\n            row_stride=1,\n            col_stride=1,\n            padding=[[0, 0], [0, 0], [0, 1], [0, 0]],\n            use_gpu=use_gpu,\n            v2=v2)\n\n  @test_util.no_xla_auto_jit(\"b/123923733\")  # NaNs handled differently\n  def _testMaxPoolGradDirectWithNans2_1(self):\n    input_data = [float(\"nan\")] * 16\n    output_backprop = [11.0, 12.0, 13.0, 15.0, 16.0, 17.0, 19.0, 20.0, 21.0]\n    # Test the CPU implementation, which propagates diffs in case of NaN\n    expected_input_backprop_tf_cpu = [\n        11.0, 12.0, 13.0, 0.0, 15.0, 16.0, 17.0, 0.0, 19.0, 20.0, 21.0, 0.0,\n        0.0, 0.0, 0.0, 0.0\n    ]\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_tf_cpu,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=False,\n          v2=v2)\n\n    if not test.is_gpu_available():\n      return\n\n    # The functionality associated with TF_ENABLE_NANPROP is currently\n    # not supported on the ROCm platform, so skip this part of the test\n    # NANs in input lead to non-deterministic results, and hence skipping\n    # the remaining tests altogether on the ROCm platform\n    if test.is_built_with_rocm():\n      return\n\n    # Test the GPU implementation that uses cudnn for now.\n    saved_nanprop = os.environ.get(\"TF_ENABLE_MAXPOOL_NANPROP\")\n    # Do not propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"0\"\n    expected_input_backprop_cudnn = [\n        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n        0.0, 0.0\n    ]\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    # Propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"1\"\n    expected_input_backprop_cudnn = expected_input_backprop_tf_cpu\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    if saved_nanprop:\n      os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = saved_nanprop\n    else:\n      del os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"]\n\n  @test_util.no_xla_auto_jit(\"b/123923733\")  # NaNs handled differently\n  def _testMaxPoolGradDirectWithNans2_2(self):\n    input_data = [float(\"nan\")] * 16\n    output_backprop = [\n        float(\"nan\"), 12.0, 13.0, 15.0,\n        float(\"nan\"), 17.0, 19.0, 20.0,\n        float(\"nan\")\n    ]\n    # Test the CPU implementation, which propagates diffs in case of NaN\n    expected_input_backprop_tf_cpu = [\n        float(\"nan\"), 12.0, 13.0, 0.0, 15.0,\n        float(\"nan\"), 17.0, 0.0, 19.0, 20.0,\n        float(\"nan\"), 0.0, 0.0, 0.0, 0.0, 0.0\n    ]\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_tf_cpu,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=False,\n          v2=v2)\n\n    if not test.is_gpu_available():\n      return\n\n    # The functionality associated with TF_ENABLE_NANPROP is currently\n    # not supported on the ROCm platform, so skip this part of the test\n    # NANs in input lead to non-deterministic results, and hence skipping\n    # the remaining tests altogether on the ROCm platform\n    if test.is_built_with_rocm():\n      return\n\n    # Test the GPU implementation that uses cudnn for now.\n    saved_nanprop = os.environ.get(\"TF_ENABLE_MAXPOOL_NANPROP\")\n    # Do not propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"0\"\n    expected_input_backprop_cudnn = [\n        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n        0.0, 0.0\n    ]\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    # Propagate the diff in cases of NaNs\n    os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = \"1\"\n    expected_input_backprop_cudnn = expected_input_backprop_tf_cpu\n\n    for v2 in [True, False]:\n      self._testMaxPoolGradDirect(\n          input_data,\n          output_backprop,\n          expected_input_backprop_cudnn,\n          input_sizes=[1, 4, 4, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          use_gpu=True,\n          v2=v2)\n\n    if saved_nanprop:\n      os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"] = saved_nanprop\n    else:\n      del os.environ[\"TF_ENABLE_MAXPOOL_NANPROP\"]\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradDirect(self):\n    self._testMaxPoolGradDirect1_1()\n    self._testMaxPoolGradDirect1_2()\n    self._testMaxPoolGradDirect1_3()\n    self._testMaxPoolGradDirectWithNans2_1()\n    self._testMaxPoolGradDirectWithNans2_2()\n    self._testMaxPoolGradZeroExplicitPadding()\n    self._testMaxPoolGradExplicitPadding_1()\n    self._testMaxPoolGradExplicitPadding_2()\n    self._testMaxPoolGradExplicitPadding_3()\n\n  def _testMaxPoolGradGradValidPadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[1, 3, 3, 1],\n          output_sizes=[1, 3, 3, 1],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradValidPadding2_1_6(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 6, 6, 3],\n          output_sizes=[2, 5, 5, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradValidPadding2_1_7(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 7, 7, 3],\n          output_sizes=[2, 6, 6, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradValidPadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 2, 3],\n          output_sizes=[2, 1, 1, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"VALID\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding1_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=1,\n          window_cols=1,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding2_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 2, 4, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding2_2(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[2, 2, 4, 3],\n          output_sizes=[2, 1, 2, 3],\n          window_rows=2,\n          window_cols=2,\n          row_stride=2,\n          col_stride=2,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  def _testMaxPoolGradGradSamePadding3_1(self, data_format, use_gpu):\n    for pool_func in [gen_nn_ops.max_pool_v2, nn_ops.max_pool]:\n      self._ConstructAndTestSecondGradient(\n          pool_func,\n          input_sizes=[1, 7, 7, 1],\n          output_sizes=[1, 7, 7, 1],\n          window_rows=3,\n          window_cols=3,\n          row_stride=1,\n          col_stride=1,\n          padding=\"SAME\",\n          data_format=data_format,\n          use_gpu=use_gpu)\n\n  @test_util.run_deprecated_v1\n  def testMaxPoolGradGrad(self):\n    for (data_format, use_gpu) in GetTestConfigs():\n      self._testMaxPoolGradGradValidPadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradGradValidPadding2_1_6(data_format, use_gpu)\n      self._testMaxPoolGradGradValidPadding2_1_7(data_format, use_gpu)\n      self._testMaxPoolGradGradValidPadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding1_1(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding2_1(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding2_2(data_format, use_gpu)\n      self._testMaxPoolGradGradSamePadding3_1(data_format, use_gpu)\n\n  def _MaxPoolGradGrad(self, orig_input, orig_output, grad, window_rows,\n                       window_cols, row_stride, col_stride, padding):\n    \"\"\"Max Pooling Second-Order Gradient.\n\n    Args:\n      orig_input: A float Tensor. The original input tensor.\n      orig_output: A float Tensor. The original output tensor.\n      grad: A float Tensor.\n        The 4D (batch x out_rows x out_cols x depth) output backprop.\n      window_rows: integer. Kernel size along rows dimension.\n      window_cols: integer. Kernel size along cols dimension.\n      row_stride: integer. Stride along rows dimension\n      col_stride: integer. Stride along cols dimension\n      padding: PoolingOpDef.Padding.  Padding type.\n\n    Returns:\n      A Tensor.\n    \"\"\"\n    return gen_nn_ops.max_pool_grad_grad(\n        orig_input, orig_output, grad, [1, window_rows, window_cols, 1],\n        [1, row_stride, col_stride, 1], padding)\n\n  @test_util.run_deprecated_v1\n  def testAvgPoolGrad(self):\n    for (data_format, use_gpu) in GetTestConfigs():\n      self._testAvgPoolGradValidPadding1_1(data_format, use_gpu)\n      self._testAvgPoolGradValidPadding1_2(data_format, use_gpu)\n      self._testAvgPoolGradValidPadding2_1(data_format, use_gpu)\n      self._testAvgPoolGradValidPadding2_2(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding1_1(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding1_2(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding2_1(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding2_2(data_format, use_gpu)\n      self._testAvgPoolGradSamePadding3_1(data_format, use_gpu)\n\n  def _testAvgPoolGradValidPadding1_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 3, 3, 3],\n        output_sizes=[2, 3, 3, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=1,\n        col_stride=1,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradValidPadding1_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 3, 3, 3],\n        output_sizes=[2, 2, 2, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=2,\n        col_stride=2,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradValidPadding2_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 3, 3, 3],\n        output_sizes=[2, 2, 2, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=1,\n        col_stride=1,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradValidPadding2_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 2, 3],\n        output_sizes=[2, 1, 1, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=2,\n        col_stride=2,\n        padding=\"VALID\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding1_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 2, 4, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=1,\n        col_stride=1,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding1_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 1, 2, 3],\n        window_rows=1,\n        window_cols=1,\n        row_stride=2,\n        col_stride=2,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding2_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 2, 4, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=1,\n        col_stride=1,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding2_2(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[2, 2, 4, 3],\n        output_sizes=[2, 1, 2, 3],\n        window_rows=2,\n        window_cols=2,\n        row_stride=2,\n        col_stride=2,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  def _testAvgPoolGradSamePadding3_1(self, data_format, use_gpu):\n    self._ConstructAndTestGradient(\n        nn_ops.avg_pool,\n        input_sizes=[1, 7, 7, 1],\n        output_sizes=[1, 7, 7, 1],\n        window_rows=3,\n        window_cols=3,\n        row_stride=1,\n        col_stride=1,\n        padding=\"SAME\",\n        data_format=data_format,\n        use_gpu=use_gpu)\n\n  @test_util.run_deprecated_v1\n  def testShapeFunctionEdgeCases(self):\n    # All shapes unknown.\n    for pool_func in [nn_ops.max_pool, nn_ops.avg_pool]:\n      p = pool_func(\n          array_ops.placeholder(dtypes.float32),\n          ksize=[1, 1, 1, 1],\n          strides=[1, 1, 1, 1],\n          padding=\"SAME\")\n      self.assertEqual([None, None, None, None], p.get_shape().as_list())\n    p, am = nn_ops.max_pool_with_argmax(\n        array_ops.placeholder(dtypes.float32),\n        ksize=[1, 1, 1, 1],\n        strides=[1, 1, 1, 1],\n        padding=\"SAME\")\n    self.assertEqual([None, None, None, None], p.get_shape().as_list())\n    self.assertEqual([None, None, None, None], am.get_shape().as_list())\n\n    # Incorrect input shape.\n    for pool_func in [\n        nn_ops.max_pool, nn_ops.avg_pool, nn_ops.max_pool_with_argmax\n    ]:\n      with self.assertRaises(ValueError):\n        pool_func(\n            array_ops.placeholder(dtypes.float32, shape=[1, 3]),\n            ksize=[1, 1, 1, 1],\n            strides=[1, 1, 1, 1],\n            padding=\"SAME\")\n\n  @test_util.run_deprecated_v1\n  @test_util.disable_xla(\"b/123337890\")  # Error messages differ\n  def testOpEdgeCases(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      pool_funcs = [nn_ops.max_pool, nn_ops.avg_pool]\n      if test.is_gpu_available():\n        pool_funcs.append(nn_ops.max_pool_with_argmax)\n      for pool_func in pool_funcs:\n        if pool_func != nn_ops.max_pool:\n          # Illegal strides.\n          with self.assertRaisesRegex(\n              errors_impl.UnimplementedError,\n              \"Pooling is not yet supported on the batch\"):\n            sess.run(\n                pool_func(\n                    array_ops.placeholder(dtypes.float32),\n                    ksize=[1, 1, 1, 1],\n                    strides=[2, 1, 1, 1],\n                    padding=\"SAME\"))\n\n        # Filter too large.\n        with self.assertRaisesRegex(ValueError, \"Negative dimension size\"):\n          sess.run(\n              pool_func(\n                  array_ops.placeholder(dtypes.float32, shape=[32, 20, 20, 3]),\n                  ksize=[1, 20, 21, 1],\n                  strides=[1, 1, 1, 1],\n                  padding=\"VALID\"))\n        with self.assertRaisesRegex(ValueError, \"Negative dimension size\"):\n          pool_func(\n              array_ops.placeholder(dtypes.float32, shape=[32, 20, 20, 3]),\n              ksize=[1, 21, 20, 1],\n              strides=[1, 1, 1, 1],\n              padding=\"VALID\")\n\n  @test_util.run_deprecated_v1\n  def testEdgeCasesRaiseErrors(self):\n    with self.assertRaisesRegexp(\n        ValueError, \"NCHW_VECT_C.*is not supported with \"\n        \"explicit padding|XLA does not support pooling ops with explicit \"\n        \"padding\"):\n      nn_ops.max_pool(\n          array_ops.placeholder(dtypes.float32, shape=[1, 3, 3, 1]),\n          ksize=[1, 2, 2, 1],\n          strides=[1, 2, 2, 1],\n          padding=[[0, 0], [0, 1], [0, 1], [0, 0]],\n          data_format=\"NCHW_VECT_C\")\n    with self.assertRaisesRegexp(\n        ValueError, \"Explicit padding is not supported with an input \"\n                    \"tensor of rank 5\"):\n      nn_ops.max_pool_v2(\n          array_ops.placeholder(dtypes.float32, shape=[1, 3, 3, 1, 1]),\n          ksize=[1, 2, 2, 1, 1],\n          strides=[1, 2, 2, 1, 1],\n          padding=[[0, 0], [0, 1], [0, 1], [0, 0]],\n          data_format=\"NCHW\")\n    with self.assertRaisesRegexp(\n        ValueError, \"Attr 'padding' of 'MaxPoolV2' Op passed \"\n                    \"string 'EXPLICIT'\"):\n      gen_nn_ops.max_pool_v2(\n          array_ops.placeholder(dtypes.float32, shape=[1, 3, 3, 1, 1]),\n          ksize=[1, 2, 2, 1, 1],\n          strides=[1, 2, 2, 1, 1],\n          padding=\"EXPLICIT\",\n          data_format=\"NHWC\")\n\n  @test_util.run_deprecated_v1\n  def testEdgeCasesExcessPadding(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      with self.assertRaisesRegexp(\n          (errors_impl.UnimplementedError, errors_impl.InvalidArgumentError),\n          \"Right padding 2 needs to be smaller than the window size 2|\"\n          \"XLA does not support pooling ops with explicit padding\"):\n        input_sizes = [1, 3, 3, 1]\n        x = [(((f + 128) % 255) - 127) for f in range(9)]\n        t = constant_op.constant(x, shape=input_sizes, dtype=dtypes.float32)\n        sess.run(gen_nn_ops.max_pool(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"EXPLICIT\",\n            explicit_paddings=[0, 0, 0, 1, 0, 2, 0, 0],\n            data_format=\"NHWC\"))\n\n  @test_util.run_deprecated_v1\n  def testNegativePadding(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      with self.assertRaisesRegexp(\n          ValueError, \"All elements of explicit_paddings must be \"\n                      \"nonnegative for\"):\n        input_sizes = [1, 3, 3, 1]\n        x = [(((f + 128) % 255) - 127) for f in range(9)]\n        t = constant_op.constant(x, shape=input_sizes, dtype=dtypes.float32)\n        sess.run(gen_nn_ops.max_pool(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"EXPLICIT\",\n            explicit_paddings=[0, 0, -1, -1, -1, -1, 0, 0],\n            data_format=\"NHWC\"))\n\n  @test_util.run_deprecated_v1\n  def testExplicitPaddingBatch(self):\n    with self.session(use_gpu=test.is_gpu_available()) as sess:\n      with self.assertRaisesRegexp(\n          ValueError, \"Nonzero explicit padding in the batch or depth \"\n                      \"dimensions is not supported\"):\n        input_sizes = [1, 3, 3, 1]\n        x = [(((f + 128) % 255) - 127) for f in range(9)]\n        t = constant_op.constant(x, shape=input_sizes, dtype=dtypes.float32)\n        sess.run(gen_nn_ops.max_pool(\n            t,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"EXPLICIT\",\n            explicit_paddings=[1, 1, 1, 1, 1, 1, 0, 0],\n            data_format=\"NHWC\"))\n\n  @test_util.disable_xla(\n      \"b/205634417\")  # XLA is not throwing shape errors for multiple *Grad ops.\n  def testMaxPoolGradEagerShapeErrors(self):\n    with context.eager_mode():\n      orig_in = array_ops.ones((1, 1, 1, 1))\n\n      # Test invalid orig_out shape\n      orig_out = array_ops.ones((1, 1, 1, 2))\n      grad = array_ops.ones((1, 1, 1, 1))\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected orig_output shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected orig_output shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n\n      # Test invalid grad shape\n      orig_out = array_ops.ones((1, 1, 1, 1))\n      grad = array_ops.ones((1, 1, 1, 2))\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_grad(\n            orig_in, orig_out, grad, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n\n  def testMaxPoolGradWithArgmaxEagerShapeErrors(self):\n    with context.eager_mode():\n      inp = array_ops.ones((1, 1, 1, 1))\n\n      # Test invalid grad shape\n      grad = array_ops.ones((1, 1, 1, 2))\n      argmax = array_ops.zeros((1, 1, 1, 1), dtype=dtypes.int64)\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_with_argmax(\n            inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      # max_pool_grad_grad_with_argmax is only implemented for GPUs\n      if test.is_gpu_available():\n        with self.assertRaisesRegex(\n            errors_impl.InvalidArgumentError,\n            r\"Expected grad shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n          gen_nn_ops.max_pool_grad_grad_with_argmax(\n              inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n              padding=\"VALID\")\n\n      # Test invalid argmax shape\n      grad = array_ops.ones((1, 1, 1, 1))\n      argmax = array_ops.ones((1, 1, 1, 2), dtype=dtypes.int64)\n      with self.assertRaisesRegex(\n          errors_impl.InvalidArgumentError,\n          r\"Expected argmax shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n        gen_nn_ops.max_pool_grad_with_argmax(\n            inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n            padding=\"VALID\")\n      # max_pool_grad_grad_with_argmax is only implemented for GPUs\n      if test.is_gpu_available():\n        with self.assertRaisesRegex(\n            errors_impl.InvalidArgumentError,\n            r\"Expected argmax shape to be \\[1,1,1,1\\], but got \\[1,1,1,2\\]\"):\n          gen_nn_ops.max_pool_grad_grad_with_argmax(\n              inp, grad, argmax, ksize=[1, 1, 1, 1], strides=[1, 1, 1, 1],\n              padding=\"VALID\")\n\n  def testAvgPoolGradInvalidInputShapeRaiseError(self):\n    with self.assertRaises((ValueError, errors_impl.InvalidArgumentError)):\n      with self.cached_session():\n        orig_input_shape = constant_op.constant(\n            -536870912, shape=[4], dtype=dtypes.int32)\n        grad = constant_op.constant(\n            .0890338004362538, shape=[1, 5, 7, 1], dtype=dtypes.float64)\n        t = gen_nn_ops.AvgPoolGrad(\n            orig_input_shape=orig_input_shape,\n            grad=grad,\n            ksize=[1, 2, 2, 1],\n            strides=[1, 2, 2, 1],\n            padding=\"VALID\",\n            data_format=\"NHWC\")\n        self.evaluate(t)\n\n\ndef GetMaxPoolFwdTest(input_size, filter_size, strides, padding):\n\n  def Test(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    self._CompareMaxPoolingFwd(input_size, filter_size, strides, padding)\n\n  return Test\n\n\ndef GetMaxPoolGradTest(input_size, filter_size, output_size, strides, padding):\n\n  def Test(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    self._CompareMaxPoolingBk(input_size, output_size, filter_size, strides,\n                              padding)\n\n  return Test\n\n\ndef GetMaxPoolGradGradTest(input_size, filter_size, output_size, strides,\n                           padding):\n\n  def Test(self):\n    # MaxPoolWithArgMax is implemented only on CUDA.\n    if not test.is_gpu_available(cuda_only=True):\n      return\n    self._CompareMaxPoolingGradBk(input_size, output_size, filter_size, strides,\n                                  padding)\n\n  return Test\n\n\nif __name__ == \"__main__\":\n  for (name_, input_size_, filter_size_, output_size_, stride_,\n       padding_) in GetShrunkInceptionMaxPoolShapes():\n    setattr(PoolingTest, \"testMaxPoolFwd_\" + name_,\n            GetMaxPoolFwdTest(input_size_, filter_size_, stride_, padding_))\n    setattr(PoolingTest, \"testMaxPoolGrad_\" + name_,\n            GetMaxPoolGradTest(input_size_, filter_size_, output_size_, stride_,\n                               padding_))\n    setattr(PoolingTest, \"testMaxPoolGradGrad_\" + name_,\n            GetMaxPoolGradGradTest(input_size_, filter_size_, output_size_,\n                                   stride_, padding_))\n  test.main()\n"], "filenames": ["tensorflow/core/kernels/maxpooling_op.cc", "tensorflow/python/kernel_tests/nn_ops/pooling_ops_test.py"], "buggy_code_start_loc": [1270, 773], "buggy_code_end_loc": [1270, 773], "fixing_code_start_loc": [1271, 774], "fixing_code_end_loc": [1278, 786], "type": "CWE-617", "message": "TensorFlow is an open source platform for machine learning. When `MaxPool` receives a window size input array `ksize` with dimensions greater than its input tensor `input`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 32d7bd3defd134f21a4e344c8dfd40099aaf6b18. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-35989", "sourceIdentifier": "security-advisories@github.com", "published": "2022-09-16T22:15:11.667", "lastModified": "2022-09-20T14:54:52.350", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. When `MaxPool` receives a window size input array `ksize` with dimensions greater than its input tensor `input`, the GPU kernel gives a `CHECK` fail that can be used to trigger a denial of service attack. We have patched the issue in GitHub commit 32d7bd3defd134f21a4e344c8dfd40099aaf6b18. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. Cuando \"MaxPool\" recibe una matriz de entrada de tama\u00f1o de ventana \"ksize\" con dimensiones mayores que su tensor de entrada \"input\", el kernel de la GPU da un fallo \"CHECK\" que puede ser usado para desencadenar un ataque de denegaci\u00f3n de servicio. Hemos parcheado el problema en el commit 32d7bd3defd134f21a4e344c8dfd40099aaf6b18 de GitHub. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.10.0. Tambi\u00e9n seleccionaremos este compromiso en TensorFlow versi\u00f3n 2.9.1, TensorFlow versi\u00f3n 2.8.1, y TensorFlow versi\u00f3n 2.7.2, ya que estos tambi\u00e9n est\u00e1n afectados y todav\u00eda est\u00e1n en el rango admitido. No se presentan mitigaciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-617"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.7.2", "matchCriteriaId": "C6622D95-1C86-45C5-AB55-E6EEEA0996DF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.8.0", "versionEndExcluding": "2.8.1", "matchCriteriaId": "0F9D273D-02DC-441E-AA91-EAC8DEAA4B44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.9.0", "versionEndExcluding": "2.9.1", "matchCriteriaId": "FE4F8A81-6CC2-4F7F-9602-C170FDD926E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc0:*:*:*:*:*:*", "matchCriteriaId": "1DBFBCE2-0A01-4575-BE45-6775ABFB8B28"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc1:*:*:*:*:*:*", "matchCriteriaId": "89806CF9-E423-4CA6-A01A-8175C260CB24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc2:*:*:*:*:*:*", "matchCriteriaId": "F2B80690-A257-4E16-BD27-9AE045BC56ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.10:rc3:*:*:*:*:*:*", "matchCriteriaId": "F335F9A4-5AB8-4E53-BC18-E01F7C653E5E"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/32d7bd3defd134f21a4e344c8dfd40099aaf6b18", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-j43h-pgmg-5hjq", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/32d7bd3defd134f21a4e344c8dfd40099aaf6b18"}}