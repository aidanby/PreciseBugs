{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n/**\n * Logs Controller\n *\n * @property Log $Log\n * @property PaginatorComponent $Paginator\n */\nclass LogsController extends AppController {\n\n/**\n * Components\n *\n * @var array\n */\n\tpublic $components = array('Paginator', 'RequestHandler');\n\tpublic $paginate = array(\n\t\t'limit' => 100,\n\t\t'order' => array( 'Log.TimeKey' => 'asc' ),\n\t\t'paramType' => 'querystring'\n\t);\n\n/**\n * index method\n *\n * @return void\n */\n\tpublic function index() {\n\t\t$this->Log->recursive = -1;\n\t\t$this->Paginator->settings = $this->paginate;\n\n\t\t$logs = $this->Paginator->paginate('Log');\n\t\t$this->set(compact('logs'));\n\t}\n\n/**\n * view method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function view($id = null) {\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t$this->set('log', $this->Log->find('first', $options));\n\t}\n\n/**\n * add method\n *\n * @return void\n */\n\tpublic function add() {\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->Log->create();\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t}\n\t}\n\n/**\n * edit method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function edit($id = null) {\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\tif ($this->request->is(array('post', 'put'))) {\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t} else {\n\t\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t\t$this->request->data = $this->Log->find('first', $options);\n\t\t}\n\t}\n\n/**\n * delete method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function delete($id = null) {\n\t\t$this->Log->id = $id;\n\t\tif (!$this->Log->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$this->request->allowMethod('post', 'delete');\n\t\tif ($this->Log->delete()) {\n\t\t\treturn $this->flash(__('The log has been deleted.'), array('action' => 'index'));\n\t\t} else {\n\t\t\treturn $this->flash(__('The log could not be deleted. Please, try again.'), array('action' => 'index'));\n\t\t}\n\t}}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n/**\n * Logs Controller\n *\n * @property Log $Log\n * @property PaginatorComponent $Paginator\n */\nclass LogsController extends AppController {\n\n/**\n * Components\n *\n * @var array\n */\n\tpublic $components = array('Paginator', 'RequestHandler');\n\tpublic $paginate = array(\n\t\t'limit' => 100,\n\t\t'order' => array( 'Log.TimeKey' => 'asc' ),\n\t\t'paramType' => 'querystring'\n\t);\n\n  public function beforeFilter() {\n    parent::beforeFilter();\n    global $user;\n    # We already tested for auth in appController, so we just need to test for specific permission\n    $canView = (!$user) || ($user['System'] != 'None');\n    if (!$canView) {\n      throw new UnauthorizedException(__('Insufficient Privileges'));\n      return;\n    }\n  }\n\n/**\n * index method\n *\n * @return void\n */\n\tpublic function index() {\n\t\t$this->Log->recursive = -1;\n\t\t$this->Paginator->settings = $this->paginate;\n\n\t\t$logs = $this->Paginator->paginate('Log');\n\t\t$this->set(compact('logs'));\n\t}\n\n/**\n * view method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function view($id = null) {\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t$this->set('log', $this->Log->find('first', $options));\n\t}\n\n/**\n * add method\n *\n * @return void\n */\n\tpublic function add() {\n    global $user;\n    $canAdd = (!$user) || (($user['System'] == 'Edit') || ZM_LOG_INJECT);\n    if (!$canAdd) {\n      throw new UnauthorizedException(__('Insufficient privileges'));\n      return;\n    }\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->Log->create();\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t}\n\t}\n\n/**\n * edit method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function edit($id = null) {\n    global $user;\n    $canEdit = (!$user) || ($user['System'] == 'Edit');\n    if (!$canEdit) {\n      throw new UnauthorizedException(__('Insufficient privileges'));\n      return;\n    }\n\n\t\tif (!$this->Log->exists($id)) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\tif ($this->request->is(array('post', 'put'))) {\n\t\t\tif ($this->Log->save($this->request->data)) {\n\t\t\t\treturn $this->flash(__('The log has been saved.'), array('action' => 'index'));\n\t\t\t}\n\t\t} else {\n\t\t\t$options = array('conditions' => array('Log.' . $this->Log->primaryKey => $id));\n\t\t\t$this->request->data = $this->Log->find('first', $options);\n\t\t}\n\t}\n\n/**\n * delete method\n *\n * @throws NotFoundException\n * @param string $id\n * @return void\n */\n\tpublic function delete($id = null) {\n    $canDelete = (!$user) || ($user['System'] == 'Edit');\n    if (!$canDelete) {\n      throw new UnauthorizedException(__('Insufficient privileges'));\n      return;\n    }\n\t\t$this->Log->id = $id;\n\t\tif (!$this->Log->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid log'));\n\t\t}\n\t\t$this->request->allowMethod('post', 'delete');\n\t\tif ($this->Log->delete()) {\n\t\t\treturn $this->flash(__('The log has been deleted.'), array('action' => 'index'));\n\t\t} else {\n\t\t\treturn $this->flash(__('The log could not be deleted. Please, try again.'), array('action' => 'index'));\n\t\t}\n\t}}\n"], "filenames": ["web/api/app/Controller/LogsController.php"], "buggy_code_start_loc": [21], "buggy_code_end_loc": [93], "fixing_code_start_loc": [22], "fixing_code_end_loc": [123], "type": "CWE-200", "message": "ZoneMinder is a free, open source Closed-circuit television software application. In affected versions the ZoneMinder API Exposes Database Log contents to user without privileges, allows insertion, modification, deletion of logs without System Privileges. Users are advised yo upgrade as soon as possible. Users unable to upgrade should disable database logging.", "other": {"cve": {"id": "CVE-2022-39289", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-07T21:15:11.553", "lastModified": "2022-10-11T13:52:40.540", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ZoneMinder is a free, open source Closed-circuit television software application. In affected versions the ZoneMinder API Exposes Database Log contents to user without privileges, allows insertion, modification, deletion of logs without System Privileges. Users are advised yo upgrade as soon as possible. Users unable to upgrade should disable database logging."}, {"lang": "es", "value": "ZoneMinder es una aplicaci\u00f3n de software de televisi\u00f3n en circuito cerrado, gratuita y de c\u00f3digo abierto. En las versiones afectadas, la API de ZoneMinder expone el contenido de los registros de la base de datos a usuarios no privilegiados, y permite una inserci\u00f3n, modificaci\u00f3n y eliminaci\u00f3n de registros no privilegiados de sistema. Es recomendado a usuarios actualizar lo antes posible. Los usuarios que no puedan actualizarse deber\u00e1n deshabilitar el registro de la base de datos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}, {"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.36.27", "matchCriteriaId": "71924B40-1B96-4D20-AF19-51DA9D41B216"}, {"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionStartIncluding": "1.37.0", "versionEndExcluding": "1.37.24", "matchCriteriaId": "3C6BB71F-F044-465B-A7F4-C2F11E8AA8A3"}]}]}], "references": [{"url": "https://github.com/ZoneMinder/zoneminder/commit/34ffd92bf123070cab6c83ad4cfe6297dd0ed0b4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/security/advisories/GHSA-mpcx-3gvh-9488", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ZoneMinder/zoneminder/commit/34ffd92bf123070cab6c83ad4cfe6297dd0ed0b4"}}