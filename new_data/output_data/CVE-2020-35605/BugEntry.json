{"buggy_code": ["Changelog\n==============\n\n|kitty| is a feature full, cross-platform, *fast*, GPU based terminal emulator.\nTo update |kitty|, :doc:`follow the instructions <binary>`.\n\n0.19.3 [future]\n-------------------\n\n- Add a new mappable `select_tab` action to choose a tab to switch to even\n  when the tab bar is hidden (:iss:`3115`)\n\n- Distribute extra pixels among all eight-blocks rather than adding them\n  all to the last block (:iss:`3097`)\n\n- Fix drawing of a few sextant characters incorrect (:pull:`3105`)\n\n- macOS: Fix minimize not working for chromeless windows (:iss:`3112`)\n\n- Preserve lines in the scrollback if a scrolling region is defined that\n  is contiguous with the top of the screen (:iss:`3113`)\n\n- Wayland: Fix key repeat being stopped by the release of an unrelated key\n  (:iss:`2191`)\n\n- Add an option, :opt:`detect_urls` to control whether kitty will detect URLs\n  when the mouse moves over them (:pull:`3118`)\n\n\n0.19.2 [2020-11-13]\n-------------------\n\n- A new :doc:`kittens/query_terminal` kitten to easily query the running kitty\n  via escape codes to detect its version, and the values of\n  configuration options that enable or disable terminal features.\n\n- Options to control mouse pointer shape, :opt:`default_pointer_shape`, and\n  :opt:`pointer_shape_when_dragging` (:pull:`3041`)\n\n- Font independent rendering for braille characters, which ensures they are properly\n  aligned at all font sizes.\n\n- Fix a regression in 0.19.0 that caused borders not to be drawn when setting\n  :opt:`window_margin_width` and keeping :opt:`draw_minimal_borders` on\n  (:iss:`3017`)\n\n- Fix a regression in 0.19.0 that broke rendering of one-eight bar unicode\n  characters at very small font sizes (:iss:`3025`)\n\n- Wayland: Fix a crash under GNOME when using multiple OS windows\n  (:pull:`3066`)\n\n- Fix selections created by dragging upwards not being auto-cleared when\n  screen contents change (:pull:`3028`)\n\n- macOS: Fix kitty not being added to PATH automatically when using pre-built\n  binaries (:iss:`3063`)\n\n- Allow adding MIME definitions to kitty by placing a ``mime.types`` file in\n  the kitty config directory (:iss:`3056`)\n\n- Dont ignore :option:`--title` when using a session file that defines no\n  windows (:iss:`3055`)\n\n- Fix the send_text action not working in URL handlers (:iss:`3081`)\n\n- Fix last character of URL not being detected if it is the only character on a\n  new line (:iss:`3088`)\n\n- Don't restrict the ICH,DCH,REP control codes to only the current scroll region  (:iss:`3090`, :iss:`3096`)\n\n\n0.19.1 [2020-10-06]\n-------------------\n\n- hints kitten: Add an ``ip`` type for easy selection of IP addresses\n  (:pull:`3009`)\n\n- Fix a regression that caused a segfault when using\n  :opt:`scrollback_pager_history_size` and it needs to be expanded (:iss:`3011`)\n\n- Fix update available notifications repeating (:pull:`3006`)\n\n\n0.19.0 [2020-10-04]\n-------------------\n\n- Add support for `hyperlinks from terminal programs\n  <https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda>`_.\n  Controlled via :opt:`allow_hyperlinks` (:iss:`68`)\n\n- Add support for easily editing or downloading files over SSH sessions\n  without the need for any special software, see :doc:`kittens/remote_file`\n\n- A new :doc:`kittens/hyperlinked_grep` kitten to easily search files and open\n  the results at the matched line by clicking on them.\n\n- Allow customizing the :doc:`actions kitty takes <open_actions>` when clicking on URLs\n\n- Improve rendering of borders when using minimal borders. Use less space and\n  do not display a box around active windows\n\n- Add a new extensible escape code to allow terminal programs to trigger\n  desktop notifications. See :ref:`desktop_notifications` (:iss:`1474`)\n\n- Implement special rendering for various characters from the set of \"Symbols\n  for Legacy Computing\" from the Unicode 13 standard\n\n- Unicode input kitten: Allow choosing symbols from the NERD font as well.\n  These are mostly Private Use symbols not in any standard, however are common. (:iss:`2972`)\n\n- Allow specifying border sizes in either pts or pixels. Change the default to\n  0.5pt borders as this works best with the new minimal border style\n\n- Add support for displaying correct colors with non-sRGB PNG files (Adds a\n  dependency on liblcms2)\n\n- hints kitten: Add a new :option:`kitty +kitten hints --type` of ``hyperlink`` useful\n  for activating hyperlinks using just the keyboard\n\n- Allow tracking focus change events in watchers (:iss:`2918`)\n\n- Allow specifying watchers in session files and via a command line argument\n  (:iss:`2933`)\n\n- Add a setting :opt:`tab_activity_symbol` to show a symbol in the tab title\n  if one of the windows has some activity after it was last focused\n  (:iss:`2515`)\n\n- macOS: Switch to using the User Notifications framework for notifications.\n  The current notifications framework has been deprecated in Big Sur. The new\n  framework only allows notifications from signed and notarized applications,\n  so people using kitty from homebrew/source are out of luck. Complain to\n  Apple.\n\n- When in the main screen and a program grabs the mouse, do not use the scroll\n  wheel events to scroll the scrollback buffer, instead send them to the\n  program (:iss:`2939`)\n\n- Fix unfocused windows in which a bell occurs not changing their border color\n  to red until a relayout\n\n- Linux: Fix automatic detection of bold/italic faces for fonts such as IBM\n  Plex Mono that have the regular face with a full name that is the same as the\n  family name (:iss:`2951`)\n\n- Fix a regression that broke :opt:`kitten_alias` (:iss:`2952`)\n\n- Fix a regression that broke the ``move_window_to_top`` action (:pull:`2953`)\n\n- Fix a memory leak when changing font sizes\n\n- Fix some lines in the scrollback buffer not being properly rendered after a\n  window resize/font size change (:iss:`2619`)\n\n\n0.18.3 [2020-08-11]\n-------------------\n\n- hints kitten: Allow customizing hint colors (:pull:`2894`)\n\n- Wayland: Fix a typo in the previous release that broke reading mouse cursor size (:iss:`2895`)\n\n- Fix a regression in the previous release that could cause an exception during\n  startup in rare circumstances (:iss:`2896`)\n\n- Fix image leaving behind a black rectangle when switch away and back to\n  alternate screen (:iss:`2901`)\n\n- Fix one pixel mis-alignment of rounded corners when either the cell\n  dimensions or the thickness of the line is an odd number of pixels\n  (:iss:`2907`)\n\n- Fix a regression that broke specifying OS window size in the session file\n  (:iss:`2908`)\n\n\n0.18.2 [2020-07-28]\n--------------------\n\n- X11: Improve handling of multiple keyboards. Now pressing a modifier key in\n  one keyboard and a normal key in another works (:iss:`2362`). Don't rebuild\n  keymaps on new keyboard events that only change geometry (:iss:`2787`).\n  Better handling of multiple keyboards with incompatible layouts (:iss:`2726`)\n\n- Improve anti-aliasing of triangular box drawing characters, noticeable on\n  low-resolution screens (:iss:`2844`)\n\n- Fix ``kitty @ send-text`` not working reliably when using a socket for remote\n  control (:iss:`2852`)\n\n- Implement support for box drawing rounded-corners characters (:iss:`2240`)\n\n- Allow setting the class for new OS windows in a session file\n\n- When a character from the Unicode Dingbat block is followed by a space, use\n  the extra space to render a larger version of the character (:iss:`2850`)\n\n- macOS: Fix the LC_CTYPE env var being set to UTF-8 on systems in which the\n  language and country code do not form a valid locale (:iss:`1233`)\n\n- macOS: Fix :kbd:`cmd+plus` not changing font size (:iss:`2839`)\n\n- Make neighboring window selection in grid and splits layouts more intelligent\n  (:pull:`2840`)\n\n- Allow passing the current selection to kittens (:iss:`2796`)\n\n- Fix pre-edit text not always being cleared with ibus input (:iss:`2862`)\n\n- Allow setting the :opt:`background_opacity` of new OS windows created via\n  :option:`kitty --single-instance` using the :option:`kitty --override` command line\n  argument (:iss:`2806`)\n\n- Fix the CSI J (Erase in display ED) escape code not removing line continued\n  markers (:iss:`2809`)\n\n- hints kitten: In linenumber mode expand paths that starts with ~\n  (:iss:`2822`)\n\n- Fix ``launch --location=last`` not working (:iss:`2841`)\n\n- Fix incorrect centering when a PUA or symbol glyph is followed by more than one space\n\n- Have the :opt:`confirm_os_window_close` option also apply when closing tabs\n  with multiple windows (:iss:`2857`)\n\n- Add support for legacy DECSET codes 47, 1047 and 1048 (:pull:`2871`)\n\n- macOS: no longer render emoji 20% below the baseline. This caused some emoji\n  to be cut-off and also look misaligned with very high cells (:iss:`2873`)\n\n- macOS: Make the window id of OS windows available in the ``WINDOWID``\n  environment variable (:pull:`2877`)\n\n- Wayland: Fix a regression in 0.18.0 that could cause crashes related to mouse\n  cursors in some rare circumstances (:iss:`2810`)\n\n- Fix change in window size that does not change number of cells not being\n  reported to the kernel (:iss:`2880`)\n\n\n0.18.1 [2020-06-23]\n--------------------\n\n- macOS: Fix for diff kitten not working with python 3.8 (:iss:`2780`)\n\n\n0.18.0 [2020-06-20]\n--------------------\n\n- Allow multiple overlay windows per normal window\n\n- Add an option :opt:`confirm_os_window_close` to ask for confirmation\n  when closing an OS window with multiple kitty windows.\n\n- Tall and Fat layouts: Add a ``mirrored`` option to put the full size window\n  on the opposite edge of the screen (:iss:`2654`)\n\n- Tall and Fat layouts: Add mappable actions to increase or decrease the number\n  of full size windows (:iss:`2688`)\n\n- Allow sending arbitrary signals to the current foreground process in a window\n  using either a mapping in kitty.conf or via remote control (:iss:`2778`)\n\n- Allow sending the back and forward mouse buttons to terminal applications\n  (:pull:`2742`)\n\n- **Backwards incompatibility**: The numbers used to encode mouse buttons\n  for the ``send_mouse_event`` function that can be used in kittens have\n  been changed (see :ref:`send_mouse_event`).\n\n- Add a new mappable ``quit`` action to quit kitty completely.\n\n- Fix marks using different colors with regexes using only a single color\n  (:pull:`2663`)\n\n- Linux: Workaround for broken Nvidia drivers for old cards (:iss:`456`)\n\n- Wayland: Fix kitty being killed on some Wayland compositors if a hidden window\n  has a lot of output (:iss:`2329`)\n\n- BSD: Fix controlling terminal not being established (:pull:`2686`)\n\n- Add support for the CSI REP escape code (:pull:`2702`)\n\n- Wayland: Fix mouse cursor rendering on HiDPI screens (:pull:`2709`)\n\n- X11: Recompile keymaps on XkbNewKeyboardNotify events (:iss:`2726`)\n\n- X11: Reduce startup time by ~25% by only querying GLX for framebuffer\n  configurations once (:iss:`2754`)\n\n- macOS: Notarize the kitty application bundle (:iss:`2040`)\n\n- Fix the kitty shell launched via a mapping needlessly requiring\n  :opt:`allow_remote_control` to be turned on.\n\n\n0.17.4 [2020-05-09]\n--------------------\n\n- Allow showing the name of the current layout and the number of windows\n  in tab titles (:iss:`2634`)\n\n- macOS: Fix a regression in the previous release that caused ligatures to be\n  not be centered horizontally (:iss:`2591`)\n\n- By default, double clicking no longer considers the : as part of words, see\n  :opt:`select_by_word_characters` (:iss:`2602`)\n\n- Fix a regression that caused clicking in the padding/margins of windows in\n  the stack layout to switch the window to the first window (:iss:`2604`)\n\n- macOS: Fix a regression that broke drag and drop (:iss:`2605`)\n\n- Report modifier key state when sending wheel events to the terminal program\n\n- Fix kitty @ send-text not working with text larger than 1024 bytes when using\n  :option:`kitty --listen-on` (:iss:`2607`)\n\n- Wayland: Fix OS window title not updating for hidden windows (:iss:`2629`)\n\n- Fix :opt:`background_tint` making the window semi-transparent (:iss:`2618`)\n\n\n0.17.3 [2020-04-23]\n--------------------\n\n- Allow individually setting margins and padding for each edge (left, right,\n  top, bottom). Margins can also be controlled per window via remote control\n  (:iss:`2546`)\n\n- Fix reverse video not being rendered correctly when using transparency or a\n  background image (:iss:`2419`)\n\n- Allow mapping arbitrary remote control commands to key presses in\n  :file:`kitty.conf`\n\n- X11: Fix crash when doing drag and drop from some applications (:iss:`2505`)\n\n- Fix :option:`launch --stdin-add-formatting` not working (:iss:`2512`)\n\n- Update to Unicode 13.0 (:iss:`2513`)\n\n- Render country flags designated by a pair of unicode codepoints\n  in two cells instead of four.\n\n- diff kitten: New option to control the background color for filler lines in\n  the margin (:iss:`2518`)\n\n- Fix specifying options for layouts in the startup session file not working\n  (:iss:`2520`)\n\n- macOS: Fix incorrect horizontal positioning of some full-width East Asian characters\n  (:iss:`1457`)\n\n- macOS: Render multi-cell PUA characters centered, matching behavior on other\n  platforms\n\n- Linux: Ignore keys if they are designated as layout/group/mode switch keys\n  (:iss:`2519`)\n\n- Marks: Fix marks not handling wide characters and tab characters correctly\n  (:iss:`2534`)\n\n- Add a new :opt:`listen_on` option in kitty.conf to set :option:`kitty --listen-on`\n  globally. Also allow using environment variables in this option (:iss:`2569`).\n\n- Allow sending mouse events in kittens (:pull:`2538`)\n\n- icat kitten: Fix display of 16-bit depth images (:iss:`2542`)\n\n- Add ncurses specific terminfo definitions for strikethrough (:pull:`2567`)\n\n- Fix a regression in 0.17 that broke displaying graphics over SSH\n  (:iss:`2568`)\n\n- Fix :option:`--title` not being applied at window creation time (:iss:`2570`)\n\n0.17.2 [2020-03-29]\n--------------------\n\n- Add a :option:`launch --watcher` option that allows defining callbacks\n  that are called for various events in the window's life-cycle (:iss:`2440`)\n\n- Fix a regression in 0.17 that broke drawing of borders with non-minimal\n  borders (:iss:`2474`)\n\n- Hints kitten: Allow copying to primary selection as well as clipboard\n  (:pull:`2487`)\n\n- Add a new mappable action ``close_other_windows_in_tab`` to close all but the\n  active window (:iss:`2484`)\n\n- Hints kitten: Adjust the default regex used to detect line numbers to handle\n  line+column numbers (:iss:`2268`)\n\n- Fix blank space at the start of tab bar in the powerline style when first tab is\n  inactive (:iss:`2478`)\n\n- Fix regression causing incorrect rendering of separators in tab bar when\n  defining a tab bar background color (:pull:`2480`)\n\n- Fix a regression in 0.17 that broke the kitty @ launch remote command and\n  also broke the --tab-title option when creating a new tab. (:iss:`2488`)\n\n- Linux: Fix selection of fonts with multiple width variants not preferring\n  the normal width faces (:iss:`2491`)\n\n\n0.17.1 [2020-03-24]\n--------------------\n\n- Fix :opt:`cursor_underline_thickness` not working (:iss:`2465`)\n\n- Fix a regression in 0.17 that caused tab bar background to be rendered after\n  the last tab as well (:iss:`2464`)\n\n- macOS: Fix a regression in 0.17 that caused incorrect variants to be\n  automatically selected for some fonts (:iss:`2462`)\n\n- Fix a regression in 0.17 that caused kitty @ set-colors to require setting\n  cursor_text_color (:iss:`2470`)\n\n\n0.17.0 [2020-03-24]\n--------------------\n\n- :ref:`splits_layout` to arrange windows in arbitrary splits\n  (:iss:`2308`)\n\n- Add support for specifying a background image, see :opt:`background_image`\n  (:iss:`163` and :pull:`2326`; thanks to Fredrick Brennan.)\n\n- A new :opt:`background_tint` option to darken the background under the text\n  area when using background images and/or transparent windows.\n\n- Allow selection of single cells with the mouse. Also improve mouse selection\n  to follow semantics common to most programs (:iss:`945`)\n\n- New options :opt:`cursor_beam_thickness` and :opt:`cursor_underline_thickness` to control the thickness of the\n  beam and underline cursors (:iss:`2337` and :pull:`2342`)\n\n- When the application running in the terminal grabs the mouse, pass middle\n  clicks to the application unless :opt:`terminal_select_modifiers` are\n  pressed (:iss:`2368`)\n\n- A new ``copy_and_clear_or_interrupt`` function (:iss:`2403`)\n\n- X11: Fix arrow mouse cursor using right pointing instead of the default left\n  pointing arrow (:iss:`2341`)\n\n- Allow passing the currently active kitty window id in the launch command\n  (:iss:`2391`)\n\n- unicode input kitten: Allow pressing :kbd:`ctrl+tab` to change the input mode\n  (:iss:`2343`)\n\n- Fix a bug that prevented using custom functions with the new marks feature\n  (:iss:`2344`)\n\n- Make the set of URL prefixes that are recognized while hovering with the\n  mouse configurable (:iss:`2416`)\n\n- Fix border/margin/padding sizes not being recalculated on DPI change\n  (:iss:`2346`)\n\n- diff kitten: Fix directory diffing with removed binary files failing\n  (:iss:`2378`)\n\n- macOS: Fix menubar title not updating on OS Window focus change (:iss:`2350`)\n\n- Fix rendering of combining characters with fonts that have glyphs for\n  precomposed characters but not decomposed versions (:iss:`2365`)\n\n- Fix incorrect rendering of selection when using rectangular select and\n  scrolling (:iss:`2351`)\n\n- Allow setting WM_CLASS and WM_NAME when creating new OS windows with the\n  launch command (:option:`launch --os-window-class`)\n\n- macOS: When switching input method while a pending multi-key input is in\n  progress, clear the pending input (:iss:`2358`)\n\n- Fix a regression in the previous release that broke switching to neighboring windows\n  in the Grid layout when there are less than four windows (:iss:`2377`)\n\n- Fix colors in scrollback pager off if the window has redefined terminal\n  colors using escape codes (:iss:`2381`)\n\n- Fix selection not updating properly while scrolling (:iss:`2442`)\n\n- Allow extending selections by dragging with right button pressed\n  (:iss:`2445`)\n\n- Workaround for bug in less that causes colors to reset at wrapped lines\n  (:iss:`2381`)\n\n- X11/Wayland: Allow drag and drop of text/plain in addition to text/uri-list\n  (:iss:`2441`)\n\n- Dont strip :code:`&` and :code:`-` from the end of URLs (:iss:`2436`)\n\n- Fix ``@selection`` placeholder not working with launch command (:iss:`2417`)\n\n- Drop support for python 3.5\n\n- Wayland: Fix a crash when drag and dropping into kitty (:iss:`2432`)\n\n- diff kitten: Fix images lingering as blank rectangles after the kitten quits\n  (:iss:`2449`)\n\n- diff kitten: Fix images losing position when scrolling using mouse\n  wheel/touchpad\n\n\n0.16.0 [2020-01-28]\n--------------------\n\n- A new :doc:`marks` feature that allows highlighting and scrolling to arbitrary\n  text in the terminal window.\n\n- hints kitten: Allow pressing :sc:`goto_file_line` to quickly open\n  the selected file at the selected line in vim or a configurable editor (:iss:`2268`)\n\n- Allow having more than one full height window in the :code:`tall` layout\n  (:iss:`2276`)\n\n- Allow choosing OpenType features for individual fonts via the\n  :opt:`font_features` option. (:pull:`2248`)\n\n- Wayland: Fix a freeze in rare circumstances when having multiple OS Windows\n  (:iss:`2307` and :iss:`1722`)\n\n- Wayland: Fix window titles being set to very long strings on the order of 8KB\n  causing a crash (:iss:`1526`)\n\n- Add an option :opt:`force_ltr` to turn off the display of text in RTL scripts\n  in right-to-left order (:pull:`2293`)\n\n- Allow opening new tabs/windows before the current tab/window as well as after\n  it with the :option:`launch --location` option.\n\n- Add a :opt:`resize_in_steps` option that can be used to resize the OS window\n  in steps as large as character cells (:pull:`2131`)\n\n- When triple-click+dragging to select multiple lines, extend the selection\n  of the first line to match the rest on the left (:pull:`2284`)\n\n- macOS: Add a :code:`titlebar-only` setting to\n  :opt:`hide_window_decorations` to only hide the title bar (:pull:`2286`)\n\n- Fix a segfault when using :option:`kitty --debug-config` with maps (:iss:`2270`)\n\n- ``goto_tab`` now maps numbers larger than the last tab to the last tab\n  (:iss:`2291`)\n\n- Fix URL detection not working for urls of the form scheme:///url\n  (:iss:`2292`)\n\n- When windows are semi-transparent and all contain graphics, correctly render\n  them. (:iss:`2310`)\n\n0.15.1 [2019-12-21]\n--------------------\n\n- Fix a crash/incorrect rendering when detaching a window in some circumstances\n  (:iss:`2173`)\n\n- hints kitten: Add an option :option:`kitty +kitten hints --ascending` to\n  control if the hints numbers increase or decrease from top to bottom\n\n- Fix :opt:`background_opacity` incorrectly applying to selected text and\n  reverse video text (:iss:`2177`)\n\n- Add a new option :opt:`tab_bar_background` to specify a different color\n  for the tab bar (:iss:`2198`)\n\n- Add a new option :opt:`active_tab_title_template` to specify a different\n  template for active tab titles (:iss:`2198`)\n\n- Fix lines at the edge of the window at certain windows sizes when drawing\n  images on a transparent window (:iss:`2079`)\n\n- Fix window not being rendered for the first time until some input has been\n  received from child process (:iss:`2216`)\n\n\n0.15.0 [2019-11-27]\n--------------------\n\n- Add a new action :ref:`detach_window <detach_window>` that can be used to move the current\n  window into a different tab (:iss:`1310`)\n\n- Add a new action :doc:`launch <launch>` that unifies launching of processes\n  in new kitty windows/tabs.\n\n- Add a new style ``powerline`` for tab bar rendering, see :opt:`tab_bar_style` (:pull:`2021`)\n\n- Allow changing colors by mapping a keyboard shortcut to read a kitty config\n  file with color definitions. See the :doc:`FAQ <faq>` for details\n  (:iss:`2083`)\n\n- hints kitten: Allow completely customizing the matching and actions performed\n  by the kitten using your own script (:iss:`2124`)\n\n- Wayland: Fix key repeat not being stopped when focus leaves window. This is\n  expected behavior on Wayland, apparently (:iss:`2014`)\n\n- When drawing unicode symbols that are followed by spaces, use multiple cells\n  to avoid resized or cut-off glyphs (:iss:`1452`)\n\n- diff kitten: Allow diffing remote files easily via ssh (:iss:`727`)\n\n- unicode input kitten: Add an option :option:`kitty +kitten unicode_input\n  --emoji-variation` to control the presentation variant of selected emojis\n  (:iss:`2139`)\n\n- Add specialised rendering for a few more box powerline and unicode symbols\n  (:pull:`2074` and :pull:`2021`)\n\n- Add a new socket only mode for :opt:`allow_remote_control`. This makes\n  it possible for programs running on the local machine to control kitty\n  but not programs running over ssh.\n\n- hints kitten: Allow using named groups in the regular expression. The named\n  groups are passed to the invoked program for further processing.\n\n- Fix a regression in 0.14.5 that caused rendering of private use glyphs\n  with and without spaces to be identical (:iss:`2117`)\n\n- Wayland: Fix incorrect scale used when first creating an OS window\n  (:iss:`2133`)\n\n- macOS: Disable mouse hiding by default as getting it to work robustly\n  on Cocoa is too much effort (:iss:`2158`)\n\n\n0.14.6 [2019-09-25]\n---------------------\n\n- macOS: Fix a regression in the previous release that caused a crash when\n  pressing a unprintable key, such as the POWER key (:iss:`1997`)\n\n- Fix a regression in the previous release that caused kitty to not always\n  respond to DPI changes (:pull:`1999`)\n\n\n0.14.5 [2019-09-23]\n---------------------\n\n- Implement a hack to (mostly) preserve tabs when cat-ting a file with them and then\n  copying the text or passing screen contents to another program (:iss:`1829`)\n\n- When all visible windows have the same background color, use that as the\n  color for the global padding, instead of the configured background color\n  (:iss:`1957`)\n\n- When resetting the terminal, also reset parser state, this allows easy\n  recovery from incomplete escape codes (:iss:`1961`)\n\n- Allow mapping keys commonly found on European keyboards (:pull:`1928`)\n\n- Fix incorrect rendering of some symbols when followed by a space while using\n  the PowerLine font which does not have a space glyph (:iss:`1225`)\n\n- Linux: Allow using fonts with spacing=90 in addition to fonts with\n  spacing=100 (:iss:`1968`)\n\n- Use selection foreground color for underlines as well (:iss:`1982`)\n\n0.14.4 [2019-08-31]\n---------------------\n\n- hints kitten: Add a :option:`kitty +kitten hints --alphabet` option to\n  control what alphabets are used for hints (:iss:`1879`)\n\n- hints kitten: Allow specifying :option:`kitty +kitten hints --program`\n  multiple times to run multiple programs  (:iss:`1879`)\n\n- Add a :opt:`kitten_alias` option that can be used to alias kitten invocation\n  for brevity and to change kitten option defaults globally (:iss:`1879`)\n\n- macOS: Add an option :opt:`macos_show_window_title_in` to control\n  showing the window title in the menubar/titlebar (:pull:`1837`)\n\n- macOS: Allow drag and drop of text from other applications into kitty\n  (:pull:`1921`)\n\n- When running kittens, use the colorscheme of the current window\n  rather than the configured colorscheme (:iss:`1906`)\n\n- Don't fail to start if running the shell to read the EDITOR env var fails\n  (:iss:`1869`)\n\n- Disable the ``liga`` and ``dlig`` OpenType features for broken fonts\n  such as Nimbus Mono.\n\n- Fix a regression that broke setting background_opacity via remote control\n  (:iss:`1895`)\n\n- Fix piping PNG images into the icat kitten not working (:iss:`1920`)\n\n- When the OS returns a fallback font that does not actually contain glyphs\n  for the text, do not exhaust the list of fallback fonts (:iss:`1918`)\n\n- Fix formatting attributes not reset across line boundaries when passing\n  buffer as ANSI (:iss:`1924`)\n\n\n0.14.3 [2019-07-29]\n---------------------\n\n- Remote control: Add a command `kitty @ scroll-window` to scroll windows\n\n- Allow passing a ``!neighbor`` argument to the new_window mapping to open a\n  new window next to the active window (:iss:`1746`)\n\n- Document the kitty remote control protocol (:iss:`1646`)\n\n- Add a new option :opt:`pointer_shape_when_grabbed` that allows you to control\n  the mouse pointer shape when the terminal programs grabs the pointer\n  (:iss:`1808`)\n\n- Add an option :opt:`terminal_select_modifiers` to control which modifiers\n  are used to override mouse selection even when a terminal application has\n  grabbed the mouse (:iss:`1774`)\n\n- When piping data to a child in the pipe command do it in a thread so as not\n  to block the UI (:iss:`1708`)\n\n- unicode_input kitten: Fix a regression that broke using indices to select\n  recently used symbols.\n\n- Fix a regression that caused closing an overlay window to focus\n  the previously focused window rather than the underlying window (:iss:`1720`)\n\n- macOS: Reduce energy consumption when idle by shutting down Apple's display\n  link thread after 30 second of inactivity (:iss:`1763`)\n\n- Linux: Fix incorrect scaling for fallback fonts when the font has an\n  underscore that renders out of bounds (:iss:`1713`)\n\n- macOS: Fix finding fallback font for private use unicode symbols not working\n  reliably (:iss:`1650`)\n\n- Fix an out of bounds read causing a crash when selecting text with the mouse\n  in the alternate screen mode (:iss:`1578`)\n\n- Linux: Use the system \"bell\" sound for the terminal bell. Adds libcanberra\n  as a new dependency to play the system sound.\n\n- macOS: Fix a rare deadlock causing kitty to hang (:iss:`1779`)\n\n- Linux: Fix a regression in 0.14.0 that caused the event loop to tick\n  continuously, wasting CPU even when idle (:iss:`1782`)\n\n- ssh kitten: Make argument parsing more like ssh (:iss:`1787`)\n\n- When using :opt:`strip_trailing_spaces` do not remove empty lines\n  (:iss:`1802`)\n\n- Fix a crash when displaying very large number of images (:iss:`1825`)\n\n\n0.14.2 [2019-06-09]\n---------------------\n\n- Add an option :opt:`placement_strategy` to control how the cell area is\n  aligned inside the window when the window size is not an exact multiple\n  of the cell size (:pull:`1670`)\n\n- hints kitten: Add a :option:`kitty +kitten hints --multiple-joiner` option to\n  control how multiple selections are serialized when copying to clipboard\n  or inserting into the terminal. You can have them on separate lines,\n  separated by arbitrary characters, or even serialized as JSON (:iss:`1665`)\n\n- macOS: Fix a regression in the previous release that broke using\n  :kbd:`ctrl+shift+tab` (:iss:`1671`)\n\n- panel kitten: Fix the contents of the panel kitten not being positioned\n  correctly on the vertical axis\n\n- icat kitten: Fix a regression that broke passing directories to icat\n  (:iss:`1683`)\n\n- clipboard kitten: Add a :option:`kitty +kitten clipboard --wait-for-completion`\n  option to have the kitten wait till copying to clipboard is complete\n  (:iss:`1693`)\n\n- Allow using the :doc:`pipe <pipe>` command to send screen and scrollback\n  contents directly to the clipboard (:iss:`1693`)\n\n- Linux: Disable the Wayland backend on GNOME by default as GNOME has no\n  support for server side decorations. Can be controlled by\n  :opt:`linux_display_server`.\n\n- Add an option to control the default :opt:`update_check_interval` when\n  building kitty packages\n\n- Wayland: Fix resizing the window on a compositor that does not provide\n  server side window decorations, such a GNOME or Weston not working\n  correctly (:iss:`1659`)\n\n- Wayland: Fix crash when enabling disabling monitors on sway (:iss:`1696`)\n\n\n0.14.1 [2019-05-29]\n---------------------\n\n- Add an option :opt:`command_on_bell` to run an arbitrary command when\n  a bell occurs (:iss:`1660`)\n\n- Add a shortcut to toggle maximized window state :sc:`toggle_maximized`\n\n- Add support for the underscore key found in some keyboard layouts\n  (:iss:`1639`)\n\n- Fix a missing newline when using the pipe command between the\n  scrollback and screen contents (:iss:`1642`)\n\n- Fix colors not being preserved when using the pipe command with\n  the pager history buffer (:pull:`1657`)\n\n- macOS: Fix a regression that could cause rendering of a kitty window\n  to occasionally freeze in certain situations, such as moving it between\n  monitors or transitioning from/to fullscreen (:iss:`1641`)\n\n- macOS: Fix a regression that caused :kbd:`cmd+v` to double up in the dvorak\n  keyboard layout (:iss:`1652`)\n\n- When resizing and only a single window is present in the current layout,\n  use that window's background color to fill in the blank areas.\n\n- Linux: Automatically increase cell height if the font being used is broken\n  and draws the underscore outside the bounding box (:iss:`690`)\n\n- Wayland: Fix maximizing the window on a compositor that does not provide\n  server side window decorations, such a GNOME or Weston not working\n  (:iss:`1662`)\n\n\n0.14.0 [2019-05-24]\n---------------------\n\n- macOS: The default behavior of the Option key has changed. It now generates\n  unicode characters rather than acting as the :kbd:`Alt` modifier. See\n  :opt:`macos_option_as_alt`.\n\n- Support for an arbitrary number of internal clipboard buffers to copy/paste\n  from, see (:ref:`cpbuf`)\n\n- Allow using the new private internal clipboard buffers with the\n  :opt:`copy_on_select` option (:iss:`1390`)\n\n- macOS: Allow opening new kitty tabs/top-level windows from Finder\n  (:pull:`1350`)\n\n- Add an option :opt:`disable_ligatures` to disable\n  multi-character ligatures under the cursor to make editing easier\n  or disable them completely (:iss:`461`)\n\n- Allow creating new OS windows in session files (:iss:`1514`)\n\n- Allow setting OS window size in session files\n\n- Add an option :opt:`tab_switch_strategy` to control which\n  tab becomes active when the current tab is closed (:pull:`1524`)\n\n- Allow specifying a value of ``none`` for the :opt:`selection_foreground`\n  which will cause kitty to not change text color in selections (:iss:`1358`)\n\n- Make live resizing of OS windows smoother and add an option\n  :opt:`resize_draw_strategy` to control what is drawn while a\n  resize is in progress.\n\n- macOS: Improve handling of IME extended input. Compose characters\n  are now highlighted and the IME panel moves along with the text\n  (:pull:`1586`). Also fixes handling of delete key in Chinese IME\n  (:iss:`1461`)\n\n- When a window is closed, switch focus to the previously active window (if\n  any) instead of picking the previous window in the layout (:iss:`1450`)\n\n- icat kitten: Add support for displaying images at http(s) URLs (:iss:`1340`)\n\n- A new option :opt:`strip_trailing_spaces` to optionally remove trailing\n  spaces from lines when copying to clipboard.\n\n- A new option :opt:`tab_bar_min_tabs` to control how many tabs must be\n  present before the tab-bar is shown (:iss:`1382`)\n\n- Automatically check for new releases and notify when an update is available,\n  via the system notification facilities. Can be controlled by\n  :opt:`update_check_interval` (:iss:`1342`)\n\n- macOS: Fix :kbd:`cmd+period` key not working (:iss:`1318`)\n\n- macOS: Add an option `macos_show_window_title_in_menubar` to not\n  show the current window title in the menu-bar (:iss:`1066`)\n\n- macOS: Workaround for cocoa bug that could cause the mouse cursor to become\n  hidden in other applications in rare circumstances (:iss:`1218`)\n\n- macOS: Allow assigning only the left or right :kbd:`Option` key to work as the\n  :kbd:`Alt` key. See :opt:`macos_option_as_alt` for details (:iss:`1022`)\n\n- Fix using remote control to set cursor text color causing errors when\n  creating new windows (:iss:`1326`)\n\n- Fix window title for minimized windows not being updated (:iss:`1332`)\n\n- macOS: Fix using multi-key sequences to input text ignoring the\n  first few key presses if the sequence is aborted (:iss:`1311`)\n\n- macOS: Add a number of common macOS keyboard shortcuts\n\n- macOS: Reduce energy consumption by not rendering occluded windows\n\n- Fix scrollback pager history not being cleared when clearing the\n  main scrollback buffer (:iss:`1387`)\n\n- macOS: When closing a top-level window only switch focus to the previous kitty\n  window if it is on the same workspace (:iss:`1379`)\n\n- macOS: Fix :opt:`sync_to_monitor` not working on Mojave.\n\n- macOS: Use the system cursor blink interval by default\n  :opt:`cursor_blink_interval`.\n\n- Wayland: Use the kitty Wayland backend by default. Can be switched back\n  to using XWayland by setting the environment variable:\n  ``KITTY_DISABLE_WAYLAND=1``\n\n- Add a ``no-append`` setting to :opt:`clipboard_control` to disable\n  the kitty copy concatenation protocol extension for OSC 52.\n\n- Update to using the Unicode 12 standard\n\n- Unicode input kitten: Allow using the arrow keys in code mode to go to next\n  and previous unicode symbol.\n\n- macOS: Fix specifying initial window size in cells not working correctly on\n  Retina screens (:iss:`1444`)\n\n- Fix a regression in version 0.13.0 that caused background colors of space\n  characters after private use unicode characters to not be respected\n  (:iss:`1455`)\n\n- Only update the selected text to clipboard when the selection is finished,\n  not continuously as it is updated. (:iss:`1460`)\n\n- Allow setting :opt:`active_border_color` to ``none`` to not draw a border\n  around the active window (:iss:`805`)\n\n- Use negative values for :opt:`mouse_hide_wait` to hide the mouse cursor\n  immediately when pressing a key (:iss:`1534`)\n\n- When encountering errors in :file:`kitty.conf` report them to the user\n  instead of failing to start.\n\n- Allow the user to control the resize debounce time via\n  :opt:`resize_debounce_time`.\n\n- Remote control: Make the :ref:`at_set-font-size` command more capable.\n  It can now increment font size and reset it. It also only acts on the\n  active top-level window, by default (:iss:`1581`)\n\n- When launching child processes set the :code:`PWD` environment variable\n  (:iss:`1595`)\n\n- X11: use the window manager's native full-screen implementation when\n  making windows full-screen (:iss:`1605`)\n\n- Mouse selection: When extending by word, fix extending selection to non-word\n  characters not working well (:iss:`1616`)\n\n0.13.3 [2019-01-19]\n------------------------------\n\n- icat kitten: Add a ``--stdin`` option to control if image data is read from\n  STDIN (:iss:`1308`)\n\n- hints kitten: Start hints numbering at one instead of zero by default. Added\n  an option ``--hints-offset`` to control it. (:iss:`1289`)\n\n- Fix a regression in the previous release that broke using ``background`` for\n  :opt:`cursor_text_color` (:iss:`1288`)\n\n- macOS: Fix dragging kitty window tabs in traditional full screen mode causing\n  crashes (:iss:`1296`)\n\n- macOS: Ensure that when running from a bundle, the bundle kitty exe is\n  preferred over any kitty in PATH (:iss:`1280`)\n\n- macOS: Fix a regression that broke mapping of :kbd:`ctrl+tab` (:iss:`1304`)\n\n- Add a list of user-created kittens to the docs\n\n- Fix a regression that broke changing mouse wheel scroll direction with\n  negative :opt:`wheel_scroll_multiplier` values in full-screen applications\n  like vim (:iss:`1299`)\n\n- Fix :opt:`background_opacity` not working with pure white backgrounds\n  (:iss:`1285`)\n\n- macOS: Fix \"New OS Window\" dock action not working when kitty is not focused\n  (:iss:`1312`)\n\n- macOS: Add aliases for close window and new tab actions that conform to common\n  Apple shortcuts for these actions (:iss:`1313`)\n\n- macOS: Fix some kittens causing 100% CPU usage\n\n\n0.13.2 [2019-01-04]\n------------------------------\n\n- Add a new option :opt:`tab_title_template` to control how tab titles\n  are formatted. In particular the template can be used to display\n  the tab number next to the title (:iss:`1223`)\n\n- Report the current foreground processes as well as the original child process,\n  when using `kitty @ ls`\n\n- Use the current working directory of the foreground process for the\n  `*_with_cwd` actions that open a new window with the current working\n  directory.\n\n- Add a new ``copy_or_interrupt`` action that can be mapped to kbd:`ctrl+c`. It\n  will copy if there is a selection and interrupt otherwise (:iss:`1286`)\n\n- Fix setting :opt:`background_opacity` causing window margins/padding to be slightly\n  different shade from background (:iss:`1221`)\n\n- Handle keyboards with a \"+\" key (:iss:`1224`)\n\n- Fix Private use Unicode area characters followed by spaces at the end of text\n  not being rendered correctly (:iss:`1210`)\n\n- macOS: Add an entry to the dock menu to open a new OS window (:iss:`1242`)\n\n- macOS: Fix scrolling very slowly with wheel mice not working (:iss:`1238`)\n\n- Fix changing :opt:`cursor_text_color` via remote control not working\n  (:iss:`1229`)\n\n- Add an action to resize windows that can be mapped to shortcuts in :file:`kitty.conf`\n  (:pull:`1245`)\n\n- Fix using the ``new_tab !neighbor`` action changing the order of the\n  non-neighboring tabs (:iss:`1256`)\n\n- macOS: Fix momentum scrolling continuing when changing the active window/tab\n  (:iss:`1267`)\n\n\n0.13.1 [2018-12-06]\n------------------------------\n\n- Fix passing input via the pipe action to a program without a window not\n  working.\n\n- Linux: Fix a regression in the previous release that caused automatic\n  selection of bold/italic fonts when using aliases such as \"monospace\" to not\n  work (:iss:`1209`)\n\n- Fix resizing window smaller and then restoring causing some wrapped lines to not\n  be properly unwrapped (:iss:`1206`)\n\n0.13.0 [2018-12-05]\n------------------------------\n\n- Add an option :opt:`scrollback_pager_history_size` to tell kitty to store\n  extended scrollback to use when viewing the scrollback buffer in a pager\n  (:iss:`970`)\n\n- Modify the kittens sub-system to allow creating custom kittens without any\n  user interface. This is useful for creating more complex actions that can\n  be bound to key presses in :file:`kitty.conf`. See\n  doc:`kittens/custom`. (:iss:`870`)\n\n- Add a new ``nth_window`` action that can be used to go to the nth window and\n  also previously active windows, using negative numbers. Similarly,\n  ``goto_tab`` now accepts negative numbers to go to previously active tabs\n  (:iss:`1040`)\n\n- Allow hiding the tab bar completely, by setting :opt:`tab_bar_style` to\n  ``hidden``. (:iss:`1014`)\n\n- Allow private use unicode characters to stretch over more than a single\n  neighboring space (:pull:`1036`)\n\n- Add a new :opt:`touch_scroll_multiplier` option to modify the amount\n  scrolled by high precision scrolling devices such as touchpads (:pull:`1129`)\n\n- icat kitten: Implement reading image data from STDIN, if STDIN is not\n  connected to a terminal (:iss:`1130`)\n\n- hints kitten: Insert trailing spaces after matches when using the\n  ``--multiple`` option. Also add a separate ``--add-trailing-space``\n  option to control this behavior (:pull:`1132`)\n\n- Fix the ``*_with_cwd`` actions using the cwd of the overlay window rather\n  than the underlying window's cwd (:iss:`1045`)\n\n- Fix incorrect key repeat rate on wayland (:pull:`1055`)\n\n- macOS: Fix drag and drop of files not working on Mojave (:iss:`1058`)\n\n- macOS: Fix IME input for East Asian languages (:iss:`910`)\n\n- macOS: Fix rendering frames-per-second very low when processing\n  large amounts of input in small chunks (:pull:`1082`)\n\n- macOS: Fix incorrect text sizes calculated when using an external display\n  that is set to mirror the main display (:iss:`1056`)\n\n- macOS: Use the system default double click interval (:pull:`1090`)\n\n- macOS: Fix touch scrolling sensitivity low on retina screens (:iss:`1112`)\n\n- Linux: Fix incorrect rendering of some fonts when hinting is disabled at\n  small sizes (:iss:`1173`)\n\n- Linux: Fix match rules used as aliases in Fontconfig configuration not being\n  respected (:iss:`1085`)\n\n- Linux: Fix a crash when using the GNU Unifont as a fallback font\n  (:iss:`1087`)\n\n- Wayland: Fix copying from hidden kitty windows hanging (:iss:`1051`)\n\n- Wayland: Add support for the primary selection protocol\n  implemented by some compositors (:pull:`1095`)\n\n- Fix expansion of env vars not working in the :opt:`env` directive\n  (:iss:`1075`)\n\n- Fix :opt:`mouse_hide_wait` only taking effect after an event such as cursor\n  blink or key press (:iss:`1073`)\n\n- Fix the ``set_background_opacity`` action not working correctly\n  (:pull:`1147`)\n\n- Fix second cell of emoji created using variation selectors not having\n  the same attributes as the first cell (:iss:`1109`)\n\n- Fix focusing neighboring windows in the grid layout with less than 4 windows\n  not working (:iss:`1115`)\n\n- Fix :kbd:`ctrl+shift+special` key not working in normal and application keyboard\n  modes (:iss:`1114`)\n\n- Add a terminfo entry for full keyboard mode.\n\n- Fix incorrect text-antialiasing when using very low background opacity\n  (:iss:`1005`)\n\n- When double or triple clicking ignore clicks if they are \"far\" from each\n  other (:iss:`1093`)\n\n- Follow xterm's behavior for the menu key (:iss:`597`)\n\n- Fix hover detection of URLs not working when hovering over the first colon\n  and slash characters in short URLs (:iss:`1201`)\n\n0.12.3 [2018-09-29]\n------------------------------\n\n- macOS: Fix kitty window not being rendered on macOS Mojave until the window is\n  moved or resized at least once (:iss:`887`)\n\n- Unicode input: Fix an error when searching for the string 'fir' (:iss:`1035`)\n\n\n0.12.2 [2018-09-24]\n------------------------------\n\n- A new ``last_used_layout`` function that can be mapped to a shortcut to\n  switch to the previously used window layout (:iss:`870`)\n\n- New ``neighboring_window`` and ``move_window`` functions to switch to\n  neighboring windows in the current layout, and move them around, similar to\n  window movement in vim (:iss:`916`)\n\n- A new ``pipe`` function that can be used to pipe the contents of the screen\n  and scrollback buffer to any desired program running in a new window, tab or\n  overlay window. (:iss:`933`)\n\n- Add a new :option:`kitty --start-as` command line flag to start kitty\n  full-screen/maximized/minimized. This replaces the ``--start-in-fullscreen``\n  flag introduced in the previous release (:iss:`935`)\n\n- When mapping the ``new_tab`` action allow specifying that the tab should open\n  next to the current tab instead of at the end of the tabs list (:iss:`979`)\n\n- macOS: Add a new :opt:`macos_thicken_font` to make text rendering\n  on macs thicker, which makes it similar to the result of\n  sub-pixel antialiasing (:pull:`950`)\n\n- macOS: Add an option :opt:`macos_traditional_fullscreen` to make\n  full-screening of kitty windows much faster, but less pretty. (:iss:`911`)\n\n- Fix a bug causing incorrect line ordering when viewing the scrollback buffer\n  if the scrollback buffer is full (:iss:`960`)\n\n- Fix drag-scrolling not working when the mouse leaves the window confines\n  (:iss:`917`)\n\n- Workaround for broken editors like nano that cannot handle newlines in pasted text\n  (:iss:`994`)\n\n- Linux: Ensure that the python embedded in the kitty binary build uses\n  UTF-8 mode to process command-line arguments (:iss:`924`)\n\n- Linux: Handle fonts that contain monochrome bitmaps (such as the Terminus TTF\n  font) (:pull:`934`)\n\n- Have the :option:`kitty --title` flag apply to all windows created\n  using :option:`kitty --session` (:iss:`921`)\n\n- Revert change for backspacing of wide characters in the previous release,\n  as it breaks backspacing in some wide character aware programs (:iss:`875`)\n\n- Fix kitty @set-colors not working for tab backgrounds when using the `fade` tabbar style\n  (:iss:`937`)\n\n- macOS: Fix resizing semi-transparent windows causing the windows to be\n  invisible during the resize (:iss:`941`)\n\n- Linux: Fix window icon not set on X11 for the first OS window (:iss:`961`)\n\n- macOS: Add an :opt:`macos_custom_beam_cursor` option to use a special\n  mouse cursor image that can be seen on both light and dark backgrounds\n  (:iss:`359`)\n\n- Remote control: Fix the ``focus_window`` command not focusing the\n  top-level OS window of the specified kitty window (:iss:`1003`)\n\n- Fix using :opt:`focus_follows_mouse` causing text selection with the\n  mouse to malfunction when using multiple kitty windows (:iss:`1002`)\n\n0.12.1 [2018-09-08]\n------------------------------\n\n- Add a new ``--start-in-fullscreen`` command line flag to start\n  kitty in full screen mode (:iss:`856`)\n\n- macOS: Fix a character that cannot be rendered in any font causing\n  font fallback for all subsequent characters that cannot be rendered in the\n  main font to fail (:iss:`799`)\n\n- Linux: Do not enable IME input via ibus unless the ``GLFW_IM_MODULE=ibus``\n  environment variable is set. IME causes key processing latency and even\n  missed keystrokes for many people, so it is now off by default.\n\n- Fix backspacing of wide characters in wide-character unaware programs not working (:iss:`875`)\n\n- Linux: Fix number pad arrow keys not working when Numlock is off (:iss:`857`)\n\n- Wayland: Implement support for clipboard copy/paste (:iss:`855`)\n\n- Allow mapping shortcuts using the raw key code from the OS (:iss:`848`)\n\n- Allow mapping of individual key-presses without modifiers as shortcuts\n\n- Fix legacy invocation of icat as `kitty icat` not working (:iss:`850`)\n\n- Improve rendering of wavy underline at small font sizes (:iss:`853`)\n\n- Fix a regression in 0.12.0 that broke dynamic resizing of layouts (:iss:`860`)\n\n- Wayland: Allow using the :option:`kitty --class` command line flag\n  to set the app id (:iss:`862`)\n\n- Add completion of the kitty command for the fish shell (:pull:`829`)\n\n- Linux: Fix XCompose rules with no defined symbol not working (:iss:`880`)\n\n- Linux: Fix crash with some Nvidia drivers when creating tabs in the first\n  top level-window after creating a second top-level window. (:iss:`873`)\n\n- macOS: Diff kitten: Fix syntax highlighting not working because of\n  a bug in the 0.12.0 macOS package\n\n0.12.0 [2018-09-01]\n------------------------------\n\n- Preserve the mouse selection even when the contents of the screen are\n  scrolled or overwritten provided the new text does not intersect the\n  selected lines.\n\n- Linux: Implement support for Input Method Extensions (multilingual input\n  using standard keyboards) via `IBus\n  <https://github.com/ibus/ibus/wiki/ReadMe>`_ (:iss:`469`)\n\n- Implement completion for the kitty command in bash and zsh. See\n  :ref:`completion`.\n\n- Render the text under the cursor in a fixed color, configurable via\n  the option :opt:`cursor_text_color` (:iss:`126`)\n\n- Add an option :opt:`env` to set environment variables in child processes\n  from kitty.conf\n\n- Add an action to the ``clear_terminal`` function to scroll the screen\n  contents into the scrollback buffer (:iss:`1113`)\n\n- Implement high precision scrolling with the trackpad on platforms such as\n  macOS and Wayland that implement it. (:pull:`819`)\n\n- macOS: Allow scrolling window contents using mouse wheel/trackpad even when the\n  window is not the active window (:iss:`729`)\n\n- Remote control: Allow changing the current window layout with a new\n  :ref:`at_goto-layout` command (:iss:`845`)\n\n- Remote control: Allow matching windows by the environment variables of their\n  child process as well\n\n- Allow running kittens via the remote control system (:iss:`738`)\n\n- Allow enabling remote control in only some kitty windows\n\n- Add a keyboard shortcut to reset the terminal (:sc:`reset_terminal`). It\n  takes parameters so you can define your own shortcuts to clear the\n  screen/scrollback also (:iss:`747`)\n\n- Fix one-pixel line appearing at window edges at some window sizes when\n  displaying images with background opacity enabled (:iss:`741`)\n\n- diff kitten: Fix error when right hand side file is binary and left hand side\n  file is text (:pull:`752`)\n\n- kitty @ new-window: Add a new option :option:`kitty @ new-window --window-type`\n  to create top-level OS windows (:iss:`770`)\n\n- macOS: The :opt:`focus_follows_mouse` option now also works across top-level kitty OS windows\n  (:iss:`754`)\n\n- Fix detection of URLs in HTML source code (URLs inside quotes) (:iss:`785`)\n\n- Implement support for emoji skin tone modifiers (:iss:`787`)\n\n- Round-trip the zwj unicode character. Rendering of sequences containing zwj\n  is still not implemented, since it can cause the collapse of an unbounded\n  number of characters into a single cell. However, kitty at least preserves\n  the zwj by storing it as a combining character.\n\n- macOS: Disable the custom mouse cursor. Using a custom cursor fails on dual\n  GPU machines. I give up, Apple users will just have to live with the\n  limitations of their choice of OS. (:iss:`794`)\n\n- macOS: Fix control+tab key combination not working (:iss:`801`)\n\n- Linux: Fix slow startup on some systems caused by GLFW searching for\n  joysticks. Since kitty does not use joysticks, disable joystick support.\n  (:iss:`830`)\n\n\n0.11.3 [2018-07-10]\n------------------------------\n\n- Draw only the minimum borders needed for inactive windows. That is only the borders\n  that separate the inactive window from a neighbor. Note that setting\n  a non-zero window margin overrides this and causes all borders to be drawn.\n  The old behavior of drawing all borders can be restored via the\n  :opt:`draw_minimal_borders` setting in kitty.conf. (:iss:`699`)\n\n- macOS: Add an option :opt:`macos_window_resizable` to control if kitty\n  top-level windows are resizable using the mouse or not (:iss:`698`)\n\n- macOS: Use a custom mouse cursor that shows up well on both light and dark backgrounds\n  (:iss:`359`)\n\n- macOS: Workaround for switching from fullscreen to windowed mode with the\n  titlebar hidden causing window resizing to not work. (:iss:`711`)\n\n- Fix triple-click to select line not working when the entire line is filled\n  (:iss:`703`)\n\n- When dragging to select with the mouse \"grab\" the mouse so that if it strays\n  into neighboring windows, the selection is still updated (:pull:`624`)\n\n- When clicking in the margin/border area of a window, map the click to the\n  nearest cell in the window. Avoids selection with the mouse failing when\n  starting the selection just outside the window.\n\n- When drag-scrolling stop the scroll when the mouse button is released.\n\n- Fix a regression in the previous release that caused pasting large amounts\n  of text to be duplicated (:iss:`709`)\n\n\n0.11.2 [2018-07-01]\n------------------------------\n\n- Linux: Allow using XKB key names to bind shortcuts to keys not supported by GLFW (:pull:`665`)\n\n- kitty shell: Ignore failure to read readline history file. Happens if the\n  user migrates their kitty cache directory between systems with incompatible\n  readline implementations.\n\n- macOS: Fix an error in remote control when using --listen-on (:iss:`679`)\n\n- hints kitten: Add a :option:`kitty +kitten hints --multiple` option to select\n  multiple items (:iss:`687`)\n\n- Fix pasting large amounts of text very slow (:iss:`682`)\n\n- Add an option :opt:`single_window_margin_width` to allow different margins\n  when only a single window is visible in the layout (:iss:`688`)\n\n- Add a :option:`kitty --hold` command line option to stay open after the child process exits (:iss:`667`)\n\n- diff kitten: When triggering a search scroll to the first match automatically\n\n- :option:`kitty --debug-font-fallback` also prints out what basic fonts were matched\n\n- When closing a kitty window reset the mouse cursor to its default shape and ensure it is visible (:iss:`655`).\n\n- Remote control: Speed-up reading of command responses\n\n- Linux installer: Fix installer failing on systems with python < 3.5\n\n- Support \"-T\" as an alias for \"--title\" (:pull:`659`)\n\n- Fix a regression in the previous release that broke using :option:`kitty\n  --debug-config` with custom key mappings (:iss:`695`)\n\n\n0.11.1 [2018-06-17]\n------------------------------\n\n- diff kitten: Implement searching for text in the diff (:iss:`574`)\n\n- Add an option :opt:`startup_session` to :file:`kitty.conf` to specify a\n  default startup session (:iss:`641`)\n\n- Add a command line option :option:`kitty --wait-for-single-instance-window-close`\n  to make :option:`kitty --single-instance` wait for the closing of the newly opened\n  window before quitting (:iss:`630`)\n\n- diff kitten: Allow theming the selection background/foreground as well\n\n- diff kitten: Display CRLF line endings using the unicode return symbol\n  instead of <d> as it is less intrusive (:iss:`638`)\n\n- diff kitten: Fix default foreground/background colors not being restored when\n  kitten quits (:iss:`637`)\n\n- Fix :option:`kitty @ set-colors --all` not working when more than one window\n  present (:iss:`632`)\n\n- Fix a regression that broke the legacy increase/decrease_font_size actions\n\n- Clear scrollback on reset (:iss:`631`)\n\n\n0.11.0 [2018-06-12]\n------------------------------\n\n- A new tab bar style \"fade\" in which each tab's edges fade into the background.\n  See :opt:`tab_bar_style` and :opt:`tab_fade` for details. The old look can be\n  restored by setting :opt:`tab_bar_style` to :code:`separator`.\n\n- :doc:`Pre-compiled binaries <binary>` with all bundled dependencies for Linux\n  (:iss:`595`)\n\n- A :doc:`new kitten <kittens/panel>` to create dock panels on X11 desktops\n  showing the output from arbitrary terminal programs.\n\n- Reduce data sent to the GPU per render by 30% (:commit:`8dea5b3`)\n\n- Implement changing the font size for individual top level (OS) windows\n  (:iss:`408`)\n\n- When viewing the scrollback in less using :sc:`show_scrollback` and kitty\n  is currently scrolled, position the scrollback in less to match kitty's\n  scroll position. (:iss:`148`)\n\n- ssh kitten: Support all SSH options. It can now be aliased directly to ssh\n  for convenience. (:pull:`591`)\n\n- icat kitten: Add :option:`kitty +kitten icat --print-window-size` to easily\n  detect the window size in pixels from scripting languages (:iss:`581`)\n\n- hints kitten: Allow selecting hashes from the terminal with\n  :sc:`insert_selected_hash` useful for git commits. (:pull:`604`)\n\n- Allow specifying initial window size in number of cells in addition to pixels\n  (:iss:`436`)\n\n- Add a setting to control the margins to the left and right of the tab-bar\n  (:iss:`584`)\n\n- When closing a tab switch to the last active tab instead of the right-most\n  tab (:iss:`585`)\n\n- Wayland: Fix kitty not starting when using wl_roots based compositors\n  (:iss:`157`)\n\n- Wayland: Fix mouse wheel/touchpad scrolling in opposite direction to other apps (:iss:`594`)\n\n- macOS: Fix the new OS window keyboard shortcut (:sc:`new_os_window`) not\n  working if no kitty window currently has focus. (:iss:`524`)\n\n- macOS: Keep kitty running even when the last window is closed. This is in\n  line with how applications are supposed to behave on macOS (:iss:`543`).\n  There is a new option (:opt:`macos_quit_when_last_window_closed`) to control\n  this.\n\n- macOS: Add macOS standard shortcuts for copy, paste and new OS window\n  (\u2318+C, \u2318+V, \u2318+N)\n\n- Add a config option (:opt:`editor`) to set the EDITOR kitty uses (:iss:`580`)\n\n- Add a config option (``x11_hide_window_decorations``) to hide window\n  decorations under X11/Wayland (:iss:`607`)\n\n- Add an option to @set-window-title to make the title change non-permanent\n  (:iss:`592`)\n\n- Add support for the CSI t escape code to query window and cell sizes\n  (:iss:`581`)\n\n- Linux: When using layouts that map the keys to non-ascii characters,\n  map shortcuts using the ascii equivalents, from the default layout.\n  (:iss:`606`)\n\n- Linux: Fix fonts not being correctly read from TrueType Collection\n  (.ttc) files (:iss:`577`)\n\n- Fix :opt:`inactive_text_alpha` also applying to the tab bar (:iss:`612`)\n\n- :doc:`hints kitten <kittens/hints>`: Fix a regression that caused some blank lines to be not\n  be displayed.\n\n- Linux: Include a man page and the HTML docs when building the linux-package\n\n- Remote control: Fix kitty @ sometimes failing to read the response from\n  kitty. (:iss:`614`)\n\n- Fix `kitty @ set-colors` not working with the window border colors.\n  (:iss:`623`)\n\n- Fix a regression in 0.10 that caused incorrect rendering of the status bar in\n  irssi when used inside screen. (:iss:`621`)\n\n\n0.10.1 [2018-05-24]\n------------------------------\n\n- Add a kitten to easily ssh into servers that automatically copies the\n  terminfo files over. ``kitty +kitten ssh myserver``.\n\n- diff kitten: Make the keyboard shortcuts configurable (:iss:`563`)\n\n- Allow controlling *background_opacity* via either keyboard shortcuts or\n  remote control. Note that you must set *dynamic_background_opacity yes* in\n  kitty.conf first. (:iss:`569`)\n\n- diff kitten: Add keybindings to scroll by page\n\n- diff kitten: Fix incorrect syntax highlighting for a few file formats such as\n  yaml\n\n- macOS: Fix regression that caused the *macos_option_as_alt* setting to always\n  be disabled for all OS windows in a kitty instance after the first window\n  (:iss:`571`)\n\n- Fix Ctrl+Alt+Space not working in normal and application keyboard modes\n  (:iss:`562`)\n\n\n0.10.0 [2018-05-21]\n------------------------------\n\n- A diff kitten to show side-by-side diffs with syntax highlighting and support\n  for images. See :doc:`diff kitten <kittens/diff>`.\n\n- Make windows in the various kitty layouts manually resizable. See\n  :ref:`layouts` for details.\n\n- Implement support for the SGR *faint* escape code to make text blend\n  into the background (:iss:`446`).\n\n- Make the hints kitten a little smarter (:commit:`ad1109b`)\n  so that URLs that stretch over multiple lines are detected. Also improve\n  detection of surrounding brackets/quotes.\n\n- Make the kitty window id available as the environment variable\n  ``KITTY_WINDOW_ID`` (:iss:`532`).\n\n- Add a \"fat\" layout that is similar to the \"tall\" layout but vertically\n  oriented.\n\n- Expand environment variables in config file include directives\n\n- Allow programs running in kitty to read/write from the clipboard (:commit:`889ca77`).\n  By default only writing is allowed. This feature is supported in many\n  terminals, search for `OSC 52 clipboard` to find out more about using it.\n\n- Fix moving cursor outside a defined page area incorrectly causing the cursor\n  to be placed inside the page area. Caused incorrect rendering in neovim, in\n  some situations (:iss:`542`).\n\n- Render a couple more powerline symbols directly, bypassing the font\n  (:iss:`550`).\n\n- Fix ctrl+alt+<special> not working in normal and application keyboard (:iss:`548`).\n\n- Partial fix for rendering Right-to-left languages like Arabic. Rendering of\n  Arabic is never going to be perfect, but now it is at least readable.\n\n- Fix Ctrl+backspace acting as plain backspace in normal and application\n  keyboard modes (:iss:`538`).\n\n- Have the paste_from_selection action paste from the clipboard on platforms\n  that do not have a primary selection such as Wayland and macOS\n  (:iss:`529`)\n\n- Fix cursor_stop_blinking_after=0 not working (:iss:`530`)\n\n\n0.9.1 [2018-05-05]\n------------------------------\n\n- Show a bell symbol on the tab if a bell occurs in one of the windows in the tab and\n  the window is not the currently focused window\n\n- Change the window border color if a bell occurs in an unfocused window. Can\n  be disabled by setting the bell_border_color to be the same as the\n  inactive_border_color.\n\n- macOS: Add support for dead keys\n\n- Unicode input: When searching by name search for prefix matches as well as\n  whole word matches\n\n- Dynamically allocate the memory used for the scrollback history buffer.\n  Reduces startup memory consumption when using very large scrollback\n  buffer sizes.\n\n- Add an option to not request window attention on bell.\n\n- Remote control: Allow matching windows by number (visible position).\n\n- macOS: Fix changing tab title and kitty shell not working\n\n- When triple-clicking select all wrapped lines belonging to a single logical line.\n\n- hints kitten: Detect bracketed URLs and don't include the closing bracket in the URL.\n\n- When calling pass_selection_to_program use the current directory of the child\n  process as the cwd of the program.\n\n- Add macos_hide_from_tasks option to hide kitty from the macOS task switcher\n\n- macOS: When the macos_titlebar_color is set to background change the titlebar\n  colors to match the current background color of the active kitty window\n\n- Add a setting to clear all shortcuts defined up to that point in the config\n  file(s)\n\n- Add a setting (kitty_mod) to change the modifier used by all the default\n  kitty shortcuts, globally\n\n- Fix Shift+function key not working\n\n- Support the F13 to F25 function keys\n\n- Don't fail to start if the user deletes the hintstyle key from their\n  fontconfig configuration.\n\n- When rendering a private use unicode codepoint and a space as a two cell\n  ligature, set the foreground colors of the space cell to match the colors of\n  the first cell. Works around applications like powerline that use different\n  colors for the two cells.\n\n- Fix passing @text to other programs such as when viewing the scrollback\n  buffer not working correctly if kitty is itself scrolled up.\n\n- Fix window focus gained/lost events not being reported to child programs when\n  switching windows/tabs using the various keyboard shortcuts.\n\n- Fix tab title not changing to reflect the window title when switching between different windows in a tab\n\n- Ignore -e if it is specified on the command line. This is for compatibility\n  with broken software that assumes terminals should run with an -e option to\n  execute commands instead of just passing the commands as arguments.\n\n\n0.9.0 [2018-04-15]\n------------------------------\n\n- A new kitty command shell to allow controlling kitty via commands. Press\n  `ctrl+shift+escape` to run the shell.\n\n- The hints kitten has become much more powerful. Now in addition to URLs you\n  can use it to select word, paths, filenames, lines, etc. from the screen.\n  These can be inserted into the terminal, copied to clipboard or sent to\n  external programs.\n\n- Linux: Switch to libxkbcommon for keyboard handling. It allows kitty to\n  support XCompose and dead keys and also react to keyboard remapping/layout\n  change without needing a restart.\n\n- Add support for multiple-key-sequence shortcuts\n\n- A new remote control command `set-colors` to change the current and/or\n  configured colors.\n\n- When double-clicking to select a word, select words that continue onto the\n  next/prev line as well.\n\n- Add an `include` directive for the config files to read multiple config files\n\n- Improve mouse selection for windows with padding. Moving the mouse into the\n  padding area now acts as if the mouse is over the nearest cell.\n\n- Allow setting all 256 terminal colors in the config file\n\n- Fix using `kitty --single-instance` to open a new window in a running kitty\n  instance, not respecting the `--directory` flag\n\n- URL hints: Exclude trailing punctuation from URLs\n\n- URL hints: Launch the browser from the kitty parent process rather than the\n  hints kitten. Fixes launching on some systems where xdg-open doesn't like\n  being run from a kitten.\n\n- Allow using rectangle select mode by pressing shift in addition to the\n  rectangle select modifiers even when the terminal program has grabbed the\n  mouse.\n\n\n0.8.4 [2018-03-31]\n-----------------------------\n\n- Fix presence of XDG_CONFIG_DIRS and absence of XDG_CONFIG_HOME preventing\n  kitty from starting\n\n- Revert change in last release to cell width calculation. Instead just clip\n  the right edges of characters that overflow the cell by at most two pixels\n\n\n0.8.3 [2018-03-29]\n-----------------------------\n\n- Fix a regression that broke the visual bell and invert screen colors escape\n  code\n\n- Allow double-click and triple-click + drag to extend selections word at a\n  time or line at a time\n\n- Add a keyboard shortcut to set the tab title\n\n- Fix setting window title to empty via OSC escape code not working correctly\n\n- Linux: Fix cell width calculation incorrect for some fonts (cell widths are\n  now calculated by actually rendering bitmaps, which is slower but more\n  accurate)\n\n- Allow specifying a system wide kitty config file, for all users\n\n- Add a --debug-config command line flag to output data about the system and\n  kitty configuration.\n\n- Wayland: Fix auto-repeat of keys not working\n\n\n0.8.2 [2018-03-17]\n-----------------------------\n\n- Allow extending existing selections by right clicking\n\n- Add a configurable keyboard shortcut and remote command to set the font size to a specific value\n\n- Add an option to have kitty close the window when the main processes running in it exits, even if there are still background processes writing to that terminal\n\n- Add configurable keyboard shortcuts to switch to a specific layout\n\n- Add a keyboard shortcut to edit the kitty config file easily\n\n- macOS: Fix restoring of window size not correct on Retina screens\n\n- macOS: Add a facility to specify command line arguments when running kitty from the GUI\n\n- Add a focus-tab remote command\n\n- Fix screen not being refreshed immediately after moving a window.\n\n- Fix a crash when getting the contents of the scrollback buffer as text\n\n0.8.1 [2018-03-09]\n-----------------------------\n\n- Extend kitty's remote control feature to work over both UNIX and TCP sockets,\n  so now you can control kitty from across the internet, if you want to.\n\n- Render private use unicode characters that are followed by a space as a two\n  character ligature. This fixes rendering for applications that misuse\n  private-use characters to display square symbols.\n\n- Fix Unicode emoji presentation variant selector causing new a fallback font\n  instance to be created\n\n- Fix a rare error that prevented the Unicode input kitten from working\n  sometimes\n\n- Allow using Ctrl+Alt+letter in legacy keyboard modes by outputting them as Ctrl+letter and Alt+letter.\n  This matches other terminals' behavior.\n\n- Fix cursor position off-by-one on horizontal axis when resizing the terminal\n\n- Wayland: Fix auto-repeat of keys not working\n\n- Wayland: Add support for window decorations provided by the Wayland shell\n\n- macOS: Fix URL hints not working\n\n- macOS: Fix shell not starting in login mode on some computers\n\n- macOS: Output errors into console.app when running as a bundle\n\n\n0.8.0 [2018-02-24]\n-----------------------------\n\n- A framework for kittens, that is, small terminal programs designed to run\n  inside kitty and extend its capabilities. Examples include unicode input and\n  selecting URLs with the keyboard.\n\n- Input arbitrary unicode characters by pressing Ctrl+Shift+u. You can choose\n  characters by name, by hex code, by recently used, etc. There is even and\n  editable Favorites list.\n\n- Open URLs using only the keyboard. kitty has a new \"hints mode\". Press\n  Ctrl+Shift+e and all detected URLs on the screen are highlighted with a key\n  to press to open them. The facility is customizable so you can change\n  what is detected as a URL and which program is used to open it.\n\n- Add an option to change the titlebar color of kitty windows on macOS\n\n- Only consider Emoji characters with default Emoji presentation to be two\n  cells wide. This matches the standard. Also add support for the Unicode Emoji\n  variation presentation selector.\n\n- Prevent video tearing during high speed scrolling by syncing draws\n  to the monitor's refresh rate. There is a new configuration option to\n  control this ``sync_to_monitor``.\n\n- When displaying only a single window, use the default background color of the\n  window (which can be changed via escape codes) as the color for the margin\n  and padding of the window.\n\n- Add some non standard terminfo capabilities used by neovim and tmux.\n\n- Fix large drop in performance when using multiple top-level windows on macOS\n\n- Fix save/restore of window sizes not working correctly.\n\n- Remove option to use system wcwidth(). Now always use a wcwidth() based on\n  the Unicode standard. Only sane way.\n\n- Fix a regression that caused a few ligature glyphs to not render correctly in\n  rare circumstances.\n\n- Browsing the scrollback buffer now happens in an overlay window instead of a\n  new window/tab.\n\n0.7.1 [2018-01-31]\n---------------------------\n\n- Add an option to adjust the width of character cells\n\n- Fix selecting text with the mouse in the scrollback buffer selecting text\n  from the line above the actually selected line\n\n- Fix some italic fonts having the right edge of characters cut-off,\n  unnecessarily\n\n\n0.7.0 [2018-01-24]\n---------------------------\n\n- Allow controlling kitty from the shell prompt/scripts. You can\n  open/close/rename windows and tabs and even send input to specific windows.\n  See the README for details.\n\n- Add option to put tab bar at the top instead of the bottom\n\n- Add option to override the default shell\n\n- Add \"Horizontal\" and \"Vertical\" window layouts\n\n- Sessions: Allow setting titles and working directories for individual windows\n\n- Option to copy to clipboard on mouse select\n\n- Fix incorrect reporting of mouse move events when using the SGR protocol\n\n- Make alt+backspace delete the previous word\n\n- Take the mouse wheel multiplier option in to account when generating fake key\n  scroll events\n\n- macOS: Fix closing top-level window does not transfer focus to other\n  top-level windows.\n\n- macOS: Fix alt+arrow keys not working when disabling the macos_option_as_alt\n  config option.\n\n- kitty icat: Workaround for bug in ImageMagick that would cause some images\n  to fail to display at certain sizes.\n\n- Fix rendering of text with ligature fonts that do not use dummy glyphs\n\n- Fix a regression that caused copying of the selection to clipboard to only\n  copy the visible part of the selection\n\n- Fix incorrect handling of some unicode combining marks that are not re-ordered\n\n- Fix handling on non-BMP combining characters\n\n- Drop the dependency on libunistring\n\n\n0.6.1 [2017-12-28]\n---------------------------\n\n- Add an option to fade the text in inactive windows\n\n- Add new actions to open windows/tabs/etc. with the working directory set to\n  the working directory of the current window.\n\n- Automatically adjust cell size when DPI changes, for example when kitty is\n  moved from one monitor to another with a different DPI\n\n- Ensure underlines are rendered even for fonts with very poor metrics\n\n- Fix some emoji glyphs not colored on Linux\n\n- Internal wcwidth() implementation is now auto-generated from the unicode\n  standard database\n\n- Allow configuring the modifiers to use for rectangular selection with the\n  mouse.\n\n- Fix incorrect minimum wayland version in the build script\n\n- Fix a crash when detecting a URL that ends at the end of the line\n\n- Fix regression that broke drawing of hollow cursor when window loses focus\n\n\n0.6.0 [2017-12-18]\n---------------------------\n\n- Support background transparency via the background_opacity option. Provided\n  that your OS/window manager supports transparency, you can now have kitty\n  render pixels that have only the default background color as\n  semi-transparent.\n\n- Support multiple top level (OS) windows. These windows all share the sprite\n  texture cache on the GPU, further reducing overall resource usage. Use\n  the shortcut `ctrl+shift+n` to open a new top-level window.\n\n- Add support for a *daemon* mode using the `--single-instance` command line\n  option. With this option you can have only a single kitty instance running.\n  All future invocations simply open new top-level windows in the existing\n  instance.\n\n- Support colored emoji\n\n- Use CoreText instead of FreeType to render text on macOS\n\n- Support running on the \"low power\" GPU on dual GPU macOS machines\n\n- Add a new \"grid\" window layout\n\n- Drop the dependency on glfw (kitty now uses a modified, bundled copy of glfw)\n\n- Add an option to control the audio bell volume on X11 systems\n\n- Add a command line switch to set the name part of the WM_CLASS window\n  property independently.\n\n- Add a command line switch to set the window title.\n\n- Add more options to customize the tab-bar's appearance (font styles and\n  separator)\n\n- Allow drag and drop of files into kitty. On drop kitty will paste the\n  file path to the running program.\n\n- Add an option to control the underline style for URL highlighting on hover\n\n- X11: Set the WINDOWID environment variable\n\n- Fix middle and right buttons swapped when sending mouse events to child\n  processes\n\n- Allow selecting in a rectangle by holding down Ctrl+Alt while dragging with\n  the mouse.\n\n\n0.5.1 [2017-12-01]\n---------------------------\n\n- Add an option to control the thickness of lines in box drawing characters\n\n- Increase max. allowed ligature length to nine characters\n\n- Fix text not vertically centered when adjusting line height\n\n- Fix unicode block characters not being rendered properly\n\n- Fix shift+up/down not generating correct escape codes\n\n- Image display: Fix displaying images taller than two screen heights not\n  scrolling properly\n\n\n0.5.0 [2017-11-19]\n---------------------------\n\n- Add support for ligature fonts such as Fira Code, Hasklig, etc. kitty now\n  uses harfbuzz for text shaping which allow it to support advanced OpenType\n  features such as contextual alternates/ligatures/combining glyphs/etc.\n\n- Make it easy to select fonts by allowing listing of monospace fonts using:\n  kitty list-fonts\n\n- Add an option to have window focus follow mouse\n\n- Add a keyboard shortcut (ctrl+shift+f11) to toggle fullscreen mode\n\n- macOS: Fix handling of option key. It now behaves just like the alt key on\n  Linux. There is an option to make it type unicode characters instead.\n\n- Linux: Add support for startup notification on X11 desktops. kitty will\n  now inform the window manager when its startup is complete.\n\n- Fix shell prompt being duplicated when window is resized\n\n- Fix crash when displaying more than 64 images in the same session\n\n- Add support for colons in SGR color codes. These are generated by some\n  applications such as neovim when they mistakenly identify kitty as a libvte\n  based terminal.\n\n- Fix mouse interaction not working in apps using obsolete mouse interaction\n  protocols\n\n- Linux: no longer require glew as a dependency\n\n\n0.4.2 [2017-10-23]\n---------------------------\n\n- Fix a regression in 0.4.0 that broke custom key mappings\n\n- Fix a regression in 0.4.0 that broke support for non-QWERTY keyboard layouts\n\n- Avoid using threads to reap zombie child processes. Also prevent kitty from\n  hanging if the open program hangs when clicking on a URL.\n\n\n0.4.0 [2017-10-22]\n---------------------------\n\n- Support for drawing arbitrary raster graphics (images) in the terminal via a\n  new graphics protocol. kitty can draw images with full 32-bit color using both\n  ssh connections and files/shared memory (when available) for better\n  performance. The drawing primitives support alpha blending and z-index.\n  Images can be drawn both above and below text. See :doc:`graphics-protocol`.\n  for details.\n\n- Refactor kitty's internals to make it even faster and more efficient. The CPU\n  usage of kitty + X server while doing intensive tasks such as scrolling a\n  file continuously in less has been reduced by 50%. There are now two\n  configuration options ``repaint_delay`` and ``input_delay`` you can use to\n  fine tune kitty's performance vs CPU usage profile. The CPU usage of kitty +\n  X when scrolling in less is now significantly better than most (all?) other\n  terminals. See :doc:`performance`.\n\n- Hovering over URLs with the mouse now underlines them to indicate they\n  can be clicked. Hold down Ctrl+Shift while clicking to open the URL.\n\n- Selection using the mouse is now more intelligent. It does not add\n  blank cells (i.e. cells that have no content) after the end of text in a\n  line to the selection.\n\n- The block cursor in now fully opaque but renders the character under it in\n  the background color, for enhanced visibility.\n\n- Allow combining multiple independent actions into a single shortcut\n\n- Add a new shortcut to pass the current selection to an external program\n\n- Allow creating shortcuts to open new windows running arbitrary commands. You\n  can also pass the current selection to the command as an arguments and the\n  contents of the screen + scrollback buffer as stdin to the command.\n", "/*\n * graphics.c\n * Copyright (C) 2017 Kovid Goyal <kovid at kovidgoyal.net>\n *\n * Distributed under terms of the GPL3 license.\n */\n\n#include \"graphics.h\"\n#include \"state.h\"\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <stdlib.h>\n\n#include <zlib.h>\n#include <structmember.h>\n#include \"png-reader.h\"\nPyTypeObject GraphicsManager_Type;\n\n#define STORAGE_LIMIT (320u * (1024u * 1024u))\n\n#define REPORT_ERROR(...) { log_error(__VA_ARGS__); }\n\n\nstatic bool send_to_gpu = true;\n\nGraphicsManager*\ngrman_alloc() {\n    GraphicsManager *self = (GraphicsManager *)GraphicsManager_Type.tp_alloc(&GraphicsManager_Type, 0);\n    self->images_capacity = self->capacity = 64;\n    self->images = calloc(self->images_capacity, sizeof(Image));\n    self->render_data = calloc(self->capacity, sizeof(ImageRenderData));\n    if (self->images == NULL || self->render_data == NULL) {\n        PyErr_NoMemory();\n        Py_CLEAR(self); return NULL;\n    }\n    return self;\n}\n\nstatic inline void\nfree_refs_data(Image *img) {\n    free(img->refs); img->refs = NULL;\n    img->refcnt = 0; img->refcap = 0;\n}\n\nstatic inline void\nfree_load_data(LoadData *ld) {\n    free(ld->buf); ld->buf_used = 0; ld->buf_capacity = 0;\n    ld->buf = NULL;\n\n    if (ld->mapped_file) munmap(ld->mapped_file, ld->mapped_file_sz);\n    ld->mapped_file = NULL; ld->mapped_file_sz = 0;\n}\n\nstatic inline void\nfree_image(GraphicsManager *self, Image *img) {\n    if (img->texture_id) free_texture(&img->texture_id);\n    free_refs_data(img);\n    free_load_data(&(img->load_data));\n    self->used_storage -= img->used_storage;\n}\n\n\nstatic void\ndealloc(GraphicsManager* self) {\n    size_t i;\n    if (self->images) {\n        for (i = 0; i < self->image_count; i++) free_image(self, self->images + i);\n        free(self->images);\n    }\n    free(self->render_data);\n    Py_TYPE(self)->tp_free((PyObject*)self);\n}\n\nstatic id_type internal_id_counter = 1;\n\nstatic inline Image*\nimg_by_internal_id(GraphicsManager *self, id_type id) {\n    for (size_t i = 0; i < self->image_count; i++) {\n        if (self->images[i].internal_id == id) return self->images + i;\n    }\n    return NULL;\n}\n\nstatic inline Image*\nimg_by_client_id(GraphicsManager *self, uint32_t id) {\n    for (size_t i = 0; i < self->image_count; i++) {\n        if (self->images[i].client_id == id) return self->images + i;\n    }\n    return NULL;\n}\n\nstatic inline void\nremove_image(GraphicsManager *self, size_t idx) {\n    free_image(self, self->images + idx);\n    remove_i_from_array(self->images, idx, self->image_count);\n    self->layers_dirty = true;\n}\n\nstatic inline void\nremove_images(GraphicsManager *self, bool(*predicate)(Image*), id_type skip_image_internal_id) {\n    for (size_t i = self->image_count; i-- > 0;) {\n        Image *img = self->images + i;\n        if (img->internal_id != skip_image_internal_id && predicate(img)) {\n            remove_image(self, i);\n        }\n    }\n}\n\n\n// Loading image data {{{\n\nstatic bool\ntrim_predicate(Image *img) {\n    return !img->data_loaded || !img->refcnt;\n}\n\n\nstatic int\noldest_last(const void* a, const void *b) {\n    monotonic_t ans = ((Image*)(b))->atime - ((Image*)(a))->atime;\n    return ans < 0 ? -1 : (ans == 0 ? 0 : 1);\n}\n\nstatic inline void\napply_storage_quota(GraphicsManager *self, size_t storage_limit, id_type currently_added_image_internal_id) {\n    // First remove unreferenced images, even if they have an id\n    remove_images(self, trim_predicate, currently_added_image_internal_id);\n    if (self->used_storage < storage_limit) return;\n\n    qsort(self->images, self->image_count, sizeof(self->images[0]), oldest_last);\n    while (self->used_storage > storage_limit && self->image_count > 0) {\n        remove_image(self, self->image_count - 1);\n    }\n    if (!self->image_count) self->used_storage = 0;  // sanity check\n}\n\nstatic char add_response[512] = {0};\nstatic bool has_add_respose = false;\n\nstatic inline void\nset_add_response(const char *code, const char *fmt, ...) {\n    va_list args;\n    va_start(args, fmt);\n    size_t sz = sizeof(add_response)/sizeof(add_response[0]);\n    int num = snprintf(add_response, sz, \"%s:\", code);\n    vsnprintf(add_response + num, sz - num, fmt, args);\n    va_end(args);\n    has_add_respose = true;\n}\n\n// Decode formats {{{\n#define ABRT(code, ...) { set_add_response(#code, __VA_ARGS__); goto err; }\n\nstatic inline bool\nmmap_img_file(GraphicsManager UNUSED *self, Image *img, int fd, size_t sz, off_t offset) {\n    if (!sz) {\n        struct stat s;\n        if (fstat(fd, &s) != 0) ABRT(EBADF, \"Failed to fstat() the fd: %d file with error: [%d] %s\", fd, errno, strerror(errno));\n        sz = s.st_size;\n    }\n    void *addr = mmap(0, sz, PROT_READ, MAP_SHARED, fd, offset);\n    if (addr == MAP_FAILED) ABRT(EBADF, \"Failed to map image file fd: %d at offset: %zd with size: %zu with error: [%d] %s\", fd, offset, sz, errno, strerror(errno));\n    img->load_data.mapped_file = addr;\n    img->load_data.mapped_file_sz = sz;\n    return true;\nerr:\n    return false;\n}\n\n\nstatic inline const char*\nzlib_strerror(int ret) {\n#define Z(x) case x: return #x;\n    static char buf[128];\n    switch(ret) {\n        case Z_ERRNO:\n            return strerror(errno);\n        default:\n            snprintf(buf, sizeof(buf)/sizeof(buf[0]), \"Unknown error: %d\", ret);\n            return buf;\n        Z(Z_STREAM_ERROR);\n        Z(Z_DATA_ERROR);\n        Z(Z_MEM_ERROR);\n        Z(Z_BUF_ERROR);\n        Z(Z_VERSION_ERROR);\n    }\n#undef Z\n}\n\nstatic inline bool\ninflate_zlib(GraphicsManager UNUSED *self, Image *img, uint8_t *buf, size_t bufsz) {\n    bool ok = false;\n    z_stream z;\n    uint8_t *decompressed = malloc(img->load_data.data_sz);\n    if (decompressed == NULL) fatal(\"Out of memory allocating decompression buffer\");\n    z.zalloc = Z_NULL;\n    z.zfree = Z_NULL;\n    z.opaque = Z_NULL;\n    z.avail_in = bufsz;\n    z.next_in = (Bytef*)buf;\n    z.avail_out = img->load_data.data_sz;\n    z.next_out = decompressed;\n    int ret;\n    if ((ret = inflateInit(&z)) != Z_OK) ABRT(ENOMEM, \"Failed to initialize inflate with error: %s\", zlib_strerror(ret));\n    if ((ret = inflate(&z, Z_FINISH)) != Z_STREAM_END) ABRT(EINVAL, \"Failed to inflate image data with error: %s\", zlib_strerror(ret));\n    if (z.avail_out) ABRT(EINVAL, \"Image data size post inflation does not match expected size\");\n    free_load_data(&img->load_data);\n    img->load_data.buf_capacity = img->load_data.data_sz;\n    img->load_data.buf = decompressed;\n    img->load_data.buf_used = img->load_data.data_sz;\n    ok = true;\nerr:\n    inflateEnd(&z);\n    if (!ok) free(decompressed);\n    return ok;\n}\n\nstatic void\npng_error_handler(const char *code, const char *msg) {\n    set_add_response(code, \"%s\", msg);\n}\n\nstatic inline bool\ninflate_png(GraphicsManager UNUSED *self, Image *img, uint8_t *buf, size_t bufsz) {\n    png_read_data d = {.err_handler=png_error_handler};\n    inflate_png_inner(&d, buf, bufsz);\n    if (d.ok) {\n        free_load_data(&img->load_data);\n        img->load_data.buf = d.decompressed;\n        img->load_data.buf_capacity = d.sz;\n        img->load_data.buf_used = d.sz;\n        img->load_data.data_sz = d.sz;\n        img->width = d.width; img->height = d.height;\n    }\n    else free(d.decompressed);\n    free(d.row_pointers);\n    return d.ok;\n}\n#undef ABRT\n// }}}\n\nstatic bool\nadd_trim_predicate(Image *img) {\n    return !img->data_loaded || (!img->client_id && !img->refcnt);\n}\n\nbool\npng_path_to_bitmap(const char* path, uint8_t** data, unsigned int* width, unsigned int* height, size_t* sz) {\n    FILE* fp = fopen(path, \"r\");\n    if (fp == NULL) {\n        log_error(\"The PNG image: %s could not be opened with error: %s\", path, strerror(errno));\n        return false;\n    }\n    size_t capacity = 16*1024, pos = 0;\n    unsigned char *buf = malloc(capacity);\n    if (!buf) { log_error(\"Out of memory reading PNG file at: %s\", path); fclose(fp); return false; }\n    while (!feof(fp)) {\n        if (pos - capacity < 1024) {\n            capacity *= 2;\n            unsigned char *new_buf = realloc(buf, capacity);\n            if (!new_buf) {\n                free(buf);\n                log_error(\"Out of memory reading PNG file at: %s\", path); fclose(fp); return false;\n            }\n            buf = new_buf;\n        }\n        pos += fread(buf + pos, sizeof(char), capacity - pos, fp);\n        int saved_errno = errno;\n        if (ferror(fp) && saved_errno != EINTR) {\n            log_error(\"Failed while reading from file: %s with error: %s\", path, strerror(saved_errno));\n            fclose(fp);\n            free(buf);\n            return false;\n        }\n    }\n    fclose(fp); fp = NULL;\n    png_read_data d = {0};\n    inflate_png_inner(&d, buf, pos);\n    free(buf);\n    if (!d.ok) {\n        log_error(\"Failed to decode PNG image at: %s\", path);\n        return false;\n    }\n    *data = d.decompressed;\n    *sz = d.sz;\n    *height = d.height; *width = d.width;\n    return true;\n}\n\n\nstatic inline Image*\nfind_or_create_image(GraphicsManager *self, uint32_t id, bool *existing) {\n    if (id) {\n        for (size_t i = 0; i < self->image_count; i++) {\n            if (self->images[i].client_id == id) {\n                *existing = true;\n                return self->images + i;\n            }\n        }\n    }\n    *existing = false;\n    ensure_space_for(self, images, Image, self->image_count + 1, images_capacity, 64, true);\n    Image *ans = self->images + self->image_count++;\n    zero_at_ptr(ans);\n    return ans;\n}\n\n\nstatic Image*\nhandle_add_command(GraphicsManager *self, const GraphicsCommand *g, const uint8_t *payload, bool *is_dirty, uint32_t iid) {\n#define ABRT(code, ...) { set_add_response(#code, __VA_ARGS__); self->loading_image = 0; if (img) img->data_loaded = false; return NULL; }\n#define MAX_DATA_SZ (4u * 100000000u)\n    has_add_respose = false;\n    bool existing, init_img = true;\n    Image *img = NULL;\n    unsigned char tt = g->transmission_type ? g->transmission_type : 'd';\n    enum FORMATS { RGB=24, RGBA=32, PNG=100 };\n    uint32_t fmt = g->format ? g->format : RGBA;\n    if (tt == 'd' && self->loading_image) init_img = false;\n    if (init_img) {\n        self->last_init_graphics_command = *g;\n        self->last_init_graphics_command.id = iid;\n        self->loading_image = 0;\n        if (g->data_width > 10000 || g->data_height > 10000) ABRT(EINVAL, \"Image too large\");\n        remove_images(self, add_trim_predicate, 0);\n        img = find_or_create_image(self, iid, &existing);\n        if (existing) {\n            free_load_data(&img->load_data);\n            img->data_loaded = false;\n            free_refs_data(img);\n            *is_dirty = true;\n            self->layers_dirty = true;\n        } else {\n            img->internal_id = internal_id_counter++;\n            img->client_id = iid;\n        }\n        img->atime = monotonic(); img->used_storage = 0;\n        img->width = g->data_width; img->height = g->data_height;\n        switch(fmt) {\n            case PNG:\n                if (g->data_sz > MAX_DATA_SZ) ABRT(EINVAL, \"PNG data size too large\");\n                img->load_data.is_4byte_aligned = true;\n                img->load_data.is_opaque = false;\n                img->load_data.data_sz = g->data_sz ? g->data_sz : 1024 * 100;\n                break;\n            case RGB:\n            case RGBA:\n                img->load_data.data_sz = (size_t)g->data_width * g->data_height * (fmt / 8);\n                if (!img->load_data.data_sz) ABRT(EINVAL, \"Zero width/height not allowed\");\n                img->load_data.is_4byte_aligned = fmt == RGBA || (img->width % 4 == 0);\n                img->load_data.is_opaque = fmt == RGB;\n                break;\n            default:\n                ABRT(EINVAL, \"Unknown image format: %u\", fmt);\n        }\n        if (tt == 'd') {\n            if (g->more) self->loading_image = img->internal_id;\n            img->load_data.buf_capacity = img->load_data.data_sz + (g->compressed ? 1024 : 10);  // compression header\n            img->load_data.buf = malloc(img->load_data.buf_capacity);\n            img->load_data.buf_used = 0;\n            if (img->load_data.buf == NULL) {\n                ABRT(ENOMEM, \"Out of memory\");\n                img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;\n            }\n        }\n    } else {\n        self->last_init_graphics_command.more = g->more;\n        self->last_init_graphics_command.payload_sz = g->payload_sz;\n        g = &self->last_init_graphics_command;\n        tt = g->transmission_type ? g->transmission_type : 'd';\n        fmt = g->format ? g->format : RGBA;\n        img = img_by_internal_id(self, self->loading_image);\n        if (img == NULL) {\n            self->loading_image = 0;\n            ABRT(EILSEQ, \"More payload loading refers to non-existent image\");\n        }\n    }\n    int fd;\n    static char fname[2056] = {0};\n    switch(tt) {\n        case 'd':  // direct\n            if (img->load_data.buf_capacity - img->load_data.buf_used < g->payload_sz) {\n                if (img->load_data.buf_used + g->payload_sz > MAX_DATA_SZ || fmt != PNG) ABRT(EFBIG, \"Too much data\");\n                img->load_data.buf_capacity = MIN(2 * img->load_data.buf_capacity, MAX_DATA_SZ);\n                img->load_data.buf = realloc(img->load_data.buf, img->load_data.buf_capacity);\n                if (img->load_data.buf == NULL) {\n                    ABRT(ENOMEM, \"Out of memory\");\n                    img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;\n                }\n            }\n            memcpy(img->load_data.buf + img->load_data.buf_used, payload, g->payload_sz);\n            img->load_data.buf_used += g->payload_sz;\n            if (!g->more) { img->data_loaded = true; self->loading_image = 0; }\n            break;\n        case 'f': // file\n        case 't': // temporary file\n        case 's': // POSIX shared memory\n            if (g->payload_sz > 2048) ABRT(EINVAL, \"Filename too long\");\n            snprintf(fname, sizeof(fname)/sizeof(fname[0]), \"%.*s\", (int)g->payload_sz, payload);\n            if (tt == 's') fd = shm_open(fname, O_RDONLY, 0);\n            else fd = open(fname, O_CLOEXEC | O_RDONLY);\n            if (fd == -1) ABRT(EBADF, \"Failed to open file %s for graphics transmission with error: [%d] %s\", fname, errno, strerror(errno));\n            img->data_loaded = mmap_img_file(self, img, fd, g->data_sz, g->data_offset);\n            safe_close(fd, __FILE__, __LINE__);\n            if (tt == 't') {\n                if (global_state.boss) { call_boss(safe_delete_temp_file, \"s\", fname); }\n                else unlink(fname);\n            }\n            else if (tt == 's') shm_unlink(fname);\n            break;\n        default:\n            ABRT(EINVAL, \"Unknown transmission type: %c\", g->transmission_type);\n    }\n    if (!img->data_loaded) return NULL;\n    self->loading_image = 0;\n    bool needs_processing = g->compressed || fmt == PNG;\n    if (needs_processing) {\n        uint8_t *buf; size_t bufsz;\n#define IB { if (img->load_data.buf) { buf = img->load_data.buf; bufsz = img->load_data.buf_used; } else { buf = img->load_data.mapped_file; bufsz = img->load_data.mapped_file_sz; } }\n        switch(g->compressed) {\n            case 'z':\n                IB;\n                if (!inflate_zlib(self, img, buf, bufsz)) {\n                    img->data_loaded = false; return NULL;\n                }\n                break;\n            case 0:\n                break;\n            default:\n                ABRT(EINVAL, \"Unknown image compression: %c\", g->compressed);\n        }\n        switch(fmt) {\n            case PNG:\n                IB;\n                if (!inflate_png(self, img, buf, bufsz)) {\n                    img->data_loaded = false; return NULL;\n                }\n                break;\n            default: break;\n        }\n#undef IB\n        img->load_data.data = img->load_data.buf;\n        if (img->load_data.buf_used < img->load_data.data_sz) {\n            ABRT(ENODATA, \"Insufficient image data: %zu < %zu\", img->load_data.buf_used, img->load_data.data_sz);\n        }\n        if (img->load_data.mapped_file) {\n            munmap(img->load_data.mapped_file, img->load_data.mapped_file_sz);\n            img->load_data.mapped_file = NULL; img->load_data.mapped_file_sz = 0;\n        }\n    } else {\n        if (tt == 'd') {\n            if (img->load_data.buf_used < img->load_data.data_sz) {\n                ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.buf_used, img->load_data.data_sz);\n            } else img->load_data.data = img->load_data.buf;\n        } else {\n            if (img->load_data.mapped_file_sz < img->load_data.data_sz) {\n                ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.mapped_file_sz, img->load_data.data_sz);\n            } else img->load_data.data = img->load_data.mapped_file;\n        }\n    }\n    size_t required_sz = (size_t)(img->load_data.is_opaque ? 3 : 4) * img->width * img->height;\n    if (img->load_data.data_sz != required_sz) ABRT(EINVAL, \"Image dimensions: %ux%u do not match data size: %zu, expected size: %zu\", img->width, img->height, img->load_data.data_sz, required_sz);\n    if (LIKELY(img->data_loaded && send_to_gpu)) {\n        send_image_to_gpu(&img->texture_id, img->load_data.data, img->width, img->height, img->load_data.is_opaque, img->load_data.is_4byte_aligned, false, REPEAT_CLAMP);\n        free_load_data(&img->load_data);\n        self->used_storage += required_sz;\n        img->used_storage = required_sz;\n    }\n    return img;\n#undef MAX_DATA_SZ\n#undef ABRT\n}\n\nstatic inline const char*\ncreate_add_response(GraphicsManager UNUSED *self, bool data_loaded, uint32_t iid) {\n    static char rbuf[sizeof(add_response)/sizeof(add_response[0]) + 64];\n    if (iid) {\n        if (!has_add_respose) {\n            if (!data_loaded) return NULL;\n            snprintf(add_response, 10, \"OK\");\n        }\n        snprintf(rbuf, sizeof(rbuf)/sizeof(rbuf[0]) - 1, \"Gi=%u;%s\", iid, add_response);\n        return rbuf;\n    }\n    return NULL;\n}\n\n// }}}\n\n// Displaying images {{{\n\nstatic inline void\nupdate_src_rect(ImageRef *ref, Image *img) {\n    // The src rect in OpenGL co-ords [0, 1] with origin at top-left corner of image\n    ref->src_rect.left = (float)ref->src_x / (float)img->width;\n    ref->src_rect.right = (float)(ref->src_x + ref->src_width) / (float)img->width;\n    ref->src_rect.top = (float)ref->src_y / (float)img->height;\n    ref->src_rect.bottom = (float)(ref->src_y + ref->src_height) / (float)img->height;\n}\n\nstatic inline void\nupdate_dest_rect(ImageRef *ref, uint32_t num_cols, uint32_t num_rows, CellPixelSize cell) {\n    uint32_t t;\n    if (num_cols == 0) {\n        t = ref->src_width + ref->cell_x_offset;\n        num_cols = t / cell.width;\n        if (t > num_cols * cell.width) num_cols += 1;\n    }\n    if (num_rows == 0) {\n        t = ref->src_height + ref->cell_y_offset;\n        num_rows = t / cell.height;\n        if (t > num_rows * cell.height) num_rows += 1;\n    }\n    ref->effective_num_rows = num_rows;\n    ref->effective_num_cols = num_cols;\n}\n\n\nstatic void\nhandle_put_command(GraphicsManager *self, const GraphicsCommand *g, Cursor *c, bool *is_dirty, Image *img, CellPixelSize cell) {\n    has_add_respose = false;\n    if (img == NULL) img = img_by_client_id(self, g->id);\n    if (img == NULL) { set_add_response(\"ENOENT\", \"Put command refers to non-existent image with id: %u\", g->id); return; }\n    if (!img->data_loaded) { set_add_response(\"ENOENT\", \"Put command refers to image with id: %u that could not load its data\", g->id); return; }\n    ensure_space_for(img, refs, ImageRef, img->refcnt + 1, refcap, 16, true);\n    *is_dirty = true;\n    self->layers_dirty = true;\n    ImageRef *ref = NULL;\n    for (size_t i=0; i < img->refcnt; i++) {\n        if ((unsigned)img->refs[i].start_row == c->x && (unsigned)img->refs[i].start_column == c->y) {\n            ref = img->refs + i;\n            break;\n        }\n    }\n    if (ref == NULL) {\n        ref = img->refs + img->refcnt++;\n        zero_at_ptr(ref);\n    }\n    img->atime = monotonic();\n    ref->src_x = g->x_offset; ref->src_y = g->y_offset; ref->src_width = g->width ? g->width : img->width; ref->src_height = g->height ? g->height : img->height;\n    ref->src_width = MIN(ref->src_width, img->width - (img->width > ref->src_x ? ref->src_x : img->width));\n    ref->src_height = MIN(ref->src_height, img->height - (img->height > ref->src_y ? ref->src_y : img->height));\n    ref->z_index = g->z_index;\n    ref->start_row = c->y; ref->start_column = c->x;\n    ref->cell_x_offset = MIN(g->cell_x_offset, cell.width - 1);\n    ref->cell_y_offset = MIN(g->cell_y_offset, cell.height - 1);\n    ref->num_cols = g->num_cells; ref->num_rows = g->num_lines;\n    update_src_rect(ref, img);\n    update_dest_rect(ref, g->num_cells, g->num_lines, cell);\n    // Move the cursor, the screen will take care of ensuring it is in bounds\n    c->x += ref->effective_num_cols; c->y += ref->effective_num_rows - 1;\n}\n\nstatic int\ncmp_by_zindex_and_image(const void *a_, const void *b_) {\n    const ImageRenderData *a = (const ImageRenderData*)a_, *b = (const ImageRenderData*)b_;\n    int ans = a->z_index - b->z_index;\n    if (ans == 0) ans = a->image_id - b->image_id;\n    return ans;\n}\n\nstatic inline void\nset_vertex_data(ImageRenderData *rd, const ImageRef *ref, const ImageRect *dest_rect) {\n#define R(n, a, b) rd->vertices[n*4] = ref->src_rect.a; rd->vertices[n*4 + 1] = ref->src_rect.b; rd->vertices[n*4 + 2] = dest_rect->a; rd->vertices[n*4 + 3] = dest_rect->b;\n        R(0, right, top); R(1, right, bottom); R(2, left, bottom); R(3, left, top);\n#undef R\n}\n\nvoid\ngpu_data_for_centered_image(ImageRenderData *ans, unsigned int screen_width_px, unsigned int screen_height_px, unsigned int width, unsigned int height) {\n    static const ImageRef source_rect = { .src_rect = { .left=0, .top=0, .bottom=1, .right=1 }};\n    const ImageRef *ref = &source_rect;\n    float width_frac = 2 * MIN(1, width / (float)screen_width_px), height_frac = 2 * MIN(1, height / (float)screen_height_px);\n    float hmargin = (2 - width_frac) / 2;\n    float vmargin = (2 - height_frac) / 2;\n    const ImageRect r = { .left = -1 + hmargin, .right = -1 + hmargin + width_frac, .top = 1 - vmargin, .bottom = 1 - vmargin - height_frac };\n    set_vertex_data(ans, ref, &r);\n}\n\nbool\ngrman_update_layers(GraphicsManager *self, unsigned int scrolled_by, float screen_left, float screen_top, float dx, float dy, unsigned int num_cols, unsigned int num_rows, CellPixelSize cell) {\n    if (self->last_scrolled_by != scrolled_by) self->layers_dirty = true;\n    self->last_scrolled_by = scrolled_by;\n    if (!self->layers_dirty) return false;\n    self->layers_dirty = false;\n    size_t i, j;\n    self->num_of_below_refs = 0;\n    self->num_of_negative_refs = 0;\n    self->num_of_positive_refs = 0;\n    Image *img; ImageRef *ref;\n    ImageRect r;\n    float screen_width = dx * num_cols, screen_height = dy * num_rows;\n    float screen_bottom = screen_top - screen_height;\n    float screen_width_px = num_cols * cell.width;\n    float screen_height_px = num_rows * cell.height;\n    float y0 = screen_top - dy * scrolled_by;\n\n    // Iterate over all visible refs and create render data\n    self->count = 0;\n    for (i = 0; i < self->image_count; i++) { img = self->images + i; for (j = 0; j < img->refcnt; j++) { ref = img->refs + j;\n        r.top = y0 - ref->start_row * dy - dy * (float)ref->cell_y_offset / (float)cell.height;\n        if (ref->num_rows > 0) r.bottom = y0 - (ref->start_row + (int32_t)ref->num_rows) * dy;\n        else r.bottom = r.top - screen_height * (float)ref->src_height / screen_height_px;\n        if (r.top <= screen_bottom || r.bottom >= screen_top) continue;  // not visible\n\n        r.left = screen_left + ref->start_column * dx + dx * (float)ref->cell_x_offset / (float) cell.width;\n        if (ref->num_cols > 0) r.right = screen_left + (ref->start_column + (int32_t)ref->num_cols) * dx;\n        else r.right = r.left + screen_width * (float)ref->src_width / screen_width_px;\n\n        if (ref->z_index < ((int32_t)INT32_MIN/2))\n            self->num_of_below_refs++;\n        else if (ref->z_index < 0)\n            self->num_of_negative_refs++;\n        else\n            self->num_of_positive_refs++;\n        ensure_space_for(self, render_data, ImageRenderData, self->count + 1, capacity, 64, true);\n        ImageRenderData *rd = self->render_data + self->count;\n        zero_at_ptr(rd);\n        set_vertex_data(rd, ref, &r);\n        self->count++;\n        rd->z_index = ref->z_index; rd->image_id = img->internal_id;\n        rd->texture_id = img->texture_id;\n    }}\n    if (!self->count) return false;\n    // Sort visible refs in draw order (z-index, img)\n    qsort(self->render_data, self->count, sizeof(self->render_data[0]), cmp_by_zindex_and_image);\n    // Calculate the group counts\n    i = 0;\n    while (i < self->count) {\n        id_type image_id = self->render_data[i].image_id, start = i;\n        if (start == self->count - 1) i = self->count;\n        else {\n            while (i < self->count - 1 && self->render_data[++i].image_id == image_id) {}\n        }\n        self->render_data[start].group_count = i - start;\n    }\n    return true;\n}\n\n// }}}\n\n// Image lifetime/scrolling {{{\n\nstatic inline void\nfilter_refs(GraphicsManager *self, const void* data, bool free_images, bool (*filter_func)(const ImageRef*, Image*, const void*, CellPixelSize), CellPixelSize cell) {\n    for (size_t i = self->image_count; i-- > 0;) {\n        Image *img = self->images + i;\n        for (size_t j = img->refcnt; j-- > 0;) {\n            ImageRef *ref = img->refs + j;\n            if (filter_func(ref, img, data, cell)) {\n                remove_i_from_array(img->refs, j, img->refcnt);\n                self->layers_dirty = true;\n            }\n        }\n        if (img->refcnt == 0 && (free_images || img->client_id == 0)) remove_image(self, i);\n    }\n}\n\nstatic inline void\nmodify_refs(GraphicsManager *self, const void* data, bool free_images, bool (*filter_func)(ImageRef*, Image*, const void*, CellPixelSize), CellPixelSize cell) {\n    for (size_t i = self->image_count; i-- > 0;) {\n        Image *img = self->images + i;\n        for (size_t j = img->refcnt; j-- > 0;) {\n            if (filter_func(img->refs + j, img, data, cell)) remove_i_from_array(img->refs, j, img->refcnt);\n        }\n        if (img->refcnt == 0 && (free_images || img->client_id == 0)) remove_image(self, i);\n    }\n}\n\n\nstatic inline bool\nscroll_filter_func(ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    ScrollData *d = (ScrollData*)data;\n    ref->start_row += d->amt;\n    return ref->start_row + (int32_t)ref->effective_num_rows <= d->limit;\n}\n\nstatic inline bool\nref_within_region(const ImageRef *ref, index_type margin_top, index_type margin_bottom) {\n    return ref->start_row >= (int32_t)margin_top && ref->start_row + ref->effective_num_rows <= margin_bottom;\n}\n\nstatic inline bool\nref_outside_region(const ImageRef *ref, index_type margin_top, index_type margin_bottom) {\n    return ref->start_row + ref->effective_num_rows <= margin_top || ref->start_row > (int32_t)margin_bottom;\n}\n\nstatic inline bool\nscroll_filter_margins_func(ImageRef* ref, Image* img, const void* data, CellPixelSize cell) {\n    ScrollData *d = (ScrollData*)data;\n    if (ref_within_region(ref, d->margin_top, d->margin_bottom)) {\n        ref->start_row += d->amt;\n        if (ref_outside_region(ref, d->margin_top, d->margin_bottom)) return true;\n        // Clip the image if scrolling has resulted in part of it being outside the page area\n        uint32_t clip_amt, clipped_rows;\n        if (ref->start_row < (int32_t)d->margin_top) {\n            // image moved up\n            clipped_rows = d->margin_top - ref->start_row;\n            clip_amt = cell.height * clipped_rows;\n            if (ref->src_height <= clip_amt) return true;\n            ref->src_y += clip_amt; ref->src_height -= clip_amt;\n            ref->effective_num_rows -= clipped_rows;\n            update_src_rect(ref, img);\n            ref->start_row += clipped_rows;\n        } else if (ref->start_row + ref->effective_num_rows > d->margin_bottom) {\n            // image moved down\n            clipped_rows = ref->start_row + ref->effective_num_rows - d->margin_bottom;\n            clip_amt = cell.height * clipped_rows;\n            if (ref->src_height <= clip_amt) return true;\n            ref->src_height -= clip_amt;\n            ref->effective_num_rows -= clipped_rows;\n            update_src_rect(ref, img);\n        }\n        return ref_outside_region(ref, d->margin_top, d->margin_bottom);\n    }\n    return false;\n}\n\nvoid\ngrman_scroll_images(GraphicsManager *self, const ScrollData *data, CellPixelSize cell) {\n    if (self->image_count) {\n        self->layers_dirty = true;\n        modify_refs(self, data, true, data->has_margins ? scroll_filter_margins_func : scroll_filter_func, cell);\n    }\n}\n\nstatic inline bool\nclear_filter_func(const ImageRef *ref, Image UNUSED *img, const void UNUSED *data, CellPixelSize cell UNUSED) {\n    return ref->start_row + (int32_t)ref->effective_num_rows > 0;\n}\n\nstatic inline bool\nclear_all_filter_func(const ImageRef *ref UNUSED, Image UNUSED *img, const void UNUSED *data, CellPixelSize cell UNUSED) {\n    return true;\n}\n\nvoid\ngrman_clear(GraphicsManager *self, bool all, CellPixelSize cell) {\n    filter_refs(self, NULL, true, all ? clear_all_filter_func : clear_filter_func, cell);\n}\n\nstatic inline bool\nid_filter_func(const ImageRef UNUSED *ref, Image *img, const void *data, CellPixelSize cell UNUSED) {\n    uint32_t iid = *(uint32_t*)data;\n    return img->client_id == iid;\n}\n\nstatic inline bool\nx_filter_func(const ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    const GraphicsCommand *g = data;\n    return ref->start_column <= (int32_t)g->x_offset - 1 && ((int32_t)g->x_offset - 1) < ((int32_t)(ref->start_column + ref->effective_num_cols));\n}\n\nstatic inline bool\ny_filter_func(const ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    const GraphicsCommand *g = data;\n    return ref->start_row <= (int32_t)g->y_offset - 1 && ((int32_t)(g->y_offset - 1 < ref->start_row + ref->effective_num_rows));\n}\n\nstatic inline bool\nz_filter_func(const ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    const GraphicsCommand *g = data;\n    return ref->z_index == g->z_index;\n}\n\n\nstatic inline bool\npoint_filter_func(const ImageRef *ref, Image *img, const void *data, CellPixelSize cell) {\n    return x_filter_func(ref, img, data, cell) && y_filter_func(ref, img, data, cell);\n}\n\nstatic inline bool\npoint3d_filter_func(const ImageRef *ref, Image *img, const void *data, CellPixelSize cell) {\n    return z_filter_func(ref, img, data, cell) && point_filter_func(ref, img, data, cell);\n}\n\n\nstatic void\nhandle_delete_command(GraphicsManager *self, const GraphicsCommand *g, Cursor *c, bool *is_dirty, CellPixelSize cell) {\n    static GraphicsCommand d;\n    switch (g->delete_action) {\n#define I(u, data, func) filter_refs(self, data, g->delete_action == u, func, cell); *is_dirty = true; break\n#define D(l, u, data, func) case l: case u: I(u, data, func)\n#define G(l, u, func) D(l, u, g, func)\n        case 0:\n        D('a', 'A', NULL, clear_filter_func);\n        D('i', 'I', &g->id, id_filter_func);\n        G('p', 'P', point_filter_func);\n        G('q', 'Q', point3d_filter_func);\n        G('x', 'X', x_filter_func);\n        G('y', 'Y', y_filter_func);\n        G('z', 'Z', z_filter_func);\n        case 'c':\n        case 'C':\n            d.x_offset = c->x + 1; d.y_offset = c->y + 1;\n            I('C', &d, point_filter_func);\n        default:\n            REPORT_ERROR(\"Unknown graphics command delete action: %c\", g->delete_action);\n            break;\n#undef G\n#undef D\n#undef I\n    }\n    if (!self->image_count && self->count) self->count = 0;\n}\n\n// }}}\n\nvoid\ngrman_resize(GraphicsManager *self, index_type UNUSED old_lines, index_type UNUSED lines, index_type UNUSED old_columns, index_type UNUSED columns) {\n    self->layers_dirty = true;\n}\n\nvoid\ngrman_rescale(GraphicsManager *self, CellPixelSize cell) {\n    ImageRef *ref; Image *img;\n    self->layers_dirty = true;\n    for (size_t i = self->image_count; i-- > 0;) {\n        img = self->images + i;\n        for (size_t j = img->refcnt; j-- > 0;) {\n            ref = img->refs + j;\n            ref->cell_x_offset = MIN(ref->cell_x_offset, cell.width - 1);\n            ref->cell_y_offset = MIN(ref->cell_y_offset, cell.height - 1);\n            update_dest_rect(ref, ref->num_cols, ref->num_rows, cell);\n        }\n    }\n}\n\nconst char*\ngrman_handle_command(GraphicsManager *self, const GraphicsCommand *g, const uint8_t *payload, Cursor *c, bool *is_dirty, CellPixelSize cell) {\n    const char *ret = NULL;\n\n    switch(g->action) {\n        case 0:\n        case 't':\n        case 'T':\n        case 'q': {\n            uint32_t iid = g->id, q_iid = iid;\n            if (g->action == 'q') { iid = 0; if (!q_iid) { REPORT_ERROR(\"Query graphics command without image id\"); break; } }\n            Image *image = handle_add_command(self, g, payload, is_dirty, iid);\n            ret = create_add_response(self, image != NULL, g->action == 'q' ? q_iid: self->last_init_graphics_command.id);\n            if (self->last_init_graphics_command.action == 'T' && image && image->data_loaded) handle_put_command(self, &self->last_init_graphics_command, c, is_dirty, image, cell);\n            id_type added_image_id = image ? image->internal_id : 0;\n            if (g->action == 'q') remove_images(self, add_trim_predicate, 0);\n            if (self->used_storage > STORAGE_LIMIT) apply_storage_quota(self, STORAGE_LIMIT, added_image_id);\n            break;\n        }\n        case 'p':\n            if (!g->id) {\n                REPORT_ERROR(\"Put graphics command without image id\");\n                break;\n            }\n            handle_put_command(self, g, c, is_dirty, NULL, cell);\n            ret = create_add_response(self, true, g->id);\n            break;\n        case 'd':\n            handle_delete_command(self, g, c, is_dirty, cell);\n            break;\n        default:\n            REPORT_ERROR(\"Unknown graphics command action: %c\", g->action);\n            break;\n    }\n    return ret;\n}\n\n\n// Boilerplate {{{\nstatic PyObject *\nnew(PyTypeObject UNUSED *type, PyObject UNUSED *args, PyObject UNUSED *kwds) {\n    PyObject *ans = (PyObject*)grman_alloc();\n    if (ans == NULL) PyErr_NoMemory();\n    return ans;\n}\n\nstatic inline PyObject*\nimage_as_dict(Image *img) {\n#define U(x) #x, img->x\n    return Py_BuildValue(\"{sI sI sI sI sK sI sO sO sN}\",\n        U(texture_id), U(client_id), U(width), U(height), U(internal_id), U(refcnt),\n        \"data_loaded\", img->data_loaded ? Py_True : Py_False,\n        \"is_4byte_aligned\", img->load_data.is_4byte_aligned ? Py_True : Py_False,\n        \"data\", Py_BuildValue(\"y#\", img->load_data.data, img->load_data.data_sz)\n    );\n#undef U\n\n}\n\n#define W(x) static PyObject* py##x(GraphicsManager UNUSED *self, PyObject *args)\n#define PA(fmt, ...) if(!PyArg_ParseTuple(args, fmt, __VA_ARGS__)) return NULL;\n\nW(image_for_client_id) {\n    unsigned long id = PyLong_AsUnsignedLong(args);\n    bool existing = false;\n    Image *img = find_or_create_image(self, id, &existing);\n    if (!existing) { Py_RETURN_NONE; }\n    return image_as_dict(img);\n}\n\nW(shm_write) {\n    const char *name, *data;\n    Py_ssize_t sz;\n    PA(\"ss#\", &name, &data, &sz);\n    int fd = shm_open(name, O_CREAT | O_RDWR, S_IRUSR | S_IWUSR);\n    if (fd == -1) { PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    int ret = ftruncate(fd, sz);\n    if (ret != 0) { safe_close(fd, __FILE__, __LINE__); PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    void *addr = mmap(0, sz, PROT_WRITE, MAP_SHARED, fd, 0);\n    if (addr == MAP_FAILED) { safe_close(fd, __FILE__, __LINE__); PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    memcpy(addr, data, sz);\n    if (munmap(addr, sz) != 0) { safe_close(fd, __FILE__, __LINE__); PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    safe_close(fd, __FILE__, __LINE__);\n    Py_RETURN_NONE;\n}\n\nW(shm_unlink) {\n    char *name;\n    PA(\"s\", &name);\n    int ret = shm_unlink(name);\n    if (ret == -1) { PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    Py_RETURN_NONE;\n}\n\nW(set_send_to_gpu) {\n    send_to_gpu = PyObject_IsTrue(args) ? true : false;\n    Py_RETURN_NONE;\n}\n\nW(update_layers) {\n    unsigned int scrolled_by, sx, sy; float xstart, ystart, dx, dy;\n    CellPixelSize cell;\n    PA(\"IffffIIII\", &scrolled_by, &xstart, &ystart, &dx, &dy, &sx, &sy, &cell.width, &cell.height);\n    grman_update_layers(self, scrolled_by, xstart, ystart, dx, dy, sx, sy, cell);\n    PyObject *ans = PyTuple_New(self->count);\n    for (size_t i = 0; i < self->count; i++) {\n        ImageRenderData *r = self->render_data + i;\n#define R(offset) Py_BuildValue(\"{sf sf sf sf}\", \"left\", r->vertices[offset + 8], \"top\", r->vertices[offset + 1], \"right\", r->vertices[offset], \"bottom\", r->vertices[offset + 5])\n        PyTuple_SET_ITEM(ans, i,\n            Py_BuildValue(\"{sN sN sI si sK}\", \"src_rect\", R(0), \"dest_rect\", R(2), \"group_count\", r->group_count, \"z_index\", r->z_index, \"image_id\", r->image_id)\n        );\n#undef R\n    }\n    return ans;\n}\n\n#define M(x, va) {#x, (PyCFunction)py##x, va, \"\"}\n\nstatic PyMethodDef methods[] = {\n    M(image_for_client_id, METH_O),\n    M(update_layers, METH_VARARGS),\n    {NULL}  /* Sentinel */\n};\n\nstatic PyMemberDef members[] = {\n    {\"image_count\", T_PYSSIZET, offsetof(GraphicsManager, image_count), 0, \"image_count\"},\n    {NULL},\n};\n\nPyTypeObject GraphicsManager_Type = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = \"fast_data_types.GraphicsManager\",\n    .tp_basicsize = sizeof(GraphicsManager),\n    .tp_dealloc = (destructor)dealloc,\n    .tp_flags = Py_TPFLAGS_DEFAULT,\n    .tp_doc = \"GraphicsManager\",\n    .tp_new = new,\n    .tp_methods = methods,\n    .tp_members = members,\n};\n\nstatic PyMethodDef module_methods[] = {\n    M(shm_write, METH_VARARGS),\n    M(shm_unlink, METH_VARARGS),\n    M(set_send_to_gpu, METH_O),\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n};\n\n\nbool\ninit_graphics(PyObject *module) {\n    if (PyType_Ready(&GraphicsManager_Type) < 0) return false;\n    if (PyModule_AddObject(module, \"GraphicsManager\", (PyObject *)&GraphicsManager_Type) != 0) return false;\n    if (PyModule_AddFunctions(module, module_methods) != 0) return false;\n    Py_INCREF(&GraphicsManager_Type);\n    return true;\n}\n// }}}\n"], "fixing_code": ["Changelog\n==============\n\n|kitty| is a feature full, cross-platform, *fast*, GPU based terminal emulator.\nTo update |kitty|, :doc:`follow the instructions <binary>`.\n\n0.19.3 [future]\n-------------------\n\n- Add a new mappable `select_tab` action to choose a tab to switch to even\n  when the tab bar is hidden (:iss:`3115`)\n\n- Distribute extra pixels among all eight-blocks rather than adding them\n  all to the last block (:iss:`3097`)\n\n- Fix drawing of a few sextant characters incorrect (:pull:`3105`)\n\n- macOS: Fix minimize not working for chromeless windows (:iss:`3112`)\n\n- Preserve lines in the scrollback if a scrolling region is defined that\n  is contiguous with the top of the screen (:iss:`3113`)\n\n- Wayland: Fix key repeat being stopped by the release of an unrelated key\n  (:iss:`2191`)\n\n- Add an option, :opt:`detect_urls` to control whether kitty will detect URLs\n  when the mouse moves over them (:pull:`3118`)\n\n- Graphics protocol: Dont return filename in the error message when opening file\n  fails, since filenames can contain control characters (:iss:`3128`)\n\n\n0.19.2 [2020-11-13]\n-------------------\n\n- A new :doc:`kittens/query_terminal` kitten to easily query the running kitty\n  via escape codes to detect its version, and the values of\n  configuration options that enable or disable terminal features.\n\n- Options to control mouse pointer shape, :opt:`default_pointer_shape`, and\n  :opt:`pointer_shape_when_dragging` (:pull:`3041`)\n\n- Font independent rendering for braille characters, which ensures they are properly\n  aligned at all font sizes.\n\n- Fix a regression in 0.19.0 that caused borders not to be drawn when setting\n  :opt:`window_margin_width` and keeping :opt:`draw_minimal_borders` on\n  (:iss:`3017`)\n\n- Fix a regression in 0.19.0 that broke rendering of one-eight bar unicode\n  characters at very small font sizes (:iss:`3025`)\n\n- Wayland: Fix a crash under GNOME when using multiple OS windows\n  (:pull:`3066`)\n\n- Fix selections created by dragging upwards not being auto-cleared when\n  screen contents change (:pull:`3028`)\n\n- macOS: Fix kitty not being added to PATH automatically when using pre-built\n  binaries (:iss:`3063`)\n\n- Allow adding MIME definitions to kitty by placing a ``mime.types`` file in\n  the kitty config directory (:iss:`3056`)\n\n- Dont ignore :option:`--title` when using a session file that defines no\n  windows (:iss:`3055`)\n\n- Fix the send_text action not working in URL handlers (:iss:`3081`)\n\n- Fix last character of URL not being detected if it is the only character on a\n  new line (:iss:`3088`)\n\n- Don't restrict the ICH,DCH,REP control codes to only the current scroll region  (:iss:`3090`, :iss:`3096`)\n\n\n0.19.1 [2020-10-06]\n-------------------\n\n- hints kitten: Add an ``ip`` type for easy selection of IP addresses\n  (:pull:`3009`)\n\n- Fix a regression that caused a segfault when using\n  :opt:`scrollback_pager_history_size` and it needs to be expanded (:iss:`3011`)\n\n- Fix update available notifications repeating (:pull:`3006`)\n\n\n0.19.0 [2020-10-04]\n-------------------\n\n- Add support for `hyperlinks from terminal programs\n  <https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda>`_.\n  Controlled via :opt:`allow_hyperlinks` (:iss:`68`)\n\n- Add support for easily editing or downloading files over SSH sessions\n  without the need for any special software, see :doc:`kittens/remote_file`\n\n- A new :doc:`kittens/hyperlinked_grep` kitten to easily search files and open\n  the results at the matched line by clicking on them.\n\n- Allow customizing the :doc:`actions kitty takes <open_actions>` when clicking on URLs\n\n- Improve rendering of borders when using minimal borders. Use less space and\n  do not display a box around active windows\n\n- Add a new extensible escape code to allow terminal programs to trigger\n  desktop notifications. See :ref:`desktop_notifications` (:iss:`1474`)\n\n- Implement special rendering for various characters from the set of \"Symbols\n  for Legacy Computing\" from the Unicode 13 standard\n\n- Unicode input kitten: Allow choosing symbols from the NERD font as well.\n  These are mostly Private Use symbols not in any standard, however are common. (:iss:`2972`)\n\n- Allow specifying border sizes in either pts or pixels. Change the default to\n  0.5pt borders as this works best with the new minimal border style\n\n- Add support for displaying correct colors with non-sRGB PNG files (Adds a\n  dependency on liblcms2)\n\n- hints kitten: Add a new :option:`kitty +kitten hints --type` of ``hyperlink`` useful\n  for activating hyperlinks using just the keyboard\n\n- Allow tracking focus change events in watchers (:iss:`2918`)\n\n- Allow specifying watchers in session files and via a command line argument\n  (:iss:`2933`)\n\n- Add a setting :opt:`tab_activity_symbol` to show a symbol in the tab title\n  if one of the windows has some activity after it was last focused\n  (:iss:`2515`)\n\n- macOS: Switch to using the User Notifications framework for notifications.\n  The current notifications framework has been deprecated in Big Sur. The new\n  framework only allows notifications from signed and notarized applications,\n  so people using kitty from homebrew/source are out of luck. Complain to\n  Apple.\n\n- When in the main screen and a program grabs the mouse, do not use the scroll\n  wheel events to scroll the scrollback buffer, instead send them to the\n  program (:iss:`2939`)\n\n- Fix unfocused windows in which a bell occurs not changing their border color\n  to red until a relayout\n\n- Linux: Fix automatic detection of bold/italic faces for fonts such as IBM\n  Plex Mono that have the regular face with a full name that is the same as the\n  family name (:iss:`2951`)\n\n- Fix a regression that broke :opt:`kitten_alias` (:iss:`2952`)\n\n- Fix a regression that broke the ``move_window_to_top`` action (:pull:`2953`)\n\n- Fix a memory leak when changing font sizes\n\n- Fix some lines in the scrollback buffer not being properly rendered after a\n  window resize/font size change (:iss:`2619`)\n\n\n0.18.3 [2020-08-11]\n-------------------\n\n- hints kitten: Allow customizing hint colors (:pull:`2894`)\n\n- Wayland: Fix a typo in the previous release that broke reading mouse cursor size (:iss:`2895`)\n\n- Fix a regression in the previous release that could cause an exception during\n  startup in rare circumstances (:iss:`2896`)\n\n- Fix image leaving behind a black rectangle when switch away and back to\n  alternate screen (:iss:`2901`)\n\n- Fix one pixel mis-alignment of rounded corners when either the cell\n  dimensions or the thickness of the line is an odd number of pixels\n  (:iss:`2907`)\n\n- Fix a regression that broke specifying OS window size in the session file\n  (:iss:`2908`)\n\n\n0.18.2 [2020-07-28]\n--------------------\n\n- X11: Improve handling of multiple keyboards. Now pressing a modifier key in\n  one keyboard and a normal key in another works (:iss:`2362`). Don't rebuild\n  keymaps on new keyboard events that only change geometry (:iss:`2787`).\n  Better handling of multiple keyboards with incompatible layouts (:iss:`2726`)\n\n- Improve anti-aliasing of triangular box drawing characters, noticeable on\n  low-resolution screens (:iss:`2844`)\n\n- Fix ``kitty @ send-text`` not working reliably when using a socket for remote\n  control (:iss:`2852`)\n\n- Implement support for box drawing rounded-corners characters (:iss:`2240`)\n\n- Allow setting the class for new OS windows in a session file\n\n- When a character from the Unicode Dingbat block is followed by a space, use\n  the extra space to render a larger version of the character (:iss:`2850`)\n\n- macOS: Fix the LC_CTYPE env var being set to UTF-8 on systems in which the\n  language and country code do not form a valid locale (:iss:`1233`)\n\n- macOS: Fix :kbd:`cmd+plus` not changing font size (:iss:`2839`)\n\n- Make neighboring window selection in grid and splits layouts more intelligent\n  (:pull:`2840`)\n\n- Allow passing the current selection to kittens (:iss:`2796`)\n\n- Fix pre-edit text not always being cleared with ibus input (:iss:`2862`)\n\n- Allow setting the :opt:`background_opacity` of new OS windows created via\n  :option:`kitty --single-instance` using the :option:`kitty --override` command line\n  argument (:iss:`2806`)\n\n- Fix the CSI J (Erase in display ED) escape code not removing line continued\n  markers (:iss:`2809`)\n\n- hints kitten: In linenumber mode expand paths that starts with ~\n  (:iss:`2822`)\n\n- Fix ``launch --location=last`` not working (:iss:`2841`)\n\n- Fix incorrect centering when a PUA or symbol glyph is followed by more than one space\n\n- Have the :opt:`confirm_os_window_close` option also apply when closing tabs\n  with multiple windows (:iss:`2857`)\n\n- Add support for legacy DECSET codes 47, 1047 and 1048 (:pull:`2871`)\n\n- macOS: no longer render emoji 20% below the baseline. This caused some emoji\n  to be cut-off and also look misaligned with very high cells (:iss:`2873`)\n\n- macOS: Make the window id of OS windows available in the ``WINDOWID``\n  environment variable (:pull:`2877`)\n\n- Wayland: Fix a regression in 0.18.0 that could cause crashes related to mouse\n  cursors in some rare circumstances (:iss:`2810`)\n\n- Fix change in window size that does not change number of cells not being\n  reported to the kernel (:iss:`2880`)\n\n\n0.18.1 [2020-06-23]\n--------------------\n\n- macOS: Fix for diff kitten not working with python 3.8 (:iss:`2780`)\n\n\n0.18.0 [2020-06-20]\n--------------------\n\n- Allow multiple overlay windows per normal window\n\n- Add an option :opt:`confirm_os_window_close` to ask for confirmation\n  when closing an OS window with multiple kitty windows.\n\n- Tall and Fat layouts: Add a ``mirrored`` option to put the full size window\n  on the opposite edge of the screen (:iss:`2654`)\n\n- Tall and Fat layouts: Add mappable actions to increase or decrease the number\n  of full size windows (:iss:`2688`)\n\n- Allow sending arbitrary signals to the current foreground process in a window\n  using either a mapping in kitty.conf or via remote control (:iss:`2778`)\n\n- Allow sending the back and forward mouse buttons to terminal applications\n  (:pull:`2742`)\n\n- **Backwards incompatibility**: The numbers used to encode mouse buttons\n  for the ``send_mouse_event`` function that can be used in kittens have\n  been changed (see :ref:`send_mouse_event`).\n\n- Add a new mappable ``quit`` action to quit kitty completely.\n\n- Fix marks using different colors with regexes using only a single color\n  (:pull:`2663`)\n\n- Linux: Workaround for broken Nvidia drivers for old cards (:iss:`456`)\n\n- Wayland: Fix kitty being killed on some Wayland compositors if a hidden window\n  has a lot of output (:iss:`2329`)\n\n- BSD: Fix controlling terminal not being established (:pull:`2686`)\n\n- Add support for the CSI REP escape code (:pull:`2702`)\n\n- Wayland: Fix mouse cursor rendering on HiDPI screens (:pull:`2709`)\n\n- X11: Recompile keymaps on XkbNewKeyboardNotify events (:iss:`2726`)\n\n- X11: Reduce startup time by ~25% by only querying GLX for framebuffer\n  configurations once (:iss:`2754`)\n\n- macOS: Notarize the kitty application bundle (:iss:`2040`)\n\n- Fix the kitty shell launched via a mapping needlessly requiring\n  :opt:`allow_remote_control` to be turned on.\n\n\n0.17.4 [2020-05-09]\n--------------------\n\n- Allow showing the name of the current layout and the number of windows\n  in tab titles (:iss:`2634`)\n\n- macOS: Fix a regression in the previous release that caused ligatures to be\n  not be centered horizontally (:iss:`2591`)\n\n- By default, double clicking no longer considers the : as part of words, see\n  :opt:`select_by_word_characters` (:iss:`2602`)\n\n- Fix a regression that caused clicking in the padding/margins of windows in\n  the stack layout to switch the window to the first window (:iss:`2604`)\n\n- macOS: Fix a regression that broke drag and drop (:iss:`2605`)\n\n- Report modifier key state when sending wheel events to the terminal program\n\n- Fix kitty @ send-text not working with text larger than 1024 bytes when using\n  :option:`kitty --listen-on` (:iss:`2607`)\n\n- Wayland: Fix OS window title not updating for hidden windows (:iss:`2629`)\n\n- Fix :opt:`background_tint` making the window semi-transparent (:iss:`2618`)\n\n\n0.17.3 [2020-04-23]\n--------------------\n\n- Allow individually setting margins and padding for each edge (left, right,\n  top, bottom). Margins can also be controlled per window via remote control\n  (:iss:`2546`)\n\n- Fix reverse video not being rendered correctly when using transparency or a\n  background image (:iss:`2419`)\n\n- Allow mapping arbitrary remote control commands to key presses in\n  :file:`kitty.conf`\n\n- X11: Fix crash when doing drag and drop from some applications (:iss:`2505`)\n\n- Fix :option:`launch --stdin-add-formatting` not working (:iss:`2512`)\n\n- Update to Unicode 13.0 (:iss:`2513`)\n\n- Render country flags designated by a pair of unicode codepoints\n  in two cells instead of four.\n\n- diff kitten: New option to control the background color for filler lines in\n  the margin (:iss:`2518`)\n\n- Fix specifying options for layouts in the startup session file not working\n  (:iss:`2520`)\n\n- macOS: Fix incorrect horizontal positioning of some full-width East Asian characters\n  (:iss:`1457`)\n\n- macOS: Render multi-cell PUA characters centered, matching behavior on other\n  platforms\n\n- Linux: Ignore keys if they are designated as layout/group/mode switch keys\n  (:iss:`2519`)\n\n- Marks: Fix marks not handling wide characters and tab characters correctly\n  (:iss:`2534`)\n\n- Add a new :opt:`listen_on` option in kitty.conf to set :option:`kitty --listen-on`\n  globally. Also allow using environment variables in this option (:iss:`2569`).\n\n- Allow sending mouse events in kittens (:pull:`2538`)\n\n- icat kitten: Fix display of 16-bit depth images (:iss:`2542`)\n\n- Add ncurses specific terminfo definitions for strikethrough (:pull:`2567`)\n\n- Fix a regression in 0.17 that broke displaying graphics over SSH\n  (:iss:`2568`)\n\n- Fix :option:`--title` not being applied at window creation time (:iss:`2570`)\n\n0.17.2 [2020-03-29]\n--------------------\n\n- Add a :option:`launch --watcher` option that allows defining callbacks\n  that are called for various events in the window's life-cycle (:iss:`2440`)\n\n- Fix a regression in 0.17 that broke drawing of borders with non-minimal\n  borders (:iss:`2474`)\n\n- Hints kitten: Allow copying to primary selection as well as clipboard\n  (:pull:`2487`)\n\n- Add a new mappable action ``close_other_windows_in_tab`` to close all but the\n  active window (:iss:`2484`)\n\n- Hints kitten: Adjust the default regex used to detect line numbers to handle\n  line+column numbers (:iss:`2268`)\n\n- Fix blank space at the start of tab bar in the powerline style when first tab is\n  inactive (:iss:`2478`)\n\n- Fix regression causing incorrect rendering of separators in tab bar when\n  defining a tab bar background color (:pull:`2480`)\n\n- Fix a regression in 0.17 that broke the kitty @ launch remote command and\n  also broke the --tab-title option when creating a new tab. (:iss:`2488`)\n\n- Linux: Fix selection of fonts with multiple width variants not preferring\n  the normal width faces (:iss:`2491`)\n\n\n0.17.1 [2020-03-24]\n--------------------\n\n- Fix :opt:`cursor_underline_thickness` not working (:iss:`2465`)\n\n- Fix a regression in 0.17 that caused tab bar background to be rendered after\n  the last tab as well (:iss:`2464`)\n\n- macOS: Fix a regression in 0.17 that caused incorrect variants to be\n  automatically selected for some fonts (:iss:`2462`)\n\n- Fix a regression in 0.17 that caused kitty @ set-colors to require setting\n  cursor_text_color (:iss:`2470`)\n\n\n0.17.0 [2020-03-24]\n--------------------\n\n- :ref:`splits_layout` to arrange windows in arbitrary splits\n  (:iss:`2308`)\n\n- Add support for specifying a background image, see :opt:`background_image`\n  (:iss:`163` and :pull:`2326`; thanks to Fredrick Brennan.)\n\n- A new :opt:`background_tint` option to darken the background under the text\n  area when using background images and/or transparent windows.\n\n- Allow selection of single cells with the mouse. Also improve mouse selection\n  to follow semantics common to most programs (:iss:`945`)\n\n- New options :opt:`cursor_beam_thickness` and :opt:`cursor_underline_thickness` to control the thickness of the\n  beam and underline cursors (:iss:`2337` and :pull:`2342`)\n\n- When the application running in the terminal grabs the mouse, pass middle\n  clicks to the application unless :opt:`terminal_select_modifiers` are\n  pressed (:iss:`2368`)\n\n- A new ``copy_and_clear_or_interrupt`` function (:iss:`2403`)\n\n- X11: Fix arrow mouse cursor using right pointing instead of the default left\n  pointing arrow (:iss:`2341`)\n\n- Allow passing the currently active kitty window id in the launch command\n  (:iss:`2391`)\n\n- unicode input kitten: Allow pressing :kbd:`ctrl+tab` to change the input mode\n  (:iss:`2343`)\n\n- Fix a bug that prevented using custom functions with the new marks feature\n  (:iss:`2344`)\n\n- Make the set of URL prefixes that are recognized while hovering with the\n  mouse configurable (:iss:`2416`)\n\n- Fix border/margin/padding sizes not being recalculated on DPI change\n  (:iss:`2346`)\n\n- diff kitten: Fix directory diffing with removed binary files failing\n  (:iss:`2378`)\n\n- macOS: Fix menubar title not updating on OS Window focus change (:iss:`2350`)\n\n- Fix rendering of combining characters with fonts that have glyphs for\n  precomposed characters but not decomposed versions (:iss:`2365`)\n\n- Fix incorrect rendering of selection when using rectangular select and\n  scrolling (:iss:`2351`)\n\n- Allow setting WM_CLASS and WM_NAME when creating new OS windows with the\n  launch command (:option:`launch --os-window-class`)\n\n- macOS: When switching input method while a pending multi-key input is in\n  progress, clear the pending input (:iss:`2358`)\n\n- Fix a regression in the previous release that broke switching to neighboring windows\n  in the Grid layout when there are less than four windows (:iss:`2377`)\n\n- Fix colors in scrollback pager off if the window has redefined terminal\n  colors using escape codes (:iss:`2381`)\n\n- Fix selection not updating properly while scrolling (:iss:`2442`)\n\n- Allow extending selections by dragging with right button pressed\n  (:iss:`2445`)\n\n- Workaround for bug in less that causes colors to reset at wrapped lines\n  (:iss:`2381`)\n\n- X11/Wayland: Allow drag and drop of text/plain in addition to text/uri-list\n  (:iss:`2441`)\n\n- Dont strip :code:`&` and :code:`-` from the end of URLs (:iss:`2436`)\n\n- Fix ``@selection`` placeholder not working with launch command (:iss:`2417`)\n\n- Drop support for python 3.5\n\n- Wayland: Fix a crash when drag and dropping into kitty (:iss:`2432`)\n\n- diff kitten: Fix images lingering as blank rectangles after the kitten quits\n  (:iss:`2449`)\n\n- diff kitten: Fix images losing position when scrolling using mouse\n  wheel/touchpad\n\n\n0.16.0 [2020-01-28]\n--------------------\n\n- A new :doc:`marks` feature that allows highlighting and scrolling to arbitrary\n  text in the terminal window.\n\n- hints kitten: Allow pressing :sc:`goto_file_line` to quickly open\n  the selected file at the selected line in vim or a configurable editor (:iss:`2268`)\n\n- Allow having more than one full height window in the :code:`tall` layout\n  (:iss:`2276`)\n\n- Allow choosing OpenType features for individual fonts via the\n  :opt:`font_features` option. (:pull:`2248`)\n\n- Wayland: Fix a freeze in rare circumstances when having multiple OS Windows\n  (:iss:`2307` and :iss:`1722`)\n\n- Wayland: Fix window titles being set to very long strings on the order of 8KB\n  causing a crash (:iss:`1526`)\n\n- Add an option :opt:`force_ltr` to turn off the display of text in RTL scripts\n  in right-to-left order (:pull:`2293`)\n\n- Allow opening new tabs/windows before the current tab/window as well as after\n  it with the :option:`launch --location` option.\n\n- Add a :opt:`resize_in_steps` option that can be used to resize the OS window\n  in steps as large as character cells (:pull:`2131`)\n\n- When triple-click+dragging to select multiple lines, extend the selection\n  of the first line to match the rest on the left (:pull:`2284`)\n\n- macOS: Add a :code:`titlebar-only` setting to\n  :opt:`hide_window_decorations` to only hide the title bar (:pull:`2286`)\n\n- Fix a segfault when using :option:`kitty --debug-config` with maps (:iss:`2270`)\n\n- ``goto_tab`` now maps numbers larger than the last tab to the last tab\n  (:iss:`2291`)\n\n- Fix URL detection not working for urls of the form scheme:///url\n  (:iss:`2292`)\n\n- When windows are semi-transparent and all contain graphics, correctly render\n  them. (:iss:`2310`)\n\n0.15.1 [2019-12-21]\n--------------------\n\n- Fix a crash/incorrect rendering when detaching a window in some circumstances\n  (:iss:`2173`)\n\n- hints kitten: Add an option :option:`kitty +kitten hints --ascending` to\n  control if the hints numbers increase or decrease from top to bottom\n\n- Fix :opt:`background_opacity` incorrectly applying to selected text and\n  reverse video text (:iss:`2177`)\n\n- Add a new option :opt:`tab_bar_background` to specify a different color\n  for the tab bar (:iss:`2198`)\n\n- Add a new option :opt:`active_tab_title_template` to specify a different\n  template for active tab titles (:iss:`2198`)\n\n- Fix lines at the edge of the window at certain windows sizes when drawing\n  images on a transparent window (:iss:`2079`)\n\n- Fix window not being rendered for the first time until some input has been\n  received from child process (:iss:`2216`)\n\n\n0.15.0 [2019-11-27]\n--------------------\n\n- Add a new action :ref:`detach_window <detach_window>` that can be used to move the current\n  window into a different tab (:iss:`1310`)\n\n- Add a new action :doc:`launch <launch>` that unifies launching of processes\n  in new kitty windows/tabs.\n\n- Add a new style ``powerline`` for tab bar rendering, see :opt:`tab_bar_style` (:pull:`2021`)\n\n- Allow changing colors by mapping a keyboard shortcut to read a kitty config\n  file with color definitions. See the :doc:`FAQ <faq>` for details\n  (:iss:`2083`)\n\n- hints kitten: Allow completely customizing the matching and actions performed\n  by the kitten using your own script (:iss:`2124`)\n\n- Wayland: Fix key repeat not being stopped when focus leaves window. This is\n  expected behavior on Wayland, apparently (:iss:`2014`)\n\n- When drawing unicode symbols that are followed by spaces, use multiple cells\n  to avoid resized or cut-off glyphs (:iss:`1452`)\n\n- diff kitten: Allow diffing remote files easily via ssh (:iss:`727`)\n\n- unicode input kitten: Add an option :option:`kitty +kitten unicode_input\n  --emoji-variation` to control the presentation variant of selected emojis\n  (:iss:`2139`)\n\n- Add specialised rendering for a few more box powerline and unicode symbols\n  (:pull:`2074` and :pull:`2021`)\n\n- Add a new socket only mode for :opt:`allow_remote_control`. This makes\n  it possible for programs running on the local machine to control kitty\n  but not programs running over ssh.\n\n- hints kitten: Allow using named groups in the regular expression. The named\n  groups are passed to the invoked program for further processing.\n\n- Fix a regression in 0.14.5 that caused rendering of private use glyphs\n  with and without spaces to be identical (:iss:`2117`)\n\n- Wayland: Fix incorrect scale used when first creating an OS window\n  (:iss:`2133`)\n\n- macOS: Disable mouse hiding by default as getting it to work robustly\n  on Cocoa is too much effort (:iss:`2158`)\n\n\n0.14.6 [2019-09-25]\n---------------------\n\n- macOS: Fix a regression in the previous release that caused a crash when\n  pressing a unprintable key, such as the POWER key (:iss:`1997`)\n\n- Fix a regression in the previous release that caused kitty to not always\n  respond to DPI changes (:pull:`1999`)\n\n\n0.14.5 [2019-09-23]\n---------------------\n\n- Implement a hack to (mostly) preserve tabs when cat-ting a file with them and then\n  copying the text or passing screen contents to another program (:iss:`1829`)\n\n- When all visible windows have the same background color, use that as the\n  color for the global padding, instead of the configured background color\n  (:iss:`1957`)\n\n- When resetting the terminal, also reset parser state, this allows easy\n  recovery from incomplete escape codes (:iss:`1961`)\n\n- Allow mapping keys commonly found on European keyboards (:pull:`1928`)\n\n- Fix incorrect rendering of some symbols when followed by a space while using\n  the PowerLine font which does not have a space glyph (:iss:`1225`)\n\n- Linux: Allow using fonts with spacing=90 in addition to fonts with\n  spacing=100 (:iss:`1968`)\n\n- Use selection foreground color for underlines as well (:iss:`1982`)\n\n0.14.4 [2019-08-31]\n---------------------\n\n- hints kitten: Add a :option:`kitty +kitten hints --alphabet` option to\n  control what alphabets are used for hints (:iss:`1879`)\n\n- hints kitten: Allow specifying :option:`kitty +kitten hints --program`\n  multiple times to run multiple programs  (:iss:`1879`)\n\n- Add a :opt:`kitten_alias` option that can be used to alias kitten invocation\n  for brevity and to change kitten option defaults globally (:iss:`1879`)\n\n- macOS: Add an option :opt:`macos_show_window_title_in` to control\n  showing the window title in the menubar/titlebar (:pull:`1837`)\n\n- macOS: Allow drag and drop of text from other applications into kitty\n  (:pull:`1921`)\n\n- When running kittens, use the colorscheme of the current window\n  rather than the configured colorscheme (:iss:`1906`)\n\n- Don't fail to start if running the shell to read the EDITOR env var fails\n  (:iss:`1869`)\n\n- Disable the ``liga`` and ``dlig`` OpenType features for broken fonts\n  such as Nimbus Mono.\n\n- Fix a regression that broke setting background_opacity via remote control\n  (:iss:`1895`)\n\n- Fix piping PNG images into the icat kitten not working (:iss:`1920`)\n\n- When the OS returns a fallback font that does not actually contain glyphs\n  for the text, do not exhaust the list of fallback fonts (:iss:`1918`)\n\n- Fix formatting attributes not reset across line boundaries when passing\n  buffer as ANSI (:iss:`1924`)\n\n\n0.14.3 [2019-07-29]\n---------------------\n\n- Remote control: Add a command `kitty @ scroll-window` to scroll windows\n\n- Allow passing a ``!neighbor`` argument to the new_window mapping to open a\n  new window next to the active window (:iss:`1746`)\n\n- Document the kitty remote control protocol (:iss:`1646`)\n\n- Add a new option :opt:`pointer_shape_when_grabbed` that allows you to control\n  the mouse pointer shape when the terminal programs grabs the pointer\n  (:iss:`1808`)\n\n- Add an option :opt:`terminal_select_modifiers` to control which modifiers\n  are used to override mouse selection even when a terminal application has\n  grabbed the mouse (:iss:`1774`)\n\n- When piping data to a child in the pipe command do it in a thread so as not\n  to block the UI (:iss:`1708`)\n\n- unicode_input kitten: Fix a regression that broke using indices to select\n  recently used symbols.\n\n- Fix a regression that caused closing an overlay window to focus\n  the previously focused window rather than the underlying window (:iss:`1720`)\n\n- macOS: Reduce energy consumption when idle by shutting down Apple's display\n  link thread after 30 second of inactivity (:iss:`1763`)\n\n- Linux: Fix incorrect scaling for fallback fonts when the font has an\n  underscore that renders out of bounds (:iss:`1713`)\n\n- macOS: Fix finding fallback font for private use unicode symbols not working\n  reliably (:iss:`1650`)\n\n- Fix an out of bounds read causing a crash when selecting text with the mouse\n  in the alternate screen mode (:iss:`1578`)\n\n- Linux: Use the system \"bell\" sound for the terminal bell. Adds libcanberra\n  as a new dependency to play the system sound.\n\n- macOS: Fix a rare deadlock causing kitty to hang (:iss:`1779`)\n\n- Linux: Fix a regression in 0.14.0 that caused the event loop to tick\n  continuously, wasting CPU even when idle (:iss:`1782`)\n\n- ssh kitten: Make argument parsing more like ssh (:iss:`1787`)\n\n- When using :opt:`strip_trailing_spaces` do not remove empty lines\n  (:iss:`1802`)\n\n- Fix a crash when displaying very large number of images (:iss:`1825`)\n\n\n0.14.2 [2019-06-09]\n---------------------\n\n- Add an option :opt:`placement_strategy` to control how the cell area is\n  aligned inside the window when the window size is not an exact multiple\n  of the cell size (:pull:`1670`)\n\n- hints kitten: Add a :option:`kitty +kitten hints --multiple-joiner` option to\n  control how multiple selections are serialized when copying to clipboard\n  or inserting into the terminal. You can have them on separate lines,\n  separated by arbitrary characters, or even serialized as JSON (:iss:`1665`)\n\n- macOS: Fix a regression in the previous release that broke using\n  :kbd:`ctrl+shift+tab` (:iss:`1671`)\n\n- panel kitten: Fix the contents of the panel kitten not being positioned\n  correctly on the vertical axis\n\n- icat kitten: Fix a regression that broke passing directories to icat\n  (:iss:`1683`)\n\n- clipboard kitten: Add a :option:`kitty +kitten clipboard --wait-for-completion`\n  option to have the kitten wait till copying to clipboard is complete\n  (:iss:`1693`)\n\n- Allow using the :doc:`pipe <pipe>` command to send screen and scrollback\n  contents directly to the clipboard (:iss:`1693`)\n\n- Linux: Disable the Wayland backend on GNOME by default as GNOME has no\n  support for server side decorations. Can be controlled by\n  :opt:`linux_display_server`.\n\n- Add an option to control the default :opt:`update_check_interval` when\n  building kitty packages\n\n- Wayland: Fix resizing the window on a compositor that does not provide\n  server side window decorations, such a GNOME or Weston not working\n  correctly (:iss:`1659`)\n\n- Wayland: Fix crash when enabling disabling monitors on sway (:iss:`1696`)\n\n\n0.14.1 [2019-05-29]\n---------------------\n\n- Add an option :opt:`command_on_bell` to run an arbitrary command when\n  a bell occurs (:iss:`1660`)\n\n- Add a shortcut to toggle maximized window state :sc:`toggle_maximized`\n\n- Add support for the underscore key found in some keyboard layouts\n  (:iss:`1639`)\n\n- Fix a missing newline when using the pipe command between the\n  scrollback and screen contents (:iss:`1642`)\n\n- Fix colors not being preserved when using the pipe command with\n  the pager history buffer (:pull:`1657`)\n\n- macOS: Fix a regression that could cause rendering of a kitty window\n  to occasionally freeze in certain situations, such as moving it between\n  monitors or transitioning from/to fullscreen (:iss:`1641`)\n\n- macOS: Fix a regression that caused :kbd:`cmd+v` to double up in the dvorak\n  keyboard layout (:iss:`1652`)\n\n- When resizing and only a single window is present in the current layout,\n  use that window's background color to fill in the blank areas.\n\n- Linux: Automatically increase cell height if the font being used is broken\n  and draws the underscore outside the bounding box (:iss:`690`)\n\n- Wayland: Fix maximizing the window on a compositor that does not provide\n  server side window decorations, such a GNOME or Weston not working\n  (:iss:`1662`)\n\n\n0.14.0 [2019-05-24]\n---------------------\n\n- macOS: The default behavior of the Option key has changed. It now generates\n  unicode characters rather than acting as the :kbd:`Alt` modifier. See\n  :opt:`macos_option_as_alt`.\n\n- Support for an arbitrary number of internal clipboard buffers to copy/paste\n  from, see (:ref:`cpbuf`)\n\n- Allow using the new private internal clipboard buffers with the\n  :opt:`copy_on_select` option (:iss:`1390`)\n\n- macOS: Allow opening new kitty tabs/top-level windows from Finder\n  (:pull:`1350`)\n\n- Add an option :opt:`disable_ligatures` to disable\n  multi-character ligatures under the cursor to make editing easier\n  or disable them completely (:iss:`461`)\n\n- Allow creating new OS windows in session files (:iss:`1514`)\n\n- Allow setting OS window size in session files\n\n- Add an option :opt:`tab_switch_strategy` to control which\n  tab becomes active when the current tab is closed (:pull:`1524`)\n\n- Allow specifying a value of ``none`` for the :opt:`selection_foreground`\n  which will cause kitty to not change text color in selections (:iss:`1358`)\n\n- Make live resizing of OS windows smoother and add an option\n  :opt:`resize_draw_strategy` to control what is drawn while a\n  resize is in progress.\n\n- macOS: Improve handling of IME extended input. Compose characters\n  are now highlighted and the IME panel moves along with the text\n  (:pull:`1586`). Also fixes handling of delete key in Chinese IME\n  (:iss:`1461`)\n\n- When a window is closed, switch focus to the previously active window (if\n  any) instead of picking the previous window in the layout (:iss:`1450`)\n\n- icat kitten: Add support for displaying images at http(s) URLs (:iss:`1340`)\n\n- A new option :opt:`strip_trailing_spaces` to optionally remove trailing\n  spaces from lines when copying to clipboard.\n\n- A new option :opt:`tab_bar_min_tabs` to control how many tabs must be\n  present before the tab-bar is shown (:iss:`1382`)\n\n- Automatically check for new releases and notify when an update is available,\n  via the system notification facilities. Can be controlled by\n  :opt:`update_check_interval` (:iss:`1342`)\n\n- macOS: Fix :kbd:`cmd+period` key not working (:iss:`1318`)\n\n- macOS: Add an option `macos_show_window_title_in_menubar` to not\n  show the current window title in the menu-bar (:iss:`1066`)\n\n- macOS: Workaround for cocoa bug that could cause the mouse cursor to become\n  hidden in other applications in rare circumstances (:iss:`1218`)\n\n- macOS: Allow assigning only the left or right :kbd:`Option` key to work as the\n  :kbd:`Alt` key. See :opt:`macos_option_as_alt` for details (:iss:`1022`)\n\n- Fix using remote control to set cursor text color causing errors when\n  creating new windows (:iss:`1326`)\n\n- Fix window title for minimized windows not being updated (:iss:`1332`)\n\n- macOS: Fix using multi-key sequences to input text ignoring the\n  first few key presses if the sequence is aborted (:iss:`1311`)\n\n- macOS: Add a number of common macOS keyboard shortcuts\n\n- macOS: Reduce energy consumption by not rendering occluded windows\n\n- Fix scrollback pager history not being cleared when clearing the\n  main scrollback buffer (:iss:`1387`)\n\n- macOS: When closing a top-level window only switch focus to the previous kitty\n  window if it is on the same workspace (:iss:`1379`)\n\n- macOS: Fix :opt:`sync_to_monitor` not working on Mojave.\n\n- macOS: Use the system cursor blink interval by default\n  :opt:`cursor_blink_interval`.\n\n- Wayland: Use the kitty Wayland backend by default. Can be switched back\n  to using XWayland by setting the environment variable:\n  ``KITTY_DISABLE_WAYLAND=1``\n\n- Add a ``no-append`` setting to :opt:`clipboard_control` to disable\n  the kitty copy concatenation protocol extension for OSC 52.\n\n- Update to using the Unicode 12 standard\n\n- Unicode input kitten: Allow using the arrow keys in code mode to go to next\n  and previous unicode symbol.\n\n- macOS: Fix specifying initial window size in cells not working correctly on\n  Retina screens (:iss:`1444`)\n\n- Fix a regression in version 0.13.0 that caused background colors of space\n  characters after private use unicode characters to not be respected\n  (:iss:`1455`)\n\n- Only update the selected text to clipboard when the selection is finished,\n  not continuously as it is updated. (:iss:`1460`)\n\n- Allow setting :opt:`active_border_color` to ``none`` to not draw a border\n  around the active window (:iss:`805`)\n\n- Use negative values for :opt:`mouse_hide_wait` to hide the mouse cursor\n  immediately when pressing a key (:iss:`1534`)\n\n- When encountering errors in :file:`kitty.conf` report them to the user\n  instead of failing to start.\n\n- Allow the user to control the resize debounce time via\n  :opt:`resize_debounce_time`.\n\n- Remote control: Make the :ref:`at_set-font-size` command more capable.\n  It can now increment font size and reset it. It also only acts on the\n  active top-level window, by default (:iss:`1581`)\n\n- When launching child processes set the :code:`PWD` environment variable\n  (:iss:`1595`)\n\n- X11: use the window manager's native full-screen implementation when\n  making windows full-screen (:iss:`1605`)\n\n- Mouse selection: When extending by word, fix extending selection to non-word\n  characters not working well (:iss:`1616`)\n\n0.13.3 [2019-01-19]\n------------------------------\n\n- icat kitten: Add a ``--stdin`` option to control if image data is read from\n  STDIN (:iss:`1308`)\n\n- hints kitten: Start hints numbering at one instead of zero by default. Added\n  an option ``--hints-offset`` to control it. (:iss:`1289`)\n\n- Fix a regression in the previous release that broke using ``background`` for\n  :opt:`cursor_text_color` (:iss:`1288`)\n\n- macOS: Fix dragging kitty window tabs in traditional full screen mode causing\n  crashes (:iss:`1296`)\n\n- macOS: Ensure that when running from a bundle, the bundle kitty exe is\n  preferred over any kitty in PATH (:iss:`1280`)\n\n- macOS: Fix a regression that broke mapping of :kbd:`ctrl+tab` (:iss:`1304`)\n\n- Add a list of user-created kittens to the docs\n\n- Fix a regression that broke changing mouse wheel scroll direction with\n  negative :opt:`wheel_scroll_multiplier` values in full-screen applications\n  like vim (:iss:`1299`)\n\n- Fix :opt:`background_opacity` not working with pure white backgrounds\n  (:iss:`1285`)\n\n- macOS: Fix \"New OS Window\" dock action not working when kitty is not focused\n  (:iss:`1312`)\n\n- macOS: Add aliases for close window and new tab actions that conform to common\n  Apple shortcuts for these actions (:iss:`1313`)\n\n- macOS: Fix some kittens causing 100% CPU usage\n\n\n0.13.2 [2019-01-04]\n------------------------------\n\n- Add a new option :opt:`tab_title_template` to control how tab titles\n  are formatted. In particular the template can be used to display\n  the tab number next to the title (:iss:`1223`)\n\n- Report the current foreground processes as well as the original child process,\n  when using `kitty @ ls`\n\n- Use the current working directory of the foreground process for the\n  `*_with_cwd` actions that open a new window with the current working\n  directory.\n\n- Add a new ``copy_or_interrupt`` action that can be mapped to kbd:`ctrl+c`. It\n  will copy if there is a selection and interrupt otherwise (:iss:`1286`)\n\n- Fix setting :opt:`background_opacity` causing window margins/padding to be slightly\n  different shade from background (:iss:`1221`)\n\n- Handle keyboards with a \"+\" key (:iss:`1224`)\n\n- Fix Private use Unicode area characters followed by spaces at the end of text\n  not being rendered correctly (:iss:`1210`)\n\n- macOS: Add an entry to the dock menu to open a new OS window (:iss:`1242`)\n\n- macOS: Fix scrolling very slowly with wheel mice not working (:iss:`1238`)\n\n- Fix changing :opt:`cursor_text_color` via remote control not working\n  (:iss:`1229`)\n\n- Add an action to resize windows that can be mapped to shortcuts in :file:`kitty.conf`\n  (:pull:`1245`)\n\n- Fix using the ``new_tab !neighbor`` action changing the order of the\n  non-neighboring tabs (:iss:`1256`)\n\n- macOS: Fix momentum scrolling continuing when changing the active window/tab\n  (:iss:`1267`)\n\n\n0.13.1 [2018-12-06]\n------------------------------\n\n- Fix passing input via the pipe action to a program without a window not\n  working.\n\n- Linux: Fix a regression in the previous release that caused automatic\n  selection of bold/italic fonts when using aliases such as \"monospace\" to not\n  work (:iss:`1209`)\n\n- Fix resizing window smaller and then restoring causing some wrapped lines to not\n  be properly unwrapped (:iss:`1206`)\n\n0.13.0 [2018-12-05]\n------------------------------\n\n- Add an option :opt:`scrollback_pager_history_size` to tell kitty to store\n  extended scrollback to use when viewing the scrollback buffer in a pager\n  (:iss:`970`)\n\n- Modify the kittens sub-system to allow creating custom kittens without any\n  user interface. This is useful for creating more complex actions that can\n  be bound to key presses in :file:`kitty.conf`. See\n  doc:`kittens/custom`. (:iss:`870`)\n\n- Add a new ``nth_window`` action that can be used to go to the nth window and\n  also previously active windows, using negative numbers. Similarly,\n  ``goto_tab`` now accepts negative numbers to go to previously active tabs\n  (:iss:`1040`)\n\n- Allow hiding the tab bar completely, by setting :opt:`tab_bar_style` to\n  ``hidden``. (:iss:`1014`)\n\n- Allow private use unicode characters to stretch over more than a single\n  neighboring space (:pull:`1036`)\n\n- Add a new :opt:`touch_scroll_multiplier` option to modify the amount\n  scrolled by high precision scrolling devices such as touchpads (:pull:`1129`)\n\n- icat kitten: Implement reading image data from STDIN, if STDIN is not\n  connected to a terminal (:iss:`1130`)\n\n- hints kitten: Insert trailing spaces after matches when using the\n  ``--multiple`` option. Also add a separate ``--add-trailing-space``\n  option to control this behavior (:pull:`1132`)\n\n- Fix the ``*_with_cwd`` actions using the cwd of the overlay window rather\n  than the underlying window's cwd (:iss:`1045`)\n\n- Fix incorrect key repeat rate on wayland (:pull:`1055`)\n\n- macOS: Fix drag and drop of files not working on Mojave (:iss:`1058`)\n\n- macOS: Fix IME input for East Asian languages (:iss:`910`)\n\n- macOS: Fix rendering frames-per-second very low when processing\n  large amounts of input in small chunks (:pull:`1082`)\n\n- macOS: Fix incorrect text sizes calculated when using an external display\n  that is set to mirror the main display (:iss:`1056`)\n\n- macOS: Use the system default double click interval (:pull:`1090`)\n\n- macOS: Fix touch scrolling sensitivity low on retina screens (:iss:`1112`)\n\n- Linux: Fix incorrect rendering of some fonts when hinting is disabled at\n  small sizes (:iss:`1173`)\n\n- Linux: Fix match rules used as aliases in Fontconfig configuration not being\n  respected (:iss:`1085`)\n\n- Linux: Fix a crash when using the GNU Unifont as a fallback font\n  (:iss:`1087`)\n\n- Wayland: Fix copying from hidden kitty windows hanging (:iss:`1051`)\n\n- Wayland: Add support for the primary selection protocol\n  implemented by some compositors (:pull:`1095`)\n\n- Fix expansion of env vars not working in the :opt:`env` directive\n  (:iss:`1075`)\n\n- Fix :opt:`mouse_hide_wait` only taking effect after an event such as cursor\n  blink or key press (:iss:`1073`)\n\n- Fix the ``set_background_opacity`` action not working correctly\n  (:pull:`1147`)\n\n- Fix second cell of emoji created using variation selectors not having\n  the same attributes as the first cell (:iss:`1109`)\n\n- Fix focusing neighboring windows in the grid layout with less than 4 windows\n  not working (:iss:`1115`)\n\n- Fix :kbd:`ctrl+shift+special` key not working in normal and application keyboard\n  modes (:iss:`1114`)\n\n- Add a terminfo entry for full keyboard mode.\n\n- Fix incorrect text-antialiasing when using very low background opacity\n  (:iss:`1005`)\n\n- When double or triple clicking ignore clicks if they are \"far\" from each\n  other (:iss:`1093`)\n\n- Follow xterm's behavior for the menu key (:iss:`597`)\n\n- Fix hover detection of URLs not working when hovering over the first colon\n  and slash characters in short URLs (:iss:`1201`)\n\n0.12.3 [2018-09-29]\n------------------------------\n\n- macOS: Fix kitty window not being rendered on macOS Mojave until the window is\n  moved or resized at least once (:iss:`887`)\n\n- Unicode input: Fix an error when searching for the string 'fir' (:iss:`1035`)\n\n\n0.12.2 [2018-09-24]\n------------------------------\n\n- A new ``last_used_layout`` function that can be mapped to a shortcut to\n  switch to the previously used window layout (:iss:`870`)\n\n- New ``neighboring_window`` and ``move_window`` functions to switch to\n  neighboring windows in the current layout, and move them around, similar to\n  window movement in vim (:iss:`916`)\n\n- A new ``pipe`` function that can be used to pipe the contents of the screen\n  and scrollback buffer to any desired program running in a new window, tab or\n  overlay window. (:iss:`933`)\n\n- Add a new :option:`kitty --start-as` command line flag to start kitty\n  full-screen/maximized/minimized. This replaces the ``--start-in-fullscreen``\n  flag introduced in the previous release (:iss:`935`)\n\n- When mapping the ``new_tab`` action allow specifying that the tab should open\n  next to the current tab instead of at the end of the tabs list (:iss:`979`)\n\n- macOS: Add a new :opt:`macos_thicken_font` to make text rendering\n  on macs thicker, which makes it similar to the result of\n  sub-pixel antialiasing (:pull:`950`)\n\n- macOS: Add an option :opt:`macos_traditional_fullscreen` to make\n  full-screening of kitty windows much faster, but less pretty. (:iss:`911`)\n\n- Fix a bug causing incorrect line ordering when viewing the scrollback buffer\n  if the scrollback buffer is full (:iss:`960`)\n\n- Fix drag-scrolling not working when the mouse leaves the window confines\n  (:iss:`917`)\n\n- Workaround for broken editors like nano that cannot handle newlines in pasted text\n  (:iss:`994`)\n\n- Linux: Ensure that the python embedded in the kitty binary build uses\n  UTF-8 mode to process command-line arguments (:iss:`924`)\n\n- Linux: Handle fonts that contain monochrome bitmaps (such as the Terminus TTF\n  font) (:pull:`934`)\n\n- Have the :option:`kitty --title` flag apply to all windows created\n  using :option:`kitty --session` (:iss:`921`)\n\n- Revert change for backspacing of wide characters in the previous release,\n  as it breaks backspacing in some wide character aware programs (:iss:`875`)\n\n- Fix kitty @set-colors not working for tab backgrounds when using the `fade` tabbar style\n  (:iss:`937`)\n\n- macOS: Fix resizing semi-transparent windows causing the windows to be\n  invisible during the resize (:iss:`941`)\n\n- Linux: Fix window icon not set on X11 for the first OS window (:iss:`961`)\n\n- macOS: Add an :opt:`macos_custom_beam_cursor` option to use a special\n  mouse cursor image that can be seen on both light and dark backgrounds\n  (:iss:`359`)\n\n- Remote control: Fix the ``focus_window`` command not focusing the\n  top-level OS window of the specified kitty window (:iss:`1003`)\n\n- Fix using :opt:`focus_follows_mouse` causing text selection with the\n  mouse to malfunction when using multiple kitty windows (:iss:`1002`)\n\n0.12.1 [2018-09-08]\n------------------------------\n\n- Add a new ``--start-in-fullscreen`` command line flag to start\n  kitty in full screen mode (:iss:`856`)\n\n- macOS: Fix a character that cannot be rendered in any font causing\n  font fallback for all subsequent characters that cannot be rendered in the\n  main font to fail (:iss:`799`)\n\n- Linux: Do not enable IME input via ibus unless the ``GLFW_IM_MODULE=ibus``\n  environment variable is set. IME causes key processing latency and even\n  missed keystrokes for many people, so it is now off by default.\n\n- Fix backspacing of wide characters in wide-character unaware programs not working (:iss:`875`)\n\n- Linux: Fix number pad arrow keys not working when Numlock is off (:iss:`857`)\n\n- Wayland: Implement support for clipboard copy/paste (:iss:`855`)\n\n- Allow mapping shortcuts using the raw key code from the OS (:iss:`848`)\n\n- Allow mapping of individual key-presses without modifiers as shortcuts\n\n- Fix legacy invocation of icat as `kitty icat` not working (:iss:`850`)\n\n- Improve rendering of wavy underline at small font sizes (:iss:`853`)\n\n- Fix a regression in 0.12.0 that broke dynamic resizing of layouts (:iss:`860`)\n\n- Wayland: Allow using the :option:`kitty --class` command line flag\n  to set the app id (:iss:`862`)\n\n- Add completion of the kitty command for the fish shell (:pull:`829`)\n\n- Linux: Fix XCompose rules with no defined symbol not working (:iss:`880`)\n\n- Linux: Fix crash with some Nvidia drivers when creating tabs in the first\n  top level-window after creating a second top-level window. (:iss:`873`)\n\n- macOS: Diff kitten: Fix syntax highlighting not working because of\n  a bug in the 0.12.0 macOS package\n\n0.12.0 [2018-09-01]\n------------------------------\n\n- Preserve the mouse selection even when the contents of the screen are\n  scrolled or overwritten provided the new text does not intersect the\n  selected lines.\n\n- Linux: Implement support for Input Method Extensions (multilingual input\n  using standard keyboards) via `IBus\n  <https://github.com/ibus/ibus/wiki/ReadMe>`_ (:iss:`469`)\n\n- Implement completion for the kitty command in bash and zsh. See\n  :ref:`completion`.\n\n- Render the text under the cursor in a fixed color, configurable via\n  the option :opt:`cursor_text_color` (:iss:`126`)\n\n- Add an option :opt:`env` to set environment variables in child processes\n  from kitty.conf\n\n- Add an action to the ``clear_terminal`` function to scroll the screen\n  contents into the scrollback buffer (:iss:`1113`)\n\n- Implement high precision scrolling with the trackpad on platforms such as\n  macOS and Wayland that implement it. (:pull:`819`)\n\n- macOS: Allow scrolling window contents using mouse wheel/trackpad even when the\n  window is not the active window (:iss:`729`)\n\n- Remote control: Allow changing the current window layout with a new\n  :ref:`at_goto-layout` command (:iss:`845`)\n\n- Remote control: Allow matching windows by the environment variables of their\n  child process as well\n\n- Allow running kittens via the remote control system (:iss:`738`)\n\n- Allow enabling remote control in only some kitty windows\n\n- Add a keyboard shortcut to reset the terminal (:sc:`reset_terminal`). It\n  takes parameters so you can define your own shortcuts to clear the\n  screen/scrollback also (:iss:`747`)\n\n- Fix one-pixel line appearing at window edges at some window sizes when\n  displaying images with background opacity enabled (:iss:`741`)\n\n- diff kitten: Fix error when right hand side file is binary and left hand side\n  file is text (:pull:`752`)\n\n- kitty @ new-window: Add a new option :option:`kitty @ new-window --window-type`\n  to create top-level OS windows (:iss:`770`)\n\n- macOS: The :opt:`focus_follows_mouse` option now also works across top-level kitty OS windows\n  (:iss:`754`)\n\n- Fix detection of URLs in HTML source code (URLs inside quotes) (:iss:`785`)\n\n- Implement support for emoji skin tone modifiers (:iss:`787`)\n\n- Round-trip the zwj unicode character. Rendering of sequences containing zwj\n  is still not implemented, since it can cause the collapse of an unbounded\n  number of characters into a single cell. However, kitty at least preserves\n  the zwj by storing it as a combining character.\n\n- macOS: Disable the custom mouse cursor. Using a custom cursor fails on dual\n  GPU machines. I give up, Apple users will just have to live with the\n  limitations of their choice of OS. (:iss:`794`)\n\n- macOS: Fix control+tab key combination not working (:iss:`801`)\n\n- Linux: Fix slow startup on some systems caused by GLFW searching for\n  joysticks. Since kitty does not use joysticks, disable joystick support.\n  (:iss:`830`)\n\n\n0.11.3 [2018-07-10]\n------------------------------\n\n- Draw only the minimum borders needed for inactive windows. That is only the borders\n  that separate the inactive window from a neighbor. Note that setting\n  a non-zero window margin overrides this and causes all borders to be drawn.\n  The old behavior of drawing all borders can be restored via the\n  :opt:`draw_minimal_borders` setting in kitty.conf. (:iss:`699`)\n\n- macOS: Add an option :opt:`macos_window_resizable` to control if kitty\n  top-level windows are resizable using the mouse or not (:iss:`698`)\n\n- macOS: Use a custom mouse cursor that shows up well on both light and dark backgrounds\n  (:iss:`359`)\n\n- macOS: Workaround for switching from fullscreen to windowed mode with the\n  titlebar hidden causing window resizing to not work. (:iss:`711`)\n\n- Fix triple-click to select line not working when the entire line is filled\n  (:iss:`703`)\n\n- When dragging to select with the mouse \"grab\" the mouse so that if it strays\n  into neighboring windows, the selection is still updated (:pull:`624`)\n\n- When clicking in the margin/border area of a window, map the click to the\n  nearest cell in the window. Avoids selection with the mouse failing when\n  starting the selection just outside the window.\n\n- When drag-scrolling stop the scroll when the mouse button is released.\n\n- Fix a regression in the previous release that caused pasting large amounts\n  of text to be duplicated (:iss:`709`)\n\n\n0.11.2 [2018-07-01]\n------------------------------\n\n- Linux: Allow using XKB key names to bind shortcuts to keys not supported by GLFW (:pull:`665`)\n\n- kitty shell: Ignore failure to read readline history file. Happens if the\n  user migrates their kitty cache directory between systems with incompatible\n  readline implementations.\n\n- macOS: Fix an error in remote control when using --listen-on (:iss:`679`)\n\n- hints kitten: Add a :option:`kitty +kitten hints --multiple` option to select\n  multiple items (:iss:`687`)\n\n- Fix pasting large amounts of text very slow (:iss:`682`)\n\n- Add an option :opt:`single_window_margin_width` to allow different margins\n  when only a single window is visible in the layout (:iss:`688`)\n\n- Add a :option:`kitty --hold` command line option to stay open after the child process exits (:iss:`667`)\n\n- diff kitten: When triggering a search scroll to the first match automatically\n\n- :option:`kitty --debug-font-fallback` also prints out what basic fonts were matched\n\n- When closing a kitty window reset the mouse cursor to its default shape and ensure it is visible (:iss:`655`).\n\n- Remote control: Speed-up reading of command responses\n\n- Linux installer: Fix installer failing on systems with python < 3.5\n\n- Support \"-T\" as an alias for \"--title\" (:pull:`659`)\n\n- Fix a regression in the previous release that broke using :option:`kitty\n  --debug-config` with custom key mappings (:iss:`695`)\n\n\n0.11.1 [2018-06-17]\n------------------------------\n\n- diff kitten: Implement searching for text in the diff (:iss:`574`)\n\n- Add an option :opt:`startup_session` to :file:`kitty.conf` to specify a\n  default startup session (:iss:`641`)\n\n- Add a command line option :option:`kitty --wait-for-single-instance-window-close`\n  to make :option:`kitty --single-instance` wait for the closing of the newly opened\n  window before quitting (:iss:`630`)\n\n- diff kitten: Allow theming the selection background/foreground as well\n\n- diff kitten: Display CRLF line endings using the unicode return symbol\n  instead of <d> as it is less intrusive (:iss:`638`)\n\n- diff kitten: Fix default foreground/background colors not being restored when\n  kitten quits (:iss:`637`)\n\n- Fix :option:`kitty @ set-colors --all` not working when more than one window\n  present (:iss:`632`)\n\n- Fix a regression that broke the legacy increase/decrease_font_size actions\n\n- Clear scrollback on reset (:iss:`631`)\n\n\n0.11.0 [2018-06-12]\n------------------------------\n\n- A new tab bar style \"fade\" in which each tab's edges fade into the background.\n  See :opt:`tab_bar_style` and :opt:`tab_fade` for details. The old look can be\n  restored by setting :opt:`tab_bar_style` to :code:`separator`.\n\n- :doc:`Pre-compiled binaries <binary>` with all bundled dependencies for Linux\n  (:iss:`595`)\n\n- A :doc:`new kitten <kittens/panel>` to create dock panels on X11 desktops\n  showing the output from arbitrary terminal programs.\n\n- Reduce data sent to the GPU per render by 30% (:commit:`8dea5b3`)\n\n- Implement changing the font size for individual top level (OS) windows\n  (:iss:`408`)\n\n- When viewing the scrollback in less using :sc:`show_scrollback` and kitty\n  is currently scrolled, position the scrollback in less to match kitty's\n  scroll position. (:iss:`148`)\n\n- ssh kitten: Support all SSH options. It can now be aliased directly to ssh\n  for convenience. (:pull:`591`)\n\n- icat kitten: Add :option:`kitty +kitten icat --print-window-size` to easily\n  detect the window size in pixels from scripting languages (:iss:`581`)\n\n- hints kitten: Allow selecting hashes from the terminal with\n  :sc:`insert_selected_hash` useful for git commits. (:pull:`604`)\n\n- Allow specifying initial window size in number of cells in addition to pixels\n  (:iss:`436`)\n\n- Add a setting to control the margins to the left and right of the tab-bar\n  (:iss:`584`)\n\n- When closing a tab switch to the last active tab instead of the right-most\n  tab (:iss:`585`)\n\n- Wayland: Fix kitty not starting when using wl_roots based compositors\n  (:iss:`157`)\n\n- Wayland: Fix mouse wheel/touchpad scrolling in opposite direction to other apps (:iss:`594`)\n\n- macOS: Fix the new OS window keyboard shortcut (:sc:`new_os_window`) not\n  working if no kitty window currently has focus. (:iss:`524`)\n\n- macOS: Keep kitty running even when the last window is closed. This is in\n  line with how applications are supposed to behave on macOS (:iss:`543`).\n  There is a new option (:opt:`macos_quit_when_last_window_closed`) to control\n  this.\n\n- macOS: Add macOS standard shortcuts for copy, paste and new OS window\n  (\u2318+C, \u2318+V, \u2318+N)\n\n- Add a config option (:opt:`editor`) to set the EDITOR kitty uses (:iss:`580`)\n\n- Add a config option (``x11_hide_window_decorations``) to hide window\n  decorations under X11/Wayland (:iss:`607`)\n\n- Add an option to @set-window-title to make the title change non-permanent\n  (:iss:`592`)\n\n- Add support for the CSI t escape code to query window and cell sizes\n  (:iss:`581`)\n\n- Linux: When using layouts that map the keys to non-ascii characters,\n  map shortcuts using the ascii equivalents, from the default layout.\n  (:iss:`606`)\n\n- Linux: Fix fonts not being correctly read from TrueType Collection\n  (.ttc) files (:iss:`577`)\n\n- Fix :opt:`inactive_text_alpha` also applying to the tab bar (:iss:`612`)\n\n- :doc:`hints kitten <kittens/hints>`: Fix a regression that caused some blank lines to be not\n  be displayed.\n\n- Linux: Include a man page and the HTML docs when building the linux-package\n\n- Remote control: Fix kitty @ sometimes failing to read the response from\n  kitty. (:iss:`614`)\n\n- Fix `kitty @ set-colors` not working with the window border colors.\n  (:iss:`623`)\n\n- Fix a regression in 0.10 that caused incorrect rendering of the status bar in\n  irssi when used inside screen. (:iss:`621`)\n\n\n0.10.1 [2018-05-24]\n------------------------------\n\n- Add a kitten to easily ssh into servers that automatically copies the\n  terminfo files over. ``kitty +kitten ssh myserver``.\n\n- diff kitten: Make the keyboard shortcuts configurable (:iss:`563`)\n\n- Allow controlling *background_opacity* via either keyboard shortcuts or\n  remote control. Note that you must set *dynamic_background_opacity yes* in\n  kitty.conf first. (:iss:`569`)\n\n- diff kitten: Add keybindings to scroll by page\n\n- diff kitten: Fix incorrect syntax highlighting for a few file formats such as\n  yaml\n\n- macOS: Fix regression that caused the *macos_option_as_alt* setting to always\n  be disabled for all OS windows in a kitty instance after the first window\n  (:iss:`571`)\n\n- Fix Ctrl+Alt+Space not working in normal and application keyboard modes\n  (:iss:`562`)\n\n\n0.10.0 [2018-05-21]\n------------------------------\n\n- A diff kitten to show side-by-side diffs with syntax highlighting and support\n  for images. See :doc:`diff kitten <kittens/diff>`.\n\n- Make windows in the various kitty layouts manually resizable. See\n  :ref:`layouts` for details.\n\n- Implement support for the SGR *faint* escape code to make text blend\n  into the background (:iss:`446`).\n\n- Make the hints kitten a little smarter (:commit:`ad1109b`)\n  so that URLs that stretch over multiple lines are detected. Also improve\n  detection of surrounding brackets/quotes.\n\n- Make the kitty window id available as the environment variable\n  ``KITTY_WINDOW_ID`` (:iss:`532`).\n\n- Add a \"fat\" layout that is similar to the \"tall\" layout but vertically\n  oriented.\n\n- Expand environment variables in config file include directives\n\n- Allow programs running in kitty to read/write from the clipboard (:commit:`889ca77`).\n  By default only writing is allowed. This feature is supported in many\n  terminals, search for `OSC 52 clipboard` to find out more about using it.\n\n- Fix moving cursor outside a defined page area incorrectly causing the cursor\n  to be placed inside the page area. Caused incorrect rendering in neovim, in\n  some situations (:iss:`542`).\n\n- Render a couple more powerline symbols directly, bypassing the font\n  (:iss:`550`).\n\n- Fix ctrl+alt+<special> not working in normal and application keyboard (:iss:`548`).\n\n- Partial fix for rendering Right-to-left languages like Arabic. Rendering of\n  Arabic is never going to be perfect, but now it is at least readable.\n\n- Fix Ctrl+backspace acting as plain backspace in normal and application\n  keyboard modes (:iss:`538`).\n\n- Have the paste_from_selection action paste from the clipboard on platforms\n  that do not have a primary selection such as Wayland and macOS\n  (:iss:`529`)\n\n- Fix cursor_stop_blinking_after=0 not working (:iss:`530`)\n\n\n0.9.1 [2018-05-05]\n------------------------------\n\n- Show a bell symbol on the tab if a bell occurs in one of the windows in the tab and\n  the window is not the currently focused window\n\n- Change the window border color if a bell occurs in an unfocused window. Can\n  be disabled by setting the bell_border_color to be the same as the\n  inactive_border_color.\n\n- macOS: Add support for dead keys\n\n- Unicode input: When searching by name search for prefix matches as well as\n  whole word matches\n\n- Dynamically allocate the memory used for the scrollback history buffer.\n  Reduces startup memory consumption when using very large scrollback\n  buffer sizes.\n\n- Add an option to not request window attention on bell.\n\n- Remote control: Allow matching windows by number (visible position).\n\n- macOS: Fix changing tab title and kitty shell not working\n\n- When triple-clicking select all wrapped lines belonging to a single logical line.\n\n- hints kitten: Detect bracketed URLs and don't include the closing bracket in the URL.\n\n- When calling pass_selection_to_program use the current directory of the child\n  process as the cwd of the program.\n\n- Add macos_hide_from_tasks option to hide kitty from the macOS task switcher\n\n- macOS: When the macos_titlebar_color is set to background change the titlebar\n  colors to match the current background color of the active kitty window\n\n- Add a setting to clear all shortcuts defined up to that point in the config\n  file(s)\n\n- Add a setting (kitty_mod) to change the modifier used by all the default\n  kitty shortcuts, globally\n\n- Fix Shift+function key not working\n\n- Support the F13 to F25 function keys\n\n- Don't fail to start if the user deletes the hintstyle key from their\n  fontconfig configuration.\n\n- When rendering a private use unicode codepoint and a space as a two cell\n  ligature, set the foreground colors of the space cell to match the colors of\n  the first cell. Works around applications like powerline that use different\n  colors for the two cells.\n\n- Fix passing @text to other programs such as when viewing the scrollback\n  buffer not working correctly if kitty is itself scrolled up.\n\n- Fix window focus gained/lost events not being reported to child programs when\n  switching windows/tabs using the various keyboard shortcuts.\n\n- Fix tab title not changing to reflect the window title when switching between different windows in a tab\n\n- Ignore -e if it is specified on the command line. This is for compatibility\n  with broken software that assumes terminals should run with an -e option to\n  execute commands instead of just passing the commands as arguments.\n\n\n0.9.0 [2018-04-15]\n------------------------------\n\n- A new kitty command shell to allow controlling kitty via commands. Press\n  `ctrl+shift+escape` to run the shell.\n\n- The hints kitten has become much more powerful. Now in addition to URLs you\n  can use it to select word, paths, filenames, lines, etc. from the screen.\n  These can be inserted into the terminal, copied to clipboard or sent to\n  external programs.\n\n- Linux: Switch to libxkbcommon for keyboard handling. It allows kitty to\n  support XCompose and dead keys and also react to keyboard remapping/layout\n  change without needing a restart.\n\n- Add support for multiple-key-sequence shortcuts\n\n- A new remote control command `set-colors` to change the current and/or\n  configured colors.\n\n- When double-clicking to select a word, select words that continue onto the\n  next/prev line as well.\n\n- Add an `include` directive for the config files to read multiple config files\n\n- Improve mouse selection for windows with padding. Moving the mouse into the\n  padding area now acts as if the mouse is over the nearest cell.\n\n- Allow setting all 256 terminal colors in the config file\n\n- Fix using `kitty --single-instance` to open a new window in a running kitty\n  instance, not respecting the `--directory` flag\n\n- URL hints: Exclude trailing punctuation from URLs\n\n- URL hints: Launch the browser from the kitty parent process rather than the\n  hints kitten. Fixes launching on some systems where xdg-open doesn't like\n  being run from a kitten.\n\n- Allow using rectangle select mode by pressing shift in addition to the\n  rectangle select modifiers even when the terminal program has grabbed the\n  mouse.\n\n\n0.8.4 [2018-03-31]\n-----------------------------\n\n- Fix presence of XDG_CONFIG_DIRS and absence of XDG_CONFIG_HOME preventing\n  kitty from starting\n\n- Revert change in last release to cell width calculation. Instead just clip\n  the right edges of characters that overflow the cell by at most two pixels\n\n\n0.8.3 [2018-03-29]\n-----------------------------\n\n- Fix a regression that broke the visual bell and invert screen colors escape\n  code\n\n- Allow double-click and triple-click + drag to extend selections word at a\n  time or line at a time\n\n- Add a keyboard shortcut to set the tab title\n\n- Fix setting window title to empty via OSC escape code not working correctly\n\n- Linux: Fix cell width calculation incorrect for some fonts (cell widths are\n  now calculated by actually rendering bitmaps, which is slower but more\n  accurate)\n\n- Allow specifying a system wide kitty config file, for all users\n\n- Add a --debug-config command line flag to output data about the system and\n  kitty configuration.\n\n- Wayland: Fix auto-repeat of keys not working\n\n\n0.8.2 [2018-03-17]\n-----------------------------\n\n- Allow extending existing selections by right clicking\n\n- Add a configurable keyboard shortcut and remote command to set the font size to a specific value\n\n- Add an option to have kitty close the window when the main processes running in it exits, even if there are still background processes writing to that terminal\n\n- Add configurable keyboard shortcuts to switch to a specific layout\n\n- Add a keyboard shortcut to edit the kitty config file easily\n\n- macOS: Fix restoring of window size not correct on Retina screens\n\n- macOS: Add a facility to specify command line arguments when running kitty from the GUI\n\n- Add a focus-tab remote command\n\n- Fix screen not being refreshed immediately after moving a window.\n\n- Fix a crash when getting the contents of the scrollback buffer as text\n\n0.8.1 [2018-03-09]\n-----------------------------\n\n- Extend kitty's remote control feature to work over both UNIX and TCP sockets,\n  so now you can control kitty from across the internet, if you want to.\n\n- Render private use unicode characters that are followed by a space as a two\n  character ligature. This fixes rendering for applications that misuse\n  private-use characters to display square symbols.\n\n- Fix Unicode emoji presentation variant selector causing new a fallback font\n  instance to be created\n\n- Fix a rare error that prevented the Unicode input kitten from working\n  sometimes\n\n- Allow using Ctrl+Alt+letter in legacy keyboard modes by outputting them as Ctrl+letter and Alt+letter.\n  This matches other terminals' behavior.\n\n- Fix cursor position off-by-one on horizontal axis when resizing the terminal\n\n- Wayland: Fix auto-repeat of keys not working\n\n- Wayland: Add support for window decorations provided by the Wayland shell\n\n- macOS: Fix URL hints not working\n\n- macOS: Fix shell not starting in login mode on some computers\n\n- macOS: Output errors into console.app when running as a bundle\n\n\n0.8.0 [2018-02-24]\n-----------------------------\n\n- A framework for kittens, that is, small terminal programs designed to run\n  inside kitty and extend its capabilities. Examples include unicode input and\n  selecting URLs with the keyboard.\n\n- Input arbitrary unicode characters by pressing Ctrl+Shift+u. You can choose\n  characters by name, by hex code, by recently used, etc. There is even and\n  editable Favorites list.\n\n- Open URLs using only the keyboard. kitty has a new \"hints mode\". Press\n  Ctrl+Shift+e and all detected URLs on the screen are highlighted with a key\n  to press to open them. The facility is customizable so you can change\n  what is detected as a URL and which program is used to open it.\n\n- Add an option to change the titlebar color of kitty windows on macOS\n\n- Only consider Emoji characters with default Emoji presentation to be two\n  cells wide. This matches the standard. Also add support for the Unicode Emoji\n  variation presentation selector.\n\n- Prevent video tearing during high speed scrolling by syncing draws\n  to the monitor's refresh rate. There is a new configuration option to\n  control this ``sync_to_monitor``.\n\n- When displaying only a single window, use the default background color of the\n  window (which can be changed via escape codes) as the color for the margin\n  and padding of the window.\n\n- Add some non standard terminfo capabilities used by neovim and tmux.\n\n- Fix large drop in performance when using multiple top-level windows on macOS\n\n- Fix save/restore of window sizes not working correctly.\n\n- Remove option to use system wcwidth(). Now always use a wcwidth() based on\n  the Unicode standard. Only sane way.\n\n- Fix a regression that caused a few ligature glyphs to not render correctly in\n  rare circumstances.\n\n- Browsing the scrollback buffer now happens in an overlay window instead of a\n  new window/tab.\n\n0.7.1 [2018-01-31]\n---------------------------\n\n- Add an option to adjust the width of character cells\n\n- Fix selecting text with the mouse in the scrollback buffer selecting text\n  from the line above the actually selected line\n\n- Fix some italic fonts having the right edge of characters cut-off,\n  unnecessarily\n\n\n0.7.0 [2018-01-24]\n---------------------------\n\n- Allow controlling kitty from the shell prompt/scripts. You can\n  open/close/rename windows and tabs and even send input to specific windows.\n  See the README for details.\n\n- Add option to put tab bar at the top instead of the bottom\n\n- Add option to override the default shell\n\n- Add \"Horizontal\" and \"Vertical\" window layouts\n\n- Sessions: Allow setting titles and working directories for individual windows\n\n- Option to copy to clipboard on mouse select\n\n- Fix incorrect reporting of mouse move events when using the SGR protocol\n\n- Make alt+backspace delete the previous word\n\n- Take the mouse wheel multiplier option in to account when generating fake key\n  scroll events\n\n- macOS: Fix closing top-level window does not transfer focus to other\n  top-level windows.\n\n- macOS: Fix alt+arrow keys not working when disabling the macos_option_as_alt\n  config option.\n\n- kitty icat: Workaround for bug in ImageMagick that would cause some images\n  to fail to display at certain sizes.\n\n- Fix rendering of text with ligature fonts that do not use dummy glyphs\n\n- Fix a regression that caused copying of the selection to clipboard to only\n  copy the visible part of the selection\n\n- Fix incorrect handling of some unicode combining marks that are not re-ordered\n\n- Fix handling on non-BMP combining characters\n\n- Drop the dependency on libunistring\n\n\n0.6.1 [2017-12-28]\n---------------------------\n\n- Add an option to fade the text in inactive windows\n\n- Add new actions to open windows/tabs/etc. with the working directory set to\n  the working directory of the current window.\n\n- Automatically adjust cell size when DPI changes, for example when kitty is\n  moved from one monitor to another with a different DPI\n\n- Ensure underlines are rendered even for fonts with very poor metrics\n\n- Fix some emoji glyphs not colored on Linux\n\n- Internal wcwidth() implementation is now auto-generated from the unicode\n  standard database\n\n- Allow configuring the modifiers to use for rectangular selection with the\n  mouse.\n\n- Fix incorrect minimum wayland version in the build script\n\n- Fix a crash when detecting a URL that ends at the end of the line\n\n- Fix regression that broke drawing of hollow cursor when window loses focus\n\n\n0.6.0 [2017-12-18]\n---------------------------\n\n- Support background transparency via the background_opacity option. Provided\n  that your OS/window manager supports transparency, you can now have kitty\n  render pixels that have only the default background color as\n  semi-transparent.\n\n- Support multiple top level (OS) windows. These windows all share the sprite\n  texture cache on the GPU, further reducing overall resource usage. Use\n  the shortcut `ctrl+shift+n` to open a new top-level window.\n\n- Add support for a *daemon* mode using the `--single-instance` command line\n  option. With this option you can have only a single kitty instance running.\n  All future invocations simply open new top-level windows in the existing\n  instance.\n\n- Support colored emoji\n\n- Use CoreText instead of FreeType to render text on macOS\n\n- Support running on the \"low power\" GPU on dual GPU macOS machines\n\n- Add a new \"grid\" window layout\n\n- Drop the dependency on glfw (kitty now uses a modified, bundled copy of glfw)\n\n- Add an option to control the audio bell volume on X11 systems\n\n- Add a command line switch to set the name part of the WM_CLASS window\n  property independently.\n\n- Add a command line switch to set the window title.\n\n- Add more options to customize the tab-bar's appearance (font styles and\n  separator)\n\n- Allow drag and drop of files into kitty. On drop kitty will paste the\n  file path to the running program.\n\n- Add an option to control the underline style for URL highlighting on hover\n\n- X11: Set the WINDOWID environment variable\n\n- Fix middle and right buttons swapped when sending mouse events to child\n  processes\n\n- Allow selecting in a rectangle by holding down Ctrl+Alt while dragging with\n  the mouse.\n\n\n0.5.1 [2017-12-01]\n---------------------------\n\n- Add an option to control the thickness of lines in box drawing characters\n\n- Increase max. allowed ligature length to nine characters\n\n- Fix text not vertically centered when adjusting line height\n\n- Fix unicode block characters not being rendered properly\n\n- Fix shift+up/down not generating correct escape codes\n\n- Image display: Fix displaying images taller than two screen heights not\n  scrolling properly\n\n\n0.5.0 [2017-11-19]\n---------------------------\n\n- Add support for ligature fonts such as Fira Code, Hasklig, etc. kitty now\n  uses harfbuzz for text shaping which allow it to support advanced OpenType\n  features such as contextual alternates/ligatures/combining glyphs/etc.\n\n- Make it easy to select fonts by allowing listing of monospace fonts using:\n  kitty list-fonts\n\n- Add an option to have window focus follow mouse\n\n- Add a keyboard shortcut (ctrl+shift+f11) to toggle fullscreen mode\n\n- macOS: Fix handling of option key. It now behaves just like the alt key on\n  Linux. There is an option to make it type unicode characters instead.\n\n- Linux: Add support for startup notification on X11 desktops. kitty will\n  now inform the window manager when its startup is complete.\n\n- Fix shell prompt being duplicated when window is resized\n\n- Fix crash when displaying more than 64 images in the same session\n\n- Add support for colons in SGR color codes. These are generated by some\n  applications such as neovim when they mistakenly identify kitty as a libvte\n  based terminal.\n\n- Fix mouse interaction not working in apps using obsolete mouse interaction\n  protocols\n\n- Linux: no longer require glew as a dependency\n\n\n0.4.2 [2017-10-23]\n---------------------------\n\n- Fix a regression in 0.4.0 that broke custom key mappings\n\n- Fix a regression in 0.4.0 that broke support for non-QWERTY keyboard layouts\n\n- Avoid using threads to reap zombie child processes. Also prevent kitty from\n  hanging if the open program hangs when clicking on a URL.\n\n\n0.4.0 [2017-10-22]\n---------------------------\n\n- Support for drawing arbitrary raster graphics (images) in the terminal via a\n  new graphics protocol. kitty can draw images with full 32-bit color using both\n  ssh connections and files/shared memory (when available) for better\n  performance. The drawing primitives support alpha blending and z-index.\n  Images can be drawn both above and below text. See :doc:`graphics-protocol`.\n  for details.\n\n- Refactor kitty's internals to make it even faster and more efficient. The CPU\n  usage of kitty + X server while doing intensive tasks such as scrolling a\n  file continuously in less has been reduced by 50%. There are now two\n  configuration options ``repaint_delay`` and ``input_delay`` you can use to\n  fine tune kitty's performance vs CPU usage profile. The CPU usage of kitty +\n  X when scrolling in less is now significantly better than most (all?) other\n  terminals. See :doc:`performance`.\n\n- Hovering over URLs with the mouse now underlines them to indicate they\n  can be clicked. Hold down Ctrl+Shift while clicking to open the URL.\n\n- Selection using the mouse is now more intelligent. It does not add\n  blank cells (i.e. cells that have no content) after the end of text in a\n  line to the selection.\n\n- The block cursor in now fully opaque but renders the character under it in\n  the background color, for enhanced visibility.\n\n- Allow combining multiple independent actions into a single shortcut\n\n- Add a new shortcut to pass the current selection to an external program\n\n- Allow creating shortcuts to open new windows running arbitrary commands. You\n  can also pass the current selection to the command as an arguments and the\n  contents of the screen + scrollback buffer as stdin to the command.\n", "/*\n * graphics.c\n * Copyright (C) 2017 Kovid Goyal <kovid at kovidgoyal.net>\n *\n * Distributed under terms of the GPL3 license.\n */\n\n#include \"graphics.h\"\n#include \"state.h\"\n\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sys/mman.h>\n#include <stdlib.h>\n\n#include <zlib.h>\n#include <structmember.h>\n#include \"png-reader.h\"\nPyTypeObject GraphicsManager_Type;\n\n#define STORAGE_LIMIT (320u * (1024u * 1024u))\n\n#define REPORT_ERROR(...) { log_error(__VA_ARGS__); }\n\n\nstatic bool send_to_gpu = true;\n\nGraphicsManager*\ngrman_alloc() {\n    GraphicsManager *self = (GraphicsManager *)GraphicsManager_Type.tp_alloc(&GraphicsManager_Type, 0);\n    self->images_capacity = self->capacity = 64;\n    self->images = calloc(self->images_capacity, sizeof(Image));\n    self->render_data = calloc(self->capacity, sizeof(ImageRenderData));\n    if (self->images == NULL || self->render_data == NULL) {\n        PyErr_NoMemory();\n        Py_CLEAR(self); return NULL;\n    }\n    return self;\n}\n\nstatic inline void\nfree_refs_data(Image *img) {\n    free(img->refs); img->refs = NULL;\n    img->refcnt = 0; img->refcap = 0;\n}\n\nstatic inline void\nfree_load_data(LoadData *ld) {\n    free(ld->buf); ld->buf_used = 0; ld->buf_capacity = 0;\n    ld->buf = NULL;\n\n    if (ld->mapped_file) munmap(ld->mapped_file, ld->mapped_file_sz);\n    ld->mapped_file = NULL; ld->mapped_file_sz = 0;\n}\n\nstatic inline void\nfree_image(GraphicsManager *self, Image *img) {\n    if (img->texture_id) free_texture(&img->texture_id);\n    free_refs_data(img);\n    free_load_data(&(img->load_data));\n    self->used_storage -= img->used_storage;\n}\n\n\nstatic void\ndealloc(GraphicsManager* self) {\n    size_t i;\n    if (self->images) {\n        for (i = 0; i < self->image_count; i++) free_image(self, self->images + i);\n        free(self->images);\n    }\n    free(self->render_data);\n    Py_TYPE(self)->tp_free((PyObject*)self);\n}\n\nstatic id_type internal_id_counter = 1;\n\nstatic inline Image*\nimg_by_internal_id(GraphicsManager *self, id_type id) {\n    for (size_t i = 0; i < self->image_count; i++) {\n        if (self->images[i].internal_id == id) return self->images + i;\n    }\n    return NULL;\n}\n\nstatic inline Image*\nimg_by_client_id(GraphicsManager *self, uint32_t id) {\n    for (size_t i = 0; i < self->image_count; i++) {\n        if (self->images[i].client_id == id) return self->images + i;\n    }\n    return NULL;\n}\n\nstatic inline void\nremove_image(GraphicsManager *self, size_t idx) {\n    free_image(self, self->images + idx);\n    remove_i_from_array(self->images, idx, self->image_count);\n    self->layers_dirty = true;\n}\n\nstatic inline void\nremove_images(GraphicsManager *self, bool(*predicate)(Image*), id_type skip_image_internal_id) {\n    for (size_t i = self->image_count; i-- > 0;) {\n        Image *img = self->images + i;\n        if (img->internal_id != skip_image_internal_id && predicate(img)) {\n            remove_image(self, i);\n        }\n    }\n}\n\n\n// Loading image data {{{\n\nstatic bool\ntrim_predicate(Image *img) {\n    return !img->data_loaded || !img->refcnt;\n}\n\n\nstatic int\noldest_last(const void* a, const void *b) {\n    monotonic_t ans = ((Image*)(b))->atime - ((Image*)(a))->atime;\n    return ans < 0 ? -1 : (ans == 0 ? 0 : 1);\n}\n\nstatic inline void\napply_storage_quota(GraphicsManager *self, size_t storage_limit, id_type currently_added_image_internal_id) {\n    // First remove unreferenced images, even if they have an id\n    remove_images(self, trim_predicate, currently_added_image_internal_id);\n    if (self->used_storage < storage_limit) return;\n\n    qsort(self->images, self->image_count, sizeof(self->images[0]), oldest_last);\n    while (self->used_storage > storage_limit && self->image_count > 0) {\n        remove_image(self, self->image_count - 1);\n    }\n    if (!self->image_count) self->used_storage = 0;  // sanity check\n}\n\nstatic char add_response[512] = {0};\nstatic bool has_add_respose = false;\n\nstatic inline void\nset_add_response(const char *code, const char *fmt, ...) {\n    va_list args;\n    va_start(args, fmt);\n    size_t sz = sizeof(add_response)/sizeof(add_response[0]);\n    int num = snprintf(add_response, sz, \"%s:\", code);\n    vsnprintf(add_response + num, sz - num, fmt, args);\n    va_end(args);\n    has_add_respose = true;\n}\n\n// Decode formats {{{\n#define ABRT(code, ...) { set_add_response(#code, __VA_ARGS__); goto err; }\n\nstatic inline bool\nmmap_img_file(GraphicsManager UNUSED *self, Image *img, int fd, size_t sz, off_t offset) {\n    if (!sz) {\n        struct stat s;\n        if (fstat(fd, &s) != 0) ABRT(EBADF, \"Failed to fstat() the fd: %d file with error: [%d] %s\", fd, errno, strerror(errno));\n        sz = s.st_size;\n    }\n    void *addr = mmap(0, sz, PROT_READ, MAP_SHARED, fd, offset);\n    if (addr == MAP_FAILED) ABRT(EBADF, \"Failed to map image file fd: %d at offset: %zd with size: %zu with error: [%d] %s\", fd, offset, sz, errno, strerror(errno));\n    img->load_data.mapped_file = addr;\n    img->load_data.mapped_file_sz = sz;\n    return true;\nerr:\n    return false;\n}\n\n\nstatic inline const char*\nzlib_strerror(int ret) {\n#define Z(x) case x: return #x;\n    static char buf[128];\n    switch(ret) {\n        case Z_ERRNO:\n            return strerror(errno);\n        default:\n            snprintf(buf, sizeof(buf)/sizeof(buf[0]), \"Unknown error: %d\", ret);\n            return buf;\n        Z(Z_STREAM_ERROR);\n        Z(Z_DATA_ERROR);\n        Z(Z_MEM_ERROR);\n        Z(Z_BUF_ERROR);\n        Z(Z_VERSION_ERROR);\n    }\n#undef Z\n}\n\nstatic inline bool\ninflate_zlib(GraphicsManager UNUSED *self, Image *img, uint8_t *buf, size_t bufsz) {\n    bool ok = false;\n    z_stream z;\n    uint8_t *decompressed = malloc(img->load_data.data_sz);\n    if (decompressed == NULL) fatal(\"Out of memory allocating decompression buffer\");\n    z.zalloc = Z_NULL;\n    z.zfree = Z_NULL;\n    z.opaque = Z_NULL;\n    z.avail_in = bufsz;\n    z.next_in = (Bytef*)buf;\n    z.avail_out = img->load_data.data_sz;\n    z.next_out = decompressed;\n    int ret;\n    if ((ret = inflateInit(&z)) != Z_OK) ABRT(ENOMEM, \"Failed to initialize inflate with error: %s\", zlib_strerror(ret));\n    if ((ret = inflate(&z, Z_FINISH)) != Z_STREAM_END) ABRT(EINVAL, \"Failed to inflate image data with error: %s\", zlib_strerror(ret));\n    if (z.avail_out) ABRT(EINVAL, \"Image data size post inflation does not match expected size\");\n    free_load_data(&img->load_data);\n    img->load_data.buf_capacity = img->load_data.data_sz;\n    img->load_data.buf = decompressed;\n    img->load_data.buf_used = img->load_data.data_sz;\n    ok = true;\nerr:\n    inflateEnd(&z);\n    if (!ok) free(decompressed);\n    return ok;\n}\n\nstatic void\npng_error_handler(const char *code, const char *msg) {\n    set_add_response(code, \"%s\", msg);\n}\n\nstatic inline bool\ninflate_png(GraphicsManager UNUSED *self, Image *img, uint8_t *buf, size_t bufsz) {\n    png_read_data d = {.err_handler=png_error_handler};\n    inflate_png_inner(&d, buf, bufsz);\n    if (d.ok) {\n        free_load_data(&img->load_data);\n        img->load_data.buf = d.decompressed;\n        img->load_data.buf_capacity = d.sz;\n        img->load_data.buf_used = d.sz;\n        img->load_data.data_sz = d.sz;\n        img->width = d.width; img->height = d.height;\n    }\n    else free(d.decompressed);\n    free(d.row_pointers);\n    return d.ok;\n}\n#undef ABRT\n// }}}\n\nstatic bool\nadd_trim_predicate(Image *img) {\n    return !img->data_loaded || (!img->client_id && !img->refcnt);\n}\n\nbool\npng_path_to_bitmap(const char* path, uint8_t** data, unsigned int* width, unsigned int* height, size_t* sz) {\n    FILE* fp = fopen(path, \"r\");\n    if (fp == NULL) {\n        log_error(\"The PNG image: %s could not be opened with error: %s\", path, strerror(errno));\n        return false;\n    }\n    size_t capacity = 16*1024, pos = 0;\n    unsigned char *buf = malloc(capacity);\n    if (!buf) { log_error(\"Out of memory reading PNG file at: %s\", path); fclose(fp); return false; }\n    while (!feof(fp)) {\n        if (pos - capacity < 1024) {\n            capacity *= 2;\n            unsigned char *new_buf = realloc(buf, capacity);\n            if (!new_buf) {\n                free(buf);\n                log_error(\"Out of memory reading PNG file at: %s\", path); fclose(fp); return false;\n            }\n            buf = new_buf;\n        }\n        pos += fread(buf + pos, sizeof(char), capacity - pos, fp);\n        int saved_errno = errno;\n        if (ferror(fp) && saved_errno != EINTR) {\n            log_error(\"Failed while reading from file: %s with error: %s\", path, strerror(saved_errno));\n            fclose(fp);\n            free(buf);\n            return false;\n        }\n    }\n    fclose(fp); fp = NULL;\n    png_read_data d = {0};\n    inflate_png_inner(&d, buf, pos);\n    free(buf);\n    if (!d.ok) {\n        log_error(\"Failed to decode PNG image at: %s\", path);\n        return false;\n    }\n    *data = d.decompressed;\n    *sz = d.sz;\n    *height = d.height; *width = d.width;\n    return true;\n}\n\n\nstatic inline Image*\nfind_or_create_image(GraphicsManager *self, uint32_t id, bool *existing) {\n    if (id) {\n        for (size_t i = 0; i < self->image_count; i++) {\n            if (self->images[i].client_id == id) {\n                *existing = true;\n                return self->images + i;\n            }\n        }\n    }\n    *existing = false;\n    ensure_space_for(self, images, Image, self->image_count + 1, images_capacity, 64, true);\n    Image *ans = self->images + self->image_count++;\n    zero_at_ptr(ans);\n    return ans;\n}\n\n\nstatic Image*\nhandle_add_command(GraphicsManager *self, const GraphicsCommand *g, const uint8_t *payload, bool *is_dirty, uint32_t iid) {\n#define ABRT(code, ...) { set_add_response(#code, __VA_ARGS__); self->loading_image = 0; if (img) img->data_loaded = false; return NULL; }\n#define MAX_DATA_SZ (4u * 100000000u)\n    has_add_respose = false;\n    bool existing, init_img = true;\n    Image *img = NULL;\n    unsigned char tt = g->transmission_type ? g->transmission_type : 'd';\n    enum FORMATS { RGB=24, RGBA=32, PNG=100 };\n    uint32_t fmt = g->format ? g->format : RGBA;\n    if (tt == 'd' && self->loading_image) init_img = false;\n    if (init_img) {\n        self->last_init_graphics_command = *g;\n        self->last_init_graphics_command.id = iid;\n        self->loading_image = 0;\n        if (g->data_width > 10000 || g->data_height > 10000) ABRT(EINVAL, \"Image too large\");\n        remove_images(self, add_trim_predicate, 0);\n        img = find_or_create_image(self, iid, &existing);\n        if (existing) {\n            free_load_data(&img->load_data);\n            img->data_loaded = false;\n            free_refs_data(img);\n            *is_dirty = true;\n            self->layers_dirty = true;\n        } else {\n            img->internal_id = internal_id_counter++;\n            img->client_id = iid;\n        }\n        img->atime = monotonic(); img->used_storage = 0;\n        img->width = g->data_width; img->height = g->data_height;\n        switch(fmt) {\n            case PNG:\n                if (g->data_sz > MAX_DATA_SZ) ABRT(EINVAL, \"PNG data size too large\");\n                img->load_data.is_4byte_aligned = true;\n                img->load_data.is_opaque = false;\n                img->load_data.data_sz = g->data_sz ? g->data_sz : 1024 * 100;\n                break;\n            case RGB:\n            case RGBA:\n                img->load_data.data_sz = (size_t)g->data_width * g->data_height * (fmt / 8);\n                if (!img->load_data.data_sz) ABRT(EINVAL, \"Zero width/height not allowed\");\n                img->load_data.is_4byte_aligned = fmt == RGBA || (img->width % 4 == 0);\n                img->load_data.is_opaque = fmt == RGB;\n                break;\n            default:\n                ABRT(EINVAL, \"Unknown image format: %u\", fmt);\n        }\n        if (tt == 'd') {\n            if (g->more) self->loading_image = img->internal_id;\n            img->load_data.buf_capacity = img->load_data.data_sz + (g->compressed ? 1024 : 10);  // compression header\n            img->load_data.buf = malloc(img->load_data.buf_capacity);\n            img->load_data.buf_used = 0;\n            if (img->load_data.buf == NULL) {\n                ABRT(ENOMEM, \"Out of memory\");\n                img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;\n            }\n        }\n    } else {\n        self->last_init_graphics_command.more = g->more;\n        self->last_init_graphics_command.payload_sz = g->payload_sz;\n        g = &self->last_init_graphics_command;\n        tt = g->transmission_type ? g->transmission_type : 'd';\n        fmt = g->format ? g->format : RGBA;\n        img = img_by_internal_id(self, self->loading_image);\n        if (img == NULL) {\n            self->loading_image = 0;\n            ABRT(EILSEQ, \"More payload loading refers to non-existent image\");\n        }\n    }\n    int fd;\n    static char fname[2056] = {0};\n    switch(tt) {\n        case 'd':  // direct\n            if (img->load_data.buf_capacity - img->load_data.buf_used < g->payload_sz) {\n                if (img->load_data.buf_used + g->payload_sz > MAX_DATA_SZ || fmt != PNG) ABRT(EFBIG, \"Too much data\");\n                img->load_data.buf_capacity = MIN(2 * img->load_data.buf_capacity, MAX_DATA_SZ);\n                img->load_data.buf = realloc(img->load_data.buf, img->load_data.buf_capacity);\n                if (img->load_data.buf == NULL) {\n                    ABRT(ENOMEM, \"Out of memory\");\n                    img->load_data.buf_capacity = 0; img->load_data.buf_used = 0;\n                }\n            }\n            memcpy(img->load_data.buf + img->load_data.buf_used, payload, g->payload_sz);\n            img->load_data.buf_used += g->payload_sz;\n            if (!g->more) { img->data_loaded = true; self->loading_image = 0; }\n            break;\n        case 'f': // file\n        case 't': // temporary file\n        case 's': // POSIX shared memory\n            if (g->payload_sz > 2048) ABRT(EINVAL, \"Filename too long\");\n            snprintf(fname, sizeof(fname)/sizeof(fname[0]), \"%.*s\", (int)g->payload_sz, payload);\n            if (tt == 's') fd = shm_open(fname, O_RDONLY, 0);\n            else fd = open(fname, O_CLOEXEC | O_RDONLY);\n            if (fd == -1) ABRT(EBADF, \"Failed to open file for graphics transmission with error: [%d] %s\", errno, strerror(errno));\n            img->data_loaded = mmap_img_file(self, img, fd, g->data_sz, g->data_offset);\n            safe_close(fd, __FILE__, __LINE__);\n            if (tt == 't') {\n                if (global_state.boss) { call_boss(safe_delete_temp_file, \"s\", fname); }\n                else unlink(fname);\n            }\n            else if (tt == 's') shm_unlink(fname);\n            break;\n        default:\n            ABRT(EINVAL, \"Unknown transmission type: %c\", g->transmission_type);\n    }\n    if (!img->data_loaded) return NULL;\n    self->loading_image = 0;\n    bool needs_processing = g->compressed || fmt == PNG;\n    if (needs_processing) {\n        uint8_t *buf; size_t bufsz;\n#define IB { if (img->load_data.buf) { buf = img->load_data.buf; bufsz = img->load_data.buf_used; } else { buf = img->load_data.mapped_file; bufsz = img->load_data.mapped_file_sz; } }\n        switch(g->compressed) {\n            case 'z':\n                IB;\n                if (!inflate_zlib(self, img, buf, bufsz)) {\n                    img->data_loaded = false; return NULL;\n                }\n                break;\n            case 0:\n                break;\n            default:\n                ABRT(EINVAL, \"Unknown image compression: %c\", g->compressed);\n        }\n        switch(fmt) {\n            case PNG:\n                IB;\n                if (!inflate_png(self, img, buf, bufsz)) {\n                    img->data_loaded = false; return NULL;\n                }\n                break;\n            default: break;\n        }\n#undef IB\n        img->load_data.data = img->load_data.buf;\n        if (img->load_data.buf_used < img->load_data.data_sz) {\n            ABRT(ENODATA, \"Insufficient image data: %zu < %zu\", img->load_data.buf_used, img->load_data.data_sz);\n        }\n        if (img->load_data.mapped_file) {\n            munmap(img->load_data.mapped_file, img->load_data.mapped_file_sz);\n            img->load_data.mapped_file = NULL; img->load_data.mapped_file_sz = 0;\n        }\n    } else {\n        if (tt == 'd') {\n            if (img->load_data.buf_used < img->load_data.data_sz) {\n                ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.buf_used, img->load_data.data_sz);\n            } else img->load_data.data = img->load_data.buf;\n        } else {\n            if (img->load_data.mapped_file_sz < img->load_data.data_sz) {\n                ABRT(ENODATA, \"Insufficient image data: %zu < %zu\",  img->load_data.mapped_file_sz, img->load_data.data_sz);\n            } else img->load_data.data = img->load_data.mapped_file;\n        }\n    }\n    size_t required_sz = (size_t)(img->load_data.is_opaque ? 3 : 4) * img->width * img->height;\n    if (img->load_data.data_sz != required_sz) ABRT(EINVAL, \"Image dimensions: %ux%u do not match data size: %zu, expected size: %zu\", img->width, img->height, img->load_data.data_sz, required_sz);\n    if (LIKELY(img->data_loaded && send_to_gpu)) {\n        send_image_to_gpu(&img->texture_id, img->load_data.data, img->width, img->height, img->load_data.is_opaque, img->load_data.is_4byte_aligned, false, REPEAT_CLAMP);\n        free_load_data(&img->load_data);\n        self->used_storage += required_sz;\n        img->used_storage = required_sz;\n    }\n    return img;\n#undef MAX_DATA_SZ\n#undef ABRT\n}\n\nstatic inline const char*\ncreate_add_response(GraphicsManager UNUSED *self, bool data_loaded, uint32_t iid) {\n    static char rbuf[sizeof(add_response)/sizeof(add_response[0]) + 64];\n    if (iid) {\n        if (!has_add_respose) {\n            if (!data_loaded) return NULL;\n            snprintf(add_response, 10, \"OK\");\n        }\n        snprintf(rbuf, sizeof(rbuf)/sizeof(rbuf[0]) - 1, \"Gi=%u;%s\", iid, add_response);\n        return rbuf;\n    }\n    return NULL;\n}\n\n// }}}\n\n// Displaying images {{{\n\nstatic inline void\nupdate_src_rect(ImageRef *ref, Image *img) {\n    // The src rect in OpenGL co-ords [0, 1] with origin at top-left corner of image\n    ref->src_rect.left = (float)ref->src_x / (float)img->width;\n    ref->src_rect.right = (float)(ref->src_x + ref->src_width) / (float)img->width;\n    ref->src_rect.top = (float)ref->src_y / (float)img->height;\n    ref->src_rect.bottom = (float)(ref->src_y + ref->src_height) / (float)img->height;\n}\n\nstatic inline void\nupdate_dest_rect(ImageRef *ref, uint32_t num_cols, uint32_t num_rows, CellPixelSize cell) {\n    uint32_t t;\n    if (num_cols == 0) {\n        t = ref->src_width + ref->cell_x_offset;\n        num_cols = t / cell.width;\n        if (t > num_cols * cell.width) num_cols += 1;\n    }\n    if (num_rows == 0) {\n        t = ref->src_height + ref->cell_y_offset;\n        num_rows = t / cell.height;\n        if (t > num_rows * cell.height) num_rows += 1;\n    }\n    ref->effective_num_rows = num_rows;\n    ref->effective_num_cols = num_cols;\n}\n\n\nstatic void\nhandle_put_command(GraphicsManager *self, const GraphicsCommand *g, Cursor *c, bool *is_dirty, Image *img, CellPixelSize cell) {\n    has_add_respose = false;\n    if (img == NULL) img = img_by_client_id(self, g->id);\n    if (img == NULL) { set_add_response(\"ENOENT\", \"Put command refers to non-existent image with id: %u\", g->id); return; }\n    if (!img->data_loaded) { set_add_response(\"ENOENT\", \"Put command refers to image with id: %u that could not load its data\", g->id); return; }\n    ensure_space_for(img, refs, ImageRef, img->refcnt + 1, refcap, 16, true);\n    *is_dirty = true;\n    self->layers_dirty = true;\n    ImageRef *ref = NULL;\n    for (size_t i=0; i < img->refcnt; i++) {\n        if ((unsigned)img->refs[i].start_row == c->x && (unsigned)img->refs[i].start_column == c->y) {\n            ref = img->refs + i;\n            break;\n        }\n    }\n    if (ref == NULL) {\n        ref = img->refs + img->refcnt++;\n        zero_at_ptr(ref);\n    }\n    img->atime = monotonic();\n    ref->src_x = g->x_offset; ref->src_y = g->y_offset; ref->src_width = g->width ? g->width : img->width; ref->src_height = g->height ? g->height : img->height;\n    ref->src_width = MIN(ref->src_width, img->width - (img->width > ref->src_x ? ref->src_x : img->width));\n    ref->src_height = MIN(ref->src_height, img->height - (img->height > ref->src_y ? ref->src_y : img->height));\n    ref->z_index = g->z_index;\n    ref->start_row = c->y; ref->start_column = c->x;\n    ref->cell_x_offset = MIN(g->cell_x_offset, cell.width - 1);\n    ref->cell_y_offset = MIN(g->cell_y_offset, cell.height - 1);\n    ref->num_cols = g->num_cells; ref->num_rows = g->num_lines;\n    update_src_rect(ref, img);\n    update_dest_rect(ref, g->num_cells, g->num_lines, cell);\n    // Move the cursor, the screen will take care of ensuring it is in bounds\n    c->x += ref->effective_num_cols; c->y += ref->effective_num_rows - 1;\n}\n\nstatic int\ncmp_by_zindex_and_image(const void *a_, const void *b_) {\n    const ImageRenderData *a = (const ImageRenderData*)a_, *b = (const ImageRenderData*)b_;\n    int ans = a->z_index - b->z_index;\n    if (ans == 0) ans = a->image_id - b->image_id;\n    return ans;\n}\n\nstatic inline void\nset_vertex_data(ImageRenderData *rd, const ImageRef *ref, const ImageRect *dest_rect) {\n#define R(n, a, b) rd->vertices[n*4] = ref->src_rect.a; rd->vertices[n*4 + 1] = ref->src_rect.b; rd->vertices[n*4 + 2] = dest_rect->a; rd->vertices[n*4 + 3] = dest_rect->b;\n        R(0, right, top); R(1, right, bottom); R(2, left, bottom); R(3, left, top);\n#undef R\n}\n\nvoid\ngpu_data_for_centered_image(ImageRenderData *ans, unsigned int screen_width_px, unsigned int screen_height_px, unsigned int width, unsigned int height) {\n    static const ImageRef source_rect = { .src_rect = { .left=0, .top=0, .bottom=1, .right=1 }};\n    const ImageRef *ref = &source_rect;\n    float width_frac = 2 * MIN(1, width / (float)screen_width_px), height_frac = 2 * MIN(1, height / (float)screen_height_px);\n    float hmargin = (2 - width_frac) / 2;\n    float vmargin = (2 - height_frac) / 2;\n    const ImageRect r = { .left = -1 + hmargin, .right = -1 + hmargin + width_frac, .top = 1 - vmargin, .bottom = 1 - vmargin - height_frac };\n    set_vertex_data(ans, ref, &r);\n}\n\nbool\ngrman_update_layers(GraphicsManager *self, unsigned int scrolled_by, float screen_left, float screen_top, float dx, float dy, unsigned int num_cols, unsigned int num_rows, CellPixelSize cell) {\n    if (self->last_scrolled_by != scrolled_by) self->layers_dirty = true;\n    self->last_scrolled_by = scrolled_by;\n    if (!self->layers_dirty) return false;\n    self->layers_dirty = false;\n    size_t i, j;\n    self->num_of_below_refs = 0;\n    self->num_of_negative_refs = 0;\n    self->num_of_positive_refs = 0;\n    Image *img; ImageRef *ref;\n    ImageRect r;\n    float screen_width = dx * num_cols, screen_height = dy * num_rows;\n    float screen_bottom = screen_top - screen_height;\n    float screen_width_px = num_cols * cell.width;\n    float screen_height_px = num_rows * cell.height;\n    float y0 = screen_top - dy * scrolled_by;\n\n    // Iterate over all visible refs and create render data\n    self->count = 0;\n    for (i = 0; i < self->image_count; i++) { img = self->images + i; for (j = 0; j < img->refcnt; j++) { ref = img->refs + j;\n        r.top = y0 - ref->start_row * dy - dy * (float)ref->cell_y_offset / (float)cell.height;\n        if (ref->num_rows > 0) r.bottom = y0 - (ref->start_row + (int32_t)ref->num_rows) * dy;\n        else r.bottom = r.top - screen_height * (float)ref->src_height / screen_height_px;\n        if (r.top <= screen_bottom || r.bottom >= screen_top) continue;  // not visible\n\n        r.left = screen_left + ref->start_column * dx + dx * (float)ref->cell_x_offset / (float) cell.width;\n        if (ref->num_cols > 0) r.right = screen_left + (ref->start_column + (int32_t)ref->num_cols) * dx;\n        else r.right = r.left + screen_width * (float)ref->src_width / screen_width_px;\n\n        if (ref->z_index < ((int32_t)INT32_MIN/2))\n            self->num_of_below_refs++;\n        else if (ref->z_index < 0)\n            self->num_of_negative_refs++;\n        else\n            self->num_of_positive_refs++;\n        ensure_space_for(self, render_data, ImageRenderData, self->count + 1, capacity, 64, true);\n        ImageRenderData *rd = self->render_data + self->count;\n        zero_at_ptr(rd);\n        set_vertex_data(rd, ref, &r);\n        self->count++;\n        rd->z_index = ref->z_index; rd->image_id = img->internal_id;\n        rd->texture_id = img->texture_id;\n    }}\n    if (!self->count) return false;\n    // Sort visible refs in draw order (z-index, img)\n    qsort(self->render_data, self->count, sizeof(self->render_data[0]), cmp_by_zindex_and_image);\n    // Calculate the group counts\n    i = 0;\n    while (i < self->count) {\n        id_type image_id = self->render_data[i].image_id, start = i;\n        if (start == self->count - 1) i = self->count;\n        else {\n            while (i < self->count - 1 && self->render_data[++i].image_id == image_id) {}\n        }\n        self->render_data[start].group_count = i - start;\n    }\n    return true;\n}\n\n// }}}\n\n// Image lifetime/scrolling {{{\n\nstatic inline void\nfilter_refs(GraphicsManager *self, const void* data, bool free_images, bool (*filter_func)(const ImageRef*, Image*, const void*, CellPixelSize), CellPixelSize cell) {\n    for (size_t i = self->image_count; i-- > 0;) {\n        Image *img = self->images + i;\n        for (size_t j = img->refcnt; j-- > 0;) {\n            ImageRef *ref = img->refs + j;\n            if (filter_func(ref, img, data, cell)) {\n                remove_i_from_array(img->refs, j, img->refcnt);\n                self->layers_dirty = true;\n            }\n        }\n        if (img->refcnt == 0 && (free_images || img->client_id == 0)) remove_image(self, i);\n    }\n}\n\nstatic inline void\nmodify_refs(GraphicsManager *self, const void* data, bool free_images, bool (*filter_func)(ImageRef*, Image*, const void*, CellPixelSize), CellPixelSize cell) {\n    for (size_t i = self->image_count; i-- > 0;) {\n        Image *img = self->images + i;\n        for (size_t j = img->refcnt; j-- > 0;) {\n            if (filter_func(img->refs + j, img, data, cell)) remove_i_from_array(img->refs, j, img->refcnt);\n        }\n        if (img->refcnt == 0 && (free_images || img->client_id == 0)) remove_image(self, i);\n    }\n}\n\n\nstatic inline bool\nscroll_filter_func(ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    ScrollData *d = (ScrollData*)data;\n    ref->start_row += d->amt;\n    return ref->start_row + (int32_t)ref->effective_num_rows <= d->limit;\n}\n\nstatic inline bool\nref_within_region(const ImageRef *ref, index_type margin_top, index_type margin_bottom) {\n    return ref->start_row >= (int32_t)margin_top && ref->start_row + ref->effective_num_rows <= margin_bottom;\n}\n\nstatic inline bool\nref_outside_region(const ImageRef *ref, index_type margin_top, index_type margin_bottom) {\n    return ref->start_row + ref->effective_num_rows <= margin_top || ref->start_row > (int32_t)margin_bottom;\n}\n\nstatic inline bool\nscroll_filter_margins_func(ImageRef* ref, Image* img, const void* data, CellPixelSize cell) {\n    ScrollData *d = (ScrollData*)data;\n    if (ref_within_region(ref, d->margin_top, d->margin_bottom)) {\n        ref->start_row += d->amt;\n        if (ref_outside_region(ref, d->margin_top, d->margin_bottom)) return true;\n        // Clip the image if scrolling has resulted in part of it being outside the page area\n        uint32_t clip_amt, clipped_rows;\n        if (ref->start_row < (int32_t)d->margin_top) {\n            // image moved up\n            clipped_rows = d->margin_top - ref->start_row;\n            clip_amt = cell.height * clipped_rows;\n            if (ref->src_height <= clip_amt) return true;\n            ref->src_y += clip_amt; ref->src_height -= clip_amt;\n            ref->effective_num_rows -= clipped_rows;\n            update_src_rect(ref, img);\n            ref->start_row += clipped_rows;\n        } else if (ref->start_row + ref->effective_num_rows > d->margin_bottom) {\n            // image moved down\n            clipped_rows = ref->start_row + ref->effective_num_rows - d->margin_bottom;\n            clip_amt = cell.height * clipped_rows;\n            if (ref->src_height <= clip_amt) return true;\n            ref->src_height -= clip_amt;\n            ref->effective_num_rows -= clipped_rows;\n            update_src_rect(ref, img);\n        }\n        return ref_outside_region(ref, d->margin_top, d->margin_bottom);\n    }\n    return false;\n}\n\nvoid\ngrman_scroll_images(GraphicsManager *self, const ScrollData *data, CellPixelSize cell) {\n    if (self->image_count) {\n        self->layers_dirty = true;\n        modify_refs(self, data, true, data->has_margins ? scroll_filter_margins_func : scroll_filter_func, cell);\n    }\n}\n\nstatic inline bool\nclear_filter_func(const ImageRef *ref, Image UNUSED *img, const void UNUSED *data, CellPixelSize cell UNUSED) {\n    return ref->start_row + (int32_t)ref->effective_num_rows > 0;\n}\n\nstatic inline bool\nclear_all_filter_func(const ImageRef *ref UNUSED, Image UNUSED *img, const void UNUSED *data, CellPixelSize cell UNUSED) {\n    return true;\n}\n\nvoid\ngrman_clear(GraphicsManager *self, bool all, CellPixelSize cell) {\n    filter_refs(self, NULL, true, all ? clear_all_filter_func : clear_filter_func, cell);\n}\n\nstatic inline bool\nid_filter_func(const ImageRef UNUSED *ref, Image *img, const void *data, CellPixelSize cell UNUSED) {\n    uint32_t iid = *(uint32_t*)data;\n    return img->client_id == iid;\n}\n\nstatic inline bool\nx_filter_func(const ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    const GraphicsCommand *g = data;\n    return ref->start_column <= (int32_t)g->x_offset - 1 && ((int32_t)g->x_offset - 1) < ((int32_t)(ref->start_column + ref->effective_num_cols));\n}\n\nstatic inline bool\ny_filter_func(const ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    const GraphicsCommand *g = data;\n    return ref->start_row <= (int32_t)g->y_offset - 1 && ((int32_t)(g->y_offset - 1 < ref->start_row + ref->effective_num_rows));\n}\n\nstatic inline bool\nz_filter_func(const ImageRef *ref, Image UNUSED *img, const void *data, CellPixelSize cell UNUSED) {\n    const GraphicsCommand *g = data;\n    return ref->z_index == g->z_index;\n}\n\n\nstatic inline bool\npoint_filter_func(const ImageRef *ref, Image *img, const void *data, CellPixelSize cell) {\n    return x_filter_func(ref, img, data, cell) && y_filter_func(ref, img, data, cell);\n}\n\nstatic inline bool\npoint3d_filter_func(const ImageRef *ref, Image *img, const void *data, CellPixelSize cell) {\n    return z_filter_func(ref, img, data, cell) && point_filter_func(ref, img, data, cell);\n}\n\n\nstatic void\nhandle_delete_command(GraphicsManager *self, const GraphicsCommand *g, Cursor *c, bool *is_dirty, CellPixelSize cell) {\n    static GraphicsCommand d;\n    switch (g->delete_action) {\n#define I(u, data, func) filter_refs(self, data, g->delete_action == u, func, cell); *is_dirty = true; break\n#define D(l, u, data, func) case l: case u: I(u, data, func)\n#define G(l, u, func) D(l, u, g, func)\n        case 0:\n        D('a', 'A', NULL, clear_filter_func);\n        D('i', 'I', &g->id, id_filter_func);\n        G('p', 'P', point_filter_func);\n        G('q', 'Q', point3d_filter_func);\n        G('x', 'X', x_filter_func);\n        G('y', 'Y', y_filter_func);\n        G('z', 'Z', z_filter_func);\n        case 'c':\n        case 'C':\n            d.x_offset = c->x + 1; d.y_offset = c->y + 1;\n            I('C', &d, point_filter_func);\n        default:\n            REPORT_ERROR(\"Unknown graphics command delete action: %c\", g->delete_action);\n            break;\n#undef G\n#undef D\n#undef I\n    }\n    if (!self->image_count && self->count) self->count = 0;\n}\n\n// }}}\n\nvoid\ngrman_resize(GraphicsManager *self, index_type UNUSED old_lines, index_type UNUSED lines, index_type UNUSED old_columns, index_type UNUSED columns) {\n    self->layers_dirty = true;\n}\n\nvoid\ngrman_rescale(GraphicsManager *self, CellPixelSize cell) {\n    ImageRef *ref; Image *img;\n    self->layers_dirty = true;\n    for (size_t i = self->image_count; i-- > 0;) {\n        img = self->images + i;\n        for (size_t j = img->refcnt; j-- > 0;) {\n            ref = img->refs + j;\n            ref->cell_x_offset = MIN(ref->cell_x_offset, cell.width - 1);\n            ref->cell_y_offset = MIN(ref->cell_y_offset, cell.height - 1);\n            update_dest_rect(ref, ref->num_cols, ref->num_rows, cell);\n        }\n    }\n}\n\nconst char*\ngrman_handle_command(GraphicsManager *self, const GraphicsCommand *g, const uint8_t *payload, Cursor *c, bool *is_dirty, CellPixelSize cell) {\n    const char *ret = NULL;\n\n    switch(g->action) {\n        case 0:\n        case 't':\n        case 'T':\n        case 'q': {\n            uint32_t iid = g->id, q_iid = iid;\n            if (g->action == 'q') { iid = 0; if (!q_iid) { REPORT_ERROR(\"Query graphics command without image id\"); break; } }\n            Image *image = handle_add_command(self, g, payload, is_dirty, iid);\n            ret = create_add_response(self, image != NULL, g->action == 'q' ? q_iid: self->last_init_graphics_command.id);\n            if (self->last_init_graphics_command.action == 'T' && image && image->data_loaded) handle_put_command(self, &self->last_init_graphics_command, c, is_dirty, image, cell);\n            id_type added_image_id = image ? image->internal_id : 0;\n            if (g->action == 'q') remove_images(self, add_trim_predicate, 0);\n            if (self->used_storage > STORAGE_LIMIT) apply_storage_quota(self, STORAGE_LIMIT, added_image_id);\n            break;\n        }\n        case 'p':\n            if (!g->id) {\n                REPORT_ERROR(\"Put graphics command without image id\");\n                break;\n            }\n            handle_put_command(self, g, c, is_dirty, NULL, cell);\n            ret = create_add_response(self, true, g->id);\n            break;\n        case 'd':\n            handle_delete_command(self, g, c, is_dirty, cell);\n            break;\n        default:\n            REPORT_ERROR(\"Unknown graphics command action: %c\", g->action);\n            break;\n    }\n    return ret;\n}\n\n\n// Boilerplate {{{\nstatic PyObject *\nnew(PyTypeObject UNUSED *type, PyObject UNUSED *args, PyObject UNUSED *kwds) {\n    PyObject *ans = (PyObject*)grman_alloc();\n    if (ans == NULL) PyErr_NoMemory();\n    return ans;\n}\n\nstatic inline PyObject*\nimage_as_dict(Image *img) {\n#define U(x) #x, img->x\n    return Py_BuildValue(\"{sI sI sI sI sK sI sO sO sN}\",\n        U(texture_id), U(client_id), U(width), U(height), U(internal_id), U(refcnt),\n        \"data_loaded\", img->data_loaded ? Py_True : Py_False,\n        \"is_4byte_aligned\", img->load_data.is_4byte_aligned ? Py_True : Py_False,\n        \"data\", Py_BuildValue(\"y#\", img->load_data.data, img->load_data.data_sz)\n    );\n#undef U\n\n}\n\n#define W(x) static PyObject* py##x(GraphicsManager UNUSED *self, PyObject *args)\n#define PA(fmt, ...) if(!PyArg_ParseTuple(args, fmt, __VA_ARGS__)) return NULL;\n\nW(image_for_client_id) {\n    unsigned long id = PyLong_AsUnsignedLong(args);\n    bool existing = false;\n    Image *img = find_or_create_image(self, id, &existing);\n    if (!existing) { Py_RETURN_NONE; }\n    return image_as_dict(img);\n}\n\nW(shm_write) {\n    const char *name, *data;\n    Py_ssize_t sz;\n    PA(\"ss#\", &name, &data, &sz);\n    int fd = shm_open(name, O_CREAT | O_RDWR, S_IRUSR | S_IWUSR);\n    if (fd == -1) { PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    int ret = ftruncate(fd, sz);\n    if (ret != 0) { safe_close(fd, __FILE__, __LINE__); PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    void *addr = mmap(0, sz, PROT_WRITE, MAP_SHARED, fd, 0);\n    if (addr == MAP_FAILED) { safe_close(fd, __FILE__, __LINE__); PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    memcpy(addr, data, sz);\n    if (munmap(addr, sz) != 0) { safe_close(fd, __FILE__, __LINE__); PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    safe_close(fd, __FILE__, __LINE__);\n    Py_RETURN_NONE;\n}\n\nW(shm_unlink) {\n    char *name;\n    PA(\"s\", &name);\n    int ret = shm_unlink(name);\n    if (ret == -1) { PyErr_SetFromErrnoWithFilename(PyExc_OSError, name); return NULL; }\n    Py_RETURN_NONE;\n}\n\nW(set_send_to_gpu) {\n    send_to_gpu = PyObject_IsTrue(args) ? true : false;\n    Py_RETURN_NONE;\n}\n\nW(update_layers) {\n    unsigned int scrolled_by, sx, sy; float xstart, ystart, dx, dy;\n    CellPixelSize cell;\n    PA(\"IffffIIII\", &scrolled_by, &xstart, &ystart, &dx, &dy, &sx, &sy, &cell.width, &cell.height);\n    grman_update_layers(self, scrolled_by, xstart, ystart, dx, dy, sx, sy, cell);\n    PyObject *ans = PyTuple_New(self->count);\n    for (size_t i = 0; i < self->count; i++) {\n        ImageRenderData *r = self->render_data + i;\n#define R(offset) Py_BuildValue(\"{sf sf sf sf}\", \"left\", r->vertices[offset + 8], \"top\", r->vertices[offset + 1], \"right\", r->vertices[offset], \"bottom\", r->vertices[offset + 5])\n        PyTuple_SET_ITEM(ans, i,\n            Py_BuildValue(\"{sN sN sI si sK}\", \"src_rect\", R(0), \"dest_rect\", R(2), \"group_count\", r->group_count, \"z_index\", r->z_index, \"image_id\", r->image_id)\n        );\n#undef R\n    }\n    return ans;\n}\n\n#define M(x, va) {#x, (PyCFunction)py##x, va, \"\"}\n\nstatic PyMethodDef methods[] = {\n    M(image_for_client_id, METH_O),\n    M(update_layers, METH_VARARGS),\n    {NULL}  /* Sentinel */\n};\n\nstatic PyMemberDef members[] = {\n    {\"image_count\", T_PYSSIZET, offsetof(GraphicsManager, image_count), 0, \"image_count\"},\n    {NULL},\n};\n\nPyTypeObject GraphicsManager_Type = {\n    PyVarObject_HEAD_INIT(NULL, 0)\n    .tp_name = \"fast_data_types.GraphicsManager\",\n    .tp_basicsize = sizeof(GraphicsManager),\n    .tp_dealloc = (destructor)dealloc,\n    .tp_flags = Py_TPFLAGS_DEFAULT,\n    .tp_doc = \"GraphicsManager\",\n    .tp_new = new,\n    .tp_methods = methods,\n    .tp_members = members,\n};\n\nstatic PyMethodDef module_methods[] = {\n    M(shm_write, METH_VARARGS),\n    M(shm_unlink, METH_VARARGS),\n    M(set_send_to_gpu, METH_O),\n    {NULL, NULL, 0, NULL}        /* Sentinel */\n};\n\n\nbool\ninit_graphics(PyObject *module) {\n    if (PyType_Ready(&GraphicsManager_Type) < 0) return false;\n    if (PyModule_AddObject(module, \"GraphicsManager\", (PyObject *)&GraphicsManager_Type) != 0) return false;\n    if (PyModule_AddFunctions(module, module_methods) != 0) return false;\n    Py_INCREF(&GraphicsManager_Type);\n    return true;\n}\n// }}}\n"], "filenames": ["docs/changelog.rst", "kitty/graphics.c"], "buggy_code_start_loc": [27, 405], "buggy_code_end_loc": [27, 406], "fixing_code_start_loc": [28, 405], "fixing_code_end_loc": [31, 406], "type": "NVD-CWE-Other", "message": "The Graphics Protocol feature in graphics.c in kitty before 0.19.3 allows remote attackers to execute arbitrary code because a filename containing special characters can be included in an error message.", "other": {"cve": {"id": "CVE-2020-35605", "sourceIdentifier": "cve@mitre.org", "published": "2020-12-21T20:15:12.553", "lastModified": "2022-09-01T19:43:27.120", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The Graphics Protocol feature in graphics.c in kitty before 0.19.3 allows remote attackers to execute arbitrary code because a filename containing special characters can be included in an error message."}, {"lang": "es", "value": "La funcionalidad Graphics Protocol en el archivo graphics.c en kitty versiones anteriores a 0.19.3, permite a atacantes remotos ejecutar c\u00f3digo arbitrario porque un nombre de archivo que contiene caracteres especiales puede ser incluido en un mensaje de error"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-Other"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kitty_project:kitty:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.19.3", "matchCriteriaId": "8506C3D9-8A4A-45A9-B3B8-89F1D45E0E5F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/kovidgoyal/kitty/commit/82c137878c2b99100a3cdc1c0f0efea069313901", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kovidgoyal/kitty/issues/3128", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4819", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kovidgoyal/kitty/commit/82c137878c2b99100a3cdc1c0f0efea069313901"}}