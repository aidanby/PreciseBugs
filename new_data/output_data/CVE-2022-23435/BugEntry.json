{"buggy_code": ["#include \"gif.h\"\n\nstatic bool updateGCB(GifInfo *info, uint_fast32_t *lastAllocatedGCBIndex) {\n\tif (*lastAllocatedGCBIndex < info->gifFilePtr->ImageCount) {\n\t\tGraphicsControlBlock *tmpInfos = reallocarray(info->controlBlock, info->gifFilePtr->ImageCount + 1, sizeof(GraphicsControlBlock));\n\t\tif (tmpInfos == NULL) {\n\t\t\tinfo->gifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\t\t\treturn false;\n\t\t}\n\t\t*lastAllocatedGCBIndex = info->gifFilePtr->ImageCount;\n\t\tinfo->controlBlock = tmpInfos;\n\t\tsetGCBDefaults(&info->controlBlock[info->gifFilePtr->ImageCount]);\n\t}\n\treturn true;\n}\n\nvoid DDGifSlurp(GifInfo *info, bool decode, bool exitAfterFrame) {\n\tGifRecordType RecordType;\n\tGifByteType *ExtData;\n\tint ExtFunction;\n\tGifFileType *gifFilePtr;\n\tgifFilePtr = info->gifFilePtr;\n\tuint_fast32_t lastAllocatedGCBIndex = 0;\n\tdo {\n\t\tif (DGifGetRecordType(gifFilePtr, &RecordType) == GIF_ERROR && gifFilePtr->Error != D_GIF_ERR_WRONG_RECORD) {\n\t\t\tbreak;\n\t\t}\n\t\tbool isInitialPass = !decode && !exitAfterFrame;\n\t\tswitch (RecordType) {\n\t\t\tcase IMAGE_DESC_RECORD_TYPE:\n\n\t\t\t\tif (DGifGetImageDesc(gifFilePtr, isInitialPass) == GIF_ERROR) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (isInitialPass) {\n\t\t\t\t\tif (!updateGCB(info, &lastAllocatedGCBIndex)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (decode) {\n\t\t\t\t\tconst uint_fast32_t newRasterSize = gifFilePtr->Image.Width * gifFilePtr->Image.Height;\n\t\t\t\t\tif (newRasterSize == 0) {\n\t\t\t\t\t\tfree(info->rasterBits);\n\t\t\t\t\t\tinfo->rasterBits = NULL;\n\t\t\t\t\t\tinfo->rasterSize = newRasterSize;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;\n\t\t\t\t\tconst int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;\n\t\t\t\t\tif (newRasterSize > info->rasterSize || widthOverflow > 0 || heightOverflow > 0) {\n\t\t\t\t\t\tvoid *tmpRasterBits = reallocarray(info->rasterBits, newRasterSize, sizeof(GifPixelType));\n\t\t\t\t\t\tif (tmpRasterBits == NULL) {\n\t\t\t\t\t\t\tgifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinfo->rasterBits = tmpRasterBits;\n\t\t\t\t\t\tinfo->rasterSize = newRasterSize;\n\t\t\t\t\t}\n\t\t\t\t\tif (gifFilePtr->Image.Interlace) {\n\t\t\t\t\t\tuint_fast16_t i, j;\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * The way an interlaced image should be read -\n\t\t\t\t\t\t * offsets and jumps...\n\t\t\t\t\t\t */\n\t\t\t\t\t\tuint_fast8_t InterlacedOffset[] = {0, 4, 2, 1};\n\t\t\t\t\t\tuint_fast8_t InterlacedJumps[] = {8, 8, 4, 2};\n\t\t\t\t\t\t/* Need to perform 4 passes on the image */\n\t\t\t\t\t\tfor (i = 0; i < 4; i++)\n\t\t\t\t\t\t\tfor (j = InterlacedOffset[i]; j < gifFilePtr->Image.Height; j += InterlacedJumps[i]) {\n\t\t\t\t\t\t\t\tif (DGifGetLine(gifFilePtr, info->rasterBits + j * gifFilePtr->Image.Width, gifFilePtr->Image.Width) == GIF_ERROR)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (DGifGetLine(gifFilePtr, info->rasterBits, gifFilePtr->Image.Width * gifFilePtr->Image.Height) == GIF_ERROR) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (info->sampleSize > 1) {\n\t\t\t\t\t\tunsigned char *dst = info->rasterBits;\n\t\t\t\t\t\tunsigned char *src = info->rasterBits;\n\t\t\t\t\t\tunsigned char *const srcEndImage = info->rasterBits + gifFilePtr->Image.Width * gifFilePtr->Image.Height;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tunsigned char *srcNextLineStart = src + gifFilePtr->Image.Width * info->sampleSize;\n\t\t\t\t\t\t\tunsigned char *const srcEndLine = src + gifFilePtr->Image.Width;\n\t\t\t\t\t\t\tunsigned char *dstEndLine = dst + gifFilePtr->Image.Width / info->sampleSize;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t*dst = *src;\n\t\t\t\t\t\t\t\tdst++;\n\t\t\t\t\t\t\t\tsrc += info->sampleSize;\n\t\t\t\t\t\t\t} while (src < srcEndLine);\n\t\t\t\t\t\t\tdst = dstEndLine;\n\t\t\t\t\t\t\tsrc = srcNextLineStart;\n\t\t\t\t\t\t} while (src < srcEndImage);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (DGifGetCodeNext(gifFilePtr, &ExtData) == GIF_ERROR) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (ExtData != NULL);\n\t\t\t\t\tif (exitAfterFrame) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase EXTENSION_RECORD_TYPE:\n\t\t\t\tif (DGifGetExtension(gifFilePtr, &ExtFunction, &ExtData) == GIF_ERROR) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (isInitialPass) {\n\t\t\t\t\tupdateGCB(info, &lastAllocatedGCBIndex);\n\t\t\t\t\tif (readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (ExtData != NULL) {\n\t\t\t\t\tif (DGifGetExtensionNext(gifFilePtr, &ExtData) == GIF_ERROR) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (isInitialPass && readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase TERMINATE_RECORD_TYPE:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t} while (RecordType != TERMINATE_RECORD_TYPE);\n\n\tinfo->rewindFunction(info);\n}\n\nstatic int readExtensions(int ExtFunction, GifByteType *ExtData, GifInfo *info) {\n\tif (ExtData == NULL) {\n\t\treturn GIF_OK;\n\t}\n\tif (ExtFunction == GRAPHICS_EXT_FUNC_CODE) {\n\t\tGraphicsControlBlock *GCB = &info->controlBlock[info->gifFilePtr->ImageCount];\n\t\tif (DGifExtensionToGCB(ExtData[0], ExtData + 1, GCB) == GIF_ERROR) {\n\t\t\treturn GIF_ERROR;\n\t\t}\n\n\t\tGCB->DelayTime = GCB->DelayTime > 1 ? GCB->DelayTime * 10 : DEFAULT_FRAME_DURATION_MS;\n\t}\n\telse if (ExtFunction == COMMENT_EXT_FUNC_CODE) {\n\t\tif (getComment(ExtData, info) == GIF_ERROR) {\n\t\t\tinfo->gifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\t\t\treturn GIF_ERROR;\n\t\t}\n\t}\n\telse if (ExtFunction == APPLICATION_EXT_FUNC_CODE) {\n\t\tchar const *string = (char const *) (ExtData + 1);\n\t\tif (strncmp(\"NETSCAPE2.0\", string, ExtData[0]) == 0\n\t\t    || strncmp(\"ANIMEXTS1.0\", string, ExtData[0]) == 0) {\n\t\t\tif (DGifGetExtensionNext(info->gifFilePtr, &ExtData) == GIF_ERROR) {\n\t\t\t\treturn GIF_ERROR;\n\t\t\t}\n\t\t\tif (ExtData && ExtData[0] == 3 && ExtData[1] == 1) {\n\t\t\t\tuint_fast16_t loopCount = (uint_fast16_t) (ExtData[2] + (ExtData[3] << 8));\n\t\t\t\tif (loopCount) {\n\t\t\t\t\tloopCount++;\n\t\t\t\t}\n\t\t\t\tinfo->loopCount = loopCount;\n\t\t\t}\n\t\t}\n\t}\n\treturn GIF_OK;\n}\n\nstatic int getComment(GifByteType *Bytes, GifInfo *info) {\n\tunsigned int len = (unsigned int) Bytes[0];\n\tsize_t offset = info->comment != NULL ? strlen(info->comment) : 0;\n\tchar *ret = reallocarray(info->comment, len + offset + 1, sizeof(char));\n\tif (ret != NULL) {\n\t\tmemcpy(ret + offset, &Bytes[1], len);\n\t\tret[len + offset] = 0;\n\t\tinfo->comment = ret;\n\t\treturn GIF_OK;\n\t}\n\tinfo->gifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\treturn GIF_ERROR;\n}\n"], "fixing_code": ["#include \"gif.h\"\n#define COMMENT_LENGTH_MAX 2048\n\nstatic bool updateGCB(GifInfo *info, uint_fast32_t *lastAllocatedGCBIndex) {\n\tif (*lastAllocatedGCBIndex < info->gifFilePtr->ImageCount) {\n\t\tGraphicsControlBlock *tmpInfos = reallocarray(info->controlBlock, info->gifFilePtr->ImageCount + 1, sizeof(GraphicsControlBlock));\n\t\tif (tmpInfos == NULL) {\n\t\t\tinfo->gifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\t\t\treturn false;\n\t\t}\n\t\t*lastAllocatedGCBIndex = info->gifFilePtr->ImageCount;\n\t\tinfo->controlBlock = tmpInfos;\n\t\tsetGCBDefaults(&info->controlBlock[info->gifFilePtr->ImageCount]);\n\t}\n\treturn true;\n}\n\nvoid DDGifSlurp(GifInfo *info, bool decode, bool exitAfterFrame) {\n\tGifRecordType RecordType;\n\tGifByteType *ExtData;\n\tint ExtFunction;\n\tGifFileType *gifFilePtr;\n\tgifFilePtr = info->gifFilePtr;\n\tuint_fast32_t lastAllocatedGCBIndex = 0;\n\tdo {\n\t\tif (DGifGetRecordType(gifFilePtr, &RecordType) == GIF_ERROR && gifFilePtr->Error != D_GIF_ERR_WRONG_RECORD) {\n\t\t\tbreak;\n\t\t}\n\t\tbool isInitialPass = !decode && !exitAfterFrame;\n\t\tswitch (RecordType) {\n\t\t\tcase IMAGE_DESC_RECORD_TYPE:\n\n\t\t\t\tif (DGifGetImageDesc(gifFilePtr, isInitialPass) == GIF_ERROR) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (isInitialPass) {\n\t\t\t\t\tif (!updateGCB(info, &lastAllocatedGCBIndex)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (decode) {\n\t\t\t\t\tconst uint_fast32_t newRasterSize = gifFilePtr->Image.Width * gifFilePtr->Image.Height;\n\t\t\t\t\tif (newRasterSize == 0) {\n\t\t\t\t\t\tfree(info->rasterBits);\n\t\t\t\t\t\tinfo->rasterBits = NULL;\n\t\t\t\t\t\tinfo->rasterSize = newRasterSize;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst int_fast32_t widthOverflow = gifFilePtr->Image.Width - info->originalWidth;\n\t\t\t\t\tconst int_fast32_t heightOverflow = gifFilePtr->Image.Height - info->originalHeight;\n\t\t\t\t\tif (newRasterSize > info->rasterSize || widthOverflow > 0 || heightOverflow > 0) {\n\t\t\t\t\t\tvoid *tmpRasterBits = reallocarray(info->rasterBits, newRasterSize, sizeof(GifPixelType));\n\t\t\t\t\t\tif (tmpRasterBits == NULL) {\n\t\t\t\t\t\t\tgifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinfo->rasterBits = tmpRasterBits;\n\t\t\t\t\t\tinfo->rasterSize = newRasterSize;\n\t\t\t\t\t}\n\t\t\t\t\tif (gifFilePtr->Image.Interlace) {\n\t\t\t\t\t\tuint_fast16_t i, j;\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * The way an interlaced image should be read -\n\t\t\t\t\t\t * offsets and jumps...\n\t\t\t\t\t\t */\n\t\t\t\t\t\tuint_fast8_t InterlacedOffset[] = {0, 4, 2, 1};\n\t\t\t\t\t\tuint_fast8_t InterlacedJumps[] = {8, 8, 4, 2};\n\t\t\t\t\t\t/* Need to perform 4 passes on the image */\n\t\t\t\t\t\tfor (i = 0; i < 4; i++)\n\t\t\t\t\t\t\tfor (j = InterlacedOffset[i]; j < gifFilePtr->Image.Height; j += InterlacedJumps[i]) {\n\t\t\t\t\t\t\t\tif (DGifGetLine(gifFilePtr, info->rasterBits + j * gifFilePtr->Image.Width, gifFilePtr->Image.Width) == GIF_ERROR)\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (DGifGetLine(gifFilePtr, info->rasterBits, gifFilePtr->Image.Width * gifFilePtr->Image.Height) == GIF_ERROR) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (info->sampleSize > 1) {\n\t\t\t\t\t\tunsigned char *dst = info->rasterBits;\n\t\t\t\t\t\tunsigned char *src = info->rasterBits;\n\t\t\t\t\t\tunsigned char *const srcEndImage = info->rasterBits + gifFilePtr->Image.Width * gifFilePtr->Image.Height;\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tunsigned char *srcNextLineStart = src + gifFilePtr->Image.Width * info->sampleSize;\n\t\t\t\t\t\t\tunsigned char *const srcEndLine = src + gifFilePtr->Image.Width;\n\t\t\t\t\t\t\tunsigned char *dstEndLine = dst + gifFilePtr->Image.Width / info->sampleSize;\n\t\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\t\t*dst = *src;\n\t\t\t\t\t\t\t\tdst++;\n\t\t\t\t\t\t\t\tsrc += info->sampleSize;\n\t\t\t\t\t\t\t} while (src < srcEndLine);\n\t\t\t\t\t\t\tdst = dstEndLine;\n\t\t\t\t\t\t\tsrc = srcNextLineStart;\n\t\t\t\t\t\t} while (src < srcEndImage);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (DGifGetCodeNext(gifFilePtr, &ExtData) == GIF_ERROR) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} while (ExtData != NULL);\n\t\t\t\t\tif (exitAfterFrame) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase EXTENSION_RECORD_TYPE:\n\t\t\t\tif (DGifGetExtension(gifFilePtr, &ExtFunction, &ExtData) == GIF_ERROR) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (isInitialPass) {\n\t\t\t\t\tupdateGCB(info, &lastAllocatedGCBIndex);\n\t\t\t\t\tif (readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twhile (ExtData != NULL) {\n\t\t\t\t\tif (DGifGetExtensionNext(gifFilePtr, &ExtData) == GIF_ERROR) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (isInitialPass && readExtensions(ExtFunction, ExtData, info) == GIF_ERROR) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase TERMINATE_RECORD_TYPE:\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t} while (RecordType != TERMINATE_RECORD_TYPE);\n\n\tinfo->rewindFunction(info);\n}\n\nstatic int readExtensions(int ExtFunction, GifByteType *ExtData, GifInfo *info) {\n\tif (ExtData == NULL) {\n\t\treturn GIF_OK;\n\t}\n\tif (ExtFunction == GRAPHICS_EXT_FUNC_CODE) {\n\t\tGraphicsControlBlock *GCB = &info->controlBlock[info->gifFilePtr->ImageCount];\n\t\tif (DGifExtensionToGCB(ExtData[0], ExtData + 1, GCB) == GIF_ERROR) {\n\t\t\treturn GIF_ERROR;\n\t\t}\n\n\t\tGCB->DelayTime = GCB->DelayTime > 1 ? GCB->DelayTime * 10 : DEFAULT_FRAME_DURATION_MS;\n\t}\n\telse if (ExtFunction == COMMENT_EXT_FUNC_CODE) {\n\t\tif (getComment(ExtData, info) == GIF_ERROR) {\n\t\t\tinfo->gifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\t\t\treturn GIF_ERROR;\n\t\t}\n\t}\n\telse if (ExtFunction == APPLICATION_EXT_FUNC_CODE) {\n\t\tchar const *string = (char const *) (ExtData + 1);\n\t\tif (strncmp(\"NETSCAPE2.0\", string, ExtData[0]) == 0\n\t\t    || strncmp(\"ANIMEXTS1.0\", string, ExtData[0]) == 0) {\n\t\t\tif (DGifGetExtensionNext(info->gifFilePtr, &ExtData) == GIF_ERROR) {\n\t\t\t\treturn GIF_ERROR;\n\t\t\t}\n\t\t\tif (ExtData && ExtData[0] == 3 && ExtData[1] == 1) {\n\t\t\t\tuint_fast16_t loopCount = (uint_fast16_t) (ExtData[2] + (ExtData[3] << 8));\n\t\t\t\tif (loopCount) {\n\t\t\t\t\tloopCount++;\n\t\t\t\t}\n\t\t\t\tinfo->loopCount = loopCount;\n\t\t\t}\n\t\t}\n\t}\n\treturn GIF_OK;\n}\n\nstatic int getComment(GifByteType *Bytes, GifInfo *info) {\n\tunsigned int length = (unsigned int) Bytes[0];\n\tsize_t offset = info->comment != NULL ? strlen(info->comment) : 0;\n    unsigned int newLength = length + offset + 1;\n    if (newLength > COMMENT_LENGTH_MAX) {\n\t\treturn GIF_OK;\n\t}\n    char *ret = reallocarray(info->comment, newLength, sizeof(char));\n\tif (ret != NULL) {\n\t\tmemcpy(ret + offset, &Bytes[1], length);\n\t\tret[length + offset] = 0;\n\t\tinfo->comment = ret;\n\t\treturn GIF_OK;\n\t}\n\tinfo->gifFilePtr->Error = D_GIF_ERR_NOT_ENOUGH_MEM;\n\treturn GIF_ERROR;\n}\n"], "filenames": ["android-gif-drawable/src/main/c/decoding.c"], "buggy_code_start_loc": [1], "buggy_code_end_loc": [186], "fixing_code_start_loc": [2], "fixing_code_end_loc": [191], "type": "NVD-CWE-noinfo", "message": "decoding.c in android-gif-drawable before 1.2.24 does not limit the maximum length of a comment, leading to denial of service.", "other": {"cve": {"id": "CVE-2022-23435", "sourceIdentifier": "cve@mitre.org", "published": "2022-01-19T01:15:09.747", "lastModified": "2022-01-25T19:36:21.063", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "decoding.c in android-gif-drawable before 1.2.24 does not limit the maximum length of a comment, leading to denial of service."}, {"lang": "es", "value": "El archivo decoding.c en android-gif-drawable versiones anteriores a 1.2.24, no limita la longitud m\u00e1xima de un comentario, conllevando a una denegaci\u00f3n de servicio"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:android-gif-drawable_project:android-gif-drawable:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.24", "matchCriteriaId": "4E3266C9-0849-432C-A2B1-9E4633D0F6E0"}]}]}], "references": [{"url": "https://github.com/koral--/android-gif-drawable/commit/9f0f0c89e6fa38548163771feeb4bde84b828887", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/koral--/android-gif-drawable/compare/v1.2.23...v1.2.24", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/koral--/android-gif-drawable/commit/9f0f0c89e6fa38548163771feeb4bde84b828887"}}