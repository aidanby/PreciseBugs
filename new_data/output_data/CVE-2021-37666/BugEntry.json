{"buggy_code": ["/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <utility>\n#include <vector>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/variant.h\"\n#include \"tensorflow/core/framework/variant_encode_decode.h\"\n#include \"tensorflow/core/framework/variant_op_registry.h\"\n#include \"tensorflow/core/kernels/concat_lib.h\"\n#include \"tensorflow/core/kernels/ragged_tensor_variant.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/util/tensor_ops_util.h\"\n\nnamespace tensorflow {\nnamespace {\n\ntemplate <typename VALUE_TYPE, typename SPLIT_TYPE>\nStatus UnbatchRaggedZerothDim(\n    const RaggedTensorVariant& batched_ragged,\n    std::vector<RaggedTensorVariant>* ragged_components) {\n  // Set up the component Ragged Tensors.\n  int ragged_rank = batched_ragged.ragged_rank();\n  auto batched_splits_top_vec = batched_ragged.splits(0).vec<SPLIT_TYPE>();\n  int num_components = batched_splits_top_vec.size() - 1;\n  int num_splits = ragged_rank - 1;\n  ragged_components->resize(num_components);\n  for (RaggedTensorVariant& ragged_component : *ragged_components) {\n    ragged_component.mutable_nested_splits()->reserve(num_splits);\n  }\n  const auto& batched_flat = batched_ragged.values().flat<VALUE_TYPE>();\n  int num_inner_elems = batched_ragged.values().NumElements();\n  if (batched_ragged.values().dim_size(0) > 1) {\n    num_inner_elems /= batched_ragged.values().dim_size(0);\n  }\n  TensorShape values_shape = batched_ragged.values().shape();\n\n  // Corner case: ragged_rank == 1, e.g. [[1, 2, 3], [4, 5]]\n  if (num_splits == 0) {\n    for (int i = 0; i < num_components; i++) {\n      int start = batched_splits_top_vec(i);\n      int limit = batched_splits_top_vec(i + 1);\n      int num_values = limit - start;\n      values_shape.set_dim(0, num_values);\n      (*ragged_components)[i].set_values(\n          Tensor(DataTypeToEnum<VALUE_TYPE>::value, values_shape));\n      auto ragged_component_values_flat =\n          (*ragged_components)[i].mutable_values()->flat<VALUE_TYPE>();\n      for (int j = 0; j < num_values * num_inner_elems; j++) {\n        ragged_component_values_flat(j) =\n            batched_flat(j + start * num_inner_elems);\n      }\n    }\n    return Status::OK();\n  }\n\n  // Unbatch nested splits.\n  std::vector<typename TTypes<SPLIT_TYPE>::ConstVec> batched_splits_vec;\n  batched_splits_vec.reserve(ragged_rank);\n  for (int i = 0; i < ragged_rank; i++) {\n    batched_splits_vec.push_back(batched_ragged.splits(i).vec<SPLIT_TYPE>());\n  }\n  std::vector<int> index(num_splits, 1);\n  std::vector<int> ragged_component_values_size(num_components, 0);\n  for (int i = 0; i < num_components; i++) {\n    std::vector<typename TTypes<SPLIT_TYPE>::Vec> ragged_component_splits_vec;\n    ragged_component_splits_vec.reserve(num_splits);\n    int split_size = -1;\n    for (int j = 0; j < num_splits; j++) {\n      if (j == 0) {\n        split_size =\n            batched_splits_top_vec(i + 1) - batched_splits_top_vec(i) + 1;\n      } else {\n        // Update split size based on previous split.\n        int last_index = ragged_component_splits_vec[j - 1].size() - 1;\n        split_size = ragged_component_splits_vec[j - 1](last_index) + 1;\n      }\n      (*ragged_components)[i].append_splits(\n          Tensor(DataTypeToEnum<SPLIT_TYPE>::value, TensorShape({split_size})));\n      ragged_component_splits_vec.push_back(\n          (*ragged_components)[i].mutable_splits(j)->vec<SPLIT_TYPE>());\n      SPLIT_TYPE last_split_value = batched_splits_vec[j + 1](index[j] - 1);\n      ragged_component_splits_vec[j](0) = 0;\n      for (int k = 1; k < split_size; k++, index[j]++) {\n        ragged_component_splits_vec[j](k) =\n            batched_splits_vec[j + 1](index[j]) - last_split_value;\n      }\n    }\n    int last_split_size = ragged_component_splits_vec[num_splits - 1].size();\n    ragged_component_values_size[i] =\n        ragged_component_splits_vec[num_splits - 1](last_split_size - 1);\n  }\n\n  // Unbatch values.\n  int value_index = 0;\n  for (int i = 0; i < num_components; i++) {\n    int num_values = ragged_component_values_size[i];\n    values_shape.set_dim(0, num_values);\n    (*ragged_components)[i].set_values(\n        Tensor(DataTypeToEnum<VALUE_TYPE>::value, values_shape));\n    auto ragged_component_values_flat =\n        (*ragged_components)[i].mutable_values()->flat<VALUE_TYPE>();\n    for (int j = 0; j < num_values * num_inner_elems; j++, value_index++) {\n      ragged_component_values_flat(j) = batched_flat(value_index);\n    }\n  }\n\n  return Status::OK();\n}\n}  // namespace\n\ntemplate <typename VALUE_TYPE, typename SPLIT_TYPE>\nclass RaggedTensorToVariantOp : public OpKernel {\n public:\n  explicit RaggedTensorToVariantOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"batched_input\", &batched_input_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    // Read ragged_splits inputs.\n    OpInputList ragged_nested_splits_in;\n    OP_REQUIRES_OK(context, context->input_list(\"rt_nested_splits\",\n                                                &ragged_nested_splits_in));\n    const int ragged_nested_splits_len = ragged_nested_splits_in.size();\n    RaggedTensorVariant batched_ragged_input;\n    // Read ragged_values input.\n    batched_ragged_input.set_values(context->input(ragged_nested_splits_len));\n    batched_ragged_input.mutable_nested_splits()->reserve(\n        ragged_nested_splits_len);\n    for (int i = 0; i < ragged_nested_splits_len; i++) {\n      batched_ragged_input.append_splits(ragged_nested_splits_in[i]);\n    }\n\n    if (!batched_input_) {\n      // Encode as a Scalar Variant Tensor.\n      Tensor* encoded_scalar;\n      OP_REQUIRES_OK(context, context->allocate_output(0, TensorShape({}),\n                                                       &encoded_scalar));\n      encoded_scalar->scalar<Variant>()() = std::move(batched_ragged_input);\n      return;\n    }\n\n    // Unbatch the Ragged Tensor and encode the components.\n    std::vector<RaggedTensorVariant> unbatched_ragged_input;\n    auto batched_splits_top_vec =\n        batched_ragged_input.splits(0).vec<SPLIT_TYPE>();\n    int num_components = batched_splits_top_vec.size() - 1;\n    OP_REQUIRES(context, num_components >= 0,\n                errors::Internal(\"Invalid split argument.\"));\n    OP_REQUIRES_OK(context, UnbatchRaggedZerothDim<VALUE_TYPE, SPLIT_TYPE>(\n                                batched_ragged_input, &unbatched_ragged_input));\n\n    // Bundle the encoded scalar Variant Tensors into a rank-1 Variant Tensor.\n    Tensor* encoded_vector;\n    int output_size = unbatched_ragged_input.size();\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, TensorShape({output_size}),\n                                            &encoded_vector));\n    auto encoded_vector_t = encoded_vector->vec<Variant>();\n    for (int i = 0; i < output_size; i++) {\n      encoded_vector_t(i) = unbatched_ragged_input[i];\n    }\n  }\n\n private:\n  bool batched_input_;\n};\n\ntemplate <typename VALUE_TYPE, typename SPLIT_TYPE>\nclass RaggedTensorToVariantGradientOp : public OpKernel {\n public:\n  using OpKernel::OpKernel;\n\n  void Compute(OpKernelContext* context) override {\n    // Read inputs.\n    Tensor encoded_variant = context->input(0);\n    Tensor row_splits = context->input(1);\n    auto flat_row_splits = row_splits.flat<SPLIT_TYPE>();\n    TensorShape dense_values_shape;\n    OP_REQUIRES_OK(context,\n                   TensorShapeUtils::MakeShape(context->input(2).vec<int32>(),\n                                               &dense_values_shape));\n\n    const auto& flat_variants = encoded_variant.flat<Variant>();\n\n    // Get a Tensor containing the flat_values for each variant.\n    std::vector<Tensor> values;\n    for (int i = 0; i < flat_variants.size(); ++i) {\n      if (const auto* encoded = flat_variants(i).get<RaggedTensorVariant>()) {\n        values.push_back(encoded->values());\n      } else {\n        // Missing value: this happens if only some of the variant values\n        // generated by ragged_tensor_to_variant impacted the value that we're\n        // calculating the gradient for.  In this case, we will see a\n        // default-constructed variant; so treat it as a zero tensor with the\n        // appropriate shape.\n        const auto value_dtype = DataTypeToEnum<VALUE_TYPE>::v();\n        int piece_size = flat_row_splits(i + 1) - flat_row_splits(i);\n        TensorShape zeros_shape = dense_values_shape;\n        zeros_shape.set_dim(0, piece_size);\n        Tensor zero(value_dtype, zeros_shape);\n        zero.flat<VALUE_TYPE>() =\n            zero.flat<VALUE_TYPE>().constant(VALUE_TYPE());\n        values.push_back(zero);\n      }\n    }\n\n    if (values.size() == 1) {\n      // Just one flat_value tensor: return as-is.\n      context->set_output(0, values[0]);\n    } else {\n      // Multiple flat_values tensors: concatenate them together.\n      using Piece = typename TTypes<VALUE_TYPE, 2>::Matrix;\n      using ConstPiece = typename TTypes<VALUE_TYPE, 2>::ConstMatrix;\n      std::vector<std::unique_ptr<ConstPiece>> pieces;\n      pieces.reserve(values.size());\n      for (const Tensor& t : values) {\n        pieces.emplace_back(\n            new ConstPiece(t.shaped<VALUE_TYPE, 2>({1, t.NumElements()})));\n      }\n      Tensor* out = nullptr;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, dense_values_shape, &out));\n      Piece out_flat =\n          out->shaped<VALUE_TYPE, 2>({1, dense_values_shape.num_elements()});\n      ConcatCPU<VALUE_TYPE>(context->device(), pieces, &out_flat);\n    }\n  }\n};\n\n#define REGISTER_KERNELS_WITH_SPLIT_TYPE(value_type, split_type)            \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedTensorToVariant\")                     \\\n                              .Device(DEVICE_CPU)                           \\\n                              .TypeConstraint<value_type>(\"Tvalues\")        \\\n                              .TypeConstraint<split_type>(\"Tsplits\"),       \\\n                          RaggedTensorToVariantOp<value_type, split_type>); \\\n  REGISTER_KERNEL_BUILDER(                                                  \\\n      Name(\"RaggedTensorToVariantGradient\")                                 \\\n          .Device(DEVICE_CPU)                                               \\\n          .TypeConstraint<value_type>(\"Tvalues\")                            \\\n          .TypeConstraint<split_type>(\"Tsplits\"),                           \\\n      RaggedTensorToVariantGradientOp<value_type, split_type>);\n\n#define REGISTER_KERNELS(value_type)                  \\\n  REGISTER_KERNELS_WITH_SPLIT_TYPE(value_type, int32) \\\n  REGISTER_KERNELS_WITH_SPLIT_TYPE(value_type, int64)\nTF_CALL_POD_TYPES(REGISTER_KERNELS);\nTF_CALL_tstring(REGISTER_KERNELS);\nTF_CALL_QUANTIZED_TYPES(REGISTER_KERNELS);\nTF_CALL_quint16(REGISTER_KERNELS);\nTF_CALL_qint16(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n#undef REGISTER_KERNELS_WITH_SPLIT_TYPE\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include <utility>\n#include <vector>\n\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/variant.h\"\n#include \"tensorflow/core/framework/variant_encode_decode.h\"\n#include \"tensorflow/core/framework/variant_op_registry.h\"\n#include \"tensorflow/core/kernels/concat_lib.h\"\n#include \"tensorflow/core/kernels/ragged_tensor_variant.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/util/tensor_ops_util.h\"\n\nnamespace tensorflow {\nnamespace {\n\ntemplate <typename VALUE_TYPE, typename SPLIT_TYPE>\nStatus UnbatchRaggedZerothDim(\n    const RaggedTensorVariant& batched_ragged,\n    std::vector<RaggedTensorVariant>* ragged_components) {\n  // Set up the component Ragged Tensors.\n  int ragged_rank = batched_ragged.ragged_rank();\n  auto batched_splits_top_vec = batched_ragged.splits(0).vec<SPLIT_TYPE>();\n  int num_components = batched_splits_top_vec.size() - 1;\n  int num_splits = ragged_rank - 1;\n  ragged_components->resize(num_components);\n  for (RaggedTensorVariant& ragged_component : *ragged_components) {\n    ragged_component.mutable_nested_splits()->reserve(num_splits);\n  }\n  const auto& batched_flat = batched_ragged.values().flat<VALUE_TYPE>();\n  int num_inner_elems = batched_ragged.values().NumElements();\n  if (batched_ragged.values().dim_size(0) > 1) {\n    num_inner_elems /= batched_ragged.values().dim_size(0);\n  }\n  TensorShape values_shape = batched_ragged.values().shape();\n\n  // Corner case: ragged_rank == 1, e.g. [[1, 2, 3], [4, 5]]\n  if (num_splits == 0) {\n    for (int i = 0; i < num_components; i++) {\n      int start = batched_splits_top_vec(i);\n      int limit = batched_splits_top_vec(i + 1);\n      int num_values = limit - start;\n      values_shape.set_dim(0, num_values);\n      (*ragged_components)[i].set_values(\n          Tensor(DataTypeToEnum<VALUE_TYPE>::value, values_shape));\n      auto ragged_component_values_flat =\n          (*ragged_components)[i].mutable_values()->flat<VALUE_TYPE>();\n      for (int j = 0; j < num_values * num_inner_elems; j++) {\n        ragged_component_values_flat(j) =\n            batched_flat(j + start * num_inner_elems);\n      }\n    }\n    return Status::OK();\n  }\n\n  // Unbatch nested splits.\n  std::vector<typename TTypes<SPLIT_TYPE>::ConstVec> batched_splits_vec;\n  batched_splits_vec.reserve(ragged_rank);\n  for (int i = 0; i < ragged_rank; i++) {\n    batched_splits_vec.push_back(batched_ragged.splits(i).vec<SPLIT_TYPE>());\n  }\n  std::vector<int> index(num_splits, 1);\n  std::vector<int> ragged_component_values_size(num_components, 0);\n  for (int i = 0; i < num_components; i++) {\n    std::vector<typename TTypes<SPLIT_TYPE>::Vec> ragged_component_splits_vec;\n    ragged_component_splits_vec.reserve(num_splits);\n    int split_size = -1;\n    for (int j = 0; j < num_splits; j++) {\n      if (j == 0) {\n        split_size =\n            batched_splits_top_vec(i + 1) - batched_splits_top_vec(i) + 1;\n      } else {\n        // Update split size based on previous split.\n        int last_index = ragged_component_splits_vec[j - 1].size() - 1;\n        split_size = ragged_component_splits_vec[j - 1](last_index) + 1;\n      }\n      (*ragged_components)[i].append_splits(\n          Tensor(DataTypeToEnum<SPLIT_TYPE>::value, TensorShape({split_size})));\n      ragged_component_splits_vec.push_back(\n          (*ragged_components)[i].mutable_splits(j)->vec<SPLIT_TYPE>());\n      SPLIT_TYPE last_split_value = batched_splits_vec[j + 1](index[j] - 1);\n      ragged_component_splits_vec[j](0) = 0;\n      for (int k = 1; k < split_size; k++, index[j]++) {\n        ragged_component_splits_vec[j](k) =\n            batched_splits_vec[j + 1](index[j]) - last_split_value;\n      }\n    }\n    int last_split_size = ragged_component_splits_vec[num_splits - 1].size();\n    ragged_component_values_size[i] =\n        ragged_component_splits_vec[num_splits - 1](last_split_size - 1);\n  }\n\n  // Unbatch values.\n  int value_index = 0;\n  for (int i = 0; i < num_components; i++) {\n    int num_values = ragged_component_values_size[i];\n    values_shape.set_dim(0, num_values);\n    (*ragged_components)[i].set_values(\n        Tensor(DataTypeToEnum<VALUE_TYPE>::value, values_shape));\n    auto ragged_component_values_flat =\n        (*ragged_components)[i].mutable_values()->flat<VALUE_TYPE>();\n    for (int j = 0; j < num_values * num_inner_elems; j++, value_index++) {\n      ragged_component_values_flat(j) = batched_flat(value_index);\n    }\n  }\n\n  return Status::OK();\n}\n}  // namespace\n\ntemplate <typename VALUE_TYPE, typename SPLIT_TYPE>\nclass RaggedTensorToVariantOp : public OpKernel {\n public:\n  explicit RaggedTensorToVariantOp(OpKernelConstruction* context)\n      : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"batched_input\", &batched_input_));\n  }\n\n  void Compute(OpKernelContext* context) override {\n    // Read ragged_splits inputs.\n    OpInputList ragged_nested_splits_in;\n    OP_REQUIRES_OK(context, context->input_list(\"rt_nested_splits\",\n                                                &ragged_nested_splits_in));\n    const int ragged_nested_splits_len = ragged_nested_splits_in.size();\n    RaggedTensorVariant batched_ragged_input;\n    // Read ragged_values input.\n    batched_ragged_input.set_values(context->input(ragged_nested_splits_len));\n    batched_ragged_input.mutable_nested_splits()->reserve(\n        ragged_nested_splits_len);\n    for (int i = 0; i < ragged_nested_splits_len; i++) {\n      batched_ragged_input.append_splits(ragged_nested_splits_in[i]);\n    }\n\n    if (!batched_input_) {\n      // Encode as a Scalar Variant Tensor.\n      Tensor* encoded_scalar;\n      OP_REQUIRES_OK(context, context->allocate_output(0, TensorShape({}),\n                                                       &encoded_scalar));\n      encoded_scalar->scalar<Variant>()() = std::move(batched_ragged_input);\n      return;\n    }\n\n    // Checked here instead of at input in case batched_input_ is false\n    OP_REQUIRES(context, ragged_nested_splits_len > 0,\n                errors::InvalidArgument(\n                    \"rt_nested_splits must be a list of one or more, but \"\n                    \"received rt_nested_splits of length 0.\"));\n\n    // Unbatch the Ragged Tensor and encode the components.\n    std::vector<RaggedTensorVariant> unbatched_ragged_input;\n    auto batched_splits_top_vec =\n        batched_ragged_input.splits(0).vec<SPLIT_TYPE>();\n    int num_components = batched_splits_top_vec.size() - 1;\n    OP_REQUIRES(context, num_components >= 0,\n                errors::Internal(\"Invalid split argument.\"));\n    OP_REQUIRES_OK(context, UnbatchRaggedZerothDim<VALUE_TYPE, SPLIT_TYPE>(\n                                batched_ragged_input, &unbatched_ragged_input));\n\n    // Bundle the encoded scalar Variant Tensors into a rank-1 Variant Tensor.\n    Tensor* encoded_vector;\n    int output_size = unbatched_ragged_input.size();\n    OP_REQUIRES_OK(context,\n                   context->allocate_output(0, TensorShape({output_size}),\n                                            &encoded_vector));\n    auto encoded_vector_t = encoded_vector->vec<Variant>();\n    for (int i = 0; i < output_size; i++) {\n      encoded_vector_t(i) = unbatched_ragged_input[i];\n    }\n  }\n\n private:\n  bool batched_input_;\n};\n\ntemplate <typename VALUE_TYPE, typename SPLIT_TYPE>\nclass RaggedTensorToVariantGradientOp : public OpKernel {\n public:\n  using OpKernel::OpKernel;\n\n  void Compute(OpKernelContext* context) override {\n    // Read inputs.\n    Tensor encoded_variant = context->input(0);\n    Tensor row_splits = context->input(1);\n    auto flat_row_splits = row_splits.flat<SPLIT_TYPE>();\n    TensorShape dense_values_shape;\n    OP_REQUIRES_OK(context,\n                   TensorShapeUtils::MakeShape(context->input(2).vec<int32>(),\n                                               &dense_values_shape));\n\n    const auto& flat_variants = encoded_variant.flat<Variant>();\n\n    // Get a Tensor containing the flat_values for each variant.\n    std::vector<Tensor> values;\n    for (int i = 0; i < flat_variants.size(); ++i) {\n      if (const auto* encoded = flat_variants(i).get<RaggedTensorVariant>()) {\n        values.push_back(encoded->values());\n      } else {\n        // Missing value: this happens if only some of the variant values\n        // generated by ragged_tensor_to_variant impacted the value that we're\n        // calculating the gradient for.  In this case, we will see a\n        // default-constructed variant; so treat it as a zero tensor with the\n        // appropriate shape.\n        const auto value_dtype = DataTypeToEnum<VALUE_TYPE>::v();\n        int piece_size = flat_row_splits(i + 1) - flat_row_splits(i);\n        TensorShape zeros_shape = dense_values_shape;\n        zeros_shape.set_dim(0, piece_size);\n        Tensor zero(value_dtype, zeros_shape);\n        zero.flat<VALUE_TYPE>() =\n            zero.flat<VALUE_TYPE>().constant(VALUE_TYPE());\n        values.push_back(zero);\n      }\n    }\n\n    if (values.size() == 1) {\n      // Just one flat_value tensor: return as-is.\n      context->set_output(0, values[0]);\n    } else {\n      // Multiple flat_values tensors: concatenate them together.\n      using Piece = typename TTypes<VALUE_TYPE, 2>::Matrix;\n      using ConstPiece = typename TTypes<VALUE_TYPE, 2>::ConstMatrix;\n      std::vector<std::unique_ptr<ConstPiece>> pieces;\n      pieces.reserve(values.size());\n      for (const Tensor& t : values) {\n        pieces.emplace_back(\n            new ConstPiece(t.shaped<VALUE_TYPE, 2>({1, t.NumElements()})));\n      }\n      Tensor* out = nullptr;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, dense_values_shape, &out));\n      Piece out_flat =\n          out->shaped<VALUE_TYPE, 2>({1, dense_values_shape.num_elements()});\n      ConcatCPU<VALUE_TYPE>(context->device(), pieces, &out_flat);\n    }\n  }\n};\n\n#define REGISTER_KERNELS_WITH_SPLIT_TYPE(value_type, split_type)            \\\n  REGISTER_KERNEL_BUILDER(Name(\"RaggedTensorToVariant\")                     \\\n                              .Device(DEVICE_CPU)                           \\\n                              .TypeConstraint<value_type>(\"Tvalues\")        \\\n                              .TypeConstraint<split_type>(\"Tsplits\"),       \\\n                          RaggedTensorToVariantOp<value_type, split_type>); \\\n  REGISTER_KERNEL_BUILDER(                                                  \\\n      Name(\"RaggedTensorToVariantGradient\")                                 \\\n          .Device(DEVICE_CPU)                                               \\\n          .TypeConstraint<value_type>(\"Tvalues\")                            \\\n          .TypeConstraint<split_type>(\"Tsplits\"),                           \\\n      RaggedTensorToVariantGradientOp<value_type, split_type>);\n\n#define REGISTER_KERNELS(value_type)                  \\\n  REGISTER_KERNELS_WITH_SPLIT_TYPE(value_type, int32) \\\n  REGISTER_KERNELS_WITH_SPLIT_TYPE(value_type, int64)\nTF_CALL_POD_TYPES(REGISTER_KERNELS);\nTF_CALL_tstring(REGISTER_KERNELS);\nTF_CALL_QUANTIZED_TYPES(REGISTER_KERNELS);\nTF_CALL_quint16(REGISTER_KERNELS);\nTF_CALL_qint16(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n#undef REGISTER_KERNELS_WITH_SPLIT_TYPE\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/ragged_tensor_to_variant_op.cc"], "buggy_code_start_loc": [158], "buggy_code_end_loc": [158], "fixing_code_start_loc": [159], "fixing_code_end_loc": [165], "type": "CWE-824", "message": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToVariant`. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. We have patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-37666", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-12T22:15:08.243", "lastModified": "2021-08-18T20:48:48.633", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can cause undefined behavior via binding a reference to null pointer in `tf.raw_ops.RaggedTensorToVariant`. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) has an incomplete validation of the splits values, missing the case when the argument would be empty. We have patched the issue in GitHub commit be7a4de6adfbd303ce08be4332554dff70362612. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico. En las versiones afectadas un atacante puede causar un comportamiento indefinido por medio de la vinculaci\u00f3n de una referencia a un puntero null en \"tf.raw_ops.RaggedTensorToVariant\". La [implementaci\u00f3n](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/ragged_tensor_to_variant_op.cc#L129) presenta una comprobaci\u00f3n incompleta de los valores de divisi\u00f3n, omitiendo el caso cuando el argumento estar\u00eda vac\u00edo. Hemos parcheado el problema en el commit be7a4de6adfbd303ce08be4332554dff70362612 de GitHub. La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.6.0. Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.5.1, TensorFlow versi\u00f3n 2.4.3, y TensorFlow versi\u00f3n 2.3.4, ya que estos tambi\u00e9n est\u00e1n afectados y todav\u00eda est\u00e1n en el rango de soporte."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-824"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.4", "matchCriteriaId": "0F83C081-51CC-415F-A8C0-0A44C75E2CD6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.3", "matchCriteriaId": "BD3F2BF8-EBA9-42BF-8F9B-D918B880B15A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "D03E99A7-4E3D-427D-A156-C0713E9FB02A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.6.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "70FA6E48-6C57-40CA-809F-4E3D07CBF348"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "42187561-E491-434D-828C-F36701446634"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.6.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "C66B61C8-450A-4C5E-9174-F970D6DEE778"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/be7a4de6adfbd303ce08be4332554dff70362612", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-w4xf-2pqw-5mq7", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/be7a4de6adfbd303ce08be4332554dff70362612"}}