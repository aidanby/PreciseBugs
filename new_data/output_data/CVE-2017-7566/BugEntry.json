{"buggy_code": ["<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n// Disallow direct access to this file for security reasons\nif(!defined(\"IN_MYBB\"))\n{\n\tdie(\"Direct initialization of this file is not allowed.<br /><br />Please make sure IN_MYBB is defined.\");\n}\n\n$page->add_breadcrumb_item($lang->smilies, \"index.php?module=config-smilies\");\n\n$plugins->run_hooks(\"admin_config_smilies_begin\");\n\nif($mybb->input['action'] == \"add\")\n{\n\t$plugins->run_hooks(\"admin_config_smilies_add\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tif(!trim($mybb->input['name']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_name;\n\t\t}\n\n\t\tif(!trim($mybb->input['find']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_text_replacement;\n\t\t}\n\n\t\tif(!trim($mybb->input['image']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_path;\n\t\t}\n\n\t\tif(!trim($mybb->input['disporder']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_order;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$mybb->input['disporder'] = $mybb->get_input('disporder', MyBB::INPUT_INT);\n\t\t\t$query = $db->simple_select('smilies', 'sid', 'disporder=\\''.$mybb->input['disporder'].'\\'');\n\t\t\t$duplicate_disporder = $db->fetch_field($query, 'sid');\n\n\t\t\tif($duplicate_disporder)\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_duplicate_order;\n\t\t\t}\n\t\t}\n\n\t\tif(!$errors)\n\t\t{\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\\n\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = explode(\"\\n\", $mybb->input['find']);\n\t\t\tforeach(array_merge(array_keys($mybb->input['find'], \"\"), array_keys($mybb->input['find'], \" \")) as $key)\n\t\t\t{\n\t\t\t\tunset($mybb->input['find'][$key]);\n\t\t\t}\n\t\t\t$mybb->input['find'] = implode(\"\\n\", $mybb->input['find']);\n\n\t\t\t$new_smilie = array(\n\t\t\t\t\"name\" => $db->escape_string($mybb->input['name']),\n\t\t\t\t\"find\" => $db->escape_string($mybb->input['find']),\n\t\t\t\t\"image\" => $db->escape_string($mybb->input['image']),\n\t\t\t\t\"disporder\" => $mybb->get_input('disporder', MyBB::INPUT_INT),\n\t\t\t\t\"showclickable\" => $mybb->get_input('showclickable', MyBB::INPUT_INT)\n\t\t\t);\n\n\t\t\t$sid = $db->insert_query(\"smilies\", $new_smilie);\n\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_commit\");\n\n\t\t\t$cache->update_smilies();\n\n\t\t\t// Log admin action\n\t\t\tlog_admin_action($sid, htmlspecialchars_uni($mybb->input['name']));\n\n\t\t\tflash_message($lang->success_smilie_added, 'success');\n\t\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t\t}\n\t}\n\n\t$page->add_breadcrumb_item($lang->add_smilie);\n\t$page->output_header($lang->smilies.\" - \".$lang->add_smilie);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\",\n\t\t'description' => $lang->add_smilie_desc\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\"\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'add_smilie');\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=add\", \"post\", \"add\");\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\telse\n\t{\n\t\t$mybb->input['image'] = 'images/smilies/';\n\t\t$mybb->input['showclickable'] = 1;\n\t}\n\n\tif(!$mybb->input['disporder'])\n\t{\n\t\t$query = $db->simple_select(\"smilies\", \"max(disporder) as dispordermax\");\n\t\t$mybb->input['disporder'] = $db->fetch_field($query, \"dispordermax\")+1;\n\t}\n\n\t$form_container = new FormContainer($lang->add_smilie);\n\t$form_container->output_row($lang->name.\" <em>*</em>\", \"\", $form->generate_text_box('name', $mybb->input['name'], array('id' => 'name')), 'name');\n\t$form_container->output_row($lang->text_replace.\" <em>*</em>\", $lang->text_replace_desc, $form->generate_text_area('find', $mybb->input['find'], array('id' => 'find')), 'find');\n\t$form_container->output_row($lang->image_path.\" <em>*</em>\", $lang->image_path_desc, $form->generate_text_box('image', $mybb->input['image'], array('id' => 'image')), 'image');\n\t$form_container->output_row($lang->display_order.\" <em>*</em>\", $lang->display_order_desc, $form->generate_numeric_field('disporder', $mybb->input['disporder'], array('id' => 'disporder', 'min' => 0)), 'disporder');\n\t$form_container->output_row($lang->show_clickable.\" <em>*</em>\", $lang->show_clickable_desc, $form->generate_yes_no_radio('showclickable', $mybb->input['showclickable']));\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->save_smilie);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif($mybb->input['action'] == \"edit\")\n{\n\t$query = $db->simple_select(\"smilies\", \"*\", \"sid='\".$mybb->get_input('sid', MyBB::INPUT_INT).\"'\");\n\t$smilie = $db->fetch_array($query);\n\n\t// Does the smilie not exist?\n\tif(!$smilie['sid'])\n\t{\n\t\tflash_message($lang->error_invalid_smilie, 'error');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t$plugins->run_hooks(\"admin_config_smilies_edit\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tif(!trim($mybb->input['name']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_name;\n\t\t}\n\n\t\tif(!trim($mybb->input['find']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_text_replacement;\n\t\t}\n\n\t\tif(!trim($mybb->input['image']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_path;\n\t\t}\n\n\t\tif(!trim($mybb->input['disporder']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_order;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$mybb->input['disporder'] = $mybb->get_input('disporder', MyBB::INPUT_INT);\n\t\t\t$query = $db->simple_select(\"smilies\", \"sid\", \"disporder= '\".$mybb->input['disporder'].\"' AND sid != '\".$smilie['sid'].\"'\");\n\t\t\t$duplicate_disporder = $db->fetch_field($query, 'sid');\n\n\t\t\tif($duplicate_disporder)\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_duplicate_order;\n\t\t\t}\n\t\t}\n\n\t\tif(!$errors)\n\t\t{\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\\n\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = explode(\"\\n\", $mybb->input['find']);\n\t\t\tforeach(array_merge(array_keys($mybb->input['find'], \"\"), array_keys($mybb->input['find'], \" \")) as $key)\n\t\t\t{\n\t\t\t\tunset($mybb->input['find'][$key]);\n\t\t\t}\n\t\t\t$mybb->input['find'] = implode(\"\\n\", $mybb->input['find']);\n\n\t\t\t$updated_smilie = array(\n\t\t\t\t\"name\" => $db->escape_string($mybb->input['name']),\n\t\t\t\t\"find\" => $db->escape_string($mybb->input['find']),\n\t\t\t\t\"image\" => $db->escape_string($mybb->input['image']),\n\t\t\t\t\"disporder\" => $mybb->get_input('disporder', MyBB::INPUT_INT),\n\t\t\t\t\"showclickable\" => $mybb->get_input('showclickable', MyBB::INPUT_INT)\n\t\t\t);\n\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_edit_commit\");\n\n\t\t\t$db->update_query(\"smilies\", $updated_smilie, \"sid = '{$smilie['sid']}'\");\n\n\t\t\t$cache->update_smilies();\n\n\t\t\t// Log admin action\n\t\t\tlog_admin_action($smilie['sid'], htmlspecialchars_uni($mybb->input['name']));\n\n\t\t\tflash_message($lang->success_smilie_updated, 'success');\n\t\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t\t}\n\t}\n\n\t$page->add_breadcrumb_item($lang->edit_smilie);\n\t$page->output_header($lang->smilies.\" - \".$lang->edit_smilie);\n\n\t$sub_tabs['edit_smilie'] = array(\n\t\t'title' => $lang->edit_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=edit\",\n\t\t'description' => $lang->edit_smilie_desc\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\",\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'edit_smilie');\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=edit\", \"post\", \"edit\");\n\n\techo $form->generate_hidden_field(\"sid\", $smilie['sid']);\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\telse\n\t{\n\t\t$mybb->input = array_merge($mybb->input, $smilie);\n\t}\n\n\t$form_container = new FormContainer($lang->edit_smilie);\n\t$form_container->output_row($lang->name.\" <em>*</em>\", \"\", $form->generate_text_box('name', $mybb->input['name'], array('id' => 'name')), 'name');\n\t$form_container->output_row($lang->text_replace.\" <em>*</em>\", $lang->text_replace_desc, $form->generate_text_area('find', $mybb->input['find'], array('id' => 'find')), 'find');\n\t$form_container->output_row($lang->image_path.\" <em>*</em>\", $lang->image_path_desc, $form->generate_text_box('image', $mybb->input['image'], array('id' => 'image')), 'image');\n\t$form_container->output_row($lang->display_order.\" <em>*</em>\", $lang->display_order_desc, $form->generate_numeric_field('disporder', $mybb->input['disporder'], array('id' => 'disporder', 'min' => 0)), 'disporder');\n\t$form_container->output_row($lang->show_clickable.\" <em>*</em>\", $lang->show_clickable_desc, $form->generate_yes_no_radio('showclickable', $mybb->input['showclickable']));\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->save_smilie);\n\t$buttons[] = $form->generate_reset_button($lang->reset);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif($mybb->input['action'] == \"delete\")\n{\n\t$query = $db->simple_select(\"smilies\", \"*\", \"sid='\".$mybb->get_input('sid', MyBB::INPUT_INT).\"'\");\n\t$smilie = $db->fetch_array($query);\n\n\t// Does the smilie not exist?\n\tif(!$smilie['sid'])\n\t{\n\t\tflash_message($lang->error_invalid_smilie, 'error');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t// User clicked no\n\tif($mybb->input['no'])\n\t{\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t$plugins->run_hooks(\"admin_config_smilies_delete\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\t// Delete the smilie\n\t\t$db->delete_query(\"smilies\", \"sid='{$smilie['sid']}'\");\n\n\t\t$plugins->run_hooks(\"admin_config_smilies_delete_commit\");\n\n\t\t$cache->update_smilies();\n\n\t\t// Log admin action\n\t\tlog_admin_action($smilie['sid'], htmlspecialchars_uni($smilie['name']));\n\n\t\tflash_message($lang->success_smilie_updated, 'success');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\telse\n\t{\n\t\t$page->output_confirm_action(\"index.php?module=config-smilies&amp;action=delete&amp;sid={$smilie['sid']}\", $lang->confirm_smilie_deletion);\n\t}}\n\nif($mybb->input['action'] == \"add_multiple\")\n{\n\t$plugins->run_hooks(\"admin_config_smilies_add_multiple\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tif($mybb->input['step'] == 1)\n\t\t{\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_multiple_step1\");\n\n\t\t\tif(!trim($mybb->input['pathfolder']))\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_missing_path_multiple;\n\t\t\t}\n\n\t\t\t$path = $mybb->input['pathfolder'];\n\t\t\t$dir = @opendir(MYBB_ROOT.$path);\n\n\t\t\tif(!$dir)\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_invalid_path;\n\t\t\t}\n\n\t\t\tif($path && !is_array($errors))\n\t\t\t{\n\t\t\t\tif(substr($path, -1, 1) !== \"/\")\n\t\t\t\t{\n\t\t\t\t\t$path .= \"/\";\n\t\t\t\t}\n\n\t\t\t\t$query = $db->simple_select(\"smilies\");\n\n\t\t\t\t$asmilies = array();\n\t\t\t\twhile($smilie = $db->fetch_array($query))\n\t\t\t\t{\n\t\t\t\t\t$asmilies[$smilie['image']] = 1;\n\t\t\t\t}\n\n\t\t\t\t$smilies = array();\n\t\t\t\twhile($file = readdir($dir))\n\t\t\t\t{\n\t\t\t\t\tif($file != \"..\" && $file != \".\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$ext = get_extension($file);\n\t\t\t\t\t\tif($ext == \"gif\" || $ext == \"jpg\" || $ext == \"jpeg\" || $ext == \"png\" || $ext == \"bmp\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!$asmilies[$path.$file])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$smilies[] = $file;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclosedir($dir);\n\n\t\t\t\tif(count($smilies) == 0)\n\t\t\t\t{\n\t\t\t\t\t$errors[] = $lang->error_no_smilies;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$errors)\n\t\t\t{\n\t\t\t\t$page->add_breadcrumb_item($lang->add_multiple_smilies);\n\t\t\t\t$page->output_header($lang->smilies.\" - \".$lang->add_multiple_smilies);\n\n\t\t\t\t$sub_tabs['manage_smilies'] = array(\n\t\t\t\t\t'title' => $lang->manage_smilies,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies\",\n\t\t\t\t);\n\t\t\t\t$sub_tabs['add_smilie'] = array(\n\t\t\t\t\t'title' => $lang->add_smilie,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies&amp;action=add\"\n\t\t\t\t);\n\t\t\t\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t\t\t\t'title' => $lang->add_multiple_smilies,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t\t\t\t\t'description' => $lang->add_multiple_smilies_desc\n\t\t\t\t);\n\t\t\t\t$sub_tabs['mass_edit'] = array(\n\t\t\t\t\t'title' => $lang->mass_edit,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\"\n\t\t\t\t);\n\n\t\t\t\t$page->output_nav_tabs($sub_tabs, 'add_multiple_smilies');\n\t\t\t\t$form = new Form(\"index.php?module=config-smilies&amp;action=add_multiple\", \"post\", \"add_multiple\");\n\t\t\t\techo $form->generate_hidden_field(\"step\", \"2\");\n\t\t\t\techo $form->generate_hidden_field(\"pathfolder\", $path);\n\n\t\t\t\t$form_container = new FormContainer($lang->add_multiple_smilies);\n\t\t\t\t$form_container->output_row_header($lang->image, array(\"class\" => \"align_center\", 'width' => '10%'));\n\t\t\t\t$form_container->output_row_header($lang->name);\n\t\t\t\t$form_container->output_row_header($lang->text_replace, array('width' => '20%'));\n\t\t\t\t$form_container->output_row_header($lang->include, array(\"class\" => \"align_center\", 'width' => '5%'));\n\n\t\t\t\tforeach($smilies as $key => $file)\n\t\t\t\t{\n\t\t\t\t\t$ext = get_extension($file);\n\t\t\t\t\t$find = str_replace(\".\".$ext, \"\", $file);\n\t\t\t\t\t$name = ucfirst($find);\n\n\t\t\t\t\t$form_container->output_cell(\"<img src=\\\"../\".$path.$file.\"\\\" alt=\\\"\\\" /><br /><small>{$file}</small>\", array(\"class\" => \"align_center\", \"width\" => 1));\n\t\t\t\t\t$form_container->output_cell($form->generate_text_box(\"name[{$file}]\", $name, array('id' => 'name', 'style' => 'width: 98%')));\n\t\t\t\t\t$form_container->output_cell($form->generate_text_box(\"find[{$file}]\", \":\".$find.\":\", array('id' => 'find', 'style' => 'width: 95%')));\n\t\t\t\t\t$form_container->output_cell($form->generate_check_box(\"include[{$file}]\", 1, \"\", array('checked' => 1)), array(\"class\" => \"align_center\"));\n\t\t\t\t\t$form_container->construct_row();\n\t\t\t\t}\n\n\t\t\t\tif($form_container->num_rows() == 0)\n\t\t\t\t{\n\t\t\t\t\tflash_message($lang->error_no_images, 'error');\n\t\t\t\t\tadmin_redirect(\"index.php?module=config-smilies&action=add_multiple\");\n\t\t\t\t}\n\n\t\t\t\t$form_container->end();\n\n\t\t\t\t$buttons[] = $form->generate_submit_button($lang->save_smilies);\n\n\t\t\t\t$form->output_submit_wrapper($buttons);\n\t\t\t\t$form->end();\n\n\t\t\t\t$page->output_footer();\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_multiple_step2\");\n\n\t\t\t$path = $mybb->input['pathfolder'];\n\t\t\treset($mybb->input['include']);\n\t\t\t$find = $mybb->input['find'];\n\t\t\t$name = $mybb->input['name'];\n\n\t\t\tif(empty($mybb->input['include']))\n\t\t\t{\n\t\t\t\tflash_message($lang->error_none_included, 'error');\n\t\t\t\tadmin_redirect(\"index.php?module=config-smilies&action=add_multiple\");\n\t\t\t}\n\n\t\t\t$query = $db->simple_select('smilies', 'MAX(disporder) as max_disporder');\n\t\t\t$disporder = $db->fetch_field($query, 'max_disporder');\n\n\t\t\tforeach($mybb->input['include'] as $image => $insert)\n\t\t\t{\n\t\t\t\t$find[$image] = str_replace(\"\\r\\n\", \"\\n\", $find[$image]);\n\t\t\t\t$find[$image] = str_replace(\"\\r\", \"\\n\", $find[$image]);\n\t\t\t\t$find[$image] = explode(\"\\n\", $find[$image]);\n\t\t\t\tforeach(array_merge(array_keys($find[$image], \"\"), array_keys($find[$image], \" \")) as $key)\n\t\t\t\t{\n\t\t\t\t\tunset($find[$image][$key]);\n\t\t\t\t}\n\t\t\t\t$find[$image] = implode(\"\\n\", $find[$image]);\n\n\t\t\t\tif($insert)\n\t\t\t\t{\n\t\t\t\t\t$new_smilie = array(\n\t\t\t\t\t\t\"name\" => $db->escape_string($name[$image]),\n\t\t\t\t\t\t\"find\" => $db->escape_string($find[$image]),\n\t\t\t\t\t\t\"image\" => $db->escape_string($path.$image),\n\t\t\t\t\t\t\"disporder\" => ++$disporder,\n\t\t\t\t\t\t\"showclickable\" => 1\n\t\t\t\t\t);\n\n\t\t\t\t\t$db->insert_query(\"smilies\", $new_smilie);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_multiple_commit\");\n\n\t\t\t$cache->update_smilies();\n\n\t\t\t// Log admin action\n\t\t\tlog_admin_action();\n\n\t\t\tflash_message($lang->success_multiple_smilies_added, 'success');\n\t\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t\t}\n\t}\n\n\t$page->add_breadcrumb_item($lang->add_multiple_smilies);\n\t$page->output_header($lang->smilies.\" - \".$lang->add_multiple_smilies);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\"\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t\t'description' => $lang->add_multiple_smilies_desc\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\"\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'add_multiple_smilies');\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=add_multiple\", \"post\", \"add_multiple\");\n\techo $form->generate_hidden_field(\"step\", \"1\");\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\n\t$form_container = new FormContainer($lang->add_multiple_smilies);\n\t$form_container->output_row($lang->path_to_images, $lang->path_to_images_desc, $form->generate_text_box('pathfolder', $mybb->input['pathfolder'], array('id' => 'pathfolder')), 'pathfolder');\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->show_smilies);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif($mybb->input['action'] == \"mass_edit\")\n{\n\t$plugins->run_hooks(\"admin_config_smilies_mass_edit\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tforeach($mybb->input['name'] as $sid => $name)\n\t\t{\n\t\t\t$disporder = (int)$mybb->input['disporder'][$sid];\n\n\t\t\t$sid = (int)$sid;\n\t\t\tif($mybb->input['delete'][$sid] == 1)\n\t\t\t{\n\t\t\t\t// Dirty hack to get the disporder working. Note: this doesn't work in every case\n\t\t\t\tunset($mybb->input['disporder'][$sid]);\n\n\t\t\t\t$db->delete_query(\"smilies\", \"sid = '{$sid}'\", 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$mybb->input['find'][$sid] = str_replace(\"\\r\\n\", \"\\n\", $mybb->input['find'][$sid]);\n\t\t\t\t$mybb->input['find'][$sid] = str_replace(\"\\r\", \"\\n\", $mybb->input['find'][$sid]);\n\t\t\t\t$mybb->input['find'][$sid] = explode(\"\\n\", $mybb->input['find'][$sid]);\n\t\t\t\tforeach(array_merge(array_keys($mybb->input['find'][$sid], \"\"), array_keys($mybb->input['find'][$sid], \" \")) as $key)\n\t\t\t\t{\n\t\t\t\t\tunset($mybb->input['find'][$sid][$key]);\n\t\t\t\t}\n\t\t\t\t$mybb->input['find'][$sid] = implode(\"\\n\", $mybb->input['find'][$sid]);\t\t\t\t\n\t\t\t\t\n\t\t\t\t$smilie = array(\n\t\t\t\t\t\"name\" => $db->escape_string($mybb->input['name'][$sid]),\n\t\t\t\t\t\"find\" => $db->escape_string($mybb->input['find'][$sid]),\n\t\t\t\t\t\"showclickable\" => $db->escape_string($mybb->input['showclickable'][$sid])\n\t\t\t\t);\n\n\t\t\t\t// $test contains all disporders except the actual one so we can check whether we have multiple disporders\n\t\t\t\t$test = $mybb->input['disporder'];\n\t\t\t\tunset($test[$sid]);\n\t\t\t\tif(!in_array($disporder, $test))\n\t\t\t\t{\n\t\t\t\t\t$smilie['disporder'] = $disporder;\n\t\t\t\t}\n\n\t\t\t\t$db->update_query(\"smilies\", $smilie, \"sid = '{$sid}'\");\n\t\t\t}\n\n\t\t\t$disporder_list[$disporder] = $disporder;\n\t\t}\n\n\t\t$plugins->run_hooks(\"admin_config_smilies_mass_edit_commit\");\n\n\t\t$cache->update_smilies();\n\n\t\t// Log admin action\n\t\tlog_admin_action();\n\n\t\tflash_message($lang->success_multiple_smilies_updated, 'success');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t$page->add_breadcrumb_item($lang->mass_edit);\n\t$page->output_header($lang->smilies.\" - \".$lang->mass_edit);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\",\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\",\n\t\t'description' => $lang->mass_edit_desc\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'mass_edit');\n\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=mass_edit\", \"post\", \"mass_edit\");\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\telse\n\t{\n\t\t$mybb->input['path'] = 'images/smilies/';\n\t\t$mybb->input['showclickable'] = 1;\n\t}\n\n\tif(!$mybb->input['disporder'])\n\t{\n\t\t$query = $db->simple_select(\"smilies\", \"max(disporder) as dispordermax\");\n\t\t$mybb->input['disporder'] = $db->fetch_field($query, \"dispordermax\")+1;\n\t}\n\n\t$form_container = new FormContainer($lang->manage_smilies);\n\t$form_container->output_row_header($lang->image, array(\"class\" => \"align_center\", 'width' => '1'));\n\t$form_container->output_row_header($lang->name);\n\t$form_container->output_row_header($lang->text_replace, array('width' => '20%'));\n\t$form_container->output_row_header($lang->order, array('width' => '5%'));\n\t$form_container->output_row_header($lang->mass_edit_show_clickable, array(\"width\" => 165));\n\t$form_container->output_row_header($lang->smilie_delete, array(\"class\" => \"align_center\", 'width' => '5%'));\n\n\t$query = $db->simple_select(\"smilies\", \"*\", \"\", array('order_by' => 'disporder'));\n\twhile($smilie = $db->fetch_array($query))\n\t{\n\t\t$smilie['image'] = str_replace(\"{theme}\", \"images\", $smilie['image']);\n\t\tif(my_validate_url($smilie['image'], true))\n\t\t{\n\t\t\t$image = $smilie['image'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$image = \"../\".$smilie['image'];\n\t\t}\n\n\t\t$form_container->output_cell(\"<img src=\\\"{$image}\\\" alt=\\\"\\\" />\", array(\"class\" => \"align_center\", \"width\" => 1));\n\t\t$form_container->output_cell($form->generate_text_box(\"name[{$smilie['sid']}]\", $smilie['name'], array('id' => 'name', 'style' => 'width: 98%')));\n\t\t$form_container->output_cell($form->generate_text_area(\"find[{$smilie['sid']}]\", $smilie['find'], array('id' => 'find', 'style' => 'width: 95%')));\n\t\t$form_container->output_cell($form->generate_numeric_field(\"disporder[{$smilie['sid']}]\", $smilie['disporder'], array('id' => 'disporder', 'style' => 'width: 80%', 'min' => 0)));\n\t\t$form_container->output_cell($form->generate_yes_no_radio(\"showclickable[{$smilie['sid']}]\", $smilie['showclickable']), array(\"class\" => \"align_center\"));\n\t\t$form_container->output_cell($form->generate_check_box(\"delete[{$smilie['sid']}]\", 1, $mybb->input['delete']), array(\"class\" => \"align_center\"));\n\t\t$form_container->construct_row();\n\t}\n\n\tif($form_container->num_rows() == 0)\n\t{\n\t\t$form_container->output_cell($lang->no_smilies, array('colspan' => 6));\n\t\t$form_container->construct_row();\n\t}\n\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->save_smilies);\n\t$buttons[] = $form->generate_reset_button($lang->reset);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif(!$mybb->input['action'])\n{\n\t$plugins->run_hooks(\"admin_config_smilies_start\");\n\n\t$page->output_header($lang->manage_smilies);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t\t'description' => $lang->manage_smilies_desc\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\",\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\",\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'manage_smilies');\n\n\t$pagenum = $mybb->get_input('page', MyBB::INPUT_INT);\n\tif($pagenum)\n\t{\n\t\t$start = ($pagenum-1) * 20;\n\t}\n\telse\n\t{\n\t\t$start = 0;\n\t\t$pagenum = 1;\n\t}\n\n\n\t$table = new Table;\n\t$table->construct_header($lang->image, array(\"class\" => \"align_center\", \"width\" => 1));\n\t$table->construct_header($lang->name, array(\"width\" => \"35%\"));\n\t$table->construct_header($lang->text_replace, array(\"width\" => \"35%\"));\n\t$table->construct_header($lang->controls, array(\"class\" => \"align_center\", \"colspan\" => 2));\n\n\t$query = $db->simple_select(\"smilies\", \"*\", \"\", array('limit_start' => $start, 'limit' => 20, 'order_by' => 'disporder'));\n\twhile($smilie = $db->fetch_array($query))\n\t{\n\t\t$smilie['image'] = str_replace(\"{theme}\", \"images\", $smilie['image']);\n\t\tif(my_validate_url($smilie['image'], true))\n\t\t{\n\t\t\t$image = $smilie['image'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$image = \"../\".$smilie['image'];\n\t\t}\n\n\t\t$table->construct_cell(\"<img src=\\\"{$image}\\\" alt=\\\"\\\" class=\\\"smilie smilie_{$smilie['sid']}\\\" />\", array(\"class\" => \"align_center\"));\n\t\t$table->construct_cell(htmlspecialchars_uni($smilie['name']));\n\t\t$table->construct_cell(nl2br(htmlspecialchars_uni($smilie['find'])));\n\n\t\t$table->construct_cell(\"<a href=\\\"index.php?module=config-smilies&amp;action=edit&amp;sid={$smilie['sid']}\\\">{$lang->edit}</a>\", array(\"class\" => \"align_center\"));\n\t\t$table->construct_cell(\"<a href=\\\"index.php?module=config-smilies&amp;action=delete&amp;sid={$smilie['sid']}&amp;my_post_key={$mybb->post_code}\\\" onclick=\\\"return AdminCP.deleteConfirmation(this, '{$lang->confirm_smilie_deletion}')\\\">{$lang->delete}</a>\", array(\"class\" => \"align_center\"));\n\t\t$table->construct_row();\n\t}\n\n\tif($table->num_rows() == 0)\n\t{\n\t\t$table->construct_cell($lang->no_smilies, array('colspan' => 5));\n\t\t$table->construct_row();\n\t}\n\n\t$table->output($lang->manage_smilies);\n\n\t$query = $db->simple_select(\"smilies\", \"COUNT(sid) as smilies\");\n\t$total_rows = $db->fetch_field($query, \"smilies\");\n\n\techo \"<br />\".draw_admin_pagination($pagenum, \"20\", $total_rows, \"index.php?module=config-smilies&amp;page={page}\");\n\n\t$page->output_footer();\n}", "<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n/*\noptions = array(\n\tallow_html\n\tallow_smilies\n\tallow_mycode\n\tnl2br\n\tfilter_badwords\n\tme_username\n\tshorten_urls\n\thighlight\n\tfilter_cdata\n)\n*/\n\nclass postParser\n{\n\t/**\n\t * Internal cache of MyCode.\n\t *\n\t * @access public\n\t * @var mixed\n\t */\n\tpublic $mycode_cache = 0;\n\n\t/**\n\t * Internal cache of smilies\n\t *\n\t * @access public\n\t * @var mixed\n\t */\n\tpublic $smilies_cache = 0;\n\n\t/**\n\t * Internal cache of badwords filters\n\t *\n\t * @access public\n\t * @var mixed\n\t */\n\tpublic $badwords_cache = 0;\n\n\t/**\n\t * Base URL for smilies\n\t *\n\t * @access public\n\t * @var string\n\t */\n\tpublic $base_url;\n\n\t/**\n\t * Parsed Highlights cache\n\t *\n\t * @access public\n\t * @var array\n\t */\n\tpublic $highlight_cache = array();\n\n\t/**\n\t * Options for this parsed message\n\t *\n\t * @access public\n\t * @var array\n\t */\n\tpublic $options;\n\n\t/**\n\t * Internal cache for nested lists\n\t *\n\t * @access public\n\t * @var array\n\t */\n\tpublic $list_elements;\n\n\t/**\n\t * Internal counter for nested lists\n\t *\n\t * @access public\n\t * @var int\n\t */\n\tpublic $list_count;\n\n\t/**\n\t * Whether or not should a <br /> with clear: both be added at the end of the parsed message\n\t *\n\t * @access public\n\t * @var boolean\n\t */\n\tpublic $clear_needed = false;\n\n\t/**\n\t * Parses a message with the specified options.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @param array $options Array of yes/no options - allow_html,filter_badwords,allow_mycode,allow_smilies,nl2br,me_username,filter_cdata.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_message($message, $options=array())\n\t{\n\t\tglobal $plugins, $mybb;\n\n\t\t$this->clear_needed = false;\n\n\t\t// Set base URL for parsing smilies\n\t\t$this->base_url = $mybb->settings['bburl'];\n\n\t\tif($this->base_url != \"\")\n\t\t{\n\t\t\tif(my_substr($this->base_url, my_strlen($this->base_url) -1) != \"/\")\n\t\t\t{\n\t\t\t\t$this->base_url = $this->base_url.\"/\";\n\t\t\t}\n\t\t}\n\n\t\t// Set the options\n\t\t$this->options = $options;\n\n\t\t$message = $plugins->run_hooks(\"parse_message_start\", $message);\n\n\t\t// Get rid of carriage returns for they are the workings of the devil\n\t\t$message = str_replace(\"\\r\", \"\", $message);\n\n\t\t// Filter bad words if requested.\n\t\tif(!empty($this->options['filter_badwords']))\n\t\t{\n\t\t\t$message = $this->parse_badwords($message);\n\t\t}\n\n\t\t// Filter CDATA tags if requested (syndication.php).\n\t\tif(!empty($this->options['filter_cdata']))\n\t\t{\n\t\t\t$message = $this->parse_cdata($message);\n\t\t}\n\n\t\t// If MyCode needs to be replaced, first filter out [code] and [php] tags.\n\t\tif(!empty($this->options['allow_mycode']) && $mybb->settings['allowcodemycode'] == 1)\n\t\t{\n\t\t\t// This code is reserved and could break codes\n\t\t\t$message = str_replace(\"<mybb-code>\\n\", \"<mybb_code>\\n\", $message);\n\n\t\t\tpreg_match_all(\"#\\[(code|php)\\](.*?)\\[/\\\\1\\](\\r\\n?|\\n?)#si\", $message, $code_matches, PREG_SET_ORDER);\n\t\t\t$message = preg_replace(\"#\\[(code|php)\\](.*?)\\[/\\\\1\\](\\r\\n?|\\n?)#si\", \"<mybb-code>\\n\", $message);\n\t\t}\n\n\t\tif(empty($this->options['allow_html']))\n\t\t{\n\t\t\t$message = $this->parse_html($message);\n\t\t\t$message = str_replace(\"&lt;mybb-code&gt;\\n\", \"<mybb-code>\\n\", $message);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Replace base, meta,script and style tags in our post - these are > dangerous <\n\t\t\t$message = preg_replace('#<(/?)(base|meta|script|style)([^>]*)>#i', '&lt;$1$2$3&gt;', $message);\n\t\t\t$message = $this->fix_javascript($message);\n\n\t\t\t$find = array(\"<br />\\n\", \"<br>\\n\");\n\t\t\t$replace = array(\"\\n\", \"\\n\");\n\t\t\t$message = str_replace($find, $replace, $message);\n\t\t}\n\n\t\t// Replace \"me\" code and slaps if we have a username\n\t\tif(!empty($this->options['me_username']) && $mybb->settings['allowmemycode'] == 1)\n\t\t{\n\t\t\tglobal $lang;\n\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/me ([^\\r\\n<]*)#i', \"\\\\1<span style=\\\"color: red;\\\" class=\\\"mycode_me\\\">* {$this->options['me_username']} \\\\2</span>\", $message);\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/slap ([^\\r\\n<]*)#i', \"\\\\1<span style=\\\"color: red;\\\" class=\\\"mycode_slap\\\">* {$this->options['me_username']} {$lang->slaps} \\\\2 {$lang->with_trout}</span>\", $message);\n\t\t}\n\n\t\t// If we can, parse smilies\n\t\tif(!empty($this->options['allow_smilies']))\n\t\t{\n\t\t\t$message = $this->parse_smilies($message, $this->options['allow_html']);\n\t\t}\n\n\t\t// Replace MyCode if requested.\n\t\tif(!empty($this->options['allow_mycode']))\n\t\t{\n\t\t\t$message = $this->parse_mycode($message);\n\t\t}\n\n\t\t// Parse Highlights\n\t\tif(!empty($this->options['highlight']))\n\t\t{\n\t\t\t$message = $this->highlight_message($message, $this->options['highlight']);\n\t\t}\n\n\t\t// Run plugin hooks\n\t\t$message = $plugins->run_hooks(\"parse_message\", $message);\n\n\t\tif(!empty($this->options['allow_mycode']))\n\t\t{\n\t\t\t// Now that we're done, if we split up any code tags, parse them and glue it all back together\n\t\t\tif(count($code_matches) > 0)\n\t\t\t{\n\t\t\t\tforeach($code_matches as $text)\n\t\t\t\t{\n\t\t\t\t\tif(my_strtolower($text[1]) == \"code\")\n\t\t\t\t\t{\n\t\t\t\t\t\t// Fix up HTML inside the code tags so it is clean\n\t\t\t\t\t\t$text[2] = $this->parse_html($text[2]);\n\n\t\t\t\t\t\t$code = $this->mycode_parse_code($text[2]);\n\t\t\t\t\t}\n\t\t\t\t\telseif(my_strtolower($text[1]) == \"php\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$code = $this->mycode_parse_php($text[2]);\n\t\t\t\t\t}\n\t\t\t\t\t$message = preg_replace(\"#\\<mybb-code>\\n?#\", $code, $message, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(!isset($this->options['nl2br']) || $this->options['nl2br'] != 0)\n\t\t{\n\t\t\t$message = nl2br($message);\n\t\t\t// Fix up new lines and block level elements\n\t\t\t$message = preg_replace(\"#(</?(?:html|head|body|div|p|form|table|thead|tbody|tfoot|tr|td|th|ul|ol|li|div|p|blockquote|cite|hr)[^>]*>)\\s*<br />#i\", \"$1\", $message);\n\t\t\t$message = preg_replace(\"#(&nbsp;)+(</?(?:html|head|body|div|p|form|table|thead|tbody|tfoot|tr|td|th|ul|ol|li|div|p|blockquote|cite|hr)[^>]*>)#i\", \"$2\", $message);\n\t\t}\n\n\t\tif($this->clear_needed)\n\t\t{\n\t\t\t$message .= '<br class=\"clear\" />';\n\t\t}\n\n\t\t$message = $plugins->run_hooks(\"parse_message_end\", $message);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Converts HTML in a message to their specific entities whilst allowing unicode characters.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @return string The formatted message.\n\t */\n\tfunction parse_html($message)\n\t{\n\t\t$message = preg_replace(\"#&(?!\\#[0-9]+;)#si\", \"&amp;\", $message); // fix & but allow unicode\n\t\t$message = str_replace(\"<\",\"&lt;\",$message);\n\t\t$message = str_replace(\">\",\"&gt;\",$message);\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Generates a cache of MyCode, both standard and custom.\n\t *\n\t * @access private\n\t */\n\tfunction cache_mycode()\n\t{\n\t\tglobal $cache, $lang, $mybb;\n\t\t$this->mycode_cache = array();\n\n\t\t$standard_mycode = $callback_mycode = $nestable_mycode = array();\n\t\t$standard_count = $callback_count = $nestable_count = 0;\n\n\t\tif($mybb->settings['allowbasicmycode'] == 1)\n\t\t{\n\t\t\t$standard_mycode['b']['regex'] = \"#\\[b\\](.*?)\\[/b\\]#si\";\n\t\t\t$standard_mycode['b']['replacement'] = \"<span style=\\\"font-weight: bold;\\\" class=\\\"mycode_b\\\">$1</span>\";\n\n\t\t\t$standard_mycode['u']['regex'] = \"#\\[u\\](.*?)\\[/u\\]#si\";\n\t\t\t$standard_mycode['u']['replacement'] = \"<span style=\\\"text-decoration: underline;\\\" class=\\\"mycode_u\\\">$1</span>\";\n\n\t\t\t$standard_mycode['i']['regex'] = \"#\\[i\\](.*?)\\[/i\\]#si\";\n\t\t\t$standard_mycode['i']['replacement'] = \"<span style=\\\"font-style: italic;\\\" class=\\\"mycode_i\\\">$1</span>\";\n\n\t\t\t$standard_mycode['s']['regex'] = \"#\\[s\\](.*?)\\[/s\\]#si\";\n\t\t\t$standard_mycode['s']['replacement'] = \"<span style=\\\"text-decoration: line-through;\\\" class=\\\"mycode_s\\\">$1</span>\";\n\n\t\t\t$standard_mycode['hr']['regex'] = \"#\\[hr\\]#si\";\n\t\t\t$standard_mycode['hr']['replacement'] = \"<hr class=\\\"mycode_hr\\\" />\";\n\n\t\t\t++$standard_count;\n\t\t}\n\n\t\tif($mybb->settings['allowsymbolmycode'] == 1)\n\t\t{\n\t\t\t$standard_mycode['copy']['regex'] = \"#\\(c\\)#i\";\n\t\t\t$standard_mycode['copy']['replacement'] = \"&copy;\";\n\n\t\t\t$standard_mycode['tm']['regex'] = \"#\\(tm\\)#i\";\n\t\t\t$standard_mycode['tm']['replacement'] = \"&#153;\";\n\n\t\t\t$standard_mycode['reg']['regex'] = \"#\\(r\\)#i\";\n\t\t\t$standard_mycode['reg']['replacement'] = \"&reg;\";\n\n\t\t\t++$standard_count;\n\t\t}\n\n\t\tif($mybb->settings['allowlinkmycode'] == 1)\n\t\t{\n\t\t\t$callback_mycode['url_simple']['regex'] = \"#\\[url\\]((?!javascript)[a-z]+?://)([^\\r\\n\\\"<]+?)\\[/url\\]#si\";\n\t\t\t$callback_mycode['url_simple']['replacement'] = array($this, 'mycode_parse_url_callback1');\n\n\t\t\t$callback_mycode['url_simple2']['regex'] = \"#\\[url\\]((?!javascript:)[^\\r\\n\\\"<]+?)\\[/url\\]#i\";\n\t\t\t$callback_mycode['url_simple2']['replacement'] = array($this, 'mycode_parse_url_callback2');\n\n\t\t\t$callback_mycode['url_complex']['regex'] = \"#\\[url=((?!javascript)[a-z]+?://)([^\\r\\n\\\"<]+?)\\](.+?)\\[/url\\]#si\";\n\t\t\t$callback_mycode['url_complex']['replacement'] = array($this, 'mycode_parse_url_callback1');\n\n\t\t\t$callback_mycode['url_complex2']['regex'] = \"#\\[url=((?!javascript:)[^\\r\\n\\\"<]+?)\\](.+?)\\[/url\\]#si\";\n\t\t\t$callback_mycode['url_complex2']['replacement'] = array($this, 'mycode_parse_url_callback2');\n\n\t\t\t++$callback_count;\n\t\t}\n\n\t\tif($mybb->settings['allowemailmycode'] == 1)\n\t\t{\n\t\t\t$callback_mycode['email_simple']['regex'] = \"#\\[email\\](.*?)\\[/email\\]#i\";\n\t\t\t$callback_mycode['email_simple']['replacement'] = array($this, 'mycode_parse_email_callback');\n\n\t\t\t$callback_mycode['email_complex']['regex'] = \"#\\[email=(.*?)\\](.*?)\\[/email\\]#i\";\n\t\t\t$callback_mycode['email_complex']['replacement'] = array($this, 'mycode_parse_email_callback');\n\n\t\t\t++$callback_count;\n\t\t}\n\n\t\tif($mybb->settings['allowcolormycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['color']['regex'] = \"#\\[color=([a-zA-Z]*|\\#?[\\da-fA-F]{3}|\\#?[\\da-fA-F]{6})](.*?)\\[/color\\]#si\";\n\t\t\t$nestable_mycode['color']['replacement'] = \"<span style=\\\"color: $1;\\\" class=\\\"mycode_color\\\">$2</span>\";\n\n\t\t\t++$nestable_count;\n\t\t}\n\n\t\tif($mybb->settings['allowsizemycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['size']['regex'] = \"#\\[size=(xx-small|x-small|small|medium|large|x-large|xx-large)\\](.*?)\\[/size\\]#si\";\n\t\t\t$nestable_mycode['size']['replacement'] = \"<span style=\\\"font-size: $1;\\\" class=\\\"mycode_size\\\">$2</span>\";\n\n\t\t\t$callback_mycode['size_int']['regex'] = \"#\\[size=([0-9\\+\\-]+?)\\](.*?)\\[/size\\]#si\";\n\t\t\t$callback_mycode['size_int']['replacement'] = array($this, 'mycode_handle_size_callback');\n\n\t\t\t++$nestable_count;\n\t\t\t++$callback_count;\n\t\t}\n\n\t\tif($mybb->settings['allowfontmycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['font']['regex'] = \"#\\[font=([a-z0-9 ,\\-_'\\\"]+)\\](.*?)\\[/font\\]#si\";\n\t\t\t$nestable_mycode['font']['replacement'] = \"<span style=\\\"font-family: $1;\\\" class=\\\"mycode_font\\\">$2</span>\";\n\n\t\t\t++$nestable_count;\n\t\t}\n\n\t\tif($mybb->settings['allowalignmycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['align']['regex'] = \"#\\[align=(left|center|right|justify)\\](.*?)\\[/align\\]#si\";\n\t\t\t$nestable_mycode['align']['replacement'] = \"<div style=\\\"text-align: $1;\\\" class=\\\"mycode_align\\\">$2</div>\";\n\n\t\t\t++$nestable_count;\n\t\t}\n\n\t\t$custom_mycode = $cache->read(\"mycode\");\n\n\t\t// If there is custom MyCode, load it.\n\t\tif(is_array($custom_mycode))\n\t\t{\n\t\t\tforeach($custom_mycode as $key => $mycode)\n\t\t\t{\n\t\t\t\t$mycode['regex'] = str_replace(\"\\x0\", \"\", $mycode['regex']);\n\t\t\t\t$custom_mycode[$key]['regex'] = \"#\".$mycode['regex'].\"#si\";\n\n\t\t\t\t++$standard_count;\n\t\t\t}\n\t\t\t$mycode = array_merge($standard_mycode, $custom_mycode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$mycode = $standard_mycode;\n\t\t}\n\n\t\t// Assign the MyCode to the cache.\n\t\tforeach($mycode as $code)\n\t\t{\n\t\t\t$this->mycode_cache['standard']['find'][] = $code['regex'];\n\t\t\t$this->mycode_cache['standard']['replacement'][] = $code['replacement'];\n\t\t}\n\n\t\t// Assign the nestable MyCode to the cache.\n\t\tforeach($nestable_mycode as $code)\n\t\t{\n\t\t\t$this->mycode_cache['nestable'][] = array('find' => $code['regex'], 'replacement' => $code['replacement']);\n\t\t}\n\n\t\t// Assign the nestable MyCode to the cache.\n\t\tforeach($callback_mycode as $code)\n\t\t{\n\t\t\t$this->mycode_cache['callback'][] = array('find' => $code['regex'], 'replacement' => $code['replacement']);\n\t\t}\n\n\t\t$this->mycode_cache['standard_count'] = $standard_count;\n\t\t$this->mycode_cache['callback_count'] = $callback_count;\n\t\t$this->mycode_cache['nestable_count'] = $nestable_count;\n\t}\n\n\t/**\n\t * Parses MyCode tags in a specific message with the specified options.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @param array $options Array of options in yes/no format. Options are allow_imgcode.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_mycode($message, $options=array())\n\t{\n\t\tglobal $lang, $mybb;\n\n\t\tif(empty($this->options))\n\t\t{\n\t\t\t$this->options = $options;\n\t\t}\n\n\t\t// Cache the MyCode globally if needed.\n\t\tif($this->mycode_cache == 0)\n\t\t{\n\t\t\t$this->cache_mycode();\n\t\t}\n\n\t\t// Parse quotes first\n\t\t$message = $this->mycode_parse_quotes($message);\n\n\t\t$message = $this->mycode_auto_url($message);\n\n\t\t$message = str_replace('$', '&#36;', $message);\n\n\t\t// Replace the rest\n\t\tif($this->mycode_cache['standard_count'] > 0)\n\t\t{\n\t\t\t$message = preg_replace($this->mycode_cache['standard']['find'], $this->mycode_cache['standard']['replacement'], $message);\n\t\t}\n\n\t\tif($this->mycode_cache['callback_count'] > 0)\n\t\t{\n\t\t\tforeach($this->mycode_cache['callback'] as $replace)\n\t\t\t{\n\t\t\t\t$message = preg_replace_callback($replace['find'], $replace['replacement'], $message);\n\t\t\t}\n\t\t}\n\n\t\t// Replace the nestable mycode's\n\t\tif($this->mycode_cache['nestable_count'] > 0)\n\t\t{\n\t\t\tforeach($this->mycode_cache['nestable'] as $mycode)\n\t\t\t{\n\t\t\t\twhile(preg_match($mycode['find'], $message))\n\t\t\t\t{\n\t\t\t\t\t$message = preg_replace($mycode['find'], $mycode['replacement'], $message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reset list cache\n\t\tif($mybb->settings['allowlistmycode'] == 1)\n\t\t{\n\t\t\t$this->list_elements = array();\n\t\t\t$this->list_count = 0;\n\n\t\t\t// Find all lists\n\t\t\t$message = preg_replace_callback(\"#(\\[list(=(a|A|i|I|1))?\\]|\\[/list\\])#si\", array($this, 'mycode_prepare_list'), $message);\n\n\t\t\t// Replace all lists\n\t\t\tfor($i = $this->list_count; $i > 0; $i--)\n\t\t\t{\n\t\t\t\t// Ignores missing end tags\n\t\t\t\t$message = preg_replace_callback(\"#\\s?\\[list(=(a|A|i|I|1))?&{$i}\\](.*?)(\\[/list&{$i}\\]|$)(\\r\\n?|\\n?)#si\", array($this, 'mycode_parse_list_callback'), $message, 1);\n\t\t\t}\n\t\t}\n\n\t\t// Convert images when allowed.\n\t\tif(!empty($this->options['allow_imgcode']))\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[img\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback1'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback2'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback3'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*) align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback4'), $message);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[img\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback1'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback2'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback3'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*) align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback4'), $message);\n\t\t}\n\n\t\t// Convert videos when allow.\n\t\tif(!empty($this->options['allow_videocode']))\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[video=(.*?)\\](.*?)\\[/video\\]#i\", array($this, 'mycode_parse_video_callback'), $message);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[video=(.*?)\\](.*?)\\[/video\\]#i\", array($this, 'mycode_parse_video_disabled_callback'), $message);\n\t\t}\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Generates a cache of smilies\n\t *\n\t * @access private\n\t */\n\tfunction cache_smilies()\n\t{\n\t\tglobal $cache, $mybb, $theme, $templates;\n\t\t$this->smilies_cache = array();\n\n\t\t$smilies = $cache->read(\"smilies\");\n\t\tif(is_array($smilies))\n\t\t{\n\t\t\t$extra_class = $onclick = '';\n\t\t\tforeach($smilies as $sid => $smilie)\n\t\t\t{\n\t\t\t\t$smilie['find'] = explode(\"\\n\", $smilie['find']);\n\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t$smilie['image'] = htmlspecialchars_uni($mybb->get_asset_url($smilie['image']));\n\t\t\t\t$smilie['name'] = htmlspecialchars_uni($smilie['name']);\n\n\t\t\t\tforeach($smilie['find'] as $s)\n\t\t\t\t{\n\t\t\t\t\t$s = $this->parse_html($s);\n\t\t\t\t\teval(\"\\$smilie_template = \\\"\".$templates->get(\"smilie\", 1, 0).\"\\\";\");\n\t\t\t\t\t$this->smilies_cache[$s] = $smilie_template;\n\t\t\t\t\t// workaround for smilies starting with ;\n\t\t\t\t\tif($s[0] == \";\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->smilies_cache += array(\n\t\t\t\t\t\t\t\"&amp$s\" => \"&amp$s\",\n\t\t\t\t\t\t\t\"&lt$s\" => \"&lt$s\",\n\t\t\t\t\t\t\t\"&gt$s\" => \"&gt$s\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Parses smilie code in the specified message.\n\t *\n\t * @param string $message $message The message being parsed.\n\t * @param int $allow_html not used\n\t * @return string The parsed message.\n\t */\n\tfunction parse_smilies($message, $allow_html=0)\n\t{\n\t\tif($this->smilies_cache == 0)\n\t\t{\n\t\t\t$this->cache_smilies();\n\t\t}\n\n\t\t// No smilies?\n\t\tif(!count($this->smilies_cache))\n\t\t{\n\t\t\treturn $message;\n\t\t}\n\n\t\t// First we take out any of the tags we don't want parsed between (url= etc)\n\t\tpreg_match_all(\"#\\[(url(=[^\\]]*)?\\]|quote=([^\\]]*)?\\])|(http|ftp)(s|)://[^\\s]*#i\", $message, $bad_matches, PREG_PATTERN_ORDER);\n\t\tif(count($bad_matches[0]) > 0)\n\t\t{\n\t\t\t$message = preg_replace(\"#\\[(url(=[^\\]]*)?\\]|quote=([^\\]]*)?\\])|(http|ftp)(s|)://[^\\s]*#si\", \"<mybb-bad-sm>\", $message);\n\t\t}\n\n\t\t$message = strtr($message, $this->smilies_cache);\n\n\t\t// If we matched any tags previously, swap them back in\n\t\tif(count($bad_matches[0]) > 0)\n\t\t{\n\t\t\t$message = explode(\"<mybb-bad-sm>\", $message);\n\t\t\t$i = 0;\n\t\t\tforeach($bad_matches[0] as $match)\n\t\t\t{\n\t\t\t\t$message[$i] .= $match;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$message = implode(\"\", $message);\n\t\t}\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Generates a cache of badwords filters.\n\t *\n\t * @access private\n\t */\n\tfunction cache_badwords()\n\t{\n\t\tglobal $cache;\n\t\t$this->badwords_cache = array();\n\t\t$this->badwords_cache = $cache->read(\"badwords\");\n\t}\n\n\t/**\n\t * Parses a list of filtered/badwords in the specified message.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @param array $options Array of parser options in yes/no format.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_badwords($message, $options=array())\n\t{\n\t\tif(empty($this->options))\n\t\t{\n\t\t\t$this->options = $options;\n\t\t}\n\n\t\tif($this->badwords_cache == 0)\n\t\t{\n\t\t\t$this->cache_badwords();\n\t\t}\n\t\tif(is_array($this->badwords_cache))\n\t\t{\n\t\t\treset($this->badwords_cache);\n\t\t\tforeach($this->badwords_cache as $bid => $badword)\n\t\t\t{\n\t\t\t\tif(!$badword['replacement'])\n\t\t\t\t{\n\t\t\t\t\t$badword['replacement'] = \"*****\";\n\t\t\t\t}\n\n\t\t\t\t// Take into account the position offset for our last replacement.\n\t\t\t\t$badword['badword'] = str_replace('\\*', '([a-zA-Z0-9_]{1})', preg_quote($badword['badword'], \"#\"));\n\n\t\t\t\t// Ensure we run the replacement enough times but not recursively (i.e. not while(preg_match..))\n\t\t\t\t$message = preg_replace(\"#(^|\\W)\".$badword['badword'].\"(?=\\W|$)#i\", '\\1'.$badword['replacement'], $message);\n\t\t\t}\n\t\t}\n\t\tif(!empty($this->options['strip_tags']))\n\t\t{\n\t\t\t$message = strip_tags($message);\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Resolves nested CDATA tags in the specified message.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_cdata($message)\n\t{\n\t\t$message = str_replace(']]>', ']]]]><![CDATA[>', $message);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Attempts to move any javascript references in the specified message.\n\t *\n\t * @param string The message to be parsed.\n\t * @return string The parsed message.\n\t */\n\tfunction fix_javascript($message)\n\t{\n\t\t$js_array = array(\n\t\t\t\"#(&\\#(0*)106;?|&\\#(0*)74;?|&\\#x(0*)4a;?|&\\#x(0*)6a;?|j)((&\\#(0*)97;?|&\\#(0*)65;?|a)(&\\#(0*)118;?|&\\#(0*)86;?|v)(&\\#(0*)97;?|&\\#(0*)65;?|a)(\\s)?(&\\#(0*)115;?|&\\#(0*)83;?|s)(&\\#(0*)99;?|&\\#(0*)67;?|c)(&\\#(0*)114;?|&\\#(0*)82;?|r)(&\\#(0*)105;?|&\\#(0*)73;?|i)(&\\#112;?|&\\#(0*)80;?|p)(&\\#(0*)116;?|&\\#(0*)84;?|t)(&\\#(0*)58;?|\\:))#i\",\n\t\t\t\"#([\\s\\\"']on)([a-z]+\\s*=)#i\",\n\t\t);\n\n\t\t// Add invisible white space\n\t\t$message = preg_replace($js_array, \"$1\\xE2\\x80\\x8C$2$6\", $message);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t* Handles fontsize.\n\t*\n\t* @param int $size The original size.\n\t* @param string $text The text within a size tag.\n\t* @return string The parsed text.\n\t*/\n\tfunction mycode_handle_size($size, $text)\n\t{\n\t\tglobal $templates;\n\n\t\t$size = (int)$size;\n\n\t\tif($size < 1)\n\t\t{\n\t\t\t$size = 1;\n\t\t}\n\n\t\tif($size > 50)\n\t\t{\n\t\t\t$size = 50;\n\t\t}\n\n\t\t$text = str_replace(\"\\'\", \"'\", $text);\n\n\t\teval(\"\\$mycode_size = \\\"\".$templates->get(\"mycode_size_int\", 1, 0).\"\\\";\");\n\t\treturn $mycode_size;\n\t}\n\n\t/**\n\t* Handles fontsize.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed text.\n\t*/\n\tfunction mycode_handle_size_callback($matches)\n\t{\n\t\treturn $this->mycode_handle_size($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t* Parses quote MyCode.\n\t*\n\t* @param string $message The message to be parsed\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_quotes($message, $text_only=false)\n\t{\n\t\tglobal $lang, $templates, $theme, $mybb;\n\n\t\t// Assign pattern and replace values.\n\t\t$pattern = \"#\\[quote\\](.*?)\\[\\/quote\\](\\r\\n?|\\n?)#si\";\n\t\t$pattern_callback = \"#\\[quote=([\\\"']|&quot;|)(.*?)(?:\\\\1)(.*?)(?:[\\\"']|&quot;)?\\](.*?)\\[/quote\\](\\r\\n?|\\n?)#si\";\n\n\t\tif($text_only == false)\n\t\t{\n\t\t\t$replace = \"<blockquote class=\\\"mycode_quote\\\"><cite>$lang->quote</cite>$1</blockquote>\\n\";\n\t\t\t$replace_callback = array($this, 'mycode_parse_post_quotes_callback1');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$replace = \"\\n{$lang->quote}\\n--\\n$1\\n--\\n\";\n\t\t\t$replace_callback = array($this, 'mycode_parse_post_quotes_callback2');\n\t\t}\n\n\t\tdo\n\t\t{\n\t\t\t// preg_replace has erased the message? Restore it...\n\t\t\t$previous_message = $message;\n\t\t\t$message = preg_replace($pattern, $replace, $message, -1, $count);\n\t\t\t$message = preg_replace_callback($pattern_callback, $replace_callback, $message, -1, $count_callback);\n\t\t\tif(!$message)\n\t\t\t{\n\t\t\t\t$message = $previous_message;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while($count || $count_callback);\n\n\t\tif($text_only == false)\n\t\t{\n\t\t\t$find = array(\n\t\t\t\t\"#(\\r\\n*|\\n*)<\\/cite>(\\r\\n*|\\n*)#\",\n\t\t\t\t\"#(\\r\\n*|\\n*)<\\/blockquote>#\"\n\t\t\t);\n\n\t\t\t$replace = array(\n\t\t\t\t\"</cite><br />\",\n\t\t\t\t\"</blockquote>\"\n\t\t\t);\n\t\t\t$message = preg_replace($find, $replace, $message);\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t* Parses quotes with post id and/or dateline.\n\t*\n\t* @param string $message The message to be parsed\n\t* @param string $username The username to be parsed\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_post_quotes($message, $username, $text_only=false)\n\t{\n\t\tglobal $lang, $templates, $theme, $mybb;\n\n\t\t$linkback = $date = \"\";\n\n\t\t$message = trim($message);\n\t\t$message = preg_replace(\"#(^<br(\\s?)(\\/?)>|<br(\\s?)(\\/?)>$)#i\", \"\", $message);\n\n\t\tif(!$message)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t$username .= \"'\";\n\t\t$delete_quote = true;\n\n\t\tpreg_match(\"#pid=(?:&quot;|\\\"|')?([0-9]+)[\\\"']?(?:&quot;|\\\"|')?#i\", $username, $match);\n\t\tif((int)$match[1])\n\t\t{\n\t\t\t$pid = (int)$match[1];\n\t\t\t$url = $mybb->settings['bburl'].\"/\".get_post_link($pid).\"#pid$pid\";\n\t\t\tif(defined(\"IN_ARCHIVE\"))\n\t\t\t{\n\t\t\t\t$linkback = \" <a href=\\\"{$url}\\\">[ -> ]</a>\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teval(\"\\$linkback = \\\" \".$templates->get(\"postbit_gotopost\", 1, 0).\"\\\";\");\n\t\t\t}\n\n\t\t\t$username = preg_replace(\"#(?:&quot;|\\\"|')? pid=(?:&quot;|\\\"|')?[0-9]+[\\\"']?(?:&quot;|\\\"|')?#i\", '', $username);\n\t\t\t$delete_quote = false;\n\t\t}\n\n\t\tunset($match);\n\t\tpreg_match(\"#dateline=(?:&quot;|\\\"|')?([0-9]+)(?:&quot;|\\\"|')?#i\", $username, $match);\n\t\tif((int)$match[1])\n\t\t{\n\t\t\tif($match[1] < TIME_NOW)\n\t\t\t{\n\t\t\t\t$postdate = my_date('relative', (int)$match[1]);\n\t\t\t\t$date = \" ({$postdate})\";\n\t\t\t}\n\t\t\t$username = preg_replace(\"#(?:&quot;|\\\"|')? dateline=(?:&quot;|\\\"|')?[0-9]+(?:&quot;|\\\"|')?#i\", '', $username);\n\t\t\t$delete_quote = false;\n\t\t}\n\n\t\tif($delete_quote)\n\t\t{\n\t\t\t$username = my_substr($username, 0, my_strlen($username)-1);\n\t\t}\n\n\t\tif(!empty($this->options['allow_html']))\n\t\t{\n\t\t\t$username = htmlspecialchars_uni($username);\n\t\t}\n\n\t\tif($text_only)\n\t\t{\n\t\t\treturn \"\\n{$username} {$lang->wrote}{$date}\\n--\\n{$message}\\n--\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$span = \"\";\n\t\t\tif(!$delete_quote)\n\t\t\t{\n\t\t\t\t$span = \"<span>{$date}</span>\";\n\t\t\t}\n\n\t\t\teval(\"\\$mycode_quote = \\\"\".$templates->get(\"mycode_quote_post\", 1, 0).\"\\\";\");\n\t\t\treturn $mycode_quote;\n\t\t}\n\t}\n\n\t/**\n\t* Parses quotes with post id and/or dateline.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_post_quotes_callback1($matches)\n\t{\n\t\treturn $this->mycode_parse_post_quotes($matches[4],$matches[2].$matches[3]);\n\t}\n\n\t/**\n\t* Parses quotes with post id and/or dateline.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_post_quotes_callback2($matches)\n\t{\n\t\treturn $this->mycode_parse_post_quotes($matches[4],$matches[2].$matches[3], true);\n\t}\n\n\t/**\n\t* Parses code MyCode.\n\t*\n\t* @param string $code The message to be parsed\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_code($code, $text_only=false)\n\t{\n\t\tglobal $lang, $templates;\n\n\t\tif($text_only == true)\n\t\t{\n\t\t\treturn \"\\n{$lang->code}\\n--\\n{$code}\\n--\\n\";\n\t\t}\n\n\t\t// Clean the string before parsing.\n\t\t$code = preg_replace('#^(\\t*)(\\n|\\r|\\0|\\x0B| )*#', '\\\\1', $code);\n\t\t$code = rtrim($code);\n\t\t$original = preg_replace('#^\\t*#', '', $code);\n\n\t\tif(empty($original))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$code = str_replace('$', '&#36;', $code);\n\t\t$code = preg_replace('#\\$([0-9])#', '\\\\\\$\\\\1', $code);\n\t\t$code = str_replace('\\\\', '&#92;', $code);\n\t\t$code = str_replace(\"\\t\", '&nbsp;&nbsp;&nbsp;&nbsp;', $code);\n\t\t$code = str_replace(\"  \", '&nbsp;&nbsp;', $code);\n\n\t\teval(\"\\$mycode_code = \\\"\".$templates->get(\"mycode_code\", 1, 0).\"\\\";\");\n\t\treturn $mycode_code;\n\t}\n\n\t/**\n\t* Parses code MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_code_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_code($matches[1], true);\n\t}\n\n\t/**\n\t* Parses PHP code MyCode.\n\t*\n\t* @param string $str The message to be parsed\n\t* @param boolean $bare_return Whether or not it should return it as pre-wrapped in a div or not.\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_php($str, $bare_return = false, $text_only = false)\n\t{\n\t\tglobal $lang, $templates;\n\n\t\tif($text_only == true)\n\t\t{\n\t\t\treturn \"\\n{$lang->php_code}\\n--\\n$str\\n--\\n\";\n\t\t}\n\n\t\t// Clean the string before parsing except tab spaces.\n\t\t$str = preg_replace('#^(\\t*)(\\n|\\r|\\0|\\x0B| )*#', '\\\\1', $str);\n\t\t$str = rtrim($str);\n\n\t\t$original = preg_replace('#^\\t*#', '', $str);\n\n\t\tif(empty($original))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// See if open and close tags are provided.\n\t\t$added_open_tag = false;\n\t\tif(!preg_match(\"#^\\s*<\\?#si\", $str))\n\t\t{\n\t\t\t$added_open_tag = true;\n\t\t\t$str = \"<?php \\n\".$str;\n\t\t}\n\n\t\t$added_end_tag = false;\n\t\tif(!preg_match(\"#\\?>\\s*$#si\", $str))\n\t\t{\n\t\t\t$added_end_tag = true;\n\t\t\t$str = $str.\" \\n?>\";\n\t\t}\n\n\t\t$code = @highlight_string($str, true);\n\n\t\t// Do the actual replacing.\n\t\t$code = preg_replace('#<code>\\s*<span style=\"color: \\#000000\">\\s*#i', \"<code>\", $code);\n\t\t$code = preg_replace(\"#</span>\\s*</code>#\", \"</code>\", $code);\n\t\t$code = preg_replace(\"#</span>(\\r\\n?|\\n?)</code>#\", \"</span></code>\", $code);\n\t\t$code = str_replace(\"\\\\\", '&#092;', $code);\n\t\t$code = str_replace('$', '&#36;', $code);\n\t\t$code = preg_replace(\"#&amp;\\#([0-9]+);#si\", \"&#$1;\", $code);\n\n\t\tif($added_open_tag)\n\t\t{\n\t\t\t$code = preg_replace(\"#<code><span style=\\\"color: \\#([A-Z0-9]{6})\\\">&lt;\\?php( |&nbsp;)(<br />?)#\", \"<code><span style=\\\"color: #$1\\\">\", $code);\n\t\t}\n\n\t\tif($added_end_tag)\n\t\t{\n\t\t\t$code = str_replace(\"?&gt;</span></code>\", \"</span></code>\", $code);\n\t\t\t// Wait a minute. It fails highlighting? Stupid highlighter.\n\t\t\t$code = str_replace(\"?&gt;</code>\", \"</code>\", $code);\n\t\t}\n\n\t\t$code = preg_replace(\"#<span style=\\\"color: \\#([A-Z0-9]{6})\\\"></span>#\", \"\", $code);\n\t\t$code = str_replace(\"<code>\", \"<div dir=\\\"ltr\\\"><code>\", $code);\n\t\t$code = str_replace(\"</code>\", \"</code></div>\", $code);\n\t\t$code = preg_replace(\"# *$#\", \"\", $code);\n\n\t\tif($bare_return)\n\t\t{\n\t\t\treturn $code;\n\t\t}\n\n\t\t// Send back the code all nice and pretty\n\t\teval(\"\\$mycode_php = \\\"\".$templates->get(\"mycode_php\", 1, 0).\"\\\";\");\n\t\treturn $mycode_php;\n\t}\n\n\t/**\n\t* Parses PHP code MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_php_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_php($matches[1], false, true);\n\t}\n\n\t/**\n\t* Parses URL MyCode.\n\t*\n\t* @param string $url The URL to link to.\n\t* @param string $name The name of the link.\n\t* @return string The built-up link.\n\t*/\n\tfunction mycode_parse_url($url, $name=\"\")\n\t{\n\t\tglobal $templates;\n\t\tif(!preg_match(\"#^[a-z0-9]+://#i\", $url))\n\t\t{\n\t\t\t$url = \"http://\".$url;\n\t\t}\n\n\t\tif(!empty($this->options['allow_html']))\n\t\t{\n\t\t\t$url = $this->parse_html($url);\n\t\t}\n\n\t\tif(!$name)\n\t\t{\n\t\t\t$name = $url;\n\t\t}\n\n\t\tif($name == $url && (!isset($this->options['shorten_urls']) || !empty($this->options['shorten_urls'])))\n\t\t{\n\t\t\t$name = htmlspecialchars_decode($name);\n\t\t\tif(my_strlen($name) > 55)\n\t\t\t{\n\t\t\t\t$name = my_substr($name , 0, 40).'...'.my_substr($name , -10);\n\t\t\t}\n\t\t\t$name = htmlspecialchars_uni($name);\n\t\t}\n\n\t\t$nofollow = '';\n\t\tif(!empty($this->options['nofollow_on']))\n\t\t{\n\t\t\t$nofollow = \" rel=\\\"nofollow\\\"\";\n\t\t}\n\n\t\t// Fix some entities in URLs\n\t\t$entities = array('$' => '%24', '&#36;' => '%24', '^' => '%5E', '`' => '%60', '[' => '%5B', ']' => '%5D', '{' => '%7B', '}' => '%7D', '\"' => '%22', '<' => '%3C', '>' => '%3E', ' ' => '%20');\n\t\t$url = str_replace(array_keys($entities), array_values($entities), $url);\n\n\t\t$name = preg_replace(\"#&amp;\\#([0-9]+);#si\", \"&#$1;\", $name); // Fix & but allow unicode\n\n\t\teval(\"\\$mycode_url = \\\"\".$templates->get(\"mycode_url\", 1, 0).\"\\\";\");\n\t\treturn $mycode_url;\n\t}\n\n\t/**\n\t* Parses URL MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up link.\n\t*/\n\tfunction mycode_parse_url_callback1($matches)\n\t{\n\t\tif(!isset($matches[3]))\n\t\t{\n\t\t\t$matches[3] = '';\n\t\t}\n\t\treturn $this->mycode_parse_url($matches[1].$matches[2], $matches[3]);\n\t}\n\n\t/**\n\t* Parses URL MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up link.\n\t*/\n\tfunction mycode_parse_url_callback2($matches)\n\t{\n\t\tif(!isset($matches[2]))\n\t\t{\n\t\t\t$matches[2] = '';\n\t\t}\n\t\treturn $this->mycode_parse_url($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param string $url The URL to the image\n\t * @param array $dimensions Optional array of dimensions\n\t * @param string $align\n\t * @return string\n\t */\n\tfunction mycode_parse_img($url, $dimensions=array(), $align='')\n\t{\n\t\tglobal $lang, $templates;\n\t\t$url = trim($url);\n\t\t$url = str_replace(\"\\n\", \"\", $url);\n\t\t$url = str_replace(\"\\r\", \"\", $url);\n\n\t\tif(!empty($this->options['allow_html']))\n\t\t{\n\t\t\t$url = $this->parse_html($url);\n\t\t}\n\n\t\t$css_align = '';\n\t\tif($align == \"right\")\n\t\t{\n\t\t\t$css_align = ' style=\"float: right;\"';\n\t\t}\n\t\telse if($align == \"left\")\n\t\t{\n\t\t\t$css_align = ' style=\"float: left;\"';\n\t\t}\n\n\t\tif($align)\n\t\t{\n\t\t\t$this->clear_needed = true;\n\t\t}\n\n\t\t$alt = basename($url);\n\t\t$alt = htmlspecialchars_decode($alt);\n\t\tif(my_strlen($alt) > 55)\n\t\t{\n\t\t\t$alt = my_substr($alt, 0, 40).'...'.my_substr($alt, -10);\n\t\t}\n\t\t$alt = htmlspecialchars_uni($alt);\n\n\t\t$alt = $lang->sprintf($lang->posted_image, $alt);\n\t\t$width = $height = '';\n\t\tif(isset($dimensions[0]) && $dimensions[0] > 0 && isset($dimensions[1]) && $dimensions[1] > 0)\n\t\t{\n\t\t\t$width = \" width=\\\"{$dimensions[0]}\\\"\";\n\t\t\t$height = \" height=\\\"{$dimensions[1]}\\\"\";\n\t\t}\n\n\t\teval(\"\\$mycode_img = \\\"\".$templates->get(\"mycode_img\", 1, 0).\"\\\";\");\n\t\treturn $mycode_img;\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback1($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[2]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback2($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[4], array($matches[1], $matches[2]));\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback3($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[3], array(), $matches[1]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback4($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[5], array($matches[1], $matches[2]), $matches[3]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param string $url The URL to the image\n\t * @return string\n\t */\n\tfunction mycode_parse_img_disabled($url)\n\t{\n\t\tglobal $lang;\n\t\t$url = trim($url);\n\t\t$url = str_replace(\"\\n\", \"\", $url);\n\t\t$url = str_replace(\"\\r\", \"\", $url);\n\t\t$url = str_replace(\"\\'\", \"'\", $url);\n\n\t\t$image = $lang->sprintf($lang->posted_image, $this->mycode_parse_url($url));\n\t\treturn $image;\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback1($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[2]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback2($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[4]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback3($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[3]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback4($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[5]);\n\t}\n\n\t/**\n\t* Parses email MyCode.\n\t*\n\t* @param string $email The email address to link to.\n\t* @param string $name The name for the link.\n\t* @return string The built-up email link.\n\t*/\n\tfunction mycode_parse_email($email, $name=\"\")\n\t{\n\t\tglobal $templates;\n\n\t\tif(!$name)\n\t\t{\n\t\t\t$name = $email;\n\t\t}\n\t\tif(preg_match(\"/^([a-zA-Z0-9-_\\+\\.]+?)@[a-zA-Z0-9-]+\\.[a-zA-Z0-9\\.-]+$/si\", $email))\n\t\t{\n\t\t\t$email = $email;\n\t\t}\n\t\telseif(preg_match(\"/^([a-zA-Z0-9-_\\+\\.]+?)@[a-zA-Z0-9-]+\\.[a-zA-Z0-9\\.-]+\\?(.*?)$/si\", $email))\n\t\t{\n\t\t\t$email = htmlspecialchars_uni($email);\n\t\t}\n\n\t\teval(\"\\$mycode_email = \\\"\".$templates->get(\"mycode_email\", 1, 0).\"\\\";\");\n\t\treturn $mycode_email;\n\t}\n\n\t/**\n\t* Parses email MyCode.\n\t*\n\t* @param array $matches Matches\n\t* @return string The built-up email link.\n\t*/\n\tfunction mycode_parse_email_callback($matches)\n\t{\n\t\tif(!isset($matches[2]))\n\t\t{\n\t\t\t$matches[2] = '';\n\t\t}\n\t\treturn $this->mycode_parse_email($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t* Parses video MyCode.\n\t*\n\t* @param string $video The video provider.\n\t* @param string $url The video to link to.\n\t* @return string The built-up video code.\n\t*/\n\tfunction mycode_parse_video($video, $url)\n\t{\n\t\tglobal $templates;\n\n\t\tif(empty($video) || empty($url))\n\t\t{\n\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\t$parsed_url = @parse_url(urldecode($url));\n\t\tif($parsed_url == false)\n\t\t{\n\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\t$fragments = array();\n\t\tif($parsed_url['fragment'])\n\t\t{\n\t\t\t$fragments = explode(\"&\", $parsed_url['fragment']);\n\t\t}\n\n\t\t$queries = explode(\"&\", $parsed_url['query']);\n\n\t\t$input = array();\n\t\tforeach($queries as $query)\n\t\t{\n\t\t\tlist($key, $value) = explode(\"=\", $query);\n\t\t\t$key = str_replace(\"amp;\", \"\", $key);\n\t\t\t$input[$key] = $value;\n\t\t}\n\n\t\t$path = explode('/', $parsed_url['path']);\n\n\t\tswitch($video)\n\t\t{\n\t\t\tcase \"dailymotion\":\n\t\t\t\tlist($id) = explode('_', $path[2], 2); // http://www.dailymotion.com/video/fds123_title-goes-here\n\t\t\t\tbreak;\n\t\t\tcase \"metacafe\":\n\t\t\t\t$id = $path[2]; // http://www.metacafe.com/watch/fds123/title_goes_here/\n\t\t\t\t$title = htmlspecialchars_uni($path[3]);\n\t\t\t\tbreak;\n\t\t\tcase \"myspacetv\":\n\t\t\t\t$id = $path[4]; // http://www.myspace.com/video/fds/fds/123\n\t\t\t\tbreak;\n\t\t\tcase \"facebook\":\n\t\t\t\tif(isset($input['v']))\n\t\t\t\t{\n\t\t\t\t\t$id = $input['v']; // http://www.facebook.com/video/video.php?v=123\n\t\t\t\t}\n\t\t\t\telseif(substr($path[3], 0, 3) == 'vb.')\n\t\t\t\t{\n\t\t\t\t\t$id = $path[4]; // https://www.facebook.com/fds/videos/vb.123/123/\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[3]; // https://www.facebook.com/fds/videos/123/\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"veoh\":\n\t\t\t\t$id = $path[2]; // http://www.veoh.com/watch/123\n\t\t\t\tbreak;\n\t\t\tcase \"liveleak\":\n\t\t\t\t$id = $input['i']; // http://www.liveleak.com/view?i=123\n\t\t\t\tbreak;\n\t\t\tcase \"yahoo\":\n\t\t\t\tif(isset($path[2]))\n\t\t\t\t{\n\t\t\t\t\t$id = $path[2]; // http://xy.screen.yahoo.com/fds/fds-123.html\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[1]; // http://xy.screen.yahoo.com/fds-123.html\n\t\t\t\t}\n\t\t\t\t// Support for localized portals\n\t\t\t\t$domain = explode('.', $parsed_url['host']);\n\t\t\t\tif($domain[0] != 'screen' && preg_match('#^([a-z-]+)$#', $domain[0]))\n\t\t\t\t{\n\t\t\t\t\t$local = \"{$domain[0]}.\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$local = '';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"vimeo\":\n\t\t\t\tif(isset($path[3]))\n\t\t\t\t{\n\t\t\t\t\t$id = $path[3]; // http://vimeo.com/fds/fds/fds123\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[1]; // http://vimeo.com/fds123\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"youtube\":\n\t\t\t\tif($fragments[0])\n\t\t\t\t{\n\t\t\t\t\t$id = str_replace('!v=', '', $fragments[0]); // http://www.youtube.com/watch#!v=fds123\n\t\t\t\t}\n\t\t\t\telseif($input['v'])\n\t\t\t\t{\n\t\t\t\t\t$id = $input['v']; // http://www.youtube.com/watch?v=fds123\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[1]; // http://www.youtu.be/fds123\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"twitch\":\n\t\t\t\tif(isset($path[3]))\n\t\t\t\t{\n\t\t\t\t\t$id = $path[3]; // https://www.twitch.tv/giantbomb/v/100048090\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\tif(empty($id))\n\t\t{\n\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\t$id = htmlspecialchars_uni($id);\n\n\t\teval(\"\\$video_code = \\\"\".$templates->get(\"video_{$video}_embed\").\"\\\";\");\n\t\treturn $video_code;\n\t}\n\n\t/**\n\t* Parses video MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up video code.\n\t*/\n\tfunction mycode_parse_video_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_video($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t * Parses video MyCode disabled.\n\t *\n\t * @param string $url The URL to the video\n\t * @return string\n\t */\n\tfunction mycode_parse_video_disabled($url)\n\t{\n\t\tglobal $lang;\n\t\t$url = trim($url);\n\t\t$url = str_replace(\"\\n\", \"\", $url);\n\t\t$url = str_replace(\"\\r\", \"\", $url);\n\t\t$url = str_replace(\"\\'\", \"'\", $url);\n\n\t\t$video = $lang->sprintf($lang->posted_video, $this->mycode_parse_url($url));\n\t\treturn $video;\n\t}\n\n\t/**\n\t* Parses video MyCode disabled.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up video code.\n\t*/\n\tfunction mycode_parse_video_disabled_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_video_disabled($matches[2]);\n\t}\n\n\t/**\n\t* Parses URLs automatically.\n\t*\n\t* @param string $message The message to be parsed\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_auto_url($message)\n\t{\n\t\t$message = \" \".$message;\n\t\t// Links should end with slashes, numbers, characters and braces but not with dots, commas or question marks\n\t\t$message = preg_replace_callback(\"#([\\>\\s\\(\\)])(http|https|ftp|news|irc|ircs|irc6){1}://([^\\/\\\"\\s\\<\\[\\.]+\\.([^\\/\\\"\\s\\<\\[\\.]+\\.)*[\\w]+(:[0-9]+)?(/([^\\\"\\s<\\[]|\\[\\])*)?([\\w\\/\\)]))#iu\", array($this, 'mycode_auto_url_callback'), $message);\n\t\t$message = preg_replace_callback(\"#([\\>\\s\\(\\)])(www|ftp)\\.(([^\\/\\\"\\s\\<\\[\\.]+\\.)*[\\w]+(:[0-9]+)?(/([^\\\"\\s<\\[]|\\[\\])*)?([\\w\\/\\)]))#iu\", array($this, 'mycode_auto_url_callback'), $message);\n\t\t$message = my_substr($message, 1);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t* Parses URLs automatically.\n\t*\n\t* @param array $matches Matches\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_auto_url_callback($matches)\n\t{\n\t\t$external = '';\n\t\t// Allow links like http://en.wikipedia.org/wiki/PHP_(disambiguation) but detect mismatching braces\n\t\twhile(my_substr($matches[3], -1) == ')')\n\t\t{\n\t\t\tif(substr_count($matches[3], ')') > substr_count($matches[3], '('))\n\t\t\t{\n\t\t\t\t$matches[3] = my_substr($matches[3], 0, -1);\n\t\t\t\t$external = ')'.$external;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Example: ([...] http://en.wikipedia.org/Example_(disambiguation).)\n\t\t\t$last_char = my_substr($matches[3], -1);\n\t\t\twhile($last_char == '.' || $last_char == ',' || $last_char == '?' || $last_char == '!')\n\t\t\t{\n\t\t\t\t$matches[3] = my_substr($matches[3], 0, -1);\n\t\t\t\t$external = $last_char.$external;\n\t\t\t\t$last_char = my_substr($matches[3], -1);\n\t\t\t}\n\t\t}\n\t\tif($matches[2] == 'www' || $matches[2] == 'ftp')\n\t\t{\n\t\t\treturn \"{$matches[1]}[url]{$matches[2]}.{$matches[3]}[/url]{$external}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn \"{$matches[1]}[url]{$matches[2]}://{$matches[3]}[/url]{$external}\";\n\t\t}\n\t}\n\n\t/**\n\t* Parses list MyCode.\n\t*\n\t* @param string $message The message to be parsed\n\t* @param string $type The list type\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_list($message, $type=\"\")\n\t{\n\t\t// No list elements? That's invalid HTML\n\t\tif(strpos($message, '[*]') === false)\n\t\t{\n\t\t\t$message = \"[*]{$message}\";\n\t\t}\n\n\t\t$message = preg_replace(\"#[^\\S\\n\\r]*\\[\\*\\]\\s*#\", \"</li>\\n<li>\", $message);\n\t\t$message .= \"</li>\";\n\n\t\tif($type)\n\t\t{\n\t\t\t$list = \"\\n<ol type=\\\"$type\\\" class=\\\"mycode_list\\\">$message</ol>\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$list = \"<ul class=\\\"mycode_list\\\">$message</ul>\\n\";\n\t\t}\n\t\t$list = preg_replace(\"#<(ol type=\\\"$type\\\"|ul)>\\s*</li>#\", \"<$1>\", $list);\n\t\treturn $list;\n\t}\n\n\t/**\n\t* Parses list MyCode.\n\t*\n\t* @param array $matches Matches\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_list_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_list($matches[3], $matches[2]);\n\t}\n\n\t/**\n\t* Prepares list MyCode by finding the matching list tags.\n\t*\n\t* @param array $matches Matches\n\t* @return string Temporary replacements.\n\t*/\n\tfunction mycode_prepare_list($matches)\n\t{\n\t\t// Append number to identify matching list tags\n\t\tif(strcasecmp($matches[1], '[/list]') == 0)\n\t\t{\n\t\t\t$count = array_pop($this->list_elements);\n\t\t\tif($count !== NULL)\n\t\t\t{\n\t\t\t\treturn \"[/list&{$count}]\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// No open list tag...\n\t\t\t\treturn $matches[0];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++$this->list_count;\n\t\t\t$this->list_elements[] = $this->list_count;\n\t\t\tif(!empty($matches[2]))\n\t\t\t{\n\t\t\t\treturn \"[list{$matches[2]}&{$this->list_count}]\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn \"[list&{$this->list_count}]\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Strips smilies from a string\n\t *\n\t * @param string $message The message for smilies to be stripped from\n\t * @return string The message with smilies stripped\n\t */\n\tfunction strip_smilies($message)\n\t{\n\t\tif($this->smilies_cache == 0)\n\t\t{\n\t\t\t$this->cache_smilies();\n\t\t}\n\t\tif(is_array($this->smilies_cache))\n\t\t{\n\t\t\t$message = str_replace($this->smilies_cache, array_keys($this->smilies_cache), $message);\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Highlights a string\n\t *\n\t * @param string $message The message to be highligted\n\t * @param string $highlight The highlight keywords\n\t * @return string The message with highlight bbcodes\n\t */\n\tfunction highlight_message($message, $highlight)\n\t{\n\t\tif(empty($this->highlight_cache))\n\t\t{\n\t\t\t$this->highlight_cache = build_highlight_array($highlight);\n\t\t}\n\n\t\tif(is_array($this->highlight_cache) && !empty($this->highlight_cache))\n\t\t{\n\t\t\t$message = preg_replace(array_keys($this->highlight_cache), $this->highlight_cache, $message);\n\t\t}\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Parses message to plain text equivalents of MyCode.\n\t *\n\t * @param string $message The message to be parsed\n\t * @param array $options\n\t * @return string The parsed message.\n\t */\n\tfunction text_parse_message($message, $options=array())\n\t{\n\t\tglobal $plugins;\n\n\t\tif(empty($this->options))\n\t\t{\n\t\t\t$this->options = $options;\n\t\t}\n\n\t\t// Filter bad words if requested.\n\t\tif(!empty($this->options['filter_badwords']))\n\t\t{\n\t\t\t$message = $this->parse_badwords($message);\n\t\t}\n\n\t\t// Parse quotes first\n\t\t$message = $this->mycode_parse_quotes($message, true);\n\n\t\t$message = preg_replace_callback(\"#\\[php\\](.*?)\\[/php\\](\\r\\n?|\\n?)#is\", array($this, 'mycode_parse_php_callback'), $message);\n\t\t$message = preg_replace_callback(\"#\\[code\\](.*?)\\[/code\\](\\r\\n?|\\n?)#is\", array($this, 'mycode_parse_code_callback'), $message);\n\n\t\t$find = array(\n\t\t\t\"#\\[(b|u|i|s|url|email|color|img)\\](.*?)\\[/\\\\1\\]#is\",\n\t\t\t\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\",\n\t\t\t\"#\\[url=((?!javascript)[a-z]+?://)([^\\r\\n\\\"<]+?)\\](.+?)\\[/url\\]#si\",\n\t\t\t\"#\\[url=((?!javascript:)[^\\r\\n\\\"<&\\(\\)]+?)\\](.+?)\\[/url\\]#si\",\n\t\t);\n\n\t\t$replace = array(\n\t\t\t\"$2\",\n\t\t\t\"$4\",\n\t\t\t\"$3 ($1$2)\",\n\t\t\t\"$2 ($1)\",\n\t\t);\n\t\t$message = preg_replace($find, $replace, $message);\n\n\t\t// Replace \"me\" code and slaps if we have a username\n\t\tif(!empty($this->options['me_username']))\n\t\t{\n\t\t\tglobal $lang;\n\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/me ([^\\r\\n<]*)#i', \"\\\\1* {$this->options['me_username']} \\\\2\", $message);\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/slap ([^\\r\\n<]*)#i', \"\\\\1* {$this->options['me_username']} {$lang->slaps} \\\\2 {$lang->with_trout}\", $message);\n\t\t}\n\n\t\t// Reset list cache\n\t\t$this->list_elements = array();\n\t\t$this->list_count = 0;\n\n\t\t// Find all lists\n\t\t$message = preg_replace_callback(\"#(\\[list(=(a|A|i|I|1))?\\]|\\[/list\\])#si\", array($this, 'mycode_prepare_list'), $message);\n\n\t\t// Replace all lists\n\t\tfor($i = $this->list_count; $i > 0; $i--)\n\t\t{\n\t\t\t// Ignores missing end tags\n\t\t\t$message = preg_replace_callback(\"#\\s?\\[list(=(a|A|i|I|1))?&{$i}\\](.*?)(\\[/list&{$i}\\]|$)(\\r\\n?|\\n?)#si\", array($this, 'mycode_parse_list_callback'), $message, 1);\n\t\t}\n\n\t\t// Run plugin hooks\n\t\t$message = $plugins->run_hooks(\"text_parse_message\", $message);\n\n\t\treturn $message;\n\t}\n}\n", "<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n/**\n * Outputs a page directly to the browser, parsing anything which needs to be parsed.\n *\n * @param string $contents The contents of the page.\n */\nfunction output_page($contents)\n{\n\tglobal $db, $lang, $theme, $templates, $plugins, $mybb;\n\tglobal $debug, $templatecache, $templatelist, $maintimer, $globaltime, $parsetime;\n\n\t$contents = parse_page($contents);\n\t$totaltime = format_time_duration($maintimer->stop());\n\t$contents = $plugins->run_hooks(\"pre_output_page\", $contents);\n\n\tif($mybb->usergroup['cancp'] == 1 || $mybb->dev_mode == 1)\n\t{\n\t\tif($mybb->settings['extraadmininfo'] != 0)\n\t\t{\n\t\t\t$phptime = $maintimer->totaltime - $db->query_time;\n\t\t\t$query_time = $db->query_time;\n\n\t\t\tif($maintimer->totaltime > 0)\n\t\t\t{\n\t\t\t\t$percentphp = number_format((($phptime/$maintimer->totaltime) * 100), 2);\n\t\t\t\t$percentsql = number_format((($query_time/$maintimer->totaltime) * 100), 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// if we've got a super fast script...  all we can do is assume something\n\t\t\t\t$percentphp = 0;\n\t\t\t\t$percentsql = 0;\n\t\t\t}\n\n\t\t\t$serverload = get_server_load();\n\n\t\t\tif(my_strpos(getenv(\"REQUEST_URI\"), \"?\"))\n\t\t\t{\n\t\t\t\t$debuglink = htmlspecialchars_uni(getenv(\"REQUEST_URI\")) . \"&amp;debug=1\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$debuglink = htmlspecialchars_uni(getenv(\"REQUEST_URI\")) . \"?debug=1\";\n\t\t\t}\n\n\t\t\t$memory_usage = get_memory_usage();\n\n\t\t\tif($memory_usage)\n\t\t\t{\n\t\t\t\t$memory_usage = $lang->sprintf($lang->debug_memory_usage, get_friendly_size($memory_usage));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$memory_usage = '';\n\t\t\t}\n\t\t\t// MySQLi is still MySQL, so present it that way to the user\n\t\t\t$database_server = $db->short_title;\n\n\t\t\tif($database_server == 'MySQLi')\n\t\t\t{\n\t\t\t\t$database_server = 'MySQL';\n\t\t\t}\n\t\t\t$generated_in = $lang->sprintf($lang->debug_generated_in, $totaltime);\n\t\t\t$debug_weight = $lang->sprintf($lang->debug_weight, $percentphp, $percentsql, $database_server);\n\t\t\t$sql_queries = $lang->sprintf($lang->debug_sql_queries, $db->query_count);\n\t\t\t$server_load = $lang->sprintf($lang->debug_server_load, $serverload);\n\n\t\t\teval(\"\\$debugstuff = \\\"\".$templates->get(\"debug_summary\").\"\\\";\");\n\t\t\t$contents = str_replace(\"<debugstuff>\", $debugstuff, $contents);\n\t\t}\n\n\t\tif($mybb->debug_mode == true)\n\t\t{\n\t\t\tdebug_page();\n\t\t}\n\t}\n\n\t$contents = str_replace(\"<debugstuff>\", \"\", $contents);\n\n\tif($mybb->settings['gzipoutput'] == 1)\n\t{\n\t\t$contents = gzip_encode($contents, $mybb->settings['gziplevel']);\n\t}\n\n\t@header(\"Content-type: text/html; charset={$lang->settings['charset']}\");\n\n\techo $contents;\n\n\t$plugins->run_hooks(\"post_output_page\");\n}\n\n/**\n * Adds a function or class to the list of code to run on shutdown.\n *\n * @param string|array $name The name of the function.\n * @param mixed $arguments Either an array of arguments for the function or one argument\n * @return boolean True if function exists, otherwise false.\n */\nfunction add_shutdown($name, $arguments=array())\n{\n\tglobal $shutdown_functions;\n\n\tif(!is_array($shutdown_functions))\n\t{\n\t\t$shutdown_functions = array();\n\t}\n\n\tif(!is_array($arguments))\n\t{\n\t\t$arguments = array($arguments);\n\t}\n\n\tif(is_array($name) && method_exists($name[0], $name[1]))\n\t{\n\t\t$shutdown_functions[] = array('function' => $name, 'arguments' => $arguments);\n\t\treturn true;\n\t}\n\telse if(!is_array($name) && function_exists($name))\n\t{\n\t\t$shutdown_functions[] = array('function' => $name, 'arguments' => $arguments);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Runs the shutdown items after the page has been sent to the browser.\n *\n */\nfunction run_shutdown()\n{\n\tglobal $config, $db, $cache, $plugins, $error_handler, $shutdown_functions, $shutdown_queries, $done_shutdown, $mybb;\n\n\tif($done_shutdown == true || !$config || (isset($error_handler) && $error_handler->has_errors))\n\t{\n\t\treturn;\n\t}\n\n\tif(empty($shutdown_queries) && empty($shutdown_functions))\n\t{\n\t\t// Nothing to do\n\t\treturn;\n\t}\n\n\t// Missing the core? Build\n\tif(!is_object($mybb))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_core.php\";\n\t\t$mybb = new MyBB;\n\n\t\t// Load the settings\n\t\trequire MYBB_ROOT.\"inc/settings.php\";\n\t\t$mybb->settings = &$settings;\n\t}\n\n\t// If our DB has been deconstructed already (bad PHP 5.2.0), reconstruct\n\tif(!is_object($db))\n\t{\n\t\tif(!isset($config) || empty($config['database']['type']))\n\t\t{\n\t\t\trequire MYBB_ROOT.\"inc/config.php\";\n\t\t}\n\n\t\tif(isset($config))\n\t\t{\n\t\t\t// Load DB interface\n\t\t\trequire_once MYBB_ROOT.\"inc/db_base.php\";\n\n\t\t\trequire_once MYBB_ROOT.\"inc/db_\".$config['database']['type'].\".php\";\n\t\t\tswitch($config['database']['type'])\n\t\t\t{\n\t\t\t\tcase \"sqlite\":\n\t\t\t\t\t$db = new DB_SQLite;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pgsql\":\n\t\t\t\t\t$db = new DB_PgSQL;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"mysqli\":\n\t\t\t\t\t$db = new DB_MySQLi;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$db = new DB_MySQL;\n\t\t\t}\n\n\t\t\t$db->connect($config['database']);\n\t\t\tif(!defined(\"TABLE_PREFIX\"))\n\t\t\t{\n\t\t\t\tdefine(\"TABLE_PREFIX\", $config['database']['table_prefix']);\n\t\t\t}\n\t\t\t$db->set_table_prefix(TABLE_PREFIX);\n\t\t}\n\t}\n\n\t// Cache object deconstructed? reconstruct\n\tif(!is_object($cache))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_datacache.php\";\n\t\t$cache = new datacache;\n\t\t$cache->cache();\n\t}\n\n\t// And finally.. plugins\n\tif(!is_object($plugins) && !defined(\"NO_PLUGINS\") && !($mybb->settings['no_plugins'] == 1))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_plugins.php\";\n\t\t$plugins = new pluginSystem;\n\t\t$plugins->load();\n\t}\n\n\t// We have some shutdown queries needing to be run\n\tif(is_array($shutdown_queries))\n\t{\n\t\t// Loop through and run them all\n\t\tforeach($shutdown_queries as $query)\n\t\t{\n\t\t\t$db->query($query);\n\t\t}\n\t}\n\n\t// Run any shutdown functions if we have them\n\tif(is_array($shutdown_functions))\n\t{\n\t\tforeach($shutdown_functions as $function)\n\t\t{\n\t\t\tcall_user_func_array($function['function'], $function['arguments']);\n\t\t}\n\t}\n\n\t$done_shutdown = true;\n}\n\n/**\n * Sends a specified amount of messages from the mail queue\n *\n * @param int $count The number of messages to send (Defaults to 10)\n */\nfunction send_mail_queue($count=10)\n{\n\tglobal $db, $cache, $plugins;\n\n\t$plugins->run_hooks(\"send_mail_queue_start\");\n\n\t// Check to see if the mail queue has messages needing to be sent\n\t$mailcache = $cache->read(\"mailqueue\");\n\tif($mailcache['queue_size'] > 0 && ($mailcache['locked'] == 0 || $mailcache['locked'] < TIME_NOW-300))\n\t{\n\t\t// Lock the queue so no other messages can be sent whilst these are (for popular boards)\n\t\t$cache->update_mailqueue(0, TIME_NOW);\n\n\t\t// Fetch emails for this page view - and send them\n\t\t$query = $db->simple_select(\"mailqueue\", \"*\", \"\", array(\"order_by\" => \"mid\", \"order_dir\" => \"asc\", \"limit_start\" => 0, \"limit\" => $count));\n\n\t\twhile($email = $db->fetch_array($query))\n\t\t{\n\t\t\t// Delete the message from the queue\n\t\t\t$db->delete_query(\"mailqueue\", \"mid='{$email['mid']}'\");\n\n\t\t\tif($db->affected_rows() == 1)\n\t\t\t{\n\t\t\t\tmy_mail($email['mailto'], $email['subject'], $email['message'], $email['mailfrom'], \"\", $email['headers'], true);\n\t\t\t}\n\t\t}\n\t\t// Update the mailqueue cache and remove the lock\n\t\t$cache->update_mailqueue(TIME_NOW, 0);\n\t}\n\n\t$plugins->run_hooks(\"send_mail_queue_end\");\n}\n\n/**\n * Parses the contents of a page before outputting it.\n *\n * @param string $contents The contents of the page.\n * @return string The parsed page.\n */\nfunction parse_page($contents)\n{\n\tglobal $lang, $theme, $mybb, $htmldoctype, $archive_url, $error_handler;\n\n\t$contents = str_replace('<navigation>', build_breadcrumb(), $contents);\n\t$contents = str_replace('<archive_url>', $archive_url, $contents);\n\n\tif($htmldoctype)\n\t{\n\t\t$contents = $htmldoctype.$contents;\n\t}\n\telse\n\t{\n\t\t$contents = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\".$contents;\n\t}\n\n\t$contents = str_replace(\"<html\", \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"\", $contents);\n\n\tif($lang->settings['rtl'] == 1)\n\t{\n\t\t$contents = str_replace(\"<html\", \"<html dir=\\\"rtl\\\"\", $contents);\n\t}\n\n\tif($lang->settings['htmllang'])\n\t{\n\t\t$contents = str_replace(\"<html\", \"<html xml:lang=\\\"\".$lang->settings['htmllang'].\"\\\" lang=\\\"\".$lang->settings['htmllang'].\"\\\"\", $contents);\n\t}\n\n\tif($error_handler->warnings)\n\t{\n\t\t$contents = str_replace(\"<body>\", \"<body>\\n\".$error_handler->show_warnings(), $contents);\n\t}\n\n\treturn $contents;\n}\n\n/**\n * Turn a unix timestamp in to a \"friendly\" date/time format for the user.\n *\n * @param string $format A date format according to PHP's date structure.\n * @param int $stamp The unix timestamp the date should be generated for.\n * @param int|string $offset The offset in hours that should be applied to times. (timezones) Or an empty string to determine that automatically\n * @param int $ty Whether or not to use today/yesterday formatting.\n * @param boolean $adodb Whether or not to use the adodb time class for < 1970 or > 2038 times\n * @return string The formatted timestamp.\n */\nfunction my_date($format, $stamp=0, $offset=\"\", $ty=1, $adodb=false)\n{\n\tglobal $mybb, $lang, $mybbadmin, $plugins;\n\n\t// If the stamp isn't set, use TIME_NOW\n\tif(empty($stamp))\n\t{\n\t\t$stamp = TIME_NOW;\n\t}\n\n\tif(!$offset && $offset != '0')\n\t{\n\t\tif(isset($mybb->user['uid']) && $mybb->user['uid'] != 0 && array_key_exists(\"timezone\", $mybb->user))\n\t\t{\n\t\t\t$offset = (float)$mybb->user['timezone'];\n\t\t\t$dstcorrection = $mybb->user['dst'];\n\t\t}\n\t\telseif(defined(\"IN_ADMINCP\"))\n\t\t{\n\t\t\t$offset = (float)$mybbadmin['timezone'];\n\t\t\t$dstcorrection = $mybbadmin['dst'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$offset = (float)$mybb->settings['timezoneoffset'];\n\t\t\t$dstcorrection = $mybb->settings['dstcorrection'];\n\t\t}\n\n\t\t// If DST correction is enabled, add an additional hour to the timezone.\n\t\tif($dstcorrection == 1)\n\t\t{\n\t\t\t++$offset;\n\t\t\tif(my_substr($offset, 0, 1) != \"-\")\n\t\t\t{\n\t\t\t\t$offset = \"+\".$offset;\n\t\t\t}\n\t\t}\n\t}\n\n\tif($offset == \"-\")\n\t{\n\t\t$offset = 0;\n\t}\n\n\t// Using ADOdb?\n\tif($adodb == true && !function_exists('adodb_date'))\n\t{\n\t\t$adodb = false;\n\t}\n\n\t$todaysdate = $yesterdaysdate = '';\n\tif($ty && ($format == $mybb->settings['dateformat'] || $format == 'relative'))\n\t{\n\t\t$_stamp = TIME_NOW;\n\t\tif($adodb == true)\n\t\t{\n\t\t\t$date = adodb_date($mybb->settings['dateformat'], $stamp + ($offset * 3600));\n\t\t\t$todaysdate = adodb_date($mybb->settings['dateformat'], $_stamp + ($offset * 3600));\n\t\t\t$yesterdaysdate = adodb_date($mybb->settings['dateformat'], ($_stamp - 86400) + ($offset * 3600));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$date = gmdate($mybb->settings['dateformat'], $stamp + ($offset * 3600));\n\t\t\t$todaysdate = gmdate($mybb->settings['dateformat'], $_stamp + ($offset * 3600));\n\t\t\t$yesterdaysdate = gmdate($mybb->settings['dateformat'], ($_stamp - 86400) + ($offset * 3600));\n\t\t}\n\t}\n\n\tif($format == 'relative')\n\t{\n\t\t// Relative formats both date and time\n\t\tif($ty != 2 && abs(TIME_NOW - $stamp) < 3600)\n\t\t{\n\t\t\t$diff = TIME_NOW - $stamp;\n\t\t\t$relative = array('prefix' => '', 'minute' => 0, 'plural' => $lang->rel_minutes_plural, 'suffix' => $lang->rel_ago);\n\n\t\t\tif($diff < 0)\n\t\t\t{\n\t\t\t\t$diff = abs($diff);\n\t\t\t\t$relative['suffix'] = '';\n\t\t\t\t$relative['prefix'] = $lang->rel_in;\n\t\t\t}\n\n\t\t\t$relative['minute'] = floor($diff / 60);\n\n\t\t\tif($relative['minute'] <= 1)\n\t\t\t{\n\t\t\t\t$relative['minute'] = 1;\n\t\t\t\t$relative['plural'] = $lang->rel_minutes_single;\n\t\t\t}\n\n\t\t\tif($diff <= 60)\n\t\t\t{\n\t\t\t\t// Less than a minute\n\t\t\t\t$relative['prefix'] = $lang->rel_less_than;\n\t\t\t}\n\n\t\t\t$date = $lang->sprintf($lang->rel_time, $relative['prefix'], $relative['minute'], $relative['plural'], $relative['suffix']);\n\t\t}\n\t\telseif($ty != 2 && abs(TIME_NOW - $stamp) < 43200)\n\t\t{\n\t\t\t$diff = TIME_NOW - $stamp;\n\t\t\t$relative = array('prefix' => '', 'hour' => 0, 'plural' => $lang->rel_hours_plural, 'suffix' => $lang->rel_ago);\n\n\t\t\tif($diff < 0)\n\t\t\t{\n\t\t\t\t$diff = abs($diff);\n\t\t\t\t$relative['suffix'] = '';\n\t\t\t\t$relative['prefix'] = $lang->rel_in;\n\t\t\t}\n\n\t\t\t$relative['hour'] = floor($diff / 3600);\n\n\t\t\tif($relative['hour'] <= 1)\n\t\t\t{\n\t\t\t\t$relative['hour'] = 1;\n\t\t\t\t$relative['plural'] = $lang->rel_hours_single;\n\t\t\t}\n\n\t\t\t$date = $lang->sprintf($lang->rel_time, $relative['prefix'], $relative['hour'], $relative['plural'], $relative['suffix']);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif($ty)\n\t\t\t{\n\t\t\t\tif($todaysdate == $date)\n\t\t\t\t{\n\t\t\t\t\t$date = $lang->today;\n\t\t\t\t}\n\t\t\t\telse if($yesterdaysdate == $date)\n\t\t\t\t{\n\t\t\t\t\t$date = $lang->yesterday;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$date .= $mybb->settings['datetimesep'];\n\t\t\tif($adodb == true)\n\t\t\t{\n\t\t\t\t$date .= adodb_date($mybb->settings['timeformat'], $stamp + ($offset * 3600));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$date .= gmdate($mybb->settings['timeformat'], $stamp + ($offset * 3600));\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif($ty && $format == $mybb->settings['dateformat'])\n\t\t{\n\t\t\tif($todaysdate == $date)\n\t\t\t{\n\t\t\t\t$date = $lang->today;\n\t\t\t}\n\t\t\telse if($yesterdaysdate == $date)\n\t\t\t{\n\t\t\t\t$date = $lang->yesterday;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif($adodb == true)\n\t\t\t{\n\t\t\t\t$date = adodb_date($format, $stamp + ($offset * 3600));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$date = gmdate($format, $stamp + ($offset * 3600));\n\t\t\t}\n\t\t}\n\t}\n\n\tif(is_object($plugins))\n\t{\n\t\t$date = $plugins->run_hooks(\"my_date\", $date);\n\t}\n\n\treturn $date;\n}\n\n/**\n * Sends an email using PHP's mail function, formatting it appropriately.\n *\n * @param string $to Address the email should be addressed to.\n * @param string $subject The subject of the email being sent.\n * @param string $message The message being sent.\n * @param string $from The from address of the email, if blank, the board name will be used.\n * @param string $charset The chracter set being used to send this email.\n * @param string $headers\n * @param boolean $keep_alive Do we wish to keep the connection to the mail server alive to send more than one message (SMTP only)\n * @param string $format The format of the email to be sent (text or html). text is default\n * @param string $message_text The text message of the email if being sent in html format, for email clients that don't support html\n * @param string $return_email The email address to return to. Defaults to admin return email address.\n * @return bool\n */\nfunction my_mail($to, $subject, $message, $from=\"\", $charset=\"\", $headers=\"\", $keep_alive=false, $format=\"text\", $message_text=\"\", $return_email=\"\")\n{\n\tglobal $mybb;\n\tstatic $mail;\n\n\t// Does our object not exist? Create it\n\tif(!is_object($mail))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_mailhandler.php\";\n\n\t\tif($mybb->settings['mail_handler'] == 'smtp')\n\t\t{\n\t\t\trequire_once MYBB_ROOT.\"inc/mailhandlers/smtp.php\";\n\t\t\t$mail = new SmtpMail();\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once MYBB_ROOT.\"inc/mailhandlers/php.php\";\n\t\t\t$mail = new PhpMail();\n\t\t}\n\t}\n\n\t// Using SMTP based mail\n\tif($mybb->settings['mail_handler'] == 'smtp')\n\t{\n\t\tif($keep_alive == true)\n\t\t{\n\t\t\t$mail->keep_alive = true;\n\t\t}\n\t}\n\n\t// Using PHP based mail()\n\telse\n\t{\n\t\tif($mybb->settings['mail_parameters'] != '')\n\t\t{\n\t\t\t$mail->additional_parameters = $mybb->settings['mail_parameters'];\n\t\t}\n\t}\n\n\t// Build and send\n\t$mail->build_message($to, $subject, $message, $from, $charset, $headers, $format, $message_text, $return_email);\n\treturn $mail->send();\n}\n\n/**\n * Generates a unique code for POST requests to prevent XSS/CSRF attacks\n *\n * @return string The generated code\n */\nfunction generate_post_check()\n{\n\tglobal $mybb, $session;\n\tif($mybb->user['uid'])\n\t{\n\t\treturn md5($mybb->user['loginkey'].$mybb->user['salt'].$mybb->user['regdate']);\n\t}\n\t// Guests get a special string\n\telse\n\t{\n\t\treturn md5($session->useragent.$mybb->config['database']['username'].$mybb->settings['internal']['encryption_key']);\n\t}\n}\n\n/**\n * Verifies a POST check code is valid, if not shows an error (silently returns false on silent parameter)\n *\n * @param string $code The incoming POST check code\n * @param boolean $silent Silent mode or not (silent mode will not show the error to the user but returns false)\n * @return bool\n */\nfunction verify_post_check($code, $silent=false)\n{\n\tglobal $lang;\n\tif(generate_post_check() !== $code)\n\t{\n\t\tif($silent == true)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(defined(\"IN_ADMINCP\"))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\terror($lang->invalid_post_code);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\n/**\n * Return a parent list for the specified forum.\n *\n * @param int $fid The forum id to get the parent list for.\n * @return string The comma-separated parent list.\n */\nfunction get_parent_list($fid)\n{\n\tglobal $forum_cache;\n\tstatic $forumarraycache;\n\n\tif($forumarraycache[$fid])\n\t{\n\t\treturn $forumarraycache[$fid]['parentlist'];\n\t}\n\telseif($forum_cache[$fid])\n\t{\n\t\treturn $forum_cache[$fid]['parentlist'];\n\t}\n\telse\n\t{\n\t\tcache_forums();\n\t\treturn $forum_cache[$fid]['parentlist'];\n\t}\n}\n\n/**\n * Build a parent list of a specific forum, suitable for querying\n *\n * @param int $fid The forum ID\n * @param string $column The column name to add to the query\n * @param string $joiner The joiner for each forum for querying (OR | AND | etc)\n * @param string $parentlist The parent list of the forum - if you have it\n * @return string The query string generated\n */\nfunction build_parent_list($fid, $column=\"fid\", $joiner=\"OR\", $parentlist=\"\")\n{\n\tif(!$parentlist)\n\t{\n\t\t$parentlist = get_parent_list($fid);\n\t}\n\n\t$parentsexploded = explode(\",\", $parentlist);\n\t$builtlist = \"(\";\n\t$sep = '';\n\n\tforeach($parentsexploded as $key => $val)\n\t{\n\t\t$builtlist .= \"$sep$column='$val'\";\n\t\t$sep = \" $joiner \";\n\t}\n\n\t$builtlist .= \")\";\n\n\treturn $builtlist;\n}\n\n/**\n * Load the forum cache in to memory\n *\n * @param boolean $force True to force a reload of the cache\n * @return array The forum cache\n */\nfunction cache_forums($force=false)\n{\n\tglobal $forum_cache, $cache;\n\n\tif($force == true)\n\t{\n\t\t$forum_cache = $cache->read(\"forums\", 1);\n\t\treturn $forum_cache;\n\t}\n\n\tif(!$forum_cache)\n\t{\n\t\t$forum_cache = $cache->read(\"forums\");\n\t\tif(!$forum_cache)\n\t\t{\n\t\t\t$cache->update_forums();\n\t\t\t$forum_cache = $cache->read(\"forums\", 1);\n\t\t}\n\t}\n\treturn $forum_cache;\n}\n\n/**\n * Generate an array of all child and descendant forums for a specific forum.\n *\n * @param int $fid The forum ID\n * @return Array of descendants\n */\nfunction get_child_list($fid)\n{\n\tstatic $forums_by_parent;\n\n\t$forums = array();\n\tif(!is_array($forums_by_parent))\n\t{\n\t\t$forum_cache = cache_forums();\n\t\tforeach($forum_cache as $forum)\n\t\t{\n\t\t\tif($forum['active'] != 0)\n\t\t\t{\n\t\t\t\t$forums_by_parent[$forum['pid']][$forum['fid']] = $forum;\n\t\t\t}\n\t\t}\n\t}\n\tif(!is_array($forums_by_parent[$fid]))\n\t{\n\t\treturn $forums;\n\t}\n\n\tforeach($forums_by_parent[$fid] as $forum)\n\t{\n\t\t$forums[] = $forum['fid'];\n\t\t$children = get_child_list($forum['fid']);\n\t\tif(is_array($children))\n\t\t{\n\t\t\t$forums = array_merge($forums, $children);\n\t\t}\n\t}\n\treturn $forums;\n}\n\n/**\n * Produce a friendly error message page\n *\n * @param string $error The error message to be shown\n * @param string $title The title of the message shown in the title of the page and the error table\n */\nfunction error($error=\"\", $title=\"\")\n{\n\tglobal $header, $footer, $theme, $headerinclude, $db, $templates, $lang, $mybb, $plugins;\n\n\t$error = $plugins->run_hooks(\"error\", $error);\n\tif(!$error)\n\t{\n\t\t$error = $lang->unknown_error;\n\t}\n\n\t// AJAX error message?\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\t@header(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\t\techo json_encode(array(\"errors\" => array($error)));\n\t\texit;\n\t}\n\n\tif(!$title)\n\t{\n\t\t$title = $mybb->settings['bbname'];\n\t}\n\n\t$timenow = my_date('relative', TIME_NOW);\n\treset_breadcrumb();\n\tadd_breadcrumb($lang->error);\n\n\teval(\"\\$errorpage = \\\"\".$templates->get(\"error\").\"\\\";\");\n\toutput_page($errorpage);\n\n\texit;\n}\n\n/**\n * Produce an error message for displaying inline on a page\n *\n * @param array $errors Array of errors to be shown\n * @param string $title The title of the error message\n * @param array $json_data JSON data to be encoded (we may want to send more data; e.g. newreply.php uses this for CAPTCHA)\n * @return string The inline error HTML\n */\nfunction inline_error($errors, $title=\"\", $json_data=array())\n{\n\tglobal $theme, $mybb, $db, $lang, $templates;\n\n\tif(!$title)\n\t{\n\t\t$title = $lang->please_correct_errors;\n\t}\n\n\tif(!is_array($errors))\n\t{\n\t\t$errors = array($errors);\n\t}\n\n\t// AJAX error message?\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\t@header(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\n\t\tif(empty($json_data))\n\t\t{\n\t\t\techo json_encode(array(\"errors\" => $errors));\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo json_encode(array_merge(array(\"errors\" => $errors), $json_data));\n\t\t}\n\t\texit;\n\t}\n\n\t$errorlist = '';\n\n\tforeach($errors as $error)\n\t{\n\t\t$errorlist .= \"<li>\".$error.\"</li>\\n\";\n\t}\n\n\teval(\"\\$errors = \\\"\".$templates->get(\"error_inline\").\"\\\";\");\n\n\treturn $errors;\n}\n\n/**\n * Presents the user with a \"no permission\" page\n */\nfunction error_no_permission()\n{\n\tglobal $mybb, $theme, $templates, $db, $lang, $plugins, $session;\n\n\t$time = TIME_NOW;\n\t$plugins->run_hooks(\"no_permission\");\n\n\t$noperm_array = array (\n\t\t\"nopermission\" => '1',\n\t\t\"location1\" => 0,\n\t\t\"location2\" => 0\n\t);\n\n\t$db->update_query(\"sessions\", $noperm_array, \"sid='{$session->sid}'\");\n\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\theader(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\t\techo json_encode(array(\"errors\" => array($lang->error_nopermission_user_ajax)));\n\t\texit;\n\t}\n\n\tif($mybb->user['uid'])\n\t{\n\t\t$lang->error_nopermission_user_username = $lang->sprintf($lang->error_nopermission_user_username, htmlspecialchars_uni($mybb->user['username']));\n\t\teval(\"\\$errorpage = \\\"\".$templates->get(\"error_nopermission_loggedin\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\t// Redirect to where the user came from\n\t\t$redirect_url = $_SERVER['PHP_SELF'];\n\t\tif($_SERVER['QUERY_STRING'])\n\t\t{\n\t\t\t$redirect_url .= '?'.$_SERVER['QUERY_STRING'];\n\t\t}\n\n\t\t$redirect_url = htmlspecialchars_uni($redirect_url);\n\n\t\tswitch($mybb->settings['username_method'])\n\t\t{\n\t\t\tcase 0:\n\t\t\t\t$lang_username = $lang->username;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t$lang_username = $lang->username1;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$lang_username = $lang->username2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$lang_username = $lang->username;\n\t\t\t\tbreak;\n\t\t}\n\t\teval(\"\\$errorpage = \\\"\".$templates->get(\"error_nopermission\").\"\\\";\");\n\t}\n\n\terror($errorpage);\n}\n\n/**\n * Redirect the user to a given URL with a given message\n *\n * @param string $url The URL to redirect the user to\n * @param string $message The redirection message to be shown\n * @param string $title The title of the redirection page\n * @param boolean $force_redirect Force the redirect page regardless of settings\n */\nfunction redirect($url, $message=\"\", $title=\"\", $force_redirect=false)\n{\n\tglobal $header, $footer, $mybb, $theme, $headerinclude, $templates, $lang, $plugins;\n\n\t$redirect_args = array('url' => &$url, 'message' => &$message, 'title' => &$title);\n\n\t$plugins->run_hooks(\"redirect\", $redirect_args);\n\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\t//@header(\"Content-type: text/html; charset={$lang->settings['charset']}\");\n\t\t$data = \"<script type=\\\"text/javascript\\\">\\n\";\n\t\tif($message != \"\")\n\t\t{\n\t\t\t$data .=  'alert(\"'.addslashes($message).'\");';\n\t\t}\n\t\t$url = str_replace(\"#\", \"&#\", $url);\n\t\t$url = htmlspecialchars_decode($url);\n\t\t$url = str_replace(array(\"\\n\",\"\\r\",\";\"), \"\", $url);\n\t\t$data .=  'window.location = \"'.addslashes($url).'\";'.\"\\n\";\n\t\t$data .= \"</script>\\n\";\n\t\t//exit;\n\n\t\t@header(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\t\techo json_encode(array(\"data\" => $data));\n\t\texit;\n\t}\n\n\tif(!$message)\n\t{\n\t\t$message = $lang->redirect;\n\t}\n\n\t$time = TIME_NOW;\n\t$timenow = my_date('relative', $time);\n\n\tif(!$title)\n\t{\n\t\t$title = $mybb->settings['bbname'];\n\t}\n\n\t// Show redirects only if both ACP and UCP settings are enabled, or ACP is enabled, and user is a guest, or they are forced.\n\tif($force_redirect == true || ($mybb->settings['redirects'] == 1 && ($mybb->user['showredirect'] == 1 || !$mybb->user['uid'])))\n\t{\n\t\t$url = str_replace(\"&amp;\", \"&\", $url);\n\t\t$url = htmlspecialchars_uni($url);\n\n\t\teval(\"\\$redirectpage = \\\"\".$templates->get(\"redirect\").\"\\\";\");\n\t\toutput_page($redirectpage);\n\t}\n\telse\n\t{\n\t\t$url = htmlspecialchars_decode($url);\n\t\t$url = str_replace(array(\"\\n\",\"\\r\",\";\"), \"\", $url);\n\n\t\trun_shutdown();\n\n\t\tif(!my_validate_url($url, true))\n\t\t{\n\t\t\theader(\"Location: {$mybb->settings['bburl']}/{$url}\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\theader(\"Location: {$url}\");\n\t\t}\n\t}\n\n\texit;\n}\n\n/**\n * Generate a listing of page - pagination\n *\n * @param int $count The number of items\n * @param int $perpage The number of items to be shown per page\n * @param int $page The current page number\n * @param string $url The URL to have page numbers tacked on to (If {page} is specified, the value will be replaced with the page #)\n * @param boolean $breadcrumb Whether or not the multipage is being shown in the navigation breadcrumb\n * @return string The generated pagination\n */\nfunction multipage($count, $perpage, $page, $url, $breadcrumb=false)\n{\n\tglobal $theme, $templates, $lang, $mybb;\n\n\tif($count <= $perpage)\n\t{\n\t\treturn '';\n\t}\n\n\t$url = str_replace(\"&amp;\", \"&\", $url);\n\t$url = htmlspecialchars_uni($url);\n\n\t$pages = ceil($count / $perpage);\n\n\t$prevpage = '';\n\tif($page > 1)\n\t{\n\t\t$prev = $page-1;\n\t\t$page_url = fetch_page_url($url, $prev);\n\t\teval(\"\\$prevpage = \\\"\".$templates->get(\"multipage_prevpage\").\"\\\";\");\n\t}\n\n\t// Maximum number of \"page bits\" to show\n\tif(!$mybb->settings['maxmultipagelinks'])\n\t{\n\t\t$mybb->settings['maxmultipagelinks'] = 5;\n\t}\n\n\t$from = $page-floor($mybb->settings['maxmultipagelinks']/2);\n\t$to = $page+floor($mybb->settings['maxmultipagelinks']/2);\n\n\tif($from <= 0)\n\t{\n\t\t$from = 1;\n\t\t$to = $from+$mybb->settings['maxmultipagelinks']-1;\n\t}\n\n\tif($to > $pages)\n\t{\n\t\t$to = $pages;\n\t\t$from = $pages-$mybb->settings['maxmultipagelinks']+1;\n\t\tif($from <= 0)\n\t\t{\n\t\t\t$from = 1;\n\t\t}\n\t}\n\n\tif($to == 0)\n\t{\n\t\t$to = $pages;\n\t}\n\n\t$start = '';\n\tif($from > 1)\n\t{\n\t\tif($from-1 == 1)\n\t\t{\n\t\t\t$lang->multipage_link_start = '';\n\t\t}\n\n\t\t$page_url = fetch_page_url($url, 1);\n\t\teval(\"\\$start = \\\"\".$templates->get(\"multipage_start\").\"\\\";\");\n\t}\n\n\t$mppage = '';\n\tfor($i = $from; $i <= $to; ++$i)\n\t{\n\t\t$page_url = fetch_page_url($url, $i);\n\t\tif($page == $i)\n\t\t{\n\t\t\tif($breadcrumb == true)\n\t\t\t{\n\t\t\t\teval(\"\\$mppage .= \\\"\".$templates->get(\"multipage_page_link_current\").\"\\\";\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teval(\"\\$mppage .= \\\"\".$templates->get(\"multipage_page_current\").\"\\\";\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\teval(\"\\$mppage .= \\\"\".$templates->get(\"multipage_page\").\"\\\";\");\n\t\t}\n\t}\n\n\t$end = '';\n\tif($to < $pages)\n\t{\n\t\tif($to+1 == $pages)\n\t\t{\n\t\t\t$lang->multipage_link_end = '';\n\t\t}\n\n\t\t$page_url = fetch_page_url($url, $pages);\n\t\teval(\"\\$end = \\\"\".$templates->get(\"multipage_end\").\"\\\";\");\n\t}\n\n\t$nextpage = '';\n\tif($page < $pages)\n\t{\n\t\t$next = $page+1;\n\t\t$page_url = fetch_page_url($url, $next);\n\t\teval(\"\\$nextpage = \\\"\".$templates->get(\"multipage_nextpage\").\"\\\";\");\n\t}\n\n\t$jumptopage = '';\n\tif($pages > ($mybb->settings['maxmultipagelinks']+1) && $mybb->settings['jumptopagemultipage'] == 1)\n\t{\n\t\t// When the second parameter is set to 1, fetch_page_url thinks it's the first page and removes it from the URL as it's unnecessary\n\t\t$jump_url = fetch_page_url($url, 1);\n\t\teval(\"\\$jumptopage = \\\"\".$templates->get(\"multipage_jump_page\").\"\\\";\");\n\t}\n\n\t$lang->multipage_pages = $lang->sprintf($lang->multipage_pages, $pages);\n\n\tif($breadcrumb == true)\n\t{\n\t\teval(\"\\$multipage = \\\"\".$templates->get(\"multipage_breadcrumb\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\teval(\"\\$multipage = \\\"\".$templates->get(\"multipage\").\"\\\";\");\n\t}\n\n\treturn $multipage;\n}\n\n/**\n * Generate a page URL for use by the multipage function\n *\n * @param string $url The URL being passed\n * @param int $page The page number\n * @return string\n */\nfunction fetch_page_url($url, $page)\n{\n\tif($page <= 1)\n\t{\n\t\t$find = array(\n\t\t\t\"-page-{page}\",\n\t\t\t\"&amp;page={page}\",\n\t\t\t\"{page}\"\n\t\t);\n\n\t\t// Remove \"Page 1\" to the defacto URL\n\t\t$url = str_replace($find, array(\"\", \"\", $page), $url);\n\t\treturn $url;\n\t}\n\telse if(strpos($url, \"{page}\") === false)\n\t{\n\t\t// If no page identifier is specified we tack it on to the end of the URL\n\t\tif(strpos($url, \"?\") === false)\n\t\t{\n\t\t\t$url .= \"?\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$url .= \"&amp;\";\n\t\t}\n\n\t\t$url .= \"page=$page\";\n\t}\n\telse\n\t{\n\t\t$url = str_replace(\"{page}\", $page, $url);\n\t}\n\n\treturn $url;\n}\n\n/**\n * Fetch the permissions for a specific user\n *\n * @param int $uid The user ID\n * @return array Array of user permissions for the specified user\n */\nfunction user_permissions($uid=0)\n{\n\tglobal $mybb, $cache, $groupscache, $user_cache;\n\n\t// If no user id is specified, assume it is the current user\n\tif($uid == 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\t// User id does not match current user, fetch permissions\n\tif($uid != $mybb->user['uid'])\n\t{\n\t\t// We've already cached permissions for this user, return them.\n\t\tif($user_cache[$uid]['permissions'])\n\t\t{\n\t\t\treturn $user_cache[$uid]['permissions'];\n\t\t}\n\n\t\t// This user was not already cached, fetch their user information.\n\t\tif(!$user_cache[$uid])\n\t\t{\n\t\t\t$user_cache[$uid] = get_user($uid);\n\t\t}\n\n\t\t// Collect group permissions.\n\t\t$gid = $user_cache[$uid]['usergroup'].\",\".$user_cache[$uid]['additionalgroups'];\n\t\t$groupperms = usergroup_permissions($gid);\n\n\t\t// Store group permissions in user cache.\n\t\t$user_cache[$uid]['permissions'] = $groupperms;\n\t\treturn $groupperms;\n\t}\n\t// This user is the current user, return their permissions\n\telse\n\t{\n\t\treturn $mybb->usergroup;\n\t}\n}\n\n/**\n * Fetch the usergroup permissions for a specific group or series of groups combined\n *\n * @param int|string $gid A list of groups (Can be a single integer, or a list of groups separated by a comma)\n * @return array Array of permissions generated for the groups, containing also a list of comma-separated checked groups under 'all_usergroups' index\n */\nfunction usergroup_permissions($gid=0)\n{\n\tglobal $cache, $groupscache, $grouppermignore, $groupzerogreater;\n\n\tif(!is_array($groupscache))\n\t{\n\t\t$groupscache = $cache->read(\"usergroups\");\n\t}\n\n\t$groups = explode(\",\", $gid);\n\n\tif(count($groups) == 1)\n\t{\n\t\t$groupscache[$gid]['all_usergroups'] = $gid;\n\t\treturn $groupscache[$gid];\n\t}\n\n\t$usergroup = array();\n\t$usergroup['all_usergroups'] = $gid;\n\n\tforeach($groups as $gid)\n\t{\n\t\tif(trim($gid) == \"\" || empty($groupscache[$gid]))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tforeach($groupscache[$gid] as $perm => $access)\n\t\t{\n\t\t\tif(!in_array($perm, $grouppermignore))\n\t\t\t{\n\t\t\t\tif(isset($usergroup[$perm]))\n\t\t\t\t{\n\t\t\t\t\t$permbit = $usergroup[$perm];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$permbit = \"\";\n\t\t\t\t}\n\n\t\t\t\t// 0 represents unlimited for numerical group permissions (i.e. private message limit) so take that into account.\n\t\t\t\tif(in_array($perm, $groupzerogreater) && ($access == 0 || $permbit === 0))\n\t\t\t\t{\n\t\t\t\t\t$usergroup[$perm] = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($access > $permbit || ($access == \"yes\" && $permbit == \"no\") || !$permbit) // Keep yes/no for compatibility?\n\t\t\t\t{\n\t\t\t\t\t$usergroup[$perm] = $access;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $usergroup;\n}\n\n/**\n * Fetch the display group properties for a specific display group\n *\n * @param int $gid The group ID to fetch the display properties for\n * @return array Array of display properties for the group\n */\nfunction usergroup_displaygroup($gid)\n{\n\tglobal $cache, $groupscache, $displaygroupfields;\n\n\tif(!is_array($groupscache))\n\t{\n\t\t$groupscache = $cache->read(\"usergroups\");\n\t}\n\n\t$displaygroup = array();\n\t$group = $groupscache[$gid];\n\n\tforeach($displaygroupfields as $field)\n\t{\n\t\t$displaygroup[$field] = $group[$field];\n\t}\n\n\treturn $displaygroup;\n}\n\n/**\n * Build the forum permissions for a specific forum, user or group\n *\n * @param int $fid The forum ID to build permissions for (0 builds for all forums)\n * @param int $uid The user to build the permissions for (0 will select the uid automatically)\n * @param int $gid The group of the user to build permissions for (0 will fetch it)\n * @return array Forum permissions for the specific forum or forums\n */\nfunction forum_permissions($fid=0, $uid=0, $gid=0)\n{\n\tglobal $db, $cache, $groupscache, $forum_cache, $fpermcache, $mybb, $cached_forum_permissions_permissions, $cached_forum_permissions;\n\n\tif($uid == 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif(!$gid || $gid == 0) // If no group, we need to fetch it\n\t{\n\t\tif($uid != 0 && $uid != $mybb->user['uid'])\n\t\t{\n\t\t\t$user = get_user($uid);\n\n\t\t\t$gid = $user['usergroup'].\",\".$user['additionalgroups'];\n\t\t\t$groupperms = usergroup_permissions($gid);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$gid = $mybb->user['usergroup'];\n\n\t\t\tif(isset($mybb->user['additionalgroups']))\n\t\t\t{\n\t\t\t\t$gid .= \",\".$mybb->user['additionalgroups'];\n\t\t\t}\n\n\t\t\t$groupperms = $mybb->usergroup;\n\t\t}\n\t}\n\n\tif(!is_array($forum_cache))\n\t{\n\t\t$forum_cache = cache_forums();\n\n\t\tif(!$forum_cache)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif(!is_array($fpermcache))\n\t{\n\t\t$fpermcache = $cache->read(\"forumpermissions\");\n\t}\n\n\tif($fid) // Fetch the permissions for a single forum\n\t{\n\t\tif(empty($cached_forum_permissions_permissions[$gid][$fid]))\n\t\t{\n\t\t\t$cached_forum_permissions_permissions[$gid][$fid] = fetch_forum_permissions($fid, $gid, $groupperms);\n\t\t}\n\t\treturn $cached_forum_permissions_permissions[$gid][$fid];\n\t}\n\telse\n\t{\n\t\tif(empty($cached_forum_permissions[$gid]))\n\t\t{\n\t\t\tforeach($forum_cache as $forum)\n\t\t\t{\n\t\t\t\t$cached_forum_permissions[$gid][$forum['fid']] = fetch_forum_permissions($forum['fid'], $gid, $groupperms);\n\t\t\t}\n\t\t}\n\t\treturn $cached_forum_permissions[$gid];\n\t}\n}\n\n/**\n * Fetches the permissions for a specific forum/group applying the inheritance scheme.\n * Called by forum_permissions()\n *\n * @param int $fid The forum ID\n * @param string $gid A comma separated list of usergroups\n * @param array $groupperms Group permissions\n * @return array Permissions for this forum\n*/\nfunction fetch_forum_permissions($fid, $gid, $groupperms)\n{\n\tglobal $groupscache, $forum_cache, $fpermcache, $mybb, $fpermfields;\n\n\t$groups = explode(\",\", $gid);\n\n\tif(empty($fpermcache[$fid])) // This forum has no custom or inherited permissions so lets just return the group permissions\n\t{\n\t\treturn $groupperms;\n\t}\n\n\t$current_permissions = array();\n\t$only_view_own_threads = 1;\n\t$only_reply_own_threads = 1;\n\n\tforeach($groups as $gid)\n\t{\n\t\tif(!empty($groupscache[$gid]))\n\t\t{\n\t\t\t$level_permissions = $fpermcache[$fid][$gid];\n\n\t\t\t// If our permissions arn't inherited we need to figure them out\n\t\t\tif(empty($fpermcache[$fid][$gid]))\n\t\t\t{\n\t\t\t\t$parents = explode(',', $forum_cache[$fid]['parentlist']);\n\t\t\t\trsort($parents);\n\t\t\t\tif(!empty($parents))\n\t\t\t\t{\n\t\t\t\t\tforeach($parents as $parent_id)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!empty($fpermcache[$parent_id][$gid]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$level_permissions = $fpermcache[$parent_id][$gid];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we STILL don't have forum permissions we use the usergroup itself\n\t\t\tif(empty($level_permissions))\n\t\t\t{\n\t\t\t\t$level_permissions = $groupscache[$gid];\n\t\t\t}\n\n\t\t\tforeach($level_permissions as $permission => $access)\n\t\t\t{\n\t\t\t\tif(empty($current_permissions[$permission]) || $access >= $current_permissions[$permission] || ($access == \"yes\" && $current_permissions[$permission] == \"no\"))\n\t\t\t\t{\n\t\t\t\t\t$current_permissions[$permission] = $access;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($level_permissions[\"canview\"] && empty($level_permissions[\"canonlyviewownthreads\"]))\n\t\t\t{\n\t\t\t\t$only_view_own_threads = 0;\n\t\t\t}\n\n\t\t\tif($level_permissions[\"canpostreplys\"] && empty($level_permissions[\"canonlyreplyownthreads\"]))\n\t\t\t{\n\t\t\t\t$only_reply_own_threads = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Figure out if we can view more than our own threads\n\tif($only_view_own_threads == 0)\n\t{\n\t\t$current_permissions[\"canonlyviewownthreads\"] = 0;\n\t}\n\n\t// Figure out if we can reply more than our own threads\n\tif($only_reply_own_threads == 0)\n\t{\n\t\t$current_permissions[\"canonlyreplyownthreads\"] = 0;\n\t}\n\n\tif(count($current_permissions) == 0)\n\t{\n\t\t$current_permissions = $groupperms;\n\t}\n\treturn $current_permissions;\n}\n\n/**\n * Check the password given on a certain forum for validity\n *\n * @param int $fid The forum ID\n * @param int $pid The Parent ID\n * @param bool $return\n * @return bool\n */\nfunction check_forum_password($fid, $pid=0, $return=false)\n{\n\tglobal $mybb, $header, $footer, $headerinclude, $theme, $templates, $lang, $forum_cache;\n\n\t$showform = true;\n\n\tif(!is_array($forum_cache))\n\t{\n\t\t$forum_cache = cache_forums();\n\t\tif(!$forum_cache)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Loop through each of parent forums to ensure we have a password for them too\n\tif(isset($forum_cache[$fid]['parentlist']))\n\t{\n\t\t$parents = explode(',', $forum_cache[$fid]['parentlist']);\n\t\trsort($parents);\n\t}\n\tif(!empty($parents))\n\t{\n\t\tforeach($parents as $parent_id)\n\t\t{\n\t\t\tif($parent_id == $fid || $parent_id == $pid)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif($forum_cache[$parent_id]['password'] != \"\")\n\t\t\t{\n\t\t\t\tcheck_forum_password($parent_id, $fid);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!empty($forum_cache[$fid]['password']))\n\t{\n\t\t$password = $forum_cache[$fid]['password'];\n\t\tif(isset($mybb->input['pwverify']) && $pid == 0)\n\t\t{\n\t\t\tif($password === $mybb->get_input('pwverify'))\n\t\t\t{\n\t\t\t\tmy_setcookie(\"forumpass[$fid]\", md5($mybb->user['uid'].$mybb->get_input('pwverify')), null, true);\n\t\t\t\t$showform = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teval(\"\\$pwnote = \\\"\".$templates->get(\"forumdisplay_password_wrongpass\").\"\\\";\");\n\t\t\t\t$showform = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!$mybb->cookies['forumpass'][$fid] || ($mybb->cookies['forumpass'][$fid] && md5($mybb->user['uid'].$password) !== $mybb->cookies['forumpass'][$fid]))\n\t\t\t{\n\t\t\t\t$showform = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$showform = false;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t$showform = false;\n\t}\n\n\tif($return)\n\t{\n\t\treturn $showform;\n\t}\n\n\tif($showform)\n\t{\n\t\tif($pid)\n\t\t{\n\t\t\theader(\"Location: \".$mybb->settings['bburl'].\"/\".get_forum_link($fid));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$_SERVER['REQUEST_URI'] = htmlspecialchars_uni($_SERVER['REQUEST_URI']);\n\t\t\teval(\"\\$pwform = \\\"\".$templates->get(\"forumdisplay_password\").\"\\\";\");\n\t\t\toutput_page($pwform);\n\t\t}\n\t\texit;\n\t}\n}\n\n/**\n * Return the permissions for a moderator in a specific forum\n *\n * @param int $fid The forum ID\n * @param int $uid The user ID to fetch permissions for (0 assumes current logged in user)\n * @param string $parentslist The parent list for the forum (if blank, will be fetched)\n * @return array Array of moderator permissions for the specific forum\n */\nfunction get_moderator_permissions($fid, $uid=0, $parentslist=\"\")\n{\n\tglobal $mybb, $cache, $db;\n\tstatic $modpermscache;\n\n\tif($uid < 1)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif($uid == 0)\n\t{\n\t\treturn false;\n\t}\n\n\tif(isset($modpermscache[$fid][$uid]))\n\t{\n\t\treturn $modpermscache[$fid][$uid];\n\t}\n\n\tif(!$parentslist)\n\t{\n\t\t$parentslist = explode(',', get_parent_list($fid));\n\t}\n\n\t// Get user groups\n\t$perms = array();\n\t$user = get_user($uid);\n\n\t$groups = array($user['usergroup']);\n\n\tif(!empty($user['additionalgroups']))\n\t{\n\t\t$extra_groups = explode(\",\", $user['additionalgroups']);\n\n\t\tforeach($extra_groups as $extra_group)\n\t\t{\n\t\t\t$groups[] = $extra_group;\n\t\t}\n\t}\n\n\t$mod_cache = $cache->read(\"moderators\");\n\n\tforeach($mod_cache as $forumid => $forum)\n\t{\n\t\tif(!is_array($forum) || !in_array($forumid, $parentslist))\n\t\t{\n\t\t\t// No perms or we're not after this forum\n\t\t\tcontinue;\n\t\t}\n\n\t\t// User settings override usergroup settings\n\t\tif(is_array($forum['users'][$uid]))\n\t\t{\n\t\t\t$perm = $forum['users'][$uid];\n\t\t\tforeach($perm as $action => $value)\n\t\t\t{\n\t\t\t\tif(strpos($action, \"can\") === false)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Figure out the user permissions\n\t\t\t\tif($value == 0)\n\t\t\t\t{\n\t\t\t\t\t// The user doesn't have permission to set this action\n\t\t\t\t\t$perms[$action] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$perms[$action] = max($perm[$action], $perms[$action]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach($groups as $group)\n\t\t{\n\t\t\tif(!is_array($forum['usergroups'][$group]))\n\t\t\t{\n\t\t\t\t// There are no permissions set for this group\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$perm = $forum['usergroups'][$group];\n\t\t\tforeach($perm as $action => $value)\n\t\t\t{\n\t\t\t\tif(strpos($action, \"can\") === false)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$perms[$action] = max($perm[$action], $perms[$action]);\n\t\t\t}\n\t\t}\n\t}\n\n\t$modpermscache[$fid][$uid] = $perms;\n\n\treturn $perms;\n}\n\n/**\n * Checks if a moderator has permissions to perform an action in a specific forum\n *\n * @param int $fid The forum ID (0 assumes global)\n * @param string $action The action tyring to be performed. (blank assumes any action at all)\n * @param int $uid The user ID (0 assumes current user)\n * @return bool Returns true if the user has permission, false if they do not\n */\nfunction is_moderator($fid=0, $action=\"\", $uid=0)\n{\n\tglobal $mybb, $cache;\n\n\tif($uid == 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif($uid == 0)\n\t{\n\t\treturn false;\n\t}\n\n\t$user_perms = user_permissions($uid);\n\tif($user_perms['issupermod'] == 1)\n\t{\n\t\tif($fid)\n\t\t{\n\t\t\t$forumpermissions = forum_permissions($fid);\n\t\t\tif($forumpermissions['canview'] && $forumpermissions['canviewthreads'] && !$forumpermissions['canonlyviewownthreads'])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tif(!$fid)\n\t\t{\n\t\t\t$modcache = $cache->read('moderators');\n\t\t\tif(!empty($modcache))\n\t\t\t{\n\t\t\t\tforeach($modcache as $modusers)\n\t\t\t\t{\n\t\t\t\t\tif(isset($modusers['users'][$uid]) && $modusers['users'][$uid]['mid'] && (!$action || !empty($modusers['users'][$uid][$action])))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t$groups = explode(',', $user_perms['all_usergroups']);\n\n\t\t\t\t\tforeach($groups as $group)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(trim($group) != '' && isset($modusers['usergroups'][$group]) && (!$action || !empty($modusers['usergroups'][$group][$action])))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$modperms = get_moderator_permissions($fid, $uid);\n\n\t\t\tif(!$action && $modperms)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(isset($modperms[$action]) && $modperms[$action] == 1)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Generate a list of the posticons.\n *\n * @return string The template of posticons.\n */\nfunction get_post_icons()\n{\n\tglobal $mybb, $cache, $icon, $theme, $templates, $lang;\n\n\tif(isset($mybb->input['icon']))\n\t{\n\t\t$icon = $mybb->get_input('icon');\n\t}\n\n\t$iconlist = '';\n\t$no_icons_checked = \" checked=\\\"checked\\\"\";\n\t// read post icons from cache, and sort them accordingly\n\t$posticons_cache = $cache->read(\"posticons\");\n\t$posticons = array();\n\tforeach($posticons_cache as $posticon)\n\t{\n\t\t$posticons[$posticon['name']] = $posticon;\n\t}\n\tkrsort($posticons);\n\n\tforeach($posticons as $dbicon)\n\t{\n\t\t$dbicon['path'] = str_replace(\"{theme}\", $theme['imgdir'], $dbicon['path']);\n\t\t$dbicon['path'] = htmlspecialchars_uni($mybb->get_asset_url($dbicon['path']));\n\t\t$dbicon['name'] = htmlspecialchars_uni($dbicon['name']);\n\n\t\tif($icon == $dbicon['iid'])\n\t\t{\n\t\t\t$checked = \" checked=\\\"checked\\\"\";\n\t\t\t$no_icons_checked = '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$checked = '';\n\t\t}\n\n\t\teval(\"\\$iconlist .= \\\"\".$templates->get(\"posticons_icon\").\"\\\";\");\n\t}\n\n\tif(!empty($iconlist))\n\t{\n\t\teval(\"\\$posticons = \\\"\".$templates->get(\"posticons\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\t$posticons = '';\n\t}\n\n\treturn $posticons;\n}\n\n/**\n * MyBB setcookie() wrapper.\n *\n * @param string $name The cookie identifier.\n * @param string $value The cookie value.\n * @param int|string $expires The timestamp of the expiry date.\n * @param boolean $httponly True if setting a HttpOnly cookie (supported by the majority of web browsers)\n */\nfunction my_setcookie($name, $value=\"\", $expires=\"\", $httponly=false)\n{\n\tglobal $mybb;\n\n\tif(!$mybb->settings['cookiepath'])\n\t{\n\t\t$mybb->settings['cookiepath'] = \"/\";\n\t}\n\n\tif($expires == -1)\n\t{\n\t\t$expires = 0;\n\t}\n\telseif($expires == \"\" || $expires == null)\n\t{\n\t\t$expires = TIME_NOW + (60*60*24*365); // Make the cookie expire in a years time\n\t}\n\telse\n\t{\n\t\t$expires = TIME_NOW + (int)$expires;\n\t}\n\n\t$mybb->settings['cookiepath'] = str_replace(array(\"\\n\",\"\\r\"), \"\", $mybb->settings['cookiepath']);\n\t$mybb->settings['cookiedomain'] = str_replace(array(\"\\n\",\"\\r\"), \"\", $mybb->settings['cookiedomain']);\n\t$mybb->settings['cookieprefix'] = str_replace(array(\"\\n\",\"\\r\", \" \"), \"\", $mybb->settings['cookieprefix']);\n\n\t// Versions of PHP prior to 5.2 do not support HttpOnly cookies and IE is buggy when specifying a blank domain so set the cookie manually\n\t$cookie = \"Set-Cookie: {$mybb->settings['cookieprefix']}{$name}=\".urlencode($value);\n\n\tif($expires > 0)\n\t{\n\t\t$cookie .= \"; expires=\".@gmdate('D, d-M-Y H:i:s \\\\G\\\\M\\\\T', $expires);\n\t}\n\n\tif(!empty($mybb->settings['cookiepath']))\n\t{\n\t\t$cookie .= \"; path={$mybb->settings['cookiepath']}\";\n\t}\n\n\tif(!empty($mybb->settings['cookiedomain']))\n\t{\n\t\t$cookie .= \"; domain={$mybb->settings['cookiedomain']}\";\n\t}\n\n\tif($httponly == true)\n\t{\n\t\t$cookie .= \"; HttpOnly\";\n\t}\n\n\tif($mybb->settings['cookiesecureflag'])\n\t{\n\t\t$cookie .= \"; Secure\";\n\t}\n\n\t$mybb->cookies[$name] = $value;\n\n\theader($cookie, false);\n}\n\n/**\n * Unset a cookie set by MyBB.\n *\n * @param string $name The cookie identifier.\n */\nfunction my_unsetcookie($name)\n{\n\tglobal $mybb;\n\n\t$expires = -3600;\n\tmy_setcookie($name, \"\", $expires);\n\n\tunset($mybb->cookies[$name]);\n}\n\n/**\n * Get the contents from a serialised cookie array.\n *\n * @param string $name The cookie identifier.\n * @param int $id The cookie content id.\n * @return array|boolean The cookie id's content array or false when non-existent.\n */\nfunction my_get_array_cookie($name, $id)\n{\n\tglobal $mybb;\n\n\tif(!isset($mybb->cookies['mybb'][$name]))\n\t{\n\t\treturn false;\n\t}\n\n\t$cookie = my_unserialize($mybb->cookies['mybb'][$name]);\n\n\tif(is_array($cookie) && isset($cookie[$id]))\n\t{\n\t\treturn $cookie[$id];\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\n\n/**\n * Set a serialised cookie array.\n *\n * @param string $name The cookie identifier.\n * @param int $id The cookie content id.\n * @param string $value The value to set the cookie to.\n * @param int|string $expires The timestamp of the expiry date.\n */\nfunction my_set_array_cookie($name, $id, $value, $expires=\"\")\n{\n\tglobal $mybb;\n\n\t$cookie = $mybb->cookies['mybb'];\n\tif(isset($cookie[$name]))\n\t{\n\t\t$newcookie = my_unserialize($cookie[$name]);\n\t}\n\telse\n\t{\n\t\t$newcookie = array();\n\t}\n\n\t$newcookie[$id] = $value;\n\t$newcookie = my_serialize($newcookie);\n\tmy_setcookie(\"mybb[$name]\", addslashes($newcookie), $expires);\n\n\t// Make sure our current viarables are up-to-date as well\n\t$mybb->cookies['mybb'][$name] = $newcookie;\n}\n\n/*\n * Arbitrary limits for _safe_unserialize()\n */\ndefine('MAX_SERIALIZED_INPUT_LENGTH', 10240);\ndefine('MAX_SERIALIZED_ARRAY_LENGTH', 256);\ndefine('MAX_SERIALIZED_ARRAY_DEPTH', 5);\n\n/**\n * Credits go to https://github.com/piwik\n * Safe unserialize() replacement\n * - accepts a strict subset of PHP's native my_serialized representation\n * - does not unserialize objects\n *\n * @param string $str\n * @return mixed\n * @throw Exception if $str is malformed or contains unsupported types (e.g., resources, objects)\n */\nfunction _safe_unserialize($str)\n{\n\tif(strlen($str) > MAX_SERIALIZED_INPUT_LENGTH)\n\t{\n\t\t// input exceeds MAX_SERIALIZED_INPUT_LENGTH\n\t\treturn false;\n\t}\n\n\tif(empty($str) || !is_string($str))\n\t{\n\t\treturn false;\n\t}\n\n\t$stack = array();\n\t$expected = array();\n\n\t/*\n\t * states:\n\t *   0 - initial state, expecting a single value or array\n\t *   1 - terminal state\n\t *   2 - in array, expecting end of array or a key\n\t *   3 - in array, expecting value or another array\n\t */\n\t$state = 0;\n\twhile($state != 1)\n\t{\n\t\t$type = isset($str[0]) ? $str[0] : '';\n\n\t\tif($type == '}')\n\t\t{\n\t\t\t$str = substr($str, 1);\n\t\t}\n\t\telse if($type == 'N' && $str[1] == ';')\n\t\t{\n\t\t\t$value = null;\n\t\t\t$str = substr($str, 2);\n\t\t}\n\t\telse if($type == 'b' && preg_match('/^b:([01]);/', $str, $matches))\n\t\t{\n\t\t\t$value = $matches[1] == '1' ? true : false;\n\t\t\t$str = substr($str, 4);\n\t\t}\n\t\telse if($type == 'i' && preg_match('/^i:(-?[0-9]+);(.*)/s', $str, $matches))\n\t\t{\n\t\t\t$value = (int)$matches[1];\n\t\t\t$str = $matches[2];\n\t\t}\n\t\telse if($type == 'd' && preg_match('/^d:(-?[0-9]+\\.?[0-9]*(E[+-][0-9]+)?);(.*)/s', $str, $matches))\n\t\t{\n\t\t\t$value = (float)$matches[1];\n\t\t\t$str = $matches[3];\n\t\t}\n\t\telse if($type == 's' && preg_match('/^s:([0-9]+):\"(.*)/s', $str, $matches) && substr($matches[2], (int)$matches[1], 2) == '\";')\n\t\t{\n\t\t\t$value = substr($matches[2], 0, (int)$matches[1]);\n\t\t\t$str = substr($matches[2], (int)$matches[1] + 2);\n\t\t}\n\t\telse if($type == 'a' && preg_match('/^a:([0-9]+):{(.*)/s', $str, $matches) && $matches[1] < MAX_SERIALIZED_ARRAY_LENGTH)\n\t\t{\n\t\t\t$expectedLength = (int)$matches[1];\n\t\t\t$str = $matches[2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// object or unknown/malformed type\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch($state)\n\t\t{\n\t\t\tcase 3: // in array, expecting value or another array\n\t\t\t\tif($type == 'a')\n\t\t\t\t{\n\t\t\t\t\tif(count($stack) >= MAX_SERIALIZED_ARRAY_DEPTH)\n\t\t\t\t\t{\n\t\t\t\t\t\t// array nesting exceeds MAX_SERIALIZED_ARRAY_DEPTH\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$stack[] = &$list;\n\t\t\t\t\t$list[$key] = array();\n\t\t\t\t\t$list = &$list[$key];\n\t\t\t\t\t$expected[] = $expectedLength;\n\t\t\t\t\t$state = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif($type != '}')\n\t\t\t\t{\n\t\t\t\t\t$list[$key] = $value;\n\t\t\t\t\t$state = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// missing array value\n\t\t\t\treturn false;\n\n\t\t\tcase 2: // in array, expecting end of array or a key\n\t\t\t\tif($type == '}')\n\t\t\t\t{\n\t\t\t\t\tif(count($list) < end($expected))\n\t\t\t\t\t{\n\t\t\t\t\t\t// array size less than expected\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tunset($list);\n\t\t\t\t\t$list = &$stack[count($stack)-1];\n\t\t\t\t\tarray_pop($stack);\n\n\t\t\t\t\t// go to terminal state if we're at the end of the root array\n\t\t\t\t\tarray_pop($expected);\n\t\t\t\t\tif(count($expected) == 0) {\n\t\t\t\t\t\t$state = 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif($type == 'i' || $type == 's')\n\t\t\t\t{\n\t\t\t\t\tif(count($list) >= MAX_SERIALIZED_ARRAY_LENGTH)\n\t\t\t\t\t{\n\t\t\t\t\t\t// array size exceeds MAX_SERIALIZED_ARRAY_LENGTH\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif(count($list) >= end($expected))\n\t\t\t\t\t{\n\t\t\t\t\t\t// array size exceeds expected length\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$key = $value;\n\t\t\t\t\t$state = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// illegal array index type\n\t\t\t\treturn false;\n\n\t\t\tcase 0: // expecting array or value\n\t\t\t\tif($type == 'a')\n\t\t\t\t{\n\t\t\t\t\tif(count($stack) >= MAX_SERIALIZED_ARRAY_DEPTH)\n\t\t\t\t\t{\n\t\t\t\t\t\t// array nesting exceeds MAX_SERIALIZED_ARRAY_DEPTH\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data = array();\n\t\t\t\t\t$list = &$data;\n\t\t\t\t\t$expected[] = $expectedLength;\n\t\t\t\t\t$state = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif($type != '}')\n\t\t\t\t{\n\t\t\t\t\t$data = $value;\n\t\t\t\t\t$state = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// not in array\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\tif(!empty($str))\n\t{\n\t\t// trailing data in input\n\t\treturn false;\n\t}\n\treturn $data;\n}\n\n/**\n * Credits go to https://github.com/piwik\n * Wrapper for _safe_unserialize() that handles exceptions and multibyte encoding issue\n *\n * @param string $str\n * @return mixed\n */\nfunction my_unserialize($str)\n{\n\t// Ensure we use the byte count for strings even when strlen() is overloaded by mb_strlen()\n\tif(function_exists('mb_internal_encoding') && (((int)ini_get('mbstring.func_overload')) & 2))\n\t{\n\t\t$mbIntEnc = mb_internal_encoding();\n\t\tmb_internal_encoding('ASCII');\n\t}\n\n\t$out = _safe_unserialize($str);\n\n\tif(isset($mbIntEnc))\n\t{\n\t\tmb_internal_encoding($mbIntEnc);\n\t}\n\n\treturn $out;\n}\n\n/**\n * Credits go to https://github.com/piwik\n * Safe serialize() replacement\n * - output a strict subset of PHP's native serialized representation\n * - does not my_serialize objects\n *\n * @param mixed $value\n * @return string\n * @throw Exception if $value is malformed or contains unsupported types (e.g., resources, objects)\n */\nfunction _safe_serialize( $value )\n{\n\tif(is_null($value))\n\t{\n\t\treturn 'N;';\n\t}\n\n\tif(is_bool($value))\n\t{\n\t\treturn 'b:'.(int)$value.';';\n\t}\n\n\tif(is_int($value))\n\t{\n\t\treturn 'i:'.$value.';';\n\t}\n\n\tif(is_float($value))\n\t{\n\t\treturn 'd:'.str_replace(',', '.', $value).';';\n\t}\n\n\tif(is_string($value))\n\t{\n\t\treturn 's:'.strlen($value).':\"'.$value.'\";';\n\t}\n\n\tif(is_array($value))\n\t{\n\t\t$out = '';\n\t\tforeach($value as $k => $v)\n\t\t{\n\t\t\t$out .= _safe_serialize($k) . _safe_serialize($v);\n\t\t}\n\n\t\treturn 'a:'.count($value).':{'.$out.'}';\n\t}\n\n\t// safe_serialize cannot my_serialize resources or objects\n\treturn false;\n}\n\n/**\n * Credits go to https://github.com/piwik\n * Wrapper for _safe_serialize() that handles exceptions and multibyte encoding issue\n *\n * @param mixed $value\n * @return string\n*/\nfunction my_serialize($value)\n{\n\t// ensure we use the byte count for strings even when strlen() is overloaded by mb_strlen()\n\tif(function_exists('mb_internal_encoding') && (((int)ini_get('mbstring.func_overload')) & 2))\n\t{\n\t\t$mbIntEnc = mb_internal_encoding();\n\t\tmb_internal_encoding('ASCII');\n\t}\n\n\t$out = _safe_serialize($value);\n\tif(isset($mbIntEnc))\n\t{\n\t\tmb_internal_encoding($mbIntEnc);\n\t}\n\n\treturn $out;\n}\n\n/**\n * Returns the serverload of the system.\n *\n * @return int The serverload of the system.\n */\nfunction get_server_load()\n{\n\tglobal $mybb, $lang;\n\n\t$serverload = array();\n\n\t// DIRECTORY_SEPARATOR checks if running windows\n\tif(DIRECTORY_SEPARATOR != '\\\\')\n\t{\n\t\tif(function_exists(\"sys_getloadavg\"))\n\t\t{\n\t\t\t// sys_getloadavg() will return an array with [0] being load within the last minute.\n\t\t\t$serverload = sys_getloadavg();\n\t\t\t$serverload[0] = round($serverload[0], 4);\n\t\t}\n\t\telse if(@file_exists(\"/proc/loadavg\") && $load = @file_get_contents(\"/proc/loadavg\"))\n\t\t{\n\t\t\t$serverload = explode(\" \", $load);\n\t\t\t$serverload[0] = round($serverload[0], 4);\n\t\t}\n\t\tif(!is_numeric($serverload[0]))\n\t\t{\n\t\t\tif($mybb->safemode)\n\t\t\t{\n\t\t\t\treturn $lang->unknown;\n\t\t\t}\n\n\t\t\t// Suhosin likes to throw a warning if exec is disabled then die - weird\n\t\t\tif($func_blacklist = @ini_get('suhosin.executor.func.blacklist'))\n\t\t\t{\n\t\t\t\tif(strpos(\",\".$func_blacklist.\",\", 'exec') !== false)\n\t\t\t\t{\n\t\t\t\t\treturn $lang->unknown;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// PHP disabled functions?\n\t\t\tif($func_blacklist = @ini_get('disable_functions'))\n\t\t\t{\n\t\t\t\tif(strpos(\",\".$func_blacklist.\",\", 'exec') !== false)\n\t\t\t\t{\n\t\t\t\t\treturn $lang->unknown;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$load = @exec(\"uptime\");\n\t\t\t$load = explode(\"load average: \", $load);\n\t\t\t$serverload = explode(\",\", $load[1]);\n\t\t\tif(!is_array($serverload))\n\t\t\t{\n\t\t\t\treturn $lang->unknown;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $lang->unknown;\n\t}\n\n\t$returnload = trim($serverload[0]);\n\n\treturn $returnload;\n}\n\n/**\n * Returns the amount of memory allocated to the script.\n *\n * @return int The amount of memory allocated to the script.\n */\nfunction get_memory_usage()\n{\n\tif(function_exists('memory_get_peak_usage'))\n\t{\n\t\treturn memory_get_peak_usage(true);\n\t}\n\telseif(function_exists('memory_get_usage'))\n\t{\n\t\treturn memory_get_usage(true);\n\t}\n\treturn false;\n}\n\n/**\n * Updates the forum statistics with specific values (or addition/subtraction of the previous value)\n *\n * @param array $changes Array of items being updated (numthreads,numposts,numusers,numunapprovedthreads,numunapprovedposts,numdeletedposts,numdeletedthreads)\n * @param boolean $force Force stats update?\n */\nfunction update_stats($changes=array(), $force=false)\n{\n\tglobal $cache, $db;\n\tstatic $stats_changes;\n\n\tif(empty($stats_changes))\n\t{\n\t\t// Update stats after all changes are done\n\t\tadd_shutdown('update_stats', array(array(), true));\n\t}\n\n\tif(empty($stats_changes) || $stats_changes['inserted'])\n\t{\n\t\t$stats_changes = array(\n\t\t\t'numthreads' => '+0',\n\t\t\t'numposts' => '+0',\n\t\t\t'numusers' => '+0',\n\t\t\t'numunapprovedthreads' => '+0',\n\t\t\t'numunapprovedposts' => '+0',\n\t\t\t'numdeletedposts' => '+0',\n\t\t\t'numdeletedthreads' => '+0',\n\t\t\t'inserted' => false // Reset after changes are inserted into cache\n\t\t);\n\t\t$stats = $stats_changes;\n\t}\n\n\tif($force) // Force writing to cache?\n\t{\n\t\tif(!empty($changes))\n\t\t{\n\t\t\t// Calculate before writing to cache\n\t\t\tupdate_stats($changes);\n\t\t}\n\t\t$stats = $cache->read(\"stats\");\n\t\t$changes = $stats_changes;\n\t}\n\telse\n\t{\n\t\t$stats = $stats_changes;\n\t}\n\n\t$new_stats = array();\n\t$counters = array('numthreads', 'numunapprovedthreads', 'numposts', 'numunapprovedposts', 'numusers', 'numdeletedposts', 'numdeletedthreads');\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$new_stats[$counter] = $stats[$counter] + $changes[$counter];\n\t\t\t\t\tif(!$force && (substr($stats[$counter], 0, 1) == \"+\" || substr($stats[$counter], 0, 1) == \"-\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t// We had relative values? Then it is still relative\n\t\t\t\t\t\tif($new_stats[$counter] >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$new_stats[$counter] = \"+{$new_stats[$counter]}\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Less than 0? That's bad\n\t\t\t\t\telseif($new_stats[$counter] < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$new_stats[$counter] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$new_stats[$counter] = $changes[$counter];\n\t\t\t\t// Less than 0? That's bad\n\t\t\t\tif($new_stats[$counter] < 0)\n\t\t\t\t{\n\t\t\t\t\t$new_stats[$counter] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!$force)\n\t{\n\t\t$stats_changes = array_merge($stats, $new_stats); // Overwrite changed values\n\t\treturn;\n\t}\n\n\t// Fetch latest user if the user count is changing\n\tif(array_key_exists('numusers', $changes))\n\t{\n\t\t$query = $db->simple_select(\"users\", \"uid, username\", \"\", array('order_by' => 'regdate', 'order_dir' => 'DESC', 'limit' => 1));\n\t\t$lastmember = $db->fetch_array($query);\n\t\t$new_stats['lastuid'] = $lastmember['uid'];\n\t\t$new_stats['lastusername'] = $lastmember['username'] = htmlspecialchars_uni($lastmember['username']);\n\t}\n\n\tif(!empty($new_stats))\n\t{\n\t\tif(is_array($stats))\n\t\t{\n\t\t\t$stats = array_merge($stats, $new_stats); // Overwrite changed values\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$stats = $new_stats;\n\t\t}\n\t}\n\n\t// Update stats row for today in the database\n\t$todays_stats = array(\n\t\t\"dateline\" => mktime(0, 0, 0, date(\"m\"), date(\"j\"), date(\"Y\")),\n\t\t\"numusers\" => (int)$stats['numusers'],\n\t\t\"numthreads\" => (int)$stats['numthreads'],\n\t\t\"numposts\" => (int)$stats['numposts']\n\t);\n\t$db->replace_query(\"stats\", $todays_stats, \"dateline\");\n\n\t$cache->update(\"stats\", $stats, \"dateline\");\n\t$stats_changes['inserted'] = true;\n}\n\n/**\n * Updates the forum counters with a specific value (or addition/subtraction of the previous value)\n *\n * @param int $fid The forum ID\n * @param array $changes Array of items being updated (threads, posts, unapprovedthreads, unapprovedposts, deletedposts, deletedthreads) and their value (ex, 1, +1, -1)\n */\nfunction update_forum_counters($fid, $changes=array())\n{\n\tglobal $db;\n\n\t$update_query = array();\n\n\t$counters = array('threads', 'unapprovedthreads', 'posts', 'unapprovedposts', 'deletedposts', 'deletedthreads');\n\n\t// Fetch above counters for this forum\n\t$query = $db->simple_select(\"forums\", implode(\",\", $counters), \"fid='{$fid}'\");\n\t$forum = $db->fetch_array($query);\n\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$update_query[$counter] = $forum[$counter] + $changes[$counter];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$update_query[$counter] = $changes[$counter];\n\t\t\t}\n\n\t\t\t// Less than 0? That's bad\n\t\t\tif(isset($update_query[$counter]) && $update_query[$counter] < 0)\n\t\t\t{\n\t\t\t\t$update_query[$counter] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Only update if we're actually doing something\n\tif(count($update_query) > 0)\n\t{\n\t\t$db->update_query(\"forums\", $update_query, \"fid='\".(int)$fid.\"'\");\n\t}\n\n\t// Guess we should update the statistics too?\n\t$new_stats = array();\n\tif(array_key_exists('threads', $update_query))\n\t{\n\t\t$threads_diff = $update_query['threads'] - $forum['threads'];\n\t\tif($threads_diff > -1)\n\t\t{\n\t\t\t$new_stats['numthreads'] = \"+{$threads_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numthreads'] = \"{$threads_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('unapprovedthreads', $update_query))\n\t{\n\t\t$unapprovedthreads_diff = $update_query['unapprovedthreads'] - $forum['unapprovedthreads'];\n\t\tif($unapprovedthreads_diff > -1)\n\t\t{\n\t\t\t$new_stats['numunapprovedthreads'] = \"+{$unapprovedthreads_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numunapprovedthreads'] = \"{$unapprovedthreads_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('posts', $update_query))\n\t{\n\t\t$posts_diff = $update_query['posts'] - $forum['posts'];\n\t\tif($posts_diff > -1)\n\t\t{\n\t\t\t$new_stats['numposts'] = \"+{$posts_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numposts'] = \"{$posts_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('unapprovedposts', $update_query))\n\t{\n\t\t$unapprovedposts_diff = $update_query['unapprovedposts'] - $forum['unapprovedposts'];\n\t\tif($unapprovedposts_diff > -1)\n\t\t{\n\t\t\t$new_stats['numunapprovedposts'] = \"+{$unapprovedposts_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numunapprovedposts'] = \"{$unapprovedposts_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('deletedposts', $update_query))\n\t{\n\t\t$deletedposts_diff = $update_query['deletedposts'] - $forum['deletedposts'];\n\t\tif($deletedposts_diff > -1)\n\t\t{\n\t\t\t$new_stats['numdeletedposts'] = \"+{$deletedposts_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numdeletedposts'] = \"{$deletedposts_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('deletedthreads', $update_query))\n\t{\n\t\t$deletedthreads_diff = $update_query['deletedthreads'] - $forum['deletedthreads'];\n\t\tif($deletedthreads_diff > -1)\n\t\t{\n\t\t\t$new_stats['numdeletedthreads'] = \"+{$deletedthreads_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numdeletedthreads'] = \"{$deletedthreads_diff}\";\n\t\t}\n\t}\n\n\tif(!empty($new_stats))\n\t{\n\t\tupdate_stats($new_stats);\n\t}\n}\n\n/**\n * Update the last post information for a specific forum\n *\n * @param int $fid The forum ID\n */\nfunction update_forum_lastpost($fid)\n{\n\tglobal $db;\n\n\t// Fetch the last post for this forum\n\t$query = $db->query(\"\n\t\tSELECT tid, lastpost, lastposter, lastposteruid, subject\n\t\tFROM \".TABLE_PREFIX.\"threads\n\t\tWHERE fid='{$fid}' AND visible='1' AND closed NOT LIKE 'moved|%'\n\t\tORDER BY lastpost DESC\n\t\tLIMIT 0, 1\n\t\");\n\t$lastpost = $db->fetch_array($query);\n\n\t$updated_forum = array(\n\t\t\"lastpost\" => (int)$lastpost['lastpost'],\n\t\t\"lastposter\" => $db->escape_string($lastpost['lastposter']),\n\t\t\"lastposteruid\" => (int)$lastpost['lastposteruid'],\n\t\t\"lastposttid\" => (int)$lastpost['tid'],\n\t\t\"lastpostsubject\" => $db->escape_string($lastpost['subject'])\n\t);\n\n\t$db->update_query(\"forums\", $updated_forum, \"fid='{$fid}'\");\n}\n\n/**\n * Updates the thread counters with a specific value (or addition/subtraction of the previous value)\n *\n * @param int $tid The thread ID\n * @param array $changes Array of items being updated (replies, unapprovedposts, deletedposts, attachmentcount) and their value (ex, 1, +1, -1)\n */\nfunction update_thread_counters($tid, $changes=array())\n{\n\tglobal $db;\n\n\t$update_query = array();\n\t$tid = (int)$tid;\n\n\t$counters = array('replies', 'unapprovedposts', 'attachmentcount', 'deletedposts', 'attachmentcount');\n\n\t// Fetch above counters for this thread\n\t$query = $db->simple_select(\"threads\", implode(\",\", $counters), \"tid='{$tid}'\");\n\t$thread = $db->fetch_array($query);\n\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$update_query[$counter] = $thread[$counter] + $changes[$counter];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$update_query[$counter] = $changes[$counter];\n\t\t\t}\n\n\t\t\t// Less than 0? That's bad\n\t\t\tif(isset($update_query[$counter]) && $update_query[$counter] < 0)\n\t\t\t{\n\t\t\t\t$update_query[$counter] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t$db->free_result($query);\n\n\t// Only update if we're actually doing something\n\tif(count($update_query) > 0)\n\t{\n\t\t$db->update_query(\"threads\", $update_query, \"tid='{$tid}'\");\n\t}\n}\n\n/**\n * Update the first post and lastpost data for a specific thread\n *\n * @param int $tid The thread ID\n */\nfunction update_thread_data($tid)\n{\n\tglobal $db;\n\n\t$thread = get_thread($tid);\n\n\t// If this is a moved thread marker, don't update it - we need it to stay as it is\n\tif(strpos($thread['closed'], 'moved|') !== false)\n\t{\n\t\treturn;\n\t}\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid' AND p.visible='1'\n\t\tORDER BY p.dateline DESC\n\t\tLIMIT 1\"\n\t);\n\t$lastpost = $db->fetch_array($query);\n\n\t$db->free_result($query);\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.pid, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid'\n\t\tORDER BY p.dateline ASC\n\t\tLIMIT 1\n\t\");\n\t$firstpost = $db->fetch_array($query);\n\n\t$db->free_result($query);\n\n\tif(empty($firstpost['username']))\n\t{\n\t\t$firstpost['username'] = $firstpost['postusername'];\n\t}\n\n\tif(empty($lastpost['username']))\n\t{\n\t\t$lastpost['username'] = $lastpost['postusername'];\n\t}\n\n\tif(empty($lastpost['dateline']))\n\t{\n\t\t$lastpost['username'] = $firstpost['username'];\n\t\t$lastpost['uid'] = $firstpost['uid'];\n\t\t$lastpost['dateline'] = $firstpost['dateline'];\n\t}\n\n\t$lastpost['username'] = $db->escape_string($lastpost['username']);\n\t$firstpost['username'] = $db->escape_string($firstpost['username']);\n\n\t$update_array = array(\n\t\t'firstpost' => (int)$firstpost['pid'],\n\t\t'username' => $firstpost['username'],\n\t\t'uid' => (int)$firstpost['uid'],\n\t\t'dateline' => (int)$firstpost['dateline'],\n\t\t'lastpost' => (int)$lastpost['dateline'],\n\t\t'lastposter' => $lastpost['username'],\n\t\t'lastposteruid' => (int)$lastpost['uid'],\n\t);\n\t$db->update_query(\"threads\", $update_array, \"tid='{$tid}'\");\n}\n\n/**\n * Updates the user counters with a specific value (or addition/subtraction of the previous value)\n *\n * @param int $uid The user ID\n * @param array $changes Array of items being updated (postnum, threadnum) and their value (ex, 1, +1, -1)\n */\nfunction update_user_counters($uid, $changes=array())\n{\n\tglobal $db;\n\n\t$update_query = array();\n\n\t$counters = array('postnum', 'threadnum');\n\t$uid = (int)$uid;\n\n\t// Fetch above counters for this user\n\t$query = $db->simple_select(\"users\", implode(\",\", $counters), \"uid='{$uid}'\");\n\t$user = $db->fetch_array($query);\n\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$update_query[$counter] = $user[$counter] + $changes[$counter];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$update_query[$counter] = $changes[$counter];\n\t\t\t}\n\n\t\t\t// Less than 0? That's bad\n\t\t\tif(isset($update_query[$counter]) && $update_query[$counter] < 0)\n\t\t\t{\n\t\t\t\t$update_query[$counter] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t$db->free_result($query);\n\n\t// Only update if we're actually doing something\n\tif(count($update_query) > 0)\n\t{\n\t\t$db->update_query(\"users\", $update_query, \"uid='{$uid}'\");\n\t}\n}\n\n/**\n * Deletes a thread from the database\n *\n * @param int $tid The thread ID\n * @return bool\n */\nfunction delete_thread($tid)\n{\n\tglobal $moderation;\n\n\tif(!is_object($moderation))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_moderation.php\";\n\t\t$moderation = new Moderation;\n\t}\n\n\treturn $moderation->delete_thread($tid);\n}\n\n/**\n * Deletes a post from the database\n *\n * @param int $pid The thread ID\n * @return bool\n */\nfunction delete_post($pid)\n{\n\tglobal $moderation;\n\n\tif(!is_object($moderation))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_moderation.php\";\n\t\t$moderation = new Moderation;\n\t}\n\n\treturn $moderation->delete_post($pid);\n}\n\n/**\n * Builds a forum jump menu\n *\n * @param int $pid The parent forum to start with\n * @param int $selitem The selected item ID\n * @param int $addselect If we need to add select boxes to this cal or not\n * @param string $depth The current depth of forums we're at\n * @param int $showextras Whether or not to show extra items such as User CP, Forum home\n * @param boolean $showall Ignore the showinjump setting and show all forums (for moderation pages)\n * @param mixed $permissions deprecated\n * @param string $name The name of the forum jump\n * @return string Forum jump items\n */\nfunction build_forum_jump($pid=0, $selitem=0, $addselect=1, $depth=\"\", $showextras=1, $showall=false, $permissions=\"\", $name=\"fid\")\n{\n\tglobal $forum_cache, $jumpfcache, $permissioncache, $mybb, $forumjump, $forumjumpbits, $gobutton, $theme, $templates, $lang;\n\n\t$pid = (int)$pid;\n\n\tif(!is_array($jumpfcache))\n\t{\n\t\tif(!is_array($forum_cache))\n\t\t{\n\t\t\tcache_forums();\n\t\t}\n\n\t\tforeach($forum_cache as $fid => $forum)\n\t\t{\n\t\t\tif($forum['active'] != 0)\n\t\t\t{\n\t\t\t\t$jumpfcache[$forum['pid']][$forum['disporder']][$forum['fid']] = $forum;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!is_array($permissioncache))\n\t{\n\t\t$permissioncache = forum_permissions();\n\t}\n\n\tif(isset($jumpfcache[$pid]) && is_array($jumpfcache[$pid]))\n\t{\n\t\tforeach($jumpfcache[$pid] as $main)\n\t\t{\n\t\t\tforeach($main as $forum)\n\t\t\t{\n\t\t\t\t$perms = $permissioncache[$forum['fid']];\n\n\t\t\t\tif($forum['fid'] != \"0\" && ($perms['canview'] != 0 || $mybb->settings['hideprivateforums'] == 0) && $forum['linkto'] == '' && ($forum['showinjump'] != 0 || $showall == true))\n\t\t\t\t{\n\t\t\t\t\t$optionselected = \"\";\n\n\t\t\t\t\tif($selitem == $forum['fid'])\n\t\t\t\t\t{\n\t\t\t\t\t\t$optionselected = 'selected=\"selected\"';\n\t\t\t\t\t}\n\n\t\t\t\t\t$forum['name'] = htmlspecialchars_uni(strip_tags($forum['name']));\n\n\t\t\t\t\teval(\"\\$forumjumpbits .= \\\"\".$templates->get(\"forumjump_bit\").\"\\\";\");\n\n\t\t\t\t\tif($forum_cache[$forum['fid']])\n\t\t\t\t\t{\n\t\t\t\t\t\t$newdepth = $depth.\"--\";\n\t\t\t\t\t\t$forumjumpbits .= build_forum_jump($forum['fid'], $selitem, 0, $newdepth, $showextras, $showall);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif($addselect)\n\t{\n\t\tif($showextras == 0)\n\t\t{\n\t\t\t$template = \"special\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$template = \"advanced\";\n\n\t\t\tif(strpos(FORUM_URL, '.html') !== false)\n\t\t\t{\n\t\t\t\t$forum_link = \"'\".str_replace('{fid}', \"'+option+'\", FORUM_URL).\"'\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$forum_link = \"'\".str_replace('{fid}', \"'+option\", FORUM_URL);\n\t\t\t}\n\t\t}\n\n\t\teval(\"\\$forumjump = \\\"\".$templates->get(\"forumjump_\".$template).\"\\\";\");\n\t}\n\n\treturn $forumjump;\n}\n\n/**\n * Returns the extension of a file.\n *\n * @param string $file The filename.\n * @return string The extension of the file.\n */\nfunction get_extension($file)\n{\n\treturn my_strtolower(my_substr(strrchr($file, \".\"), 1));\n}\n\n/**\n * Generates a random string.\n *\n * @param int $length The length of the string to generate.\n * @param bool $complex Whether to return complex string. Defaults to false\n * @return string The random string.\n */\nfunction random_str($length=8, $complex=false)\n{\n\t$set = array_merge(range(0, 9), range('A', 'Z'), range('a', 'z'));\n\t$str = array();\n\n\t// Complex strings have always at least 3 characters, even if $length < 3\n\tif($complex == true)\n\t{\n\t\t// At least one number\n\t\t$str[] = $set[my_rand(0, 9)];\n\n\t\t// At least one big letter\n\t\t$str[] = $set[my_rand(10, 35)];\n\n\t\t// At least one small letter\n\t\t$str[] = $set[my_rand(36, 61)];\n\n\t\t$length -= 3;\n\t}\n\n\tfor($i = 0; $i < $length; ++$i)\n\t{\n\t\t$str[] = $set[my_rand(0, 61)];\n\t}\n\n\t// Make sure they're in random order and convert them to a string\n\tshuffle($str);\n\n\treturn implode($str);\n}\n\n/**\n * Formats a username based on their display group\n *\n * @param string $username The username\n * @param int $usergroup The usergroup for the user\n * @param int $displaygroup The display group for the user\n * @return string The formatted username\n */\nfunction format_name($username, $usergroup, $displaygroup=0)\n{\n\tglobal $groupscache, $cache;\n\n\tif(!is_array($groupscache))\n\t{\n\t\t$groupscache = $cache->read(\"usergroups\");\n\t}\n\n\tif($displaygroup != 0)\n\t{\n\t\t$usergroup = $displaygroup;\n\t}\n\n\t$ugroup = $groupscache[$usergroup];\n\t$format = $ugroup['namestyle'];\n\t$userin = substr_count($format, \"{username}\");\n\n\tif($userin == 0)\n\t{\n\t\t$format = \"{username}\";\n\t}\n\n\t$format = stripslashes($format);\n\n\treturn str_replace(\"{username}\", $username, $format);\n}\n\n/**\n * Formats an avatar to a certain dimension\n *\n * @param string $avatar The avatar file name\n * @param string $dimensions Dimensions of the avatar, width x height (e.g. 44|44)\n * @param string $max_dimensions The maximum dimensions of the formatted avatar\n * @return array Information for the formatted avatar\n */\nfunction format_avatar($avatar, $dimensions = '', $max_dimensions = '')\n{\n\tglobal $mybb, $theme;\n\tstatic $avatars;\n\n\tif(!isset($avatars))\n\t{\n\t\t$avatars = array();\n\t}\n\n\tif(my_strpos($avatar, '://') !== false && !$mybb->settings['allowremoteavatars'])\n\t{\n\t\t// Remote avatar, but remote avatars are disallowed.\n\t\t$avatar = null;\n\t}\n\n\tif(!$avatar)\n\t{\n\t\t// Default avatar\n\t\tif(defined('IN_ADMINCP'))\n\t\t{\n\t\t\t$theme['imgdir'] = '../images';\n\t\t}\n\n\t\t$avatar = str_replace('{theme}', $theme['imgdir'], $mybb->settings['useravatar']);\n\t\t$dimensions = $mybb->settings['useravatardims'];\n\t}\n\n\tif(!$max_dimensions)\n\t{\n\t\t$max_dimensions = $mybb->settings['maxavatardims'];\n\t}\n\n\t// An empty key wouldn't work so we need to add a fall back\n\t$key = $dimensions;\n\tif(empty($key))\n\t{\n\t\t$key = 'default';\n\t}\n\t$key2 = $max_dimensions;\n\tif(empty($key2))\n\t{\n\t\t$key2 = 'default';\n\t}\n\n\tif(isset($avatars[$avatar][$key][$key2]))\n\t{\n\t\treturn $avatars[$avatar][$key][$key2];\n\t}\n\n\t$avatar_width_height = '';\n\n\tif($dimensions)\n\t{\n\t\t$dimensions = explode(\"|\", $dimensions);\n\n\t\tif($dimensions[0] && $dimensions[1])\n\t\t{\n\t\t\tlist($max_width, $max_height) = explode('x', $max_dimensions);\n\n\t\t\tif(!empty($max_dimensions) && ($dimensions[0] > $max_width || $dimensions[1] > $max_height))\n\t\t\t{\n\t\t\t\trequire_once MYBB_ROOT.\"inc/functions_image.php\";\n\t\t\t\t$scaled_dimensions = scale_image($dimensions[0], $dimensions[1], $max_width, $max_height);\n\t\t\t\t$avatar_width_height = \"width=\\\"{$scaled_dimensions['width']}\\\" height=\\\"{$scaled_dimensions['height']}\\\"\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$avatar_width_height = \"width=\\\"{$dimensions[0]}\\\" height=\\\"{$dimensions[1]}\\\"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t$avatars[$avatar][$key][$key2] = array(\n\t\t'image' => htmlspecialchars_uni($mybb->get_asset_url($avatar)),\n\t\t'width_height' => $avatar_width_height\n\t);\n\n\treturn $avatars[$avatar][$key][$key2];\n}\n\n/**\n * Build the javascript based MyCode inserter.\n *\n * @param string $bind The ID of the textarea to bind to. Defaults to \"message\".\n * @param bool $smilies Whether to include smilies. Defaults to true.\n *\n * @return string The MyCode inserter\n */\nfunction build_mycode_inserter($bind=\"message\", $smilies = true)\n{\n\tglobal $db, $mybb, $theme, $templates, $lang, $plugins, $smiliecache, $cache;\n\n\tif($mybb->settings['bbcodeinserter'] != 0)\n\t{\n\t\t$editor_lang_strings = array(\n\t\t\t\"editor_bold\" => \"Bold\",\n\t\t\t\"editor_italic\" => \"Italic\",\n\t\t\t\"editor_underline\" => \"Underline\",\n\t\t\t\"editor_strikethrough\" => \"Strikethrough\",\n\t\t\t\"editor_subscript\" => \"Subscript\",\n\t\t\t\"editor_superscript\" => \"Superscript\",\n\t\t\t\"editor_alignleft\" => \"Align left\",\n\t\t\t\"editor_center\" => \"Center\",\n\t\t\t\"editor_alignright\" => \"Align right\",\n\t\t\t\"editor_justify\" => \"Justify\",\n\t\t\t\"editor_fontname\" => \"Font Name\",\n\t\t\t\"editor_fontsize\" => \"Font Size\",\n\t\t\t\"editor_fontcolor\" => \"Font Color\",\n\t\t\t\"editor_removeformatting\" => \"Remove Formatting\",\n\t\t\t\"editor_cut\" => \"Cut\",\n\t\t\t\"editor_cutnosupport\" => \"Your browser does not allow the cut command. Please use the keyboard shortcut Ctrl/Cmd-X\",\n\t\t\t\"editor_copy\" => \"Copy\",\n\t\t\t\"editor_copynosupport\" => \"Your browser does not allow the copy command. Please use the keyboard shortcut Ctrl/Cmd-C\",\n\t\t\t\"editor_paste\" => \"Paste\",\n\t\t\t\"editor_pastenosupport\" => \"Your browser does not allow the paste command. Please use the keyboard shortcut Ctrl/Cmd-V\",\n\t\t\t\"editor_pasteentertext\" => \"Paste your text inside the following box:\",\n\t\t\t\"editor_pastetext\" => \"PasteText\",\n\t\t\t\"editor_numlist\" => \"Numbered list\",\n\t\t\t\"editor_bullist\" => \"Bullet list\",\n\t\t\t\"editor_undo\" => \"Undo\",\n\t\t\t\"editor_redo\" => \"Redo\",\n\t\t\t\"editor_rows\" => \"Rows:\",\n\t\t\t\"editor_cols\" => \"Cols:\",\n\t\t\t\"editor_inserttable\" => \"Insert a table\",\n\t\t\t\"editor_inserthr\" => \"Insert a horizontal rule\",\n\t\t\t\"editor_code\" => \"Code\",\n\t\t\t\"editor_width\" => \"Width (optional):\",\n\t\t\t\"editor_height\" => \"Height (optional):\",\n\t\t\t\"editor_insertimg\" => \"Insert an image\",\n\t\t\t\"editor_email\" => \"E-mail:\",\n\t\t\t\"editor_insertemail\" => \"Insert an email\",\n\t\t\t\"editor_url\" => \"URL:\",\n\t\t\t\"editor_insertlink\" => \"Insert a link\",\n\t\t\t\"editor_unlink\" => \"Unlink\",\n\t\t\t\"editor_more\" => \"More\",\n\t\t\t\"editor_insertemoticon\" => \"Insert an emoticon\",\n\t\t\t\"editor_videourl\" => \"Video URL:\",\n\t\t\t\"editor_videotype\" => \"Video Type:\",\n\t\t\t\"editor_insert\" => \"Insert\",\n\t\t\t\"editor_insertyoutubevideo\" => \"Insert a YouTube video\",\n\t\t\t\"editor_currentdate\" => \"Insert current date\",\n\t\t\t\"editor_currenttime\" => \"Insert current time\",\n\t\t\t\"editor_print\" => \"Print\",\n\t\t\t\"editor_viewsource\" => \"View source\",\n\t\t\t\"editor_description\" => \"Description (optional):\",\n\t\t\t\"editor_enterimgurl\" => \"Enter the image URL:\",\n\t\t\t\"editor_enteremail\" => \"Enter the e-mail address:\",\n\t\t\t\"editor_enterdisplayedtext\" => \"Enter the displayed text:\",\n\t\t\t\"editor_enterurl\" => \"Enter URL:\",\n\t\t\t\"editor_enteryoutubeurl\" => \"Enter the YouTube video URL or ID:\",\n\t\t\t\"editor_insertquote\" => \"Insert a Quote\",\n\t\t\t\"editor_invalidyoutube\" => \"Invalid YouTube video\",\n\t\t\t\"editor_dailymotion\" => \"Dailymotion\",\n\t\t\t\"editor_metacafe\" => \"MetaCafe\",\n\t\t\t\"editor_veoh\" => \"Veoh\",\n\t\t\t\"editor_vimeo\" => \"Vimeo\",\n\t\t\t\"editor_youtube\" => \"Youtube\",\n\t\t\t\"editor_facebook\" => \"Facebook\",\n\t\t\t\"editor_liveleak\" => \"LiveLeak\",\n\t\t\t\"editor_insertvideo\" => \"Insert a video\",\n\t\t\t\"editor_php\" => \"PHP\",\n\t\t\t\"editor_maximize\" => \"Maximize\"\n\t\t);\n\t\t$editor_language = \"(function ($) {\\n$.sceditor.locale[\\\"mybblang\\\"] = {\\n\";\n\n\t\t$editor_lang_strings = $plugins->run_hooks(\"mycode_add_codebuttons\", $editor_lang_strings);\n\n\t\t$editor_languages_count = count($editor_lang_strings);\n\t\t$i = 0;\n\t\tforeach($editor_lang_strings as $lang_string => $key)\n\t\t{\n\t\t\t$i++;\n\t\t\t$js_lang_string = str_replace(\"\\\"\", \"\\\\\\\"\", $key);\n\t\t\t$string = str_replace(\"\\\"\", \"\\\\\\\"\", $lang->$lang_string);\n\t\t\t$editor_language .= \"\\t\\\"{$js_lang_string}\\\": \\\"{$string}\\\"\";\n\n\t\t\tif($i < $editor_languages_count)\n\t\t\t{\n\t\t\t\t$editor_language .= \",\";\n\t\t\t}\n\n\t\t\t$editor_language .= \"\\n\";\n\t\t}\n\n\t\t$editor_language .= \"}})(jQuery);\";\n\n\t\tif(defined(\"IN_ADMINCP\"))\n\t\t{\n\t\t\tglobal $page;\n\t\t\t$codeinsert = $page->build_codebuttons_editor($bind, $editor_language, $smilies);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Smilies\n\t\t\t$emoticon = \"\";\n\t\t\t$emoticons_enabled = \"false\";\n\t\t\tif($smilies)\n\t\t\t{\n\t\t\t\tif(!$smiliecache)\n\t\t\t\t{\n\t\t\t\t\tif(!isset($smilie_cache) || !is_array($smilie_cache))\n\t\t\t\t\t{\n\t\t\t\t\t\t$smilie_cache = $cache->read(\"smilies\");\n\t\t\t\t\t}\n\t\t\t\t\tforeach($smilie_cache as $smilie)\n\t\t\t\t\t{\n\t\t\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t\t\t$smiliecache[$smilie['sid']] = $smilie;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif($mybb->settings['smilieinserter'] && $mybb->settings['smilieinsertercols'] && $mybb->settings['smilieinsertertot'] && !empty($smiliecache))\n\t\t\t\t{\n\t\t\t\t\t$emoticon = \",emoticon\";\n\t\t\t\t}\n\t\t\t\t$emoticons_enabled = \"true\";\n\n\t\t\t\tunset($smilie);\n\n\t\t\t\tif(is_array($smiliecache))\n\t\t\t\t{\n\t\t\t\t\treset($smiliecache);\n\n\t\t\t\t\t$dropdownsmilies = $moresmilies = $hiddensmilies = \"\";\n\t\t\t\t\t$i = 0;\n\n\t\t\t\t\tforeach($smiliecache as $smilie)\n\t\t\t\t\t{\n\t\t\t\t\t\t$finds = explode(\"\\n\", $smilie['find']);\n\t\t\t\t\t\t$finds_count = count($finds);\n\n\t\t\t\t\t\t// Only show the first text to replace in the box\n\t\t\t\t\t\t$smilie['find'] = $finds[0];\n\n\t\t\t\t\t\t$find = str_replace(array('\\\\', '\"'), array('\\\\\\\\', '\\\"'), htmlspecialchars_uni($smilie['find']));\n\t\t\t\t\t\t$image = htmlspecialchars_uni($mybb->get_asset_url($smilie['image']));\n\t\t\t\t\t\t$image = str_replace(array('\\\\', '\"'), array('\\\\\\\\', '\\\"'), $image);\n\n\t\t\t\t\t\tif(!$mybb->settings['smilieinserter'] || !$mybb->settings['smilieinsertercols'] || !$mybb->settings['smilieinsertertot'] || !$smilie['showclickable'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$hiddensmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif($i < $mybb->settings['smilieinsertertot'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$dropdownsmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t\t++$i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$moresmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor($j = 1; $j < $finds_count; ++$j)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$find = str_replace(array('\\\\', '\"'), array('\\\\\\\\', '\\\"'), htmlspecialchars_uni($finds[$j]));\n\t\t\t\t\t\t\t$hiddensmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$basic1 = $basic2 = $align = $font = $size = $color = $removeformat = $email = $link = $list = $code = $sourcemode = \"\";\n\n\t\t\tif($mybb->settings['allowbasicmycode'] == 1)\n\t\t\t{\n\t\t\t\t$basic1 = \"bold,italic,underline,strike|\";\n\t\t\t\t$basic2 = \"horizontalrule,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowalignmycode'] == 1)\n\t\t\t{\n\t\t\t\t$align = \"left,center,right,justify|\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowfontmycode'] == 1)\n\t\t\t{\n\t\t\t\t$font = \"font,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowsizemycode'] == 1)\n\t\t\t{\n\t\t\t\t$size = \"size,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowcolormycode'] == 1)\n\t\t\t{\n\t\t\t\t$color = \"color,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowfontmycode'] == 1 || $mybb->settings['allowsizemycode'] == 1 || $mybb->settings['allowcolormycode'] == 1)\n\t\t\t{\n\t\t\t\t$removeformat = \"removeformat|\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowemailmycode'] == 1)\n\t\t\t{\n\t\t\t\t$email = \"email,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowlinkmycode'] == 1)\n\t\t\t{\n\t\t\t\t$link = \"link,unlink\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowlistmycode'] == 1)\n\t\t\t{\n\t\t\t\t$list = \"bulletlist,orderedlist|\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowcodemycode'] == 1)\n\t\t\t{\n\t\t\t\t$code = \"code,php,\";\n\t\t\t}\n\n\t\t\tif($mybb->user['sourceeditor'] == 1)\n\t\t\t{\n\t\t\t\t$sourcemode = \"MyBBEditor.sourceMode(true);\";\n\t\t\t}\n\n\t\t\teval(\"\\$codeinsert = \\\"\".$templates->get(\"codebuttons\").\"\\\";\");\n\t\t}\n\t}\n\n\treturn $codeinsert;\n}\n\n/**\n * Build the javascript clickable smilie inserter\n *\n * @return string The clickable smilies list\n */\nfunction build_clickable_smilies()\n{\n\tglobal $cache, $smiliecache, $theme, $templates, $lang, $mybb, $smiliecount;\n\n\tif($mybb->settings['smilieinserter'] != 0 && $mybb->settings['smilieinsertercols'] && $mybb->settings['smilieinsertertot'])\n\t{\n\t\tif(!$smiliecount)\n\t\t{\n\t\t\t$smilie_cache = $cache->read(\"smilies\");\n\t\t\t$smiliecount = count($smilie_cache);\n\t\t}\n\n\t\tif(!$smiliecache)\n\t\t{\n\t\t\tif(!is_array($smilie_cache))\n\t\t\t{\n\t\t\t\t$smilie_cache = $cache->read(\"smilies\");\n\t\t\t}\n\t\t\tforeach($smilie_cache as $smilie)\n\t\t\t{\n\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t$smiliecache[$smilie['sid']] = $smilie;\n\t\t\t}\n\t\t}\n\n\t\tunset($smilie);\n\n\t\tif(is_array($smiliecache))\n\t\t{\n\t\t\treset($smiliecache);\n\n\t\t\t$getmore = '';\n\t\t\tif($mybb->settings['smilieinsertertot'] >= $smiliecount)\n\t\t\t{\n\t\t\t\t$mybb->settings['smilieinsertertot'] = $smiliecount;\n\t\t\t}\n\t\t\telse if($mybb->settings['smilieinsertertot'] < $smiliecount)\n\t\t\t{\n\t\t\t\t$smiliecount = $mybb->settings['smilieinsertertot'];\n\t\t\t\teval(\"\\$getmore = \\\"\".$templates->get(\"smilieinsert_getmore\").\"\\\";\");\n\t\t\t}\n\n\t\t\t$smilies = '';\n\t\t\t$counter = 0;\n\t\t\t$i = 0;\n\n\t\t\t$extra_class = '';\n\t\t\tforeach($smiliecache as $smilie)\n\t\t\t{\n\t\t\t\tif($i < $mybb->settings['smilieinsertertot'] && $smilie['showclickable'] != 0)\n\t\t\t\t{\n\t\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t\t$smilie['image'] = htmlspecialchars_uni($mybb->get_asset_url($smilie['image']));\n\t\t\t\t\t$smilie['name'] = htmlspecialchars_uni($smilie['name']);\n\n\t\t\t\t\t// Only show the first text to replace in the box\n\t\t\t\t\t$temp = explode(\"\\n\", $smilie['find']); // assign to temporary variable for php 5.3 compatibility\n\t\t\t\t\t$smilie['find'] = $temp[0];\n\n\t\t\t\t\t$find = str_replace(array('\\\\', \"'\"), array('\\\\\\\\', \"\\'\"), htmlspecialchars_uni($smilie['find']));\n\n\t\t\t\t\t$onclick = \" onclick=\\\"MyBBEditor.insertText(' $find ');\\\"\";\n\t\t\t\t\t$extra_class = ' smilie_pointer';\n\t\t\t\t\teval('$smilie = \"'.$templates->get('smilie', 1, 0).'\";');\n\t\t\t\t\teval(\"\\$smilie_icons .= \\\"\".$templates->get(\"smilieinsert_smilie\").\"\\\";\");\n\t\t\t\t\t++$i;\n\t\t\t\t\t++$counter;\n\n\t\t\t\t\tif($counter == $mybb->settings['smilieinsertercols'])\n\t\t\t\t\t{\n\t\t\t\t\t\t$counter = 0;\n\t\t\t\t\t\teval(\"\\$smilies .= \\\"\".$templates->get(\"smilieinsert_row\").\"\\\";\");\n\t\t\t\t\t\t$smilie_icons = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($counter != 0)\n\t\t\t{\n\t\t\t\t$colspan = $mybb->settings['smilieinsertercols'] - $counter;\n\t\t\t\teval(\"\\$smilies .= \\\"\".$templates->get(\"smilieinsert_row_empty\").\"\\\";\");\n\t\t\t}\n\n\t\t\teval(\"\\$clickablesmilies = \\\"\".$templates->get(\"smilieinsert\").\"\\\";\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$clickablesmilies = \"\";\n\t\t}\n\t}\n\telse\n\t{\n\t\t$clickablesmilies = \"\";\n\t}\n\n\treturn $clickablesmilies;\n}\n\n/**\n * Builds thread prefixes and returns a selected prefix (or all)\n *\n *  @param int $pid The prefix ID (0 to return all)\n *  @return array The thread prefix's values (or all thread prefixes)\n */\nfunction build_prefixes($pid=0)\n{\n\tglobal $cache;\n\tstatic $prefixes_cache;\n\n\tif(is_array($prefixes_cache))\n\t{\n\t\tif($pid > 0 && is_array($prefixes_cache[$pid]))\n\t\t{\n\t\t\treturn $prefixes_cache[$pid];\n\t\t}\n\n\t\treturn $prefixes_cache;\n\t}\n\n\t$prefix_cache = $cache->read(\"threadprefixes\");\n\n\tif(!is_array($prefix_cache))\n\t{\n\t\t// No cache\n\t\t$prefix_cache = $cache->read(\"threadprefixes\", true);\n\n\t\tif(!is_array($prefix_cache))\n\t\t{\n\t\t\treturn array();\n\t\t}\n\t}\n\n\t$prefixes_cache = array();\n\tforeach($prefix_cache as $prefix)\n\t{\n\t\t$prefixes_cache[$prefix['pid']] = $prefix;\n\t}\n\n\tif($pid != 0 && is_array($prefixes_cache[$pid]))\n\t{\n\t\treturn $prefixes_cache[$pid];\n\t}\n\telse if(!empty($prefixes_cache))\n\t{\n\t\treturn $prefixes_cache;\n\t}\n\n\treturn false;\n}\n\n/**\n * Build the thread prefix selection menu for the current user\n *\n *  @param int|string $fid The forum ID (integer ID or string all)\n *  @param int|string $selected_pid The selected prefix ID (integer ID or string any)\n *  @param int $multiple Allow multiple prefix selection\n *  @param int $previous_pid The previously selected prefix ID\n *  @return string The thread prefix selection menu\n */\nfunction build_prefix_select($fid, $selected_pid=0, $multiple=0, $previous_pid=0)\n{\n\tglobal $cache, $db, $lang, $mybb, $templates;\n\n\tif($fid != 'all')\n\t{\n\t\t$fid = (int)$fid;\n\t}\n\n\t$prefix_cache = build_prefixes(0);\n\tif(empty($prefix_cache))\n\t{\n\t\t// We've got no prefixes to show\n\t\treturn '';\n\t}\n\n\t// Go through each of our prefixes and decide which ones we can use\n\t$prefixes = array();\n\tforeach($prefix_cache as $prefix)\n\t{\n\t\tif($fid != \"all\" && $prefix['forums'] != \"-1\")\n\t\t{\n\t\t\t// Decide whether this prefix can be used in our forum\n\t\t\t$forums = explode(\",\", $prefix['forums']);\n\n\t\t\tif(!in_array($fid, $forums) && $prefix['pid'] != $previous_pid)\n\t\t\t{\n\t\t\t\t// This prefix is not in our forum list\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif(is_member($prefix['groups']) || $prefix['pid'] == $previous_pid)\n\t\t{\n\t\t\t// The current user can use this prefix\n\t\t\t$prefixes[$prefix['pid']] = $prefix;\n\t\t}\n\t}\n\n\tif(empty($prefixes))\n\t{\n\t\treturn '';\n\t}\n\n\t$prefixselect = $prefixselect_prefix = '';\n\n\tif($multiple == 1)\n\t{\n\t\t$any_selected = \"\";\n\t\tif($selected_pid == 'any')\n\t\t{\n\t\t\t$any_selected = \" selected=\\\"selected\\\"\";\n\t\t}\n\t}\n\n\t$default_selected = \"\";\n\tif(((int)$selected_pid == 0) && $selected_pid != 'any')\n\t{\n\t\t$default_selected = \" selected=\\\"selected\\\"\";\n\t}\n\n\tforeach($prefixes as $prefix)\n\t{\n\t\t$selected = \"\";\n\t\tif($prefix['pid'] == $selected_pid)\n\t\t{\n\t\t\t$selected = \" selected=\\\"selected\\\"\";\n\t\t}\n\n\t\t$prefix['prefix'] = htmlspecialchars_uni($prefix['prefix']);\n\t\teval(\"\\$prefixselect_prefix .= \\\"\".$templates->get(\"post_prefixselect_prefix\").\"\\\";\");\n\t}\n\n\tif($multiple != 0)\n\t{\n\t\teval(\"\\$prefixselect = \\\"\".$templates->get(\"post_prefixselect_multiple\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\teval(\"\\$prefixselect = \\\"\".$templates->get(\"post_prefixselect_single\").\"\\\";\");\n\t}\n\n\treturn $prefixselect;\n}\n\n/**\n * Build the thread prefix selection menu for a forum without group permission checks\n *\n *  @param int $fid The forum ID (integer ID)\n *  @param int $selected_pid The selected prefix ID (integer ID)\n *  @return string The thread prefix selection menu\n */\nfunction build_forum_prefix_select($fid, $selected_pid=0)\n{\n\tglobal $cache, $db, $lang, $mybb, $templates;\n\n\t$fid = (int)$fid;\n\n\t$prefix_cache = build_prefixes(0);\n\tif(empty($prefix_cache))\n\t{\n\t\t// We've got no prefixes to show\n\t\treturn '';\n\t}\n\n\t// Go through each of our prefixes and decide which ones we can use\n\t$prefixes = array();\n\tforeach($prefix_cache as $prefix)\n\t{\n\t\tif($prefix['forums'] != \"-1\")\n\t\t{\n\t\t\t// Decide whether this prefix can be used in our forum\n\t\t\t$forums = explode(\",\", $prefix['forums']);\n\n\t\t\tif(in_array($fid, $forums))\n\t\t\t{\n\t\t\t\t// This forum can use this prefix!\n\t\t\t\t$prefixes[$prefix['pid']] = $prefix;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// This prefix is for anybody to use...\n\t\t\t$prefixes[$prefix['pid']] = $prefix;\n\t\t}\n\t}\n\n\tif(empty($prefixes))\n\t{\n\t\treturn '';\n\t}\n\n\t$default_selected = array();\n\t$selected_pid = (int)$selected_pid;\n\n\tif($selected_pid == 0)\n\t{\n\t\t$default_selected['all'] = ' selected=\"selected\"';\n\t}\n\telse if($selected_pid == -1)\n\t{\n\t\t$default_selected['none'] = ' selected=\"selected\"';\n\t}\n\telse if($selected_pid == -2)\n\t{\n\t\t$default_selected['any'] = ' selected=\"selected\"';\n\t}\n\n\tforeach($prefixes as $prefix)\n\t{\n\t\t$selected = '';\n\t\tif($prefix['pid'] == $selected_pid)\n\t\t{\n\t\t\t$selected = ' selected=\"selected\"';\n\t\t}\n\n\t\t$prefix['prefix'] = htmlspecialchars_uni($prefix['prefix']);\n\t\teval('$prefixselect_prefix .= \"'.$templates->get(\"forumdisplay_threadlist_prefixes_prefix\").'\";');\n\t}\n\n\teval('$prefixselect = \"'.$templates->get(\"forumdisplay_threadlist_prefixes\").'\";');\n\treturn $prefixselect;\n}\n\n/**\n * Gzip encodes text to a specified level\n *\n * @param string $contents The string to encode\n * @param int $level The level (1-9) to encode at\n * @return string The encoded string\n */\nfunction gzip_encode($contents, $level=1)\n{\n\tif(function_exists(\"gzcompress\") && function_exists(\"crc32\") && !headers_sent() && !(ini_get('output_buffering') && my_strpos(' '.ini_get('output_handler'), 'ob_gzhandler')))\n\t{\n\t\t$httpaccept_encoding = '';\n\n\t\tif(isset($_SERVER['HTTP_ACCEPT_ENCODING']))\n\t\t{\n\t\t\t$httpaccept_encoding = $_SERVER['HTTP_ACCEPT_ENCODING'];\n\t\t}\n\n\t\tif(my_strpos(\" \".$httpaccept_encoding, \"x-gzip\"))\n\t\t{\n\t\t\t$encoding = \"x-gzip\";\n\t\t}\n\n\t\tif(my_strpos(\" \".$httpaccept_encoding, \"gzip\"))\n\t\t{\n\t\t\t$encoding = \"gzip\";\n\t\t}\n\n\t\tif(isset($encoding))\n\t\t{\n\t\t\theader(\"Content-Encoding: $encoding\");\n\n\t\t\tif(function_exists(\"gzencode\"))\n\t\t\t{\n\t\t\t\t$contents = gzencode($contents, $level);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$size = strlen($contents);\n\t\t\t\t$crc = crc32($contents);\n\t\t\t\t$gzdata = \"\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\xff\";\n\t\t\t\t$gzdata .= my_substr(gzcompress($contents, $level), 2, -4);\n\t\t\t\t$gzdata .= pack(\"V\", $crc);\n\t\t\t\t$gzdata .= pack(\"V\", $size);\n\t\t\t\t$contents = $gzdata;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $contents;\n}\n\n/**\n * Log the actions of a moderator.\n *\n * @param array $data The data of the moderator's action.\n * @param string $action The message to enter for the action the moderator performed.\n */\nfunction log_moderator_action($data, $action=\"\")\n{\n\tglobal $mybb, $db, $session;\n\n\t$fid = 0;\n\tif(isset($data['fid']))\n\t{\n\t\t$fid = (int)$data['fid'];\n\t\tunset($data['fid']);\n\t}\n\n\t$tid = 0;\n\tif(isset($data['tid']))\n\t{\n\t\t$tid = (int)$data['tid'];\n\t\tunset($data['tid']);\n\t}\n\n\t$pid = 0;\n\tif(isset($data['pid']))\n\t{\n\t\t$pid = (int)$data['pid'];\n\t\tunset($data['pid']);\n\t}\n\n\t// Any remaining extra data - we my_serialize and insert in to its own column\n\tif(is_array($data))\n\t{\n\t\t$data = my_serialize($data);\n\t}\n\n\t$sql_array = array(\n\t\t\"uid\" => (int)$mybb->user['uid'],\n\t\t\"dateline\" => TIME_NOW,\n\t\t\"fid\" => (int)$fid,\n\t\t\"tid\" => $tid,\n\t\t\"pid\" => $pid,\n\t\t\"action\" => $db->escape_string($action),\n\t\t\"data\" => $db->escape_string($data),\n\t\t\"ipaddress\" => $db->escape_binary($session->packedip)\n\t);\n\t$db->insert_query(\"moderatorlog\", $sql_array);\n}\n\n/**\n * Get the formatted reputation for a user.\n *\n * @param int $reputation The reputation value\n * @param int $uid The user ID (if not specified, the generated reputation will not be a link)\n * @return string The formatted repuation\n */\nfunction get_reputation($reputation, $uid=0)\n{\n\tglobal $theme, $templates;\n\n\t$display_reputation = $reputation_class = '';\n\tif($reputation < 0)\n\t{\n\t\t$reputation_class = \"reputation_negative\";\n\t}\n\telseif($reputation > 0)\n\t{\n\t\t$reputation_class = \"reputation_positive\";\n\t}\n\telse\n\t{\n\t\t$reputation_class = \"reputation_neutral\";\n\t}\n\n\t$reputation = my_number_format($reputation);\n\n\tif($uid != 0)\n\t{\n\t\teval(\"\\$display_reputation = \\\"\".$templates->get(\"postbit_reputation_formatted_link\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\teval(\"\\$display_reputation = \\\"\".$templates->get(\"postbit_reputation_formatted\").\"\\\";\");\n\t}\n\n\treturn $display_reputation;\n}\n\n/**\n * Fetch a color coded version of a warning level (based on it's percentage)\n *\n * @param int $level The warning level (percentage of 100)\n * @return string Formatted warning level\n */\nfunction get_colored_warning_level($level)\n{\n\tglobal $templates;\n\n\t$warning_class = '';\n\tif($level >= 80)\n\t{\n\t\t$warning_class = \"high_warning\";\n\t}\n\telse if($level >= 50)\n\t{\n\t\t$warning_class = \"moderate_warning\";\n\t}\n\telse if($level >= 25)\n\t{\n\t\t$warning_class = \"low_warning\";\n\t}\n\telse\n\t{\n\t\t$warning_class = \"normal_warning\";\n\t}\n\n\teval(\"\\$level = \\\"\".$templates->get(\"postbit_warninglevel_formatted\").\"\\\";\");\n\treturn $level;\n}\n\n/**\n * Fetch the IP address of the current user.\n *\n * @return string The IP address.\n */\nfunction get_ip()\n{\n\tglobal $mybb, $plugins;\n\n\t$ip = strtolower($_SERVER['REMOTE_ADDR']);\n\n\tif($mybb->settings['ip_forwarded_check'])\n\t{\n\t\t$addresses = array();\n\n\t\tif(isset($_SERVER['HTTP_X_FORWARDED_FOR']))\n\t\t{\n\t\t\t$addresses = explode(',', strtolower($_SERVER['HTTP_X_FORWARDED_FOR']));\n\t\t}\n\t\telseif(isset($_SERVER['HTTP_X_REAL_IP']))\n\t\t{\n\t\t\t$addresses = explode(',', strtolower($_SERVER['HTTP_X_REAL_IP']));\n\t\t}\n\n\t\tif(is_array($addresses))\n\t\t{\n\t\t\tforeach($addresses as $val)\n\t\t\t{\n\t\t\t\t$val = trim($val);\n\t\t\t\t// Validate IP address and exclude private addresses\n\t\t\t\tif(my_inet_ntop(my_inet_pton($val)) == $val && !preg_match(\"#^(10\\.|172\\.(1[6-9]|2[0-9]|3[0-1])\\.|192\\.168\\.|fe80:|fe[c-f][0-f]:|f[c-d][0-f]{2}:)#\", $val))\n\t\t\t\t{\n\t\t\t\t\t$ip = $val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!$ip)\n\t{\n\t\tif(isset($_SERVER['HTTP_CLIENT_IP']))\n\t\t{\n\t\t\t$ip = strtolower($_SERVER['HTTP_CLIENT_IP']);\n\t\t}\n\t}\n\n\tif($plugins)\n\t{\n\t\t$ip_array = array(\"ip\" => &$ip); // Used for backwards compatibility on this hook with the updated run_hooks() function.\n\t\t$plugins->run_hooks(\"get_ip\", $ip_array);\n\t}\n\n\treturn $ip;\n}\n\n/**\n * Fetch the friendly size (GB, MB, KB, B) for a specified file size.\n *\n * @param int $size The size in bytes\n * @return string The friendly file size\n */\nfunction get_friendly_size($size)\n{\n\tglobal $lang;\n\n\tif(!is_numeric($size))\n\t{\n\t\treturn $lang->na;\n\t}\n\n\t// Yottabyte (1024 Zettabytes)\n\tif($size >= 1208925819614629174706176)\n\t{\n\t\t$size = my_number_format(round(($size / 1208925819614629174706176), 2)).\" \".$lang->size_yb;\n\t}\n\t// Zetabyte (1024 Exabytes)\n\telseif($size >= 1180591620717411303424)\n\t{\n\t\t$size = my_number_format(round(($size / 1180591620717411303424), 2)).\" \".$lang->size_zb;\n\t}\n\t// Exabyte (1024 Petabytes)\n\telseif($size >= 1152921504606846976)\n\t{\n\t\t$size = my_number_format(round(($size / 1152921504606846976), 2)).\" \".$lang->size_eb;\n\t}\n\t// Petabyte (1024 Terabytes)\n\telseif($size >= 1125899906842624)\n\t{\n\t\t$size = my_number_format(round(($size / 1125899906842624), 2)).\" \".$lang->size_pb;\n\t}\n\t// Terabyte (1024 Gigabytes)\n\telseif($size >= 1099511627776)\n\t{\n\t\t$size = my_number_format(round(($size / 1099511627776), 2)).\" \".$lang->size_tb;\n\t}\n\t// Gigabyte (1024 Megabytes)\n\telseif($size >= 1073741824)\n\t{\n\t\t$size = my_number_format(round(($size / 1073741824), 2)).\" \".$lang->size_gb;\n\t}\n\t// Megabyte (1024 Kilobytes)\n\telseif($size >= 1048576)\n\t{\n\t\t$size = my_number_format(round(($size / 1048576), 2)).\" \".$lang->size_mb;\n\t}\n\t// Kilobyte (1024 bytes)\n\telseif($size >= 1024)\n\t{\n\t\t$size = my_number_format(round(($size / 1024), 2)).\" \".$lang->size_kb;\n\t}\n\telseif($size == 0)\n\t{\n\t\t$size = \"0 \".$lang->size_bytes;\n\t}\n\telse\n\t{\n\t\t$size = my_number_format($size).\" \".$lang->size_bytes;\n\t}\n\n\treturn $size;\n}\n\n/**\n * Format a decimal number in to microseconds, milliseconds, or seconds.\n *\n * @param int $time The time in microseconds\n * @return string The friendly time duration\n */\nfunction format_time_duration($time)\n{\n\tglobal $lang;\n\n\tif(!is_numeric($time))\n\t{\n\t\treturn $lang->na;\n\t}\n\n\tif(round(1000000 * $time, 2) < 1000)\n\t{\n\t\t$time = number_format(round(1000000 * $time, 2)).\" \u03bcs\";\n\t}\n\telseif(round(1000000 * $time, 2) >= 1000 && round(1000000 * $time, 2) < 1000000)\n\t{\n\t\t$time = number_format(round((1000 * $time), 2)).\" ms\";\n\t}\n\telse\n\t{\n\t\t$time = round($time, 3).\" seconds\";\n\t}\n\n\treturn $time;\n}\n\n/**\n * Get the attachment icon for a specific file extension\n *\n * @param string $ext The file extension\n * @return string The attachment icon\n */\nfunction get_attachment_icon($ext)\n{\n\tglobal $cache, $attachtypes, $theme, $templates, $lang, $mybb;\n\n\tif(!$attachtypes)\n\t{\n\t\t$attachtypes = $cache->read(\"attachtypes\");\n\t}\n\n\t$ext = my_strtolower($ext);\n\n\tif($attachtypes[$ext]['icon'])\n\t{\n\t\tstatic $attach_icons_schemes = array();\n\t\tif(!isset($attach_icons_schemes[$ext]))\n\t\t{\n\t\t\t$attach_icons_schemes[$ext] = parse_url($attachtypes[$ext]['icon']);\n\t\t\tif(!empty($attach_icons_schemes[$ext]['scheme']))\n\t\t\t{\n\t\t\t\t$attach_icons_schemes[$ext] = $attachtypes[$ext]['icon'];\n\t\t\t}\n\t\t\telseif(defined(\"IN_ADMINCP\"))\n\t\t\t{\n\t\t\t\t$attach_icons_schemes[$ext] = str_replace(\"{theme}\", \"\", $attachtypes[$ext]['icon']);\n\t\t\t\tif(my_substr($attach_icons_schemes[$ext], 0, 1) != \"/\")\n\t\t\t\t{\n\t\t\t\t\t$attach_icons_schemes[$ext] = \"../\".$attach_icons_schemes[$ext];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif(defined(\"IN_PORTAL\"))\n\t\t\t{\n\t\t\t\tglobal $change_dir;\n\t\t\t\t$attach_icons_schemes[$ext] = $change_dir.\"/\".str_replace(\"{theme}\", $theme['imgdir'], $attachtypes[$ext]['icon']);\n\t\t\t\t$attach_icons_schemes[$ext] = $mybb->get_asset_url($attach_icons_schemes[$ext]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$attach_icons_schemes[$ext] = str_replace(\"{theme}\", $theme['imgdir'], $attachtypes[$ext]['icon']);\n\t\t\t\t$attach_icons_schemes[$ext] = $mybb->get_asset_url($attach_icons_schemes[$ext]);\n\t\t\t}\n\t\t}\n\n\t\t$icon = $attach_icons_schemes[$ext];\n\n\t\t$name = htmlspecialchars_uni($attachtypes[$ext]['name']);\n\t}\n\telse\n\t{\n\t\tif(defined(\"IN_ADMINCP\"))\n\t\t{\n\t\t\t$theme['imgdir'] = \"../images\";\n\t\t}\n\t\telse if(defined(\"IN_PORTAL\"))\n\t\t{\n\t\t\tglobal $change_dir;\n\t\t\t$theme['imgdir'] = \"{$change_dir}/images\";\n\t\t}\n\n\t\t$icon = \"{$theme['imgdir']}/attachtypes/unknown.png\";\n\n\t\t$name = $lang->unknown;\n\t}\n\n\t$icon = htmlspecialchars_uni($icon);\n\teval(\"\\$attachment_icon = \\\"\".$templates->get(\"attachment_icon\").\"\\\";\");\n\treturn $attachment_icon;\n}\n\n/**\n * Get a list of the unviewable forums for the current user\n *\n * @param boolean $only_readable_threads Set to true to only fetch those forums for which users can actually read a thread in.\n * @return string Comma separated values list of the forum IDs which the user cannot view\n */\nfunction get_unviewable_forums($only_readable_threads=false)\n{\n\tglobal $forum_cache, $permissioncache, $mybb;\n\n\tif(!is_array($forum_cache))\n\t{\n\t\tcache_forums();\n\t}\n\n\tif(!is_array($permissioncache))\n\t{\n\t\t$permissioncache = forum_permissions();\n\t}\n\n\t$password_forums = $unviewable = array();\n\tforeach($forum_cache as $fid => $forum)\n\t{\n\t\tif($permissioncache[$forum['fid']])\n\t\t{\n\t\t\t$perms = $permissioncache[$forum['fid']];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$perms = $mybb->usergroup;\n\t\t}\n\n\t\t$pwverified = 1;\n\n\t\tif($forum['password'] != \"\")\n\t\t{\n\t\t\tif($mybb->cookies['forumpass'][$forum['fid']] !== md5($mybb->user['uid'].$forum['password']))\n\t\t\t{\n\t\t\t\t$pwverified = 0;\n\t\t\t}\n\n\t\t\t$password_forums[$forum['fid']] = $forum['password'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Check parents for passwords\n\t\t\t$parents = explode(\",\", $forum['parentlist']);\n\t\t\tforeach($parents as $parent)\n\t\t\t{\n\t\t\t\tif(isset($password_forums[$parent]) && $mybb->cookies['forumpass'][$parent] !== md5($mybb->user['uid'].$password_forums[$parent]))\n\t\t\t\t{\n\t\t\t\t\t$pwverified = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif($perms['canview'] == 0 || $pwverified == 0 || ($only_readable_threads == true && $perms['canviewthreads'] == 0))\n\t\t{\n\t\t\t$unviewable[] = $forum['fid'];\n\t\t}\n\t}\n\n\t$unviewableforums = implode(',', $unviewable);\n\n\treturn $unviewableforums;\n}\n\n/**\n * Fixes mktime for dates earlier than 1970\n *\n * @param string $format The date format to use\n * @param int $year The year of the date\n * @return string The correct date format\n */\nfunction fix_mktime($format, $year)\n{\n\t// Our little work around for the date < 1970 thing.\n\t// -2 idea provided by Matt Light (http://www.mephex.com)\n\t$format = str_replace(\"Y\", $year, $format);\n\t$format = str_replace(\"y\", my_substr($year, -2), $format);\n\n\treturn $format;\n}\n\n/**\n * Build the breadcrumb navigation trail from the specified items\n *\n * @return string The formatted breadcrumb navigation trail\n */\nfunction build_breadcrumb()\n{\n\tglobal $nav, $navbits, $templates, $theme, $lang, $mybb;\n\n\teval(\"\\$navsep = \\\"\".$templates->get(\"nav_sep\").\"\\\";\");\n\n\t$i = 0;\n\t$activesep = '';\n\n\tif(is_array($navbits))\n\t{\n\t\treset($navbits);\n\t\tforeach($navbits as $key => $navbit)\n\t\t{\n\t\t\tif(isset($navbits[$key+1]))\n\t\t\t{\n\t\t\t\tif(isset($navbits[$key+2]))\n\t\t\t\t{\n\t\t\t\t\t$sep = $navsep;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sep = \"\";\n\t\t\t\t}\n\n\t\t\t\t$multipage = null;\n\t\t\t\t$multipage_dropdown = null;\n\t\t\t\tif(!empty($navbit['multipage']))\n\t\t\t\t{\n\t\t\t\t\tif(!$mybb->settings['threadsperpage'] || (int)$mybb->settings['threadsperpage'] < 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$mybb->settings['threadsperpage'] = 20;\n\t\t\t\t\t}\n\n\t\t\t\t\t$multipage = multipage($navbit['multipage']['num_threads'], $mybb->settings['threadsperpage'], $navbit['multipage']['current_page'], $navbit['multipage']['url'], true);\n\t\t\t\t\tif($multipage)\n\t\t\t\t\t{\n\t\t\t\t\t\t++$i;\n\t\t\t\t\t\teval(\"\\$multipage_dropdown = \\\"\".$templates->get(\"nav_dropdown\").\"\\\";\");\n\t\t\t\t\t\t$sep = $multipage_dropdown.$sep;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Replace page 1 URLs\n\t\t\t\t$navbit['url'] = str_replace(\"-page-1.html\", \".html\", $navbit['url']);\n\t\t\t\t$navbit['url'] = preg_replace(\"/&amp;page=1$/\", \"\", $navbit['url']);\n\n\t\t\t\teval(\"\\$nav .= \\\"\".$templates->get(\"nav_bit\").\"\\\";\");\n\t\t\t}\n\t\t}\n\t}\n\n\t$activesep = '';\n\t$navsize = count($navbits);\n\t$navbit = $navbits[$navsize-1];\n\n\tif($nav)\n\t{\n\t\teval(\"\\$activesep = \\\"\".$templates->get(\"nav_sep_active\").\"\\\";\");\n\t}\n\n\teval(\"\\$activebit = \\\"\".$templates->get(\"nav_bit_active\").\"\\\";\");\n\teval(\"\\$donenav = \\\"\".$templates->get(\"nav\").\"\\\";\");\n\n\treturn $donenav;\n}\n\n/**\n * Add a breadcrumb menu item to the list.\n *\n * @param string $name The name of the item to add\n * @param string $url The URL of the item to add\n */\nfunction add_breadcrumb($name, $url=\"\")\n{\n\tglobal $navbits;\n\n\t$navsize = count($navbits);\n\t$navbits[$navsize]['name'] = $name;\n\t$navbits[$navsize]['url'] = $url;\n}\n\n/**\n * Build the forum breadcrumb nagiation (the navigation to a specific forum including all parent forums)\n *\n * @param int $fid The forum ID to build the navigation for\n * @param array $multipage The multipage drop down array of information\n * @return int Returns 1 in every case. Kept for compatibility\n */\nfunction build_forum_breadcrumb($fid, $multipage=array())\n{\n\tglobal $pforumcache, $currentitem, $forum_cache, $navbits, $lang, $base_url, $archiveurl;\n\n\tif(!$pforumcache)\n\t{\n\t\tif(!is_array($forum_cache))\n\t\t{\n\t\t\tcache_forums();\n\t\t}\n\n\t\tforeach($forum_cache as $key => $val)\n\t\t{\n\t\t\t$pforumcache[$val['fid']][$val['pid']] = $val;\n\t\t}\n\t}\n\n\tif(is_array($pforumcache[$fid]))\n\t{\n\t\tforeach($pforumcache[$fid] as $key => $forumnav)\n\t\t{\n\t\t\tif($fid == $forumnav['fid'])\n\t\t\t{\n\t\t\t\tif(!empty($pforumcache[$forumnav['pid']]))\n\t\t\t\t{\n\t\t\t\t\tbuild_forum_breadcrumb($forumnav['pid']);\n\t\t\t\t}\n\n\t\t\t\t$navsize = count($navbits);\n\t\t\t\t// Convert & to &amp;\n\t\t\t\t$navbits[$navsize]['name'] = preg_replace(\"#&(?!\\#[0-9]+;)#si\", \"&amp;\", $forumnav['name']);\n\n\t\t\t\tif(defined(\"IN_ARCHIVE\"))\n\t\t\t\t{\n\t\t\t\t\t// Set up link to forum in breadcrumb.\n\t\t\t\t\tif($pforumcache[$fid][$forumnav['pid']]['type'] == 'f' || $pforumcache[$fid][$forumnav['pid']]['type'] == 'c')\n\t\t\t\t\t{\n\t\t\t\t\t\t$navbits[$navsize]['url'] = \"{$base_url}forum-\".$forumnav['fid'].\".html\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$navbits[$navsize]['url'] = $archiveurl.\"/index.php\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif(!empty($multipage))\n\t\t\t\t{\n\t\t\t\t\t$navbits[$navsize]['url'] = get_forum_link($forumnav['fid'], $multipage['current_page']);\n\n\t\t\t\t\t$navbits[$navsize]['multipage'] = $multipage;\n\t\t\t\t\t$navbits[$navsize]['multipage']['url'] = str_replace('{fid}', $forumnav['fid'], FORUM_URL_PAGED);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$navbits[$navsize]['url'] = get_forum_link($forumnav['fid']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n/**\n * Resets the breadcrumb navigation to the first item, and clears the rest\n */\nfunction reset_breadcrumb()\n{\n\tglobal $navbits;\n\n\t$newnav[0]['name'] = $navbits[0]['name'];\n\t$newnav[0]['url'] = $navbits[0]['url'];\n\tif(!empty($navbits[0]['options']))\n\t{\n\t\t$newnav[0]['options'] = $navbits[0]['options'];\n\t}\n\n\tunset($GLOBALS['navbits']);\n\t$GLOBALS['navbits'] = $newnav;\n}\n\n/**\n * Builds a URL to an archive mode page\n *\n * @param string $type The type of page (thread|announcement|forum)\n * @param int $id The ID of the item\n * @return string The URL\n */\nfunction build_archive_link($type=\"\", $id=0)\n{\n\tglobal $mybb;\n\n\t// If the server OS is not Windows and not Apache or the PHP is running as a CGI or we have defined ARCHIVE_QUERY_STRINGS, use query strings - DIRECTORY_SEPARATOR checks if running windows\n\t//if((DIRECTORY_SEPARATOR == '\\\\' && is_numeric(stripos($_SERVER['SERVER_SOFTWARE'], \"apache\")) == false) || is_numeric(stripos(SAPI_NAME, \"cgi\")) !== false || defined(\"ARCHIVE_QUERY_STRINGS\"))\n\tif($mybb->settings['seourls_archive'] == 1)\n\t{\n\t\t$base_url = $mybb->settings['bburl'].\"/archive/index.php/\";\n\t}\n\telse\n\t{\n\t\t$base_url = $mybb->settings['bburl'].\"/archive/index.php?\";\n\t}\n\n\tswitch($type)\n\t{\n\t\tcase \"thread\":\n\t\t\t$url = \"{$base_url}thread-{$id}.html\";\n\t\t\tbreak;\n\t\tcase \"announcement\":\n\t\t\t$url = \"{$base_url}announcement-{$id}.html\";\n\t\t\tbreak;\n\t\tcase \"forum\":\n\t\t\t$url = \"{$base_url}forum-{$id}.html\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$url = $mybb->settings['bburl'].\"/archive/index.php\";\n\t}\n\n\treturn $url;\n}\n\n/**\n * Prints a debug information page\n */\nfunction debug_page()\n{\n\tglobal $db, $debug, $templates, $templatelist, $mybb, $maintimer, $globaltime, $ptimer, $parsetime, $lang, $cache;\n\n\t$totaltime = format_time_duration($maintimer->totaltime);\n\t$phptime = $maintimer->totaltime - $db->query_time;\n\t$query_time = $db->query_time;\n\t$globaltime = format_time_duration($globaltime);\n\n\t$percentphp = number_format((($phptime/$maintimer->totaltime)*100), 2);\n\t$percentsql = number_format((($query_time/$maintimer->totaltime)*100), 2);\n\n\t$phptime = format_time_duration($maintimer->totaltime - $db->query_time);\n\t$query_time = format_time_duration($db->query_time);\n\n\t$call_time = format_time_duration($cache->call_time);\n\n\t$phpversion = PHP_VERSION;\n\n\t$serverload = get_server_load();\n\n\tif($mybb->settings['gzipoutput'] != 0)\n\t{\n\t\t$gzipen = \"Enabled\";\n\t}\n\telse\n\t{\n\t\t$gzipen = \"Disabled\";\n\t}\n\n\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\";\n\techo \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\";\n\techo \"<head>\";\n\techo \"<meta name=\\\"robots\\\" content=\\\"noindex\\\" />\";\n\techo \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\";\n\techo \"<title>MyBB Debug Information</title>\";\n\techo \"</head>\";\n\techo \"<body>\";\n\techo \"<h1>MyBB Debug Information</h1>\\n\";\n\techo \"<h2>Page Generation</h2>\\n\";\n\techo \"<table bgcolor=\\\"#666666\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#cccccc\\\" colspan=\\\"4\\\"><b><span style=\\\"size:2;\\\">Page Generation Statistics</span></b></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Page Generation Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$totaltime</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">No. DB Queries:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$db->query_count</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">PHP Processing Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$phptime ($percentphp%)</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">DB Processing Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$query_time ($percentsql%)</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Extensions Used:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">{$mybb->config['database']['type']}, xml</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Global.php Processing Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$globaltime</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">PHP Version:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$phpversion</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Server Load:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$serverload</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">GZip Encoding Status:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$gzipen</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">No. Templates Used:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">\".count($templates->cache).\" (\".(int)count(explode(\",\", $templatelist)).\" Cached / \".(int)count($templates->uncached_templates).\" Manually Loaded)</span></td>\\n\";\n\techo \"</tr>\\n\";\n\n\t$memory_usage = get_memory_usage();\n\tif(!$memory_usage)\n\t{\n\t\t$memory_usage = $lang->unknown;\n\t}\n\telse\n\t{\n\t\t$memory_usage = get_friendly_size($memory_usage).\" ({$memory_usage} bytes)\";\n\t}\n\t$memory_limit = @ini_get(\"memory_limit\");\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#EFEFEF\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Memory Usage:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#FEFEFE\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">{$memory_usage}</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#EFEFEF\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Memory Limit:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#FEFEFE\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">{$memory_limit}</span></td>\\n\";\n\techo \"</tr>\\n\";\n\n\techo \"</table>\\n\";\n\n\techo \"<h2>Database Connections (\".count($db->connections).\" Total) </h2>\\n\";\n\techo \"<table style=\\\"background-color: #666;\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td style=\\\"background: #fff;\\\">\".implode(\"<br />\", $db->connections).\"</td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"</table>\\n\";\n\techo \"<br />\\n\";\n\n\techo \"<h2>Database Queries (\".$db->query_count.\" Total) </h2>\\n\";\n\techo $db->explain;\n\n\tif($cache->call_count > 0)\n\t{\n\t\techo \"<h2>Cache Calls (\".$cache->call_count.\" Total, \".$call_time.\") </h2>\\n\";\n\t\techo $cache->cache_debug;\n\t}\n\n\techo \"<h2>Template Statistics</h2>\\n\";\n\n\tif(count($templates->cache) > 0)\n\t{\n\t\techo \"<table style=\\\"background-color: #666;\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background-color: #ccc;\\\"><strong>Templates Used (Loaded for this Page) - \".count($templates->cache).\" Total</strong></td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background: #fff;\\\">\".implode(\", \", array_keys($templates->cache)).\"</td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"</table>\\n\";\n\t\techo \"<br />\\n\";\n\t}\n\n\tif(count($templates->uncached_templates) > 0)\n\t{\n\t\techo \"<table style=\\\"background-color: #666;\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background-color: #ccc;\\\"><strong>Templates Requiring Additional Calls (Not Cached at Startup) - \".count($templates->uncached_templates).\" Total</strong></td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background: #fff;\\\">\".implode(\", \", $templates->uncached_templates).\"</td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"</table>\\n\";\n\t\techo \"<br />\\n\";\n\t}\n\techo \"</body>\";\n\techo \"</html>\";\n\texit;\n}\n\n/**\n * Outputs the correct page headers.\n */\nfunction send_page_headers()\n{\n\tglobal $mybb;\n\n\tif($mybb->settings['nocacheheaders'] == 1)\n\t{\n\t\theader(\"Expires: Sat, 1 Jan 2000 01:00:00 GMT\");\n\t\theader(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\t\theader(\"Cache-Control: no-cache, must-revalidate\");\n\t\theader(\"Pragma: no-cache\");\n\t}\n}\n\n/**\n * Mark specific reported posts of a certain type as dealt with\n *\n * @param array|int $id An array or int of the ID numbers you're marking as dealt with\n * @param string $type The type of item the above IDs are for - post, posts, thread, threads, forum, all\n */\nfunction mark_reports($id, $type=\"post\")\n{\n\tglobal $db, $cache, $plugins;\n\n\tswitch($type)\n\t{\n\t\tcase \"posts\":\n\t\t\tif(is_array($id))\n\t\t\t{\n\t\t\t\t$rids = implode($id, \"','\");\n\t\t\t\t$rids = \"'0','$rids'\";\n\t\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id IN($rids) AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"post\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id='$id' AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t\tcase \"threads\":\n\t\t\tif(is_array($id))\n\t\t\t{\n\t\t\t\t$rids = implode($id, \"','\");\n\t\t\t\t$rids = \"'0','$rids'\";\n\t\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id2 IN($rids) AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"thread\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id2='$id' AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t\tcase \"forum\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id3='$id' AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t\tcase \"all\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t}\n\n\t$arguments = array('id' => $id, 'type' => $type);\n\t$plugins->run_hooks(\"mark_reports\", $arguments);\n\t$cache->update_reportedcontent();\n}\n\n/**\n * Fetch a friendly x days, y months etc date stamp from a timestamp\n *\n * @param int $stamp The timestamp\n * @param array $options Array of options\n * @return string The friendly formatted timestamp\n */\nfunction nice_time($stamp, $options=array())\n{\n\tglobal $lang;\n\n\t$ysecs = 365*24*60*60;\n\t$mosecs = 31*24*60*60;\n\t$wsecs = 7*24*60*60;\n\t$dsecs = 24*60*60;\n\t$hsecs = 60*60;\n\t$msecs = 60;\n\n\tif(isset($options['short']))\n\t{\n\t\t$lang_year = $lang->year_short;\n\t\t$lang_years = $lang->years_short;\n\t\t$lang_month = $lang->month_short;\n\t\t$lang_months = $lang->months_short;\n\t\t$lang_week = $lang->week_short;\n\t\t$lang_weeks = $lang->weeks_short;\n\t\t$lang_day = $lang->day_short;\n\t\t$lang_days = $lang->days_short;\n\t\t$lang_hour = $lang->hour_short;\n\t\t$lang_hours = $lang->hours_short;\n\t\t$lang_minute = $lang->minute_short;\n\t\t$lang_minutes = $lang->minutes_short;\n\t\t$lang_second = $lang->second_short;\n\t\t$lang_seconds = $lang->seconds_short;\n\t}\n\telse\n\t{\n\t\t$lang_year = \" \".$lang->year;\n\t\t$lang_years = \" \".$lang->years;\n\t\t$lang_month = \" \".$lang->month;\n\t\t$lang_months = \" \".$lang->months;\n\t\t$lang_week = \" \".$lang->week;\n\t\t$lang_weeks = \" \".$lang->weeks;\n\t\t$lang_day = \" \".$lang->day;\n\t\t$lang_days = \" \".$lang->days;\n\t\t$lang_hour = \" \".$lang->hour;\n\t\t$lang_hours = \" \".$lang->hours;\n\t\t$lang_minute = \" \".$lang->minute;\n\t\t$lang_minutes = \" \".$lang->minutes;\n\t\t$lang_second = \" \".$lang->second;\n\t\t$lang_seconds = \" \".$lang->seconds;\n\t}\n\n\t$years = floor($stamp/$ysecs);\n\t$stamp %= $ysecs;\n\t$months = floor($stamp/$mosecs);\n\t$stamp %= $mosecs;\n\t$weeks = floor($stamp/$wsecs);\n\t$stamp %= $wsecs;\n\t$days = floor($stamp/$dsecs);\n\t$stamp %= $dsecs;\n\t$hours = floor($stamp/$hsecs);\n\t$stamp %= $hsecs;\n\t$minutes = floor($stamp/$msecs);\n\t$stamp %= $msecs;\n\t$seconds = $stamp;\n\n\tif($years == 1)\n\t{\n\t\t$nicetime['years'] = \"1\".$lang_year;\n\t}\n\telse if($years > 1)\n\t{\n\t\t$nicetime['years'] = $years.$lang_years;\n\t}\n\n\tif($months == 1)\n\t{\n\t\t$nicetime['months'] = \"1\".$lang_month;\n\t}\n\telse if($months > 1)\n\t{\n\t\t$nicetime['months'] = $months.$lang_months;\n\t}\n\n\tif($weeks == 1)\n\t{\n\t\t$nicetime['weeks'] = \"1\".$lang_week;\n\t}\n\telse if($weeks > 1)\n\t{\n\t\t$nicetime['weeks'] = $weeks.$lang_weeks;\n\t}\n\n\tif($days == 1)\n\t{\n\t\t$nicetime['days'] = \"1\".$lang_day;\n\t}\n\telse if($days > 1)\n\t{\n\t\t$nicetime['days'] = $days.$lang_days;\n\t}\n\n\tif(!isset($options['hours']) || $options['hours'] !== false)\n\t{\n\t\tif($hours == 1)\n\t\t{\n\t\t\t$nicetime['hours'] = \"1\".$lang_hour;\n\t\t}\n\t\telse if($hours > 1)\n\t\t{\n\t\t\t$nicetime['hours'] = $hours.$lang_hours;\n\t\t}\n\t}\n\n\tif(!isset($options['minutes']) || $options['minutes'] !== false)\n\t{\n\t\tif($minutes == 1)\n\t\t{\n\t\t\t$nicetime['minutes'] = \"1\".$lang_minute;\n\t\t}\n\t\telse if($minutes > 1)\n\t\t{\n\t\t\t$nicetime['minutes'] = $minutes.$lang_minutes;\n\t\t}\n\t}\n\n\tif(!isset($options['seconds']) || $options['seconds'] !== false)\n\t{\n\t\tif($seconds == 1)\n\t\t{\n\t\t\t$nicetime['seconds'] = \"1\".$lang_second;\n\t\t}\n\t\telse if($seconds > 1)\n\t\t{\n\t\t\t$nicetime['seconds'] = $seconds.$lang_seconds;\n\t\t}\n\t}\n\n\tif(is_array($nicetime))\n\t{\n\t\treturn implode(\", \", $nicetime);\n\t}\n}\n\n/**\n * Select an alternating row colour based on the previous call to this function\n *\n * @param int $reset 1 to reset the row to trow1.\n * @return string trow1 or trow2 depending on the previous call\n */\nfunction alt_trow($reset=0)\n{\n\tglobal $alttrow;\n\n\tif($alttrow == \"trow1\" && !$reset)\n\t{\n\t\t$trow = \"trow2\";\n\t}\n\telse\n\t{\n\t\t$trow = \"trow1\";\n\t}\n\n\t$alttrow = $trow;\n\n\treturn $trow;\n}\n\n/**\n * Add a user to a specific additional user group.\n *\n * @param int $uid The user ID\n * @param int $joingroup The user group ID to join\n * @return bool\n */\nfunction join_usergroup($uid, $joingroup)\n{\n\tglobal $db, $mybb;\n\n\tif($uid == $mybb->user['uid'])\n\t{\n\t\t$user = $mybb->user;\n\t}\n\telse\n\t{\n\t\t$query = $db->simple_select(\"users\", \"additionalgroups, usergroup\", \"uid='\".(int)$uid.\"'\");\n\t\t$user = $db->fetch_array($query);\n\t}\n\n\t// Build the new list of additional groups for this user and make sure they're in the right format\n\t$usergroups = \"\";\n\t$usergroups = $user['additionalgroups'].\",\".$joingroup;\n\t$groupslist = \"\";\n\t$groups = explode(\",\", $usergroups);\n\n\tif(is_array($groups))\n\t{\n\t\t$comma = '';\n\t\tforeach($groups as $gid)\n\t\t{\n\t\t\tif(trim($gid) != \"\" && $gid != $user['usergroup'] && !isset($donegroup[$gid]))\n\t\t\t{\n\t\t\t\t$groupslist .= $comma.$gid;\n\t\t\t\t$comma = \",\";\n\t\t\t\t$donegroup[$gid] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// What's the point in updating if they're the same?\n\tif($groupslist != $user['additionalgroups'])\n\t{\n\t\t$db->update_query(\"users\", array('additionalgroups' => $groupslist), \"uid='\".(int)$uid.\"'\");\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Remove a user from a specific additional user group\n *\n * @param int $uid The user ID\n * @param int $leavegroup The user group ID\n */\nfunction leave_usergroup($uid, $leavegroup)\n{\n\tglobal $db, $mybb, $cache;\n\n\t$user = get_user($uid);\n\n\t$groupslist = $comma = '';\n\t$usergroups = $user['additionalgroups'].\",\";\n\t$donegroup = array();\n\n\t$groups = explode(\",\", $user['additionalgroups']);\n\n\tif(is_array($groups))\n\t{\n\t\tforeach($groups as $gid)\n\t\t{\n\t\t\tif(trim($gid) != \"\" && $leavegroup != $gid && empty($donegroup[$gid]))\n\t\t\t{\n\t\t\t\t$groupslist .= $comma.$gid;\n\t\t\t\t$comma = \",\";\n\t\t\t\t$donegroup[$gid] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t$dispupdate = \"\";\n\tif($leavegroup == $user['displaygroup'])\n\t{\n\t\t$dispupdate = \", displaygroup=usergroup\";\n\t}\n\n\t$db->write_query(\"\n\t\tUPDATE \".TABLE_PREFIX.\"users\n\t\tSET additionalgroups='$groupslist' $dispupdate\n\t\tWHERE uid='\".(int)$uid.\"'\n\t\");\n\n\t$cache->update_moderators();\n}\n\n/**\n * Get the current location taking in to account different web serves and systems\n *\n * @param boolean $fields True to return as \"hidden\" fields\n * @param array $ignore Array of fields to ignore if first argument is true\n * @param boolean $quick True to skip all inputs and return only the file path part of the URL\n * @return string The current URL being accessed\n */\nfunction get_current_location($fields=false, $ignore=array(), $quick=false)\n{\n\tif(defined(\"MYBB_LOCATION\"))\n\t{\n\t\treturn MYBB_LOCATION;\n\t}\n\n\tif(!empty($_SERVER['SCRIPT_NAME']))\n\t{\n\t\t$location = htmlspecialchars_uni($_SERVER['SCRIPT_NAME']);\n\t}\n\telseif(!empty($_SERVER['PHP_SELF']))\n\t{\n\t\t$location = htmlspecialchars_uni($_SERVER['PHP_SELF']);\n\t}\n\telseif(!empty($_ENV['PHP_SELF']))\n\t{\n\t\t$location = htmlspecialchars_uni($_ENV['PHP_SELF']);\n\t}\n\telseif(!empty($_SERVER['PATH_INFO']))\n\t{\n\t\t$location = htmlspecialchars_uni($_SERVER['PATH_INFO']);\n\t}\n\telse\n\t{\n\t\t$location = htmlspecialchars_uni($_ENV['PATH_INFO']);\n\t}\n\n\tif($quick)\n\t{\n\t\treturn $location;\n\t}\n\n\tif($fields == true)\n\t{\n\t\tglobal $mybb;\n\n\t\tif(!is_array($ignore))\n\t\t{\n\t\t\t$ignore = array($ignore);\n\t\t}\n\n\t\t$form_html = '';\n\t\tif(!empty($mybb->input))\n\t\t{\n\t\t\tforeach($mybb->input as $name => $value)\n\t\t\t{\n\t\t\t\tif(in_array($name, $ignore) || is_array($name) || is_array($value))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$form_html .= \"<input type=\\\"hidden\\\" name=\\\"\".htmlspecialchars_uni($name).\"\\\" value=\\\"\".htmlspecialchars_uni($value).\"\\\" />\\n\";\n\t\t\t}\n\t\t}\n\n\t\treturn array('location' => $location, 'form_html' => $form_html, 'form_method' => $mybb->request_method);\n\t}\n\telse\n\t{\n\t\tif(isset($_SERVER['QUERY_STRING']))\n\t\t{\n\t\t\t$location .= \"?\".htmlspecialchars_uni($_SERVER['QUERY_STRING']);\n\t\t}\n\t\telse if(isset($_ENV['QUERY_STRING']))\n\t\t{\n\t\t\t$location .= \"?\".htmlspecialchars_uni($_ENV['QUERY_STRING']);\n\t\t}\n\n\t\tif((isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == \"POST\") || (isset($_ENV['REQUEST_METHOD']) && $_ENV['REQUEST_METHOD'] == \"POST\"))\n\t\t{\n\t\t\t$post_array = array('action', 'fid', 'pid', 'tid', 'uid', 'eid');\n\n\t\t\tforeach($post_array as $var)\n\t\t\t{\n\t\t\t\tif(isset($_POST[$var]))\n\t\t\t\t{\n\t\t\t\t\t$addloc[] = urlencode($var).'='.urlencode($_POST[$var]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(isset($addloc) && is_array($addloc))\n\t\t\t{\n\t\t\t\tif(strpos($location, \"?\") === false)\n\t\t\t\t{\n\t\t\t\t\t$location .= \"?\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$location .= \"&amp;\";\n\t\t\t\t}\n\t\t\t\t$location .= implode(\"&amp;\", $addloc);\n\t\t\t}\n\t\t}\n\n\t\treturn $location;\n\t}\n}\n\n/**\n * Build a theme selection menu\n *\n * @param string $name The name of the menu\n * @param int $selected The ID of the selected theme\n * @param int $tid The ID of the parent theme to select from\n * @param string $depth The current selection depth\n * @param boolean $usergroup_override Whether or not to override usergroup permissions (true to override)\n * @param boolean $footer Whether or not theme select is in the footer (true if it is)\n * @param boolean $count_override Whether or not to override output based on theme count (true to override)\n * @return string The theme selection list\n */\nfunction build_theme_select($name, $selected=-1, $tid=0, $depth=\"\", $usergroup_override=false, $footer=false, $count_override=false)\n{\n\tglobal $db, $themeselect, $tcache, $lang, $mybb, $limit, $templates, $num_themes, $themeselect_option;\n\n\tif($tid == 0)\n\t{\n\t\t$tid = 1;\n\t\t$num_themes = 0;\n\t\t$themeselect_option = '';\n\n\t\tif(!isset($lang->use_default))\n\t\t{\n\t\t\t$lang->use_default = $lang->lang_select_default;\n\t\t}\n\t}\n\n\tif(!is_array($tcache))\n\t{\n\t\t$query = $db->simple_select('themes', 'tid, name, pid, allowedgroups', \"pid!='0'\");\n\n\t\twhile($theme = $db->fetch_array($query))\n\t\t{\n\t\t\t$tcache[$theme['pid']][$theme['tid']] = $theme;\n\t\t}\n\t}\n\n\tif(is_array($tcache[$tid]))\n\t{\n\t\tforeach($tcache[$tid] as $theme)\n\t\t{\n\t\t\t$sel = \"\";\n\t\t\t// Show theme if allowed, or if override is on\n\t\t\tif(is_member($theme['allowedgroups']) || $theme['allowedgroups'] == \"all\" || $usergroup_override == true)\n\t\t\t{\n\t\t\t\tif($theme['tid'] == $selected)\n\t\t\t\t{\n\t\t\t\t\t$sel = \" selected=\\\"selected\\\"\";\n\t\t\t\t}\n\n\t\t\t\tif($theme['pid'] != 0)\n\t\t\t\t{\n\t\t\t\t\t$theme['name'] = htmlspecialchars_uni($theme['name']);\n\t\t\t\t\teval(\"\\$themeselect_option .= \\\"\".$templates->get(\"usercp_themeselector_option\").\"\\\";\");\n\t\t\t\t\t++$num_themes;\n\t\t\t\t\t$depthit = $depth.\"--\";\n\t\t\t\t}\n\n\t\t\t\tif(array_key_exists($theme['tid'], $tcache))\n\t\t\t\t{\n\t\t\t\t\tbuild_theme_select($name, $selected, $theme['tid'], $depthit, $usergroup_override, $footer, $count_override);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif($tid == 1 && ($num_themes > 1 || $count_override == true))\n\t{\n\t\tif($footer == true)\n\t\t{\n\t\t\teval(\"\\$themeselect = \\\"\".$templates->get(\"footer_themeselector\").\"\\\";\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\teval(\"\\$themeselect = \\\"\".$templates->get(\"usercp_themeselector\").\"\\\";\");\n\t\t}\n\n\t\treturn $themeselect;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Get the theme data of a theme id.\n *\n * @param int $tid The theme id of the theme.\n * @return boolean|array False if no valid theme, Array with the theme data otherwise\n */\nfunction get_theme($tid)\n{\n\tglobal $tcache, $db;\n\n\tif(!is_array($tcache))\n\t{\n\t\t$query = $db->simple_select('themes', 'tid, name, pid, allowedgroups', \"pid!='0'\");\n\n\t\twhile($theme = $db->fetch_array($query))\n\t\t{\n\t\t\t$tcache[$theme['pid']][$theme['tid']] = $theme;\n\t\t}\n\t}\n\n\t$s_theme = false;\n\n\tforeach($tcache as $themes)\n\t{\n\t\tforeach($themes as $theme)\n\t\t{\n\t\t\tif($tid == $theme['tid'])\n\t\t\t{\n\t\t\t\t$s_theme = $theme;\n\t\t\t\tbreak 2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $s_theme;\n}\n\n/**\n * Custom function for htmlspecialchars which takes in to account unicode\n *\n * @param string $message The string to format\n * @return string The string with htmlspecialchars applied\n */\nfunction htmlspecialchars_uni($message)\n{\n\t$message = preg_replace(\"#&(?!\\#[0-9]+;)#si\", \"&amp;\", $message); // Fix & but allow unicode\n\t$message = str_replace(\"<\", \"&lt;\", $message);\n\t$message = str_replace(\">\", \"&gt;\", $message);\n\t$message = str_replace(\"\\\"\", \"&quot;\", $message);\n\treturn $message;\n}\n\n/**\n * Custom function for formatting numbers.\n *\n * @param int $number The number to format.\n * @return int The formatted number.\n */\nfunction my_number_format($number)\n{\n\tglobal $mybb;\n\n\tif($number == \"-\")\n\t{\n\t\treturn $number;\n\t}\n\n\tif(is_int($number))\n\t{\n\t\treturn number_format($number, 0, $mybb->settings['decpoint'], $mybb->settings['thousandssep']);\n\t}\n\telse\n\t{\n\t\t$parts = explode('.', $number);\n\n\t\tif(isset($parts[1]))\n\t\t{\n\t\t\t$decimals = my_strlen($parts[1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$decimals = 0;\n\t\t}\n\n\t\treturn number_format((double)$number, $decimals, $mybb->settings['decpoint'], $mybb->settings['thousandssep']);\n\t}\n}\n\n/**\n * Converts a string of text to or from UTF-8.\n *\n * @param string $str The string of text to convert\n * @param boolean $to Whether or not the string is being converted to or from UTF-8 (true if converting to)\n * @return string The converted string\n */\nfunction convert_through_utf8($str, $to=true)\n{\n\tglobal $lang;\n\tstatic $charset;\n\tstatic $use_mb;\n\tstatic $use_iconv;\n\n\tif(!isset($charset))\n\t{\n\t\t$charset = my_strtolower($lang->settings['charset']);\n\t}\n\n\tif($charset == \"utf-8\")\n\t{\n\t\treturn $str;\n\t}\n\n\tif(!isset($use_iconv))\n\t{\n\t\t$use_iconv = function_exists(\"iconv\");\n\t}\n\n\tif(!isset($use_mb))\n\t{\n\t\t$use_mb = function_exists(\"mb_convert_encoding\");\n\t}\n\n\tif($use_iconv || $use_mb)\n\t{\n\t\tif($to)\n\t\t{\n\t\t\t$from_charset = $lang->settings['charset'];\n\t\t\t$to_charset = \"UTF-8\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$from_charset = \"UTF-8\";\n\t\t\t$to_charset = $lang->settings['charset'];\n\t\t}\n\t\tif($use_iconv)\n\t\t{\n\t\t\treturn iconv($from_charset, $to_charset.\"//IGNORE\", $str);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn @mb_convert_encoding($str, $to_charset, $from_charset);\n\t\t}\n\t}\n\telseif($charset == \"iso-8859-1\" && function_exists(\"utf8_encode\"))\n\t{\n\t\tif($to)\n\t\t{\n\t\t\treturn utf8_encode($str);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn utf8_decode($str);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $str;\n\t}\n}\n\n/**\n * DEPRECATED! Please use other alternatives.\n *\n * @deprecated\n * @param string $message\n *\n * @return string\n */\nfunction my_wordwrap($message)\n{\n\treturn $message;\n}\n\n/**\n * Workaround for date limitation in PHP to establish the day of a birthday (Provided by meme)\n *\n * @param int $month The month of the birthday\n * @param int $day The day of the birthday\n * @param int $year The year of the bithday\n * @return int The numeric day of the week for the birthday\n */\nfunction get_weekday($month, $day, $year)\n{\n\t$h = 4;\n\n\tfor($i = 1969; $i >= $year; $i--)\n\t{\n\t\t$j = get_bdays($i);\n\n\t\tfor($k = 11; $k >= 0; $k--)\n\t\t{\n\t\t\t$l = ($k + 1);\n\n\t\t\tfor($m = $j[$k]; $m >= 1; $m--)\n\t\t\t{\n\t\t\t\t$h--;\n\n\t\t\t\tif($i == $year && $l == $month && $m == $day)\n\t\t\t\t{\n\t\t\t\t\treturn $h;\n\t\t\t\t}\n\n\t\t\t\tif($h == 0)\n\t\t\t\t{\n\t\t\t\t\t$h = 7;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Workaround for date limitation in PHP to establish the day of a birthday (Provided by meme)\n *\n * @param int $in The year.\n * @return array The number of days in each month of that year\n */\nfunction get_bdays($in)\n{\n\treturn array(\n\t\t31,\n\t\t($in % 4 == 0 && ($in % 100 > 0 || $in % 400 == 0) ? 29 : 28),\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31\n\t);\n}\n\n/**\n * DEPRECATED! Please use mktime()!\n * Formats a birthday appropriately\n *\n * @deprecated\n * @param string $display The PHP date format string\n * @param int $bm The month of the birthday\n * @param int $bd The day of the birthday\n * @param int $by The year of the birthday\n * @param int $wd The weekday of the birthday\n * @return string The formatted birthday\n */\nfunction format_bdays($display, $bm, $bd, $by, $wd)\n{\n\tglobal $lang;\n\n\t$bdays = array(\n\t\t$lang->sunday,\n\t\t$lang->monday,\n\t\t$lang->tuesday,\n\t\t$lang->wednesday,\n\t\t$lang->thursday,\n\t\t$lang->friday,\n\t\t$lang->saturday\n\t);\n\n\t$bmonth = array(\n\t\t$lang->month_1,\n\t\t$lang->month_2,\n\t\t$lang->month_3,\n\t\t$lang->month_4,\n\t\t$lang->month_5,\n\t\t$lang->month_6,\n\t\t$lang->month_7,\n\t\t$lang->month_8,\n\t\t$lang->month_9,\n\t\t$lang->month_10,\n\t\t$lang->month_11,\n\t\t$lang->month_12\n\t);\n\n\n\t// This needs to be in this specific order\n\t$find = array(\n\t\t'm',\n\t\t'n',\n\t\t'd',\n\t\t'D',\n\t\t'y',\n\t\t'Y',\n\t\t'j',\n\t\t'S',\n\t\t'F',\n\t\t'l',\n\t\t'M',\n\t);\n\n\t$html = array(\n\t\t'&#109;',\n\t\t'&#110;',\n\t\t'&#99;',\n\t\t'&#68;',\n\t\t'&#121;',\n\t\t'&#89;',\n\t\t'&#106;',\n\t\t'&#83;',\n\t\t'&#70;',\n\t\t'&#108;',\n\t\t'&#77;',\n\t);\n\n\t$bdays = str_replace($find, $html, $bdays);\n\t$bmonth = str_replace($find, $html, $bmonth);\n\n\t$replace = array(\n\t\tsprintf('%02s', $bm),\n\t\t$bm,\n\t\tsprintf('%02s', $bd),\n\t\t($wd == 2 ? my_substr($bdays[$wd], 0, 4) : ($wd == 4 ? my_substr($bdays[$wd], 0, 5) : my_substr($bdays[$wd], 0, 3))),\n\t\tmy_substr($by, 2),\n\t\t$by,\n\t\t($bd[0] == 0 ? my_substr($bd, 1) : $bd),\n\t\t($bd == 1 || $bd == 21 || $bd == 31 ? 'st' : ($bd == 2 || $bd == 22 ? 'nd' : ($bd == 3 || $bd == 23 ? 'rd' : 'th'))),\n\t\t$bmonth[$bm-1],\n\t\t$wd,\n\t\t($bm == 9 ? my_substr($bmonth[$bm-1], 0, 4) :  my_substr($bmonth[$bm-1], 0, 3)),\n\t);\n\n\t// Do we have the full month in our output?\n\t// If so there's no need for the short month\n\tif(strpos($display, 'F') !== false)\n\t{\n\t\tarray_pop($find);\n\t\tarray_pop($replace);\n\t}\n\n\treturn str_replace($find, $replace, $display);\n}\n\n/**\n * Returns the age of a user with specified birthday.\n *\n * @param string $birthday The birthday of a user.\n * @return int The age of a user with that birthday.\n */\nfunction get_age($birthday)\n{\n\t$bday = explode(\"-\", $birthday);\n\tif(!$bday[2])\n\t{\n\t\treturn;\n\t}\n\n\tlist($day, $month, $year) = explode(\"-\", my_date(\"j-n-Y\", TIME_NOW, 0, 0));\n\n\t$age = $year-$bday[2];\n\n\tif(($month == $bday[1] && $day < $bday[0]) || $month < $bday[1])\n\t{\n\t\t--$age;\n\t}\n\treturn $age;\n}\n\n/**\n * Updates the first posts in a thread.\n *\n * @param int $tid The thread id for which to update the first post id.\n */\nfunction update_first_post($tid)\n{\n\tglobal $db;\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.pid, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid'\n\t\tORDER BY p.dateline ASC\n\t\tLIMIT 1\n\t\");\n\t$firstpost = $db->fetch_array($query);\n\n\tif(empty($firstpost['username']))\n\t{\n\t\t$firstpost['username'] = $firstpost['postusername'];\n\t}\n\t$firstpost['username'] = $db->escape_string($firstpost['username']);\n\n\t$update_array = array(\n\t\t'firstpost' => (int)$firstpost['pid'],\n\t\t'username' => $firstpost['username'],\n\t\t'uid' => (int)$firstpost['uid'],\n\t\t'dateline' => (int)$firstpost['dateline']\n\t);\n\t$db->update_query(\"threads\", $update_array, \"tid='{$tid}'\");\n}\n\n/**\n * Updates the last posts in a thread.\n *\n * @param int $tid The thread id for which to update the last post id.\n */\nfunction update_last_post($tid)\n{\n\tglobal $db;\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid' AND p.visible='1'\n\t\tORDER BY p.dateline DESC\n\t\tLIMIT 1\"\n\t);\n\t$lastpost = $db->fetch_array($query);\n\n\tif(empty($lastpost['username']))\n\t{\n\t\t$lastpost['username'] = $lastpost['postusername'];\n\t}\n\n\tif(empty($lastpost['dateline']))\n\t{\n\t\t$query = $db->query(\"\n\t\t\tSELECT u.uid, u.username, p.pid, p.username AS postusername, p.dateline\n\t\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\t\tWHERE p.tid='$tid'\n\t\t\tORDER BY p.dateline ASC\n\t\t\tLIMIT 1\n\t\t\");\n\t\t$firstpost = $db->fetch_array($query);\n\n\t\t$lastpost['username'] = $firstpost['username'];\n\t\t$lastpost['uid'] = $firstpost['uid'];\n\t\t$lastpost['dateline'] = $firstpost['dateline'];\n\t}\n\n\t$lastpost['username'] = $db->escape_string($lastpost['username']);\n\n\t$update_array = array(\n\t\t'lastpost' => (int)$lastpost['dateline'],\n\t\t'lastposter' => $lastpost['username'],\n\t\t'lastposteruid' => (int)$lastpost['uid']\n\t);\n\t$db->update_query(\"threads\", $update_array, \"tid='{$tid}'\");\n}\n\n/**\n * Checks for the length of a string, mb strings accounted for\n *\n * @param string $string The string to check the length of.\n * @return int The length of the string.\n */\nfunction my_strlen($string)\n{\n\tglobal $lang;\n\n\t$string = preg_replace(\"#&\\#([0-9]+);#\", \"-\", $string);\n\n\tif(strtolower($lang->settings['charset']) == \"utf-8\")\n\t{\n\t\t// Get rid of any excess RTL and LTR override for they are the workings of the devil\n\t\t$string = str_replace(dec_to_utf8(8238), \"\", $string);\n\t\t$string = str_replace(dec_to_utf8(8237), \"\", $string);\n\n\t\t// Remove dodgy whitespaces\n\t\t$string = str_replace(chr(0xCA), \"\", $string);\n\t}\n\t$string = trim($string);\n\n\tif(function_exists(\"mb_strlen\"))\n\t{\n\t\t$string_length = mb_strlen($string);\n\t}\n\telse\n\t{\n\t\t$string_length = strlen($string);\n\t}\n\n\treturn $string_length;\n}\n\n/**\n * Cuts a string at a specified point, mb strings accounted for\n *\n * @param string $string The string to cut.\n * @param int $start Where to cut\n * @param int $length (optional) How much to cut\n * @param bool $handle_entities (optional) Properly handle HTML entities?\n * @return string The cut part of the string.\n */\nfunction my_substr($string, $start, $length=null, $handle_entities = false)\n{\n\tif($handle_entities)\n\t{\n\t\t$string = unhtmlentities($string);\n\t}\n\tif(function_exists(\"mb_substr\"))\n\t{\n\t\tif($length != null)\n\t\t{\n\t\t\t$cut_string = mb_substr($string, $start, $length);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$cut_string = mb_substr($string, $start);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif($length != null)\n\t\t{\n\t\t\t$cut_string = substr($string, $start, $length);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$cut_string = substr($string, $start);\n\t\t}\n\t}\n\n\tif($handle_entities)\n\t{\n\t\t$cut_string = htmlspecialchars_uni($cut_string);\n\t}\n\treturn $cut_string;\n}\n\n/**\n * Lowers the case of a string, mb strings accounted for\n *\n * @param string $string The string to lower.\n * @return string The lowered string.\n */\nfunction my_strtolower($string)\n{\n\tif(function_exists(\"mb_strtolower\"))\n\t{\n\t\t$string = mb_strtolower($string);\n\t}\n\telse\n\t{\n\t\t$string = strtolower($string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Finds a needle in a haystack and returns it position, mb strings accounted for\n *\n * @param string $haystack String to look in (haystack)\n * @param string $needle What to look for (needle)\n * @param int $offset (optional) How much to offset\n * @return int|bool false on needle not found, integer position if found\n */\nfunction my_strpos($haystack, $needle, $offset=0)\n{\n\tif($needle == '')\n\t{\n\t\treturn false;\n\t}\n\n\tif(function_exists(\"mb_strpos\"))\n\t{\n\t\t$position = mb_strpos($haystack, $needle, $offset);\n\t}\n\telse\n\t{\n\t\t$position = strpos($haystack, $needle, $offset);\n\t}\n\n\treturn $position;\n}\n\n/**\n * Ups the case of a string, mb strings accounted for\n *\n * @param string $string The string to up.\n * @return string The uped string.\n */\nfunction my_strtoupper($string)\n{\n\tif(function_exists(\"mb_strtoupper\"))\n\t{\n\t\t$string = mb_strtoupper($string);\n\t}\n\telse\n\t{\n\t\t$string = strtoupper($string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Returns any html entities to their original character\n *\n * @param string $string The string to un-htmlentitize.\n * @return string The un-htmlentitied' string.\n */\nfunction unhtmlentities($string)\n{\n\t// Replace numeric entities\n\t$string = preg_replace_callback('~&#x([0-9a-f]+);~i', create_function('$matches', 'return unichr(hexdec($matches[1]));'), $string);\n\t$string = preg_replace_callback('~&#([0-9]+);~', create_function('$matches', 'return unichr($matches[1]);'), $string);\n\n\t// Replace literal entities\n\t$trans_tbl = get_html_translation_table(HTML_ENTITIES);\n\t$trans_tbl = array_flip($trans_tbl);\n\n\treturn strtr($string, $trans_tbl);\n}\n\n/**\n * Returns any ascii to it's character (utf-8 safe).\n *\n * @param int $c The ascii to characterize.\n * @return string|bool The characterized ascii. False on failure\n */\nfunction unichr($c)\n{\n\tif($c <= 0x7F)\n\t{\n\t\treturn chr($c);\n\t}\n\telse if($c <= 0x7FF)\n\t{\n\t\treturn chr(0xC0 | $c >> 6) . chr(0x80 | $c & 0x3F);\n\t}\n\telse if($c <= 0xFFFF)\n\t{\n\t\treturn chr(0xE0 | $c >> 12) . chr(0x80 | $c >> 6 & 0x3F)\n\t\t\t\t\t\t\t\t\t. chr(0x80 | $c & 0x3F);\n\t}\n\telse if($c <= 0x10FFFF)\n\t{\n\t\treturn chr(0xF0 | $c >> 18) . chr(0x80 | $c >> 12 & 0x3F)\n\t\t\t\t\t\t\t\t\t. chr(0x80 | $c >> 6 & 0x3F)\n\t\t\t\t\t\t\t\t\t. chr(0x80 | $c & 0x3F);\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Get the event poster.\n *\n * @param array $event The event data array.\n * @return string The link to the event poster.\n */\nfunction get_event_poster($event)\n{\n\t$event['username'] = htmlspecialchars_uni($event['username']);\n\t$event['username'] = format_name($event['username'], $event['usergroup'], $event['displaygroup']);\n\t$event_poster = build_profile_link($event['username'], $event['author']);\n\treturn $event_poster;\n}\n\n/**\n * Get the event date.\n *\n * @param array $event The event data array.\n * @return string The event date.\n */\nfunction get_event_date($event)\n{\n\tglobal $mybb;\n\n\t$event_date = explode(\"-\", $event['date']);\n\t$event_date = gmmktime(0, 0, 0, $event_date[1], $event_date[0], $event_date[2]);\n\t$event_date = my_date($mybb->settings['dateformat'], $event_date);\n\n\treturn $event_date;\n}\n\n/**\n * Get the profile link.\n *\n * @param int $uid The user id of the profile.\n * @return string The url to the profile.\n */\nfunction get_profile_link($uid=0)\n{\n\t$link = str_replace(\"{uid}\", $uid, PROFILE_URL);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Get the announcement link.\n *\n * @param int $aid The announement id of the announcement.\n * @return string The url to the announcement.\n */\nfunction get_announcement_link($aid=0)\n{\n\t$link = str_replace(\"{aid}\", $aid, ANNOUNCEMENT_URL);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Build the profile link.\n *\n * @param string $username The Username of the profile.\n * @param int $uid The user id of the profile.\n * @param string $target The target frame\n * @param string $onclick Any onclick javascript.\n * @return string The complete profile link.\n */\nfunction build_profile_link($username=\"\", $uid=0, $target=\"\", $onclick=\"\")\n{\n\tglobal $mybb, $lang;\n\n\tif(!$username && $uid == 0)\n\t{\n\t\t// Return Guest phrase for no UID, no guest nickname\n\t\treturn $lang->guest;\n\t}\n\telseif($uid == 0)\n\t{\n\t\t// Return the guest's nickname if user is a guest but has a nickname\n\t\treturn $username;\n\t}\n\telse\n\t{\n\t\t// Build the profile link for the registered user\n\t\tif(!empty($target))\n\t\t{\n\t\t\t$target = \" target=\\\"{$target}\\\"\";\n\t\t}\n\n\t\tif(!empty($onclick))\n\t\t{\n\t\t\t$onclick = \" onclick=\\\"{$onclick}\\\"\";\n\t\t}\n\n\t\treturn \"<a href=\\\"{$mybb->settings['bburl']}/\".get_profile_link($uid).\"\\\"{$target}{$onclick}>{$username}</a>\";\n\t}\n}\n\n/**\n * Build the forum link.\n *\n * @param int $fid The forum id of the forum.\n * @param int $page (Optional) The page number of the forum.\n * @return string The url to the forum.\n */\nfunction get_forum_link($fid, $page=0)\n{\n\tif($page > 0)\n\t{\n\t\t$link = str_replace(\"{fid}\", $fid, FORUM_URL_PAGED);\n\t\t$link = str_replace(\"{page}\", $page, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse\n\t{\n\t\t$link = str_replace(\"{fid}\", $fid, FORUM_URL);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the thread link.\n *\n * @param int $tid The thread id of the thread.\n * @param int $page (Optional) The page number of the thread.\n * @param string $action (Optional) The action we're performing (ex, lastpost, newpost, etc)\n * @return string The url to the thread.\n */\nfunction get_thread_link($tid, $page=0, $action='')\n{\n\tif($page > 1)\n\t{\n\t\tif($action)\n\t\t{\n\t\t\t$link = THREAD_URL_ACTION;\n\t\t\t$link = str_replace(\"{action}\", $action, $link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link = THREAD_URL_PAGED;\n\t\t}\n\t\t$link = str_replace(\"{tid}\", $tid, $link);\n\t\t$link = str_replace(\"{page}\", $page, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse\n\t{\n\t\tif($action)\n\t\t{\n\t\t\t$link = THREAD_URL_ACTION;\n\t\t\t$link = str_replace(\"{action}\", $action, $link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link = THREAD_URL;\n\t\t}\n\t\t$link = str_replace(\"{tid}\", $tid, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the post link.\n *\n * @param int $pid The post ID of the post\n * @param int $tid The thread id of the post.\n * @return string The url to the post.\n */\nfunction get_post_link($pid, $tid=0)\n{\n\tif($tid > 0)\n\t{\n\t\t$link = str_replace(\"{tid}\", $tid, THREAD_URL_POST);\n\t\t$link = str_replace(\"{pid}\", $pid, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse\n\t{\n\t\t$link = str_replace(\"{pid}\", $pid, POST_URL);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the event link.\n *\n * @param int $eid The event ID of the event\n * @return string The URL of the event\n */\nfunction get_event_link($eid)\n{\n\t$link = str_replace(\"{eid}\", $eid, EVENT_URL);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Build the link to a specified date on the calendar\n *\n * @param int $calendar The ID of the calendar\n * @param int $year The year\n * @param int $month The month\n * @param int $day The day (optional)\n * @return string The URL of the calendar\n */\nfunction get_calendar_link($calendar, $year=0, $month=0, $day=0)\n{\n\tif($day > 0)\n\t{\n\t\t$link = str_replace(\"{month}\", $month, CALENDAR_URL_DAY);\n\t\t$link = str_replace(\"{year}\", $year, $link);\n\t\t$link = str_replace(\"{day}\", $day, $link);\n\t\t$link = str_replace(\"{calendar}\", $calendar, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse if($month > 0)\n\t{\n\t\t$link = str_replace(\"{month}\", $month, CALENDAR_URL_MONTH);\n\t\t$link = str_replace(\"{year}\", $year, $link);\n\t\t$link = str_replace(\"{calendar}\", $calendar, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\t/* Not implemented\n\telse if($year > 0)\n\t{\n\t}*/\n\telse\n\t{\n\t\t$link = str_replace(\"{calendar}\", $calendar, CALENDAR_URL);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the link to a specified week on the calendar\n *\n * @param int $calendar The ID of the calendar\n * @param int $week The week\n * @return string The URL of the calendar\n */\nfunction get_calendar_week_link($calendar, $week)\n{\n\tif($week < 0)\n\t{\n\t\t$week = str_replace('-', \"n\", $week);\n\t}\n\t$link = str_replace(\"{week}\", $week, CALENDAR_URL_WEEK);\n\t$link = str_replace(\"{calendar}\", $calendar, $link);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Get the user data of an user id.\n *\n * @param int $uid The user id of the user.\n * @return array The users data\n */\nfunction get_user($uid)\n{\n\tglobal $mybb, $db;\n\tstatic $user_cache;\n\n\t$uid = (int)$uid;\n\n\tif(!empty($mybb->user) && $uid == $mybb->user['uid'])\n\t{\n\t\treturn $mybb->user;\n\t}\n\telseif(isset($user_cache[$uid]))\n\t{\n\t\treturn $user_cache[$uid];\n\t}\n\telseif($uid > 0)\n\t{\n\t\t$query = $db->simple_select(\"users\", \"*\", \"uid = '{$uid}'\");\n\t\t$user_cache[$uid] = $db->fetch_array($query);\n\n\t\treturn $user_cache[$uid];\n\t}\n\treturn array();\n}\n\n/**\n * Get the user data of an user username.\n *\n * @param string $username The user username of the user.\n * @param array $options\n * @return array The users data\n */\nfunction get_user_by_username($username, $options=array())\n{\n\tglobal $mybb, $db;\n\n\t$username = $db->escape_string(my_strtolower($username));\n\n\tif(!isset($options['username_method']))\n\t{\n\t\t$options['username_method'] = 0;\n\t}\n\n\tswitch($db->type)\n\t{\n\t\tcase 'mysql':\n\t\tcase 'mysqli':\n\t\t\t$field = 'username';\n\t\t\t$efield = 'email';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$field = 'LOWER(username)';\n\t\t\t$efield = 'LOWER(email)';\n\t\t\tbreak;\n\t}\n\n\tswitch($options['username_method'])\n\t{\n\t\tcase 1:\n\t\t\t$sqlwhere = \"{$efield}='{$username}'\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t$sqlwhere = \"{$field}='{$username}' OR {$efield}='{$username}'\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$sqlwhere = \"{$field}='{$username}'\";\n\t\t\tbreak;\n\t}\n\n\t$fields = array('uid');\n\tif(isset($options['fields']))\n\t{\n\t\t$fields = array_merge((array)$options['fields'], $fields);\n\t}\n\n\t$query = $db->simple_select('users', implode(',', array_unique($fields)), $sqlwhere, array('limit' => 1));\n\n\tif(isset($options['exists']))\n\t{\n\t\treturn (bool)$db->num_rows($query);\n\t}\n\n\treturn $db->fetch_array($query);\n}\n\n/**\n * Get the forum of a specific forum id.\n *\n * @param int $fid The forum id of the forum.\n * @param int $active_override (Optional) If set to 1, will override the active forum status\n * @return array|bool The database row of a forum. False on failure\n */\nfunction get_forum($fid, $active_override=0)\n{\n\tglobal $cache;\n\tstatic $forum_cache;\n\n\tif(!isset($forum_cache) || is_array($forum_cache))\n\t{\n\t\t$forum_cache = $cache->read(\"forums\");\n\t}\n\n\tif(empty($forum_cache[$fid]))\n\t{\n\t\treturn false;\n\t}\n\n\tif($active_override != 1)\n\t{\n\t\t$parents = explode(\",\", $forum_cache[$fid]['parentlist']);\n\t\tif(is_array($parents))\n\t\t{\n\t\t\tforeach($parents as $parent)\n\t\t\t{\n\t\t\t\tif($forum_cache[$parent]['active'] == 0)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $forum_cache[$fid];\n}\n\n/**\n * Get the thread of a thread id.\n *\n * @param int $tid The thread id of the thread.\n * @param boolean $recache Whether or not to recache the thread.\n * @return array|bool The database row of the thread. False on failure\n */\nfunction get_thread($tid, $recache = false)\n{\n\tglobal $db;\n\tstatic $thread_cache;\n\n\t$tid = (int)$tid;\n\n\tif(isset($thread_cache[$tid]) && !$recache)\n\t{\n\t\treturn $thread_cache[$tid];\n\t}\n\telse\n\t{\n\t\t$query = $db->simple_select(\"threads\", \"*\", \"tid = '{$tid}'\");\n\t\t$thread = $db->fetch_array($query);\n\n\t\tif($thread)\n\t\t{\n\t\t\t$thread_cache[$tid] = $thread;\n\t\t\treturn $thread;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$thread_cache[$tid] = false;\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Get the post of a post id.\n *\n * @param int $pid The post id of the post.\n * @return array|bool The database row of the post. False on failure\n */\nfunction get_post($pid)\n{\n\tglobal $db;\n\tstatic $post_cache;\n\n\t$pid = (int)$pid;\n\n\tif(isset($post_cache[$pid]))\n\t{\n\t\treturn $post_cache[$pid];\n\t}\n\telse\n\t{\n\t\t$query = $db->simple_select(\"posts\", \"*\", \"pid = '{$pid}'\");\n\t\t$post = $db->fetch_array($query);\n\n\t\tif($post)\n\t\t{\n\t\t\t$post_cache[$pid] = $post;\n\t\t\treturn $post;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$post_cache[$pid] = false;\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Get inactivate forums.\n *\n * @return string The comma separated values of the inactivate forum.\n */\nfunction get_inactive_forums()\n{\n\tglobal $forum_cache, $cache;\n\n\tif(!$forum_cache)\n\t{\n\t\tcache_forums();\n\t}\n\n\t$inactive = array();\n\n\tforeach($forum_cache as $fid => $forum)\n\t{\n\t\tif($forum['active'] == 0)\n\t\t{\n\t\t\t$inactive[] = $fid;\n\t\t\tforeach($forum_cache as $fid1 => $forum1)\n\t\t\t{\n\t\t\t\tif(my_strpos(\",\".$forum1['parentlist'].\",\", \",\".$fid.\",\") !== false && !in_array($fid1, $inactive))\n\t\t\t\t{\n\t\t\t\t\t$inactive[] = $fid1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$inactiveforums = implode(\",\", $inactive);\n\n\treturn $inactiveforums;\n}\n\n/**\n * Checks to make sure a user has not tried to login more times than permitted\n *\n * @param bool $fatal (Optional) Stop execution if it finds an error with the login. Default is True\n * @return bool|int Number of logins when success, false if failed.\n */\nfunction login_attempt_check($fatal = true)\n{\n\tglobal $mybb, $lang, $session, $db;\n\n\tif($mybb->settings['failedlogincount'] == 0)\n\t{\n\t\treturn 1;\n\t}\n\t// Note: Number of logins is defaulted to 1, because using 0 seems to clear cookie data. Not really a problem as long as we account for 1 being default.\n\n\t// Use cookie if possible, otherwise use session\n\t// Find better solution to prevent clearing cookies\n\t$loginattempts = 0;\n\t$failedlogin = 0;\n\n\tif(!empty($mybb->cookies['loginattempts']))\n\t{\n\t\t$loginattempts = $mybb->cookies['loginattempts'];\n\t}\n\n\tif(!empty($mybb->cookies['failedlogin']))\n\t{\n\t\t$failedlogin = $mybb->cookies['failedlogin'];\n\t}\n\n\t// Work out if the user has had more than the allowed number of login attempts\n\tif($loginattempts > $mybb->settings['failedlogincount'])\n\t{\n\t\t// If so, then we need to work out if they can try to login again\n\t\t// Some maths to work out how long they have left and display it to them\n\t\t$now = TIME_NOW;\n\n\t\tif(empty($mybb->cookies['failedlogin']))\n\t\t{\n\t\t\t$failedtime = $now;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$failedtime = $mybb->cookies['failedlogin'];\n\t\t}\n\n\t\t$secondsleft = $mybb->settings['failedlogintime'] * 60 + $failedtime - $now;\n\t\t$hoursleft = floor($secondsleft / 3600);\n\t\t$minsleft = floor(($secondsleft / 60) % 60);\n\t\t$secsleft = floor($secondsleft % 60);\n\n\t\t// This value will be empty the first time the user doesn't login in, set it\n\t\tif(empty($failedlogin))\n\t\t{\n\t\t\tmy_setcookie('failedlogin', $now);\n\t\t\tif($fatal)\n\t\t\t{\n\t\t\t\terror($lang->sprintf($lang->failed_login_wait, $hoursleft, $minsleft, $secsleft));\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Work out if the user has waited long enough before letting them login again\n\t\tif($mybb->cookies['failedlogin'] < ($now - $mybb->settings['failedlogintime'] * 60))\n\t\t{\n\t\t\tmy_setcookie('loginattempts', 1);\n\t\t\tmy_unsetcookie('failedlogin');\n\t\t\tif($mybb->user['uid'] != 0)\n\t\t\t{\n\t\t\t\t$update_array = array(\n\t\t\t\t\t'loginattempts' => 1\n\t\t\t\t);\n\t\t\t\t$db->update_query(\"users\", $update_array, \"uid = '{$mybb->user['uid']}'\");\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\t// Not waited long enough\n\t\telse if($mybb->cookies['failedlogin'] > ($now - $mybb->settings['failedlogintime'] * 60))\n\t\t{\n\t\t\tif($fatal)\n\t\t\t{\n\t\t\t\terror($lang->sprintf($lang->failed_login_wait, $hoursleft, $minsleft, $secsleft));\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// User can attempt another login\n\treturn $loginattempts;\n}\n\n/**\n * Validates the format of an email address.\n *\n * @param string $email The string to check.\n * @return boolean True when valid, false when invalid.\n */\nfunction validate_email_format($email)\n{\n\tif(strpos($email, ' ') !== false)\n\t{\n\t\treturn false;\n\t}\n\t// Valid local characters for email addresses: http://www.remote.org/jochen/mail/info/chars.html\n\treturn preg_match(\"/^[a-zA-Z0-9&*+\\-_.{}~^\\?=\\/]+@[a-zA-Z0-9-]+\\.([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]{2,}$/si\", $email);\n}\n\n/**\n * Checks to see if the email is already in use by another\n *\n * @param string $email The email to check.\n * @param int $uid User ID of the user (updating only)\n * @return boolean True when in use, false when not.\n */\nfunction email_already_in_use($email, $uid=0)\n{\n\tglobal $db;\n\n\t$uid_string = \"\";\n\tif($uid)\n\t{\n\t\t$uid_string = \" AND uid != '\".(int)$uid.\"'\";\n\t}\n\t$query = $db->simple_select(\"users\", \"COUNT(email) as emails\", \"email = '\".$db->escape_string($email).\"'{$uid_string}\");\n\n\tif($db->fetch_field($query, \"emails\") > 0)\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Rebuilds settings.php\n *\n */\nfunction rebuild_settings()\n{\n\tglobal $db, $mybb;\n\n\tif(!file_exists(MYBB_ROOT.\"inc/settings.php\"))\n\t{\n\t\t$mode = \"x\";\n\t}\n\telse\n\t{\n\t\t$mode = \"w\";\n\t}\n\n\t$options = array(\n\t\t\"order_by\" => \"title\",\n\t\t\"order_dir\" => \"ASC\"\n\t);\n\t$query = $db->simple_select(\"settings\", \"value, name\", \"\", $options);\n\n\t$settings = null;\n\twhile($setting = $db->fetch_array($query))\n\t{\n\t\t$mybb->settings[$setting['name']] = $setting['value'];\n\t\t$setting['value'] = addcslashes($setting['value'], '\\\\\"$');\n\t\t$settings .= \"\\$settings['{$setting['name']}'] = \\\"{$setting['value']}\\\";\\n\";\n\t}\n\n\t$settings = \"<\".\"?php\\n/*********************************\\ \\n  DO NOT EDIT THIS FILE, PLEASE USE\\n  THE SETTINGS EDITOR\\n\\*********************************/\\n\\n$settings\\n\";\n\t$file = @fopen(MYBB_ROOT.\"inc/settings.php\", $mode);\n\t@fwrite($file, $settings);\n\t@fclose($file);\n\n\t$GLOBALS['settings'] = &$mybb->settings;\n}\n\n/**\n * Build a PREG compatible array of search highlight terms to replace in posts.\n *\n * @param string $terms Incoming terms to highlight\n * @return array PREG compatible array of terms\n */\nfunction build_highlight_array($terms)\n{\n\tglobal $mybb;\n\n\tif($mybb->settings['minsearchword'] < 1)\n\t{\n\t\t$mybb->settings['minsearchword'] = 3;\n\t}\n\n\tif(is_array($terms))\n\t{\n\t\t$terms = implode(' ', $terms);\n\t}\n\n\t// Strip out any characters that shouldn't be included\n\t$bad_characters = array(\n\t\t\"(\",\n\t\t\")\",\n\t\t\"+\",\n\t\t\"-\",\n\t\t\"~\"\n\t);\n\t$terms = str_replace($bad_characters, '', $terms);\n\n\t// Check if this is a \"series of words\" - should be treated as an EXACT match\n\tif(my_strpos($terms, \"\\\"\") !== false)\n\t{\n\t\t$inquote = false;\n\t\t$terms = explode(\"\\\"\", $terms);\n\t\t$words = array();\n\t\tforeach($terms as $phrase)\n\t\t{\n\t\t\t$phrase = htmlspecialchars_uni($phrase);\n\t\t\tif($phrase != \"\")\n\t\t\t{\n\t\t\t\tif($inquote)\n\t\t\t\t{\n\t\t\t\t\t$words[] = trim($phrase);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$split_words = preg_split(\"#\\s{1,}#\", $phrase, -1);\n\t\t\t\t\tif(!is_array($split_words))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tforeach($split_words as $word)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!$word || strlen($word) < $mybb->settings['minsearchword'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$words[] = trim($word);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$inquote = !$inquote;\n\t\t}\n\t}\n\t// Otherwise just a simple search query with no phrases\n\telse\n\t{\n\t\t$terms = htmlspecialchars_uni($terms);\n\t\t$split_words = preg_split(\"#\\s{1,}#\", $terms, -1);\n\t\tif(is_array($split_words))\n\t\t{\n\t\t\tforeach($split_words as $word)\n\t\t\t{\n\t\t\t\tif(!$word || strlen($word) < $mybb->settings['minsearchword'])\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$words[] = trim($word);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!is_array($words))\n\t{\n\t\treturn false;\n\t}\n\n\t// Sort the word array by length. Largest terms go first and work their way down to the smallest term.\n\t// This resolves problems like \"test tes\" where \"tes\" will be highlighted first, then \"test\" can't be highlighted because of the changed html\n\tusort($words, create_function('$a,$b', 'return strlen($b) - strlen($a);'));\n\n\t// Loop through our words to build the PREG compatible strings\n\tforeach($words as $word)\n\t{\n\t\t$word = trim($word);\n\n\t\t$word = my_strtolower($word);\n\n\t\t// Special boolean operators should be stripped\n\t\tif($word == \"\" || $word == \"or\" || $word == \"not\" || $word == \"and\")\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Now make PREG compatible\n\t\t$find = \"#(?!<.*?)(\".preg_quote($word, \"#\").\")(?![^<>]*?>)#ui\";\n\t\t$replacement = \"<span class=\\\"highlight\\\" style=\\\"padding-left: 0px; padding-right: 0px;\\\">$1</span>\";\n\t\t$highlight_cache[$find] = $replacement;\n\t}\n\n\treturn $highlight_cache;\n}\n\n/**\n * Converts a decimal reference of a character to its UTF-8 equivalent\n * (Code by Anne van Kesteren, http://annevankesteren.nl/2005/05/character-references)\n *\n * @param int $src Decimal value of a character reference\n * @return string|bool\n */\nfunction dec_to_utf8($src)\n{\n\t$dest = '';\n\n\tif($src < 0)\n\t{\n\t\treturn false;\n\t}\n\telseif($src <= 0x007f)\n\t{\n\t\t$dest .= chr($src);\n\t}\n\telseif($src <= 0x07ff)\n\t{\n\t\t$dest .= chr(0xc0 | ($src >> 6));\n\t\t$dest .= chr(0x80 | ($src & 0x003f));\n\t}\n\telseif($src <= 0xffff)\n\t{\n\t\t$dest .= chr(0xe0 | ($src >> 12));\n\t\t$dest .= chr(0x80 | (($src >> 6) & 0x003f));\n\t\t$dest .= chr(0x80 | ($src & 0x003f));\n\t}\n\telseif($src <= 0x10ffff)\n\t{\n\t\t$dest .= chr(0xf0 | ($src >> 18));\n\t\t$dest .= chr(0x80 | (($src >> 12) & 0x3f));\n\t\t$dest .= chr(0x80 | (($src >> 6) & 0x3f));\n\t\t$dest .= chr(0x80 | ($src & 0x3f));\n\t}\n\telse\n\t{\n\t\t// Out of range\n\t\treturn false;\n\t}\n\n\treturn $dest;\n}\n\n/**\n * Checks if a username has been disallowed for registration/use.\n *\n * @param string $username The username\n * @param boolean $update_lastuse True if the 'last used' dateline should be updated if a match is found.\n * @return boolean True if banned, false if not banned\n */\nfunction is_banned_username($username, $update_lastuse=false)\n{\n\tglobal $db;\n\t$query = $db->simple_select('banfilters', 'filter, fid', \"type='2'\");\n\twhile($banned_username = $db->fetch_array($query))\n\t{\n\t\t// Make regular expression * match\n\t\t$banned_username['filter'] = str_replace('\\*', '(.*)', preg_quote($banned_username['filter'], '#'));\n\t\tif(preg_match(\"#(^|\\b){$banned_username['filter']}($|\\b)#i\", $username))\n\t\t{\n\t\t\t// Updating last use\n\t\t\tif($update_lastuse == true)\n\t\t\t{\n\t\t\t\t$db->update_query(\"banfilters\", array(\"lastuse\" => TIME_NOW), \"fid='{$banned_username['fid']}'\");\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t// Still here - good username\n\treturn false;\n}\n\n/**\n * Check if a specific email address has been banned.\n *\n * @param string $email The email address.\n * @param boolean $update_lastuse True if the 'last used' dateline should be updated if a match is found.\n * @return boolean True if banned, false if not banned\n */\nfunction is_banned_email($email, $update_lastuse=false)\n{\n\tglobal $cache, $db;\n\n\t$banned_cache = $cache->read(\"bannedemails\");\n\n\tif($banned_cache === false)\n\t{\n\t\t// Failed to read cache, see if we can rebuild it\n\t\t$cache->update_bannedemails();\n\t\t$banned_cache = $cache->read(\"bannedemails\");\n\t}\n\n\tif(is_array($banned_cache) && !empty($banned_cache))\n\t{\n\t\tforeach($banned_cache as $banned_email)\n\t\t{\n\t\t\t// Make regular expression * match\n\t\t\t$banned_email['filter'] = str_replace('\\*', '(.*)', preg_quote($banned_email['filter'], '#'));\n\n\t\t\tif(preg_match(\"#{$banned_email['filter']}#i\", $email))\n\t\t\t{\n\t\t\t\t// Updating last use\n\t\t\t\tif($update_lastuse == true)\n\t\t\t\t{\n\t\t\t\t\t$db->update_query(\"banfilters\", array(\"lastuse\" => TIME_NOW), \"fid='{$banned_email['fid']}'\");\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Still here - good email\n\treturn false;\n}\n\n/**\n * Checks if a specific IP address has been banned.\n *\n * @param string $ip_address The IP address.\n * @param boolean $update_lastuse True if the 'last used' dateline should be updated if a match is found.\n * @return boolean True if banned, false if not banned.\n */\nfunction is_banned_ip($ip_address, $update_lastuse=false)\n{\n\tglobal $db, $cache;\n\n\t$banned_ips = $cache->read(\"bannedips\");\n\tif(!is_array($banned_ips))\n\t{\n\t\treturn false;\n\t}\n\n\t$ip_address = my_inet_pton($ip_address);\n\tforeach($banned_ips as $banned_ip)\n\t{\n\t\tif(!$banned_ip['filter'])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t$banned = false;\n\n\t\t$ip_range = fetch_ip_range($banned_ip['filter']);\n\t\tif(is_array($ip_range))\n\t\t{\n\t\t\tif(strcmp($ip_range[0], $ip_address) <= 0 && strcmp($ip_range[1], $ip_address) >= 0)\n\t\t\t{\n\t\t\t\t$banned = true;\n\t\t\t}\n\t\t}\n\t\telseif($ip_address == $ip_range)\n\t\t{\n\t\t\t$banned = true;\n\t\t}\n\t\tif($banned)\n\t\t{\n\t\t\t// Updating last use\n\t\t\tif($update_lastuse == true)\n\t\t\t{\n\t\t\t\t$db->update_query(\"banfilters\", array(\"lastuse\" => TIME_NOW), \"fid='{$banned_ip['fid']}'\");\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Still here - good ip\n\treturn false;\n}\n\n/**\n * Returns an array of supported timezones\n *\n * @return string[] Key is timezone offset, Value the language description\n */\nfunction get_supported_timezones()\n{\n\tglobal $lang;\n\t$timezones = array(\n\t\t\"-12\" => $lang->timezone_gmt_minus_1200,\n\t\t\"-11\" => $lang->timezone_gmt_minus_1100,\n\t\t\"-10\" => $lang->timezone_gmt_minus_1000,\n\t\t\"-9.5\" => $lang->timezone_gmt_minus_950,\n\t\t\"-9\" => $lang->timezone_gmt_minus_900,\n\t\t\"-8\" => $lang->timezone_gmt_minus_800,\n\t\t\"-7\" => $lang->timezone_gmt_minus_700,\n\t\t\"-6\" => $lang->timezone_gmt_minus_600,\n\t\t\"-5\" => $lang->timezone_gmt_minus_500,\n\t\t\"-4.5\" => $lang->timezone_gmt_minus_450,\n\t\t\"-4\" => $lang->timezone_gmt_minus_400,\n\t\t\"-3.5\" => $lang->timezone_gmt_minus_350,\n\t\t\"-3\" => $lang->timezone_gmt_minus_300,\n\t\t\"-2\" => $lang->timezone_gmt_minus_200,\n\t\t\"-1\" => $lang->timezone_gmt_minus_100,\n\t\t\"0\" => $lang->timezone_gmt,\n\t\t\"1\" => $lang->timezone_gmt_100,\n\t\t\"2\" => $lang->timezone_gmt_200,\n\t\t\"3\" => $lang->timezone_gmt_300,\n\t\t\"3.5\" => $lang->timezone_gmt_350,\n\t\t\"4\" => $lang->timezone_gmt_400,\n\t\t\"4.5\" => $lang->timezone_gmt_450,\n\t\t\"5\" => $lang->timezone_gmt_500,\n\t\t\"5.5\" => $lang->timezone_gmt_550,\n\t\t\"5.75\" => $lang->timezone_gmt_575,\n\t\t\"6\" => $lang->timezone_gmt_600,\n\t\t\"6.5\" => $lang->timezone_gmt_650,\n\t\t\"7\" => $lang->timezone_gmt_700,\n\t\t\"8\" => $lang->timezone_gmt_800,\n\t\t\"8.5\" => $lang->timezone_gmt_850,\n\t\t\"8.75\" => $lang->timezone_gmt_875,\n\t\t\"9\" => $lang->timezone_gmt_900,\n\t\t\"9.5\" => $lang->timezone_gmt_950,\n\t\t\"10\" => $lang->timezone_gmt_1000,\n\t\t\"10.5\" => $lang->timezone_gmt_1050,\n\t\t\"11\" => $lang->timezone_gmt_1100,\n\t\t\"11.5\" => $lang->timezone_gmt_1150,\n\t\t\"12\" => $lang->timezone_gmt_1200,\n\t\t\"12.75\" => $lang->timezone_gmt_1275,\n\t\t\"13\" => $lang->timezone_gmt_1300,\n\t\t\"14\" => $lang->timezone_gmt_1400\n\t);\n\treturn $timezones;\n}\n\n/**\n * Build a time zone selection list.\n *\n * @param string $name The name of the select\n * @param int $selected The selected time zone (defaults to GMT)\n * @param boolean $short True to generate a \"short\" list with just timezone and current time\n * @return string\n */\nfunction build_timezone_select($name, $selected=0, $short=false)\n{\n\tglobal $mybb, $lang, $templates;\n\n\t$timezones = get_supported_timezones();\n\n\t$selected = str_replace(\"+\", \"\", $selected);\n\tforeach($timezones as $timezone => $label)\n\t{\n\t\t$selected_add = \"\";\n\t\tif($selected == $timezone)\n\t\t{\n\t\t\t$selected_add = \" selected=\\\"selected\\\"\";\n\t\t}\n\t\tif($short == true)\n\t\t{\n\t\t\t$label = '';\n\t\t\tif($timezone != 0)\n\t\t\t{\n\t\t\t\t$label = $timezone;\n\t\t\t\tif($timezone > 0)\n\t\t\t\t{\n\t\t\t\t\t$label = \"+{$label}\";\n\t\t\t\t}\n\t\t\t\tif(strpos($timezone, \".\") !== false)\n\t\t\t\t{\n\t\t\t\t\t$label = str_replace(\".\", \":\", $label);\n\t\t\t\t\t$label = str_replace(\":5\", \":30\", $label);\n\t\t\t\t\t$label = str_replace(\":75\", \":45\", $label);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$label .= \":00\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$time_in_zone = my_date($mybb->settings['timeformat'], TIME_NOW, $timezone);\n\t\t\t$label = $lang->sprintf($lang->timezone_gmt_short, $label.\" \", $time_in_zone);\n\t\t}\n\n\t\teval(\"\\$timezone_option .= \\\"\".$templates->get(\"usercp_options_timezone_option\").\"\\\";\");\n\t}\n\n\teval(\"\\$select = \\\"\".$templates->get(\"usercp_options_timezone\").\"\\\";\");\n\treturn $select;\n}\n\n/**\n * Fetch the contents of a remote file.\n *\n * @param string $url The URL of the remote file\n * @param array $post_data The array of post data\n * @param int $max_redirects Number of maximum redirects\n * @return string|bool The remote file contents. False on failure\n */\nfunction fetch_remote_file($url, $post_data=array(), $max_redirects=20)\n{\n\tglobal $mybb, $config;\n\n\t$url_components = @parse_url($url);\n\n\tif(\n\t\t!$url_components ||\n\t\tempty($url_components['host']) ||\n\t\t(!empty($url_components['scheme']) && !in_array($url_components['scheme'], array('http', 'https'))) ||\n\t\t(!empty($url_components['port']) && !in_array($url_components['port'], array(80, 8080, 443))) ||\n\t\t(!empty($config['disallowed_remote_hosts']) && in_array($url_components['host'], $config['disallowed_remote_hosts']))\n\t)\n\t{\n\t\treturn false;\n\t}\n\n\tif(!empty($config['disallowed_remote_addresses']))\n\t{\n\t\t$addresses = gethostbynamel($url_components['host']);\n\t\tif($addresses)\n\t\t{\n\t\t\tforeach($config['disallowed_remote_addresses'] as $disallowed_address)\n\t\t\t{\n\t\t\t\t$ip_range = fetch_ip_range($disallowed_address);\n\t\t\t\tforeach($addresses as $address)\n\t\t\t\t{\n\t\t\t\t\t$packed_address = my_inet_pton($address);\n\n\t\t\t\t\tif(is_array($ip_range))\n\t\t\t\t\t{\n\t\t\t\t\t\tif(strcmp($ip_range[0], $packed_address) <= 0 && strcmp($ip_range[1], $packed_address) >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telseif($address == $disallowed_address)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$post_body = '';\n\tif(!empty($post_data))\n\t{\n\t\tforeach($post_data as $key => $val)\n\t\t{\n\t\t\t$post_body .= '&'.urlencode($key).'='.urlencode($val);\n\t\t}\n\t\t$post_body = ltrim($post_body, '&');\n\t}\n\n\tif(function_exists(\"curl_init\"))\n\t{\n\t\t$can_followlocation = @ini_get('open_basedir') === '' && !$mybb->safemode;\n\n\t\t$request_header = $max_redirects != 0 && !$can_followlocation;\n\n\t\t$ch = curl_init();\n\t\tcurl_setopt($ch, CURLOPT_URL, $url);\n\t\tcurl_setopt($ch, CURLOPT_HEADER, $request_header);\n\t\tcurl_setopt($ch, CURLOPT_TIMEOUT, 10);\n\t\tcurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n\t\tcurl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n\n\t\tif($max_redirects != 0 && $can_followlocation)\n\t\t{\n\t\t\tcurl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);\n\t\t\tcurl_setopt($ch, CURLOPT_MAXREDIRS, $max_redirects);\n\t\t}\n\n\t\tif(!empty($post_body))\n\t\t{\n\t\t\tcurl_setopt($ch, CURLOPT_POST, 1);\n\t\t\tcurl_setopt($ch, CURLOPT_POSTFIELDS, $post_body);\n\t\t}\n\n\t\t$response = curl_exec($ch);\n\n\t\tif($request_header)\n\t\t{\n\t\t\t$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n\t\t\t$header = substr($response, 0, $header_size);\n\t\t\t$body = substr($response, $header_size);\n\n\t\t\tif(in_array(curl_getinfo($ch, CURLINFO_HTTP_CODE), array(301, 302)))\n\t\t\t{\n\t\t\t\tpreg_match('/Location:(.*?)(?:\\n|$)/', $header, $matches);\n\n\t\t\t\tif($matches)\n\t\t\t\t{\n\t\t\t\t\t$data = fetch_remote_file(trim(array_pop($matches)), $post_data, --$max_redirects);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$data = $body;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$data = $response;\n\t\t}\n\n\t\tcurl_close($ch);\n\t\treturn $data;\n\t}\n\telse if(function_exists(\"fsockopen\"))\n\t{\n\t\tif(!isset($url_components['port']))\n\t\t{\n\t\t\t$url_components['port'] = 80;\n\t\t}\n\t\tif(!isset($url_components['path']))\n\t\t{\n\t\t\t$url_components['path'] = \"/\";\n\t\t}\n\t\tif(isset($url_components['query']))\n\t\t{\n\t\t\t$url_components['path'] .= \"?{$url_components['query']}\";\n\t\t}\n\n\t\t$scheme = '';\n\n\t\tif($url_components['scheme'] == 'https')\n\t\t{\n\t\t\t$scheme = 'ssl://';\n\t\t\tif($url_components['port'] == 80)\n\t\t\t{\n\t\t\t\t$url_components['port'] = 443;\n\t\t\t}\n\t\t}\n\n\t\t$fp = @fsockopen($scheme.$url_components['host'], $url_components['port'], $error_no, $error, 10);\n\t\t@stream_set_timeout($fp, 10);\n\t\tif(!$fp)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t$headers = array();\n\t\tif(!empty($post_body))\n\t\t{\n\t\t\t$headers[] = \"POST {$url_components['path']} HTTP/1.0\";\n\t\t\t$headers[] = \"Content-Length: \".strlen($post_body);\n\t\t\t$headers[] = \"Content-Type: application/x-www-form-urlencoded\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$headers[] = \"GET {$url_components['path']} HTTP/1.0\";\n\t\t}\n\n\t\t$headers[] = \"Host: {$url_components['host']}\";\n\t\t$headers[] = \"Connection: Close\";\n\t\t$headers[] = '';\n\n\t\tif(!empty($post_body))\n\t\t{\n\t\t\t$headers[] = $post_body;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// If we have no post body, we need to add an empty element to make sure we've got \\r\\n\\r\\n before the (non-existent) body starts\n\t\t\t$headers[] = '';\n\t\t}\n\n\t\t$headers = implode(\"\\r\\n\", $headers);\n\t\tif(!@fwrite($fp, $headers))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = null;\n\n\t\twhile(!feof($fp))\n\t\t{\n\t\t\t$data .= fgets($fp, 12800);\n\t\t}\n\t\tfclose($fp);\n\n\t\t$data = explode(\"\\r\\n\\r\\n\", $data, 2);\n\n\t\t$header = $data[0];\n\t\t$status_line = current(explode(\"\\n\\n\", $header, 1));\n\t\t$body = $data[1];\n\n\t\tif($max_redirects != 0 && (strstr($status_line, ' 301 ') || strstr($status_line, ' 302 ')))\n\t\t{\n\t\t\tpreg_match('/Location:(.*?)(?:\\n|$)/', $header, $matches);\n\n\t\t\tif($matches)\n\t\t\t{\n\t\t\t\t$data = fetch_remote_file(trim(array_pop($matches)), $post_data, --$max_redirects);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$data = $body;\n\t\t}\n\n\t\treturn $data;\n\t}\n\telse if(empty($post_data))\n\t{\n\t\treturn @implode(\"\", @file($url));\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Checks if a particular user is a super administrator.\n *\n * @param int $uid The user ID to check against the list of super admins\n * @return boolean True if a super admin, false if not\n */\nfunction is_super_admin($uid)\n{\n\tstatic $super_admins;\n\n\tif(!isset($super_admins))\n\t{\n\t\tglobal $mybb;\n\t\t$super_admins = str_replace(\" \", \"\", $mybb->config['super_admins']);\n\t}\n\n\tif(my_strpos(\",{$super_admins},\", \",{$uid},\") === false)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\n/**\n * Checks if a user is a member of a particular group\n * Originates from frostschutz's PluginLibrary\n * github.com/frostschutz\n *\n * @param array|int|string A selection of groups (as array or comma seperated) to check or -1 for any group\n * @param bool|array|int False assumes the current user. Otherwise an user array or an id can be passed\n * @return array Array of groups specified in the first param to which the user belongs\n */\nfunction is_member($groups, $user = false)\n{\n\tglobal $mybb;\n\n\tif(empty($groups))\n\t{\n\t\treturn array();\n\t}\n\n\tif($user == false)\n\t{\n\t\t$user = $mybb->user;\n\t}\n\telse if(!is_array($user))\n\t{\n\t\t// Assume it's a UID\n\t\t$user = get_user($user);\n\t}\n\n\t$memberships = array_map('intval', explode(',', $user['additionalgroups']));\n\t$memberships[] = $user['usergroup'];\n\n\tif(!is_array($groups))\n\t{\n\t\tif((int)$groups == -1)\n\t\t{\n\t\t\treturn $memberships;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_string($groups))\n\t\t\t{\n\t\t\t\t$groups = explode(',', $groups);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$groups = (array)$groups;\n\t\t\t}\n\t\t}\n\t}\n\n\t$groups = array_filter(array_map('intval', $groups));\n\n\treturn array_intersect($groups, $memberships);\n}\n\n/**\n * Split a string based on the specified delimeter, ignoring said delimeter in escaped strings.\n * Ex: the \"quick brown fox\" jumped, could return 1 => the, 2 => quick brown fox, 3 => jumped\n *\n * @param string $delimeter The delimeter to split by\n * @param string $string The string to split\n * @param string $escape The escape character or string if we have one.\n * @return array Array of split string\n */\nfunction escaped_explode($delimeter, $string, $escape=\"\")\n{\n\t$strings = array();\n\t$original = $string;\n\t$in_escape = false;\n\tif($escape)\n\t{\n\t\tif(is_array($escape))\n\t\t{\n\t\t\tfunction escaped_explode_escape($string)\n\t\t\t{\n\t\t\t\treturn preg_quote($string, \"#\");\n\t\t\t}\n\t\t\t$escape_preg = \"(\".implode(\"|\", array_map(\"escaped_explode_escape\", $escape)).\")\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$escape_preg = preg_quote($escape, \"#\");\n\t\t}\n\t\t$quoted_strings = preg_split(\"#(?<!\\\\\\){$escape_preg}#\", $string);\n\t}\n\telse\n\t{\n\t\t$quoted_strings = array($string);\n\t}\n\tforeach($quoted_strings as $string)\n\t{\n\t\tif($string != \"\")\n\t\t{\n\t\t\tif($in_escape)\n\t\t\t{\n\t\t\t\t$strings[] = trim($string);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$split_strings = explode($delimeter, $string);\n\t\t\t\tforeach($split_strings as $string)\n\t\t\t\t{\n\t\t\t\t\tif($string == \"\") continue;\n\t\t\t\t\t$strings[] = trim($string);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$in_escape = !$in_escape;\n\t}\n\tif(!count($strings))\n\t{\n\t\treturn $original;\n\t}\n\treturn $strings;\n}\n\n/**\n * DEPRECATED! Please use IPv6 compatible fetch_ip_range!\n * Fetch an IPv4 long formatted range for searching IPv4 IP addresses.\n *\n * @deprecated\n * @param string $ip The IP address to convert to a range based LONG\n * @return string|array If a full IP address is provided, the ip2long equivalent, otherwise an array of the upper & lower extremities of the IP\n */\nfunction fetch_longipv4_range($ip)\n{\n\t$ip_bits = explode(\".\", $ip);\n\t$ip_string1 = $ip_string2 = \"\";\n\n\tif($ip == \"*\")\n\t{\n\t\treturn array(ip2long('0.0.0.0'), ip2long('255.255.255.255'));\n\t}\n\n\tif(strpos($ip, \".*\") === false)\n\t{\n\t\t$ip = str_replace(\"*\", \"\", $ip);\n\t\tif(count($ip_bits) == 4)\n\t\t{\n\t\t\treturn ip2long($ip);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn array(ip2long($ip.\".0\"), ip2long($ip.\".255\"));\n\t\t}\n\t}\n\t// Wildcard based IP provided\n\telse\n\t{\n\t\t$sep = \"\";\n\t\tforeach($ip_bits as $piece)\n\t\t{\n\t\t\tif($piece == \"*\")\n\t\t\t{\n\t\t\t\t$ip_string1 .= $sep.\"0\";\n\t\t\t\t$ip_string2 .= $sep.\"255\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ip_string1 .= $sep.$piece;\n\t\t\t\t$ip_string2 .= $sep.$piece;\n\t\t\t}\n\t\t\t$sep = \".\";\n\t\t}\n\t\treturn array(ip2long($ip_string1), ip2long($ip_string2));\n\t}\n}\n\n/**\n * Fetch a list of ban times for a user account.\n *\n * @return array Array of ban times\n */\nfunction fetch_ban_times()\n{\n\tglobal $plugins, $lang;\n\n\t// Days-Months-Years\n\t$ban_times = array(\n\t\t\"1-0-0\" => \"1 {$lang->day}\",\n\t\t\"2-0-0\" => \"2 {$lang->days}\",\n\t\t\"3-0-0\" => \"3 {$lang->days}\",\n\t\t\"4-0-0\" => \"4 {$lang->days}\",\n\t\t\"5-0-0\" => \"5 {$lang->days}\",\n\t\t\"6-0-0\" => \"6 {$lang->days}\",\n\t\t\"7-0-0\" => \"1 {$lang->week}\",\n\t\t\"14-0-0\" => \"2 {$lang->weeks}\",\n\t\t\"21-0-0\" => \"3 {$lang->weeks}\",\n\t\t\"0-1-0\" => \"1 {$lang->month}\",\n\t\t\"0-2-0\" => \"2 {$lang->months}\",\n\t\t\"0-3-0\" => \"3 {$lang->months}\",\n\t\t\"0-4-0\" => \"4 {$lang->months}\",\n\t\t\"0-5-0\" => \"5 {$lang->months}\",\n\t\t\"0-6-0\" => \"6 {$lang->months}\",\n\t\t\"0-0-1\" => \"1 {$lang->year}\",\n\t\t\"0-0-2\" => \"2 {$lang->years}\"\n\t);\n\n\t$ban_times = $plugins->run_hooks(\"functions_fetch_ban_times\", $ban_times);\n\n\t$ban_times['---'] = $lang->permanent;\n\treturn $ban_times;\n}\n\n/**\n * Format a ban length in to a UNIX timestamp.\n *\n * @param string $date The ban length string\n * @param int $stamp The optional UNIX timestamp, if 0, current time is used.\n * @return int The UNIX timestamp when the ban will be lifted\n */\nfunction ban_date2timestamp($date, $stamp=0)\n{\n\tif($stamp == 0)\n\t{\n\t\t$stamp = TIME_NOW;\n\t}\n\t$d = explode('-', $date);\n\t$nowdate = date(\"H-j-n-Y\", $stamp);\n\t$n = explode('-', $nowdate);\n\t$n[1] += $d[0];\n\t$n[2] += $d[1];\n\t$n[3] += $d[2];\n\treturn mktime(date(\"G\", $stamp), date(\"i\", $stamp), 0, $n[2], $n[1], $n[3]);\n}\n\n/**\n * Expire old warnings in the database.\n *\n * @return bool\n */\nfunction expire_warnings()\n{\n\tglobal $warningshandler;\n\n\tif(!is_object($warningshandler))\n\t{\n\t\trequire_once MYBB_ROOT.'inc/datahandlers/warnings.php';\n\t\t$warningshandler = new WarningsHandler('update');\n\t}\n\n\treturn $warningshandler->expire_warnings();\n}\n\n/**\n * Custom chmod function to fix problems with hosts who's server configurations screw up umasks\n *\n * @param string $file The file to chmod\n * @param string $mode The mode to chmod(i.e. 0666)\n * @return bool\n */\nfunction my_chmod($file, $mode)\n{\n\t// Passing $mode as an octal number causes strlen and substr to return incorrect values. Instead pass as a string\n\tif(substr($mode, 0, 1) != '0' || strlen($mode) !== 4)\n\t{\n\t\treturn false;\n\t}\n\t$old_umask = umask(0);\n\n\t// We convert the octal string to a decimal number because passing a octal string doesn't work with chmod\n\t// and type casting subsequently removes the prepended 0 which is needed for octal numbers\n\t$result = chmod($file, octdec($mode));\n\tumask($old_umask);\n\treturn $result;\n}\n\n/**\n * Custom rmdir function to loop through an entire directory and delete all files/folders within\n *\n * @param string $path The path to the directory\n * @param array $ignore Any files you wish to ignore (optional)\n * @return bool\n */\nfunction my_rmdir_recursive($path, $ignore=array())\n{\n\tglobal $orig_dir;\n\n\tif(!isset($orig_dir))\n\t{\n\t\t$orig_dir = $path;\n\t}\n\n\tif(@is_dir($path) && !@is_link($path))\n\t{\n\t\tif($dh = @opendir($path))\n\t\t{\n\t\t\twhile(($file = @readdir($dh)) !== false)\n\t\t\t{\n\t\t\t\tif($file == '.' || $file == '..' || $file == '.svn' || in_array($path.'/'.$file, $ignore) || !my_rmdir_recursive($path.'/'.$file))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t   @closedir($dh);\n\t\t}\n\n\t\t// Are we done? Don't delete the main folder too and return true\n\t\tif($path == $orig_dir)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn @rmdir($path);\n\t}\n\n\treturn @unlink($path);\n}\n\n/**\n * Counts the number of subforums in a array([pid][disporder][fid]) starting from the pid\n *\n * @param array $array The array of forums\n * @return integer The number of sub forums\n */\nfunction subforums_count($array)\n{\n\t$count = 0;\n\tforeach($array as $array2)\n\t{\n\t\t$count += count($array2);\n\t}\n\n\treturn $count;\n}\n\n/**\n * DEPRECATED! Please use IPv6 compatible my_inet_pton!\n * Fix for PHP's ip2long to guarantee a 32-bit signed integer value is produced (this is aimed\n * at 64-bit versions of PHP)\n *\n * @deprecated\n * @param string $ip The IP to convert\n * @return integer IP in 32-bit signed format\n */\nfunction my_ip2long($ip)\n{\n\t$ip_long = ip2long($ip);\n\n\tif(!$ip_long)\n\t{\n\t\t$ip_long = sprintf(\"%u\", ip2long($ip));\n\n\t\tif(!$ip_long)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif($ip_long >= 2147483648) // Won't occur on 32-bit PHP\n\t{\n\t\t$ip_long -= 4294967296;\n\t}\n\n\treturn $ip_long;\n}\n\n/**\n * DEPRECATED! Please use IPv6 compatible my_inet_ntop!\n * As above, fix for PHP's long2ip on 64-bit versions\n *\n * @deprecated\n * @param integer $long The IP to convert (will accept 64-bit IPs as well)\n * @return string IP in IPv4 format\n */\nfunction my_long2ip($long)\n{\n\t// On 64-bit machines is_int will return true. On 32-bit it will return false\n\tif($long < 0 && is_int(2147483648))\n\t{\n\t\t// We have a 64-bit system\n\t\t$long += 4294967296;\n\t}\n\treturn long2ip($long);\n}\n\n/**\n * Converts a human readable IP address to its packed in_addr representation\n *\n * @param string $ip The IP to convert\n * @return string IP in 32bit or 128bit binary format\n */\nfunction my_inet_pton($ip)\n{\n\tif(function_exists('inet_pton'))\n\t{\n\t\treturn @inet_pton($ip);\n\t}\n\telse\n\t{\n\t\t/**\n\t\t * Replace inet_pton()\n\t\t *\n\t\t * @category    PHP\n\t\t * @package     PHP_Compat\n\t\t * @license     LGPL - http://www.gnu.org/licenses/lgpl.html\n\t\t * @copyright   2004-2007 Aidan Lister <aidan@php.net>, Arpad Ray <arpad@php.net>\n\t\t * @link        http://php.net/inet_pton\n\t\t * @author      Arpad Ray <arpad@php.net>\n\t\t * @version     $Revision: 269597 $\n\t\t */\n\t\t$r = ip2long($ip);\n\t\tif($r !== false && $r != -1)\n\t\t{\n\t\t\treturn pack('N', $r);\n\t\t}\n\n\t\t$delim_count = substr_count($ip, ':');\n\t\tif($delim_count < 1 || $delim_count > 7)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$r = explode(':', $ip);\n\t\t$rcount = count($r);\n\t\tif(($doub = array_search('', $r, 1)) !== false)\n\t\t{\n\t\t\t$length = (!$doub || $doub == $rcount - 1 ? 2 : 1);\n\t\t\tarray_splice($r, $doub, $length, array_fill(0, 8 + $length - $rcount, 0));\n\t\t}\n\n\t\t$r = array_map('hexdec', $r);\n\t\tarray_unshift($r, 'n*');\n\t\t$r = call_user_func_array('pack', $r);\n\n\t\treturn $r;\n\t}\n}\n\n/**\n * Converts a packed internet address to a human readable representation\n *\n * @param string $ip IP in 32bit or 128bit binary format\n * @return string IP in human readable format\n */\nfunction my_inet_ntop($ip)\n{\n\tif(function_exists('inet_ntop'))\n\t{\n\t\treturn @inet_ntop($ip);\n\t}\n\telse\n\t{\n\t\t/**\n\t\t * Replace inet_ntop()\n\t\t *\n\t\t * @category    PHP\n\t\t * @package     PHP_Compat\n\t\t * @license     LGPL - http://www.gnu.org/licenses/lgpl.html\n\t\t * @copyright   2004-2007 Aidan Lister <aidan@php.net>, Arpad Ray <arpad@php.net>\n\t\t * @link        http://php.net/inet_ntop\n\t\t * @author      Arpad Ray <arpad@php.net>\n\t\t * @version     $Revision: 269597 $\n\t\t */\n\t\tswitch(strlen($ip))\n\t\t{\n\t\t\tcase 4:\n\t\t\t\tlist(,$r) = unpack('N', $ip);\n\t\t\t\treturn long2ip($r);\n\t\t\tcase 16:\n\t\t\t\t$r = substr(chunk_split(bin2hex($ip), 4, ':'), 0, -1);\n\t\t\t\t$r = preg_replace(\n\t\t\t\t\tarray('/(?::?\\b0+\\b:?){2,}/', '/\\b0+([^0])/e'),\n\t\t\t\t\tarray('::', '(int)\"$1\"?\"$1\":\"0$1\"'),\n\t\t\t\t\t$r);\n\t\t\t\treturn $r;\n\t\t}\n\t\treturn false;\n\t}\n}\n\n/**\n * Fetch an binary formatted range for searching IPv4 and IPv6 IP addresses.\n *\n * @param string $ipaddress The IP address to convert to a range\n * @return string|array|bool If a full IP address is provided, the in_addr representation, otherwise an array of the upper & lower extremities of the IP. False on failure\n */\nfunction fetch_ip_range($ipaddress)\n{\n\t// Wildcard\n\tif(strpos($ipaddress, '*') !== false)\n\t{\n\t\tif(strpos($ipaddress, ':') !== false)\n\t\t{\n\t\t\t// IPv6\n\t\t\t$upper = str_replace('*', 'ffff', $ipaddress);\n\t\t\t$lower = str_replace('*', '0', $ipaddress);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// IPv4\n\t\t\t$ip_bits = count(explode('.', $ipaddress));\n\t\t\tif($ip_bits < 4)\n\t\t\t{\n\t\t\t\t// Support for 127.0.*\n\t\t\t\t$replacement = str_repeat('.*', 4-$ip_bits);\n\t\t\t\t$ipaddress = substr_replace($ipaddress, $replacement, strrpos($ipaddress, '*')+1, 0);\n\t\t\t}\n\t\t\t$upper = str_replace('*', '255', $ipaddress);\n\t\t\t$lower = str_replace('*', '0', $ipaddress);\n\t\t}\n\t\t$upper = my_inet_pton($upper);\n\t\t$lower = my_inet_pton($lower);\n\t\tif($upper === false || $lower === false)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\treturn array($lower, $upper);\n\t}\n\t// CIDR notation\n\telseif(strpos($ipaddress, '/') !== false)\n\t{\n\t\t$ipaddress = explode('/', $ipaddress);\n\t\t$ip_address = $ipaddress[0];\n\t\t$ip_range = (int)$ipaddress[1];\n\n\t\tif(empty($ip_address) || empty($ip_range))\n\t\t{\n\t\t\t// Invalid input\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ip_address = my_inet_pton($ip_address);\n\n\t\t\tif(!$ip_address)\n\t\t\t{\n\t\t\t\t// Invalid IP address\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Taken from: https://github.com/NewEraCracker/php_work/blob/master/ipRangeCalculate.php\n\t\t * Author: NewEraCracker\n\t\t * License: Public Domain\n\t\t */\n\n\t\t// Pack IP, Set some vars\n\t\t$ip_pack = $ip_address;\n\t\t$ip_pack_size = strlen($ip_pack);\n\t\t$ip_bits_size = $ip_pack_size*8;\n\n\t\t// IP bits (lots of 0's and 1's)\n\t\t$ip_bits = '';\n\t\tfor($i = 0; $i < $ip_pack_size; $i = $i+1)\n\t\t{\n\t\t\t$bit = decbin(ord($ip_pack[$i]));\n\t\t\t$bit = str_pad($bit, 8, '0', STR_PAD_LEFT);\n\t\t\t$ip_bits .= $bit;\n\t\t}\n\n\t\t// Significative bits (from the ip range)\n\t\t$ip_bits = substr($ip_bits, 0, $ip_range);\n\n\t\t// Some calculations\n\t\t$ip_lower_bits = str_pad($ip_bits, $ip_bits_size, '0', STR_PAD_RIGHT);\n\t\t$ip_higher_bits = str_pad($ip_bits, $ip_bits_size, '1', STR_PAD_RIGHT);\n\n\t\t// Lower IP\n\t\t$ip_lower_pack = '';\n\t\tfor($i=0; $i < $ip_bits_size; $i=$i+8)\n\t\t{\n\t\t\t$chr = substr($ip_lower_bits, $i, 8);\n\t\t\t$chr = chr(bindec($chr));\n\t\t\t$ip_lower_pack .= $chr;\n\t\t}\n\n\t\t// Higher IP\n\t\t$ip_higher_pack = '';\n\t\tfor($i=0; $i < $ip_bits_size; $i=$i+8)\n\t\t{\n\t\t\t$chr = substr($ip_higher_bits, $i, 8);\n\t\t\t$chr = chr( bindec($chr) );\n\t\t\t$ip_higher_pack .= $chr;\n\t\t}\n\n\t\treturn array($ip_lower_pack, $ip_higher_pack);\n\t}\n\t// Just on IP address\n\telse\n\t{\n\t\treturn my_inet_pton($ipaddress);\n\t}\n}\n\n/**\n * Time how long it takes for a particular piece of code to run. Place calls above & below the block of code.\n *\n * @return float The time taken\n */\nfunction get_execution_time()\n{\n\tstatic $time_start;\n\n\t$time = microtime(true);\n\n\n\t// Just starting timer, init and return\n\tif(!$time_start)\n\t{\n\t\t$time_start = $time;\n\t\treturn;\n\t}\n\t// Timer has run, return execution time\n\telse\n\t{\n\t\t$total = $time-$time_start;\n\t\tif($total < 0) $total = 0;\n\t\t$time_start = 0;\n\t\treturn $total;\n\t}\n}\n\n/**\n * Processes a checksum list on MyBB files and returns a result set\n *\n * @param string $path The base path\n * @param int $count The count of files\n * @return array The bad files\n */\nfunction verify_files($path=MYBB_ROOT, $count=0)\n{\n\tglobal $mybb, $checksums, $bad_verify_files;\n\n\t// We don't need to check these types of files\n\t$ignore = array(\".\", \"..\", \".svn\", \"config.php\", \"settings.php\", \"Thumb.db\", \"config.default.php\", \"lock\", \"htaccess.txt\", \"htaccess-nginx.txt\", \"logo.gif\", \"logo.png\");\n\t$ignore_ext = array(\"attach\");\n\n\tif(substr($path, -1, 1) == \"/\")\n\t{\n\t\t$path = substr($path, 0, -1);\n\t}\n\n\tif(!is_array($bad_verify_files))\n\t{\n\t\t$bad_verify_files = array();\n\t}\n\n\t// Make sure that we're in a directory and it's not a symbolic link\n\tif(@is_dir($path) && !@is_link($path))\n\t{\n\t\tif($dh = @opendir($path))\n\t\t{\n\t\t\t// Loop through all the files/directories in this directory\n\t\t\twhile(($file = @readdir($dh)) !== false)\n\t\t\t{\n\t\t\t\tif(in_array($file, $ignore) || in_array(get_extension($file), $ignore_ext))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse through the directory tree\n\t\t\t\tif(is_dir($path.\"/\".$file))\n\t\t\t\t{\n\t\t\t\t\tverify_files($path.\"/\".$file, ($count+1));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// We only need the last part of the path (from the MyBB directory to the file. i.e. inc/functions.php)\n\t\t\t\t$file_path = \".\".str_replace(substr(MYBB_ROOT, 0, -1), \"\", $path).\"/\".$file;\n\n\t\t\t\t// Does this file even exist in our official list? Perhaps it's a plugin\n\t\t\t\tif(array_key_exists($file_path, $checksums))\n\t\t\t\t{\n\t\t\t\t\t$filename = $path.\"/\".$file;\n\t\t\t\t\t$handle = fopen($filename, \"rb\");\n\t\t\t\t\t$contents = '';\n\t\t\t\t\twhile(!feof($handle))\n\t\t\t\t\t{\n\t\t\t\t\t\t$contents .= fread($handle, 8192);\n\t\t\t\t\t}\n\t\t\t\t\tfclose($handle);\n\n\t\t\t\t\t$md5 = md5($contents);\n\n\t\t\t\t\t// Does it match any of our hashes (unix/windows new lines taken into consideration with the hashes)\n\t\t\t\t\tif(!in_array($md5, $checksums[$file_path]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$bad_verify_files[] = array(\"status\" => \"changed\", \"path\" => $file_path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($checksums[$file_path]);\n\t\t\t}\n\t\t   @closedir($dh);\n\t\t}\n\t}\n\n\tif($count == 0)\n\t{\n\t\tif(!empty($checksums))\n\t\t{\n\t\t\tforeach($checksums as $file_path => $hashes)\n\t\t\t{\n\t\t\t\tif(in_array(basename($file_path), $ignore))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$bad_verify_files[] = array(\"status\" => \"missing\", \"path\" => $file_path);\n\t\t\t}\n\t\t}\n\t}\n\n\t// uh oh\n\tif($count == 0)\n\t{\n\t\treturn $bad_verify_files;\n\t}\n}\n\n/**\n * Returns a signed value equal to an integer\n *\n * @param int $int The integer\n * @return string The signed equivalent\n */\nfunction signed($int)\n{\n\tif($int < 0)\n\t{\n\t\treturn \"$int\";\n\t}\n\telse\n\t{\n\t\treturn \"+$int\";\n\t}\n}\n\n/**\n * Returns a securely generated seed\n *\n * @return string A secure binary seed\n */\nfunction secure_binary_seed_rng($bytes)\n{\n\t$output = null;\n\n\tif(version_compare(PHP_VERSION, '7.0', '>='))\n\t{\n\t\ttry\n\t\t{\n\t\t\t$output = random_bytes($bytes);\n\t\t} catch (Exception $e) {\n\t\t}\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(@is_readable('/dev/urandom') && ($handle = @fopen('/dev/urandom', 'rb')))\n\t\t{\n\t\t\t$output = @fread($handle, $bytes);\n\t\t\t@fclose($handle);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(function_exists('mcrypt_create_iv'))\n\t\t{\n\t\t\tif (DIRECTORY_SEPARATOR == '/')\n\t\t\t{\n\t\t\t\t$source = MCRYPT_DEV_URANDOM;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$source = MCRYPT_RAND;\n\t\t\t}\n\n\t\t\t$output = @mcrypt_create_iv($bytes, $source);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(function_exists('openssl_random_pseudo_bytes'))\n\t\t{\n\t\t\t// PHP <5.3.4 had a bug which makes that function unusable on Windows\n\t\t\tif ((DIRECTORY_SEPARATOR == '/') || version_compare(PHP_VERSION, '5.3.4', '>='))\n\t\t\t{\n\t\t\t\t$output = openssl_random_pseudo_bytes($bytes, $crypto_strong);\n\t\t\t\tif ($crypto_strong == false)\n\t\t\t\t{\n\t\t\t\t\t$output = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(class_exists('COM'))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$CAPI_Util = new COM('CAPICOM.Utilities.1');\n\t\t\t\tif(is_callable(array($CAPI_Util, 'GetRandom')))\n\t\t\t\t{\n\t\t\t\t\t$output = $CAPI_Util->GetRandom($bytes, 0);\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\t// Close to what PHP basically uses internally to seed, but not quite.\n\t\t$unique_state = microtime().@getmypid();\n\n\t\t$rounds = ceil($bytes / 16);\n\n\t\tfor($i = 0; $i < $rounds; $i++)\n\t\t{\n\t\t\t$unique_state = md5(microtime().$unique_state);\n\t\t\t$output .= md5($unique_state);\n\t\t}\n\n\t\t$output = substr($output, 0, ($bytes * 2));\n\n\t\t$output = pack('H*', $output);\n\n\t\treturn $output;\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n}\n\n/**\n * Returns a securely generated seed integer\n *\n * @return int An integer equivalent of a secure hexadecimal seed\n */\nfunction secure_seed_rng()\n{\n\t$bytes = PHP_INT_SIZE;\n\n\tdo\n\t{\n\n\t\t$output = secure_binary_seed_rng($bytes);\n\n\t\t// convert binary data to a decimal number\n\t\tif ($bytes == 4)\n\t\t{\n\t\t\t$elements = unpack('i', $output);\n\t\t\t$output = abs($elements[1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elements = unpack('N2', $output);\n\t\t\t$output = abs($elements[1] << 32 | $elements[2]);\n\t\t}\n\n\t} while($output > PHP_INT_MAX);\n\n\treturn $output;\n}\n\n/**\n * Generates a cryptographically secure random number.\n *\n * @param int $min Optional lowest value to be returned (default: 0)\n * @param int $max Optional highest value to be returned (default: PHP_INT_MAX)\n */\nfunction my_rand($min=0, $max=PHP_INT_MAX)\n{\n\t// backward compatibility\n\tif($min === null || $max === null || $max < $min)\n\t{\n\t\t$min = 0;\n\t\t$max = PHP_INT_MAX;\n\t}\n\n\tif(version_compare(PHP_VERSION, '7.0', '>='))\n\t{\n\t\ttry\n\t\t{\n\t\t\t$result = random_int($min, $max);\n\t\t} catch (Exception $e) {\n\t\t}\n\n\t\tif(isset($result))\n\t\t{\n\t\t\treturn $result;\n\t\t}\n\t}\n\n\t$seed = secure_seed_rng();\n\n\t$distance = $max - $min;\n\treturn $min + floor($distance * ($seed / PHP_INT_MAX) );\n}\n\n/**\n * More robust version of PHP's trim() function. It includes a list of UTF-8 blank characters\n * from http://kb.mozillazine.org/Network.IDN.blacklist_chars\n *\n * @param string $string The string to trim from\n * @param string $charlist Optional. The stripped characters can also be specified using the charlist parameter\n * @return string The trimmed string\n */\nfunction trim_blank_chrs($string, $charlist=\"\")\n{\n\t$hex_chrs = array(\n\t\t0x09 => 1, // \\x{0009}\n\t\t0x0A => 1, // \\x{000A}\n\t\t0x0B => 1, // \\x{000B}\n\t\t0x0D => 1, // \\x{000D}\n\t\t0x20 => 1, // \\x{0020}\n\t\t0xC2 => array(0x81 => 1, 0x8D => 1, 0x90 => 1, 0x9D => 1, 0xA0 => 1, 0xAD => 1), // \\x{0081}, \\x{008D}, \\x{0090}, \\x{009D}, \\x{00A0}, \\x{00AD}\n\t\t0xCC => array(0xB7 => 1, 0xB8 => 1), // \\x{0337}, \\x{0338}\n\t\t0xE1 => array(0x85 => array(0x9F => 1, 0xA0 => 1), 0x9A => array(0x80 => 1), 0xA0 => array(0x8E => 1)), // \\x{115F}, \\x{1160}, \\x{1680}, \\x{180E}\n\t\t0xE2 => array(0x80 => array(0x80 => 1, 0x81 => 1, 0x82 => 1, 0x83 => 1, 0x84 => 1, 0x85 => 1, 0x86 => 1, 0x87 => 1, 0x88 => 1, 0x89 => 1, 0x8A => 1, 0x8B => 1, 0x8C => 1, 0x8D => 1, 0x8E => 1, 0x8F => 1, // \\x{2000} - \\x{200F}\n\t\t\t0xA8 => 1, 0xA9 => 1, 0xAA => 1, 0xAB => 1, 0xAC => 1, 0xAD => 1, 0xAE => 1, 0xAF => 1), // \\x{2028} - \\x{202F}\n\t\t\t0x81 => array(0x9F => 1)), // \\x{205F}\n\t\t0xE3 => array(0x80 => array(0x80 => 1), // \\x{3000}\n\t\t\t0x85 => array(0xA4 => 1)), // \\x{3164}\n\t\t0xEF => array(0xBB => array(0xBF => 1), // \\x{FEFF}\n\t\t\t0xBE => array(0xA0 => 1), // \\x{FFA0}\n\t\t\t0xBF => array(0xB9 => 1, 0xBA => 1, 0xBB => 1)), // \\x{FFF9} - \\x{FFFB}\n\t);\n\n\t$hex_chrs_rev = array(\n\t\t0x09 => 1, // \\x{0009}\n\t\t0x0A => 1, // \\x{000A}\n\t\t0x0B => 1, // \\x{000B}\n\t\t0x0D => 1, // \\x{000D}\n\t\t0x20 => 1, // \\x{0020}\n\t\t0x81 => array(0xC2 => 1, 0x80 => array(0xE2 => 1)), // \\x{0081}, \\x{2001}\n\t\t0x8D => array(0xC2 => 1, 0x80 => array(0xE2 => 1)), // \\x{008D}, \\x{200D}\n\t\t0x90 => array(0xC2 => 1), // \\x{0090}\n\t\t0x9D => array(0xC2 => 1), // \\x{009D}\n\t\t0xA0 => array(0xC2 => 1, 0x85 => array(0xE1 => 1), 0x81 => array(0xE2 => 1), 0xBE => array(0xEF => 1)), // \\x{00A0}, \\x{1160}, \\x{2060}, \\x{FFA0}\n\t\t0xAD => array(0xC2 => 1, 0x80 => array(0xE2 => 1)), // \\x{00AD}, \\x{202D}\n\t\t0xB8 => array(0xCC => 1), // \\x{0338}\n\t\t0xB7 => array(0xCC => 1), // \\x{0337}\n\t\t0x9F => array(0x85 => array(0xE1 => 1), 0x81 => array(0xE2 => 1)), // \\x{115F}, \\x{205F}\n\t\t0x80 => array(0x9A => array(0xE1 => 1), 0x80 => array(0xE2 => 1, 0xE3 => 1)), // \\x{1680}, \\x{2000}, \\x{3000}\n\t\t0x8E => array(0xA0 => array(0xE1 => 1), 0x80 => array(0xE2 => 1)), // \\x{180E}, \\x{200E}\n\t\t0x82 => array(0x80 => array(0xE2 => 1)), // \\x{2002}\n\t\t0x83 => array(0x80 => array(0xE2 => 1)), // \\x{2003}\n\t\t0x84 => array(0x80 => array(0xE2 => 1)), // \\x{2004}\n\t\t0x85 => array(0x80 => array(0xE2 => 1)), // \\x{2005}\n\t\t0x86 => array(0x80 => array(0xE2 => 1)), // \\x{2006}\n\t\t0x87 => array(0x80 => array(0xE2 => 1)), // \\x{2007}\n\t\t0x88 => array(0x80 => array(0xE2 => 1)), // \\x{2008}\n\t\t0x89 => array(0x80 => array(0xE2 => 1)), // \\x{2009}\n\t\t0x8A => array(0x80 => array(0xE2 => 1)), // \\x{200A}\n\t\t0x8B => array(0x80 => array(0xE2 => 1)), // \\x{200B}\n\t\t0x8C => array(0x80 => array(0xE2 => 1)), // \\x{200C}\n\t\t0x8F => array(0x80 => array(0xE2 => 1)), // \\x{200F}\n\t\t0xA8 => array(0x80 => array(0xE2 => 1)), // \\x{2028}\n\t\t0xA9 => array(0x80 => array(0xE2 => 1)), // \\x{2029}\n\t\t0xAA => array(0x80 => array(0xE2 => 1)), // \\x{202A}\n\t\t0xAB => array(0x80 => array(0xE2 => 1)), // \\x{202B}\n\t\t0xAC => array(0x80 => array(0xE2 => 1)), // \\x{202C}\n\t\t0xAE => array(0x80 => array(0xE2 => 1)), // \\x{202E}\n\t\t0xAF => array(0x80 => array(0xE2 => 1)), // \\x{202F}\n\t\t0xA4 => array(0x85 => array(0xE3 => 1)), // \\x{3164}\n\t\t0xBF => array(0xBB => array(0xEF => 1)), // \\x{FEFF}\n\t\t0xB9 => array(0xBF => array(0xEF => 1)), // \\x{FFF9}\n\t\t0xBA => array(0xBF => array(0xEF => 1)), // \\x{FFFA}\n\t\t0xBB => array(0xBF => array(0xEF => 1)), // \\x{FFFB}\n\t);\n\n\t// Start from the beginning and work our way in\n\tdo\n\t{\n\t\t// Check to see if we have matched a first character in our utf-8 array\n\t\t$offset = match_sequence($string, $hex_chrs);\n\t\tif(!$offset)\n\t\t{\n\t\t\t// If not, then we must have a \"good\" character and we don't need to do anymore processing\n\t\t\tbreak;\n\t\t}\n\t\t$string = substr($string, $offset);\n\t}\n\twhile(++$i);\n\n\t// Start from the end and work our way in\n\t$string = strrev($string);\n\tdo\n\t{\n\t\t// Check to see if we have matched a first character in our utf-8 array\n\t\t$offset = match_sequence($string, $hex_chrs_rev);\n\t\tif(!$offset)\n\t\t{\n\t\t\t// If not, then we must have a \"good\" character and we don't need to do anymore processing\n\t\t\tbreak;\n\t\t}\n\t\t$string = substr($string, $offset);\n\t}\n\twhile(++$i);\n\t$string = strrev($string);\n\n\tif($charlist)\n\t{\n\t\t$string = trim($string, $charlist);\n\t}\n\telse\n\t{\n\t\t$string = trim($string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Match a sequence\n *\n * @param string $string The string to match from\n * @param array $array The array to match from\n * @param int $i Number in the string\n * @param int $n Number of matches\n * @return int The number matched\n */\nfunction match_sequence($string, $array, $i=0, $n=0)\n{\n\tif($string === \"\")\n\t{\n\t\treturn 0;\n\t}\n\n\t$ord = ord($string[$i]);\n\tif(array_key_exists($ord, $array))\n\t{\n\t\t$level = $array[$ord];\n\t\t++$n;\n\t\tif(is_array($level))\n\t\t{\n\t\t\t++$i;\n\t\t\treturn match_sequence($string, $level, $i, $n);\n\t\t}\n\t\treturn $n;\n\t}\n\n\treturn 0;\n}\n\n/**\n * Obtain the version of GD installed.\n *\n * @return float Version of GD\n */\nfunction gd_version()\n{\n\tstatic $gd_version;\n\n\tif($gd_version)\n\t{\n\t\treturn $gd_version;\n\t}\n\tif(!extension_loaded('gd'))\n\t{\n\t\treturn;\n\t}\n\n\tif(function_exists(\"gd_info\"))\n\t{\n\t\t$gd_info = gd_info();\n\t\tpreg_match('/\\d/', $gd_info['GD Version'], $gd);\n\t\t$gd_version = $gd[0];\n\t}\n\telse\n\t{\n\t\tob_start();\n\t\tphpinfo(8);\n\t\t$info = ob_get_contents();\n\t\tob_end_clean();\n\t\t$info = stristr($info, 'gd version');\n\t\tpreg_match('/\\d/', $info, $gd);\n\t\t$gd_version = $gd[0];\n\t}\n\n\treturn $gd_version;\n}\n\n/*\n * Validates an UTF-8 string.\n *\n * @param string $input The string to be checked\n * @param boolean $allow_mb4 Allow 4 byte UTF-8 characters?\n * @param boolean $return Return the cleaned string?\n * @return string|boolean Cleaned string or boolean\n */\nfunction validate_utf8_string($input, $allow_mb4=true, $return=true)\n{\n\t// Valid UTF-8 sequence?\n\tif(!preg_match('##u', $input))\n\t{\n\t\t$string = '';\n\t\t$len = strlen($input);\n\t\tfor($i = 0; $i < $len; $i++)\n\t\t{\n\t\t\t$c = ord($input[$i]);\n\t\t\tif($c > 128)\n\t\t\t{\n\t\t\t\tif($c > 247 || $c <= 191)\n\t\t\t\t{\n\t\t\t\t\tif($return)\n\t\t\t\t\t{\n\t\t\t\t\t\t$string .= '?';\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif($c > 239)\n\t\t\t\t{\n\t\t\t\t\t$bytes = 4;\n\t\t\t\t}\n\t\t\t\telseif($c > 223)\n\t\t\t\t{\n\t\t\t\t\t$bytes = 3;\n\t\t\t\t}\n\t\t\t\telseif($c > 191)\n\t\t\t\t{\n\t\t\t\t\t$bytes = 2;\n\t\t\t\t}\n\t\t\t\tif(($i + $bytes) > $len)\n\t\t\t\t{\n\t\t\t\t\tif($return)\n\t\t\t\t\t{\n\t\t\t\t\t\t$string .= '?';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$valid = true;\n\t\t\t\t$multibytes = $input[$i];\n\t\t\t\twhile($bytes > 1)\n\t\t\t\t{\n\t\t\t\t\t$i++;\n\t\t\t\t\t$b = ord($input[$i]);\n\t\t\t\t\tif($b < 128 || $b > 191)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($return)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$valid = false;\n\t\t\t\t\t\t\t$string .= '?';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$multibytes .= $input[$i];\n\t\t\t\t\t}\n\t\t\t\t\t$bytes--;\n\t\t\t\t}\n\t\t\t\tif($valid)\n\t\t\t\t{\n\t\t\t\t\t$string .= $multibytes;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$string .= $input[$i];\n\t\t\t}\n\t\t}\n\t\t$input = $string;\n\t}\n\tif($return)\n\t{\n\t\tif($allow_mb4)\n\t\t{\n\t\t\treturn $input;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn preg_replace(\"#[^\\\\x00-\\\\x7F][\\\\x80-\\\\xBF]{3,}#\", '?', $input);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif($allow_mb4)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn !preg_match(\"#[^\\\\x00-\\\\x7F][\\\\x80-\\\\xBF]{3,}#\", $input);\n\t\t}\n\t}\n}\n\n/**\n * Send a Private Message to a user.\n *\n * @param array $pm Array containing: 'subject', 'message', 'touid' and 'receivepms' (the latter should reflect the value found in the users table: receivepms and receivefrombuddy)\n * @param int $fromid Sender UID (0 if you want to use $mybb->user['uid'] or -1 to use MyBB Engine)\n * @param bool $admin_override Whether or not do override user defined options for receiving PMs\n * @return bool True if PM sent\n */\nfunction send_pm($pm, $fromid = 0, $admin_override=false)\n{\n\tglobal $lang, $mybb, $db, $session;\n\n\tif($mybb->settings['enablepms'] == 0)\n\t{\n\t\treturn false;\n\t}\n\n\tif(!is_array($pm))\n\t{\n\t\treturn false;\n\t}\n\n\tif(isset($pm['language']))\n\t{\n\t\tif($pm['language'] != $mybb->user['language'] && $lang->language_exists($pm['language']))\n\t\t{\n\t\t\t// Load user language\n\t\t\t$lang->set_language($pm['language']);\n\t\t\t$lang->load($pm['language_file']);\n\n\t\t\t$revert = true;\n\t\t}\n\n\t\tforeach(array('subject', 'message') as $key)\n\t\t{\n\t\t\tif(is_array($pm[$key]))\n\t\t\t{\n\t\t\t\t$lang_string = $lang->{$pm[$key][0]};\n\t\t\t\t$num_args = count($pm[$key]);\n\n\t\t\t\tfor($i = 1; $i < $num_args; $i++)\n\t\t\t\t{\n\t\t\t\t\t$lang_string = str_replace('{'.$i.'}', $pm[$key][$i], $lang_string);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$lang_string = $lang->{$pm[$key]};\n\t\t\t}\n\n\t\t\t$pm[$key] = $lang_string;\n\t\t}\n\n\t\tif(isset($revert))\n\t\t{\n\t\t\t// Revert language\n\t\t\t$lang->set_language($mybb->user['language']);\n\t\t\t$lang->load($pm['language_file']);\n\t\t}\n\t}\n\n\tif(!$pm['subject'] ||!$pm['message'] || !$pm['touid'] || (!$pm['receivepms'] && !$admin_override))\n\t{\n\t\treturn false;\n\t}\n\n\trequire_once MYBB_ROOT.\"inc/datahandlers/pm.php\";\n\n\t$pmhandler = new PMDataHandler();\n\n\t$subject = $pm['subject'];\n\t$message = $pm['message'];\n\t$toid = $pm['touid'];\n\n\t// Our recipients\n\tif(is_array($toid))\n\t{\n\t\t$recipients_to = $toid;\n\t}\n\telse\n\t{\n\t\t$recipients_to = array($toid);\n\t}\n\n\t$recipients_bcc = array();\n\n\t// Determine user ID\n\tif((int)$fromid == 0)\n\t{\n\t\t$fromid = (int)$mybb->user['uid'];\n\t}\n\telseif((int)$fromid < 0)\n\t{\n\t\t$fromid = 0;\n\t}\n\n\t// Build our final PM array\n\t$pm = array(\n\t\t\"subject\" => $subject,\n\t\t\"message\" => $message,\n\t\t\"icon\" => -1,\n\t\t\"fromid\" => $fromid,\n\t\t\"toid\" => $recipients_to,\n\t\t\"bccid\" => $recipients_bcc,\n\t\t\"do\" => '',\n\t\t\"pmid\" => ''\n\t);\n\n\tif(isset($session))\n\t{\n\t\t$pm['ipaddress'] = $session->packedip;\n\t}\n\n\t$pm['options'] = array(\n\t\t\"signature\" => 0,\n\t\t\"disablesmilies\" => 0,\n\t\t\"savecopy\" => 0,\n\t\t\"readreceipt\" => 0\n\t);\n\n\t$pm['saveasdraft'] = 0;\n\n\t// Admin override\n\t$pmhandler->admin_override = (int)$admin_override;\n\n\t$pmhandler->set_data($pm);\n\n\tif($pmhandler->validate_pm())\n\t{\n\t\t$pmhandler->insert_pm();\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Log a user spam block from StopForumSpam (or other spam service providers...)\n *\n * @param string $username The username that the user was using.\n * @param string $email    The email address the user was using.\n * @param string $ip_address The IP addres of the user.\n * @param array  $data     An array of extra data to go with the block (eg: confidence rating).\n * @return bool Whether the action was logged successfully.\n */\nfunction log_spam_block($username = '', $email = '', $ip_address = '', $data = array())\n{\n\tglobal $db, $session;\n\n\tif(!is_array($data))\n\t{\n\t\t$data = array($data);\n\t}\n\n\tif(!$ip_address)\n\t{\n\t\t$ip_address = get_ip();\n\t}\n\n\t$ip_address = my_inet_pton($ip_address);\n\n\t$insert_array = array(\n\t\t'username'  => $db->escape_string($username),\n\t\t'email'     => $db->escape_string($email),\n\t\t'ipaddress' => $db->escape_binary($ip_address),\n\t\t'dateline'  => (int)TIME_NOW,\n\t\t'data'      => $db->escape_string(@my_serialize($data)),\n\t);\n\n\treturn (bool)$db->insert_query('spamlog', $insert_array);\n}\n\n/**\n * Copy a file to the CDN.\n *\n * @param string $file_path     The path to the file to upload to the CDN.\n *\n * @param string $uploaded_path The path the file was uploaded to, reference parameter for when this may be needed.\n *\n * @return bool Whether the file was copied successfully.\n */\nfunction copy_file_to_cdn($file_path = '', &$uploaded_path = null)\n{\n\tglobal $mybb, $plugins;\n\n\t$success = false;\n\n\t$file_path = (string)$file_path;\n\n\t$real_file_path = realpath($file_path);\n\n\t$file_dir_path = dirname($real_file_path);\n\t$file_dir_path = str_replace(MYBB_ROOT, '', $file_dir_path);\n\t$file_dir_path = ltrim($file_dir_path, './\\\\');\n\n\t$file_name = basename($real_file_path);\n\n\tif(file_exists($file_path))\n\t{\n\t\tif($mybb->settings['usecdn'] && !empty($mybb->settings['cdnpath']))\n\t\t{\n\t\t\t$cdn_path = rtrim($mybb->settings['cdnpath'], '/\\\\');\n\n\t\t\tif(substr($file_dir_path, 0, my_strlen(MYBB_ROOT)) == MYBB_ROOT)\n\t\t\t{\n\t\t\t\t$file_dir_path = str_replace(MYBB_ROOT, '', $file_dir_path);\n\t\t\t}\n\n\t\t\t$cdn_upload_path = $cdn_path . DIRECTORY_SEPARATOR . $file_dir_path;\n\n\t\t\tif(!($dir_exists = is_dir($cdn_upload_path)))\n\t\t\t{\n\t\t\t\t$dir_exists = @mkdir($cdn_upload_path, 0777, true);\n\t\t\t}\n\n\t\t\tif($dir_exists)\n\t\t\t{\n\t\t\t\tif(($cdn_upload_path = realpath($cdn_upload_path)) !== false)\n\t\t\t\t{\n\t\t\t\t\t$success = @copy($file_path, $cdn_upload_path.DIRECTORY_SEPARATOR.$file_name);\n\n\t\t\t\t\tif($success)\n\t\t\t\t\t{\n\t\t\t\t\t\t$uploaded_path = $cdn_upload_path;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(is_object($plugins))\n\t\t{\n\t\t\t$hook_args = array(\n\t\t\t\t'file_path' => &$file_path,\n\t\t\t\t'real_file_path' => &$real_file_path,\n\t\t\t\t'file_name' => &$file_name,\n\t\t\t\t'uploaded_path' => &$uploaded_path,\n\t\t\t\t'success' => &$success,\n\t\t\t);\n\n\t\t\t$plugins->run_hooks('copy_file_to_cdn_end', $hook_args);\n\t\t}\n\t}\n\n\treturn $success;\n}\n\n/**\n * Validate an url\n *\n * @param string $url The url to validate.\n * @param bool $relative_path Whether or not the url could be a relative path.\n *\n * @return bool Whether this is a valid url.\n */\nfunction my_validate_url($url, $relative_path=false)\n{\n\tif($relative_path && my_substr($url, 0, 1) == '/' || preg_match('_^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$_iuS', $url))\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Strip html tags from string, also removes <script> and <style> contents.\n * \n * @param  string $string         String to stripe\n * @param  string $allowable_tags Allowed html tags\n * \n * @return string                 Striped string\n */\nfunction my_strip_tags($string, $allowable_tags = '')\n{\n\t$pattern = array(\n\t\t'@(&lt;)style[^(&gt;)]*?(&gt;).*?(&lt;)/style(&gt;)@siu',\n\t\t'@(&lt;)script[^(&gt;)]*?.*?(&lt;)/script(&gt;)@siu',\n\t\t'@<style[^>]*?>.*?</style>@siu',\n\t\t'@<script[^>]*?.*?</script>@siu',\n\t);\n\t$string = preg_replace($pattern, '', $string);\n\treturn strip_tags($string, $allowable_tags);\n}\n"], "fixing_code": ["<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n// Disallow direct access to this file for security reasons\nif(!defined(\"IN_MYBB\"))\n{\n\tdie(\"Direct initialization of this file is not allowed.<br /><br />Please make sure IN_MYBB is defined.\");\n}\n\n$page->add_breadcrumb_item($lang->smilies, \"index.php?module=config-smilies\");\n\n$plugins->run_hooks(\"admin_config_smilies_begin\");\n\nif($mybb->input['action'] == \"add\")\n{\n\t$plugins->run_hooks(\"admin_config_smilies_add\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tif(!trim($mybb->input['name']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_name;\n\t\t}\n\n\t\tif(!trim($mybb->input['find']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_text_replacement;\n\t\t}\n\n\t\tif(!trim($mybb->input['image']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_path;\n\t\t}\n\n\t\tif(!trim($mybb->input['disporder']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_order;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$mybb->input['disporder'] = $mybb->get_input('disporder', MyBB::INPUT_INT);\n\t\t\t$query = $db->simple_select('smilies', 'sid', 'disporder=\\''.$mybb->input['disporder'].'\\'');\n\t\t\t$duplicate_disporder = $db->fetch_field($query, 'sid');\n\n\t\t\tif($duplicate_disporder)\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_duplicate_order;\n\t\t\t}\n\t\t}\n\n\t\tif(!$errors)\n\t\t{\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\\n\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = explode(\"\\n\", $mybb->input['find']);\n\t\t\tforeach(array_merge(array_keys($mybb->input['find'], \"\"), array_keys($mybb->input['find'], \" \")) as $key)\n\t\t\t{\n\t\t\t\tunset($mybb->input['find'][$key]);\n\t\t\t}\n\t\t\t$mybb->input['find'] = implode(\"\\n\", $mybb->input['find']);\n\n\t\t\t$new_smilie = array(\n\t\t\t\t\"name\" => $db->escape_string($mybb->input['name']),\n\t\t\t\t\"find\" => $db->escape_string($mybb->input['find']),\n\t\t\t\t\"image\" => $db->escape_string($mybb->input['image']),\n\t\t\t\t\"disporder\" => $mybb->get_input('disporder', MyBB::INPUT_INT),\n\t\t\t\t\"showclickable\" => $mybb->get_input('showclickable', MyBB::INPUT_INT)\n\t\t\t);\n\n\t\t\t$sid = $db->insert_query(\"smilies\", $new_smilie);\n\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_commit\");\n\n\t\t\t$cache->update_smilies();\n\n\t\t\t// Log admin action\n\t\t\tlog_admin_action($sid, htmlspecialchars_uni($mybb->input['name']));\n\n\t\t\tflash_message($lang->success_smilie_added, 'success');\n\t\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t\t}\n\t}\n\n\t$page->add_breadcrumb_item($lang->add_smilie);\n\t$page->output_header($lang->smilies.\" - \".$lang->add_smilie);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\",\n\t\t'description' => $lang->add_smilie_desc\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\"\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'add_smilie');\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=add\", \"post\", \"add\");\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\telse\n\t{\n\t\t$mybb->input['image'] = 'images/smilies/';\n\t\t$mybb->input['showclickable'] = 1;\n\t}\n\n\tif(!$mybb->input['disporder'])\n\t{\n\t\t$query = $db->simple_select(\"smilies\", \"max(disporder) as dispordermax\");\n\t\t$mybb->input['disporder'] = $db->fetch_field($query, \"dispordermax\")+1;\n\t}\n\n\t$form_container = new FormContainer($lang->add_smilie);\n\t$form_container->output_row($lang->name.\" <em>*</em>\", \"\", $form->generate_text_box('name', $mybb->input['name'], array('id' => 'name')), 'name');\n\t$form_container->output_row($lang->text_replace.\" <em>*</em>\", $lang->text_replace_desc, $form->generate_text_area('find', $mybb->input['find'], array('id' => 'find')), 'find');\n\t$form_container->output_row($lang->image_path.\" <em>*</em>\", $lang->image_path_desc, $form->generate_text_box('image', $mybb->input['image'], array('id' => 'image')), 'image');\n\t$form_container->output_row($lang->display_order.\" <em>*</em>\", $lang->display_order_desc, $form->generate_numeric_field('disporder', $mybb->input['disporder'], array('id' => 'disporder', 'min' => 0)), 'disporder');\n\t$form_container->output_row($lang->show_clickable.\" <em>*</em>\", $lang->show_clickable_desc, $form->generate_yes_no_radio('showclickable', $mybb->input['showclickable']));\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->save_smilie);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif($mybb->input['action'] == \"edit\")\n{\n\t$query = $db->simple_select(\"smilies\", \"*\", \"sid='\".$mybb->get_input('sid', MyBB::INPUT_INT).\"'\");\n\t$smilie = $db->fetch_array($query);\n\n\t// Does the smilie not exist?\n\tif(!$smilie['sid'])\n\t{\n\t\tflash_message($lang->error_invalid_smilie, 'error');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t$plugins->run_hooks(\"admin_config_smilies_edit\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tif(!trim($mybb->input['name']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_name;\n\t\t}\n\n\t\tif(!trim($mybb->input['find']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_text_replacement;\n\t\t}\n\n\t\tif(!trim($mybb->input['image']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_path;\n\t\t}\n\n\t\tif(!trim($mybb->input['disporder']))\n\t\t{\n\t\t\t$errors[] = $lang->error_missing_order;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$mybb->input['disporder'] = $mybb->get_input('disporder', MyBB::INPUT_INT);\n\t\t\t$query = $db->simple_select(\"smilies\", \"sid\", \"disporder= '\".$mybb->input['disporder'].\"' AND sid != '\".$smilie['sid'].\"'\");\n\t\t\t$duplicate_disporder = $db->fetch_field($query, 'sid');\n\n\t\t\tif($duplicate_disporder)\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_duplicate_order;\n\t\t\t}\n\t\t}\n\n\t\tif(!$errors)\n\t\t{\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\\n\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = str_replace(\"\\r\", \"\\n\", $mybb->input['find']);\n\t\t\t$mybb->input['find'] = explode(\"\\n\", $mybb->input['find']);\n\t\t\tforeach(array_merge(array_keys($mybb->input['find'], \"\"), array_keys($mybb->input['find'], \" \")) as $key)\n\t\t\t{\n\t\t\t\tunset($mybb->input['find'][$key]);\n\t\t\t}\n\t\t\t$mybb->input['find'] = implode(\"\\n\", $mybb->input['find']);\n\n\t\t\t$updated_smilie = array(\n\t\t\t\t\"name\" => $db->escape_string($mybb->input['name']),\n\t\t\t\t\"find\" => $db->escape_string($mybb->input['find']),\n\t\t\t\t\"image\" => $db->escape_string($mybb->input['image']),\n\t\t\t\t\"disporder\" => $mybb->get_input('disporder', MyBB::INPUT_INT),\n\t\t\t\t\"showclickable\" => $mybb->get_input('showclickable', MyBB::INPUT_INT)\n\t\t\t);\n\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_edit_commit\");\n\n\t\t\t$db->update_query(\"smilies\", $updated_smilie, \"sid = '{$smilie['sid']}'\");\n\n\t\t\t$cache->update_smilies();\n\n\t\t\t// Log admin action\n\t\t\tlog_admin_action($smilie['sid'], htmlspecialchars_uni($mybb->input['name']));\n\n\t\t\tflash_message($lang->success_smilie_updated, 'success');\n\t\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t\t}\n\t}\n\n\t$page->add_breadcrumb_item($lang->edit_smilie);\n\t$page->output_header($lang->smilies.\" - \".$lang->edit_smilie);\n\n\t$sub_tabs['edit_smilie'] = array(\n\t\t'title' => $lang->edit_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=edit\",\n\t\t'description' => $lang->edit_smilie_desc\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\",\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'edit_smilie');\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=edit\", \"post\", \"edit\");\n\n\techo $form->generate_hidden_field(\"sid\", $smilie['sid']);\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\telse\n\t{\n\t\t$mybb->input = array_merge($mybb->input, $smilie);\n\t}\n\n\t$form_container = new FormContainer($lang->edit_smilie);\n\t$form_container->output_row($lang->name.\" <em>*</em>\", \"\", $form->generate_text_box('name', $mybb->input['name'], array('id' => 'name')), 'name');\n\t$form_container->output_row($lang->text_replace.\" <em>*</em>\", $lang->text_replace_desc, $form->generate_text_area('find', $mybb->input['find'], array('id' => 'find')), 'find');\n\t$form_container->output_row($lang->image_path.\" <em>*</em>\", $lang->image_path_desc, $form->generate_text_box('image', $mybb->input['image'], array('id' => 'image')), 'image');\n\t$form_container->output_row($lang->display_order.\" <em>*</em>\", $lang->display_order_desc, $form->generate_numeric_field('disporder', $mybb->input['disporder'], array('id' => 'disporder', 'min' => 0)), 'disporder');\n\t$form_container->output_row($lang->show_clickable.\" <em>*</em>\", $lang->show_clickable_desc, $form->generate_yes_no_radio('showclickable', $mybb->input['showclickable']));\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->save_smilie);\n\t$buttons[] = $form->generate_reset_button($lang->reset);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif($mybb->input['action'] == \"delete\")\n{\n\t$query = $db->simple_select(\"smilies\", \"*\", \"sid='\".$mybb->get_input('sid', MyBB::INPUT_INT).\"'\");\n\t$smilie = $db->fetch_array($query);\n\n\t// Does the smilie not exist?\n\tif(!$smilie['sid'])\n\t{\n\t\tflash_message($lang->error_invalid_smilie, 'error');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t// User clicked no\n\tif($mybb->input['no'])\n\t{\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t$plugins->run_hooks(\"admin_config_smilies_delete\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\t// Delete the smilie\n\t\t$db->delete_query(\"smilies\", \"sid='{$smilie['sid']}'\");\n\n\t\t$plugins->run_hooks(\"admin_config_smilies_delete_commit\");\n\n\t\t$cache->update_smilies();\n\n\t\t// Log admin action\n\t\tlog_admin_action($smilie['sid'], htmlspecialchars_uni($smilie['name']));\n\n\t\tflash_message($lang->success_smilie_updated, 'success');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\telse\n\t{\n\t\t$page->output_confirm_action(\"index.php?module=config-smilies&amp;action=delete&amp;sid={$smilie['sid']}\", $lang->confirm_smilie_deletion);\n\t}}\n\nif($mybb->input['action'] == \"add_multiple\")\n{\n\t$plugins->run_hooks(\"admin_config_smilies_add_multiple\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tif($mybb->input['step'] == 1)\n\t\t{\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_multiple_step1\");\n\n\t\t\tif(!trim($mybb->input['pathfolder']))\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_missing_path_multiple;\n\t\t\t}\n\n\t\t\t$path = $mybb->input['pathfolder'];\n\t\t\t$dir = @opendir(MYBB_ROOT.$path);\n\n\t\t\tif(!$dir)\n\t\t\t{\n\t\t\t\t$errors[] = $lang->error_invalid_path;\n\t\t\t}\n\n\t\t\tif($path && !is_array($errors))\n\t\t\t{\n\t\t\t\tif(substr($path, -1, 1) !== \"/\")\n\t\t\t\t{\n\t\t\t\t\t$path .= \"/\";\n\t\t\t\t}\n\n\t\t\t\t$query = $db->simple_select(\"smilies\");\n\n\t\t\t\t$asmilies = array();\n\t\t\t\twhile($smilie = $db->fetch_array($query))\n\t\t\t\t{\n\t\t\t\t\t$asmilies[$smilie['image']] = 1;\n\t\t\t\t}\n\n\t\t\t\t$smilies = array();\n\t\t\t\twhile($file = readdir($dir))\n\t\t\t\t{\n\t\t\t\t\tif($file != \"..\" && $file != \".\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$ext = get_extension($file);\n\t\t\t\t\t\tif($ext == \"gif\" || $ext == \"jpg\" || $ext == \"jpeg\" || $ext == \"png\" || $ext == \"bmp\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif(!$asmilies[$path.$file])\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t$smilies[] = $file;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclosedir($dir);\n\n\t\t\t\tif(count($smilies) == 0)\n\t\t\t\t{\n\t\t\t\t\t$errors[] = $lang->error_no_smilies;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(!$errors)\n\t\t\t{\n\t\t\t\t$page->add_breadcrumb_item($lang->add_multiple_smilies);\n\t\t\t\t$page->output_header($lang->smilies.\" - \".$lang->add_multiple_smilies);\n\n\t\t\t\t$sub_tabs['manage_smilies'] = array(\n\t\t\t\t\t'title' => $lang->manage_smilies,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies\",\n\t\t\t\t);\n\t\t\t\t$sub_tabs['add_smilie'] = array(\n\t\t\t\t\t'title' => $lang->add_smilie,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies&amp;action=add\"\n\t\t\t\t);\n\t\t\t\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t\t\t\t'title' => $lang->add_multiple_smilies,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t\t\t\t\t'description' => $lang->add_multiple_smilies_desc\n\t\t\t\t);\n\t\t\t\t$sub_tabs['mass_edit'] = array(\n\t\t\t\t\t'title' => $lang->mass_edit,\n\t\t\t\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\"\n\t\t\t\t);\n\n\t\t\t\t$page->output_nav_tabs($sub_tabs, 'add_multiple_smilies');\n\t\t\t\t$form = new Form(\"index.php?module=config-smilies&amp;action=add_multiple\", \"post\", \"add_multiple\");\n\t\t\t\techo $form->generate_hidden_field(\"step\", \"2\");\n\t\t\t\techo $form->generate_hidden_field(\"pathfolder\", $path);\n\n\t\t\t\t$form_container = new FormContainer($lang->add_multiple_smilies);\n\t\t\t\t$form_container->output_row_header($lang->image, array(\"class\" => \"align_center\", 'width' => '10%'));\n\t\t\t\t$form_container->output_row_header($lang->name);\n\t\t\t\t$form_container->output_row_header($lang->text_replace, array('width' => '20%'));\n\t\t\t\t$form_container->output_row_header($lang->include, array(\"class\" => \"align_center\", 'width' => '5%'));\n\n\t\t\t\tforeach($smilies as $key => $file)\n\t\t\t\t{\n\t\t\t\t\t$ext = get_extension($file);\n\t\t\t\t\t$find = str_replace(\".\".$ext, \"\", $file);\n\t\t\t\t\t$name = ucfirst($find);\n\n\t\t\t\t\t$file = htmlspecialchars_uni($file);\n\n\t\t\t\t\t$form_container->output_cell(\"<img src=\\\"../\".htmlspecialchars_uni($path).$file.\"\\\" alt=\\\"\\\" /><br /><small>{$file}</small>\", array(\"class\" => \"align_center\", \"width\" => 1));\n\t\t\t\t\t$form_container->output_cell($form->generate_text_box(\"name[{$file}]\", htmlspecialchars_uni($name), array('id' => 'name', 'style' => 'width: 98%')));\n\t\t\t\t\t$form_container->output_cell($form->generate_text_box(\"find[{$file}]\", \":\".$find.\":\", array('id' => 'find', 'style' => 'width: 95%')));\n\t\t\t\t\t$form_container->output_cell($form->generate_check_box(\"include[{$file}]\", 1, \"\", array('checked' => 1)), array(\"class\" => \"align_center\"));\n\t\t\t\t\t$form_container->construct_row();\n\t\t\t\t}\n\n\t\t\t\tif($form_container->num_rows() == 0)\n\t\t\t\t{\n\t\t\t\t\tflash_message($lang->error_no_images, 'error');\n\t\t\t\t\tadmin_redirect(\"index.php?module=config-smilies&action=add_multiple\");\n\t\t\t\t}\n\n\t\t\t\t$form_container->end();\n\n\t\t\t\t$buttons[] = $form->generate_submit_button($lang->save_smilies);\n\n\t\t\t\t$form->output_submit_wrapper($buttons);\n\t\t\t\t$form->end();\n\n\t\t\t\t$page->output_footer();\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_multiple_step2\");\n\n\t\t\t$path = $mybb->input['pathfolder'];\n\t\t\treset($mybb->input['include']);\n\t\t\t$find = $mybb->input['find'];\n\t\t\t$name = $mybb->input['name'];\n\n\t\t\tif(empty($mybb->input['include']))\n\t\t\t{\n\t\t\t\tflash_message($lang->error_none_included, 'error');\n\t\t\t\tadmin_redirect(\"index.php?module=config-smilies&action=add_multiple\");\n\t\t\t}\n\n\t\t\t$query = $db->simple_select('smilies', 'MAX(disporder) as max_disporder');\n\t\t\t$disporder = $db->fetch_field($query, 'max_disporder');\n\n\t\t\tforeach($mybb->input['include'] as $image => $insert)\n\t\t\t{\n\t\t\t\t$find[$image] = str_replace(\"\\r\\n\", \"\\n\", $find[$image]);\n\t\t\t\t$find[$image] = str_replace(\"\\r\", \"\\n\", $find[$image]);\n\t\t\t\t$find[$image] = explode(\"\\n\", $find[$image]);\n\t\t\t\tforeach(array_merge(array_keys($find[$image], \"\"), array_keys($find[$image], \" \")) as $key)\n\t\t\t\t{\n\t\t\t\t\tunset($find[$image][$key]);\n\t\t\t\t}\n\t\t\t\t$find[$image] = implode(\"\\n\", $find[$image]);\n\n\t\t\t\tif($insert)\n\t\t\t\t{\n\t\t\t\t\t$new_smilie = array(\n\t\t\t\t\t\t\"name\" => $db->escape_string($name[$image]),\n\t\t\t\t\t\t\"find\" => $db->escape_string($find[$image]),\n\t\t\t\t\t\t\"image\" => $db->escape_string($path.$image),\n\t\t\t\t\t\t\"disporder\" => ++$disporder,\n\t\t\t\t\t\t\"showclickable\" => 1\n\t\t\t\t\t);\n\n\t\t\t\t\t$db->insert_query(\"smilies\", $new_smilie);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$plugins->run_hooks(\"admin_config_smilies_add_multiple_commit\");\n\n\t\t\t$cache->update_smilies();\n\n\t\t\t// Log admin action\n\t\t\tlog_admin_action();\n\n\t\t\tflash_message($lang->success_multiple_smilies_added, 'success');\n\t\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t\t}\n\t}\n\n\t$page->add_breadcrumb_item($lang->add_multiple_smilies);\n\t$page->output_header($lang->smilies.\" - \".$lang->add_multiple_smilies);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\"\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t\t'description' => $lang->add_multiple_smilies_desc\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\"\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'add_multiple_smilies');\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=add_multiple\", \"post\", \"add_multiple\");\n\techo $form->generate_hidden_field(\"step\", \"1\");\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\n\t$form_container = new FormContainer($lang->add_multiple_smilies);\n\t$form_container->output_row($lang->path_to_images, $lang->path_to_images_desc, $form->generate_text_box('pathfolder', $mybb->input['pathfolder'], array('id' => 'pathfolder')), 'pathfolder');\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->show_smilies);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif($mybb->input['action'] == \"mass_edit\")\n{\n\t$plugins->run_hooks(\"admin_config_smilies_mass_edit\");\n\n\tif($mybb->request_method == \"post\")\n\t{\n\t\tforeach($mybb->input['name'] as $sid => $name)\n\t\t{\n\t\t\t$disporder = (int)$mybb->input['disporder'][$sid];\n\n\t\t\t$sid = (int)$sid;\n\t\t\tif($mybb->input['delete'][$sid] == 1)\n\t\t\t{\n\t\t\t\t// Dirty hack to get the disporder working. Note: this doesn't work in every case\n\t\t\t\tunset($mybb->input['disporder'][$sid]);\n\n\t\t\t\t$db->delete_query(\"smilies\", \"sid = '{$sid}'\", 1);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$mybb->input['find'][$sid] = str_replace(\"\\r\\n\", \"\\n\", $mybb->input['find'][$sid]);\n\t\t\t\t$mybb->input['find'][$sid] = str_replace(\"\\r\", \"\\n\", $mybb->input['find'][$sid]);\n\t\t\t\t$mybb->input['find'][$sid] = explode(\"\\n\", $mybb->input['find'][$sid]);\n\t\t\t\tforeach(array_merge(array_keys($mybb->input['find'][$sid], \"\"), array_keys($mybb->input['find'][$sid], \" \")) as $key)\n\t\t\t\t{\n\t\t\t\t\tunset($mybb->input['find'][$sid][$key]);\n\t\t\t\t}\n\t\t\t\t$mybb->input['find'][$sid] = implode(\"\\n\", $mybb->input['find'][$sid]);\t\t\t\t\n\t\t\t\t\n\t\t\t\t$smilie = array(\n\t\t\t\t\t\"name\" => $db->escape_string($mybb->input['name'][$sid]),\n\t\t\t\t\t\"find\" => $db->escape_string($mybb->input['find'][$sid]),\n\t\t\t\t\t\"showclickable\" => $db->escape_string($mybb->input['showclickable'][$sid])\n\t\t\t\t);\n\n\t\t\t\t// $test contains all disporders except the actual one so we can check whether we have multiple disporders\n\t\t\t\t$test = $mybb->input['disporder'];\n\t\t\t\tunset($test[$sid]);\n\t\t\t\tif(!in_array($disporder, $test))\n\t\t\t\t{\n\t\t\t\t\t$smilie['disporder'] = $disporder;\n\t\t\t\t}\n\n\t\t\t\t$db->update_query(\"smilies\", $smilie, \"sid = '{$sid}'\");\n\t\t\t}\n\n\t\t\t$disporder_list[$disporder] = $disporder;\n\t\t}\n\n\t\t$plugins->run_hooks(\"admin_config_smilies_mass_edit_commit\");\n\n\t\t$cache->update_smilies();\n\n\t\t// Log admin action\n\t\tlog_admin_action();\n\n\t\tflash_message($lang->success_multiple_smilies_updated, 'success');\n\t\tadmin_redirect(\"index.php?module=config-smilies\");\n\t}\n\n\t$page->add_breadcrumb_item($lang->mass_edit);\n\t$page->output_header($lang->smilies.\" - \".$lang->mass_edit);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\",\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\",\n\t\t'description' => $lang->mass_edit_desc\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'mass_edit');\n\n\t$form = new Form(\"index.php?module=config-smilies&amp;action=mass_edit\", \"post\", \"mass_edit\");\n\n\tif($errors)\n\t{\n\t\t$page->output_inline_error($errors);\n\t}\n\telse\n\t{\n\t\t$mybb->input['path'] = 'images/smilies/';\n\t\t$mybb->input['showclickable'] = 1;\n\t}\n\n\tif(!$mybb->input['disporder'])\n\t{\n\t\t$query = $db->simple_select(\"smilies\", \"max(disporder) as dispordermax\");\n\t\t$mybb->input['disporder'] = $db->fetch_field($query, \"dispordermax\")+1;\n\t}\n\n\t$form_container = new FormContainer($lang->manage_smilies);\n\t$form_container->output_row_header($lang->image, array(\"class\" => \"align_center\", 'width' => '1'));\n\t$form_container->output_row_header($lang->name);\n\t$form_container->output_row_header($lang->text_replace, array('width' => '20%'));\n\t$form_container->output_row_header($lang->order, array('width' => '5%'));\n\t$form_container->output_row_header($lang->mass_edit_show_clickable, array(\"width\" => 165));\n\t$form_container->output_row_header($lang->smilie_delete, array(\"class\" => \"align_center\", 'width' => '5%'));\n\n\t$query = $db->simple_select(\"smilies\", \"*\", \"\", array('order_by' => 'disporder'));\n\twhile($smilie = $db->fetch_array($query))\n\t{\n\t\t$smilie['image'] = str_replace(\"{theme}\", \"images\", $smilie['image']);\n\t\tif(my_validate_url($smilie['image'], true))\n\t\t{\n\t\t\t$image = htmlspecialchars_uni($smilie['image']);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$image = \"../\".htmlspecialchars_uni($smilie['image']);\n\t\t}\n\n\t\t$form_container->output_cell(\"<img src=\\\"{$image}\\\" alt=\\\"\\\" />\", array(\"class\" => \"align_center\", \"width\" => 1));\n\t\t$form_container->output_cell($form->generate_text_box(\"name[{$smilie['sid']}]\", $smilie['name'], array('id' => 'name', 'style' => 'width: 98%')));\n\t\t$form_container->output_cell($form->generate_text_area(\"find[{$smilie['sid']}]\", $smilie['find'], array('id' => 'find', 'style' => 'width: 95%')));\n\t\t$form_container->output_cell($form->generate_numeric_field(\"disporder[{$smilie['sid']}]\", $smilie['disporder'], array('id' => 'disporder', 'style' => 'width: 80%', 'min' => 0)));\n\t\t$form_container->output_cell($form->generate_yes_no_radio(\"showclickable[{$smilie['sid']}]\", $smilie['showclickable']), array(\"class\" => \"align_center\"));\n\t\t$form_container->output_cell($form->generate_check_box(\"delete[{$smilie['sid']}]\", 1, $mybb->input['delete']), array(\"class\" => \"align_center\"));\n\t\t$form_container->construct_row();\n\t}\n\n\tif($form_container->num_rows() == 0)\n\t{\n\t\t$form_container->output_cell($lang->no_smilies, array('colspan' => 6));\n\t\t$form_container->construct_row();\n\t}\n\n\t$form_container->end();\n\n\t$buttons[] = $form->generate_submit_button($lang->save_smilies);\n\t$buttons[] = $form->generate_reset_button($lang->reset);\n\n\t$form->output_submit_wrapper($buttons);\n\t$form->end();\n\n\t$page->output_footer();\n}\n\nif(!$mybb->input['action'])\n{\n\t$plugins->run_hooks(\"admin_config_smilies_start\");\n\n\t$page->output_header($lang->manage_smilies);\n\n\t$sub_tabs['manage_smilies'] = array(\n\t\t'title' => $lang->manage_smilies,\n\t\t'link' => \"index.php?module=config-smilies\",\n\t\t'description' => $lang->manage_smilies_desc\n\t);\n\t$sub_tabs['add_smilie'] = array(\n\t\t'title' => $lang->add_smilie,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add\",\n\t);\n\t$sub_tabs['add_multiple_smilies'] = array(\n\t\t'title' => $lang->add_multiple_smilies,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=add_multiple\",\n\t);\n\t$sub_tabs['mass_edit'] = array(\n\t\t'title' => $lang->mass_edit,\n\t\t'link' => \"index.php?module=config-smilies&amp;action=mass_edit\",\n\t);\n\n\t$page->output_nav_tabs($sub_tabs, 'manage_smilies');\n\n\t$pagenum = $mybb->get_input('page', MyBB::INPUT_INT);\n\tif($pagenum)\n\t{\n\t\t$start = ($pagenum-1) * 20;\n\t}\n\telse\n\t{\n\t\t$start = 0;\n\t\t$pagenum = 1;\n\t}\n\n\n\t$table = new Table;\n\t$table->construct_header($lang->image, array(\"class\" => \"align_center\", \"width\" => 1));\n\t$table->construct_header($lang->name, array(\"width\" => \"35%\"));\n\t$table->construct_header($lang->text_replace, array(\"width\" => \"35%\"));\n\t$table->construct_header($lang->controls, array(\"class\" => \"align_center\", \"colspan\" => 2));\n\n\t$query = $db->simple_select(\"smilies\", \"*\", \"\", array('limit_start' => $start, 'limit' => 20, 'order_by' => 'disporder'));\n\twhile($smilie = $db->fetch_array($query))\n\t{\n\t\t$smilie['image'] = str_replace(\"{theme}\", \"images\", $smilie['image']);\n\t\tif(my_validate_url($smilie['image'], true))\n\t\t{\n\t\t\t$image = htmlspecialchars_uni($smilie['image']);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$image = \"../\".htmlspecialchars_uni($smilie['image']);\n\t\t}\n\n\t\t$table->construct_cell(\"<img src=\\\"{$image}\\\" alt=\\\"\\\" class=\\\"smilie smilie_{$smilie['sid']}\\\" />\", array(\"class\" => \"align_center\"));\n\t\t$table->construct_cell(htmlspecialchars_uni($smilie['name']));\n\t\t$table->construct_cell(nl2br(htmlspecialchars_uni($smilie['find'])));\n\n\t\t$table->construct_cell(\"<a href=\\\"index.php?module=config-smilies&amp;action=edit&amp;sid={$smilie['sid']}\\\">{$lang->edit}</a>\", array(\"class\" => \"align_center\"));\n\t\t$table->construct_cell(\"<a href=\\\"index.php?module=config-smilies&amp;action=delete&amp;sid={$smilie['sid']}&amp;my_post_key={$mybb->post_code}\\\" onclick=\\\"return AdminCP.deleteConfirmation(this, '{$lang->confirm_smilie_deletion}')\\\">{$lang->delete}</a>\", array(\"class\" => \"align_center\"));\n\t\t$table->construct_row();\n\t}\n\n\tif($table->num_rows() == 0)\n\t{\n\t\t$table->construct_cell($lang->no_smilies, array('colspan' => 5));\n\t\t$table->construct_row();\n\t}\n\n\t$table->output($lang->manage_smilies);\n\n\t$query = $db->simple_select(\"smilies\", \"COUNT(sid) as smilies\");\n\t$total_rows = $db->fetch_field($query, \"smilies\");\n\n\techo \"<br />\".draw_admin_pagination($pagenum, \"20\", $total_rows, \"index.php?module=config-smilies&amp;page={page}\");\n\n\t$page->output_footer();\n}", "<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n/*\noptions = array(\n\tallow_html\n\tallow_smilies\n\tallow_mycode\n\tnl2br\n\tfilter_badwords\n\tme_username\n\tshorten_urls\n\thighlight\n\tfilter_cdata\n)\n*/\n\nclass postParser\n{\n\t/**\n\t * Internal cache of MyCode.\n\t *\n\t * @access public\n\t * @var mixed\n\t */\n\tpublic $mycode_cache = 0;\n\n\t/**\n\t * Internal cache of smilies\n\t *\n\t * @access public\n\t * @var mixed\n\t */\n\tpublic $smilies_cache = 0;\n\n\t/**\n\t * Internal cache of badwords filters\n\t *\n\t * @access public\n\t * @var mixed\n\t */\n\tpublic $badwords_cache = 0;\n\n\t/**\n\t * Base URL for smilies\n\t *\n\t * @access public\n\t * @var string\n\t */\n\tpublic $base_url;\n\n\t/**\n\t * Parsed Highlights cache\n\t *\n\t * @access public\n\t * @var array\n\t */\n\tpublic $highlight_cache = array();\n\n\t/**\n\t * Options for this parsed message\n\t *\n\t * @access public\n\t * @var array\n\t */\n\tpublic $options;\n\n\t/**\n\t * Internal cache for nested lists\n\t *\n\t * @access public\n\t * @var array\n\t */\n\tpublic $list_elements;\n\n\t/**\n\t * Internal counter for nested lists\n\t *\n\t * @access public\n\t * @var int\n\t */\n\tpublic $list_count;\n\n\t/**\n\t * Whether or not should a <br /> with clear: both be added at the end of the parsed message\n\t *\n\t * @access public\n\t * @var boolean\n\t */\n\tpublic $clear_needed = false;\n\n\t/**\n\t * Parses a message with the specified options.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @param array $options Array of yes/no options - allow_html,filter_badwords,allow_mycode,allow_smilies,nl2br,me_username,filter_cdata.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_message($message, $options=array())\n\t{\n\t\tglobal $plugins, $mybb;\n\n\t\t$this->clear_needed = false;\n\n\t\t// Set base URL for parsing smilies\n\t\t$this->base_url = $mybb->settings['bburl'];\n\n\t\tif($this->base_url != \"\")\n\t\t{\n\t\t\tif(my_substr($this->base_url, my_strlen($this->base_url) -1) != \"/\")\n\t\t\t{\n\t\t\t\t$this->base_url = $this->base_url.\"/\";\n\t\t\t}\n\t\t}\n\n\t\t// Set the options\n\t\t$this->options = $options;\n\n\t\t$message = $plugins->run_hooks(\"parse_message_start\", $message);\n\n\t\t// Get rid of carriage returns for they are the workings of the devil\n\t\t$message = str_replace(\"\\r\", \"\", $message);\n\n\t\t// Filter bad words if requested.\n\t\tif(!empty($this->options['filter_badwords']))\n\t\t{\n\t\t\t$message = $this->parse_badwords($message);\n\t\t}\n\n\t\t// Filter CDATA tags if requested (syndication.php).\n\t\tif(!empty($this->options['filter_cdata']))\n\t\t{\n\t\t\t$message = $this->parse_cdata($message);\n\t\t}\n\n\t\t// If MyCode needs to be replaced, first filter out [code] and [php] tags.\n\t\tif(!empty($this->options['allow_mycode']) && $mybb->settings['allowcodemycode'] == 1)\n\t\t{\n\t\t\t// This code is reserved and could break codes\n\t\t\t$message = str_replace(\"<mybb-code>\\n\", \"<mybb_code>\\n\", $message);\n\n\t\t\tpreg_match_all(\"#\\[(code|php)\\](.*?)\\[/\\\\1\\](\\r\\n?|\\n?)#si\", $message, $code_matches, PREG_SET_ORDER);\n\t\t\t$message = preg_replace(\"#\\[(code|php)\\](.*?)\\[/\\\\1\\](\\r\\n?|\\n?)#si\", \"<mybb-code>\\n\", $message);\n\t\t}\n\n\t\tif(empty($this->options['allow_html']))\n\t\t{\n\t\t\t$message = $this->parse_html($message);\n\t\t\t$message = str_replace(\"&lt;mybb-code&gt;\\n\", \"<mybb-code>\\n\", $message);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Replace base, meta,script and style tags in our post - these are > dangerous <\n\t\t\t$message = preg_replace('#<(/?)(base|meta|script|style)([^>]*)>#i', '&lt;$1$2$3&gt;', $message);\n\t\t\t$message = $this->fix_javascript($message);\n\n\t\t\t$find = array(\"<br />\\n\", \"<br>\\n\");\n\t\t\t$replace = array(\"\\n\", \"\\n\");\n\t\t\t$message = str_replace($find, $replace, $message);\n\t\t}\n\n\t\t// Replace \"me\" code and slaps if we have a username\n\t\tif(!empty($this->options['me_username']) && $mybb->settings['allowmemycode'] == 1)\n\t\t{\n\t\t\tglobal $lang;\n\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/me ([^\\r\\n<]*)#i', \"\\\\1<span style=\\\"color: red;\\\" class=\\\"mycode_me\\\">* {$this->options['me_username']} \\\\2</span>\", $message);\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/slap ([^\\r\\n<]*)#i', \"\\\\1<span style=\\\"color: red;\\\" class=\\\"mycode_slap\\\">* {$this->options['me_username']} {$lang->slaps} \\\\2 {$lang->with_trout}</span>\", $message);\n\t\t}\n\n\t\t// If we can, parse smilies\n\t\tif(!empty($this->options['allow_smilies']))\n\t\t{\n\t\t\t$message = $this->parse_smilies($message, $this->options['allow_html']);\n\t\t}\n\n\t\t// Replace MyCode if requested.\n\t\tif(!empty($this->options['allow_mycode']))\n\t\t{\n\t\t\t$message = $this->parse_mycode($message);\n\t\t}\n\n\t\t// Parse Highlights\n\t\tif(!empty($this->options['highlight']))\n\t\t{\n\t\t\t$message = $this->highlight_message($message, $this->options['highlight']);\n\t\t}\n\n\t\t// Run plugin hooks\n\t\t$message = $plugins->run_hooks(\"parse_message\", $message);\n\n\t\tif(!empty($this->options['allow_mycode']))\n\t\t{\n\t\t\t// Now that we're done, if we split up any code tags, parse them and glue it all back together\n\t\t\tif(count($code_matches) > 0)\n\t\t\t{\n\t\t\t\tforeach($code_matches as $text)\n\t\t\t\t{\n\t\t\t\t\tif(my_strtolower($text[1]) == \"code\")\n\t\t\t\t\t{\n\t\t\t\t\t\t// Fix up HTML inside the code tags so it is clean\n\t\t\t\t\t\t$text[2] = $this->parse_html($text[2]);\n\n\t\t\t\t\t\t$code = $this->mycode_parse_code($text[2]);\n\t\t\t\t\t}\n\t\t\t\t\telseif(my_strtolower($text[1]) == \"php\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$code = $this->mycode_parse_php($text[2]);\n\t\t\t\t\t}\n\t\t\t\t\t$message = preg_replace(\"#\\<mybb-code>\\n?#\", $code, $message, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(!isset($this->options['nl2br']) || $this->options['nl2br'] != 0)\n\t\t{\n\t\t\t$message = nl2br($message);\n\t\t\t// Fix up new lines and block level elements\n\t\t\t$message = preg_replace(\"#(</?(?:html|head|body|div|p|form|table|thead|tbody|tfoot|tr|td|th|ul|ol|li|div|p|blockquote|cite|hr)[^>]*>)\\s*<br />#i\", \"$1\", $message);\n\t\t\t$message = preg_replace(\"#(&nbsp;)+(</?(?:html|head|body|div|p|form|table|thead|tbody|tfoot|tr|td|th|ul|ol|li|div|p|blockquote|cite|hr)[^>]*>)#i\", \"$2\", $message);\n\t\t}\n\n\t\tif($this->clear_needed)\n\t\t{\n\t\t\t$message .= '<br class=\"clear\" />';\n\t\t}\n\n\t\t$message = $plugins->run_hooks(\"parse_message_end\", $message);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Converts HTML in a message to their specific entities whilst allowing unicode characters.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @return string The formatted message.\n\t */\n\tfunction parse_html($message)\n\t{\n\t\t$message = preg_replace(\"#&(?!\\#[0-9]+;)#si\", \"&amp;\", $message); // fix & but allow unicode\n\t\t$message = str_replace(\"<\",\"&lt;\",$message);\n\t\t$message = str_replace(\">\",\"&gt;\",$message);\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Generates a cache of MyCode, both standard and custom.\n\t *\n\t * @access private\n\t */\n\tfunction cache_mycode()\n\t{\n\t\tglobal $cache, $lang, $mybb;\n\t\t$this->mycode_cache = array();\n\n\t\t$standard_mycode = $callback_mycode = $nestable_mycode = array();\n\t\t$standard_count = $callback_count = $nestable_count = 0;\n\n\t\tif($mybb->settings['allowbasicmycode'] == 1)\n\t\t{\n\t\t\t$standard_mycode['b']['regex'] = \"#\\[b\\](.*?)\\[/b\\]#si\";\n\t\t\t$standard_mycode['b']['replacement'] = \"<span style=\\\"font-weight: bold;\\\" class=\\\"mycode_b\\\">$1</span>\";\n\n\t\t\t$standard_mycode['u']['regex'] = \"#\\[u\\](.*?)\\[/u\\]#si\";\n\t\t\t$standard_mycode['u']['replacement'] = \"<span style=\\\"text-decoration: underline;\\\" class=\\\"mycode_u\\\">$1</span>\";\n\n\t\t\t$standard_mycode['i']['regex'] = \"#\\[i\\](.*?)\\[/i\\]#si\";\n\t\t\t$standard_mycode['i']['replacement'] = \"<span style=\\\"font-style: italic;\\\" class=\\\"mycode_i\\\">$1</span>\";\n\n\t\t\t$standard_mycode['s']['regex'] = \"#\\[s\\](.*?)\\[/s\\]#si\";\n\t\t\t$standard_mycode['s']['replacement'] = \"<span style=\\\"text-decoration: line-through;\\\" class=\\\"mycode_s\\\">$1</span>\";\n\n\t\t\t$standard_mycode['hr']['regex'] = \"#\\[hr\\]#si\";\n\t\t\t$standard_mycode['hr']['replacement'] = \"<hr class=\\\"mycode_hr\\\" />\";\n\n\t\t\t++$standard_count;\n\t\t}\n\n\t\tif($mybb->settings['allowsymbolmycode'] == 1)\n\t\t{\n\t\t\t$standard_mycode['copy']['regex'] = \"#\\(c\\)#i\";\n\t\t\t$standard_mycode['copy']['replacement'] = \"&copy;\";\n\n\t\t\t$standard_mycode['tm']['regex'] = \"#\\(tm\\)#i\";\n\t\t\t$standard_mycode['tm']['replacement'] = \"&#153;\";\n\n\t\t\t$standard_mycode['reg']['regex'] = \"#\\(r\\)#i\";\n\t\t\t$standard_mycode['reg']['replacement'] = \"&reg;\";\n\n\t\t\t++$standard_count;\n\t\t}\n\n\t\tif($mybb->settings['allowlinkmycode'] == 1)\n\t\t{\n\t\t\t$callback_mycode['url_simple']['regex'] = \"#\\[url\\]((?!javascript)[a-z]+?://)([^\\r\\n\\\"<]+?)\\[/url\\]#si\";\n\t\t\t$callback_mycode['url_simple']['replacement'] = array($this, 'mycode_parse_url_callback1');\n\n\t\t\t$callback_mycode['url_simple2']['regex'] = \"#\\[url\\]((?!javascript:)[^\\r\\n\\\"<]+?)\\[/url\\]#i\";\n\t\t\t$callback_mycode['url_simple2']['replacement'] = array($this, 'mycode_parse_url_callback2');\n\n\t\t\t$callback_mycode['url_complex']['regex'] = \"#\\[url=((?!javascript)[a-z]+?://)([^\\r\\n\\\"<]+?)\\](.+?)\\[/url\\]#si\";\n\t\t\t$callback_mycode['url_complex']['replacement'] = array($this, 'mycode_parse_url_callback1');\n\n\t\t\t$callback_mycode['url_complex2']['regex'] = \"#\\[url=((?!javascript:)[^\\r\\n\\\"<]+?)\\](.+?)\\[/url\\]#si\";\n\t\t\t$callback_mycode['url_complex2']['replacement'] = array($this, 'mycode_parse_url_callback2');\n\n\t\t\t++$callback_count;\n\t\t}\n\n\t\tif($mybb->settings['allowemailmycode'] == 1)\n\t\t{\n\t\t\t$callback_mycode['email_simple']['regex'] = \"#\\[email\\]((?:[a-zA-Z0-9-_\\+\\.]+?)@[a-zA-Z0-9-]+\\.[a-zA-Z0-9\\.-]+(?:\\?.*?)?)\\[/email\\]#i\";\n\t\t\t$callback_mycode['email_simple']['replacement'] = array($this, 'mycode_parse_email_callback');\n\n\t\t\t$callback_mycode['email_complex']['regex'] = \"#\\[email=((?:[a-zA-Z0-9-_\\+\\.]+?)@[a-zA-Z0-9-]+\\.[a-zA-Z0-9\\.-]+(?:\\?.*?)?)\\](.*?)\\[/email\\]#i\";\n\t\t\t$callback_mycode['email_complex']['replacement'] = array($this, 'mycode_parse_email_callback');\n\n\t\t\t++$callback_count;\n\t\t}\n\n\t\tif($mybb->settings['allowcolormycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['color']['regex'] = \"#\\[color=([a-zA-Z]*|\\#?[\\da-fA-F]{3}|\\#?[\\da-fA-F]{6})](.*?)\\[/color\\]#si\";\n\t\t\t$nestable_mycode['color']['replacement'] = \"<span style=\\\"color: $1;\\\" class=\\\"mycode_color\\\">$2</span>\";\n\n\t\t\t++$nestable_count;\n\t\t}\n\n\t\tif($mybb->settings['allowsizemycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['size']['regex'] = \"#\\[size=(xx-small|x-small|small|medium|large|x-large|xx-large)\\](.*?)\\[/size\\]#si\";\n\t\t\t$nestable_mycode['size']['replacement'] = \"<span style=\\\"font-size: $1;\\\" class=\\\"mycode_size\\\">$2</span>\";\n\n\t\t\t$callback_mycode['size_int']['regex'] = \"#\\[size=([0-9\\+\\-]+?)\\](.*?)\\[/size\\]#si\";\n\t\t\t$callback_mycode['size_int']['replacement'] = array($this, 'mycode_handle_size_callback');\n\n\t\t\t++$nestable_count;\n\t\t\t++$callback_count;\n\t\t}\n\n\t\tif($mybb->settings['allowfontmycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['font']['regex'] = \"#\\[font=([a-z0-9 ,\\-_'\\\"]+)\\](.*?)\\[/font\\]#si\";\n\t\t\t$nestable_mycode['font']['replacement'] = \"<span style=\\\"font-family: $1;\\\" class=\\\"mycode_font\\\">$2</span>\";\n\n\t\t\t++$nestable_count;\n\t\t}\n\n\t\tif($mybb->settings['allowalignmycode'] == 1)\n\t\t{\n\t\t\t$nestable_mycode['align']['regex'] = \"#\\[align=(left|center|right|justify)\\](.*?)\\[/align\\]#si\";\n\t\t\t$nestable_mycode['align']['replacement'] = \"<div style=\\\"text-align: $1;\\\" class=\\\"mycode_align\\\">$2</div>\";\n\n\t\t\t++$nestable_count;\n\t\t}\n\n\t\t$custom_mycode = $cache->read(\"mycode\");\n\n\t\t// If there is custom MyCode, load it.\n\t\tif(is_array($custom_mycode))\n\t\t{\n\t\t\tforeach($custom_mycode as $key => $mycode)\n\t\t\t{\n\t\t\t\t$mycode['regex'] = str_replace(\"\\x0\", \"\", $mycode['regex']);\n\t\t\t\t$custom_mycode[$key]['regex'] = \"#\".$mycode['regex'].\"#si\";\n\n\t\t\t\t++$standard_count;\n\t\t\t}\n\t\t\t$mycode = array_merge($standard_mycode, $custom_mycode);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$mycode = $standard_mycode;\n\t\t}\n\n\t\t// Assign the MyCode to the cache.\n\t\tforeach($mycode as $code)\n\t\t{\n\t\t\t$this->mycode_cache['standard']['find'][] = $code['regex'];\n\t\t\t$this->mycode_cache['standard']['replacement'][] = $code['replacement'];\n\t\t}\n\n\t\t// Assign the nestable MyCode to the cache.\n\t\tforeach($nestable_mycode as $code)\n\t\t{\n\t\t\t$this->mycode_cache['nestable'][] = array('find' => $code['regex'], 'replacement' => $code['replacement']);\n\t\t}\n\n\t\t// Assign the nestable MyCode to the cache.\n\t\tforeach($callback_mycode as $code)\n\t\t{\n\t\t\t$this->mycode_cache['callback'][] = array('find' => $code['regex'], 'replacement' => $code['replacement']);\n\t\t}\n\n\t\t$this->mycode_cache['standard_count'] = $standard_count;\n\t\t$this->mycode_cache['callback_count'] = $callback_count;\n\t\t$this->mycode_cache['nestable_count'] = $nestable_count;\n\t}\n\n\t/**\n\t * Parses MyCode tags in a specific message with the specified options.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @param array $options Array of options in yes/no format. Options are allow_imgcode.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_mycode($message, $options=array())\n\t{\n\t\tglobal $lang, $mybb;\n\n\t\tif(empty($this->options))\n\t\t{\n\t\t\t$this->options = $options;\n\t\t}\n\n\t\t// Cache the MyCode globally if needed.\n\t\tif($this->mycode_cache == 0)\n\t\t{\n\t\t\t$this->cache_mycode();\n\t\t}\n\n\t\t// Parse quotes first\n\t\t$message = $this->mycode_parse_quotes($message);\n\n\t\t$message = $this->mycode_auto_url($message);\n\n\t\t$message = str_replace('$', '&#36;', $message);\n\n\t\t// Replace the rest\n\t\tif($this->mycode_cache['standard_count'] > 0)\n\t\t{\n\t\t\t$message = preg_replace($this->mycode_cache['standard']['find'], $this->mycode_cache['standard']['replacement'], $message);\n\t\t}\n\n\t\tif($this->mycode_cache['callback_count'] > 0)\n\t\t{\n\t\t\tforeach($this->mycode_cache['callback'] as $replace)\n\t\t\t{\n\t\t\t\t$message = preg_replace_callback($replace['find'], $replace['replacement'], $message);\n\t\t\t}\n\t\t}\n\n\t\t// Replace the nestable mycode's\n\t\tif($this->mycode_cache['nestable_count'] > 0)\n\t\t{\n\t\t\tforeach($this->mycode_cache['nestable'] as $mycode)\n\t\t\t{\n\t\t\t\twhile(preg_match($mycode['find'], $message))\n\t\t\t\t{\n\t\t\t\t\t$message = preg_replace($mycode['find'], $mycode['replacement'], $message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Reset list cache\n\t\tif($mybb->settings['allowlistmycode'] == 1)\n\t\t{\n\t\t\t$this->list_elements = array();\n\t\t\t$this->list_count = 0;\n\n\t\t\t// Find all lists\n\t\t\t$message = preg_replace_callback(\"#(\\[list(=(a|A|i|I|1))?\\]|\\[/list\\])#si\", array($this, 'mycode_prepare_list'), $message);\n\n\t\t\t// Replace all lists\n\t\t\tfor($i = $this->list_count; $i > 0; $i--)\n\t\t\t{\n\t\t\t\t// Ignores missing end tags\n\t\t\t\t$message = preg_replace_callback(\"#\\s?\\[list(=(a|A|i|I|1))?&{$i}\\](.*?)(\\[/list&{$i}\\]|$)(\\r\\n?|\\n?)#si\", array($this, 'mycode_parse_list_callback'), $message, 1);\n\t\t\t}\n\t\t}\n\n\t\t// Convert images when allowed.\n\t\tif(!empty($this->options['allow_imgcode']))\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[img\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback1'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback2'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback3'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*) align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_callback4'), $message);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[img\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback1'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback2'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback3'), $message);\n\t\t\t$message = preg_replace_callback(\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*) align=(left|right)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\", array($this, 'mycode_parse_img_disabled_callback4'), $message);\n\t\t}\n\n\t\t// Convert videos when allow.\n\t\tif(!empty($this->options['allow_videocode']))\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[video=(.*?)\\](.*?)\\[/video\\]#i\", array($this, 'mycode_parse_video_callback'), $message);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$message = preg_replace_callback(\"#\\[video=(.*?)\\](.*?)\\[/video\\]#i\", array($this, 'mycode_parse_video_disabled_callback'), $message);\n\t\t}\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Generates a cache of smilies\n\t *\n\t * @access private\n\t */\n\tfunction cache_smilies()\n\t{\n\t\tglobal $cache, $mybb, $theme, $templates;\n\t\t$this->smilies_cache = array();\n\n\t\t$smilies = $cache->read(\"smilies\");\n\t\tif(is_array($smilies))\n\t\t{\n\t\t\t$extra_class = $onclick = '';\n\t\t\tforeach($smilies as $sid => $smilie)\n\t\t\t{\n\t\t\t\t$smilie['find'] = explode(\"\\n\", $smilie['find']);\n\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t$smilie['image'] = htmlspecialchars_uni($mybb->get_asset_url($smilie['image']));\n\t\t\t\t$smilie['name'] = htmlspecialchars_uni($smilie['name']);\n\n\t\t\t\tforeach($smilie['find'] as $s)\n\t\t\t\t{\n\t\t\t\t\t$s = $this->parse_html($s);\n\t\t\t\t\teval(\"\\$smilie_template = \\\"\".$templates->get(\"smilie\", 1, 0).\"\\\";\");\n\t\t\t\t\t$this->smilies_cache[$s] = $smilie_template;\n\t\t\t\t\t// workaround for smilies starting with ;\n\t\t\t\t\tif($s[0] == \";\")\n\t\t\t\t\t{\n\t\t\t\t\t\t$this->smilies_cache += array(\n\t\t\t\t\t\t\t\"&amp$s\" => \"&amp$s\",\n\t\t\t\t\t\t\t\"&lt$s\" => \"&lt$s\",\n\t\t\t\t\t\t\t\"&gt$s\" => \"&gt$s\",\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Parses smilie code in the specified message.\n\t *\n\t * @param string $message $message The message being parsed.\n\t * @param int $allow_html not used\n\t * @return string The parsed message.\n\t */\n\tfunction parse_smilies($message, $allow_html=0)\n\t{\n\t\tif($this->smilies_cache == 0)\n\t\t{\n\t\t\t$this->cache_smilies();\n\t\t}\n\n\t\t// No smilies?\n\t\tif(!count($this->smilies_cache))\n\t\t{\n\t\t\treturn $message;\n\t\t}\n\n\t\t// First we take out any of the tags we don't want parsed between (url= etc)\n\t\tpreg_match_all(\"#\\[(url(=[^\\]]*)?\\]|quote=([^\\]]*)?\\])|(http|ftp)(s|)://[^\\s]*#i\", $message, $bad_matches, PREG_PATTERN_ORDER);\n\t\tif(count($bad_matches[0]) > 0)\n\t\t{\n\t\t\t$message = preg_replace(\"#\\[(url(=[^\\]]*)?\\]|quote=([^\\]]*)?\\])|(http|ftp)(s|)://[^\\s]*#si\", \"<mybb-bad-sm>\", $message);\n\t\t}\n\n\t\t$message = strtr($message, $this->smilies_cache);\n\n\t\t// If we matched any tags previously, swap them back in\n\t\tif(count($bad_matches[0]) > 0)\n\t\t{\n\t\t\t$message = explode(\"<mybb-bad-sm>\", $message);\n\t\t\t$i = 0;\n\t\t\tforeach($bad_matches[0] as $match)\n\t\t\t{\n\t\t\t\t$message[$i] .= $match;\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t$message = implode(\"\", $message);\n\t\t}\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Generates a cache of badwords filters.\n\t *\n\t * @access private\n\t */\n\tfunction cache_badwords()\n\t{\n\t\tglobal $cache;\n\t\t$this->badwords_cache = array();\n\t\t$this->badwords_cache = $cache->read(\"badwords\");\n\t}\n\n\t/**\n\t * Parses a list of filtered/badwords in the specified message.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @param array $options Array of parser options in yes/no format.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_badwords($message, $options=array())\n\t{\n\t\tif(empty($this->options))\n\t\t{\n\t\t\t$this->options = $options;\n\t\t}\n\n\t\tif($this->badwords_cache == 0)\n\t\t{\n\t\t\t$this->cache_badwords();\n\t\t}\n\t\tif(is_array($this->badwords_cache))\n\t\t{\n\t\t\treset($this->badwords_cache);\n\t\t\tforeach($this->badwords_cache as $bid => $badword)\n\t\t\t{\n\t\t\t\tif(!$badword['replacement'])\n\t\t\t\t{\n\t\t\t\t\t$badword['replacement'] = \"*****\";\n\t\t\t\t}\n\n\t\t\t\t// Take into account the position offset for our last replacement.\n\t\t\t\t$badword['badword'] = str_replace('\\*', '([a-zA-Z0-9_]{1})', preg_quote($badword['badword'], \"#\"));\n\n\t\t\t\t// Ensure we run the replacement enough times but not recursively (i.e. not while(preg_match..))\n\t\t\t\t$message = preg_replace(\"#(^|\\W)\".$badword['badword'].\"(?=\\W|$)#i\", '\\1'.$badword['replacement'], $message);\n\t\t\t}\n\t\t}\n\t\tif(!empty($this->options['strip_tags']))\n\t\t{\n\t\t\t$message = strip_tags($message);\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Resolves nested CDATA tags in the specified message.\n\t *\n\t * @param string $message The message to be parsed.\n\t * @return string The parsed message.\n\t */\n\tfunction parse_cdata($message)\n\t{\n\t\t$message = str_replace(']]>', ']]]]><![CDATA[>', $message);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Attempts to move any javascript references in the specified message.\n\t *\n\t * @param string The message to be parsed.\n\t * @return string The parsed message.\n\t */\n\tfunction fix_javascript($message)\n\t{\n\t\t$js_array = array(\n\t\t\t\"#(&\\#(0*)106;?|&\\#(0*)74;?|&\\#x(0*)4a;?|&\\#x(0*)6a;?|j)((&\\#(0*)97;?|&\\#(0*)65;?|a)(&\\#(0*)118;?|&\\#(0*)86;?|v)(&\\#(0*)97;?|&\\#(0*)65;?|a)(\\s)?(&\\#(0*)115;?|&\\#(0*)83;?|s)(&\\#(0*)99;?|&\\#(0*)67;?|c)(&\\#(0*)114;?|&\\#(0*)82;?|r)(&\\#(0*)105;?|&\\#(0*)73;?|i)(&\\#112;?|&\\#(0*)80;?|p)(&\\#(0*)116;?|&\\#(0*)84;?|t)(&\\#(0*)58;?|\\:))#i\",\n\t\t\t\"#([\\s\\\"']on)([a-z]+\\s*=)#i\",\n\t\t);\n\n\t\t// Add invisible white space\n\t\t$message = preg_replace($js_array, \"$1\\xE2\\x80\\x8C$2$6\", $message);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t* Handles fontsize.\n\t*\n\t* @param int $size The original size.\n\t* @param string $text The text within a size tag.\n\t* @return string The parsed text.\n\t*/\n\tfunction mycode_handle_size($size, $text)\n\t{\n\t\tglobal $templates;\n\n\t\t$size = (int)$size;\n\n\t\tif($size < 1)\n\t\t{\n\t\t\t$size = 1;\n\t\t}\n\n\t\tif($size > 50)\n\t\t{\n\t\t\t$size = 50;\n\t\t}\n\n\t\t$text = str_replace(\"\\'\", \"'\", $text);\n\n\t\teval(\"\\$mycode_size = \\\"\".$templates->get(\"mycode_size_int\", 1, 0).\"\\\";\");\n\t\treturn $mycode_size;\n\t}\n\n\t/**\n\t* Handles fontsize.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed text.\n\t*/\n\tfunction mycode_handle_size_callback($matches)\n\t{\n\t\treturn $this->mycode_handle_size($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t* Parses quote MyCode.\n\t*\n\t* @param string $message The message to be parsed\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_quotes($message, $text_only=false)\n\t{\n\t\tglobal $lang, $templates, $theme, $mybb;\n\n\t\t// Assign pattern and replace values.\n\t\t$pattern = \"#\\[quote\\](.*?)\\[\\/quote\\](\\r\\n?|\\n?)#si\";\n\t\t$pattern_callback = \"#\\[quote=([\\\"']|&quot;|)(.*?)(?:\\\\1)(.*?)(?:[\\\"']|&quot;)?\\](.*?)\\[/quote\\](\\r\\n?|\\n?)#si\";\n\n\t\tif($text_only == false)\n\t\t{\n\t\t\t$replace = \"<blockquote class=\\\"mycode_quote\\\"><cite>$lang->quote</cite>$1</blockquote>\\n\";\n\t\t\t$replace_callback = array($this, 'mycode_parse_post_quotes_callback1');\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$replace = \"\\n{$lang->quote}\\n--\\n$1\\n--\\n\";\n\t\t\t$replace_callback = array($this, 'mycode_parse_post_quotes_callback2');\n\t\t}\n\n\t\tdo\n\t\t{\n\t\t\t// preg_replace has erased the message? Restore it...\n\t\t\t$previous_message = $message;\n\t\t\t$message = preg_replace($pattern, $replace, $message, -1, $count);\n\t\t\t$message = preg_replace_callback($pattern_callback, $replace_callback, $message, -1, $count_callback);\n\t\t\tif(!$message)\n\t\t\t{\n\t\t\t\t$message = $previous_message;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while($count || $count_callback);\n\n\t\tif($text_only == false)\n\t\t{\n\t\t\t$find = array(\n\t\t\t\t\"#(\\r\\n*|\\n*)<\\/cite>(\\r\\n*|\\n*)#\",\n\t\t\t\t\"#(\\r\\n*|\\n*)<\\/blockquote>#\"\n\t\t\t);\n\n\t\t\t$replace = array(\n\t\t\t\t\"</cite><br />\",\n\t\t\t\t\"</blockquote>\"\n\t\t\t);\n\t\t\t$message = preg_replace($find, $replace, $message);\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t* Parses quotes with post id and/or dateline.\n\t*\n\t* @param string $message The message to be parsed\n\t* @param string $username The username to be parsed\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_post_quotes($message, $username, $text_only=false)\n\t{\n\t\tglobal $lang, $templates, $theme, $mybb;\n\n\t\t$linkback = $date = \"\";\n\n\t\t$message = trim($message);\n\t\t$message = preg_replace(\"#(^<br(\\s?)(\\/?)>|<br(\\s?)(\\/?)>$)#i\", \"\", $message);\n\n\t\tif(!$message)\n\t\t{\n\t\t\treturn '';\n\t\t}\n\n\t\t$username .= \"'\";\n\t\t$delete_quote = true;\n\n\t\tpreg_match(\"#pid=(?:&quot;|\\\"|')?([0-9]+)[\\\"']?(?:&quot;|\\\"|')?#i\", $username, $match);\n\t\tif((int)$match[1])\n\t\t{\n\t\t\t$pid = (int)$match[1];\n\t\t\t$url = $mybb->settings['bburl'].\"/\".get_post_link($pid).\"#pid$pid\";\n\t\t\tif(defined(\"IN_ARCHIVE\"))\n\t\t\t{\n\t\t\t\t$linkback = \" <a href=\\\"{$url}\\\">[ -> ]</a>\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teval(\"\\$linkback = \\\" \".$templates->get(\"postbit_gotopost\", 1, 0).\"\\\";\");\n\t\t\t}\n\n\t\t\t$username = preg_replace(\"#(?:&quot;|\\\"|')? pid=(?:&quot;|\\\"|')?[0-9]+[\\\"']?(?:&quot;|\\\"|')?#i\", '', $username);\n\t\t\t$delete_quote = false;\n\t\t}\n\n\t\tunset($match);\n\t\tpreg_match(\"#dateline=(?:&quot;|\\\"|')?([0-9]+)(?:&quot;|\\\"|')?#i\", $username, $match);\n\t\tif((int)$match[1])\n\t\t{\n\t\t\tif($match[1] < TIME_NOW)\n\t\t\t{\n\t\t\t\t$postdate = my_date('relative', (int)$match[1]);\n\t\t\t\t$date = \" ({$postdate})\";\n\t\t\t}\n\t\t\t$username = preg_replace(\"#(?:&quot;|\\\"|')? dateline=(?:&quot;|\\\"|')?[0-9]+(?:&quot;|\\\"|')?#i\", '', $username);\n\t\t\t$delete_quote = false;\n\t\t}\n\n\t\tif($delete_quote)\n\t\t{\n\t\t\t$username = my_substr($username, 0, my_strlen($username)-1);\n\t\t}\n\n\t\tif(!empty($this->options['allow_html']))\n\t\t{\n\t\t\t$username = htmlspecialchars_uni($username);\n\t\t}\n\n\t\tif($text_only)\n\t\t{\n\t\t\treturn \"\\n{$username} {$lang->wrote}{$date}\\n--\\n{$message}\\n--\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$span = \"\";\n\t\t\tif(!$delete_quote)\n\t\t\t{\n\t\t\t\t$span = \"<span>{$date}</span>\";\n\t\t\t}\n\n\t\t\teval(\"\\$mycode_quote = \\\"\".$templates->get(\"mycode_quote_post\", 1, 0).\"\\\";\");\n\t\t\treturn $mycode_quote;\n\t\t}\n\t}\n\n\t/**\n\t* Parses quotes with post id and/or dateline.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_post_quotes_callback1($matches)\n\t{\n\t\treturn $this->mycode_parse_post_quotes($matches[4],$matches[2].$matches[3]);\n\t}\n\n\t/**\n\t* Parses quotes with post id and/or dateline.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_post_quotes_callback2($matches)\n\t{\n\t\treturn $this->mycode_parse_post_quotes($matches[4],$matches[2].$matches[3], true);\n\t}\n\n\t/**\n\t* Parses code MyCode.\n\t*\n\t* @param string $code The message to be parsed\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_code($code, $text_only=false)\n\t{\n\t\tglobal $lang, $templates;\n\n\t\tif($text_only == true)\n\t\t{\n\t\t\treturn \"\\n{$lang->code}\\n--\\n{$code}\\n--\\n\";\n\t\t}\n\n\t\t// Clean the string before parsing.\n\t\t$code = preg_replace('#^(\\t*)(\\n|\\r|\\0|\\x0B| )*#', '\\\\1', $code);\n\t\t$code = rtrim($code);\n\t\t$original = preg_replace('#^\\t*#', '', $code);\n\n\t\tif(empty($original))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$code = str_replace('$', '&#36;', $code);\n\t\t$code = preg_replace('#\\$([0-9])#', '\\\\\\$\\\\1', $code);\n\t\t$code = str_replace('\\\\', '&#92;', $code);\n\t\t$code = str_replace(\"\\t\", '&nbsp;&nbsp;&nbsp;&nbsp;', $code);\n\t\t$code = str_replace(\"  \", '&nbsp;&nbsp;', $code);\n\n\t\teval(\"\\$mycode_code = \\\"\".$templates->get(\"mycode_code\", 1, 0).\"\\\";\");\n\t\treturn $mycode_code;\n\t}\n\n\t/**\n\t* Parses code MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_code_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_code($matches[1], true);\n\t}\n\n\t/**\n\t* Parses PHP code MyCode.\n\t*\n\t* @param string $str The message to be parsed\n\t* @param boolean $bare_return Whether or not it should return it as pre-wrapped in a div or not.\n\t* @param boolean $text_only Are we formatting as text?\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_php($str, $bare_return = false, $text_only = false)\n\t{\n\t\tglobal $lang, $templates;\n\n\t\tif($text_only == true)\n\t\t{\n\t\t\treturn \"\\n{$lang->php_code}\\n--\\n$str\\n--\\n\";\n\t\t}\n\n\t\t// Clean the string before parsing except tab spaces.\n\t\t$str = preg_replace('#^(\\t*)(\\n|\\r|\\0|\\x0B| )*#', '\\\\1', $str);\n\t\t$str = rtrim($str);\n\n\t\t$original = preg_replace('#^\\t*#', '', $str);\n\n\t\tif(empty($original))\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t// See if open and close tags are provided.\n\t\t$added_open_tag = false;\n\t\tif(!preg_match(\"#^\\s*<\\?#si\", $str))\n\t\t{\n\t\t\t$added_open_tag = true;\n\t\t\t$str = \"<?php \\n\".$str;\n\t\t}\n\n\t\t$added_end_tag = false;\n\t\tif(!preg_match(\"#\\?>\\s*$#si\", $str))\n\t\t{\n\t\t\t$added_end_tag = true;\n\t\t\t$str = $str.\" \\n?>\";\n\t\t}\n\n\t\t$code = @highlight_string($str, true);\n\n\t\t// Do the actual replacing.\n\t\t$code = preg_replace('#<code>\\s*<span style=\"color: \\#000000\">\\s*#i', \"<code>\", $code);\n\t\t$code = preg_replace(\"#</span>\\s*</code>#\", \"</code>\", $code);\n\t\t$code = preg_replace(\"#</span>(\\r\\n?|\\n?)</code>#\", \"</span></code>\", $code);\n\t\t$code = str_replace(\"\\\\\", '&#092;', $code);\n\t\t$code = str_replace('$', '&#36;', $code);\n\t\t$code = preg_replace(\"#&amp;\\#([0-9]+);#si\", \"&#$1;\", $code);\n\n\t\tif($added_open_tag)\n\t\t{\n\t\t\t$code = preg_replace(\"#<code><span style=\\\"color: \\#([A-Z0-9]{6})\\\">&lt;\\?php( |&nbsp;)(<br />?)#\", \"<code><span style=\\\"color: #$1\\\">\", $code);\n\t\t}\n\n\t\tif($added_end_tag)\n\t\t{\n\t\t\t$code = str_replace(\"?&gt;</span></code>\", \"</span></code>\", $code);\n\t\t\t// Wait a minute. It fails highlighting? Stupid highlighter.\n\t\t\t$code = str_replace(\"?&gt;</code>\", \"</code>\", $code);\n\t\t}\n\n\t\t$code = preg_replace(\"#<span style=\\\"color: \\#([A-Z0-9]{6})\\\"></span>#\", \"\", $code);\n\t\t$code = str_replace(\"<code>\", \"<div dir=\\\"ltr\\\"><code>\", $code);\n\t\t$code = str_replace(\"</code>\", \"</code></div>\", $code);\n\t\t$code = preg_replace(\"# *$#\", \"\", $code);\n\n\t\tif($bare_return)\n\t\t{\n\t\t\treturn $code;\n\t\t}\n\n\t\t// Send back the code all nice and pretty\n\t\teval(\"\\$mycode_php = \\\"\".$templates->get(\"mycode_php\", 1, 0).\"\\\";\");\n\t\treturn $mycode_php;\n\t}\n\n\t/**\n\t* Parses PHP code MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_php_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_php($matches[1], false, true);\n\t}\n\n\t/**\n\t* Parses URL MyCode.\n\t*\n\t* @param string $url The URL to link to.\n\t* @param string $name The name of the link.\n\t* @return string The built-up link.\n\t*/\n\tfunction mycode_parse_url($url, $name=\"\")\n\t{\n\t\tglobal $templates;\n\t\tif(!preg_match(\"#^[a-z0-9]+://#i\", $url))\n\t\t{\n\t\t\t$url = \"http://\".$url;\n\t\t}\n\n\t\tif(!empty($this->options['allow_html']))\n\t\t{\n\t\t\t$url = $this->parse_html($url);\n\t\t}\n\n\t\tif(!$name)\n\t\t{\n\t\t\t$name = $url;\n\t\t}\n\n\t\tif($name == $url && (!isset($this->options['shorten_urls']) || !empty($this->options['shorten_urls'])))\n\t\t{\n\t\t\t$name = htmlspecialchars_decode($name);\n\t\t\tif(my_strlen($name) > 55)\n\t\t\t{\n\t\t\t\t$name = my_substr($name , 0, 40).'...'.my_substr($name , -10);\n\t\t\t}\n\t\t\t$name = htmlspecialchars_uni($name);\n\t\t}\n\n\t\t$nofollow = '';\n\t\tif(!empty($this->options['nofollow_on']))\n\t\t{\n\t\t\t$nofollow = \" rel=\\\"nofollow\\\"\";\n\t\t}\n\n\t\t// Fix some entities in URLs\n\t\t$entities = array('$' => '%24', '&#36;' => '%24', '^' => '%5E', '`' => '%60', '[' => '%5B', ']' => '%5D', '{' => '%7B', '}' => '%7D', '\"' => '%22', '<' => '%3C', '>' => '%3E', ' ' => '%20');\n\t\t$url = str_replace(array_keys($entities), array_values($entities), $url);\n\n\t\t$name = preg_replace(\"#&amp;\\#([0-9]+);#si\", \"&#$1;\", $name); // Fix & but allow unicode\n\n\t\teval(\"\\$mycode_url = \\\"\".$templates->get(\"mycode_url\", 1, 0).\"\\\";\");\n\t\treturn $mycode_url;\n\t}\n\n\t/**\n\t* Parses URL MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up link.\n\t*/\n\tfunction mycode_parse_url_callback1($matches)\n\t{\n\t\tif(!isset($matches[3]))\n\t\t{\n\t\t\t$matches[3] = '';\n\t\t}\n\t\treturn $this->mycode_parse_url($matches[1].$matches[2], $matches[3]);\n\t}\n\n\t/**\n\t* Parses URL MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up link.\n\t*/\n\tfunction mycode_parse_url_callback2($matches)\n\t{\n\t\tif(!isset($matches[2]))\n\t\t{\n\t\t\t$matches[2] = '';\n\t\t}\n\t\treturn $this->mycode_parse_url($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param string $url The URL to the image\n\t * @param array $dimensions Optional array of dimensions\n\t * @param string $align\n\t * @return string\n\t */\n\tfunction mycode_parse_img($url, $dimensions=array(), $align='')\n\t{\n\t\tglobal $lang, $templates;\n\t\t$url = trim($url);\n\t\t$url = str_replace(\"\\n\", \"\", $url);\n\t\t$url = str_replace(\"\\r\", \"\", $url);\n\n\t\tif(!empty($this->options['allow_html']))\n\t\t{\n\t\t\t$url = $this->parse_html($url);\n\t\t}\n\n\t\t$css_align = '';\n\t\tif($align == \"right\")\n\t\t{\n\t\t\t$css_align = ' style=\"float: right;\"';\n\t\t}\n\t\telse if($align == \"left\")\n\t\t{\n\t\t\t$css_align = ' style=\"float: left;\"';\n\t\t}\n\n\t\tif($align)\n\t\t{\n\t\t\t$this->clear_needed = true;\n\t\t}\n\n\t\t$alt = basename($url);\n\t\t$alt = htmlspecialchars_decode($alt);\n\t\tif(my_strlen($alt) > 55)\n\t\t{\n\t\t\t$alt = my_substr($alt, 0, 40).'...'.my_substr($alt, -10);\n\t\t}\n\t\t$alt = htmlspecialchars_uni($alt);\n\n\t\t$alt = $lang->sprintf($lang->posted_image, $alt);\n\t\t$width = $height = '';\n\t\tif(isset($dimensions[0]) && $dimensions[0] > 0 && isset($dimensions[1]) && $dimensions[1] > 0)\n\t\t{\n\t\t\t$width = \" width=\\\"{$dimensions[0]}\\\"\";\n\t\t\t$height = \" height=\\\"{$dimensions[1]}\\\"\";\n\t\t}\n\n\t\teval(\"\\$mycode_img = \\\"\".$templates->get(\"mycode_img\", 1, 0).\"\\\";\");\n\t\treturn $mycode_img;\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback1($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[2]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback2($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[4], array($matches[1], $matches[2]));\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback3($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[3], array(), $matches[1]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_callback4($matches)\n\t{\n\t\treturn $this->mycode_parse_img($matches[5], array($matches[1], $matches[2]), $matches[3]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param string $url The URL to the image\n\t * @return string\n\t */\n\tfunction mycode_parse_img_disabled($url)\n\t{\n\t\tglobal $lang;\n\t\t$url = trim($url);\n\t\t$url = str_replace(\"\\n\", \"\", $url);\n\t\t$url = str_replace(\"\\r\", \"\", $url);\n\t\t$url = str_replace(\"\\'\", \"'\", $url);\n\n\t\t$image = $lang->sprintf($lang->posted_image, $this->mycode_parse_url($url));\n\t\treturn $image;\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback1($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[2]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback2($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[4]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback3($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[3]);\n\t}\n\n\t/**\n\t * Parses IMG MyCode disabled.\n\t *\n\t * @param array $matches Matches.\n\t * @return string Image code.\n\t */\n\tfunction mycode_parse_img_disabled_callback4($matches)\n\t{\n\t\treturn $this->mycode_parse_img_disabled($matches[5]);\n\t}\n\n\t/**\n\t* Parses email MyCode.\n\t*\n\t* @param string $email The email address to link to.\n\t* @param string $name The name for the link.\n\t* @return string The built-up email link.\n\t*/\n\tfunction mycode_parse_email($email, $name=\"\")\n\t{\n\t\tglobal $templates;\n\n\t\tif(!$name)\n\t\t{\n\t\t\t$name = $email;\n\t\t}\n\t\tif(preg_match(\"/^([a-zA-Z0-9-_\\+\\.]+?)@[a-zA-Z0-9-]+\\.[a-zA-Z0-9\\.-]+$/si\", $email))\n\t\t{\n\t\t\t$email = $email;\n\t\t}\n\t\telseif(preg_match(\"/^([a-zA-Z0-9-_\\+\\.]+?)@[a-zA-Z0-9-]+\\.[a-zA-Z0-9\\.-]+\\?(.*?)$/si\", $email))\n\t\t{\n\t\t\t$email = htmlspecialchars_uni($email);\n\t\t}\n\n\t\teval(\"\\$mycode_email = \\\"\".$templates->get(\"mycode_email\", 1, 0).\"\\\";\");\n\t\treturn $mycode_email;\n\t}\n\n\t/**\n\t* Parses email MyCode.\n\t*\n\t* @param array $matches Matches\n\t* @return string The built-up email link.\n\t*/\n\tfunction mycode_parse_email_callback($matches)\n\t{\n\t\tif(!isset($matches[2]))\n\t\t{\n\t\t\t$matches[2] = '';\n\t\t}\n\t\treturn $this->mycode_parse_email($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t* Parses video MyCode.\n\t*\n\t* @param string $video The video provider.\n\t* @param string $url The video to link to.\n\t* @return string The built-up video code.\n\t*/\n\tfunction mycode_parse_video($video, $url)\n\t{\n\t\tglobal $templates;\n\n\t\tif(empty($video) || empty($url))\n\t\t{\n\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\t$parsed_url = @parse_url(urldecode($url));\n\t\tif($parsed_url == false)\n\t\t{\n\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\t$fragments = array();\n\t\tif($parsed_url['fragment'])\n\t\t{\n\t\t\t$fragments = explode(\"&\", $parsed_url['fragment']);\n\t\t}\n\n\t\t$queries = explode(\"&\", $parsed_url['query']);\n\n\t\t$input = array();\n\t\tforeach($queries as $query)\n\t\t{\n\t\t\tlist($key, $value) = explode(\"=\", $query);\n\t\t\t$key = str_replace(\"amp;\", \"\", $key);\n\t\t\t$input[$key] = $value;\n\t\t}\n\n\t\t$path = explode('/', $parsed_url['path']);\n\n\t\tswitch($video)\n\t\t{\n\t\t\tcase \"dailymotion\":\n\t\t\t\tlist($id) = explode('_', $path[2], 2); // http://www.dailymotion.com/video/fds123_title-goes-here\n\t\t\t\tbreak;\n\t\t\tcase \"metacafe\":\n\t\t\t\t$id = $path[2]; // http://www.metacafe.com/watch/fds123/title_goes_here/\n\t\t\t\t$title = htmlspecialchars_uni($path[3]);\n\t\t\t\tbreak;\n\t\t\tcase \"myspacetv\":\n\t\t\t\t$id = $path[4]; // http://www.myspace.com/video/fds/fds/123\n\t\t\t\tbreak;\n\t\t\tcase \"facebook\":\n\t\t\t\tif(isset($input['v']))\n\t\t\t\t{\n\t\t\t\t\t$id = $input['v']; // http://www.facebook.com/video/video.php?v=123\n\t\t\t\t}\n\t\t\t\telseif(substr($path[3], 0, 3) == 'vb.')\n\t\t\t\t{\n\t\t\t\t\t$id = $path[4]; // https://www.facebook.com/fds/videos/vb.123/123/\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[3]; // https://www.facebook.com/fds/videos/123/\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"veoh\":\n\t\t\t\t$id = $path[2]; // http://www.veoh.com/watch/123\n\t\t\t\tbreak;\n\t\t\tcase \"liveleak\":\n\t\t\t\t$id = $input['i']; // http://www.liveleak.com/view?i=123\n\t\t\t\tbreak;\n\t\t\tcase \"yahoo\":\n\t\t\t\tif(isset($path[2]))\n\t\t\t\t{\n\t\t\t\t\t$id = $path[2]; // http://xy.screen.yahoo.com/fds/fds-123.html\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[1]; // http://xy.screen.yahoo.com/fds-123.html\n\t\t\t\t}\n\t\t\t\t// Support for localized portals\n\t\t\t\t$domain = explode('.', $parsed_url['host']);\n\t\t\t\tif($domain[0] != 'screen' && preg_match('#^([a-z-]+)$#', $domain[0]))\n\t\t\t\t{\n\t\t\t\t\t$local = \"{$domain[0]}.\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$local = '';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"vimeo\":\n\t\t\t\tif(isset($path[3]))\n\t\t\t\t{\n\t\t\t\t\t$id = $path[3]; // http://vimeo.com/fds/fds/fds123\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[1]; // http://vimeo.com/fds123\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"youtube\":\n\t\t\t\tif($fragments[0])\n\t\t\t\t{\n\t\t\t\t\t$id = str_replace('!v=', '', $fragments[0]); // http://www.youtube.com/watch#!v=fds123\n\t\t\t\t}\n\t\t\t\telseif($input['v'])\n\t\t\t\t{\n\t\t\t\t\t$id = $input['v']; // http://www.youtube.com/watch?v=fds123\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$id = $path[1]; // http://www.youtu.be/fds123\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"twitch\":\n\t\t\t\tif(isset($path[3]))\n\t\t\t\t{\n\t\t\t\t\t$id = $path[3]; // https://www.twitch.tv/giantbomb/v/100048090\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\tif(empty($id))\n\t\t{\n\t\t\treturn \"[video={$video}]{$url}[/video]\";\n\t\t}\n\n\t\t$id = htmlspecialchars_uni($id);\n\n\t\teval(\"\\$video_code = \\\"\".$templates->get(\"video_{$video}_embed\").\"\\\";\");\n\t\treturn $video_code;\n\t}\n\n\t/**\n\t* Parses video MyCode.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up video code.\n\t*/\n\tfunction mycode_parse_video_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_video($matches[1], $matches[2]);\n\t}\n\n\t/**\n\t * Parses video MyCode disabled.\n\t *\n\t * @param string $url The URL to the video\n\t * @return string\n\t */\n\tfunction mycode_parse_video_disabled($url)\n\t{\n\t\tglobal $lang;\n\t\t$url = trim($url);\n\t\t$url = str_replace(\"\\n\", \"\", $url);\n\t\t$url = str_replace(\"\\r\", \"\", $url);\n\t\t$url = str_replace(\"\\'\", \"'\", $url);\n\n\t\t$video = $lang->sprintf($lang->posted_video, $this->mycode_parse_url($url));\n\t\treturn $video;\n\t}\n\n\t/**\n\t* Parses video MyCode disabled.\n\t*\n\t* @param array $matches Matches.\n\t* @return string The built-up video code.\n\t*/\n\tfunction mycode_parse_video_disabled_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_video_disabled($matches[2]);\n\t}\n\n\t/**\n\t* Parses URLs automatically.\n\t*\n\t* @param string $message The message to be parsed\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_auto_url($message)\n\t{\n\t\t$message = \" \".$message;\n\t\t// Links should end with slashes, numbers, characters and braces but not with dots, commas or question marks\n\t\t$message = preg_replace_callback(\"#([\\>\\s\\(\\)])(http|https|ftp|news|irc|ircs|irc6){1}://([^\\/\\\"\\s\\<\\[\\.]+\\.([^\\/\\\"\\s\\<\\[\\.]+\\.)*[\\w]+(:[0-9]+)?(/([^\\\"\\s<\\[]|\\[\\])*)?([\\w\\/\\)]))#iu\", array($this, 'mycode_auto_url_callback'), $message);\n\t\t$message = preg_replace_callback(\"#([\\>\\s\\(\\)])(www|ftp)\\.(([^\\/\\\"\\s\\<\\[\\.]+\\.)*[\\w]+(:[0-9]+)?(/([^\\\"\\s<\\[]|\\[\\])*)?([\\w\\/\\)]))#iu\", array($this, 'mycode_auto_url_callback'), $message);\n\t\t$message = my_substr($message, 1);\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t* Parses URLs automatically.\n\t*\n\t* @param array $matches Matches\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_auto_url_callback($matches)\n\t{\n\t\t$external = '';\n\t\t// Allow links like http://en.wikipedia.org/wiki/PHP_(disambiguation) but detect mismatching braces\n\t\twhile(my_substr($matches[3], -1) == ')')\n\t\t{\n\t\t\tif(substr_count($matches[3], ')') > substr_count($matches[3], '('))\n\t\t\t{\n\t\t\t\t$matches[3] = my_substr($matches[3], 0, -1);\n\t\t\t\t$external = ')'.$external;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Example: ([...] http://en.wikipedia.org/Example_(disambiguation).)\n\t\t\t$last_char = my_substr($matches[3], -1);\n\t\t\twhile($last_char == '.' || $last_char == ',' || $last_char == '?' || $last_char == '!')\n\t\t\t{\n\t\t\t\t$matches[3] = my_substr($matches[3], 0, -1);\n\t\t\t\t$external = $last_char.$external;\n\t\t\t\t$last_char = my_substr($matches[3], -1);\n\t\t\t}\n\t\t}\n\t\tif($matches[2] == 'www' || $matches[2] == 'ftp')\n\t\t{\n\t\t\treturn \"{$matches[1]}[url]{$matches[2]}.{$matches[3]}[/url]{$external}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn \"{$matches[1]}[url]{$matches[2]}://{$matches[3]}[/url]{$external}\";\n\t\t}\n\t}\n\n\t/**\n\t* Parses list MyCode.\n\t*\n\t* @param string $message The message to be parsed\n\t* @param string $type The list type\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_list($message, $type=\"\")\n\t{\n\t\t// No list elements? That's invalid HTML\n\t\tif(strpos($message, '[*]') === false)\n\t\t{\n\t\t\t$message = \"[*]{$message}\";\n\t\t}\n\n\t\t$message = preg_replace(\"#[^\\S\\n\\r]*\\[\\*\\]\\s*#\", \"</li>\\n<li>\", $message);\n\t\t$message .= \"</li>\";\n\n\t\tif($type)\n\t\t{\n\t\t\t$list = \"\\n<ol type=\\\"$type\\\" class=\\\"mycode_list\\\">$message</ol>\\n\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$list = \"<ul class=\\\"mycode_list\\\">$message</ul>\\n\";\n\t\t}\n\t\t$list = preg_replace(\"#<(ol type=\\\"$type\\\"|ul)>\\s*</li>#\", \"<$1>\", $list);\n\t\treturn $list;\n\t}\n\n\t/**\n\t* Parses list MyCode.\n\t*\n\t* @param array $matches Matches\n\t* @return string The parsed message.\n\t*/\n\tfunction mycode_parse_list_callback($matches)\n\t{\n\t\treturn $this->mycode_parse_list($matches[3], $matches[2]);\n\t}\n\n\t/**\n\t* Prepares list MyCode by finding the matching list tags.\n\t*\n\t* @param array $matches Matches\n\t* @return string Temporary replacements.\n\t*/\n\tfunction mycode_prepare_list($matches)\n\t{\n\t\t// Append number to identify matching list tags\n\t\tif(strcasecmp($matches[1], '[/list]') == 0)\n\t\t{\n\t\t\t$count = array_pop($this->list_elements);\n\t\t\tif($count !== NULL)\n\t\t\t{\n\t\t\t\treturn \"[/list&{$count}]\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// No open list tag...\n\t\t\t\treturn $matches[0];\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t++$this->list_count;\n\t\t\t$this->list_elements[] = $this->list_count;\n\t\t\tif(!empty($matches[2]))\n\t\t\t{\n\t\t\t\treturn \"[list{$matches[2]}&{$this->list_count}]\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn \"[list&{$this->list_count}]\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Strips smilies from a string\n\t *\n\t * @param string $message The message for smilies to be stripped from\n\t * @return string The message with smilies stripped\n\t */\n\tfunction strip_smilies($message)\n\t{\n\t\tif($this->smilies_cache == 0)\n\t\t{\n\t\t\t$this->cache_smilies();\n\t\t}\n\t\tif(is_array($this->smilies_cache))\n\t\t{\n\t\t\t$message = str_replace($this->smilies_cache, array_keys($this->smilies_cache), $message);\n\t\t}\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Highlights a string\n\t *\n\t * @param string $message The message to be highligted\n\t * @param string $highlight The highlight keywords\n\t * @return string The message with highlight bbcodes\n\t */\n\tfunction highlight_message($message, $highlight)\n\t{\n\t\tif(empty($this->highlight_cache))\n\t\t{\n\t\t\t$this->highlight_cache = build_highlight_array($highlight);\n\t\t}\n\n\t\tif(is_array($this->highlight_cache) && !empty($this->highlight_cache))\n\t\t{\n\t\t\t$message = preg_replace(array_keys($this->highlight_cache), $this->highlight_cache, $message);\n\t\t}\n\n\t\treturn $message;\n\t}\n\n\t/**\n\t * Parses message to plain text equivalents of MyCode.\n\t *\n\t * @param string $message The message to be parsed\n\t * @param array $options\n\t * @return string The parsed message.\n\t */\n\tfunction text_parse_message($message, $options=array())\n\t{\n\t\tglobal $plugins;\n\n\t\tif(empty($this->options))\n\t\t{\n\t\t\t$this->options = $options;\n\t\t}\n\n\t\t// Filter bad words if requested.\n\t\tif(!empty($this->options['filter_badwords']))\n\t\t{\n\t\t\t$message = $this->parse_badwords($message);\n\t\t}\n\n\t\t// Parse quotes first\n\t\t$message = $this->mycode_parse_quotes($message, true);\n\n\t\t$message = preg_replace_callback(\"#\\[php\\](.*?)\\[/php\\](\\r\\n?|\\n?)#is\", array($this, 'mycode_parse_php_callback'), $message);\n\t\t$message = preg_replace_callback(\"#\\[code\\](.*?)\\[/code\\](\\r\\n?|\\n?)#is\", array($this, 'mycode_parse_code_callback'), $message);\n\n\t\t$find = array(\n\t\t\t\"#\\[(b|u|i|s|url|email|color|img)\\](.*?)\\[/\\\\1\\]#is\",\n\t\t\t\"#\\[img=([1-9][0-9]*)x([1-9][0-9]*)\\](\\r\\n?|\\n?)(https?://([^<>\\\"']+?))\\[/img\\]#is\",\n\t\t\t\"#\\[url=((?!javascript)[a-z]+?://)([^\\r\\n\\\"<]+?)\\](.+?)\\[/url\\]#si\",\n\t\t\t\"#\\[url=((?!javascript:)[^\\r\\n\\\"<&\\(\\)]+?)\\](.+?)\\[/url\\]#si\",\n\t\t);\n\n\t\t$replace = array(\n\t\t\t\"$2\",\n\t\t\t\"$4\",\n\t\t\t\"$3 ($1$2)\",\n\t\t\t\"$2 ($1)\",\n\t\t);\n\t\t$message = preg_replace($find, $replace, $message);\n\n\t\t// Replace \"me\" code and slaps if we have a username\n\t\tif(!empty($this->options['me_username']))\n\t\t{\n\t\t\tglobal $lang;\n\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/me ([^\\r\\n<]*)#i', \"\\\\1* {$this->options['me_username']} \\\\2\", $message);\n\t\t\t$message = preg_replace('#(>|^|\\r|\\n)/slap ([^\\r\\n<]*)#i', \"\\\\1* {$this->options['me_username']} {$lang->slaps} \\\\2 {$lang->with_trout}\", $message);\n\t\t}\n\n\t\t// Reset list cache\n\t\t$this->list_elements = array();\n\t\t$this->list_count = 0;\n\n\t\t// Find all lists\n\t\t$message = preg_replace_callback(\"#(\\[list(=(a|A|i|I|1))?\\]|\\[/list\\])#si\", array($this, 'mycode_prepare_list'), $message);\n\n\t\t// Replace all lists\n\t\tfor($i = $this->list_count; $i > 0; $i--)\n\t\t{\n\t\t\t// Ignores missing end tags\n\t\t\t$message = preg_replace_callback(\"#\\s?\\[list(=(a|A|i|I|1))?&{$i}\\](.*?)(\\[/list&{$i}\\]|$)(\\r\\n?|\\n?)#si\", array($this, 'mycode_parse_list_callback'), $message, 1);\n\t\t}\n\n\t\t// Run plugin hooks\n\t\t$message = $plugins->run_hooks(\"text_parse_message\", $message);\n\n\t\treturn $message;\n\t}\n}\n", "<?php\n/**\n * MyBB 1.8\n * Copyright 2014 MyBB Group, All Rights Reserved\n *\n * Website: http://www.mybb.com\n * License: http://www.mybb.com/about/license\n *\n */\n\n/**\n * Outputs a page directly to the browser, parsing anything which needs to be parsed.\n *\n * @param string $contents The contents of the page.\n */\nfunction output_page($contents)\n{\n\tglobal $db, $lang, $theme, $templates, $plugins, $mybb;\n\tglobal $debug, $templatecache, $templatelist, $maintimer, $globaltime, $parsetime;\n\n\t$contents = parse_page($contents);\n\t$totaltime = format_time_duration($maintimer->stop());\n\t$contents = $plugins->run_hooks(\"pre_output_page\", $contents);\n\n\tif($mybb->usergroup['cancp'] == 1 || $mybb->dev_mode == 1)\n\t{\n\t\tif($mybb->settings['extraadmininfo'] != 0)\n\t\t{\n\t\t\t$phptime = $maintimer->totaltime - $db->query_time;\n\t\t\t$query_time = $db->query_time;\n\n\t\t\tif($maintimer->totaltime > 0)\n\t\t\t{\n\t\t\t\t$percentphp = number_format((($phptime/$maintimer->totaltime) * 100), 2);\n\t\t\t\t$percentsql = number_format((($query_time/$maintimer->totaltime) * 100), 2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// if we've got a super fast script...  all we can do is assume something\n\t\t\t\t$percentphp = 0;\n\t\t\t\t$percentsql = 0;\n\t\t\t}\n\n\t\t\t$serverload = get_server_load();\n\n\t\t\tif(my_strpos(getenv(\"REQUEST_URI\"), \"?\"))\n\t\t\t{\n\t\t\t\t$debuglink = htmlspecialchars_uni(getenv(\"REQUEST_URI\")) . \"&amp;debug=1\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$debuglink = htmlspecialchars_uni(getenv(\"REQUEST_URI\")) . \"?debug=1\";\n\t\t\t}\n\n\t\t\t$memory_usage = get_memory_usage();\n\n\t\t\tif($memory_usage)\n\t\t\t{\n\t\t\t\t$memory_usage = $lang->sprintf($lang->debug_memory_usage, get_friendly_size($memory_usage));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$memory_usage = '';\n\t\t\t}\n\t\t\t// MySQLi is still MySQL, so present it that way to the user\n\t\t\t$database_server = $db->short_title;\n\n\t\t\tif($database_server == 'MySQLi')\n\t\t\t{\n\t\t\t\t$database_server = 'MySQL';\n\t\t\t}\n\t\t\t$generated_in = $lang->sprintf($lang->debug_generated_in, $totaltime);\n\t\t\t$debug_weight = $lang->sprintf($lang->debug_weight, $percentphp, $percentsql, $database_server);\n\t\t\t$sql_queries = $lang->sprintf($lang->debug_sql_queries, $db->query_count);\n\t\t\t$server_load = $lang->sprintf($lang->debug_server_load, $serverload);\n\n\t\t\teval(\"\\$debugstuff = \\\"\".$templates->get(\"debug_summary\").\"\\\";\");\n\t\t\t$contents = str_replace(\"<debugstuff>\", $debugstuff, $contents);\n\t\t}\n\n\t\tif($mybb->debug_mode == true)\n\t\t{\n\t\t\tdebug_page();\n\t\t}\n\t}\n\n\t$contents = str_replace(\"<debugstuff>\", \"\", $contents);\n\n\tif($mybb->settings['gzipoutput'] == 1)\n\t{\n\t\t$contents = gzip_encode($contents, $mybb->settings['gziplevel']);\n\t}\n\n\t@header(\"Content-type: text/html; charset={$lang->settings['charset']}\");\n\n\techo $contents;\n\n\t$plugins->run_hooks(\"post_output_page\");\n}\n\n/**\n * Adds a function or class to the list of code to run on shutdown.\n *\n * @param string|array $name The name of the function.\n * @param mixed $arguments Either an array of arguments for the function or one argument\n * @return boolean True if function exists, otherwise false.\n */\nfunction add_shutdown($name, $arguments=array())\n{\n\tglobal $shutdown_functions;\n\n\tif(!is_array($shutdown_functions))\n\t{\n\t\t$shutdown_functions = array();\n\t}\n\n\tif(!is_array($arguments))\n\t{\n\t\t$arguments = array($arguments);\n\t}\n\n\tif(is_array($name) && method_exists($name[0], $name[1]))\n\t{\n\t\t$shutdown_functions[] = array('function' => $name, 'arguments' => $arguments);\n\t\treturn true;\n\t}\n\telse if(!is_array($name) && function_exists($name))\n\t{\n\t\t$shutdown_functions[] = array('function' => $name, 'arguments' => $arguments);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Runs the shutdown items after the page has been sent to the browser.\n *\n */\nfunction run_shutdown()\n{\n\tglobal $config, $db, $cache, $plugins, $error_handler, $shutdown_functions, $shutdown_queries, $done_shutdown, $mybb;\n\n\tif($done_shutdown == true || !$config || (isset($error_handler) && $error_handler->has_errors))\n\t{\n\t\treturn;\n\t}\n\n\tif(empty($shutdown_queries) && empty($shutdown_functions))\n\t{\n\t\t// Nothing to do\n\t\treturn;\n\t}\n\n\t// Missing the core? Build\n\tif(!is_object($mybb))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_core.php\";\n\t\t$mybb = new MyBB;\n\n\t\t// Load the settings\n\t\trequire MYBB_ROOT.\"inc/settings.php\";\n\t\t$mybb->settings = &$settings;\n\t}\n\n\t// If our DB has been deconstructed already (bad PHP 5.2.0), reconstruct\n\tif(!is_object($db))\n\t{\n\t\tif(!isset($config) || empty($config['database']['type']))\n\t\t{\n\t\t\trequire MYBB_ROOT.\"inc/config.php\";\n\t\t}\n\n\t\tif(isset($config))\n\t\t{\n\t\t\t// Load DB interface\n\t\t\trequire_once MYBB_ROOT.\"inc/db_base.php\";\n\n\t\t\trequire_once MYBB_ROOT.\"inc/db_\".$config['database']['type'].\".php\";\n\t\t\tswitch($config['database']['type'])\n\t\t\t{\n\t\t\t\tcase \"sqlite\":\n\t\t\t\t\t$db = new DB_SQLite;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"pgsql\":\n\t\t\t\t\t$db = new DB_PgSQL;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"mysqli\":\n\t\t\t\t\t$db = new DB_MySQLi;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$db = new DB_MySQL;\n\t\t\t}\n\n\t\t\t$db->connect($config['database']);\n\t\t\tif(!defined(\"TABLE_PREFIX\"))\n\t\t\t{\n\t\t\t\tdefine(\"TABLE_PREFIX\", $config['database']['table_prefix']);\n\t\t\t}\n\t\t\t$db->set_table_prefix(TABLE_PREFIX);\n\t\t}\n\t}\n\n\t// Cache object deconstructed? reconstruct\n\tif(!is_object($cache))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_datacache.php\";\n\t\t$cache = new datacache;\n\t\t$cache->cache();\n\t}\n\n\t// And finally.. plugins\n\tif(!is_object($plugins) && !defined(\"NO_PLUGINS\") && !($mybb->settings['no_plugins'] == 1))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_plugins.php\";\n\t\t$plugins = new pluginSystem;\n\t\t$plugins->load();\n\t}\n\n\t// We have some shutdown queries needing to be run\n\tif(is_array($shutdown_queries))\n\t{\n\t\t// Loop through and run them all\n\t\tforeach($shutdown_queries as $query)\n\t\t{\n\t\t\t$db->query($query);\n\t\t}\n\t}\n\n\t// Run any shutdown functions if we have them\n\tif(is_array($shutdown_functions))\n\t{\n\t\tforeach($shutdown_functions as $function)\n\t\t{\n\t\t\tcall_user_func_array($function['function'], $function['arguments']);\n\t\t}\n\t}\n\n\t$done_shutdown = true;\n}\n\n/**\n * Sends a specified amount of messages from the mail queue\n *\n * @param int $count The number of messages to send (Defaults to 10)\n */\nfunction send_mail_queue($count=10)\n{\n\tglobal $db, $cache, $plugins;\n\n\t$plugins->run_hooks(\"send_mail_queue_start\");\n\n\t// Check to see if the mail queue has messages needing to be sent\n\t$mailcache = $cache->read(\"mailqueue\");\n\tif($mailcache['queue_size'] > 0 && ($mailcache['locked'] == 0 || $mailcache['locked'] < TIME_NOW-300))\n\t{\n\t\t// Lock the queue so no other messages can be sent whilst these are (for popular boards)\n\t\t$cache->update_mailqueue(0, TIME_NOW);\n\n\t\t// Fetch emails for this page view - and send them\n\t\t$query = $db->simple_select(\"mailqueue\", \"*\", \"\", array(\"order_by\" => \"mid\", \"order_dir\" => \"asc\", \"limit_start\" => 0, \"limit\" => $count));\n\n\t\twhile($email = $db->fetch_array($query))\n\t\t{\n\t\t\t// Delete the message from the queue\n\t\t\t$db->delete_query(\"mailqueue\", \"mid='{$email['mid']}'\");\n\n\t\t\tif($db->affected_rows() == 1)\n\t\t\t{\n\t\t\t\tmy_mail($email['mailto'], $email['subject'], $email['message'], $email['mailfrom'], \"\", $email['headers'], true);\n\t\t\t}\n\t\t}\n\t\t// Update the mailqueue cache and remove the lock\n\t\t$cache->update_mailqueue(TIME_NOW, 0);\n\t}\n\n\t$plugins->run_hooks(\"send_mail_queue_end\");\n}\n\n/**\n * Parses the contents of a page before outputting it.\n *\n * @param string $contents The contents of the page.\n * @return string The parsed page.\n */\nfunction parse_page($contents)\n{\n\tglobal $lang, $theme, $mybb, $htmldoctype, $archive_url, $error_handler;\n\n\t$contents = str_replace('<navigation>', build_breadcrumb(), $contents);\n\t$contents = str_replace('<archive_url>', $archive_url, $contents);\n\n\tif($htmldoctype)\n\t{\n\t\t$contents = $htmldoctype.$contents;\n\t}\n\telse\n\t{\n\t\t$contents = \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\".$contents;\n\t}\n\n\t$contents = str_replace(\"<html\", \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\"\", $contents);\n\n\tif($lang->settings['rtl'] == 1)\n\t{\n\t\t$contents = str_replace(\"<html\", \"<html dir=\\\"rtl\\\"\", $contents);\n\t}\n\n\tif($lang->settings['htmllang'])\n\t{\n\t\t$contents = str_replace(\"<html\", \"<html xml:lang=\\\"\".$lang->settings['htmllang'].\"\\\" lang=\\\"\".$lang->settings['htmllang'].\"\\\"\", $contents);\n\t}\n\n\tif($error_handler->warnings)\n\t{\n\t\t$contents = str_replace(\"<body>\", \"<body>\\n\".$error_handler->show_warnings(), $contents);\n\t}\n\n\treturn $contents;\n}\n\n/**\n * Turn a unix timestamp in to a \"friendly\" date/time format for the user.\n *\n * @param string $format A date format according to PHP's date structure.\n * @param int $stamp The unix timestamp the date should be generated for.\n * @param int|string $offset The offset in hours that should be applied to times. (timezones) Or an empty string to determine that automatically\n * @param int $ty Whether or not to use today/yesterday formatting.\n * @param boolean $adodb Whether or not to use the adodb time class for < 1970 or > 2038 times\n * @return string The formatted timestamp.\n */\nfunction my_date($format, $stamp=0, $offset=\"\", $ty=1, $adodb=false)\n{\n\tglobal $mybb, $lang, $mybbadmin, $plugins;\n\n\t// If the stamp isn't set, use TIME_NOW\n\tif(empty($stamp))\n\t{\n\t\t$stamp = TIME_NOW;\n\t}\n\n\tif(!$offset && $offset != '0')\n\t{\n\t\tif(isset($mybb->user['uid']) && $mybb->user['uid'] != 0 && array_key_exists(\"timezone\", $mybb->user))\n\t\t{\n\t\t\t$offset = (float)$mybb->user['timezone'];\n\t\t\t$dstcorrection = $mybb->user['dst'];\n\t\t}\n\t\telseif(defined(\"IN_ADMINCP\"))\n\t\t{\n\t\t\t$offset = (float)$mybbadmin['timezone'];\n\t\t\t$dstcorrection = $mybbadmin['dst'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$offset = (float)$mybb->settings['timezoneoffset'];\n\t\t\t$dstcorrection = $mybb->settings['dstcorrection'];\n\t\t}\n\n\t\t// If DST correction is enabled, add an additional hour to the timezone.\n\t\tif($dstcorrection == 1)\n\t\t{\n\t\t\t++$offset;\n\t\t\tif(my_substr($offset, 0, 1) != \"-\")\n\t\t\t{\n\t\t\t\t$offset = \"+\".$offset;\n\t\t\t}\n\t\t}\n\t}\n\n\tif($offset == \"-\")\n\t{\n\t\t$offset = 0;\n\t}\n\n\t// Using ADOdb?\n\tif($adodb == true && !function_exists('adodb_date'))\n\t{\n\t\t$adodb = false;\n\t}\n\n\t$todaysdate = $yesterdaysdate = '';\n\tif($ty && ($format == $mybb->settings['dateformat'] || $format == 'relative'))\n\t{\n\t\t$_stamp = TIME_NOW;\n\t\tif($adodb == true)\n\t\t{\n\t\t\t$date = adodb_date($mybb->settings['dateformat'], $stamp + ($offset * 3600));\n\t\t\t$todaysdate = adodb_date($mybb->settings['dateformat'], $_stamp + ($offset * 3600));\n\t\t\t$yesterdaysdate = adodb_date($mybb->settings['dateformat'], ($_stamp - 86400) + ($offset * 3600));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$date = gmdate($mybb->settings['dateformat'], $stamp + ($offset * 3600));\n\t\t\t$todaysdate = gmdate($mybb->settings['dateformat'], $_stamp + ($offset * 3600));\n\t\t\t$yesterdaysdate = gmdate($mybb->settings['dateformat'], ($_stamp - 86400) + ($offset * 3600));\n\t\t}\n\t}\n\n\tif($format == 'relative')\n\t{\n\t\t// Relative formats both date and time\n\t\tif($ty != 2 && abs(TIME_NOW - $stamp) < 3600)\n\t\t{\n\t\t\t$diff = TIME_NOW - $stamp;\n\t\t\t$relative = array('prefix' => '', 'minute' => 0, 'plural' => $lang->rel_minutes_plural, 'suffix' => $lang->rel_ago);\n\n\t\t\tif($diff < 0)\n\t\t\t{\n\t\t\t\t$diff = abs($diff);\n\t\t\t\t$relative['suffix'] = '';\n\t\t\t\t$relative['prefix'] = $lang->rel_in;\n\t\t\t}\n\n\t\t\t$relative['minute'] = floor($diff / 60);\n\n\t\t\tif($relative['minute'] <= 1)\n\t\t\t{\n\t\t\t\t$relative['minute'] = 1;\n\t\t\t\t$relative['plural'] = $lang->rel_minutes_single;\n\t\t\t}\n\n\t\t\tif($diff <= 60)\n\t\t\t{\n\t\t\t\t// Less than a minute\n\t\t\t\t$relative['prefix'] = $lang->rel_less_than;\n\t\t\t}\n\n\t\t\t$date = $lang->sprintf($lang->rel_time, $relative['prefix'], $relative['minute'], $relative['plural'], $relative['suffix']);\n\t\t}\n\t\telseif($ty != 2 && abs(TIME_NOW - $stamp) < 43200)\n\t\t{\n\t\t\t$diff = TIME_NOW - $stamp;\n\t\t\t$relative = array('prefix' => '', 'hour' => 0, 'plural' => $lang->rel_hours_plural, 'suffix' => $lang->rel_ago);\n\n\t\t\tif($diff < 0)\n\t\t\t{\n\t\t\t\t$diff = abs($diff);\n\t\t\t\t$relative['suffix'] = '';\n\t\t\t\t$relative['prefix'] = $lang->rel_in;\n\t\t\t}\n\n\t\t\t$relative['hour'] = floor($diff / 3600);\n\n\t\t\tif($relative['hour'] <= 1)\n\t\t\t{\n\t\t\t\t$relative['hour'] = 1;\n\t\t\t\t$relative['plural'] = $lang->rel_hours_single;\n\t\t\t}\n\n\t\t\t$date = $lang->sprintf($lang->rel_time, $relative['prefix'], $relative['hour'], $relative['plural'], $relative['suffix']);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif($ty)\n\t\t\t{\n\t\t\t\tif($todaysdate == $date)\n\t\t\t\t{\n\t\t\t\t\t$date = $lang->today;\n\t\t\t\t}\n\t\t\t\telse if($yesterdaysdate == $date)\n\t\t\t\t{\n\t\t\t\t\t$date = $lang->yesterday;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$date .= $mybb->settings['datetimesep'];\n\t\t\tif($adodb == true)\n\t\t\t{\n\t\t\t\t$date .= adodb_date($mybb->settings['timeformat'], $stamp + ($offset * 3600));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$date .= gmdate($mybb->settings['timeformat'], $stamp + ($offset * 3600));\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tif($ty && $format == $mybb->settings['dateformat'])\n\t\t{\n\t\t\tif($todaysdate == $date)\n\t\t\t{\n\t\t\t\t$date = $lang->today;\n\t\t\t}\n\t\t\telse if($yesterdaysdate == $date)\n\t\t\t{\n\t\t\t\t$date = $lang->yesterday;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif($adodb == true)\n\t\t\t{\n\t\t\t\t$date = adodb_date($format, $stamp + ($offset * 3600));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$date = gmdate($format, $stamp + ($offset * 3600));\n\t\t\t}\n\t\t}\n\t}\n\n\tif(is_object($plugins))\n\t{\n\t\t$date = $plugins->run_hooks(\"my_date\", $date);\n\t}\n\n\treturn $date;\n}\n\n/**\n * Sends an email using PHP's mail function, formatting it appropriately.\n *\n * @param string $to Address the email should be addressed to.\n * @param string $subject The subject of the email being sent.\n * @param string $message The message being sent.\n * @param string $from The from address of the email, if blank, the board name will be used.\n * @param string $charset The chracter set being used to send this email.\n * @param string $headers\n * @param boolean $keep_alive Do we wish to keep the connection to the mail server alive to send more than one message (SMTP only)\n * @param string $format The format of the email to be sent (text or html). text is default\n * @param string $message_text The text message of the email if being sent in html format, for email clients that don't support html\n * @param string $return_email The email address to return to. Defaults to admin return email address.\n * @return bool\n */\nfunction my_mail($to, $subject, $message, $from=\"\", $charset=\"\", $headers=\"\", $keep_alive=false, $format=\"text\", $message_text=\"\", $return_email=\"\")\n{\n\tglobal $mybb;\n\tstatic $mail;\n\n\t// Does our object not exist? Create it\n\tif(!is_object($mail))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_mailhandler.php\";\n\n\t\tif($mybb->settings['mail_handler'] == 'smtp')\n\t\t{\n\t\t\trequire_once MYBB_ROOT.\"inc/mailhandlers/smtp.php\";\n\t\t\t$mail = new SmtpMail();\n\t\t}\n\t\telse\n\t\t{\n\t\t\trequire_once MYBB_ROOT.\"inc/mailhandlers/php.php\";\n\t\t\t$mail = new PhpMail();\n\t\t}\n\t}\n\n\t// Using SMTP based mail\n\tif($mybb->settings['mail_handler'] == 'smtp')\n\t{\n\t\tif($keep_alive == true)\n\t\t{\n\t\t\t$mail->keep_alive = true;\n\t\t}\n\t}\n\n\t// Using PHP based mail()\n\telse\n\t{\n\t\tif($mybb->settings['mail_parameters'] != '')\n\t\t{\n\t\t\t$mail->additional_parameters = $mybb->settings['mail_parameters'];\n\t\t}\n\t}\n\n\t// Build and send\n\t$mail->build_message($to, $subject, $message, $from, $charset, $headers, $format, $message_text, $return_email);\n\treturn $mail->send();\n}\n\n/**\n * Generates a unique code for POST requests to prevent XSS/CSRF attacks\n *\n * @return string The generated code\n */\nfunction generate_post_check()\n{\n\tglobal $mybb, $session;\n\tif($mybb->user['uid'])\n\t{\n\t\treturn md5($mybb->user['loginkey'].$mybb->user['salt'].$mybb->user['regdate']);\n\t}\n\t// Guests get a special string\n\telse\n\t{\n\t\treturn md5($session->useragent.$mybb->config['database']['username'].$mybb->settings['internal']['encryption_key']);\n\t}\n}\n\n/**\n * Verifies a POST check code is valid, if not shows an error (silently returns false on silent parameter)\n *\n * @param string $code The incoming POST check code\n * @param boolean $silent Silent mode or not (silent mode will not show the error to the user but returns false)\n * @return bool\n */\nfunction verify_post_check($code, $silent=false)\n{\n\tglobal $lang;\n\tif(generate_post_check() !== $code)\n\t{\n\t\tif($silent == true)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(defined(\"IN_ADMINCP\"))\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\terror($lang->invalid_post_code);\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\n/**\n * Return a parent list for the specified forum.\n *\n * @param int $fid The forum id to get the parent list for.\n * @return string The comma-separated parent list.\n */\nfunction get_parent_list($fid)\n{\n\tglobal $forum_cache;\n\tstatic $forumarraycache;\n\n\tif($forumarraycache[$fid])\n\t{\n\t\treturn $forumarraycache[$fid]['parentlist'];\n\t}\n\telseif($forum_cache[$fid])\n\t{\n\t\treturn $forum_cache[$fid]['parentlist'];\n\t}\n\telse\n\t{\n\t\tcache_forums();\n\t\treturn $forum_cache[$fid]['parentlist'];\n\t}\n}\n\n/**\n * Build a parent list of a specific forum, suitable for querying\n *\n * @param int $fid The forum ID\n * @param string $column The column name to add to the query\n * @param string $joiner The joiner for each forum for querying (OR | AND | etc)\n * @param string $parentlist The parent list of the forum - if you have it\n * @return string The query string generated\n */\nfunction build_parent_list($fid, $column=\"fid\", $joiner=\"OR\", $parentlist=\"\")\n{\n\tif(!$parentlist)\n\t{\n\t\t$parentlist = get_parent_list($fid);\n\t}\n\n\t$parentsexploded = explode(\",\", $parentlist);\n\t$builtlist = \"(\";\n\t$sep = '';\n\n\tforeach($parentsexploded as $key => $val)\n\t{\n\t\t$builtlist .= \"$sep$column='$val'\";\n\t\t$sep = \" $joiner \";\n\t}\n\n\t$builtlist .= \")\";\n\n\treturn $builtlist;\n}\n\n/**\n * Load the forum cache in to memory\n *\n * @param boolean $force True to force a reload of the cache\n * @return array The forum cache\n */\nfunction cache_forums($force=false)\n{\n\tglobal $forum_cache, $cache;\n\n\tif($force == true)\n\t{\n\t\t$forum_cache = $cache->read(\"forums\", 1);\n\t\treturn $forum_cache;\n\t}\n\n\tif(!$forum_cache)\n\t{\n\t\t$forum_cache = $cache->read(\"forums\");\n\t\tif(!$forum_cache)\n\t\t{\n\t\t\t$cache->update_forums();\n\t\t\t$forum_cache = $cache->read(\"forums\", 1);\n\t\t}\n\t}\n\treturn $forum_cache;\n}\n\n/**\n * Generate an array of all child and descendant forums for a specific forum.\n *\n * @param int $fid The forum ID\n * @return Array of descendants\n */\nfunction get_child_list($fid)\n{\n\tstatic $forums_by_parent;\n\n\t$forums = array();\n\tif(!is_array($forums_by_parent))\n\t{\n\t\t$forum_cache = cache_forums();\n\t\tforeach($forum_cache as $forum)\n\t\t{\n\t\t\tif($forum['active'] != 0)\n\t\t\t{\n\t\t\t\t$forums_by_parent[$forum['pid']][$forum['fid']] = $forum;\n\t\t\t}\n\t\t}\n\t}\n\tif(!is_array($forums_by_parent[$fid]))\n\t{\n\t\treturn $forums;\n\t}\n\n\tforeach($forums_by_parent[$fid] as $forum)\n\t{\n\t\t$forums[] = $forum['fid'];\n\t\t$children = get_child_list($forum['fid']);\n\t\tif(is_array($children))\n\t\t{\n\t\t\t$forums = array_merge($forums, $children);\n\t\t}\n\t}\n\treturn $forums;\n}\n\n/**\n * Produce a friendly error message page\n *\n * @param string $error The error message to be shown\n * @param string $title The title of the message shown in the title of the page and the error table\n */\nfunction error($error=\"\", $title=\"\")\n{\n\tglobal $header, $footer, $theme, $headerinclude, $db, $templates, $lang, $mybb, $plugins;\n\n\t$error = $plugins->run_hooks(\"error\", $error);\n\tif(!$error)\n\t{\n\t\t$error = $lang->unknown_error;\n\t}\n\n\t// AJAX error message?\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\t@header(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\t\techo json_encode(array(\"errors\" => array($error)));\n\t\texit;\n\t}\n\n\tif(!$title)\n\t{\n\t\t$title = $mybb->settings['bbname'];\n\t}\n\n\t$timenow = my_date('relative', TIME_NOW);\n\treset_breadcrumb();\n\tadd_breadcrumb($lang->error);\n\n\teval(\"\\$errorpage = \\\"\".$templates->get(\"error\").\"\\\";\");\n\toutput_page($errorpage);\n\n\texit;\n}\n\n/**\n * Produce an error message for displaying inline on a page\n *\n * @param array $errors Array of errors to be shown\n * @param string $title The title of the error message\n * @param array $json_data JSON data to be encoded (we may want to send more data; e.g. newreply.php uses this for CAPTCHA)\n * @return string The inline error HTML\n */\nfunction inline_error($errors, $title=\"\", $json_data=array())\n{\n\tglobal $theme, $mybb, $db, $lang, $templates;\n\n\tif(!$title)\n\t{\n\t\t$title = $lang->please_correct_errors;\n\t}\n\n\tif(!is_array($errors))\n\t{\n\t\t$errors = array($errors);\n\t}\n\n\t// AJAX error message?\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\t@header(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\n\t\tif(empty($json_data))\n\t\t{\n\t\t\techo json_encode(array(\"errors\" => $errors));\n\t\t}\n\t\telse\n\t\t{\n\t\t\techo json_encode(array_merge(array(\"errors\" => $errors), $json_data));\n\t\t}\n\t\texit;\n\t}\n\n\t$errorlist = '';\n\n\tforeach($errors as $error)\n\t{\n\t\t$errorlist .= \"<li>\".$error.\"</li>\\n\";\n\t}\n\n\teval(\"\\$errors = \\\"\".$templates->get(\"error_inline\").\"\\\";\");\n\n\treturn $errors;\n}\n\n/**\n * Presents the user with a \"no permission\" page\n */\nfunction error_no_permission()\n{\n\tglobal $mybb, $theme, $templates, $db, $lang, $plugins, $session;\n\n\t$time = TIME_NOW;\n\t$plugins->run_hooks(\"no_permission\");\n\n\t$noperm_array = array (\n\t\t\"nopermission\" => '1',\n\t\t\"location1\" => 0,\n\t\t\"location2\" => 0\n\t);\n\n\t$db->update_query(\"sessions\", $noperm_array, \"sid='{$session->sid}'\");\n\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\theader(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\t\techo json_encode(array(\"errors\" => array($lang->error_nopermission_user_ajax)));\n\t\texit;\n\t}\n\n\tif($mybb->user['uid'])\n\t{\n\t\t$lang->error_nopermission_user_username = $lang->sprintf($lang->error_nopermission_user_username, htmlspecialchars_uni($mybb->user['username']));\n\t\teval(\"\\$errorpage = \\\"\".$templates->get(\"error_nopermission_loggedin\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\t// Redirect to where the user came from\n\t\t$redirect_url = $_SERVER['PHP_SELF'];\n\t\tif($_SERVER['QUERY_STRING'])\n\t\t{\n\t\t\t$redirect_url .= '?'.$_SERVER['QUERY_STRING'];\n\t\t}\n\n\t\t$redirect_url = htmlspecialchars_uni($redirect_url);\n\n\t\tswitch($mybb->settings['username_method'])\n\t\t{\n\t\t\tcase 0:\n\t\t\t\t$lang_username = $lang->username;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t$lang_username = $lang->username1;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$lang_username = $lang->username2;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$lang_username = $lang->username;\n\t\t\t\tbreak;\n\t\t}\n\t\teval(\"\\$errorpage = \\\"\".$templates->get(\"error_nopermission\").\"\\\";\");\n\t}\n\n\terror($errorpage);\n}\n\n/**\n * Redirect the user to a given URL with a given message\n *\n * @param string $url The URL to redirect the user to\n * @param string $message The redirection message to be shown\n * @param string $title The title of the redirection page\n * @param boolean $force_redirect Force the redirect page regardless of settings\n */\nfunction redirect($url, $message=\"\", $title=\"\", $force_redirect=false)\n{\n\tglobal $header, $footer, $mybb, $theme, $headerinclude, $templates, $lang, $plugins;\n\n\t$redirect_args = array('url' => &$url, 'message' => &$message, 'title' => &$title);\n\n\t$plugins->run_hooks(\"redirect\", $redirect_args);\n\n\tif($mybb->get_input('ajax', MyBB::INPUT_INT))\n\t{\n\t\t// Send our headers.\n\t\t//@header(\"Content-type: text/html; charset={$lang->settings['charset']}\");\n\t\t$data = \"<script type=\\\"text/javascript\\\">\\n\";\n\t\tif($message != \"\")\n\t\t{\n\t\t\t$data .=  'alert(\"'.addslashes($message).'\");';\n\t\t}\n\t\t$url = str_replace(\"#\", \"&#\", $url);\n\t\t$url = htmlspecialchars_decode($url);\n\t\t$url = str_replace(array(\"\\n\",\"\\r\",\";\"), \"\", $url);\n\t\t$data .=  'window.location = \"'.addslashes($url).'\";'.\"\\n\";\n\t\t$data .= \"</script>\\n\";\n\t\t//exit;\n\n\t\t@header(\"Content-type: application/json; charset={$lang->settings['charset']}\");\n\t\techo json_encode(array(\"data\" => $data));\n\t\texit;\n\t}\n\n\tif(!$message)\n\t{\n\t\t$message = $lang->redirect;\n\t}\n\n\t$time = TIME_NOW;\n\t$timenow = my_date('relative', $time);\n\n\tif(!$title)\n\t{\n\t\t$title = $mybb->settings['bbname'];\n\t}\n\n\t// Show redirects only if both ACP and UCP settings are enabled, or ACP is enabled, and user is a guest, or they are forced.\n\tif($force_redirect == true || ($mybb->settings['redirects'] == 1 && ($mybb->user['showredirect'] == 1 || !$mybb->user['uid'])))\n\t{\n\t\t$url = str_replace(\"&amp;\", \"&\", $url);\n\t\t$url = htmlspecialchars_uni($url);\n\n\t\teval(\"\\$redirectpage = \\\"\".$templates->get(\"redirect\").\"\\\";\");\n\t\toutput_page($redirectpage);\n\t}\n\telse\n\t{\n\t\t$url = htmlspecialchars_decode($url);\n\t\t$url = str_replace(array(\"\\n\",\"\\r\",\";\"), \"\", $url);\n\n\t\trun_shutdown();\n\n\t\tif(!my_validate_url($url, true))\n\t\t{\n\t\t\theader(\"Location: {$mybb->settings['bburl']}/{$url}\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\theader(\"Location: {$url}\");\n\t\t}\n\t}\n\n\texit;\n}\n\n/**\n * Generate a listing of page - pagination\n *\n * @param int $count The number of items\n * @param int $perpage The number of items to be shown per page\n * @param int $page The current page number\n * @param string $url The URL to have page numbers tacked on to (If {page} is specified, the value will be replaced with the page #)\n * @param boolean $breadcrumb Whether or not the multipage is being shown in the navigation breadcrumb\n * @return string The generated pagination\n */\nfunction multipage($count, $perpage, $page, $url, $breadcrumb=false)\n{\n\tglobal $theme, $templates, $lang, $mybb;\n\n\tif($count <= $perpage)\n\t{\n\t\treturn '';\n\t}\n\n\t$url = str_replace(\"&amp;\", \"&\", $url);\n\t$url = htmlspecialchars_uni($url);\n\n\t$pages = ceil($count / $perpage);\n\n\t$prevpage = '';\n\tif($page > 1)\n\t{\n\t\t$prev = $page-1;\n\t\t$page_url = fetch_page_url($url, $prev);\n\t\teval(\"\\$prevpage = \\\"\".$templates->get(\"multipage_prevpage\").\"\\\";\");\n\t}\n\n\t// Maximum number of \"page bits\" to show\n\tif(!$mybb->settings['maxmultipagelinks'])\n\t{\n\t\t$mybb->settings['maxmultipagelinks'] = 5;\n\t}\n\n\t$from = $page-floor($mybb->settings['maxmultipagelinks']/2);\n\t$to = $page+floor($mybb->settings['maxmultipagelinks']/2);\n\n\tif($from <= 0)\n\t{\n\t\t$from = 1;\n\t\t$to = $from+$mybb->settings['maxmultipagelinks']-1;\n\t}\n\n\tif($to > $pages)\n\t{\n\t\t$to = $pages;\n\t\t$from = $pages-$mybb->settings['maxmultipagelinks']+1;\n\t\tif($from <= 0)\n\t\t{\n\t\t\t$from = 1;\n\t\t}\n\t}\n\n\tif($to == 0)\n\t{\n\t\t$to = $pages;\n\t}\n\n\t$start = '';\n\tif($from > 1)\n\t{\n\t\tif($from-1 == 1)\n\t\t{\n\t\t\t$lang->multipage_link_start = '';\n\t\t}\n\n\t\t$page_url = fetch_page_url($url, 1);\n\t\teval(\"\\$start = \\\"\".$templates->get(\"multipage_start\").\"\\\";\");\n\t}\n\n\t$mppage = '';\n\tfor($i = $from; $i <= $to; ++$i)\n\t{\n\t\t$page_url = fetch_page_url($url, $i);\n\t\tif($page == $i)\n\t\t{\n\t\t\tif($breadcrumb == true)\n\t\t\t{\n\t\t\t\teval(\"\\$mppage .= \\\"\".$templates->get(\"multipage_page_link_current\").\"\\\";\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teval(\"\\$mppage .= \\\"\".$templates->get(\"multipage_page_current\").\"\\\";\");\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\teval(\"\\$mppage .= \\\"\".$templates->get(\"multipage_page\").\"\\\";\");\n\t\t}\n\t}\n\n\t$end = '';\n\tif($to < $pages)\n\t{\n\t\tif($to+1 == $pages)\n\t\t{\n\t\t\t$lang->multipage_link_end = '';\n\t\t}\n\n\t\t$page_url = fetch_page_url($url, $pages);\n\t\teval(\"\\$end = \\\"\".$templates->get(\"multipage_end\").\"\\\";\");\n\t}\n\n\t$nextpage = '';\n\tif($page < $pages)\n\t{\n\t\t$next = $page+1;\n\t\t$page_url = fetch_page_url($url, $next);\n\t\teval(\"\\$nextpage = \\\"\".$templates->get(\"multipage_nextpage\").\"\\\";\");\n\t}\n\n\t$jumptopage = '';\n\tif($pages > ($mybb->settings['maxmultipagelinks']+1) && $mybb->settings['jumptopagemultipage'] == 1)\n\t{\n\t\t// When the second parameter is set to 1, fetch_page_url thinks it's the first page and removes it from the URL as it's unnecessary\n\t\t$jump_url = fetch_page_url($url, 1);\n\t\teval(\"\\$jumptopage = \\\"\".$templates->get(\"multipage_jump_page\").\"\\\";\");\n\t}\n\n\t$lang->multipage_pages = $lang->sprintf($lang->multipage_pages, $pages);\n\n\tif($breadcrumb == true)\n\t{\n\t\teval(\"\\$multipage = \\\"\".$templates->get(\"multipage_breadcrumb\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\teval(\"\\$multipage = \\\"\".$templates->get(\"multipage\").\"\\\";\");\n\t}\n\n\treturn $multipage;\n}\n\n/**\n * Generate a page URL for use by the multipage function\n *\n * @param string $url The URL being passed\n * @param int $page The page number\n * @return string\n */\nfunction fetch_page_url($url, $page)\n{\n\tif($page <= 1)\n\t{\n\t\t$find = array(\n\t\t\t\"-page-{page}\",\n\t\t\t\"&amp;page={page}\",\n\t\t\t\"{page}\"\n\t\t);\n\n\t\t// Remove \"Page 1\" to the defacto URL\n\t\t$url = str_replace($find, array(\"\", \"\", $page), $url);\n\t\treturn $url;\n\t}\n\telse if(strpos($url, \"{page}\") === false)\n\t{\n\t\t// If no page identifier is specified we tack it on to the end of the URL\n\t\tif(strpos($url, \"?\") === false)\n\t\t{\n\t\t\t$url .= \"?\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$url .= \"&amp;\";\n\t\t}\n\n\t\t$url .= \"page=$page\";\n\t}\n\telse\n\t{\n\t\t$url = str_replace(\"{page}\", $page, $url);\n\t}\n\n\treturn $url;\n}\n\n/**\n * Fetch the permissions for a specific user\n *\n * @param int $uid The user ID\n * @return array Array of user permissions for the specified user\n */\nfunction user_permissions($uid=0)\n{\n\tglobal $mybb, $cache, $groupscache, $user_cache;\n\n\t// If no user id is specified, assume it is the current user\n\tif($uid == 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\t// User id does not match current user, fetch permissions\n\tif($uid != $mybb->user['uid'])\n\t{\n\t\t// We've already cached permissions for this user, return them.\n\t\tif($user_cache[$uid]['permissions'])\n\t\t{\n\t\t\treturn $user_cache[$uid]['permissions'];\n\t\t}\n\n\t\t// This user was not already cached, fetch their user information.\n\t\tif(!$user_cache[$uid])\n\t\t{\n\t\t\t$user_cache[$uid] = get_user($uid);\n\t\t}\n\n\t\t// Collect group permissions.\n\t\t$gid = $user_cache[$uid]['usergroup'].\",\".$user_cache[$uid]['additionalgroups'];\n\t\t$groupperms = usergroup_permissions($gid);\n\n\t\t// Store group permissions in user cache.\n\t\t$user_cache[$uid]['permissions'] = $groupperms;\n\t\treturn $groupperms;\n\t}\n\t// This user is the current user, return their permissions\n\telse\n\t{\n\t\treturn $mybb->usergroup;\n\t}\n}\n\n/**\n * Fetch the usergroup permissions for a specific group or series of groups combined\n *\n * @param int|string $gid A list of groups (Can be a single integer, or a list of groups separated by a comma)\n * @return array Array of permissions generated for the groups, containing also a list of comma-separated checked groups under 'all_usergroups' index\n */\nfunction usergroup_permissions($gid=0)\n{\n\tglobal $cache, $groupscache, $grouppermignore, $groupzerogreater;\n\n\tif(!is_array($groupscache))\n\t{\n\t\t$groupscache = $cache->read(\"usergroups\");\n\t}\n\n\t$groups = explode(\",\", $gid);\n\n\tif(count($groups) == 1)\n\t{\n\t\t$groupscache[$gid]['all_usergroups'] = $gid;\n\t\treturn $groupscache[$gid];\n\t}\n\n\t$usergroup = array();\n\t$usergroup['all_usergroups'] = $gid;\n\n\tforeach($groups as $gid)\n\t{\n\t\tif(trim($gid) == \"\" || empty($groupscache[$gid]))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\tforeach($groupscache[$gid] as $perm => $access)\n\t\t{\n\t\t\tif(!in_array($perm, $grouppermignore))\n\t\t\t{\n\t\t\t\tif(isset($usergroup[$perm]))\n\t\t\t\t{\n\t\t\t\t\t$permbit = $usergroup[$perm];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$permbit = \"\";\n\t\t\t\t}\n\n\t\t\t\t// 0 represents unlimited for numerical group permissions (i.e. private message limit) so take that into account.\n\t\t\t\tif(in_array($perm, $groupzerogreater) && ($access == 0 || $permbit === 0))\n\t\t\t\t{\n\t\t\t\t\t$usergroup[$perm] = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif($access > $permbit || ($access == \"yes\" && $permbit == \"no\") || !$permbit) // Keep yes/no for compatibility?\n\t\t\t\t{\n\t\t\t\t\t$usergroup[$perm] = $access;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $usergroup;\n}\n\n/**\n * Fetch the display group properties for a specific display group\n *\n * @param int $gid The group ID to fetch the display properties for\n * @return array Array of display properties for the group\n */\nfunction usergroup_displaygroup($gid)\n{\n\tglobal $cache, $groupscache, $displaygroupfields;\n\n\tif(!is_array($groupscache))\n\t{\n\t\t$groupscache = $cache->read(\"usergroups\");\n\t}\n\n\t$displaygroup = array();\n\t$group = $groupscache[$gid];\n\n\tforeach($displaygroupfields as $field)\n\t{\n\t\t$displaygroup[$field] = $group[$field];\n\t}\n\n\treturn $displaygroup;\n}\n\n/**\n * Build the forum permissions for a specific forum, user or group\n *\n * @param int $fid The forum ID to build permissions for (0 builds for all forums)\n * @param int $uid The user to build the permissions for (0 will select the uid automatically)\n * @param int $gid The group of the user to build permissions for (0 will fetch it)\n * @return array Forum permissions for the specific forum or forums\n */\nfunction forum_permissions($fid=0, $uid=0, $gid=0)\n{\n\tglobal $db, $cache, $groupscache, $forum_cache, $fpermcache, $mybb, $cached_forum_permissions_permissions, $cached_forum_permissions;\n\n\tif($uid == 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif(!$gid || $gid == 0) // If no group, we need to fetch it\n\t{\n\t\tif($uid != 0 && $uid != $mybb->user['uid'])\n\t\t{\n\t\t\t$user = get_user($uid);\n\n\t\t\t$gid = $user['usergroup'].\",\".$user['additionalgroups'];\n\t\t\t$groupperms = usergroup_permissions($gid);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$gid = $mybb->user['usergroup'];\n\n\t\t\tif(isset($mybb->user['additionalgroups']))\n\t\t\t{\n\t\t\t\t$gid .= \",\".$mybb->user['additionalgroups'];\n\t\t\t}\n\n\t\t\t$groupperms = $mybb->usergroup;\n\t\t}\n\t}\n\n\tif(!is_array($forum_cache))\n\t{\n\t\t$forum_cache = cache_forums();\n\n\t\tif(!$forum_cache)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif(!is_array($fpermcache))\n\t{\n\t\t$fpermcache = $cache->read(\"forumpermissions\");\n\t}\n\n\tif($fid) // Fetch the permissions for a single forum\n\t{\n\t\tif(empty($cached_forum_permissions_permissions[$gid][$fid]))\n\t\t{\n\t\t\t$cached_forum_permissions_permissions[$gid][$fid] = fetch_forum_permissions($fid, $gid, $groupperms);\n\t\t}\n\t\treturn $cached_forum_permissions_permissions[$gid][$fid];\n\t}\n\telse\n\t{\n\t\tif(empty($cached_forum_permissions[$gid]))\n\t\t{\n\t\t\tforeach($forum_cache as $forum)\n\t\t\t{\n\t\t\t\t$cached_forum_permissions[$gid][$forum['fid']] = fetch_forum_permissions($forum['fid'], $gid, $groupperms);\n\t\t\t}\n\t\t}\n\t\treturn $cached_forum_permissions[$gid];\n\t}\n}\n\n/**\n * Fetches the permissions for a specific forum/group applying the inheritance scheme.\n * Called by forum_permissions()\n *\n * @param int $fid The forum ID\n * @param string $gid A comma separated list of usergroups\n * @param array $groupperms Group permissions\n * @return array Permissions for this forum\n*/\nfunction fetch_forum_permissions($fid, $gid, $groupperms)\n{\n\tglobal $groupscache, $forum_cache, $fpermcache, $mybb, $fpermfields;\n\n\t$groups = explode(\",\", $gid);\n\n\tif(empty($fpermcache[$fid])) // This forum has no custom or inherited permissions so lets just return the group permissions\n\t{\n\t\treturn $groupperms;\n\t}\n\n\t$current_permissions = array();\n\t$only_view_own_threads = 1;\n\t$only_reply_own_threads = 1;\n\n\tforeach($groups as $gid)\n\t{\n\t\tif(!empty($groupscache[$gid]))\n\t\t{\n\t\t\t$level_permissions = $fpermcache[$fid][$gid];\n\n\t\t\t// If our permissions arn't inherited we need to figure them out\n\t\t\tif(empty($fpermcache[$fid][$gid]))\n\t\t\t{\n\t\t\t\t$parents = explode(',', $forum_cache[$fid]['parentlist']);\n\t\t\t\trsort($parents);\n\t\t\t\tif(!empty($parents))\n\t\t\t\t{\n\t\t\t\t\tforeach($parents as $parent_id)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!empty($fpermcache[$parent_id][$gid]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$level_permissions = $fpermcache[$parent_id][$gid];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we STILL don't have forum permissions we use the usergroup itself\n\t\t\tif(empty($level_permissions))\n\t\t\t{\n\t\t\t\t$level_permissions = $groupscache[$gid];\n\t\t\t}\n\n\t\t\tforeach($level_permissions as $permission => $access)\n\t\t\t{\n\t\t\t\tif(empty($current_permissions[$permission]) || $access >= $current_permissions[$permission] || ($access == \"yes\" && $current_permissions[$permission] == \"no\"))\n\t\t\t\t{\n\t\t\t\t\t$current_permissions[$permission] = $access;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($level_permissions[\"canview\"] && empty($level_permissions[\"canonlyviewownthreads\"]))\n\t\t\t{\n\t\t\t\t$only_view_own_threads = 0;\n\t\t\t}\n\n\t\t\tif($level_permissions[\"canpostreplys\"] && empty($level_permissions[\"canonlyreplyownthreads\"]))\n\t\t\t{\n\t\t\t\t$only_reply_own_threads = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Figure out if we can view more than our own threads\n\tif($only_view_own_threads == 0)\n\t{\n\t\t$current_permissions[\"canonlyviewownthreads\"] = 0;\n\t}\n\n\t// Figure out if we can reply more than our own threads\n\tif($only_reply_own_threads == 0)\n\t{\n\t\t$current_permissions[\"canonlyreplyownthreads\"] = 0;\n\t}\n\n\tif(count($current_permissions) == 0)\n\t{\n\t\t$current_permissions = $groupperms;\n\t}\n\treturn $current_permissions;\n}\n\n/**\n * Check the password given on a certain forum for validity\n *\n * @param int $fid The forum ID\n * @param int $pid The Parent ID\n * @param bool $return\n * @return bool\n */\nfunction check_forum_password($fid, $pid=0, $return=false)\n{\n\tglobal $mybb, $header, $footer, $headerinclude, $theme, $templates, $lang, $forum_cache;\n\n\t$showform = true;\n\n\tif(!is_array($forum_cache))\n\t{\n\t\t$forum_cache = cache_forums();\n\t\tif(!$forum_cache)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Loop through each of parent forums to ensure we have a password for them too\n\tif(isset($forum_cache[$fid]['parentlist']))\n\t{\n\t\t$parents = explode(',', $forum_cache[$fid]['parentlist']);\n\t\trsort($parents);\n\t}\n\tif(!empty($parents))\n\t{\n\t\tforeach($parents as $parent_id)\n\t\t{\n\t\t\tif($parent_id == $fid || $parent_id == $pid)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif($forum_cache[$parent_id]['password'] != \"\")\n\t\t\t{\n\t\t\t\tcheck_forum_password($parent_id, $fid);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!empty($forum_cache[$fid]['password']))\n\t{\n\t\t$password = $forum_cache[$fid]['password'];\n\t\tif(isset($mybb->input['pwverify']) && $pid == 0)\n\t\t{\n\t\t\tif($password === $mybb->get_input('pwverify'))\n\t\t\t{\n\t\t\t\tmy_setcookie(\"forumpass[$fid]\", md5($mybb->user['uid'].$mybb->get_input('pwverify')), null, true);\n\t\t\t\t$showform = false;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\teval(\"\\$pwnote = \\\"\".$templates->get(\"forumdisplay_password_wrongpass\").\"\\\";\");\n\t\t\t\t$showform = true;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(!$mybb->cookies['forumpass'][$fid] || ($mybb->cookies['forumpass'][$fid] && md5($mybb->user['uid'].$password) !== $mybb->cookies['forumpass'][$fid]))\n\t\t\t{\n\t\t\t\t$showform = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$showform = false;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\t$showform = false;\n\t}\n\n\tif($return)\n\t{\n\t\treturn $showform;\n\t}\n\n\tif($showform)\n\t{\n\t\tif($pid)\n\t\t{\n\t\t\theader(\"Location: \".$mybb->settings['bburl'].\"/\".get_forum_link($fid));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$_SERVER['REQUEST_URI'] = htmlspecialchars_uni($_SERVER['REQUEST_URI']);\n\t\t\teval(\"\\$pwform = \\\"\".$templates->get(\"forumdisplay_password\").\"\\\";\");\n\t\t\toutput_page($pwform);\n\t\t}\n\t\texit;\n\t}\n}\n\n/**\n * Return the permissions for a moderator in a specific forum\n *\n * @param int $fid The forum ID\n * @param int $uid The user ID to fetch permissions for (0 assumes current logged in user)\n * @param string $parentslist The parent list for the forum (if blank, will be fetched)\n * @return array Array of moderator permissions for the specific forum\n */\nfunction get_moderator_permissions($fid, $uid=0, $parentslist=\"\")\n{\n\tglobal $mybb, $cache, $db;\n\tstatic $modpermscache;\n\n\tif($uid < 1)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif($uid == 0)\n\t{\n\t\treturn false;\n\t}\n\n\tif(isset($modpermscache[$fid][$uid]))\n\t{\n\t\treturn $modpermscache[$fid][$uid];\n\t}\n\n\tif(!$parentslist)\n\t{\n\t\t$parentslist = explode(',', get_parent_list($fid));\n\t}\n\n\t// Get user groups\n\t$perms = array();\n\t$user = get_user($uid);\n\n\t$groups = array($user['usergroup']);\n\n\tif(!empty($user['additionalgroups']))\n\t{\n\t\t$extra_groups = explode(\",\", $user['additionalgroups']);\n\n\t\tforeach($extra_groups as $extra_group)\n\t\t{\n\t\t\t$groups[] = $extra_group;\n\t\t}\n\t}\n\n\t$mod_cache = $cache->read(\"moderators\");\n\n\tforeach($mod_cache as $forumid => $forum)\n\t{\n\t\tif(!is_array($forum) || !in_array($forumid, $parentslist))\n\t\t{\n\t\t\t// No perms or we're not after this forum\n\t\t\tcontinue;\n\t\t}\n\n\t\t// User settings override usergroup settings\n\t\tif(is_array($forum['users'][$uid]))\n\t\t{\n\t\t\t$perm = $forum['users'][$uid];\n\t\t\tforeach($perm as $action => $value)\n\t\t\t{\n\t\t\t\tif(strpos($action, \"can\") === false)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Figure out the user permissions\n\t\t\t\tif($value == 0)\n\t\t\t\t{\n\t\t\t\t\t// The user doesn't have permission to set this action\n\t\t\t\t\t$perms[$action] = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$perms[$action] = max($perm[$action], $perms[$action]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tforeach($groups as $group)\n\t\t{\n\t\t\tif(!is_array($forum['usergroups'][$group]))\n\t\t\t{\n\t\t\t\t// There are no permissions set for this group\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$perm = $forum['usergroups'][$group];\n\t\t\tforeach($perm as $action => $value)\n\t\t\t{\n\t\t\t\tif(strpos($action, \"can\") === false)\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$perms[$action] = max($perm[$action], $perms[$action]);\n\t\t\t}\n\t\t}\n\t}\n\n\t$modpermscache[$fid][$uid] = $perms;\n\n\treturn $perms;\n}\n\n/**\n * Checks if a moderator has permissions to perform an action in a specific forum\n *\n * @param int $fid The forum ID (0 assumes global)\n * @param string $action The action tyring to be performed. (blank assumes any action at all)\n * @param int $uid The user ID (0 assumes current user)\n * @return bool Returns true if the user has permission, false if they do not\n */\nfunction is_moderator($fid=0, $action=\"\", $uid=0)\n{\n\tglobal $mybb, $cache;\n\n\tif($uid == 0)\n\t{\n\t\t$uid = $mybb->user['uid'];\n\t}\n\n\tif($uid == 0)\n\t{\n\t\treturn false;\n\t}\n\n\t$user_perms = user_permissions($uid);\n\tif($user_perms['issupermod'] == 1)\n\t{\n\t\tif($fid)\n\t\t{\n\t\t\t$forumpermissions = forum_permissions($fid);\n\t\t\tif($forumpermissions['canview'] && $forumpermissions['canviewthreads'] && !$forumpermissions['canonlyviewownthreads'])\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\tif(!$fid)\n\t\t{\n\t\t\t$modcache = $cache->read('moderators');\n\t\t\tif(!empty($modcache))\n\t\t\t{\n\t\t\t\tforeach($modcache as $modusers)\n\t\t\t\t{\n\t\t\t\t\tif(isset($modusers['users'][$uid]) && $modusers['users'][$uid]['mid'] && (!$action || !empty($modusers['users'][$uid][$action])))\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\t$groups = explode(',', $user_perms['all_usergroups']);\n\n\t\t\t\t\tforeach($groups as $group)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(trim($group) != '' && isset($modusers['usergroups'][$group]) && (!$action || !empty($modusers['usergroups'][$group][$action])))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$modperms = get_moderator_permissions($fid, $uid);\n\n\t\t\tif(!$action && $modperms)\n\t\t\t{\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(isset($modperms[$action]) && $modperms[$action] == 1)\n\t\t\t\t{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Generate a list of the posticons.\n *\n * @return string The template of posticons.\n */\nfunction get_post_icons()\n{\n\tglobal $mybb, $cache, $icon, $theme, $templates, $lang;\n\n\tif(isset($mybb->input['icon']))\n\t{\n\t\t$icon = $mybb->get_input('icon');\n\t}\n\n\t$iconlist = '';\n\t$no_icons_checked = \" checked=\\\"checked\\\"\";\n\t// read post icons from cache, and sort them accordingly\n\t$posticons_cache = $cache->read(\"posticons\");\n\t$posticons = array();\n\tforeach($posticons_cache as $posticon)\n\t{\n\t\t$posticons[$posticon['name']] = $posticon;\n\t}\n\tkrsort($posticons);\n\n\tforeach($posticons as $dbicon)\n\t{\n\t\t$dbicon['path'] = str_replace(\"{theme}\", $theme['imgdir'], $dbicon['path']);\n\t\t$dbicon['path'] = htmlspecialchars_uni($mybb->get_asset_url($dbicon['path']));\n\t\t$dbicon['name'] = htmlspecialchars_uni($dbicon['name']);\n\n\t\tif($icon == $dbicon['iid'])\n\t\t{\n\t\t\t$checked = \" checked=\\\"checked\\\"\";\n\t\t\t$no_icons_checked = '';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$checked = '';\n\t\t}\n\n\t\teval(\"\\$iconlist .= \\\"\".$templates->get(\"posticons_icon\").\"\\\";\");\n\t}\n\n\tif(!empty($iconlist))\n\t{\n\t\teval(\"\\$posticons = \\\"\".$templates->get(\"posticons\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\t$posticons = '';\n\t}\n\n\treturn $posticons;\n}\n\n/**\n * MyBB setcookie() wrapper.\n *\n * @param string $name The cookie identifier.\n * @param string $value The cookie value.\n * @param int|string $expires The timestamp of the expiry date.\n * @param boolean $httponly True if setting a HttpOnly cookie (supported by the majority of web browsers)\n */\nfunction my_setcookie($name, $value=\"\", $expires=\"\", $httponly=false)\n{\n\tglobal $mybb;\n\n\tif(!$mybb->settings['cookiepath'])\n\t{\n\t\t$mybb->settings['cookiepath'] = \"/\";\n\t}\n\n\tif($expires == -1)\n\t{\n\t\t$expires = 0;\n\t}\n\telseif($expires == \"\" || $expires == null)\n\t{\n\t\t$expires = TIME_NOW + (60*60*24*365); // Make the cookie expire in a years time\n\t}\n\telse\n\t{\n\t\t$expires = TIME_NOW + (int)$expires;\n\t}\n\n\t$mybb->settings['cookiepath'] = str_replace(array(\"\\n\",\"\\r\"), \"\", $mybb->settings['cookiepath']);\n\t$mybb->settings['cookiedomain'] = str_replace(array(\"\\n\",\"\\r\"), \"\", $mybb->settings['cookiedomain']);\n\t$mybb->settings['cookieprefix'] = str_replace(array(\"\\n\",\"\\r\", \" \"), \"\", $mybb->settings['cookieprefix']);\n\n\t// Versions of PHP prior to 5.2 do not support HttpOnly cookies and IE is buggy when specifying a blank domain so set the cookie manually\n\t$cookie = \"Set-Cookie: {$mybb->settings['cookieprefix']}{$name}=\".urlencode($value);\n\n\tif($expires > 0)\n\t{\n\t\t$cookie .= \"; expires=\".@gmdate('D, d-M-Y H:i:s \\\\G\\\\M\\\\T', $expires);\n\t}\n\n\tif(!empty($mybb->settings['cookiepath']))\n\t{\n\t\t$cookie .= \"; path={$mybb->settings['cookiepath']}\";\n\t}\n\n\tif(!empty($mybb->settings['cookiedomain']))\n\t{\n\t\t$cookie .= \"; domain={$mybb->settings['cookiedomain']}\";\n\t}\n\n\tif($httponly == true)\n\t{\n\t\t$cookie .= \"; HttpOnly\";\n\t}\n\n\tif($mybb->settings['cookiesecureflag'])\n\t{\n\t\t$cookie .= \"; Secure\";\n\t}\n\n\t$mybb->cookies[$name] = $value;\n\n\theader($cookie, false);\n}\n\n/**\n * Unset a cookie set by MyBB.\n *\n * @param string $name The cookie identifier.\n */\nfunction my_unsetcookie($name)\n{\n\tglobal $mybb;\n\n\t$expires = -3600;\n\tmy_setcookie($name, \"\", $expires);\n\n\tunset($mybb->cookies[$name]);\n}\n\n/**\n * Get the contents from a serialised cookie array.\n *\n * @param string $name The cookie identifier.\n * @param int $id The cookie content id.\n * @return array|boolean The cookie id's content array or false when non-existent.\n */\nfunction my_get_array_cookie($name, $id)\n{\n\tglobal $mybb;\n\n\tif(!isset($mybb->cookies['mybb'][$name]))\n\t{\n\t\treturn false;\n\t}\n\n\t$cookie = my_unserialize($mybb->cookies['mybb'][$name]);\n\n\tif(is_array($cookie) && isset($cookie[$id]))\n\t{\n\t\treturn $cookie[$id];\n\t}\n\telse\n\t{\n\t\treturn 0;\n\t}\n}\n\n/**\n * Set a serialised cookie array.\n *\n * @param string $name The cookie identifier.\n * @param int $id The cookie content id.\n * @param string $value The value to set the cookie to.\n * @param int|string $expires The timestamp of the expiry date.\n */\nfunction my_set_array_cookie($name, $id, $value, $expires=\"\")\n{\n\tglobal $mybb;\n\n\t$cookie = $mybb->cookies['mybb'];\n\tif(isset($cookie[$name]))\n\t{\n\t\t$newcookie = my_unserialize($cookie[$name]);\n\t}\n\telse\n\t{\n\t\t$newcookie = array();\n\t}\n\n\t$newcookie[$id] = $value;\n\t$newcookie = my_serialize($newcookie);\n\tmy_setcookie(\"mybb[$name]\", addslashes($newcookie), $expires);\n\n\t// Make sure our current viarables are up-to-date as well\n\t$mybb->cookies['mybb'][$name] = $newcookie;\n}\n\n/*\n * Arbitrary limits for _safe_unserialize()\n */\ndefine('MAX_SERIALIZED_INPUT_LENGTH', 10240);\ndefine('MAX_SERIALIZED_ARRAY_LENGTH', 256);\ndefine('MAX_SERIALIZED_ARRAY_DEPTH', 5);\n\n/**\n * Credits go to https://github.com/piwik\n * Safe unserialize() replacement\n * - accepts a strict subset of PHP's native my_serialized representation\n * - does not unserialize objects\n *\n * @param string $str\n * @return mixed\n * @throw Exception if $str is malformed or contains unsupported types (e.g., resources, objects)\n */\nfunction _safe_unserialize($str)\n{\n\tif(strlen($str) > MAX_SERIALIZED_INPUT_LENGTH)\n\t{\n\t\t// input exceeds MAX_SERIALIZED_INPUT_LENGTH\n\t\treturn false;\n\t}\n\n\tif(empty($str) || !is_string($str))\n\t{\n\t\treturn false;\n\t}\n\n\t$stack = array();\n\t$expected = array();\n\n\t/*\n\t * states:\n\t *   0 - initial state, expecting a single value or array\n\t *   1 - terminal state\n\t *   2 - in array, expecting end of array or a key\n\t *   3 - in array, expecting value or another array\n\t */\n\t$state = 0;\n\twhile($state != 1)\n\t{\n\t\t$type = isset($str[0]) ? $str[0] : '';\n\n\t\tif($type == '}')\n\t\t{\n\t\t\t$str = substr($str, 1);\n\t\t}\n\t\telse if($type == 'N' && $str[1] == ';')\n\t\t{\n\t\t\t$value = null;\n\t\t\t$str = substr($str, 2);\n\t\t}\n\t\telse if($type == 'b' && preg_match('/^b:([01]);/', $str, $matches))\n\t\t{\n\t\t\t$value = $matches[1] == '1' ? true : false;\n\t\t\t$str = substr($str, 4);\n\t\t}\n\t\telse if($type == 'i' && preg_match('/^i:(-?[0-9]+);(.*)/s', $str, $matches))\n\t\t{\n\t\t\t$value = (int)$matches[1];\n\t\t\t$str = $matches[2];\n\t\t}\n\t\telse if($type == 'd' && preg_match('/^d:(-?[0-9]+\\.?[0-9]*(E[+-][0-9]+)?);(.*)/s', $str, $matches))\n\t\t{\n\t\t\t$value = (float)$matches[1];\n\t\t\t$str = $matches[3];\n\t\t}\n\t\telse if($type == 's' && preg_match('/^s:([0-9]+):\"(.*)/s', $str, $matches) && substr($matches[2], (int)$matches[1], 2) == '\";')\n\t\t{\n\t\t\t$value = substr($matches[2], 0, (int)$matches[1]);\n\t\t\t$str = substr($matches[2], (int)$matches[1] + 2);\n\t\t}\n\t\telse if($type == 'a' && preg_match('/^a:([0-9]+):{(.*)/s', $str, $matches) && $matches[1] < MAX_SERIALIZED_ARRAY_LENGTH)\n\t\t{\n\t\t\t$expectedLength = (int)$matches[1];\n\t\t\t$str = $matches[2];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// object or unknown/malformed type\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch($state)\n\t\t{\n\t\t\tcase 3: // in array, expecting value or another array\n\t\t\t\tif($type == 'a')\n\t\t\t\t{\n\t\t\t\t\tif(count($stack) >= MAX_SERIALIZED_ARRAY_DEPTH)\n\t\t\t\t\t{\n\t\t\t\t\t\t// array nesting exceeds MAX_SERIALIZED_ARRAY_DEPTH\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$stack[] = &$list;\n\t\t\t\t\t$list[$key] = array();\n\t\t\t\t\t$list = &$list[$key];\n\t\t\t\t\t$expected[] = $expectedLength;\n\t\t\t\t\t$state = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif($type != '}')\n\t\t\t\t{\n\t\t\t\t\t$list[$key] = $value;\n\t\t\t\t\t$state = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// missing array value\n\t\t\t\treturn false;\n\n\t\t\tcase 2: // in array, expecting end of array or a key\n\t\t\t\tif($type == '}')\n\t\t\t\t{\n\t\t\t\t\tif(count($list) < end($expected))\n\t\t\t\t\t{\n\t\t\t\t\t\t// array size less than expected\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\tunset($list);\n\t\t\t\t\t$list = &$stack[count($stack)-1];\n\t\t\t\t\tarray_pop($stack);\n\n\t\t\t\t\t// go to terminal state if we're at the end of the root array\n\t\t\t\t\tarray_pop($expected);\n\t\t\t\t\tif(count($expected) == 0) {\n\t\t\t\t\t\t$state = 1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif($type == 'i' || $type == 's')\n\t\t\t\t{\n\t\t\t\t\tif(count($list) >= MAX_SERIALIZED_ARRAY_LENGTH)\n\t\t\t\t\t{\n\t\t\t\t\t\t// array size exceeds MAX_SERIALIZED_ARRAY_LENGTH\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tif(count($list) >= end($expected))\n\t\t\t\t\t{\n\t\t\t\t\t\t// array size exceeds expected length\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$key = $value;\n\t\t\t\t\t$state = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// illegal array index type\n\t\t\t\treturn false;\n\n\t\t\tcase 0: // expecting array or value\n\t\t\t\tif($type == 'a')\n\t\t\t\t{\n\t\t\t\t\tif(count($stack) >= MAX_SERIALIZED_ARRAY_DEPTH)\n\t\t\t\t\t{\n\t\t\t\t\t\t// array nesting exceeds MAX_SERIALIZED_ARRAY_DEPTH\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data = array();\n\t\t\t\t\t$list = &$data;\n\t\t\t\t\t$expected[] = $expectedLength;\n\t\t\t\t\t$state = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif($type != '}')\n\t\t\t\t{\n\t\t\t\t\t$data = $value;\n\t\t\t\t\t$state = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// not in array\n\t\t\t\treturn false;\n\t\t}\n\t}\n\n\tif(!empty($str))\n\t{\n\t\t// trailing data in input\n\t\treturn false;\n\t}\n\treturn $data;\n}\n\n/**\n * Credits go to https://github.com/piwik\n * Wrapper for _safe_unserialize() that handles exceptions and multibyte encoding issue\n *\n * @param string $str\n * @return mixed\n */\nfunction my_unserialize($str)\n{\n\t// Ensure we use the byte count for strings even when strlen() is overloaded by mb_strlen()\n\tif(function_exists('mb_internal_encoding') && (((int)ini_get('mbstring.func_overload')) & 2))\n\t{\n\t\t$mbIntEnc = mb_internal_encoding();\n\t\tmb_internal_encoding('ASCII');\n\t}\n\n\t$out = _safe_unserialize($str);\n\n\tif(isset($mbIntEnc))\n\t{\n\t\tmb_internal_encoding($mbIntEnc);\n\t}\n\n\treturn $out;\n}\n\n/**\n * Credits go to https://github.com/piwik\n * Safe serialize() replacement\n * - output a strict subset of PHP's native serialized representation\n * - does not my_serialize objects\n *\n * @param mixed $value\n * @return string\n * @throw Exception if $value is malformed or contains unsupported types (e.g., resources, objects)\n */\nfunction _safe_serialize( $value )\n{\n\tif(is_null($value))\n\t{\n\t\treturn 'N;';\n\t}\n\n\tif(is_bool($value))\n\t{\n\t\treturn 'b:'.(int)$value.';';\n\t}\n\n\tif(is_int($value))\n\t{\n\t\treturn 'i:'.$value.';';\n\t}\n\n\tif(is_float($value))\n\t{\n\t\treturn 'd:'.str_replace(',', '.', $value).';';\n\t}\n\n\tif(is_string($value))\n\t{\n\t\treturn 's:'.strlen($value).':\"'.$value.'\";';\n\t}\n\n\tif(is_array($value))\n\t{\n\t\t$out = '';\n\t\tforeach($value as $k => $v)\n\t\t{\n\t\t\t$out .= _safe_serialize($k) . _safe_serialize($v);\n\t\t}\n\n\t\treturn 'a:'.count($value).':{'.$out.'}';\n\t}\n\n\t// safe_serialize cannot my_serialize resources or objects\n\treturn false;\n}\n\n/**\n * Credits go to https://github.com/piwik\n * Wrapper for _safe_serialize() that handles exceptions and multibyte encoding issue\n *\n * @param mixed $value\n * @return string\n*/\nfunction my_serialize($value)\n{\n\t// ensure we use the byte count for strings even when strlen() is overloaded by mb_strlen()\n\tif(function_exists('mb_internal_encoding') && (((int)ini_get('mbstring.func_overload')) & 2))\n\t{\n\t\t$mbIntEnc = mb_internal_encoding();\n\t\tmb_internal_encoding('ASCII');\n\t}\n\n\t$out = _safe_serialize($value);\n\tif(isset($mbIntEnc))\n\t{\n\t\tmb_internal_encoding($mbIntEnc);\n\t}\n\n\treturn $out;\n}\n\n/**\n * Returns the serverload of the system.\n *\n * @return int The serverload of the system.\n */\nfunction get_server_load()\n{\n\tglobal $mybb, $lang;\n\n\t$serverload = array();\n\n\t// DIRECTORY_SEPARATOR checks if running windows\n\tif(DIRECTORY_SEPARATOR != '\\\\')\n\t{\n\t\tif(function_exists(\"sys_getloadavg\"))\n\t\t{\n\t\t\t// sys_getloadavg() will return an array with [0] being load within the last minute.\n\t\t\t$serverload = sys_getloadavg();\n\t\t\t$serverload[0] = round($serverload[0], 4);\n\t\t}\n\t\telse if(@file_exists(\"/proc/loadavg\") && $load = @file_get_contents(\"/proc/loadavg\"))\n\t\t{\n\t\t\t$serverload = explode(\" \", $load);\n\t\t\t$serverload[0] = round($serverload[0], 4);\n\t\t}\n\t\tif(!is_numeric($serverload[0]))\n\t\t{\n\t\t\tif($mybb->safemode)\n\t\t\t{\n\t\t\t\treturn $lang->unknown;\n\t\t\t}\n\n\t\t\t// Suhosin likes to throw a warning if exec is disabled then die - weird\n\t\t\tif($func_blacklist = @ini_get('suhosin.executor.func.blacklist'))\n\t\t\t{\n\t\t\t\tif(strpos(\",\".$func_blacklist.\",\", 'exec') !== false)\n\t\t\t\t{\n\t\t\t\t\treturn $lang->unknown;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// PHP disabled functions?\n\t\t\tif($func_blacklist = @ini_get('disable_functions'))\n\t\t\t{\n\t\t\t\tif(strpos(\",\".$func_blacklist.\",\", 'exec') !== false)\n\t\t\t\t{\n\t\t\t\t\treturn $lang->unknown;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$load = @exec(\"uptime\");\n\t\t\t$load = explode(\"load average: \", $load);\n\t\t\t$serverload = explode(\",\", $load[1]);\n\t\t\tif(!is_array($serverload))\n\t\t\t{\n\t\t\t\treturn $lang->unknown;\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $lang->unknown;\n\t}\n\n\t$returnload = trim($serverload[0]);\n\n\treturn $returnload;\n}\n\n/**\n * Returns the amount of memory allocated to the script.\n *\n * @return int The amount of memory allocated to the script.\n */\nfunction get_memory_usage()\n{\n\tif(function_exists('memory_get_peak_usage'))\n\t{\n\t\treturn memory_get_peak_usage(true);\n\t}\n\telseif(function_exists('memory_get_usage'))\n\t{\n\t\treturn memory_get_usage(true);\n\t}\n\treturn false;\n}\n\n/**\n * Updates the forum statistics with specific values (or addition/subtraction of the previous value)\n *\n * @param array $changes Array of items being updated (numthreads,numposts,numusers,numunapprovedthreads,numunapprovedposts,numdeletedposts,numdeletedthreads)\n * @param boolean $force Force stats update?\n */\nfunction update_stats($changes=array(), $force=false)\n{\n\tglobal $cache, $db;\n\tstatic $stats_changes;\n\n\tif(empty($stats_changes))\n\t{\n\t\t// Update stats after all changes are done\n\t\tadd_shutdown('update_stats', array(array(), true));\n\t}\n\n\tif(empty($stats_changes) || $stats_changes['inserted'])\n\t{\n\t\t$stats_changes = array(\n\t\t\t'numthreads' => '+0',\n\t\t\t'numposts' => '+0',\n\t\t\t'numusers' => '+0',\n\t\t\t'numunapprovedthreads' => '+0',\n\t\t\t'numunapprovedposts' => '+0',\n\t\t\t'numdeletedposts' => '+0',\n\t\t\t'numdeletedthreads' => '+0',\n\t\t\t'inserted' => false // Reset after changes are inserted into cache\n\t\t);\n\t\t$stats = $stats_changes;\n\t}\n\n\tif($force) // Force writing to cache?\n\t{\n\t\tif(!empty($changes))\n\t\t{\n\t\t\t// Calculate before writing to cache\n\t\t\tupdate_stats($changes);\n\t\t}\n\t\t$stats = $cache->read(\"stats\");\n\t\t$changes = $stats_changes;\n\t}\n\telse\n\t{\n\t\t$stats = $stats_changes;\n\t}\n\n\t$new_stats = array();\n\t$counters = array('numthreads', 'numunapprovedthreads', 'numposts', 'numunapprovedposts', 'numusers', 'numdeletedposts', 'numdeletedthreads');\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$new_stats[$counter] = $stats[$counter] + $changes[$counter];\n\t\t\t\t\tif(!$force && (substr($stats[$counter], 0, 1) == \"+\" || substr($stats[$counter], 0, 1) == \"-\"))\n\t\t\t\t\t{\n\t\t\t\t\t\t// We had relative values? Then it is still relative\n\t\t\t\t\t\tif($new_stats[$counter] >= 0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$new_stats[$counter] = \"+{$new_stats[$counter]}\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Less than 0? That's bad\n\t\t\t\t\telseif($new_stats[$counter] < 0)\n\t\t\t\t\t{\n\t\t\t\t\t\t$new_stats[$counter] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$new_stats[$counter] = $changes[$counter];\n\t\t\t\t// Less than 0? That's bad\n\t\t\t\tif($new_stats[$counter] < 0)\n\t\t\t\t{\n\t\t\t\t\t$new_stats[$counter] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!$force)\n\t{\n\t\t$stats_changes = array_merge($stats, $new_stats); // Overwrite changed values\n\t\treturn;\n\t}\n\n\t// Fetch latest user if the user count is changing\n\tif(array_key_exists('numusers', $changes))\n\t{\n\t\t$query = $db->simple_select(\"users\", \"uid, username\", \"\", array('order_by' => 'regdate', 'order_dir' => 'DESC', 'limit' => 1));\n\t\t$lastmember = $db->fetch_array($query);\n\t\t$new_stats['lastuid'] = $lastmember['uid'];\n\t\t$new_stats['lastusername'] = $lastmember['username'] = htmlspecialchars_uni($lastmember['username']);\n\t}\n\n\tif(!empty($new_stats))\n\t{\n\t\tif(is_array($stats))\n\t\t{\n\t\t\t$stats = array_merge($stats, $new_stats); // Overwrite changed values\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$stats = $new_stats;\n\t\t}\n\t}\n\n\t// Update stats row for today in the database\n\t$todays_stats = array(\n\t\t\"dateline\" => mktime(0, 0, 0, date(\"m\"), date(\"j\"), date(\"Y\")),\n\t\t\"numusers\" => (int)$stats['numusers'],\n\t\t\"numthreads\" => (int)$stats['numthreads'],\n\t\t\"numposts\" => (int)$stats['numposts']\n\t);\n\t$db->replace_query(\"stats\", $todays_stats, \"dateline\");\n\n\t$cache->update(\"stats\", $stats, \"dateline\");\n\t$stats_changes['inserted'] = true;\n}\n\n/**\n * Updates the forum counters with a specific value (or addition/subtraction of the previous value)\n *\n * @param int $fid The forum ID\n * @param array $changes Array of items being updated (threads, posts, unapprovedthreads, unapprovedposts, deletedposts, deletedthreads) and their value (ex, 1, +1, -1)\n */\nfunction update_forum_counters($fid, $changes=array())\n{\n\tglobal $db;\n\n\t$update_query = array();\n\n\t$counters = array('threads', 'unapprovedthreads', 'posts', 'unapprovedposts', 'deletedposts', 'deletedthreads');\n\n\t// Fetch above counters for this forum\n\t$query = $db->simple_select(\"forums\", implode(\",\", $counters), \"fid='{$fid}'\");\n\t$forum = $db->fetch_array($query);\n\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$update_query[$counter] = $forum[$counter] + $changes[$counter];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$update_query[$counter] = $changes[$counter];\n\t\t\t}\n\n\t\t\t// Less than 0? That's bad\n\t\t\tif(isset($update_query[$counter]) && $update_query[$counter] < 0)\n\t\t\t{\n\t\t\t\t$update_query[$counter] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Only update if we're actually doing something\n\tif(count($update_query) > 0)\n\t{\n\t\t$db->update_query(\"forums\", $update_query, \"fid='\".(int)$fid.\"'\");\n\t}\n\n\t// Guess we should update the statistics too?\n\t$new_stats = array();\n\tif(array_key_exists('threads', $update_query))\n\t{\n\t\t$threads_diff = $update_query['threads'] - $forum['threads'];\n\t\tif($threads_diff > -1)\n\t\t{\n\t\t\t$new_stats['numthreads'] = \"+{$threads_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numthreads'] = \"{$threads_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('unapprovedthreads', $update_query))\n\t{\n\t\t$unapprovedthreads_diff = $update_query['unapprovedthreads'] - $forum['unapprovedthreads'];\n\t\tif($unapprovedthreads_diff > -1)\n\t\t{\n\t\t\t$new_stats['numunapprovedthreads'] = \"+{$unapprovedthreads_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numunapprovedthreads'] = \"{$unapprovedthreads_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('posts', $update_query))\n\t{\n\t\t$posts_diff = $update_query['posts'] - $forum['posts'];\n\t\tif($posts_diff > -1)\n\t\t{\n\t\t\t$new_stats['numposts'] = \"+{$posts_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numposts'] = \"{$posts_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('unapprovedposts', $update_query))\n\t{\n\t\t$unapprovedposts_diff = $update_query['unapprovedposts'] - $forum['unapprovedposts'];\n\t\tif($unapprovedposts_diff > -1)\n\t\t{\n\t\t\t$new_stats['numunapprovedposts'] = \"+{$unapprovedposts_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numunapprovedposts'] = \"{$unapprovedposts_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('deletedposts', $update_query))\n\t{\n\t\t$deletedposts_diff = $update_query['deletedposts'] - $forum['deletedposts'];\n\t\tif($deletedposts_diff > -1)\n\t\t{\n\t\t\t$new_stats['numdeletedposts'] = \"+{$deletedposts_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numdeletedposts'] = \"{$deletedposts_diff}\";\n\t\t}\n\t}\n\n\tif(array_key_exists('deletedthreads', $update_query))\n\t{\n\t\t$deletedthreads_diff = $update_query['deletedthreads'] - $forum['deletedthreads'];\n\t\tif($deletedthreads_diff > -1)\n\t\t{\n\t\t\t$new_stats['numdeletedthreads'] = \"+{$deletedthreads_diff}\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$new_stats['numdeletedthreads'] = \"{$deletedthreads_diff}\";\n\t\t}\n\t}\n\n\tif(!empty($new_stats))\n\t{\n\t\tupdate_stats($new_stats);\n\t}\n}\n\n/**\n * Update the last post information for a specific forum\n *\n * @param int $fid The forum ID\n */\nfunction update_forum_lastpost($fid)\n{\n\tglobal $db;\n\n\t// Fetch the last post for this forum\n\t$query = $db->query(\"\n\t\tSELECT tid, lastpost, lastposter, lastposteruid, subject\n\t\tFROM \".TABLE_PREFIX.\"threads\n\t\tWHERE fid='{$fid}' AND visible='1' AND closed NOT LIKE 'moved|%'\n\t\tORDER BY lastpost DESC\n\t\tLIMIT 0, 1\n\t\");\n\t$lastpost = $db->fetch_array($query);\n\n\t$updated_forum = array(\n\t\t\"lastpost\" => (int)$lastpost['lastpost'],\n\t\t\"lastposter\" => $db->escape_string($lastpost['lastposter']),\n\t\t\"lastposteruid\" => (int)$lastpost['lastposteruid'],\n\t\t\"lastposttid\" => (int)$lastpost['tid'],\n\t\t\"lastpostsubject\" => $db->escape_string($lastpost['subject'])\n\t);\n\n\t$db->update_query(\"forums\", $updated_forum, \"fid='{$fid}'\");\n}\n\n/**\n * Updates the thread counters with a specific value (or addition/subtraction of the previous value)\n *\n * @param int $tid The thread ID\n * @param array $changes Array of items being updated (replies, unapprovedposts, deletedposts, attachmentcount) and their value (ex, 1, +1, -1)\n */\nfunction update_thread_counters($tid, $changes=array())\n{\n\tglobal $db;\n\n\t$update_query = array();\n\t$tid = (int)$tid;\n\n\t$counters = array('replies', 'unapprovedposts', 'attachmentcount', 'deletedposts', 'attachmentcount');\n\n\t// Fetch above counters for this thread\n\t$query = $db->simple_select(\"threads\", implode(\",\", $counters), \"tid='{$tid}'\");\n\t$thread = $db->fetch_array($query);\n\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$update_query[$counter] = $thread[$counter] + $changes[$counter];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$update_query[$counter] = $changes[$counter];\n\t\t\t}\n\n\t\t\t// Less than 0? That's bad\n\t\t\tif(isset($update_query[$counter]) && $update_query[$counter] < 0)\n\t\t\t{\n\t\t\t\t$update_query[$counter] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t$db->free_result($query);\n\n\t// Only update if we're actually doing something\n\tif(count($update_query) > 0)\n\t{\n\t\t$db->update_query(\"threads\", $update_query, \"tid='{$tid}'\");\n\t}\n}\n\n/**\n * Update the first post and lastpost data for a specific thread\n *\n * @param int $tid The thread ID\n */\nfunction update_thread_data($tid)\n{\n\tglobal $db;\n\n\t$thread = get_thread($tid);\n\n\t// If this is a moved thread marker, don't update it - we need it to stay as it is\n\tif(strpos($thread['closed'], 'moved|') !== false)\n\t{\n\t\treturn;\n\t}\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid' AND p.visible='1'\n\t\tORDER BY p.dateline DESC\n\t\tLIMIT 1\"\n\t);\n\t$lastpost = $db->fetch_array($query);\n\n\t$db->free_result($query);\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.pid, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid'\n\t\tORDER BY p.dateline ASC\n\t\tLIMIT 1\n\t\");\n\t$firstpost = $db->fetch_array($query);\n\n\t$db->free_result($query);\n\n\tif(empty($firstpost['username']))\n\t{\n\t\t$firstpost['username'] = $firstpost['postusername'];\n\t}\n\n\tif(empty($lastpost['username']))\n\t{\n\t\t$lastpost['username'] = $lastpost['postusername'];\n\t}\n\n\tif(empty($lastpost['dateline']))\n\t{\n\t\t$lastpost['username'] = $firstpost['username'];\n\t\t$lastpost['uid'] = $firstpost['uid'];\n\t\t$lastpost['dateline'] = $firstpost['dateline'];\n\t}\n\n\t$lastpost['username'] = $db->escape_string($lastpost['username']);\n\t$firstpost['username'] = $db->escape_string($firstpost['username']);\n\n\t$update_array = array(\n\t\t'firstpost' => (int)$firstpost['pid'],\n\t\t'username' => $firstpost['username'],\n\t\t'uid' => (int)$firstpost['uid'],\n\t\t'dateline' => (int)$firstpost['dateline'],\n\t\t'lastpost' => (int)$lastpost['dateline'],\n\t\t'lastposter' => $lastpost['username'],\n\t\t'lastposteruid' => (int)$lastpost['uid'],\n\t);\n\t$db->update_query(\"threads\", $update_array, \"tid='{$tid}'\");\n}\n\n/**\n * Updates the user counters with a specific value (or addition/subtraction of the previous value)\n *\n * @param int $uid The user ID\n * @param array $changes Array of items being updated (postnum, threadnum) and their value (ex, 1, +1, -1)\n */\nfunction update_user_counters($uid, $changes=array())\n{\n\tglobal $db;\n\n\t$update_query = array();\n\n\t$counters = array('postnum', 'threadnum');\n\t$uid = (int)$uid;\n\n\t// Fetch above counters for this user\n\t$query = $db->simple_select(\"users\", implode(\",\", $counters), \"uid='{$uid}'\");\n\t$user = $db->fetch_array($query);\n\n\tforeach($counters as $counter)\n\t{\n\t\tif(array_key_exists($counter, $changes))\n\t\t{\n\t\t\tif(substr($changes[$counter], 0, 2) == \"+-\")\n\t\t\t{\n\t\t\t\t$changes[$counter] = substr($changes[$counter], 1);\n\t\t\t}\n\t\t\t// Adding or subtracting from previous value?\n\t\t\tif(substr($changes[$counter], 0, 1) == \"+\" || substr($changes[$counter], 0, 1) == \"-\")\n\t\t\t{\n\t\t\t\tif((int)$changes[$counter] != 0)\n\t\t\t\t{\n\t\t\t\t\t$update_query[$counter] = $user[$counter] + $changes[$counter];\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$update_query[$counter] = $changes[$counter];\n\t\t\t}\n\n\t\t\t// Less than 0? That's bad\n\t\t\tif(isset($update_query[$counter]) && $update_query[$counter] < 0)\n\t\t\t{\n\t\t\t\t$update_query[$counter] = 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t$db->free_result($query);\n\n\t// Only update if we're actually doing something\n\tif(count($update_query) > 0)\n\t{\n\t\t$db->update_query(\"users\", $update_query, \"uid='{$uid}'\");\n\t}\n}\n\n/**\n * Deletes a thread from the database\n *\n * @param int $tid The thread ID\n * @return bool\n */\nfunction delete_thread($tid)\n{\n\tglobal $moderation;\n\n\tif(!is_object($moderation))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_moderation.php\";\n\t\t$moderation = new Moderation;\n\t}\n\n\treturn $moderation->delete_thread($tid);\n}\n\n/**\n * Deletes a post from the database\n *\n * @param int $pid The thread ID\n * @return bool\n */\nfunction delete_post($pid)\n{\n\tglobal $moderation;\n\n\tif(!is_object($moderation))\n\t{\n\t\trequire_once MYBB_ROOT.\"inc/class_moderation.php\";\n\t\t$moderation = new Moderation;\n\t}\n\n\treturn $moderation->delete_post($pid);\n}\n\n/**\n * Builds a forum jump menu\n *\n * @param int $pid The parent forum to start with\n * @param int $selitem The selected item ID\n * @param int $addselect If we need to add select boxes to this cal or not\n * @param string $depth The current depth of forums we're at\n * @param int $showextras Whether or not to show extra items such as User CP, Forum home\n * @param boolean $showall Ignore the showinjump setting and show all forums (for moderation pages)\n * @param mixed $permissions deprecated\n * @param string $name The name of the forum jump\n * @return string Forum jump items\n */\nfunction build_forum_jump($pid=0, $selitem=0, $addselect=1, $depth=\"\", $showextras=1, $showall=false, $permissions=\"\", $name=\"fid\")\n{\n\tglobal $forum_cache, $jumpfcache, $permissioncache, $mybb, $forumjump, $forumjumpbits, $gobutton, $theme, $templates, $lang;\n\n\t$pid = (int)$pid;\n\n\tif(!is_array($jumpfcache))\n\t{\n\t\tif(!is_array($forum_cache))\n\t\t{\n\t\t\tcache_forums();\n\t\t}\n\n\t\tforeach($forum_cache as $fid => $forum)\n\t\t{\n\t\t\tif($forum['active'] != 0)\n\t\t\t{\n\t\t\t\t$jumpfcache[$forum['pid']][$forum['disporder']][$forum['fid']] = $forum;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!is_array($permissioncache))\n\t{\n\t\t$permissioncache = forum_permissions();\n\t}\n\n\tif(isset($jumpfcache[$pid]) && is_array($jumpfcache[$pid]))\n\t{\n\t\tforeach($jumpfcache[$pid] as $main)\n\t\t{\n\t\t\tforeach($main as $forum)\n\t\t\t{\n\t\t\t\t$perms = $permissioncache[$forum['fid']];\n\n\t\t\t\tif($forum['fid'] != \"0\" && ($perms['canview'] != 0 || $mybb->settings['hideprivateforums'] == 0) && $forum['linkto'] == '' && ($forum['showinjump'] != 0 || $showall == true))\n\t\t\t\t{\n\t\t\t\t\t$optionselected = \"\";\n\n\t\t\t\t\tif($selitem == $forum['fid'])\n\t\t\t\t\t{\n\t\t\t\t\t\t$optionselected = 'selected=\"selected\"';\n\t\t\t\t\t}\n\n\t\t\t\t\t$forum['name'] = htmlspecialchars_uni(strip_tags($forum['name']));\n\n\t\t\t\t\teval(\"\\$forumjumpbits .= \\\"\".$templates->get(\"forumjump_bit\").\"\\\";\");\n\n\t\t\t\t\tif($forum_cache[$forum['fid']])\n\t\t\t\t\t{\n\t\t\t\t\t\t$newdepth = $depth.\"--\";\n\t\t\t\t\t\t$forumjumpbits .= build_forum_jump($forum['fid'], $selitem, 0, $newdepth, $showextras, $showall);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif($addselect)\n\t{\n\t\tif($showextras == 0)\n\t\t{\n\t\t\t$template = \"special\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$template = \"advanced\";\n\n\t\t\tif(strpos(FORUM_URL, '.html') !== false)\n\t\t\t{\n\t\t\t\t$forum_link = \"'\".str_replace('{fid}', \"'+option+'\", FORUM_URL).\"'\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$forum_link = \"'\".str_replace('{fid}', \"'+option\", FORUM_URL);\n\t\t\t}\n\t\t}\n\n\t\teval(\"\\$forumjump = \\\"\".$templates->get(\"forumjump_\".$template).\"\\\";\");\n\t}\n\n\treturn $forumjump;\n}\n\n/**\n * Returns the extension of a file.\n *\n * @param string $file The filename.\n * @return string The extension of the file.\n */\nfunction get_extension($file)\n{\n\treturn my_strtolower(my_substr(strrchr($file, \".\"), 1));\n}\n\n/**\n * Generates a random string.\n *\n * @param int $length The length of the string to generate.\n * @param bool $complex Whether to return complex string. Defaults to false\n * @return string The random string.\n */\nfunction random_str($length=8, $complex=false)\n{\n\t$set = array_merge(range(0, 9), range('A', 'Z'), range('a', 'z'));\n\t$str = array();\n\n\t// Complex strings have always at least 3 characters, even if $length < 3\n\tif($complex == true)\n\t{\n\t\t// At least one number\n\t\t$str[] = $set[my_rand(0, 9)];\n\n\t\t// At least one big letter\n\t\t$str[] = $set[my_rand(10, 35)];\n\n\t\t// At least one small letter\n\t\t$str[] = $set[my_rand(36, 61)];\n\n\t\t$length -= 3;\n\t}\n\n\tfor($i = 0; $i < $length; ++$i)\n\t{\n\t\t$str[] = $set[my_rand(0, 61)];\n\t}\n\n\t// Make sure they're in random order and convert them to a string\n\tshuffle($str);\n\n\treturn implode($str);\n}\n\n/**\n * Formats a username based on their display group\n *\n * @param string $username The username\n * @param int $usergroup The usergroup for the user\n * @param int $displaygroup The display group for the user\n * @return string The formatted username\n */\nfunction format_name($username, $usergroup, $displaygroup=0)\n{\n\tglobal $groupscache, $cache;\n\n\tif(!is_array($groupscache))\n\t{\n\t\t$groupscache = $cache->read(\"usergroups\");\n\t}\n\n\tif($displaygroup != 0)\n\t{\n\t\t$usergroup = $displaygroup;\n\t}\n\n\t$ugroup = $groupscache[$usergroup];\n\t$format = $ugroup['namestyle'];\n\t$userin = substr_count($format, \"{username}\");\n\n\tif($userin == 0)\n\t{\n\t\t$format = \"{username}\";\n\t}\n\n\t$format = stripslashes($format);\n\n\treturn str_replace(\"{username}\", $username, $format);\n}\n\n/**\n * Formats an avatar to a certain dimension\n *\n * @param string $avatar The avatar file name\n * @param string $dimensions Dimensions of the avatar, width x height (e.g. 44|44)\n * @param string $max_dimensions The maximum dimensions of the formatted avatar\n * @return array Information for the formatted avatar\n */\nfunction format_avatar($avatar, $dimensions = '', $max_dimensions = '')\n{\n\tglobal $mybb, $theme;\n\tstatic $avatars;\n\n\tif(!isset($avatars))\n\t{\n\t\t$avatars = array();\n\t}\n\n\tif(my_strpos($avatar, '://') !== false && !$mybb->settings['allowremoteavatars'])\n\t{\n\t\t// Remote avatar, but remote avatars are disallowed.\n\t\t$avatar = null;\n\t}\n\n\tif(!$avatar)\n\t{\n\t\t// Default avatar\n\t\tif(defined('IN_ADMINCP'))\n\t\t{\n\t\t\t$theme['imgdir'] = '../images';\n\t\t}\n\n\t\t$avatar = str_replace('{theme}', $theme['imgdir'], $mybb->settings['useravatar']);\n\t\t$dimensions = $mybb->settings['useravatardims'];\n\t}\n\n\tif(!$max_dimensions)\n\t{\n\t\t$max_dimensions = $mybb->settings['maxavatardims'];\n\t}\n\n\t// An empty key wouldn't work so we need to add a fall back\n\t$key = $dimensions;\n\tif(empty($key))\n\t{\n\t\t$key = 'default';\n\t}\n\t$key2 = $max_dimensions;\n\tif(empty($key2))\n\t{\n\t\t$key2 = 'default';\n\t}\n\n\tif(isset($avatars[$avatar][$key][$key2]))\n\t{\n\t\treturn $avatars[$avatar][$key][$key2];\n\t}\n\n\t$avatar_width_height = '';\n\n\tif($dimensions)\n\t{\n\t\t$dimensions = explode(\"|\", $dimensions);\n\n\t\tif($dimensions[0] && $dimensions[1])\n\t\t{\n\t\t\tlist($max_width, $max_height) = explode('x', $max_dimensions);\n\n\t\t\tif(!empty($max_dimensions) && ($dimensions[0] > $max_width || $dimensions[1] > $max_height))\n\t\t\t{\n\t\t\t\trequire_once MYBB_ROOT.\"inc/functions_image.php\";\n\t\t\t\t$scaled_dimensions = scale_image($dimensions[0], $dimensions[1], $max_width, $max_height);\n\t\t\t\t$avatar_width_height = \"width=\\\"{$scaled_dimensions['width']}\\\" height=\\\"{$scaled_dimensions['height']}\\\"\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$avatar_width_height = \"width=\\\"{$dimensions[0]}\\\" height=\\\"{$dimensions[1]}\\\"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t$avatars[$avatar][$key][$key2] = array(\n\t\t'image' => htmlspecialchars_uni($mybb->get_asset_url($avatar)),\n\t\t'width_height' => $avatar_width_height\n\t);\n\n\treturn $avatars[$avatar][$key][$key2];\n}\n\n/**\n * Build the javascript based MyCode inserter.\n *\n * @param string $bind The ID of the textarea to bind to. Defaults to \"message\".\n * @param bool $smilies Whether to include smilies. Defaults to true.\n *\n * @return string The MyCode inserter\n */\nfunction build_mycode_inserter($bind=\"message\", $smilies = true)\n{\n\tglobal $db, $mybb, $theme, $templates, $lang, $plugins, $smiliecache, $cache;\n\n\tif($mybb->settings['bbcodeinserter'] != 0)\n\t{\n\t\t$editor_lang_strings = array(\n\t\t\t\"editor_bold\" => \"Bold\",\n\t\t\t\"editor_italic\" => \"Italic\",\n\t\t\t\"editor_underline\" => \"Underline\",\n\t\t\t\"editor_strikethrough\" => \"Strikethrough\",\n\t\t\t\"editor_subscript\" => \"Subscript\",\n\t\t\t\"editor_superscript\" => \"Superscript\",\n\t\t\t\"editor_alignleft\" => \"Align left\",\n\t\t\t\"editor_center\" => \"Center\",\n\t\t\t\"editor_alignright\" => \"Align right\",\n\t\t\t\"editor_justify\" => \"Justify\",\n\t\t\t\"editor_fontname\" => \"Font Name\",\n\t\t\t\"editor_fontsize\" => \"Font Size\",\n\t\t\t\"editor_fontcolor\" => \"Font Color\",\n\t\t\t\"editor_removeformatting\" => \"Remove Formatting\",\n\t\t\t\"editor_cut\" => \"Cut\",\n\t\t\t\"editor_cutnosupport\" => \"Your browser does not allow the cut command. Please use the keyboard shortcut Ctrl/Cmd-X\",\n\t\t\t\"editor_copy\" => \"Copy\",\n\t\t\t\"editor_copynosupport\" => \"Your browser does not allow the copy command. Please use the keyboard shortcut Ctrl/Cmd-C\",\n\t\t\t\"editor_paste\" => \"Paste\",\n\t\t\t\"editor_pastenosupport\" => \"Your browser does not allow the paste command. Please use the keyboard shortcut Ctrl/Cmd-V\",\n\t\t\t\"editor_pasteentertext\" => \"Paste your text inside the following box:\",\n\t\t\t\"editor_pastetext\" => \"PasteText\",\n\t\t\t\"editor_numlist\" => \"Numbered list\",\n\t\t\t\"editor_bullist\" => \"Bullet list\",\n\t\t\t\"editor_undo\" => \"Undo\",\n\t\t\t\"editor_redo\" => \"Redo\",\n\t\t\t\"editor_rows\" => \"Rows:\",\n\t\t\t\"editor_cols\" => \"Cols:\",\n\t\t\t\"editor_inserttable\" => \"Insert a table\",\n\t\t\t\"editor_inserthr\" => \"Insert a horizontal rule\",\n\t\t\t\"editor_code\" => \"Code\",\n\t\t\t\"editor_width\" => \"Width (optional):\",\n\t\t\t\"editor_height\" => \"Height (optional):\",\n\t\t\t\"editor_insertimg\" => \"Insert an image\",\n\t\t\t\"editor_email\" => \"E-mail:\",\n\t\t\t\"editor_insertemail\" => \"Insert an email\",\n\t\t\t\"editor_url\" => \"URL:\",\n\t\t\t\"editor_insertlink\" => \"Insert a link\",\n\t\t\t\"editor_unlink\" => \"Unlink\",\n\t\t\t\"editor_more\" => \"More\",\n\t\t\t\"editor_insertemoticon\" => \"Insert an emoticon\",\n\t\t\t\"editor_videourl\" => \"Video URL:\",\n\t\t\t\"editor_videotype\" => \"Video Type:\",\n\t\t\t\"editor_insert\" => \"Insert\",\n\t\t\t\"editor_insertyoutubevideo\" => \"Insert a YouTube video\",\n\t\t\t\"editor_currentdate\" => \"Insert current date\",\n\t\t\t\"editor_currenttime\" => \"Insert current time\",\n\t\t\t\"editor_print\" => \"Print\",\n\t\t\t\"editor_viewsource\" => \"View source\",\n\t\t\t\"editor_description\" => \"Description (optional):\",\n\t\t\t\"editor_enterimgurl\" => \"Enter the image URL:\",\n\t\t\t\"editor_enteremail\" => \"Enter the e-mail address:\",\n\t\t\t\"editor_enterdisplayedtext\" => \"Enter the displayed text:\",\n\t\t\t\"editor_enterurl\" => \"Enter URL:\",\n\t\t\t\"editor_enteryoutubeurl\" => \"Enter the YouTube video URL or ID:\",\n\t\t\t\"editor_insertquote\" => \"Insert a Quote\",\n\t\t\t\"editor_invalidyoutube\" => \"Invalid YouTube video\",\n\t\t\t\"editor_dailymotion\" => \"Dailymotion\",\n\t\t\t\"editor_metacafe\" => \"MetaCafe\",\n\t\t\t\"editor_veoh\" => \"Veoh\",\n\t\t\t\"editor_vimeo\" => \"Vimeo\",\n\t\t\t\"editor_youtube\" => \"Youtube\",\n\t\t\t\"editor_facebook\" => \"Facebook\",\n\t\t\t\"editor_liveleak\" => \"LiveLeak\",\n\t\t\t\"editor_insertvideo\" => \"Insert a video\",\n\t\t\t\"editor_php\" => \"PHP\",\n\t\t\t\"editor_maximize\" => \"Maximize\"\n\t\t);\n\t\t$editor_language = \"(function ($) {\\n$.sceditor.locale[\\\"mybblang\\\"] = {\\n\";\n\n\t\t$editor_lang_strings = $plugins->run_hooks(\"mycode_add_codebuttons\", $editor_lang_strings);\n\n\t\t$editor_languages_count = count($editor_lang_strings);\n\t\t$i = 0;\n\t\tforeach($editor_lang_strings as $lang_string => $key)\n\t\t{\n\t\t\t$i++;\n\t\t\t$js_lang_string = str_replace(\"\\\"\", \"\\\\\\\"\", $key);\n\t\t\t$string = str_replace(\"\\\"\", \"\\\\\\\"\", $lang->$lang_string);\n\t\t\t$editor_language .= \"\\t\\\"{$js_lang_string}\\\": \\\"{$string}\\\"\";\n\n\t\t\tif($i < $editor_languages_count)\n\t\t\t{\n\t\t\t\t$editor_language .= \",\";\n\t\t\t}\n\n\t\t\t$editor_language .= \"\\n\";\n\t\t}\n\n\t\t$editor_language .= \"}})(jQuery);\";\n\n\t\tif(defined(\"IN_ADMINCP\"))\n\t\t{\n\t\t\tglobal $page;\n\t\t\t$codeinsert = $page->build_codebuttons_editor($bind, $editor_language, $smilies);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Smilies\n\t\t\t$emoticon = \"\";\n\t\t\t$emoticons_enabled = \"false\";\n\t\t\tif($smilies)\n\t\t\t{\n\t\t\t\tif(!$smiliecache)\n\t\t\t\t{\n\t\t\t\t\tif(!isset($smilie_cache) || !is_array($smilie_cache))\n\t\t\t\t\t{\n\t\t\t\t\t\t$smilie_cache = $cache->read(\"smilies\");\n\t\t\t\t\t}\n\t\t\t\t\tforeach($smilie_cache as $smilie)\n\t\t\t\t\t{\n\t\t\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t\t\t$smiliecache[$smilie['sid']] = $smilie;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif($mybb->settings['smilieinserter'] && $mybb->settings['smilieinsertercols'] && $mybb->settings['smilieinsertertot'] && !empty($smiliecache))\n\t\t\t\t{\n\t\t\t\t\t$emoticon = \",emoticon\";\n\t\t\t\t}\n\t\t\t\t$emoticons_enabled = \"true\";\n\n\t\t\t\tunset($smilie);\n\n\t\t\t\tif(is_array($smiliecache))\n\t\t\t\t{\n\t\t\t\t\treset($smiliecache);\n\n\t\t\t\t\t$dropdownsmilies = $moresmilies = $hiddensmilies = \"\";\n\t\t\t\t\t$i = 0;\n\n\t\t\t\t\tforeach($smiliecache as $smilie)\n\t\t\t\t\t{\n\t\t\t\t\t\t$finds = explode(\"\\n\", $smilie['find']);\n\t\t\t\t\t\t$finds_count = count($finds);\n\n\t\t\t\t\t\t// Only show the first text to replace in the box\n\t\t\t\t\t\t$smilie['find'] = $finds[0];\n\n\t\t\t\t\t\t$find = str_replace(array('\\\\', '\"'), array('\\\\\\\\', '\\\"'), htmlspecialchars_uni($smilie['find']));\n\t\t\t\t\t\t$image = htmlspecialchars_uni($mybb->get_asset_url($smilie['image']));\n\t\t\t\t\t\t$image = str_replace(array('\\\\', '\"'), array('\\\\\\\\', '\\\"'), $image);\n\n\t\t\t\t\t\tif(!$mybb->settings['smilieinserter'] || !$mybb->settings['smilieinsertercols'] || !$mybb->settings['smilieinsertertot'] || !$smilie['showclickable'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$hiddensmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif($i < $mybb->settings['smilieinsertertot'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$dropdownsmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t\t++$i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$moresmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor($j = 1; $j < $finds_count; ++$j)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$find = str_replace(array('\\\\', '\"'), array('\\\\\\\\', '\\\"'), htmlspecialchars_uni($finds[$j]));\n\t\t\t\t\t\t\t$hiddensmilies .= '\"'.$find.'\": \"'.$image.'\",';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$basic1 = $basic2 = $align = $font = $size = $color = $removeformat = $email = $link = $list = $code = $sourcemode = \"\";\n\n\t\t\tif($mybb->settings['allowbasicmycode'] == 1)\n\t\t\t{\n\t\t\t\t$basic1 = \"bold,italic,underline,strike|\";\n\t\t\t\t$basic2 = \"horizontalrule,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowalignmycode'] == 1)\n\t\t\t{\n\t\t\t\t$align = \"left,center,right,justify|\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowfontmycode'] == 1)\n\t\t\t{\n\t\t\t\t$font = \"font,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowsizemycode'] == 1)\n\t\t\t{\n\t\t\t\t$size = \"size,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowcolormycode'] == 1)\n\t\t\t{\n\t\t\t\t$color = \"color,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowfontmycode'] == 1 || $mybb->settings['allowsizemycode'] == 1 || $mybb->settings['allowcolormycode'] == 1)\n\t\t\t{\n\t\t\t\t$removeformat = \"removeformat|\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowemailmycode'] == 1)\n\t\t\t{\n\t\t\t\t$email = \"email,\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowlinkmycode'] == 1)\n\t\t\t{\n\t\t\t\t$link = \"link,unlink\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowlistmycode'] == 1)\n\t\t\t{\n\t\t\t\t$list = \"bulletlist,orderedlist|\";\n\t\t\t}\n\n\t\t\tif($mybb->settings['allowcodemycode'] == 1)\n\t\t\t{\n\t\t\t\t$code = \"code,php,\";\n\t\t\t}\n\n\t\t\tif($mybb->user['sourceeditor'] == 1)\n\t\t\t{\n\t\t\t\t$sourcemode = \"MyBBEditor.sourceMode(true);\";\n\t\t\t}\n\n\t\t\teval(\"\\$codeinsert = \\\"\".$templates->get(\"codebuttons\").\"\\\";\");\n\t\t}\n\t}\n\n\treturn $codeinsert;\n}\n\n/**\n * Build the javascript clickable smilie inserter\n *\n * @return string The clickable smilies list\n */\nfunction build_clickable_smilies()\n{\n\tglobal $cache, $smiliecache, $theme, $templates, $lang, $mybb, $smiliecount;\n\n\tif($mybb->settings['smilieinserter'] != 0 && $mybb->settings['smilieinsertercols'] && $mybb->settings['smilieinsertertot'])\n\t{\n\t\tif(!$smiliecount)\n\t\t{\n\t\t\t$smilie_cache = $cache->read(\"smilies\");\n\t\t\t$smiliecount = count($smilie_cache);\n\t\t}\n\n\t\tif(!$smiliecache)\n\t\t{\n\t\t\tif(!is_array($smilie_cache))\n\t\t\t{\n\t\t\t\t$smilie_cache = $cache->read(\"smilies\");\n\t\t\t}\n\t\t\tforeach($smilie_cache as $smilie)\n\t\t\t{\n\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t$smiliecache[$smilie['sid']] = $smilie;\n\t\t\t}\n\t\t}\n\n\t\tunset($smilie);\n\n\t\tif(is_array($smiliecache))\n\t\t{\n\t\t\treset($smiliecache);\n\n\t\t\t$getmore = '';\n\t\t\tif($mybb->settings['smilieinsertertot'] >= $smiliecount)\n\t\t\t{\n\t\t\t\t$mybb->settings['smilieinsertertot'] = $smiliecount;\n\t\t\t}\n\t\t\telse if($mybb->settings['smilieinsertertot'] < $smiliecount)\n\t\t\t{\n\t\t\t\t$smiliecount = $mybb->settings['smilieinsertertot'];\n\t\t\t\teval(\"\\$getmore = \\\"\".$templates->get(\"smilieinsert_getmore\").\"\\\";\");\n\t\t\t}\n\n\t\t\t$smilies = '';\n\t\t\t$counter = 0;\n\t\t\t$i = 0;\n\n\t\t\t$extra_class = '';\n\t\t\tforeach($smiliecache as $smilie)\n\t\t\t{\n\t\t\t\tif($i < $mybb->settings['smilieinsertertot'] && $smilie['showclickable'] != 0)\n\t\t\t\t{\n\t\t\t\t\t$smilie['image'] = str_replace(\"{theme}\", $theme['imgdir'], $smilie['image']);\n\t\t\t\t\t$smilie['image'] = htmlspecialchars_uni($mybb->get_asset_url($smilie['image']));\n\t\t\t\t\t$smilie['name'] = htmlspecialchars_uni($smilie['name']);\n\n\t\t\t\t\t// Only show the first text to replace in the box\n\t\t\t\t\t$temp = explode(\"\\n\", $smilie['find']); // assign to temporary variable for php 5.3 compatibility\n\t\t\t\t\t$smilie['find'] = $temp[0];\n\n\t\t\t\t\t$find = str_replace(array('\\\\', \"'\"), array('\\\\\\\\', \"\\'\"), htmlspecialchars_uni($smilie['find']));\n\n\t\t\t\t\t$onclick = \" onclick=\\\"MyBBEditor.insertText(' $find ');\\\"\";\n\t\t\t\t\t$extra_class = ' smilie_pointer';\n\t\t\t\t\teval('$smilie = \"'.$templates->get('smilie', 1, 0).'\";');\n\t\t\t\t\teval(\"\\$smilie_icons .= \\\"\".$templates->get(\"smilieinsert_smilie\").\"\\\";\");\n\t\t\t\t\t++$i;\n\t\t\t\t\t++$counter;\n\n\t\t\t\t\tif($counter == $mybb->settings['smilieinsertercols'])\n\t\t\t\t\t{\n\t\t\t\t\t\t$counter = 0;\n\t\t\t\t\t\teval(\"\\$smilies .= \\\"\".$templates->get(\"smilieinsert_row\").\"\\\";\");\n\t\t\t\t\t\t$smilie_icons = '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($counter != 0)\n\t\t\t{\n\t\t\t\t$colspan = $mybb->settings['smilieinsertercols'] - $counter;\n\t\t\t\teval(\"\\$smilies .= \\\"\".$templates->get(\"smilieinsert_row_empty\").\"\\\";\");\n\t\t\t}\n\n\t\t\teval(\"\\$clickablesmilies = \\\"\".$templates->get(\"smilieinsert\").\"\\\";\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$clickablesmilies = \"\";\n\t\t}\n\t}\n\telse\n\t{\n\t\t$clickablesmilies = \"\";\n\t}\n\n\treturn $clickablesmilies;\n}\n\n/**\n * Builds thread prefixes and returns a selected prefix (or all)\n *\n *  @param int $pid The prefix ID (0 to return all)\n *  @return array The thread prefix's values (or all thread prefixes)\n */\nfunction build_prefixes($pid=0)\n{\n\tglobal $cache;\n\tstatic $prefixes_cache;\n\n\tif(is_array($prefixes_cache))\n\t{\n\t\tif($pid > 0 && is_array($prefixes_cache[$pid]))\n\t\t{\n\t\t\treturn $prefixes_cache[$pid];\n\t\t}\n\n\t\treturn $prefixes_cache;\n\t}\n\n\t$prefix_cache = $cache->read(\"threadprefixes\");\n\n\tif(!is_array($prefix_cache))\n\t{\n\t\t// No cache\n\t\t$prefix_cache = $cache->read(\"threadprefixes\", true);\n\n\t\tif(!is_array($prefix_cache))\n\t\t{\n\t\t\treturn array();\n\t\t}\n\t}\n\n\t$prefixes_cache = array();\n\tforeach($prefix_cache as $prefix)\n\t{\n\t\t$prefixes_cache[$prefix['pid']] = $prefix;\n\t}\n\n\tif($pid != 0 && is_array($prefixes_cache[$pid]))\n\t{\n\t\treturn $prefixes_cache[$pid];\n\t}\n\telse if(!empty($prefixes_cache))\n\t{\n\t\treturn $prefixes_cache;\n\t}\n\n\treturn false;\n}\n\n/**\n * Build the thread prefix selection menu for the current user\n *\n *  @param int|string $fid The forum ID (integer ID or string all)\n *  @param int|string $selected_pid The selected prefix ID (integer ID or string any)\n *  @param int $multiple Allow multiple prefix selection\n *  @param int $previous_pid The previously selected prefix ID\n *  @return string The thread prefix selection menu\n */\nfunction build_prefix_select($fid, $selected_pid=0, $multiple=0, $previous_pid=0)\n{\n\tglobal $cache, $db, $lang, $mybb, $templates;\n\n\tif($fid != 'all')\n\t{\n\t\t$fid = (int)$fid;\n\t}\n\n\t$prefix_cache = build_prefixes(0);\n\tif(empty($prefix_cache))\n\t{\n\t\t// We've got no prefixes to show\n\t\treturn '';\n\t}\n\n\t// Go through each of our prefixes and decide which ones we can use\n\t$prefixes = array();\n\tforeach($prefix_cache as $prefix)\n\t{\n\t\tif($fid != \"all\" && $prefix['forums'] != \"-1\")\n\t\t{\n\t\t\t// Decide whether this prefix can be used in our forum\n\t\t\t$forums = explode(\",\", $prefix['forums']);\n\n\t\t\tif(!in_array($fid, $forums) && $prefix['pid'] != $previous_pid)\n\t\t\t{\n\t\t\t\t// This prefix is not in our forum list\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\tif(is_member($prefix['groups']) || $prefix['pid'] == $previous_pid)\n\t\t{\n\t\t\t// The current user can use this prefix\n\t\t\t$prefixes[$prefix['pid']] = $prefix;\n\t\t}\n\t}\n\n\tif(empty($prefixes))\n\t{\n\t\treturn '';\n\t}\n\n\t$prefixselect = $prefixselect_prefix = '';\n\n\tif($multiple == 1)\n\t{\n\t\t$any_selected = \"\";\n\t\tif($selected_pid == 'any')\n\t\t{\n\t\t\t$any_selected = \" selected=\\\"selected\\\"\";\n\t\t}\n\t}\n\n\t$default_selected = \"\";\n\tif(((int)$selected_pid == 0) && $selected_pid != 'any')\n\t{\n\t\t$default_selected = \" selected=\\\"selected\\\"\";\n\t}\n\n\tforeach($prefixes as $prefix)\n\t{\n\t\t$selected = \"\";\n\t\tif($prefix['pid'] == $selected_pid)\n\t\t{\n\t\t\t$selected = \" selected=\\\"selected\\\"\";\n\t\t}\n\n\t\t$prefix['prefix'] = htmlspecialchars_uni($prefix['prefix']);\n\t\teval(\"\\$prefixselect_prefix .= \\\"\".$templates->get(\"post_prefixselect_prefix\").\"\\\";\");\n\t}\n\n\tif($multiple != 0)\n\t{\n\t\teval(\"\\$prefixselect = \\\"\".$templates->get(\"post_prefixselect_multiple\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\teval(\"\\$prefixselect = \\\"\".$templates->get(\"post_prefixselect_single\").\"\\\";\");\n\t}\n\n\treturn $prefixselect;\n}\n\n/**\n * Build the thread prefix selection menu for a forum without group permission checks\n *\n *  @param int $fid The forum ID (integer ID)\n *  @param int $selected_pid The selected prefix ID (integer ID)\n *  @return string The thread prefix selection menu\n */\nfunction build_forum_prefix_select($fid, $selected_pid=0)\n{\n\tglobal $cache, $db, $lang, $mybb, $templates;\n\n\t$fid = (int)$fid;\n\n\t$prefix_cache = build_prefixes(0);\n\tif(empty($prefix_cache))\n\t{\n\t\t// We've got no prefixes to show\n\t\treturn '';\n\t}\n\n\t// Go through each of our prefixes and decide which ones we can use\n\t$prefixes = array();\n\tforeach($prefix_cache as $prefix)\n\t{\n\t\tif($prefix['forums'] != \"-1\")\n\t\t{\n\t\t\t// Decide whether this prefix can be used in our forum\n\t\t\t$forums = explode(\",\", $prefix['forums']);\n\n\t\t\tif(in_array($fid, $forums))\n\t\t\t{\n\t\t\t\t// This forum can use this prefix!\n\t\t\t\t$prefixes[$prefix['pid']] = $prefix;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// This prefix is for anybody to use...\n\t\t\t$prefixes[$prefix['pid']] = $prefix;\n\t\t}\n\t}\n\n\tif(empty($prefixes))\n\t{\n\t\treturn '';\n\t}\n\n\t$default_selected = array();\n\t$selected_pid = (int)$selected_pid;\n\n\tif($selected_pid == 0)\n\t{\n\t\t$default_selected['all'] = ' selected=\"selected\"';\n\t}\n\telse if($selected_pid == -1)\n\t{\n\t\t$default_selected['none'] = ' selected=\"selected\"';\n\t}\n\telse if($selected_pid == -2)\n\t{\n\t\t$default_selected['any'] = ' selected=\"selected\"';\n\t}\n\n\tforeach($prefixes as $prefix)\n\t{\n\t\t$selected = '';\n\t\tif($prefix['pid'] == $selected_pid)\n\t\t{\n\t\t\t$selected = ' selected=\"selected\"';\n\t\t}\n\n\t\t$prefix['prefix'] = htmlspecialchars_uni($prefix['prefix']);\n\t\teval('$prefixselect_prefix .= \"'.$templates->get(\"forumdisplay_threadlist_prefixes_prefix\").'\";');\n\t}\n\n\teval('$prefixselect = \"'.$templates->get(\"forumdisplay_threadlist_prefixes\").'\";');\n\treturn $prefixselect;\n}\n\n/**\n * Gzip encodes text to a specified level\n *\n * @param string $contents The string to encode\n * @param int $level The level (1-9) to encode at\n * @return string The encoded string\n */\nfunction gzip_encode($contents, $level=1)\n{\n\tif(function_exists(\"gzcompress\") && function_exists(\"crc32\") && !headers_sent() && !(ini_get('output_buffering') && my_strpos(' '.ini_get('output_handler'), 'ob_gzhandler')))\n\t{\n\t\t$httpaccept_encoding = '';\n\n\t\tif(isset($_SERVER['HTTP_ACCEPT_ENCODING']))\n\t\t{\n\t\t\t$httpaccept_encoding = $_SERVER['HTTP_ACCEPT_ENCODING'];\n\t\t}\n\n\t\tif(my_strpos(\" \".$httpaccept_encoding, \"x-gzip\"))\n\t\t{\n\t\t\t$encoding = \"x-gzip\";\n\t\t}\n\n\t\tif(my_strpos(\" \".$httpaccept_encoding, \"gzip\"))\n\t\t{\n\t\t\t$encoding = \"gzip\";\n\t\t}\n\n\t\tif(isset($encoding))\n\t\t{\n\t\t\theader(\"Content-Encoding: $encoding\");\n\n\t\t\tif(function_exists(\"gzencode\"))\n\t\t\t{\n\t\t\t\t$contents = gzencode($contents, $level);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$size = strlen($contents);\n\t\t\t\t$crc = crc32($contents);\n\t\t\t\t$gzdata = \"\\x1f\\x8b\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\xff\";\n\t\t\t\t$gzdata .= my_substr(gzcompress($contents, $level), 2, -4);\n\t\t\t\t$gzdata .= pack(\"V\", $crc);\n\t\t\t\t$gzdata .= pack(\"V\", $size);\n\t\t\t\t$contents = $gzdata;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $contents;\n}\n\n/**\n * Log the actions of a moderator.\n *\n * @param array $data The data of the moderator's action.\n * @param string $action The message to enter for the action the moderator performed.\n */\nfunction log_moderator_action($data, $action=\"\")\n{\n\tglobal $mybb, $db, $session;\n\n\t$fid = 0;\n\tif(isset($data['fid']))\n\t{\n\t\t$fid = (int)$data['fid'];\n\t\tunset($data['fid']);\n\t}\n\n\t$tid = 0;\n\tif(isset($data['tid']))\n\t{\n\t\t$tid = (int)$data['tid'];\n\t\tunset($data['tid']);\n\t}\n\n\t$pid = 0;\n\tif(isset($data['pid']))\n\t{\n\t\t$pid = (int)$data['pid'];\n\t\tunset($data['pid']);\n\t}\n\n\t// Any remaining extra data - we my_serialize and insert in to its own column\n\tif(is_array($data))\n\t{\n\t\t$data = my_serialize($data);\n\t}\n\n\t$sql_array = array(\n\t\t\"uid\" => (int)$mybb->user['uid'],\n\t\t\"dateline\" => TIME_NOW,\n\t\t\"fid\" => (int)$fid,\n\t\t\"tid\" => $tid,\n\t\t\"pid\" => $pid,\n\t\t\"action\" => $db->escape_string($action),\n\t\t\"data\" => $db->escape_string($data),\n\t\t\"ipaddress\" => $db->escape_binary($session->packedip)\n\t);\n\t$db->insert_query(\"moderatorlog\", $sql_array);\n}\n\n/**\n * Get the formatted reputation for a user.\n *\n * @param int $reputation The reputation value\n * @param int $uid The user ID (if not specified, the generated reputation will not be a link)\n * @return string The formatted repuation\n */\nfunction get_reputation($reputation, $uid=0)\n{\n\tglobal $theme, $templates;\n\n\t$display_reputation = $reputation_class = '';\n\tif($reputation < 0)\n\t{\n\t\t$reputation_class = \"reputation_negative\";\n\t}\n\telseif($reputation > 0)\n\t{\n\t\t$reputation_class = \"reputation_positive\";\n\t}\n\telse\n\t{\n\t\t$reputation_class = \"reputation_neutral\";\n\t}\n\n\t$reputation = my_number_format($reputation);\n\n\tif($uid != 0)\n\t{\n\t\teval(\"\\$display_reputation = \\\"\".$templates->get(\"postbit_reputation_formatted_link\").\"\\\";\");\n\t}\n\telse\n\t{\n\t\teval(\"\\$display_reputation = \\\"\".$templates->get(\"postbit_reputation_formatted\").\"\\\";\");\n\t}\n\n\treturn $display_reputation;\n}\n\n/**\n * Fetch a color coded version of a warning level (based on it's percentage)\n *\n * @param int $level The warning level (percentage of 100)\n * @return string Formatted warning level\n */\nfunction get_colored_warning_level($level)\n{\n\tglobal $templates;\n\n\t$warning_class = '';\n\tif($level >= 80)\n\t{\n\t\t$warning_class = \"high_warning\";\n\t}\n\telse if($level >= 50)\n\t{\n\t\t$warning_class = \"moderate_warning\";\n\t}\n\telse if($level >= 25)\n\t{\n\t\t$warning_class = \"low_warning\";\n\t}\n\telse\n\t{\n\t\t$warning_class = \"normal_warning\";\n\t}\n\n\teval(\"\\$level = \\\"\".$templates->get(\"postbit_warninglevel_formatted\").\"\\\";\");\n\treturn $level;\n}\n\n/**\n * Fetch the IP address of the current user.\n *\n * @return string The IP address.\n */\nfunction get_ip()\n{\n\tglobal $mybb, $plugins;\n\n\t$ip = strtolower($_SERVER['REMOTE_ADDR']);\n\n\tif($mybb->settings['ip_forwarded_check'])\n\t{\n\t\t$addresses = array();\n\n\t\tif(isset($_SERVER['HTTP_X_FORWARDED_FOR']))\n\t\t{\n\t\t\t$addresses = explode(',', strtolower($_SERVER['HTTP_X_FORWARDED_FOR']));\n\t\t}\n\t\telseif(isset($_SERVER['HTTP_X_REAL_IP']))\n\t\t{\n\t\t\t$addresses = explode(',', strtolower($_SERVER['HTTP_X_REAL_IP']));\n\t\t}\n\n\t\tif(is_array($addresses))\n\t\t{\n\t\t\tforeach($addresses as $val)\n\t\t\t{\n\t\t\t\t$val = trim($val);\n\t\t\t\t// Validate IP address and exclude private addresses\n\t\t\t\tif(my_inet_ntop(my_inet_pton($val)) == $val && !preg_match(\"#^(10\\.|172\\.(1[6-9]|2[0-9]|3[0-1])\\.|192\\.168\\.|fe80:|fe[c-f][0-f]:|f[c-d][0-f]{2}:)#\", $val))\n\t\t\t\t{\n\t\t\t\t\t$ip = $val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!$ip)\n\t{\n\t\tif(isset($_SERVER['HTTP_CLIENT_IP']))\n\t\t{\n\t\t\t$ip = strtolower($_SERVER['HTTP_CLIENT_IP']);\n\t\t}\n\t}\n\n\tif($plugins)\n\t{\n\t\t$ip_array = array(\"ip\" => &$ip); // Used for backwards compatibility on this hook with the updated run_hooks() function.\n\t\t$plugins->run_hooks(\"get_ip\", $ip_array);\n\t}\n\n\treturn $ip;\n}\n\n/**\n * Fetch the friendly size (GB, MB, KB, B) for a specified file size.\n *\n * @param int $size The size in bytes\n * @return string The friendly file size\n */\nfunction get_friendly_size($size)\n{\n\tglobal $lang;\n\n\tif(!is_numeric($size))\n\t{\n\t\treturn $lang->na;\n\t}\n\n\t// Yottabyte (1024 Zettabytes)\n\tif($size >= 1208925819614629174706176)\n\t{\n\t\t$size = my_number_format(round(($size / 1208925819614629174706176), 2)).\" \".$lang->size_yb;\n\t}\n\t// Zetabyte (1024 Exabytes)\n\telseif($size >= 1180591620717411303424)\n\t{\n\t\t$size = my_number_format(round(($size / 1180591620717411303424), 2)).\" \".$lang->size_zb;\n\t}\n\t// Exabyte (1024 Petabytes)\n\telseif($size >= 1152921504606846976)\n\t{\n\t\t$size = my_number_format(round(($size / 1152921504606846976), 2)).\" \".$lang->size_eb;\n\t}\n\t// Petabyte (1024 Terabytes)\n\telseif($size >= 1125899906842624)\n\t{\n\t\t$size = my_number_format(round(($size / 1125899906842624), 2)).\" \".$lang->size_pb;\n\t}\n\t// Terabyte (1024 Gigabytes)\n\telseif($size >= 1099511627776)\n\t{\n\t\t$size = my_number_format(round(($size / 1099511627776), 2)).\" \".$lang->size_tb;\n\t}\n\t// Gigabyte (1024 Megabytes)\n\telseif($size >= 1073741824)\n\t{\n\t\t$size = my_number_format(round(($size / 1073741824), 2)).\" \".$lang->size_gb;\n\t}\n\t// Megabyte (1024 Kilobytes)\n\telseif($size >= 1048576)\n\t{\n\t\t$size = my_number_format(round(($size / 1048576), 2)).\" \".$lang->size_mb;\n\t}\n\t// Kilobyte (1024 bytes)\n\telseif($size >= 1024)\n\t{\n\t\t$size = my_number_format(round(($size / 1024), 2)).\" \".$lang->size_kb;\n\t}\n\telseif($size == 0)\n\t{\n\t\t$size = \"0 \".$lang->size_bytes;\n\t}\n\telse\n\t{\n\t\t$size = my_number_format($size).\" \".$lang->size_bytes;\n\t}\n\n\treturn $size;\n}\n\n/**\n * Format a decimal number in to microseconds, milliseconds, or seconds.\n *\n * @param int $time The time in microseconds\n * @return string The friendly time duration\n */\nfunction format_time_duration($time)\n{\n\tglobal $lang;\n\n\tif(!is_numeric($time))\n\t{\n\t\treturn $lang->na;\n\t}\n\n\tif(round(1000000 * $time, 2) < 1000)\n\t{\n\t\t$time = number_format(round(1000000 * $time, 2)).\" \u03bcs\";\n\t}\n\telseif(round(1000000 * $time, 2) >= 1000 && round(1000000 * $time, 2) < 1000000)\n\t{\n\t\t$time = number_format(round((1000 * $time), 2)).\" ms\";\n\t}\n\telse\n\t{\n\t\t$time = round($time, 3).\" seconds\";\n\t}\n\n\treturn $time;\n}\n\n/**\n * Get the attachment icon for a specific file extension\n *\n * @param string $ext The file extension\n * @return string The attachment icon\n */\nfunction get_attachment_icon($ext)\n{\n\tglobal $cache, $attachtypes, $theme, $templates, $lang, $mybb;\n\n\tif(!$attachtypes)\n\t{\n\t\t$attachtypes = $cache->read(\"attachtypes\");\n\t}\n\n\t$ext = my_strtolower($ext);\n\n\tif($attachtypes[$ext]['icon'])\n\t{\n\t\tstatic $attach_icons_schemes = array();\n\t\tif(!isset($attach_icons_schemes[$ext]))\n\t\t{\n\t\t\t$attach_icons_schemes[$ext] = parse_url($attachtypes[$ext]['icon']);\n\t\t\tif(!empty($attach_icons_schemes[$ext]['scheme']))\n\t\t\t{\n\t\t\t\t$attach_icons_schemes[$ext] = $attachtypes[$ext]['icon'];\n\t\t\t}\n\t\t\telseif(defined(\"IN_ADMINCP\"))\n\t\t\t{\n\t\t\t\t$attach_icons_schemes[$ext] = str_replace(\"{theme}\", \"\", $attachtypes[$ext]['icon']);\n\t\t\t\tif(my_substr($attach_icons_schemes[$ext], 0, 1) != \"/\")\n\t\t\t\t{\n\t\t\t\t\t$attach_icons_schemes[$ext] = \"../\".$attach_icons_schemes[$ext];\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif(defined(\"IN_PORTAL\"))\n\t\t\t{\n\t\t\t\tglobal $change_dir;\n\t\t\t\t$attach_icons_schemes[$ext] = $change_dir.\"/\".str_replace(\"{theme}\", $theme['imgdir'], $attachtypes[$ext]['icon']);\n\t\t\t\t$attach_icons_schemes[$ext] = $mybb->get_asset_url($attach_icons_schemes[$ext]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$attach_icons_schemes[$ext] = str_replace(\"{theme}\", $theme['imgdir'], $attachtypes[$ext]['icon']);\n\t\t\t\t$attach_icons_schemes[$ext] = $mybb->get_asset_url($attach_icons_schemes[$ext]);\n\t\t\t}\n\t\t}\n\n\t\t$icon = $attach_icons_schemes[$ext];\n\n\t\t$name = htmlspecialchars_uni($attachtypes[$ext]['name']);\n\t}\n\telse\n\t{\n\t\tif(defined(\"IN_ADMINCP\"))\n\t\t{\n\t\t\t$theme['imgdir'] = \"../images\";\n\t\t}\n\t\telse if(defined(\"IN_PORTAL\"))\n\t\t{\n\t\t\tglobal $change_dir;\n\t\t\t$theme['imgdir'] = \"{$change_dir}/images\";\n\t\t}\n\n\t\t$icon = \"{$theme['imgdir']}/attachtypes/unknown.png\";\n\n\t\t$name = $lang->unknown;\n\t}\n\n\t$icon = htmlspecialchars_uni($icon);\n\teval(\"\\$attachment_icon = \\\"\".$templates->get(\"attachment_icon\").\"\\\";\");\n\treturn $attachment_icon;\n}\n\n/**\n * Get a list of the unviewable forums for the current user\n *\n * @param boolean $only_readable_threads Set to true to only fetch those forums for which users can actually read a thread in.\n * @return string Comma separated values list of the forum IDs which the user cannot view\n */\nfunction get_unviewable_forums($only_readable_threads=false)\n{\n\tglobal $forum_cache, $permissioncache, $mybb;\n\n\tif(!is_array($forum_cache))\n\t{\n\t\tcache_forums();\n\t}\n\n\tif(!is_array($permissioncache))\n\t{\n\t\t$permissioncache = forum_permissions();\n\t}\n\n\t$password_forums = $unviewable = array();\n\tforeach($forum_cache as $fid => $forum)\n\t{\n\t\tif($permissioncache[$forum['fid']])\n\t\t{\n\t\t\t$perms = $permissioncache[$forum['fid']];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$perms = $mybb->usergroup;\n\t\t}\n\n\t\t$pwverified = 1;\n\n\t\tif($forum['password'] != \"\")\n\t\t{\n\t\t\tif($mybb->cookies['forumpass'][$forum['fid']] !== md5($mybb->user['uid'].$forum['password']))\n\t\t\t{\n\t\t\t\t$pwverified = 0;\n\t\t\t}\n\n\t\t\t$password_forums[$forum['fid']] = $forum['password'];\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Check parents for passwords\n\t\t\t$parents = explode(\",\", $forum['parentlist']);\n\t\t\tforeach($parents as $parent)\n\t\t\t{\n\t\t\t\tif(isset($password_forums[$parent]) && $mybb->cookies['forumpass'][$parent] !== md5($mybb->user['uid'].$password_forums[$parent]))\n\t\t\t\t{\n\t\t\t\t\t$pwverified = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif($perms['canview'] == 0 || $pwverified == 0 || ($only_readable_threads == true && $perms['canviewthreads'] == 0))\n\t\t{\n\t\t\t$unviewable[] = $forum['fid'];\n\t\t}\n\t}\n\n\t$unviewableforums = implode(',', $unviewable);\n\n\treturn $unviewableforums;\n}\n\n/**\n * Fixes mktime for dates earlier than 1970\n *\n * @param string $format The date format to use\n * @param int $year The year of the date\n * @return string The correct date format\n */\nfunction fix_mktime($format, $year)\n{\n\t// Our little work around for the date < 1970 thing.\n\t// -2 idea provided by Matt Light (http://www.mephex.com)\n\t$format = str_replace(\"Y\", $year, $format);\n\t$format = str_replace(\"y\", my_substr($year, -2), $format);\n\n\treturn $format;\n}\n\n/**\n * Build the breadcrumb navigation trail from the specified items\n *\n * @return string The formatted breadcrumb navigation trail\n */\nfunction build_breadcrumb()\n{\n\tglobal $nav, $navbits, $templates, $theme, $lang, $mybb;\n\n\teval(\"\\$navsep = \\\"\".$templates->get(\"nav_sep\").\"\\\";\");\n\n\t$i = 0;\n\t$activesep = '';\n\n\tif(is_array($navbits))\n\t{\n\t\treset($navbits);\n\t\tforeach($navbits as $key => $navbit)\n\t\t{\n\t\t\tif(isset($navbits[$key+1]))\n\t\t\t{\n\t\t\t\tif(isset($navbits[$key+2]))\n\t\t\t\t{\n\t\t\t\t\t$sep = $navsep;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$sep = \"\";\n\t\t\t\t}\n\n\t\t\t\t$multipage = null;\n\t\t\t\t$multipage_dropdown = null;\n\t\t\t\tif(!empty($navbit['multipage']))\n\t\t\t\t{\n\t\t\t\t\tif(!$mybb->settings['threadsperpage'] || (int)$mybb->settings['threadsperpage'] < 1)\n\t\t\t\t\t{\n\t\t\t\t\t\t$mybb->settings['threadsperpage'] = 20;\n\t\t\t\t\t}\n\n\t\t\t\t\t$multipage = multipage($navbit['multipage']['num_threads'], $mybb->settings['threadsperpage'], $navbit['multipage']['current_page'], $navbit['multipage']['url'], true);\n\t\t\t\t\tif($multipage)\n\t\t\t\t\t{\n\t\t\t\t\t\t++$i;\n\t\t\t\t\t\teval(\"\\$multipage_dropdown = \\\"\".$templates->get(\"nav_dropdown\").\"\\\";\");\n\t\t\t\t\t\t$sep = $multipage_dropdown.$sep;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Replace page 1 URLs\n\t\t\t\t$navbit['url'] = str_replace(\"-page-1.html\", \".html\", $navbit['url']);\n\t\t\t\t$navbit['url'] = preg_replace(\"/&amp;page=1$/\", \"\", $navbit['url']);\n\n\t\t\t\teval(\"\\$nav .= \\\"\".$templates->get(\"nav_bit\").\"\\\";\");\n\t\t\t}\n\t\t}\n\t}\n\n\t$activesep = '';\n\t$navsize = count($navbits);\n\t$navbit = $navbits[$navsize-1];\n\n\tif($nav)\n\t{\n\t\teval(\"\\$activesep = \\\"\".$templates->get(\"nav_sep_active\").\"\\\";\");\n\t}\n\n\teval(\"\\$activebit = \\\"\".$templates->get(\"nav_bit_active\").\"\\\";\");\n\teval(\"\\$donenav = \\\"\".$templates->get(\"nav\").\"\\\";\");\n\n\treturn $donenav;\n}\n\n/**\n * Add a breadcrumb menu item to the list.\n *\n * @param string $name The name of the item to add\n * @param string $url The URL of the item to add\n */\nfunction add_breadcrumb($name, $url=\"\")\n{\n\tglobal $navbits;\n\n\t$navsize = count($navbits);\n\t$navbits[$navsize]['name'] = $name;\n\t$navbits[$navsize]['url'] = $url;\n}\n\n/**\n * Build the forum breadcrumb nagiation (the navigation to a specific forum including all parent forums)\n *\n * @param int $fid The forum ID to build the navigation for\n * @param array $multipage The multipage drop down array of information\n * @return int Returns 1 in every case. Kept for compatibility\n */\nfunction build_forum_breadcrumb($fid, $multipage=array())\n{\n\tglobal $pforumcache, $currentitem, $forum_cache, $navbits, $lang, $base_url, $archiveurl;\n\n\tif(!$pforumcache)\n\t{\n\t\tif(!is_array($forum_cache))\n\t\t{\n\t\t\tcache_forums();\n\t\t}\n\n\t\tforeach($forum_cache as $key => $val)\n\t\t{\n\t\t\t$pforumcache[$val['fid']][$val['pid']] = $val;\n\t\t}\n\t}\n\n\tif(is_array($pforumcache[$fid]))\n\t{\n\t\tforeach($pforumcache[$fid] as $key => $forumnav)\n\t\t{\n\t\t\tif($fid == $forumnav['fid'])\n\t\t\t{\n\t\t\t\tif(!empty($pforumcache[$forumnav['pid']]))\n\t\t\t\t{\n\t\t\t\t\tbuild_forum_breadcrumb($forumnav['pid']);\n\t\t\t\t}\n\n\t\t\t\t$navsize = count($navbits);\n\t\t\t\t// Convert & to &amp;\n\t\t\t\t$navbits[$navsize]['name'] = preg_replace(\"#&(?!\\#[0-9]+;)#si\", \"&amp;\", $forumnav['name']);\n\n\t\t\t\tif(defined(\"IN_ARCHIVE\"))\n\t\t\t\t{\n\t\t\t\t\t// Set up link to forum in breadcrumb.\n\t\t\t\t\tif($pforumcache[$fid][$forumnav['pid']]['type'] == 'f' || $pforumcache[$fid][$forumnav['pid']]['type'] == 'c')\n\t\t\t\t\t{\n\t\t\t\t\t\t$navbits[$navsize]['url'] = \"{$base_url}forum-\".$forumnav['fid'].\".html\";\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$navbits[$navsize]['url'] = $archiveurl.\"/index.php\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif(!empty($multipage))\n\t\t\t\t{\n\t\t\t\t\t$navbits[$navsize]['url'] = get_forum_link($forumnav['fid'], $multipage['current_page']);\n\n\t\t\t\t\t$navbits[$navsize]['multipage'] = $multipage;\n\t\t\t\t\t$navbits[$navsize]['multipage']['url'] = str_replace('{fid}', $forumnav['fid'], FORUM_URL_PAGED);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$navbits[$navsize]['url'] = get_forum_link($forumnav['fid']);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 1;\n}\n\n/**\n * Resets the breadcrumb navigation to the first item, and clears the rest\n */\nfunction reset_breadcrumb()\n{\n\tglobal $navbits;\n\n\t$newnav[0]['name'] = $navbits[0]['name'];\n\t$newnav[0]['url'] = $navbits[0]['url'];\n\tif(!empty($navbits[0]['options']))\n\t{\n\t\t$newnav[0]['options'] = $navbits[0]['options'];\n\t}\n\n\tunset($GLOBALS['navbits']);\n\t$GLOBALS['navbits'] = $newnav;\n}\n\n/**\n * Builds a URL to an archive mode page\n *\n * @param string $type The type of page (thread|announcement|forum)\n * @param int $id The ID of the item\n * @return string The URL\n */\nfunction build_archive_link($type=\"\", $id=0)\n{\n\tglobal $mybb;\n\n\t// If the server OS is not Windows and not Apache or the PHP is running as a CGI or we have defined ARCHIVE_QUERY_STRINGS, use query strings - DIRECTORY_SEPARATOR checks if running windows\n\t//if((DIRECTORY_SEPARATOR == '\\\\' && is_numeric(stripos($_SERVER['SERVER_SOFTWARE'], \"apache\")) == false) || is_numeric(stripos(SAPI_NAME, \"cgi\")) !== false || defined(\"ARCHIVE_QUERY_STRINGS\"))\n\tif($mybb->settings['seourls_archive'] == 1)\n\t{\n\t\t$base_url = $mybb->settings['bburl'].\"/archive/index.php/\";\n\t}\n\telse\n\t{\n\t\t$base_url = $mybb->settings['bburl'].\"/archive/index.php?\";\n\t}\n\n\tswitch($type)\n\t{\n\t\tcase \"thread\":\n\t\t\t$url = \"{$base_url}thread-{$id}.html\";\n\t\t\tbreak;\n\t\tcase \"announcement\":\n\t\t\t$url = \"{$base_url}announcement-{$id}.html\";\n\t\t\tbreak;\n\t\tcase \"forum\":\n\t\t\t$url = \"{$base_url}forum-{$id}.html\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$url = $mybb->settings['bburl'].\"/archive/index.php\";\n\t}\n\n\treturn $url;\n}\n\n/**\n * Prints a debug information page\n */\nfunction debug_page()\n{\n\tglobal $db, $debug, $templates, $templatelist, $mybb, $maintimer, $globaltime, $ptimer, $parsetime, $lang, $cache;\n\n\t$totaltime = format_time_duration($maintimer->totaltime);\n\t$phptime = $maintimer->totaltime - $db->query_time;\n\t$query_time = $db->query_time;\n\t$globaltime = format_time_duration($globaltime);\n\n\t$percentphp = number_format((($phptime/$maintimer->totaltime)*100), 2);\n\t$percentsql = number_format((($query_time/$maintimer->totaltime)*100), 2);\n\n\t$phptime = format_time_duration($maintimer->totaltime - $db->query_time);\n\t$query_time = format_time_duration($db->query_time);\n\n\t$call_time = format_time_duration($cache->call_time);\n\n\t$phpversion = PHP_VERSION;\n\n\t$serverload = get_server_load();\n\n\tif($mybb->settings['gzipoutput'] != 0)\n\t{\n\t\t$gzipen = \"Enabled\";\n\t}\n\telse\n\t{\n\t\t$gzipen = \"Disabled\";\n\t}\n\n\techo \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\";\n\techo \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\";\n\techo \"<head>\";\n\techo \"<meta name=\\\"robots\\\" content=\\\"noindex\\\" />\";\n\techo \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html; charset=UTF-8\\\" />\";\n\techo \"<title>MyBB Debug Information</title>\";\n\techo \"</head>\";\n\techo \"<body>\";\n\techo \"<h1>MyBB Debug Information</h1>\\n\";\n\techo \"<h2>Page Generation</h2>\\n\";\n\techo \"<table bgcolor=\\\"#666666\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#cccccc\\\" colspan=\\\"4\\\"><b><span style=\\\"size:2;\\\">Page Generation Statistics</span></b></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Page Generation Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$totaltime</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">No. DB Queries:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$db->query_count</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">PHP Processing Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$phptime ($percentphp%)</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">DB Processing Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$query_time ($percentsql%)</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Extensions Used:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">{$mybb->config['database']['type']}, xml</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Global.php Processing Time:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$globaltime</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">PHP Version:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$phpversion</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Server Load:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$serverload</span></td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">GZip Encoding Status:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">$gzipen</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#efefef\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">No. Templates Used:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#fefefe\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">\".count($templates->cache).\" (\".(int)count(explode(\",\", $templatelist)).\" Cached / \".(int)count($templates->uncached_templates).\" Manually Loaded)</span></td>\\n\";\n\techo \"</tr>\\n\";\n\n\t$memory_usage = get_memory_usage();\n\tif(!$memory_usage)\n\t{\n\t\t$memory_usage = $lang->unknown;\n\t}\n\telse\n\t{\n\t\t$memory_usage = get_friendly_size($memory_usage).\" ({$memory_usage} bytes)\";\n\t}\n\t$memory_limit = @ini_get(\"memory_limit\");\n\techo \"<tr>\\n\";\n\techo \"<td bgcolor=\\\"#EFEFEF\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Memory Usage:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#FEFEFE\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">{$memory_usage}</span></td>\\n\";\n\techo \"<td bgcolor=\\\"#EFEFEF\\\" width=\\\"25%\\\"><b><span style=\\\"font-family: tahoma; font-size: 12px;\\\">Memory Limit:</span></b></td>\\n\";\n\techo \"<td bgcolor=\\\"#FEFEFE\\\" width=\\\"25%\\\"><span style=\\\"font-family: tahoma; font-size: 12px;\\\">{$memory_limit}</span></td>\\n\";\n\techo \"</tr>\\n\";\n\n\techo \"</table>\\n\";\n\n\techo \"<h2>Database Connections (\".count($db->connections).\" Total) </h2>\\n\";\n\techo \"<table style=\\\"background-color: #666;\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\techo \"<tr>\\n\";\n\techo \"<td style=\\\"background: #fff;\\\">\".implode(\"<br />\", $db->connections).\"</td>\\n\";\n\techo \"</tr>\\n\";\n\techo \"</table>\\n\";\n\techo \"<br />\\n\";\n\n\techo \"<h2>Database Queries (\".$db->query_count.\" Total) </h2>\\n\";\n\techo $db->explain;\n\n\tif($cache->call_count > 0)\n\t{\n\t\techo \"<h2>Cache Calls (\".$cache->call_count.\" Total, \".$call_time.\") </h2>\\n\";\n\t\techo $cache->cache_debug;\n\t}\n\n\techo \"<h2>Template Statistics</h2>\\n\";\n\n\tif(count($templates->cache) > 0)\n\t{\n\t\techo \"<table style=\\\"background-color: #666;\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background-color: #ccc;\\\"><strong>Templates Used (Loaded for this Page) - \".count($templates->cache).\" Total</strong></td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background: #fff;\\\">\".implode(\", \", array_keys($templates->cache)).\"</td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"</table>\\n\";\n\t\techo \"<br />\\n\";\n\t}\n\n\tif(count($templates->uncached_templates) > 0)\n\t{\n\t\techo \"<table style=\\\"background-color: #666;\\\" width=\\\"95%\\\" cellpadding=\\\"4\\\" cellspacing=\\\"1\\\" align=\\\"center\\\">\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background-color: #ccc;\\\"><strong>Templates Requiring Additional Calls (Not Cached at Startup) - \".count($templates->uncached_templates).\" Total</strong></td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"<tr>\\n\";\n\t\techo \"<td style=\\\"background: #fff;\\\">\".implode(\", \", $templates->uncached_templates).\"</td>\\n\";\n\t\techo \"</tr>\\n\";\n\t\techo \"</table>\\n\";\n\t\techo \"<br />\\n\";\n\t}\n\techo \"</body>\";\n\techo \"</html>\";\n\texit;\n}\n\n/**\n * Outputs the correct page headers.\n */\nfunction send_page_headers()\n{\n\tglobal $mybb;\n\n\tif($mybb->settings['nocacheheaders'] == 1)\n\t{\n\t\theader(\"Expires: Sat, 1 Jan 2000 01:00:00 GMT\");\n\t\theader(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n\t\theader(\"Cache-Control: no-cache, must-revalidate\");\n\t\theader(\"Pragma: no-cache\");\n\t}\n}\n\n/**\n * Mark specific reported posts of a certain type as dealt with\n *\n * @param array|int $id An array or int of the ID numbers you're marking as dealt with\n * @param string $type The type of item the above IDs are for - post, posts, thread, threads, forum, all\n */\nfunction mark_reports($id, $type=\"post\")\n{\n\tglobal $db, $cache, $plugins;\n\n\tswitch($type)\n\t{\n\t\tcase \"posts\":\n\t\t\tif(is_array($id))\n\t\t\t{\n\t\t\t\t$rids = implode($id, \"','\");\n\t\t\t\t$rids = \"'0','$rids'\";\n\t\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id IN($rids) AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"post\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id='$id' AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t\tcase \"threads\":\n\t\t\tif(is_array($id))\n\t\t\t{\n\t\t\t\t$rids = implode($id, \"','\");\n\t\t\t\t$rids = \"'0','$rids'\";\n\t\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id2 IN($rids) AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"thread\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id2='$id' AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t\tcase \"forum\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"id3='$id' AND reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t\tcase \"all\":\n\t\t\t$db->update_query(\"reportedcontent\", array('reportstatus' => 1), \"reportstatus='0' AND (type = 'post' OR type = '')\");\n\t\t\tbreak;\n\t}\n\n\t$arguments = array('id' => $id, 'type' => $type);\n\t$plugins->run_hooks(\"mark_reports\", $arguments);\n\t$cache->update_reportedcontent();\n}\n\n/**\n * Fetch a friendly x days, y months etc date stamp from a timestamp\n *\n * @param int $stamp The timestamp\n * @param array $options Array of options\n * @return string The friendly formatted timestamp\n */\nfunction nice_time($stamp, $options=array())\n{\n\tglobal $lang;\n\n\t$ysecs = 365*24*60*60;\n\t$mosecs = 31*24*60*60;\n\t$wsecs = 7*24*60*60;\n\t$dsecs = 24*60*60;\n\t$hsecs = 60*60;\n\t$msecs = 60;\n\n\tif(isset($options['short']))\n\t{\n\t\t$lang_year = $lang->year_short;\n\t\t$lang_years = $lang->years_short;\n\t\t$lang_month = $lang->month_short;\n\t\t$lang_months = $lang->months_short;\n\t\t$lang_week = $lang->week_short;\n\t\t$lang_weeks = $lang->weeks_short;\n\t\t$lang_day = $lang->day_short;\n\t\t$lang_days = $lang->days_short;\n\t\t$lang_hour = $lang->hour_short;\n\t\t$lang_hours = $lang->hours_short;\n\t\t$lang_minute = $lang->minute_short;\n\t\t$lang_minutes = $lang->minutes_short;\n\t\t$lang_second = $lang->second_short;\n\t\t$lang_seconds = $lang->seconds_short;\n\t}\n\telse\n\t{\n\t\t$lang_year = \" \".$lang->year;\n\t\t$lang_years = \" \".$lang->years;\n\t\t$lang_month = \" \".$lang->month;\n\t\t$lang_months = \" \".$lang->months;\n\t\t$lang_week = \" \".$lang->week;\n\t\t$lang_weeks = \" \".$lang->weeks;\n\t\t$lang_day = \" \".$lang->day;\n\t\t$lang_days = \" \".$lang->days;\n\t\t$lang_hour = \" \".$lang->hour;\n\t\t$lang_hours = \" \".$lang->hours;\n\t\t$lang_minute = \" \".$lang->minute;\n\t\t$lang_minutes = \" \".$lang->minutes;\n\t\t$lang_second = \" \".$lang->second;\n\t\t$lang_seconds = \" \".$lang->seconds;\n\t}\n\n\t$years = floor($stamp/$ysecs);\n\t$stamp %= $ysecs;\n\t$months = floor($stamp/$mosecs);\n\t$stamp %= $mosecs;\n\t$weeks = floor($stamp/$wsecs);\n\t$stamp %= $wsecs;\n\t$days = floor($stamp/$dsecs);\n\t$stamp %= $dsecs;\n\t$hours = floor($stamp/$hsecs);\n\t$stamp %= $hsecs;\n\t$minutes = floor($stamp/$msecs);\n\t$stamp %= $msecs;\n\t$seconds = $stamp;\n\n\tif($years == 1)\n\t{\n\t\t$nicetime['years'] = \"1\".$lang_year;\n\t}\n\telse if($years > 1)\n\t{\n\t\t$nicetime['years'] = $years.$lang_years;\n\t}\n\n\tif($months == 1)\n\t{\n\t\t$nicetime['months'] = \"1\".$lang_month;\n\t}\n\telse if($months > 1)\n\t{\n\t\t$nicetime['months'] = $months.$lang_months;\n\t}\n\n\tif($weeks == 1)\n\t{\n\t\t$nicetime['weeks'] = \"1\".$lang_week;\n\t}\n\telse if($weeks > 1)\n\t{\n\t\t$nicetime['weeks'] = $weeks.$lang_weeks;\n\t}\n\n\tif($days == 1)\n\t{\n\t\t$nicetime['days'] = \"1\".$lang_day;\n\t}\n\telse if($days > 1)\n\t{\n\t\t$nicetime['days'] = $days.$lang_days;\n\t}\n\n\tif(!isset($options['hours']) || $options['hours'] !== false)\n\t{\n\t\tif($hours == 1)\n\t\t{\n\t\t\t$nicetime['hours'] = \"1\".$lang_hour;\n\t\t}\n\t\telse if($hours > 1)\n\t\t{\n\t\t\t$nicetime['hours'] = $hours.$lang_hours;\n\t\t}\n\t}\n\n\tif(!isset($options['minutes']) || $options['minutes'] !== false)\n\t{\n\t\tif($minutes == 1)\n\t\t{\n\t\t\t$nicetime['minutes'] = \"1\".$lang_minute;\n\t\t}\n\t\telse if($minutes > 1)\n\t\t{\n\t\t\t$nicetime['minutes'] = $minutes.$lang_minutes;\n\t\t}\n\t}\n\n\tif(!isset($options['seconds']) || $options['seconds'] !== false)\n\t{\n\t\tif($seconds == 1)\n\t\t{\n\t\t\t$nicetime['seconds'] = \"1\".$lang_second;\n\t\t}\n\t\telse if($seconds > 1)\n\t\t{\n\t\t\t$nicetime['seconds'] = $seconds.$lang_seconds;\n\t\t}\n\t}\n\n\tif(is_array($nicetime))\n\t{\n\t\treturn implode(\", \", $nicetime);\n\t}\n}\n\n/**\n * Select an alternating row colour based on the previous call to this function\n *\n * @param int $reset 1 to reset the row to trow1.\n * @return string trow1 or trow2 depending on the previous call\n */\nfunction alt_trow($reset=0)\n{\n\tglobal $alttrow;\n\n\tif($alttrow == \"trow1\" && !$reset)\n\t{\n\t\t$trow = \"trow2\";\n\t}\n\telse\n\t{\n\t\t$trow = \"trow1\";\n\t}\n\n\t$alttrow = $trow;\n\n\treturn $trow;\n}\n\n/**\n * Add a user to a specific additional user group.\n *\n * @param int $uid The user ID\n * @param int $joingroup The user group ID to join\n * @return bool\n */\nfunction join_usergroup($uid, $joingroup)\n{\n\tglobal $db, $mybb;\n\n\tif($uid == $mybb->user['uid'])\n\t{\n\t\t$user = $mybb->user;\n\t}\n\telse\n\t{\n\t\t$query = $db->simple_select(\"users\", \"additionalgroups, usergroup\", \"uid='\".(int)$uid.\"'\");\n\t\t$user = $db->fetch_array($query);\n\t}\n\n\t// Build the new list of additional groups for this user and make sure they're in the right format\n\t$usergroups = \"\";\n\t$usergroups = $user['additionalgroups'].\",\".$joingroup;\n\t$groupslist = \"\";\n\t$groups = explode(\",\", $usergroups);\n\n\tif(is_array($groups))\n\t{\n\t\t$comma = '';\n\t\tforeach($groups as $gid)\n\t\t{\n\t\t\tif(trim($gid) != \"\" && $gid != $user['usergroup'] && !isset($donegroup[$gid]))\n\t\t\t{\n\t\t\t\t$groupslist .= $comma.$gid;\n\t\t\t\t$comma = \",\";\n\t\t\t\t$donegroup[$gid] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// What's the point in updating if they're the same?\n\tif($groupslist != $user['additionalgroups'])\n\t{\n\t\t$db->update_query(\"users\", array('additionalgroups' => $groupslist), \"uid='\".(int)$uid.\"'\");\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Remove a user from a specific additional user group\n *\n * @param int $uid The user ID\n * @param int $leavegroup The user group ID\n */\nfunction leave_usergroup($uid, $leavegroup)\n{\n\tglobal $db, $mybb, $cache;\n\n\t$user = get_user($uid);\n\n\t$groupslist = $comma = '';\n\t$usergroups = $user['additionalgroups'].\",\";\n\t$donegroup = array();\n\n\t$groups = explode(\",\", $user['additionalgroups']);\n\n\tif(is_array($groups))\n\t{\n\t\tforeach($groups as $gid)\n\t\t{\n\t\t\tif(trim($gid) != \"\" && $leavegroup != $gid && empty($donegroup[$gid]))\n\t\t\t{\n\t\t\t\t$groupslist .= $comma.$gid;\n\t\t\t\t$comma = \",\";\n\t\t\t\t$donegroup[$gid] = 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t$dispupdate = \"\";\n\tif($leavegroup == $user['displaygroup'])\n\t{\n\t\t$dispupdate = \", displaygroup=usergroup\";\n\t}\n\n\t$db->write_query(\"\n\t\tUPDATE \".TABLE_PREFIX.\"users\n\t\tSET additionalgroups='$groupslist' $dispupdate\n\t\tWHERE uid='\".(int)$uid.\"'\n\t\");\n\n\t$cache->update_moderators();\n}\n\n/**\n * Get the current location taking in to account different web serves and systems\n *\n * @param boolean $fields True to return as \"hidden\" fields\n * @param array $ignore Array of fields to ignore if first argument is true\n * @param boolean $quick True to skip all inputs and return only the file path part of the URL\n * @return string The current URL being accessed\n */\nfunction get_current_location($fields=false, $ignore=array(), $quick=false)\n{\n\tif(defined(\"MYBB_LOCATION\"))\n\t{\n\t\treturn MYBB_LOCATION;\n\t}\n\n\tif(!empty($_SERVER['SCRIPT_NAME']))\n\t{\n\t\t$location = htmlspecialchars_uni($_SERVER['SCRIPT_NAME']);\n\t}\n\telseif(!empty($_SERVER['PHP_SELF']))\n\t{\n\t\t$location = htmlspecialchars_uni($_SERVER['PHP_SELF']);\n\t}\n\telseif(!empty($_ENV['PHP_SELF']))\n\t{\n\t\t$location = htmlspecialchars_uni($_ENV['PHP_SELF']);\n\t}\n\telseif(!empty($_SERVER['PATH_INFO']))\n\t{\n\t\t$location = htmlspecialchars_uni($_SERVER['PATH_INFO']);\n\t}\n\telse\n\t{\n\t\t$location = htmlspecialchars_uni($_ENV['PATH_INFO']);\n\t}\n\n\tif($quick)\n\t{\n\t\treturn $location;\n\t}\n\n\tif($fields == true)\n\t{\n\t\tglobal $mybb;\n\n\t\tif(!is_array($ignore))\n\t\t{\n\t\t\t$ignore = array($ignore);\n\t\t}\n\n\t\t$form_html = '';\n\t\tif(!empty($mybb->input))\n\t\t{\n\t\t\tforeach($mybb->input as $name => $value)\n\t\t\t{\n\t\t\t\tif(in_array($name, $ignore) || is_array($name) || is_array($value))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$form_html .= \"<input type=\\\"hidden\\\" name=\\\"\".htmlspecialchars_uni($name).\"\\\" value=\\\"\".htmlspecialchars_uni($value).\"\\\" />\\n\";\n\t\t\t}\n\t\t}\n\n\t\treturn array('location' => $location, 'form_html' => $form_html, 'form_method' => $mybb->request_method);\n\t}\n\telse\n\t{\n\t\tif(isset($_SERVER['QUERY_STRING']))\n\t\t{\n\t\t\t$location .= \"?\".htmlspecialchars_uni($_SERVER['QUERY_STRING']);\n\t\t}\n\t\telse if(isset($_ENV['QUERY_STRING']))\n\t\t{\n\t\t\t$location .= \"?\".htmlspecialchars_uni($_ENV['QUERY_STRING']);\n\t\t}\n\n\t\tif((isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] == \"POST\") || (isset($_ENV['REQUEST_METHOD']) && $_ENV['REQUEST_METHOD'] == \"POST\"))\n\t\t{\n\t\t\t$post_array = array('action', 'fid', 'pid', 'tid', 'uid', 'eid');\n\n\t\t\tforeach($post_array as $var)\n\t\t\t{\n\t\t\t\tif(isset($_POST[$var]))\n\t\t\t\t{\n\t\t\t\t\t$addloc[] = urlencode($var).'='.urlencode($_POST[$var]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(isset($addloc) && is_array($addloc))\n\t\t\t{\n\t\t\t\tif(strpos($location, \"?\") === false)\n\t\t\t\t{\n\t\t\t\t\t$location .= \"?\";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$location .= \"&amp;\";\n\t\t\t\t}\n\t\t\t\t$location .= implode(\"&amp;\", $addloc);\n\t\t\t}\n\t\t}\n\n\t\treturn $location;\n\t}\n}\n\n/**\n * Build a theme selection menu\n *\n * @param string $name The name of the menu\n * @param int $selected The ID of the selected theme\n * @param int $tid The ID of the parent theme to select from\n * @param string $depth The current selection depth\n * @param boolean $usergroup_override Whether or not to override usergroup permissions (true to override)\n * @param boolean $footer Whether or not theme select is in the footer (true if it is)\n * @param boolean $count_override Whether or not to override output based on theme count (true to override)\n * @return string The theme selection list\n */\nfunction build_theme_select($name, $selected=-1, $tid=0, $depth=\"\", $usergroup_override=false, $footer=false, $count_override=false)\n{\n\tglobal $db, $themeselect, $tcache, $lang, $mybb, $limit, $templates, $num_themes, $themeselect_option;\n\n\tif($tid == 0)\n\t{\n\t\t$tid = 1;\n\t\t$num_themes = 0;\n\t\t$themeselect_option = '';\n\n\t\tif(!isset($lang->use_default))\n\t\t{\n\t\t\t$lang->use_default = $lang->lang_select_default;\n\t\t}\n\t}\n\n\tif(!is_array($tcache))\n\t{\n\t\t$query = $db->simple_select('themes', 'tid, name, pid, allowedgroups', \"pid!='0'\");\n\n\t\twhile($theme = $db->fetch_array($query))\n\t\t{\n\t\t\t$tcache[$theme['pid']][$theme['tid']] = $theme;\n\t\t}\n\t}\n\n\tif(is_array($tcache[$tid]))\n\t{\n\t\tforeach($tcache[$tid] as $theme)\n\t\t{\n\t\t\t$sel = \"\";\n\t\t\t// Show theme if allowed, or if override is on\n\t\t\tif(is_member($theme['allowedgroups']) || $theme['allowedgroups'] == \"all\" || $usergroup_override == true)\n\t\t\t{\n\t\t\t\tif($theme['tid'] == $selected)\n\t\t\t\t{\n\t\t\t\t\t$sel = \" selected=\\\"selected\\\"\";\n\t\t\t\t}\n\n\t\t\t\tif($theme['pid'] != 0)\n\t\t\t\t{\n\t\t\t\t\t$theme['name'] = htmlspecialchars_uni($theme['name']);\n\t\t\t\t\teval(\"\\$themeselect_option .= \\\"\".$templates->get(\"usercp_themeselector_option\").\"\\\";\");\n\t\t\t\t\t++$num_themes;\n\t\t\t\t\t$depthit = $depth.\"--\";\n\t\t\t\t}\n\n\t\t\t\tif(array_key_exists($theme['tid'], $tcache))\n\t\t\t\t{\n\t\t\t\t\tbuild_theme_select($name, $selected, $theme['tid'], $depthit, $usergroup_override, $footer, $count_override);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif($tid == 1 && ($num_themes > 1 || $count_override == true))\n\t{\n\t\tif($footer == true)\n\t\t{\n\t\t\teval(\"\\$themeselect = \\\"\".$templates->get(\"footer_themeselector\").\"\\\";\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\teval(\"\\$themeselect = \\\"\".$templates->get(\"usercp_themeselector\").\"\\\";\");\n\t\t}\n\n\t\treturn $themeselect;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Get the theme data of a theme id.\n *\n * @param int $tid The theme id of the theme.\n * @return boolean|array False if no valid theme, Array with the theme data otherwise\n */\nfunction get_theme($tid)\n{\n\tglobal $tcache, $db;\n\n\tif(!is_array($tcache))\n\t{\n\t\t$query = $db->simple_select('themes', 'tid, name, pid, allowedgroups', \"pid!='0'\");\n\n\t\twhile($theme = $db->fetch_array($query))\n\t\t{\n\t\t\t$tcache[$theme['pid']][$theme['tid']] = $theme;\n\t\t}\n\t}\n\n\t$s_theme = false;\n\n\tforeach($tcache as $themes)\n\t{\n\t\tforeach($themes as $theme)\n\t\t{\n\t\t\tif($tid == $theme['tid'])\n\t\t\t{\n\t\t\t\t$s_theme = $theme;\n\t\t\t\tbreak 2;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $s_theme;\n}\n\n/**\n * Custom function for htmlspecialchars which takes in to account unicode\n *\n * @param string $message The string to format\n * @return string The string with htmlspecialchars applied\n */\nfunction htmlspecialchars_uni($message)\n{\n\t$message = preg_replace(\"#&(?!\\#[0-9]+;)#si\", \"&amp;\", $message); // Fix & but allow unicode\n\t$message = str_replace(\"<\", \"&lt;\", $message);\n\t$message = str_replace(\">\", \"&gt;\", $message);\n\t$message = str_replace(\"\\\"\", \"&quot;\", $message);\n\treturn $message;\n}\n\n/**\n * Custom function for formatting numbers.\n *\n * @param int $number The number to format.\n * @return int The formatted number.\n */\nfunction my_number_format($number)\n{\n\tglobal $mybb;\n\n\tif($number == \"-\")\n\t{\n\t\treturn $number;\n\t}\n\n\tif(is_int($number))\n\t{\n\t\treturn number_format($number, 0, $mybb->settings['decpoint'], $mybb->settings['thousandssep']);\n\t}\n\telse\n\t{\n\t\t$parts = explode('.', $number);\n\n\t\tif(isset($parts[1]))\n\t\t{\n\t\t\t$decimals = my_strlen($parts[1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$decimals = 0;\n\t\t}\n\n\t\treturn number_format((double)$number, $decimals, $mybb->settings['decpoint'], $mybb->settings['thousandssep']);\n\t}\n}\n\n/**\n * Converts a string of text to or from UTF-8.\n *\n * @param string $str The string of text to convert\n * @param boolean $to Whether or not the string is being converted to or from UTF-8 (true if converting to)\n * @return string The converted string\n */\nfunction convert_through_utf8($str, $to=true)\n{\n\tglobal $lang;\n\tstatic $charset;\n\tstatic $use_mb;\n\tstatic $use_iconv;\n\n\tif(!isset($charset))\n\t{\n\t\t$charset = my_strtolower($lang->settings['charset']);\n\t}\n\n\tif($charset == \"utf-8\")\n\t{\n\t\treturn $str;\n\t}\n\n\tif(!isset($use_iconv))\n\t{\n\t\t$use_iconv = function_exists(\"iconv\");\n\t}\n\n\tif(!isset($use_mb))\n\t{\n\t\t$use_mb = function_exists(\"mb_convert_encoding\");\n\t}\n\n\tif($use_iconv || $use_mb)\n\t{\n\t\tif($to)\n\t\t{\n\t\t\t$from_charset = $lang->settings['charset'];\n\t\t\t$to_charset = \"UTF-8\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$from_charset = \"UTF-8\";\n\t\t\t$to_charset = $lang->settings['charset'];\n\t\t}\n\t\tif($use_iconv)\n\t\t{\n\t\t\treturn iconv($from_charset, $to_charset.\"//IGNORE\", $str);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn @mb_convert_encoding($str, $to_charset, $from_charset);\n\t\t}\n\t}\n\telseif($charset == \"iso-8859-1\" && function_exists(\"utf8_encode\"))\n\t{\n\t\tif($to)\n\t\t{\n\t\t\treturn utf8_encode($str);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn utf8_decode($str);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $str;\n\t}\n}\n\n/**\n * DEPRECATED! Please use other alternatives.\n *\n * @deprecated\n * @param string $message\n *\n * @return string\n */\nfunction my_wordwrap($message)\n{\n\treturn $message;\n}\n\n/**\n * Workaround for date limitation in PHP to establish the day of a birthday (Provided by meme)\n *\n * @param int $month The month of the birthday\n * @param int $day The day of the birthday\n * @param int $year The year of the bithday\n * @return int The numeric day of the week for the birthday\n */\nfunction get_weekday($month, $day, $year)\n{\n\t$h = 4;\n\n\tfor($i = 1969; $i >= $year; $i--)\n\t{\n\t\t$j = get_bdays($i);\n\n\t\tfor($k = 11; $k >= 0; $k--)\n\t\t{\n\t\t\t$l = ($k + 1);\n\n\t\t\tfor($m = $j[$k]; $m >= 1; $m--)\n\t\t\t{\n\t\t\t\t$h--;\n\n\t\t\t\tif($i == $year && $l == $month && $m == $day)\n\t\t\t\t{\n\t\t\t\t\treturn $h;\n\t\t\t\t}\n\n\t\t\t\tif($h == 0)\n\t\t\t\t{\n\t\t\t\t\t$h = 7;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Workaround for date limitation in PHP to establish the day of a birthday (Provided by meme)\n *\n * @param int $in The year.\n * @return array The number of days in each month of that year\n */\nfunction get_bdays($in)\n{\n\treturn array(\n\t\t31,\n\t\t($in % 4 == 0 && ($in % 100 > 0 || $in % 400 == 0) ? 29 : 28),\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t31,\n\t\t30,\n\t\t31,\n\t\t30,\n\t\t31\n\t);\n}\n\n/**\n * DEPRECATED! Please use mktime()!\n * Formats a birthday appropriately\n *\n * @deprecated\n * @param string $display The PHP date format string\n * @param int $bm The month of the birthday\n * @param int $bd The day of the birthday\n * @param int $by The year of the birthday\n * @param int $wd The weekday of the birthday\n * @return string The formatted birthday\n */\nfunction format_bdays($display, $bm, $bd, $by, $wd)\n{\n\tglobal $lang;\n\n\t$bdays = array(\n\t\t$lang->sunday,\n\t\t$lang->monday,\n\t\t$lang->tuesday,\n\t\t$lang->wednesday,\n\t\t$lang->thursday,\n\t\t$lang->friday,\n\t\t$lang->saturday\n\t);\n\n\t$bmonth = array(\n\t\t$lang->month_1,\n\t\t$lang->month_2,\n\t\t$lang->month_3,\n\t\t$lang->month_4,\n\t\t$lang->month_5,\n\t\t$lang->month_6,\n\t\t$lang->month_7,\n\t\t$lang->month_8,\n\t\t$lang->month_9,\n\t\t$lang->month_10,\n\t\t$lang->month_11,\n\t\t$lang->month_12\n\t);\n\n\n\t// This needs to be in this specific order\n\t$find = array(\n\t\t'm',\n\t\t'n',\n\t\t'd',\n\t\t'D',\n\t\t'y',\n\t\t'Y',\n\t\t'j',\n\t\t'S',\n\t\t'F',\n\t\t'l',\n\t\t'M',\n\t);\n\n\t$html = array(\n\t\t'&#109;',\n\t\t'&#110;',\n\t\t'&#99;',\n\t\t'&#68;',\n\t\t'&#121;',\n\t\t'&#89;',\n\t\t'&#106;',\n\t\t'&#83;',\n\t\t'&#70;',\n\t\t'&#108;',\n\t\t'&#77;',\n\t);\n\n\t$bdays = str_replace($find, $html, $bdays);\n\t$bmonth = str_replace($find, $html, $bmonth);\n\n\t$replace = array(\n\t\tsprintf('%02s', $bm),\n\t\t$bm,\n\t\tsprintf('%02s', $bd),\n\t\t($wd == 2 ? my_substr($bdays[$wd], 0, 4) : ($wd == 4 ? my_substr($bdays[$wd], 0, 5) : my_substr($bdays[$wd], 0, 3))),\n\t\tmy_substr($by, 2),\n\t\t$by,\n\t\t($bd[0] == 0 ? my_substr($bd, 1) : $bd),\n\t\t($bd == 1 || $bd == 21 || $bd == 31 ? 'st' : ($bd == 2 || $bd == 22 ? 'nd' : ($bd == 3 || $bd == 23 ? 'rd' : 'th'))),\n\t\t$bmonth[$bm-1],\n\t\t$wd,\n\t\t($bm == 9 ? my_substr($bmonth[$bm-1], 0, 4) :  my_substr($bmonth[$bm-1], 0, 3)),\n\t);\n\n\t// Do we have the full month in our output?\n\t// If so there's no need for the short month\n\tif(strpos($display, 'F') !== false)\n\t{\n\t\tarray_pop($find);\n\t\tarray_pop($replace);\n\t}\n\n\treturn str_replace($find, $replace, $display);\n}\n\n/**\n * Returns the age of a user with specified birthday.\n *\n * @param string $birthday The birthday of a user.\n * @return int The age of a user with that birthday.\n */\nfunction get_age($birthday)\n{\n\t$bday = explode(\"-\", $birthday);\n\tif(!$bday[2])\n\t{\n\t\treturn;\n\t}\n\n\tlist($day, $month, $year) = explode(\"-\", my_date(\"j-n-Y\", TIME_NOW, 0, 0));\n\n\t$age = $year-$bday[2];\n\n\tif(($month == $bday[1] && $day < $bday[0]) || $month < $bday[1])\n\t{\n\t\t--$age;\n\t}\n\treturn $age;\n}\n\n/**\n * Updates the first posts in a thread.\n *\n * @param int $tid The thread id for which to update the first post id.\n */\nfunction update_first_post($tid)\n{\n\tglobal $db;\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.pid, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid'\n\t\tORDER BY p.dateline ASC\n\t\tLIMIT 1\n\t\");\n\t$firstpost = $db->fetch_array($query);\n\n\tif(empty($firstpost['username']))\n\t{\n\t\t$firstpost['username'] = $firstpost['postusername'];\n\t}\n\t$firstpost['username'] = $db->escape_string($firstpost['username']);\n\n\t$update_array = array(\n\t\t'firstpost' => (int)$firstpost['pid'],\n\t\t'username' => $firstpost['username'],\n\t\t'uid' => (int)$firstpost['uid'],\n\t\t'dateline' => (int)$firstpost['dateline']\n\t);\n\t$db->update_query(\"threads\", $update_array, \"tid='{$tid}'\");\n}\n\n/**\n * Updates the last posts in a thread.\n *\n * @param int $tid The thread id for which to update the last post id.\n */\nfunction update_last_post($tid)\n{\n\tglobal $db;\n\n\t$query = $db->query(\"\n\t\tSELECT u.uid, u.username, p.username AS postusername, p.dateline\n\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\tWHERE p.tid='$tid' AND p.visible='1'\n\t\tORDER BY p.dateline DESC\n\t\tLIMIT 1\"\n\t);\n\t$lastpost = $db->fetch_array($query);\n\n\tif(empty($lastpost['username']))\n\t{\n\t\t$lastpost['username'] = $lastpost['postusername'];\n\t}\n\n\tif(empty($lastpost['dateline']))\n\t{\n\t\t$query = $db->query(\"\n\t\t\tSELECT u.uid, u.username, p.pid, p.username AS postusername, p.dateline\n\t\t\tFROM \".TABLE_PREFIX.\"posts p\n\t\t\tLEFT JOIN \".TABLE_PREFIX.\"users u ON (u.uid=p.uid)\n\t\t\tWHERE p.tid='$tid'\n\t\t\tORDER BY p.dateline ASC\n\t\t\tLIMIT 1\n\t\t\");\n\t\t$firstpost = $db->fetch_array($query);\n\n\t\t$lastpost['username'] = $firstpost['username'];\n\t\t$lastpost['uid'] = $firstpost['uid'];\n\t\t$lastpost['dateline'] = $firstpost['dateline'];\n\t}\n\n\t$lastpost['username'] = $db->escape_string($lastpost['username']);\n\n\t$update_array = array(\n\t\t'lastpost' => (int)$lastpost['dateline'],\n\t\t'lastposter' => $lastpost['username'],\n\t\t'lastposteruid' => (int)$lastpost['uid']\n\t);\n\t$db->update_query(\"threads\", $update_array, \"tid='{$tid}'\");\n}\n\n/**\n * Checks for the length of a string, mb strings accounted for\n *\n * @param string $string The string to check the length of.\n * @return int The length of the string.\n */\nfunction my_strlen($string)\n{\n\tglobal $lang;\n\n\t$string = preg_replace(\"#&\\#([0-9]+);#\", \"-\", $string);\n\n\tif(strtolower($lang->settings['charset']) == \"utf-8\")\n\t{\n\t\t// Get rid of any excess RTL and LTR override for they are the workings of the devil\n\t\t$string = str_replace(dec_to_utf8(8238), \"\", $string);\n\t\t$string = str_replace(dec_to_utf8(8237), \"\", $string);\n\n\t\t// Remove dodgy whitespaces\n\t\t$string = str_replace(chr(0xCA), \"\", $string);\n\t}\n\t$string = trim($string);\n\n\tif(function_exists(\"mb_strlen\"))\n\t{\n\t\t$string_length = mb_strlen($string);\n\t}\n\telse\n\t{\n\t\t$string_length = strlen($string);\n\t}\n\n\treturn $string_length;\n}\n\n/**\n * Cuts a string at a specified point, mb strings accounted for\n *\n * @param string $string The string to cut.\n * @param int $start Where to cut\n * @param int $length (optional) How much to cut\n * @param bool $handle_entities (optional) Properly handle HTML entities?\n * @return string The cut part of the string.\n */\nfunction my_substr($string, $start, $length=null, $handle_entities = false)\n{\n\tif($handle_entities)\n\t{\n\t\t$string = unhtmlentities($string);\n\t}\n\tif(function_exists(\"mb_substr\"))\n\t{\n\t\tif($length != null)\n\t\t{\n\t\t\t$cut_string = mb_substr($string, $start, $length);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$cut_string = mb_substr($string, $start);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif($length != null)\n\t\t{\n\t\t\t$cut_string = substr($string, $start, $length);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$cut_string = substr($string, $start);\n\t\t}\n\t}\n\n\tif($handle_entities)\n\t{\n\t\t$cut_string = htmlspecialchars_uni($cut_string);\n\t}\n\treturn $cut_string;\n}\n\n/**\n * Lowers the case of a string, mb strings accounted for\n *\n * @param string $string The string to lower.\n * @return string The lowered string.\n */\nfunction my_strtolower($string)\n{\n\tif(function_exists(\"mb_strtolower\"))\n\t{\n\t\t$string = mb_strtolower($string);\n\t}\n\telse\n\t{\n\t\t$string = strtolower($string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Finds a needle in a haystack and returns it position, mb strings accounted for\n *\n * @param string $haystack String to look in (haystack)\n * @param string $needle What to look for (needle)\n * @param int $offset (optional) How much to offset\n * @return int|bool false on needle not found, integer position if found\n */\nfunction my_strpos($haystack, $needle, $offset=0)\n{\n\tif($needle == '')\n\t{\n\t\treturn false;\n\t}\n\n\tif(function_exists(\"mb_strpos\"))\n\t{\n\t\t$position = mb_strpos($haystack, $needle, $offset);\n\t}\n\telse\n\t{\n\t\t$position = strpos($haystack, $needle, $offset);\n\t}\n\n\treturn $position;\n}\n\n/**\n * Ups the case of a string, mb strings accounted for\n *\n * @param string $string The string to up.\n * @return string The uped string.\n */\nfunction my_strtoupper($string)\n{\n\tif(function_exists(\"mb_strtoupper\"))\n\t{\n\t\t$string = mb_strtoupper($string);\n\t}\n\telse\n\t{\n\t\t$string = strtoupper($string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Returns any html entities to their original character\n *\n * @param string $string The string to un-htmlentitize.\n * @return string The un-htmlentitied' string.\n */\nfunction unhtmlentities($string)\n{\n\t// Replace numeric entities\n\t$string = preg_replace_callback('~&#x([0-9a-f]+);~i', create_function('$matches', 'return unichr(hexdec($matches[1]));'), $string);\n\t$string = preg_replace_callback('~&#([0-9]+);~', create_function('$matches', 'return unichr($matches[1]);'), $string);\n\n\t// Replace literal entities\n\t$trans_tbl = get_html_translation_table(HTML_ENTITIES);\n\t$trans_tbl = array_flip($trans_tbl);\n\n\treturn strtr($string, $trans_tbl);\n}\n\n/**\n * Returns any ascii to it's character (utf-8 safe).\n *\n * @param int $c The ascii to characterize.\n * @return string|bool The characterized ascii. False on failure\n */\nfunction unichr($c)\n{\n\tif($c <= 0x7F)\n\t{\n\t\treturn chr($c);\n\t}\n\telse if($c <= 0x7FF)\n\t{\n\t\treturn chr(0xC0 | $c >> 6) . chr(0x80 | $c & 0x3F);\n\t}\n\telse if($c <= 0xFFFF)\n\t{\n\t\treturn chr(0xE0 | $c >> 12) . chr(0x80 | $c >> 6 & 0x3F)\n\t\t\t\t\t\t\t\t\t. chr(0x80 | $c & 0x3F);\n\t}\n\telse if($c <= 0x10FFFF)\n\t{\n\t\treturn chr(0xF0 | $c >> 18) . chr(0x80 | $c >> 12 & 0x3F)\n\t\t\t\t\t\t\t\t\t. chr(0x80 | $c >> 6 & 0x3F)\n\t\t\t\t\t\t\t\t\t. chr(0x80 | $c & 0x3F);\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Get the event poster.\n *\n * @param array $event The event data array.\n * @return string The link to the event poster.\n */\nfunction get_event_poster($event)\n{\n\t$event['username'] = htmlspecialchars_uni($event['username']);\n\t$event['username'] = format_name($event['username'], $event['usergroup'], $event['displaygroup']);\n\t$event_poster = build_profile_link($event['username'], $event['author']);\n\treturn $event_poster;\n}\n\n/**\n * Get the event date.\n *\n * @param array $event The event data array.\n * @return string The event date.\n */\nfunction get_event_date($event)\n{\n\tglobal $mybb;\n\n\t$event_date = explode(\"-\", $event['date']);\n\t$event_date = gmmktime(0, 0, 0, $event_date[1], $event_date[0], $event_date[2]);\n\t$event_date = my_date($mybb->settings['dateformat'], $event_date);\n\n\treturn $event_date;\n}\n\n/**\n * Get the profile link.\n *\n * @param int $uid The user id of the profile.\n * @return string The url to the profile.\n */\nfunction get_profile_link($uid=0)\n{\n\t$link = str_replace(\"{uid}\", $uid, PROFILE_URL);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Get the announcement link.\n *\n * @param int $aid The announement id of the announcement.\n * @return string The url to the announcement.\n */\nfunction get_announcement_link($aid=0)\n{\n\t$link = str_replace(\"{aid}\", $aid, ANNOUNCEMENT_URL);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Build the profile link.\n *\n * @param string $username The Username of the profile.\n * @param int $uid The user id of the profile.\n * @param string $target The target frame\n * @param string $onclick Any onclick javascript.\n * @return string The complete profile link.\n */\nfunction build_profile_link($username=\"\", $uid=0, $target=\"\", $onclick=\"\")\n{\n\tglobal $mybb, $lang;\n\n\tif(!$username && $uid == 0)\n\t{\n\t\t// Return Guest phrase for no UID, no guest nickname\n\t\treturn $lang->guest;\n\t}\n\telseif($uid == 0)\n\t{\n\t\t// Return the guest's nickname if user is a guest but has a nickname\n\t\treturn $username;\n\t}\n\telse\n\t{\n\t\t// Build the profile link for the registered user\n\t\tif(!empty($target))\n\t\t{\n\t\t\t$target = \" target=\\\"{$target}\\\"\";\n\t\t}\n\n\t\tif(!empty($onclick))\n\t\t{\n\t\t\t$onclick = \" onclick=\\\"{$onclick}\\\"\";\n\t\t}\n\n\t\treturn \"<a href=\\\"{$mybb->settings['bburl']}/\".get_profile_link($uid).\"\\\"{$target}{$onclick}>{$username}</a>\";\n\t}\n}\n\n/**\n * Build the forum link.\n *\n * @param int $fid The forum id of the forum.\n * @param int $page (Optional) The page number of the forum.\n * @return string The url to the forum.\n */\nfunction get_forum_link($fid, $page=0)\n{\n\tif($page > 0)\n\t{\n\t\t$link = str_replace(\"{fid}\", $fid, FORUM_URL_PAGED);\n\t\t$link = str_replace(\"{page}\", $page, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse\n\t{\n\t\t$link = str_replace(\"{fid}\", $fid, FORUM_URL);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the thread link.\n *\n * @param int $tid The thread id of the thread.\n * @param int $page (Optional) The page number of the thread.\n * @param string $action (Optional) The action we're performing (ex, lastpost, newpost, etc)\n * @return string The url to the thread.\n */\nfunction get_thread_link($tid, $page=0, $action='')\n{\n\tif($page > 1)\n\t{\n\t\tif($action)\n\t\t{\n\t\t\t$link = THREAD_URL_ACTION;\n\t\t\t$link = str_replace(\"{action}\", $action, $link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link = THREAD_URL_PAGED;\n\t\t}\n\t\t$link = str_replace(\"{tid}\", $tid, $link);\n\t\t$link = str_replace(\"{page}\", $page, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse\n\t{\n\t\tif($action)\n\t\t{\n\t\t\t$link = THREAD_URL_ACTION;\n\t\t\t$link = str_replace(\"{action}\", $action, $link);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$link = THREAD_URL;\n\t\t}\n\t\t$link = str_replace(\"{tid}\", $tid, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the post link.\n *\n * @param int $pid The post ID of the post\n * @param int $tid The thread id of the post.\n * @return string The url to the post.\n */\nfunction get_post_link($pid, $tid=0)\n{\n\tif($tid > 0)\n\t{\n\t\t$link = str_replace(\"{tid}\", $tid, THREAD_URL_POST);\n\t\t$link = str_replace(\"{pid}\", $pid, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse\n\t{\n\t\t$link = str_replace(\"{pid}\", $pid, POST_URL);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the event link.\n *\n * @param int $eid The event ID of the event\n * @return string The URL of the event\n */\nfunction get_event_link($eid)\n{\n\t$link = str_replace(\"{eid}\", $eid, EVENT_URL);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Build the link to a specified date on the calendar\n *\n * @param int $calendar The ID of the calendar\n * @param int $year The year\n * @param int $month The month\n * @param int $day The day (optional)\n * @return string The URL of the calendar\n */\nfunction get_calendar_link($calendar, $year=0, $month=0, $day=0)\n{\n\tif($day > 0)\n\t{\n\t\t$link = str_replace(\"{month}\", $month, CALENDAR_URL_DAY);\n\t\t$link = str_replace(\"{year}\", $year, $link);\n\t\t$link = str_replace(\"{day}\", $day, $link);\n\t\t$link = str_replace(\"{calendar}\", $calendar, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\telse if($month > 0)\n\t{\n\t\t$link = str_replace(\"{month}\", $month, CALENDAR_URL_MONTH);\n\t\t$link = str_replace(\"{year}\", $year, $link);\n\t\t$link = str_replace(\"{calendar}\", $calendar, $link);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n\t/* Not implemented\n\telse if($year > 0)\n\t{\n\t}*/\n\telse\n\t{\n\t\t$link = str_replace(\"{calendar}\", $calendar, CALENDAR_URL);\n\t\treturn htmlspecialchars_uni($link);\n\t}\n}\n\n/**\n * Build the link to a specified week on the calendar\n *\n * @param int $calendar The ID of the calendar\n * @param int $week The week\n * @return string The URL of the calendar\n */\nfunction get_calendar_week_link($calendar, $week)\n{\n\tif($week < 0)\n\t{\n\t\t$week = str_replace('-', \"n\", $week);\n\t}\n\t$link = str_replace(\"{week}\", $week, CALENDAR_URL_WEEK);\n\t$link = str_replace(\"{calendar}\", $calendar, $link);\n\treturn htmlspecialchars_uni($link);\n}\n\n/**\n * Get the user data of an user id.\n *\n * @param int $uid The user id of the user.\n * @return array The users data\n */\nfunction get_user($uid)\n{\n\tglobal $mybb, $db;\n\tstatic $user_cache;\n\n\t$uid = (int)$uid;\n\n\tif(!empty($mybb->user) && $uid == $mybb->user['uid'])\n\t{\n\t\treturn $mybb->user;\n\t}\n\telseif(isset($user_cache[$uid]))\n\t{\n\t\treturn $user_cache[$uid];\n\t}\n\telseif($uid > 0)\n\t{\n\t\t$query = $db->simple_select(\"users\", \"*\", \"uid = '{$uid}'\");\n\t\t$user_cache[$uid] = $db->fetch_array($query);\n\n\t\treturn $user_cache[$uid];\n\t}\n\treturn array();\n}\n\n/**\n * Get the user data of an user username.\n *\n * @param string $username The user username of the user.\n * @param array $options\n * @return array The users data\n */\nfunction get_user_by_username($username, $options=array())\n{\n\tglobal $mybb, $db;\n\n\t$username = $db->escape_string(my_strtolower($username));\n\n\tif(!isset($options['username_method']))\n\t{\n\t\t$options['username_method'] = 0;\n\t}\n\n\tswitch($db->type)\n\t{\n\t\tcase 'mysql':\n\t\tcase 'mysqli':\n\t\t\t$field = 'username';\n\t\t\t$efield = 'email';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$field = 'LOWER(username)';\n\t\t\t$efield = 'LOWER(email)';\n\t\t\tbreak;\n\t}\n\n\tswitch($options['username_method'])\n\t{\n\t\tcase 1:\n\t\t\t$sqlwhere = \"{$efield}='{$username}'\";\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t$sqlwhere = \"{$field}='{$username}' OR {$efield}='{$username}'\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$sqlwhere = \"{$field}='{$username}'\";\n\t\t\tbreak;\n\t}\n\n\t$fields = array('uid');\n\tif(isset($options['fields']))\n\t{\n\t\t$fields = array_merge((array)$options['fields'], $fields);\n\t}\n\n\t$query = $db->simple_select('users', implode(',', array_unique($fields)), $sqlwhere, array('limit' => 1));\n\n\tif(isset($options['exists']))\n\t{\n\t\treturn (bool)$db->num_rows($query);\n\t}\n\n\treturn $db->fetch_array($query);\n}\n\n/**\n * Get the forum of a specific forum id.\n *\n * @param int $fid The forum id of the forum.\n * @param int $active_override (Optional) If set to 1, will override the active forum status\n * @return array|bool The database row of a forum. False on failure\n */\nfunction get_forum($fid, $active_override=0)\n{\n\tglobal $cache;\n\tstatic $forum_cache;\n\n\tif(!isset($forum_cache) || is_array($forum_cache))\n\t{\n\t\t$forum_cache = $cache->read(\"forums\");\n\t}\n\n\tif(empty($forum_cache[$fid]))\n\t{\n\t\treturn false;\n\t}\n\n\tif($active_override != 1)\n\t{\n\t\t$parents = explode(\",\", $forum_cache[$fid]['parentlist']);\n\t\tif(is_array($parents))\n\t\t{\n\t\t\tforeach($parents as $parent)\n\t\t\t{\n\t\t\t\tif($forum_cache[$parent]['active'] == 0)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $forum_cache[$fid];\n}\n\n/**\n * Get the thread of a thread id.\n *\n * @param int $tid The thread id of the thread.\n * @param boolean $recache Whether or not to recache the thread.\n * @return array|bool The database row of the thread. False on failure\n */\nfunction get_thread($tid, $recache = false)\n{\n\tglobal $db;\n\tstatic $thread_cache;\n\n\t$tid = (int)$tid;\n\n\tif(isset($thread_cache[$tid]) && !$recache)\n\t{\n\t\treturn $thread_cache[$tid];\n\t}\n\telse\n\t{\n\t\t$query = $db->simple_select(\"threads\", \"*\", \"tid = '{$tid}'\");\n\t\t$thread = $db->fetch_array($query);\n\n\t\tif($thread)\n\t\t{\n\t\t\t$thread_cache[$tid] = $thread;\n\t\t\treturn $thread;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$thread_cache[$tid] = false;\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Get the post of a post id.\n *\n * @param int $pid The post id of the post.\n * @return array|bool The database row of the post. False on failure\n */\nfunction get_post($pid)\n{\n\tglobal $db;\n\tstatic $post_cache;\n\n\t$pid = (int)$pid;\n\n\tif(isset($post_cache[$pid]))\n\t{\n\t\treturn $post_cache[$pid];\n\t}\n\telse\n\t{\n\t\t$query = $db->simple_select(\"posts\", \"*\", \"pid = '{$pid}'\");\n\t\t$post = $db->fetch_array($query);\n\n\t\tif($post)\n\t\t{\n\t\t\t$post_cache[$pid] = $post;\n\t\t\treturn $post;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$post_cache[$pid] = false;\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n/**\n * Get inactivate forums.\n *\n * @return string The comma separated values of the inactivate forum.\n */\nfunction get_inactive_forums()\n{\n\tglobal $forum_cache, $cache;\n\n\tif(!$forum_cache)\n\t{\n\t\tcache_forums();\n\t}\n\n\t$inactive = array();\n\n\tforeach($forum_cache as $fid => $forum)\n\t{\n\t\tif($forum['active'] == 0)\n\t\t{\n\t\t\t$inactive[] = $fid;\n\t\t\tforeach($forum_cache as $fid1 => $forum1)\n\t\t\t{\n\t\t\t\tif(my_strpos(\",\".$forum1['parentlist'].\",\", \",\".$fid.\",\") !== false && !in_array($fid1, $inactive))\n\t\t\t\t{\n\t\t\t\t\t$inactive[] = $fid1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$inactiveforums = implode(\",\", $inactive);\n\n\treturn $inactiveforums;\n}\n\n/**\n * Checks to make sure a user has not tried to login more times than permitted\n *\n * @param bool $fatal (Optional) Stop execution if it finds an error with the login. Default is True\n * @return bool|int Number of logins when success, false if failed.\n */\nfunction login_attempt_check($fatal = true)\n{\n\tglobal $mybb, $lang, $session, $db;\n\n\tif($mybb->settings['failedlogincount'] == 0)\n\t{\n\t\treturn 1;\n\t}\n\t// Note: Number of logins is defaulted to 1, because using 0 seems to clear cookie data. Not really a problem as long as we account for 1 being default.\n\n\t// Use cookie if possible, otherwise use session\n\t// Find better solution to prevent clearing cookies\n\t$loginattempts = 0;\n\t$failedlogin = 0;\n\n\tif(!empty($mybb->cookies['loginattempts']))\n\t{\n\t\t$loginattempts = $mybb->cookies['loginattempts'];\n\t}\n\n\tif(!empty($mybb->cookies['failedlogin']))\n\t{\n\t\t$failedlogin = $mybb->cookies['failedlogin'];\n\t}\n\n\t// Work out if the user has had more than the allowed number of login attempts\n\tif($loginattempts > $mybb->settings['failedlogincount'])\n\t{\n\t\t// If so, then we need to work out if they can try to login again\n\t\t// Some maths to work out how long they have left and display it to them\n\t\t$now = TIME_NOW;\n\n\t\tif(empty($mybb->cookies['failedlogin']))\n\t\t{\n\t\t\t$failedtime = $now;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$failedtime = $mybb->cookies['failedlogin'];\n\t\t}\n\n\t\t$secondsleft = $mybb->settings['failedlogintime'] * 60 + $failedtime - $now;\n\t\t$hoursleft = floor($secondsleft / 3600);\n\t\t$minsleft = floor(($secondsleft / 60) % 60);\n\t\t$secsleft = floor($secondsleft % 60);\n\n\t\t// This value will be empty the first time the user doesn't login in, set it\n\t\tif(empty($failedlogin))\n\t\t{\n\t\t\tmy_setcookie('failedlogin', $now);\n\t\t\tif($fatal)\n\t\t\t{\n\t\t\t\terror($lang->sprintf($lang->failed_login_wait, $hoursleft, $minsleft, $secsleft));\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// Work out if the user has waited long enough before letting them login again\n\t\tif($mybb->cookies['failedlogin'] < ($now - $mybb->settings['failedlogintime'] * 60))\n\t\t{\n\t\t\tmy_setcookie('loginattempts', 1);\n\t\t\tmy_unsetcookie('failedlogin');\n\t\t\tif($mybb->user['uid'] != 0)\n\t\t\t{\n\t\t\t\t$update_array = array(\n\t\t\t\t\t'loginattempts' => 1\n\t\t\t\t);\n\t\t\t\t$db->update_query(\"users\", $update_array, \"uid = '{$mybb->user['uid']}'\");\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\t// Not waited long enough\n\t\telse if($mybb->cookies['failedlogin'] > ($now - $mybb->settings['failedlogintime'] * 60))\n\t\t{\n\t\t\tif($fatal)\n\t\t\t{\n\t\t\t\terror($lang->sprintf($lang->failed_login_wait, $hoursleft, $minsleft, $secsleft));\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// User can attempt another login\n\treturn $loginattempts;\n}\n\n/**\n * Validates the format of an email address.\n *\n * @param string $email The string to check.\n * @return boolean True when valid, false when invalid.\n */\nfunction validate_email_format($email)\n{\n\tif(strpos($email, ' ') !== false)\n\t{\n\t\treturn false;\n\t}\n\t// Valid local characters for email addresses: http://www.remote.org/jochen/mail/info/chars.html\n\treturn preg_match(\"/^[a-zA-Z0-9&*+\\-_.{}~^\\?=\\/]+@[a-zA-Z0-9-]+\\.([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]{2,}$/si\", $email);\n}\n\n/**\n * Checks to see if the email is already in use by another\n *\n * @param string $email The email to check.\n * @param int $uid User ID of the user (updating only)\n * @return boolean True when in use, false when not.\n */\nfunction email_already_in_use($email, $uid=0)\n{\n\tglobal $db;\n\n\t$uid_string = \"\";\n\tif($uid)\n\t{\n\t\t$uid_string = \" AND uid != '\".(int)$uid.\"'\";\n\t}\n\t$query = $db->simple_select(\"users\", \"COUNT(email) as emails\", \"email = '\".$db->escape_string($email).\"'{$uid_string}\");\n\n\tif($db->fetch_field($query, \"emails\") > 0)\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Rebuilds settings.php\n *\n */\nfunction rebuild_settings()\n{\n\tglobal $db, $mybb;\n\n\tif(!file_exists(MYBB_ROOT.\"inc/settings.php\"))\n\t{\n\t\t$mode = \"x\";\n\t}\n\telse\n\t{\n\t\t$mode = \"w\";\n\t}\n\n\t$options = array(\n\t\t\"order_by\" => \"title\",\n\t\t\"order_dir\" => \"ASC\"\n\t);\n\t$query = $db->simple_select(\"settings\", \"value, name\", \"\", $options);\n\n\t$settings = null;\n\twhile($setting = $db->fetch_array($query))\n\t{\n\t\t$mybb->settings[$setting['name']] = $setting['value'];\n\t\t$setting['value'] = addcslashes($setting['value'], '\\\\\"$');\n\t\t$settings .= \"\\$settings['{$setting['name']}'] = \\\"{$setting['value']}\\\";\\n\";\n\t}\n\n\t$settings = \"<\".\"?php\\n/*********************************\\ \\n  DO NOT EDIT THIS FILE, PLEASE USE\\n  THE SETTINGS EDITOR\\n\\*********************************/\\n\\n$settings\\n\";\n\t$file = @fopen(MYBB_ROOT.\"inc/settings.php\", $mode);\n\t@fwrite($file, $settings);\n\t@fclose($file);\n\n\t$GLOBALS['settings'] = &$mybb->settings;\n}\n\n/**\n * Build a PREG compatible array of search highlight terms to replace in posts.\n *\n * @param string $terms Incoming terms to highlight\n * @return array PREG compatible array of terms\n */\nfunction build_highlight_array($terms)\n{\n\tglobal $mybb;\n\n\tif($mybb->settings['minsearchword'] < 1)\n\t{\n\t\t$mybb->settings['minsearchword'] = 3;\n\t}\n\n\tif(is_array($terms))\n\t{\n\t\t$terms = implode(' ', $terms);\n\t}\n\n\t// Strip out any characters that shouldn't be included\n\t$bad_characters = array(\n\t\t\"(\",\n\t\t\")\",\n\t\t\"+\",\n\t\t\"-\",\n\t\t\"~\"\n\t);\n\t$terms = str_replace($bad_characters, '', $terms);\n\n\t// Check if this is a \"series of words\" - should be treated as an EXACT match\n\tif(my_strpos($terms, \"\\\"\") !== false)\n\t{\n\t\t$inquote = false;\n\t\t$terms = explode(\"\\\"\", $terms);\n\t\t$words = array();\n\t\tforeach($terms as $phrase)\n\t\t{\n\t\t\t$phrase = htmlspecialchars_uni($phrase);\n\t\t\tif($phrase != \"\")\n\t\t\t{\n\t\t\t\tif($inquote)\n\t\t\t\t{\n\t\t\t\t\t$words[] = trim($phrase);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$split_words = preg_split(\"#\\s{1,}#\", $phrase, -1);\n\t\t\t\t\tif(!is_array($split_words))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tforeach($split_words as $word)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(!$word || strlen($word) < $mybb->settings['minsearchword'])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$words[] = trim($word);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$inquote = !$inquote;\n\t\t}\n\t}\n\t// Otherwise just a simple search query with no phrases\n\telse\n\t{\n\t\t$terms = htmlspecialchars_uni($terms);\n\t\t$split_words = preg_split(\"#\\s{1,}#\", $terms, -1);\n\t\tif(is_array($split_words))\n\t\t{\n\t\t\tforeach($split_words as $word)\n\t\t\t{\n\t\t\t\tif(!$word || strlen($word) < $mybb->settings['minsearchword'])\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$words[] = trim($word);\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!is_array($words))\n\t{\n\t\treturn false;\n\t}\n\n\t// Sort the word array by length. Largest terms go first and work their way down to the smallest term.\n\t// This resolves problems like \"test tes\" where \"tes\" will be highlighted first, then \"test\" can't be highlighted because of the changed html\n\tusort($words, create_function('$a,$b', 'return strlen($b) - strlen($a);'));\n\n\t// Loop through our words to build the PREG compatible strings\n\tforeach($words as $word)\n\t{\n\t\t$word = trim($word);\n\n\t\t$word = my_strtolower($word);\n\n\t\t// Special boolean operators should be stripped\n\t\tif($word == \"\" || $word == \"or\" || $word == \"not\" || $word == \"and\")\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Now make PREG compatible\n\t\t$find = \"#(?!<.*?)(\".preg_quote($word, \"#\").\")(?![^<>]*?>)#ui\";\n\t\t$replacement = \"<span class=\\\"highlight\\\" style=\\\"padding-left: 0px; padding-right: 0px;\\\">$1</span>\";\n\t\t$highlight_cache[$find] = $replacement;\n\t}\n\n\treturn $highlight_cache;\n}\n\n/**\n * Converts a decimal reference of a character to its UTF-8 equivalent\n * (Code by Anne van Kesteren, http://annevankesteren.nl/2005/05/character-references)\n *\n * @param int $src Decimal value of a character reference\n * @return string|bool\n */\nfunction dec_to_utf8($src)\n{\n\t$dest = '';\n\n\tif($src < 0)\n\t{\n\t\treturn false;\n\t}\n\telseif($src <= 0x007f)\n\t{\n\t\t$dest .= chr($src);\n\t}\n\telseif($src <= 0x07ff)\n\t{\n\t\t$dest .= chr(0xc0 | ($src >> 6));\n\t\t$dest .= chr(0x80 | ($src & 0x003f));\n\t}\n\telseif($src <= 0xffff)\n\t{\n\t\t$dest .= chr(0xe0 | ($src >> 12));\n\t\t$dest .= chr(0x80 | (($src >> 6) & 0x003f));\n\t\t$dest .= chr(0x80 | ($src & 0x003f));\n\t}\n\telseif($src <= 0x10ffff)\n\t{\n\t\t$dest .= chr(0xf0 | ($src >> 18));\n\t\t$dest .= chr(0x80 | (($src >> 12) & 0x3f));\n\t\t$dest .= chr(0x80 | (($src >> 6) & 0x3f));\n\t\t$dest .= chr(0x80 | ($src & 0x3f));\n\t}\n\telse\n\t{\n\t\t// Out of range\n\t\treturn false;\n\t}\n\n\treturn $dest;\n}\n\n/**\n * Checks if a username has been disallowed for registration/use.\n *\n * @param string $username The username\n * @param boolean $update_lastuse True if the 'last used' dateline should be updated if a match is found.\n * @return boolean True if banned, false if not banned\n */\nfunction is_banned_username($username, $update_lastuse=false)\n{\n\tglobal $db;\n\t$query = $db->simple_select('banfilters', 'filter, fid', \"type='2'\");\n\twhile($banned_username = $db->fetch_array($query))\n\t{\n\t\t// Make regular expression * match\n\t\t$banned_username['filter'] = str_replace('\\*', '(.*)', preg_quote($banned_username['filter'], '#'));\n\t\tif(preg_match(\"#(^|\\b){$banned_username['filter']}($|\\b)#i\", $username))\n\t\t{\n\t\t\t// Updating last use\n\t\t\tif($update_lastuse == true)\n\t\t\t{\n\t\t\t\t$db->update_query(\"banfilters\", array(\"lastuse\" => TIME_NOW), \"fid='{$banned_username['fid']}'\");\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\t// Still here - good username\n\treturn false;\n}\n\n/**\n * Check if a specific email address has been banned.\n *\n * @param string $email The email address.\n * @param boolean $update_lastuse True if the 'last used' dateline should be updated if a match is found.\n * @return boolean True if banned, false if not banned\n */\nfunction is_banned_email($email, $update_lastuse=false)\n{\n\tglobal $cache, $db;\n\n\t$banned_cache = $cache->read(\"bannedemails\");\n\n\tif($banned_cache === false)\n\t{\n\t\t// Failed to read cache, see if we can rebuild it\n\t\t$cache->update_bannedemails();\n\t\t$banned_cache = $cache->read(\"bannedemails\");\n\t}\n\n\tif(is_array($banned_cache) && !empty($banned_cache))\n\t{\n\t\tforeach($banned_cache as $banned_email)\n\t\t{\n\t\t\t// Make regular expression * match\n\t\t\t$banned_email['filter'] = str_replace('\\*', '(.*)', preg_quote($banned_email['filter'], '#'));\n\n\t\t\tif(preg_match(\"#{$banned_email['filter']}#i\", $email))\n\t\t\t{\n\t\t\t\t// Updating last use\n\t\t\t\tif($update_lastuse == true)\n\t\t\t\t{\n\t\t\t\t\t$db->update_query(\"banfilters\", array(\"lastuse\" => TIME_NOW), \"fid='{$banned_email['fid']}'\");\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Still here - good email\n\treturn false;\n}\n\n/**\n * Checks if a specific IP address has been banned.\n *\n * @param string $ip_address The IP address.\n * @param boolean $update_lastuse True if the 'last used' dateline should be updated if a match is found.\n * @return boolean True if banned, false if not banned.\n */\nfunction is_banned_ip($ip_address, $update_lastuse=false)\n{\n\tglobal $db, $cache;\n\n\t$banned_ips = $cache->read(\"bannedips\");\n\tif(!is_array($banned_ips))\n\t{\n\t\treturn false;\n\t}\n\n\t$ip_address = my_inet_pton($ip_address);\n\tforeach($banned_ips as $banned_ip)\n\t{\n\t\tif(!$banned_ip['filter'])\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\n\t\t$banned = false;\n\n\t\t$ip_range = fetch_ip_range($banned_ip['filter']);\n\t\tif(is_array($ip_range))\n\t\t{\n\t\t\tif(strcmp($ip_range[0], $ip_address) <= 0 && strcmp($ip_range[1], $ip_address) >= 0)\n\t\t\t{\n\t\t\t\t$banned = true;\n\t\t\t}\n\t\t}\n\t\telseif($ip_address == $ip_range)\n\t\t{\n\t\t\t$banned = true;\n\t\t}\n\t\tif($banned)\n\t\t{\n\t\t\t// Updating last use\n\t\t\tif($update_lastuse == true)\n\t\t\t{\n\t\t\t\t$db->update_query(\"banfilters\", array(\"lastuse\" => TIME_NOW), \"fid='{$banned_ip['fid']}'\");\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Still here - good ip\n\treturn false;\n}\n\n/**\n * Returns an array of supported timezones\n *\n * @return string[] Key is timezone offset, Value the language description\n */\nfunction get_supported_timezones()\n{\n\tglobal $lang;\n\t$timezones = array(\n\t\t\"-12\" => $lang->timezone_gmt_minus_1200,\n\t\t\"-11\" => $lang->timezone_gmt_minus_1100,\n\t\t\"-10\" => $lang->timezone_gmt_minus_1000,\n\t\t\"-9.5\" => $lang->timezone_gmt_minus_950,\n\t\t\"-9\" => $lang->timezone_gmt_minus_900,\n\t\t\"-8\" => $lang->timezone_gmt_minus_800,\n\t\t\"-7\" => $lang->timezone_gmt_minus_700,\n\t\t\"-6\" => $lang->timezone_gmt_minus_600,\n\t\t\"-5\" => $lang->timezone_gmt_minus_500,\n\t\t\"-4.5\" => $lang->timezone_gmt_minus_450,\n\t\t\"-4\" => $lang->timezone_gmt_minus_400,\n\t\t\"-3.5\" => $lang->timezone_gmt_minus_350,\n\t\t\"-3\" => $lang->timezone_gmt_minus_300,\n\t\t\"-2\" => $lang->timezone_gmt_minus_200,\n\t\t\"-1\" => $lang->timezone_gmt_minus_100,\n\t\t\"0\" => $lang->timezone_gmt,\n\t\t\"1\" => $lang->timezone_gmt_100,\n\t\t\"2\" => $lang->timezone_gmt_200,\n\t\t\"3\" => $lang->timezone_gmt_300,\n\t\t\"3.5\" => $lang->timezone_gmt_350,\n\t\t\"4\" => $lang->timezone_gmt_400,\n\t\t\"4.5\" => $lang->timezone_gmt_450,\n\t\t\"5\" => $lang->timezone_gmt_500,\n\t\t\"5.5\" => $lang->timezone_gmt_550,\n\t\t\"5.75\" => $lang->timezone_gmt_575,\n\t\t\"6\" => $lang->timezone_gmt_600,\n\t\t\"6.5\" => $lang->timezone_gmt_650,\n\t\t\"7\" => $lang->timezone_gmt_700,\n\t\t\"8\" => $lang->timezone_gmt_800,\n\t\t\"8.5\" => $lang->timezone_gmt_850,\n\t\t\"8.75\" => $lang->timezone_gmt_875,\n\t\t\"9\" => $lang->timezone_gmt_900,\n\t\t\"9.5\" => $lang->timezone_gmt_950,\n\t\t\"10\" => $lang->timezone_gmt_1000,\n\t\t\"10.5\" => $lang->timezone_gmt_1050,\n\t\t\"11\" => $lang->timezone_gmt_1100,\n\t\t\"11.5\" => $lang->timezone_gmt_1150,\n\t\t\"12\" => $lang->timezone_gmt_1200,\n\t\t\"12.75\" => $lang->timezone_gmt_1275,\n\t\t\"13\" => $lang->timezone_gmt_1300,\n\t\t\"14\" => $lang->timezone_gmt_1400\n\t);\n\treturn $timezones;\n}\n\n/**\n * Build a time zone selection list.\n *\n * @param string $name The name of the select\n * @param int $selected The selected time zone (defaults to GMT)\n * @param boolean $short True to generate a \"short\" list with just timezone and current time\n * @return string\n */\nfunction build_timezone_select($name, $selected=0, $short=false)\n{\n\tglobal $mybb, $lang, $templates;\n\n\t$timezones = get_supported_timezones();\n\n\t$selected = str_replace(\"+\", \"\", $selected);\n\tforeach($timezones as $timezone => $label)\n\t{\n\t\t$selected_add = \"\";\n\t\tif($selected == $timezone)\n\t\t{\n\t\t\t$selected_add = \" selected=\\\"selected\\\"\";\n\t\t}\n\t\tif($short == true)\n\t\t{\n\t\t\t$label = '';\n\t\t\tif($timezone != 0)\n\t\t\t{\n\t\t\t\t$label = $timezone;\n\t\t\t\tif($timezone > 0)\n\t\t\t\t{\n\t\t\t\t\t$label = \"+{$label}\";\n\t\t\t\t}\n\t\t\t\tif(strpos($timezone, \".\") !== false)\n\t\t\t\t{\n\t\t\t\t\t$label = str_replace(\".\", \":\", $label);\n\t\t\t\t\t$label = str_replace(\":5\", \":30\", $label);\n\t\t\t\t\t$label = str_replace(\":75\", \":45\", $label);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$label .= \":00\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$time_in_zone = my_date($mybb->settings['timeformat'], TIME_NOW, $timezone);\n\t\t\t$label = $lang->sprintf($lang->timezone_gmt_short, $label.\" \", $time_in_zone);\n\t\t}\n\n\t\teval(\"\\$timezone_option .= \\\"\".$templates->get(\"usercp_options_timezone_option\").\"\\\";\");\n\t}\n\n\teval(\"\\$select = \\\"\".$templates->get(\"usercp_options_timezone\").\"\\\";\");\n\treturn $select;\n}\n\n/**\n * Fetch the contents of a remote file.\n *\n * @param string $url The URL of the remote file\n * @param array $post_data The array of post data\n * @param int $max_redirects Number of maximum redirects\n * @return string|bool The remote file contents. False on failure\n */\nfunction fetch_remote_file($url, $post_data=array(), $max_redirects=20)\n{\n\tglobal $mybb, $config;\n\n\tif(!my_validate_url($url, true))\n\t{\n\t\treturn false;\n\t}\n\n\t$url_components = @parse_url($url);\n\n\tif(!isset($url_components['scheme']))\n\t{\n\t\t$url_components['scheme'] = 'https';\n\t}\n\tif(!isset($url_components['port']))\n\t{\n\t\t$url_components['port'] = $url_components['scheme'] == 'https' ? 443 : 80;\n\t}\n\n\tif(\n\t\t!$url_components ||\n\t\tempty($url_components['host']) ||\n\t\t(!empty($url_components['scheme']) && !in_array($url_components['scheme'], array('http', 'https'))) ||\n\t\t(!in_array($url_components['port'], array(80, 8080, 443))) ||\n\t\t(!empty($config['disallowed_remote_hosts']) && in_array($url_components['host'], $config['disallowed_remote_hosts']))\n\t)\n\t{\n\t\treturn false;\n\t}\n\n\t$addresses = get_ip_by_hostname($url_components['host']);\n\t$destination_address = $addresses[0];\n\n\tif(!empty($config['disallowed_remote_addresses']))\n\t{\n\t\tforeach($config['disallowed_remote_addresses'] as $disallowed_address)\n\t\t{\n\t\t\t$ip_range = fetch_ip_range($disallowed_address);\n\n\t\t\t$packed_address = my_inet_pton($destination_address);\n\n\t\t\tif(is_array($ip_range))\n\t\t\t{\n\t\t\t\tif(strcmp($ip_range[0], $packed_address) <= 0 && strcmp($ip_range[1], $packed_address) >= 0)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telseif($destination_address == $disallowed_address)\n\t\t\t{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t$post_body = '';\n\tif(!empty($post_data))\n\t{\n\t\tforeach($post_data as $key => $val)\n\t\t{\n\t\t\t$post_body .= '&'.urlencode($key).'='.urlencode($val);\n\t\t}\n\t\t$post_body = ltrim($post_body, '&');\n\t}\n\n\tif(function_exists(\"curl_init\"))\n\t{\n\t\t$fetch_header = $max_redirects > 0;\n\n\t\t$ch = curl_init();\n\n\t\t$curlopt = array(\n\t\t\tCURLOPT_URL => $url,\n\t\t\tCURLOPT_HEADER => $fetch_header,\n\t\t\tCURLOPT_TIMEOUT => 10,\n\t\t\tCURLOPT_RETURNTRANSFER => 1,\n\t\t\tCURLOPT_FOLLOWLOCATION => 0,\n\t\t);\n\n\t\tif($ca_bundle_path = get_ca_bundle_path())\n\t\t{\n\t\t\t$curlopt[CURLOPT_SSL_VERIFYPEER] = 1;\n\t\t\t$curlopt[CURLOPT_CAINFO] = $ca_bundle_path;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$curlopt[CURLOPT_SSL_VERIFYPEER] = 0;\n\t\t}\n\n\t\t$curl_version_info = curl_version();\n\t\t$curl_version = $curl_version_info['version'];\n\n\t\tif(version_compare($curl_version, '7.0.7', '>=') && version_compare($curl_version, '7.49', '>='))\n\t\t{\n\t\t\t$curlopt[CURLOPT_CONNECT_TO] = array(\n\t\t\t\t$url_components['host'].':'.$url_components['port'].':'.$destination_address\n\t\t\t);\n\t\t}\n\t\telseif(version_compare(PHP_VERSION, '5.5', '>='))\n\t\t{\n\t\t\t$curlopt[CURLOPT_RESOLVE] = array(\n\t\t\t\t$url_components['host'].':'.$url_components['port'].':'.$destination_address\n\t\t\t);\n\t\t}\n\n\t\tif(!empty($post_body))\n\t\t{\n\t\t\t$curlopt[CURLOPT_POST] = 1;\n\t\t\t$curlopt[CURLOPT_POSTFIELDS] = $post_body;\n\t\t}\n\n\t\tcurl_setopt_array($ch, $curlopt);\n\n\t\t$response = curl_exec($ch);\n\n\t\tif($fetch_header)\n\t\t{\n\t\t\t$header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);\n\t\t\t$header = substr($response, 0, $header_size);\n\t\t\t$body = substr($response, $header_size);\n\n\t\t\tif(in_array(curl_getinfo($ch, CURLINFO_HTTP_CODE), array(301, 302)))\n\t\t\t{\n\t\t\t\tpreg_match('/Location:(.*?)(?:\\n|$)/', $header, $matches);\n\n\t\t\t\tif($matches)\n\t\t\t\t{\n\t\t\t\t\t$data = fetch_remote_file(trim(array_pop($matches)), $post_data, --$max_redirects);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$data = $body;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$data = $response;\n\t\t}\n\n\t\tcurl_close($ch);\n\t\treturn $data;\n\t}\n\telse if(function_exists(\"fsockopen\"))\n\t{\n\t\tif(!isset($url_components['path']))\n\t\t{\n\t\t\t$url_components['path'] = \"/\";\n\t\t}\n\t\tif(isset($url_components['query']))\n\t\t{\n\t\t\t$url_components['path'] .= \"?{$url_components['query']}\";\n\t\t}\n\n\t\t$scheme = '';\n\n\t\tif($url_components['scheme'] == 'https')\n\t\t{\n\t\t\t$scheme = 'ssl://';\n\t\t\tif($url_components['port'] == 80)\n\t\t\t{\n\t\t\t\t$url_components['port'] = 443;\n\t\t\t}\n\t\t}\n\n\t\tif(function_exists('stream_context_create'))\n\t\t{\n\t\t\tif($url_components['scheme'] == 'https' && $ca_bundle_path = get_ca_bundle_path())\n\t\t\t{\n\t\t\t\t$context = stream_context_create([\n\t\t\t\t\t'ssl' => [\n\t\t\t\t\t\t'verify_peer' => true,\n\t\t\t\t\t\t'verify_peer_name' => true,\n\t\t\t\t\t\t'peer_name' => $url_components['host'],\n\t\t\t\t\t\t'cafile' => $ca_bundle_path,\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$context = stream_context_create([\n\t\t\t\t\t'ssl' => [\n\t\t\t\t\t\t'verify_peer' => false,\n\t\t\t\t\t\t'verify_peer_name' => false,\n\t\t\t\t\t],\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t$fp = @stream_socket_client($scheme.$destination_address.':'.(int)$url_components['port'], $error_no, $error, 10, STREAM_CLIENT_CONNECT, $context);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$fp = @fsockopen($scheme.$url_components['host'], (int)$url_components['port'], $error_no, $error, 10);\n\t\t}\n\n\t\t@stream_set_timeout($fp, 10);\n\t\tif(!$fp)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t$headers = array();\n\t\tif(!empty($post_body))\n\t\t{\n\t\t\t$headers[] = \"POST {$url_components['path']} HTTP/1.0\";\n\t\t\t$headers[] = \"Content-Length: \".strlen($post_body);\n\t\t\t$headers[] = \"Content-Type: application/x-www-form-urlencoded\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$headers[] = \"GET {$url_components['path']} HTTP/1.0\";\n\t\t}\n\n\t\t$headers[] = \"Host: {$url_components['host']}\";\n\t\t$headers[] = \"Connection: Close\";\n\t\t$headers[] = '';\n\n\t\tif(!empty($post_body))\n\t\t{\n\t\t\t$headers[] = $post_body;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// If we have no post body, we need to add an empty element to make sure we've got \\r\\n\\r\\n before the (non-existent) body starts\n\t\t\t$headers[] = '';\n\t\t}\n\n\t\t$headers = implode(\"\\r\\n\", $headers);\n\t\tif(!@fwrite($fp, $headers))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$data = null;\n\n\t\twhile(!feof($fp))\n\t\t{\n\t\t\t$data .= fgets($fp, 12800);\n\t\t}\n\t\tfclose($fp);\n\n\t\t$data = explode(\"\\r\\n\\r\\n\", $data, 2);\n\n\t\t$header = $data[0];\n\t\t$status_line = current(explode(\"\\n\\n\", $header, 1));\n\t\t$body = $data[1];\n\n\t\tif($max_redirects > 0 && (strstr($status_line, ' 301 ') || strstr($status_line, ' 302 ')))\n\t\t{\n\t\t\tpreg_match('/Location:(.*?)(?:\\n|$)/', $header, $matches);\n\n\t\t\tif($matches)\n\t\t\t{\n\t\t\t\t$data = fetch_remote_file(trim(array_pop($matches)), $post_data, --$max_redirects);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$data = $body;\n\t\t}\n\n\t\treturn $data;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n * Resolves a hostname into a set of IP addresses.\n *\n * @param string $hostname The hostname to be resolved\n * @return array|bool The resulting IP addresses. False on failure\n */\nfunction get_ip_by_hostname($hostname)\n{\n\t$addresses = gethostbynamel($hostname);\n\n\tif(!$addresses)\n\t{\n\t\t$result_set = dns_get_record($hostname, DNS_A | DNS_AAAA);\n\n\t\tif($result_set)\n\t\t{\n\t\t\t$addresses = array_column($result_set, 'ip');\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn $addresses;\n}\n\n/**\n * Returns the location of the CA bundle defined in the PHP configuration.\n *\n * @return string|bool The location of the CA bundle, false if not set\n */\nfunction get_ca_bundle_path()\n{\n\tif($path = ini_get('openssl.cafile'))\n\t{\n\t\treturn $path;\n\t}\n\tif($path = ini_get('curl.cainfo'))\n\t{\n\t\treturn $path;\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks if a particular user is a super administrator.\n *\n * @param int $uid The user ID to check against the list of super admins\n * @return boolean True if a super admin, false if not\n */\nfunction is_super_admin($uid)\n{\n\tstatic $super_admins;\n\n\tif(!isset($super_admins))\n\t{\n\t\tglobal $mybb;\n\t\t$super_admins = str_replace(\" \", \"\", $mybb->config['super_admins']);\n\t}\n\n\tif(my_strpos(\",{$super_admins},\", \",{$uid},\") === false)\n\t{\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\treturn true;\n\t}\n}\n\n/**\n * Checks if a user is a member of a particular group\n * Originates from frostschutz's PluginLibrary\n * github.com/frostschutz\n *\n * @param array|int|string A selection of groups (as array or comma seperated) to check or -1 for any group\n * @param bool|array|int False assumes the current user. Otherwise an user array or an id can be passed\n * @return array Array of groups specified in the first param to which the user belongs\n */\nfunction is_member($groups, $user = false)\n{\n\tglobal $mybb;\n\n\tif(empty($groups))\n\t{\n\t\treturn array();\n\t}\n\n\tif($user == false)\n\t{\n\t\t$user = $mybb->user;\n\t}\n\telse if(!is_array($user))\n\t{\n\t\t// Assume it's a UID\n\t\t$user = get_user($user);\n\t}\n\n\t$memberships = array_map('intval', explode(',', $user['additionalgroups']));\n\t$memberships[] = $user['usergroup'];\n\n\tif(!is_array($groups))\n\t{\n\t\tif((int)$groups == -1)\n\t\t{\n\t\t\treturn $memberships;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(is_string($groups))\n\t\t\t{\n\t\t\t\t$groups = explode(',', $groups);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$groups = (array)$groups;\n\t\t\t}\n\t\t}\n\t}\n\n\t$groups = array_filter(array_map('intval', $groups));\n\n\treturn array_intersect($groups, $memberships);\n}\n\n/**\n * Split a string based on the specified delimeter, ignoring said delimeter in escaped strings.\n * Ex: the \"quick brown fox\" jumped, could return 1 => the, 2 => quick brown fox, 3 => jumped\n *\n * @param string $delimeter The delimeter to split by\n * @param string $string The string to split\n * @param string $escape The escape character or string if we have one.\n * @return array Array of split string\n */\nfunction escaped_explode($delimeter, $string, $escape=\"\")\n{\n\t$strings = array();\n\t$original = $string;\n\t$in_escape = false;\n\tif($escape)\n\t{\n\t\tif(is_array($escape))\n\t\t{\n\t\t\tfunction escaped_explode_escape($string)\n\t\t\t{\n\t\t\t\treturn preg_quote($string, \"#\");\n\t\t\t}\n\t\t\t$escape_preg = \"(\".implode(\"|\", array_map(\"escaped_explode_escape\", $escape)).\")\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$escape_preg = preg_quote($escape, \"#\");\n\t\t}\n\t\t$quoted_strings = preg_split(\"#(?<!\\\\\\){$escape_preg}#\", $string);\n\t}\n\telse\n\t{\n\t\t$quoted_strings = array($string);\n\t}\n\tforeach($quoted_strings as $string)\n\t{\n\t\tif($string != \"\")\n\t\t{\n\t\t\tif($in_escape)\n\t\t\t{\n\t\t\t\t$strings[] = trim($string);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$split_strings = explode($delimeter, $string);\n\t\t\t\tforeach($split_strings as $string)\n\t\t\t\t{\n\t\t\t\t\tif($string == \"\") continue;\n\t\t\t\t\t$strings[] = trim($string);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$in_escape = !$in_escape;\n\t}\n\tif(!count($strings))\n\t{\n\t\treturn $original;\n\t}\n\treturn $strings;\n}\n\n/**\n * DEPRECATED! Please use IPv6 compatible fetch_ip_range!\n * Fetch an IPv4 long formatted range for searching IPv4 IP addresses.\n *\n * @deprecated\n * @param string $ip The IP address to convert to a range based LONG\n * @return string|array If a full IP address is provided, the ip2long equivalent, otherwise an array of the upper & lower extremities of the IP\n */\nfunction fetch_longipv4_range($ip)\n{\n\t$ip_bits = explode(\".\", $ip);\n\t$ip_string1 = $ip_string2 = \"\";\n\n\tif($ip == \"*\")\n\t{\n\t\treturn array(ip2long('0.0.0.0'), ip2long('255.255.255.255'));\n\t}\n\n\tif(strpos($ip, \".*\") === false)\n\t{\n\t\t$ip = str_replace(\"*\", \"\", $ip);\n\t\tif(count($ip_bits) == 4)\n\t\t{\n\t\t\treturn ip2long($ip);\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn array(ip2long($ip.\".0\"), ip2long($ip.\".255\"));\n\t\t}\n\t}\n\t// Wildcard based IP provided\n\telse\n\t{\n\t\t$sep = \"\";\n\t\tforeach($ip_bits as $piece)\n\t\t{\n\t\t\tif($piece == \"*\")\n\t\t\t{\n\t\t\t\t$ip_string1 .= $sep.\"0\";\n\t\t\t\t$ip_string2 .= $sep.\"255\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ip_string1 .= $sep.$piece;\n\t\t\t\t$ip_string2 .= $sep.$piece;\n\t\t\t}\n\t\t\t$sep = \".\";\n\t\t}\n\t\treturn array(ip2long($ip_string1), ip2long($ip_string2));\n\t}\n}\n\n/**\n * Fetch a list of ban times for a user account.\n *\n * @return array Array of ban times\n */\nfunction fetch_ban_times()\n{\n\tglobal $plugins, $lang;\n\n\t// Days-Months-Years\n\t$ban_times = array(\n\t\t\"1-0-0\" => \"1 {$lang->day}\",\n\t\t\"2-0-0\" => \"2 {$lang->days}\",\n\t\t\"3-0-0\" => \"3 {$lang->days}\",\n\t\t\"4-0-0\" => \"4 {$lang->days}\",\n\t\t\"5-0-0\" => \"5 {$lang->days}\",\n\t\t\"6-0-0\" => \"6 {$lang->days}\",\n\t\t\"7-0-0\" => \"1 {$lang->week}\",\n\t\t\"14-0-0\" => \"2 {$lang->weeks}\",\n\t\t\"21-0-0\" => \"3 {$lang->weeks}\",\n\t\t\"0-1-0\" => \"1 {$lang->month}\",\n\t\t\"0-2-0\" => \"2 {$lang->months}\",\n\t\t\"0-3-0\" => \"3 {$lang->months}\",\n\t\t\"0-4-0\" => \"4 {$lang->months}\",\n\t\t\"0-5-0\" => \"5 {$lang->months}\",\n\t\t\"0-6-0\" => \"6 {$lang->months}\",\n\t\t\"0-0-1\" => \"1 {$lang->year}\",\n\t\t\"0-0-2\" => \"2 {$lang->years}\"\n\t);\n\n\t$ban_times = $plugins->run_hooks(\"functions_fetch_ban_times\", $ban_times);\n\n\t$ban_times['---'] = $lang->permanent;\n\treturn $ban_times;\n}\n\n/**\n * Format a ban length in to a UNIX timestamp.\n *\n * @param string $date The ban length string\n * @param int $stamp The optional UNIX timestamp, if 0, current time is used.\n * @return int The UNIX timestamp when the ban will be lifted\n */\nfunction ban_date2timestamp($date, $stamp=0)\n{\n\tif($stamp == 0)\n\t{\n\t\t$stamp = TIME_NOW;\n\t}\n\t$d = explode('-', $date);\n\t$nowdate = date(\"H-j-n-Y\", $stamp);\n\t$n = explode('-', $nowdate);\n\t$n[1] += $d[0];\n\t$n[2] += $d[1];\n\t$n[3] += $d[2];\n\treturn mktime(date(\"G\", $stamp), date(\"i\", $stamp), 0, $n[2], $n[1], $n[3]);\n}\n\n/**\n * Expire old warnings in the database.\n *\n * @return bool\n */\nfunction expire_warnings()\n{\n\tglobal $warningshandler;\n\n\tif(!is_object($warningshandler))\n\t{\n\t\trequire_once MYBB_ROOT.'inc/datahandlers/warnings.php';\n\t\t$warningshandler = new WarningsHandler('update');\n\t}\n\n\treturn $warningshandler->expire_warnings();\n}\n\n/**\n * Custom chmod function to fix problems with hosts who's server configurations screw up umasks\n *\n * @param string $file The file to chmod\n * @param string $mode The mode to chmod(i.e. 0666)\n * @return bool\n */\nfunction my_chmod($file, $mode)\n{\n\t// Passing $mode as an octal number causes strlen and substr to return incorrect values. Instead pass as a string\n\tif(substr($mode, 0, 1) != '0' || strlen($mode) !== 4)\n\t{\n\t\treturn false;\n\t}\n\t$old_umask = umask(0);\n\n\t// We convert the octal string to a decimal number because passing a octal string doesn't work with chmod\n\t// and type casting subsequently removes the prepended 0 which is needed for octal numbers\n\t$result = chmod($file, octdec($mode));\n\tumask($old_umask);\n\treturn $result;\n}\n\n/**\n * Custom rmdir function to loop through an entire directory and delete all files/folders within\n *\n * @param string $path The path to the directory\n * @param array $ignore Any files you wish to ignore (optional)\n * @return bool\n */\nfunction my_rmdir_recursive($path, $ignore=array())\n{\n\tglobal $orig_dir;\n\n\tif(!isset($orig_dir))\n\t{\n\t\t$orig_dir = $path;\n\t}\n\n\tif(@is_dir($path) && !@is_link($path))\n\t{\n\t\tif($dh = @opendir($path))\n\t\t{\n\t\t\twhile(($file = @readdir($dh)) !== false)\n\t\t\t{\n\t\t\t\tif($file == '.' || $file == '..' || $file == '.svn' || in_array($path.'/'.$file, $ignore) || !my_rmdir_recursive($path.'/'.$file))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t   @closedir($dh);\n\t\t}\n\n\t\t// Are we done? Don't delete the main folder too and return true\n\t\tif($path == $orig_dir)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\n\t\treturn @rmdir($path);\n\t}\n\n\treturn @unlink($path);\n}\n\n/**\n * Counts the number of subforums in a array([pid][disporder][fid]) starting from the pid\n *\n * @param array $array The array of forums\n * @return integer The number of sub forums\n */\nfunction subforums_count($array)\n{\n\t$count = 0;\n\tforeach($array as $array2)\n\t{\n\t\t$count += count($array2);\n\t}\n\n\treturn $count;\n}\n\n/**\n * DEPRECATED! Please use IPv6 compatible my_inet_pton!\n * Fix for PHP's ip2long to guarantee a 32-bit signed integer value is produced (this is aimed\n * at 64-bit versions of PHP)\n *\n * @deprecated\n * @param string $ip The IP to convert\n * @return integer IP in 32-bit signed format\n */\nfunction my_ip2long($ip)\n{\n\t$ip_long = ip2long($ip);\n\n\tif(!$ip_long)\n\t{\n\t\t$ip_long = sprintf(\"%u\", ip2long($ip));\n\n\t\tif(!$ip_long)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tif($ip_long >= 2147483648) // Won't occur on 32-bit PHP\n\t{\n\t\t$ip_long -= 4294967296;\n\t}\n\n\treturn $ip_long;\n}\n\n/**\n * DEPRECATED! Please use IPv6 compatible my_inet_ntop!\n * As above, fix for PHP's long2ip on 64-bit versions\n *\n * @deprecated\n * @param integer $long The IP to convert (will accept 64-bit IPs as well)\n * @return string IP in IPv4 format\n */\nfunction my_long2ip($long)\n{\n\t// On 64-bit machines is_int will return true. On 32-bit it will return false\n\tif($long < 0 && is_int(2147483648))\n\t{\n\t\t// We have a 64-bit system\n\t\t$long += 4294967296;\n\t}\n\treturn long2ip($long);\n}\n\n/**\n * Converts a human readable IP address to its packed in_addr representation\n *\n * @param string $ip The IP to convert\n * @return string IP in 32bit or 128bit binary format\n */\nfunction my_inet_pton($ip)\n{\n\tif(function_exists('inet_pton'))\n\t{\n\t\treturn @inet_pton($ip);\n\t}\n\telse\n\t{\n\t\t/**\n\t\t * Replace inet_pton()\n\t\t *\n\t\t * @category    PHP\n\t\t * @package     PHP_Compat\n\t\t * @license     LGPL - http://www.gnu.org/licenses/lgpl.html\n\t\t * @copyright   2004-2007 Aidan Lister <aidan@php.net>, Arpad Ray <arpad@php.net>\n\t\t * @link        http://php.net/inet_pton\n\t\t * @author      Arpad Ray <arpad@php.net>\n\t\t * @version     $Revision: 269597 $\n\t\t */\n\t\t$r = ip2long($ip);\n\t\tif($r !== false && $r != -1)\n\t\t{\n\t\t\treturn pack('N', $r);\n\t\t}\n\n\t\t$delim_count = substr_count($ip, ':');\n\t\tif($delim_count < 1 || $delim_count > 7)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$r = explode(':', $ip);\n\t\t$rcount = count($r);\n\t\tif(($doub = array_search('', $r, 1)) !== false)\n\t\t{\n\t\t\t$length = (!$doub || $doub == $rcount - 1 ? 2 : 1);\n\t\t\tarray_splice($r, $doub, $length, array_fill(0, 8 + $length - $rcount, 0));\n\t\t}\n\n\t\t$r = array_map('hexdec', $r);\n\t\tarray_unshift($r, 'n*');\n\t\t$r = call_user_func_array('pack', $r);\n\n\t\treturn $r;\n\t}\n}\n\n/**\n * Converts a packed internet address to a human readable representation\n *\n * @param string $ip IP in 32bit or 128bit binary format\n * @return string IP in human readable format\n */\nfunction my_inet_ntop($ip)\n{\n\tif(function_exists('inet_ntop'))\n\t{\n\t\treturn @inet_ntop($ip);\n\t}\n\telse\n\t{\n\t\t/**\n\t\t * Replace inet_ntop()\n\t\t *\n\t\t * @category    PHP\n\t\t * @package     PHP_Compat\n\t\t * @license     LGPL - http://www.gnu.org/licenses/lgpl.html\n\t\t * @copyright   2004-2007 Aidan Lister <aidan@php.net>, Arpad Ray <arpad@php.net>\n\t\t * @link        http://php.net/inet_ntop\n\t\t * @author      Arpad Ray <arpad@php.net>\n\t\t * @version     $Revision: 269597 $\n\t\t */\n\t\tswitch(strlen($ip))\n\t\t{\n\t\t\tcase 4:\n\t\t\t\tlist(,$r) = unpack('N', $ip);\n\t\t\t\treturn long2ip($r);\n\t\t\tcase 16:\n\t\t\t\t$r = substr(chunk_split(bin2hex($ip), 4, ':'), 0, -1);\n\t\t\t\t$r = preg_replace(\n\t\t\t\t\tarray('/(?::?\\b0+\\b:?){2,}/', '/\\b0+([^0])/e'),\n\t\t\t\t\tarray('::', '(int)\"$1\"?\"$1\":\"0$1\"'),\n\t\t\t\t\t$r);\n\t\t\t\treturn $r;\n\t\t}\n\t\treturn false;\n\t}\n}\n\n/**\n * Fetch an binary formatted range for searching IPv4 and IPv6 IP addresses.\n *\n * @param string $ipaddress The IP address to convert to a range\n * @return string|array|bool If a full IP address is provided, the in_addr representation, otherwise an array of the upper & lower extremities of the IP. False on failure\n */\nfunction fetch_ip_range($ipaddress)\n{\n\t// Wildcard\n\tif(strpos($ipaddress, '*') !== false)\n\t{\n\t\tif(strpos($ipaddress, ':') !== false)\n\t\t{\n\t\t\t// IPv6\n\t\t\t$upper = str_replace('*', 'ffff', $ipaddress);\n\t\t\t$lower = str_replace('*', '0', $ipaddress);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// IPv4\n\t\t\t$ip_bits = count(explode('.', $ipaddress));\n\t\t\tif($ip_bits < 4)\n\t\t\t{\n\t\t\t\t// Support for 127.0.*\n\t\t\t\t$replacement = str_repeat('.*', 4-$ip_bits);\n\t\t\t\t$ipaddress = substr_replace($ipaddress, $replacement, strrpos($ipaddress, '*')+1, 0);\n\t\t\t}\n\t\t\t$upper = str_replace('*', '255', $ipaddress);\n\t\t\t$lower = str_replace('*', '0', $ipaddress);\n\t\t}\n\t\t$upper = my_inet_pton($upper);\n\t\t$lower = my_inet_pton($lower);\n\t\tif($upper === false || $lower === false)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\treturn array($lower, $upper);\n\t}\n\t// CIDR notation\n\telseif(strpos($ipaddress, '/') !== false)\n\t{\n\t\t$ipaddress = explode('/', $ipaddress);\n\t\t$ip_address = $ipaddress[0];\n\t\t$ip_range = (int)$ipaddress[1];\n\n\t\tif(empty($ip_address) || empty($ip_range))\n\t\t{\n\t\t\t// Invalid input\n\t\t\treturn false;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ip_address = my_inet_pton($ip_address);\n\n\t\t\tif(!$ip_address)\n\t\t\t{\n\t\t\t\t// Invalid IP address\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Taken from: https://github.com/NewEraCracker/php_work/blob/master/ipRangeCalculate.php\n\t\t * Author: NewEraCracker\n\t\t * License: Public Domain\n\t\t */\n\n\t\t// Pack IP, Set some vars\n\t\t$ip_pack = $ip_address;\n\t\t$ip_pack_size = strlen($ip_pack);\n\t\t$ip_bits_size = $ip_pack_size*8;\n\n\t\t// IP bits (lots of 0's and 1's)\n\t\t$ip_bits = '';\n\t\tfor($i = 0; $i < $ip_pack_size; $i = $i+1)\n\t\t{\n\t\t\t$bit = decbin(ord($ip_pack[$i]));\n\t\t\t$bit = str_pad($bit, 8, '0', STR_PAD_LEFT);\n\t\t\t$ip_bits .= $bit;\n\t\t}\n\n\t\t// Significative bits (from the ip range)\n\t\t$ip_bits = substr($ip_bits, 0, $ip_range);\n\n\t\t// Some calculations\n\t\t$ip_lower_bits = str_pad($ip_bits, $ip_bits_size, '0', STR_PAD_RIGHT);\n\t\t$ip_higher_bits = str_pad($ip_bits, $ip_bits_size, '1', STR_PAD_RIGHT);\n\n\t\t// Lower IP\n\t\t$ip_lower_pack = '';\n\t\tfor($i=0; $i < $ip_bits_size; $i=$i+8)\n\t\t{\n\t\t\t$chr = substr($ip_lower_bits, $i, 8);\n\t\t\t$chr = chr(bindec($chr));\n\t\t\t$ip_lower_pack .= $chr;\n\t\t}\n\n\t\t// Higher IP\n\t\t$ip_higher_pack = '';\n\t\tfor($i=0; $i < $ip_bits_size; $i=$i+8)\n\t\t{\n\t\t\t$chr = substr($ip_higher_bits, $i, 8);\n\t\t\t$chr = chr( bindec($chr) );\n\t\t\t$ip_higher_pack .= $chr;\n\t\t}\n\n\t\treturn array($ip_lower_pack, $ip_higher_pack);\n\t}\n\t// Just on IP address\n\telse\n\t{\n\t\treturn my_inet_pton($ipaddress);\n\t}\n}\n\n/**\n * Time how long it takes for a particular piece of code to run. Place calls above & below the block of code.\n *\n * @return float The time taken\n */\nfunction get_execution_time()\n{\n\tstatic $time_start;\n\n\t$time = microtime(true);\n\n\n\t// Just starting timer, init and return\n\tif(!$time_start)\n\t{\n\t\t$time_start = $time;\n\t\treturn;\n\t}\n\t// Timer has run, return execution time\n\telse\n\t{\n\t\t$total = $time-$time_start;\n\t\tif($total < 0) $total = 0;\n\t\t$time_start = 0;\n\t\treturn $total;\n\t}\n}\n\n/**\n * Processes a checksum list on MyBB files and returns a result set\n *\n * @param string $path The base path\n * @param int $count The count of files\n * @return array The bad files\n */\nfunction verify_files($path=MYBB_ROOT, $count=0)\n{\n\tglobal $mybb, $checksums, $bad_verify_files;\n\n\t// We don't need to check these types of files\n\t$ignore = array(\".\", \"..\", \".svn\", \"config.php\", \"settings.php\", \"Thumb.db\", \"config.default.php\", \"lock\", \"htaccess.txt\", \"htaccess-nginx.txt\", \"logo.gif\", \"logo.png\");\n\t$ignore_ext = array(\"attach\");\n\n\tif(substr($path, -1, 1) == \"/\")\n\t{\n\t\t$path = substr($path, 0, -1);\n\t}\n\n\tif(!is_array($bad_verify_files))\n\t{\n\t\t$bad_verify_files = array();\n\t}\n\n\t// Make sure that we're in a directory and it's not a symbolic link\n\tif(@is_dir($path) && !@is_link($path))\n\t{\n\t\tif($dh = @opendir($path))\n\t\t{\n\t\t\t// Loop through all the files/directories in this directory\n\t\t\twhile(($file = @readdir($dh)) !== false)\n\t\t\t{\n\t\t\t\tif(in_array($file, $ignore) || in_array(get_extension($file), $ignore_ext))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse through the directory tree\n\t\t\t\tif(is_dir($path.\"/\".$file))\n\t\t\t\t{\n\t\t\t\t\tverify_files($path.\"/\".$file, ($count+1));\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// We only need the last part of the path (from the MyBB directory to the file. i.e. inc/functions.php)\n\t\t\t\t$file_path = \".\".str_replace(substr(MYBB_ROOT, 0, -1), \"\", $path).\"/\".$file;\n\n\t\t\t\t// Does this file even exist in our official list? Perhaps it's a plugin\n\t\t\t\tif(array_key_exists($file_path, $checksums))\n\t\t\t\t{\n\t\t\t\t\t$filename = $path.\"/\".$file;\n\t\t\t\t\t$handle = fopen($filename, \"rb\");\n\t\t\t\t\t$contents = '';\n\t\t\t\t\twhile(!feof($handle))\n\t\t\t\t\t{\n\t\t\t\t\t\t$contents .= fread($handle, 8192);\n\t\t\t\t\t}\n\t\t\t\t\tfclose($handle);\n\n\t\t\t\t\t$md5 = md5($contents);\n\n\t\t\t\t\t// Does it match any of our hashes (unix/windows new lines taken into consideration with the hashes)\n\t\t\t\t\tif(!in_array($md5, $checksums[$file_path]))\n\t\t\t\t\t{\n\t\t\t\t\t\t$bad_verify_files[] = array(\"status\" => \"changed\", \"path\" => $file_path);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tunset($checksums[$file_path]);\n\t\t\t}\n\t\t   @closedir($dh);\n\t\t}\n\t}\n\n\tif($count == 0)\n\t{\n\t\tif(!empty($checksums))\n\t\t{\n\t\t\tforeach($checksums as $file_path => $hashes)\n\t\t\t{\n\t\t\t\tif(in_array(basename($file_path), $ignore))\n\t\t\t\t{\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$bad_verify_files[] = array(\"status\" => \"missing\", \"path\" => $file_path);\n\t\t\t}\n\t\t}\n\t}\n\n\t// uh oh\n\tif($count == 0)\n\t{\n\t\treturn $bad_verify_files;\n\t}\n}\n\n/**\n * Returns a signed value equal to an integer\n *\n * @param int $int The integer\n * @return string The signed equivalent\n */\nfunction signed($int)\n{\n\tif($int < 0)\n\t{\n\t\treturn \"$int\";\n\t}\n\telse\n\t{\n\t\treturn \"+$int\";\n\t}\n}\n\n/**\n * Returns a securely generated seed\n *\n * @return string A secure binary seed\n */\nfunction secure_binary_seed_rng($bytes)\n{\n\t$output = null;\n\n\tif(version_compare(PHP_VERSION, '7.0', '>='))\n\t{\n\t\ttry\n\t\t{\n\t\t\t$output = random_bytes($bytes);\n\t\t} catch (Exception $e) {\n\t\t}\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(@is_readable('/dev/urandom') && ($handle = @fopen('/dev/urandom', 'rb')))\n\t\t{\n\t\t\t$output = @fread($handle, $bytes);\n\t\t\t@fclose($handle);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(function_exists('mcrypt_create_iv'))\n\t\t{\n\t\t\tif (DIRECTORY_SEPARATOR == '/')\n\t\t\t{\n\t\t\t\t$source = MCRYPT_DEV_URANDOM;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$source = MCRYPT_RAND;\n\t\t\t}\n\n\t\t\t$output = @mcrypt_create_iv($bytes, $source);\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(function_exists('openssl_random_pseudo_bytes'))\n\t\t{\n\t\t\t// PHP <5.3.4 had a bug which makes that function unusable on Windows\n\t\t\tif ((DIRECTORY_SEPARATOR == '/') || version_compare(PHP_VERSION, '5.3.4', '>='))\n\t\t\t{\n\t\t\t\t$output = openssl_random_pseudo_bytes($bytes, $crypto_strong);\n\t\t\t\tif ($crypto_strong == false)\n\t\t\t\t{\n\t\t\t\t\t$output = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\tif(class_exists('COM'))\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t$CAPI_Util = new COM('CAPICOM.Utilities.1');\n\t\t\t\tif(is_callable(array($CAPI_Util, 'GetRandom')))\n\t\t\t\t{\n\t\t\t\t\t$output = $CAPI_Util->GetRandom($bytes, 0);\n\t\t\t\t}\n\t\t\t} catch (Exception $e) {\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n\n\tif(strlen($output) < $bytes)\n\t{\n\t\t// Close to what PHP basically uses internally to seed, but not quite.\n\t\t$unique_state = microtime().@getmypid();\n\n\t\t$rounds = ceil($bytes / 16);\n\n\t\tfor($i = 0; $i < $rounds; $i++)\n\t\t{\n\t\t\t$unique_state = md5(microtime().$unique_state);\n\t\t\t$output .= md5($unique_state);\n\t\t}\n\n\t\t$output = substr($output, 0, ($bytes * 2));\n\n\t\t$output = pack('H*', $output);\n\n\t\treturn $output;\n\t}\n\telse\n\t{\n\t\treturn $output;\n\t}\n}\n\n/**\n * Returns a securely generated seed integer\n *\n * @return int An integer equivalent of a secure hexadecimal seed\n */\nfunction secure_seed_rng()\n{\n\t$bytes = PHP_INT_SIZE;\n\n\tdo\n\t{\n\n\t\t$output = secure_binary_seed_rng($bytes);\n\n\t\t// convert binary data to a decimal number\n\t\tif ($bytes == 4)\n\t\t{\n\t\t\t$elements = unpack('i', $output);\n\t\t\t$output = abs($elements[1]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$elements = unpack('N2', $output);\n\t\t\t$output = abs($elements[1] << 32 | $elements[2]);\n\t\t}\n\n\t} while($output > PHP_INT_MAX);\n\n\treturn $output;\n}\n\n/**\n * Generates a cryptographically secure random number.\n *\n * @param int $min Optional lowest value to be returned (default: 0)\n * @param int $max Optional highest value to be returned (default: PHP_INT_MAX)\n */\nfunction my_rand($min=0, $max=PHP_INT_MAX)\n{\n\t// backward compatibility\n\tif($min === null || $max === null || $max < $min)\n\t{\n\t\t$min = 0;\n\t\t$max = PHP_INT_MAX;\n\t}\n\n\tif(version_compare(PHP_VERSION, '7.0', '>='))\n\t{\n\t\ttry\n\t\t{\n\t\t\t$result = random_int($min, $max);\n\t\t} catch (Exception $e) {\n\t\t}\n\n\t\tif(isset($result))\n\t\t{\n\t\t\treturn $result;\n\t\t}\n\t}\n\n\t$seed = secure_seed_rng();\n\n\t$distance = $max - $min;\n\treturn $min + floor($distance * ($seed / PHP_INT_MAX) );\n}\n\n/**\n * More robust version of PHP's trim() function. It includes a list of UTF-8 blank characters\n * from http://kb.mozillazine.org/Network.IDN.blacklist_chars\n *\n * @param string $string The string to trim from\n * @param string $charlist Optional. The stripped characters can also be specified using the charlist parameter\n * @return string The trimmed string\n */\nfunction trim_blank_chrs($string, $charlist=\"\")\n{\n\t$hex_chrs = array(\n\t\t0x09 => 1, // \\x{0009}\n\t\t0x0A => 1, // \\x{000A}\n\t\t0x0B => 1, // \\x{000B}\n\t\t0x0D => 1, // \\x{000D}\n\t\t0x20 => 1, // \\x{0020}\n\t\t0xC2 => array(0x81 => 1, 0x8D => 1, 0x90 => 1, 0x9D => 1, 0xA0 => 1, 0xAD => 1), // \\x{0081}, \\x{008D}, \\x{0090}, \\x{009D}, \\x{00A0}, \\x{00AD}\n\t\t0xCC => array(0xB7 => 1, 0xB8 => 1), // \\x{0337}, \\x{0338}\n\t\t0xE1 => array(0x85 => array(0x9F => 1, 0xA0 => 1), 0x9A => array(0x80 => 1), 0xA0 => array(0x8E => 1)), // \\x{115F}, \\x{1160}, \\x{1680}, \\x{180E}\n\t\t0xE2 => array(0x80 => array(0x80 => 1, 0x81 => 1, 0x82 => 1, 0x83 => 1, 0x84 => 1, 0x85 => 1, 0x86 => 1, 0x87 => 1, 0x88 => 1, 0x89 => 1, 0x8A => 1, 0x8B => 1, 0x8C => 1, 0x8D => 1, 0x8E => 1, 0x8F => 1, // \\x{2000} - \\x{200F}\n\t\t\t0xA8 => 1, 0xA9 => 1, 0xAA => 1, 0xAB => 1, 0xAC => 1, 0xAD => 1, 0xAE => 1, 0xAF => 1), // \\x{2028} - \\x{202F}\n\t\t\t0x81 => array(0x9F => 1)), // \\x{205F}\n\t\t0xE3 => array(0x80 => array(0x80 => 1), // \\x{3000}\n\t\t\t0x85 => array(0xA4 => 1)), // \\x{3164}\n\t\t0xEF => array(0xBB => array(0xBF => 1), // \\x{FEFF}\n\t\t\t0xBE => array(0xA0 => 1), // \\x{FFA0}\n\t\t\t0xBF => array(0xB9 => 1, 0xBA => 1, 0xBB => 1)), // \\x{FFF9} - \\x{FFFB}\n\t);\n\n\t$hex_chrs_rev = array(\n\t\t0x09 => 1, // \\x{0009}\n\t\t0x0A => 1, // \\x{000A}\n\t\t0x0B => 1, // \\x{000B}\n\t\t0x0D => 1, // \\x{000D}\n\t\t0x20 => 1, // \\x{0020}\n\t\t0x81 => array(0xC2 => 1, 0x80 => array(0xE2 => 1)), // \\x{0081}, \\x{2001}\n\t\t0x8D => array(0xC2 => 1, 0x80 => array(0xE2 => 1)), // \\x{008D}, \\x{200D}\n\t\t0x90 => array(0xC2 => 1), // \\x{0090}\n\t\t0x9D => array(0xC2 => 1), // \\x{009D}\n\t\t0xA0 => array(0xC2 => 1, 0x85 => array(0xE1 => 1), 0x81 => array(0xE2 => 1), 0xBE => array(0xEF => 1)), // \\x{00A0}, \\x{1160}, \\x{2060}, \\x{FFA0}\n\t\t0xAD => array(0xC2 => 1, 0x80 => array(0xE2 => 1)), // \\x{00AD}, \\x{202D}\n\t\t0xB8 => array(0xCC => 1), // \\x{0338}\n\t\t0xB7 => array(0xCC => 1), // \\x{0337}\n\t\t0x9F => array(0x85 => array(0xE1 => 1), 0x81 => array(0xE2 => 1)), // \\x{115F}, \\x{205F}\n\t\t0x80 => array(0x9A => array(0xE1 => 1), 0x80 => array(0xE2 => 1, 0xE3 => 1)), // \\x{1680}, \\x{2000}, \\x{3000}\n\t\t0x8E => array(0xA0 => array(0xE1 => 1), 0x80 => array(0xE2 => 1)), // \\x{180E}, \\x{200E}\n\t\t0x82 => array(0x80 => array(0xE2 => 1)), // \\x{2002}\n\t\t0x83 => array(0x80 => array(0xE2 => 1)), // \\x{2003}\n\t\t0x84 => array(0x80 => array(0xE2 => 1)), // \\x{2004}\n\t\t0x85 => array(0x80 => array(0xE2 => 1)), // \\x{2005}\n\t\t0x86 => array(0x80 => array(0xE2 => 1)), // \\x{2006}\n\t\t0x87 => array(0x80 => array(0xE2 => 1)), // \\x{2007}\n\t\t0x88 => array(0x80 => array(0xE2 => 1)), // \\x{2008}\n\t\t0x89 => array(0x80 => array(0xE2 => 1)), // \\x{2009}\n\t\t0x8A => array(0x80 => array(0xE2 => 1)), // \\x{200A}\n\t\t0x8B => array(0x80 => array(0xE2 => 1)), // \\x{200B}\n\t\t0x8C => array(0x80 => array(0xE2 => 1)), // \\x{200C}\n\t\t0x8F => array(0x80 => array(0xE2 => 1)), // \\x{200F}\n\t\t0xA8 => array(0x80 => array(0xE2 => 1)), // \\x{2028}\n\t\t0xA9 => array(0x80 => array(0xE2 => 1)), // \\x{2029}\n\t\t0xAA => array(0x80 => array(0xE2 => 1)), // \\x{202A}\n\t\t0xAB => array(0x80 => array(0xE2 => 1)), // \\x{202B}\n\t\t0xAC => array(0x80 => array(0xE2 => 1)), // \\x{202C}\n\t\t0xAE => array(0x80 => array(0xE2 => 1)), // \\x{202E}\n\t\t0xAF => array(0x80 => array(0xE2 => 1)), // \\x{202F}\n\t\t0xA4 => array(0x85 => array(0xE3 => 1)), // \\x{3164}\n\t\t0xBF => array(0xBB => array(0xEF => 1)), // \\x{FEFF}\n\t\t0xB9 => array(0xBF => array(0xEF => 1)), // \\x{FFF9}\n\t\t0xBA => array(0xBF => array(0xEF => 1)), // \\x{FFFA}\n\t\t0xBB => array(0xBF => array(0xEF => 1)), // \\x{FFFB}\n\t);\n\n\t// Start from the beginning and work our way in\n\tdo\n\t{\n\t\t// Check to see if we have matched a first character in our utf-8 array\n\t\t$offset = match_sequence($string, $hex_chrs);\n\t\tif(!$offset)\n\t\t{\n\t\t\t// If not, then we must have a \"good\" character and we don't need to do anymore processing\n\t\t\tbreak;\n\t\t}\n\t\t$string = substr($string, $offset);\n\t}\n\twhile(++$i);\n\n\t// Start from the end and work our way in\n\t$string = strrev($string);\n\tdo\n\t{\n\t\t// Check to see if we have matched a first character in our utf-8 array\n\t\t$offset = match_sequence($string, $hex_chrs_rev);\n\t\tif(!$offset)\n\t\t{\n\t\t\t// If not, then we must have a \"good\" character and we don't need to do anymore processing\n\t\t\tbreak;\n\t\t}\n\t\t$string = substr($string, $offset);\n\t}\n\twhile(++$i);\n\t$string = strrev($string);\n\n\tif($charlist)\n\t{\n\t\t$string = trim($string, $charlist);\n\t}\n\telse\n\t{\n\t\t$string = trim($string);\n\t}\n\n\treturn $string;\n}\n\n/**\n * Match a sequence\n *\n * @param string $string The string to match from\n * @param array $array The array to match from\n * @param int $i Number in the string\n * @param int $n Number of matches\n * @return int The number matched\n */\nfunction match_sequence($string, $array, $i=0, $n=0)\n{\n\tif($string === \"\")\n\t{\n\t\treturn 0;\n\t}\n\n\t$ord = ord($string[$i]);\n\tif(array_key_exists($ord, $array))\n\t{\n\t\t$level = $array[$ord];\n\t\t++$n;\n\t\tif(is_array($level))\n\t\t{\n\t\t\t++$i;\n\t\t\treturn match_sequence($string, $level, $i, $n);\n\t\t}\n\t\treturn $n;\n\t}\n\n\treturn 0;\n}\n\n/**\n * Obtain the version of GD installed.\n *\n * @return float Version of GD\n */\nfunction gd_version()\n{\n\tstatic $gd_version;\n\n\tif($gd_version)\n\t{\n\t\treturn $gd_version;\n\t}\n\tif(!extension_loaded('gd'))\n\t{\n\t\treturn;\n\t}\n\n\tif(function_exists(\"gd_info\"))\n\t{\n\t\t$gd_info = gd_info();\n\t\tpreg_match('/\\d/', $gd_info['GD Version'], $gd);\n\t\t$gd_version = $gd[0];\n\t}\n\telse\n\t{\n\t\tob_start();\n\t\tphpinfo(8);\n\t\t$info = ob_get_contents();\n\t\tob_end_clean();\n\t\t$info = stristr($info, 'gd version');\n\t\tpreg_match('/\\d/', $info, $gd);\n\t\t$gd_version = $gd[0];\n\t}\n\n\treturn $gd_version;\n}\n\n/*\n * Validates an UTF-8 string.\n *\n * @param string $input The string to be checked\n * @param boolean $allow_mb4 Allow 4 byte UTF-8 characters?\n * @param boolean $return Return the cleaned string?\n * @return string|boolean Cleaned string or boolean\n */\nfunction validate_utf8_string($input, $allow_mb4=true, $return=true)\n{\n\t// Valid UTF-8 sequence?\n\tif(!preg_match('##u', $input))\n\t{\n\t\t$string = '';\n\t\t$len = strlen($input);\n\t\tfor($i = 0; $i < $len; $i++)\n\t\t{\n\t\t\t$c = ord($input[$i]);\n\t\t\tif($c > 128)\n\t\t\t{\n\t\t\t\tif($c > 247 || $c <= 191)\n\t\t\t\t{\n\t\t\t\t\tif($return)\n\t\t\t\t\t{\n\t\t\t\t\t\t$string .= '?';\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telseif($c > 239)\n\t\t\t\t{\n\t\t\t\t\t$bytes = 4;\n\t\t\t\t}\n\t\t\t\telseif($c > 223)\n\t\t\t\t{\n\t\t\t\t\t$bytes = 3;\n\t\t\t\t}\n\t\t\t\telseif($c > 191)\n\t\t\t\t{\n\t\t\t\t\t$bytes = 2;\n\t\t\t\t}\n\t\t\t\tif(($i + $bytes) > $len)\n\t\t\t\t{\n\t\t\t\t\tif($return)\n\t\t\t\t\t{\n\t\t\t\t\t\t$string .= '?';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$valid = true;\n\t\t\t\t$multibytes = $input[$i];\n\t\t\t\twhile($bytes > 1)\n\t\t\t\t{\n\t\t\t\t\t$i++;\n\t\t\t\t\t$b = ord($input[$i]);\n\t\t\t\t\tif($b < 128 || $b > 191)\n\t\t\t\t\t{\n\t\t\t\t\t\tif($return)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t$valid = false;\n\t\t\t\t\t\t\t$string .= '?';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t$multibytes .= $input[$i];\n\t\t\t\t\t}\n\t\t\t\t\t$bytes--;\n\t\t\t\t}\n\t\t\t\tif($valid)\n\t\t\t\t{\n\t\t\t\t\t$string .= $multibytes;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$string .= $input[$i];\n\t\t\t}\n\t\t}\n\t\t$input = $string;\n\t}\n\tif($return)\n\t{\n\t\tif($allow_mb4)\n\t\t{\n\t\t\treturn $input;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn preg_replace(\"#[^\\\\x00-\\\\x7F][\\\\x80-\\\\xBF]{3,}#\", '?', $input);\n\t\t}\n\t}\n\telse\n\t{\n\t\tif($allow_mb4)\n\t\t{\n\t\t\treturn true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn !preg_match(\"#[^\\\\x00-\\\\x7F][\\\\x80-\\\\xBF]{3,}#\", $input);\n\t\t}\n\t}\n}\n\n/**\n * Send a Private Message to a user.\n *\n * @param array $pm Array containing: 'subject', 'message', 'touid' and 'receivepms' (the latter should reflect the value found in the users table: receivepms and receivefrombuddy)\n * @param int $fromid Sender UID (0 if you want to use $mybb->user['uid'] or -1 to use MyBB Engine)\n * @param bool $admin_override Whether or not do override user defined options for receiving PMs\n * @return bool True if PM sent\n */\nfunction send_pm($pm, $fromid = 0, $admin_override=false)\n{\n\tglobal $lang, $mybb, $db, $session;\n\n\tif($mybb->settings['enablepms'] == 0)\n\t{\n\t\treturn false;\n\t}\n\n\tif(!is_array($pm))\n\t{\n\t\treturn false;\n\t}\n\n\tif(isset($pm['language']))\n\t{\n\t\tif($pm['language'] != $mybb->user['language'] && $lang->language_exists($pm['language']))\n\t\t{\n\t\t\t// Load user language\n\t\t\t$lang->set_language($pm['language']);\n\t\t\t$lang->load($pm['language_file']);\n\n\t\t\t$revert = true;\n\t\t}\n\n\t\tforeach(array('subject', 'message') as $key)\n\t\t{\n\t\t\tif(is_array($pm[$key]))\n\t\t\t{\n\t\t\t\t$lang_string = $lang->{$pm[$key][0]};\n\t\t\t\t$num_args = count($pm[$key]);\n\n\t\t\t\tfor($i = 1; $i < $num_args; $i++)\n\t\t\t\t{\n\t\t\t\t\t$lang_string = str_replace('{'.$i.'}', $pm[$key][$i], $lang_string);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$lang_string = $lang->{$pm[$key]};\n\t\t\t}\n\n\t\t\t$pm[$key] = $lang_string;\n\t\t}\n\n\t\tif(isset($revert))\n\t\t{\n\t\t\t// Revert language\n\t\t\t$lang->set_language($mybb->user['language']);\n\t\t\t$lang->load($pm['language_file']);\n\t\t}\n\t}\n\n\tif(!$pm['subject'] ||!$pm['message'] || !$pm['touid'] || (!$pm['receivepms'] && !$admin_override))\n\t{\n\t\treturn false;\n\t}\n\n\trequire_once MYBB_ROOT.\"inc/datahandlers/pm.php\";\n\n\t$pmhandler = new PMDataHandler();\n\n\t$subject = $pm['subject'];\n\t$message = $pm['message'];\n\t$toid = $pm['touid'];\n\n\t// Our recipients\n\tif(is_array($toid))\n\t{\n\t\t$recipients_to = $toid;\n\t}\n\telse\n\t{\n\t\t$recipients_to = array($toid);\n\t}\n\n\t$recipients_bcc = array();\n\n\t// Determine user ID\n\tif((int)$fromid == 0)\n\t{\n\t\t$fromid = (int)$mybb->user['uid'];\n\t}\n\telseif((int)$fromid < 0)\n\t{\n\t\t$fromid = 0;\n\t}\n\n\t// Build our final PM array\n\t$pm = array(\n\t\t\"subject\" => $subject,\n\t\t\"message\" => $message,\n\t\t\"icon\" => -1,\n\t\t\"fromid\" => $fromid,\n\t\t\"toid\" => $recipients_to,\n\t\t\"bccid\" => $recipients_bcc,\n\t\t\"do\" => '',\n\t\t\"pmid\" => ''\n\t);\n\n\tif(isset($session))\n\t{\n\t\t$pm['ipaddress'] = $session->packedip;\n\t}\n\n\t$pm['options'] = array(\n\t\t\"signature\" => 0,\n\t\t\"disablesmilies\" => 0,\n\t\t\"savecopy\" => 0,\n\t\t\"readreceipt\" => 0\n\t);\n\n\t$pm['saveasdraft'] = 0;\n\n\t// Admin override\n\t$pmhandler->admin_override = (int)$admin_override;\n\n\t$pmhandler->set_data($pm);\n\n\tif($pmhandler->validate_pm())\n\t{\n\t\t$pmhandler->insert_pm();\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Log a user spam block from StopForumSpam (or other spam service providers...)\n *\n * @param string $username The username that the user was using.\n * @param string $email    The email address the user was using.\n * @param string $ip_address The IP addres of the user.\n * @param array  $data     An array of extra data to go with the block (eg: confidence rating).\n * @return bool Whether the action was logged successfully.\n */\nfunction log_spam_block($username = '', $email = '', $ip_address = '', $data = array())\n{\n\tglobal $db, $session;\n\n\tif(!is_array($data))\n\t{\n\t\t$data = array($data);\n\t}\n\n\tif(!$ip_address)\n\t{\n\t\t$ip_address = get_ip();\n\t}\n\n\t$ip_address = my_inet_pton($ip_address);\n\n\t$insert_array = array(\n\t\t'username'  => $db->escape_string($username),\n\t\t'email'     => $db->escape_string($email),\n\t\t'ipaddress' => $db->escape_binary($ip_address),\n\t\t'dateline'  => (int)TIME_NOW,\n\t\t'data'      => $db->escape_string(@my_serialize($data)),\n\t);\n\n\treturn (bool)$db->insert_query('spamlog', $insert_array);\n}\n\n/**\n * Copy a file to the CDN.\n *\n * @param string $file_path     The path to the file to upload to the CDN.\n *\n * @param string $uploaded_path The path the file was uploaded to, reference parameter for when this may be needed.\n *\n * @return bool Whether the file was copied successfully.\n */\nfunction copy_file_to_cdn($file_path = '', &$uploaded_path = null)\n{\n\tglobal $mybb, $plugins;\n\n\t$success = false;\n\n\t$file_path = (string)$file_path;\n\n\t$real_file_path = realpath($file_path);\n\n\t$file_dir_path = dirname($real_file_path);\n\t$file_dir_path = str_replace(MYBB_ROOT, '', $file_dir_path);\n\t$file_dir_path = ltrim($file_dir_path, './\\\\');\n\n\t$file_name = basename($real_file_path);\n\n\tif(file_exists($file_path))\n\t{\n\t\tif($mybb->settings['usecdn'] && !empty($mybb->settings['cdnpath']))\n\t\t{\n\t\t\t$cdn_path = rtrim($mybb->settings['cdnpath'], '/\\\\');\n\n\t\t\tif(substr($file_dir_path, 0, my_strlen(MYBB_ROOT)) == MYBB_ROOT)\n\t\t\t{\n\t\t\t\t$file_dir_path = str_replace(MYBB_ROOT, '', $file_dir_path);\n\t\t\t}\n\n\t\t\t$cdn_upload_path = $cdn_path . DIRECTORY_SEPARATOR . $file_dir_path;\n\n\t\t\tif(!($dir_exists = is_dir($cdn_upload_path)))\n\t\t\t{\n\t\t\t\t$dir_exists = @mkdir($cdn_upload_path, 0777, true);\n\t\t\t}\n\n\t\t\tif($dir_exists)\n\t\t\t{\n\t\t\t\tif(($cdn_upload_path = realpath($cdn_upload_path)) !== false)\n\t\t\t\t{\n\t\t\t\t\t$success = @copy($file_path, $cdn_upload_path.DIRECTORY_SEPARATOR.$file_name);\n\n\t\t\t\t\tif($success)\n\t\t\t\t\t{\n\t\t\t\t\t\t$uploaded_path = $cdn_upload_path;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif(is_object($plugins))\n\t\t{\n\t\t\t$hook_args = array(\n\t\t\t\t'file_path' => &$file_path,\n\t\t\t\t'real_file_path' => &$real_file_path,\n\t\t\t\t'file_name' => &$file_name,\n\t\t\t\t'uploaded_path' => &$uploaded_path,\n\t\t\t\t'success' => &$success,\n\t\t\t);\n\n\t\t\t$plugins->run_hooks('copy_file_to_cdn_end', $hook_args);\n\t\t}\n\t}\n\n\treturn $success;\n}\n\n/**\n * Validate an url\n *\n * @param string $url The url to validate.\n * @param bool $relative_path Whether or not the url could be a relative path.\n *\n * @return bool Whether this is a valid url.\n */\nfunction my_validate_url($url, $relative_path=false)\n{\n\tif($relative_path && my_substr($url, 0, 1) == '/' || preg_match('_^(?:(?:https?|ftp)://)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}0-9]-*)*[a-z\\x{00a1}-\\x{ffff}0-9]+)*(?:\\.(?:[a-z\\x{00a1}-\\x{ffff}]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$_iuS', $url))\n\t{\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Strip html tags from string, also removes <script> and <style> contents.\n * \n * @param  string $string         String to stripe\n * @param  string $allowable_tags Allowed html tags\n * \n * @return string                 Striped string\n */\nfunction my_strip_tags($string, $allowable_tags = '')\n{\n\t$pattern = array(\n\t\t'@(&lt;)style[^(&gt;)]*?(&gt;).*?(&lt;)/style(&gt;)@siu',\n\t\t'@(&lt;)script[^(&gt;)]*?.*?(&lt;)/script(&gt;)@siu',\n\t\t'@<style[^>]*?>.*?</style>@siu',\n\t\t'@<script[^>]*?.*?</script>@siu',\n\t);\n\t$string = preg_replace($pattern, '', $string);\n\treturn strip_tags($string, $allowable_tags);\n}\n"], "filenames": ["admin/modules/config/smilies.php", "inc/class_parser.php", "inc/functions.php"], "buggy_code_start_loc": [412, 320, 6780], "buggy_code_end_loc": [736, 324, 6988], "fixing_code_start_loc": [412, 320, 6781], "fixing_code_end_loc": [738, 324, 7090], "type": "CWE-918", "message": "MyBB before 1.8.11 allows remote attackers to bypass an SSRF protection mechanism.", "other": {"cve": {"id": "CVE-2017-7566", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-06T16:59:00.157", "lastModified": "2017-04-13T13:39:46.080", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MyBB before 1.8.11 allows remote attackers to bypass an SSRF protection mechanism."}, {"lang": "es", "value": "MyBB en versiones anteriores a 1.8.11 permite a atacantes remotos evitar un mecanismo de protecci\u00f3n SSRF."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mybb:mybb:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.8.10", "matchCriteriaId": "EA5913D3-77D8-4093-9225-0B1BDE2A9B5B"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/97480", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://blog.mybb.com/2017/04/04/mybb-1-8-11-merge-system-1-8-11-release/", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/mybb/mybb/commit/f5de8fc2aad11e0d2583f585535ccfa2b46325db#diff-7fe6e55397c77ab9a0f5d57bc4cbe5b9R6781", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20170407-0_MyBB_SSRF_vulnerability_v10.txt", "source": "cve@mitre.org", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mybb/mybb/commit/f5de8fc2aad11e0d2583f585535ccfa2b46325db#diff-7fe6e55397c77ab9a0f5d57bc4cbe5b9R6781"}}