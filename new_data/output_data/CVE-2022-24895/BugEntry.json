{"buggy_code": ["<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"security.authentication.trust_resolver.anonymous_class\">null</parameter>\n        <parameter key=\"security.authentication.trust_resolver.rememberme_class\">null</parameter>\n        <parameter key=\"security.role_hierarchy.roles\" type=\"collection\" />\n    </parameters>\n\n    <services>\n        <defaults public=\"false\" />\n\n        <service id=\"security.authorization_checker\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationChecker\" public=\"true\">\n            <argument type=\"service\" id=\"security.token_storage\" />\n            <argument type=\"service\" id=\"security.authentication.manager\" />\n            <argument type=\"service\" id=\"security.access.decision_manager\" />\n            <argument>%security.access.always_authenticate_before_granting%</argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface\" alias=\"security.authorization_checker\" />\n\n        <service id=\"security.token_storage\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\UsageTrackingTokenStorage\" public=\"true\">\n            <tag name=\"kernel.reset\" method=\"disableUsageTracking\" />\n            <tag name=\"kernel.reset\" method=\"setToken\" />\n            <argument type=\"service\" id=\"security.untracked_token_storage\" />\n            <argument type=\"service_locator\">\n                <argument key=\"session\" type=\"service\" id=\"session\" />\n            </argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface\" alias=\"security.token_storage\" />\n\n        <service id=\"security.untracked_token_storage\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorage\" />\n\n        <service id=\"security.helper\" class=\"Symfony\\Component\\Security\\Core\\Security\">\n            <argument type=\"service_locator\">\n                <argument key=\"security.token_storage\" type=\"service\" id=\"security.token_storage\" />\n                <argument key=\"security.authorization_checker\" type=\"service\" id=\"security.authorization_checker\" />\n            </argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Security\" alias=\"security.helper\" />\n\n        <service id=\"security.user_value_resolver\" class=\"Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver\">\n            <argument type=\"service\" id=\"security.token_storage\" />\n            <tag name=\"controller.argument_value_resolver\" priority=\"40\" />\n        </service>\n\n        <!-- Authentication related services -->\n        <service id=\"security.authentication.manager\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager\">\n            <argument /> <!-- providers -->\n            <argument>%security.authentication.manager.erase_credentials%</argument>\n            <call method=\"setEventDispatcher\">\n                <argument type=\"service\" id=\"event_dispatcher\" />\n            </call>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationManagerInterface\" alias=\"security.authentication.manager\" />\n\n        <service id=\"security.authentication.trust_resolver\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver\">\n            <argument>%security.authentication.trust_resolver.anonymous_class%</argument>\n            <argument>%security.authentication.trust_resolver.rememberme_class%</argument>\n        </service>\n\n        <service id=\"security.authentication.session_strategy\" class=\"Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy\">\n            <argument>%security.authentication.session_strategy.strategy%</argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategyInterface\" alias=\"security.authentication.session_strategy\" />\n\n        <service id=\"security.authentication.session_strategy_noop\" class=\"Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy\" public=\"false\">\n            <argument>none</argument>\n        </service>\n\n        <service id=\"security.encoder_factory.generic\" class=\"Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory\">\n            <argument type=\"collection\" />\n        </service>\n\n        <service id=\"security.encoder_factory\" alias=\"security.encoder_factory.generic\" />\n        <service id=\"Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface\" alias=\"security.encoder_factory\" />\n\n        <service id=\"security.user_password_encoder.generic\" class=\"Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoder\">\n            <argument type=\"service\" id=\"security.encoder_factory\"></argument>\n        </service>\n\n        <service id=\"security.password_encoder\" alias=\"security.user_password_encoder.generic\" public=\"true\" />\n        <service id=\"Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface\" alias=\"security.password_encoder\" />\n\n        <service id=\"security.user_checker\" class=\"Symfony\\Component\\Security\\Core\\User\\UserChecker\" />\n\n        <service id=\"security.expression_language\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\ExpressionLanguage\">\n            <argument type=\"service\" id=\"cache.security_expression_language\" on-invalid=\"null\" />\n        </service>\n\n        <service id=\"security.authentication_utils\" class=\"Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils\" public=\"true\">\n            <argument type=\"service\" id=\"request_stack\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils\" alias=\"security.authentication_utils\" />\n\n        <!-- Authorization related services -->\n        <service id=\"security.access.decision_manager\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager\">\n            <argument type=\"collection\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManagerInterface\" alias=\"security.access.decision_manager\" />\n\n        <service id=\"security.role_hierarchy\" class=\"Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy\">\n            <argument>%security.role_hierarchy.roles%</argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Role\\RoleHierarchyInterface\" alias=\"security.role_hierarchy\" />\n\n        <!-- Security Voters -->\n        <service id=\"security.access.simple_role_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter\">\n            <tag name=\"security.voter\" priority=\"245\" />\n        </service>\n\n        <service id=\"security.access.authenticated_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter\">\n            <argument type=\"service\" id=\"security.authentication.trust_resolver\" />\n            <tag name=\"security.voter\" priority=\"250\" />\n        </service>\n\n        <service id=\"security.access.role_hierarchy_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter\">\n            <argument type=\"service\" id=\"security.role_hierarchy\" />\n            <tag name=\"security.voter\" priority=\"245\" />\n        </service>\n\n        <service id=\"security.access.expression_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\ExpressionVoter\">\n            <argument type=\"service\" id=\"security.expression_language\" />\n            <argument type=\"service\" id=\"security.authentication.trust_resolver\" />\n            <argument type=\"service\" id=\"security.authorization_checker\" />\n            <argument type=\"service\" id=\"security.role_hierarchy\" on-invalid=\"null\" />\n            <tag name=\"security.voter\" priority=\"245\" />\n        </service>\n\n\n        <!-- Firewall related services -->\n        <service id=\"security.firewall\" class=\"Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener\">\n            <tag name=\"kernel.event_subscriber\" />\n            <argument type=\"service\" id=\"security.firewall.map\" />\n            <argument type=\"service\" id=\"event_dispatcher\" />\n            <argument type=\"service\" id=\"security.logout_url_generator\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\Firewall\" alias=\"security.firewall\" />\n\n        <service id=\"security.firewall.map\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap\">\n            <argument /> <!-- Firewall context locator -->\n            <argument /> <!-- Request matchers -->\n        </service>\n\n        <service id=\"security.firewall.context\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext\" abstract=\"true\">\n            <argument type=\"collection\" />\n            <argument type=\"service\" id=\"security.exception_listener\" />\n            <argument />  <!-- LogoutListener -->\n            <argument />  <!-- FirewallConfig -->\n        </service>\n\n        <service id=\"security.firewall.lazy_context\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\LazyFirewallContext\" abstract=\"true\">\n            <argument type=\"collection\" />\n            <argument type=\"service\" id=\"security.exception_listener\" />\n            <argument />  <!-- LogoutListener -->\n            <argument />  <!-- FirewallConfig -->\n            <argument type=\"service\" id=\"security.untracked_token_storage\" />\n        </service>\n\n        <service id=\"security.firewall.config\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\FirewallConfig\" abstract=\"true\">\n            <argument />                   <!-- name -->\n            <argument />                   <!-- user_checker -->\n            <argument />                   <!-- request_matcher -->\n            <argument>false</argument>     <!-- security enabled -->\n            <argument>false</argument>     <!-- stateless -->\n            <argument />                   <!-- provider -->\n            <argument />                   <!-- context -->\n            <argument />                   <!-- entry_point -->\n            <argument />                   <!-- access_denied_handler -->\n            <argument />                   <!-- access_denied_url -->\n            <argument type=\"collection\" /> <!-- listeners -->\n            <argument>null</argument>      <!-- switch_user -->\n        </service>\n\n        <service id=\"security.logout_url_generator\" class=\"Symfony\\Component\\Security\\Http\\Logout\\LogoutUrlGenerator\">\n            <argument type=\"service\" id=\"request_stack\" on-invalid=\"null\" />\n            <argument type=\"service\" id=\"router\" on-invalid=\"null\" />\n            <argument type=\"service\" id=\"security.token_storage\" />\n        </service>\n\n        <!-- Provisioning -->\n        <service id=\"security.user.provider.missing\" class=\"Symfony\\Component\\Security\\Core\\User\\MissingUserProvider\" abstract=\"true\">\n            <argument /> <!-- firewall -->\n        </service>\n\n        <service id=\"security.user.provider.in_memory\" class=\"Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider\" abstract=\"true\" />\n        <service id=\"security.user.provider.in_memory.user\" class=\"Symfony\\Component\\Security\\Core\\User\\User\" abstract=\"true\">\n            <deprecated>The \"%service_id%\" service is deprecated since Symfony 4.1.</deprecated>\n        </service>\n\n        <service id=\"security.user.provider.ldap\" class=\"Symfony\\Component\\Ldap\\Security\\LdapUserProvider\" abstract=\"true\">\n            <argument /> <!-- security.ldap.ldap -->\n            <argument /> <!-- base dn -->\n            <argument /> <!-- search dn -->\n            <argument /> <!-- search password -->\n            <argument /> <!-- default_roles -->\n            <argument /> <!-- uid key -->\n            <argument /> <!-- filter -->\n            <argument /> <!-- password_attribute -->\n            <argument /> <!-- extra_fields (email etc) -->\n        </service>\n\n        <service id=\"security.user.provider.chain\" class=\"Symfony\\Component\\Security\\Core\\User\\ChainUserProvider\" abstract=\"true\" />\n\n        <service id=\"security.http_utils\" class=\"Symfony\\Component\\Security\\Http\\HttpUtils\">\n            <argument type=\"service\" id=\"router\" on-invalid=\"null\" />\n            <argument type=\"service\" id=\"router\" on-invalid=\"null\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\HttpUtils\" alias=\"security.http_utils\" />\n\n\n        <!-- Validator -->\n        <service id=\"security.validator.user_password\" class=\"Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator\">\n            <tag name=\"validator.constraint_validator\" alias=\"security.validator.user_password\" />\n            <argument type=\"service\" id=\"security.token_storage\" />\n            <argument type=\"service\" id=\"security.encoder_factory\" />\n        </service>\n\n        <!-- Cache -->\n        <service id=\"cache.security_expression_language\" parent=\"cache.system\" public=\"false\">\n            <tag name=\"cache.pool\" />\n        </service>\n\n        <!-- Cache Warmers -->\n        <service id=\"security.cache_warmer.expression\" class=\"Symfony\\Bundle\\SecurityBundle\\CacheWarmer\\ExpressionCacheWarmer\">\n            <tag name=\"kernel.cache_warmer\" />\n            <argument type=\"collection\" /> <!-- expressions -->\n            <argument type=\"service\" id=\"security.expression_language\" />\n        </service>\n    </services>\n</container>\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\SecurityBundle\\Tests\\Functional;\n\nclass CsrfFormLoginTest extends AbstractWebTestCase\n{\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginAndLogoutWithCsrfTokens($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n\n        $form = $client->request('GET', '/login')->selectButton('login')->form();\n        $form['user_login[username]'] = 'johannes';\n        $form['user_login[password]'] = 'test';\n        $client->submit($form);\n\n        $this->assertRedirect($client->getResponse(), '/profile');\n\n        $crawler = $client->followRedirect();\n\n        $text = $crawler->text(null, true);\n        $this->assertStringContainsString('Hello johannes!', $text);\n        $this->assertStringContainsString('You\\'re browsing to path \"/profile\".', $text);\n\n        $logoutLinks = $crawler->selectLink('Log out')->links();\n        $this->assertCount(2, $logoutLinks);\n        $this->assertStringContainsString('_csrf_token=', $logoutLinks[0]->getUri());\n\n        $client->click($logoutLinks[0]);\n\n        $this->assertRedirect($client->getResponse(), '/');\n    }\n\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginWithInvalidCsrfToken($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n\n        $form = $client->request('GET', '/login')->selectButton('login')->form();\n        $form['user_login[_token]'] = '';\n        $client->submit($form);\n\n        $this->assertRedirect($client->getResponse(), '/login');\n\n        $text = $client->followRedirect()->text(null, true);\n        $this->assertStringContainsString('Invalid CSRF token.', $text);\n    }\n\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginWithCustomTargetPath($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n\n        $form = $client->request('GET', '/login')->selectButton('login')->form();\n        $form['user_login[username]'] = 'johannes';\n        $form['user_login[password]'] = 'test';\n        $form['user_login[_target_path]'] = '/foo';\n        $client->submit($form);\n\n        $this->assertRedirect($client->getResponse(), '/foo');\n\n        $text = $client->followRedirect()->text(null, true);\n        $this->assertStringContainsString('Hello johannes!', $text);\n        $this->assertStringContainsString('You\\'re browsing to path \"/foo\".', $text);\n    }\n\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginRedirectsToProtectedResourceAfterLogin($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n\n        $client->request('GET', '/protected-resource');\n        $this->assertRedirect($client->getResponse(), '/login');\n\n        $form = $client->followRedirect()->selectButton('login')->form();\n        $form['user_login[username]'] = 'johannes';\n        $form['user_login[password]'] = 'test';\n        $client->submit($form);\n        $this->assertRedirect($client->getResponse(), '/protected-resource');\n\n        $text = $client->followRedirect()->text(null, true);\n        $this->assertStringContainsString('Hello johannes!', $text);\n        $this->assertStringContainsString('You\\'re browsing to path \"/protected-resource\".', $text);\n    }\n\n    public function getConfigs()\n    {\n        return [\n            ['config.yml'],\n            ['routes_as_path.yml'],\n        ];\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\SecurityBundle\\Tests\\Functional;\n\nclass LogoutTest extends AbstractWebTestCase\n{\n    public function testSessionLessRememberMeLogout()\n    {\n        $client = $this->createClient(['test_case' => 'RememberMeLogout', 'root_config' => 'config.yml']);\n\n        $client->request('POST', '/login', [\n            '_username' => 'johannes',\n            '_password' => 'test',\n        ]);\n\n        $cookieJar = $client->getCookieJar();\n        $cookieJar->expire(session_name());\n\n        $this->assertNotNull($cookieJar->get('REMEMBERME'));\n        $this->assertSame('lax', $cookieJar->get('REMEMBERME')->getSameSite());\n\n        $client->request('GET', '/logout');\n\n        $this->assertNull($cookieJar->get('REMEMBERME'));\n    }\n\n    public function testCsrfTokensAreClearedOnLogout()\n    {\n        $client = $this->createClient(['test_case' => 'LogoutWithoutSessionInvalidation', 'root_config' => 'config.yml']);\n        static::$container->get('security.csrf.token_storage')->setToken('foo', 'bar');\n\n        $client->request('POST', '/login', [\n            '_username' => 'johannes',\n            '_password' => 'test',\n        ]);\n\n        $this->assertTrue(static::$container->get('security.csrf.token_storage')->hasToken('foo'));\n        $this->assertSame('bar', static::$container->get('security.csrf.token_storage')->getToken('foo'));\n\n        $client->request('GET', '/logout');\n\n        $this->assertFalse(static::$container->get('security.csrf.token_storage')->hasToken('foo'));\n    }\n\n    public function testAccessControlDoesNotApplyOnLogout()\n    {\n        $client = $this->createClient(['test_case' => 'LogoutAccess', 'root_config' => 'config.yml']);\n\n        $client->request('POST', '/login', ['_username' => 'johannes', '_password' => 'test']);\n        $client->request('GET', '/logout');\n\n        $this->assertRedirect($client->getResponse(), '/');\n    }\n}\n", "{\n    \"name\": \"symfony/security-bundle\",\n    \"type\": \"symfony-bundle\",\n    \"description\": \"Provides a tight integration of the Security component into the Symfony full-stack framework\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.1.3\",\n        \"ext-xml\": \"*\",\n        \"symfony/config\": \"^4.2|^5.0\",\n        \"symfony/dependency-injection\": \"^4.4|^5.0\",\n        \"symfony/http-kernel\": \"^4.4\",\n        \"symfony/polyfill-php80\": \"^1.16\",\n        \"symfony/security-core\": \"^4.4\",\n        \"symfony/security-csrf\": \"^4.2|^5.0\",\n        \"symfony/security-guard\": \"^4.2|^5.0\",\n        \"symfony/security-http\": \"^4.4.5\"\n    },\n    \"require-dev\": {\n        \"doctrine/annotations\": \"^1.10.4\",\n        \"symfony/asset\": \"^3.4|^4.0|^5.0\",\n        \"symfony/browser-kit\": \"^4.2|^5.0\",\n        \"symfony/console\": \"^3.4|^4.0|^5.0\",\n        \"symfony/css-selector\": \"^3.4|^4.0|^5.0\",\n        \"symfony/dom-crawler\": \"^3.4|^4.0|^5.0\",\n        \"symfony/expression-language\": \"^3.4|^4.0|^5.0\",\n        \"symfony/form\": \"^3.4|^4.0|^5.0\",\n        \"symfony/framework-bundle\": \"^4.4|^5.0\",\n        \"symfony/process\": \"^3.4|^4.0|^5.0\",\n        \"symfony/serializer\": \"^4.4|^5.0\",\n        \"symfony/translation\": \"^3.4|^4.0|^5.0\",\n        \"symfony/twig-bridge\": \"^3.4|^4.0|^5.0\",\n        \"symfony/twig-bundle\": \"^4.4|^5.0\",\n        \"symfony/validator\": \"^3.4|^4.0|^5.0\",\n        \"symfony/yaml\": \"^3.4|^4.0|^5.0\",\n        \"twig/twig\": \"^1.43|^2.13|^3.0.4\"\n    },\n    \"conflict\": {\n        \"symfony/browser-kit\": \"<4.2\",\n        \"symfony/console\": \"<3.4\",\n        \"symfony/framework-bundle\": \"<4.4\",\n        \"symfony/ldap\": \"<4.4\",\n        \"symfony/twig-bundle\": \"<4.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Bundle\\\\SecurityBundle\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"], "fixing_code": ["<?xml version=\"1.0\" ?>\n\n<container xmlns=\"http://symfony.com/schema/dic/services\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://symfony.com/schema/dic/services https://symfony.com/schema/dic/services/services-1.0.xsd\">\n\n    <parameters>\n        <parameter key=\"security.authentication.trust_resolver.anonymous_class\">null</parameter>\n        <parameter key=\"security.authentication.trust_resolver.rememberme_class\">null</parameter>\n        <parameter key=\"security.role_hierarchy.roles\" type=\"collection\" />\n    </parameters>\n\n    <services>\n        <defaults public=\"false\" />\n\n        <service id=\"security.authorization_checker\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationChecker\" public=\"true\">\n            <argument type=\"service\" id=\"security.token_storage\" />\n            <argument type=\"service\" id=\"security.authentication.manager\" />\n            <argument type=\"service\" id=\"security.access.decision_manager\" />\n            <argument>%security.access.always_authenticate_before_granting%</argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface\" alias=\"security.authorization_checker\" />\n\n        <service id=\"security.token_storage\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\UsageTrackingTokenStorage\" public=\"true\">\n            <tag name=\"kernel.reset\" method=\"disableUsageTracking\" />\n            <tag name=\"kernel.reset\" method=\"setToken\" />\n            <argument type=\"service\" id=\"security.untracked_token_storage\" />\n            <argument type=\"service_locator\">\n                <argument key=\"session\" type=\"service\" id=\"session\" />\n            </argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface\" alias=\"security.token_storage\" />\n\n        <service id=\"security.untracked_token_storage\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorage\" />\n\n        <service id=\"security.helper\" class=\"Symfony\\Component\\Security\\Core\\Security\">\n            <argument type=\"service_locator\">\n                <argument key=\"security.token_storage\" type=\"service\" id=\"security.token_storage\" />\n                <argument key=\"security.authorization_checker\" type=\"service\" id=\"security.authorization_checker\" />\n            </argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Security\" alias=\"security.helper\" />\n\n        <service id=\"security.user_value_resolver\" class=\"Symfony\\Component\\Security\\Http\\Controller\\UserValueResolver\">\n            <argument type=\"service\" id=\"security.token_storage\" />\n            <tag name=\"controller.argument_value_resolver\" priority=\"40\" />\n        </service>\n\n        <!-- Authentication related services -->\n        <service id=\"security.authentication.manager\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationProviderManager\">\n            <argument /> <!-- providers -->\n            <argument>%security.authentication.manager.erase_credentials%</argument>\n            <call method=\"setEventDispatcher\">\n                <argument type=\"service\" id=\"event_dispatcher\" />\n            </call>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationManagerInterface\" alias=\"security.authentication.manager\" />\n\n        <service id=\"security.authentication.trust_resolver\" class=\"Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationTrustResolver\">\n            <argument>%security.authentication.trust_resolver.anonymous_class%</argument>\n            <argument>%security.authentication.trust_resolver.rememberme_class%</argument>\n        </service>\n\n        <service id=\"security.authentication.session_strategy\" class=\"Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy\">\n            <argument>%security.authentication.session_strategy.strategy%</argument>\n            <argument type=\"service\" id=\"security.csrf.token_storage\" on-invalid=\"ignore\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategyInterface\" alias=\"security.authentication.session_strategy\" />\n\n        <service id=\"security.authentication.session_strategy_noop\" class=\"Symfony\\Component\\Security\\Http\\Session\\SessionAuthenticationStrategy\" public=\"false\">\n            <argument>none</argument>\n        </service>\n\n        <service id=\"security.encoder_factory.generic\" class=\"Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactory\">\n            <argument type=\"collection\" />\n        </service>\n\n        <service id=\"security.encoder_factory\" alias=\"security.encoder_factory.generic\" />\n        <service id=\"Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface\" alias=\"security.encoder_factory\" />\n\n        <service id=\"security.user_password_encoder.generic\" class=\"Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoder\">\n            <argument type=\"service\" id=\"security.encoder_factory\"></argument>\n        </service>\n\n        <service id=\"security.password_encoder\" alias=\"security.user_password_encoder.generic\" public=\"true\" />\n        <service id=\"Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface\" alias=\"security.password_encoder\" />\n\n        <service id=\"security.user_checker\" class=\"Symfony\\Component\\Security\\Core\\User\\UserChecker\" />\n\n        <service id=\"security.expression_language\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\ExpressionLanguage\">\n            <argument type=\"service\" id=\"cache.security_expression_language\" on-invalid=\"null\" />\n        </service>\n\n        <service id=\"security.authentication_utils\" class=\"Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils\" public=\"true\">\n            <argument type=\"service\" id=\"request_stack\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils\" alias=\"security.authentication_utils\" />\n\n        <!-- Authorization related services -->\n        <service id=\"security.access.decision_manager\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManager\">\n            <argument type=\"collection\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManagerInterface\" alias=\"security.access.decision_manager\" />\n\n        <service id=\"security.role_hierarchy\" class=\"Symfony\\Component\\Security\\Core\\Role\\RoleHierarchy\">\n            <argument>%security.role_hierarchy.roles%</argument>\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Core\\Role\\RoleHierarchyInterface\" alias=\"security.role_hierarchy\" />\n\n        <!-- Security Voters -->\n        <service id=\"security.access.simple_role_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleVoter\">\n            <tag name=\"security.voter\" priority=\"245\" />\n        </service>\n\n        <service id=\"security.access.authenticated_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\AuthenticatedVoter\">\n            <argument type=\"service\" id=\"security.authentication.trust_resolver\" />\n            <tag name=\"security.voter\" priority=\"250\" />\n        </service>\n\n        <service id=\"security.access.role_hierarchy_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\RoleHierarchyVoter\">\n            <argument type=\"service\" id=\"security.role_hierarchy\" />\n            <tag name=\"security.voter\" priority=\"245\" />\n        </service>\n\n        <service id=\"security.access.expression_voter\" class=\"Symfony\\Component\\Security\\Core\\Authorization\\Voter\\ExpressionVoter\">\n            <argument type=\"service\" id=\"security.expression_language\" />\n            <argument type=\"service\" id=\"security.authentication.trust_resolver\" />\n            <argument type=\"service\" id=\"security.authorization_checker\" />\n            <argument type=\"service\" id=\"security.role_hierarchy\" on-invalid=\"null\" />\n            <tag name=\"security.voter\" priority=\"245\" />\n        </service>\n\n\n        <!-- Firewall related services -->\n        <service id=\"security.firewall\" class=\"Symfony\\Bundle\\SecurityBundle\\EventListener\\FirewallListener\">\n            <tag name=\"kernel.event_subscriber\" />\n            <argument type=\"service\" id=\"security.firewall.map\" />\n            <argument type=\"service\" id=\"event_dispatcher\" />\n            <argument type=\"service\" id=\"security.logout_url_generator\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\Firewall\" alias=\"security.firewall\" />\n\n        <service id=\"security.firewall.map\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\FirewallMap\">\n            <argument /> <!-- Firewall context locator -->\n            <argument /> <!-- Request matchers -->\n        </service>\n\n        <service id=\"security.firewall.context\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\FirewallContext\" abstract=\"true\">\n            <argument type=\"collection\" />\n            <argument type=\"service\" id=\"security.exception_listener\" />\n            <argument />  <!-- LogoutListener -->\n            <argument />  <!-- FirewallConfig -->\n        </service>\n\n        <service id=\"security.firewall.lazy_context\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\LazyFirewallContext\" abstract=\"true\">\n            <argument type=\"collection\" />\n            <argument type=\"service\" id=\"security.exception_listener\" />\n            <argument />  <!-- LogoutListener -->\n            <argument />  <!-- FirewallConfig -->\n            <argument type=\"service\" id=\"security.untracked_token_storage\" />\n        </service>\n\n        <service id=\"security.firewall.config\" class=\"Symfony\\Bundle\\SecurityBundle\\Security\\FirewallConfig\" abstract=\"true\">\n            <argument />                   <!-- name -->\n            <argument />                   <!-- user_checker -->\n            <argument />                   <!-- request_matcher -->\n            <argument>false</argument>     <!-- security enabled -->\n            <argument>false</argument>     <!-- stateless -->\n            <argument />                   <!-- provider -->\n            <argument />                   <!-- context -->\n            <argument />                   <!-- entry_point -->\n            <argument />                   <!-- access_denied_handler -->\n            <argument />                   <!-- access_denied_url -->\n            <argument type=\"collection\" /> <!-- listeners -->\n            <argument>null</argument>      <!-- switch_user -->\n        </service>\n\n        <service id=\"security.logout_url_generator\" class=\"Symfony\\Component\\Security\\Http\\Logout\\LogoutUrlGenerator\">\n            <argument type=\"service\" id=\"request_stack\" on-invalid=\"null\" />\n            <argument type=\"service\" id=\"router\" on-invalid=\"null\" />\n            <argument type=\"service\" id=\"security.token_storage\" />\n        </service>\n\n        <!-- Provisioning -->\n        <service id=\"security.user.provider.missing\" class=\"Symfony\\Component\\Security\\Core\\User\\MissingUserProvider\" abstract=\"true\">\n            <argument /> <!-- firewall -->\n        </service>\n\n        <service id=\"security.user.provider.in_memory\" class=\"Symfony\\Component\\Security\\Core\\User\\InMemoryUserProvider\" abstract=\"true\" />\n        <service id=\"security.user.provider.in_memory.user\" class=\"Symfony\\Component\\Security\\Core\\User\\User\" abstract=\"true\">\n            <deprecated>The \"%service_id%\" service is deprecated since Symfony 4.1.</deprecated>\n        </service>\n\n        <service id=\"security.user.provider.ldap\" class=\"Symfony\\Component\\Ldap\\Security\\LdapUserProvider\" abstract=\"true\">\n            <argument /> <!-- security.ldap.ldap -->\n            <argument /> <!-- base dn -->\n            <argument /> <!-- search dn -->\n            <argument /> <!-- search password -->\n            <argument /> <!-- default_roles -->\n            <argument /> <!-- uid key -->\n            <argument /> <!-- filter -->\n            <argument /> <!-- password_attribute -->\n            <argument /> <!-- extra_fields (email etc) -->\n        </service>\n\n        <service id=\"security.user.provider.chain\" class=\"Symfony\\Component\\Security\\Core\\User\\ChainUserProvider\" abstract=\"true\" />\n\n        <service id=\"security.http_utils\" class=\"Symfony\\Component\\Security\\Http\\HttpUtils\">\n            <argument type=\"service\" id=\"router\" on-invalid=\"null\" />\n            <argument type=\"service\" id=\"router\" on-invalid=\"null\" />\n        </service>\n        <service id=\"Symfony\\Component\\Security\\Http\\HttpUtils\" alias=\"security.http_utils\" />\n\n\n        <!-- Validator -->\n        <service id=\"security.validator.user_password\" class=\"Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator\">\n            <tag name=\"validator.constraint_validator\" alias=\"security.validator.user_password\" />\n            <argument type=\"service\" id=\"security.token_storage\" />\n            <argument type=\"service\" id=\"security.encoder_factory\" />\n        </service>\n\n        <!-- Cache -->\n        <service id=\"cache.security_expression_language\" parent=\"cache.system\" public=\"false\">\n            <tag name=\"cache.pool\" />\n        </service>\n\n        <!-- Cache Warmers -->\n        <service id=\"security.cache_warmer.expression\" class=\"Symfony\\Bundle\\SecurityBundle\\CacheWarmer\\ExpressionCacheWarmer\">\n            <tag name=\"kernel.cache_warmer\" />\n            <argument type=\"collection\" /> <!-- expressions -->\n            <argument type=\"service\" id=\"security.expression_language\" />\n        </service>\n    </services>\n</container>\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\SecurityBundle\\Tests\\Functional;\n\nclass CsrfFormLoginTest extends AbstractWebTestCase\n{\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginAndLogoutWithCsrfTokens($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n        static::$container->get('security.csrf.token_storage')->setToken('foo', 'bar');\n\n        $form = $client->request('GET', '/login')->selectButton('login')->form();\n        $form['user_login[username]'] = 'johannes';\n        $form['user_login[password]'] = 'test';\n        $client->submit($form);\n\n        $this->assertFalse(static::$container->get('security.csrf.token_storage')->hasToken('foo'));\n\n        $this->assertRedirect($client->getResponse(), '/profile');\n\n        $crawler = $client->followRedirect();\n\n        $text = $crawler->text(null, true);\n        $this->assertStringContainsString('Hello johannes!', $text);\n        $this->assertStringContainsString('You\\'re browsing to path \"/profile\".', $text);\n\n        $logoutLinks = $crawler->selectLink('Log out')->links();\n        $this->assertCount(2, $logoutLinks);\n        $this->assertStringContainsString('_csrf_token=', $logoutLinks[0]->getUri());\n\n        $client->click($logoutLinks[0]);\n\n        $this->assertRedirect($client->getResponse(), '/');\n    }\n\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginWithInvalidCsrfToken($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n        static::$container->get('security.csrf.token_storage')->setToken('foo', 'bar');\n\n        $form = $client->request('GET', '/login')->selectButton('login')->form();\n        $form['user_login[_token]'] = '';\n        $client->submit($form);\n\n        $this->assertTrue(static::$container->get('security.csrf.token_storage')->hasToken('foo'));\n\n        $this->assertRedirect($client->getResponse(), '/login');\n\n        $text = $client->followRedirect()->text(null, true);\n        $this->assertStringContainsString('Invalid CSRF token.', $text);\n    }\n\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginWithCustomTargetPath($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n\n        $form = $client->request('GET', '/login')->selectButton('login')->form();\n        $form['user_login[username]'] = 'johannes';\n        $form['user_login[password]'] = 'test';\n        $form['user_login[_target_path]'] = '/foo';\n        $client->submit($form);\n\n        $this->assertRedirect($client->getResponse(), '/foo');\n\n        $text = $client->followRedirect()->text(null, true);\n        $this->assertStringContainsString('Hello johannes!', $text);\n        $this->assertStringContainsString('You\\'re browsing to path \"/foo\".', $text);\n    }\n\n    /**\n     * @dataProvider getConfigs\n     */\n    public function testFormLoginRedirectsToProtectedResourceAfterLogin($config)\n    {\n        $client = $this->createClient(['test_case' => 'CsrfFormLogin', 'root_config' => $config]);\n\n        $client->request('GET', '/protected-resource');\n        $this->assertRedirect($client->getResponse(), '/login');\n\n        $form = $client->followRedirect()->selectButton('login')->form();\n        $form['user_login[username]'] = 'johannes';\n        $form['user_login[password]'] = 'test';\n        $client->submit($form);\n        $this->assertRedirect($client->getResponse(), '/protected-resource');\n\n        $text = $client->followRedirect()->text(null, true);\n        $this->assertStringContainsString('Hello johannes!', $text);\n        $this->assertStringContainsString('You\\'re browsing to path \"/protected-resource\".', $text);\n    }\n\n    public function getConfigs()\n    {\n        return [\n            ['config.yml'],\n            ['routes_as_path.yml'],\n        ];\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Symfony package.\n *\n * (c) Fabien Potencier <fabien@symfony.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Symfony\\Bundle\\SecurityBundle\\Tests\\Functional;\n\nclass LogoutTest extends AbstractWebTestCase\n{\n    public function testSessionLessRememberMeLogout()\n    {\n        $client = $this->createClient(['test_case' => 'RememberMeLogout', 'root_config' => 'config.yml']);\n\n        $client->request('POST', '/login', [\n            '_username' => 'johannes',\n            '_password' => 'test',\n        ]);\n\n        $cookieJar = $client->getCookieJar();\n        $cookieJar->expire(session_name());\n\n        $this->assertNotNull($cookieJar->get('REMEMBERME'));\n        $this->assertSame('lax', $cookieJar->get('REMEMBERME')->getSameSite());\n\n        $client->request('GET', '/logout');\n\n        $this->assertNull($cookieJar->get('REMEMBERME'));\n    }\n\n    public function testCsrfTokensAreClearedOnLogout()\n    {\n        $client = $this->createClient(['test_case' => 'LogoutWithoutSessionInvalidation', 'root_config' => 'config.yml']);\n\n        $client->request('POST', '/login', [\n            '_username' => 'johannes',\n            '_password' => 'test',\n        ]);\n\n        static::$container->get('security.csrf.token_storage')->setToken('foo', 'bar');\n\n        $client->request('GET', '/logout');\n\n        $this->assertFalse(static::$container->get('security.csrf.token_storage')->hasToken('foo'));\n    }\n\n    public function testAccessControlDoesNotApplyOnLogout()\n    {\n        $client = $this->createClient(['test_case' => 'LogoutAccess', 'root_config' => 'config.yml']);\n\n        $client->request('POST', '/login', ['_username' => 'johannes', '_password' => 'test']);\n        $client->request('GET', '/logout');\n\n        $this->assertRedirect($client->getResponse(), '/');\n    }\n}\n", "{\n    \"name\": \"symfony/security-bundle\",\n    \"type\": \"symfony-bundle\",\n    \"description\": \"Provides a tight integration of the Security component into the Symfony full-stack framework\",\n    \"keywords\": [],\n    \"homepage\": \"https://symfony.com\",\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Fabien Potencier\",\n            \"email\": \"fabien@symfony.com\"\n        },\n        {\n            \"name\": \"Symfony Community\",\n            \"homepage\": \"https://symfony.com/contributors\"\n        }\n    ],\n    \"require\": {\n        \"php\": \">=7.1.3\",\n        \"ext-xml\": \"*\",\n        \"symfony/config\": \"^4.2|^5.0\",\n        \"symfony/dependency-injection\": \"^4.4|^5.0\",\n        \"symfony/http-kernel\": \"^4.4\",\n        \"symfony/polyfill-php80\": \"^1.16\",\n        \"symfony/security-core\": \"^4.4\",\n        \"symfony/security-csrf\": \"^4.2|^5.0\",\n        \"symfony/security-guard\": \"^4.2|^5.0\",\n        \"symfony/security-http\": \"^4.4.50\"\n    },\n    \"require-dev\": {\n        \"doctrine/annotations\": \"^1.10.4\",\n        \"symfony/asset\": \"^3.4|^4.0|^5.0\",\n        \"symfony/browser-kit\": \"^4.2|^5.0\",\n        \"symfony/console\": \"^3.4|^4.0|^5.0\",\n        \"symfony/css-selector\": \"^3.4|^4.0|^5.0\",\n        \"symfony/dom-crawler\": \"^3.4|^4.0|^5.0\",\n        \"symfony/expression-language\": \"^3.4|^4.0|^5.0\",\n        \"symfony/form\": \"^3.4|^4.0|^5.0\",\n        \"symfony/framework-bundle\": \"^4.4|^5.0\",\n        \"symfony/process\": \"^3.4|^4.0|^5.0\",\n        \"symfony/serializer\": \"^4.4|^5.0\",\n        \"symfony/translation\": \"^3.4|^4.0|^5.0\",\n        \"symfony/twig-bridge\": \"^3.4|^4.0|^5.0\",\n        \"symfony/twig-bundle\": \"^4.4|^5.0\",\n        \"symfony/validator\": \"^3.4|^4.0|^5.0\",\n        \"symfony/yaml\": \"^3.4|^4.0|^5.0\",\n        \"twig/twig\": \"^1.43|^2.13|^3.0.4\"\n    },\n    \"conflict\": {\n        \"symfony/browser-kit\": \"<4.2\",\n        \"symfony/console\": \"<3.4\",\n        \"symfony/framework-bundle\": \"<4.4\",\n        \"symfony/ldap\": \"<4.4\",\n        \"symfony/twig-bundle\": \"<4.4\"\n    },\n    \"autoload\": {\n        \"psr-4\": { \"Symfony\\\\Bundle\\\\SecurityBundle\\\\\": \"\" },\n        \"exclude-from-classmap\": [\n            \"/Tests/\"\n        ]\n    },\n    \"minimum-stability\": \"dev\"\n}\n"], "filenames": ["Resources/config/security.xml", "Tests/Functional/CsrfFormLoginTest.php", "Tests/Functional/LogoutTest.php", "composer.json"], "buggy_code_start_loc": [65, 21, 39, 28], "buggy_code_end_loc": [65, 54, 48, 29], "fixing_code_start_loc": [66, 22, 38, 28], "fixing_code_end_loc": [67, 61, 46, 29], "type": "CWE-384", "message": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. When authenticating users Symfony by default regenerates the session ID upon login, but preserves the rest of session attributes. Because this does not clear CSRF tokens upon login, this might enables same-site attackers to bypass the CSRF protection mechanism by performing an attack similar to a session-fixation. This issue has been fixed in the 4.4 branch.", "other": {"cve": {"id": "CVE-2022-24895", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-03T22:15:11.273", "lastModified": "2023-02-15T14:25:50.550", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. When authenticating users Symfony by default regenerates the session ID upon login, but preserves the rest of session attributes. Because this does not clear CSRF tokens upon login, this might enables same-site attackers to bypass the CSRF protection mechanism by performing an attack similar to a session-fixation. This issue has been fixed in the 4.4 branch."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-384"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "4.4.50", "matchCriteriaId": "BD26F566-480D-42C8-93BA-011DC77BA73A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.4.20", "matchCriteriaId": "F81B0E24-C7F6-4FC7-9414-A31A55C4A053"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.0.0", "versionEndExcluding": "6.0.20", "matchCriteriaId": "B7DB6A6C-A7A4-4571-9677-24C9E7AAFD3C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.1.0", "versionEndExcluding": "6.1.12", "matchCriteriaId": "31265260-5BE3-41B1-A268-ECAE10B18978"}, {"vulnerable": true, "criteria": "cpe:2.3:a:sensiolabs:symfony:*:*:*:*:*:*:*:*", "versionStartIncluding": "6.2.0", "versionEndExcluding": "6.2.6", "matchCriteriaId": "8EE7A2A1-3893-4574-8A59-24BBDDE8DC41"}]}]}], "references": [{"url": "https://github.com/FriendsOfPHP/security-advisories/blob/master/symfony/security-bundle/CVE-2022-24895.yaml", "source": "security-advisories@github.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/symfony/security-bundle/commit/076fd2088ada33d760758d98ff07ddedbf567946", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/symfony/symfony/commit/5909d74ecee359ea4982fcf4331aaf2e489a1fd4", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/symfony/symfony/security/advisories/GHSA-3gv2-29qc-v67m", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/symfony/security-bundle/commit/076fd2088ada33d760758d98ff07ddedbf567946"}}