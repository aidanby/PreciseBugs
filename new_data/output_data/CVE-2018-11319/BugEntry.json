{"buggy_code": ["if exists('g:loaded_syntastic_c_autoload') || !exists('g:loaded_syntastic_plugin')\n    finish\nendif\nlet g:loaded_syntastic_c_autoload = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\n\" Public functions {{{1\n\n\" convenience function to determine the 'null device' parameter\n\" based on the current operating system\nfunction! syntastic#c#NullOutput() abort \" {{{2\n    let known_os = has('unix') || has('mac') || syntastic#util#isRunningWindows()\n    return known_os ? '-o ' . syntastic#util#DevNull() : ''\nendfunction \" }}}2\n\n\" read additional compiler flags from the given configuration file\n\" the file format and its parsing mechanism is inspired by clang_complete\nfunction! syntastic#c#ReadConfig(file) abort \" {{{2\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: looking for', a:file)\n\n    \" search upwards from the current file's directory\n    let config = syntastic#util#findFileInParent(a:file, expand('%:p:h', 1))\n    if config ==# ''\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: file not found')\n        return ''\n    endif\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: config file:', config)\n    if !filereadable(config)\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: file unreadable')\n        return ''\n    endif\n\n    \" convert filename into absolute path\n    let filepath = fnamemodify(config, ':p:h')\n\n    \" try to read config file\n    try\n        let lines = readfile(config)\n    catch /\\m^Vim\\%((\\a\\+)\\)\\=:E48[45]/\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: error reading file')\n        return ''\n    endtry\n\n    \" filter out empty lines and comments\n    call filter(lines, 'v:val !~# ''\\v^(\\s*#|$)''')\n\n    \" remove leading and trailing spaces\n    call map(lines, 'substitute(v:val, ''\\m^\\s\\+'', \"\", \"\")')\n    call map(lines, 'substitute(v:val, ''\\m\\s\\+$'', \"\", \"\")')\n\n    let parameters = []\n    for line in lines\n        let matches = matchstr(line, '\\m\\C^\\s*-I\\s*\\zs.\\+')\n        if matches !=# ''\n            \" this one looks like an absolute path\n            if match(matches, '\\m^\\%(/\\|\\a:\\)') != -1\n                call add(parameters, '-I' . matches)\n            else\n                call add(parameters, '-I' . filepath . syntastic#util#Slash() . matches)\n            endif\n        else\n            call add(parameters, line)\n        endif\n    endfor\n\n    return join(map(parameters, 'syntastic#util#shescape(v:val)'))\nendfunction \" }}}2\n\n\" GetLocList() for C-like compilers\nfunction! syntastic#c#GetLocList(filetype, subchecker, options) abort \" {{{2\n    try\n        let flags = s:_get_cflags(a:filetype, a:subchecker, a:options)\n    catch /\\m\\C^Syntastic: skip checks$/\n        return []\n    endtry\n\n    let makeprg = syntastic#util#shexpand(g:syntastic_{a:filetype}_compiler) .\n        \\ ' ' . flags . ' ' . syntastic#util#shexpand('%')\n\n    let errorformat = s:_get_checker_var('g', a:filetype, a:subchecker, 'errorformat', a:options['errorformat'])\n\n    let postprocess = s:_get_checker_var('g', a:filetype, a:subchecker, 'remove_include_errors', 0) ?\n        \\ ['filterForeignErrors'] : []\n\n    \" process makeprg\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'postprocess': postprocess })\nendfunction \" }}}2\n\n\" }}}1\n\n\" Private functions {{{1\n\n\" initialize c/cpp syntax checker handlers\nfunction! s:_init() abort \" {{{2\n    let s:handlers = []\n    let s:cflags = {}\n\n    call s:_registerHandler('\\m\\<cairo',       's:_checkPackage', ['cairo', 'cairo'])\n    call s:_registerHandler('\\m\\<freetype',    's:_checkPackage', ['freetype', 'freetype2', 'freetype'])\n    call s:_registerHandler('\\m\\<glade',       's:_checkPackage', ['glade', 'libglade-2.0', 'libglade'])\n    call s:_registerHandler('\\m\\<glib',        's:_checkPackage', ['glib', 'glib-2.0', 'glib'])\n    call s:_registerHandler('\\m\\<gtk',         's:_checkPackage', ['gtk', 'gtk+-2.0', 'gtk+', 'glib-2.0', 'glib'])\n    call s:_registerHandler('\\m\\<libsoup',     's:_checkPackage', ['libsoup', 'libsoup-2.4', 'libsoup-2.2'])\n    call s:_registerHandler('\\m\\<libxml',      's:_checkPackage', ['libxml', 'libxml-2.0', 'libxml'])\n    call s:_registerHandler('\\m\\<pango',       's:_checkPackage', ['pango', 'pango'])\n    call s:_registerHandler('\\m\\<SDL',         's:_checkPackage', ['sdl', 'sdl'])\n    call s:_registerHandler('\\m\\<opengl',      's:_checkPackage', ['opengl', 'gl'])\n    call s:_registerHandler('\\m\\<webkit',      's:_checkPackage', ['webkit', 'webkit-1.0'])\n\n    call s:_registerHandler('\\m\\<php\\.h\\>',    's:_checkPhp',    [])\n    call s:_registerHandler('\\m\\<Python\\.h\\>', 's:_checkPython', [])\n    call s:_registerHandler('\\m\\<ruby',        's:_checkRuby',   [])\nendfunction \" }}}2\n\n\" register a handler dictionary object\nfunction! s:_registerHandler(regex, function, args) abort \" {{{2\n    let handler = {}\n    let handler['regex'] = a:regex\n    let handler['func'] = function(a:function)\n    let handler['args'] = a:args\n    call add(s:handlers, handler)\nendfunction \" }}}2\n\n\" try to find library with 'pkg-config'\n\" search possible libraries from first to last given\n\" argument until one is found\nfunction! s:_checkPackage(name, ...) abort \" {{{2\n    if executable('pkg-config')\n        if !has_key(s:cflags, a:name)\n            for pkg in a:000\n                let pkg_flags = syntastic#util#system('pkg-config --cflags ' . pkg)\n                \" since we cannot necessarily trust the pkg-config exit code\n                \" we have to check for an error output as well\n                if v:shell_error == 0 && pkg_flags !~? 'not found'\n                    let pkg_flags = ' ' . substitute(pkg_flags, \"\\n\", '', '')\n                    let s:cflags[a:name] = pkg_flags\n                    return pkg_flags\n                endif\n            endfor\n        else\n            return s:cflags[a:name]\n        endif\n    endif\n    return ''\nendfunction \" }}}2\n\n\" try to find PHP includes with 'php-config'\nfunction! s:_checkPhp() abort \" {{{2\n    if executable('php-config')\n        if !has_key(s:cflags, 'php')\n            let s:cflags['php'] = syntastic#util#system('php-config --includes')\n            let s:cflags['php'] = ' ' . substitute(s:cflags['php'], \"\\n\", '', '')\n        endif\n        return s:cflags['php']\n    endif\n    return ''\nendfunction \" }}}2\n\n\" try to find the python headers with distutils\nfunction! s:_checkPython() abort \" {{{2\n    if executable('python')\n        if !has_key(s:cflags, 'python')\n            let s:cflags['python'] = syntastic#util#system('python -c ''from distutils import ' .\n                \\ 'sysconfig; import sys; sys.stdout.write(sysconfig.get_python_inc())''')\n            let s:cflags['python'] = substitute(s:cflags['python'], \"\\n\", '', '')\n            let s:cflags['python'] = ' -I' . s:cflags['python']\n        endif\n        return s:cflags['python']\n    endif\n    return ''\nendfunction \" }}}2\n\n\" try to find the ruby headers with 'rbconfig'\nfunction! s:_checkRuby() abort \" {{{2\n    if executable('ruby')\n        if !has_key(s:cflags, 'ruby')\n            let s:cflags['ruby'] = syntastic#util#system('ruby -r rbconfig -e ' .\n                \\ '''puts RbConfig::CONFIG[\"rubyhdrdir\"] || RbConfig::CONFIG[\"archdir\"]''')\n            let s:cflags['ruby'] = substitute(s:cflags['ruby'], \"\\n\", '', '')\n            let s:cflags['ruby'] = ' -I' . s:cflags['ruby']\n        endif\n        return s:cflags['ruby']\n    endif\n    return ''\nendfunction \" }}}2\n\n\" }}}1\n\n\" Utilities {{{1\n\n\" resolve checker-related user variables\nfunction! s:_get_checker_var(scope, filetype, subchecker, name, default) abort \" {{{2\n    let prefix = a:scope . ':' . 'syntastic_'\n    if exists(prefix . a:filetype . '_' . a:subchecker . '_' . a:name)\n        return {a:scope}:syntastic_{a:filetype}_{a:subchecker}_{a:name}\n    elseif exists(prefix . a:filetype . '_' . a:name)\n        return {a:scope}:syntastic_{a:filetype}_{a:name}\n    else\n        return a:default\n    endif\nendfunction \" }}}2\n\n\" resolve user CFLAGS\nfunction! s:_get_cflags(ft, ck, opts) abort \" {{{2\n    \" determine whether to parse header files as well\n    if has_key(a:opts, 'header_names') && expand('%', 1) =~? a:opts['header_names']\n        if s:_get_checker_var('g', a:ft, a:ck, 'check_header', 0)\n            let flags = get(a:opts, 'header_flags', '') . ' -c ' . syntastic#c#NullOutput()\n        else\n            \" checking headers when check_header is unset: bail out\n            throw 'Syntastic: skip checks'\n        endif\n    else\n        let flags = get(a:opts, 'main_flags', '')\n    endif\n\n    let flags .= ' ' . s:_get_checker_var('g', a:ft, a:ck, 'compiler_options', '') . ' ' . s:_get_include_dirs(a:ft)\n\n    \" check if the user manually set some cflags\n    let b_cflags = s:_get_checker_var('b', a:ft, a:ck, 'cflags', '')\n    if b_cflags !=# ''\n        let flags .= ' ' . b_cflags\n    endif\n\n    \" add optional config file parameters\n    let config_file = s:_get_checker_var('g', a:ft, a:ck, 'config_file', '.syntastic_' . a:ft . '_config')\n    let flags .= ' ' . syntastic#c#ReadConfig(config_file)\n\n    if b_cflags ==# '' && (a:ft ==# 'c' || a:ft ==# 'cpp') && !s:_get_checker_var('g', a:ft, a:ck, 'no_include_search', 0)\n        \" refresh the include file search if desired\n        if s:_get_checker_var('g', a:ft, a:ck, 'auto_refresh_includes', 0)\n            let flags .= ' ' . s:_search_headers()\n        else\n            \" search for header includes if not cached already\n            if !exists('b:syntastic_' . a:ft . '_includes')\n                let b:syntastic_{a:ft}_includes = s:_search_headers()\n            endif\n            let flags .= ' ' . b:syntastic_{a:ft}_includes\n        endif\n    endif\n\n    return flags\nendfunction \" }}}2\n\n\" get the gcc include directory argument depending on the default\n\" includes and the optional user-defined 'g:syntastic_c_include_dirs'\nfunction! s:_get_include_dirs(filetype) abort \" {{{2\n    let include_dirs = []\n\n    if a:filetype =~# '\\v^%(c|cpp|objc|objcpp)$' &&\n                \\ (!exists('g:syntastic_'.a:filetype.'_no_default_include_dirs') ||\n                \\ !g:syntastic_{a:filetype}_no_default_include_dirs)\n        let include_dirs = copy(s:default_includes)\n    endif\n\n    if exists('g:syntastic_'.a:filetype.'_include_dirs')\n        call extend(include_dirs, g:syntastic_{a:filetype}_include_dirs)\n    endif\n\n    return join(map(syntastic#util#unique(include_dirs), 'syntastic#util#shescape(\"-I\" . v:val)'))\nendfunction \" }}}2\n\n\" search the first 100 lines for include statements that are\n\" given in the handlers dictionary\nfunction! s:_search_headers() abort \" {{{2\n    let includes = ''\n    let files = []\n    let found = []\n    let lines = filter(getline(1, 100), 'v:val =~# ''\\m^\\s*#\\s*include''')\n\n    \" search current buffer\n    for line in lines\n        let file = matchstr(line, '\\m\"\\zs\\S\\+\\ze\"')\n        if file !=# ''\n            call add(files, file)\n            continue\n        endif\n\n        for handler in s:handlers\n            if line =~# handler['regex']\n                let includes .= call(handler['func'], handler['args'])\n                call add(found, handler['regex'])\n                break\n            endif\n        endfor\n    endfor\n\n    \" search included headers\n    for hfile in files\n        if hfile !=# ''\n            let filename = expand('%:p:h', 1) . syntastic#util#Slash() . hfile\n\n            try\n                let lines = readfile(filename, '', 100)\n            catch /\\m^Vim\\%((\\a\\+)\\)\\=:E484/\n                continue\n            endtry\n\n            call filter(lines, 'v:val =~# ''\\m^\\s*#\\s*include''')\n\n            for handler in s:handlers\n                if index(found, handler['regex']) != -1\n                    continue\n                endif\n\n                for line in lines\n                    if line =~# handler['regex']\n                        let includes .= call(handler['func'], handler['args'])\n                        call add(found, handler['regex'])\n                        break\n                    endif\n                endfor\n            endfor\n        endif\n    endfor\n\n    return includes\nendfunction \" }}}2\n\n\" }}}1\n\n\" default include directories\nlet s:default_includes = [\n    \\ '.',\n    \\ '..',\n    \\ 'include',\n    \\ 'includes',\n    \\ '..' . syntastic#util#Slash() . 'include',\n    \\ '..' . syntastic#util#Slash() . 'includes' ]\n\ncall s:_init()\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "*syntastic-checkers.txt*\tSyntastic checkers\n*syntastic-checkers*\n\n==============================================================================\nSYNTAX CHECKERS BY LANGUAGE                          *syntastic-checkers-lang*\n\n|syntastic| comes with checkers for the following languages:\n\n    ACPI Source Language.....................|syntastic-checkers-asl|\n    ActionScript.............................|syntastic-checkers-actionscript|\n    Ada......................................|syntastic-checkers-ada|\n    Ansible..................................|syntastic-checkers-ansible|\n    API Blueprint............................|syntastic-checkers-apiblueprint|\n    AppleScript..............................|syntastic-checkers-applescript|\n    AsciiDoc.................................|syntastic-checkers-asciidoc|\n    Assembly Languages.......................|syntastic-checkers-asm|\n\n    BEMHTML..................................|syntastic-checkers-bemhtml|\n    Bro......................................|syntastic-checkers-bro|\n\n    C........................................|syntastic-checkers-c|\n    C#.......................................|syntastic-checkers-cs|\n    C++......................................|syntastic-checkers-cpp|\n    Cabal....................................|syntastic-checkers-cabal|\n    Chef.....................................|syntastic-checkers-chef|\n    CMake....................................|syntastic-checkers-cmake|\n    COBOL....................................|syntastic-checkers-cobol|\n    Coco.....................................|syntastic-checkers-co|\n    CoffeeScript.............................|syntastic-checkers-coffee|\n    Coq......................................|syntastic-checkers-coq|\n    CSS......................................|syntastic-checkers-css|\n    Cucumber.................................|syntastic-checkers-cucumber|\n    CUDA.....................................|syntastic-checkers-cuda|\n\n    D........................................|syntastic-checkers-d|\n    Dart.....................................|syntastic-checkers-dart|\n    DocBook..................................|syntastic-checkers-docbk|\n    Dockerfile...............................|syntastic-checkers-dockerfile|\n    Dust.....................................|syntastic-checkers-dustjs|\n\n    Elixir...................................|syntastic-checkers-elixir|\n    Erlang...................................|syntastic-checkers-erlang|\n    eRuby....................................|syntastic-checkers-eruby|\n\n    Fortran..................................|syntastic-checkers-fortran|\n\n    Gentoo Metadata..........................|syntastic-checkers-gentoo|\n    Gettext PO...............................|syntastic-checkers-po|\n    GLSL.....................................|syntastic-checkers-glsl|\n    Go.......................................|syntastic-checkers-go|\n\n    Haml.....................................|syntastic-checkers-haml|\n    Handlebars...............................|syntastic-checkers-handlebars|\n    Haskell..................................|syntastic-checkers-haskell|\n    Haxe.....................................|syntastic-checkers-haxe|\n    HSS......................................|syntastic-checkers-hss|\n    HTML.....................................|syntastic-checkers-html|\n\n    Java.....................................|syntastic-checkers-java|\n    JavaScript...............................|syntastic-checkers-javascript|\n    JSON.....................................|syntastic-checkers-json|\n    Julia....................................|syntastic-checkers-julia|\n\n    LESS.....................................|syntastic-checkers-less|\n    Lex......................................|syntastic-checkers-lex|\n    Limbo....................................|syntastic-checkers-limbo|\n    LISP.....................................|syntastic-checkers-lisp|\n    LLVM.....................................|syntastic-checkers-llvm|\n    Lua......................................|syntastic-checkers-lua|\n\n    Markdown.................................|syntastic-checkers-markdown|\n    MATLAB...................................|syntastic-checkers-matlab|\n    Mercury..................................|syntastic-checkers-mercury|\n\n    NASM.....................................|syntastic-checkers-nasm|\n    Nix......................................|syntastic-checkers-nix|\n    nroff....................................|syntastic-checkers-nroff|\n\n    Objective-C..............................|syntastic-checkers-objc|\n    Objective-C++............................|syntastic-checkers-objcpp|\n    OCaml....................................|syntastic-checkers-ocaml|\n\n    Perl.....................................|syntastic-checkers-perl|\n    Perl 6...................................|syntastic-checkers-perl6|\n    PHP......................................|syntastic-checkers-php|\n    POD......................................|syntastic-checkers-pod|\n    Pug (formerly Jade)......................|syntastic-checkers-pug|\n    Puppet...................................|syntastic-checkers-puppet|\n    Python...................................|syntastic-checkers-python|\n\n    QML......................................|syntastic-checkers-qml|\n\n    R........................................|syntastic-checkers-r|\n    R Markdown...............................|syntastic-checkers-rmd|\n    Racket...................................|syntastic-checkers-racket|\n    Relax NG.................................|syntastic-checkers-rnc|\n    reStructuredText.........................|syntastic-checkers-rst|\n    RPM spec.................................|syntastic-checkers-spec|\n    Ruby.....................................|syntastic-checkers-ruby|\n\n    SASS.....................................|syntastic-checkers-sass|\n    Scala....................................|syntastic-checkers-scala|\n    SCSS.....................................|syntastic-checkers-scss|\n    Sh.......................................|syntastic-checkers-sh|\n    Slim.....................................|syntastic-checkers-slim|\n    SML......................................|syntastic-checkers-sml|\n    Solidity.................................|syntastic-checkers-solidity|\n    SQL......................................|syntastic-checkers-sql|\n    Stylus...................................|syntastic-checkers-stylus|\n\n    Tcl......................................|syntastic-checkers-tcl|\n    TeX......................................|syntastic-checkers-tex|\n    Texinfo..................................|syntastic-checkers-texinfo|\n    Text.....................................|syntastic-checkers-text|\n    Turtle...................................|syntastic-checkers-turtle|\n    TriG.....................................|syntastic-checkers-trig|\n    Twig.....................................|syntastic-checkers-twig|\n    TypeScript...............................|syntastic-checkers-typescript|\n\n    Vala.....................................|syntastic-checkers-vala|\n    Verilog..................................|syntastic-checkers-verilog|\n    VHDL.....................................|syntastic-checkers-vhdl|\n    Vim help.................................|syntastic-checkers-help|\n    VimL.....................................|syntastic-checkers-vim|\n    Vue.js...................................|syntastic-checkers-vue|\n\n    xHTML....................................|syntastic-checkers-xhtml|\n    XML......................................|syntastic-checkers-xml|\n    XQuery...................................|syntastic-checkers-xquery|\n    XSLT.....................................|syntastic-checkers-xslt|\n\n    YACC.....................................|syntastic-checkers-yacc|\n    YAML.....................................|syntastic-checkers-yaml|\n    YANG.....................................|syntastic-checkers-yang|\n    YARA.....................................|syntastic-checkers-yara|\n\n    Z80......................................|syntastic-checkers-z80|\n    Zope Page Templates......................|syntastic-checkers-zpt|\n    Zsh......................................|syntastic-checkers-zsh|\n\nThird-party checkers are available for additional languages.\n\n==============================================================================\nSYNTAX CHECKERS FOR ACPI SOURCE LANGUAGE              *syntastic-checkers-asl*\n\nThe following checkers are available for the ACPI Source Language (filetype\n\"asl\"):\n\n    1. iasl.....................|syntastic-asl-iasl|\n\n------------------------------------------------------------------------------\n1. iasl                                                   *syntastic-asl-iasl*\n\nName:        iasl\nMaintainer:  Peter Wu <peter@lekensteyn.nl>\n\n\"iasl\" is a compiler/decompiler for ACPI Source Language (ASL) and ACPI\nMachine Language (AML). See the project's page for details:\n\n    https://acpica.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for ASL files, such as\n\"vim-acpi-asl\":\n\n    https://github.com/martinlroth/vim-acpi-asl\n\n==============================================================================\nSYNTAX CHECKERS FOR ACTIONSCRIPT             *syntastic-checkers-actionscript*\n\nThe following checkers are available for ActionScript (filetype\n\"actionscript\"):\n\n    1. mxmlc....................|syntastic-actionscript-mxmlc|\n\n------------------------------------------------------------------------------\n1. mxmlc                                        *syntastic-actionscript-mxmlc*\n\nName:        mxmlc\nMaintainer:  Andy Earnshaw <andyearnshaw@gmail.com>\n\n\"mxmlc\" is a compiler for ActionScript. See Apache Flex for details:\n\n    http://flex.apache.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ADA                               *syntastic-checkers-ada*\n\nThe following checkers are available for Ada (filetype \"ada\"):\n\n    1. GCC......................|syntastic-ada-gcc|\n\n------------------------------------------------------------------------------\n1. GCC                                                     *syntastic-ada-gcc*\n\nName:        gcc\nMaintainer:  Alfredo Di Napoli <alfredo.dinapoli@gmail.com>\n\nChecker options~\n                                                  *'g:syntastic_ada_compiler'*\nType: string\nDefault: \"gcc\"\nCompiler executable.\n\n                                               *'g:syntastic_ada_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                     *'g:syntastic_ada_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                          *'g:syntastic_ada_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                               *'g:syntastic_ada_config_file'*\nType: string\nDefault: \".syntastic_ada_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                              *'g:syntastic_ada_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_ada_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                    *'b:syntastic_ada_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                              *'g:syntastic_ada_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"ads\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_ada_gcc_<option>' variables. The only exception is\n'g:syntastic_ada_gcc_exec', which can still be used to override the linter's\nexecutable.\n\n==============================================================================\nSYNTAX CHECKERS FOR ANSIBLE                       *syntastic-checkers-ansible*\n\nThe following checkers are available for Ansible (filetype \"ansible\"):\n\n    1. Ansible-lint.............|syntastic-ansible-ansible_lint|\n\n------------------------------------------------------------------------------\n1. Ansible-lint                               *syntastic-ansible-ansible_lint*\n\nName:        ansible_lint\nMaintainer:  Erik Zaadi <erik.zaadi@gmail.com>\n\n\"Ansible-lint\" is a style linter for Ansible playbooks. See the project's\npage at GitHub for details:\n\n    https://github.com/willthames/ansible-lint\n\nSyntastic requires \"Ansible-lint\" version 2.0.4 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Ansible playbooks, such\nas \"ansible-vim\":\n\n    https://github.com/pearofducks/ansible-vim\n\n==============================================================================\nSYNTAX CHECKERS FOR API BLUEPRINT            *syntastic-checkers-apiblueprint*\n\nThe following checkers are available for API Blueprint (filetype \"apiblueprint\"):\n\n    1. Drafter..................|syntastic-apiblueprint-drafter|\n\n------------------------------------------------------------------------------\n1. Drafter                                    *syntastic-apiblueprint-drafter*\n\nName:        drafter\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Drafter\" is a parser for Apiary's \"API Blueprint\" (http://apiblueprint.org/).\nSee the project's page at GitHub for details:\n\n    https://github.com/apiaryio/drafter\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for API Blueprint files, such\nas \"apiblueprint.vim\":\n\n    https://github.com/kylef/apiblueprint.vim\n\n==============================================================================\nSYNTAX CHECKERS FOR APPLESCRIPT               *syntastic-checkers-applescript*\n\nThe following checkers are available for AppleScript (filetype \"applescript\"):\n\n    1. osacompile...............|syntastic-applescript-osacompile|\n\n------------------------------------------------------------------------------\n1. osacompile                               *syntastic-applescript-osacompile*\n\nName:        osacompile\nAuthor: Zhao Cai <caizhaoff@gmail.com>\n\n\"osacompile\" is a compiler for \"AppleScript\". See the program's manual for\ndetails:\n\n    https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osacompile.1.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ASCIIDOC                     *syntastic-checkers-asciidoc*\n\nThe following checkers are available for AsciiDoc (filetype \"asciidoc\"):\n\n    1. Asciidoc.................|syntastic-asciidoc-asciidoc|\n    2. proselint................|syntastic-asciidoc-proselint|\n\n------------------------------------------------------------------------------\n1. Asciidoc                                      *syntastic-asciidoc-asciidoc*\n\nName:        asciidoc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Asciidoc\" is a translator for AsciiDoc documents (http://asciidoc.org/).\n\nNote~\n\nIf you would prefer to use Asciidoctor (http://asciidoctor.org/)\nas a linter instead of \"Asciidoc\", you can do that by pointing\n'g:syntastic_asciidoc_asciidoc_exec' to it: >\n    let g:syntastic_asciidoc_asciidoc_exec = \"asciidoctor\"\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. proselint                                    *syntastic-asciidoc-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-help-proselint|, |syntastic-html-proselint|,\n|syntastic-markdown-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ASSEMBLY LANGUAGES                *syntastic-checkers-asm*\n\nThe following checkers are available for assembly languages (filetype \"asm\"):\n\n    1. GCC......................|syntastic-asm-gcc|\n\n------------------------------------------------------------------------------\n1. GCC                                                     *syntastic-asm-gcc*\n\nName:        gcc\nMaintainer:  Joshua Rahm <joshuarahm@gmail.com>\n\nThis plugin supports both the AT&T and Intel dialects.\n\nChecker Options~\n                                                  *'g:syntastic_asm_compiler'*\nType: string\nDefault: \"gcc\"\nCompiler executable. Set it to something like \"mipsel-linux-gcc\": >\n    let g:syntastic_asm_compiler = \"mipsel-linux-gcc\"\n<\n                                               *'g:syntastic_asm_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                                   *'g:syntastic_asm_dialect'*\nType: string\nDefault: unset\nNormally the assembler will select the dialect to use for checking based on\nthe file extension (AT&T for \".s\", Intel for \".asm\"). If you want to override\nthe automatic choice set this variable to either \"att\" or \"intel\".\n\n                                     *'g:syntastic_asm_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                          *'g:syntastic_asm_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nassembler. Set it to something like \"-mtune=native\": >\n    let g:syntastic_asm_compiler_options = \"-mtune=native\"\n<\n                                               *'g:syntastic_asm_config_file'*\nType: string\nDefault: \".syntastic_asm_config\"\nFile containing additional compilation flags to be passed to the assembler,\none option per line (see |syntastic-config-files|).\n\n                                              *'g:syntastic_asm_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the assembler, in addition to the\nabove compilation flags. You can set it like this: >\n    let g:syntastic_asm_include_dirs = [\"inc\", \"asm/src/include\"]\n<\nand the corresponding \"-Iinc -Iasm/src/include\" will be added to the\ncompilation flags.\n\n                                                    *'b:syntastic_asm_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_asm_gcc_<option>' variables. The only exception is\n'g:syntastic_asm_gcc_exec', which can still be used to override the linter's\nexecutable.\n\n==============================================================================\nSYNTAX CHECKERS FOR BEMHTML                       *syntastic-checkers-bemhtml*\n\nThe following checkers are available for BEMHTML (filetype \"bemhtml\"):\n\n    1. bemhtml-lint.............|syntastic-bemhtml-bemhtmllint|\n\n------------------------------------------------------------------------------\n1. bemhtml-lint                                *syntastic-bemhtml-bemhtmllint*\n\nName:        bemhtmllint\nMaintainer:  Sergej Tatarincev\n\nBEMHTML is a template engine intended for using with the BEM methodology\n(http://bem.info/method/). See the project's page at GitHub for details:\n\n    https://github.com/SevInf/bemhtml-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR BRO                               *syntastic-checkers-bro*\n\nThe following checkers are available for Bro (filetype \"bro\"):\n\n    1. Bro......................|syntastic-bro-bro|\n\n------------------------------------------------------------------------------\n1. Bro                                                     *syntastic-bro-bro*\n\nName:        bro\nMaintainer:  Justin Azoff <justin.azoff@gmail.com>\n\n\"Bro\" is a network security monitor. See the project's page for details:\n\n    https://www.bro.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR C                                   *syntastic-checkers-c*\n\nThe following checkers are available for C (filetype \"c\"):\n\n    1. AVR-GCC..................|syntastic-c-avrgcc|\n    2. Checkpatch...............|syntastic-c-checkpatch|\n    3. ClangCheck...............|syntastic-c-clang_check|\n    4. Clang-Tidy...............|syntastic-c-clang_tidy|\n    5. Cppcheck.................|syntastic-c-cppcheck|\n    6. cppclean.................|syntastic-c-cppclean|\n    7. Flawfinder...............|syntastic-c-flawfinder|\n    8. GCC......................|syntastic-c-gcc|\n    9. make.....................|syntastic-c-make|\n    10. OClint..................|syntastic-c-oclint|\n    11. PC-Lint.................|syntastic-c-pc_lint|\n    12. Sparse..................|syntastic-c-sparse|\n    13. Splint..................|syntastic-c-splint|\n\n------------------------------------------------------------------------------\n1. AVR-GCC                                                *syntastic-c-avrgcc*\n\nName:        avrgcc\nMaintainer:  Karel <karelishere@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_avrgcc_config_file'*\nType: string\nDefault: \".syntastic_avrgcc_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\n------------------------------------------------------------------------------\n2. Checkpatch                                         *syntastic-c-checkpatch*\n\nName:        checkpatch\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"Checkpatch\" is a style linter for the Linux kernel sources. It's\ndistributed along with the Linux kernel sources:\n\n    https://github.com/torvalds/linux/blob/master/scripts/checkpatch.pl\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. ClangCheck                                        *syntastic-c-clang_check*\n\nName:        clang_check\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"ClangCheck\" is a wrapper around Clang's \"LibTooling\"\n(http://clang.llvm.org/docs/LibTooling.html). See the official page for\ndetails:\n\n    http://clang.llvm.org/docs/ClangCheck.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       *'g:syntastic_clang_check_config_file'*\nType: string\nDefault: \".syntastic_clang_check_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangCheck\" parameters in\n'g:syntastic_c_clang_check_args', and compilation parameters\n(defines, optimisation flags, etc.) in the configuration file.\n\nHowever, if you want \"ClangCheck\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) -- perhaps\ngenerated by \"CMake\" (https://github.com/rizsotto/Bear) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_clang_check_post_args' to an empty string: >\n    let g:syntastic_c_clang_check_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_check_config_file' are\nthen ignored.\n\nSee also: |syntastic-cpp-clang_check|.\n\n------------------------------------------------------------------------------\n4. Clang-Tidy                                         *syntastic-c-clang_tidy*\n\nName:        clang_tidy\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"Clang-Tidy\" is a lint tool based on \"Clang\" (http://clang.llvm.org/). See\nthe project's page for details:\n\n    http://clang.llvm.org/extra/clang-tidy.html\n\nInstallation~\n\n\"Clang-Tidy\" is part of the \"Clang\" (http://clang.llvm.org/) project, but it\nisn't built by default. You need to enable compilation of the \"Extra Clang\nTools\" (http://clang.llvm.org/docs/ClangTools.html#extra-clang-tools) to get\nit. See the build tutorial for details:\n\n    http://clang.llvm.org/docs/LibASTMatchersTutorial.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                        *'g:syntastic_clang_tidy_config_file'*\nType: string\nDefault: \".syntastic_clang_tidy_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangTidy\" parameters in\n'g:syntastic_c_clang_tidy_args', and compilation parameters\n(defines, optimisation flags, etc.) in the configuration file.\n\nIf you want \"ClangTidy\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_clang_tidy_post_args' to an empty string: >\n    let g:syntastic_c_clang_tidy_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_tidy_config_file' are\nthen ignored.\n\nSee also: |syntastic-cpp-clang_tidy|.\n\n------------------------------------------------------------------------------\n5. Cppcheck                                             *syntastic-c-cppcheck*\n\nName:        cppcheck\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Cppcheck\" is a static analysis tool for C/C++ code. See the project's page\nfor details:\n\n    http://cppcheck.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          *'g:syntastic_cppcheck_config_file'*\nType: string\nDefault: \".syntastic_cppcheck_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-cpp-cppcheck|.\n\n------------------------------------------------------------------------------\n6. cppclean                                             *syntastic-c-cppclean*\n\nName:        cppclean\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"cppclean\" attempts to find problems in C++ source that slow development in\nlarge code bases, for example various forms of unused code. See the project's\npage at GitHub for more information:\n\n    https://github.com/myint/cppclean\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install cppclean\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-cpp-cppclean|.\n\n------------------------------------------------------------------------------\n7. Flawfinder                                         *syntastic-c-flawfinder*\n\nName:        flawfinder\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Flawfinder\" scans C/C++ source code for possible security weaknesses. See the\nproject's page for more information:\n\n    https://www.dwheeler.com/flawfinder\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_c_flawfinder_thres'*\nType: integer\nDefault: 3\nError threshold. Policy violations with a severity above this value are\nhighlighted as errors, the others are considered warnings by syntastic.\n\nSee also: |syntastic-cpp-flawfinder|.\n\n------------------------------------------------------------------------------\n8. GCC                                                       *syntastic-c-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                                    *'g:syntastic_c_compiler'*\nType: string\nDefault: \"gcc\", or \"clang\" if GCC is not found\nCompiler executable.\n\n                                                 *'g:syntastic_c_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                       *'g:syntastic_c_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                            *'g:syntastic_c_compiler_options'*\nType: string\nDefault: \"-std=gnu99\"\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                                 *'g:syntastic_c_config_file'*\nType: string\nDefault: \".syntastic_c_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                                *'g:syntastic_c_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it to something like this: >\n    let g:syntastic_c_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                     *'g:syntastic_c_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                           *'g:syntastic_c_no_include_search'*\nType: boolean\nDefault: 0\nBy default syntastic looks at the first 100 lines of the file being checked,\nand tries to determine if it needs to include headers for some common\nlibraries, such as \"GLib\" or \"Gtk\". It then tries to add the corresponding\ninclude directories to the compilation flags. You can disable this behaviour\nby setting the above variable to 1.\n\n                                       *'g:syntastic_c_auto_refresh_includes'*\nType: boolean\nDefault: 0\nUsed only if \"g:syntastic_c_no_include_search\" is set to a false value. By\ndefault syntastic searches for common libraries only the first time the\ncurrent file is checked. Setting the above variable to 1 instructs syntastic\nto refresh the list of common libraries every time the current file is\nchecked. You can also force a refresh even when the above variable is 0, by\n`:unlet`-ing the buffer variable 'b:syntastic_c_includes'.\n\n                                                      *'b:syntastic_c_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. When set, no search for common libraries is performed,\nand the contents of the variable are added to the compilation flags.\n\n                                                *'g:syntastic_c_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_c_gcc_<option>' variables. The only exception is\n'g:syntastic_c_gcc_exec', which can still be used to override the linter's\nexecutable.\n\nSee also: |syntastic-cpp-gcc|.\n\n------------------------------------------------------------------------------\n9. make                                                     *syntastic-c-make*\n\nName:        make\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n10. OClint                                                *syntastic-c-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: \".syntastic_oclint_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNotes~\n\nBy default you can set \"OClint\" parameters in 'g:syntastic_c_oclint_args', and\ncompilation parameters (defines, optimisation flags, etc.) in the config file.\n\nIf you want \"OClint\" to use \"Clang\"-style compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_oclint_post_args' to an empty string: >\n    let g:syntastic_c_oclint_post_args = \"\"\n<\nConfig files pointed to by 'g:syntastic_oclint_config_file' are then ignored.\n\nSee also: |syntastic-cpp-oclint|.\n\n------------------------------------------------------------------------------\n11. PC-Lint                                              *syntastic-c-pc_lint*\n\nName:        pc_lint\nMaintainer:  Steve Bragg <steve@empresseffects.com>\n\n\"PC-Lint\" is a commercial static code analysis tool for Windows, produced\nby \"Gimpel Software\" (http://www.gimpel.com/). See the project's page for\ndetails:\n\n    http://www.gimpel.com/html/pcl.htm\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                           *'g:syntastic_pc_lint_config_file'*\nType: string\nDefault: \"options.lnt\"\nName of an indirect (.lnt) file. A file with that name is looked up in the\ncurrent directory and in parent directories; first such file found is used.\n\nSee also: |syntastic-cpp-pc_lint|.\n\n------------------------------------------------------------------------------\n12. Sparse                                                *syntastic-c-sparse*\n\nName:        sparse\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"Sparse\" is a semantic parser for C, see the official wiki for details:\n\n    https://sparse.wiki.kernel.org/index.php/Main_Page\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_sparse_config_file'*\nType: string\nDefault: \".syntastic_sparse_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNotes~\n\nIf you use \"Sparse\" with \"GCC\" you probably want to add something like this to\nyour vimrc: >\n    let g:syntastic_c_sparse_post_args=\"-gcc-base-dir \" .\n        \\ system(\"gcc -v 2>&1 | sed -n '/^Reading specs/ { s#.* /#/#; s#/[^/]*$##; p; }'\")\n<\nThis allows \"Sparse\" to read \"GCC\"'s private include files.\n\n------------------------------------------------------------------------------\n13. Splint                                                *syntastic-c-splint*\n\nName:        splint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Splint\" is a tool for statically checking C programs for security\nvulnerabilities, see the project's page for details:\n\n    http://www.splint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_splint_config_file'*\nType: string\nDefault: \".syntastic_splint_config\"\nFile containing project-specific options to be passed to \"Splint\"\n(such as defines or include directories), one option per line (cf.\n|syntastic-config-files|).\n\n==============================================================================\nSYNTAX CHECKERS FOR C#                                 *syntastic-checkers-cs*\n\nThe following checkers are available for C# (filetype \"cs\"):\n\n    1. mcs......................|syntastic-cs-mcs|\n\n------------------------------------------------------------------------------\n1. mcs                                                      *syntastic-cs-mcs*\n\nName:        mcs\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"mcs\" is a compiler for C# from the \"Mono\" project\n(http://www.mono-project.com/Main_Page). See the program's manual for details:\n\n    http://mono.wikia.com/wiki/Man_mcs\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR C++                               *syntastic-checkers-cpp*\n\nThe following checkers are available for C++ (filetype \"cpp\"):\n\n    1. AVR-GCC..................|syntastic-cpp-avrgcc|\n    2. ClangCheck...............|syntastic-cpp-clang_check|\n    3. Clang-Tidy...............|syntastic-cpp-clang_tidy|\n    4. Cppcheck.................|syntastic-cpp-cppcheck|\n    5. cppclean.................|syntastic-cpp-cppclean|\n    6. Cpplint..................|syntastic-cpp-cpplint|\n    7. Flawfinder...............|syntastic-cpp-flawfinder|\n    8. GCC......................|syntastic-cpp-gcc|\n    9. OClint...................|syntastic-cpp-oclint|\n    10. PC-Lint.................|syntastic-cpp-pc_lint|\n    11. Vera++..................|syntastic-cpp-verapp|\n\n------------------------------------------------------------------------------\n1. AVR-GCC                                              *syntastic-cpp-avrgcc*\n\nName:        avrgcc\nMaintainer:  S\u0142awek Piotrowski <sentinel@atteo.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_avrgcc_config_file'\nType: string\nDefault: \".syntastic_avrgcc_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-c-avrgcc|.\n\n------------------------------------------------------------------------------\n2. ClangCheck                                      *syntastic-cpp-clang_check*\n\nName:        clang_check\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"ClangCheck\" is a wrapper around Clang's \"LibTooling\"\n(http://clang.llvm.org/docs/LibTooling.html). See the official page for\ndetails:\n\n    http://clang.llvm.org/docs/ClangCheck.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       'g:syntastic_clang_check_config_file'\nType: string\nDefault: \".syntastic_clang_check_config\"\nfile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangCheck\" parameters in\n'g:syntastic_cpp_clang_check_args', and compilation parameters (defines,\noptimisation flags, etc.) in the configuration file.\n\nHowever, if you want \"ClangCheck\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) -- perhaps\ngenerated by \"CMake\" (https://github.com/rizsotto/Bear) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_cpp_clang_check_post_args' to an empty string: >\n    let g:syntastic_cpp_clang_check_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_check_config_file' are\nthen ignored.\n\nSee also: |syntastic-c-clang_check|.\n\n------------------------------------------------------------------------------\n3. Clang-Tidy                                       *syntastic-cpp-clang_tidy*\n\nName:        clang_tidy\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"Clang-Tidy\" is a lint tool based on \"Clang\" (http://clang.llvm.org/). See\nthe project's page for details:\n\n    http://clang.llvm.org/extra/clang-tidy.html\n\nInstallation~\n\n\"Clang-Tidy\" is part of the \"Clang\" (http://clang.llvm.org/) project, but it\nisn't built by default. You need to enable compilation of the \"Extra Clang\nTools\" (http://clang.llvm.org/docs/ClangTools.html#extra-clang-tools) to get\nit. See the build tutorial for details:\n\n    http://clang.llvm.org/docs/LibASTMatchersTutorial.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                        'g:syntastic_clang_tidy_config_file'\nType: string\nDefault: \".syntastic_clang_tidy_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangTidy\" parameters in\n'g:syntastic_cpp_clang_tidy_args', and compilation parameters (defines,\noptimisation flags, etc.) in the configuration file.\n\nIf you want \"ClangTidy\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_cpp_clang_tidy_post_args' to an empty string: >\n    let g:syntastic_cpp_clang_tidy_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_tidy_config_file' are\nthen ignored.\n\nSee also: |syntastic-c-clang_tidy|.\n\n------------------------------------------------------------------------------\n4. Cppcheck                                           *syntastic-cpp-cppcheck*\n\nName:        cppcheck\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Cppcheck\" is a static analysis tool for C/C++ code. See the project's page\nfor details:\n\n    http://cppcheck.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          'g:syntastic_cppcheck_config_file'\nType: string\nDefault: \".syntastic_cppcheck_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-c-cppcheck|.\n\n------------------------------------------------------------------------------\n5. cppclean                                           *syntastic-cpp-cppclean*\n\nName:        cppclean\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"cppclean\" attempts to find problems in C++ source that slow development in\nlarge code bases, for example various forms of unused code. See the project's\npage at GitHub for more information:\n\n    https://github.com/myint/cppclean\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install cppclean\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-c-cppclean|.\n\n------------------------------------------------------------------------------\n6. Cpplint                                             *syntastic-cpp-cpplint*\n\nName:        cpplint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nFor details about \"Cpplint\" see the project's page:\n\n    https://code.google.com/p/google-styleguide/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                             *'g:syntastic_cpp_cpplint_thres'*\nType: integer\nDefault: 5\nError threshold. Policy violations with a severity above this value are\nhighlighted as errors, the others are considered warnings by syntastic.\n\n                                              *'g:syntastic_cpp_cpplint_args'*\nType: string\nDefault: \"--verbose=3\"\nCommand line options to pass to \"Cpplint\"\n\nNote~\n\nBy default syntastic expects the \"cpplint\" script to be named \"cpplint.py\".\nHowever, if your \"cpplint\" was installed with \"pip\", the script's name is\n\"cpplint\", and you need to set 'g:syntastic_cpp_cpplint_exec' accordingly:\n>\n    let g:syntastic_cpp_cpplint_exec = \"cpplint\"\n<\n------------------------------------------------------------------------------\n7. Flawfinder                                       *syntastic-cpp-flawfinder*\n\nName:        flawfinder\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Flawfinder\" scans C/C++ source code for possible security weaknesses. See the\nproject's page for more information:\n\n    https://www.dwheeler.com/flawfinder\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          *'g:syntastic_cpp_flawfinder_thres'*\nType: integer\nDefault: 3\nError threshold. Policy violations with a severity above this value are\nhighlighted as errors, the others are considered warnings by syntastic.\n\nSee also: |syntastic-c-flawfinder|.\n\n------------------------------------------------------------------------------\n8. GCC                                                     *syntastic-cpp-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                                  *'g:syntastic_cpp_compiler'*\nType: string\nDefault: \"g++\", or \"clang++\" if GCC is not found\nCompiler executable.\n\n                                               *'g:syntastic_cpp_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                     *'g:syntastic_cpp_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                          *'g:syntastic_cpp_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                               *'g:syntastic_cpp_config_file'*\nType: string\nDefault: \".syntastic_cpp_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                              *'g:syntastic_cpp_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it to something like this: >\n    let g:syntastic_cpp_include_dirs = [\"includes\", \"headers\"]\n>\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                   *'g:syntastic_cpp_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                         *'g:syntastic_cpp_no_include_search'*\nType: boolean\nDefault: 0\nBy default syntastic looks at the first 100 lines of the file being checked,\nand tries to determine if it needs to include headers for some common\nlibraries, such as \"GLib\" or \"Gtk\". It then tries to add the corresponding\ninclude directories to the compilation flags. You can disable this behaviour\nby setting the above variable to 1.\n\n                                     *'g:syntastic_cpp_auto_refresh_includes'*\nType: boolean\nDefault: 0\nUsed only if \"g:syntastic_cpp_no_include_search\" is set to a false value.\nBy default syntastic searches for common libraries only the first time the\ncurrent file is checked. Setting the above variable to 1 instructs syntastic\nto refresh the list of common libraries every time the current file is\nchecked. You can also force a refresh even when the above variable is 0, by\n`:unlet`-ing the buffer variable 'b:syntastic_cpp_includes'.\n\n                                                    *'b:syntastic_cpp_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. When set, no search for common libraries is performed,\nand the contents of the variable are added to the compilation flags.\n\n                                              *'g:syntastic_cpp_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\", \"hpp\", or\n\"hh\"), all checks are silently skipped. You can force syntastic to check\nheader files by setting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_cpp_gcc_<option>' variables. The only exception is\n'g:syntastic_cpp_gcc_exec', which can still be used to override the linter's\nexecutable.\n\nSee also: |syntastic-c-gcc|.\n\n------------------------------------------------------------------------------\n9. OClint                                               *syntastic-cpp-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: \".syntastic_oclint_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNotes~\n\nBy default you can set \"OClint\" parameters in 'g:syntastic_cpp_oclint_args',\nand compilation parameters (defines, optimisation flags, etc.) in the config\nfile.\n\nIf you want \"OClint\" to use \"Clang\"-style compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_oclint_post_args' to an empty string: >\n    let g:syntastic_cpp_oclint_post_args = \"\"\n<\nConfig files pointed to by 'g:syntastic_oclint_config_file' are then ignored.\n\nSee also: |syntastic-c-oclint|.\n\n------------------------------------------------------------------------------\n10. PC-Lint                                            *syntastic-cpp-pc_lint*\n\nName:        pc_lint\nMaintainer:  Steve Bragg <steve@empresseffects.com>\n\n\"PC-Lint\" is a commercial static code analysis tool for Windows, produced\nby \"Gimpel Software\" (http://www.gimpel.com/). See the project's page for\ndetails:\n\n    http://www.gimpel.com/html/pcl.htm\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                           'g:syntastic_pc_lint_config_file'\nType: string\nDefault: \"options.lnt\"\nName of an indirect (.lnt) file. A file with that name is looked up in the\ncurrent directory and in parent directories; first such file found is used.\n\nSee also: |syntastic-c-pc_lint|.\n\n------------------------------------------------------------------------------\n11. Vera++                                              *syntastic-cpp-verapp*\n\nName:        verapp\nMaintainer:  Lucas Verney <phyks@phyks.me>\n\n\"Vera++\" is a programmable tool for verification, analysis and transformation\nof C++ source code. See the project's page for details:\n\n    https://bitbucket.org/verateam/vera/wiki/Home\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_verapp_config_file'*\nType: string\nDefault: \".syntastic_verapp_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n==============================================================================\nSYNTAX CHECKERS FOR CABAL                           *syntastic-checkers-cabal*\n\nThe following checkers are available for Cabal (filetype \"cabal\"):\n\n    1. Cabal....................|syntastic-cabal-cabal|\n\n------------------------------------------------------------------------------\n1. Cabal                                               *syntastic-cabal-cabal*\n\nName:        cabal\nMaintainer:  Ian D. Bollinger <ian.bollinger@gmail.com>\n\nThis checker runs \"cabal check\" against Haskell Cabal package descriptions.\nSee the project's page for more information:\n\n    http://www.haskell.org/cabal/\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_cabal_cabal_<option>' variables. The only exception\nis 'g:syntastic_cabal_cabal_exec', which can still be used to override the\nlinter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR CHEF                             *syntastic-checkers-chef*\n\nThe following checkers are available for Chef (filetype \"chef\"):\n\n    1. Foodcritic...............|syntastic-chef-foodcritic|\n\n------------------------------------------------------------------------------\n1. Foodcritic                                      *syntastic-chef-foodcritic*\n\nName:        foodcritic\nMaintainer:  Doug Ireton\n\n\"Foodcritic\" is a linter for \"Chef\" cookbooks (http://www.opscode.com/chef/).\nSee the project's page for more information:\n\n    http://acrmp.github.io/foodcritic/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Chef files, such as\n\"vim-chef\":\n\n    https://github.com/dougireton/vim-chef\n\n==============================================================================\nSYNTAX CHECKERS FOR CMAKE                           *syntastic-checkers-cmake*\n\nThe following checkers are available for CMake (filetype \"cmake\"):\n\n    1. cmakelint................|syntastic-cmake-cmakelint|\n\n------------------------------------------------------------------------------\n1. cmakelint                                       *syntastic-cmake-cmakelint*\n\nName:        cmakelint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"cmakelint\" is a style linter for \"CMake\" files (https://cmake.org/).\nSee the project's page at GitHub more information:\n\n    https://github.com/richq/cmake-lint\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install cmakelint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR COBOL                           *syntastic-checkers-cobol*\n\nThe following checkers are available for COBOL (filetype \"cobol\"):\n\n    1. OpenCOBOL................|syntastic-cobol-cobc|\n\n------------------------------------------------------------------------------\n1. OpenCOBOL                                            *syntastic-cobol-cobc*\n\nName:        cobc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"OpenCOBOL\" is a compiler for COBOL. See the project's page for more\ninformation:\n\n    http://www.opencobol.org/\n\nChecker options~\n                                                *'g:syntastic_cobol_compiler'*\nType: string\nDefault: \"cobc\"\nCompiler executable.\n\n                                             *'g:syntastic_cobol_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                   *'g:syntastic_cobol_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                        *'g:syntastic_cobol_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as \"-std=cobol2002\") to be passed to the linter.\n\n                                             *'g:syntastic_cobol_config_file'*\nType: string\nDefault: \".syntastic_cobol_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                            *'g:syntastic_cobol_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it to something like this: >\n    let g:syntastic_cobol_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                  *'b:syntastic_cobol_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_cobol_cobc_<option>' variables. The only exception\nis 'g:syntastic_cobol_cobc_exec', which can still be used to override the\nlinter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR COCO                               *syntastic-checkers-co*\n\nThe following checkers are available for Coco (filetype \"co\"):\n\n    1. Coco.....................|syntastic-co-coco|\n\n------------------------------------------------------------------------------\n1. Coco                                                    *syntastic-co-coco*\n\nName:        coco\nMaintainer:  Andrew Kelley <superjoe30@gmail.com>\n\nFor details about \"Coco\" see the project's page:\n\n    https://github.com/satyr/coco/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR COFFEESCRIPT                   *syntastic-checkers-coffee*\n\nThe following checkers are available for CoffeeScript (filetype \"coffee\"):\n\n    1. Coffee...................|syntastic-coffee-coffee|\n    2. Coffee->JSHint...........|syntastic-coffee-coffee_jshint|\n    3. CoffeeLint...............|syntastic-coffee-coffeelint|\n\n------------------------------------------------------------------------------\n1. Coffee                                            *syntastic-coffee-coffee*\n\nName:        coffee\nMaintainer:  Lincoln Stoll <l@lds.li>\n\n\"Coffee\" is a compiler for CoffeeScript. See the project's page for details:\n\n    http://coffeescript.org/\n\nSyntastic requires \"Coffee\" version 1.6.2 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Coffee->JSHint                             *syntastic-coffee-coffee_jshint*\n\nName:        coffee_jshint\nMaintainer:  John Krauss <john@johnkrauss.com>\n\n\"Coffee->JSHint\" is a JSHint validator for CoffeeScript. See the project's\npage at GitHub for details:\n\n    https://github.com/marviq/coffee-jshint\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g coffee-jshint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\nAccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. CoffeeLint                                    *syntastic-coffee-coffeelint*\n\nName:        coffeelint\nMaintainer:  Lincoln Stoll <l@lds.li>\n\n\"CoffeeLint\" is a style linter for CoffeeScript. See the project's page for\ndetails:\n\n    http://www.coffeelint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR COQ                               *syntastic-checkers-coq*\n\nThe following checkers are available for Coq (filetype \"coq\"):\n\n    1. Coqtop...................|syntastic-coq-coqtop|\n\n------------------------------------------------------------------------------\n1. Coqtop                                               *syntastic-coq-coqtop*\n\nName:        coqtop\nMaintainer:  Matvey Aksenov <matvey.aksenov@gmail.com>\n\n\"Coqtop\" is the top level interface for Coq. See the project's page for\ndetails:\n\n    http://coq.inria.fr/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR CSS                               *syntastic-checkers-css*\n\nThe following checkers are available for CSS (filetype \"css\"):\n\n    1. CSSLint..................|syntastic-css-csslint|\n    2. mixedindentlint..........|syntastic-css-mixedindentlint|\n    3. PHP_CodeSniffer..........|syntastic-css-phpcs|\n    4. PrettyCSS................|syntastic-css-prettycss|\n    5. RECESS...................|syntastic-css-recess|\n    6. stylelint................|syntastic-css-stylelint|\n\n------------------------------------------------------------------------------\n1. CSSLint                                             *syntastic-css-csslint*\n\nName:        csslint\nMaintainer:  Ory Band <oryband@gmail.com>\n\n\"CSSLint\" is a lint tool for Cascading Stylesheets. See the project's page\nfor details:\n\n    http://csslint.net/\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g csslint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. mixedindentlint                             *syntastic-css-mixedindentlint*\n\nName:        mixedindentlint\nMaintainer:  Payton Swick <payton@foolord.com>\n\n\"mixedindentlint\" is a general-purpose indentation linter. See the project's\npage at GitHub for more information:\n\n    https://github.com/sirbrillig/mixedindentlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-javascript-mixedindentlint|, |syntastic-scss-mixedindentlint|.\n\n------------------------------------------------------------------------------\n3. PHP_CodeSniffer                                       *syntastic-css-phpcs*\n\nName:        phpcs\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"PHP_CodeSniffer\" is a style linter for PHP and CSS. See the project's page\nat GitHub for details:\n\n    https://github.com/squizlabs/PHP_CodeSniffer/\n\nInstallation~\n\nInstall it with: >\n    pear install PHP_CodeSniffer\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"PHP_CodeSniffer\"'s\nidea of tabstop must match Vim's 'tabstop', otherwise syntastic will highlight\nthe errors at shifted positions. By default syntastic does that by adding\nan option \"--tab-width=&tabstop\" to \"PHP_CodeSniffer\", but that option\nalso instructs \"PHP_CodeSniffer\" to expand tabs, and some code sniffers\n(f.i. \"CakePHP\", see https://github.com/cakephp/cakephp-codesniffer) insist on\nindenting lines with tabs. To work around the resulting mess if you're using\none of these sniffers, set \"--tab-width=0\" and 'tabstop' to 8: >\n    let g:syntastic_php_phpcs_args = \"--tab-width=0\"\n    set tabstop=8\n<\nSee also: |syntastic-php-phpcs|.\n\n------------------------------------------------------------------------------\n4. PrettyCSS                                         *syntastic-css-prettycss*\n\nName:        prettycss\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"PrettyCSS\" is a beautifier, lint checker, and validator for Cascading\nStylesheets. For more details see:\n\nPrettyCSS Demo:\n\n    http://fidian.github.io/PrettyCSS/\n\nThe project's page at GitHub:\n\n    https://github.com/fidian/PrettyCSS/\n\nInstallation~\n\nInstall it with: >\n    npm install -g PrettyCSS\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. RECESS                                               *syntastic-css-recess*\n\nName:        recess\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"RECESS\" is a code quality tool for CSS built on top of LESS. See the\nproject's page for details:\n\n    http://twitter.github.io/recess/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-less-recess|.\n\n------------------------------------------------------------------------------\n6. stylelint                                         *syntastic-css-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-stylelint|, |syntastic-less-stylelint|,\n|syntastic-scss-stylelint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR CUCUMBER                     *syntastic-checkers-cucumber*\n\nThe following checkers are available for Cucumber (filetype \"cucumber\"):\n\n    1. Cucumber.................|syntastic-cucumber-cucumber|\n\n------------------------------------------------------------------------------\n1. Cucumber                                      *syntastic-cucumber-cucumber*\n\nName:        cucumber\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Cucumber\" is a tool that executes plain-text functional descriptions as\nautomated tests. See the project's page for more information:\n\n    http://cukes.info/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR CUDA                             *syntastic-checkers-cuda*\n\nThe following checkers are available for CUDA (filetype \"cuda\"):\n\n    1. NVCC.....................|syntastic-cuda-nvcc|\n\n------------------------------------------------------------------------------\n1. NVCC                                                  *syntastic-cuda-nvcc*\n\nName:        nvcc\nAuthor: Hannes Schulz <schulz@ais.uni-bonn.de>\n\n\"NVCC\" is a CUDA Compiler from nVidia. See the project's page for details:\n\n    https://developer.nvidia.com/cuda-llvm-compiler\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                             *'g:syntastic_cuda_check_header'*\nType: boolean\nDefault: 0\nTurn this on to check header files.  The checker then creates an empty file\n\".syntastic_dummy.cu\" in the base directory of the file being checked.\nExample: >\n    let g:syntastic_cuda_check_header = 1\n<\n                                              *'g:syntastic_cuda_config_file'*\nType: string\nDefault: \".syntastic_cuda_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n==============================================================================\nSYNTAX CHECKERS FOR D                                   *syntastic-checkers-d*\n\nThe following checkers are available for D (filetype \"d\"):\n\n    1. DMD......................|syntastic-d-dmd|\n    2. D-Scanner................|syntastic-d-dscanner|\n\n------------------------------------------------------------------------------\n1. DMD                                                       *syntastic-d-dmd*\n\nName:        dmd\nMaintainer:  Alfredo Di Napoli <alfredo.dinapoli@gmail.com>\n\nChecker options~\n                                                    *'g:syntastic_d_compiler'*\nType: string\nDefault: \"dmd\"\nCompiler executable.\n\n                                                 *'g:syntastic_d_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                       *'g:syntastic_d_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                            *'g:syntastic_d_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                                 *'g:syntastic_d_config_file'*\nType: string\nDefault: \".syntastic_d_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                                *'g:syntastic_d_include_dirs'*\nType: array of strings\nDefault: inferred from \".dub/packages\"\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_d_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                     *'g:syntastic_d_use_dub'*\nType: boolean\nDefault: 1\nWhether to use \"dub\" to find include directories. This requires \"dub\" version\n0.9.24 or later.\n\n                                                    *'g:syntastic_d_dub_exec'*\nType: string\nDefault: \"dub\"\nPath to the \"dub\" executable. Ignored if |'g:syntastic_d_use_dub'| is unset.\n\n                                                      *'b:syntastic_d_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                                *'g:syntastic_d_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"di\"), all checks\nare silently skipped. You can force syntastic to check header files by setting\nthe above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_d_dmd_<option>' variables. The only exception is\n'g:syntastic_d_dmd_exec', which can still be used to override the linter's\nexecutable.\n\n------------------------------------------------------------------------------\n2. D-Scanner                                            *syntastic-d-dscanner*\n\nName:        dscanner\nMaintainer:  ANtlord\n\n\"D-Scanner\" is a tool for analyzing D source code (https://dlang.org/). See\nthe project's page at GitHub for more information:\n\n    https://github.com/Hackerpilot/Dscanner\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DART                             *syntastic-checkers-dart*\n\nThe following checkers are available for Dart (filetype \"dart\"):\n\n    1. Analyzer.................|syntastic-dart-dartanalyzer|\n\n------------------------------------------------------------------------------\n1. Analyzer                                      *syntastic-dart-dartanalyzer*\n\nName:        dartanalyzer\nMaintainer:  Maksim Ryzhikov <rv.maksim@gmail.com>\n\n\"Analyzer\" is a static analysis tool for Dart (https://www.dartlang.org/).\nSee the manual for more information:\n\n    https://www.dartlang.org/tools/analyzer/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DOCBOOK                         *syntastic-checkers-docbk*\n\nThe following checkers are available for DocBook (filetype \"docbk\"):\n\n    1. Igor.....................|syntastic-docbk-igor|\n    2. xmllint..................|syntastic-docbk-xmllint|\n\n------------------------------------------------------------------------------\n1. Igor                                                 *syntastic-docbk-igor*\n\nName:        igor\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Igor\" is a proofreader for DocBook SGML, man pages, and text files used by\nthe FreeBSD project (https://www.freebsd.org/). See the author's presentation\nfor details:\n\n    http://www.youtube.com/watch?v=sczHqUPygZY\n\nThe latest version can be obtained from Glen Barber's repository:\n\n    http://docscripts.glenbarber.us/tags/igor/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-nroff-igor|, |syntastic-text-igor|.\n\n------------------------------------------------------------------------------\n2. xmllint                                           *syntastic-docbk-xmllint*\n\nName:        xmllint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"xmllint\" is a linter and transformer tool for XML files, distributed with\nthe \"libxml\" package (http://www.xmlsoft.org/). See the tool's manual for more\ninformation:\n\n    http://xmlsoft.org/xmllint.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can use a local installation of DTDs to significantly speed up validation\nand allow you to validate XML data without network access. See the\n\"xmlcatalog\" manual, and the catalog documentation for more information:\n\n    http://www.xmlsoft.org/xmlcatalog_man.html\n    http://www.xmlsoft.org/catalog.html\n\nFor an example of a DTD catalog see f.i. \"XMLCatalog\":\n\n    https://github.com/darcyparker/XMLCatalog\n\nIn order to use it with syntastic you'll have to clone it to a local\ndirectory, and point the environment variable \"XML_CATALOG_FILES\" to the file\n\"catalog.xml\" in the said directory: >\n    XML_CATALOG_FILES=/some/path/XMLCatalog/catalog.xml\n    export XML_CATALOG_FILES\n<\nOtherwise \"xmllint\" will try to load XML catalogs from \"/etc/xml/catalog\".\n\nSee also: |syntastic-xml-xmllint|, |syntastic-xslt-xmllint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DOCKERFILE                 *syntastic-checkers-dockerfile*\n\nThe following checkers are available for Dockerfile (filetype \"dockerfile\"):\n\n    1. dockerfile-lint..........|syntastic-dockerfile-dockerfile_lint|\n    2. Hadolint.................|syntastic-dockerfile-hadolint|\n\n------------------------------------------------------------------------------\n1. dockerfile-lint                      *syntastic-dockerfile-dockerfile_lint*\n\nName:        dockerfile_lint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"dockerfile-lint\" is a linter for Dockerfiles\n(http://docs.docker.com/engine/reference/builder). See the project's page at\nGitHub for details:\n\n    https://github.com/projectatomic/dockerfile_lint\n\nInstallation~\n\nInstall it with: >\n    npm install -g dockerfile_lint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Hadolint                                    *syntastic-dockerfile-hadolint*\n\nName:        hadolint\nMaintainer:  Jesper B. Rosenkilde <jbr@humppa.dk>\n\n\"Hadolint\" is a dockerfile linter written in Haskell. See the project's page\nat GitHub for details:\n\n    https://github.com/lukasmartinelli/hadolint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DUST                           *syntastic-checkers-dustjs*\n\nThe following checkers are available for Dust (filetype \"dustjs\"):\n\n    1. Swiffer..................|syntastic-dustjs-swiffer|\n\n------------------------------------------------------------------------------\n1. Swiffer                                          *syntastic-dustjs-swiffer*\n\nName:        swiffer\nMaintainer:  Steven Foote <smfoote@gmail.com>\n\n\"Swiffer\" is a command line lint tool for Dust. See the project's page for\ndetails:\n\n    https://github.com/smfoote/Swiffer.js\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nTo enable Dust syntax checking, you must set the filetype of your Dust\ntemplate files to \"dustjs\". An easy way to do this is by installing the dustjs\nsyntax highlighter:\n\n    https://github.com/jimmyhchan/dustjs.vim\n\n==============================================================================\nSYNTAX CHECKERS FOR ELIXIR                         *syntastic-checkers-elixir*\n\nThe following checkers are available for Elixir (filetype \"elixir\"):\n\n    1. elixir...................|syntastic-elixir-elixir|\n\n------------------------------------------------------------------------------\n1. elixir                                            *syntastic-elixir-elixir*\n\nName:        elixir\nMaintainer:  Richard Ramsden <rramsden@gmail.com>\n\nSee the project's page for details:\n\n    http://elixir-lang.org/\n\nSecurity~\n\nThis checker executes the code in the files it checks:\n\n    https://github.com/vim-syntastic/syntastic/issues/1141\n\nThis is probably fine if you wrote the files yourself, but it can be a problem\nif you're trying to check third party files. If you are 100% willing to let\nVim run the code in your files, set 'g:syntastic_enable_elixir_checker' to 1\nin your vimrc to enable this checker: >\n    let g:syntastic_enable_elixir_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover a global one in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"elixir\" to 'g:syntastic_elixir_checkers' if\nyou plan to use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ERLANG                         *syntastic-checkers-erlang*\n\nThe following checkers are available for Erlang (filetype \"erlang\"):\n\n    1. escript..................|syntastic-erlang-escript|\n    2. SyntaxErl................|syntastic-erlang-syntaxerl|\n\n------------------------------------------------------------------------------\n1. escript                                          *syntastic-erlang-escript*\n\nName:        escript\nMaintainer:  Pawel Salata <rockplayer.pl@gmail.com>\n\n\"escript\" is an interpreter for Erlang programs. See the tool's manual for\nmore information:\n\n    http://www.erlang.org/doc/man/escript.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you get warning: \"behaviour X undefined\" with your customize behaviour, add\nthe following line in your vimrc: >\n    let g:syntastic_erlc_include_path = \"ebin\"\n<\n\n------------------------------------------------------------------------------\n2. SyntaxErl                                      *syntastic-erlang-syntaxerl*\n\nName:        syntaxerl\nMaintainer:  locojay\n\n\"SyntaxErl\" is a syntax linter for Erlang. It uses \"rebar\"\n(https://github.com/basho/rebar) to determine correct dependencies and library\npaths. See the project's page for more information:\n\n    https://github.com/ten0s/syntaxerl\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ERUBY                           *syntastic-checkers-eruby*\n\nThe following checkers are available for eRuby (filetype \"eruby\"):\n\n    1. Ruby.....................|syntastic-eruby-ruby|\n\n------------------------------------------------------------------------------\n1. Ruby                                                 *syntastic-eruby-ruby*\n\nName:        ruby\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n                                                     'g:syntastic_ruby_exec'\nType: string\nDefault: \"ruby\"\nThe Ruby executable to use.\n\nNote~\n\nThe variable 'g:syntastic_ruby_exec' is also used by the Ruby\n\"MRI\" checker (cf. |syntastic-ruby-mri|), and it can be overriden\nby 'g:syntastic_eruby_ruby_exec'. However, this checker doesn't\ncall the \"makeprgBuild()\" function, and thus it ignores all other\n'g:syntastic_eruby_ruby_<option>' variables.\n\n==============================================================================\nSYNTAX CHECKERS FOR FORTRAN                       *syntastic-checkers-fortran*\n\nThe following checkers are available for Fortran (filetype \"fortran\"):\n\n    1. GNU Fortran..............|syntastic-fortran-gfortran|\n\n------------------------------------------------------------------------------\n1. GNU Fortran                                    *syntastic-fortran-gfortran*\n\nName:        gfortran\nMaintainer:  Karl Yngve Lerv\u00e5g <karl.yngve@lervag.net>\n\n\"GNU Fortran\" is a checker for Fortran files using either GNU\nFortran (https://gcc.gnu.org/fortran/) or Intel Fortran Compilers\n(https://software.intel.com/en-us/fortran-compilers).\n\nChecker options~\n                                              *'g:syntastic_fortran_compiler'*\nType: string\nDefault: \"gfortran\"\nCompiler executable. Set this to either \"gfortran\" (to use GNU Fortran), or to\n\"ifort\" (for Intel Fortran).\n\n                                           *'g:syntastic_fortran_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                 *'g:syntastic_fortran_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                      *'g:syntastic_fortran_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as \"-std=f95\") to be passed to the linter.\n\n                                           *'g:syntastic_fortran_config_file'*\nType: string\nDefault: \".syntastic_fortran_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                          *'g:syntastic_fortran_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_fortran_include_dirs = [\"includes\", \"headers\"]\"\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                *'b:syntastic_fortran_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_fortran_gfortran_<option>' variables. The only\nexception is 'g:syntastic_fortran_gfortran_exec', which can still be used to\noverride the linter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR GENTOO METADATA                *syntastic-checkers-gentoo*\n\nThe following checkers are available for Gentoo Metadata (filetype \"gentoo\"):\n\n    1. xmllint..................|syntastic-gentoo-xmllint|\n\n------------------------------------------------------------------------------\n1. xmllint                                          *syntastic-gentoo-xmllint*\n\nName:        xmllint\nMaintainer:  James Rowe <jnrowe@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nThe DTDs required to validate \"metadata.xml\" files are available in\n\"$PORTDIR/metadata/dtd\", and these local files can be used to significantly\nspeed up validation. You can create a catalog file with: >\n    xmlcatalog --create --add rewriteURI http://www.gentoo.org/dtd/ \\\n        ${PORTDIR:-/usr/portage}/metadata/dtd/ /etc/xml/gentoo\n<\nSee \"xmlcatalog\" for more information:\n\n    http://www.xmlsoft.org/catalog.html\n\n==============================================================================\nSYNTAX CHECKERS FOR GETTEXT PO                         *syntastic-checkers-po*\n\nThe following checkers are available for gettext .po files (filetype \"po\"):\n\n    1. Dennis...................|syntastic-po-dennis|\n    2. msgfmt...................|syntastic-po-msgfmt|\n\n------------------------------------------------------------------------------\n1. Dennis                                                *syntastic-po-dennis*\n\nName:        dennis\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Dennis\" is a set of utilities for working with gettext Portable Object\n(http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html)\ntranslation files:\n\n    https://github.com/willkg/dennis/\n\nSee the program's manual for further details:\n\n    http://dennis.readthedocs.io/en/latest/linting.html\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install dennis\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. msgfmt                                                *syntastic-po-msgfmt*\n\nName:        msgfmt\nMaintainer:  Ryo Okubo <syucream1031@gmail.com>\n\n\"msgfmt\" is a compiler for gettext Portable Object\n(http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html)\ntranslation files.  See the program's manual for details:\n\n    http://www.gnu.org/software/gettext/manual/html_node/msgfmt-Invocation.html#msgfmt-Invocation\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR GLSL                             *syntastic-checkers-glsl*\n\nThe following checkers are available for GLSL (filetype \"glsl\"):\n\n    1. cgc......................|syntastic-glsl-cgc|\n\n------------------------------------------------------------------------------\n1. cgc                                                    *syntastic-glsl-cgc*\n\nName:        cgc\nMaintainer:  Joshua Rahm <joshuarahm@gmail.com>\n\n\"cgc\" is a compiler that translates Cg or GLSL programs into OpenGL or DirectX\ncode. See the manual for more details:\n\n    http://http.developer.nvidia.com/Cg/cgc.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                               *'g:syntastic_glsl_extensions'*\nType: dictionary\nDefault: unset\n\nYou can control the profiles used by \"cgc\" with magic comments: put the magic\ncomment \"// profile:\" followed by the profile for \"cgc\" to use.  For example\nuse >\n    // profile: glslf\n<\nto force the fragment shader profile.\n\nIf the magic comment does not exist, then the dictionary\n'g:syntastic_glsl_extensions' is used to infer the appropriate profile from\nthe current file's extension. If this dictionary does not exist either, a\ndefault dictionary is used instead. Finally, if the current file's extension\ncannot be found in these dictionaries, the checker assumes a vertex shader\nprofile.\n\n                                                  *'g:syntastic_glsl_options'*\nType: string\nDefault: unset\nAdditional arguments to pass to \"cgc\".\n\nNote~\n\nYou probably also need a plugin to set |filetype| for OpenGL files, such as\n\"vim-glsl\":\n\n    https://github.com/tikhomirov/vim-glsl\n\n==============================================================================\nSYNTAX CHECKERS FOR GO                                 *syntastic-checkers-go*\n\nThe following checkers are available for Go (filetype \"go\"):\n\n    1. go.......................|syntastic-go-go|\n    2. gofmt....................|syntastic-go-gofmt|\n    3. Golint...................|syntastic-go-golint|\n    4. Go Meta Linter...........|syntastic-go-gometalinter|\n    5. gotype...................|syntastic-go-gotype|\n    6. vet......................|syntastic-go-govet|\n\n------------------------------------------------------------------------------\n1. go                                                        *syntastic-go-go*\n\nName:        go\nMaintainer:  Kamil Kisiel <kamil@kamilkisiel.net>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                              *'g:syntastic_go_go_build_args'*\nType: string\nDefault: \"-buildmode=archive\"\narguments passed to \"go build\"\n\n                                               *'g:syntastic_go_go_test_args'*\nType: string\nDefault: \"-buildmode=archive\"\narguments passed to \"go test\".\n\nNote~\n\nThis syntax checker does not reformat your source code.  Use a |BufWritePre|\nautocommand towards that end: >\n    autocmd FileType go autocmd BufWritePre <buffer> Fmt\n<\n------------------------------------------------------------------------------\n2. gofmt                                                  *syntastic-go-gofmt*\n\nName:        gofmt\nMaintainer:  Brandon Thomson <bt@brandonthomson.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nThis syntax checker does not reformat your source code.  Use a |BufWritePre|\nautocommand towards that end: >\n    autocmd FileType go autocmd BufWritePre <buffer> Fmt\n<\n------------------------------------------------------------------------------\n3. Golint                                                *syntastic-go-golint*\n\nName:        golint\nMaintainer: Hiroshi Ioka <hirochachacha@gmail.com>\n\n\"Golint\" is a linter for Go. See the project's page for details:\n\n    https://github.com/golang/lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. Go Meta Linter                                  *syntastic-go-gometalinter*\n\nName:        gometalinter\nMaintainer: Joshua Rubin <joshua@rubixconsulting.com>\n\n\"Go Meta Linter\" is a linter for Go. It runs a number of other linters\nagainst your files, and normalises their output to a standard format.\nSee the project's page at GitHub for details:\n\n    https://github.com/alecthomas/gometalinter\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. gotype                                                *syntastic-go-gotype*\n\nName:        gotype\nMaintainer:  luz <ne.tetewi@gmail.com>\n\nSee the tool's documentation for details:\n\n    https://godoc.org/golang.org/x/tools/cmd/gotype\n\n------------------------------------------------------------------------------\n6. vet                                                    *syntastic-go-govet*\n\nName:        govet\nMaintainer:  Kamil Kisiel <kamil@kamilkisiel.net>\n\nSee the tool's documentation for details:\n\n    https://godoc.org/cmd/vet\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_go_govet_<option>' variables.\n\n==============================================================================\nSYNTAX CHECKERS FOR HAML                             *syntastic-checkers-haml*\n\nThe following checkers are available for Haml (filetype \"haml\"):\n\n    1. Haml.....................|syntastic-haml-haml|\n    2. HAML-Lint................|syntastic-haml-haml_lint|\n\n------------------------------------------------------------------------------\n1. Haml                                                  *syntastic-haml-haml*\n\nName:        haml\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nSee the project's page for details:\n\n    http://haml.info/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. HAML-Lint                                        *syntastic-haml-haml_lint*\n\nName:        haml_lint\nMaintainer:  Shane da Silva <shane@dasilva.io>\n\n\"HAML-Lint\" is a linter for HAML files. See the project's page for details:\n\n    https://github.com/causes/haml-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR HANDLEBARS                 *syntastic-checkers-handlebars*\n\nThe following checkers are available for Handlebars (filetype \"handlebars\"):\n\n    1. Handlebars...............|syntastic-handlebars-handlebars|\n\n------------------------------------------------------------------------------\n1. Handlebars                                *syntastic-handlebars-handlebars*\n\nName:        handlebars\nMaintainer:  Jeremy Mack\n\n\"Handlebars\" is a JavaScript library for building semantic templates. See the\nproject's page for details:\n\n    http://handlebarsjs.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Handlebars files, such as\n\"vim-mustache-handlebars\":\n\n    https://github.com/mustache/vim-mustache-handlebars\n\n==============================================================================\nSYNTAX CHECKERS FOR HASKELL                       *syntastic-checkers-haskell*\n\nThe following checkers are available for Haskell (filetype \"haskell\"):\n\n    1. hdevtools................|syntastic-haskell-hdevtools|\n    2. HLint....................|syntastic-haskell-hlint|\n    3. Style scanner............|syntastic-haskell-scan|\n\n------------------------------------------------------------------------------\n1. hdevtools                                     *syntastic-haskell-hdevtools*\n\nName:        hdevtools\nMaintainer:  Anthony Carapetis <anthony.carapetis@gmail.com>\n\n\"hdevtools\" is a backend for text editor plugins. See the project's page at\nGitHub for details:\n\n    https://github.com/bitc/hdevtools/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters, then Vim's 'tabstop'\nmust match \"hdevtools\"'s idea of tabstop, otherwise column numbers will be\nshifted. At the time of this writing, \"hdevtools\"'s tabstop is hardcoded to 8,\nso you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\n------------------------------------------------------------------------------\n2. HLint                                             *syntastic-haskell-hlint*\n\nName:        hlint\nMaintainer:  Nicolas Wu <nicolas.wu@gmail.com>\n\n\"HLint\" is a linter and style checker for Haskell. See the project's page for\ndetails:\n\n    http://community.haskell.org/~ndm/hlint/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters, Vim's 'tabstop' must\nmatch \"HLint\"'s idea of tabstop, otherwise column numbers will be shifted. At\nthe time of this writing \"HLint\"'s tabstop is hardcoded to 8, so you should\nprobably add something like this to your vimrc: >\n    set tabstop=8\n<\n------------------------------------------------------------------------------\n3. Style scanner                                      *syntastic-haskell-scan*\n\nName:        scan\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Style scanner\" is a style linter for Haskell. See the project's page for\ndetails:\n\n    http://projects.haskell.org/style-scanner/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters, Vim's 'tabstop' must\nmatch \"Style scanner\"'s idea of tabstop, otherwise column numbers will be\nshifted. At the time of this writing \"Style scanner\"'s tabstop is hardcoded to\n8, so you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\n==============================================================================\nSYNTAX CHECKERS FOR HAXE                             *syntastic-checkers-haxe*\n\nThe following checkers are available for Haxe (filetype \"haxe\"):\n\n    1. Haxe.....................|syntastic-haxe-haxe|\n\n------------------------------------------------------------------------------\n1. Haxe                                                  *syntastic-haxe-haxe*\n\nName:        haxe\nMaintainer:  David Bernard <david.bernard.31@gmail.com>\n\n\"Haxe\" is a programming language and compiler that can produce applications\nand source code for multiple different platforms from a single code-base. See\nthe project's page for details:\n\n    http://haxe.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                                               *'g:vaxe_hxml'*\n                                                               *'b:vaxe_hxml'*\nType: string\nDefault: unset\nBy default the checker will search parent folders for \"hxml\" files, and\nuse the first one it finds. You can override that behaviour by pointing\n'g:vaxe_hxml' or 'b:vaxe_hxml' to a specific build file. Those variables can\nalso be set by Vaxe:\n\n    https://github.com/jdonaldson/vaxe\n\n==============================================================================\nSYNTAX CHECKERS FOR HSS                               *syntastic-checkers-hss*\n\nThe following checkers are available for HSS (filetype \"hss\"):\n\n    1. HSS......................|syntastic-hss-hss|\n\n------------------------------------------------------------------------------\n1. HSS                                                     *syntastic-hss-hss*\n\nName:        hss\nMaintainer:  Justin Donaldson <jdonaldson@gmail.com>\n\n\"HSS\" is a tool that extends the CSS syntax with features such as variables\nand nested blocks. See the project's page for details:\n\n    http://ncannasse.fr/projects/hss\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR HTML                             *syntastic-checkers-html*\n\nThe following checkers are available for HTML (filetype \"html\"):\n\n    1. ESLint...................|syntastic-html-eslint|\n    2. gjslint..................|syntastic-html-gjslint|\n    3. HTML tidy................|syntastic-html-tidy|\n    4. HTMLHint.................|syntastic-html-htmlhint|\n    5. JSHint...................|syntastic-html-jshint|\n    6. proselint................|syntastic-html-proselint|\n    7. stylelint................|syntastic-html-stylelint|\n    8. textlint.................|syntastic-html-textlint|\n    9. Validator................|syntastic-html-validator|\n    10. W3......................|syntastic-html-w3|\n\n------------------------------------------------------------------------------\n1. ESLint                                              *syntastic-html-eslint*\n\nName:        eslint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found in\nECMAScript/JavaScript code. It can also detect problems in JavaScript code\nembedded in HTML files. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nAutomatically fixing errors (option \"--fix\") is not supported.\n\nYou can also use \"eslint_d\" (https://github.com/mantoni/eslint_d.js), version\n2.1.0 or later, instead of \"ESLint\". Just point 'g:syntastic_html_eslint_exec'\nto it:\n\n    https://github.com/mantoni/eslint_d.js#editor-integration\n\nSee also: |syntastic-javascript-eslint|, |syntastic-typescript-eslint|,\n|syntastic-vue-eslint|.\n\n------------------------------------------------------------------------------\n2. gjslint                                            *syntastic-html-gjslint*\n\nName:        gjslint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Closure Linter\", or \"gjslint\", is a style linter for JavaScript. It can also\ndetect problems in HTML files. See the project's page for more information:\n\n    https://developers.google.com/closure/utilities/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-javascript-gjslint|.\n\n------------------------------------------------------------------------------\n3. HTML tidy                                             *syntastic-html-tidy*\n\nName:        tidy\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"HTML Tidy\" is a syntax linter and formatter for HTML. See the project's page\nfor more information:\n\n    http://www.html-tidy.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       *'g:syntastic_html_tidy_ignore_errors'*\nType: array of strings\nDefault: []\nList of errors to ignore. Case-sensitive patterns matched as substrings\n(not regular expressions) against the error messages. See also\n|'syntastic_quiet_messages'|.\n\n                                     *'g:syntastic_html_tidy_blocklevel_tags'*\nType: array of strings\nDefault: []\nList of additional blocklevel tags to be added to \"--new-blocklevel-tags\".\n\n                                         *'g:syntastic_html_tidy_inline_tags'*\nType: array of strings\nDefault: []\nList of additional inline tags to be added to \"--new-inline-tags\".\n\n                                          *'g:syntastic_html_tidy_empty_tags'*\nType: array of strings\nDefault: []\nList of additional empty tags, to be added to \"--new-empty-tags\".\n\nSee also: |syntastic-xhtml-tidy|.\n\n------------------------------------------------------------------------------\n4. HTMLHint                                          *syntastic-html-htmlhint*\n\nName:        HTMLHint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"HTMLHint\" is a static code analysis tool for HTML. See the project's page for\ndetails:\n\n    http://htmlhint.com/\n\nSyntastic requires \"HTMLHint\" version 0.9.13 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. jshint                                              *syntastic-html-jshint*\n\nName:        JSHint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"JSHint\" can detect JavaScript errors and potential problems in HTML\nfiles. See the project's page for details:\n\n    http://jshint.com/\n\nSyntastic requires \"JSHint\" version 2.4.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"JSHint\"'s idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default \"JSHint\"'s tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (cf. http://jshint.com/docs/options/#indent). One way to do that is\nto put it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin \"JSHint\". If that is undesirable, your only other option is to leave\n\"JSHint\"'s tabstop alone, and change Vim's 'tabstop' to 4. To change Vim's\n'tabstop', you can add this to your vimrc: >\n    set tabstop=4\n<\nSee also: |syntastic-javascript-jshint|, |syntastic-xhtml-jshint|.\n\n------------------------------------------------------------------------------\n6. proselint                                        *syntastic-html-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-markdown-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n7. stylelint                                        *syntastic-html-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-stylelint|, |syntastic-less-stylelint|,\n|syntastic-scss-stylelint|.\n\n------------------------------------------------------------------------------\n8. textlint                                          *syntastic-html-textlint*\n\nName:        textlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"textlint\" is a natural language linter for text, Markdown, and HTML files.\nSee the project's page for details:\n\n    https://textlint.github.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou need to install both \"textlint\" and the \"textlint HTML\" plugin for this to\nwork:\n\n    https://github.com/textlint/textlint-plugin-html\n\nSee also: |syntastic-markdown-textlint|, |syntastic-text-textlint|.\n\n------------------------------------------------------------------------------\n9. Validator                                        *syntastic-html-validator*\n\nName:        validator\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Validator\" is a non-DTD-based HTML linter.  See the project's page for\ndetails:\n\n    http://validator.github.io/validator/\n\nAs a syntastic linter, you can validate your files against the online service\n(see https://validator.nu/), or you can install \"vnu.jar\":\n\n    https://github.com/validator/validator/releases/latest\n\nthen run it as a HTTP server: >\n    $ java -Xss512k -cp /path/to/vnu.jar nu.validator.servlet.Main 8888\n<\nRequirement~\n\nThis checker uses cURL:\n\n    http://curl.haxx.se/\n\nChecker options~\n\n                                            *'g:syntastic_html_validator_api'*\nType: string\nDefault: \"http://validator.nu/\"\nURL of the service to use for checking. Leave it to the default to run the\nchecks against \"https://validator.nu/\", or set it to \"http://localhost:8888/\"\nif you have \"vnu.jar\" installed, and you're running it as a standalone HTTP\nserver. See:\n\n    http://validator.github.io/validator/#standalone\n\n                                         *'g:syntastic_html_validator_parser'*\nType: string\nDefault: empty\nParser to use. Legal values are: \"xml\", \"xmldtd\", \"html\", \"html5\", \"html4\",\nand \"html4tr\". Set it to \"html5\" to check HTML5 files. References:\n\n    https://wiki.whatwg.org/wiki/Validator.nu_Common_Input_Parameters#parser\n\n                                       *'g:syntastic_html_validator_nsfilter'*\nType: string\nDefault: empty\nSets the \"nsfilter\" for the parser. See:\n\n    https://wiki.whatwg.org/wiki/Validator.nu_Common_Input_Parameters#nsfilter\n\n                                           *'g:syntastic_html_validator_exec'*\nType: string\nDefault: \"curl\"\nPath to the \"cURL\" executable. Override it with a full path if your \"cURL\" is\nnot installed in a standard location.\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_html_validator_<option>' variables. The only exception\nis 'g:syntastic_html_validator_exec', which can be used to override the path\nto the \"cURL\" executable.\n\nNote~\n\nNon-zero exit codes from \"cURL\" are typically network errors, and are signaled\nby syntastic with messages such as: >\n    syntastic: error: checker html/validator returned abnormal status 26\n<\nYou can lookup the meaning of these codes in cURL's manual:\n    \n    http://curl.haxx.se/docs/manpage.html#EXIT\n\n------------------------------------------------------------------------------\n10. W3                                                     *syntastic-html-w3*\n\nName:        w3\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"W3\" is the W3C Markup Validator for HTML.  See the project's page for\ndetails:\n\n    https://validator.w3.org/source/\n\nAs a syntastic linter, you can validate your files against the online service\n(see http://validator.w3.org/), or you can install it from sources and run it\nas a local service:\n\n    https://github.com/w3c/markup-validator/\n\nRequirement~\n\nThis checker uses cURL:\n\n    http://curl.haxx.se/\n\nChecker options~\n\n                                                   *'g:syntastic_html_w3_api'*\nType: string\nDefault: \"http://validator.w3.org/check\"\nURL of the service to use for checking. Leave it to the default to\nrun the checks against \"http://validator.w3.org/\", or set it to\n\"http://localhost/w3c-validator/check\" if you're running a local service.\n\n                                                  *'g:syntastic_html_w3_exec'*\nType: string\nDefault: \"curl\"\nPath to the \"cURL\" executable. Override it with a full path if your \"cURL\" is\nnot installed in a standard location.\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_html_w3_<option>' variables. The only exception is\n'g:syntastic_html_w3_exec', which can be used to override the path to the\n\"cURL\" executable.\n\nNote~\n\nNon-zero exit codes from \"cURL\" are typically network errors, and are signaled\nby syntastic with messages such as: >\n    syntastic: error: checker html/validator returned abnormal status 26\n<\nYou can lookup the meaning of these codes in cURL's manual:\n    \n    http://curl.haxx.se/docs/manpage.html#EXIT\n\n==============================================================================\nSYNTAX CHECKERS FOR JAVA                             *syntastic-checkers-java*\n\nThe following checkers are available for Java (filetype \"java\"):\n\n    1. checkstyle...............|syntastic-java-checkstyle|\n    2. javac....................|syntastic-java-javac|\n\n------------------------------------------------------------------------------\n1. checkstyle                                      *syntastic-java-checkstyle*\n\nName:        checkstyle\nMaintainer:  Dmitry Geurkov <d.geurkov@gmail.com>\n\n\"Checkstyle\" is a style linter for Java.  See the project's page for details:\n\n    http://checkstyle.sourceforge.net/\n\nYou need a working installation of Java Runtime Environment to run\n\"Checkstyle\".\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                     *'g:syntastic_java_checkstyle_classpath'*\nType: string\nDefault: \"checkstyle-6.10.1-all.jar\"\nClasspath to use. Multiple files are allowed.\n\n                                     *'g:syntastic_java_checkstyle_conf_file'*\nType: string\nDefault: \"sun_checks.xml\"\nPath to the configuration file for the \"-c\" option (cf.\nhttp://checkstyle.sourceforge.net/cmdline.html#Command_line_usage).\n\n                                          *'g:syntastic_java_checkstyle_exec'*\nType: string\nDefault: \"java\"\nPath to the \"java\" executable.\n\nNotes~\n\n1. The checker was tested with \"checkstyle\" version 5.5. If you're using\nit with version 5.6 or later you should remove DoubleCheckedLocking from\nyour configuration file:\n\n    http://stackoverflow.com/a/12798807/1658042\n\n2. At the time of this writing, the \"checkstyle\" checker doesn't distinguish\nbetween error severity levels. All messages are treated as errors, regardless\nof their severity defined in the \"checkstyle\" config file.\n\n3. You can specify a property file: >\n    let g:syntastic_java_checkstyle_post_args =\n        \\ [\"-p\", \"/path/to/checkstyle.properties\"]\n<\n4. You probably want to download the \"fat jar\" \"checkstyle-*-all.jar\" and\npoint |'g:syntastic_java_checkstyle_classpath'| to it:\n\n    http://iweb.dl.sourceforge.net/project/checkstyle/checkstyle/\n    http://checkstyle.sourceforge.net/cmdline.html#Usage_by_Classpath_update\n\nCurrent builds at Maven Central do not package \"checkstyle\" with its\ndependencies:\n\n    http://search.maven.org/#search|gav|1|g%3A%22com.puppycrawl.tools%22%20AND%20a%3A%22checkstyle%22\n\nHowever, |'g:syntastic_java_checkstyle_classpath'| accepts multiple files if\nyou want to include the \"checkstyle\" jar and all of its dependencies.\n\n------------------------------------------------------------------------------\n2. javac                                                *syntastic-java-javac*\n\nName:        javac\nMaintainers: Jochen Keil <jochen.keil@gmail.com>\n             Dmitry Geurkov <d.geurkov@gmail.com>\n\nNote~\n\nThis checker is not suitable for use with large Java projects. The design\nof \"javac\" makes this checker prone to running into various limitations of\nyour shell, Vim, and your Java compiler. You are strongly advised to use\nsomething like Eclim (http://eclim.org/) instead of syntastic for projects of\nany substantial size or complexity.\n\nCommands~\n\nThe following commands are available:\n\n                                                *:SyntasticJavacEditClasspath*\nThis opens a new window where you can specify a classpath. Individual paths\nmay be specified one per line, or separated by colons \":\" on UNIX, or by\nsemicolons \";\" on Windows.\n\n                                                   *:SyntasticJavacEditConfig*\nThis command relevant only if |'g:syntastic_java_javac_config_file_enabled'|\nis set. It opens a buffer where you can specify project-specific options from\nthe list below. These options will be saved in a file pointed to by\n|'g:syntastic_java_javac_config_file'| (\".syntastic_javac_config\" by default).\nSet |'g:syntastic_java_javac_config_file'| to a full path to use a\nproject-wide configuration file, rather than a file in the current directory.\nThe settings have to be specified as Vim commands.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                         *'g:syntastic_java_javac_executable'*\nType: string\nDefault: \"javac\"\nCompiler executable used for checking files.\n\n                                         *'g:syntastic_java_maven_executable'*\nType: string\nDefault: \"mvn\"\nMaven executable used for loading classpath for \"maven\" projects.\n\n                                            *'g:syntastic_java_javac_options'*\nType: string\nDefault: \"-Xlint\"\nOptions for \"javac\".\n\n                                          *'g:syntastic_java_javac_classpath'*\nType: string\nDefault: \"\"\nClasspath. It can be changed by running the `:SyntasticJavacEditClasspath`\ncommand.\n\n                                      *'g:syntastic_java_javac_delete_output'*\nType: boolean\nDefault: 1\nWhen set the checker will delete the \".class\" files created by \"javac\".\n\n                           *'g:syntastic_java_javac_autoload_maven_classpath'*\nType: boolean\nDefault: 1\nIf enabled and a file \"pom.xml\" is found in the current working directory,\n\"maven\" is used to load classpath.\n\n                                        *'g:syntastic_java_javac_config_file'*\nType: string\nDefault: \".syntastic_javac_config\"\nPath to the configuration file used by \"javac\". As usual, if a filename is\nspecified rather than a full path, the file is created and looked for in the\ncurrent directory.\n\n                                *'g:syntastic_java_javac_config_file_enabled'*\nType: boolean\nDefault: 0\nWhen enabled, the classpath is written to the file pointed to by\n|'g:syntastic_java_javac_config_file'|. The file is created as needed.\nYou can edit this file with the `:SyntasticJavacEditClasspath` command.\nThe change will take effect next time you run the checker.\n\n                           *'g:syntastic_java_javac_custom_classpath_command'*\nType: string\nDefault: \"\"\nCustom command to run in order to get the classpath. The command classpath\noutput can be in traditional Java form, or specified on separate lines.\n\"%file_path%\", \"%FILE_NAME%\", and \"%FILE_DIR%\" are expanded to the current\nfile's full path, filename, and base directory respectively, all of them\nescaped for use in a shell command.\n\nUsing Ant~\n\nWhen using \"ant\" (http://ant.apache.org/) you can have a custom build target\n(named for example \"path\") that will output your project's classpath. You can\nthen use `:SyntasticJavacEditConfig` and add the following line to use it with\n\"javac\" linter: >\n    let g:syntastic_java_javac_custom_classpath_command =\n        \\ \"ant -q path | grep echo | cut -f2- -d] | tr -d ' ' | tr ':' '\\n'\"\n<\nUsing Gradle~\n\nFor \"Gradle\" projects (http://gradle.org/) you might consider using\n\"gradle-syntastic-plugin\":\n\n    https://github.com/Scuilion/gradle-syntastic-plugin\n\nThis will write the relevant classpath to a file \".syntastic_javac_config\".\n\n==============================================================================\nSYNTAX CHECKERS FOR JAVASCRIPT                 *syntastic-checkers-javascript*\n\nThe following checkers are available for JavaScript (filetype \"javascript\"):\n\n    1. Closure Compiler.........|syntastic-javascript-closurecompiler|\n    2. ESLint...................|syntastic-javascript-eslint|\n    3. Flow.....................|syntastic-javascript-flow|\n    4. gjslint..................|syntastic-javascript-gjslint|\n    5. JavaScript Lint..........|syntastic-javascript-jsl|\n    6. JSCS.....................|syntastic-javascript-jscs|\n    7. JSHint...................|syntastic-javascript-jshint|\n    8. JSLint...................|syntastic-javascript-jslint|\n    9. JSXHint..................|syntastic-javascript-jsxhint|\n    10. mixedindentlint.........|syntastic-javascript-mixedindentlint|\n    11. standard................|syntastic-javascript-standard|\n    12. tern-lint...............|syntastic-javascript-tern_lint|\n\n------------------------------------------------------------------------------\n1. Closure Compiler                     *syntastic-javascript-closurecompiler*\n\nName:        closurecompiler\nMaintainer:  Motohiro Takayama <mootoh@gmail.com>\n\n\"Closure Compiler\" is a compiler for JavaScript maintained by Google. See the\nproject's page for details:\n\n    https://developers.google.com/closure/compiler/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                               *'g:syntastic_javascript_closurecompiler_path'*\nType: string\nDefault: unset\nPath to \"google-closure-compiler.jar\"\n\n                             *'g:syntastic_javascript_closurecompiler_script'*\nType: string\nDefault: unset\nPath to a \"closurecompiler\" executable script.\n\nNote~\n\nIn order to enable the checker you have to set exactly one of the options\nabove. If you have a package manager (such as \"Homebrew\") that installs a\nshell script that runs \"Closure Compiler\", point\n|'g:syntastic_javascript_closurecompiler_script'| to that script. Otherwise\nset |'g:syntastic_javascript_closurecompiler_path'| to point to the \"Closure\nCompiler\" jar file.\n\n------------------------------------------------------------------------------\n2. ESLint                                        *syntastic-javascript-eslint*\n\nName:        eslint\nMaintainer:  Maksim Ryzhikov <rv.maksim@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found in\nECMAScript/JavaScript code. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can also use \"eslint_d\" (https://github.com/mantoni/eslint_d.js),\nversion 2.1.0 or later, instead of \"ESLint\". Just point\n'g:syntastic_javascript_eslint_exec' to it:\n\n    https://github.com/mantoni/eslint_d.js#editor-integration\n\nSee also: |syntastic-html-eslint|, |syntastic-typescript-eslint|,\n|syntastic-vue-eslint|.\n\n------------------------------------------------------------------------------\n3. Flow                                            *syntastic-javascript-flow*\n\nName:        flow\nMaintainer:  Michael Robinson <mike@pagesofinterest.net>\n\n\"Flow\" is a static type linter for JavaScript, written by Facebook. See the\nproject's page for details:\n\n    http://flowtype.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nSyntastic requires \"Flow\" version 0.34.0 or later.\n\nTo use \"Flow\" with your projects, you must:\n\na. Install it:\n\n    https://github.com/flowtype/flow-bin\n\nb. Configure your project:\n>\n    cd /path/to/your/project\n    flow init\n<\nc. Read the docs to find out more. It won't work out of the box.\n\n    http://flowtype.org/docs/existing.html\n\n------------------------------------------------------------------------------\n4. gjslint                                      *syntastic-javascript-gjslint*\n\nName:        gjslint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Closure Linter\", or \"gjslint\", is a style linter for JavaScript. See the\nproject's page for more information:\n\n    https://developers.google.com/closure/utilities/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-gjslint|.\n\n------------------------------------------------------------------------------\n5. JavaScript Lint                                  *syntastic-javascript-jsl*\n\nName:        jsl\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nFor details about \"JavaScript Lint\" see the project's page:\n\n    http://www.javascriptlint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. JSCS                                            *syntastic-javascript-jscs*\n\nName:        jscs\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"JSCS\" is a code style linter for JavaScript. See the project's page for\nmore information:\n\n    https://github.com/mdevils/node-jscs\n\nSyntastic requires \"JSCS\" version 0.2.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n7. JSHint                                        *syntastic-javascript-jshint*\n\nName:        jshint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"JSHint\" is a tool to detect errors and potential problems in JavaScript\nfiles. See the project's page for details:\n\n    http://jshint.com/\n\nSyntastic requires \"JSHint\" version 1.0.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nIf you're checking files containing tab characters then \"JSHint\"'s idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default \"JSHint\"'s tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (cf. http://jshint.com/docs/options/#indent). One way to do that is\nto put it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin \"JSHint\". If that is undesirable, your only other option is to leave\n\"JSHint\"'s tabstop alone, and change Vim's 'tabstop' to 4. To change Vim's\n'tabstop', you can add this to your vimrc: >\n    set tabstop=4\n<\nSee also: |syntastic-html-jshint|, |syntastic-xhtml-jshint|.\n\n------------------------------------------------------------------------------\n8. JSLint                                        *syntastic-javascript-jslint*\n\nName:        jslint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"JSLint\" is a code quality linter for JavaScript. See the program's page for\ndetails:\n\n    http://www.jslint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nBy default the checker calls \"JSLint\" with these options: >\n    --white --nomen --regexp --plusplus --bitwise --newcap --sloppy --vars\n<\nThis can be changed by setting 'g:syntastic_javascript_jslint_args' in your\nvimrc to your own list of options, for example: >\n    let g:syntastic_javascript_jslint_args = \n        \\ \"--nomen --regexp --browser --devel --windows --sloppy --vars\"\n<\nSetting this variable to the empty string \"\" is allowed, and instructs\nsyntastic to call \"JSLint\" with no options.\n\n------------------------------------------------------------------------------\n9. JSXHint                                      *syntastic-javascript-jsxhint*\n\nName:        JSXHint\nMaintainer:  Thomas Boyt <me@thomasboyt.com>\n\n\"JSXHint\" is a wrapper around JSHint (http://jshint.com/) for\nlinting JSX syntax, which is inline markup-in-JS used by React\n(http://facebook.github.io/react/docs/getting-started.html).\n\nSee the project's page for details:\n\n    https://github.com/strml/jsxhint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g jsxhint\n<\nSyntastic requires \"JSXHint\" version v0.4.1 or later. You also need \"JSHint\"\nv1.1.0 or later.\n\nNote~\n\nSince \"JSXHint\" is a wrapper around JSHint, the following note relevant to\nthe latter still applies:\n\nIf you're checking files containing tab characters then JSHint's idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default JSHint's tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (http://jshint.com/docs/options/#indent). One way to do that is to\nput it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin JSHint. If that is undesirable, your only other option is to leave JSHint's\ntabstop alone, and change Vim's 'tabstop' to 4. To change Vim's 'tabstop', you\ncan add this to your 'vimrc': >\n    set tabstop=4\n<\nAlternative~\n\n\"JSXHint\" will not show JSX-related errors in syntastic, because failed JSX\ncompiles will result in the uncompiled data being passed to JSHint:\n\n    https://github.com/STRML/JSXHint/issues/45\n\nTo get around this, \"Syntastic-React\" can be used as a replacement for\n\"JSXHint\":\n\n    https://github.com/jaxbot/syntastic-react\n\n------------------------------------------------------------------------------\n10. mixedindentlint                     *syntastic-javascript-mixedindentlint*\n\nName:        mixedindentlint\nMaintainer:  Payton Swick <payton@foolord.com>\n\n\"mixedindentlint\" is a general-purpose indentation linter. See the project's\npage at GitHub for more information:\n\n    https://github.com/sirbrillig/mixedindentlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-mixedindentlint|, |syntastic-scss-mixedindentlint|.\n\n------------------------------------------------------------------------------\n11. standard                                   *syntastic-javascript-standard*\n\nName:        standard\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Standard\" is a code style linter for JavaScript.  See the project's page for\nmore information:\n\n    https://github.com/feross/standard\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                   *'g:syntastic_javascript_standard_generic'*\nType: boolean\nDefault: 0\nFlag that can be used to disable version checks for \"standard\".\n\nNote~\n\nMost forks of \"standard\" can also be used with syntastic. Just\nset 'g:syntastic_javascript_standard_generic' to 1, and point\n'g:syntastic_javascript_standard_exec' to the fork's executable.  For\nexample to use happiness (https://github.com/JedWatson/happiness) instead of\n\"standard\": >\n    let g:syntastic_javascript_checkers = [\"standard\"]\n    let g:syntastic_javascript_standard_exec = \"happiness\"\n    let g:syntastic_javascript_standard_generic = 1\n<\n------------------------------------------------------------------------------\n12. tern-lint                                 *syntastic-javascript-tern_lint*\n\nName:        tern_lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"tern-lint\" is a static type linter for JavaScript.  See the project's page\nfor more information:\n\n    https://github.com/angelozerr/tern-lint\n\nSyntastic requires a version of Vim compiled with the |+byte_offset| feature\nto use this checker.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\n\"tern-lint\" recursively scans files starting from (Vim's idea of) the current\ndirectory, regardless of the current file.\n\n==============================================================================\nSYNTAX CHECKERS FOR JSON                             *syntastic-checkers-json*\n\nThe following checkers are available for JSON (filetype \"json\"):\n\n    1. JSONLint.................|syntastic-json-jsonlint|\n    2. jsonval..................|syntastic-json-jsonval|\n\n------------------------------------------------------------------------------\n1. JSONLint                                          *syntastic-json-jsonlint*\n\nName:        jsonlint\nMaintainer:  Miller Medeiros <contact@millermedeiros.com>\n\n\"JSONLint\" is a validator for JSON. See the project's page for details:\n\n    http://jsonlint.com/\n\nInstallation~\n\nInstall it with: >\n    npm install -g jsonlint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. jsonval                                            *syntastic-json-jsonval*\n\nName:        jsonval\nMaintainer:  Miller Medeiros <contact@millermedeiros.com>\n\n\"jsonval\" is a validator for JSON. See the project's page at GitHub for\ndetails:\n\n    https://github.com/dangerousben/jsonval\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR JULIA                           *syntastic-checkers-julia*\n\nThe following checkers are available for Julia (filetype \"julia\"):\n\n    1. lint.....................|syntastic-julia-lint|\n\n------------------------------------------------------------------------------\n1. lint                                                 *syntastic-julia-lint*\n\nName:        lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis is a linter for Julia files (https://julialang.org/), using the Julia\npackage \"Lint\". See the package's documentation for more information:\n\n    http://lintjl.readthedocs.io/\n\nInstallation~\n\nYou need to install Julia itself, and the package \"Lint\". You can install\n\"Lint\" from the Julia package manager, with the command: >\n    Pkg.add(\"Lint\")\n<\nChecker Options~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_julia_lint_<option>' variables. The only exception is\n'g:syntastic_julia_lint_exec', which can still be used to override the \"julia\"\nexecutable.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Julia files, such as\n\"julia-vim\":\n\n    https://github.com/JuliaEditorSupport/julia-vim\n\n==============================================================================\nSYNTAX CHECKERS FOR LESS                             *syntastic-checkers-less*\n\nThe following checkers are available for LESS (filetype \"less\"):\n\n    1. lessc....................|syntastic-less-lessc|\n    2. RECESS...................|syntastic-less-recess|\n    3. stylelint................|syntastic-less-stylelint|\n\n------------------------------------------------------------------------------\n1. lessc                                                *syntastic-less-lessc*\n\nName:        lessc\nMaintainer:  Julien Blanchard <julien@sideburns.eu>\n\n\"lessc\" is a compiler for LESS. See the project's page for details:\n\n    http://lesscss.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n                                            *'g:syntastic_less_use_less_lint'*\nType: boolean\nDefault: 0\nFlag that can be set to instruct syntastic to run \"less-lint\" instead of\n\"less\".\n\n------------------------------------------------------------------------------\n2. RECESS                                              *syntastic-less-recess*\n\nName:        recess\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"RECESS\" is a code quality tool for CSS built on top of LESS. See the\nproject's page for details:\n\n    http://twitter.github.io/recess/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-recess|.\n\n------------------------------------------------------------------------------\n3. stylelint                                        *syntastic-less-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-stylelint|, |syntastic-html-stylelint|,\n|syntastic-scss-stylelint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LEX                               *syntastic-checkers-lex*\n\nThe following checkers are available for Lex (filetype \"lex\"):\n\n    1. flex.....................|syntastic-lex-flex|\n\n------------------------------------------------------------------------------\n1. flex                                                   *syntastic-lex-flex*\n\nName:        flex\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Flex\" is the GNU implementation of the standard UNIX lexical analyzer \"lex\"\n(http://en.wikipedia.org/wiki/Lex_programming_tool). See the project's page\nfor more information:\n\n    http://flex.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LIMBO                           *syntastic-checkers-limbo*\n\nThe following checkers are available for Limbo (filetype \"limbo\"):\n\n    1. Limbo....................|syntastic-limbo-limbo|\n\n------------------------------------------------------------------------------\n1. Limbo                                               *syntastic-limbo-limbo*\n\nName:        limbo\nMaintainer:  Alex Efros <powerman-asdf@ya.ru>\n\n\"Limbo\" is a compiler for the Limbo language\n(http://doc.cat-v.org/inferno/4th_edition/limbo_language/), the\nlanguage used to write applications for the \"Inferno\" operating system\n(http://doc.cat-v.org/inferno/). See the \"Inferno\" project's page for\na reference implementation:\n\n    http://code.google.com/p/inferno-os/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LISP                             *syntastic-checkers-lisp*\n\nThe following checkers are available for LISP (filetype \"lisp\"):\n\n    1. CLISP....................|syntastic-lisp-clisp|\n\n------------------------------------------------------------------------------\n1. CLISP                                                *syntastic-lisp-clisp*\n\nName:        clisp\nMaintainer:  Karl Yngve Lerv\u00e5g <karl.yngve@lervag.net>\n\n\"CLISP\" is an interpreter for LISP programs. See the project's page for\ndetails:\n\n    http://www.clisp.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LLVM                             *syntastic-checkers-llvm*\n\nThe following checkers are available for LLVM (filetype \"llvm\"):\n\n    1. LLVM.....................|syntastic-llvm-llvm|\n\n------------------------------------------------------------------------------\n1. LLVM                                                  *syntastic-llvm-llvm*\n\nName:        llvm\nMaintainer:  Andrew Kelley <superjoe30@gmail.com>\n\n\"LLVM\" is the intermediate language for the LLVM compilers (http://llvm.org/).\nSee the reference manual for details:\n\n    http://llvm.org/docs/LangRef.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LUA                               *syntastic-checkers-lua*\n\nThe following checkers are available for Lua (filetype \"lua\"):\n\n    1. luac.....................|syntastic-lua-luac|\n    2. luacheck.................|syntastic-lua-luacheck|\n\n------------------------------------------------------------------------------\n1. luac                                                   *syntastic-lua-luac*\n\nName:        luac\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\n\"luac\" is a compiler for Lua. See the tool's manual for details:\n\n    http://www.lua.org/manual/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\n\"luac\" truncates filenames when the full path of the files involved is longer\nthan a certain fixed amount. Syntastic can't detect this situation, and will\nsilently ignore error messages with truncated filenames.\n\n------------------------------------------------------------------------------\n2. luacheck                                           *syntastic-lua-luacheck*\n\nName:        luacheck\nMaintainer:  Thiago Bastos <tbastos@tbastos.com>\n\n\"Luacheck\" is a tool for static analysis of Lua code. See the project's page\nfor details:\n\n    https://github.com/mpeterv/luacheck\n\nIn contrast to \"luac\" (see |syntastic-lua-luac|) which only flags syntax\nerrors, this checker detects code smells, so you probably want to enable both\nwhen available.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nA sensible set of options for LUA projects might be something like this: >\n    let g:syntastic_check_on_open = 1\n    let g:syntastic_lua_checkers = [\"luac\", \"luacheck\"]\n    let g:syntastic_lua_luacheck_args = \"--no-unused-args\" \n<\n==============================================================================\nSYNTAX CHECKERS FOR MARKDOWN                     *syntastic-checkers-markdown*\n\nThe following checkers are available for Markdown (filetype \"markdown\"):\n\n    1. Markdown lint tool.......|syntastic-markdown-mdl|\n    2. proselint................|syntastic-markdown-proselint|\n    3. textlint.................|syntastic-markdown-textlint|\n\n------------------------------------------------------------------------------\n1. Markdown lint tool                                 *syntastic-markdown-mdl*\n\nName:        mdl\nMaintainer:  Charles Beynon <etothepiipower@gmail.com>\n\n\"Markdown lint tool\" is a style linter for Markdown files. See the project's\npage at GitHub for details:\n\n    https://github.com/mivok/markdownlint\n\nInstallation~\n\nInstall it with: >\n    gem install mdl\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can also use the \"Node.js\"-based \"markdownlint-cli\" as a linter instead\nof \"mdl\":\n\n    https://github.com/igorshubovych/markdownlint-cli\n\nTo do that, you have to point 'g:syntastic_markdown_mdl_exec' to\n\"markdownlint\", and set 'g:syntastic_markdown_mdl_args' to an empty string (or\nto a set of valid \"markdownlint-cli\" options): >\n    let g:syntastic_markdown_mdl_exec = \"markdownlint\"\n    let g:syntastic_markdown_mdl_args = \"\"\n<\n------------------------------------------------------------------------------\n2. proselint                                    *syntastic-markdown-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n3. textlint                                      *syntastic-markdown-textlint*\n\nName:        textlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"textlint\" is a natural language linter for text, Markdown, and HTML files.\nSee the project's page for details:\n\n    https://textlint.github.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-textlint|, |syntastic-text-textlint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR MATLAB                         *syntastic-checkers-matlab*\n\nThe following checkers are available for MATLAB (filetype \"matlab\"):\n\n    1. mlint....................|syntastic-matlab-mlint|\n\n------------------------------------------------------------------------------\n1. mlint                                              *syntastic-matlab-mlint*\n\nName:        mlint\nMaintainer:  Jason Graham <jason@the-graham.com>\n\n\"mlint\" is a code linter for MATLAB. The \"mlint\" binary is distributed with\nthe \"MATLAB\" package:\n\n    http://www.mathworks.com/help/matlab/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR MERCURY                       *syntastic-checkers-mercury*\n\nThe following checkers are available for Mercury (filetype \"mercury\"):\n\n    1. mmc......................|syntastic-mercury-mmc|\n\n------------------------------------------------------------------------------\n1. mmc                                                 *syntastic-mercury-mmc*\n\nName:        mmc\nMaintainer:  Joshua Rahm <joshuarahm@gmail.com>\n\n\"mmc\" is a compiler for Mercury. See Mercury's page for more details:\n\n    http://www.mercurylang.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR NASM                             *syntastic-checkers-nasm*\n\nThe following checkers are available for NASM (filetype \"nasm\"):\n\n    1. nasm.....................|syntastic-nasm-nasm|\n\n------------------------------------------------------------------------------\n1. nasm                                                  *syntastic-nasm-nasm*\n\nName:        nasm\nMaintainer:  H\u0102\u013dvard Pettersson <haavard.pettersson@gmail.com>\n\n\"NASM\" is an assembler and disassembler for the Intel x86 architecture. See\nthe project's page for details:\n\n    http://www.nasm.us/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR NIX                               *syntastic-checkers-nix*\n\nThe following checkers are available for Nix (filetype \"nix\"):\n\n    1. Nix......................|syntastic-nix-nix|\n\n------------------------------------------------------------------------------\n1. Nix                                                     *syntastic-nix-nix*\n\nName:        nix\nMaintainer:  Tim Cuthbertson <tim@gfxmonk.net>\n\n\"Nix\" is a linter for language \"Nix\" using \"nix-instantiate\". See the\nproject's page for details:\n\n    http://nixos.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR NROFF                           *syntastic-checkers-nroff*\n\nThe following checkers are available for nroff (filetype \"nroff\"):\n\n    1. Igor.....................|syntastic-nroff-igor|\n    2. mandoc...................|syntastic-nroff-mandoc|\n    3. proselint................|syntastic-nroff-proselint|\n\n------------------------------------------------------------------------------\n1. Igor                                                 *syntastic-nroff-igor*\n\nName:        igor\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Igor\" is a proofreader for DocBook SGML, man pages, and text files used by\nthe FreeBSD project (https://www.freebsd.org/). See the author's presentation\nfor details:\n\n    http://www.youtube.com/watch?v=sczHqUPygZY\n\nThe latest version can be obtained from Glen Barber's repository:\n\n    http://docscripts.glenbarber.us/tags/igor/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-docbk-igor|, |syntastic-text-igor|.\n\n------------------------------------------------------------------------------\n2. mandoc                                             *syntastic-nroff-mandoc*\n\nName:        mandoc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nSee the project's page for details:\n\n    http://mdocml.bsd.lv/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. proselint                                       *syntastic-nroff-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR OBJECTIVE-C                      *syntastic-checkers-objc*\n\nThe following checkers are available for Objective-C (filetype \"objc\"):\n\n    1. GCC......................|syntastic-objc-gcc|\n    2. OClint...................|syntastic-objc-oclint|\n\n------------------------------------------------------------------------------\n1. GCC                                                    *syntastic-objc-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                                 *'g:syntastic_objc_compiler'*\nType: string\nDefault: \"gcc\", or \"clang\" if GCC is not found\nCompiler executable.\n\n                                              *'g:syntastic_objc_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                    *'g:syntastic_objc_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                         *'g:syntastic_objc_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                              *'g:syntastic_objc_config_file'*\nType: string\nDefault: \".syntastic_objc_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                             *'g:syntastic_objc_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_objc_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                  *'g:syntastic_objc_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                                   *'b:syntastic_objc_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                             *'g:syntastic_objc_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_objc_gcc_<option>' variables. The only exception is\n'g:syntastic_objc_gcc_exec', which can still be used to override the linter's\nexecutable.\n\nSee also: |syntastic-objcpp-gcc|.\n\n------------------------------------------------------------------------------\n2. OClint                                              *syntastic-objc-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: \".syntastic_oclint_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-objcpp-oclint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR OBJECTIVE-C++                  *syntastic-checkers-objcpp*\n\nThe following checkers are available for Objective-C++ (filetype \"objcpp\"):\n\n    1. GCC......................|syntastic-objcpp-gcc|\n    2. OClint...................|syntastic-objcpp-oclint|\n\n------------------------------------------------------------------------------\n1. GCC                                                  *syntastic-objcpp-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                               *'g:syntastic_objcpp_compiler'*\nType: string\nDefault: \"gcc\", or \"clang\" if GCC is not found\nCompiler executable.\n\n                                            *'g:syntastic_objcpp_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                  *'g:syntastic_objcpp_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                       *'g:syntastic_objcpp_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                            *'g:syntastic_objcpp_config_file'*\nType: string\nDefault: \".syntastic_objcpp_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                           *'g:syntastic_objcpp_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_objcpp_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                *'g:syntastic_objcpp_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                                 *'b:syntastic_objcpp_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                           *'g:syntastic_objcpp_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_objcpp_gcc_<option>' variables. The only exception\nis 'g:syntastic_objcpp_gcc_exec', which can still be used to override the\nlinter's executable.\n\nSee also: |syntastic-objc-gcc|.\n\n------------------------------------------------------------------------------\n2. OClint                                            *syntastic-objcpp-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: \".syntastic_oclint_config\"\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-objc-oclint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR OCAML                           *syntastic-checkers-ocaml*\n\nThe following checkers are available for OCaml (filetype \"ocaml\"):\n\n    1. camlp4o..................|syntastic-ocaml-camlp4o|\n\n------------------------------------------------------------------------------\n1. camlp4o                                           *syntastic-ocaml-camlp4o*\n\nName:        camlp4o\nMaintainer:  T\u0151r\u0151k Edwin <edwintorok@gmail.com>\n\n\"ocamlc\" is a compiler for Caml. See the project's page for details:\n\n    http://caml.inria.fr/\n\nChecker options~\n                                              *'g:syntastic_ocaml_use_ocamlc'*\nType: boolean\nDefault: 0\nEnable this variable to use \"ocamlc\".\n\n                                     *'g:syntastic_ocaml_use_janestreet_core'*\nType: boolean\nDefault: 0\nIt's possible to use \"ocamlc\" in conjunction with Jane Street's \"core\". In\norder to do that you have to set the above variable.\n\n                                     *'g:syntastic_ocaml_janestreet_core_dir'*\nType: string\nDefault: \".\"\nPath to Jane Street's \"core\".\n\n                                                 *'g:syntastic_ocaml_camlp4r'*\nType: boolean                                                                 \nDefault: 0\nBy default, .ml and .mli files are checked with the \"camlp4o\" preprocessor,\n.mll with \"ocamllex\", and .mly with \"menhir\". If your source code requires\n\"camlp4r\" you can set this variable.\n\n                                          *'g:syntastic_ocaml_use_ocamlbuild'*\nType: boolean                                                                 \nDefault: 0\nWhether to enable typechecking and syntax extensions. This tells syntastic to\nrun \"ocamlbuild <name>.inferred.mli\". It writes object files to the \"_build\"\ndirectory, and possibly rebuilds your \"myocamlbuild.ml\" plugin.  If you are\nusing syntax extensions / external libraries and have a properly set up\n\"_tags\" (and \"myocamlbuild.ml\" file), setting this flag should just work.  For\nbest results your current directory should be the project root (same situation\nif you want useful output from `:make`).\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_ocaml_camlp4o_<option>' variables.\n\nNote~\n\nYou might consider using the linters packaged with Merlin instead of this\none. They provide type errors and let you use packages outside core:\n\n    https://github.com/the-lambda-church/merlin\n\n==============================================================================\nSYNTAX CHECKERS FOR PERL                             *syntastic-checkers-perl*\n\nThe following checkers are available for Perl (filetype \"perl\"):\n\n    1. perl.....................|syntastic-perl-perl|\n    2. Perl::Critic.............|syntastic-perl-perlcritic|\n    3. Pod::Checker.............|syntastic-perl-podchecker|\n\n------------------------------------------------------------------------------\n1. perl                                                  *syntastic-perl-perl*\n\nName:        perl\nMaintainers: Anthony Carapetis <anthony.carapetis@gmail.com>\n             Eric Harmon\n\nSecurity~\n\nThis checker runs \"perl -c\" against your files, which in turn executes any\n\"BEGIN\", \"UNITCHECK\", and \"CHECK\" blocks, and any \"use\" statements in your\nfiles (cf. http://perldoc.perl.org/perlrun.html#*-c*). This is probably fine\nif you wrote the file yourself, but it can be a problem if you're trying to\ncheck third party files. If you are 100% willing to let Vim run the code in\nyour files, set 'g:syntastic_enable_perl_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_perl_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add it to 'g:syntastic_perl_checkers' if you plan\nto use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                              *'g:syntastic_perl_interpreter'*\nType: string\nDefault: \"perl\"\nThe perl interpreter to use.\n\n                                                 *'g:syntastic_perl_lib_path'*\nType: list of strings\nDefault: []\nList of include directories to be added to the perl command line. Example: >\n    let g:syntastic_perl_lib_path = [ \"./lib\", \"./lib/auto\" ]\n<\nNote~\n\nThe variable |'g:syntastic_perl_interpreter'| is shared with the YAML::XS\nchecker (cf. |syntastic-yaml-yamlxs|). If for some reasons you don't want to\nuse the same interpreter for both checkers, you can override it locally by\nsetting 'g:syntastic_perl_perl_exec'.\n\n------------------------------------------------------------------------------\n2. Perl::Critic                                    *syntastic-perl-perlcritic*\n\nName:        perlcritic\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Perl::Critic\" is a static analyzer for Perl. See the project's page for\ndetails:\n\n    http://perlcritic.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                         *'g:syntastic_perl_perlcritic_thres'*\nType: integer\nDefault: 5\nError threshold: policy violations with a severity above this value are\nhighlighted as errors, the others are warnings.\n\nNote~\n\nYou can override the format of \"perlcritic\" messages, for example: >\n    let g:syntastic_perl_perlcritic_post_args =\n        \\ '--verbose \"\\%s:\\%f:\\%l:\\%c: \\%p: \\%m\\n\"'\n<\nJust make sure to leave alone the leading \"\\%s:\\%f:\\%l:\\%c:\".\n\n------------------------------------------------------------------------------\n3. Pod::Checker                                    *syntastic-perl-podchecker*\n\nName:        podchecker\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Pod::Checker\" is a checker for pod documents. See the module's manual for\ndetails:\n\n    http://perldoc.perl.org/Pod/Checker.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-pod-podchecker|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PERL 6                          *syntastic-checkers-perl6*\n\nThe following checkers are available for Perl 6 (filetype \"perl6\"):\n\n    1. perl6....................|syntastic-perl6-perl6|\n\n------------------------------------------------------------------------------\n1. perl6                                               *syntastic-perl6-perl6*\n\nName:        perl6\nMaintainers: Claudio Ramirez <pub.claudio@gmail.com>\n\n\"perl6\" is a checker for Perl 6 files using the \"Rakudo\" compiler. See the\nproject's page for details:\n\n    http://rakudo.org/\n\nSyntastic requires Rakudo Star release 2017.01 or later.\n\nSecurity~\n\nThis checker runs \"perl6 -c\" against your files, which executes any \"BEGIN\"\nand \"CHECK\" blocks (cf. https://docs.perl6.org/programs/00-running). This\nis probably fine if you wrote the files yourself, but it can be a problem if\nyou're trying to check third party files. If you are 100% willing to let Vim\nrun the code in your files, set 'g:syntastic_enable_perl6_checker' to 1 in\nyour vimrc to enable this checker: >\n    let g:syntastic_enable_perl6_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add it to 'g:syntastic_perl6_checkers' if you plan\nto use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at syntastic-config-makeprg.\n\nAdditionally:\n\n                                                *'g:syntastic_perl6_lib_path'*\nType: list of strings\nDefault: []\nList of include directories to be added to the perl6 command line. Example: >\n    let g:syntastic_perl6_lib_path = [ \"./lib\", \"./lib/auto\" ]\n<\nYou can also set the \"PERL6LIB\" environment variable to a colon-separated\nlist of add-hoc include paths. These paths will then be added to the ones\nprescribed by |'g:syntastic_perl6_lib_path'|.\n\nNote~\n\nAt the time of this writing the support for JSON error output of the \"Rakudo\"\ncompiler is still incomplete.\n\n==============================================================================\nSYNTAX CHECKERS FOR PHP                               *syntastic-checkers-php*\n\nThe following checkers are available for PHP (filetype \"php\"):\n\n    1. PHP......................|syntastic-php-php|\n    2. PHP_CodeSniffer..........|syntastic-php-phpcs|\n    3. PHPLint..................|syntastic-php-phplint|\n    4. PHP Mess Detector........|syntastic-php-phpmd|\n    5. PHPStan..................|syntastic-php-phpstan|\n\n------------------------------------------------------------------------------\n1. PHP                                                     *syntastic-php-php*\n\nName:        php\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. PHP_CodeSniffer                                       *syntastic-php-phpcs*\n\nName:        phpcs\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"PHP_CodeSniffer\" is a style linter for PHP and CSS. See the project's page\nat GitHub for details:\n\n    https://github.com/squizlabs/PHP_CodeSniffer/\n\nInstallation~\n\nInstall it with: >\n    pear install PHP_CodeSniffer\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"PHP_CodeSniffer\"'s\nidea of tabstop must match Vim's 'tabstop', otherwise syntastic will highlight\nthe errors at shifted positions. By default syntastic does that by adding\nan option \"--tab-width=&tabstop\" to \"PHP_CodeSniffer\", but that option\nalso instructs \"PHP_CodeSniffer\" to expand tabs, and some code sniffers\n(f.i. \"CakePHP\", see https://github.com/cakephp/cakephp-codesniffer) insist on\nindenting lines with tabs. To work around the resulting mess if you're using\none of these sniffers, set \"--tab-width=0\" and 'tabstop' to 8: >\n    let g:syntastic_php_phpcs_args = \"--tab-width=0\"\n    set tabstop=8\n<\nSee also: |syntastic-css-phpcs|.\n\n------------------------------------------------------------------------------\n3. PHPLint                                             *syntastic-php-phplint*\n\nName:        phplint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"PHPLint\" is a style linter for PHP. See the project's page for details:\n\n    http://www.icosaedro.it/phplint/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. PHP Mess Detector                                     *syntastic-php-phpmd*\n\nName:        phpmd\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"PHP Mess Detector\" is a code analyzer for PHP. See the project's page for\ndetails:\n\n    http://phpmd.org\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. PHP Static Analysis Tool                            *syntastic-php-phpstan*\n\nName:        phpstan\nMaintainer:  Przepompownia <przepompownia@users.noreply.github.com>\n\n\"PHPStan\" focuses on finding errors in your code without actually running it.\nSee the project's page iat GitHub for details:\n\n    https://github.com/phpstan/phpstan\n\nSyntastic supports \"PHPStan\" versions 0.8.5 and later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR POD                               *syntastic-checkers-pod*\n\nThe following checkers are available for POD (filetype \"pod\"):\n\n    1. Pod::Checker.............|syntastic-pod-podchecker|\n    2. proselint................|syntastic-pod-proselint|\n\n------------------------------------------------------------------------------\n1. Pod::Checker                                     *syntastic-pod-podchecker*\n\nName:        podchecker\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Pod::Checker\" is a checker for pod documents.  See the module's manual for\ndetails:\n\n    http://perldoc.perl.org/Pod/Checker.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-perl-podchecker|.\n\n------------------------------------------------------------------------------\n2. proselint                                         *syntastic-pod-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PUG (FORMERLY JADE)               *syntastic-checkers-pug*\n\nThe following checkers are available for Pug (formerly Jade; filetype \"pug\"):\n\n    1. pug_lint.................|syntastic-pug-pug_lint|\n\n------------------------------------------------------------------------------\n1. pug_lint                                           *syntastic-pug-pug_lint*\n\nName:        pug_lint\nMaintainer:  Ben Parnell <benjaminparnell.94@gmail.com>\n\n\"pug-lint\" is a linter and style linter for Pug (formerly known as \"Jade\";\nhttp://jade-lang.com/). See the project's page at GitHub for details:\n\n    https://github.com/pugjs/pug-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PUPPET                         *syntastic-checkers-puppet*\n\nThe following checkers are available for Puppet (filetype \"puppet\"):\n\n    1. puppet...................|syntastic-puppet-puppet|\n    2. puppet-lint..............|syntastic-puppet-puppetlint|\n\n------------------------------------------------------------------------------\n1. puppet                                            *syntastic-puppet-puppet*\n\nName:        puppet\nMaintainer:  Eivind Uggedal <eivind@uggedal.com>\n\n\"Puppet\" is an automated administrative engine for UNIX systems.  See the\nproject's page for details:\n\n    http://projects.puppetlabs.com/projects/puppet\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. puppet-lint                                   *syntastic-puppet-puppetlint*\n\nName:        puppetlint\nMaintainer:  Eivind Uggedal <eivind@uggedal.com>\n\n\"puppet-lint\" is a style linter for puppet manifests\n(http://projects.puppetlabs.com/projects/puppet).  See the project's page for\ndetails:\n\n    http://puppet-lint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PYTHON                         *syntastic-checkers-python*\n\nThe following checkers are available for Python (filetype \"python\"):\n\n    1. Bandit...................|syntastic-python-bandit|\n    2. flake8...................|syntastic-python-flake8|\n    3. Frosted..................|syntastic-python-frosted|\n    4. mypy.....................|syntastic-python-mypy|\n    5. Prospector...............|syntastic-python-prospector|\n    6. py3kwarn.................|syntastic-python-py3kwarn|\n    7. pycodestyle..............|syntastic-python-pycodestyle|\n    8. pydocstyle...............|syntastic-python-pydocstyle|\n    9. Pyflakes.................|syntastic-python-pyflakes|\n    10. Pylama..................|syntastic-python-pylama|\n    11. Pylint..................|syntastic-python-pylint|\n    12. python..................|syntastic-python-python|\n\n------------------------------------------------------------------------------\n1. Bandit                                            *syntastic-python-bandit*\n\nName:        bandit\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Bandit\" is an AST-based static analyzer for Python from OpenStack Security\nGroup (http://openstack.org). See the project's official documentation for\ndetails:\n\n    https://wiki.openstack.org/wiki/Security/Projects/Bandit\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install bandit\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIn order to check all files in a project, rather than the current file: >\n    let g:syntastic_python_bandit_fname = ['/path/to/project']\n    let g:syntastic_python_bandit_args = '-r'\n<\n------------------------------------------------------------------------------\n2. flake8                                            *syntastic-python-flake8*\n\nName:        flake8\nMaintainers: Sylvain Soliman <Sylvain.Soliman+git@gmail.com>\n             kstep <me@kstep.me>\n\n\"Flake8\" is a wrapper around PyFlakes (https://launchpad.net/pyflakes), pep8\n(https://github.com/jcrocholl/pep8), and Ned Batchelder's McCabe script\n(http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html). \nSee the project's page and the official docs for details:\n\n    https://gitlab.com/pycqa/flake8\n    http://flake8.readthedocs.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. Frosted                                          *syntastic-python-frosted*\n\nName:        frosted\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Frosted\" is a fork of pyflakes (https://launchpad.net/pyflakes). See the\nproject's page for details:\n\n    https://github.com/timothycrosley/frosted\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. mypy                                                *syntastic-python-mypy*\n\nName:        mypy\nMaintainer:  Russ Hewgill <Russ.Hewgill@gmail.com>\n\n\"mypy\" is a static type linter for Python. See the project's page for\ndetails:\n\n    http://www.mypy-lang.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. Prospector                                    *syntastic-python-prospector*\n\nName:        prospector\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Prospector\" is a static analysis tool for Python. It brings\ntogether the functionality of other tools such as pylint\n(http://www.pylint.org/), pyflakes (https://launchpad.net/pyflakes),\npep8 (https://github.com/jcrocholl/pep8), pydocstyle (formerly\n\"pep257\"; https://github.com/PyCQA/pydocstyle), and McCabe complexity\n(http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html).\nSee the project's official documentation for details:\n\n    http://prospector.readthedocs.org/en/latest/\n\nSyntastic supports \"Prospector\" versions 0.7 and later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. py3kwarn                                        *syntastic-python-py3kwarn*\n\nName:        py3kwarn\nAuthor: Liam Curry <liam@curry.name>\n\n\"Py3kwarn\" is a code linter for Python that detects incompatibilities with\nPython 3. See the project's page for details:\n\n    https://github.com/liamcurry/py3kwarn\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n7. pycodestyle                                  *syntastic-python-pycodestyle*\n\nName:        pycodestyle\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"pycodestyle\" (formerly \"pep8\") is a style linter for Python, derived from\nthe conventions in PEP 8 (http://www.python.org/dev/peps/pep-0008/). See the\nproject's page for details:\n\n    https://github.com/PyCQA/pycodestyle\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n8. pydocstyle                                    *syntastic-python-pydocstyle*\n\nName:        pydocstyle\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"pydocstyle\" (formerly \"pep257\") is a docstring style linter\nfor Python, derived from the conventions established in PEP 257\n(http://www.python.org/dev/peps/pep-0257/). See the project's page for\ndetails:\n\n    https://github.com/PyCQA/pydocstyle\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n9. Pyflakes                                        *syntastic-python-pyflakes*\n\nName:        pyflakes\nAuthors:     Martin Grenfell <martin.grenfell@gmail.com>\n             kstep <me@kstep.me>\n             Parantapa Bhattacharya <parantapa@gmail.com>\n\n\"Pyflakes\" is a simple code linter for Python.  See the project's page for\nmore information:\n\n    https://launchpad.net/pyflakes\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n10. Pylama                                           *syntastic-python-pylama*\n\nName:        pylama\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Pylama\" is a wrapper around pep8 (https://github.com/jcrocholl/pep8),\npydocstyle (formerly \"pep257\"; https://github.com/PyCQA/pydocstyle),\nPyflakes (https://launchpad.net/pyflakes),\nPylint (http://www.pylint.org/), and Ned Batchelder's McCabe script\n(http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html).\nSee the project's page for details:\n\n    https://github.com/klen/pylama\n\nNote~\n\nThe Pylint backend requires you to install \"pylama_pylint\":\n\n    https://github.com/klen/pylama_pylint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n11. Pylint                                           *syntastic-python-pylint*\n\nName:        pylint\nAuthor: Parantapa Bhattacharya <parantapa@gmail.com>\n\n\"Pylint\" is a code linter for Python. See the project's page for details:\n\n    http://www.pylint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nOn OS X you need to set the environment variable \"LC_CTYPE\" to \"UTF-8\"\nbefore running Vim: >\n    LC_CTYPE=en_US.UTF-8\n    export LC_CTYPE\n<\nSeveral people have expressed interest in showing the old message IDs\nalong with the error messages. You can override the message format in\n'g:syntastic_python_pylint_post_args'. Please note that the new format must\nstart with \"{path}:{line}:{column}:{C}: \", otherwise syntastic will not\nrecognise any messages. Example: >\n    let g:syntastic_python_pylint_post_args =\n        \\ '--msg-template=\"{path}:{line}:{column}:{C}: [{symbol} {msg_id}] {msg}\"'\n<\n------------------------------------------------------------------------------\n12. python                                           *syntastic-python-python*\n\nName:        python\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis checker uses Python's builtin \"compile()\" function for detecting syntax\nerrors.\n\nSyntastic requires Python version 2.6 or later.\n\nCodecs~\n\nIn Python you have the ability to specify a particular codec at the top of\nthe file with a special comment that looks something like this: >\n    # coding: spec\n<\nFurther references:\n\n    https://docs.python.org/reference/lexical_analysis.html#encoding-declarations\n\nPython will see this comment at import time and use the corresponding codec to\ntransform the file before using it. The \"python\" checker has an option\n|'g:syntastic_python_python_use_codec'| that will make syntastic aware of such\ncomments before running compiler checks on the file.\n\nPlease note that transforming a file like this affects line numbers and\ncolumn numbers, and syntastic has no way to make the necessary adjustments.\nConsequently, errors might appear on surprising lines if you enable this\nfeature and the transformed file has code on different lines than the raw\nfile. For this reason the use of these transformations should be limited\nto codecs that preserve line numbers, such as the \"spec\" codec provided by\n\"NoseOfYeti\":\n\n    https://noseofyeti.readthedocs.org/en/latest/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       *'g:syntastic_python_python_use_codec'*\nType: boolean\nDefault: 0\nEnables handling of \"# coding: spec\" comments.\n\n==============================================================================\nSYNTAX CHECKERS FOR QML                               *syntastic-checkers-qml*\n\nThe following checkers are available for QML (filetype \"qml\"):\n\n    1. qmllint..................|syntastic-qml-qmllint|\n\n------------------------------------------------------------------------------\n1. qmllint                                             *syntastic-qml-qmllint*\n\nName:        qmllint\nMaintainer:  Peter Wu <peter@lekensteyn.nl>\n\n\"qmllint\" is a QML syntax verifier. It was introduced with Qt 5.4 (cf.\nhttps://www.kdab.com/kdab-contributions-qt-5-4-qmllint/) as part of Qt\nDeclarative:\n\n    https://code.qt.io/cgit/qt/qtdeclarative.git/tree/tools/qmllint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR R                                   *syntastic-checkers-r*\n\nThe following checkers are available for R (filetype \"r\"):\n\n    1. lintr....................|syntastic-r-lintr|\n    2. svtools..................|syntastic-r-svtools|\n\n------------------------------------------------------------------------------\n1. lintr                                                   *syntastic-r-lintr*\n\nName:        lintr\nMaintainer:  Jim Hester <james.f.hester@gmail.com>\n\n\"lintr\" is a static code analysis tool for R files. See the project's page at\nGitHub for details:\n\n    https://github.com/jimhester/lintr\n\nSecurity~\n\nThis checker executes parts of the files it checks. This is probably fine if\nyou wrote the file yourself, but it can be a problem if you're trying to check\nthird party files. If you are 100% willing to let Vim run the code in your\nfile, set 'g:syntastic_enable_r_lintr_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_r_lintr_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"lintr\" to 'g:syntastic_r_checkers' if you plan\nto use it.\n\nChecker Options~\n                                               *'g:syntastic_r_lintr_linters'*\nType: string\nDefault: \"default_linters\"\nWhich \"lintr\" linters to apply to your code.\n\n                                                 *'g:syntastic_r_lintr_cache'*\nType: string\nDefault: \"FALSE\"\nWhether to use the lintr cache. This speeds up linting time, but can introduce\nfalse positives in some cases.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_r_lintr_<option>' variables. The only exception is\n'g:syntastic_r_lintr_exec', which can still be used to override the \"R\"\nexecutable.\n\nSee also: |syntastic-rmd-lintr|.\n\n------------------------------------------------------------------------------\n2. svtools                                               *syntastic-r-svtools*\n\nName:        svtools\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis is a linter for R files, using the R package \"svTools\":\n\n    http://cran.r-project.org/web/packages/svTools/\n\nIn turn, this package delegates most of the work to the \"checkUsage()\"\nfunction in the \"codetools\" package:\n\n    http://cran.r-project.org/web/packages/codetools/\n\nSecurity~\n\nThis checker executes parts of the files it checks. This is probably fine if\nyou wrote the file yourself, but it can be a problem if you're trying to check\nthird party files. If you are 100% willing to let Vim run the code in your\nfile, set 'g:syntastic_enable_r_svtools_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_r_svtools_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"svtools\" to 'g:syntastic_r_checkers' if you\nplan to use it.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_r_svtools_<option>' variables. The only exception is\n'g:syntastic_r_svtools_exec', which can still be used to override the \"R\"\nexecutable.\n\nLimitations~\n\n\"svTools\" version 0.9-4 (current at the time of this writing) has a number\nof problems that prevents it from checking most sources. You might consider\napplying this patch as a workaround:\n\n    https://gist.github.com/lcd047/9988687#file-svtools-patch\n\nAt the time of this writing \"svTools\" doesn't produce meaningful column\nnumbers (the column numbers are always set to 1). The patch mentioned above\nenables \"svTools\" to produce more useful column numbers, but only for syntax\nerrors. If you apply the said patch and you're checking files containing\ntab characters Vim's 'tabstop' must match \"R\"'s idea of tabstop, otherwise\ncolumn numbers will be shifted. At the time of this writing \"R\"'s tabstop is\nhardcoded to 8, so you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\n==============================================================================\nSYNTAX CHECKERS FOR R MARKDOWN                        *syntastic-checkers-rmd*\n\nThe following checkers are available for R Markdown (filetype \"rmd\"):\n\n    1. lintr....................|syntastic-rmd-lintr|\n\n------------------------------------------------------------------------------\n1. lintr                                                 *syntastic-rmd-lintr*\n\nName:        lintr\nMaintainer:  Jim Hester <james.f.hester@gmail.com>\n\n\"lintr\" is a static code analysis tool for R files.  See the project's page at\nGitHub for details:\n\n    https://github.com/jimhester/lintr\n\nSecurity~\n\nThis checker executes parts of the files it checks. This is probably fine if\nyou wrote the file yourself, but it can be a problem if you're trying to check\nthird party files. If you are 100% willing to let Vim run the code in your\nfile, set 'g:syntastic_enable_r_lintr_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_r_lintr_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"lintr\" to 'g:syntastic_rmd_checkers' if you\nplan to use it.\n\nChecker Options~\n                                               'g:syntastic_r_lintr_linters'\nType: string\nDefault: \"default_linters\"\nWhich \"lintr\" linters to apply to your code.\n\n                                                 'g:syntastic_r_lintr_cache'\nType: string\nDefault: \"FALSE\"\nWhether to use the lintr cache. This speeds up linting time, but can introduce\nfalse positives in some cases.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_rmd_lintr_<option>' variables. The only exception is\n'g:syntastic_rmd_lintr_exec', which can still be used to override the \"R\"\nexecutable.\n\nSee also: |syntastic-r-lintr|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RACKET                         *syntastic-checkers-racket*\n\nThe following checkers are available for Racket (filetype \"racket\"):\n\n    1. code-ayatollah...........|syntastic-racket-code-ayatollah|\n    2. racket...................|syntastic-racket-racket|\n\n------------------------------------------------------------------------------\n1. code-ayatollah                            *syntastic-racket-code-ayatollah*\n\nName:        code_ayatollah\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nInstallation~\n\nDownload \"code-ayatollah.rkt\" (http://tmp.barzilay.org/code-ayatollah.rkt)\nand point 'g:syntastic_racket_code_ayatollah_script' to it: >\n    let g:syntastic_racket_code_ayatollah_script = \"/path/to/code-ayatollah.rkt\"\n<\nOf course, you also need \"racket\" (http://racket-lang.org/).\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. racket                                            *syntastic-racket-racket*\n\nName:        racket\nMaintainer:  Steve Bragg <steve@empresseffects.com>\n\nSecurity~\n\nThis checker executes the code in the files it checks:\n\n    https://github.com/vim-syntastic/syntastic/issues/1773\n\nThis is probably fine if you wrote the files yourself, but it can be a problem\nif you're trying to check third party files. If you are 100% willing to let\nVim run the code in your files, set 'g:syntastic_enable_racket_racket_checker'\nto 1 in your vimrc to enable this checker: >\n    let g:syntastic_enable_racket_racket_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover a global one in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"racket\" to 'g:syntastic_racket_checkers' if\nyou plan to use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RELAX NG                          *syntastic-checkers-rnc*\n\nThe following checkers are available for Relax NG (filetype \"rnc\"):\n\n    1. rnv......................|syntastic-rnc-rnv|\n\n------------------------------------------------------------------------------\n1. rnv                                                     *syntastic-rnc-rnv*\n\nName:        rnv\nMaintainer:  Remko Tron\u00e7on <remko@el-tramo.be>\n\n\"RNV\" is an implementation of Relax NG Compact Syntax validator (cf.\nhttp://relaxng.org/compact-20021121.html). See the project's page for\ndetails:\n\n    http://www.davidashen.net/rnv.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RESTRUCTUREDTEXT                  *syntastic-checkers-rst*\n\nThe following checkers are available for reStructuredText (filetype \"rst\"):\n\n    1. proselint................|syntastic-rst-proselint|\n    2. rst2pseudoxml............|syntastic-rst-rst2pseudoxml|\n    3. rstcheck.................|syntastic-rst-rstcheck|\n    4. Sphinx...................|syntastic-rst-sphinx|\n\n------------------------------------------------------------------------------\n1. proselint                                         *syntastic-rst-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n2. rst2pseudoxml                                 *syntastic-rst-rst2pseudoxml*\n\nName:        rst2pseudoxml\nMaintainer:  James Rowe <jnrowe@gmail.com>\n\n\"rst2pseudoxml\" is part of the Python package Docutils:\n\n    http://docutils.sourceforge.net/\n\nWe use \"rst2pseudoxml\", as it is ever so marginally faster than the other\n\"rst2${x}\" tools in docutils.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. rstcheck                                           *syntastic-rst-rstcheck*\n\nName:        rstcheck\nMaintainer:  Steven Myint <git@stevenmyint.com>\n\n\"rstcheck\" is a linter for reStructuredText files. See the project's page at\nGitHub for details:\n\n    https://github.com/myint/rstcheck\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. Sphinx                                               *syntastic-rst-sphinx*\n\nName:        sphinx\nMaintainer:  Buck Evan <buck@yelp.com>\n\n\"Sphinx\" is a linter for documentation files written in the Sphinx dialect\nof reStructuredText, using the \"pseudoxml\" builder of \"sphinx-build\". See the\nproject's page for details:\n\n    http://sphinx-doc.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                         *'g:syntastic_rst_sphinx_source_dir'*\nType: string\nDefault: unset\nBase directory of the project being checked.\n\n                                         *'g:syntastic_rst_sphinx_config_dir'*\nType: string\nDefault: unset\nDirectory containing the \"conf.py\" file.\n\nNotes~\n\nThe checker needs to know two paths to run: the source directory where the\nproject's files are located, and the directory where the configuration file\n\"conf.py\" is located. By default it looks for \"conf.py\" in the base directory\nof the current file, then upwards in parent directories. If a configuration\nfile is found and the file is readable, its base directory is assumed to be\nboth the source directory and the configuration directory of the project.\n\nIf syntastic can't determine the source directory or the configuration\ndirectory, or if you want to override the autodetected paths, options\n|'g:syntastic_rst_sphinx_source_dir'| and |'g:syntastic_rst_sphinx_config_dir'|\ntake precedence over the detected values.\n\nPlease note also that the checker creates output files in a temporary directory\nthat is created upon the first run in the current session, and is removed when\nVim exits. If you need to change the location of this directory you can do\nso by exporting the environment variables \"TMPDIR\" or \"TMP\" (on UNIX and Mac\nOS-X), or \"TEMP\" (on Windows) before running Vim. Various index files are also\ncached in this directory, so it might be advantageous to avoid quitting Vim\nbetween checker runs.\n\n==============================================================================\nSYNTAX CHECKERS FOR RPM SPEC                         *syntastic-checkers-spec*\n\nThe following checkers are available for Linux RPM packages (filetype \"spec\"):\n\n    1. rpmlint..................|syntastic-spec-rpmlint|\n\n------------------------------------------------------------------------------\n1. rpmlint                                            *syntastic-spec-rpmlint*\n\nName:        rpmlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"rpmlint\" is a tool for checking Linux RPM packages. See the project's page\nfor details:\n\n    http://sourceforge.net/projects/rpmlint/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RUBY                             *syntastic-checkers-ruby*\n\nThe following checkers are available for Ruby (filetype \"ruby\"):\n\n    1. Flog.....................|syntastic-ruby-flog|\n    2. JRuby....................|syntastic-ruby-jruby|\n    3. MacRuby..................|syntastic-ruby-macruby|\n    4. MRI......................|syntastic-ruby-mri|\n    5. reek.....................|syntastic-ruby-reek|\n    6. RuboCop..................|syntastic-ruby-rubocop|\n    7. Ruby-lint................|syntastic-ruby-rubylint|\n\n------------------------------------------------------------------------------\n1. Flog                                                  *syntastic-ruby-flog*\n\nName:        flog\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"Flog\" is a complexity linter for Ruby files. See the project's page for\ndetails:\n\n    http://ruby.sadi.st/Flog.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                   *'g:syntastic_ruby_flog_threshold_warning'*\nType: number\nDefault: 45\nThreshold for warnings. Functions with complexity below this number are not\nflagged as either errors or warnings.\n\n                                     *'g:syntastic_ruby_flog_threshold_error'*\nType: number\nDefault: 90\nThreshold for errors. Functions with complexity above this number are flagged\nas errors.\n\n\nNote~\n\n\"Flog\" reports complexity values as floating point numbers. If your Vim is\nnot compiled with the \"+float\" feature, both the numbers reported by flog and\nthe two options above are rounded by syntastic towards zero (that is, \"39.9\"\nis taken as \"39\").\n\n------------------------------------------------------------------------------\n2. JRuby                                                *syntastic-ruby-jruby*\n\nName:        jruby\nMaintainer:  Leonid Shevtsov <leonid@shevtsov.me>\n\n\"JRuby\" is a Java implementation of the Ruby programming language. See the\nproject's page for details:\n\n    http://jruby.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. MacRuby                                            *syntastic-ruby-macruby*\n\nName:        macruby\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"MacRuby\" is an implementation of Ruby for Mac OS X. See the project's\npage for details:\n\n    http://www.macruby.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. MRI                                                    *syntastic-ruby-mri*\n\nName:        mri\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                                     *'g:syntastic_ruby_exec'*\nType: string\nDefault: unset\nRuby executable. This is a convenience variable shared with the eRuby checker\n\"Ruby\" (cf. |syntastic-eruby-ruby|). Used only if 'g:syntastic_ruby_mri_exec'\nis unset.\n\n------------------------------------------------------------------------------\n5. Reek                                                  *syntastic-ruby-reek*\n\nName:        reek\nMaintainer:  Mindaugas Moz\u016bras\n\n\"Reek\" is a code smell detection tool for Ruby. See the project's page at\nGitHub for details:\n\n    https://github.com/troessner/reek\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. RuboCop                                            *syntastic-ruby-rubocop*\n\nName:        rubocop\nMaintainer:  Recai Okta\u015f <roktas@bil.omu.edu.tr>\n\n\"RuboCop\" is a style linter for Ruby. See the project's page for details:\n\n    https://github.com/bbatsov/rubocop\n\nSyntastic requires \"RuboCop\" version 0.12.0 or later.\n\nRunning \"RuboCop\" under development versions of \"Ruby\" is explicitly NOT\nsupported.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nMost issues returned by \"rubocop\" are warnings, so for best results your\n|'syntastic_quiet_messages'| should not filter out warnings.\n\nIf the \"RuboCop\" checker is not enabled automatically by syntastic try\nrunning \"rubocop --version\" from the shell. If it complains about \"Parser\"\n(see https://github.com/whitequark/parser) expecting a different version of\n\"Ruby\" than you are running, your configuration is not directly supported by\nsyntastic.\n\nWhile passing around the blame for this does have a certain entertaining\nvalue (cf. https://github.com/bbatsov/rubocop/issues/1819), the problem\nis real, since \"Ruby\" syntax did change between versions. The solution\nis to run a version manager such as \"rbenv\" (http://rbenv.org/) or \"rvm\"\n(https://rvm.io/), that allows you to run multiple versions of \"Ruby\" without\nconflicts: >\n    $ rbenv version\n    2.1.3 (set by /usr/local/var/rbenv/version)\n    \n    $ rubocop --version\n    warning: parser/current is loading parser/ruby21, which recognizes\n    warning: 2.1.2-compliant syntax, but you are running 2.1.3.\n    0.26.1\n    \n    $ rbenv shell 2.1.2\n    \n    $ rubocop --version\n    0.26.1\n<\nAlternatively, if you absolutely must do it the wrong way, you can\nalso install a wrapper script that kills the version warning and point\n'g:syntastic_ruby_rubocop_exec' to it:\n\n    https://gist.github.com/lcd047/96138909015f2f8d2d36\n\n------------------------------------------------------------------------------\n7. Ruby-lint                                         *syntastic-ruby-rubylint*\n\nName:        rubylint\nMaintainer:  Yorick Peterse <yorickpeterse@gmail.com>\n\n\"Ruby-lint\" is a linter and static code analysis tool for Ruby. See the\nproject's page for details:\n\n    https://github.com/YorickPeterse/ruby-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf the \"rubylint\" checker is not enabled automatically by syntastic, try\nrunning \"ruby-lint --version\" from the shell. If it complains about \"Parser\"\n(see https://github.com/whitequark/parser) expecting a different version of\n\"Ruby\" than you are running, your configuration is not directly supported by\nsyntastic.\n\nWhile passing around the blame for this does have a certain entertaining\nvalue (cf. https://github.com/bbatsov/rubocop/issues/1819), the problem\nis real, since \"Ruby\" syntax did change between versions. The solution\nis to run a version manager such as \"rbenv\" (http://rbenv.org/) or \"rvm\"\n(https://rvm.io/), that allows you to run multiple versions of \"Ruby\" without\nconflicts: >\n    $ rbenv version\n    2.1.3 (set by /usr/local/var/rbenv/version)\n    \n    $ ruby-lint --version\n    warning: parser/current is loading parser/ruby21, which recognizes\n    warning: 2.1.2-compliant syntax, but you are running 2.1.3.\n    ruby-lint v2.0.4 on ruby 2.1.3 [i486-linux]\n    \n    $ rbenv shell 2.1.2\n    \n    $ ruby-lint --version\n    ruby-lint v2.0.4 on ruby 2.1.2 [i486-linux]\n<\nAlternatively, if you absolutely must do it the wrong way, you can\nalso install a wrapper script that kills the version warning and point\n'g:syntastic_ruby_rubylint_exec' to it:\n\n    https://gist.github.com/lcd047/492245d9923af45fb964\n\n==============================================================================\nSYNTAX CHECKERS FOR SASS                             *syntastic-checkers-sass*\n\nThe following checkers are available for SASS (filetype \"sass\"):\n\n    1. Sass.....................|syntastic-sass-sass|\n    2. Sass Lint................|syntastic-sass-sass_lint|\n    3. SassC....................|syntastic-sass-sassc|\n\n------------------------------------------------------------------------------\n1. Sass                                                  *syntastic-sass-sass*\n\nName:        sass\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Sass\" is a translator for SASS. See the project's page for details:\n\n    http://sass-lang.com/\n\nInstallation~\n\nInstall it with \"gem\": >\n    gem install sass\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-scss-sass|.\n\n------------------------------------------------------------------------------\n2. Sass Lint                                        *syntastic-sass-sass_lint*\n\nName:        sass_lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Sass Lint\" is a linter for SASS and SCSS files. See the project's page for\ndetails:\n\n    https://github.com/sasstools/sass-lint\n\nSyntastic requires \"Sass Lint\" version 1.5.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-scss-sass_lint|.\n\n------------------------------------------------------------------------------\n3. SassC                                                *syntastic-sass-sassc*\n\nName:        sassc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"SassC\" is a linter for SASS and SCSS files, based on the \"libsass\" library\n(https://github.com/hcatlin/libsass). See the project's page for details:\n\n    https://github.com/hcatlin/sassc\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-scss-sassc|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SCALA                           *syntastic-checkers-scala*\n\nThe following checkers are available for Scala (filetype \"scala\"):\n\n    1. fsc......................|syntastic-scala-fsc|\n    2. scalac...................|syntastic-scala-scalac|\n    3. Scalastyle...............|syntastic-scala-scalastyle|\n\n------------------------------------------------------------------------------\n1. fsc                                                   *syntastic-scala-fsc*\n\nName:        fsc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. scalac                                             *syntastic-scala-scalac*\n\nName:        scalac\nMaintainer:  Rickey Visinski <rickeyvisinski@gmail.com>\n\n\"scalac\" is a compiler for Scala. See the project's page for more information:\n\n    http://docs.scala-lang.org\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. Scalastyle                                     *syntastic-scala-scalastyle*\n\nName:        scalastyle\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Scalastyle\" is a style linter for Scala. See the project's page for\ndetails:\n\n    http://www.scalastyle.org/\n\nSyntastic uses the command line version of \"Scalastyle\":\n\n    http://www.scalastyle.org/command-line.html\n\nYou need a working installation of Java Runtime Environment to run\n\"Scalastyle\".\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          *'g:syntastic_scala_scalastyle_jar'*\nType: string\nDefault: \"scalastyle-batch_2.10.jar\"\nPath to the \"scalastyle-batch\" jar file. You might want to set this to a full\npath.\n\n                                  *'g:syntastic_scala_scalastyle_config_file'*\nType: string\nDefault: \"scalastyle_config.xml\"\nPath to the configuration file to use. You might want to also set this to a\nfull path.\n\n                                         *'g:syntastic_scala_scalastyle_exec'*\nType: string\nDefault: \"java\"\nPath to the \"java\" executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR SCSS                             *syntastic-checkers-scss*\n\nThe following checkers are available for SCSS (filetype \"scss\"):\n\n    1. mixedindentlint..........|syntastic-scss-mixedindentlint|\n    2. Sass.....................|syntastic-scss-sass|\n    3. Sass Lint................|syntastic-scss-sass_lint|\n    4. SassC....................|syntastic-scss-sassc|\n    5. SCSS-lint................|syntastic-scss-scss_lint|\n    6. stylelint................|syntastic-scss-stylelint|\n\n------------------------------------------------------------------------------\n1. mixedindentlint                            *syntastic-scss-mixedindentlint*\n\nName:        mixedindentlint\nMaintainer:  Payton Swick <payton@foolord.com>\n\n\"mixedindentlint\" is a general-purpose indentation linter. See the project's\npage at GitHub for more information:\n\n    https://github.com/sirbrillig/mixedindentlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-mixedindentlint|, |syntastic-javascript-mixedindentlint|.\n\n------------------------------------------------------------------------------\n2. Sass                                                  *syntastic-scss-sass*\n\nName:        sass\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Sass\" is a translator for SASS. See the project's page for details:\n\n    http://sass-lang.com/\n\nInstallation~\n\nInstall it with \"gem\": >\n    gem install sass\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-sass-sass|.\n\n------------------------------------------------------------------------------\n3. Sass Lint                                        *syntastic-scss-sass_lint*\n\nName:        sass_lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Sass Lint\" is a linter for SASS and SCSS files. See the project's page for\ndetails:\n\n    https://github.com/sasstools/sass-lint\n\nSyntastic requires \"Sass Lint\" version 1.5.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-sass-sass_lint|.\n\n------------------------------------------------------------------------------\n4. SassC                                                *syntastic-scss-sassc*\n\nName:        sassc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\n\"SassC\" is a linter for SASS and SCSS files, based on the \"libsass\" library\n(https://github.com/hcatlin/libsass). See the project's page for details:\n\n    https://github.com/hcatlin/sassc\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-sass-sassc|.\n\n------------------------------------------------------------------------------\n5. SCSS-lint                                        *syntastic-scss-scss_lint*\n\nName:        scss_lint\nMaintainer:  Shane da Silva <shane@dasilva.io>\n\n\"SCSS-Lint\" is a lint tool for SCSS. See the project's page for details:\n\n    https://github.com/brigade/scss-lint\n\nSyntastic requires \"SCSS-Lint\" version 0.29.0 or later.\n\nInstallation~\n\nInstall it with \"gem\": >\n    gem install scss_lint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. stylelint                                        *syntastic-scss-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-stylelint|, |syntastic-html-stylelint|,\n|syntastic-less-stylelint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SH                                 *syntastic-checkers-sh*\n\nThe following checkers are available for Sh (filetype \"sh\"):\n\n    1. Bashate..................|syntastic-sh-bashate|\n    2. checkbashisms............|syntastic-sh-checkbashisms|\n    3. sh.......................|syntastic-sh-sh|\n    4. ShellCheck...............|syntastic-sh-shellcheck|\n\n------------------------------------------------------------------------------\n1. Bashate                                              *syntastic-sh-bashate*\n\nName:        bashate\nMaintainer:  aswna\n\n\"Bashate\" is a style linter for bash scripts used by the OpenStack\n(http://www.openstack.org/). See the project's page at GitHub for details:\n\n    https://github.com/openstack-dev/bashate\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install bashate\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. checkbashisms                                  *syntastic-sh-checkbashisms*\n\nName:        checkbashisms\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"checkbashisms\" is part of the Linux \"devscripts\" package. It can be obtained\nfrom the Debian source archive:\n\n    http://packages.qa.debian.org/d/devscripts.html\n\nFor FreeBSD and OpenBSD you can also install the \"devel/checkbashisms\" port.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. sh                                                        *syntastic-sh-sh*\n\nName:        sh\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. ShellCheck                                        *syntastic-sh-shellcheck*\n\nName:        shellcheck\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ShellCheck\" is a static analysis tool for Bourne shell scripts. See the\nproject's page for details:\n\n    http://www.shellcheck.net/about.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SLIM                             *syntastic-checkers-slim*\n\nThe following checkers are available for Slim (filetype \"slim\"):\n\n    1. Slim-Lint................|syntastic-slim-slim_lint|\n    2. Slimrb...................|syntastic-slim-slimrb|\n\n------------------------------------------------------------------------------\n1. Slim-Lint                                        *syntastic-slim-slim_lint*\n\nName:        slim_lint\nMaintainer:  Vasily Kolesnikov <re.vkolesnikov@gmail.com>\n\n\"Slim-Lint\" is a style linter for Slim files (http://slim-lang.com/).  See\nthe project's page at GitHub for details:\n\n    https://github.com/sds/slim-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nInstallation~\n\nYou can install \"Slim-Lint\" with \"gem\": >\n    gem install slim_lint\n<\nNote~\n\nYou probably also need a plugin to set |filetype| for Slim files, such as\n\"vim-slim\":\n\n     https://github.com/slim-template/vim-slim\n\n------------------------------------------------------------------------------\n2. Slimrb                                              *syntastic-slim-slimrb*\n\nName:        slimrb\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Slimrb\" is a processor for the template language Slim\n(http://slim-lang.com/). See the project's page for details:\n\n    https://github.com/slim-template/slim\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Slim files, such as\n\"vim-slim\":\n\n     https://github.com/slim-template/vim-slim\n\n==============================================================================\nSYNTAX CHECKERS FOR SML                               *syntastic-checkers-sml*\n\nThe following checkers are available for SML (filetype \"sml\"):\n\n    1. smlnj....................|syntastic-sml-smlnj|\n\n------------------------------------------------------------------------------\n1. smlnj                                                 *syntastic-sml-smlnj*\n\nName:        smlnj\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"smlnj\" is a compiler for Standard ML '97. See the project's page for details:\n\n    http://www.smlnj.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SOLIDITY                     *syntastic-checkers-solidity*\n\nThe following checkers are available for Solidity (filetype \"solidity\"):\n\n    1. solc.....................|syntastic-solidity-solc|\n    2. Solhint..................|syntastic-solidity-solhint|\n    3. Solium...................|syntastic-solidity-solium|\n\n------------------------------------------------------------------------------\n1. solc                                              *syntastic-solidity-solc*\n\nName:        solc \nMaintainer:  Jacob Cholewa <jacob@cholewa.dk>\n\n\"solc\" is a compiler for Ethereum's smart-contract language \"Solidity\"\n(https://solidity.readthedocs.io/). See the project's page for details:\n\n    https://github.com/ethereum/solidity\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Solidity files, such as\n\"vim-solidity\":\n\n    https://github.com/tomlion/vim-solidity\n\n------------------------------------------------------------------------------\n2. Solhint                                        *syntastic-solidity-solhint*\n\nName:        solhint\nMaintainer:  Brett Sun <qisheng.brett.sun@gmail.com>\n\n\"Solhint\" is a style linter for \"Solidity\" files. See the project's page for\ndetails:\n\n    https://github.com/protofire/solhint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Solidity files, such as\n\"vim-solidity\":\n\n    https://github.com/tomlion/vim-solidity\n\n------------------------------------------------------------------------------\n3. Solium                                          *syntastic-solidity-solium*\n\nName:        solium\nMaintainer:  Matthijs van den Bos <matthijs@vandenbos.org>\n\n\"Solium\" is a linter for \"Solidity\" files. See the project's page for details:\n\n    https://github.com/duaraghav8/Solium\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Solidity files, such as\n\"vim-solidity\":\n\n    https://github.com/tomlion/vim-solidity\n\n==============================================================================\nSYNTAX CHECKERS FOR SQL                               *syntastic-checkers-sql*\n\nThe following checkers are available for SQL (filetype \"sql\"):\n\n    1. sqlint...................|syntastic-sql-sqlint|\n    2. tsqllint.................|syntastic-sql-tsqllint|\n\n------------------------------------------------------------------------------\n1. sqlint                                               *syntastic-sql-sqlint*\n\nName:        sqlint\nMaintainer:  Steve Purcell <steve@sanityinc.com>\n\n\"sqlint\" is a lint checker for ANSI SQL. See the project's page at GitHub for\ndetails:\n\n    https://github.com/purcell/sqlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. tsqllint                                           *syntastic-sql-tsqllint*\n\nName:        tsqllint\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"tsqllint\" is a lint checker for Transact-SQL scripts. See the project's page\nat GitHub for details:\n\n    https://github.com/tsqllint/tsqllint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR STYLUS                         *syntastic-checkers-stylus*\n\nThe following checkers are available for Stylus (filetype \"stylus\"):\n\n    1. Stylint..................|syntastic-stylus-stylint|\n\n------------------------------------------------------------------------------\n1. Stylint                                          *syntastic-stylus-stylint*\n\nName:        stylint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Stylint\" is a linter for Stylus (http://learnboost.github.io/stylus). See\nthe project's page at GitHub for details:\n\n    https://github.com/SimenB/stylint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou might also find useful the \"vim-stylus\" plugin:\n\n    https://github.com/wavded/vim-stylus\n\n==============================================================================\nSYNTAX CHECKERS FOR TCL                               *syntastic-checkers-tcl*\n\nThe following checkers are available for Tcl (filetype \"tcl\"):\n\n    1. nagelfar.................|syntastic-tcl-nagelfar|\n\n------------------------------------------------------------------------------\n1. nagelfar                                           *syntastic-tcl-nagelfar*\n\nName:        nagelfar\nMaintainer:  James Pickard <james.pickard@gmail.com>\n\n\"Nagelfar\" is a syntax linter for Tcl. See the project's page for details:\n\n    http://nagelfar.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TEX                               *syntastic-checkers-tex*\n\nThe following checkers are available for TeX (filetype \"tex\"):\n\n    1. ChkTeX...................|syntastic-tex-chktex|\n    2. lacheck..................|syntastic-tex-lacheck|\n    3. proselint................|syntastic-tex-proselint|\n\n------------------------------------------------------------------------------\n1. ChkTeX                                               *syntastic-tex-chktex*\n\nName:        chktex\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ChkTeX\" is a linter for TeX and LaTeX. See the project's page for details:\n\n    http://baruch.ev-en.org/proj/chktex/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                           *'g:syntastic_tex_chktex_showmsgs'*\nType: boolean\nDefault: 1\nWhether to show informational messages (\"chktex\" option \"-m\"). By default\ninformational messages are shown as warnings.\n\nNotes~\n\nIf you're checking files containing tab characters, then Vim's 'tabstop'\nmust match \"ChkTeX\"'s idea of tabstop, otherwise column numbers will be\nshifted. At the time of this writing, \"ChkTeX\"'s tabstop is hardcoded to 8,\nso you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\nNote also that because of the way \"ChkTeX\" handles error formats column\nnumbers are not available on Windows when running under \"cmd.exe\".\n\n------------------------------------------------------------------------------\n2. lacheck                                             *syntastic-tex-lacheck*\n\nName:        lacheck\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"lacheck\" is a style linter for LaTeX documents. See the project's page for\ndetails:\n\n    http://www.ctan.org/tex-archive/support/lacheck\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nLimitations~\n\nAt the time of this writing \"lacheck\" can't expand \"\\def\" commands. As a\nresult, most \"\\input\" commands using macros are signaled as errors.\n\n------------------------------------------------------------------------------\n3. proselint                                         *syntastic-tex-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TEXINFO                       *syntastic-checkers-texinfo*\n\nThe following checkers are available for Texinfo (filetype \"texinfo\"):\n\n    1. Makeinfo.................|syntastic-texinfo-makeinfo|\n    2. proselint................|syntastic-texinfo-proselint|\n\n------------------------------------------------------------------------------\n1. Makeinfo                                       *syntastic-texinfo-makeinfo*\n\nName:        makeinfo\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Makeinfo\" is a converter for Texinfo files. It is distributed together with\nthe GNU package \"texinfo\":\n\n    http://www.gnu.org/software/texinfo/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. proselint                                     *syntastic-texinfo-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-tex-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TEXT                             *syntastic-checkers-text*\n\nThe following checkers are available for plain text (filetype \"text\"):\n\n    1. atdtool..................|syntastic-text-atdtool|\n    2. Igor.....................|syntastic-text-igor|\n    3. language-check...........|syntastic-text-language_check|\n    4. proselint................|syntastic-text-proselint|\n    5. textlint.................|syntastic-text-textlint|\n\n------------------------------------------------------------------------------\n1. atdtool                                            *syntastic-text-atdtool*\n\nName:        atdtool\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"atdtool\" is a script that runs a text file through the \"After the Deadline\"\nlanguage service (http://www.afterthedeadline.com/) and returns a list of\nspelling, style, and grammar errors. See the project's page for details:\n\n    https://github.com/lpenz/atdtool\n\nSee also the list of features of \"After the Deadline\":\n\n    http://www.afterthedeadline.com/features.slp\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Igor                                                  *syntastic-text-igor*\n\nName:        igor\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Igor\" is a proofreader for DocBook SGML, man pages, and text files used by\nthe FreeBSD (https://www.freebsd.org/). See the author's presentation for\ndetails:\n\n    http://www.youtube.com/watch?v=sczHqUPygZY\n\nThe latest version can be obtained from Glen Barber's repository:\n\n    http://docscripts.glenbarber.us/tags/igor/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-docbk-igor|, |syntastic-nroff-igor|.\n\n------------------------------------------------------------------------------\n3. language-check                              *syntastic-text-language_check*\n\nName:        language_check\nMaintainer:  Steven Myint <git@stevenmyint.com>\n\n\"language-check\" is a wrapper for the LanguageTool grammar linter\n(https://www.languagetool.org/). See the project's page for details:\n\n    https://github.com/myint/language-check\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. proselint                                        *syntastic-text-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-tex-proselint|,\n|syntastic-texinfo-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n5. textlint                                          *syntastic-text-textlint*\n\nName:        textlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"textlint\" is a natural language linter for text, Markdown, and HTML files.\nSee the project's page for details:\n\n    https://textlint.github.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-textlint|, |syntastic-markdown-textlint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TRIG                             *syntastic-checkers-trig*\n\nThe following checkers are available for TriG (filetype \"trig\"):\n\n    1. rapper...................|syntastic-trig-rapper|\n\n------------------------------------------------------------------------------\n1. rapper                                              *syntastic-trig-rapper*\n\nName:        rapper\nMaintainer:  Sebastian Tramp <mail@sebastian.tramp.name>\n\n\"rapper\" is an RDF parsing and serializing utility. See the project's page for\ndetails:\n\n    http://librdf.org/raptor/rapper.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for TriG files, such as\n\"Vim-RDF\":\n\n    https://github.com/niklasl/vim-rdf\n\nSee also: |syntastic-turtle-rapper|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TURTLE                         *syntastic-checkers-turtle*\n\nThe following checkers are available for Turtle (filetype \"turtle\"):\n\n    1. rapper...................|syntastic-turtle-rapper|\n    2. ttl......................|syntastic-turtle-ttl|\n\n------------------------------------------------------------------------------\n1. rapper                                            *syntastic-turtle-rapper*\n\nName:        rapper\nMaintainer:  Sebastian Tramp <mail@sebastian.tramp.name>\n\n\"rapper\" is an RDF parsing and serializing utility. See the project's page\nfor details:\n\n    http://librdf.org/raptor/rapper.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Turtle files, such as\n\"Vim-RDF\":\n\n    https://github.com/niklasl/vim-rdf\n\nSee also: |syntastic-trig-rapper|.\n\n------------------------------------------------------------------------------\n2. ttl                                                  *syntastic-turtle-ttl*\n\nName:        ttl\nMaintainer:  Antoine Reilles <tonio@NetBSD.org>\n\n\"ttl\" is an RDF validator. See the project's page at GitHub for details:\n\n    https://github.com/mmlab/TurtleValidator\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Turtle files, such as\n\"Vim-RDF\":\n\n    https://github.com/niklasl/vim-rdf\n\n==============================================================================\nSYNTAX CHECKERS FOR TWIG                             *syntastic-checkers-twig*\n\nThe following checkers are available for Twig (filetype \"twig\"):\n\n    1. twig-lint................|syntastic-twig-twiglint|\n\n------------------------------------------------------------------------------\n1. twig-lint                                         *syntastic-twig-twiglint*\n\nName:        twiglint\nMaintainer:  Alexander <iam.asm89@gmail.com>\n\n\"twig-lint\" is a lint tool for Twig templates. See the project's page at\nGitHub for details:\n\n    https://github.com/asm89/twig-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nFor the standalone executable, add the following to your vimrc file: >\n    let g:syntastic_twig_twiglint_exec = \"php\"\n    let g:syntastic_twig_twiglint_exe = \"php /path/to/twig-lint.phar\"\n<\nFor the \"Composer\" (https://getcomposer.org/) dependency \"twig-lint\" must be\nin your \"$PATH\". No further configuration is needed.\n\n==============================================================================\nSYNTAX CHECKERS FOR TYPESCRIPT                 *syntastic-checkers-typescript*\n\nThe following checkers are available for TypeScript (filetype \"typescript\"):\n\n    1. ESLint...................|syntastic-typescript-eslint|\n    2. TSLint...................|syntastic-typescript-tslint|\n\n------------------------------------------------------------------------------\n1. ESLint                                        *syntastic-typescript-eslint*\n\nName:        eslint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found\nin ECMAScript/JavaScript code. With the \"babel-eslint\" plugin\n(https://github.com/babel/babel-eslint) \"ESLint\" can also be\nused to check TypeScript files. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for TypeScript files, such\nas \"typescript-vim\":\n\n    https://github.com/leafgarland/typescript-vim\n\nSee also: |syntastic-html-eslint|, |syntastic-javascript-eslint|,\n|syntastic-vue-eslint|.\n\n------------------------------------------------------------------------------\n2. TSLint                                        *syntastic-typescript-tslint*\n\nName:        tslint\nMaintainer:  Seon-Wook Park <seon.wook@swook.net>\n\n\"TSLint\" is a lint checker for TypeScript. See the project's page for\ndetails:\n\n    https://github.com/palantir/tslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for TypeScript files, such\nas \"typescript-vim\":\n\n    https://github.com/leafgarland/typescript-vim\n\n==============================================================================\nSYNTAX CHECKERS FOR VALA                             *syntastic-checkers-vala*\n\nThe following checkers are available for Vala (filetype \"vala\"):\n\n    1. Valac....................|syntastic-vala-valac|\n\n------------------------------------------------------------------------------\n1. Valac                                                *syntastic-vala-valac*\n\nName:        valac\nMaintainer:  Konstantin Stepanov (me@kstep.me)\n\n\"valac\" is a compiler for Vala. See the project's page for details:\n\n        https://wiki.gnome.org/Projects/Vala\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                                  *'g:syntastic_vala_modules'*\nType: string or array of strings\nDefault: unset\nSpace-separated list of Vala modules to be passed as \"--pkg\" arguments.\n\n                                                *'g:syntastic_vala_vapi_dirs'*\nType: string or array of strings\nDefault: unset\nSpace-separated list of \"vapi\" directories to be passed as \"--vapidirs\"\narguments.\n\nNotes~\n\nIf |'g:syntastic_vala_modules'| is unset, you can also specify a list of\nmodule to load for the current file by adding a special comment starting with\n\"// modules: \" and containing a space-delimited list of names.\n\nIf |'g:syntastic_vala_vapi_dirs'| is unset, you can also specify a list of\n\"vapi\" directories for the current file by adding a special comment starting\nwith \"// vapidirs:\" and containing a space-delimited list of names.\n\n==============================================================================\nSYNTAX CHECKERS FOR VERILOG                       *syntastic-checkers-verilog*\n\nThe following checkers are available for Verilog (filetype \"verilog\"):\n\n    1. Icarus Verilog...........|syntastic-verilog-iverilog|\n    2. Verilator................|syntastic-verilog-verilator|\n\n------------------------------------------------------------------------------\n1. Icarus Verilog                                 *syntastic-verilog-iverilog*\n\nName:        iverilog\nMaintainer:  Psidium <psiidium@gmail.com>\n\n\"Icarus Verilog\" is a Verilog simulation and synthesis tool. See the\nproject's page for details:\n\n    http://iverilog.icarus.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Verilator                                     *syntastic-verilog-verilator*\n\nName:        verilator\nMaintainer:  Kocha <kocha.lsifrontend@gmail.com>\n\nChecker options~\n\n                                              *'g:syntastic_verilog_compiler'*\nType: string\nDefault: \"verilator\"\nCompiler executable.\n\n                                           *'g:syntastic_verilog_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                 *'g:syntastic_verilog_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                      *'g:syntastic_verilog_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                           *'g:syntastic_verilog_config_file'*\nType: string\nDefault: \".syntastic_verilog_config\"\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                          *'g:syntastic_verilog_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the\nabove compilation flags. You can set it like this: >\n    let g:syntastic_verilog_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                *'b:syntastic_verilog_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_verilog_verilator_<option>' variables. The only\nexception is 'g:syntastic_verilog_verilator_exec', which can still be used to\noverride the linter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR VHDL                             *syntastic-checkers-vhdl*\n\nThe following checkers are available for VHDL (filetype \"vhdl\"):\n\n    1. GHDL.....................|syntastic-vhdl-ghdl|\n    2. vcom.....................|syntastic-vhdl-vcom|\n\n------------------------------------------------------------------------------\n1. GHDL                                                  *syntastic-vhdl-ghdl*\n\nName:        ghdl\nMaintainer:  Jan Wagner <jaydyou@janidom.de>\n\n\"GHDL\" is a VHDL simulator. See the project's page for details:\n\n    http://gna.org/projects/ghdl/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. vcom                                                  *syntastic-vhdl-vcom*\n\nName:        vcom\nMaintainer:  Jim Vogel <jim.e.vogel@gmail.com>\n\n\"vcom\" is compiler for VHDL files distributed with the \"ModelSim\" HDL\nsimulation environment:\n\n    https://www.mentor.com/products/fpga/model/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR VIM HELP                         *syntastic-checkers-help*\n\nThe following checkers are available for Vim help (filetype \"help\"):\n\n    1. proselint................|syntastic-help-proselint|\n\n------------------------------------------------------------------------------\n1. proselint                                        *syntastic-help-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-html-proselint|,\n|syntastic-markdown-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR VIML                              *syntastic-checkers-vim*\n\nThe following checkers are available for VimL (filetype \"vim\"):\n\n    1. Vimlint..................|syntastic-vim-vimlint|\n    2. Vint.....................|syntastic-vim-vint|\n\n------------------------------------------------------------------------------\n1. Vimlint                                             *syntastic-vim-vimlint*\n\nName:        vimlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Vimlint\" is a lint checker for VimL written in pure VimL, based on Yukihiro\nNakadaira's \"vimlparser\" (https://github.com/ynkdir/vim-vimlparser/). See the\nproject's page for details:\n\n    https://github.com/syngan/vim-vimlint/\n\nInstallation~\n\nYou need to install the Vim plugins \"vim-vimlint\" and \"vim-vimlparser\"\nmentioned above.\n\nChecker Options~\n\n                                               *'g:syntastic_vimlint_options'*\nType: dictionary\nDefault: |EVL102|, |EVL103|, |EVL104|, |EVL105|, |EVL106|, |EVL201|, |EVL204|, and |EVL205|\n    are warnings.\nDictionary of \"Vimlint\" options, with the same syntax as |g:vimlint#config|.\nSee |g:vimlint#config| and |vimlint-errorcode| for more details.\n\n\"Vimlint\" does not call the \"makeprgBuild()\" function, and thus ignores the\nusual 'g:syntastic_vim_vimlint_<option>' variables.\n\nNote~\n\nThe values of |'g:syntastic_vimlint_options'| useful for syntastic are those\nthat ignore or change the severity of some \"EVLxxx\" messages.  For example\nto ignore warnings about unused arguments: >\n    let g:syntastic_vimlint_options = { \"EVL103\": 1 }\n<\nLimitation~\n\nCertain error messages can't be turned off by |'g:syntastic_vimlint_options'|.\nThis is a misfeature of \"Vimlint\" rather than a limitation of syntastic. You\ncan still ignore these messages using the standard mechanism of\n|'syntastic_quiet_messages'|: >\n    let g:syntastic_vim_vimlint_quiet_messages = { \"regex\": '\\v\\[EVL%(105|205)\\]' }\n<\nAt the time of this writing the messages that can't be turned off by setting\n|'g:syntastic_vimlint_options'| are:\n\n    |EVL105| - global variable defined without 'g:'\n    |EVL202| - missing call\n    |EVL203| - parse error in command\n    |EVL205| - missing 'scriptencoding'\n    |EVL901| - unknown type\n    |EVL902| - assert error.\n\n------------------------------------------------------------------------------\n2. Vint                                                   *syntastic-vim-vint*\n\nName:        vint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Vint\" is a lint checker for VimL. See the project's page at GitHub for\ndetails:\n\n    https://github.com/Kuniwak/vint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR VUE.JS                            *syntastic-checkers-vue*\n\nThe following checkers are available for Vue.js (filetype \"vue\"):\n\n    1. ESLint...................|syntastic-vue-eslint|\n    2. pug_lint_vue.............|syntastic-vue-pug_lint_vue|\n\n------------------------------------------------------------------------------\n1. ESLint                                               *syntastic-vue-eslint*\n\nName:        eslint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found in\nECMAScript/JavaScript code. It can also detect problems in JavaScript\ncomponents of Vue.js files. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nAutomatically fixing errors (option \"--fix\") is not supported.\n\nYou can also use \"eslint_d\" (https://github.com/mantoni/eslint_d.js), version\n2.1.0 or later, instead of \"ESLint\". Just point 'g:syntastic_vue_eslint_exec'\nto it:\n\n    https://github.com/mantoni/eslint_d.js#editor-integration\n\nSee also: |syntastic-html-eslint|, |syntastic-javascript-eslint|,\n|syntastic-typescript-eslint|.\n\n------------------------------------------------------------------------------\n2. pug_lint_vue                                   *syntastic-vue-pug_lint_vue*\n\nName:        pug_lint_vue\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"pug-lint-vue\" is a linter for Pug templates inside of Vue.js components. See\nthe project's page at GitHub for details:\n\n    https://github.com/sourceboat/pug-lint-vue\n\nInstallation~\n\nInstall it with: >\n    npm install -g pug-lint-vue\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Vue.js files, such as\n\"vim-vue\":\n\n    https://github.com/posva/vim-vue\n\n==============================================================================\nSYNTAX CHECKERS FOR XHTML                           *syntastic-checkers-xhtml*\n\nThe following checkers are available for xHTML (filetype \"xhtml\"):\n\n    1. HTML Tidy................|syntastic-xhtml-tidy|\n    2. jshint...................|syntastic-xhtml-jshint|\n    3. proselint................|syntastic-xhtml-proselint|\n\n------------------------------------------------------------------------------\n1. HTML tidy                                            *syntastic-xhtml-tidy*\n\nName:        tidy\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"HTML Tidy\" is a syntax linter and formatter for HTML. See the HTML Tidy\nLibrary Project for more information:\n\n    http://tidy.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                      *'g:syntastic_xhtml_tidy_ignore_errors'*\nType: array of strings\nDefault: []\nList of errors to ignore. Case-sensitive patterns matched as substrings\n(not regular expressions) against the error messages. See also\n|'syntastic_quiet_messages'|.\n\nSee also: |syntastic-html-tidy|.\n\n------------------------------------------------------------------------------\n2. jshint                                             *syntastic-xhtml-jshint*\n\nName:        JSHint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"JSHint\" can detect JavaScript errors and potential problems in HTML\nfiles. See the project's page for details:\n\n    http://jshint.com/\n\nSyntastic requires \"JSHint\" version 2.4.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"JSHint\"'s idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default \"JSHint\"'s tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (cf. http://jshint.com/docs/options/#indent). One way to do that is\nto put it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin \"JSHint\". If that is undesirable, your only other option is to leave\n\"JSHint\"'s tabstop alone, and change Vim's 'tabstop' to 4. To change Vim's\n'tabstop', you can add this to your vimrc: >\n    set tabstop=4\n<\nSee also: |syntastic-html-jshint|, |syntastic-javascript-jshint|.\n\n------------------------------------------------------------------------------\n3. proselint                                       *syntastic-xhtml-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-tex-proselint|,\n|syntastic-texinfo-proselint|, |syntastic-text-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR XML                               *syntastic-checkers-xml*\n\nThe following checkers are available for XML (filetype \"xml\"):\n\n    1. plutil...................|syntastic-xml-plutil|\n    2. xmllint..................|syntastic-xml-xmllint|\n\n------------------------------------------------------------------------------\n1. plutil                                               *syntastic-xml-plutil*\n\nName:        plutil\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"plutil\" is a linter for OS X and iOS property list files. See the \"plist(5)\"\nand \"plutil(1)\" manual pages for details:\n\n    https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/plist.5.html\n    https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/plutil.1.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. xmllint                                             *syntastic-xml-xmllint*\n\nName:        xmllint\nMaintainer:  Sebastian Kusnier <sebastian@kusnier.net>\n\n\"xmllint\" is a linter and transformer tool for XML files, distributed with\nthe \"libxml\" package (http://www.xmlsoft.org/). See the tool's manual for more\ninformation:\n\n    http://xmlsoft.org/xmllint.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can use a local installation of DTDs to significantly speed up validation\nand allow you to validate XML data without network access. See the\n\"xmlcatalog\" manual, and the catalog documentation for more information:\n\n    http://www.xmlsoft.org/xmlcatalog_man.html\n    http://www.xmlsoft.org/catalog.html\n\nFor an example of a DTD catalog see f.i. \"XMLCatalog\":\n\n    https://github.com/darcyparker/XMLCatalog\n\nIn order to use it with syntastic you'll have to clone it to a local\ndirectory, and point the environment variable \"XML_CATALOG_FILES\" to the file\n\"catalog.xml\" in the said directory: >\n    XML_CATALOG_FILES=/some/path/XMLCatalog/catalog.xml\n    export XML_CATALOG_FILES\n<\nOtherwise \"xmllint\" will try to load XML catalogs from \"/etc/xml/catalog\".\n\nSee also: |syntastic-docbk-xmllint|, |syntastic-xslt-xmllint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR XQUERY                         *syntastic-checkers-xquery*\n\nThe following checkers are available for XQuery (filetype \"xquery\"):\n\n    1. BaseX....................|syntastic-xquery-basex|\n\n------------------------------------------------------------------------------\n1. BaseX                                              *syntastic-xquery-basex*\n\nName:        basex\nMaintainer:  James Wright <james.jw@hotmail.com>\n\n\"BaseX\" is an XML database engine and XPath`/`XQuery processor. See the\nproject's page for details:\n\n    http://basex.org/\n\nInstallation~\n\n1. Install \"BaseX\"\n2. Add the \"basex/bin\" folder to your \"$PATH\".\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR XSLT                             *syntastic-checkers-xslt*\n\nThe following checkers are available for XSLT (filetype \"xslt\"):\n\n    1. xmllint..................|syntastic-xslt-xmllint|\n\n------------------------------------------------------------------------------\n1. xmllint                                            *syntastic-xslt-xmllint*\n\nName:        xmllint\nMaintainer:  Sebastian Kusnier <sebastian@kusnier.net>\n\n\"xmllint\" is a linter and transformer tool for XML files, distributed with\nthe \"libxml\" package (http://www.xmlsoft.org/). See the tool's manual for more\ninformation:\n\n    http://xmlsoft.org/xmllint.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-docbk-xmllint|, |syntastic-xml-xmllint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR YACC                             *syntastic-checkers-yacc*\n\nThe following checkers are available for YACC (filetype \"yacc\"):\n\n    1. Bison....................|syntastic-yacc-bison|\n\n------------------------------------------------------------------------------\n1. Bison                                                *syntastic-yacc-bison*\n\nName:        bison\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Bison\" is the GNU implementation of the standard UNIX parser generator\n\"yacc\" (http://en.wikipedia.org/wiki/Yacc). See the project's page for more\ninformation:\n\n    http://www.gnu.org/software/bison/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR YAML                             *syntastic-checkers-yaml*\n\nThe following checkers are available for YAML (filetype \"yaml\"):\n\n    1. JavaScript YAML..........|syntastic-yaml-jsyaml|\n    2. yamllint.................|syntastic-yaml-yamllint|\n    3. YAML::XS.................|syntastic-yaml-yamlxs|\n\n------------------------------------------------------------------------------\n1. JavaScript YAML                                     *syntastic-yaml-jsyaml*\n\nName:        jsyaml\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"JavaScript YAML\" is a parser for YAML. See the project's page at GitHub for\ndetails:\n\n    https://github.com/nodeca/js-yaml\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g js-yaml\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. yamllint                                          *syntastic-yaml-yamllint*\n\nName:        yamllint\nMaintainer:  Adrien Verg\u0102\u0160\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n\"yamllint\" is a linter and style checker for YAML.\nSee the project's page at GitHub for details:\n\n    https://github.com/adrienverge/yamllint\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install yamllint\n<\n------------------------------------------------------------------------------\n3. YAML::XS                                            *syntastic-yaml-yamlxs*\n\nName:        yamlxs\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis is a syntax checker for YAML 1.1 using the Perl module \"YAML::XS\":\n\n    https://metacpan.org/pod/YAML::XS\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                              'g:syntastic_perl_interpreter'\nType: string\nDefault: \"perl\"\nThe perl interpreter to use.\n\n                                                 'g:syntastic_perl_lib_path'\nType: list\nDefault: []\nList of include directories to be added to the perl command line. Example: >\n    let g:syntastic_perl_lib_path = [ \"/usr/local/lib/perl5/auto\" ]\n<\nNote~\n\nThe variable |'g:syntastic_perl_interpreter'| is shared with the \"perl\" checker\n(cf. |syntastic-perl-perl|). If for some reasons you don't want to use the same\ninterpreter for both checkers, you can override it locally by setting\n'g:syntastic_yaml_yamlxs_exec'.\n\n==============================================================================\nSYNTAX CHECKERS FOR YANG                             *syntastic-checkers-yang*\n\nThe following checkers are available for YANG data models (filetype \"yang\"):\n\n    1. pyang....................|syntastic-yang-pyang|\n\n------------------------------------------------------------------------------\n1. pyang                                                *syntastic-yang-pyang*\n\nName:        pyang\nMaintainer:  Joshua Downer <joshua.downer@gmail.com>\n\n\"pyang\" is a validator for YANG data models (http://www.yang-central.org/).\nSee the project's page at GitHub for more information:\n\n    https://github.com/mbj4668/pyang\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for YANG files, such as\n\"yang.vim\":\n\n    https://github.com/nathanalderson/yang.vim\n\n==============================================================================\nSYNTAX CHECKERS FOR YARA                             *syntastic-checkers-yara*\n\nThe following checkers are available for YARA rule files (filetype \"yara\"):\n\n    1. yarac....................|syntastic-yara-yarac|\n\n------------------------------------------------------------------------------\n1. yarac                                                *syntastic-yara-yarac*\n\nName:        yarac\nMaintainer:  Albert Song <albb@teamt5.org>\n\n\"yarac\" is the official compiler for YARA rule files. See the project's page\nat GitHub for more information:\n\n    https://github.com/VirusTotal/yara\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for YARA rule files, such as\n\"vim-yara\":\n\n    https://github.com/yaunj/vim-yara\n\n==============================================================================\nSYNTAX CHECKERS FOR Z80                               *syntastic-checkers-z80*\n\nThe following checkers are available for Z80 (filetype \"z80\"):\n\n    1. Z80syntaxchecker.........|syntastic-z80-z80syntaxchecker|\n\n------------------------------------------------------------------------------\n1. Z80syntaxchecker                           *syntastic-z80-z80syntaxchecker*\n\nName:        z80syntaxchecker\nMaintainer:  Romain Giot <giot.romain@gmail.com>\n\n\"Z80syntaxchecker\" is a syntax linter for Z80 assembly files.\n\nInstallation~\n\nTo install \"Z80syntaxchecker\" either install \"pycpcdemotools\"\n(https://github.com/cpcsdk/pycpcdemotools), or copy the following script to a\ndirectory in your \"$PATH\":\n\n    https://raw.githubusercontent.com/rgiot/pycpcdemotools/master/cpcdemotools/source_checker/z80_syntax_checker.py\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ZOPE PAGE TEMPLATES               *syntastic-checkers-zpt*\n\nThe following checkers are available for Zope Page Templates (filetype \"zpt\"):\n\n    1. zptlint..................|syntastic-zpt-zptlint|\n\n------------------------------------------------------------------------------\n1. zptlint                                             *syntastic-zpt-zptlint*\n\nName:        zptlint\nMaintainer:  claytron <robots@claytron.com>\n\n\"zptlint\" is a linter for Zope Page Templates. See the project's README for\nmore information:\n\n    https://trac.bubblenet.be/browser/bubblenet/pythoncode/zptlint/trunk/README.txt?format=txt\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install zptlint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need to set |filetype| for Zope Page Templates to \"zpt\".\nYou can do that with an `:autocmd`: >\n    autocmd BufNewFile,BufRead *.pt,*.cpt,*.zpt set filetype=zpt syntax=xml\n<\n==============================================================================\nSYNTAX CHECKERS FOR ZSH                               *syntastic-checkers-zsh*\n\nThe following checkers are available for Zsh (filetype \"zsh\"):\n\n    1. zsh......................|syntastic-zsh-zsh|\n\n------------------------------------------------------------------------------\n1. zsh                                                     *syntastic-zsh-zsh*\n\nName:        zsh\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nCONFIGURATION FILES                                   *syntastic-config-files*\n\n    Supported checkers..........|syntastic-config-checkers|\n    Naming......................|syntastic-config-naming|\n    Location....................|syntastic-config-location|\n    Format......................|syntastic-config-format|\n\n                                                   *syntastic-config-checkers*\nCurrently, the following checkers can read some of their options from\nsyntastic-specific configuration files:\n\n    ADA~\n        GCC (|syntastic-ada-gcc|)\n\n    Assembly Languages~\n        GCC (|syntastic-asm-gcc|)\n\n    C~\n        AVR-GCC (|syntastic-c-avrgcc|)\n        ClangCheck (|syntastic-c-clang_check|)\n        Clang-Tidy (|syntastic-c-clang_tidy|)\n        Cppcheck (|syntastic-c-cppcheck|)\n        GCC (|syntastic-c-gcc|)\n        OCLint (|syntastic-c-oclint|)\n        Sparse (|syntastic-c-sparse|)\n        Splint (|syntastic-c-splint|)\n\n    COBOL~\n        OpenCOBOL (|syntastic-cobol-cobc|)\n\n    C++~\n        AVR-GCC (|syntastic-cpp-avrgcc|)\n        ClangCheck (|syntastic-cpp-clang_check|)\n        Clang-Tidy (|syntastic-cpp-clang_tidy|)\n        Cppcheck (|syntastic-cpp-cppcheck|)\n        GCC (|syntastic-cpp-gcc|)\n        OCLint (|syntastic-cpp-oclint|)\n        Vera++ (|syntastic-cpp-verapp|)\n\n    D~\n        DMD (|syntastic-d-dmd|)\n\n    Fortran~\n        GNU Fortran (|syntastic-fortran-gfortran|)\n\n    Objective-C~\n        GCC (|syntastic-objc-gcc|)\n        OCLint (|syntastic-objc-oclint|)\n\n    Objective-C++~\n        GCC (|syntastic-objcpp-gcc|)\n        OCLint (|syntastic-objcpp-oclint|)\n\n    Verilog~\n        Verilator (|syntastic-verilog-verilator|)\n\n                                                     *syntastic-config-naming*\nNaming~\n\nDepending on checker, the filename of the corresponding configuration file\ncan be specified by setting either 'g:syntastic_<filetype>_config_file' or\n'g:syntastic_<checker>_config_file'. Refer to the docs for the particular\ncheckers above for the exact names.\n                                                   *syntastic-config-location*\nLocation~\n\nA configuration file is looked up in the directory of the file being checked,\nthen upwards in parent directories.  The search stops either when a file with\nthe right name is found, or when the root of the filesystem is reached.\n\nConsequently, you would normally put a configuration file in the top directory\nof your project, and you would override it when needed with other configuration\nfiles placed in subdirectories.\n                                                     *syntastic-config-format*\nFormat~\n\nThe file is expected to contain one option per line.  Empty lines and lines\nstarting with `#` are removed.  On each line, leading and trailing spaces are\nalso removed.  Each option is then escaped, so you don't have to worry about\nspecial characters.\n\nLines starting with `-I` are assumed to be include paths, and are handled\nspecially.  If the path following an `-I` is relative, it's treated as\nbeing relative to the current configuration file, and is replaced by the\ncorresponding absolute path.  If the path is absolute to begin with, it is\nleft unchanged.\n\nPlease note that, aside from `-I`, syntastic doesn't try to keep track of\noptions with arguments.  If you need to pass f.i. `-aux-info filename` to your\ncompiler you have to write `-aux-info` and `filename` on separate lines in the\nconfiguration file, otherwise syntastic will quote the space and merge them in\na single string, which is probably not what you mean: >\n    -aux-info\n    filename\n<\nIn the same vein, `=` in options not special in any way.  As stated\nabove, everything on a line (except lines starting with `-I`, as noted)\nis considered an \"option\" and escaped.\n\n vim:tw=78:sw=4:ft=help:norl:\n", "\"============================================================================\n\"File:        syntastic.vim\n\"Description: Vim plugin for on the fly syntax checking.\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_plugin') || &compatible\n    finish\nendif\nlet g:loaded_syntastic_plugin = 1\n\nif has('reltime')\n    let g:_SYNTASTIC_START = reltime()\n    lockvar! g:_SYNTASTIC_START\nendif\n\nlet g:_SYNTASTIC_VERSION = '3.8.0-110'\nlockvar g:_SYNTASTIC_VERSION\n\n\" Sanity checks {{{1\n\nif v:version < 700 || (v:version == 700 && !has('patch175'))\n    call syntastic#log#error('need Vim version 7.0.175 or later')\n    finish\nendif\n\nfor s:feature in [\n            \\ 'autocmd',\n            \\ 'eval',\n            \\ 'file_in_path',\n            \\ 'modify_fname',\n            \\ 'quickfix',\n            \\ 'reltime',\n            \\ 'statusline',\n            \\ 'user_commands',\n        \\ ]\n    if !has(s:feature)\n        call syntastic#log#error('need Vim compiled with feature ' . s:feature)\n        finish\n    endif\nendfor\n\nlet s:_running_windows = syntastic#util#isRunningWindows()\nlockvar s:_running_windows\n\nif !exists('g:syntastic_shell')\n    let g:syntastic_shell = &shell\nendif\n\nif s:_running_windows\n    let g:_SYNTASTIC_UNAME = 'Windows'\nelseif executable('uname')\n    try\n        let g:_SYNTASTIC_UNAME = split(syntastic#util#system('uname'), \"\\n\")[0]\n    catch /\\m^Vim\\%((\\a\\+)\\)\\=:E484/\n        call syntastic#log#error(\"can't run external programs (misconfigured shell options?)\")\n        finish\n    catch /\\m^Vim\\%((\\a\\+)\\)\\=:E684/\n        let g:_SYNTASTIC_UNAME = 'Unknown'\n    endtry\nelse\n    let g:_SYNTASTIC_UNAME = 'Unknown'\nendif\nlockvar g:_SYNTASTIC_UNAME\n\n\" XXX Ugly hack to make g:_SYNTASTIC_UNAME available to :SyntasticInfo without\n\" polluting session namespaces\nlet g:syntastic_version =\n    \\ g:_SYNTASTIC_VERSION .\n    \\ ' (Vim ' . v:version . (has('nvim') ? ', Neovim' : '') . ', ' .\n    \\ g:_SYNTASTIC_UNAME .\n    \\ (has('gui') ? ', GUI' : '') . ')'\nlockvar g:syntastic_version\n\n\" }}}1\n\n\" Defaults {{{1\n\nlet g:_SYNTASTIC_DEFAULTS = {\n        \\ 'aggregate_errors':         0,\n        \\ 'always_populate_loc_list': 0,\n        \\ 'auto_jump':                0,\n        \\ 'auto_loc_list':            2,\n        \\ 'check_on_open':            0,\n        \\ 'check_on_wq':              1,\n        \\ 'cursor_columns':           1,\n        \\ 'debug':                    0,\n        \\ 'echo_current_error':       1,\n        \\ 'enable_balloons':          1,\n        \\ 'enable_highlighting':      1,\n        \\ 'enable_signs':             1,\n        \\ 'error_symbol':             '>>',\n        \\ 'exit_checks':              !(s:_running_windows && syntastic#util#var('shell', &shell) =~? '\\m\\<cmd\\.exe$'),\n        \\ 'filetype_map':             {},\n        \\ 'full_redraws':             !(has('gui_running') || has('gui_macvim')),\n        \\ 'id_checkers':              1,\n        \\ 'ignore_extensions':        '\\c\\v^([gx]?z|lzma|bz2)$',\n        \\ 'ignore_files':             [],\n        \\ 'loc_list_height':          10,\n        \\ 'nested_autocommands':      0,\n        \\ 'quiet_messages':           {},\n        \\ 'reuse_loc_lists':          1,\n        \\ 'shell':                    &shell,\n        \\ 'sort_aggregated_errors':   1,\n        \\ 'stl_format':               '[Syntax: line:%F (%t)]',\n        \\ 'style_error_symbol':       'S>',\n        \\ 'style_warning_symbol':     'S>',\n        \\ 'warning_symbol':           '>>'\n    \\ }\nlockvar! g:_SYNTASTIC_DEFAULTS\n\nfor s:key in keys(g:_SYNTASTIC_DEFAULTS)\n    if !exists('g:syntastic_' . s:key)\n        let g:syntastic_{s:key} = copy(g:_SYNTASTIC_DEFAULTS[s:key])\n    endif\nendfor\n\nif exists('g:syntastic_quiet_warnings')\n    call syntastic#log#oneTimeWarn(\"variable g:syntastic_quiet_warnings is deprecated, please use let g:syntastic_quiet_messages = {'level': 'warnings'} instead\")\n    if g:syntastic_quiet_warnings\n        let s:quiet_warnings = get(g:syntastic_quiet_messages, 'type', [])\n        if type(s:quiet_warnings) != type([])\n            let s:quiet_warnings = [s:quiet_warnings]\n        endif\n        call add(s:quiet_warnings, 'warnings')\n        let g:syntastic_quiet_messages['type'] = s:quiet_warnings\n    endif\nendif\n\n\" }}}1\n\n\" Debug {{{1\n\nlet g:_SYNTASTIC_SHELL_OPTIONS = [\n        \\ 'shell',\n        \\ 'shellcmdflag',\n        \\ 'shellpipe',\n        \\ 'shellquote',\n        \\ 'shellredir',\n        \\ 'shelltemp',\n        \\ 'shellxquote'\n    \\ ]\nfor s:feature in [\n        \\ 'autochdir',\n        \\ 'shellslash',\n        \\ 'shellxescape',\n    \\ ]\n\n    if exists('+' . s:feature)\n        call add(g:_SYNTASTIC_SHELL_OPTIONS, s:feature)\n    endif\nendfor\nlockvar! g:_SYNTASTIC_SHELL_OPTIONS\n\n\" debug constants\nlet     g:_SYNTASTIC_DEBUG_TRACE         = 1\nlockvar g:_SYNTASTIC_DEBUG_TRACE\nlet     g:_SYNTASTIC_DEBUG_LOCLIST       = 2\nlockvar g:_SYNTASTIC_DEBUG_LOCLIST\nlet     g:_SYNTASTIC_DEBUG_NOTIFICATIONS = 4\nlockvar g:_SYNTASTIC_DEBUG_NOTIFICATIONS\nlet     g:_SYNTASTIC_DEBUG_AUTOCOMMANDS  = 8\nlockvar g:_SYNTASTIC_DEBUG_AUTOCOMMANDS\nlet     g:_SYNTASTIC_DEBUG_VARIABLES     = 16\nlockvar g:_SYNTASTIC_DEBUG_VARIABLES\nlet     g:_SYNTASTIC_DEBUG_CHECKERS      = 32\nlockvar g:_SYNTASTIC_DEBUG_CHECKERS\n\n\" }}}1\n\nruntime! plugin/syntastic/*.vim\n\nlet s:registry = g:SyntasticRegistry.Instance()\nlet s:notifiers = g:SyntasticNotifiers.Instance()\nlet s:modemap = g:SyntasticModeMap.Instance()\n\nlet s:_check_stack = []\nlet s:_quit_pre = []\n\n\" Commands {{{1\n\n\" @vimlint(EVL103, 1, a:cursorPos)\n\" @vimlint(EVL103, 1, a:cmdLine)\n\" @vimlint(EVL103, 1, a:argLead)\nfunction! s:CompleteCheckerName(argLead, cmdLine, cursorPos) abort \" {{{2\n    let names = []\n\n    let sep_idx = stridx(a:argLead, '/')\n    if sep_idx >= 1\n        let ft = a:argLead[: sep_idx-1]\n        call extend(names, map( s:registry.getNamesOfAvailableCheckers(ft), 'ft . \"/\" . v:val' ))\n    else\n        for ft in s:registry.resolveFiletypes(&filetype)\n            call extend(names, s:registry.getNamesOfAvailableCheckers(ft))\n        endfor\n        call extend(names, map( copy(s:registry.getKnownFiletypes()), 'v:val . \"/\"' ))\n    endif\n\n    return join(names, \"\\n\")\nendfunction \" }}}2\n\" @vimlint(EVL103, 0, a:cursorPos)\n\" @vimlint(EVL103, 0, a:cmdLine)\n\" @vimlint(EVL103, 0, a:argLead)\n\n\n\" @vimlint(EVL103, 1, a:cursorPos)\n\" @vimlint(EVL103, 1, a:cmdLine)\n\" @vimlint(EVL103, 1, a:argLead)\nfunction! s:CompleteFiletypes(argLead, cmdLine, cursorPos) abort \" {{{2\n    return join(s:registry.getKnownFiletypes(), \"\\n\")\nendfunction \" }}}2\n\" @vimlint(EVL103, 0, a:cursorPos)\n\" @vimlint(EVL103, 0, a:cmdLine)\n\" @vimlint(EVL103, 0, a:argLead)\n\ncommand! -bar -nargs=* -complete=custom,s:CompleteCheckerName SyntasticCheck call SyntasticCheck(<f-args>)\ncommand! -bar -nargs=? -complete=custom,s:CompleteFiletypes   SyntasticInfo  call SyntasticInfo(<f-args>)\ncommand! -bar Errors              call SyntasticErrors()\ncommand! -bar SyntasticReset      call SyntasticReset()\ncommand! -bar SyntasticToggleMode call SyntasticToggleMode()\ncommand! -bar SyntasticSetLoclist call SyntasticSetLoclist()\n\ncommand! SyntasticJavacEditClasspath runtime! syntax_checkers/java/*.vim | SyntasticJavacEditClasspath\ncommand! SyntasticJavacEditConfig    runtime! syntax_checkers/java/*.vim | SyntasticJavacEditConfig\n\n\" }}}1\n\n\" Public API {{{1\n\nfunction! SyntasticCheck(...) abort \" {{{2\n    call s:UpdateErrors(bufnr(''), 0, a:000)\n    call syntastic#util#redraw(g:syntastic_full_redraws)\nendfunction \" }}}2\n\nfunction! SyntasticInfo(...) abort \" {{{2\n    call s:modemap.modeInfo(a:000)\n    call s:registry.echoInfoFor(a:000)\n    call s:_explain_skip(a:000)\n    call syntastic#log#debugShowOptions(g:_SYNTASTIC_DEBUG_TRACE, g:_SYNTASTIC_SHELL_OPTIONS)\n    call syntastic#log#debugDump(g:_SYNTASTIC_DEBUG_VARIABLES)\nendfunction \" }}}2\n\nfunction! SyntasticErrors() abort \" {{{2\n    call g:SyntasticLoclist.current().show()\nendfunction \" }}}2\n\nfunction! SyntasticReset() abort \" {{{2\n    call s:ClearCache(bufnr(''))\n    call s:notifiers.refresh(g:SyntasticLoclist.New([]))\nendfunction \" }}}2\n\nfunction! SyntasticToggleMode() abort \" {{{2\n    call s:modemap.toggleMode()\n    call s:ClearCache(bufnr(''))\n    call s:notifiers.refresh(g:SyntasticLoclist.New([]))\n    call s:modemap.echoMode()\nendfunction \" }}}2\n\nfunction! SyntasticSetLoclist() abort \" {{{2\n    call g:SyntasticLoclist.current().setloclist(0)\nendfunction \" }}}2\n\n\" }}}1\n\n\" Autocommands {{{1\n\naugroup syntastic\n    autocmd!\n    autocmd VimEnter    * call s:VimEnterHook()\n    autocmd BufEnter    * call s:BufEnterHook(expand('<afile>', 1))\n    autocmd BufWinEnter * call s:BufWinEnterHook(expand('<afile>', 1))\naugroup END\n\nif g:syntastic_nested_autocommands\n    augroup syntastic\n        autocmd BufReadPost  * nested call s:BufReadPostHook(expand('<afile>', 1))\n        autocmd BufWritePost * nested call s:BufWritePostHook(expand('<afile>', 1))\n    augroup END\nelse\n    augroup syntastic\n        autocmd BufReadPost  * call s:BufReadPostHook(expand('<afile>', 1))\n        autocmd BufWritePost * call s:BufWritePostHook(expand('<afile>', 1))\n    augroup END\nendif\n\nif exists('##QuitPre')\n    \" QuitPre was added in Vim 7.3.544\n    augroup syntastic\n        autocmd QuitPre * call s:QuitPreHook(expand('<afile>', 1))\n    augroup END\nendif\n\nfunction! s:BufReadPostHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    if g:syntastic_check_on_open && buf > 0\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n            \\ 'autocmd: BufReadPost, buffer ' . buf . ' = ' . string(a:fname))\n        if index(s:_check_stack, buf) == -1\n            call add(s:_check_stack, buf)\n        endif\n    endif\nendfunction \" }}}2\n\nfunction! s:BufWritePostHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: BufWritePost, buffer ' . buf . ' = ' . string(a:fname))\n    call s:UpdateErrors(buf, 1, [])\nendfunction \" }}}2\n\nfunction! s:BufEnterHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: BufEnter, buffer ' . buf . ' = ' . string(a:fname) . ', &buftype = ' . string(&buftype))\n    if buf > 0 && getbufvar(buf, '&buftype') ==# ''\n        let idx = index(reverse(copy(s:_check_stack)), buf)\n        if idx >= 0\n            if !has('vim_starting')\n                call remove(s:_check_stack, -idx - 1)\n                call s:UpdateErrors(buf, 1, [])\n            endif\n        elseif &buftype ==# ''\n            call s:notifiers.refresh(g:SyntasticLoclist.current())\n        endif\n    elseif &buftype ==# 'quickfix'\n        \" TODO: this is needed because in recent versions of Vim lclose\n        \" can no longer be called from BufWinLeave\n        \" TODO: at this point there is no b:syntastic_loclist\n        let loclist = filter(copy(getloclist(0)), 'v:val[\"valid\"]')\n        let owner = str2nr(getbufvar(buf, 'syntastic_owner_buffer'))\n        let buffers = syntastic#util#unique(map(loclist, 'v:val[\"bufnr\"]') + (owner ? [owner] : []))\n        if !empty(get(w:, 'syntastic_loclist_set', [])) && !empty(loclist) && empty(filter( buffers, 'syntastic#util#bufIsActive(v:val)' ))\n            call SyntasticLoclistHide()\n        endif\n    endif\nendfunction \" }}}2\n\nfunction! s:BufWinEnterHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: BufWinEnter, buffer ' . buf . ' = ' . string(a:fname) . ', &buftype = ' . string(&buftype))\n    if buf > 0 && getbufvar(buf, '&buftype') ==# ''\n        let idx = index(reverse(copy(s:_check_stack)), buf)\n        if idx >= 0 && !has('vim_starting')\n            call remove(s:_check_stack, -idx - 1)\n            call s:UpdateErrors(buf, 1, [])\n        endif\n    endif\nendfunction \" }}}2\n\nfunction! s:VimEnterHook() abort \" {{{2\n    let buf = bufnr('')\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: VimEnter, buffer ' . buf . ' = ' . string(bufname(buf)) . ', &buftype = ' . string(&buftype))\n    let idx = index(reverse(copy(s:_check_stack)), buf)\n    if idx >= 0 && getbufvar(buf, '&buftype') ==# ''\n        call remove(s:_check_stack, -idx - 1)\n        call s:UpdateErrors(buf, 1, [])\n    endif\nendfunction \" }}}2\n\nfunction! s:QuitPreHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS, 'autocmd: QuitPre, buffer ' . buf . ' = ' . string(a:fname))\n\n    if !syntastic#util#var('check_on_wq')\n        call syntastic#util#setWids()\n        call add(s:_quit_pre, buf . '_' . getbufvar(buf, 'changetick') . '_' . w:syntastic_wid)\n    endif\n\n    if !empty(get(w:, 'syntastic_loclist_set', []))\n        call SyntasticLoclistHide()\n    endif\nendfunction \" }}}2\n\n\" }}}1\n\n\" Main {{{1\n\n\"refresh and redraw all the error info for this buf when saving or reading\nfunction! s:UpdateErrors(buf, auto_invoked, checker_names) abort \" {{{2\n    call syntastic#log#debugShowVariables(g:_SYNTASTIC_DEBUG_TRACE, 'version')\n    call syntastic#log#debugShowOptions(g:_SYNTASTIC_DEBUG_TRACE, g:_SYNTASTIC_SHELL_OPTIONS)\n    call syntastic#log#debugDump(g:_SYNTASTIC_DEBUG_VARIABLES)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'UpdateErrors' . (a:auto_invoked ? ' (auto)' : '') .\n        \\ ': ' . (len(a:checker_names) ? join(a:checker_names) : 'default checkers'))\n\n    call s:modemap.synch()\n\n    if s:_skip_file(a:buf)\n        return\n    endif\n\n    let run_checks = !a:auto_invoked || s:modemap.doAutoChecking(a:buf)\n    if run_checks\n        call s:CacheErrors(a:buf, a:checker_names)\n        call syntastic#util#setLastTick(a:buf)\n    elseif a:auto_invoked\n        return\n    endif\n\n    let loclist = g:SyntasticLoclist.current(a:buf)\n\n    if exists('*SyntasticCheckHook')\n        call SyntasticCheckHook(loclist.getRaw())\n    endif\n\n    \" populate loclist and jump {{{3\n    let do_jump = syntastic#util#var('auto_jump') + 0\n    if do_jump == 2\n        let do_jump = loclist.getFirstError(1)\n    elseif do_jump == 3\n        let do_jump = loclist.getFirstError()\n    elseif 0 > do_jump || do_jump > 3\n        let do_jump = 0\n    endif\n\n    if syntastic#util#var('always_populate_loc_list') || do_jump\n        call loclist.setloclist(1)\n        if run_checks && do_jump && !loclist.isEmpty()\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_NOTIFICATIONS, 'loclist: jump')\n            execute 'silent! lrewind ' . do_jump\n\n            \" XXX: Vim doesn't call autocmd commands in a predictible\n            \" order, which can lead to missing filetype when jumping\n            \" to a new file; the following is a workaround for the\n            \" resulting brain damage\n            if &filetype ==# ''\n                silent! filetype detect\n            endif\n        endif\n    endif\n    \" }}}3\n\n    call s:notifiers.refresh(loclist)\nendfunction \" }}}2\n\n\"clear the loc list for the buffer\nfunction! s:ClearCache(buf) abort \" {{{2\n    let loclist = g:SyntasticLoclist.current(a:buf)\n    call s:notifiers.reset(loclist)\n    call loclist.destroy()\nendfunction \" }}}2\n\n\"detect and cache all syntax errors in this buffer\nfunction! s:CacheErrors(buf, checker_names) abort \" {{{2\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: ' .\n        \\ (len(a:checker_names) ? join(a:checker_names) : 'default checkers'))\n    call s:ClearCache(a:buf)\n    let newLoclist = g:SyntasticLoclist.New([])\n    call newLoclist.setOwner(a:buf)\n\n    if !s:_skip_file(a:buf)\n        \" debug logging {{{3\n        call syntastic#log#debugShowVariables(g:_SYNTASTIC_DEBUG_TRACE, 'aggregate_errors')\n        if syntastic#util#isRunningWindows()\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$TMP = ' . string($TMP) . ', $TEMP = ' . string($TEMP))\n        else\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$TERM = ' . string($TERM))\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$TMPDIR = ' . string($TMPDIR))\n        endif\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$PATH = ' . string($PATH))\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'getcwd() = ' . string(getcwd()))\n        \" }}}3\n\n        let clist = s:registry.getCheckers(getbufvar(a:buf, '&filetype'), a:checker_names)\n\n        let aggregate_errors =\n            \\ syntastic#util#var('aggregate_errors') || len(syntastic#util#unique(map(copy(clist), 'v:val.getFiletype()'))) > 1\n        let decorate_errors = aggregate_errors && syntastic#util#var('id_checkers')\n        let sort_aggregated_errors = aggregate_errors && syntastic#util#var('sort_aggregated_errors')\n\n        let names = []\n        let unavailable_checkers = 0\n        for checker in clist\n            let cname = checker.getCName()\n            if !checker.isAvailable()\n                call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: Checker ' . cname . ' is not available')\n                let unavailable_checkers += 1\n                continue\n            endif\n\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: Invoking checker: ' . cname)\n\n            let loclist = checker.getLocList()\n\n            if !loclist.isEmpty()\n                if decorate_errors\n                    call loclist.decorate(cname)\n                endif\n                call add(names, cname)\n                if checker.wantSort() && !sort_aggregated_errors\n                    call loclist.sort()\n                    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'sorted:', loclist)\n                endif\n\n                call newLoclist.extend(loclist)\n\n                if !aggregate_errors\n                    break\n                endif\n            endif\n        endfor\n\n        \" set names {{{3\n        if !empty(names)\n            if len(syntastic#util#unique(map( copy(names), 'substitute(v:val, \"\\\\m/.*\", \"\", \"\")' ))) == 1\n                let type = substitute(names[0], '\\m/.*', '', '')\n                let name = join(map( names, 'substitute(v:val, \"\\\\m.\\\\{-}/\", \"\", \"\")' ), ', ')\n                call newLoclist.setName( name . ' ('. type . ')' )\n            else\n                \" checkers from mixed types\n                call newLoclist.setName(join(names, ', '))\n            endif\n        endif\n        \" }}}3\n\n        \" issue warning about no active checkers {{{3\n        if len(clist) == unavailable_checkers\n            if !empty(a:checker_names)\n                if len(a:checker_names) == 1\n                    call syntastic#log#warn('checker ' . a:checker_names[0] . ' is not available')\n                else\n                    call syntastic#log#warn('checkers ' . join(a:checker_names, ', ') . ' are not available')\n                endif\n            else\n                call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: no checkers available for ' . &filetype)\n            endif\n        endif\n        \" }}}3\n\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'aggregated:', newLoclist)\n        if sort_aggregated_errors\n            call newLoclist.sort()\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'sorted:', newLoclist)\n        endif\n    endif\n\n    call newLoclist.deploy()\nendfunction \" }}}2\n\n\"Emulates the :lmake command. Sets up the make environment according to the\n\"options given, runs make, resets the environment, returns the location list\n\"\n\"a:options can contain the following keys:\n\"    'makeprg'\n\"    'errorformat'\n\"\n\"The corresponding options are set for the duration of the function call. They\n\"are set with :let, so dont escape spaces.\n\"\n\"a:options may also contain:\n\"   'defaults' - a dict containing default values for the returned errors\n\"   'subtype' - all errors will be assigned the given subtype\n\"   'preprocess' - a function to be applied to the error file before parsing errors\n\"   'postprocess' - a list of functions to be applied to the error list\n\"   'cwd' - change directory to the given path before running the checker\n\"   'env' - environment variables to set before running the checker\n\"   'returns' - a list of valid exit codes for the checker\n\" @vimlint(EVL102, 1, l:env_save)\nfunction! SyntasticMake(options) abort \" {{{2\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'SyntasticMake: called with options:', a:options)\n\n    \" save options and locale env variables {{{3\n    let old_local_errorformat = &l:errorformat\n    let old_errorformat = &errorformat\n    let old_cwd = getcwd()\n    \" }}}3\n\n    if has_key(a:options, 'errorformat')\n        let &errorformat = a:options['errorformat']\n        set errorformat<\n    endif\n\n    if has_key(a:options, 'cwd')\n        execute 'lcd ' . fnameescape(a:options['cwd'])\n    endif\n\n    \" set environment variables {{{3\n    let env_save = {}\n    if has_key(a:options, 'env') && len(a:options['env'])\n        for key in keys(a:options['env'])\n            if key =~? '\\m^[a-z_][a-z0-9_]*$'\n                execute 'let env_save[' . string(key) . '] = $' . key\n                execute 'let $' . key . ' = ' . string(a:options['env'][key])\n            endif\n        endfor\n    endif\n    \" }}}3\n\n    let err_lines = split(syntastic#util#system(a:options['makeprg']), \"\\n\", 1)\n\n    \" restore environment variables {{{3\n    if len(env_save)\n        for key in keys(env_save)\n            execute 'let $' . key . ' = ' . string(env_save[key])\n        endfor\n    endif\n    \" }}}3\n\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'checker output:', err_lines)\n\n    \" Does it still make sense to go on?\n    let bailout =\n        \\ syntastic#util#var('exit_checks') &&\n        \\ has_key(a:options, 'returns') &&\n        \\ index(a:options['returns'], v:shell_error) == -1\n\n    if !bailout\n        if has_key(a:options, 'Preprocess')\n            let err_lines = call(a:options['Preprocess'], [err_lines])\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'preprocess (external):', err_lines)\n        elseif has_key(a:options, 'preprocess')\n            let err_lines = call('syntastic#preprocess#' . a:options['preprocess'], [err_lines])\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'preprocess:', err_lines)\n        endif\n        noautocmd lgetexpr err_lines\n\n        let errors = deepcopy(getloclist(0))\n\n        if has_key(a:options, 'cwd')\n            execute 'lcd ' . fnameescape(old_cwd)\n        endif\n\n        try\n            silent lolder\n        catch /\\m^Vim\\%((\\a\\+)\\)\\=:E380/\n            \" E380: At bottom of quickfix stack\n            call setloclist(0, [], 'r')\n            try\n                \" Vim 7.4.2200 or later\n                call setloclist(0, [], 'r', { 'title': '' })\n            catch /\\m^Vim\\%((\\a\\+)\\)\\=:E\\%(118\\|731\\)/\n                \" do nothing\n            endtry\n        catch /\\m^Vim\\%((\\a\\+)\\)\\=:E776/\n            \" E776: No location list\n            \" do nothing\n        endtry\n    else\n        let errors = []\n    endif\n\n    \" restore options {{{3\n    let &errorformat = old_errorformat\n    let &l:errorformat = old_local_errorformat\n    \" }}}3\n\n    if !s:_running_windows && (s:_os_name() =~? 'FreeBSD' || s:_os_name() =~? 'OpenBSD')\n        call syntastic#util#redraw(g:syntastic_full_redraws)\n    endif\n\n    if bailout\n        call syntastic#log#ndebug(g:_SYNTASTIC_DEBUG_LOCLIST, 'checker output:', err_lines)\n        throw 'Syntastic: checker error'\n    endif\n\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'raw loclist:', errors)\n\n    if has_key(a:options, 'defaults')\n        call s:_add_to_errors(errors, a:options['defaults'])\n    endif\n\n    \" Add subtype info if present.\n    if has_key(a:options, 'subtype')\n        call s:_add_to_errors(errors, { 'subtype': a:options['subtype'] })\n    endif\n\n    if has_key(a:options, 'Postprocess') && !empty(a:options['Postprocess'])\n        for rule in a:options['Postprocess']\n            let errors = call(rule, [errors])\n        endfor\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'postprocess (external):', errors)\n    elseif has_key(a:options, 'postprocess') && !empty(a:options['postprocess'])\n        for rule in a:options['postprocess']\n            let errors = call('syntastic#postprocess#' . rule, [errors])\n        endfor\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'postprocess:', errors)\n    endif\n\n    return errors\nendfunction \" }}}2\n\" @vimlint(EVL102, 0, l:env_save)\n\n\"return a string representing the state of buffer according to\n\"g:syntastic_stl_format\n\"\n\"return '' if no errors are cached for the buffer\nfunction! SyntasticStatuslineFlag() abort \" {{{2\n    return g:SyntasticLoclist.current().getStatuslineFlag()\nendfunction \" }}}2\n\n\" }}}1\n\n\" Utilities {{{1\n\nfunction! s:_ignore_file(filename) abort \" {{{2\n    let fname = fnamemodify(a:filename, ':p')\n    for pattern in g:syntastic_ignore_files\n        if fname =~# pattern\n            return 1\n        endif\n    endfor\n    return 0\nendfunction \" }}}2\n\nfunction! s:_is_quitting(buf) abort \" {{{2\n    let quitting = 0\n    if exists('w:syntastic_wid')\n        let key = a:buf . '_' . getbufvar(a:buf, 'changetick') . '_' . w:syntastic_wid\n        let idx = index(s:_quit_pre, key)\n        if idx >= 0\n            call remove(s:_quit_pre, idx)\n            let quitting = 1\n        endif\n    endif\n\n    return quitting\nendfunction \" }}}2\n\n\" Skip running in special buffers\nfunction! s:_skip_file(buf) abort \" {{{2\n    let fname = bufname(a:buf)\n    let skip = s:_is_quitting(a:buf) || getbufvar(a:buf, 'syntastic_skip_checks') ||\n        \\ (getbufvar(a:buf, '&buftype') !=# '') || !filereadable(fname) || getwinvar(0, '&diff') ||\n        \\ getwinvar(0, '&previewwindow') || s:_ignore_file(fname) ||\n        \\ fnamemodify(fname, ':e') =~? g:syntastic_ignore_extensions\n    if skip\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, '_skip_file: skipping checks')\n    endif\n    return skip\nendfunction \" }}}2\n\n\" Explain why checks will be skipped for the current file\nfunction! s:_explain_skip(filetypes) abort \" {{{2\n    let buf = bufnr('')\n    if empty(a:filetypes) && s:_skip_file(buf)\n        let why = []\n        let fname = bufname(buf)\n        let bt = getbufvar(buf, '&buftype')\n\n        if s:_is_quitting(buf)\n            call add(why, 'quitting buffer')\n        endif\n        if getbufvar(buf, 'syntastic_skip_checks')\n            call add(why, 'b:syntastic_skip_checks set')\n        endif\n        if bt !=# ''\n            call add(why, 'buftype = ' . string(&buftype))\n        endif\n        if !filereadable(fname)\n            call add(why, 'file not readable / not local')\n        endif\n        if getwinvar(0, '&diff')\n            call add(why, 'diff mode')\n        endif\n        if getwinvar(0, '&previewwindow')\n            call add(why, 'preview window')\n        endif\n        if s:_ignore_file(fname)\n            call add(why, 'filename matching g:syntastic_ignore_files')\n        endif\n        if fnamemodify(fname, ':e') =~? g:syntastic_ignore_extensions\n            call add(why, 'extension matching g:syntastic_ignore_extensions')\n        endif\n\n        echomsg 'The current file will not be checked (' . join(why, ', ') . ')'\n    endif\nendfunction \" }}}2\n\n\" Take a list of errors and add default values to them from a:options\nfunction! s:_add_to_errors(errors, options) abort \" {{{2\n    for err in a:errors\n        for key in keys(a:options)\n            if !has_key(err, key) || empty(err[key])\n                let err[key] = a:options[key]\n            endif\n        endfor\n    endfor\n\n    return a:errors\nendfunction \" }}}2\n\nfunction! s:_os_name() abort \" {{{2\n    return g:_SYNTASTIC_UNAME\nendfunction \" }}}2\n\n\" }}}1\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        avrgcc.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Karel <karelishere at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_avrgcc_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_avrgcc_checker = 1\n\nif !exists('g:syntastic_avrgcc_config_file')\n    let g:syntastic_avrgcc_config_file = '.syntastic_avrgcc_config'\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nlet s:opt_x = { 'c': 'c', 'cpp': 'c++' }\n\nfunction! SyntaxCheckers_c_avrgcc_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'args_before': syntastic#c#ReadConfig(g:syntastic_avrgcc_config_file),\n        \\ 'args_after': '-x ' . get(s:opt_x, self.getFiletype(), '')  . ' -fsyntax-only' })\n\n    let errorformat =\n        \\ '%-G%f:%s:,' .\n        \\ '%-G%f:%l: %#error: %#(Each undeclared identifier is reported only%.%#,' .\n        \\ '%-G%f:%l: %#error: %#for each function it appears%.%#,' .\n        \\ '%-GIn file included%.%#,' .\n        \\ '%-G %#from %f:%l\\,,' .\n        \\ '%f:%l:%c: %trror: %m,' .\n        \\ '%f:%l:%c: %tarning: %m,' .\n        \\ '%f:%l:%c: %m,' .\n        \\ '%f:%l: %trror: %m,' .\n        \\ '%f:%l: %tarning: %m,'.\n        \\ '%f:%l: %m'\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'postprocess': ['compressWhitespace'] })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'avrgcc',\n    \\ 'exec': 'avr-gcc'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        clang_check.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Benjamin Bannier <bbannier at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_clang_check_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_clang_check_checker = 1\n\nif !exists('g:syntastic_clang_check_config_file')\n    let g:syntastic_clang_check_config_file = '.syntastic_clang_check_config'\nendif\n\nif !exists('g:syntastic_c_clang_check_sort')\n    let g:syntastic_c_clang_check_sort = 1\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_clang_check_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'post_args':\n        \\   '-- ' .\n        \\   syntastic#c#ReadConfig(g:syntastic_clang_check_config_file) . ' ' .\n        \\   '-fshow-column ' .\n        \\   '-fshow-source-location ' .\n        \\   '-fno-caret-diagnostics ' .\n        \\   '-fno-color-diagnostics ' .\n        \\   '-fdiagnostics-format=clang' })\n\n    let errorformat =\n        \\ '%E%f:%l:%c: fatal error: %m,' .\n        \\ '%E%f:%l:%c: error: %m,' .\n        \\ '%W%f:%l:%c: warning: %m,' .\n        \\ '%-G%\\m%\\%%(LLVM ERROR:%\\|No compilation database found%\\)%\\@!%.%#,' .\n        \\ '%E%m'\n\n    let env = syntastic#util#isRunningWindows() ? {} : { 'TERM': 'dumb' }\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'env': env,\n        \\ 'defaults': {'bufnr': bufnr('')},\n        \\ 'returns': [0, 1] })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'clang_check',\n    \\ 'exec': 'clang-check'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        clang_tidy.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Benjamin Bannier <bbannier at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_clang_tidy_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_clang_tidy_checker = 1\n\nif !exists('g:syntastic_clang_tidy_config_file')\n    let g:syntastic_clang_tidy_config_file = '.syntastic_clang_tidy_config'\nendif\n\nif !exists('g:syntastic_c_clang_tidy_sort')\n    let g:syntastic_c_clang_tidy_sort = 1\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_clang_tidy_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'post_args':\n        \\   '-- ' .\n        \\   syntastic#c#ReadConfig(g:syntastic_clang_tidy_config_file) . ' ' .\n        \\   '-fshow-column ' .\n        \\   '-fshow-source-location ' .\n        \\   '-fno-caret-diagnostics ' .\n        \\   '-fno-color-diagnostics ' .\n        \\   '-fdiagnostics-format=clang' })\n\n    let errorformat =\n        \\ '%E%f:%l:%c: fatal error: %m,' .\n        \\ '%E%f:%l:%c: error: %m,' .\n        \\ '%W%f:%l:%c: warning: %m,' .\n        \\ '%-G%\\m%\\%%(LLVM ERROR:%\\|No compilation database found%\\)%\\@!%.%#,' .\n        \\ '%E%m'\n\n    let env = syntastic#util#isRunningWindows() ? {} : { 'TERM': 'dumb' }\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'env': env,\n        \\ 'defaults': {'bufnr': bufnr('')},\n        \\ 'returns': [0, 1] })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'clang_tidy',\n    \\ 'exec': 'clang-tidy'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        cppcheck.vim\n\"Description: Syntax checking plugin for syntastic using cppcheck.pl\n\"Maintainer:  LCD 47 <lcd047 at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_cppcheck_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_cppcheck_checker = 1\n\nif !exists('g:syntastic_cppcheck_config_file')\n    let g:syntastic_cppcheck_config_file = '.syntastic_cppcheck_config'\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_cppcheck_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(g:syntastic_cppcheck_config_file),\n        \\ 'args_after': '-q --enable=style' })\n\n    let errorformat =\n        \\ '[%f:%l]: (%trror) %m,' .\n        \\ '[%f:%l]: (%tarning) %m,' .\n        \\ '[%f:%l]: (%ttyle) %m,' .\n        \\ '[%f:%l]: (%terformance) %m,' .\n        \\ '[%f:%l]: (%tortability) %m,' .\n        \\ '[%f:%l]: (%tnformation) %m,' .\n        \\ '[%f:%l]: (%tnconclusive) %m,' .\n        \\ '%-G%.%#'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'preprocess': 'cppcheck',\n        \\ 'returns': [0] })\n\n    for e in loclist\n        if e['type'] =~? '\\m^[SPI]'\n            let e['type'] = 'w'\n            let e['subtype'] = 'Style'\n        endif\n    endfor\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'cppcheck'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        oclint.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  \"UnCO\" Lin <undercooled aT lavabit com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_oclint_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_oclint_checker = 1\n\nif !exists('g:syntastic_oclint_config_file')\n    let g:syntastic_oclint_config_file = '.syntastic_oclint_config'\nendif\n\nif !exists('g:syntastic_c_oclint_sort')\n    let g:syntastic_c_oclint_sort = 1\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_oclint_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'post_args': '-- -c ' . syntastic#c#ReadConfig(g:syntastic_oclint_config_file) })\n\n    let errorformat =\n        \\ '%E%f:%l:%c: fatal error: %m,' .\n        \\ '%E%f:%l:%c: error: %m,' .\n        \\ '%W%f:%l:%c: warning: %m,' .\n        \\ '%E%f:%l:%c: %m,' .\n        \\ '%-G%.%#'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'subtype': 'Style',\n        \\ 'postprocess': ['compressWhitespace'],\n        \\ 'returns': [0, 3, 5] })\n\n    for e in loclist\n        if e['text'] =~# '\\v P3( |$)'\n            let e['type'] = 'W'\n        endif\n\n        let e['text'] = substitute(e['text'], '\\m\\C P[1-3]$', '', '')\n        let e['text'] = substitute(e['text'], '\\m\\C P[1-3] ', ': ', '')\n    endfor\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'oclint'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        pc_lint.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Steve Bragg <steve at empresseffects dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_pc_lint_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_pc_lint_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nif !exists('g:syntastic_pc_lint_config_file')\n    let g:syntastic_pc_lint_config_file = 'options.lnt'\nendif\n\nfunction! SyntaxCheckers_c_pc_lint_GetLocList() dict\n    let buf = bufnr('')\n    let config = syntastic#util#findFileInParent(g:syntastic_pc_lint_config_file, fnamemodify(bufname(buf), ':p:h'))\n    call self.log('config =', config)\n\n    \" -hFs1         - show filename, add space after messages, try to make message 1 line\n    \" -width(0,0)   - make sure there are no line breaks\n    \" -t            - set tab size\n    \" -v            - turn off verbosity\n    let makeprg = self.makeprgBuild({\n        \\ 'args': (filereadable(config) ? syntastic#util#shescape(fnamemodify(config, ':p')) : ''),\n        \\ 'args_after': ['-hFs1', '-width(0,0)', '-t' . &tabstop, '-format=%f:%l:%C:%t:%n:%m'] })\n\n    let errorformat =\n        \\ '%E%f:%l:%v:Error:%n:%m,' .\n        \\ '%W%f:%l:%v:Warning:%n:%m,' .\n        \\ '%I%f:%l:%v:Info:%n:%m,' .\n        \\ '%-G%.%#'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'postprocess': ['cygwinRemoveCR'] })\n\n    for e in loclist\n        if e['type'] ==? 'I'\n            let e['type'] = 'W'\n            let e['subtype'] = 'Style'\n        endif\n    endfor\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'pc_lint',\n    \\ 'exec': 'lint-nt'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        sparse.vim\n\"Description: Syntax checking plugin for syntastic using sparse.pl\n\"Maintainer:  Daniel Walker <dwalker at fifo99 dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_sparse_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_sparse_checker = 1\n\nif !exists('g:syntastic_sparse_config_file')\n    let g:syntastic_sparse_config_file = '.syntastic_sparse_config'\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_sparse_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(g:syntastic_sparse_config_file),\n        \\ 'args_after': '-ftabstop=' . &ts })\n\n    let errorformat =\n        \\ '%f:%l:%v: %trror: %m,' .\n        \\ '%f:%l:%v: %tarning: %m,'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'defaults': {'bufnr': bufnr('')},\n        \\ 'returns': [0, 1] })\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'sparse'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        splint.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  LCD 47 <lcd047 at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_splint_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_splint_checker = 1\n\nif !exists('g:syntastic_splint_config_file')\n    let g:syntastic_splint_config_file = '.syntastic_splint_config'\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_splint_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(g:syntastic_splint_config_file),\n        \\ 'args_after': '-showfunc -hints +quiet' })\n\n    let errorformat =\n        \\ '%-G%f:%l:%v: %[%#]%[%#]%[%#] Internal Bug %.%#,' .\n        \\ '%-G%f(%l\\,%v): %[%#]%[%#]%[%#] Internal Bug %.%#,' .\n        \\ '%W%f:%l:%v: %m,' .\n        \\ '%W%f(%l\\,%v): %m,' .\n        \\ '%W%f:%l: %m,' .\n        \\ '%W%f(%l): %m,' .\n        \\ '%-C %\\+In file included from %.%#,' .\n        \\ '%-C %\\+from %.%#,' .\n        \\ '%+C %.%#'\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'subtype': 'Style',\n        \\ 'postprocess': ['compressWhitespace'],\n        \\ 'defaults': {'type': 'W'} })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'splint'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        verapp.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Lucas Verney <phyks@phyks.me>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\" Tested with Vera++ 1.3.0\n\"============================================================================\n\nif exists('g:loaded_syntastic_cpp_verapp_checker')\n    finish\nendif\nlet g:loaded_syntastic_cpp_verapp_checker = 1\n\nif !exists('g:syntastic_verapp_config_file')\n    let g:syntastic_verapp_config_file = '.syntastic_verapp_config'\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_cpp_verapp_GetLocList() dict\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(g:syntastic_verapp_config_file),\n        \\ 'args_after': '--show-rule --no-duplicate -S -c -' })\n\n    let errorformat = '%f:%t:%l:%c:%m'\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'preprocess': 'checkstyle',\n        \\ 'subtype': 'Style' })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'cpp',\n    \\ 'name': 'verapp',\n    \\ 'exec': 'vera++'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        cuda.vim\n\"Description: Syntax checking plugin for syntastic\n\"Author:      Hannes Schulz <schulz at ais dot uni-bonn dot de>\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_cuda_nvcc_checker')\n    finish\nendif\nlet g:loaded_syntastic_cuda_nvcc_checker = 1\n\nif !exists('g:syntastic_cuda_config_file')\n    let g:syntastic_cuda_config_file = '.syntastic_cuda_config'\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_cuda_nvcc_GetLocList() dict\n    let buf = bufnr('')\n    let arch_flag = syntastic#util#bufVar(buf, 'cuda_arch')\n    if arch_flag !=# ''\n        let arch_flag = '-arch=' . arch_flag\n        call syntastic#log#oneTimeWarn('variable g:syntastic_cuda_arch is deprecated, ' .\n            \\ 'please add ' . string(arch_flag) . ' to g:syntastic_cuda_nvcc_args instead')\n    endif\n\n    let build_opts = {}\n    let dummy = ''\n    if index(['h', 'hpp', 'cuh'], fnamemodify(bufname(buf), ':e'), 0, 1) >= 0\n        if syntastic#util#bufVar(buf, 'cuda_check_header', 0)\n            let dummy = fnamemodify(bufname(buf), ':p:h') . syntastic#util#Slash() . '.syntastic_dummy.cu'\n            let build_opts = {\n                \\ 'exe_before': 'echo > ' . syntastic#util#shescape(dummy) . ' ;',\n                \\ 'fname_before': '.syntastic_dummy.cu -include' }\n        else\n            return []\n        endif\n    endif\n\n    call extend(build_opts, {\n        \\ 'args_before': arch_flag . ' --cuda -O0 -I .',\n        \\ 'args': syntastic#c#ReadConfig(g:syntastic_cuda_config_file),\n        \\ 'args_after': '-Xcompiler -fsyntax-only',\n        \\ 'tail_after': syntastic#c#NullOutput() })\n\n    let makeprg = self.makeprgBuild(build_opts)\n\n    let errorformat =\n        \\ '%*[^\"]\"%f\"%*\\D%l: %m,'.\n        \\ '\"%f\"%*\\D%l: %m,'.\n        \\ '%-G%f:%l: (Each undeclared identifier is reported only once,'.\n        \\ '%-G%f:%l: for each function it appears in.),'.\n        \\ '%f:%l:%c:%m,'.\n        \\ '%f(%l):%m,'.\n        \\ '%f:%l:%m,'.\n        \\ '\"%f\"\\, line %l%*\\D%c%*[^ ] %m,'.\n        \\ '%D%*\\a[%*\\d]: Entering directory `%f'','.\n        \\ '%X%*\\a[%*\\d]: Leaving directory `%f'','.\n        \\ '%D%*\\a: Entering directory `%f'','.\n        \\ '%X%*\\a: Leaving directory `%f'','.\n        \\ '%DMaking %*\\a in %f,'.\n        \\ '%f|%l| %m'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'defaults': {'type': 'E'} })\n\n    for e in loclist\n        let pat = matchstr(e['text'], '\\m\\c^\\s*warning:\\s*\\zs.*')\n        if pat !=# ''\n            let e['text'] = pat\n            let e['type'] = 'W'\n        endif\n    endfor\n\n    if dummy !=# ''\n        call delete(dummy)\n    endif\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'cuda',\n    \\ 'name': 'nvcc'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n"], "fixing_code": ["if exists('g:loaded_syntastic_c_autoload') || !exists('g:loaded_syntastic_plugin')\n    finish\nendif\nlet g:loaded_syntastic_c_autoload = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\n\" Public functions {{{1\n\n\" convenience function to determine the 'null device' parameter\n\" based on the current operating system\nfunction! syntastic#c#NullOutput() abort \" {{{2\n    let known_os = has('unix') || has('mac') || syntastic#util#isRunningWindows()\n    return known_os ? '-o ' . syntastic#util#DevNull() : ''\nendfunction \" }}}2\n\n\" read additional compiler flags from the given configuration file\n\" the file format and its parsing mechanism is inspired by clang_complete\nfunction! syntastic#c#ReadConfig(file) abort \" {{{2\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: looking for', a:file)\n\n    \" search upwards from the current file's directory\n    let config = syntastic#util#findFileInParent(a:file, expand('%:p:h', 1))\n    if config ==# ''\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: file not found')\n        return ''\n    endif\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: config file:', config)\n    if !filereadable(config)\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: file unreadable')\n        return ''\n    endif\n\n    \" convert filename into absolute path\n    let filepath = fnamemodify(config, ':p:h')\n\n    \" try to read config file\n    try\n        let lines = readfile(config)\n    catch /\\m^Vim\\%((\\a\\+)\\)\\=:E48[45]/\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, 'ReadConfig: error reading file')\n        return ''\n    endtry\n\n    \" filter out empty lines and comments\n    call filter(lines, 'v:val !~# ''\\v^(\\s*#|$)''')\n\n    \" remove leading and trailing spaces\n    call map(lines, 'substitute(v:val, ''\\m^\\s\\+'', \"\", \"\")')\n    call map(lines, 'substitute(v:val, ''\\m\\s\\+$'', \"\", \"\")')\n\n    let parameters = []\n    for line in lines\n        let matches = matchstr(line, '\\m\\C^\\s*-I\\s*\\zs.\\+')\n        if matches !=# ''\n            \" this one looks like an absolute path\n            if match(matches, '\\m^\\%(/\\|\\a:\\)') != -1\n                call add(parameters, '-I' . matches)\n            else\n                call add(parameters, '-I' . filepath . syntastic#util#Slash() . matches)\n            endif\n        else\n            call add(parameters, line)\n        endif\n    endfor\n\n    return join(map(parameters, 'syntastic#util#shescape(v:val)'))\nendfunction \" }}}2\n\n\" GetLocList() for C-like compilers\nfunction! syntastic#c#GetLocList(filetype, subchecker, options) abort \" {{{2\n    try\n        let flags = s:_get_cflags(a:filetype, a:subchecker, a:options)\n    catch /\\m\\C^Syntastic: skip checks$/\n        return []\n    endtry\n\n    let makeprg = syntastic#util#shexpand(g:syntastic_{a:filetype}_compiler) .\n        \\ ' ' . flags . ' ' . syntastic#util#shexpand('%')\n\n    let errorformat = s:_get_checker_var('g', a:filetype, a:subchecker, 'errorformat', a:options['errorformat'])\n\n    let postprocess = s:_get_checker_var('g', a:filetype, a:subchecker, 'remove_include_errors', 0) ?\n        \\ ['filterForeignErrors'] : []\n\n    \" process makeprg\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'postprocess': postprocess })\nendfunction \" }}}2\n\n\" }}}1\n\n\" Private functions {{{1\n\n\" initialize c/cpp syntax checker handlers\nfunction! s:_init() abort \" {{{2\n    let s:handlers = []\n    let s:cflags = {}\n\n    call s:_registerHandler('\\m\\<cairo',       's:_checkPackage', ['cairo', 'cairo'])\n    call s:_registerHandler('\\m\\<freetype',    's:_checkPackage', ['freetype', 'freetype2', 'freetype'])\n    call s:_registerHandler('\\m\\<glade',       's:_checkPackage', ['glade', 'libglade-2.0', 'libglade'])\n    call s:_registerHandler('\\m\\<glib',        's:_checkPackage', ['glib', 'glib-2.0', 'glib'])\n    call s:_registerHandler('\\m\\<gtk',         's:_checkPackage', ['gtk', 'gtk+-2.0', 'gtk+', 'glib-2.0', 'glib'])\n    call s:_registerHandler('\\m\\<libsoup',     's:_checkPackage', ['libsoup', 'libsoup-2.4', 'libsoup-2.2'])\n    call s:_registerHandler('\\m\\<libxml',      's:_checkPackage', ['libxml', 'libxml-2.0', 'libxml'])\n    call s:_registerHandler('\\m\\<pango',       's:_checkPackage', ['pango', 'pango'])\n    call s:_registerHandler('\\m\\<SDL',         's:_checkPackage', ['sdl', 'sdl'])\n    call s:_registerHandler('\\m\\<opengl',      's:_checkPackage', ['opengl', 'gl'])\n    call s:_registerHandler('\\m\\<webkit',      's:_checkPackage', ['webkit', 'webkit-1.0'])\n\n    call s:_registerHandler('\\m\\<php\\.h\\>',    's:_checkPhp',    [])\n    call s:_registerHandler('\\m\\<Python\\.h\\>', 's:_checkPython', [])\n    call s:_registerHandler('\\m\\<ruby',        's:_checkRuby',   [])\nendfunction \" }}}2\n\n\" register a handler dictionary object\nfunction! s:_registerHandler(regex, function, args) abort \" {{{2\n    let handler = {}\n    let handler['regex'] = a:regex\n    let handler['func'] = function(a:function)\n    let handler['args'] = a:args\n    call add(s:handlers, handler)\nendfunction \" }}}2\n\n\" try to find library with 'pkg-config'\n\" search possible libraries from first to last given\n\" argument until one is found\nfunction! s:_checkPackage(name, ...) abort \" {{{2\n    if executable('pkg-config')\n        if !has_key(s:cflags, a:name)\n            for pkg in a:000\n                let pkg_flags = syntastic#util#system('pkg-config --cflags ' . pkg)\n                \" since we cannot necessarily trust the pkg-config exit code\n                \" we have to check for an error output as well\n                if v:shell_error == 0 && pkg_flags !~? 'not found'\n                    let pkg_flags = ' ' . substitute(pkg_flags, \"\\n\", '', '')\n                    let s:cflags[a:name] = pkg_flags\n                    return pkg_flags\n                endif\n            endfor\n        else\n            return s:cflags[a:name]\n        endif\n    endif\n    return ''\nendfunction \" }}}2\n\n\" try to find PHP includes with 'php-config'\nfunction! s:_checkPhp() abort \" {{{2\n    if executable('php-config')\n        if !has_key(s:cflags, 'php')\n            let s:cflags['php'] = syntastic#util#system('php-config --includes')\n            let s:cflags['php'] = ' ' . substitute(s:cflags['php'], \"\\n\", '', '')\n        endif\n        return s:cflags['php']\n    endif\n    return ''\nendfunction \" }}}2\n\n\" try to find the python headers with distutils\nfunction! s:_checkPython() abort \" {{{2\n    if executable('python')\n        if !has_key(s:cflags, 'python')\n            let s:cflags['python'] = syntastic#util#system('python -c ''from distutils import ' .\n                \\ 'sysconfig; import sys; sys.stdout.write(sysconfig.get_python_inc())''')\n            let s:cflags['python'] = substitute(s:cflags['python'], \"\\n\", '', '')\n            let s:cflags['python'] = ' -I' . s:cflags['python']\n        endif\n        return s:cflags['python']\n    endif\n    return ''\nendfunction \" }}}2\n\n\" try to find the ruby headers with 'rbconfig'\nfunction! s:_checkRuby() abort \" {{{2\n    if executable('ruby')\n        if !has_key(s:cflags, 'ruby')\n            let s:cflags['ruby'] = syntastic#util#system('ruby -r rbconfig -e ' .\n                \\ '''puts RbConfig::CONFIG[\"rubyhdrdir\"] || RbConfig::CONFIG[\"archdir\"]''')\n            let s:cflags['ruby'] = substitute(s:cflags['ruby'], \"\\n\", '', '')\n            let s:cflags['ruby'] = ' -I' . s:cflags['ruby']\n        endif\n        return s:cflags['ruby']\n    endif\n    return ''\nendfunction \" }}}2\n\n\" }}}1\n\n\" Utilities {{{1\n\n\" resolve checker-related user variables\nfunction! s:_get_checker_var(scope, filetype, subchecker, name, default) abort \" {{{2\n    let prefix = a:scope . ':' . 'syntastic_'\n    if exists(prefix . a:filetype . '_' . a:subchecker . '_' . a:name)\n        return {a:scope}:syntastic_{a:filetype}_{a:subchecker}_{a:name}\n    elseif exists(prefix . a:filetype . '_' . a:name)\n        return {a:scope}:syntastic_{a:filetype}_{a:name}\n    else\n        return a:default\n    endif\nendfunction \" }}}2\n\n\" resolve user CFLAGS\nfunction! s:_get_cflags(ft, ck, opts) abort \" {{{2\n    \" determine whether to parse header files as well\n    if has_key(a:opts, 'header_names') && expand('%', 1) =~? a:opts['header_names']\n        if s:_get_checker_var('g', a:ft, a:ck, 'check_header', 0)\n            let flags = get(a:opts, 'header_flags', '') . ' -c ' . syntastic#c#NullOutput()\n        else\n            \" checking headers when check_header is unset: bail out\n            throw 'Syntastic: skip checks'\n        endif\n    else\n        let flags = get(a:opts, 'main_flags', '')\n    endif\n\n    let flags .= ' ' . s:_get_checker_var('g', a:ft, a:ck, 'compiler_options', '') . ' ' . s:_get_include_dirs(a:ft)\n\n    \" check if the user manually set some cflags\n    let b_cflags = s:_get_checker_var('b', a:ft, a:ck, 'cflags', '')\n    if b_cflags !=# ''\n        let flags .= ' ' . b_cflags\n    endif\n\n    \" add optional config file parameters\n    let config_file = s:_get_checker_var('b', a:ft, a:ck, 'config_file', s:_get_checker_var('g', a:ft, a:ck, 'config_file', ''))\n    let flags .= ' ' . syntastic#c#ReadConfig(config_file)\n\n    if b_cflags ==# '' && (a:ft ==# 'c' || a:ft ==# 'cpp') && !s:_get_checker_var('g', a:ft, a:ck, 'no_include_search', 0)\n        \" refresh the include file search if desired\n        if s:_get_checker_var('g', a:ft, a:ck, 'auto_refresh_includes', 0)\n            let flags .= ' ' . s:_search_headers()\n        else\n            \" search for header includes if not cached already\n            if !exists('b:syntastic_' . a:ft . '_includes')\n                let b:syntastic_{a:ft}_includes = s:_search_headers()\n            endif\n            let flags .= ' ' . b:syntastic_{a:ft}_includes\n        endif\n    endif\n\n    return flags\nendfunction \" }}}2\n\n\" get the gcc include directory argument depending on the default\n\" includes and the optional user-defined 'g:syntastic_c_include_dirs'\nfunction! s:_get_include_dirs(filetype) abort \" {{{2\n    let include_dirs = []\n\n    if a:filetype =~# '\\v^%(c|cpp|objc|objcpp)$' &&\n                \\ (!exists('g:syntastic_'.a:filetype.'_no_default_include_dirs') ||\n                \\ !g:syntastic_{a:filetype}_no_default_include_dirs)\n        let include_dirs = copy(s:default_includes)\n    endif\n\n    if exists('g:syntastic_'.a:filetype.'_include_dirs')\n        call extend(include_dirs, g:syntastic_{a:filetype}_include_dirs)\n    endif\n\n    return join(map(syntastic#util#unique(include_dirs), 'syntastic#util#shescape(\"-I\" . v:val)'))\nendfunction \" }}}2\n\n\" search the first 100 lines for include statements that are\n\" given in the handlers dictionary\nfunction! s:_search_headers() abort \" {{{2\n    let includes = ''\n    let files = []\n    let found = []\n    let lines = filter(getline(1, 100), 'v:val =~# ''\\m^\\s*#\\s*include''')\n\n    \" search current buffer\n    for line in lines\n        let file = matchstr(line, '\\m\"\\zs\\S\\+\\ze\"')\n        if file !=# ''\n            call add(files, file)\n            continue\n        endif\n\n        for handler in s:handlers\n            if line =~# handler['regex']\n                let includes .= call(handler['func'], handler['args'])\n                call add(found, handler['regex'])\n                break\n            endif\n        endfor\n    endfor\n\n    \" search included headers\n    for hfile in files\n        if hfile !=# ''\n            let filename = expand('%:p:h', 1) . syntastic#util#Slash() . hfile\n\n            try\n                let lines = readfile(filename, '', 100)\n            catch /\\m^Vim\\%((\\a\\+)\\)\\=:E484/\n                continue\n            endtry\n\n            call filter(lines, 'v:val =~# ''\\m^\\s*#\\s*include''')\n\n            for handler in s:handlers\n                if index(found, handler['regex']) != -1\n                    continue\n                endif\n\n                for line in lines\n                    if line =~# handler['regex']\n                        let includes .= call(handler['func'], handler['args'])\n                        call add(found, handler['regex'])\n                        break\n                    endif\n                endfor\n            endfor\n        endif\n    endfor\n\n    return includes\nendfunction \" }}}2\n\n\" }}}1\n\n\" default include directories\nlet s:default_includes = [\n    \\ '.',\n    \\ '..',\n    \\ 'include',\n    \\ 'includes',\n    \\ '..' . syntastic#util#Slash() . 'include',\n    \\ '..' . syntastic#util#Slash() . 'includes' ]\n\ncall s:_init()\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "*syntastic-checkers.txt*\tSyntastic checkers\n*syntastic-checkers*\n\n==============================================================================\nSYNTAX CHECKERS BY LANGUAGE                          *syntastic-checkers-lang*\n\n|syntastic| comes with checkers for the following languages:\n\n    ACPI Source Language.....................|syntastic-checkers-asl|\n    ActionScript.............................|syntastic-checkers-actionscript|\n    Ada......................................|syntastic-checkers-ada|\n    Ansible..................................|syntastic-checkers-ansible|\n    API Blueprint............................|syntastic-checkers-apiblueprint|\n    AppleScript..............................|syntastic-checkers-applescript|\n    AsciiDoc.................................|syntastic-checkers-asciidoc|\n    Assembly Languages.......................|syntastic-checkers-asm|\n\n    BEMHTML..................................|syntastic-checkers-bemhtml|\n    Bro......................................|syntastic-checkers-bro|\n\n    C........................................|syntastic-checkers-c|\n    C#.......................................|syntastic-checkers-cs|\n    C++......................................|syntastic-checkers-cpp|\n    Cabal....................................|syntastic-checkers-cabal|\n    Chef.....................................|syntastic-checkers-chef|\n    CMake....................................|syntastic-checkers-cmake|\n    COBOL....................................|syntastic-checkers-cobol|\n    Coco.....................................|syntastic-checkers-co|\n    CoffeeScript.............................|syntastic-checkers-coffee|\n    Coq......................................|syntastic-checkers-coq|\n    CSS......................................|syntastic-checkers-css|\n    Cucumber.................................|syntastic-checkers-cucumber|\n    CUDA.....................................|syntastic-checkers-cuda|\n\n    D........................................|syntastic-checkers-d|\n    Dart.....................................|syntastic-checkers-dart|\n    DocBook..................................|syntastic-checkers-docbk|\n    Dockerfile...............................|syntastic-checkers-dockerfile|\n    Dust.....................................|syntastic-checkers-dustjs|\n\n    Elixir...................................|syntastic-checkers-elixir|\n    Erlang...................................|syntastic-checkers-erlang|\n    eRuby....................................|syntastic-checkers-eruby|\n\n    Fortran..................................|syntastic-checkers-fortran|\n\n    Gentoo Metadata..........................|syntastic-checkers-gentoo|\n    Gettext PO...............................|syntastic-checkers-po|\n    GLSL.....................................|syntastic-checkers-glsl|\n    Go.......................................|syntastic-checkers-go|\n\n    Haml.....................................|syntastic-checkers-haml|\n    Handlebars...............................|syntastic-checkers-handlebars|\n    Haskell..................................|syntastic-checkers-haskell|\n    Haxe.....................................|syntastic-checkers-haxe|\n    HSS......................................|syntastic-checkers-hss|\n    HTML.....................................|syntastic-checkers-html|\n\n    Java.....................................|syntastic-checkers-java|\n    JavaScript...............................|syntastic-checkers-javascript|\n    JSON.....................................|syntastic-checkers-json|\n    Julia....................................|syntastic-checkers-julia|\n\n    LESS.....................................|syntastic-checkers-less|\n    Lex......................................|syntastic-checkers-lex|\n    Limbo....................................|syntastic-checkers-limbo|\n    LISP.....................................|syntastic-checkers-lisp|\n    LLVM.....................................|syntastic-checkers-llvm|\n    Lua......................................|syntastic-checkers-lua|\n\n    Markdown.................................|syntastic-checkers-markdown|\n    MATLAB...................................|syntastic-checkers-matlab|\n    Mercury..................................|syntastic-checkers-mercury|\n\n    NASM.....................................|syntastic-checkers-nasm|\n    Nix......................................|syntastic-checkers-nix|\n    nroff....................................|syntastic-checkers-nroff|\n\n    Objective-C..............................|syntastic-checkers-objc|\n    Objective-C++............................|syntastic-checkers-objcpp|\n    OCaml....................................|syntastic-checkers-ocaml|\n\n    Perl.....................................|syntastic-checkers-perl|\n    Perl 6...................................|syntastic-checkers-perl6|\n    PHP......................................|syntastic-checkers-php|\n    POD......................................|syntastic-checkers-pod|\n    Pug (formerly Jade)......................|syntastic-checkers-pug|\n    Puppet...................................|syntastic-checkers-puppet|\n    Python...................................|syntastic-checkers-python|\n\n    QML......................................|syntastic-checkers-qml|\n\n    R........................................|syntastic-checkers-r|\n    R Markdown...............................|syntastic-checkers-rmd|\n    Racket...................................|syntastic-checkers-racket|\n    Relax NG.................................|syntastic-checkers-rnc|\n    reStructuredText.........................|syntastic-checkers-rst|\n    RPM spec.................................|syntastic-checkers-spec|\n    Ruby.....................................|syntastic-checkers-ruby|\n\n    SASS.....................................|syntastic-checkers-sass|\n    Scala....................................|syntastic-checkers-scala|\n    SCSS.....................................|syntastic-checkers-scss|\n    Sh.......................................|syntastic-checkers-sh|\n    Slim.....................................|syntastic-checkers-slim|\n    SML......................................|syntastic-checkers-sml|\n    Solidity.................................|syntastic-checkers-solidity|\n    SQL......................................|syntastic-checkers-sql|\n    Stylus...................................|syntastic-checkers-stylus|\n\n    Tcl......................................|syntastic-checkers-tcl|\n    TeX......................................|syntastic-checkers-tex|\n    Texinfo..................................|syntastic-checkers-texinfo|\n    Text.....................................|syntastic-checkers-text|\n    Turtle...................................|syntastic-checkers-turtle|\n    TriG.....................................|syntastic-checkers-trig|\n    Twig.....................................|syntastic-checkers-twig|\n    TypeScript...............................|syntastic-checkers-typescript|\n\n    Vala.....................................|syntastic-checkers-vala|\n    Verilog..................................|syntastic-checkers-verilog|\n    VHDL.....................................|syntastic-checkers-vhdl|\n    Vim help.................................|syntastic-checkers-help|\n    VimL.....................................|syntastic-checkers-vim|\n    Vue.js...................................|syntastic-checkers-vue|\n\n    xHTML....................................|syntastic-checkers-xhtml|\n    XML......................................|syntastic-checkers-xml|\n    XQuery...................................|syntastic-checkers-xquery|\n    XSLT.....................................|syntastic-checkers-xslt|\n\n    YACC.....................................|syntastic-checkers-yacc|\n    YAML.....................................|syntastic-checkers-yaml|\n    YANG.....................................|syntastic-checkers-yang|\n    YARA.....................................|syntastic-checkers-yara|\n\n    Z80......................................|syntastic-checkers-z80|\n    Zope Page Templates......................|syntastic-checkers-zpt|\n    Zsh......................................|syntastic-checkers-zsh|\n\nThird-party checkers are available for additional languages.\n\n==============================================================================\nSYNTAX CHECKERS FOR ACPI SOURCE LANGUAGE              *syntastic-checkers-asl*\n\nThe following checkers are available for the ACPI Source Language (filetype\n\"asl\"):\n\n    1. iasl.....................|syntastic-asl-iasl|\n\n------------------------------------------------------------------------------\n1. iasl                                                   *syntastic-asl-iasl*\n\nName:        iasl\nMaintainer:  Peter Wu <peter@lekensteyn.nl>\n\n\"iasl\" is a compiler/decompiler for ACPI Source Language (ASL) and ACPI\nMachine Language (AML). See the project's page for details:\n\n    https://acpica.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for ASL files, such as\n\"vim-acpi-asl\":\n\n    https://github.com/martinlroth/vim-acpi-asl\n\n==============================================================================\nSYNTAX CHECKERS FOR ACTIONSCRIPT             *syntastic-checkers-actionscript*\n\nThe following checkers are available for ActionScript (filetype\n\"actionscript\"):\n\n    1. mxmlc....................|syntastic-actionscript-mxmlc|\n\n------------------------------------------------------------------------------\n1. mxmlc                                        *syntastic-actionscript-mxmlc*\n\nName:        mxmlc\nMaintainer:  Andy Earnshaw <andyearnshaw@gmail.com>\n\n\"mxmlc\" is a compiler for ActionScript. See Apache Flex for details:\n\n    http://flex.apache.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ADA                               *syntastic-checkers-ada*\n\nThe following checkers are available for Ada (filetype \"ada\"):\n\n    1. GCC......................|syntastic-ada-gcc|\n\n------------------------------------------------------------------------------\n1. GCC                                                     *syntastic-ada-gcc*\n\nName:        gcc\nMaintainer:  Alfredo Di Napoli <alfredo.dinapoli@gmail.com>\n\nChecker options~\n                                                  *'g:syntastic_ada_compiler'*\nType: string\nDefault: \"gcc\"\nCompiler executable.\n\n                                               *'g:syntastic_ada_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                     *'g:syntastic_ada_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                          *'g:syntastic_ada_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                               *'g:syntastic_ada_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                              *'g:syntastic_ada_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_ada_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                    *'b:syntastic_ada_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                              *'g:syntastic_ada_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"ads\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_ada_gcc_<option>' variables. The only exception is\n'g:syntastic_ada_gcc_exec', which can still be used to override the linter's\nexecutable.\n\n==============================================================================\nSYNTAX CHECKERS FOR ANSIBLE                       *syntastic-checkers-ansible*\n\nThe following checkers are available for Ansible (filetype \"ansible\"):\n\n    1. Ansible-lint.............|syntastic-ansible-ansible_lint|\n\n------------------------------------------------------------------------------\n1. Ansible-lint                               *syntastic-ansible-ansible_lint*\n\nName:        ansible_lint\nMaintainer:  Erik Zaadi <erik.zaadi@gmail.com>\n\n\"Ansible-lint\" is a style linter for Ansible playbooks. See the project's\npage at GitHub for details:\n\n    https://github.com/willthames/ansible-lint\n\nSyntastic requires \"Ansible-lint\" version 2.0.4 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Ansible playbooks, such\nas \"ansible-vim\":\n\n    https://github.com/pearofducks/ansible-vim\n\n==============================================================================\nSYNTAX CHECKERS FOR API BLUEPRINT            *syntastic-checkers-apiblueprint*\n\nThe following checkers are available for API Blueprint (filetype \"apiblueprint\"):\n\n    1. Drafter..................|syntastic-apiblueprint-drafter|\n\n------------------------------------------------------------------------------\n1. Drafter                                    *syntastic-apiblueprint-drafter*\n\nName:        drafter\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Drafter\" is a parser for Apiary's \"API Blueprint\" (http://apiblueprint.org/).\nSee the project's page at GitHub for details:\n\n    https://github.com/apiaryio/drafter\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for API Blueprint files, such\nas \"apiblueprint.vim\":\n\n    https://github.com/kylef/apiblueprint.vim\n\n==============================================================================\nSYNTAX CHECKERS FOR APPLESCRIPT               *syntastic-checkers-applescript*\n\nThe following checkers are available for AppleScript (filetype \"applescript\"):\n\n    1. osacompile...............|syntastic-applescript-osacompile|\n\n------------------------------------------------------------------------------\n1. osacompile                               *syntastic-applescript-osacompile*\n\nName:        osacompile\nAuthor: Zhao Cai <caizhaoff@gmail.com>\n\n\"osacompile\" is a compiler for \"AppleScript\". See the program's manual for\ndetails:\n\n    https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/osacompile.1.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ASCIIDOC                     *syntastic-checkers-asciidoc*\n\nThe following checkers are available for AsciiDoc (filetype \"asciidoc\"):\n\n    1. Asciidoc.................|syntastic-asciidoc-asciidoc|\n    2. proselint................|syntastic-asciidoc-proselint|\n\n------------------------------------------------------------------------------\n1. Asciidoc                                      *syntastic-asciidoc-asciidoc*\n\nName:        asciidoc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Asciidoc\" is a translator for AsciiDoc documents (http://asciidoc.org/).\n\nNote~\n\nIf you would prefer to use Asciidoctor (http://asciidoctor.org/)\nas a linter instead of \"Asciidoc\", you can do that by pointing\n'g:syntastic_asciidoc_asciidoc_exec' to it: >\n    let g:syntastic_asciidoc_asciidoc_exec = \"asciidoctor\"\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. proselint                                    *syntastic-asciidoc-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-help-proselint|, |syntastic-html-proselint|,\n|syntastic-markdown-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ASSEMBLY LANGUAGES                *syntastic-checkers-asm*\n\nThe following checkers are available for assembly languages (filetype \"asm\"):\n\n    1. GCC......................|syntastic-asm-gcc|\n\n------------------------------------------------------------------------------\n1. GCC                                                     *syntastic-asm-gcc*\n\nName:        gcc\nMaintainer:  Joshua Rahm <joshuarahm@gmail.com>\n\nThis plugin supports both the AT&T and Intel dialects.\n\nChecker Options~\n                                                  *'g:syntastic_asm_compiler'*\nType: string\nDefault: \"gcc\"\nCompiler executable. Set it to something like \"mipsel-linux-gcc\": >\n    let g:syntastic_asm_compiler = \"mipsel-linux-gcc\"\n<\n                                               *'g:syntastic_asm_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                                   *'g:syntastic_asm_dialect'*\nType: string\nDefault: unset\nNormally the assembler will select the dialect to use for checking based on\nthe file extension (AT&T for \".s\", Intel for \".asm\"). If you want to override\nthe automatic choice set this variable to either \"att\" or \"intel\".\n\n                                     *'g:syntastic_asm_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                          *'g:syntastic_asm_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nassembler. Set it to something like \"-mtune=native\": >\n    let g:syntastic_asm_compiler_options = \"-mtune=native\"\n<\n                                               *'g:syntastic_asm_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the assembler,\none option per line (see |syntastic-config-files|).\n\n                                              *'g:syntastic_asm_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the assembler, in addition to the\nabove compilation flags. You can set it like this: >\n    let g:syntastic_asm_include_dirs = [\"inc\", \"asm/src/include\"]\n<\nand the corresponding \"-Iinc -Iasm/src/include\" will be added to the\ncompilation flags.\n\n                                                    *'b:syntastic_asm_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_asm_gcc_<option>' variables. The only exception is\n'g:syntastic_asm_gcc_exec', which can still be used to override the linter's\nexecutable.\n\n==============================================================================\nSYNTAX CHECKERS FOR BEMHTML                       *syntastic-checkers-bemhtml*\n\nThe following checkers are available for BEMHTML (filetype \"bemhtml\"):\n\n    1. bemhtml-lint.............|syntastic-bemhtml-bemhtmllint|\n\n------------------------------------------------------------------------------\n1. bemhtml-lint                                *syntastic-bemhtml-bemhtmllint*\n\nName:        bemhtmllint\nMaintainer:  Sergej Tatarincev\n\nBEMHTML is a template engine intended for using with the BEM methodology\n(http://bem.info/method/). See the project's page at GitHub for details:\n\n    https://github.com/SevInf/bemhtml-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR BRO                               *syntastic-checkers-bro*\n\nThe following checkers are available for Bro (filetype \"bro\"):\n\n    1. Bro......................|syntastic-bro-bro|\n\n------------------------------------------------------------------------------\n1. Bro                                                     *syntastic-bro-bro*\n\nName:        bro\nMaintainer:  Justin Azoff <justin.azoff@gmail.com>\n\n\"Bro\" is a network security monitor. See the project's page for details:\n\n    https://www.bro.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR C                                   *syntastic-checkers-c*\n\nThe following checkers are available for C (filetype \"c\"):\n\n    1. AVR-GCC..................|syntastic-c-avrgcc|\n    2. Checkpatch...............|syntastic-c-checkpatch|\n    3. ClangCheck...............|syntastic-c-clang_check|\n    4. Clang-Tidy...............|syntastic-c-clang_tidy|\n    5. Cppcheck.................|syntastic-c-cppcheck|\n    6. cppclean.................|syntastic-c-cppclean|\n    7. Flawfinder...............|syntastic-c-flawfinder|\n    8. GCC......................|syntastic-c-gcc|\n    9. make.....................|syntastic-c-make|\n    10. OClint..................|syntastic-c-oclint|\n    11. PC-Lint.................|syntastic-c-pc_lint|\n    12. Sparse..................|syntastic-c-sparse|\n    13. Splint..................|syntastic-c-splint|\n\n------------------------------------------------------------------------------\n1. AVR-GCC                                                *syntastic-c-avrgcc*\n\nName:        avrgcc\nMaintainer:  Karel <karelishere@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_avrgcc_config_file'*\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\n------------------------------------------------------------------------------\n2. Checkpatch                                         *syntastic-c-checkpatch*\n\nName:        checkpatch\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"Checkpatch\" is a style linter for the Linux kernel sources. It's\ndistributed along with the Linux kernel sources:\n\n    https://github.com/torvalds/linux/blob/master/scripts/checkpatch.pl\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. ClangCheck                                        *syntastic-c-clang_check*\n\nName:        clang_check\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"ClangCheck\" is a wrapper around Clang's \"LibTooling\"\n(http://clang.llvm.org/docs/LibTooling.html). See the official page for\ndetails:\n\n    http://clang.llvm.org/docs/ClangCheck.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       *'g:syntastic_clang_check_config_file'*\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangCheck\" parameters in\n'g:syntastic_c_clang_check_args', and compilation parameters\n(defines, optimisation flags, etc.) in the configuration file.\n\nHowever, if you want \"ClangCheck\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) -- perhaps\ngenerated by \"CMake\" (https://github.com/rizsotto/Bear) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_clang_check_post_args' to an empty string: >\n    let g:syntastic_c_clang_check_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_check_config_file' are\nthen ignored.\n\nSee also: |syntastic-cpp-clang_check|.\n\n------------------------------------------------------------------------------\n4. Clang-Tidy                                         *syntastic-c-clang_tidy*\n\nName:        clang_tidy\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"Clang-Tidy\" is a lint tool based on \"Clang\" (http://clang.llvm.org/). See\nthe project's page for details:\n\n    http://clang.llvm.org/extra/clang-tidy.html\n\nInstallation~\n\n\"Clang-Tidy\" is part of the \"Clang\" (http://clang.llvm.org/) project, but it\nisn't built by default. You need to enable compilation of the \"Extra Clang\nTools\" (http://clang.llvm.org/docs/ClangTools.html#extra-clang-tools) to get\nit. See the build tutorial for details:\n\n    http://clang.llvm.org/docs/LibASTMatchersTutorial.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                        *'g:syntastic_clang_tidy_config_file'*\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangTidy\" parameters in\n'g:syntastic_c_clang_tidy_args', and compilation parameters\n(defines, optimisation flags, etc.) in the configuration file.\n\nIf you want \"ClangTidy\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_clang_tidy_post_args' to an empty string: >\n    let g:syntastic_c_clang_tidy_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_tidy_config_file' are\nthen ignored.\n\nSee also: |syntastic-cpp-clang_tidy|.\n\n------------------------------------------------------------------------------\n5. Cppcheck                                             *syntastic-c-cppcheck*\n\nName:        cppcheck\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Cppcheck\" is a static analysis tool for C/C++ code. See the project's page\nfor details:\n\n    http://cppcheck.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          *'g:syntastic_cppcheck_config_file'*\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-cpp-cppcheck|.\n\n------------------------------------------------------------------------------\n6. cppclean                                             *syntastic-c-cppclean*\n\nName:        cppclean\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"cppclean\" attempts to find problems in C++ source that slow development in\nlarge code bases, for example various forms of unused code. See the project's\npage at GitHub for more information:\n\n    https://github.com/myint/cppclean\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install cppclean\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-cpp-cppclean|.\n\n------------------------------------------------------------------------------\n7. Flawfinder                                         *syntastic-c-flawfinder*\n\nName:        flawfinder\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Flawfinder\" scans C/C++ source code for possible security weaknesses. See the\nproject's page for more information:\n\n    https://www.dwheeler.com/flawfinder\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_c_flawfinder_thres'*\nType: integer\nDefault: 3\nError threshold. Policy violations with a severity above this value are\nhighlighted as errors, the others are considered warnings by syntastic.\n\nSee also: |syntastic-cpp-flawfinder|.\n\n------------------------------------------------------------------------------\n8. GCC                                                       *syntastic-c-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                                    *'g:syntastic_c_compiler'*\nType: string\nDefault: \"gcc\", or \"clang\" if GCC is not found\nCompiler executable.\n\n                                                 *'g:syntastic_c_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                       *'g:syntastic_c_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                            *'g:syntastic_c_compiler_options'*\nType: string\nDefault: \"-std=gnu99\"\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                                 *'g:syntastic_c_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                                *'g:syntastic_c_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it to something like this: >\n    let g:syntastic_c_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                     *'g:syntastic_c_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                           *'g:syntastic_c_no_include_search'*\nType: boolean\nDefault: 0\nBy default syntastic looks at the first 100 lines of the file being checked,\nand tries to determine if it needs to include headers for some common\nlibraries, such as \"GLib\" or \"Gtk\". It then tries to add the corresponding\ninclude directories to the compilation flags. You can disable this behaviour\nby setting the above variable to 1.\n\n                                       *'g:syntastic_c_auto_refresh_includes'*\nType: boolean\nDefault: 0\nUsed only if \"g:syntastic_c_no_include_search\" is set to a false value. By\ndefault syntastic searches for common libraries only the first time the\ncurrent file is checked. Setting the above variable to 1 instructs syntastic\nto refresh the list of common libraries every time the current file is\nchecked. You can also force a refresh even when the above variable is 0, by\n`:unlet`-ing the buffer variable 'b:syntastic_c_includes'.\n\n                                                      *'b:syntastic_c_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. When set, no search for common libraries is performed,\nand the contents of the variable are added to the compilation flags.\n\n                                                *'g:syntastic_c_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_c_gcc_<option>' variables. The only exception is\n'g:syntastic_c_gcc_exec', which can still be used to override the linter's\nexecutable.\n\nSee also: |syntastic-cpp-gcc|.\n\n------------------------------------------------------------------------------\n9. make                                                     *syntastic-c-make*\n\nName:        make\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n10. OClint                                                *syntastic-c-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNotes~\n\nBy default you can set \"OClint\" parameters in 'g:syntastic_c_oclint_args', and\ncompilation parameters (defines, optimisation flags, etc.) in the config file.\n\nIf you want \"OClint\" to use \"Clang\"-style compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_oclint_post_args' to an empty string: >\n    let g:syntastic_c_oclint_post_args = \"\"\n<\nConfig files pointed to by 'g:syntastic_oclint_config_file' are then ignored.\n\nSee also: |syntastic-cpp-oclint|.\n\n------------------------------------------------------------------------------\n11. PC-Lint                                              *syntastic-c-pc_lint*\n\nName:        pc_lint\nMaintainer:  Steve Bragg <steve@empresseffects.com>\n\n\"PC-Lint\" is a commercial static code analysis tool for Windows, produced\nby \"Gimpel Software\" (http://www.gimpel.com/). See the project's page for\ndetails:\n\n    http://www.gimpel.com/html/pcl.htm\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                           *'g:syntastic_pc_lint_config_file'*\nType: string\nDefault: unset\nName of an indirect (.lnt) file. A file with that name is looked up in the\ncurrent directory and in parent directories; first such file found is used.\n\nSee also: |syntastic-cpp-pc_lint|.\n\n------------------------------------------------------------------------------\n12. Sparse                                                *syntastic-c-sparse*\n\nName:        sparse\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"Sparse\" is a semantic parser for C, see the official wiki for details:\n\n    https://sparse.wiki.kernel.org/index.php/Main_Page\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_sparse_config_file'*\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNotes~\n\nIf you use \"Sparse\" with \"GCC\" you probably want to add something like this to\nyour vimrc: >\n    let g:syntastic_c_sparse_post_args=\"-gcc-base-dir \" .\n        \\ system(\"gcc -v 2>&1 | sed -n '/^Reading specs/ { s#.* /#/#; s#/[^/]*$##; p; }'\")\n<\nThis allows \"Sparse\" to read \"GCC\"'s private include files.\n\n------------------------------------------------------------------------------\n13. Splint                                                *syntastic-c-splint*\n\nName:        splint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Splint\" is a tool for statically checking C programs for security\nvulnerabilities, see the project's page for details:\n\n    http://www.splint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_splint_config_file'*\nType: string\nDefault: unset\nFile containing project-specific options to be passed to \"Splint\"\n(such as defines or include directories), one option per line (cf.\n|syntastic-config-files|).\n\n==============================================================================\nSYNTAX CHECKERS FOR C#                                 *syntastic-checkers-cs*\n\nThe following checkers are available for C# (filetype \"cs\"):\n\n    1. mcs......................|syntastic-cs-mcs|\n\n------------------------------------------------------------------------------\n1. mcs                                                      *syntastic-cs-mcs*\n\nName:        mcs\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"mcs\" is a compiler for C# from the \"Mono\" project\n(http://www.mono-project.com/Main_Page). See the program's manual for details:\n\n    http://mono.wikia.com/wiki/Man_mcs\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR C++                               *syntastic-checkers-cpp*\n\nThe following checkers are available for C++ (filetype \"cpp\"):\n\n    1. AVR-GCC..................|syntastic-cpp-avrgcc|\n    2. ClangCheck...............|syntastic-cpp-clang_check|\n    3. Clang-Tidy...............|syntastic-cpp-clang_tidy|\n    4. Cppcheck.................|syntastic-cpp-cppcheck|\n    5. cppclean.................|syntastic-cpp-cppclean|\n    6. Cpplint..................|syntastic-cpp-cpplint|\n    7. Flawfinder...............|syntastic-cpp-flawfinder|\n    8. GCC......................|syntastic-cpp-gcc|\n    9. OClint...................|syntastic-cpp-oclint|\n    10. PC-Lint.................|syntastic-cpp-pc_lint|\n    11. Vera++..................|syntastic-cpp-verapp|\n\n------------------------------------------------------------------------------\n1. AVR-GCC                                              *syntastic-cpp-avrgcc*\n\nName:        avrgcc\nMaintainer:  S\u0142awek Piotrowski <sentinel@atteo.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_avrgcc_config_file'\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-c-avrgcc|.\n\n------------------------------------------------------------------------------\n2. ClangCheck                                      *syntastic-cpp-clang_check*\n\nName:        clang_check\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"ClangCheck\" is a wrapper around Clang's \"LibTooling\"\n(http://clang.llvm.org/docs/LibTooling.html). See the official page for\ndetails:\n\n    http://clang.llvm.org/docs/ClangCheck.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       'g:syntastic_clang_check_config_file'\nType: string\nDefault: unset\nfile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangCheck\" parameters in\n'g:syntastic_cpp_clang_check_args', and compilation parameters (defines,\noptimisation flags, etc.) in the configuration file.\n\nHowever, if you want \"ClangCheck\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) -- perhaps\ngenerated by \"CMake\" (https://github.com/rizsotto/Bear) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_cpp_clang_check_post_args' to an empty string: >\n    let g:syntastic_cpp_clang_check_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_check_config_file' are\nthen ignored.\n\nSee also: |syntastic-c-clang_check|.\n\n------------------------------------------------------------------------------\n3. Clang-Tidy                                       *syntastic-cpp-clang_tidy*\n\nName:        clang_tidy\nMaintainer:  Benjamin Bannier <bbannier@gmail.com>\n\n\"Clang-Tidy\" is a lint tool based on \"Clang\" (http://clang.llvm.org/). See\nthe project's page for details:\n\n    http://clang.llvm.org/extra/clang-tidy.html\n\nInstallation~\n\n\"Clang-Tidy\" is part of the \"Clang\" (http://clang.llvm.org/) project, but it\nisn't built by default. You need to enable compilation of the \"Extra Clang\nTools\" (http://clang.llvm.org/docs/ClangTools.html#extra-clang-tools) to get\nit. See the build tutorial for details:\n\n    http://clang.llvm.org/docs/LibASTMatchersTutorial.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                        'g:syntastic_clang_tidy_config_file'\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNote~\n\nBy default you can set \"ClangTidy\" parameters in\n'g:syntastic_cpp_clang_tidy_args', and compilation parameters (defines,\noptimisation flags, etc.) in the configuration file.\n\nIf you want \"ClangTidy\" to use compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_cpp_clang_tidy_post_args' to an empty string: >\n    let g:syntastic_cpp_clang_tidy_post_args = \"\"\n<\nConfiguration files pointed to by 'g:syntastic_clang_tidy_config_file' are\nthen ignored.\n\nSee also: |syntastic-c-clang_tidy|.\n\n------------------------------------------------------------------------------\n4. Cppcheck                                           *syntastic-cpp-cppcheck*\n\nName:        cppcheck\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Cppcheck\" is a static analysis tool for C/C++ code. See the project's page\nfor details:\n\n    http://cppcheck.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          'g:syntastic_cppcheck_config_file'\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-c-cppcheck|.\n\n------------------------------------------------------------------------------\n5. cppclean                                           *syntastic-cpp-cppclean*\n\nName:        cppclean\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"cppclean\" attempts to find problems in C++ source that slow development in\nlarge code bases, for example various forms of unused code. See the project's\npage at GitHub for more information:\n\n    https://github.com/myint/cppclean\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install cppclean\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-c-cppclean|.\n\n------------------------------------------------------------------------------\n6. Cpplint                                             *syntastic-cpp-cpplint*\n\nName:        cpplint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nFor details about \"Cpplint\" see the project's page:\n\n    https://code.google.com/p/google-styleguide/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                             *'g:syntastic_cpp_cpplint_thres'*\nType: integer\nDefault: 5\nError threshold. Policy violations with a severity above this value are\nhighlighted as errors, the others are considered warnings by syntastic.\n\n                                              *'g:syntastic_cpp_cpplint_args'*\nType: string\nDefault: \"--verbose=3\"\nCommand line options to pass to \"Cpplint\"\n\nNote~\n\nBy default syntastic expects the \"cpplint\" script to be named \"cpplint.py\".\nHowever, if your \"cpplint\" was installed with \"pip\", the script's name is\n\"cpplint\", and you need to set 'g:syntastic_cpp_cpplint_exec' accordingly:\n>\n    let g:syntastic_cpp_cpplint_exec = \"cpplint\"\n<\n------------------------------------------------------------------------------\n7. Flawfinder                                       *syntastic-cpp-flawfinder*\n\nName:        flawfinder\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Flawfinder\" scans C/C++ source code for possible security weaknesses. See the\nproject's page for more information:\n\n    https://www.dwheeler.com/flawfinder\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          *'g:syntastic_cpp_flawfinder_thres'*\nType: integer\nDefault: 3\nError threshold. Policy violations with a severity above this value are\nhighlighted as errors, the others are considered warnings by syntastic.\n\nSee also: |syntastic-c-flawfinder|.\n\n------------------------------------------------------------------------------\n8. GCC                                                     *syntastic-cpp-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                                  *'g:syntastic_cpp_compiler'*\nType: string\nDefault: \"g++\", or \"clang++\" if GCC is not found\nCompiler executable.\n\n                                               *'g:syntastic_cpp_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                     *'g:syntastic_cpp_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                          *'g:syntastic_cpp_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                               *'g:syntastic_cpp_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                              *'g:syntastic_cpp_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it to something like this: >\n    let g:syntastic_cpp_include_dirs = [\"includes\", \"headers\"]\n>\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                   *'g:syntastic_cpp_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                         *'g:syntastic_cpp_no_include_search'*\nType: boolean\nDefault: 0\nBy default syntastic looks at the first 100 lines of the file being checked,\nand tries to determine if it needs to include headers for some common\nlibraries, such as \"GLib\" or \"Gtk\". It then tries to add the corresponding\ninclude directories to the compilation flags. You can disable this behaviour\nby setting the above variable to 1.\n\n                                     *'g:syntastic_cpp_auto_refresh_includes'*\nType: boolean\nDefault: 0\nUsed only if \"g:syntastic_cpp_no_include_search\" is set to a false value.\nBy default syntastic searches for common libraries only the first time the\ncurrent file is checked. Setting the above variable to 1 instructs syntastic\nto refresh the list of common libraries every time the current file is\nchecked. You can also force a refresh even when the above variable is 0, by\n`:unlet`-ing the buffer variable 'b:syntastic_cpp_includes'.\n\n                                                    *'b:syntastic_cpp_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. When set, no search for common libraries is performed,\nand the contents of the variable are added to the compilation flags.\n\n                                              *'g:syntastic_cpp_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\", \"hpp\", or\n\"hh\"), all checks are silently skipped. You can force syntastic to check\nheader files by setting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_cpp_gcc_<option>' variables. The only exception is\n'g:syntastic_cpp_gcc_exec', which can still be used to override the linter's\nexecutable.\n\nSee also: |syntastic-c-gcc|.\n\n------------------------------------------------------------------------------\n9. OClint                                               *syntastic-cpp-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nNotes~\n\nBy default you can set \"OClint\" parameters in 'g:syntastic_cpp_oclint_args',\nand compilation parameters (defines, optimisation flags, etc.) in the config\nfile.\n\nIf you want \"OClint\" to use \"Clang\"-style compilation databases\n(http://clang.llvm.org/docs/JSONCompilationDatabase.html) --\nperhaps generated by \"CMake\" (http://cmake.org/) or \"Build EAR\"\n(https://github.com/rizsotto/Bear) -- rather than pass compilation flags\nexplicitly, set 'g:syntastic_c_oclint_post_args' to an empty string: >\n    let g:syntastic_cpp_oclint_post_args = \"\"\n<\nConfig files pointed to by 'g:syntastic_oclint_config_file' are then ignored.\n\nSee also: |syntastic-c-oclint|.\n\n------------------------------------------------------------------------------\n10. PC-Lint                                            *syntastic-cpp-pc_lint*\n\nName:        pc_lint\nMaintainer:  Steve Bragg <steve@empresseffects.com>\n\n\"PC-Lint\" is a commercial static code analysis tool for Windows, produced\nby \"Gimpel Software\" (http://www.gimpel.com/). See the project's page for\ndetails:\n\n    http://www.gimpel.com/html/pcl.htm\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                           'g:syntastic_pc_lint_config_file'\nType: string\nDefault: unset\nName of an indirect (.lnt) file. A file with that name is looked up in the\ncurrent directory and in parent directories; first such file found is used.\n\nSee also: |syntastic-c-pc_lint|.\n\n------------------------------------------------------------------------------\n11. Vera++                                              *syntastic-cpp-verapp*\n\nName:        verapp\nMaintainer:  Lucas Verney <phyks@phyks.me>\n\n\"Vera++\" is a programmable tool for verification, analysis and transformation\nof C++ source code. See the project's page for details:\n\n    https://bitbucket.org/verateam/vera/wiki/Home\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            *'g:syntastic_verapp_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n==============================================================================\nSYNTAX CHECKERS FOR CABAL                           *syntastic-checkers-cabal*\n\nThe following checkers are available for Cabal (filetype \"cabal\"):\n\n    1. Cabal....................|syntastic-cabal-cabal|\n\n------------------------------------------------------------------------------\n1. Cabal                                               *syntastic-cabal-cabal*\n\nName:        cabal\nMaintainer:  Ian D. Bollinger <ian.bollinger@gmail.com>\n\nThis checker runs \"cabal check\" against Haskell Cabal package descriptions.\nSee the project's page for more information:\n\n    http://www.haskell.org/cabal/\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_cabal_cabal_<option>' variables. The only exception\nis 'g:syntastic_cabal_cabal_exec', which can still be used to override the\nlinter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR CHEF                             *syntastic-checkers-chef*\n\nThe following checkers are available for Chef (filetype \"chef\"):\n\n    1. Foodcritic...............|syntastic-chef-foodcritic|\n\n------------------------------------------------------------------------------\n1. Foodcritic                                      *syntastic-chef-foodcritic*\n\nName:        foodcritic\nMaintainer:  Doug Ireton\n\n\"Foodcritic\" is a linter for \"Chef\" cookbooks (http://www.opscode.com/chef/).\nSee the project's page for more information:\n\n    http://acrmp.github.io/foodcritic/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Chef files, such as\n\"vim-chef\":\n\n    https://github.com/dougireton/vim-chef\n\n==============================================================================\nSYNTAX CHECKERS FOR CMAKE                           *syntastic-checkers-cmake*\n\nThe following checkers are available for CMake (filetype \"cmake\"):\n\n    1. cmakelint................|syntastic-cmake-cmakelint|\n\n------------------------------------------------------------------------------\n1. cmakelint                                       *syntastic-cmake-cmakelint*\n\nName:        cmakelint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"cmakelint\" is a style linter for \"CMake\" files (https://cmake.org/).\nSee the project's page at GitHub more information:\n\n    https://github.com/richq/cmake-lint\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install cmakelint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR COBOL                           *syntastic-checkers-cobol*\n\nThe following checkers are available for COBOL (filetype \"cobol\"):\n\n    1. OpenCOBOL................|syntastic-cobol-cobc|\n\n------------------------------------------------------------------------------\n1. OpenCOBOL                                            *syntastic-cobol-cobc*\n\nName:        cobc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"OpenCOBOL\" is a compiler for COBOL. See the project's page for more\ninformation:\n\n    http://www.opencobol.org/\n\nChecker options~\n                                                *'g:syntastic_cobol_compiler'*\nType: string\nDefault: \"cobc\"\nCompiler executable.\n\n                                             *'g:syntastic_cobol_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                   *'g:syntastic_cobol_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                        *'g:syntastic_cobol_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as \"-std=cobol2002\") to be passed to the linter.\n\n                                             *'g:syntastic_cobol_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                            *'g:syntastic_cobol_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it to something like this: >\n    let g:syntastic_cobol_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                  *'b:syntastic_cobol_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_cobol_cobc_<option>' variables. The only exception\nis 'g:syntastic_cobol_cobc_exec', which can still be used to override the\nlinter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR COCO                               *syntastic-checkers-co*\n\nThe following checkers are available for Coco (filetype \"co\"):\n\n    1. Coco.....................|syntastic-co-coco|\n\n------------------------------------------------------------------------------\n1. Coco                                                    *syntastic-co-coco*\n\nName:        coco\nMaintainer:  Andrew Kelley <superjoe30@gmail.com>\n\nFor details about \"Coco\" see the project's page:\n\n    https://github.com/satyr/coco/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR COFFEESCRIPT                   *syntastic-checkers-coffee*\n\nThe following checkers are available for CoffeeScript (filetype \"coffee\"):\n\n    1. Coffee...................|syntastic-coffee-coffee|\n    2. Coffee->JSHint...........|syntastic-coffee-coffee_jshint|\n    3. CoffeeLint...............|syntastic-coffee-coffeelint|\n\n------------------------------------------------------------------------------\n1. Coffee                                            *syntastic-coffee-coffee*\n\nName:        coffee\nMaintainer:  Lincoln Stoll <l@lds.li>\n\n\"Coffee\" is a compiler for CoffeeScript. See the project's page for details:\n\n    http://coffeescript.org/\n\nSyntastic requires \"Coffee\" version 1.6.2 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Coffee->JSHint                             *syntastic-coffee-coffee_jshint*\n\nName:        coffee_jshint\nMaintainer:  John Krauss <john@johnkrauss.com>\n\n\"Coffee->JSHint\" is a JSHint validator for CoffeeScript. See the project's\npage at GitHub for details:\n\n    https://github.com/marviq/coffee-jshint\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g coffee-jshint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\nAccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. CoffeeLint                                    *syntastic-coffee-coffeelint*\n\nName:        coffeelint\nMaintainer:  Lincoln Stoll <l@lds.li>\n\n\"CoffeeLint\" is a style linter for CoffeeScript. See the project's page for\ndetails:\n\n    http://www.coffeelint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR COQ                               *syntastic-checkers-coq*\n\nThe following checkers are available for Coq (filetype \"coq\"):\n\n    1. Coqtop...................|syntastic-coq-coqtop|\n\n------------------------------------------------------------------------------\n1. Coqtop                                               *syntastic-coq-coqtop*\n\nName:        coqtop\nMaintainer:  Matvey Aksenov <matvey.aksenov@gmail.com>\n\n\"Coqtop\" is the top level interface for Coq. See the project's page for\ndetails:\n\n    http://coq.inria.fr/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR CSS                               *syntastic-checkers-css*\n\nThe following checkers are available for CSS (filetype \"css\"):\n\n    1. CSSLint..................|syntastic-css-csslint|\n    2. mixedindentlint..........|syntastic-css-mixedindentlint|\n    3. PHP_CodeSniffer..........|syntastic-css-phpcs|\n    4. PrettyCSS................|syntastic-css-prettycss|\n    5. RECESS...................|syntastic-css-recess|\n    6. stylelint................|syntastic-css-stylelint|\n\n------------------------------------------------------------------------------\n1. CSSLint                                             *syntastic-css-csslint*\n\nName:        csslint\nMaintainer:  Ory Band <oryband@gmail.com>\n\n\"CSSLint\" is a lint tool for Cascading Stylesheets. See the project's page\nfor details:\n\n    http://csslint.net/\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g csslint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. mixedindentlint                             *syntastic-css-mixedindentlint*\n\nName:        mixedindentlint\nMaintainer:  Payton Swick <payton@foolord.com>\n\n\"mixedindentlint\" is a general-purpose indentation linter. See the project's\npage at GitHub for more information:\n\n    https://github.com/sirbrillig/mixedindentlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-javascript-mixedindentlint|, |syntastic-scss-mixedindentlint|.\n\n------------------------------------------------------------------------------\n3. PHP_CodeSniffer                                       *syntastic-css-phpcs*\n\nName:        phpcs\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"PHP_CodeSniffer\" is a style linter for PHP and CSS. See the project's page\nat GitHub for details:\n\n    https://github.com/squizlabs/PHP_CodeSniffer/\n\nInstallation~\n\nInstall it with: >\n    pear install PHP_CodeSniffer\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"PHP_CodeSniffer\"'s\nidea of tabstop must match Vim's 'tabstop', otherwise syntastic will highlight\nthe errors at shifted positions. By default syntastic does that by adding\nan option \"--tab-width=&tabstop\" to \"PHP_CodeSniffer\", but that option\nalso instructs \"PHP_CodeSniffer\" to expand tabs, and some code sniffers\n(f.i. \"CakePHP\", see https://github.com/cakephp/cakephp-codesniffer) insist on\nindenting lines with tabs. To work around the resulting mess if you're using\none of these sniffers, set \"--tab-width=0\" and 'tabstop' to 8: >\n    let g:syntastic_php_phpcs_args = \"--tab-width=0\"\n    set tabstop=8\n<\nSee also: |syntastic-php-phpcs|.\n\n------------------------------------------------------------------------------\n4. PrettyCSS                                         *syntastic-css-prettycss*\n\nName:        prettycss\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"PrettyCSS\" is a beautifier, lint checker, and validator for Cascading\nStylesheets. For more details see:\n\nPrettyCSS Demo:\n\n    http://fidian.github.io/PrettyCSS/\n\nThe project's page at GitHub:\n\n    https://github.com/fidian/PrettyCSS/\n\nInstallation~\n\nInstall it with: >\n    npm install -g PrettyCSS\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. RECESS                                               *syntastic-css-recess*\n\nName:        recess\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"RECESS\" is a code quality tool for CSS built on top of LESS. See the\nproject's page for details:\n\n    http://twitter.github.io/recess/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-less-recess|.\n\n------------------------------------------------------------------------------\n6. stylelint                                         *syntastic-css-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-stylelint|, |syntastic-less-stylelint|,\n|syntastic-scss-stylelint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR CUCUMBER                     *syntastic-checkers-cucumber*\n\nThe following checkers are available for Cucumber (filetype \"cucumber\"):\n\n    1. Cucumber.................|syntastic-cucumber-cucumber|\n\n------------------------------------------------------------------------------\n1. Cucumber                                      *syntastic-cucumber-cucumber*\n\nName:        cucumber\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Cucumber\" is a tool that executes plain-text functional descriptions as\nautomated tests. See the project's page for more information:\n\n    http://cukes.info/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR CUDA                             *syntastic-checkers-cuda*\n\nThe following checkers are available for CUDA (filetype \"cuda\"):\n\n    1. NVCC.....................|syntastic-cuda-nvcc|\n\n------------------------------------------------------------------------------\n1. NVCC                                                  *syntastic-cuda-nvcc*\n\nName:        nvcc\nAuthor: Hannes Schulz <schulz@ais.uni-bonn.de>\n\n\"NVCC\" is a CUDA Compiler from nVidia. See the project's page for details:\n\n    https://developer.nvidia.com/cuda-llvm-compiler\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                             *'g:syntastic_cuda_check_header'*\nType: boolean\nDefault: 0\nTurn this on to check header files.  The checker then creates an empty file\n\".syntastic_dummy.cu\" in the base directory of the file being checked.\nExample: >\n    let g:syntastic_cuda_check_header = 1\n<\n                                              *'g:syntastic_cuda_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n==============================================================================\nSYNTAX CHECKERS FOR D                                   *syntastic-checkers-d*\n\nThe following checkers are available for D (filetype \"d\"):\n\n    1. DMD......................|syntastic-d-dmd|\n    2. D-Scanner................|syntastic-d-dscanner|\n\n------------------------------------------------------------------------------\n1. DMD                                                       *syntastic-d-dmd*\n\nName:        dmd\nMaintainer:  Alfredo Di Napoli <alfredo.dinapoli@gmail.com>\n\nChecker options~\n                                                    *'g:syntastic_d_compiler'*\nType: string\nDefault: \"dmd\"\nCompiler executable.\n\n                                                 *'g:syntastic_d_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                       *'g:syntastic_d_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                            *'g:syntastic_d_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                                 *'g:syntastic_d_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                                *'g:syntastic_d_include_dirs'*\nType: array of strings\nDefault: inferred from \".dub/packages\"\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_d_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                     *'g:syntastic_d_use_dub'*\nType: boolean\nDefault: 1\nWhether to use \"dub\" to find include directories. This requires \"dub\" version\n0.9.24 or later.\n\n                                                    *'g:syntastic_d_dub_exec'*\nType: string\nDefault: \"dub\"\nPath to the \"dub\" executable. Ignored if |'g:syntastic_d_use_dub'| is unset.\n\n                                                      *'b:syntastic_d_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                                *'g:syntastic_d_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"di\"), all checks\nare silently skipped. You can force syntastic to check header files by setting\nthe above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_d_dmd_<option>' variables. The only exception is\n'g:syntastic_d_dmd_exec', which can still be used to override the linter's\nexecutable.\n\n------------------------------------------------------------------------------\n2. D-Scanner                                            *syntastic-d-dscanner*\n\nName:        dscanner\nMaintainer:  ANtlord\n\n\"D-Scanner\" is a tool for analyzing D source code (https://dlang.org/). See\nthe project's page at GitHub for more information:\n\n    https://github.com/Hackerpilot/Dscanner\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DART                             *syntastic-checkers-dart*\n\nThe following checkers are available for Dart (filetype \"dart\"):\n\n    1. Analyzer.................|syntastic-dart-dartanalyzer|\n\n------------------------------------------------------------------------------\n1. Analyzer                                      *syntastic-dart-dartanalyzer*\n\nName:        dartanalyzer\nMaintainer:  Maksim Ryzhikov <rv.maksim@gmail.com>\n\n\"Analyzer\" is a static analysis tool for Dart (https://www.dartlang.org/).\nSee the manual for more information:\n\n    https://www.dartlang.org/tools/analyzer/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DOCBOOK                         *syntastic-checkers-docbk*\n\nThe following checkers are available for DocBook (filetype \"docbk\"):\n\n    1. Igor.....................|syntastic-docbk-igor|\n    2. xmllint..................|syntastic-docbk-xmllint|\n\n------------------------------------------------------------------------------\n1. Igor                                                 *syntastic-docbk-igor*\n\nName:        igor\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Igor\" is a proofreader for DocBook SGML, man pages, and text files used by\nthe FreeBSD project (https://www.freebsd.org/). See the author's presentation\nfor details:\n\n    http://www.youtube.com/watch?v=sczHqUPygZY\n\nThe latest version can be obtained from Glen Barber's repository:\n\n    http://docscripts.glenbarber.us/tags/igor/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-nroff-igor|, |syntastic-text-igor|.\n\n------------------------------------------------------------------------------\n2. xmllint                                           *syntastic-docbk-xmllint*\n\nName:        xmllint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"xmllint\" is a linter and transformer tool for XML files, distributed with\nthe \"libxml\" package (http://www.xmlsoft.org/). See the tool's manual for more\ninformation:\n\n    http://xmlsoft.org/xmllint.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can use a local installation of DTDs to significantly speed up validation\nand allow you to validate XML data without network access. See the\n\"xmlcatalog\" manual, and the catalog documentation for more information:\n\n    http://www.xmlsoft.org/xmlcatalog_man.html\n    http://www.xmlsoft.org/catalog.html\n\nFor an example of a DTD catalog see f.i. \"XMLCatalog\":\n\n    https://github.com/darcyparker/XMLCatalog\n\nIn order to use it with syntastic you'll have to clone it to a local\ndirectory, and point the environment variable \"XML_CATALOG_FILES\" to the file\n\"catalog.xml\" in the said directory: >\n    XML_CATALOG_FILES=/some/path/XMLCatalog/catalog.xml\n    export XML_CATALOG_FILES\n<\nOtherwise \"xmllint\" will try to load XML catalogs from \"/etc/xml/catalog\".\n\nSee also: |syntastic-xml-xmllint|, |syntastic-xslt-xmllint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DOCKERFILE                 *syntastic-checkers-dockerfile*\n\nThe following checkers are available for Dockerfile (filetype \"dockerfile\"):\n\n    1. dockerfile-lint..........|syntastic-dockerfile-dockerfile_lint|\n    2. Hadolint.................|syntastic-dockerfile-hadolint|\n\n------------------------------------------------------------------------------\n1. dockerfile-lint                      *syntastic-dockerfile-dockerfile_lint*\n\nName:        dockerfile_lint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"dockerfile-lint\" is a linter for Dockerfiles\n(http://docs.docker.com/engine/reference/builder). See the project's page at\nGitHub for details:\n\n    https://github.com/projectatomic/dockerfile_lint\n\nInstallation~\n\nInstall it with: >\n    npm install -g dockerfile_lint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Hadolint                                    *syntastic-dockerfile-hadolint*\n\nName:        hadolint\nMaintainer:  Jesper B. Rosenkilde <jbr@humppa.dk>\n\n\"Hadolint\" is a dockerfile linter written in Haskell. See the project's page\nat GitHub for details:\n\n    https://github.com/lukasmartinelli/hadolint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR DUST                           *syntastic-checkers-dustjs*\n\nThe following checkers are available for Dust (filetype \"dustjs\"):\n\n    1. Swiffer..................|syntastic-dustjs-swiffer|\n\n------------------------------------------------------------------------------\n1. Swiffer                                          *syntastic-dustjs-swiffer*\n\nName:        swiffer\nMaintainer:  Steven Foote <smfoote@gmail.com>\n\n\"Swiffer\" is a command line lint tool for Dust. See the project's page for\ndetails:\n\n    https://github.com/smfoote/Swiffer.js\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nTo enable Dust syntax checking, you must set the filetype of your Dust\ntemplate files to \"dustjs\". An easy way to do this is by installing the dustjs\nsyntax highlighter:\n\n    https://github.com/jimmyhchan/dustjs.vim\n\n==============================================================================\nSYNTAX CHECKERS FOR ELIXIR                         *syntastic-checkers-elixir*\n\nThe following checkers are available for Elixir (filetype \"elixir\"):\n\n    1. elixir...................|syntastic-elixir-elixir|\n\n------------------------------------------------------------------------------\n1. elixir                                            *syntastic-elixir-elixir*\n\nName:        elixir\nMaintainer:  Richard Ramsden <rramsden@gmail.com>\n\nSee the project's page for details:\n\n    http://elixir-lang.org/\n\nSecurity~\n\nThis checker executes the code in the files it checks:\n\n    https://github.com/vim-syntastic/syntastic/issues/1141\n\nThis is probably fine if you wrote the files yourself, but it can be a problem\nif you're trying to check third party files. If you are 100% willing to let\nVim run the code in your files, set 'g:syntastic_enable_elixir_checker' to 1\nin your vimrc to enable this checker: >\n    let g:syntastic_enable_elixir_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover a global one in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"elixir\" to 'g:syntastic_elixir_checkers' if\nyou plan to use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ERLANG                         *syntastic-checkers-erlang*\n\nThe following checkers are available for Erlang (filetype \"erlang\"):\n\n    1. escript..................|syntastic-erlang-escript|\n    2. SyntaxErl................|syntastic-erlang-syntaxerl|\n\n------------------------------------------------------------------------------\n1. escript                                          *syntastic-erlang-escript*\n\nName:        escript\nMaintainer:  Pawel Salata <rockplayer.pl@gmail.com>\n\n\"escript\" is an interpreter for Erlang programs. See the tool's manual for\nmore information:\n\n    http://www.erlang.org/doc/man/escript.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you get warning: \"behaviour X undefined\" with your customize behaviour, add\nthe following line in your vimrc: >\n    let g:syntastic_erlc_include_path = \"ebin\"\n<\n\n------------------------------------------------------------------------------\n2. SyntaxErl                                      *syntastic-erlang-syntaxerl*\n\nName:        syntaxerl\nMaintainer:  locojay\n\n\"SyntaxErl\" is a syntax linter for Erlang. It uses \"rebar\"\n(https://github.com/basho/rebar) to determine correct dependencies and library\npaths. See the project's page for more information:\n\n    https://github.com/ten0s/syntaxerl\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ERUBY                           *syntastic-checkers-eruby*\n\nThe following checkers are available for eRuby (filetype \"eruby\"):\n\n    1. Ruby.....................|syntastic-eruby-ruby|\n\n------------------------------------------------------------------------------\n1. Ruby                                                 *syntastic-eruby-ruby*\n\nName:        ruby\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n                                                     'g:syntastic_ruby_exec'\nType: string\nDefault: \"ruby\"\nThe Ruby executable to use.\n\nNote~\n\nThe variable 'g:syntastic_ruby_exec' is also used by the Ruby\n\"MRI\" checker (cf. |syntastic-ruby-mri|), and it can be overriden\nby 'g:syntastic_eruby_ruby_exec'. However, this checker doesn't\ncall the \"makeprgBuild()\" function, and thus it ignores all other\n'g:syntastic_eruby_ruby_<option>' variables.\n\n==============================================================================\nSYNTAX CHECKERS FOR FORTRAN                       *syntastic-checkers-fortran*\n\nThe following checkers are available for Fortran (filetype \"fortran\"):\n\n    1. GNU Fortran..............|syntastic-fortran-gfortran|\n\n------------------------------------------------------------------------------\n1. GNU Fortran                                    *syntastic-fortran-gfortran*\n\nName:        gfortran\nMaintainer:  Karl Yngve Lerv\u00e5g <karl.yngve@lervag.net>\n\n\"GNU Fortran\" is a checker for Fortran files using either GNU\nFortran (https://gcc.gnu.org/fortran/) or Intel Fortran Compilers\n(https://software.intel.com/en-us/fortran-compilers).\n\nChecker options~\n                                              *'g:syntastic_fortran_compiler'*\nType: string\nDefault: \"gfortran\"\nCompiler executable. Set this to either \"gfortran\" (to use GNU Fortran), or to\n\"ifort\" (for Intel Fortran).\n\n                                           *'g:syntastic_fortran_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                 *'g:syntastic_fortran_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                      *'g:syntastic_fortran_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as \"-std=f95\") to be passed to the linter.\n\n                                           *'g:syntastic_fortran_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                          *'g:syntastic_fortran_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_fortran_include_dirs = [\"includes\", \"headers\"]\"\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                *'b:syntastic_fortran_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_fortran_gfortran_<option>' variables. The only\nexception is 'g:syntastic_fortran_gfortran_exec', which can still be used to\noverride the linter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR GENTOO METADATA                *syntastic-checkers-gentoo*\n\nThe following checkers are available for Gentoo Metadata (filetype \"gentoo\"):\n\n    1. xmllint..................|syntastic-gentoo-xmllint|\n\n------------------------------------------------------------------------------\n1. xmllint                                          *syntastic-gentoo-xmllint*\n\nName:        xmllint\nMaintainer:  James Rowe <jnrowe@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nThe DTDs required to validate \"metadata.xml\" files are available in\n\"$PORTDIR/metadata/dtd\", and these local files can be used to significantly\nspeed up validation. You can create a catalog file with: >\n    xmlcatalog --create --add rewriteURI http://www.gentoo.org/dtd/ \\\n        ${PORTDIR:-/usr/portage}/metadata/dtd/ /etc/xml/gentoo\n<\nSee \"xmlcatalog\" for more information:\n\n    http://www.xmlsoft.org/catalog.html\n\n==============================================================================\nSYNTAX CHECKERS FOR GETTEXT PO                         *syntastic-checkers-po*\n\nThe following checkers are available for gettext .po files (filetype \"po\"):\n\n    1. Dennis...................|syntastic-po-dennis|\n    2. msgfmt...................|syntastic-po-msgfmt|\n\n------------------------------------------------------------------------------\n1. Dennis                                                *syntastic-po-dennis*\n\nName:        dennis\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Dennis\" is a set of utilities for working with gettext Portable Object\n(http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html)\ntranslation files:\n\n    https://github.com/willkg/dennis/\n\nSee the program's manual for further details:\n\n    http://dennis.readthedocs.io/en/latest/linting.html\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install dennis\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. msgfmt                                                *syntastic-po-msgfmt*\n\nName:        msgfmt\nMaintainer:  Ryo Okubo <syucream1031@gmail.com>\n\n\"msgfmt\" is a compiler for gettext Portable Object\n(http://www.gnu.org/software/gettext/manual/html_node/PO-Files.html)\ntranslation files.  See the program's manual for details:\n\n    http://www.gnu.org/software/gettext/manual/html_node/msgfmt-Invocation.html#msgfmt-Invocation\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR GLSL                             *syntastic-checkers-glsl*\n\nThe following checkers are available for GLSL (filetype \"glsl\"):\n\n    1. cgc......................|syntastic-glsl-cgc|\n\n------------------------------------------------------------------------------\n1. cgc                                                    *syntastic-glsl-cgc*\n\nName:        cgc\nMaintainer:  Joshua Rahm <joshuarahm@gmail.com>\n\n\"cgc\" is a compiler that translates Cg or GLSL programs into OpenGL or DirectX\ncode. See the manual for more details:\n\n    http://http.developer.nvidia.com/Cg/cgc.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                               *'g:syntastic_glsl_extensions'*\nType: dictionary\nDefault: unset\n\nYou can control the profiles used by \"cgc\" with magic comments: put the magic\ncomment \"// profile:\" followed by the profile for \"cgc\" to use.  For example\nuse >\n    // profile: glslf\n<\nto force the fragment shader profile.\n\nIf the magic comment does not exist, then the dictionary\n'g:syntastic_glsl_extensions' is used to infer the appropriate profile from\nthe current file's extension. If this dictionary does not exist either, a\ndefault dictionary is used instead. Finally, if the current file's extension\ncannot be found in these dictionaries, the checker assumes a vertex shader\nprofile.\n\n                                                  *'g:syntastic_glsl_options'*\nType: string\nDefault: unset\nAdditional arguments to pass to \"cgc\".\n\nNote~\n\nYou probably also need a plugin to set |filetype| for OpenGL files, such as\n\"vim-glsl\":\n\n    https://github.com/tikhomirov/vim-glsl\n\n==============================================================================\nSYNTAX CHECKERS FOR GO                                 *syntastic-checkers-go*\n\nThe following checkers are available for Go (filetype \"go\"):\n\n    1. go.......................|syntastic-go-go|\n    2. gofmt....................|syntastic-go-gofmt|\n    3. Golint...................|syntastic-go-golint|\n    4. Go Meta Linter...........|syntastic-go-gometalinter|\n    5. gotype...................|syntastic-go-gotype|\n    6. vet......................|syntastic-go-govet|\n\n------------------------------------------------------------------------------\n1. go                                                        *syntastic-go-go*\n\nName:        go\nMaintainer:  Kamil Kisiel <kamil@kamilkisiel.net>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                              *'g:syntastic_go_go_build_args'*\nType: string\nDefault: \"-buildmode=archive\"\narguments passed to \"go build\"\n\n                                               *'g:syntastic_go_go_test_args'*\nType: string\nDefault: \"-buildmode=archive\"\narguments passed to \"go test\".\n\nNote~\n\nThis syntax checker does not reformat your source code.  Use a |BufWritePre|\nautocommand towards that end: >\n    autocmd FileType go autocmd BufWritePre <buffer> Fmt\n<\n------------------------------------------------------------------------------\n2. gofmt                                                  *syntastic-go-gofmt*\n\nName:        gofmt\nMaintainer:  Brandon Thomson <bt@brandonthomson.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nThis syntax checker does not reformat your source code.  Use a |BufWritePre|\nautocommand towards that end: >\n    autocmd FileType go autocmd BufWritePre <buffer> Fmt\n<\n------------------------------------------------------------------------------\n3. Golint                                                *syntastic-go-golint*\n\nName:        golint\nMaintainer: Hiroshi Ioka <hirochachacha@gmail.com>\n\n\"Golint\" is a linter for Go. See the project's page for details:\n\n    https://github.com/golang/lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. Go Meta Linter                                  *syntastic-go-gometalinter*\n\nName:        gometalinter\nMaintainer: Joshua Rubin <joshua@rubixconsulting.com>\n\n\"Go Meta Linter\" is a linter for Go. It runs a number of other linters\nagainst your files, and normalises their output to a standard format.\nSee the project's page at GitHub for details:\n\n    https://github.com/alecthomas/gometalinter\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. gotype                                                *syntastic-go-gotype*\n\nName:        gotype\nMaintainer:  luz <ne.tetewi@gmail.com>\n\nSee the tool's documentation for details:\n\n    https://godoc.org/golang.org/x/tools/cmd/gotype\n\n------------------------------------------------------------------------------\n6. vet                                                    *syntastic-go-govet*\n\nName:        govet\nMaintainer:  Kamil Kisiel <kamil@kamilkisiel.net>\n\nSee the tool's documentation for details:\n\n    https://godoc.org/cmd/vet\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_go_govet_<option>' variables.\n\n==============================================================================\nSYNTAX CHECKERS FOR HAML                             *syntastic-checkers-haml*\n\nThe following checkers are available for Haml (filetype \"haml\"):\n\n    1. Haml.....................|syntastic-haml-haml|\n    2. HAML-Lint................|syntastic-haml-haml_lint|\n\n------------------------------------------------------------------------------\n1. Haml                                                  *syntastic-haml-haml*\n\nName:        haml\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nSee the project's page for details:\n\n    http://haml.info/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. HAML-Lint                                        *syntastic-haml-haml_lint*\n\nName:        haml_lint\nMaintainer:  Shane da Silva <shane@dasilva.io>\n\n\"HAML-Lint\" is a linter for HAML files. See the project's page for details:\n\n    https://github.com/causes/haml-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR HANDLEBARS                 *syntastic-checkers-handlebars*\n\nThe following checkers are available for Handlebars (filetype \"handlebars\"):\n\n    1. Handlebars...............|syntastic-handlebars-handlebars|\n\n------------------------------------------------------------------------------\n1. Handlebars                                *syntastic-handlebars-handlebars*\n\nName:        handlebars\nMaintainer:  Jeremy Mack\n\n\"Handlebars\" is a JavaScript library for building semantic templates. See the\nproject's page for details:\n\n    http://handlebarsjs.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Handlebars files, such as\n\"vim-mustache-handlebars\":\n\n    https://github.com/mustache/vim-mustache-handlebars\n\n==============================================================================\nSYNTAX CHECKERS FOR HASKELL                       *syntastic-checkers-haskell*\n\nThe following checkers are available for Haskell (filetype \"haskell\"):\n\n    1. hdevtools................|syntastic-haskell-hdevtools|\n    2. HLint....................|syntastic-haskell-hlint|\n    3. Style scanner............|syntastic-haskell-scan|\n\n------------------------------------------------------------------------------\n1. hdevtools                                     *syntastic-haskell-hdevtools*\n\nName:        hdevtools\nMaintainer:  Anthony Carapetis <anthony.carapetis@gmail.com>\n\n\"hdevtools\" is a backend for text editor plugins. See the project's page at\nGitHub for details:\n\n    https://github.com/bitc/hdevtools/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters, then Vim's 'tabstop'\nmust match \"hdevtools\"'s idea of tabstop, otherwise column numbers will be\nshifted. At the time of this writing, \"hdevtools\"'s tabstop is hardcoded to 8,\nso you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\n------------------------------------------------------------------------------\n2. HLint                                             *syntastic-haskell-hlint*\n\nName:        hlint\nMaintainer:  Nicolas Wu <nicolas.wu@gmail.com>\n\n\"HLint\" is a linter and style checker for Haskell. See the project's page for\ndetails:\n\n    http://community.haskell.org/~ndm/hlint/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters, Vim's 'tabstop' must\nmatch \"HLint\"'s idea of tabstop, otherwise column numbers will be shifted. At\nthe time of this writing \"HLint\"'s tabstop is hardcoded to 8, so you should\nprobably add something like this to your vimrc: >\n    set tabstop=8\n<\n------------------------------------------------------------------------------\n3. Style scanner                                      *syntastic-haskell-scan*\n\nName:        scan\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Style scanner\" is a style linter for Haskell. See the project's page for\ndetails:\n\n    http://projects.haskell.org/style-scanner/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters, Vim's 'tabstop' must\nmatch \"Style scanner\"'s idea of tabstop, otherwise column numbers will be\nshifted. At the time of this writing \"Style scanner\"'s tabstop is hardcoded to\n8, so you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\n==============================================================================\nSYNTAX CHECKERS FOR HAXE                             *syntastic-checkers-haxe*\n\nThe following checkers are available for Haxe (filetype \"haxe\"):\n\n    1. Haxe.....................|syntastic-haxe-haxe|\n\n------------------------------------------------------------------------------\n1. Haxe                                                  *syntastic-haxe-haxe*\n\nName:        haxe\nMaintainer:  David Bernard <david.bernard.31@gmail.com>\n\n\"Haxe\" is a programming language and compiler that can produce applications\nand source code for multiple different platforms from a single code-base. See\nthe project's page for details:\n\n    http://haxe.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                                               *'g:vaxe_hxml'*\n                                                               *'b:vaxe_hxml'*\nType: string\nDefault: unset\nBy default the checker will search parent folders for \"hxml\" files, and\nuse the first one it finds. You can override that behaviour by pointing\n'g:vaxe_hxml' or 'b:vaxe_hxml' to a specific build file. Those variables can\nalso be set by Vaxe:\n\n    https://github.com/jdonaldson/vaxe\n\n==============================================================================\nSYNTAX CHECKERS FOR HSS                               *syntastic-checkers-hss*\n\nThe following checkers are available for HSS (filetype \"hss\"):\n\n    1. HSS......................|syntastic-hss-hss|\n\n------------------------------------------------------------------------------\n1. HSS                                                     *syntastic-hss-hss*\n\nName:        hss\nMaintainer:  Justin Donaldson <jdonaldson@gmail.com>\n\n\"HSS\" is a tool that extends the CSS syntax with features such as variables\nand nested blocks. See the project's page for details:\n\n    http://ncannasse.fr/projects/hss\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR HTML                             *syntastic-checkers-html*\n\nThe following checkers are available for HTML (filetype \"html\"):\n\n    1. ESLint...................|syntastic-html-eslint|\n    2. gjslint..................|syntastic-html-gjslint|\n    3. HTML tidy................|syntastic-html-tidy|\n    4. HTMLHint.................|syntastic-html-htmlhint|\n    5. JSHint...................|syntastic-html-jshint|\n    6. proselint................|syntastic-html-proselint|\n    7. stylelint................|syntastic-html-stylelint|\n    8. textlint.................|syntastic-html-textlint|\n    9. Validator................|syntastic-html-validator|\n    10. W3......................|syntastic-html-w3|\n\n------------------------------------------------------------------------------\n1. ESLint                                              *syntastic-html-eslint*\n\nName:        eslint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found in\nECMAScript/JavaScript code. It can also detect problems in JavaScript code\nembedded in HTML files. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nAutomatically fixing errors (option \"--fix\") is not supported.\n\nYou can also use \"eslint_d\" (https://github.com/mantoni/eslint_d.js), version\n2.1.0 or later, instead of \"ESLint\". Just point 'g:syntastic_html_eslint_exec'\nto it:\n\n    https://github.com/mantoni/eslint_d.js#editor-integration\n\nSee also: |syntastic-javascript-eslint|, |syntastic-typescript-eslint|,\n|syntastic-vue-eslint|.\n\n------------------------------------------------------------------------------\n2. gjslint                                            *syntastic-html-gjslint*\n\nName:        gjslint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Closure Linter\", or \"gjslint\", is a style linter for JavaScript. It can also\ndetect problems in HTML files. See the project's page for more information:\n\n    https://developers.google.com/closure/utilities/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-javascript-gjslint|.\n\n------------------------------------------------------------------------------\n3. HTML tidy                                             *syntastic-html-tidy*\n\nName:        tidy\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"HTML Tidy\" is a syntax linter and formatter for HTML. See the project's page\nfor more information:\n\n    http://www.html-tidy.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       *'g:syntastic_html_tidy_ignore_errors'*\nType: array of strings\nDefault: []\nList of errors to ignore. Case-sensitive patterns matched as substrings\n(not regular expressions) against the error messages. See also\n|'syntastic_quiet_messages'|.\n\n                                     *'g:syntastic_html_tidy_blocklevel_tags'*\nType: array of strings\nDefault: []\nList of additional blocklevel tags to be added to \"--new-blocklevel-tags\".\n\n                                         *'g:syntastic_html_tidy_inline_tags'*\nType: array of strings\nDefault: []\nList of additional inline tags to be added to \"--new-inline-tags\".\n\n                                          *'g:syntastic_html_tidy_empty_tags'*\nType: array of strings\nDefault: []\nList of additional empty tags, to be added to \"--new-empty-tags\".\n\nSee also: |syntastic-xhtml-tidy|.\n\n------------------------------------------------------------------------------\n4. HTMLHint                                          *syntastic-html-htmlhint*\n\nName:        HTMLHint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"HTMLHint\" is a static code analysis tool for HTML. See the project's page for\ndetails:\n\n    http://htmlhint.com/\n\nSyntastic requires \"HTMLHint\" version 0.9.13 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. jshint                                              *syntastic-html-jshint*\n\nName:        JSHint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"JSHint\" can detect JavaScript errors and potential problems in HTML\nfiles. See the project's page for details:\n\n    http://jshint.com/\n\nSyntastic requires \"JSHint\" version 2.4.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"JSHint\"'s idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default \"JSHint\"'s tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (cf. http://jshint.com/docs/options/#indent). One way to do that is\nto put it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin \"JSHint\". If that is undesirable, your only other option is to leave\n\"JSHint\"'s tabstop alone, and change Vim's 'tabstop' to 4. To change Vim's\n'tabstop', you can add this to your vimrc: >\n    set tabstop=4\n<\nSee also: |syntastic-javascript-jshint|, |syntastic-xhtml-jshint|.\n\n------------------------------------------------------------------------------\n6. proselint                                        *syntastic-html-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-markdown-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n7. stylelint                                        *syntastic-html-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-stylelint|, |syntastic-less-stylelint|,\n|syntastic-scss-stylelint|.\n\n------------------------------------------------------------------------------\n8. textlint                                          *syntastic-html-textlint*\n\nName:        textlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"textlint\" is a natural language linter for text, Markdown, and HTML files.\nSee the project's page for details:\n\n    https://textlint.github.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou need to install both \"textlint\" and the \"textlint HTML\" plugin for this to\nwork:\n\n    https://github.com/textlint/textlint-plugin-html\n\nSee also: |syntastic-markdown-textlint|, |syntastic-text-textlint|.\n\n------------------------------------------------------------------------------\n9. Validator                                        *syntastic-html-validator*\n\nName:        validator\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Validator\" is a non-DTD-based HTML linter.  See the project's page for\ndetails:\n\n    http://validator.github.io/validator/\n\nAs a syntastic linter, you can validate your files against the online service\n(see https://validator.nu/), or you can install \"vnu.jar\":\n\n    https://github.com/validator/validator/releases/latest\n\nthen run it as a HTTP server: >\n    $ java -Xss512k -cp /path/to/vnu.jar nu.validator.servlet.Main 8888\n<\nRequirement~\n\nThis checker uses cURL:\n\n    http://curl.haxx.se/\n\nChecker options~\n\n                                            *'g:syntastic_html_validator_api'*\nType: string\nDefault: \"http://validator.nu/\"\nURL of the service to use for checking. Leave it to the default to run the\nchecks against \"https://validator.nu/\", or set it to \"http://localhost:8888/\"\nif you have \"vnu.jar\" installed, and you're running it as a standalone HTTP\nserver. See:\n\n    http://validator.github.io/validator/#standalone\n\n                                         *'g:syntastic_html_validator_parser'*\nType: string\nDefault: empty\nParser to use. Legal values are: \"xml\", \"xmldtd\", \"html\", \"html5\", \"html4\",\nand \"html4tr\". Set it to \"html5\" to check HTML5 files. References:\n\n    https://wiki.whatwg.org/wiki/Validator.nu_Common_Input_Parameters#parser\n\n                                       *'g:syntastic_html_validator_nsfilter'*\nType: string\nDefault: empty\nSets the \"nsfilter\" for the parser. See:\n\n    https://wiki.whatwg.org/wiki/Validator.nu_Common_Input_Parameters#nsfilter\n\n                                           *'g:syntastic_html_validator_exec'*\nType: string\nDefault: \"curl\"\nPath to the \"cURL\" executable. Override it with a full path if your \"cURL\" is\nnot installed in a standard location.\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_html_validator_<option>' variables. The only exception\nis 'g:syntastic_html_validator_exec', which can be used to override the path\nto the \"cURL\" executable.\n\nNote~\n\nNon-zero exit codes from \"cURL\" are typically network errors, and are signaled\nby syntastic with messages such as: >\n    syntastic: error: checker html/validator returned abnormal status 26\n<\nYou can lookup the meaning of these codes in cURL's manual:\n    \n    http://curl.haxx.se/docs/manpage.html#EXIT\n\n------------------------------------------------------------------------------\n10. W3                                                     *syntastic-html-w3*\n\nName:        w3\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"W3\" is the W3C Markup Validator for HTML.  See the project's page for\ndetails:\n\n    https://validator.w3.org/source/\n\nAs a syntastic linter, you can validate your files against the online service\n(see http://validator.w3.org/), or you can install it from sources and run it\nas a local service:\n\n    https://github.com/w3c/markup-validator/\n\nRequirement~\n\nThis checker uses cURL:\n\n    http://curl.haxx.se/\n\nChecker options~\n\n                                                   *'g:syntastic_html_w3_api'*\nType: string\nDefault: \"http://validator.w3.org/check\"\nURL of the service to use for checking. Leave it to the default to\nrun the checks against \"http://validator.w3.org/\", or set it to\n\"http://localhost/w3c-validator/check\" if you're running a local service.\n\n                                                  *'g:syntastic_html_w3_exec'*\nType: string\nDefault: \"curl\"\nPath to the \"cURL\" executable. Override it with a full path if your \"cURL\" is\nnot installed in a standard location.\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_html_w3_<option>' variables. The only exception is\n'g:syntastic_html_w3_exec', which can be used to override the path to the\n\"cURL\" executable.\n\nNote~\n\nNon-zero exit codes from \"cURL\" are typically network errors, and are signaled\nby syntastic with messages such as: >\n    syntastic: error: checker html/validator returned abnormal status 26\n<\nYou can lookup the meaning of these codes in cURL's manual:\n    \n    http://curl.haxx.se/docs/manpage.html#EXIT\n\n==============================================================================\nSYNTAX CHECKERS FOR JAVA                             *syntastic-checkers-java*\n\nThe following checkers are available for Java (filetype \"java\"):\n\n    1. checkstyle...............|syntastic-java-checkstyle|\n    2. javac....................|syntastic-java-javac|\n\n------------------------------------------------------------------------------\n1. checkstyle                                      *syntastic-java-checkstyle*\n\nName:        checkstyle\nMaintainer:  Dmitry Geurkov <d.geurkov@gmail.com>\n\n\"Checkstyle\" is a style linter for Java.  See the project's page for details:\n\n    http://checkstyle.sourceforge.net/\n\nYou need a working installation of Java Runtime Environment to run\n\"Checkstyle\".\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                     *'g:syntastic_java_checkstyle_classpath'*\nType: string\nDefault: \"checkstyle-6.10.1-all.jar\"\nClasspath to use. Multiple files are allowed.\n\n                                     *'g:syntastic_java_checkstyle_conf_file'*\nType: string\nDefault: \"sun_checks.xml\"\nPath to the configuration file for the \"-c\" option (cf.\nhttp://checkstyle.sourceforge.net/cmdline.html#Command_line_usage).\n\n                                          *'g:syntastic_java_checkstyle_exec'*\nType: string\nDefault: \"java\"\nPath to the \"java\" executable.\n\nNotes~\n\n1. The checker was tested with \"checkstyle\" version 5.5. If you're using\nit with version 5.6 or later you should remove DoubleCheckedLocking from\nyour configuration file:\n\n    http://stackoverflow.com/a/12798807/1658042\n\n2. At the time of this writing, the \"checkstyle\" checker doesn't distinguish\nbetween error severity levels. All messages are treated as errors, regardless\nof their severity defined in the \"checkstyle\" config file.\n\n3. You can specify a property file: >\n    let g:syntastic_java_checkstyle_post_args =\n        \\ [\"-p\", \"/path/to/checkstyle.properties\"]\n<\n4. You probably want to download the \"fat jar\" \"checkstyle-*-all.jar\" and\npoint |'g:syntastic_java_checkstyle_classpath'| to it:\n\n    http://iweb.dl.sourceforge.net/project/checkstyle/checkstyle/\n    http://checkstyle.sourceforge.net/cmdline.html#Usage_by_Classpath_update\n\nCurrent builds at Maven Central do not package \"checkstyle\" with its\ndependencies:\n\n    http://search.maven.org/#search|gav|1|g%3A%22com.puppycrawl.tools%22%20AND%20a%3A%22checkstyle%22\n\nHowever, |'g:syntastic_java_checkstyle_classpath'| accepts multiple files if\nyou want to include the \"checkstyle\" jar and all of its dependencies.\n\n------------------------------------------------------------------------------\n2. javac                                                *syntastic-java-javac*\n\nName:        javac\nMaintainers: Jochen Keil <jochen.keil@gmail.com>\n             Dmitry Geurkov <d.geurkov@gmail.com>\n\nNote~\n\nThis checker is not suitable for use with large Java projects. The design\nof \"javac\" makes this checker prone to running into various limitations of\nyour shell, Vim, and your Java compiler. You are strongly advised to use\nsomething like Eclim (http://eclim.org/) instead of syntastic for projects of\nany substantial size or complexity.\n\nCommands~\n\nThe following commands are available:\n\n                                                *:SyntasticJavacEditClasspath*\nThis opens a new window where you can specify a classpath. Individual paths\nmay be specified one per line, or separated by colons \":\" on UNIX, or by\nsemicolons \";\" on Windows.\n\n                                                   *:SyntasticJavacEditConfig*\nThis command relevant only if |'g:syntastic_java_javac_config_file_enabled'|\nis set. It opens a buffer where you can specify project-specific options from\nthe list below. These options will be saved in a file pointed to by\n|'g:syntastic_java_javac_config_file'| (\".syntastic_javac_config\" by default).\nSet |'g:syntastic_java_javac_config_file'| to a full path to use a\nproject-wide configuration file, rather than a file in the current directory.\nThe settings have to be specified as Vim commands.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                         *'g:syntastic_java_javac_executable'*\nType: string\nDefault: \"javac\"\nCompiler executable used for checking files.\n\n                                         *'g:syntastic_java_maven_executable'*\nType: string\nDefault: \"mvn\"\nMaven executable used for loading classpath for \"maven\" projects.\n\n                                            *'g:syntastic_java_javac_options'*\nType: string\nDefault: \"-Xlint\"\nOptions for \"javac\".\n\n                                          *'g:syntastic_java_javac_classpath'*\nType: string\nDefault: \"\"\nClasspath. It can be changed by running the `:SyntasticJavacEditClasspath`\ncommand.\n\n                                      *'g:syntastic_java_javac_delete_output'*\nType: boolean\nDefault: 1\nWhen set the checker will delete the \".class\" files created by \"javac\".\n\n                           *'g:syntastic_java_javac_autoload_maven_classpath'*\nType: boolean\nDefault: 1\nIf enabled and a file \"pom.xml\" is found in the current working directory,\n\"maven\" is used to load classpath.\n\n                                        *'g:syntastic_java_javac_config_file'*\nType: string\nDefault: \".syntastic_javac_config\"\nPath to the configuration file used by \"javac\". As usual, if a filename is\nspecified rather than a full path, the file is created and looked for in the\ncurrent directory.\n\n                                *'g:syntastic_java_javac_config_file_enabled'*\nType: boolean\nDefault: 0\nWhen enabled, the classpath is written to the file pointed to by\n|'g:syntastic_java_javac_config_file'|. The file is created as needed.\nYou can edit this file with the `:SyntasticJavacEditClasspath` command.\nThe change will take effect next time you run the checker.\n\n                           *'g:syntastic_java_javac_custom_classpath_command'*\nType: string\nDefault: \"\"\nCustom command to run in order to get the classpath. The command classpath\noutput can be in traditional Java form, or specified on separate lines.\n\"%file_path%\", \"%FILE_NAME%\", and \"%FILE_DIR%\" are expanded to the current\nfile's full path, filename, and base directory respectively, all of them\nescaped for use in a shell command.\n\nUsing Ant~\n\nWhen using \"ant\" (http://ant.apache.org/) you can have a custom build target\n(named for example \"path\") that will output your project's classpath. You can\nthen use `:SyntasticJavacEditConfig` and add the following line to use it with\n\"javac\" linter: >\n    let g:syntastic_java_javac_custom_classpath_command =\n        \\ \"ant -q path | grep echo | cut -f2- -d] | tr -d ' ' | tr ':' '\\n'\"\n<\nUsing Gradle~\n\nFor \"Gradle\" projects (http://gradle.org/) you might consider using\n\"gradle-syntastic-plugin\":\n\n    https://github.com/Scuilion/gradle-syntastic-plugin\n\nThis will write the relevant classpath to a file \".syntastic_javac_config\".\n\n==============================================================================\nSYNTAX CHECKERS FOR JAVASCRIPT                 *syntastic-checkers-javascript*\n\nThe following checkers are available for JavaScript (filetype \"javascript\"):\n\n    1. Closure Compiler.........|syntastic-javascript-closurecompiler|\n    2. ESLint...................|syntastic-javascript-eslint|\n    3. Flow.....................|syntastic-javascript-flow|\n    4. gjslint..................|syntastic-javascript-gjslint|\n    5. JavaScript Lint..........|syntastic-javascript-jsl|\n    6. JSCS.....................|syntastic-javascript-jscs|\n    7. JSHint...................|syntastic-javascript-jshint|\n    8. JSLint...................|syntastic-javascript-jslint|\n    9. JSXHint..................|syntastic-javascript-jsxhint|\n    10. mixedindentlint.........|syntastic-javascript-mixedindentlint|\n    11. standard................|syntastic-javascript-standard|\n    12. tern-lint...............|syntastic-javascript-tern_lint|\n\n------------------------------------------------------------------------------\n1. Closure Compiler                     *syntastic-javascript-closurecompiler*\n\nName:        closurecompiler\nMaintainer:  Motohiro Takayama <mootoh@gmail.com>\n\n\"Closure Compiler\" is a compiler for JavaScript maintained by Google. See the\nproject's page for details:\n\n    https://developers.google.com/closure/compiler/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                               *'g:syntastic_javascript_closurecompiler_path'*\nType: string\nDefault: unset\nPath to \"google-closure-compiler.jar\"\n\n                             *'g:syntastic_javascript_closurecompiler_script'*\nType: string\nDefault: unset\nPath to a \"closurecompiler\" executable script.\n\nNote~\n\nIn order to enable the checker you have to set exactly one of the options\nabove. If you have a package manager (such as \"Homebrew\") that installs a\nshell script that runs \"Closure Compiler\", point\n|'g:syntastic_javascript_closurecompiler_script'| to that script. Otherwise\nset |'g:syntastic_javascript_closurecompiler_path'| to point to the \"Closure\nCompiler\" jar file.\n\n------------------------------------------------------------------------------\n2. ESLint                                        *syntastic-javascript-eslint*\n\nName:        eslint\nMaintainer:  Maksim Ryzhikov <rv.maksim@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found in\nECMAScript/JavaScript code. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can also use \"eslint_d\" (https://github.com/mantoni/eslint_d.js),\nversion 2.1.0 or later, instead of \"ESLint\". Just point\n'g:syntastic_javascript_eslint_exec' to it:\n\n    https://github.com/mantoni/eslint_d.js#editor-integration\n\nSee also: |syntastic-html-eslint|, |syntastic-typescript-eslint|,\n|syntastic-vue-eslint|.\n\n------------------------------------------------------------------------------\n3. Flow                                            *syntastic-javascript-flow*\n\nName:        flow\nMaintainer:  Michael Robinson <mike@pagesofinterest.net>\n\n\"Flow\" is a static type linter for JavaScript, written by Facebook. See the\nproject's page for details:\n\n    http://flowtype.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nSyntastic requires \"Flow\" version 0.34.0 or later.\n\nTo use \"Flow\" with your projects, you must:\n\na. Install it:\n\n    https://github.com/flowtype/flow-bin\n\nb. Configure your project:\n>\n    cd /path/to/your/project\n    flow init\n<\nc. Read the docs to find out more. It won't work out of the box.\n\n    http://flowtype.org/docs/existing.html\n\n------------------------------------------------------------------------------\n4. gjslint                                      *syntastic-javascript-gjslint*\n\nName:        gjslint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Closure Linter\", or \"gjslint\", is a style linter for JavaScript. See the\nproject's page for more information:\n\n    https://developers.google.com/closure/utilities/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-gjslint|.\n\n------------------------------------------------------------------------------\n5. JavaScript Lint                                  *syntastic-javascript-jsl*\n\nName:        jsl\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nFor details about \"JavaScript Lint\" see the project's page:\n\n    http://www.javascriptlint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. JSCS                                            *syntastic-javascript-jscs*\n\nName:        jscs\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"JSCS\" is a code style linter for JavaScript. See the project's page for\nmore information:\n\n    https://github.com/mdevils/node-jscs\n\nSyntastic requires \"JSCS\" version 0.2.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n7. JSHint                                        *syntastic-javascript-jshint*\n\nName:        jshint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"JSHint\" is a tool to detect errors and potential problems in JavaScript\nfiles. See the project's page for details:\n\n    http://jshint.com/\n\nSyntastic requires \"JSHint\" version 1.0.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nIf you're checking files containing tab characters then \"JSHint\"'s idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default \"JSHint\"'s tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (cf. http://jshint.com/docs/options/#indent). One way to do that is\nto put it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin \"JSHint\". If that is undesirable, your only other option is to leave\n\"JSHint\"'s tabstop alone, and change Vim's 'tabstop' to 4. To change Vim's\n'tabstop', you can add this to your vimrc: >\n    set tabstop=4\n<\nSee also: |syntastic-html-jshint|, |syntastic-xhtml-jshint|.\n\n------------------------------------------------------------------------------\n8. JSLint                                        *syntastic-javascript-jslint*\n\nName:        jslint\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"JSLint\" is a code quality linter for JavaScript. See the program's page for\ndetails:\n\n    http://www.jslint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nBy default the checker calls \"JSLint\" with these options: >\n    --white --nomen --regexp --plusplus --bitwise --newcap --sloppy --vars\n<\nThis can be changed by setting 'g:syntastic_javascript_jslint_args' in your\nvimrc to your own list of options, for example: >\n    let g:syntastic_javascript_jslint_args = \n        \\ \"--nomen --regexp --browser --devel --windows --sloppy --vars\"\n<\nSetting this variable to the empty string \"\" is allowed, and instructs\nsyntastic to call \"JSLint\" with no options.\n\n------------------------------------------------------------------------------\n9. JSXHint                                      *syntastic-javascript-jsxhint*\n\nName:        JSXHint\nMaintainer:  Thomas Boyt <me@thomasboyt.com>\n\n\"JSXHint\" is a wrapper around JSHint (http://jshint.com/) for\nlinting JSX syntax, which is inline markup-in-JS used by React\n(http://facebook.github.io/react/docs/getting-started.html).\n\nSee the project's page for details:\n\n    https://github.com/strml/jsxhint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g jsxhint\n<\nSyntastic requires \"JSXHint\" version v0.4.1 or later. You also need \"JSHint\"\nv1.1.0 or later.\n\nNote~\n\nSince \"JSXHint\" is a wrapper around JSHint, the following note relevant to\nthe latter still applies:\n\nIf you're checking files containing tab characters then JSHint's idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default JSHint's tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (http://jshint.com/docs/options/#indent). One way to do that is to\nput it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin JSHint. If that is undesirable, your only other option is to leave JSHint's\ntabstop alone, and change Vim's 'tabstop' to 4. To change Vim's 'tabstop', you\ncan add this to your 'vimrc': >\n    set tabstop=4\n<\nAlternative~\n\n\"JSXHint\" will not show JSX-related errors in syntastic, because failed JSX\ncompiles will result in the uncompiled data being passed to JSHint:\n\n    https://github.com/STRML/JSXHint/issues/45\n\nTo get around this, \"Syntastic-React\" can be used as a replacement for\n\"JSXHint\":\n\n    https://github.com/jaxbot/syntastic-react\n\n------------------------------------------------------------------------------\n10. mixedindentlint                     *syntastic-javascript-mixedindentlint*\n\nName:        mixedindentlint\nMaintainer:  Payton Swick <payton@foolord.com>\n\n\"mixedindentlint\" is a general-purpose indentation linter. See the project's\npage at GitHub for more information:\n\n    https://github.com/sirbrillig/mixedindentlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-mixedindentlint|, |syntastic-scss-mixedindentlint|.\n\n------------------------------------------------------------------------------\n11. standard                                   *syntastic-javascript-standard*\n\nName:        standard\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Standard\" is a code style linter for JavaScript.  See the project's page for\nmore information:\n\n    https://github.com/feross/standard\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                   *'g:syntastic_javascript_standard_generic'*\nType: boolean\nDefault: 0\nFlag that can be used to disable version checks for \"standard\".\n\nNote~\n\nMost forks of \"standard\" can also be used with syntastic. Just\nset 'g:syntastic_javascript_standard_generic' to 1, and point\n'g:syntastic_javascript_standard_exec' to the fork's executable.  For\nexample to use happiness (https://github.com/JedWatson/happiness) instead of\n\"standard\": >\n    let g:syntastic_javascript_checkers = [\"standard\"]\n    let g:syntastic_javascript_standard_exec = \"happiness\"\n    let g:syntastic_javascript_standard_generic = 1\n<\n------------------------------------------------------------------------------\n12. tern-lint                                 *syntastic-javascript-tern_lint*\n\nName:        tern_lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"tern-lint\" is a static type linter for JavaScript.  See the project's page\nfor more information:\n\n    https://github.com/angelozerr/tern-lint\n\nSyntastic requires a version of Vim compiled with the |+byte_offset| feature\nto use this checker.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\n\"tern-lint\" recursively scans files starting from (Vim's idea of) the current\ndirectory, regardless of the current file.\n\n==============================================================================\nSYNTAX CHECKERS FOR JSON                             *syntastic-checkers-json*\n\nThe following checkers are available for JSON (filetype \"json\"):\n\n    1. JSONLint.................|syntastic-json-jsonlint|\n    2. jsonval..................|syntastic-json-jsonval|\n\n------------------------------------------------------------------------------\n1. JSONLint                                          *syntastic-json-jsonlint*\n\nName:        jsonlint\nMaintainer:  Miller Medeiros <contact@millermedeiros.com>\n\n\"JSONLint\" is a validator for JSON. See the project's page for details:\n\n    http://jsonlint.com/\n\nInstallation~\n\nInstall it with: >\n    npm install -g jsonlint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. jsonval                                            *syntastic-json-jsonval*\n\nName:        jsonval\nMaintainer:  Miller Medeiros <contact@millermedeiros.com>\n\n\"jsonval\" is a validator for JSON. See the project's page at GitHub for\ndetails:\n\n    https://github.com/dangerousben/jsonval\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR JULIA                           *syntastic-checkers-julia*\n\nThe following checkers are available for Julia (filetype \"julia\"):\n\n    1. lint.....................|syntastic-julia-lint|\n\n------------------------------------------------------------------------------\n1. lint                                                 *syntastic-julia-lint*\n\nName:        lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis is a linter for Julia files (https://julialang.org/), using the Julia\npackage \"Lint\". See the package's documentation for more information:\n\n    http://lintjl.readthedocs.io/\n\nInstallation~\n\nYou need to install Julia itself, and the package \"Lint\". You can install\n\"Lint\" from the Julia package manager, with the command: >\n    Pkg.add(\"Lint\")\n<\nChecker Options~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_julia_lint_<option>' variables. The only exception is\n'g:syntastic_julia_lint_exec', which can still be used to override the \"julia\"\nexecutable.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Julia files, such as\n\"julia-vim\":\n\n    https://github.com/JuliaEditorSupport/julia-vim\n\n==============================================================================\nSYNTAX CHECKERS FOR LESS                             *syntastic-checkers-less*\n\nThe following checkers are available for LESS (filetype \"less\"):\n\n    1. lessc....................|syntastic-less-lessc|\n    2. RECESS...................|syntastic-less-recess|\n    3. stylelint................|syntastic-less-stylelint|\n\n------------------------------------------------------------------------------\n1. lessc                                                *syntastic-less-lessc*\n\nName:        lessc\nMaintainer:  Julien Blanchard <julien@sideburns.eu>\n\n\"lessc\" is a compiler for LESS. See the project's page for details:\n\n    http://lesscss.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n                                            *'g:syntastic_less_use_less_lint'*\nType: boolean\nDefault: 0\nFlag that can be set to instruct syntastic to run \"less-lint\" instead of\n\"less\".\n\n------------------------------------------------------------------------------\n2. RECESS                                              *syntastic-less-recess*\n\nName:        recess\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"RECESS\" is a code quality tool for CSS built on top of LESS. See the\nproject's page for details:\n\n    http://twitter.github.io/recess/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-recess|.\n\n------------------------------------------------------------------------------\n3. stylelint                                        *syntastic-less-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-stylelint|, |syntastic-html-stylelint|,\n|syntastic-scss-stylelint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LEX                               *syntastic-checkers-lex*\n\nThe following checkers are available for Lex (filetype \"lex\"):\n\n    1. flex.....................|syntastic-lex-flex|\n\n------------------------------------------------------------------------------\n1. flex                                                   *syntastic-lex-flex*\n\nName:        flex\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Flex\" is the GNU implementation of the standard UNIX lexical analyzer \"lex\"\n(http://en.wikipedia.org/wiki/Lex_programming_tool). See the project's page\nfor more information:\n\n    http://flex.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LIMBO                           *syntastic-checkers-limbo*\n\nThe following checkers are available for Limbo (filetype \"limbo\"):\n\n    1. Limbo....................|syntastic-limbo-limbo|\n\n------------------------------------------------------------------------------\n1. Limbo                                               *syntastic-limbo-limbo*\n\nName:        limbo\nMaintainer:  Alex Efros <powerman-asdf@ya.ru>\n\n\"Limbo\" is a compiler for the Limbo language\n(http://doc.cat-v.org/inferno/4th_edition/limbo_language/), the\nlanguage used to write applications for the \"Inferno\" operating system\n(http://doc.cat-v.org/inferno/). See the \"Inferno\" project's page for\na reference implementation:\n\n    http://code.google.com/p/inferno-os/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LISP                             *syntastic-checkers-lisp*\n\nThe following checkers are available for LISP (filetype \"lisp\"):\n\n    1. CLISP....................|syntastic-lisp-clisp|\n\n------------------------------------------------------------------------------\n1. CLISP                                                *syntastic-lisp-clisp*\n\nName:        clisp\nMaintainer:  Karl Yngve Lerv\u00e5g <karl.yngve@lervag.net>\n\n\"CLISP\" is an interpreter for LISP programs. See the project's page for\ndetails:\n\n    http://www.clisp.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LLVM                             *syntastic-checkers-llvm*\n\nThe following checkers are available for LLVM (filetype \"llvm\"):\n\n    1. LLVM.....................|syntastic-llvm-llvm|\n\n------------------------------------------------------------------------------\n1. LLVM                                                  *syntastic-llvm-llvm*\n\nName:        llvm\nMaintainer:  Andrew Kelley <superjoe30@gmail.com>\n\n\"LLVM\" is the intermediate language for the LLVM compilers (http://llvm.org/).\nSee the reference manual for details:\n\n    http://llvm.org/docs/LangRef.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR LUA                               *syntastic-checkers-lua*\n\nThe following checkers are available for Lua (filetype \"lua\"):\n\n    1. luac.....................|syntastic-lua-luac|\n    2. luacheck.................|syntastic-lua-luacheck|\n\n------------------------------------------------------------------------------\n1. luac                                                   *syntastic-lua-luac*\n\nName:        luac\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\n\"luac\" is a compiler for Lua. See the tool's manual for details:\n\n    http://www.lua.org/manual/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\n\"luac\" truncates filenames when the full path of the files involved is longer\nthan a certain fixed amount. Syntastic can't detect this situation, and will\nsilently ignore error messages with truncated filenames.\n\n------------------------------------------------------------------------------\n2. luacheck                                           *syntastic-lua-luacheck*\n\nName:        luacheck\nMaintainer:  Thiago Bastos <tbastos@tbastos.com>\n\n\"Luacheck\" is a tool for static analysis of Lua code. See the project's page\nfor details:\n\n    https://github.com/mpeterv/luacheck\n\nIn contrast to \"luac\" (see |syntastic-lua-luac|) which only flags syntax\nerrors, this checker detects code smells, so you probably want to enable both\nwhen available.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nA sensible set of options for LUA projects might be something like this: >\n    let g:syntastic_check_on_open = 1\n    let g:syntastic_lua_checkers = [\"luac\", \"luacheck\"]\n    let g:syntastic_lua_luacheck_args = \"--no-unused-args\" \n<\n==============================================================================\nSYNTAX CHECKERS FOR MARKDOWN                     *syntastic-checkers-markdown*\n\nThe following checkers are available for Markdown (filetype \"markdown\"):\n\n    1. Markdown lint tool.......|syntastic-markdown-mdl|\n    2. proselint................|syntastic-markdown-proselint|\n    3. textlint.................|syntastic-markdown-textlint|\n\n------------------------------------------------------------------------------\n1. Markdown lint tool                                 *syntastic-markdown-mdl*\n\nName:        mdl\nMaintainer:  Charles Beynon <etothepiipower@gmail.com>\n\n\"Markdown lint tool\" is a style linter for Markdown files. See the project's\npage at GitHub for details:\n\n    https://github.com/mivok/markdownlint\n\nInstallation~\n\nInstall it with: >\n    gem install mdl\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can also use the \"Node.js\"-based \"markdownlint-cli\" as a linter instead\nof \"mdl\":\n\n    https://github.com/igorshubovych/markdownlint-cli\n\nTo do that, you have to point 'g:syntastic_markdown_mdl_exec' to\n\"markdownlint\", and set 'g:syntastic_markdown_mdl_args' to an empty string (or\nto a set of valid \"markdownlint-cli\" options): >\n    let g:syntastic_markdown_mdl_exec = \"markdownlint\"\n    let g:syntastic_markdown_mdl_args = \"\"\n<\n------------------------------------------------------------------------------\n2. proselint                                    *syntastic-markdown-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n3. textlint                                      *syntastic-markdown-textlint*\n\nName:        textlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"textlint\" is a natural language linter for text, Markdown, and HTML files.\nSee the project's page for details:\n\n    https://textlint.github.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-textlint|, |syntastic-text-textlint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR MATLAB                         *syntastic-checkers-matlab*\n\nThe following checkers are available for MATLAB (filetype \"matlab\"):\n\n    1. mlint....................|syntastic-matlab-mlint|\n\n------------------------------------------------------------------------------\n1. mlint                                              *syntastic-matlab-mlint*\n\nName:        mlint\nMaintainer:  Jason Graham <jason@the-graham.com>\n\n\"mlint\" is a code linter for MATLAB. The \"mlint\" binary is distributed with\nthe \"MATLAB\" package:\n\n    http://www.mathworks.com/help/matlab/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR MERCURY                       *syntastic-checkers-mercury*\n\nThe following checkers are available for Mercury (filetype \"mercury\"):\n\n    1. mmc......................|syntastic-mercury-mmc|\n\n------------------------------------------------------------------------------\n1. mmc                                                 *syntastic-mercury-mmc*\n\nName:        mmc\nMaintainer:  Joshua Rahm <joshuarahm@gmail.com>\n\n\"mmc\" is a compiler for Mercury. See Mercury's page for more details:\n\n    http://www.mercurylang.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR NASM                             *syntastic-checkers-nasm*\n\nThe following checkers are available for NASM (filetype \"nasm\"):\n\n    1. nasm.....................|syntastic-nasm-nasm|\n\n------------------------------------------------------------------------------\n1. nasm                                                  *syntastic-nasm-nasm*\n\nName:        nasm\nMaintainer:  H\u0102\u013dvard Pettersson <haavard.pettersson@gmail.com>\n\n\"NASM\" is an assembler and disassembler for the Intel x86 architecture. See\nthe project's page for details:\n\n    http://www.nasm.us/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR NIX                               *syntastic-checkers-nix*\n\nThe following checkers are available for Nix (filetype \"nix\"):\n\n    1. Nix......................|syntastic-nix-nix|\n\n------------------------------------------------------------------------------\n1. Nix                                                     *syntastic-nix-nix*\n\nName:        nix\nMaintainer:  Tim Cuthbertson <tim@gfxmonk.net>\n\n\"Nix\" is a linter for language \"Nix\" using \"nix-instantiate\". See the\nproject's page for details:\n\n    http://nixos.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR NROFF                           *syntastic-checkers-nroff*\n\nThe following checkers are available for nroff (filetype \"nroff\"):\n\n    1. Igor.....................|syntastic-nroff-igor|\n    2. mandoc...................|syntastic-nroff-mandoc|\n    3. proselint................|syntastic-nroff-proselint|\n\n------------------------------------------------------------------------------\n1. Igor                                                 *syntastic-nroff-igor*\n\nName:        igor\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Igor\" is a proofreader for DocBook SGML, man pages, and text files used by\nthe FreeBSD project (https://www.freebsd.org/). See the author's presentation\nfor details:\n\n    http://www.youtube.com/watch?v=sczHqUPygZY\n\nThe latest version can be obtained from Glen Barber's repository:\n\n    http://docscripts.glenbarber.us/tags/igor/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-docbk-igor|, |syntastic-text-igor|.\n\n------------------------------------------------------------------------------\n2. mandoc                                             *syntastic-nroff-mandoc*\n\nName:        mandoc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nSee the project's page for details:\n\n    http://mdocml.bsd.lv/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. proselint                                       *syntastic-nroff-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR OBJECTIVE-C                      *syntastic-checkers-objc*\n\nThe following checkers are available for Objective-C (filetype \"objc\"):\n\n    1. GCC......................|syntastic-objc-gcc|\n    2. OClint...................|syntastic-objc-oclint|\n\n------------------------------------------------------------------------------\n1. GCC                                                    *syntastic-objc-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                                 *'g:syntastic_objc_compiler'*\nType: string\nDefault: \"gcc\", or \"clang\" if GCC is not found\nCompiler executable.\n\n                                              *'g:syntastic_objc_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                    *'g:syntastic_objc_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                         *'g:syntastic_objc_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                              *'g:syntastic_objc_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                             *'g:syntastic_objc_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_objc_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                  *'g:syntastic_objc_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                                   *'b:syntastic_objc_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                             *'g:syntastic_objc_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_objc_gcc_<option>' variables. The only exception is\n'g:syntastic_objc_gcc_exec', which can still be used to override the linter's\nexecutable.\n\nSee also: |syntastic-objcpp-gcc|.\n\n------------------------------------------------------------------------------\n2. OClint                                              *syntastic-objc-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-objcpp-oclint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR OBJECTIVE-C++                  *syntastic-checkers-objcpp*\n\nThe following checkers are available for Objective-C++ (filetype \"objcpp\"):\n\n    1. GCC......................|syntastic-objcpp-gcc|\n    2. OClint...................|syntastic-objcpp-oclint|\n\n------------------------------------------------------------------------------\n1. GCC                                                  *syntastic-objcpp-gcc*\n\nName:        gcc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n                                               *'g:syntastic_objcpp_compiler'*\nType: string\nDefault: \"gcc\", or \"clang\" if GCC is not found\nCompiler executable.\n\n                                            *'g:syntastic_objcpp_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                  *'g:syntastic_objcpp_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                       *'g:syntastic_objcpp_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                            *'g:syntastic_objcpp_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                           *'g:syntastic_objcpp_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the above\ncompilation flags. You can set it like this: >\n    let g:syntastic_objcpp_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                *'g:syntastic_objcpp_no_default_include_dirs'*\nType: boolean\nDefault: 0\nBy default syntastic adds a number of common include directories to the\ncompilation flags, namely: >\n    -I. -I.. -Iinclude -Iincludes -I../include -I../includes\n<\nYou can disable this behaviour by setting the above variable to 1.\n\n                                                 *'b:syntastic_objcpp_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\n                                           *'g:syntastic_objcpp_check_header'*\nType: boolean\nDefault: 0\nIf the current file is a header (namely if its extension is \"h\"), all checks\nare silently skipped. You can force syntastic to check header files by\nsetting the above variable to 1.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_objcpp_gcc_<option>' variables. The only exception\nis 'g:syntastic_objcpp_gcc_exec', which can still be used to override the\nlinter's executable.\n\nSee also: |syntastic-objc-gcc|.\n\n------------------------------------------------------------------------------\n2. OClint                                            *syntastic-objcpp-oclint*\n\nName:        oclint\nMaintainer:  \"UnCO\" Lin <undercooled@lavabit.com>\n\n\"OClint\" is a static code analysis tool. See the project's page for details:\n\n    http://oclint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                            'g:syntastic_oclint_config_file'\nType: string\nDefault: unset\nFile containing compilation flags (such as defines or include directories),\none option per line (cf. |syntastic-config-files|).\n\nSee also: |syntastic-objc-oclint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR OCAML                           *syntastic-checkers-ocaml*\n\nThe following checkers are available for OCaml (filetype \"ocaml\"):\n\n    1. camlp4o..................|syntastic-ocaml-camlp4o|\n\n------------------------------------------------------------------------------\n1. camlp4o                                           *syntastic-ocaml-camlp4o*\n\nName:        camlp4o\nMaintainer:  T\u0151r\u0151k Edwin <edwintorok@gmail.com>\n\n\"ocamlc\" is a compiler for Caml. See the project's page for details:\n\n    http://caml.inria.fr/\n\nChecker options~\n                                              *'g:syntastic_ocaml_use_ocamlc'*\nType: boolean\nDefault: 0\nEnable this variable to use \"ocamlc\".\n\n                                     *'g:syntastic_ocaml_use_janestreet_core'*\nType: boolean\nDefault: 0\nIt's possible to use \"ocamlc\" in conjunction with Jane Street's \"core\". In\norder to do that you have to set the above variable.\n\n                                     *'g:syntastic_ocaml_janestreet_core_dir'*\nType: string\nDefault: \".\"\nPath to Jane Street's \"core\".\n\n                                                 *'g:syntastic_ocaml_camlp4r'*\nType: boolean                                                                 \nDefault: 0\nBy default, .ml and .mli files are checked with the \"camlp4o\" preprocessor,\n.mll with \"ocamllex\", and .mly with \"menhir\". If your source code requires\n\"camlp4r\" you can set this variable.\n\n                                          *'g:syntastic_ocaml_use_ocamlbuild'*\nType: boolean                                                                 \nDefault: 0\nWhether to enable typechecking and syntax extensions. This tells syntastic to\nrun \"ocamlbuild <name>.inferred.mli\". It writes object files to the \"_build\"\ndirectory, and possibly rebuilds your \"myocamlbuild.ml\" plugin.  If you are\nusing syntax extensions / external libraries and have a properly set up\n\"_tags\" (and \"myocamlbuild.ml\" file), setting this flag should just work.  For\nbest results your current directory should be the project root (same situation\nif you want useful output from `:make`).\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_ocaml_camlp4o_<option>' variables.\n\nNote~\n\nYou might consider using the linters packaged with Merlin instead of this\none. They provide type errors and let you use packages outside core:\n\n    https://github.com/the-lambda-church/merlin\n\n==============================================================================\nSYNTAX CHECKERS FOR PERL                             *syntastic-checkers-perl*\n\nThe following checkers are available for Perl (filetype \"perl\"):\n\n    1. perl.....................|syntastic-perl-perl|\n    2. Perl::Critic.............|syntastic-perl-perlcritic|\n    3. Pod::Checker.............|syntastic-perl-podchecker|\n\n------------------------------------------------------------------------------\n1. perl                                                  *syntastic-perl-perl*\n\nName:        perl\nMaintainers: Anthony Carapetis <anthony.carapetis@gmail.com>\n             Eric Harmon\n\nSecurity~\n\nThis checker runs \"perl -c\" against your files, which in turn executes any\n\"BEGIN\", \"UNITCHECK\", and \"CHECK\" blocks, and any \"use\" statements in your\nfiles (cf. http://perldoc.perl.org/perlrun.html#*-c*). This is probably fine\nif you wrote the file yourself, but it can be a problem if you're trying to\ncheck third party files. If you are 100% willing to let Vim run the code in\nyour files, set 'g:syntastic_enable_perl_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_perl_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add it to 'g:syntastic_perl_checkers' if you plan\nto use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                              *'g:syntastic_perl_interpreter'*\nType: string\nDefault: \"perl\"\nThe perl interpreter to use.\n\n                                                 *'g:syntastic_perl_lib_path'*\nType: list of strings\nDefault: []\nList of include directories to be added to the perl command line. Example: >\n    let g:syntastic_perl_lib_path = [ \"./lib\", \"./lib/auto\" ]\n<\nNote~\n\nThe variable |'g:syntastic_perl_interpreter'| is shared with the YAML::XS\nchecker (cf. |syntastic-yaml-yamlxs|). If for some reasons you don't want to\nuse the same interpreter for both checkers, you can override it locally by\nsetting 'g:syntastic_perl_perl_exec'.\n\n------------------------------------------------------------------------------\n2. Perl::Critic                                    *syntastic-perl-perlcritic*\n\nName:        perlcritic\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Perl::Critic\" is a static analyzer for Perl. See the project's page for\ndetails:\n\n    http://perlcritic.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                         *'g:syntastic_perl_perlcritic_thres'*\nType: integer\nDefault: 5\nError threshold: policy violations with a severity above this value are\nhighlighted as errors, the others are warnings.\n\nNote~\n\nYou can override the format of \"perlcritic\" messages, for example: >\n    let g:syntastic_perl_perlcritic_post_args =\n        \\ '--verbose \"\\%s:\\%f:\\%l:\\%c: \\%p: \\%m\\n\"'\n<\nJust make sure to leave alone the leading \"\\%s:\\%f:\\%l:\\%c:\".\n\n------------------------------------------------------------------------------\n3. Pod::Checker                                    *syntastic-perl-podchecker*\n\nName:        podchecker\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Pod::Checker\" is a checker for pod documents. See the module's manual for\ndetails:\n\n    http://perldoc.perl.org/Pod/Checker.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-pod-podchecker|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PERL 6                          *syntastic-checkers-perl6*\n\nThe following checkers are available for Perl 6 (filetype \"perl6\"):\n\n    1. perl6....................|syntastic-perl6-perl6|\n\n------------------------------------------------------------------------------\n1. perl6                                               *syntastic-perl6-perl6*\n\nName:        perl6\nMaintainers: Claudio Ramirez <pub.claudio@gmail.com>\n\n\"perl6\" is a checker for Perl 6 files using the \"Rakudo\" compiler. See the\nproject's page for details:\n\n    http://rakudo.org/\n\nSyntastic requires Rakudo Star release 2017.01 or later.\n\nSecurity~\n\nThis checker runs \"perl6 -c\" against your files, which executes any \"BEGIN\"\nand \"CHECK\" blocks (cf. https://docs.perl6.org/programs/00-running). This\nis probably fine if you wrote the files yourself, but it can be a problem if\nyou're trying to check third party files. If you are 100% willing to let Vim\nrun the code in your files, set 'g:syntastic_enable_perl6_checker' to 1 in\nyour vimrc to enable this checker: >\n    let g:syntastic_enable_perl6_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add it to 'g:syntastic_perl6_checkers' if you plan\nto use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at syntastic-config-makeprg.\n\nAdditionally:\n\n                                                *'g:syntastic_perl6_lib_path'*\nType: list of strings\nDefault: []\nList of include directories to be added to the perl6 command line. Example: >\n    let g:syntastic_perl6_lib_path = [ \"./lib\", \"./lib/auto\" ]\n<\nYou can also set the \"PERL6LIB\" environment variable to a colon-separated\nlist of add-hoc include paths. These paths will then be added to the ones\nprescribed by |'g:syntastic_perl6_lib_path'|.\n\nNote~\n\nAt the time of this writing the support for JSON error output of the \"Rakudo\"\ncompiler is still incomplete.\n\n==============================================================================\nSYNTAX CHECKERS FOR PHP                               *syntastic-checkers-php*\n\nThe following checkers are available for PHP (filetype \"php\"):\n\n    1. PHP......................|syntastic-php-php|\n    2. PHP_CodeSniffer..........|syntastic-php-phpcs|\n    3. PHPLint..................|syntastic-php-phplint|\n    4. PHP Mess Detector........|syntastic-php-phpmd|\n    5. PHPStan..................|syntastic-php-phpstan|\n\n------------------------------------------------------------------------------\n1. PHP                                                     *syntastic-php-php*\n\nName:        php\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. PHP_CodeSniffer                                       *syntastic-php-phpcs*\n\nName:        phpcs\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"PHP_CodeSniffer\" is a style linter for PHP and CSS. See the project's page\nat GitHub for details:\n\n    https://github.com/squizlabs/PHP_CodeSniffer/\n\nInstallation~\n\nInstall it with: >\n    pear install PHP_CodeSniffer\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"PHP_CodeSniffer\"'s\nidea of tabstop must match Vim's 'tabstop', otherwise syntastic will highlight\nthe errors at shifted positions. By default syntastic does that by adding\nan option \"--tab-width=&tabstop\" to \"PHP_CodeSniffer\", but that option\nalso instructs \"PHP_CodeSniffer\" to expand tabs, and some code sniffers\n(f.i. \"CakePHP\", see https://github.com/cakephp/cakephp-codesniffer) insist on\nindenting lines with tabs. To work around the resulting mess if you're using\none of these sniffers, set \"--tab-width=0\" and 'tabstop' to 8: >\n    let g:syntastic_php_phpcs_args = \"--tab-width=0\"\n    set tabstop=8\n<\nSee also: |syntastic-css-phpcs|.\n\n------------------------------------------------------------------------------\n3. PHPLint                                             *syntastic-php-phplint*\n\nName:        phplint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"PHPLint\" is a style linter for PHP. See the project's page for details:\n\n    http://www.icosaedro.it/phplint/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. PHP Mess Detector                                     *syntastic-php-phpmd*\n\nName:        phpmd\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"PHP Mess Detector\" is a code analyzer for PHP. See the project's page for\ndetails:\n\n    http://phpmd.org\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. PHP Static Analysis Tool                            *syntastic-php-phpstan*\n\nName:        phpstan\nMaintainer:  Przepompownia <przepompownia@users.noreply.github.com>\n\n\"PHPStan\" focuses on finding errors in your code without actually running it.\nSee the project's page iat GitHub for details:\n\n    https://github.com/phpstan/phpstan\n\nSyntastic supports \"PHPStan\" versions 0.8.5 and later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR POD                               *syntastic-checkers-pod*\n\nThe following checkers are available for POD (filetype \"pod\"):\n\n    1. Pod::Checker.............|syntastic-pod-podchecker|\n    2. proselint................|syntastic-pod-proselint|\n\n------------------------------------------------------------------------------\n1. Pod::Checker                                     *syntastic-pod-podchecker*\n\nName:        podchecker\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Pod::Checker\" is a checker for pod documents.  See the module's manual for\ndetails:\n\n    http://perldoc.perl.org/Pod/Checker.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-perl-podchecker|.\n\n------------------------------------------------------------------------------\n2. proselint                                         *syntastic-pod-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PUG (FORMERLY JADE)               *syntastic-checkers-pug*\n\nThe following checkers are available for Pug (formerly Jade; filetype \"pug\"):\n\n    1. pug_lint.................|syntastic-pug-pug_lint|\n\n------------------------------------------------------------------------------\n1. pug_lint                                           *syntastic-pug-pug_lint*\n\nName:        pug_lint\nMaintainer:  Ben Parnell <benjaminparnell.94@gmail.com>\n\n\"pug-lint\" is a linter and style linter for Pug (formerly known as \"Jade\";\nhttp://jade-lang.com/). See the project's page at GitHub for details:\n\n    https://github.com/pugjs/pug-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PUPPET                         *syntastic-checkers-puppet*\n\nThe following checkers are available for Puppet (filetype \"puppet\"):\n\n    1. puppet...................|syntastic-puppet-puppet|\n    2. puppet-lint..............|syntastic-puppet-puppetlint|\n\n------------------------------------------------------------------------------\n1. puppet                                            *syntastic-puppet-puppet*\n\nName:        puppet\nMaintainer:  Eivind Uggedal <eivind@uggedal.com>\n\n\"Puppet\" is an automated administrative engine for UNIX systems.  See the\nproject's page for details:\n\n    http://projects.puppetlabs.com/projects/puppet\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. puppet-lint                                   *syntastic-puppet-puppetlint*\n\nName:        puppetlint\nMaintainer:  Eivind Uggedal <eivind@uggedal.com>\n\n\"puppet-lint\" is a style linter for puppet manifests\n(http://projects.puppetlabs.com/projects/puppet).  See the project's page for\ndetails:\n\n    http://puppet-lint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR PYTHON                         *syntastic-checkers-python*\n\nThe following checkers are available for Python (filetype \"python\"):\n\n    1. Bandit...................|syntastic-python-bandit|\n    2. flake8...................|syntastic-python-flake8|\n    3. Frosted..................|syntastic-python-frosted|\n    4. mypy.....................|syntastic-python-mypy|\n    5. Prospector...............|syntastic-python-prospector|\n    6. py3kwarn.................|syntastic-python-py3kwarn|\n    7. pycodestyle..............|syntastic-python-pycodestyle|\n    8. pydocstyle...............|syntastic-python-pydocstyle|\n    9. Pyflakes.................|syntastic-python-pyflakes|\n    10. Pylama..................|syntastic-python-pylama|\n    11. Pylint..................|syntastic-python-pylint|\n    12. python..................|syntastic-python-python|\n\n------------------------------------------------------------------------------\n1. Bandit                                            *syntastic-python-bandit*\n\nName:        bandit\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Bandit\" is an AST-based static analyzer for Python from OpenStack Security\nGroup (http://openstack.org). See the project's official documentation for\ndetails:\n\n    https://wiki.openstack.org/wiki/Security/Projects/Bandit\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install bandit\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIn order to check all files in a project, rather than the current file: >\n    let g:syntastic_python_bandit_fname = ['/path/to/project']\n    let g:syntastic_python_bandit_args = '-r'\n<\n------------------------------------------------------------------------------\n2. flake8                                            *syntastic-python-flake8*\n\nName:        flake8\nMaintainers: Sylvain Soliman <Sylvain.Soliman+git@gmail.com>\n             kstep <me@kstep.me>\n\n\"Flake8\" is a wrapper around PyFlakes (https://launchpad.net/pyflakes), pep8\n(https://github.com/jcrocholl/pep8), and Ned Batchelder's McCabe script\n(http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html). \nSee the project's page and the official docs for details:\n\n    https://gitlab.com/pycqa/flake8\n    http://flake8.readthedocs.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. Frosted                                          *syntastic-python-frosted*\n\nName:        frosted\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Frosted\" is a fork of pyflakes (https://launchpad.net/pyflakes). See the\nproject's page for details:\n\n    https://github.com/timothycrosley/frosted\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. mypy                                                *syntastic-python-mypy*\n\nName:        mypy\nMaintainer:  Russ Hewgill <Russ.Hewgill@gmail.com>\n\n\"mypy\" is a static type linter for Python. See the project's page for\ndetails:\n\n    http://www.mypy-lang.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n5. Prospector                                    *syntastic-python-prospector*\n\nName:        prospector\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Prospector\" is a static analysis tool for Python. It brings\ntogether the functionality of other tools such as pylint\n(http://www.pylint.org/), pyflakes (https://launchpad.net/pyflakes),\npep8 (https://github.com/jcrocholl/pep8), pydocstyle (formerly\n\"pep257\"; https://github.com/PyCQA/pydocstyle), and McCabe complexity\n(http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html).\nSee the project's official documentation for details:\n\n    http://prospector.readthedocs.org/en/latest/\n\nSyntastic supports \"Prospector\" versions 0.7 and later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. py3kwarn                                        *syntastic-python-py3kwarn*\n\nName:        py3kwarn\nAuthor: Liam Curry <liam@curry.name>\n\n\"Py3kwarn\" is a code linter for Python that detects incompatibilities with\nPython 3. See the project's page for details:\n\n    https://github.com/liamcurry/py3kwarn\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n7. pycodestyle                                  *syntastic-python-pycodestyle*\n\nName:        pycodestyle\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"pycodestyle\" (formerly \"pep8\") is a style linter for Python, derived from\nthe conventions in PEP 8 (http://www.python.org/dev/peps/pep-0008/). See the\nproject's page for details:\n\n    https://github.com/PyCQA/pycodestyle\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n8. pydocstyle                                    *syntastic-python-pydocstyle*\n\nName:        pydocstyle\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"pydocstyle\" (formerly \"pep257\") is a docstring style linter\nfor Python, derived from the conventions established in PEP 257\n(http://www.python.org/dev/peps/pep-0257/). See the project's page for\ndetails:\n\n    https://github.com/PyCQA/pydocstyle\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n9. Pyflakes                                        *syntastic-python-pyflakes*\n\nName:        pyflakes\nAuthors:     Martin Grenfell <martin.grenfell@gmail.com>\n             kstep <me@kstep.me>\n             Parantapa Bhattacharya <parantapa@gmail.com>\n\n\"Pyflakes\" is a simple code linter for Python.  See the project's page for\nmore information:\n\n    https://launchpad.net/pyflakes\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n10. Pylama                                           *syntastic-python-pylama*\n\nName:        pylama\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Pylama\" is a wrapper around pep8 (https://github.com/jcrocholl/pep8),\npydocstyle (formerly \"pep257\"; https://github.com/PyCQA/pydocstyle),\nPyflakes (https://launchpad.net/pyflakes),\nPylint (http://www.pylint.org/), and Ned Batchelder's McCabe script\n(http://nedbatchelder.com/blog/200803/python_code_complexity_microtool.html).\nSee the project's page for details:\n\n    https://github.com/klen/pylama\n\nNote~\n\nThe Pylint backend requires you to install \"pylama_pylint\":\n\n    https://github.com/klen/pylama_pylint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n11. Pylint                                           *syntastic-python-pylint*\n\nName:        pylint\nAuthor: Parantapa Bhattacharya <parantapa@gmail.com>\n\n\"Pylint\" is a code linter for Python. See the project's page for details:\n\n    http://www.pylint.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nOn OS X you need to set the environment variable \"LC_CTYPE\" to \"UTF-8\"\nbefore running Vim: >\n    LC_CTYPE=en_US.UTF-8\n    export LC_CTYPE\n<\nSeveral people have expressed interest in showing the old message IDs\nalong with the error messages. You can override the message format in\n'g:syntastic_python_pylint_post_args'. Please note that the new format must\nstart with \"{path}:{line}:{column}:{C}: \", otherwise syntastic will not\nrecognise any messages. Example: >\n    let g:syntastic_python_pylint_post_args =\n        \\ '--msg-template=\"{path}:{line}:{column}:{C}: [{symbol} {msg_id}] {msg}\"'\n<\n------------------------------------------------------------------------------\n12. python                                           *syntastic-python-python*\n\nName:        python\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis checker uses Python's builtin \"compile()\" function for detecting syntax\nerrors.\n\nSyntastic requires Python version 2.6 or later.\n\nCodecs~\n\nIn Python you have the ability to specify a particular codec at the top of\nthe file with a special comment that looks something like this: >\n    # coding: spec\n<\nFurther references:\n\n    https://docs.python.org/reference/lexical_analysis.html#encoding-declarations\n\nPython will see this comment at import time and use the corresponding codec to\ntransform the file before using it. The \"python\" checker has an option\n|'g:syntastic_python_python_use_codec'| that will make syntastic aware of such\ncomments before running compiler checks on the file.\n\nPlease note that transforming a file like this affects line numbers and\ncolumn numbers, and syntastic has no way to make the necessary adjustments.\nConsequently, errors might appear on surprising lines if you enable this\nfeature and the transformed file has code on different lines than the raw\nfile. For this reason the use of these transformations should be limited\nto codecs that preserve line numbers, such as the \"spec\" codec provided by\n\"NoseOfYeti\":\n\n    https://noseofyeti.readthedocs.org/en/latest/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                       *'g:syntastic_python_python_use_codec'*\nType: boolean\nDefault: 0\nEnables handling of \"# coding: spec\" comments.\n\n==============================================================================\nSYNTAX CHECKERS FOR QML                               *syntastic-checkers-qml*\n\nThe following checkers are available for QML (filetype \"qml\"):\n\n    1. qmllint..................|syntastic-qml-qmllint|\n\n------------------------------------------------------------------------------\n1. qmllint                                             *syntastic-qml-qmllint*\n\nName:        qmllint\nMaintainer:  Peter Wu <peter@lekensteyn.nl>\n\n\"qmllint\" is a QML syntax verifier. It was introduced with Qt 5.4 (cf.\nhttps://www.kdab.com/kdab-contributions-qt-5-4-qmllint/) as part of Qt\nDeclarative:\n\n    https://code.qt.io/cgit/qt/qtdeclarative.git/tree/tools/qmllint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR R                                   *syntastic-checkers-r*\n\nThe following checkers are available for R (filetype \"r\"):\n\n    1. lintr....................|syntastic-r-lintr|\n    2. svtools..................|syntastic-r-svtools|\n\n------------------------------------------------------------------------------\n1. lintr                                                   *syntastic-r-lintr*\n\nName:        lintr\nMaintainer:  Jim Hester <james.f.hester@gmail.com>\n\n\"lintr\" is a static code analysis tool for R files. See the project's page at\nGitHub for details:\n\n    https://github.com/jimhester/lintr\n\nSecurity~\n\nThis checker executes parts of the files it checks. This is probably fine if\nyou wrote the file yourself, but it can be a problem if you're trying to check\nthird party files. If you are 100% willing to let Vim run the code in your\nfile, set 'g:syntastic_enable_r_lintr_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_r_lintr_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"lintr\" to 'g:syntastic_r_checkers' if you plan\nto use it.\n\nChecker Options~\n                                               *'g:syntastic_r_lintr_linters'*\nType: string\nDefault: \"default_linters\"\nWhich \"lintr\" linters to apply to your code.\n\n                                                 *'g:syntastic_r_lintr_cache'*\nType: string\nDefault: \"FALSE\"\nWhether to use the lintr cache. This speeds up linting time, but can introduce\nfalse positives in some cases.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_r_lintr_<option>' variables. The only exception is\n'g:syntastic_r_lintr_exec', which can still be used to override the \"R\"\nexecutable.\n\nSee also: |syntastic-rmd-lintr|.\n\n------------------------------------------------------------------------------\n2. svtools                                               *syntastic-r-svtools*\n\nName:        svtools\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis is a linter for R files, using the R package \"svTools\":\n\n    http://cran.r-project.org/web/packages/svTools/\n\nIn turn, this package delegates most of the work to the \"checkUsage()\"\nfunction in the \"codetools\" package:\n\n    http://cran.r-project.org/web/packages/codetools/\n\nSecurity~\n\nThis checker executes parts of the files it checks. This is probably fine if\nyou wrote the file yourself, but it can be a problem if you're trying to check\nthird party files. If you are 100% willing to let Vim run the code in your\nfile, set 'g:syntastic_enable_r_svtools_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_r_svtools_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"svtools\" to 'g:syntastic_r_checkers' if you\nplan to use it.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_r_svtools_<option>' variables. The only exception is\n'g:syntastic_r_svtools_exec', which can still be used to override the \"R\"\nexecutable.\n\nLimitations~\n\n\"svTools\" version 0.9-4 (current at the time of this writing) has a number\nof problems that prevents it from checking most sources. You might consider\napplying this patch as a workaround:\n\n    https://gist.github.com/lcd047/9988687#file-svtools-patch\n\nAt the time of this writing \"svTools\" doesn't produce meaningful column\nnumbers (the column numbers are always set to 1). The patch mentioned above\nenables \"svTools\" to produce more useful column numbers, but only for syntax\nerrors. If you apply the said patch and you're checking files containing\ntab characters Vim's 'tabstop' must match \"R\"'s idea of tabstop, otherwise\ncolumn numbers will be shifted. At the time of this writing \"R\"'s tabstop is\nhardcoded to 8, so you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\n==============================================================================\nSYNTAX CHECKERS FOR R MARKDOWN                        *syntastic-checkers-rmd*\n\nThe following checkers are available for R Markdown (filetype \"rmd\"):\n\n    1. lintr....................|syntastic-rmd-lintr|\n\n------------------------------------------------------------------------------\n1. lintr                                                 *syntastic-rmd-lintr*\n\nName:        lintr\nMaintainer:  Jim Hester <james.f.hester@gmail.com>\n\n\"lintr\" is a static code analysis tool for R files.  See the project's page at\nGitHub for details:\n\n    https://github.com/jimhester/lintr\n\nSecurity~\n\nThis checker executes parts of the files it checks. This is probably fine if\nyou wrote the file yourself, but it can be a problem if you're trying to check\nthird party files. If you are 100% willing to let Vim run the code in your\nfile, set 'g:syntastic_enable_r_lintr_checker' to 1 in your vimrc to enable\nthis checker: >\n    let g:syntastic_enable_r_lintr_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover it in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"lintr\" to 'g:syntastic_rmd_checkers' if you\nplan to use it.\n\nChecker Options~\n                                               'g:syntastic_r_lintr_linters'\nType: string\nDefault: \"default_linters\"\nWhich \"lintr\" linters to apply to your code.\n\n                                                 'g:syntastic_r_lintr_cache'\nType: string\nDefault: \"FALSE\"\nWhether to use the lintr cache. This speeds up linting time, but can introduce\nfalse positives in some cases.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_rmd_lintr_<option>' variables. The only exception is\n'g:syntastic_rmd_lintr_exec', which can still be used to override the \"R\"\nexecutable.\n\nSee also: |syntastic-r-lintr|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RACKET                         *syntastic-checkers-racket*\n\nThe following checkers are available for Racket (filetype \"racket\"):\n\n    1. code-ayatollah...........|syntastic-racket-code-ayatollah|\n    2. racket...................|syntastic-racket-racket|\n\n------------------------------------------------------------------------------\n1. code-ayatollah                            *syntastic-racket-code-ayatollah*\n\nName:        code_ayatollah\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nInstallation~\n\nDownload \"code-ayatollah.rkt\" (http://tmp.barzilay.org/code-ayatollah.rkt)\nand point 'g:syntastic_racket_code_ayatollah_script' to it: >\n    let g:syntastic_racket_code_ayatollah_script = \"/path/to/code-ayatollah.rkt\"\n<\nOf course, you also need \"racket\" (http://racket-lang.org/).\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. racket                                            *syntastic-racket-racket*\n\nName:        racket\nMaintainer:  Steve Bragg <steve@empresseffects.com>\n\nSecurity~\n\nThis checker executes the code in the files it checks:\n\n    https://github.com/vim-syntastic/syntastic/issues/1773\n\nThis is probably fine if you wrote the files yourself, but it can be a problem\nif you're trying to check third party files. If you are 100% willing to let\nVim run the code in your files, set 'g:syntastic_enable_racket_racket_checker'\nto 1 in your vimrc to enable this checker: >\n    let g:syntastic_enable_racket_racket_checker = 1\n<\nThere is also a buffer-local version of this variable, that takes precedence\nover a global one in the buffers where it is defined.\n\nPlease note that setting this variable doesn't automatically enable the\nchecker, you still need to add \"racket\" to 'g:syntastic_racket_checkers' if\nyou plan to use it.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RELAX NG                          *syntastic-checkers-rnc*\n\nThe following checkers are available for Relax NG (filetype \"rnc\"):\n\n    1. rnv......................|syntastic-rnc-rnv|\n\n------------------------------------------------------------------------------\n1. rnv                                                     *syntastic-rnc-rnv*\n\nName:        rnv\nMaintainer:  Remko Tron\u00e7on <remko@el-tramo.be>\n\n\"RNV\" is an implementation of Relax NG Compact Syntax validator (cf.\nhttp://relaxng.org/compact-20021121.html). See the project's page for\ndetails:\n\n    http://www.davidashen.net/rnv.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RESTRUCTUREDTEXT                  *syntastic-checkers-rst*\n\nThe following checkers are available for reStructuredText (filetype \"rst\"):\n\n    1. proselint................|syntastic-rst-proselint|\n    2. rst2pseudoxml............|syntastic-rst-rst2pseudoxml|\n    3. rstcheck.................|syntastic-rst-rstcheck|\n    4. Sphinx...................|syntastic-rst-sphinx|\n\n------------------------------------------------------------------------------\n1. proselint                                         *syntastic-rst-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n2. rst2pseudoxml                                 *syntastic-rst-rst2pseudoxml*\n\nName:        rst2pseudoxml\nMaintainer:  James Rowe <jnrowe@gmail.com>\n\n\"rst2pseudoxml\" is part of the Python package Docutils:\n\n    http://docutils.sourceforge.net/\n\nWe use \"rst2pseudoxml\", as it is ever so marginally faster than the other\n\"rst2${x}\" tools in docutils.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. rstcheck                                           *syntastic-rst-rstcheck*\n\nName:        rstcheck\nMaintainer:  Steven Myint <git@stevenmyint.com>\n\n\"rstcheck\" is a linter for reStructuredText files. See the project's page at\nGitHub for details:\n\n    https://github.com/myint/rstcheck\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. Sphinx                                               *syntastic-rst-sphinx*\n\nName:        sphinx\nMaintainer:  Buck Evan <buck@yelp.com>\n\n\"Sphinx\" is a linter for documentation files written in the Sphinx dialect\nof reStructuredText, using the \"pseudoxml\" builder of \"sphinx-build\". See the\nproject's page for details:\n\n    http://sphinx-doc.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                         *'g:syntastic_rst_sphinx_source_dir'*\nType: string\nDefault: unset\nBase directory of the project being checked.\n\n                                         *'g:syntastic_rst_sphinx_config_dir'*\nType: string\nDefault: unset\nDirectory containing the \"conf.py\" file.\n\nNotes~\n\nThe checker needs to know two paths to run: the source directory where the\nproject's files are located, and the directory where the configuration file\n\"conf.py\" is located. By default it looks for \"conf.py\" in the base directory\nof the current file, then upwards in parent directories. If a configuration\nfile is found and the file is readable, its base directory is assumed to be\nboth the source directory and the configuration directory of the project.\n\nIf syntastic can't determine the source directory or the configuration\ndirectory, or if you want to override the autodetected paths, options\n|'g:syntastic_rst_sphinx_source_dir'| and |'g:syntastic_rst_sphinx_config_dir'|\ntake precedence over the detected values.\n\nPlease note also that the checker creates output files in a temporary directory\nthat is created upon the first run in the current session, and is removed when\nVim exits. If you need to change the location of this directory you can do\nso by exporting the environment variables \"TMPDIR\" or \"TMP\" (on UNIX and Mac\nOS-X), or \"TEMP\" (on Windows) before running Vim. Various index files are also\ncached in this directory, so it might be advantageous to avoid quitting Vim\nbetween checker runs.\n\n==============================================================================\nSYNTAX CHECKERS FOR RPM SPEC                         *syntastic-checkers-spec*\n\nThe following checkers are available for Linux RPM packages (filetype \"spec\"):\n\n    1. rpmlint..................|syntastic-spec-rpmlint|\n\n------------------------------------------------------------------------------\n1. rpmlint                                            *syntastic-spec-rpmlint*\n\nName:        rpmlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"rpmlint\" is a tool for checking Linux RPM packages. See the project's page\nfor details:\n\n    http://sourceforge.net/projects/rpmlint/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR RUBY                             *syntastic-checkers-ruby*\n\nThe following checkers are available for Ruby (filetype \"ruby\"):\n\n    1. Flog.....................|syntastic-ruby-flog|\n    2. JRuby....................|syntastic-ruby-jruby|\n    3. MacRuby..................|syntastic-ruby-macruby|\n    4. MRI......................|syntastic-ruby-mri|\n    5. reek.....................|syntastic-ruby-reek|\n    6. RuboCop..................|syntastic-ruby-rubocop|\n    7. Ruby-lint................|syntastic-ruby-rubylint|\n\n------------------------------------------------------------------------------\n1. Flog                                                  *syntastic-ruby-flog*\n\nName:        flog\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"Flog\" is a complexity linter for Ruby files. See the project's page for\ndetails:\n\n    http://ruby.sadi.st/Flog.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                   *'g:syntastic_ruby_flog_threshold_warning'*\nType: number\nDefault: 45\nThreshold for warnings. Functions with complexity below this number are not\nflagged as either errors or warnings.\n\n                                     *'g:syntastic_ruby_flog_threshold_error'*\nType: number\nDefault: 90\nThreshold for errors. Functions with complexity above this number are flagged\nas errors.\n\n\nNote~\n\n\"Flog\" reports complexity values as floating point numbers. If your Vim is\nnot compiled with the \"+float\" feature, both the numbers reported by flog and\nthe two options above are rounded by syntastic towards zero (that is, \"39.9\"\nis taken as \"39\").\n\n------------------------------------------------------------------------------\n2. JRuby                                                *syntastic-ruby-jruby*\n\nName:        jruby\nMaintainer:  Leonid Shevtsov <leonid@shevtsov.me>\n\n\"JRuby\" is a Java implementation of the Ruby programming language. See the\nproject's page for details:\n\n    http://jruby.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. MacRuby                                            *syntastic-ruby-macruby*\n\nName:        macruby\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"MacRuby\" is an implementation of Ruby for Mac OS X. See the project's\npage for details:\n\n    http://www.macruby.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. MRI                                                    *syntastic-ruby-mri*\n\nName:        mri\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                                     *'g:syntastic_ruby_exec'*\nType: string\nDefault: unset\nRuby executable. This is a convenience variable shared with the eRuby checker\n\"Ruby\" (cf. |syntastic-eruby-ruby|). Used only if 'g:syntastic_ruby_mri_exec'\nis unset.\n\n------------------------------------------------------------------------------\n5. Reek                                                  *syntastic-ruby-reek*\n\nName:        reek\nMaintainer:  Mindaugas Moz\u016bras\n\n\"Reek\" is a code smell detection tool for Ruby. See the project's page at\nGitHub for details:\n\n    https://github.com/troessner/reek\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. RuboCop                                            *syntastic-ruby-rubocop*\n\nName:        rubocop\nMaintainer:  Recai Okta\u015f <roktas@bil.omu.edu.tr>\n\n\"RuboCop\" is a style linter for Ruby. See the project's page for details:\n\n    https://github.com/bbatsov/rubocop\n\nSyntastic requires \"RuboCop\" version 0.12.0 or later.\n\nRunning \"RuboCop\" under development versions of \"Ruby\" is explicitly NOT\nsupported.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nMost issues returned by \"rubocop\" are warnings, so for best results your\n|'syntastic_quiet_messages'| should not filter out warnings.\n\nIf the \"RuboCop\" checker is not enabled automatically by syntastic try\nrunning \"rubocop --version\" from the shell. If it complains about \"Parser\"\n(see https://github.com/whitequark/parser) expecting a different version of\n\"Ruby\" than you are running, your configuration is not directly supported by\nsyntastic.\n\nWhile passing around the blame for this does have a certain entertaining\nvalue (cf. https://github.com/bbatsov/rubocop/issues/1819), the problem\nis real, since \"Ruby\" syntax did change between versions. The solution\nis to run a version manager such as \"rbenv\" (http://rbenv.org/) or \"rvm\"\n(https://rvm.io/), that allows you to run multiple versions of \"Ruby\" without\nconflicts: >\n    $ rbenv version\n    2.1.3 (set by /usr/local/var/rbenv/version)\n    \n    $ rubocop --version\n    warning: parser/current is loading parser/ruby21, which recognizes\n    warning: 2.1.2-compliant syntax, but you are running 2.1.3.\n    0.26.1\n    \n    $ rbenv shell 2.1.2\n    \n    $ rubocop --version\n    0.26.1\n<\nAlternatively, if you absolutely must do it the wrong way, you can\nalso install a wrapper script that kills the version warning and point\n'g:syntastic_ruby_rubocop_exec' to it:\n\n    https://gist.github.com/lcd047/96138909015f2f8d2d36\n\n------------------------------------------------------------------------------\n7. Ruby-lint                                         *syntastic-ruby-rubylint*\n\nName:        rubylint\nMaintainer:  Yorick Peterse <yorickpeterse@gmail.com>\n\n\"Ruby-lint\" is a linter and static code analysis tool for Ruby. See the\nproject's page for details:\n\n    https://github.com/YorickPeterse/ruby-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf the \"rubylint\" checker is not enabled automatically by syntastic, try\nrunning \"ruby-lint --version\" from the shell. If it complains about \"Parser\"\n(see https://github.com/whitequark/parser) expecting a different version of\n\"Ruby\" than you are running, your configuration is not directly supported by\nsyntastic.\n\nWhile passing around the blame for this does have a certain entertaining\nvalue (cf. https://github.com/bbatsov/rubocop/issues/1819), the problem\nis real, since \"Ruby\" syntax did change between versions. The solution\nis to run a version manager such as \"rbenv\" (http://rbenv.org/) or \"rvm\"\n(https://rvm.io/), that allows you to run multiple versions of \"Ruby\" without\nconflicts: >\n    $ rbenv version\n    2.1.3 (set by /usr/local/var/rbenv/version)\n    \n    $ ruby-lint --version\n    warning: parser/current is loading parser/ruby21, which recognizes\n    warning: 2.1.2-compliant syntax, but you are running 2.1.3.\n    ruby-lint v2.0.4 on ruby 2.1.3 [i486-linux]\n    \n    $ rbenv shell 2.1.2\n    \n    $ ruby-lint --version\n    ruby-lint v2.0.4 on ruby 2.1.2 [i486-linux]\n<\nAlternatively, if you absolutely must do it the wrong way, you can\nalso install a wrapper script that kills the version warning and point\n'g:syntastic_ruby_rubylint_exec' to it:\n\n    https://gist.github.com/lcd047/492245d9923af45fb964\n\n==============================================================================\nSYNTAX CHECKERS FOR SASS                             *syntastic-checkers-sass*\n\nThe following checkers are available for SASS (filetype \"sass\"):\n\n    1. Sass.....................|syntastic-sass-sass|\n    2. Sass Lint................|syntastic-sass-sass_lint|\n    3. SassC....................|syntastic-sass-sassc|\n\n------------------------------------------------------------------------------\n1. Sass                                                  *syntastic-sass-sass*\n\nName:        sass\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Sass\" is a translator for SASS. See the project's page for details:\n\n    http://sass-lang.com/\n\nInstallation~\n\nInstall it with \"gem\": >\n    gem install sass\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-scss-sass|.\n\n------------------------------------------------------------------------------\n2. Sass Lint                                        *syntastic-sass-sass_lint*\n\nName:        sass_lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Sass Lint\" is a linter for SASS and SCSS files. See the project's page for\ndetails:\n\n    https://github.com/sasstools/sass-lint\n\nSyntastic requires \"Sass Lint\" version 1.5.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-scss-sass_lint|.\n\n------------------------------------------------------------------------------\n3. SassC                                                *syntastic-sass-sassc*\n\nName:        sassc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"SassC\" is a linter for SASS and SCSS files, based on the \"libsass\" library\n(https://github.com/hcatlin/libsass). See the project's page for details:\n\n    https://github.com/hcatlin/sassc\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-scss-sassc|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SCALA                           *syntastic-checkers-scala*\n\nThe following checkers are available for Scala (filetype \"scala\"):\n\n    1. fsc......................|syntastic-scala-fsc|\n    2. scalac...................|syntastic-scala-scalac|\n    3. Scalastyle...............|syntastic-scala-scalastyle|\n\n------------------------------------------------------------------------------\n1. fsc                                                   *syntastic-scala-fsc*\n\nName:        fsc\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. scalac                                             *syntastic-scala-scalac*\n\nName:        scalac\nMaintainer:  Rickey Visinski <rickeyvisinski@gmail.com>\n\n\"scalac\" is a compiler for Scala. See the project's page for more information:\n\n    http://docs.scala-lang.org\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. Scalastyle                                     *syntastic-scala-scalastyle*\n\nName:        scalastyle\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Scalastyle\" is a style linter for Scala. See the project's page for\ndetails:\n\n    http://www.scalastyle.org/\n\nSyntastic uses the command line version of \"Scalastyle\":\n\n    http://www.scalastyle.org/command-line.html\n\nYou need a working installation of Java Runtime Environment to run\n\"Scalastyle\".\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                          *'g:syntastic_scala_scalastyle_jar'*\nType: string\nDefault: \"scalastyle-batch_2.10.jar\"\nPath to the \"scalastyle-batch\" jar file. You might want to set this to a full\npath.\n\n                                  *'g:syntastic_scala_scalastyle_config_file'*\nType: string\nDefault: \"scalastyle_config.xml\"\nPath to the configuration file to use. You might want to also set this to a\nfull path.\n\n                                         *'g:syntastic_scala_scalastyle_exec'*\nType: string\nDefault: \"java\"\nPath to the \"java\" executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR SCSS                             *syntastic-checkers-scss*\n\nThe following checkers are available for SCSS (filetype \"scss\"):\n\n    1. mixedindentlint..........|syntastic-scss-mixedindentlint|\n    2. Sass.....................|syntastic-scss-sass|\n    3. Sass Lint................|syntastic-scss-sass_lint|\n    4. SassC....................|syntastic-scss-sassc|\n    5. SCSS-lint................|syntastic-scss-scss_lint|\n    6. stylelint................|syntastic-scss-stylelint|\n\n------------------------------------------------------------------------------\n1. mixedindentlint                            *syntastic-scss-mixedindentlint*\n\nName:        mixedindentlint\nMaintainer:  Payton Swick <payton@foolord.com>\n\n\"mixedindentlint\" is a general-purpose indentation linter. See the project's\npage at GitHub for more information:\n\n    https://github.com/sirbrillig/mixedindentlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-mixedindentlint|, |syntastic-javascript-mixedindentlint|.\n\n------------------------------------------------------------------------------\n2. Sass                                                  *syntastic-scss-sass*\n\nName:        sass\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Sass\" is a translator for SASS. See the project's page for details:\n\n    http://sass-lang.com/\n\nInstallation~\n\nInstall it with \"gem\": >\n    gem install sass\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-sass-sass|.\n\n------------------------------------------------------------------------------\n3. Sass Lint                                        *syntastic-scss-sass_lint*\n\nName:        sass_lint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Sass Lint\" is a linter for SASS and SCSS files. See the project's page for\ndetails:\n\n    https://github.com/sasstools/sass-lint\n\nSyntastic requires \"Sass Lint\" version 1.5.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-sass-sass_lint|.\n\n------------------------------------------------------------------------------\n4. SassC                                                *syntastic-scss-sassc*\n\nName:        sassc\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\n\"SassC\" is a linter for SASS and SCSS files, based on the \"libsass\" library\n(https://github.com/hcatlin/libsass). See the project's page for details:\n\n    https://github.com/hcatlin/sassc\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-sass-sassc|.\n\n------------------------------------------------------------------------------\n5. SCSS-lint                                        *syntastic-scss-scss_lint*\n\nName:        scss_lint\nMaintainer:  Shane da Silva <shane@dasilva.io>\n\n\"SCSS-Lint\" is a lint tool for SCSS. See the project's page for details:\n\n    https://github.com/brigade/scss-lint\n\nSyntastic requires \"SCSS-Lint\" version 0.29.0 or later.\n\nInstallation~\n\nInstall it with \"gem\": >\n    gem install scss_lint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n6. stylelint                                        *syntastic-scss-stylelint*\n\nName:        stylelint\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"stylelint\" is a style linter for Cascading Stylesheets. See the project's\npage for more information:\n\n    http://stylelint.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-css-stylelint|, |syntastic-html-stylelint|,\n|syntastic-less-stylelint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SH                                 *syntastic-checkers-sh*\n\nThe following checkers are available for Sh (filetype \"sh\"):\n\n    1. Bashate..................|syntastic-sh-bashate|\n    2. checkbashisms............|syntastic-sh-checkbashisms|\n    3. sh.......................|syntastic-sh-sh|\n    4. ShellCheck...............|syntastic-sh-shellcheck|\n\n------------------------------------------------------------------------------\n1. Bashate                                              *syntastic-sh-bashate*\n\nName:        bashate\nMaintainer:  aswna\n\n\"Bashate\" is a style linter for bash scripts used by the OpenStack\n(http://www.openstack.org/). See the project's page at GitHub for details:\n\n    https://github.com/openstack-dev/bashate\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install bashate\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. checkbashisms                                  *syntastic-sh-checkbashisms*\n\nName:        checkbashisms\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"checkbashisms\" is part of the Linux \"devscripts\" package. It can be obtained\nfrom the Debian source archive:\n\n    http://packages.qa.debian.org/d/devscripts.html\n\nFor FreeBSD and OpenBSD you can also install the \"devel/checkbashisms\" port.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n3. sh                                                        *syntastic-sh-sh*\n\nName:        sh\nMaintainer:  Gregor Uhlenheuer <kongo2002@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. ShellCheck                                        *syntastic-sh-shellcheck*\n\nName:        shellcheck\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ShellCheck\" is a static analysis tool for Bourne shell scripts. See the\nproject's page for details:\n\n    http://www.shellcheck.net/about.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SLIM                             *syntastic-checkers-slim*\n\nThe following checkers are available for Slim (filetype \"slim\"):\n\n    1. Slim-Lint................|syntastic-slim-slim_lint|\n    2. Slimrb...................|syntastic-slim-slimrb|\n\n------------------------------------------------------------------------------\n1. Slim-Lint                                        *syntastic-slim-slim_lint*\n\nName:        slim_lint\nMaintainer:  Vasily Kolesnikov <re.vkolesnikov@gmail.com>\n\n\"Slim-Lint\" is a style linter for Slim files (http://slim-lang.com/).  See\nthe project's page at GitHub for details:\n\n    https://github.com/sds/slim-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nInstallation~\n\nYou can install \"Slim-Lint\" with \"gem\": >\n    gem install slim_lint\n<\nNote~\n\nYou probably also need a plugin to set |filetype| for Slim files, such as\n\"vim-slim\":\n\n     https://github.com/slim-template/vim-slim\n\n------------------------------------------------------------------------------\n2. Slimrb                                              *syntastic-slim-slimrb*\n\nName:        slimrb\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"Slimrb\" is a processor for the template language Slim\n(http://slim-lang.com/). See the project's page for details:\n\n    https://github.com/slim-template/slim\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Slim files, such as\n\"vim-slim\":\n\n     https://github.com/slim-template/vim-slim\n\n==============================================================================\nSYNTAX CHECKERS FOR SML                               *syntastic-checkers-sml*\n\nThe following checkers are available for SML (filetype \"sml\"):\n\n    1. smlnj....................|syntastic-sml-smlnj|\n\n------------------------------------------------------------------------------\n1. smlnj                                                 *syntastic-sml-smlnj*\n\nName:        smlnj\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"smlnj\" is a compiler for Standard ML '97. See the project's page for details:\n\n    http://www.smlnj.org/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR SOLIDITY                     *syntastic-checkers-solidity*\n\nThe following checkers are available for Solidity (filetype \"solidity\"):\n\n    1. solc.....................|syntastic-solidity-solc|\n    2. Solhint..................|syntastic-solidity-solhint|\n    3. Solium...................|syntastic-solidity-solium|\n\n------------------------------------------------------------------------------\n1. solc                                              *syntastic-solidity-solc*\n\nName:        solc \nMaintainer:  Jacob Cholewa <jacob@cholewa.dk>\n\n\"solc\" is a compiler for Ethereum's smart-contract language \"Solidity\"\n(https://solidity.readthedocs.io/). See the project's page for details:\n\n    https://github.com/ethereum/solidity\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Solidity files, such as\n\"vim-solidity\":\n\n    https://github.com/tomlion/vim-solidity\n\n------------------------------------------------------------------------------\n2. Solhint                                        *syntastic-solidity-solhint*\n\nName:        solhint\nMaintainer:  Brett Sun <qisheng.brett.sun@gmail.com>\n\n\"Solhint\" is a style linter for \"Solidity\" files. See the project's page for\ndetails:\n\n    https://github.com/protofire/solhint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Solidity files, such as\n\"vim-solidity\":\n\n    https://github.com/tomlion/vim-solidity\n\n------------------------------------------------------------------------------\n3. Solium                                          *syntastic-solidity-solium*\n\nName:        solium\nMaintainer:  Matthijs van den Bos <matthijs@vandenbos.org>\n\n\"Solium\" is a linter for \"Solidity\" files. See the project's page for details:\n\n    https://github.com/duaraghav8/Solium\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Solidity files, such as\n\"vim-solidity\":\n\n    https://github.com/tomlion/vim-solidity\n\n==============================================================================\nSYNTAX CHECKERS FOR SQL                               *syntastic-checkers-sql*\n\nThe following checkers are available for SQL (filetype \"sql\"):\n\n    1. sqlint...................|syntastic-sql-sqlint|\n    2. tsqllint.................|syntastic-sql-tsqllint|\n\n------------------------------------------------------------------------------\n1. sqlint                                               *syntastic-sql-sqlint*\n\nName:        sqlint\nMaintainer:  Steve Purcell <steve@sanityinc.com>\n\n\"sqlint\" is a lint checker for ANSI SQL. See the project's page at GitHub for\ndetails:\n\n    https://github.com/purcell/sqlint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. tsqllint                                           *syntastic-sql-tsqllint*\n\nName:        tsqllint\nMaintainer:  Daniel Walker <dwalker@fifo99.com>\n\n\"tsqllint\" is a lint checker for Transact-SQL scripts. See the project's page\nat GitHub for details:\n\n    https://github.com/tsqllint/tsqllint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR STYLUS                         *syntastic-checkers-stylus*\n\nThe following checkers are available for Stylus (filetype \"stylus\"):\n\n    1. Stylint..................|syntastic-stylus-stylint|\n\n------------------------------------------------------------------------------\n1. Stylint                                          *syntastic-stylus-stylint*\n\nName:        stylint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Stylint\" is a linter for Stylus (http://learnboost.github.io/stylus). See\nthe project's page at GitHub for details:\n\n    https://github.com/SimenB/stylint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou might also find useful the \"vim-stylus\" plugin:\n\n    https://github.com/wavded/vim-stylus\n\n==============================================================================\nSYNTAX CHECKERS FOR TCL                               *syntastic-checkers-tcl*\n\nThe following checkers are available for Tcl (filetype \"tcl\"):\n\n    1. nagelfar.................|syntastic-tcl-nagelfar|\n\n------------------------------------------------------------------------------\n1. nagelfar                                           *syntastic-tcl-nagelfar*\n\nName:        nagelfar\nMaintainer:  James Pickard <james.pickard@gmail.com>\n\n\"Nagelfar\" is a syntax linter for Tcl. See the project's page for details:\n\n    http://nagelfar.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TEX                               *syntastic-checkers-tex*\n\nThe following checkers are available for TeX (filetype \"tex\"):\n\n    1. ChkTeX...................|syntastic-tex-chktex|\n    2. lacheck..................|syntastic-tex-lacheck|\n    3. proselint................|syntastic-tex-proselint|\n\n------------------------------------------------------------------------------\n1. ChkTeX                                               *syntastic-tex-chktex*\n\nName:        chktex\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ChkTeX\" is a linter for TeX and LaTeX. See the project's page for details:\n\n    http://baruch.ev-en.org/proj/chktex/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                           *'g:syntastic_tex_chktex_showmsgs'*\nType: boolean\nDefault: 1\nWhether to show informational messages (\"chktex\" option \"-m\"). By default\ninformational messages are shown as warnings.\n\nNotes~\n\nIf you're checking files containing tab characters, then Vim's 'tabstop'\nmust match \"ChkTeX\"'s idea of tabstop, otherwise column numbers will be\nshifted. At the time of this writing, \"ChkTeX\"'s tabstop is hardcoded to 8,\nso you should probably add something like this to your vimrc: >\n    set tabstop=8\n<\nNote also that because of the way \"ChkTeX\" handles error formats column\nnumbers are not available on Windows when running under \"cmd.exe\".\n\n------------------------------------------------------------------------------\n2. lacheck                                             *syntastic-tex-lacheck*\n\nName:        lacheck\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"lacheck\" is a style linter for LaTeX documents. See the project's page for\ndetails:\n\n    http://www.ctan.org/tex-archive/support/lacheck\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nLimitations~\n\nAt the time of this writing \"lacheck\" can't expand \"\\def\" commands. As a\nresult, most \"\\input\" commands using macros are signaled as errors.\n\n------------------------------------------------------------------------------\n3. proselint                                         *syntastic-tex-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TEXINFO                       *syntastic-checkers-texinfo*\n\nThe following checkers are available for Texinfo (filetype \"texinfo\"):\n\n    1. Makeinfo.................|syntastic-texinfo-makeinfo|\n    2. proselint................|syntastic-texinfo-proselint|\n\n------------------------------------------------------------------------------\n1. Makeinfo                                       *syntastic-texinfo-makeinfo*\n\nName:        makeinfo\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Makeinfo\" is a converter for Texinfo files. It is distributed together with\nthe GNU package \"texinfo\":\n\n    http://www.gnu.org/software/texinfo/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. proselint                                     *syntastic-texinfo-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-tex-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TEXT                             *syntastic-checkers-text*\n\nThe following checkers are available for plain text (filetype \"text\"):\n\n    1. atdtool..................|syntastic-text-atdtool|\n    2. Igor.....................|syntastic-text-igor|\n    3. language-check...........|syntastic-text-language_check|\n    4. proselint................|syntastic-text-proselint|\n    5. textlint.................|syntastic-text-textlint|\n\n------------------------------------------------------------------------------\n1. atdtool                                            *syntastic-text-atdtool*\n\nName:        atdtool\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"atdtool\" is a script that runs a text file through the \"After the Deadline\"\nlanguage service (http://www.afterthedeadline.com/) and returns a list of\nspelling, style, and grammar errors. See the project's page for details:\n\n    https://github.com/lpenz/atdtool\n\nSee also the list of features of \"After the Deadline\":\n\n    http://www.afterthedeadline.com/features.slp\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Igor                                                  *syntastic-text-igor*\n\nName:        igor\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Igor\" is a proofreader for DocBook SGML, man pages, and text files used by\nthe FreeBSD (https://www.freebsd.org/). See the author's presentation for\ndetails:\n\n    http://www.youtube.com/watch?v=sczHqUPygZY\n\nThe latest version can be obtained from Glen Barber's repository:\n\n    http://docscripts.glenbarber.us/tags/igor/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-docbk-igor|, |syntastic-nroff-igor|.\n\n------------------------------------------------------------------------------\n3. language-check                              *syntastic-text-language_check*\n\nName:        language_check\nMaintainer:  Steven Myint <git@stevenmyint.com>\n\n\"language-check\" is a wrapper for the LanguageTool grammar linter\n(https://www.languagetool.org/). See the project's page for details:\n\n    https://github.com/myint/language-check\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n4. proselint                                        *syntastic-text-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-tex-proselint|,\n|syntastic-texinfo-proselint|, |syntastic-xhtml-proselint|.\n\n------------------------------------------------------------------------------\n5. textlint                                          *syntastic-text-textlint*\n\nName:        textlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"textlint\" is a natural language linter for text, Markdown, and HTML files.\nSee the project's page for details:\n\n    https://textlint.github.io/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-html-textlint|, |syntastic-markdown-textlint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TRIG                             *syntastic-checkers-trig*\n\nThe following checkers are available for TriG (filetype \"trig\"):\n\n    1. rapper...................|syntastic-trig-rapper|\n\n------------------------------------------------------------------------------\n1. rapper                                              *syntastic-trig-rapper*\n\nName:        rapper\nMaintainer:  Sebastian Tramp <mail@sebastian.tramp.name>\n\n\"rapper\" is an RDF parsing and serializing utility. See the project's page for\ndetails:\n\n    http://librdf.org/raptor/rapper.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for TriG files, such as\n\"Vim-RDF\":\n\n    https://github.com/niklasl/vim-rdf\n\nSee also: |syntastic-turtle-rapper|.\n\n==============================================================================\nSYNTAX CHECKERS FOR TURTLE                         *syntastic-checkers-turtle*\n\nThe following checkers are available for Turtle (filetype \"turtle\"):\n\n    1. rapper...................|syntastic-turtle-rapper|\n    2. ttl......................|syntastic-turtle-ttl|\n\n------------------------------------------------------------------------------\n1. rapper                                            *syntastic-turtle-rapper*\n\nName:        rapper\nMaintainer:  Sebastian Tramp <mail@sebastian.tramp.name>\n\n\"rapper\" is an RDF parsing and serializing utility. See the project's page\nfor details:\n\n    http://librdf.org/raptor/rapper.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Turtle files, such as\n\"Vim-RDF\":\n\n    https://github.com/niklasl/vim-rdf\n\nSee also: |syntastic-trig-rapper|.\n\n------------------------------------------------------------------------------\n2. ttl                                                  *syntastic-turtle-ttl*\n\nName:        ttl\nMaintainer:  Antoine Reilles <tonio@NetBSD.org>\n\n\"ttl\" is an RDF validator. See the project's page at GitHub for details:\n\n    https://github.com/mmlab/TurtleValidator\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Turtle files, such as\n\"Vim-RDF\":\n\n    https://github.com/niklasl/vim-rdf\n\n==============================================================================\nSYNTAX CHECKERS FOR TWIG                             *syntastic-checkers-twig*\n\nThe following checkers are available for Twig (filetype \"twig\"):\n\n    1. twig-lint................|syntastic-twig-twiglint|\n\n------------------------------------------------------------------------------\n1. twig-lint                                         *syntastic-twig-twiglint*\n\nName:        twiglint\nMaintainer:  Alexander <iam.asm89@gmail.com>\n\n\"twig-lint\" is a lint tool for Twig templates. See the project's page at\nGitHub for details:\n\n    https://github.com/asm89/twig-lint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nFor the standalone executable, add the following to your vimrc file: >\n    let g:syntastic_twig_twiglint_exec = \"php\"\n    let g:syntastic_twig_twiglint_exe = \"php /path/to/twig-lint.phar\"\n<\nFor the \"Composer\" (https://getcomposer.org/) dependency \"twig-lint\" must be\nin your \"$PATH\". No further configuration is needed.\n\n==============================================================================\nSYNTAX CHECKERS FOR TYPESCRIPT                 *syntastic-checkers-typescript*\n\nThe following checkers are available for TypeScript (filetype \"typescript\"):\n\n    1. ESLint...................|syntastic-typescript-eslint|\n    2. TSLint...................|syntastic-typescript-tslint|\n\n------------------------------------------------------------------------------\n1. ESLint                                        *syntastic-typescript-eslint*\n\nName:        eslint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found\nin ECMAScript/JavaScript code. With the \"babel-eslint\" plugin\n(https://github.com/babel/babel-eslint) \"ESLint\" can also be\nused to check TypeScript files. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for TypeScript files, such\nas \"typescript-vim\":\n\n    https://github.com/leafgarland/typescript-vim\n\nSee also: |syntastic-html-eslint|, |syntastic-javascript-eslint|,\n|syntastic-vue-eslint|.\n\n------------------------------------------------------------------------------\n2. TSLint                                        *syntastic-typescript-tslint*\n\nName:        tslint\nMaintainer:  Seon-Wook Park <seon.wook@swook.net>\n\n\"TSLint\" is a lint checker for TypeScript. See the project's page for\ndetails:\n\n    https://github.com/palantir/tslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for TypeScript files, such\nas \"typescript-vim\":\n\n    https://github.com/leafgarland/typescript-vim\n\n==============================================================================\nSYNTAX CHECKERS FOR VALA                             *syntastic-checkers-vala*\n\nThe following checkers are available for Vala (filetype \"vala\"):\n\n    1. Valac....................|syntastic-vala-valac|\n\n------------------------------------------------------------------------------\n1. Valac                                                *syntastic-vala-valac*\n\nName:        valac\nMaintainer:  Konstantin Stepanov (me@kstep.me)\n\n\"valac\" is a compiler for Vala. See the project's page for details:\n\n        https://wiki.gnome.org/Projects/Vala\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                                  *'g:syntastic_vala_modules'*\nType: string or array of strings\nDefault: unset\nSpace-separated list of Vala modules to be passed as \"--pkg\" arguments.\n\n                                                *'g:syntastic_vala_vapi_dirs'*\nType: string or array of strings\nDefault: unset\nSpace-separated list of \"vapi\" directories to be passed as \"--vapidirs\"\narguments.\n\nNotes~\n\nIf |'g:syntastic_vala_modules'| is unset, you can also specify a list of\nmodule to load for the current file by adding a special comment starting with\n\"// modules: \" and containing a space-delimited list of names.\n\nIf |'g:syntastic_vala_vapi_dirs'| is unset, you can also specify a list of\n\"vapi\" directories for the current file by adding a special comment starting\nwith \"// vapidirs:\" and containing a space-delimited list of names.\n\n==============================================================================\nSYNTAX CHECKERS FOR VERILOG                       *syntastic-checkers-verilog*\n\nThe following checkers are available for Verilog (filetype \"verilog\"):\n\n    1. Icarus Verilog...........|syntastic-verilog-iverilog|\n    2. Verilator................|syntastic-verilog-verilator|\n\n------------------------------------------------------------------------------\n1. Icarus Verilog                                 *syntastic-verilog-iverilog*\n\nName:        iverilog\nMaintainer:  Psidium <psiidium@gmail.com>\n\n\"Icarus Verilog\" is a Verilog simulation and synthesis tool. See the\nproject's page for details:\n\n    http://iverilog.icarus.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. Verilator                                     *syntastic-verilog-verilator*\n\nName:        verilator\nMaintainer:  Kocha <kocha.lsifrontend@gmail.com>\n\nChecker options~\n\n                                              *'g:syntastic_verilog_compiler'*\nType: string\nDefault: \"verilator\"\nCompiler executable.\n\n                                           *'g:syntastic_verilog_errorformat'*\nType: string\nDefault: unset\nOverride for the default |'errorformat'|.\n\n                                 *'g:syntastic_verilog_remove_include_errors'*\nType: boolean\nDefault: 0\nBy default, errors in files included from the file being checked are shown.\nSet this variable to 1 to remove messages about errors in included files.\nPlease note that this means syntastic will silently abort checks if there are\nfatal errors in one of the included files.\n\n                                      *'g:syntastic_verilog_compiler_options'*\nType: string\nDefault: unset\nCompilation flags (such as defines or include directories) to be passed to the\nlinter.\n\n                                           *'g:syntastic_verilog_config_file'*\nType: string\nDefault: unset\nFile containing additional compilation flags to be passed to the linter, one\noption per line (cf. |syntastic-config-files|).\n\n                                          *'g:syntastic_verilog_include_dirs'*\nType: array of strings\nDefault: []\nInclude directories to be passed to the linter, in addition to the\nabove compilation flags. You can set it like this: >\n    let g:syntastic_verilog_include_dirs = [\"includes\", \"headers\"]\n<\nand the corresponding \"-Iincludes -Iheaders\" will be added to the compilation\nflags.\n\n                                                *'b:syntastic_verilog_cflags'*\nType: string\nDefault: unset\nBuffer-local variable. Additional compilation flags specific to the current\nbuffer.\n\nNote~\n\nThis checker doesn't call the \"makeprgBuild()\" function, and thus it ignores\nthe usual 'g:syntastic_verilog_verilator_<option>' variables. The only\nexception is 'g:syntastic_verilog_verilator_exec', which can still be used to\noverride the linter's executable.\n\n==============================================================================\nSYNTAX CHECKERS FOR VHDL                             *syntastic-checkers-vhdl*\n\nThe following checkers are available for VHDL (filetype \"vhdl\"):\n\n    1. GHDL.....................|syntastic-vhdl-ghdl|\n    2. vcom.....................|syntastic-vhdl-vcom|\n\n------------------------------------------------------------------------------\n1. GHDL                                                  *syntastic-vhdl-ghdl*\n\nName:        ghdl\nMaintainer:  Jan Wagner <jaydyou@janidom.de>\n\n\"GHDL\" is a VHDL simulator. See the project's page for details:\n\n    http://gna.org/projects/ghdl/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. vcom                                                  *syntastic-vhdl-vcom*\n\nName:        vcom\nMaintainer:  Jim Vogel <jim.e.vogel@gmail.com>\n\n\"vcom\" is compiler for VHDL files distributed with the \"ModelSim\" HDL\nsimulation environment:\n\n    https://www.mentor.com/products/fpga/model/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR VIM HELP                         *syntastic-checkers-help*\n\nThe following checkers are available for Vim help (filetype \"help\"):\n\n    1. proselint................|syntastic-help-proselint|\n\n------------------------------------------------------------------------------\n1. proselint                                        *syntastic-help-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-html-proselint|,\n|syntastic-markdown-proselint|, |syntastic-nroff-proselint|,\n|syntastic-pod-proselint|, |syntastic-rst-proselint|,\n|syntastic-tex-proselint|, |syntastic-texinfo-proselint|,\n|syntastic-text-proselint|, |syntastic-xhtml-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR VIML                              *syntastic-checkers-vim*\n\nThe following checkers are available for VimL (filetype \"vim\"):\n\n    1. Vimlint..................|syntastic-vim-vimlint|\n    2. Vint.....................|syntastic-vim-vint|\n\n------------------------------------------------------------------------------\n1. Vimlint                                             *syntastic-vim-vimlint*\n\nName:        vimlint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Vimlint\" is a lint checker for VimL written in pure VimL, based on Yukihiro\nNakadaira's \"vimlparser\" (https://github.com/ynkdir/vim-vimlparser/). See the\nproject's page for details:\n\n    https://github.com/syngan/vim-vimlint/\n\nInstallation~\n\nYou need to install the Vim plugins \"vim-vimlint\" and \"vim-vimlparser\"\nmentioned above.\n\nChecker Options~\n\n                                               *'g:syntastic_vimlint_options'*\nType: dictionary\nDefault: |EVL102|, |EVL103|, |EVL104|, |EVL105|, |EVL106|, |EVL201|, |EVL204|, and |EVL205|\n    are warnings.\nDictionary of \"Vimlint\" options, with the same syntax as |g:vimlint#config|.\nSee |g:vimlint#config| and |vimlint-errorcode| for more details.\n\n\"Vimlint\" does not call the \"makeprgBuild()\" function, and thus ignores the\nusual 'g:syntastic_vim_vimlint_<option>' variables.\n\nNote~\n\nThe values of |'g:syntastic_vimlint_options'| useful for syntastic are those\nthat ignore or change the severity of some \"EVLxxx\" messages.  For example\nto ignore warnings about unused arguments: >\n    let g:syntastic_vimlint_options = { \"EVL103\": 1 }\n<\nLimitation~\n\nCertain error messages can't be turned off by |'g:syntastic_vimlint_options'|.\nThis is a misfeature of \"Vimlint\" rather than a limitation of syntastic. You\ncan still ignore these messages using the standard mechanism of\n|'syntastic_quiet_messages'|: >\n    let g:syntastic_vim_vimlint_quiet_messages = { \"regex\": '\\v\\[EVL%(105|205)\\]' }\n<\nAt the time of this writing the messages that can't be turned off by setting\n|'g:syntastic_vimlint_options'| are:\n\n    |EVL105| - global variable defined without 'g:'\n    |EVL202| - missing call\n    |EVL203| - parse error in command\n    |EVL205| - missing 'scriptencoding'\n    |EVL901| - unknown type\n    |EVL902| - assert error.\n\n------------------------------------------------------------------------------\n2. Vint                                                   *syntastic-vim-vint*\n\nName:        vint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Vint\" is a lint checker for VimL. See the project's page at GitHub for\ndetails:\n\n    https://github.com/Kuniwak/vint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR VUE.JS                            *syntastic-checkers-vue*\n\nThe following checkers are available for Vue.js (filetype \"vue\"):\n\n    1. ESLint...................|syntastic-vue-eslint|\n    2. pug_lint_vue.............|syntastic-vue-pug_lint_vue|\n\n------------------------------------------------------------------------------\n1. ESLint                                               *syntastic-vue-eslint*\n\nName:        eslint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"ESLint\" is a tool for identifying and reporting on patterns found in\nECMAScript/JavaScript code. It can also detect problems in JavaScript\ncomponents of Vue.js files. See the project's page for details:\n\n    https://github.com/nzakas/eslint\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNotes~\n\nAutomatically fixing errors (option \"--fix\") is not supported.\n\nYou can also use \"eslint_d\" (https://github.com/mantoni/eslint_d.js), version\n2.1.0 or later, instead of \"ESLint\". Just point 'g:syntastic_vue_eslint_exec'\nto it:\n\n    https://github.com/mantoni/eslint_d.js#editor-integration\n\nSee also: |syntastic-html-eslint|, |syntastic-javascript-eslint|,\n|syntastic-typescript-eslint|.\n\n------------------------------------------------------------------------------\n2. pug_lint_vue                                   *syntastic-vue-pug_lint_vue*\n\nName:        pug_lint_vue\nMaintainer:  Tim Carry <tim@pixelastic.com>\n\n\"pug-lint-vue\" is a linter for Pug templates inside of Vue.js components. See\nthe project's page at GitHub for details:\n\n    https://github.com/sourceboat/pug-lint-vue\n\nInstallation~\n\nInstall it with: >\n    npm install -g pug-lint-vue\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for Vue.js files, such as\n\"vim-vue\":\n\n    https://github.com/posva/vim-vue\n\n==============================================================================\nSYNTAX CHECKERS FOR XHTML                           *syntastic-checkers-xhtml*\n\nThe following checkers are available for xHTML (filetype \"xhtml\"):\n\n    1. HTML Tidy................|syntastic-xhtml-tidy|\n    2. jshint...................|syntastic-xhtml-jshint|\n    3. proselint................|syntastic-xhtml-proselint|\n\n------------------------------------------------------------------------------\n1. HTML tidy                                            *syntastic-xhtml-tidy*\n\nName:        tidy\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"HTML Tidy\" is a syntax linter and formatter for HTML. See the HTML Tidy\nLibrary Project for more information:\n\n    http://tidy.sourceforge.net/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                      *'g:syntastic_xhtml_tidy_ignore_errors'*\nType: array of strings\nDefault: []\nList of errors to ignore. Case-sensitive patterns matched as substrings\n(not regular expressions) against the error messages. See also\n|'syntastic_quiet_messages'|.\n\nSee also: |syntastic-html-tidy|.\n\n------------------------------------------------------------------------------\n2. jshint                                             *syntastic-xhtml-jshint*\n\nName:        JSHint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"JSHint\" can detect JavaScript errors and potential problems in HTML\nfiles. See the project's page for details:\n\n    http://jshint.com/\n\nSyntastic requires \"JSHint\" version 2.4.0 or later.\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nIf you're checking files containing tab characters then \"JSHint\"'s idea of\ntabstop must match Vim's 'tabstop', otherwise syntastic will highlight the\nerrors at shifted positions. By default \"JSHint\"'s tabstop is 4, while Vim's\ndefault 'tabstop' is 8.\n\nIn order to change \"JSHint\"'s tabstop you have to change its \"indent\" config\noption (cf. http://jshint.com/docs/options/#indent). One way to do that is\nto put it in a file named \".jshintrc\" in the current directory, the parent\ndirectories, or your home directory. The file is supposed to be in JSON\nformat. For example: >\n    {\n        \"indent\": 8\n    }\n<\nSee JSHint documentation for more details:\n\n    http://jshint.com/docs/\n\nPlease note however that setting \"indent\" also triggers the indentation checks\nin \"JSHint\". If that is undesirable, your only other option is to leave\n\"JSHint\"'s tabstop alone, and change Vim's 'tabstop' to 4. To change Vim's\n'tabstop', you can add this to your vimrc: >\n    set tabstop=4\n<\nSee also: |syntastic-html-jshint|, |syntastic-javascript-jshint|.\n\n------------------------------------------------------------------------------\n3. proselint                                       *syntastic-xhtml-proselint*\n\nName:        proselint\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"proselint\" is a linter for prose. See the page for details:\n\n    http://proselint.com/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-asciidoc-proselint|, |syntastic-help-proselint|,\n|syntastic-html-proselint|, |syntastic-markdown-proselint|,\n|syntastic-nroff-proselint|, |syntastic-pod-proselint|,\n|syntastic-rst-proselint|, |syntastic-tex-proselint|,\n|syntastic-texinfo-proselint|, |syntastic-text-proselint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR XML                               *syntastic-checkers-xml*\n\nThe following checkers are available for XML (filetype \"xml\"):\n\n    1. plutil...................|syntastic-xml-plutil|\n    2. xmllint..................|syntastic-xml-xmllint|\n\n------------------------------------------------------------------------------\n1. plutil                                               *syntastic-xml-plutil*\n\nName:        plutil\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"plutil\" is a linter for OS X and iOS property list files. See the \"plist(5)\"\nand \"plutil(1)\" manual pages for details:\n\n    https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man5/plist.5.html\n    https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/plutil.1.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. xmllint                                             *syntastic-xml-xmllint*\n\nName:        xmllint\nMaintainer:  Sebastian Kusnier <sebastian@kusnier.net>\n\n\"xmllint\" is a linter and transformer tool for XML files, distributed with\nthe \"libxml\" package (http://www.xmlsoft.org/). See the tool's manual for more\ninformation:\n\n    http://xmlsoft.org/xmllint.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou can use a local installation of DTDs to significantly speed up validation\nand allow you to validate XML data without network access. See the\n\"xmlcatalog\" manual, and the catalog documentation for more information:\n\n    http://www.xmlsoft.org/xmlcatalog_man.html\n    http://www.xmlsoft.org/catalog.html\n\nFor an example of a DTD catalog see f.i. \"XMLCatalog\":\n\n    https://github.com/darcyparker/XMLCatalog\n\nIn order to use it with syntastic you'll have to clone it to a local\ndirectory, and point the environment variable \"XML_CATALOG_FILES\" to the file\n\"catalog.xml\" in the said directory: >\n    XML_CATALOG_FILES=/some/path/XMLCatalog/catalog.xml\n    export XML_CATALOG_FILES\n<\nOtherwise \"xmllint\" will try to load XML catalogs from \"/etc/xml/catalog\".\n\nSee also: |syntastic-docbk-xmllint|, |syntastic-xslt-xmllint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR XQUERY                         *syntastic-checkers-xquery*\n\nThe following checkers are available for XQuery (filetype \"xquery\"):\n\n    1. BaseX....................|syntastic-xquery-basex|\n\n------------------------------------------------------------------------------\n1. BaseX                                              *syntastic-xquery-basex*\n\nName:        basex\nMaintainer:  James Wright <james.jw@hotmail.com>\n\n\"BaseX\" is an XML database engine and XPath`/`XQuery processor. See the\nproject's page for details:\n\n    http://basex.org/\n\nInstallation~\n\n1. Install \"BaseX\"\n2. Add the \"basex/bin\" folder to your \"$PATH\".\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR XSLT                             *syntastic-checkers-xslt*\n\nThe following checkers are available for XSLT (filetype \"xslt\"):\n\n    1. xmllint..................|syntastic-xslt-xmllint|\n\n------------------------------------------------------------------------------\n1. xmllint                                            *syntastic-xslt-xmllint*\n\nName:        xmllint\nMaintainer:  Sebastian Kusnier <sebastian@kusnier.net>\n\n\"xmllint\" is a linter and transformer tool for XML files, distributed with\nthe \"libxml\" package (http://www.xmlsoft.org/). See the tool's manual for more\ninformation:\n\n    http://xmlsoft.org/xmllint.html\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nSee also: |syntastic-docbk-xmllint|, |syntastic-xml-xmllint|.\n\n==============================================================================\nSYNTAX CHECKERS FOR YACC                             *syntastic-checkers-yacc*\n\nThe following checkers are available for YACC (filetype \"yacc\"):\n\n    1. Bison....................|syntastic-yacc-bison|\n\n------------------------------------------------------------------------------\n1. Bison                                                *syntastic-yacc-bison*\n\nName:        bison\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\n\"Bison\" is the GNU implementation of the standard UNIX parser generator\n\"yacc\" (http://en.wikipedia.org/wiki/Yacc). See the project's page for more\ninformation:\n\n    http://www.gnu.org/software/bison/\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR YAML                             *syntastic-checkers-yaml*\n\nThe following checkers are available for YAML (filetype \"yaml\"):\n\n    1. JavaScript YAML..........|syntastic-yaml-jsyaml|\n    2. yamllint.................|syntastic-yaml-yamllint|\n    3. YAML::XS.................|syntastic-yaml-yamlxs|\n\n------------------------------------------------------------------------------\n1. JavaScript YAML                                     *syntastic-yaml-jsyaml*\n\nName:        jsyaml\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\n\"JavaScript YAML\" is a parser for YAML. See the project's page at GitHub for\ndetails:\n\n    https://github.com/nodeca/js-yaml\n\nInstallation~\n\nInstall it with \"npm\": >\n    npm install -g js-yaml\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n------------------------------------------------------------------------------\n2. yamllint                                          *syntastic-yaml-yamllint*\n\nName:        yamllint\nMaintainer:  Adrien Verg\u0102\u0160\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n\"yamllint\" is a linter and style checker for YAML.\nSee the project's page at GitHub for details:\n\n    https://github.com/adrienverge/yamllint\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install yamllint\n<\n------------------------------------------------------------------------------\n3. YAML::XS                                            *syntastic-yaml-yamlxs*\n\nName:        yamlxs\nMaintainer:  LCD 47 <lcd047@gmail.com>\n\nThis is a syntax checker for YAML 1.1 using the Perl module \"YAML::XS\":\n\n    https://metacpan.org/pod/YAML::XS\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nAdditionally:\n\n                                              'g:syntastic_perl_interpreter'\nType: string\nDefault: \"perl\"\nThe perl interpreter to use.\n\n                                                 'g:syntastic_perl_lib_path'\nType: list\nDefault: []\nList of include directories to be added to the perl command line. Example: >\n    let g:syntastic_perl_lib_path = [ \"/usr/local/lib/perl5/auto\" ]\n<\nNote~\n\nThe variable |'g:syntastic_perl_interpreter'| is shared with the \"perl\" checker\n(cf. |syntastic-perl-perl|). If for some reasons you don't want to use the same\ninterpreter for both checkers, you can override it locally by setting\n'g:syntastic_yaml_yamlxs_exec'.\n\n==============================================================================\nSYNTAX CHECKERS FOR YANG                             *syntastic-checkers-yang*\n\nThe following checkers are available for YANG data models (filetype \"yang\"):\n\n    1. pyang....................|syntastic-yang-pyang|\n\n------------------------------------------------------------------------------\n1. pyang                                                *syntastic-yang-pyang*\n\nName:        pyang\nMaintainer:  Joshua Downer <joshua.downer@gmail.com>\n\n\"pyang\" is a validator for YANG data models (http://www.yang-central.org/).\nSee the project's page at GitHub for more information:\n\n    https://github.com/mbj4668/pyang\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for YANG files, such as\n\"yang.vim\":\n\n    https://github.com/nathanalderson/yang.vim\n\n==============================================================================\nSYNTAX CHECKERS FOR YARA                             *syntastic-checkers-yara*\n\nThe following checkers are available for YARA rule files (filetype \"yara\"):\n\n    1. yarac....................|syntastic-yara-yarac|\n\n------------------------------------------------------------------------------\n1. yarac                                                *syntastic-yara-yarac*\n\nName:        yarac\nMaintainer:  Albert Song <albb@teamt5.org>\n\n\"yarac\" is the official compiler for YARA rule files. See the project's page\nat GitHub for more information:\n\n    https://github.com/VirusTotal/yara\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need a plugin to set |filetype| for YARA rule files, such as\n\"vim-yara\":\n\n    https://github.com/yaunj/vim-yara\n\n==============================================================================\nSYNTAX CHECKERS FOR Z80                               *syntastic-checkers-z80*\n\nThe following checkers are available for Z80 (filetype \"z80\"):\n\n    1. Z80syntaxchecker.........|syntastic-z80-z80syntaxchecker|\n\n------------------------------------------------------------------------------\n1. Z80syntaxchecker                           *syntastic-z80-z80syntaxchecker*\n\nName:        z80syntaxchecker\nMaintainer:  Romain Giot <giot.romain@gmail.com>\n\n\"Z80syntaxchecker\" is a syntax linter for Z80 assembly files.\n\nInstallation~\n\nTo install \"Z80syntaxchecker\" either install \"pycpcdemotools\"\n(https://github.com/cpcsdk/pycpcdemotools), or copy the following script to a\ndirectory in your \"$PATH\":\n\n    https://raw.githubusercontent.com/rgiot/pycpcdemotools/master/cpcdemotools/source_checker/z80_syntax_checker.py\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nSYNTAX CHECKERS FOR ZOPE PAGE TEMPLATES               *syntastic-checkers-zpt*\n\nThe following checkers are available for Zope Page Templates (filetype \"zpt\"):\n\n    1. zptlint..................|syntastic-zpt-zptlint|\n\n------------------------------------------------------------------------------\n1. zptlint                                             *syntastic-zpt-zptlint*\n\nName:        zptlint\nMaintainer:  claytron <robots@claytron.com>\n\n\"zptlint\" is a linter for Zope Page Templates. See the project's README for\nmore information:\n\n    https://trac.bubblenet.be/browser/bubblenet/pythoncode/zptlint/trunk/README.txt?format=txt\n\nInstallation~\n\nInstall it with \"pip\": >\n    pip install zptlint\n<\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\nNote~\n\nYou probably also need to set |filetype| for Zope Page Templates to \"zpt\".\nYou can do that with an `:autocmd`: >\n    autocmd BufNewFile,BufRead *.pt,*.cpt,*.zpt set filetype=zpt syntax=xml\n<\n==============================================================================\nSYNTAX CHECKERS FOR ZSH                               *syntastic-checkers-zsh*\n\nThe following checkers are available for Zsh (filetype \"zsh\"):\n\n    1. zsh......................|syntastic-zsh-zsh|\n\n------------------------------------------------------------------------------\n1. zsh                                                     *syntastic-zsh-zsh*\n\nName:        zsh\nMaintainer:  Martin Grenfell <martin.grenfell@gmail.com>\n\nChecker options~\n\nThis checker is initialised using the \"makeprgBuild()\" function and thus it\naccepts the standard options described at |syntastic-config-makeprg|.\n\n==============================================================================\nCONFIGURATION FILES                                   *syntastic-config-files*\n\n    Supported checkers..........|syntastic-config-checkers|\n    Naming......................|syntastic-config-naming|\n    Location....................|syntastic-config-location|\n    Format......................|syntastic-config-format|\n\n                                                   *syntastic-config-checkers*\nCurrently, the following checkers can read some of their options from\nsyntastic-specific configuration files:\n\n    ADA~\n        GCC (|syntastic-ada-gcc|)\n\n    Assembly Languages~\n        GCC (|syntastic-asm-gcc|)\n\n    C~\n        AVR-GCC (|syntastic-c-avrgcc|)\n        ClangCheck (|syntastic-c-clang_check|)\n        Clang-Tidy (|syntastic-c-clang_tidy|)\n        Cppcheck (|syntastic-c-cppcheck|)\n        GCC (|syntastic-c-gcc|)\n        OCLint (|syntastic-c-oclint|)\n        Sparse (|syntastic-c-sparse|)\n        Splint (|syntastic-c-splint|)\n\n    COBOL~\n        OpenCOBOL (|syntastic-cobol-cobc|)\n\n    C++~\n        AVR-GCC (|syntastic-cpp-avrgcc|)\n        ClangCheck (|syntastic-cpp-clang_check|)\n        Clang-Tidy (|syntastic-cpp-clang_tidy|)\n        Cppcheck (|syntastic-cpp-cppcheck|)\n        GCC (|syntastic-cpp-gcc|)\n        OCLint (|syntastic-cpp-oclint|)\n        Vera++ (|syntastic-cpp-verapp|)\n\n    D~\n        DMD (|syntastic-d-dmd|)\n\n    Fortran~\n        GNU Fortran (|syntastic-fortran-gfortran|)\n\n    Objective-C~\n        GCC (|syntastic-objc-gcc|)\n        OCLint (|syntastic-objc-oclint|)\n\n    Objective-C++~\n        GCC (|syntastic-objcpp-gcc|)\n        OCLint (|syntastic-objcpp-oclint|)\n\n    Verilog~\n        Verilator (|syntastic-verilog-verilator|)\n\n                                                     *syntastic-config-naming*\nNaming~\n\nDepending on checker, the filename of the corresponding configuration file\ncan be specified by setting either 'g:syntastic_<filetype>_config_file' or\n'g:syntastic_<checker>_config_file'. Refer to the docs for the particular\ncheckers above for the exact names.\n                                                   *syntastic-config-location*\nLocation~\n\nA configuration file is looked up in the directory of the file being checked,\nthen upwards in parent directories.  The search stops either when a file with\nthe right name is found, or when the root of the filesystem is reached.\n\nConsequently, you would normally put a configuration file in the top directory\nof your project, and you would override it when needed with other configuration\nfiles placed in subdirectories.\n                                                     *syntastic-config-format*\nFormat~\n\nThe file is expected to contain one option per line.  Empty lines and lines\nstarting with `#` are removed.  On each line, leading and trailing spaces are\nalso removed.  Each option is then escaped, so you don't have to worry about\nspecial characters.\n\nLines starting with `-I` are assumed to be include paths, and are handled\nspecially.  If the path following an `-I` is relative, it's treated as\nbeing relative to the current configuration file, and is replaced by the\ncorresponding absolute path.  If the path is absolute to begin with, it is\nleft unchanged.\n\nPlease note that, aside from `-I`, syntastic doesn't try to keep track of\noptions with arguments.  If you need to pass f.i. `-aux-info filename` to your\ncompiler you have to write `-aux-info` and `filename` on separate lines in the\nconfiguration file, otherwise syntastic will quote the space and merge them in\na single string, which is probably not what you mean: >\n    -aux-info\n    filename\n<\nIn the same vein, `=` in options not special in any way.  As stated\nabove, everything on a line (except lines starting with `-I`, as noted)\nis considered an \"option\" and escaped.\n\n vim:tw=78:sw=4:ft=help:norl:\n", "\"============================================================================\n\"File:        syntastic.vim\n\"Description: Vim plugin for on the fly syntax checking.\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_plugin') || &compatible\n    finish\nendif\nlet g:loaded_syntastic_plugin = 1\n\nif has('reltime')\n    let g:_SYNTASTIC_START = reltime()\n    lockvar! g:_SYNTASTIC_START\nendif\n\nlet g:_SYNTASTIC_VERSION = '3.8.0-113'\nlockvar g:_SYNTASTIC_VERSION\n\n\" Sanity checks {{{1\n\nif v:version < 700 || (v:version == 700 && !has('patch175'))\n    call syntastic#log#error('need Vim version 7.0.175 or later')\n    finish\nendif\n\nfor s:feature in [\n            \\ 'autocmd',\n            \\ 'eval',\n            \\ 'file_in_path',\n            \\ 'modify_fname',\n            \\ 'quickfix',\n            \\ 'reltime',\n            \\ 'statusline',\n            \\ 'user_commands',\n        \\ ]\n    if !has(s:feature)\n        call syntastic#log#error('need Vim compiled with feature ' . s:feature)\n        finish\n    endif\nendfor\n\nlet s:_running_windows = syntastic#util#isRunningWindows()\nlockvar s:_running_windows\n\nif !exists('g:syntastic_shell')\n    let g:syntastic_shell = &shell\nendif\n\nif s:_running_windows\n    let g:_SYNTASTIC_UNAME = 'Windows'\nelseif executable('uname')\n    try\n        let g:_SYNTASTIC_UNAME = split(syntastic#util#system('uname'), \"\\n\")[0]\n    catch /\\m^Vim\\%((\\a\\+)\\)\\=:E484/\n        call syntastic#log#error(\"can't run external programs (misconfigured shell options?)\")\n        finish\n    catch /\\m^Vim\\%((\\a\\+)\\)\\=:E684/\n        let g:_SYNTASTIC_UNAME = 'Unknown'\n    endtry\nelse\n    let g:_SYNTASTIC_UNAME = 'Unknown'\nendif\nlockvar g:_SYNTASTIC_UNAME\n\n\" XXX Ugly hack to make g:_SYNTASTIC_UNAME available to :SyntasticInfo without\n\" polluting session namespaces\nlet g:syntastic_version =\n    \\ g:_SYNTASTIC_VERSION .\n    \\ ' (Vim ' . v:version . (has('nvim') ? ', Neovim' : '') . ', ' .\n    \\ g:_SYNTASTIC_UNAME .\n    \\ (has('gui') ? ', GUI' : '') . ')'\nlockvar g:syntastic_version\n\n\" }}}1\n\n\" Defaults {{{1\n\nlet g:_SYNTASTIC_DEFAULTS = {\n        \\ 'aggregate_errors':         0,\n        \\ 'always_populate_loc_list': 0,\n        \\ 'auto_jump':                0,\n        \\ 'auto_loc_list':            2,\n        \\ 'check_on_open':            0,\n        \\ 'check_on_wq':              1,\n        \\ 'cursor_columns':           1,\n        \\ 'debug':                    0,\n        \\ 'echo_current_error':       1,\n        \\ 'enable_balloons':          1,\n        \\ 'enable_highlighting':      1,\n        \\ 'enable_signs':             1,\n        \\ 'error_symbol':             '>>',\n        \\ 'exit_checks':              !(s:_running_windows && syntastic#util#var('shell', &shell) =~? '\\m\\<cmd\\.exe$'),\n        \\ 'filetype_map':             {},\n        \\ 'full_redraws':             !(has('gui_running') || has('gui_macvim')),\n        \\ 'id_checkers':              1,\n        \\ 'ignore_extensions':        '\\c\\v^([gx]?z|lzma|bz2)$',\n        \\ 'ignore_files':             [],\n        \\ 'loc_list_height':          10,\n        \\ 'nested_autocommands':      0,\n        \\ 'quiet_messages':           {},\n        \\ 'reuse_loc_lists':          1,\n        \\ 'shell':                    &shell,\n        \\ 'sort_aggregated_errors':   1,\n        \\ 'stl_format':               '[Syntax: line:%F (%t)]',\n        \\ 'style_error_symbol':       'S>',\n        \\ 'style_warning_symbol':     'S>',\n        \\ 'warning_symbol':           '>>'\n    \\ }\nlockvar! g:_SYNTASTIC_DEFAULTS\n\nfor s:key in keys(g:_SYNTASTIC_DEFAULTS)\n    if !exists('g:syntastic_' . s:key)\n        let g:syntastic_{s:key} = copy(g:_SYNTASTIC_DEFAULTS[s:key])\n    endif\nendfor\n\nif exists('g:syntastic_quiet_warnings')\n    call syntastic#log#oneTimeWarn(\"variable g:syntastic_quiet_warnings is deprecated, please use let g:syntastic_quiet_messages = {'level': 'warnings'} instead\")\n    if g:syntastic_quiet_warnings\n        let s:quiet_warnings = get(g:syntastic_quiet_messages, 'type', [])\n        if type(s:quiet_warnings) != type([])\n            let s:quiet_warnings = [s:quiet_warnings]\n        endif\n        call add(s:quiet_warnings, 'warnings')\n        let g:syntastic_quiet_messages['type'] = s:quiet_warnings\n    endif\nendif\n\n\" }}}1\n\n\" Debug {{{1\n\nlet g:_SYNTASTIC_SHELL_OPTIONS = [\n        \\ 'shell',\n        \\ 'shellcmdflag',\n        \\ 'shellpipe',\n        \\ 'shellquote',\n        \\ 'shellredir',\n        \\ 'shelltemp',\n        \\ 'shellxquote'\n    \\ ]\nfor s:feature in [\n        \\ 'autochdir',\n        \\ 'shellslash',\n        \\ 'shellxescape',\n    \\ ]\n\n    if exists('+' . s:feature)\n        call add(g:_SYNTASTIC_SHELL_OPTIONS, s:feature)\n    endif\nendfor\nlockvar! g:_SYNTASTIC_SHELL_OPTIONS\n\n\" debug constants\nlet     g:_SYNTASTIC_DEBUG_TRACE         = 1\nlockvar g:_SYNTASTIC_DEBUG_TRACE\nlet     g:_SYNTASTIC_DEBUG_LOCLIST       = 2\nlockvar g:_SYNTASTIC_DEBUG_LOCLIST\nlet     g:_SYNTASTIC_DEBUG_NOTIFICATIONS = 4\nlockvar g:_SYNTASTIC_DEBUG_NOTIFICATIONS\nlet     g:_SYNTASTIC_DEBUG_AUTOCOMMANDS  = 8\nlockvar g:_SYNTASTIC_DEBUG_AUTOCOMMANDS\nlet     g:_SYNTASTIC_DEBUG_VARIABLES     = 16\nlockvar g:_SYNTASTIC_DEBUG_VARIABLES\nlet     g:_SYNTASTIC_DEBUG_CHECKERS      = 32\nlockvar g:_SYNTASTIC_DEBUG_CHECKERS\n\n\" }}}1\n\nruntime! plugin/syntastic/*.vim\n\nlet s:registry = g:SyntasticRegistry.Instance()\nlet s:notifiers = g:SyntasticNotifiers.Instance()\nlet s:modemap = g:SyntasticModeMap.Instance()\n\nlet s:_check_stack = []\nlet s:_quit_pre = []\n\n\" Commands {{{1\n\n\" @vimlint(EVL103, 1, a:cursorPos)\n\" @vimlint(EVL103, 1, a:cmdLine)\n\" @vimlint(EVL103, 1, a:argLead)\nfunction! s:CompleteCheckerName(argLead, cmdLine, cursorPos) abort \" {{{2\n    let names = []\n\n    let sep_idx = stridx(a:argLead, '/')\n    if sep_idx >= 1\n        let ft = a:argLead[: sep_idx-1]\n        call extend(names, map( s:registry.getNamesOfAvailableCheckers(ft), 'ft . \"/\" . v:val' ))\n    else\n        for ft in s:registry.resolveFiletypes(&filetype)\n            call extend(names, s:registry.getNamesOfAvailableCheckers(ft))\n        endfor\n        call extend(names, map( copy(s:registry.getKnownFiletypes()), 'v:val . \"/\"' ))\n    endif\n\n    return join(names, \"\\n\")\nendfunction \" }}}2\n\" @vimlint(EVL103, 0, a:cursorPos)\n\" @vimlint(EVL103, 0, a:cmdLine)\n\" @vimlint(EVL103, 0, a:argLead)\n\n\n\" @vimlint(EVL103, 1, a:cursorPos)\n\" @vimlint(EVL103, 1, a:cmdLine)\n\" @vimlint(EVL103, 1, a:argLead)\nfunction! s:CompleteFiletypes(argLead, cmdLine, cursorPos) abort \" {{{2\n    return join(s:registry.getKnownFiletypes(), \"\\n\")\nendfunction \" }}}2\n\" @vimlint(EVL103, 0, a:cursorPos)\n\" @vimlint(EVL103, 0, a:cmdLine)\n\" @vimlint(EVL103, 0, a:argLead)\n\ncommand! -bar -nargs=* -complete=custom,s:CompleteCheckerName SyntasticCheck call SyntasticCheck(<f-args>)\ncommand! -bar -nargs=? -complete=custom,s:CompleteFiletypes   SyntasticInfo  call SyntasticInfo(<f-args>)\ncommand! -bar Errors              call SyntasticErrors()\ncommand! -bar SyntasticReset      call SyntasticReset()\ncommand! -bar SyntasticToggleMode call SyntasticToggleMode()\ncommand! -bar SyntasticSetLoclist call SyntasticSetLoclist()\n\ncommand! SyntasticJavacEditClasspath runtime! syntax_checkers/java/*.vim | SyntasticJavacEditClasspath\ncommand! SyntasticJavacEditConfig    runtime! syntax_checkers/java/*.vim | SyntasticJavacEditConfig\n\n\" }}}1\n\n\" Public API {{{1\n\nfunction! SyntasticCheck(...) abort \" {{{2\n    call s:UpdateErrors(bufnr(''), 0, a:000)\n    call syntastic#util#redraw(g:syntastic_full_redraws)\nendfunction \" }}}2\n\nfunction! SyntasticInfo(...) abort \" {{{2\n    call s:modemap.modeInfo(a:000)\n    call s:registry.echoInfoFor(a:000)\n    call s:_explain_skip(a:000)\n    call syntastic#log#debugShowOptions(g:_SYNTASTIC_DEBUG_TRACE, g:_SYNTASTIC_SHELL_OPTIONS)\n    call syntastic#log#debugDump(g:_SYNTASTIC_DEBUG_VARIABLES)\nendfunction \" }}}2\n\nfunction! SyntasticErrors() abort \" {{{2\n    call g:SyntasticLoclist.current().show()\nendfunction \" }}}2\n\nfunction! SyntasticReset() abort \" {{{2\n    call s:ClearCache(bufnr(''))\n    call s:notifiers.refresh(g:SyntasticLoclist.New([]))\nendfunction \" }}}2\n\nfunction! SyntasticToggleMode() abort \" {{{2\n    call s:modemap.toggleMode()\n    call s:ClearCache(bufnr(''))\n    call s:notifiers.refresh(g:SyntasticLoclist.New([]))\n    call s:modemap.echoMode()\nendfunction \" }}}2\n\nfunction! SyntasticSetLoclist() abort \" {{{2\n    call g:SyntasticLoclist.current().setloclist(0)\nendfunction \" }}}2\n\n\" }}}1\n\n\" Autocommands {{{1\n\naugroup syntastic\n    autocmd!\n    autocmd VimEnter    * call s:VimEnterHook()\n    autocmd BufEnter    * call s:BufEnterHook(expand('<afile>', 1))\n    autocmd BufWinEnter * call s:BufWinEnterHook(expand('<afile>', 1))\naugroup END\n\nif g:syntastic_nested_autocommands\n    augroup syntastic\n        autocmd BufReadPost  * nested call s:BufReadPostHook(expand('<afile>', 1))\n        autocmd BufWritePost * nested call s:BufWritePostHook(expand('<afile>', 1))\n    augroup END\nelse\n    augroup syntastic\n        autocmd BufReadPost  * call s:BufReadPostHook(expand('<afile>', 1))\n        autocmd BufWritePost * call s:BufWritePostHook(expand('<afile>', 1))\n    augroup END\nendif\n\nif exists('##QuitPre')\n    \" QuitPre was added in Vim 7.3.544\n    augroup syntastic\n        autocmd QuitPre * call s:QuitPreHook(expand('<afile>', 1))\n    augroup END\nendif\n\nfunction! s:BufReadPostHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    if g:syntastic_check_on_open && buf > 0\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n            \\ 'autocmd: BufReadPost, buffer ' . buf . ' = ' . string(a:fname))\n        if index(s:_check_stack, buf) == -1\n            call add(s:_check_stack, buf)\n        endif\n    endif\nendfunction \" }}}2\n\nfunction! s:BufWritePostHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: BufWritePost, buffer ' . buf . ' = ' . string(a:fname))\n    call s:UpdateErrors(buf, 1, [])\nendfunction \" }}}2\n\nfunction! s:BufEnterHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: BufEnter, buffer ' . buf . ' = ' . string(a:fname) . ', &buftype = ' . string(&buftype))\n    if buf > 0 && getbufvar(buf, '&buftype') ==# ''\n        let idx = index(reverse(copy(s:_check_stack)), buf)\n        if idx >= 0\n            if !has('vim_starting')\n                call remove(s:_check_stack, -idx - 1)\n                call s:UpdateErrors(buf, 1, [])\n            endif\n        elseif &buftype ==# ''\n            call s:notifiers.refresh(g:SyntasticLoclist.current())\n        endif\n    elseif &buftype ==# 'quickfix'\n        \" TODO: this is needed because in recent versions of Vim lclose\n        \" can no longer be called from BufWinLeave\n        \" TODO: at this point there is no b:syntastic_loclist\n        let loclist = filter(copy(getloclist(0)), 'v:val[\"valid\"]')\n        let owner = str2nr(getbufvar(buf, 'syntastic_owner_buffer'))\n        let buffers = syntastic#util#unique(map(loclist, 'v:val[\"bufnr\"]') + (owner ? [owner] : []))\n        if !empty(get(w:, 'syntastic_loclist_set', [])) && !empty(loclist) && empty(filter( buffers, 'syntastic#util#bufIsActive(v:val)' ))\n            call SyntasticLoclistHide()\n        endif\n    endif\nendfunction \" }}}2\n\nfunction! s:BufWinEnterHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: BufWinEnter, buffer ' . buf . ' = ' . string(a:fname) . ', &buftype = ' . string(&buftype))\n    if buf > 0 && getbufvar(buf, '&buftype') ==# ''\n        let idx = index(reverse(copy(s:_check_stack)), buf)\n        if idx >= 0 && !has('vim_starting')\n            call remove(s:_check_stack, -idx - 1)\n            call s:UpdateErrors(buf, 1, [])\n        endif\n    endif\nendfunction \" }}}2\n\nfunction! s:VimEnterHook() abort \" {{{2\n    let buf = bufnr('')\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS,\n        \\ 'autocmd: VimEnter, buffer ' . buf . ' = ' . string(bufname(buf)) . ', &buftype = ' . string(&buftype))\n    let idx = index(reverse(copy(s:_check_stack)), buf)\n    if idx >= 0 && getbufvar(buf, '&buftype') ==# ''\n        call remove(s:_check_stack, -idx - 1)\n        call s:UpdateErrors(buf, 1, [])\n    endif\nendfunction \" }}}2\n\nfunction! s:QuitPreHook(fname) abort \" {{{2\n    let buf = syntastic#util#fname2buf(a:fname)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_AUTOCOMMANDS, 'autocmd: QuitPre, buffer ' . buf . ' = ' . string(a:fname))\n\n    if !syntastic#util#var('check_on_wq')\n        call syntastic#util#setWids()\n        call add(s:_quit_pre, buf . '_' . getbufvar(buf, 'changetick') . '_' . w:syntastic_wid)\n    endif\n\n    if !empty(get(w:, 'syntastic_loclist_set', []))\n        call SyntasticLoclistHide()\n    endif\nendfunction \" }}}2\n\n\" }}}1\n\n\" Main {{{1\n\n\"refresh and redraw all the error info for this buf when saving or reading\nfunction! s:UpdateErrors(buf, auto_invoked, checker_names) abort \" {{{2\n    call syntastic#log#debugShowVariables(g:_SYNTASTIC_DEBUG_TRACE, 'version')\n    call syntastic#log#debugShowOptions(g:_SYNTASTIC_DEBUG_TRACE, g:_SYNTASTIC_SHELL_OPTIONS)\n    call syntastic#log#debugDump(g:_SYNTASTIC_DEBUG_VARIABLES)\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'UpdateErrors' . (a:auto_invoked ? ' (auto)' : '') .\n        \\ ': ' . (len(a:checker_names) ? join(a:checker_names) : 'default checkers'))\n\n    call s:modemap.synch()\n\n    if s:_skip_file(a:buf)\n        return\n    endif\n\n    let run_checks = !a:auto_invoked || s:modemap.doAutoChecking(a:buf)\n    if run_checks\n        call s:CacheErrors(a:buf, a:checker_names)\n        call syntastic#util#setLastTick(a:buf)\n    elseif a:auto_invoked\n        return\n    endif\n\n    let loclist = g:SyntasticLoclist.current(a:buf)\n\n    if exists('*SyntasticCheckHook')\n        call SyntasticCheckHook(loclist.getRaw())\n    endif\n\n    \" populate loclist and jump {{{3\n    let do_jump = syntastic#util#var('auto_jump') + 0\n    if do_jump == 2\n        let do_jump = loclist.getFirstError(1)\n    elseif do_jump == 3\n        let do_jump = loclist.getFirstError()\n    elseif 0 > do_jump || do_jump > 3\n        let do_jump = 0\n    endif\n\n    if syntastic#util#var('always_populate_loc_list') || do_jump\n        call loclist.setloclist(1)\n        if run_checks && do_jump && !loclist.isEmpty()\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_NOTIFICATIONS, 'loclist: jump')\n            execute 'silent! lrewind ' . do_jump\n\n            \" XXX: Vim doesn't call autocmd commands in a predictible\n            \" order, which can lead to missing filetype when jumping\n            \" to a new file; the following is a workaround for the\n            \" resulting brain damage\n            if &filetype ==# ''\n                silent! filetype detect\n            endif\n        endif\n    endif\n    \" }}}3\n\n    call s:notifiers.refresh(loclist)\nendfunction \" }}}2\n\n\"clear the loc list for the buffer\nfunction! s:ClearCache(buf) abort \" {{{2\n    let loclist = g:SyntasticLoclist.current(a:buf)\n    call s:notifiers.reset(loclist)\n    call loclist.destroy()\nendfunction \" }}}2\n\n\"detect and cache all syntax errors in this buffer\nfunction! s:CacheErrors(buf, checker_names) abort \" {{{2\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: ' .\n        \\ (len(a:checker_names) ? join(a:checker_names) : 'default checkers'))\n    call s:ClearCache(a:buf)\n    let newLoclist = g:SyntasticLoclist.New([])\n    call newLoclist.setOwner(a:buf)\n\n    if !s:_skip_file(a:buf)\n        \" debug logging {{{3\n        call syntastic#log#debugShowVariables(g:_SYNTASTIC_DEBUG_TRACE, 'aggregate_errors')\n        if syntastic#util#isRunningWindows()\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$TMP = ' . string($TMP) . ', $TEMP = ' . string($TEMP))\n        else\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$TERM = ' . string($TERM))\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$TMPDIR = ' . string($TMPDIR))\n        endif\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_CHECKERS, '$PATH = ' . string($PATH))\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'getcwd() = ' . string(getcwd()))\n        \" }}}3\n\n        let clist = s:registry.getCheckers(getbufvar(a:buf, '&filetype'), a:checker_names)\n\n        let aggregate_errors =\n            \\ syntastic#util#var('aggregate_errors') || len(syntastic#util#unique(map(copy(clist), 'v:val.getFiletype()'))) > 1\n        let decorate_errors = aggregate_errors && syntastic#util#var('id_checkers')\n        let sort_aggregated_errors = aggregate_errors && syntastic#util#var('sort_aggregated_errors')\n\n        let names = []\n        let unavailable_checkers = 0\n        for checker in clist\n            let cname = checker.getCName()\n            if !checker.isAvailable()\n                call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: Checker ' . cname . ' is not available')\n                let unavailable_checkers += 1\n                continue\n            endif\n\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: Invoking checker: ' . cname)\n\n            let loclist = checker.getLocList()\n\n            if !loclist.isEmpty()\n                if decorate_errors\n                    call loclist.decorate(cname)\n                endif\n                call add(names, cname)\n                if checker.wantSort() && !sort_aggregated_errors\n                    call loclist.sort()\n                    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'sorted:', loclist)\n                endif\n\n                call newLoclist.extend(loclist)\n\n                if !aggregate_errors\n                    break\n                endif\n            endif\n        endfor\n\n        \" set names {{{3\n        if !empty(names)\n            if len(syntastic#util#unique(map( copy(names), 'substitute(v:val, \"\\\\m/.*\", \"\", \"\")' ))) == 1\n                let type = substitute(names[0], '\\m/.*', '', '')\n                let name = join(map( names, 'substitute(v:val, \"\\\\m.\\\\{-}/\", \"\", \"\")' ), ', ')\n                call newLoclist.setName( name . ' ('. type . ')' )\n            else\n                \" checkers from mixed types\n                call newLoclist.setName(join(names, ', '))\n            endif\n        endif\n        \" }}}3\n\n        \" issue warning about no active checkers {{{3\n        if len(clist) == unavailable_checkers\n            if !empty(a:checker_names)\n                if len(a:checker_names) == 1\n                    call syntastic#log#warn('checker ' . a:checker_names[0] . ' is not available')\n                else\n                    call syntastic#log#warn('checkers ' . join(a:checker_names, ', ') . ' are not available')\n                endif\n            else\n                call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'CacheErrors: no checkers available for ' . &filetype)\n            endif\n        endif\n        \" }}}3\n\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'aggregated:', newLoclist)\n        if sort_aggregated_errors\n            call newLoclist.sort()\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'sorted:', newLoclist)\n        endif\n    endif\n\n    call newLoclist.deploy()\nendfunction \" }}}2\n\n\"Emulates the :lmake command. Sets up the make environment according to the\n\"options given, runs make, resets the environment, returns the location list\n\"\n\"a:options can contain the following keys:\n\"    'makeprg'\n\"    'errorformat'\n\"\n\"The corresponding options are set for the duration of the function call. They\n\"are set with :let, so dont escape spaces.\n\"\n\"a:options may also contain:\n\"   'defaults' - a dict containing default values for the returned errors\n\"   'subtype' - all errors will be assigned the given subtype\n\"   'preprocess' - a function to be applied to the error file before parsing errors\n\"   'postprocess' - a list of functions to be applied to the error list\n\"   'cwd' - change directory to the given path before running the checker\n\"   'env' - environment variables to set before running the checker\n\"   'returns' - a list of valid exit codes for the checker\n\" @vimlint(EVL102, 1, l:env_save)\nfunction! SyntasticMake(options) abort \" {{{2\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, 'SyntasticMake: called with options:', a:options)\n\n    \" save options and locale env variables {{{3\n    let old_local_errorformat = &l:errorformat\n    let old_errorformat = &errorformat\n    let old_cwd = getcwd()\n    \" }}}3\n\n    if has_key(a:options, 'errorformat')\n        let &errorformat = a:options['errorformat']\n        set errorformat<\n    endif\n\n    if has_key(a:options, 'cwd')\n        execute 'lcd ' . fnameescape(a:options['cwd'])\n    endif\n\n    \" set environment variables {{{3\n    let env_save = {}\n    if has_key(a:options, 'env') && len(a:options['env'])\n        for key in keys(a:options['env'])\n            if key =~? '\\m^[a-z_][a-z0-9_]*$'\n                execute 'let env_save[' . string(key) . '] = $' . key\n                execute 'let $' . key . ' = ' . string(a:options['env'][key])\n            endif\n        endfor\n    endif\n    \" }}}3\n\n    let err_lines = split(syntastic#util#system(a:options['makeprg']), \"\\n\", 1)\n\n    \" restore environment variables {{{3\n    if len(env_save)\n        for key in keys(env_save)\n            execute 'let $' . key . ' = ' . string(env_save[key])\n        endfor\n    endif\n    \" }}}3\n\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'checker output:', err_lines)\n\n    \" Does it still make sense to go on?\n    let bailout =\n        \\ syntastic#util#var('exit_checks') &&\n        \\ has_key(a:options, 'returns') &&\n        \\ index(a:options['returns'], v:shell_error) == -1\n\n    if !bailout\n        if has_key(a:options, 'Preprocess')\n            let err_lines = call(a:options['Preprocess'], [err_lines])\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'preprocess (external):', err_lines)\n        elseif has_key(a:options, 'preprocess')\n            let err_lines = call('syntastic#preprocess#' . a:options['preprocess'], [err_lines])\n            call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'preprocess:', err_lines)\n        endif\n        noautocmd lgetexpr err_lines\n\n        let errors = deepcopy(getloclist(0))\n\n        if has_key(a:options, 'cwd')\n            execute 'lcd ' . fnameescape(old_cwd)\n        endif\n\n        try\n            silent lolder\n        catch /\\m^Vim\\%((\\a\\+)\\)\\=:E380/\n            \" E380: At bottom of quickfix stack\n            call setloclist(0, [], 'r')\n            try\n                \" Vim 7.4.2200 or later\n                call setloclist(0, [], 'r', { 'title': '' })\n            catch /\\m^Vim\\%((\\a\\+)\\)\\=:E\\%(118\\|731\\)/\n                \" do nothing\n            endtry\n        catch /\\m^Vim\\%((\\a\\+)\\)\\=:E776/\n            \" E776: No location list\n            \" do nothing\n        endtry\n    else\n        let errors = []\n    endif\n\n    \" restore options {{{3\n    let &errorformat = old_errorformat\n    let &l:errorformat = old_local_errorformat\n    \" }}}3\n\n    if !s:_running_windows && (s:_os_name() =~? 'FreeBSD' || s:_os_name() =~? 'OpenBSD')\n        call syntastic#util#redraw(g:syntastic_full_redraws)\n    endif\n\n    if bailout\n        call syntastic#log#ndebug(g:_SYNTASTIC_DEBUG_LOCLIST, 'checker output:', err_lines)\n        throw 'Syntastic: checker error'\n    endif\n\n    call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'raw loclist:', errors)\n\n    if has_key(a:options, 'defaults')\n        call s:_add_to_errors(errors, a:options['defaults'])\n    endif\n\n    \" Add subtype info if present.\n    if has_key(a:options, 'subtype')\n        call s:_add_to_errors(errors, { 'subtype': a:options['subtype'] })\n    endif\n\n    if has_key(a:options, 'Postprocess') && !empty(a:options['Postprocess'])\n        for rule in a:options['Postprocess']\n            let errors = call(rule, [errors])\n        endfor\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'postprocess (external):', errors)\n    elseif has_key(a:options, 'postprocess') && !empty(a:options['postprocess'])\n        for rule in a:options['postprocess']\n            let errors = call('syntastic#postprocess#' . rule, [errors])\n        endfor\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_LOCLIST, 'postprocess:', errors)\n    endif\n\n    return errors\nendfunction \" }}}2\n\" @vimlint(EVL102, 0, l:env_save)\n\n\"return a string representing the state of buffer according to\n\"g:syntastic_stl_format\n\"\n\"return '' if no errors are cached for the buffer\nfunction! SyntasticStatuslineFlag() abort \" {{{2\n    return g:SyntasticLoclist.current().getStatuslineFlag()\nendfunction \" }}}2\n\n\" }}}1\n\n\" Utilities {{{1\n\nfunction! s:_ignore_file(filename) abort \" {{{2\n    let fname = fnamemodify(a:filename, ':p')\n    for pattern in g:syntastic_ignore_files\n        if fname =~# pattern\n            return 1\n        endif\n    endfor\n    return 0\nendfunction \" }}}2\n\nfunction! s:_is_quitting(buf) abort \" {{{2\n    let quitting = 0\n    if exists('w:syntastic_wid')\n        let key = a:buf . '_' . getbufvar(a:buf, 'changetick') . '_' . w:syntastic_wid\n        let idx = index(s:_quit_pre, key)\n        if idx >= 0\n            call remove(s:_quit_pre, idx)\n            let quitting = 1\n        endif\n    endif\n\n    return quitting\nendfunction \" }}}2\n\n\" Skip running in special buffers\nfunction! s:_skip_file(buf) abort \" {{{2\n    let fname = bufname(a:buf)\n    let skip = s:_is_quitting(a:buf) || getbufvar(a:buf, 'syntastic_skip_checks') ||\n        \\ (getbufvar(a:buf, '&buftype') !=# '') || !filereadable(fname) || getwinvar(0, '&diff') ||\n        \\ getwinvar(0, '&previewwindow') || s:_ignore_file(fname) ||\n        \\ fnamemodify(fname, ':e') =~? g:syntastic_ignore_extensions\n    if skip\n        call syntastic#log#debug(g:_SYNTASTIC_DEBUG_TRACE, '_skip_file: skipping checks')\n    endif\n    return skip\nendfunction \" }}}2\n\n\" Explain why checks will be skipped for the current file\nfunction! s:_explain_skip(filetypes) abort \" {{{2\n    let buf = bufnr('')\n    if empty(a:filetypes) && s:_skip_file(buf)\n        let why = []\n        let fname = bufname(buf)\n        let bt = getbufvar(buf, '&buftype')\n\n        if s:_is_quitting(buf)\n            call add(why, 'quitting buffer')\n        endif\n        if getbufvar(buf, 'syntastic_skip_checks')\n            call add(why, 'b:syntastic_skip_checks set')\n        endif\n        if bt !=# ''\n            call add(why, 'buftype = ' . string(&buftype))\n        endif\n        if !filereadable(fname)\n            call add(why, 'file not readable / not local')\n        endif\n        if getwinvar(0, '&diff')\n            call add(why, 'diff mode')\n        endif\n        if getwinvar(0, '&previewwindow')\n            call add(why, 'preview window')\n        endif\n        if s:_ignore_file(fname)\n            call add(why, 'filename matching g:syntastic_ignore_files')\n        endif\n        if fnamemodify(fname, ':e') =~? g:syntastic_ignore_extensions\n            call add(why, 'extension matching g:syntastic_ignore_extensions')\n        endif\n\n        echomsg 'The current file will not be checked (' . join(why, ', ') . ')'\n    endif\nendfunction \" }}}2\n\n\" Take a list of errors and add default values to them from a:options\nfunction! s:_add_to_errors(errors, options) abort \" {{{2\n    for err in a:errors\n        for key in keys(a:options)\n            if !has_key(err, key) || empty(err[key])\n                let err[key] = a:options[key]\n            endif\n        endfor\n    endfor\n\n    return a:errors\nendfunction \" }}}2\n\nfunction! s:_os_name() abort \" {{{2\n    return g:_SYNTASTIC_UNAME\nendfunction \" }}}2\n\n\" }}}1\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        avrgcc.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Karel <karelishere at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_avrgcc_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_avrgcc_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nlet s:opt_x = { 'c': 'c', 'cpp': 'c++' }\n\nfunction! SyntaxCheckers_c_avrgcc_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'args_before': syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'avrgcc_config_file')),\n        \\ 'args_after': '-x ' . get(s:opt_x, self.getFiletype(), '')  . ' -fsyntax-only' })\n\n    let errorformat =\n        \\ '%-G%f:%s:,' .\n        \\ '%-G%f:%l: %#error: %#(Each undeclared identifier is reported only%.%#,' .\n        \\ '%-G%f:%l: %#error: %#for each function it appears%.%#,' .\n        \\ '%-GIn file included%.%#,' .\n        \\ '%-G %#from %f:%l\\,,' .\n        \\ '%f:%l:%c: %trror: %m,' .\n        \\ '%f:%l:%c: %tarning: %m,' .\n        \\ '%f:%l:%c: %m,' .\n        \\ '%f:%l: %trror: %m,' .\n        \\ '%f:%l: %tarning: %m,'.\n        \\ '%f:%l: %m'\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'postprocess': ['compressWhitespace'] })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'avrgcc',\n    \\ 'exec': 'avr-gcc'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        clang_check.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Benjamin Bannier <bbannier at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_clang_check_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_clang_check_checker = 1\n\nif !exists('g:syntastic_c_clang_check_sort')\n    let g:syntastic_c_clang_check_sort = 1\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_clang_check_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'post_args':\n        \\   '-- ' .\n        \\   syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'clang_check_config_file')) . ' ' .\n        \\   '-fshow-column ' .\n        \\   '-fshow-source-location ' .\n        \\   '-fno-caret-diagnostics ' .\n        \\   '-fno-color-diagnostics ' .\n        \\   '-fdiagnostics-format=clang' })\n\n    let errorformat =\n        \\ '%E%f:%l:%c: fatal error: %m,' .\n        \\ '%E%f:%l:%c: error: %m,' .\n        \\ '%W%f:%l:%c: warning: %m,' .\n        \\ '%-G%\\m%\\%%(LLVM ERROR:%\\|No compilation database found%\\)%\\@!%.%#,' .\n        \\ '%E%m'\n\n    let env = syntastic#util#isRunningWindows() ? {} : { 'TERM': 'dumb' }\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'env': env,\n        \\ 'defaults': {'bufnr': bufnr('')},\n        \\ 'returns': [0, 1] })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'clang_check',\n    \\ 'exec': 'clang-check'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        clang_tidy.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Benjamin Bannier <bbannier at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_clang_tidy_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_clang_tidy_checker = 1\n\nif !exists('g:syntastic_c_clang_tidy_sort')\n    let g:syntastic_c_clang_tidy_sort = 1\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_clang_tidy_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'post_args':\n        \\   '-- ' .\n        \\   syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'clang_tidy_config_file')) . ' ' .\n        \\   '-fshow-column ' .\n        \\   '-fshow-source-location ' .\n        \\   '-fno-caret-diagnostics ' .\n        \\   '-fno-color-diagnostics ' .\n        \\   '-fdiagnostics-format=clang' })\n\n    let errorformat =\n        \\ '%E%f:%l:%c: fatal error: %m,' .\n        \\ '%E%f:%l:%c: error: %m,' .\n        \\ '%W%f:%l:%c: warning: %m,' .\n        \\ '%-G%\\m%\\%%(LLVM ERROR:%\\|No compilation database found%\\)%\\@!%.%#,' .\n        \\ '%E%m'\n\n    let env = syntastic#util#isRunningWindows() ? {} : { 'TERM': 'dumb' }\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'env': env,\n        \\ 'defaults': {'bufnr': bufnr('')},\n        \\ 'returns': [0, 1] })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'clang_tidy',\n    \\ 'exec': 'clang-tidy'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        cppcheck.vim\n\"Description: Syntax checking plugin for syntastic using cppcheck.pl\n\"Maintainer:  LCD 47 <lcd047 at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_cppcheck_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_cppcheck_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_cppcheck_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'cppcheck_config_file')),\n        \\ 'args_after': '-q --enable=style' })\n\n    let errorformat =\n        \\ '[%f:%l]: (%trror) %m,' .\n        \\ '[%f:%l]: (%tarning) %m,' .\n        \\ '[%f:%l]: (%ttyle) %m,' .\n        \\ '[%f:%l]: (%terformance) %m,' .\n        \\ '[%f:%l]: (%tortability) %m,' .\n        \\ '[%f:%l]: (%tnformation) %m,' .\n        \\ '[%f:%l]: (%tnconclusive) %m,' .\n        \\ '%-G%.%#'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'preprocess': 'cppcheck',\n        \\ 'returns': [0] })\n\n    for e in loclist\n        if e['type'] =~? '\\m^[SPI]'\n            let e['type'] = 'w'\n            let e['subtype'] = 'Style'\n        endif\n    endfor\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'cppcheck'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        oclint.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  \"UnCO\" Lin <undercooled aT lavabit com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_oclint_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_oclint_checker = 1\n\nif !exists('g:syntastic_c_oclint_sort')\n    let g:syntastic_c_oclint_sort = 1\nendif\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_oclint_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'post_args': '-- -c ' . syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'oclint_config_file') })\n\n    let errorformat =\n        \\ '%E%f:%l:%c: fatal error: %m,' .\n        \\ '%E%f:%l:%c: error: %m,' .\n        \\ '%W%f:%l:%c: warning: %m,' .\n        \\ '%E%f:%l:%c: %m,' .\n        \\ '%-G%.%#'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'subtype': 'Style',\n        \\ 'postprocess': ['compressWhitespace'],\n        \\ 'returns': [0, 3, 5] })\n\n    for e in loclist\n        if e['text'] =~# '\\v P3( |$)'\n            let e['type'] = 'W'\n        endif\n\n        let e['text'] = substitute(e['text'], '\\m\\C P[1-3]$', '', '')\n        let e['text'] = substitute(e['text'], '\\m\\C P[1-3] ', ': ', '')\n    endfor\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'oclint'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        pc_lint.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Steve Bragg <steve at empresseffects dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_pc_lint_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_pc_lint_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_pc_lint_GetLocList() dict\n    let buf = bufnr('')\n    let config = syntastic#util#findFileInParent(syntastic#util#bufVar(buf, 'pc_lint_config_file'), fnamemodify(bufname(buf), ':p:h'))\n    call self.log('config =', config)\n\n    \" -hFs1         - show filename, add space after messages, try to make message 1 line\n    \" -width(0,0)   - make sure there are no line breaks\n    \" -t            - set tab size\n    \" -v            - turn off verbosity\n    let makeprg = self.makeprgBuild({\n        \\ 'args': (filereadable(config) ? syntastic#util#shescape(fnamemodify(config, ':p')) : ''),\n        \\ 'args_after': ['-hFs1', '-width(0,0)', '-t' . &tabstop, '-format=%f:%l:%C:%t:%n:%m'] })\n\n    let errorformat =\n        \\ '%E%f:%l:%v:Error:%n:%m,' .\n        \\ '%W%f:%l:%v:Warning:%n:%m,' .\n        \\ '%I%f:%l:%v:Info:%n:%m,' .\n        \\ '%-G%.%#'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'postprocess': ['cygwinRemoveCR'] })\n\n    for e in loclist\n        if e['type'] ==? 'I'\n            let e['type'] = 'W'\n            let e['subtype'] = 'Style'\n        endif\n    endfor\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'pc_lint',\n    \\ 'exec': 'lint-nt'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        sparse.vim\n\"Description: Syntax checking plugin for syntastic using sparse.pl\n\"Maintainer:  Daniel Walker <dwalker at fifo99 dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_sparse_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_sparse_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_sparse_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'sparse_config_file')),\n        \\ 'args_after': '-ftabstop=' . &ts })\n\n    let errorformat =\n        \\ '%f:%l:%v: %trror: %m,' .\n        \\ '%f:%l:%v: %tarning: %m,'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'defaults': {'bufnr': bufnr('')},\n        \\ 'returns': [0, 1] })\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'sparse'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        splint.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  LCD 47 <lcd047 at gmail dot com>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"============================================================================\n\nif exists('g:loaded_syntastic_c_splint_checker')\n    finish\nendif\nlet g:loaded_syntastic_c_splint_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_c_splint_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'splint_config_file')),\n        \\ 'args_after': '-showfunc -hints +quiet' })\n\n    let errorformat =\n        \\ '%-G%f:%l:%v: %[%#]%[%#]%[%#] Internal Bug %.%#,' .\n        \\ '%-G%f(%l\\,%v): %[%#]%[%#]%[%#] Internal Bug %.%#,' .\n        \\ '%W%f:%l:%v: %m,' .\n        \\ '%W%f(%l\\,%v): %m,' .\n        \\ '%W%f:%l: %m,' .\n        \\ '%W%f(%l): %m,' .\n        \\ '%-C %\\+In file included from %.%#,' .\n        \\ '%-C %\\+from %.%#,' .\n        \\ '%+C %.%#'\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'subtype': 'Style',\n        \\ 'postprocess': ['compressWhitespace'],\n        \\ 'defaults': {'type': 'W'} })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'c',\n    \\ 'name': 'splint'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        verapp.vim\n\"Description: Syntax checking plugin for syntastic\n\"Maintainer:  Lucas Verney <phyks@phyks.me>\n\"License:     This program is free software. It comes without any warranty,\n\"             to the extent permitted by applicable law. You can redistribute\n\"             it and/or modify it under the terms of the Do What The Fuck You\n\"             Want To Public License, Version 2, as published by Sam Hocevar.\n\"             See http://sam.zoy.org/wtfpl/COPYING for more details.\n\"\n\" Tested with Vera++ 1.3.0\n\"============================================================================\n\nif exists('g:loaded_syntastic_cpp_verapp_checker')\n    finish\nendif\nlet g:loaded_syntastic_cpp_verapp_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_cpp_verapp_GetLocList() dict\n    let buf = bufnr('')\n\n    let makeprg = self.makeprgBuild({\n        \\ 'args': syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'verapp_config_file')),\n        \\ 'args_after': '--show-rule --no-duplicate -S -c -' })\n\n    let errorformat = '%f:%t:%l:%c:%m'\n\n    return SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'preprocess': 'checkstyle',\n        \\ 'subtype': 'Style' })\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'cpp',\n    \\ 'name': 'verapp',\n    \\ 'exec': 'vera++'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n", "\"============================================================================\n\"File:        cuda.vim\n\"Description: Syntax checking plugin for syntastic\n\"Author:      Hannes Schulz <schulz at ais dot uni-bonn dot de>\n\"\n\"============================================================================\n\nif exists('g:loaded_syntastic_cuda_nvcc_checker')\n    finish\nendif\nlet g:loaded_syntastic_cuda_nvcc_checker = 1\n\nlet s:save_cpo = &cpo\nset cpo&vim\n\nfunction! SyntaxCheckers_cuda_nvcc_GetLocList() dict\n    let buf = bufnr('')\n    let arch_flag = syntastic#util#bufVar(buf, 'cuda_arch')\n    if arch_flag !=# ''\n        let arch_flag = '-arch=' . arch_flag\n        call syntastic#log#oneTimeWarn('variable g:syntastic_cuda_arch is deprecated, ' .\n            \\ 'please add ' . string(arch_flag) . ' to g:syntastic_cuda_nvcc_args instead')\n    endif\n\n    let build_opts = {}\n    let dummy = ''\n    if index(['h', 'hpp', 'cuh'], fnamemodify(bufname(buf), ':e'), 0, 1) >= 0\n        if syntastic#util#bufVar(buf, 'cuda_check_header', 0)\n            let dummy = fnamemodify(bufname(buf), ':p:h') . syntastic#util#Slash() . '.syntastic_dummy.cu'\n            let build_opts = {\n                \\ 'exe_before': 'echo > ' . syntastic#util#shescape(dummy) . ' ;',\n                \\ 'fname_before': '.syntastic_dummy.cu -include' }\n        else\n            return []\n        endif\n    endif\n\n    call extend(build_opts, {\n        \\ 'args_before': arch_flag . ' --cuda -O0 -I .',\n        \\ 'args': syntastic#c#ReadConfig(syntastic#util#bufVar(buf, 'cuda_config_file'),\n        \\ 'args_after': '-Xcompiler -fsyntax-only',\n        \\ 'tail_after': syntastic#c#NullOutput() })\n\n    let makeprg = self.makeprgBuild(build_opts)\n\n    let errorformat =\n        \\ '%*[^\"]\"%f\"%*\\D%l: %m,'.\n        \\ '\"%f\"%*\\D%l: %m,'.\n        \\ '%-G%f:%l: (Each undeclared identifier is reported only once,'.\n        \\ '%-G%f:%l: for each function it appears in.),'.\n        \\ '%f:%l:%c:%m,'.\n        \\ '%f(%l):%m,'.\n        \\ '%f:%l:%m,'.\n        \\ '\"%f\"\\, line %l%*\\D%c%*[^ ] %m,'.\n        \\ '%D%*\\a[%*\\d]: Entering directory `%f'','.\n        \\ '%X%*\\a[%*\\d]: Leaving directory `%f'','.\n        \\ '%D%*\\a: Entering directory `%f'','.\n        \\ '%X%*\\a: Leaving directory `%f'','.\n        \\ '%DMaking %*\\a in %f,'.\n        \\ '%f|%l| %m'\n\n    let loclist = SyntasticMake({\n        \\ 'makeprg': makeprg,\n        \\ 'errorformat': errorformat,\n        \\ 'defaults': {'type': 'E'} })\n\n    for e in loclist\n        let pat = matchstr(e['text'], '\\m\\c^\\s*warning:\\s*\\zs.*')\n        if pat !=# ''\n            let e['text'] = pat\n            let e['type'] = 'W'\n        endif\n    endfor\n\n    if dummy !=# ''\n        call delete(dummy)\n    endif\n\n    return loclist\nendfunction\n\ncall g:SyntasticRegistry.CreateAndRegisterChecker({\n    \\ 'filetype': 'cuda',\n    \\ 'name': 'nvcc'})\n\nlet &cpo = s:save_cpo\nunlet s:save_cpo\n\n\" vim: set sw=4 sts=4 et fdm=marker:\n"], "filenames": ["autoload/syntastic/c.vim", "doc/syntastic-checkers.txt", "plugin/syntastic.vim", "syntax_checkers/c/avrgcc.vim", "syntax_checkers/c/clang_check.vim", "syntax_checkers/c/clang_tidy.vim", "syntax_checkers/c/cppcheck.vim", "syntax_checkers/c/oclint.vim", "syntax_checkers/c/pc_lint.vim", "syntax_checkers/c/sparse.vim", "syntax_checkers/c/splint.vim", "syntax_checkers/cpp/verapp.vim", "syntax_checkers/cuda/nvcc.vim"], "buggy_code_start_loc": [231, 237, 22, 18, 17, 17, 17, 17, 21, 17, 17, 19, 12], "buggy_code_end_loc": [232, 7034, 23, 30, 33, 33, 27, 31, 28, 27, 27, 29, 45], "fixing_code_start_loc": [231, 237, 22, 17, 16, 16, 16, 16, 20, 16, 16, 18, 11], "fixing_code_end_loc": [232, 7034, 23, 28, 31, 31, 25, 29, 24, 25, 25, 27, 41], "type": "CWE-22", "message": "Syntastic (aka vim-syntastic) through 3.9.0 does not properly handle searches for configuration files (it searches the current directory up to potentially the root). This improper handling might be exploited for arbitrary code execution via a malicious gcc plugin, if an attacker has write access to a directory that is a parent of the base directory of the project being checked. NOTE: exploitation is more difficult after 3.8.0 because filename prediction may be needed.", "other": {"cve": {"id": "CVE-2018-11319", "sourceIdentifier": "cve@mitre.org", "published": "2018-05-20T20:29:00.220", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Syntastic (aka vim-syntastic) through 3.9.0 does not properly handle searches for configuration files (it searches the current directory up to potentially the root). This improper handling might be exploited for arbitrary code execution via a malicious gcc plugin, if an attacker has write access to a directory that is a parent of the base directory of the project being checked. NOTE: exploitation is more difficult after 3.8.0 because filename prediction may be needed."}, {"lang": "es", "value": "Syntastic (tambi\u00e9n conocido como vim-syntastic) hasta la versi\u00f3n 3.9.0 no gestiona correctamente las b\u00fasquedas de archivos de configuraci\u00f3n (busca en el directorio actual hasta, potencialmente, la ra\u00edz). Esta gesti\u00f3n incorrecta podr\u00eda ser explotada para lograr la ejecuci\u00f3n de c\u00f3digo arbitrario mediante un plugin gcc malicioso, si un atacante tiene acceso de escritura a un directorio padre del directorio base del proyecto que se est\u00e1 comprobando. NOTA: su explotaci\u00f3n es m\u00e1s dif\u00edcil tras la versi\u00f3n 3.8.0 debido a que podr\u00eda ser necesaria la predicci\u00f3n de nombres de archivo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.6, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 8.5}, "baseSeverity": "HIGH", "exploitabilityScore": 6.8, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:syntastic_project:syntastic:*:*:*:*:*:vim:*:*", "versionEndIncluding": "3.9.0", "matchCriteriaId": "1DC14D12-5B8A-432A-BB0E-C83212EAC199"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://bugs.debian.org/894736", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/vim-syntastic/syntastic/commit/6d7c0b394e001233dd09ec473fbea2002c72632f", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/vim-syntastic/syntastic/issues/2170", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/07/msg00036.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4261", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/vim-syntastic/syntastic/commit/6d7c0b394e001233dd09ec473fbea2002c72632f"}}