{"buggy_code": ["<?php\nnamespace App\\Plugins\\Cms\\Content\\Admin;\n\nuse App\\Http\\Controllers\\RootAdminController;\nuse SCart\\Core\\Front\\Models\\ShopLanguage;\nuse App\\Plugins\\Cms\\Content\\Admin\\Models\\AdminCmsCategory;\nuse App\\Plugins\\Cms\\Content\\AppConfig;\n\nuse Validator;\n\nclass CmsCategoryController extends RootAdminController\n{\n    public $languages;\n    public $plugin;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->languages = ShopLanguage::getListActive();\n        $this->plugin = new AppConfig;\n\n    }\n\n    public function index()\n    {\n        $categoriesTitle =  AdminCmsCategory::getListTitleAdmin();\n\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Category.admin.list'),\n            'subTitle' => '',\n            'icon' => 'fa fa-indent',\n            'menuRight' => [],\n            'menuLeft' => [],\n            'topMenuRight' => [],\n            'topMenuLeft' => [],\n            'urlDeleteItem' => sc_route('admin_cms_category.delete'),\n            'removeList' => 1, // 1 - Enable function delete list item\n            'buttonRefresh' => 1, // 1 - Enable button refresh\n            'buttonSort' => 1, // 1 - Enable button sort\n            'css' => '', \n            'js' => '',\n        ];\n\n        $listTh = [\n            'id' => trans($this->plugin->pathPlugin.'::Category.id'),\n            'image' => trans($this->plugin->pathPlugin.'::Category.image'),\n            'title' => trans($this->plugin->pathPlugin.'::Category.title'),\n            'parent' => trans($this->plugin->pathPlugin.'::Category.parent'),\n            'status' => trans($this->plugin->pathPlugin.'::Category.status'),\n            'sort' => trans($this->plugin->pathPlugin.'::Category.sort'),\n            'action' => trans($this->plugin->pathPlugin.'::Category.admin.action'),\n        ];\n        $sort_order = request('sort_order') ?? 'id_desc';\n        $keyword = request('keyword') ?? '';\n        $arrSort = [\n            'id__desc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.id_desc'),\n            'id__asc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.id_asc'),\n            'title__desc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.title_desc'),\n            'title__asc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.title_asc'),\n        ];\n\n        $dataSearch = [\n            'keyword'    => $keyword,\n            'sort_order' => $sort_order,\n            'arrSort'    => $arrSort,\n        ];\n        $dataTmp = (new AdminCmsCategory)->getCategoryListAdmin($dataSearch);\n\n        $dataTr = [];\n        foreach ($dataTmp as $key => $row) {\n            $dataTr[] = [\n                'id' => $row['id'],\n                'image' => sc_image_render($row->getThumb(), '50px', '50px',$row['title']),\n                'title' => $row['title'],\n                'parent' => $row['parent'] ? ($categoriesTitle[$row['parent']] ?? '') : 'ROOT',\n\n                'status' => $row['status'] ? '<span class=\"badge badge-success\">ON</span>' : '<span class=\"badge badge-danger\">OFF</span>',\n                'sort' => $row['sort'],\n                'action' => '\n                    <a href=\"' . sc_route('admin_cms_category.edit', ['id' => $row['id']]) . '\"><span title=\"' . trans($this->plugin->pathPlugin.'::Category.admin.edit') . '\" type=\"button\" class=\"btn btn-flat btn-primary\"><i class=\"fa fa-edit\"></i></span></a>&nbsp;\n\n                    <span onclick=\"deleteItem(' . $row['id'] . ');\"  title=\"' . trans('admin.delete') . '\" class=\"btn btn-flat btn-danger\"><i class=\"fa fa-trash\"></i></span>'\n                ,\n            ];\n        }\n\n        $data['listTh'] = $listTh;\n        $data['dataTr'] = $dataTr;\n        $data['pagination'] = $dataTmp->appends(request()->except(['_token', '_pjax']))->links($this->templatePathAdmin.'component.pagination');\n        $data['resultItems'] = trans($this->plugin->pathPlugin.'::Category.admin.result_item', ['item_from' => $dataTmp->firstItem(), 'item_to' => $dataTmp->lastItem(), 'item_total' => $dataTmp->total()]);\n\n\n        //menuRight\n        $data['menuRight'][] = '<a href=\"' . sc_route('admin_cms_category.create') . '\" class=\"btn  btn-success  btn-flat\" title=\"New\" id=\"button_create_new\">\n                           <i class=\"fa fa-plus\"></i><span class=\"hidden-xs\">' . trans('admin.add_new') . '</span>\n                           </a>';\n        //=menuRight\n\n        //menuSort\n        $optionSort = '';\n        foreach ($arrSort as $key => $status) {\n            $optionSort .= '<option  ' . (($sort_order == $key) ? \"selected\" : \"\") . ' value=\"' . $key . '\">' . $status . '</option>';\n        }\n        $data['urlSort'] = sc_route('admin_cms_category.index', request()->except(['_token', '_pjax', 'sort_order']));\n\n        $data['optionSort'] = $optionSort;\n        //=menuSort\n\n        //menuSearch\n        $data['topMenuRight'][] = '\n                <form action=\"' . sc_route('admin_cms_category.index') . '\" id=\"button_search\">\n                <div class=\"input-group input-group\" style=\"width: 250px;\">\n                    <input type=\"text\" name=\"keyword\" class=\"form-control float-right\" placeholder=\"' . trans($this->plugin->pathPlugin.'::Category.admin.search_place') . '\" value=\"' . $keyword . '\">\n                    <div class=\"input-group-append\">\n                        <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-search\"></i></button>\n                    </div>\n                </div>\n                </form>';\n        //=menuSearch\n\n\n        return view($this->templatePathAdmin.'screen.list')\n            ->with($data);\n    }\n\n/**\n * Form create new order in admin\n * @return [type] [description]\n */\n    public function create()\n    {\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Category.admin.add_new_title'),\n            'subTitle' => '',\n            'title_description' => trans($this->plugin->pathPlugin.'::Category.admin.add_new_des'),\n            'icon' => 'fa fa-plus',\n            'languages' => $this->languages,\n            'category' => [],\n            'categories' => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action' => sc_route('admin_cms_category.create'),\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_category')\n            ->with($data);\n    }\n\n/**\n * Post create new order in admin\n * @return [type] [description]\n */\n    public function postCreate()\n    {\n        $data = request()->all();\n\n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n\n        $validator = Validator::make($data, [\n            'sort' => 'numeric|min:0',\n            'parent' => 'required',\n            'descriptions.*.title' => 'required|string|max:200',\n            'descriptions.*.keyword' => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n            'alias' => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_category_alias_unique',\n        ], [\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Category.alias_validate'),\n            'descriptions.*.title.required' => trans('validation.required', ['attribute' => trans($this->plugin->pathPlugin.'::Category.title')]),\n            'alias.cms_category_alias_unique' => trans($this->plugin->pathPlugin.'::Category.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n        $dataInsert = [\n            'image'    => $data['image'],\n            'alias'    => $data['alias'],\n            'parent'   => (int) $data['parent'],\n            'status'   => !empty($data['status']) ? 1 : 0,\n            'sort'     => (int) $data['sort'],\n            'store_id' => session('adminStoreId'),\n        ];\n\n        $category = AdminCmsCategory::createCategoryAdmin($dataInsert);\n        $id = $category->id;\n        $dataDes = [];\n        $languages = $this->languages;\n        foreach ($languages as $code => $value) {\n            $dataDes[] = [\n                'category_id' => $id,\n                'lang'        => $code,\n                'title'       => $data['descriptions'][$code]['title'],\n                'keyword'     => $data['descriptions'][$code]['keyword'],\n                'description' => $data['descriptions'][$code]['description'],\n            ];\n        }\n        AdminCmsCategory::insertDescriptionAdmin($dataDes);\n\n        sc_clear_cache('cache_cms_category');\n\n        return redirect()->route('admin_cms_category.index')->with('success', trans($this->plugin->pathPlugin.'::Category.admin.create_success'));\n\n    }\n\n/**\n * Form edit\n */\n    public function edit($id)\n    {\n        $category = AdminCmsCategory::getCategoryAdmin($id);\n\n        if (!$category) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n\n        $data = [\n            'title'             => trans($this->plugin->pathPlugin.'::Category.admin.edit'),\n            'subTitle'          => '',\n            'title_description' => '',\n            'icon'              => 'fa fa-pencil-square-o',\n            'languages'         => $this->languages,\n            'category'          => $category,\n            'categories'        => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action'        => sc_route('admin_cms_category.edit', ['id' => $category['id']]),\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_category')\n            ->with($data);\n    }\n\n/**\n * update status\n */\n    public function postEdit($id)\n    {\n        $category = AdminCmsCategory::getCategoryAdmin($id);\n        if (!$category) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n\n        $data = request()->all();\n\n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n\n        $validator = Validator::make($data, [\n            'sort'                       => 'numeric|min:0',\n            'parent'                     => 'required',\n            'descriptions.*.title'       => 'required|string|max:200',\n            'descriptions.*.keyword'     => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n            'alias'                      => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_category_alias_unique:'.$id,\n        ], [\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Category.alias_validate'),\n            'descriptions.*.title.required' => trans('validation.required', ['attribute' => trans($this->plugin->pathPlugin.'::Category.title')]),\n            'alias.cms_category_alias_unique' => trans($this->plugin->pathPlugin.'::Category.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n        //Edit\n        $dataUpdate = [\n            'image'    => $data['image'],\n            'alias'    => $data['alias'],\n            'parent'   => $data['parent'],\n            'sort'     => $data['sort'],\n            'status'   => empty($data['status']) ? 0 : 1,\n            'store_id' => session('adminStoreId'),\n        ];\n\n        $category->update($dataUpdate);\n        $category->descriptions()->delete();\n        $dataDes = [];\n        foreach ($data['descriptions'] as $code => $row) {\n            $dataDes[] = [\n                'category_id' => $id,\n                'lang'        => $code,\n                'title'       => $row['title'],\n                'keyword'     => $row['keyword'],\n                'description' => $row['description'],\n            ];\n        }\n\n        AdminCmsCategory::insertDescriptionAdmin($dataDes);\n\n        sc_clear_cache('cache_cms_category');\n\n        return redirect()->route('admin_cms_category.index')->with('success', trans($this->plugin->pathPlugin.'::Category.admin.edit_success'));\n\n    }\n\n    /*\n    Delete list Item\n    Need mothod destroy to boot deleting in model\n    */\n    public function deleteList()\n    {\n        if (!request()->ajax()) {\n            return response()->json(['error' => 1, 'msg' => 'Method not allow!']);\n        } else {\n            $ids = request('ids');\n            $arrID = explode(',', $ids);\n            $arrDontPermission = [];\n            foreach ($arrID as $key => $id) {\n                if(!$this->checkPermisisonItem($id)) {\n                    $arrDontPermission[] = $id;\n                }\n            }\n            if (count($arrDontPermission)) {\n                return response()->json(['error' => 1, 'msg' => trans('admin.remove_dont_permisison') . ': ' . json_encode($arrDontPermission)]);\n            }\n            AdminCmsCategory::destroy($arrID);\n            sc_clear_cache('cache_cms_category');\n            return response()->json(['error' => 0, 'msg' => '']);\n        }\n    }\n\n    /**\n     * Check permisison item\n     */\n    public function checkPermisisonItem($id) {\n        return AdminCmsCategory::getCategoryAdmin($id);\n    }\n\n}\n", "<?php\nnamespace App\\Plugins\\Cms\\Content\\Admin;\n\nuse App\\Http\\Controllers\\RootAdminController;\nuse SCart\\Core\\Front\\Models\\ShopLanguage;\nuse App\\Plugins\\Cms\\Content\\Admin\\Models\\AdminCmsCategory;\nuse App\\Plugins\\Cms\\Content\\Admin\\Models\\AdminCmsContent;\nuse App\\Plugins\\Cms\\Content\\AppConfig;\nuse Validator;\n\nclass CmsContentController extends RootAdminController\n{\n    public $languages;\n    public $plugin;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->languages = ShopLanguage::getListActive();\n        $this->plugin = new AppConfig;\n    }\n\n    public function index()\n    {\n        $categoriesTitle =  AdminCmsCategory::getListTitleAdmin();\n        $data = [\n            'title'         => trans($this->plugin->pathPlugin.'::Content.admin.list'),\n            'subTitle'      => '',\n            'icon'          => 'fa fa-indent',\n            'menuRight'     => [],\n            'menuLeft'      => [],\n            'topMenuRight'  => [],\n            'topMenuLeft'   => [],\n            'urlDeleteItem' => sc_route('admin_cms_content.delete'),\n            'removeList'    => 1, // 1 - Enable function delete list item\n            'buttonRefresh' => 1, // 1 - Enable button refresh\n            'buttonSort'    => 1, // 1 - Enable button sort\n            'css'           => '', \n            'js'            => '',\n        ];\n\n        $listTh = [\n            'id'          => trans($this->plugin->pathPlugin.'::Content.id'),\n            'image'       => trans($this->plugin->pathPlugin.'::Content.image'),\n            'title'       => trans($this->plugin->pathPlugin.'::Content.title'),\n            'category_id' => trans($this->plugin->pathPlugin.'::Content.category_id'),\n            'status'      => trans($this->plugin->pathPlugin.'::Content.status'),\n            'sort'        => trans($this->plugin->pathPlugin.'::Content.sort'),\n            'action'      => trans($this->plugin->pathPlugin.'::Content.admin.action'),\n        ];\n        $sort_order = request('sort_order') ?? 'id_desc';\n        $keyword = request('keyword') ?? '';\n        $arrSort = [\n            'id__desc'    => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.id_desc'),\n            'id__asc'     => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.id_asc'),\n            'title__desc' => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.title_desc'),\n            'title__asc'  => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.title_asc'),\n        ];\n\n        $dataSearch = [\n            'keyword'    => $keyword,\n            'sort_order' => $sort_order,\n            'arrSort'    => $arrSort,\n        ];\n        $dataTmp = (new AdminCmsContent)->getContentListAdmin($dataSearch);\n\n        $dataTr = [];\n        foreach ($dataTmp as $key => $row) {\n            $dataTr[] = [\n                'id' => $row['id'],\n                'image' => sc_image_render($row->getThumb(), '50px', '50px', $row['title']),\n                'title' => $row['title'],\n                'category_id' => $row['category_id'] ? $categoriesTitle[$row['category_id']] ?? '' : 'ROOT',\n\n                'status' => $row['status'] ? '<span class=\"badge badge-success\">ON</span>' : '<span class=\"badge badge-danger\">OFF</span>',\n                'sort' => $row['sort'],\n                'action' => '\n                    <a href=\"' . sc_route('admin_cms_content.edit', ['id' => $row['id']]) . '\"><span title=\"' . trans($this->plugin->pathPlugin.'::Content.admin.edit') . '\" type=\"button\" class=\"btn btn-flat btn-primary\"><i class=\"fa fa-edit\"></i></span></a>&nbsp;\n\n                    <span onclick=\"deleteItem(' . $row['id'] . ');\"  title=\"' . trans('admin.delete') . '\" class=\"btn btn-flat btn-danger\"><i class=\"fa fa-trash\"></i></span>'\n                ,\n            ];\n        }\n\n        $data['listTh'] = $listTh;\n        $data['dataTr'] = $dataTr;\n        $data['pagination'] = $dataTmp\n            ->appends(request()->except(['_token', '_pjax']))\n            ->links($this->templatePathAdmin.'component.pagination');\n        $data['resultItems'] = trans($this->plugin->pathPlugin.'::Content.admin.result_item', \n            [\n                'item_from' => $dataTmp->firstItem(), \n                'item_to' => $dataTmp->lastItem(), \n                'item_total' => $dataTmp->total()\n            ]\n        );\n\n        //menuRight\n        $data['menuRight'][] = '<a href=\"' . sc_route('admin_cms_content.create') . '\" class=\"btn  btn-success  btn-flat\" title=\"New\" id=\"button_create_new\">\n                           <i class=\"fa fa-plus\"></i><span class=\"hidden-xs\">' . trans('admin.add_new') . '</span>\n                           </a>';\n        //=menuRight\n\n        //menu_sort\n        $optionSort = '';\n        foreach ($arrSort as $key => $status) {\n            $optionSort .= '<option  ' . (($sort_order == $key) ? \"selected\" : \"\") . ' value=\"' . $key . '\">' . $status . '</option>';\n        }\n        $data['urlSort'] = sc_route('admin_cms_content.index', request()->except(['_token', '_pjax', 'sort_order']));\n\n        $data['optionSort'] = $optionSort;\n        //=menu_sort\n\n        //menuSearch\n        $data['topMenuRight'][] = '\n            <form action=\"' . sc_route('admin_cms_content.index') . '\" id=\"button_search\">\n            <div class=\"input-group input-group\" style=\"width: 250px;\">\n                <input type=\"text\" name=\"keyword\" class=\"form-control float-right\" placeholder=\"' . trans($this->plugin->pathPlugin.'::Content.admin.search_place') . '\" value=\"' . $keyword . '\">\n                <div class=\"input-group-append\">\n                    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-search\"></i></button>\n                </div>\n            </div>\n            </form>';\n        //=menuSearch\n\n        return view($this->templatePathAdmin.'screen.list')\n            ->with($data);\n    }\n\n    /**\n     * Form create new order in admin\n     * @return [type] [description]\n     */\n    public function create()\n    {\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Content.admin.add_new_title'),\n            'subTitle' => '',\n            'title_description' => trans($this->plugin->pathPlugin.'::Content.admin.add_new_des'),\n            'icon' => 'fa fa-plus',\n            'languages' => $this->languages,\n            'content' => [],\n            'categories' => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action' => sc_route('admin_cms_content.create'),\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_content')\n            ->with($data);\n    }\n\n    /**\n     * Post create new order in admin\n     * @return [type] [description]\n     */\n    public function postCreate()\n    {\n        $data = request()->all();\n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n        $validator = Validator::make($data, [\n            'sort' => 'numeric|min:0',\n            'category_id' => 'required',\n            'descriptions.*.title' => 'required|string|max:200',\n            'descriptions.*.keyword' => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n            'alias' => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_content_alias_unique',\n        ], [\n            'descriptions.*.title.required' => trans('validation.required', \n            ['attribute' => trans($this->plugin->pathPlugin.'::Content.title')]),\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Content.alias_validate'),\n            'alias.cms_content_alias_unique' => trans($this->plugin->pathPlugin.'::Content.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n        $dataInsert = [\n            'image'       => $data['image'],\n            'alias'       => $data['alias'],\n            'category_id' => (int) $data['category_id'],\n            'status'      => !empty($data['status']) ? 1 : 0,\n            'sort'        => (int) $data['sort'],\n            'store_id'    => session('adminStoreId'),\n        ];\n        $content = AdminCmsContent::createContentAdmin($dataInsert);\n        $id = $content->id;\n        $dataDes = [];\n        $languages = $this->languages;\n        foreach ($languages as $code => $value) {\n            $dataDes[] = [\n                'content_id' => $id,\n                'lang' => $code,\n                'title' => $data['descriptions'][$code]['title'],\n                'keyword' => $data['descriptions'][$code]['keyword'],\n                'description' => $data['descriptions'][$code]['description'],\n                'content' => $data['descriptions'][$code]['content'],\n            ];\n        }\n        AdminCmsContent::insertDescriptionAdmin($dataDes);\n        sc_clear_cache('cache_cms_content');\n        return redirect()->route('admin_cms_content.index')\n            ->with('success', trans($this->plugin->pathPlugin.'::Content.admin.create_success'));\n\n    }\n\n/**\n * Form edit\n */\n    public function edit($id)\n    {\n        $content = AdminCmsContent::getContentAdmin($id);\n\n        if (!$content) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Content.admin.edit'),\n            'subTitle' => '',\n            'title_description' => '',\n            'icon' => 'fa fa-pencil-square-o',\n            'languages' => $this->languages,\n            'content' => $content,\n            'categories' => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action' => sc_route('admin_cms_content.edit', ['id' => $content['id']]),\n\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_content')\n            ->with($data);\n    }\n\n/**\n * update status\n */\n    public function postEdit($id)\n    {\n        $content = AdminCmsContent::getContentAdmin($id);\n\n        if (!$content) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n\n        $data = request()->all();\n        \n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n\n        $validator = Validator::make($data, [\n            'category_id' => 'required',\n            'alias' => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_content_alias_unique:'.$id,\n            'sort' => 'numeric|min:0',\n            'descriptions.*.title' => 'required|string|max:200',\n            'descriptions.*.keyword' => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n        ], [\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Content.alias_validate'),\n            'descriptions.*.title.required' => trans('validation.required', ['attribute' => trans($this->plugin->pathPlugin.'::Content.title')]),\n            'alias.cms_content_alias_unique' => trans($this->plugin->pathPlugin.'::Content.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n//Edit\n        $store = $data['store'] ?? [];\n        $dataUpdate = [\n            'image'       => $data['image'],\n            'alias'       => $data['alias'],\n            'category_id' => $data['category_id'],\n            'sort'        => $data['sort'],\n            'status'      => empty($data['status']) ? 0 : 1,\n            'store_id'    => session('adminStoreId'),\n        ];\n\n        $content->update($dataUpdate);\n        $content->descriptions()->delete();\n        $dataDes = [];\n        foreach ($data['descriptions'] as $code => $row) {\n            $dataDes[] = [\n                'content_id'  => $id,\n                'lang'        => $code,\n                'title'       => $row['title'],\n                'keyword'     => $row['keyword'],\n                'description' => $row['description'],\n                'content'     => $row['content'],\n            ];\n        }\n        AdminCmsContent::insertDescriptionAdmin($dataDes);\n        sc_clear_cache('cache_cms_content');\n        return redirect()->route('admin_cms_content.index')->with('success', trans($this->plugin->pathPlugin.'::Content.admin.edit_success'));\n\n    }\n\n/*\nDelete list Item\nNeed mothod destroy to boot deleting in model\n */\n    public function deleteList()\n    {\n        if (!request()->ajax()) {\n            return response()->json(['error' => 1, 'msg' => 'Method not allow!']);\n        } else {\n            $ids = request('ids');\n            $arrID = explode(',', $ids);\n            $arrDontPermission = [];\n            foreach ($arrID as $key => $id) {\n                if(!$this->checkPermisisonItem($id)) {\n                    $arrDontPermission[] = $id;\n                }\n            }\n            if (count($arrDontPermission)) {\n                return response()->json(['error' => 1, 'msg' => trans('admin.remove_dont_permisison') . ': ' . json_encode($arrDontPermission)]);\n            }\n            AdminCmsContent::destroy($arrID);\n            sc_clear_cache('cache_cms_content');\n            return response()->json(['error' => 0, 'msg' => '']);\n        }\n    }\n\n    /**\n     * Check permisison item\n     */\n    public function checkPermisisonItem($id) {\n        return AdminCmsContent::getContentAdmin($id);\n    }\n\n}\n"], "fixing_code": ["<?php\nnamespace App\\Plugins\\Cms\\Content\\Admin;\n\nuse App\\Http\\Controllers\\RootAdminController;\nuse SCart\\Core\\Front\\Models\\ShopLanguage;\nuse App\\Plugins\\Cms\\Content\\Admin\\Models\\AdminCmsCategory;\nuse App\\Plugins\\Cms\\Content\\AppConfig;\n\nuse Validator;\n\nclass CmsCategoryController extends RootAdminController\n{\n    public $languages;\n    public $plugin;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->languages = ShopLanguage::getListActive();\n        $this->plugin = new AppConfig;\n\n    }\n\n    public function index()\n    {\n        $categoriesTitle =  AdminCmsCategory::getListTitleAdmin();\n\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Category.admin.list'),\n            'subTitle' => '',\n            'icon' => 'fa fa-indent',\n            'menuRight' => [],\n            'menuLeft' => [],\n            'topMenuRight' => [],\n            'topMenuLeft' => [],\n            'urlDeleteItem' => sc_route('admin_cms_category.delete'),\n            'removeList' => 1, // 1 - Enable function delete list item\n            'buttonRefresh' => 1, // 1 - Enable button refresh\n            'buttonSort' => 1, // 1 - Enable button sort\n            'css' => '', \n            'js' => '',\n        ];\n\n        $listTh = [\n            'id' => trans($this->plugin->pathPlugin.'::Category.id'),\n            'image' => trans($this->plugin->pathPlugin.'::Category.image'),\n            'title' => trans($this->plugin->pathPlugin.'::Category.title'),\n            'parent' => trans($this->plugin->pathPlugin.'::Category.parent'),\n            'status' => trans($this->plugin->pathPlugin.'::Category.status'),\n            'sort' => trans($this->plugin->pathPlugin.'::Category.sort'),\n            'action' => trans($this->plugin->pathPlugin.'::Category.admin.action'),\n        ];\n        $sort_order = sc_clean(request('sort_order') ?? 'id_desc');\n        $keyword    = sc_clean(request('keyword') ?? '');\n        $arrSort = [\n            'id__desc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.id_desc'),\n            'id__asc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.id_asc'),\n            'title__desc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.title_desc'),\n            'title__asc' => trans($this->plugin->pathPlugin.'::Category.admin.sort_order.title_asc'),\n        ];\n\n        $dataSearch = [\n            'keyword'    => $keyword,\n            'sort_order' => $sort_order,\n            'arrSort'    => $arrSort,\n        ];\n        $dataTmp = (new AdminCmsCategory)->getCategoryListAdmin($dataSearch);\n\n        $dataTr = [];\n        foreach ($dataTmp as $key => $row) {\n            $dataTr[] = [\n                'id' => $row['id'],\n                'image' => sc_image_render($row->getThumb(), '50px', '50px',$row['title']),\n                'title' => $row['title'],\n                'parent' => $row['parent'] ? ($categoriesTitle[$row['parent']] ?? '') : 'ROOT',\n\n                'status' => $row['status'] ? '<span class=\"badge badge-success\">ON</span>' : '<span class=\"badge badge-danger\">OFF</span>',\n                'sort' => $row['sort'],\n                'action' => '\n                    <a href=\"' . sc_route('admin_cms_category.edit', ['id' => $row['id']]) . '\"><span title=\"' . trans($this->plugin->pathPlugin.'::Category.admin.edit') . '\" type=\"button\" class=\"btn btn-flat btn-primary\"><i class=\"fa fa-edit\"></i></span></a>&nbsp;\n\n                    <span onclick=\"deleteItem(' . $row['id'] . ');\"  title=\"' . trans('admin.delete') . '\" class=\"btn btn-flat btn-danger\"><i class=\"fa fa-trash\"></i></span>'\n                ,\n            ];\n        }\n\n        $data['listTh'] = $listTh;\n        $data['dataTr'] = $dataTr;\n        $data['pagination'] = $dataTmp->appends(request()->except(['_token', '_pjax']))->links($this->templatePathAdmin.'component.pagination');\n        $data['resultItems'] = trans($this->plugin->pathPlugin.'::Category.admin.result_item', ['item_from' => $dataTmp->firstItem(), 'item_to' => $dataTmp->lastItem(), 'item_total' => $dataTmp->total()]);\n\n\n        //menuRight\n        $data['menuRight'][] = '<a href=\"' . sc_route('admin_cms_category.create') . '\" class=\"btn  btn-success  btn-flat\" title=\"New\" id=\"button_create_new\">\n                           <i class=\"fa fa-plus\"></i><span class=\"hidden-xs\">' . trans('admin.add_new') . '</span>\n                           </a>';\n        //=menuRight\n\n        //menuSort\n        $optionSort = '';\n        foreach ($arrSort as $key => $status) {\n            $optionSort .= '<option  ' . (($sort_order == $key) ? \"selected\" : \"\") . ' value=\"' . $key . '\">' . $status . '</option>';\n        }\n        $data['urlSort'] = sc_route('admin_cms_category.index', request()->except(['_token', '_pjax', 'sort_order']));\n\n        $data['optionSort'] = $optionSort;\n        //=menuSort\n\n        //menuSearch\n        $data['topMenuRight'][] = '\n                <form action=\"' . sc_route('admin_cms_category.index') . '\" id=\"button_search\">\n                <div class=\"input-group input-group\" style=\"width: 250px;\">\n                    <input type=\"text\" name=\"keyword\" class=\"form-control float-right\" placeholder=\"' . trans($this->plugin->pathPlugin.'::Category.admin.search_place') . '\" value=\"' . $keyword . '\">\n                    <div class=\"input-group-append\">\n                        <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-search\"></i></button>\n                    </div>\n                </div>\n                </form>';\n        //=menuSearch\n\n\n        return view($this->templatePathAdmin.'screen.list')\n            ->with($data);\n    }\n\n/**\n * Form create new order in admin\n * @return [type] [description]\n */\n    public function create()\n    {\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Category.admin.add_new_title'),\n            'subTitle' => '',\n            'title_description' => trans($this->plugin->pathPlugin.'::Category.admin.add_new_des'),\n            'icon' => 'fa fa-plus',\n            'languages' => $this->languages,\n            'category' => [],\n            'categories' => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action' => sc_route('admin_cms_category.create'),\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_category')\n            ->with($data);\n    }\n\n/**\n * Post create new order in admin\n * @return [type] [description]\n */\n    public function postCreate()\n    {\n        $data = request()->all();\n\n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n\n        $validator = Validator::make($data, [\n            'sort' => 'numeric|min:0',\n            'parent' => 'required',\n            'descriptions.*.title' => 'required|string|max:200',\n            'descriptions.*.keyword' => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n            'alias' => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_category_alias_unique',\n        ], [\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Category.alias_validate'),\n            'descriptions.*.title.required' => trans('validation.required', ['attribute' => trans($this->plugin->pathPlugin.'::Category.title')]),\n            'alias.cms_category_alias_unique' => trans($this->plugin->pathPlugin.'::Category.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n        $dataInsert = [\n            'image'    => $data['image'],\n            'alias'    => $data['alias'],\n            'parent'   => (int) $data['parent'],\n            'status'   => !empty($data['status']) ? 1 : 0,\n            'sort'     => (int) $data['sort'],\n            'store_id' => session('adminStoreId'),\n        ];\n\n        $category = AdminCmsCategory::createCategoryAdmin($dataInsert);\n        $id = $category->id;\n        $dataDes = [];\n        $languages = $this->languages;\n        foreach ($languages as $code => $value) {\n            $dataDes[] = [\n                'category_id' => $id,\n                'lang'        => $code,\n                'title'       => $data['descriptions'][$code]['title'],\n                'keyword'     => $data['descriptions'][$code]['keyword'],\n                'description' => $data['descriptions'][$code]['description'],\n            ];\n        }\n        AdminCmsCategory::insertDescriptionAdmin($dataDes);\n\n        sc_clear_cache('cache_cms_category');\n\n        return redirect()->route('admin_cms_category.index')->with('success', trans($this->plugin->pathPlugin.'::Category.admin.create_success'));\n\n    }\n\n/**\n * Form edit\n */\n    public function edit($id)\n    {\n        $category = AdminCmsCategory::getCategoryAdmin($id);\n\n        if (!$category) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n\n        $data = [\n            'title'             => trans($this->plugin->pathPlugin.'::Category.admin.edit'),\n            'subTitle'          => '',\n            'title_description' => '',\n            'icon'              => 'fa fa-pencil-square-o',\n            'languages'         => $this->languages,\n            'category'          => $category,\n            'categories'        => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action'        => sc_route('admin_cms_category.edit', ['id' => $category['id']]),\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_category')\n            ->with($data);\n    }\n\n/**\n * update status\n */\n    public function postEdit($id)\n    {\n        $category = AdminCmsCategory::getCategoryAdmin($id);\n        if (!$category) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n\n        $data = request()->all();\n\n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n\n        $validator = Validator::make($data, [\n            'sort'                       => 'numeric|min:0',\n            'parent'                     => 'required',\n            'descriptions.*.title'       => 'required|string|max:200',\n            'descriptions.*.keyword'     => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n            'alias'                      => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_category_alias_unique:'.$id,\n        ], [\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Category.alias_validate'),\n            'descriptions.*.title.required' => trans('validation.required', ['attribute' => trans($this->plugin->pathPlugin.'::Category.title')]),\n            'alias.cms_category_alias_unique' => trans($this->plugin->pathPlugin.'::Category.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n        //Edit\n        $dataUpdate = [\n            'image'    => $data['image'],\n            'alias'    => $data['alias'],\n            'parent'   => $data['parent'],\n            'sort'     => $data['sort'],\n            'status'   => empty($data['status']) ? 0 : 1,\n            'store_id' => session('adminStoreId'),\n        ];\n\n        $category->update($dataUpdate);\n        $category->descriptions()->delete();\n        $dataDes = [];\n        foreach ($data['descriptions'] as $code => $row) {\n            $dataDes[] = [\n                'category_id' => $id,\n                'lang'        => $code,\n                'title'       => $row['title'],\n                'keyword'     => $row['keyword'],\n                'description' => $row['description'],\n            ];\n        }\n\n        AdminCmsCategory::insertDescriptionAdmin($dataDes);\n\n        sc_clear_cache('cache_cms_category');\n\n        return redirect()->route('admin_cms_category.index')->with('success', trans($this->plugin->pathPlugin.'::Category.admin.edit_success'));\n\n    }\n\n    /*\n    Delete list Item\n    Need mothod destroy to boot deleting in model\n    */\n    public function deleteList()\n    {\n        if (!request()->ajax()) {\n            return response()->json(['error' => 1, 'msg' => 'Method not allow!']);\n        } else {\n            $ids = request('ids');\n            $arrID = explode(',', $ids);\n            $arrDontPermission = [];\n            foreach ($arrID as $key => $id) {\n                if(!$this->checkPermisisonItem($id)) {\n                    $arrDontPermission[] = $id;\n                }\n            }\n            if (count($arrDontPermission)) {\n                return response()->json(['error' => 1, 'msg' => trans('admin.remove_dont_permisison') . ': ' . json_encode($arrDontPermission)]);\n            }\n            AdminCmsCategory::destroy($arrID);\n            sc_clear_cache('cache_cms_category');\n            return response()->json(['error' => 0, 'msg' => '']);\n        }\n    }\n\n    /**\n     * Check permisison item\n     */\n    public function checkPermisisonItem($id) {\n        return AdminCmsCategory::getCategoryAdmin($id);\n    }\n\n}\n", "<?php\nnamespace App\\Plugins\\Cms\\Content\\Admin;\n\nuse App\\Http\\Controllers\\RootAdminController;\nuse SCart\\Core\\Front\\Models\\ShopLanguage;\nuse App\\Plugins\\Cms\\Content\\Admin\\Models\\AdminCmsCategory;\nuse App\\Plugins\\Cms\\Content\\Admin\\Models\\AdminCmsContent;\nuse App\\Plugins\\Cms\\Content\\AppConfig;\nuse Validator;\n\nclass CmsContentController extends RootAdminController\n{\n    public $languages;\n    public $plugin;\n\n    public function __construct()\n    {\n        parent::__construct();\n        $this->languages = ShopLanguage::getListActive();\n        $this->plugin = new AppConfig;\n    }\n\n    public function index()\n    {\n        $categoriesTitle =  AdminCmsCategory::getListTitleAdmin();\n        $data = [\n            'title'         => trans($this->plugin->pathPlugin.'::Content.admin.list'),\n            'subTitle'      => '',\n            'icon'          => 'fa fa-indent',\n            'menuRight'     => [],\n            'menuLeft'      => [],\n            'topMenuRight'  => [],\n            'topMenuLeft'   => [],\n            'urlDeleteItem' => sc_route('admin_cms_content.delete'),\n            'removeList'    => 1, // 1 - Enable function delete list item\n            'buttonRefresh' => 1, // 1 - Enable button refresh\n            'buttonSort'    => 1, // 1 - Enable button sort\n            'css'           => '', \n            'js'            => '',\n        ];\n\n        $listTh = [\n            'id'          => trans($this->plugin->pathPlugin.'::Content.id'),\n            'image'       => trans($this->plugin->pathPlugin.'::Content.image'),\n            'title'       => trans($this->plugin->pathPlugin.'::Content.title'),\n            'category_id' => trans($this->plugin->pathPlugin.'::Content.category_id'),\n            'status'      => trans($this->plugin->pathPlugin.'::Content.status'),\n            'sort'        => trans($this->plugin->pathPlugin.'::Content.sort'),\n            'action'      => trans($this->plugin->pathPlugin.'::Content.admin.action'),\n        ];\n        $sort_order = sc_clean(request('sort_order') ?? 'id_desc');\n        $keyword    = sc_clean(request('keyword') ?? '');\n        $arrSort = [\n            'id__desc'    => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.id_desc'),\n            'id__asc'     => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.id_asc'),\n            'title__desc' => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.title_desc'),\n            'title__asc'  => trans($this->plugin->pathPlugin.'::Content.admin.sort_order.title_asc'),\n        ];\n\n        $dataSearch = [\n            'keyword'    => $keyword,\n            'sort_order' => $sort_order,\n            'arrSort'    => $arrSort,\n        ];\n        $dataTmp = (new AdminCmsContent)->getContentListAdmin($dataSearch);\n\n        $dataTr = [];\n        foreach ($dataTmp as $key => $row) {\n            $dataTr[] = [\n                'id' => $row['id'],\n                'image' => sc_image_render($row->getThumb(), '50px', '50px', $row['title']),\n                'title' => $row['title'],\n                'category_id' => $row['category_id'] ? $categoriesTitle[$row['category_id']] ?? '' : 'ROOT',\n\n                'status' => $row['status'] ? '<span class=\"badge badge-success\">ON</span>' : '<span class=\"badge badge-danger\">OFF</span>',\n                'sort' => $row['sort'],\n                'action' => '\n                    <a href=\"' . sc_route('admin_cms_content.edit', ['id' => $row['id']]) . '\"><span title=\"' . trans($this->plugin->pathPlugin.'::Content.admin.edit') . '\" type=\"button\" class=\"btn btn-flat btn-primary\"><i class=\"fa fa-edit\"></i></span></a>&nbsp;\n\n                    <span onclick=\"deleteItem(' . $row['id'] . ');\"  title=\"' . trans('admin.delete') . '\" class=\"btn btn-flat btn-danger\"><i class=\"fa fa-trash\"></i></span>'\n                ,\n            ];\n        }\n\n        $data['listTh'] = $listTh;\n        $data['dataTr'] = $dataTr;\n        $data['pagination'] = $dataTmp\n            ->appends(request()->except(['_token', '_pjax']))\n            ->links($this->templatePathAdmin.'component.pagination');\n        $data['resultItems'] = trans($this->plugin->pathPlugin.'::Content.admin.result_item', \n            [\n                'item_from' => $dataTmp->firstItem(), \n                'item_to' => $dataTmp->lastItem(), \n                'item_total' => $dataTmp->total()\n            ]\n        );\n\n        //menuRight\n        $data['menuRight'][] = '<a href=\"' . sc_route('admin_cms_content.create') . '\" class=\"btn  btn-success  btn-flat\" title=\"New\" id=\"button_create_new\">\n                           <i class=\"fa fa-plus\"></i><span class=\"hidden-xs\">' . trans('admin.add_new') . '</span>\n                           </a>';\n        //=menuRight\n\n        //menu_sort\n        $optionSort = '';\n        foreach ($arrSort as $key => $status) {\n            $optionSort .= '<option  ' . (($sort_order == $key) ? \"selected\" : \"\") . ' value=\"' . $key . '\">' . $status . '</option>';\n        }\n        $data['urlSort'] = sc_route('admin_cms_content.index', request()->except(['_token', '_pjax', 'sort_order']));\n\n        $data['optionSort'] = $optionSort;\n        //=menu_sort\n\n        //menuSearch\n        $data['topMenuRight'][] = '\n            <form action=\"' . sc_route('admin_cms_content.index') . '\" id=\"button_search\">\n            <div class=\"input-group input-group\" style=\"width: 250px;\">\n                <input type=\"text\" name=\"keyword\" class=\"form-control float-right\" placeholder=\"' . trans($this->plugin->pathPlugin.'::Content.admin.search_place') . '\" value=\"' . $keyword . '\">\n                <div class=\"input-group-append\">\n                    <button type=\"submit\" class=\"btn btn-primary\"><i class=\"fas fa-search\"></i></button>\n                </div>\n            </div>\n            </form>';\n        //=menuSearch\n\n        return view($this->templatePathAdmin.'screen.list')\n            ->with($data);\n    }\n\n    /**\n     * Form create new order in admin\n     * @return [type] [description]\n     */\n    public function create()\n    {\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Content.admin.add_new_title'),\n            'subTitle' => '',\n            'title_description' => trans($this->plugin->pathPlugin.'::Content.admin.add_new_des'),\n            'icon' => 'fa fa-plus',\n            'languages' => $this->languages,\n            'content' => [],\n            'categories' => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action' => sc_route('admin_cms_content.create'),\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_content')\n            ->with($data);\n    }\n\n    /**\n     * Post create new order in admin\n     * @return [type] [description]\n     */\n    public function postCreate()\n    {\n        $data = request()->all();\n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n        $validator = Validator::make($data, [\n            'sort' => 'numeric|min:0',\n            'category_id' => 'required',\n            'descriptions.*.title' => 'required|string|max:200',\n            'descriptions.*.keyword' => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n            'alias' => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_content_alias_unique',\n        ], [\n            'descriptions.*.title.required' => trans('validation.required', \n            ['attribute' => trans($this->plugin->pathPlugin.'::Content.title')]),\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Content.alias_validate'),\n            'alias.cms_content_alias_unique' => trans($this->plugin->pathPlugin.'::Content.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n        $dataInsert = [\n            'image'       => $data['image'],\n            'alias'       => $data['alias'],\n            'category_id' => (int) $data['category_id'],\n            'status'      => !empty($data['status']) ? 1 : 0,\n            'sort'        => (int) $data['sort'],\n            'store_id'    => session('adminStoreId'),\n        ];\n        $content = AdminCmsContent::createContentAdmin($dataInsert);\n        $id = $content->id;\n        $dataDes = [];\n        $languages = $this->languages;\n        foreach ($languages as $code => $value) {\n            $dataDes[] = [\n                'content_id' => $id,\n                'lang' => $code,\n                'title' => $data['descriptions'][$code]['title'],\n                'keyword' => $data['descriptions'][$code]['keyword'],\n                'description' => $data['descriptions'][$code]['description'],\n                'content' => $data['descriptions'][$code]['content'],\n            ];\n        }\n        AdminCmsContent::insertDescriptionAdmin($dataDes);\n        sc_clear_cache('cache_cms_content');\n        return redirect()->route('admin_cms_content.index')\n            ->with('success', trans($this->plugin->pathPlugin.'::Content.admin.create_success'));\n\n    }\n\n/**\n * Form edit\n */\n    public function edit($id)\n    {\n        $content = AdminCmsContent::getContentAdmin($id);\n\n        if (!$content) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n        $data = [\n            'title' => trans($this->plugin->pathPlugin.'::Content.admin.edit'),\n            'subTitle' => '',\n            'title_description' => '',\n            'icon' => 'fa fa-pencil-square-o',\n            'languages' => $this->languages,\n            'content' => $content,\n            'categories' => (new AdminCmsCategory)->getTreeCategoriesAdmin(),\n            'url_action' => sc_route('admin_cms_content.edit', ['id' => $content['id']]),\n\n        ];\n        return view($this->plugin->pathPlugin.'::Admin.cms_content')\n            ->with($data);\n    }\n\n/**\n * update status\n */\n    public function postEdit($id)\n    {\n        $content = AdminCmsContent::getContentAdmin($id);\n\n        if (!$content) {\n            return redirect()->route('admin.data_not_found')->with(['url' => url()->full()]);\n        }\n\n        $data = request()->all();\n        \n        $langFirst = array_key_first(sc_language_all()->toArray()); //get first code language active\n        $data['alias'] = !empty($data['alias'])?$data['alias']:$data['descriptions'][$langFirst]['title'];\n        $data['alias'] = sc_word_format_url($data['alias']);\n        $data['alias'] = sc_word_limit($data['alias'], 100);\n\n        $validator = Validator::make($data, [\n            'category_id' => 'required',\n            'alias' => 'required|regex:/(^([0-9A-Za-z\\-_]+)$)/|string|max:100|cms_content_alias_unique:'.$id,\n            'sort' => 'numeric|min:0',\n            'descriptions.*.title' => 'required|string|max:200',\n            'descriptions.*.keyword' => 'nullable|string|max:200',\n            'descriptions.*.description' => 'nullable|string|max:300',\n        ], [\n            'alias.regex' => trans($this->plugin->pathPlugin.'::Content.alias_validate'),\n            'descriptions.*.title.required' => trans('validation.required', ['attribute' => trans($this->plugin->pathPlugin.'::Content.title')]),\n            'alias.cms_content_alias_unique' => trans($this->plugin->pathPlugin.'::Content.alias_unique'),\n        ]);\n\n        if ($validator->fails()) {\n            return redirect()->back()\n                ->withErrors($validator)\n                ->withInput($data);\n        }\n//Edit\n        $store = $data['store'] ?? [];\n        $dataUpdate = [\n            'image'       => $data['image'],\n            'alias'       => $data['alias'],\n            'category_id' => $data['category_id'],\n            'sort'        => $data['sort'],\n            'status'      => empty($data['status']) ? 0 : 1,\n            'store_id'    => session('adminStoreId'),\n        ];\n\n        $content->update($dataUpdate);\n        $content->descriptions()->delete();\n        $dataDes = [];\n        foreach ($data['descriptions'] as $code => $row) {\n            $dataDes[] = [\n                'content_id'  => $id,\n                'lang'        => $code,\n                'title'       => $row['title'],\n                'keyword'     => $row['keyword'],\n                'description' => $row['description'],\n                'content'     => $row['content'],\n            ];\n        }\n        AdminCmsContent::insertDescriptionAdmin($dataDes);\n        sc_clear_cache('cache_cms_content');\n        return redirect()->route('admin_cms_content.index')->with('success', trans($this->plugin->pathPlugin.'::Content.admin.edit_success'));\n\n    }\n\n/*\nDelete list Item\nNeed mothod destroy to boot deleting in model\n */\n    public function deleteList()\n    {\n        if (!request()->ajax()) {\n            return response()->json(['error' => 1, 'msg' => 'Method not allow!']);\n        } else {\n            $ids = request('ids');\n            $arrID = explode(',', $ids);\n            $arrDontPermission = [];\n            foreach ($arrID as $key => $id) {\n                if(!$this->checkPermisisonItem($id)) {\n                    $arrDontPermission[] = $id;\n                }\n            }\n            if (count($arrDontPermission)) {\n                return response()->json(['error' => 1, 'msg' => trans('admin.remove_dont_permisison') . ': ' . json_encode($arrDontPermission)]);\n            }\n            AdminCmsContent::destroy($arrID);\n            sc_clear_cache('cache_cms_content');\n            return response()->json(['error' => 0, 'msg' => '']);\n        }\n    }\n\n    /**\n     * Check permisison item\n     */\n    public function checkPermisisonItem($id) {\n        return AdminCmsContent::getContentAdmin($id);\n    }\n\n}\n"], "filenames": ["app/Plugins/Cms/Content/Admin/CmsCategoryController.php", "app/Plugins/Cms/Content/Admin/CmsContentController.php"], "buggy_code_start_loc": [53, 51], "buggy_code_end_loc": [55, 53], "fixing_code_start_loc": [53, 51], "fixing_code_end_loc": [55, 53], "type": "CWE-79", "message": "This affects the package s-cart/core before 4.4. The search functionality of the admin dashboard in core/src/Admin/Controllers/AdminOrderController.phpindex is vulnerable to XSS.", "other": {"cve": {"id": "CVE-2020-28457", "sourceIdentifier": "report@snyk.io", "published": "2020-12-15T16:15:15.963", "lastModified": "2020-12-16T21:30:42.633", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package s-cart/core before 4.4. The search functionality of the admin dashboard in core/src/Admin/Controllers/AdminOrderController.phpindex is vulnerable to XSS."}, {"lang": "es", "value": "Esto afecta al paquete s-cart/core versiones anteriores a 4.4.&#xa0;La funcionalidad search del panel de administraci\u00f3n en el archivo core/src/Admin/Controllers/AdminOrderController.phpindex es vulnerable a un ataque de tipo XSS"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:s-cart:s-cart:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.4", "matchCriteriaId": "0AE3F2B2-1DF8-4087-83F6-C1A699A1A462"}]}]}], "references": [{"url": "https://github.com/s-cart/s-cart/commit/4406d407ad363ee7e4795ee290c9d2430b0413f8", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/s-cart/s-cart/issues/51", "source": "report@snyk.io", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/s-cart/s-cart/releases/tag/v4.4", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-PHP-SCARTCORE-1047342", "source": "report@snyk.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/s-cart/s-cart/commit/4406d407ad363ee7e4795ee290c9d2430b0413f8"}}