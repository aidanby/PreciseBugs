{"buggy_code": ["class Common < ActiveRecord::Base\n  include Wisper::Publisher\n  include MetaAttributes\n\n  extend ModelCsv  # To export to csv file\n\n  # Behaviors\n  acts_as_taggable\n  acts_as_paranoid\n\n  # Relations\n  belongs_to :customer, optional: true\n  belongs_to :series\n  belongs_to :print_template,\n    :class_name => 'Template',\n    :foreign_key => 'print_template_id',\n    optional: true\n  belongs_to :email_template,\n    :class_name => 'Template',\n    :foreign_key => 'email_template_id',\n    optional: true\n  has_many :items, -> {order(id: :asc)}, autosave: true, dependent: :destroy\n  accepts_nested_attributes_for :items,\n    :reject_if => :all_blank,\n    :allow_destroy => true\n\n  # Validations\n  validate :valid_customer_identification\n  validates :series, presence: true\n  # from https://emailregex.com/\n  validates :email,\n    format: {with: /\\A([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,})\\z/i,\n             message: \"Only valid emails\"}, allow_blank: true\n\n  # Events\n  after_save :purge_items\n  after_save :update_amounts\n  after_initialize :init\n\n  # Search\n  scope :with_terms, ->(terms) {\n    return nil if terms.empty?\n    joins(:items).where('name ILIKE :terms OR\n           email ILIKE :terms OR\n           identification ILIKE :terms OR\n           description ILIKE :terms',\n           terms: \"%#{terms}%\")\n  }\n\n  CSV_FIELDS = [\n    \"id\", \"customer_id\", \"name\",\n    \"identification\", \"email\",\n    \"invoicing_address\", \"shipping_address\",\n    \"contact_person\", \"terms\",\n    \"notes\", \"currency\",\n    \"net_amount\", \"tax_amount\", \"gross_amount\",\n    \"draft\", \"sent_by_email\",\n    \"created_at\", \"updated_at\",\n    \"print_template_id\"\n  ]\n\n  def init\n    begin\n      # Set defaults\n      unless self.id\n        self.series ||= Series.default\n        self.terms ||= Settings.legal_terms\n        self.currency ||= Settings.currency\n      end\n    # Using scope.select also triggers this init method\n    # so we have to deal with this exception\n    rescue ActiveModel::MissingAttributeError\n    end\n  end\n\n  # A hash with each tax amount rounded\n  def taxes\n    # Get taxes_hash for each item\n    tax_hashes = items.each.map {|item| item.taxes_hash}\n    # Sum and merge them\n    taxes = tax_hashes.inject({}) do |memo, el|\n      memo.merge(el){|k, old_v, new_v| old_v + new_v}\n    end\n    # Round of taxes is made over total of each tax\n    taxes.each do |tax, amount|\n      taxes[tax] = amount.round(currency_precision)\n    end\n  end\n\n  def have_items_discount?\n    items.each do |item|\n      if item.discount > 0\n        return true\n      end\n    end\n    false\n  end\n\n  # Total taxes amount added up\n  def tax_amount\n    self.taxes.values.reduce(0, :+)\n  end\n\n  # restore if soft deleted, along with its items\n  def back_from_death\n    restore! recursive: true\n  end\n\n  # Returns the invoice template if set, and the default otherwise\n  def get_print_template\n    return self.print_template ||\n      Template.find_by(print_default: true) ||\n      Template.first\n  end\n\n  # Returns the invoice template if set, and the default otherwise\n  def get_email_template\n    return self.email_template ||\n      Template.find_by(email_default: true) ||\n      Template.first\n  end\n\n  def set_amounts\n    self.net_amount = items.reduce(0) {|sum, item| sum + item.net_amount}\n    self.gross_amount = net_amount + tax_amount\n  end\n\n  def update_amounts\n    set_amounts\n    # Use update_columns to skip more callbacks\n    self.update_columns(net_amount: self.net_amount, gross_amount: self.gross_amount)\n  end\n\n  # make sure every soft-deleted item is really destroyed\n  def purge_items\n    items.only_deleted.delete_all\n  end\n\n  # csv format\n  def self.csv(results)\n    csv_stream(results, self::CSV_FIELDS, results.meta_attributes_keys)\n  end\n\n  # Triggers an event via Wisper\n  def trigger_event(event)\n    broadcast(event, self)\n  end\n\n  def get_currency\n    Money::Currency.find currency\n  end\n\n  def currency_precision\n    get_currency.exponent\n  end\n\nprotected\n\n  # Declare scopes for search\n  def self.ransackable_scopes(auth_object = nil)\n    [:with_terms]\n  end\n\nprivate\n\n  def valid_customer_identification\n    unless name? or identification?\n      errors.add :base, \"Customer name or identification is required.\"\n    end\n  end\n\nend\n", "class Customer < ActiveRecord::Base\n  include MetaAttributes\n\n  extend ModelCsv\n\n  acts_as_paranoid\n  has_many :invoices\n  has_many :estimates\n  has_many :recurring_invoices\n\n  # Validation\n  validate :valid_customer_identification\n  validates_uniqueness_of :name,  scope: :identification\n\n  # Behaviors\n  acts_as_taggable\n\n  before_destroy :check_invoices\n\n  CSV_FIELDS = [\n    \"id\", \"name\", \"identification\", \"email\", \"contact_person\",\n    \"invoicing_address\", \"shipping_address\", \"meta_attributes\",\n    \"active\"\n  ]\n\n  scope :with_terms, ->(terms) {\n    return nil if terms.empty?\n    where('name ILIKE :terms OR email ILIKE :terms OR identification ILIKE :terms', terms: '%' + terms + '%')\n  }\n\n  scope :only_active, ->(boolean = true) {\n    return nil unless boolean\n    where(active: true)\n  }\n\n  def total\n    invoices.where(draft: false, failed: false).sum :gross_amount || 0\n  end\n\n  def paid\n    invoices.where(draft: false, failed: false).sum :paid_amount || 0\n  end\n\n  def due\n    total - paid\n  end\n\n  def to_s\n    if name?\n      name\n    elsif identification?\n      identification\n    elsif email?\n      email\n    else\n      'Customer'\n    end\n  end\n\n  def to_jbuilder\n    Jbuilder.new do |json|\n      json.(self, *(attribute_names - [\"name_slug\", \"deleted_at\"]))\n    end\n  end\n\n  # csv format\n  def self.csv(results)\n    csv_stream(results, self::CSV_FIELDS, results.meta_attributes_keys)\n  end\n\n\nprivate\n\n  def check_invoices\n    if self.total > self.paid\n      errors[:base] << \"This customer can't be deleted because it has unpaid invoices\"\n      throw(:abort)\n    end\n  end\n\n  def self.ransackable_scopes(auth_object = nil)\n    [:with_terms, :only_active]\n  end\n\n  def valid_customer_identification\n    unless name? or identification?\n      errors.add :base, \"Name or identification is required.\"\n    end\n  end\n\nend\n", "Rails.application.configure do\n  # Settings specified here will take precedence over those in config/application.rb.\n\n  # Code is not reloaded between requests.\n  config.cache_classes = true\n\n  # Eager load code on boot. This eager loads most of Rails and\n  # your application in memory, allowing both threaded web servers\n  # and those relying on copy on write to perform better.\n  # Rake tasks automatically ignore this option for performance.\n  config.eager_load = true\n\n  # Full error reports are disabled and caching is turned on.\n  config.consider_all_requests_local       = false\n  config.action_controller.perform_caching = true\n\n  # Ensures that a master key has been made available in either ENV[\"RAILS_MASTER_KEY\"]\n  # or in config/master.key. This key is used to decrypt credentials (and other encrypted files).\n  # config.require_master_key = true\n\n  # Disable serving static files from the `/public` folder by default since\n  # Apache or NGINX already handles this.\n  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?\n\n  # Compress JavaScripts and CSS.\n  config.assets.js_compressor = :uglifier\n  # config.assets.css_compressor = :sass\n\n  # Do not fallback to assets pipeline if a precompiled asset is missed.\n  config.assets.compile = false\n\n  # `config.assets.precompile` and `config.assets.version` have moved to config/initializers/assets.rb\n\n  # Enable serving of images, stylesheets, and JavaScripts from an asset server.\n  # config.action_controller.asset_host = 'http://assets.example.com'\n\n  # Specifies the header that your server uses for sending files.\n  # config.action_dispatch.x_sendfile_header = 'X-Sendfile' # for Apache\n  # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for NGINX\n\n  # Store uploaded files on the local file system (see config/storage.yml for options)\n  config.active_storage.service = :local\n\n  # Mount Action Cable outside main process or domain\n  # config.action_cable.mount_path = nil\n  # config.action_cable.url = 'wss://example.com/cable'\n  # config.action_cable.allowed_request_origins = [ 'http://example.com', /http:\\/\\/example.*/ ]\n\n  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\n  # config.force_ssl = true\n\n  # Use the lowest log level to ensure availability of diagnostic information\n  # when problems arise.\n  config.log_level = :debug\n\n  # Prepend all log lines with the following tags.\n  config.log_tags = [ :request_id ]\n\n  # Use a different cache store in production.\n  # config.cache_store = :mem_cache_store\n\n  # Use a real queuing backend for Active Job (and separate queues per environment)\n  # config.active_job.queue_adapter     = :resque\n  # config.active_job.queue_name_prefix = \"siwapp_#{Rails.env}\"\n\n  config.action_mailer.perform_caching = false\n\n  # Ignore bad email addresses and do not raise email delivery errors.\n  # Set this to true and configure the email server for immediate delivery to raise delivery errors.\n  # config.action_mailer.raise_delivery_errors = false\n\n  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to\n  # the I18n.default_locale when a translation cannot be found).\n  config.i18n.fallbacks = true\n\n  # Send deprecation notices to registered listeners.\n  config.active_support.deprecation = :notify\n\n  # Use default logging formatter so that PID and timestamp are not suppressed.\n  config.log_formatter = ::Logger::Formatter.new\n\n  # Use a different logger for distributed setups.\n  # require 'syslog/logger'\n  # config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new 'app-name')\n\n  if ENV[\"RAILS_LOG_TO_STDOUT\"].present?\n    logger           = ActiveSupport::Logger.new(STDOUT)\n    logger.formatter = config.log_formatter\n    config.logger    = ActiveSupport::TaggedLogging.new(logger)\n  end\n\n  # Do not dump schema after migrations.\n  config.active_record.dump_schema_after_migration = false\nend\n", "class DefaultForEnabled < ActiveRecord::Migration\n  def change\n    change_column_default(:commons, :enabled, true)\n    change_column_default(:commons, :draft, false)\n  end\nend\n", "class AddIndexesOnDeletedColumn < ActiveRecord::Migration\n  def change\n    add_index :commons, :deleted_at\n    add_index :customers, :deleted_at\n    add_index :items, :deleted_at\n    add_index :payments, :deleted_at\n    add_index :products, :deleted_at\n    add_index :series, :deleted_at\n    add_index :taxes, :deleted_at\n    add_index :templates, :deleted_at\n  end\nend\n", "class RemoveStatusFromCommons < ActiveRecord::Migration\n  def change\n    remove_column :commons, :status\n  end\nend\n", "class AddActiveToCustomer < ActiveRecord::Migration\n  def up\n    add_column :customers, :active, :boolean, default: true\n    Customer.update_all [\"active = ?\", true]\n  end\n\n  def down\n    remove_column :customers, :active\n  end\n\nend\n", "class AddFailedToCommons < ActiveRecord::Migration\n  def change\n    add_column :commons, :failed, :boolean, default: false\n  end\nend\n", "class SeriesFirstNumber < ActiveRecord::Migration\n  def change\n  \tadd_column :series, :first_number, :integer, default: 1\n  \tremove_column :series, :next_number\n  end\nend\n", "class EmailAndPrintTemplateToCommon < ActiveRecord::Migration\n  def change\n  \trename_column :commons, :template_id, :print_template_id\n  \tadd_column :commons, :email_template_id, :integer\n  end\nend\n", "class EmailAndPrintDefaultTemplatesToTemplate < ActiveRecord::Migration\n  def change\n  \trename_column :templates, :default, :print_default\n  \tadd_column :templates, :email_default, :boolean, default: false\n  end\nend\n", "class ChangeCustomerIndex < ActiveRecord::Migration\n  def change\n  \tremove_index \"customers\", name: \"cstm_idx\"\n  \tadd_index \"customers\", [\"name\", \"identification\"], name: \"cstm_idx\", unique: true, using: :btree\n  end\nend\n", "class AddTemplateSubject < ActiveRecord::Migration\n  def change\n  \tadd_column :templates, :subject, :string, limit: 200\n  end\nend\n", "class AddInvoiceNumberUniqueNumber < ActiveRecord::Migration\n  def change\n  \tadd_index \"commons\", [\"number\", \"series_id\"], name: \"common_unique_number_idx\", unique: true, using: :btree\n  end\nend\n", "class RemoveTaxAmount < ActiveRecord::Migration\n  def change\n    remove_column :commons, :tax_amount\n  end\nend\n", "class RemoveCommonsAmounts < ActiveRecord::Migration\n  def change\n    remove_column :commons, :discount_amount\n    remove_column :commons, :base_amount\n  end\nend\n", "class RemoveInvoiceUniqueNumber < ActiveRecord::Migration\n  def change\n    remove_index \"commons\", name: \"common_unique_number_idx\"\n  end\nend\n", "class RemoveCustomersUniqueName < ActiveRecord::Migration\n  def change\n    remove_index \"customers\", name: \"cstm_idx\"\n  end\nend\n", "class AddUniqueIndexToInvoiceSeriesAndNumber < ActiveRecord::Migration\n  def change\n    add_index \"commons\", [\"series_id\", \"number\"], name: \"common_unique_number_idx\", unique: true, using: :btree\n  end\nend\n", "class AddDeletedNumberToCommons < ActiveRecord::Migration\n  def change\n    add_column :commons, :deleted_number, :integer, default: nil\n    add_index \"commons\", [\"series_id\", \"deleted_number\"], name: \"common_deleted_number_idx\", using: :btree\n  end\nend\n", "class AddCommonsCustomerIdNotNull < ActiveRecord::Migration\n  def change\n      change_column :commons, :customer_id, :integer, :null => false\n  end\nend\n", "class AddCurrencyToCommons < ActiveRecord::Migration\n  def up\n    add_column :commons, :currency, :string, limit: 3\n    currency = Settings.currency\n    Common.find_each do |common|\n      common.currency = currency\n      common.save!\n    end\n  end\n\n  def down\n    remove_column :commons, :currency\n  end\nend\n"], "fixing_code": ["class Common < ActiveRecord::Base\n  include Wisper::Publisher\n  include MetaAttributes\n\n  extend ModelCsv  # To export to csv file\n\n  # Behaviors\n  acts_as_taggable\n  acts_as_paranoid\n\n  # Relations\n  belongs_to :customer, optional: true\n  belongs_to :series\n  belongs_to :print_template,\n    :class_name => 'Template',\n    :foreign_key => 'print_template_id',\n    optional: true\n  belongs_to :email_template,\n    :class_name => 'Template',\n    :foreign_key => 'email_template_id',\n    optional: true\n  has_many :items, -> {order(id: :asc)}, autosave: true, dependent: :destroy\n  accepts_nested_attributes_for :items,\n    :reject_if => :all_blank,\n    :allow_destroy => true\n\n  # Validations\n  validate :valid_customer_identification\n  validates :series, presence: true\n  # from https://emailregex.com/\n  validates :email,\n    format: {with: /\\A([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,})\\z/i,\n             message: \"Only valid emails\"}, allow_blank: true\n  validates :invoicing_address, format: { without: /<(.*)>.*?|<(.*) \\/>/,\n    message: \"wrong format\" }\n  validates :shipping_address, format: { without: /<(.*)>.*?|<(.*) \\/>/,\n    message: \"wrong format\" }\n\n  # Events\n  after_save :purge_items\n  after_save :update_amounts\n  after_initialize :init\n\n  # Search\n  scope :with_terms, ->(terms) {\n    return nil if terms.empty?\n    joins(:items).where('name ILIKE :terms OR\n           email ILIKE :terms OR\n           identification ILIKE :terms OR\n           description ILIKE :terms',\n           terms: \"%#{terms}%\")\n  }\n\n  CSV_FIELDS = [\n    \"id\", \"customer_id\", \"name\",\n    \"identification\", \"email\",\n    \"invoicing_address\", \"shipping_address\",\n    \"contact_person\", \"terms\",\n    \"notes\", \"currency\",\n    \"net_amount\", \"tax_amount\", \"gross_amount\",\n    \"draft\", \"sent_by_email\",\n    \"created_at\", \"updated_at\",\n    \"print_template_id\"\n  ]\n\n  def init\n    begin\n      # Set defaults\n      unless self.id\n        self.series ||= Series.default\n        self.terms ||= Settings.legal_terms\n        self.currency ||= Settings.currency\n      end\n    # Using scope.select also triggers this init method\n    # so we have to deal with this exception\n    rescue ActiveModel::MissingAttributeError\n    end\n  end\n\n  # A hash with each tax amount rounded\n  def taxes\n    # Get taxes_hash for each item\n    tax_hashes = items.each.map {|item| item.taxes_hash}\n    # Sum and merge them\n    taxes = tax_hashes.inject({}) do |memo, el|\n      memo.merge(el){|k, old_v, new_v| old_v + new_v}\n    end\n    # Round of taxes is made over total of each tax\n    taxes.each do |tax, amount|\n      taxes[tax] = amount.round(currency_precision)\n    end\n  end\n\n  def have_items_discount?\n    items.each do |item|\n      if item.discount > 0\n        return true\n      end\n    end\n    false\n  end\n\n  # Total taxes amount added up\n  def tax_amount\n    self.taxes.values.reduce(0, :+)\n  end\n\n  # restore if soft deleted, along with its items\n  def back_from_death\n    restore! recursive: true\n  end\n\n  # Returns the invoice template if set, and the default otherwise\n  def get_print_template\n    return self.print_template ||\n      Template.find_by(print_default: true) ||\n      Template.first\n  end\n\n  # Returns the invoice template if set, and the default otherwise\n  def get_email_template\n    return self.email_template ||\n      Template.find_by(email_default: true) ||\n      Template.first\n  end\n\n  def set_amounts\n    self.net_amount = items.reduce(0) {|sum, item| sum + item.net_amount}\n    self.gross_amount = net_amount + tax_amount\n  end\n\n  def update_amounts\n    set_amounts\n    # Use update_columns to skip more callbacks\n    self.update_columns(net_amount: self.net_amount, gross_amount: self.gross_amount)\n  end\n\n  # make sure every soft-deleted item is really destroyed\n  def purge_items\n    items.only_deleted.delete_all\n  end\n\n  # csv format\n  def self.csv(results)\n    csv_stream(results, self::CSV_FIELDS, results.meta_attributes_keys)\n  end\n\n  # Triggers an event via Wisper\n  def trigger_event(event)\n    broadcast(event, self)\n  end\n\n  def get_currency\n    Money::Currency.find currency\n  end\n\n  def currency_precision\n    get_currency.exponent\n  end\n\nprotected\n\n  # Declare scopes for search\n  def self.ransackable_scopes(auth_object = nil)\n    [:with_terms]\n  end\n\nprivate\n\n  def valid_customer_identification\n    unless name? or identification?\n      errors.add :base, \"Customer name or identification is required.\"\n    end\n  end\n\nend\n", "class Customer < ActiveRecord::Base\n  include MetaAttributes\n\n  extend ModelCsv\n\n  acts_as_paranoid\n  has_many :invoices\n  has_many :estimates\n  has_many :recurring_invoices\n\n  # Validation\n  validate :valid_customer_identification\n  validates_uniqueness_of :name,  scope: :identification\n  validates :invoicing_address, format: { without: /<(.*)>.*?|<(.*) \\/>/,\n    message: \"Wrong address format\" }\n  validates :shipping_address, format: { without: /<(.*)>.*?|<(.*) \\/>/,\n    message: \"Wrong address format\" }\n\n  # Behaviors\n  acts_as_taggable\n\n  before_destroy :check_invoices\n\n  CSV_FIELDS = [\n    \"id\", \"name\", \"identification\", \"email\", \"contact_person\",\n    \"invoicing_address\", \"shipping_address\", \"meta_attributes\",\n    \"active\"\n  ]\n\n  scope :with_terms, ->(terms) {\n    return nil if terms.empty?\n    where('name ILIKE :terms OR email ILIKE :terms OR identification ILIKE :terms', terms: '%' + terms + '%')\n  }\n\n  scope :only_active, ->(boolean = true) {\n    return nil unless boolean\n    where(active: true)\n  }\n\n  def total\n    invoices.where(draft: false, failed: false).sum :gross_amount || 0\n  end\n\n  def paid\n    invoices.where(draft: false, failed: false).sum :paid_amount || 0\n  end\n\n  def due\n    total - paid\n  end\n\n  def to_s\n    if name?\n      name\n    elsif identification?\n      identification\n    elsif email?\n      email\n    else\n      'Customer'\n    end\n  end\n\n  def to_jbuilder\n    Jbuilder.new do |json|\n      json.(self, *(attribute_names - [\"name_slug\", \"deleted_at\"]))\n    end\n  end\n\n  # csv format\n  def self.csv(results)\n    csv_stream(results, self::CSV_FIELDS, results.meta_attributes_keys)\n  end\n\n\nprivate\n\n  def check_invoices\n    if self.total > self.paid\n      errors[:base] << \"This customer can't be deleted because it has unpaid invoices\"\n      throw(:abort)\n    end\n  end\n\n  def self.ransackable_scopes(auth_object = nil)\n    [:with_terms, :only_active]\n  end\n\n  def valid_customer_identification\n    unless name? or identification?\n      errors.add :base, \"Name or identification is required.\"\n    end\n  end\n\nend\n", "Rails.application.configure do\n  # Settings specified here will take precedence over those in config/application.rb.\n\n  # Code is not reloaded between requests.\n  config.cache_classes = true\n\n  # Eager load code on boot. This eager loads most of Rails and\n  # your application in memory, allowing both threaded web servers\n  # and those relying on copy on write to perform better.\n  # Rake tasks automatically ignore this option for performance.\n  config.eager_load = true\n\n  # Full error reports are disabled and caching is turned on.\n  config.consider_all_requests_local       = false\n  config.action_controller.perform_caching = true\n\n  # Ensures that a master key has been made available in either ENV[\"RAILS_MASTER_KEY\"]\n  # or in config/master.key. This key is used to decrypt credentials (and other encrypted files).\n  # config.require_master_key = true\n\n  # Disable serving static files from the `/public` folder by default since\n  # Apache or NGINX already handles this.\n  config.public_file_server.enabled = ENV['RAILS_SERVE_STATIC_FILES'].present?\n\n  # Compress JavaScripts and CSS.\n  config.assets.js_compressor = :uglifier\n  # config.assets.css_compressor = :sass\n\n  # Do not fallback to assets pipeline if a precompiled asset is missed.\n  config.assets.compile = false\n\n  # `config.assets.precompile` and `config.assets.version` have moved to config/initializers/assets.rb\n\n  # Enable serving of images, stylesheets, and JavaScripts from an asset server.\n  # config.action_controller.asset_host = 'http://assets.example.com'\n\n  # Specifies the header that your server uses for sending files.\n  # config.action_dispatch.x_sendfile_header = 'X-Sendfile' # for Apache\n  # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for NGINX\n\n  # Store uploaded files on the local file system (see config/storage.yml for options)\n  config.active_storage.service = :local\n\n  # Mount Action Cable outside main process or domain\n  # config.action_cable.mount_path = nil\n  # config.action_cable.url = 'wss://example.com/cable'\n  # config.action_cable.allowed_request_origins = [ 'http://example.com', /http:\\/\\/example.*/ ]\n\n  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.\n  config.force_ssl = ENV['NO_FORCE_SSL'].present? ? false : true\n\n  # Use the lowest log level to ensure availability of diagnostic information\n  # when problems arise.\n  config.log_level = :debug\n\n  # Prepend all log lines with the following tags.\n  config.log_tags = [ :request_id ]\n\n  # Use a different cache store in production.\n  # config.cache_store = :mem_cache_store\n\n  # Use a real queuing backend for Active Job (and separate queues per environment)\n  # config.active_job.queue_adapter     = :resque\n  # config.active_job.queue_name_prefix = \"siwapp_#{Rails.env}\"\n\n  config.action_mailer.perform_caching = false\n\n  # Ignore bad email addresses and do not raise email delivery errors.\n  # Set this to true and configure the email server for immediate delivery to raise delivery errors.\n  # config.action_mailer.raise_delivery_errors = false\n\n  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to\n  # the I18n.default_locale when a translation cannot be found).\n  config.i18n.fallbacks = true\n\n  # Send deprecation notices to registered listeners.\n  config.active_support.deprecation = :notify\n\n  # Use default logging formatter so that PID and timestamp are not suppressed.\n  config.log_formatter = ::Logger::Formatter.new\n\n  # Use a different logger for distributed setups.\n  # require 'syslog/logger'\n  # config.logger = ActiveSupport::TaggedLogging.new(Syslog::Logger.new 'app-name')\n\n  if ENV[\"RAILS_LOG_TO_STDOUT\"].present?\n    logger           = ActiveSupport::Logger.new(STDOUT)\n    logger.formatter = config.log_formatter\n    config.logger    = ActiveSupport::TaggedLogging.new(logger)\n  end\n\n  # Do not dump schema after migrations.\n  config.active_record.dump_schema_after_migration = false\nend\n", "class DefaultForEnabled < ActiveRecord::Migration[4.2]\n  def change\n    change_column_default(:commons, :enabled, true)\n    change_column_default(:commons, :draft, false)\n  end\nend\n", "class AddIndexesOnDeletedColumn < ActiveRecord::Migration[4.2]\n  def change\n    add_index :commons, :deleted_at\n    add_index :customers, :deleted_at\n    add_index :items, :deleted_at\n    add_index :payments, :deleted_at\n    add_index :products, :deleted_at\n    add_index :series, :deleted_at\n    add_index :taxes, :deleted_at\n    add_index :templates, :deleted_at\n  end\nend\n", "class RemoveStatusFromCommons < ActiveRecord::Migration[4.2]\n  def change\n    remove_column :commons, :status\n  end\nend\n", "class AddActiveToCustomer < ActiveRecord::Migration[4.2]\n  def up\n    add_column :customers, :active, :boolean, default: true\n    Customer.update_all [\"active = ?\", true]\n  end\n\n  def down\n    remove_column :customers, :active\n  end\n\nend\n", "class AddFailedToCommons < ActiveRecord::Migration[4.2]\n  def change\n    add_column :commons, :failed, :boolean, default: false\n  end\nend\n", "class SeriesFirstNumber < ActiveRecord::Migration[4.2]\n  def change\n  \tadd_column :series, :first_number, :integer, default: 1\n  \tremove_column :series, :next_number\n  end\nend\n", "class EmailAndPrintTemplateToCommon < ActiveRecord::Migration[4.2]\n  def change\n  \trename_column :commons, :template_id, :print_template_id\n  \tadd_column :commons, :email_template_id, :integer\n  end\nend\n", "class EmailAndPrintDefaultTemplatesToTemplate < ActiveRecord::Migration[4.2]\n  def change\n  \trename_column :templates, :default, :print_default\n  \tadd_column :templates, :email_default, :boolean, default: false\n  end\nend\n", "class ChangeCustomerIndex < ActiveRecord::Migration[4.2]\n  def change\n  \tremove_index \"customers\", name: \"cstm_idx\"\n  \tadd_index \"customers\", [\"name\", \"identification\"], name: \"cstm_idx\", unique: true, using: :btree\n  end\nend\n", "class AddTemplateSubject < ActiveRecord::Migration[4.2]\n  def change\n  \tadd_column :templates, :subject, :string, limit: 200\n  end\nend\n", "class AddInvoiceNumberUniqueNumber < ActiveRecord::Migration[4.2]\n  def change\n  \tadd_index \"commons\", [\"number\", \"series_id\"], name: \"common_unique_number_idx\", unique: true, using: :btree\n  end\nend\n", "class RemoveTaxAmount < ActiveRecord::Migration[4.2]\n  def change\n    remove_column :commons, :tax_amount\n  end\nend\n", "class RemoveCommonsAmounts < ActiveRecord::Migration[4.2]\n  def change\n    remove_column :commons, :discount_amount\n    remove_column :commons, :base_amount\n  end\nend\n", "class RemoveInvoiceUniqueNumber < ActiveRecord::Migration[4.2]\n  def change\n    remove_index \"commons\", name: \"common_unique_number_idx\"\n  end\nend\n", "class RemoveCustomersUniqueName < ActiveRecord::Migration[4.2]\n  def change\n    remove_index \"customers\", name: \"cstm_idx\"\n  end\nend\n", "class AddUniqueIndexToInvoiceSeriesAndNumber < ActiveRecord::Migration[4.2]\n  def change\n    add_index \"commons\", [\"series_id\", \"number\"], name: \"common_unique_number_idx\", unique: true, using: :btree\n  end\nend\n", "class AddDeletedNumberToCommons < ActiveRecord::Migration[4.2]\n  def change\n    add_column :commons, :deleted_number, :integer, default: nil\n    add_index \"commons\", [\"series_id\", \"deleted_number\"], name: \"common_deleted_number_idx\", using: :btree\n  end\nend\n", "class AddCommonsCustomerIdNotNull < ActiveRecord::Migration[4.2]\n  def change\n      change_column :commons, :customer_id, :integer, :null => false\n  end\nend\n", "class AddCurrencyToCommons < ActiveRecord::Migration[4.2]\n  def up\n    add_column :commons, :currency, :string, limit: 3\n    currency = Settings.currency\n    Common.find_each do |common|\n      common.currency = currency\n      common.save!\n    end\n  end\n\n  def down\n    remove_column :commons, :currency\n  end\nend\n"], "filenames": ["app/models/common.rb", "app/models/customer.rb", "config/environments/production.rb", "db/migrate/20160907152236_default_for_enabled.rb", "db/migrate/20160908093323_add_indexes_on_deleted_column.rb", "db/migrate/20160913081503_remove_status_from_commons.rb", "db/migrate/20160915000824_add_active_to_customer.rb", "db/migrate/20160915094942_add_failed_to_commons.rb", "db/migrate/20160923100618_series_first_number.rb", "db/migrate/20160929124104_email_and_print_template_to_common.rb", "db/migrate/20160929133954_email_and_print_default_templates_to_template.rb", "db/migrate/20161025134552_change_customer_index.rb", "db/migrate/20161026092553_add_template_subject.rb", "db/migrate/20161028103504_add_invoice_number_unique_number.rb", "db/migrate/20161207184222_remove_tax_amount.rb", "db/migrate/20161208171651_remove_commons_amounts.rb", "db/migrate/20170112115658_remove_invoice_unique_number.rb", "db/migrate/20170209101048_remove_customers_unique_name.rb", "db/migrate/20170216122053_add_unique_index_to_invoice_series_and_number.rb", "db/migrate/20170217120023_add_deleted_number_to_commons.rb", "db/migrate/20170223101022_add_commons_customer_id_not_null.rb", "db/migrate/20170608155530_add_currency_to_commons.rb"], "buggy_code_start_loc": [33, 13, 50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "buggy_code_end_loc": [33, 13, 51, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], "fixing_code_start_loc": [34, 14, 50, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], "fixing_code_end_loc": [38, 18, 51, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2], "type": "CWE-79", "message": "A vulnerability was found in siwapp-ror. It has been rated as problematic. This issue affects some unknown processing. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 924d16008cfcc09356c87db01848e45290cb58ca. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216467.", "other": {"cve": {"id": "CVE-2021-4265", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-21T19:15:12.653", "lastModified": "2022-12-27T22:46:11.350", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in siwapp-ror. It has been rated as problematic. This issue affects some unknown processing. The manipulation leads to cross site scripting. The attack may be initiated remotely. The name of the patch is 924d16008cfcc09356c87db01848e45290cb58ca. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216467."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:siwapp:siwapp-ror:*:*:*:*:*:*:*:*", "versionEndExcluding": "2021-10-19", "matchCriteriaId": "A5CF89CD-33D9-4BF2-ACB4-38B07C174900"}]}]}], "references": [{"url": "https://github.com/siwapp/siwapp-ror/commit/924d16008cfcc09356c87db01848e45290cb58ca", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/siwapp/siwapp-ror/pull/365", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216467", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/siwapp/siwapp-ror/commit/924d16008cfcc09356c87db01848e45290cb58ca"}}