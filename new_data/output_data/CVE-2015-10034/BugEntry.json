{"buggy_code": ["package controllers;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport models.Secured;\nimport play.data.DynamicForm;\nimport play.data.Form;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport play.mvc.Security;\nimport database.UsersDao;\n\n@Security.Authenticated(Secured.class)\npublic class AccountController extends Controller {\n\t\n\tpublic static Result changePassword() {\n\t\tDynamicForm requestData = Form.form().bindFromRequest();\n\t\tString oldPassword = requestData.get(\"oldPassword\");\n\t\tString newPassword = requestData.get(\"newPassword\");\n\t\tString repeatedPassword = requestData.get(\"repeatedPassword\");\n\t\t\n\t\tif (newPassword.equals(repeatedPassword)) {\n\t\t\tif (UsersDao.get().checkPasswordForUser(session().get(Application.USER_ID), oldPassword)) {\n\t\t\t\tUsersDao.get().changePassword(session().get(Application.USER_ID), newPassword);\n\t\t\t\treturn ok();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn badRequest(\"Old password is incorrect!\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn badRequest(\"New and repeated passwords are different!\");\n\t\t}\n\t}\n\t\n\tpublic static Result changeUserInfo() {\n\t\tString userId = session(Application.USER_ID);\n\t\tDynamicForm requestData = Form.form().bindFromRequest();\n\t\tString weight = requestData.get(\"weight\");\n\t\tString height = requestData.get(\"height\");\n\t\tString dateOfBirth = requestData.get(\"dateOfBirth\");\n\n\t\tMap<String, String> toUpdate = new HashMap<String, String>();\n\t\tif (!weight.equals(\"\")) {\n\t\t\ttoUpdate.put(\"weight\", weight);\n\t\t}\n\t\tif (!height.equals(\"\")) {\n\t\t\ttoUpdate.put(\"height\", height);\n\t\t}\n\t\tif (!dateOfBirth.equals(\"\")) {\n\t\t\ttoUpdate.put(\"date_of_birth\", dateOfBirth);\n\t\t}\n\t\t\n\n\t\tif (toUpdate.size() > 0 && UsersDao.get().update(userId, toUpdate)) {\n\t\t\treturn ok();\n\t\t}\n\t\telse {\n\t\t\treturn badRequest();\n\t\t}\n\t}\n}\n", "package controllers;\n\nimport java.util.List;\n\nimport models.News;\nimport models.Secured;\nimport models.Stranger;\nimport models.User;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport play.mvc.Security;\nimport views.html.account;\nimport views.html.index;\nimport database.NewsDao;\nimport database.UsersDao;\n\n@Security.Authenticated(Secured.class)\npublic class Application extends Controller {\n\t\n\tpublic static final String USER_ID = \"user_id\";\n\t\n\tpublic static final String HOME = \"/home\";\n\tpublic static final String LOGIN = \"/login\";\n\n    public static Result home() {\n    \tString userId = session(USER_ID);\n    \tif (userId == null) {\n    \t\treturn redirect(LOGIN);\n    \t}\n    \telse {\n    \t\tList<Stranger> strangers = UsersDao.get().getStrangersForUser(Integer.parseInt(userId));\n    \t\tList<User> friendshipRequests = UsersDao.get().getFriendshipRequests(Integer.parseInt(userId));\n    \t\tList<News> news = NewsDao.get().getNews(Integer.parseInt(userId));\n    \t\treturn ok(index.render(news, strangers, friendshipRequests));\n    \t}\n    }\n    \n    public static Result editAccountSettings() {\n    \tUser user = UsersDao.get().getById(session(USER_ID)); //TODO change session to userId\n    \treturn ok(account.render(user));\n    }\n\n}\n", "package controllers;\n\nimport models.User;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport database.UsersDao;\nimport views.html.user_info;\n\npublic class UsersController extends Controller {\n\n\tpublic static Result invite(int requestedUserId) {\n\t\ttry {\n\t\t\tint userId = Integer.parseInt(session(\"user_id\"));\n\t\t\tUsersDao.get().inviteUser(userId, requestedUserId);\n\t\t\treturn ok();\n\t\t} catch (Exception e) {\n\t\t\treturn badRequest();\n\t\t}\n\t}\n\n\tpublic static Result decline(int requesingUserId) {\n\t\ttry {\n\t\t\tint userId = Integer.parseInt(session(\"user_id\"));\n\t\t\tUsersDao.get().removeRequest(userId, requesingUserId);\n\t\t\treturn ok();\n\t\t} catch (Exception e) {\n\t\t\treturn badRequest();\n\t\t}\n\t}\n\t\n\tpublic static Result showUser(int foreignerId) {\n\t\tint userId = Integer.parseInt(session(\"user_id\"));\n\t\tUser user = UsersDao.get().getById(foreignerId + \"\");\n\t\tboolean isYourFriend = UsersDao.get().areFriends(userId, foreignerId);\n\t\tif (user != null) {\n\t\t\treturn ok(user_info.render(user, isYourFriend));\t\t\t\n\t\t}\n\t\telse {\n\t\t\treturn badRequest();\n\t\t}\n\t}\n}\n", "package database;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport models.Exercise;\nimport models.ExerciseResult;\nimport models.MuscleGroup;\nimport play.db.DB;\n\npublic class ExerciseDao {\n\t\n\tpublic static ExerciseDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tpublic List<Exercise> getAll() {\n\t\tList<Exercise> exercises = new ArrayList<Exercise>();\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet exerciseSet = statement.executeQuery(\n\t\t\t\t\t\"SELECT exercises.*, rating, ratings_count, \"\n\t\t\t\t\t+ \" ARRAY_AGG(muscle_name) AS target_muscles \"\n\t\t\t\t\t+ \"FROM exercises \"\n\t\t\t\t\t+ \"LEFT JOIN (\"\n\t\t\t\t\t+ \"\tSELECT exercise_id, AVG(rating) AS rating,\"\n\t\t\t\t\t+ \"  COUNT(rating) AS ratings_count\"\n\t\t\t\t\t+ \"\tFROM exercise_ratings\"\n\t\t\t\t\t+ \" GROUP BY exercise_id\"\n\t\t\t\t\t+ \") exercise_ratings USING (exercise_id) \"\n\t\t\t\t\t+ \"LEFT JOIN target_muscles USING (exercise_id) \"\n\t\t\t\t\t+ \"GROUP BY exercises.exercise_id, rating, ratings_count \"\n\t\t\t\t\t+ \"ORDER BY exercises.exercise_name\");\n\t\t\t\n\t\t\twhile (exerciseSet.next()) {\n\t\t\t\tExercise e = new Exercise();\n\t\t\t\te.setId(exerciseSet.getInt(\"exercise_id\"));\n\t\t\t\te.setName(exerciseSet.getString(\"exercise_name\"));\n\t\t\t\te.setDescription(exerciseSet.getString(\"description\"));\n\t\t\t\te.setMovieUri(exerciseSet.getString(\"movie_uri\"));\n\t\t\t\te.setRating(exerciseSet.getDouble(\"rating\"));\n\t\t\t\te.setRatingsCount(exerciseSet.getInt(\"ratings_count\"));\n\n\t\t\t\tResultSet targetMuscleSet = exerciseSet.getArray(\"target_muscles\").getResultSet();\n\t\t\t\tSet<MuscleGroup> targetMuscles = new HashSet<MuscleGroup>();\n\n\t\t\t\twhile (targetMuscleSet.next()) {\n\t\t\t\t\tMuscleGroup muscleGroup = new MuscleGroup();\n\t\t\t\t\tmuscleGroup.setMuscleName(targetMuscleSet.getString(2));\n\n\t\t\t\t\ttargetMuscles.add(muscleGroup);\n\t\t\t\t}\n\n\t\t\t\ttargetMuscleSet.close();\n\t\t\t\te.setTargetMuscles(targetMuscles);\n\n\t\t\t\texercises.add(e);\n\t\t\t}\n\t\t\t\n\t\t\texerciseSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn exercises;\n\t}\n\t\n\tpublic List<Exercise> filter(String muscleName) {\n\t\tMuscleGroup muscle = new MuscleGroup(muscleName);\n\t\tList<Exercise> result = new ArrayList<Exercise>();\n\t\tfor (Exercise ex : getAll()) {\n\t\t\tif (ex.getTargetMuscles().contains(muscle)) {\n\t\t\t\tresult.add(ex);\n\t\t\t}\n\t\t}\t\t\n\t\treturn result;\n\t}\n\t\n\tpublic void rateExercise(int userId, int exerciseId, int rating) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tString sql = connection.nativeSQL(\"INSERT INTO exercise_ratings(user_id, exercise_id, rating) VALUES\" + \n\t\t\t\t\t\"  (\" + userId + \", \" + exerciseId + \", \" + rating + \");\");\n\t\t\tplay.Logger.info(\"Insert exercise_rating: \" + sql);\n\t\t\tconnection.createStatement().execute(sql);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static final ExerciseDao INSTANCE = new ExerciseDao();\n\t\n\tprivate ExerciseDao() {}\n\n\tpublic ExerciseResult getBestForUser(String userId, int exerciseId) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT weight, set_count, reps_per_set\" + \n\t\t\t\t\t\"\t\tFROM workout_entries\" + \n\t\t\t\t\t\"\t\tJOIN workouts USING (workout_id)\" + \n\t\t\t\t\t\"\t\tWHERE user_id = \" + userId + \" AND exercise_id = \" + exerciseId + \n\t\t\t\t\t\"\t\tORDER BY weight\" + \n\t\t\t\t\t\"\t\tLIMIT 1;\");\n\t\t\tExerciseResult result = null;\n\t\t\tif (resultSet.next()) {\n\t\t\t\tresult = new ExerciseResult();\n\t\t\t\tresult.setRepsPerSet(resultSet.getInt(\"reps_per_set\"));\n\t\t\t\tresult.setSetCount(resultSet.getInt(\"set_count\"));\n\t\t\t\tresult.setWeight(resultSet.getInt(\"weight\"));\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\treturn result;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", "package database;\n\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Address;\nimport models.Coordinates;\nimport models.Gym;\nimport play.db.DB;\n\npublic class GymsDao {\n\t\n\tpublic static GymsDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tpublic List<Gym> getAll() {\n\t\tList<Gym> gyms = new ArrayList<Gym>();\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(\n\t\t\t\t\t\"SELECT gyms.*, AVG(rating) AS rating, COUNT(rating) as ratings_count \"\n\t\t\t\t\t+ \"FROM gyms \"\n\t\t\t\t\t+ \"LEFT JOIN gym_ratings USING (gym_id) \"\n\t\t\t\t\t+ \"GROUP BY gyms.gym_id\");\n\t\t\t\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tint id = resultSet.getInt(\"gym_id\");\n\t\t\t\tString name = resultSet.getString(\"gym_name\");\n\t\t\t\tString city = resultSet.getString(\"city\");\n\t\t\t\tString street = resultSet.getString(\"street\");\n\t\t\t\tdouble longitude = resultSet.getDouble(\"longitude\");\n\t\t\t\tdouble latitude = resultSet.getDouble(\"latitude\");\n\t\t\t\tString url = resultSet.getString(\"url\");\n\t\t\t\tGym g = new Gym(id, name, new Address(city, street, new Coordinates(longitude, latitude))); //TODO if not defined\n\t\t\t\tg.setUrl(url);\n\t\t\t\tg.setRating(resultSet.getDouble(\"rating\"));\n\t\t\t\tg.setRatingsCount(resultSet.getInt(\"ratings_count\"));\n\t\t\t\tgyms.add(g);\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn gyms;\n\t}\n\t\n\tpublic void rateGym(int userId, int gymId, int rating) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tString sql = connection.nativeSQL(\"INSERT INTO gym_ratings(user_id, gym_id, rating) VALUES\" + \n\t\t\t\t\t\"  (\" + userId + \", \" + gymId + \", \" + rating + \");\");\n\t\t\tplay.Logger.info(\"Insert gym_rating: \" + sql);\n\t\t\tconnection.createStatement().execute(sql);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static final GymsDao INSTANCE = new GymsDao();\n\t\n\tprivate GymsDao() {}\n\n\tpublic Gym getById(int gymId) {\n\t\tGym g = null;\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(\n\t\t\t\t\t\"SELECT gyms.*, AVG(rating) AS rating, COUNT(rating) as ratings_count \"\n\t\t\t\t\t+ \"FROM gyms \"\n\t\t\t\t\t+ \"LEFT JOIN gym_ratings USING (gym_id) \"\n\t\t\t\t\t+ \"WHERE gym_id = \" + gymId\n\t\t\t\t\t+ \" GROUP BY gyms.gym_id\");\n\t\t\t\n\t\t\tif (resultSet.next()) {\n\t\t\t\tint id = resultSet.getInt(\"gym_id\");\n\t\t\t\tString name = resultSet.getString(\"gym_name\");\n\t\t\t\tString city = resultSet.getString(\"city\");\n\t\t\t\tString street = resultSet.getString(\"street\");\n\t\t\t\tdouble longitude = resultSet.getDouble(\"longitude\");\n\t\t\t\tdouble latitude = resultSet.getDouble(\"latitude\");\n\t\t\t\tString url = resultSet.getString(\"url\");\n\t\t\t\tg = new Gym(id, name, new Address(city, street, new Coordinates(longitude, latitude))); //TODO if not defined\n\t\t\t\tg.setUrl(url);\n\t\t\t\tg.setRating(resultSet.getDouble(\"rating\"));\n\t\t\t\tg.setRatingsCount(resultSet.getInt(\"ratings_count\"));\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn g;\n\t}\n\n}\n", "package database;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport models.Stranger;\nimport models.User;\nimport play.Logger;\nimport play.db.DB;\n\npublic class UsersDao {\n\n\tprivate static final UsersDao INSTANCE = new UsersDao();\n\n\tprivate UsersDao() {\n\t}\n\t\n\tpublic static UsersDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tpublic boolean insert(User user) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(user.getPassword().getBytes()));\n\t\t\tString sql = connection.nativeSQL(\"INSERT INTO users(login, email, password_digest, first_name, last_name) VALUES\" + \n\t\t\t\t\t\"  ('\" + user.getLogin() + \"','\" + user.getEmail() + \"','\" + passwordDigest + \"','\" + user.getFirstName() + \"','\" + user.getLastName() + \"')\");\n\t\t\t\n\t\t\tplay.Logger.info(\"Insert user: \" + sql);\n\t\t\tconnection.createStatement().execute(sql);\n\t\t\t\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet result = statement.executeQuery(\"SELECT * FROM users WHERE login = '\" + user.getLogin() +\"'\");\n\t\t\tif (result.next()){\n\t\t\t\tuser.setId(result.getInt(\"user_id\"));\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new SQLException(\"Insert error\");\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic User login(String login, String password) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement getuserStatement = connection.createStatement();\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n\t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"\n\t\t\t\t\t+ \"WHERE (login = '\" + login + \"' OR email = '\" + login + \"') AND password_digest = '\" + passwordDigest + \"'\");\n\t\t\t\n\t\t\tUser user = null;\n\t\t\tif (resultUser.next()) {\n\t\t\t\tLogger.info(\"User \" + resultUser.getString(\"login\") + \" logged in!\");\n\t\t\t\tuser = new User();\n\t\t\t\tuser.setId(resultUser.getInt(\"user_id\"));\n\t\t\t\tuser.setLogin(resultUser.getString(\"login\"));\n\t\t\t\tuser.setEmail(resultUser.getString(\"email\"));\n\t\t\t}\n\t\t\t\n\t\t\tresultUser.close();\n\t\t\tgetuserStatement.close();\n\t\t\t\n\t\t\treturn user;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static String byteArrayToHexString(byte[] b) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < b.length; i++) {\n\t\t\tresult += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic User getById(String userId) { //TODO change to userId\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement getuserStatement = connection.createStatement();\n\t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"\n\t\t\t\t\t+ \"WHERE user_id = '\" + userId + \"'\");\n\t\t\t\n\t\t\tUser user = null;\n\t\t\tif (resultUser.next()) {\n\t\t\t\tuser = new User();\n\t\t\t\tuser.setId(resultUser.getInt(\"user_id\"));\n\t\t\t\tuser.setLogin(resultUser.getString(\"login\"));\n\t\t\t\tuser.setEmail(resultUser.getString(\"email\"));\n\t\t\t\tuser.setFirstName(resultUser.getString(\"first_name\"));\n\t\t\t\tuser.setLastName(resultUser.getString(\"last_name\"));\n\t\t\t\tuser.setDateOfBirth(resultUser.getDate(\"date_of_birth\"));\n\t\t\t\tuser.setHeight(resultUser.getInt(\"height\"));\n\t\t\t\tuser.setWeight(resultUser.getDouble(\"weight\"));\n\t\t\t}\n\t\t\t\n\t\t\tresultUser.close();\n\t\t\tgetuserStatement.close();\n\t\t\t\n\t\t\treturn user;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic boolean checkPasswordForUser(String userId, String password) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n\t\t\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement getuserStatement = connection.createStatement();\n\t\t\tResultSet resultUser = getuserStatement.executeQuery(\"SELECT * FROM users \"\n\t\t\t\t\t+ \"WHERE user_id = '\" + userId + \"' AND password_digest = '\" + passwordDigest + \"'\");\n\t\t\t\n\t\t\tboolean result;\n\t\t\tif (resultUser.next()) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\t\n\t\t\tresultUser.close();\n\t\t\tgetuserStatement.close();\n\t\t\treturn result;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void changePassword(String userId, String password) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n\t\t\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tString sql = \"UPDATE users SET password_digest = '\"+ passwordDigest + \"' where user_id = '\" + userId + \"';\";\n\t\t\tstatement.executeUpdate(sql);\n\t\t\tplay.Logger.info(\"Password changed!\");\n\t\t\t\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic boolean update(String userId, Map<String, String> toUpdate) {\n\t\tConnection connection = null;\n\t\ttry {\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tString sql = \"UPDATE users SET \";\n\t\t\tfor (Entry<String, String> entry : toUpdate.entrySet()) {\n\t\t\t\tsql += entry.getKey() + \" = '\" + entry.getValue() + \"', \";\n\t\t\t}\n\t\t\tsql = sql.substring(0, sql.length() - 2);\n\t\t\tsql += \" where user_id = '\" + userId + \"';\";\n\t\t\t\n\t\t\tplay.Logger.info(sql);\n\t\t\tstatement.executeUpdate(sql);\n\t\t\t\n\t\t\t\n\t\t\tstatement.close();\n\t\t\treturn true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic List<Stranger> getStrangersForUser(int userId) {\n\t\tList<Stranger> strangers = new ArrayList<>();\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(\"SELECT * FROM random_strangers_of_user(\" + userId + \")\");\n\t\t\t\n\t\t\tStranger stranger = null;\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tstranger = new Stranger();\n\t\t\t\tstranger.setId(resultSet.getInt(\"id\"));\n\t\t\t\tstranger.setFirstName(resultSet.getString(\"first_name\"));\n\t\t\t\tstranger.setLastName(resultSet.getString(\"last_name\"));\n\t\t\t\tstrangers.add(stranger);\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn strangers;\n\t}\n\t\n\tpublic void inviteUser(int userId, int requestedUserId) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t\t+ \"friendship_requests (first_user_id, second_user_id) \"\n\t\t\t\t\t\t+ \"VALUES (?, ?)\");\n\n\t\t\tp.setInt(1, userId);\n\t\t\tp.setInt(2, requestedUserId);\n\t\t\tp.execute();\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void removeRequest(int userId, int requestingUserId) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"\"\n\t\t\t\t\t+ \"DELETE FROM friendship_requests \"\n\t\t\t\t\t+ \"WHERE first_user_id = ? AND second_user_id = ?\");\n\n\t\t\tp.setInt(1, requestingUserId);\n\t\t\tp.setInt(2, userId);\n\t\t\tp.execute();\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic List<User> getFriendshipRequests(int userId) {\n\t\tList<User> users = new ArrayList<User>();\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement statement = connection.prepareStatement(\n\t\t\t\t\t\"SELECT user_id, first_name, last_name \"\n\t\t\t\t\t+ \"FROM friendship_requests \"\n\t\t\t\t\t+ \"JOIN users ON first_user_id = user_id \"\n\t\t\t\t\t+ \"WHERE second_user_id = ?\");\n\t\t\t\n\t\t\tstatement.setInt(1, userId);\n\t\t\tResultSet resultSet = statement.executeQuery();\n\t\t\tplay.Logger.debug(\"aaa\");\n\t\t\t\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tUser u = new User();\n\t\t\t\tu.setId(resultSet.getInt(\"user_id\"));\n\t\t\t\tu.setFirstName(resultSet.getString(\"first_name\"));\n\t\t\t\tu.setLastName(resultSet.getString(\"last_name\"));\n\t\t\t\tusers.add(u);\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn users;\n\t}\n\n\tpublic boolean areFriends(int userId, int foreignerId) {\n\t\tint firstUser = Math.min(userId, foreignerId);\n\t\tint secondUser = Math.max(foreignerId, userId);\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement statement = connection.prepareStatement(\n\t\t\t\t\t\"SELECT * FROM friendships WHERE first_user_id = \" + firstUser + \" AND second_user_id = \" + secondUser);\t\t\t\n\t\t\tResultSet resultSet = statement.executeQuery();\n\t\t\t\n\t\t\tboolean areFriends = resultSet.next();\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t\t\n\t\t\treturn areFriends;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "package database;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.sql.Timestamp;\nimport java.sql.Types;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Workout;\nimport models.WorkoutEntry;\nimport play.db.DB;\n\npublic class WorkoutDao {\n\n\tprivate static final WorkoutDao INSTANCE = new WorkoutDao();\n\t\n\tpublic static WorkoutDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tprivate WorkoutDao() {}\n\t\n\tpublic List<Workout> getAll() {\n\t\treturn getWorkouts(\"SELECT workouts.*, gyms.gym_name \"\n\t\t\t\t+ \"FROM workouts \"\n\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n\t}\n\t\n\tpublic List<Workout> getUserWorkouts(int userId) {\n\t\treturn getWorkouts(\"SELECT workouts.*, gyms.gym_name \"\n\t\t\t\t+ \"FROM workouts \"\n\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n\t\t\t\t+ \"WHERE user_id = \" + userId + \" \"\n\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n\t}\n\t\n\tpublic boolean create(Workout workout) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tconnection.setAutoCommit(false);\n\t\t\tif (workout.getStartedAt() == null || workout.getFinishedAt() == null)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t+ \"workouts(user_id, gym_id, started_at, finished_at, note) \"\n\t\t\t\t\t+ \"VALUES (?, ?, ?, ?, ?) \"\n\t\t\t\t\t+ \"RETURNING workout_id\");\n\t\t\t\n\t\t\tp.setInt(1, workout.getUserId());\n\t\t\tif (workout.getGymId() == null)\n\t\t\t\tp.setNull(2, Types.INTEGER);\n\t\t\telse\n\t\t\t\tp.setInt(2, workout.getGymId());\n\t\t\tp.setTimestamp(3, workout.getStartedAt());\n\t\t\tp.setTimestamp(4, workout.getFinishedAt());\n\t\t\tif (workout.getGymId() == null)\n\t\t\t\tp.setNull(5, Types.VARCHAR);\n\t\t\telse\n\t\t\t\tp.setString(5, workout.getNote());\n\t\t\t\n\t\t\tp.execute();\n\t\t\tResultSet resultSet = p.getResultSet();\n\t\t\tresultSet.next();\n\t\t\tint workoutId = resultSet.getInt(\"workout_id\");\n\t\t\tworkout.setId(workoutId);\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tp.close();\n\t\t\t\n\t\t\tfor (WorkoutEntry we : workout.getWorkoutEntries()) {\n\t\t\t\twe.setWorkoutId(workoutId);\n\t\t\t\tp = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t\t+ \"workout_entries(workout_id, exercise_id, set_count, reps_per_set, weight) \"\n\t\t\t\t\t\t+ \"VALUES (?, ?, ?, ?, ?)\");\n\t\t\t\tp.setInt(1, we.getWorkoutId());\n\t\t\t\tp.setInt(2, we.getExerciseId());\n\t\t\t\tp.setInt(3, we.getSetsCount());\n\t\t\t\tif (we.getRepsPerSet() == null)\n\t\t\t\t\tp.setNull(4, Types.INTEGER);\n\t\t\t\telse\n\t\t\t\t\tp.setInt(4, we.getRepsPerSet());\n\t\t\t\tif (we.getWeight() == null)\n\t\t\t\t\tp.setNull(5, Types.NUMERIC);\n\t\t\t\telse\n\t\t\t\t\tp.setDouble(5, we.getWeight());\n\t\t\t\tp.execute();\n\t\t\t\tp.close();\n\t\t\t}\n\t\t\tconnection.commit();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tplay.Logger.info(\"ROLLBACK\");\n\t\t\ttry {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\tconnection.rollback();\n\t\t\t\t}\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate List<Workout> getWorkouts(String sql) {\n\t\tList<Workout> workouts = new ArrayList<Workout>();\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(sql);\n\t\t\t\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tint id = resultSet.getInt(\"workout_id\");\n\t\t\t\tint userId = resultSet.getInt(\"user_id\");\n\t\t\t\tint gymId = resultSet.getInt(\"gym_id\");\n\t\t\t\tTimestamp startedAt = resultSet.getTimestamp(\"started_at\");\n\t\t\t\tTimestamp finishedAt = resultSet.getTimestamp(\"finished_at\");\n\t\t\t\tString note = resultSet.getString(\"note\");\n\t\t\t\tWorkout w = new Workout(userId, gymId, startedAt, finishedAt);\n\t\t\t\tw.setId(id);\n\t\t\t\tw.setGymName(resultSet.getString(\"gym_name\"));\n\t\t\t\tw.setNote(note);\n\t\t\t\tworkouts.add(w);\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn workouts;\n\t}\n\n\tpublic int like(int workoutId, int userId) {\n\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p;\n\t\t\ttry {\n\t\t\t\tp = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t\t+ \"likes(user_id, workout_id) \"\n\t\t\t\t\t\t+ \"VALUES (?, ?)\");\n\t\n\t\t\t\tp.setInt(1, userId);\n\t\t\t\tp.setInt(2, workoutId);\n\t\t\t\tp.execute();\n\t\t\t\tp.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\tp = connection.prepareStatement(\"SELECT count(*) \"\n\t\t\t\t\t+ \"FROM likes \"\n\t\t\t\t\t+ \"WHERE workout_id = ?\");\n\t\t\tp.setInt(1, workoutId);\n\t\t\tp.execute();\n\t\t\tResultSet resultSet = p.getResultSet();\n\t\t\tresultSet.next();\n\t\t\tint likesCount = resultSet.getInt(1);\n\t\t\tp.close();\n\t\t\t\n\t\t\treturn likesCount;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn 0;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"], "fixing_code": ["package controllers;\n\nimport java.sql.Date;\n\nimport models.Secured;\nimport play.data.DynamicForm;\nimport play.data.Form;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport play.mvc.Security;\nimport database.UsersDao;\n\n@Security.Authenticated(Secured.class)\npublic class AccountController extends Controller {\n\t\n\tpublic static Result changePassword() {\n\t\tDynamicForm requestData = Form.form().bindFromRequest();\n\t\tString oldPassword = requestData.get(\"oldPassword\");\n\t\tString newPassword = requestData.get(\"newPassword\");\n\t\tString repeatedPassword = requestData.get(\"repeatedPassword\");\n\t\tint userId;\n\t\ttry {\n\t\t\tuserId = Integer.parseInt(session(Application.USER_ID));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn badRequest();\n\t\t}\n\t\t\n\t\tif (newPassword.equals(repeatedPassword)) {\n\t\t\tif (UsersDao.get().checkPasswordForUser(userId, oldPassword)) {\n\t\t\t\tUsersDao.get().changePassword(userId, newPassword);\n\t\t\t\treturn ok();\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn badRequest(\"Old password is incorrect!\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn badRequest(\"New and repeated passwords are different!\");\n\t\t}\n\t}\n\t\n\tpublic static Result changeUserInfo() {\n\t\tDynamicForm requestData = Form.form().bindFromRequest();\n\t\tDouble weight = null;\n\t\tDouble height = null;\n\t\tDate dateOfBirth = null;\n\t\tint userId;\n\t\ttry {\n\t\t\tuserId = Integer.parseInt(session(Application.USER_ID));\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn badRequest();\n\t\t}\n\n\t\tif (!requestData.get(\"weight\").equals(\"\"))\n\t\t\tweight = Double.valueOf(requestData.get(\"weight\"));\n\t\tif (!requestData.get(\"height\").equals(\"\"))\n\t\t\theight = Double.valueOf(requestData.get(\"height\"));\n\t\tif (!requestData.get(\"dateOfBirth\").equals(\"\"))\n\t\t\tdateOfBirth = Date.valueOf(requestData.get(\"dateOfBirth\"));\n\n\t\ttry {\n\t\t\tif (UsersDao.get().update(userId, weight, height, dateOfBirth))\n\t\t\t\treturn ok();\n\t\t\telse\n\t\t\t\treturn badRequest();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn badRequest();\n\t\t}\n\t}\n}\n", "package controllers;\n\nimport java.util.List;\n\nimport models.News;\nimport models.Secured;\nimport models.Stranger;\nimport models.User;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport play.mvc.Security;\nimport views.html.account;\nimport views.html.index;\nimport database.NewsDao;\nimport database.UsersDao;\n\n@Security.Authenticated(Secured.class)\npublic class Application extends Controller {\n\t\n\tpublic static final String USER_ID = \"user_id\";\n\t\n\tpublic static final String HOME = \"/home\";\n\tpublic static final String LOGIN = \"/login\";\n\n    public static Result home() {\n    \tString userId = session(USER_ID);\n    \tif (userId == null) {\n    \t\treturn redirect(LOGIN);\n    \t}\n    \telse {\n    \t\tList<Stranger> strangers = UsersDao.get().getStrangersForUser(Integer.parseInt(userId));\n    \t\tList<User> friendshipRequests = UsersDao.get().getFriendshipRequests(Integer.parseInt(userId));\n    \t\tList<News> news = NewsDao.get().getNews(Integer.parseInt(userId));\n    \t\treturn ok(index.render(news, strangers, friendshipRequests));\n    \t}\n    }\n    \n    public static Result editAccountSettings() {\n    \ttry {\n\t    \tUser user = UsersDao.get().getById(Integer.parseInt(session(USER_ID))); //TODO change session to userId\n\t    \treturn ok(account.render(user));\n    \t} catch (Exception e) {\n    \t\te.printStackTrace();\n    \t\treturn badRequest();\n    \t}\n    }\n\n}\n", "package controllers;\n\nimport models.User;\nimport play.mvc.Controller;\nimport play.mvc.Result;\nimport database.UsersDao;\nimport views.html.user_info;\n\npublic class UsersController extends Controller {\n\n\tpublic static Result invite(int requestedUserId) {\n\t\ttry {\n\t\t\tint userId = Integer.parseInt(session(\"user_id\"));\n\t\t\tUsersDao.get().inviteUser(userId, requestedUserId);\n\t\t\treturn ok();\n\t\t} catch (Exception e) {\n\t\t\treturn badRequest();\n\t\t}\n\t}\n\n\tpublic static Result decline(int requesingUserId) {\n\t\ttry {\n\t\t\tint userId = Integer.parseInt(session(\"user_id\"));\n\t\t\tUsersDao.get().removeRequest(userId, requesingUserId);\n\t\t\treturn ok();\n\t\t} catch (Exception e) {\n\t\t\treturn badRequest();\n\t\t}\n\t}\n\t\n\tpublic static Result showUser(int foreignerId) {\n\t\tint userId = Integer.parseInt(session(\"user_id\"));\n\t\tUser user = UsersDao.get().getById(foreignerId);\n\t\tboolean isYourFriend = UsersDao.get().areFriends(userId, foreignerId);\n\t\tif (user != null) {\n\t\t\treturn ok(user_info.render(user, isYourFriend));\t\t\t\n\t\t}\n\t\telse {\n\t\t\treturn badRequest();\n\t\t}\n\t}\n}\n", "package database;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport models.Exercise;\nimport models.ExerciseResult;\nimport models.MuscleGroup;\nimport play.db.DB;\n\npublic class ExerciseDao {\n\t\n\tpublic static ExerciseDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tpublic List<Exercise> getAll() {\n\t\tList<Exercise> exercises = new ArrayList<Exercise>();\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet exerciseSet = statement.executeQuery(\n\t\t\t\t\t\"SELECT exercises.*, rating, ratings_count, \"\n\t\t\t\t\t+ \" ARRAY_AGG(muscle_name) AS target_muscles \"\n\t\t\t\t\t+ \"FROM exercises \"\n\t\t\t\t\t+ \"LEFT JOIN (\"\n\t\t\t\t\t+ \"\tSELECT exercise_id, AVG(rating) AS rating,\"\n\t\t\t\t\t+ \"  COUNT(rating) AS ratings_count\"\n\t\t\t\t\t+ \"\tFROM exercise_ratings\"\n\t\t\t\t\t+ \" GROUP BY exercise_id\"\n\t\t\t\t\t+ \") exercise_ratings USING (exercise_id) \"\n\t\t\t\t\t+ \"LEFT JOIN target_muscles USING (exercise_id) \"\n\t\t\t\t\t+ \"GROUP BY exercises.exercise_id, rating, ratings_count \"\n\t\t\t\t\t+ \"ORDER BY exercises.exercise_name\");\n\t\t\t\n\t\t\twhile (exerciseSet.next()) {\n\t\t\t\tExercise e = new Exercise();\n\t\t\t\te.setId(exerciseSet.getInt(\"exercise_id\"));\n\t\t\t\te.setName(exerciseSet.getString(\"exercise_name\"));\n\t\t\t\te.setDescription(exerciseSet.getString(\"description\"));\n\t\t\t\te.setMovieUri(exerciseSet.getString(\"movie_uri\"));\n\t\t\t\te.setRating(exerciseSet.getDouble(\"rating\"));\n\t\t\t\te.setRatingsCount(exerciseSet.getInt(\"ratings_count\"));\n\n\t\t\t\tResultSet targetMuscleSet = exerciseSet.getArray(\"target_muscles\").getResultSet();\n\t\t\t\tSet<MuscleGroup> targetMuscles = new HashSet<MuscleGroup>();\n\n\t\t\t\twhile (targetMuscleSet.next()) {\n\t\t\t\t\tMuscleGroup muscleGroup = new MuscleGroup();\n\t\t\t\t\tmuscleGroup.setMuscleName(targetMuscleSet.getString(2));\n\n\t\t\t\t\ttargetMuscles.add(muscleGroup);\n\t\t\t\t}\n\n\t\t\t\ttargetMuscleSet.close();\n\t\t\t\te.setTargetMuscles(targetMuscles);\n\n\t\t\t\texercises.add(e);\n\t\t\t}\n\t\t\t\n\t\t\texerciseSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn exercises;\n\t}\n\t\n\tpublic List<Exercise> filter(String muscleName) {\n\t\tMuscleGroup muscle = new MuscleGroup(muscleName);\n\t\tList<Exercise> result = new ArrayList<Exercise>();\n\t\tfor (Exercise ex : getAll()) {\n\t\t\tif (ex.getTargetMuscles().contains(muscle)) {\n\t\t\t\tresult.add(ex);\n\t\t\t}\n\t\t}\t\t\n\t\treturn result;\n\t}\n\t\n\tpublic void rateExercise(int userId, int exerciseId, int rating) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO exercise_ratings(user_id, exercise_id, rating) VALUES (?, ?, ?);\");\n\t\t\tp.setInt(1, userId);\n\t\t\tp.setInt(2, exerciseId);\n\t\t\tp.setInt(3, rating);\n\t\t\t\n\t\t\tp.executeQuery();\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static final ExerciseDao INSTANCE = new ExerciseDao();\n\t\n\tprivate ExerciseDao() {}\n\n\tpublic ExerciseResult getBestForUser(String userId, int exerciseId) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT weight, set_count, reps_per_set\"\n\t\t\t\t\t+ \"FROM workout_entries \"\n\t\t\t\t\t+ \"JOIN workouts USING (workout_id) \"\n\t\t\t\t\t+ \"WHERE user_id = ? AND exercise_id = ? \"\n\t\t\t\t\t+ \"ORDER BY weight\"\n\t\t\t\t\t+ \"LIMIT 1;\");\n\t\t\tResultSet resultSet = p.executeQuery();\n\t\t\tExerciseResult result = null;\n\t\t\tif (resultSet.next()) {\n\t\t\t\tresult = new ExerciseResult();\n\t\t\t\tresult.setRepsPerSet(resultSet.getInt(\"reps_per_set\"));\n\t\t\t\tresult.setSetCount(resultSet.getInt(\"set_count\"));\n\t\t\t\tresult.setWeight(resultSet.getInt(\"weight\"));\n\t\t\t\t\n\t\t\t}\n\t\t\tresultSet.close();\n\t\t\tp.close();\n\t\t\treturn result;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", "package database;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Address;\nimport models.Coordinates;\nimport models.Gym;\nimport play.db.DB;\n\npublic class GymsDao {\n\t\n\tpublic static GymsDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tpublic List<Gym> getAll() {\n\t\tList<Gym> gyms = new ArrayList<Gym>();\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(\n\t\t\t\t\t\"SELECT gyms.*, AVG(rating) AS rating, COUNT(rating) as ratings_count \"\n\t\t\t\t\t+ \"FROM gyms \"\n\t\t\t\t\t+ \"LEFT JOIN gym_ratings USING (gym_id) \"\n\t\t\t\t\t+ \"GROUP BY gyms.gym_id\");\n\t\t\t\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tint id = resultSet.getInt(\"gym_id\");\n\t\t\t\tString name = resultSet.getString(\"gym_name\");\n\t\t\t\tString city = resultSet.getString(\"city\");\n\t\t\t\tString street = resultSet.getString(\"street\");\n\t\t\t\tdouble longitude = resultSet.getDouble(\"longitude\");\n\t\t\t\tdouble latitude = resultSet.getDouble(\"latitude\");\n\t\t\t\tString url = resultSet.getString(\"url\");\n\t\t\t\tGym g = new Gym(id, name, new Address(city, street, new Coordinates(longitude, latitude))); //TODO if not defined\n\t\t\t\tg.setUrl(url);\n\t\t\t\tg.setRating(resultSet.getDouble(\"rating\"));\n\t\t\t\tg.setRatingsCount(resultSet.getInt(\"ratings_count\"));\n\t\t\t\tgyms.add(g);\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn gyms;\n\t}\n\t\n\tpublic void rateGym(int userId, int gymId, int rating) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO gym_ratings(user_id, gym_id, rating) VALUES (?, ?, ?)\");\n\t\t\tp.setInt(1, userId);\n\t\t\tp.setInt(2, gymId);\n\t\t\tp.setInt(3, rating);\n\t\t\tp.executeQuery();\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate static final GymsDao INSTANCE = new GymsDao();\n\t\n\tprivate GymsDao() {}\n\n\tpublic Gym getById(int gymId) {\n\t\tGym g = null;\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tStatement statement = connection.createStatement();\n\t\t\tResultSet resultSet = statement.executeQuery(\n\t\t\t\t\t\"SELECT gyms.*, AVG(rating) AS rating, COUNT(rating) as ratings_count \"\n\t\t\t\t\t+ \"FROM gyms \"\n\t\t\t\t\t+ \"LEFT JOIN gym_ratings USING (gym_id) \"\n\t\t\t\t\t+ \"WHERE gym_id = \" + gymId\n\t\t\t\t\t+ \" GROUP BY gyms.gym_id\");\n\t\t\t\n\t\t\tif (resultSet.next()) {\n\t\t\t\tint id = resultSet.getInt(\"gym_id\");\n\t\t\t\tString name = resultSet.getString(\"gym_name\");\n\t\t\t\tString city = resultSet.getString(\"city\");\n\t\t\t\tString street = resultSet.getString(\"street\");\n\t\t\t\tdouble longitude = resultSet.getDouble(\"longitude\");\n\t\t\t\tdouble latitude = resultSet.getDouble(\"latitude\");\n\t\t\t\tString url = resultSet.getString(\"url\");\n\t\t\t\tg = new Gym(id, name, new Address(city, street, new Coordinates(longitude, latitude))); //TODO if not defined\n\t\t\t\tg.setUrl(url);\n\t\t\t\tg.setRating(resultSet.getDouble(\"rating\"));\n\t\t\t\tg.setRatingsCount(resultSet.getInt(\"ratings_count\"));\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn g;\n\t}\n\n}\n", "package database;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.sql.Connection;\nimport java.sql.Date;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Stranger;\nimport models.User;\nimport play.Logger;\nimport play.db.DB;\n\npublic class UsersDao {\n\n\tprivate static final UsersDao INSTANCE = new UsersDao();\n\n\tprivate UsersDao() {\n\t}\n\t\n\tpublic static UsersDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tpublic boolean insert(User user) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(user.getPassword().getBytes()));\n\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO users(login, email, password_digest, first_name, last_name) VALUES (?, ?, ?, ?, ?)\");\n\t\t\tp.setString(1, user.getLogin());\n\t\t\tp.setString(2, user.getEmail());\n\t\t\tp.setString(3, passwordDigest);\n\t\t\tp.setString(4, user.getFirstName());\n\t\t\tp.setString(5, user.getLastName());\n\t\t\tp.executeQuery();\n\t\t\tp.close();\n\t\t\t\n\t\t\tp = connection.prepareStatement(\"SELECT * FROM users WHERE login = ?\");\n\t\t\tp.setString(1, user.getLogin());\n\t\t\tResultSet result = p.executeQuery();\n\t\t\tif (result.next()){\n\t\t\t\tuser.setId(result.getInt(\"user_id\"));\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthrow new SQLException(\"Insert error\");\n\t\t\t}\n\t\t\tresult.close();\n\t\t\tp.close();\n\t\t\treturn true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic User login(String login, String password) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM users WHERE (login = ? OR email = ?) AND password_digest = ?\");\n\t\t\tp.setString(1, login);\n\t\t\tp.setString(2, login);\n\t\t\tp.setString(3, passwordDigest);\n\t\t\tResultSet resultUser = p.executeQuery();\n\t\t\t\n\t\t\tUser user = null;\n\t\t\tif (resultUser.next()) {\n\t\t\t\tLogger.info(\"User \" + resultUser.getString(\"login\") + \" logged in!\");\n\t\t\t\tuser = new User();\n\t\t\t\tuser.setId(resultUser.getInt(\"user_id\"));\n\t\t\t\tuser.setLogin(resultUser.getString(\"login\"));\n\t\t\t\tuser.setEmail(resultUser.getString(\"email\"));\n\t\t\t}\n\t\t\t\n\t\t\tresultUser.close();\n\t\t\tp.close();\n\t\t\t\n\t\t\treturn user;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate static String byteArrayToHexString(byte[] b) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < b.length; i++) {\n\t\t\tresult += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic User getById(int userId) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM users WHERE user_id = ?\");\n\t\t\tp.setInt(1, userId);\n\t\t\t\n\t\t\tResultSet resultUser = p.executeQuery();\n\t\t\t\n\t\t\tUser user = null;\n\t\t\tif (resultUser.next()) {\n\t\t\t\tuser = new User();\n\t\t\t\tuser.setId(resultUser.getInt(\"user_id\"));\n\t\t\t\tuser.setLogin(resultUser.getString(\"login\"));\n\t\t\t\tuser.setEmail(resultUser.getString(\"email\"));\n\t\t\t\tuser.setFirstName(resultUser.getString(\"first_name\"));\n\t\t\t\tuser.setLastName(resultUser.getString(\"last_name\"));\n\t\t\t\tuser.setDateOfBirth(resultUser.getDate(\"date_of_birth\"));\n\t\t\t\tuser.setHeight(resultUser.getInt(\"height\"));\n\t\t\t\tuser.setWeight(resultUser.getDouble(\"weight\"));\n\t\t\t}\n\t\t\t\n\t\t\tresultUser.close();\n\t\t\tp.close();\n\t\t\t\n\t\t\treturn user;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic boolean checkPasswordForUser(int userId, String password) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n\t\t\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM users WHERE user_id = ? AND password_digest = ?\");\n\t\t\tp.setInt(1, userId);\n\t\t\tp.setString(2, passwordDigest);\n\t\t\tResultSet resultUser = p.executeQuery();\n\t\t\t\n\t\t\tboolean result;\n\t\t\tif (resultUser.next()) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tresult = false;\n\t\t\t}\n\t\t\t\n\t\t\tresultUser.close();\n\t\t\tp.close();\n\t\t\treturn result;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic void changePassword(int userId, String password) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tString passwordDigest = byteArrayToHexString(MessageDigest\n\t\t\t\t\t.getInstance(\"SHA-1\").digest(password.getBytes()));\n\t\t\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"UPDATE users SET password_digest = ? where user_id = ?\");\n\t\t\tp.setString(1, passwordDigest);;\n\t\t\tp.setInt(2, userId);\n\t\t\tp.executeQuery();\n\t\t\tp.close();\n\t\t\tplay.Logger.info(\"Password changed!\");\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (NoSuchAlgorithmException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic boolean update(int userId, Double weight, Double height, Date dateOfBirth) {\n\t\tConnection connection = null;\n\t\ttry {\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tString sql = \"UPDATE users SET   \";\n\t\t\tif (weight != null)\n\t\t\t\tsql += \"weight = ?, \";\n\t\t\tif (height != null)\n\t\t\t\tsql += \"height = ?, \";\n\t\t\tif (dateOfBirth != null)\n\t\t\t\tsql += \"date_of_birth = ?, \";\n\t\t\tsql = sql.substring(0, sql.length() - 2);\n\t\t\tsql += \" WHERE user_id = ?\";\n\t\t\t\n\t\t\tPreparedStatement p = connection.prepareStatement(sql);\n\n\t\t\tint i = 1;\n\t\t\tif (weight != null)\n\t\t\t\tp.setDouble(i++, weight);\n\t\t\tif (height != null)\n\t\t\t\tp.setDouble(i++, height);\n\t\t\tif (dateOfBirth != null)\n\t\t\t\tp.setDate(i++, dateOfBirth);\n\t\t\t\n\t\t\tp.setInt(i, userId);\n\n\t\t\tplay.Logger.info(sql);\n\n\t\t\tif (i > 1)\n\t\t\t\tp.executeUpdate();\n\t\t\t\n\t\t\tp.close();\n\t\t\treturn true;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic List<Stranger> getStrangersForUser(int userId) {\n\t\tList<Stranger> strangers = new ArrayList<>();\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\t\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT * FROM random_strangers_of_user(?)\");\n\t\t\tp.setInt(1, userId);\n\t\t\tResultSet resultSet = p.executeQuery();\n\t\t\t\n\t\t\tStranger stranger = null;\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tstranger = new Stranger();\n\t\t\t\tstranger.setId(resultSet.getInt(\"id\"));\n\t\t\t\tstranger.setFirstName(resultSet.getString(\"first_name\"));\n\t\t\t\tstranger.setLastName(resultSet.getString(\"last_name\"));\n\t\t\t\tstrangers.add(stranger);\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn strangers;\n\t}\n\t\n\tpublic void inviteUser(int userId, int requestedUserId) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t\t+ \"friendship_requests (first_user_id, second_user_id) \"\n\t\t\t\t\t\t+ \"VALUES (?, ?)\");\n\n\t\t\tp.setInt(1, userId);\n\t\t\tp.setInt(2, requestedUserId);\n\t\t\tp.execute();\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic void removeRequest(int userId, int requestingUserId) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"\"\n\t\t\t\t\t+ \"DELETE FROM friendship_requests \"\n\t\t\t\t\t+ \"WHERE first_user_id = ? AND second_user_id = ?\");\n\n\t\t\tp.setInt(1, requestingUserId);\n\t\t\tp.setInt(2, userId);\n\t\t\tp.execute();\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic List<User> getFriendshipRequests(int userId) {\n\t\tList<User> users = new ArrayList<User>();\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement statement = connection.prepareStatement(\n\t\t\t\t\t\"SELECT user_id, first_name, last_name \"\n\t\t\t\t\t+ \"FROM friendship_requests \"\n\t\t\t\t\t+ \"JOIN users ON first_user_id = user_id \"\n\t\t\t\t\t+ \"WHERE second_user_id = ?\");\n\t\t\t\n\t\t\tstatement.setInt(1, userId);\n\t\t\tResultSet resultSet = statement.executeQuery();\n\t\t\tplay.Logger.debug(\"aaa\");\n\t\t\t\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tUser u = new User();\n\t\t\t\tu.setId(resultSet.getInt(\"user_id\"));\n\t\t\t\tu.setFirstName(resultSet.getString(\"first_name\"));\n\t\t\t\tu.setLastName(resultSet.getString(\"last_name\"));\n\t\t\t\tusers.add(u);\n\t\t\t}\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn users;\n\t}\n\n\tpublic boolean areFriends(int userId, int foreignerId) {\n\t\tint firstUser = Math.min(userId, foreignerId);\n\t\tint secondUser = Math.max(foreignerId, userId);\n\t\t\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement statement = connection.prepareStatement(\n\t\t\t\t\t\"SELECT * FROM friendships WHERE first_user_id = \" + firstUser + \" AND second_user_id = \" + secondUser);\t\t\t\n\t\t\tResultSet resultSet = statement.executeQuery();\n\t\t\t\n\t\t\tboolean areFriends = resultSet.next();\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tstatement.close();\n\t\t\t\n\t\t\treturn areFriends;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n}\n", "package database;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Timestamp;\nimport java.sql.Types;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport models.Workout;\nimport models.WorkoutEntry;\nimport play.db.DB;\n\npublic class WorkoutDao {\n\n\tprivate static final WorkoutDao INSTANCE = new WorkoutDao();\n\t\n\tpublic static WorkoutDao get() {\n\t\treturn INSTANCE;\n\t}\n\t\n\tprivate WorkoutDao() {}\n\t\n\tpublic List<Workout> getAll() {\n\t\tList<Workout> workouts = new ArrayList<Workout>();\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT workouts.*, gyms.gym_name \"\n\t\t\t\t\t+ \"FROM workouts \"\n\t\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n\t\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n\t\t\tworkouts = buildWorkouts(p.executeQuery());\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn workouts;\n\t}\n\t\n\tpublic List<Workout> getUserWorkouts(int userId) {\n\t\tList<Workout> workouts = new ArrayList<Workout>();\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p = connection.prepareStatement(\"SELECT workouts.*, gyms.gym_name \"\n\t\t\t\t\t+ \"FROM workouts \"\n\t\t\t\t\t+ \"LEFT JOIN gyms using (gym_id) \"\n\t\t\t\t\t+ \"WHERE user_id = ? \"\n\t\t\t\t\t+ \"ORDER BY workouts.finished_at DESC\");\n\t\t\tp.setInt(1, userId);\n\t\t\tworkouts = buildWorkouts(p.executeQuery());\n\t\t\tp.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn workouts;\n\t}\n\t\n\tpublic boolean create(Workout workout) {\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tconnection.setAutoCommit(false);\n\t\t\tif (workout.getStartedAt() == null || workout.getFinishedAt() == null)\n\t\t\t\treturn false;\n\t\t\t\n\t\t\tPreparedStatement p = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t+ \"workouts(user_id, gym_id, started_at, finished_at, note) \"\n\t\t\t\t\t+ \"VALUES (?, ?, ?, ?, ?) \"\n\t\t\t\t\t+ \"RETURNING workout_id\");\n\t\t\t\n\t\t\tp.setInt(1, workout.getUserId());\n\t\t\tif (workout.getGymId() == null)\n\t\t\t\tp.setNull(2, Types.INTEGER);\n\t\t\telse\n\t\t\t\tp.setInt(2, workout.getGymId());\n\t\t\tp.setTimestamp(3, workout.getStartedAt());\n\t\t\tp.setTimestamp(4, workout.getFinishedAt());\n\t\t\tif (workout.getGymId() == null)\n\t\t\t\tp.setNull(5, Types.VARCHAR);\n\t\t\telse\n\t\t\t\tp.setString(5, workout.getNote());\n\t\t\t\n\t\t\tp.execute();\n\t\t\tResultSet resultSet = p.getResultSet();\n\t\t\tresultSet.next();\n\t\t\tint workoutId = resultSet.getInt(\"workout_id\");\n\t\t\tworkout.setId(workoutId);\n\t\t\t\n\t\t\tresultSet.close();\n\t\t\tp.close();\n\t\t\t\n\t\t\tfor (WorkoutEntry we : workout.getWorkoutEntries()) {\n\t\t\t\twe.setWorkoutId(workoutId);\n\t\t\t\tp = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t\t+ \"workout_entries(workout_id, exercise_id, set_count, reps_per_set, weight) \"\n\t\t\t\t\t\t+ \"VALUES (?, ?, ?, ?, ?)\");\n\t\t\t\tp.setInt(1, we.getWorkoutId());\n\t\t\t\tp.setInt(2, we.getExerciseId());\n\t\t\t\tp.setInt(3, we.getSetsCount());\n\t\t\t\tif (we.getRepsPerSet() == null)\n\t\t\t\t\tp.setNull(4, Types.INTEGER);\n\t\t\t\telse\n\t\t\t\t\tp.setInt(4, we.getRepsPerSet());\n\t\t\t\tif (we.getWeight() == null)\n\t\t\t\t\tp.setNull(5, Types.NUMERIC);\n\t\t\t\telse\n\t\t\t\t\tp.setDouble(5, we.getWeight());\n\t\t\t\tp.execute();\n\t\t\t\tp.close();\n\t\t\t}\n\t\t\tconnection.commit();\n\t\t\treturn true;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tplay.Logger.info(\"ROLLBACK\");\n\t\t\ttry {\n\t\t\t\tif (connection != null) {\n\t\t\t\t\tconnection.rollback();\n\t\t\t\t}\n\t\t\t} catch (SQLException e1) {\n\t\t\t\te1.printStackTrace();\n\t\t\t}\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate List<Workout> buildWorkouts(ResultSet resultSet) {\n\t\tList<Workout> workouts = new ArrayList<Workout>();\n\n\t\ttry {\n\t\t\twhile (resultSet.next()) {\n\t\t\t\tint id = resultSet.getInt(\"workout_id\");\n\t\t\t\tint userId = resultSet.getInt(\"user_id\");\n\t\t\t\tint gymId = resultSet.getInt(\"gym_id\");\n\t\t\t\tTimestamp startedAt = resultSet.getTimestamp(\"started_at\");\n\t\t\t\tTimestamp finishedAt = resultSet.getTimestamp(\"finished_at\");\n\t\t\t\tString note = resultSet.getString(\"note\");\n\t\t\t\tWorkout w = new Workout(userId, gymId, startedAt, finishedAt);\n\t\t\t\tw.setId(id);\n\t\t\t\tw.setGymName(resultSet.getString(\"gym_name\"));\n\t\t\t\tw.setNote(note);\n\t\t\t\tworkouts.add(w);\n\t\t\t}\n\t\t\tresultSet.close();\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn workouts;\n\t}\n\n\tpublic int like(int workoutId, int userId) {\n\n\t\tConnection connection = null;\n\t\ttry {\n\t\t\tconnection = DB.getConnection();\n\t\t\tPreparedStatement p;\n\t\t\ttry {\n\t\t\t\tp = connection.prepareStatement(\"INSERT INTO \"\n\t\t\t\t\t\t+ \"likes(user_id, workout_id) \"\n\t\t\t\t\t\t+ \"VALUES (?, ?)\");\n\t\n\t\t\t\tp.setInt(1, userId);\n\t\t\t\tp.setInt(2, workoutId);\n\t\t\t\tp.execute();\n\t\t\t\tp.close();\n\t\t\t} catch (SQLException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\t\n\t\t\tp = connection.prepareStatement(\"SELECT count(*) \"\n\t\t\t\t\t+ \"FROM likes \"\n\t\t\t\t\t+ \"WHERE workout_id = ?\");\n\t\t\tp.setInt(1, workoutId);\n\t\t\tp.execute();\n\t\t\tResultSet resultSet = p.getResultSet();\n\t\t\tresultSet.next();\n\t\t\tint likesCount = resultSet.getInt(1);\n\t\t\tp.close();\n\t\t\t\n\t\t\treturn likesCount;\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn 0;\n\t\t} finally {\n\t\t\tif (connection != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconnection.close();\n\t\t\t\t} catch (SQLException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"], "filenames": ["src/app/controllers/AccountController.java", "src/app/controllers/Application.java", "src/app/controllers/UsersController.java", "src/app/database/ExerciseDao.java", "src/app/database/GymsDao.java", "src/app/database/UsersDao.java", "src/app/database/WorkoutDao.java"], "buggy_code_start_loc": [3, 39, 33, 3, 3, 5, 7], "buggy_code_end_loc": [60, 41, 34, 142, 74, 276, 154], "fixing_code_start_loc": [3, 39, 33, 4, 4, 6, 6], "fixing_code_end_loc": [70, 46, 34, 147, 77, 300, 175], "type": "CWE-89", "message": "A vulnerability has been found in j-nowak workout-organizer and classified as critical. This vulnerability affects unknown code. The manipulation leads to sql injection. The name of the patch is 13cd6c3d1210640bfdb39872b2bb3597aa991279. It is recommended to apply a patch to fix this issue. VDB-217714 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10034", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-09T21:15:10.300", "lastModified": "2023-01-13T18:17:43.157", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in j-nowak workout-organizer and classified as critical. This vulnerability affects unknown code. The manipulation leads to sql injection. The name of the patch is 13cd6c3d1210640bfdb39872b2bb3597aa991279. It is recommended to apply a patch to fix this issue. VDB-217714 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:workout-organizer_project:workout-organizer:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-02-03", "matchCriteriaId": "0AEDF9AA-E189-49A6-A47C-05F83234E94E"}]}]}], "references": [{"url": "https://github.com/j-nowak/workout-organizer/commit/13cd6c3d1210640bfdb39872b2bb3597aa991279", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217714", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217714", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/j-nowak/workout-organizer/commit/13cd6c3d1210640bfdb39872b2bb3597aa991279"}}