{"buggy_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    2/18/19 5:59 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst packagejson = require('../../../../package')\n\nmodule.exports = function (middleware, router, controllers) {\n  // Shortenconsts\n  const apiv1 = middleware.api\n  const isAdmin = middleware.isAdmin\n  const isAgent = middleware.isAgent\n  const isAgentOrAdmin = middleware.isAgentOrAdmin\n  const canUser = middleware.canUser\n  const apiCtrl = controllers.api.v1\n\n  // Common\n  router.get('/api', controllers.api.index)\n  router.get('/api/v1/version', (req, res) => {\n    return res.json({ version: packagejson.version })\n  })\n  router.post('/api/v1/login', apiCtrl.common.login)\n  router.get('/api/v1/login', apiv1, apiCtrl.common.getLoggedInUser)\n  router.get('/api/v1/logout', apiv1, apiCtrl.common.logout)\n\n  // Roles\n  router.get('/api/v1/roles', apiv1, apiCtrl.roles.get)\n  router.post('/api/v1/roles', apiv1, isAdmin, apiCtrl.roles.create)\n  router.put('/api/v1/roles/:id', apiv1, isAdmin, apiCtrl.roles.update)\n  router.delete('/api/v1/roles/:id', apiv1, isAdmin, apiCtrl.roles.delete)\n\n  // Tickets\n  router.get('/api/v1/tickets', apiv1, canUser('tickets:view'), apiCtrl.tickets.get)\n  router.get('/api/v1/tickets/group/:id', apiv1, isAdmin, canUser('tickets:view'), apiCtrl.tickets.getByGroup)\n  router.get('/api/v1/tickets/search', apiv1, canUser('tickets:view'), apiCtrl.tickets.search)\n  router.post('/api/v1/tickets/create', apiv1, canUser('tickets:create'), apiCtrl.tickets.create)\n  router.get('/api/v1/tickets/type/:id', apiv1, apiCtrl.tickets.getType)\n  router.post('/api/v1/tickets/type/:id/removepriority', apiv1, isAdmin, apiCtrl.tickets.typeRemovePriority)\n  router.post('/api/v1/tickets/type/:id/addpriority', apiv1, isAdmin, apiCtrl.tickets.typeAddPriority)\n  router.get('/api/v1/tickets/types', apiv1, apiCtrl.tickets.getTypes)\n  router.post('/api/v1/tickets/types/create', apiv1, isAdmin, apiCtrl.tickets.createType)\n  router.put('/api/v1/tickets/types/:id', apiv1, isAdmin, apiCtrl.tickets.updateType)\n  router.delete('/api/v1/tickets/types/:id', apiv1, isAdmin, apiCtrl.tickets.deleteType)\n  router.post('/api/v1/tickets/priority/create', apiv1, isAdmin, apiCtrl.tickets.createPriority)\n  router.post('/api/v1/tickets/priority/:id/delete', apiv1, isAdmin, apiCtrl.tickets.deletePriority)\n  router.get('/api/v1/tickets/priorities', apiv1, apiCtrl.tickets.getPriorities)\n  router.put('/api/v1/tickets/priority/:id', apiv1, isAdmin, apiCtrl.tickets.updatePriority)\n\n  router.get('/api/v1/tickets/overdue', apiv1, canUser('tickets:view'), apiCtrl.tickets.getOverdue)\n  router.post('/api/v1/tickets/addcomment', apiv1, canUser('comments:create'), apiCtrl.tickets.postComment)\n  router.post('/api/v1/tickets/addnote', apiv1, canUser('tickets:notes'), apiCtrl.tickets.postInternalNote)\n  router.get('/api/v1/tickets/tags', apiv1, apiCtrl.tickets.getTags)\n  router.get('/api/v1/tickets/count/tags', apiv1, apiCtrl.tickets.getTagCount)\n  router.get('/api/v1/tickets/count/tags/:timespan', apiv1, apiCtrl.tickets.getTagCount)\n  router.get('/api/v1/tickets/count/days', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/count/days/:timespan', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/count/topgroups', apiv1, apiCtrl.tickets.getTopTicketGroups)\n  router.get('/api/v1/tickets/count/topgroups/:top', apiv1, apiCtrl.tickets.getTopTicketGroups)\n  router.get('/api/v1/tickets/count/topgroups/:timespan/:top', apiv1, apiCtrl.tickets.getTopTicketGroups)\n  router.get(\n    '/api/v1/tickets/count/group/:id',\n    apiv1,\n    isAgentOrAdmin,\n    canUser('tickets:view'),\n    apiCtrl.tickets.getCountByGroup\n  )\n  router.get('/api/v1/tickets/stats', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/stats/group/:group', apiv1, apiCtrl.tickets.getTicketStatsForGroup)\n  router.get('/api/v1/tickets/stats/user/:user', apiv1, apiCtrl.tickets.getTicketStatsForUser)\n  router.get('/api/v1/tickets/stats/:timespan', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/deleted', apiv1, isAdmin, apiCtrl.tickets.getDeletedTickets)\n  router.post('/api/v1/tickets/deleted/restore', apiv1, isAdmin, apiCtrl.tickets.restoreDeleted)\n  router.get('/api/v1/tickets/:uid', apiv1, canUser('tickets:view'), apiCtrl.tickets.single)\n  router.put('/api/v1/tickets/:id', apiv1, canUser('tickets:update'), apiCtrl.tickets.update)\n  router.delete('/api/v1/tickets/:id', apiv1, canUser('tickets:delete'), apiCtrl.tickets.delete)\n  router.put('/api/v1/tickets/:id/subscribe', apiv1, apiCtrl.tickets.subscribe)\n  router.delete(\n    '/api/v1/tickets/:tid/attachments/remove/:aid',\n    canUser('tickets:update'),\n    apiv1,\n    apiCtrl.tickets.removeAttachment\n  )\n\n  // Tags\n  router.get('/api/v1/count/tags', middleware.api, function (req, res) {\n    const tagSchema = require('../../../models/tag')\n    tagSchema.countDocuments({}, function (err, count) {\n      if (err) return res.status(500).json({ success: false, error: err })\n\n      return res.json({ success: true, count: count })\n    })\n  })\n\n  router.post('/api/v1/tags/create', apiv1, apiCtrl.tags.createTag)\n  router.get('/api/v1/tags/limit', apiv1, apiCtrl.tags.getTagsWithLimit)\n  router.put('/api/v1/tags/:id', apiv1, isAgentOrAdmin, apiCtrl.tags.updateTag)\n  router.delete('/api/v1/tags/:id', apiv1, isAgentOrAdmin, apiCtrl.tags.deleteTag)\n\n  // Public Tickets\n  const checkCaptcha = middleware.checkCaptcha\n  const checkOrigin = middleware.checkOrigin\n\n  router.post('/api/v1/public/users/checkemail', checkCaptcha, checkOrigin, apiCtrl.users.checkEmail)\n  router.post('/api/v1/public/tickets/create', checkCaptcha, checkOrigin, apiCtrl.tickets.createPublicTicket)\n  router.post('/api/v1/public/account/create', checkCaptcha, checkOrigin, apiCtrl.users.createPublicAccount)\n\n  // Groups\n  router.get('/api/v1/groups', apiv1, apiCtrl.groups.get)\n  router.get('/api/v1/groups/all', apiv1, canUser('groups:view'), apiCtrl.groups.getAll)\n  router.post('/api/v1/groups/create', apiv1, canUser('groups:create'), apiCtrl.groups.create)\n  router.get('/api/v1/groups/:id', apiv1, apiCtrl.groups.getSingleGroup)\n  router.put('/api/v1/groups/:id', apiv1, canUser('groups:update'), apiCtrl.groups.updateGroup)\n  router.delete('/api/v1/groups/:id', apiv1, canUser('groups:delete'), apiCtrl.groups.deleteGroup)\n\n  // Users\n  router.get('/api/v1/users', apiv1, canUser('accounts:view'), apiCtrl.users.getWithLimit)\n  router.post('/api/v1/users/create', apiv1, canUser('accounts:create'), apiCtrl.users.create)\n  router.get('/api/v1/users/notifications', apiv1, apiCtrl.users.getNotifications)\n  router.get('/api/v1/users/notificationCount', apiv1, apiCtrl.users.notificationCount)\n  router.get('/api/v1/users/getassignees', apiv1, isAgentOrAdmin, apiCtrl.users.getAssingees)\n  router.get('/api/v1/users/:username', apiv1, canUser('accounts:view'), apiCtrl.users.single)\n  router.put('/api/v1/users/:username', apiv1, canUser('accounts:update'), apiCtrl.users.update)\n  router.get('/api/v1/users/:username/groups', apiv1, apiCtrl.users.getGroups)\n  router.put('/api/v1/users/:username/updatepreferences', apiv1, apiCtrl.users.updatePreferences)\n  router.get('/api/v1/users/:username/enable', apiv1, canUser('accounts:update'), apiCtrl.users.enableUser)\n  router.delete('/api/v1/users/:username', apiv1, canUser('accounts:delete'), apiCtrl.users.deleteUser)\n  router.post('/api/v1/users/:id/generateapikey', apiv1, apiCtrl.users.generateApiKey)\n  router.post('/api/v1/users/:id/removeapikey', apiv1, apiCtrl.users.removeApiKey)\n  router.post('/api/v1/users/:id/generatel2auth', apiv1, middleware.csrfCheck, apiCtrl.users.generateL2Auth)\n  router.post('/api/v1/users/:id/removel2auth', apiv1, middleware.csrfCheck, apiCtrl.users.removeL2Auth)\n\n  // Messages\n  router.get('/api/v1/messages', apiv1, apiCtrl.messages.get)\n  router.post('/api/v1/messages/conversation/start', apiv1, apiCtrl.messages.startConversation)\n  router.get('/api/v1/messages/conversation/:id', apiv1, apiCtrl.messages.getMessagesForConversation)\n  router.delete('/api/v1/messages/conversation/:id', apiv1, apiCtrl.messages.deleteConversation)\n  router.get('/api/v1/messages/conversations', apiv1, apiCtrl.messages.getConversations)\n  router.get('/api/v1/messages/conversations/recent', apiv1, apiCtrl.messages.getRecentConversations)\n  router.post('/api/v1/messages/send', apiv1, apiCtrl.messages.send)\n\n  // Notices\n  router.post('/api/v1/notices/create', apiv1, canUser('notices:create'), apiCtrl.notices.create)\n  router.get('/api/v1/notices/clearactive', apiv1, canUser('notices:deactivate'), apiCtrl.notices.clearActive)\n  router.put('/api/v1/notices/:id', apiv1, canUser('notices:update'), apiCtrl.notices.updateNotice)\n  router.delete('/api/v1/notices/:id', apiv1, canUser('notices:delete'), apiCtrl.notices.deleteNotice)\n\n  // Reports Generator\n  const reportsGenCtrl = apiCtrl.reports.generate\n  const genBaseUrl = '/api/v1/reports/generate/'\n  router.post(genBaseUrl + 'tickets_by_group', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByGroup)\n  router.post(genBaseUrl + 'tickets_by_status', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByStatus)\n  router.post(genBaseUrl + 'tickets_by_priority', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByPriority)\n  router.post(genBaseUrl + 'tickets_by_tags', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByTags)\n  router.post(genBaseUrl + 'tickets_by_type', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByType)\n  router.post(genBaseUrl + 'tickets_by_user', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByUser)\n  router.post(genBaseUrl + 'tickets_by_assignee', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByAssignee)\n  router.post(genBaseUrl + 'tickets_by_team', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByTeam)\n\n  // Settings\n  router.get('/api/v1/settings', apiv1, apiCtrl.settings.getSettings)\n  router.put('/api/v1/settings', apiv1, isAdmin, apiCtrl.settings.updateSetting)\n  router.post('/api/v1/settings/testmailer', apiv1, isAdmin, apiCtrl.settings.testMailer)\n  router.put('/api/v1/settings/mailer/template/:id', apiv1, isAdmin, apiCtrl.settings.updateTemplateSubject)\n  router.get('/api/v1/settings/buildsass', apiv1, isAdmin, apiCtrl.settings.buildsass)\n  router.put('/api/v1/settings/updateroleorder', apiv1, isAdmin, apiCtrl.settings.updateRoleOrder)\n\n  // Backups\n  router.get('/api/v1/backups', apiv1, isAdmin, controllers.backuprestore.getBackups)\n  router.post('/api/v1/backup', apiv1, isAdmin, controllers.backuprestore.runBackup)\n  router.delete('/api/v1/backup/:backup', apiv1, isAdmin, controllers.backuprestore.deleteBackup)\n  router.post('/api/v1/backup/restore', apiv1, isAdmin, controllers.backuprestore.restoreBackup)\n  router.post('/api/v1/backup/upload', apiv1, isAdmin, controllers.backuprestore.uploadBackup)\n  router.get('/api/v1/backup/hastools', apiv1, isAdmin, controllers.backuprestore.hasBackupTools)\n\n  // Editor\n\n  router.get('/api/v1/editor/load/:id', apiv1, isAdmin, controllers.editor.load)\n  router.post('/api/v1/editor/save', apiv1, isAdmin, controllers.editor.save)\n  router.get('/api/v1/editor/assets', apiv1, isAdmin, controllers.editor.getAssets)\n  router.post('/api/v1/editor/assets/remove', apiv1, isAdmin, controllers.editor.removeAsset)\n  router.post('/api/v1/editor/assets/upload', apiv1, isAdmin, controllers.editor.assetsUpload)\n}\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst async = require('async')\nconst _ = require('lodash')\nconst winston = require('../../../logger')\nconst permissions = require('../../../permissions')\nconst emitter = require('../../../emitter')\nconst UserSchema = require('../../../models/user')\nconst groupSchema = require('../../../models/group')\nconst notificationSchema = require('../../../models/notification')\nconst SettingUtil = require('../../../settings/settingsUtil')\nconst Chance = require('chance')\n\nconst apiUsers = {}\n\n/**\n * @api {get} /api/v1/users Gets users with query string\n * @apiName getUsers\n * @apiDescription Gets users with query string\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n *\n * @apiSuccess {boolean} success If the Request was a success\n * @apiSuccess {object} error Error, if occurred\n * @apiSuccess {number} count Count of users in array\n * @apiSuccess {array} users Users returned (populated)\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.getWithLimit = function (req, res) {\n  let limit = 10\n  if (!_.isUndefined(req.query.limit)) {\n    limit = parseInt(req.query.limit)\n  }\n  const page = parseInt(req.query.page)\n  const search = req.query.search\n\n  const obj = {\n    limit: limit,\n    page: page,\n    search: search\n  }\n\n  async.waterfall(\n    [\n      function (callback) {\n        UserSchema.getUserWithObject(obj, function (err, results) {\n          callback(err, results)\n        })\n      },\n      function (users, callback) {\n        const result = []\n\n        async.waterfall(\n          [\n            function (cc) {\n              groupSchema.getAllGroups(function (err, grps) {\n                if (err) return cc(err)\n                return cc(null, grps)\n              })\n            },\n            function (grps, cc) {\n              async.eachSeries(\n                users,\n                function (u, c) {\n                  const user = u.toObject()\n\n                  const groups = _.filter(grps, function (g) {\n                    return _.some(g.members, function (m) {\n                      return m._id.toString() === user._id.toString()\n                    })\n                  })\n\n                  user.groups = _.map(groups, function (group) {\n                    return { name: group.name, _id: group._id }\n                  })\n\n                  result.push(stripUserFields(user))\n                  return c()\n                },\n                function (err) {\n                  if (err) return callback(err)\n                  return cc(null, result)\n                }\n              )\n            }\n          ],\n          function (err, results) {\n            if (err) return callback(err)\n            return callback(null, results)\n          }\n        )\n      }\n    ],\n    function (err, rr) {\n      if (err) return res.status(400).json({ error: 'Error: ' + err.message })\n\n      return res.json({ success: true, count: _.size(rr), users: rr })\n    }\n  )\n}\n\n/**\n * @api {post} /api/v1/users/create Create Account\n * @apiName createAccount\n * @apiDescription Creates an account with the given post data.\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n *\n * @apiParamExample {json} Request-Example:\n * {\n *      \"aUsername\":    \"user.name\",\n *      \"aPass\":        \"password\",\n *      \"aPassConfirm\": \"password\",\n *      \"aFullname\":    \"fullname\",\n *      \"aEmail\":       \"email@email.com\",\n *      \"aRole\":        {RoleId},\n *      \"aTitle\":       \"User Title\",\n *      \"aGrps\":        [{GroupId}]\n * }\n *\n * @apiSuccess {boolean} success If the Request was a success\n * @apiSuccess {object} error Error, if occurred\n * @apiSuccess {object} account Saved Account Object\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.create = async function (req, res) {\n  const response = {}\n  response.success = true\n\n  const postData = req.body\n\n  if (_.isUndefined(postData) || !_.isObject(postData)) {\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n  }\n\n  const propCheck = ['aUsername', 'aPass', 'aPassConfirm', 'aFullname', 'aEmail', 'aRole']\n\n  if (\n    !_.every(propCheck, function (x) {\n      return x in postData\n    })\n  ) {\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n  }\n\n  if (_.isUndefined(postData.aGrps) || _.isNull(postData.aGrps) || !_.isArray(postData.aGrps)) {\n    return res.status(400).json({ success: false, error: 'Invalid Group Array' })\n  }\n\n  if (postData.aPass !== postData.aPassConfirm)\n    return res.status(400).json({ success: false, error: 'Invalid Password Match' })\n\n  async.series(\n    [\n      function (next) {\n        SettingUtil.getSettings(function (err, content) {\n          if (err) return next(err)\n          const settings = content.data.settings\n          if (settings.accountsPasswordComplexity.value) {\n            const passwordComplexity = require('../../../settings/passwordComplexity')\n            if (!passwordComplexity.validate(postData.aPass))\n              return next({ message: 'Password does not meet minimum requirements.' })\n\n            return next()\n          }\n\n          return next()\n        })\n      },\n      function (next) {\n        const chance = new Chance()\n\n        const account = new UserSchema({\n          username: postData.aUsername,\n          password: postData.aPass,\n          fullname: postData.aFullname,\n          email: postData.aEmail,\n          accessToken: chance.hash(),\n          role: postData.aRole\n        })\n\n        if (postData.aTitle) {\n          account.title = postData.aTitle\n        }\n\n        account.save(function (err, a) {\n          if (err) return next(err)\n\n          a.populate('role', function (err, populatedAccount) {\n            if (err) return next(err)\n\n            response.account = populatedAccount.toObject()\n            delete response.account.password\n\n            const groups = []\n\n            async.each(\n              postData.aGrps,\n              function (id, done) {\n                if (_.isUndefined(id)) return done()\n                groupSchema.getGroupById(id, function (err, grp) {\n                  if (err) return done(err)\n                  if (!grp) return done({ message: `Invalid Group (${id}) - Group not found. Check Group ID.` })\n\n                  grp.addMember(a._id, function (err, success) {\n                    if (err) return done(err)\n\n                    grp.save(function (err) {\n                      if (err) return done(err)\n                      groups.push(grp)\n                      done(null, success)\n                    })\n                  })\n                })\n              },\n              function (e) {\n                if (e) return next(e)\n                response.account.groups = groups\n\n                return next()\n              }\n            )\n          })\n        })\n      }\n    ],\n    function (e) {\n      if (e) {\n        response.success = false\n        response.error = e\n        winston.debug(response)\n        return res.status(400).json(response)\n      }\n\n      return res.json(response)\n    }\n  )\n}\n\n/**\n * @api {post} /api/v1/public/account/create Create Public Account\n * @apiName createPublicAccount\n * @apiDescription Creates an account with the given post data.\n * @apiVersion 0.1.8\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n *\n * @apiParamExample {json} Request-Example:\n * {\n *      \"aFullname\":    \"user name\",\n *      \"aEmail\":       \"email@email.com\"\"\n *      \"aPassword\":    \"password\",\n * }\n *\n * @apiSuccess {boolean} success If the Request was a success\n * @apiSuccess {object} error Error, if occurred\n * @apiSuccess {object} account Saved Account Object\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.createPublicAccount = function (req, res) {\n  const SettingSchema = require('../../../models/setting')\n\n  const response = {}\n  response.success = true\n  const postData = req.body\n  if (!_.isObject(postData)) return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n\n  let user, group\n\n  async.waterfall(\n    [\n      function (next) {\n        SettingSchema.getSetting('allowUserRegistration:enable', function (err, allowUserRegistration) {\n          if (err) return next(err)\n          if (!allowUserRegistration) {\n            winston.warn('Public account creation was attempted while disabled!')\n            return next({ message: 'Public account creation is disabled.' })\n          }\n\n          return next()\n        })\n      },\n      function (next) {\n        SettingSchema.getSetting('role:user:default', function (err, roleDefault) {\n          if (err) return next(err)\n          if (!roleDefault) {\n            winston.error('No Default User Role Set. (Settings > Permissions > Default User Role)')\n            return next({ message: 'No Default Role Set. Please contact administrator.' })\n          }\n\n          return next(null, roleDefault)\n        })\n      },\n      function (roleDefault, next) {\n        SettingSchema.getSetting('accountsPasswordComplexity:enable', function (err, passwordComplexitySetting) {\n          if (err) return next(err)\n          if (!passwordComplexitySetting || passwordComplexitySetting.value === true) {\n            const passwordComplexity = require('../../../settings/passwordComplexity')\n            if (!passwordComplexity.validate(postData.user.password))\n              return next({ message: 'Password does not minimum requirements.' })\n\n            return next(null, roleDefault)\n          }\n\n          return next(null, roleDefault)\n        })\n      },\n      function (roleDefault, next) {\n        const UserSchema = require('../../../models/user')\n        user = new UserSchema({\n          username: postData.user.email,\n          password: postData.user.password,\n          fullname: postData.user.fullname,\n          email: postData.user.email,\n          role: roleDefault.value\n        })\n\n        user.save(function (err, savedUser) {\n          if (err) return next(err)\n\n          return next(null, savedUser)\n        })\n      },\n      function (savedUser, next) {\n        const GroupSchema = require('../../../models/group')\n        group = new GroupSchema({\n          name: savedUser.email,\n          members: [savedUser._id],\n          sendMailTo: [savedUser._id],\n          public: true\n        })\n\n        group.save(function (err, savedGroup) {\n          if (err) return next(err)\n\n          return next(null, { user: savedUser, group: savedGroup })\n        })\n      }\n    ],\n    function (err, result) {\n      if (err) winston.debug(err)\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      delete result.user.password\n      result.user.password = undefined\n\n      return res.json({\n        success: true,\n        userData: { user: result.user, group: result.group }\n      })\n    }\n  )\n}\n\n/**\n * @api {put} /api/v1/users/:username Update User\n * @apiName updateUser\n * @apiDescription Updates a single user.\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiParamExample {json} Request:\n * {\n        aId:            {{_id}},\n        aUsername:      {{username}},\n        aFullname:      {{fullname}},\n        aTitle:         {{title}},\n        aPass:          {{password}},\n        aPassconfirm:   {{password_confirm}},\n        aEmail:         {{email}},\n        aRole:          {{role.id}},\n        aGrps:          [{{group._id}}]\n * }\n *\n * @apiSuccess {object} user Saved User Object [Stripped]\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.update = function (req, res) {\n  const username = req.params.username\n  if (_.isNull(username) || _.isUndefined(username))\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n\n  const data = req.body\n  // saveGroups - Profile saving where groups are not sent\n  const saveGroups = !_.isUndefined(data.saveGroups) ? data.saveGroups : true\n  let passwordUpdated = false\n\n  const obj = {\n    fullname: data.aFullname,\n    title: data.aTitle,\n    password: data.aPass,\n    passconfirm: data.aPassConfirm,\n    email: data.aEmail,\n    role: data.aRole,\n    groups: data.aGrps\n  }\n\n  if (_.isNull(obj.groups) || _.isUndefined(obj.groups)) {\n    obj.groups = []\n  } else if (!_.isArray(obj.groups)) {\n    obj.groups = [obj.groups]\n  }\n\n  let passwordComplexityEnabled = true\n\n  async.series(\n    {\n      settings: function (done) {\n        var SettingUtil = require('../../../settings/settingsUtil')\n        SettingUtil.getSettings(function (err, content) {\n          if (err) return done(err)\n          var settings = content.data.settings\n          passwordComplexityEnabled = settings.accountsPasswordComplexity.value\n\n          return done()\n        })\n      },\n      user: function (done) {\n        UserSchema.getUserByUsername(username, function (err, user) {\n          if (err) return done(err)\n          if (!user) return done('Invalid User Object')\n\n          obj._id = user._id\n\n          if (\n            !_.isUndefined(obj.password) &&\n            !_.isEmpty(obj.password) &&\n            !_.isUndefined(obj.passconfirm) &&\n            !_.isEmpty(obj.passconfirm)\n          ) {\n            if (obj.password === obj.passconfirm) {\n              if (passwordComplexityEnabled) {\n                // check Password Complexity\n                const passwordComplexity = require('../../../settings/passwordComplexity')\n                if (!passwordComplexity.validate(obj.password)) return done('Password does not meet requirements')\n              }\n\n              user.password = obj.password\n              passwordUpdated = true\n            }\n          }\n\n          if (!_.isUndefined(obj.fullname) && obj.fullname.length > 0) user.fullname = obj.fullname\n          if (!_.isUndefined(obj.email) && obj.email.length > 0) user.email = obj.email\n          if (!_.isUndefined(obj.title) && obj.title.length > 0) user.title = obj.title\n          if (!_.isUndefined(obj.role) && obj.role.length > 0) user.role = obj.role\n\n          user.save(function (err, nUser) {\n            if (err) return done(err)\n\n            nUser.populate('role', function (err, populatedUser) {\n              if (err) return done(err)\n              const resUser = stripUserFields(populatedUser)\n\n              return done(null, resUser)\n            })\n          })\n        })\n      },\n      groups: function (done) {\n        if (!saveGroups) {\n          groupSchema.getAllGroupsOfUser(obj._id, done)\n        } else {\n          const userGroups = []\n          groupSchema.getAllGroups(function (err, groups) {\n            if (err) return done(err)\n            async.each(\n              groups,\n              function (grp, callback) {\n                if (_.includes(obj.groups, grp._id.toString())) {\n                  if (grp.isMember(obj._id)) {\n                    userGroups.push(grp)\n                    return callback()\n                  }\n                  grp.addMember(obj._id, function (err, result) {\n                    if (err) return callback(err)\n\n                    if (result) {\n                      grp.save(function (err) {\n                        if (err) return callback(err)\n                        userGroups.push(grp)\n                        return callback()\n                      })\n                    } else {\n                      return callback()\n                    }\n                  })\n                } else {\n                  // Remove Member from group\n                  grp.removeMember(obj._id, function (err, result) {\n                    if (err) return callback(err)\n                    if (result) {\n                      grp.save(function (err) {\n                        if (err) return callback(err)\n\n                        return callback()\n                      })\n                    } else {\n                      return callback()\n                    }\n                  })\n                }\n              },\n              function (err) {\n                if (err) return done(err)\n\n                return done(null, userGroups)\n              }\n            )\n          })\n        }\n      }\n    },\n    async function (err, results) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err })\n      }\n\n      const user = results.user.toJSON()\n      user.groups = results.groups.map(function (g) {\n        return { _id: g._id, name: g.name }\n      })\n\n      if (passwordUpdated) {\n        const Session = require('../../../models/session')\n        await Session.destroy(user._id)\n      }\n\n      return res.json({ success: true, user: user })\n    }\n  )\n}\n\n/**\n * @api {put} /api/v1/users/:username/updatepreferences Updates User Preferences\n * @apiName updatePreferences\n * @apiDescription Updates a single user preference.\n * @apiVersion 0.1.0\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"Content-Type: application/json\" -H \"accesstoken: {accesstoken}\" -X PUT -d \"{\\\"preference\\\":\\\"{preference_name}\\\",\\\"value\\\":{value}}\" -l http://localhost/api/v1/users/{username}/updatepreferences\n *\n * @apiParamExample {json} Request:\n * {\n *      \"preference\": \"preference_name\",\n *      \"value\": \"preference_value\"\n * }\n *\n * @apiSuccess {object} user Saved User Object [Stripped]\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.updatePreferences = function (req, res) {\n  const username = req.params.username\n  if (typeof username === 'undefined') {\n    return res.status(400).json({ success: false, error: 'Invalid Request' })\n  }\n\n  const data = req.body\n  const preference = data.preference\n  const value = data.value\n\n  UserSchema.getUserByUsername(username, function (err, user) {\n    if (err) {\n      winston.warn('[API:USERS:UpdatePreferences] Error= ' + err)\n      return res.status(400).json({ success: false, error: err })\n    }\n\n    if (_.isNull(user.preferences)) {\n      user.preferences = {}\n    }\n\n    user.preferences[preference] = value\n\n    user.save(function (err, u) {\n      if (err) {\n        winston.warn('[API:USERS:UpdatePreferences] Error= ' + err)\n        return res.status(400).json({ success: false, error: err })\n      }\n\n      const resUser = stripUserFields(u)\n\n      return res.json({ success: true, user: resUser })\n    })\n  })\n}\n\n/**\n * @api {delete} /api/v1/users/:username Delete / Disable User\n * @apiName deleteUser\n * @apiDescription Disables or Deletes the giving user via username\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -X DELETE -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:username\n *\n * @apiSuccess {boolean}     success    Was the user successfully Deleted or disabled.\n *\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.deleteUser = function (req, res) {\n  const username = req.params.username\n\n  if (_.isUndefined(username) || _.isNull(username)) return res.status(400).json({ error: 'Invalid Request' })\n\n  async.waterfall(\n    [\n      function (cb) {\n        UserSchema.getUserByUsername(username, function (err, user) {\n          if (err) return cb(err)\n\n          if (_.isNull(user)) {\n            return cb({ message: 'Invalid User' })\n          }\n\n          if (user.username.toLowerCase() === req.user.username) {\n            return cb({ message: 'Cannot remove yourself!' })\n          }\n\n          if (!permissions.canThis(req.user.role, 'accounts:delete')) return cb({ message: 'Access Denied' })\n\n          // TODO: FIX THIS FOR HIERARCHY!!\n          // if (req.user.role.toLowerCase() === 'support' || req.user.role.toLowerCase() === 'user') {\n          //     if (user.role.toLowerCase() === 'mod' || user.role.toLowerCase() === 'admin')\n          //         return cb({message: 'Insufficient permissions'});\n          //\n          // }\n\n          return cb(null, user)\n        })\n      },\n      function (user, cb) {\n        const ticketSchema = require('../../../models/ticket')\n        ticketSchema.find({ owner: user._id }, function (err, tickets) {\n          if (err) return cb(err)\n\n          const hasTickets = _.size(tickets) > 0\n          return cb(null, hasTickets, user)\n        })\n      },\n      function (hasTickets, user, cb) {\n        const conversationSchema = require('../../../models/chat/conversation')\n        conversationSchema.getConversationsWithLimit(user._id, 10, function (err, conversations) {\n          if (err) return cb(err)\n\n          const hasConversations = _.size(conversations) > 0\n          return cb(null, hasTickets, hasConversations, user)\n        })\n      },\n      function (hasTickets, hasConversations, user, cb) {\n        const ticketSchema = require('../../../models/ticket')\n        ticketSchema.find({ assignee: user._id }, function (err, tickets) {\n          if (err) return cb(err)\n\n          const isAssignee = _.size(tickets) > 0\n          return cb(null, hasTickets, hasConversations, isAssignee, user)\n        })\n      },\n      function (hasTickets, hasConversations, isAssignee, user, cb) {\n        if (hasTickets || hasConversations || isAssignee) {\n          // Disable if the user has tickets or conversations\n          user.softDelete(function (err) {\n            if (err) return cb(err)\n\n            // Force logout if Logged in\n            return cb(null, true)\n          })\n        } else {\n          user.remove(function (err) {\n            if (err) return cb(err)\n\n            return cb(null, false)\n          })\n        }\n      }\n    ],\n    function (err, disabled) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      return res.json({ success: true, disabled: disabled })\n    }\n  )\n}\n\n/**\n * @api {get} /api/v1/users/:username/enable Enable User\n * @apiName enableUser\n * @apiDescription Enable the giving user via username\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -X DELETE -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:username/enable\n *\n * @apiSuccess {boolean}     success    Was the user successfully enabled.\n *\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.enableUser = function (req, res) {\n  const username = req.params.username\n  if (_.isUndefined(username)) return res.status(400).json({ error: 'Invalid Request' })\n\n  UserSchema.getUserByUsername(username, function (err, user) {\n    if (err) {\n      winston.debug(err)\n      return res.status(400).json({ error: err.message })\n    }\n\n    if (_.isUndefined(user) || _.isNull(user)) return res.status(400).json({ error: 'Invalid Request' })\n\n    if (!permissions.canThis(req.user.role, 'accounts:delete'))\n      return res.status(401).json({ error: 'Invalid Permissions' })\n\n    user.deleted = false\n\n    user.save(function (err) {\n      if (err) return res.status(400).json({ error: err.message })\n\n      res.json({ success: true })\n    })\n  })\n}\n\n/**\n * @api {get} /api/v1/users/:username Get User\n * @apiName getUser\n * @apiDescription Gets the user via the given username\n * @apiVersion 0.1.0\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:username\n *\n * @apiSuccess {object}     _id                 The MongoDB ID\n * @apiSuccess {string}     username            Username of the User\n * @apiSuccess {string}     fullname            Fullname of the User\n * @apiSuccess {string}     email               Email Address of the User\n * @apiSuccess {string}     role                Assigned Permission Role of the user\n * @apiSuccess {string}     title               Title of the User\n * @apiSuccess {string}     image               Image filename for the user's profile picture\n * @apiSuccess {array}      iOSDeviceTokens     iOS Device Tokens for push notifications\n *\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.single = function (req, res) {\n  const username = req.params.username\n  if (_.isUndefined(username)) return res.status(400).json({ error: 'Invalid Request.' })\n\n  const response = {\n    success: true,\n    groups: []\n  }\n\n  async.waterfall(\n    [\n      function (done) {\n        UserSchema.getUserByUsername(username, function (err, user) {\n          if (err) return done(err)\n\n          if (_.isUndefined(user) || _.isNull(user)) return done('Invalid Request')\n\n          user = stripUserFields(user)\n          response.user = user\n\n          done(null, user)\n        })\n      },\n      function (user, done) {\n        groupSchema.getAllGroupsOfUserNoPopulate(user._id, function (err, grps) {\n          if (err) return done(err)\n\n          response.groups = _.map(grps, function (o) {\n            return o._id\n          })\n\n          done(null, response.groups)\n        })\n      }\n    ],\n    function (err) {\n      if (err) return res.status(400).json({ error: err })\n\n      res.json(response)\n    }\n  )\n}\n\n/**\n * @api {get} /api/v1/users/notificationCount Get Notification Count\n * @apiName getNotificationCount\n * @apiDescription Gets the current notification count for the currently logged in user.\n * @apiVersion 0.1.0\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/notificationCount\n *\n * @apiSuccess {string}     count   The Notification Count\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.notificationCount = function (req, res) {\n  notificationSchema.getUnreadCount(req.user._id, function (err, count) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    return res.json({ success: true, count: count.toString() })\n  })\n}\n\napiUsers.getNotifications = function (req, res) {\n  notificationSchema.findAllForUser(req.user._id, function (err, notifications) {\n    if (err) return res.status(500).json({ success: false, error: err.message })\n\n    return res.json({ success: true, notifications: notifications })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/generateapikey Generate API Key\n * @apiName generateApiKey\n * @apiDescription Generates an API key for the given user id\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/generateapikey\n *\n * @apiSuccess {string}     token   Generated API Key\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.generateApiKey = function (req, res) {\n  const id = req.params.id\n  if (_.isUndefined(id) || _.isNull(id)) return res.status(400).json({ error: 'Invalid Request' })\n  if (!req.user.role.isAdmin && req.user._id.toString() !== id)\n    return res.status(401).json({ success: false, error: 'Unauthorized' })\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err || !user) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n    // if (user.accessToken) return res.status(400).json({ success: false, error: 'User already has generated token' })\n\n    user.addAccessToken(function (err, token) {\n      if (err) return res.status(400).json({ error: 'Invalid Request' })\n\n      res.json({ token: token })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/removeapikey Removes API Key\n * @apiName removeApiKey\n * @apiDescription Removes API key for the given user id\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/removeapikey\n *\n * @apiSuccess {boolean}     success   Successful?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.removeApiKey = function (req, res) {\n  const id = req.params.id\n  if (_.isUndefined(id) || _.isNull(id)) return res.status(400).json({ error: 'Invalid Request' })\n\n  if (!req.user.isAdmin && req.user._id.toString() !== id) return res.status(401).json({ success: 'Unauthorized' })\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err) return res.status(400).json({ error: 'Invalid Request', fullError: err })\n\n    user.removeAccessToken(function (err) {\n      if (err) return res.status(400).json({ error: 'Invalid Request', fullError: err })\n\n      return res.json({ success: true })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/generatel2auth Generate Layer Two Auth\n * @apiName generateL2Auth\n * @apiDescription Generate a new layer two auth for the given user id\n * @apiVersion 0.1.8\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/generatel2auth\n *\n * @apiSuccess {boolean}     success   Successful?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.generateL2Auth = function (req, res) {\n  const id = req.params.id\n  if (id.toString() !== req.user._id.toString()) {\n    return res.status(400).json({ success: false, error: 'Invalid Account Owner!' })\n  }\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n    user.generateL2Auth(function (err, generatedKey) {\n      if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n      req.session.l2auth = 'totp'\n      return res.json({ success: true, generatedKey: generatedKey })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/removel2auth Removes Layer Two Auth\n * @apiName removeL2Auth\n * @apiDescription Removes Layer Two Auth for the given user id\n * @apiVersion 0.1.8\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/removel2auth\n *\n * @apiSuccess {boolean}     success   Successful?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.removeL2Auth = function (req, res) {\n  const id = req.params.id\n  if (id.toString() !== req.user._id.toString()) {\n    return res.status(400).json({ success: false, error: 'Invalid Account Owner!' })\n  }\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n    user.removeL2Auth(function (err) {\n      if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n      req.session.l2auth = null\n      return res.json({ success: true })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/checkemail\n * @apiName checkEmail\n * @apiDescription Returns a true if email exists\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/checkemail\n *\n * @apiSuccess {boolean}     success   Successful?\n * @apiSuccess {boolean}     emailexist Does Email Exist?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\n\napiUsers.checkEmail = function (req, res) {\n  const email = req.body.email\n\n  if (_.isUndefined(email) || _.isNull(email)) {\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n  }\n\n  UserSchema.getUserByEmail(email, function (err, users) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    if (!_.isNull(users)) {\n      return res.json({ success: true, exist: true })\n    }\n\n    return res.json({ success: true, exist: false })\n  })\n}\n\n/**\n * @api {get} /api/v1/users/getassignees Get Assignees\n * @apiName getassignees\n * @apiDescription Returns a list of assignable users\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/getassignees\n *\n * @apiSuccess {boolean}     success   Successful?\n * @apiSuccess {array}       users     Array of Assignees\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.getAssingees = function (req, res) {\n  UserSchema.getAssigneeUsers(function (err, users) {\n    if (err) return res.status(400).json({ error: 'Invalid Request' })\n\n    const strippedUsers = []\n\n    async.each(\n      users,\n      function (user, cb) {\n        user = stripUserFields(user)\n        strippedUsers.push(user)\n\n        cb()\n      },\n      function () {\n        return res.json({ success: true, users: strippedUsers })\n      }\n    )\n  })\n}\n\napiUsers.getGroups = function (req, res) {\n  if (req.user.role.isAdmin || req.user.role.isAgent) {\n    const departmentSchema = require('../../../models/department')\n    departmentSchema.getDepartmentGroupsOfUser(req.user._id, function (err, groups) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      const mappedGroups = groups.map(function (g) {\n        return g._id\n      })\n\n      return res.json({ success: true, groups: mappedGroups })\n    })\n  } else {\n    if (req.user.username !== req.params.username)\n      return res.status(400).json({ success: false, error: 'Invalid API Call' })\n\n    groupSchema.getAllGroupsOfUserNoPopulate(req.user._id, function (err, groups) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      const mappedGroups = groups.map(function (g) {\n        return g._id\n      })\n\n      return res.json({ success: true, groups: mappedGroups })\n    })\n  }\n}\n\nfunction stripUserFields (user) {\n  user.password = undefined\n  user.accessToken = undefined\n  user.__v = undefined\n  user.tOTPKey = undefined\n  user.iOSDeviceTokens = undefined\n\n  return user\n}\n\nmodule.exports = apiUsers\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\ndefine([\n  'angular',\n  'underscore',\n  'jquery',\n  'modules/helpers',\n  'uikit',\n  'qrcode',\n  'history',\n  'angularjs/services/session'\n], function (angular, _, $, helpers, UIKit) {\n  return angular\n    .module('trudesk.controllers.profile', ['trudesk.services.session'])\n    .controller('profileCtrl', function (SessionService, $scope, $window, $document, $http, $log, $timeout) {\n      var otpEnabled = false\n      $scope.init = function () {\n        // Fix Inputs if input is preloaded with a value\n        fixInputLabels()\n        otpEnabled = $scope.otpEnabled\n      }\n\n      function fixInputLabels () {\n        $timeout(function () {\n          $('input.md-input').each(function () {\n            var vm = this\n            var self = $(vm)\n            if (!_.isEmpty(self.val())) {\n              var s = self.parent('.md-input-wrapper')\n              if (s.length > 0) {\n                s.addClass('md-input-filled')\n              }\n            }\n          })\n        }, 0)\n      }\n\n      function validateEmail (email) {\n        return String(email)\n          .toLowerCase()\n          .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          )\n      }\n\n      $scope.updateUser = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n        var data = getFormData()\n\n        if (\n          data.fullname.toString().length > 25 ||\n          data.password.toString().length > 255 ||\n          data.cPassword.toString().length > 255 ||\n          data.email.toString().length > 255 ||\n          !validateEmail(data.email.toString())\n        ) {\n          helpers.UI.showSnackbar('Form data invalid.', true)\n          return false\n        }\n\n        $http\n          .put('/api/v1/users/' + data.username, {\n            aId: id,\n            aFullname: data.fullname,\n            aPass: data.password,\n            aPassConfirm: data.cPassword,\n            aEmail: data.email,\n\n            saveGroups: false\n          })\n          .success(function () {\n            resetForm()\n            helpers.UI.showSnackbar({\n              text: 'Profile Successfully Saved',\n              textColor: '#f8f8f2'\n            })\n          })\n          .error(function (e) {\n            if (e.error.message) {\n              $log.log('[trudesk:profile:updateUser] - ' + e.error.message)\n              helpers.UI.showSnackbar('Error ' + e.error.message, true)\n            } else {\n              $log.log('[trudesk:profile:updateUser] - ' + e.error)\n              helpers.UI.showSnackbar('Error: ' + e.error, true)\n            }\n          })\n      }\n\n      $scope.showTour = function () {\n        var username = SessionService.getUser().username\n        $http\n          .put('/api/v1/users/' + username + '/updatepreferences', {\n            preference: 'tourCompleted',\n            value: false\n          })\n          .success(function () {\n            $window.location.href = '/'\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:showTour] - ' + e.error.message)\n            helpers.UI.showSnackbar('Error ' + e.error.message, true)\n          })\n      }\n\n      $scope.back = function ($event) {\n        History.go(-1)\n        $event.preventDefault()\n      }\n\n      $scope.generateApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/generateapikey')\n          .success(function (tokenJson) {\n            $('#aApiKey').val(tokenJson.token)\n            $('.removeApiButton').removeClass('hide')\n            $('.generateApiButton').addClass('hide')\n            // helpers.showFlash('API Key Successfully Generated');\n            helpers.UI.showSnackbar('API Key Successfully Generated', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:generateApiKey] - ' + e)\n            // helpers.showFlash('Error: ' + e, true);\n            helpers.UI.showSnackbar('Error: Unable to generate API Key!', true)\n          })\n      }\n\n      $scope.removeApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/removeapikey')\n          .success(function () {\n            $('#aApiKey').val('')\n            $('.generateApiButton').removeClass('hide')\n            $('.removeApiButton').addClass('hide')\n            helpers.UI.showSnackbar('API Key Successfully Revoked', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:removeApiKey]', e)\n            helpers.UI.showSnackbar('Error: Unable to remove API Key!', true)\n          })\n      }\n\n      $scope.otpChange = function (event) {\n        var $totpSettings = $('.totp-settings-wrap')\n        var $totpPanel = $totpSettings.find('.panel-body2')\n        var $tOTPKey = $totpSettings.find('#tOTPKey')\n        var $qrCode = $totpSettings.find('#totp-qrcode')\n        event.preventDefault()\n\n        if (otpEnabled) {\n          UIKit.modal.confirm(\n            '<span style=\"font-size: 16px; color: #FF9800;\">WARNING: Disabling Two Factor Authentication will remove your shared secret. A new key will generate when re-enabled.</span><br />' +\n              'Are you sure you want to disable two factor authentication?',\n            function () {\n              removeL2Auth(function (err) {\n                if (err) {\n                  $log.error(err)\n                }\n\n                angular.element(event.target).attr('checked', false)\n                $totpPanel.slideUp(400, function () {\n                  $totpPanel.css({ overflow: 'hidden', margin: 0 })\n                  $qrCode.find('canvas').remove()\n                  $tOTPKey.val()\n                  $timeout(function () {\n                    otpEnabled = false\n                  }, 0)\n                })\n              })\n            },\n            {\n              labels: { Ok: 'Yes', Cancel: 'No' }\n            }\n          )\n        } else {\n          generateL2Auth(function (err, key) {\n            if (err) {\n              $log.error(err)\n              helpers.UI.showSnackbar('An unknown error occurred. Check console.', true)\n              return\n            }\n\n            $timeout(function () {\n              otpEnabled = true\n              angular.element(event.target).prop('checked', true)\n            }, 0)\n\n            var host = $('div[data-host]').attr('data-host')\n            var username = SessionService.getUser().username\n            var qrKey =\n              'otpauth://totp/' +\n              host +\n              '-' +\n              username +\n              ':' +\n              host +\n              '-' +\n              username +\n              '?secret=' +\n              key +\n              '&issuer=Trudesk'\n            $qrCode.qrcode({ width: 242, height: 242, text: qrKey })\n            $tOTPKey.val(key)\n            $totpPanel.css({ margin: '10px 7px 7px 7px' })\n            $totpPanel.find('input').removeClass('hide')\n            $totpPanel.removeClass('hide')\n            fixInputLabels()\n            $totpPanel.slideDown()\n            // }\n          })\n        }\n      }\n\n      function generateL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http\n          .post(\n            '/api/v1/users/' + id + '/generatel2auth',\n            {},\n            {\n              headers: {\n                'CSRF-TOKEN': $document[0].querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              }\n            }\n          )\n          .then(\n            function success (response) {\n              if (!response.data.success) {\n                helpers.UI.showSnackbar('Error: Unknown error has occurred.', true)\n                if (_.isFunction(completed)) {\n                  return completed('Error: Unknown error has occurred.')\n                }\n              } else {\n                // Success\n                if (_.isFunction(completed)) {\n                  completed(null, response.data.generatedKey)\n                }\n              }\n            },\n            function error (err) {\n              $log.error('[trudesk:profile:generateL2Auth]')\n              $log.error(err)\n              helpers.UI.showSnackbar('Error: Could not generate new secret! Check Console', true)\n              if (_.isFunction(completed)) {\n                completed(err)\n              }\n            }\n          )\n      }\n\n      function removeL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http\n          .post(\n            '/api/v1/users/' + id + '/removel2auth',\n            {},\n            {\n              headers: {\n                'CSRF-TOKEN': $document[0].querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              }\n            }\n          )\n          .success(function () {\n            if (_.isFunction(completed)) {\n              completed()\n            }\n          })\n          .error(function (e) {\n            $log.error('[trudesk:profile:removeL2Auth]')\n            $log.error(e)\n            helpers.UI.showSnackbar('Error: Could not remove. Check Console', true)\n            if (_.isFunction(completed)) {\n              completed(e)\n            }\n          })\n      }\n\n      function getFormData () {\n        var data = {}\n        data.username = $('#aUsername').val()\n        data.fullname = $('#aFullname').val()\n        data.password = $('#aPass').val()\n        data.cPassword = $('#aPassConfirm').val()\n        data.email = $('#aEmail').val()\n\n        return data\n      }\n\n      function resetForm () {\n        $('#aPass').val('')\n        $('#aPassConfirm').val('')\n      }\n    })\n})\n"], "fixing_code": ["/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    2/18/19 5:59 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst packagejson = require('../../../../package')\n\nmodule.exports = function (middleware, router, controllers) {\n  // Shortenconsts\n  const apiv1 = middleware.api\n  const isAdmin = middleware.isAdmin\n  const isAgent = middleware.isAgent\n  const isAgentOrAdmin = middleware.isAgentOrAdmin\n  const canUser = middleware.canUser\n  const apiCtrl = controllers.api.v1\n\n  // Common\n  router.get('/api', controllers.api.index)\n  router.get('/api/v1/version', (req, res) => {\n    return res.json({ version: packagejson.version })\n  })\n  router.post('/api/v1/login', apiCtrl.common.login)\n  router.get('/api/v1/login', apiv1, apiCtrl.common.getLoggedInUser)\n  router.get('/api/v1/logout', apiv1, apiCtrl.common.logout)\n\n  // Roles\n  router.get('/api/v1/roles', apiv1, apiCtrl.roles.get)\n  router.post('/api/v1/roles', apiv1, isAdmin, apiCtrl.roles.create)\n  router.put('/api/v1/roles/:id', apiv1, isAdmin, apiCtrl.roles.update)\n  router.delete('/api/v1/roles/:id', apiv1, isAdmin, apiCtrl.roles.delete)\n\n  // Tickets\n  router.get('/api/v1/tickets', apiv1, canUser('tickets:view'), apiCtrl.tickets.get)\n  router.get('/api/v1/tickets/group/:id', apiv1, isAdmin, canUser('tickets:view'), apiCtrl.tickets.getByGroup)\n  router.get('/api/v1/tickets/search', apiv1, canUser('tickets:view'), apiCtrl.tickets.search)\n  router.post('/api/v1/tickets/create', apiv1, canUser('tickets:create'), apiCtrl.tickets.create)\n  router.get('/api/v1/tickets/type/:id', apiv1, apiCtrl.tickets.getType)\n  router.post('/api/v1/tickets/type/:id/removepriority', apiv1, isAdmin, apiCtrl.tickets.typeRemovePriority)\n  router.post('/api/v1/tickets/type/:id/addpriority', apiv1, isAdmin, apiCtrl.tickets.typeAddPriority)\n  router.get('/api/v1/tickets/types', apiv1, apiCtrl.tickets.getTypes)\n  router.post('/api/v1/tickets/types/create', apiv1, isAdmin, apiCtrl.tickets.createType)\n  router.put('/api/v1/tickets/types/:id', apiv1, isAdmin, apiCtrl.tickets.updateType)\n  router.delete('/api/v1/tickets/types/:id', apiv1, isAdmin, apiCtrl.tickets.deleteType)\n  router.post('/api/v1/tickets/priority/create', apiv1, isAdmin, apiCtrl.tickets.createPriority)\n  router.post('/api/v1/tickets/priority/:id/delete', apiv1, isAdmin, apiCtrl.tickets.deletePriority)\n  router.get('/api/v1/tickets/priorities', apiv1, apiCtrl.tickets.getPriorities)\n  router.put('/api/v1/tickets/priority/:id', apiv1, isAdmin, apiCtrl.tickets.updatePriority)\n\n  router.get('/api/v1/tickets/overdue', apiv1, canUser('tickets:view'), apiCtrl.tickets.getOverdue)\n  router.post('/api/v1/tickets/addcomment', apiv1, canUser('comments:create'), apiCtrl.tickets.postComment)\n  router.post('/api/v1/tickets/addnote', apiv1, canUser('tickets:notes'), apiCtrl.tickets.postInternalNote)\n  router.get('/api/v1/tickets/tags', apiv1, apiCtrl.tickets.getTags)\n  router.get('/api/v1/tickets/count/tags', apiv1, apiCtrl.tickets.getTagCount)\n  router.get('/api/v1/tickets/count/tags/:timespan', apiv1, apiCtrl.tickets.getTagCount)\n  router.get('/api/v1/tickets/count/days', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/count/days/:timespan', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/count/topgroups', apiv1, apiCtrl.tickets.getTopTicketGroups)\n  router.get('/api/v1/tickets/count/topgroups/:top', apiv1, apiCtrl.tickets.getTopTicketGroups)\n  router.get('/api/v1/tickets/count/topgroups/:timespan/:top', apiv1, apiCtrl.tickets.getTopTicketGroups)\n  router.get(\n    '/api/v1/tickets/count/group/:id',\n    apiv1,\n    isAgentOrAdmin,\n    canUser('tickets:view'),\n    apiCtrl.tickets.getCountByGroup\n  )\n  router.get('/api/v1/tickets/stats', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/stats/group/:group', apiv1, apiCtrl.tickets.getTicketStatsForGroup)\n  router.get('/api/v1/tickets/stats/user/:user', apiv1, apiCtrl.tickets.getTicketStatsForUser)\n  router.get('/api/v1/tickets/stats/:timespan', apiv1, apiCtrl.tickets.getTicketStats)\n  router.get('/api/v1/tickets/deleted', apiv1, isAdmin, apiCtrl.tickets.getDeletedTickets)\n  router.post('/api/v1/tickets/deleted/restore', apiv1, isAdmin, apiCtrl.tickets.restoreDeleted)\n  router.get('/api/v1/tickets/:uid', apiv1, canUser('tickets:view'), apiCtrl.tickets.single)\n  router.put('/api/v1/tickets/:id', apiv1, canUser('tickets:update'), apiCtrl.tickets.update)\n  router.delete('/api/v1/tickets/:id', apiv1, canUser('tickets:delete'), apiCtrl.tickets.delete)\n  router.put('/api/v1/tickets/:id/subscribe', apiv1, apiCtrl.tickets.subscribe)\n  router.delete(\n    '/api/v1/tickets/:tid/attachments/remove/:aid',\n    canUser('tickets:update'),\n    apiv1,\n    apiCtrl.tickets.removeAttachment\n  )\n\n  // Tags\n  router.get('/api/v1/count/tags', middleware.api, function (req, res) {\n    const tagSchema = require('../../../models/tag')\n    tagSchema.countDocuments({}, function (err, count) {\n      if (err) return res.status(500).json({ success: false, error: err })\n\n      return res.json({ success: true, count: count })\n    })\n  })\n\n  router.post('/api/v1/tags/create', apiv1, apiCtrl.tags.createTag)\n  router.get('/api/v1/tags/limit', apiv1, apiCtrl.tags.getTagsWithLimit)\n  router.put('/api/v1/tags/:id', apiv1, isAgentOrAdmin, apiCtrl.tags.updateTag)\n  router.delete('/api/v1/tags/:id', apiv1, isAgentOrAdmin, apiCtrl.tags.deleteTag)\n\n  // Public Tickets\n  const checkCaptcha = middleware.checkCaptcha\n  const checkOrigin = middleware.checkOrigin\n\n  router.post('/api/v1/public/users/checkemail', checkCaptcha, checkOrigin, apiCtrl.users.checkEmail)\n  router.post('/api/v1/public/tickets/create', checkCaptcha, checkOrigin, apiCtrl.tickets.createPublicTicket)\n  router.post('/api/v1/public/account/create', checkCaptcha, checkOrigin, apiCtrl.users.createPublicAccount)\n\n  // Groups\n  router.get('/api/v1/groups', apiv1, apiCtrl.groups.get)\n  router.get('/api/v1/groups/all', apiv1, canUser('groups:view'), apiCtrl.groups.getAll)\n  router.post('/api/v1/groups/create', apiv1, canUser('groups:create'), apiCtrl.groups.create)\n  router.get('/api/v1/groups/:id', apiv1, apiCtrl.groups.getSingleGroup)\n  router.put('/api/v1/groups/:id', apiv1, canUser('groups:update'), apiCtrl.groups.updateGroup)\n  router.delete('/api/v1/groups/:id', apiv1, canUser('groups:delete'), apiCtrl.groups.deleteGroup)\n\n  // Users\n  router.put('/api/v1/profile', apiv1, apiCtrl.users.profileUpdate)\n  router.get('/api/v1/users', apiv1, canUser('accounts:view'), apiCtrl.users.getWithLimit)\n  router.post('/api/v1/users/create', apiv1, canUser('accounts:create'), apiCtrl.users.create)\n  router.get('/api/v1/users/notifications', apiv1, apiCtrl.users.getNotifications)\n  router.get('/api/v1/users/notificationCount', apiv1, apiCtrl.users.notificationCount)\n  router.get('/api/v1/users/getassignees', apiv1, isAgentOrAdmin, apiCtrl.users.getAssingees)\n  router.get('/api/v1/users/:username', apiv1, canUser('accounts:view'), apiCtrl.users.single)\n  router.put('/api/v1/users/:username', apiv1, canUser('accounts:update'), apiCtrl.users.update)\n  router.get('/api/v1/users/:username/groups', apiv1, apiCtrl.users.getGroups)\n  router.put('/api/v1/users/:username/updatepreferences', apiv1, apiCtrl.users.updatePreferences)\n  router.get('/api/v1/users/:username/enable', apiv1, canUser('accounts:update'), apiCtrl.users.enableUser)\n  router.delete('/api/v1/users/:username', apiv1, canUser('accounts:delete'), apiCtrl.users.deleteUser)\n  router.post('/api/v1/users/:id/generateapikey', apiv1, apiCtrl.users.generateApiKey)\n  router.post('/api/v1/users/:id/removeapikey', apiv1, apiCtrl.users.removeApiKey)\n  router.post('/api/v1/users/:id/generatel2auth', apiv1, middleware.csrfCheck, apiCtrl.users.generateL2Auth)\n  router.post('/api/v1/users/:id/removel2auth', apiv1, middleware.csrfCheck, apiCtrl.users.removeL2Auth)\n\n  // Messages\n  router.get('/api/v1/messages', apiv1, apiCtrl.messages.get)\n  router.post('/api/v1/messages/conversation/start', apiv1, apiCtrl.messages.startConversation)\n  router.get('/api/v1/messages/conversation/:id', apiv1, apiCtrl.messages.getMessagesForConversation)\n  router.delete('/api/v1/messages/conversation/:id', apiv1, apiCtrl.messages.deleteConversation)\n  router.get('/api/v1/messages/conversations', apiv1, apiCtrl.messages.getConversations)\n  router.get('/api/v1/messages/conversations/recent', apiv1, apiCtrl.messages.getRecentConversations)\n  router.post('/api/v1/messages/send', apiv1, apiCtrl.messages.send)\n\n  // Notices\n  router.post('/api/v1/notices/create', apiv1, canUser('notices:create'), apiCtrl.notices.create)\n  router.get('/api/v1/notices/clearactive', apiv1, canUser('notices:deactivate'), apiCtrl.notices.clearActive)\n  router.put('/api/v1/notices/:id', apiv1, canUser('notices:update'), apiCtrl.notices.updateNotice)\n  router.delete('/api/v1/notices/:id', apiv1, canUser('notices:delete'), apiCtrl.notices.deleteNotice)\n\n  // Reports Generator\n  const reportsGenCtrl = apiCtrl.reports.generate\n  const genBaseUrl = '/api/v1/reports/generate/'\n  router.post(genBaseUrl + 'tickets_by_group', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByGroup)\n  router.post(genBaseUrl + 'tickets_by_status', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByStatus)\n  router.post(genBaseUrl + 'tickets_by_priority', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByPriority)\n  router.post(genBaseUrl + 'tickets_by_tags', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByTags)\n  router.post(genBaseUrl + 'tickets_by_type', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByType)\n  router.post(genBaseUrl + 'tickets_by_user', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByUser)\n  router.post(genBaseUrl + 'tickets_by_assignee', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByAssignee)\n  router.post(genBaseUrl + 'tickets_by_team', apiv1, canUser('reports:create'), reportsGenCtrl.ticketsByTeam)\n\n  // Settings\n  router.get('/api/v1/settings', apiv1, apiCtrl.settings.getSettings)\n  router.put('/api/v1/settings', apiv1, isAdmin, apiCtrl.settings.updateSetting)\n  router.post('/api/v1/settings/testmailer', apiv1, isAdmin, apiCtrl.settings.testMailer)\n  router.put('/api/v1/settings/mailer/template/:id', apiv1, isAdmin, apiCtrl.settings.updateTemplateSubject)\n  router.get('/api/v1/settings/buildsass', apiv1, isAdmin, apiCtrl.settings.buildsass)\n  router.put('/api/v1/settings/updateroleorder', apiv1, isAdmin, apiCtrl.settings.updateRoleOrder)\n\n  // Backups\n  router.get('/api/v1/backups', apiv1, isAdmin, controllers.backuprestore.getBackups)\n  router.post('/api/v1/backup', apiv1, isAdmin, controllers.backuprestore.runBackup)\n  router.delete('/api/v1/backup/:backup', apiv1, isAdmin, controllers.backuprestore.deleteBackup)\n  router.post('/api/v1/backup/restore', apiv1, isAdmin, controllers.backuprestore.restoreBackup)\n  router.post('/api/v1/backup/upload', apiv1, isAdmin, controllers.backuprestore.uploadBackup)\n  router.get('/api/v1/backup/hastools', apiv1, isAdmin, controllers.backuprestore.hasBackupTools)\n\n  // Editor\n\n  router.get('/api/v1/editor/load/:id', apiv1, isAdmin, controllers.editor.load)\n  router.post('/api/v1/editor/save', apiv1, isAdmin, controllers.editor.save)\n  router.get('/api/v1/editor/assets', apiv1, isAdmin, controllers.editor.getAssets)\n  router.post('/api/v1/editor/assets/remove', apiv1, isAdmin, controllers.editor.removeAsset)\n  router.post('/api/v1/editor/assets/upload', apiv1, isAdmin, controllers.editor.assetsUpload)\n}\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\nconst async = require('async')\nconst _ = require('lodash')\nconst winston = require('../../../logger')\nconst permissions = require('../../../permissions')\nconst emitter = require('../../../emitter')\nconst UserSchema = require('../../../models/user')\nconst groupSchema = require('../../../models/group')\nconst notificationSchema = require('../../../models/notification')\nconst SettingUtil = require('../../../settings/settingsUtil')\nconst Chance = require('chance')\n\nconst apiUsers = {}\n\n/**\n * @api {get} /api/v1/users Gets users with query string\n * @apiName getUsers\n * @apiDescription Gets users with query string\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n *\n * @apiSuccess {boolean} success If the Request was a success\n * @apiSuccess {object} error Error, if occurred\n * @apiSuccess {number} count Count of users in array\n * @apiSuccess {array} users Users returned (populated)\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.getWithLimit = function (req, res) {\n  let limit = 10\n  if (!_.isUndefined(req.query.limit)) {\n    limit = parseInt(req.query.limit)\n  }\n  const page = parseInt(req.query.page)\n  const search = req.query.search\n\n  const obj = {\n    limit: limit,\n    page: page,\n    search: search\n  }\n\n  async.waterfall(\n    [\n      function (callback) {\n        UserSchema.getUserWithObject(obj, function (err, results) {\n          callback(err, results)\n        })\n      },\n      function (users, callback) {\n        const result = []\n\n        async.waterfall(\n          [\n            function (cc) {\n              groupSchema.getAllGroups(function (err, grps) {\n                if (err) return cc(err)\n                return cc(null, grps)\n              })\n            },\n            function (grps, cc) {\n              async.eachSeries(\n                users,\n                function (u, c) {\n                  const user = u.toObject()\n\n                  const groups = _.filter(grps, function (g) {\n                    return _.some(g.members, function (m) {\n                      return m._id.toString() === user._id.toString()\n                    })\n                  })\n\n                  user.groups = _.map(groups, function (group) {\n                    return { name: group.name, _id: group._id }\n                  })\n\n                  result.push(stripUserFields(user))\n                  return c()\n                },\n                function (err) {\n                  if (err) return callback(err)\n                  return cc(null, result)\n                }\n              )\n            }\n          ],\n          function (err, results) {\n            if (err) return callback(err)\n            return callback(null, results)\n          }\n        )\n      }\n    ],\n    function (err, rr) {\n      if (err) return res.status(400).json({ error: 'Error: ' + err.message })\n\n      return res.json({ success: true, count: _.size(rr), users: rr })\n    }\n  )\n}\n\n/**\n * @api {post} /api/v1/users/create Create Account\n * @apiName createAccount\n * @apiDescription Creates an account with the given post data.\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n *\n * @apiParamExample {json} Request-Example:\n * {\n *      \"aUsername\":    \"user.name\",\n *      \"aPass\":        \"password\",\n *      \"aPassConfirm\": \"password\",\n *      \"aFullname\":    \"fullname\",\n *      \"aEmail\":       \"email@email.com\",\n *      \"aRole\":        {RoleId},\n *      \"aTitle\":       \"User Title\",\n *      \"aGrps\":        [{GroupId}]\n * }\n *\n * @apiSuccess {boolean} success If the Request was a success\n * @apiSuccess {object} error Error, if occurred\n * @apiSuccess {object} account Saved Account Object\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.create = async function (req, res) {\n  const response = {}\n  response.success = true\n\n  const postData = req.body\n\n  if (_.isUndefined(postData) || !_.isObject(postData)) {\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n  }\n\n  const propCheck = ['aUsername', 'aPass', 'aPassConfirm', 'aFullname', 'aEmail', 'aRole']\n\n  if (\n    !_.every(propCheck, function (x) {\n      return x in postData\n    })\n  ) {\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n  }\n\n  if (_.isUndefined(postData.aGrps) || _.isNull(postData.aGrps) || !_.isArray(postData.aGrps)) {\n    return res.status(400).json({ success: false, error: 'Invalid Group Array' })\n  }\n\n  if (postData.aPass !== postData.aPassConfirm)\n    return res.status(400).json({ success: false, error: 'Invalid Password Match' })\n\n  async.series(\n    [\n      function (next) {\n        SettingUtil.getSettings(function (err, content) {\n          if (err) return next(err)\n          const settings = content.data.settings\n          if (settings.accountsPasswordComplexity.value) {\n            const passwordComplexity = require('../../../settings/passwordComplexity')\n            if (!passwordComplexity.validate(postData.aPass))\n              return next({ message: 'Password does not meet minimum requirements.' })\n\n            return next()\n          }\n\n          return next()\n        })\n      },\n      function (next) {\n        const chance = new Chance()\n\n        const account = new UserSchema({\n          username: postData.aUsername,\n          password: postData.aPass,\n          fullname: postData.aFullname,\n          email: postData.aEmail,\n          accessToken: chance.hash(),\n          role: postData.aRole\n        })\n\n        if (postData.aTitle) {\n          account.title = postData.aTitle\n        }\n\n        account.save(function (err, a) {\n          if (err) return next(err)\n\n          a.populate('role', function (err, populatedAccount) {\n            if (err) return next(err)\n\n            response.account = populatedAccount.toObject()\n            delete response.account.password\n\n            const groups = []\n\n            async.each(\n              postData.aGrps,\n              function (id, done) {\n                if (_.isUndefined(id)) return done()\n                groupSchema.getGroupById(id, function (err, grp) {\n                  if (err) return done(err)\n                  if (!grp) return done({ message: `Invalid Group (${id}) - Group not found. Check Group ID.` })\n\n                  grp.addMember(a._id, function (err, success) {\n                    if (err) return done(err)\n\n                    grp.save(function (err) {\n                      if (err) return done(err)\n                      groups.push(grp)\n                      done(null, success)\n                    })\n                  })\n                })\n              },\n              function (e) {\n                if (e) return next(e)\n                response.account.groups = groups\n\n                return next()\n              }\n            )\n          })\n        })\n      }\n    ],\n    function (e) {\n      if (e) {\n        response.success = false\n        response.error = e\n        winston.debug(response)\n        return res.status(400).json(response)\n      }\n\n      return res.json(response)\n    }\n  )\n}\n\n/**\n * @api {post} /api/v1/public/account/create Create Public Account\n * @apiName createPublicAccount\n * @apiDescription Creates an account with the given post data.\n * @apiVersion 0.1.8\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n *\n * @apiParamExample {json} Request-Example:\n * {\n *      \"aFullname\":    \"user name\",\n *      \"aEmail\":       \"email@email.com\"\"\n *      \"aPassword\":    \"password\",\n * }\n *\n * @apiSuccess {boolean} success If the Request was a success\n * @apiSuccess {object} error Error, if occurred\n * @apiSuccess {object} account Saved Account Object\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.createPublicAccount = function (req, res) {\n  const SettingSchema = require('../../../models/setting')\n\n  const response = {}\n  response.success = true\n  const postData = req.body\n  if (!_.isObject(postData)) return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n\n  let user, group\n\n  async.waterfall(\n    [\n      function (next) {\n        SettingSchema.getSetting('allowUserRegistration:enable', function (err, allowUserRegistration) {\n          if (err) return next(err)\n          if (!allowUserRegistration) {\n            winston.warn('Public account creation was attempted while disabled!')\n            return next({ message: 'Public account creation is disabled.' })\n          }\n\n          return next()\n        })\n      },\n      function (next) {\n        SettingSchema.getSetting('role:user:default', function (err, roleDefault) {\n          if (err) return next(err)\n          if (!roleDefault) {\n            winston.error('No Default User Role Set. (Settings > Permissions > Default User Role)')\n            return next({ message: 'No Default Role Set. Please contact administrator.' })\n          }\n\n          return next(null, roleDefault)\n        })\n      },\n      function (roleDefault, next) {\n        SettingSchema.getSetting('accountsPasswordComplexity:enable', function (err, passwordComplexitySetting) {\n          if (err) return next(err)\n          if (!passwordComplexitySetting || passwordComplexitySetting.value === true) {\n            const passwordComplexity = require('../../../settings/passwordComplexity')\n            if (!passwordComplexity.validate(postData.user.password))\n              return next({ message: 'Password does not minimum requirements.' })\n\n            return next(null, roleDefault)\n          }\n\n          return next(null, roleDefault)\n        })\n      },\n      function (roleDefault, next) {\n        const UserSchema = require('../../../models/user')\n        user = new UserSchema({\n          username: postData.user.email,\n          password: postData.user.password,\n          fullname: postData.user.fullname,\n          email: postData.user.email,\n          role: roleDefault.value\n        })\n\n        user.save(function (err, savedUser) {\n          if (err) return next(err)\n\n          return next(null, savedUser)\n        })\n      },\n      function (savedUser, next) {\n        const GroupSchema = require('../../../models/group')\n        group = new GroupSchema({\n          name: savedUser.email,\n          members: [savedUser._id],\n          sendMailTo: [savedUser._id],\n          public: true\n        })\n\n        group.save(function (err, savedGroup) {\n          if (err) return next(err)\n\n          return next(null, { user: savedUser, group: savedGroup })\n        })\n      }\n    ],\n    function (err, result) {\n      if (err) winston.debug(err)\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      delete result.user.password\n      result.user.password = undefined\n\n      return res.json({\n        success: true,\n        userData: { user: result.user, group: result.group }\n      })\n    }\n  )\n}\n\napiUsers.profileUpdate = function (req, res) {\n  if (!req.user) return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n  const username = req.user.username\n  if (_.isNull(username) || _.isUndefined(username))\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n\n  const data = req.body\n  let passwordUpdated = false\n\n  const obj = {\n    fullname: data.aFullname,\n    title: data.aTitle,\n    password: data.aPassword,\n    passconfirm: data.aPassConfirm,\n    email: data.aEmail\n  }\n\n  let passwordComplexityEnabled = true\n\n  async.series(\n    {\n      settings: function (done) {\n        const SettingUtil = require('../../../settings/settingsUtil')\n        SettingUtil.getSettings(function (err, content) {\n          if (err) return done(err)\n\n          const settings = content.data.settings\n          passwordComplexityEnabled = settings.accountsPasswordComplexity.value\n\n          return done()\n        })\n      },\n      user: function (done) {\n        UserSchema.getUserByUsername(username, function (err, user) {\n          if (err) return done(err)\n          if (!user) return done('Invalid User Object')\n\n          obj._id = user._id\n\n          if (\n            !_.isUndefined(obj.password) &&\n            !_.isEmpty(obj.password) &&\n            !_.isUndefined(obj.passconfirm) &&\n            !_.isEmpty(obj.passconfirm)\n          ) {\n            if (obj.password === obj.passconfirm) {\n              if (passwordComplexityEnabled) {\n                // check Password Complexity\n                const passwordComplexity = require('../../../settings/passwordComplexity')\n                if (!passwordComplexity.validate(obj.password)) return done('Password does not meet requirements')\n              }\n\n              user.password = obj.password\n              passwordUpdated = true\n            }\n          }\n\n          if (!_.isUndefined(obj.fullname) && obj.fullname.length > 0) user.fullname = obj.fullname\n          if (!_.isUndefined(obj.email) && obj.email.length > 0) user.email = obj.email\n          if (!_.isUndefined(obj.title) && obj.title.length > 0) user.title = obj.title\n\n          user.save(function (err, nUser) {\n            if (err) return done(err)\n\n            nUser.populate('role', function (err, populatedUser) {\n              if (err) return done(err)\n              const resUser = stripUserFields(populatedUser)\n\n              return done(null, resUser)\n            })\n          })\n        })\n      },\n      groups: function (done) {\n        groupSchema.getAllGroupsOfUser(obj._id, done)\n      }\n    },\n    async function (err, results) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err })\n      }\n\n      const user = results.user.toJSON()\n      user.groups = results.groups.map(function (g) {\n        return { _id: g._id, name: g.name }\n      })\n\n      if (passwordUpdated) {\n        const Session = require('../../../models/session')\n        await Session.destroy(user._id)\n      }\n\n      return res.json({ success: true, user: user })\n    }\n  )\n}\n\n/**\n * @api {put} /api/v1/users/:username Update User\n * @apiName updateUser\n * @apiDescription Updates a single user.\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiParamExample {json} Request:\n * {\n        aId:            {{_id}},\n        aUsername:      {{username}},\n        aFullname:      {{fullname}},\n        aTitle:         {{title}},\n        aPass:          {{password}},\n        aPassconfirm:   {{password_confirm}},\n        aEmail:         {{email}},\n        aRole:          {{role.id}},\n        aGrps:          [{{group._id}}]\n * }\n *\n * @apiSuccess {object} user Saved User Object [Stripped]\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.update = function (req, res) {\n  const username = req.params.username\n  if (_.isNull(username) || _.isUndefined(username))\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n\n  const data = req.body\n  // saveGroups - Profile saving where groups are not sent\n  const saveGroups = !_.isUndefined(data.saveGroups) ? data.saveGroups : true\n  let passwordUpdated = false\n\n  const obj = {\n    fullname: data.aFullname,\n    title: data.aTitle,\n    password: data.aPass,\n    passconfirm: data.aPassConfirm,\n    email: data.aEmail,\n    role: data.aRole,\n    groups: data.aGrps\n  }\n\n  if (_.isNull(obj.groups) || _.isUndefined(obj.groups)) {\n    obj.groups = []\n  } else if (!_.isArray(obj.groups)) {\n    obj.groups = [obj.groups]\n  }\n\n  let passwordComplexityEnabled = true\n\n  async.series(\n    {\n      settings: function (done) {\n        var SettingUtil = require('../../../settings/settingsUtil')\n        SettingUtil.getSettings(function (err, content) {\n          if (err) return done(err)\n          var settings = content.data.settings\n          passwordComplexityEnabled = settings.accountsPasswordComplexity.value\n\n          return done()\n        })\n      },\n      user: function (done) {\n        UserSchema.getUserByUsername(username, function (err, user) {\n          if (err) return done(err)\n          if (!user) return done('Invalid User Object')\n\n          obj._id = user._id\n\n          if (\n            !_.isUndefined(obj.password) &&\n            !_.isEmpty(obj.password) &&\n            !_.isUndefined(obj.passconfirm) &&\n            !_.isEmpty(obj.passconfirm)\n          ) {\n            if (obj.password === obj.passconfirm) {\n              if (passwordComplexityEnabled) {\n                // check Password Complexity\n                const passwordComplexity = require('../../../settings/passwordComplexity')\n                if (!passwordComplexity.validate(obj.password)) return done('Password does not meet requirements')\n              }\n\n              user.password = obj.password\n              passwordUpdated = true\n            }\n          }\n\n          if (!_.isUndefined(obj.fullname) && obj.fullname.length > 0) user.fullname = obj.fullname\n          if (!_.isUndefined(obj.email) && obj.email.length > 0) user.email = obj.email\n          if (!_.isUndefined(obj.title) && obj.title.length > 0) user.title = obj.title\n          if (!_.isUndefined(obj.role) && obj.role.length > 0) user.role = obj.role\n\n          user.save(function (err, nUser) {\n            if (err) return done(err)\n\n            nUser.populate('role', function (err, populatedUser) {\n              if (err) return done(err)\n              const resUser = stripUserFields(populatedUser)\n\n              return done(null, resUser)\n            })\n          })\n        })\n      },\n      groups: function (done) {\n        if (!saveGroups) {\n          groupSchema.getAllGroupsOfUser(obj._id, done)\n        } else {\n          const userGroups = []\n          groupSchema.getAllGroups(function (err, groups) {\n            if (err) return done(err)\n            async.each(\n              groups,\n              function (grp, callback) {\n                if (_.includes(obj.groups, grp._id.toString())) {\n                  if (grp.isMember(obj._id)) {\n                    userGroups.push(grp)\n                    return callback()\n                  }\n                  grp.addMember(obj._id, function (err, result) {\n                    if (err) return callback(err)\n\n                    if (result) {\n                      grp.save(function (err) {\n                        if (err) return callback(err)\n                        userGroups.push(grp)\n                        return callback()\n                      })\n                    } else {\n                      return callback()\n                    }\n                  })\n                } else {\n                  // Remove Member from group\n                  grp.removeMember(obj._id, function (err, result) {\n                    if (err) return callback(err)\n                    if (result) {\n                      grp.save(function (err) {\n                        if (err) return callback(err)\n\n                        return callback()\n                      })\n                    } else {\n                      return callback()\n                    }\n                  })\n                }\n              },\n              function (err) {\n                if (err) return done(err)\n\n                return done(null, userGroups)\n              }\n            )\n          })\n        }\n      }\n    },\n    async function (err, results) {\n      if (err) {\n        winston.debug(err)\n        return res.status(400).json({ success: false, error: err })\n      }\n\n      const user = results.user.toJSON()\n      user.groups = results.groups.map(function (g) {\n        return { _id: g._id, name: g.name }\n      })\n\n      if (passwordUpdated) {\n        const Session = require('../../../models/session')\n        await Session.destroy(user._id)\n      }\n\n      return res.json({ success: true, user: user })\n    }\n  )\n}\n\n/**\n * @api {put} /api/v1/users/:username/updatepreferences Updates User Preferences\n * @apiName updatePreferences\n * @apiDescription Updates a single user preference.\n * @apiVersion 0.1.0\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"Content-Type: application/json\" -H \"accesstoken: {accesstoken}\" -X PUT -d \"{\\\"preference\\\":\\\"{preference_name}\\\",\\\"value\\\":{value}}\" -l http://localhost/api/v1/users/{username}/updatepreferences\n *\n * @apiParamExample {json} Request:\n * {\n *      \"preference\": \"preference_name\",\n *      \"value\": \"preference_value\"\n * }\n *\n * @apiSuccess {object} user Saved User Object [Stripped]\n *\n * @apiError InvalidPostData The data was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Post Data\"\n }\n */\napiUsers.updatePreferences = function (req, res) {\n  const username = req.params.username\n  if (typeof username === 'undefined') {\n    return res.status(400).json({ success: false, error: 'Invalid Request' })\n  }\n\n  const data = req.body\n  const preference = data.preference\n  const value = data.value\n\n  UserSchema.getUserByUsername(username, function (err, user) {\n    if (err) {\n      winston.warn('[API:USERS:UpdatePreferences] Error= ' + err)\n      return res.status(400).json({ success: false, error: err })\n    }\n\n    if (_.isNull(user.preferences)) {\n      user.preferences = {}\n    }\n\n    user.preferences[preference] = value\n\n    user.save(function (err, u) {\n      if (err) {\n        winston.warn('[API:USERS:UpdatePreferences] Error= ' + err)\n        return res.status(400).json({ success: false, error: err })\n      }\n\n      const resUser = stripUserFields(u)\n\n      return res.json({ success: true, user: resUser })\n    })\n  })\n}\n\n/**\n * @api {delete} /api/v1/users/:username Delete / Disable User\n * @apiName deleteUser\n * @apiDescription Disables or Deletes the giving user via username\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -X DELETE -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:username\n *\n * @apiSuccess {boolean}     success    Was the user successfully Deleted or disabled.\n *\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.deleteUser = function (req, res) {\n  const username = req.params.username\n\n  if (_.isUndefined(username) || _.isNull(username)) return res.status(400).json({ error: 'Invalid Request' })\n\n  async.waterfall(\n    [\n      function (cb) {\n        UserSchema.getUserByUsername(username, function (err, user) {\n          if (err) return cb(err)\n\n          if (_.isNull(user)) {\n            return cb({ message: 'Invalid User' })\n          }\n\n          if (user.username.toLowerCase() === req.user.username) {\n            return cb({ message: 'Cannot remove yourself!' })\n          }\n\n          if (!permissions.canThis(req.user.role, 'accounts:delete')) return cb({ message: 'Access Denied' })\n\n          // TODO: FIX THIS FOR HIERARCHY!!\n          // if (req.user.role.toLowerCase() === 'support' || req.user.role.toLowerCase() === 'user') {\n          //     if (user.role.toLowerCase() === 'mod' || user.role.toLowerCase() === 'admin')\n          //         return cb({message: 'Insufficient permissions'});\n          //\n          // }\n\n          return cb(null, user)\n        })\n      },\n      function (user, cb) {\n        const ticketSchema = require('../../../models/ticket')\n        ticketSchema.find({ owner: user._id }, function (err, tickets) {\n          if (err) return cb(err)\n\n          const hasTickets = _.size(tickets) > 0\n          return cb(null, hasTickets, user)\n        })\n      },\n      function (hasTickets, user, cb) {\n        const conversationSchema = require('../../../models/chat/conversation')\n        conversationSchema.getConversationsWithLimit(user._id, 10, function (err, conversations) {\n          if (err) return cb(err)\n\n          const hasConversations = _.size(conversations) > 0\n          return cb(null, hasTickets, hasConversations, user)\n        })\n      },\n      function (hasTickets, hasConversations, user, cb) {\n        const ticketSchema = require('../../../models/ticket')\n        ticketSchema.find({ assignee: user._id }, function (err, tickets) {\n          if (err) return cb(err)\n\n          const isAssignee = _.size(tickets) > 0\n          return cb(null, hasTickets, hasConversations, isAssignee, user)\n        })\n      },\n      function (hasTickets, hasConversations, isAssignee, user, cb) {\n        if (hasTickets || hasConversations || isAssignee) {\n          // Disable if the user has tickets or conversations\n          user.softDelete(function (err) {\n            if (err) return cb(err)\n\n            // Force logout if Logged in\n            return cb(null, true)\n          })\n        } else {\n          user.remove(function (err) {\n            if (err) return cb(err)\n\n            return cb(null, false)\n          })\n        }\n      }\n    ],\n    function (err, disabled) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      return res.json({ success: true, disabled: disabled })\n    }\n  )\n}\n\n/**\n * @api {get} /api/v1/users/:username/enable Enable User\n * @apiName enableUser\n * @apiDescription Enable the giving user via username\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -X DELETE -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:username/enable\n *\n * @apiSuccess {boolean}     success    Was the user successfully enabled.\n *\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.enableUser = function (req, res) {\n  const username = req.params.username\n  if (_.isUndefined(username)) return res.status(400).json({ error: 'Invalid Request' })\n\n  UserSchema.getUserByUsername(username, function (err, user) {\n    if (err) {\n      winston.debug(err)\n      return res.status(400).json({ error: err.message })\n    }\n\n    if (_.isUndefined(user) || _.isNull(user)) return res.status(400).json({ error: 'Invalid Request' })\n\n    if (!permissions.canThis(req.user.role, 'accounts:delete'))\n      return res.status(401).json({ error: 'Invalid Permissions' })\n\n    user.deleted = false\n\n    user.save(function (err) {\n      if (err) return res.status(400).json({ error: err.message })\n\n      res.json({ success: true })\n    })\n  })\n}\n\n/**\n * @api {get} /api/v1/users/:username Get User\n * @apiName getUser\n * @apiDescription Gets the user via the given username\n * @apiVersion 0.1.0\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:username\n *\n * @apiSuccess {object}     _id                 The MongoDB ID\n * @apiSuccess {string}     username            Username of the User\n * @apiSuccess {string}     fullname            Fullname of the User\n * @apiSuccess {string}     email               Email Address of the User\n * @apiSuccess {string}     role                Assigned Permission Role of the user\n * @apiSuccess {string}     title               Title of the User\n * @apiSuccess {string}     image               Image filename for the user's profile picture\n * @apiSuccess {array}      iOSDeviceTokens     iOS Device Tokens for push notifications\n *\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.single = function (req, res) {\n  const username = req.params.username\n  if (_.isUndefined(username)) return res.status(400).json({ error: 'Invalid Request.' })\n\n  const response = {\n    success: true,\n    groups: []\n  }\n\n  async.waterfall(\n    [\n      function (done) {\n        UserSchema.getUserByUsername(username, function (err, user) {\n          if (err) return done(err)\n\n          if (_.isUndefined(user) || _.isNull(user)) return done('Invalid Request')\n\n          user = stripUserFields(user)\n          response.user = user\n\n          done(null, user)\n        })\n      },\n      function (user, done) {\n        groupSchema.getAllGroupsOfUserNoPopulate(user._id, function (err, grps) {\n          if (err) return done(err)\n\n          response.groups = _.map(grps, function (o) {\n            return o._id\n          })\n\n          done(null, response.groups)\n        })\n      }\n    ],\n    function (err) {\n      if (err) return res.status(400).json({ error: err })\n\n      res.json(response)\n    }\n  )\n}\n\n/**\n * @api {get} /api/v1/users/notificationCount Get Notification Count\n * @apiName getNotificationCount\n * @apiDescription Gets the current notification count for the currently logged in user.\n * @apiVersion 0.1.0\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/notificationCount\n *\n * @apiSuccess {string}     count   The Notification Count\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.notificationCount = function (req, res) {\n  notificationSchema.getUnreadCount(req.user._id, function (err, count) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    return res.json({ success: true, count: count.toString() })\n  })\n}\n\napiUsers.getNotifications = function (req, res) {\n  notificationSchema.findAllForUser(req.user._id, function (err, notifications) {\n    if (err) return res.status(500).json({ success: false, error: err.message })\n\n    return res.json({ success: true, notifications: notifications })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/generateapikey Generate API Key\n * @apiName generateApiKey\n * @apiDescription Generates an API key for the given user id\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/generateapikey\n *\n * @apiSuccess {string}     token   Generated API Key\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.generateApiKey = function (req, res) {\n  const id = req.params.id\n  if (_.isUndefined(id) || _.isNull(id)) return res.status(400).json({ error: 'Invalid Request' })\n  if (!req.user.role.isAdmin && req.user._id.toString() !== id)\n    return res.status(401).json({ success: false, error: 'Unauthorized' })\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err || !user) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n    // if (user.accessToken) return res.status(400).json({ success: false, error: 'User already has generated token' })\n\n    user.addAccessToken(function (err, token) {\n      if (err) return res.status(400).json({ error: 'Invalid Request' })\n\n      res.json({ token: token })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/removeapikey Removes API Key\n * @apiName removeApiKey\n * @apiDescription Removes API key for the given user id\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/removeapikey\n *\n * @apiSuccess {boolean}     success   Successful?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.removeApiKey = function (req, res) {\n  const id = req.params.id\n  if (_.isUndefined(id) || _.isNull(id)) return res.status(400).json({ error: 'Invalid Request' })\n\n  if (!req.user.isAdmin && req.user._id.toString() !== id) return res.status(401).json({ success: 'Unauthorized' })\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err) return res.status(400).json({ error: 'Invalid Request', fullError: err })\n\n    user.removeAccessToken(function (err) {\n      if (err) return res.status(400).json({ error: 'Invalid Request', fullError: err })\n\n      return res.json({ success: true })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/generatel2auth Generate Layer Two Auth\n * @apiName generateL2Auth\n * @apiDescription Generate a new layer two auth for the given user id\n * @apiVersion 0.1.8\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/generatel2auth\n *\n * @apiSuccess {boolean}     success   Successful?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.generateL2Auth = function (req, res) {\n  const id = req.params.id\n  if (id.toString() !== req.user._id.toString()) {\n    return res.status(400).json({ success: false, error: 'Invalid Account Owner!' })\n  }\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n    user.generateL2Auth(function (err, generatedKey) {\n      if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n      req.session.l2auth = 'totp'\n      return res.json({ success: true, generatedKey: generatedKey })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/:id/removel2auth Removes Layer Two Auth\n * @apiName removeL2Auth\n * @apiDescription Removes Layer Two Auth for the given user id\n * @apiVersion 0.1.8\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/:id/removel2auth\n *\n * @apiSuccess {boolean}     success   Successful?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.removeL2Auth = function (req, res) {\n  const id = req.params.id\n  if (id.toString() !== req.user._id.toString()) {\n    return res.status(400).json({ success: false, error: 'Invalid Account Owner!' })\n  }\n\n  UserSchema.getUser(id, function (err, user) {\n    if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n    user.removeL2Auth(function (err) {\n      if (err) return res.status(400).json({ success: false, error: 'Invalid Request' })\n\n      req.session.l2auth = null\n      return res.json({ success: true })\n    })\n  })\n}\n\n/**\n * @api {post} /api/v1/users/checkemail\n * @apiName checkEmail\n * @apiDescription Returns a true if email exists\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/checkemail\n *\n * @apiSuccess {boolean}     success   Successful?\n * @apiSuccess {boolean}     emailexist Does Email Exist?\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\n\napiUsers.checkEmail = function (req, res) {\n  const email = req.body.email\n\n  if (_.isUndefined(email) || _.isNull(email)) {\n    return res.status(400).json({ success: false, error: 'Invalid Post Data' })\n  }\n\n  UserSchema.getUserByEmail(email, function (err, users) {\n    if (err) return res.status(400).json({ success: false, error: err.message })\n\n    if (!_.isNull(users)) {\n      return res.json({ success: true, exist: true })\n    }\n\n    return res.json({ success: true, exist: false })\n  })\n}\n\n/**\n * @api {get} /api/v1/users/getassignees Get Assignees\n * @apiName getassignees\n * @apiDescription Returns a list of assignable users\n * @apiVersion 0.1.7\n * @apiGroup User\n * @apiHeader {string} accesstoken The access token for the logged in user\n * @apiExample Example usage:\n * curl -H \"accesstoken: {accesstoken}\" -l http://localhost/api/v1/users/getassignees\n *\n * @apiSuccess {boolean}     success   Successful?\n * @apiSuccess {array}       users     Array of Assignees\n *\n * @apiError InvalidRequest The request was invalid\n * @apiErrorExample\n *      HTTP/1.1 400 Bad Request\n {\n     \"error\": \"Invalid Request\"\n }\n */\napiUsers.getAssingees = function (req, res) {\n  UserSchema.getAssigneeUsers(function (err, users) {\n    if (err) return res.status(400).json({ error: 'Invalid Request' })\n\n    const strippedUsers = []\n\n    async.each(\n      users,\n      function (user, cb) {\n        user = stripUserFields(user)\n        strippedUsers.push(user)\n\n        cb()\n      },\n      function () {\n        return res.json({ success: true, users: strippedUsers })\n      }\n    )\n  })\n}\n\napiUsers.getGroups = function (req, res) {\n  if (req.user.role.isAdmin || req.user.role.isAgent) {\n    const departmentSchema = require('../../../models/department')\n    departmentSchema.getDepartmentGroupsOfUser(req.user._id, function (err, groups) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      const mappedGroups = groups.map(function (g) {\n        return g._id\n      })\n\n      return res.json({ success: true, groups: mappedGroups })\n    })\n  } else {\n    if (req.user.username !== req.params.username)\n      return res.status(400).json({ success: false, error: 'Invalid API Call' })\n\n    groupSchema.getAllGroupsOfUserNoPopulate(req.user._id, function (err, groups) {\n      if (err) return res.status(400).json({ success: false, error: err.message })\n\n      const mappedGroups = groups.map(function (g) {\n        return g._id\n      })\n\n      return res.json({ success: true, groups: mappedGroups })\n    })\n  }\n}\n\nfunction stripUserFields (user) {\n  user.password = undefined\n  user.accessToken = undefined\n  user.__v = undefined\n  user.tOTPKey = undefined\n  user.iOSDeviceTokens = undefined\n\n  return user\n}\n\nmodule.exports = apiUsers\n", "/*\n *       .                             .o8                     oooo\n *    .o8                             \"888                     `888\n *  .o888oo oooo d8b oooo  oooo   .oooo888   .ooooo.   .oooo.o  888  oooo\n *    888   `888\"\"8P `888  `888  d88' `888  d88' `88b d88(  \"8  888 .8P'\n *    888    888      888   888  888   888  888ooo888 `\"Y88b.   888888.\n *    888 .  888      888   888  888   888  888    .o o.  )88b  888 `88b.\n *    \"888\" d888b     `V88V\"V8P' `Y8bod88P\" `Y8bod8P' 8\"\"888P' o888o o888o\n *  ========================================================================\n *  Author:     Chris Brame\n *  Updated:    1/20/19 4:43 PM\n *  Copyright (c) 2014-2019. All rights reserved.\n */\n\ndefine([\n  'angular',\n  'underscore',\n  'jquery',\n  'modules/helpers',\n  'uikit',\n  'qrcode',\n  'history',\n  'angularjs/services/session'\n], function (angular, _, $, helpers, UIKit) {\n  return angular\n    .module('trudesk.controllers.profile', ['trudesk.services.session'])\n    .controller('profileCtrl', function (SessionService, $scope, $window, $document, $http, $log, $timeout) {\n      var otpEnabled = false\n      $scope.init = function () {\n        // Fix Inputs if input is preloaded with a value\n        fixInputLabels()\n        otpEnabled = $scope.otpEnabled\n      }\n\n      function fixInputLabels () {\n        $timeout(function () {\n          $('input.md-input').each(function () {\n            var vm = this\n            var self = $(vm)\n            if (!_.isEmpty(self.val())) {\n              var s = self.parent('.md-input-wrapper')\n              if (s.length > 0) {\n                s.addClass('md-input-filled')\n              }\n            }\n          })\n        }, 0)\n      }\n\n      function validateEmail (email) {\n        return String(email)\n          .toLowerCase()\n          .match(\n            /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n          )\n      }\n\n      $scope.updateUser = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n        var data = getFormData()\n\n        if (\n          data.fullname.toString().length > 25 ||\n          data.password.toString().length > 255 ||\n          data.cPassword.toString().length > 255 ||\n          data.email.toString().length > 255 ||\n          !validateEmail(data.email.toString())\n        ) {\n          helpers.UI.showSnackbar('Form data invalid.', true)\n          return false\n        }\n\n        $http\n          .put('/api/v1/profile/', {\n            aId: id,\n            aFullname: data.fullname,\n            aPass: data.password,\n            aPassConfirm: data.cPassword,\n            aEmail: data.email,\n\n            saveGroups: false\n          })\n          .success(function () {\n            resetForm()\n            helpers.UI.showSnackbar({\n              text: 'Profile Successfully Saved',\n              textColor: '#f8f8f2'\n            })\n          })\n          .error(function (e) {\n            if (e.error.message) {\n              $log.log('[trudesk:profile:updateUser] - ' + e.error.message)\n              helpers.UI.showSnackbar('Error ' + e.error.message, true)\n            } else {\n              $log.log('[trudesk:profile:updateUser] - ' + e.error)\n              helpers.UI.showSnackbar('Error: ' + e.error, true)\n            }\n          })\n      }\n\n      $scope.showTour = function () {\n        var username = SessionService.getUser().username\n        $http\n          .put('/api/v1/users/' + username + '/updatepreferences', {\n            preference: 'tourCompleted',\n            value: false\n          })\n          .success(function () {\n            $window.location.href = '/'\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:showTour] - ' + e.error.message)\n            helpers.UI.showSnackbar('Error ' + e.error.message, true)\n          })\n      }\n\n      $scope.back = function ($event) {\n        History.go(-1)\n        $event.preventDefault()\n      }\n\n      $scope.generateApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/generateapikey')\n          .success(function (tokenJson) {\n            $('#aApiKey').val(tokenJson.token)\n            $('.removeApiButton').removeClass('hide')\n            $('.generateApiButton').addClass('hide')\n            // helpers.showFlash('API Key Successfully Generated');\n            helpers.UI.showSnackbar('API Key Successfully Generated', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:generateApiKey] - ' + e)\n            // helpers.showFlash('Error: ' + e, true);\n            helpers.UI.showSnackbar('Error: Unable to generate API Key!', true)\n          })\n      }\n\n      $scope.removeApiKey = function ($event) {\n        $event.preventDefault()\n\n        var id = $('div[data-user_id]').attr('data-user_id')\n        if (_.isUndefined(id)) return\n\n        $http\n          .post('/api/v1/users/' + id + '/removeapikey')\n          .success(function () {\n            $('#aApiKey').val('')\n            $('.generateApiButton').removeClass('hide')\n            $('.removeApiButton').addClass('hide')\n            helpers.UI.showSnackbar('API Key Successfully Revoked', false)\n          })\n          .error(function (e) {\n            $log.log('[trudesk:profile:removeApiKey]', e)\n            helpers.UI.showSnackbar('Error: Unable to remove API Key!', true)\n          })\n      }\n\n      $scope.otpChange = function (event) {\n        var $totpSettings = $('.totp-settings-wrap')\n        var $totpPanel = $totpSettings.find('.panel-body2')\n        var $tOTPKey = $totpSettings.find('#tOTPKey')\n        var $qrCode = $totpSettings.find('#totp-qrcode')\n        event.preventDefault()\n\n        if (otpEnabled) {\n          UIKit.modal.confirm(\n            '<span style=\"font-size: 16px; color: #FF9800;\">WARNING: Disabling Two Factor Authentication will remove your shared secret. A new key will generate when re-enabled.</span><br />' +\n              'Are you sure you want to disable two factor authentication?',\n            function () {\n              removeL2Auth(function (err) {\n                if (err) {\n                  $log.error(err)\n                }\n\n                angular.element(event.target).attr('checked', false)\n                $totpPanel.slideUp(400, function () {\n                  $totpPanel.css({ overflow: 'hidden', margin: 0 })\n                  $qrCode.find('canvas').remove()\n                  $tOTPKey.val()\n                  $timeout(function () {\n                    otpEnabled = false\n                  }, 0)\n                })\n              })\n            },\n            {\n              labels: { Ok: 'Yes', Cancel: 'No' }\n            }\n          )\n        } else {\n          generateL2Auth(function (err, key) {\n            if (err) {\n              $log.error(err)\n              helpers.UI.showSnackbar('An unknown error occurred. Check console.', true)\n              return\n            }\n\n            $timeout(function () {\n              otpEnabled = true\n              angular.element(event.target).prop('checked', true)\n            }, 0)\n\n            var host = $('div[data-host]').attr('data-host')\n            var username = SessionService.getUser().username\n            var qrKey =\n              'otpauth://totp/' +\n              host +\n              '-' +\n              username +\n              ':' +\n              host +\n              '-' +\n              username +\n              '?secret=' +\n              key +\n              '&issuer=Trudesk'\n            $qrCode.qrcode({ width: 242, height: 242, text: qrKey })\n            $tOTPKey.val(key)\n            $totpPanel.css({ margin: '10px 7px 7px 7px' })\n            $totpPanel.find('input').removeClass('hide')\n            $totpPanel.removeClass('hide')\n            fixInputLabels()\n            $totpPanel.slideDown()\n            // }\n          })\n        }\n      }\n\n      function generateL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http\n          .post(\n            '/api/v1/users/' + id + '/generatel2auth',\n            {},\n            {\n              headers: {\n                'CSRF-TOKEN': $document[0].querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              }\n            }\n          )\n          .then(\n            function success (response) {\n              if (!response.data.success) {\n                helpers.UI.showSnackbar('Error: Unknown error has occurred.', true)\n                if (_.isFunction(completed)) {\n                  return completed('Error: Unknown error has occurred.')\n                }\n              } else {\n                // Success\n                if (_.isFunction(completed)) {\n                  completed(null, response.data.generatedKey)\n                }\n              }\n            },\n            function error (err) {\n              $log.error('[trudesk:profile:generateL2Auth]')\n              $log.error(err)\n              helpers.UI.showSnackbar('Error: Could not generate new secret! Check Console', true)\n              if (_.isFunction(completed)) {\n                completed(err)\n              }\n            }\n          )\n      }\n\n      function removeL2Auth (completed) {\n        var id = SessionService.getUser()._id\n        if (_.isUndefined(id)) {\n          return helpers.UI.showSnackbar('Unable to get user ID.', true)\n        }\n\n        $http\n          .post(\n            '/api/v1/users/' + id + '/removel2auth',\n            {},\n            {\n              headers: {\n                'CSRF-TOKEN': $document[0].querySelector('meta[name=\"csrf-token\"]').getAttribute('content')\n              }\n            }\n          )\n          .success(function () {\n            if (_.isFunction(completed)) {\n              completed()\n            }\n          })\n          .error(function (e) {\n            $log.error('[trudesk:profile:removeL2Auth]')\n            $log.error(e)\n            helpers.UI.showSnackbar('Error: Could not remove. Check Console', true)\n            if (_.isFunction(completed)) {\n              completed(e)\n            }\n          })\n      }\n\n      function getFormData () {\n        var data = {}\n        data.username = $('#aUsername').val()\n        data.fullname = $('#aFullname').val()\n        data.password = $('#aPass').val()\n        data.cPassword = $('#aPassConfirm').val()\n        data.email = $('#aEmail').val()\n\n        return data\n      }\n\n      function resetForm () {\n        $('#aPass').val('')\n        $('#aPassConfirm').val('')\n      }\n    })\n})\n"], "filenames": ["src/controllers/api/v1/routes.js", "src/controllers/api/v1/users.js", "src/public/js/angularjs/controllers/profile.js"], "buggy_code_start_loc": [124, 382, 77], "buggy_code_end_loc": [124, 382, 78], "fixing_code_start_loc": [125, 383, 77], "fixing_code_end_loc": [126, 481, 78], "type": "CWE-269", "message": "Incorrect Use of Privileged APIs in GitHub repository polonel/trudesk prior to 1.2.4.", "other": {"cve": {"id": "CVE-2022-2023", "sourceIdentifier": "security@huntr.dev", "published": "2022-06-20T04:15:09.973", "lastModified": "2022-06-28T19:20:56.823", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Incorrect Use of Privileged APIs in GitHub repository polonel/trudesk prior to 1.2.4."}, {"lang": "es", "value": "Un Uso Incorrecto de APIs Privilegiados en el repositorio de GitHub polonel/trudesk versiones anteriores a 1.2.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-269"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-648"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:trudesk_project:trudesk:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.4", "matchCriteriaId": "5B059E3C-427E-4142-88A1-E5BC70BE26FE"}]}]}], "references": [{"url": "https://github.com/polonel/trudesk/commit/83fd5a89319ba2c2f5934722e39b08aba9b3a4ac", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/0f35b1d3-56e6-49e4-bc5a-830f52e094b3", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/polonel/trudesk/commit/83fd5a89319ba2c2f5934722e39b08aba9b3a4ac"}}