{"buggy_code": ["using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes\n{\n    public abstract class Base\n    {\n        public string Timestamp\n        {\n            get\n            {\n                return DateTime.Now.ToString(\"yyyy-MM-ddThh:mm:ss\");\n            }\n        }\n\n        /// <summary>\n        /// In case of errors, this field will contain the error description.\n        /// </summary>\n        public string Message { get; set; }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class AutomaticCheckoutRequest : CheckoutRequest { }\n\n    public class AutomaticCheckoutResponse : CheckoutResponse { }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class CheckoutRequest : Base\n    {\n        public int Amount { get; set; }\n        public string Country { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string EndUserIP { get; set; }\n        public string Issuer { get; set; }\n        public string Language { get; set; }\n        public string OrderID { get; set; }\n        public string PaymentMethod { get; set; }\n        public string Reference { get; set; }\n        public string URLCompleted { get; set; }\n        public string URLError { get; set; }\n    }\n\n    public class CheckoutResponse : Base\n    {\n        public int Amount { get; set; }\n        public string Country { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string EndUserIP { get; set; }\n        public string Issuer { get; set; }\n        public string Language { get; set; }\n        public string OrderID { get; set; }\n        public int PaymentID { get; set; }\n        public string PaymentMethod { get; set; }\n        public string PaymentScreenURL { get; set; }\n        public string ProviderTransactionID { get; set; }\n        public string Reference { get; set; }\n        public string TestMode { get; set; }\n        public string URLCompleted { get; set; }\n        public string URLError { get; set; }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class GetMyPaymentMethodsRequest : Base { }\n\n    public class GetMyPaymentMethodsResponse : Base\n    {\n        public PaymentMethod[] PaymentMethods { get; set; }\n    }\n\n    public class PaymentMethod\n    {\n        public string PaymentMethodCode { get; set; }\n        public string Description { get; set; }\n        public Issuer[] Issuers { get; set; }\n    }\n\n    public class Issuer\n    {\n        public string IssuerKeyword { get; set; }\n        public string Description { get; set; }\n        public Country[] Countries { get; set; }\n    }\n\n    public class Country\n    {\n        public string CountryCode { get; set; }\n        public string Currency { get; set; }\n        public int MinimumAmount { get; set; }\n        public int MaximumAmount { get; set; }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class GetPaymentRequest :Base\n    {\n        public int PaymentID { get; set; }\n    }\n\n    public class GetPaymentResponse : Base\n    {\n        public int PaymentID { get; set; }\n        public int Amount { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string Duration { get; set; }\n        public string ConsumerName { get; set; }\n        public string ConsumerAccountNumber { get; set; }\n        public string ConsumerAddress { get; set; }\n        public string ConsumerHouseNumber { get; set; }\n        public string ConsumerCity { get; set; }\n        public string ConsumerCountry { get; set; }\n        public string ConsumerEmail { get; set; }\n        public string ConsumerPhoneNumber { get; set; }\n        public string ConsumerIPAddress { get; set; }\n        public string Issuer { get; set; }\n        public string OrderID { get; set; }\n        public string OrderTime { get; set; }\n        public string PaymentMethod { get; set; }\n        public string PaymentTime { get; set; }\n        public string Reference { get; set; }\n        public string Status { get; set; }\n        public string StatusCode { get; set; }\n        public string TestMode { get; set; }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class VaultCheckoutRequest:CheckoutRequest\n    {\n        public string ConsumerID { get; set; }\n    }\n\n    public class VaultCheckoutResponse : CheckoutResponse { }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Refund\n{\n    public class CancelRefundRequest : Base\n    {\n        public int RefundID { get; set; }\n        public int PaymentID { get; set; }\n    }\n\n    public class CancelRefundResponse : Base { }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Refund\n{\n    public class GetPaymentRefundsRequest : Base\n    {\n        public int PaymentID { get; set; }\n    }\n\n    public class GetPaymentRefundsResponse : Base\n    {\n        public Refund[] Refunds { get; set; }\n    }\n\n    public class Refund\n    {\n        public int RefundID { get; set; }\n        public int RefundAmount { get; set; }\n        public string RefundCurrency { get; set; }\n        public string DateCreated { get; set; }\n        public string Status { get; set; }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient.Classes.Refund\n{\n    public class RequestRefundRequest : Base\n    {\n        public int PaymentID { get; set; }\n        public int RefundAmount { get; set; }\n        public string RefundCurrency { get; set; }\n    }\n\n    public class RequestRefundResponse : Base\n    {\n        public int RefundID { get; set; }\n        public int PaymentID { get; set; }\n        public int RefundAmount { get; set; }\n        public int RemainingRefundAmount { get; set; }\n        public string RefundCurrency { get; set; }\n    }\n}\n", "using Newtonsoft.Json;\nusing System;\nusing System.IO;\nusing System.Net;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace IcepayRestClient.Classes\n{\n    public class RestClient\n    {\n        protected const string BaseUrl = \"https://connect.icepay.com/webservice/api/v1/\";\n\n        public static TResponse SendAndReceive<TRequest, TResponse>(string service, string operation, TRequest request, int merchantID, string merchantSecret)\n            where TRequest : Base, new()\n            where TResponse : Base, new()\n        {\n            //make full URL\n            var url = BaseUrl + service + \"/\" + operation;\n\n            //serialize JSON without any whitespace\n            var jsonSerializerSettings = new JsonSerializerSettings { Formatting = Newtonsoft.Json.Formatting.None, NullValueHandling = NullValueHandling.Ignore, Culture = System.Globalization.CultureInfo.InvariantCulture };\n            var rawJson = JsonConvert.SerializeObject(request, Formatting.None, jsonSerializerSettings);\n\n            //calculate checksum\n            var signString = url + \"POST\" + merchantID.ToString() + merchantSecret + rawJson;\n            var checksum = Sha256(signString);\n\n            //initiate request\n            var webrequest = HttpWebRequest.CreateHttp(url);\n            webrequest.Method = \"POST\";\n            webrequest.ContentType = \"application/json\";\n            //add merchant ID and checksum to headers\n            webrequest.Headers.Add(\"MerchantID\", merchantID.ToString());\n            webrequest.Headers.Add(\"Checksum\", checksum);\n\n            //send request\n            var requestStream = webrequest.GetRequestStream();\n            var writer = new StreamWriter(requestStream);\n            writer.Write(rawJson);\n            writer.Flush();\n\n            //receive response\n            TResponse response = null;\n            string rawResponse = string.Empty;\n            WebResponse webresponse = null;\n            try\n            {\n                webresponse = webrequest.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                webresponse = ex.Response;\n            }\n            var responseStream = webresponse.GetResponseStream();\n            var reader = new StreamReader(responseStream);\n            rawResponse = reader.ReadToEnd();\n\n            response = JsonConvert.DeserializeObject<TResponse>(rawResponse);\n\n            //verify response checksum\n            if (!string.IsNullOrWhiteSpace(webresponse.Headers[\"Checksum\"]))\n            {\n                var responseChecksum = webresponse.Headers[\"Checksum\"];\n                var responseSignString = webresponse.ResponseUri.AbsoluteUri + \"POST\" + merchantID.ToString() + merchantSecret + rawResponse;\n                var responseVerificationChecksum = Sha256(responseSignString);\n                if (!responseChecksum.Equals(responseVerificationChecksum, System.StringComparison.InvariantCultureIgnoreCase))\n                {\n                    response = new TResponse { Message = \"Response signature invalid.\" };\n                }\n            }\n\n            //close streams\n            writer.Dispose();\n            reader.Dispose();\n            webresponse.Dispose();\n\n            return response;\n        }\n\n        protected static string Sha256(string signString)\n        {\n            byte[] hash;\n            var sha2 = new SHA256Managed();\n            hash = sha2.ComputeHash(System.Text.Encoding.UTF8.GetBytes(signString));\n\n            StringBuilder sb = new StringBuilder(40);\n            foreach (byte b in hash)\n            {\n                sb.AppendFormat(\"{0:x2}\", b);\n            }\n            return sb.ToString();\n        }\n    }\n}\n", "Copyright (c) 2015, ICEPAY - Transaction Performance\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n", "using IcepayRestClient.Classes.Refund;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient\n{\n    public class Refund : ServiceBase\n    {\n        public Refund(int merchantID, string merchantSecret) : base(merchantID, merchantSecret) { }\n\n        public RequestRefundResponse Checkout(RequestRefundRequest request)\n        {\n            return IcepayRestClient.Classes.RestClient.SendAndReceive<RequestRefundRequest, RequestRefundResponse>(\"Refund\", \"RequestRefund\", request, this.MerchantID, this.MerchantSecret);\n        }\n\n        public CancelRefundResponse Checkout(CancelRefundRequest request)\n        {\n            return IcepayRestClient.Classes.RestClient.SendAndReceive<CancelRefundRequest, CancelRefundResponse>(\"Refund\", \"CancelRefund\", request, this.MerchantID, this.MerchantSecret);\n        }\n\n        public GetPaymentRefundsResponse Checkout(GetPaymentRefundsRequest request)\n        {\n            return IcepayRestClient.Classes.RestClient.SendAndReceive<GetPaymentRefundsRequest, GetPaymentRefundsResponse>(\"Refund\", \"GetPaymentRefunds\", request, this.MerchantID, this.MerchantSecret);\n        }\n    }\n}\n", "using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace IcepayRestClient\n{\n    public abstract class ServiceBase\n    {\n        public int MerchantID { get; set; }\n        public string MerchantSecret { get; set; }\n\n        public ServiceBase(int merchantID, string merchantSecret)\n        {\n            this.MerchantID = merchantID;\n            this.MerchantSecret=merchantSecret;\n        }\n    }\n}\n"], "fixing_code": ["using System;\n\nnamespace IcepayRestClient.Classes\n{\n    public abstract class Base\n    {\n        public string Timestamp\n        {\n            get\n            {\n                return DateTime.Now.ToString(\"yyyy-MM-ddThh:mm:ss\");\n            }\n        }\n\n        /// <summary>\n        /// In case of errors, this field will contain the error description.\n        /// </summary>\n        public string Message { get; set; }\n    }\n}\n", "\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class AutomaticCheckoutRequest : CheckoutRequest { }\n\n    public class AutomaticCheckoutResponse : CheckoutResponse { }\n}\n", "\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class CheckoutRequest : Base\n    {\n        public int Amount { get; set; }\n        public string Country { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string EndUserIP { get; set; }\n        public string Issuer { get; set; }\n        public string Language { get; set; }\n        public string OrderID { get; set; }\n        public string PaymentMethod { get; set; }\n        public string Reference { get; set; }\n        public string URLCompleted { get; set; }\n        public string URLError { get; set; }\n    }\n\n    public class CheckoutResponse : Base\n    {\n        public int Amount { get; set; }\n        public string Country { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string EndUserIP { get; set; }\n        public string Issuer { get; set; }\n        public string Language { get; set; }\n        public string OrderID { get; set; }\n        public int PaymentID { get; set; }\n        public string PaymentMethod { get; set; }\n        public string PaymentScreenURL { get; set; }\n        public string ProviderTransactionID { get; set; }\n        public string Reference { get; set; }\n        public string TestMode { get; set; }\n        public string URLCompleted { get; set; }\n        public string URLError { get; set; }\n    }\n}\n", "\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class GetMyPaymentMethodsRequest : Base { }\n\n    public class GetMyPaymentMethodsResponse : Base\n    {\n        public PaymentMethod[] PaymentMethods { get; set; }\n    }\n\n    public class PaymentMethod\n    {\n        public string PaymentMethodCode { get; set; }\n        public string Description { get; set; }\n        public Issuer[] Issuers { get; set; }\n    }\n\n    public class Issuer\n    {\n        public string IssuerKeyword { get; set; }\n        public string Description { get; set; }\n        public Country[] Countries { get; set; }\n    }\n\n    public class Country\n    {\n        public string CountryCode { get; set; }\n        public string Currency { get; set; }\n        public int MinimumAmount { get; set; }\n        public int MaximumAmount { get; set; }\n    }\n}\n", "\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class GetPaymentRequest :Base\n    {\n        public int PaymentID { get; set; }\n    }\n\n    public class GetPaymentResponse : Base\n    {\n        public int PaymentID { get; set; }\n        public int Amount { get; set; }\n        public string Currency { get; set; }\n        public string Description { get; set; }\n        public string Duration { get; set; }\n        public string ConsumerName { get; set; }\n        public string ConsumerAccountNumber { get; set; }\n        public string ConsumerAddress { get; set; }\n        public string ConsumerHouseNumber { get; set; }\n        public string ConsumerCity { get; set; }\n        public string ConsumerCountry { get; set; }\n        public string ConsumerEmail { get; set; }\n        public string ConsumerPhoneNumber { get; set; }\n        public string ConsumerIPAddress { get; set; }\n        public string Issuer { get; set; }\n        public string OrderID { get; set; }\n        public string OrderTime { get; set; }\n        public string PaymentMethod { get; set; }\n        public string PaymentTime { get; set; }\n        public string Reference { get; set; }\n        public string Status { get; set; }\n        public string StatusCode { get; set; }\n        public string TestMode { get; set; }\n    }\n}\n", "\nnamespace IcepayRestClient.Classes.Payment\n{\n    public class VaultCheckoutRequest:CheckoutRequest\n    {\n        public string ConsumerID { get; set; }\n    }\n\n    public class VaultCheckoutResponse : CheckoutResponse { }\n}\n", "\nnamespace IcepayRestClient.Classes.Refund\n{\n    public class CancelRefundRequest : Base\n    {\n        public int RefundID { get; set; }\n        public int PaymentID { get; set; }\n    }\n\n    public class CancelRefundResponse : Base { }\n}\n", "\nnamespace IcepayRestClient.Classes.Refund\n{\n    public class GetPaymentRefundsRequest : Base\n    {\n        public int PaymentID { get; set; }\n    }\n\n    public class GetPaymentRefundsResponse : Base\n    {\n        public Refund[] Refunds { get; set; }\n    }\n\n    public class Refund\n    {\n        public int RefundID { get; set; }\n        public int RefundAmount { get; set; }\n        public string RefundCurrency { get; set; }\n        public string DateCreated { get; set; }\n        public string Status { get; set; }\n    }\n}\n", "\nnamespace IcepayRestClient.Classes.Refund\n{\n    public class RequestRefundRequest : Base\n    {\n        public int PaymentID { get; set; }\n        public int RefundAmount { get; set; }\n        public string RefundCurrency { get; set; }\n    }\n\n    public class RequestRefundResponse : Base\n    {\n        public int RefundID { get; set; }\n        public int PaymentID { get; set; }\n        public int RefundAmount { get; set; }\n        public int RemainingRefundAmount { get; set; }\n        public string RefundCurrency { get; set; }\n    }\n}\n", "using Newtonsoft.Json;\nusing System.IO;\nusing System.Net;\nusing System.Security.Cryptography;\nusing System.Text;\n\nnamespace IcepayRestClient.Classes\n{\n    public class RestClient\n    {\n        protected const string BaseUrl = \"https://connect.icepay.com/webservice/api/v1/\";\n\n        public static TResponse SendAndReceive<TRequest, TResponse>(string service, string operation, TRequest request, int merchantID, string merchantSecret)\n            where TRequest : Base, new()\n            where TResponse : Base, new()\n        {\n            //make full URL\n            var url = BaseUrl + service + \"/\" + operation;\n\n            //serialize JSON without any whitespace\n            var jsonSerializerSettings = new JsonSerializerSettings { Formatting = Newtonsoft.Json.Formatting.None, NullValueHandling = NullValueHandling.Ignore, Culture = System.Globalization.CultureInfo.InvariantCulture };\n            var rawJson = JsonConvert.SerializeObject(request, Formatting.None, jsonSerializerSettings);\n\n            //calculate checksum\n            var signString = url + \"POST\" + merchantID.ToString() + merchantSecret + rawJson;\n            var checksum = Sha256(signString);\n\n            //initiate request\n            var webrequest = HttpWebRequest.CreateHttp(url);\n            webrequest.Method = \"POST\";\n            webrequest.ContentType = \"application/json\";\n            //add merchant ID and checksum to headers\n            webrequest.Headers.Add(\"MerchantID\", merchantID.ToString());\n            webrequest.Headers.Add(\"Checksum\", checksum);\n\n            //send request\n            var requestStream = webrequest.GetRequestStream();\n            var writer = new StreamWriter(requestStream);\n            writer.Write(rawJson);\n            writer.Flush();\n\n            //receive response\n            TResponse response = null;\n            string rawResponse = string.Empty;\n            WebResponse webresponse = null;\n            try\n            {\n                webresponse = webrequest.GetResponse();\n            }\n            catch (WebException ex)\n            {\n                webresponse = ex.Response;\n            }\n            var responseStream = webresponse.GetResponseStream();\n            var reader = new StreamReader(responseStream);\n            rawResponse = reader.ReadToEnd();\n\n            response = JsonConvert.DeserializeObject<TResponse>(rawResponse);\n\n            //verify response checksum\n            //always require presence of a checksum header\n            if (!string.IsNullOrWhiteSpace(webresponse.Headers[\"Checksum\"]))\n            {\n                var responseChecksum = webresponse.Headers[\"Checksum\"];\n                var responseSignString = webresponse.ResponseUri.AbsoluteUri + \"POST\" + merchantID.ToString() + merchantSecret + rawResponse;\n                var responseVerificationChecksum = Sha256(responseSignString);\n                if (!responseChecksum.Equals(responseVerificationChecksum, System.StringComparison.InvariantCultureIgnoreCase))\n                {\n                    if (string.IsNullOrWhiteSpace(response.Message))\n                    {\n                        response = new TResponse { Message = \"Authentication error: the checksum was incorrect. Verify your secret code.\" };\n                    }\n                    response = new TResponse { Message = response.Message };\n                }\n            }\n            else\n            {\n                //if no checksum header was present in the response, the most likely cause is that the sender ID was invalid\n                //return only the response message and regard the response as failed\n                if (string.IsNullOrWhiteSpace(response.Message))\n                {\n                    response = new TResponse { Message = \"Authentication error: no checksum found. Verify your merchant ID.\" };\n                }\n                response = new TResponse { Message = response.Message };\n            }\n\n            //close streams\n            writer.Dispose();\n            reader.Dispose();\n            webresponse.Dispose();\n\n            return response;\n        }\n\n        protected static string Sha256(string signString)\n        {\n            byte[] hash;\n            var sha2 = new SHA256Managed();\n            hash = sha2.ComputeHash(System.Text.Encoding.UTF8.GetBytes(signString));\n\n            StringBuilder sb = new StringBuilder(40);\n            foreach (byte b in hash)\n            {\n                sb.AppendFormat(\"{0:x2}\", b);\n            }\n            return sb.ToString();\n        }\n    }\n}\n", "Copyright (c) 2015-2016, ICEPAY - Transaction Performance\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n", "using IcepayRestClient.Classes.Refund;\n\nnamespace IcepayRestClient\n{\n    public class Refund : ServiceBase\n    {\n        public Refund(int merchantID, string merchantSecret) : base(merchantID, merchantSecret) { }\n\n        public RequestRefundResponse Checkout(RequestRefundRequest request)\n        {\n            return IcepayRestClient.Classes.RestClient.SendAndReceive<RequestRefundRequest, RequestRefundResponse>(\"Refund\", \"RequestRefund\", request, this.MerchantID, this.MerchantSecret);\n        }\n\n        public CancelRefundResponse Checkout(CancelRefundRequest request)\n        {\n            return IcepayRestClient.Classes.RestClient.SendAndReceive<CancelRefundRequest, CancelRefundResponse>(\"Refund\", \"CancelRefund\", request, this.MerchantID, this.MerchantSecret);\n        }\n\n        public GetPaymentRefundsResponse Checkout(GetPaymentRefundsRequest request)\n        {\n            return IcepayRestClient.Classes.RestClient.SendAndReceive<GetPaymentRefundsRequest, GetPaymentRefundsResponse>(\"Refund\", \"GetPaymentRefunds\", request, this.MerchantID, this.MerchantSecret);\n        }\n    }\n}\n", "namespace IcepayRestClient\n{\n    public abstract class ServiceBase\n    {\n        public int MerchantID { get; set; }\n        public string MerchantSecret { get; set; }\n\n        public ServiceBase(int merchantID, string merchantSecret)\n        {\n            this.MerchantID = merchantID;\n            this.MerchantSecret = merchantSecret;\n        }\n    }\n}\n"], "filenames": ["Classes/Base.cs", "Classes/Payment/AutomaticCheckout.cs", "Classes/Payment/Checkout.cs", "Classes/Payment/GetMyPaymentMethods.cs", "Classes/Payment/GetPayment.cs", "Classes/Payment/VaultCheckout.cs", "Classes/Refund/CancelRefund.cs", "Classes/Refund/GetPaymentRefunds.cs", "Classes/Refund/RequestRefund.cs", "Classes/RestClient.cs", "LICENSE", "Refund.cs", "ServiceBase.cs"], "buggy_code_start_loc": [2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1], "buggy_code_end_loc": [6, 6, 6, 6, 6, 6, 6, 6, 6, 70, 2, 7, 18], "fixing_code_start_loc": [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0], "fixing_code_end_loc": [1, 0, 0, 0, 0, 0, 0, 0, 0, 85, 2, 1, 12], "type": "CWE-354", "message": "A vulnerability was found in ICEPAY REST-API-NET 0.9. It has been declared as problematic. Affected by this vulnerability is the function RestClient of the file Classes/RestClient.cs of the component Checksum Validation. The manipulation leads to improper validation of integrity check value. The attack can be launched remotely. Upgrading to version 1.0 is able to address this issue. The name of the patch is 61f6b8758e5c971abff5f901cfa9f231052b775f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-222847.", "other": {"cve": {"id": "CVE-2016-15028", "sourceIdentifier": "cna@vuldb.com", "published": "2023-03-12T15:15:28.117", "lastModified": "2023-03-17T15:31:35.407", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in ICEPAY REST-API-NET 0.9. It has been declared as problematic. Affected by this vulnerability is the function RestClient of the file Classes/RestClient.cs of the component Checksum Validation. The manipulation leads to improper validation of integrity check value. The attack can be launched remotely. Upgrading to version 1.0 is able to address this issue. The name of the patch is 61f6b8758e5c971abff5f901cfa9f231052b775f. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-222847."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 2.5}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.9, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-354"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:icepay:rest_api:0.9:*:*:*:*:.net:*:*", "matchCriteriaId": "86C3B0F5-0A2F-49BF-9D2B-193C1C38D699"}]}]}], "references": [{"url": "https://github.com/ICEPAY/REST-API-NET/commit/61f6b8758e5c971abff5f901cfa9f231052b775f", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/ICEPAY/REST-API-NET/releases/tag/1.0", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.222847", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.222847", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ICEPAY/REST-API-NET/commit/61f6b8758e5c971abff5f901cfa9f231052b775f"}}