{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\DependencyInjection\\PimcoreAdminExtension;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Event\\Model\\ResolveElementEvent;\nuse Pimcore\\Logger;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Version;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n *\n * @internal\n */\nclass ElementController extends AdminController\n{\n    /**\n     * @Route(\"/element/lock-element\", name=\"pimcore_admin_element_lockelement\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function lockElementAction(Request $request)\n    {\n        Element\\Editlock::lock($request->get('id'), $request->get('type'));\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/unlock-element\", name=\"pimcore_admin_element_unlockelement\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function unlockElementAction(Request $request)\n    {\n        Element\\Editlock::unlock($request->get('id'), $request->get('type'));\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * Returns the element data denoted by the given type and ID or path.\n     *\n     * @Route(\"/element/get-subtype\", name=\"pimcore_admin_element_getsubtype\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getSubtypeAction(Request $request)\n    {\n        $idOrPath = trim($request->get('id'));\n        $type = $request->get('type');\n\n        $event = new ResolveElementEvent($type, $idOrPath);\n        \\Pimcore::getEventDispatcher()->dispatch($event, AdminEvents::RESOLVE_ELEMENT);\n        $idOrPath = $event->getId();\n        $type = $event->getType();\n\n        if (is_numeric($idOrPath)) {\n            $el = Element\\Service::getElementById($type, (int) $idOrPath);\n        } else {\n            if ($type == 'document') {\n                $el = Document\\Service::getByUrl($idOrPath);\n            } else {\n                $el = Element\\Service::getElementByPath($type, $idOrPath);\n            }\n        }\n\n        if ($el) {\n            $subtype = null;\n            if ($el instanceof Asset || $el instanceof Document) {\n                $subtype = $el->getType();\n            } elseif ($el instanceof DataObject\\Concrete) {\n                $subtype = $el->getClassName();\n            } elseif ($el instanceof DataObject\\Folder) {\n                $subtype = 'folder';\n            }\n\n            return $this->adminJson([\n                'subtype' => $subtype,\n                'id' => $el->getId(),\n                'type' => $type,\n                'success' => true,\n            ]);\n        } else {\n            return $this->adminJson([\n                'success' => false,\n            ]);\n        }\n    }\n\n    /**\n     * @param string $parameterName\n     *\n     * @return \\Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse\n     */\n    protected function processNoteTypesFromParameters(string $parameterName)\n    {\n        $config = $this->getParameter($parameterName);\n        $result = [];\n        foreach ($config as $configEntry) {\n            $result[] = [\n                'name' => $configEntry,\n            ];\n        }\n\n        return $this->adminJson(['noteTypes' => $result]);\n    }\n\n    /**\n     * @Route(\"/element/note-types\", name=\"pimcore_admin_element_notetypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function noteTypes(Request $request)\n    {\n        switch ($request->get('ctype')) {\n            case 'document':\n                return $this->processNoteTypesFromParameters(PimcoreAdminExtension::PARAM_DOCUMENTS_NOTES_EVENTS_TYPES);\n            case 'asset':\n                return $this->processNoteTypesFromParameters(PimcoreAdminExtension::PARAM_ASSETS_NOTES_EVENTS_TYPES);\n            case 'object':\n                return $this->processNoteTypesFromParameters(PimcoreAdminExtension::PARAM_DATAOBJECTS_NOTES_EVENTS_TYPES);\n            default:\n                return $this->adminJson(['noteTypes' => []]);\n\n        }\n    }\n\n    /**\n     * @Route(\"/element/note-list\", name=\"pimcore_admin_element_notelist\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function noteListAction(Request $request)\n    {\n        $this->checkPermission('notes_events');\n\n        $list = new Element\\Note\\Listing();\n\n        $list->setLimit($request->get('limit'));\n        $list->setOffset($request->get('start'));\n\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $list->setOrderKey($sortingSettings['orderKey']);\n            $list->setOrder($sortingSettings['order']);\n        } else {\n            $list->setOrderKey(['date', 'id']);\n            $list->setOrder(['DESC', 'DESC']);\n        }\n\n        $conditions = [];\n        $filterText = $request->get('filterText');\n\n        if ($filterText) {\n            $conditions[] = '('\n                . '`title` LIKE ' . $list->quote('%'. $filterText .'%')\n                . ' OR `description` LIKE ' . $list->quote('%'.$filterText.'%')\n                . ' OR `type` LIKE ' . $list->quote('%'.$filterText.'%')\n                . ' OR `user` IN (SELECT `id` FROM `users` WHERE `name` LIKE ' . $list->quote('%'.$filterText.'%') . ')'\n                . \" OR DATE_FORMAT(FROM_UNIXTIME(`date`), '%Y-%m-%d') LIKE \" . $list->quote('%'.$filterText.'%')\n                . ')';\n        }\n\n        $filterJson = $request->get('filter');\n        if ($filterJson) {\n            $db = Db::get();\n            $filters = $this->decodeJson($filterJson);\n            $propertyKey = 'property';\n            $comparisonKey = 'operator';\n\n            foreach ($filters as $filter) {\n                $operator = '=';\n\n                if ($filter['type'] == 'string') {\n                    $operator = 'LIKE';\n                } elseif ($filter['type'] == 'numeric') {\n                    if ($filter[$comparisonKey] == 'lt') {\n                        $operator = '<';\n                    } elseif ($filter[$comparisonKey] == 'gt') {\n                        $operator = '>';\n                    } elseif ($filter[$comparisonKey] == 'eq') {\n                        $operator = '=';\n                    }\n                } elseif ($filter['type'] == 'date') {\n                    if ($filter[$comparisonKey] == 'lt') {\n                        $operator = '<';\n                    } elseif ($filter[$comparisonKey] == 'gt') {\n                        $operator = '>';\n                    } elseif ($filter[$comparisonKey] == 'eq') {\n                        $operator = '=';\n                    }\n                    $filter['value'] = strtotime($filter['value']);\n                } elseif ($filter[$comparisonKey] == 'list') {\n                    $operator = '=';\n                } elseif ($filter[$comparisonKey] == 'boolean') {\n                    $operator = '=';\n                    $filter['value'] = (int) $filter['value'];\n                }\n                // system field\n                $value = $filter['value'];\n                if ($operator == 'LIKE') {\n                    $value = '%' . $value . '%';\n                }\n\n                if ($filter[$propertyKey] == 'user') {\n                    $conditions[] = '`user` IN (SELECT `id` FROM `users` WHERE `name` LIKE ' . $list->quote('%'.$filter['value'].'%') . ')';\n                } else {\n                    if ($filter['type'] == 'date' && $filter[$comparisonKey] == 'eq') {\n                        $maxTime = $filter['value'] + (86400 - 1); //specifies the top point of the range used in the condition\n                        $dateCondition = '`' . $filter[$propertyKey] . '` ' . ' BETWEEN ' . $db->quote($filter['value']) . ' AND ' . $db->quote($maxTime);\n                        $conditions[] = $dateCondition;\n                    } else {\n                        $field = '`'.$filter[$propertyKey].'` ';\n                        $conditions[] = $field.$operator.' '.$db->quote($value);\n                    }\n                }\n            }\n        }\n\n        if ($request->get('cid') && $request->get('ctype')) {\n            $conditions[] = '(cid = ' . $list->quote($request->get('cid')) . ' AND ctype = ' . $list->quote($request->get('ctype')) . ')';\n        }\n\n        if (!empty($conditions)) {\n            $condition = implode(' AND ', $conditions);\n            $list->setCondition($condition);\n        }\n\n        $list->load();\n\n        $notes = [];\n\n        foreach ($list->getNotes() as $note) {\n            $e = Element\\Service::getNoteData($note);\n            $notes[] = $e;\n        }\n\n        return $this->adminJson([\n            'data' => $notes,\n            'success' => true,\n            'total' => $list->getTotalCount(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/note-add\", name=\"pimcore_admin_element_noteadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function noteAddAction(Request $request)\n    {\n        $this->checkPermission('notes_events');\n\n        $note = new Element\\Note();\n        $note->setCid((int) $request->get('cid'));\n        $note->setCtype($request->get('ctype'));\n        $note->setDate(time());\n        $note->setTitle($request->get('title'));\n        $note->setDescription($request->get('description'));\n        $note->setType($request->get('type'));\n        $note->save();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/find-usages\", name=\"pimcore_admin_element_findusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function findUsagesAction(Request $request)\n    {\n        $element = null;\n        if ($request->get('id')) {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        } elseif ($request->get('path')) {\n            $element = Element\\Service::getElementByPath($request->get('type'), $request->get('path'));\n        }\n\n        $results = [];\n        $success = false;\n        $hasHidden = false;\n        $total = 0;\n        $limit = (int)$request->get('limit', 50);\n        $offset = (int)$request->get('start', 0);\n\n        if ($element instanceof Element\\ElementInterface) {\n            $total = $element->getDependencies()->getRequiredByTotalCount();\n\n            if ($request->get('sort')) {\n                $sort = json_decode($request->get('sort'))[0];\n                $orderBy = $sort->property;\n                $orderDirection = $sort->direction;\n            } else {\n                $orderBy = null;\n                $orderDirection = null;\n            }\n\n            $queryOffset = $offset;\n            $queryLimit = $limit;\n\n            while (count($results) < min($limit, $total) && $queryOffset < $total) {\n                $elements = $element->getDependencies()\n                    ->getRequiredByWithPath($queryOffset, $queryLimit, $orderBy, $orderDirection);\n\n                foreach ($elements as $el) {\n                    $item = Element\\Service::getElementById($el['type'], $el['id']);\n\n                    if ($item instanceof Element\\ElementInterface) {\n                        if ($item->isAllowed('list')) {\n                            $results[] = $el;\n                        } else {\n                            $hasHidden = true;\n                        }\n                    }\n                }\n\n                $queryOffset += count($elements);\n                $queryLimit = $limit - count($results);\n            }\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'data' => $results,\n            'total' => $total,\n            'hasHidden' => $hasHidden,\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/get-replace-assignments-batch-jobs\", name=\"pimcore_admin_element_getreplaceassignmentsbatchjobs\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return \\Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse\n     */\n    public function getReplaceAssignmentsBatchJobsAction(Request $request)\n    {\n        $element = null;\n\n        if ($request->get('id')) {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        } elseif ($request->get('path')) {\n            $element = Element\\Service::getElementByPath($request->get('type'), $request->get('path'));\n        }\n\n        if ($element instanceof Element\\ElementInterface) {\n            return $this->adminJson([\n                'success' => true,\n                'jobs' => $element->getDependencies()->getRequiredBy(),\n            ]);\n        } else {\n            return $this->adminJson(['success' => false], Response::HTTP_NOT_FOUND);\n        }\n    }\n\n    /**\n     * @Route(\"/element/replace-assignments\", name=\"pimcore_admin_element_replaceassignments\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function replaceAssignmentsAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n        $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        $sourceEl = Element\\Service::getElementById($request->get('sourceType'), $request->get('sourceId'));\n        $targetEl = Element\\Service::getElementById($request->get('targetType'), $request->get('targetId'));\n\n        if ($element && $sourceEl && $targetEl\n            && $request->get('sourceType') == $request->get('targetType')\n            && $sourceEl->getType() == $targetEl->getType()\n            && $element->isAllowed('save')\n        ) {\n            $rewriteConfig = [\n                $request->get('sourceType') => [\n                    $sourceEl->getId() => $targetEl->getId(),\n                ],\n            ];\n\n            if ($element instanceof Document) {\n                $element = Document\\Service::rewriteIds($element, $rewriteConfig);\n            } elseif ($element instanceof DataObject\\AbstractObject) {\n                $element = DataObject\\Service::rewriteIds($element, $rewriteConfig);\n            } elseif ($element instanceof Asset) {\n                $element = Asset\\Service::rewriteIds($element, $rewriteConfig);\n            }\n\n            $element->setUserModification($this->getAdminUser()->getId());\n            $element->save();\n\n            $success = true;\n        } else {\n            $message = 'source-type and target-type do not match';\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/unlock-propagate\", name=\"pimcore_admin_element_unlockpropagate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function unlockPropagateAction(Request $request)\n    {\n        $success = false;\n\n        $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        if ($element) {\n            $element->unlockPropagate();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/type-path\", name=\"pimcore_admin_element_typepath\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function typePathAction(Request $request)\n    {\n        $id = $request->get('id');\n        $type = $request->get('type');\n        $data = [];\n\n        if ($type === 'asset') {\n            $element = Asset::getById($id);\n        } elseif ($type === 'document') {\n            $element = Document::getById($id);\n        } else {\n            $element = DataObject::getById($id);\n        }\n\n        if (!$element) {\n            $data['success'] = false;\n\n            return $this->adminJson($data);\n        }\n\n        $typePath = Element\\Service::getTypePath($element);\n\n        $data['success'] = true;\n        $data['index'] = method_exists($element, 'getIndex') ? (int) $element->getIndex() : 0;\n        $data['idPath'] = Element\\Service::getIdPath($element);\n        $data['typePath'] = $typePath;\n        $data['fullpath'] = $element->getRealFullPath();\n\n        if ($type !== 'asset') {\n            $sortIndexPath = Element\\Service::getSortIndexPath($element);\n            $data['sortIndexPath'] = $sortIndexPath;\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/element/version-update\", name=\"pimcore_admin_element_versionupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function versionUpdateAction(Request $request)\n    {\n        $data = $this->decodeJson($request->get('data'));\n\n        $version = Version::getById($data['id']);\n\n        if ($data['public'] != $version->getPublic() || $data['note'] != $version->getNote()) {\n            $version->setPublic($data['public']);\n            $version->setNote($data['note']);\n            $version->save();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/get-nice-path\", name=\"pimcore_admin_element_getnicepath\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getNicePathAction(Request $request)\n    {\n        $source = $this->decodeJson($request->get('source'));\n        if ($source['type'] != 'object') {\n            throw new \\Exception('currently only objects as source elements are supported');\n        }\n        $result = [];\n        $id = $source['id'];\n        $source = DataObject\\Concrete::getById($id);\n        if ($request->get('context')) {\n            $context = $this->decodeJson($request->get('context'));\n        } else {\n            $context = [];\n        }\n\n        $ownerType = $context['containerType'];\n        $fieldname = $context['fieldname'];\n\n        $fd = $this->getNicePathFormatterFieldDefinition($source, $context);\n\n        $targets = $this->decodeJson($request->get('targets'));\n\n        $result = $this->convertResultWithPathFormatter($source, $context, $result, $targets);\n\n        if ($request->get('loadEditModeData') == 'true') {\n            $idProperty = $request->get('idProperty', 'id');\n            $methodName = 'get' . ucfirst($fieldname);\n            if ($ownerType == 'object' && method_exists($source, $methodName)) {\n                $data = $source->$methodName();\n                $editModeData = $fd->getDataForEditmode($data, $source);\n                // Inherited values show as an empty array\n                if (is_array($editModeData) && !empty($editModeData)) {\n                    foreach ($editModeData as $relationObjectAttribute) {\n                        $relationObjectAttribute['$$nicepath'] =\n                            isset($relationObjectAttribute[$idProperty]) && isset($result[$relationObjectAttribute[$idProperty]]) ? $result[$relationObjectAttribute[$idProperty]] : null;\n                        $result[$relationObjectAttribute[$idProperty]] = $relationObjectAttribute;\n                    }\n                } else {\n                    foreach ($result as $resultItemId => $resultItem) {\n                        $result[$resultItemId] = ['$$nicepath' => $resultItem];\n                    }\n                }\n            } else {\n                Logger::error('Loading edit mode data is not supported for ownertype: ' . $ownerType);\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/element/get-versions\", name=\"pimcore_admin_element_getversions\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getVersionsAction(Request $request)\n    {\n        $id = (int)$request->get('id');\n        $type = $request->get('elementType');\n        $allowedTypes = ['asset', 'document', 'object'];\n\n        if ($id && in_array($type, $allowedTypes)) {\n            $element = Model\\Element\\Service::getElementById($type, $id);\n            if ($element) {\n                if ($element->isAllowed('versions')) {\n                    $schedule = $element->getScheduledTasks();\n                    $schedules = [];\n                    foreach ($schedule as $task) {\n                        if ($task->getActive()) {\n                            $schedules[$task->getVersion()] = $task->getDate();\n                        }\n                    }\n\n                    //only load auto-save versions from current user\n                    $list = new Version\\Listing();\n                    $list->setLoadAutoSave(true);\n                    $list->setCondition('cid = ? AND ctype = ? AND (autoSave=0 OR (autoSave=1 AND userId = ?)) ', [\n                        $element->getId(),\n                        Element\\Service::getElementType($element),\n                        $this->getAdminUser()->getId(),\n                    ])\n                        ->setOrderKey('date')\n                        ->setOrder('ASC');\n\n                    $versions = $list->load();\n\n                    $versions = Model\\Element\\Service::getSafeVersionInfo($versions);\n                    $versions = array_reverse($versions); //reverse array to sort by ID DESC\n                    foreach ($versions as &$version) {\n                        $version['scheduled'] = null;\n                        if (array_key_exists($version['id'], $schedules)) {\n                            $version['scheduled'] = $schedules[$version['id']];\n                        }\n                    }\n\n                    return $this->adminJson(['versions' => $versions]);\n                } else {\n                    throw $this->createAccessDeniedException('Permission denied, ' . $type . ' id [' . $id . ']');\n                }\n            } else {\n                throw $this->createNotFoundException($type . ' with id [' . $id . \"] doesn't exist\");\n            }\n        }\n\n        throw $this->createNotFoundException('Element type not found');\n    }\n\n    /**\n     * @Route(\"/element/delete-draft\", name=\"pimcore_admin_element_deletedraft\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteDraftAction(Request $request)\n    {\n        $version = Version::getById($request->get('id'));\n        if ($version) {\n            $version->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/delete-version\", name=\"pimcore_admin_element_deleteversion\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteVersionAction(Request $request)\n    {\n        $version = Model\\Version::getById($request->get('id'));\n        $version->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/delete-all-versions\", name=\"pimcore_admin_element_deleteallversion\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAllVersionAction(Request $request)\n    {\n        $elementId = $request->get('id');\n        $elementModificationdate = $request->get('date');\n\n        $versions = new Model\\Version\\Listing();\n        $versions->setCondition('cid = ' . $versions->quote($elementId) . ' AND date <> ' . $versions->quote($elementModificationdate));\n\n        foreach ($versions->load() as $vkey => $version) {\n            $version->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/get-requires-dependencies\", name=\"pimcore_admin_element_getrequiresdependencies\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRequiresDependenciesAction(Request $request)\n    {\n        $id = $request->get('id');\n        $type = $request->get('elementType');\n        $allowedTypes = ['asset', 'document', 'object'];\n        $offset = $request->get('start');\n        $limit = $request->get('limit');\n\n        if ($id && in_array($type, $allowedTypes)) {\n            $element = Model\\Element\\Service::getElementById($type, $id);\n            $dependencies = $element->getDependencies();\n\n            if ($element instanceof Model\\Element\\ElementInterface) {\n                $dependenciesResult = Model\\Element\\Service::getRequiresDependenciesForFrontend($dependencies, $offset, $limit);\n\n                $dependenciesResult['start'] = $offset;\n                $dependenciesResult['limit'] = $limit;\n                $dependenciesResult['total'] = $dependencies->getRequiresTotalCount();\n\n                return $this->adminJson($dependenciesResult);\n            }\n        }\n\n        return $this->adminJson(false);\n    }\n\n    /**\n     * @Route(\"/element/get-required-by-dependencies\", name=\"pimcore_admin_element_getrequiredbydependencies\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRequiredByDependenciesAction(Request $request)\n    {\n        $id = $request->get('id');\n        $type = $request->get('elementType');\n        $allowedTypes = ['asset', 'document', 'object'];\n        $offset = $request->get('start');\n        $limit = $request->get('limit');\n\n        if ($id && in_array($type, $allowedTypes)) {\n            $element = Model\\Element\\Service::getElementById($type, $id);\n            $dependencies = $element->getDependencies();\n\n            if ($element instanceof Model\\Element\\ElementInterface) {\n                $dependenciesResult = Model\\Element\\Service::getRequiredByDependenciesForFrontend($dependencies, $offset, $limit);\n\n                $dependenciesResult['start'] = $offset;\n                $dependenciesResult['limit'] = $limit;\n                $dependenciesResult['total'] = $dependencies->getRequiredByTotalCount();\n\n                return $this->adminJson($dependenciesResult);\n            }\n        }\n\n        return $this->adminJson(false);\n    }\n\n    /**\n     * @Route(\"/element/get-predefined-properties\", name=\"pimcore_admin_element_getpredefinedproperties\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPredefinedPropertiesAction(Request $request)\n    {\n        $properties = [];\n        $type = $request->get('elementType');\n        $query = $request->get('query');\n        $allowedTypes = ['asset', 'document', 'object'];\n\n        if (in_array($type, $allowedTypes, true)) {\n            $list = new Model\\Property\\Predefined\\Listing();\n            $list->setFilter(function (Model\\Property\\Predefined $predefined) use ($type, $query) {\n                if (!str_contains($predefined->getCtype(), $type)) {\n                    return false;\n                }\n                if ($query && stripos($this->trans($predefined->getName()), $query) === false) {\n                    return false;\n                }\n\n                return true;\n            });\n\n            foreach ($list->getProperties() as $type) {\n                $properties[] = $type->getObjectVars();\n            }\n        }\n\n        return $this->adminJson(['properties' => $properties]);\n    }\n\n    /**\n     * @Route(\"/element/analyze-permissions\", name=\"pimcore_admin_element_analyzepermissions\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function analyzePermissionsAction(Request $request)\n    {\n        $userId = $request->get('userId');\n        if ($userId) {\n            $user = Model\\User::getById($userId);\n            $userList = [$user];\n        } else {\n            $userList = new Model\\User\\Listing();\n            $userList->setCondition('type = ?', ['user']);\n            $userList = $userList->load();\n        }\n\n        $elementType = $request->get('elementType');\n        $elementId = $request->get('elementId');\n\n        $element = Element\\Service::getElementById($elementType, $elementId);\n\n        $result = Element\\PermissionChecker::check($element, $userList);\n\n        return $this->adminJson(\n            [\n                'data' => $result,\n                'success' => true,\n            ]\n        );\n    }\n\n    /**\n     * @param DataObject\\Concrete $source\n     * @param array $context\n     *\n     * @return bool|DataObject\\ClassDefinition\\Data|null\n     *\n     * @throws \\Exception\n     */\n    protected function getNicePathFormatterFieldDefinition($source, $context)\n    {\n        $ownerType = $context['containerType'];\n        $fieldname = $context['fieldname'];\n        $fd = null;\n\n        if ($ownerType == 'object') {\n            $subContainerType = isset($context['subContainerType']) ? $context['subContainerType'] : null;\n            if ($subContainerType) {\n                $subContainerKey = $context['subContainerKey'];\n                $subContainer = $source->getClass()->getFieldDefinition($subContainerKey);\n                if (method_exists($subContainer, 'getFieldDefinition')) {\n                    $fd = $subContainer->getFieldDefinition($fieldname);\n                }\n            } else {\n                $fd = $source->getClass()->getFieldDefinition($fieldname);\n            }\n        } elseif ($ownerType == 'localizedfield') {\n            $localizedfields = $source->getClass()->getFieldDefinition('localizedfields');\n            if ($localizedfields instanceof DataObject\\ClassDefinition\\Data\\Localizedfields) {\n                $fd = $localizedfields->getFieldDefinition($fieldname);\n            }\n        } elseif ($ownerType == 'objectbrick') {\n            $fdBrick = DataObject\\Objectbrick\\Definition::getByKey($context['containerKey']);\n            $fd = $fdBrick->getFieldDefinition($fieldname);\n        } elseif ($ownerType == 'fieldcollection') {\n            $containerKey = $context['containerKey'];\n            $fdCollection = DataObject\\Fieldcollection\\Definition::getByKey($containerKey);\n            if (($context['subContainerType'] ?? null) === 'localizedfield') {\n                /** @var DataObject\\ClassDefinition\\Data\\Localizedfields $fdLocalizedFields */\n                $fdLocalizedFields = $fdCollection->getFieldDefinition('localizedfields');\n                $fd = $fdLocalizedFields->getFieldDefinition($fieldname);\n            } else {\n                $fd = $fdCollection->getFieldDefinition($fieldname);\n            }\n        }\n\n        return $fd;\n    }\n\n    /**\n     * @param DataObject\\Concrete $source\n     * @param array $context\n     * @param array $result\n     * @param array $targets\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function convertResultWithPathFormatter(DataObject\\Concrete $source, $context, $result, $targets): array\n    {\n        $fd = $this->getNicePathFormatterFieldDefinition($source, $context);\n\n        if ($fd instanceof DataObject\\ClassDefinition\\PathFormatterAwareInterface) {\n            $formatter = $fd->getPathFormatterClass();\n\n            if (null !== $formatter) {\n                $pathFormatter = DataObject\\ClassDefinition\\Helper\\PathFormatterResolver::resolvePathFormatter(\n                    $fd->getPathFormatterClass()\n                );\n\n                if ($pathFormatter instanceof DataObject\\ClassDefinition\\PathFormatterInterface) {\n                    $result = $pathFormatter->formatPath($result, $source, $targets, [\n                        'fd' => $fd,\n                        'context' => $context,\n                    ]);\n                }\n            }\n        }\n\n        return $result;\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Element\\Recyclebin;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @internal\n */\nclass RecyclebinController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/recyclebin/list\", name=\"pimcore_admin_recyclebin_list\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listAction(Request $request)\n    {\n        if ($request->get('xaction') == 'destroy') {\n            $item = Recyclebin\\Item::getById(\\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::getRecordIdForGridRequest($request->get('data')));\n\n            if ($item) {\n                $item->delete();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => []]);\n        } else {\n            $db = \\Pimcore\\Db::get();\n\n            $list = new Recyclebin\\Item\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $list->setOrderKey('date');\n            $list->setOrder('DESC');\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            $conditionFilters = [];\n\n            if ($request->get('filterFullText')) {\n                $conditionFilters[] = 'path LIKE ' . $list->quote('%'. $list->escapeLike($request->get('filterFullText')) .'%');\n            }\n\n            $filters = $request->get('filter');\n            if ($filters) {\n                $filters = $this->decodeJson($filters);\n\n                foreach ($filters as $filter) {\n                    $operator = '=';\n\n                    $filterField = $filter['property'];\n                    $filterOperator = $filter['operator'];\n\n                    if ($filter['type'] == 'string') {\n                        $operator = 'LIKE';\n                    } elseif ($filter['type'] == 'numeric') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                    } elseif ($filter['type'] == 'date') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                        $filter['value'] = strtotime($filter['value']);\n                    } elseif ($filter['type'] == 'list') {\n                        $operator = '=';\n                    } elseif ($filter['type'] == 'boolean') {\n                        $operator = '=';\n                        $filter['value'] = (int) $filter['value'];\n                    }\n                    // system field\n                    $value = ($filter['value'] ?? '');\n                    if ($operator == 'LIKE') {\n                        $value = '%' . $value . '%';\n                    }\n\n                    $field = '`' . $filterField . '` ';\n                    if (($filter['field'] ?? false) == 'fullpath') {\n                        $field = 'CONCAT(path,filename)';\n                    }\n\n                    if ($filter['type'] == 'date' && $operator == '=') {\n                        $maxTime = $value + (86400 - 1); //specifies the top point of the range used in the condition\n                        $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);\n                        $conditionFilters[] = $condition;\n                    } else {\n                        $conditionFilters[] = $field . $operator . ' ' . $db->quote($value);\n                    }\n                }\n            }\n\n            if (!empty($conditionFilters)) {\n                $condition = implode(' AND ', $conditionFilters);\n                $list->setCondition($condition);\n            }\n\n            $items = $list->load();\n            $data = [];\n            if (is_array($items)) {\n                /** @var Recyclebin\\Item $item */\n                foreach ($items as $item) {\n                    $data[] = $item->getObjectVars();\n                }\n            }\n\n            return $this->adminJson(['data' => $data, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n    }\n\n    /**\n     * @Route(\"/recyclebin/restore\", name=\"pimcore_admin_recyclebin_restore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function restoreAction(Request $request)\n    {\n        $item = Recyclebin\\Item::getById($request->get('id'));\n        $item->restore();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/flush\", name=\"pimcore_admin_recyclebin_flush\", methods={\"DELETE\"})\n     *\n     * @return JsonResponse\n     */\n    public function flushAction()\n    {\n        $bin = new Element\\Recyclebin();\n        $bin->flush();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/add\", name=\"pimcore_admin_recyclebin_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n\n            if ($element) {\n                $list = $element::getList(['unpublished' => true]);\n                $list->setCondition((($request->get('type') === 'object') ? 'o_' : '') . 'path LIKE ' . $list->quote($list->escapeLike($element->getRealFullPath()) . '/%'));\n                $children = $list->getTotalCount();\n\n                if ($children <= 100) {\n                    Recyclebin\\Item::create($element, $this->getAdminUser());\n                }\n            }\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // recyclebin actions might take some time (save & restore)\n        $timeout = 600; // 10 minutes\n        @ini_set('max_execution_time', $timeout);\n        set_time_limit($timeout);\n\n        // check permissions\n        $this->checkActionPermission($event, 'recyclebin', ['addAction']);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Bundle\\AdminBundle\\DependencyInjection\\PimcoreAdminExtension;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Event\\Model\\ResolveElementEvent;\nuse Pimcore\\Logger;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Version;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n *\n * @internal\n */\nclass ElementController extends AdminController\n{\n    /**\n     * @Route(\"/element/lock-element\", name=\"pimcore_admin_element_lockelement\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function lockElementAction(Request $request)\n    {\n        Element\\Editlock::lock($request->get('id'), $request->get('type'));\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/unlock-element\", name=\"pimcore_admin_element_unlockelement\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function unlockElementAction(Request $request)\n    {\n        Element\\Editlock::unlock($request->get('id'), $request->get('type'));\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * Returns the element data denoted by the given type and ID or path.\n     *\n     * @Route(\"/element/get-subtype\", name=\"pimcore_admin_element_getsubtype\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getSubtypeAction(Request $request)\n    {\n        $idOrPath = trim($request->get('id'));\n        $type = $request->get('type');\n\n        $event = new ResolveElementEvent($type, $idOrPath);\n        \\Pimcore::getEventDispatcher()->dispatch($event, AdminEvents::RESOLVE_ELEMENT);\n        $idOrPath = $event->getId();\n        $type = $event->getType();\n\n        if (is_numeric($idOrPath)) {\n            $el = Element\\Service::getElementById($type, (int) $idOrPath);\n        } else {\n            if ($type == 'document') {\n                $el = Document\\Service::getByUrl($idOrPath);\n            } else {\n                $el = Element\\Service::getElementByPath($type, $idOrPath);\n            }\n        }\n\n        if ($el) {\n            $subtype = null;\n            if ($el instanceof Asset || $el instanceof Document) {\n                $subtype = $el->getType();\n            } elseif ($el instanceof DataObject\\Concrete) {\n                $subtype = $el->getClassName();\n            } elseif ($el instanceof DataObject\\Folder) {\n                $subtype = 'folder';\n            }\n\n            return $this->adminJson([\n                'subtype' => $subtype,\n                'id' => $el->getId(),\n                'type' => $type,\n                'success' => true,\n            ]);\n        } else {\n            return $this->adminJson([\n                'success' => false,\n            ]);\n        }\n    }\n\n    /**\n     * @param string $parameterName\n     *\n     * @return \\Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse\n     */\n    protected function processNoteTypesFromParameters(string $parameterName)\n    {\n        $config = $this->getParameter($parameterName);\n        $result = [];\n        foreach ($config as $configEntry) {\n            $result[] = [\n                'name' => $configEntry,\n            ];\n        }\n\n        return $this->adminJson(['noteTypes' => $result]);\n    }\n\n    /**\n     * @Route(\"/element/note-types\", name=\"pimcore_admin_element_notetypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function noteTypes(Request $request)\n    {\n        switch ($request->get('ctype')) {\n            case 'document':\n                return $this->processNoteTypesFromParameters(PimcoreAdminExtension::PARAM_DOCUMENTS_NOTES_EVENTS_TYPES);\n            case 'asset':\n                return $this->processNoteTypesFromParameters(PimcoreAdminExtension::PARAM_ASSETS_NOTES_EVENTS_TYPES);\n            case 'object':\n                return $this->processNoteTypesFromParameters(PimcoreAdminExtension::PARAM_DATAOBJECTS_NOTES_EVENTS_TYPES);\n            default:\n                return $this->adminJson(['noteTypes' => []]);\n\n        }\n    }\n\n    /**\n     * @Route(\"/element/note-list\", name=\"pimcore_admin_element_notelist\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function noteListAction(Request $request)\n    {\n        $this->checkPermission('notes_events');\n\n        $list = new Element\\Note\\Listing();\n\n        $list->setLimit($request->get('limit'));\n        $list->setOffset($request->get('start'));\n\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        if ($sortingSettings['orderKey'] && $sortingSettings['order']) {\n            $list->setOrderKey($sortingSettings['orderKey']);\n            $list->setOrder($sortingSettings['order']);\n        } else {\n            $list->setOrderKey(['date', 'id']);\n            $list->setOrder(['DESC', 'DESC']);\n        }\n\n        $conditions = [];\n        $filterText = $request->get('filterText');\n\n        if ($filterText) {\n            $conditions[] = '('\n                . '`title` LIKE ' . $list->quote('%'. $filterText .'%')\n                . ' OR `description` LIKE ' . $list->quote('%'.$filterText.'%')\n                . ' OR `type` LIKE ' . $list->quote('%'.$filterText.'%')\n                . ' OR `user` IN (SELECT `id` FROM `users` WHERE `name` LIKE ' . $list->quote('%'.$filterText.'%') . ')'\n                . \" OR DATE_FORMAT(FROM_UNIXTIME(`date`), '%Y-%m-%d') LIKE \" . $list->quote('%'.$filterText.'%')\n                . ')';\n        }\n\n        $filterJson = $request->get('filter');\n        if ($filterJson) {\n            $db = Db::get();\n            $filters = $this->decodeJson($filterJson);\n            $propertyKey = 'property';\n            $comparisonKey = 'operator';\n\n            foreach ($filters as $filter) {\n                $operator = '=';\n\n                if ($filter['type'] == 'string') {\n                    $operator = 'LIKE';\n                } elseif ($filter['type'] == 'numeric') {\n                    if ($filter[$comparisonKey] == 'lt') {\n                        $operator = '<';\n                    } elseif ($filter[$comparisonKey] == 'gt') {\n                        $operator = '>';\n                    } elseif ($filter[$comparisonKey] == 'eq') {\n                        $operator = '=';\n                    }\n                } elseif ($filter['type'] == 'date') {\n                    if ($filter[$comparisonKey] == 'lt') {\n                        $operator = '<';\n                    } elseif ($filter[$comparisonKey] == 'gt') {\n                        $operator = '>';\n                    } elseif ($filter[$comparisonKey] == 'eq') {\n                        $operator = '=';\n                    }\n                    $filter['value'] = strtotime($filter['value']);\n                } elseif ($filter[$comparisonKey] == 'list') {\n                    $operator = '=';\n                } elseif ($filter[$comparisonKey] == 'boolean') {\n                    $operator = '=';\n                    $filter['value'] = (int) $filter['value'];\n                }\n                // system field\n                $value = ($filter['value']??'');\n                if ($operator == 'LIKE') {\n                    $value = '%' . $value . '%';\n                }\n\n                if ($filter[$propertyKey] == 'user') {\n                    $conditions[] = '`user` IN (SELECT `id` FROM `users` WHERE `name` LIKE ' . $list->quote($value) . ')';\n                } else {\n                    if ($filter['type'] == 'date' && $filter[$comparisonKey] == 'eq') {\n                        $maxTime = $value + (86400 - 1); //specifies the top point of the range used in the condition\n                        $dateCondition = '`' . $filter[$propertyKey] . '` ' . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);\n                        $conditions[] = $dateCondition;\n                    } else {\n                        $conditions[] = $db->quoteIdentifier($filter[$propertyKey]).' '.$operator.' '.$db->quote($value);\n                    }\n                }\n            }\n        }\n\n        if ($request->get('cid') && $request->get('ctype')) {\n            $conditions[] = '(cid = ' . $list->quote($request->get('cid')) . ' AND ctype = ' . $list->quote($request->get('ctype')) . ')';\n        }\n\n        if (!empty($conditions)) {\n            $condition = implode(' AND ', $conditions);\n            $list->setCondition($condition);\n        }\n\n        $list->load();\n\n        $notes = [];\n\n        foreach ($list->getNotes() as $note) {\n            $e = Element\\Service::getNoteData($note);\n            $notes[] = $e;\n        }\n\n        return $this->adminJson([\n            'data' => $notes,\n            'success' => true,\n            'total' => $list->getTotalCount(),\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/note-add\", name=\"pimcore_admin_element_noteadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function noteAddAction(Request $request)\n    {\n        $this->checkPermission('notes_events');\n\n        $note = new Element\\Note();\n        $note->setCid((int) $request->get('cid'));\n        $note->setCtype($request->get('ctype'));\n        $note->setDate(time());\n        $note->setTitle($request->get('title'));\n        $note->setDescription($request->get('description'));\n        $note->setType($request->get('type'));\n        $note->save();\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/find-usages\", name=\"pimcore_admin_element_findusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function findUsagesAction(Request $request)\n    {\n        $element = null;\n        if ($request->get('id')) {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        } elseif ($request->get('path')) {\n            $element = Element\\Service::getElementByPath($request->get('type'), $request->get('path'));\n        }\n\n        $results = [];\n        $success = false;\n        $hasHidden = false;\n        $total = 0;\n        $limit = (int)$request->get('limit', 50);\n        $offset = (int)$request->get('start', 0);\n\n        if ($element instanceof Element\\ElementInterface) {\n            $total = $element->getDependencies()->getRequiredByTotalCount();\n\n            if ($request->get('sort')) {\n                $sort = json_decode($request->get('sort'))[0];\n                $orderBy = $sort->property;\n                $orderDirection = $sort->direction;\n            } else {\n                $orderBy = null;\n                $orderDirection = null;\n            }\n\n            $queryOffset = $offset;\n            $queryLimit = $limit;\n\n            while (count($results) < min($limit, $total) && $queryOffset < $total) {\n                $elements = $element->getDependencies()\n                    ->getRequiredByWithPath($queryOffset, $queryLimit, $orderBy, $orderDirection);\n\n                foreach ($elements as $el) {\n                    $item = Element\\Service::getElementById($el['type'], $el['id']);\n\n                    if ($item instanceof Element\\ElementInterface) {\n                        if ($item->isAllowed('list')) {\n                            $results[] = $el;\n                        } else {\n                            $hasHidden = true;\n                        }\n                    }\n                }\n\n                $queryOffset += count($elements);\n                $queryLimit = $limit - count($results);\n            }\n\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'data' => $results,\n            'total' => $total,\n            'hasHidden' => $hasHidden,\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/get-replace-assignments-batch-jobs\", name=\"pimcore_admin_element_getreplaceassignmentsbatchjobs\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return \\Pimcore\\Bundle\\AdminBundle\\HttpFoundation\\JsonResponse\n     */\n    public function getReplaceAssignmentsBatchJobsAction(Request $request)\n    {\n        $element = null;\n\n        if ($request->get('id')) {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        } elseif ($request->get('path')) {\n            $element = Element\\Service::getElementByPath($request->get('type'), $request->get('path'));\n        }\n\n        if ($element instanceof Element\\ElementInterface) {\n            return $this->adminJson([\n                'success' => true,\n                'jobs' => $element->getDependencies()->getRequiredBy(),\n            ]);\n        } else {\n            return $this->adminJson(['success' => false], Response::HTTP_NOT_FOUND);\n        }\n    }\n\n    /**\n     * @Route(\"/element/replace-assignments\", name=\"pimcore_admin_element_replaceassignments\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function replaceAssignmentsAction(Request $request)\n    {\n        $success = false;\n        $message = '';\n        $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        $sourceEl = Element\\Service::getElementById($request->get('sourceType'), $request->get('sourceId'));\n        $targetEl = Element\\Service::getElementById($request->get('targetType'), $request->get('targetId'));\n\n        if ($element && $sourceEl && $targetEl\n            && $request->get('sourceType') == $request->get('targetType')\n            && $sourceEl->getType() == $targetEl->getType()\n            && $element->isAllowed('save')\n        ) {\n            $rewriteConfig = [\n                $request->get('sourceType') => [\n                    $sourceEl->getId() => $targetEl->getId(),\n                ],\n            ];\n\n            if ($element instanceof Document) {\n                $element = Document\\Service::rewriteIds($element, $rewriteConfig);\n            } elseif ($element instanceof DataObject\\AbstractObject) {\n                $element = DataObject\\Service::rewriteIds($element, $rewriteConfig);\n            } elseif ($element instanceof Asset) {\n                $element = Asset\\Service::rewriteIds($element, $rewriteConfig);\n            }\n\n            $element->setUserModification($this->getAdminUser()->getId());\n            $element->save();\n\n            $success = true;\n        } else {\n            $message = 'source-type and target-type do not match';\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'message' => $message,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/unlock-propagate\", name=\"pimcore_admin_element_unlockpropagate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function unlockPropagateAction(Request $request)\n    {\n        $success = false;\n\n        $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n        if ($element) {\n            $element->unlockPropagate();\n            $success = true;\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n        ]);\n    }\n\n    /**\n     * @Route(\"/element/type-path\", name=\"pimcore_admin_element_typepath\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function typePathAction(Request $request)\n    {\n        $id = $request->get('id');\n        $type = $request->get('type');\n        $data = [];\n\n        if ($type === 'asset') {\n            $element = Asset::getById($id);\n        } elseif ($type === 'document') {\n            $element = Document::getById($id);\n        } else {\n            $element = DataObject::getById($id);\n        }\n\n        if (!$element) {\n            $data['success'] = false;\n\n            return $this->adminJson($data);\n        }\n\n        $typePath = Element\\Service::getTypePath($element);\n\n        $data['success'] = true;\n        $data['index'] = method_exists($element, 'getIndex') ? (int) $element->getIndex() : 0;\n        $data['idPath'] = Element\\Service::getIdPath($element);\n        $data['typePath'] = $typePath;\n        $data['fullpath'] = $element->getRealFullPath();\n\n        if ($type !== 'asset') {\n            $sortIndexPath = Element\\Service::getSortIndexPath($element);\n            $data['sortIndexPath'] = $sortIndexPath;\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/element/version-update\", name=\"pimcore_admin_element_versionupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function versionUpdateAction(Request $request)\n    {\n        $data = $this->decodeJson($request->get('data'));\n\n        $version = Version::getById($data['id']);\n\n        if ($data['public'] != $version->getPublic() || $data['note'] != $version->getNote()) {\n            $version->setPublic($data['public']);\n            $version->setNote($data['note']);\n            $version->save();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/get-nice-path\", name=\"pimcore_admin_element_getnicepath\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getNicePathAction(Request $request)\n    {\n        $source = $this->decodeJson($request->get('source'));\n        if ($source['type'] != 'object') {\n            throw new \\Exception('currently only objects as source elements are supported');\n        }\n        $result = [];\n        $id = $source['id'];\n        $source = DataObject\\Concrete::getById($id);\n        if ($request->get('context')) {\n            $context = $this->decodeJson($request->get('context'));\n        } else {\n            $context = [];\n        }\n\n        $ownerType = $context['containerType'];\n        $fieldname = $context['fieldname'];\n\n        $fd = $this->getNicePathFormatterFieldDefinition($source, $context);\n\n        $targets = $this->decodeJson($request->get('targets'));\n\n        $result = $this->convertResultWithPathFormatter($source, $context, $result, $targets);\n\n        if ($request->get('loadEditModeData') == 'true') {\n            $idProperty = $request->get('idProperty', 'id');\n            $methodName = 'get' . ucfirst($fieldname);\n            if ($ownerType == 'object' && method_exists($source, $methodName)) {\n                $data = $source->$methodName();\n                $editModeData = $fd->getDataForEditmode($data, $source);\n                // Inherited values show as an empty array\n                if (is_array($editModeData) && !empty($editModeData)) {\n                    foreach ($editModeData as $relationObjectAttribute) {\n                        $relationObjectAttribute['$$nicepath'] =\n                            isset($relationObjectAttribute[$idProperty]) && isset($result[$relationObjectAttribute[$idProperty]]) ? $result[$relationObjectAttribute[$idProperty]] : null;\n                        $result[$relationObjectAttribute[$idProperty]] = $relationObjectAttribute;\n                    }\n                } else {\n                    foreach ($result as $resultItemId => $resultItem) {\n                        $result[$resultItemId] = ['$$nicepath' => $resultItem];\n                    }\n                }\n            } else {\n                Logger::error('Loading edit mode data is not supported for ownertype: ' . $ownerType);\n            }\n        }\n\n        return $this->adminJson(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/element/get-versions\", name=\"pimcore_admin_element_getversions\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function getVersionsAction(Request $request)\n    {\n        $id = (int)$request->get('id');\n        $type = $request->get('elementType');\n        $allowedTypes = ['asset', 'document', 'object'];\n\n        if ($id && in_array($type, $allowedTypes)) {\n            $element = Model\\Element\\Service::getElementById($type, $id);\n            if ($element) {\n                if ($element->isAllowed('versions')) {\n                    $schedule = $element->getScheduledTasks();\n                    $schedules = [];\n                    foreach ($schedule as $task) {\n                        if ($task->getActive()) {\n                            $schedules[$task->getVersion()] = $task->getDate();\n                        }\n                    }\n\n                    //only load auto-save versions from current user\n                    $list = new Version\\Listing();\n                    $list->setLoadAutoSave(true);\n                    $list->setCondition('cid = ? AND ctype = ? AND (autoSave=0 OR (autoSave=1 AND userId = ?)) ', [\n                        $element->getId(),\n                        Element\\Service::getElementType($element),\n                        $this->getAdminUser()->getId(),\n                    ])\n                        ->setOrderKey('date')\n                        ->setOrder('ASC');\n\n                    $versions = $list->load();\n\n                    $versions = Model\\Element\\Service::getSafeVersionInfo($versions);\n                    $versions = array_reverse($versions); //reverse array to sort by ID DESC\n                    foreach ($versions as &$version) {\n                        $version['scheduled'] = null;\n                        if (array_key_exists($version['id'], $schedules)) {\n                            $version['scheduled'] = $schedules[$version['id']];\n                        }\n                    }\n\n                    return $this->adminJson(['versions' => $versions]);\n                } else {\n                    throw $this->createAccessDeniedException('Permission denied, ' . $type . ' id [' . $id . ']');\n                }\n            } else {\n                throw $this->createNotFoundException($type . ' with id [' . $id . \"] doesn't exist\");\n            }\n        }\n\n        throw $this->createNotFoundException('Element type not found');\n    }\n\n    /**\n     * @Route(\"/element/delete-draft\", name=\"pimcore_admin_element_deletedraft\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteDraftAction(Request $request)\n    {\n        $version = Version::getById($request->get('id'));\n        if ($version) {\n            $version->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/delete-version\", name=\"pimcore_admin_element_deleteversion\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteVersionAction(Request $request)\n    {\n        $version = Model\\Version::getById($request->get('id'));\n        $version->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/delete-all-versions\", name=\"pimcore_admin_element_deleteallversion\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAllVersionAction(Request $request)\n    {\n        $elementId = $request->get('id');\n        $elementModificationdate = $request->get('date');\n\n        $versions = new Model\\Version\\Listing();\n        $versions->setCondition('cid = ' . $versions->quote($elementId) . ' AND date <> ' . $versions->quote($elementModificationdate));\n\n        foreach ($versions->load() as $vkey => $version) {\n            $version->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/element/get-requires-dependencies\", name=\"pimcore_admin_element_getrequiresdependencies\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRequiresDependenciesAction(Request $request)\n    {\n        $id = $request->get('id');\n        $type = $request->get('elementType');\n        $allowedTypes = ['asset', 'document', 'object'];\n        $offset = $request->get('start');\n        $limit = $request->get('limit');\n\n        if ($id && in_array($type, $allowedTypes)) {\n            $element = Model\\Element\\Service::getElementById($type, $id);\n            $dependencies = $element->getDependencies();\n\n            if ($element instanceof Model\\Element\\ElementInterface) {\n                $dependenciesResult = Model\\Element\\Service::getRequiresDependenciesForFrontend($dependencies, $offset, $limit);\n\n                $dependenciesResult['start'] = $offset;\n                $dependenciesResult['limit'] = $limit;\n                $dependenciesResult['total'] = $dependencies->getRequiresTotalCount();\n\n                return $this->adminJson($dependenciesResult);\n            }\n        }\n\n        return $this->adminJson(false);\n    }\n\n    /**\n     * @Route(\"/element/get-required-by-dependencies\", name=\"pimcore_admin_element_getrequiredbydependencies\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getRequiredByDependenciesAction(Request $request)\n    {\n        $id = $request->get('id');\n        $type = $request->get('elementType');\n        $allowedTypes = ['asset', 'document', 'object'];\n        $offset = $request->get('start');\n        $limit = $request->get('limit');\n\n        if ($id && in_array($type, $allowedTypes)) {\n            $element = Model\\Element\\Service::getElementById($type, $id);\n            $dependencies = $element->getDependencies();\n\n            if ($element instanceof Model\\Element\\ElementInterface) {\n                $dependenciesResult = Model\\Element\\Service::getRequiredByDependenciesForFrontend($dependencies, $offset, $limit);\n\n                $dependenciesResult['start'] = $offset;\n                $dependenciesResult['limit'] = $limit;\n                $dependenciesResult['total'] = $dependencies->getRequiredByTotalCount();\n\n                return $this->adminJson($dependenciesResult);\n            }\n        }\n\n        return $this->adminJson(false);\n    }\n\n    /**\n     * @Route(\"/element/get-predefined-properties\", name=\"pimcore_admin_element_getpredefinedproperties\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPredefinedPropertiesAction(Request $request)\n    {\n        $properties = [];\n        $type = $request->get('elementType');\n        $query = $request->get('query');\n        $allowedTypes = ['asset', 'document', 'object'];\n\n        if (in_array($type, $allowedTypes, true)) {\n            $list = new Model\\Property\\Predefined\\Listing();\n            $list->setFilter(function (Model\\Property\\Predefined $predefined) use ($type, $query) {\n                if (!str_contains($predefined->getCtype(), $type)) {\n                    return false;\n                }\n                if ($query && stripos($this->trans($predefined->getName()), $query) === false) {\n                    return false;\n                }\n\n                return true;\n            });\n\n            foreach ($list->getProperties() as $type) {\n                $properties[] = $type->getObjectVars();\n            }\n        }\n\n        return $this->adminJson(['properties' => $properties]);\n    }\n\n    /**\n     * @Route(\"/element/analyze-permissions\", name=\"pimcore_admin_element_analyzepermissions\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function analyzePermissionsAction(Request $request)\n    {\n        $userId = $request->get('userId');\n        if ($userId) {\n            $user = Model\\User::getById($userId);\n            $userList = [$user];\n        } else {\n            $userList = new Model\\User\\Listing();\n            $userList->setCondition('type = ?', ['user']);\n            $userList = $userList->load();\n        }\n\n        $elementType = $request->get('elementType');\n        $elementId = $request->get('elementId');\n\n        $element = Element\\Service::getElementById($elementType, $elementId);\n\n        $result = Element\\PermissionChecker::check($element, $userList);\n\n        return $this->adminJson(\n            [\n                'data' => $result,\n                'success' => true,\n            ]\n        );\n    }\n\n    /**\n     * @param DataObject\\Concrete $source\n     * @param array $context\n     *\n     * @return bool|DataObject\\ClassDefinition\\Data|null\n     *\n     * @throws \\Exception\n     */\n    protected function getNicePathFormatterFieldDefinition($source, $context)\n    {\n        $ownerType = $context['containerType'];\n        $fieldname = $context['fieldname'];\n        $fd = null;\n\n        if ($ownerType == 'object') {\n            $subContainerType = isset($context['subContainerType']) ? $context['subContainerType'] : null;\n            if ($subContainerType) {\n                $subContainerKey = $context['subContainerKey'];\n                $subContainer = $source->getClass()->getFieldDefinition($subContainerKey);\n                if (method_exists($subContainer, 'getFieldDefinition')) {\n                    $fd = $subContainer->getFieldDefinition($fieldname);\n                }\n            } else {\n                $fd = $source->getClass()->getFieldDefinition($fieldname);\n            }\n        } elseif ($ownerType == 'localizedfield') {\n            $localizedfields = $source->getClass()->getFieldDefinition('localizedfields');\n            if ($localizedfields instanceof DataObject\\ClassDefinition\\Data\\Localizedfields) {\n                $fd = $localizedfields->getFieldDefinition($fieldname);\n            }\n        } elseif ($ownerType == 'objectbrick') {\n            $fdBrick = DataObject\\Objectbrick\\Definition::getByKey($context['containerKey']);\n            $fd = $fdBrick->getFieldDefinition($fieldname);\n        } elseif ($ownerType == 'fieldcollection') {\n            $containerKey = $context['containerKey'];\n            $fdCollection = DataObject\\Fieldcollection\\Definition::getByKey($containerKey);\n            if (($context['subContainerType'] ?? null) === 'localizedfield') {\n                /** @var DataObject\\ClassDefinition\\Data\\Localizedfields $fdLocalizedFields */\n                $fdLocalizedFields = $fdCollection->getFieldDefinition('localizedfields');\n                $fd = $fdLocalizedFields->getFieldDefinition($fieldname);\n            } else {\n                $fd = $fdCollection->getFieldDefinition($fieldname);\n            }\n        }\n\n        return $fd;\n    }\n\n    /**\n     * @param DataObject\\Concrete $source\n     * @param array $context\n     * @param array $result\n     * @param array $targets\n     *\n     * @return array\n     *\n     * @throws \\Exception\n     */\n    protected function convertResultWithPathFormatter(DataObject\\Concrete $source, $context, $result, $targets): array\n    {\n        $fd = $this->getNicePathFormatterFieldDefinition($source, $context);\n\n        if ($fd instanceof DataObject\\ClassDefinition\\PathFormatterAwareInterface) {\n            $formatter = $fd->getPathFormatterClass();\n\n            if (null !== $formatter) {\n                $pathFormatter = DataObject\\ClassDefinition\\Helper\\PathFormatterResolver::resolvePathFormatter(\n                    $fd->getPathFormatterClass()\n                );\n\n                if ($pathFormatter instanceof DataObject\\ClassDefinition\\PathFormatterInterface) {\n                    $result = $pathFormatter->formatPath($result, $source, $targets, [\n                        'fd' => $fd,\n                        'context' => $context,\n                    ]);\n                }\n            }\n        }\n\n        return $result;\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Element\\Recyclebin;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @internal\n */\nclass RecyclebinController extends AdminController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/recyclebin/list\", name=\"pimcore_admin_recyclebin_list\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listAction(Request $request)\n    {\n        if ($request->get('xaction') == 'destroy') {\n            $item = Recyclebin\\Item::getById(\\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::getRecordIdForGridRequest($request->get('data')));\n\n            if ($item) {\n                $item->delete();\n            }\n\n            return $this->adminJson(['success' => true, 'data' => []]);\n        } else {\n            $db = \\Pimcore\\Db::get();\n\n            $list = new Recyclebin\\Item\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $list->setOrderKey('date');\n            $list->setOrder('DESC');\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            $conditionFilters = [];\n\n            if ($request->get('filterFullText')) {\n                $conditionFilters[] = 'path LIKE ' . $list->quote('%'. $list->escapeLike($request->get('filterFullText')) .'%');\n            }\n\n            $filters = $request->get('filter');\n            if ($filters) {\n                $filters = $this->decodeJson($filters);\n\n                foreach ($filters as $filter) {\n                    $operator = '=';\n\n                    $filterField = $filter['property'];\n                    $filterOperator = $filter['operator'];\n\n                    if ($filter['type'] == 'string') {\n                        $operator = 'LIKE';\n                    } elseif ($filter['type'] == 'numeric') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                    } elseif ($filter['type'] == 'date') {\n                        if ($filterOperator == 'lt') {\n                            $operator = '<';\n                        } elseif ($filterOperator == 'gt') {\n                            $operator = '>';\n                        } elseif ($filterOperator == 'eq') {\n                            $operator = '=';\n                        }\n                        $filter['value'] = strtotime($filter['value']);\n                    } elseif ($filter['type'] == 'list') {\n                        $operator = '=';\n                    } elseif ($filter['type'] == 'boolean') {\n                        $operator = '=';\n                        $filter['value'] = (int) $filter['value'];\n                    }\n                    // system field\n                    $value = ($filter['value'] ?? '');\n                    if ($operator == 'LIKE') {\n                        $value = '%' . $value . '%';\n                    }\n\n                    $field = $db->quoteIdentifier($filterField);\n                    if (($filter['field'] ?? false) == 'fullpath') {\n                        $field = 'CONCAT(path,filename)';\n                    }\n\n                    if ($filter['type'] == 'date' && $operator == '=') {\n                        $maxTime = $value + (86400 - 1); //specifies the top point of the range used in the condition\n                        $condition = $field . ' BETWEEN ' . $db->quote($value) . ' AND ' . $db->quote($maxTime);\n                        $conditionFilters[] = $condition;\n                    } else {\n                        $conditionFilters[] = $field . $operator . ' ' . $db->quote($value);\n                    }\n                }\n            }\n\n            if (!empty($conditionFilters)) {\n                $condition = implode(' AND ', $conditionFilters);\n                $list->setCondition($condition);\n            }\n\n            $items = $list->load();\n            $data = [];\n            if (is_array($items)) {\n                /** @var Recyclebin\\Item $item */\n                foreach ($items as $item) {\n                    $data[] = $item->getObjectVars();\n                }\n            }\n\n            return $this->adminJson(['data' => $data, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n    }\n\n    /**\n     * @Route(\"/recyclebin/restore\", name=\"pimcore_admin_recyclebin_restore\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function restoreAction(Request $request)\n    {\n        $item = Recyclebin\\Item::getById($request->get('id'));\n        $item->restore();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/flush\", name=\"pimcore_admin_recyclebin_flush\", methods={\"DELETE\"})\n     *\n     * @return JsonResponse\n     */\n    public function flushAction()\n    {\n        $bin = new Element\\Recyclebin();\n        $bin->flush();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/recyclebin/add\", name=\"pimcore_admin_recyclebin_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        try {\n            $element = Element\\Service::getElementById($request->get('type'), $request->get('id'));\n\n            if ($element) {\n                $list = $element::getList(['unpublished' => true]);\n                $list->setCondition((($request->get('type') === 'object') ? 'o_' : '') . 'path LIKE ' . $list->quote($list->escapeLike($element->getRealFullPath()) . '/%'));\n                $children = $list->getTotalCount();\n\n                if ($children <= 100) {\n                    Recyclebin\\Item::create($element, $this->getAdminUser());\n                }\n            }\n        } catch (\\Exception $e) {\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // recyclebin actions might take some time (save & restore)\n        $timeout = 600; // 10 minutes\n        @ini_set('max_execution_time', $timeout);\n        set_time_limit($timeout);\n\n        // check permissions\n        $this->checkActionPermission($event, 'recyclebin', ['addAction']);\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/ElementController.php", "bundles/AdminBundle/Controller/Admin/RecyclebinController.php"], "buggy_code_start_loc": [235, 112], "buggy_code_end_loc": [250, 113], "fixing_code_start_loc": [235, 112], "fixing_code_end_loc": [249, 113], "type": "CWE-89", "message": "SQL injection in ElementController.php in GitHub repository pimcore/pimcore prior to 10.3.5. This vulnerability is capable of steal the data", "other": {"cve": {"id": "CVE-2022-1339", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-13T10:15:07.843", "lastModified": "2022-04-20T16:58:22.610", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection in ElementController.php in GitHub repository pimcore/pimcore prior to 10.3.5. This vulnerability is capable of steal the data"}, {"lang": "es", "value": "Una Inyecci\u00f3n SQL en el archivo ElementController.php en el repositorio de GitHub pimcore/pimcore versiones anteriores a 10.3.5. Esta vulnerabilidad es capaz de robar los datos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.3.5", "matchCriteriaId": "387ECA45-96DC-47F3-8115-D9B0D44E2DBF"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/adae3be64427466bf0df15ceaea2ac30da93752c", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ae8dc737-844e-40da-a9f7-e72d8e50f6f9", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/adae3be64427466bf0df15ceaea2ac30da93752c"}}