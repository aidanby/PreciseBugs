{"buggy_code": ["# Changelog\n\n## 1.8.0\n* Added support for Anghami\n* Added filter to prevent thumbnail orphan deletion\n* Added check for PHP DOM extension\n* Improved loading embed providers\n\n## 1.7.3\n* Improved compatibility with Advanced Custom Fields\n* Fixed compatibility with PHP 8.2\n* Fixed a potential PHP warning if a post does not exist while checking permissions\n* Fixed functionality of the opt-out shortcode if the current website uses a non-standard port\n* Fixed replacing only the necessary part of embedded contents for custom embeds\n* Fixed replacing all occurrences of a custom embed in the current content\n* Fixed multiple unnecessary database queries in migration before the actual check whether a migration is necessary\n* Fixed downloading the thumbnail multiple times when the same embed is embedded multiple times\n* Fixed deleted thumbnails if they are only in content of Advanced Custom Fields\n* Fixed a potential security issue regarding disclosing absolute paths in thumbnail URLs (special thanks to [@kraftner](https://profiles.wordpress.org/kraftner/))\n* Fixed aspect ratio generation if width or height contains a percentage sign\n* Fixed thumbnail positioning (it's now horizontally and vertically centered)\n* Fixed HTML output of the opt-out shortcode\n* General code improvements\n\n## 1.7.2\n* Fixed getting the URL of video shortcodes properly to not block content from the same (sub)domain\n\n## 1.7.1\n* Improved Google Maps height in Kadence Blocks\n* Fixed a JavaScript error if jQuery is not initialized\n* Fixed potential PHP warning regarding an undefined variable\n* Fixed potential PHP warning regarding an undefined hostname while retrieving the embed URL\n\n## 1.7.0\n* Added support for crowdsignal.net\n* Added support for classic video shortcode/widget\n* Added support for Slideshare thumbnails (thanks to [@Lazza](https://github.com/Lazza))\n* Added support for custom thumbnail generation via filter\n* Fixed hiding thumbnails after embedded content has been enabled\n* Fixed aspect ratio for embeds without proper dimension information\n\n## 1.6.5\n* Fixed aspect ratio for non-default content width themes\n* Fixed handling of the % character\n\n## 1.6.4\n* Fixed aspect ratio for many oEmbeds\n\n## 1.6.3\n* Fixed replacing some oEmbeds\n* Fixed potential problems while retrieving a single embed provider\n* Fixed deleting post metadata of embed providers while editing them via WP-CLI\n\n## 1.6.2\n* Restore displaying YouTube thumbnails\n\n## 1.6.1\n* Updated required WordPress version to 5.0\n* Fixed text links to youtube.com\n* Fixed Twitter embeds\n\n## 1.6.0\n* Added automatic detection of aspect ratio if given by the embed\n* Added ability to work with HTML of regular oEmbed providers\n* Added filter to ignore shortcodes (see [documentation](https://epiph.yt/en/embed-privacy/documentation/#embed_privacy_ignored_shortcodes))\n* Added matching links to the new documentation at [https://epiph.yt/en/embed-privacy/documentation/](https://epiph.yt/en/embed-privacy/documentation/)\n* Improved handling of matching non-standard elements (embed, iframe, object, see [documentation](https://epiph.yt/en/embed-privacy/documentation/#regex-pattern))\n* Fixed Google Maps regex pattern after installation\n* Fixed behavior of the opt-out shortcode with enabled page caching\n* Fixed line-height of custom embeds in Elementor\n* General code improvements\n\n## 1.5.1\n* Fixed storing and displaying video thumbnails from Vimeo that are embedded using the domain player.vimeo.com\n* Fixed unnecessary line breaks within the classic editor\n* Fixed displaying the overlay if an embed of a known embed provider followed an embed of an unknown embed provider\n* Fixed uninstallation issues\n\n## 1.5.0\n* Added support for embed provider Pocket Casts\n* Added support for Maps Marker and Maps Marker Pro\n* Added support for Google Maps in Shortcodes Ultimate\n* Added support to automatically download and display a thumbnail of the embed for Vimeo and YouTube (only in posts)\n* Added support to re-initiate the database migration and display an error message if it has been failed at least three times\n* Added support for Polylang and Polylang Pro\n* Added a new filter to allow stopping Embed Privacy from handling unknown embeds\n* Added option to disable the direct link in the overlay\n* Updated logos for Reddit, SmugMug and SoundCloud for better readability\n* Use the plugin version as parameter for assets to allow better caching and prevent problems with some setups\n* General code improvements\n* Fixed a JavaScript error\n\n## 1.4.8\n* Fixed an issue with always active providers being cached by page caching plugins\n* Fixed printing inline JavaScript only once\n\n## 1.4.7\n* Fixed displaying embeds on mobile devices while using Divi\n* Fixed the output of assets\n* Improved regular expression for Google Maps\n\n## 1.4.6\n* Fixed an issue where JavaScript assets may be missing for the opt-out shortcode\n\n## 1.4.5\n* Fixed an issue with always enable an unknown embed provider\n* Fixed issues with missing JavaScript for Facebook embed of Jetpack\n\n## 1.4.4\n* Fixed a potential encoding issue\n* Fixed issues with Facebook embed of Jetpack\n* Fixed issues with registering assets\n\n## 1.4.3\n* Fixed a problem that prevents embed fields from being stored\n\n## 1.4.2\n* Fixed an expired link during plugin activation and creating a new embed provider\n\n## 1.4.1\n* Fixed invalid HTML by changing the accessibility behavior (it's now a separate button)\n* Fixed potential empty link titles in other locales then English\n* Fixed potential unwanted URL encoding in the content after Embed Privacy replaced an embed\n\n## 1.4.0\n* Added support for Pinterest and Wolfram Cloud\n* Improved migrations to fix duplicate providers or performance problems in multisite installations\n* Embeds can now be enabled via keyboard\n* Added a link to the original content on the bottom right overlay corner\n* Added support for caching the opt-out shortcode\n* Clicking on the \"always enable content of X\" enables all embeds of this provider on the current page immediately\n* Improved markup of local tweets\n* Added additional class to checkbox paragraph, thanks to @florianbrinkmann\n* Correctly handle backslashes in the regex field\n* System providers cannot be deleted anymore\n* Fixed oEmbed provider name if the provider is unknown\n* Fix enqueuing assets for unknown embed providers\n\n## 1.3.6\n* Fixed enabling multiple YouTube videos in Elementor\n* Fixed displaying content if the page contains an always active provider\n\n## 1.3.5\n* Fixed functionality in Elementor\n* Fixed custom embed provider output\n* Fixed replacing content in shortcodes multiple times\n* Fixed checking for theme/template\n\n## 1.3.4\n* Fixed deleted meta fields if you put an embed provider in trash and restore it afterwards\n* Fixed Embed Privacy sometimes trying to replace an embed twice\n* Fixed an error that may occur if Embed Privacy tries to replace an embed that doesn't need to be replaced\n* Fixed checking for local domain if WordPress itself is located in a sub-domain\n* Fixed always enable YouTube within Divi\n* Fixed overlay line height in Divi\n\n## 1.3.3\n* Improved mobile design for responsive embeds\n* Fixed centering for non-responsive embeds\n* Fixed disabled embed content from preventing interactions with the text below the overlay\n\n## 1.3.2\n* Fixed general activation error\n\n## 1.3.1\n* Fixed a fatal error on uninstallation on non-multisite\n* Fixed activating via WP-CLI\n* Fixed deleting an option on uninstallation\n\n## 1.3.0\n* Added local tweets without overlay\n* Added option to preserve data on uninstall\n* Added compatibility with theme Astra\n* Added filter `embed_privacy_markup` for filtering the whole markup of an embed overlay\n* Added proper support for embeds on the current domain\n* Added support for embeds on other elements than `embed`, `iframe` and `object`\n* Enqueue assets only if needed\n* Removed images from media (which had been added in version 1.2.0) and use fallback images for default embed providers\n* Improved regular expression for Google Maps\n* Improved texts for clarity\n* Fixed visibility of custom post type\n* Fixed network-wide activation\n* Fixed clearing oEmbed cache\n\n## 1.2.2\n* Added a check if a migration is already running\n* Fixed a bug where the page markup could be changed unexpectedly\n* `<object>` elements are now replaced correctly\n* Added a missing textdomain to a string\n* Excluded local embeds (with the same domain)\n* Fixed Amazon Kindle regex being too greedy\n\n## 1.2.1\n* Fixed a bug where the page markup could be changed unexpectedly\n* Fixed a warning if an embed provider has no regular expressions\n* Improved migrations of embed provider metadata to make sure they have been added to the database\n\n## 1.2.0\n* Added support for managing embeds (add/remove/edit/disable)\n* Added support for caching plugins by adding a JavaScript detection for always active embed providers\n* Added CSS classes that indicate the current state of the embed (`is-disabled`/`is-enabled`)\n* Added shortcode `[embed_privacy_opt_out]` to allow users to opt-out/in\n* Fixed responsive design if the embed added an own width\n\n## 1.1.3\n* Changed provider name from Polldaddy to Crowdsignal\n* Removed provider Hulu\n\n## 1.1.2\n* Fixed a possible difference in the used class name of the embed provider in HTML and CSS\n\n## 1.1.1\n* Removed provider CollegeHumor\n* Fixed a bug with the automatic addition of paragraphs\n\n## 1.1.0\n* Added option to allow all embeds by one provider\n* Added provider TikTok, introduced in WordPress 5.4\n* Added support for Google Maps iframes\n* Added URL rewrite to youtube-nocookie.com\n* Added option to save user selection per embed provider\n* Added provider logo to our placeholder\n* Added option to filter our placeholders markup\n* Added support for 'alignwide' and 'alignfull' Gutenberg classes\n* Added support for using our embedding overlay mechanism for external developers\n* Improved our placeholder markup to be actually semantic\n* Changed .embed- classes to .embed-privacy-\n* Fixed some embed providers that use custom z-index, which results in the embedded content being above the overlay\n* Fixed typos\n\n## 1.0.2\n* Improved compatibility with [Autoptimize](https://wordpress.org/plugins/autoptimize/)\n* Improved compatibility with [AMP](https://wordpress.org/plugins/amp/)\n* Fix issue with Slideshare causing wrong (generic) placeholders\n\n## 1.0.1\n* Fixed support for PHP 5.6\n\n## 1.0.0\n* Initial release\n", "# Security Policy\n\n## Supported Versions\n\nWe usually only support the latest major version.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.7.x   | :white_check_mark: |\n| < 1.7   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report any vulnerability via <hey.security@epiph.yt>. You should receive\nan answer within 24 hours. You will be informed about if the vulnerability is\naccepted or declined. If accepted and fixed, we will thank you in the changelog.\n\nIf desired, we can also mention you in any other channel we use to announce an\nupdate, e.g. in a blog post or via Mastodon/Twitter.\n", "<?php\nnamespace epiphyt\\Embed_Privacy;\n\n/*\nPlugin Name:\tEmbed Privacy\nDescription:\tEmbed Privacy prevents from loading external embeds directly and lets the user control which one should be loaded.\nVersion:\t\t1.8.0\nAuthor:\t\t\tEpiphyt\nAuthor URI:\t\thttps://epiph.yt\nLicense:\t\tGPL2\nLicense URI:\thttps://www.gnu.org/licenses/gpl-2.0.html\nText Domain:\tembed-privacy\nDomain Path:\t/languages\n\nEmbed Privacy is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 2 of the License, or\nany later version.\n\nEmbed Privacy is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Embed Privacy. If not, see https://www.gnu.org/licenses/gpl-2.0.html.\n*/\n\n// exit if ABSPATH is not defined\n\\defined( 'ABSPATH' ) || exit;\n\n\\define( 'EMBED_PRIVACY_VERSION', '1.8.0' );\n\nif ( ! \\defined( 'EPI_EMBED_PRIVACY_BASE' ) ) {\n\t\\define( 'EPI_EMBED_PRIVACY_BASE', \\WP_PLUGIN_DIR . '/embed-privacy/' );\n}\n\nif ( ! \\defined( 'EPI_EMBED_PRIVACY_URL' ) ) {\n\t\\define( 'EPI_EMBED_PRIVACY_URL', \\plugin_dir_url( \\EPI_EMBED_PRIVACY_BASE . 'embed-privacy.php' ) );\n}\n\nif ( ! \\class_exists( 'DOMDocument' ) ) {\n\t/**\n\t * Disable the plugin if the php-dom extension is missing.\n\t */\n\tfunction disable_plugin() {\n\t\t?>\n\t\t<div class=\"notice notice-error\">\n\t\t\t<p><?php \\esc_html_e( 'The PHP extension \"Document Object Model\" (php-dom) is missing. Embed Privacy requires this extension to be installed and enabled. Please ask your hosting provider to install and enable it. Embed Privacy disables itself now. Please re-enable it again if the extension is installed and enabled.', 'embed-privacy' ); ?></p>\n\t\t</div>\n\t\t<?php\n\t\t\\deactivate_plugins( \\plugin_basename( __FILE__ ) );\n\t}\n\t\n\t\\add_action( 'admin_notices', __NAMESPACE__ . '\\disable_plugin' );\n}\n\n/**\n * Autoload all necessary classes.\n * \n * @param\tstring\t\t$class The class name of the autoloaded class\n */\n\\spl_autoload_register( function( $class ) {\n\t$path = \\explode( '\\\\', $class );\n\t$filename = \\str_replace( '_', '-', \\strtolower( \\array_pop( $path ) ) );\n\t$class = \\str_replace(\n\t\t[ 'epiphyt\\embed_privacy\\\\', '\\\\', '_' ],\n\t\t[ '', '/', '-' ],\n\t\t\\strtolower( $class )\n\t);\n\t$class = \\str_replace( $filename, 'class-' . $filename, $class );\n\t$maybe_file = __DIR__ . '/inc/' . $class . '.php';\n\t\n\tif ( \\file_exists( $maybe_file ) ) {\n\t\trequire_once $maybe_file;\n\t}\n} );\n\nEmbed_Privacy_Widget_Output_Filter::get_instance();\n$embed_privacy = Embed_Privacy::get_instance();\n$embed_privacy->set_plugin_file( __FILE__ );\n$embed_privacy->init();\n", "<?php\nnamespace epiphyt\\Embed_Privacy;\n\nuse Automattic\\Jetpack\\Assets;\nuse DOMDocument;\nuse DOMElement;\nuse DOMNode;\nuse DOMXPath;\nuse Elementor\\Plugin;\nuse Jetpack;\nuse WP_Post;\n\n/**\n * Two click embed main class.\n * \n * @author\tEpiphyt\n * @license\tGPL2\n * @package\tepiphyt\\Embed_Privacy\n */\nclass Embed_Privacy {\n\t/**\n\t * @deprecated\t1.2.0\n\t * @since\t\t1.1.0\n\t */\n\tconst IFRAME_REGEX = '/<iframe(.*?)src=\"([^\"]+)\"([^>]*)>((?!<\\/iframe).)*<\\/iframe>/ms';\n\t\n\t/**\n\t * @since\t1.4.0\n\t * @var\t\tmixed The cookie content or any error message from json_decode()\n\t */\n\tprivate $cookie;\n\t\n\t/**\n\t * @since\t1.3.5\n\t * @var\t\tarray Replacements that already have taken place.\n\t */\n\tprivate $did_replacements = [];\n\t\n\t/**\n\t * @since\t1.3.0\n\t * @var\t\tarray An array of embed providers\n\t */\n\tpublic $embeds = [];\n\t\n\t/**\n\t * @since\t1.3.0\n\t * @var\t\tbool Whether the current request has any embed processed by Embed Privacy\n\t */\n\tpublic $has_embed = false;\n\t\n\t/**\n\t * @since\t1.6.0\n\t * @var\t\tstring[] List of ignored shortcodes\n\t */\n\tprivate $ignored_shortcodes = [\n\t\t'embed_privacy_opt_out',\n\t\t'grw',\n\t];\n\t\n\t/**\n\t * @since\t1.4.8\n\t * @var\t\tbool Whether the current request has printed Embed Privacy assets.\n\t */\n\tprivate $is_printed = false;\n\t\n\t/**\n\t * @var\t\t\\epiphyt\\Embed_Privacy\\Embed_Privacy\n\t */\n\tpublic static $instance;\n\t\n\t/**\n\t * @var\t\tstring The full path to the main plugin file\n\t */\n\tpublic $plugin_file = '';\n\t\n\t/**\n\t * @var\t\tbool Determine if we use the cache\n\t */\n\tprivate $usecache;\n\t\n\t/**\n\t * @deprecated\t1.2.0\n\t * @var\t\t\tarray The supported media providers\n\t */\n\tpublic $embed_providers = [\n\t\t'.amazon.' => 'Amazon Kindle',\n\t\t'.amzn.' => 'Amazon Kindle',\n\t\t'a.co' => 'Amazon Kindle',\n\t\t'z.cn' => 'Amazon Kindle',\n\t\t'animoto.com' => 'Animoto',\n\t\t'cloudup.com' => 'Cloudup',\n\t\t'crowdsignal.com' => 'Crowdsignal',\n\t\t'dailymotion.com' => 'DailyMotion',\n\t\t'facebook.com' => 'Facebook',\n\t\t'flickr.com' => 'Flickr',\n\t\t'funnyordie.com' => 'Funny Or Die',\n\t\t'imgur.com' => 'Imgur',\n\t\t'instagram.com' => 'Instagram',\n\t\t'issuu.com' => 'Issuu',\n\t\t'kickstarter.com' => 'Kickstarter',\n\t\t'meetup.com' => 'Meetup',\n\t\t'mixcloud.com' => 'Mixcloud',\n\t\t'photobucket.com' => 'Photobucket',\n\t\t'poll.fm' => 'Crowdsignal',\n\t\t'polldaddy.com' => 'Crowdsignal',\n\t\t'reddit.com' => 'Reddit',\n\t\t'reverbnation.com' => 'ReverbNation',\n\t\t'scribd.com' => 'Scribd',\n\t\t'sketchfab.com' => 'Sketchfab',\n\t\t'slideshare.net' => 'SlideShare',\n\t\t'smugmug.com' => 'SmugMug',\n\t\t'soundcloud.com' => 'SoundCloud',\n\t\t'speakerdeck.com' => 'Speaker Deck',\n\t\t'spotify.com' => 'Spotify',\n\t\t'survey.fm' => 'Crowdsignal',\n\t\t'tiktok.com' => 'TikTok',\n\t\t'ted.com' => 'TED',\n\t\t'tumblr.com' => 'Tumblr',\n\t\t'twitter.com' => 'Twitter',\n\t\t'videopress.com' => 'VideoPress',\n\t\t'vimeo.com' => 'Vimeo',\n\t\t'wordpress.org/plugins' => 'WordPress.org',\n\t\t'wordpress.tv' => 'WordPress.tv',\n\t\t'youtu.be' => 'YouTube',\n\t\t'youtube.com' => 'YouTube',\n\t];\n\t\n\t/**\n\t * Embed Privacy constructor.\n\t */\n\tpublic function __construct() {\n\t\t// assign variables\n\t\t$this->usecache = ! \\is_admin();\n\t}\n\t\n\t/**\n\t * Initialize the class.\n\t * \n\t * @since\t1.2.0\n\t */\n\tpublic function init() {\n\t\t// actions\n\t\t\\add_action( 'init', [ $this, 'load_textdomain' ], 0 );\n\t\t\\add_action( 'init', [ $this, 'register_assets' ] );\n\t\t\\add_action( 'init', [ $this, 'set_post_type' ], 5 );\n\t\t\\add_action( 'save_post_epi_embed', [ $this, 'preserve_backslashes' ] );\n\t\t\\add_action( 'wp_enqueue_scripts', [ $this, 'deregister_assets' ], 100 );\n\t\t\n\t\t// filters\n\t\tif ( ! $this->usecache ) {\n\t\t\t// set ttl to 0 in admin\n\t\t\t\\add_filter( 'oembed_ttl', '__return_zero' );\n\t\t}\n\t\t\n\t\t\\add_filter( 'acf_the_content', [ $this, 'replace_embeds' ] );\n\t\t\\add_filter( 'do_shortcode_tag', [ $this, 'replace_embeds' ], 10, 2 );\n\t\t\\add_filter( 'do_shortcode_tag', [ $this, 'replace_maps_marker' ], 10, 2 );\n\t\t\\add_filter( 'embed_oembed_html', [ $this, 'replace_embeds_oembed' ], 10, 3 );\n\t\t\\add_filter( 'embed_privacy_widget_output', [ $this, 'replace_embeds' ] );\n\t\t\\add_filter( 'et_builder_get_oembed', [ $this, 'replace_embeds_divi' ], 10, 2 );\n\t\t\\add_filter( 'pll_get_post_types', [ $this, 'register_polylang_post_type' ], 10, 2 );\n\t\t\\add_filter( 'the_content', [ $this, 'replace_embeds' ] );\n\t\t\\add_filter( 'wp_video_shortcode', [ $this, 'replace_video_shortcode' ], 10, 2 );\n\t\t\\add_shortcode( 'embed_privacy_opt_out', [ $this, 'shortcode_opt_out' ] );\n\t\t\\register_activation_hook( $this->plugin_file, [ $this, 'clear_embed_cache' ] );\n\t\t\\register_deactivation_hook( $this->plugin_file, [ $this, 'clear_embed_cache' ] );\n\t\t\n\t\tAdmin::get_instance()->init();\n\t\tFields::get_instance()->init();\n\t\tMigration::get_instance()->init();\n\t\tThumbnails::get_instance()->init();\n\t}\n\t\n\t/**\n\t * Embeds are cached in the postmeta database table and need to be removed\n\t * whenever the plugin will be enabled or disabled.\n\t */\n\tpublic function clear_embed_cache() {\n\t\tglobal $wpdb;\n\t\t\n\t\t// phpcs:disable WordPress.DB.DirectDatabaseQuery.DirectQuery,WordPress.DB.DirectDatabaseQuery.NoCaching\n\t\tif ( \\is_plugin_active_for_network( 'embed-privacy/embed-privacy.php' ) ) {\n\t\t\t// on networks we need to iterate through every site\n\t\t\t$sites = \\get_sites( [\n\t\t\t\t'fields' => 'ids',\n\t\t\t\t'number' => 99999,\n\t\t\t] );\n\t\t\t\n\t\t\tforeach ( $sites as $blog_id ) {\n\t\t\t\t$wpdb->query(\n\t\t\t\t\t$wpdb->prepare(\n\t\t\t\t\t\t// phpcs:disable WordPress.DB.PreparedSQL.InterpolatedNotPrepared\n\t\t\t\t\t\t\"DELETE FROM\t$wpdb->get_blog_prefix( $blog_id )postmeta\n\t\t\t\t\t\tWHERE\t\t\tmeta_key LIKE %s\",\n\t\t\t\t\t\t// phpcs:enable WordPress.DB.PreparedSQL.InterpolatedNotPrepared\n\t\t\t\t\t\t[ '%_oembed_%' ]\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$wpdb->query(\n\t\t\t\t$wpdb->prepare(\n\t\t\t\t\t\"DELETE FROM\t$wpdb->postmeta\n\t\t\t\t\tWHERE\t\t\tmeta_key LIKE %s\",\n\t\t\t\t\t[ '%_oembed_%' ]\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\t//phpcs:enable\n\t}\n\t\n\t/**\n\t * Deregister assets.\n\t * \n\t * @since\t1.4.6\n\t */\n\tpublic function deregister_assets() {\n\t\t\\wp_deregister_script( 'jetpack-facebook-embed' );\n\t}\n\t\n\t/**\n\t * Enqueue our assets for the frontend.\n\t * \n\t * @deprecated\t1.4.4 Use Embed_Privacy::print_assets() instead\n\t */\n\tpublic function enqueue_assets() { }\n\t\n\t/**\n\t * Get the Embed Privacy cookie.\n\t * \n\t * @return\tmixed The content of the cookie\n\t */\n\tpublic function get_cookie() {\n\t\tif ( empty( $_COOKIE['embed-privacy'] ) ) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\tif ( ! empty( $this->cookie ) ) {\n\t\t\treturn $this->cookie;\n\t\t}\n\t\t\n\t\t$this->cookie = \\json_decode( \\sanitize_text_field( \\wp_unslash( $_COOKIE['embed-privacy'] ) ) );\n\t\t\n\t\treturn $this->cookie;\n\t}\n\t\n\t/**\n\t * Get filters for Elementor.\n\t * \n\t * @since\t\t1.3.0\n\t * @deprecated\t1.3.5\n\t * @noinspection PhpUnused\n\t */\n\tpublic function get_elementor_filters() {\n\t\tif ( ! $this->is_elementor() ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// doesn't currently run with YouTube\n\t\t// see https://github.com/elementor/elementor/issues/14276\n\t\t\\add_filter( 'oembed_result', [ $this, 'replace_embeds' ], 10, 3 );\n\t}\n\t\n\t/**\n\t * Get an overlay for Elementor YouTube videos.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\tstring\t$content The content\n\t * @return\tstring The content with an embed overlay (if needed)\n\t */\n\tprivate function get_elementor_youtube_overlay( $content ) {\n\t\t$embed_provider = $this->get_embed_by_name( 'youtube' );\n\t\t$replacements = [];\n\t\t\n\t\t// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $content . '</html>',\n\t\t\tLIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t$template_dom = new DOMDocument();\n\t\t\n\t\tforeach ( $dom->getElementsByTagName( 'div' ) as $element ) {\n\t\t\tif ( \\strpos( $element->getAttribute( 'data-settings' ), 'youtube_url' ) === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t$settings = \\json_decode( $element->getAttribute( 'data-settings' ) );\n\t\t\t$args = [];\n\t\t\t\n\t\t\tif ( ! empty( $settings->youtube_url ) ) {\n\t\t\t\t$args['embed_url'] = $settings->youtube_url;\n\t\t\t}\n\t\t\t\n\t\t\t// get overlay template as DOM element\n\t\t\t$template_dom->loadHTML(\n\t\t\t\t'<html><meta charset=\"utf-8\">' . $this->get_output_template( $embed_provider->post_title, $embed_provider->post_name, $dom->saveHTML( $element ), $args ) . '</html>',\n\t\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t\t);\n\t\t\t$overlay = null;\n\t\t\t\n\t\t\tforeach ( $template_dom->getElementsByTagName( 'div' ) as $div ) {\n\t\t\t\tif ( \\stripos( $div->getAttribute( 'class' ), 'embed-privacy-container' ) !== false ) {\n\t\t\t\t\t$overlay = $div;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// store the elements to replace (see regressive loop down below)\n\t\t\tif ( $overlay instanceof DOMNode || $overlay instanceof DOMElement ) {\n\t\t\t\t$replacements[] = [\n\t\t\t\t\t'element' => $element,\n\t\t\t\t\t'replace' => $dom->importNode( $overlay, true ),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( ! empty( $replacements ) ) {\n\t\t\t$this->did_replacements = \\array_merge( $this->did_replacements, $replacements );\n\t\t\t$this->has_embed = true;\n\t\t\t$elements = $dom->getElementsByTagName( 'div' );\n\t\t\t$i = $elements->length - 1;\n\t\t\t\n\t\t\t// use regressive loop for replaceChild()\n\t\t\t// see: https://www.php.net/manual/en/domnode.replacechild.php#50500\n\t\t\twhile ( $i > -1 ) {\n\t\t\t\t$element = $elements->item( $i );\n\t\t\t\t\n\t\t\t\tforeach ( $replacements as $replacement ) {\n\t\t\t\t\tif ( $replacement['element'] === $element ) {\n\t\t\t\t\t\t$element->parentNode->replaceChild( $replacement['replace'], $replacement['element'] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$i--;\n\t\t\t}\n\t\t\t\n\t\t\t$content = \\str_replace( [ '<html><meta charset=\"utf-8\">', '</html>' ], '', $dom->saveHTML( $dom->documentElement ) );\n\t\t}\n\t\t\n\t\t\\libxml_use_internal_errors( false );\n\t\t// phpcs:enable\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Get an embed provider by its name.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\tstring\t$name The name to search for\n\t * @return\t\\WP_Post|null The embed or null\n\t */\n\tpublic function get_embed_by_name( $name ) {\n\t\tif ( empty( $name ) ) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t$embed_providers = $this->get_embeds();\n\t\t$embed = null;\n\t\t$pattern = '/^' . \\preg_quote( $name, '/' ) . '\\-\\d+/';\n\t\t\n\t\tforeach ( $embed_providers as $embed_provider ) {\n\t\t\tif ( $embed_provider->post_name !== $name && ! \\preg_match( $pattern, $embed_provider->post_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t$embed = $embed_provider;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn $embed;\n\t}\n\t\n\t/**\n\t * Get an embed provider overlay.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\t\\WP_Post\t$provider An embed provider\n\t * @param\tstring\t\t$content The content\n\t * @return\tstring The content with additional overlays of an embed provider\n\t */\n\tprivate function get_embed_overlay( $provider, $content ) {\n\t\t// make sure to test every provider for its always active state\n\t\tif ( $this->is_always_active_provider( $provider->post_name ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t$regex = \\trim( \\get_post_meta( $provider->ID, 'regex_default', true ), '/' );\n\t\t\n\t\tif ( ! empty( $regex ) ) {\n\t\t\t$regex = '/' . $regex . '/';\n\t\t}\n\t\t\n\t\t// get overlay for this provider\n\t\tif ( ! empty( $regex ) && \\preg_match( $regex, $content ) ) {\n\t\t\t$this->has_embed = true;\n\t\t\t$args['regex'] = $regex;\n\t\t\t$args['post_id'] = $provider->ID;\n\t\t\t$embed_provider = $provider->post_title;\n\t\t\t$embed_provider_lowercase = $provider->post_name;\n\t\t\t$content = $this->get_single_overlay( $content, $embed_provider, $embed_provider_lowercase, $args );\n\t\t}\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Get a specific type of embeds.\n\t * \n\t * For more information on the accepted arguments in $args, see the\n\t * {@link https://developer.wordpress.org/reference/classes/wp_query/\n\t * WP_Query} documentation in the Developer Handbook.\n\t * \n\t * @since\t1.3.0\n\t * @since\t1.8.0 Added the $args parameter\n\t * \n\t * @param\tstring\t$type The embed type\n\t * @param\tarray\t$args Additional arguments\n\t * @return\tarray A list of embeds\n\t */\n\tpublic function get_embeds( $type = 'all', $args = [] ) {\n\t\tif ( ! empty( $this->embeds ) && isset( $this->embeds[ $type ] ) ) {\n\t\t\treturn $this->embeds[ $type ];\n\t\t}\n\t\t\n\t\tif ( $type === 'all' && isset( $this->embeds['custom'] ) && isset( $this->embeds['oembed'] ) ) {\n\t\t\t$this->embeds[ $type ] = \\array_merge( $this->embeds['custom'], $this->embeds['oembed'] );\n\t\t\t\n\t\t\treturn $this->embeds[ $type ];\n\t\t}\n\t\t\n\t\tif ( ! empty( $args ) ) {\n\t\t\t$hash = \\md5( \\wp_json_encode( $args ) );\n\t\t}\n\t\t\n\t\t// phpcs:disable WordPress.DB.SlowDBQuery.slow_db_query_meta_query\n\t\tswitch ( $type ) {\n\t\t\tcase 'custom':\n\t\t\t\t$custom_providers = \\get_posts( \\array_merge( [\n\t\t\t\t\t'meta_query' => [\n\t\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'compare' => 'NOT EXISTS',\n\t\t\t\t\t\t\t'key' => 'is_system',\n\t\t\t\t\t\t\t'value' => 'yes',\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'compare' => '!=',\n\t\t\t\t\t\t\t'key' => 'is_system',\n\t\t\t\t\t\t\t'value' => 'yes',\n\t\t\t\t\t\t],\n\t\t\t\t\t],\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'numberposts' => -1,\n\t\t\t\t\t'order' => 'ASC',\n\t\t\t\t\t'orderby' => 'post_title',\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t$google_provider = \\get_posts( \\array_merge( [\n\t\t\t\t\t'meta_key' => 'is_system',\n\t\t\t\t\t'meta_value' => 'yes',\n\t\t\t\t\t'name' => 'google-maps',\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t\n\t\t\t\tif ( ! empty( $hash ) ) {\n\t\t\t\t\t$this->embeds[ $hash ] = \\array_merge( $custom_providers, $google_provider );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$this->embeds[ $type ] = \\array_merge( $custom_providers, $google_provider );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'oembed':\n\t\t\t\t$embed_providers = \\get_posts( \\array_merge( [\n\t\t\t\t\t'meta_key' => 'is_system',\n\t\t\t\t\t'meta_value' => 'yes',\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'numberposts' => -1,\n\t\t\t\t\t'order' => 'ASC',\n\t\t\t\t\t'orderby' => 'post_title',\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t\n\t\t\t\tif ( ! empty( $hash ) ) {\n\t\t\t\t\t$this->embeds[ $hash ] = $embed_providers;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$this->embeds[ $type ] = $embed_providers;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'all':\n\t\t\tdefault:\n\t\t\t\t$embed_providers = \\get_posts( \\array_merge( [\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'numberposts' => -1,\n\t\t\t\t\t'order' => 'ASC',\n\t\t\t\t\t'orderby' => 'post_title',\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t\n\t\t\t\tif ( ! empty( $hash ) ) {\n\t\t\t\t\t$this->embeds[ $hash ] = $embed_providers;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$this->embeds['all'] = $embed_providers;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\t// phpcs:enable\n\t\t\n\t\tif ( ! empty( $hash ) ) {\n\t\t\treturn $this->embeds[ $hash ];\n\t\t}\n\t\t\n\t\treturn $this->embeds[ $type ];\n\t}\n\t\n\t/**\n\t * Get a list with ignored shortcodes.\n\t * \n\t * @since\t1.6.0\n\t * \n\t * @return\tstring[] List with ignored shortcodes\n\t */\n\tpublic function get_ignored_shortcodes() {\n\t\t/**\n\t\t * Filter the ignored shortcodes list.\n\t\t * \n\t\t * @since\t1.6.0\n\t\t * \n\t\t * @param\tstring[]\t$ignored_shortcodes Current list of ignored shortcodes\n\t\t */\n\t\t$this->ignored_shortcodes = \\apply_filters( 'embed_privacy_ignored_shortcodes', $this->ignored_shortcodes );\n\t\t\n\t\treturn $this->ignored_shortcodes;\n\t}\n\t\n\t/**\n\t * Get a unique instance of the class.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @return\t\\epiphyt\\Embed_Privacy\\Embed_Privacy The single instance of this class\n\t */\n\tpublic static function get_instance() {\n\t\tif ( self::$instance === null ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\t\n\t\treturn self::$instance;\n\t}\n\t\n\t/**\n\t * Transform a tweet into a local one.\n\t * \n\t * @since\t1.3.0\n\t * \n\t * @param\tstring\t$html Embed code\n\t * @return\tstring Local embed\n\t */\n\tprivate function get_local_tweet( $html ) {\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $html . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t\n\t\t// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase\n\t\t// remove script tag\n\t\tforeach ( $dom->getElementsByTagName( 'script' ) as $script ) {\n\t\t\t$script->parentNode->removeChild( $script );\n\t\t}\n\t\t\n\t\t$xpath = new DOMXPath( $dom );\n\t\t\n\t\t// get text node, which represents the author name\n\t\t// and give it a span with class\n\t\tforeach ( $xpath->query( '//blockquote/text()' ) as $node ) {\n\t\t\t$author_node = $dom->createElement( 'span', $node->nodeValue );\n\t\t\t$author_node->setAttribute( 'class', 'embed-privacy-author-meta' );\n\t\t\t$node->parentNode->replaceChild( $author_node, $node );\n\t\t}\n\t\t\n\t\t// wrap author name by a meta div\n\t\tforeach ( $dom->getElementsByTagName( 'span' ) as $node ) {\n\t\t\tif ( $node->getAttribute( 'class' ) !== 'embed-privacy-author-meta' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// create meta cite\n\t\t\t$parent_node = $dom->createElement( 'cite' );\n\t\t\t$parent_node->setAttribute( 'class', 'embed-privacy-tweet-meta' );\n\t\t\t// append created cite to blockquote\n\t\t\t$node->parentNode->appendChild( $parent_node );\n\t\t\t// move author meta inside meta cite\n\t\t\t$parent_node->appendChild( $node );\n\t\t}\n\t\t\n\t\tforeach ( $dom->getElementsByTagName( 'a' ) as $link ) {\n\t\t\tif ( ! \\preg_match( '/https?:\\/\\/twitter.com\\/([^\\/]+)\\/status\\/(\\d+)/', $link->getAttribute( 'href' ) ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// modify date in link to tweet\n\t\t\t$l10n_date = \\wp_date( \\get_option( 'date_format' ), \\strtotime( $link->nodeValue ) );\n\t\t\t\n\t\t\tif ( \\is_string( $l10n_date ) ) {\n\t\t\t\t$link->nodeValue = $l10n_date;\n\t\t\t}\n\t\t\t\n\t\t\t// move link inside meta div\n\t\t\tif ( isset( $parent_node ) && $parent_node instanceof DOMElement ) {\n\t\t\t\t$parent_node->appendChild( $link );\n\t\t\t}\n\t\t}\n\t\t\n\t\t$content = $dom->saveHTML( $dom->documentElement );\n\t\t// phpcs:enable\n\t\t\n\t\treturn \\str_replace( [ '<html><meta charset=\"utf-8\">', '</html>' ], [ '<div class=\"embed-privacy-local-tweet\">', '</div>' ], $content );\n\t}\n\t\n\t/**\n\t * Get en oEmbed title by its title attribute.\n\t * \n\t * @since\t1.6.4\n\t * \n\t * @param\tstring\t$content The content to get the title of\n\t * @return\tarray The dimensions or an empty array\n\t */\n\tprivate function get_oembed_dimensions( $content ) {\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $content . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t\\libxml_use_internal_errors( false );\n\t\t\n\t\tforeach ( [ 'embed', 'iframe', 'img', 'object' ] as $tag ) {\n\t\t\tforeach ( $dom->getElementsByTagName( $tag ) as $element ) {\n\t\t\t\t$height = $element->getAttribute( 'height' );\n\t\t\t\t$width = $element->getAttribute( 'width' );\n\t\t\t\t\n\t\t\t\tif ( $height && $width ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t'height' => $height,\n\t\t\t\t\t\t'width' => $width,\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn [];\n\t}\n\t\n\t/**\n\t * Get en oEmbed title by its title attribute.\n\t * \n\t * @since\t1.4.0\n\t * \n\t * @param\tstring\t$content The content to get the title of\n\t * @return\tstring The title or an empty string\n\t */\n\tprivate function get_oembed_title( $content ) {\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $content . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t\\libxml_use_internal_errors( false );\n\t\t\n\t\tforeach ( [ 'embed', 'iframe', 'object' ] as $tag ) {\n\t\t\tforeach ( $dom->getElementsByTagName( $tag ) as $element ) {\n\t\t\t\t$title = $element->getAttribute( 'title' );\n\t\t\t\t\n\t\t\t\tif ( $title ) {\n\t\t\t\t\treturn $title;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn '';\n\t}\n\t\n\t/**\n\t * Output a complete template of the overlay.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @param\tstring\t$embed_provider The embed provider\n\t * @param\tstring\t$embed_provider_lowercase The embed provider without spaces and in lowercase\n\t * @param\tstring\t$output The output before replacing it\n\t * @param\tarray\t$args Additional arguments\n\t * @return\tstring The overlay template\n\t */\n\tpublic function get_output_template( $embed_provider, $embed_provider_lowercase, $output, $args = [] ) {\n\t\tif ( ! empty( $args['post_id'] ) ) {\n\t\t\t$embed_post = \\get_post( $args['post_id'] );\n\t\t\t\n\t\t\t// if provider is disabled, to nothing\n\t\t\tif ( \\get_post_meta( $embed_post->ID, 'is_disabled', true ) === 'yes' ) {\n\t\t\t\treturn $output;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$embed_post = null;\n\t\t}\n\t\t\n\t\tif ( $embed_provider_lowercase === 'youtube' ) {\n\t\t\t$output = \\str_replace( 'youtube.com', 'youtube-nocookie.com', $output );\n\t\t}\n\t\t\n\t\t$embed_provider_lowercase = \\sanitize_title( $embed_provider_lowercase );\n\t\t$embed_class = 'embed-' . ( ! empty( $embed_provider_lowercase ) ? $embed_provider_lowercase : 'default' );\n\t\t$embed_classes = $embed_class;\n\t\t\n\t\t$background_path = '';\n\t\t$background_url = '';\n\t\t$embed_thumbnail = [\n\t\t\t'thumbnail_path' => '',\n\t\t\t'thumbnail_url' => '',\n\t\t];\n\t\t$logo_path = '';\n\t\t$logo_url = '';\n\t\t\n\t\tif ( ! empty( $args['align'] ) ) {\n\t\t\t$embed_classes .= ' align' . $args['align'];\n\t\t}\n\t\t\n\t\t// display embed provider background image and logo\n\t\tif ( $embed_post ) {\n\t\t\t$background_image_id = \\get_post_meta( $embed_post->ID, 'background_image', true );\n\t\t\t$thumbnail_id = \\get_post_thumbnail_id( $embed_post );\n\t\t}\n\t\telse {\n\t\t\t$background_image_id = null;\n\t\t\t$thumbnail_id = null;\n\t\t}\n\t\t\n\t\tif ( $background_image_id ) {\n\t\t\t$background_path = \\get_attached_file( $background_image_id );\n\t\t\t$background_url = \\wp_get_attachment_url( $background_image_id );\n\t\t}\n\t\t\n\t\tif ( $thumbnail_id ) {\n\t\t\t$logo_path = \\get_attached_file( $thumbnail_id );\n\t\t\t$logo_url = \\get_the_post_thumbnail_url( $args['post_id'] );\n\t\t}\n\t\telse if ( \\file_exists( \\plugin_dir_path( $this->plugin_file ) . 'assets/images/embed-' . $embed_provider_lowercase . '.png' ) ) {\n\t\t\t$logo_path = \\plugin_dir_path( $this->plugin_file ) . 'assets/images/embed-' . $embed_provider_lowercase . '.png';\n\t\t\t$logo_url = \\plugin_dir_url( $this->plugin_file ) . 'assets/images/embed-' . $embed_provider_lowercase . '.png';\n\t\t}\n\t\t\n\t\tif ( ! empty( $args['embed_url'] ) && \\get_option( 'embed_privacy_download_thumbnails' ) ) {\n\t\t\t$embed_thumbnail = Thumbnails::get_instance()->get_data( \\get_post(), $args['embed_url'] );\n\t\t}\n\t\t\n\t\tif ( ! empty( $args['assets'] ) && \\is_array( $args['assets'] ) ) {\n\t\t\t/**\n\t\t\t * Filter the additional assets of an embed provider.\n\t\t\t * \n\t\t\t * @since\t1.4.5\n\t\t\t * \n\t\t\t * @param\tarray\t$assets List of embed assets\n\t\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t\t */\n\t\t\t$args['assets'] = \\apply_filters( \"embed_privacy_assets_$embed_provider_lowercase\", $args['assets'], $embed_provider_lowercase );\n\t\t\t\n\t\t\t$output = $this->print_embed_assets( $args['assets'], $output );\n\t\t}\n\t\t\n\t\t/**\n\t\t * Filter the path to the background image.\n\t\t * \n\t\t * @param\tstring\t$background_path The default background path\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$background_path = \\apply_filters( \"embed_privacy_background_path_$embed_provider_lowercase\", $background_path, $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the URL to the background image.\n\t\t * \n\t\t * @param\tstring\t$background_url The default background URL\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$background_url = \\apply_filters( \"embed_privacy_background_url_$embed_provider_lowercase\", $background_url, $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the path to the thumbnail.\n\t\t * \n\t\t * @param\tstring\t$thumbnail_path The default thumbnail path\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$embed_thumbnail['thumbnail_path'] = \\apply_filters( \"embed_privacy_thumbnail_path_$embed_provider_lowercase\", $embed_thumbnail['thumbnail_path'], $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the URL to the thumbnail.\n\t\t * \n\t\t * @param\tstring\t$thumbnail_url The default thumbnail URL\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$embed_thumbnail['thumbnail_url'] = \\apply_filters( \"embed_privacy_thumbnail_url_$embed_provider_lowercase\", $embed_thumbnail['thumbnail_url'], $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the path to the logo.\n\t\t * \n\t\t * @param\tstring\t$logo_path The default logo path\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$logo_path = \\apply_filters( \"embed_privacy_logo_path_$embed_provider_lowercase\", $logo_path, $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the URL to the logo.\n\t\t * \n\t\t * @param\tstring\t$logo_url The default logo URL\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$logo_url = \\apply_filters( \"embed_privacy_logo_url_$embed_provider_lowercase\", $logo_url, $embed_provider_lowercase );\n\t\t\n\t\t$embed_md5 = \\md5( $output . \\wp_generate_uuid4() );\n\t\t\n\t\t\\ob_start();\n\t\t?>\n\t\t<p>\n\t\t<?php\n\t\t\tif ( ! empty( $embed_provider ) ) {\n\t\t\t\tif ( $embed_post ) {\n\t\t\t\t\t$allowed_tags = [\n\t\t\t\t\t\t'a' => [\n\t\t\t\t\t\t\t'href',\n\t\t\t\t\t\t\t'target',\n\t\t\t\t\t\t],\n\t\t\t\t\t];\n\t\t\t\t\techo $embed_post->post_content . \\PHP_EOL; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped\n\t\t\t\t\t$privacy_policy = \\get_post_meta( $embed_post->ID, 'privacy_policy_url', true );\n\t\t\t\t\t\n\t\t\t\t\tif ( $privacy_policy ) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t/* translators: 1: the embed provider, 2: opening <a> tag to the privacy policy, 3: closing </a> */\n\t\t\t\t\t\t\\printf( \\wp_kses( \\__( 'Learn more in %1$s\u2019s %2$sprivacy policy%3$s.', 'embed-privacy' ), $allowed_tags ), \\esc_html( $embed_provider ), '<a href=\"' . \\esc_url( $privacy_policy ) . '\" target=\"_blank\">', '</a>' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t/* translators: the embed provider */\n\t\t\t\t\t\\printf( \\esc_html__( 'Click here to display content from %s', 'embed-privacy' ), \\esc_html( $embed_provider ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\\esc_html_e( 'Click here to display content from an external service.', 'embed-privacy' );\n\t\t\t}\n\t\t?>\n\t\t</p>\n\t\t<?php\n\t\t$checkbox_id = 'embed-privacy-store-' . $embed_provider_lowercase . '-' . $embed_md5;\n\t\t\n\t\tif ( $embed_provider_lowercase !== 'default' ) {\n\t\t\t?>\n\t\t\t<p class=\"embed-privacy-input-wrapper\">\n\t\t\t\t<input id=\"<?php echo \\esc_attr( $checkbox_id ); ?>\" type=\"checkbox\" value=\"1\" class=\"embed-privacy-input\" data-embed-provider=\"<?php echo \\esc_attr( $embed_provider_lowercase ); ?>\">\n\t\t\t\t<label for=\"<?php echo \\esc_attr( $checkbox_id ); ?>\" class=\"embed-privacy-label\" data-embed-provider=\"<?php echo \\esc_attr( $embed_provider_lowercase ); ?>\">\n\t\t\t\t\t<?php\n\t\t\t\t\t/* translators: the embed provider */\n\t\t\t\t\t\\printf( \\esc_html__( 'Always display content from %s', 'embed-privacy' ), \\esc_html( $embed_provider ) );\n\t\t\t\t\t?>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<?php\n\t\t}\n\t\t\n\t\t$content = \\ob_get_clean();\n\t\t\n\t\t/**\n\t\t * Filter the content of the embed overlay.\n\t\t * \n\t\t * @param\tstring\t\t$content The content\n\t\t * @param\tstring\t\t$embed_provider The embed provider of this embed\n\t\t */\n\t\t$content = \\apply_filters( 'embed_privacy_content', $content, $embed_provider );\n\t\t\n\t\t\\ob_start();\n\t\t\n\t\t$footer_content = '';\n\t\t\n\t\tif ( ! empty( $args['embed_url'] ) ) {\n\t\t\t$footer_content = '<div class=\"embed-privacy-footer\">';\n\t\t\t\n\t\t\tif ( ! \\get_option( 'embed_privacy_disable_link' ) ) {\n\t\t\t\t$footer_content .= '<span class=\"embed-privacy-url\"><a href=\"' . \\esc_url( $args['embed_url'] ) . '\">';\n\t\t\t\t$footer_content .= \\sprintf(\n\t\t\t\t/* translators: content name or 'content' */\n\t\t\t\t\t\\esc_html__( 'Open %s directly', 'embed-privacy' ),\n\t\t\t\t\t! empty( $args['embed_title'] ) ? $args['embed_title'] : \\__( 'content', 'embed-privacy' )\n\t\t\t\t);\n\t\t\t\t$footer_content .= '</a></span>';\n\t\t\t}\n\t\t\t\n\t\t\t$footer_content .= '</div>' . \\PHP_EOL;\n\t\t\t\n\t\t\t/**\n\t\t\t * Filter the overlay footer.\n\t\t\t * \n\t\t\t * @param\tstring\t$footer_content The footer content\n\t\t\t */\n\t\t\t$footer_content = \\apply_filters( 'embed_privacy_overlay_footer', $footer_content );\n\t\t}\n\t\t?>\n\t\t<div class=\"embed-privacy-container is-disabled <?php echo \\esc_attr( $embed_classes ); ?>\" data-embed-id=\"oembed_<?php echo \\esc_attr( $embed_md5 ); ?>\" data-embed-provider=\"<?php echo \\esc_attr( $embed_provider_lowercase ); ?>\"<?php echo ( ! empty( $embed_thumbnail['thumbnail_path'] ) && \\file_exists( $embed_thumbnail['thumbnail_path'] ) ? ' style=\"background-image: url(' . \\esc_url( $embed_thumbnail['thumbnail_url'] ) . ');\"' : '' ); ?>>\n\t\t\t<?php /* translators: embed provider */ ?>\n\t\t\t<button class=\"embed-privacy-enable screen-reader-text\"><?php \\printf( \\esc_html__( 'Display content from %s', 'embed-privacy' ), \\esc_html( $embed_provider ) ); ?></button>\n\t\t\t\n\t\t\t<div class=\"embed-privacy-overlay\">\n\t\t\t\t<div class=\"embed-privacy-inner\">\n\t\t\t\t\t<?php\n\t\t\t\t\techo ( \\file_exists( $logo_path ) ? '<div class=\"embed-privacy-logo\"></div>' . \\PHP_EOL : '' );\n\t\t\t\t\techo $content . \\PHP_EOL; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped\n\t\t\t\t\t?>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<?php echo $footer_content; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div class=\"embed-privacy-content\">\n\t\t\t\t<script>var _oembed_<?php echo $embed_md5; ?> = '<?php echo \\addslashes( \\wp_json_encode( [ 'embed' => \\htmlentities( \\preg_replace( '/\\s+/S', ' ', $output ) ) ] ) ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>';</script>\n\t\t\t</div>\n\t\t\t\n\t\t\t<style>\n\t\t\t\t<?php\n\t\t\t\tif ( ! empty( $args['height'] ) && ! empty( $args['width'] ) && empty( $args['ignore_aspect_ratio'] ) ) {\n\t\t\t\t\t// if height is in percentage, we cannot determine the aspect ratio\n\t\t\t\t\tif ( \\strpos( $args['height'], '%' ) !== false ) {\n\t\t\t\t\t\t$args['ignore_aspect_ratio'] = true;\n\t\t\t\t\t}\n\t\t\t\t\t// if width is in percentage, we need to use the content width\n\t\t\t\t\t// since we cannot determine the actual width\n\t\t\t\t\tif ( \\strpos( $args['width'], '%' ) !== false ) {\n\t\t\t\t\t\tglobal $content_width;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$args['width'] = $content_width;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\\printf(\n\t\t\t\t\t\t'[data-embed-id=\"oembed_%1$s\"] {\n\t\t\t\t\t\t\taspect-ratio: %2$s;\n\t\t\t\t\t\t}',\n\t\t\t\t\t\t\\esc_attr( $embed_md5 ),\n\t\t\t\t\t\t\\esc_html( $args['width'] . '/' . $args['height'] )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$is_debug = \\defined( 'WP_DEBUG' ) && WP_DEBUG;\n\t\t\t\t\n\t\t\t\t// display only if file exists\n\t\t\t\tif ( \\file_exists( $background_path ) ) {\n\t\t\t\t\t$version = $is_debug ? \\filemtime( $background_path ) : EMBED_PRIVACY_VERSION;\n\t\t\t\t\t\n\t\t\t\t\t\\printf(\n\t\t\t\t\t\t'.%1$s {\n\t\t\t\t\t\t\tbackground-image: url(%2$s?v=%3$s);\n\t\t\t\t\t\t}',\n\t\t\t\t\t\t\\esc_html( $embed_class ),\n\t\t\t\t\t\t\\esc_url( $background_url ),\n\t\t\t\t\t\t\\esc_html( $version )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// display only if file exists\n\t\t\t\tif ( \\file_exists( $logo_path ) ) {\n\t\t\t\t\t$version = $is_debug ? \\filemtime( $logo_path ) : EMBED_PRIVACY_VERSION;\n\t\t\t\t\t\n\t\t\t\t\t\\printf(\n\t\t\t\t\t\t'.%1$s {\n\t\t\t\t\t\t\tbackground-image: url(%2$s?v=%3$s);\n\t\t\t\t\t\t}',\n\t\t\t\t\t\t\\esc_html( $embed_class . ' .embed-privacy-logo' ),\n\t\t\t\t\t\t\\esc_url( $logo_url ),\n\t\t\t\t\t\t\\esc_html( $version )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</style>\n\t\t</div>\n\t\t<?php\n\t\t$markup = \\ob_get_clean();\n\t\t\n\t\t/**\n\t\t * Filter the complete markup of the embed.\n\t\t * \n\t\t * @param\tstring\t$markup The markup\n\t\t * @param\tstring\t$embed_provider The embed provider of this embed\n\t\t */\n\t\t$markup = \\apply_filters( 'embed_privacy_markup', $markup, $embed_provider );\n\t\t\n\t\t$this->has_embed = true;\n\t\t\n\t\tif ( ! empty( $args['strip_newlines'] ) ) {\n\t\t\t$markup = \\str_replace( \\PHP_EOL, '', $markup );\n\t\t}\n\t\t\n\t\treturn $markup;\n\t}\n\t\n\t/**\n\t * Get a single overlay for all matching embeds.\n\t * \n\t * @since\t1.2.0\n\t * \n\t * @param\tstring\t$content The original content\n\t * @param\tstring\t$embed_provider The embed provider\n\t * @param\tstring\t$embed_provider_lowercase The embed provider without spaces and in lowercase\n\t * @param\tarray\t$args Additional arguments\n\t * @return\tstring The updated content\n\t */\n\tpublic function get_single_overlay( $content, $embed_provider, $embed_provider_lowercase, $args ) {\n\t\tif ( empty( $content ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t$args = \\wp_parse_args( $args, [\n\t\t\t'additional_checks' => [],\n\t\t\t'check_always_active' => false,\n\t\t\t'element_attribute' => 'src',\n\t\t\t'elements' => [ 'embed', 'iframe', 'object' ],\n\t\t\t'height' => 0,\n\t\t\t'ignore_aspect_ratio' => false,\n\t\t\t'regex' => '',\n\t\t\t'strip_newlines' => ! \\has_blocks( $content ),\n\t\t\t'width' => 0,\n\t\t] );\n\t\t\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . \\str_replace( '%', '%_epi_', $content ) . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t$is_empty_provider = empty( $embed_provider );\n\t\t$template_dom = new DOMDocument();\n\t\t\n\t\tif ( $is_empty_provider ) {\n\t\t\t$providers = $this->get_embeds();\n\t\t}\n\t\t\n\t\t// detect domain if WordPress is installed on a sub domain\n\t\t$host = \\wp_parse_url( \\home_url(), \\PHP_URL_HOST );\n\t\t\n\t\tif ( ! \\filter_var( $host, \\FILTER_VALIDATE_IP ) ) {\n\t\t\t$host_array = \\explode( '.', \\str_replace( 'www.', '', $host ) );\n\t\t\t$tld_count = \\count( $host_array );\n\t\t\t\n\t\t\tif ( $tld_count >= 3 && strlen( $host_array[ $tld_count - 2 ] ) === 2 ) {\n\t\t\t\t$host = \\implode( '.', \\array_splice( $host_array, $tld_count - 3, 3 ) );\n\t\t\t}\n\t\t\telse if ( $tld_count >= 2 ) {\n\t\t\t\t$host = \\implode( '.', \\array_splice( $host_array, $tld_count - 2, $tld_count ) );\n\t\t\t}\n\t\t}\n\t\t\n\t\tforeach ( $args['elements'] as $tag ) {\n\t\t\t$replacements = [];\n\t\t\t\n\t\t\tif ( $tag === 'object' ) {\n\t\t\t\t$args['element_attribute'] = 'data';\n\t\t\t}\n\t\t\t\n\t\t\tforeach ( $dom->getElementsByTagName( $tag ) as $element ) {\n\t\t\t\tif ( ! $this->run_checks( $args['additional_checks'], $element ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// ignore embeds from the same (sub-)domain\n\t\t\t\tif ( \\preg_match( '/https?:\\/\\/(.*\\.)?' . \\preg_quote( $host, '/' ) . '/', $element->getAttribute( $args['element_attribute'] ) ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( ! empty( $args['regex'] ) && ! \\preg_match( $args['regex'], $element->getAttribute( $args['element_attribute'] ) ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// providers need to be explicitly checked if they're always active\n\t\t\t\t// see https://github.com/epiphyt/embed-privacy/issues/115\n\t\t\t\tif ( $embed_provider_lowercase && $args['check_always_active'] && $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\t\t\tif ( ! empty( $args['assets'] ) ) {\n\t\t\t\t\t\t$content = $this->print_embed_assets( $args['assets'], $content );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn $content;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( $is_empty_provider ) {\n\t\t\t\t\t$embedded_host = \\wp_parse_url( $element->getAttribute( $args['element_attribute'] ), \\PHP_URL_HOST );\n\t\t\t\t\t\n\t\t\t\t\t// embeds with relative paths have no host\n\t\t\t\t\t// and they are local by definition, so do nothing\n\t\t\t\t\t// see https://github.com/epiphyt/embed-privacy/issues/27\n\t\t\t\t\tif ( empty( $embedded_host ) ) {\n\t\t\t\t\t\treturn $content;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$embed_provider = $embedded_host;\n\t\t\t\t\t$embed_provider_lowercase = \\sanitize_title( $embedded_host );\n\t\t\t\t\t\n\t\t\t\t\t// unknown providers need to be explicitly checked if they're always active\n\t\t\t\t\t// see https://github.com/epiphyt/embed-privacy/issues/115\n\t\t\t\t\tif ( $args['check_always_active'] && $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\t\t\t\tif ( ! empty( $args['assets'] ) ) {\n\t\t\t\t\t\t\t$content = $this->print_embed_assets( $args['assets'], $content );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn $content;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// check URL for available provider\n\t\t\t\t\tforeach ( $providers as $provider ) {\n\t\t\t\t\t\t$regex = \\trim( \\get_post_meta( $provider->ID, 'regex_default', true ), '/' );\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ( ! empty( $regex ) ) {\n\t\t\t\t\t\t\t$regex = '/' . $regex . '/';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ( \\preg_match( $regex, $element->getAttribute( $args['element_attribute'] ) ) && empty( $replacements ) ) {\n\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/* translators: embed title */\n\t\t\t\t$args['embed_title'] = ! empty( $element->getAttribute( 'title' ) ) ? \\sprintf( \\__( '\"%s\"', 'embed-privacy' ), $element->getAttribute( 'title' ) ) : '';\n\t\t\t\t$args['embed_url'] = $element->getAttribute( $args['element_attribute'] );\n\t\t\t\t$args['height'] = ! empty( $element->getAttribute( 'height' ) ) ? $element->getAttribute( 'height' ) : 0;\n\t\t\t\t$args['width'] = ! empty( $element->getAttribute( 'width' ) ) ? $element->getAttribute( 'width' ) : 0;\n\t\t\t\t\n\t\t\t\t// get overlay template as DOM element\n\t\t\t\t$template_dom->loadHTML(\n\t\t\t\t\t'<html><meta charset=\"utf-8\">' . str_replace( '%', '%_epi_', $this->get_output_template( $embed_provider, $embed_provider_lowercase, $dom->saveHTML( $element ), $args ) ) . '</html>',\n\t\t\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t\t\t);\n\t\t\t\t$overlay = null;\n\t\t\t\t\n\t\t\t\tforeach ( $template_dom->getElementsByTagName( 'div' ) as $div ) {\n\t\t\t\t\tif ( stripos( $div->getAttribute( 'class' ), 'embed-privacy-container' ) !== false ) {\n\t\t\t\t\t\t$overlay = $div;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// store the elements to replace (see regressive loop down below)\n\t\t\t\tif ( $overlay instanceof DOMNode || $overlay instanceof DOMElement ) {\n\t\t\t\t\t$replacements[] = [\n\t\t\t\t\t\t'element' => $element,\n\t\t\t\t\t\t'replace' => $dom->importNode( $overlay, true ),\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// reset embed provider name\n\t\t\t\tif ( $is_empty_provider ) {\n\t\t\t\t\t$embed_provider = '';\n\t\t\t\t\t$embed_provider_lowercase = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ( ! empty( $replacements ) ) {\n\t\t\t\t$this->did_replacements = \\array_merge( $this->did_replacements, $replacements );\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$elements = $dom->getElementsByTagName( $tag );\n\t\t\t\t$i = $elements->length - 1;\n\t\t\t\t\n\t\t\t\t// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase\n\t\t\t\t// use regressive loop for replaceChild()\n\t\t\t\t// see: https://www.php.net/manual/en/domnode.replacechild.php#50500\n\t\t\t\twhile ( $i > -1 ) {\n\t\t\t\t\t$element = $elements->item( $i );\n\t\t\t\t\t\n\t\t\t\t\tforeach ( $replacements as $replacement ) {\n\t\t\t\t\t\tif ( $replacement['element'] === $element ) {\n\t\t\t\t\t\t\t$element->parentNode->replaceChild( $replacement['replace'], $replacement['element'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$i--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$content = \\str_replace( '%_epi_', '%', $dom->saveHTML( $dom->documentElement ) );\n\t\t\t\t// phpcs:enable\n\t\t\t}\n\t\t}\n\t\t\n\t\t\\libxml_use_internal_errors( false );\n\t\t\n\t\t// embeds for other elements need to be handled manually\n\t\t// make sure to test before if the regex matches\n\t\t// see: https://github.com/epiphyt/embed-privacy/issues/26\n\t\tif (\n\t\t\tempty( $this->did_replacements )\n\t\t\t&& ! empty( $args['regex'] )\n\t\t\t&& ! $is_empty_provider\n\t\t) {\n\t\t\t$provider = $this->get_embed_by_name( $embed_provider_lowercase );\n\t\t\t\n\t\t\tif (\n\t\t\t\t$provider instanceof WP_Post\n\t\t\t\t&& ! \\get_post_meta( $provider->ID, 'is_system', true )\n\t\t\t\t&& \\get_post_meta( $provider->ID, 'is_disabled', true ) !== 'yes'\n\t\t\t) {\n\t\t\t\t// extend regular expression to match the full element\n\t\t\t\tif ( \\strpos( $args['regex'], '<' ) === false || \\strpos( $args['regex'], '>' ) === false ) {\n\t\t\t\t\t$allowed_tags = [\n\t\t\t\t\t\t'blockquote',\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t'embed',\n\t\t\t\t\t\t'iframe',\n\t\t\t\t\t\t'object',\n\t\t\t\t\t];\n\t\t\t\t\t\n\t\t\t\t\t/**\n\t\t\t\t\t * Filter allowed HTML tags in regular expressions.\n\t\t\t\t\t * Only elements matching these tags get processed.\n\t\t\t\t\t * \n\t\t\t\t\t * @since\t1.6.0\n\t\t\t\t\t * \n\t\t\t\t\t * @param\tstring[]\t$allowed_tags The allowed tags\n\t\t\t\t\t * @param\tstring\t\t$embed_provider_lowercase The embed provider without spaces and in lowercase\n\t\t\t\t\t * @return\tarray A list of allowed tags\n\t\t\t\t\t */\n\t\t\t\t\t$allowed_tags = \\apply_filters( 'embed_privacy_matcher_elements', $allowed_tags, $embed_provider_lowercase );\n\t\t\t\t\t\n\t\t\t\t\t$tags_regex = '(' . \\implode( '|', \\array_filter( $allowed_tags, function( $tag ) {\n\t\t\t\t\t\treturn \\preg_quote( $tag, '/' );\n\t\t\t\t\t} ) ) . ')';\n\t\t\t\t\t$args['regex'] = '/<' . $tags_regex . '([^\"]*)\"([^<]*)' . \\trim( $args['regex'], '/' ) . '([^\"]*)\"([^>]*)(>(.*)<\\/' . $tags_regex . ')?>/';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile ( \\preg_match( $args['regex'], $content, $matches ) ) {\n\t\t\t\t\t$content = \\preg_replace( $args['regex'], $this->get_output_template( $embed_provider, $embed_provider_lowercase, $matches[0], $args ), $content, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// decode to make sure there is nothing left encoded if replacements have been made\n\t\t// otherwise, content is untouched by DOMDocument, and we don't need a decoding\n\t\tif ( ! empty( $this->did_replacements ) ) {\n\t\t\t$content = \\rawurldecode( $content );\n\t\t}\n\t\t\n\t\t// remove root element, see https://github.com/epiphyt/embed-privacy/issues/22\n\t\treturn \\str_replace(\n\t\t\t[\n\t\t\t\t'<html><meta charset=\"utf-8\">',\n\t\t\t\t'</html>',\n\t\t\t\t'%_epi_',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'',\n\t\t\t\t'%',\n\t\t\t],\n\t\t\t$content\n\t\t);\n\t}\n\t\n\t/**\n\t * Check if a post contains an embed.\n\t * \n\t * @since\t1.3.0\n\t * \n\t * @param\t\\WP_Post|int|null\t$post A post object, post ID or null\n\t * @return\tbool True if a post contains an embed, false otherwise\n\t */\n\tpublic function has_embed( $post = null ) {\n\t\tif ( $post === null ) {\n\t\t\tglobal $post;\n\t\t}\n\t\t\n\t\tif ( \\is_numeric( $post ) ) {\n\t\t\t$post = \\get_post( $post ); // phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited\n\t\t}\n\t\t\n\t\t/**\n\t\t * Allow overwriting the return value of has_embed().\n\t\t * If set to anything other than null, this value will be returned.\n\t\t * \n\t\t * @param\tnull\t$has_embed The default value\n\t\t */\n\t\t$has_embed = \\apply_filters( 'embed_privacy_has_embed', null );\n\t\t\n\t\tif ( $has_embed !== null ) {\n\t\t\treturn $has_embed;\n\t\t}\n\t\t\n\t\tif ( ! $post instanceof WP_Post ) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif ( $this->has_embed ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t$embed_providers = $this->get_embeds();\n\t\t\n\t\t// check post content\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t$regex = \\trim( \\get_post_meta( $provider->ID, 'regex_default', true ), '/' );\n\t\t\t\n\t\t\tif ( empty( $regex ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// get overlay for this provider\n\t\t\tif ( \\preg_match( '/' . $regex . '/', $post->post_content ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Determine whether this is an AMP response.\n\t * Note that this must only be called after the parse_query action.\n\t * \n\t * @return\tbool True if the current page is an AMP page, false otherwise\n\t */\n\tprivate function is_amp() {\n\t\t/** @noinspection PhpUndefinedFunctionInspection */\n\t\treturn \\function_exists( 'is_amp_endpoint' ) && \\is_amp_endpoint();\n\t}\n\t\n\t/**\n\t * Check if a provider is always active.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @param\tstring\t\t$provider The embed provider in lowercase\n\t * @return\tbool True if provider is always active, false otherwise\n\t */\n\tpublic function is_always_active_provider( $provider ) {\n\t\t$javascript_detection = \\get_option( 'embed_privacy_javascript_detection' );\n\t\t\n\t\tif ( $javascript_detection ) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$cookie = $this->get_cookie();\n\t\t\n\t\tif ( isset( $cookie->{$provider} ) && $cookie->{$provider} === true ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Check if a post is written in Elementor.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @return\tbool True if Elementor is used, false otherwise\n\t */\n\tpublic function is_elementor() {\n\t\tif ( ! function_exists( 'is_plugin_active' ) ) {\n\t\t\tinclude_once ABSPATH . 'wp-admin/includes/plugin.php';\n\t\t}\n\t\t\n\t\tif (\n\t\t\t! \\is_plugin_active( 'elementor/elementor.php' )\n\t\t\t|| ! \\get_the_ID()\n\t\t\t|| ! Plugin::$instance->documents->get( \\get_the_ID() )->is_built_with_elementor()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Check if the current theme is matching your name.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\tstring\t$name The theme name to test\n\t * @return\tbool True if the current theme is matching, false otherwise\n\t */\n\tpublic function is_theme( $name ) {\n\t\t$name = \\strtolower( $name );\n\t\t\n\t\tif ( \\strtolower( \\wp_get_theme()->get( 'Name' ) ) === $name || \\strtolower( \\wp_get_theme()->get( 'Template' ) ) === $name ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Load the translation files.\n\t */\n\tpublic function load_textdomain() {\n\t\t\\load_plugin_textdomain( 'embed-privacy', false, \\dirname( \\plugin_basename( $this->plugin_file ) ) . '/languages' );\n\t}\n\t\n\t/**\n\t * Preserve backslashes in regex field.\n\t * \n\t * @since\t1.4.0\n\t */\n\tpublic function preserve_backslashes() {\n\t\t// phpcs:disable WordPress.Security.NonceVerification.Missing\n\t\tif ( ! isset( $_POST['regex_default'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$_POST['regex_default'] = \\wp_slash( $_POST['regex_default'] ); // phpcs:ignore WordPress.Security.ValidatedSanitizedInput.MissingUnslash,WordPress.Security.ValidatedSanitizedInput.InputNotSanitized\n\t\t// phpcs:enable\n\t}\n\t\n\t/**\n\t * Handle printing assets.\n\t * \n\t * @since\t1.3.0\n\t */\n\tpublic function print_assets() {\n\t\tif ( $this->is_printed ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\\wp_enqueue_script( 'embed-privacy' );\n\t\t\\wp_enqueue_style( 'embed-privacy' );\n\t\t\\wp_localize_script( 'embed-privacy', 'embedPrivacy', [\n\t\t\t'alwaysActiveProviders' => \\array_keys( (array) $this->get_cookie() ), // deprecated\n\t\t\t'javascriptDetection' => \\get_option( 'embed_privacy_javascript_detection' ),\n\t\t] );\n\t\t\n\t\tif ( $this->is_theme( 'Astra' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-astra' );\n\t\t}\n\t\t\n\t\tif ( $this->is_theme( 'Divi' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-divi' );\n\t\t}\n\t\t\n\t\tif ( $this->is_elementor() ) {\n\t\t\t\\wp_enqueue_script( 'embed-privacy-elementor-video' );\n\t\t\t\\wp_enqueue_style( 'embed-privacy-elementor' );\n\t\t}\n\t\t\n\t\tif ( ! \\function_exists( 'is_plugin_active' ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/plugin.php';\n\t\t}\n\t\t\n\t\tif ( \\is_plugin_active( 'kadence-blocks/kadence-blocks.php' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-kadence-blocks' );\n\t\t}\n\t\t\n\t\tif ( \\is_plugin_active( 'shortcodes-ultimate/shortcodes-ultimate.php' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-shortcodes-ultimate' );\n\t\t}\n\t\t\n\t\t$this->is_printed = true;\n\t}\n\t\n\t/**\n\t * Print assets of an embed before the content.\n\t * \n\t * @since\t1.4.5\n\t * \n\t * @param\tarray\t$assets List of assets\n\t * @param\tstring\t$output The output\n\t * @return\tstring The updated output\n\t */\n\tprivate function print_embed_assets( $assets, $output ) {\n\t\tif ( empty( $assets ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tforeach ( array_reverse( $assets ) as $asset ) {\n\t\t\tif ( empty( $asset['type'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif ( $asset['type'] === 'script' ) {\n\t\t\t\tif ( empty( $asset['handle'] ) || empty( $asset['src'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$output = '<script src=\"' . \\esc_url( $asset['src'] ) . ( ! empty( $asset['version'] ) ? '?ver=' . \\esc_attr( \\rawurlencode( $asset['version'] ) ) : '' ) . '\" id=\"' . \\esc_attr( $asset['handle'] ) . '\"></script>' . \\PHP_EOL . $output; // phpcs:ignore WordPress.WP.EnqueuedResources.NonEnqueuedScript\n\t\t\t}\n\t\t\telse if ( $asset['type'] === 'inline' ) {\n\t\t\t\tif ( empty( $asset['data'] ) || empty( $asset['object_name'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( \\is_string( $asset['data'] ) ) {\n\t\t\t\t\t$data = \\html_entity_decode( $asset['data'], \\ENT_QUOTES, 'UTF-8' );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tforeach ( (array) $asset['data'] as $key => $value ) {\n\t\t\t\t\t\tif ( ! \\is_scalar( $value ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$data[ $key ] = \\html_entity_decode( (string) $value, \\ENT_QUOTES, 'UTF-8' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$output = '<script>var ' . esc_js( $asset['object_name'] ) . ' = ' . \\wp_json_encode( $data ) . ';</script>' . \\PHP_EOL . $output;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $output;\n\t}\n\t\n\t/**\n\t * Register our assets for the frontend.\n\t * \n\t * @since\t1.4.4\n\t */\n\tpublic function register_assets() {\n\t\tif ( \\is_admin() || \\wp_doing_ajax() || \\wp_doing_cron() ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$is_debug = \\defined( 'WP_DEBUG' ) && WP_DEBUG;\n\t\t$suffix = ( $is_debug ? '' : '.min' );\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/embed-privacy' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/embed-privacy' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy', $css_file_url, [], $file_version );\n\t\t\n\t\tif ( ! $this->is_amp() ) {\n\t\t\t$js_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/js/embed-privacy' . $suffix . '.js';\n\t\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/js/embed-privacy' . $suffix . '.js' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\t\n\t\t\t\\wp_register_script( 'embed-privacy', $js_file_url, [], $file_version );\n\t\t}\n\t\t\n\t\t// Astra is too greedy at its CSS selectors\n\t\t// see https://github.com/epiphyt/embed-privacy/issues/33\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/astra' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/astra' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-astra', $css_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/divi' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/divi' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-divi', $css_file_url, [], $file_version );\n\t\t\n\t\t$js_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/js/elementor-video' . $suffix . '.js';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/js/elementor-video' . $suffix . '.js' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_script( 'embed-privacy-elementor-video', $js_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/elementor' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/elementor' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-elementor', $css_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/kadence-blocks' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/kadence-blocks' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-kadence-blocks', $css_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/shortcodes-ultimate' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/shortcodes-ultimate' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-shortcodes-ultimate', $css_file_url, [], $file_version );\n\t\t\n\t\t$current_url = \\sprintf(\n\t\t\t'http%1$s://%2$s%3$s',\n\t\t\t\\is_ssl() ? 's' : '',\n\t\t\t! empty( $_SERVER['HTTP_HOST'] ) ? \\sanitize_text_field( \\wp_unslash( $_SERVER['HTTP_HOST'] ) ) : '',\n\t\t\t! empty( $_SERVER['REQUEST_URI'] ) ? \\sanitize_text_field( \\wp_unslash( $_SERVER['REQUEST_URI'] ) ) : ''\n\t\t);\n\t\t\n\t\tif ( empty( $_SERVER['HTTP_HOST'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$post_id = \\url_to_postid( $current_url );\n\t\t\n\t\tif ( $post_id ) {\n\t\t\t$post = \\get_post( $post_id );\n\t\t\n\t\t\tif ( $post instanceof WP_Post && \\has_shortcode( $post->post_content, 'embed_privacy_opt_out' ) ) {\n\t\t\t\t$this->print_assets();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Register post type in Polylang to allow translation.\n\t * \n\t * @since\t1.5.0\n\t * \n\t * @param\tarray\t$post_types List of current translatable custom post types\n\t * @param\tbool\t$is_settings Whether the current page is the settings page\n\t * @return\tarray Updated list of translatable custom post types\n\t */\n\tpublic function register_polylang_post_type( array $post_types, $is_settings ) {\n\t\tif ( $is_settings ) {\n\t\t\tunset( $post_types['epi_embed'] );\n\t\t}\n\t\telse {\n\t\t\t$post_types['epi_embed'] = 'epi_embed';\n\t\t}\n\t\t\n\t\treturn $post_types;\n\t}\n\t\n\t/**\n\t * Replace embeds with a container and hide the embed with an HTML comment.\n\t * \n\t * @since\t1.2.0 Changed behavior of the method\n\t * @since\t1.6.0 Added optional $tag parameter\n\t * \n\t * @param\tstring\t$content The original content\n\t * @param\tstring\t$tag The shortcode tag if called via do_shortcode\n\t * @return\tstring The updated content\n\t */\n\tpublic function replace_embeds( $content, $tag = '' ) {\n\t\t// do nothing in admin\n\t\tif ( ! $this->usecache ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t// do nothing for ignored shortcodes\n\t\tif ( ! empty( $tag ) && \\in_array( $tag, $this->get_ignored_shortcodes(), true ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t// check content for already available embeds\n\t\tif ( ! $this->has_embed && \\strpos( $content, '<div class=\"embed-privacy-overlay\">' ) !== false ) {\n\t\t\t$this->has_embed = true;\n\t\t}\n\t\t\n\t\t// get all embed providers\n\t\t$embed_providers = $this->get_embeds();\n\t\t\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t$content = $this->get_embed_overlay( $provider, $content );\n\t\t}\n\t\t\n\t\t// Elementor video providers need special treatment\n\t\tif ( $this->is_elementor() ) {\n\t\t\t$embed_providers = [\n\t\t\t\t$this->get_embed_by_name( 'dailymotion' ),\n\t\t\t\t$this->get_embed_by_name( 'vimeo' ),\n\t\t\t];\n\t\t\t\n\t\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t\t$content = $this->get_embed_overlay( $provider, $content );\n\t\t\t}\n\t\t\t\n\t\t\tif ( strpos( $content, 'youtube.com\\/watch' ) !== false ) {\n\t\t\t\t$content = $this->get_elementor_youtube_overlay( $content );\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * If set to true, unknown providers are not handled via Embed Privacy.\n\t\t * \n\t\t * @since\t1.5.0\n\t\t * \n\t\t * @param\tbool\t$ignore_unknown Whether unknown providers should be ignored\n\t\t * @param\tstring\t$content The original content\n\t\t */\n\t\t$ignore_unknown_providers = \\apply_filters( 'embed_privacy_ignore_unknown_providers', false, $content );\n\t\t\n\t\t// get default external content\n\t\t// special case for youtube-nocookie.com as it is part of YouTube provider\n\t\t// and gets rewritten in Divi\n\t\t// see: https://github.com/epiphyt/embed-privacy/issues/69\n\t\tif (\n\t\t\t! $ignore_unknown_providers\n\t\t\t&& (\n\t\t\t\t\\strpos( $content, 'youtube-nocookie.com' ) === false\n\t\t\t\t|| ! $this->is_always_active_provider( 'youtube' )\n\t\t\t)\n\t\t) {\n\t\t\t$new_content = $this->get_single_overlay( $content, '', '', [ 'check_always_active' => true ] );\n\t\t\t\n\t\t\tif ( $new_content !== $content ) {\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$content = $new_content;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( \\strpos( $content, 'class=\"fb-post\"' ) !== false ) {\n\t\t\t$provider = $this->get_embed_by_name( 'facebook' );\n\t\t\t$args = [\n\t\t\t\t'additional_checks' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'attribute' => 'class',\n\t\t\t\t\t\t'compare' => '===',\n\t\t\t\t\t\t'type' => 'attribute',\n\t\t\t\t\t\t'value' => 'fb-post',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'assets' => [],\n\t\t\t\t'check_always_active' => true,\n\t\t\t\t'element_attribute' => 'data-href',\n\t\t\t\t'elements' => [\n\t\t\t\t\t'div',\n\t\t\t\t],\n\t\t\t];\n\t\t\t\n\t\t\t// register jetpack script if available\n\t\t\tif ( \\class_exists( '\\Automattic\\Jetpack\\Assets' ) && \\defined( 'JETPACK__VERSION' ) ) {\n\t\t\t\t$jetpack = Jetpack::init();\n\t\t\t\t\n\t\t\t\t$args['assets'][] = [\n\t\t\t\t\t'type' => 'inline',\n\t\t\t\t\t'object_name' => 'jpfbembed',\n\t\t\t\t\t'data' => [\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Filter the Jetpack sharing Facebook app ID.\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * @since\t1.4.5\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * @param\tstring\t$app_id The current app ID\n\t\t\t\t\t\t */\n\t\t\t\t\t\t'appid' => \\apply_filters( 'jetpack_sharing_facebook_app_id', '249643311490' ),\n\t\t\t\t\t\t'locale' => $jetpack->get_locale(),\n\t\t\t\t\t],\n\t\t\t\t];\n\t\t\t\t$args['assets'][] = [\n\t\t\t\t\t'type' => 'script',\n\t\t\t\t\t'handle' => 'jetpack-facebook-embed',\n\t\t\t\t\t'src' => Assets::get_file_url_for_environment( '_inc/build/facebook-embed.min.js', '_inc/facebook-embed.js' ),\n\t\t\t\t\t'version' => \\JETPACK__VERSION,\n\t\t\t\t];\n\t\t\t}\n\t\t\t\n\t\t\t$new_content = $this->get_single_overlay( $content, $provider->post_title, $provider->post_name, $args );\n\t\t\t\n\t\t\tif ( $new_content !== $content ) {\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$content = $new_content;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( $this->has_embed ) {\n\t\t\t$this->print_assets();\n\t\t}\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Replace oembed embeds with a container and hide the embed with an HTML comment.\n\t * \n\t * @since\t1.2.0\n\t * \n\t * @param\tstring\t$output The original output\n\t * @param\tstring\t$url The URL to the embed\n\t * @param\tarray\t$args Additional arguments of the embed\n\t * @return\tstring The updated embed code\n\t */\n\tpublic function replace_embeds_oembed( $output, $url, $args ) {\n\t\t// do nothing in admin\n\t\tif ( ! $this->usecache ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t// ignore embeds without host (ie. relative URLs)\n\t\tif ( empty( \\wp_parse_url( $url, \\PHP_URL_HOST ) ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t// check the current host\n\t\t// see: https://github.com/epiphyt/embed-privacy/issues/24\n\t\tif ( \\strpos( $url, \\wp_parse_url( \\home_url(), \\PHP_URL_HOST ) ) !== false ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$embed_provider = '';\n\t\t$embed_provider_lowercase = '';\n\t\t$embed_providers = $this->get_embeds( 'oembed' );\n\t\t\n\t\t// get embed provider name\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t$regex = \\get_post_meta( $provider->ID, 'regex_default', true );\n\t\t\t$regex = '/' . \\trim( $regex, '/' ) . '/';\n\t\t\t\n\t\t\t// save name of provider and stop loop\n\t\t\tif ( $regex !== '//' && \\preg_match( $regex, $url ) ) {\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$args['post_id'] = $provider->ID;\n\t\t\t\t$embed_provider = $provider->post_title;\n\t\t\t\t$embed_provider_lowercase = $provider->post_name;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// see https://github.com/epiphyt/embed-privacy/issues/89\n\t\tif ( empty( $embed_provider ) ) {\n\t\t\t$parsed_url = \\wp_parse_url( $url );\n\t\t\t$embed_provider = isset( $parsed_url['host'] ) ? $parsed_url['host'] : '';\n\t\t}\n\t\t\n\t\t// make sure to only run once\n\t\tif ( \\strpos( $output, 'data-embed-provider=\"' . $embed_provider_lowercase . '\"' ) !== false ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tif ( $embed_provider_lowercase === 'youtube' ) {\n\t\t\t// replace youtube.com to youtube-nocookie.com\n\t\t\t$output = \\str_replace( 'youtube.com', 'youtube-nocookie.com', $output );\n\t\t}\n\t\telse if ( $embed_provider_lowercase === 'twitter' && \\get_option( 'embed_privacy_local_tweets' ) ) {\n\t\t\t// check for local tweets\n\t\t\treturn $this->get_local_tweet( $output );\n\t\t}\n\t\t\n\t\t// check if cookie is set\n\t\tif ( $embed_provider_lowercase !== 'default' && $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$embed_title = $this->get_oembed_title( $output );\n\t\t/* translators: embed title */\n\t\t$args['embed_title'] = ! empty( $embed_title ) ? \\sprintf( \\__( '\"%s\"', 'embed-privacy' ), $embed_title ) : '';\n\t\t$args['embed_url'] = $url;\n\t\t$args['strip_newlines'] = true;\n\t\t\n\t\t// the default dimensions are useless\n\t\t// so ignore them if recognized as such\n\t\t$defaults = \\wp_embed_defaults( $url );\n\t\t\n\t\tif (\n\t\t\t! empty( $args['height'] ) && $args['height'] === $defaults['height']\n\t\t\t&& ! empty( $args['width'] ) && $args['width'] === $defaults['width']\n\t\t) {\n\t\t\tunset( $args['height'], $args['width'] );\n\t\t\t\n\t\t\t$dimensions = $this->get_oembed_dimensions( $output );\n\t\t\t\n\t\t\tif ( ! empty( $dimensions ) ) {\n\t\t\t\t$args = \\array_merge( $args, $dimensions );\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add two click to markup\n\t\treturn $this->get_output_template( $embed_provider, $embed_provider_lowercase, $output, $args );\n\t}\n\t\n\t/**\n\t * Replace embeds in Divi Builder.\n\t * \n\t * @since\t1.2.0\n\t * @since\t1.6.0 Deprecated second parameter\n\t * \n\t * @param\tstring\t$item_embed The original output\n\t * @param\tstring\t$url The URL of the embed\n\t * @return\tstring The updated embed code\n\t */\n\tpublic function replace_embeds_divi( $item_embed, $url ) {\n\t\treturn $this->replace_embeds_oembed( $item_embed, $url, [] );\n\t}\n\t\n\t/**\n\t * Replace twitter embeds.\n\t * \n\t * @deprecated\t1.6.3\n\t * @since\t\t1.6.1\n\t * \n\t * @param\tstring\t$output The original output\n\t * @param\tstring\t$url The URL to the embed\n\t * @param\tarray\t$args Additional arguments of the embed\n\t * @return\tstring The updated embed code\n\t */\n\tpublic function replace_embeds_twitter( $output, $url, $args ) {\n\t\t// do nothing in admin\n\t\tif ( ! $this->usecache ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$provider = $this->get_embed_by_name( 'twitter' );\n\t\t\n\t\tif ( ! \\preg_match( \\get_post_meta( $provider->ID, 'regex_default', true ), $url ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tif ( $this->is_always_active_provider( $provider->post_name ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tif ( \\get_option( 'embed_privacy_local_tweets' ) ) {\n\t\t\t// check for local tweets\n\t\t\treturn $this->get_local_tweet( $output );\n\t\t}\n\t\t\n\t\t$args['embed_url'] = $url;\n\t\t$args['ignore_aspect_ratio'] = true;\n\t\t$args['strip_newlines'] = true;\n\t\t\n\t\treturn $this->get_output_template( $provider->post_title, $provider->post_name, $output, $args );\n\t}\n\t\n\t/**\n\t * Replace Google Maps iframes.\n\t * \n\t * @deprecated\t1.2.0 Use Embed_Privacy::get_embed_overlay() instead\n\t * @since\t\t1.1.0\n\t * \n\t * @param\tstring\t$content The post content\n\t * @return\tstring The post content\n\t */\n\tpublic function replace_google_maps( $content ) {\n\t\t\\preg_match_all( self::IFRAME_REGEX, $content, $matches );\n\t\t\n\t\tif ( empty( $matches ) || empty( $matches[0] ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t$embed_provider = 'Google Maps';\n\t\t$embed_provider_lowercase = 'google-maps';\n\t\t\n\t\t// check if cookie is set\n\t\tif ( $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\tforeach ( $matches[0] as $match ) {\n\t\t\tif ( \\strpos( $match, 'google.com/maps' ) === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t$overlay_output = $this->get_output_template( $embed_provider, $embed_provider_lowercase, $match );\n\t\t\t$content = \\str_replace( $match, $overlay_output, $content );\n\t\t}\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Replace Maps Marker (Pro) shortcodes.\n\t * \n\t * @since\t1.5.0\n\t * \n\t * @param\tstring\t$output Shortcode output\n\t * @param\tstring\t$tag Shortcode tag\n\t * @return\tstring Updated shortcode output\n\t */\n\tpublic function replace_maps_marker( $output, $tag ) {\n\t\tif ( $tag !== 'mapsmarker' ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$embed_provider = $this->get_embed_by_name( 'maps-marker' );\n\t\t\n\t\tif ( \\get_post_meta( $embed_provider->ID, 'is_disabled', true ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\treturn $this->get_output_template( $embed_provider->post_title, $embed_provider->post_name, $output );\n\t}\n\t\n\t/**\n\t * Replace video shortcode embeds.\n\t * \n\t * @since\t1.7.0\n\t * \n\t * @param\tstring\t$output Video shortcode HTML output\n\t * @param\tarray\t$atts Array of video shortcode attributes\n\t */\n\tpublic function replace_video_shortcode( $output, $atts ) {\n\t\t$url = isset( $atts['src'] ) ? $atts['src'] : '';\n\t\t\n\t\tif ( empty( $url ) && ! empty( $atts['mp4'] ) ) {\n\t\t\t$url = $atts['mp4'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['m4v'] ) ) {\n\t\t\t$url = $atts['m4v'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['webm'] ) ) {\n\t\t\t$url = $atts['webm'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['ogv'] ) ) {\n\t\t\t$url = $atts['ogv'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['flv'] ) ) {\n\t\t\t$url = $atts['flv'];\n\t\t}\n\t\t\n\t\t// ignore relative URLs\n\t\tif ( empty( \\wp_parse_url( $url, \\PHP_URL_HOST ) ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\treturn $this->replace_embeds_oembed( $output, $url, $atts );\n\t}\n\t\n\t/**\n\t * Run a compare check.\n\t * \n\t * @since\t1.4.4\n\t * \n\t * @param\tmixed\t$value1 First value to compare\n\t * @param\tmixed\t$value2 Second value to compare\n\t * @param\tstring\t$compare Compare operator\n\t * @return\tbool Result of comparing the values\n\t */\n\tprivate function run_check_compare( $value1, $value2, $compare ) {\n\t\tswitch ( $compare ) {\n\t\t\tcase '===':\n\t\t\t\treturn $value1 === $value2;\n\t\t\tcase '==':\n\t\t\t\treturn $value1 == $value2; // phpcs:ignore WordPress.PHP.StrictComparisons.LooseComparison\n\t\t\tcase '!==':\n\t\t\t\treturn $value1 !== $value2;\n\t\t\tcase '!=':\n\t\t\t\treturn $value1 != $value2; // phpcs:ignore WordPress.PHP.StrictComparisons.LooseComparison\n\t\t\tcase '>':\n\t\t\t\treturn $value1 > $value2;\n\t\t\tcase '>=':\n\t\t\t\treturn $value1 >= $value2;\n\t\t\tcase '<':\n\t\t\t\treturn $value1 < $value2;\n\t\t\tcase '<=':\n\t\t\t\treturn $value1 <= $value2;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t/**\n\t * Run additional for a DOM node checks.\n\t * \n\t * @since\t1.4.4\n\t * \n\t * @param\tarray\t\t$checks A list of checks\n\t * @param\t\\DOMElement\t$element The DOM Element\n\t * @return\tbool Whether all checks are successful\n\t */\n\tprivate function run_checks( $checks, $element ) {\n\t\tif ( empty( $checks ) ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tforeach ( $checks as $check ) {\n\t\t\tif ( $check['type'] === 'attribute' ) {\n\t\t\t\t$compared = $this->run_check_compare( $element->getAttribute( $check['attribute'] ), $check['value'], $check['compare'] );\n\t\t\t\t\n\t\t\t\tif ( ! $compared ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Set the plugin file.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @param\tstring\t$file The path to the file\n\t */\n\tpublic function set_plugin_file( $file ) {\n\t\tif ( \\file_exists( $file ) ) {\n\t\t\t$this->plugin_file = $file;\n\t\t}\n\t}\n\t\n\t/**\n\t * Register post type.\n\t * \n\t * @since\t1.2.0\n\t */\n\tpublic function set_post_type() {\n\t\t\\register_post_type(\n\t\t\t'epi_embed',\n\t\t\t[\n\t\t\t\t'label' => \\__( 'Embeds', 'embed-privacy' ),\n\t\t\t\t'description' => \\__( 'Embeds from Embed Privacy', 'embed-privacy' ),\n\t\t\t\t'supports' => [\n\t\t\t\t\t'custom-fields',\n\t\t\t\t\t'editor',\n\t\t\t\t\t'revisions',\n\t\t\t\t\t'thumbnail',\n\t\t\t\t\t'title',\n\t\t\t\t],\n\t\t\t\t'hierarchical' => false,\n\t\t\t\t'public' => false,\n\t\t\t\t'menu_icon' => 'dashicons-format-video',\n\t\t\t\t'show_in_admin_bar' => false,\n\t\t\t\t'show_in_menu' => false,\n\t\t\t\t'show_in_nav_menus' => false,\n\t\t\t\t'show_in_rest' => false,\n\t\t\t\t'show_ui' => true,\n\t\t\t\t'can_export' => true,\n\t\t\t\t'has_archive' => false,\n\t\t\t\t'exclude_from_search' => true,\n\t\t\t\t'publicly_queryable' => false,\n\t\t\t\t'rewrite' => [\n\t\t\t\t\t'with_front' => false,\n\t\t\t\t\t'pages' => false,\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\t}\n\t\n\t/**\n\t * Display an Opt-out shortcode.\n\t * \n\t * @since\t1.2.0\n\t * \n\t * @param\tarray\t$attributes Shortcode attributes\n\t * @return\tstring The shortcode output\n\t */\n\tpublic function shortcode_opt_out( $attributes ) {\n\t\t$attributes = \\shortcode_atts( [\n\t\t\t'headline' => \\__( 'Embed providers', 'embed-privacy' ),\n\t\t\t'show_all' => 0,\n\t\t\t'subline' => \\__( 'Enable or disable embed providers globally. By enabling a provider, its embedded content will be displayed directly on every page without asking you anymore.', 'embed-privacy' ),\n\t\t], $attributes );\n\t\t$cookie = $this->get_cookie();\n\t\t$embed_providers = $this->get_embeds();\n\t\t$enabled_providers = array_keys( (array) $cookie );\n\t\t$is_javascript_detection = get_option( 'embed_privacy_javascript_detection' ) === 'yes';\n\t\t\n\t\tif ( empty( $embed_providers ) ) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\tif ( ! $is_javascript_detection && ! $attributes['show_all'] && ! $enabled_providers ) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\t$headline = '<h3>' . \\esc_html( $attributes['headline'] ) . '</h3>' . \\PHP_EOL;\n\t\t\n\t\t/**\n\t\t * Filter the opt-out headline.\n\t\t * \n\t\t * @param\tstring\t$headline Current headline HTML\n\t\t * @param\tarray\t$attributes Shortcode attributes\n\t\t */\n\t\t$headline = \\apply_filters( 'embed_privacy_opt_out_headline', $headline, $attributes );\n\t\t\n\t\t/**\n\t\t * Filter the opt-out subline.\n\t\t * \n\t\t * @param\tstring\t$subline Current subline HTML\n\t\t * @param\tarray\t$attributes Shortcode attributes\n\t\t */\n\t\t$subline = \\apply_filters( 'embed_privacy_opt_out_subline', '<p>' . \\esc_html( $attributes['subline'] ) . '</p>' . \\PHP_EOL, $attributes );\n\t\t\n\t\t$output = '<div class=\"embed-privacy-opt-out\" data-show-all=\"' . $attributes['show_all'] . '\">' . \\PHP_EOL . $headline . $subline;\n\t\t\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\tif ( $is_javascript_detection ) {\n\t\t\t\t$is_checked = false;\n\t\t\t}\n\t\t\telse if ( $attributes['show_all'] ) {\n\t\t\t\t$is_checked = \\in_array( $provider->post_name, $enabled_providers, true );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$is_checked = true;\n\t\t\t}\n\t\t\t\n\t\t\t$is_hidden = ! $is_javascript_detection && ! $attributes['show_all'] && ! \\in_array( $provider->post_name, $enabled_providers, true );\n\t\t\t$microtime = \\str_replace( '.', '', \\microtime( true ) );\n\t\t\t$output .= '<span class=\"embed-privacy-provider' . ( $is_hidden ? ' is-hidden' : '' ) . '\">' . \\PHP_EOL;\n\t\t\t$output .= '<input type=\"checkbox\" id=\"embed-privacy-provider-' . \\esc_attr( $provider->post_name ) . '-' . $microtime . '\" ' . \\checked( $is_checked, true, false ) . ' class=\"embed-privacy-opt-out-input ' . ( $is_checked ? 'is-enabled' : 'is-disabled' ) . '\" data-embed-provider=\"' . \\esc_attr( $provider->post_name ) . '\">';\n\t\t\t$output .= '<label class=\"embed-privacy-opt-out-label\" for=\"embed-privacy-provider-' . \\esc_attr( $provider->post_name ) . '-' . $microtime . '\" data-embed-provider=\"' . \\esc_attr( $provider->post_name ) . '\">';\n\t\t\t$enable_disable = '<span class=\"embed-privacy-provider-is-enabled\">' . \\esc_html_x( 'Disable', 'complete string: Disable <embed name>', 'embed-privacy' ) . '</span><span class=\"embed-privacy-provider-is-disabled\">' . \\esc_html_x( 'Enable', 'complete string: Disable <embed name>', 'embed-privacy' ) . '</span>';\n\t\t\t/* translators: 1: Enable/Disable, 2: embed provider title */\n\t\t\t$output .= \\wp_kses( \\sprintf( \\__( '%1$s %2$s', 'embed-privacy' ), $enable_disable, \\esc_html( $provider->post_title ) ), [ 'span' => [ 'class' => true ] ] );\n\t\t\t$output .= '</label><br>' . \\PHP_EOL;\n\t\t\t$output .= '</span>' . \\PHP_EOL;\n\t\t}\n\t\t\n\t\t$output .= '</div>' . \\PHP_EOL;\n\t\t\n\t\treturn $output;\n\t}\n}\n", "=== Embed Privacy ===\nContributors: epiphyt, kittmedia, krafit\nTags: oembed, privacy, gutenberg\nRequires at least: 5.9\nStable tag: 1.8.0\nTested up to: 6.3\nRequires PHP: 5.6\nLicense: GPL2\nLicense URI: https://www.gnu.org/licenses/gpl-2.0.html\n\nEmbed Privacy prevents the loading of embedded external content and allows your site visitors to opt-in.\n\n== Description ==\n\nContent embedded from external sites such as YouTube or Twitter is loaded immediately when visitors access your site. Embed Privacy addresses this issue and prevents the loading of these contents until the visitor decides to allow loading of external content.\nBut Embed Privacy not only protects your visitor's privacy but also makes your site load faster.\n\nAll embeds will be replaced by placeholders, ready for you to apply style as you wish. With only a couple of lines of CSS. \n\nBy clicking on the placeholder the respective content will be reloaded.\n\n**Note: This plugins requires the PHP extension [\"Document Object Model\" (php-dom)](https://www.php.net/manual/en/book.dom.php).**\n\n== Installation ==\n\n1. Upload the plugin files to the `/wp-content/plugins/embed-privacy` directory, or install the plugin through the WordPress plugins screen directly.\n1. Activate the plugin through the 'Plugins' screen in WordPress.\n1. Embedded content will automatically be replaced by a placeholder and can be loaded on demand by your visitors. There are no additional settings.\n1. To allow users to opt-out of embed providers that they set to always active, place the shortcode `[embed_privacy_opt_out]` into your privacy policy.\n\n\n== Frequently Asked Questions ==\n\n= Can Embed Privacy keep external services from tracking me/my visitors? =\n\nYes. As long as you don't opt in to load external content, you/your visitors can't be tracked by these services.\n\n= Does Embed Privacy make embedding content privacy-friendly? =\n\nThe embedding process itself will be privacy-friendly with Embed Privacy. That means, that no third-party embed provider can track users without their explicit consent by clicking on the overlay to allow the embed to be loaded. However, to make sure everything is fine you need to expand your privacy policy for each embed provider you\u2019re using or you want to use because you need to specify, where data will be sent to and what happens to them.\n\n= Does Embed Privacy support the Gutenberg editor? =\n\nSure thing! We enjoy playing with the new WordPress editor and developed Embed Privacy with Gutenberg in mind, the plugin will work no matter the editor you use.\n\n= Which embeds are currently supported? =\n\nWe currently support all oEmbed providers known to WordPress core by default. Want to know about them? Here you go:\n\n* Amazon Kindle\n* Anghami\n* Animoto\n* Cloudup\n* DailyMotion\n* Facebook\n* Flickr\n* Funny Or Die\n* Imgur\n* Instagram\n* Issuu\n* Kickstarter\n* Meetup\n* Mixcloud\n* Photobucket\n* Pocket Casts\n* Polldaddy.com\n* Reddit\n* ReverbNation\n* Scribd\n* Sketchfab\n* SlideShare\n* SmugMug\n* SoundCloud\n* Speaker Deck\n* Spotify\n* TikTok\n* TED\n* Tumblr\n* Twitter\n* VideoPress\n* Vimeo, WordPress.org\n* WordPress.tv\n* YouTube\n\nWe also support Google Maps via iframe and the plugins Maps Marker, Maps Marker Pro and Shortcodes Ultimate.\n\nSince version 1.2.0, you can also add custom embed providers by going to **Settings > Embed Privacy > Manage embeds**. Here you can also modify any existing embed provider, change its logo, add a background image, change the text displaying on the embed or disable the embed provider entirely.\n\n= Can Embed Privacy automatically download thumbnails of the embedded content? =\n\nYes! Since version 1.5.0, Embed Privacy supports downloading and displaying thumbnails in posts for SlideShare, Vimeo and YouTube as background of Embed Privacy\u2019s overlay.\n\n= Developers: How to use Embed Privacy\u2019s methods for custom content? =\n\nSince version 1.1.0 you can now use our mechanism for content we don\u2019t support in our plugin. You can do it the following way:\n\n`\n/**\n * Replace specific content with the Embed Privacy overlay of type 'google-maps'.\n * \n * @param\tstring\t\t$content The content to replace\n * @return\tstring The updated content\n */\nfunction prefix_replace_content_with_overlay( $content ) {\n\t// check for Embed Privacy\n\tif ( ! class_exists( 'epiphyt\\Embed_Privacy\\Embed_Privacy' ) ) {\n\t\treturn $content;\n\t}\n\t\n\t// get Embed Privacy instance\n\t$embed_privacy = epiphyt\\Embed_Privacy\\Embed_Privacy::get_instance();\n\t\n\t// check if provider is always active; if so, just return the content\n\tif ( ! $embed_privacy->is_always_active_provider( 'google-maps' ) ) {\n\t\t// replace the content with the overlay\n\t\t$content = $embed_privacy->get_output_template( 'Google Maps', 'google-maps', $content );\n\t\t// enqueue assets\n\t\t$embed_privacy->print_assets();\n\t}\n\t\n\treturn $content;\n}\n`\n\n= Can users opt-out of already opted in embed providers? =\n\nYes! You can use the shortcode `[embed_privacy_opt_out]` to add a list of embed providers anywhere you want (recommendation: add it to your privacy policy) to allow your users to opt-out.\n\n= What parameters can be used in the shortcode? =\n\nThe shortcode `[embed_privacy_opt_out]` can be used to let users opt-out of embed providers that have been set to be always active by the user. It can have the following attributes:\n\n<code>headline</code> \u2013 Add a custom headline (default: Embed providers)\n\n`\n[embed_privacy_opt_out headline=\"My custom headline\"]\n`\n\n<code>subline</code> \u2013 Add a custom subline (default: Enable or disable embed providers globally. By enabling a provider, its embedded content will be displayed directly on every page without asking you anymore.)\n\n`\n[embed_privacy_opt_out subline=\"My custom subline\"]\n`\n\n<code>show_all</code> \u2013 Whether to show all available embed providers or just the ones the user opted in (default: false)\n\n`\n[embed_privacy_opt_out show_all=\"1\"]\n`\n\nYou can also combine all of these attributes:\n\n`\n[embed_privacy_opt_out headline=\"My custom headline\" subline=\"My custom subline\" show_all=\"1\"]\n`\n\n= Is this plugin compatible with my caching plugin? =\n\nIf you\u2019re using a caching plugin, make sure you enable the \"JavaScript detection for active providers\" in **Settings > Embed Privacy > JavaScript detection**. Then, the plugin is fully compatible with your caching plugin.\n\n= How can Embed Privacy be extended? =\n\nCheck out our documentation: [https://epiph.yt/en/embed-privacy/documentation/](https://epiph.yt/en/embed-privacy/documentation/)\n\n= Who are you, folks? =\n\nWe are [Epiphyt](https://epiph.yt/), your friendly neighborhood WordPress plugin shop from southern Germany.\n\n\n== Changelog ==\n\n= 1.8.0 =\n* Added support for Anghami\n* Added filter to prevent thumbnail orphan deletion\n* Added check for PHP DOM extension\n* Improved loading embed providers\n\n= 1.7.3 =\n* Improved compatibility with Advanced Custom Fields\n* Fixed compatibility with PHP 8.2\n* Fixed a potential PHP warning if a post does not exist while checking permissions\n* Fixed functionality of the opt-out shortcode if the current website uses a non-standard port\n* Fixed replacing only the necessary part of embedded contents for custom embeds\n* Fixed replacing all occurrences of a custom embed in the current content\n* Fixed multiple unnecessary database queries in migration before the actual check whether a migration is necessary\n* Fixed downloading the thumbnail multiple times when the same embed is embedded multiple times\n* Fixed deleted thumbnails if they are only in content of Advanced Custom Fields\n* Fixed a potential security issue regarding disclosing absolute paths in thumbnail URLs (special thanks to [@kraftner](https://profiles.wordpress.org/kraftner/))\n* Fixed aspect ratio generation if width or height contains a percentage sign\n* Fixed thumbnail positioning (it's now horizontally and vertically centered)\n* Fixed HTML output of the opt-out shortcode\n\n= 1.7.2 =\n* Fixed getting the URL of video shortcodes properly to not block content from the same (sub)domain\n\n= 1.7.1 =\n* Improved Google Maps height in Kadence Blocks\n* Fixed a JavaScript error if jQuery is not initialized\n* Fixed potential PHP warning regarding an undefined variable\n* Fixed potential PHP warning regarding an undefined hostname while retrieving the embed URL\n\n= 1.7.0 =\n* Added support for crowdsignal.net\n* Added support for classic video shortcode/widget\n* Added support for Slideshare thumbnails (thanks to [@Lazza](https://github.com/Lazza))\n* Added support for custom thumbnail generation via filter\n* Fixed hiding thumbnails after embedded content has been enabled\n* Fixed aspect ratio for embeds without proper dimension information\n\n= 1.6.5 =\n* Fixed aspect ratio for non-default content width themes\n* Fixed handling of the % character\n\n= 1.6.4 =\n* Fixed aspect ratio for many oEmbeds\n\n= 1.6.3 =\n* Fixed replacing some oEmbeds\n* Fixed potential problems while retrieving a single embed provider\n* Fixed deleting post metadata of embed providers while editing them via WP-CLI\n\n= 1.6.2 =\n* Restore displaying YouTube thumbnails\n\n= 1.6.1 =\n* Updated required WordPress version to 5.0\n* Fixed text links to youtube.com\n* Fixed Twitter embeds\n\n= 1.6.0 =\n* Added automatic detection of aspect ratio if given by the embed\n* Added ability to work with HTML of regular oEmbed providers\n* Added filter to ignore shortcodes (see [documentation](https://epiph.yt/en/embed-privacy/documentation/#embed_privacy_ignored_shortcodes))\n* Added matching links to the new documentation at [https://epiph.yt/en/embed-privacy/documentation/](https://epiph.yt/en/embed-privacy/documentation/)\n* Improved handling of matching non-standard elements (embed, iframe, object, see [documentation](https://epiph.yt/en/embed-privacy/documentation/#regex-pattern))\n* Fixed Google Maps regex pattern after installation\n* Fixed behavior of the opt-out shortcode with enabled page caching\n* Fixed line-height of custom embeds in Elementor\n* General code improvements\n\n= 1.5.1 =\n* Fixed storing and displaying video thumbnails from Vimeo that are embedded using the domain player.vimeo.com\n* Fixed unnecessary line breaks within the classic editor\n* Fixed displaying the overlay if an embed of a known embed provider followed an embed of an unknown embed provider\n* Fixed uninstallation issues\n\n= 1.5.0 =\n* Added support for embed provider Pocket Casts\n* Added support for Maps Marker and Maps Marker Pro\n* Added support for Google Maps in Shortcodes Ultimate\n* Added support to automatically download and display a thumbnail of the embed for Vimeo and YouTube (only in posts)\n* Added support to re-initiate the database migration and display an error message if it has been failed at least three times\n* Added support for Polylang and Polylang Pro\n* Added a new filter to allow stopping Embed Privacy from handling unknown embeds\n* Added option to disable the direct link in the overlay\n* Updated logos for Reddit, SmugMug and SoundCloud for better readability\n* Use the plugin version as parameter for assets to allow better caching and prevent problems with some setups\n* General code improvements\n* Fixed a JavaScript error\n\n= 1.4.8 =\n* Fixed an issue with always active providers being cached by page caching plugins\n* Fixed printing inline JavaScript only once\n\n= 1.4.7 =\n* Fixed displaying embeds on mobile devices while using Divi\n* Fixed the output of assets\n* Improved regular expression for Google Maps\n\n= 1.4.6 =\n* Fixed an issue where JavaScript assets may be missing for the opt-out shortcode\n\n= 1.4.5 =\n* Fixed an issue with always enable an unknown embed provider\n* Fixed issues with missing JavaScript for Facebook embed of Jetpack\n\n= 1.4.4 =\n* Fixed a potential encoding issue\n* Fixed issues with Facebook embed of Jetpack\n* Fixed issues with registering assets\n\n= 1.4.3 =\n* Fixed a problem that prevents embed fields from being stored\n\n= 1.4.2 =\n* Fixed an expired link during plugin activation and creating a new embed provider\n\n= 1.4.1 =\n* Fixed invalid HTML by changing the accessibility behavior (it's now a separate button)\n* Fixed potential empty link titles in other locales then English\n* Fixed potential unwanted URL encoding in the content after Embed Privacy replaced an embed\n\n= 1.4.0 =\n* Added support for Pinterest and Wolfram Cloud\n* Improved migrations to fix duplicate providers or performance problems in multisite installations\n* Embeds can now be enabled via keyboard\n* Added a link to the original content on the bottom right overlay corner\n* Added support for caching the opt-out shortcode\n* Clicking on the \"always enable content of X\" enables all embeds of this provider on the current page immediately\n* Improved markup of local tweets\n* Added additional class to checkbox paragraph, thanks to @florianbrinkmann\n* System providers cannot be deleted anymore\n* Fixed oEmbed provider name if the provider is unknown\n* Fix enqueuing assets for unknown embed providers\n\n= 1.3.6 =\n* Fixed enabling multiple YouTube videos in Elementor\n* Fixed displaying content if the page contains an always active provider\n\n= 1.3.5 =\n* Fixed functionality in Elementor\n* Fixed custom embed provider output\n* Fixed replacing content in shortcodes multiple times\n* Fixed checking for theme/template\n\n= 1.3.4 =\n* Fixed deleted meta fields if you put an embed provider in trash and restore it afterwards\n* Fixed Embed Privacy sometimes trying to replace an embed twice\n* Fixed an error that may occur if Embed Privacy tries to replace an embed that doesn't need to be replaced\n* Fixed checking for local domain if WordPress itself is located in a sub-domain\n* Fixed always enable YouTube within Divi\n* Fixed overlay line height in Divi\n\n= 1.3.3 =\n* Improved mobile design for responsive embeds\n* Fixed centering for non-responsive embeds\n* Fixed disabled embed content from preventing interactions with the text below the overlay\n\n= 1.3.2 =\n* Fixed general activation error\n\n= 1.3.1 =\n* Fixed a fatal error on uninstallation on non-multisite\n* Fixed activating via WP-CLI\n* Fixed deleting an option on uninstallation\n\n= 1.3.0 =\n* Added local tweets without overlay\n* Added option to preserve data on uninstall\n* Added compatibility with theme Astra\n* Added filter `embed_privacy_markup` for filtering the whole markup of an embed overlay\n* Added proper support for embeds on the current domain\n* Added support for embeds on other elements than `embed`, `iframe` and `object`\n* Enqueue assets only if needed\n* Removed images from media (which had been added in version 1.2.0) and use fallback images for default embed providers\n* Improved regular expression for Google Maps\n* Improved texts for clarity\n* Fixed visibility of custom post type\n* Fixed network-wide activation\n* Fixed clearing oEmbed cache\n\n= 1.2.2 =\n* Added a check if a migration is already running\n* Fixed a bug where the page markup could be changed unexpectedly\n* `<object>` elements are now replaced correctly\n* Added a missing textdomain to a string\n* Excluded local embeds (with the same domain)\n* Fixed Amazon Kindle regex being too greedy\n\n= 1.2.1 =\n* Fixed a bug where the page markup could be changed unexpectedly\n* Fixed a warning if an embed provider has no regular expressions\n* Improved migrations of embed provider metadata to make sure they have been added to the database\n\n= 1.2.0 =\n* Added support for managing embeds (add/remove/edit/disable)\n* Added support for caching plugins by adding a JavaScript detection for always active embed providers\n* Added CSS classes that indicate the current state of the embed (`is-disabled`/`is-enabled`)\n* Added shortcode `[embed_privacy_opt_out]` to allow users to opt-out/in\n* Fixed responsive design if the embed added an own width\n\n= 1.1.3 =\n* Changed provider name from Polldaddy to Crowdsignal\n* Removed provider Hulu\n\n= 1.1.2 =\n* Fixed a possible difference in the used class name of the embed provider in HTML and CSS\n\n= 1.1.1 =\n* Removed provider CollegeHumor\n* Fixed a bug with the automatic addition of paragraphs\n\n= 1.1.0 =\n* Added option to allow all embeds by one provider\n* Added provider TikTok, introduced in WordPress 5.4\n* Added support for Google Maps iframes\n* Added URL rewrite to youtube-nocookie.com\n* Added option to save user selection per embed provider\n* Added provider logo to our placeholder\n* Added option to filter our placeholders markup\n* Added support for 'alignwide' and 'alignfull' Gutenberg classes\n* Added support for using our embedding overlay mechanism for external developers\n* Improved our placeholder markup to be actually semantic\n* Changed .embed- classes to .embed-privacy-\n* Fixed some embed providers that use custom z-index, which results in the embedded content being above the overlay\n* Fixed typos\n\n= 1.0.2 =\n* Improved compatibility with [Autoptimize](https://wordpress.org/plugins/autoptimize/)\n* Improved compatibility with [AMP](https://wordpress.org/plugins/amp/)\n* Fix issue with Slideshare causing wrong (generic) placeholders\n\n= 1.0.1 =\n* Fixed support for PHP 5.6\n\n= 1.0.0 =\n* Initial release\n\n== Upgrade Notice ==\n\n== Screenshots ==\n1. Add embeds using the classic editor or the block editor's embed blocks.\n2. Embed Privacy will add an overlay to supported embeds automatically.\n3. You can customize the overlays for each service individually.\n4. Embed Privacy can deliver embedded Tweets locally without 3rd party scripts or tracking.\n"], "fixing_code": ["# Changelog\n\n## 1.8.1\n* Fixed the output of the opt-out shortcode\n\n## 1.8.0\n* Added support for Anghami\n* Added filter to prevent thumbnail orphan deletion\n* Added check for PHP DOM extension\n* Improved loading embed providers\n\n## 1.7.3\n* Improved compatibility with Advanced Custom Fields\n* Fixed compatibility with PHP 8.2\n* Fixed a potential PHP warning if a post does not exist while checking permissions\n* Fixed functionality of the opt-out shortcode if the current website uses a non-standard port\n* Fixed replacing only the necessary part of embedded contents for custom embeds\n* Fixed replacing all occurrences of a custom embed in the current content\n* Fixed multiple unnecessary database queries in migration before the actual check whether a migration is necessary\n* Fixed downloading the thumbnail multiple times when the same embed is embedded multiple times\n* Fixed deleted thumbnails if they are only in content of Advanced Custom Fields\n* Fixed a potential security issue regarding disclosing absolute paths in thumbnail URLs (special thanks to [@kraftner](https://profiles.wordpress.org/kraftner/))\n* Fixed aspect ratio generation if width or height contains a percentage sign\n* Fixed thumbnail positioning (it's now horizontally and vertically centered)\n* Fixed HTML output of the opt-out shortcode\n* General code improvements\n\n## 1.7.2\n* Fixed getting the URL of video shortcodes properly to not block content from the same (sub)domain\n\n## 1.7.1\n* Improved Google Maps height in Kadence Blocks\n* Fixed a JavaScript error if jQuery is not initialized\n* Fixed potential PHP warning regarding an undefined variable\n* Fixed potential PHP warning regarding an undefined hostname while retrieving the embed URL\n\n## 1.7.0\n* Added support for crowdsignal.net\n* Added support for classic video shortcode/widget\n* Added support for Slideshare thumbnails (thanks to [@Lazza](https://github.com/Lazza))\n* Added support for custom thumbnail generation via filter\n* Fixed hiding thumbnails after embedded content has been enabled\n* Fixed aspect ratio for embeds without proper dimension information\n\n## 1.6.5\n* Fixed aspect ratio for non-default content width themes\n* Fixed handling of the % character\n\n## 1.6.4\n* Fixed aspect ratio for many oEmbeds\n\n## 1.6.3\n* Fixed replacing some oEmbeds\n* Fixed potential problems while retrieving a single embed provider\n* Fixed deleting post metadata of embed providers while editing them via WP-CLI\n\n## 1.6.2\n* Restore displaying YouTube thumbnails\n\n## 1.6.1\n* Updated required WordPress version to 5.0\n* Fixed text links to youtube.com\n* Fixed Twitter embeds\n\n## 1.6.0\n* Added automatic detection of aspect ratio if given by the embed\n* Added ability to work with HTML of regular oEmbed providers\n* Added filter to ignore shortcodes (see [documentation](https://epiph.yt/en/embed-privacy/documentation/#embed_privacy_ignored_shortcodes))\n* Added matching links to the new documentation at [https://epiph.yt/en/embed-privacy/documentation/](https://epiph.yt/en/embed-privacy/documentation/)\n* Improved handling of matching non-standard elements (embed, iframe, object, see [documentation](https://epiph.yt/en/embed-privacy/documentation/#regex-pattern))\n* Fixed Google Maps regex pattern after installation\n* Fixed behavior of the opt-out shortcode with enabled page caching\n* Fixed line-height of custom embeds in Elementor\n* General code improvements\n\n## 1.5.1\n* Fixed storing and displaying video thumbnails from Vimeo that are embedded using the domain player.vimeo.com\n* Fixed unnecessary line breaks within the classic editor\n* Fixed displaying the overlay if an embed of a known embed provider followed an embed of an unknown embed provider\n* Fixed uninstallation issues\n\n## 1.5.0\n* Added support for embed provider Pocket Casts\n* Added support for Maps Marker and Maps Marker Pro\n* Added support for Google Maps in Shortcodes Ultimate\n* Added support to automatically download and display a thumbnail of the embed for Vimeo and YouTube (only in posts)\n* Added support to re-initiate the database migration and display an error message if it has been failed at least three times\n* Added support for Polylang and Polylang Pro\n* Added a new filter to allow stopping Embed Privacy from handling unknown embeds\n* Added option to disable the direct link in the overlay\n* Updated logos for Reddit, SmugMug and SoundCloud for better readability\n* Use the plugin version as parameter for assets to allow better caching and prevent problems with some setups\n* General code improvements\n* Fixed a JavaScript error\n\n## 1.4.8\n* Fixed an issue with always active providers being cached by page caching plugins\n* Fixed printing inline JavaScript only once\n\n## 1.4.7\n* Fixed displaying embeds on mobile devices while using Divi\n* Fixed the output of assets\n* Improved regular expression for Google Maps\n\n## 1.4.6\n* Fixed an issue where JavaScript assets may be missing for the opt-out shortcode\n\n## 1.4.5\n* Fixed an issue with always enable an unknown embed provider\n* Fixed issues with missing JavaScript for Facebook embed of Jetpack\n\n## 1.4.4\n* Fixed a potential encoding issue\n* Fixed issues with Facebook embed of Jetpack\n* Fixed issues with registering assets\n\n## 1.4.3\n* Fixed a problem that prevents embed fields from being stored\n\n## 1.4.2\n* Fixed an expired link during plugin activation and creating a new embed provider\n\n## 1.4.1\n* Fixed invalid HTML by changing the accessibility behavior (it's now a separate button)\n* Fixed potential empty link titles in other locales then English\n* Fixed potential unwanted URL encoding in the content after Embed Privacy replaced an embed\n\n## 1.4.0\n* Added support for Pinterest and Wolfram Cloud\n* Improved migrations to fix duplicate providers or performance problems in multisite installations\n* Embeds can now be enabled via keyboard\n* Added a link to the original content on the bottom right overlay corner\n* Added support for caching the opt-out shortcode\n* Clicking on the \"always enable content of X\" enables all embeds of this provider on the current page immediately\n* Improved markup of local tweets\n* Added additional class to checkbox paragraph, thanks to @florianbrinkmann\n* Correctly handle backslashes in the regex field\n* System providers cannot be deleted anymore\n* Fixed oEmbed provider name if the provider is unknown\n* Fix enqueuing assets for unknown embed providers\n\n## 1.3.6\n* Fixed enabling multiple YouTube videos in Elementor\n* Fixed displaying content if the page contains an always active provider\n\n## 1.3.5\n* Fixed functionality in Elementor\n* Fixed custom embed provider output\n* Fixed replacing content in shortcodes multiple times\n* Fixed checking for theme/template\n\n## 1.3.4\n* Fixed deleted meta fields if you put an embed provider in trash and restore it afterwards\n* Fixed Embed Privacy sometimes trying to replace an embed twice\n* Fixed an error that may occur if Embed Privacy tries to replace an embed that doesn't need to be replaced\n* Fixed checking for local domain if WordPress itself is located in a sub-domain\n* Fixed always enable YouTube within Divi\n* Fixed overlay line height in Divi\n\n## 1.3.3\n* Improved mobile design for responsive embeds\n* Fixed centering for non-responsive embeds\n* Fixed disabled embed content from preventing interactions with the text below the overlay\n\n## 1.3.2\n* Fixed general activation error\n\n## 1.3.1\n* Fixed a fatal error on uninstallation on non-multisite\n* Fixed activating via WP-CLI\n* Fixed deleting an option on uninstallation\n\n## 1.3.0\n* Added local tweets without overlay\n* Added option to preserve data on uninstall\n* Added compatibility with theme Astra\n* Added filter `embed_privacy_markup` for filtering the whole markup of an embed overlay\n* Added proper support for embeds on the current domain\n* Added support for embeds on other elements than `embed`, `iframe` and `object`\n* Enqueue assets only if needed\n* Removed images from media (which had been added in version 1.2.0) and use fallback images for default embed providers\n* Improved regular expression for Google Maps\n* Improved texts for clarity\n* Fixed visibility of custom post type\n* Fixed network-wide activation\n* Fixed clearing oEmbed cache\n\n## 1.2.2\n* Added a check if a migration is already running\n* Fixed a bug where the page markup could be changed unexpectedly\n* `<object>` elements are now replaced correctly\n* Added a missing textdomain to a string\n* Excluded local embeds (with the same domain)\n* Fixed Amazon Kindle regex being too greedy\n\n## 1.2.1\n* Fixed a bug where the page markup could be changed unexpectedly\n* Fixed a warning if an embed provider has no regular expressions\n* Improved migrations of embed provider metadata to make sure they have been added to the database\n\n## 1.2.0\n* Added support for managing embeds (add/remove/edit/disable)\n* Added support for caching plugins by adding a JavaScript detection for always active embed providers\n* Added CSS classes that indicate the current state of the embed (`is-disabled`/`is-enabled`)\n* Added shortcode `[embed_privacy_opt_out]` to allow users to opt-out/in\n* Fixed responsive design if the embed added an own width\n\n## 1.1.3\n* Changed provider name from Polldaddy to Crowdsignal\n* Removed provider Hulu\n\n## 1.1.2\n* Fixed a possible difference in the used class name of the embed provider in HTML and CSS\n\n## 1.1.1\n* Removed provider CollegeHumor\n* Fixed a bug with the automatic addition of paragraphs\n\n## 1.1.0\n* Added option to allow all embeds by one provider\n* Added provider TikTok, introduced in WordPress 5.4\n* Added support for Google Maps iframes\n* Added URL rewrite to youtube-nocookie.com\n* Added option to save user selection per embed provider\n* Added provider logo to our placeholder\n* Added option to filter our placeholders markup\n* Added support for 'alignwide' and 'alignfull' Gutenberg classes\n* Added support for using our embedding overlay mechanism for external developers\n* Improved our placeholder markup to be actually semantic\n* Changed .embed- classes to .embed-privacy-\n* Fixed some embed providers that use custom z-index, which results in the embedded content being above the overlay\n* Fixed typos\n\n## 1.0.2\n* Improved compatibility with [Autoptimize](https://wordpress.org/plugins/autoptimize/)\n* Improved compatibility with [AMP](https://wordpress.org/plugins/amp/)\n* Fix issue with Slideshare causing wrong (generic) placeholders\n\n## 1.0.1\n* Fixed support for PHP 5.6\n\n## 1.0.0\n* Initial release\n", "# Security Policy\n\n## Supported Versions\n\nWe usually only support the latest major version.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 1.8.x   | :white_check_mark: |\n| < 1.8   | :x:                |\n\n## Reporting a Vulnerability\n\nPlease report any vulnerability via <hey.security@epiph.yt>. You should receive\nan answer within 24 hours. You will be informed about if the vulnerability is\naccepted or declined. If accepted and fixed, we will thank you in the changelog.\n\nIf desired, we can also mention you in any other channel we use to announce an\nupdate, e.g. in a blog post or via Mastodon/Twitter.\n", "<?php\nnamespace epiphyt\\Embed_Privacy;\n\n/*\nPlugin Name:\tEmbed Privacy\nDescription:\tEmbed Privacy prevents from loading external embeds directly and lets the user control which one should be loaded.\nVersion:\t\t1.8.1\nAuthor:\t\t\tEpiphyt\nAuthor URI:\t\thttps://epiph.yt\nLicense:\t\tGPL2\nLicense URI:\thttps://www.gnu.org/licenses/gpl-2.0.html\nText Domain:\tembed-privacy\nDomain Path:\t/languages\n\nEmbed Privacy is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 2 of the License, or\nany later version.\n\nEmbed Privacy is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with Embed Privacy. If not, see https://www.gnu.org/licenses/gpl-2.0.html.\n*/\n\n// exit if ABSPATH is not defined\n\\defined( 'ABSPATH' ) || exit;\n\n\\define( 'EMBED_PRIVACY_VERSION', '1.8.1' );\n\nif ( ! \\defined( 'EPI_EMBED_PRIVACY_BASE' ) ) {\n\t\\define( 'EPI_EMBED_PRIVACY_BASE', \\WP_PLUGIN_DIR . '/embed-privacy/' );\n}\n\nif ( ! \\defined( 'EPI_EMBED_PRIVACY_URL' ) ) {\n\t\\define( 'EPI_EMBED_PRIVACY_URL', \\plugin_dir_url( \\EPI_EMBED_PRIVACY_BASE . 'embed-privacy.php' ) );\n}\n\nif ( ! \\class_exists( 'DOMDocument' ) ) {\n\t/**\n\t * Disable the plugin if the php-dom extension is missing.\n\t */\n\tfunction disable_plugin() {\n\t\t?>\n\t\t<div class=\"notice notice-error\">\n\t\t\t<p><?php \\esc_html_e( 'The PHP extension \"Document Object Model\" (php-dom) is missing. Embed Privacy requires this extension to be installed and enabled. Please ask your hosting provider to install and enable it. Embed Privacy disables itself now. Please re-enable it again if the extension is installed and enabled.', 'embed-privacy' ); ?></p>\n\t\t</div>\n\t\t<?php\n\t\t\\deactivate_plugins( \\plugin_basename( __FILE__ ) );\n\t}\n\t\n\t\\add_action( 'admin_notices', __NAMESPACE__ . '\\disable_plugin' );\n}\n\n/**\n * Autoload all necessary classes.\n * \n * @param\tstring\t\t$class The class name of the autoloaded class\n */\n\\spl_autoload_register( function( $class ) {\n\t$path = \\explode( '\\\\', $class );\n\t$filename = \\str_replace( '_', '-', \\strtolower( \\array_pop( $path ) ) );\n\t$class = \\str_replace(\n\t\t[ 'epiphyt\\embed_privacy\\\\', '\\\\', '_' ],\n\t\t[ '', '/', '-' ],\n\t\t\\strtolower( $class )\n\t);\n\t$class = \\str_replace( $filename, 'class-' . $filename, $class );\n\t$maybe_file = __DIR__ . '/inc/' . $class . '.php';\n\t\n\tif ( \\file_exists( $maybe_file ) ) {\n\t\trequire_once $maybe_file;\n\t}\n} );\n\nEmbed_Privacy_Widget_Output_Filter::get_instance();\n$embed_privacy = Embed_Privacy::get_instance();\n$embed_privacy->set_plugin_file( __FILE__ );\n$embed_privacy->init();\n", "<?php\nnamespace epiphyt\\Embed_Privacy;\n\nuse Automattic\\Jetpack\\Assets;\nuse DOMDocument;\nuse DOMElement;\nuse DOMNode;\nuse DOMXPath;\nuse Elementor\\Plugin;\nuse Jetpack;\nuse WP_Post;\n\n/**\n * Two click embed main class.\n * \n * @author\tEpiphyt\n * @license\tGPL2\n * @package\tepiphyt\\Embed_Privacy\n */\nclass Embed_Privacy {\n\t/**\n\t * @deprecated\t1.2.0\n\t * @since\t\t1.1.0\n\t */\n\tconst IFRAME_REGEX = '/<iframe(.*?)src=\"([^\"]+)\"([^>]*)>((?!<\\/iframe).)*<\\/iframe>/ms';\n\t\n\t/**\n\t * @since\t1.4.0\n\t * @var\t\tmixed The cookie content or any error message from json_decode()\n\t */\n\tprivate $cookie;\n\t\n\t/**\n\t * @since\t1.3.5\n\t * @var\t\tarray Replacements that already have taken place.\n\t */\n\tprivate $did_replacements = [];\n\t\n\t/**\n\t * @since\t1.3.0\n\t * @var\t\tarray An array of embed providers\n\t */\n\tpublic $embeds = [];\n\t\n\t/**\n\t * @since\t1.3.0\n\t * @var\t\tbool Whether the current request has any embed processed by Embed Privacy\n\t */\n\tpublic $has_embed = false;\n\t\n\t/**\n\t * @since\t1.6.0\n\t * @var\t\tstring[] List of ignored shortcodes\n\t */\n\tprivate $ignored_shortcodes = [\n\t\t'embed_privacy_opt_out',\n\t\t'grw',\n\t];\n\t\n\t/**\n\t * @since\t1.4.8\n\t * @var\t\tbool Whether the current request has printed Embed Privacy assets.\n\t */\n\tprivate $is_printed = false;\n\t\n\t/**\n\t * @var\t\t\\epiphyt\\Embed_Privacy\\Embed_Privacy\n\t */\n\tpublic static $instance;\n\t\n\t/**\n\t * @var\t\tstring The full path to the main plugin file\n\t */\n\tpublic $plugin_file = '';\n\t\n\t/**\n\t * @var\t\tbool Determine if we use the cache\n\t */\n\tprivate $usecache;\n\t\n\t/**\n\t * @deprecated\t1.2.0\n\t * @var\t\t\tarray The supported media providers\n\t */\n\tpublic $embed_providers = [\n\t\t'.amazon.' => 'Amazon Kindle',\n\t\t'.amzn.' => 'Amazon Kindle',\n\t\t'a.co' => 'Amazon Kindle',\n\t\t'z.cn' => 'Amazon Kindle',\n\t\t'animoto.com' => 'Animoto',\n\t\t'cloudup.com' => 'Cloudup',\n\t\t'crowdsignal.com' => 'Crowdsignal',\n\t\t'dailymotion.com' => 'DailyMotion',\n\t\t'facebook.com' => 'Facebook',\n\t\t'flickr.com' => 'Flickr',\n\t\t'funnyordie.com' => 'Funny Or Die',\n\t\t'imgur.com' => 'Imgur',\n\t\t'instagram.com' => 'Instagram',\n\t\t'issuu.com' => 'Issuu',\n\t\t'kickstarter.com' => 'Kickstarter',\n\t\t'meetup.com' => 'Meetup',\n\t\t'mixcloud.com' => 'Mixcloud',\n\t\t'photobucket.com' => 'Photobucket',\n\t\t'poll.fm' => 'Crowdsignal',\n\t\t'polldaddy.com' => 'Crowdsignal',\n\t\t'reddit.com' => 'Reddit',\n\t\t'reverbnation.com' => 'ReverbNation',\n\t\t'scribd.com' => 'Scribd',\n\t\t'sketchfab.com' => 'Sketchfab',\n\t\t'slideshare.net' => 'SlideShare',\n\t\t'smugmug.com' => 'SmugMug',\n\t\t'soundcloud.com' => 'SoundCloud',\n\t\t'speakerdeck.com' => 'Speaker Deck',\n\t\t'spotify.com' => 'Spotify',\n\t\t'survey.fm' => 'Crowdsignal',\n\t\t'tiktok.com' => 'TikTok',\n\t\t'ted.com' => 'TED',\n\t\t'tumblr.com' => 'Tumblr',\n\t\t'twitter.com' => 'Twitter',\n\t\t'videopress.com' => 'VideoPress',\n\t\t'vimeo.com' => 'Vimeo',\n\t\t'wordpress.org/plugins' => 'WordPress.org',\n\t\t'wordpress.tv' => 'WordPress.tv',\n\t\t'youtu.be' => 'YouTube',\n\t\t'youtube.com' => 'YouTube',\n\t];\n\t\n\t/**\n\t * Embed Privacy constructor.\n\t */\n\tpublic function __construct() {\n\t\t// assign variables\n\t\t$this->usecache = ! \\is_admin();\n\t}\n\t\n\t/**\n\t * Initialize the class.\n\t * \n\t * @since\t1.2.0\n\t */\n\tpublic function init() {\n\t\t// actions\n\t\t\\add_action( 'init', [ $this, 'load_textdomain' ], 0 );\n\t\t\\add_action( 'init', [ $this, 'register_assets' ] );\n\t\t\\add_action( 'init', [ $this, 'set_post_type' ], 5 );\n\t\t\\add_action( 'save_post_epi_embed', [ $this, 'preserve_backslashes' ] );\n\t\t\\add_action( 'wp_enqueue_scripts', [ $this, 'deregister_assets' ], 100 );\n\t\t\n\t\t// filters\n\t\tif ( ! $this->usecache ) {\n\t\t\t// set ttl to 0 in admin\n\t\t\t\\add_filter( 'oembed_ttl', '__return_zero' );\n\t\t}\n\t\t\n\t\t\\add_filter( 'acf_the_content', [ $this, 'replace_embeds' ] );\n\t\t\\add_filter( 'do_shortcode_tag', [ $this, 'replace_embeds' ], 10, 2 );\n\t\t\\add_filter( 'do_shortcode_tag', [ $this, 'replace_maps_marker' ], 10, 2 );\n\t\t\\add_filter( 'embed_oembed_html', [ $this, 'replace_embeds_oembed' ], 10, 3 );\n\t\t\\add_filter( 'embed_privacy_widget_output', [ $this, 'replace_embeds' ] );\n\t\t\\add_filter( 'et_builder_get_oembed', [ $this, 'replace_embeds_divi' ], 10, 2 );\n\t\t\\add_filter( 'pll_get_post_types', [ $this, 'register_polylang_post_type' ], 10, 2 );\n\t\t\\add_filter( 'the_content', [ $this, 'replace_embeds' ] );\n\t\t\\add_filter( 'wp_video_shortcode', [ $this, 'replace_video_shortcode' ], 10, 2 );\n\t\t\\add_shortcode( 'embed_privacy_opt_out', [ $this, 'shortcode_opt_out' ] );\n\t\t\\register_activation_hook( $this->plugin_file, [ $this, 'clear_embed_cache' ] );\n\t\t\\register_deactivation_hook( $this->plugin_file, [ $this, 'clear_embed_cache' ] );\n\t\t\n\t\tAdmin::get_instance()->init();\n\t\tFields::get_instance()->init();\n\t\tMigration::get_instance()->init();\n\t\tThumbnails::get_instance()->init();\n\t}\n\t\n\t/**\n\t * Embeds are cached in the postmeta database table and need to be removed\n\t * whenever the plugin will be enabled or disabled.\n\t */\n\tpublic function clear_embed_cache() {\n\t\tglobal $wpdb;\n\t\t\n\t\t// phpcs:disable WordPress.DB.DirectDatabaseQuery.DirectQuery,WordPress.DB.DirectDatabaseQuery.NoCaching\n\t\tif ( \\is_plugin_active_for_network( 'embed-privacy/embed-privacy.php' ) ) {\n\t\t\t// on networks we need to iterate through every site\n\t\t\t$sites = \\get_sites( [\n\t\t\t\t'fields' => 'ids',\n\t\t\t\t'number' => 99999,\n\t\t\t] );\n\t\t\t\n\t\t\tforeach ( $sites as $blog_id ) {\n\t\t\t\t$wpdb->query(\n\t\t\t\t\t$wpdb->prepare(\n\t\t\t\t\t\t// phpcs:disable WordPress.DB.PreparedSQL.InterpolatedNotPrepared\n\t\t\t\t\t\t\"DELETE FROM\t$wpdb->get_blog_prefix( $blog_id )postmeta\n\t\t\t\t\t\tWHERE\t\t\tmeta_key LIKE %s\",\n\t\t\t\t\t\t// phpcs:enable WordPress.DB.PreparedSQL.InterpolatedNotPrepared\n\t\t\t\t\t\t[ '%_oembed_%' ]\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$wpdb->query(\n\t\t\t\t$wpdb->prepare(\n\t\t\t\t\t\"DELETE FROM\t$wpdb->postmeta\n\t\t\t\t\tWHERE\t\t\tmeta_key LIKE %s\",\n\t\t\t\t\t[ '%_oembed_%' ]\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t\t//phpcs:enable\n\t}\n\t\n\t/**\n\t * Deregister assets.\n\t * \n\t * @since\t1.4.6\n\t */\n\tpublic function deregister_assets() {\n\t\t\\wp_deregister_script( 'jetpack-facebook-embed' );\n\t}\n\t\n\t/**\n\t * Enqueue our assets for the frontend.\n\t * \n\t * @deprecated\t1.4.4 Use Embed_Privacy::print_assets() instead\n\t */\n\tpublic function enqueue_assets() { }\n\t\n\t/**\n\t * Get the Embed Privacy cookie.\n\t * \n\t * @return\tmixed The content of the cookie\n\t */\n\tpublic function get_cookie() {\n\t\tif ( empty( $_COOKIE['embed-privacy'] ) ) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\tif ( ! empty( $this->cookie ) ) {\n\t\t\treturn $this->cookie;\n\t\t}\n\t\t\n\t\t$this->cookie = \\json_decode( \\sanitize_text_field( \\wp_unslash( $_COOKIE['embed-privacy'] ) ) );\n\t\t\n\t\treturn $this->cookie;\n\t}\n\t\n\t/**\n\t * Get filters for Elementor.\n\t * \n\t * @since\t\t1.3.0\n\t * @deprecated\t1.3.5\n\t * @noinspection PhpUnused\n\t */\n\tpublic function get_elementor_filters() {\n\t\tif ( ! $this->is_elementor() ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// doesn't currently run with YouTube\n\t\t// see https://github.com/elementor/elementor/issues/14276\n\t\t\\add_filter( 'oembed_result', [ $this, 'replace_embeds' ], 10, 3 );\n\t}\n\t\n\t/**\n\t * Get an overlay for Elementor YouTube videos.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\tstring\t$content The content\n\t * @return\tstring The content with an embed overlay (if needed)\n\t */\n\tprivate function get_elementor_youtube_overlay( $content ) {\n\t\t$embed_provider = $this->get_embed_by_name( 'youtube' );\n\t\t$replacements = [];\n\t\t\n\t\t// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $content . '</html>',\n\t\t\tLIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t$template_dom = new DOMDocument();\n\t\t\n\t\tforeach ( $dom->getElementsByTagName( 'div' ) as $element ) {\n\t\t\tif ( \\strpos( $element->getAttribute( 'data-settings' ), 'youtube_url' ) === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t$settings = \\json_decode( $element->getAttribute( 'data-settings' ) );\n\t\t\t$args = [];\n\t\t\t\n\t\t\tif ( ! empty( $settings->youtube_url ) ) {\n\t\t\t\t$args['embed_url'] = $settings->youtube_url;\n\t\t\t}\n\t\t\t\n\t\t\t// get overlay template as DOM element\n\t\t\t$template_dom->loadHTML(\n\t\t\t\t'<html><meta charset=\"utf-8\">' . $this->get_output_template( $embed_provider->post_title, $embed_provider->post_name, $dom->saveHTML( $element ), $args ) . '</html>',\n\t\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t\t);\n\t\t\t$overlay = null;\n\t\t\t\n\t\t\tforeach ( $template_dom->getElementsByTagName( 'div' ) as $div ) {\n\t\t\t\tif ( \\stripos( $div->getAttribute( 'class' ), 'embed-privacy-container' ) !== false ) {\n\t\t\t\t\t$overlay = $div;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// store the elements to replace (see regressive loop down below)\n\t\t\tif ( $overlay instanceof DOMNode || $overlay instanceof DOMElement ) {\n\t\t\t\t$replacements[] = [\n\t\t\t\t\t'element' => $element,\n\t\t\t\t\t'replace' => $dom->importNode( $overlay, true ),\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( ! empty( $replacements ) ) {\n\t\t\t$this->did_replacements = \\array_merge( $this->did_replacements, $replacements );\n\t\t\t$this->has_embed = true;\n\t\t\t$elements = $dom->getElementsByTagName( 'div' );\n\t\t\t$i = $elements->length - 1;\n\t\t\t\n\t\t\t// use regressive loop for replaceChild()\n\t\t\t// see: https://www.php.net/manual/en/domnode.replacechild.php#50500\n\t\t\twhile ( $i > -1 ) {\n\t\t\t\t$element = $elements->item( $i );\n\t\t\t\t\n\t\t\t\tforeach ( $replacements as $replacement ) {\n\t\t\t\t\tif ( $replacement['element'] === $element ) {\n\t\t\t\t\t\t$element->parentNode->replaceChild( $replacement['replace'], $replacement['element'] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$i--;\n\t\t\t}\n\t\t\t\n\t\t\t$content = \\str_replace( [ '<html><meta charset=\"utf-8\">', '</html>' ], '', $dom->saveHTML( $dom->documentElement ) );\n\t\t}\n\t\t\n\t\t\\libxml_use_internal_errors( false );\n\t\t// phpcs:enable\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Get an embed provider by its name.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\tstring\t$name The name to search for\n\t * @return\t\\WP_Post|null The embed or null\n\t */\n\tpublic function get_embed_by_name( $name ) {\n\t\tif ( empty( $name ) ) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t$embed_providers = $this->get_embeds();\n\t\t$embed = null;\n\t\t$pattern = '/^' . \\preg_quote( $name, '/' ) . '\\-\\d+/';\n\t\t\n\t\tforeach ( $embed_providers as $embed_provider ) {\n\t\t\tif ( $embed_provider->post_name !== $name && ! \\preg_match( $pattern, $embed_provider->post_name ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t$embed = $embed_provider;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\treturn $embed;\n\t}\n\t\n\t/**\n\t * Get an embed provider overlay.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\t\\WP_Post\t$provider An embed provider\n\t * @param\tstring\t\t$content The content\n\t * @return\tstring The content with additional overlays of an embed provider\n\t */\n\tprivate function get_embed_overlay( $provider, $content ) {\n\t\t// make sure to test every provider for its always active state\n\t\tif ( $this->is_always_active_provider( $provider->post_name ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t$regex = \\trim( \\get_post_meta( $provider->ID, 'regex_default', true ), '/' );\n\t\t\n\t\tif ( ! empty( $regex ) ) {\n\t\t\t$regex = '/' . $regex . '/';\n\t\t}\n\t\t\n\t\t// get overlay for this provider\n\t\tif ( ! empty( $regex ) && \\preg_match( $regex, $content ) ) {\n\t\t\t$this->has_embed = true;\n\t\t\t$args['regex'] = $regex;\n\t\t\t$args['post_id'] = $provider->ID;\n\t\t\t$embed_provider = $provider->post_title;\n\t\t\t$embed_provider_lowercase = $provider->post_name;\n\t\t\t$content = $this->get_single_overlay( $content, $embed_provider, $embed_provider_lowercase, $args );\n\t\t}\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Get a specific type of embeds.\n\t * \n\t * For more information on the accepted arguments in $args, see the\n\t * {@link https://developer.wordpress.org/reference/classes/wp_query/\n\t * WP_Query} documentation in the Developer Handbook.\n\t * \n\t * @since\t1.3.0\n\t * @since\t1.8.0 Added the $args parameter\n\t * \n\t * @param\tstring\t$type The embed type\n\t * @param\tarray\t$args Additional arguments\n\t * @return\tarray A list of embeds\n\t */\n\tpublic function get_embeds( $type = 'all', $args = [] ) {\n\t\tif ( ! empty( $this->embeds ) && isset( $this->embeds[ $type ] ) ) {\n\t\t\treturn $this->embeds[ $type ];\n\t\t}\n\t\t\n\t\tif ( $type === 'all' && isset( $this->embeds['custom'] ) && isset( $this->embeds['oembed'] ) ) {\n\t\t\t$this->embeds[ $type ] = \\array_merge( $this->embeds['custom'], $this->embeds['oembed'] );\n\t\t\t\n\t\t\treturn $this->embeds[ $type ];\n\t\t}\n\t\t\n\t\tif ( ! empty( $args ) ) {\n\t\t\t$hash = \\md5( \\wp_json_encode( $args ) );\n\t\t}\n\t\t\n\t\t// phpcs:disable WordPress.DB.SlowDBQuery.slow_db_query_meta_query\n\t\tswitch ( $type ) {\n\t\t\tcase 'custom':\n\t\t\t\t$custom_providers = \\get_posts( \\array_merge( [\n\t\t\t\t\t'meta_query' => [\n\t\t\t\t\t\t'relation' => 'OR',\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'compare' => 'NOT EXISTS',\n\t\t\t\t\t\t\t'key' => 'is_system',\n\t\t\t\t\t\t\t'value' => 'yes',\n\t\t\t\t\t\t],\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\t'compare' => '!=',\n\t\t\t\t\t\t\t'key' => 'is_system',\n\t\t\t\t\t\t\t'value' => 'yes',\n\t\t\t\t\t\t],\n\t\t\t\t\t],\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'numberposts' => -1,\n\t\t\t\t\t'order' => 'ASC',\n\t\t\t\t\t'orderby' => 'post_title',\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t$google_provider = \\get_posts( \\array_merge( [\n\t\t\t\t\t'meta_key' => 'is_system',\n\t\t\t\t\t'meta_value' => 'yes',\n\t\t\t\t\t'name' => 'google-maps',\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t\n\t\t\t\tif ( ! empty( $hash ) ) {\n\t\t\t\t\t$this->embeds[ $hash ] = \\array_merge( $custom_providers, $google_provider );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$this->embeds[ $type ] = \\array_merge( $custom_providers, $google_provider );\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'oembed':\n\t\t\t\t$embed_providers = \\get_posts( \\array_merge( [\n\t\t\t\t\t'meta_key' => 'is_system',\n\t\t\t\t\t'meta_value' => 'yes',\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'numberposts' => -1,\n\t\t\t\t\t'order' => 'ASC',\n\t\t\t\t\t'orderby' => 'post_title',\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t\n\t\t\t\tif ( ! empty( $hash ) ) {\n\t\t\t\t\t$this->embeds[ $hash ] = $embed_providers;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$this->embeds[ $type ] = $embed_providers;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'all':\n\t\t\tdefault:\n\t\t\t\t$embed_providers = \\get_posts( \\array_merge( [\n\t\t\t\t\t'no_found_rows' => true,\n\t\t\t\t\t'numberposts' => -1,\n\t\t\t\t\t'order' => 'ASC',\n\t\t\t\t\t'orderby' => 'post_title',\n\t\t\t\t\t'post_type' => 'epi_embed',\n\t\t\t\t\t'update_post_term_cache' => false,\n\t\t\t\t], $args ) );\n\t\t\t\t\n\t\t\t\tif ( ! empty( $hash ) ) {\n\t\t\t\t\t$this->embeds[ $hash ] = $embed_providers;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t$this->embeds['all'] = $embed_providers;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\t// phpcs:enable\n\t\t\n\t\tif ( ! empty( $hash ) ) {\n\t\t\treturn $this->embeds[ $hash ];\n\t\t}\n\t\t\n\t\treturn $this->embeds[ $type ];\n\t}\n\t\n\t/**\n\t * Get a list with ignored shortcodes.\n\t * \n\t * @since\t1.6.0\n\t * \n\t * @return\tstring[] List with ignored shortcodes\n\t */\n\tpublic function get_ignored_shortcodes() {\n\t\t/**\n\t\t * Filter the ignored shortcodes list.\n\t\t * \n\t\t * @since\t1.6.0\n\t\t * \n\t\t * @param\tstring[]\t$ignored_shortcodes Current list of ignored shortcodes\n\t\t */\n\t\t$this->ignored_shortcodes = \\apply_filters( 'embed_privacy_ignored_shortcodes', $this->ignored_shortcodes );\n\t\t\n\t\treturn $this->ignored_shortcodes;\n\t}\n\t\n\t/**\n\t * Get a unique instance of the class.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @return\t\\epiphyt\\Embed_Privacy\\Embed_Privacy The single instance of this class\n\t */\n\tpublic static function get_instance() {\n\t\tif ( self::$instance === null ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\t\n\t\treturn self::$instance;\n\t}\n\t\n\t/**\n\t * Transform a tweet into a local one.\n\t * \n\t * @since\t1.3.0\n\t * \n\t * @param\tstring\t$html Embed code\n\t * @return\tstring Local embed\n\t */\n\tprivate function get_local_tweet( $html ) {\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $html . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t\n\t\t// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase\n\t\t// remove script tag\n\t\tforeach ( $dom->getElementsByTagName( 'script' ) as $script ) {\n\t\t\t$script->parentNode->removeChild( $script );\n\t\t}\n\t\t\n\t\t$xpath = new DOMXPath( $dom );\n\t\t\n\t\t// get text node, which represents the author name\n\t\t// and give it a span with class\n\t\tforeach ( $xpath->query( '//blockquote/text()' ) as $node ) {\n\t\t\t$author_node = $dom->createElement( 'span', $node->nodeValue );\n\t\t\t$author_node->setAttribute( 'class', 'embed-privacy-author-meta' );\n\t\t\t$node->parentNode->replaceChild( $author_node, $node );\n\t\t}\n\t\t\n\t\t// wrap author name by a meta div\n\t\tforeach ( $dom->getElementsByTagName( 'span' ) as $node ) {\n\t\t\tif ( $node->getAttribute( 'class' ) !== 'embed-privacy-author-meta' ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// create meta cite\n\t\t\t$parent_node = $dom->createElement( 'cite' );\n\t\t\t$parent_node->setAttribute( 'class', 'embed-privacy-tweet-meta' );\n\t\t\t// append created cite to blockquote\n\t\t\t$node->parentNode->appendChild( $parent_node );\n\t\t\t// move author meta inside meta cite\n\t\t\t$parent_node->appendChild( $node );\n\t\t}\n\t\t\n\t\tforeach ( $dom->getElementsByTagName( 'a' ) as $link ) {\n\t\t\tif ( ! \\preg_match( '/https?:\\/\\/twitter.com\\/([^\\/]+)\\/status\\/(\\d+)/', $link->getAttribute( 'href' ) ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// modify date in link to tweet\n\t\t\t$l10n_date = \\wp_date( \\get_option( 'date_format' ), \\strtotime( $link->nodeValue ) );\n\t\t\t\n\t\t\tif ( \\is_string( $l10n_date ) ) {\n\t\t\t\t$link->nodeValue = $l10n_date;\n\t\t\t}\n\t\t\t\n\t\t\t// move link inside meta div\n\t\t\tif ( isset( $parent_node ) && $parent_node instanceof DOMElement ) {\n\t\t\t\t$parent_node->appendChild( $link );\n\t\t\t}\n\t\t}\n\t\t\n\t\t$content = $dom->saveHTML( $dom->documentElement );\n\t\t// phpcs:enable\n\t\t\n\t\treturn \\str_replace( [ '<html><meta charset=\"utf-8\">', '</html>' ], [ '<div class=\"embed-privacy-local-tweet\">', '</div>' ], $content );\n\t}\n\t\n\t/**\n\t * Get en oEmbed title by its title attribute.\n\t * \n\t * @since\t1.6.4\n\t * \n\t * @param\tstring\t$content The content to get the title of\n\t * @return\tarray The dimensions or an empty array\n\t */\n\tprivate function get_oembed_dimensions( $content ) {\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $content . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t\\libxml_use_internal_errors( false );\n\t\t\n\t\tforeach ( [ 'embed', 'iframe', 'img', 'object' ] as $tag ) {\n\t\t\tforeach ( $dom->getElementsByTagName( $tag ) as $element ) {\n\t\t\t\t$height = $element->getAttribute( 'height' );\n\t\t\t\t$width = $element->getAttribute( 'width' );\n\t\t\t\t\n\t\t\t\tif ( $height && $width ) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t'height' => $height,\n\t\t\t\t\t\t'width' => $width,\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn [];\n\t}\n\t\n\t/**\n\t * Get en oEmbed title by its title attribute.\n\t * \n\t * @since\t1.4.0\n\t * \n\t * @param\tstring\t$content The content to get the title of\n\t * @return\tstring The title or an empty string\n\t */\n\tprivate function get_oembed_title( $content ) {\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . $content . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t\\libxml_use_internal_errors( false );\n\t\t\n\t\tforeach ( [ 'embed', 'iframe', 'object' ] as $tag ) {\n\t\t\tforeach ( $dom->getElementsByTagName( $tag ) as $element ) {\n\t\t\t\t$title = $element->getAttribute( 'title' );\n\t\t\t\t\n\t\t\t\tif ( $title ) {\n\t\t\t\t\treturn $title;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn '';\n\t}\n\t\n\t/**\n\t * Output a complete template of the overlay.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @param\tstring\t$embed_provider The embed provider\n\t * @param\tstring\t$embed_provider_lowercase The embed provider without spaces and in lowercase\n\t * @param\tstring\t$output The output before replacing it\n\t * @param\tarray\t$args Additional arguments\n\t * @return\tstring The overlay template\n\t */\n\tpublic function get_output_template( $embed_provider, $embed_provider_lowercase, $output, $args = [] ) {\n\t\tif ( ! empty( $args['post_id'] ) ) {\n\t\t\t$embed_post = \\get_post( $args['post_id'] );\n\t\t\t\n\t\t\t// if provider is disabled, to nothing\n\t\t\tif ( \\get_post_meta( $embed_post->ID, 'is_disabled', true ) === 'yes' ) {\n\t\t\t\treturn $output;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$embed_post = null;\n\t\t}\n\t\t\n\t\tif ( $embed_provider_lowercase === 'youtube' ) {\n\t\t\t$output = \\str_replace( 'youtube.com', 'youtube-nocookie.com', $output );\n\t\t}\n\t\t\n\t\t$embed_provider_lowercase = \\sanitize_title( $embed_provider_lowercase );\n\t\t$embed_class = 'embed-' . ( ! empty( $embed_provider_lowercase ) ? $embed_provider_lowercase : 'default' );\n\t\t$embed_classes = $embed_class;\n\t\t\n\t\t$background_path = '';\n\t\t$background_url = '';\n\t\t$embed_thumbnail = [\n\t\t\t'thumbnail_path' => '',\n\t\t\t'thumbnail_url' => '',\n\t\t];\n\t\t$logo_path = '';\n\t\t$logo_url = '';\n\t\t\n\t\tif ( ! empty( $args['align'] ) ) {\n\t\t\t$embed_classes .= ' align' . $args['align'];\n\t\t}\n\t\t\n\t\t// display embed provider background image and logo\n\t\tif ( $embed_post ) {\n\t\t\t$background_image_id = \\get_post_meta( $embed_post->ID, 'background_image', true );\n\t\t\t$thumbnail_id = \\get_post_thumbnail_id( $embed_post );\n\t\t}\n\t\telse {\n\t\t\t$background_image_id = null;\n\t\t\t$thumbnail_id = null;\n\t\t}\n\t\t\n\t\tif ( $background_image_id ) {\n\t\t\t$background_path = \\get_attached_file( $background_image_id );\n\t\t\t$background_url = \\wp_get_attachment_url( $background_image_id );\n\t\t}\n\t\t\n\t\tif ( $thumbnail_id ) {\n\t\t\t$logo_path = \\get_attached_file( $thumbnail_id );\n\t\t\t$logo_url = \\get_the_post_thumbnail_url( $args['post_id'] );\n\t\t}\n\t\telse if ( \\file_exists( \\plugin_dir_path( $this->plugin_file ) . 'assets/images/embed-' . $embed_provider_lowercase . '.png' ) ) {\n\t\t\t$logo_path = \\plugin_dir_path( $this->plugin_file ) . 'assets/images/embed-' . $embed_provider_lowercase . '.png';\n\t\t\t$logo_url = \\plugin_dir_url( $this->plugin_file ) . 'assets/images/embed-' . $embed_provider_lowercase . '.png';\n\t\t}\n\t\t\n\t\tif ( ! empty( $args['embed_url'] ) && \\get_option( 'embed_privacy_download_thumbnails' ) ) {\n\t\t\t$embed_thumbnail = Thumbnails::get_instance()->get_data( \\get_post(), $args['embed_url'] );\n\t\t}\n\t\t\n\t\tif ( ! empty( $args['assets'] ) && \\is_array( $args['assets'] ) ) {\n\t\t\t/**\n\t\t\t * Filter the additional assets of an embed provider.\n\t\t\t * \n\t\t\t * @since\t1.4.5\n\t\t\t * \n\t\t\t * @param\tarray\t$assets List of embed assets\n\t\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t\t */\n\t\t\t$args['assets'] = \\apply_filters( \"embed_privacy_assets_$embed_provider_lowercase\", $args['assets'], $embed_provider_lowercase );\n\t\t\t\n\t\t\t$output = $this->print_embed_assets( $args['assets'], $output );\n\t\t}\n\t\t\n\t\t/**\n\t\t * Filter the path to the background image.\n\t\t * \n\t\t * @param\tstring\t$background_path The default background path\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$background_path = \\apply_filters( \"embed_privacy_background_path_$embed_provider_lowercase\", $background_path, $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the URL to the background image.\n\t\t * \n\t\t * @param\tstring\t$background_url The default background URL\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$background_url = \\apply_filters( \"embed_privacy_background_url_$embed_provider_lowercase\", $background_url, $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the path to the thumbnail.\n\t\t * \n\t\t * @param\tstring\t$thumbnail_path The default thumbnail path\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$embed_thumbnail['thumbnail_path'] = \\apply_filters( \"embed_privacy_thumbnail_path_$embed_provider_lowercase\", $embed_thumbnail['thumbnail_path'], $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the URL to the thumbnail.\n\t\t * \n\t\t * @param\tstring\t$thumbnail_url The default thumbnail URL\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$embed_thumbnail['thumbnail_url'] = \\apply_filters( \"embed_privacy_thumbnail_url_$embed_provider_lowercase\", $embed_thumbnail['thumbnail_url'], $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the path to the logo.\n\t\t * \n\t\t * @param\tstring\t$logo_path The default logo path\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$logo_path = \\apply_filters( \"embed_privacy_logo_path_$embed_provider_lowercase\", $logo_path, $embed_provider_lowercase );\n\t\t\n\t\t/**\n\t\t * Filter the URL to the logo.\n\t\t * \n\t\t * @param\tstring\t$logo_url The default logo URL\n\t\t * @param\tstring\t$embed_provider_lowercase The current embed provider in lowercase\n\t\t */\n\t\t$logo_url = \\apply_filters( \"embed_privacy_logo_url_$embed_provider_lowercase\", $logo_url, $embed_provider_lowercase );\n\t\t\n\t\t$embed_md5 = \\md5( $output . \\wp_generate_uuid4() );\n\t\t\n\t\t\\ob_start();\n\t\t?>\n\t\t<p>\n\t\t<?php\n\t\t\tif ( ! empty( $embed_provider ) ) {\n\t\t\t\tif ( $embed_post ) {\n\t\t\t\t\t$allowed_tags = [\n\t\t\t\t\t\t'a' => [\n\t\t\t\t\t\t\t'href',\n\t\t\t\t\t\t\t'target',\n\t\t\t\t\t\t],\n\t\t\t\t\t];\n\t\t\t\t\techo $embed_post->post_content . \\PHP_EOL; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped\n\t\t\t\t\t$privacy_policy = \\get_post_meta( $embed_post->ID, 'privacy_policy_url', true );\n\t\t\t\t\t\n\t\t\t\t\tif ( $privacy_policy ) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<br>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t/* translators: 1: the embed provider, 2: opening <a> tag to the privacy policy, 3: closing </a> */\n\t\t\t\t\t\t\\printf( \\wp_kses( \\__( 'Learn more in %1$s\u2019s %2$sprivacy policy%3$s.', 'embed-privacy' ), $allowed_tags ), \\esc_html( $embed_provider ), '<a href=\"' . \\esc_url( $privacy_policy ) . '\" target=\"_blank\">', '</a>' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t/* translators: the embed provider */\n\t\t\t\t\t\\printf( \\esc_html__( 'Click here to display content from %s', 'embed-privacy' ), \\esc_html( $embed_provider ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\\esc_html_e( 'Click here to display content from an external service.', 'embed-privacy' );\n\t\t\t}\n\t\t?>\n\t\t</p>\n\t\t<?php\n\t\t$checkbox_id = 'embed-privacy-store-' . $embed_provider_lowercase . '-' . $embed_md5;\n\t\t\n\t\tif ( $embed_provider_lowercase !== 'default' ) {\n\t\t\t?>\n\t\t\t<p class=\"embed-privacy-input-wrapper\">\n\t\t\t\t<input id=\"<?php echo \\esc_attr( $checkbox_id ); ?>\" type=\"checkbox\" value=\"1\" class=\"embed-privacy-input\" data-embed-provider=\"<?php echo \\esc_attr( $embed_provider_lowercase ); ?>\">\n\t\t\t\t<label for=\"<?php echo \\esc_attr( $checkbox_id ); ?>\" class=\"embed-privacy-label\" data-embed-provider=\"<?php echo \\esc_attr( $embed_provider_lowercase ); ?>\">\n\t\t\t\t\t<?php\n\t\t\t\t\t/* translators: the embed provider */\n\t\t\t\t\t\\printf( \\esc_html__( 'Always display content from %s', 'embed-privacy' ), \\esc_html( $embed_provider ) );\n\t\t\t\t\t?>\n\t\t\t\t</label>\n\t\t\t</p>\n\t\t\t<?php\n\t\t}\n\t\t\n\t\t$content = \\ob_get_clean();\n\t\t\n\t\t/**\n\t\t * Filter the content of the embed overlay.\n\t\t * \n\t\t * @param\tstring\t\t$content The content\n\t\t * @param\tstring\t\t$embed_provider The embed provider of this embed\n\t\t */\n\t\t$content = \\apply_filters( 'embed_privacy_content', $content, $embed_provider );\n\t\t\n\t\t\\ob_start();\n\t\t\n\t\t$footer_content = '';\n\t\t\n\t\tif ( ! empty( $args['embed_url'] ) ) {\n\t\t\t$footer_content = '<div class=\"embed-privacy-footer\">';\n\t\t\t\n\t\t\tif ( ! \\get_option( 'embed_privacy_disable_link' ) ) {\n\t\t\t\t$footer_content .= '<span class=\"embed-privacy-url\"><a href=\"' . \\esc_url( $args['embed_url'] ) . '\">';\n\t\t\t\t$footer_content .= \\sprintf(\n\t\t\t\t/* translators: content name or 'content' */\n\t\t\t\t\t\\esc_html__( 'Open %s directly', 'embed-privacy' ),\n\t\t\t\t\t! empty( $args['embed_title'] ) ? $args['embed_title'] : \\__( 'content', 'embed-privacy' )\n\t\t\t\t);\n\t\t\t\t$footer_content .= '</a></span>';\n\t\t\t}\n\t\t\t\n\t\t\t$footer_content .= '</div>' . \\PHP_EOL;\n\t\t\t\n\t\t\t/**\n\t\t\t * Filter the overlay footer.\n\t\t\t * \n\t\t\t * @param\tstring\t$footer_content The footer content\n\t\t\t */\n\t\t\t$footer_content = \\apply_filters( 'embed_privacy_overlay_footer', $footer_content );\n\t\t}\n\t\t?>\n\t\t<div class=\"embed-privacy-container is-disabled <?php echo \\esc_attr( $embed_classes ); ?>\" data-embed-id=\"oembed_<?php echo \\esc_attr( $embed_md5 ); ?>\" data-embed-provider=\"<?php echo \\esc_attr( $embed_provider_lowercase ); ?>\"<?php echo ( ! empty( $embed_thumbnail['thumbnail_path'] ) && \\file_exists( $embed_thumbnail['thumbnail_path'] ) ? ' style=\"background-image: url(' . \\esc_url( $embed_thumbnail['thumbnail_url'] ) . ');\"' : '' ); ?>>\n\t\t\t<?php /* translators: embed provider */ ?>\n\t\t\t<button class=\"embed-privacy-enable screen-reader-text\"><?php \\printf( \\esc_html__( 'Display content from %s', 'embed-privacy' ), \\esc_html( $embed_provider ) ); ?></button>\n\t\t\t\n\t\t\t<div class=\"embed-privacy-overlay\">\n\t\t\t\t<div class=\"embed-privacy-inner\">\n\t\t\t\t\t<?php\n\t\t\t\t\techo ( \\file_exists( $logo_path ) ? '<div class=\"embed-privacy-logo\"></div>' . \\PHP_EOL : '' );\n\t\t\t\t\techo $content . \\PHP_EOL; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped\n\t\t\t\t\t?>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<?php echo $footer_content; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>\n\t\t\t</div>\n\t\t\t\n\t\t\t<div class=\"embed-privacy-content\">\n\t\t\t\t<script>var _oembed_<?php echo $embed_md5; ?> = '<?php echo \\addslashes( \\wp_json_encode( [ 'embed' => \\htmlentities( \\preg_replace( '/\\s+/S', ' ', $output ) ) ] ) ); // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped ?>';</script>\n\t\t\t</div>\n\t\t\t\n\t\t\t<style>\n\t\t\t\t<?php\n\t\t\t\tif ( ! empty( $args['height'] ) && ! empty( $args['width'] ) && empty( $args['ignore_aspect_ratio'] ) ) {\n\t\t\t\t\t// if height is in percentage, we cannot determine the aspect ratio\n\t\t\t\t\tif ( \\strpos( $args['height'], '%' ) !== false ) {\n\t\t\t\t\t\t$args['ignore_aspect_ratio'] = true;\n\t\t\t\t\t}\n\t\t\t\t\t// if width is in percentage, we need to use the content width\n\t\t\t\t\t// since we cannot determine the actual width\n\t\t\t\t\tif ( \\strpos( $args['width'], '%' ) !== false ) {\n\t\t\t\t\t\tglobal $content_width;\n\t\t\t\t\t\t\n\t\t\t\t\t\t$args['width'] = $content_width;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\\printf(\n\t\t\t\t\t\t'[data-embed-id=\"oembed_%1$s\"] {\n\t\t\t\t\t\t\taspect-ratio: %2$s;\n\t\t\t\t\t\t}',\n\t\t\t\t\t\t\\esc_attr( $embed_md5 ),\n\t\t\t\t\t\t\\esc_html( $args['width'] . '/' . $args['height'] )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$is_debug = \\defined( 'WP_DEBUG' ) && WP_DEBUG;\n\t\t\t\t\n\t\t\t\t// display only if file exists\n\t\t\t\tif ( \\file_exists( $background_path ) ) {\n\t\t\t\t\t$version = $is_debug ? \\filemtime( $background_path ) : EMBED_PRIVACY_VERSION;\n\t\t\t\t\t\n\t\t\t\t\t\\printf(\n\t\t\t\t\t\t'.%1$s {\n\t\t\t\t\t\t\tbackground-image: url(%2$s?v=%3$s);\n\t\t\t\t\t\t}',\n\t\t\t\t\t\t\\esc_html( $embed_class ),\n\t\t\t\t\t\t\\esc_url( $background_url ),\n\t\t\t\t\t\t\\esc_html( $version )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// display only if file exists\n\t\t\t\tif ( \\file_exists( $logo_path ) ) {\n\t\t\t\t\t$version = $is_debug ? \\filemtime( $logo_path ) : EMBED_PRIVACY_VERSION;\n\t\t\t\t\t\n\t\t\t\t\t\\printf(\n\t\t\t\t\t\t'.%1$s {\n\t\t\t\t\t\t\tbackground-image: url(%2$s?v=%3$s);\n\t\t\t\t\t\t}',\n\t\t\t\t\t\t\\esc_html( $embed_class . ' .embed-privacy-logo' ),\n\t\t\t\t\t\t\\esc_url( $logo_url ),\n\t\t\t\t\t\t\\esc_html( $version )\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</style>\n\t\t</div>\n\t\t<?php\n\t\t$markup = \\ob_get_clean();\n\t\t\n\t\t/**\n\t\t * Filter the complete markup of the embed.\n\t\t * \n\t\t * @param\tstring\t$markup The markup\n\t\t * @param\tstring\t$embed_provider The embed provider of this embed\n\t\t */\n\t\t$markup = \\apply_filters( 'embed_privacy_markup', $markup, $embed_provider );\n\t\t\n\t\t$this->has_embed = true;\n\t\t\n\t\tif ( ! empty( $args['strip_newlines'] ) ) {\n\t\t\t$markup = \\str_replace( \\PHP_EOL, '', $markup );\n\t\t}\n\t\t\n\t\treturn $markup;\n\t}\n\t\n\t/**\n\t * Get a single overlay for all matching embeds.\n\t * \n\t * @since\t1.2.0\n\t * \n\t * @param\tstring\t$content The original content\n\t * @param\tstring\t$embed_provider The embed provider\n\t * @param\tstring\t$embed_provider_lowercase The embed provider without spaces and in lowercase\n\t * @param\tarray\t$args Additional arguments\n\t * @return\tstring The updated content\n\t */\n\tpublic function get_single_overlay( $content, $embed_provider, $embed_provider_lowercase, $args ) {\n\t\tif ( empty( $content ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t$args = \\wp_parse_args( $args, [\n\t\t\t'additional_checks' => [],\n\t\t\t'check_always_active' => false,\n\t\t\t'element_attribute' => 'src',\n\t\t\t'elements' => [ 'embed', 'iframe', 'object' ],\n\t\t\t'height' => 0,\n\t\t\t'ignore_aspect_ratio' => false,\n\t\t\t'regex' => '',\n\t\t\t'strip_newlines' => ! \\has_blocks( $content ),\n\t\t\t'width' => 0,\n\t\t] );\n\t\t\n\t\t\\libxml_use_internal_errors( true );\n\t\t$dom = new DOMDocument();\n\t\t$dom->loadHTML(\n\t\t\t'<html><meta charset=\"utf-8\">' . \\str_replace( '%', '%_epi_', $content ) . '</html>',\n\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t);\n\t\t$is_empty_provider = empty( $embed_provider );\n\t\t$template_dom = new DOMDocument();\n\t\t\n\t\tif ( $is_empty_provider ) {\n\t\t\t$providers = $this->get_embeds();\n\t\t}\n\t\t\n\t\t// detect domain if WordPress is installed on a sub domain\n\t\t$host = \\wp_parse_url( \\home_url(), \\PHP_URL_HOST );\n\t\t\n\t\tif ( ! \\filter_var( $host, \\FILTER_VALIDATE_IP ) ) {\n\t\t\t$host_array = \\explode( '.', \\str_replace( 'www.', '', $host ) );\n\t\t\t$tld_count = \\count( $host_array );\n\t\t\t\n\t\t\tif ( $tld_count >= 3 && strlen( $host_array[ $tld_count - 2 ] ) === 2 ) {\n\t\t\t\t$host = \\implode( '.', \\array_splice( $host_array, $tld_count - 3, 3 ) );\n\t\t\t}\n\t\t\telse if ( $tld_count >= 2 ) {\n\t\t\t\t$host = \\implode( '.', \\array_splice( $host_array, $tld_count - 2, $tld_count ) );\n\t\t\t}\n\t\t}\n\t\t\n\t\tforeach ( $args['elements'] as $tag ) {\n\t\t\t$replacements = [];\n\t\t\t\n\t\t\tif ( $tag === 'object' ) {\n\t\t\t\t$args['element_attribute'] = 'data';\n\t\t\t}\n\t\t\t\n\t\t\tforeach ( $dom->getElementsByTagName( $tag ) as $element ) {\n\t\t\t\tif ( ! $this->run_checks( $args['additional_checks'], $element ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// ignore embeds from the same (sub-)domain\n\t\t\t\tif ( \\preg_match( '/https?:\\/\\/(.*\\.)?' . \\preg_quote( $host, '/' ) . '/', $element->getAttribute( $args['element_attribute'] ) ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( ! empty( $args['regex'] ) && ! \\preg_match( $args['regex'], $element->getAttribute( $args['element_attribute'] ) ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// providers need to be explicitly checked if they're always active\n\t\t\t\t// see https://github.com/epiphyt/embed-privacy/issues/115\n\t\t\t\tif ( $embed_provider_lowercase && $args['check_always_active'] && $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\t\t\tif ( ! empty( $args['assets'] ) ) {\n\t\t\t\t\t\t$content = $this->print_embed_assets( $args['assets'], $content );\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn $content;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( $is_empty_provider ) {\n\t\t\t\t\t$embedded_host = \\wp_parse_url( $element->getAttribute( $args['element_attribute'] ), \\PHP_URL_HOST );\n\t\t\t\t\t\n\t\t\t\t\t// embeds with relative paths have no host\n\t\t\t\t\t// and they are local by definition, so do nothing\n\t\t\t\t\t// see https://github.com/epiphyt/embed-privacy/issues/27\n\t\t\t\t\tif ( empty( $embedded_host ) ) {\n\t\t\t\t\t\treturn $content;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$embed_provider = $embedded_host;\n\t\t\t\t\t$embed_provider_lowercase = \\sanitize_title( $embedded_host );\n\t\t\t\t\t\n\t\t\t\t\t// unknown providers need to be explicitly checked if they're always active\n\t\t\t\t\t// see https://github.com/epiphyt/embed-privacy/issues/115\n\t\t\t\t\tif ( $args['check_always_active'] && $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\t\t\t\tif ( ! empty( $args['assets'] ) ) {\n\t\t\t\t\t\t\t$content = $this->print_embed_assets( $args['assets'], $content );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\treturn $content;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// check URL for available provider\n\t\t\t\t\tforeach ( $providers as $provider ) {\n\t\t\t\t\t\t$regex = \\trim( \\get_post_meta( $provider->ID, 'regex_default', true ), '/' );\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ( ! empty( $regex ) ) {\n\t\t\t\t\t\t\t$regex = '/' . $regex . '/';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif ( \\preg_match( $regex, $element->getAttribute( $args['element_attribute'] ) ) && empty( $replacements ) ) {\n\t\t\t\t\t\t\tcontinue 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t/* translators: embed title */\n\t\t\t\t$args['embed_title'] = ! empty( $element->getAttribute( 'title' ) ) ? \\sprintf( \\__( '\"%s\"', 'embed-privacy' ), $element->getAttribute( 'title' ) ) : '';\n\t\t\t\t$args['embed_url'] = $element->getAttribute( $args['element_attribute'] );\n\t\t\t\t$args['height'] = ! empty( $element->getAttribute( 'height' ) ) ? $element->getAttribute( 'height' ) : 0;\n\t\t\t\t$args['width'] = ! empty( $element->getAttribute( 'width' ) ) ? $element->getAttribute( 'width' ) : 0;\n\t\t\t\t\n\t\t\t\t// get overlay template as DOM element\n\t\t\t\t$template_dom->loadHTML(\n\t\t\t\t\t'<html><meta charset=\"utf-8\">' . str_replace( '%', '%_epi_', $this->get_output_template( $embed_provider, $embed_provider_lowercase, $dom->saveHTML( $element ), $args ) ) . '</html>',\n\t\t\t\t\t\\LIBXML_HTML_NOIMPLIED | \\LIBXML_HTML_NODEFDTD\n\t\t\t\t);\n\t\t\t\t$overlay = null;\n\t\t\t\t\n\t\t\t\tforeach ( $template_dom->getElementsByTagName( 'div' ) as $div ) {\n\t\t\t\t\tif ( stripos( $div->getAttribute( 'class' ), 'embed-privacy-container' ) !== false ) {\n\t\t\t\t\t\t$overlay = $div;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// store the elements to replace (see regressive loop down below)\n\t\t\t\tif ( $overlay instanceof DOMNode || $overlay instanceof DOMElement ) {\n\t\t\t\t\t$replacements[] = [\n\t\t\t\t\t\t'element' => $element,\n\t\t\t\t\t\t'replace' => $dom->importNode( $overlay, true ),\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// reset embed provider name\n\t\t\t\tif ( $is_empty_provider ) {\n\t\t\t\t\t$embed_provider = '';\n\t\t\t\t\t$embed_provider_lowercase = '';\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif ( ! empty( $replacements ) ) {\n\t\t\t\t$this->did_replacements = \\array_merge( $this->did_replacements, $replacements );\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$elements = $dom->getElementsByTagName( $tag );\n\t\t\t\t$i = $elements->length - 1;\n\t\t\t\t\n\t\t\t\t// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase\n\t\t\t\t// use regressive loop for replaceChild()\n\t\t\t\t// see: https://www.php.net/manual/en/domnode.replacechild.php#50500\n\t\t\t\twhile ( $i > -1 ) {\n\t\t\t\t\t$element = $elements->item( $i );\n\t\t\t\t\t\n\t\t\t\t\tforeach ( $replacements as $replacement ) {\n\t\t\t\t\t\tif ( $replacement['element'] === $element ) {\n\t\t\t\t\t\t\t$element->parentNode->replaceChild( $replacement['replace'], $replacement['element'] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t$i--;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$content = \\str_replace( '%_epi_', '%', $dom->saveHTML( $dom->documentElement ) );\n\t\t\t\t// phpcs:enable\n\t\t\t}\n\t\t}\n\t\t\n\t\t\\libxml_use_internal_errors( false );\n\t\t\n\t\t// embeds for other elements need to be handled manually\n\t\t// make sure to test before if the regex matches\n\t\t// see: https://github.com/epiphyt/embed-privacy/issues/26\n\t\tif (\n\t\t\tempty( $this->did_replacements )\n\t\t\t&& ! empty( $args['regex'] )\n\t\t\t&& ! $is_empty_provider\n\t\t) {\n\t\t\t$provider = $this->get_embed_by_name( $embed_provider_lowercase );\n\t\t\t\n\t\t\tif (\n\t\t\t\t$provider instanceof WP_Post\n\t\t\t\t&& ! \\get_post_meta( $provider->ID, 'is_system', true )\n\t\t\t\t&& \\get_post_meta( $provider->ID, 'is_disabled', true ) !== 'yes'\n\t\t\t) {\n\t\t\t\t// extend regular expression to match the full element\n\t\t\t\tif ( \\strpos( $args['regex'], '<' ) === false || \\strpos( $args['regex'], '>' ) === false ) {\n\t\t\t\t\t$allowed_tags = [\n\t\t\t\t\t\t'blockquote',\n\t\t\t\t\t\t'div',\n\t\t\t\t\t\t'embed',\n\t\t\t\t\t\t'iframe',\n\t\t\t\t\t\t'object',\n\t\t\t\t\t];\n\t\t\t\t\t\n\t\t\t\t\t/**\n\t\t\t\t\t * Filter allowed HTML tags in regular expressions.\n\t\t\t\t\t * Only elements matching these tags get processed.\n\t\t\t\t\t * \n\t\t\t\t\t * @since\t1.6.0\n\t\t\t\t\t * \n\t\t\t\t\t * @param\tstring[]\t$allowed_tags The allowed tags\n\t\t\t\t\t * @param\tstring\t\t$embed_provider_lowercase The embed provider without spaces and in lowercase\n\t\t\t\t\t * @return\tarray A list of allowed tags\n\t\t\t\t\t */\n\t\t\t\t\t$allowed_tags = \\apply_filters( 'embed_privacy_matcher_elements', $allowed_tags, $embed_provider_lowercase );\n\t\t\t\t\t\n\t\t\t\t\t$tags_regex = '(' . \\implode( '|', \\array_filter( $allowed_tags, function( $tag ) {\n\t\t\t\t\t\treturn \\preg_quote( $tag, '/' );\n\t\t\t\t\t} ) ) . ')';\n\t\t\t\t\t$args['regex'] = '/<' . $tags_regex . '([^\"]*)\"([^<]*)' . \\trim( $args['regex'], '/' ) . '([^\"]*)\"([^>]*)(>(.*)<\\/' . $tags_regex . ')?>/';\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twhile ( \\preg_match( $args['regex'], $content, $matches ) ) {\n\t\t\t\t\t$content = \\preg_replace( $args['regex'], $this->get_output_template( $embed_provider, $embed_provider_lowercase, $matches[0], $args ), $content, 1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// decode to make sure there is nothing left encoded if replacements have been made\n\t\t// otherwise, content is untouched by DOMDocument, and we don't need a decoding\n\t\tif ( ! empty( $this->did_replacements ) ) {\n\t\t\t$content = \\rawurldecode( $content );\n\t\t}\n\t\t\n\t\t// remove root element, see https://github.com/epiphyt/embed-privacy/issues/22\n\t\treturn \\str_replace(\n\t\t\t[\n\t\t\t\t'<html><meta charset=\"utf-8\">',\n\t\t\t\t'</html>',\n\t\t\t\t'%_epi_',\n\t\t\t],\n\t\t\t[\n\t\t\t\t'',\n\t\t\t\t'',\n\t\t\t\t'%',\n\t\t\t],\n\t\t\t$content\n\t\t);\n\t}\n\t\n\t/**\n\t * Check if a post contains an embed.\n\t * \n\t * @since\t1.3.0\n\t * \n\t * @param\t\\WP_Post|int|null\t$post A post object, post ID or null\n\t * @return\tbool True if a post contains an embed, false otherwise\n\t */\n\tpublic function has_embed( $post = null ) {\n\t\tif ( $post === null ) {\n\t\t\tglobal $post;\n\t\t}\n\t\t\n\t\tif ( \\is_numeric( $post ) ) {\n\t\t\t$post = \\get_post( $post ); // phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited\n\t\t}\n\t\t\n\t\t/**\n\t\t * Allow overwriting the return value of has_embed().\n\t\t * If set to anything other than null, this value will be returned.\n\t\t * \n\t\t * @param\tnull\t$has_embed The default value\n\t\t */\n\t\t$has_embed = \\apply_filters( 'embed_privacy_has_embed', null );\n\t\t\n\t\tif ( $has_embed !== null ) {\n\t\t\treturn $has_embed;\n\t\t}\n\t\t\n\t\tif ( ! $post instanceof WP_Post ) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\tif ( $this->has_embed ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\t$embed_providers = $this->get_embeds();\n\t\t\n\t\t// check post content\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t$regex = \\trim( \\get_post_meta( $provider->ID, 'regex_default', true ), '/' );\n\t\t\t\n\t\t\tif ( empty( $regex ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// get overlay for this provider\n\t\t\tif ( \\preg_match( '/' . $regex . '/', $post->post_content ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Determine whether this is an AMP response.\n\t * Note that this must only be called after the parse_query action.\n\t * \n\t * @return\tbool True if the current page is an AMP page, false otherwise\n\t */\n\tprivate function is_amp() {\n\t\t/** @noinspection PhpUndefinedFunctionInspection */\n\t\treturn \\function_exists( 'is_amp_endpoint' ) && \\is_amp_endpoint();\n\t}\n\t\n\t/**\n\t * Check if a provider is always active.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @param\tstring\t\t$provider The embed provider in lowercase\n\t * @return\tbool True if provider is always active, false otherwise\n\t */\n\tpublic function is_always_active_provider( $provider ) {\n\t\t$javascript_detection = \\get_option( 'embed_privacy_javascript_detection' );\n\t\t\n\t\tif ( $javascript_detection ) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\t$cookie = $this->get_cookie();\n\t\t\n\t\tif ( isset( $cookie->{$provider} ) && $cookie->{$provider} === true ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Check if a post is written in Elementor.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @return\tbool True if Elementor is used, false otherwise\n\t */\n\tpublic function is_elementor() {\n\t\tif ( ! function_exists( 'is_plugin_active' ) ) {\n\t\t\tinclude_once ABSPATH . 'wp-admin/includes/plugin.php';\n\t\t}\n\t\t\n\t\tif (\n\t\t\t! \\is_plugin_active( 'elementor/elementor.php' )\n\t\t\t|| ! \\get_the_ID()\n\t\t\t|| ! Plugin::$instance->documents->get( \\get_the_ID() )->is_built_with_elementor()\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Check if the current theme is matching your name.\n\t * \n\t * @since\t1.3.5\n\t * \n\t * @param\tstring\t$name The theme name to test\n\t * @return\tbool True if the current theme is matching, false otherwise\n\t */\n\tpublic function is_theme( $name ) {\n\t\t$name = \\strtolower( $name );\n\t\t\n\t\tif ( \\strtolower( \\wp_get_theme()->get( 'Name' ) ) === $name || \\strtolower( \\wp_get_theme()->get( 'Template' ) ) === $name ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t\n\t/**\n\t * Load the translation files.\n\t */\n\tpublic function load_textdomain() {\n\t\t\\load_plugin_textdomain( 'embed-privacy', false, \\dirname( \\plugin_basename( $this->plugin_file ) ) . '/languages' );\n\t}\n\t\n\t/**\n\t * Preserve backslashes in regex field.\n\t * \n\t * @since\t1.4.0\n\t */\n\tpublic function preserve_backslashes() {\n\t\t// phpcs:disable WordPress.Security.NonceVerification.Missing\n\t\tif ( ! isset( $_POST['regex_default'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$_POST['regex_default'] = \\wp_slash( $_POST['regex_default'] ); // phpcs:ignore WordPress.Security.ValidatedSanitizedInput.MissingUnslash,WordPress.Security.ValidatedSanitizedInput.InputNotSanitized\n\t\t// phpcs:enable\n\t}\n\t\n\t/**\n\t * Handle printing assets.\n\t * \n\t * @since\t1.3.0\n\t */\n\tpublic function print_assets() {\n\t\tif ( $this->is_printed ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t\\wp_enqueue_script( 'embed-privacy' );\n\t\t\\wp_enqueue_style( 'embed-privacy' );\n\t\t\\wp_localize_script( 'embed-privacy', 'embedPrivacy', [\n\t\t\t'alwaysActiveProviders' => \\array_keys( (array) $this->get_cookie() ), // deprecated\n\t\t\t'javascriptDetection' => \\get_option( 'embed_privacy_javascript_detection' ),\n\t\t] );\n\t\t\n\t\tif ( $this->is_theme( 'Astra' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-astra' );\n\t\t}\n\t\t\n\t\tif ( $this->is_theme( 'Divi' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-divi' );\n\t\t}\n\t\t\n\t\tif ( $this->is_elementor() ) {\n\t\t\t\\wp_enqueue_script( 'embed-privacy-elementor-video' );\n\t\t\t\\wp_enqueue_style( 'embed-privacy-elementor' );\n\t\t}\n\t\t\n\t\tif ( ! \\function_exists( 'is_plugin_active' ) ) {\n\t\t\trequire_once ABSPATH . WPINC . '/plugin.php';\n\t\t}\n\t\t\n\t\tif ( \\is_plugin_active( 'kadence-blocks/kadence-blocks.php' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-kadence-blocks' );\n\t\t}\n\t\t\n\t\tif ( \\is_plugin_active( 'shortcodes-ultimate/shortcodes-ultimate.php' ) ) {\n\t\t\t\\wp_enqueue_style( 'embed-privacy-shortcodes-ultimate' );\n\t\t}\n\t\t\n\t\t$this->is_printed = true;\n\t}\n\t\n\t/**\n\t * Print assets of an embed before the content.\n\t * \n\t * @since\t1.4.5\n\t * \n\t * @param\tarray\t$assets List of assets\n\t * @param\tstring\t$output The output\n\t * @return\tstring The updated output\n\t */\n\tprivate function print_embed_assets( $assets, $output ) {\n\t\tif ( empty( $assets ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tforeach ( array_reverse( $assets ) as $asset ) {\n\t\t\tif ( empty( $asset['type'] ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif ( $asset['type'] === 'script' ) {\n\t\t\t\tif ( empty( $asset['handle'] ) || empty( $asset['src'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$output = '<script src=\"' . \\esc_url( $asset['src'] ) . ( ! empty( $asset['version'] ) ? '?ver=' . \\esc_attr( \\rawurlencode( $asset['version'] ) ) : '' ) . '\" id=\"' . \\esc_attr( $asset['handle'] ) . '\"></script>' . \\PHP_EOL . $output; // phpcs:ignore WordPress.WP.EnqueuedResources.NonEnqueuedScript\n\t\t\t}\n\t\t\telse if ( $asset['type'] === 'inline' ) {\n\t\t\t\tif ( empty( $asset['data'] ) || empty( $asset['object_name'] ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ( \\is_string( $asset['data'] ) ) {\n\t\t\t\t\t$data = \\html_entity_decode( $asset['data'], \\ENT_QUOTES, 'UTF-8' );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tforeach ( (array) $asset['data'] as $key => $value ) {\n\t\t\t\t\t\tif ( ! \\is_scalar( $value ) ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t$data[ $key ] = \\html_entity_decode( (string) $value, \\ENT_QUOTES, 'UTF-8' );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$output = '<script>var ' . esc_js( $asset['object_name'] ) . ' = ' . \\wp_json_encode( $data ) . ';</script>' . \\PHP_EOL . $output;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn $output;\n\t}\n\t\n\t/**\n\t * Register our assets for the frontend.\n\t * \n\t * @since\t1.4.4\n\t */\n\tpublic function register_assets() {\n\t\tif ( \\is_admin() || \\wp_doing_ajax() || \\wp_doing_cron() ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$is_debug = \\defined( 'WP_DEBUG' ) && WP_DEBUG;\n\t\t$suffix = ( $is_debug ? '' : '.min' );\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/embed-privacy' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/embed-privacy' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy', $css_file_url, [], $file_version );\n\t\t\n\t\tif ( ! $this->is_amp() ) {\n\t\t\t$js_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/js/embed-privacy' . $suffix . '.js';\n\t\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/js/embed-privacy' . $suffix . '.js' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\t\n\t\t\t\\wp_register_script( 'embed-privacy', $js_file_url, [], $file_version );\n\t\t}\n\t\t\n\t\t// Astra is too greedy at its CSS selectors\n\t\t// see https://github.com/epiphyt/embed-privacy/issues/33\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/astra' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/astra' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-astra', $css_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/divi' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/divi' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-divi', $css_file_url, [], $file_version );\n\t\t\n\t\t$js_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/js/elementor-video' . $suffix . '.js';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/js/elementor-video' . $suffix . '.js' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_script( 'embed-privacy-elementor-video', $js_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/elementor' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/elementor' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-elementor', $css_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/kadence-blocks' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/kadence-blocks' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-kadence-blocks', $css_file_url, [], $file_version );\n\t\t\n\t\t$css_file_url = \\EPI_EMBED_PRIVACY_URL . 'assets/style/shortcodes-ultimate' . $suffix . '.css';\n\t\t$file_version = $is_debug ? \\filemtime( \\EPI_EMBED_PRIVACY_BASE . 'assets/style/shortcodes-ultimate' . $suffix . '.css' ) : \\EMBED_PRIVACY_VERSION;\n\t\t\n\t\t\\wp_register_style( 'embed-privacy-shortcodes-ultimate', $css_file_url, [], $file_version );\n\t\t\n\t\t$current_url = \\sprintf(\n\t\t\t'http%1$s://%2$s%3$s',\n\t\t\t\\is_ssl() ? 's' : '',\n\t\t\t! empty( $_SERVER['HTTP_HOST'] ) ? \\sanitize_text_field( \\wp_unslash( $_SERVER['HTTP_HOST'] ) ) : '',\n\t\t\t! empty( $_SERVER['REQUEST_URI'] ) ? \\sanitize_text_field( \\wp_unslash( $_SERVER['REQUEST_URI'] ) ) : ''\n\t\t);\n\t\t\n\t\tif ( empty( $_SERVER['HTTP_HOST'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$post_id = \\url_to_postid( $current_url );\n\t\t\n\t\tif ( $post_id ) {\n\t\t\t$post = \\get_post( $post_id );\n\t\t\n\t\t\tif ( $post instanceof WP_Post && \\has_shortcode( $post->post_content, 'embed_privacy_opt_out' ) ) {\n\t\t\t\t$this->print_assets();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/**\n\t * Register post type in Polylang to allow translation.\n\t * \n\t * @since\t1.5.0\n\t * \n\t * @param\tarray\t$post_types List of current translatable custom post types\n\t * @param\tbool\t$is_settings Whether the current page is the settings page\n\t * @return\tarray Updated list of translatable custom post types\n\t */\n\tpublic function register_polylang_post_type( array $post_types, $is_settings ) {\n\t\tif ( $is_settings ) {\n\t\t\tunset( $post_types['epi_embed'] );\n\t\t}\n\t\telse {\n\t\t\t$post_types['epi_embed'] = 'epi_embed';\n\t\t}\n\t\t\n\t\treturn $post_types;\n\t}\n\t\n\t/**\n\t * Replace embeds with a container and hide the embed with an HTML comment.\n\t * \n\t * @since\t1.2.0 Changed behavior of the method\n\t * @since\t1.6.0 Added optional $tag parameter\n\t * \n\t * @param\tstring\t$content The original content\n\t * @param\tstring\t$tag The shortcode tag if called via do_shortcode\n\t * @return\tstring The updated content\n\t */\n\tpublic function replace_embeds( $content, $tag = '' ) {\n\t\t// do nothing in admin\n\t\tif ( ! $this->usecache ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t// do nothing for ignored shortcodes\n\t\tif ( ! empty( $tag ) && \\in_array( $tag, $this->get_ignored_shortcodes(), true ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t// check content for already available embeds\n\t\tif ( ! $this->has_embed && \\strpos( $content, '<div class=\"embed-privacy-overlay\">' ) !== false ) {\n\t\t\t$this->has_embed = true;\n\t\t}\n\t\t\n\t\t// get all embed providers\n\t\t$embed_providers = $this->get_embeds();\n\t\t\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t$content = $this->get_embed_overlay( $provider, $content );\n\t\t}\n\t\t\n\t\t// Elementor video providers need special treatment\n\t\tif ( $this->is_elementor() ) {\n\t\t\t$embed_providers = [\n\t\t\t\t$this->get_embed_by_name( 'dailymotion' ),\n\t\t\t\t$this->get_embed_by_name( 'vimeo' ),\n\t\t\t];\n\t\t\t\n\t\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t\t$content = $this->get_embed_overlay( $provider, $content );\n\t\t\t}\n\t\t\t\n\t\t\tif ( strpos( $content, 'youtube.com\\/watch' ) !== false ) {\n\t\t\t\t$content = $this->get_elementor_youtube_overlay( $content );\n\t\t\t}\n\t\t}\n\t\t\n\t\t/**\n\t\t * If set to true, unknown providers are not handled via Embed Privacy.\n\t\t * \n\t\t * @since\t1.5.0\n\t\t * \n\t\t * @param\tbool\t$ignore_unknown Whether unknown providers should be ignored\n\t\t * @param\tstring\t$content The original content\n\t\t */\n\t\t$ignore_unknown_providers = \\apply_filters( 'embed_privacy_ignore_unknown_providers', false, $content );\n\t\t\n\t\t// get default external content\n\t\t// special case for youtube-nocookie.com as it is part of YouTube provider\n\t\t// and gets rewritten in Divi\n\t\t// see: https://github.com/epiphyt/embed-privacy/issues/69\n\t\tif (\n\t\t\t! $ignore_unknown_providers\n\t\t\t&& (\n\t\t\t\t\\strpos( $content, 'youtube-nocookie.com' ) === false\n\t\t\t\t|| ! $this->is_always_active_provider( 'youtube' )\n\t\t\t)\n\t\t) {\n\t\t\t$new_content = $this->get_single_overlay( $content, '', '', [ 'check_always_active' => true ] );\n\t\t\t\n\t\t\tif ( $new_content !== $content ) {\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$content = $new_content;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( \\strpos( $content, 'class=\"fb-post\"' ) !== false ) {\n\t\t\t$provider = $this->get_embed_by_name( 'facebook' );\n\t\t\t$args = [\n\t\t\t\t'additional_checks' => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'attribute' => 'class',\n\t\t\t\t\t\t'compare' => '===',\n\t\t\t\t\t\t'type' => 'attribute',\n\t\t\t\t\t\t'value' => 'fb-post',\n\t\t\t\t\t],\n\t\t\t\t],\n\t\t\t\t'assets' => [],\n\t\t\t\t'check_always_active' => true,\n\t\t\t\t'element_attribute' => 'data-href',\n\t\t\t\t'elements' => [\n\t\t\t\t\t'div',\n\t\t\t\t],\n\t\t\t];\n\t\t\t\n\t\t\t// register jetpack script if available\n\t\t\tif ( \\class_exists( '\\Automattic\\Jetpack\\Assets' ) && \\defined( 'JETPACK__VERSION' ) ) {\n\t\t\t\t$jetpack = Jetpack::init();\n\t\t\t\t\n\t\t\t\t$args['assets'][] = [\n\t\t\t\t\t'type' => 'inline',\n\t\t\t\t\t'object_name' => 'jpfbembed',\n\t\t\t\t\t'data' => [\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Filter the Jetpack sharing Facebook app ID.\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * @since\t1.4.5\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * @param\tstring\t$app_id The current app ID\n\t\t\t\t\t\t */\n\t\t\t\t\t\t'appid' => \\apply_filters( 'jetpack_sharing_facebook_app_id', '249643311490' ),\n\t\t\t\t\t\t'locale' => $jetpack->get_locale(),\n\t\t\t\t\t],\n\t\t\t\t];\n\t\t\t\t$args['assets'][] = [\n\t\t\t\t\t'type' => 'script',\n\t\t\t\t\t'handle' => 'jetpack-facebook-embed',\n\t\t\t\t\t'src' => Assets::get_file_url_for_environment( '_inc/build/facebook-embed.min.js', '_inc/facebook-embed.js' ),\n\t\t\t\t\t'version' => \\JETPACK__VERSION,\n\t\t\t\t];\n\t\t\t}\n\t\t\t\n\t\t\t$new_content = $this->get_single_overlay( $content, $provider->post_title, $provider->post_name, $args );\n\t\t\t\n\t\t\tif ( $new_content !== $content ) {\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$content = $new_content;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ( $this->has_embed ) {\n\t\t\t$this->print_assets();\n\t\t}\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Replace oembed embeds with a container and hide the embed with an HTML comment.\n\t * \n\t * @since\t1.2.0\n\t * \n\t * @param\tstring\t$output The original output\n\t * @param\tstring\t$url The URL to the embed\n\t * @param\tarray\t$args Additional arguments of the embed\n\t * @return\tstring The updated embed code\n\t */\n\tpublic function replace_embeds_oembed( $output, $url, $args ) {\n\t\t// do nothing in admin\n\t\tif ( ! $this->usecache ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t// ignore embeds without host (ie. relative URLs)\n\t\tif ( empty( \\wp_parse_url( $url, \\PHP_URL_HOST ) ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t// check the current host\n\t\t// see: https://github.com/epiphyt/embed-privacy/issues/24\n\t\tif ( \\strpos( $url, \\wp_parse_url( \\home_url(), \\PHP_URL_HOST ) ) !== false ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$embed_provider = '';\n\t\t$embed_provider_lowercase = '';\n\t\t$embed_providers = $this->get_embeds( 'oembed' );\n\t\t\n\t\t// get embed provider name\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\t$regex = \\get_post_meta( $provider->ID, 'regex_default', true );\n\t\t\t$regex = '/' . \\trim( $regex, '/' ) . '/';\n\t\t\t\n\t\t\t// save name of provider and stop loop\n\t\t\tif ( $regex !== '//' && \\preg_match( $regex, $url ) ) {\n\t\t\t\t$this->has_embed = true;\n\t\t\t\t$args['post_id'] = $provider->ID;\n\t\t\t\t$embed_provider = $provider->post_title;\n\t\t\t\t$embed_provider_lowercase = $provider->post_name;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// see https://github.com/epiphyt/embed-privacy/issues/89\n\t\tif ( empty( $embed_provider ) ) {\n\t\t\t$parsed_url = \\wp_parse_url( $url );\n\t\t\t$embed_provider = isset( $parsed_url['host'] ) ? $parsed_url['host'] : '';\n\t\t}\n\t\t\n\t\t// make sure to only run once\n\t\tif ( \\strpos( $output, 'data-embed-provider=\"' . $embed_provider_lowercase . '\"' ) !== false ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tif ( $embed_provider_lowercase === 'youtube' ) {\n\t\t\t// replace youtube.com to youtube-nocookie.com\n\t\t\t$output = \\str_replace( 'youtube.com', 'youtube-nocookie.com', $output );\n\t\t}\n\t\telse if ( $embed_provider_lowercase === 'twitter' && \\get_option( 'embed_privacy_local_tweets' ) ) {\n\t\t\t// check for local tweets\n\t\t\treturn $this->get_local_tweet( $output );\n\t\t}\n\t\t\n\t\t// check if cookie is set\n\t\tif ( $embed_provider_lowercase !== 'default' && $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$embed_title = $this->get_oembed_title( $output );\n\t\t/* translators: embed title */\n\t\t$args['embed_title'] = ! empty( $embed_title ) ? \\sprintf( \\__( '\"%s\"', 'embed-privacy' ), $embed_title ) : '';\n\t\t$args['embed_url'] = $url;\n\t\t$args['strip_newlines'] = true;\n\t\t\n\t\t// the default dimensions are useless\n\t\t// so ignore them if recognized as such\n\t\t$defaults = \\wp_embed_defaults( $url );\n\t\t\n\t\tif (\n\t\t\t! empty( $args['height'] ) && $args['height'] === $defaults['height']\n\t\t\t&& ! empty( $args['width'] ) && $args['width'] === $defaults['width']\n\t\t) {\n\t\t\tunset( $args['height'], $args['width'] );\n\t\t\t\n\t\t\t$dimensions = $this->get_oembed_dimensions( $output );\n\t\t\t\n\t\t\tif ( ! empty( $dimensions ) ) {\n\t\t\t\t$args = \\array_merge( $args, $dimensions );\n\t\t\t}\n\t\t}\n\t\t\n\t\t// add two click to markup\n\t\treturn $this->get_output_template( $embed_provider, $embed_provider_lowercase, $output, $args );\n\t}\n\t\n\t/**\n\t * Replace embeds in Divi Builder.\n\t * \n\t * @since\t1.2.0\n\t * @since\t1.6.0 Deprecated second parameter\n\t * \n\t * @param\tstring\t$item_embed The original output\n\t * @param\tstring\t$url The URL of the embed\n\t * @return\tstring The updated embed code\n\t */\n\tpublic function replace_embeds_divi( $item_embed, $url ) {\n\t\treturn $this->replace_embeds_oembed( $item_embed, $url, [] );\n\t}\n\t\n\t/**\n\t * Replace twitter embeds.\n\t * \n\t * @deprecated\t1.6.3\n\t * @since\t\t1.6.1\n\t * \n\t * @param\tstring\t$output The original output\n\t * @param\tstring\t$url The URL to the embed\n\t * @param\tarray\t$args Additional arguments of the embed\n\t * @return\tstring The updated embed code\n\t */\n\tpublic function replace_embeds_twitter( $output, $url, $args ) {\n\t\t// do nothing in admin\n\t\tif ( ! $this->usecache ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$provider = $this->get_embed_by_name( 'twitter' );\n\t\t\n\t\tif ( ! \\preg_match( \\get_post_meta( $provider->ID, 'regex_default', true ), $url ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tif ( $this->is_always_active_provider( $provider->post_name ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\tif ( \\get_option( 'embed_privacy_local_tweets' ) ) {\n\t\t\t// check for local tweets\n\t\t\treturn $this->get_local_tweet( $output );\n\t\t}\n\t\t\n\t\t$args['embed_url'] = $url;\n\t\t$args['ignore_aspect_ratio'] = true;\n\t\t$args['strip_newlines'] = true;\n\t\t\n\t\treturn $this->get_output_template( $provider->post_title, $provider->post_name, $output, $args );\n\t}\n\t\n\t/**\n\t * Replace Google Maps iframes.\n\t * \n\t * @deprecated\t1.2.0 Use Embed_Privacy::get_embed_overlay() instead\n\t * @since\t\t1.1.0\n\t * \n\t * @param\tstring\t$content The post content\n\t * @return\tstring The post content\n\t */\n\tpublic function replace_google_maps( $content ) {\n\t\t\\preg_match_all( self::IFRAME_REGEX, $content, $matches );\n\t\t\n\t\tif ( empty( $matches ) || empty( $matches[0] ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\t$embed_provider = 'Google Maps';\n\t\t$embed_provider_lowercase = 'google-maps';\n\t\t\n\t\t// check if cookie is set\n\t\tif ( $this->is_always_active_provider( $embed_provider_lowercase ) ) {\n\t\t\treturn $content;\n\t\t}\n\t\t\n\t\tforeach ( $matches[0] as $match ) {\n\t\t\tif ( \\strpos( $match, 'google.com/maps' ) === false ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t$overlay_output = $this->get_output_template( $embed_provider, $embed_provider_lowercase, $match );\n\t\t\t$content = \\str_replace( $match, $overlay_output, $content );\n\t\t}\n\t\t\n\t\treturn $content;\n\t}\n\t\n\t/**\n\t * Replace Maps Marker (Pro) shortcodes.\n\t * \n\t * @since\t1.5.0\n\t * \n\t * @param\tstring\t$output Shortcode output\n\t * @param\tstring\t$tag Shortcode tag\n\t * @return\tstring Updated shortcode output\n\t */\n\tpublic function replace_maps_marker( $output, $tag ) {\n\t\tif ( $tag !== 'mapsmarker' ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\t$embed_provider = $this->get_embed_by_name( 'maps-marker' );\n\t\t\n\t\tif ( \\get_post_meta( $embed_provider->ID, 'is_disabled', true ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\treturn $this->get_output_template( $embed_provider->post_title, $embed_provider->post_name, $output );\n\t}\n\t\n\t/**\n\t * Replace video shortcode embeds.\n\t * \n\t * @since\t1.7.0\n\t * \n\t * @param\tstring\t$output Video shortcode HTML output\n\t * @param\tarray\t$atts Array of video shortcode attributes\n\t */\n\tpublic function replace_video_shortcode( $output, $atts ) {\n\t\t$url = isset( $atts['src'] ) ? $atts['src'] : '';\n\t\t\n\t\tif ( empty( $url ) && ! empty( $atts['mp4'] ) ) {\n\t\t\t$url = $atts['mp4'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['m4v'] ) ) {\n\t\t\t$url = $atts['m4v'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['webm'] ) ) {\n\t\t\t$url = $atts['webm'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['ogv'] ) ) {\n\t\t\t$url = $atts['ogv'];\n\t\t}\n\t\telse if ( empty( $url ) && ! empty( $atts['flv'] ) ) {\n\t\t\t$url = $atts['flv'];\n\t\t}\n\t\t\n\t\t// ignore relative URLs\n\t\tif ( empty( \\wp_parse_url( $url, \\PHP_URL_HOST ) ) ) {\n\t\t\treturn $output;\n\t\t}\n\t\t\n\t\treturn $this->replace_embeds_oembed( $output, $url, $atts );\n\t}\n\t\n\t/**\n\t * Run a compare check.\n\t * \n\t * @since\t1.4.4\n\t * \n\t * @param\tmixed\t$value1 First value to compare\n\t * @param\tmixed\t$value2 Second value to compare\n\t * @param\tstring\t$compare Compare operator\n\t * @return\tbool Result of comparing the values\n\t */\n\tprivate function run_check_compare( $value1, $value2, $compare ) {\n\t\tswitch ( $compare ) {\n\t\t\tcase '===':\n\t\t\t\treturn $value1 === $value2;\n\t\t\tcase '==':\n\t\t\t\treturn $value1 == $value2; // phpcs:ignore WordPress.PHP.StrictComparisons.LooseComparison\n\t\t\tcase '!==':\n\t\t\t\treturn $value1 !== $value2;\n\t\t\tcase '!=':\n\t\t\t\treturn $value1 != $value2; // phpcs:ignore WordPress.PHP.StrictComparisons.LooseComparison\n\t\t\tcase '>':\n\t\t\t\treturn $value1 > $value2;\n\t\t\tcase '>=':\n\t\t\t\treturn $value1 >= $value2;\n\t\t\tcase '<':\n\t\t\t\treturn $value1 < $value2;\n\t\t\tcase '<=':\n\t\t\t\treturn $value1 <= $value2;\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\t}\n\t\n\t/**\n\t * Run additional for a DOM node checks.\n\t * \n\t * @since\t1.4.4\n\t * \n\t * @param\tarray\t\t$checks A list of checks\n\t * @param\t\\DOMElement\t$element The DOM Element\n\t * @return\tbool Whether all checks are successful\n\t */\n\tprivate function run_checks( $checks, $element ) {\n\t\tif ( empty( $checks ) ) {\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tforeach ( $checks as $check ) {\n\t\t\tif ( $check['type'] === 'attribute' ) {\n\t\t\t\t$compared = $this->run_check_compare( $element->getAttribute( $check['attribute'] ), $check['value'], $check['compare'] );\n\t\t\t\t\n\t\t\t\tif ( ! $compared ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn true;\n\t}\n\t\n\t/**\n\t * Set the plugin file.\n\t * \n\t * @since\t1.1.0\n\t * \n\t * @param\tstring\t$file The path to the file\n\t */\n\tpublic function set_plugin_file( $file ) {\n\t\tif ( \\file_exists( $file ) ) {\n\t\t\t$this->plugin_file = $file;\n\t\t}\n\t}\n\t\n\t/**\n\t * Register post type.\n\t * \n\t * @since\t1.2.0\n\t */\n\tpublic function set_post_type() {\n\t\t\\register_post_type(\n\t\t\t'epi_embed',\n\t\t\t[\n\t\t\t\t'label' => \\__( 'Embeds', 'embed-privacy' ),\n\t\t\t\t'description' => \\__( 'Embeds from Embed Privacy', 'embed-privacy' ),\n\t\t\t\t'supports' => [\n\t\t\t\t\t'custom-fields',\n\t\t\t\t\t'editor',\n\t\t\t\t\t'revisions',\n\t\t\t\t\t'thumbnail',\n\t\t\t\t\t'title',\n\t\t\t\t],\n\t\t\t\t'hierarchical' => false,\n\t\t\t\t'public' => false,\n\t\t\t\t'menu_icon' => 'dashicons-format-video',\n\t\t\t\t'show_in_admin_bar' => false,\n\t\t\t\t'show_in_menu' => false,\n\t\t\t\t'show_in_nav_menus' => false,\n\t\t\t\t'show_in_rest' => false,\n\t\t\t\t'show_ui' => true,\n\t\t\t\t'can_export' => true,\n\t\t\t\t'has_archive' => false,\n\t\t\t\t'exclude_from_search' => true,\n\t\t\t\t'publicly_queryable' => false,\n\t\t\t\t'rewrite' => [\n\t\t\t\t\t'with_front' => false,\n\t\t\t\t\t'pages' => false,\n\t\t\t\t],\n\t\t\t]\n\t\t);\n\t}\n\t\n\t/**\n\t * Display an Opt-out shortcode.\n\t * \n\t * @since\t1.2.0\n\t * \n\t * @param\tarray\t$attributes Shortcode attributes\n\t * @return\tstring The shortcode output\n\t */\n\tpublic function shortcode_opt_out( $attributes ) {\n\t\t$attributes = \\shortcode_atts( [\n\t\t\t'headline' => \\__( 'Embed providers', 'embed-privacy' ),\n\t\t\t'show_all' => 0,\n\t\t\t'subline' => \\__( 'Enable or disable embed providers globally. By enabling a provider, its embedded content will be displayed directly on every page without asking you anymore.', 'embed-privacy' ),\n\t\t], $attributes );\n\t\t$cookie = $this->get_cookie();\n\t\t$embed_providers = $this->get_embeds();\n\t\t$enabled_providers = array_keys( (array) $cookie );\n\t\t$is_javascript_detection = get_option( 'embed_privacy_javascript_detection' ) === 'yes';\n\t\t\n\t\tif ( empty( $embed_providers ) ) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\tif ( ! $is_javascript_detection && ! $attributes['show_all'] && ! $enabled_providers ) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\t$headline = '<h3>' . \\esc_html( $attributes['headline'] ) . '</h3>' . \\PHP_EOL;\n\t\t\n\t\t/**\n\t\t * Filter the opt-out headline.\n\t\t * \n\t\t * @param\tstring\t$headline Current headline HTML\n\t\t * @param\tarray\t$attributes Shortcode attributes\n\t\t */\n\t\t$headline = \\apply_filters( 'embed_privacy_opt_out_headline', $headline, $attributes );\n\t\t\n\t\t/**\n\t\t * Filter the opt-out subline.\n\t\t * \n\t\t * @param\tstring\t$subline Current subline HTML\n\t\t * @param\tarray\t$attributes Shortcode attributes\n\t\t */\n\t\t$subline = \\apply_filters( 'embed_privacy_opt_out_subline', '<p>' . \\esc_html( $attributes['subline'] ) . '</p>' . \\PHP_EOL, $attributes );\n\t\t\n\t\t$output = '<div class=\"embed-privacy-opt-out\" data-show-all=\"' . ( $attributes['show_all'] ? 1 : 0 ) . '\">' . \\PHP_EOL . $headline . $subline;\n\t\t\n\t\tforeach ( $embed_providers as $provider ) {\n\t\t\tif ( $is_javascript_detection ) {\n\t\t\t\t$is_checked = false;\n\t\t\t}\n\t\t\telse if ( $attributes['show_all'] ) {\n\t\t\t\t$is_checked = \\in_array( $provider->post_name, $enabled_providers, true );\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$is_checked = true;\n\t\t\t}\n\t\t\t\n\t\t\t$is_hidden = ! $is_javascript_detection && ! $attributes['show_all'] && ! \\in_array( $provider->post_name, $enabled_providers, true );\n\t\t\t$microtime = \\str_replace( '.', '', \\microtime( true ) );\n\t\t\t$output .= '<span class=\"embed-privacy-provider' . ( $is_hidden ? ' is-hidden' : '' ) . '\">' . \\PHP_EOL;\n\t\t\t$output .= '<input type=\"checkbox\" id=\"embed-privacy-provider-' . \\esc_attr( $provider->post_name ) . '-' . $microtime . '\" ' . \\checked( $is_checked, true, false ) . ' class=\"embed-privacy-opt-out-input ' . ( $is_checked ? 'is-enabled' : 'is-disabled' ) . '\" data-embed-provider=\"' . \\esc_attr( $provider->post_name ) . '\">';\n\t\t\t$output .= '<label class=\"embed-privacy-opt-out-label\" for=\"embed-privacy-provider-' . \\esc_attr( $provider->post_name ) . '-' . $microtime . '\" data-embed-provider=\"' . \\esc_attr( $provider->post_name ) . '\">';\n\t\t\t$enable_disable = '<span class=\"embed-privacy-provider-is-enabled\">' . \\esc_html_x( 'Disable', 'complete string: Disable <embed name>', 'embed-privacy' ) . '</span><span class=\"embed-privacy-provider-is-disabled\">' . \\esc_html_x( 'Enable', 'complete string: Disable <embed name>', 'embed-privacy' ) . '</span>';\n\t\t\t/* translators: 1: Enable/Disable, 2: embed provider title */\n\t\t\t$output .= \\wp_kses( \\sprintf( \\__( '%1$s %2$s', 'embed-privacy' ), $enable_disable, \\esc_html( $provider->post_title ) ), [ 'span' => [ 'class' => true ] ] );\n\t\t\t$output .= '</label><br>' . \\PHP_EOL;\n\t\t\t$output .= '</span>' . \\PHP_EOL;\n\t\t}\n\t\t\n\t\t$output .= '</div>' . \\PHP_EOL;\n\t\t\n\t\treturn $output;\n\t}\n}\n", "=== Embed Privacy ===\nContributors: epiphyt, kittmedia, krafit\nTags: oembed, privacy, gutenberg\nRequires at least: 5.9\nStable tag: 1.8.0\nTested up to: 6.3\nRequires PHP: 5.6\nLicense: GPL2\nLicense URI: https://www.gnu.org/licenses/gpl-2.0.html\n\nEmbed Privacy prevents the loading of embedded external content and allows your site visitors to opt-in.\n\n== Description ==\n\nContent embedded from external sites such as YouTube or Twitter is loaded immediately when visitors access your site. Embed Privacy addresses this issue and prevents the loading of these contents until the visitor decides to allow loading of external content.\nBut Embed Privacy not only protects your visitor's privacy but also makes your site load faster.\n\nAll embeds will be replaced by placeholders, ready for you to apply style as you wish. With only a couple of lines of CSS. \n\nBy clicking on the placeholder the respective content will be reloaded.\n\n**Note: This plugins requires the PHP extension [\"Document Object Model\" (php-dom)](https://www.php.net/manual/en/book.dom.php).**\n\n== Installation ==\n\n1. Upload the plugin files to the `/wp-content/plugins/embed-privacy` directory, or install the plugin through the WordPress plugins screen directly.\n1. Activate the plugin through the 'Plugins' screen in WordPress.\n1. Embedded content will automatically be replaced by a placeholder and can be loaded on demand by your visitors. There are no additional settings.\n1. To allow users to opt-out of embed providers that they set to always active, place the shortcode `[embed_privacy_opt_out]` into your privacy policy.\n\n\n== Frequently Asked Questions ==\n\n= Can Embed Privacy keep external services from tracking me/my visitors? =\n\nYes. As long as you don't opt in to load external content, you/your visitors can't be tracked by these services.\n\n= Does Embed Privacy make embedding content privacy-friendly? =\n\nThe embedding process itself will be privacy-friendly with Embed Privacy. That means, that no third-party embed provider can track users without their explicit consent by clicking on the overlay to allow the embed to be loaded. However, to make sure everything is fine you need to expand your privacy policy for each embed provider you\u2019re using or you want to use because you need to specify, where data will be sent to and what happens to them.\n\n= Does Embed Privacy support the Gutenberg editor? =\n\nSure thing! We enjoy playing with the new WordPress editor and developed Embed Privacy with Gutenberg in mind, the plugin will work no matter the editor you use.\n\n= Which embeds are currently supported? =\n\nWe currently support all oEmbed providers known to WordPress core by default. Want to know about them? Here you go:\n\n* Amazon Kindle\n* Anghami\n* Animoto\n* Cloudup\n* DailyMotion\n* Facebook\n* Flickr\n* Funny Or Die\n* Imgur\n* Instagram\n* Issuu\n* Kickstarter\n* Meetup\n* Mixcloud\n* Photobucket\n* Pocket Casts\n* Polldaddy.com\n* Reddit\n* ReverbNation\n* Scribd\n* Sketchfab\n* SlideShare\n* SmugMug\n* SoundCloud\n* Speaker Deck\n* Spotify\n* TikTok\n* TED\n* Tumblr\n* Twitter\n* VideoPress\n* Vimeo, WordPress.org\n* WordPress.tv\n* YouTube\n\nWe also support Google Maps via iframe and the plugins Maps Marker, Maps Marker Pro and Shortcodes Ultimate.\n\nSince version 1.2.0, you can also add custom embed providers by going to **Settings > Embed Privacy > Manage embeds**. Here you can also modify any existing embed provider, change its logo, add a background image, change the text displaying on the embed or disable the embed provider entirely.\n\n= Can Embed Privacy automatically download thumbnails of the embedded content? =\n\nYes! Since version 1.5.0, Embed Privacy supports downloading and displaying thumbnails in posts for SlideShare, Vimeo and YouTube as background of Embed Privacy\u2019s overlay.\n\n= Developers: How to use Embed Privacy\u2019s methods for custom content? =\n\nSince version 1.1.0 you can now use our mechanism for content we don\u2019t support in our plugin. You can do it the following way:\n\n`\n/**\n * Replace specific content with the Embed Privacy overlay of type 'google-maps'.\n * \n * @param\tstring\t\t$content The content to replace\n * @return\tstring The updated content\n */\nfunction prefix_replace_content_with_overlay( $content ) {\n\t// check for Embed Privacy\n\tif ( ! class_exists( 'epiphyt\\Embed_Privacy\\Embed_Privacy' ) ) {\n\t\treturn $content;\n\t}\n\t\n\t// get Embed Privacy instance\n\t$embed_privacy = epiphyt\\Embed_Privacy\\Embed_Privacy::get_instance();\n\t\n\t// check if provider is always active; if so, just return the content\n\tif ( ! $embed_privacy->is_always_active_provider( 'google-maps' ) ) {\n\t\t// replace the content with the overlay\n\t\t$content = $embed_privacy->get_output_template( 'Google Maps', 'google-maps', $content );\n\t\t// enqueue assets\n\t\t$embed_privacy->print_assets();\n\t}\n\t\n\treturn $content;\n}\n`\n\n= Can users opt-out of already opted in embed providers? =\n\nYes! You can use the shortcode `[embed_privacy_opt_out]` to add a list of embed providers anywhere you want (recommendation: add it to your privacy policy) to allow your users to opt-out.\n\n= What parameters can be used in the shortcode? =\n\nThe shortcode `[embed_privacy_opt_out]` can be used to let users opt-out of embed providers that have been set to be always active by the user. It can have the following attributes:\n\n<code>headline</code> \u2013 Add a custom headline (default: Embed providers)\n\n`\n[embed_privacy_opt_out headline=\"My custom headline\"]\n`\n\n<code>subline</code> \u2013 Add a custom subline (default: Enable or disable embed providers globally. By enabling a provider, its embedded content will be displayed directly on every page without asking you anymore.)\n\n`\n[embed_privacy_opt_out subline=\"My custom subline\"]\n`\n\n<code>show_all</code> \u2013 Whether to show all available embed providers or just the ones the user opted in (default: false)\n\n`\n[embed_privacy_opt_out show_all=\"1\"]\n`\n\nYou can also combine all of these attributes:\n\n`\n[embed_privacy_opt_out headline=\"My custom headline\" subline=\"My custom subline\" show_all=\"1\"]\n`\n\n= Is this plugin compatible with my caching plugin? =\n\nIf you\u2019re using a caching plugin, make sure you enable the \"JavaScript detection for active providers\" in **Settings > Embed Privacy > JavaScript detection**. Then, the plugin is fully compatible with your caching plugin.\n\n= How can Embed Privacy be extended? =\n\nCheck out our documentation: [https://epiph.yt/en/embed-privacy/documentation/](https://epiph.yt/en/embed-privacy/documentation/)\n\n= Who are you, folks? =\n\nWe are [Epiphyt](https://epiph.yt/), your friendly neighborhood WordPress plugin shop from southern Germany.\n\n\n== Changelog ==\n\n= 1.8.1 =\n* Fixed the output of the opt-out shortcode\n\n= 1.8.0 =\n* Added support for Anghami\n* Added filter to prevent thumbnail orphan deletion\n* Added check for PHP DOM extension\n* Improved loading embed providers\n\n= 1.7.3 =\n* Improved compatibility with Advanced Custom Fields\n* Fixed compatibility with PHP 8.2\n* Fixed a potential PHP warning if a post does not exist while checking permissions\n* Fixed functionality of the opt-out shortcode if the current website uses a non-standard port\n* Fixed replacing only the necessary part of embedded contents for custom embeds\n* Fixed replacing all occurrences of a custom embed in the current content\n* Fixed multiple unnecessary database queries in migration before the actual check whether a migration is necessary\n* Fixed downloading the thumbnail multiple times when the same embed is embedded multiple times\n* Fixed deleted thumbnails if they are only in content of Advanced Custom Fields\n* Fixed a potential security issue regarding disclosing absolute paths in thumbnail URLs (special thanks to [@kraftner](https://profiles.wordpress.org/kraftner/))\n* Fixed aspect ratio generation if width or height contains a percentage sign\n* Fixed thumbnail positioning (it's now horizontally and vertically centered)\n* Fixed HTML output of the opt-out shortcode\n\n= 1.7.2 =\n* Fixed getting the URL of video shortcodes properly to not block content from the same (sub)domain\n\n= 1.7.1 =\n* Improved Google Maps height in Kadence Blocks\n* Fixed a JavaScript error if jQuery is not initialized\n* Fixed potential PHP warning regarding an undefined variable\n* Fixed potential PHP warning regarding an undefined hostname while retrieving the embed URL\n\n= 1.7.0 =\n* Added support for crowdsignal.net\n* Added support for classic video shortcode/widget\n* Added support for Slideshare thumbnails (thanks to [@Lazza](https://github.com/Lazza))\n* Added support for custom thumbnail generation via filter\n* Fixed hiding thumbnails after embedded content has been enabled\n* Fixed aspect ratio for embeds without proper dimension information\n\n= 1.6.5 =\n* Fixed aspect ratio for non-default content width themes\n* Fixed handling of the % character\n\n= 1.6.4 =\n* Fixed aspect ratio for many oEmbeds\n\n= 1.6.3 =\n* Fixed replacing some oEmbeds\n* Fixed potential problems while retrieving a single embed provider\n* Fixed deleting post metadata of embed providers while editing them via WP-CLI\n\n= 1.6.2 =\n* Restore displaying YouTube thumbnails\n\n= 1.6.1 =\n* Updated required WordPress version to 5.0\n* Fixed text links to youtube.com\n* Fixed Twitter embeds\n\n= 1.6.0 =\n* Added automatic detection of aspect ratio if given by the embed\n* Added ability to work with HTML of regular oEmbed providers\n* Added filter to ignore shortcodes (see [documentation](https://epiph.yt/en/embed-privacy/documentation/#embed_privacy_ignored_shortcodes))\n* Added matching links to the new documentation at [https://epiph.yt/en/embed-privacy/documentation/](https://epiph.yt/en/embed-privacy/documentation/)\n* Improved handling of matching non-standard elements (embed, iframe, object, see [documentation](https://epiph.yt/en/embed-privacy/documentation/#regex-pattern))\n* Fixed Google Maps regex pattern after installation\n* Fixed behavior of the opt-out shortcode with enabled page caching\n* Fixed line-height of custom embeds in Elementor\n* General code improvements\n\n= 1.5.1 =\n* Fixed storing and displaying video thumbnails from Vimeo that are embedded using the domain player.vimeo.com\n* Fixed unnecessary line breaks within the classic editor\n* Fixed displaying the overlay if an embed of a known embed provider followed an embed of an unknown embed provider\n* Fixed uninstallation issues\n\n= 1.5.0 =\n* Added support for embed provider Pocket Casts\n* Added support for Maps Marker and Maps Marker Pro\n* Added support for Google Maps in Shortcodes Ultimate\n* Added support to automatically download and display a thumbnail of the embed for Vimeo and YouTube (only in posts)\n* Added support to re-initiate the database migration and display an error message if it has been failed at least three times\n* Added support for Polylang and Polylang Pro\n* Added a new filter to allow stopping Embed Privacy from handling unknown embeds\n* Added option to disable the direct link in the overlay\n* Updated logos for Reddit, SmugMug and SoundCloud for better readability\n* Use the plugin version as parameter for assets to allow better caching and prevent problems with some setups\n* General code improvements\n* Fixed a JavaScript error\n\n= 1.4.8 =\n* Fixed an issue with always active providers being cached by page caching plugins\n* Fixed printing inline JavaScript only once\n\n= 1.4.7 =\n* Fixed displaying embeds on mobile devices while using Divi\n* Fixed the output of assets\n* Improved regular expression for Google Maps\n\n= 1.4.6 =\n* Fixed an issue where JavaScript assets may be missing for the opt-out shortcode\n\n= 1.4.5 =\n* Fixed an issue with always enable an unknown embed provider\n* Fixed issues with missing JavaScript for Facebook embed of Jetpack\n\n= 1.4.4 =\n* Fixed a potential encoding issue\n* Fixed issues with Facebook embed of Jetpack\n* Fixed issues with registering assets\n\n= 1.4.3 =\n* Fixed a problem that prevents embed fields from being stored\n\n= 1.4.2 =\n* Fixed an expired link during plugin activation and creating a new embed provider\n\n= 1.4.1 =\n* Fixed invalid HTML by changing the accessibility behavior (it's now a separate button)\n* Fixed potential empty link titles in other locales then English\n* Fixed potential unwanted URL encoding in the content after Embed Privacy replaced an embed\n\n= 1.4.0 =\n* Added support for Pinterest and Wolfram Cloud\n* Improved migrations to fix duplicate providers or performance problems in multisite installations\n* Embeds can now be enabled via keyboard\n* Added a link to the original content on the bottom right overlay corner\n* Added support for caching the opt-out shortcode\n* Clicking on the \"always enable content of X\" enables all embeds of this provider on the current page immediately\n* Improved markup of local tweets\n* Added additional class to checkbox paragraph, thanks to @florianbrinkmann\n* System providers cannot be deleted anymore\n* Fixed oEmbed provider name if the provider is unknown\n* Fix enqueuing assets for unknown embed providers\n\n= 1.3.6 =\n* Fixed enabling multiple YouTube videos in Elementor\n* Fixed displaying content if the page contains an always active provider\n\n= 1.3.5 =\n* Fixed functionality in Elementor\n* Fixed custom embed provider output\n* Fixed replacing content in shortcodes multiple times\n* Fixed checking for theme/template\n\n= 1.3.4 =\n* Fixed deleted meta fields if you put an embed provider in trash and restore it afterwards\n* Fixed Embed Privacy sometimes trying to replace an embed twice\n* Fixed an error that may occur if Embed Privacy tries to replace an embed that doesn't need to be replaced\n* Fixed checking for local domain if WordPress itself is located in a sub-domain\n* Fixed always enable YouTube within Divi\n* Fixed overlay line height in Divi\n\n= 1.3.3 =\n* Improved mobile design for responsive embeds\n* Fixed centering for non-responsive embeds\n* Fixed disabled embed content from preventing interactions with the text below the overlay\n\n= 1.3.2 =\n* Fixed general activation error\n\n= 1.3.1 =\n* Fixed a fatal error on uninstallation on non-multisite\n* Fixed activating via WP-CLI\n* Fixed deleting an option on uninstallation\n\n= 1.3.0 =\n* Added local tweets without overlay\n* Added option to preserve data on uninstall\n* Added compatibility with theme Astra\n* Added filter `embed_privacy_markup` for filtering the whole markup of an embed overlay\n* Added proper support for embeds on the current domain\n* Added support for embeds on other elements than `embed`, `iframe` and `object`\n* Enqueue assets only if needed\n* Removed images from media (which had been added in version 1.2.0) and use fallback images for default embed providers\n* Improved regular expression for Google Maps\n* Improved texts for clarity\n* Fixed visibility of custom post type\n* Fixed network-wide activation\n* Fixed clearing oEmbed cache\n\n= 1.2.2 =\n* Added a check if a migration is already running\n* Fixed a bug where the page markup could be changed unexpectedly\n* `<object>` elements are now replaced correctly\n* Added a missing textdomain to a string\n* Excluded local embeds (with the same domain)\n* Fixed Amazon Kindle regex being too greedy\n\n= 1.2.1 =\n* Fixed a bug where the page markup could be changed unexpectedly\n* Fixed a warning if an embed provider has no regular expressions\n* Improved migrations of embed provider metadata to make sure they have been added to the database\n\n= 1.2.0 =\n* Added support for managing embeds (add/remove/edit/disable)\n* Added support for caching plugins by adding a JavaScript detection for always active embed providers\n* Added CSS classes that indicate the current state of the embed (`is-disabled`/`is-enabled`)\n* Added shortcode `[embed_privacy_opt_out]` to allow users to opt-out/in\n* Fixed responsive design if the embed added an own width\n\n= 1.1.3 =\n* Changed provider name from Polldaddy to Crowdsignal\n* Removed provider Hulu\n\n= 1.1.2 =\n* Fixed a possible difference in the used class name of the embed provider in HTML and CSS\n\n= 1.1.1 =\n* Removed provider CollegeHumor\n* Fixed a bug with the automatic addition of paragraphs\n\n= 1.1.0 =\n* Added option to allow all embeds by one provider\n* Added provider TikTok, introduced in WordPress 5.4\n* Added support for Google Maps iframes\n* Added URL rewrite to youtube-nocookie.com\n* Added option to save user selection per embed provider\n* Added provider logo to our placeholder\n* Added option to filter our placeholders markup\n* Added support for 'alignwide' and 'alignfull' Gutenberg classes\n* Added support for using our embedding overlay mechanism for external developers\n* Improved our placeholder markup to be actually semantic\n* Changed .embed- classes to .embed-privacy-\n* Fixed some embed providers that use custom z-index, which results in the embedded content being above the overlay\n* Fixed typos\n\n= 1.0.2 =\n* Improved compatibility with [Autoptimize](https://wordpress.org/plugins/autoptimize/)\n* Improved compatibility with [AMP](https://wordpress.org/plugins/amp/)\n* Fix issue with Slideshare causing wrong (generic) placeholders\n\n= 1.0.1 =\n* Fixed support for PHP 5.6\n\n= 1.0.0 =\n* Initial release\n\n== Upgrade Notice ==\n\n== Screenshots ==\n1. Add embeds using the classic editor or the block editor's embed blocks.\n2. Embed Privacy will add an overlay to supported embeds automatically.\n3. You can customize the overlays for each service individually.\n4. Embed Privacy can deliver embedded Tweets locally without 3rd party scripts or tracking.\n"], "filenames": ["CHANGELOG.md", "SECURITY.md", "embed-privacy.php", "inc/class-embed-privacy.php", "readme.txt"], "buggy_code_start_loc": [1, 9, 7, 2166, 171], "buggy_code_end_loc": [1, 11, 33, 2167, 171], "fixing_code_start_loc": [2, 9, 7, 2166, 172], "fixing_code_end_loc": [5, 11, 33, 2167, 175], "type": "CWE-79", "message": "The `Embed Privacy` plugin for WordPress that prevents the loading of embedded external content is vulnerable to Stored Cross-Site Scripting via `embed_privacy_opt_out` shortcode in versions up to, and including, 1.8.0 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. Version 1.8.1 contains a patch for this issue.\n", "other": {"cve": {"id": "CVE-2023-48300", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-20T19:15:09.063", "lastModified": "2023-11-25T02:18:48.417", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The `Embed Privacy` plugin for WordPress that prevents the loading of embedded external content is vulnerable to Stored Cross-Site Scripting via `embed_privacy_opt_out` shortcode in versions up to, and including, 1.8.0 due to insufficient input sanitization and output escaping on user supplied attributes. This makes it possible for authenticated attackers with contributor-level and above permissions to inject arbitrary web scripts in pages that will execute whenever a user accesses an injected page. Version 1.8.1 contains a patch for this issue.\n"}, {"lang": "es", "value": "El complemento `Embed Privacy` para WordPress que evita la carga de contenido externo incrustado es vulnerable a Cross-Site Scripting Almacenado a trav\u00e9s del c\u00f3digo corto `embed_privacy_opt_out` en versiones hasta la 1.8.0 incluida debido a una sanitizaci\u00f3n de entrada insuficiente y a un escape de salida en los atributos proporcionados por el usuario. Esto hace posible que atacantes autenticados con permisos de nivel de colaborador y superiores inyecten scripts web arbitrarios en p\u00e1ginas que se ejecutar\u00e1n cada vez que un usuario acceda a una p\u00e1gina inyectada. La versi\u00f3n 1.8.1 contiene un parche para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:epiph:embed_privacy:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "1.8.1", "matchCriteriaId": "A1422C6B-88AD-4A05-B4BA-3B2BDC88842B"}]}]}], "references": [{"url": "https://d.pr/v/ORuIat", "source": "security-advisories@github.com", "tags": ["Exploit"]}, {"url": "https://github.com/epiphyt/embed-privacy/commit/f80929992b2a5a66f4f4953cd6f46cc227154a5c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/epiphyt/embed-privacy/issues/199", "source": "security-advisories@github.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/epiphyt/embed-privacy/security/advisories/GHSA-3wv9-4rvf-w37g", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/epiphyt/embed-privacy/commit/f80929992b2a5a66f4f4953cd6f46cc227154a5c"}}