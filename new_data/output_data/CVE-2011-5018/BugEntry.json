{"buggy_code": ["<?php\nabstract class Kwf_Exception_Abstract extends Exception\n{\n    private $_logFilename;\n\n    public abstract function getHeader();\n\n    public abstract function log();\n\n    public function getTemplate()\n    {\n        return 'Error';\n    }\n\n    public static function isDebug()\n    {\n        try {\n            return !Kwf_Config::getValue('debug.error.log');\n        } catch (Exception $e) {\n            return true;\n        }\n    }\n\n    public function getException()\n    {\n        return $this;\n    }\n\n    protected function _writeLog($path, $filename, $content, $force = false)\n    {\n        if (self::isDebug() && !$force) {\n            return false;\n        }\n        $this->_logFilename = $filename;\n        if (!is_dir($path)) @mkdir($path);\n        try {\n            $fp = fopen(\"$path/$filename\", 'a');\n            fwrite($fp, $content);\n            fclose($fp);\n        } catch(Exception $e) {\n            $to = array();\n            foreach (Kwf_Registry::get('config')->developers as $dev) {\n                if (isset($dev->sendException) && $dev->sendException) {\n                    $to[] = $dev->email;\n                }\n            }\n            mail(implode('; ', $to),\n                'Error while trying to write error file',\n                $e->__toString().\"\\n\\n---------------------------\\n\\nOriginal Exception:\\n\\n\".$content\n                );\n        }\n        return true;\n    }\n\n    public function getLogFilename()\n    {\n        return $this->_logFilename;\n    }\n\n    protected function _format($part, $text)\n    {\n        return \"** $part **\\n$text\\n-- $part --\\n\\n\";\n    }\n\n    public function render($ignoreCli = false)\n    {\n        if (!$ignoreCli && php_sapi_name() == 'cli') {\n            $this->log();\n            file_put_contents('php://stderr', $this->getException()->__toString().\"\\n\");\n            exit(1);\n        }\n\n        $view = Kwf_Debug::getView();\n        $view->exception = $this->getException();\n        $view->message = $this->getException()->getMessage();\n        $view->requestUri = isset($_SERVER['REQUEST_URI']) ?\n            $_SERVER['REQUEST_URI'] : '' ;\n        $view->debug = Kwf_Exception::isDebug();\n        $header = $this->getHeader();\n        $template = $this->getTemplate();\n        $template = strtolower(Zend_Filter::filterStatic($template, 'Word_CamelCaseToDash').'.tpl');\n        $this->log();\n\n        if (!headers_sent()) {\n            header($header);\n            header('Content-Type: text/html; charset=utf-8');\n        }\n\n        try {\n            echo $view->render($template);\n        } catch (Exception $e) {\n            echo '<pre>';\n            echo $this->__toString();\n            echo \"\\n\\n\\nError happened while handling exception:\";\n            echo $e->__toString();\n            echo '</pre>';\n        }\n        Kwf_Benchmark::shutDown();\n        Kwf_Benchmark::output();\n   }\n}\n"], "fixing_code": ["<?php\nabstract class Kwf_Exception_Abstract extends Exception\n{\n    private $_logFilename;\n\n    public abstract function getHeader();\n\n    public abstract function log();\n\n    public function getTemplate()\n    {\n        return 'Error';\n    }\n\n    public static function isDebug()\n    {\n        try {\n            return !Kwf_Config::getValue('debug.error.log');\n        } catch (Exception $e) {\n            return true;\n        }\n    }\n\n    public function getException()\n    {\n        return $this;\n    }\n\n    protected function _writeLog($path, $filename, $content, $force = false)\n    {\n        if (self::isDebug() && !$force) {\n            return false;\n        }\n        $this->_logFilename = $filename;\n        if (!is_dir($path)) @mkdir($path);\n        try {\n            $fp = fopen(\"$path/$filename\", 'a');\n            fwrite($fp, $content);\n            fclose($fp);\n        } catch(Exception $e) {\n            $to = array();\n            foreach (Kwf_Registry::get('config')->developers as $dev) {\n                if (isset($dev->sendException) && $dev->sendException) {\n                    $to[] = $dev->email;\n                }\n            }\n            mail(implode('; ', $to),\n                'Error while trying to write error file',\n                $e->__toString().\"\\n\\n---------------------------\\n\\nOriginal Exception:\\n\\n\".$content\n                );\n        }\n        return true;\n    }\n\n    public function getLogFilename()\n    {\n        return $this->_logFilename;\n    }\n\n    protected function _format($part, $text)\n    {\n        return \"** $part **\\n$text\\n-- $part --\\n\\n\";\n    }\n\n    public function render($ignoreCli = false)\n    {\n        if (!$ignoreCli && php_sapi_name() == 'cli') {\n            $this->log();\n            file_put_contents('php://stderr', $this->getException()->__toString().\"\\n\");\n            exit(1);\n        }\n\n        $view = Kwf_Debug::getView();\n        $view->exception = $this->getException();\n        $view->message = $this->getException()->getMessage();\n        $view->requestUri = isset($_SERVER['REQUEST_URI']) ?\n            htmlspecialchars($_SERVER['REQUEST_URI']) : '' ;\n        $view->debug = Kwf_Exception::isDebug();\n        $header = $this->getHeader();\n        $template = $this->getTemplate();\n        $template = strtolower(Zend_Filter::filterStatic($template, 'Word_CamelCaseToDash').'.tpl');\n        $this->log();\n\n        if (!headers_sent()) {\n            header($header);\n            header('Content-Type: text/html; charset=utf-8');\n        }\n\n        try {\n            echo $view->render($template);\n        } catch (Exception $e) {\n            echo '<pre>';\n            echo $this->__toString();\n            echo \"\\n\\n\\nError happened while handling exception:\";\n            echo $e->__toString();\n            echo '</pre>';\n        }\n        Kwf_Benchmark::shutDown();\n        Kwf_Benchmark::output();\n   }\n}\n"], "filenames": ["Kwf/Exception/Abstract.php"], "buggy_code_start_loc": [77], "buggy_code_end_loc": [78], "fixing_code_start_loc": [77], "fixing_code_end_loc": [78], "type": "CWE-79", "message": "Koala Framework before 2011-11-21 has XSS via the request_uri parameter.", "other": {"cve": {"id": "CVE-2011-5018", "sourceIdentifier": "cve@mitre.org", "published": "2020-01-08T23:15:10.067", "lastModified": "2020-01-14T14:50:10.890", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Koala Framework before 2011-11-21 has XSS via the request_uri parameter."}, {"lang": "es", "value": "Koala Framework antes del 21-11-2011, tiene una vulnerabilidad de tipo XSS por medio del par\u00e1metro request_uri."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:koala-framework:koala_framework:*:*:*:*:*:*:*:*", "versionEndExcluding": "2011-11-21", "matchCriteriaId": "B75A5368-2B45-47B5-B8D9-6C9D874F52F4"}]}]}], "references": [{"url": "http://www.cloudscan.me/2011/12/cve-2011-5018-koala-framework-xss.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/koala-framework/koala-framework/commit/59f81ea6bd8ef96c04a706a3ca453cd656284faa", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://groups.google.com/forum/#!topic/koala-framework-dev/wgHDD7N7qhk", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/koala-framework/koala-framework/commit/59f81ea6bd8ef96c04a706a3ca453cd656284faa"}}