{"buggy_code": ["/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n *\n * The Apereo Foundation licenses this file to you under the Educational\n * Community License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License\n * at:\n *\n *   http://opensource.org/licenses/ecl2.txt\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n * License for the specific language governing permissions and limitations under\n * the License.\n *\n */\n\npackage org.opencastproject.kernel.http.impl;\n\nimport org.opencastproject.kernel.http.api.HttpClient;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.conn.scheme.Scheme;\nimport org.apache.http.conn.scheme.SchemeRegistry;\nimport org.apache.http.conn.ssl.SSLSocketFactory;\nimport org.apache.http.conn.ssl.X509HostnameVerifier;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.params.HttpParams;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.SSLSocket;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.X509TrustManager;\n\n/** Implementation of HttpClient that makes http requests. */\npublic class HttpClientImpl implements HttpClient {\n\n  /** The logging facility */\n  private static final Logger logger = LoggerFactory.getLogger(HttpClientImpl.class);\n\n  /** client used for all http requests. */\n  private DefaultHttpClient defaultHttpClient = makeHttpClient();\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public HttpParams getParams() {\n    return defaultHttpClient.getParams();\n  }\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public CredentialsProvider getCredentialsProvider() {\n    return defaultHttpClient.getCredentialsProvider();\n  }\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public HttpResponse execute(HttpUriRequest httpUriRequest) throws IOException {\n    return defaultHttpClient.execute(httpUriRequest);\n  }\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public ClientConnectionManager getConnectionManager() {\n    return defaultHttpClient.getConnectionManager();\n  }\n\n  /**\n   * Creates a new client that can deal with all kinds of oddities with regards to http/https connections.\n   *\n   * @return the client\n   */\n  private DefaultHttpClient makeHttpClient() {\n\n    DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\n    try {\n      logger.debug(\"Installing forgiving hostname verifier and trust managers\");\n      X509TrustManager trustManager = createTrustManager();\n      X509HostnameVerifier hostNameVerifier = createHostNameVerifier();\n      SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n      sslContext.init(null, new TrustManager[] { trustManager }, new SecureRandom());\n      SSLSocketFactory ssf = new SSLSocketFactory(sslContext, hostNameVerifier);\n      ClientConnectionManager ccm = defaultHttpClient.getConnectionManager();\n      SchemeRegistry sr = ccm.getSchemeRegistry();\n      sr.register(new Scheme(\"https\", 443, ssf));\n    } catch (NoSuchAlgorithmException e) {\n      logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\n    } catch (KeyManagementException e) {\n      logger.error(\"Error creating context to handle TLS connections: {}\", e.getMessage());\n    }\n\n    return defaultHttpClient;\n  }\n\n  /**\n   * Returns a new trust manager which will be in charge of checking the SSL certificates that are being presented by\n   * SSL enabled hosts.\n   *\n   * @return the trust manager\n   */\n  private X509TrustManager createTrustManager() {\n    X509TrustManager trustManager = new X509TrustManager() {\n\n      /**\n       * {@InheritDoc}\n       *\n       * @see javax.net.ssl.X509TrustManager#checkClientTrusted(java.security.cert.X509Certificate[], java.lang.String)\n       */\n      public void checkClientTrusted(X509Certificate[] xcs, String string) throws CertificateException {\n        logger.trace(\"Skipping trust check on client certificate {}\", string);\n      }\n\n      /**\n       * {@InheritDoc}\n       *\n       * @see javax.net.ssl.X509TrustManager#checkServerTrusted(java.security.cert.X509Certificate[], java.lang.String)\n       */\n      public void checkServerTrusted(X509Certificate[] xcs, String string) throws CertificateException {\n        logger.trace(\"Skipping trust check on server certificate {}\", string);\n      }\n\n      /**\n       * {@InheritDoc}\n       *\n       * @see javax.net.ssl.X509TrustManager#getAcceptedIssuers()\n       */\n      public X509Certificate[] getAcceptedIssuers() {\n        logger.trace(\"Returning empty list of accepted issuers\");\n        return null;\n      }\n\n    };\n\n    return trustManager;\n  }\n\n  /**\n   * Creates a host name verifier that will make sure the SSL host's name matches the name in the SSL certificate.\n   *\n   * @return the host name verifier\n   */\n  private X509HostnameVerifier createHostNameVerifier() {\n    X509HostnameVerifier verifier = new X509HostnameVerifier() {\n\n      /**\n       * {@InheritDoc}\n       *\n       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSocket)\n       */\n      public void verify(String host, SSLSocket ssl) throws IOException {\n        logger.trace(\"Skipping SSL host name check on {}\", host);\n      }\n\n      /**\n       * {@InheritDoc}\n       *\n       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.security.cert.X509Certificate)\n       */\n      public void verify(String host, X509Certificate xc) throws SSLException {\n        logger.trace(\"Skipping X509 certificate host name check on {}\", host);\n      }\n\n      /**\n       * {@InheritDoc}\n       *\n       * @see org.apache.http.conn.ssl.X509HostnameVerifier#verify(java.lang.String, java.lang.String[],\n       *      java.lang.String[])\n       */\n      public void verify(String host, String[] cns, String[] subjectAlts) throws SSLException {\n        logger.trace(\"Skipping DNS host name check on {}\", host);\n      }\n\n      /**\n       * {@InheritDoc}\n       *\n       * @see javax.net.ssl.HostnameVerifier#verify(java.lang.String, javax.net.ssl.SSLSession)\n       */\n      public boolean verify(String host, SSLSession ssl) {\n        logger.trace(\"Skipping SSL session host name check on {}\", host);\n        return true;\n      }\n    };\n\n    return verifier;\n  }\n\n}\n"], "fixing_code": ["/**\n * Licensed to The Apereo Foundation under one or more contributor license\n * agreements. See the NOTICE file distributed with this work for additional\n * information regarding copyright ownership.\n *\n *\n * The Apereo Foundation licenses this file to you under the Educational\n * Community License, Version 2.0 (the \"License\"); you may not use this file\n * except in compliance with the License. You may obtain a copy of the License\n * at:\n *\n *   http://opensource.org/licenses/ecl2.txt\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n * License for the specific language governing permissions and limitations under\n * the License.\n *\n */\n\npackage org.opencastproject.kernel.http.impl;\n\nimport org.opencastproject.kernel.http.api.HttpClient;\n\nimport org.apache.http.HttpResponse;\nimport org.apache.http.client.CredentialsProvider;\nimport org.apache.http.client.methods.HttpUriRequest;\nimport org.apache.http.conn.ClientConnectionManager;\nimport org.apache.http.impl.client.DefaultHttpClient;\nimport org.apache.http.params.HttpParams;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\n\n/** Implementation of HttpClient that makes http requests. */\npublic class HttpClientImpl implements HttpClient {\n\n  /** The logging facility */\n  private static final Logger logger = LoggerFactory.getLogger(HttpClientImpl.class);\n\n  /** client used for all http requests. */\n  private DefaultHttpClient defaultHttpClient = new DefaultHttpClient();\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public HttpParams getParams() {\n    return defaultHttpClient.getParams();\n  }\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public CredentialsProvider getCredentialsProvider() {\n    return defaultHttpClient.getCredentialsProvider();\n  }\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public HttpResponse execute(HttpUriRequest httpUriRequest) throws IOException {\n    return defaultHttpClient.execute(httpUriRequest);\n  }\n\n  /** See org.opencastproject.kernel.http.api.HttpClient */\n  @Override\n  public ClientConnectionManager getConnectionManager() {\n    return defaultHttpClient.getConnectionManager();\n  }\n\n}\n"], "filenames": ["modules/kernel/src/main/java/org/opencastproject/kernel/http/impl/HttpClientImpl.java"], "buggy_code_start_loc": [30], "buggy_code_end_loc": [205], "fixing_code_start_loc": [29], "fixing_code_end_loc": [69], "type": "CWE-346", "message": "Opencast before versions 8.9 and 7.9 disables HTTPS hostname verification of its HTTP client used for a large portion of Opencast's HTTP requests. Hostname verification is an important part when using HTTPS to ensure that the presented certificate is valid for the host. Disabling it can allow for man-in-the-middle attacks. This problem is fixed in Opencast 7.9 and Opencast 8.8 Please be aware that fixing the problem means that Opencast will not simply accept any self-signed certificates any longer without properly importing them. If you need those, please make sure to import them into the Java key store. Better yet, get a valid certificate.", "other": {"cve": {"id": "CVE-2020-26234", "sourceIdentifier": "security-advisories@github.com", "published": "2020-12-08T23:15:12.060", "lastModified": "2020-12-10T20:57:15.897", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Opencast before versions 8.9 and 7.9 disables HTTPS hostname verification of its HTTP client used for a large portion of Opencast's HTTP requests. Hostname verification is an important part when using HTTPS to ensure that the presented certificate is valid for the host. Disabling it can allow for man-in-the-middle attacks. This problem is fixed in Opencast 7.9 and Opencast 8.8 Please be aware that fixing the problem means that Opencast will not simply accept any self-signed certificates any longer without properly importing them. If you need those, please make sure to import them into the Java key store. Better yet, get a valid certificate."}, {"lang": "es", "value": "Opencast versiones anteriores a 8.9 y 7.9, deshabilita la verificaci\u00f3n del nombre de host HTTPS de su cliente HTTP utilizado para una gran parte de las peticiones HTTP de Opencast.&#xa0;La verificaci\u00f3n del nombre de host es una parte importante cuando se usa HTTPS para garantizar que el certificado presentado sea v\u00e1lido para el host.&#xa0;Deshabilitarlo puede permitir ataques de tipo man-in-the-middle.&#xa0;Este problema se corrigi\u00f3 en Opencast versi\u00f3n 7.9 y Opencast versi\u00f3n 8.8. Tome en cuenta que corregir el problema significa que Opencast ya no aceptar\u00e1 ning\u00fan certificado autofirmado sin importarlo apropiadamente.&#xa0;Si los necesita, aseg\u00farese de importarlos al almac\u00e9n de claves de Java.&#xa0;Mejor a\u00fan, obtenga un certificado v\u00e1lido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-346"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-346"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:apereo:opencast:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.9", "matchCriteriaId": "F3414B26-469E-4B59-91CD-406ACB548BDF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:apereo:opencast:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0", "versionEndExcluding": "8.9", "matchCriteriaId": "BE20EE9A-3F99-4B90-B663-4BA87849089A"}]}]}], "references": [{"url": "https://github.com/opencast/opencast/commit/4225bf90af74557deaf8fb6b80b0705c9621acfc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/opencast/opencast/security/advisories/GHSA-44cw-p2hm-gpf6", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/opencast/opencast/commit/4225bf90af74557deaf8fb6b80b0705c9621acfc"}}