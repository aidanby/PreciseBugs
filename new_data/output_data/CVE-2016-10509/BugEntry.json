{"buggy_code": ["<?php\nclass ModelOpenbayAmazon extends Model {\n\tpublic function install() {\n\t\t$this->load->model('extension/event');\n\n\t\t$this->model_extension_event->addEvent('openbaypro_amazon', 'catalog/model/checkout/order/addOrderHistory/before', 'openbay/amazon/eventAddOrderHistory');\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_order` (\n\t\t\t  `order_id` int(11) NOT NULL ,\n\t\t\t  `amazon_order_id` char(19) NOT NULL ,\n\t\t\t  `courier_id` varchar(255) NOT NULL ,\n\t\t\t  `courier_other` tinyint(1) NOT NULL,\n\t\t\t  `tracking_no` varchar(255) NOT NULL ,\n\t\t\t  PRIMARY KEY (`order_id`, `amazon_order_id`)\n\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_order_product` (\n\t\t\t\t`order_product_id` int(11) NOT NULL ,\n\t\t\t\t`amazon_order_item_id` varchar(255) NOT NULL,\n\t\t\t\tPRIMARY KEY(`order_product_id`, `amazon_order_item_id`)\n\t\t);\");\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_unshipped` (\n\t\t\t\t`order_id` int(11) NOT NULL,\n\t\t\t\t`product_id` int(11) NOT NULL,\n\t\t\t\t`quantity` int(11) NOT NULL DEFAULT '0',\n\t\t\t\tPRIMARY KEY (`order_id`,`product_id`)\n\t\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product` (\n\t\t  `version` int(11) NOT NULL DEFAULT 2,\n\t\t  `product_id`  int(11) NOT NULL ,\n\t\t  `category`  varchar(255) NOT NULL ,\n\t\t  `sku`  varchar(255) NOT NULL ,\n\t\t  `insertion_id` varchar(255) NOT NULL ,\n\t\t  `data`  text NOT NULL ,\n\t\t  `status` enum('saved','uploaded','ok','error') NOT NULL ,\n\t\t  `price`  decimal(15,4) NOT NULL COMMENT 'Price on Amazon' ,\n\t\t  `var` char(100) NOT NULL DEFAULT '',\n\t\t  `marketplaces` text NOT NULL ,\n\t\t  `messages` text NOT NULL,\n\t\t  PRIMARY KEY (`product_id`, `var`)\n\t\t);\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_error` (\n\t\t  `error_id` int(11) NOT NULL AUTO_INCREMENT,\n\t\t  `sku` varchar(255) NOT NULL ,\n\t\t  `insertion_id` varchar(255) NOT NULL ,\n\t\t  `error_code` int(11) NOT NULL ,\n\t\t  `message` text NOT NULL ,\n\t\t  PRIMARY KEY (`error_id`)\n\t\t);\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_link` (\n\t\t  `id` int(11) NOT NULL AUTO_INCREMENT,\n\t\t  `amazon_sku` varchar(255) NOT NULL,\n\t\t  `var` char(100) NOT NULL DEFAULT '',\n\t\t  `product_id` int(11) NOT NULL,\n\t\t  PRIMARY KEY (`id`)\n\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_search` (\n\t\t\t`product_id` int(11) NOT NULL,\n\t\t\t`marketplace` enum('uk','de','es','it','fr') NOT NULL,\n\t\t\t`status` enum('searching','finished') NOT NULL,\n\t\t\t`matches` int(11) DEFAULT NULL,\n\t\t\t`data` text,\n\t\t\tPRIMARY KEY (`product_id`,`marketplace`)\n\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_listing_report` (\n\t\t\t\t`marketplace` enum('uk','de','fr','es','it') NOT NULL,\n\t\t\t\t`sku` varchar(255) NOT NULL,\n\t\t\t\t`quantity` int(10) unsigned NOT NULL,\n\t\t\t\t`asin` varchar(255) NOT NULL,\n\t\t\t\t`price` decimal(10,4) NOT NULL,\n\t\t\t\tPRIMARY KEY (`marketplace`,`sku`)\n\t\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\t}\n\n\tpublic function uninstall() {\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_order`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_order_product`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product2`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_link`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_unshipped`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_error`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_process`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_unshipped`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_search`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_listing_report`\");\n\n\t\t$this->db->query(\"DELETE FROM `\" . DB_PREFIX . \"setting` WHERE `code` = 'openbay_amazon'\");\n\n\t\t$this->load->model('extension/event');\n\t\t$this->model_extension_event->deleteEvent('openbaypro_amazon');\n\t}\n\n\tpublic function patch() {\n\t\tif ($this->config->get('openbay_amazon_status') == 1) {\n\n\t\t}\n\t}\n\n\tpublic function scheduleOrders($data) {\n\t\t$log = new Log('amazon.log');\n\n\t\t$request_xml = '<Request>\n  <ResponseURL>' . HTTPS_CATALOG . 'index.php?route=openbay/amazon/order</ResponseURL>\n  <MarketplaceIDs>';\n\n\t\tforeach ($data['openbay_amazon_orders_marketplace_ids'] as $marketplace_id) {\n\t\t\t$request_xml .= '    <MarketplaceID>' . $marketplace_id . '</MarketplaceID>';\n\t\t}\n\n\t\t$request_xml .= '\n  </MarketplaceIDs>\n</Request>';\n\n\t\t$response = $this->openbay->amazon->call('order/scheduleOrders', $request_xml, false);\n\n\t\tlibxml_use_internal_errors(true);\n\t\t$response_xml = simplexml_load_string($response);\n\t\tlibxml_use_internal_errors(false);\n\n\t\tif ($response_xml && $response_xml->Status == '0') {\n\t\t\t$log->write('Scheduling orders call was successful');\n\t\t\treturn true;\n\t\t}\n\n\t\t$log->write('Failed to schedule orders. Response: ' . $response);\n\n\t\treturn false;\n\t}\n\n\tpublic function saveProduct($product_id, $data_array) {\n\t\tif (isset($data_array['fields']['item-price'])) {\n\t\t\t$price = $data_array['fields']['item-price'];\n\t\t} else if (isset($data_array['fields']['price'])) {\n\t\t\t$price = $data_array['fields']['price'];\n\t\t} else if (isset($data_array['fields']['StandardPrice'])) {\n\t\t\t$price = $data_array['fields']['StandardPrice'];\n\t\t}   else {\n\t\t\t$price = 0;\n\t\t}\n\n\t\t$category = (isset($data_array['category'])) ? $data_array['category'] : \"\";\n\t\t$sku = (isset($data_array['fields']['sku'])) ? $data_array['fields']['sku'] : \"\";\n\t\tif (isset($data_array['fields']['sku'])) {\n\t\t\t$sku = $data_array['fields']['sku'];\n\t\t} else if (isset($data_array['fields']['SKU'])) {\n\t\t\t$sku = $data_array['fields']['SKU'];\n\t\t}\n\n\t\t$var = isset($data_array['optionVar']) ? $data_array['optionVar'] : '';\n\n\t\t$marketplaces = isset($data_array['marketplace_ids']) ? serialize($data_array['marketplace_ids']) : serialize(array());\n\n\t\t$data_encoded = json_encode(array('fields' => $data_array['fields']));\n\n\t\t$this->db->query(\"\n\t\t\tREPLACE INTO `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `product_id` = '\" . (int)$product_id . \"',\n\t\t\t\t`sku` = '\" . $this->db->escape($sku) . \"',\n\t\t\t\t`category` = '\" . $this->db->escape($category) . \"',\n\t\t\t\t`data` = '\" . $this->db->escape($data_encoded) . \"',\n\t\t\t\t`status` = 'saved',\n\t\t\t\t`insertion_id` = '',\n\t\t\t\t`price` = '\" . $price . \"',\n\t\t\t\t`var` = '\" . $this->db->escape($var) . \"',\n\t\t\t\t`marketplaces` = '\" . $this->db->escape($marketplaces) . \"'\");\n\t}\n\n\tpublic function deleteSaved($product_id, $var = '') {\n\t\t$this->db->query(\"DELETE FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"'\");\n\t}\n\n\tpublic function getSavedProducts() {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT `ap`.`status`, `ap`.`product_id`, `ap`.`sku` as `amazon_sku`, `pd`.`name` as `product_name`, `p`.`model` as `product_model`, `p`.`sku` as `product_sku`, `ap`.`var` as `var`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product` as `ap`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\tON `ap`.`product_id` = `pd`.`product_id`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product` as `p`\n\t\t\tON `ap`.`product_id` = `p`.`product_id`\n\t\t\tWHERE `ap`.`status` = 'saved'\n\t\t\tAND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\")->rows;\n\t}\n\n\tpublic function getSavedProductsData() {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT * FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `status` = 'saved' AND `version` = 2\")->rows;\n\t}\n\n\tpublic function getProduct($product_id, $var = '') {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT * FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"' AND `version` = 2\")->row;\n\t}\n\n\tpublic function getProductCategory($product_id, $var = '') {\n\t\t$row = $this->db->query(\"\n\t\t\tSELECT `category` FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"' AND `version` = 2\")->row;\n\t\tif (isset($row['category'])) {\n\t\t\treturn $row['category'];\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tpublic function setProductUploaded($product_id, $insertion_id, $var = '') {\n\t\t$this->db->query(\n\t\t\t\"UPDATE `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `status` = 'uploaded', `insertion_id` = '\" . $this->db->escape($insertion_id) . \"'\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"' AND `version` = 2\");\n\t}\n\n\tpublic function resetUploaded($insertion_id) {\n\t\t$this->db->query(\n\t\t\t\"UPDATE `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `status` = 'saved', `insertion_id` = ''\n\t\t\tWHERE `insertion_id` = '\" . $this->db->escape($insertion_id) . \"' AND `version` = 2\");\n\t}\n\n\tpublic function getProductStatus($product_id) {\n\n\t\t$rows_uploaded = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'uploaded'\")->row;\n\t\t$rows_uploaded = $rows_uploaded['count'];\n\n\t\t$rows_ok = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'ok'\")->row;\n\t\t$rows_ok = $rows_ok['count'];\n\n\t\t$rows_error = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'error'\")->row;\n\t\t$rows_error = $rows_error['count'];\n\n\t\t$rows_saved = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'saved'\")->row;\n\t\t$rows_saved = $rows_saved['count'];\n\n\t\t$rows_total = $rows_uploaded + $rows_ok + $rows_error + $rows_saved;\n\n\t\t$links = $this->db->query(\"\n\t\t\tSELECT COUNT(*) as count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product_link`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"'\")->row;\n\t\t$links = $links['count'];\n\n\t\tif ($rows_total === 0 && $links > 0) {\n\t\t\treturn 'linked';\n\t\t} else if ($rows_total == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($rows_uploaded > 0) {\n\t\t\treturn 'processing';\n\t\t}\n\n\t\tif ($rows_uploaded == 0 && $rows_ok > 0 && $rows_error == 0) {\n\t\t\treturn 'ok';\n\t\t}\n\n\t\tif ($rows_saved > 0) {\n\t\t\treturn 'saved';\n\t\t}\n\n\t\tif ($rows_uploaded == 0 && $rows_error > 0 && $rows_ok == 0) {\n\t\t\t$quick = $this->db->query(\"SELECT * FROM `\" . DB_PREFIX . \"amazon_product` WHERE `product_id` = \" . (int)$product_id . \" AND `version` = 3\")->row;\n\n\t\t\tif ($quick) {\n\t\t\t\treturn 'error_quick';\n\t\t\t} else {\n\t\t\t\treturn 'error_advanced';\n\t\t\t}\n\t\t} else {\n\t\t\treturn 'error_few';\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic function getProductErrors($product_id, $version = 2) {\n\t\tif ($version == 3) {\n\t\t\t$message_row = $this->db->query(\"SELECT `messages` FROM `\" . DB_PREFIX . \"amazon_product` WHERE `product_id` = '\" . (int)$product_id . \"' AND `version` = 3\")->row;\n\n\t\t\treturn json_decode($message_row['messages']);\n\t\t}\n\n\t\t$result = array();\n\n\t\t$insertion_rows = $this->db->query(\"SELECT `sku`, `insertion_id` FROM `\" . DB_PREFIX . \"amazon_product` WHERE `product_id` = '\" . (int)$product_id . \"' AND `version` = 2\")->rows;\n\n\t\tif (!empty($insertion_rows)) {\n\t\t\tforeach($insertion_rows as $insertion_row) {\n\t\t\t\t$error_rows = $this->db->query(\"SELECT * FROM `\" . DB_PREFIX . \"amazon_product_error` WHERE `sku` = '\" . $this->db->escape($insertion_row['sku']) . \"' AND `insertion_id` = '\" . $this->db->escape($insertion_row['insertion_id']) . \"'\")->rows;\n\n\t\t\t\tforeach($error_rows as $error_row) {\n\t\t\t\t\t$result[] = $error_row;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function getProductsWithErrors() {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT `product_id`, `sku` FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `status` = 'error' AND `version` = 2\")->rows;\n\t}\n\n\tpublic function deleteProduct($product_id) {\n\t\t$this->db->query(\n\t\t\t\"DELETE FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"'\");\n\t}\n\n\tpublic function linkProduct($amazon_sku, $product_id, $var = '') {\n\t\t$count = $this->db->query(\"SELECT COUNT(*) as 'count' FROM `\" . DB_PREFIX . \"amazon_product_link` WHERE `product_id` = '\" . (int)$product_id . \"' AND `amazon_sku` = '\" . $this->db->escape($amazon_sku) . \"' AND `var` = '\" . $this->db->escape($var) . \"' LIMIT 1\")->row;\n\t\tif ($count['count'] == 0) {\n\t\t\t$this->db->query(\"INSERT INTO `\" . DB_PREFIX . \"amazon_product_link` SET `product_id` = '\" . (int)$product_id . \"', `amazon_sku` = '\" . $this->db->escape($amazon_sku) . \"', `var` = '\" . $this->db->escape($var) . \"'\");\n\t\t}\n\t}\n\n\tpublic function removeProductLink($amazon_sku) {\n\t\t$this->db->query(\n\t\t\t\"DELETE FROM `\" . DB_PREFIX . \"amazon_product_link`\n\t\t\tWHERE `amazon_sku` = '\" . $this->db->escape($amazon_sku) . \"'\");\n\t}\n\n\tpublic function removeAdvancedErrors($product_id) {\n\t\t$product_rows = $this->db->query(\"\n\t\t\tSELECT `insertion_id` FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `version` = 2\")->rows;\n\n\t\tforeach ($product_rows as $product) {\n\t\t\t$this->db->query(\n\t\t\t\t\"DELETE FROM `\" . DB_PREFIX . \"amazon_product_error`\n\t\t\t\tWHERE `insertion_id` = '\" . $this->db->escape($product['insertion_id']) . \"'\");\n\t\t}\n\n\t\t$this->db->query(\n\t\t\t\"UPDATE `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `status` = 'saved', `insertion_id` = ''\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `status` = 'error' AND `version` = 2\");\n\t}\n\n\tpublic function getProductLinks($product_id = 'all') {\n\t\t$query = \"\n\t\t\tSELECT `apl`.`product_id`, `pd`.`name` as `product_name`, `p`.`model`, `apl`.`amazon_sku`, `p`.`sku`, `apl`.`var`, '' as `combination`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product_link` as `apl`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\tON `apl`.`product_id` = `pd`.`product_id`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product` as `p`\n\t\t\tON `apl`.`product_id` = `p`.`product_id`\";\n\n\t\tif ($product_id != 'all') {\n\t\t\t$query .= \" WHERE `apl`.`product_id` = '\" . (int)$product_id . \"' AND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\";\n\t\t} else {\n\t\t\t$query .= \"WHERE `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\";\n\t\t}\n\n\t\t$product_links = $this->db->query($query)->rows;\n\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$this->load->model('tool/image');\n\n\t\t\tforeach ($product_links as $key => $product_link) {\n\t\t\t\t$variants = $this->model_module_openstock->getVariants($product_link['product_id']);\n\n\t\t\t\tif (!empty($variants)) {\n\t\t\t\t\tforeach($variants as $variant) {\n\t\t\t\t\t\tif ($variant['sku'] == $product_link['var']) {\n\t\t\t\t\t\t\t$product_links[$key]['combination'] = $variant['combination'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $product_links;\n\t\t} else {\n\t\t\treturn $product_links;\n\t\t}\n\t}\n\n\tpublic function getUnlinkedProducts() {\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$rows = $this->db->query(\"\n\t\t\t\tSELECT `p`.`product_id`, `p`.`model`, `p`.`sku`, `pd`.`name` as `product_name`, '' as `var`, '' as `combination`, `p`.`has_option`\n\t\t\t\tFROM `\" . DB_PREFIX . \"product` as `p`\n\t\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\t\tON `p`.`product_id` = `pd`.`product_id`\n\t\t\t\tAND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\")->rows;\n\n\t\t\t$result = array();\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$this->load->model('tool/image');\n\t\t\tforeach($rows as $row) {\n\t\t\t\tif ($row['has_option'] == 1) {\n\t\t\t\t\t$stock_opts = $this->model_module_openstock->getVariants($row['product_id']);\n\t\t\t\t\tforeach($stock_opts as $opt) {\n\t\t\t\t\t\tif ($this->productLinkExists($row['product_id'], $opt['sku'])) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$row['combination'] = $opt['combination'];\n\t\t\t\t\t\t$row['sku'] = $opt['sku'];\n\t\t\t\t\t\t$result[] = $row;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!$this->productLinkExists($row['product_id'], $row['sku'])) {\n\t\t\t\t\t\t$result[] = $row;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$result = $this->db->query(\"\n\t\t\t\tSELECT `p`.`product_id`, `p`.`model`, `p`.`sku`, `pd`.`name` as `product_name`, '' as `var`, '' as `combination`\n\t\t\t\tFROM `\" . DB_PREFIX . \"product` as `p`\n\t\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\t\tON `p`.`product_id` = `pd`.`product_id`\n\t\t\t\tLEFT JOIN `\" . DB_PREFIX . \"amazon_product_link` as `apl`\n\t\t\t\tON `apl`.`product_id` = `p`.`product_id`\n\t\t\t\tWHERE `apl`.`amazon_sku` IS NULL\n\t\t\t\tAND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\")->rows;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\tprivate function productLinkExists($product_id, $var) {\n\t\t$link = $this->db->query(\"SELECT * FROM `\" . DB_PREFIX . \"amazon_product_link` WHERE `product_id` = \" . (int)$product_id . \" AND var = '\" . $this->db->escape($var) . \"'\")->row;\n\n\t\tif (empty($link)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function getOrderStatusString($order_id) {\n\t\t$row = $this->db->query(\"\n\t\t\tSELECT `s`.`key`\n\t\t\tFROM `\" . DB_PREFIX . \"order` `o`\n\t\t\tJOIN `\" . DB_PREFIX . \"setting` `s` ON `o`.`order_id` = \" . (int)$order_id . \" AND `s`.`value` = `o`.`order_status_id`\n\t\t\tWHERE `s`.`key` = 'openbay_amazon_order_status_shipped' OR `s`.`key` = 'openbay_amazon_order_status_canceled'\n\t\t\tLIMIT 1\")->row;\n\n\t\tif (!isset($row['key']) || empty($row['key'])) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$key = $row['key'];\n\n\t\tswitch ($key) {\n\t\t\tcase 'openbay_amazon_order_status_shipped':\n\t\t\t\t$order_status = 'shipped';\n\t\t\t\tbreak;\n\t\t\tcase 'openbay_amazon_order_status_canceled':\n\t\t\t\t$order_status = 'canceled';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$order_status = null;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $order_status;\n\t}\n\n\tpublic function updateAmazonOrderTracking($order_id, $courier_id, $courier_from_list, $tracking_no) {\n\t\t$this->db->query(\"\n\t\t\tUPDATE `\" . DB_PREFIX . \"amazon_order`\n\t\t\tSET `courier_id` = '\" . $courier_id . \"',\n\t\t\t\t`courier_other` = \" . (int)!$courier_from_list . \",\n\t\t\t\t`tracking_no` = '\" . $tracking_no . \"'\n\t\t\tWHERE `order_id` = \" . (int)$order_id . \"\");\n\t}\n\n\tpublic function getAmazonOrderId($order_id) {\n\t\t$row = $this->db->query(\"\n\t\t\tSELECT `amazon_order_id`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_order`\n\t\t\tWHERE `order_id` = \" . (int)$order_id . \"\n\t\t\tLIMIT 1\")->row;\n\n\t\tif (isset($row['amazon_order_id']) && !empty($row['amazon_order_id'])) {\n\t\t\treturn $row['amazon_order_id'];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic function getAmazonOrderedProducts($order_id) {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT `aop`.`amazon_order_item_id`, `op`.`quantity`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_order_product` `aop`\n\t\t\tJOIN `\" . DB_PREFIX . \"order_product` `op` ON `op`.`order_product_id` = `aop`.`order_product_id`\n\t\t\t\tAND `op`.`order_id` = \" . (int)$order_id)->rows;\n\t}\n\n\tpublic function getProductQuantity($product_id, $var = '') {\n\t\t$result = null;\n\n\t\tif ($var !== '' && $this->openbay->addonLoad('openstock')) {\n\t\t\t$this->load->model('tool/image');\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$option_stocks = $this->model_module_openstock->getVariants($product_id);\n\n\t\t\t$option = null;\n\t\t\tforeach ($option_stocks as $option_iterator) {\n\t\t\t\tif ($option_iterator['sku'] === $var) {\n\t\t\t\t\t$option = $option_iterator;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($option != null) {\n\t\t\t\t$result = $option['stock'];\n\t\t\t}\n\t\t} else {\n\t\t\t$this->load->model('catalog/product');\n\t\t\t$product_info = $this->model_catalog_product->getProduct($product_id);\n\n\t\t\tif (isset($product_info['quantity'])) {\n\t\t\t\t$result = $product_info['quantity'];\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function getProductSearchTotal($data = array()) {\n\t\t$sql = \"\n\t\t\tSELECT COUNT(*) AS product_total\n\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_search aps ON p.product_id = aps.product_id AND aps.marketplace = '\" . $this->db->escape($data['filter_marketplace']) . \"'\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON p.product_id = apl.product_id\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product ap ON p.product_id = ap.product_id\n\t\t\tWHERE apl.product_id IS NULL AND ap.product_id IS NULL \";\n\n\t\tif (!empty($data['status'])) {\n\t\t\t$sql .= \" AND aps.status = '\" . $this->db->escape($data['status']) . \"'\";\n\t\t}\n\n\t\treturn $this->db->query($sql)->row['product_total'];\n\t}\n\n\tpublic function getProductSearch($data = array()) {\n\t\t$sql = \"\n\t\t\tSELECT p.product_id, marketplace, aps.status, aps.data, aps.matches\n\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_search aps ON p.product_id = aps.product_id AND aps.marketplace = '\" . $this->db->escape($data['filter_marketplace']) . \"'\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON p.product_id = apl.product_id\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product ap ON p.product_id = ap.product_id\n\t\t\tWHERE apl.product_id IS NULL AND ap.product_id IS NULL \";\n\n\t\tif (!empty($data['status'])) {\n\t\t\t$sql .= \" AND aps.status = '\" . $this->db->escape($data['status']) . \"'\";\n\t\t}\n\n\t\t$sql .= \" LIMIT \" . (int)$data['start'] . \", \" . (int)$data['limit'];\n\n\t\t$results = array();\n\n\t\t$rows = $this->db->query($sql)->rows;\n\n\t\tforeach ($rows as $row) {\n\t\t\t$results[] = array(\n\t\t\t\t'product_id' => $row['product_id'],\n\t\t\t\t'marketplace' => $row['marketplace'],\n\t\t\t\t'status' => $row['status'],\n\t\t\t\t'matches' => $row['matches'],\n\t\t\t\t'data' => json_decode($row['data'], 1),\n\t\t\t);\n\t\t}\n\n\t\treturn $results;\n\t}\n\n\tpublic function updateAmazonSkusQuantities($skus) {\n\t\t$sku_array = array();\n\n\t\tforeach ($skus as $sku) {\n\t\t\t$sku_array[] = \"'\" . $this->db->escape($sku) . \"'\";\n\t\t}\n\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$rows = $this->db->query(\"SELECT apl.amazon_sku, if (pov.product_id IS NULL, p.quantity, pov.stock) AS 'quantity' FROM \" . DB_PREFIX . \"amazon_product_link apl JOIN \" . DB_PREFIX . \"product p ON apl.product_id = p.product_id LEFT JOIN \" . DB_PREFIX . \"product_option_variant pov ON apl.product_id = pov.product_id AND apl.var = pov.sku WHERE apl.amazon_sku IN (\" . implode(',', $sku_array) . \")\")->rows;\n\t\t} else {\n\t\t\t$rows = $this->db->query(\"SELECT apl.amazon_sku, p.quantity FROM \" . DB_PREFIX . \"amazon_product_link apl JOIN \" . DB_PREFIX . \"product p ON apl.product_id = p.product_id WHERE apl.amazon_sku IN (\" . implode(',', $sku_array) . \")\")->rows;\n\t\t}\n\n\t\t$return = array();\n\n\t\tforeach ($rows as $row) {\n\t\t\t$return[$row['amazon_sku']] = $row['quantity'];\n\t\t}\n\n\t\t$this->openbay->amazon->updateQuantities($return);\n\t}\n\n\tpublic function deleteListingReports($marketplace) {\n\t\t$this->db->query(\"DELETE FROM \" . DB_PREFIX . \"amazon_listing_report WHERE marketplace = '\" . $this->db->escape($marketplace) . \"'\");\n\t}\n\n\tpublic function getTotalUnlinkedItemsFromReport($marketplace) {\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\n\t\t\t$sql = \"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity, oc_sku.pov_id\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t  SELECT p.product_id, if (por.product_id IS NULL, p.sku, por.sku) AS 'sku', if (por.product_id IS NULL, NULL, por.sku) AS 'var', if (por.product_id IS NULL, p.quantity, por.stock) AS 'quantity', por.product_option_variant_id AS pov_id\n\t\t\t\t  FROM \" . DB_PREFIX . \"product p\n\t\t\t\t  LEFT JOIN \" . DB_PREFIX . \"product_option_variant por USING(product_id)\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\";\n\n\t\t\t$result = $this->db->query($sql);\n\t\t} else {\n\t\t\t$result = $this->db->query(\"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT p.product_id, p.sku, NULL AS 'var', p.quantity\n\t\t\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\");\n\t\t}\n\n\t\treturn (int)$result->num_rows;\n\t}\n\n\tpublic function getUnlinkedItemsFromReport($marketplace, $limit = 100, $page = 1) {\n\t\t$start = $limit * ($page - 1);\n\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$rows = $this->db->query(\"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity, oc_sku.pov_id\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t  SELECT p.product_id, if (por.product_id IS NULL, p.sku, por.sku) AS 'sku', if (por.product_id IS NULL, NULL, por.sku) AS 'var', if (por.product_id IS NULL, p.quantity, por.stock) AS 'quantity', por.product_option_variant_id AS pov_id\n\t\t\t\t  FROM \" . DB_PREFIX . \"product p\n\t\t\t\t  LEFT JOIN \" . DB_PREFIX . \"product_option_variant por USING(product_id)\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\tLIMIT \" . (int)$start . \",\" . (int)$limit)->rows;\n\t\t} else {\n\t\t\t$rows = $this->db->query(\"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT p.product_id, p.sku, NULL AS 'var', p.quantity\n\t\t\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\tLIMIT \" . (int)$start . \",\" . (int)$limit)->rows;\n\t\t}\n\n\t\t$products = array();\n\n\t\tforeach ($rows as $row) {\n\t\t\t$combinations = array();\n\n\t\t\tif (isset($row['pov_id']) && !empty($row['pov_id'])) {\n\t\t\t\t$variants = (isset($row['pov_id']) ? $this->model_module_openstock->getVariant($row['pov_id']) : '');\n\n\t\t\t\tforeach ($variants as $variant) {\n\t\t\t\t\t$combinations[] =  $variant['option_value_name'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$products[] = array(\n\t\t\t\t'product_id' => $row['product_id'],\n\t\t\t\t'name' => $row['name'],\n\t\t\t\t'sku' => $row['sku'],\n\t\t\t\t'var' => $row['var'],\n\t\t\t\t'quantity' => $row['quantity'],\n\t\t\t\t'amazon_sku' => $row['amazon_sku'],\n\t\t\t\t'amazon_quantity' => $row['amazon_quantity'],\n\t\t\t\t'amazon_price' => number_format($row['amazon_price'], 2, '.', ''),\n\t\t\t\t'asin' => $row['asin'],\n\t\t\t\t'combination' => implode(' > ', $combinations),\n\t\t\t);\n\t\t}\n\n\t\treturn $products;\n\t}\n\n\tpublic function getAsinLink($asin, $marketplace) {\n\t\tswitch ($marketplace) {\n\t\t\tcase 'uk':\n\t\t\t\t$link = 'https://www.amazon.co.uk/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'de':\n\t\t\t\t$link = 'https://www.amazon.de/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'fr':\n\t\t\t\t$link = 'https://www.amazon.fr/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'it':\n\t\t\t\t$link = 'https://www.amazon.it/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'es':\n\t\t\t\t$link = 'https://www.amazon.es/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $link;\n\t}\n}"], "fixing_code": ["<?php\nclass ModelOpenbayAmazon extends Model {\n\tpublic function install() {\n\t\t$this->load->model('extension/event');\n\n\t\t$this->model_extension_event->addEvent('openbaypro_amazon', 'catalog/model/checkout/order/addOrderHistory/before', 'openbay/amazon/eventAddOrderHistory');\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_order` (\n\t\t\t  `order_id` int(11) NOT NULL ,\n\t\t\t  `amazon_order_id` char(19) NOT NULL ,\n\t\t\t  `courier_id` varchar(255) NOT NULL ,\n\t\t\t  `courier_other` tinyint(1) NOT NULL,\n\t\t\t  `tracking_no` varchar(255) NOT NULL ,\n\t\t\t  PRIMARY KEY (`order_id`, `amazon_order_id`)\n\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_order_product` (\n\t\t\t\t`order_product_id` int(11) NOT NULL ,\n\t\t\t\t`amazon_order_item_id` varchar(255) NOT NULL,\n\t\t\t\tPRIMARY KEY(`order_product_id`, `amazon_order_item_id`)\n\t\t);\");\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_unshipped` (\n\t\t\t\t`order_id` int(11) NOT NULL,\n\t\t\t\t`product_id` int(11) NOT NULL,\n\t\t\t\t`quantity` int(11) NOT NULL DEFAULT '0',\n\t\t\t\tPRIMARY KEY (`order_id`,`product_id`)\n\t\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product` (\n\t\t  `version` int(11) NOT NULL DEFAULT 2,\n\t\t  `product_id`  int(11) NOT NULL ,\n\t\t  `category`  varchar(255) NOT NULL ,\n\t\t  `sku`  varchar(255) NOT NULL ,\n\t\t  `insertion_id` varchar(255) NOT NULL ,\n\t\t  `data`  text NOT NULL ,\n\t\t  `status` enum('saved','uploaded','ok','error') NOT NULL ,\n\t\t  `price`  decimal(15,4) NOT NULL COMMENT 'Price on Amazon' ,\n\t\t  `var` char(100) NOT NULL DEFAULT '',\n\t\t  `marketplaces` text NOT NULL ,\n\t\t  `messages` text NOT NULL,\n\t\t  PRIMARY KEY (`product_id`, `var`)\n\t\t);\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_error` (\n\t\t  `error_id` int(11) NOT NULL AUTO_INCREMENT,\n\t\t  `sku` varchar(255) NOT NULL ,\n\t\t  `insertion_id` varchar(255) NOT NULL ,\n\t\t  `error_code` int(11) NOT NULL ,\n\t\t  `message` text NOT NULL ,\n\t\t  PRIMARY KEY (`error_id`)\n\t\t);\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_link` (\n\t\t  `id` int(11) NOT NULL AUTO_INCREMENT,\n\t\t  `amazon_sku` varchar(255) NOT NULL,\n\t\t  `var` char(100) NOT NULL DEFAULT '',\n\t\t  `product_id` int(11) NOT NULL,\n\t\t  PRIMARY KEY (`id`)\n\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_product_search` (\n\t\t\t`product_id` int(11) NOT NULL,\n\t\t\t`marketplace` enum('uk','de','es','it','fr') NOT NULL,\n\t\t\t`status` enum('searching','finished') NOT NULL,\n\t\t\t`matches` int(11) DEFAULT NULL,\n\t\t\t`data` text,\n\t\t\tPRIMARY KEY (`product_id`,`marketplace`)\n\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\n\t\t$this->db->query(\"\n\t\t\tCREATE TABLE IF NOT EXISTS `\" . DB_PREFIX . \"amazon_listing_report` (\n\t\t\t\t`marketplace` enum('uk','de','fr','es','it') NOT NULL,\n\t\t\t\t`sku` varchar(255) NOT NULL,\n\t\t\t\t`quantity` int(10) unsigned NOT NULL,\n\t\t\t\t`asin` varchar(255) NOT NULL,\n\t\t\t\t`price` decimal(10,4) NOT NULL,\n\t\t\t\tPRIMARY KEY (`marketplace`,`sku`)\n\t\t\t) DEFAULT COLLATE=utf8_general_ci;\");\n\t}\n\n\tpublic function uninstall() {\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_order`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_order_product`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product2`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_link`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_unshipped`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_error`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_process`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_unshipped`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_product_search`\");\n\t\t$this->db->query(\"DROP TABLE IF EXISTS `\" . DB_PREFIX . \"amazon_listing_report`\");\n\n\t\t$this->db->query(\"DELETE FROM `\" . DB_PREFIX . \"setting` WHERE `code` = 'openbay_amazon'\");\n\n\t\t$this->load->model('extension/event');\n\t\t$this->model_extension_event->deleteEvent('openbaypro_amazon');\n\t}\n\n\tpublic function patch() {\n\t\tif ($this->config->get('openbay_amazon_status') == 1) {\n\n\t\t}\n\t}\n\n\tpublic function scheduleOrders($data) {\n\t\t$log = new Log('amazon.log');\n\n\t\t$request_xml = '<Request>\n  <ResponseURL>' . HTTPS_CATALOG . 'index.php?route=openbay/amazon/order</ResponseURL>\n  <MarketplaceIDs>';\n\n\t\tforeach ($data['openbay_amazon_orders_marketplace_ids'] as $marketplace_id) {\n\t\t\t$request_xml .= '    <MarketplaceID>' . $marketplace_id . '</MarketplaceID>';\n\t\t}\n\n\t\t$request_xml .= '\n  </MarketplaceIDs>\n</Request>';\n\n\t\t$response = $this->openbay->amazon->call('order/scheduleOrders', $request_xml, false);\n\n\t\tlibxml_use_internal_errors(true);\n\t\t$response_xml = simplexml_load_string($response);\n\t\tlibxml_use_internal_errors(false);\n\n\t\tif ($response_xml && $response_xml->Status == '0') {\n\t\t\t$log->write('Scheduling orders call was successful');\n\t\t\treturn true;\n\t\t}\n\n\t\t$log->write('Failed to schedule orders. Response: ' . $response);\n\n\t\treturn false;\n\t}\n\n\tpublic function saveProduct($product_id, $data_array) {\n\t\tif (isset($data_array['fields']['item-price'])) {\n\t\t\t$price = $data_array['fields']['item-price'];\n\t\t} else if (isset($data_array['fields']['price'])) {\n\t\t\t$price = $data_array['fields']['price'];\n\t\t} else if (isset($data_array['fields']['StandardPrice'])) {\n\t\t\t$price = $data_array['fields']['StandardPrice'];\n\t\t}   else {\n\t\t\t$price = 0;\n\t\t}\n\n\t\t$category = (isset($data_array['category'])) ? $data_array['category'] : \"\";\n\t\t$sku = (isset($data_array['fields']['sku'])) ? $data_array['fields']['sku'] : \"\";\n\t\tif (isset($data_array['fields']['sku'])) {\n\t\t\t$sku = $data_array['fields']['sku'];\n\t\t} else if (isset($data_array['fields']['SKU'])) {\n\t\t\t$sku = $data_array['fields']['SKU'];\n\t\t}\n\n\t\t$var = isset($data_array['optionVar']) ? $data_array['optionVar'] : '';\n\n\t\t$marketplaces = isset($data_array['marketplace_ids']) ? serialize($data_array['marketplace_ids']) : serialize(array());\n\n\t\t$data_encoded = json_encode(array('fields' => $data_array['fields']));\n\n\t\t$this->db->query(\"\n\t\t\tREPLACE INTO `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `product_id` = '\" . (int)$product_id . \"',\n\t\t\t\t`sku` = '\" . $this->db->escape($sku) . \"',\n\t\t\t\t`category` = '\" . $this->db->escape($category) . \"',\n\t\t\t\t`data` = '\" . $this->db->escape($data_encoded) . \"',\n\t\t\t\t`status` = 'saved',\n\t\t\t\t`insertion_id` = '',\n\t\t\t\t`price` = '\" . $price . \"',\n\t\t\t\t`var` = '\" . $this->db->escape($var) . \"',\n\t\t\t\t`marketplaces` = '\" . $this->db->escape($marketplaces) . \"'\");\n\t}\n\n\tpublic function deleteSaved($product_id, $var = '') {\n\t\t$this->db->query(\"DELETE FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"'\");\n\t}\n\n\tpublic function getSavedProducts() {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT `ap`.`status`, `ap`.`product_id`, `ap`.`sku` as `amazon_sku`, `pd`.`name` as `product_name`, `p`.`model` as `product_model`, `p`.`sku` as `product_sku`, `ap`.`var` as `var`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product` as `ap`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\tON `ap`.`product_id` = `pd`.`product_id`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product` as `p`\n\t\t\tON `ap`.`product_id` = `p`.`product_id`\n\t\t\tWHERE `ap`.`status` = 'saved'\n\t\t\tAND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\")->rows;\n\t}\n\n\tpublic function getSavedProductsData() {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT * FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `status` = 'saved' AND `version` = 2\")->rows;\n\t}\n\n\tpublic function getProduct($product_id, $var = '') {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT * FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"' AND `version` = 2\")->row;\n\t}\n\n\tpublic function getProductCategory($product_id, $var = '') {\n\t\t$row = $this->db->query(\"\n\t\t\tSELECT `category` FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"' AND `version` = 2\")->row;\n\t\tif (isset($row['category'])) {\n\t\t\treturn $row['category'];\n\t\t} else {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tpublic function setProductUploaded($product_id, $insertion_id, $var = '') {\n\t\t$this->db->query(\n\t\t\t\"UPDATE `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `status` = 'uploaded', `insertion_id` = '\" . $this->db->escape($insertion_id) . \"'\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `var` = '\" . $this->db->escape($var) . \"' AND `version` = 2\");\n\t}\n\n\tpublic function resetUploaded($insertion_id) {\n\t\t$this->db->query(\n\t\t\t\"UPDATE `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `status` = 'saved', `insertion_id` = ''\n\t\t\tWHERE `insertion_id` = '\" . $this->db->escape($insertion_id) . \"' AND `version` = 2\");\n\t}\n\n\tpublic function getProductStatus($product_id) {\n\n\t\t$rows_uploaded = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'uploaded'\")->row;\n\t\t$rows_uploaded = $rows_uploaded['count'];\n\n\t\t$rows_ok = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'ok'\")->row;\n\t\t$rows_ok = $rows_ok['count'];\n\n\t\t$rows_error = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'error'\")->row;\n\t\t$rows_error = $rows_error['count'];\n\n\t\t$rows_saved = $this->db->query(\"\n\t\t\tSELECT COUNT(*) count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND status = 'saved'\")->row;\n\t\t$rows_saved = $rows_saved['count'];\n\n\t\t$rows_total = $rows_uploaded + $rows_ok + $rows_error + $rows_saved;\n\n\t\t$links = $this->db->query(\"\n\t\t\tSELECT COUNT(*) as count\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product_link`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"'\")->row;\n\t\t$links = $links['count'];\n\n\t\tif ($rows_total === 0 && $links > 0) {\n\t\t\treturn 'linked';\n\t\t} else if ($rows_total == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($rows_uploaded > 0) {\n\t\t\treturn 'processing';\n\t\t}\n\n\t\tif ($rows_uploaded == 0 && $rows_ok > 0 && $rows_error == 0) {\n\t\t\treturn 'ok';\n\t\t}\n\n\t\tif ($rows_saved > 0) {\n\t\t\treturn 'saved';\n\t\t}\n\n\t\tif ($rows_uploaded == 0 && $rows_error > 0 && $rows_ok == 0) {\n\t\t\t$quick = $this->db->query(\"SELECT * FROM `\" . DB_PREFIX . \"amazon_product` WHERE `product_id` = \" . (int)$product_id . \" AND `version` = 3\")->row;\n\n\t\t\tif ($quick) {\n\t\t\t\treturn 'error_quick';\n\t\t\t} else {\n\t\t\t\treturn 'error_advanced';\n\t\t\t}\n\t\t} else {\n\t\t\treturn 'error_few';\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic function getProductErrors($product_id, $version = 2) {\n\t\tif ($version == 3) {\n\t\t\t$message_row = $this->db->query(\"SELECT `messages` FROM `\" . DB_PREFIX . \"amazon_product` WHERE `product_id` = '\" . (int)$product_id . \"' AND `version` = 3\")->row;\n\n\t\t\treturn json_decode($message_row['messages']);\n\t\t}\n\n\t\t$result = array();\n\n\t\t$insertion_rows = $this->db->query(\"SELECT `sku`, `insertion_id` FROM `\" . DB_PREFIX . \"amazon_product` WHERE `product_id` = '\" . (int)$product_id . \"' AND `version` = 2\")->rows;\n\n\t\tif (!empty($insertion_rows)) {\n\t\t\tforeach($insertion_rows as $insertion_row) {\n\t\t\t\t$error_rows = $this->db->query(\"SELECT * FROM `\" . DB_PREFIX . \"amazon_product_error` WHERE `sku` = '\" . $this->db->escape($insertion_row['sku']) . \"' AND `insertion_id` = '\" . $this->db->escape($insertion_row['insertion_id']) . \"'\")->rows;\n\n\t\t\t\tforeach($error_rows as $error_row) {\n\t\t\t\t\t$result[] = $error_row;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function getProductsWithErrors() {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT `product_id`, `sku` FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `status` = 'error' AND `version` = 2\")->rows;\n\t}\n\n\tpublic function deleteProduct($product_id) {\n\t\t$this->db->query(\n\t\t\t\"DELETE FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"'\");\n\t}\n\n\tpublic function linkProduct($amazon_sku, $product_id, $var = '') {\n\t\t$count = $this->db->query(\"SELECT COUNT(*) as 'count' FROM `\" . DB_PREFIX . \"amazon_product_link` WHERE `product_id` = '\" . (int)$product_id . \"' AND `amazon_sku` = '\" . $this->db->escape($amazon_sku) . \"' AND `var` = '\" . $this->db->escape($var) . \"' LIMIT 1\")->row;\n\t\tif ($count['count'] == 0) {\n\t\t\t$this->db->query(\"INSERT INTO `\" . DB_PREFIX . \"amazon_product_link` SET `product_id` = '\" . (int)$product_id . \"', `amazon_sku` = '\" . $this->db->escape($amazon_sku) . \"', `var` = '\" . $this->db->escape($var) . \"'\");\n\t\t}\n\t}\n\n\tpublic function removeProductLink($amazon_sku) {\n\t\t$this->db->query(\n\t\t\t\"DELETE FROM `\" . DB_PREFIX . \"amazon_product_link`\n\t\t\tWHERE `amazon_sku` = '\" . $this->db->escape($amazon_sku) . \"'\");\n\t}\n\n\tpublic function removeAdvancedErrors($product_id) {\n\t\t$product_rows = $this->db->query(\"\n\t\t\tSELECT `insertion_id` FROM `\" . DB_PREFIX . \"amazon_product`\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `version` = 2\")->rows;\n\n\t\tforeach ($product_rows as $product) {\n\t\t\t$this->db->query(\n\t\t\t\t\"DELETE FROM `\" . DB_PREFIX . \"amazon_product_error`\n\t\t\t\tWHERE `insertion_id` = '\" . $this->db->escape($product['insertion_id']) . \"'\");\n\t\t}\n\n\t\t$this->db->query(\n\t\t\t\"UPDATE `\" . DB_PREFIX . \"amazon_product`\n\t\t\tSET `status` = 'saved', `insertion_id` = ''\n\t\t\tWHERE `product_id` = '\" . (int)$product_id . \"' AND `status` = 'error' AND `version` = 2\");\n\t}\n\n\tpublic function getProductLinks($product_id = 'all') {\n\t\t$query = \"\n\t\t\tSELECT `apl`.`product_id`, `pd`.`name` as `product_name`, `p`.`model`, `apl`.`amazon_sku`, `p`.`sku`, `apl`.`var`, '' as `combination`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_product_link` as `apl`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\tON `apl`.`product_id` = `pd`.`product_id`\n\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product` as `p`\n\t\t\tON `apl`.`product_id` = `p`.`product_id`\";\n\n\t\tif ($product_id != 'all') {\n\t\t\t$query .= \" WHERE `apl`.`product_id` = '\" . (int)$product_id . \"' AND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\";\n\t\t} else {\n\t\t\t$query .= \"WHERE `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\";\n\t\t}\n\n\t\t$product_links = $this->db->query($query)->rows;\n\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$this->load->model('tool/image');\n\n\t\t\tforeach ($product_links as $key => $product_link) {\n\t\t\t\t$variants = $this->model_module_openstock->getVariants($product_link['product_id']);\n\n\t\t\t\tif (!empty($variants)) {\n\t\t\t\t\tforeach($variants as $variant) {\n\t\t\t\t\t\tif ($variant['sku'] == $product_link['var']) {\n\t\t\t\t\t\t\t$product_links[$key]['combination'] = $variant['combination'];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn $product_links;\n\t\t} else {\n\t\t\treturn $product_links;\n\t\t}\n\t}\n\n\tpublic function getUnlinkedProducts() {\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$rows = $this->db->query(\"\n\t\t\t\tSELECT `p`.`product_id`, `p`.`model`, `p`.`sku`, `pd`.`name` as `product_name`, '' as `var`, '' as `combination`, `p`.`has_option`\n\t\t\t\tFROM `\" . DB_PREFIX . \"product` as `p`\n\t\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\t\tON `p`.`product_id` = `pd`.`product_id`\n\t\t\t\tAND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\")->rows;\n\n\t\t\t$result = array();\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$this->load->model('tool/image');\n\t\t\tforeach($rows as $row) {\n\t\t\t\tif ($row['has_option'] == 1) {\n\t\t\t\t\t$stock_opts = $this->model_module_openstock->getVariants($row['product_id']);\n\t\t\t\t\tforeach($stock_opts as $opt) {\n\t\t\t\t\t\tif ($this->productLinkExists($row['product_id'], $opt['sku'])) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$row['combination'] = $opt['combination'];\n\t\t\t\t\t\t$row['sku'] = $opt['sku'];\n\t\t\t\t\t\t$result[] = $row;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!$this->productLinkExists($row['product_id'], $row['sku'])) {\n\t\t\t\t\t\t$result[] = $row;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$result = $this->db->query(\"\n\t\t\t\tSELECT `p`.`product_id`, `p`.`model`, `p`.`sku`, `pd`.`name` as `product_name`, '' as `var`, '' as `combination`\n\t\t\t\tFROM `\" . DB_PREFIX . \"product` as `p`\n\t\t\t\tLEFT JOIN `\" . DB_PREFIX . \"product_description` as `pd`\n\t\t\t\tON `p`.`product_id` = `pd`.`product_id`\n\t\t\t\tLEFT JOIN `\" . DB_PREFIX . \"amazon_product_link` as `apl`\n\t\t\t\tON `apl`.`product_id` = `p`.`product_id`\n\t\t\t\tWHERE `apl`.`amazon_sku` IS NULL\n\t\t\t\tAND `pd`.`language_id` = '\" . (int)$this->config->get('config_language_id') . \"'\")->rows;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\tprivate function productLinkExists($product_id, $var) {\n\t\t$link = $this->db->query(\"SELECT * FROM `\" . DB_PREFIX . \"amazon_product_link` WHERE `product_id` = \" . (int)$product_id . \" AND var = '\" . $this->db->escape($var) . \"'\")->row;\n\n\t\tif (empty($link)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tpublic function getOrderStatusString($order_id) {\n\t\t$row = $this->db->query(\"\n\t\t\tSELECT `s`.`key`\n\t\t\tFROM `\" . DB_PREFIX . \"order` `o`\n\t\t\tJOIN `\" . DB_PREFIX . \"setting` `s` ON `o`.`order_id` = \" . (int)$order_id . \" AND `s`.`value` = `o`.`order_status_id`\n\t\t\tWHERE `s`.`key` = 'openbay_amazon_order_status_shipped' OR `s`.`key` = 'openbay_amazon_order_status_canceled'\n\t\t\tLIMIT 1\")->row;\n\n\t\tif (!isset($row['key']) || empty($row['key'])) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$key = $row['key'];\n\n\t\tswitch ($key) {\n\t\t\tcase 'openbay_amazon_order_status_shipped':\n\t\t\t\t$order_status = 'shipped';\n\t\t\t\tbreak;\n\t\t\tcase 'openbay_amazon_order_status_canceled':\n\t\t\t\t$order_status = 'canceled';\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$order_status = null;\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $order_status;\n\t}\n\n\tpublic function updateAmazonOrderTracking($order_id, $courier_id, $courier_from_list, $tracking_no) {\n\t\t$this->db->query(\"\n\t\t\tUPDATE `\" . DB_PREFIX . \"amazon_order`\n\t\t\tSET `courier_id` = '\" . $this->db->escape($courier_id) . \"',\n\t\t\t\t`courier_other` = \" . (int)!$courier_from_list . \",\n\t\t\t\t`tracking_no` = '\" . $this->db->escape($tracking_no) . \"'\n\t\t\tWHERE `order_id` = \" . (int)$order_id . \"\");\n\t}\n\n\tpublic function getAmazonOrderId($order_id) {\n\t\t$row = $this->db->query(\"\n\t\t\tSELECT `amazon_order_id`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_order`\n\t\t\tWHERE `order_id` = \" . (int)$order_id . \"\n\t\t\tLIMIT 1\")->row;\n\n\t\tif (isset($row['amazon_order_id']) && !empty($row['amazon_order_id'])) {\n\t\t\treturn $row['amazon_order_id'];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic function getAmazonOrderedProducts($order_id) {\n\t\treturn $this->db->query(\"\n\t\t\tSELECT `aop`.`amazon_order_item_id`, `op`.`quantity`\n\t\t\tFROM `\" . DB_PREFIX . \"amazon_order_product` `aop`\n\t\t\tJOIN `\" . DB_PREFIX . \"order_product` `op` ON `op`.`order_product_id` = `aop`.`order_product_id`\n\t\t\t\tAND `op`.`order_id` = \" . (int)$order_id)->rows;\n\t}\n\n\tpublic function getProductQuantity($product_id, $var = '') {\n\t\t$result = null;\n\n\t\tif ($var !== '' && $this->openbay->addonLoad('openstock')) {\n\t\t\t$this->load->model('tool/image');\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$option_stocks = $this->model_module_openstock->getVariants($product_id);\n\n\t\t\t$option = null;\n\t\t\tforeach ($option_stocks as $option_iterator) {\n\t\t\t\tif ($option_iterator['sku'] === $var) {\n\t\t\t\t\t$option = $option_iterator;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($option != null) {\n\t\t\t\t$result = $option['stock'];\n\t\t\t}\n\t\t} else {\n\t\t\t$this->load->model('catalog/product');\n\t\t\t$product_info = $this->model_catalog_product->getProduct($product_id);\n\n\t\t\tif (isset($product_info['quantity'])) {\n\t\t\t\t$result = $product_info['quantity'];\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function getProductSearchTotal($data = array()) {\n\t\t$sql = \"\n\t\t\tSELECT COUNT(*) AS product_total\n\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_search aps ON p.product_id = aps.product_id AND aps.marketplace = '\" . $this->db->escape($data['filter_marketplace']) . \"'\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON p.product_id = apl.product_id\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product ap ON p.product_id = ap.product_id\n\t\t\tWHERE apl.product_id IS NULL AND ap.product_id IS NULL \";\n\n\t\tif (!empty($data['status'])) {\n\t\t\t$sql .= \" AND aps.status = '\" . $this->db->escape($data['status']) . \"'\";\n\t\t}\n\n\t\treturn $this->db->query($sql)->row['product_total'];\n\t}\n\n\tpublic function getProductSearch($data = array()) {\n\t\t$sql = \"\n\t\t\tSELECT p.product_id, marketplace, aps.status, aps.data, aps.matches\n\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_search aps ON p.product_id = aps.product_id AND aps.marketplace = '\" . $this->db->escape($data['filter_marketplace']) . \"'\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON p.product_id = apl.product_id\n\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product ap ON p.product_id = ap.product_id\n\t\t\tWHERE apl.product_id IS NULL AND ap.product_id IS NULL \";\n\n\t\tif (!empty($data['status'])) {\n\t\t\t$sql .= \" AND aps.status = '\" . $this->db->escape($data['status']) . \"'\";\n\t\t}\n\n\t\t$sql .= \" LIMIT \" . (int)$data['start'] . \", \" . (int)$data['limit'];\n\n\t\t$results = array();\n\n\t\t$rows = $this->db->query($sql)->rows;\n\n\t\tforeach ($rows as $row) {\n\t\t\t$results[] = array(\n\t\t\t\t'product_id' => $row['product_id'],\n\t\t\t\t'marketplace' => $row['marketplace'],\n\t\t\t\t'status' => $row['status'],\n\t\t\t\t'matches' => $row['matches'],\n\t\t\t\t'data' => json_decode($row['data'], 1),\n\t\t\t);\n\t\t}\n\n\t\treturn $results;\n\t}\n\n\tpublic function updateAmazonSkusQuantities($skus) {\n\t\t$sku_array = array();\n\n\t\tforeach ($skus as $sku) {\n\t\t\t$sku_array[] = \"'\" . $this->db->escape($sku) . \"'\";\n\t\t}\n\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$rows = $this->db->query(\"SELECT apl.amazon_sku, if (pov.product_id IS NULL, p.quantity, pov.stock) AS 'quantity' FROM \" . DB_PREFIX . \"amazon_product_link apl JOIN \" . DB_PREFIX . \"product p ON apl.product_id = p.product_id LEFT JOIN \" . DB_PREFIX . \"product_option_variant pov ON apl.product_id = pov.product_id AND apl.var = pov.sku WHERE apl.amazon_sku IN (\" . implode(',', $sku_array) . \")\")->rows;\n\t\t} else {\n\t\t\t$rows = $this->db->query(\"SELECT apl.amazon_sku, p.quantity FROM \" . DB_PREFIX . \"amazon_product_link apl JOIN \" . DB_PREFIX . \"product p ON apl.product_id = p.product_id WHERE apl.amazon_sku IN (\" . implode(',', $sku_array) . \")\")->rows;\n\t\t}\n\n\t\t$return = array();\n\n\t\tforeach ($rows as $row) {\n\t\t\t$return[$row['amazon_sku']] = $row['quantity'];\n\t\t}\n\n\t\t$this->openbay->amazon->updateQuantities($return);\n\t}\n\n\tpublic function deleteListingReports($marketplace) {\n\t\t$this->db->query(\"DELETE FROM \" . DB_PREFIX . \"amazon_listing_report WHERE marketplace = '\" . $this->db->escape($marketplace) . \"'\");\n\t}\n\n\tpublic function getTotalUnlinkedItemsFromReport($marketplace) {\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\n\t\t\t$sql = \"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity, oc_sku.pov_id\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t  SELECT p.product_id, if (por.product_id IS NULL, p.sku, por.sku) AS 'sku', if (por.product_id IS NULL, NULL, por.sku) AS 'var', if (por.product_id IS NULL, p.quantity, por.stock) AS 'quantity', por.product_option_variant_id AS pov_id\n\t\t\t\t  FROM \" . DB_PREFIX . \"product p\n\t\t\t\t  LEFT JOIN \" . DB_PREFIX . \"product_option_variant por USING(product_id)\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\";\n\n\t\t\t$result = $this->db->query($sql);\n\t\t} else {\n\t\t\t$result = $this->db->query(\"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT p.product_id, p.sku, NULL AS 'var', p.quantity\n\t\t\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\");\n\t\t}\n\n\t\treturn (int)$result->num_rows;\n\t}\n\n\tpublic function getUnlinkedItemsFromReport($marketplace, $limit = 100, $page = 1) {\n\t\t$start = $limit * ($page - 1);\n\n\t\tif ($this->openbay->addonLoad('openstock')) {\n\t\t\t$this->load->model('module/openstock');\n\t\t\t$rows = $this->db->query(\"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity, oc_sku.pov_id\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t  SELECT p.product_id, if (por.product_id IS NULL, p.sku, por.sku) AS 'sku', if (por.product_id IS NULL, NULL, por.sku) AS 'var', if (por.product_id IS NULL, p.quantity, por.stock) AS 'quantity', por.product_option_variant_id AS pov_id\n\t\t\t\t  FROM \" . DB_PREFIX . \"product p\n\t\t\t\t  LEFT JOIN \" . DB_PREFIX . \"product_option_variant por USING(product_id)\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\tLIMIT \" . (int)$start . \",\" . (int)$limit)->rows;\n\t\t} else {\n\t\t\t$rows = $this->db->query(\"\n\t\t\t\tSELECT alr.sku AS 'amazon_sku', alr.quantity AS 'amazon_quantity', alr.asin, alr.price AS 'amazon_price', oc_sku.product_id, pd.name, oc_sku.sku, oc_sku.var, oc_sku.quantity\n\t\t\t\tFROM \" . DB_PREFIX . \"amazon_listing_report alr\n\t\t\t\tLEFT JOIN (\n\t\t\t\t\tSELECT p.product_id, p.sku, NULL AS 'var', p.quantity\n\t\t\t\t\tFROM \" . DB_PREFIX . \"product p\n\t\t\t\t) AS oc_sku ON alr.sku = oc_sku.sku\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"amazon_product_link apl ON (oc_sku.var IS NULL AND oc_sku.product_id = apl.product_id) OR (oc_sku.var IS NOT NULL AND oc_sku.product_id = apl.product_id AND oc_sku.var = apl.var)\n\t\t\t\tLEFT JOIN \" . DB_PREFIX . \"product_description pd ON oc_sku.product_id = pd.product_id AND pd.language_id = \" . (int)$this->config->get('config_language_id') . \"\n\t\t\t\tWHERE apl.product_id IS NULL AND alr.marketplace = '\" . $this->db->escape($marketplace) . \"'\n\t\t\t\tORDER BY alr.sku\n\t\t\t\tLIMIT \" . (int)$start . \",\" . (int)$limit)->rows;\n\t\t}\n\n\t\t$products = array();\n\n\t\tforeach ($rows as $row) {\n\t\t\t$combinations = array();\n\n\t\t\tif (isset($row['pov_id']) && !empty($row['pov_id'])) {\n\t\t\t\t$variants = (isset($row['pov_id']) ? $this->model_module_openstock->getVariant($row['pov_id']) : '');\n\n\t\t\t\tforeach ($variants as $variant) {\n\t\t\t\t\t$combinations[] =  $variant['option_value_name'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$products[] = array(\n\t\t\t\t'product_id' => $row['product_id'],\n\t\t\t\t'name' => $row['name'],\n\t\t\t\t'sku' => $row['sku'],\n\t\t\t\t'var' => $row['var'],\n\t\t\t\t'quantity' => $row['quantity'],\n\t\t\t\t'amazon_sku' => $row['amazon_sku'],\n\t\t\t\t'amazon_quantity' => $row['amazon_quantity'],\n\t\t\t\t'amazon_price' => number_format($row['amazon_price'], 2, '.', ''),\n\t\t\t\t'asin' => $row['asin'],\n\t\t\t\t'combination' => implode(' > ', $combinations),\n\t\t\t);\n\t\t}\n\n\t\treturn $products;\n\t}\n\n\tpublic function getAsinLink($asin, $marketplace) {\n\t\tswitch ($marketplace) {\n\t\t\tcase 'uk':\n\t\t\t\t$link = 'https://www.amazon.co.uk/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'de':\n\t\t\t\t$link = 'https://www.amazon.de/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'fr':\n\t\t\t\t$link = 'https://www.amazon.fr/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'it':\n\t\t\t\t$link = 'https://www.amazon.it/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t\tcase 'es':\n\t\t\t\t$link = 'https://www.amazon.es/dp/' . $asin . '/';\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn $link;\n\t}\n}"], "filenames": ["upload/admin/model/openbay/amazon.php"], "buggy_code_start_loc": [496], "buggy_code_end_loc": [499], "fixing_code_start_loc": [496], "fixing_code_end_loc": [499], "type": "CWE-89", "message": "SQL injection vulnerability in the updateAmazonOrderTracking function in upload/admin/model/openbay/amazon.php in OpenCart before version 2.3.0.0 allows remote authenticated administrators to execute arbitrary SQL commands via a carrier (aka courier_id) parameter to openbay.php.", "other": {"cve": {"id": "CVE-2016-10509", "sourceIdentifier": "cve@mitre.org", "published": "2017-08-31T20:29:00.243", "lastModified": "2017-09-06T18:37:20.867", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL injection vulnerability in the updateAmazonOrderTracking function in upload/admin/model/openbay/amazon.php in OpenCart before version 2.3.0.0 allows remote authenticated administrators to execute arbitrary SQL commands via a carrier (aka courier_id) parameter to openbay.php."}, {"lang": "es", "value": "Una vulnerabilidad de inyecci\u00f3n SQL en la funci\u00f3n updateAmazonOrderTracking en upload/admin/model/openbay/amazon.php en OpenCart en versiones anteriores a la 2.3.0.0 permite que los administradores autenticados remotos ejecuten comandos SQL arbitrarios mediante un par\u00e1metro carrier (tambi\u00e9n conocido como courier_id) en openbay.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:opencart:opencart:*:b1:*:*:*:*:*:*", "versionEndIncluding": "2.3.0.0", "matchCriteriaId": "B114ABB2-724B-49D1-AC57-DB9F0800736E"}]}]}], "references": [{"url": "https://github.com/opencart/opencart/commit/b95044da6ac608e7239f7949ff21d3b65be68f82", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/opencart/opencart/issues/4114", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/opencart/opencart/commit/b95044da6ac608e7239f7949ff21d3b65be68f82"}}