{"buggy_code": ["from flask import g, abort, render_template, send_file\nfrom flask_login import current_user, login_required\nfrom app import login_manager, app\nfrom app.helper.utils import sqlalchemy_info, DataModel\nfrom app.module.user.model import UserModel, UserTokenModel\nfrom app.module.user import UserSession\nfrom werkzeug.routing import BaseConverter, ValidationError\nfrom bson.objectid import ObjectId\nfrom bson.errors import InvalidId\nfrom os import path\n\n#\n# Handler route\n#\n\n\n@app.route('/file/private/<path:filename>')\n@login_required\ndef private_static(filename):\n    # Get path\n    filepath = path.join(app.config.get(\"PRIVATE_DIR\"), filename)\n    if path.isfile(filepath):\n        return send_file(filepath)\n    # End\n    return abort(404)\n\n\n#\n# Middleware\n#\n\n\n@login_manager.user_loader\ndef user_loader(token):\n    # Get token\n    token_data = UserTokenModel.query.available().filter_by(token=token).first()\n    if not token_data:\n        return None\n\n    # Get user\n    user_data = UserModel.query.available().filter_by(id_=token_data.user_id).first()\n    if not user_data:\n        return None\n\n    # User config\n    if user_data.config:\n        g.user_config = DataModel(data=user_data.config)\n    else:\n        g.user_config = DataModel()\n\n    # Return session mixin\n    return UserSession(token=token, user=user_data)\n\n\n@app.context_processor\ndef context_processor():\n    data = None\n    user = None\n\n    # Add user data to jinja\n    if current_user.is_authenticated:\n        user = current_user.user\n\n    return {\n        \"data\": data,\n        \"user\": user\n    }\n\n\n@app.before_request\ndef before_request():\n    pass\n\n\n@app.after_request\ndef after_request(response):\n    # SQLAlchemy info\n    sqlalchemy_info(response)\n\n    # Response\n    return response\n\n#\n# URL Filter\n#\n\n\nclass ObjectIDConverter(BaseConverter):\n    def to_python(self, value):\n        try:\n            return ObjectId(str(value))\n        except (InvalidId, ValueError, TypeError):\n            raise ValidationError()\n\n    def to_url(self, value):\n        return str(value)\n\n\n# Register\napp.url_map.converters['ObjectID'] = ObjectIDConverter\n\n#\n# HTTP error handler\n#\n\n\n@app.errorhandler(400)\ndef bad_request(error):\n    page_data = {\n        \"title\": \"Kesalahan 400\",\n        \"message\": \"Bad Request\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 400\n\n\n@app.errorhandler(401)\ndef unauthorized(error):\n    page_data = {\n        \"title\": \"Kesalahan 401\",\n        \"message\": \"Tidak Sah\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 401\n\n\n@app.errorhandler(403)\ndef access_forbidden(error):\n    page_data = {\n        \"title\": \"Kesalahan 403\",\n        \"message\": \"Akses ditolak<br />Anda tidak memiliki hak akses ke halaman ini\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 403\n\n\n@app.errorhandler(404)\ndef not_found(error):\n    page_data = {\n        \"title\": \"Kesalahan 404\",\n        \"message\": \"Halaman tidak ditemukan<br />Data yang anda akses sudah dihapus atau tidak tersedia\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 404\n\n\n@app.errorhandler(413)\ndef payload_too_large(error):\n    page_data = {\n        \"title\": \"Kesalahan 413\",\n        \"message\": \"Payload Too Large\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 413\n\n\n@app.errorhandler(500)\ndef internal_error(error):\n    web_name = app.config[\"WEB_INFO\"][\"name\"]\n    page_data = {\n        \"title\": \"Kesalahan 500\",\n        \"message\": f\"Terjadi kesalahan pada server internal<br />Jika pesan ini muncul terus-menerus silahkan hubungi pihak {web_name}\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 500\n\n\n@app.errorhandler(501)\ndef not_implemented(error):\n    page_data = {\n        \"title\": \"Kesalahan 501\",\n        \"message\": \"Not Implemented\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 501\n"], "fixing_code": ["from flask import g, abort, render_template, send_file\nfrom flask_login import current_user, login_required\nfrom app import login_manager, app\nfrom app.helper.utils import sqlalchemy_info, DataModel\nfrom app.module.user.model import UserModel, UserTokenModel\nfrom app.module.user import UserSession\nfrom werkzeug.routing import BaseConverter, ValidationError\nfrom werkzeug.utils import safe_join\nfrom bson.objectid import ObjectId\nfrom bson.errors import InvalidId\nfrom os import path\n\n#\n# Handler route\n#\n\n\n@app.route('/file/private/<path:filename>')\n@login_required\ndef private_static(filename):\n    # Get path\n    filepath = safe_join(app.config.get(\"PRIVATE_DIR\"), filename)\n    if path.isfile(filepath):\n        return send_file(filepath)\n    # End\n    return abort(404)\n\n\n#\n# Middleware\n#\n\n\n@login_manager.user_loader\ndef user_loader(token):\n    # Get token\n    token_data = UserTokenModel.query.available().filter_by(token=token).first()\n    if not token_data:\n        return None\n\n    # Get user\n    user_data = UserModel.query.available().filter_by(id_=token_data.user_id).first()\n    if not user_data:\n        return None\n\n    # User config\n    if user_data.config:\n        g.user_config = DataModel(data=user_data.config)\n    else:\n        g.user_config = DataModel()\n\n    # Return session mixin\n    return UserSession(token=token, user=user_data)\n\n\n@app.context_processor\ndef context_processor():\n    data = None\n    user = None\n\n    # Add user data to jinja\n    if current_user.is_authenticated:\n        user = current_user.user\n\n    return {\n        \"data\": data,\n        \"user\": user\n    }\n\n\n@app.before_request\ndef before_request():\n    pass\n\n\n@app.after_request\ndef after_request(response):\n    # SQLAlchemy info\n    sqlalchemy_info(response)\n\n    # Response\n    return response\n\n#\n# URL Filter\n#\n\n\nclass ObjectIDConverter(BaseConverter):\n    def to_python(self, value):\n        try:\n            return ObjectId(str(value))\n        except (InvalidId, ValueError, TypeError):\n            raise ValidationError()\n\n    def to_url(self, value):\n        return str(value)\n\n\n# Register\napp.url_map.converters['ObjectID'] = ObjectIDConverter\n\n#\n# HTTP error handler\n#\n\n\n@app.errorhandler(400)\ndef bad_request(error):\n    page_data = {\n        \"title\": \"Kesalahan 400\",\n        \"message\": \"Bad Request\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 400\n\n\n@app.errorhandler(401)\ndef unauthorized(error):\n    page_data = {\n        \"title\": \"Kesalahan 401\",\n        \"message\": \"Tidak Sah\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 401\n\n\n@app.errorhandler(403)\ndef access_forbidden(error):\n    page_data = {\n        \"title\": \"Kesalahan 403\",\n        \"message\": \"Akses ditolak<br />Anda tidak memiliki hak akses ke halaman ini\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 403\n\n\n@app.errorhandler(404)\ndef not_found(error):\n    page_data = {\n        \"title\": \"Kesalahan 404\",\n        \"message\": \"Halaman tidak ditemukan<br />Data yang anda akses sudah dihapus atau tidak tersedia\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 404\n\n\n@app.errorhandler(413)\ndef payload_too_large(error):\n    page_data = {\n        \"title\": \"Kesalahan 413\",\n        \"message\": \"Payload Too Large\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 413\n\n\n@app.errorhandler(500)\ndef internal_error(error):\n    web_name = app.config[\"WEB_INFO\"][\"name\"]\n    page_data = {\n        \"title\": \"Kesalahan 500\",\n        \"message\": f\"Terjadi kesalahan pada server internal<br />Jika pesan ini muncul terus-menerus silahkan hubungi pihak {web_name}\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 500\n\n\n@app.errorhandler(501)\ndef not_implemented(error):\n    page_data = {\n        \"title\": \"Kesalahan 501\",\n        \"message\": \"Not Implemented\",\n        \"error\": True,\n    }\n    return render_template(\"error.html\", data=page_data), 501\n"], "filenames": ["app/helper/middleware.py"], "buggy_code_start_loc": [7], "buggy_code_end_loc": [22], "fixing_code_start_loc": [8], "fixing_code_end_loc": [23], "type": "CWE-22", "message": "The idayrus/evoting repository before 2022-05-08 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely.", "other": {"cve": {"id": "CVE-2022-31508", "sourceIdentifier": "cve@mitre.org", "published": "2022-07-11T01:15:08.333", "lastModified": "2022-07-15T11:55:13.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The idayrus/evoting repository before 2022-05-08 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely."}, {"lang": "es", "value": "El repositorio idayrus/evoting versiones anteriores al 08-05-2022 en GitHub, permite un salto de ruta absoluto porque la funci\u00f3n send_file de Flask es usada de forma no segura"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 9.3, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:idayrus:e-voting:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-05-08", "matchCriteriaId": "B45C239C-EA51-4658-A4F5-A299C5035BF1"}]}]}], "references": [{"url": "https://github.com/github/securitylab/issues/669#issuecomment-1117265726", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/idayrus/evoting/commit/241d92a4d68f524365a6322b5bbcfaa7d9abc8a3", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/idayrus/evoting/commit/241d92a4d68f524365a6322b5bbcfaa7d9abc8a3"}}