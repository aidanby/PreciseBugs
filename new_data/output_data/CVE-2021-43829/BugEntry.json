{"buggy_code": ["# -*- coding: utf-8 -*-\n\nfrom django.conf import settings\nfrom django.conf.urls import include, url\nfrom django.conf.urls import handler400, handler403, handler404, handler500\nfrom django.urls import path\nfrom django.contrib import admin\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\nfrom django.contrib.auth.views import LogoutView\nfrom django.views.generic import RedirectView\nfrom rest_framework_swagger.views import get_swagger_view\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n    TokenVerifyView,\n)\n\nfrom users import views as user_views\n\n\ndef i18n_javascript(request):\n    return admin.site.i18n_javascript(request)\n\n\nhandler400 = 'app.views.custom_bad_request'\nhandler403 = 'app.views.custom_permission_denied'\nhandler404 = 'app.views.custom_page_not_found'\nhandler500 = 'app.views.custom_error'\n\n\napi_schema_view = get_swagger_view(title='PatrOwl Manager REST-API')\n\nurlpatterns = [\n    url(r'^apis-doc', api_schema_view),\n    url(r'^ht/', include('health_check.urls')),\n    url(r'^auth-jwt/obtain_jwt_token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    url(r'^auth-jwt/refresh_jwt_token/', TokenRefreshView.as_view(), name='token_refresh'),\n    url(r'^auth-jwt/verify/', TokenVerifyView.as_view(), name='token_verify'),\n    url(r'^admin/', admin.site.urls),\n    url(r'^engines/', include('engines.urls')),\n    url(r'^findings/', include('findings.urls')),\n    url(r'^assets/', include('assets.urls')),\n    url(r'^users/', include('users.urls')),\n    url(r'^scans/', include('scans.urls')),\n    url(r'^events/', include('events.urls')),\n    url(r'^rules/', include('rules.urls')),\n    url(r'^reportings/', include('reportings.urls')),\n    url(r'^settings/', include('settings.urls')),\n    url(r'^search', include('search.urls')),\n    url(r'^', include('users.urls'), name='home'),\n\n    url(r'^login$', user_views.login, name='login'),\n    url(r'^logout$', LogoutView.as_view(), {'next_page': settings.LOGOUT_REDIRECT_URL}, name='logout'),\n    # url(r'^signup$', user_views.signup, name='signup'),\n\n    url(r'^favicon\\.ico$', RedirectView.as_view(url='/static/favicon.ico')),\n]\n\n# Debug toolbar & download file\n# if settings.DEBUG:\n#     import debug_toolbar\n#     urlpatterns = [\n#         path('__debug__/', include(debug_toolbar.urls)),\n#     ] + urlpatterns\n# if settings.DEBUG:\nimport debug_toolbar\nurlpatterns = [\n    path('__debug__/', include(debug_toolbar.urls)),\n] + urlpatterns\n\n# urlpatterns += staticfiles_urlpatterns()\n\n# Add PRO edition urls\nif settings.PRO_EDITION:\n    # print(\"urls-PRO_EDITION\", settings.PRO_EDITION)\n    try:\n        from pro.urls import pro_urlpatterns\n        urlpatterns += pro_urlpatterns\n    except ImportError as e:\n        print(e)\n\nurlpatterns += staticfiles_urlpatterns()\n", "# -*- coding: utf-8 -*-\n\nfrom django import forms\nfrom .models import Finding, FINDING_SEVERITIES\n\nENGINE_TYPES = (\n    ('json', 'json'),\n    ('nessus', 'Nessus'),\n)\n\n\nclass ImportFindingsForm(forms.Form):\n    class Meta:\n        fields = ['engine', 'min_level', 'file']\n\n    engine = forms.CharField(widget=forms.Select(\n        attrs={'class': 'form-control form-control-sm'},\n        choices=ENGINE_TYPES))\n    min_level = forms.CharField(widget=forms.Select(\n        attrs={'class': 'form-control form-control-sm'},\n        choices=FINDING_SEVERITIES),\n        label='Minimum severity')\n    file = forms.FileField()\n\n\nclass FindingForm(forms.ModelForm):\n    class Meta:\n        model = Finding\n        fields = ['title', 'type', 'severity', 'status', 'description', 'tags',\n            'solution', 'risk_info', 'vuln_refs', 'links', 'comments', 'asset']\n        widgets = {\n            'description': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'solution': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'tags': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'risk_info': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'title': forms.TextInput(\n                attrs={'class': 'form-control form-control-sm'}),\n            'vuln_refs': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'links': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'type': forms.TextInput(\n                attrs={'class': 'form-control form-control-sm'}),\n            'severity': forms.Select(\n                attrs={'class': 'form-control form-control-sm'}),\n            'comments': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'status': forms.Select(\n                attrs={'class': 'form-control form-control-sm'}),\n            'asset': forms.Select(\n                attrs={'class': 'form-control form-control-sm'})\n        }\n\n        #tags = forms.CharField(widget=forms.TextInput(attrs={\"data-role\": \"tagsinput\"}))\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n\nfrom django.conf import settings\nfrom django.conf.urls import include, url\nfrom django.conf.urls import handler400, handler403, handler404, handler500\nfrom django.urls import path\nfrom django.contrib import admin\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\nfrom django.contrib.auth.views import LogoutView\nfrom django.views.generic import RedirectView\nfrom rest_framework_swagger.views import get_swagger_view\nfrom rest_framework_simplejwt.views import (\n    TokenObtainPairView,\n    TokenRefreshView,\n    TokenVerifyView,\n)\n\nfrom users import views as user_views\n\n\ndef i18n_javascript(request):\n    return admin.site.i18n_javascript(request)\n\n\nhandler400 = 'app.views.custom_bad_request'\nhandler403 = 'app.views.custom_permission_denied'\nhandler404 = 'app.views.custom_page_not_found'\nhandler500 = 'app.views.custom_error'\n\n\napi_schema_view = get_swagger_view(title='PatrowlManager REST-API')\n\nurlpatterns = [\n    url(r'^apis-doc', api_schema_view),\n    url(r'^ht/', include('health_check.urls')),\n    url(r'^auth-jwt/obtain_jwt_token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n    url(r'^auth-jwt/refresh_jwt_token/', TokenRefreshView.as_view(), name='token_refresh'),\n    url(r'^auth-jwt/verify/', TokenVerifyView.as_view(), name='token_verify'),\n    url(r'^admin/', admin.site.urls),\n    url(r'^engines/', include('engines.urls')),\n    url(r'^findings/', include('findings.urls')),\n    url(r'^assets/', include('assets.urls')),\n    url(r'^users/', include('users.urls')),\n    url(r'^scans/', include('scans.urls')),\n    url(r'^events/', include('events.urls')),\n    url(r'^rules/', include('rules.urls')),\n    url(r'^reportings/', include('reportings.urls')),\n    url(r'^settings/', include('settings.urls')),\n    url(r'^search', include('search.urls')),\n    url(r'^', include('users.urls'), name='home'),\n\n    url(r'^login$', user_views.login, name='login'),\n    url(r'^logout$', LogoutView.as_view(), {'next_page': settings.LOGOUT_REDIRECT_URL}, name='logout'),\n    # url(r'^signup$', user_views.signup, name='signup'),\n\n    url(r'^favicon\\.ico$', RedirectView.as_view(url='/static/favicon.ico')),\n]\n\n# Debug toolbar & download file\n# if settings.DEBUG:\n#     import debug_toolbar\n#     urlpatterns = [\n#         path('__debug__/', include(debug_toolbar.urls)),\n#     ] + urlpatterns\n# if settings.DEBUG:\nimport debug_toolbar\nurlpatterns = [\n    path('__debug__/', include(debug_toolbar.urls)),\n] + urlpatterns\n\n# urlpatterns += staticfiles_urlpatterns()\n\n# Add PRO edition urls\nif settings.PRO_EDITION:\n    # print(\"urls-PRO_EDITION\", settings.PRO_EDITION)\n    try:\n        from pro.urls import pro_urlpatterns\n        urlpatterns += pro_urlpatterns\n    except ImportError as e:\n        print(e)\n\nurlpatterns += staticfiles_urlpatterns()\n", "# -*- coding: utf-8 -*-\n\nimport os\nfrom django import forms\nfrom .models import Finding, FINDING_SEVERITIES\n\nENGINE_TYPES = (\n    ('json', 'json'),\n    ('nessus', 'Nessus'),\n)\n\n\ndef validate_file_extension(value):\n    ext = os.path.splitext(value.name)[1]\n    valid_extensions = ['.xml', '.nessus', '.json']\n    if ext not in valid_extensions:\n        raise ValidationError(u'File not supported!')\n\n\nclass ImportFindingsForm(forms.Form):\n    class Meta:\n        fields = ['engine', 'min_level', 'file']\n\n    engine = forms.CharField(widget=forms.Select(\n        attrs={'class': 'form-control form-control-sm'},\n        choices=ENGINE_TYPES))\n    min_level = forms.CharField(widget=forms.Select(\n        attrs={'class': 'form-control form-control-sm'},\n        choices=FINDING_SEVERITIES),\n        label='Minimum severity')\n    file = forms.FileField(widget=forms.FileInput(\n        attrs={'accept': 'text/xml,application/json'}),\n        validators=[validate_file_extension]\n    )\n\n\nclass FindingForm(forms.ModelForm):\n    class Meta:\n        model = Finding\n        fields = [\n            'title', 'type', 'severity', 'status', 'description', 'tags',\n            'solution', 'risk_info', 'vuln_refs', 'links', 'comments', 'asset'\n        ]\n        widgets = {\n            'description': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'solution': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'tags': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'risk_info': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'title': forms.TextInput(\n                attrs={'class': 'form-control form-control-sm'}),\n            'vuln_refs': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'links': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'type': forms.TextInput(\n                attrs={'class': 'form-control form-control-sm'}),\n            'severity': forms.Select(\n                attrs={'class': 'form-control form-control-sm'}),\n            'comments': forms.Textarea(\n                attrs={'class': 'form-control form-control-sm'}),\n            'status': forms.Select(\n                attrs={'class': 'form-control form-control-sm'}),\n            'asset': forms.Select(\n                attrs={'class': 'form-control form-control-sm'})\n        }\n\n        #tags = forms.CharField(widget=forms.TextInput(attrs={\"data-role\": \"tagsinput\"}))\n"], "filenames": ["app/urls.py", "findings/forms.py"], "buggy_code_start_loc": [31, 2], "buggy_code_end_loc": [32, 31], "fixing_code_start_loc": [31, 3], "fixing_code_end_loc": [32, 44], "type": "CWE-434", "message": "PatrOwl is a free and open-source solution for orchestrating Security Operations. In versions prior to 1.7.7 PatrowlManager unrestrictly handle upload files in the findings import feature. This vulnerability is capable of uploading dangerous type of file to server leading to XSS attacks and potentially other forms of code injection. Users are advised to update to 1.7.7 as soon as possible. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2021-43829", "sourceIdentifier": "security-advisories@github.com", "published": "2021-12-14T20:15:07.743", "lastModified": "2021-12-17T16:28:09.707", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PatrOwl is a free and open-source solution for orchestrating Security Operations. In versions prior to 1.7.7 PatrowlManager unrestrictly handle upload files in the findings import feature. This vulnerability is capable of uploading dangerous type of file to server leading to XSS attacks and potentially other forms of code injection. Users are advised to update to 1.7.7 as soon as possible. There are no known workarounds for this issue."}, {"lang": "es", "value": "PatrOwl es una soluci\u00f3n gratuita y de c\u00f3digo abierto para orquestar operaciones de seguridad. En versiones anteriores a 1.7.7, PatrowlManager manejaba sin restricciones la carga de archivos en la funcionalidad findings import. Esta vulnerabilidad es capaz de subir un tipo de archivo peligroso al servidor,conllevando a ataques XSS y potencialmente a otras formas de inyecci\u00f3n de c\u00f3digo. Es recomendado a usuarios que actualicen a versi\u00f3n 1.7.7 lo antes posible. No se presentan soluciones conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 3.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:patrowl:patrowlmanager:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.7", "matchCriteriaId": "43C008C4-4DDB-4B68-8DFC-A7EBBAE3F6E9"}]}]}], "references": [{"url": "https://github.com/Patrowl/PatrowlManager/commit/2287c9715d2e7ef11b44bb0ad4a57727654f2203", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Patrowl/PatrowlManager/security/advisories/GHSA-5hc9-6hq4-2xfx", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/17324785-f83a-4058-ac40-03f2bfa16399/", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Patrowl/PatrowlManager/commit/2287c9715d2e7ef11b44bb0ad4a57727654f2203"}}