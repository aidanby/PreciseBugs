{"buggy_code": ["package io.onedev.server.git.hook;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\n\nimport com.google.common.base.Preconditions;\n\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.ServerConfig;\nimport io.onedev.server.entitymanager.SettingManager;\n\npublic class HookUtils {\n\n\tpublic static final String HOOK_TOKEN = RandomStringUtils.randomAlphanumeric(20); \n\t\n\tprivate static final String gitReceiveHook;\n\t\n\tstatic {\n        try (InputStream is = HookUtils.class.getClassLoader().getResourceAsStream(\"git-receive-hook\")) {\n        \tPreconditions.checkNotNull(is);\n            gitReceiveHook = StringUtils.join(IOUtils.readLines(is, Charset.defaultCharset()), \"\\n\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\t}\n\t\n\tpublic static Map<String, String> getHookEnvs(Long projectId, Long userId) {\n\t\tServerConfig serverConfig = OneDev.getInstance(ServerConfig.class);\n\t\tSettingManager settingManager = OneDev.getInstance(SettingManager.class);\n\t\tString hookUrl = \"http://localhost:\" + serverConfig.getHttpPort();\n\t\tString curl = settingManager.getSystemSetting().getCurlLocation().getExecutable();\n\t\t\n\t\tMap<String, String> envs = new HashMap<>();\n\t\t\n        envs.put(\"ONEDEV_CURL\", curl);\n\t\tenvs.put(\"ONEDEV_URL\", hookUrl);\n\t\tenvs.put(\"ONEDEV_HOOK_TOKEN\", HOOK_TOKEN);\n\t\tenvs.put(\"ONEDEV_USER_ID\", userId.toString());\n\t\tenvs.put(\"ONEDEV_REPOSITORY_ID\", projectId.toString());\n\t\t\n        envs.put(\"GITPLEX_CURL\", curl);\n\t\tenvs.put(\"GITPLEX_URL\", hookUrl);\n\t\tenvs.put(\"GITPLEX_USER_ID\", userId.toString());\n\t\tenvs.put(\"GITPLEX_REPOSITORY_ID\", projectId.toString());\n\t\t\n\t\treturn envs;\n\t}\n\t\n\tpublic static boolean isHookValid(File gitDir, String hookName) {\n        File hookFile = new File(gitDir, \"hooks/\" + hookName);\n        if (!hookFile.exists()) \n        \treturn false;\n        \n        try {\n\t\t\tString content = FileUtils.readFileToString(hookFile, Charset.defaultCharset());\n\t\t\tif (!content.contains(\"ONEDEV_HOOK_TOKEN\"))\n\t\t\t\treturn false;\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n        if (!hookFile.canExecute())\n        \treturn false;\n        \n        return true;\n\t}\n\t\n\tpublic static void checkHooks(File gitDir) {\n\t\tif (!isHookValid(gitDir, \"pre-receive\") \n\t\t\t\t|| !isHookValid(gitDir, \"post-receive\")) {\n            File hooksDir = new File(gitDir, \"hooks\");\n\n            File gitPreReceiveHookFile = new File(hooksDir, \"pre-receive\");\n            FileUtils.writeFile(gitPreReceiveHookFile, String.format(gitReceiveHook, \"git-prereceive-callback\"));\n            gitPreReceiveHookFile.setExecutable(true);\n            \n            File gitPostReceiveHookFile = new File(hooksDir, \"post-receive\");\n            FileUtils.writeFile(gitPostReceiveHookFile, String.format(gitReceiveHook, \"git-postreceive-callback\"));\n            gitPostReceiveHookFile.setExecutable(true);\n        }\n\t}\n\t\n}\n", "package io.onedev.server.migration;\n\nimport com.google.common.base.Preconditions;\nimport com.thoughtworks.xstream.core.JVM;\nimport io.onedev.commons.bootstrap.Bootstrap;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.markdown.MarkdownManager;\nimport io.onedev.server.markdown.MentionParser;\nimport io.onedev.server.model.*;\nimport io.onedev.server.util.Pair;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.commons.lang3.tuple.Triple;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport oshi.SystemInfo;\nimport oshi.hardware.HardwareAbstractionLayer;\n\nimport javax.annotation.Nullable;\nimport javax.inject.Singleton;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.text.MessageFormat;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n@Singleton\n@SuppressWarnings(\"unused\")\npublic class DataMigrator {\n\t\n\tprivate static final Logger logger = LoggerFactory.getLogger(DataMigrator.class);\n\t\n\tprivate void migrate1(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement branchRefElement = element.element(\"branchRef\");\n\t\t\t\t\tif (branchRefElement != null)\n\t\t\t\t\t\tbranchRefElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\n\tprivate void migrate2(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement gateKeeperElement = element.element(\"gateKeeper\");\n\t\t\t\t\tgateKeeperElement.detach();\n\t\t\t\t\telement.addElement(\"gateKeepers\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\n\tprivate void migrate3(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\tString name = element.getName();\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.commons\", \"com.gitplex.commons\");\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.gitplex\", \"com.gitplex.server\");\n\t\t\t\telement.setName(name);\n\t\t\t}\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\tif (settingElement != null) {\n\t\t\t\t\t\tString clazz = settingElement.attributeValue(\"class\");\n\t\t\t\t\t\tsettingElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\n\t\t\t\t\t\tElement gitConfigElement = settingElement.element(\"gitConfig\");\n\t\t\t\t\t\tif (gitConfigElement != null) {\n\t\t\t\t\t\t\tclazz = gitConfigElement.attributeValue(\"class\");\n\t\t\t\t\t\t\tgitConfigElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdom.writeToFile(file, false);\n\t\t}\t\n\t}\n\t\n\tprivate void migrate4(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement avatarUploadDateElement = element.element(\"avatarUploadDate\");\n\t\t\t\t\tif (avatarUploadDateElement != null)\n\t\t\t\t\t\tavatarUploadDateElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate5(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\t\tif (settingElement != null)\n\t\t\t\t\t\t\tsettingElement.addElement(\"enableSSL\").setText(\"false\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate6(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate7(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.commons.hibernate.migration.VersionTable\", \n\t\t\t\t\t\t\"com.gitplex.server.model.ModelVersion\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.entity.support.IntegrationPolicy\", \n\t\t\t\t\t\t\"com.gitplex.server.model.support.IntegrationPolicy\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.entity.PullRequest_-IntegrationStrategy\", \n\t\t\t\t\t\t\"com.gitplex.server.model.PullRequest_-IntegrationStrategy\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.entity.\", \"com.gitplex.server.model.\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SpecifiedGit\", \"com.gitplex.server.git.config.SpecifiedGit\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SystemGit\", \"com.gitplex.server.git.config.SystemGit\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.setting.\", \"com.gitplex.server.model.support.setting.\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.gatekeeper.\", \"com.gitplex.server.gatekeeper.\");\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t\t\n\t\t\t\tif (file.getName().equals(\"VersionTables.xml\")) {\n\t\t\t\t\tFileUtils.moveFile(file, new File(file.getParentFile(), \"ModelVersions.xml\"));\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrateIntegrationStrategy8(Element integrationStrategyElement) {\n\t\tif (integrationStrategyElement != null) {\n\t\t\tintegrationStrategyElement.setName(\"mergeStrategy\");\n\t\t\tswitch (integrationStrategyElement.getText()) {\n\t\t\tcase \"MERGE_ALWAYS\":\n\t\t\t\tintegrationStrategyElement.setText(\"ALWAYS_MERGE\");\n\t\t\t\tbreak;\n\t\t\tcase \"MERGE_WITH_SQUASH\":\n\t\t\t\tintegrationStrategyElement.setText(\"SQUASH_MERGE\");\n\t\t\t\tbreak;\n\t\t\tcase \"REBASE_SOURCE_ONTO_TARGET\":\n\t\t\t\tintegrationStrategyElement.setText(\"REBASE_MERGE\");\n\t\t\t\tbreak;\n\t\t\tcase \"REBASE_TARGET_ONTO_SOURCE\":\n\t\t\t\tintegrationStrategyElement.setText(\"MERGE_IF_NECESSARY\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate8(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\t\tsettingElement.addElement(\"curlConfig\")\n\t\t\t\t\t\t\t\t.addAttribute(\"class\", \"com.gitplex.server.git.config.SystemCurl\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Accounts.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"reviewEffort\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Depots.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"gateKeepers\").detach();\n\t\t\t\t\telement.element(\"integrationPolicies\").detach();\n\t\t\t\t\telement.addElement(\"branchProtections\");\n\t\t\t\t\telement.addElement(\"tagProtections\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement assigneeElement = element.element(\"assignee\");\n\t\t\t\t\tif (assigneeElement != null)\n\t\t\t\t\t\tassigneeElement.detach();\n\t\t\t\t\tmigrateIntegrationStrategy8(element.element(\"integrationStrategy\"));\n\t\t\t\t\tElement lastIntegrationPreviewElement = element.element(\"lastIntegrationPreview\");\n\t\t\t\t\tif (lastIntegrationPreviewElement != null) {\n\t\t\t\t\t\tlastIntegrationPreviewElement.setName(\"lastMergePreview\");\n\t\t\t\t\t\tElement integratedElement = lastIntegrationPreviewElement.element(\"integrated\");\n\t\t\t\t\t\tif (integratedElement != null)\n\t\t\t\t\t\t\tintegratedElement.setName(\"merged\");\n\t\t\t\t\t\tmigrateIntegrationStrategy8(lastIntegrationPreviewElement.element(\"integrationStrategy\"));\n\t\t\t\t\t}\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) {\n\t\t\t\t\t\tElement closeStatusElement = closeInfoElement.element(\"closeStatus\");\n\t\t\t\t\t\tif (closeStatusElement.getText().equals(\"INTEGRATED\"))\n\t\t\t\t\t\t\tcloseStatusElement.setText(\"MERGED\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReviewInvitations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestVerifications.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeComments.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentRelations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentReplys.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement mergeCommitHashElement = element.element(\"mergeCommitHash\");\n\t\t\t\t\tmergeCommitHashElement.setName(\"mergeBaseCommitHash\");\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate9(File dataDir, Stack<Integer> versions) {\n\t\ttry {\n\t\t\tMap<String, String> accountIdToName = new HashMap<>();\n\t\t\tSet<String> userIds = new HashSet<>();\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Accounts.xml\", \"Users.xml\"));\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Account\", \n\t\t\t\t\t\t\t\"com.gitplex.server.model.User\");\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\taccountIdToName.put(element.elementText(\"id\"), element.elementText(\"name\"));\n\t\t\t\t\t\tif (element.elementTextTrim(\"organization\").equals(\"true\")) {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuserIds.add(element.elementText(\"id\"));\n\t\t\t\t\t\t\telement.element(\"organization\").detach();\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\n\t\t\t\t\t\t\telement.element(\"noSpaceName\").detach();\n\t\t\t\t\t\t\tif (element.element(\"noSpaceFullName\") != null)\n\t\t\t\t\t\t\t\telement.element(\"noSpaceFullName\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong lastUserAuthorizationId = 0;\n\t\t\tVersionedXmlDoc userAuthorizationsDom = new VersionedXmlDoc();\n\t\t\tElement userAuthorizationListElement = userAuthorizationsDom.addElement(\"list\");\n\t\t\t\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Depots.xml\", \"Projects.xml\"));\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Depot\", \n\t\t\t\t\t\t\t\"com.gitplex.server.model.Project\");\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tString accountId = element.elementText(\"account\");\n\t\t\t\t\t\telement.element(\"account\").detach();\n\t\t\t\t\t\tString depotName = element.elementText(\"name\");\n\t\t\t\t\t\telement.element(\"name\").setText(accountIdToName.get(accountId) + \".\" + depotName);\n\t\t\t\t\t\tif (element.element(\"defaultPrivilege\") != null\t)\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\n\t\t\t\t\t\t\n\t\t\t\t\t\tString adminId;\n\t\t\t\t\t\tif (userIds.contains(accountId)) {\n\t\t\t\t\t\t\tadminId = accountId;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tadminId = \"1\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tElement userAuthorizationElement = \n\t\t\t\t\t\t\t\tuserAuthorizationListElement.addElement(\"com.gitplex.server.model.UserAuthorization\");\n\t\t\t\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++lastUserAuthorizationId));\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"user\").setText(adminId);\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"project\").setText(element.elementText(\"id\"));\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"privilege\").setText(\"ADMIN\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\n\t\t\t\t} else if (file.getName().startsWith(\"BranchWatchs.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tif (!userIds.contains(element.elementText(\"user\"))) {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.element(\"depot\").setName(\"project\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t} else if (file.getName().startsWith(\"Teams.xml\") \n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamMemberships.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamAuthorizations.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"OrganizationMemberships.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"PullRequest\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"Review\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitation\")) {\n\t\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\n\t\t\t\t\t\t\tFile storageDir = new File(storagePath);\n\t\t\t\t\t\t\tFile repositoriesDir = new File(storageDir, \"repositories\");\n\t\t\t\t\t\t\tif (repositoriesDir.exists()) {\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storageDir, \"projects\");\n\t\t\t\t\t\t\t\tFileUtils.moveDirectory(repositoriesDir, projectsDir);\n\t\t\t\t\t\t\t\tfor (File projectDir: projectsDir.listFiles()) {\n\t\t\t\t\t\t\t\t\tFile infoDir = new File(projectDir, \"info\");\n\t\t\t\t\t\t\t\t\tif (infoDir.exists())\n\t\t\t\t\t\t\t\t\t\tFileUtils.deleteDir(infoDir);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (element.elementText(\"key\").equals(\"SECURITY\")) {\n\t\t\t\t\t\t\telement.element(\"setting\").addElement(\"enableAnonymousAccess\").setText(\"false\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t}\n\t\t\t}\t\n\t\t\tuserAuthorizationsDom.writeToFile(new File(dataDir, \"UserAuthorizations.xml\"), false);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\tprivate void migrate10(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\") || file.getName().startsWith(\"CodeCommentReplys.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement exprElement = branchProtectionElement.element(\"reviewAppointmentExpr\");\n\t\t\t\t\t\tif (exprElement != null)\n\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\texprElement = fileProtectionElement.element(\"reviewAppointmentExpr\");\n\t\t\t\t\t\t\tif (exprElement != null)\n\t\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(new File(dataDir, \"Configs.xml\"));\n\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\n\t\t\t\tFile codeCommentsFromWeiFeng = new File(storagePath, \"CodeComments.xml\");\n\t\t\t\tif (codeCommentsFromWeiFeng.exists()) {\n\t\t\t\t\tdom = VersionedXmlDoc.fromFile(codeCommentsFromWeiFeng);\n\t\t\t\t\tfor (Element commentElement: dom.getRootElement().elements()) {\n\t\t\t\t\t\tcommentElement.setName(\"com.gitplex.server.model.CodeComment\");\n\t\t\t\t\t\tcommentElement.element(\"depot\").setName(\"project\");\n\t\t\t\t\t\tcommentElement.element(\"resolved\").detach();\n\t\t\t\t\t\tcommentElement.element(\"commentPos\").setName(\"markPos\");\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(new File(dataDir, \"CodeComments.xml\"), false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate11(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tlong maxId = 0;\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong id = Long.parseLong(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (maxId < id)\n\t\t\t\t\t\tmaxId = id;\n\t\t\t\t}\n\t\t\t\tElement licenseConfigElement = dom.getRootElement().addElement(\"com.gitplex.server.model.Config\");\n\t\t\t\tlicenseConfigElement.addElement(\"id\").setText(String.valueOf(maxId+1));\n\t\t\t\tlicenseConfigElement.addElement(\"key\").setText(\"LICENSE\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\tprivate void migrate12(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"enabled\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.addElement(\"enabled\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\tprivate void migrate13(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \"gitplex\", \"turbodev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"GitPlex\", \"TurboDev\");\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate14(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.addElement(\"submitter\");\n\t\t\t\t\t\tsubmitterElement.addAttribute(\"class\", \"com.turbodev.server.model.support.submitter.Anyone\");\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"noCreation\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\tprivate void migrate15(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \"com.turbodev\", \"io.onedev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"com/turbodev\", \"io/onedev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev.com\", \"onedev.io\");\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev\", \"onedev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"TurboDev\", \"OneDev\");\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrateMergeStrategy16(Element mergeStrategyElement) {\n\t\tif (mergeStrategyElement != null) {\n\t\t\tmergeStrategyElement.setName(\"mergeStrategy\");\n\t\t\tswitch (mergeStrategyElement.getText()) {\n\t\t\tcase \"ALWAYS_MERGE\":\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT\");\n\t\t\t\tbreak;\n\t\t\tcase \"MERGE_IF_NECESSARY\":\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT_IF_NECESSARY\");\n\t\t\t\tbreak;\n\t\t\tcase \"SQUASH_MERGE\":\n\t\t\t\tmergeStrategyElement.setText(\"SQUASH_SOURCE_BRANCH_COMMITS\");\n\t\t\t\tbreak;\n\t\t\tcase \"REBASE_MERGE\":\n\t\t\t\tmergeStrategyElement.setText(\"REBASE_SOURCE_BRANCH_COMMITS\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/*\n\t * Migrate from 1.0 to 2.0\n\t */\n\tprivate void migrate16(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> codeCommentReplyCounts = new HashMap<>();\n\t\tMap<String, String> userNames = new HashMap<>();\n\t\tMap<String, Set<String>> requestCodeComments = new HashMap<>();\n\t\tMap<String, Integer> requestCommentCounts = new HashMap<>();\n\t\tSet<String> openRequests = new HashSet<>();\n\t\tMap<String, String> reviewRequirements = new HashMap<>(); \n\t\t \n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\n\t\t\t\t\tif (fullNameElement != null)\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), fullNameElement.getText());\n\t\t\t\t\telse\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), element.elementText(\"name\"));\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\n\t\t\t\t\tif (replyCount == null)\n\t\t\t\t\t\treplyCount = 0;\n\t\t\t\t\treplyCount++;\n\t\t\t\t\tcodeCommentReplyCounts.put(commentId, replyCount);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tSet<String> codeComments = requestCodeComments.get(requestId);\n\t\t\t\t\tif (codeComments == null) {\n\t\t\t\t\t\tcodeComments = new HashSet<>();\n\t\t\t\t\t\trequestCodeComments.put(requestId, codeComments);\n\t\t\t\t\t}\n\t\t\t\t\tcodeComments.add(commentId);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(commentId);\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\trequestCommentCounts.put(commentId, commentCount);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"closeInfo\") == null) {\n\t\t\t\t\t\topenRequests.add(element.elementTextTrim(\"id\"));\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString projectId = element.elementTextTrim(\"id\");\n\t\t\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) \n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treviewRequirements.put(projectId, builder.toString());\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Map.Entry<String, Set<String>> entry: requestCodeComments.entrySet()) {\n\t\t\tInteger commentCount = requestCommentCounts.get(entry.getKey());\n\t\t\tif (commentCount == null)\n\t\t\t\tcommentCount = 0;\n\t\t\tfor (String commentId: entry.getValue()) {\n\t\t\t\tcommentCount++;\n\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\n\t\t\t\tif (replyCount != null)\n\t\t\t\t\tcommentCount += replyCount;\n\t\t\t}\n\t\t\trequestCommentCounts.put(entry.getKey(), commentCount);\n\t\t}\n\t\t\n\t\tVersionedXmlDoc requestReviewsDOM = new VersionedXmlDoc();\n\t\tElement requestReviewListElement = requestReviewsDOM.addElement(\"list\");\n\t\t\n\t\tVersionedXmlDoc configurationsDOM = new VersionedXmlDoc();\n\t\tElement configurationListElement = configurationsDOM.addElement(\"list\");\n\t\tMap<String, Map<String, Long>> projectConfigurations = new HashMap<>();\n\t\tlong configurationCount = 0;\n\t\t\n\t\tint reviewCount = 0;\n\t\t\n\t\tVersionedXmlDoc requestBuildsDOM = new VersionedXmlDoc();\n\t\tElement requestBuildListElement = requestBuildsDOM.addElement(\"list\");\n\t\tint requestBuildCount = 0;\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"BranchWatches.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReferences.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"Reviews.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\") || file.getName().startsWith(\"GroupAuthorizations.xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \"ADMIN\", \"ADMINISTRATION\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \"WRITE\", \"CODE_WRITE\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \"READ\", \"CODE_READ\");\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (replyCount == null)\n\t\t\t\t\t\treplyCount = 0;\n\t\t\t\t\telement.addElement(\"replyCount\").setText(String.valueOf(replyCount));\n\t\t\t\t\t\n\t\t\t\t\tElement dateElement = element.element(\"date\");\n\t\t\t\t\tdateElement.setName(\"createDate\");\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\n\t\t\t\t\tif (lastEventElement != null) {\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\n\t\t\t\t\t\tlastEventElement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdateDateElement.setText(dateElement.getText());\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrateMergeStrategy16(element.element(\"mergeStrategy\"));\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\n\t\t\t\t\tif (lastMergePreviewElement != null) {\n\t\t\t\t\t\tmigrateMergeStrategy16(lastMergePreviewElement.element(\"mergeStrategy\"));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.addElement(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t\t\n\t\t\t\t\tElement lastCodeCommentEventDateElement = element.element(\"lastCodeCommentEventDate\");\n\t\t\t\t\tif (lastCodeCommentEventDateElement != null)\n\t\t\t\t\t\tlastCodeCommentEventDateElement.setName(\"lastCodeCommentActivityDate\");\n\t\t\t\t\t\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) {\n\t\t\t\t\t\tElement closedByElement = closeInfoElement.element(\"closedBy\");\n\t\t\t\t\t\tif (closedByElement != null)\n\t\t\t\t\t\t\tclosedByElement.setName(\"user\");\n\t\t\t\t\t\tElement closedByNameElement = closeInfoElement.element(\"closedByName\");\n\t\t\t\t\t\tif (closedByNameElement != null)\n\t\t\t\t\t\t\tclosedByNameElement.setName(\"userName\");\n\t\t\t\t\t\tcloseInfoElement.element(\"closeDate\").setName(\"date\");\n\t\t\t\t\t\tcloseInfoElement.element(\"closeStatus\").setName(\"status\");\n\t\t\t\t\t}\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\n\t\t\t\t\tif (lastEventElement != null) {\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\n\t\t\t\t\t\tlastEventElement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdateDateElement.setText(submitDateElement.getText());\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.security.authenticator.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.authenticator.\");\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.Setting\");\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\tif (settingElement != null) {\n\t\t\t\t\t\tsettingElement.setName(\"value\");\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"AUTHENTICATOR\")) {\n\t\t\t\t\t\t\tElement authenticatorElement = settingElement.elementIterator().next();\n\t\t\t\t\t\t\tsettingElement.addAttribute(\"class\", authenticatorElement.getName());\n\t\t\t\t\t\t\tfor (Element fieldElement: authenticatorElement.elements()) {\n\t\t\t\t\t\t\t\tif (!fieldElement.getName().equals(\"defaultGroupNames\")) {\n\t\t\t\t\t\t\t\t\tfieldElement.detach();\n\t\t\t\t\t\t\t\t\tsettingElement.add(fieldElement);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tauthenticatorElement.detach();\n\t\t\t\t\t\t\tsettingElement.addElement(\"canCreateProjects\").setText(\"true\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(file.getParentFile(), file.getName().replace(\"Config\", \"Setting\")), false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestWatchs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement reasonElement = element.element(\"reason\");\n\t\t\t\t\tif (reasonElement != null)\n\t\t\t\t\t\treasonElement.detach();\n\t\t\t\t\tElement ignoreElement = element.element(\"ignore\");\n\t\t\t\t\tignoreElement.setName(\"watching\");\n\t\t\t\t\tignoreElement.setText(String.valueOf(!Boolean.parseBoolean(ignoreElement.getTextTrim())));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"uuid\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString project = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement publicReadElement = element.element(\"publicRead\");\n\t\t\t\t\tif (publicReadElement.getTextTrim().equals(\"true\")) \n\t\t\t\t\t\telement.addElement(\"defaultPrivilege\").setText(\"CODE_READ\");\n\t\t\t\t\tpublicReadElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.element(\"verifyMerges\").setName(\"buildMerges\");\n\t\t\t\t\t\tElement verificationsElement = branchProtectionElement.element(\"verifications\");\n\t\t\t\t\t\tverificationsElement.setName(\"configurations\");\n\t\t\t\t\t\tfor (Element verificationElement: verificationsElement.elements()) {\n\t\t\t\t\t\t\tString verification = verificationElement.getText();\n\t\t\t\t\t\t\tMap<String, Long> configurations = projectConfigurations.get(project);\n\t\t\t\t\t\t\tif (configurations == null) {\n\t\t\t\t\t\t\t\tconfigurations = new HashMap<>();\n\t\t\t\t\t\t\t\tprojectConfigurations.put(project, configurations);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tLong configurationId = configurations.get(verification);\n\t\t\t\t\t\t\tif (configurationId == null) {\n\t\t\t\t\t\t\t\tconfigurationId = ++configurationCount;\n\t\t\t\t\t\t\t\tconfigurations.put(verification, configurationId);\n\t\t\t\t\t\t\t\tElement configurationElement = configurationListElement.addElement(\"io.onedev.server.model.Configuration\");\n\t\t\t\t\t\t\t\tconfigurationElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"id\").setText(String.valueOf(configurationId));\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"project\").setText(project);\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"name\").setText(verification);\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"buildCleanupRule\").addAttribute(\"class\", \"io.onedev.server.model.support.configuration.DoNotCleanup\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (String request: openRequests) {\n\t\t\t\t\t\t\t\tElement requestBuildElement = requestBuildListElement.addElement(\"io.onedev.server.model.PullRequestBuild\");\n\t\t\t\t\t\t\t\trequestBuildElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"id\").setText(String.valueOf(++requestBuildCount));\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"request\").setText(request);\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"configuration\").setText(String.valueOf(configurationId));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) {\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\tElement submitterElement = tagProtectionElement.element(\"submitter\");\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\n\t\trequestReviewsDOM.writeToFile(new File(dataDir, \"PullRequestReviews.xml\"), false);\n\t\tconfigurationsDOM.writeToFile(new File(dataDir, \"Configurations.xml\"), false);\n\t\trequestBuildsDOM.writeToFile(new File(dataDir, \"PullRequestBuilds.xml\"), false);\n\t}\n\t\n\tprivate void migrate17(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issue\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement issueWorkflowElement = element.element(\"issueWorkflow\");\n\t\t\t\t\tif (issueWorkflowElement != null)\n\t\t\t\t\t\tissueWorkflowElement.detach();\n\t\t\t\t\tElement savedIssueQueriesElement = element.element(\"savedIssueQueries\");\n\t\t\t\t\tif (savedIssueQueriesElement != null)\n\t\t\t\t\t\tsavedIssueQueriesElement.detach();\n\t\t\t\t\tElement issueListFieldsElement = element.element(\"issueListFields\");\n\t\t\t\t\tif (issueListFieldsElement != null)\n\t\t\t\t\t\tissueListFieldsElement.detach();\n\t\t\t\t\tElement issueBoardsElement = element.element(\"issueBoards\");\n\t\t\t\t\tif (issueBoardsElement != null)\n\t\t\t\t\t\tissueBoardsElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate18(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate19(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement commitMessageTransformsElement = element.addElement(\"commitMessageTransforms\");\n\t\t\t\t\tElement commitMessageTransformSettingElement = element.element(\"commitMessageTransformSetting\");\n\t\t\t\t\tif (commitMessageTransformSettingElement != null) {\n\t\t\t\t\t\tcommitMessageTransformSettingElement.detach();\n\t\t\t\t\t\tcommitMessageTransformSettingElement.setName(\"io.onedev.server.model.support.CommitMessageTransform\");\n\t\t\t\t\t\tcommitMessageTransformsElement.add(commitMessageTransformSettingElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate20(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements()) {\n\t\t\t\t\t\t\t\tfieldElement.addElement(\"canBeChangedBy\").addAttribute(\"class\", \"io.onedev.server.model.support.usermatcher.Anyone\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate21(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.element(\"branch\").setName(\"branches\");\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\tfileProtectionElement.element(\"path\").setName(\"paths\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.element(\"tag\").setName(\"tags\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\")) {\n\t\t\t\t\t\telement.element(\"value\").addAttribute(\"class\", \"io.onedev.commons.utils.license.LicenseDetail\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate22(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueFieldUnarys.xml\")) {\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"IssueFieldUnarys\", \"IssueFieldEntitys\"));\n\t\t\t\ttry {\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(renamedFile);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueFieldEntity\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(renamedFile, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate23(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Build2s.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement runInstanceIdElement = element.element(\"runInstanceId\");\n\t\t\t\t\tif (runInstanceIdElement != null)\n\t\t\t\t\t\trunInstanceIdElement.detach();\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\n\t\t\t\t\tif (errorMessageElement != null)\n\t\t\t\t\t\terrorMessageElement.setName(\"statusMessage\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"uuid\").detach();\n\t\t\t\t\tif (element.element(\"issueSetting\") == null)\n\t\t\t\t\t\telement.addElement(\"issueSetting\");\n\t\t\t\t\tif (element.element(\"savedCommitQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedCommitQueries\");\n\t\t\t\t\tif (element.element(\"savedPullRequestQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedPullRequestQueries\");\n\t\t\t\t\tif (element.element(\"savedCodeCommentQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedCodeCommentQueries\");\n\t\t\t\t\tif (element.element(\"savedBuildQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedBuildQueries\");\n\t\t\t\t\tif (element.element(\"webHooks\") == null) \n\t\t\t\t\t\telement.addElement(\"webHooks\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"uuid\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate String escapeValue24(String value) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (int i=0; i<value.length(); i++) {\n\t\t\tchar ch = value.charAt(i);\n\t\t\tif (\"\\\\()\".indexOf(ch) != -1)\n\t\t\t\tbuilder.append(\"\\\\\");\n\t\t\tbuilder.append(ch);\n\t\t}\n\t\treturn builder.toString();\n\t}\n\t\n\tprivate void migrateUserMatcher24(Element userMatcherElement) {\n\t\tString userMatcher;\n\t\tString userMatcherClass = userMatcherElement.attributeValue(\"class\");\n\t\tif (userMatcherClass.contains(\"Anyone\")) {\n\t\t\tuserMatcher = \"anyone\";\n\t\t} else if (userMatcherClass.contains(\"CodeWriters\")) {\n\t\t\tuserMatcher = \"code writers\";\n\t\t} else if (userMatcherClass.contains(\"CodeReaders\")) {\n\t\t\tuserMatcher = \"code readers\";\n\t\t} else if (userMatcherClass.contains(\"IssueReaders\")) {\n\t\t\tuserMatcher = \"issue readers\";\n\t\t} else if (userMatcherClass.contains(\"ProjectAdministrators\")) {\n\t\t\tuserMatcher = \"project administrators\";\n\t\t} else if (userMatcherClass.contains(\"SpecifiedUser\")) {\n\t\t\tuserMatcher = \"user(\" + escapeValue24(userMatcherElement.elementText(\"userName\").trim()) + \")\";\n\t\t} else {\n\t\t\tuserMatcher = \"group(\" + escapeValue24(userMatcherElement.elementText(\"groupName\").trim()) + \")\";\n\t\t}\n\t\tuserMatcherElement.clearContent();\n\t\tuserMatcherElement.remove(userMatcherElement.attribute(\"class\"));\n\t\tuserMatcherElement.setText(userMatcher);\n\t}\n\t\n\tprivate void migrateTransitionSpecsElement24(Element transitionSpecsElement) {\n\t\tfor (Element transitionElement: transitionSpecsElement.elements()) {\n\t\t\tElement triggerElement = transitionElement.element(\"trigger\");\n\t\t\tif (triggerElement.attributeValue(\"class\").contains(\"PressButtonTrigger\"))\n\t\t\t\tmigrateUserMatcher24(triggerElement.element(\"authorized\"));\n\t\t}\n\t}\n\t\n\tprivate void migrate24(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tmigrateTransitionSpecsElement24(valueElement.element(\"defaultTransitionSpecs\"));\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements())\n\t\t\t\t\t\t\t\tmigrateUserMatcher24(fieldElement.element(\"canBeChangedBy\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\n\t\t\t\t\tElement transitionsElement = issueSettingElement.element(\"transitionSpecs\");\n\t\t\t\t\tif (transitionsElement != null) \n\t\t\t\t\t\tmigrateTransitionSpecsElement24(transitionsElement);\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\n\t\t\t\t\t\tmigrateUserMatcher24(branchProtectionElement.element(\"submitter\"));\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\n\t\t\t\t\t\tmigrateUserMatcher24(tagProtectionElement.element(\"submitter\"));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// from 2.0 to 3.0\n\tprivate void migrate25(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = content.replace(\".support.setting.\", \".support.administration.\");\n\t\t\t\tcontent = content.replace(\".support.authenticator.\", \".support.administration.authenticator.\");\n\t\t\t\t\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \n\t\t\t\t\tif (key.equals(\"ISSUE\") || key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else if (key.equals(\"BACKUP\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement folderElement = valueElement.element(\"folder\");\n\t\t\t\t\t\t\tif (folderElement != null)\n\t\t\t\t\t\t\t\tfolderElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"SECURITY\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.element(\"enableAnonymousAccess\").setText(\"false\");\n\t\t\t\t\t} else if (key.equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement storagePathElement = valueElement.element(\"storagePath\");\n\t\t\t\t\t\t\tString storagePath = storagePathElement.getText();\n\t\t\t\t\t\t\tstoragePathElement.detach();\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storagePath, \"projects\");\n\t\t\t\t\t\t\t\tif (projectsDir.exists()) {\n\t\t\t\t\t\t\t\t\tPath target = projectsDir.toPath();\n\t\t\t\t\t\t\t\t    File linkDir = new File(Bootstrap.installDir, \"site/projects\");\n\t\t\t\t\t\t\t\t    if (linkDir.exists())\n\t\t\t\t\t\t\t\t    \tthrow new ExplicitException(\"Directory already exists: \" + linkDir);\n\t\t\t\t\t\t\t\t    Files.createSymbolicLink(linkDir.toPath(), target);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"AUTHENTICATOR\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement defaultGroupNamesElement = valueElement.element(\"defaultGroupNames\");\n\t\t\t\t\t\t\tif (defaultGroupNamesElement != null)\n\t\t\t\t\t\t\t\tdefaultGroupNamesElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"canCreateProjects\").setName(\"createProjects\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\telement.addElement(\"userProjectQueries\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement privilegeElement = element.element(\"privilege\");\n\t\t\t\t\tString privilege = privilegeElement.getTextTrim();\n\t\t\t\t\tprivilegeElement.detach();\n\n\t\t\t\t\tString roleId;\n\t\t\t\t\tswitch (privilege) {\n\t\t\t\t\tcase \"ISSUE_READ\":\n\t\t\t\t\t\troleId = \"4\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"CODE_READ\":\n\t\t\t\t\t\troleId = \"3\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"CODE_WRITE\":\n\t\t\t\t\t\troleId = \"2\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\troleId = \"1\";\n\t\t\t\t\t}\n\t\t\t\t\telement.addElement(\"role\").setText(roleId);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.element(\"numberStr\").detach();\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement rangeElement = element.element(\"markPos\").element(\"range\");\n\t\t\t\t\trangeElement.element(\"beginLine\").setName(\"fromRow\");\n\t\t\t\t\trangeElement.element(\"endLine\").setName(\"toRow\");\n\t\t\t\t\trangeElement.element(\"beginChar\").setName(\"fromColumn\");\n\t\t\t\t\trangeElement.element(\"endChar\").setName(\"toColumn\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = content.replace(\"DO_NOT_MERGE\", \"CREATE_MERGE_COMMIT\");\n\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.element(\"numberStr\").detach();\n\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement defaultPrivilegeElement = element.element(\"defaultPrivilege\");\n\t\t\t\t\tif (defaultPrivilegeElement != null)\n\t\t\t\t\t\tdefaultPrivilegeElement.detach();\n\t\t\t\t\telement.addElement(\"owner\").setText(\"1\");\n\t\t\t\t\t\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\n\t\t\t\t\t\tsubmitterElement.setName(\"user\");\n\t\t\t\t\t\tsubmitterElement.setText(\"anyone\");\n\t\t\t\t\t\tbranchProtectionElement.element(\"configurations\").detach();\n\t\t\t\t\t\tbranchProtectionElement.element(\"buildMerges\").detach();\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"jobNames\");\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements())\n\t\t\t\t\t\t\tfileProtectionElement.addElement(\"jobNames\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\n\t\t\t\t\t\ttagProtectionElement.element(\"submitter\").setName(\"user\");\n\t\t\t\t\telement.addElement(\"secrets\");\n\t\t\t\t\telement.element(\"commitMessageTransforms\").detach();\n\t\t\t\t\telement.element(\"webHooks\").detach();\n\t\t\t\t\telement.addElement(\"webHooks\");\n\t\t\t\t\telement.element(\"issueSetting\").detach();\n\t\t\t\t\telement.addElement(\"issueSetting\");\n\t\t\t\t\t\n\t\t\t\t\telement.element(\"savedBuildQueries\").detach();\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"buildsToPreserve\").setText(\"all\");\n\t\t\t\t\t\n\t\t\t\t\telement.element(\"savedCommitQueries\").detach();\n\t\t\t\t\telement.element(\"savedCodeCommentQueries\").detach();\n\t\t\t\t\telement.element(\"savedPullRequestQueries\").detach();\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"pullRequestSetting\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"Configurations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"IssueQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestChanges.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestWatchs.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"IssueWatchs.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CommitQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestBuilds.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"BuildQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"Builds.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"Build2s.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"BuildDependences.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"BuildParams.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"IssueFieldEntitys.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = content.replace(\"io.onedev.server.model.IssueFieldEntity\", \n\t\t\t\t\t\t\"io.onedev.server.model.IssueField\");\n\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\t\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\n\t\t\t\t\t\t\"IssueFieldEntitys.xml\", \"IssueFields.xml\"));\n\t\t\t\tFileUtils.writeFile(renamedFile, content, StandardCharsets.UTF_8.name());\n\t\t\t}\n\t\t}\n        try (InputStream is = getClass().getResourceAsStream(\"migrate25_roles.xml\")) {\n        \tPreconditions.checkNotNull(is);\n        \tFileUtils.writeFile(\n        \t\t\tnew File(dataDir, \"Roles.xml\"), \n        \t\t\tStringUtils.join(IOUtils.readLines(is, StandardCharsets.UTF_8.name()), \"\\n\"));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\t\t\n\t}\n\t\n\tprivate void migrate26(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement createdAtElement = element.element(\"createdAt\");\n\t\t\t\t\tcreatedAtElement.setName(\"createDate\");\n\t\t\t\t\telement.addElement(\"updateDate\").setText(createdAtElement.getText());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \t\t\n\t\t}\n\t}\n\t\n\tprivate void migrate27(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.element(\"buildsToPreserve\").detach();\n\t\t\t\t\tbuildSettingElement.addElement(\"preservations\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate28(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"secrets\").detach();\n\t\t\t\t\telement.element(\"buildSetting\").detach();\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate29(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"webHooks\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\n\t\t\t\t\t\tbranchProtectionElement.element(\"user\").setName(\"userMatch\");\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\n\t\t\t\t\t\ttagProtectionElement.element(\"user\").setName(\"userMatch\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate30(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) \n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate31(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement editableIssueFieldsElement = element.element(\"editableIssueFields\");\n\t\t\t\t\teditableIssueFieldsElement.detach();\n\t\t\t\t\telement.addElement(\"editableIssueFields\").addAttribute(\n\t\t\t\t\t\t\t\"class\", \"io.onedev.server.model.support.role.AllIssueFields\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate32(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \n\t\t\t\t\tif (key.equals(\"ISSUE\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) { \n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate33(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\n\t\t\t\t\t\tbranchProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\n\t\t\t\t\t\tbranchProtectionElement.element(\"noForcedPush\").setName(\"preventForcedPush\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\n\t\t\t\t\t\ttagProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\n\t\t\t\t\t\ttagProtectionElement.element(\"noUpdate\").setName(\"preventUpdate\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate34(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\n\t\t\t\t\t\t\t\tElement categoryElement = stateElement.element(\"category\");\n\t\t\t\t\t\t\t\tstateElement.addElement(\"done\").setText(String.valueOf(categoryElement.getTextTrim().equals(\"CLOSED\")));\n\t\t\t\t\t\t\t\tcategoryElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"numOfOpenIssues\").setName(\"numOfIssuesTodo\");\n\t\t\t\t\telement.element(\"numOfClosedIssues\").setName(\"numOfIssuesDone\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate35(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"updateDate\").detach();\n\t\t\t\t\tElement createDateElement = element.element(\"createDate\");\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\n\t\t\t\t\tElement userElement = element.element(\"user\");\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\n\t\t\t\t\tif (userElement != null)\n\t\t\t\t\t\tlastUpdateUserElement.setText(userElement.getTextTrim());\n\t\t\t\t\telse\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"created\");\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\n\t\t\t\t\tdateElement.addAttribute(\"class\", createDateElement.attributeValue(\"class\"));\n\t\t\t\t\tdateElement.setText(createDateElement.getTextTrim());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"updateDate\").detach();\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\n\t\t\t\t\tif (submitterElement != null)\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\n\t\t\t\t\telse\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"updateDate\").detach();\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\n\t\t\t\t\tif (submitterElement != null)\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\n\t\t\t\t\telse\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement namedQueriesElement = buildSettingElement.element(\"namedQueries\");\n\t\t\t\t\tif (namedQueriesElement != null) {\n\t\t\t\t\t\tfor (Element queryElement: namedQueriesElement.elements())\n\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t\t}\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\n\t\t\t\t\t\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\tElement buildBranchesElement = tagProtectionElement.element(\"buildBranches\");\n\t\t\t\t\t\tif (buildBranchesElement != null)\n\t\t\t\t\t\t\tbuildBranchesElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element queryElement: element.element(\"userBuildQueries\").elements())\n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\n\t\t\t\t\tElement passwordElement = element.element(\"password\");\n\t\t\t\t\tif (passwordElement == null)\n\t\t\t\t\t\telement.addElement(\"password\").setText(\"external_managed\");\n\t\t\t\t\telse if (StringUtils.isBlank(passwordElement.getText()))\n\t\t\t\t\t\tpasswordElement.setText(\"external_managed\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element queryElement: element.element(\"userQueries\").elements()) \n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\n\t\t\t\t\t\t\t\tstateElement.element(\"done\").detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"BUILD\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element queryElement: valueElement.element(\"namedQueries\").elements()) \n\t\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"numOfIssuesTodo\").detach();\n\t\t\t\t\telement.element(\"numOfIssuesDone\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\n\t// Database schema changed\n\tprivate void migrate36(File dataDir, Stack<Integer> versions) {\t\n\t}\n\t\n\tprivate void migrate37(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate Long getForkedRoot38(Map<Long, Long> forkedFroms, Long projectId) {\n\t\tLong forkedFrom = forkedFroms.get(projectId);\n\t\tif (forkedFrom != null)\n\t\t\treturn getForkedRoot38(forkedFroms, forkedFrom);\n\t\telse\n\t\t\treturn projectId;\n\t}\n\t\n\t// from 3.0.10 to 3.0.11\n\tprivate void migrate38(File dataDir, Stack<Integer> versions) {\n\t\tMap<Long, Long> forkedFroms = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().contains(\".xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.pullrequest.NamedPullRequestQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.issue.NamedIssueQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.NamedBuildQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.NamedProjectQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//issueQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.getTextTrim().equals(\"all\"))\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.BuildPreservation\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tElement conditionElement = element.element(\"condition\");\n\t\t\t\t\t\tif (conditionElement.getTextTrim().equals(\"all\"))\n\t\t\t\t\t\t\tconditionElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//listFields\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tElement stateElement = element.addElement(\"string\");\n\t\t\t\t\t\tstateElement.setText(\"State\");\n\t\t\t\t\t\tstateElement.detach();\n\t\t\t\t\t\telement.elements().add(0, stateElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t\tif (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tString className = dataElement.attributeValue(\"class\");\n\t\t\t\t\tif (className.contains(\"IssueCommittedData\") || className.contains(\"IssuePullRequest\")) \n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"id\"));\n\t\t\t\t\tElement forkedFromElement = element.element(\"forkedFrom\");\n\t\t\t\t\tif (forkedFromElement != null)\n\t\t\t\t\t\tforkedFroms.put(projectId, Long.valueOf(forkedFromElement.getTextTrim()));\n\t\t\t\t\telse\n\t\t\t\t\t\tforkedFroms.put(projectId, null);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.addElement(\"enableStartTLS\").setText(\"true\");\n\t\t\t\t\t\t\tvalueElement.element(\"enableSSL\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tMap<Long, Long> forkedRoots = new HashMap<>();\n\t\tfor (Long projectId: forkedFroms.keySet()) {\n\t\t\tforkedRoots.put(projectId, getForkedRoot38(forkedFroms, projectId));\n\t\t}\n\t\t\n\t\tMap<Long, Set<Long>> issueNumbers = new HashMap<>();\n\t\tMap<Long, Set<Long>> buildNumbers = new HashMap<>();\n\t\tMap<Long, Set<Long>> pullRequestNumbers = new HashMap<>();\n\t\t\n\t\tfor (Long forkedRoot: forkedRoots.values()) {\n\t\t\tissueNumbers.put(forkedRoot, new HashSet<>());\n\t\t\tbuildNumbers.put(forkedRoot, new HashSet<>());\n\t\t\tpullRequestNumbers.put(forkedRoot, new HashSet<>());\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tLong issueNumber = Long.valueOf(element.elementTextTrim(\"number\"));\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\n\t\t\t\t\t\tissueNumbers.get(projectId).add(issueNumber); \n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tLong buildNumber = Long.valueOf(element.elementTextTrim(\"number\"));\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\n\t\t\t\t\t\tbuildNumbers.get(projectId).add(buildNumber);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tLong requestNumber = Long.valueOf(element.elementTextTrim(\"number\"));\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\n\t\t\t\t\t\tpullRequestNumbers.get(projectId).add(requestNumber);\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement numberElement = element.element(\"number\");\n\t\t\t\t\tLong issueNumber = Long.valueOf(numberElement.getTextTrim());\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\n\t\t\t\t\t\tSet<Long> issueNumbersOfForkedRoot = issueNumbers.get(forkedRoot);\n\t\t\t\t\t\tif (issueNumbersOfForkedRoot.contains(issueNumber)) {\n\t\t\t\t\t\t\tissueNumber = Collections.max(issueNumbersOfForkedRoot) + 1;\n\t\t\t\t\t\t\tnumberElement.setText(issueNumber.toString());\n\t\t\t\t\t\t} \n\t\t\t\t\t\tissueNumbersOfForkedRoot.add(issueNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement numberElement = element.element(\"number\");\n\t\t\t\t\tLong buildNumber = Long.valueOf(numberElement.getTextTrim());\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\n\t\t\t\t\t\tSet<Long> buildNumbersOfForkedRoot = buildNumbers.get(forkedRoot);\n\t\t\t\t\t\tif (buildNumbersOfForkedRoot.contains(buildNumber)) {\n\t\t\t\t\t\t\tbuildNumber = Collections.max(buildNumbersOfForkedRoot) + 1;\n\t\t\t\t\t\t\tnumberElement.setText(buildNumber.toString());\n\t\t\t\t\t\t} \n\t\t\t\t\t\tbuildNumbersOfForkedRoot.add(buildNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement numberElement = element.element(\"number\");\n\t\t\t\t\tLong requestNumber = Long.valueOf(numberElement.getTextTrim());\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\n\t\t\t\t\t\tSet<Long> requestNumbersOfForkedRoot = pullRequestNumbers.get(forkedRoot);\n\t\t\t\t\t\tif (requestNumbersOfForkedRoot.contains(requestNumber)) {\n\t\t\t\t\t\t\trequestNumber = Collections.max(requestNumbersOfForkedRoot) + 1;\n\t\t\t\t\t\t\tnumberElement.setText(requestNumber.toString());\n\t\t\t\t\t\t} \n\t\t\t\t\t\trequestNumbersOfForkedRoot.add(requestNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\t// from 3.0.11 to 3.0.12\n\tprivate void migrate39(File dataDir, Stack<Integer> versions) {\n\t}\n\n\t// from 3.0.x to 3.1.x\n\tprivate void migrate40(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().contains(\".xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.issue.\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.util.inputspec.\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.\");\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong maxRoleId = 0;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tlong roleId = Long.parseLong(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (roleId > maxRoleId) \n\t\t\t\t\t\tmaxRoleId = roleId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tboolean hasOwnerRole = false;\n\t\tString idOfRolePreviouslyUsingOwnerId = null;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement idElement = element.element(\"id\");\n\t\t\t\t\tif (idElement.getText().trim().equals(\"1\")) {\n\t\t\t\t\t\tif (element.elementText(\"manageProject\").equals(\"true\")) {\n\t\t\t\t\t\t\telement.element(\"name\").setText(\"Owner\");\n\t\t\t\t\t\t\thasOwnerRole = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tidOfRolePreviouslyUsingOwnerId = String.valueOf(maxRoleId+1);\n\t\t\t\t\t\t\tidElement.setText(idOfRolePreviouslyUsingOwnerId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tif (!hasOwnerRole) {\n\t\t\tFile dataFile = new File(dataDir, \"Roles.xml\");\n\t\t\tVersionedXmlDoc dom;\n\t\t\tif (dataFile.exists()) { \n\t\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\n\t\t\t} else {\n\t\t\t\tdom = new VersionedXmlDoc();\n\t\t\t\tdom.addElement(\"list\");\n\t\t\t}\n\t\t\t\n\t\t\tElement ownerRoleElement = dom.getRootElement().addElement(\"io.onedev.server.model.Role\");\n\t\t\townerRoleElement.addAttribute(\"revision\", \"0.0\");\n\t\t\townerRoleElement.addElement(\"id\").setText(\"1\");\n\t\t\townerRoleElement.addElement(\"name\").setText(\"Owner\");\n\t\t\townerRoleElement.addElement(\"manageProject\").setText(\"true\");\n\t\t\townerRoleElement.addElement(\"managePullRequests\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"manageCodeComments\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"codePrivilege\").setText(\"NONE\");\n\t\t\townerRoleElement.addElement(\"manageIssues\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"scheduleIssues\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"editableIssueFields\").addAttribute(\"class\", \n\t\t\t\t\t\"io.onedev.server.model.support.role.AllIssueFields\");\n\t\t\townerRoleElement.addElement(\"manageBuilds\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"jobPrivileges\");\n\t\t\tdom.writeToFile(dataFile, false);\n\t\t}\n\t\t\n\t\tif (idOfRolePreviouslyUsingOwnerId != null) {\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"UserAuthorizations.xml\") \n\t\t\t\t\t\t|| file.getName().startsWith(\"GroupAuthorizations.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tElement roleElement = element.element(\"role\");\n\t\t\t\t\t\tif (roleElement.getText().trim().equals(\"1\"))\n\t\t\t\t\t\t\troleElement.setText(idOfRolePreviouslyUsingOwnerId);\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tMap<String, Element> userBuildSettingElements = new HashMap<>();\n\t\tMap<String, Element> userWebHooksElements = new HashMap<>();\n\t\tMap<String, String> projectOwners = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.element(\"defaultTransitionSpecs\").setName(\"transitionSpecs\");\n\t\t\t\t\t\t\tvalueElement.element(\"defaultPromptFieldsUponIssueOpen\").setName(\"promptFieldsUponIssueOpen\");\n\t\t\t\t\t\t\tvalueElement.element(\"defaultBoardSpecs\").setName(\"boardSpecs\");\n\t\t\t\t\t\t\tfor (Node node: valueElement.selectNodes(\"//uuid\"))\n\t\t\t\t\t\t\t\tnode.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tprojectOwners.put(element.elementText(\"id\").trim(), element.elementText(\"owner\").trim());\n\t\t\t\t\t\n\t\t\t\t\tElement transitionSpecsElement = element.element(\"transitionSpecs\");\n\t\t\t\t\tif (transitionSpecsElement != null)\n\t\t\t\t\t\ttransitionSpecsElement.detach();\n\t\t\t\t\tElement promptFieldsUponIssueOpenElement = element.element(\"promptFieldsUponIssueOpen\");\n\t\t\t\t\tif (promptFieldsUponIssueOpenElement != null)\n\t\t\t\t\t\tpromptFieldsUponIssueOpenElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.detach();\n\t\t\t\t\tuserBuildSettingElements.put(id, buildSettingElement);\n\t\t\t\t\tElement webHooksElement = element.element(\"webHooks\");\n\t\t\t\t\twebHooksElement.detach();\n\t\t\t\t\tuserWebHooksElements.put(id, webHooksElement);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong maxUserAuthorizationId = 0;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\n\t\t\t\t\townerElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tString ownerId = ownerElement.getText().trim();\n\t\t\t\t\t\n\t\t\t\t\tfor (Element webHookElement: userWebHooksElements.get(ownerId).elements())\n\t\t\t\t\t\telement.element(\"webHooks\").add(webHookElement.createCopy());\n\t\t\t\t\t\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement userBuildSettingElement = userBuildSettingElements.get(ownerId);\n\t\t\t\t\t\n\t\t\t\t\tfor (Element buildPreservationElement: userBuildSettingElement.element(\"buildPreservations\").elements()) \n\t\t\t\t\t\tbuildSettingElement.element(\"buildPreservations\").add(buildPreservationElement.createCopy());\n\t\t\t\t\t\n\t\t\t\t\tfor (Element actionAuthorizationElement: userBuildSettingElement.element(\"actionAuthorizations\").elements()) \n\t\t\t\t\t\tbuildSettingElement.element(\"actionAuthorizations\").add(actionAuthorizationElement.createCopy());\n\t\t\t\t\t\n\t\t\t\t\tElement jobSecretsElement = buildSettingElement.element(\"jobSecrets\");\n\t\t\t\t\tSet<String> existingJobSecretNames = new HashSet<>();\n\t\t\t\t\tfor (Element jobSecretElement: jobSecretsElement.elements()) \n\t\t\t\t\t\texistingJobSecretNames.add(jobSecretElement.elementText(\"name\").trim());\n\t\t\t\t\t\n\t\t\t\t\tfor (Element jobSecretElement: userBuildSettingElement.element(\"jobSecrets\").elements()) {\n\t\t\t\t\t\tif (!existingJobSecretNames.contains(jobSecretElement.elementText(\"name\").trim())) \n\t\t\t\t\t\t\tjobSecretsElement.add(jobSecretElement.createCopy());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tlong userAuthorizationId = Long.parseLong(element.elementText(\"id\").trim());\n\t\t\t\t\tif (userAuthorizationId > maxUserAuthorizationId)\n\t\t\t\t\t\tmaxUserAuthorizationId = userAuthorizationId;\n\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\n\t\t\t\t\tString userId = element.elementText(\"user\").trim();\n\t\t\t\t\tElement roleElement = element.element(\"role\");\n\t\t\t\t\tif (userId.equals(projectOwners.get(projectId))) {\n\t\t\t\t\t\troleElement.setText(\"1\");\n\t\t\t\t\t\tprojectOwners.remove(projectId);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tFile dataFile = new File(dataDir, \"UserAuthorizations.xml\");\n\t\tVersionedXmlDoc dom;\n\t\tif (dataFile.exists()) { \n\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\n\t\t} else {\n\t\t\tdom = new VersionedXmlDoc();\n\t\t\tdom.addElement(\"list\");\n\t\t}\n\t\tfor (Map.Entry<String, String> entry: projectOwners.entrySet()) {\n\t\t\tElement userAuthorizationElement = dom.getRootElement().addElement(\"io.onedev.server.model.UserAuthorization\");\n\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++maxUserAuthorizationId));\n\t\t\tuserAuthorizationElement.addElement(\"project\").setText(entry.getKey());\n\t\t\tuserAuthorizationElement.addElement(\"user\").setText(entry.getValue());\n\t\t\tuserAuthorizationElement.addElement(\"role\").setText(\"1\");\n\t\t}\n\t\tdom.writeToFile(dataFile, false);\n\t}\n\t\n\tprivate void migrate41(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.addElement(\"sendAsHtml\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\t// Migrate to 3.2.0\n\tprivate void migrate42(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> commentRequests = new HashMap<>();\n\t\tMap<String, String> requestTargetHeads = new HashMap<>();\n\t\tMap<String, String> requestBaseCommits = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tcommentRequests.put(element.elementTextTrim(\"comment\"), element.elementTextTrim(\"request\"));\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString id = element.elementTextTrim(\"id\");\n\t\t\t\t\trequestBaseCommits.put(id, element.elementTextTrim(\"baseCommitHash\"));\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\n\t\t\t\t\tif (lastMergePreviewElement != null) {\n\t\t\t\t\t\tElement targetHeadElement = lastMergePreviewElement.element(\"targetHead\");\n\t\t\t\t\t\trequestTargetHeads.put(id, targetHeadElement.getTextTrim());\n\t\t\t\t\t\ttargetHeadElement.setName(\"targetHeadCommitHash\");\n\t\t\t\t\t\tlastMergePreviewElement.element(\"requestHead\").setName(\"headCommitHash\");\n\t\t\t\t\t\tElement mergedElement = lastMergePreviewElement.element(\"merged\");\n\t\t\t\t\t\tif (mergedElement != null)\n\t\t\t\t\t\t\tmergedElement.setName(\"mergeCommitHash\");\n\t\t\t\t\t} \n\t\t\t\t\telement.element(\"headCommitHash\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.administration.authenticator.ldap.\", \n\t\t\t\t\t\t\t\"io.onedev.server.plugin.authenticator.ldap.\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequest\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequestTrigger\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequest\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequestTrigger\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequest\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequestTrigger\");\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement keyElement = element.element(\"key\");\n\t\t\t\t\tif (keyElement.getTextTrim().equals(\"SSH\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.element(\"privateKey\").setName(\"pemPrivateKey\");\n\t\t\t\t\t} else if (keyElement.getTextTrim().equals(\"JOB_SCRIPTS\")) {\n\t\t\t\t\t\tkeyElement.setText(\"GROOVY_SCRIPTS\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement actionAuthorizationsElement = buildSettingElement.element(\"actionAuthorizations\");\n\t\t\t\t\tif (actionAuthorizationsElement.elements().isEmpty()) {\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CreateTagAuthorization\");\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CloseMilestoneAuthorization\");\n\t\t\t\t\t}\n\t\t\t\t\telement.addElement(\"issueManagementEnabled\").setText(\"true\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\n\t\t\t\t\tcompareContextElement.element(\"compareCommit\").setName(\"compareCommitHash\");\n\t\t\t\t\tElement markPosElement = element.element(\"markPos\");\n\t\t\t\t\tmarkPosElement.setName(\"mark\");\n\t\t\t\t\tmarkPosElement.element(\"commit\").setName(\"commitHash\");\n\t\t\t\t\tString requestId = commentRequests.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (requestId != null)\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"submitReason\").setText(\"Unknown\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestBuilds.xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \"PullRequestBuild\", \"PullRequestVerification\");\n\t\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\t\tString newFileName = StringUtils.replace(file.getName(), \"PullRequestBuild\", \"PullRequestVerification\");\n\t\t\t\t\tFileUtils.writeFile(new File(dataDir, newFileName), content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement excludeDateElement = element.element(\"excludeDate\");\n\t\t\t\t\tif (excludeDateElement != null)\n\t\t\t\t\t\texcludeDateElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(40));\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\telement.element(\"mergeBaseCommitHash\").detach();\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tString targetHead = requestTargetHeads.get(requestId);\n\t\t\t\t\tElement targetHeadCommitHashElement = element.addElement(\"targetHeadCommitHash\");\n\t\t\t\t\tif (targetHead != null) \n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(targetHead);\n\t\t\t\t\telse\n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(requestBaseCommits.get(requestId));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 3.2.2\n\tprivate void migrate43(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null)\n\t\t\t\t\t\t\tvalueElement.addElement(\"issueTemplates\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate44_abbreviate(Element element, int maxLen) {\n\t\tif (element != null) {\n\t\t\tString text = StringUtils.abbreviate(element.getText().trim(), maxLen);\n\t\t\telement.setText(text);\n\t\t}\n\t}\n\t\n\t// Migrate to 4.0.5\n\tprivate void migrate44(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> verifications = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequestVerifications.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tverifications.put(element.elementTextTrim(\"build\"), element.elementTextTrim(\"request\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"triggerId\").setText(UUID.randomUUID().toString());\n\t\t\t\t\tString requestId = verifications.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (requestId != null)\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\n\t\t\t\t\tElement updatedRefElement = element.element(\"updatedRef\");\n\t\t\t\t\tif (updatedRefElement != null)\n\t\t\t\t\t\tupdatedRefElement.setName(\"refName\");\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"errorMessage\"), 12000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 15000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 15000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 12000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 4.0.6\n\tprivate void migrate45(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"triggerId\").detach();\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// migrate to 4.0.7\n\tprivate void migrate46(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\")) {\n\t\t\t\t\t\t\t\tElement serviceAccountElement = executorElement.element(\"serviceAccount\");\n\t\t\t\t\t\t\t\tif (serviceAccountElement != null)\n\t\t\t\t\t\t\t\t\tserviceAccountElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// migrate to 4.0.8\n\tprivate void migrate47(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement refNameElement = element.element(\"refName\");\n\t\t\t\t\tif (refNameElement == null)\n\t\t\t\t\t\telement.addElement(\"refName\").setText(\"unknown\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// migrate to 4.1.0\n\tprivate void migrate48(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"\\\" is before \\\"\", \"\\\" is until \\\"\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"\\\" is after \\\"\", \"\\\" is since \\\"\");\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate49(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"defaultFixedIssueFilters\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 4.2.0\n\tprivate void migrate50(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate51(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement rangeElement = element.element(\"mark\").element(\"range\");\n\t\t\t\t\tElement tabWidthElement = rangeElement.element(\"tabWidth\");\n\t\t\t\t\tif (tabWidthElement == null)\n\t\t\t\t\t\ttabWidthElement = rangeElement.addElement(\"tabWidth\");\n\t\t\t\t\ttabWidthElement.setText(\"1\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\t// Migrate to 4.2.1\n\tprivate void migrate52(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"revision\").setText(\"0\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Migrate to 4.3.0\n\tprivate void migrate53(File dataDir, Stack<Integer> versions) {\n\t\tString anonymousGroupName = null;\n\t\tMap<String, String> groupIds = new HashMap<>();\n\t\tList<Triple<String, String, String>> authorizations = new ArrayList<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldspec.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.spec.\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldsupply.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.supply.\");\n\t\t\t\tcontent = StringUtils.replace(content,\n\t\t\t\t\t\t\"org.server.plugin.report.checkstyle.\",\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.checkstyle.\");\n\t\t\t\tcontent = StringUtils.replace(content,\n\t\t\t\t\t\t\"org.server.plugin.report.clover.\",\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.clover.\");\n\t\t\t\t\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t\t\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SECURITY\")) {\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\t\tElement anonymousGroupElement = valueElement.element(\"anonymousGroup\");\n\t\t\t\t\t\t\t\tif (anonymousGroupElement != null) {\n\t\t\t\t\t\t\t\t\tif (valueElement.elementTextTrim(\"enableAnonymousAccess\").equals(\"true\"))\n\t\t\t\t\t\t\t\t\t\tanonymousGroupName = anonymousGroupElement.getText().trim();\n\t\t\t\t\t\t\t\t\tanonymousGroupElement.detach();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\t\tgroupIds.put(element.elementText(\"name\").trim(), element.elementText(\"id\").trim());\n\t\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\t\tString groupId = element.elementText(\"group\").trim();\n\t\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\n\t\t\t\t\t\tString roleId = element.elementText(\"role\").trim();\n\t\t\t\t\t\tauthorizations.add(Triple.of(groupId, projectId, roleId));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\t\n\n\t\tMap<String, String> defaultRoles = new HashMap<>();\n\t\t\n\t\tif (anonymousGroupName != null) {\n\t\t\tString anonymousGroupId = groupIds.get(anonymousGroupName);\n\t\t\tfor (Triple<String, String, String> authorization: authorizations) {\n\t\t\t\tif (authorization.getLeft().equals(anonymousGroupId)) \n\t\t\t\t\tdefaultRoles.put(authorization.getMiddle(), authorization.getRight());\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString defaultRoleId = defaultRoles.get(element.elementText(\"id\").trim());\n\t\t\t\t\tif (defaultRoleId != null)\n\t\t\t\t\t\telement.addElement(\"defaultRole\").setText(defaultRoleId);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void migrate54(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"createProjects\").detach();\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate55(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\n\t\t\t\t\tif (ownerElement != null)\n\t\t\t\t\t\townerElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate56(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"alternateEmails\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate57(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.numberinput.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.integerinput.\");\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t\t\n\t\t\tif (file.getName().startsWith(\"BuildParams.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\n\t\t\t\t\tif (type.equals(\"Number\"))\n\t\t\t\t\t\telement.setText(\"Integer\");\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\n\t\t\t\t\t\telement.setText(\"Pull Request\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueFields.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\n\t\t\t\t\tif (type.equals(\"Number\"))\n\t\t\t\t\t\telement.setText(\"Integer\");\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\n\t\t\t\t\t\telement.setText(\"Pull Request\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\n\t\t\t\t\t\t\t\tif (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.NumberField\"))\n\t\t\t\t\t\t\t\t\tfieldSpecElement.setName(\"io.onedev.server.model.support.issue.field.spec.IntegerField\");\n\t\t\t\t\t\t\t\telse if (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.TextField\"))\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"multiline\").setText(\"false\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate58(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"contributedSettings\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate59(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.element(\"sendAsHtml\").detach();\n\t\t\t\t\t\t\tElement senderAddressElement = valueElement.element(\"senderAddress\");\n\t\t\t\t\t\t\tif (senderAddressElement != null) {\n\t\t\t\t\t\t\t\tsenderAddressElement.setName(\"emailAddress\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tString hostName;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\thostName = InetAddress.getLocalHost().getHostName();\n\t\t\t\t\t\t\t\t} catch (UnknownHostException e) {\n\t\t\t\t\t\t\t\t\thostName = \"localhost\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"emailAddress\").setText(\"onedev@\" + hostName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate60(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().equals(\"io.onedev.server.plugin.docker.DockerExecutor\"))\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.docker.DockerExecutor\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void useUnknownUser(Element element, String field) {\n\t\tElement userNameElement = element.element(field + \"Name\");\n\t\tif (userNameElement != null) {\n\t\t\tuserNameElement.detach();\n\t\t\tif (element.element(field) == null)\n\t\t\t\telement.addElement(field).setText(\"-2\");\n\t\t}\n\t}\n\t\n\tprivate void migrate61(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\n\t\t\t\t\tuseUnknownUser(element, \"canceller\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"IssueDescriptionChangeData\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\telse\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"PullRequestDescriptionChangeData\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\telse\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tif (element.elementTextTrim(\"id\").equals(\"-1\"))\n\t\t\t\t\t\telement.element(\"email\").setText(\"system email\");\n\t\t\t\t}\n\t\t\t\tif (file.getName().equals(\"Users.xml\")) {\n\t\t\t\t\tElement element = dom.getRootElement().addElement(\"io.onedev.server.model.User\");\n\t\t\t\t\telement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\telement.addElement(\"id\").setText(\"-2\");\n\t\t\t\t\telement.addElement(\"name\").setText(\"Unknown\");\n\t\t\t\t\telement.addElement(\"password\").setText(\"no password\");\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\n\t\t\t\t\telement.addElement(\"email\").setText(\"unknown email\");\n\t\t\t\t\telement.addElement(\"alternateEmails\");\n\t\t\t\t\telement.addElement(\"accessToken\").setText(RandomStringUtils.randomAlphanumeric(User.ACCESS_TOKEN_LEN));\n\t\t\t\t\telement.addElement(\"userProjectQueries\");\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tList<Element> oldSenderAuthorizationElements = null;\n\t\t\t\t\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tlong maxId = 1L;\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement receiveMailSetting = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSetting != null) {\n\t\t\t\t\t\t\t\tElement senderAuthorizationsElement = receiveMailSetting.element(\"senderAuthorizations\");\n\t\t\t\t\t\t\t\toldSenderAuthorizationElements = senderAuthorizationsElement.elements();\n\t\t\t\t\t\t\t\tsenderAuthorizationsElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlong id = Long.valueOf(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (id > maxId)\n\t\t\t\t\t\tmaxId = id;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (oldSenderAuthorizationElements != null && !oldSenderAuthorizationElements.isEmpty()) {\n\t\t\t\t\tElement serviceDeskSettingElement = dom.getRootElement().addElement(\"io.onedev.server.model.Setting\");\n\t\t\t\t\tserviceDeskSettingElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"id\").setText(String.valueOf(maxId+1));\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"key\").setText(\"SERVICE_DESK_SETTING\");\n\t\t\t\t\tElement valueElement = serviceDeskSettingElement.addElement(\"value\");\n\t\t\t\t\tvalueElement.addAttribute(\"class\", \"io.onedev.server.model.support.administration.ServiceDeskSetting\");\n\t\t\t\t\tElement senderAuthorizationsElement = valueElement.addElement(\"senderAuthorizations\");\n\t\t\t\t\tElement projectDesignationsElement = valueElement.addElement(\"projectDesignations\");\n\t\t\t\t\tElement issueCreationSettingsElement = valueElement.addElement(\"issueCreationSettings\");\n\t\t\t\t\tfor (Element oldSenderAuthorizationElement: oldSenderAuthorizationElements) {\n\t\t\t\t\t\tElement senderAuthorizationElement = senderAuthorizationsElement\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.SenderAuthorization\");\n\t\t\t\t\t\tElement projectDesignationElement = projectDesignationsElement\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.ProjectDesignation\");\n\t\t\t\t\t\tElement issueCreationSettingElement = issueCreationSettingsElement\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.IssueCreationSetting\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement senderEmailsElement = oldSenderAuthorizationElement.element(\"senderEmails\");\n\t\t\t\t\t\tif (senderEmailsElement != null) {\n\t\t\t\t\t\t\tString senderEmails = senderEmailsElement.getText().trim();\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"senderEmails\").setText(senderEmails);\n\t\t\t\t\t\t\tprojectDesignationElement.addElement(\"senderEmails\").setText(senderEmails);\n\t\t\t\t\t\t\tissueCreationSettingElement.addElement(\"senderEmails\").setText(senderEmails);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement authorizedProjectsElement = oldSenderAuthorizationElement.element(\"authorizedProjects\");\n\t\t\t\t\t\tif (authorizedProjectsElement != null) {\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedProjects\")\n\t\t\t\t\t\t\t\t\t.setText(authorizedProjectsElement.getText().trim());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedRoleName\")\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"authorizedRoleName\").trim());\n\t\t\t\t\t\tprojectDesignationElement.addElement(\"project\")\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"defaultProject\").trim());\n\t\t\t\t\t\tElement issueFieldsElement = oldSenderAuthorizationElement.element(\"issueFields\");\n\t\t\t\t\t\tissueFieldsElement.detach();\n\t\t\t\t\t\tissueCreationSettingElement.add(issueFieldsElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate62(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tHardwareAbstractionLayer hardware = new SystemInfo().getHardware();\n\t\t\t\t\t\t\t\tint cpu = hardware.getProcessor().getLogicalProcessorCount()*1000;\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"cpu\").setText(String.valueOf(cpu));\n\t\t\t\t\t\t\t\tint memory = (int) (hardware.getMemory().getTotal()/1024/1024);\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"memory\").setText(String.valueOf(memory));\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"cpu\").setText(\"4000\");\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"memory\").setText(\"8000\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"DockerExecutor\")) {\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor\");\n\t\t\t\t\t\t\t\t\texecutorElement.element(\"capacity\").detach();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement userProjectQueriesElement = element.element(\"userProjectQueries\");\n\t\t\t\t\tif (userProjectQueriesElement != null)\n\t\t\t\t\t\tuserProjectQueriesElement.setName(\"projectQueries\");\n\t\t\t\t\tElement userIssueQueriesElement = element.element(\"userIssueQueries\");\n\t\t\t\t\tif (userIssueQueriesElement != null)\n\t\t\t\t\t\tuserIssueQueriesElement.setName(\"issueQueries\");\n\t\t\t\t\tElement userBuildQueriesElement = element.element(\"userBuildQueries\");\n\t\t\t\t\tif (userBuildQueriesElement != null)\n\t\t\t\t\t\tuserBuildQueriesElement.setName(\"buildQueries\");\n\t\t\t\t\tElement userPullRequestQueriesElement = element.element(\"userPullRequestQueries\");\n\t\t\t\t\tif (userPullRequestQueriesElement != null)\n\t\t\t\t\t\tuserPullRequestQueriesElement.setName(\"pullRequestQueries\");\n\t\t\t\t\t\n\t\t\t\t\tElement issueQueryWatchesElement = element.element(\"issueQueryWatches\");\n\t\t\t\t\tfor (Element issueQueryWatchElement: issueQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = issueQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userIssueQueryWatchesElement = element.element(\"userIssueQueryWatches\");\n\t\t\t\t\tfor (Element userIssueQueryWatchElement: userIssueQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userIssueQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserIssueQueryWatchElement.detach();\n\t\t\t\t\t\tissueQueryWatchesElement.add(userIssueQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserIssueQueryWatchesElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tElement pullRequestQueryWatchesElement = element.element(\"pullRequestQueryWatches\");\n\t\t\t\t\tfor (Element pullRequestQueryWatchElement: pullRequestQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = pullRequestQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userPullRequestQueryWatchesElement = element.element(\"userPullRequestQueryWatches\");\n\t\t\t\t\tfor (Element userPullRequestQueryWatchElement: userPullRequestQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userPullRequestQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserPullRequestQueryWatchElement.detach();\n\t\t\t\t\t\tpullRequestQueryWatchesElement.add(userPullRequestQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserPullRequestQueryWatchesElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tElement buildQuerySubscriptionsElement = element.element(\"buildQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: buildQuerySubscriptionsElement.elements()) \n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\tElement userBuildQuerySubscriptionsElement = element.element(\"userBuildQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: userBuildQuerySubscriptionsElement.elements()) {\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tqueryNameElement.detach();\n\t\t\t\t\t\tbuildQuerySubscriptionsElement.add(queryNameElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserBuildQuerySubscriptionsElement.detach();\n\t\t\t\t}\t\t\t\t \n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserQueryWatchElement.detach();\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQueryWatchesElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.PullRequestQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserQueryWatchElement.detach();\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQueryWatchesElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.BuildQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"querySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tqueryNameElement.detach();\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CodeCommentQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"CommitQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CommitQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"projectQuerySubscriptions\");\n\t\t\t\t\tquerySubscriptionsElement.setName(\"querySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tqueryNameElement.detach();\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate63(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"AutoDiscoveredJobExecutor\")) \n\t\t\t\t\t\t\t\t\texecutorElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\n\t\t\t\t\tif (errorMessageElement != null)\n\t\t\t\t\t\terrorMessageElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate64(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement timeoutElement = valueElement.element(\"timeout\");\n\t\t\t\t\t\t\tint timeout = Integer.valueOf(timeoutElement.getTextTrim());\n\t\t\t\t\t\t\tif (timeout == 0)\n\t\t\t\t\t\t\t\ttimeout = 60;\n\t\t\t\t\t\t\telse if (timeout < 10)\n\t\t\t\t\t\t\t\ttimeout = 10;\n\t\t\t\t\t\t\ttimeoutElement.setText(String.valueOf(timeout));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate65(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tvalueElement.element(\"cpu\").detach();\n\t\t\t\t\t\tvalueElement.element(\"memory\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void migrate66(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Element> compareContexts = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\n\t\t\t\t\tElement leftSideElement = compareContextElement.element(\"leftSide\");\n\t\t\t\t\tElement compareCommitHashElement = compareContextElement.element(\"compareCommitHash\");\n\t\t\t\t\tString compareCommitHash = compareCommitHashElement.getTextTrim();\n\t\t\t\t\tString commitHash = element.element(\"mark\").elementTextTrim(\"commitHash\");\n\t\t\t\t\tif (Boolean.parseBoolean(leftSideElement.getTextTrim())) {\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(compareCommitHash);\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(commitHash);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(compareCommitHash);\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(commitHash);\n\t\t\t\t\t}\n\t\t\t\t\tElement requestElement = element.element(\"request\");\n\t\t\t\t\tif (requestElement != null) {\n\t\t\t\t\t\tcompareContextElement.addElement(\"pullRequest\").setText(requestElement.getTextTrim());\n\t\t\t\t\t\trequestElement.detach();\n\t\t\t\t\t}\n\t\t\t\t\tleftSideElement.detach();\n\t\t\t\t\tcompareCommitHashElement.detach();\n\t\t\t\t\tcompareContexts.put(element.elementTextTrim(\"id\"), compareContextElement);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement lastCodeCommentActivityDateElement = element.element(\"lastCodeCommentActivityDate\");\n\t\t\t\t\tif (lastCodeCommentActivityDateElement != null)\n\t\t\t\t\t\tlastCodeCommentActivityDateElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tString enableStartTLSElement = valueElement.elementTextTrim(\"enableStartTLS\");\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"enableSSL\").setText(enableStartTLSElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString elementId = element.elementTextTrim(\"comment\");\n\t\t\t\t\telement.add(compareContexts.get(elementId).createCopy());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\t\t\t\t\n\t\t}\n\t}\n\t\n\tprivate void migrate67(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Element> compareContexts = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"JestTestMetric.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.setName(\"io.onedev.server.model.UnitTestMetric\");\n\t\t\t\t\n\t\t\t\tString newFileName = file.getName().replace(\"Jest\", \"Unit\");\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"CloverMetric.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CoverageMetric\");\n\t\t\t\t\n\t\t\t\tString newFileName = file.getName().replace(\"Clover\", \"Coverage\");\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"CheckstyleMetric.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.setName(\"io.onedev.server.model.ProblemMetric\");\n\t\t\t\t\n\t\t\t\tString newFileName = file.getName().replace(\"Checkstyle\", \"Problem\");\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrateAttachmentLinks(@Nullable Element element, Map<String, String> projectIds) {\n\t\tif (element != null) {\n\t\t\tString content = element.getText();\n\t\t\tPattern pattern = Pattern.compile(\"/projects/([\\\\w-\\\\.]+)/attachment/\");\n\t\t\tMatcher matcher = pattern.matcher(content);\n\t\t\tStringBuffer buffer = new StringBuffer();\n\t\t\t\n\t\t\twhile (matcher.find()) {\n\t\t\t\tString projectName = matcher.group(1);\n\t\t\t\tString projectId = projectIds.get(projectName);\n\t\t\t\tif (projectId != null) \n\t\t\t\t\tmatcher.appendReplacement(buffer, \"/projects/\" + projectId + \"/attachment/\");\n\t\t\t\telse\n\t\t\t\t\tmatcher.appendReplacement(buffer, Matcher.quoteReplacement(matcher.group()));\n\t\t\t}\n\t\t\t\n\t\t\tmatcher.appendTail(buffer);\n\t\t\telement.setText(buffer.toString());\n\t\t}\n\t}\n\t\n\tprivate void migrate68(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> projectIds = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tprojectIds.put(element.elementTextTrim(\"name\"), element.elementTextTrim(\"id\"));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"codeManagementEnabled\").setText(\"true\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"createRootProjects\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"createChildren\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\tElement jobMatchElement = executorElement.element(\"jobMatch\");\n\t\t\t\t\t\t\tif (jobMatchElement.getTextTrim().equals(\"all\"))\n\t\t\t\t\t\t\t\tjobMatchElement.detach();\n\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\tjobMatchElement.setName(\"jobRequirement\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate69(File dataDir, Stack<Integer> versions) {\n\t}\n\n\t// Migrate to 5.4.0\n\tprivate void migrate70(File dataDir, Stack<Integer> versions) {\n\t\tLong scheduleId = 1L;\n\t\tVersionedXmlDoc issueSchedulesDoc = new VersionedXmlDoc();\n\t\tElement listElement = issueSchedulesDoc.addElement(\"list\");\n\t\t\n\t\tSet<String> promptFieldsUponIssueOpen = new HashSet<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString issueSubmitDate = element.elementTextTrim(\"submitDate\");\n\t\t\t\t\tElement milestoneElement = element.element(\"milestone\");\n\t\t\t\t\tif (milestoneElement != null) {\n\t\t\t\t\t\tElement scheduleElement = listElement.addElement(\"io.onedev.server.model.IssueSchedule\");\n\t\t\t\t\t\tscheduleElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tscheduleElement.addElement(\"id\").setText(String.valueOf(scheduleId++));\n\t\t\t\t\t\tscheduleElement.addElement(\"issue\").setText(issueId);\n\t\t\t\t\t\tscheduleElement.addElement(\"milestone\").setText(milestoneElement.getTextTrim());\n\t\t\t\t\t\tscheduleElement.addElement(\"date\").addAttribute(\"class\", \"sql-timestamp\").setText(issueSubmitDate);\n\t\t\t\t\t\tmilestoneElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tString dataClass = dataElement.attributeValue(\"class\");\n\t\t\t\t\tif (dataClass.contains(\"IssueMilestoneChangeData\") || dataClass.contains(\"IssueBatchUpdateData\")) {\n\t\t\t\t\t\tElement oldMilestonesElement = dataElement.addElement(\"oldMilestones\");\n\t\t\t\t\t\tElement oldMilestoneElement = dataElement.element(\"oldMilestone\");\n\t\t\t\t\t\tif (oldMilestoneElement != null) {\n\t\t\t\t\t\t\toldMilestonesElement.addElement(\"string\").setText(oldMilestoneElement.getText());\n\t\t\t\t\t\t\toldMilestoneElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tElement newMilestonesElement = dataElement.addElement(\"newMilestones\");\n\t\t\t\t\t\tElement newMilestoneElement = dataElement.element(\"newMilestone\");\n\t\t\t\t\t\tif (newMilestoneElement != null) { \n\t\t\t\t\t\t\tnewMilestonesElement.addElement(\"string\").setText(newMilestoneElement.getText());\n\t\t\t\t\t\t\tnewMilestoneElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldNameElement: valueElement.element(\"promptFieldsUponIssueOpen\").elements())\n\t\t\t\t\t\t\t\tpromptFieldsUponIssueOpen.add(fieldNameElement.getText().trim());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tissueSchedulesDoc.writeToFile(new File(dataDir, \"IssueSchedules.xml\"), false);\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\"))\n\t\t\t\t\t\t\t\texecutorElement.element(\"createCacheLabels\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\n\t\t\t\t\t\t\t\tif (promptFieldsUponIssueOpen.contains(fieldSpecElement.elementText(\"name\").trim()))\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"true\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"false\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalueElement.element(\"promptFieldsUponIssueOpen\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t// Migrate to 6.0.0\n\tprivate void migrate71(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> issueScopes = new HashMap<>();\n\t\tMap<Pair<String, String>, String> issueIds = new HashMap<>();\n\t\tMap<Pair<String, String>, String> buildIds = new HashMap<>();\n\t\tMap<Pair<String, String>, String> pullRequestIds = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\n\t\t\t\t\tissueScopes.put(issueId, numberScope);\n\t\t\t\t\tissueIds.put(new Pair<>(numberScope, element.elementTextTrim(\"number\")), issueId);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString buildId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\n\t\t\t\t\tbuildIds.put(new Pair<>(numberScope, number), buildId);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\n\t\t\t\t\tpullRequestIds.put(new Pair<>(numberScope, number), pullRequestId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueFields.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\n\t\t\t\t\tString value = element.elementTextTrim(\"value\");\n\t\t\t\t\tif (type.equals(\"Issue\")) {\n\t\t\t\t\t\tString fieldIssueId = issueIds.get(new Pair<>(issueScopes.get(issueId), value));\n\t\t\t\t\t\tif (fieldIssueId != null)\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldIssueId);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else if (type.equals(\"Build\")) {\n\t\t\t\t\t\tString fieldBuildId = buildIds.get(new Pair<>(issueScopes.get(issueId), value));\n\t\t\t\t\t\tif (fieldBuildId != null)\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldBuildId);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else if (type.equals(\"Pull Request\")) {\n\t\t\t\t\t\tString fieldPullRequestId = pullRequestIds.get(new Pair<>(issueScopes.get(issueId), value));\n\t\t\t\t\t\tif (fieldPullRequestId != null)\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldPullRequestId);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate72(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> stateOrdinals = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tint index = 0;\n\t\t\t\t\t\t\tfor (Element stateSpecElement: valueElement.element(\"stateSpecs\").elements()) \n\t\t\t\t\t\t\t\tstateOrdinals.put(stateSpecElement.elementText(\"name\").trim(), index++);\n\t\t\t\t\t\t\tfor (Element boardSpecElement: valueElement.element(\"boardSpecs\").elements())\n\t\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\n\t\t\t\t\t\t\tvalueElement.addElement(\"listLinks\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tint ordinal = stateOrdinals.get(element.elementText(\"state\").trim());\n\t\t\t\t\telement.addElement(\"stateOrdinal\").setText(String.valueOf(ordinal));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\n\t\t\t\t\tif (issueSettingElement.element(\"listFields\") != null)\n\t\t\t\t\t\tissueSettingElement.addElement(\"listLinks\");\n\t\t\t\t\tElement boardSpecsElement = issueSettingElement.element(\"boardSpecs\");\n\t\t\t\t\tif (boardSpecsElement != null) {\n\t\t\t\t\t\tfor (Element boardSpecElement: boardSpecsElement.elements()) \n\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate73(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) {\n\t\t\t\t\t\tElement statusElement = closeInfoElement.element(\"status\");\n\t\t\t\t\t\tstatusElement.detach();\n\t\t\t\t\t\telement.add(statusElement);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.addElement(\"status\").setText(\"OPEN\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement osElement = element.element(\"os\");\n\t\t\t\t\tString osName;\n\t\t\t\t\t\n\t\t\t\t\tswitch (osElement.getTextTrim()) {\n\t\t\t\t\tcase \"WINDOWS\":\n\t\t\t\t\t\tosName = \"Windows\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"LINUX\":\n\t\t\t\t\t\tosName = \"Linux\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"FREEBSD\":\n\t\t\t\t\t\tosName = \"FreeBSD\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"MACOSX\":\n\t\t\t\t\t\tosName = \"Mac OS X\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tosName = \"Other\";\n\t\t\t\t\t}\n\t\t\t\t\telement.addElement(\"osName\").setText(osName);\n\t\t\t\t\tosElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate74(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"triggerChain\").setText(UUID.randomUUID().toString());\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate75(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"AgentTokens.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement noteElement = element.element(\"note\");\n\t\t\t\t\tif (noteElement != null)\n\t\t\t\t\t\tnoteElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate76(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"PERFORMANCE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.addElement(\"maxCodeSearchEntries\").setText(\"100\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate77(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> userIds = new HashMap<>();\n\t\t\n\t\tLong maxPullRequestCommentId = 0L;\n\t\tLong maxIssueCommentId = 0L;\n\t\tFile issueCommentsFile = null;\n\t\tFile pullRequestCommentsFile = null;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tString name = element.elementText(\"name\").trim();\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\n\t\t\t\t\tif (fullNameElement != null) \n\t\t\t\t\t\tuserIds.put(fullNameElement.getText().trim(), id);\n\t\t\t\t\telse\n\t\t\t\t\t\tuserIds.put(name, id);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\n\t\t\t\t\tif (commentId > maxIssueCommentId)\n\t\t\t\t\t\tmaxIssueCommentId = commentId;\n\t\t\t\t}\n\t\t\t\tissueCommentsFile = file;\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\n\t\t\t\t\tif (commentId > maxPullRequestCommentId)\n\t\t\t\t\t\tmaxPullRequestCommentId = commentId;\n\t\t\t\t}\n\t\t\t\tpullRequestCommentsFile = file;\n\t\t\t}\n\t\t}\n\n\t\tVersionedXmlDoc issueCommentsDom;\n\t\tif (issueCommentsFile == null) {\n\t\t\tissueCommentsFile = new File(dataDir, \"IssueComments.xml\");\n\t\t\tissueCommentsDom = new VersionedXmlDoc();\n\t\t\tissueCommentsDom.addElement(\"list\");\n\t\t} else {\n\t\t\tissueCommentsDom = VersionedXmlDoc.fromFile(issueCommentsFile);\n\t\t}\n\n\t\tVersionedXmlDoc pullRequestCommentsDom;\n\t\tif (pullRequestCommentsFile == null) {\n\t\t\tpullRequestCommentsFile = new File(dataDir, \"PullRequestComments.xml\");\n\t\t\tpullRequestCommentsDom = new VersionedXmlDoc();\n\t\t\tpullRequestCommentsDom.addElement(\"list\");\n\t\t} else {\n\t\t\tpullRequestCommentsDom = VersionedXmlDoc.fromFile(pullRequestCommentsFile);\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"issueManagementEnabled\").setName(\"issueManagement\");\n\t\t\t\t\telement.element(\"codeManagementEnabled\").setName(\"codeManagement\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"user\") == null)\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tElement assigneeElement = dataElement.element(\"assignee\");\n\t\t\t\t\tif (assigneeElement != null) {\n\t\t\t\t\t\tString userId = userIds.get(assigneeElement.getText().trim());\n\t\t\t\t\t\tif (userId != null) {\n\t\t\t\t\t\t\tassigneeElement.setName(\"assigneeId\");\n\t\t\t\t\t\t\tassigneeElement.setText(userId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tElement reviewerElement = dataElement.element(\"reviewer\");\n\t\t\t\t\tif (reviewerElement != null) {\n\t\t\t\t\t\tString userId = userIds.get(reviewerElement.getText().trim());\n\t\t\t\t\t\tif (userId != null) {\n\t\t\t\t\t\t\treviewerElement.setName(\"reviewerId\");\n\t\t\t\t\t\t\treviewerElement.setText(userId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\tElement pullRequestCommentElement = pullRequestCommentsDom.getRootElement()\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.PullRequestComment\");\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\n\t\t\t\t\t\tpullRequestCommentElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"id\").setText(String.valueOf(++maxPullRequestCommentId));\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"request\").setText(element.elementText(\"request\").trim());\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\n\t\t\t\t\t\tElement pullRequestCommentDateElement = pullRequestCommentElement.addElement(\"date\");\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\n\t\t\t\t\t\tpullRequestCommentDateElement.setText(dateElement.getText().trim());\n\t\t\t\t\t\tpullRequestCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"user\") == null)\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\tElement issueCommentElement = issueCommentsDom.getRootElement()\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.IssueComment\");\n\t\t\t\t\t\tissueCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\n\t\t\t\t\t\tissueCommentElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tissueCommentElement.addElement(\"id\").setText(String.valueOf(++maxIssueCommentId));\n\t\t\t\t\t\tissueCommentElement.addElement(\"issue\").setText(element.elementText(\"issue\").trim());\n\t\t\t\t\t\tissueCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\n\t\t\t\t\t\tElement issueCommentDateElement = issueCommentElement.addElement(\"date\");\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\n\t\t\t\t\t\tissueCommentDateElement.setText(dateElement.getText().trim());\n\t\t\t\t\t\tissueCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tissueCommentsDom.writeToFile(issueCommentsFile, false);\n\t\tpullRequestCommentsDom.writeToFile(pullRequestCommentsFile, false);\n\t}\n\n\tprivate void migrate78(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate79(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate80(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"temporal\").setText((\"false\"));\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate81(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"serviceDeskName\") == null) \n\t\t\t\t\t\telement.addElement(\"serviceDeskName\").setText(Project.NULL_SERVICE_DESK_PREFIX + UUID.randomUUID().toString());\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 7.0.0\n\tprivate void migrate82(File dataDir, Stack<Integer> versions) {\n\t\tSet<String> userNames = new HashSet<>();\n\t\tMap<String, String> primaryEmails = new HashMap<>();\n\t\tMap<String, String> gitEmails = new HashMap<>();\n\t\tMap<String, String> alternateEmails = new HashMap<>();\n\t\t\n\t\tString sshServerUrl = null;\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) \n\t\t\t\t\t\tbranchProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) \n\t\t\t\t\t\ttagProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString userId = element.elementText(\"id\").trim();\n\t\t\t\t\tElement nameElement = element.element(\"name\");\n\t\t\t\t\tString name = nameElement.getText().trim();\n\t\t\t\t\tif (userNames.add(name.toLowerCase())) \n\t\t\t\t\t\tnameElement.setText(name.toLowerCase());\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated login names found when convert '\" + name + \"' to lowercase\");\n\t\t\t\t\tif (userId.equals(\"-1\")) {\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"OneDev\");\n\t\t\t\t\t\telement.element(\"email\").detach();\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\n\t\t\t\t\t} else if (userId.equals(\"-2\")) {\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"Unknown\");\n\t\t\t\t\t\telement.element(\"email\").detach();\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElement emailElement = element.element(\"email\");\n\t\t\t\t\t\tString email = emailElement.getText().trim();\n\t\t\t\t\t\tif (primaryEmails.put(email.toLowerCase(), userId) != null)\n\t\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated email address found when convert '\" + email + \"' to lowercase\");\n\t\t\t\t\t\temailElement.detach();\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement gitEmailElement = element.element(\"gitEmail\");\n\t\t\t\t\t\tif (gitEmailElement != null) {\n\t\t\t\t\t\t\tString gitEmail = gitEmailElement.getText().trim();\n\t\t\t\t\t\t\tgitEmails.put(gitEmail.toLowerCase(), userId);\n\t\t\t\t\t\t\tgitEmailElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement alternateEmailsElement = element.element(\"alternateEmails\");\n\t\t\t\t\t\tfor (Element alternateEmailElement: alternateEmailsElement.elements()) {\n\t\t\t\t\t\t\tString alternateEmail = alternateEmailElement.getText().trim();\n\t\t\t\t\t\t\talternateEmails.put(alternateEmail.toLowerCase(), userId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\talternateEmailsElement.detach();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tElement ssoInfoElement = element.element(\"ssoInfo\");\n\t\t\t\t\tElement connectorElement = ssoInfoElement.element(\"connector\");\n\t\t\t\t\tif (connectorElement != null) \n\t\t\t\t\t\telement.addElement(\"ssoConnector\").setText(connectorElement.getText().trim());\n\t\t\t\t\tssoInfoElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"triggerChain\").setName(\"pipeline\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SECURITY\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.addElement(\"enforce2FA\").setText(\"false\");\n\t\t\t\t\t} else if (key.equals(\"SSH\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement sshServerUrlElement = valueElement.element(\"serverUrl\");\n\t\t\t\t\t\t\tsshServerUrl = sshServerUrlElement.getText().trim();\n\t\t\t\t\t\t\tsshServerUrlElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"enforce2FA\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\n\t\tif (sshServerUrl != null) {\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\t\tvalueElement.addElement(\"sshRootUrl\").setText(sshServerUrl);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tVersionedXmlDoc emailAddressesDom;\n\t\tFile emailAddressesFile = new File(dataDir, \"EmailAddresss.xml\");\n\t\temailAddressesDom = new VersionedXmlDoc();\n\t\tElement listElement = emailAddressesDom.addElement(\"list\");\n\t\t\n\t\tlong id = 1;\n\t\tMap<String, Element> primaryEmailElements = new HashMap<>();\n\t\tfor (Map.Entry<String, String> entry: primaryEmails.entrySet()) {\n\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\n\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\n\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\temailAddressElement.addElement(\"primary\").setText(\"true\");\n\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\n\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\n\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\n\t\t\tprimaryEmailElements.put(entry.getValue(), emailAddressElement);\n\t\t}\n\t\t\n\t\tfor (Map.Entry<String, String> entry: gitEmails.entrySet()) {\n\t\t\tif (!primaryEmails.containsKey(entry.getKey())) {\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\n\t\t\t\tprimaryEmailElements.get(entry.getValue()).element(\"git\").setText(\"false\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Map.Entry<String, String> entry: alternateEmails.entrySet()) {\n\t\t\tif (!primaryEmails.containsKey(entry.getKey()) && !gitEmails.containsKey(entry.getKey())) {\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"false\");\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\n\t\t\t}\n\t\t}\n\t\t\n\t\temailAddressesDom.writeToFile(emailAddressesFile, true);\n\t}\n\t\t\t\n\tprivate void migrate83(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> issueInfos = new HashMap<>();\n\t\tMap<String, String> pullRequestInfos = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueInfo = MessageFormat.format(\n\t\t\t\t\t\t\t\"project id: {0}, issue number: {1}\", \n\t\t\t\t\t\t\telement.elementText(\"project\"), element.elementText(\"number\"));\n\t\t\t\t\tissueInfos.put(element.elementTextTrim(\"id\"), issueInfo);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestInfo = MessageFormat.format(\n\t\t\t\t\t\t\t\"project id: {0}, pull request number: {1}\", \n\t\t\t\t\t\t\telement.elementText(\"targetProject\"), element.elementText(\"number\"));\n\t\t\t\t\tpullRequestInfos.put(element.elementTextTrim(\"id\"), pullRequestInfo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\n\t\t\t\t\t\tif (description.length() > Issue.MAX_DESCRIPTION_LEN) {\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, Issue.MAX_DESCRIPTION_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Issue description too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementTextTrim(\"id\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\n\t\t\t\t\t\tif (description.length() > PullRequest.MAX_DESCRIPTION_LEN) {\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, PullRequest.MAX_DESCRIPTION_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Pull request description too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementTextTrim(\"id\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tString content = contentElement.getText().trim();\n\t\t\t\t\t\tif (content.length() > IssueComment.MAX_CONTENT_LEN) {\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, IssueComment.MAX_CONTENT_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Issue comment too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementText(\"issue\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tString content = contentElement.getText().trim();\n\t\t\t\t\t\tif (content.length() > PullRequestComment.MAX_CONTENT_LEN) {\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, PullRequestComment.MAX_CONTENT_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Pull request comment too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementText(\"request\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"pollInterval\").setText(\"60\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate84(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate85(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"uuid\").setText(UUID.randomUUID().toString());\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate86(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate87(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"DockerExecutor\")) \n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"mountDockerSock\").setText(\"false\");\n\t\t\t\t\t\t\t\telse if (executorElement.getName().contains(\"KubernetesExecutor\")) \n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"mountContainerSock\").setText(\"false\");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tElement jobRequirementElement = executorElement.element(\"jobRequirement\");\n\t\t\t\t\t\t\t\tif (jobRequirementElement != null)\n\t\t\t\t\t\t\t\t\tjobRequirementElement.setName(\"jobAuthorization\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate88(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"resolved\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate89(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tString className = dataElement.attributeValue(\"class\");\n\t\t\t\t\tif (className.contains(\"PullRequestAssigneeAddData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestAssigneeRemoveData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestReviewerAddData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestReviewerRemoveData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestReviewWithdrawData\")) {\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement resultElement = element.element(\"result\");\n\t\t\t\t\tif (resultElement != null) {\n\t\t\t\t\t\tElement approvedElement = resultElement.element(\"approved\");\n\t\t\t\t\t\tif (approvedElement != null) {\n\t\t\t\t\t\t\tif (approvedElement.getTextTrim().equals(\"true\"))\n\t\t\t\t\t\t\t\telement.addElement(\"status\").setText(\"APPROVED\");\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\telement.addElement(\"status\").setText(\"REQUESTED_FOR_CHANGES\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.addElement(\"status\").setText(\"PENDING\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresultElement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.addElement(\"status\").setText(\"PENDING\");\n\t\t\t\t\t}\n\t\t\t\t\tElement statusDateElement = element.addElement(\"statusDate\");\n\t\t\t\t\tstatusDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\tstatusDateElement.setText(\"2020-01-22T16:08:49.869000000Z\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate90(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) \n\t\t\t\t\t\tcloseInfoElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate91(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate92(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())  \n\t\t\t\t\telement.addElement(\"confidential\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"codePrivilege\").equals(\"WRITE\"))\n\t\t\t\t\t\telement.addElement(\"accessConfidentialIssues\").setText(\"true\");\n\t\t\t\t\telse\n\t\t\t\t\t\telement.addElement(\"accessConfidentialIssues\").setText(\"false\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tif (dataElement.attributeValue(\"class\").contains(\"IssueBatchUpdateData\")) {\n\t\t\t\t\t\tdataElement.addElement(\"oldConfidential\").setText(\"false\");\n\t\t\t\t\t\tdataElement.addElement(\"newConfidential\").setText(\"false\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SERVICE_DESK_SETTING\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element issueCreationSettingElement: valueElement.element(\"issueCreationSettings\").elements()) \n\t\t\t\t\t\t\t\tissueCreationSettingElement.addElement(\"confidential\").setText(\"false\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate93(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate94(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.addAttribute(\"class\", \"io.onedev.server.model.support.administration.mailsetting.OtherMailSetting\");\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null) \n\t\t\t\t\t\t\t\treceiveMailSettingElement.setName(\"otherInboxPollSetting\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate95(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"GpgKeys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tbyte[] bytes = contentElement.getText().getBytes(StandardCharsets.UTF_8);\n\t\t\t\t\tcontentElement.setText(JVM.getBase64Codec().encode(bytes));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate96(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SERVICE_DESK_SETTING\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement preserveBeforeElement = valueElement.element(\"preserveBefore\");\n\t\t\t\t\t\t\tif (preserveBeforeElement != null)\n\t\t\t\t\t\t\t\tpreserveBeforeElement.detach();\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate97(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> emailOwners = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"EmailAddresss.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\temailOwners.put(element.elementTextTrim(\"id\"), element.elementTextTrim(\"owner\"));\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"GpgKeys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement emailAddressElement = element.element(\"emailAddress\");\n\t\t\t\t\telement.addElement(\"owner\").setText(emailOwners.get(emailAddressElement.getTextTrim()));\n\t\t\t\t\temailAddressElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate98(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate99(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> names = new HashMap<>();\n\t\tMap<String, String> parentIds = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tString name = element.elementText(\"name\").trim();\n\t\t\t\t\tString parentId;\n\t\t\t\t\tElement parentElement = element.element(\"parent\");\n\t\t\t\t\tif (parentElement != null)\n\t\t\t\t\t\tparentId = parentElement.getText().trim();\n\t\t\t\t\telse\n\t\t\t\t\t\tparentId = null;\n\t\t\t\t\tnames.put(id, name);\n\t\t\t\t\tparentIds.put(id, parentId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tList<String> pathSegments = new ArrayList<>();\n\t\t\t\t\t\n\t\t\t\t\tdo {\n\t\t\t\t\t\tpathSegments.add(names.get(id));\n\t\t\t\t\t\tid = parentIds.get(id);\n\t\t\t\t\t} while (id != null);\n\t\t\t\t\t\n\t\t\t\t\tCollections.reverse(pathSegments);\n\t\t\t\t\telement.addElement(\"path\").setText(StringUtils.join(pathSegments, \"/\"));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate100(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"paused\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate101(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) \n\t\t\t\t\t\t\t\texecutorElement.addElement(\"shellAccessEnabled\").setText(\"false\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate102(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate103(File dataDir, Stack<Integer> versions) {\n\t\tVersionedXmlDoc projectUpdatesDom;\n\t\tFile projectUpdatesFile = new File(dataDir, \"ProjectUpdates.xml\");\n\t\tprojectUpdatesDom = new VersionedXmlDoc();\n\t\tElement listElement = projectUpdatesDom.addElement(\"list\");\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString projectId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement updateDateElement = element.element(\"updateDate\");\n\t\t\t\t\telement.addElement(\"update\").setText(projectId);\n\t\t\t\t\t\n\t\t\t\t\tElement updateElement = listElement.addElement(\"io.onedev.server.model.ProjectUpdate\");\n\t\t\t\t\tupdateElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\tupdateElement.addElement(\"id\").setText(projectId);\n\t\t\t\t\tupdateElement.addElement(\"date\").setText(updateDateElement.getText().trim());\n\t\t\t\t\tupdateDateElement.detach();\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"codeAnalysisSetting\");\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"PERFORMANCE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.element(\"serverJobExecutorCpuQuota\").detach();\n\t\t\t\t\t\t\tvalueElement.element(\"serverJobExecutorMemoryQuota\").detach();\n\t\t\t\t\t\t\tvalueElement.element(\"cpuIntensiveTaskConcurrency\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tElement mountDockerSockElement = executorElement.element(\"mountDockerSock\");\n\t\t\t\t\t\t\t\tif (mountDockerSockElement != null && mountDockerSockElement.attribute(\"defined-in\") != null)\n\t\t\t\t\t\t\t\t\tmountDockerSockElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tprojectUpdatesDom.writeToFile(projectUpdatesFile, true);\n\t}\n\n\tprivate static final Pattern migrate104_pattern = Pattern.compile(\"\\\\(/projects/(\\\\d+)/attachment/(.*?)\\\\)\");\n\t\n\tprivate String migrate104_markdown(String content) {\n\t\tStringBuffer buffer = new StringBuffer();\n\t\tMatcher matcher = migrate104_pattern.matcher(content);\n\t\twhile (matcher.find()) {\n\t    \tmatcher.appendReplacement(buffer, \n\t    \t\t\tMatcher.quoteReplacement(\"(/~downloads/projects/\" + matcher.group(1) + \"/attachments/\" + matcher.group(2) + \")\"));  \n\t\t}\n\t\tmatcher.appendTail(buffer);\n\t\treturn buffer.toString();\n\t}\n\t\n\tprivate void migrate104(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null)\n\t\t\t\t\t\tdescriptionElement.setText(migrate104_markdown(descriptionElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null)\n\t\t\t\t\t\tdescriptionElement.setText(migrate104_markdown(descriptionElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate105(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) \n\t\t\t\t\t\t\t\texecutorElement.addElement(\"sitePublishEnabled\").setText(\"false\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate106(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"AUTHENTICATOR\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.addElement(\"authenticationRequired\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate107(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvar gitConfigElement = valueElement.element(\"gitConfig\");\n\t\t\t\t\t\t\tgitConfigElement.setName(\"gitLocation\");\n\t\t\t\t\t\t\tvar clazz = gitConfigElement.attributeValue(\"class\").replace(\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.config.\",\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.location.\");\n\t\t\t\t\t\t\tgitConfigElement.addAttribute(\"class\", clazz);\n\n\t\t\t\t\t\t\tvar curlConfigElement = valueElement.element(\"curlConfig\");\n\t\t\t\t\t\t\tcurlConfigElement.setName(\"curlLocation\");\n\t\t\t\t\t\t\tclazz = curlConfigElement.attributeValue(\"class\").replace(\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.config.\",\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.location.\");\n\t\t\t\t\t\t\tcurlConfigElement.addAttribute(\"class\", clazz);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"SSO_CONNECTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element connectorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (connectorElement.getName().contains(\"OpenIdConnector\")) {\n\t\t\t\t\t\t\t\t\tElement issuerUrlElement = connectorElement.element(\"issuerUrl\");\n\t\t\t\t\t\t\t\t\tissuerUrlElement.setName(\"configurationDiscoveryUrl\");\n\t\t\t\t\t\t\t\t\tissuerUrlElement.setText(issuerUrlElement.getText().trim() + \"/.well-known/openid-configuration\"); \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\")) {\n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"cpuRequest\").setText(\"250m\");\n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"memoryRequest\").setText(\"256Mi\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"PERFORMANCE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tint cpuIntensiveTaskConcurrency;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tHardwareAbstractionLayer hardware = new SystemInfo().getHardware();\n\t\t\t\t\t\t\t\tcpuIntensiveTaskConcurrency = hardware.getProcessor().getLogicalProcessorCount();\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tcpuIntensiveTaskConcurrency = 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalueElement.addElement(\"cpuIntensiveTaskConcurrency\")\n\t\t\t\t\t\t\t\t\t.setText(String.valueOf(cpuIntensiveTaskConcurrency));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"gitPackConfig\");\n\t\t\t\t\t\n\t\t\t\t\tfor (var branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.setName(\"io.onedev.server.model.support.code.BranchProtection\");\n\t\t\t\t\t\tfor (var fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) \n\t\t\t\t\t\t\tfileProtectionElement.setName(\"io.onedev.server.model.support.code.FileProtection\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (var tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.setName(\"io.onedev.server.model.support.code.TagProtection\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element : dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"memory\").detach();\n\t\t\t\t\tElement cpuElement = element.element(\"cpu\");\n\t\t\t\t\tcpuElement.setName(\"cpus\");\n\t\t\t\t\tcpuElement.setText(String.valueOf(Integer.parseInt(cpuElement.getTextTrim())/1000));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate Set<String> getMentioned108(Map<String, String> userIds, String content) {\n\t\tSet<String> mentioned = new HashSet<>();\n\t\tMarkdownManager markdownManager = OneDev.getInstance(MarkdownManager.class);\n\t\tfor (String userName: new MentionParser().parseMentions(markdownManager.render(content))) {\n\t\t\tString userId = userIds.get(userName);\n\t\t\tif (userId != null)\n\t\t\t\tmentioned.add(userId);\n\t\t}\n\t\treturn mentioned;\n\t}\n\t\n\tprivate void migrate108(File dataDir, Stack<Integer> versions) {\n\t\tSet<Pair<String, String>> issueMentions = new HashSet<>();\n\t\tSet<Pair<String, String>> pullRequestMentions = new HashSet<>();\n\t\tSet<Pair<String, String>> codeCommentMentions = new HashSet<>();\n\n\t\tMap<String, String> userIds = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuserIds.put(element.elementText(\"name\").trim(), \n\t\t\t\t\t\t\telement.elementTextTrim(\"id\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, descriptionElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tissueMentions.add(new Pair<>(issueId, userId));\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tissueMentions.add(new Pair<>(issueId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString requestId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, descriptionElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tpullRequestMentions.add(new Pair<>(requestId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tpullRequestMentions.add(new Pair<>(requestId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tcodeCommentMentions.add(new Pair<>(commentId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tcodeCommentMentions.add(new Pair<>(commentId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tVersionedXmlDoc mentionsDom;\n\t\tFile mentionsFile = new File(dataDir, \"IssueMentions.xml\");\n\t\tmentionsDom = new VersionedXmlDoc();\n\t\tElement mentionsElement = mentionsDom.addElement(\"list\");\n\n\t\tLong id = 1L;\n\t\tfor (Pair<String, String> issueMention : issueMentions) {\n\t\t\tElement mentionElement = mentionsElement.addElement(\"io.onedev.server.model.IssueMention\");\n\t\t\tmentionElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\tmentionElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tmentionElement.addElement(\"issue\").setText(issueMention.getFirst());\n\t\t\tmentionElement.addElement(\"user\").setText(issueMention.getSecond());\n\t\t}\n\t\tmentionsDom.writeToFile(mentionsFile, true);\n\n\t\tmentionsFile = new File(dataDir, \"PullRequestMentions.xml\");\n\t\tmentionsDom = new VersionedXmlDoc();\n\t\tmentionsElement = mentionsDom.addElement(\"list\");\n\n\t\tid = 1L;\n\t\tfor (Pair<String, String> it : pullRequestMentions) {\n\t\t\tElement mentionElement = mentionsElement.addElement(\"io.onedev.server.model.PullRequestMention\");\n\t\t\tmentionElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\tmentionElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tmentionElement.addElement(\"request\").setText(it.getFirst());\n\t\t\tmentionElement.addElement(\"user\").setText(it.getSecond());\n\t\t}\n\t\tmentionsDom.writeToFile(mentionsFile, true);\n\n\t\tmentionsFile = new File(dataDir, \"CodeCommentMentions.xml\");\n\t\tmentionsDom = new VersionedXmlDoc();\n\t\tmentionsElement = mentionsDom.addElement(\"list\");\n\n\t\tid = 1L;\n\t\tfor (Pair<String, String> it : codeCommentMentions) {\n\t\t\tElement mentionElement = mentionsElement.addElement(\"io.onedev.server.model.CodeCommentMention\");\n\t\t\tmentionElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\tmentionElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tmentionElement.addElement(\"comment\").setText(it.getFirst());\n\t\t\tmentionElement.addElement(\"user\").setText(it.getSecond());\n\t\t}\n\t\tmentionsDom.writeToFile(mentionsFile, true);\n\t}\n\n\tprivate void migrate109(File dataDir, Stack<Integer> versions) {\n\t\tvar updateIds = new HashSet<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement updateElement = element.element(\"update\");\n\t\t\t\t\tupdateIds.add(updateElement.getTextTrim());\n\t\t\t\t\tupdateElement.setName(\"dynamics\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"ProjectUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (!updateIds.contains(element.elementTextTrim(\"id\"))) {\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.element(\"date\").setName(\"lastActivityDate\");\n\t\t\t\t\t\telement.setName(\"io.onedev.server.model.ProjectDynamics\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tString newFileName = file.getName().replace(\"Update\", \"Dynamics\");\n\t\t\t\tdom.writeToFile(new File(file.getParent(), newFileName), false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"CodeComments.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement lastUpdateElement = element.element(\"lastUpdate\");\n\t\t\t\t\tlastUpdateElement.setName(\"lastActivity\");\n\t\t\t\t\tlastUpdateElement.element(\"activity\").setName(\"description\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().contains(\".xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tList<Node> selectedNodes = new ArrayList<>();\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.pullrequest.NamedPullRequestQuery\"));\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.issue.NamedIssueQuery\"));\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.NamedCodeCommentQuery\"));\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.NamedProjectQuery\"));\n\t\t\t\tfor (Node node : selectedNodes) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tElement queryElement = element.element(\"query\");\n\t\t\t\t\t\tif (queryElement != null)\n\t\t\t\t\t\t\tqueryElement.setText(queryElement.getText().trim().replace(\"\\\"Update Date\\\"\", \"\\\"Last Activity Date\\\"\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", "package io.onedev.server.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.Index;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.Table;\n\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.hibernate.annotations.Cache;\nimport org.hibernate.annotations.CacheConcurrencyStrategy;\nimport javax.validation.constraints.Email;\nimport javax.validation.constraints.NotEmpty;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\nimport io.onedev.server.util.facade.EmailAddressFacade;\nimport io.onedev.server.web.editable.annotation.Editable;\n\n@Editable\n@Entity\n@Table(indexes={@Index(columnList=\"o_owner_id\"), @Index(columnList=\"value\")})\n@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\npublic class EmailAddress extends AbstractEntity {\n    \n    private static final long serialVersionUID = 1L;\n    \n    public static final String PROP_OWNER = \"owner\";\n    \n    public static final String PROP_VALUE = \"value\";\n    \n    @Column(nullable=false, unique=true)\n    private String value;\n    \n    @JsonIgnore\n    private String verificationCode = RandomStringUtils.randomAlphanumeric(16);\n    \n    private boolean primary;\n    \n    private boolean git;\n    \n    @ManyToOne(fetch=FetchType.LAZY)\n    @JoinColumn(nullable=false)\n    private User owner;\n\n    @Editable\n    @Email\n    @NotEmpty\n    public String getValue() {\n\t\treturn value;\n\t}\n\n\tpublic void setValue(String value) {\n\t\tthis.value = value;\n\t}\n\n\t@Editable\n\tpublic String getVerificationCode() {\n\t\treturn verificationCode;\n\t}\n\n\tpublic void setVerificationCode(String verificationCode) {\n\t\tthis.verificationCode = verificationCode;\n\t}\n\n\t@Editable\n\tpublic boolean isPrimary() {\n\t\treturn primary;\n\t}\n\n\tpublic void setPrimary(boolean primary) {\n\t\tthis.primary = primary;\n\t}\n\n\t@Editable\n\tpublic boolean isGit() {\n\t\treturn git;\n\t}\n\n\tpublic void setGit(boolean git) {\n\t\tthis.git = git;\n\t}\n\n\tpublic User getOwner() {\n        return owner;\n    }\n\n    public void setOwner(User owner) {\n        this.owner = owner;\n    }\n\n\tpublic boolean isVerified() {\n    \treturn getVerificationCode() == null;\n    }\n\n\t@Override\n\tpublic EmailAddressFacade getFacade() {\n\t\treturn new EmailAddressFacade(getId(), getValue(), isPrimary(), isGit(), \n\t\t\t\tgetVerificationCode(), getOwner().getId());\n\t}\n\t\n}\n", "package io.onedev.server.model;\n\nimport static io.onedev.server.model.User.PROP_ACCESS_TOKEN;\nimport static io.onedev.server.model.User.PROP_FULL_NAME;\nimport static io.onedev.server.model.User.PROP_NAME;\nimport static io.onedev.server.model.User.PROP_SSO_CONNECTOR;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.LinkedHashMap;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.Stack;\nimport java.util.stream.Collectors;\n\nimport javax.annotation.Nullable;\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Index;\nimport javax.persistence.Lob;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\n\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.apache.shiro.subject.SimplePrincipalCollection;\nimport org.apache.shiro.subject.Subject;\nimport org.eclipse.jgit.lib.PersonIdent;\nimport org.hibernate.annotations.Cache;\nimport org.hibernate.annotations.CacheConcurrencyStrategy;\nimport javax.validation.constraints.NotEmpty;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.google.common.base.MoreObjects;\n\nimport edu.emory.mathcs.backport.java.util.Collections;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.EmailAddressManager;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.model.support.NamedProjectQuery;\nimport io.onedev.server.model.support.QueryPersonalization;\nimport io.onedev.server.model.support.TwoFactorAuthentication;\nimport io.onedev.server.model.support.administration.authenticator.Authenticator;\nimport io.onedev.server.model.support.administration.sso.SsoConnector;\nimport io.onedev.server.model.support.build.NamedBuildQuery;\nimport io.onedev.server.model.support.issue.NamedIssueQuery;\nimport io.onedev.server.model.support.pullrequest.NamedPullRequestQuery;\nimport io.onedev.server.security.SecurityUtils;\nimport io.onedev.server.util.facade.UserFacade;\nimport io.onedev.server.util.validation.annotation.UserName;\nimport io.onedev.server.util.watch.QuerySubscriptionSupport;\nimport io.onedev.server.util.watch.QueryWatchSupport;\nimport io.onedev.server.web.editable.annotation.Editable;\nimport io.onedev.server.web.editable.annotation.Password;\n\n@Entity\n@Table(\n\t\tindexes={@Index(columnList=PROP_NAME), @Index(columnList=PROP_FULL_NAME), \n\t\t\t\t@Index(columnList=PROP_SSO_CONNECTOR), @Index(columnList=PROP_ACCESS_TOKEN)})\n@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n@Editable\npublic class User extends AbstractEntity implements AuthenticationInfo {\n\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tpublic static final int ACCESS_TOKEN_LEN = 40;\n\t\n\tpublic static final Long UNKNOWN_ID = -2L;\n\t\n\tpublic static final Long SYSTEM_ID = -1L;\n\t\n\tpublic static final Long ROOT_ID = 1L;\n\t\n\tpublic static final String SYSTEM_NAME = \"OneDev\";\n\t\n\tpublic static final String SYSTEM_EMAIL_ADDRESS = \"noreply@onedev.io\";\n\t\n\tpublic static final String UNKNOWN_NAME = \"Unknown\";\n\t\n\tpublic static final String EXTERNAL_MANAGED = \"external_managed\";\n\t\n\tpublic static final String PROP_NAME = \"name\";\n\t\n\tpublic static final String PROP_PASSWORD = \"password\";\n\t\n\tpublic static final String PROP_FULL_NAME = \"fullName\";\n\t\n\tpublic static final String PROP_SSO_CONNECTOR = \"ssoConnector\";\n\t\n\tpublic static final String PROP_ACCESS_TOKEN = \"accessToken\";\n\t\n\tprivate static ThreadLocal<Stack<User>> stack =  new ThreadLocal<Stack<User>>() {\n\n\t\t@Override\n\t\tprotected Stack<User> initialValue() {\n\t\t\treturn new Stack<User>();\n\t\t}\n\t\n\t};\n\t\n\t@Column(unique=true, nullable=false)\n    private String name;\n\n    @Column(length=1024, nullable=false)\n    @JsonIgnore\n    private String password;\n\n\tprivate String fullName;\n\n\t@JsonIgnore\n\tprivate String ssoConnector;\n\t\n\t@Column(unique=true, nullable=false)\n\t@JsonIgnore\n\tprivate String accessToken = RandomStringUtils.randomAlphanumeric(ACCESS_TOKEN_LEN);\n\t\n\t@JsonIgnore\n\t@Lob\n\t@Column(length=65535)\n\tprivate TwoFactorAuthentication twoFactorAuthentication;\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<UserAuthorization> projectAuthorizations = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<Dashboard> dashboards = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<DashboardVisit> dashboardVisits = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<DashboardUserShare> dashboardShares = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<IssueAuthorization> issueAuthorizations = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<Membership> memberships = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\tprivate Collection<PullRequestReview> pullRequestReviews = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\tprivate Collection<PullRequestAssignment> pullRequestAssignments = new ArrayList<>();\n\t\n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<PullRequestWatch> pullRequestWatches = new ArrayList<>();\n\n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<IssueWatch> issueWatches = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<IssueVote> issueVotes = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<IssueQueryPersonalization> issueQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<BuildQueryPersonalization> buildQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<PullRequestQueryPersonalization> pullRequestQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<CommitQueryPersonalization> commitQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<CodeCommentQueryPersonalization> codeCommentQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n    private Collection<SshKey> sshKeys = new ArrayList<>();\n    \n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\tprivate Collection<PendingSuggestionApply> pendingSuggestionApplies = new ArrayList<>();\n\n    @OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n    private Collection<EmailAddress> emailAddresses = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n    private Collection<GpgKey> gpgKeys = new ArrayList<>();\n\n\t@OneToMany(mappedBy=CodeCommentMention.PROP_USER, cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<CodeCommentMention> codeCommentMentions = new ArrayList<>();\n\n\t@OneToMany(mappedBy=IssueMention.PROP_USER, cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<IssueMention> issueMentions = new ArrayList<>();\n\n\t@OneToMany(mappedBy=PullRequestMention.PROP_USER, cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<PullRequestMention> pullRequestMentions = new ArrayList<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedProjectQuery> projectQueries = new ArrayList<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedIssueQuery> issueQueries = new ArrayList<>();\n\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedPullRequestQuery> pullRequestQueries = new ArrayList<>();\n\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedBuildQuery> buildQueries = new ArrayList<>();\n\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate LinkedHashMap<String, Boolean> issueQueryWatches = new LinkedHashMap<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate LinkedHashMap<String, Boolean> pullRequestQueryWatches = new LinkedHashMap<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate LinkedHashSet<String> buildQuerySubscriptions = new LinkedHashSet<>();\n\t\n    private transient Collection<Group> groups;\n    \n    private transient List<EmailAddress> sortedEmailAddresses;\n    \n    private transient Optional<EmailAddress> primaryEmailAddress;\n    \n    private transient Optional<EmailAddress> gitEmailAddress;\n    \n\tpublic QueryPersonalization<NamedProjectQuery> getProjectQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedProjectQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedProjectQuery> getQueries() {\n\t\t\t\treturn projectQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedProjectQuery> userQueries) {\n\t\t\t\tprojectQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedProjectQuery> getQueryWatchSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedProjectQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\tpublic QueryPersonalization<NamedIssueQuery> getIssueQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedIssueQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedIssueQuery> getQueries() {\n\t\t\t\treturn issueQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedIssueQuery> userQueries) {\n\t\t\t\tissueQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedIssueQuery> getQueryWatchSupport() {\n\t\t\t\treturn new QueryWatchSupport<NamedIssueQuery>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic LinkedHashMap<String, Boolean> getQueryWatches() {\n\t\t\t\t\t\treturn issueQueryWatches;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedIssueQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\tpublic QueryPersonalization<NamedPullRequestQuery> getPullRequestQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedPullRequestQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedPullRequestQuery> getQueries() {\n\t\t\t\treturn pullRequestQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedPullRequestQuery> userQueries) {\n\t\t\t\tpullRequestQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedPullRequestQuery> getQueryWatchSupport() {\n\t\t\t\treturn new QueryWatchSupport<NamedPullRequestQuery>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic LinkedHashMap<String, Boolean> getQueryWatches() {\n\t\t\t\t\t\treturn pullRequestQueryWatches;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedPullRequestQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\tpublic QueryPersonalization<NamedBuildQuery> getBuildQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedBuildQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedBuildQuery> getQueries() {\n\t\t\t\treturn buildQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedBuildQuery> userQueries) {\n\t\t\t\tbuildQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedBuildQuery> getQueryWatchSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedBuildQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn new QuerySubscriptionSupport<NamedBuildQuery>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic LinkedHashSet<String> getQuerySubscriptions() {\n\t\t\t\t\t\treturn buildQuerySubscriptions;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\t@Override\n    public PrincipalCollection getPrincipals() {\n        return new SimplePrincipalCollection(getId(), \"\");\n    }\n    \n    @Override\n    public Object getCredentials() {\n    \treturn password;\n    }\n\n    public Subject asSubject() {\n    \treturn SecurityUtils.asSubject(getId());\n    }\n\n\t@Editable(name=\"Login Name\", order=100)\n\t@UserName\n\t@NotEmpty\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n    public void setName(String name) {\n    \tthis.name = name;\n    }\n    \n\t@Editable(order=150)\n\t@Password(needConfirm=true, autoComplete=\"new-password\")\n\t@NotEmpty\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n    /**\n     * Set password of this user. \n     * \n     * @param password\n     * \t\t\tpassword to set\n     */\n    public void setPassword(String password) {\n    \tthis.password = password;\n    }\n\n    public boolean isExternalManaged() {\n    \treturn getPassword().equals(EXTERNAL_MANAGED);\n    }\n    \n\t@Editable(order=200)\n\tpublic String getFullName() {\n\t\treturn fullName;\n\t}\n\n\tpublic void setFullName(String fullName) {\n\t\tthis.fullName = fullName;\n\t}\n\n\t@Nullable\n\tpublic String getSsoConnector() {\n\t\treturn ssoConnector;\n\t}\n\n\tpublic void setSsoConnector(String ssoConnector) {\n\t\tthis.ssoConnector = ssoConnector;\n\t}\n\n\tpublic String getAccessToken() {\n\t\treturn accessToken;\n\t}\n\n\tpublic void setAccessToken(String accessToken) {\n\t\tthis.accessToken = accessToken;\n\t}\n\n\t@Nullable\n\tpublic TwoFactorAuthentication getTwoFactorAuthentication() {\n\t\treturn twoFactorAuthentication;\n\t}\n\n\tpublic void setTwoFactorAuthentication(TwoFactorAuthentication twoFactorAuthentication) {\n\t\tthis.twoFactorAuthentication = twoFactorAuthentication;\n\t}\n\n\tpublic Collection<Membership> getMemberships() {\n\t\treturn memberships;\n\t}\n\n\tpublic void setMemberships(Collection<Membership> memberships) {\n\t\tthis.memberships = memberships;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn MoreObjects.toStringHelper(this)\n\t\t\t\t.add(\"name\", getName())\n\t\t\t\t.toString();\n\t}\n\t\n\tpublic PersonIdent asPerson() {\n\t\tif (isSystem()) {\n\t\t\treturn new PersonIdent(User.SYSTEM_NAME, User.SYSTEM_EMAIL_ADDRESS);\n\t\t} else {\n\t\t\tEmailAddress emailAddress = getGitEmailAddress();\n\t\t\tif (emailAddress != null && emailAddress.isVerified())\n\t\t\t\treturn new PersonIdent(getDisplayName(), emailAddress.getValue());\n\t\t\telse\n\t\t        throw new ExplicitException(\"No verified email for git operations\");\n\t\t}\n\t}\n\t\n\tpublic String getDisplayName() {\n\t\tif (getFullName() != null)\n\t\t\treturn getFullName();\n\t\telse\n\t\t\treturn getName();\n\t}\n\t\n\tpublic boolean isRoot() {\n\t\treturn ROOT_ID.equals(getId());\n\t}\n\n\tpublic boolean isSystem() {\n\t\treturn SYSTEM_ID.equals(getId());\n\t}\n\t\n\tpublic boolean isUnknown() {\n\t\treturn UNKNOWN_ID.equals(getId());\n\t}\n\t\n\tpublic boolean isOrdinary() {\n\t\treturn getId() > 0;\n\t}\n\t\n\tpublic Collection<UserAuthorization> getProjectAuthorizations() {\n\t\treturn projectAuthorizations;\n\t}\n\n\tpublic void setProjectAuthorizations(Collection<UserAuthorization> projectAuthorizations) {\n\t\tthis.projectAuthorizations = projectAuthorizations;\n\t}\n\n\tpublic Collection<IssueAuthorization> getIssueAuthorizations() {\n\t\treturn issueAuthorizations;\n\t}\n\n\tpublic void setIssueAuthorizations(Collection<IssueAuthorization> issueAuthorizations) {\n\t\tthis.issueAuthorizations = issueAuthorizations;\n\t}\n\n\t@Override\n\tpublic int compareTo(AbstractEntity entity) {\n\t\tUser user = (User) entity;\n\t\treturn getDisplayName().compareTo(user.getDisplayName());\n\t}\n\n\tpublic Collection<Group> getGroups() {\n\t\tif (groups == null)  \n\t\t\tgroups = getMemberships().stream().map(it->it.getGroup()).collect(Collectors.toList());\n\t\treturn groups;\n\t}\n\t\n\tpublic static void push(User user) {\n\t\tstack.get().push(user);\n\t}\n\n\tpublic static void pop() {\n\t\tstack.get().pop();\n\t}\n\t\n\t@Nullable\n\tpublic static User get() {\n\t\tif (!stack.get().isEmpty())\n\t\t\treturn stack.get().peek();\n\t\telse \n\t\t\treturn SecurityUtils.getUser();\n\t}\n\n    public Collection<SshKey> getSshKeys() {\n        return sshKeys;\n    }\n\n    public void setSshKeys(Collection<SshKey> sshKeys) {\n        this.sshKeys = sshKeys;\n    }\n    \n    public Collection<PendingSuggestionApply> getPendingSuggestionApplies() {\n\t\treturn pendingSuggestionApplies;\n\t}\n\n\tpublic void setPendingSuggestionApplies(Collection<PendingSuggestionApply> pendingSuggestionApplies) {\n\t\tthis.pendingSuggestionApplies = pendingSuggestionApplies;\n\t}\n\n\tpublic Collection<EmailAddress> getEmailAddresses() {\n\t\treturn emailAddresses;\n\t}\n\n\tpublic void setEmailAddresses(Collection<EmailAddress> emailAddresses) {\n\t\tthis.emailAddresses = emailAddresses;\n\t}\n\n\tpublic Collection<GpgKey> getGpgKeys() {\n\t\treturn gpgKeys;\n\t}\n\n\tpublic void setGpgKeys(Collection<GpgKey> gpgKeys) {\n\t\tthis.gpgKeys = gpgKeys;\n\t}\n\n\tpublic boolean isSshKeyExternalManaged() {\n    \tif (isExternalManaged()) {\n    \t\tif (getSsoConnector() != null) {\n    \t\t\treturn false;\n    \t\t} else {\n\t    \t\tAuthenticator authenticator = OneDev.getInstance(SettingManager.class).getAuthenticator();\n\t    \t\treturn authenticator != null && authenticator.isManagingSshKeys();\n    \t\t}\n    \t} else {\n    \t\treturn false;\n    \t}\n    }\n    \n    public boolean isMembershipExternalManaged() {\n    \tif (isExternalManaged()) {\n    \t\tSettingManager settingManager = OneDev.getInstance(SettingManager.class);\n    \t\tif (getSsoConnector() != null) {\n    \t\t\tSsoConnector ssoConnector = settingManager.getSsoConnectors().stream()\n    \t\t\t\t\t.filter(it->it.getName().equals(getSsoConnector()))\n    \t\t\t\t\t.findFirst().orElse(null);\n    \t\t\treturn ssoConnector != null && ssoConnector.isManagingMemberships();\n    \t\t} else {\n\t    \t\tAuthenticator authenticator = settingManager.getAuthenticator();\n\t    \t\treturn authenticator != null && authenticator.isManagingMemberships();\n    \t\t}\n    \t} else {\n    \t\treturn false;\n    \t}\n    }\n\n    public String getAuthSource() {\n\t\tif (isExternalManaged()) {\n\t\t\tif (getSsoConnector() != null)\n\t\t\t\treturn \"SSO Provider: \" + getSsoConnector();\n\t\t\telse\n\t\t\t\treturn \"External Authenticator\";\n\t\t} else {\n\t\t\treturn \"Builtin User Store\";\n\t\t}\n    }\n\n\tpublic Collection<Dashboard> getDashboards() {\n\t\treturn dashboards;\n\t}\n\n\tpublic void setDashboards(Collection<Dashboard> dashboards) {\n\t\tthis.dashboards = dashboards;\n\t}\n\n\tpublic Collection<DashboardVisit> getDashboardVisits() {\n\t\treturn dashboardVisits;\n\t}\n\t\n\tpublic void setDashboardVisits(Collection<DashboardVisit> dashboardVisits) {\n\t\tthis.dashboardVisits = dashboardVisits;\n\t}\n\t\n\t@Nullable\n\tpublic DashboardVisit getDashboardVisit(Dashboard dashboard) {\n\t\tfor (DashboardVisit visit: getDashboardVisits()) {\n\t\t\tif (visit.getDashboard().equals(dashboard))\n\t\t\t\treturn visit;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Collection<DashboardUserShare> getDashboardShares() {\n\t\treturn dashboardShares;\n\t}\n\n\tpublic void setDashboardShares(Collection<DashboardUserShare> dashboardShares) {\n\t\tthis.dashboardShares = dashboardShares;\n\t}\n\n\tpublic Collection<PullRequestReview> getPullRequestReviews() {\n\t\treturn pullRequestReviews;\n\t}\n\n\tpublic void setPullRequestReviews(Collection<PullRequestReview> pullRequestReviews) {\n\t\tthis.pullRequestReviews = pullRequestReviews;\n\t}\n\n\tpublic Collection<PullRequestAssignment> getPullRequestAssignments() {\n\t\treturn pullRequestAssignments;\n\t}\n\n\tpublic void setPullRequestAssignments(Collection<PullRequestAssignment> pullRequestAssignments) {\n\t\tthis.pullRequestAssignments = pullRequestAssignments;\n\t}\n\n\tpublic Collection<PullRequestWatch> getPullRequestWatches() {\n\t\treturn pullRequestWatches;\n\t}\n\n\tpublic void setPullRequestWatches(Collection<PullRequestWatch> pullRequestWatches) {\n\t\tthis.pullRequestWatches = pullRequestWatches;\n\t}\n\n\tpublic Collection<IssueWatch> getIssueWatches() {\n\t\treturn issueWatches;\n\t}\n\n\tpublic void setIssueWatches(Collection<IssueWatch> issueWatches) {\n\t\tthis.issueWatches = issueWatches;\n\t}\n\n\tpublic Collection<IssueVote> getIssueVotes() {\n\t\treturn issueVotes;\n\t}\n\n\tpublic void setIssueVotes(Collection<IssueVote> issueVotes) {\n\t\tthis.issueVotes = issueVotes;\n\t}\n\n\tpublic Collection<IssueQueryPersonalization> getIssueQueryPersonalizations() {\n\t\treturn issueQueryPersonalizations;\n\t}\n\n\tpublic void setIssueQueryPersonalizations(Collection<IssueQueryPersonalization> issueQueryPersonalizations) {\n\t\tthis.issueQueryPersonalizations = issueQueryPersonalizations;\n\t}\n\n\tpublic Collection<BuildQueryPersonalization> getBuildQueryPersonalizations() {\n\t\treturn buildQueryPersonalizations;\n\t}\n\n\tpublic void setBuildQueryPersonalizations(Collection<BuildQueryPersonalization> buildQueryPersonalizations) {\n\t\tthis.buildQueryPersonalizations = buildQueryPersonalizations;\n\t}\n\n\tpublic Collection<PullRequestQueryPersonalization> getPullRequestQueryPersonalizations() {\n\t\treturn pullRequestQueryPersonalizations;\n\t}\n\n\tpublic void setPullRequestQueryPersonalizations(Collection<PullRequestQueryPersonalization> pullRequestQueryPersonalizations) {\n\t\tthis.pullRequestQueryPersonalizations = pullRequestQueryPersonalizations;\n\t}\n\n\tpublic Collection<CommitQueryPersonalization> getCommitQueryPersonalizations() {\n\t\treturn commitQueryPersonalizations;\n\t}\n\n\tpublic void setCommitQueryPersonalizations(Collection<CommitQueryPersonalization> commitQueryPersonalizations) {\n\t\tthis.commitQueryPersonalizations = commitQueryPersonalizations;\n\t}\n\n\tpublic Collection<CodeCommentQueryPersonalization> getCodeCommentQueryPersonalizations() {\n\t\treturn codeCommentQueryPersonalizations;\n\t}\n\n\tpublic void setCodeCommentQueryPersonalizations(Collection<CodeCommentQueryPersonalization> codeCommentQueryPersonalizations) {\n\t\tthis.codeCommentQueryPersonalizations = codeCommentQueryPersonalizations;\n\t}\n\n\tpublic ArrayList<NamedProjectQuery> getUserProjectQueries() {\n\t\treturn projectQueries;\n\t}\n\n\tpublic void setProjectQueries(ArrayList<NamedProjectQuery> userProjectQueries) {\n\t\tthis.projectQueries = userProjectQueries;\n\t}\n\n\tpublic ArrayList<NamedIssueQuery> getUserIssueQueries() {\n\t\treturn issueQueries;\n\t}\n\n\tpublic void setIssueQueries(ArrayList<NamedIssueQuery> userIssueQueries) {\n\t\tthis.issueQueries = userIssueQueries;\n\t}\n\n\tpublic LinkedHashMap<String, Boolean> getIssueQueryWatches() {\n\t\treturn issueQueryWatches;\n\t}\n\n\tpublic void setIssueQueryWatches(LinkedHashMap<String, Boolean> issueQueryWatches) {\n\t\tthis.issueQueryWatches = issueQueryWatches;\n\t}\n\n\tpublic ArrayList<NamedPullRequestQuery> getUserPullRequestQueries() {\n\t\treturn pullRequestQueries;\n\t}\n\n\tpublic void setPullRequestQueries(ArrayList<NamedPullRequestQuery> userPullRequestQueries) {\n\t\tthis.pullRequestQueries = userPullRequestQueries;\n\t}\n\n\tpublic LinkedHashMap<String, Boolean> getPullRequestQueryWatches() {\n\t\treturn pullRequestQueryWatches;\n\t}\n\n\tpublic void setPullRequestQueryWatches(LinkedHashMap<String, Boolean> pullRequestQueryWatches) {\n\t\tthis.pullRequestQueryWatches = pullRequestQueryWatches;\n\t}\n\n\tpublic ArrayList<NamedBuildQuery> getUserBuildQueries() {\n\t\treturn buildQueries;\n\t}\n\n\tpublic void setBuildQueries(ArrayList<NamedBuildQuery> buildQueries) {\n\t\tthis.buildQueries = buildQueries;\n\t}\n\n\tpublic LinkedHashSet<String> getBuildQuerySubscriptions() {\n\t\treturn buildQuerySubscriptions;\n\t}\n\n\tpublic void setBuildQuerySubscriptions(LinkedHashSet<String> buildQuerySubscriptions) {\n\t\tthis.buildQuerySubscriptions = buildQuerySubscriptions;\n\t}\n\t\n\tpublic boolean isEnforce2FA() {\n\t\treturn OneDev.getInstance(SettingManager.class).getSecuritySetting().isEnforce2FA() \n\t\t\t\t|| getGroups().stream().anyMatch(it->it.isEnforce2FA());\n\t}\n\n\tpublic List<EmailAddress> getSortedEmailAddresses() {\n\t\tif (sortedEmailAddresses == null) {\n\t\t\tsortedEmailAddresses = new ArrayList<>(getEmailAddresses());\n\t\t\tCollections.sort(sortedEmailAddresses);\n\t\t}\n\t\treturn sortedEmailAddresses;\n\t}\n\t\n\tprivate EmailAddressManager getEmailAddressManager() {\n\t\treturn OneDev.getInstance(EmailAddressManager.class);\n\t}\n\t\n\t@Nullable\n\tpublic EmailAddress getPrimaryEmailAddress() {\n\t\tif (primaryEmailAddress == null)\n\t\t\tprimaryEmailAddress = Optional.ofNullable(getEmailAddressManager().findPrimary(this));\n\t\treturn primaryEmailAddress.orElse(null);\n\t}\n\n\t@Nullable\n\tpublic EmailAddress getGitEmailAddress() {\n\t\tif (gitEmailAddress == null)\n\t\t\tgitEmailAddress = Optional.ofNullable(getEmailAddressManager().findGit(this));\n\t\treturn gitEmailAddress.orElse(null);\n\t}\n\t\n\t@Override\n\tpublic UserFacade getFacade() {\n\t\treturn new UserFacade(getId(), getName(), getFullName(), getAccessToken());\n\t}\n\t\n}\n", "package io.onedev.server.model.support;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.Size;\n\nimport org.apache.commons.lang3.RandomStringUtils;\n\nimport io.onedev.server.event.project.RefUpdated;\nimport io.onedev.server.event.project.build.BuildEvent;\nimport io.onedev.server.event.project.codecomment.CodeCommentEvent;\nimport io.onedev.server.event.project.issue.IssueEvent;\nimport io.onedev.server.event.project.pullrequest.PullRequestEvent;\nimport io.onedev.server.web.editable.annotation.Editable;\n\n@Editable\npublic class WebHook implements Serializable {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tpublic enum EventType {\n\t\tCODE_PUSH {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof RefUpdated;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tPULL_REQUEST {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof PullRequestEvent;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tISSUE {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof IssueEvent;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tCODE_COMMENT {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof CodeCommentEvent;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tBUILD {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof BuildEvent;\n\t\t\t}\n\t\t\t\n\t\t};\n\n\t\tpublic abstract boolean includes(Object event);\n\t}\n\t\n\tprivate String postUrl;\n\t\n\tprivate List<EventType> eventTypes = new ArrayList<>();\n\t\n\tprivate String secret = RandomStringUtils.randomAlphanumeric(20);\n\n\t@Editable(order=100, description=\"The URL of the server endpoint that will receive the webhook POST requests\")\n\t@NotEmpty\n\tpublic String getPostUrl() {\n\t\treturn postUrl;\n\t}\n\n\tpublic void setPostUrl(String postUrl) {\n\t\tthis.postUrl = postUrl;\n\t}\n\n\t@Editable(order=200)\n\t@Size(min=1, message=\"At least one event type needs to be selected\")\n\tpublic List<EventType> getEventTypes() {\n\t\treturn eventTypes;\n\t}\n\n\tpublic void setEventTypes(List<EventType> eventTypes) {\n\t\tthis.eventTypes = eventTypes;\n\t}\n\n\t@Editable(order=300, description=\"The secret which allows you to ensure that POST requests sent to the payload URL are \"\n\t\t\t+ \"from OneDev. When you set a secret you'll receive the X-OneDev-Signature header in the webhook POST request\")\n\t@NotEmpty\n\tpublic String getSecret() {\n\t\treturn secret;\n\t}\n\n\tpublic void setSecret(String secret) {\n\t\tthis.secret = secret;\n\t}\n\t\n}\n", "package io.onedev.server.util;\n\nimport java.security.NoSuchAlgorithmException;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\n\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\n\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.shiro.crypto.AesCipherService;\nimport org.apache.sshd.common.digest.BaseDigest;\nimport org.apache.sshd.common.digest.Digest;\n\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.SettingManager;\n\npublic class CryptoUtils {\n\n    public static final Digest DIGEST_FORMAT = new BaseDigest(\"MD5\", 512);\n\t\n\tprivate static volatile KeyPair keyPair;\n\t\n    private static AesCipherService cipherService = new AesCipherService();\n    \n\tpublic static byte[] getCipherKey() {\n\t\tbyte[] privateKey = OneDev.getInstance(SettingManager.class).getSshSetting().getPrivateKey().getEncoded();\n\t\tif (keyPair == null || !keyPair.getPrivateKey().equals(privateKey)) {\n\t\t\t/*\n\t\t\t * We do not use salt here to make sure that the cipher key remains the same after server restart. \n\t\t\t * This will not sacrificing security as the private key is already a strong cipher\n\t\t\t */\n\t\t\tKeySpec spec = new PBEKeySpec(Base64.encodeBase64String(privateKey).toCharArray(), new byte[] {0}, 256, 256);\n\t\t\ttry {\n\t\t\t\tSecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n\t\t\t\tkeyPair = new KeyPair(privateKey, f.generateSecret(spec).getEncoded());\n\t\t\t} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\t\t\n\t\t} \n\t\treturn keyPair.getCipherKey();\n\t}\n\n\tpublic static byte[] encrypt(byte[] data) {\n\t\treturn cipherService.encrypt(data, getCipherKey()).getBytes();\n\t}\n\t\n\tpublic static byte[] decrypt(byte[] data) {\n\t\treturn cipherService.decrypt(data, getCipherKey()).getBytes();\n\t}\n\t\n\tprivate static class KeyPair {\n\t\t\n\t\tprivate final byte[] privateKey;\n\t\t\n\t\tprivate final byte[] cipherKey;\n\t\t\n\t\tpublic KeyPair(byte[] privateKey, byte[] cipherKey) {\n\t\t\tthis.privateKey = privateKey;\n\t\t\tthis.cipherKey = cipherKey;\n\t\t}\n\n\t\tpublic byte[] getPrivateKey() {\n\t\t\treturn privateKey;\n\t\t}\n\n\t\tpublic byte[] getCipherKey() {\n\t\t\treturn cipherKey;\n\t\t}\n\t\t\n\t}    \n\t\n}\n", "package io.onedev.server.web.component.user.accesstoken;\n\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.wicket.Session;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.link.Link;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.AbstractReadOnlyModel;\nimport org.apache.wicket.model.IModel;\n\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.model.User;\nimport io.onedev.server.web.component.link.copytoclipboard.CopyToClipboardLink;\nimport io.onedev.server.web.util.ConfirmClickModifier;\n\n@SuppressWarnings(\"serial\")\npublic abstract class AccessTokenPanel extends Panel {\n\n\tpublic AccessTokenPanel(String id) {\n\t\tsuper(id);\n\t}\n\n\tprotected abstract User getUser();\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tIModel<String> valueModel = new AbstractReadOnlyModel<String>() {\n\n\t\t\t@Override\n\t\t\tpublic String getObject() {\n\t\t\t\treturn getUser().getAccessToken();\n\t\t\t}\n\t\t\t\n\t\t};\n\t\tadd(new TextField<String>(\"value\", valueModel) {\n\n\t\t\t@Override\n\t\t\tprotected String[] getInputTypes() {\n\t\t\t\treturn new String[] {\"password\"};\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tadd(new CopyToClipboardLink(\"copy\", valueModel));\n\t\t\n\t\tadd(new Link<Void>(\"regenerate\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\t\t\t\tgetUser().setAccessToken(RandomStringUtils.randomAlphanumeric(User.ACCESS_TOKEN_LEN));\n\t\t\t\tOneDev.getInstance(UserManager.class).save(getUser());\n\t\t\t\tSession.get().success(\"Access token regenerated\");\n\t\t\t\tsetResponsePage(getPage());\n\t\t\t}\n\t\t\t\n\t\t}.add(new ConfirmClickModifier(\"This will invalidate current token and generate a new one, do you want to continue?\")));\n\t}\n\n}\n", "<wicket:panel>\n\t<div wicket:id=\"content\" class=\"setup-2fa\"></div>\n\t<wicket:fragment wicket:id=\"pendingVerifyFrag\">\n\t\t<form wicket:id=\"form\">\n\t\t\t<div class=\"modal-header\">\n\t\t\t\t<h5 id=\"modal-title\" class=\"modal-title\">Set Up Two-factor Authentication</h5>\n\t\t\t\t<button wicket:id=\"close\" type=\"button\" class=\"close\"><wicket:svg href=\"times\" class=\"icon\"/></button>\n\t\t\t</div>\n\t\t\t<div class=\"modal-body\">\n\t\t\t\t<div wicket:id=\"enforceNotice\" class=\"alert alert-light-warning\">Two-factor authentication is enforced \n\t\t\t\tfor your account to enhance security. Please follow below procedure to set it up</div>\n\t\t\t\t<div class=\"text-secondary font-weight-boldest\">\n\t\t\t\tScan below QR code with your TOTP authenticators\n\t\t\t\t</div>\n\t\t\t\t<div>These authenticators normally run \n\t\t\t\ton your mobile phone, some examples are Google Authenticator, Microsoft Authenticator, Authy, 1Password etc.</div>\n\t\t\t\n\t\t\t\t<div class=\"d-flex justify-content-center my-3\">\n\t\t\t\t\t<img wicket:id=\"QRCode\">\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class=\"text-secondary font-weight-boldest\">\n\t\t\t\tThen enter the passcode shown in the TOTP authenticator to verify\n\t\t\t\t</div>\n\t\t\t\t<input wicket:id=\"passcode\" placeholder=\"6-digits passcode\" class=\"form-control mt-2\">\n\t\t\t\t<div wicket:id=\"feedback\" class=\"mb-n3 mt-3\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"modal-footer\">\n\t\t\t\t<input wicket:id=\"verify\" type=\"submit\" class=\"dirty-aware btn btn-primary\" value=\"Verify\">\n\t\t\t\t<a wicket:id=\"cancel\" class=\"btn btn-secondary\">Cancel</a>\n\t\t\t</div>\n\t\t</form>\n\t</wicket:fragment>\n\t<wicket:fragment wicket:id=\"verifiedFrag\">\n\t\t<div class=\"modal-header\">\n\t\t\t<h5 id=\"modal-title\" class=\"modal-title\">Set Up Two-factor Authentication</h5>\n\t\t\t<button wicket:id=\"close\" type=\"button\" class=\"close\"><wicket:svg href=\"times\" class=\"icon\"/></button>\n\t\t</div>\n\t\t<div class=\"modal-body\">\n\t\t\t<div class=\"alert alert-light-success font-weight-bolder\"><wicket:svg href=\"tick-circle\" class=\"icon\"/> Two-factor authentication is now enabled for your account</div> \n\t\t\t\n\t\t\t<div class=\"mb-3\">\n\t\t\t<b class=\"text-danger\">IMPORTANT:</b> Please <a wicket:id=\"download\" class=\"font-weight-bolder\">download</a> \n\t\t\trecovery codes below and keep \n\t\t\tthem secret. These codes can be used to provide one-time access to your account in case you \n\t\t\tcan not access the authentication application. They will <b>NOT</b> be displayed again \n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div wicket:id=\"recoveryCodes\" class=\"d-flex justify-content-between text-monospace font-size-lg font-weight-bold\">\n\t\t\t\t\t<div wicket:id=\"left\"></div>\n\t\t\t\t\t<div wicket:id=\"right\"></div>\n\t\t\t\t</div>\t\t\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"modal-footer d-flex justify-content-center\">\n\t\t\t<a wicket:id=\"ok\" class=\"btn btn-primary\">Ok</a>\n\t\t</div>\n\t</wicket:fragment>\n</wicket:panel>", "package io.onedev.server.web.component.user.twofactorauthentication;\n\nimport java.io.IOException;\nimport java.security.SecureRandom;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.commons.codec.binary.Base32;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.tika.mime.MediaType;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.AjaxLink;\nimport org.apache.wicket.ajax.markup.html.form.AjaxButton;\nimport org.apache.wicket.feedback.FencedFeedbackPanel;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.image.Image;\nimport org.apache.wicket.markup.html.link.ResourceLink;\nimport org.apache.wicket.markup.html.panel.Fragment;\nimport org.apache.wicket.markup.html.panel.GenericPanel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.request.resource.AbstractResource;\nimport org.apache.wicket.request.resource.ContentDisposition;\n\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.model.User;\nimport io.onedev.server.model.support.TwoFactorAuthentication;\nimport io.onedev.server.web.page.simple.security.LoginPage;\n\n@SuppressWarnings(\"serial\")\npublic abstract class TwoFactorAuthenticationSetupPanel extends GenericPanel<User> {\n\n\tprivate static final int QR_CODE_SIZE = 160;\n\t\n\tpublic TwoFactorAuthenticationSetupPanel(String id) {\n\t\tsuper(id);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tString secretKey = generateSecretKey();\n\t\t\n\t\tList<String> scratchCodes = new ArrayList<>();\n\t\tfor (int i=0; i<16; i++) \n\t\t\tscratchCodes.add(RandomStringUtils.randomAlphanumeric(12));\n\t\t\n\t\tTwoFactorAuthentication authentication = new TwoFactorAuthentication(secretKey, scratchCodes);\n\n\t\tFragment fragment = new Fragment(\"content\", \"pendingVerifyFrag\", this);\n\t\tForm<?> form = new Form<Void>(\"form\");\n\t\t\n\t\tform.add(new WebMarkupContainer(\"enforceNotice\") {\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\tsetVisible(getPage() instanceof LoginPage);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.add(new Image(\"QRCode\", new AbstractResource() {\n\n\t\t\t@Override\n\t\t\tprotected ResourceResponse newResourceResponse(Attributes attributes) {\n\t\t\t\tResourceResponse response = new ResourceResponse();\n\t\t\t\tresponse.setContentType(MediaType.image(\"png\").toString());\n\t\t\t\tresponse.disableCaching();\n\t\t\t\t\n\t\t\t\tresponse.setWriteCallback(new WriteCallback() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void writeData(Attributes attributes) throws IOException {\n \t\t\t\t\t\tauthentication.writeQRCode(getUser(), QR_CODE_SIZE, \n \t\t\t\t\t\t\t\tattributes.getResponse().getOutputStream());\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t});\t\t\n\t\t\t\treturn response;\n\t\t\t}\n\t\t\t\n\t\t}) {\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\ttag.put(\"width\", QR_CODE_SIZE + \"px\");\n\t\t\t\ttag.put(\"height\", QR_CODE_SIZE + \"px\");\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tTextField<String> input = new TextField<String>(\"passcode\", Model.of(\"\"));\n\t\tform.add(input);\n\t\tform.add(new FencedFeedbackPanel(\"feedback\", form));\n\t\tform.add(new AjaxButton(\"verify\") {\n\n\t\t\t@Override\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\tsuper.onSubmit(target, form);\n\t\t\t\tString passcode = input.getModelObject();\n\t\t\t\tif (StringUtils.isBlank(passcode)) {\n\t\t\t\t\tform.error(\"Please input passcode\");\n\t\t\t\t\ttarget.add(form);\n\t\t\t\t} else if (!passcode.equals(authentication.getTOTPCode())) {\n\t\t\t\t\tform.error(\"Passcode incorrect\");\n\t\t\t\t\ttarget.add(form);\n\t\t\t\t} else {\n\t\t\t\t\tgetUser().setTwoFactorAuthentication(authentication);\n\t\t\t\t\tOneDev.getInstance(UserManager.class).save(getUser());\n\t\t\t\t\t\n\t\t\t\t\tFragment fragment = new Fragment(\"content\", \"verifiedFrag\", TwoFactorAuthenticationSetupPanel.this);\n\t\t\t\t\tRepeatingView recoveryCodesView = new RepeatingView(\"recoveryCodes\");\n\t\t\t\t\tfor (int i=0; i<authentication.getScratchCodes().size()/2; i++) {\n\t\t\t\t\t\tWebMarkupContainer container = new WebMarkupContainer(recoveryCodesView.newChildId());\n\t\t\t\t\t\tcontainer.add(new Label(\"left\", authentication.getScratchCodes().get(i*2)));\n\t\t\t\t\t\tcontainer.add(new Label(\"right\", authentication.getScratchCodes().get(i*2+1)));\n\t\t\t\t\t\trecoveryCodesView.add(container);\n\t\t\t\t\t}\n\t\t\t\t\tfragment.add(recoveryCodesView);\n\t\t\t\t\tfragment.add(new ResourceLink<Void>(\"download\", new AbstractResource() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected ResourceResponse newResourceResponse(Attributes attributes) {\n\t\t\t\t\t\t\tResourceResponse response = new ResourceResponse();\n\t\t\t\t\t\t\tresponse.setContentType(MediaType.TEXT_PLAIN.toString());\n\t\t\t\t\t\t\tresponse.setFileName(\"onedev-recovery-codes.txt\");\n\t\t\t\t\t\t\tresponse.setContentDisposition(ContentDisposition.ATTACHMENT);\n\t\t\t\t\t\t\tresponse.disableCaching();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresponse.setWriteCallback(new WriteCallback() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void writeData(Attributes attributes) throws IOException {\n\t\t \t\t\t\t\t\t\tString content = StringUtils.join(authentication.getScratchCodes(), \"\\n\");\n\t\t\t\t\t\t\t\t\tattributes.getResponse().write(content);\n\t\t\t\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\t\t\n\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}));\n\t\t\t\t\tfragment.add(new AjaxLink<Void>(\"ok\") {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\tonEnabled(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\tfragment.add(new AjaxLink<Void>(\"close\") {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\tonEnabled(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\tTwoFactorAuthenticationSetupPanel.this.replace(fragment);\t\t\n\t\t\t\t\ttarget.add(fragment);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t});\n\t\tform.add(new AjaxLink<Void>(\"cancel\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tonCancelled(target);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.add(new AjaxLink<Void>(\"close\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tonCancelled(target);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\tfragment.add(form);\t\n\t\t\n\t\tfragment.setOutputMarkupId(true);\n\t\tadd(fragment);\n\t}\n\n\tpublic static String generateSecretKey() {\n\t    SecureRandom random = new SecureRandom();\n\t    byte[] bytes = new byte[20];\n\t    random.nextBytes(bytes);\n\t    Base32 base32 = new Base32();\n\t    return base32.encodeToString(bytes);\n\t}\n\t\n\tprotected abstract User getUser();\n\t\n\tprotected abstract void onEnabled(AjaxRequestTarget target);\n\t\n\tprotected abstract void onCancelled(AjaxRequestTarget target);\n\t\n}\n", "package io.onedev.server.web.page.simple.security;\n\nimport java.util.Arrays;\n\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.shiro.authc.credential.PasswordService;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.feedback.FencedFeedbackPanel;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.link.Link;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.request.mapper.parameter.PageParameters;\n\nimport com.google.common.collect.Lists;\n\nimport io.onedev.commons.loader.AppLoader;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.mail.MailManager;\nimport io.onedev.server.model.EmailAddress;\nimport io.onedev.server.model.User;\nimport io.onedev.server.persistence.SessionManager;\nimport io.onedev.server.web.component.taskbutton.TaskButton;\nimport io.onedev.server.web.page.simple.SimplePage;\n\n@SuppressWarnings(\"serial\")\npublic class PasswordResetPage extends SimplePage {\n\n\tprivate String loginNameOrEmail;\n\t\n\tpublic PasswordResetPage(PageParameters params) {\n\t\tsuper(params);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tForm<?> form = new Form<Void>(\"form\");\n\t\tform.add(new FencedFeedbackPanel(\"feedback\", form));\t\t\n\t\tform.add(new TextField<String>(\"loginNameOrEmail\", new IModel<String>() {\n\n\t\t\t@Override\n\t\t\tpublic void detach() {\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getObject() {\n\t\t\t\treturn loginNameOrEmail;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setObject(String object) {\n\t\t\t\tloginNameOrEmail = object;\n\t\t\t}\n\t\t\t\n\t\t}).setLabel(Model.of(\"Login name or email\")).setRequired(true));\n\t\t\n\t\tform.add(new TaskButton(\"resettingPassword\") {\n\t\t\t\n\t\t\t@Override\n\t\t\tprotected void onCompleted(AjaxRequestTarget target, boolean successful) {\n\t\t\t\tsuper.onCompleted(target, successful);\n\t\t\t\tif (successful)\n\t\t\t\t\tsetResponsePage(LoginPage.class);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected String runTask(TaskLogger logger) {\n\t\t\t\tOneDev.getInstance(SessionManager.class).openSession();\n\t\t\t\ttry {\n\t\t\t\t\tUserManager userManager = OneDev.getInstance(UserManager.class);\n\t\t\t\t\tUser user = userManager.findByName(loginNameOrEmail);\n\t\t\t\t\tif (user == null) \n\t\t\t\t\t\tuser = userManager.findByVerifiedEmailAddress(loginNameOrEmail);\n\t\t\t\t\tif (user == null) {\n\t\t\t\t\t\tthrow new ExplicitException(\"No user found with login name or verified email: \" + loginNameOrEmail);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSettingManager settingManager = OneDev.getInstance(SettingManager.class);\n\t\t\t\t\t\tif (settingManager.getMailSetting() != null) {\n\t\t\t\t\t\t\tString password = RandomStringUtils.random(10, true, true);\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tuser.setPassword(AppLoader.getInstance(PasswordService.class).encryptPassword(password));\n\t\t\t\t\t\t\tuserManager.save(user);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tMailManager mailManager = OneDev.getInstance(MailManager.class);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString serverUrl = settingManager.getSystemSetting().getServerUrl();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString htmlBody = String.format(\"Dear %s, \"\n\t\t\t\t\t\t\t\t+ \"<p style='margin: 16px 0;'>\"\n\t\t\t\t\t\t\t\t+ \"Per your request, password of your login \\\"%s\\\" at <a href=\\\"%s\\\">%s</a> has been reset to:<br>\"\n\t\t\t\t\t\t\t\t+ \"%s<br><br>\"\n\t\t\t\t\t\t\t\t+ \"Please login and change the password in your earliest convenience.\",\n\t\t\t\t\t\t\t\tuser.getDisplayName(), user.getName(), serverUrl, serverUrl, password);\n\t\n\t\t\t\t\t\t\tString textBody = String.format(\"Dear %s,\\n\\n\"\n\t\t\t\t\t\t\t\t\t+ \"Per your request, password of account \\\"%s\\\" at %s has been reset to:\\n\"\n\t\t\t\t\t\t\t\t\t+ \"%s\",\n\t\t\t\t\t\t\t\t\tuser.getDisplayName(), user.getName(), serverUrl, password);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString emailAddressValue;\n\t\t\t\t\t\t\tif (loginNameOrEmail.contains(\"@\")) { \n\t\t\t\t\t\t\t\temailAddressValue = loginNameOrEmail;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tEmailAddress emailAddress = user.getPrimaryEmailAddress();\n\t\t\t\t\t\t\t\tif (emailAddress == null) \n\t\t\t\t\t\t\t\t\tthrow new ExplicitException(\"Primary email address not specified\");\n\t\t\t\t\t\t\t\telse if (!emailAddress.isVerified())\n\t\t\t\t\t\t\t\t\tthrow new ExplicitException(\"Your primary email address is not verified\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\temailAddressValue = emailAddress.getValue();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmailManager.sendMail(\n\t\t\t\t\t\t\t\t\tsettingManager.getMailSetting().getSendSetting(), \n\t\t\t\t\t\t\t\t\tArrays.asList(emailAddressValue),\n\t\t\t\t\t\t\t\t\tLists.newArrayList(), Lists.newArrayList(), \n\t\t\t\t\t\t\t\t\t\"[Password Reset] Your OneDev Password Has Been Reset\", \n\t\t\t\t\t\t\t\t\thtmlBody, textBody, null, null);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn \"Please check your email \" + emailAddressValue + \" for the reset password\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new ExplicitException(\"Unable to send password reset email as smtp settings are not defined\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tOneDev.getInstance(SessionManager.class).closeSession();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.add(new Link<Void>(\"cancel\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(LoginPage.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tadd(form);\n\t}\n\t\n\t@Override\n\tprotected String getTitle() {\n\t\treturn \"Forgotten Password?\";\n\t}\n\n\t@Override\n\tprotected String getSubTitle() {\n\t\treturn \"Enter your user name or email to reset password\";\n\t}\n\n}\n", "# 7.8.0\n\nTo use consistent project url for web and git access, OneDev now uses project path instead of project id to access projects via web UI, for instance `https://code.onedev.io/projects/160` has been changed to `https://code.onedev.io/onedev/server`. To avoid conflicting with this url scheme, \nsome service urls have been changed and this causes some incompatibitlities:\n\n1. The RESTful api url now starts with `~api` instead of `api`, for instance url to access project information is now `/~api/projects/{projectId}` \n2. SSO callback url now takes the form `https://<onedev root url>/~sso/callback/<Provider Name>` (use `~sso` instead of `sso`)\n3. If you are using OAuth based Office365 or Gmail mail service, make sure to change redirect url as `https://<onedev root url>/~oauth/callback` (use `~oauth` instead of `oauth`)\n4. Agents can not upgrade itself for this version, as url connecting to server has been changed. You will need to re-download \nagent package from server if running in bare-metal mode, or re-pull the agent image if running in docker mode\n5. If you are setting up reverse proxy using Apache or Nginx, make sure to change proxied path `/server` to `/~server`. Check [the docs](https://docs.onedev.io/administration-guide/reverse-proxy-setup) for details\n\n# 7.7.0\n\nOneDev server and agent now requires Java 11 or higher. Follow below steps to upgrade agent manually:\n\n1. If agent is running as bare metal mode with Java 8, re-download agent package from server and run it \nwith Java 11 or higher following the instructions\n1. If agent is running as bare metal mode with Java 11 or higher, it will be updated automatically\n1. If agent is running in container mode, re-pull the image and start the container\n\n# 7.4.0\n\n### RESTful api\n\n1. A boolean property \"confidential\" must be added to create endpoint of [issue resource](/~help/api/io.onedev.server.rest.IssueResource/create) to indicate whether or not the issue is confidential\n\n# 7.3.5\n1. [RESTful api] Service desk name property of [project resource](/~help/api/io.onedev.server.rest.ProjectResource) moved from basic info endpoint to setting endpoint\n\n# 7.3.0\n1. [CI/CD] Docker sock is NOT mounted by default for server docker executor, remote docker executor and Kubernetes \nexecutor for security reasons. If your CI job performs docker operation, the build may fail. You may enable \nthe mount docker sock option in related executors, but make sure to configure authorized jobs of the executor \nto only allow trusted jobs to use the executors\n\n# 7.0.0\n\n1. [RESTful api] Email addresses of a user should now be retrieved via [UserResource.getEmailAddresses](/~help/api/io.onedev.server.rest.UserResource/getEmailAddresses), and should be operated via [EmailAddressResource](/~help/api/io.onedev.server.rest.EmailAddressResource)\n2. [RESTful api] Access token of a user should now be retrieved via [UserResource.getAccessToken](/~help/api/io.onedev.server.rest.UserResource/getAccessToken)\n3. [RESTful api] User query by login name, full name and email should now be done via [UserResource.queryProfile](/~help/api/io.onedev.server.rest.UserResource/queryProfile)\n\n# 6.2.1\n\n1. [build spec] Registry login setting is removed from build image step (introduced in 6.2.0). Specify registry logins \nin job executor if necessary\n\n# 6.2.0\n\n1. A new property `Run In Container` is added and enabled for all command steps in build spec. If you have steps intended to \nbe executed by shell executor, edit them to disable this property, otherwise the build will be failed with error `This step should be executed by server docker executor, remote docker executor, or kubernetes executor`\n1. Using cache path &quot;.&quot; (to cache workspace itself) in job cache definition is no longer supported\n\n# 5.4.0 \n\n1. In case install OneDev into a Kubernetes cluster, Kustomization based deployment is replaced by helm based deployment for flexibility reason\n\n# 5.2.1\n\n1. User by default is not able to create/fork projects now. To allow it, specify default login group with appropriate project create permissions in security setting.\n2. URL of project is changed from *http(s)://\\<onedev-server\\>/projects/\\<project name\\>* to *http(s)://\\<onedev-server\\>/projects/\\<project id\\>*. This only affects web UI, clone url and REStful api url is not changed.\n3. Job variable *@project_name@* should be replaced by *@project_path@*.\n4. Job match condition in job executor is renamed as job requirement, and the criteria to match job name is no longer valid. Executor can now be specified when define the job.\n\n# 4.3.0\n\n1. Service definition is separated from job definition. Previous service defined in job will be moved out of job and take the name _\\<job name\\>-\\<service name\\>_ to avoid possible name conflicts. You either need to change it back to use original name in case there is no conflicts, or change your build script to use the new service name. \n2. Job match condition of job executor no longer accepts image criteria. You need to remove it manually if there is any; otherwise the job matching will fail.\n\n# 4.1.3\n\n1. Html report is removed from build spec due to possible XSS vulnerabilities. Check issue #230 for details\n2. Setting _Default Fixed Issues Filter_ in build spec has been moved to be under project build setting, in order to facilitate issue query auto-updating upon custom field/state change\n\n# 4.1.0\n\n1. Backslash in job commands should not be escaped now. And literal '@' should be written as '@@'\n2. Various query operator _is before_ and _is after_ is substituted with _is until_ and _is since_. For instance issue query _\"Submit Date\" is before \"yesterday\"_ should be written as _\"Submit Date\" is until \"yesterday\"_\n\n# 4.0.5\n\n1. Renamed build variables:\n\n  |old name|new name|\n  |---|---|\n  |updated_ref|ref|\n  |updated_branch|branch|\n  |updated_tag|tag|\n  |pull_request_ids|pull_request_number|\n\n1. Removed build variables: _on_branches_, _commit_tags_, \n\n# 3.2\n\nVersion 3.2 uses token authentication instead of password authentication in build spec for security \nconsideration. As a result of this, password authentication specified previously will be cleared:\n\n1. Submodule authentication\n  \n  You will need to use custom http/ssh clone credential with permission to access submodule projects to retrieve source. Refer to [tutorial](https://docs.onedev.io/tutorials/cicd/clone-submodules-ssh/) for an example.\n  \n2. Project dependency authentication\n\n  You will need to define a job secret containing an access token in project build setting page, and then use that secret in project dependency definition. The access token should have permission to download dependency project artifacts of course."], "fixing_code": ["package io.onedev.server.git.hook;\n\nimport com.google.common.base.Preconditions;\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.ServerConfig;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.util.CryptoUtils;\nimport org.apache.commons.io.IOUtils;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class HookUtils {\n\n\tpublic static final String HOOK_TOKEN = CryptoUtils.generateSecret(); \n\t\n\tprivate static final String gitReceiveHook;\n\t\n\tstatic {\n        try (InputStream is = HookUtils.class.getClassLoader().getResourceAsStream(\"git-receive-hook\")) {\n        \tPreconditions.checkNotNull(is);\n            gitReceiveHook = StringUtils.join(IOUtils.readLines(is, Charset.defaultCharset()), \"\\n\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\t}\n\t\n\tpublic static Map<String, String> getHookEnvs(Long projectId, Long userId) {\n\t\tServerConfig serverConfig = OneDev.getInstance(ServerConfig.class);\n\t\tSettingManager settingManager = OneDev.getInstance(SettingManager.class);\n\t\tString hookUrl = \"http://localhost:\" + serverConfig.getHttpPort();\n\t\tString curl = settingManager.getSystemSetting().getCurlLocation().getExecutable();\n\t\t\n\t\tMap<String, String> envs = new HashMap<>();\n\t\t\n        envs.put(\"ONEDEV_CURL\", curl);\n\t\tenvs.put(\"ONEDEV_URL\", hookUrl);\n\t\tenvs.put(\"ONEDEV_HOOK_TOKEN\", HOOK_TOKEN);\n\t\tenvs.put(\"ONEDEV_USER_ID\", userId.toString());\n\t\tenvs.put(\"ONEDEV_REPOSITORY_ID\", projectId.toString());\n\t\t\n        envs.put(\"GITPLEX_CURL\", curl);\n\t\tenvs.put(\"GITPLEX_URL\", hookUrl);\n\t\tenvs.put(\"GITPLEX_USER_ID\", userId.toString());\n\t\tenvs.put(\"GITPLEX_REPOSITORY_ID\", projectId.toString());\n\t\t\n\t\treturn envs;\n\t}\n\t\n\tpublic static boolean isHookValid(File gitDir, String hookName) {\n        File hookFile = new File(gitDir, \"hooks/\" + hookName);\n        if (!hookFile.exists()) \n        \treturn false;\n        \n        try {\n\t\t\tString content = FileUtils.readFileToString(hookFile, Charset.defaultCharset());\n\t\t\tif (!content.contains(\"ONEDEV_HOOK_TOKEN\"))\n\t\t\t\treturn false;\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n        if (!hookFile.canExecute())\n        \treturn false;\n        \n        return true;\n\t}\n\t\n\tpublic static void checkHooks(File gitDir) {\n\t\tif (!isHookValid(gitDir, \"pre-receive\") \n\t\t\t\t|| !isHookValid(gitDir, \"post-receive\")) {\n            File hooksDir = new File(gitDir, \"hooks\");\n\n            File gitPreReceiveHookFile = new File(hooksDir, \"pre-receive\");\n            FileUtils.writeFile(gitPreReceiveHookFile, String.format(gitReceiveHook, \"git-prereceive-callback\"));\n            gitPreReceiveHookFile.setExecutable(true);\n            \n            File gitPostReceiveHookFile = new File(hooksDir, \"post-receive\");\n            FileUtils.writeFile(gitPostReceiveHookFile, String.format(gitReceiveHook, \"git-postreceive-callback\"));\n            gitPostReceiveHookFile.setExecutable(true);\n        }\n\t}\n\t\n}\n", "package io.onedev.server.migration;\n\nimport com.google.common.base.Preconditions;\nimport com.thoughtworks.xstream.core.JVM;\nimport io.onedev.commons.bootstrap.Bootstrap;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.FileUtils;\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.markdown.MarkdownManager;\nimport io.onedev.server.markdown.MentionParser;\nimport io.onedev.server.model.*;\nimport io.onedev.server.util.CryptoUtils;\nimport io.onedev.server.util.Pair;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang3.tuple.Triple;\nimport org.dom4j.Element;\nimport org.dom4j.Node;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport oshi.SystemInfo;\nimport oshi.hardware.HardwareAbstractionLayer;\n\nimport javax.annotation.Nullable;\nimport javax.inject.Singleton;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.text.MessageFormat;\nimport java.util.*;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n@Singleton\n@SuppressWarnings(\"unused\")\npublic class DataMigrator {\n\t\n\tprivate static final Logger logger = LoggerFactory.getLogger(DataMigrator.class);\n\t\n\tprivate void migrate1(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement branchRefElement = element.element(\"branchRef\");\n\t\t\t\t\tif (branchRefElement != null)\n\t\t\t\t\t\tbranchRefElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\n\tprivate void migrate2(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement gateKeeperElement = element.element(\"gateKeeper\");\n\t\t\t\t\tgateKeeperElement.detach();\n\t\t\t\t\telement.addElement(\"gateKeepers\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\n\tprivate void migrate3(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\tString name = element.getName();\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.commons\", \"com.gitplex.commons\");\n\t\t\t\tname = StringUtils.replace(name, \"com.pmease.gitplex\", \"com.gitplex.server\");\n\t\t\t\telement.setName(name);\n\t\t\t}\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\tif (settingElement != null) {\n\t\t\t\t\t\tString clazz = settingElement.attributeValue(\"class\");\n\t\t\t\t\t\tsettingElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\n\t\t\t\t\t\tElement gitConfigElement = settingElement.element(\"gitConfig\");\n\t\t\t\t\t\tif (gitConfigElement != null) {\n\t\t\t\t\t\t\tclazz = gitConfigElement.attributeValue(\"class\");\n\t\t\t\t\t\t\tgitConfigElement.addAttribute(\"class\", StringUtils.replace(clazz, \"com.pmease.gitplex\", \"com.gitplex.server\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdom.writeToFile(file, false);\n\t\t}\t\n\t}\n\t\n\tprivate void migrate4(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement avatarUploadDateElement = element.element(\"avatarUploadDate\");\n\t\t\t\t\tif (avatarUploadDateElement != null)\n\t\t\t\t\t\tavatarUploadDateElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate5(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\t\tif (settingElement != null)\n\t\t\t\t\t\t\tsettingElement.addElement(\"enableSSL\").setText(\"false\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate6(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate7(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.commons.hibernate.migration.VersionTable\", \n\t\t\t\t\t\t\"com.gitplex.server.model.ModelVersion\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.entity.support.IntegrationPolicy\", \n\t\t\t\t\t\t\"com.gitplex.server.model.support.IntegrationPolicy\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.entity.PullRequest_-IntegrationStrategy\", \n\t\t\t\t\t\t\"com.gitplex.server.model.PullRequest_-IntegrationStrategy\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.entity.\", \"com.gitplex.server.model.\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SpecifiedGit\", \"com.gitplex.server.git.config.SpecifiedGit\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.setting.SystemGit\", \"com.gitplex.server.git.config.SystemGit\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.setting.\", \"com.gitplex.server.model.support.setting.\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"com.gitplex.server.core.gatekeeper.\", \"com.gitplex.server.gatekeeper.\");\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t\t\n\t\t\t\tif (file.getName().equals(\"VersionTables.xml\")) {\n\t\t\t\t\tFileUtils.moveFile(file, new File(file.getParentFile(), \"ModelVersions.xml\"));\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrateIntegrationStrategy8(Element integrationStrategyElement) {\n\t\tif (integrationStrategyElement != null) {\n\t\t\tintegrationStrategyElement.setName(\"mergeStrategy\");\n\t\t\tswitch (integrationStrategyElement.getText()) {\n\t\t\tcase \"MERGE_ALWAYS\":\n\t\t\t\tintegrationStrategyElement.setText(\"ALWAYS_MERGE\");\n\t\t\t\tbreak;\n\t\t\tcase \"MERGE_WITH_SQUASH\":\n\t\t\t\tintegrationStrategyElement.setText(\"SQUASH_MERGE\");\n\t\t\t\tbreak;\n\t\t\tcase \"REBASE_SOURCE_ONTO_TARGET\":\n\t\t\t\tintegrationStrategyElement.setText(\"REBASE_MERGE\");\n\t\t\t\tbreak;\n\t\t\tcase \"REBASE_TARGET_ONTO_SOURCE\":\n\t\t\t\tintegrationStrategyElement.setText(\"MERGE_IF_NECESSARY\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate8(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\t\tsettingElement.addElement(\"curlConfig\")\n\t\t\t\t\t\t\t\t.addAttribute(\"class\", \"com.gitplex.server.git.config.SystemCurl\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Accounts.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"reviewEffort\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Depots.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"gateKeepers\").detach();\n\t\t\t\t\telement.element(\"integrationPolicies\").detach();\n\t\t\t\t\telement.addElement(\"branchProtections\");\n\t\t\t\t\telement.addElement(\"tagProtections\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement assigneeElement = element.element(\"assignee\");\n\t\t\t\t\tif (assigneeElement != null)\n\t\t\t\t\t\tassigneeElement.detach();\n\t\t\t\t\tmigrateIntegrationStrategy8(element.element(\"integrationStrategy\"));\n\t\t\t\t\tElement lastIntegrationPreviewElement = element.element(\"lastIntegrationPreview\");\n\t\t\t\t\tif (lastIntegrationPreviewElement != null) {\n\t\t\t\t\t\tlastIntegrationPreviewElement.setName(\"lastMergePreview\");\n\t\t\t\t\t\tElement integratedElement = lastIntegrationPreviewElement.element(\"integrated\");\n\t\t\t\t\t\tif (integratedElement != null)\n\t\t\t\t\t\t\tintegratedElement.setName(\"merged\");\n\t\t\t\t\t\tmigrateIntegrationStrategy8(lastIntegrationPreviewElement.element(\"integrationStrategy\"));\n\t\t\t\t\t}\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) {\n\t\t\t\t\t\tElement closeStatusElement = closeInfoElement.element(\"closeStatus\");\n\t\t\t\t\t\tif (closeStatusElement.getText().equals(\"INTEGRATED\"))\n\t\t\t\t\t\t\tcloseStatusElement.setText(\"MERGED\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReviewInvitations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestVerifications.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeComments.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentRelations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentReplys.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement mergeCommitHashElement = element.element(\"mergeCommitHash\");\n\t\t\t\t\tmergeCommitHashElement.setName(\"mergeBaseCommitHash\");\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate9(File dataDir, Stack<Integer> versions) {\n\t\ttry {\n\t\t\tMap<String, String> accountIdToName = new HashMap<>();\n\t\t\tSet<String> userIds = new HashSet<>();\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"Accounts.xml\")) {\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Accounts.xml\", \"Users.xml\"));\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Account\", \n\t\t\t\t\t\t\t\"com.gitplex.server.model.User\");\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\taccountIdToName.put(element.elementText(\"id\"), element.elementText(\"name\"));\n\t\t\t\t\t\tif (element.elementTextTrim(\"organization\").equals(\"true\")) {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tuserIds.add(element.elementText(\"id\"));\n\t\t\t\t\t\t\telement.element(\"organization\").detach();\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\n\t\t\t\t\t\t\telement.element(\"noSpaceName\").detach();\n\t\t\t\t\t\t\tif (element.element(\"noSpaceFullName\") != null)\n\t\t\t\t\t\t\t\telement.element(\"noSpaceFullName\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tlong lastUserAuthorizationId = 0;\n\t\t\tVersionedXmlDoc userAuthorizationsDom = new VersionedXmlDoc();\n\t\t\tElement userAuthorizationListElement = userAuthorizationsDom.addElement(\"list\");\n\t\t\t\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"Depots.xml\")) {\n\t\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"Depots.xml\", \"Projects.xml\"));\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\n\t\t\t\t\tString content = FileUtils.readFileToString(renamedFile, StandardCharsets.UTF_8);\n\t\t\t\t\tcontent = StringUtils.replace(content, \"com.gitplex.server.model.Depot\", \n\t\t\t\t\t\t\t\"com.gitplex.server.model.Project\");\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tString accountId = element.elementText(\"account\");\n\t\t\t\t\t\telement.element(\"account\").detach();\n\t\t\t\t\t\tString depotName = element.elementText(\"name\");\n\t\t\t\t\t\telement.element(\"name\").setText(accountIdToName.get(accountId) + \".\" + depotName);\n\t\t\t\t\t\tif (element.element(\"defaultPrivilege\") != null\t)\n\t\t\t\t\t\t\telement.element(\"defaultPrivilege\").detach();\n\t\t\t\t\t\t\n\t\t\t\t\t\tString adminId;\n\t\t\t\t\t\tif (userIds.contains(accountId)) {\n\t\t\t\t\t\t\tadminId = accountId;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tadminId = \"1\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tElement userAuthorizationElement = \n\t\t\t\t\t\t\t\tuserAuthorizationListElement.addElement(\"com.gitplex.server.model.UserAuthorization\");\n\t\t\t\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++lastUserAuthorizationId));\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"user\").setText(adminId);\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"project\").setText(element.elementText(\"id\"));\n\t\t\t\t\t\tuserAuthorizationElement.addElement(\"privilege\").setText(\"ADMIN\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdom.writeToFile(renamedFile, false);\n\t\t\t\t} else if (file.getName().startsWith(\"BranchWatchs.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tif (!userIds.contains(element.elementText(\"user\"))) {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.element(\"depot\").setName(\"project\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t} else if (file.getName().startsWith(\"Teams.xml\") \n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamMemberships.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"TeamAuthorizations.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"OrganizationMemberships.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"PullRequest\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"Review\")\n\t\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitation\")) {\n\t\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\n\t\t\t\t\t\t\tFile storageDir = new File(storagePath);\n\t\t\t\t\t\t\tFile repositoriesDir = new File(storageDir, \"repositories\");\n\t\t\t\t\t\t\tif (repositoriesDir.exists()) {\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storageDir, \"projects\");\n\t\t\t\t\t\t\t\tFileUtils.moveDirectory(repositoriesDir, projectsDir);\n\t\t\t\t\t\t\t\tfor (File projectDir: projectsDir.listFiles()) {\n\t\t\t\t\t\t\t\t\tFile infoDir = new File(projectDir, \"info\");\n\t\t\t\t\t\t\t\t\tif (infoDir.exists())\n\t\t\t\t\t\t\t\t\t\tFileUtils.deleteDir(infoDir);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (element.elementText(\"key\").equals(\"SECURITY\")) {\n\t\t\t\t\t\t\telement.element(\"setting\").addElement(\"enableAnonymousAccess\").setText(\"false\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\t\t\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t}\n\t\t\t}\t\n\t\t\tuserAuthorizationsDom.writeToFile(new File(dataDir, \"UserAuthorizations.xml\"), false);\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t}\n\t\n\tprivate void migrate10(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\") || file.getName().startsWith(\"CodeCommentReplys.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentStatusChanges.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement exprElement = branchProtectionElement.element(\"reviewAppointmentExpr\");\n\t\t\t\t\t\tif (exprElement != null)\n\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\texprElement = fileProtectionElement.element(\"reviewAppointmentExpr\");\n\t\t\t\t\t\t\tif (exprElement != null)\n\t\t\t\t\t\t\t\texprElement.setName(\"reviewRequirementSpec\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(new File(dataDir, \"Configs.xml\"));\n\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\tif (element.elementText(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\tString storagePath = element.element(\"setting\").elementText(\"storagePath\");\n\t\t\t\tFile codeCommentsFromWeiFeng = new File(storagePath, \"CodeComments.xml\");\n\t\t\t\tif (codeCommentsFromWeiFeng.exists()) {\n\t\t\t\t\tdom = VersionedXmlDoc.fromFile(codeCommentsFromWeiFeng);\n\t\t\t\t\tfor (Element commentElement: dom.getRootElement().elements()) {\n\t\t\t\t\t\tcommentElement.setName(\"com.gitplex.server.model.CodeComment\");\n\t\t\t\t\t\tcommentElement.element(\"depot\").setName(\"project\");\n\t\t\t\t\t\tcommentElement.element(\"resolved\").detach();\n\t\t\t\t\t\tcommentElement.element(\"commentPos\").setName(\"markPos\");\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(new File(dataDir, \"CodeComments.xml\"), false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate11(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tlong maxId = 0;\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong id = Long.parseLong(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (maxId < id)\n\t\t\t\t\t\tmaxId = id;\n\t\t\t\t}\n\t\t\t\tElement licenseConfigElement = dom.getRootElement().addElement(\"com.gitplex.server.model.Config\");\n\t\t\t\tlicenseConfigElement.addElement(\"id\").setText(String.valueOf(maxId+1));\n\t\t\t\tlicenseConfigElement.addElement(\"key\").setText(\"LICENSE\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\tprivate void migrate12(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"enabled\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.addElement(\"enabled\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\tprivate void migrate13(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \"gitplex\", \"turbodev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"GitPlex\", \"TurboDev\");\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate14(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element projectElement: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: projectElement.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.addElement(\"submitter\");\n\t\t\t\t\t\tsubmitterElement.addAttribute(\"class\", \"com.turbodev.server.model.support.submitter.Anyone\");\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"noCreation\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: projectElement.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\tprivate void migrate15(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \"com.turbodev\", \"io.onedev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"com/turbodev\", \"io/onedev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev.com\", \"onedev.io\");\n\t\t\t\tcontent = StringUtils.replace(content, \"turbodev\", \"onedev\");\n\t\t\t\tcontent = StringUtils.replace(content, \"TurboDev\", \"OneDev\");\n\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrateMergeStrategy16(Element mergeStrategyElement) {\n\t\tif (mergeStrategyElement != null) {\n\t\t\tmergeStrategyElement.setName(\"mergeStrategy\");\n\t\t\tswitch (mergeStrategyElement.getText()) {\n\t\t\tcase \"ALWAYS_MERGE\":\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT\");\n\t\t\t\tbreak;\n\t\t\tcase \"MERGE_IF_NECESSARY\":\n\t\t\t\tmergeStrategyElement.setText(\"CREATE_MERGE_COMMIT_IF_NECESSARY\");\n\t\t\t\tbreak;\n\t\t\tcase \"SQUASH_MERGE\":\n\t\t\t\tmergeStrategyElement.setText(\"SQUASH_SOURCE_BRANCH_COMMITS\");\n\t\t\t\tbreak;\n\t\t\tcase \"REBASE_MERGE\":\n\t\t\t\tmergeStrategyElement.setText(\"REBASE_SOURCE_BRANCH_COMMITS\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/*\n\t * Migrate from 1.0 to 2.0\n\t */\n\tprivate void migrate16(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> codeCommentReplyCounts = new HashMap<>();\n\t\tMap<String, String> userNames = new HashMap<>();\n\t\tMap<String, Set<String>> requestCodeComments = new HashMap<>();\n\t\tMap<String, Integer> requestCommentCounts = new HashMap<>();\n\t\tSet<String> openRequests = new HashSet<>();\n\t\tMap<String, String> reviewRequirements = new HashMap<>(); \n\t\t \n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\n\t\t\t\t\tif (fullNameElement != null)\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), fullNameElement.getText());\n\t\t\t\t\telse\n\t\t\t\t\t\tuserNames.put(element.elementTextTrim(\"id\"), element.elementText(\"name\"));\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\n\t\t\t\t\tif (replyCount == null)\n\t\t\t\t\t\treplyCount = 0;\n\t\t\t\t\treplyCount++;\n\t\t\t\t\tcodeCommentReplyCounts.put(commentId, replyCount);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tSet<String> codeComments = requestCodeComments.get(requestId);\n\t\t\t\t\tif (codeComments == null) {\n\t\t\t\t\t\tcodeComments = new HashSet<>();\n\t\t\t\t\t\trequestCodeComments.put(requestId, codeComments);\n\t\t\t\t\t}\n\t\t\t\t\tcodeComments.add(commentId);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(commentId);\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\trequestCommentCounts.put(commentId, commentCount);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"closeInfo\") == null) {\n\t\t\t\t\t\topenRequests.add(element.elementTextTrim(\"id\"));\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString projectId = element.elementTextTrim(\"id\");\n\t\t\t\t\tStringBuilder builder = new StringBuilder();\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) \n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\t\tbuilder.append(reviewRequirementSpecElement.getText()).append(\";\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treviewRequirements.put(projectId, builder.toString());\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Map.Entry<String, Set<String>> entry: requestCodeComments.entrySet()) {\n\t\t\tInteger commentCount = requestCommentCounts.get(entry.getKey());\n\t\t\tif (commentCount == null)\n\t\t\t\tcommentCount = 0;\n\t\t\tfor (String commentId: entry.getValue()) {\n\t\t\t\tcommentCount++;\n\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(commentId);\n\t\t\t\tif (replyCount != null)\n\t\t\t\t\tcommentCount += replyCount;\n\t\t\t}\n\t\t\trequestCommentCounts.put(entry.getKey(), commentCount);\n\t\t}\n\t\t\n\t\tVersionedXmlDoc requestReviewsDOM = new VersionedXmlDoc();\n\t\tElement requestReviewListElement = requestReviewsDOM.addElement(\"list\");\n\t\t\n\t\tVersionedXmlDoc configurationsDOM = new VersionedXmlDoc();\n\t\tElement configurationListElement = configurationsDOM.addElement(\"list\");\n\t\tMap<String, Map<String, Long>> projectConfigurations = new HashMap<>();\n\t\tlong configurationCount = 0;\n\t\t\n\t\tint reviewCount = 0;\n\t\t\n\t\tVersionedXmlDoc requestBuildsDOM = new VersionedXmlDoc();\n\t\tElement requestBuildListElement = requestBuildsDOM.addElement(\"list\");\n\t\tint requestBuildCount = 0;\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"BranchWatches.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestReferences.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestStatusChanges.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestTasks.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"ReviewInvitations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"Reviews.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\") || file.getName().startsWith(\"GroupAuthorizations.xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \"ADMIN\", \"ADMINISTRATION\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \"WRITE\", \"CODE_WRITE\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \"READ\", \"CODE_READ\");\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger replyCount = codeCommentReplyCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (replyCount == null)\n\t\t\t\t\t\treplyCount = 0;\n\t\t\t\t\telement.addElement(\"replyCount\").setText(String.valueOf(replyCount));\n\t\t\t\t\t\n\t\t\t\t\tElement dateElement = element.element(\"date\");\n\t\t\t\t\tdateElement.setName(\"createDate\");\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\n\t\t\t\t\tif (lastEventElement != null) {\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\n\t\t\t\t\t\tlastEventElement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdateDateElement.setText(dateElement.getText());\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrateMergeStrategy16(element.element(\"mergeStrategy\"));\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\n\t\t\t\t\tif (lastMergePreviewElement != null) {\n\t\t\t\t\t\tmigrateMergeStrategy16(lastMergePreviewElement.element(\"mergeStrategy\"));\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tInteger commentCount = requestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.addElement(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t\t\n\t\t\t\t\tElement lastCodeCommentEventDateElement = element.element(\"lastCodeCommentEventDate\");\n\t\t\t\t\tif (lastCodeCommentEventDateElement != null)\n\t\t\t\t\t\tlastCodeCommentEventDateElement.setName(\"lastCodeCommentActivityDate\");\n\t\t\t\t\t\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) {\n\t\t\t\t\t\tElement closedByElement = closeInfoElement.element(\"closedBy\");\n\t\t\t\t\t\tif (closedByElement != null)\n\t\t\t\t\t\t\tclosedByElement.setName(\"user\");\n\t\t\t\t\t\tElement closedByNameElement = closeInfoElement.element(\"closedByName\");\n\t\t\t\t\t\tif (closedByNameElement != null)\n\t\t\t\t\t\t\tclosedByNameElement.setName(\"userName\");\n\t\t\t\t\t\tcloseInfoElement.element(\"closeDate\").setName(\"date\");\n\t\t\t\t\t\tcloseInfoElement.element(\"closeStatus\").setName(\"status\");\n\t\t\t\t\t}\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\n\t\t\t\t\tElement updateDateElement = element.addElement(\"updateDate\");\n\t\t\t\t\tupdateDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\tElement lastEventElement = element.element(\"lastEvent\");\n\t\t\t\t\tif (lastEventElement != null) {\n\t\t\t\t\t\tupdateDateElement.setText(lastEventElement.elementText(\"date\"));\n\t\t\t\t\t\tlastEventElement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdateDateElement.setText(submitDateElement.getText());\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Configs.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.security.authenticator.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.authenticator.\");\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.Setting\");\n\t\t\t\t\tElement settingElement = element.element(\"setting\");\n\t\t\t\t\tif (settingElement != null) {\n\t\t\t\t\t\tsettingElement.setName(\"value\");\n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"AUTHENTICATOR\")) {\n\t\t\t\t\t\t\tElement authenticatorElement = settingElement.elementIterator().next();\n\t\t\t\t\t\t\tsettingElement.addAttribute(\"class\", authenticatorElement.getName());\n\t\t\t\t\t\t\tfor (Element fieldElement: authenticatorElement.elements()) {\n\t\t\t\t\t\t\t\tif (!fieldElement.getName().equals(\"defaultGroupNames\")) {\n\t\t\t\t\t\t\t\t\tfieldElement.detach();\n\t\t\t\t\t\t\t\t\tsettingElement.add(fieldElement);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tauthenticatorElement.detach();\n\t\t\t\t\t\t\tsettingElement.addElement(\"canCreateProjects\").setText(\"true\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(file.getParentFile(), file.getName().replace(\"Config\", \"Setting\")), false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestWatchs.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement reasonElement = element.element(\"reason\");\n\t\t\t\t\tif (reasonElement != null)\n\t\t\t\t\t\treasonElement.detach();\n\t\t\t\t\tElement ignoreElement = element.element(\"ignore\");\n\t\t\t\t\tignoreElement.setName(\"watching\");\n\t\t\t\t\tignoreElement.setText(String.valueOf(!Boolean.parseBoolean(ignoreElement.getTextTrim())));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"uuid\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString project = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement publicReadElement = element.element(\"publicRead\");\n\t\t\t\t\tif (publicReadElement.getTextTrim().equals(\"true\")) \n\t\t\t\t\t\telement.addElement(\"defaultPrivilege\").setText(\"CODE_READ\");\n\t\t\t\t\tpublicReadElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.element(\"verifyMerges\").setName(\"buildMerges\");\n\t\t\t\t\t\tElement verificationsElement = branchProtectionElement.element(\"verifications\");\n\t\t\t\t\t\tverificationsElement.setName(\"configurations\");\n\t\t\t\t\t\tfor (Element verificationElement: verificationsElement.elements()) {\n\t\t\t\t\t\t\tString verification = verificationElement.getText();\n\t\t\t\t\t\t\tMap<String, Long> configurations = projectConfigurations.get(project);\n\t\t\t\t\t\t\tif (configurations == null) {\n\t\t\t\t\t\t\t\tconfigurations = new HashMap<>();\n\t\t\t\t\t\t\t\tprojectConfigurations.put(project, configurations);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tLong configurationId = configurations.get(verification);\n\t\t\t\t\t\t\tif (configurationId == null) {\n\t\t\t\t\t\t\t\tconfigurationId = ++configurationCount;\n\t\t\t\t\t\t\t\tconfigurations.put(verification, configurationId);\n\t\t\t\t\t\t\t\tElement configurationElement = configurationListElement.addElement(\"io.onedev.server.model.Configuration\");\n\t\t\t\t\t\t\t\tconfigurationElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"id\").setText(String.valueOf(configurationId));\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"project\").setText(project);\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"name\").setText(verification);\n\t\t\t\t\t\t\t\tconfigurationElement.addElement(\"buildCleanupRule\").addAttribute(\"class\", \"io.onedev.server.model.support.configuration.DoNotCleanup\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfor (String request: openRequests) {\n\t\t\t\t\t\t\t\tElement requestBuildElement = requestBuildListElement.addElement(\"io.onedev.server.model.PullRequestBuild\");\n\t\t\t\t\t\t\t\trequestBuildElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"id\").setText(String.valueOf(++requestBuildCount));\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"request\").setText(request);\n\t\t\t\t\t\t\t\trequestBuildElement.addElement(\"configuration\").setText(String.valueOf(configurationId));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement reviewRequirementSpecElement = branchProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\tif (reviewRequirementSpecElement != null) {\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\treviewRequirementSpecElement = fileProtectionElement.element(\"reviewRequirementSpec\");\n\t\t\t\t\t\t\treviewRequirementSpecElement.setName(\"reviewRequirement\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\tElement submitterElement = tagProtectionElement.element(\"submitter\");\n\t\t\t\t\t\tString submitterClass = submitterElement.attributeValue(\"class\");\n\t\t\t\t\t\tsubmitterClass = submitterClass.replace(\"io.onedev.server.model.support.submitter.\", \n\t\t\t\t\t\t\t\t\"io.onedev.server.model.support.usermatcher.\");\n\t\t\t\t\t\tsubmitterElement.attribute(\"class\").setValue(submitterClass);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\n\t\trequestReviewsDOM.writeToFile(new File(dataDir, \"PullRequestReviews.xml\"), false);\n\t\tconfigurationsDOM.writeToFile(new File(dataDir, \"Configurations.xml\"), false);\n\t\trequestBuildsDOM.writeToFile(new File(dataDir, \"PullRequestBuilds.xml\"), false);\n\t}\n\t\n\tprivate void migrate17(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issue\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement issueWorkflowElement = element.element(\"issueWorkflow\");\n\t\t\t\t\tif (issueWorkflowElement != null)\n\t\t\t\t\t\tissueWorkflowElement.detach();\n\t\t\t\t\tElement savedIssueQueriesElement = element.element(\"savedIssueQueries\");\n\t\t\t\t\tif (savedIssueQueriesElement != null)\n\t\t\t\t\t\tsavedIssueQueriesElement.detach();\n\t\t\t\t\tElement issueListFieldsElement = element.element(\"issueListFields\");\n\t\t\t\t\tif (issueListFieldsElement != null)\n\t\t\t\t\t\tissueListFieldsElement.detach();\n\t\t\t\t\tElement issueBoardsElement = element.element(\"issueBoards\");\n\t\t\t\t\tif (issueBoardsElement != null)\n\t\t\t\t\t\tissueBoardsElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate18(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate19(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement commitMessageTransformsElement = element.addElement(\"commitMessageTransforms\");\n\t\t\t\t\tElement commitMessageTransformSettingElement = element.element(\"commitMessageTransformSetting\");\n\t\t\t\t\tif (commitMessageTransformSettingElement != null) {\n\t\t\t\t\t\tcommitMessageTransformSettingElement.detach();\n\t\t\t\t\t\tcommitMessageTransformSettingElement.setName(\"io.onedev.server.model.support.CommitMessageTransform\");\n\t\t\t\t\t\tcommitMessageTransformsElement.add(commitMessageTransformSettingElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate20(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements()) {\n\t\t\t\t\t\t\t\tfieldElement.addElement(\"canBeChangedBy\").addAttribute(\"class\", \"io.onedev.server.model.support.usermatcher.Anyone\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate21(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.element(\"branch\").setName(\"branches\");\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) {\n\t\t\t\t\t\t\tfileProtectionElement.element(\"path\").setName(\"paths\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.element(\"tag\").setName(\"tags\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\")) {\n\t\t\t\t\t\telement.element(\"value\").addAttribute(\"class\", \"io.onedev.commons.utils.license.LicenseDetail\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate22(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueFieldUnarys.xml\")) {\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\"IssueFieldUnarys\", \"IssueFieldEntitys\"));\n\t\t\t\ttry {\n\t\t\t\t\tFileUtils.moveFile(file, renamedFile);\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(renamedFile);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueFieldEntity\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(renamedFile, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate23(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Build2s.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement runInstanceIdElement = element.element(\"runInstanceId\");\n\t\t\t\t\tif (runInstanceIdElement != null)\n\t\t\t\t\t\trunInstanceIdElement.detach();\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\n\t\t\t\t\tif (errorMessageElement != null)\n\t\t\t\t\t\terrorMessageElement.setName(\"statusMessage\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"uuid\").detach();\n\t\t\t\t\tif (element.element(\"issueSetting\") == null)\n\t\t\t\t\t\telement.addElement(\"issueSetting\");\n\t\t\t\t\tif (element.element(\"savedCommitQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedCommitQueries\");\n\t\t\t\t\tif (element.element(\"savedPullRequestQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedPullRequestQueries\");\n\t\t\t\t\tif (element.element(\"savedCodeCommentQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedCodeCommentQueries\");\n\t\t\t\t\tif (element.element(\"savedBuildQueries\") == null) \n\t\t\t\t\t\telement.addElement(\"savedBuildQueries\");\n\t\t\t\t\tif (element.element(\"webHooks\") == null) \n\t\t\t\t\t\telement.addElement(\"webHooks\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"uuid\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate String escapeValue24(String value) {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tfor (int i=0; i<value.length(); i++) {\n\t\t\tchar ch = value.charAt(i);\n\t\t\tif (\"\\\\()\".indexOf(ch) != -1)\n\t\t\t\tbuilder.append(\"\\\\\");\n\t\t\tbuilder.append(ch);\n\t\t}\n\t\treturn builder.toString();\n\t}\n\t\n\tprivate void migrateUserMatcher24(Element userMatcherElement) {\n\t\tString userMatcher;\n\t\tString userMatcherClass = userMatcherElement.attributeValue(\"class\");\n\t\tif (userMatcherClass.contains(\"Anyone\")) {\n\t\t\tuserMatcher = \"anyone\";\n\t\t} else if (userMatcherClass.contains(\"CodeWriters\")) {\n\t\t\tuserMatcher = \"code writers\";\n\t\t} else if (userMatcherClass.contains(\"CodeReaders\")) {\n\t\t\tuserMatcher = \"code readers\";\n\t\t} else if (userMatcherClass.contains(\"IssueReaders\")) {\n\t\t\tuserMatcher = \"issue readers\";\n\t\t} else if (userMatcherClass.contains(\"ProjectAdministrators\")) {\n\t\t\tuserMatcher = \"project administrators\";\n\t\t} else if (userMatcherClass.contains(\"SpecifiedUser\")) {\n\t\t\tuserMatcher = \"user(\" + escapeValue24(userMatcherElement.elementText(\"userName\").trim()) + \")\";\n\t\t} else {\n\t\t\tuserMatcher = \"group(\" + escapeValue24(userMatcherElement.elementText(\"groupName\").trim()) + \")\";\n\t\t}\n\t\tuserMatcherElement.clearContent();\n\t\tuserMatcherElement.remove(userMatcherElement.attribute(\"class\"));\n\t\tuserMatcherElement.setText(userMatcher);\n\t}\n\t\n\tprivate void migrateTransitionSpecsElement24(Element transitionSpecsElement) {\n\t\tfor (Element transitionElement: transitionSpecsElement.elements()) {\n\t\t\tElement triggerElement = transitionElement.element(\"trigger\");\n\t\t\tif (triggerElement.attributeValue(\"class\").contains(\"PressButtonTrigger\"))\n\t\t\t\tmigrateUserMatcher24(triggerElement.element(\"authorized\"));\n\t\t}\n\t}\n\t\n\tprivate void migrate24(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tmigrateTransitionSpecsElement24(valueElement.element(\"defaultTransitionSpecs\"));\n\t\t\t\t\t\t\tfor (Element fieldElement: valueElement.element(\"fieldSpecs\").elements())\n\t\t\t\t\t\t\t\tmigrateUserMatcher24(fieldElement.element(\"canBeChangedBy\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\n\t\t\t\t\tElement transitionsElement = issueSettingElement.element(\"transitionSpecs\");\n\t\t\t\t\tif (transitionsElement != null) \n\t\t\t\t\t\tmigrateTransitionSpecsElement24(transitionsElement);\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\n\t\t\t\t\t\tmigrateUserMatcher24(branchProtectionElement.element(\"submitter\"));\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\n\t\t\t\t\t\tmigrateUserMatcher24(tagProtectionElement.element(\"submitter\"));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// from 2.0 to 3.0\n\tprivate void migrate25(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = content.replace(\".support.setting.\", \".support.administration.\");\n\t\t\t\tcontent = content.replace(\".support.authenticator.\", \".support.administration.authenticator.\");\n\t\t\t\t\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \n\t\t\t\t\tif (key.equals(\"ISSUE\") || key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else if (key.equals(\"BACKUP\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement folderElement = valueElement.element(\"folder\");\n\t\t\t\t\t\t\tif (folderElement != null)\n\t\t\t\t\t\t\t\tfolderElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"SECURITY\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.element(\"enableAnonymousAccess\").setText(\"false\");\n\t\t\t\t\t} else if (key.equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement storagePathElement = valueElement.element(\"storagePath\");\n\t\t\t\t\t\t\tString storagePath = storagePathElement.getText();\n\t\t\t\t\t\t\tstoragePathElement.detach();\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tFile projectsDir = new File(storagePath, \"projects\");\n\t\t\t\t\t\t\t\tif (projectsDir.exists()) {\n\t\t\t\t\t\t\t\t\tPath target = projectsDir.toPath();\n\t\t\t\t\t\t\t\t    File linkDir = new File(Bootstrap.installDir, \"site/projects\");\n\t\t\t\t\t\t\t\t    if (linkDir.exists())\n\t\t\t\t\t\t\t\t    \tthrow new ExplicitException(\"Directory already exists: \" + linkDir);\n\t\t\t\t\t\t\t\t    Files.createSymbolicLink(linkDir.toPath(), target);\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (IOException e) {\n\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"AUTHENTICATOR\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement defaultGroupNamesElement = valueElement.element(\"defaultGroupNames\");\n\t\t\t\t\t\t\tif (defaultGroupNamesElement != null)\n\t\t\t\t\t\t\t\tdefaultGroupNamesElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"canCreateProjects\").setName(\"createProjects\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\telement.addElement(\"userProjectQueries\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"UserAuthorizations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement privilegeElement = element.element(\"privilege\");\n\t\t\t\t\tString privilege = privilegeElement.getTextTrim();\n\t\t\t\t\tprivilegeElement.detach();\n\n\t\t\t\t\tString roleId;\n\t\t\t\t\tswitch (privilege) {\n\t\t\t\t\tcase \"ISSUE_READ\":\n\t\t\t\t\t\troleId = \"4\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"CODE_READ\":\n\t\t\t\t\t\troleId = \"3\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"CODE_WRITE\":\n\t\t\t\t\t\troleId = \"2\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\troleId = \"1\";\n\t\t\t\t\t}\n\t\t\t\t\telement.addElement(\"role\").setText(roleId);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.element(\"numberStr\").detach();\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement rangeElement = element.element(\"markPos\").element(\"range\");\n\t\t\t\t\trangeElement.element(\"beginLine\").setName(\"fromRow\");\n\t\t\t\t\trangeElement.element(\"endLine\").setName(\"toRow\");\n\t\t\t\t\trangeElement.element(\"beginChar\").setName(\"fromColumn\");\n\t\t\t\t\trangeElement.element(\"endChar\").setName(\"toColumn\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = content.replace(\"DO_NOT_MERGE\", \"CREATE_MERGE_COMMIT\");\n\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromXML(content);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.element(\"numberStr\").detach();\n\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement defaultPrivilegeElement = element.element(\"defaultPrivilege\");\n\t\t\t\t\tif (defaultPrivilegeElement != null)\n\t\t\t\t\t\tdefaultPrivilegeElement.detach();\n\t\t\t\t\telement.addElement(\"owner\").setText(\"1\");\n\t\t\t\t\t\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tElement submitterElement = branchProtectionElement.element(\"submitter\");\n\t\t\t\t\t\tsubmitterElement.setName(\"user\");\n\t\t\t\t\t\tsubmitterElement.setText(\"anyone\");\n\t\t\t\t\t\tbranchProtectionElement.element(\"configurations\").detach();\n\t\t\t\t\t\tbranchProtectionElement.element(\"buildMerges\").detach();\n\t\t\t\t\t\tbranchProtectionElement.addElement(\"jobNames\");\n\t\t\t\t\t\tfor (Element fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements())\n\t\t\t\t\t\t\tfileProtectionElement.addElement(\"jobNames\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\n\t\t\t\t\t\ttagProtectionElement.element(\"submitter\").setName(\"user\");\n\t\t\t\t\telement.addElement(\"secrets\");\n\t\t\t\t\telement.element(\"commitMessageTransforms\").detach();\n\t\t\t\t\telement.element(\"webHooks\").detach();\n\t\t\t\t\telement.addElement(\"webHooks\");\n\t\t\t\t\telement.element(\"issueSetting\").detach();\n\t\t\t\t\telement.addElement(\"issueSetting\");\n\t\t\t\t\t\n\t\t\t\t\telement.element(\"savedBuildQueries\").detach();\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"buildsToPreserve\").setText(\"all\");\n\t\t\t\t\t\n\t\t\t\t\telement.element(\"savedCommitQueries\").detach();\n\t\t\t\t\telement.element(\"savedCodeCommentQueries\").detach();\n\t\t\t\t\telement.element(\"savedPullRequestQueries\").detach();\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"pullRequestSetting\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"Configurations.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"IssueQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestChanges.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CodeCommentQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestWatchs.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"IssueWatchs.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"CommitQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"PullRequestBuilds.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"BuildQuerySettings.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"Builds.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"Build2s.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"BuildDependences.xml\")\n\t\t\t\t\t|| file.getName().startsWith(\"BuildParams.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"IssueFieldEntitys.xml\")) {\n\t\t\t\tString content;\n\t\t\t\ttry {\n\t\t\t\t\tcontent = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\tcontent = content.replace(\"io.onedev.server.model.IssueFieldEntity\", \n\t\t\t\t\t\t\"io.onedev.server.model.IssueField\");\n\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\t\n\t\t\t\tFile renamedFile = new File(dataDir, file.getName().replace(\n\t\t\t\t\t\t\"IssueFieldEntitys.xml\", \"IssueFields.xml\"));\n\t\t\t\tFileUtils.writeFile(renamedFile, content, StandardCharsets.UTF_8.name());\n\t\t\t}\n\t\t}\n        try (InputStream is = getClass().getResourceAsStream(\"migrate25_roles.xml\")) {\n        \tPreconditions.checkNotNull(is);\n        \tFileUtils.writeFile(\n        \t\t\tnew File(dataDir, \"Roles.xml\"), \n        \t\t\tStringUtils.join(IOUtils.readLines(is, StandardCharsets.UTF_8.name()), \"\\n\"));\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\t\t\n\t}\n\t\n\tprivate void migrate26(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement createdAtElement = element.element(\"createdAt\");\n\t\t\t\t\tcreatedAtElement.setName(\"createDate\");\n\t\t\t\t\telement.addElement(\"updateDate\").setText(createdAtElement.getText());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \t\t\n\t\t}\n\t}\n\t\n\tprivate void migrate27(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.element(\"buildsToPreserve\").detach();\n\t\t\t\t\tbuildSettingElement.addElement(\"preservations\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate28(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"secrets\").detach();\n\t\t\t\t\telement.element(\"buildSetting\").detach();\n\t\t\t\t\tElement buildSettingElement = element.addElement(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"secrets\");\n\t\t\t\t\tbuildSettingElement.addElement(\"buildPreservations\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate29(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"webHooks\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements())\n\t\t\t\t\t\tbranchProtectionElement.element(\"user\").setName(\"userMatch\");\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements())\n\t\t\t\t\t\ttagProtectionElement.element(\"user\").setName(\"userMatch\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate30(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) \n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate31(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement editableIssueFieldsElement = element.element(\"editableIssueFields\");\n\t\t\t\t\teditableIssueFieldsElement.detach();\n\t\t\t\t\telement.addElement(\"editableIssueFields\").addAttribute(\n\t\t\t\t\t\t\t\"class\", \"io.onedev.server.model.support.role.AllIssueFields\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate32(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\"); \n\t\t\t\t\tif (key.equals(\"ISSUE\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) { \n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate33(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\n\t\t\t\t\t\tbranchProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\n\t\t\t\t\t\tbranchProtectionElement.element(\"noForcedPush\").setName(\"preventForcedPush\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.element(\"noCreation\").setName(\"preventCreation\");\n\t\t\t\t\t\ttagProtectionElement.element(\"noDeletion\").setName(\"preventDeletion\");\n\t\t\t\t\t\ttagProtectionElement.element(\"noUpdate\").setName(\"preventUpdate\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate34(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\n\t\t\t\t\t\t\t\tElement categoryElement = stateElement.element(\"category\");\n\t\t\t\t\t\t\t\tstateElement.addElement(\"done\").setText(String.valueOf(categoryElement.getTextTrim().equals(\"CLOSED\")));\n\t\t\t\t\t\t\t\tcategoryElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"numOfOpenIssues\").setName(\"numOfIssuesTodo\");\n\t\t\t\t\telement.element(\"numOfClosedIssues\").setName(\"numOfIssuesDone\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate35(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"updateDate\").detach();\n\t\t\t\t\tElement createDateElement = element.element(\"createDate\");\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\n\t\t\t\t\tElement userElement = element.element(\"user\");\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\n\t\t\t\t\tif (userElement != null)\n\t\t\t\t\t\tlastUpdateUserElement.setText(userElement.getTextTrim());\n\t\t\t\t\telse\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"created\");\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\n\t\t\t\t\tdateElement.addAttribute(\"class\", createDateElement.attributeValue(\"class\"));\n\t\t\t\t\tdateElement.setText(createDateElement.getTextTrim());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"updateDate\").detach();\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\n\t\t\t\t\tif (submitterElement != null)\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\n\t\t\t\t\telse\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"updateDate\").detach();\n\t\t\t\t\tElement submitDateElement = element.element(\"submitDate\");\n\t\t\t\t\tElement lastUpdateElement = element.addElement(\"lastUpdate\");\n\t\t\t\t\tElement submitterElement = element.element(\"submitter\");\n\t\t\t\t\tElement lastUpdateUserElement = lastUpdateElement.addElement(\"user\");\n\t\t\t\t\tif (submitterElement != null)\n\t\t\t\t\t\tlastUpdateUserElement.setText(submitterElement.getTextTrim());\n\t\t\t\t\telse\n\t\t\t\t\t\tlastUpdateUserElement.setText(\"1\");\n\t\t\t\t\tlastUpdateElement.addElement(\"activity\").setText(\"opened\");\n\t\t\t\t\tElement dateElement = lastUpdateElement.addElement(\"date\");\n\t\t\t\t\tdateElement.addAttribute(\"class\", submitDateElement.attributeValue(\"class\"));\n\t\t\t\t\tdateElement.setText(submitDateElement.getTextTrim());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement namedQueriesElement = buildSettingElement.element(\"namedQueries\");\n\t\t\t\t\tif (namedQueriesElement != null) {\n\t\t\t\t\t\tfor (Element queryElement: namedQueriesElement.elements())\n\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t\t}\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\n\t\t\t\t\t\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\tElement buildBranchesElement = tagProtectionElement.element(\"buildBranches\");\n\t\t\t\t\t\tif (buildBranchesElement != null)\n\t\t\t\t\t\t\tbuildBranchesElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element queryElement: element.element(\"userBuildQueries\").elements())\n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement secretsElement = buildSettingElement.element(\"secrets\");\n\t\t\t\t\tsecretsElement.setName(\"jobSecrets\");\n\t\t\t\t\tfor (Element secretElement: secretsElement.elements())\n\t\t\t\t\t\tsecretElement.setName(\"io.onedev.server.model.support.build.JobSecret\");\n\t\t\t\t\tfor (Element buildPreservationElement: buildSettingElement.element(\"buildPreservations\").elements())\n\t\t\t\t\t\tbuildPreservationElement.setName(\"io.onedev.server.model.support.build.BuildPreservation\");\n\t\t\t\t\tbuildSettingElement.addElement(\"actionAuthorizations\");\n\t\t\t\t\tElement passwordElement = element.element(\"password\");\n\t\t\t\t\tif (passwordElement == null)\n\t\t\t\t\t\telement.addElement(\"password\").setText(\"external_managed\");\n\t\t\t\t\telse if (StringUtils.isBlank(passwordElement.getText()))\n\t\t\t\t\t\tpasswordElement.setText(\"external_managed\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element queryElement: element.element(\"userQueries\").elements()) \n\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element stateElement: valueElement.element(\"stateSpecs\").elements()) {\n\t\t\t\t\t\t\t\tstateElement.element(\"done\").detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"BUILD\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element queryElement: valueElement.element(\"namedQueries\").elements()) \n\t\t\t\t\t\t\t\tqueryElement.setName(\"io.onedev.server.model.support.build.NamedBuildQuery\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Milestones.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"numOfIssuesTodo\").detach();\n\t\t\t\t\telement.element(\"numOfIssuesDone\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\n\t// Database schema changed\n\tprivate void migrate36(File dataDir, Stack<Integer> versions) {\t\n\t}\n\t\n\tprivate void migrate37(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"LICENSE\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate Long getForkedRoot38(Map<Long, Long> forkedFroms, Long projectId) {\n\t\tLong forkedFrom = forkedFroms.get(projectId);\n\t\tif (forkedFrom != null)\n\t\t\treturn getForkedRoot38(forkedFroms, forkedFrom);\n\t\telse\n\t\t\treturn projectId;\n\t}\n\t\n\t// from 3.0.10 to 3.0.11\n\tprivate void migrate38(File dataDir, Stack<Integer> versions) {\n\t\tMap<Long, Long> forkedFroms = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().contains(\".xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.pullrequest.NamedPullRequestQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.issue.NamedIssueQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.NamedBuildQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.NamedProjectQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.elementTextTrim(\"query\").equals(\"all\"))\n\t\t\t\t\t\t\telement.element(\"query\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//issueQuery\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tif (element.getTextTrim().equals(\"all\"))\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//io.onedev.server.model.support.build.BuildPreservation\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tElement conditionElement = element.element(\"condition\");\n\t\t\t\t\t\tif (conditionElement.getTextTrim().equals(\"all\"))\n\t\t\t\t\t\t\tconditionElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (Node node: dom.selectNodes(\"//listFields\")) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tElement stateElement = element.addElement(\"string\");\n\t\t\t\t\t\tstateElement.setText(\"State\");\n\t\t\t\t\t\tstateElement.detach();\n\t\t\t\t\t\telement.elements().add(0, stateElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t\tif (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tString className = dataElement.attributeValue(\"class\");\n\t\t\t\t\tif (className.contains(\"IssueCommittedData\") || className.contains(\"IssuePullRequest\")) \n\t\t\t\t\t\telement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"id\"));\n\t\t\t\t\tElement forkedFromElement = element.element(\"forkedFrom\");\n\t\t\t\t\tif (forkedFromElement != null)\n\t\t\t\t\t\tforkedFroms.put(projectId, Long.valueOf(forkedFromElement.getTextTrim()));\n\t\t\t\t\telse\n\t\t\t\t\t\tforkedFroms.put(projectId, null);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.addElement(\"enableStartTLS\").setText(\"true\");\n\t\t\t\t\t\t\tvalueElement.element(\"enableSSL\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tMap<Long, Long> forkedRoots = new HashMap<>();\n\t\tfor (Long projectId: forkedFroms.keySet()) {\n\t\t\tforkedRoots.put(projectId, getForkedRoot38(forkedFroms, projectId));\n\t\t}\n\t\t\n\t\tMap<Long, Set<Long>> issueNumbers = new HashMap<>();\n\t\tMap<Long, Set<Long>> buildNumbers = new HashMap<>();\n\t\tMap<Long, Set<Long>> pullRequestNumbers = new HashMap<>();\n\t\t\n\t\tfor (Long forkedRoot: forkedRoots.values()) {\n\t\t\tissueNumbers.put(forkedRoot, new HashSet<>());\n\t\t\tbuildNumbers.put(forkedRoot, new HashSet<>());\n\t\t\tpullRequestNumbers.put(forkedRoot, new HashSet<>());\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tLong issueNumber = Long.valueOf(element.elementTextTrim(\"number\"));\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\n\t\t\t\t\t\tissueNumbers.get(projectId).add(issueNumber); \n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tLong buildNumber = Long.valueOf(element.elementTextTrim(\"number\"));\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\n\t\t\t\t\t\tbuildNumbers.get(projectId).add(buildNumber);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tLong requestNumber = Long.valueOf(element.elementTextTrim(\"number\"));\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\n\t\t\t\t\tif (projectId.equals(forkedRoots.get(projectId)))\n\t\t\t\t\t\tpullRequestNumbers.get(projectId).add(requestNumber);\n\t\t\t\t}\n\t\t\t} \n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement numberElement = element.element(\"number\");\n\t\t\t\t\tLong issueNumber = Long.valueOf(numberElement.getTextTrim());\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\n\t\t\t\t\t\tSet<Long> issueNumbersOfForkedRoot = issueNumbers.get(forkedRoot);\n\t\t\t\t\t\tif (issueNumbersOfForkedRoot.contains(issueNumber)) {\n\t\t\t\t\t\t\tissueNumber = Collections.max(issueNumbersOfForkedRoot) + 1;\n\t\t\t\t\t\t\tnumberElement.setText(issueNumber.toString());\n\t\t\t\t\t\t} \n\t\t\t\t\t\tissueNumbersOfForkedRoot.add(issueNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement numberElement = element.element(\"number\");\n\t\t\t\t\tLong buildNumber = Long.valueOf(numberElement.getTextTrim());\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"project\"));\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\n\t\t\t\t\t\tSet<Long> buildNumbersOfForkedRoot = buildNumbers.get(forkedRoot);\n\t\t\t\t\t\tif (buildNumbersOfForkedRoot.contains(buildNumber)) {\n\t\t\t\t\t\t\tbuildNumber = Collections.max(buildNumbersOfForkedRoot) + 1;\n\t\t\t\t\t\t\tnumberElement.setText(buildNumber.toString());\n\t\t\t\t\t\t} \n\t\t\t\t\t\tbuildNumbersOfForkedRoot.add(buildNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement numberElement = element.element(\"number\");\n\t\t\t\t\tLong requestNumber = Long.valueOf(numberElement.getTextTrim());\n\t\t\t\t\tLong projectId = Long.valueOf(element.elementTextTrim(\"targetProject\"));\n\t\t\t\t\tLong forkedRoot = forkedRoots.get(projectId);\n\t\t\t\t\telement.addElement(\"numberScope\").setText(forkedRoot.toString());\n\t\t\t\t\tif (!projectId.equals(forkedRoot)) {\n\t\t\t\t\t\tSet<Long> requestNumbersOfForkedRoot = pullRequestNumbers.get(forkedRoot);\n\t\t\t\t\t\tif (requestNumbersOfForkedRoot.contains(requestNumber)) {\n\t\t\t\t\t\t\trequestNumber = Collections.max(requestNumbersOfForkedRoot) + 1;\n\t\t\t\t\t\t\tnumberElement.setText(requestNumber.toString());\n\t\t\t\t\t\t} \n\t\t\t\t\t\trequestNumbersOfForkedRoot.add(requestNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t}\n\t\n\t// from 3.0.11 to 3.0.12\n\tprivate void migrate39(File dataDir, Stack<Integer> versions) {\n\t}\n\n\t// from 3.0.x to 3.1.x\n\tprivate void migrate40(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().contains(\".xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.issue.\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \"io.onedev.server.util.inputspec.\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.\");\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong maxRoleId = 0;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tlong roleId = Long.parseLong(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (roleId > maxRoleId) \n\t\t\t\t\t\tmaxRoleId = roleId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tboolean hasOwnerRole = false;\n\t\tString idOfRolePreviouslyUsingOwnerId = null;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement idElement = element.element(\"id\");\n\t\t\t\t\tif (idElement.getText().trim().equals(\"1\")) {\n\t\t\t\t\t\tif (element.elementText(\"manageProject\").equals(\"true\")) {\n\t\t\t\t\t\t\telement.element(\"name\").setText(\"Owner\");\n\t\t\t\t\t\t\thasOwnerRole = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tidOfRolePreviouslyUsingOwnerId = String.valueOf(maxRoleId+1);\n\t\t\t\t\t\t\tidElement.setText(idOfRolePreviouslyUsingOwnerId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tif (!hasOwnerRole) {\n\t\t\tFile dataFile = new File(dataDir, \"Roles.xml\");\n\t\t\tVersionedXmlDoc dom;\n\t\t\tif (dataFile.exists()) { \n\t\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\n\t\t\t} else {\n\t\t\t\tdom = new VersionedXmlDoc();\n\t\t\t\tdom.addElement(\"list\");\n\t\t\t}\n\t\t\t\n\t\t\tElement ownerRoleElement = dom.getRootElement().addElement(\"io.onedev.server.model.Role\");\n\t\t\townerRoleElement.addAttribute(\"revision\", \"0.0\");\n\t\t\townerRoleElement.addElement(\"id\").setText(\"1\");\n\t\t\townerRoleElement.addElement(\"name\").setText(\"Owner\");\n\t\t\townerRoleElement.addElement(\"manageProject\").setText(\"true\");\n\t\t\townerRoleElement.addElement(\"managePullRequests\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"manageCodeComments\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"codePrivilege\").setText(\"NONE\");\n\t\t\townerRoleElement.addElement(\"manageIssues\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"scheduleIssues\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"editableIssueFields\").addAttribute(\"class\", \n\t\t\t\t\t\"io.onedev.server.model.support.role.AllIssueFields\");\n\t\t\townerRoleElement.addElement(\"manageBuilds\").setText(\"false\");\n\t\t\townerRoleElement.addElement(\"jobPrivileges\");\n\t\t\tdom.writeToFile(dataFile, false);\n\t\t}\n\t\t\n\t\tif (idOfRolePreviouslyUsingOwnerId != null) {\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"UserAuthorizations.xml\") \n\t\t\t\t\t\t|| file.getName().startsWith(\"GroupAuthorizations.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\t\tElement roleElement = element.element(\"role\");\n\t\t\t\t\t\tif (roleElement.getText().trim().equals(\"1\"))\n\t\t\t\t\t\t\troleElement.setText(idOfRolePreviouslyUsingOwnerId);\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tMap<String, Element> userBuildSettingElements = new HashMap<>();\n\t\tMap<String, Element> userWebHooksElements = new HashMap<>();\n\t\tMap<String, String> projectOwners = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.element(\"defaultTransitionSpecs\").setName(\"transitionSpecs\");\n\t\t\t\t\t\t\tvalueElement.element(\"defaultPromptFieldsUponIssueOpen\").setName(\"promptFieldsUponIssueOpen\");\n\t\t\t\t\t\t\tvalueElement.element(\"defaultBoardSpecs\").setName(\"boardSpecs\");\n\t\t\t\t\t\t\tfor (Node node: valueElement.selectNodes(\"//uuid\"))\n\t\t\t\t\t\t\t\tnode.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tprojectOwners.put(element.elementText(\"id\").trim(), element.elementText(\"owner\").trim());\n\t\t\t\t\t\n\t\t\t\t\tElement transitionSpecsElement = element.element(\"transitionSpecs\");\n\t\t\t\t\tif (transitionSpecsElement != null)\n\t\t\t\t\t\ttransitionSpecsElement.detach();\n\t\t\t\t\tElement promptFieldsUponIssueOpenElement = element.element(\"promptFieldsUponIssueOpen\");\n\t\t\t\t\tif (promptFieldsUponIssueOpenElement != null)\n\t\t\t\t\t\tpromptFieldsUponIssueOpenElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.detach();\n\t\t\t\t\tuserBuildSettingElements.put(id, buildSettingElement);\n\t\t\t\t\tElement webHooksElement = element.element(\"webHooks\");\n\t\t\t\t\twebHooksElement.detach();\n\t\t\t\t\tuserWebHooksElements.put(id, webHooksElement);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tlong maxUserAuthorizationId = 0;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\n\t\t\t\t\townerElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tString ownerId = ownerElement.getText().trim();\n\t\t\t\t\t\n\t\t\t\t\tfor (Element webHookElement: userWebHooksElements.get(ownerId).elements())\n\t\t\t\t\t\telement.element(\"webHooks\").add(webHookElement.createCopy());\n\t\t\t\t\t\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement userBuildSettingElement = userBuildSettingElements.get(ownerId);\n\t\t\t\t\t\n\t\t\t\t\tfor (Element buildPreservationElement: userBuildSettingElement.element(\"buildPreservations\").elements()) \n\t\t\t\t\t\tbuildSettingElement.element(\"buildPreservations\").add(buildPreservationElement.createCopy());\n\t\t\t\t\t\n\t\t\t\t\tfor (Element actionAuthorizationElement: userBuildSettingElement.element(\"actionAuthorizations\").elements()) \n\t\t\t\t\t\tbuildSettingElement.element(\"actionAuthorizations\").add(actionAuthorizationElement.createCopy());\n\t\t\t\t\t\n\t\t\t\t\tElement jobSecretsElement = buildSettingElement.element(\"jobSecrets\");\n\t\t\t\t\tSet<String> existingJobSecretNames = new HashSet<>();\n\t\t\t\t\tfor (Element jobSecretElement: jobSecretsElement.elements()) \n\t\t\t\t\t\texistingJobSecretNames.add(jobSecretElement.elementText(\"name\").trim());\n\t\t\t\t\t\n\t\t\t\t\tfor (Element jobSecretElement: userBuildSettingElement.element(\"jobSecrets\").elements()) {\n\t\t\t\t\t\tif (!existingJobSecretNames.contains(jobSecretElement.elementText(\"name\").trim())) \n\t\t\t\t\t\t\tjobSecretsElement.add(jobSecretElement.createCopy());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"UserAuthorizations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tlong userAuthorizationId = Long.parseLong(element.elementText(\"id\").trim());\n\t\t\t\t\tif (userAuthorizationId > maxUserAuthorizationId)\n\t\t\t\t\t\tmaxUserAuthorizationId = userAuthorizationId;\n\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\n\t\t\t\t\tString userId = element.elementText(\"user\").trim();\n\t\t\t\t\tElement roleElement = element.element(\"role\");\n\t\t\t\t\tif (userId.equals(projectOwners.get(projectId))) {\n\t\t\t\t\t\troleElement.setText(\"1\");\n\t\t\t\t\t\tprojectOwners.remove(projectId);\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tFile dataFile = new File(dataDir, \"UserAuthorizations.xml\");\n\t\tVersionedXmlDoc dom;\n\t\tif (dataFile.exists()) { \n\t\t\tdom = VersionedXmlDoc.fromFile(dataFile);\n\t\t} else {\n\t\t\tdom = new VersionedXmlDoc();\n\t\t\tdom.addElement(\"list\");\n\t\t}\n\t\tfor (Map.Entry<String, String> entry: projectOwners.entrySet()) {\n\t\t\tElement userAuthorizationElement = dom.getRootElement().addElement(\"io.onedev.server.model.UserAuthorization\");\n\t\t\tuserAuthorizationElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tuserAuthorizationElement.addElement(\"id\").setText(String.valueOf(++maxUserAuthorizationId));\n\t\t\tuserAuthorizationElement.addElement(\"project\").setText(entry.getKey());\n\t\t\tuserAuthorizationElement.addElement(\"user\").setText(entry.getValue());\n\t\t\tuserAuthorizationElement.addElement(\"role\").setText(\"1\");\n\t\t}\n\t\tdom.writeToFile(dataFile, false);\n\t}\n\t\n\tprivate void migrate41(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.addElement(\"sendAsHtml\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\t// Migrate to 3.2.0\n\tprivate void migrate42(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> commentRequests = new HashMap<>();\n\t\tMap<String, String> requestTargetHeads = new HashMap<>();\n\t\tMap<String, String> requestBaseCommits = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tcommentRequests.put(element.elementTextTrim(\"comment\"), element.elementTextTrim(\"request\"));\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString id = element.elementTextTrim(\"id\");\n\t\t\t\t\trequestBaseCommits.put(id, element.elementTextTrim(\"baseCommitHash\"));\n\t\t\t\t\tElement lastMergePreviewElement = element.element(\"lastMergePreview\");\n\t\t\t\t\tif (lastMergePreviewElement != null) {\n\t\t\t\t\t\tElement targetHeadElement = lastMergePreviewElement.element(\"targetHead\");\n\t\t\t\t\t\trequestTargetHeads.put(id, targetHeadElement.getTextTrim());\n\t\t\t\t\t\ttargetHeadElement.setName(\"targetHeadCommitHash\");\n\t\t\t\t\t\tlastMergePreviewElement.element(\"requestHead\").setName(\"headCommitHash\");\n\t\t\t\t\t\tElement mergedElement = lastMergePreviewElement.element(\"merged\");\n\t\t\t\t\t\tif (mergedElement != null)\n\t\t\t\t\t\t\tmergedElement.setName(\"mergeCommitHash\");\n\t\t\t\t\t} \n\t\t\t\t\telement.element(\"headCommitHash\").detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} \n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.administration.authenticator.ldap.\", \n\t\t\t\t\t\t\t\"io.onedev.server.plugin.authenticator.ldap.\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequest\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.DiscardPullRequestTrigger\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequest\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.MergePullRequestTrigger\");\n\t\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequest\", \n\t\t\t\t\t\t\t\"io.onedev.server.model.support.issue.transitiontrigger.OpenPullRequestTrigger\");\n\t\t\t\t\tFileUtils.writeFile(file, content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement keyElement = element.element(\"key\");\n\t\t\t\t\tif (keyElement.getTextTrim().equals(\"SSH\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.element(\"privateKey\").setName(\"pemPrivateKey\");\n\t\t\t\t\t} else if (keyElement.getTextTrim().equals(\"JOB_SCRIPTS\")) {\n\t\t\t\t\t\tkeyElement.setText(\"GROOVY_SCRIPTS\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tElement actionAuthorizationsElement = buildSettingElement.element(\"actionAuthorizations\");\n\t\t\t\t\tif (actionAuthorizationsElement.elements().isEmpty()) {\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CreateTagAuthorization\");\n\t\t\t\t\t\tactionAuthorizationsElement.addElement(\"io.onedev.server.model.support.build.actionauthorization.CloseMilestoneAuthorization\");\n\t\t\t\t\t}\n\t\t\t\t\telement.addElement(\"issueManagementEnabled\").setText(\"true\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\n\t\t\t\t\tcompareContextElement.element(\"compareCommit\").setName(\"compareCommitHash\");\n\t\t\t\t\tElement markPosElement = element.element(\"markPos\");\n\t\t\t\t\tmarkPosElement.setName(\"mark\");\n\t\t\t\t\tmarkPosElement.element(\"commit\").setName(\"commitHash\");\n\t\t\t\t\tString requestId = commentRequests.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (requestId != null)\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"submitReason\").setText(\"Unknown\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentRelations.xml\")) {\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestBuilds.xml\")) {\n\t\t\t\ttry {\n\t\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8.name());\n\t\t\t\t\tcontent = StringUtils.replace(content, \"PullRequestBuild\", \"PullRequestVerification\");\n\t\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\t\tString newFileName = StringUtils.replace(file.getName(), \"PullRequestBuild\", \"PullRequestVerification\");\n\t\t\t\t\tFileUtils.writeFile(new File(dataDir, newFileName), content, StandardCharsets.UTF_8.name());\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\tthrow new RuntimeException(e);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement excludeDateElement = element.element(\"excludeDate\");\n\t\t\t\t\tif (excludeDateElement != null)\n\t\t\t\t\t\texcludeDateElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"accessToken\").setText(CryptoUtils.generateSecret());\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\telement.element(\"mergeBaseCommitHash\").detach();\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tString targetHead = requestTargetHeads.get(requestId);\n\t\t\t\t\tElement targetHeadCommitHashElement = element.addElement(\"targetHeadCommitHash\");\n\t\t\t\t\tif (targetHead != null) \n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(targetHead);\n\t\t\t\t\telse\n\t\t\t\t\t\ttargetHeadCommitHashElement.setText(requestBaseCommits.get(requestId));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 3.2.2\n\tprivate void migrate43(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null)\n\t\t\t\t\t\t\tvalueElement.addElement(\"issueTemplates\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate44_abbreviate(Element element, int maxLen) {\n\t\tif (element != null) {\n\t\t\tString text = StringUtils.abbreviate(element.getText().trim(), maxLen);\n\t\t\telement.setText(text);\n\t\t}\n\t}\n\t\n\t// Migrate to 4.0.5\n\tprivate void migrate44(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> verifications = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequestVerifications.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tverifications.put(element.elementTextTrim(\"build\"), element.elementTextTrim(\"request\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"triggerId\").setText(UUID.randomUUID().toString());\n\t\t\t\t\tString requestId = verifications.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (requestId != null)\n\t\t\t\t\t\telement.addElement(\"request\").setText(requestId);\n\t\t\t\t\tElement updatedRefElement = element.element(\"updatedRef\");\n\t\t\t\t\tif (updatedRefElement != null)\n\t\t\t\t\t\tupdatedRefElement.setName(\"refName\");\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"errorMessage\"), 12000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 15000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 15000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"description\"), 12000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tmigrate44_abbreviate(element.element(\"content\"), 14000);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 4.0.6\n\tprivate void migrate45(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"triggerId\").detach();\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// migrate to 4.0.7\n\tprivate void migrate46(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\")) {\n\t\t\t\t\t\t\t\tElement serviceAccountElement = executorElement.element(\"serviceAccount\");\n\t\t\t\t\t\t\t\tif (serviceAccountElement != null)\n\t\t\t\t\t\t\t\t\tserviceAccountElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// migrate to 4.0.8\n\tprivate void migrate47(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement refNameElement = element.element(\"refName\");\n\t\t\t\t\tif (refNameElement == null)\n\t\t\t\t\t\telement.addElement(\"refName\").setText(\"unknown\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// migrate to 4.1.0\n\tprivate void migrate48(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"\\\" is before \\\"\", \"\\\" is until \\\"\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"\\\" is after \\\"\", \"\\\" is since \\\"\");\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\t\n\t}\n\t\n\tprivate void migrate49(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement buildSettingElement = element.element(\"buildSetting\");\n\t\t\t\t\tbuildSettingElement.addElement(\"defaultFixedIssueFilters\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 4.2.0\n\tprivate void migrate50(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate51(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement rangeElement = element.element(\"mark\").element(\"range\");\n\t\t\t\t\tElement tabWidthElement = rangeElement.element(\"tabWidth\");\n\t\t\t\t\tif (tabWidthElement == null)\n\t\t\t\t\t\ttabWidthElement = rangeElement.addElement(\"tabWidth\");\n\t\t\t\t\ttabWidthElement.setText(\"1\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\t// Migrate to 4.2.1\n\tprivate void migrate52(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"revision\").setText(\"0\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Migrate to 4.3.0\n\tprivate void migrate53(File dataDir, Stack<Integer> versions) {\n\t\tString anonymousGroupName = null;\n\t\tMap<String, String> groupIds = new HashMap<>();\n\t\tList<Triple<String, String, String>> authorizations = new ArrayList<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldspec.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.spec.\");\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.fieldsupply.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.issue.field.supply.\");\n\t\t\t\tcontent = StringUtils.replace(content,\n\t\t\t\t\t\t\"org.server.plugin.report.checkstyle.\",\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.checkstyle.\");\n\t\t\t\tcontent = StringUtils.replace(content,\n\t\t\t\t\t\t\"org.server.plugin.report.clover.\",\n\t\t\t\t\t\t\"io.onedev.server.plugin.report.clover.\");\n\t\t\t\t\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t\t\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SECURITY\")) {\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\t\tElement anonymousGroupElement = valueElement.element(\"anonymousGroup\");\n\t\t\t\t\t\t\t\tif (anonymousGroupElement != null) {\n\t\t\t\t\t\t\t\t\tif (valueElement.elementTextTrim(\"enableAnonymousAccess\").equals(\"true\"))\n\t\t\t\t\t\t\t\t\t\tanonymousGroupName = anonymousGroupElement.getText().trim();\n\t\t\t\t\t\t\t\t\tanonymousGroupElement.detach();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\t\tgroupIds.put(element.elementText(\"name\").trim(), element.elementText(\"id\").trim());\n\t\t\t\t} else if (file.getName().startsWith(\"GroupAuthorizations.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\t\tString groupId = element.elementText(\"group\").trim();\n\t\t\t\t\t\tString projectId = element.elementText(\"project\").trim();\n\t\t\t\t\t\tString roleId = element.elementText(\"role\").trim();\n\t\t\t\t\t\tauthorizations.add(Triple.of(groupId, projectId, roleId));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t}\t\n\n\t\tMap<String, String> defaultRoles = new HashMap<>();\n\t\t\n\t\tif (anonymousGroupName != null) {\n\t\t\tString anonymousGroupId = groupIds.get(anonymousGroupName);\n\t\t\tfor (Triple<String, String, String> authorization: authorizations) {\n\t\t\t\tif (authorization.getLeft().equals(anonymousGroupId)) \n\t\t\t\t\tdefaultRoles.put(authorization.getMiddle(), authorization.getRight());\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString defaultRoleId = defaultRoles.get(element.elementText(\"id\").trim());\n\t\t\t\t\tif (defaultRoleId != null)\n\t\t\t\t\t\telement.addElement(\"defaultRole\").setText(defaultRoleId);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void migrate54(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"createProjects\").detach();\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate55(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement ownerElement = element.element(\"owner\");\n\t\t\t\t\tif (ownerElement != null)\n\t\t\t\t\t\townerElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate56(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"alternateEmails\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate57(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\ttry {\n\t\t\t\tString content = FileUtils.readFileToString(file, StandardCharsets.UTF_8);\n\t\t\t\tcontent = StringUtils.replace(content, \n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.numberinput.\", \n\t\t\t\t\t\t\"io.onedev.server.model.support.inputspec.integerinput.\");\n\t\t\t\tFileUtils.writeStringToFile(file, content, StandardCharsets.UTF_8);\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\n\t\t\t\n\t\t\tif (file.getName().startsWith(\"BuildParams.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\n\t\t\t\t\tif (type.equals(\"Number\"))\n\t\t\t\t\t\telement.setText(\"Integer\");\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\n\t\t\t\t\t\telement.setText(\"Pull Request\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueFields.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\n\t\t\t\t\tif (type.equals(\"Number\"))\n\t\t\t\t\t\telement.setText(\"Integer\");\n\t\t\t\t\telse if (type.equals(\"Pull request\"))\n\t\t\t\t\t\telement.setText(\"Pull Request\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\n\t\t\t\t\t\t\t\tif (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.NumberField\"))\n\t\t\t\t\t\t\t\t\tfieldSpecElement.setName(\"io.onedev.server.model.support.issue.field.spec.IntegerField\");\n\t\t\t\t\t\t\t\telse if (fieldSpecElement.getName().equals(\"io.onedev.server.model.support.issue.field.spec.TextField\"))\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"multiline\").setText(\"false\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate58(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"contributedSettings\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate59(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.element(\"sendAsHtml\").detach();\n\t\t\t\t\t\t\tElement senderAddressElement = valueElement.element(\"senderAddress\");\n\t\t\t\t\t\t\tif (senderAddressElement != null) {\n\t\t\t\t\t\t\t\tsenderAddressElement.setName(\"emailAddress\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tString hostName;\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\thostName = InetAddress.getLocalHost().getHostName();\n\t\t\t\t\t\t\t\t} catch (UnknownHostException e) {\n\t\t\t\t\t\t\t\t\thostName = \"localhost\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"emailAddress\").setText(\"onedev@\" + hostName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate60(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().equals(\"io.onedev.server.plugin.docker.DockerExecutor\"))\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.docker.DockerExecutor\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void useUnknownUser(Element element, String field) {\n\t\tElement userNameElement = element.element(field + \"Name\");\n\t\tif (userNameElement != null) {\n\t\t\tuserNameElement.detach();\n\t\t\tif (element.element(field) == null)\n\t\t\t\telement.addElement(field).setText(\"-2\");\n\t\t}\n\t}\n\t\n\tprivate void migrate61(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\n\t\t\t\t\tuseUnknownUser(element, \"canceller\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuseUnknownUser(element.element(\"lastUpdate\"), \"user\");\n\t\t\t\t\tuseUnknownUser(element, \"submitter\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"IssueDescriptionChangeData\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\telse\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tif (element.element(\"data\").attributeValue(\"class\").contains(\"PullRequestDescriptionChangeData\"))\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\telse\n\t\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tuseUnknownUser(element, \"user\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tif (element.elementTextTrim(\"id\").equals(\"-1\"))\n\t\t\t\t\t\telement.element(\"email\").setText(\"system email\");\n\t\t\t\t}\n\t\t\t\tif (file.getName().equals(\"Users.xml\")) {\n\t\t\t\t\tElement element = dom.getRootElement().addElement(\"io.onedev.server.model.User\");\n\t\t\t\t\telement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\telement.addElement(\"id\").setText(\"-2\");\n\t\t\t\t\telement.addElement(\"name\").setText(\"Unknown\");\n\t\t\t\t\telement.addElement(\"password\").setText(\"no password\");\n\t\t\t\t\telement.addElement(\"ssoInfo\").addElement(\"subject\").setText(UUID.randomUUID().toString());\n\t\t\t\t\telement.addElement(\"email\").setText(\"unknown email\");\n\t\t\t\t\telement.addElement(\"alternateEmails\");\n\t\t\t\t\telement.addElement(\"accessToken\").setText(CryptoUtils.generateSecret());\n\t\t\t\t\telement.addElement(\"userProjectQueries\");\n\t\t\t\t\telement.addElement(\"userIssueQueries\");\n\t\t\t\t\telement.addElement(\"userIssueQueryWatches\");\n\t\t\t\t\telement.addElement(\"issueQueryWatches\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userPullRequestQueries\");\n\t\t\t\t\telement.addElement(\"userPullRequestQueryWatches\");\n\t\t\t\t\telement.addElement(\"pullRequestQueryWatches\");\n\t\t\t\t\telement.addElement(\"userBuildQueries\");\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"userBuildQuerySubscriptions\");\n\t\t\t\t\telement.addElement(\"buildQuerySubscriptions\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tList<Element> oldSenderAuthorizationElements = null;\n\t\t\t\t\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tlong maxId = 1L;\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement receiveMailSetting = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSetting != null) {\n\t\t\t\t\t\t\t\tElement senderAuthorizationsElement = receiveMailSetting.element(\"senderAuthorizations\");\n\t\t\t\t\t\t\t\toldSenderAuthorizationElements = senderAuthorizationsElement.elements();\n\t\t\t\t\t\t\t\tsenderAuthorizationsElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tlong id = Long.valueOf(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (id > maxId)\n\t\t\t\t\t\tmaxId = id;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (oldSenderAuthorizationElements != null && !oldSenderAuthorizationElements.isEmpty()) {\n\t\t\t\t\tElement serviceDeskSettingElement = dom.getRootElement().addElement(\"io.onedev.server.model.Setting\");\n\t\t\t\t\tserviceDeskSettingElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"id\").setText(String.valueOf(maxId+1));\n\t\t\t\t\tserviceDeskSettingElement.addElement(\"key\").setText(\"SERVICE_DESK_SETTING\");\n\t\t\t\t\tElement valueElement = serviceDeskSettingElement.addElement(\"value\");\n\t\t\t\t\tvalueElement.addAttribute(\"class\", \"io.onedev.server.model.support.administration.ServiceDeskSetting\");\n\t\t\t\t\tElement senderAuthorizationsElement = valueElement.addElement(\"senderAuthorizations\");\n\t\t\t\t\tElement projectDesignationsElement = valueElement.addElement(\"projectDesignations\");\n\t\t\t\t\tElement issueCreationSettingsElement = valueElement.addElement(\"issueCreationSettings\");\n\t\t\t\t\tfor (Element oldSenderAuthorizationElement: oldSenderAuthorizationElements) {\n\t\t\t\t\t\tElement senderAuthorizationElement = senderAuthorizationsElement\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.SenderAuthorization\");\n\t\t\t\t\t\tElement projectDesignationElement = projectDesignationsElement\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.ProjectDesignation\");\n\t\t\t\t\t\tElement issueCreationSettingElement = issueCreationSettingsElement\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.support.administration.IssueCreationSetting\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement senderEmailsElement = oldSenderAuthorizationElement.element(\"senderEmails\");\n\t\t\t\t\t\tif (senderEmailsElement != null) {\n\t\t\t\t\t\t\tString senderEmails = senderEmailsElement.getText().trim();\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"senderEmails\").setText(senderEmails);\n\t\t\t\t\t\t\tprojectDesignationElement.addElement(\"senderEmails\").setText(senderEmails);\n\t\t\t\t\t\t\tissueCreationSettingElement.addElement(\"senderEmails\").setText(senderEmails);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement authorizedProjectsElement = oldSenderAuthorizationElement.element(\"authorizedProjects\");\n\t\t\t\t\t\tif (authorizedProjectsElement != null) {\n\t\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedProjects\")\n\t\t\t\t\t\t\t\t\t.setText(authorizedProjectsElement.getText().trim());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsenderAuthorizationElement.addElement(\"authorizedRoleName\")\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"authorizedRoleName\").trim());\n\t\t\t\t\t\tprojectDesignationElement.addElement(\"project\")\n\t\t\t\t\t\t\t\t.setText(oldSenderAuthorizationElement.elementText(\"defaultProject\").trim());\n\t\t\t\t\t\tElement issueFieldsElement = oldSenderAuthorizationElement.element(\"issueFields\");\n\t\t\t\t\t\tissueFieldsElement.detach();\n\t\t\t\t\t\tissueCreationSettingElement.add(issueFieldsElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate62(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tHardwareAbstractionLayer hardware = new SystemInfo().getHardware();\n\t\t\t\t\t\t\t\tint cpu = hardware.getProcessor().getLogicalProcessorCount()*1000;\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"cpu\").setText(String.valueOf(cpu));\n\t\t\t\t\t\t\t\tint memory = (int) (hardware.getMemory().getTotal()/1024/1024);\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"memory\").setText(String.valueOf(memory));\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"cpu\").setText(\"4000\");\n\t\t\t\t\t\t\t\tvalueElement.addElement(\"memory\").setText(\"8000\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"DockerExecutor\")) {\n\t\t\t\t\t\t\t\t\texecutorElement.setName(\"io.onedev.server.plugin.executor.serverdocker.ServerDockerExecutor\");\n\t\t\t\t\t\t\t\t\texecutorElement.element(\"capacity\").detach();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement userProjectQueriesElement = element.element(\"userProjectQueries\");\n\t\t\t\t\tif (userProjectQueriesElement != null)\n\t\t\t\t\t\tuserProjectQueriesElement.setName(\"projectQueries\");\n\t\t\t\t\tElement userIssueQueriesElement = element.element(\"userIssueQueries\");\n\t\t\t\t\tif (userIssueQueriesElement != null)\n\t\t\t\t\t\tuserIssueQueriesElement.setName(\"issueQueries\");\n\t\t\t\t\tElement userBuildQueriesElement = element.element(\"userBuildQueries\");\n\t\t\t\t\tif (userBuildQueriesElement != null)\n\t\t\t\t\t\tuserBuildQueriesElement.setName(\"buildQueries\");\n\t\t\t\t\tElement userPullRequestQueriesElement = element.element(\"userPullRequestQueries\");\n\t\t\t\t\tif (userPullRequestQueriesElement != null)\n\t\t\t\t\t\tuserPullRequestQueriesElement.setName(\"pullRequestQueries\");\n\t\t\t\t\t\n\t\t\t\t\tElement issueQueryWatchesElement = element.element(\"issueQueryWatches\");\n\t\t\t\t\tfor (Element issueQueryWatchElement: issueQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = issueQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userIssueQueryWatchesElement = element.element(\"userIssueQueryWatches\");\n\t\t\t\t\tfor (Element userIssueQueryWatchElement: userIssueQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userIssueQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserIssueQueryWatchElement.detach();\n\t\t\t\t\t\tissueQueryWatchesElement.add(userIssueQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserIssueQueryWatchesElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tElement pullRequestQueryWatchesElement = element.element(\"pullRequestQueryWatches\");\n\t\t\t\t\tfor (Element pullRequestQueryWatchElement: pullRequestQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = pullRequestQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userPullRequestQueryWatchesElement = element.element(\"userPullRequestQueryWatches\");\n\t\t\t\t\tfor (Element userPullRequestQueryWatchElement: userPullRequestQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userPullRequestQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserPullRequestQueryWatchElement.detach();\n\t\t\t\t\t\tpullRequestQueryWatchesElement.add(userPullRequestQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserPullRequestQueryWatchesElement.detach();\n\t\t\t\t\t\n\t\t\t\t\tElement buildQuerySubscriptionsElement = element.element(\"buildQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: buildQuerySubscriptionsElement.elements()) \n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\tElement userBuildQuerySubscriptionsElement = element.element(\"userBuildQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: userBuildQuerySubscriptionsElement.elements()) {\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tqueryNameElement.detach();\n\t\t\t\t\t\tbuildQuerySubscriptionsElement.add(queryNameElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserBuildQuerySubscriptionsElement.detach();\n\t\t\t\t}\t\t\t\t \n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.IssueQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserQueryWatchElement.detach();\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQueryWatchesElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.PullRequestQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement queryWatchesElement = element.element(\"queryWatches\");\n\t\t\t\t\tfor (Element queryWatchElement: queryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = queryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\t}\n\t\t\t\t\tElement userQueryWatchesElement = element.element(\"userQueryWatches\");\n\t\t\t\t\tfor (Element userQueryWatchElement: userQueryWatchesElement.elements()) {\n\t\t\t\t\t\tElement queryNameElement = userQueryWatchElement.element(\"string\");\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tuserQueryWatchElement.detach();\n\t\t\t\t\t\tqueryWatchesElement.add(userQueryWatchElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQueryWatchesElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"BuildQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.BuildQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"querySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tqueryNameElement.detach();\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CodeCommentQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t} else if (file.getName().startsWith(\"CommitQuerySettings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CommitQueryPersonalization\");\n\t\t\t\t\telement.element(\"userQueries\").setName(\"queries\");\n\t\t\t\t\tElement querySubscriptionsElement = element.element(\"projectQuerySubscriptions\");\n\t\t\t\t\tquerySubscriptionsElement.setName(\"querySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: querySubscriptionsElement.elements()) \n\t\t\t\t\t\tqueryNameElement.setText(\"g:\" + queryNameElement.getText());\n\t\t\t\t\tElement userQuerySubscriptionsElement = element.element(\"userQuerySubscriptions\");\n\t\t\t\t\tfor (Element queryNameElement: userQuerySubscriptionsElement.elements()) {\n\t\t\t\t\t\tqueryNameElement.setText(\"p:\" + queryNameElement.getText());\n\t\t\t\t\t\tqueryNameElement.detach();\n\t\t\t\t\t\tquerySubscriptionsElement.add(queryNameElement);\n\t\t\t\t\t}\n\t\t\t\t\tuserQuerySubscriptionsElement.detach();\n\t\t\t\t}\t\t\t\t\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tdom.writeToFile(new File(dataDir, file.getName().replace(\"Settings\", \"Personalizations\")), false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate63(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"AutoDiscoveredJobExecutor\")) \n\t\t\t\t\t\t\t\t\texecutorElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement errorMessageElement = element.element(\"errorMessage\");\n\t\t\t\t\tif (errorMessageElement != null)\n\t\t\t\t\t\terrorMessageElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate64(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement timeoutElement = valueElement.element(\"timeout\");\n\t\t\t\t\t\t\tint timeout = Integer.valueOf(timeoutElement.getTextTrim());\n\t\t\t\t\t\t\tif (timeout == 0)\n\t\t\t\t\t\t\t\ttimeout = 60;\n\t\t\t\t\t\t\telse if (timeout < 10)\n\t\t\t\t\t\t\t\ttimeout = 10;\n\t\t\t\t\t\t\ttimeoutElement.setText(String.valueOf(timeout));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate65(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tvalueElement.element(\"cpu\").detach();\n\t\t\t\t\t\tvalueElement.element(\"memory\").detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\t\t\t\t\n\t\t}\n\t\t\n\t}\n\t\n\tprivate void migrate66(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Element> compareContexts = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement compareContextElement = element.element(\"compareContext\");\n\t\t\t\t\tElement leftSideElement = compareContextElement.element(\"leftSide\");\n\t\t\t\t\tElement compareCommitHashElement = compareContextElement.element(\"compareCommitHash\");\n\t\t\t\t\tString compareCommitHash = compareCommitHashElement.getTextTrim();\n\t\t\t\t\tString commitHash = element.element(\"mark\").elementTextTrim(\"commitHash\");\n\t\t\t\t\tif (Boolean.parseBoolean(leftSideElement.getTextTrim())) {\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(compareCommitHash);\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(commitHash);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcompareContextElement.addElement(\"newCommitHash\").setText(compareCommitHash);\n\t\t\t\t\t\tcompareContextElement.addElement(\"oldCommitHash\").setText(commitHash);\n\t\t\t\t\t}\n\t\t\t\t\tElement requestElement = element.element(\"request\");\n\t\t\t\t\tif (requestElement != null) {\n\t\t\t\t\t\tcompareContextElement.addElement(\"pullRequest\").setText(requestElement.getTextTrim());\n\t\t\t\t\t\trequestElement.detach();\n\t\t\t\t\t}\n\t\t\t\t\tleftSideElement.detach();\n\t\t\t\t\tcompareCommitHashElement.detach();\n\t\t\t\t\tcompareContexts.put(element.elementTextTrim(\"id\"), compareContextElement);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement lastCodeCommentActivityDateElement = element.element(\"lastCodeCommentActivityDate\");\n\t\t\t\t\tif (lastCodeCommentActivityDateElement != null)\n\t\t\t\t\t\tlastCodeCommentActivityDateElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tString enableStartTLSElement = valueElement.elementTextTrim(\"enableStartTLS\");\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"enableSSL\").setText(enableStartTLSElement);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString elementId = element.elementTextTrim(\"comment\");\n\t\t\t\t\telement.add(compareContexts.get(elementId).createCopy());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\t\t\t\t\n\t\t}\n\t}\n\t\n\tprivate void migrate67(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Element> compareContexts = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"JestTestMetric.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.setName(\"io.onedev.server.model.UnitTestMetric\");\n\t\t\t\t\n\t\t\t\tString newFileName = file.getName().replace(\"Jest\", \"Unit\");\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"CloverMetric.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.setName(\"io.onedev.server.model.CoverageMetric\");\n\t\t\t\t\n\t\t\t\tString newFileName = file.getName().replace(\"Clover\", \"Coverage\");\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t} else if (file.getName().startsWith(\"CheckstyleMetric.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.setName(\"io.onedev.server.model.ProblemMetric\");\n\t\t\t\t\n\t\t\t\tString newFileName = file.getName().replace(\"Checkstyle\", \"Problem\");\n\t\t\t\tdom.writeToFile(new File(dataDir, newFileName), false);\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrateAttachmentLinks(@Nullable Element element, Map<String, String> projectIds) {\n\t\tif (element != null) {\n\t\t\tString content = element.getText();\n\t\t\tPattern pattern = Pattern.compile(\"/projects/([\\\\w-\\\\.]+)/attachment/\");\n\t\t\tMatcher matcher = pattern.matcher(content);\n\t\t\tStringBuffer buffer = new StringBuffer();\n\t\t\t\n\t\t\twhile (matcher.find()) {\n\t\t\t\tString projectName = matcher.group(1);\n\t\t\t\tString projectId = projectIds.get(projectName);\n\t\t\t\tif (projectId != null) \n\t\t\t\t\tmatcher.appendReplacement(buffer, \"/projects/\" + projectId + \"/attachment/\");\n\t\t\t\telse\n\t\t\t\t\tmatcher.appendReplacement(buffer, Matcher.quoteReplacement(matcher.group()));\n\t\t\t}\n\t\t\t\n\t\t\tmatcher.appendTail(buffer);\n\t\t\telement.setText(buffer.toString());\n\t\t}\n\t}\n\t\n\tprivate void migrate68(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> projectIds = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tprojectIds.put(element.elementTextTrim(\"name\"), element.elementTextTrim(\"id\"));\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"codeManagementEnabled\").setText(\"true\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"description\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"content\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\tmigrateAttachmentLinks(element.element(\"data\").element(\"comment\"), projectIds);\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"createRootProjects\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())\n\t\t\t\t\telement.addElement(\"createChildren\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\tElement jobMatchElement = executorElement.element(\"jobMatch\");\n\t\t\t\t\t\t\tif (jobMatchElement.getTextTrim().equals(\"all\"))\n\t\t\t\t\t\t\t\tjobMatchElement.detach();\n\t\t\t\t\t\t\telse \n\t\t\t\t\t\t\t\tjobMatchElement.setName(\"jobRequirement\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate69(File dataDir, Stack<Integer> versions) {\n\t}\n\n\t// Migrate to 5.4.0\n\tprivate void migrate70(File dataDir, Stack<Integer> versions) {\n\t\tLong scheduleId = 1L;\n\t\tVersionedXmlDoc issueSchedulesDoc = new VersionedXmlDoc();\n\t\tElement listElement = issueSchedulesDoc.addElement(\"list\");\n\t\t\n\t\tSet<String> promptFieldsUponIssueOpen = new HashSet<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString issueSubmitDate = element.elementTextTrim(\"submitDate\");\n\t\t\t\t\tElement milestoneElement = element.element(\"milestone\");\n\t\t\t\t\tif (milestoneElement != null) {\n\t\t\t\t\t\tElement scheduleElement = listElement.addElement(\"io.onedev.server.model.IssueSchedule\");\n\t\t\t\t\t\tscheduleElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tscheduleElement.addElement(\"id\").setText(String.valueOf(scheduleId++));\n\t\t\t\t\t\tscheduleElement.addElement(\"issue\").setText(issueId);\n\t\t\t\t\t\tscheduleElement.addElement(\"milestone\").setText(milestoneElement.getTextTrim());\n\t\t\t\t\t\tscheduleElement.addElement(\"date\").addAttribute(\"class\", \"sql-timestamp\").setText(issueSubmitDate);\n\t\t\t\t\t\tmilestoneElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tString dataClass = dataElement.attributeValue(\"class\");\n\t\t\t\t\tif (dataClass.contains(\"IssueMilestoneChangeData\") || dataClass.contains(\"IssueBatchUpdateData\")) {\n\t\t\t\t\t\tElement oldMilestonesElement = dataElement.addElement(\"oldMilestones\");\n\t\t\t\t\t\tElement oldMilestoneElement = dataElement.element(\"oldMilestone\");\n\t\t\t\t\t\tif (oldMilestoneElement != null) {\n\t\t\t\t\t\t\toldMilestonesElement.addElement(\"string\").setText(oldMilestoneElement.getText());\n\t\t\t\t\t\t\toldMilestoneElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tElement newMilestonesElement = dataElement.addElement(\"newMilestones\");\n\t\t\t\t\t\tElement newMilestoneElement = dataElement.element(\"newMilestone\");\n\t\t\t\t\t\tif (newMilestoneElement != null) { \n\t\t\t\t\t\t\tnewMilestonesElement.addElement(\"string\").setText(newMilestoneElement.getText());\n\t\t\t\t\t\t\tnewMilestoneElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldNameElement: valueElement.element(\"promptFieldsUponIssueOpen\").elements())\n\t\t\t\t\t\t\t\tpromptFieldsUponIssueOpen.add(fieldNameElement.getText().trim());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tissueSchedulesDoc.writeToFile(new File(dataDir, \"IssueSchedules.xml\"), false);\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\"))\n\t\t\t\t\t\t\t\texecutorElement.element(\"createCacheLabels\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element fieldSpecElement: valueElement.element(\"fieldSpecs\").elements()) {\n\t\t\t\t\t\t\t\tif (promptFieldsUponIssueOpen.contains(fieldSpecElement.elementText(\"name\").trim()))\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"true\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tfieldSpecElement.addElement(\"promptUponIssueOpen\").setText(\"false\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalueElement.element(\"promptFieldsUponIssueOpen\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\t\n\t// Migrate to 6.0.0\n\tprivate void migrate71(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> issueScopes = new HashMap<>();\n\t\tMap<Pair<String, String>, String> issueIds = new HashMap<>();\n\t\tMap<Pair<String, String>, String> buildIds = new HashMap<>();\n\t\tMap<Pair<String, String>, String> pullRequestIds = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\n\t\t\t\t\tissueScopes.put(issueId, numberScope);\n\t\t\t\t\tissueIds.put(new Pair<>(numberScope, element.elementTextTrim(\"number\")), issueId);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString buildId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\n\t\t\t\t\tbuildIds.put(new Pair<>(numberScope, number), buildId);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"id\");\n\t\t\t\t\tString numberScope = element.elementTextTrim(\"numberScope\");\n\t\t\t\t\tString number = element.elementTextTrim(\"number\");\n\t\t\t\t\tpullRequestIds.put(new Pair<>(numberScope, number), pullRequestId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueFields.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tString type = element.elementText(\"type\").trim();\n\t\t\t\t\tString value = element.elementTextTrim(\"value\");\n\t\t\t\t\tif (type.equals(\"Issue\")) {\n\t\t\t\t\t\tString fieldIssueId = issueIds.get(new Pair<>(issueScopes.get(issueId), value));\n\t\t\t\t\t\tif (fieldIssueId != null)\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldIssueId);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else if (type.equals(\"Build\")) {\n\t\t\t\t\t\tString fieldBuildId = buildIds.get(new Pair<>(issueScopes.get(issueId), value));\n\t\t\t\t\t\tif (fieldBuildId != null)\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldBuildId);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else if (type.equals(\"Pull Request\")) {\n\t\t\t\t\t\tString fieldPullRequestId = pullRequestIds.get(new Pair<>(issueScopes.get(issueId), value));\n\t\t\t\t\t\tif (fieldPullRequestId != null)\n\t\t\t\t\t\t\telement.element(\"value\").setText(fieldPullRequestId);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate72(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> stateOrdinals = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"ISSUE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tint index = 0;\n\t\t\t\t\t\t\tfor (Element stateSpecElement: valueElement.element(\"stateSpecs\").elements()) \n\t\t\t\t\t\t\t\tstateOrdinals.put(stateSpecElement.elementText(\"name\").trim(), index++);\n\t\t\t\t\t\t\tfor (Element boardSpecElement: valueElement.element(\"boardSpecs\").elements())\n\t\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\n\t\t\t\t\t\t\tvalueElement.addElement(\"listLinks\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tint ordinal = stateOrdinals.get(element.elementText(\"state\").trim());\n\t\t\t\t\telement.addElement(\"stateOrdinal\").setText(String.valueOf(ordinal));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement issueSettingElement = element.element(\"issueSetting\");\n\t\t\t\t\tif (issueSettingElement.element(\"listFields\") != null)\n\t\t\t\t\t\tissueSettingElement.addElement(\"listLinks\");\n\t\t\t\t\tElement boardSpecsElement = issueSettingElement.element(\"boardSpecs\");\n\t\t\t\t\tif (boardSpecsElement != null) {\n\t\t\t\t\t\tfor (Element boardSpecElement: boardSpecsElement.elements()) \n\t\t\t\t\t\t\tboardSpecElement.addElement(\"displayLinks\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate73(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) {\n\t\t\t\t\t\tElement statusElement = closeInfoElement.element(\"status\");\n\t\t\t\t\t\tstatusElement.detach();\n\t\t\t\t\t\telement.add(statusElement);\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.addElement(\"status\").setText(\"OPEN\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement osElement = element.element(\"os\");\n\t\t\t\t\tString osName;\n\t\t\t\t\t\n\t\t\t\t\tswitch (osElement.getTextTrim()) {\n\t\t\t\t\tcase \"WINDOWS\":\n\t\t\t\t\t\tosName = \"Windows\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"LINUX\":\n\t\t\t\t\t\tosName = \"Linux\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"FREEBSD\":\n\t\t\t\t\t\tosName = \"FreeBSD\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"MACOSX\":\n\t\t\t\t\t\tosName = \"Mac OS X\";\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tosName = \"Other\";\n\t\t\t\t\t}\n\t\t\t\t\telement.addElement(\"osName\").setText(osName);\n\t\t\t\t\tosElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate74(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"triggerChain\").setText(UUID.randomUUID().toString());\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate75(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"AgentTokens.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement noteElement = element.element(\"note\");\n\t\t\t\t\tif (noteElement != null)\n\t\t\t\t\t\tnoteElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement commentElement = element.element(\"data\").element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\telement.addElement(\"comment\").setText(commentElement.getText());\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate76(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"PERFORMANCE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.addElement(\"maxCodeSearchEntries\").setText(\"100\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate77(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> userIds = new HashMap<>();\n\t\t\n\t\tLong maxPullRequestCommentId = 0L;\n\t\tLong maxIssueCommentId = 0L;\n\t\tFile issueCommentsFile = null;\n\t\tFile pullRequestCommentsFile = null;\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tString name = element.elementText(\"name\").trim();\n\t\t\t\t\tElement fullNameElement = element.element(\"fullName\");\n\t\t\t\t\tif (fullNameElement != null) \n\t\t\t\t\t\tuserIds.put(fullNameElement.getText().trim(), id);\n\t\t\t\t\telse\n\t\t\t\t\t\tuserIds.put(name, id);\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\n\t\t\t\t\tif (commentId > maxIssueCommentId)\n\t\t\t\t\t\tmaxIssueCommentId = commentId;\n\t\t\t\t}\n\t\t\t\tissueCommentsFile = file;\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tLong commentId = Long.parseLong(element.elementText(\"id\").trim());\n\t\t\t\t\tif (commentId > maxPullRequestCommentId)\n\t\t\t\t\t\tmaxPullRequestCommentId = commentId;\n\t\t\t\t}\n\t\t\t\tpullRequestCommentsFile = file;\n\t\t\t}\n\t\t}\n\n\t\tVersionedXmlDoc issueCommentsDom;\n\t\tif (issueCommentsFile == null) {\n\t\t\tissueCommentsFile = new File(dataDir, \"IssueComments.xml\");\n\t\t\tissueCommentsDom = new VersionedXmlDoc();\n\t\t\tissueCommentsDom.addElement(\"list\");\n\t\t} else {\n\t\t\tissueCommentsDom = VersionedXmlDoc.fromFile(issueCommentsFile);\n\t\t}\n\n\t\tVersionedXmlDoc pullRequestCommentsDom;\n\t\tif (pullRequestCommentsFile == null) {\n\t\t\tpullRequestCommentsFile = new File(dataDir, \"PullRequestComments.xml\");\n\t\t\tpullRequestCommentsDom = new VersionedXmlDoc();\n\t\t\tpullRequestCommentsDom.addElement(\"list\");\n\t\t} else {\n\t\t\tpullRequestCommentsDom = VersionedXmlDoc.fromFile(pullRequestCommentsFile);\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"issueManagementEnabled\").setName(\"issueManagement\");\n\t\t\t\t\telement.element(\"codeManagementEnabled\").setName(\"codeManagement\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"user\") == null)\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tElement assigneeElement = dataElement.element(\"assignee\");\n\t\t\t\t\tif (assigneeElement != null) {\n\t\t\t\t\t\tString userId = userIds.get(assigneeElement.getText().trim());\n\t\t\t\t\t\tif (userId != null) {\n\t\t\t\t\t\t\tassigneeElement.setName(\"assigneeId\");\n\t\t\t\t\t\t\tassigneeElement.setText(userId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tElement reviewerElement = dataElement.element(\"reviewer\");\n\t\t\t\t\tif (reviewerElement != null) {\n\t\t\t\t\t\tString userId = userIds.get(reviewerElement.getText().trim());\n\t\t\t\t\t\tif (userId != null) {\n\t\t\t\t\t\t\treviewerElement.setName(\"reviewerId\");\n\t\t\t\t\t\t\treviewerElement.setText(userId);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\tElement pullRequestCommentElement = pullRequestCommentsDom.getRootElement()\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.PullRequestComment\");\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\n\t\t\t\t\t\tpullRequestCommentElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"id\").setText(String.valueOf(++maxPullRequestCommentId));\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"request\").setText(element.elementText(\"request\").trim());\n\t\t\t\t\t\tpullRequestCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\n\t\t\t\t\t\tElement pullRequestCommentDateElement = pullRequestCommentElement.addElement(\"date\");\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\n\t\t\t\t\t\tpullRequestCommentDateElement.setText(dateElement.getText().trim());\n\t\t\t\t\t\tpullRequestCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"user\") == null)\n\t\t\t\t\t\telement.addElement(\"user\").setText(\"-1\");\n\t\t\t\t\tElement commentElement = element.element(\"comment\");\n\t\t\t\t\tif (commentElement != null) {\n\t\t\t\t\t\tElement issueCommentElement = issueCommentsDom.getRootElement()\n\t\t\t\t\t\t\t\t.addElement(\"io.onedev.server.model.IssueComment\");\n\t\t\t\t\t\tissueCommentElement.addElement(\"content\").setText(commentElement.getText().trim());\n\t\t\t\t\t\tissueCommentElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\t\tissueCommentElement.addElement(\"id\").setText(String.valueOf(++maxIssueCommentId));\n\t\t\t\t\t\tissueCommentElement.addElement(\"issue\").setText(element.elementText(\"issue\").trim());\n\t\t\t\t\t\tissueCommentElement.addElement(\"user\").setText(element.elementText(\"user\").trim());\n\t\t\t\t\t\tElement issueCommentDateElement = issueCommentElement.addElement(\"date\");\n\t\t\t\t\t\tElement dateElement = element.element(\"date\");\n\t\t\t\t\t\tissueCommentDateElement.setText(dateElement.getText().trim());\n\t\t\t\t\t\tissueCommentDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\t\tcommentElement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\n\t\tissueCommentsDom.writeToFile(issueCommentsFile, false);\n\t\tpullRequestCommentsDom.writeToFile(pullRequestCommentsFile, false);\n\t}\n\n\tprivate void migrate78(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate79(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate80(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> issueCommentCounts = new HashMap<>();\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(issueId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tissueCommentCounts.put(issueId, commentCount);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = issueCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"temporal\").setText((\"false\"));\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate81(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.element(\"serviceDeskName\") == null) \n\t\t\t\t\t\telement.addElement(\"serviceDeskName\").setText(Project.NULL_SERVICE_DESK_PREFIX + UUID.randomUUID().toString());\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Migrate to 7.0.0\n\tprivate void migrate82(File dataDir, Stack<Integer> versions) {\n\t\tSet<String> userNames = new HashSet<>();\n\t\tMap<String, String> primaryEmails = new HashMap<>();\n\t\tMap<String, String> gitEmails = new HashMap<>();\n\t\tMap<String, String> alternateEmails = new HashMap<>();\n\t\t\n\t\tString sshServerUrl = null;\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tfor (Element branchProtectionElement: element.element(\"branchProtections\").elements()) \n\t\t\t\t\t\tbranchProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\n\t\t\t\t\tfor (Element tagProtectionElement: element.element(\"tagProtections\").elements()) \n\t\t\t\t\t\ttagProtectionElement.addElement(\"signatureRequired\").setText(\"false\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString userId = element.elementText(\"id\").trim();\n\t\t\t\t\tElement nameElement = element.element(\"name\");\n\t\t\t\t\tString name = nameElement.getText().trim();\n\t\t\t\t\tif (userNames.add(name.toLowerCase())) \n\t\t\t\t\t\tnameElement.setText(name.toLowerCase());\n\t\t\t\t\telse\n\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated login names found when convert '\" + name + \"' to lowercase\");\n\t\t\t\t\tif (userId.equals(\"-1\")) {\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"OneDev\");\n\t\t\t\t\t\telement.element(\"email\").detach();\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\n\t\t\t\t\t} else if (userId.equals(\"-2\")) {\n\t\t\t\t\t\telement.addElement(\"fullName\").setText(\"Unknown\");\n\t\t\t\t\t\telement.element(\"email\").detach();\n\t\t\t\t\t\telement.element(\"alternateEmails\").detach();\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tElement emailElement = element.element(\"email\");\n\t\t\t\t\t\tString email = emailElement.getText().trim();\n\t\t\t\t\t\tif (primaryEmails.put(email.toLowerCase(), userId) != null)\n\t\t\t\t\t\t\tthrow new ExplicitException(\"Duplicated email address found when convert '\" + email + \"' to lowercase\");\n\t\t\t\t\t\temailElement.detach();\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement gitEmailElement = element.element(\"gitEmail\");\n\t\t\t\t\t\tif (gitEmailElement != null) {\n\t\t\t\t\t\t\tString gitEmail = gitEmailElement.getText().trim();\n\t\t\t\t\t\t\tgitEmails.put(gitEmail.toLowerCase(), userId);\n\t\t\t\t\t\t\tgitEmailElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tElement alternateEmailsElement = element.element(\"alternateEmails\");\n\t\t\t\t\t\tfor (Element alternateEmailElement: alternateEmailsElement.elements()) {\n\t\t\t\t\t\t\tString alternateEmail = alternateEmailElement.getText().trim();\n\t\t\t\t\t\t\talternateEmails.put(alternateEmail.toLowerCase(), userId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\talternateEmailsElement.detach();\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tElement ssoInfoElement = element.element(\"ssoInfo\");\n\t\t\t\t\tElement connectorElement = ssoInfoElement.element(\"connector\");\n\t\t\t\t\tif (connectorElement != null) \n\t\t\t\t\t\telement.addElement(\"ssoConnector\").setText(connectorElement.getText().trim());\n\t\t\t\t\tssoInfoElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.element(\"triggerChain\").setName(\"pipeline\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SECURITY\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.addElement(\"enforce2FA\").setText(\"false\");\n\t\t\t\t\t} else if (key.equals(\"SSH\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement sshServerUrlElement = valueElement.element(\"serverUrl\");\n\t\t\t\t\t\t\tsshServerUrl = sshServerUrlElement.getText().trim();\n\t\t\t\t\t\t\tsshServerUrlElement.detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Groups.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"enforce2FA\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\n\t\tif (sshServerUrl != null) {\n\t\t\tfor (File file: dataDir.listFiles()) {\n\t\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"SYSTEM\")) {\n\t\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\t\tvalueElement.addElement(\"sshRootUrl\").setText(sshServerUrl);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdom.writeToFile(file, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tVersionedXmlDoc emailAddressesDom;\n\t\tFile emailAddressesFile = new File(dataDir, \"EmailAddresss.xml\");\n\t\temailAddressesDom = new VersionedXmlDoc();\n\t\tElement listElement = emailAddressesDom.addElement(\"list\");\n\t\t\n\t\tlong id = 1;\n\t\tMap<String, Element> primaryEmailElements = new HashMap<>();\n\t\tfor (Map.Entry<String, String> entry: primaryEmails.entrySet()) {\n\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\n\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\n\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\temailAddressElement.addElement(\"primary\").setText(\"true\");\n\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\n\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\n\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\n\t\t\tprimaryEmailElements.put(entry.getValue(), emailAddressElement);\n\t\t}\n\t\t\n\t\tfor (Map.Entry<String, String> entry: gitEmails.entrySet()) {\n\t\t\tif (!primaryEmails.containsKey(entry.getKey())) {\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"true\");\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\n\t\t\t\tprimaryEmailElements.get(entry.getValue()).element(\"git\").setText(\"false\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (Map.Entry<String, String> entry: alternateEmails.entrySet()) {\n\t\t\tif (!primaryEmails.containsKey(entry.getKey()) && !gitEmails.containsKey(entry.getKey())) {\n\t\t\t\tElement emailAddressElement = listElement.addElement(\"io.onedev.server.model.EmailAddress\");\n\t\t\t\temailAddressElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\temailAddressElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\t\temailAddressElement.addElement(\"primary\").setText(\"false\");\n\t\t\t\temailAddressElement.addElement(\"git\").setText(\"false\");\n\t\t\t\temailAddressElement.addElement(\"value\").setText(entry.getKey());\n\t\t\t\temailAddressElement.addElement(\"owner\").setText(entry.getValue());\n\t\t\t}\n\t\t}\n\t\t\n\t\temailAddressesDom.writeToFile(emailAddressesFile, true);\n\t}\n\t\t\t\n\tprivate void migrate83(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> issueInfos = new HashMap<>();\n\t\tMap<String, String> pullRequestInfos = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueInfo = MessageFormat.format(\n\t\t\t\t\t\t\t\"project id: {0}, issue number: {1}\", \n\t\t\t\t\t\t\telement.elementText(\"project\"), element.elementText(\"number\"));\n\t\t\t\t\tissueInfos.put(element.elementTextTrim(\"id\"), issueInfo);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestInfo = MessageFormat.format(\n\t\t\t\t\t\t\t\"project id: {0}, pull request number: {1}\", \n\t\t\t\t\t\t\telement.elementText(\"targetProject\"), element.elementText(\"number\"));\n\t\t\t\t\tpullRequestInfos.put(element.elementTextTrim(\"id\"), pullRequestInfo);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\n\t\t\t\t\t\tif (description.length() > Issue.MAX_DESCRIPTION_LEN) {\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, Issue.MAX_DESCRIPTION_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Issue description too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementTextTrim(\"id\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tString description = descriptionElement.getText().trim();\n\t\t\t\t\t\tif (description.length() > PullRequest.MAX_DESCRIPTION_LEN) {\n\t\t\t\t\t\t\tdescriptionElement.setText(StringUtils.abbreviate(description, PullRequest.MAX_DESCRIPTION_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Pull request description too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementTextTrim(\"id\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tString content = contentElement.getText().trim();\n\t\t\t\t\t\tif (content.length() > IssueComment.MAX_CONTENT_LEN) {\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, IssueComment.MAX_CONTENT_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Issue comment too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tissueInfos.get(element.elementText(\"issue\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tString content = contentElement.getText().trim();\n\t\t\t\t\t\tif (content.length() > PullRequestComment.MAX_CONTENT_LEN) {\n\t\t\t\t\t\t\tcontentElement.setText(StringUtils.abbreviate(content, PullRequestComment.MAX_CONTENT_LEN));\n\t\t\t\t\t\t\tlogger.warn(\"Pull request comment too long and truncated ({})\", \n\t\t\t\t\t\t\t\t\tpullRequestInfos.get(element.elementText(\"request\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null)\n\t\t\t\t\t\t\t\treceiveMailSettingElement.addElement(\"pollInterval\").setText(\"60\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate84(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate85(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"uuid\").setText(UUID.randomUUID().toString());\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate86(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate87(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"DockerExecutor\")) \n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"mountDockerSock\").setText(\"false\");\n\t\t\t\t\t\t\t\telse if (executorElement.getName().contains(\"KubernetesExecutor\")) \n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"mountContainerSock\").setText(\"false\");\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tElement jobRequirementElement = executorElement.element(\"jobRequirement\");\n\t\t\t\t\t\t\t\tif (jobRequirementElement != null)\n\t\t\t\t\t\t\t\t\tjobRequirementElement.setName(\"jobAuthorization\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate88(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"resolved\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate89(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, Integer> pullRequestCommentCounts = new HashMap<>();\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString pullRequestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(pullRequestId);\n\t\t\t\t\tif (commentCount == null) \n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\tcommentCount++;\n\t\t\t\t\tpullRequestCommentCounts.put(pullRequestId, commentCount);\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tString className = dataElement.attributeValue(\"class\");\n\t\t\t\t\tif (className.contains(\"PullRequestAssigneeAddData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestAssigneeRemoveData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestReviewerAddData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestReviewerRemoveData\")\n\t\t\t\t\t\t\t|| className.contains(\"PullRequestReviewWithdrawData\")) {\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestReviews.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement resultElement = element.element(\"result\");\n\t\t\t\t\tif (resultElement != null) {\n\t\t\t\t\t\tElement approvedElement = resultElement.element(\"approved\");\n\t\t\t\t\t\tif (approvedElement != null) {\n\t\t\t\t\t\t\tif (approvedElement.getTextTrim().equals(\"true\"))\n\t\t\t\t\t\t\t\telement.addElement(\"status\").setText(\"APPROVED\");\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\telement.addElement(\"status\").setText(\"REQUESTED_FOR_CHANGES\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement.addElement(\"status\").setText(\"PENDING\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresultElement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.addElement(\"status\").setText(\"PENDING\");\n\t\t\t\t\t}\n\t\t\t\t\tElement statusDateElement = element.addElement(\"statusDate\");\n\t\t\t\t\tstatusDateElement.addAttribute(\"class\", \"sql-timestamp\");\n\t\t\t\t\tstatusDateElement.setText(\"2020-01-22T16:08:49.869000000Z\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tInteger commentCount = pullRequestCommentCounts.get(element.elementTextTrim(\"id\"));\n\t\t\t\t\tif (commentCount == null)\n\t\t\t\t\t\tcommentCount = 0;\n\t\t\t\t\telement.element(\"commentCount\").setText(String.valueOf(commentCount));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate90(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement closeInfoElement = element.element(\"closeInfo\");\n\t\t\t\t\tif (closeInfoElement != null) \n\t\t\t\t\t\tcloseInfoElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate91(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate92(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements())  \n\t\t\t\t\telement.addElement(\"confidential\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Roles.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"codePrivilege\").equals(\"WRITE\"))\n\t\t\t\t\t\telement.addElement(\"accessConfidentialIssues\").setText(\"true\");\n\t\t\t\t\telse\n\t\t\t\t\t\telement.addElement(\"accessConfidentialIssues\").setText(\"false\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueChanges.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement dataElement = element.element(\"data\");\n\t\t\t\t\tif (dataElement.attributeValue(\"class\").contains(\"IssueBatchUpdateData\")) {\n\t\t\t\t\t\tdataElement.addElement(\"oldConfidential\").setText(\"false\");\n\t\t\t\t\t\tdataElement.addElement(\"newConfidential\").setText(\"false\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SERVICE_DESK_SETTING\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element issueCreationSettingElement: valueElement.element(\"issueCreationSettings\").elements()) \n\t\t\t\t\t\t\t\tissueCreationSettingElement.addElement(\"confidential\").setText(\"false\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate93(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate94(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"MAIL\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.addAttribute(\"class\", \"io.onedev.server.model.support.administration.mailsetting.OtherMailSetting\");\n\t\t\t\t\t\t\tElement receiveMailSettingElement = valueElement.element(\"receiveMailSetting\");\n\t\t\t\t\t\t\tif (receiveMailSettingElement != null) \n\t\t\t\t\t\t\t\treceiveMailSettingElement.setName(\"otherInboxPollSetting\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate95(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"GpgKeys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tbyte[] bytes = contentElement.getText().getBytes(StandardCharsets.UTF_8);\n\t\t\t\t\tcontentElement.setText(JVM.getBase64Codec().encode(bytes));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate96(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SERVICE_DESK_SETTING\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tElement preserveBeforeElement = valueElement.element(\"preserveBefore\");\n\t\t\t\t\t\t\tif (preserveBeforeElement != null)\n\t\t\t\t\t\t\t\tpreserveBeforeElement.detach();\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate97(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> emailOwners = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"EmailAddresss.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\temailOwners.put(element.elementTextTrim(\"id\"), element.elementTextTrim(\"owner\"));\n\t\t\t}\n\t\t}\t\t\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"GpgKeys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tElement emailAddressElement = element.element(\"emailAddress\");\n\t\t\t\t\telement.addElement(\"owner\").setText(emailOwners.get(emailAddressElement.getTextTrim()));\n\t\t\t\t\temailAddressElement.detach();\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\t\t\n\t}\n\t\n\tprivate void migrate98(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate99(File dataDir, Stack<Integer> versions) {\n\t\tMap<String, String> names = new HashMap<>();\n\t\tMap<String, String> parentIds = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tString name = element.elementText(\"name\").trim();\n\t\t\t\t\tString parentId;\n\t\t\t\t\tElement parentElement = element.element(\"parent\");\n\t\t\t\t\tif (parentElement != null)\n\t\t\t\t\t\tparentId = parentElement.getText().trim();\n\t\t\t\t\telse\n\t\t\t\t\t\tparentId = null;\n\t\t\t\t\tnames.put(id, name);\n\t\t\t\t\tparentIds.put(id, parentId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) { \n\t\t\t\t\tString id = element.elementText(\"id\").trim();\n\t\t\t\t\tList<String> pathSegments = new ArrayList<>();\n\t\t\t\t\t\n\t\t\t\t\tdo {\n\t\t\t\t\t\tpathSegments.add(names.get(id));\n\t\t\t\t\t\tid = parentIds.get(id);\n\t\t\t\t\t} while (id != null);\n\t\t\t\t\t\n\t\t\t\t\tCollections.reverse(pathSegments);\n\t\t\t\t\telement.addElement(\"path\").setText(StringUtils.join(pathSegments, \"/\"));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate100(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Builds.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) \n\t\t\t\t\telement.addElement(\"paused\").setText(\"false\");\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate101(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) \n\t\t\t\t\t\t\t\texecutorElement.addElement(\"shellAccessEnabled\").setText(\"false\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate102(File dataDir, Stack<Integer> versions) {\n\t}\n\t\n\tprivate void migrate103(File dataDir, Stack<Integer> versions) {\n\t\tVersionedXmlDoc projectUpdatesDom;\n\t\tFile projectUpdatesFile = new File(dataDir, \"ProjectUpdates.xml\");\n\t\tprojectUpdatesDom = new VersionedXmlDoc();\n\t\tElement listElement = projectUpdatesDom.addElement(\"list\");\n\t\t\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString projectId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement updateDateElement = element.element(\"updateDate\");\n\t\t\t\t\telement.addElement(\"update\").setText(projectId);\n\t\t\t\t\t\n\t\t\t\t\tElement updateElement = listElement.addElement(\"io.onedev.server.model.ProjectUpdate\");\n\t\t\t\t\tupdateElement.addAttribute(\"revision\", \"0.0\");\n\t\t\t\t\tupdateElement.addElement(\"id\").setText(projectId);\n\t\t\t\t\tupdateElement.addElement(\"date\").setText(updateDateElement.getText().trim());\n\t\t\t\t\tupdateDateElement.detach();\n\t\t\t\t\t\n\t\t\t\t\telement.addElement(\"codeAnalysisSetting\");\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (element.elementTextTrim(\"key\").equals(\"PERFORMANCE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvalueElement.element(\"serverJobExecutorCpuQuota\").detach();\n\t\t\t\t\t\t\tvalueElement.element(\"serverJobExecutorMemoryQuota\").detach();\n\t\t\t\t\t\t\tvalueElement.element(\"cpuIntensiveTaskConcurrency\").detach();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (element.elementTextTrim(\"key\").equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tElement mountDockerSockElement = executorElement.element(\"mountDockerSock\");\n\t\t\t\t\t\t\t\tif (mountDockerSockElement != null && mountDockerSockElement.attribute(\"defined-in\") != null)\n\t\t\t\t\t\t\t\t\tmountDockerSockElement.detach();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\t\t\t\n\t\tprojectUpdatesDom.writeToFile(projectUpdatesFile, true);\n\t}\n\n\tprivate static final Pattern migrate104_pattern = Pattern.compile(\"\\\\(/projects/(\\\\d+)/attachment/(.*?)\\\\)\");\n\t\n\tprivate String migrate104_markdown(String content) {\n\t\tStringBuffer buffer = new StringBuffer();\n\t\tMatcher matcher = migrate104_pattern.matcher(content);\n\t\twhile (matcher.find()) {\n\t    \tmatcher.appendReplacement(buffer, \n\t    \t\t\tMatcher.quoteReplacement(\"(/~downloads/projects/\" + matcher.group(1) + \"/attachments/\" + matcher.group(2) + \")\"));  \n\t\t}\n\t\tmatcher.appendTail(buffer);\n\t\treturn buffer.toString();\n\t}\n\t\n\tprivate void migrate104(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null)\n\t\t\t\t\t\tdescriptionElement.setText(migrate104_markdown(descriptionElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null)\n\t\t\t\t\t\tdescriptionElement.setText(migrate104_markdown(descriptionElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tcontentElement.setText(migrate104_markdown(contentElement.getText()));\n\t\t\t\t}\t\t\t\t\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tprivate void migrate105(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) \n\t\t\t\t\t\t\t\texecutorElement.addElement(\"sitePublishEnabled\").setText(\"false\");\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n\tprivate void migrate106(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"AUTHENTICATOR\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) \n\t\t\t\t\t\t\tvalueElement.addElement(\"authenticationRequired\").setText(\"true\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate107(File dataDir, Stack<Integer> versions) {\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Settings.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString key = element.elementTextTrim(\"key\");\n\t\t\t\t\tif (key.equals(\"SYSTEM\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tvar gitConfigElement = valueElement.element(\"gitConfig\");\n\t\t\t\t\t\t\tgitConfigElement.setName(\"gitLocation\");\n\t\t\t\t\t\t\tvar clazz = gitConfigElement.attributeValue(\"class\").replace(\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.config.\",\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.location.\");\n\t\t\t\t\t\t\tgitConfigElement.addAttribute(\"class\", clazz);\n\n\t\t\t\t\t\t\tvar curlConfigElement = valueElement.element(\"curlConfig\");\n\t\t\t\t\t\t\tcurlConfigElement.setName(\"curlLocation\");\n\t\t\t\t\t\t\tclazz = curlConfigElement.attributeValue(\"class\").replace(\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.config.\",\n\t\t\t\t\t\t\t\t\t\"io.onedev.server.git.location.\");\n\t\t\t\t\t\t\tcurlConfigElement.addAttribute(\"class\", clazz);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"SSO_CONNECTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element connectorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (connectorElement.getName().contains(\"OpenIdConnector\")) {\n\t\t\t\t\t\t\t\t\tElement issuerUrlElement = connectorElement.element(\"issuerUrl\");\n\t\t\t\t\t\t\t\t\tissuerUrlElement.setName(\"configurationDiscoveryUrl\");\n\t\t\t\t\t\t\t\t\tissuerUrlElement.setText(issuerUrlElement.getText().trim() + \"/.well-known/openid-configuration\"); \n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"JOB_EXECUTORS\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tfor (Element executorElement: valueElement.elements()) {\n\t\t\t\t\t\t\t\tif (executorElement.getName().contains(\"KubernetesExecutor\")) {\n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"cpuRequest\").setText(\"250m\");\n\t\t\t\t\t\t\t\t\texecutorElement.addElement(\"memoryRequest\").setText(\"256Mi\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (key.equals(\"PERFORMANCE\")) {\n\t\t\t\t\t\tElement valueElement = element.element(\"value\");\n\t\t\t\t\t\tif (valueElement != null) {\n\t\t\t\t\t\t\tint cpuIntensiveTaskConcurrency;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tHardwareAbstractionLayer hardware = new SystemInfo().getHardware();\n\t\t\t\t\t\t\t\tcpuIntensiveTaskConcurrency = hardware.getProcessor().getLogicalProcessorCount();\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\tcpuIntensiveTaskConcurrency = 4;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvalueElement.addElement(\"cpuIntensiveTaskConcurrency\")\n\t\t\t\t\t\t\t\t\t.setText(String.valueOf(cpuIntensiveTaskConcurrency));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.addElement(\"gitPackConfig\");\n\t\t\t\t\t\n\t\t\t\t\tfor (var branchProtectionElement: element.element(\"branchProtections\").elements()) {\n\t\t\t\t\t\tbranchProtectionElement.setName(\"io.onedev.server.model.support.code.BranchProtection\");\n\t\t\t\t\t\tfor (var fileProtectionElement: branchProtectionElement.element(\"fileProtections\").elements()) \n\t\t\t\t\t\t\tfileProtectionElement.setName(\"io.onedev.server.model.support.code.FileProtection\");\n\t\t\t\t\t}\n\t\t\t\t\tfor (var tagProtectionElement: element.element(\"tagProtections\").elements()) {\n\t\t\t\t\t\ttagProtectionElement.setName(\"io.onedev.server.model.support.code.TagProtection\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t} else if (file.getName().startsWith(\"Agents.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element : dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"memory\").detach();\n\t\t\t\t\tElement cpuElement = element.element(\"cpu\");\n\t\t\t\t\tcpuElement.setName(\"cpus\");\n\t\t\t\t\tcpuElement.setText(String.valueOf(Integer.parseInt(cpuElement.getTextTrim())/1000));\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate Set<String> getMentioned108(Map<String, String> userIds, String content) {\n\t\tSet<String> mentioned = new HashSet<>();\n\t\tMarkdownManager markdownManager = OneDev.getInstance(MarkdownManager.class);\n\t\tfor (String userName: new MentionParser().parseMentions(markdownManager.render(content))) {\n\t\t\tString userId = userIds.get(userName);\n\t\t\tif (userId != null)\n\t\t\t\tmentioned.add(userId);\n\t\t}\n\t\treturn mentioned;\n\t}\n\t\n\tprivate void migrate108(File dataDir, Stack<Integer> versions) {\n\t\tSet<Pair<String, String>> issueMentions = new HashSet<>();\n\t\tSet<Pair<String, String>> pullRequestMentions = new HashSet<>();\n\t\tSet<Pair<String, String>> codeCommentMentions = new HashSet<>();\n\n\t\tMap<String, String> userIds = new HashMap<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tuserIds.put(element.elementText(\"name\").trim(), \n\t\t\t\t\t\t\telement.elementTextTrim(\"id\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Issues.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, descriptionElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tissueMentions.add(new Pair<>(issueId, userId));\t\t\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"IssueComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString issueId = element.elementTextTrim(\"issue\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tissueMentions.add(new Pair<>(issueId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString requestId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement descriptionElement = element.element(\"description\");\n\t\t\t\t\tif (descriptionElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, descriptionElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tpullRequestMentions.add(new Pair<>(requestId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"PullRequestComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString requestId = element.elementTextTrim(\"request\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tpullRequestMentions.add(new Pair<>(requestId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"CodeComments.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"id\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tcodeCommentMentions.add(new Pair<>(commentId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (file.getName().startsWith(\"CodeCommentReplys.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tString commentId = element.elementTextTrim(\"comment\");\n\t\t\t\t\tElement contentElement = element.element(\"content\");\n\t\t\t\t\tif (contentElement != null) {\n\t\t\t\t\t\tgetMentioned108(userIds, contentElement.getText()).forEach(userId -> {\n\t\t\t\t\t\t\tcodeCommentMentions.add(new Pair<>(commentId, userId));\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tVersionedXmlDoc mentionsDom;\n\t\tFile mentionsFile = new File(dataDir, \"IssueMentions.xml\");\n\t\tmentionsDom = new VersionedXmlDoc();\n\t\tElement mentionsElement = mentionsDom.addElement(\"list\");\n\n\t\tLong id = 1L;\n\t\tfor (Pair<String, String> issueMention : issueMentions) {\n\t\t\tElement mentionElement = mentionsElement.addElement(\"io.onedev.server.model.IssueMention\");\n\t\t\tmentionElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\tmentionElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tmentionElement.addElement(\"issue\").setText(issueMention.getFirst());\n\t\t\tmentionElement.addElement(\"user\").setText(issueMention.getSecond());\n\t\t}\n\t\tmentionsDom.writeToFile(mentionsFile, true);\n\n\t\tmentionsFile = new File(dataDir, \"PullRequestMentions.xml\");\n\t\tmentionsDom = new VersionedXmlDoc();\n\t\tmentionsElement = mentionsDom.addElement(\"list\");\n\n\t\tid = 1L;\n\t\tfor (Pair<String, String> it : pullRequestMentions) {\n\t\t\tElement mentionElement = mentionsElement.addElement(\"io.onedev.server.model.PullRequestMention\");\n\t\t\tmentionElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\tmentionElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tmentionElement.addElement(\"request\").setText(it.getFirst());\n\t\t\tmentionElement.addElement(\"user\").setText(it.getSecond());\n\t\t}\n\t\tmentionsDom.writeToFile(mentionsFile, true);\n\n\t\tmentionsFile = new File(dataDir, \"CodeCommentMentions.xml\");\n\t\tmentionsDom = new VersionedXmlDoc();\n\t\tmentionsElement = mentionsDom.addElement(\"list\");\n\n\t\tid = 1L;\n\t\tfor (Pair<String, String> it : codeCommentMentions) {\n\t\t\tElement mentionElement = mentionsElement.addElement(\"io.onedev.server.model.CodeCommentMention\");\n\t\t\tmentionElement.addElement(\"id\").setText(String.valueOf(id++));\n\t\t\tmentionElement.addAttribute(\"revision\", \"0.0\");\n\t\t\tmentionElement.addElement(\"comment\").setText(it.getFirst());\n\t\t\tmentionElement.addElement(\"user\").setText(it.getSecond());\n\t\t}\n\t\tmentionsDom.writeToFile(mentionsFile, true);\n\t}\n\n\tprivate void migrate109(File dataDir, Stack<Integer> versions) {\n\t\tvar updateIds = new HashSet<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Projects.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement updateElement = element.element(\"update\");\n\t\t\t\t\tupdateIds.add(updateElement.getTextTrim());\n\t\t\t\t\tupdateElement.setName(\"dynamics\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"ProjectUpdates.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tif (!updateIds.contains(element.elementTextTrim(\"id\"))) {\n\t\t\t\t\t\telement.detach();\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.element(\"date\").setName(\"lastActivityDate\");\n\t\t\t\t\t\telement.setName(\"io.onedev.server.model.ProjectDynamics\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tFileUtils.deleteFile(file);\n\t\t\t\tString newFileName = file.getName().replace(\"Update\", \"Dynamics\");\n\t\t\t\tdom.writeToFile(new File(file.getParent(), newFileName), false);\n\t\t\t} else if (file.getName().startsWith(\"Issues.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"CodeComments.xml\") \n\t\t\t\t\t|| file.getName().startsWith(\"PullRequests.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\tElement lastUpdateElement = element.element(\"lastUpdate\");\n\t\t\t\t\tlastUpdateElement.setName(\"lastActivity\");\n\t\t\t\t\tlastUpdateElement.element(\"activity\").setName(\"description\");\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().contains(\".xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tList<Node> selectedNodes = new ArrayList<>();\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.pullrequest.NamedPullRequestQuery\"));\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.issue.NamedIssueQuery\"));\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.NamedCodeCommentQuery\"));\n\t\t\t\tselectedNodes.addAll(dom.selectNodes(\"//io.onedev.server.model.support.NamedProjectQuery\"));\n\t\t\t\tfor (Node node : selectedNodes) {\n\t\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\t\tElement element = (Element) node;\n\t\t\t\t\t\tElement queryElement = element.element(\"query\");\n\t\t\t\t\t\tif (queryElement != null)\n\t\t\t\t\t\t\tqueryElement.setText(queryElement.getText().trim().replace(\"\\\"Update Date\\\"\", \"\\\"Last Activity Date\\\"\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate void migrate110(File dataDir, Stack<Integer> versions) {\n\t\tvar updateIds = new HashSet<>();\n\t\tfor (File file: dataDir.listFiles()) {\n\t\t\tif (file.getName().startsWith(\"Users.xml\")) {\n\t\t\t\tVersionedXmlDoc dom = VersionedXmlDoc.fromFile(file);\n\t\t\t\tfor (Element element: dom.getRootElement().elements()) {\n\t\t\t\t\telement.element(\"accessToken\").setText(CryptoUtils.generateSecret());\n\t\t\t\t}\n\t\t\t\tdom.writeToFile(file, false);\n\t\t\t}\n\t\t}\n\t}\n\t\n}\n", "package io.onedev.server.model;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport io.onedev.server.util.CryptoUtils;\nimport io.onedev.server.util.facade.EmailAddressFacade;\nimport io.onedev.server.web.editable.annotation.Editable;\nimport org.hibernate.annotations.Cache;\nimport org.hibernate.annotations.CacheConcurrencyStrategy;\n\nimport javax.persistence.*;\nimport javax.validation.constraints.Email;\nimport javax.validation.constraints.NotEmpty;\n\n@Editable\n@Entity\n@Table(indexes={@Index(columnList=\"o_owner_id\"), @Index(columnList=\"value\")})\n@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\npublic class EmailAddress extends AbstractEntity {\n    \n    private static final long serialVersionUID = 1L;\n    \n    public static final String PROP_OWNER = \"owner\";\n    \n    public static final String PROP_VALUE = \"value\";\n    \n    @Column(nullable=false, unique=true)\n    private String value;\n    \n    @JsonIgnore\n    private String verificationCode = CryptoUtils.generateSecret();\n    \n    private boolean primary;\n    \n    private boolean git;\n    \n    @ManyToOne(fetch=FetchType.LAZY)\n    @JoinColumn(nullable=false)\n    private User owner;\n\n    @Editable\n    @Email\n    @NotEmpty\n    public String getValue() {\n\t\treturn value;\n\t}\n\n\tpublic void setValue(String value) {\n\t\tthis.value = value;\n\t}\n\n\t@Editable\n\tpublic String getVerificationCode() {\n\t\treturn verificationCode;\n\t}\n\n\tpublic void setVerificationCode(String verificationCode) {\n\t\tthis.verificationCode = verificationCode;\n\t}\n\n\t@Editable\n\tpublic boolean isPrimary() {\n\t\treturn primary;\n\t}\n\n\tpublic void setPrimary(boolean primary) {\n\t\tthis.primary = primary;\n\t}\n\n\t@Editable\n\tpublic boolean isGit() {\n\t\treturn git;\n\t}\n\n\tpublic void setGit(boolean git) {\n\t\tthis.git = git;\n\t}\n\n\tpublic User getOwner() {\n        return owner;\n    }\n\n    public void setOwner(User owner) {\n        this.owner = owner;\n    }\n\n\tpublic boolean isVerified() {\n    \treturn getVerificationCode() == null;\n    }\n\n\t@Override\n\tpublic EmailAddressFacade getFacade() {\n\t\treturn new EmailAddressFacade(getId(), getValue(), isPrimary(), isGit(), \n\t\t\t\tgetVerificationCode(), getOwner().getId());\n\t}\n\t\n}\n", "package io.onedev.server.model;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.google.common.base.MoreObjects;\nimport edu.emory.mathcs.backport.java.util.Collections;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.EmailAddressManager;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.model.support.NamedProjectQuery;\nimport io.onedev.server.model.support.QueryPersonalization;\nimport io.onedev.server.model.support.TwoFactorAuthentication;\nimport io.onedev.server.model.support.administration.authenticator.Authenticator;\nimport io.onedev.server.model.support.administration.sso.SsoConnector;\nimport io.onedev.server.model.support.build.NamedBuildQuery;\nimport io.onedev.server.model.support.issue.NamedIssueQuery;\nimport io.onedev.server.model.support.pullrequest.NamedPullRequestQuery;\nimport io.onedev.server.security.SecurityUtils;\nimport io.onedev.server.util.CryptoUtils;\nimport io.onedev.server.util.facade.UserFacade;\nimport io.onedev.server.util.validation.annotation.UserName;\nimport io.onedev.server.util.watch.QuerySubscriptionSupport;\nimport io.onedev.server.util.watch.QueryWatchSupport;\nimport io.onedev.server.web.editable.annotation.Editable;\nimport io.onedev.server.web.editable.annotation.Password;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.apache.shiro.subject.SimplePrincipalCollection;\nimport org.apache.shiro.subject.Subject;\nimport org.eclipse.jgit.lib.PersonIdent;\nimport org.hibernate.annotations.Cache;\nimport org.hibernate.annotations.CacheConcurrencyStrategy;\n\nimport javax.annotation.Nullable;\nimport javax.persistence.*;\nimport javax.validation.constraints.NotEmpty;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport static io.onedev.server.model.User.*;\n\n@Entity\n@Table(\n\t\tindexes={@Index(columnList=PROP_NAME), @Index(columnList=PROP_FULL_NAME), \n\t\t\t\t@Index(columnList=PROP_SSO_CONNECTOR), @Index(columnList=PROP_ACCESS_TOKEN)})\n@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n@Editable\npublic class User extends AbstractEntity implements AuthenticationInfo {\n\n\tprivate static final long serialVersionUID = 1L;\n\t\n\tpublic static final Long UNKNOWN_ID = -2L;\n\t\n\tpublic static final Long SYSTEM_ID = -1L;\n\t\n\tpublic static final Long ROOT_ID = 1L;\n\t\n\tpublic static final String SYSTEM_NAME = \"OneDev\";\n\t\n\tpublic static final String SYSTEM_EMAIL_ADDRESS = \"noreply@onedev.io\";\n\t\n\tpublic static final String UNKNOWN_NAME = \"Unknown\";\n\t\n\tpublic static final String EXTERNAL_MANAGED = \"external_managed\";\n\t\n\tpublic static final String PROP_NAME = \"name\";\n\t\n\tpublic static final String PROP_PASSWORD = \"password\";\n\t\n\tpublic static final String PROP_FULL_NAME = \"fullName\";\n\t\n\tpublic static final String PROP_SSO_CONNECTOR = \"ssoConnector\";\n\t\n\tpublic static final String PROP_ACCESS_TOKEN = \"accessToken\";\n\t\n\tprivate static ThreadLocal<Stack<User>> stack =  new ThreadLocal<Stack<User>>() {\n\n\t\t@Override\n\t\tprotected Stack<User> initialValue() {\n\t\t\treturn new Stack<User>();\n\t\t}\n\t\n\t};\n\t\n\t@Column(unique=true, nullable=false)\n    private String name;\n\n    @Column(length=1024, nullable=false)\n    @JsonIgnore\n    private String password;\n\n\tprivate String fullName;\n\n\t@JsonIgnore\n\tprivate String ssoConnector;\n\t\n\t@Column(unique=true, nullable=false)\n\t@JsonIgnore\n\tprivate String accessToken = CryptoUtils.generateSecret();\n\t\n\t@JsonIgnore\n\t@Lob\n\t@Column(length=65535)\n\tprivate TwoFactorAuthentication twoFactorAuthentication;\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<UserAuthorization> projectAuthorizations = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<Dashboard> dashboards = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<DashboardVisit> dashboardVisits = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<DashboardUserShare> dashboardShares = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<IssueAuthorization> issueAuthorizations = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<Membership> memberships = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\tprivate Collection<PullRequestReview> pullRequestReviews = new ArrayList<>();\n\t\n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\tprivate Collection<PullRequestAssignment> pullRequestAssignments = new ArrayList<>();\n\t\n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<PullRequestWatch> pullRequestWatches = new ArrayList<>();\n\n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<IssueWatch> issueWatches = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<IssueVote> issueVotes = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<IssueQueryPersonalization> issueQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<BuildQueryPersonalization> buildQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<PullRequestQueryPersonalization> pullRequestQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<CommitQueryPersonalization> commitQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n    private Collection<CodeCommentQueryPersonalization> codeCommentQueryPersonalizations = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n    private Collection<SshKey> sshKeys = new ArrayList<>();\n    \n\t@OneToMany(mappedBy=\"user\", cascade=CascadeType.REMOVE)\n\tprivate Collection<PendingSuggestionApply> pendingSuggestionApplies = new ArrayList<>();\n\n    @OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n    private Collection<EmailAddress> emailAddresses = new ArrayList<>();\n    \n    @OneToMany(mappedBy=\"owner\", cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n    private Collection<GpgKey> gpgKeys = new ArrayList<>();\n\n\t@OneToMany(mappedBy=CodeCommentMention.PROP_USER, cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<CodeCommentMention> codeCommentMentions = new ArrayList<>();\n\n\t@OneToMany(mappedBy=IssueMention.PROP_USER, cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<IssueMention> issueMentions = new ArrayList<>();\n\n\t@OneToMany(mappedBy=PullRequestMention.PROP_USER, cascade=CascadeType.REMOVE)\n\t@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)\n\tprivate Collection<PullRequestMention> pullRequestMentions = new ArrayList<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedProjectQuery> projectQueries = new ArrayList<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedIssueQuery> issueQueries = new ArrayList<>();\n\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedPullRequestQuery> pullRequestQueries = new ArrayList<>();\n\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate ArrayList<NamedBuildQuery> buildQueries = new ArrayList<>();\n\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate LinkedHashMap<String, Boolean> issueQueryWatches = new LinkedHashMap<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate LinkedHashMap<String, Boolean> pullRequestQueryWatches = new LinkedHashMap<>();\n\t\n    @JsonIgnore\n\t@Lob\n\t@Column(nullable=false, length=65535)\n\tprivate LinkedHashSet<String> buildQuerySubscriptions = new LinkedHashSet<>();\n\t\n    private transient Collection<Group> groups;\n    \n    private transient List<EmailAddress> sortedEmailAddresses;\n    \n    private transient Optional<EmailAddress> primaryEmailAddress;\n    \n    private transient Optional<EmailAddress> gitEmailAddress;\n    \n\tpublic QueryPersonalization<NamedProjectQuery> getProjectQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedProjectQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedProjectQuery> getQueries() {\n\t\t\t\treturn projectQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedProjectQuery> userQueries) {\n\t\t\t\tprojectQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedProjectQuery> getQueryWatchSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedProjectQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\tpublic QueryPersonalization<NamedIssueQuery> getIssueQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedIssueQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedIssueQuery> getQueries() {\n\t\t\t\treturn issueQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedIssueQuery> userQueries) {\n\t\t\t\tissueQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedIssueQuery> getQueryWatchSupport() {\n\t\t\t\treturn new QueryWatchSupport<NamedIssueQuery>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic LinkedHashMap<String, Boolean> getQueryWatches() {\n\t\t\t\t\t\treturn issueQueryWatches;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedIssueQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\tpublic QueryPersonalization<NamedPullRequestQuery> getPullRequestQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedPullRequestQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedPullRequestQuery> getQueries() {\n\t\t\t\treturn pullRequestQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedPullRequestQuery> userQueries) {\n\t\t\t\tpullRequestQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedPullRequestQuery> getQueryWatchSupport() {\n\t\t\t\treturn new QueryWatchSupport<NamedPullRequestQuery>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic LinkedHashMap<String, Boolean> getQueryWatches() {\n\t\t\t\t\t\treturn pullRequestQueryWatches;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedPullRequestQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\tpublic QueryPersonalization<NamedBuildQuery> getBuildQueryPersonalization() {\n\t\treturn new QueryPersonalization<NamedBuildQuery>() {\n\n\t\t\t@Override\n\t\t\tpublic Project getProject() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic User getUser() {\n\t\t\t\treturn User.this;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic ArrayList<NamedBuildQuery> getQueries() {\n\t\t\t\treturn buildQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setQueries(ArrayList<NamedBuildQuery> userQueries) {\n\t\t\t\tbuildQueries = userQueries;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QueryWatchSupport<NamedBuildQuery> getQueryWatchSupport() {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic QuerySubscriptionSupport<NamedBuildQuery> getQuerySubscriptionSupport() {\n\t\t\t\treturn new QuerySubscriptionSupport<NamedBuildQuery>() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic LinkedHashSet<String> getQuerySubscriptions() {\n\t\t\t\t\t\treturn buildQuerySubscriptions;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onUpdated() {\n\t\t\t\tOneDev.getInstance(UserManager.class).save(User.this);\n\t\t\t}\n\t\t\t\n\t\t};\n\t}\n\t\n\t@Override\n    public PrincipalCollection getPrincipals() {\n        return new SimplePrincipalCollection(getId(), \"\");\n    }\n    \n    @Override\n    public Object getCredentials() {\n    \treturn password;\n    }\n\n    public Subject asSubject() {\n    \treturn SecurityUtils.asSubject(getId());\n    }\n\n\t@Editable(name=\"Login Name\", order=100)\n\t@UserName\n\t@NotEmpty\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\t\n    public void setName(String name) {\n    \tthis.name = name;\n    }\n    \n\t@Editable(order=150)\n\t@Password(needConfirm=true, autoComplete=\"new-password\")\n\t@NotEmpty\n\tpublic String getPassword() {\n\t\treturn password;\n\t}\n\n    /**\n     * Set password of this user. \n     * \n     * @param password\n     * \t\t\tpassword to set\n     */\n    public void setPassword(String password) {\n    \tthis.password = password;\n    }\n\n    public boolean isExternalManaged() {\n    \treturn getPassword().equals(EXTERNAL_MANAGED);\n    }\n    \n\t@Editable(order=200)\n\tpublic String getFullName() {\n\t\treturn fullName;\n\t}\n\n\tpublic void setFullName(String fullName) {\n\t\tthis.fullName = fullName;\n\t}\n\n\t@Nullable\n\tpublic String getSsoConnector() {\n\t\treturn ssoConnector;\n\t}\n\n\tpublic void setSsoConnector(String ssoConnector) {\n\t\tthis.ssoConnector = ssoConnector;\n\t}\n\n\tpublic String getAccessToken() {\n\t\treturn accessToken;\n\t}\n\n\tpublic void setAccessToken(String accessToken) {\n\t\tthis.accessToken = accessToken;\n\t}\n\n\t@Nullable\n\tpublic TwoFactorAuthentication getTwoFactorAuthentication() {\n\t\treturn twoFactorAuthentication;\n\t}\n\n\tpublic void setTwoFactorAuthentication(TwoFactorAuthentication twoFactorAuthentication) {\n\t\tthis.twoFactorAuthentication = twoFactorAuthentication;\n\t}\n\n\tpublic Collection<Membership> getMemberships() {\n\t\treturn memberships;\n\t}\n\n\tpublic void setMemberships(Collection<Membership> memberships) {\n\t\tthis.memberships = memberships;\n\t}\n\t\n\t@Override\n\tpublic String toString() {\n\t\treturn MoreObjects.toStringHelper(this)\n\t\t\t\t.add(\"name\", getName())\n\t\t\t\t.toString();\n\t}\n\t\n\tpublic PersonIdent asPerson() {\n\t\tif (isSystem()) {\n\t\t\treturn new PersonIdent(User.SYSTEM_NAME, User.SYSTEM_EMAIL_ADDRESS);\n\t\t} else {\n\t\t\tEmailAddress emailAddress = getGitEmailAddress();\n\t\t\tif (emailAddress != null && emailAddress.isVerified())\n\t\t\t\treturn new PersonIdent(getDisplayName(), emailAddress.getValue());\n\t\t\telse\n\t\t        throw new ExplicitException(\"No verified email for git operations\");\n\t\t}\n\t}\n\t\n\tpublic String getDisplayName() {\n\t\tif (getFullName() != null)\n\t\t\treturn getFullName();\n\t\telse\n\t\t\treturn getName();\n\t}\n\t\n\tpublic boolean isRoot() {\n\t\treturn ROOT_ID.equals(getId());\n\t}\n\n\tpublic boolean isSystem() {\n\t\treturn SYSTEM_ID.equals(getId());\n\t}\n\t\n\tpublic boolean isUnknown() {\n\t\treturn UNKNOWN_ID.equals(getId());\n\t}\n\t\n\tpublic boolean isOrdinary() {\n\t\treturn getId() > 0;\n\t}\n\t\n\tpublic Collection<UserAuthorization> getProjectAuthorizations() {\n\t\treturn projectAuthorizations;\n\t}\n\n\tpublic void setProjectAuthorizations(Collection<UserAuthorization> projectAuthorizations) {\n\t\tthis.projectAuthorizations = projectAuthorizations;\n\t}\n\n\tpublic Collection<IssueAuthorization> getIssueAuthorizations() {\n\t\treturn issueAuthorizations;\n\t}\n\n\tpublic void setIssueAuthorizations(Collection<IssueAuthorization> issueAuthorizations) {\n\t\tthis.issueAuthorizations = issueAuthorizations;\n\t}\n\n\t@Override\n\tpublic int compareTo(AbstractEntity entity) {\n\t\tUser user = (User) entity;\n\t\treturn getDisplayName().compareTo(user.getDisplayName());\n\t}\n\n\tpublic Collection<Group> getGroups() {\n\t\tif (groups == null)  \n\t\t\tgroups = getMemberships().stream().map(it->it.getGroup()).collect(Collectors.toList());\n\t\treturn groups;\n\t}\n\t\n\tpublic static void push(User user) {\n\t\tstack.get().push(user);\n\t}\n\n\tpublic static void pop() {\n\t\tstack.get().pop();\n\t}\n\t\n\t@Nullable\n\tpublic static User get() {\n\t\tif (!stack.get().isEmpty())\n\t\t\treturn stack.get().peek();\n\t\telse \n\t\t\treturn SecurityUtils.getUser();\n\t}\n\n    public Collection<SshKey> getSshKeys() {\n        return sshKeys;\n    }\n\n    public void setSshKeys(Collection<SshKey> sshKeys) {\n        this.sshKeys = sshKeys;\n    }\n    \n    public Collection<PendingSuggestionApply> getPendingSuggestionApplies() {\n\t\treturn pendingSuggestionApplies;\n\t}\n\n\tpublic void setPendingSuggestionApplies(Collection<PendingSuggestionApply> pendingSuggestionApplies) {\n\t\tthis.pendingSuggestionApplies = pendingSuggestionApplies;\n\t}\n\n\tpublic Collection<EmailAddress> getEmailAddresses() {\n\t\treturn emailAddresses;\n\t}\n\n\tpublic void setEmailAddresses(Collection<EmailAddress> emailAddresses) {\n\t\tthis.emailAddresses = emailAddresses;\n\t}\n\n\tpublic Collection<GpgKey> getGpgKeys() {\n\t\treturn gpgKeys;\n\t}\n\n\tpublic void setGpgKeys(Collection<GpgKey> gpgKeys) {\n\t\tthis.gpgKeys = gpgKeys;\n\t}\n\n\tpublic boolean isSshKeyExternalManaged() {\n    \tif (isExternalManaged()) {\n    \t\tif (getSsoConnector() != null) {\n    \t\t\treturn false;\n    \t\t} else {\n\t    \t\tAuthenticator authenticator = OneDev.getInstance(SettingManager.class).getAuthenticator();\n\t    \t\treturn authenticator != null && authenticator.isManagingSshKeys();\n    \t\t}\n    \t} else {\n    \t\treturn false;\n    \t}\n    }\n    \n    public boolean isMembershipExternalManaged() {\n    \tif (isExternalManaged()) {\n    \t\tSettingManager settingManager = OneDev.getInstance(SettingManager.class);\n    \t\tif (getSsoConnector() != null) {\n    \t\t\tSsoConnector ssoConnector = settingManager.getSsoConnectors().stream()\n    \t\t\t\t\t.filter(it->it.getName().equals(getSsoConnector()))\n    \t\t\t\t\t.findFirst().orElse(null);\n    \t\t\treturn ssoConnector != null && ssoConnector.isManagingMemberships();\n    \t\t} else {\n\t    \t\tAuthenticator authenticator = settingManager.getAuthenticator();\n\t    \t\treturn authenticator != null && authenticator.isManagingMemberships();\n    \t\t}\n    \t} else {\n    \t\treturn false;\n    \t}\n    }\n\n    public String getAuthSource() {\n\t\tif (isExternalManaged()) {\n\t\t\tif (getSsoConnector() != null)\n\t\t\t\treturn \"SSO Provider: \" + getSsoConnector();\n\t\t\telse\n\t\t\t\treturn \"External Authenticator\";\n\t\t} else {\n\t\t\treturn \"Builtin User Store\";\n\t\t}\n    }\n\n\tpublic Collection<Dashboard> getDashboards() {\n\t\treturn dashboards;\n\t}\n\n\tpublic void setDashboards(Collection<Dashboard> dashboards) {\n\t\tthis.dashboards = dashboards;\n\t}\n\n\tpublic Collection<DashboardVisit> getDashboardVisits() {\n\t\treturn dashboardVisits;\n\t}\n\t\n\tpublic void setDashboardVisits(Collection<DashboardVisit> dashboardVisits) {\n\t\tthis.dashboardVisits = dashboardVisits;\n\t}\n\t\n\t@Nullable\n\tpublic DashboardVisit getDashboardVisit(Dashboard dashboard) {\n\t\tfor (DashboardVisit visit: getDashboardVisits()) {\n\t\t\tif (visit.getDashboard().equals(dashboard))\n\t\t\t\treturn visit;\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic Collection<DashboardUserShare> getDashboardShares() {\n\t\treturn dashboardShares;\n\t}\n\n\tpublic void setDashboardShares(Collection<DashboardUserShare> dashboardShares) {\n\t\tthis.dashboardShares = dashboardShares;\n\t}\n\n\tpublic Collection<PullRequestReview> getPullRequestReviews() {\n\t\treturn pullRequestReviews;\n\t}\n\n\tpublic void setPullRequestReviews(Collection<PullRequestReview> pullRequestReviews) {\n\t\tthis.pullRequestReviews = pullRequestReviews;\n\t}\n\n\tpublic Collection<PullRequestAssignment> getPullRequestAssignments() {\n\t\treturn pullRequestAssignments;\n\t}\n\n\tpublic void setPullRequestAssignments(Collection<PullRequestAssignment> pullRequestAssignments) {\n\t\tthis.pullRequestAssignments = pullRequestAssignments;\n\t}\n\n\tpublic Collection<PullRequestWatch> getPullRequestWatches() {\n\t\treturn pullRequestWatches;\n\t}\n\n\tpublic void setPullRequestWatches(Collection<PullRequestWatch> pullRequestWatches) {\n\t\tthis.pullRequestWatches = pullRequestWatches;\n\t}\n\n\tpublic Collection<IssueWatch> getIssueWatches() {\n\t\treturn issueWatches;\n\t}\n\n\tpublic void setIssueWatches(Collection<IssueWatch> issueWatches) {\n\t\tthis.issueWatches = issueWatches;\n\t}\n\n\tpublic Collection<IssueVote> getIssueVotes() {\n\t\treturn issueVotes;\n\t}\n\n\tpublic void setIssueVotes(Collection<IssueVote> issueVotes) {\n\t\tthis.issueVotes = issueVotes;\n\t}\n\n\tpublic Collection<IssueQueryPersonalization> getIssueQueryPersonalizations() {\n\t\treturn issueQueryPersonalizations;\n\t}\n\n\tpublic void setIssueQueryPersonalizations(Collection<IssueQueryPersonalization> issueQueryPersonalizations) {\n\t\tthis.issueQueryPersonalizations = issueQueryPersonalizations;\n\t}\n\n\tpublic Collection<BuildQueryPersonalization> getBuildQueryPersonalizations() {\n\t\treturn buildQueryPersonalizations;\n\t}\n\n\tpublic void setBuildQueryPersonalizations(Collection<BuildQueryPersonalization> buildQueryPersonalizations) {\n\t\tthis.buildQueryPersonalizations = buildQueryPersonalizations;\n\t}\n\n\tpublic Collection<PullRequestQueryPersonalization> getPullRequestQueryPersonalizations() {\n\t\treturn pullRequestQueryPersonalizations;\n\t}\n\n\tpublic void setPullRequestQueryPersonalizations(Collection<PullRequestQueryPersonalization> pullRequestQueryPersonalizations) {\n\t\tthis.pullRequestQueryPersonalizations = pullRequestQueryPersonalizations;\n\t}\n\n\tpublic Collection<CommitQueryPersonalization> getCommitQueryPersonalizations() {\n\t\treturn commitQueryPersonalizations;\n\t}\n\n\tpublic void setCommitQueryPersonalizations(Collection<CommitQueryPersonalization> commitQueryPersonalizations) {\n\t\tthis.commitQueryPersonalizations = commitQueryPersonalizations;\n\t}\n\n\tpublic Collection<CodeCommentQueryPersonalization> getCodeCommentQueryPersonalizations() {\n\t\treturn codeCommentQueryPersonalizations;\n\t}\n\n\tpublic void setCodeCommentQueryPersonalizations(Collection<CodeCommentQueryPersonalization> codeCommentQueryPersonalizations) {\n\t\tthis.codeCommentQueryPersonalizations = codeCommentQueryPersonalizations;\n\t}\n\n\tpublic ArrayList<NamedProjectQuery> getUserProjectQueries() {\n\t\treturn projectQueries;\n\t}\n\n\tpublic void setProjectQueries(ArrayList<NamedProjectQuery> userProjectQueries) {\n\t\tthis.projectQueries = userProjectQueries;\n\t}\n\n\tpublic ArrayList<NamedIssueQuery> getUserIssueQueries() {\n\t\treturn issueQueries;\n\t}\n\n\tpublic void setIssueQueries(ArrayList<NamedIssueQuery> userIssueQueries) {\n\t\tthis.issueQueries = userIssueQueries;\n\t}\n\n\tpublic LinkedHashMap<String, Boolean> getIssueQueryWatches() {\n\t\treturn issueQueryWatches;\n\t}\n\n\tpublic void setIssueQueryWatches(LinkedHashMap<String, Boolean> issueQueryWatches) {\n\t\tthis.issueQueryWatches = issueQueryWatches;\n\t}\n\n\tpublic ArrayList<NamedPullRequestQuery> getUserPullRequestQueries() {\n\t\treturn pullRequestQueries;\n\t}\n\n\tpublic void setPullRequestQueries(ArrayList<NamedPullRequestQuery> userPullRequestQueries) {\n\t\tthis.pullRequestQueries = userPullRequestQueries;\n\t}\n\n\tpublic LinkedHashMap<String, Boolean> getPullRequestQueryWatches() {\n\t\treturn pullRequestQueryWatches;\n\t}\n\n\tpublic void setPullRequestQueryWatches(LinkedHashMap<String, Boolean> pullRequestQueryWatches) {\n\t\tthis.pullRequestQueryWatches = pullRequestQueryWatches;\n\t}\n\n\tpublic ArrayList<NamedBuildQuery> getUserBuildQueries() {\n\t\treturn buildQueries;\n\t}\n\n\tpublic void setBuildQueries(ArrayList<NamedBuildQuery> buildQueries) {\n\t\tthis.buildQueries = buildQueries;\n\t}\n\n\tpublic LinkedHashSet<String> getBuildQuerySubscriptions() {\n\t\treturn buildQuerySubscriptions;\n\t}\n\n\tpublic void setBuildQuerySubscriptions(LinkedHashSet<String> buildQuerySubscriptions) {\n\t\tthis.buildQuerySubscriptions = buildQuerySubscriptions;\n\t}\n\t\n\tpublic boolean isEnforce2FA() {\n\t\treturn OneDev.getInstance(SettingManager.class).getSecuritySetting().isEnforce2FA() \n\t\t\t\t|| getGroups().stream().anyMatch(it->it.isEnforce2FA());\n\t}\n\n\tpublic List<EmailAddress> getSortedEmailAddresses() {\n\t\tif (sortedEmailAddresses == null) {\n\t\t\tsortedEmailAddresses = new ArrayList<>(getEmailAddresses());\n\t\t\tCollections.sort(sortedEmailAddresses);\n\t\t}\n\t\treturn sortedEmailAddresses;\n\t}\n\t\n\tprivate EmailAddressManager getEmailAddressManager() {\n\t\treturn OneDev.getInstance(EmailAddressManager.class);\n\t}\n\t\n\t@Nullable\n\tpublic EmailAddress getPrimaryEmailAddress() {\n\t\tif (primaryEmailAddress == null)\n\t\t\tprimaryEmailAddress = Optional.ofNullable(getEmailAddressManager().findPrimary(this));\n\t\treturn primaryEmailAddress.orElse(null);\n\t}\n\n\t@Nullable\n\tpublic EmailAddress getGitEmailAddress() {\n\t\tif (gitEmailAddress == null)\n\t\t\tgitEmailAddress = Optional.ofNullable(getEmailAddressManager().findGit(this));\n\t\treturn gitEmailAddress.orElse(null);\n\t}\n\t\n\t@Override\n\tpublic UserFacade getFacade() {\n\t\treturn new UserFacade(getId(), getName(), getFullName(), getAccessToken());\n\t}\n\t\n}\n", "package io.onedev.server.model.support;\n\nimport io.onedev.server.event.project.RefUpdated;\nimport io.onedev.server.event.project.build.BuildEvent;\nimport io.onedev.server.event.project.codecomment.CodeCommentEvent;\nimport io.onedev.server.event.project.issue.IssueEvent;\nimport io.onedev.server.event.project.pullrequest.PullRequestEvent;\nimport io.onedev.server.util.CryptoUtils;\nimport io.onedev.server.web.editable.annotation.Editable;\n\nimport javax.validation.constraints.NotEmpty;\nimport javax.validation.constraints.Size;\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@Editable\npublic class WebHook implements Serializable {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\tpublic enum EventType {\n\t\tCODE_PUSH {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof RefUpdated;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tPULL_REQUEST {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof PullRequestEvent;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tISSUE {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof IssueEvent;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tCODE_COMMENT {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof CodeCommentEvent;\n\t\t\t}\n\t\t\t\n\t\t}, \n\t\tBUILD {\n\n\t\t\t@Override\n\t\t\tpublic boolean includes(Object event) {\n\t\t\t\treturn event instanceof BuildEvent;\n\t\t\t}\n\t\t\t\n\t\t};\n\n\t\tpublic abstract boolean includes(Object event);\n\t}\n\t\n\tprivate String postUrl;\n\t\n\tprivate List<EventType> eventTypes = new ArrayList<>();\n\t\n\tprivate String secret = CryptoUtils.generateSecret();\n\n\t@Editable(order=100, description=\"The URL of the server endpoint that will receive the webhook POST requests\")\n\t@NotEmpty\n\tpublic String getPostUrl() {\n\t\treturn postUrl;\n\t}\n\n\tpublic void setPostUrl(String postUrl) {\n\t\tthis.postUrl = postUrl;\n\t}\n\n\t@Editable(order=200)\n\t@Size(min=1, message=\"At least one event type needs to be selected\")\n\tpublic List<EventType> getEventTypes() {\n\t\treturn eventTypes;\n\t}\n\n\tpublic void setEventTypes(List<EventType> eventTypes) {\n\t\tthis.eventTypes = eventTypes;\n\t}\n\n\t@Editable(order=300, description=\"The secret which allows you to ensure that POST requests sent to the payload URL are \"\n\t\t\t+ \"from OneDev. When you set a secret you'll receive the X-OneDev-Signature header in the webhook POST request\")\n\t@NotEmpty\n\tpublic String getSecret() {\n\t\treturn secret;\n\t}\n\n\tpublic void setSecret(String secret) {\n\t\tthis.secret = secret;\n\t}\n\t\n}\n", "package io.onedev.server.util;\n\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.SettingManager;\nimport org.apache.commons.codec.binary.Base64;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.apache.shiro.crypto.AesCipherService;\nimport org.apache.sshd.common.digest.BaseDigest;\nimport org.apache.sshd.common.digest.Digest;\n\nimport javax.crypto.SecretKeyFactory;\nimport javax.crypto.spec.PBEKeySpec;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.spec.InvalidKeySpecException;\nimport java.security.spec.KeySpec;\n\npublic class CryptoUtils {\n\t\n\tprivate static final int DEFAULT_SECRET_LEN = 40;\n\t\n    public static final Digest DIGEST_FORMAT = new BaseDigest(\"MD5\", 512);\n\t\n\tprivate static volatile KeyPair keyPair;\n\t\n    private static AesCipherService cipherService = new AesCipherService();\n    \n\tpublic static byte[] getCipherKey() {\n\t\tbyte[] privateKey = OneDev.getInstance(SettingManager.class).getSshSetting().getPrivateKey().getEncoded();\n\t\tif (keyPair == null || !keyPair.getPrivateKey().equals(privateKey)) {\n\t\t\t/*\n\t\t\t * We do not use salt here to make sure that the cipher key remains the same after server restart. \n\t\t\t * This will not sacrificing security as the private key is already a strong cipher\n\t\t\t */\n\t\t\tKeySpec spec = new PBEKeySpec(Base64.encodeBase64String(privateKey).toCharArray(), new byte[] {0}, 256, 256);\n\t\t\ttry {\n\t\t\t\tSecretKeyFactory f = SecretKeyFactory.getInstance(\"PBKDF2WithHmacSHA1\");\n\t\t\t\tkeyPair = new KeyPair(privateKey, f.generateSecret(spec).getEncoded());\n\t\t\t} catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n\t\t\t\tthrow new RuntimeException(e);\n\t\t\t}\t\t\n\t\t} \n\t\treturn keyPair.getCipherKey();\n\t}\n\t\n\tpublic static String generateSecret(int count) {\n\t\treturn RandomStringUtils.random(count, 0, 0, true, true, null, \n\t\t\t\tnew SecureRandom());\t\t\n\t}\n\n\tpublic static String generateSecret() {\n\t\treturn generateSecret(DEFAULT_SECRET_LEN);\n\t}\n\t\n\tpublic static byte[] encrypt(byte[] data) {\n\t\treturn cipherService.encrypt(data, getCipherKey()).getBytes();\n\t}\n\t\n\tpublic static byte[] decrypt(byte[] data) {\n\t\treturn cipherService.decrypt(data, getCipherKey()).getBytes();\n\t}\n\t\n\tprivate static class KeyPair {\n\t\t\n\t\tprivate final byte[] privateKey;\n\t\t\n\t\tprivate final byte[] cipherKey;\n\t\t\n\t\tpublic KeyPair(byte[] privateKey, byte[] cipherKey) {\n\t\t\tthis.privateKey = privateKey;\n\t\t\tthis.cipherKey = cipherKey;\n\t\t}\n\n\t\tpublic byte[] getPrivateKey() {\n\t\t\treturn privateKey;\n\t\t}\n\n\t\tpublic byte[] getCipherKey() {\n\t\t\treturn cipherKey;\n\t\t}\n\t\t\n\t}    \n\t\n}\n", "package io.onedev.server.web.component.user.accesstoken;\n\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.model.User;\nimport io.onedev.server.util.CryptoUtils;\nimport io.onedev.server.web.component.link.copytoclipboard.CopyToClipboardLink;\nimport io.onedev.server.web.util.ConfirmClickModifier;\nimport org.apache.wicket.Session;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.link.Link;\nimport org.apache.wicket.markup.html.panel.Panel;\nimport org.apache.wicket.model.AbstractReadOnlyModel;\nimport org.apache.wicket.model.IModel;\n\n@SuppressWarnings(\"serial\")\npublic abstract class AccessTokenPanel extends Panel {\n\n\tpublic AccessTokenPanel(String id) {\n\t\tsuper(id);\n\t}\n\n\tprotected abstract User getUser();\n\t\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tIModel<String> valueModel = new AbstractReadOnlyModel<String>() {\n\n\t\t\t@Override\n\t\t\tpublic String getObject() {\n\t\t\t\treturn getUser().getAccessToken();\n\t\t\t}\n\t\t\t\n\t\t};\n\t\tadd(new TextField<String>(\"value\", valueModel) {\n\n\t\t\t@Override\n\t\t\tprotected String[] getInputTypes() {\n\t\t\t\treturn new String[] {\"password\"};\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tadd(new CopyToClipboardLink(\"copy\", valueModel));\n\t\t\n\t\tadd(new Link<Void>(\"regenerate\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\t\t\t\tgetUser().setAccessToken(CryptoUtils.generateSecret());\n\t\t\t\tOneDev.getInstance(UserManager.class).save(getUser());\n\t\t\t\tSession.get().success(\"Access token regenerated\");\n\t\t\t\tsetResponsePage(getPage());\n\t\t\t}\n\t\t\t\n\t\t}.add(new ConfirmClickModifier(\"This will invalidate current token and generate a new one, do you want to continue?\")));\n\t}\n\n}\n", "<wicket:panel>\n\t<div wicket:id=\"content\" class=\"setup-2fa\"></div>\n\t<wicket:fragment wicket:id=\"pendingVerifyFrag\">\n\t\t<form wicket:id=\"form\">\n\t\t\t<div class=\"modal-header\">\n\t\t\t\t<h5 id=\"modal-title\" class=\"modal-title\">Set Up Two-factor Authentication</h5>\n\t\t\t\t<button wicket:id=\"close\" type=\"button\" class=\"close\"><wicket:svg href=\"times\" class=\"icon\"/></button>\n\t\t\t</div>\n\t\t\t<div class=\"modal-body\">\n\t\t\t\t<div wicket:id=\"enforceNotice\" class=\"alert alert-light-warning\">Two-factor authentication is enforced \n\t\t\t\tfor your account to enhance security. Please follow below procedure to set it up</div>\n\t\t\t\t<div class=\"text-secondary font-weight-boldest\">\n\t\t\t\tScan below QR code with your TOTP authenticators\n\t\t\t\t</div>\n\t\t\t\t<div>These authenticators normally run \n\t\t\t\ton your mobile phone, some examples are Google Authenticator, Microsoft Authenticator, Authy, 1Password etc.</div>\n\t\t\t\n\t\t\t\t<div class=\"d-flex justify-content-center my-3\">\n\t\t\t\t\t<img wicket:id=\"QRCode\">\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div class=\"text-secondary font-weight-boldest\">\n\t\t\t\tThen enter the passcode shown in the TOTP authenticator to verify\n\t\t\t\t</div>\n\t\t\t\t<input wicket:id=\"passcode\" placeholder=\"6-digits passcode\" class=\"form-control mt-2\">\n\t\t\t\t<div wicket:id=\"feedback\" class=\"mb-n3 mt-3\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"modal-footer\">\n\t\t\t\t<input wicket:id=\"verify\" type=\"submit\" class=\"dirty-aware btn btn-primary\" value=\"Verify\">\n\t\t\t\t<a wicket:id=\"cancel\" class=\"btn btn-secondary\">Cancel</a>\n\t\t\t</div>\n\t\t</form>\n\t</wicket:fragment>\n\t<wicket:fragment wicket:id=\"verifiedFrag\">\n\t\t<div class=\"modal-header\">\n\t\t\t<h5 id=\"modal-title\" class=\"modal-title\">Set Up Two-factor Authentication</h5>\n\t\t\t<button wicket:id=\"close\" type=\"button\" class=\"close\"><wicket:svg href=\"times\" class=\"icon\"/></button>\n\t\t</div>\n\t\t<div class=\"modal-body\">\n\t\t\t<div class=\"alert alert-light-success font-weight-bolder\"><wicket:svg href=\"tick-circle\" class=\"icon\"/> Two-factor authentication is now enabled for your account</div> \n\t\t\t\n\t\t\t<div class=\"mb-3\">\n\t\t\t<b class=\"text-danger\">IMPORTANT:</b> Please <a wicket:id=\"download\" class=\"font-weight-bolder\">download</a> \n\t\t\trecovery codes below and keep \n\t\t\tthem secret. These codes can be used to provide one-time access to your account in case you \n\t\t\tcan not access the authentication application. They will <b>NOT</b> be displayed again \n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div wicket:id=\"recoveryCodes\" class=\"d-flex justify-content-center text-monospace font-size-sm font-weight-bold\"></div>\t\t\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"modal-footer d-flex justify-content-center\">\n\t\t\t<a wicket:id=\"ok\" class=\"btn btn-primary\">Ok</a>\n\t\t</div>\n\t</wicket:fragment>\n</wicket:panel>", "package io.onedev.server.web.component.user.twofactorauthentication;\n\nimport io.onedev.commons.utils.StringUtils;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.model.User;\nimport io.onedev.server.model.support.TwoFactorAuthentication;\nimport io.onedev.server.util.CryptoUtils;\nimport io.onedev.server.web.page.simple.security.LoginPage;\nimport org.apache.commons.codec.binary.Base32;\nimport org.apache.tika.mime.MediaType;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.ajax.markup.html.AjaxLink;\nimport org.apache.wicket.ajax.markup.html.form.AjaxButton;\nimport org.apache.wicket.feedback.FencedFeedbackPanel;\nimport org.apache.wicket.markup.ComponentTag;\nimport org.apache.wicket.markup.html.WebMarkupContainer;\nimport org.apache.wicket.markup.html.basic.Label;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.image.Image;\nimport org.apache.wicket.markup.html.link.ResourceLink;\nimport org.apache.wicket.markup.html.panel.Fragment;\nimport org.apache.wicket.markup.html.panel.GenericPanel;\nimport org.apache.wicket.markup.repeater.RepeatingView;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.request.resource.AbstractResource;\nimport org.apache.wicket.request.resource.ContentDisposition;\n\nimport java.io.IOException;\nimport java.security.SecureRandom;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SuppressWarnings(\"serial\")\npublic abstract class TwoFactorAuthenticationSetupPanel extends GenericPanel<User> {\n\n\tprivate static final int QR_CODE_SIZE = 160;\n\t\n\tpublic TwoFactorAuthenticationSetupPanel(String id) {\n\t\tsuper(id);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\n\t\tString secretKey = generateSecretKey();\n\t\t\n\t\tList<String> scratchCodes = new ArrayList<>();\n\t\tfor (int i=0; i<16; i++) \n\t\t\tscratchCodes.add(CryptoUtils.generateSecret());\n\t\t\n\t\tTwoFactorAuthentication authentication = new TwoFactorAuthentication(secretKey, scratchCodes);\n\n\t\tFragment fragment = new Fragment(\"content\", \"pendingVerifyFrag\", this);\n\t\tForm<?> form = new Form<Void>(\"form\");\n\t\t\n\t\tform.add(new WebMarkupContainer(\"enforceNotice\") {\n\n\t\t\t@Override\n\t\t\tprotected void onConfigure() {\n\t\t\t\tsuper.onConfigure();\n\t\t\t\tsetVisible(getPage() instanceof LoginPage);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.add(new Image(\"QRCode\", new AbstractResource() {\n\n\t\t\t@Override\n\t\t\tprotected ResourceResponse newResourceResponse(Attributes attributes) {\n\t\t\t\tResourceResponse response = new ResourceResponse();\n\t\t\t\tresponse.setContentType(MediaType.image(\"png\").toString());\n\t\t\t\tresponse.disableCaching();\n\t\t\t\t\n\t\t\t\tresponse.setWriteCallback(new WriteCallback() {\n\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void writeData(Attributes attributes) throws IOException {\n \t\t\t\t\t\tauthentication.writeQRCode(getUser(), QR_CODE_SIZE, \n \t\t\t\t\t\t\t\tattributes.getResponse().getOutputStream());\n\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t});\t\t\n\t\t\t\treturn response;\n\t\t\t}\n\t\t\t\n\t\t}) {\n\n\t\t\t@Override\n\t\t\tprotected void onComponentTag(ComponentTag tag) {\n\t\t\t\tsuper.onComponentTag(tag);\n\t\t\t\ttag.put(\"width\", QR_CODE_SIZE + \"px\");\n\t\t\t\ttag.put(\"height\", QR_CODE_SIZE + \"px\");\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tTextField<String> input = new TextField<String>(\"passcode\", Model.of(\"\"));\n\t\tform.add(input);\n\t\tform.add(new FencedFeedbackPanel(\"feedback\", form));\n\t\tform.add(new AjaxButton(\"verify\") {\n\n\t\t\t@Override\n\t\t\tprotected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n\t\t\t\tsuper.onSubmit(target, form);\n\t\t\t\tString passcode = input.getModelObject();\n\t\t\t\tif (StringUtils.isBlank(passcode)) {\n\t\t\t\t\tform.error(\"Please input passcode\");\n\t\t\t\t\ttarget.add(form);\n\t\t\t\t} else if (!passcode.equals(authentication.getTOTPCode())) {\n\t\t\t\t\tform.error(\"Passcode incorrect\");\n\t\t\t\t\ttarget.add(form);\n\t\t\t\t} else {\n\t\t\t\t\tgetUser().setTwoFactorAuthentication(authentication);\n\t\t\t\t\tOneDev.getInstance(UserManager.class).save(getUser());\n\t\t\t\t\t\n\t\t\t\t\tFragment fragment = new Fragment(\"content\", \"verifiedFrag\", TwoFactorAuthenticationSetupPanel.this);\n\t\t\t\t\tRepeatingView recoveryCodesView = new RepeatingView(\"recoveryCodes\");\n\t\t\t\t\tfor (String scratchCode: authentication.getScratchCodes())\n\t\t\t\t\t\trecoveryCodesView.add(new Label(recoveryCodesView.newChildId(), scratchCode));\n\t\t\t\t\tfragment.add(recoveryCodesView);\n\t\t\t\t\tfragment.add(new ResourceLink<Void>(\"download\", new AbstractResource() {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tprotected ResourceResponse newResourceResponse(Attributes attributes) {\n\t\t\t\t\t\t\tResourceResponse response = new ResourceResponse();\n\t\t\t\t\t\t\tresponse.setContentType(MediaType.TEXT_PLAIN.toString());\n\t\t\t\t\t\t\tresponse.setFileName(\"onedev-recovery-codes.txt\");\n\t\t\t\t\t\t\tresponse.setContentDisposition(ContentDisposition.ATTACHMENT);\n\t\t\t\t\t\t\tresponse.disableCaching();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tresponse.setWriteCallback(new WriteCallback() {\n\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic void writeData(Attributes attributes) throws IOException {\n\t\t \t\t\t\t\t\t\tString content = StringUtils.join(authentication.getScratchCodes(), \"\\n\");\n\t\t\t\t\t\t\t\t\tattributes.getResponse().write(content);\n\t\t\t\t\t\t\t\t}\t\t\t\t\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t});\t\t\n\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}));\n\t\t\t\t\tfragment.add(new AjaxLink<Void>(\"ok\") {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\tonEnabled(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\tfragment.add(new AjaxLink<Void>(\"close\") {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\t\t\t\tonEnabled(target);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t});\n\t\t\t\t\tTwoFactorAuthenticationSetupPanel.this.replace(fragment);\t\t\n\t\t\t\t\ttarget.add(fragment);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t});\n\t\tform.add(new AjaxLink<Void>(\"cancel\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tonCancelled(target);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.add(new AjaxLink<Void>(\"close\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick(AjaxRequestTarget target) {\n\t\t\t\tonCancelled(target);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.setOutputMarkupId(true);\n\t\t\n\t\tfragment.add(form);\t\n\t\t\n\t\tfragment.setOutputMarkupId(true);\n\t\tadd(fragment);\n\t}\n\n\tpublic static String generateSecretKey() {\n\t    SecureRandom random = new SecureRandom();\n\t    byte[] bytes = new byte[20];\n\t    random.nextBytes(bytes);\n\t    Base32 base32 = new Base32();\n\t    return base32.encodeToString(bytes);\n\t}\n\t\n\tprotected abstract User getUser();\n\t\n\tprotected abstract void onEnabled(AjaxRequestTarget target);\n\t\n\tprotected abstract void onCancelled(AjaxRequestTarget target);\n\t\n}\n", "package io.onedev.server.web.page.simple.security;\n\nimport com.google.common.collect.Lists;\nimport io.onedev.commons.loader.AppLoader;\nimport io.onedev.commons.utils.ExplicitException;\nimport io.onedev.commons.utils.TaskLogger;\nimport io.onedev.server.OneDev;\nimport io.onedev.server.entitymanager.SettingManager;\nimport io.onedev.server.entitymanager.UserManager;\nimport io.onedev.server.mail.MailManager;\nimport io.onedev.server.model.EmailAddress;\nimport io.onedev.server.model.User;\nimport io.onedev.server.persistence.SessionManager;\nimport io.onedev.server.util.CryptoUtils;\nimport io.onedev.server.web.component.taskbutton.TaskButton;\nimport io.onedev.server.web.page.simple.SimplePage;\nimport org.apache.shiro.authc.credential.PasswordService;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.feedback.FencedFeedbackPanel;\nimport org.apache.wicket.markup.html.form.Form;\nimport org.apache.wicket.markup.html.form.TextField;\nimport org.apache.wicket.markup.html.link.Link;\nimport org.apache.wicket.model.IModel;\nimport org.apache.wicket.model.Model;\nimport org.apache.wicket.request.mapper.parameter.PageParameters;\n\nimport java.util.Arrays;\n\n@SuppressWarnings(\"serial\")\npublic class PasswordResetPage extends SimplePage {\n\n\tprivate String loginNameOrEmail;\n\t\n\tpublic PasswordResetPage(PageParameters params) {\n\t\tsuper(params);\n\t}\n\n\t@Override\n\tprotected void onInitialize() {\n\t\tsuper.onInitialize();\n\t\t\n\t\tForm<?> form = new Form<Void>(\"form\");\n\t\tform.add(new FencedFeedbackPanel(\"feedback\", form));\t\t\n\t\tform.add(new TextField<String>(\"loginNameOrEmail\", new IModel<String>() {\n\n\t\t\t@Override\n\t\t\tpublic void detach() {\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic String getObject() {\n\t\t\t\treturn loginNameOrEmail;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void setObject(String object) {\n\t\t\t\tloginNameOrEmail = object;\n\t\t\t}\n\t\t\t\n\t\t}).setLabel(Model.of(\"Login name or email\")).setRequired(true));\n\t\t\n\t\tform.add(new TaskButton(\"resettingPassword\") {\n\t\t\t\n\t\t\t@Override\n\t\t\tprotected void onCompleted(AjaxRequestTarget target, boolean successful) {\n\t\t\t\tsuper.onCompleted(target, successful);\n\t\t\t\tif (successful)\n\t\t\t\t\tsetResponsePage(LoginPage.class);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tprotected String runTask(TaskLogger logger) {\n\t\t\t\tOneDev.getInstance(SessionManager.class).openSession();\n\t\t\t\ttry {\n\t\t\t\t\tUserManager userManager = OneDev.getInstance(UserManager.class);\n\t\t\t\t\tUser user = userManager.findByName(loginNameOrEmail);\n\t\t\t\t\tif (user == null) \n\t\t\t\t\t\tuser = userManager.findByVerifiedEmailAddress(loginNameOrEmail);\n\t\t\t\t\tif (user == null) {\n\t\t\t\t\t\tthrow new ExplicitException(\"No user found with login name or verified email: \" + loginNameOrEmail);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSettingManager settingManager = OneDev.getInstance(SettingManager.class);\n\t\t\t\t\t\tif (settingManager.getMailSetting() != null) {\n\t\t\t\t\t\t\tString password = CryptoUtils.generateSecret();\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tuser.setPassword(AppLoader.getInstance(PasswordService.class).encryptPassword(password));\n\t\t\t\t\t\t\tuserManager.save(user);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tMailManager mailManager = OneDev.getInstance(MailManager.class);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString serverUrl = settingManager.getSystemSetting().getServerUrl();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString htmlBody = String.format(\"Dear %s, \"\n\t\t\t\t\t\t\t\t+ \"<p style='margin: 16px 0;'>\"\n\t\t\t\t\t\t\t\t+ \"Per your request, password of your login \\\"%s\\\" at <a href=\\\"%s\\\">%s</a> has been reset to:<br>\"\n\t\t\t\t\t\t\t\t+ \"%s<br><br>\"\n\t\t\t\t\t\t\t\t+ \"Please login and change the password in your earliest convenience.\",\n\t\t\t\t\t\t\t\tuser.getDisplayName(), user.getName(), serverUrl, serverUrl, password);\n\t\n\t\t\t\t\t\t\tString textBody = String.format(\"Dear %s,\\n\\n\"\n\t\t\t\t\t\t\t\t\t+ \"Per your request, password of account \\\"%s\\\" at %s has been reset to:\\n\"\n\t\t\t\t\t\t\t\t\t+ \"%s\",\n\t\t\t\t\t\t\t\t\tuser.getDisplayName(), user.getName(), serverUrl, password);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString emailAddressValue;\n\t\t\t\t\t\t\tif (loginNameOrEmail.contains(\"@\")) { \n\t\t\t\t\t\t\t\temailAddressValue = loginNameOrEmail;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tEmailAddress emailAddress = user.getPrimaryEmailAddress();\n\t\t\t\t\t\t\t\tif (emailAddress == null) \n\t\t\t\t\t\t\t\t\tthrow new ExplicitException(\"Primary email address not specified\");\n\t\t\t\t\t\t\t\telse if (!emailAddress.isVerified())\n\t\t\t\t\t\t\t\t\tthrow new ExplicitException(\"Your primary email address is not verified\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\temailAddressValue = emailAddress.getValue();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmailManager.sendMail(\n\t\t\t\t\t\t\t\t\tsettingManager.getMailSetting().getSendSetting(), \n\t\t\t\t\t\t\t\t\tArrays.asList(emailAddressValue),\n\t\t\t\t\t\t\t\t\tLists.newArrayList(), Lists.newArrayList(), \n\t\t\t\t\t\t\t\t\t\"[Password Reset] Your OneDev Password Has Been Reset\", \n\t\t\t\t\t\t\t\t\thtmlBody, textBody, null, null);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn \"Please check your email \" + emailAddressValue + \" for the reset password\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthrow new ExplicitException(\"Unable to send password reset email as smtp settings are not defined\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tOneDev.getInstance(SessionManager.class).closeSession();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tform.add(new Link<Void>(\"cancel\") {\n\n\t\t\t@Override\n\t\t\tpublic void onClick() {\n\t\t\t\tsetResponsePage(LoginPage.class);\n\t\t\t}\n\t\t\t\n\t\t});\n\t\t\n\t\tadd(form);\n\t}\n\t\n\t@Override\n\tprotected String getTitle() {\n\t\treturn \"Forgotten Password?\";\n\t}\n\n\t@Override\n\tprotected String getSubTitle() {\n\t\treturn \"Enter your user name or email to reset password\";\n\t}\n\n}\n", "# 7.9.12\n\nAll access tokens of users are re-generated with cryto strong random string. As a result of this, all places using previous access token should be replaced with the new access token. This may include restful api authentication, CI/CD checkout step using access token etc.  \n\n# 7.8.0\n\nTo use consistent project url for web and git access, OneDev now uses project path instead of project id to access projects via web UI, for instance `https://code.onedev.io/projects/160` has been changed to `https://code.onedev.io/onedev/server`. To avoid conflicting with this url scheme, \nsome service urls have been changed and this causes some incompatibitlities:\n\n1. The RESTful api url now starts with `~api` instead of `api`, for instance url to access project information is now `/~api/projects/{projectId}` \n2. SSO callback url now takes the form `https://<onedev root url>/~sso/callback/<Provider Name>` (use `~sso` instead of `sso`)\n3. If you are using OAuth based Office365 or Gmail mail service, make sure to change redirect url as `https://<onedev root url>/~oauth/callback` (use `~oauth` instead of `oauth`)\n4. Agents can not upgrade itself for this version, as url connecting to server has been changed. You will need to re-download \nagent package from server if running in bare-metal mode, or re-pull the agent image if running in docker mode\n5. If you are setting up reverse proxy using Apache or Nginx, make sure to change proxied path `/server` to `/~server`. Check [the docs](https://docs.onedev.io/administration-guide/reverse-proxy-setup) for details\n\n# 7.7.0\n\nOneDev server and agent now requires Java 11 or higher. Follow below steps to upgrade agent manually:\n\n1. If agent is running as bare metal mode with Java 8, re-download agent package from server and run it \nwith Java 11 or higher following the instructions\n1. If agent is running as bare metal mode with Java 11 or higher, it will be updated automatically\n1. If agent is running in container mode, re-pull the image and start the container\n\n# 7.4.0\n\n### RESTful api\n\n1. A boolean property \"confidential\" must be added to create endpoint of [issue resource](/~help/api/io.onedev.server.rest.IssueResource/create) to indicate whether or not the issue is confidential\n\n# 7.3.5\n1. [RESTful api] Service desk name property of [project resource](/~help/api/io.onedev.server.rest.ProjectResource) moved from basic info endpoint to setting endpoint\n\n# 7.3.0\n1. [CI/CD] Docker sock is NOT mounted by default for server docker executor, remote docker executor and Kubernetes \nexecutor for security reasons. If your CI job performs docker operation, the build may fail. You may enable \nthe mount docker sock option in related executors, but make sure to configure authorized jobs of the executor \nto only allow trusted jobs to use the executors\n\n# 7.0.0\n\n1. [RESTful api] Email addresses of a user should now be retrieved via [UserResource.getEmailAddresses](/~help/api/io.onedev.server.rest.UserResource/getEmailAddresses), and should be operated via [EmailAddressResource](/~help/api/io.onedev.server.rest.EmailAddressResource)\n2. [RESTful api] Access token of a user should now be retrieved via [UserResource.getAccessToken](/~help/api/io.onedev.server.rest.UserResource/getAccessToken)\n3. [RESTful api] User query by login name, full name and email should now be done via [UserResource.queryProfile](/~help/api/io.onedev.server.rest.UserResource/queryProfile)\n\n# 6.2.1\n\n1. [build spec] Registry login setting is removed from build image step (introduced in 6.2.0). Specify registry logins \nin job executor if necessary\n\n# 6.2.0\n\n1. A new property `Run In Container` is added and enabled for all command steps in build spec. If you have steps intended to \nbe executed by shell executor, edit them to disable this property, otherwise the build will be failed with error `This step should be executed by server docker executor, remote docker executor, or kubernetes executor`\n1. Using cache path &quot;.&quot; (to cache workspace itself) in job cache definition is no longer supported\n\n# 5.4.0 \n\n1. In case install OneDev into a Kubernetes cluster, Kustomization based deployment is replaced by helm based deployment for flexibility reason\n\n# 5.2.1\n\n1. User by default is not able to create/fork projects now. To allow it, specify default login group with appropriate project create permissions in security setting.\n2. URL of project is changed from *http(s)://\\<onedev-server\\>/projects/\\<project name\\>* to *http(s)://\\<onedev-server\\>/projects/\\<project id\\>*. This only affects web UI, clone url and REStful api url is not changed.\n3. Job variable *@project_name@* should be replaced by *@project_path@*.\n4. Job match condition in job executor is renamed as job requirement, and the criteria to match job name is no longer valid. Executor can now be specified when define the job.\n\n# 4.3.0\n\n1. Service definition is separated from job definition. Previous service defined in job will be moved out of job and take the name _\\<job name\\>-\\<service name\\>_ to avoid possible name conflicts. You either need to change it back to use original name in case there is no conflicts, or change your build script to use the new service name. \n2. Job match condition of job executor no longer accepts image criteria. You need to remove it manually if there is any; otherwise the job matching will fail.\n\n# 4.1.3\n\n1. Html report is removed from build spec due to possible XSS vulnerabilities. Check issue #230 for details\n2. Setting _Default Fixed Issues Filter_ in build spec has been moved to be under project build setting, in order to facilitate issue query auto-updating upon custom field/state change\n\n# 4.1.0\n\n1. Backslash in job commands should not be escaped now. And literal '@' should be written as '@@'\n2. Various query operator _is before_ and _is after_ is substituted with _is until_ and _is since_. For instance issue query _\"Submit Date\" is before \"yesterday\"_ should be written as _\"Submit Date\" is until \"yesterday\"_\n\n# 4.0.5\n\n1. Renamed build variables:\n\n  |old name|new name|\n  |---|---|\n  |updated_ref|ref|\n  |updated_branch|branch|\n  |updated_tag|tag|\n  |pull_request_ids|pull_request_number|\n\n1. Removed build variables: _on_branches_, _commit_tags_, \n\n# 3.2\n\nVersion 3.2 uses token authentication instead of password authentication in build spec for security \nconsideration. As a result of this, password authentication specified previously will be cleared:\n\n1. Submodule authentication\n  \n  You will need to use custom http/ssh clone credential with permission to access submodule projects to retrieve source. Refer to [tutorial](https://docs.onedev.io/tutorials/cicd/clone-submodules-ssh/) for an example.\n  \n2. Project dependency authentication\n\n  You will need to define a job secret containing an access token in project build setting page, and then use that secret in project dependency definition. The access token should have permission to download dependency project artifacts of course."], "filenames": ["server-core/src/main/java/io/onedev/server/git/hook/HookUtils.java", "server-core/src/main/java/io/onedev/server/migration/DataMigrator.java", "server-core/src/main/java/io/onedev/server/model/EmailAddress.java", "server-core/src/main/java/io/onedev/server/model/User.java", "server-core/src/main/java/io/onedev/server/model/support/WebHook.java", "server-core/src/main/java/io/onedev/server/util/CryptoUtils.java", "server-core/src/main/java/io/onedev/server/web/component/user/accesstoken/AccessTokenPanel.java", "server-core/src/main/java/io/onedev/server/web/component/user/twofactorauthentication/TwoFactorAuthenticationSetupPanel.html", "server-core/src/main/java/io/onedev/server/web/component/user/twofactorauthentication/TwoFactorAuthenticationSetupPanel.java", "server-core/src/main/java/io/onedev/server/web/page/simple/security/PasswordResetPage.java", "server-product/system/incompatibilities/incompatibilities.md"], "buggy_code_start_loc": [1, 12, 3, 2, 2, 3, 3, 49, 3, 3, 0], "buggy_code_end_loc": [24, 4833, 39, 121, 74, 43, 54, 53, 128, 87, 0], "fixing_code_start_loc": [2, 13, 3, 1, 1, 3, 3, 49, 3, 3, 1], "fixing_code_end_loc": [22, 4847, 31, 101, 72, 55, 53, 50, 123, 85, 5], "type": "CWE-338", "message": "Onedev is a self-hosted Git Server with CI/CD and Kanban. In versions prior to 7.9.12 the algorithm used to generate access token and password reset keys was not cryptographically secure. Existing normal users (or everyone if it allows self-registration) may exploit this to elevate privilege to obtain administrator permission. This issue is has been addressed in version 7.9.12. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-24828", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-08T00:15:08.990", "lastModified": "2023-02-16T18:05:27.967", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Onedev is a self-hosted Git Server with CI/CD and Kanban. In versions prior to 7.9.12 the algorithm used to generate access token and password reset keys was not cryptographically secure. Existing normal users (or everyone if it allows self-registration) may exploit this to elevate privilege to obtain administrator permission. This issue is has been addressed in version 7.9.12. Users are advised to upgrade. There are no known workarounds for this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-338"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onedev_project:onedev:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.9.12", "matchCriteriaId": "DCBE7CE4-DD80-47F3-8913-EDC115C9DF3C"}]}]}], "references": [{"url": "https://github.com/theonedev/onedev/commit/d67dd9686897fe5e4ab881d749464aa7c06a68e5", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/security/advisories/GHSA-jf5c-9r77-3j5j", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/theonedev/onedev/commit/d67dd9686897fe5e4ab881d749464aa7c06a68e5"}}