{"buggy_code": ["/*\n *\n * This file is part of the iText (R) project.\n * Copyright (c) 2007-2015 iText Group NV\n * Authors: Bruno Lowagie et al.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License version 3\n * as published by the Free Software Foundation with the addition of the\n * following permission added to Section 15 as permitted in Section 7(a):\n * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY\n * ITEXT GROUP. ITEXT GROUP DISCLAIMS THE WARRANTY OF NON INFRINGEMENT\n * OF THIRD PARTY RIGHTS\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program; if not, see http://www.gnu.org/licenses or write to\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n * Boston, MA, 02110-1301 USA, or download the license from the following URL:\n * http://itextpdf.com/terms-of-use/\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU Affero General Public License.\n *\n * In accordance with Section 7(b) of the GNU Affero General Public License,\n * a covered work must retain the producer line in every PDF that is created\n * or manipulated using iText.\n *\n * You can be released from the requirements of the license by purchasing\n * a commercial license. Buying such a license is mandatory as soon as you\n * develop commercial activities involving the iText software without\n * disclosing the source code of your own applications.\n * These activities include: offering paid services to customers as an ASP,\n * serving PDFs on the fly in a web application, shipping iText with a closed\n * source product.\n *\n * For more information, please contact iText Software Corp. at this\n * address: sales@itextpdf.com\n */\npackage com.itextpdf.rups.model;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\n\nimport com.itextpdf.rups.io.OutputStreamResource;\n\n/** Class that deals with the XFA file that can be inside a PDF file. */\npublic class XfaFile implements OutputStreamResource {\n\n\t/** The X4J Document object (XML). */\n\tprotected Document xfaDocument;\n\t\n\t/**\n\t * Constructs an XFA file from an OutputStreamResource.\n\t * This resource can be an XML file or a node in a RUPS application.\n\t * @param\tresource\tthe XFA resource\n\t * @throws IOException \n\t * @throws DocumentException \n\t */\n\tpublic XfaFile(OutputStreamResource resource) throws IOException, DocumentException {\n\t\t// Is there a way to avoid loading everything in memory?\n\t\t// Can we somehow get the XML from the PDF as an InputSource, Reader or InputStream?\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tresource.writeTo(baos);\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tSAXReader reader = new SAXReader();\n\t\txfaDocument = reader.read(bais);\n\t}\n\n\t/**\n\t * Getter for the XFA Document object.\n\t * @return\ta Document object (X4J)\n\t */\n\tpublic Document getXfaDocument() {\n\t\treturn xfaDocument;\n\t}\n\n\t/**\n\t * Writes a formatted XML file to the OutputStream.\n\t * @see com.itextpdf.rups.io.OutputStreamResource#writeTo(java.io.OutputStream)\n\t */\n\tpublic void writeTo(OutputStream os) throws IOException {\n\t\tif (xfaDocument == null)\n\t\t\treturn;\n\t\tOutputFormat format = new OutputFormat(\"   \", true);\n        XMLWriter writer = new XMLWriter(os, format);\n        writer.write(xfaDocument);\n\t}\n}\n"], "fixing_code": ["/*\n *\n * This file is part of the iText (R) project.\n * Copyright (c) 2007-2015 iText Group NV\n * Authors: Bruno Lowagie et al.\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License version 3\n * as published by the Free Software Foundation with the addition of the\n * following permission added to Section 15 as permitted in Section 7(a):\n * FOR ANY PART OF THE COVERED WORK IN WHICH THE COPYRIGHT IS OWNED BY\n * ITEXT GROUP. ITEXT GROUP DISCLAIMS THE WARRANTY OF NON INFRINGEMENT\n * OF THIRD PARTY RIGHTS\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU Affero General Public License for more details.\n * You should have received a copy of the GNU Affero General Public License\n * along with this program; if not, see http://www.gnu.org/licenses or write to\n * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,\n * Boston, MA, 02110-1301 USA, or download the license from the following URL:\n * http://itextpdf.com/terms-of-use/\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU Affero General Public License.\n *\n * In accordance with Section 7(b) of the GNU Affero General Public License,\n * a covered work must retain the producer line in every PDF that is created\n * or manipulated using iText.\n *\n * You can be released from the requirements of the license by purchasing\n * a commercial license. Buying such a license is mandatory as soon as you\n * develop commercial activities involving the iText software without\n * disclosing the source code of your own applications.\n * These activities include: offering paid services to customers as an ASP,\n * serving PDFs on the fly in a web application, shipping iText with a closed\n * source product.\n *\n * For more information, please contact iText Software Corp. at this\n * address: sales@itextpdf.com\n */\npackage com.itextpdf.rups.model;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.io.StringReader;\n\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.io.OutputFormat;\nimport org.dom4j.io.SAXReader;\nimport org.dom4j.io.XMLWriter;\n\nimport com.itextpdf.rups.io.OutputStreamResource;\nimport org.xml.sax.EntityResolver;\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\n\n/** Class that deals with the XFA file that can be inside a PDF file. */\npublic class XfaFile implements OutputStreamResource {\n\n\t/** The X4J Document object (XML). */\n\tprotected Document xfaDocument;\n\t\n\t/**\n\t * Constructs an XFA file from an OutputStreamResource.\n\t * This resource can be an XML file or a node in a RUPS application.\n\t * @param\tresource\tthe XFA resource\n\t * @throws IOException \n\t * @throws DocumentException \n\t */\n\tpublic XfaFile(OutputStreamResource resource) throws IOException, DocumentException {\n\t\t// Is there a way to avoid loading everything in memory?\n\t\t// Can we somehow get the XML from the PDF as an InputSource, Reader or InputStream?\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\tresource.writeTo(baos);\n\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n\t\tSAXReader reader = new SAXReader();\n\t\treader.setEntityResolver(new SafeEmptyEntityResolver());\n\t\txfaDocument = reader.read(bais);\n\t}\n\n\t/**\n\t * Getter for the XFA Document object.\n\t * @return\ta Document object (X4J)\n\t */\n\tpublic Document getXfaDocument() {\n\t\treturn xfaDocument;\n\t}\n\n\t/**\n\t * Writes a formatted XML file to the OutputStream.\n\t * @see com.itextpdf.rups.io.OutputStreamResource#writeTo(java.io.OutputStream)\n\t */\n\tpublic void writeTo(OutputStream os) throws IOException {\n\t\tif (xfaDocument == null)\n\t\t\treturn;\n\t\tOutputFormat format = new OutputFormat(\"   \", true);\n        XMLWriter writer = new XMLWriter(os, format);\n        writer.write(xfaDocument);\n\t}\n\n\tprivate static class SafeEmptyEntityResolver implements EntityResolver {\n\t\tpublic InputSource resolveEntity(String publicId, String systemId) throws SAXException, IOException {\n\t\t\treturn new InputSource(new StringReader(\"\"));\n\t\t}\n\t}\n}\n"], "filenames": ["src/main/java/com/itextpdf/rups/model/XfaFile.java"], "buggy_code_start_loc": [49], "buggy_code_end_loc": [100], "fixing_code_start_loc": [50], "fixing_code_end_loc": [112], "type": "CWE-611", "message": "A vulnerability classified as problematic was found in iText RUPS. This vulnerability affects unknown code of the file src/main/java/com/itextpdf/rups/model/XfaFile.java. The manipulation leads to xml external entity reference. The name of the patch is ac5590925874ef810018a6b60fec216eee54fb32. It is recommended to apply a patch to fix this issue. VDB-217054 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2017-20151", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-30T12:15:08.730", "lastModified": "2023-01-09T17:50:29.840", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in iText RUPS. This vulnerability affects unknown code of the file src/main/java/com/itextpdf/rups/model/XfaFile.java. The manipulation leads to xml external entity reference. The name of the patch is ac5590925874ef810018a6b60fec216eee54fb32. It is recommended to apply a patch to fix this issue. VDB-217054 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-611"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:itextpdf:rups:-:*:*:*:*:*:*:*", "matchCriteriaId": "308CE68A-A7F3-48FD-B0DE-DF71E6343537"}]}]}], "references": [{"url": "https://github.com/itext/rups/commit/ac5590925874ef810018a6b60fec216eee54fb32", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217054", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217054", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/itext/rups/commit/ac5590925874ef810018a6b60fec216eee54fb32"}}