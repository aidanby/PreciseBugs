{"buggy_code": ["<?php\n/* Copyright (C) 2000-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2003      Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Sebastien Di Cintio  <sdicintio@ressource-toi.org>\n * Copyright (C) 2004      Benoit Mortier       <benoit.mortier@opensides.be>\n * Copyright (C) 2004      Christophe Combelles <ccomb@free.fr>\n * Copyright (C) 2005-2012 Regis Houssin        <regis.houssin@capnetworks.com>\n * Copyright (C) 2008      Raphael Bertrand (Resultic)       <raphael.bertrand@resultic.fr>\n * Copyright (C) 2010-2011 Juanjo Menent        <jmenent@2byte.es>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * or see http://www.gnu.org/\n */\n\n/**\n *\t\\file\t\t\thtdocs/core/lib/functions.lib.php\n *\t\\brief\t\t\tA set of functions for Dolibarr\n *\t\t\t\t\tThis file contains all frequently used functions.\n */\n\n\nif (! function_exists('json_encode'))\n{\n\tinclude_once DOL_DOCUMENT_ROOT .'/core/lib/json.lib.php';\n}\n\n/**\n * Function to return value of a static property when class\n * name is dynamically defined (not hard coded).\n * This is because $myclass::$myvar works from PHP 5.3.0+ only\n *\n * @param\tstring \t$class\t\tClass name\n * @param \tstring \t$member\t\tName of property\n * @return \tstring\t\t\t\tReturn value of static property.\n */\nfunction getStaticMember($class, $member)\n{\n\tif (is_object($class)) $class = get_class($class);\n\t$classObj = new ReflectionClass($class);\n\t$result = null;\n\n\tforeach($classObj->getStaticProperties() as $prop => $value)\n\t{\n\t\tif($prop == $member)\n\t\t{\n\t\t\t$result = $value;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Return a DoliDB instance (database handler).\n *\n * @param   string\t$type\t\tType of database (mysql, pgsql...)\n * @param\tstring\t$host\t\tAddress of database server\n * @param\tstring\t$user\t\tNom de l'utilisateur autorise\n * @param\tstring\t$pass\t\tMot de passe\n * @param\tstring\t$name\t\tNom de la database\n * @param\tint\t\t$port\t\tPort of database server\n * @return\tDoliDB\t\t\t\tA DoliDB instance\n */\nfunction getDoliDBInstance($type, $host, $user, $pass, $name, $port)\n{\n\trequire_once DOL_DOCUMENT_ROOT .\"/core/db/\".$type.'.class.php';\n\n\t$class='DoliDB'.ucfirst($type);\n\t$dolidb=new $class($type, $host, $user, $pass, $name, $port);\n\treturn $dolidb;\n}\n\n/**\n * \tGet entity to use\n *\n * \t@param\tstring\t$element\tCurrent element\n * \t@param\tint\t\t$shared\t\t1=Return shared entities\n * \t@return\tmixed\t\t\t\tEntity id(s) to use\n */\nfunction getEntity($element=false, $shared=false)\n{\n\tglobal $conf, $mc;\n\n\tif (is_object($mc))\n\t{\n\t\treturn $mc->getEntity($element, $shared);\n\t}\n\telse\n\t{\n\t\t$out='';\n\n\t\t$addzero = array('user', 'usergroup');\n\t\tif (in_array($element, $addzero)) $out.= '0,';\n\n\t\t$out.= $conf->entity;\n\n\t\treturn $out;\n\t}\n}\n\n/**\n * Return information about user browser\n *\n * @return\tarray\t\tArray of information ('browsername'=>,'browseros'=>,'phone'=>,'browserfirefox'=>)\n */\nfunction getBrowserInfo()\n{\n\t$name='unknown'; $version=''; $os='unknown'; $phone='';\n\n\t// If phone/smartphone, we set phone os name.\n\tif (preg_match('/android/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os=$phone='android'; }\n\telseif (preg_match('/blackberry/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t{ $os=$phone='blackberry'; }\n\telseif (preg_match('/iphone/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t{ $os='ios'; $phone='iphone'; }\n\telseif (preg_match('/ipod/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os='ios'; $phone='iphone'; }\n\telseif (preg_match('/palm/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os=$phone='palm'; }\n\telseif (preg_match('/symbian/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t{ $os='symbian'; $phone='unknown'; }\n\telseif (preg_match('/webos/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os='webos'; $phone='unknown'; }\n\telseif (preg_match('/maemo/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os='maemo'; $phone='unknown'; }\n\t// MS products at end\n\telseif (preg_match('/iemobile/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t{ $os='windows'; $phone='unkown'; }\n\telseif (preg_match('/windows ce/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t{ $os='windows'; $phone='unkown'; }\n\t// Name\n\tif (preg_match('/firefox(\\/|\\s)([\\d\\.]*)/i',    $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='firefox';   $version=$reg[2]; }\n\telseif (preg_match('/chrome(\\/|\\s)([\\d\\.]+)/i', $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='chrome';    $version=$reg[2]; }    // we can have 'chrome (Mozilla...) chrome x.y' in one string\n\telseif (preg_match('/chrome/i',                 $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='chrome'; }\n\telseif (preg_match('/iceweasel/i',$_SERVER[\"HTTP_USER_AGENT\"]))                      { $name='iceweasel'; $version=$reg[2]; }\n\telseif (preg_match('/epiphany/i',$_SERVER[\"HTTP_USER_AGENT\"]))                       { $name='epiphany';  $version=$reg[2]; }\n\telseif ((empty($phone) || preg_match('/iphone/i',$_SERVER[\"HTTP_USER_AGENT\"])) && preg_match('/safari(\\/|\\s)([\\d\\.]*)/i',$_SERVER[\"HTTP_USER_AGENT\"], $reg)) { $name='safari'; $version=$reg[2]; }\t// Safari is often present in string for mobile but its not.\n\telseif (preg_match('/opera(\\/|\\s)([\\d\\.]*)/i',  $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='opera';     $version=$reg[2]; }\n\telseif (preg_match('/msie(\\/|\\s)([\\d\\.]*)/i',   $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='ie';        $version=$reg[2]; }    // MS products at end\n\t// Other\n\t$firefox=0;\n\tif (in_array($name,array('firefox','iceweasel'))) $firefox=1;\n\n\treturn array('browsername'=>$name, 'browserversion'=>$version, 'browseros'=>$os, 'phone'=>$phone, 'browserfirefox'=>$firefox);\n}\n\n/**\n *  Function called at end of web php process\n *\n *  @return\tvoid\n */\nfunction dol_shutdown()\n{\n\tglobal $conf,$user,$langs,$db;\n\t$disconnectdone=false; $depth=0;\n\tif (is_object($db) && ! empty($db->connected)) { $depth=$db->transaction_opened; $disconnectdone=$db->close(); }\n\tdol_syslog(\"--- End access to \".$_SERVER[\"PHP_SELF\"].(($disconnectdone && $depth)?' (Warn: db disconnection forced, transaction depth was '.$depth.')':''), (($disconnectdone && $depth)?LOG_WARNING:LOG_DEBUG));\n}\n\n\n/**\n *  Return value of a param into GET or POST supervariable\n *\n *  @param\tstring\t$paramname   Name of parameter to found\n *  @param\tstring\t$check\t     Type of check (''=no check,  'int'=check it's numeric, 'alpha'=check it's alpha only, 'array'=check it's array)\n *  @param\tint\t\t$method\t     Type of method (0 = get then post, 1 = only get, 2 = only post, 3 = post then get)\n *  @return string      \t\t Value found or '' if check fails\n */\nfunction GETPOST($paramname,$check='',$method=0)\n{\n\tif (empty($method)) $out = isset($_GET[$paramname])?$_GET[$paramname]:(isset($_POST[$paramname])?$_POST[$paramname]:'');\n\telseif ($method==1) $out = isset($_GET[$paramname])?$_GET[$paramname]:'';\n\telseif ($method==2) $out = isset($_POST[$paramname])?$_POST[$paramname]:'';\n\telseif ($method==3) $out = isset($_POST[$paramname])?$_POST[$paramname]:(isset($_GET[$paramname])?$_GET[$paramname]:'');\n\telse return 'BadParameter';\n\n\tif (! empty($check))\n\t{\n\t\t// Check if numeric\n\t\tif ($check == 'int' && ! preg_match('/^[-\\.,0-9]+$/i',$out))\n\t\t{\n\t\t\t$out=trim($out);\n\t\t\t$out='';\n\t\t}\n\t\t// Check if alpha\n\t\telseif ($check == 'alpha')\n\t\t{\n\t\t\t$out=trim($out);\n\t\t\t// '\"' is dangerous because param in url can close the href= or src= and add javascript functions.\n\t\t\t// '../' is dangerous because it allows dir transversals\n\t\t\tif (preg_match('/\"/',$out)) $out='';\n\t\t\telse if (preg_match('/\\.\\.\\//',$out)) $out='';\n\t\t}\n\t\telseif ($check == 'array')\n\t\t{\n\t\t\tif (! is_array($out) || empty($out)) $out=array();\n\t\t}\n\t}\n\n\treturn $out;\n}\n\n\n/**\n *  Return a prefix to use for this Dolibarr instance for session or cookie names.\n *  This prefix is unique for instance and avoid conflict between multi-instances,\n *  even when having two instances with one root dir or two instances in virtual servers\n *\n *  @return\tstring      \t\tA calculated prefix\n */\nfunction dol_getprefix()\n{\n\treturn dol_hash($_SERVER[\"SERVER_NAME\"].$_SERVER[\"DOCUMENT_ROOT\"].DOL_DOCUMENT_ROOT.DOL_URL_ROOT);\n}\n\n/**\n *\tMake an include_once using default root and alternate root if it fails.\n *\tWARNING: In most cases, you should not use this function:\n *  To link to a core file, use include(DOL_DOCUMENT_ROOT.'/pathtofile')\n *  To link to a module file from a module file, use include './mymodulefile';\n *  To link to a module file from a core file, then this function can be used\n *\n * \t@param\tstring\t$relpath\tRelative path to file (Ie: mydir/myfile, ../myfile, ...)\n * \t@param\tstring\t$classname\tClass name\n *  @return int\t\t\t\t\tfalse if include fails.\n */\nfunction dol_include_once($relpath, $classname='')\n{\n\tglobal $conf,$langs,$user,$mysoc;   // Other global var must be retreived with $GLOBALS['var']\n\n\tif (! empty($classname) && ! class_exists($classname)) {\n\t\treturn @include dol_buildpath($relpath);\t\t\t// Remove @ to find error into php log file if you have problems\n\t} else {\n\t\treturn @include_once dol_buildpath($relpath);\t\t// Remove @ to find error into php log file if you have problems\n\t}\n}\n\n\n/**\n *\tReturn path of url or filesystem. Return default_root or alternate root if file_exist fails\n *\n * \t@param\tstring\t$path\t\tRelative path to file (if mode=0, ie: mydir/myfile, ../myfile, ...) or relative url (if mode=1).\n *  @param\tint\t\t$type\t\t0=Used for a Filesystem path, 1=Used for an URL path (output relative), 2=Used for an URL path (output full path)\n *  @return string\t\t\t\tFull filsystem path (if mode=0), Full url path (if mode=1)\n */\nfunction dol_buildpath($path, $type=0)\n{\n\tif (empty($type))\t// For a filesystem path\n\t{\n\t\t$res = DOL_DOCUMENT_ROOT.$path;\t// Standard value\n\t\tif (defined('DOL_DOCUMENT_ROOT_ALT') && DOL_DOCUMENT_ROOT_ALT)\t// We check only if alternate feature is used\n\t\t{\n\t\t\tif (! file_exists(DOL_DOCUMENT_ROOT.$path)) $res = DOL_DOCUMENT_ROOT_ALT.$path;\n\t\t}\n\t}\n\telse\t\t\t\t// For an url path\n\t{\n\t\t// We try to get local path of file on filesystem from url\n\t\t// Note that trying to know if a file on disk exist by forging path on disk from url\n\t\t// works only for some web server and some setup. This is bugged when\n\t\t// using proxy, rewriting, virtual path, etc...\n\t\tif ($type == 1)\n\t\t{\n\t\t\t$res = DOL_URL_ROOT.$path;\t\t// Standard value\n\t\t\tif (defined('DOL_URL_ROOT_ALT') && DOL_URL_ROOT_ALT)\t\t\t// We check only if alternate feature is used\n\t\t\t{\n\t\t\t\tpreg_match('/^([^\\?]+(\\.css\\.php|\\.css|\\.js\\.php|\\.js|\\.png|\\.jpg|\\.php)?)/i',$path,$regs);    // Take part before '?'\n\t\t\t\tif (! empty($regs[1]))\n\t\t\t\t{\n\t\t\t\t\tif (! file_exists(DOL_DOCUMENT_ROOT.$regs[1])) $res = DOL_URL_ROOT_ALT.$path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if ($type == 2)\n\t\t{\n\t\t\t$res = DOL_MAIN_URL_ROOT.$path;      // Standard value\n\t\t\tif (defined('DOL_URL_ROOT_ALT') && DOL_URL_ROOT_ALT)            // We check only if alternate feature is used\n\t\t\t{\n\t\t\t\tpreg_match('/^([^\\?]+(\\.css\\.php|\\.css|\\.js\\.php|\\.js|\\.png|\\.jpg|\\.php)?)/i',$path,$regs);    // Take part before '?'\n\t\t\t\tif (! empty($regs[1]))\n\t\t\t\t{\n\t\t\t\t\tif (! file_exists(DOL_DOCUMENT_ROOT.$regs[1])) $res = DOL_MAIN_URL_ROOT_ALT.$path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $res;\n}\n\n/**\n *\tCreate a clone of instance of object (new instance with same properties)\n * \tThis function works for both PHP4 and PHP5\n *\n * \t@param\tobject\t$object\t\tObject to clone\n *\t@return object\t\t\t\tObject clone\n */\nfunction dol_clone($object)\n{\n\tdol_syslog(\"Functions.lib::dol_clone Clone object\");\n\n\t// We create dynamically a clone function, making a =\n\tif (version_compare(phpversion(), '5.0') < 0 && ! function_exists('clone'))\n\t{\n\t\teval('function clone($object){return($object);}');\n\t}\n\t$myclone=clone($object);\n\treturn $myclone;\n}\n\n/**\n *\tOptimize a size for some browsers (phone, smarphone, ...)\n *\n * \t@param\tint\t\t$size\t\tSize we want\n * \t@param\tstring\t$type\t\tType of optimizing:\n * \t\t\t\t\t\t\t\t\t\t'' = function used to define a size for truncation\n * \t\t\t\t\t\t\t\t\t\t'width' = function is used to define a width\n *\t@return int\t\t\t\t\tNew size after optimizing\n */\nfunction dol_size($size,$type='')\n{\n\tglobal $conf;\n\tif (empty($conf->browser->phone)) return $size;\n\tif ($type == 'width' && $size > 250) return 250;\n\telse return 10;\n}\n\n\n/**\n *\tClean a string to use it as a file name\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace bad chars with\n *  @param\tstring\t$unaccent\t\t1=Remove also accent (default), 0 do not remove them\n *\t@return string          \t\tString cleaned (a-zA-Z_)\n *\n * \t@see        \tdol_string_nospecial, dol_string_unaccent\n */\nfunction dol_sanitizeFileName($str,$newstr='_',$unaccent=1)\n{\n\t$filesystem_forbidden_chars = array('<','>',':','/','\\\\','?','*','|','\"');\n\treturn dol_string_nospecial($unaccent?dol_string_unaccent($str):$str, $newstr, $filesystem_forbidden_chars);\n}\n\n/**\n *\tClean a string from all accent characters to be used as ref, login or by dol_sanitizeFileName\n *\n *\t@param\tstring\t$str\t\t\tString to clean\n *\t@return string   \t       \t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename, dol_string_nospecial\n */\nfunction dol_string_unaccent($str)\n{\n\tif (utf8_check($str))\n\t{\n\t\t$string = rawurlencode($str);\n\t\t$replacements = array(\n\t\t'%C3%80' => 'A','%C3%81' => 'A',\n\t\t'%C3%88' => 'E','%C3%89' => 'E',\n\t\t'%C3%8C' => 'I','%C3%8D' => 'I',\n\t\t'%C3%92' => 'O','%C3%93' => 'O',\n\t\t'%C3%99' => 'U','%C3%9A' => 'U',\n\t\t'%C3%A0' => 'a','%C3%A1' => 'a','%C3%A2' => 'a',\n\t\t'%C3%A8' => 'e','%C3%A9' => 'e','%C3%AA' => 'e','%C3%AB' => 'e',\n\t\t'%C3%AC' => 'i','%C3%AD' => 'i','%C3%AE' => 'i',\n\t\t'%C3%B2' => 'o','%C3%B3' => 'o',\n\t\t'%C3%B9' => 'u','%C3%BA' => 'u'\n\t\t);\n\t\t$string=strtr($string, $replacements);\n\t\treturn rawurldecode($string);\n\t}\n\telse\n\t{\n\t\t$string = strtr(\n\t\t\t$str,\n\t\t\t\"\\xC0\\xC1\\xC2\\xC3\\xC5\\xC7\n\t\t\t\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\n\t\t\t\\xD2\\xD3\\xD4\\xD5\\xD8\\xD9\\xDA\\xDB\\xDD\n\t\t\t\\xE0\\xE1\\xE2\\xE3\\xE5\\xE7\\xE8\\xE9\\xEA\\xEB\n\t\t\t\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF8\n\t\t\t\\xF9\\xFA\\xFB\\xFD\\xFF\",\n\t\t\t\"AAAAAC\n\t\t\tEEEEIIIIDN\n\t\t\tOOOOOUUUY\n\t\t\taaaaaceeee\n\t\t\tiiiidnooooo\n\t\t\tuuuyy\"\n\t\t);\n\t\t$string = strtr($string, array(\"\\xC4\"=>\"Ae\", \"\\xC6\"=>\"AE\", \"\\xD6\"=>\"Oe\", \"\\xDC\"=>\"Ue\", \"\\xDE\"=>\"TH\", \"\\xDF\"=>\"ss\", \"\\xE4\"=>\"ae\", \"\\xE6\"=>\"ae\", \"\\xF6\"=>\"oe\", \"\\xFC\"=>\"ue\", \"\\xFE\"=>\"th\"));\n\t\treturn $string;\n\t}\n}\n\n/**\n *\tClean a string from all punctuation characters to use it as a ref or login\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace forbidden chars with\n *  @param  array\t$badchars       List of forbidden characters\n * \t@return string          \t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename, dol_string_unaccent\n */\nfunction dol_string_nospecial($str,$newstr='_',$badchars='')\n{\n\t$forbidden_chars_to_replace=array(\" \",\"'\",\"/\",\"\\\\\",\":\",\"*\",\"?\",\"\\\"\",\"<\",\">\",\"|\",\"[\",\"]\",\",\",\";\",\"=\");\n\t$forbidden_chars_to_remove=array();\n\tif (is_array($badchars)) $forbidden_chars_to_replace=$badchars;\n\t//$forbidden_chars_to_remove=array(\"(\",\")\");\n\n\treturn str_replace($forbidden_chars_to_replace,$newstr,str_replace($forbidden_chars_to_remove,\"\",$str));\n}\n\n/**\n *  Returns text escaped for inclusion into javascript code\n *\n *  @param       string\t\t$stringtoescape\t\tString to escape\n *  @return      string     \t\t \t\t\tEscaped string\n */\nfunction dol_escape_js($stringtoescape)\n{\n\t// escape quotes and backslashes, newlines, etc.\n\t$substitjs=array(\"&#039;\"=>\"\\\\'\",'\\\\'=>'\\\\\\\\',\"'\"=>\"\\\\'\",'\"'=>\"\\\\'\",\"\\r\"=>'\\\\r',\"\\n\"=>'\\\\n','</'=>'<\\/');\n\treturn strtr($stringtoescape, $substitjs);\n}\n\n\n/**\n *  Returns text escaped for inclusion in HTML alt or title tags\n *\n *  @param      string\t\t$stringtoescape\t\tString to escape\n *  @param\t\tint\t\t\t$keepb\t\t\t\tDo not clean b tags\n *  @return     string     \t\t\t\t \t\tEscaped string\n */\nfunction dol_escape_htmltag($stringtoescape,$keepb=0)\n{\n\t// escape quotes and backslashes, newlines, etc.\n\t$tmp=dol_html_entity_decode($stringtoescape,ENT_COMPAT,'UTF-8');\n\tif ($keepb) $tmp=strtr($tmp, array(\"\\r\"=>'\\\\r',\"\\n\"=>'\\\\n'));\n\telse $tmp=strtr($tmp, array(\"\\r\"=>'\\\\r',\"\\n\"=>'\\\\n',\"<b>\"=>'','</b>'=>''));\n\treturn dol_htmlentities($tmp,ENT_COMPAT,'UTF-8');\n}\n\n\n/**\n * Convert a string to lower. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtolower($utf8_string)\n{\n\treturn mb_strtolower($utf8_string, \"UTF-8\");\n}\n\n/**\n * Convert a string to upper. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtoupper($utf8_string)\n{\n\treturn mb_strtoupper($utf8_string, \"UTF-8\");\n}\n\n\n/**\n *\tWrite log message into outputs. Possible outputs can be:\n *\tSYSLOG_HANDLERS = [\"mod_syslog_file\"]  \t\tfile name is then defined by SYSLOG_FILE\n *\tSYSLOG_HANDLERS = [\"mod_syslog_syslog\"]  \tfacility is then defined by SYSLOG_FACILITY\n *  Warning, syslog functions are bugged on Windows, generating memory protection faults. To solve\n *  this, use logging to files instead of syslog (see setup of module).\n *  Note: If SYSLOG_FILE_NO_ERROR defined, we never output any error message when writing to log fails.\n *  Note: You can get log message into html sources by adding parameter &logtohtml=1 (constant MAIN_LOGTOHTML must be set)\n *  This function works only if syslog module is enabled.\n * \tThis must not use any call to other function calling dol_syslog (avoid infinite loop).\n *\n * \t@param  string\t\t$message\tLine to log. Ne doit pas etre traduit si level = LOG_ERR\n *  @param  int\t\t\t$level\t\tLog level\n *                                  0=Show nothing\n *\t\t\t\t\t\t\t\t\tOn Windows LOG_ERR=4, LOG_WARNING=5, LOG_NOTICE=LOG_INFO=6, LOG_DEBUG=6 si define_syslog_variables ou PHP 5.3+, 7 si dolibarr\n *\t\t\t\t\t\t\t\t\tOn Linux   LOG_ERR=3, LOG_WARNING=4, LOG_INFO=6, LOG_DEBUG=7\n *  @param\tint\t\t\t$ident\t\t1=Increase ident of 1, -1=Decrease ident of 1\n *  @return\tvoid\n */\nfunction dol_syslog($message, $level = LOG_INFO, $ident = 0)\n{\n\tglobal $conf, $user;\n\n\t// If syslog module enabled\n\tif (empty($conf->syslog->enabled)) return false;\n\n\tif (! empty($level))\n\t{\n\t\t// Test log level\n\t\t$logLevels = array(\tLOG_EMERG, LOG_ALERT, LOG_CRIT, LOG_ERR, LOG_WARNING, LOG_NOTICE, LOG_INFO, LOG_DEBUG);\n\t\tif (!in_array($level, $logLevels))\n\t\t{\n\t\t\tthrow new Exception('Incorrect log level');\n\t\t}\n\t\tif ($level > $conf->global->SYSLOG_LEVEL) return false;\n\n\t\t// If adding log inside HTML page is required\n\t\tif (! empty($_REQUEST['logtohtml']) && ! empty($conf->global->MAIN_LOGTOHTML))\n\t\t{\n\t\t\t$conf->logbuffer[] = dol_print_date(time(),\"%Y-%m-%d %H:%M:%S\").\" \".$message;\n\t\t}\n\n\t\t// If enable html log tag enabled and url parameter log defined, we show output log on HTML comments\n\t\tif (! empty($conf->global->MAIN_ENABLE_LOG_HTML) && ! empty($_GET[\"log\"]))\n\t\t{\n\t\t\tprint \"\\n\\n<!-- Log start\\n\";\n\t\t\tprint $message.\"\\n\";\n\t\t\tprint \"Log end -->\\n\";\n\t\t}\n\n\t\t$data = array(\n\t\t\t'message' => $message,\n\t\t\t'script' => (isset($_SERVER['PHP_SELF'])? basename($_SERVER['PHP_SELF'],'.php') : false),\n\t\t\t'level' => $level,\n\t\t\t'user' => ((is_object($user) && $user->id) ? $user->login : false),\n\t\t\t'ip' => false\n\t\t);\n\n\t\tif (! empty($_SERVER[\"REMOTE_ADDR\"])) $data['ip'] = $_SERVER['REMOTE_ADDR'];\n\t\t// This is when PHP session is ran inside a web server but not inside a client request (example: init code of apache)\n\t\telse if (! empty($_SERVER['SERVER_ADDR'])) $data['ip'] = $_SERVER['SERVER_ADDR'];\n\t\t// This is when PHP session is ran outside a web server, like from Windows command line (Not always defined, but useful if OS defined it).\n\t\telse if (! empty($_SERVER['COMPUTERNAME'])) $data['ip'] = $_SERVER['COMPUTERNAME'].(empty($_SERVER['USERNAME'])?'':'@'.$_SERVER['USERNAME']);\n\t\t// This is when PHP session is ran outside a web server, like from Linux command line (Not always defined, but usefull if OS defined it).\n\t\telse if (! empty($_SERVER['LOGNAME'])) $data['ip'] = '???@'.$_SERVER['LOGNAME'];\n\n\t\t// Loop on each log handler and send output\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->export($data);\n\t\t}\n\t\tunset($data);\n\t}\n\n\tif (! empty($ident))\n\t{\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->setIdent($ident);\n\t\t}\n\t}\n}\n\n\n/**\n *\tShow tab header of a card\n *\n *\t@param\tarray\t$links\t\tArray of tabs\n *\t@param\tstring\t$active     Active tab name (document', 'info', 'ldap', ....)\n *\t@param  string\t$title      Title\n *\t@param  int\t\t$notab\t\t0=Add tab header, 1=no tab header\n * \t@param\tstring\t$picto\t\tAdd a picto on tab title\n * \t@return\tvoid\n */\nfunction dol_fiche_head($links=array(), $active='0', $title='', $notab=0, $picto='')\n{\n\tprint dol_get_fiche_head($links, $active, $title, $notab, $picto);\n}\n\n/**\n *  Show tab header of a card\n *\n *\t@param\tarray\t$links\t\tArray of tabs\n *\t@param\tint\t\t$active     Active tab name\n *\t@param  string\t$title      Title\n *\t@param  int\t\t$notab\t\t0=Add tab header, 1=no tab header\n * \t@param\tstring\t$picto\t\tAdd a picto on tab title\n * \t@return\tvoid\n */\nfunction dol_get_fiche_head($links=array(), $active='0', $title='', $notab=0, $picto='')\n{\n\t$out=\"\\n\".'<div class=\"tabs\">'.\"\\n\";\n\n\t// Affichage titre\n\tif (! empty($title))\n\t{\n\t\t$limittitle=30;\n\t\t$out.='<a class=\"tabTitle\">';\n\t\tif ($picto) $out.=img_object('',$picto).' ';\n\t\t$out.=dol_trunc($title,$limittitle);\n\t\t$out.='</a>';\n\t}\n\n\t// Define max of key (max may be higher than sizeof because of hole due to module disabling some tabs).\n\t$maxkey=-1;\n\tif (is_array($links) && ! empty($links))\n\t{\n\t\t$keys=array_keys($links);\n\t\tif (count($keys)) $maxkey=max($keys);\n\t}\n\n\t// Show tabs\n\tfor ($i = 0 ; $i <= $maxkey ; $i++)\n\t{\n\t\tif (isset($links[$i][2]) && $links[$i][2] == 'image')\n\t\t{\n\t\t\tif (!empty($links[$i][0]))\n\t\t\t{\n\t\t\t\t$out.='<a class=\"tabimage\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$out.='<span class=\"tabspan\">'.$links[$i][1].'</span>'.\"\\n\";\n\t\t\t}\n\t\t}\n\t\telse if (! empty($links[$i][1]))\n\t\t{\n\t\t\t//print \"x $i $active \".$links[$i][2].\" z\";\n\t\t\tif ((is_numeric($active) && $i == $active)\n\t\t\t|| (! is_numeric($active) && $active == $links[$i][2]))\n\t\t\t{\n\t\t\t\t$out.='<a id=\"active\" class=\"tab\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$out.='<a'.(! empty($links[$i][2])?' id=\"'.$links[$i][2].'\"':'').' class=\"tab\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t$out.=\"</div>\\n\";\n\n\tif (! $notab) $out.=\"\\n\".'<div class=\"tabBar\">'.\"\\n\";\n\n\treturn $out;\n}\n\n/**\n *  Show tab footer of a card\n *\n *  @param\tint\t\t$notab       0=Add tab footer, 1=no tab footer\n *  @return\tvoid\n */\nfunction dol_fiche_end($notab=0)\n{\n\tprint dol_get_fiche_end($notab);\n}\n\n/**\n *\tReturn tab footer of a card\n *\n *\t@param  int\t\t$notab\t\t0=Add tab footer, 1=no tab footer\n *  @return\tvoid\n */\nfunction dol_get_fiche_end($notab=0)\n{\n\tif (! $notab) return \"\\n</div>\\n\";\n\telse return '';\n}\n\n/**\n *      Return a formated address (part address/zip/town/state) according to country rules\n *\n *      @param  Object\t\t$object         A company or contact object\n *      @return string          \t\t\tFormated string\n */\nfunction dol_format_address($object)\n{\n\t$ret='';\n\t$countriesusingstate=array('US','IN','GB');\n\n\t// Address\n\t$ret .= $object->address;\n\t// Zip/Town/State\n\tif (in_array($object->country_code,array('US')))   \t// US: title firstname name \\n address lines \\n town, state, zip \\n country\n\t{\n\t\t$ret .= ($ret ? \"\\n\" : '' ).$object->town;\n\t\tif ($object->state && in_array($object->country_code,$countriesusingstate))\n\t\t{\n\t\t\t$ret.=\", \".$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ', '.$object->zip;\n\t}\n\telse if (in_array($object->country_code,array('GB'))) // UK: title firstname name \\n address lines \\n town state \\n zip \\n country\n\t{\n\t\t$ret .= ($ret ? \"\\n\" : '' ).$object->town;\n\t\tif ($object->state && in_array($object->country_code,$countriesusingstate))\n\t\t{\n\t\t\t$ret.=\", \".$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ($ret ? \"\\n\" : '' ).$object->zip;\n\t}\n\telse                                        \t\t// Other: title firstname name \\n address lines \\n zip town \\n country\n\t{\n\t\t$ret .= ($ret ? \"\\n\" : '' ).$object->zip;\n\t\t$ret .= ' '.$object->town;\n\t\tif ($object->state && in_array($object->country_code,$countriesusingstate))\n\t\t{\n\t\t\t$ret.=\", \".$object->state;\n\t\t}\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n *\tOutput date in a string format according to outputlangs (or langs if not defined).\n * \tReturn charset is always UTF-8, except if encodetoouput is defined. In this case charset is output charset\n *\n *\t@param\ttimestamp\t$time        \tGM Timestamps date\n *\t@param\tstring\t\t$format      \tOutput date format\n *\t\t\t\t\t\t\t\t\t\t\"%d %b %Y\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M:%S\",\n *\t\t\t\t\t\t\t\t\t\t\"day\", \"daytext\", \"dayhour\", \"dayhourldap\", \"dayhourtext\", \"dayrfc\", \"dayhourrfc\"\n * \t@param\tstring\t\t$tzoutput\t\ttrue=output or 'gmt' => string is for Greenwich location\n * \t\t\t\t\t\t\t\t\t\tfalse or 'tzserver' => output string is for local PHP server TZ usage\n * \t\t\t\t\t\t\t\t\t\t'tzuser' => output string is for local browser TZ usage\n *\t@param\tTranlsate\t$outputlangs\tObject lang that contains language for text translation.\n *  @param  boolean\t\t$encodetooutput false=no convert into output pagecode\n * \t@return string      \t\t\t\tFormated date or '' if time is null\n *\n *  @see        dol_mktime, dol_stringtotime, dol_getdate\n */\nfunction dol_print_date($time,$format='',$tzoutput='tzserver',$outputlangs='',$encodetooutput=false)\n{\n\tglobal $conf,$langs;\n\n\t$to_gmt=false;\n\t$offsettz=$offsetdst=0;\n\tif ($tzoutput)\n\t{\n\t\t$to_gmt=true;\t// For backward compatibility\n\t\tif (is_string($tzoutput))\n\t\t{\n\t\t\tif ($tzoutput == 'tzserver')\n\t\t\t{\n\t\t\t\t$to_gmt=false;\n\t\t\t\t$offsettz=$offsetdst=0;\n\t\t\t}\n\t\t\telseif ($tzoutput == 'tzuser')\n\t\t\t{\n\t\t\t\t$to_gmt=true;\n\t\t\t\t$offsettz=(empty($_SESSION['dol_tz'])?0:$_SESSION['dol_tz'])*60*60;\n\t\t\t\t$offsetdst=(empty($_SESSION['dol_dst'])?0:$_SESSION['dol_dst'])*60*60;\n\t\t\t}\n\t\t\telseif ($tzoutput == 'tzcompany')\n\t\t\t{\n\t\t\t\t$to_gmt=false;\n\t\t\t\t$offsettz=$offsetdst=0;\t// TODO Define this and use it later\n\t\t\t}\n\t\t}\n\t}\n\n\tif (! is_object($outputlangs)) $outputlangs=$langs;\n\n\t// Si format non defini, on prend $conf->format_date_text_short sinon %Y-%m-%d %H:%M:%S\n\tif (! $format) $format=(isset($conf->format_date_text_short) ? $conf->format_date_text_short : '%Y-%m-%d %H:%M:%S');\n\n\t// Change predefined format into computer format. If found translation in lang file we use it, otherwise we use default.\n\tif ($format == 'day')               $format=($outputlangs->trans(\"FormatDateShort\")!=\"FormatDateShort\"?$outputlangs->trans(\"FormatDateShort\"):$conf->format_date_short);\n\tif ($format == 'hour')              $format=($outputlangs->trans(\"FormatHourShort\")!=\"FormatHourShort\"?$outputlangs->trans(\"FormatHourShort\"):$conf->format_hour_short);\n\tif ($format == 'hourduration')      $format=($outputlangs->trans(\"FormatHourShortDuration\")!=\"FormatHourShortDuration\"?$outputlangs->trans(\"FormatHourShortDuration\"):$conf->format_hour_short_duration);\n\tif ($format == 'daytext')           $format=($outputlangs->trans(\"FormatDateText\")!=\"FormatDateText\"?$outputlangs->trans(\"FormatDateText\"):$conf->format_date_text);\n\tif ($format == 'daytextshort')      $format=($outputlangs->trans(\"FormatDateTextShort\")!=\"FormatDateTextShort\"?$outputlangs->trans(\"FormatDateTextShort\"):$conf->format_date_text_short);\n\tif ($format == 'dayhour')           $format=($outputlangs->trans(\"FormatDateHourShort\")!=\"FormatDateHourShort\"?$outputlangs->trans(\"FormatDateHourShort\"):$conf->format_date_hour_short);\n\tif ($format == 'dayhourtext')       $format=($outputlangs->trans(\"FormatDateHourText\")!=\"FormatDateHourText\"?$outputlangs->trans(\"FormatDateHourText\"):$conf->format_date_hour_text);\n\tif ($format == 'dayhourtextshort')  $format=($outputlangs->trans(\"FormatDateHourTextShort\")!=\"FormatDateHourTextShort\"?$outputlangs->trans(\"FormatDateHourTextShort\"):$conf->format_date_hour_text_short);\n\n\t// Format not sensitive to language\n\tif ($format == 'dayhourlog')        $format='%Y%m%d%H%M%S';\n\tif ($format == 'dayhourldap')       $format='%Y%m%d%H%M%SZ';\n\tif ($format == 'dayhourxcard')      $format='%Y%m%dT%H%M%SZ';\n\tif ($format == 'dayxcard')          $format='%Y%m%d';\n\tif ($format == 'dayrfc')            $format='%Y-%m-%d';             // DATE_RFC3339\n\tif ($format == 'dayhourrfc')        $format='%Y-%m-%dT%H:%M:%SZ';   // DATETIME RFC3339\n\n\t// If date undefined or \"\", we return \"\"\n\tif (dol_strlen($time) == 0) return '';\t\t// $time=0 allowed (it means 01/01/1970 00:00:00)\n\n\t//print 'x'.$time;\n\n\tif (preg_match('/%b/i',$format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format=str_replace('%b','__b__',$format);\n\t\t$format=str_replace('%B','__B__',$format);\n\t}\n\tif (preg_match('/%a/i',$format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format=str_replace('%a','__a__',$format);\n\t\t$format=str_replace('%A','__A__',$format);\n\t}\n\n\t// Analyze date (deprecated)   Ex: 1970-01-01, 1970-01-01 01:00:00, 19700101010000\n\tif (preg_match('/^([0-9]+)\\-([0-9]+)\\-([0-9]+) ?([0-9]+)?:?([0-9]+)?:?([0-9]+)?/i',$time,$reg)\n\t|| preg_match('/^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])$/i',$time,$reg))\n\t{\n\t\t// This part of code should not be used.\n\t\tdol_syslog(\"Functions.lib::dol_print_date function call with deprecated value of time in page \".$_SERVER[\"PHP_SELF\"], LOG_WARNING);\n\t\t// Date has format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS' or 'YYYYMMDDHHMMSS'\n\t\t$syear\t= (! empty($reg[1]) ? $reg[1] : '');\n\t\t$smonth\t= (! empty($reg[2]) ? $reg[2] : '');\n\t\t$sday\t= (! empty($reg[3]) ? $reg[3] : '');\n\t\t$shour\t= (! empty($reg[4]) ? $reg[4] : '');\n\t\t$smin\t= (! empty($reg[5]) ? $reg[5] : '');\n\t\t$ssec\t= (! empty($reg[6]) ? $reg[6] : '');\n\n\t\t$time=dol_mktime($shour,$smin,$ssec,$smonth,$sday,$syear,true);\n\t\t$ret=adodb_strftime($format,$time+$offsettz+$offsetdst,$to_gmt);\n\t}\n\telse\n\t{\n\t\t// Date is a timestamps\n\t\tif ($time < 100000000000)\t// Protection against bad date values\n\t\t{\n\t\t\t$ret=adodb_strftime($format,$time+$offsettz+$offsetdst,$to_gmt);\n\t\t}\n\t\telse $ret='Bad value '.$time.' for date';\n\t}\n\n\tif (preg_match('/__b__/i',$format))\n\t{\n\t\t// Here ret is string in PHP setup language (strftime was used). Now we convert to $outputlangs.\n\t\t$month=adodb_strftime('%m',$time+$offsettz+$offsetdst);\n\t\tif ($encodetooutput)\n\t\t{\n\t\t\t$monthtext=$outputlangs->transnoentities('Month'.$month);\n\t\t\t$monthtextshort=$outputlangs->transnoentities('MonthShort'.$month);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$monthtext=$outputlangs->transnoentitiesnoconv('Month'.$month);\n\t\t\t$monthtextshort=$outputlangs->transnoentitiesnoconv('MonthShort'.$month);\n\t\t}\n\t\t//print 'monthtext='.$monthtext.' monthtextshort='.$monthtextshort;\n\t\t$ret=str_replace('__b__',$monthtextshort,$ret);\n\t\t$ret=str_replace('__B__',$monthtext,$ret);\n\t\t//print 'x'.$outputlangs->charset_output.'-'.$ret.'x';\n\t\t//return $ret;\n\t}\n\tif (preg_match('/__a__/i',$format))\n\t{\n\t\t$w=adodb_strftime('%w',$time+$offsettz+$offsetdst);\n\t\t$dayweek=$outputlangs->transnoentitiesnoconv('Day'.$w);\n\t\t$ret=str_replace('__A__',$dayweek,$ret);\n\t\t$ret=str_replace('__a__',dol_substr($dayweek,0,3),$ret);\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n *\tReturn an array with locale date info.\n *  PHP getdate is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *  WARNING: This function always use PHP server timezone to return locale informations.\n *  Usage must be avoid.\n *\n *\t@param\ttimestamp\t$timestamp      Timestamp\n *\t@param\tboolean\t\t$fast           Fast mode\n *\t@return\tarray\t\t\t\t\t\tArray of informations\n *\t\t\t\t\t\t\t\t\t\tIf no fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'wday' => $dow,\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'weekday' => gmdate('l',$_day_power*(3+$dow)),\n *\t\t\t\t\t\t\t\t\t\t'month' => gmdate('F',mktime(0,0,0,$month,2,1971)),\n *\t\t\t\t\t\t\t\t\t\tIf fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'leap' => $leaf,\n *\t\t\t\t\t\t\t\t\t\t'ndays' => $ndays\n * \t@see \t\t\t\t\t\t\t\tdol_print_date, dol_stringtotime, dol_mktime\n */\nfunction dol_getdate($timestamp,$fast=false)\n{\n\t$usealternatemethod=false;\n\tif ($timestamp <= 0) $usealternatemethod=true;\t\t\t\t// <= 1970\n\tif ($timestamp >= 2145913200) $usealternatemethod=true;\t\t// >= 2038\n\n\tif ($usealternatemethod)\n\t{\n\t\t$arrayinfo=adodb_getdate($timestamp,$fast);\n\t}\n\telse\n\t{\n\t\t$arrayinfo=getdate($timestamp);\n\t}\n\n\treturn $arrayinfo;\n}\n\n/**\n *\tReturn a timestamp date built from detailed informations (by default a local PHP server timestamp)\n * \tReplace function mktime not available under Windows if year < 1970\n *\tPHP mktime is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *\n * \t@param\tint\t\t\t$hour\t\t\tHour\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$minute\t\t\tMinute\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$second\t\t\tSecond\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$month\t\t\tMonth (1 to 12)\n *\t@param\tint\t\t\t$day\t\t\tDay (1 to 31)\n *\t@param\tint\t\t\t$year\t\t\tYear\n *\t@param\tint\t\t\t$gm\t\t\t\t1=Input informations are GMT values, otherwise local to server TZ\n *\t@param\tint\t\t\t$check\t\t\t0=No check on parameters (Can use day 32, etc...)\n *\t@return\ttimestamp\t\t\t\t\tDate as a timestamp, '' if error\n * \t@see \t\t\t\t\t\t\t\tdol_print_date, dol_stringtotime, dol_getdate\n */\nfunction dol_mktime($hour,$minute,$second,$month,$day,$year,$gm=false,$check=1)\n{\n\tglobal $conf;\n\t//print \"- \".$hour.\",\".$minute.\",\".$second.\",\".$month.\",\".$day.\",\".$year.\",\".$_SERVER[\"WINDIR\"].\" -\";\n\n\t// Clean parameters\n\tif ($hour   == -1 || empty($hour)) $hour=0;\n\tif ($minute == -1 || empty($minute)) $minute=0;\n\tif ($second == -1 || empty($second)) $second=0;\n\n\t// Check parameters\n\tif ($check)\n\t{\n\t\tif (! $month || ! $day)  return '';\n\t\tif ($day   > 31) return '';\n\t\tif ($month > 12) return '';\n\t\tif ($hour  < 0 || $hour   > 24) return '';\n\t\tif ($minute< 0 || $minute > 60) return '';\n\t\tif ($second< 0 || $second > 60) return '';\n\t}\n\n\tif (method_exists('DateTime','getTimestamp') && empty($conf->global->MAIN_OLD_DATE))\n\t{\n\t\tif (empty($gm)) $localtz = new DateTimeZone(date_default_timezone_get());\n\t\telse $localtz = new DateTimeZone('UTC');\n\t\t$dt = new DateTime(null,$localtz);\n\t\t$dt->setDate($year,$month,$day);\n\t\t$dt->setTime((int) $hour, (int) $minute, (int) $second);\n\t\t$date=$dt->getTimestamp();\n\t}\n\telse\n\t{\n\t\t$usealternatemethod=false;\n\t\tif ($year <= 1970) $usealternatemethod=true;\t\t// <= 1970\n\t\tif ($year >= 2038) $usealternatemethod=true;\t\t// >= 2038\n\n\t\tif ($usealternatemethod || $gm)\t// Si time gm, seule adodb peut convertir\n\t\t{\n\t\t\t$date=adodb_mktime($hour,$minute,$second,$month,$day,$year,0,$gm);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$date=mktime($hour,$minute,$second,$month,$day,$year);\n\t\t}\n\t}\n\treturn $date;\n}\n\n\n/**\n *\tReturn date for now. We should always use this function without parameters (that means GMT time)\n *\n * \t@param\tstring\t\t$mode\t'gmt' => we return GMT timestamp,\n * \t\t\t\t\t\t\t\t'tzserver' => we add the PHP server timezone\n *  \t\t\t\t\t\t\t'tzref' => we add the company timezone\n * \t\t\t\t\t\t\t\t'tzuser' => we add the user timezone\n *\t@return timestamp   $date\tTimestamp\n */\nfunction dol_now($mode='gmt')\n{\n\t// Note that gmmktime and mktime return same value (GMT) whithout parameters\n\t//if ($mode == 'gmt') $ret=gmmktime(); // Strict Standards: gmmktime(): You should be using the time() function instead\n\tif ($mode == 'gmt') $ret=time();\t// Time for now at greenwich.\n\telse if ($mode == 'tzserver')\t\t// Time for now with PHP server timezone added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond=getServerTimeZoneInt('now');    // Contains tz+dayling saving time\n\t\t$ret=dol_now('gmt')+($tzsecond*3600);\n\t}\n\t/*else if ($mode == 'tzref')\t\t\t\t// Time for now with parent company timezone is added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond=getParentCompanyTimeZoneInt();    // Contains tz+dayling saving time\n\t\t$ret=dol_now('gmt')+($tzsecond*3600);\n\t}*/\n\telse if ($mode == 'tzuser')\t\t\t\t// Time for now with user timezone is added\n\t{\n\t\t//print 'eeee'.time().'-'.mktime().'-'.gmmktime();\n\t\t$offsettz=(empty($_SESSION['dol_tz'])?0:$_SESSION['dol_tz'])*60*60;\n\t\t$offsetdst=(empty($_SESSION['dol_dst'])?0:$_SESSION['dol_dst'])*60*60;\n\t\t$ret=dol_now('gmt')+($offsettz+$offsetdst);\n\t}\n\treturn $ret;\n}\n\n\n/**\n * Return string with formated size\n *\n * @param\tint\t\t$size\t\tSize to print\n * @param\tint\t\t$shortvalue\tTell if we want long value to use another unit (Ex: 1.5Kb instead of 1500b)\n * @param\tint\t\t$shortunit\tUse short value of size unit\n * @return\tstring\t\t\t\tLink\n */\nfunction dol_print_size($size,$shortvalue=0,$shortunit=0)\n{\n\tglobal $langs;\n\t$level=1024;\n\n\t// Set value text\n\tif (empty($shortvalue) || $size < ($level*10))\n\t{\n\t\t$ret=$size;\n\t\t$textunitshort=$langs->trans(\"b\");\n\t\t$textunitlong=$langs->trans(\"Bytes\");\n\t}\n\telse\n\t{\n\t\t$ret=round($size/$level,0);\n\t\t$textunitshort=$langs->trans(\"Kb\");\n\t\t$textunitlong=$langs->trans(\"KiloBytes\");\n\t}\n\t// Use long or short text unit\n\tif (empty($shortunit)) { $ret.=' '.$textunitlong; }\n\telse { $ret.=' '.$textunitshort; }\n\n\treturn $ret;\n}\n\n/**\n * Show Url link\n *\n * @param\tstring\t\t$url\t\tUrl to show\n * @param\tstring\t\t$target\t\tTarget for link\n * @param\tint\t\t\t$max\t\tMax number of characters to show\n * @return\tstring\t\t\t\t\tHTML Link\n */\nfunction dol_print_url($url,$target='_blank',$max=32)\n{\n\tif (empty($url)) return '';\n\n\t$link='<a href=\"';\n\tif (! preg_match('/^http/i',$url)) $link.='http://';\n\t$link.=$url;\n\tif ($target) $link.='\" target=\"'.$target.'\">';\n\tif (! preg_match('/^http/i',$url)) $link.='http://';\n\t$link.=dol_trunc($url,$max);\n\t$link.='</a>';\n\treturn $link;\n}\n\n/**\n * Show EMail link\n *\n * @param\tstring\t\t$email\t\t\tEMail to show (only email, without 'Name of recipient' before)\n * @param \tint\t\t\t$cid \t\t\tId of contact if known\n * @param \tint\t\t\t$socid \t\t\tId of third party if known\n * @param \tint\t\t\t$addlink\t\t0=no link to create action\n * @param\tint\t\t\t$max\t\t\tMax number of characters to show\n * @param\tint\t\t\t$showinvalid\tShow warning if syntax email is wrong\n * @return\tstring\t\t\t\t\t\tHTML Link\n */\nfunction dol_print_email($email,$cid=0,$socid=0,$addlink=0,$max=64,$showinvalid=1)\n{\n\tglobal $conf,$user,$langs;\n\n\t$newemail=$email;\n\n\tif (empty($email)) return '&nbsp;';\n\n\tif (! empty($addlink))\n\t{\n\t\t$newemail='<a href=\"';\n\t\tif (! preg_match('/^mailto:/i',$email)) $newemail.='mailto:';\n\t\t$newemail.=$email;\n\t\t$newemail.='\">';\n\t\t$newemail.=dol_trunc($email,$max);\n\t\t$newemail.='</a>';\n\t\tif ($showinvalid && ! isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail.=img_warning($langs->trans(\"ErrorBadEMail\",$email));\n\t\t}\n\n\t\tif (($cid || $socid) && ! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type='AC_EMAIL'; $link='';\n\t\t\tif (! empty($conf->global->AGENDA_ADDACTIONFOREMAIL)) $link='<a href=\"'.DOL_URL_ROOT.'/comm/action/fiche.php?action=create&amp;backtopage=1&amp;actioncode='.$type.'&amp;contactid='.$cid.'&amp;socid='.$socid.'\">'.img_object($langs->trans(\"AddAction\"),\"calendar\").'</a>';\n\t\t\t$newemail='<table class=\"nobordernopadding\"><tr><td>'.$newemail.' </td><td>&nbsp;'.$link.'</td></tr></table>';\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($showinvalid && ! isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail.=img_warning($langs->trans(\"ErrorBadEMail\",$email));\n\t\t}\n\t}\n\treturn $newemail;\n}\n\n/**\n * \tFormat phone numbers according to country\n *\n * \t@param\tstring\t$phone \t\tPhone number to format\n * \t@param \tstring\t$country \tCountry code to use for formatting\n * \t@param \tint\t\t$cid \t\tId of contact if known\n * \t@param \tint\t\t$socid \t\tId of third party if known\n * \t@param \tint\t\t$addlink\t0=no link to create action\n * \t@param \tstring\t$separ \t\tseparation between numbers for a better visibility example : xx.xx.xx.xx.xx\n * \t@return string \t\t\t\tFormated phone number\n */\nfunction dol_print_phone($phone,$country=\"FR\",$cid=0,$socid=0,$addlink=0,$separ=\"&nbsp;\")\n{\n\tglobal $conf,$user,$langs;\n\n\t// Clean phone parameter\n\t$phone = preg_replace(\"/[\\s.-]/\",\"\",trim($phone));\n\tif (empty($phone)) { return ''; }\n\n\t$newphone=$phone;\n\tif (strtoupper($country) == \"FR\")\n\t{\n\t\t// France\n\t\tif (dol_strlen($phone) == 10) {\n\t\t\t$newphone=substr($newphone,0,2).$separ.substr($newphone,2,2).$separ.substr($newphone,4,2).$separ.substr($newphone,6,2).$separ.substr($newphone,8,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 7)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,3).$separ.substr($newphone,3,2).$separ.substr($newphone,5,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 9)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,2).$separ.substr($newphone,2,3).$separ.substr($newphone,5,2).$separ.substr($newphone,7,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 11)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,3).$separ.substr($newphone,3,2).$separ.substr($newphone,5,2).$separ.substr($newphone,7,2).$separ.substr($newphone,9,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 12)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,4).$separ.substr($newphone,4,2).$separ.substr($newphone,6,2).$separ.substr($newphone,8,2).$separ.substr($newphone,10,2);\n\t\t}\n\t}\n\n\tif (! empty($addlink))\n\t{\n\t\tif (! empty($conf->clicktodial->enabled) && $addlink == 'AC_TEL')\n\t\t{\n\t\t\tif (empty($user->clicktodial_loaded)) $user->fetch_clicktodial();\n\n\t\t\tif (empty($conf->global->CLICKTODIAL_URL)) $urlmask='ErrorClickToDialModuleNotConfigured';\n\t\t\telse $urlmask=$conf->global->CLICKTODIAL_URL;\n\t\t\t$clicktodial_poste=(! empty($user->clicktodial_poste)?urlencode($user->clicktodial_poste):'');\n\t\t\t$clicktodial_login=(! empty($user->clicktodial_login)?urlencode($user->clicktodial_login):'');\n\t\t\t$clicktodial_password=(! empty($user->clicktodial_password)?urlencode($user->clicktodial_password):'');\n\t\t\t// This line is for backward compatibility\n\t\t\t$url = sprintf($urlmask, urlencode($phone), $clicktodial_poste, $clicktodial_login, $clicktodial_password);\n\t\t\t// Thoose lines are for substitution\n\t\t\t$substitarray=array('__PHONEFROM__'=>$clicktodial_poste,\n\t\t\t\t\t\t\t\t'__PHONETO__'=>urlencode($phone),\n\t\t\t\t\t\t\t\t'__LOGIN__'=>$clicktodial_login,\n\t\t\t\t\t\t\t\t'__PASS__'=>$clicktodial_password);\n\t\t\t$url = make_substitutions($url, $substitarray);\n\t\t\t$newphonesav=$newphone;\n\t\t\t$newphone ='<a href=\"'.$url.'\"';\n\t\t\tif (! empty($conf->global->CLICKTODIAL_FORCENEWTARGET)) $newphone.=' target=\"_blank\"';\n\t\t\t$newphone.='>'.$newphonesav.'</a>';\n\t\t}\n\n\t\t//if (($cid || $socid) && ! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\tif (! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type='AC_TEL'; $link='';\n\t\t\tif ($addlink == 'AC_FAX') $type='AC_FAX';\n\t\t\tif (! empty($conf->global->AGENDA_ADDACTIONFORPHONE)) $link='<a href=\"'.DOL_URL_ROOT.'/comm/action/fiche.php?action=create&amp;backtopage=1&amp;actioncode='.$type.($cid?'&amp;contactid='.$cid:'').($socid?'&amp;socid='.$socid:'').'\">'.img_object($langs->trans(\"AddAction\"),\"calendar\").'</a>';\n\t\t\t$newphone='<table class=\"nobordernopadding\"><tr><td>'.$newphone.' </td><td>&nbsp;'.$link.'</td></tr></table>';\n\t\t}\n\t}\n\n\treturn $newphone;\n}\n\n/**\n * \tReturn an IP formated to be shown on screen\n *\n * \t@param\tstring\t$ip\t\t\tIP\n * \t@param\tint\t\t$mode\t\t0=return IP + country/flag, 1=return only country/flag, 2=return only IP\n * \t@return string \t\t\t\tFormated IP, with country if GeoIP module is enabled\n */\nfunction dol_print_ip($ip,$mode=0)\n{\n\tglobal $conf,$langs;\n\n\t$ret='';\n\n\tif (empty($mode)) $ret.=$ip;\n\n\tif (! empty($conf->geoipmaxmind->enabled) && $mode != 2)\n\t{\n\t\t$datafile=$conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='E:\\Mes Sites\\Web\\Admin1\\awstats\\maxmind\\GeoIP.dat';    Note that this must be downloaded datafile (not same than datafile provided with ubuntu packages)\n\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip=new DolGeoIP('country',$datafile);\n\t\t//print 'ip='.$ip.' databaseType='.$geoip->gi->databaseType.\" GEOIP_CITY_EDITION_REV1=\".GEOIP_CITY_EDITION_REV1.\"\\n\";\n\t\t//print \"geoip_country_id_by_addr=\".geoip_country_id_by_addr($geoip->gi,$ip).\"\\n\";\n\t\t$countrycode=$geoip->getCountryCodeFromIP($ip);\n\t\tif ($countrycode)\t// If success, countrycode is us, fr, ...\n\t\t{\n\t\t\tif (file_exists(DOL_DOCUMENT_ROOT.'/theme/common/flags/'.$countrycode.'.png'))\n\t\t\t{\n\t\t\t\t$ret.=' '.img_picto($countrycode.' '.$langs->trans(\"AccordingToGeoIPDatabase\"),DOL_URL_ROOT.'/theme/common/flags/'.$countrycode.'.png','',1);\n\t\t\t}\n\t\t\telse $ret.=' ('.$countrycode.')';\n\t\t}\n\t}\n\n\treturn $ret;\n}\n\n/**\n *  Return country code for current user.\n *  If software is used inside a local network, detection may fails (we need a public ip)\n *\n *  @return     string      Country code (fr, es, it, us, ...)\n */\nfunction dol_user_country()\n{\n\tglobal $conf,$langs,$user;\n\n\t//$ret=$user->xxx;\n\t$ret='';\n\tif (! empty($conf->geoipmaxmind->enabled))\n\t{\n\t\t$ip=$_SERVER[\"REMOTE_ADDR\"];\n\t\t$datafile=$conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='E:\\Mes Sites\\Web\\Admin1\\awstats\\maxmind\\GeoIP.dat';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip=new DolGeoIP('country',$datafile);\n\t\t$countrycode=$geoip->getCountryCodeFromIP($ip);\n\t\t$ret=$countrycode;\n\t}\n\treturn $ret;\n}\n\n/**\n *  Format address string\n *\n *  @param\tstring\t$address     Address\n *  @param  int\t\t$htmlid      Html ID (for example 'gmap')\n *  @param  int\t\t$mode        thirdparty|contact|member|other\n *  @param  int\t\t$id          Id of object\n *  @return void\n */\nfunction dol_print_address($address, $htmlid, $mode, $id)\n{\n\tglobal $conf,$user,$langs;\n\n\tif ($address)\n\t{\n\t\tprint nl2br($address);\n\t\t$showgmap=$showomap=0;\n\t\tif ($mode=='thirdparty' && ! empty($conf->google->enabled) && ! empty($conf->global->GOOGLE_ENABLE_GMAPS)) $showgmap=1;\n\t\tif ($mode=='contact' && ! empty($conf->google->enabled) && ! empty($conf->global->GOOGLE_ENABLE_GMAPS_CONTACTS)) $showgmap=1;\n\t\tif ($mode=='member' && ! empty($conf->google->enabled) && ! empty($conf->global->GOOGLE_ENABLE_GMAPS_MEMBERS)) $showgmap=1;\n\t\tif ($mode=='thirdparty' && ! empty($conf->openstreetmap->enabled) && ! empty($conf->global->OPENSTREETMAP_ENABLE_MAPS)) $showomap=1;\n\t\tif ($mode=='contact' && ! empty($conf->openstreetmap->enabled) && ! empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_CONTACTS)) $showomap=1;\n\t\tif ($mode=='member' && ! empty($conf->openstreetmap->enabled) && ! empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_MEMBERS)) $showomap=1;\n\n\t\t// TODO Add a hook here\n\t\tif ($showgmap)\n\t\t{\n\t\t\t$url=dol_buildpath('/google/gmaps.php?mode='.$mode.'&id='.$id,1);\n\t\t\tprint ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'\" border=\"0\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t}\n\t\tif ($showomap)\n\t\t{\n\t\t\t$url=dol_buildpath('/openstreetmap/maps.php?mode='.$mode.'&id='.$id,1);\n\t\t\tprint ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'_openstreetmap\" border=\"0\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t}\n\t}\n}\n\n\n/**\n *\tReturn true if email syntax is ok\n *\n *\t@param\t    string\t\t$address    email (Ex: \"toto@titi.com\", \"John Do <johndo@titi.com>\")\n *\t@return     boolean     \t\t\ttrue if email syntax is OK, false if KO or empty string\n */\nfunction isValidEmail($address)\n{\n\tif (preg_match(\"/.*<(.+)>/i\", $address, $regs)) {\n\t\t$address = $regs[1];\n\t}\n\t// 2 letters domains extensions are for countries\n\t// 3 letters domains extensions: biz|com|edu|gov|int|mil|net|org|pro|...\n\tif (preg_match(\"/^[^@\\s\\t]+@([a-zA-Z0-9\\-]+\\.)+([a-zA-Z0-9\\-]{2,3}|asso|aero|coop|info|name)\\$/i\",$address))\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n *  Return true if phone number syntax is ok\n *\n *  @param\tstring\t\t$phone\t\tphone (Ex: \"0601010101\")\n *  @return boolean     \t\t\ttrue if phone syntax is OK, false if KO or empty string\n */\nfunction isValidPhone($phone)\n{\n\treturn true;\n}\n\n\n/**\n * Make a strlen call. Works even if mbstring module not enabled\n *\n * @param   string\t\t$string\t\t\t\tString to calculate length\n * @param   string\t\t$stringencoding\t\tEncoding of string\n * @return  int\t\t\t\t\t\t\t\tLength of string\n */\nfunction dol_strlen($string,$stringencoding='UTF-8')\n{\n\tif (function_exists('mb_strlen')) return mb_strlen($string,$stringencoding);\n\telse return strlen($string);\n}\n\n/**\n * Make a substring. Works even in mbstring module is not enabled.\n *\n * @param\tstring\t$string\t\t\t\tString to scan\n * @param\tstring\t$start\t\t\t\tStart position\n * @param\tint\t\t$length\t\t\t\tLength\n * @param   string\t$stringencoding\t\tPage code used for input string encoding\n * @return  string\t\t\t\t\t\tsubstring\n */\nfunction dol_substr($string,$start,$length,$stringencoding='')\n{\n\tglobal $langs;\n\n\tif (empty($stringencoding)) $stringencoding=$langs->charset_output;\n\n\t$ret='';\n\tif (function_exists('mb_substr'))\n\t{\n\t\t$ret=mb_substr($string,$start,$length,$stringencoding);\n\t}\n\telse\n\t{\n\t\t$ret=substr($string,$start,$length);\n\t}\n\treturn $ret;\n}\n\n\n/**\n *  Show a javascript graph.\n *  Do not use this function anymore. Use DolGraph class instead.\n *\n *  @param\t\tstring\t$htmlid\t\t\tHtml id name\n *  @param\t\tint\t\t$width\t\t\tWidth in pixel\n *  @param\t\tint\t\t$height\t\t\tHeight in pixel\n *  @param\t\tarray\t$data\t\t\tData array\n *  @param\t\tint\t\t$showlegend\t\t1 to show legend, 0 otherwise\n *  @param\t\tstring\t$type\t\t\tType of graph ('pie', 'barline')\n *  @param\t\tint\t\t$showpercent\tShow percent (with type='pie' only)\n *  @param\t\tstring\t$url\t\t\tParam to add an url to click values\n *  @return\t\tvoid\n *  @deprecated\n */\nfunction dol_print_graph($htmlid,$width,$height,$data,$showlegend=0,$type='pie',$showpercent=0,$url='')\n{\n\tglobal $conf,$langs;\n\tglobal $theme_datacolor;    // To have var kept when function is called several times\n\tif (empty($conf->use_javascript_ajax)) return;\n\t$jsgraphlib='flot';\n\t$datacolor=array();\n\n\t// Load colors of theme into $datacolor array\n\t$color_file = DOL_DOCUMENT_ROOT.\"/theme/\".$conf->theme.\"/graph-color.php\";\n\tif (is_readable($color_file))\n\t{\n\t\tinclude_once $color_file;\n\t\tif (isset($theme_datacolor))\n\t\t{\n\t\t\t$datacolor=array();\n\t\t\tforeach($theme_datacolor as $val)\n\t\t\t{\n\t\t\t\t$datacolor[]=\"#\".sprintf(\"%02x\",$val[0]).sprintf(\"%02x\",$val[1]).sprintf(\"%02x\",$val[2]);\n\t\t\t}\n\t\t}\n\t}\n\tprint '<div id=\"'.$htmlid.'\" style=\"width:'.$width.'px;height:'.$height.'px;\"></div>';\n\n\t// We use Flot js lib\n\tif ($jsgraphlib == 'flot')\n\t{\n\t\tif ($type == 'pie')\n\t\t{\n\t\t\t// data is   array('series'=>array(serie1,serie2,...),\n\t\t\t//                 'seriestype'=>array('bar','line',...),\n\t\t\t//                 'seriescolor'=>array(0=>'#999999',1=>'#999999',...)\n\t\t\t//                 'xlabel'=>array(0=>labelx1,1=>labelx2,...));\n\t\t\t// serieX is array('label'=>'label', data=>val)\n\t\t\tprint '\n\t\t\t<script type=\"text/javascript\">\n\t\t\t$(function () {\n\t\t\t\tvar data = '.json_encode($data['series']).';\n\n\t\t\t\tfunction plotWithOptions() {\n\t\t\t\t\t$.plot($(\"#'.$htmlid.'\"), data,\n\t\t\t\t\t{\n\t\t\t\t\t\tseries: {\n\t\t\t\t\t\t\tpie: {\n\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\tradius: 3/4,\n\t\t\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\t\tradius: 3/4,\n\t\t\t\t\t\t\t\t\tformatter: function(label, series) {\n\t\t\t\t\t\t\t\t\t\tvar percent=Math.round(series.percent);\n\t\t\t\t\t\t\t\t\t\tvar number=series.data[0][1];\n\t\t\t\t\t\t\t\t\t\treturn \\'';\n\t\t\t\t\t\t\t\t\t\tprint '<div style=\"font-size:8pt;text-align:center;padding:2px;color:white;\">';\n\t\t\t\t\t\t\t\t\t\tif ($url) print '<a style=\"color: #FFFFFF;\" border=\"0\" href=\"'.$url.'=\">';\n\t\t\t\t\t\t\t\t\t\tprint '\\'+'.($showlegend?'number':'label+\\'<br/>\\'+number');\n\t\t\t\t\t\t\t\t\t\tif (! empty($showpercent)) print '+\\'<br/>\\'+percent+\\'%\\'';\n\t\t\t\t\t\t\t\t\t\tprint '+\\'';\n\t\t\t\t\t\t\t\t\t\tif ($url) print '</a>';\n\t\t\t\t\t\t\t\t\t\tprint '</div>\\';\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbackground: {\n\t\t\t\t\t\t\t\t\t\topacity: 0.5,\n\t\t\t\t\t\t\t\t\t\tcolor: \\'#000000\\'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpan: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},';\n\t\t\t\t\t\tif (count($datacolor))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint 'colors: '.(! empty($data['seriescolor']) ? json_encode($data['seriescolor']) : json_encode($datacolor)).',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint 'legend: {show: '.($showlegend?'true':'false').', position: \\'ne\\' }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tplotWithOptions();\n\t\t\t});\n\t\t\t</script>';\n\t\t}\n\t\telse if ($type == 'barline')\n\t\t{\n\t\t\t// data is   array('series'=>array(serie1,serie2,...),\n\t\t\t//                 'seriestype'=>array('bar','line',...),\n\t\t\t//                 'seriescolor'=>array(0=>'#999999',1=>'#999999',...)\n\t\t\t//                 'xlabel'=>array(0=>labelx1,1=>labelx2,...));\n\t\t\t// serieX is array('label'=>'label', data=>array(0=>y1,1=>y2,...)) with same nb of value than into xlabel\n\t\t\tprint '\n\t\t\t<script type=\"text/javascript\">\n\t\t\t$(function () {\n\t\t\t\tvar data = [';\n\t\t\t\t$i=0; $outputserie=0;\n\t\t\t\tforeach($data['series'] as $serie)\n\t\t\t\t{\n\t\t\t\t\tif ($data['seriestype'][$i]=='line') { $i++; continue; };\n\t\t\t\t\tif ($outputserie > 0) print ',';\n\t\t\t\t\tprint '{ bars: { stack: 0, show: true, barWidth: 0.9, align: \\'center\\' }, label: \\''.dol_escape_js($serie['label']).'\\', data: '.json_encode($serie['data']).'}'.\"\\n\";\n\t\t\t\t\t$outputserie++; $i++;\n\t\t\t\t}\n\t\t\t\tif ($outputserie) print ', ';\n\t\t\t\t//print '];\n\t\t\t\t//var datalines = [';\n\t\t\t\t$i=0; $outputserie=0;\n\t\t\t\tforeach($data['series'] as $serie)\n\t\t\t\t{\n\t\t\t\t\tif (empty($data['seriestype'][$i]) || $data['seriestype'][$i]=='bar') { $i++; continue; };\n\t\t\t\t\tif ($outputserie > 0) print ',';\n\t\t\t\t\tprint '{ lines: { show: true }, label: \\''.dol_escape_js($serie['label']).'\\', data: '.json_encode($serie['data']).'}'.\"\\n\";\n\t\t\t\t\t$outputserie++; $i++;\n\t\t\t\t}\n\t\t\t\tprint '];\n\t\t\t\tvar dataticks = '.json_encode($data['xlabel']).'\n\n\t\t\t\tfunction plotWithOptions() {\n\t\t\t\t\t$.plot(jQuery(\"#'.$htmlid.'\"), data,\n\t\t\t\t\t{\n\t\t\t\t\t\tseries: {\n\t\t\t\t\t\t\tstack: 0\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpan: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},';\n\t\t\t\t\t\tif (count($datacolor))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint 'colors: '.json_encode($datacolor).',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint 'legend: {show: '.($showlegend?'true':'false').'},\n\t\t\t\t\t\txaxis: {ticks: dataticks}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tplotWithOptions();\n\t\t\t});\n\t\t\t</script>';\n\t\t}\n\t\telse print 'BadValueForPArameterType';\n\t}\n}\n\n/**\n *\tTruncate a string to a particular length adding '...' if string larger than length.\n * \tIf length = max length+1, we do no truncate to avoid having just 1 char replaced with '...'.\n *  MAIN_DISABLE_TRUNC=1 can disable all truncings\n *\n *\t@param\tstring\t$string\t\t\t\tString to truncate\n *\t@param  int\t\t$size\t\t\t\tMax string size visible. 0 for no limit. finale string size can be 1 more (if size was max+1) or 3 more (if we added ...)\n *\t@param\tstring\t$trunc\t\t\t\tWhere to trunc: right, left, middle (size must be a 2 power), wrap\n * \t@param\tstring\t$stringencoding\t\tTell what is source string encoding\n *  @param\tint\t\t$nodot\t\t\t\tTruncation do not add ... after truncation. So it's an exact truncation.\n *\t@return string\t\t\t\t\t\tTruncated string\n */\nfunction dol_trunc($string,$size=40,$trunc='right',$stringencoding='UTF-8',$nodot=0)\n{\n\tglobal $conf;\n\n\tif ($size==0 || ! empty($conf->global->MAIN_DISABLE_TRUNC)) return $string;\n\n\t// We go always here\n\tif ($trunc == 'right')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > ($size+($nodot?0:1)))\n\t\treturn dol_substr($newstring,0,$size,$stringencoding).($nodot?'':'...');\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'middle')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > 2 && dol_strlen($newstring,$stringencoding) > ($size+1))\n\t\t{\n\t\t\t$size1=round($size/2);\n\t\t\t$size2=round($size/2);\n\t\t\treturn dol_substr($newstring,0,$size1,$stringencoding).'...'.dol_substr($newstring,dol_strlen($newstring,$stringencoding) - $size2,$size2,$stringencoding);\n\t\t}\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'left')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > ($size+1))\n\t\treturn '...'.dol_substr($newstring,dol_strlen($newstring,$stringencoding) - $size,$size,$stringencoding);\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'wrap')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > ($size+1))\n\t\treturn dol_substr($newstring,0,$size,$stringencoding).\"\\n\".dol_trunc(dol_substr($newstring,$size,dol_strlen($newstring,$stringencoding)-$size,$stringencoding),$size,$trunc);\n\t\telse\n\t\treturn $string;\n\t}\n\telse return 'BadParam3CallingDolTrunc';\n}\n\n/**\n *\tShow picto whatever it's its name (generic function)\n *\n *\t@param      string\t\t$alt         \t\tText on alt and title of image\n *\t@param      string\t\t$picto       \t\tName of image file to show ('filenew', ...)\n *\t\t\t\t\t\t\t\t\t\t\t\tIf no extension provided, we use '.png'. Image must be stored into theme/xxx/img directory.\n *                                  \t\t\tExample: picto.png                  if picto.png is stored into htdocs/theme/mytheme/img\n *                                  \t\t\tExample: picto.png@mymodule         if picto.png is stored into htdocs/mymodule/img\n *                                  \t\t\tExample: /mydir/mysubdir/picto.png  if picto.png is stored into htdocs/mydir/mysubdir (pictoisfullpath must be set to 1)\n *\t@param\t\tstring\t\t$options\t\t\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *  @return     string       \t\t\t\t    Return img tag\n *  @see        #img_object, #img_picto_common\n */\nfunction img_picto($alt, $picto, $options = '', $pictoisfullpath = false)\n{\n\tglobal $conf;\n\n\t// Define fullpathpicto to use into src\n\tif ($pictoisfullpath) {\n\t\t// Clean parameters\n\t\tif (! preg_match('/(\\.png|\\.gif)$/i',$picto))\n\t\t\t$picto .= '.png';\n\t\t$fullpathpicto = $picto;\n\t}\n\telse\n\t{\n\t\t// By default, we search into theme directory\n\t\t$url = DOL_URL_ROOT;\n\t\t$path = 'theme/'.$conf->theme;\n\t\tif (! empty($conf->global->MAIN_FORCETHEMEDIR))\n\t\t\t$path = preg_replace('/^\\//', '', $conf->global->MAIN_FORCETHEMEDIR).'/'.$path;\n\t\t// If we ask an image into module/img (not into a theme path)\n\t\tif (preg_match('/^([^@]+)@([^@]+)$/i',$picto,$regs))\n\t\t{\n\t\t\t$picto = $regs[1];\n\t\t\t$path = $regs[2];\n\t\t}\n\t\t// Clean parameters\n\t\tif (! preg_match('/(\\.png|\\.gif)$/i',$picto))\n\t\t\t$picto .= '.png';\n\t\t// If img file not into standard path, we use alternate path\n\t\tif (defined('DOL_URL_ROOT_ALT') && DOL_URL_ROOT_ALT && ! file_exists(DOL_DOCUMENT_ROOT.'/'.$path.'/img/'.$picto))\n\t\t\t$url = DOL_URL_ROOT_ALT;\n\n\t\t$fullpathpicto = $url.'/'.$path.'/img/'.$picto;\n\t}\n\n\treturn '<img src=\"'.$fullpathpicto.'\" border=\"0\" alt=\"'.dol_escape_htmltag($alt).'\" title=\"'.dol_escape_htmltag($alt).'\"'.(! empty($options)?' '.$options:'').'>';\n}\n\n/**\n *\tShow a picto called object_picto (generic function)\n *\n *\t@param\tstring\t$alt\t\t\t\tText of alt on image\n *\t@param\tstring\t$picto\t\t\t\tName of image to show object_picto (example: user, group, action, bill, contract, propal, product, ...)\n *\t\t\t\t\t\t\t\t\t\tFor external modules use imagename@mymodule to search into directory \"img\" of module.\n *\t@param\tstring\t$options\t\t\tAdd more attribute on img tag (ie: class=\"datecallink\")\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@return\tstring\t\t\t\t\t\tReturn img tag\n *\t@see\t#img_picto, #img_picto_common\n */\nfunction img_object($alt, $picto, $options = '', $pictoisfullpath = false)\n{\n\treturn img_picto($alt, 'object_'.$picto, $options, $pictoisfullpath);\n}\n\n/**\n *\tShow picto (generic function)\n *\n *\t@param      string\t\t$alt         \t\tText on alt and title of image\n *\t@param      string\t\t$picto       \t\tName of image file to show (If no extension provided, we use '.png'). Image must be stored into htdocs/theme/common directory.\n *\t@param\t\tstring\t\t$options\t\t\tAdd more attribute on img tag\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@return     string      \t\t\t\t\tReturn img tag\n *  @see        #img_object, #img_picto\n */\nfunction img_picto_common($alt, $picto, $options = '', $pictoisfullpath = 0)\n{\n\tglobal $conf;\n\n\tif (! preg_match('/(\\.png|\\.gif)$/i', $picto)) $picto .= '.png';\n\n\tif ($pictoisfullpath) $path = $picto;\n\telse\n\t{\n\t\t$path = DOL_URL_ROOT.'/theme/common/'.$picto;\n\n\t\tif (! empty($conf->global->MAIN_MODULE_CAN_OVERWRITE_COMMONICONS))\n\t\t{\n\t\t\t$themepath = DOL_DOCUMENT_ROOT.'/theme/'.$conf->theme.'/img/'.$picto;\n\n\t\t\tif (file_exists($themepath)) $path = $themepath;\n\t\t}\n\t}\n\n\treturn img_picto($alt, $path, $options, 1);\n}\n\n/**\n *\tShow logo action\n *\n *\t@param\tstring\t$alt         \tText for image alt and title ('default', ...)\n *\t@param  int\t\t$numaction   \tAction to show\n *\t@return string      \t\t\tReturn an img tag\n */\nfunction img_action($alt, $numaction)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default')\n\t{\n\t\tif ($numaction == -1) $alt = $langs->transnoentitiesnoconv('ChangeDoNotContact');\n\t\tif ($numaction == 0) $alt = $langs->transnoentitiesnoconv('ChangeNeverContacted');\n\t\tif ($numaction == 1) $alt = $langs->transnoentitiesnoconv('ChangeToContact');\n\t\tif ($numaction == 2) $alt = $langs->transnoentitiesnoconv('ChangeContactInProcess');\n\t\tif ($numaction == 3) $alt = $langs->transnoentitiesnoconv('ChangeContactDone');\n\t}\n\n\treturn img_picto($alt, 'stcomm'.$numaction.'.png');\n}\n\n/**\n *  Show pdf logo\n *\n *  @param\tstring\t\t$alt        Texte sur le alt de l'image\n *  @param  int\t\t    $size       Taille de l'icone : 3 = 16x16px , 2 = 14x14px\n *  @return string      \t\t\tRetourne tag img\n */\nfunction img_pdf($alt = 'default', $size = 3)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Show');\n\n\treturn img_picto($alt, 'pdf'.$size.'.png');\n}\n\n/**\n *\tShow logo +\n *\n *\t@param\tstring\t$alt        Texte sur le alt de l'image\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit_add($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Add');\n\n\treturn img_picto($alt, 'edit_add.png');\n}\n/**\n *\tShow logo -\n *\n *\t@param\tstring\t$alt         Texte sur le alt de l'image\n *\t@return string      Retourne tag img\n */\nfunction img_edit_remove($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Remove');\n\n\treturn img_picto($alt, 'edit_remove.png');\n}\n\n/**\n *\tShow logo editer/modifier fiche\n *\n *\t@param  string\t$alt        Texte sur le alt de l'image\n *\t@param  float\t$float      Si il faut y mettre le style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      \t\tRetourne tag img\n */\nfunction img_edit($alt = 'default', $float = 0, $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Modify');\n\n\treturn img_picto($alt, 'edit.png', ($float ? 'style=\"float: right\"' : $other));\n}\n\n/**\n *\tShow logo view card\n *\n *\t@param\tstring\t$alt         Texte sur le alt de l'image\n *\t@param  float\t$float       Si il faut y mettre le style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      Retourne tag img\n */\nfunction img_view($alt = 'default', $float = 0, $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('View');\n\n\t$options = ($float ? 'style=\"float: right\" ' : '').$other;\n\n\treturn img_picto($alt, 'view.png', $options);\n}\n\n/**\n *  Show delete logo\n *\n *  @param\tstring\t$alt        Text on alt image\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_delete($alt = 'default', $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Delete');\n\n\treturn img_picto($alt, 'delete.png', $other);\n}\n\n/**\n *\tShow help logo with cursor \"?\"\n *\n * \t@param\tstring\t$usehelpcursor\t\tUse help cursor\n * \t@param\tstring\t$usealttitle\t\tText to use as alt title\n * \t@return string      \t\t\t\tRetourne tag img\n */\nfunction img_help($usehelpcursor = 1, $usealttitle = 1)\n{\n\tglobal $conf, $langs;\n\n\tif ($usealttitle)\n\t{\n\t\tif (is_string($usealttitle)) $usealttitle = dol_escape_htmltag($usealttitle);\n\t\telse $usealttitle = $langs->trans('Info');\n\t}\n\n\treturn img_picto($usealttitle, 'info.png', ($usehelpcursor ? 'style=\"cursor: help\"' : ''));\n}\n\n/**\n *\tShow info logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_info($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Informations');\n\n\treturn img_picto($alt, 'info.png');\n}\n\n/**\n *\tShow warning logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$float      If we must add style \"float: right\"\n *\t@return string      \t\tReturn img tag\n */\nfunction img_warning($alt = 'default', $float = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Warning');\n\n\treturn img_picto($alt, 'warning.png', ($float ? 'style=\"float: right\"' : ''));\n}\n\n/**\n *  Show error logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_error($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Error');\n\n\treturn img_picto($alt, 'error.png');\n}\n\n/**\n *\tShow next logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_next($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Next');\n\n\treturn img_picto($alt, 'next.png');\n}\n\n/**\n *\tShow previous logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_previous($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Previous');\n\n\treturn img_picto($alt, 'previous.png');\n}\n\n/**\n *\tShow down arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected   Selected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_down($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Down');\n\n\treturn img_picto($alt, ($selected ? '1downarrow_selected.png' : '1downarrow.png'), 'class=\"imgdown\"');\n}\n\n/**\n *\tShow top arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected\tSelected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_up($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Up');\n\n\treturn img_picto($alt, ($selected ? '1uparrow_selected.png' : '1uparrow.png'), 'class=\"imgup\"');\n}\n\n/**\n *\tShow left arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected\tSelected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_left($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Left');\n\n\treturn img_picto($alt, ($selected ? '1leftarrow_selected.png' : '1leftarrow.png'));\n}\n\n/**\n *\tShow right arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected\tSelected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_right($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Right');\n\n\treturn img_picto($alt, ($selected ? '1rightarrow_selected.png' : '1rightarrow.png'));\n}\n\n/**\n *\tShow tick logo if allowed\n *\n *\t@param\tstring\t$allow\t\tAllow\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_allow($allow, $alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Active');\n\n\tif ($allow == 1) return img_picto($alt, 'tick.png');\n\n\treturn '-';\n}\n\n\n/**\n *\tShow MIME img of a file\n *\n *\t@param\tstring\t$file\t\tFilename\n * \t@param\tstring\t$alt\t\tAlternate text to show on img mous hover\n *\t@return string     \t\t\tReturn img tag\n */\nfunction img_mime($file, $alt = '')\n{\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t$mimetype = dol_mimetype($file, '', 1);\n\t$mimeimg = dol_mimetype($file, '', 2);\n\n\tif (empty($alt)) $alt = 'Mime type: '.$mimetype;\n\n\treturn img_picto_common($alt, 'mime/'.$mimeimg);\n}\n\n\n/**\n *\tShow phone logo.\n *  Use img_picto instead.\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$option\t\tOption\n *\t@return string      \t\tReturn img tag\n *  @deprecated\n */\nfunction img_phone($alt = 'default', $option = 0)\n{\n\tglobal $conf,$langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Call');\n\n\tif ($option == 1) $img = 'call';\n\telse $img = 'call_out';\n\n\treturn img_picto($alt, $img);\n}\n\n\n/**\n *\tShow information for admin users\n *\n *\t@param\tstring\t$text\t\t\tText info\n *\t@param  string\t$infoonimgalt\tInfo is shown only on alt of star picto, otherwise it is show on output after the star picto\n *\t@param\tint\t\t$nodiv\t\t\tNo div\n *\t@return\tstring\t\t\t\t\tString with info text\n */\nfunction info_admin($text, $infoonimgalt = 0, $nodiv=0)\n{\n\tglobal $conf, $langs;\n\n\tif ($infoonimgalt)\n\t{\n\t\treturn img_picto($text, 'star');\n\t}\n\n\treturn ($nodiv?'':'<div class=\"info\">').img_picto($langs->trans('InfoAdmin'), 'star').' '.$text.($nodiv?'':'</div>');\n}\n\n\n/**\n *\tAffiche message erreur system avec toutes les informations pour faciliter le diagnostic et la remontee des bugs.\n *\tOn doit appeler cette fonction quand une erreur technique bloquante est rencontree.\n *\tToutefois, il faut essayer de ne l'appeler qu'au sein de pages php, les classes devant\n *\trenvoyer leur erreur par l'intermediaire de leur propriete \"error\".\n *\n *\t@param\t DoliDB\t$db      \tDatabase handler\n *\t@param  string\t$error\t\tString or array of errors strings to show\n *\t@return void\n *  @see    dol_htmloutput_errors\n */\nfunction dol_print_error($db='',$error='')\n{\n\tglobal $conf,$langs,$argv;\n\tglobal $dolibarr_main_prod;\n\n\t$out = '';\n\t$syslog = '';\n\n\t// Si erreur intervenue avant chargement langue\n\tif (! $langs)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT .'/core/class/translate.class.php';\n\t\t$langs = new Translate('', $conf);\n\t\t$langs->load(\"main\");\n\t}\n\t$langs->load(\"main\");\n\t$langs->load(\"errors\");\n\n\tif ($_SERVER['DOCUMENT_ROOT'])    // Mode web\n\t{\n\t\t$out.=$langs->trans(\"DolibarrHasDetectedError\").\".<br>\\n\";\n\t\tif (! empty($conf->global->MAIN_FEATURES_LEVEL))\n\t\t$out.=\"You use an experimental level of features, so please do NOT report any bugs, anywhere, until going back to MAIN_FEATURES_LEVEL = 0.<br>\\n\";\n\t\t$out.=$langs->trans(\"InformationToHelpDiagnose\").\":<br>\\n\";\n\n\t\t$out.=\"<b>\".$langs->trans(\"Date\").\":</b> \".dol_print_date(time(),'dayhourlog').\"<br>\\n\";;\n\t\t$out.=\"<b>\".$langs->trans(\"Dolibarr\").\":</b> \".DOL_VERSION.\"<br>\\n\";;\n\t\tif (isset($conf->global->MAIN_FEATURES_LEVEL)) $out.=\"<b>\".$langs->trans(\"LevelOfFeature\").\":</b> \".$conf->global->MAIN_FEATURES_LEVEL.\"<br>\\n\";;\n\t\tif (function_exists(\"phpversion\"))\n\t\t{\n\t\t\t$out.=\"<b>\".$langs->trans(\"PHP\").\":</b> \".phpversion().\"<br>\\n\";\n\t\t\t//phpinfo();       // This is to show location of php.ini file\n\t\t}\n\t\t$out.=\"<b>\".$langs->trans(\"Server\").\":</b> \".$_SERVER[\"SERVER_SOFTWARE\"].\"<br>\\n\";;\n\t\t$out.=\"<br>\\n\";\n\t\t$out.=\"<b>\".$langs->trans(\"RequestedUrl\").\":</b> \".$_SERVER[\"REQUEST_URI\"].\"<br>\\n\";;\n\t\t$out.=\"<b>\".$langs->trans(\"Referer\").\":</b> \".(isset($_SERVER[\"HTTP_REFERER\"])?$_SERVER[\"HTTP_REFERER\"]:'').\"<br>\\n\";;\n\t\t$out.=\"<b>\".$langs->trans(\"MenuManager\").\":</b> \".$conf->top_menu.\"<br>\\n\";\n\t\t$out.=\"<br>\\n\";\n\t\t$syslog.=\"url=\".$_SERVER[\"REQUEST_URI\"];\n\t\t$syslog.=\", query_string=\".$_SERVER[\"QUERY_STRING\"];\n\t}\n\telse                              // Mode CLI\n\t{\n\t\t$out.='> '.$langs->transnoentities(\"ErrorInternalErrorDetected\").\":\\n\".$argv[0].\"\\n\";\n\t\t$syslog.=\"pid=\".getmypid();\n\t}\n\n\tif (is_object($db))\n\t{\n\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t{\n\t\t\t$out.=\"<b>\".$langs->trans(\"DatabaseTypeManager\").\":</b> \".$db->type.\"<br>\\n\";\n\t\t\t$out.=\"<b>\".$langs->trans(\"RequestLastAccessInError\").\":</b> \".($db->lastqueryerror()?$db->lastqueryerror():$langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out.=\"<b>\".$langs->trans(\"ReturnCodeLastAccessInError\").\":</b> \".($db->lasterrno()?$db->lasterrno():$langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out.=\"<b>\".$langs->trans(\"InformationLastAccessInError\").\":</b> \".($db->lasterror()?$db->lasterror():$langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out.=\"<br>\\n\";\n\t\t}\n\t\telse                            // Mode CLI\n\t\t{\n\t\t\t$out.='> '.$langs->transnoentities(\"DatabaseTypeManager\").\":\\n\".$db->type.\"\\n\";\n\t\t\t$out.='> '.$langs->transnoentities(\"RequestLastAccessInError\").\":\\n\".($db->lastqueryerror()?$db->lastqueryerror():$langs->trans(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out.='> '.$langs->transnoentities(\"ReturnCodeLastAccessInError\").\":\\n\".($db->lasterrno()?$db->lasterrno():$langs->trans(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out.='> '.$langs->transnoentities(\"InformationLastAccessInError\").\":\\n\".($db->lasterror()?$db->lasterror():$langs->trans(\"ErrorNoRequestInError\")).\"\\n\";\n\n\t\t}\n\t\t$syslog.=\", sql=\".$db->lastquery();\n\t\t$syslog.=\", db_error=\".$db->lasterror();\n\t}\n\n\tif ($error)\n\t{\n\t\t$langs->load(\"errors\");\n\n\t\tif (is_array($error)) $errors=$error;\n\t\telse $errors=array($error);\n\n\t\tforeach($errors as $msg)\n\t\t{\n\t\t\t$msg=$langs->trans($msg);\n\t\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t\t{\n\t\t\t\t$out.=\"<b>\".$langs->trans(\"Message\").\":</b> \".$msg.\"<br>\\n\" ;\n\t\t\t}\n\t\t\telse                            // Mode CLI\n\t\t\t{\n\t\t\t\t$out.='> '.$langs->transnoentities(\"Message\").\":\\n\".$msg.\"\\n\" ;\n\t\t\t}\n\t\t\t$syslog.=\", msg=\".$msg;\n\t\t}\n\t}\n\tif (empty($dolibarr_main_prod) && $_SERVER['DOCUMENT_ROOT'] && function_exists('xdebug_print_function_stack') && function_exists('xdebug_call_file'))\n\t{\n\t\txdebug_print_function_stack();\n\t\t$out.='<b>XDebug informations:</b>'.\"<br>\\n\";\n\t\t$out.='File: '.xdebug_call_file().\"<br>\\n\";\n\t\t$out.='Line: '.xdebug_call_line().\"<br>\\n\";\n\t\t$out.='Function: '.xdebug_call_function().\"<br>\\n\";\n\t\t$out.=\"<br>\\n\";\n\t}\n\n\tif (empty($dolibarr_main_prod)) print $out;\n\telse define(\"MAIN_CORE_ERROR\", 1);\n\t//else print 'Sorry, an error occured but the parameter $dolibarr_main_prod is defined in conf file so no message is reported to your browser. Please read the log file for error message.';\n\tdol_syslog(\"Error \".$syslog, LOG_ERR);\n}\n\n/**\n * Show a public email and error code to contact if technical error\n *\n * @param\tstring\t$prefixcode\t\tPrefix of public error code\n * @return\tvoid\n */\nfunction dol_print_error_email($prefixcode)\n{\n\tglobal $langs,$conf;\n\n\t$langs->load(\"errors\");\n\t$now=dol_now();\n\tprint '<br><div class=\"error\">'.$langs->trans(\"ErrorContactEMail\", $conf->global->MAIN_INFO_SOCIETE_MAIL, $prefixcode.dol_print_date($now,'%Y%m%d')).'</div>';\n}\n\n/**\n *\tShow title line of an array\n *\n *\t@param\tstring\t$name        Label of field\n *\t@param\tstring\t$file        Url used when we click on sort picto\n *\t@param\tstring\t$field       Field to use for new sorting\n *\t@param\tstring\t$begin       (\"\" by defaut)\n *\t@param\tstring\t$moreparam   Add more parameters on sort url links (\"\" by default)\n *\t@param  string\t$td          Options of attribute td (\"\" by defaut)\n *\t@param  string\t$sortfield   Current field used to sort\n *\t@param  string\t$sortorder   Current sort order\n *\t@return\tvoid\n */\nfunction print_liste_field_titre($name, $file=\"\", $field=\"\", $begin=\"\", $moreparam=\"\", $td=\"\", $sortfield=\"\", $sortorder=\"\")\n{\n\tprint getTitleFieldOfList($name, 0, $file, $field, $begin, $moreparam, $td, $sortfield, $sortorder);\n}\n\n/**\n *\tGet title line of an array\n *\n *\t@param\tstring\t$name        Label of field\n *\t@param\tint\t\t$thead\t\t For thead format\n *\t@param\tstring\t$file        Url used when we click on sort picto\n *\t@param\tstring\t$field       Field to use for new sorting. Empty if this field is not sortable.\n *\t@param\tstring\t$begin       (\"\" by defaut)\n *\t@param\tstring\t$moreparam   Add more parameters on sort url links (\"\" by default)\n *\t@param  string\t$moreattrib  Add more attributes on th (\"\" by defaut)\n *\t@param  string\t$sortfield   Current field used to sort\n *\t@param  string\t$sortorder   Current sort order\n *\t@return\tvoid\n */\nfunction getTitleFieldOfList($name, $thead=0, $file=\"\", $field=\"\", $begin=\"\", $moreparam=\"\", $moreattrib=\"\", $sortfield=\"\", $sortorder=\"\")\n{\n\tglobal $conf;\n\t//print \"$name, $file, $field, $begin, $options, $moreattrib, $sortfield, $sortorder<br>\\n\";\n\n\t$out='';\n\t// If field is used as sort criteria we use a specific class\n\t// Example if (sortfield,field)=(\"nom\",\"xxx.nom\") or (sortfield,field)=(\"nom\",\"nom\")\n\tif ($field && ($sortfield == $field || $sortfield == preg_replace(\"/^[^\\.]+\\./\",\"\",$field)))\n\t{\n\t\t$out.= '<th class=\"liste_titre_sel\" '. $moreattrib.'>';\n\t}\n\telse\n\t{\n\t\t$out.= '<th class=\"liste_titre\" '. $moreattrib.'>';\n\t}\n\t$out.=$name;\n\n\tif (empty($thead) && $field)    // If this is a sort field\n\t{\n\t\t$options=preg_replace('/sortfield=([a-zA-Z0-9,\\s\\.]+)/i','',$moreparam);\n\t\t$options=preg_replace('/sortorder=([a-zA-Z0-9,\\s\\.]+)/i','',$options);\n\t\t$options=preg_replace('/&+/i','&',$options);\n\t\tif (! preg_match('/^&/',$options)) $options='&'.$options;\n\n\t\t//print \"&nbsp;\";\n\t\t$out.= '<img width=\"2\" src=\"'.DOL_URL_ROOT.'/theme/common/transparent.png\" alt=\"\">';\n\t\tif (! $sortorder)\n\t\t{\n\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($field != $sortfield)\n\t\t\t{\n\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$sortorder=strtoupper($sortorder);\n\t\t\t\tif ($sortorder == 'DESC' ) {\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",1).'</a>';\n\t\t\t\t}\n\t\t\t\tif ($sortorder == 'ASC' ) {\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",1).'</a>';\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t$out.='</th>';\n\n\treturn $out;\n}\n\n/**\n *\tShow a title (deprecated. use print_fiche_titre instrad)\n *\n *\t@param\tstring\t$title\t\t\tTitle to show\n *\t@return\tstring\t\t\t\t\tTitle to show\n */\nfunction print_titre($title)\n{\n\tprint '<div class=\"titre\">'.$title.'</div>';\n}\n\n/**\n *\tShow a title with picto\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show\n *\t@param\tstring\t$mesg\t\t\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tint\t\t$id\t\t\t\t\tTo force an id on html objects\n * \t@return\tvoid\n */\nfunction print_fiche_titre($titre, $mesg='', $picto='title.png', $pictoisfullpath=0, $id='')\n{\n\tprint load_fiche_titre($titre, $mesg, $picto, $pictoisfullpath, $id);\n}\n\n/**\n *\tLoad a title with picto\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show\n *\t@param\tstring\t$mesg\t\t\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tint\t\t$id\t\t\t\t\tTo force an id on html objects\n * \t@return\tvoid\n */\nfunction load_fiche_titre($titre, $mesg='', $picto='title.png', $pictoisfullpath=0, $id='')\n{\n\tglobal $conf;\n\n\t$return='';\n\n\tif ($picto == 'setup') $picto='title.png';\n\tif (!empty($conf->browser->ie) && $picto=='title.png') $picto='title.gif';\n\n\t$return.= \"\\n\";\n\t$return.= '<table '.($id?'id=\"'.$id.'\" ':'').'summary=\"\" width=\"100%\" border=\"0\" class=\"notopnoleftnoright\" style=\"margin-bottom: 2px;\"><tr>';\n\tif ($picto) $return.= '<td class=\"nobordernopadding hideonsmartphone\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, 'id=\"pictotitle\"', $pictoisfullpath).'</td>';\n\t$return.= '<td class=\"nobordernopadding\" valign=\"middle\">';\n\t$return.= '<div class=\"titre\">'.$titre.'</div>';\n\t$return.= '</td>';\n\tif (dol_strlen($mesg))\n\t{\n\t\t$return.= '<td class=\"nobordernopadding\" align=\"right\" valign=\"middle\"><b>'.$mesg.'</b></td>';\n\t}\n\t$return.= '</tr></table>'.\"\\n\";\n\n\treturn $return;\n}\n\n/**\n *\tPrint a title with navigation controls for pagination\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show (required)\n *\t@param\tstring\t$page\t\t\t\tNumero of page (required)\n *\t@param\tstring\t$file\t\t\t\tUrl of page (required)\n *\t@param\tstring\t$options         \tparametres complementaires lien ('' par defaut)\n *\t@param\tstring\t$sortfield       \tchamp de tri ('' par defaut)\n *\t@param\tstring\t$sortorder       \tordre de tri ('' par defaut)\n *\t@param\tstring\t$center          \tchaine du centre ('' par defaut)\n *\t@param\tint\t\t$num\t\t\t\tnumber of records found by select with limit+1\n *\t@param\tint\t\t$totalnboflines\t\tTotal number of records/lines for all pages (if known)\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t\t1=Icon name is a full absolute url of image\n *\t@return\tvoid\n */\nfunction print_barre_liste($titre, $page, $file, $options='', $sortfield='', $sortorder='', $center='', $num=-1, $totalnboflines=0, $picto='title.png', $pictoisfullpath=0)\n{\n\tglobal $conf,$langs;\n\n\tif ($picto == 'setup') $picto='title.png';\n\tif (!empty($conf->browser->ie) && $picto=='title.png') $picto='title.gif';\n\n\tif ($num > $conf->liste_limit or $num == -1)\n\t{\n\t\t$nextpage = 1;\n\t}\n\telse\n\t{\n\t\t$nextpage = 0;\n\t}\n\n\tprint \"\\n\";\n\tprint \"<!-- Begin title '\".$titre.\"' -->\\n\";\n\tprint '<table width=\"100%\" border=\"0\" class=\"notopnoleftnoright\" style=\"margin-bottom: 2px;\"><tr>';\n\n\t$pagelist = '';\n\n\t// Left\n\tif ($page > 0 || $num > $conf->liste_limit)\n\t{\n\t\tif ($totalnboflines)\n\t\t{\n\t\t\tif ($picto && $titre) print '<td class=\"nobordernopadding\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, '', $pictoisfullpath).'</td>';\n\t\t\tprint '<td class=\"nobordernopadding\">';\n\t\t\tprint '<div class=\"titre\">'.$titre.'</div>';\n\t\t\tprint '</td>';\n\n\t\t\t$maxnbofpage=10;\n\n\t\t\t$nbpages=ceil($totalnboflines/$conf->liste_limit);\n\t\t\t$cpt=($page-$maxnbofpage);\n\t\t\tif ($cpt < 0) { $cpt=0; }\n\t\t\t$pagelist.=$langs->trans('Page');\n\t\t\tif ($cpt>=1)\n\t\t\t{\n\t\t\t\t$pagelist.=' <a href=\"'.$file.'?page=0'.$options.'&amp;sortfield='.$sortfield.'&amp;sortorder='.$sortorder.'\">1</a>';\n\t\t\t\tif ($cpt >= 2) $pagelist.=' ...';\n\t\t\t}\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif($cpt==$page)\n\t\t\t\t{\n\t\t\t\t\t$pagelist.= ' <u>'.($page+1).'</u>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$pagelist.= ' <a href=\"'.$file.'?page='.$cpt.$options.'&amp;sortfield='.$sortfield.'&amp;sortorder='.$sortorder.'\">'.($cpt+1).'</a>';\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t\twhile ($cpt < $nbpages && $cpt<=$page+$maxnbofpage);\n\t\t\tif ($cpt<$nbpages)\n\t\t\t{\n\t\t\t\tif ($cpt<$nbpages-1) $pagelist.= ' ...';\n\t\t\t\t$pagelist.= ' <a href=\"'.$file.'?page='.($nbpages-1).$options.'&amp;sortfield='.$sortfield.'&amp;sortorder='.$sortorder.'\">'.$nbpages.'</a>';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (empty($conf->browser->phone) && $picto && $titre) print '<td class=\"nobordernopadding\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, '', $pictoisfullpath).'</td>';\n\t\t\tprint '<td class=\"nobordernopadding\">';\n\t\t\tprint '<div class=\"titre\">'.$titre.'</div>';\n\t\t\t$pagelist.= $langs->trans('Page').' '.($page+1);\n\t\t\tprint '</td>';\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (empty($conf->browser->phone) && $picto && $titre) print '<td class=\"nobordernopadding\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, '', $pictoisfullpath).'</td>';\n\t\tprint '<td class=\"nobordernopadding\"><div class=\"titre\">'.$titre.'</div></td>';\n\t}\n\n\t// Center\n\tif ($center)\n\t{\n\t\tprint '<td class=\"nobordernopadding\" align=\"left\" valign=\"middle\">'.$center.'</td>';\n\t}\n\n\t// Right\n\tprint '<td class=\"nobordernopadding\" align=\"right\" valign=\"middle\">';\n\tif ($sortfield) $options .= \"&amp;sortfield=\".$sortfield;\n\tif ($sortorder) $options .= \"&amp;sortorder=\".$sortorder;\n\t// Affichage des fleches de navigation\n\tprint_fleche_navigation($page,$file,$options,$nextpage,$pagelist);\n\tprint '</td>';\n\n\tprint '</tr></table>'.\"\\n\";\n\tprint \"<!-- End title -->\\n\\n\";\n}\n\n/**\n *\tFonction servant a afficher les fleches de navigation dans les pages de listes\n *\n *\t@param\tint\t\t$page\t\t\t\tNumero of page\n *\t@param\tstring\t$file\t\t\t\tLien\n *\t@param\tstring\t$options         \tAutres parametres d'url a propager dans les liens (\"\" par defaut)\n *\t@param\tint\t\t$nextpage\t    \tFaut-il une page suivante\n *\t@param\tstring\t$betweenarrows\t\tHTML Content to show between arrows\n *\t@return\tvoid\n */\nfunction print_fleche_navigation($page,$file,$options='',$nextpage=0,$betweenarrows='')\n{\n\tglobal $conf, $langs;\n\tif ($page > 0)\n\t{\n\t\tprint '<a href=\"'.$file.'?page='.($page-1).$options.'\">'.img_previous($langs->trans(\"Previous\")).'</a>';\n\t}\n\tif ($betweenarrows) print ($page > 0?' ':'').$betweenarrows.($nextpage>0?' ':'');\n\tif ($nextpage > 0)\n\t{\n\t\tprint '<a href=\"'.$file.'?page='.($page+1).$options.'\">'.img_next($langs->trans(\"Next\")).'</a>';\n\t}\n}\n\n\n/**\n *\tReturn a string with VAT rate label formated for view output\n *\tUsed into pdf and HTML pages\n *\n *\t@param\tfloat\t$rate\t\t\tRate value to format (19.6 19,6 19.6% 19,6%,...)\n *  @param\tboolean\t$addpercent\t\tAdd a percent % sign in output\n *\t@param\tint\t\t$info_bits\t\tMiscellanous information on vat (0=Default, 1=French NPR vat)\n *\t@param\tint\t\t$usestarfornpr\t1=Use '*' for NPR vat rate intead of MAIN_LABEL_MENTION_NPR\n *  @return\tstring\t\t\t\t\tString with formated amounts (19,6 or 19,6% or 8.5% NPR or 8.5% *)\n */\nfunction vatrate($rate,$addpercent=false,$info_bits=0,$usestarfornpr=0)\n{\n\t// Test for compatibility\n\tif (preg_match('/%/',$rate))\n\t{\n\t\t$rate=str_replace('%','',$rate);\n\t\t$addpercent=true;\n\t}\n\tif (preg_match('/\\*/',$rate) || preg_match('/'.constant('MAIN_LABEL_MENTION_NPR').'/i',$rate))\n\t{\n\t\t$rate=str_replace('*','',$rate);\n\t\t$info_bits |= 1;\n\t}\n\n\t$ret=price($rate,0,'',0,0).($addpercent?'%':'');\n\tif ($info_bits & 1) $ret.=' '.($usestarfornpr?'*':constant('MAIN_LABEL_MENTION_NPR'));\n\treturn $ret;\n}\n\n\n/**\n *\t\tFonction qui formate un montant pour visualisation\n *\t\tFonction utilisee dans les pdf et les pages html\n *\n *\t\t@param\tfloat\t\t$amount\t\t\tMontant a formater\n *\t\t@param\tstring\t\t$form\t\t\tType de formatage, html ou pas (par defaut)\n *\t\t@param\tTranslate\t$outlangs\t\tObjet langs pour formatage text\n *\t\t@param\tint\t\t\t$trunc\t\t\t1=Tronque affichage si trop de decimales,0=Force le non troncage\n *\t\t@param\tint\t\t\t$rounding\t\tMinimum number of decimal. If not defined we use min($conf->global->MAIN_MAX_DECIMALS_UNIT,$conf->global->MAIN_MAX_DECIMALS_TOTAL)\n *\t\t@param\tint\t\t\t$forcerounding\tForce the number of decimal\n *\t\t@return\tstring\t\t\t\t\t\tChaine avec montant formate\n *\n *\t\t@see\tprice2num\t\t\t\t\tRevert function of price\n */\nfunction price($amount, $form=0, $outlangs='', $trunc=1, $rounding=-1, $forcerounding=-1)\n{\n\tglobal $langs,$conf;\n\n\t// Clean parameters\n\tif (empty($amount)) $amount=0;\t// To have a numeric value if amount not defined or = ''\n\t$amount = (is_numeric($amount)?$amount:0); // Check if amount is numeric, for example, an error occured when amount value = o (letter) instead 0 (number)\n\tif ($rounding < 0) $rounding=min($conf->global->MAIN_MAX_DECIMALS_UNIT,$conf->global->MAIN_MAX_DECIMALS_TOT);\n\n\t$nbdecimal=$rounding;\n\n\t// Output separators by default (french)\n\t$dec=','; $thousand=' ';\n\n\t// If $outlangs not forced, we use use language\n\tif (! is_object($outlangs)) $outlangs=$langs;\n\n\tif ($outlangs->trans(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec=$outlangs->trans(\"SeparatorDecimal\");\n\tif ($outlangs->trans(\"SeparatorThousand\")!= \"SeparatorThousand\") $thousand=$outlangs->trans(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand='';\n\t//print \"amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t//print \"amount=\".$amount.\"-\";\n\t$amount = str_replace(',','.',$amount);\t// should be useless\n\t//print $amount.\"-\";\n\t$datas = explode('.',$amount);\n\t$decpart = isset($datas[1])?$datas[1]:'';\n\t$decpart = preg_replace('/0+$/i','',$decpart);\t// Supprime les 0 de fin de partie decimale\n\t//print \"decpart=\".$decpart.\"<br>\";\n\t$end='';\n\n\t// We increase nbdecimal if there is more decimal than asked (to not loose information)\n\tif (dol_strlen($decpart) > $nbdecimal) $nbdecimal=dol_strlen($decpart);\n\t// Si on depasse max\n\tif ($trunc && $nbdecimal > $conf->global->MAIN_MAX_DECIMALS_SHOWN)\n\t{\n\t\t$nbdecimal=$conf->global->MAIN_MAX_DECIMALS_SHOWN;\n\t\tif (preg_match('/\\.\\.\\./i',$conf->global->MAIN_MAX_DECIMALS_SHOWN))\n\t\t{\n\t\t\t// Si un affichage est tronque, on montre des ...\n\t\t\t$end='...';\n\t\t}\n\t}\n\n\t// If force rounding\n\tif ($forcerounding >= 0) $nbdecimal = $forcerounding;\n\n\t// Format number\n\tif ($form)\n\t{\n\t\t$output=preg_replace('/\\s/','&nbsp;',number_format($amount, $nbdecimal, $dec, $thousand));\n\t}\n\telse\n\t{\n\t\t$output=number_format($amount, $nbdecimal, $dec, $thousand);\n\t}\n\t$output.=$end;\n\n\treturn $output;\n}\n\n/**\n *\tFunction that return a number with universal decimal format (decimal separator is '.') from\n *\tan amount typed by a user.\n *\tFunction to use on each input amount before any numeric test or database insert\n *\n *\t@param\tfloat\t$amount\t\t\tAmount to convert/clean\n *\t@param\tstring\t$rounding\t\t''=No rounding\n * \t\t\t\t\t\t\t\t\t'MU'=Round to Max unit price (MAIN_MAX_DECIMALS_UNIT)\n *\t\t\t\t\t\t\t\t\t'MT'=Round to Max for totals with Tax (MAIN_MAX_DECIMALS_TOT)\n *\t\t\t\t\t\t\t\t\t'MS'=Round to Max Shown (MAIN_MAX_DECIMALS_SHOWN)\n * \t@param\tint\t\t$alreadysqlnb\tPut 1 if you know that content is already universal format number\n *\t@return\tstring\t\t\t\t\tAmount with universal numeric format (Example: '99.99999')\n *\n *\t@see    price\t\t\t\t\tOpposite function of price2num\n */\nfunction price2num($amount,$rounding='',$alreadysqlnb=0)\n{\n\tglobal $langs,$conf;\n\n\t// Round PHP function does not allow number like '1,234.56' nor '1.234,56' nor '1 234,56'\n\t// Numbers must be '1234.56'\n\t// Decimal delimiter for PHP and database SQL requests must be '.'\n\t$dec=','; $thousand=' ';\n\tif ($langs->trans(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec=$langs->trans(\"SeparatorDecimal\");\n\tif ($langs->trans(\"SeparatorThousand\")!= \"SeparatorThousand\") $thousand=$langs->trans(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand='';\n\t//print \"amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t// Convert value to universal number format (no thousand separator, '.' as decimal separator)\n\tif ($alreadysqlnb != 1)\t// If not a PHP number or unknown, we change format\n\t{\n\t\t//print 'PP'.$amount.' - '.$dec.' - '.$thousand.'<br>';\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be like defined by Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps=sprintf(\"%0.10F\",$amount-intval($amount));\t// temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps=preg_replace('/([\\.1-9])0+$/','\\\\1',$temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec=max(0,dol_strlen($temps)-2);\t// -2 to remove \"0.\"\n\t\t\t$amount=number_format($amount,$nbofdec,$dec,$thousand);\n\t\t}\n\t\t//print \"QQ\".$amount.'<br>';\n\n\t\t// Now make replace (the main goal of function)\n\t\tif ($thousand != ',' && $thousand != '.') $amount=str_replace(',','.',$amount);\t// To accept 2 notations for french users\n\t\t$amount=str_replace(' ','',$amount);\t\t// To avoid spaces\n\t\t$amount=str_replace($thousand,'',$amount);\t// Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount=str_replace($dec,'.',$amount);\n\t}\n\n\t// Now, make a rounding if required\n\tif ($rounding)\n\t{\n\t\t$nbofdectoround='';\n\t\tif ($rounding == 'MU')     $nbofdectoround=$conf->global->MAIN_MAX_DECIMALS_UNIT;\n\t\telseif ($rounding == 'MT') $nbofdectoround=$conf->global->MAIN_MAX_DECIMALS_TOT;\n\t\telseif ($rounding == 'MS') $nbofdectoround=$conf->global->MAIN_MAX_DECIMALS_SHOWN;\n\t\telseif (is_numeric($rounding))  $nbofdectoround=$rounding; \t// For admin info page\n\t\t//print \"RR\".$amount.' - '.$nbofdectoround.'<br>';\n\t\tif (dol_strlen($nbofdectoround)) $amount = round($amount,$nbofdectoround);\t// $nbofdectoround can be 0.\n\t\telse return 'ErrorBadParameterProvidedToFunction';\n\t\t//print 'SS'.$amount.' - '.$nbofdec.' - '.$dec.' - '.$thousand.' - '.$nbofdectoround.'<br>';\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be defined by Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps=sprintf(\"%0.10F\",$amount-intval($amount));\t// temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps=preg_replace('/([\\.1-9])0+$/','\\\\1',$temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec=max(0,dol_strlen($temps)-2);\t// -2 to remove \"0.\"\n\t\t\t$amount=number_format($amount,min($nbofdec,$nbofdectoround),$dec,$thousand);\t\t// Convert amount to format with dolibarr dec and thousand\n\t\t}\n\t\t//print \"TT\".$amount.'<br>';\n\n\t\t// Always make replace because each math function (like round) replace\n\t\t// with local values and we want a number that has a SQL string format x.y\n\t\tif ($thousand != ',' && $thousand != '.') $amount=str_replace(',','.',$amount);\t// To accept 2 notations for french users\n\t\t$amount=str_replace(' ','',$amount);\t\t// To avoid spaces\n\t\t$amount=str_replace($thousand,'',$amount);\t// Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount=str_replace($dec,'.',$amount);\n\t}\n\n\treturn $amount;\n}\n\n/**\n *\tReturn localtax rate for a particular vat, when selling a product with vat $tva, from a $thirdparty_buyer to a $thirdparty_seller\n *  Note: It applies same rule than get_default_tva\n *\n * \t@param\tfloat\t\t$tva\t\t\t        Vat taxe\n * \t@param  int\t\t\t$local\t\t         \tLocal tax to search and return (1 or 2 return only tax rate 1 or tax rate 2)\n *  @param  Societe\t\t$thirdparty_buyer    \tObject of buying third party\n *  @param\tSociete\t\t$thirdparty_seller\t\tObject of selling third party\n * \t@return\tmixed\t\t\t   \t\t\t\t\t0 if not found, localtax if found\n *  @see get_default_tva\n */\nfunction get_localtax($tva, $local, $thirdparty_buyer=\"\", $thirdparty_seller=\"\")\n{\n\tglobal $db, $conf, $mysoc;\n\n\tif (empty($thirdparty_seller) || ! is_object($thirdparty_seller)) $thirdparty_seller=$mysoc;\n\n\tdol_syslog(\"get_localtax tva=\".$tva.\" local=\".$local.\" thirdparty_buyer id=\".(is_object($thirdparty_buyer)?$thirdparty_buyer->id:'').\" thirdparty_seller id=\".$thirdparty_seller->id);\n\n\t// Some test to guess with no need to make database access\n\tif ($mysoc->country_code == 'ES') // For spain localtaxes 1 and 2, tax is qualified if buyer use local taxe\n\t{\n\t\tif ($local == 1) \n\t\t{\n\t\t\tif ($thirdparty_seller->id==$mysoc->id)\n\t\t\t{\n\t\t\t\tif (! $thirdparty_buyer->localtax1_assuj) return 0;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (! $thirdparty_seller->localtax1_assuj) return 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($local == 2 && ! $thirdparty_buyer->localtax2_assuj) return 0;\n\t}\n\telse\n\t{\n\t\tif ($local == 1 && ! $thirdparty_seller->localtax1_assuj) return 0;\n\t\tif ($local == 2 && ! $thirdparty_seller->localtax2_assuj) return 0;\n\t}\n\t//if ($local == 0 && ! $thirdparty_seller->localtax1_assuj && ! $thirdparty_seller->localtax2_assuj) return array('localtax1'=>0,'localtax2'=>0);\n\n\t$code_country=$thirdparty_seller->country_code;\n\tif (is_object($thirdparty_buyer))\n\t{\n\t\tif ($code_country != $thirdparty_buyer->country_code) return 0;\n\t}\n\n\t// Search local taxes\n\t$sql  = \"SELECT t.localtax1, t.localtax2, t.localtax1_type, t.localtax2_type\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\n\t$sql .= \" WHERE t.fk_pays = p.rowid AND p.code = '\".$code_country.\"'\";\n\t$sql .= \" AND t.taux = \".$tva.\" AND t.active = 1\";\n\n\tdol_syslog(\"get_localtax sql=\".$sql);\n\t$resql=$db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($local==1 && $obj->localtax1_type != '7') return $obj->localtax1;\n\t\telseif ($local==2 && $obj->localtax2_type != '7') return $obj->localtax2;\n\t}\n\n\treturn 0;\n}\n\n/**\r\n *  Get type and rate of localtaxes for a particular vat rate/country fo thirdparty\r\n *\r\n *  @param\t\treal\t$vatrate\t\t\tVAT Rate\r\n *  @param\t\tint\t\t$local              Number of localtax (1 / 2)\r\n *  @param\t\tint\t\t$thirdparty         company object\r\n *  @return\t\tarray    \t  \t\t\t\tarray(Type of local tax (1 to 7 / 0 if not found), rate or amount of localtax)\n *  @deprecated\tTODO We should remove this function by storing rate and type into detail lines.\r\n */\r\nfunction getLocalTaxesFromRate($vatrate, $local, $thirdparty)\r\n{\r\n\tglobal $db;\r\n\n\tdol_syslog(\"getLocalTaxesFromRate vatrate=\".$vatrate.\" local=\".$local.\" thirdparty id=\".(is_object($thirdparty)?$thirdparty->id:''));\r\n\r\n\t// Search local taxes\r\n\t$sql  = \"SELECT t.localtax1, t.localtax1_type, t.localtax2, t.localtax2_type\";\r\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\r\n\t$sql .= \" WHERE t.fk_pays = p.rowid AND p.code = '\".$thirdparty->country_code.\"'\";\r\n\t$sql .= \" AND t.taux = \".$vatrate.\" AND t.active = 1\";\r\n\r\n\t$resql=$db->query($sql);\r\n\tif ($resql)\r\n\t{\r\n\t\t$obj = $db->fetch_object($resql);\r\n\t\tif ($local == 1) return array($obj->localtax1_type, $obj->localtax1);\r\n\t\telseif ($local == 2) return array($obj->localtax2_type, $obj->localtax2);\r\n\t}\r\n\r\n\treturn 0;\r\n}\n\n/**\n *\tReturn vat rate of a product in a particular selling country or default country vat if product is unknown\n *\n *  @param\tint\t\t\t$idprod          \tId of product or 0 if not a predefined product\n *  @param  Societe\t\t$thirdparty_seller  Thirdparty with a ->country_code defined (FR, US, IT, ...)\n *\t@param\tint\t\t\t$idprodfournprice\tId product_fournisseur_price (for supplier order/invoice)\n *  @return int\t\t\t\t\t         \t<0 if KO, Vat rate if OK\n *  @see get_product_localtax_for_country\n */\nfunction get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice=0)\n{\n\tglobal $db,$mysoc;\n\n\tif (! class_exists('Product')) {\n\t\trequire DOL_DOCUMENT_ROOT . '/product/class/product.class.php';\n\t}\n\n\t$ret=0;\n\t$found=0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product=new Product($db);\n\t\t$result=$product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\tif ($idprodfournprice > 0)     // We want vat for product for a supplier order or invoice\n\t\t\t{\n\t\t\t\t$product->get_buyprice($idprodfournprice,0,0,0);\n\t\t\t\t$ret=$product->vatrate_supplier;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ret=$product->tva_tx;    // Default vat of product we defined\n\t\t\t}\n\t\t\t$found=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product\n\n\n\t\t}\n\t}\n\n\tif (! $found)\n\t{\n\t\t// If vat of product for the country not found or not defined, we return higher vat of country.\n\t\t$sql = \"SELECT taux as vat_rate\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\n\t\t$sql.= \" WHERE t.active=1 AND t.fk_pays = p.rowid AND p.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t$sql.= \" ORDER BY t.taux DESC, t.recuperableonly ASC\";\n\t\t$sql.= $db->plimit(1);\n\n\t\t$resql=$db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$db->fetch_object($resql);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\t$ret=$obj->vat_rate;\n\t\t\t}\n\t\t}\n\t\telse dol_print_error($db);\n\t}\n\n\tdol_syslog(\"get_product_vat_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tReturn localtax vat rate of a product in a particular selling country or default country vat if product is unknown\n *\n *  @param\tint\t\t$idprod         \t\tId of product\n *  @param  int\t\t$local          \t\t1 for localtax1, 2 for localtax 2\n *  @param  Societe\t$thirdparty_seller    \tThirdparty with a ->country_code defined (FR, US, IT, ...)\n *  @return int             \t\t\t\t<0 if KO, Vat rate if OK\n *  @see get_product_vat_for_country\n */\nfunction get_product_localtax_for_country($idprod, $local, $thirdparty_seller)\n{\n\tglobal $db,$mysoc;\n\n\tif (! class_exists('Product')) {\n\t\trequire DOL_DOCUMENT_ROOT . '/product/class/product.class.php';\n\t}\n\n\t$ret=0;\n\t$found=0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product=new Product($db);\n\t\t$result=$product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\t/* Not defined yet, so we don't use this\n\t\t\tif ($local==1) $ret=$product->localtax1_tx;\n\t\t\telseif ($local==2) $ret=$product->localtax2_tx;\n\t\t\t$found=1;\n\t\t\t*/\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product\n\n\n\t\t}\n\t}\n\n\tif (! $found)\n\t{\n\t\t// If vat of product for the country not found or not defined, we return higher vat of country.\n\t\t$sql = \"SELECT taux as vat_rate, localtax1, localtax2\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\n\t\t$sql.= \" WHERE t.active=1 AND t.fk_pays = p.rowid AND p.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t$sql.= \" ORDER BY t.taux DESC, t.recuperableonly ASC\";\n\t\t$sql.= $db->plimit(1);\n\n\t\t$resql=$db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$db->fetch_object($resql);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\tif ($local==1) $ret=$obj->localtax1;\n\t\t\t\telseif ($local==2) $ret=$obj->localtax2;\n\t\t\t}\n\t\t}\n\t\telse dol_print_error($db);\n\t}\n\n\tdol_syslog(\"get_product_localtax_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tFunction that return vat rate of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier ou entreprise sans num TVA intra) alors TVA par defaut=TVA du produit vendu. Fin de regle\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise avec num TVA) intra alors TVA par defaut=0. Fin de regle\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@param\tint\t\t\t$idprodfournprice\t\tId product_fournisseur_price (for supplier order/invoice)\n *\t@return float         \t\t\t\t      \tTaux de tva a appliquer, -1 si ne peut etre determine\n *  @see get_default_localtax\n */\nfunction get_default_tva($thirdparty_seller, $thirdparty_buyer, $idprod=0, $idprodfournprice=0)\n{\n\tglobal $conf;\n\n\tif (!is_object($thirdparty_seller)) return -1;\n\tif (!is_object($thirdparty_buyer)) return -1;\n\n\tdol_syslog(\"get_default_tva: seller use vat=\".$thirdparty_seller->tva_assuj.\", seller country=\".$thirdparty_seller->country_code.\", seller in cee=\".$thirdparty_seller->isInEEC().\", buyer country=\".$thirdparty_buyer->country_code.\", buyer in cee=\".$thirdparty_buyer->isInEEC().\", idprod=\".$idprod.\", idprodfournprice=\".$idprodfournprice.\", SERVICE_ARE_ECOMMERCE_200238EC=\".(! empty($conf->global->SERVICES_ARE_ECOMMERCE_200238EC)?$conf->global->SERVICES_ARE_ECOMMERCE_200238EC:''));\n\n\t// If services are eServices according to EU Council Directive 2002/38/EC (http://ec.europa.eu/taxation_customs/taxation/vat/traders/e-commerce/article_1610_en.htm)\r\n\t// we use the buyer VAT.\r\n\tif (! empty($conf->global->SERVICE_ARE_ECOMMERCE_200238EC))\r\n\t{\r\n\t\t//print \"eee\".$thirdparty_buyer->isACompany();exit;\r\n\t\tif (! $thirdparty_seller->isInEEC() && $thirdparty_buyer->isInEEC() && ! $thirdparty_buyer->isACompany())\r\n\t\t{\r\n\t\t\t//print 'VATRULE 6';\r\n\t\t\treturn get_product_vat_for_country($idprod,$thirdparty_buyer,$idprodfournprice);\r\n\t\t}\r\n\t}\r\n\r\n\t// Si vendeur non assujeti a TVA (tva_assuj vaut 0/1 ou franchise/reel)\n\tif (is_numeric($thirdparty_seller->tva_assuj) && ! $thirdparty_seller->tva_assuj)\n\t{\n\t\t//print 'VATRULE 1';\n\t\treturn 0;\n\t}\n\tif (! is_numeric($thirdparty_seller->tva_assuj) && $thirdparty_seller->tva_assuj=='franchise')\n\t{\n\t\t//print 'VATRULE 2';\n\t\treturn 0;\n\t}\n\n\t//if (is_object($thirdparty_buyer) && ($thirdparty_seller->country_id == $thirdparty_buyer->country_id) && ($thirdparty_buyer->tva_assuj == 1 || $thirdparty_buyer->tva_assuj == 'reel'))\n\t// Le test ci-dessus ne devrait pas etre necessaire. Me signaler l'exemple du cas juridique concerne si le test suivant n'est pas suffisant.\n\n\t// Si le (pays vendeur = pays acheteur) alors la TVA par defaut=TVA du produit vendu. Fin de regle.\n\tif (($thirdparty_seller->country_code == $thirdparty_buyer->country_code)\n\t|| (in_array($thirdparty_seller->country_code,array('FR,MC')) && in_array($thirdparty_buyer->country_code,array('FR','MC')))) // Warning ->country_code not always defined\n\t{\n\t\t//print 'VATRULE 3';\n\t\treturn get_product_vat_for_country($idprod,$thirdparty_seller,$idprodfournprice);\n\t}\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par l'acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n\t// Non gere\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise) alors TVA par defaut=0. Fin de regle\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier) alors TVA par defaut=TVA du produit vendu. Fin de regle\n\tif (($thirdparty_seller->isInEEC() && $thirdparty_buyer->isInEEC()))\n\t{\n\t\t$isacompany=$thirdparty_buyer->isACompany();\n\t\tif ($isacompany)\n\t\t{\n\t\t\t//print 'VATRULE 4';\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//print 'VATRULE 5';\n\t\t\treturn get_product_vat_for_country($idprod,$thirdparty_seller,$idprodfournprice);\n\t\t}\n\t}\n\n\t// Sinon la TVA proposee par defaut=0. Fin de regle.\n\t// Rem: Cela signifie qu'au moins un des 2 est hors Communaute europeenne et que le pays differe\n\t//print 'VATRULE 7';\n\treturn 0;\n}\n\n\n/**\n *\tFonction qui renvoie si tva doit etre tva percue recuperable\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *  @param  int\t\t\t$idprod                 Id product\n *\t@return float       \t\t\t        \t0 or 1\n */\nfunction get_default_npr($thirdparty_seller, $thirdparty_buyer, $idprod)\n{\n\treturn 0;\n}\n\n/**\n *\tFunction that return localtax of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *  @param\tint\t\t\t$local\t\t\t\t\tLocaltax to process (1 or 2)\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@return float        \t\t\t\t       \tlocaltax, -1 si ne peut etre determine\n *  @see get_default_tva\n */\nfunction get_default_localtax($thirdparty_seller, $thirdparty_buyer, $local, $idprod=0)\n{\n\tglobal $mysoc;\n\n\tif (!is_object($thirdparty_seller)) return -1;\n\tif (!is_object($thirdparty_buyer)) return -1;\n\n\tif ($local==1) // Localtax 1\n\t{\n\t\tif ($mysoc->country_code == 'ES')\n\t\t{\n\t\t\tif (is_numeric($thirdparty_buyer->localtax1_assuj) && ! $thirdparty_buyer->localtax1_assuj) return 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Si vendeur non assujeti a Localtax1, localtax1 par default=0\n\t\t\tif (is_numeric($thirdparty_seller->localtax1_assuj) && ! $thirdparty_seller->localtax1_assuj) return 0;\n\t\t\tif (! is_numeric($thirdparty_seller->localtax1_assuj) && $thirdparty_seller->localtax1_assuj=='localtax1off') return 0;\n\t\t}\n\t}\n\telseif ($local==2) //I Localtax 2\n\t{\n\t\t// Si vendeur non assujeti a Localtax2, localtax2 par default=0\n\t\tif (is_numeric($thirdparty_seller->localtax2_assuj) && ! $thirdparty_seller->localtax2_assuj) return 0;\n\t\tif (! is_numeric($thirdparty_seller->localtax2_assuj) && $thirdparty_seller->localtax2_assuj=='localtax2off') return 0;\n\t}\n\n\tif ($thirdparty_seller->country_code == $thirdparty_buyer->country_code)\n\t{\n\t\treturn get_product_localtax_for_country($idprod, $local, $thirdparty_seller);\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tReturn yes or no in current language\n *\n *\t@param\tstring\t$yesno\t\t\tValue to test (1, 'yes', 'true' or 0, 'no', 'false')\n *\t@param\tstring\t$case\t\t\t1=Yes/No, 0=yes/no\n *\t@param\tint\t\t$color\t\t\t0=texte only, 1=Text is formated with a color font style ('ok' or 'error'), 2=Text is formated with 'ok' color.\n *\t@return\tstring\t\t\t\t\tHTML string\n */\nfunction yn($yesno, $case=1, $color=0)\n{\n\tglobal $langs;\n\t$result='unknown';\n\tif ($yesno == 1 || strtolower($yesno) == 'yes' || strtolower($yesno) == 'true') \t// A mettre avant test sur no a cause du == 0\n\t{\n\t\t$result=($case?$langs->trans(\"Yes\"):$langs->trans(\"yes\"));\n\t\t$classname='ok';\n\t}\n\telseif ($yesno == 0 || strtolower($yesno) == 'no' || strtolower($yesno) == 'false')\n\t{\n\t\t$result=($case?$langs->trans(\"No\"):$langs->trans(\"no\"));\n\t\tif ($color == 2) $classname='ok';\n\t\telse $classname='error';\n\t}\n\tif ($color) return '<font class=\"'.$classname.'\">'.$result.'</font>';\n\treturn $result;\n}\n\n\n/**\n *\tReturn a path to have a directory according to an id\n *  Examples:       '001' with level 3->\"0/0/1/\", '015' with level 3->\"0/1/5/\"\n *  Examples:       'ABC-1' with level 3 ->\"0/0/1/\", '015' with level 1->\"5/\"\n *\n *\t@param\tstring\t$num            Id to develop\n *\t@param  int\t\t$level\t\t    Level of development (1, 2 or 3 level)\n * \t@param\tint\t\t$alpha\t\t    Use alpha ref\n *  @param  int\t\t$withoutslash   0=With slash at end, 1=without slash at end\n *  @return\tstring\t\t\t\t\tDir to use\n */\nfunction get_exdir($num,$level=3,$alpha=0,$withoutslash=0)\n{\n\t$path = '';\n\tif (empty($alpha)) $num = preg_replace('/([^0-9])/i','',$num);\n\telse $num = preg_replace('/^.*\\-/i','',$num);\n\t$num = substr(\"000\".$num, -$level);\n\tif ($level == 1) $path = substr($num,0,1);\n\tif ($level == 2) $path = substr($num,1,1).'/'.substr($num,0,1);\n\tif ($level == 3) $path = substr($num,2,1).'/'.substr($num,1,1).'/'.substr($num,0,1);\n\tif (empty($withoutslash)) $path.='/';\n\treturn $path;\n}\n\n/**\n *\tCreation of a directory (this can create recursive subdir)\n *\n *\t@param\tstring\t$dir\t\tDirectory to create (Separator must be '/'. Example: '/mydir/mysubdir')\n *\t@param\tstring\t$dataroot\tData root directory (To avoid having the data root in the loop. Using this will also lost the warning on first dir PHP has no permission when open_basedir is used)\n *\t@return int         \t\t< 0 if KO, 0 = already exists, > 0 if OK\n */\nfunction dol_mkdir($dir, $dataroot='')\n{\n\tglobal $conf;\n\n\tdol_syslog(\"functions.lib::dol_mkdir: dir=\".$dir,LOG_INFO);\n\n\t$dir_osencoded=dol_osencode($dir);\n\tif (@is_dir($dir_osencoded)) return 0;\n\n\t$nberr=0;\n\t$nbcreated=0;\n\n\t$ccdir='';\n\tif (! empty($dataroot)) {\n\t\t// Remove data root from loop\n\t\t$dir = str_replace($dataroot.'/', '', $dir);\n\t\t$ccdir = $dataroot.'/';\n\t}\n\n\t$cdir = explode(\"/\", $dir);\n\t$num=count($cdir);\n\tfor ($i = 0; $i < $num; $i++)\n\t{\n\t\tif ($i > 0) $ccdir .= '/'.$cdir[$i];\n\t\telse $ccdir .= $cdir[$i];\n\t\tif (preg_match(\"/^.:$/\",$ccdir,$regs)) continue;\t// Si chemin Windows incomplet, on poursuit par rep suivant\n\n\t\t// Attention, le is_dir() peut echouer bien que le rep existe.\n\t\t// (ex selon config de open_basedir)\n\t\tif ($ccdir)\n\t\t{\n\t\t\t$ccdir_osencoded=dol_osencode($ccdir);\n\t\t\tif (! @is_dir($ccdir_osencoded))\n\t\t\t{\n\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' does not exists or is outside open_basedir PHP setting.\",LOG_DEBUG);\n\n\t\t\t\tumask(0);\n\t\t\t\t$dirmaskdec=octdec('0755');\n\t\t\t\tif (! empty($conf->global->MAIN_UMASK)) $dirmaskdec=octdec($conf->global->MAIN_UMASK);\n\t\t\t\t$dirmaskdec |= octdec('0111');  // Set x bit required for directories\n\t\t\t\tif (! @mkdir($ccdir_osencoded, $dirmaskdec))\n\t\t\t\t{\n\t\t\t\t\t// Si le is_dir a renvoye une fausse info, alors on passe ici.\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Fails to create directory '\".$ccdir.\"' or directory already exists.\",LOG_WARNING);\n\t\t\t\t\t$nberr++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' created\",LOG_DEBUG);\n\t\t\t\t\t$nberr=0;\t// On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignore\n\t\t\t\t\t$nbcreated++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$nberr=0;\t// On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignores\n\t\t\t}\n\t\t}\n\t}\n\treturn ($nberr ? -$nberr : $nbcreated);\n}\n\n\n/**\n *\tReturn picto saying a field is required\n *\n *\t@return  string\t\tChaine avec picto obligatoire\n */\nfunction picto_required()\n{\n\treturn '<span class=\"fieldrequired\">*</span>';\n}\n\n\n/**\n *\tClean a string from all HTML tags and entities\n *\n *\t@param\tstring\t$StringHtml\t\t\tString to clean\n *\t@param\tstring\t$removelinefeed\t\tReplace also all lines feeds by a space\n *  @param  string\t$pagecodeto      \tEncoding of input string\n *\t@return string\t    \t\t\t\tString cleaned\n */\nfunction dol_string_nohtmltag($StringHtml,$removelinefeed=1,$pagecodeto='UTF-8')\n{\n\t$pattern = \"/<[^>]+>/\";\n\t$temp = dol_html_entity_decode($StringHtml,ENT_COMPAT,$pagecodeto);\n\t$temp = preg_replace($pattern,\"\",$temp);\n\n\t// Supprime aussi les retours\n\tif ($removelinefeed) $temp=str_replace(array(\"\\r\\n\",\"\\r\",\"\\n\"),\" \",$temp);\n\n\t// et les espaces doubles\n\twhile(strpos($temp,\"  \"))\n\t{\n\t\t$temp = str_replace(\"  \",\" \",$temp);\n\t}\n\t$CleanString = trim($temp);\n\treturn $CleanString;\n}\n\n\n/**\n *\tReplace CRLF in string with a HTML BR tag\n *\n *\t@param\tstring\t$stringtoencode\t\tString to encode\n *\t@param\tstring\t$nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br\n *  @param  string\t$forxml             false=Use <br>, true=Use <br />\n *\t@return\tstring\t\t\t\t\t\tString encoded\n */\nfunction dol_nl2br($stringtoencode,$nl2brmode=0,$forxml=false)\n{\n\tif (! $nl2brmode)\n\t{\n\t\t// We use @ to avoid warning on PHP4 that does not support entity encoding from UTF8;\n\t\tif (version_compare(PHP_VERSION, '5.3.0') < 0) return @nl2br($stringtoencode);\n\t\telse return @nl2br($stringtoencode,$forxml);\n\t}\n\telse\n\t{\n\t\t$ret=preg_replace('/(\\r\\n|\\r|\\n)/i',($forxml?'<br />':'<br>'),$stringtoencode);\n\t\treturn $ret;\n\t}\n}\n\n/**\n *\tThis function is called to encode a string into a HTML string but differs from htmlentities because\n * \tall entities but &,<,> are converted. This permits to encode special chars to entities with no double\n *  encoding for already encoded HTML strings.\n * \tThis function also remove last CR/BR.\n *  For PDF usage, you can show text by 2 ways:\n *              - writeHTMLCell -> param must be encoded into HTML.\n *              - MultiCell -> param must not be encoded into HTML.\n *              Because writeHTMLCell convert also \\n into <br>, if function\n *              is used to build PDF, nl2brmode must be 1\n *\n *\t@param\tstring\t$stringtoencode\t\tString to encode\n *\t@param\tint\t\t$nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br (for use with FPDF writeHTMLCell function for example)\n *  @param  string\t$pagecodefrom       Pagecode stringtoencode is encoded\n *  @return\tstring\t\t\t\t\t\tString encoded\n */\nfunction dol_htmlentitiesbr($stringtoencode,$nl2brmode=0,$pagecodefrom='UTF-8')\n{\n\tif (dol_textishtml($stringtoencode))\n\t{\n\t\t$newstring=$stringtoencode;\n\t\t$newstring=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i','<br>',$newstring);\t// Replace \"<br type=\"_moz\" />\" by \"<br>\". It's same and avoid pb with FPDF.\n\t\t$newstring=preg_replace('/<br>$/i','',$newstring);\t// Remove last <br>\n\t\t$newstring=strtr($newstring,array('&'=>'__and__','<'=>'__lt__','>'=>'__gt__','\"'=>'__dquot__'));\n\t\t$newstring=dol_htmlentities($newstring,ENT_COMPAT,$pagecodefrom);\t// Make entity encoding\n\t\t$newstring=strtr($newstring,array('__and__'=>'&','__lt__'=>'<','__gt__'=>'>','__dquot__'=>'\"'));\n\t\t//$newstring=strtr($newstring,array('__li__'=>\"<li>\\n\")); // Restore <li>\\n\n\t}\n\telse\n\t{\n\t\t$newstring=dol_nl2br(dol_htmlentities($stringtoencode,ENT_COMPAT,$pagecodefrom),$nl2brmode);\n\t}\n\t// Other substitutions that htmlentities does not do\n\t//$newstring=str_replace(chr(128),'&euro;',$newstring);\t// 128 = 0x80. Not in html entity table.     // Seems useles with TCPDF. Make bug with UTF8 languages\n\treturn $newstring;\n}\n\n/**\n *\tThis function is called to decode a HTML string (it decodes entities and br tags)\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@param\tstring\t$pagecodeto\t\t\tPage code for result\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlentitiesbr_decode($stringtodecode,$pagecodeto='UTF-8')\n{\n\t$ret=dol_html_entity_decode($stringtodecode,ENT_COMPAT,$pagecodeto);\n\t$ret=preg_replace('/'.\"\\r\\n\".'<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i',\"<br>\",$ret);\n\t$ret=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\r\\n\".'/i',\"\\r\\n\",$ret);\n\t$ret=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\n\".'/i',\"\\n\",$ret);\n\t$ret=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i',\"\\n\",$ret);\n\treturn $ret;\n}\n\n/**\n *\tThis function remove all ending \\n and br at end\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlcleanlastbr($stringtodecode)\n{\n\t$ret=preg_replace('/(<br>|<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>|'.\"\\n\".'|'.\"\\r\".')+$/i',\"\",$stringtodecode);\n\treturn $ret;\n}\n\n/**\n * Replace html_entity_decode functions to manage errors\n *\n * @param   string\t$a\t\tOperand a\n * @param   string\t$b\t\tOperand b\n * @param   string\t$c\t\tOperand c\n * @return  string\t\t\tString decoded\n */\nfunction dol_html_entity_decode($a,$b,$c='UTF-8')\n{\n\t// We use @ to avoid warning on PHP4 that does not support entity decoding to UTF8;\n\t$ret=@html_entity_decode($a,$b,$c);\n\treturn $ret;\n}\n\n/**\n * Replace htmlentities functions to manage errors\n *\n * @param   string\t$a\t\tOperand a\n * @param   string\t$b\t\tOperand b\n * @param   string\t$c\t\tOperand c\n * @return  string      \tString encoded\n */\nfunction dol_htmlentities($a,$b,$c='UTF-8')\n{\n\t// We use @ to avoid warning on PHP4 that does not support entity decoding to UTF8;\n\t$ret=@htmlentities($a,$b,$c);\n\treturn $ret;\n}\n\n\n/**\n *\tCheck if a string is a correct iso string\n *\tIf not, it will we considered not HTML encoded even if it is by FPDF.\n *\tExample, if string contains euro symbol that has ascii code 128\n *\n *\t@param\tstring\t$s      String to check\n *\t@return\tint     \t\t0 if bad iso, 1 if good iso\n */\nfunction dol_string_is_good_iso($s)\n{\n\t$len=dol_strlen($s);\n\t$ok=1;\n\tfor($scursor=0;$scursor<$len;$scursor++)\n\t{\n\t\t$ordchar=ord($s{$scursor});\n\t\t//print $scursor.'-'.$ordchar.'<br>';\n\t\tif ($ordchar < 32 && $ordchar != 13 && $ordchar != 10) { $ok=0; break; }\n\t\tif ($ordchar > 126 && $ordchar < 160) { $ok=0; break; }\n\t}\n\treturn $ok;\n}\n\n\n/**\n *\tReturn nb of lines of a clear text\n *\n *\t@param\tstring\t$s\t\t\tString to check\n * \t@param\tstring\t$maxchar\tNot yet used\n *\t@return\tint\t\t\t\t\tNumber of lines\n */\nfunction dol_nboflines($s,$maxchar=0)\n{\n\tif ($s == '') return 0;\n\t$arraystring=explode(\"\\n\",$s);\n\t$nb=count($arraystring);\n\n\treturn $nb;\n}\n\n\n/**\n *\tReturn nb of lines of a formated text with \\n and <br> (we can't have both \\n and br)\n *\n *\t@param\tstring\t$text      \t\tText\n *\t@param\tint\t\t$maxlinesize  \tLargeur de ligne en caracteres (ou 0 si pas de limite - defaut)\n * \t@param\tstring\t$charset\t\tGive the charset used to encode the $text variable in memory.\n *\t@return int\t\t\t\t\t\tNumber of lines\n */\nfunction dol_nboflines_bis($text,$maxlinesize=0,$charset='UTF-8')\n{\n\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \"<br>\", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\tif (dol_textishtml($text)) $repTable = array(\"\\t\" => \" \", \"\\n\" => \" \", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\n\t$text = strtr($text, $repTable);\n\tif ($charset == 'UTF-8') { $pattern = '/(<br[^>]*>)/Uu'; }\t// /U is to have UNGREEDY regex to limit to one html tag. /u is for UTF8 support\n\telse $pattern = '/(<br[^>]*>)/U';\t\t\t\t\t\t\t// /U is to have UNGREEDY regex to limit to one html tag.\n\t$a = preg_split($pattern, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\n\t$nblines = floor((count($a)+1)/2);\n\t// count possible auto line breaks\n\tif($maxlinesize)\n\t{\n\t\tforeach ($a as $line)\n\t\t{\n\t\t\tif (dol_strlen($line)>$maxlinesize)\n\t\t\t{\n\t\t\t\t//$line_dec = html_entity_decode(strip_tags($line));\n\t\t\t\t$line_dec = html_entity_decode($line);\n\t\t\t\tif(dol_strlen($line_dec)>$maxlinesize)\n\t\t\t\t{\n\t\t\t\t\t$line_dec=wordwrap($line_dec,$maxlinesize,'\\n',true);\n\t\t\t\t\t$nblines+=substr_count($line_dec,'\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $nblines;\n}\n\n/**\n *\t Same function than microtime in PHP 5 but compatible with PHP4\n *\n *\t @return\t\tfloat\t\tTime (millisecondes) with microsecondes in decimal part\n */\nfunction dol_microtime_float()\n{\n\tlist($usec, $sec) = explode(\" \", microtime());\n\treturn ((float) $usec + (float) $sec);\n}\n\n/**\n *\tReturn if a text is a html content\n *\n *\t@param\tstring\t$msg\t\tContent to check\n *\t@param\tint\t\t$option\t\t0=Full detection, 1=Fast check\n *\t@return\tboolean\t\t\t\ttrue/false\n *\t@see\tdol_concatdesc\n */\nfunction dol_textishtml($msg,$option=0)\n{\n\tif ($option == 1)\n\t{\n\t\tif (preg_match('/<html/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<br/i',$msg))\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tif (preg_match('/<html/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<br/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<span/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<div/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<li/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<table/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<font/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<strong/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<img/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<i>/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<b>/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/&[A-Z0-9]{1,6};/i',$msg))\treturn true;    // Html entities names (http://www.w3schools.com/tags/ref_entities.asp)\n\t\telseif (preg_match('/&#[0-9]{2,3};/i',$msg))\treturn true;    // Html entities numbers (http://www.w3schools.com/tags/ref_entities.asp)\n\t\treturn false;\n\t}\n}\n\n/**\n *  Concat 2 descriptions (second one after first one)\n *  text1 html + text2 html => text1 + '<br>' + text2\n *  text1 html + text2 txt  => text1 + '<br>' + dol_nl2br(text2)\n *  text1 txt  + text2 html => dol_nl2br(text1) + '<br>' + text2\n *  text1 txt  + text2 txt  => text1 + '\\n' + text2\n *\n *  @param\tstring\t$text1\t\tText 1\n *  @param\tstring\t$text2\t\tText 2\n *  @param  string\t$forxml     false=Use <br>, true=Use <br />\n *  @return\tstring\t\t\t\tText 1 + new line + Text2\n *  @see    dol_textishtml\n */\nfunction dol_concatdesc($text1,$text2,$forxml=false)\n{\n\t$ret='';\n\t$ret.= (! dol_textishtml($text1) && dol_textishtml($text2))?dol_nl2br($text1, 0, $forxml):$text1;\n\t$ret.= (! empty($text1) && ! empty($text2)) ? ((dol_textishtml($text1) || dol_textishtml($text2))?($forxml?\"<br \\>\\n\":\"<br>\\n\") : \"\\n\") : \"\";\n\t$ret.= (dol_textishtml($text1) && ! dol_textishtml($text2))?dol_nl2br($text2, 0, $forxml):$text2;\n\treturn $ret;\n}\n\n/**\n *  Make substition into a string\n *  There is two type of substitions:\n * \t- From $substitutionarray (oldval=>newval)\n * \t- From special constants (__XXX__=>f(objet->xxx)) by substitutions modules\n *\n *  @param\tstring\t$chaine      \t\t\tSource string in which we must do substitution\n *  @param  array\t$substitutionarray\t\tArray with key->val to substitute\n * \t@return string  \t\t    \t\t\tOutput string after subsitutions\n *  @see\tcomplete_substitutions_array\n */\nfunction make_substitutions($chaine,$substitutionarray)\n{\n\tglobal $conf;\n\n\tif (! is_array($substitutionarray)) return 'ErrorBadParameterSubstitutionArrayWhenCalling_make_substitutions';\n\n\t// Make substitition\n\tforeach ($substitutionarray as $key => $value)\n\t{\n\t\tif ($key == '__SIGNATURE__' && (! empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN))) $value='';\n\t\t$chaine=str_replace(\"$key\",\"$value\",$chaine);\t// We must keep the \" to work when value is 123.5 for example\n\t}\n\n\treturn $chaine;\n}\n\n/**\n *  Complete the $substitutionarray with more entries\n *\n *  @param  array\t\t&$substitutionarray\t\tArray substitution old value => new value value\n *  @param  Translate\t$outputlangs            If we want substitution from special constants, we provide a language\n *  @param  Object\t\t$object                 If we want substitution from special constants, we provide data in a source object\n *  @param  Object/array  $parameters       Add more parameters (useful to pass product lines)\n *  @param  string              $callfunc               What is the name of the custom function that will be called? (default: completesubstitutionarray)\n *  @return\tvoid\n *  @see \tmake_substitutions\n */\nfunction complete_substitutions_array(&$substitutionarray,$outputlangs,$object='',$parameters=null,$callfunc=\"completesubstitutionarray\")\n{\n\tglobal $conf,$user;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t// Check if there is external substitution to do asked by plugins\n\t$dirsubstitutions=array_merge(array(),(array) $conf->modules_parts['substitutions']);\n\n\tforeach($dirsubstitutions as $reldir)\n\t{\n\t\t$dir=dol_buildpath($reldir,0);\n\n\t\t// Check if directory exists\n\t\tif (! dol_is_dir($dir)) continue;\n\n\t\t$substitfiles=dol_dir_list($dir,'files',0,'functions_');\n\t\tforeach($substitfiles as $substitfile)\n\t\t{\n\t\t\tif (preg_match('/functions_(.*)\\.lib\\.php/i',$substitfile['name'],$reg))\n\t\t\t{\n\t\t\t\t$module=$reg[1];\n\n\t\t\t\tdol_syslog(\"Library functions_\".$substitfile['name'].\" found into \".$dir);\n\t\t\t\trequire_once $dir.$substitfile['name'];\n\t\t\t\t$function_name=$module.\"_\".$callfunc;\n\t\t\t\tif (function_exists($function_name)) $function_name($substitutionarray,$outputlangs,$object,$parameters);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\ttimestamp\t$date_start    Start date\n *    @param    timestamp\t$date_end      End date\n *    @param    string\t\t$format        Output format\n *    @param\tTranslate\t$outputlangs   Output language\n *    @return\tvoid\n */\nfunction print_date_range($date_start,$date_end,$format = '',$outputlangs='')\n{\n\tprint get_date_range($date_start,$date_end,$format,$outputlangs);\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\ttimestamp\t$date_start    Start date\n *    @param    timestamp\t$date_end      End date\n *    @param    string\t\t$format        Output format\n *    @param\tTranslate\t$outputlangs   Output language\n *    @return\tstring\t\t\t\t\t\tString\n */\nfunction get_date_range($date_start,$date_end,$format = '',$outputlangs='')\n{\n\tglobal $langs;\n\n\t$out='';\n\n\tif (! is_object($outputlangs)) $outputlangs=$langs;\n\n\tif ($date_start && $date_end)\n\t{\n\t\t$out.= ' ('.$outputlangs->trans('DateFromTo',dol_print_date($date_start, $format, false, $outputlangs),dol_print_date($date_end, $format, false, $outputlangs)).')';\n\t}\n\tif ($date_start && ! $date_end)\n\t{\n\t\t$out.= ' ('.$outputlangs->trans('DateFrom',dol_print_date($date_start, $format, false, $outputlangs)).')';\n\t}\n\tif (! $date_start && $date_end)\n\t{\n\t\t$out.= ' ('.$outputlangs->trans('DateUntil',dol_print_date($date_end, $format, false, $outputlangs)).')';\n\t}\n\n\treturn $out;\n}\n\n/**\n *\tSet event message in dol_events session\n *\n *\t@param\tmixed\t$mesgs\t\t\tMessage string or array\n *  @param  string\t$style      \tWhich style to use ('mesgs', 'warnings', 'errors')\n *  @return\tvoid\n *  @see\tdol_htmloutput_events\n */\nfunction setEventMessage($mesgs, $style='mesgs')\n{\n\tif (! in_array((string) $style, array('mesgs','warnings','errors'))) dol_print_error('','Bad parameter for setEventMessage');\n\tif (! is_array($mesgs))\t\t// If mesgs is a string\n\t{\n\t\tif ($mesgs) $_SESSION['dol_events'][$style][] = $mesgs;\n\t}\n\telse\t\t\t\t\t\t// If mesgs is an array\n\t{\n\t\tforeach($mesgs as $mesg)\n\t\t{\n\t\t\tif ($mesg) $_SESSION['dol_events'][$style][] = $mesg;\n\t\t}\n\t}\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *\n *  @return\tvoid\n *  @see    dol_htmloutput_mesg\n */\nfunction dol_htmloutput_events()\n{\n\t// Show mesgs\n\tif (isset($_SESSION['dol_events']['mesgs'])) {\n\t\tdol_htmloutput_mesg('', $_SESSION['dol_events']['mesgs']);\n\t\tunset($_SESSION['dol_events']['mesgs']);\n\t}\n\n\t// Show errors\n\tif (isset($_SESSION['dol_events']['errors'])) {\n\t\tdol_htmloutput_mesg('', $_SESSION['dol_events']['errors'], 'error');\n\t\tunset($_SESSION['dol_events']['errors']);\n\t}\n\n\t// Show warnings\n\tif (isset($_SESSION['dol_events']['warnings'])) {\n\t\tdol_htmloutput_mesg('', $_SESSION['dol_events']['warnings'], 'warning');\n\t\tunset($_SESSION['dol_events']['warnings']);\n\t}\n}\n\n/**\n *\tGet formated messages to output (Used to show messages on html output).\n *\n *\t@param\tstring\t\t$mesgstring\t\tMessage string\n *\t@param\tarray\t\t$mesgarray      Messages array\n *  @param  string\t\t$style          Style of message output ('ok' or 'error')\n *  @param  int\t\t\t$keepembedded   Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *\t@return\tstring\t\t\t\t\t\tReturn html output\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_errors\n */\nfunction get_htmloutput_mesg($mesgstring='',$mesgarray='', $style='ok', $keepembedded=0)\n{\n\tglobal $conf, $langs;\n\n\t$ret='';\n\t$out='';\n\t$divstart=$divend='';\n\n\t// If inline message with no format, we add it.\n\tif ((empty($conf->use_javascript_ajax) || ! empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) || $keepembedded) && ! preg_match('/<div class=\".*\">/i',$out))\n\t{\n\t\t$divstart='<div class=\"'.$style.'\">';\n\t\t$divend='</div>';\n\t}\n\n\tif ((is_array($mesgarray) && count($mesgarray)) || $mesgstring)\n\t{\n\t\t$langs->load(\"errors\");\n\t\t$out.=$divstart;\n\t\tif (is_array($mesgarray) && count($mesgarray))\n\t\t{\n\t\t\tforeach($mesgarray as $message)\n\t\t\t{\n\t\t\t\t$ret++;\n\t\t\t\t$out.= $langs->trans($message);\n\t\t\t\tif ($ret < count($mesgarray)) $out.= \"<br>\\n\";\n\t\t\t}\n\t\t}\n\t\tif ($mesgstring)\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$ret++;\n\t\t\t$out.= $langs->trans($mesgstring);\n\t\t}\n\t\t$out.=$divend;\n\t}\n\n\tif ($out)\n\t{\n\t\tif (! empty($conf->use_javascript_ajax) && empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) && empty($keepembedded))\n\t\t{\n\t\t\t$return = '<script type=\"text/javascript\">\n\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\tvar block = '.(! empty($conf->global->MAIN_USE_JQUERY_BLOCKUI)?\"true\":\"false\").'\n\t\t\t\t\t\tif (block) {\n\t\t\t\t\t\t\t$.dolEventValid(\"\",\"'.dol_escape_js($out).'\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$.jnotify(\"'.dol_escape_js($out).'\",\n\t\t\t\t\t\t\t\"'.($style==\"ok\" ? 3000 : $style).'\",\n\t\t\t\t\t\t\t'.($style==\"ok\" ? \"false\" : \"true\").',\n\t\t\t\t\t\t\t{ remove: function (){} } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t</script>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$return = $out;\n\t\t}\n\t}\n\n\treturn $return;\n}\n\n/**\n *  Get formated error messages to output (Used to show messages on html output).\n *\n *  @param\tstring\t$mesgstring         Error message\n *  @param  array\t$mesgarray          Error messages array\n *  @param  int\t\t$keepembedded       Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return string                \t\tReturn html output\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_mesg\n */\nfunction get_htmloutput_errors($mesgstring='', $mesgarray='', $keepembedded=0)\n{\n\treturn get_htmloutput_mesg($mesgstring, $mesgarray,'error',$keepembedded);\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *\n *\t@param\tstring\t$mesgstring\t\t Message\n *\t@param\tarray\t$mesgarray       Messages array\n *  @param  string\t$style           Which style to use ('ok', 'warning', 'error')\n *  @param  int\t\t$keepembedded    Set to 1 if message must be kept embedded into its html place (this disable jnotify)\n *  @return\tvoid\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_errors\n */\nfunction dol_htmloutput_mesg($mesgstring='',$mesgarray='', $style='ok', $keepembedded=0)\n{\n\tif (empty($mesgstring) && (! is_array($mesgarray) || count($mesgarray) == 0)) return;\n\n\t$iserror=0;\n\t$iswarning=0;\n\tif (is_array($mesgarray))\n\t{\n\t\tforeach($mesgarray as $val)\n\t\t{\n\t\t\tif ($val && preg_match('/class=\"error\"/i',$val)) { $iserror++; break; }\n\t\t\tif ($val && preg_match('/class=\"warning\"/i',$val)) { $iswarning++; break; }\n\t\t}\n\t}\n\telse if ($mesgstring && preg_match('/class=\"error\"/i',$mesgstring)) $iserror++;\n\telse if ($mesgstring && preg_match('/class=\"warning\"/i',$mesgstring)) $iswarning++;\n\tif ($style=='error') $iserror++;\n\tif ($style=='warning') $iswarning++;\n\n\tif ($iserror || $iswarning)\n\t{\n\t\t// Remove div from texts\n\t\t$mesgstring=preg_replace('/<\\/div><div class=\"(error|warning)\">/','<br>',$mesgstring);\n\t\t$mesgstring=preg_replace('/<div class=\"(error|warning)\">/','',$mesgstring);\n\t\t$mesgstring=preg_replace('/<\\/div>/','',$mesgstring);\n\t\t// Remove div from texts array\n\t\tif (is_array($mesgarray))\n\t\t{\n\t\t\t$newmesgarray=array();\n\t\t\tforeach($mesgarray as $val)\n\t\t\t{\n\t\t\t\t$tmpmesgstring=preg_replace('/<\\/div><div class=\"(error|warning)\">/','<br>',$val);\n\t\t\t\t$tmpmesgstring=preg_replace('/<div class=\"(error|warning)\">/','',$tmpmesgstring);\n\t\t\t\t$tmpmesgstring=preg_replace('/<\\/div>/','',$tmpmesgstring);\n\t\t\t\t$newmesgarray[]=$tmpmesgstring;\n\t\t\t}\n\t\t\t$mesgarray=$newmesgarray;\n\t\t}\n\t\tprint get_htmloutput_mesg($mesgstring,$mesgarray,($iserror?'error':'warning'),$keepembedded);\n\t}\n\telse print get_htmloutput_mesg($mesgstring,$mesgarray,'ok',$keepembedded);\n}\n\n/**\n *  Print formated error messages to output (Used to show messages on html output).\n *\n *  @param\tstring\t$mesgstring          Error message\n *  @param  array\t$mesgarray           Error messages array\n *  @param  int\t\t$keepembedded        Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return\tvoid\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_mesg\n */\nfunction dol_htmloutput_errors($mesgstring='', $mesgarray='', $keepembedded=0)\n{\n\tdol_htmloutput_mesg($mesgstring, $mesgarray, 'error', $keepembedded);\n}\n\n/**\n * \tAdvanced sort array by second index function, which produces ascending (default)\n *  or descending output and uses optionally natural case insensitive sorting (which\n *  can be optionally case sensitive as well).\n *\n *  @param      array\t\t&$array      \t\tArray to sort (array of array('key','otherkey1','otherkey2'...))\n *  @param      string\t\t$index\t\t\t\tKey in array to use for sorting criteria\n *  @param      int\t\t\t$order\t\t\t\tSort order\n *  @param      int\t\t\t$natsort\t\t\t1=use \"natural\" sort (natsort), 0=use \"standard sort (asort)\n *  @param      int\t\t\t$case_sensitive\t\t1=sort is case sensitive, 0=not case sensitive\n *  @return     array\t\t\t\t\t\t\tSorted array\n */\nfunction dol_sort_array(&$array, $index, $order='asc', $natsort=0, $case_sensitive=0)\n{\n\t// Clean parameters\n\t$order=strtolower($order);\n\n\t$sizearray=count($array);\n\tif (is_array($array) && $sizearray>0)\n\t{\n\t\tforeach(array_keys($array) as $key) $temp[$key]=$array[$key][$index];\n\t\tif (!$natsort) ($order=='asc') ? asort($temp) : arsort($temp);\n\t\telse\n\t\t{\n\t\t\t($case_sensitive) ? natsort($temp) : natcasesort($temp);\n\t\t\tif($order!='asc') $temp=array_reverse($temp,TRUE);\n\t\t}\n\t\tforeach(array_keys($temp) as $key) (is_numeric($key))? $sorted[]=$array[$key] : $sorted[$key]=$array[$key];\n\t\treturn $sorted;\n\t}\n\treturn $array;\n}\n\n\n/**\n *      Check if a string is in UTF8\n *\n *      @param\tstring\t$str        String to check\n * \t\t@return\tboolean\t\t\t\tTrue if string is UTF8 or ISO compatible with UTF8, False if not (ISO with special char or Binary)\n */\nfunction utf8_check($str)\n{\n\t// We must use here a binary strlen function (so not dol_strlen)\n\t$strLength = dol_strlen($str);\n\tfor ($i=0; $i<$strLength; $i++)\n\t{\n\t\tif (ord($str[$i]) < 0x80) continue; // 0bbbbbbb\n\t\telseif ((ord($str[$i]) & 0xE0) == 0xC0) $n=1; // 110bbbbb\n\t\telseif ((ord($str[$i]) & 0xF0) == 0xE0) $n=2; // 1110bbbb\n\t\telseif ((ord($str[$i]) & 0xF8) == 0xF0) $n=3; // 11110bbb\n\t\telseif ((ord($str[$i]) & 0xFC) == 0xF8) $n=4; // 111110bb\n\t\telseif ((ord($str[$i]) & 0xFE) == 0xFC) $n=5; // 1111110b\n\t\telse return false; // Does not match any model\n\t\tfor ($j=0; $j<$n; $j++) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ((++$i == strlen($str)) || ((ord($str[$i]) & 0xC0) != 0x80))\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n/**\n *      Return an UTF-8 string encoded into OS filesystem encoding. This function is used to define\n * \t    value to pass to filesystem PHP functions.\n *\n *      @param\tstring\t$str        String to encode (UTF-8)\n * \t\t@return\tstring\t\t\t\tEncoded string (UTF-8, ISO-8859-1)\n */\nfunction dol_osencode($str)\n{\n\tglobal $conf;\n\n\t$tmp=ini_get(\"unicode.filesystem_encoding\");\t\t\t\t\t\t// Disponible avec PHP 6.0\n\tif (empty($tmp) && ! empty($_SERVER[\"WINDIR\"])) $tmp='iso-8859-1';\t// By default for windows\n\tif (empty($tmp)) $tmp='utf-8';\t\t\t\t\t\t\t\t\t\t// By default for other\n\tif (! empty($conf->global->MAIN_FILESYSTEM_ENCODING)) $tmp=$conf->global->MAIN_FILESYSTEM_ENCODING;\n\n\tif ($tmp == 'iso-8859-1') return utf8_decode($str);\n\treturn $str;\n}\n\n\n/**\n *      Return an id or code from a code or id. Store Code-Id in a cache.\n *\n * \t\t@param\tDoliDB\t$db\t\t\tDatabase handler\n * \t\t@param\tstring\t$key\t\tCode to get Id\n * \t\t@param\tstring\t$tablename\tTable name without prefix\n * \t\t@param\tstring\t$fieldkey\tField for code\n * \t\t@param\tstring\t$fieldid\tField for id\n *      @return int\t\t\t\t\tId of code\n */\nfunction dol_getIdFromCode($db,$key,$tablename,$fieldkey='code',$fieldid='id')\n{\n\tglobal $cache_codes;\n\n\t// If key empty\n\tif ($key == '') return '';\n\n\t// Check in cache\n\tif (isset($cache_codes[$tablename][$key]))\t// Can be defined to 0 or ''\n\t{\n\t\treturn $cache_codes[$tablename][$key];   // Found in cache\n\t}\n\n\t$sql = \"SELECT \".$fieldid.\" as id\";\n\t$sql.= \" FROM \".MAIN_DB_PREFIX.$tablename;\n\t$sql.= \" WHERE \".$fieldkey.\" = '\".$key.\"'\";\n\tdol_syslog('dol_getIdFromCode sql='.$sql,LOG_DEBUG);\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($obj) $cache_codes[$tablename][$key]=$obj->id;\n\t\telse $cache_codes[$tablename][$key]='';\n\t\t$db->free($resql);\n\t\treturn $cache_codes[$tablename][$key];\n\t}\n\telse\n\t{\n\t\tdol_syslog(\"dol_getIdFromCode error=\".$db->lasterror(),LOG_ERR);\n\t\treturn -1;\n\t}\n}\n\n/**\n * Verify if condition in string is ok or not\n *\n * @param \tstring\t\t$strRights\t\tString with condition to check\n * @return \tboolean\t\t\t\t\t\tTrue or False. Return true if strRights is ''\n */\nfunction verifCond($strRights)\n{\n\tglobal $user,$conf,$langs;\n\tglobal $leftmenu;\n\tglobal $rights;    // To export to dol_eval function\n\n\t//print $strRights.\"<br>\\n\";\n\t$rights = true;\n\tif ($strRights != '')\n\t{\n\t\t//$tab_rights = explode('&&', $strRights);\n\t\t//$i = 0;\n\t\t//while (($i < count($tab_rights)) && ($rights == true)) {\n\t\t$str = 'if(!(' . $strRights . ')) { $rights = false; }';\n\t\tdol_eval($str);\n\t\t//\t$i++;\n\t\t//}\n\t}\n\treturn $rights;\n}\n\n/**\n * Replace eval function to add more security.\n * This function is called by verifCond() or trans() and transnoentitiesnoconv().\n *\n * @param \tstring\t$s\t\t\t\tString to evaluate\n * @param\tint\t\t$returnvalue\t0=No return (used to execute $a=something). 1=Value of eval is returned (used to eval $something).\n * @return\tmixed\t\t\t\t\tNothing or return of eval\n */\nfunction dol_eval($s,$returnvalue=0)\n{\n\t// Only global variables can be changed by eval function and returned to caller\n\tglobal $langs, $user, $conf;\n\tglobal $leftmenu;\n\tglobal $rights;\n\n\t//print $s.\"<br>\\n\";\n\tif ($returnvalue) return eval('return '.$s.';');\n\telse eval($s);\n}\n\n/**\n* Return if var element is ok\n*\n* @param   string      $element    Variable to check\n* @return  boolean                 Return true of variable is not empty\n*/\nfunction dol_validElement($element)\n{\n\treturn (trim($element) != '');\n}\n\n/**\n * \tReturn img flag of country for a language code or country code\n *\n * \t@param\tstring\t$codelang\tLanguage code (en_IN, fr_CA...) or Country code (IN, FR)\n * \t@return\tstring\t\t\t\tHTML img string with flag.\n */\nfunction picto_from_langcode($codelang)\n{\n\tglobal $langs;\n\n\tif ($codelang == 'auto')\n\t{\n\t\treturn img_picto_common($langs->trans('AutoDetectLang'), 'flags/int.png');\n\t}\n\n\t$langtocountryflag = array(\n\t\t'ar_AR' => '',\n\t\t'ca_ES' => 'catalonia',\n\t\t'da_DA' => 'dk',\n\t\t'fr_CA' => 'mq',\n\t\t'sv_SV' => 'se'\n\t);\n\n\tif (isset($langtocountryflag[$codelang])) $flagImage = $langtocountryflag[$codelang];\n\telse\n\t{\n\t\t$tmparray = explode('_', $codelang);\n\t\t$flagImage = empty($tmparray[1]) ? $tmparray[0] : $tmparray[1];\n\t}\n\n\treturn img_picto_common($codelang, 'flags/'.strtolower($flagImage).'.png');\n}\n\n/**\n *  Complete or removed entries into a head array (used to build tabs) with value added by external modules.\n *  Such values are declared into $conf->tabs_modules.\n *\n *  @param\tConf\t\t$conf           Object conf\n *  @param  Translate\t$langs          Object langs\n *  @param  Object\t\t$object         Object object\n *  @param  array\t\t&$head          Object head\n *  @param  int\t\t\t&$h             New position to fill\n *  @param  string\t\t$type           Value for object where objectvalue can be\n *                              \t\t'thirdparty'       to add a tab in third party view\n *\t\t                              \t'intervention'     to add a tab in intervention view\n *     \t\t                         \t'supplier_order'   to add a tab in supplier order view\n *          \t\t                    'supplier_invoice' to add a tab in supplier invoice view\n *                  \t\t            'invoice'          to add a tab in customer invoice view\n *                          \t\t    'order'            to add a tab in customer order view\n *                      \t\t        'product'          to add a tab in product view\n *                              \t\t'propal'           to add a tab in propal view\n *                              \t\t'user'             to add a tab in user view\n *                              \t\t'group'            to add a tab in group view\n * \t\t        \t                    'member'           to add a tab in fundation member view\n *      \t\t                        'categories_x'\t   to add a tab in category view ('x': type of category (0=product, 1=supplier, 2=customer, 3=member)\n *  @param  string\t\t$mode  \t        'add' to complete head, 'remove' to remove entries\n *\t@return\tvoid\n */\nfunction complete_head_from_modules($conf,$langs,$object,&$head,&$h,$type,$mode='add')\n{\n\tif (isset($conf->tabs_modules[$type]) && is_array($conf->tabs_modules[$type]))\n\t{\n\t\tforeach ($conf->tabs_modules[$type] as $value)\n\t\t{\n\t\t\t$values=explode(':',$value);\n\n\t\t\tif ($mode == 'add' && ! preg_match('/^\\-/',$values[1]))\n\t\t\t{\n\t\t\t\tif (count($values) == 6)       // new declaration with permissions:  $value='objecttype:+tabname1:Title1:langfile@mymodule:$user->rights->mymodule->read:/mymodule/mynewtab1.php?id=__ID__'\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\n\t\t\t\t\tif (verifCond($values[4]))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', (! empty($object->id)?$object->id:''), $values[5]), 1);\n\t\t\t\t\t\t$head[$h][1] = $langs->trans($values[2]);\n\t\t\t\t\t\t$head[$h][2] = str_replace('+','',$values[1]);\n\t\t\t\t\t\t$h++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (count($values) == 5)       // new declaration\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', (! empty($object->id)?$object->id:''), $values[4]), 1);\n\t\t\t\t\t$head[$h][1] = $langs->trans($values[2]);\n\t\t\t\t\t$head[$h][2] = str_replace('+','',$values[1]);\n\t\t\t\t\t$h++;\n\t\t\t\t}\n\t\t\t\telse if (count($values) == 4)   // old declaration, for backward compatibility\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t\tif ($values[2]) $langs->load($values[2]);\n\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', (! empty($object->id)?$object->id:''), $values[3]), 1);\n\t\t\t\t\t$head[$h][1] = $langs->trans($values[1]);\n\t\t\t\t\t$head[$h][2] = 'tab'.$values[1];\n\t\t\t\t\t$h++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($mode == 'remove' && preg_match('/^\\-/',$values[1]))\n\t\t\t{\n\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t$tabname=str_replace('-','',$values[1]);\n\t\t\t\tforeach($head as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$condition = (! empty($values[3]) ? verifCond($values[3]) : 1);\n\t\t\t\t\tif ($head[$key][2]==$tabname && $condition)\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($head[$key]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Print common footer :\n * \t\tconf->global->MAIN_HTML_FOOTER\n * \t\tconf->global->MAIN_GOOGLE_AN_ID\n * \t\tDOL_TUNING\n * \t\tconf->logbuffer\n *\n * @param\tstring\t$zone\t'private' (for private pages) or 'public' (for public pages)\n * @return\tvoid\n */\nfunction printCommonFooter($zone='private')\n{\n\tglobal $conf;\n\tglobal $micro_start_time;\n\n\tif ($zone == 'private') print \"\\n\".'<!-- Common footer for private page -->'.\"\\n\";\n\telse print \"\\n\".'<!-- Common footer for public page -->'.\"\\n\";\n\n\tif (! empty($conf->global->MAIN_HTML_FOOTER)) print $conf->global->MAIN_HTML_FOOTER.\"\\n\";\n\n\t// Google Analytics (need Google module)\n\tif (! empty($conf->global->MAIN_GOOGLE_AN_ID))\n\t{\n\t\tprint \"\\n\";\n\t\tprint '<script type=\"text/javascript\">'.\"\\n\";\n\t\tprint '  var _gaq = _gaq || [];'.\"\\n\";\n\t\tprint '  _gaq.push([\\'_setAccount\\', \\''.$conf->global->MAIN_GOOGLE_AN_ID.'\\']);'.\"\\n\";\n\t\tprint '  _gaq.push([\\'_trackPageview\\']);'.\"\\n\";\n\t\tprint ''.\"\\n\";\n\t\tprint '  (function() {'.\"\\n\";\n\t\tprint '    var ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.async = true;'.\"\\n\";\n\t\tprint '    ga.src = (\\'https:\\' == document.location.protocol ? \\'https://ssl\\' : \\'http://www\\') + \\'.google-analytics.com/ga.js\\';'.\"\\n\";\n\t\tprint '    var s = document.getElementsByTagName(\\'script\\')[0]; s.parentNode.insertBefore(ga, s);'.\"\\n\";\n\t\tprint '  })();'.\"\\n\";\n\t\tprint '</script>'.\"\\n\";\n\t}\n\n\t// End of tuning\n\tif (! empty($_SERVER['DOL_TUNING']))\n\t{\n\t\t$micro_end_time=dol_microtime_float(true);\n\t\tprint \"\\n\".'<script type=\"text/javascript\">'.\"\\n\";\n\t\tprint 'window.console && console.log(\"';\n\t\tif (! empty($conf->global->MEMCACHED_SERVER)) print 'MEMCACHED_SERVER='.$conf->global->MEMCACHED_SERVER.' - ';\n\t\tprint 'MAIN_OPTIMIZE_SPEED='.(isset($conf->global->MAIN_OPTIMIZE_SPEED)?$conf->global->MAIN_OPTIMIZE_SPEED:'off');\n\t\tprint ' - Build time: '.ceil(1000*($micro_end_time-$micro_start_time)).' ms';\n\t\tif (function_exists(\"memory_get_usage\"))\n\t\t{\n\t\t\tprint ' - Mem: '.memory_get_usage();\n\t\t}\n\t\tif (function_exists(\"xdebug_memory_usage\"))\n\t\t{\n\t\t\tprint ' - XDebug time: '.ceil(1000*xdebug_time_index()).' ms';\n\t\t\tprint ' - XDebug mem: '.xdebug_memory_usage();\n\t\t\tprint ' - XDebug mem peak: '.xdebug_peak_memory_usage();\n\t\t}\n\t\tif (function_exists(\"zend_loader_file_encoded\"))\n\t\t{\n\t\t\tprint ' - Zend encoded file: '.(zend_loader_file_encoded()?'yes':'no');\n\t\t}\n\t\tprint '\");'.\"\\n\";\n\t\tprint '</script>'.\"\\n\";\n\n\t\t// Add Xdebug coverage of code\n\t\tif (defined('XDEBUGCOVERAGE')) {\n\t\t\tvar_dump(xdebug_get_code_coverage());\n\t\t}\n\t}\n\n\t// If there is some logs in buffer to show\n\tif (count($conf->logbuffer))\n\t{\n\t\tprint \"\\n\";\n\t\tprint \"<!-- Start of log output\\n\";\n\t\t//print '<div class=\"hidden\">'.\"\\n\";\n\t\tforeach($conf->logbuffer as $logline)\n\t\t{\n\t\t\tprint $logline.\"<br>\\n\";\n\t\t}\n\t\t//print '</div>'.\"\\n\";\n\t\tprint \"End of log output -->\\n\";\n\t}\n\n}\n\n/**\n *\tConvert an array with RGB value into hex RGB value\n *\n *  @param\tarray\t$arraycolor\t\t\tArray\n *  @param\tstring\t$colorifnotfound\tColor code to return if entry not defined\n *  @return\tstring\t\t\t\t\t\tRGB hex value (without # before). For example: FF00FF\n */\nfunction colorArrayToHex($arraycolor,$colorifnotfound='888888')\n{\n\tif (! is_array($arraycolor)) return $colorifnotfound;\n\treturn dechex($arraycolor[0]).dechex($arraycolor[1]).dechex($arraycolor[2]);\n}\n\n/**\n *\tConvert a currency code into its symbol\n *\n *  @param\t\tstring\t$currency_code\t\tCurrency code\n *  @return\t\tstring\t\t\t\t\t\tCurrency symbol encoded into UTF8\n */\nfunction getCurrencySymbol($currency_code)\n{\n\tglobal $db, $form;\n\n\t$currency_sign = '';\n\n\tif (! is_object($form)) $form = new Form($db);\n\n\t$form->load_cache_currencies();\n\n\tif (function_exists(\"mb_convert_encoding\") && isset($form->cache_currencies[$currency_code]) && is_array($form->cache_currencies[$currency_code]['unicode']) && ! empty($form->cache_currencies[$currency_code]['unicode']))\n\t{\n\t\tforeach($form->cache_currencies[$currency_code]['unicode'] as $unicode)\n\t\t{\n\t\t\t$currency_sign .= mb_convert_encoding(\"&#{$unicode};\", \"UTF-8\", 'HTML-ENTITIES');\n\t\t}\n\t}\n\telse\n\t{\n\t\t$currency_sign = $currency_code;\n\t}\n\n\treturn $currency_sign;\n}\n\n\nif (! function_exists('getmypid'))\n{\n\t/**\n\t * Return random PID\n\t * Some web hosts disable this php function for security reasons\n\t *\n\t * @return\tint\n\t */\n\tfunction getmypid()\n\t{\n\t\treturn rand(1,32768);\n\t}\n}\n\n?>\n"], "fixing_code": ["<?php\n/* Copyright (C) 2000-2007 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2003      Jean-Louis Bergamo   <jlb@j1b.org>\n * Copyright (C) 2004-2012 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2004      Sebastien Di Cintio  <sdicintio@ressource-toi.org>\n * Copyright (C) 2004      Benoit Mortier       <benoit.mortier@opensides.be>\n * Copyright (C) 2004      Christophe Combelles <ccomb@free.fr>\n * Copyright (C) 2005-2012 Regis Houssin        <regis.houssin@capnetworks.com>\n * Copyright (C) 2008      Raphael Bertrand (Resultic)       <raphael.bertrand@resultic.fr>\n * Copyright (C) 2010-2011 Juanjo Menent        <jmenent@2byte.es>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n * or see http://www.gnu.org/\n */\n\n/**\n *\t\\file\t\t\thtdocs/core/lib/functions.lib.php\n *\t\\brief\t\t\tA set of functions for Dolibarr\n *\t\t\t\t\tThis file contains all frequently used functions.\n */\n\n\nif (! function_exists('json_encode'))\n{\n\tinclude_once DOL_DOCUMENT_ROOT .'/core/lib/json.lib.php';\n}\n\n/**\n * Function to return value of a static property when class\n * name is dynamically defined (not hard coded).\n * This is because $myclass::$myvar works from PHP 5.3.0+ only\n *\n * @param\tstring \t$class\t\tClass name\n * @param \tstring \t$member\t\tName of property\n * @return \tstring\t\t\t\tReturn value of static property.\n */\nfunction getStaticMember($class, $member)\n{\n\tif (is_object($class)) $class = get_class($class);\n\t$classObj = new ReflectionClass($class);\n\t$result = null;\n\n\tforeach($classObj->getStaticProperties() as $prop => $value)\n\t{\n\t\tif($prop == $member)\n\t\t{\n\t\t\t$result = $value;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n\n/**\n * Return a DoliDB instance (database handler).\n *\n * @param   string\t$type\t\tType of database (mysql, pgsql...)\n * @param\tstring\t$host\t\tAddress of database server\n * @param\tstring\t$user\t\tNom de l'utilisateur autorise\n * @param\tstring\t$pass\t\tMot de passe\n * @param\tstring\t$name\t\tNom de la database\n * @param\tint\t\t$port\t\tPort of database server\n * @return\tDoliDB\t\t\t\tA DoliDB instance\n */\nfunction getDoliDBInstance($type, $host, $user, $pass, $name, $port)\n{\n\trequire_once DOL_DOCUMENT_ROOT .\"/core/db/\".$type.'.class.php';\n\n\t$class='DoliDB'.ucfirst($type);\n\t$dolidb=new $class($type, $host, $user, $pass, $name, $port);\n\treturn $dolidb;\n}\n\n/**\n * \tGet entity to use\n *\n * \t@param\tstring\t$element\tCurrent element\n * \t@param\tint\t\t$shared\t\t1=Return shared entities\n * \t@return\tmixed\t\t\t\tEntity id(s) to use\n */\nfunction getEntity($element=false, $shared=false)\n{\n\tglobal $conf, $mc;\n\n\tif (is_object($mc))\n\t{\n\t\treturn $mc->getEntity($element, $shared);\n\t}\n\telse\n\t{\n\t\t$out='';\n\n\t\t$addzero = array('user', 'usergroup');\n\t\tif (in_array($element, $addzero)) $out.= '0,';\n\n\t\t$out.= $conf->entity;\n\n\t\treturn $out;\n\t}\n}\n\n/**\n * Return information about user browser\n *\n * @return\tarray\t\tArray of information ('browsername'=>,'browseros'=>,'phone'=>,'browserfirefox'=>)\n */\nfunction getBrowserInfo()\n{\n\t$name='unknown'; $version=''; $os='unknown'; $phone='';\n\n\t// If phone/smartphone, we set phone os name.\n\tif (preg_match('/android/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os=$phone='android'; }\n\telseif (preg_match('/blackberry/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t{ $os=$phone='blackberry'; }\n\telseif (preg_match('/iphone/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t{ $os='ios'; $phone='iphone'; }\n\telseif (preg_match('/ipod/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os='ios'; $phone='iphone'; }\n\telseif (preg_match('/palm/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os=$phone='palm'; }\n\telseif (preg_match('/symbian/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t{ $os='symbian'; $phone='unknown'; }\n\telseif (preg_match('/webos/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os='webos'; $phone='unknown'; }\n\telseif (preg_match('/maemo/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t\t{ $os='maemo'; $phone='unknown'; }\n\t// MS products at end\n\telseif (preg_match('/iemobile/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t\t{ $os='windows'; $phone='unkown'; }\n\telseif (preg_match('/windows ce/i',$_SERVER[\"HTTP_USER_AGENT\"]))\t{ $os='windows'; $phone='unkown'; }\n\t// Name\n\tif (preg_match('/firefox(\\/|\\s)([\\d\\.]*)/i',    $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='firefox';   $version=$reg[2]; }\n\telseif (preg_match('/chrome(\\/|\\s)([\\d\\.]+)/i', $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='chrome';    $version=$reg[2]; }    // we can have 'chrome (Mozilla...) chrome x.y' in one string\n\telseif (preg_match('/chrome/i',                 $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='chrome'; }\n\telseif (preg_match('/iceweasel/i',$_SERVER[\"HTTP_USER_AGENT\"]))                      { $name='iceweasel'; $version=$reg[2]; }\n\telseif (preg_match('/epiphany/i',$_SERVER[\"HTTP_USER_AGENT\"]))                       { $name='epiphany';  $version=$reg[2]; }\n\telseif ((empty($phone) || preg_match('/iphone/i',$_SERVER[\"HTTP_USER_AGENT\"])) && preg_match('/safari(\\/|\\s)([\\d\\.]*)/i',$_SERVER[\"HTTP_USER_AGENT\"], $reg)) { $name='safari'; $version=$reg[2]; }\t// Safari is often present in string for mobile but its not.\n\telseif (preg_match('/opera(\\/|\\s)([\\d\\.]*)/i',  $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='opera';     $version=$reg[2]; }\n\telseif (preg_match('/msie(\\/|\\s)([\\d\\.]*)/i',   $_SERVER[\"HTTP_USER_AGENT\"], $reg))  { $name='ie';        $version=$reg[2]; }    // MS products at end\n\t// Other\n\t$firefox=0;\n\tif (in_array($name,array('firefox','iceweasel'))) $firefox=1;\n\n\treturn array('browsername'=>$name, 'browserversion'=>$version, 'browseros'=>$os, 'phone'=>$phone, 'browserfirefox'=>$firefox);\n}\n\n/**\n *  Function called at end of web php process\n *\n *  @return\tvoid\n */\nfunction dol_shutdown()\n{\n\tglobal $conf,$user,$langs,$db;\n\t$disconnectdone=false; $depth=0;\n\tif (is_object($db) && ! empty($db->connected)) { $depth=$db->transaction_opened; $disconnectdone=$db->close(); }\n\tdol_syslog(\"--- End access to \".$_SERVER[\"PHP_SELF\"].(($disconnectdone && $depth)?' (Warn: db disconnection forced, transaction depth was '.$depth.')':''), (($disconnectdone && $depth)?LOG_WARNING:LOG_DEBUG));\n}\n\n\n/**\n *  Return value of a param into GET or POST supervariable\n *\n *  @param\tstring\t$paramname   Name of parameter to found\n *  @param\tstring\t$check\t     Type of check (''=no check,  'int'=check it's numeric, 'alpha'=check it's alpha only, 'array'=check it's array)\n *  @param\tint\t\t$method\t     Type of method (0 = get then post, 1 = only get, 2 = only post, 3 = post then get)\n *  @return string      \t\t Value found or '' if check fails\n */\nfunction GETPOST($paramname,$check='',$method=0)\n{\n\tif (empty($method)) $out = isset($_GET[$paramname])?$_GET[$paramname]:(isset($_POST[$paramname])?$_POST[$paramname]:'');\n\telseif ($method==1) $out = isset($_GET[$paramname])?$_GET[$paramname]:'';\n\telseif ($method==2) $out = isset($_POST[$paramname])?$_POST[$paramname]:'';\n\telseif ($method==3) $out = isset($_POST[$paramname])?$_POST[$paramname]:(isset($_GET[$paramname])?$_GET[$paramname]:'');\n\telse return 'BadParameter';\n\n\tif (! empty($check))\n\t{\n\t\t// Check if numeric\n\t\tif ($check == 'int' && ! preg_match('/^[-\\.,0-9]+$/i',$out))\n\t\t{\n\t\t\t$out=trim($out);\n\t\t\t$out='';\n\t\t}\n\t\t// Check if alpha\n\t\telseif ($check == 'alpha')\n\t\t{\n\t\t\t$out=trim($out);\n\t\t\t// '\"' is dangerous because param in url can close the href= or src= and add javascript functions.\n\t\t\t// '../' is dangerous because it allows dir transversals\n\t\t\tif (preg_match('/\"/',$out)) $out='';\n\t\t\telse if (preg_match('/\\.\\.\\//',$out)) $out='';\n\t\t}\n\t\telseif ($check == 'array')\n\t\t{\n\t\t\tif (! is_array($out) || empty($out)) $out=array();\n\t\t}\n\t}\n\n\treturn $out;\n}\n\n\n/**\n *  Return a prefix to use for this Dolibarr instance for session or cookie names.\n *  This prefix is unique for instance and avoid conflict between multi-instances,\n *  even when having two instances with one root dir or two instances in virtual servers\n *\n *  @return\tstring      \t\tA calculated prefix\n */\nfunction dol_getprefix()\n{\n\treturn dol_hash($_SERVER[\"SERVER_NAME\"].$_SERVER[\"DOCUMENT_ROOT\"].DOL_DOCUMENT_ROOT.DOL_URL_ROOT);\n}\n\n/**\n *\tMake an include_once using default root and alternate root if it fails.\n *\tWARNING: In most cases, you should not use this function:\n *  To link to a core file, use include(DOL_DOCUMENT_ROOT.'/pathtofile')\n *  To link to a module file from a module file, use include './mymodulefile';\n *  To link to a module file from a core file, then this function can be used\n *\n * \t@param\tstring\t$relpath\tRelative path to file (Ie: mydir/myfile, ../myfile, ...)\n * \t@param\tstring\t$classname\tClass name\n *  @return int\t\t\t\t\tfalse if include fails.\n */\nfunction dol_include_once($relpath, $classname='')\n{\n\tglobal $conf,$langs,$user,$mysoc;   // Other global var must be retreived with $GLOBALS['var']\n\n\tif (! empty($classname) && ! class_exists($classname)) {\n\t\treturn @include dol_buildpath($relpath);\t\t\t// Remove @ to find error into php log file if you have problems\n\t} else {\n\t\treturn @include_once dol_buildpath($relpath);\t\t// Remove @ to find error into php log file if you have problems\n\t}\n}\n\n\n/**\n *\tReturn path of url or filesystem. Return default_root or alternate root if file_exist fails\n *\n * \t@param\tstring\t$path\t\tRelative path to file (if mode=0, ie: mydir/myfile, ../myfile, ...) or relative url (if mode=1).\n *  @param\tint\t\t$type\t\t0=Used for a Filesystem path, 1=Used for an URL path (output relative), 2=Used for an URL path (output full path)\n *  @return string\t\t\t\tFull filsystem path (if mode=0), Full url path (if mode=1)\n */\nfunction dol_buildpath($path, $type=0)\n{\n\tif (empty($type))\t// For a filesystem path\n\t{\n\t\t$res = DOL_DOCUMENT_ROOT.$path;\t// Standard value\n\t\tif (defined('DOL_DOCUMENT_ROOT_ALT') && DOL_DOCUMENT_ROOT_ALT)\t// We check only if alternate feature is used\n\t\t{\n\t\t\tif (! file_exists(DOL_DOCUMENT_ROOT.$path)) $res = DOL_DOCUMENT_ROOT_ALT.$path;\n\t\t}\n\t}\n\telse\t\t\t\t// For an url path\n\t{\n\t\t// We try to get local path of file on filesystem from url\n\t\t// Note that trying to know if a file on disk exist by forging path on disk from url\n\t\t// works only for some web server and some setup. This is bugged when\n\t\t// using proxy, rewriting, virtual path, etc...\n\t\tif ($type == 1)\n\t\t{\n\t\t\t$res = DOL_URL_ROOT.$path;\t\t// Standard value\n\t\t\tif (defined('DOL_URL_ROOT_ALT') && DOL_URL_ROOT_ALT)\t\t\t// We check only if alternate feature is used\n\t\t\t{\n\t\t\t\tpreg_match('/^([^\\?]+(\\.css\\.php|\\.css|\\.js\\.php|\\.js|\\.png|\\.jpg|\\.php)?)/i',$path,$regs);    // Take part before '?'\n\t\t\t\tif (! empty($regs[1]))\n\t\t\t\t{\n\t\t\t\t\tif (! file_exists(DOL_DOCUMENT_ROOT.$regs[1])) $res = DOL_URL_ROOT_ALT.$path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if ($type == 2)\n\t\t{\n\t\t\t$res = DOL_MAIN_URL_ROOT.$path;      // Standard value\n\t\t\tif (defined('DOL_URL_ROOT_ALT') && DOL_URL_ROOT_ALT)            // We check only if alternate feature is used\n\t\t\t{\n\t\t\t\tpreg_match('/^([^\\?]+(\\.css\\.php|\\.css|\\.js\\.php|\\.js|\\.png|\\.jpg|\\.php)?)/i',$path,$regs);    // Take part before '?'\n\t\t\t\tif (! empty($regs[1]))\n\t\t\t\t{\n\t\t\t\t\tif (! file_exists(DOL_DOCUMENT_ROOT.$regs[1])) $res = DOL_MAIN_URL_ROOT_ALT.$path;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $res;\n}\n\n/**\n *\tCreate a clone of instance of object (new instance with same properties)\n * \tThis function works for both PHP4 and PHP5\n *\n * \t@param\tobject\t$object\t\tObject to clone\n *\t@return object\t\t\t\tObject clone\n */\nfunction dol_clone($object)\n{\n\tdol_syslog(\"Functions.lib::dol_clone Clone object\");\n\n\t// We create dynamically a clone function, making a =\n\tif (version_compare(phpversion(), '5.0') < 0 && ! function_exists('clone'))\n\t{\n\t\teval('function clone($object){return($object);}');\n\t}\n\t$myclone=clone($object);\n\treturn $myclone;\n}\n\n/**\n *\tOptimize a size for some browsers (phone, smarphone, ...)\n *\n * \t@param\tint\t\t$size\t\tSize we want\n * \t@param\tstring\t$type\t\tType of optimizing:\n * \t\t\t\t\t\t\t\t\t\t'' = function used to define a size for truncation\n * \t\t\t\t\t\t\t\t\t\t'width' = function is used to define a width\n *\t@return int\t\t\t\t\tNew size after optimizing\n */\nfunction dol_size($size,$type='')\n{\n\tglobal $conf;\n\tif (empty($conf->browser->phone)) return $size;\n\tif ($type == 'width' && $size > 250) return 250;\n\telse return 10;\n}\n\n\n/**\n *\tClean a string to use it as a file name\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace bad chars with\n *  @param\tstring\t$unaccent\t\t1=Remove also accent (default), 0 do not remove them\n *\t@return string          \t\tString cleaned (a-zA-Z_)\n *\n * \t@see        \tdol_string_nospecial, dol_string_unaccent\n */\nfunction dol_sanitizeFileName($str,$newstr='_',$unaccent=1)\n{\n\t$filesystem_forbidden_chars = array('<','>',':','/','\\\\','?','*','|','\"');\n\treturn dol_string_nospecial($unaccent?dol_string_unaccent($str):$str, $newstr, $filesystem_forbidden_chars);\n}\n\n/**\n *\tClean a string from all accent characters to be used as ref, login or by dol_sanitizeFileName\n *\n *\t@param\tstring\t$str\t\t\tString to clean\n *\t@return string   \t       \t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename, dol_string_nospecial\n */\nfunction dol_string_unaccent($str)\n{\n\tif (utf8_check($str))\n\t{\n\t\t$string = rawurlencode($str);\n\t\t$replacements = array(\n\t\t'%C3%80' => 'A','%C3%81' => 'A',\n\t\t'%C3%88' => 'E','%C3%89' => 'E',\n\t\t'%C3%8C' => 'I','%C3%8D' => 'I',\n\t\t'%C3%92' => 'O','%C3%93' => 'O',\n\t\t'%C3%99' => 'U','%C3%9A' => 'U',\n\t\t'%C3%A0' => 'a','%C3%A1' => 'a','%C3%A2' => 'a',\n\t\t'%C3%A8' => 'e','%C3%A9' => 'e','%C3%AA' => 'e','%C3%AB' => 'e',\n\t\t'%C3%AC' => 'i','%C3%AD' => 'i','%C3%AE' => 'i',\n\t\t'%C3%B2' => 'o','%C3%B3' => 'o',\n\t\t'%C3%B9' => 'u','%C3%BA' => 'u'\n\t\t);\n\t\t$string=strtr($string, $replacements);\n\t\treturn rawurldecode($string);\n\t}\n\telse\n\t{\n\t\t$string = strtr(\n\t\t\t$str,\n\t\t\t\"\\xC0\\xC1\\xC2\\xC3\\xC5\\xC7\n\t\t\t\\xC8\\xC9\\xCA\\xCB\\xCC\\xCD\\xCE\\xCF\\xD0\\xD1\n\t\t\t\\xD2\\xD3\\xD4\\xD5\\xD8\\xD9\\xDA\\xDB\\xDD\n\t\t\t\\xE0\\xE1\\xE2\\xE3\\xE5\\xE7\\xE8\\xE9\\xEA\\xEB\n\t\t\t\\xEC\\xED\\xEE\\xEF\\xF0\\xF1\\xF2\\xF3\\xF4\\xF5\\xF8\n\t\t\t\\xF9\\xFA\\xFB\\xFD\\xFF\",\n\t\t\t\"AAAAAC\n\t\t\tEEEEIIIIDN\n\t\t\tOOOOOUUUY\n\t\t\taaaaaceeee\n\t\t\tiiiidnooooo\n\t\t\tuuuyy\"\n\t\t);\n\t\t$string = strtr($string, array(\"\\xC4\"=>\"Ae\", \"\\xC6\"=>\"AE\", \"\\xD6\"=>\"Oe\", \"\\xDC\"=>\"Ue\", \"\\xDE\"=>\"TH\", \"\\xDF\"=>\"ss\", \"\\xE4\"=>\"ae\", \"\\xE6\"=>\"ae\", \"\\xF6\"=>\"oe\", \"\\xFC\"=>\"ue\", \"\\xFE\"=>\"th\"));\n\t\treturn $string;\n\t}\n}\n\n/**\n *\tClean a string from all punctuation characters to use it as a ref or login\n *\n *\t@param\tstring\t$str            String to clean\n * \t@param\tstring\t$newstr\t\t\tString to replace forbidden chars with\n *  @param  array\t$badchars       List of forbidden characters\n * \t@return string          \t\tCleaned string\n *\n * \t@see    \t\tdol_sanitizeFilename, dol_string_unaccent\n */\nfunction dol_string_nospecial($str,$newstr='_',$badchars='')\n{\n\t$forbidden_chars_to_replace=array(\" \",\"'\",\"/\",\"\\\\\",\":\",\"*\",\"?\",\"\\\"\",\"<\",\">\",\"|\",\"[\",\"]\",\",\",\";\",\"=\");\n\t$forbidden_chars_to_remove=array();\n\tif (is_array($badchars)) $forbidden_chars_to_replace=$badchars;\n\t//$forbidden_chars_to_remove=array(\"(\",\")\");\n\n\treturn str_replace($forbidden_chars_to_replace,$newstr,str_replace($forbidden_chars_to_remove,\"\",$str));\n}\n\n/**\n *  Returns text escaped for inclusion into javascript code\n *\n *  @param       string\t\t$stringtoescape\t\tString to escape\n *  @return      string     \t\t \t\t\tEscaped string\n */\nfunction dol_escape_js($stringtoescape)\n{\n\t// escape quotes and backslashes, newlines, etc.\n\t$substitjs=array(\"&#039;\"=>\"\\\\'\",'\\\\'=>'\\\\\\\\',\"'\"=>\"\\\\'\",'\"'=>\"\\\\'\",\"\\r\"=>'\\\\r',\"\\n\"=>'\\\\n','</'=>'<\\/');\n\treturn strtr($stringtoescape, $substitjs);\n}\n\n\n/**\n *  Returns text escaped for inclusion in HTML alt or title tags\n *\n *  @param      string\t\t$stringtoescape\t\tString to escape\n *  @param\t\tint\t\t\t$keepb\t\t\t\tDo not clean b tags\n *  @return     string     \t\t\t\t \t\tEscaped string\n */\nfunction dol_escape_htmltag($stringtoescape,$keepb=0)\n{\n\t// escape quotes and backslashes, newlines, etc.\n\t$tmp=dol_html_entity_decode($stringtoescape,ENT_COMPAT,'UTF-8');\n\tif ($keepb) $tmp=strtr($tmp, array(\"\\r\"=>'\\\\r',\"\\n\"=>'\\\\n'));\n\telse $tmp=strtr($tmp, array(\"\\r\"=>'\\\\r',\"\\n\"=>'\\\\n',\"<b>\"=>'','</b>'=>''));\n\treturn dol_htmlentities($tmp,ENT_COMPAT,'UTF-8');\n}\n\n\n/**\n * Convert a string to lower. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtolower($utf8_string)\n{\n\treturn mb_strtolower($utf8_string, \"UTF-8\");\n}\n\n/**\n * Convert a string to upper. Never use strtolower because it does not works with UTF8 strings.\n *\n * @param \tstring\t\t$utf8_string\t\tString to encode\n * @return \tstring\t\t\t\t\t\t\tString converted\n */\nfunction dol_strtoupper($utf8_string)\n{\n\treturn mb_strtoupper($utf8_string, \"UTF-8\");\n}\n\n\n/**\n *\tWrite log message into outputs. Possible outputs can be:\n *\tSYSLOG_HANDLERS = [\"mod_syslog_file\"]  \t\tfile name is then defined by SYSLOG_FILE\n *\tSYSLOG_HANDLERS = [\"mod_syslog_syslog\"]  \tfacility is then defined by SYSLOG_FACILITY\n *  Warning, syslog functions are bugged on Windows, generating memory protection faults. To solve\n *  this, use logging to files instead of syslog (see setup of module).\n *  Note: If SYSLOG_FILE_NO_ERROR defined, we never output any error message when writing to log fails.\n *  Note: You can get log message into html sources by adding parameter &logtohtml=1 (constant MAIN_LOGTOHTML must be set)\n *  This function works only if syslog module is enabled.\n * \tThis must not use any call to other function calling dol_syslog (avoid infinite loop).\n *\n * \t@param  string\t\t$message\tLine to log. Ne doit pas etre traduit si level = LOG_ERR\n *  @param  int\t\t\t$level\t\tLog level\n *                                  0=Show nothing\n *\t\t\t\t\t\t\t\t\tOn Windows LOG_ERR=4, LOG_WARNING=5, LOG_NOTICE=LOG_INFO=6, LOG_DEBUG=6 si define_syslog_variables ou PHP 5.3+, 7 si dolibarr\n *\t\t\t\t\t\t\t\t\tOn Linux   LOG_ERR=3, LOG_WARNING=4, LOG_INFO=6, LOG_DEBUG=7\n *  @param\tint\t\t\t$ident\t\t1=Increase ident of 1, -1=Decrease ident of 1\n *  @return\tvoid\n */\nfunction dol_syslog($message, $level = LOG_INFO, $ident = 0)\n{\n\tglobal $conf, $user;\n\n\t// If syslog module enabled\n\tif (empty($conf->syslog->enabled)) return false;\n\n\tif (! empty($level))\n\t{\n\t\t// Test log level\n\t\t$logLevels = array(\tLOG_EMERG, LOG_ALERT, LOG_CRIT, LOG_ERR, LOG_WARNING, LOG_NOTICE, LOG_INFO, LOG_DEBUG);\n\t\tif (!in_array($level, $logLevels))\n\t\t{\n\t\t\tthrow new Exception('Incorrect log level');\n\t\t}\n\t\tif ($level > $conf->global->SYSLOG_LEVEL) return false;\n\n\t\t// If adding log inside HTML page is required\n\t\tif (! empty($_REQUEST['logtohtml']) && ! empty($conf->global->MAIN_LOGTOHTML))\n\t\t{\n\t\t\t$conf->logbuffer[] = dol_print_date(time(),\"%Y-%m-%d %H:%M:%S\").\" \".$message;\n\t\t}\n\n\t\t// If enable html log tag enabled and url parameter log defined, we show output log on HTML comments\n\t\tif (! empty($conf->global->MAIN_ENABLE_LOG_HTML) && ! empty($_GET[\"log\"]))\n\t\t{\n\t\t\tprint \"\\n\\n<!-- Log start\\n\";\n\t\t\tprint $message.\"\\n\";\n\t\t\tprint \"Log end -->\\n\";\n\t\t}\n\n\t\t$data = array(\n\t\t\t'message' => $message,\n\t\t\t'script' => (isset($_SERVER['PHP_SELF'])? basename($_SERVER['PHP_SELF'],'.php') : false),\n\t\t\t'level' => $level,\n\t\t\t'user' => ((is_object($user) && $user->id) ? $user->login : false),\n\t\t\t'ip' => false\n\t\t);\n\n\t\tif (! empty($_SERVER[\"REMOTE_ADDR\"])) $data['ip'] = $_SERVER['REMOTE_ADDR'];\n\t\t// This is when PHP session is ran inside a web server but not inside a client request (example: init code of apache)\n\t\telse if (! empty($_SERVER['SERVER_ADDR'])) $data['ip'] = $_SERVER['SERVER_ADDR'];\n\t\t// This is when PHP session is ran outside a web server, like from Windows command line (Not always defined, but useful if OS defined it).\n\t\telse if (! empty($_SERVER['COMPUTERNAME'])) $data['ip'] = $_SERVER['COMPUTERNAME'].(empty($_SERVER['USERNAME'])?'':'@'.$_SERVER['USERNAME']);\n\t\t// This is when PHP session is ran outside a web server, like from Linux command line (Not always defined, but usefull if OS defined it).\n\t\telse if (! empty($_SERVER['LOGNAME'])) $data['ip'] = '???@'.$_SERVER['LOGNAME'];\n\n\t\t// Loop on each log handler and send output\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->export($data);\n\t\t}\n\t\tunset($data);\n\t}\n\n\tif (! empty($ident))\n\t{\n\t\tforeach ($conf->loghandlers as $loghandlerinstance)\n\t\t{\n\t\t\t$loghandlerinstance->setIdent($ident);\n\t\t}\n\t}\n}\n\n\n/**\n *\tShow tab header of a card\n *\n *\t@param\tarray\t$links\t\tArray of tabs\n *\t@param\tstring\t$active     Active tab name (document', 'info', 'ldap', ....)\n *\t@param  string\t$title      Title\n *\t@param  int\t\t$notab\t\t0=Add tab header, 1=no tab header\n * \t@param\tstring\t$picto\t\tAdd a picto on tab title\n * \t@return\tvoid\n */\nfunction dol_fiche_head($links=array(), $active='0', $title='', $notab=0, $picto='')\n{\n\tprint dol_get_fiche_head($links, $active, $title, $notab, $picto);\n}\n\n/**\n *  Show tab header of a card\n *\n *\t@param\tarray\t$links\t\tArray of tabs\n *\t@param\tint\t\t$active     Active tab name\n *\t@param  string\t$title      Title\n *\t@param  int\t\t$notab\t\t0=Add tab header, 1=no tab header\n * \t@param\tstring\t$picto\t\tAdd a picto on tab title\n * \t@return\tvoid\n */\nfunction dol_get_fiche_head($links=array(), $active='0', $title='', $notab=0, $picto='')\n{\n\t$out=\"\\n\".'<div class=\"tabs\">'.\"\\n\";\n\n\t// Affichage titre\n\tif (! empty($title))\n\t{\n\t\t$limittitle=30;\n\t\t$out.='<a class=\"tabTitle\">';\n\t\tif ($picto) $out.=img_object('',$picto).' ';\n\t\t$out.=dol_trunc($title,$limittitle);\n\t\t$out.='</a>';\n\t}\n\n\t// Define max of key (max may be higher than sizeof because of hole due to module disabling some tabs).\n\t$maxkey=-1;\n\tif (is_array($links) && ! empty($links))\n\t{\n\t\t$keys=array_keys($links);\n\t\tif (count($keys)) $maxkey=max($keys);\n\t}\n\n\t// Show tabs\n\tfor ($i = 0 ; $i <= $maxkey ; $i++)\n\t{\n\t\tif (isset($links[$i][2]) && $links[$i][2] == 'image')\n\t\t{\n\t\t\tif (!empty($links[$i][0]))\n\t\t\t{\n\t\t\t\t$out.='<a class=\"tabimage\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$out.='<span class=\"tabspan\">'.$links[$i][1].'</span>'.\"\\n\";\n\t\t\t}\n\t\t}\n\t\telse if (! empty($links[$i][1]))\n\t\t{\n\t\t\t//print \"x $i $active \".$links[$i][2].\" z\";\n\t\t\tif ((is_numeric($active) && $i == $active)\n\t\t\t|| (! is_numeric($active) && $active == $links[$i][2]))\n\t\t\t{\n\t\t\t\t$out.='<a id=\"active\" class=\"tab\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$out.='<a'.(! empty($links[$i][2])?' id=\"'.$links[$i][2].'\"':'').' class=\"tab\" href=\"'.$links[$i][0].'\">'.$links[$i][1].'</a>'.\"\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t$out.=\"</div>\\n\";\n\n\tif (! $notab) $out.=\"\\n\".'<div class=\"tabBar\">'.\"\\n\";\n\n\treturn $out;\n}\n\n/**\n *  Show tab footer of a card\n *\n *  @param\tint\t\t$notab       0=Add tab footer, 1=no tab footer\n *  @return\tvoid\n */\nfunction dol_fiche_end($notab=0)\n{\n\tprint dol_get_fiche_end($notab);\n}\n\n/**\n *\tReturn tab footer of a card\n *\n *\t@param  int\t\t$notab\t\t0=Add tab footer, 1=no tab footer\n *  @return\tvoid\n */\nfunction dol_get_fiche_end($notab=0)\n{\n\tif (! $notab) return \"\\n</div>\\n\";\n\telse return '';\n}\n\n/**\n *      Return a formated address (part address/zip/town/state) according to country rules\n *\n *      @param  Object\t\t$object         A company or contact object\n *      @return string          \t\t\tFormated string\n */\nfunction dol_format_address($object)\n{\n\t$ret='';\n\t$countriesusingstate=array('US','IN','GB');\n\n\t// Address\n\t$ret .= $object->address;\n\t// Zip/Town/State\n\tif (in_array($object->country_code,array('US')))   \t// US: title firstname name \\n address lines \\n town, state, zip \\n country\n\t{\n\t\t$ret .= ($ret ? \"\\n\" : '' ).$object->town;\n\t\tif ($object->state && in_array($object->country_code,$countriesusingstate))\n\t\t{\n\t\t\t$ret.=\", \".$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ', '.$object->zip;\n\t}\n\telse if (in_array($object->country_code,array('GB'))) // UK: title firstname name \\n address lines \\n town state \\n zip \\n country\n\t{\n\t\t$ret .= ($ret ? \"\\n\" : '' ).$object->town;\n\t\tif ($object->state && in_array($object->country_code,$countriesusingstate))\n\t\t{\n\t\t\t$ret.=\", \".$object->state;\n\t\t}\n\t\tif ($object->zip) $ret .= ($ret ? \"\\n\" : '' ).$object->zip;\n\t}\n\telse                                        \t\t// Other: title firstname name \\n address lines \\n zip town \\n country\n\t{\n\t\t$ret .= ($ret ? \"\\n\" : '' ).$object->zip;\n\t\t$ret .= ' '.$object->town;\n\t\tif ($object->state && in_array($object->country_code,$countriesusingstate))\n\t\t{\n\t\t\t$ret.=\", \".$object->state;\n\t\t}\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n *\tOutput date in a string format according to outputlangs (or langs if not defined).\n * \tReturn charset is always UTF-8, except if encodetoouput is defined. In this case charset is output charset\n *\n *\t@param\ttimestamp\t$time        \tGM Timestamps date\n *\t@param\tstring\t\t$format      \tOutput date format\n *\t\t\t\t\t\t\t\t\t\t\"%d %b %Y\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M\",\n *\t\t\t\t\t\t\t\t\t\t\"%d/%m/%Y %H:%M:%S\",\n *\t\t\t\t\t\t\t\t\t\t\"day\", \"daytext\", \"dayhour\", \"dayhourldap\", \"dayhourtext\", \"dayrfc\", \"dayhourrfc\"\n * \t@param\tstring\t\t$tzoutput\t\ttrue=output or 'gmt' => string is for Greenwich location\n * \t\t\t\t\t\t\t\t\t\tfalse or 'tzserver' => output string is for local PHP server TZ usage\n * \t\t\t\t\t\t\t\t\t\t'tzuser' => output string is for local browser TZ usage\n *\t@param\tTranlsate\t$outputlangs\tObject lang that contains language for text translation.\n *  @param  boolean\t\t$encodetooutput false=no convert into output pagecode\n * \t@return string      \t\t\t\tFormated date or '' if time is null\n *\n *  @see        dol_mktime, dol_stringtotime, dol_getdate\n */\nfunction dol_print_date($time,$format='',$tzoutput='tzserver',$outputlangs='',$encodetooutput=false)\n{\n\tglobal $conf,$langs;\n\n\t$to_gmt=false;\n\t$offsettz=$offsetdst=0;\n\tif ($tzoutput)\n\t{\n\t\t$to_gmt=true;\t// For backward compatibility\n\t\tif (is_string($tzoutput))\n\t\t{\n\t\t\tif ($tzoutput == 'tzserver')\n\t\t\t{\n\t\t\t\t$to_gmt=false;\n\t\t\t\t$offsettz=$offsetdst=0;\n\t\t\t}\n\t\t\telseif ($tzoutput == 'tzuser')\n\t\t\t{\n\t\t\t\t$to_gmt=true;\n\t\t\t\t$offsettz=(empty($_SESSION['dol_tz'])?0:$_SESSION['dol_tz'])*60*60;\n\t\t\t\t$offsetdst=(empty($_SESSION['dol_dst'])?0:$_SESSION['dol_dst'])*60*60;\n\t\t\t}\n\t\t\telseif ($tzoutput == 'tzcompany')\n\t\t\t{\n\t\t\t\t$to_gmt=false;\n\t\t\t\t$offsettz=$offsetdst=0;\t// TODO Define this and use it later\n\t\t\t}\n\t\t}\n\t}\n\n\tif (! is_object($outputlangs)) $outputlangs=$langs;\n\n\t// Si format non defini, on prend $conf->format_date_text_short sinon %Y-%m-%d %H:%M:%S\n\tif (! $format) $format=(isset($conf->format_date_text_short) ? $conf->format_date_text_short : '%Y-%m-%d %H:%M:%S');\n\n\t// Change predefined format into computer format. If found translation in lang file we use it, otherwise we use default.\n\tif ($format == 'day')               $format=($outputlangs->trans(\"FormatDateShort\")!=\"FormatDateShort\"?$outputlangs->trans(\"FormatDateShort\"):$conf->format_date_short);\n\tif ($format == 'hour')              $format=($outputlangs->trans(\"FormatHourShort\")!=\"FormatHourShort\"?$outputlangs->trans(\"FormatHourShort\"):$conf->format_hour_short);\n\tif ($format == 'hourduration')      $format=($outputlangs->trans(\"FormatHourShortDuration\")!=\"FormatHourShortDuration\"?$outputlangs->trans(\"FormatHourShortDuration\"):$conf->format_hour_short_duration);\n\tif ($format == 'daytext')           $format=($outputlangs->trans(\"FormatDateText\")!=\"FormatDateText\"?$outputlangs->trans(\"FormatDateText\"):$conf->format_date_text);\n\tif ($format == 'daytextshort')      $format=($outputlangs->trans(\"FormatDateTextShort\")!=\"FormatDateTextShort\"?$outputlangs->trans(\"FormatDateTextShort\"):$conf->format_date_text_short);\n\tif ($format == 'dayhour')           $format=($outputlangs->trans(\"FormatDateHourShort\")!=\"FormatDateHourShort\"?$outputlangs->trans(\"FormatDateHourShort\"):$conf->format_date_hour_short);\n\tif ($format == 'dayhourtext')       $format=($outputlangs->trans(\"FormatDateHourText\")!=\"FormatDateHourText\"?$outputlangs->trans(\"FormatDateHourText\"):$conf->format_date_hour_text);\n\tif ($format == 'dayhourtextshort')  $format=($outputlangs->trans(\"FormatDateHourTextShort\")!=\"FormatDateHourTextShort\"?$outputlangs->trans(\"FormatDateHourTextShort\"):$conf->format_date_hour_text_short);\n\n\t// Format not sensitive to language\n\tif ($format == 'dayhourlog')        $format='%Y%m%d%H%M%S';\n\tif ($format == 'dayhourldap')       $format='%Y%m%d%H%M%SZ';\n\tif ($format == 'dayhourxcard')      $format='%Y%m%dT%H%M%SZ';\n\tif ($format == 'dayxcard')          $format='%Y%m%d';\n\tif ($format == 'dayrfc')            $format='%Y-%m-%d';             // DATE_RFC3339\n\tif ($format == 'dayhourrfc')        $format='%Y-%m-%dT%H:%M:%SZ';   // DATETIME RFC3339\n\n\t// If date undefined or \"\", we return \"\"\n\tif (dol_strlen($time) == 0) return '';\t\t// $time=0 allowed (it means 01/01/1970 00:00:00)\n\n\t//print 'x'.$time;\n\n\tif (preg_match('/%b/i',$format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format=str_replace('%b','__b__',$format);\n\t\t$format=str_replace('%B','__B__',$format);\n\t}\n\tif (preg_match('/%a/i',$format))\t\t// There is some text to translate\n\t{\n\t\t// We inhibate translation to text made by strftime functions. We will use trans instead later.\n\t\t$format=str_replace('%a','__a__',$format);\n\t\t$format=str_replace('%A','__A__',$format);\n\t}\n\n\t// Analyze date (deprecated)   Ex: 1970-01-01, 1970-01-01 01:00:00, 19700101010000\n\tif (preg_match('/^([0-9]+)\\-([0-9]+)\\-([0-9]+) ?([0-9]+)?:?([0-9]+)?:?([0-9]+)?/i',$time,$reg)\n\t|| preg_match('/^([0-9][0-9][0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])([0-9][0-9])$/i',$time,$reg))\n\t{\n\t\t// This part of code should not be used.\n\t\tdol_syslog(\"Functions.lib::dol_print_date function call with deprecated value of time in page \".$_SERVER[\"PHP_SELF\"], LOG_WARNING);\n\t\t// Date has format 'YYYY-MM-DD' or 'YYYY-MM-DD HH:MM:SS' or 'YYYYMMDDHHMMSS'\n\t\t$syear\t= (! empty($reg[1]) ? $reg[1] : '');\n\t\t$smonth\t= (! empty($reg[2]) ? $reg[2] : '');\n\t\t$sday\t= (! empty($reg[3]) ? $reg[3] : '');\n\t\t$shour\t= (! empty($reg[4]) ? $reg[4] : '');\n\t\t$smin\t= (! empty($reg[5]) ? $reg[5] : '');\n\t\t$ssec\t= (! empty($reg[6]) ? $reg[6] : '');\n\n\t\t$time=dol_mktime($shour,$smin,$ssec,$smonth,$sday,$syear,true);\n\t\t$ret=adodb_strftime($format,$time+$offsettz+$offsetdst,$to_gmt);\n\t}\n\telse\n\t{\n\t\t// Date is a timestamps\n\t\tif ($time < 100000000000)\t// Protection against bad date values\n\t\t{\n\t\t\t$ret=adodb_strftime($format,$time+$offsettz+$offsetdst,$to_gmt);\n\t\t}\n\t\telse $ret='Bad value '.$time.' for date';\n\t}\n\n\tif (preg_match('/__b__/i',$format))\n\t{\n\t\t// Here ret is string in PHP setup language (strftime was used). Now we convert to $outputlangs.\n\t\t$month=adodb_strftime('%m',$time+$offsettz+$offsetdst);\n\t\tif ($encodetooutput)\n\t\t{\n\t\t\t$monthtext=$outputlangs->transnoentities('Month'.$month);\n\t\t\t$monthtextshort=$outputlangs->transnoentities('MonthShort'.$month);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$monthtext=$outputlangs->transnoentitiesnoconv('Month'.$month);\n\t\t\t$monthtextshort=$outputlangs->transnoentitiesnoconv('MonthShort'.$month);\n\t\t}\n\t\t//print 'monthtext='.$monthtext.' monthtextshort='.$monthtextshort;\n\t\t$ret=str_replace('__b__',$monthtextshort,$ret);\n\t\t$ret=str_replace('__B__',$monthtext,$ret);\n\t\t//print 'x'.$outputlangs->charset_output.'-'.$ret.'x';\n\t\t//return $ret;\n\t}\n\tif (preg_match('/__a__/i',$format))\n\t{\n\t\t$w=adodb_strftime('%w',$time+$offsettz+$offsetdst);\n\t\t$dayweek=$outputlangs->transnoentitiesnoconv('Day'.$w);\n\t\t$ret=str_replace('__A__',$dayweek,$ret);\n\t\t$ret=str_replace('__a__',dol_substr($dayweek,0,3),$ret);\n\t}\n\n\treturn $ret;\n}\n\n\n/**\n *\tReturn an array with locale date info.\n *  PHP getdate is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *  WARNING: This function always use PHP server timezone to return locale informations.\n *  Usage must be avoid.\n *\n *\t@param\ttimestamp\t$timestamp      Timestamp\n *\t@param\tboolean\t\t$fast           Fast mode\n *\t@return\tarray\t\t\t\t\t\tArray of informations\n *\t\t\t\t\t\t\t\t\t\tIf no fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'wday' => $dow,\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'weekday' => gmdate('l',$_day_power*(3+$dow)),\n *\t\t\t\t\t\t\t\t\t\t'month' => gmdate('F',mktime(0,0,0,$month,2,1971)),\n *\t\t\t\t\t\t\t\t\t\tIf fast mode:\n *\t\t\t\t\t\t\t\t\t\t'seconds' => $secs,\n *\t\t\t\t\t\t\t\t\t\t'minutes' => $min,\n *\t\t\t\t\t\t\t\t\t\t'hours' => $hour,\n *\t\t\t\t\t\t\t\t\t\t'mday' => $day,\n *\t\t\t\t\t\t\t\t\t\t'mon' => $month,\n *\t\t\t\t\t\t\t\t\t\t'year' => $year,\n *\t\t\t\t\t\t\t\t\t\t'yday' => floor($secsInYear/$_day_power),\n *\t\t\t\t\t\t\t\t\t\t'leap' => $leaf,\n *\t\t\t\t\t\t\t\t\t\t'ndays' => $ndays\n * \t@see \t\t\t\t\t\t\t\tdol_print_date, dol_stringtotime, dol_mktime\n */\nfunction dol_getdate($timestamp,$fast=false)\n{\n\t$usealternatemethod=false;\n\tif ($timestamp <= 0) $usealternatemethod=true;\t\t\t\t// <= 1970\n\tif ($timestamp >= 2145913200) $usealternatemethod=true;\t\t// >= 2038\n\n\tif ($usealternatemethod)\n\t{\n\t\t$arrayinfo=adodb_getdate($timestamp,$fast);\n\t}\n\telse\n\t{\n\t\t$arrayinfo=getdate($timestamp);\n\t}\n\n\treturn $arrayinfo;\n}\n\n/**\n *\tReturn a timestamp date built from detailed informations (by default a local PHP server timestamp)\n * \tReplace function mktime not available under Windows if year < 1970\n *\tPHP mktime is restricted to the years 1901-2038 on Unix and 1970-2038 on Windows\n *\n * \t@param\tint\t\t\t$hour\t\t\tHour\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$minute\t\t\tMinute\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$second\t\t\tSecond\t(can be -1 for undefined)\n *\t@param\tint\t\t\t$month\t\t\tMonth (1 to 12)\n *\t@param\tint\t\t\t$day\t\t\tDay (1 to 31)\n *\t@param\tint\t\t\t$year\t\t\tYear\n *\t@param\tint\t\t\t$gm\t\t\t\t1=Input informations are GMT values, otherwise local to server TZ\n *\t@param\tint\t\t\t$check\t\t\t0=No check on parameters (Can use day 32, etc...)\n *\t@return\ttimestamp\t\t\t\t\tDate as a timestamp, '' if error\n * \t@see \t\t\t\t\t\t\t\tdol_print_date, dol_stringtotime, dol_getdate\n */\nfunction dol_mktime($hour,$minute,$second,$month,$day,$year,$gm=false,$check=1)\n{\n\tglobal $conf;\n\t//print \"- \".$hour.\",\".$minute.\",\".$second.\",\".$month.\",\".$day.\",\".$year.\",\".$_SERVER[\"WINDIR\"].\" -\";\n\n\t// Clean parameters\n\tif ($hour   == -1 || empty($hour)) $hour=0;\n\tif ($minute == -1 || empty($minute)) $minute=0;\n\tif ($second == -1 || empty($second)) $second=0;\n\n\t// Check parameters\n\tif ($check)\n\t{\n\t\tif (! $month || ! $day)  return '';\n\t\tif ($day   > 31) return '';\n\t\tif ($month > 12) return '';\n\t\tif ($hour  < 0 || $hour   > 24) return '';\n\t\tif ($minute< 0 || $minute > 60) return '';\n\t\tif ($second< 0 || $second > 60) return '';\n\t}\n\n\tif (method_exists('DateTime','getTimestamp') && empty($conf->global->MAIN_OLD_DATE))\n\t{\n\t\tif (empty($gm)) $localtz = new DateTimeZone(date_default_timezone_get());\n\t\telse $localtz = new DateTimeZone('UTC');\n\t\t$dt = new DateTime(null,$localtz);\n\t\t$dt->setDate($year,$month,$day);\n\t\t$dt->setTime((int) $hour, (int) $minute, (int) $second);\n\t\t$date=$dt->getTimestamp();\n\t}\n\telse\n\t{\n\t\t$usealternatemethod=false;\n\t\tif ($year <= 1970) $usealternatemethod=true;\t\t// <= 1970\n\t\tif ($year >= 2038) $usealternatemethod=true;\t\t// >= 2038\n\n\t\tif ($usealternatemethod || $gm)\t// Si time gm, seule adodb peut convertir\n\t\t{\n\t\t\t$date=adodb_mktime($hour,$minute,$second,$month,$day,$year,0,$gm);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$date=mktime($hour,$minute,$second,$month,$day,$year);\n\t\t}\n\t}\n\treturn $date;\n}\n\n\n/**\n *\tReturn date for now. We should always use this function without parameters (that means GMT time)\n *\n * \t@param\tstring\t\t$mode\t'gmt' => we return GMT timestamp,\n * \t\t\t\t\t\t\t\t'tzserver' => we add the PHP server timezone\n *  \t\t\t\t\t\t\t'tzref' => we add the company timezone\n * \t\t\t\t\t\t\t\t'tzuser' => we add the user timezone\n *\t@return timestamp   $date\tTimestamp\n */\nfunction dol_now($mode='gmt')\n{\n\t// Note that gmmktime and mktime return same value (GMT) whithout parameters\n\t//if ($mode == 'gmt') $ret=gmmktime(); // Strict Standards: gmmktime(): You should be using the time() function instead\n\tif ($mode == 'gmt') $ret=time();\t// Time for now at greenwich.\n\telse if ($mode == 'tzserver')\t\t// Time for now with PHP server timezone added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond=getServerTimeZoneInt('now');    // Contains tz+dayling saving time\n\t\t$ret=dol_now('gmt')+($tzsecond*3600);\n\t}\n\t/*else if ($mode == 'tzref')\t\t\t\t// Time for now with parent company timezone is added\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\n\t\t$tzsecond=getParentCompanyTimeZoneInt();    // Contains tz+dayling saving time\n\t\t$ret=dol_now('gmt')+($tzsecond*3600);\n\t}*/\n\telse if ($mode == 'tzuser')\t\t\t\t// Time for now with user timezone is added\n\t{\n\t\t//print 'eeee'.time().'-'.mktime().'-'.gmmktime();\n\t\t$offsettz=(empty($_SESSION['dol_tz'])?0:$_SESSION['dol_tz'])*60*60;\n\t\t$offsetdst=(empty($_SESSION['dol_dst'])?0:$_SESSION['dol_dst'])*60*60;\n\t\t$ret=dol_now('gmt')+($offsettz+$offsetdst);\n\t}\n\treturn $ret;\n}\n\n\n/**\n * Return string with formated size\n *\n * @param\tint\t\t$size\t\tSize to print\n * @param\tint\t\t$shortvalue\tTell if we want long value to use another unit (Ex: 1.5Kb instead of 1500b)\n * @param\tint\t\t$shortunit\tUse short value of size unit\n * @return\tstring\t\t\t\tLink\n */\nfunction dol_print_size($size,$shortvalue=0,$shortunit=0)\n{\n\tglobal $langs;\n\t$level=1024;\n\n\t// Set value text\n\tif (empty($shortvalue) || $size < ($level*10))\n\t{\n\t\t$ret=$size;\n\t\t$textunitshort=$langs->trans(\"b\");\n\t\t$textunitlong=$langs->trans(\"Bytes\");\n\t}\n\telse\n\t{\n\t\t$ret=round($size/$level,0);\n\t\t$textunitshort=$langs->trans(\"Kb\");\n\t\t$textunitlong=$langs->trans(\"KiloBytes\");\n\t}\n\t// Use long or short text unit\n\tif (empty($shortunit)) { $ret.=' '.$textunitlong; }\n\telse { $ret.=' '.$textunitshort; }\n\n\treturn $ret;\n}\n\n/**\n * Show Url link\n *\n * @param\tstring\t\t$url\t\tUrl to show\n * @param\tstring\t\t$target\t\tTarget for link\n * @param\tint\t\t\t$max\t\tMax number of characters to show\n * @return\tstring\t\t\t\t\tHTML Link\n */\nfunction dol_print_url($url,$target='_blank',$max=32)\n{\n\tif (empty($url)) return '';\n\n\t$link='<a href=\"';\n\tif (! preg_match('/^http/i',$url)) $link.='http://';\n\t$link.=$url;\n\tif ($target) $link.='\" target=\"'.$target.'\">';\n\tif (! preg_match('/^http/i',$url)) $link.='http://';\n\t$link.=dol_trunc($url,$max);\n\t$link.='</a>';\n\treturn $link;\n}\n\n/**\n * Show EMail link\n *\n * @param\tstring\t\t$email\t\t\tEMail to show (only email, without 'Name of recipient' before)\n * @param \tint\t\t\t$cid \t\t\tId of contact if known\n * @param \tint\t\t\t$socid \t\t\tId of third party if known\n * @param \tint\t\t\t$addlink\t\t0=no link to create action\n * @param\tint\t\t\t$max\t\t\tMax number of characters to show\n * @param\tint\t\t\t$showinvalid\tShow warning if syntax email is wrong\n * @return\tstring\t\t\t\t\t\tHTML Link\n */\nfunction dol_print_email($email,$cid=0,$socid=0,$addlink=0,$max=64,$showinvalid=1)\n{\n\tglobal $conf,$user,$langs;\n\n\t$newemail=$email;\n\n\tif (empty($email)) return '&nbsp;';\n\n\tif (! empty($addlink))\n\t{\n\t\t$newemail='<a href=\"';\n\t\tif (! preg_match('/^mailto:/i',$email)) $newemail.='mailto:';\n\t\t$newemail.=$email;\n\t\t$newemail.='\">';\n\t\t$newemail.=dol_trunc($email,$max);\n\t\t$newemail.='</a>';\n\t\tif ($showinvalid && ! isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail.=img_warning($langs->trans(\"ErrorBadEMail\",$email));\n\t\t}\n\n\t\tif (($cid || $socid) && ! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type='AC_EMAIL'; $link='';\n\t\t\tif (! empty($conf->global->AGENDA_ADDACTIONFOREMAIL)) $link='<a href=\"'.DOL_URL_ROOT.'/comm/action/fiche.php?action=create&amp;backtopage=1&amp;actioncode='.$type.'&amp;contactid='.$cid.'&amp;socid='.$socid.'\">'.img_object($langs->trans(\"AddAction\"),\"calendar\").'</a>';\n\t\t\t$newemail='<table class=\"nobordernopadding\"><tr><td>'.$newemail.' </td><td>&nbsp;'.$link.'</td></tr></table>';\n\t\t}\n\t}\n\telse\n\t{\n\t\tif ($showinvalid && ! isValidEmail($email))\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$newemail.=img_warning($langs->trans(\"ErrorBadEMail\",$email));\n\t\t}\n\t}\n\treturn $newemail;\n}\n\n/**\n * \tFormat phone numbers according to country\n *\n * \t@param\tstring\t$phone \t\tPhone number to format\n * \t@param \tstring\t$country \tCountry code to use for formatting\n * \t@param \tint\t\t$cid \t\tId of contact if known\n * \t@param \tint\t\t$socid \t\tId of third party if known\n * \t@param \tint\t\t$addlink\t0=no link to create action\n * \t@param \tstring\t$separ \t\tseparation between numbers for a better visibility example : xx.xx.xx.xx.xx\n * \t@return string \t\t\t\tFormated phone number\n */\nfunction dol_print_phone($phone,$country=\"FR\",$cid=0,$socid=0,$addlink=0,$separ=\"&nbsp;\")\n{\n\tglobal $conf,$user,$langs;\n\n\t// Clean phone parameter\n\t$phone = preg_replace(\"/[\\s.-]/\",\"\",trim($phone));\n\tif (empty($phone)) { return ''; }\n\n\t$newphone=$phone;\n\tif (strtoupper($country) == \"FR\")\n\t{\n\t\t// France\n\t\tif (dol_strlen($phone) == 10) {\n\t\t\t$newphone=substr($newphone,0,2).$separ.substr($newphone,2,2).$separ.substr($newphone,4,2).$separ.substr($newphone,6,2).$separ.substr($newphone,8,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 7)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,3).$separ.substr($newphone,3,2).$separ.substr($newphone,5,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 9)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,2).$separ.substr($newphone,2,3).$separ.substr($newphone,5,2).$separ.substr($newphone,7,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 11)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,3).$separ.substr($newphone,3,2).$separ.substr($newphone,5,2).$separ.substr($newphone,7,2).$separ.substr($newphone,9,2);\n\t\t}\n\t\telseif (dol_strlen($newphone) == 12)\n\t\t{\n\t\t\t$newphone=substr($newphone,0,4).$separ.substr($newphone,4,2).$separ.substr($newphone,6,2).$separ.substr($newphone,8,2).$separ.substr($newphone,10,2);\n\t\t}\n\t}\n\n\tif (! empty($addlink))\n\t{\n\t\tif (! empty($conf->clicktodial->enabled) && $addlink == 'AC_TEL')\n\t\t{\n\t\t\tif (empty($user->clicktodial_loaded)) $user->fetch_clicktodial();\n\n\t\t\tif (empty($conf->global->CLICKTODIAL_URL)) $urlmask='ErrorClickToDialModuleNotConfigured';\n\t\t\telse $urlmask=$conf->global->CLICKTODIAL_URL;\n\t\t\t$clicktodial_poste=(! empty($user->clicktodial_poste)?urlencode($user->clicktodial_poste):'');\n\t\t\t$clicktodial_login=(! empty($user->clicktodial_login)?urlencode($user->clicktodial_login):'');\n\t\t\t$clicktodial_password=(! empty($user->clicktodial_password)?urlencode($user->clicktodial_password):'');\n\t\t\t// This line is for backward compatibility\n\t\t\t$url = sprintf($urlmask, urlencode($phone), $clicktodial_poste, $clicktodial_login, $clicktodial_password);\n\t\t\t// Thoose lines are for substitution\n\t\t\t$substitarray=array('__PHONEFROM__'=>$clicktodial_poste,\n\t\t\t\t\t\t\t\t'__PHONETO__'=>urlencode($phone),\n\t\t\t\t\t\t\t\t'__LOGIN__'=>$clicktodial_login,\n\t\t\t\t\t\t\t\t'__PASS__'=>$clicktodial_password);\n\t\t\t$url = make_substitutions($url, $substitarray);\n\t\t\t$newphonesav=$newphone;\n\t\t\t$newphone ='<a href=\"'.$url.'\"';\n\t\t\tif (! empty($conf->global->CLICKTODIAL_FORCENEWTARGET)) $newphone.=' target=\"_blank\"';\n\t\t\t$newphone.='>'.$newphonesav.'</a>';\n\t\t}\n\n\t\t//if (($cid || $socid) && ! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\tif (! empty($conf->agenda->enabled) && $user->rights->agenda->myactions->create)\n\t\t{\n\t\t\t$type='AC_TEL'; $link='';\n\t\t\tif ($addlink == 'AC_FAX') $type='AC_FAX';\n\t\t\tif (! empty($conf->global->AGENDA_ADDACTIONFORPHONE)) $link='<a href=\"'.DOL_URL_ROOT.'/comm/action/fiche.php?action=create&amp;backtopage=1&amp;actioncode='.$type.($cid?'&amp;contactid='.$cid:'').($socid?'&amp;socid='.$socid:'').'\">'.img_object($langs->trans(\"AddAction\"),\"calendar\").'</a>';\n\t\t\t$newphone='<table class=\"nobordernopadding\"><tr><td>'.$newphone.' </td><td>&nbsp;'.$link.'</td></tr></table>';\n\t\t}\n\t}\n\n\treturn $newphone;\n}\n\n/**\n * \tReturn an IP formated to be shown on screen\n *\n * \t@param\tstring\t$ip\t\t\tIP\n * \t@param\tint\t\t$mode\t\t0=return IP + country/flag, 1=return only country/flag, 2=return only IP\n * \t@return string \t\t\t\tFormated IP, with country if GeoIP module is enabled\n */\nfunction dol_print_ip($ip,$mode=0)\n{\n\tglobal $conf,$langs;\n\n\t$ret='';\n\n\tif (empty($mode)) $ret.=$ip;\n\n\tif (! empty($conf->geoipmaxmind->enabled) && $mode != 2)\n\t{\n\t\t$datafile=$conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='E:\\Mes Sites\\Web\\Admin1\\awstats\\maxmind\\GeoIP.dat';    Note that this must be downloaded datafile (not same than datafile provided with ubuntu packages)\n\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip=new DolGeoIP('country',$datafile);\n\t\t//print 'ip='.$ip.' databaseType='.$geoip->gi->databaseType.\" GEOIP_CITY_EDITION_REV1=\".GEOIP_CITY_EDITION_REV1.\"\\n\";\n\t\t//print \"geoip_country_id_by_addr=\".geoip_country_id_by_addr($geoip->gi,$ip).\"\\n\";\n\t\t$countrycode=$geoip->getCountryCodeFromIP($ip);\n\t\tif ($countrycode)\t// If success, countrycode is us, fr, ...\n\t\t{\n\t\t\tif (file_exists(DOL_DOCUMENT_ROOT.'/theme/common/flags/'.$countrycode.'.png'))\n\t\t\t{\n\t\t\t\t$ret.=' '.img_picto($countrycode.' '.$langs->trans(\"AccordingToGeoIPDatabase\"),DOL_URL_ROOT.'/theme/common/flags/'.$countrycode.'.png','',1);\n\t\t\t}\n\t\t\telse $ret.=' ('.$countrycode.')';\n\t\t}\n\t}\n\n\treturn $ret;\n}\n\n/**\n *  Return country code for current user.\n *  If software is used inside a local network, detection may fails (we need a public ip)\n *\n *  @return     string      Country code (fr, es, it, us, ...)\n */\nfunction dol_user_country()\n{\n\tglobal $conf,$langs,$user;\n\n\t//$ret=$user->xxx;\n\t$ret='';\n\tif (! empty($conf->geoipmaxmind->enabled))\n\t{\n\t\t$ip=$_SERVER[\"REMOTE_ADDR\"];\n\t\t$datafile=$conf->global->GEOIPMAXMIND_COUNTRY_DATAFILE;\n\t\t//$ip='24.24.24.24';\n\t\t//$datafile='E:\\Mes Sites\\Web\\Admin1\\awstats\\maxmind\\GeoIP.dat';\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/class/dolgeoip.class.php';\n\t\t$geoip=new DolGeoIP('country',$datafile);\n\t\t$countrycode=$geoip->getCountryCodeFromIP($ip);\n\t\t$ret=$countrycode;\n\t}\n\treturn $ret;\n}\n\n/**\n *  Format address string\n *\n *  @param\tstring\t$address     Address\n *  @param  int\t\t$htmlid      Html ID (for example 'gmap')\n *  @param  int\t\t$mode        thirdparty|contact|member|other\n *  @param  int\t\t$id          Id of object\n *  @return void\n */\nfunction dol_print_address($address, $htmlid, $mode, $id)\n{\n\tglobal $conf,$user,$langs;\n\n\tif ($address)\n\t{\n\t\tprint nl2br($address);\n\t\t$showgmap=$showomap=0;\n\t\tif ($mode=='thirdparty' && ! empty($conf->google->enabled) && ! empty($conf->global->GOOGLE_ENABLE_GMAPS)) $showgmap=1;\n\t\tif ($mode=='contact' && ! empty($conf->google->enabled) && ! empty($conf->global->GOOGLE_ENABLE_GMAPS_CONTACTS)) $showgmap=1;\n\t\tif ($mode=='member' && ! empty($conf->google->enabled) && ! empty($conf->global->GOOGLE_ENABLE_GMAPS_MEMBERS)) $showgmap=1;\n\t\tif ($mode=='thirdparty' && ! empty($conf->openstreetmap->enabled) && ! empty($conf->global->OPENSTREETMAP_ENABLE_MAPS)) $showomap=1;\n\t\tif ($mode=='contact' && ! empty($conf->openstreetmap->enabled) && ! empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_CONTACTS)) $showomap=1;\n\t\tif ($mode=='member' && ! empty($conf->openstreetmap->enabled) && ! empty($conf->global->OPENSTREETMAP_ENABLE_MAPS_MEMBERS)) $showomap=1;\n\n\t\t// TODO Add a hook here\n\t\tif ($showgmap)\n\t\t{\n\t\t\t$url=dol_buildpath('/google/gmaps.php?mode='.$mode.'&id='.$id,1);\n\t\t\tprint ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'\" border=\"0\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t}\n\t\tif ($showomap)\n\t\t{\n\t\t\t$url=dol_buildpath('/openstreetmap/maps.php?mode='.$mode.'&id='.$id,1);\n\t\t\tprint ' <a href=\"'.$url.'\" target=\"_gmaps\"><img id=\"'.$htmlid.'_openstreetmap\" border=\"0\" src=\"'.DOL_URL_ROOT.'/theme/common/gmap.png\"></a>';\n\t\t}\n\t}\n}\n\n\n/**\n *\tReturn true if email syntax is ok\n *\n *\t@param\t    string\t\t$address    email (Ex: \"toto@titi.com\", \"John Do <johndo@titi.com>\")\n *\t@return     boolean     \t\t\ttrue if email syntax is OK, false if KO or empty string\n */\nfunction isValidEmail($address)\n{\n\tif (preg_match(\"/.*<(.+)>/i\", $address, $regs)) {\n\t\t$address = $regs[1];\n\t}\n\t// 2 letters domains extensions are for countries\n\t// 3 letters domains extensions: biz|com|edu|gov|int|mil|net|org|pro|...\n\tif (preg_match(\"/^[^@\\s\\t]+@([a-zA-Z0-9\\-]+\\.)+([a-zA-Z0-9\\-]{2,3}|asso|aero|coop|info|name)\\$/i\",$address))\n\t{\n\t\treturn true;\n\t}\n\telse\n\t{\n\t\treturn false;\n\t}\n}\n\n/**\n *  Return true if phone number syntax is ok\n *\n *  @param\tstring\t\t$phone\t\tphone (Ex: \"0601010101\")\n *  @return boolean     \t\t\ttrue if phone syntax is OK, false if KO or empty string\n */\nfunction isValidPhone($phone)\n{\n\treturn true;\n}\n\n\n/**\n * Make a strlen call. Works even if mbstring module not enabled\n *\n * @param   string\t\t$string\t\t\t\tString to calculate length\n * @param   string\t\t$stringencoding\t\tEncoding of string\n * @return  int\t\t\t\t\t\t\t\tLength of string\n */\nfunction dol_strlen($string,$stringencoding='UTF-8')\n{\n\tif (function_exists('mb_strlen')) return mb_strlen($string,$stringencoding);\n\telse return strlen($string);\n}\n\n/**\n * Make a substring. Works even in mbstring module is not enabled.\n *\n * @param\tstring\t$string\t\t\t\tString to scan\n * @param\tstring\t$start\t\t\t\tStart position\n * @param\tint\t\t$length\t\t\t\tLength\n * @param   string\t$stringencoding\t\tPage code used for input string encoding\n * @return  string\t\t\t\t\t\tsubstring\n */\nfunction dol_substr($string,$start,$length,$stringencoding='')\n{\n\tglobal $langs;\n\n\tif (empty($stringencoding)) $stringencoding=$langs->charset_output;\n\n\t$ret='';\n\tif (function_exists('mb_substr'))\n\t{\n\t\t$ret=mb_substr($string,$start,$length,$stringencoding);\n\t}\n\telse\n\t{\n\t\t$ret=substr($string,$start,$length);\n\t}\n\treturn $ret;\n}\n\n\n/**\n *  Show a javascript graph.\n *  Do not use this function anymore. Use DolGraph class instead.\n *\n *  @param\t\tstring\t$htmlid\t\t\tHtml id name\n *  @param\t\tint\t\t$width\t\t\tWidth in pixel\n *  @param\t\tint\t\t$height\t\t\tHeight in pixel\n *  @param\t\tarray\t$data\t\t\tData array\n *  @param\t\tint\t\t$showlegend\t\t1 to show legend, 0 otherwise\n *  @param\t\tstring\t$type\t\t\tType of graph ('pie', 'barline')\n *  @param\t\tint\t\t$showpercent\tShow percent (with type='pie' only)\n *  @param\t\tstring\t$url\t\t\tParam to add an url to click values\n *  @return\t\tvoid\n *  @deprecated\n */\nfunction dol_print_graph($htmlid,$width,$height,$data,$showlegend=0,$type='pie',$showpercent=0,$url='')\n{\n\tglobal $conf,$langs;\n\tglobal $theme_datacolor;    // To have var kept when function is called several times\n\tif (empty($conf->use_javascript_ajax)) return;\n\t$jsgraphlib='flot';\n\t$datacolor=array();\n\n\t// Load colors of theme into $datacolor array\n\t$color_file = DOL_DOCUMENT_ROOT.\"/theme/\".$conf->theme.\"/graph-color.php\";\n\tif (is_readable($color_file))\n\t{\n\t\tinclude_once $color_file;\n\t\tif (isset($theme_datacolor))\n\t\t{\n\t\t\t$datacolor=array();\n\t\t\tforeach($theme_datacolor as $val)\n\t\t\t{\n\t\t\t\t$datacolor[]=\"#\".sprintf(\"%02x\",$val[0]).sprintf(\"%02x\",$val[1]).sprintf(\"%02x\",$val[2]);\n\t\t\t}\n\t\t}\n\t}\n\tprint '<div id=\"'.$htmlid.'\" style=\"width:'.$width.'px;height:'.$height.'px;\"></div>';\n\n\t// We use Flot js lib\n\tif ($jsgraphlib == 'flot')\n\t{\n\t\tif ($type == 'pie')\n\t\t{\n\t\t\t// data is   array('series'=>array(serie1,serie2,...),\n\t\t\t//                 'seriestype'=>array('bar','line',...),\n\t\t\t//                 'seriescolor'=>array(0=>'#999999',1=>'#999999',...)\n\t\t\t//                 'xlabel'=>array(0=>labelx1,1=>labelx2,...));\n\t\t\t// serieX is array('label'=>'label', data=>val)\n\t\t\tprint '\n\t\t\t<script type=\"text/javascript\">\n\t\t\t$(function () {\n\t\t\t\tvar data = '.json_encode($data['series']).';\n\n\t\t\t\tfunction plotWithOptions() {\n\t\t\t\t\t$.plot($(\"#'.$htmlid.'\"), data,\n\t\t\t\t\t{\n\t\t\t\t\t\tseries: {\n\t\t\t\t\t\t\tpie: {\n\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\tradius: 3/4,\n\t\t\t\t\t\t\t\tlabel: {\n\t\t\t\t\t\t\t\t\tshow: true,\n\t\t\t\t\t\t\t\t\tradius: 3/4,\n\t\t\t\t\t\t\t\t\tformatter: function(label, series) {\n\t\t\t\t\t\t\t\t\t\tvar percent=Math.round(series.percent);\n\t\t\t\t\t\t\t\t\t\tvar number=series.data[0][1];\n\t\t\t\t\t\t\t\t\t\treturn \\'';\n\t\t\t\t\t\t\t\t\t\tprint '<div style=\"font-size:8pt;text-align:center;padding:2px;color:white;\">';\n\t\t\t\t\t\t\t\t\t\tif ($url) print '<a style=\"color: #FFFFFF;\" border=\"0\" href=\"'.$url.'=\">';\n\t\t\t\t\t\t\t\t\t\tprint '\\'+'.($showlegend?'number':'label+\\'<br/>\\'+number');\n\t\t\t\t\t\t\t\t\t\tif (! empty($showpercent)) print '+\\'<br/>\\'+percent+\\'%\\'';\n\t\t\t\t\t\t\t\t\t\tprint '+\\'';\n\t\t\t\t\t\t\t\t\t\tif ($url) print '</a>';\n\t\t\t\t\t\t\t\t\t\tprint '</div>\\';\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbackground: {\n\t\t\t\t\t\t\t\t\t\topacity: 0.5,\n\t\t\t\t\t\t\t\t\t\tcolor: \\'#000000\\'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpan: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},';\n\t\t\t\t\t\tif (count($datacolor))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint 'colors: '.(! empty($data['seriescolor']) ? json_encode($data['seriescolor']) : json_encode($datacolor)).',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint 'legend: {show: '.($showlegend?'true':'false').', position: \\'ne\\' }\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tplotWithOptions();\n\t\t\t});\n\t\t\t</script>';\n\t\t}\n\t\telse if ($type == 'barline')\n\t\t{\n\t\t\t// data is   array('series'=>array(serie1,serie2,...),\n\t\t\t//                 'seriestype'=>array('bar','line',...),\n\t\t\t//                 'seriescolor'=>array(0=>'#999999',1=>'#999999',...)\n\t\t\t//                 'xlabel'=>array(0=>labelx1,1=>labelx2,...));\n\t\t\t// serieX is array('label'=>'label', data=>array(0=>y1,1=>y2,...)) with same nb of value than into xlabel\n\t\t\tprint '\n\t\t\t<script type=\"text/javascript\">\n\t\t\t$(function () {\n\t\t\t\tvar data = [';\n\t\t\t\t$i=0; $outputserie=0;\n\t\t\t\tforeach($data['series'] as $serie)\n\t\t\t\t{\n\t\t\t\t\tif ($data['seriestype'][$i]=='line') { $i++; continue; };\n\t\t\t\t\tif ($outputserie > 0) print ',';\n\t\t\t\t\tprint '{ bars: { stack: 0, show: true, barWidth: 0.9, align: \\'center\\' }, label: \\''.dol_escape_js($serie['label']).'\\', data: '.json_encode($serie['data']).'}'.\"\\n\";\n\t\t\t\t\t$outputserie++; $i++;\n\t\t\t\t}\n\t\t\t\tif ($outputserie) print ', ';\n\t\t\t\t//print '];\n\t\t\t\t//var datalines = [';\n\t\t\t\t$i=0; $outputserie=0;\n\t\t\t\tforeach($data['series'] as $serie)\n\t\t\t\t{\n\t\t\t\t\tif (empty($data['seriestype'][$i]) || $data['seriestype'][$i]=='bar') { $i++; continue; };\n\t\t\t\t\tif ($outputserie > 0) print ',';\n\t\t\t\t\tprint '{ lines: { show: true }, label: \\''.dol_escape_js($serie['label']).'\\', data: '.json_encode($serie['data']).'}'.\"\\n\";\n\t\t\t\t\t$outputserie++; $i++;\n\t\t\t\t}\n\t\t\t\tprint '];\n\t\t\t\tvar dataticks = '.json_encode($data['xlabel']).'\n\n\t\t\t\tfunction plotWithOptions() {\n\t\t\t\t\t$.plot(jQuery(\"#'.$htmlid.'\"), data,\n\t\t\t\t\t{\n\t\t\t\t\t\tseries: {\n\t\t\t\t\t\t\tstack: 0\n\t\t\t\t\t\t},\n\t\t\t\t\t\tzoom: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},\n\t\t\t\t\t\tpan: {\n\t\t\t\t\t\t\tinteractive: true\n\t\t\t\t\t\t},';\n\t\t\t\t\t\tif (count($datacolor))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprint 'colors: '.json_encode($datacolor).',';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint 'legend: {show: '.($showlegend?'true':'false').'},\n\t\t\t\t\t\txaxis: {ticks: dataticks}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tplotWithOptions();\n\t\t\t});\n\t\t\t</script>';\n\t\t}\n\t\telse print 'BadValueForPArameterType';\n\t}\n}\n\n/**\n *\tTruncate a string to a particular length adding '...' if string larger than length.\n * \tIf length = max length+1, we do no truncate to avoid having just 1 char replaced with '...'.\n *  MAIN_DISABLE_TRUNC=1 can disable all truncings\n *\n *\t@param\tstring\t$string\t\t\t\tString to truncate\n *\t@param  int\t\t$size\t\t\t\tMax string size visible. 0 for no limit. finale string size can be 1 more (if size was max+1) or 3 more (if we added ...)\n *\t@param\tstring\t$trunc\t\t\t\tWhere to trunc: right, left, middle (size must be a 2 power), wrap\n * \t@param\tstring\t$stringencoding\t\tTell what is source string encoding\n *  @param\tint\t\t$nodot\t\t\t\tTruncation do not add ... after truncation. So it's an exact truncation.\n *\t@return string\t\t\t\t\t\tTruncated string\n */\nfunction dol_trunc($string,$size=40,$trunc='right',$stringencoding='UTF-8',$nodot=0)\n{\n\tglobal $conf;\n\n\tif ($size==0 || ! empty($conf->global->MAIN_DISABLE_TRUNC)) return $string;\n\n\t// We go always here\n\tif ($trunc == 'right')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > ($size+($nodot?0:1)))\n\t\treturn dol_substr($newstring,0,$size,$stringencoding).($nodot?'':'...');\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'middle')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > 2 && dol_strlen($newstring,$stringencoding) > ($size+1))\n\t\t{\n\t\t\t$size1=round($size/2);\n\t\t\t$size2=round($size/2);\n\t\t\treturn dol_substr($newstring,0,$size1,$stringencoding).'...'.dol_substr($newstring,dol_strlen($newstring,$stringencoding) - $size2,$size2,$stringencoding);\n\t\t}\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'left')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > ($size+1))\n\t\treturn '...'.dol_substr($newstring,dol_strlen($newstring,$stringencoding) - $size,$size,$stringencoding);\n\t\telse\n\t\treturn $string;\n\t}\n\telseif ($trunc == 'wrap')\n\t{\n\t\t$newstring=dol_textishtml($string)?dol_string_nohtmltag($string,1):$string;\n\t\tif (dol_strlen($newstring,$stringencoding) > ($size+1))\n\t\treturn dol_substr($newstring,0,$size,$stringencoding).\"\\n\".dol_trunc(dol_substr($newstring,$size,dol_strlen($newstring,$stringencoding)-$size,$stringencoding),$size,$trunc);\n\t\telse\n\t\treturn $string;\n\t}\n\telse return 'BadParam3CallingDolTrunc';\n}\n\n/**\n *\tShow picto whatever it's its name (generic function)\n *\n *\t@param      string\t\t$alt         \t\tText on alt and title of image\n *\t@param      string\t\t$picto       \t\tName of image file to show ('filenew', ...)\n *\t\t\t\t\t\t\t\t\t\t\t\tIf no extension provided, we use '.png'. Image must be stored into theme/xxx/img directory.\n *                                  \t\t\tExample: picto.png                  if picto.png is stored into htdocs/theme/mytheme/img\n *                                  \t\t\tExample: picto.png@mymodule         if picto.png is stored into htdocs/mymodule/img\n *                                  \t\t\tExample: /mydir/mysubdir/picto.png  if picto.png is stored into htdocs/mydir/mysubdir (pictoisfullpath must be set to 1)\n *\t@param\t\tstring\t\t$options\t\t\tAdd more attribute on img tag (For example 'style=\"float: right\"')\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *  @return     string       \t\t\t\t    Return img tag\n *  @see        #img_object, #img_picto_common\n */\nfunction img_picto($alt, $picto, $options = '', $pictoisfullpath = false)\n{\n\tglobal $conf;\n\n\t// Define fullpathpicto to use into src\n\tif ($pictoisfullpath) {\n\t\t// Clean parameters\n\t\tif (! preg_match('/(\\.png|\\.gif)$/i',$picto))\n\t\t\t$picto .= '.png';\n\t\t$fullpathpicto = $picto;\n\t}\n\telse\n\t{\n\t\t// By default, we search into theme directory\n\t\t$url = DOL_URL_ROOT;\n\t\t$path = 'theme/'.$conf->theme;\n\t\tif (! empty($conf->global->MAIN_FORCETHEMEDIR))\n\t\t\t$path = preg_replace('/^\\//', '', $conf->global->MAIN_FORCETHEMEDIR).'/'.$path;\n\t\t// If we ask an image into module/img (not into a theme path)\n\t\tif (preg_match('/^([^@]+)@([^@]+)$/i',$picto,$regs))\n\t\t{\n\t\t\t$picto = $regs[1];\n\t\t\t$path = $regs[2];\n\t\t}\n\t\t// Clean parameters\n\t\tif (! preg_match('/(\\.png|\\.gif)$/i',$picto))\n\t\t\t$picto .= '.png';\n\t\t// If img file not into standard path, we use alternate path\n\t\tif (defined('DOL_URL_ROOT_ALT') && DOL_URL_ROOT_ALT && ! file_exists(DOL_DOCUMENT_ROOT.'/'.$path.'/img/'.$picto))\n\t\t\t$url = DOL_URL_ROOT_ALT;\n\n\t\t$fullpathpicto = $url.'/'.$path.'/img/'.$picto;\n\t}\n\n\treturn '<img src=\"'.$fullpathpicto.'\" border=\"0\" alt=\"'.dol_escape_htmltag($alt).'\" title=\"'.dol_escape_htmltag($alt).'\"'.(! empty($options)?' '.$options:'').'>';\n}\n\n/**\n *\tShow a picto called object_picto (generic function)\n *\n *\t@param\tstring\t$alt\t\t\t\tText of alt on image\n *\t@param\tstring\t$picto\t\t\t\tName of image to show object_picto (example: user, group, action, bill, contract, propal, product, ...)\n *\t\t\t\t\t\t\t\t\t\tFor external modules use imagename@mymodule to search into directory \"img\" of module.\n *\t@param\tstring\t$options\t\t\tAdd more attribute on img tag (ie: class=\"datecallink\")\n *\t@param\tint\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@return\tstring\t\t\t\t\t\tReturn img tag\n *\t@see\t#img_picto, #img_picto_common\n */\nfunction img_object($alt, $picto, $options = '', $pictoisfullpath = false)\n{\n\treturn img_picto($alt, 'object_'.$picto, $options, $pictoisfullpath);\n}\n\n/**\n *\tShow picto (generic function)\n *\n *\t@param      string\t\t$alt         \t\tText on alt and title of image\n *\t@param      string\t\t$picto       \t\tName of image file to show (If no extension provided, we use '.png'). Image must be stored into htdocs/theme/common directory.\n *\t@param\t\tstring\t\t$options\t\t\tAdd more attribute on img tag\n *\t@param\t\tint\t\t\t$pictoisfullpath\tIf 1, image path is a full path\n *\t@return     string      \t\t\t\t\tReturn img tag\n *  @see        #img_object, #img_picto\n */\nfunction img_picto_common($alt, $picto, $options = '', $pictoisfullpath = 0)\n{\n\tglobal $conf;\n\n\tif (! preg_match('/(\\.png|\\.gif)$/i', $picto)) $picto .= '.png';\n\n\tif ($pictoisfullpath) $path = $picto;\n\telse\n\t{\n\t\t$path = DOL_URL_ROOT.'/theme/common/'.$picto;\n\n\t\tif (! empty($conf->global->MAIN_MODULE_CAN_OVERWRITE_COMMONICONS))\n\t\t{\n\t\t\t$themepath = DOL_DOCUMENT_ROOT.'/theme/'.$conf->theme.'/img/'.$picto;\n\n\t\t\tif (file_exists($themepath)) $path = $themepath;\n\t\t}\n\t}\n\n\treturn img_picto($alt, $path, $options, 1);\n}\n\n/**\n *\tShow logo action\n *\n *\t@param\tstring\t$alt         \tText for image alt and title ('default', ...)\n *\t@param  int\t\t$numaction   \tAction to show\n *\t@return string      \t\t\tReturn an img tag\n */\nfunction img_action($alt, $numaction)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default')\n\t{\n\t\tif ($numaction == -1) $alt = $langs->transnoentitiesnoconv('ChangeDoNotContact');\n\t\tif ($numaction == 0) $alt = $langs->transnoentitiesnoconv('ChangeNeverContacted');\n\t\tif ($numaction == 1) $alt = $langs->transnoentitiesnoconv('ChangeToContact');\n\t\tif ($numaction == 2) $alt = $langs->transnoentitiesnoconv('ChangeContactInProcess');\n\t\tif ($numaction == 3) $alt = $langs->transnoentitiesnoconv('ChangeContactDone');\n\t}\n\n\treturn img_picto($alt, 'stcomm'.$numaction.'.png');\n}\n\n/**\n *  Show pdf logo\n *\n *  @param\tstring\t\t$alt        Texte sur le alt de l'image\n *  @param  int\t\t    $size       Taille de l'icone : 3 = 16x16px , 2 = 14x14px\n *  @return string      \t\t\tRetourne tag img\n */\nfunction img_pdf($alt = 'default', $size = 3)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Show');\n\n\treturn img_picto($alt, 'pdf'.$size.'.png');\n}\n\n/**\n *\tShow logo +\n *\n *\t@param\tstring\t$alt        Texte sur le alt de l'image\n *\t@return string      \t\tReturn tag img\n */\nfunction img_edit_add($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Add');\n\n\treturn img_picto($alt, 'edit_add.png');\n}\n/**\n *\tShow logo -\n *\n *\t@param\tstring\t$alt         Texte sur le alt de l'image\n *\t@return string      Retourne tag img\n */\nfunction img_edit_remove($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Remove');\n\n\treturn img_picto($alt, 'edit_remove.png');\n}\n\n/**\n *\tShow logo editer/modifier fiche\n *\n *\t@param  string\t$alt        Texte sur le alt de l'image\n *\t@param  float\t$float      Si il faut y mettre le style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      \t\tRetourne tag img\n */\nfunction img_edit($alt = 'default', $float = 0, $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Modify');\n\n\treturn img_picto($alt, 'edit.png', ($float ? 'style=\"float: right\"' : $other));\n}\n\n/**\n *\tShow logo view card\n *\n *\t@param\tstring\t$alt         Texte sur le alt de l'image\n *\t@param  float\t$float       Si il faut y mettre le style \"float: right\"\n *\t@param  string\t$other\t\tAdd more attributes on img\n *\t@return string      Retourne tag img\n */\nfunction img_view($alt = 'default', $float = 0, $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('View');\n\n\t$options = ($float ? 'style=\"float: right\" ' : '').$other;\n\n\treturn img_picto($alt, 'view.png', $options);\n}\n\n/**\n *  Show delete logo\n *\n *  @param\tstring\t$alt        Text on alt image\n *\t@param  string\t$other      Add more attributes on img\n *  @return string      \t\tRetourne tag img\n */\nfunction img_delete($alt = 'default', $other = '')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Delete');\n\n\treturn img_picto($alt, 'delete.png', $other);\n}\n\n/**\n *\tShow help logo with cursor \"?\"\n *\n * \t@param\tstring\t$usehelpcursor\t\tUse help cursor\n * \t@param\tstring\t$usealttitle\t\tText to use as alt title\n * \t@return string      \t\t\t\tRetourne tag img\n */\nfunction img_help($usehelpcursor = 1, $usealttitle = 1)\n{\n\tglobal $conf, $langs;\n\n\tif ($usealttitle)\n\t{\n\t\tif (is_string($usealttitle)) $usealttitle = dol_escape_htmltag($usealttitle);\n\t\telse $usealttitle = $langs->trans('Info');\n\t}\n\n\treturn img_picto($usealttitle, 'info.png', ($usehelpcursor ? 'style=\"cursor: help\"' : ''));\n}\n\n/**\n *\tShow info logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_info($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Informations');\n\n\treturn img_picto($alt, 'info.png');\n}\n\n/**\n *\tShow warning logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$float      If we must add style \"float: right\"\n *\t@return string      \t\tReturn img tag\n */\nfunction img_warning($alt = 'default', $float = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Warning');\n\n\treturn img_picto($alt, 'warning.png', ($float ? 'style=\"float: right\"' : ''));\n}\n\n/**\n *  Show error logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_error($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Error');\n\n\treturn img_picto($alt, 'error.png');\n}\n\n/**\n *\tShow next logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_next($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Next');\n\n\treturn img_picto($alt, 'next.png');\n}\n\n/**\n *\tShow previous logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_previous($alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Previous');\n\n\treturn img_picto($alt, 'previous.png');\n}\n\n/**\n *\tShow down arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected   Selected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_down($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Down');\n\n\treturn img_picto($alt, ($selected ? '1downarrow_selected.png' : '1downarrow.png'), 'class=\"imgdown\"');\n}\n\n/**\n *\tShow top arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected\tSelected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_up($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Up');\n\n\treturn img_picto($alt, ($selected ? '1uparrow_selected.png' : '1uparrow.png'), 'class=\"imgup\"');\n}\n\n/**\n *\tShow left arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected\tSelected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_left($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Left');\n\n\treturn img_picto($alt, ($selected ? '1leftarrow_selected.png' : '1leftarrow.png'));\n}\n\n/**\n *\tShow right arrow logo\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$selected\tSelected\n *\t@return string      \t\tReturn img tag\n */\nfunction img_right($alt = 'default', $selected = 0)\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Right');\n\n\treturn img_picto($alt, ($selected ? '1rightarrow_selected.png' : '1rightarrow.png'));\n}\n\n/**\n *\tShow tick logo if allowed\n *\n *\t@param\tstring\t$allow\t\tAllow\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@return string      \t\tReturn img tag\n */\nfunction img_allow($allow, $alt = 'default')\n{\n\tglobal $conf, $langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Active');\n\n\tif ($allow == 1) return img_picto($alt, 'tick.png');\n\n\treturn '-';\n}\n\n\n/**\n *\tShow MIME img of a file\n *\n *\t@param\tstring\t$file\t\tFilename\n * \t@param\tstring\t$alt\t\tAlternate text to show on img mous hover\n *\t@return string     \t\t\tReturn img tag\n */\nfunction img_mime($file, $alt = '')\n{\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t$mimetype = dol_mimetype($file, '', 1);\n\t$mimeimg = dol_mimetype($file, '', 2);\n\n\tif (empty($alt)) $alt = 'Mime type: '.$mimetype;\n\n\treturn img_picto_common($alt, 'mime/'.$mimeimg);\n}\n\n\n/**\n *\tShow phone logo.\n *  Use img_picto instead.\n *\n *\t@param\tstring\t$alt        Text to show on alt image\n *\t@param  int\t\t$option\t\tOption\n *\t@return string      \t\tReturn img tag\n *  @deprecated\n */\nfunction img_phone($alt = 'default', $option = 0)\n{\n\tglobal $conf,$langs;\n\n\tif ($alt == 'default') $alt = $langs->trans('Call');\n\n\tif ($option == 1) $img = 'call';\n\telse $img = 'call_out';\n\n\treturn img_picto($alt, $img);\n}\n\n\n/**\n *\tShow information for admin users\n *\n *\t@param\tstring\t$text\t\t\tText info\n *\t@param  string\t$infoonimgalt\tInfo is shown only on alt of star picto, otherwise it is show on output after the star picto\n *\t@param\tint\t\t$nodiv\t\t\tNo div\n *\t@return\tstring\t\t\t\t\tString with info text\n */\nfunction info_admin($text, $infoonimgalt = 0, $nodiv=0)\n{\n\tglobal $conf, $langs;\n\n\tif ($infoonimgalt)\n\t{\n\t\treturn img_picto($text, 'star');\n\t}\n\n\treturn ($nodiv?'':'<div class=\"info\">').img_picto($langs->trans('InfoAdmin'), 'star').' '.$text.($nodiv?'':'</div>');\n}\n\n\n/**\n *\tAffiche message erreur system avec toutes les informations pour faciliter le diagnostic et la remontee des bugs.\n *\tOn doit appeler cette fonction quand une erreur technique bloquante est rencontree.\n *\tToutefois, il faut essayer de ne l'appeler qu'au sein de pages php, les classes devant\n *\trenvoyer leur erreur par l'intermediaire de leur propriete \"error\".\n *\n *\t@param\t DoliDB\t$db      \tDatabase handler\n *\t@param  string\t$error\t\tString or array of errors strings to show\n *\t@return void\n *  @see    dol_htmloutput_errors\n */\nfunction dol_print_error($db='',$error='')\n{\n\tglobal $conf,$langs,$argv;\n\tglobal $dolibarr_main_prod;\n\n\t$out = '';\n\t$syslog = '';\n\n\t// Si erreur intervenue avant chargement langue\n\tif (! $langs)\n\t{\n\t\trequire_once DOL_DOCUMENT_ROOT .'/core/class/translate.class.php';\n\t\t$langs = new Translate('', $conf);\n\t\t$langs->load(\"main\");\n\t}\n\t$langs->load(\"main\");\n\t$langs->load(\"errors\");\n\n\tif ($_SERVER['DOCUMENT_ROOT'])    // Mode web\n\t{\n\t\t$out.=$langs->trans(\"DolibarrHasDetectedError\").\".<br>\\n\";\n\t\tif (! empty($conf->global->MAIN_FEATURES_LEVEL))\n\t\t$out.=\"You use an experimental level of features, so please do NOT report any bugs, anywhere, until going back to MAIN_FEATURES_LEVEL = 0.<br>\\n\";\n\t\t$out.=$langs->trans(\"InformationToHelpDiagnose\").\":<br>\\n\";\n\n\t\t$out.=\"<b>\".$langs->trans(\"Date\").\":</b> \".dol_print_date(time(),'dayhourlog').\"<br>\\n\";;\n\t\t$out.=\"<b>\".$langs->trans(\"Dolibarr\").\":</b> \".DOL_VERSION.\"<br>\\n\";;\n\t\tif (isset($conf->global->MAIN_FEATURES_LEVEL)) $out.=\"<b>\".$langs->trans(\"LevelOfFeature\").\":</b> \".$conf->global->MAIN_FEATURES_LEVEL.\"<br>\\n\";;\n\t\tif (function_exists(\"phpversion\"))\n\t\t{\n\t\t\t$out.=\"<b>\".$langs->trans(\"PHP\").\":</b> \".phpversion().\"<br>\\n\";\n\t\t\t//phpinfo();       // This is to show location of php.ini file\n\t\t}\n\t\t$out.=\"<b>\".$langs->trans(\"Server\").\":</b> \".$_SERVER[\"SERVER_SOFTWARE\"].\"<br>\\n\";\n\t\t$out.=\"<br>\\n\";\n\t\t$out.=\"<b>\".$langs->trans(\"RequestedUrl\").\":</b> \".dol_htmlentities($_SERVER[\"REQUEST_URI\"],ENT_COMPAT,'UTF-8').\"<br>\\n\";\n\t\t$out.=\"<b>\".$langs->trans(\"Referer\").\":</b> \".(isset($_SERVER[\"HTTP_REFERER\"])?dol_htmlentities($_SERVER[\"HTTP_REFERER\"],ENT_COMPAT,'UTF-8'):'').\"<br>\\n\";\n\t\t$out.=\"<b>\".$langs->trans(\"MenuManager\").\":</b> \".$conf->top_menu.\"<br>\\n\";\n\t\t$out.=\"<br>\\n\";\n\t\t$syslog.=\"url=\".$_SERVER[\"REQUEST_URI\"];\n\t\t$syslog.=\", query_string=\".$_SERVER[\"QUERY_STRING\"];\n\t}\n\telse                              // Mode CLI\n\t{\n\t\t$out.='> '.$langs->transnoentities(\"ErrorInternalErrorDetected\").\":\\n\".$argv[0].\"\\n\";\n\t\t$syslog.=\"pid=\".getmypid();\n\t}\n\n\tif (is_object($db))\n\t{\n\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t{\n\t\t\t$out.=\"<b>\".$langs->trans(\"DatabaseTypeManager\").\":</b> \".$db->type.\"<br>\\n\";\n\t\t\t$out.=\"<b>\".$langs->trans(\"RequestLastAccessInError\").\":</b> \".($db->lastqueryerror()?$db->lastqueryerror():$langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out.=\"<b>\".$langs->trans(\"ReturnCodeLastAccessInError\").\":</b> \".($db->lasterrno()?$db->lasterrno():$langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out.=\"<b>\".$langs->trans(\"InformationLastAccessInError\").\":</b> \".($db->lasterror()?$db->lasterror():$langs->trans(\"ErrorNoRequestInError\")).\"<br>\\n\";\n\t\t\t$out.=\"<br>\\n\";\n\t\t}\n\t\telse                            // Mode CLI\n\t\t{\n\t\t\t$out.='> '.$langs->transnoentities(\"DatabaseTypeManager\").\":\\n\".$db->type.\"\\n\";\n\t\t\t$out.='> '.$langs->transnoentities(\"RequestLastAccessInError\").\":\\n\".($db->lastqueryerror()?$db->lastqueryerror():$langs->trans(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out.='> '.$langs->transnoentities(\"ReturnCodeLastAccessInError\").\":\\n\".($db->lasterrno()?$db->lasterrno():$langs->trans(\"ErrorNoRequestInError\")).\"\\n\";\n\t\t\t$out.='> '.$langs->transnoentities(\"InformationLastAccessInError\").\":\\n\".($db->lasterror()?$db->lasterror():$langs->trans(\"ErrorNoRequestInError\")).\"\\n\";\n\n\t\t}\n\t\t$syslog.=\", sql=\".$db->lastquery();\n\t\t$syslog.=\", db_error=\".$db->lasterror();\n\t}\n\n\tif ($error)\n\t{\n\t\t$langs->load(\"errors\");\n\n\t\tif (is_array($error)) $errors=$error;\n\t\telse $errors=array($error);\n\n\t\tforeach($errors as $msg)\n\t\t{\n\t\t\t$msg=$langs->trans($msg);\n\t\t\tif ($_SERVER['DOCUMENT_ROOT'])  // Mode web\n\t\t\t{\n\t\t\t\t$out.=\"<b>\".$langs->trans(\"Message\").\":</b> \".$msg.\"<br>\\n\" ;\n\t\t\t}\n\t\t\telse                            // Mode CLI\n\t\t\t{\n\t\t\t\t$out.='> '.$langs->transnoentities(\"Message\").\":\\n\".$msg.\"\\n\" ;\n\t\t\t}\n\t\t\t$syslog.=\", msg=\".$msg;\n\t\t}\n\t}\n\tif (empty($dolibarr_main_prod) && $_SERVER['DOCUMENT_ROOT'] && function_exists('xdebug_print_function_stack') && function_exists('xdebug_call_file'))\n\t{\n\t\txdebug_print_function_stack();\n\t\t$out.='<b>XDebug informations:</b>'.\"<br>\\n\";\n\t\t$out.='File: '.xdebug_call_file().\"<br>\\n\";\n\t\t$out.='Line: '.xdebug_call_line().\"<br>\\n\";\n\t\t$out.='Function: '.xdebug_call_function().\"<br>\\n\";\n\t\t$out.=\"<br>\\n\";\n\t}\n\n\tif (empty($dolibarr_main_prod)) print $out;\n\telse define(\"MAIN_CORE_ERROR\", 1);\n\t//else print 'Sorry, an error occured but the parameter $dolibarr_main_prod is defined in conf file so no message is reported to your browser. Please read the log file for error message.';\n\tdol_syslog(\"Error \".$syslog, LOG_ERR);\n}\n\n/**\n * Show a public email and error code to contact if technical error\n *\n * @param\tstring\t$prefixcode\t\tPrefix of public error code\n * @return\tvoid\n */\nfunction dol_print_error_email($prefixcode)\n{\n\tglobal $langs,$conf;\n\n\t$langs->load(\"errors\");\n\t$now=dol_now();\n\tprint '<br><div class=\"error\">'.$langs->trans(\"ErrorContactEMail\", $conf->global->MAIN_INFO_SOCIETE_MAIL, $prefixcode.dol_print_date($now,'%Y%m%d')).'</div>';\n}\n\n/**\n *\tShow title line of an array\n *\n *\t@param\tstring\t$name        Label of field\n *\t@param\tstring\t$file        Url used when we click on sort picto\n *\t@param\tstring\t$field       Field to use for new sorting\n *\t@param\tstring\t$begin       (\"\" by defaut)\n *\t@param\tstring\t$moreparam   Add more parameters on sort url links (\"\" by default)\n *\t@param  string\t$td          Options of attribute td (\"\" by defaut)\n *\t@param  string\t$sortfield   Current field used to sort\n *\t@param  string\t$sortorder   Current sort order\n *\t@return\tvoid\n */\nfunction print_liste_field_titre($name, $file=\"\", $field=\"\", $begin=\"\", $moreparam=\"\", $td=\"\", $sortfield=\"\", $sortorder=\"\")\n{\n\tprint getTitleFieldOfList($name, 0, $file, $field, $begin, $moreparam, $td, $sortfield, $sortorder);\n}\n\n/**\n *\tGet title line of an array\n *\n *\t@param\tstring\t$name        Label of field\n *\t@param\tint\t\t$thead\t\t For thead format\n *\t@param\tstring\t$file        Url used when we click on sort picto\n *\t@param\tstring\t$field       Field to use for new sorting. Empty if this field is not sortable.\n *\t@param\tstring\t$begin       (\"\" by defaut)\n *\t@param\tstring\t$moreparam   Add more parameters on sort url links (\"\" by default)\n *\t@param  string\t$moreattrib  Add more attributes on th (\"\" by defaut)\n *\t@param  string\t$sortfield   Current field used to sort\n *\t@param  string\t$sortorder   Current sort order\n *\t@return\tvoid\n */\nfunction getTitleFieldOfList($name, $thead=0, $file=\"\", $field=\"\", $begin=\"\", $moreparam=\"\", $moreattrib=\"\", $sortfield=\"\", $sortorder=\"\")\n{\n\tglobal $conf;\n\t//print \"$name, $file, $field, $begin, $options, $moreattrib, $sortfield, $sortorder<br>\\n\";\n\n\t$out='';\n\t// If field is used as sort criteria we use a specific class\n\t// Example if (sortfield,field)=(\"nom\",\"xxx.nom\") or (sortfield,field)=(\"nom\",\"nom\")\n\tif ($field && ($sortfield == $field || $sortfield == preg_replace(\"/^[^\\.]+\\./\",\"\",$field)))\n\t{\n\t\t$out.= '<th class=\"liste_titre_sel\" '. $moreattrib.'>';\n\t}\n\telse\n\t{\n\t\t$out.= '<th class=\"liste_titre\" '. $moreattrib.'>';\n\t}\n\t$out.=$name;\n\n\tif (empty($thead) && $field)    // If this is a sort field\n\t{\n\t\t$options=preg_replace('/sortfield=([a-zA-Z0-9,\\s\\.]+)/i','',$moreparam);\n\t\t$options=preg_replace('/sortorder=([a-zA-Z0-9,\\s\\.]+)/i','',$options);\n\t\t$options=preg_replace('/&+/i','&',$options);\n\t\tif (! preg_match('/^&/',$options)) $options='&'.$options;\n\n\t\t//print \"&nbsp;\";\n\t\t$out.= '<img width=\"2\" src=\"'.DOL_URL_ROOT.'/theme/common/transparent.png\" alt=\"\">';\n\t\tif (! $sortorder)\n\t\t{\n\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($field != $sortfield)\n\t\t\t{\n\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$sortorder=strtoupper($sortorder);\n\t\t\t\tif ($sortorder == 'DESC' ) {\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",0).'</a>';\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",1).'</a>';\n\t\t\t\t}\n\t\t\t\tif ($sortorder == 'ASC' ) {\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=asc&begin='.$begin.$options.'\">'.img_down(\"A-Z\",1).'</a>';\n\t\t\t\t\t$out.= '<a href=\"'.$file.'?sortfield='.$field.'&sortorder=desc&begin='.$begin.$options.'\">'.img_up(\"Z-A\",0).'</a>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t$out.='</th>';\n\n\treturn $out;\n}\n\n/**\n *\tShow a title (deprecated. use print_fiche_titre instrad)\n *\n *\t@param\tstring\t$title\t\t\tTitle to show\n *\t@return\tstring\t\t\t\t\tTitle to show\n */\nfunction print_titre($title)\n{\n\tprint '<div class=\"titre\">'.$title.'</div>';\n}\n\n/**\n *\tShow a title with picto\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show\n *\t@param\tstring\t$mesg\t\t\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tint\t\t$id\t\t\t\t\tTo force an id on html objects\n * \t@return\tvoid\n */\nfunction print_fiche_titre($titre, $mesg='', $picto='title.png', $pictoisfullpath=0, $id='')\n{\n\tprint load_fiche_titre($titre, $mesg, $picto, $pictoisfullpath, $id);\n}\n\n/**\n *\tLoad a title with picto\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show\n *\t@param\tstring\t$mesg\t\t\t\tAdded message to show on right\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t1=Icon name is a full absolute url of image\n * \t@param\tint\t\t$id\t\t\t\t\tTo force an id on html objects\n * \t@return\tvoid\n */\nfunction load_fiche_titre($titre, $mesg='', $picto='title.png', $pictoisfullpath=0, $id='')\n{\n\tglobal $conf;\n\n\t$return='';\n\n\tif ($picto == 'setup') $picto='title.png';\n\tif (!empty($conf->browser->ie) && $picto=='title.png') $picto='title.gif';\n\n\t$return.= \"\\n\";\n\t$return.= '<table '.($id?'id=\"'.$id.'\" ':'').'summary=\"\" width=\"100%\" border=\"0\" class=\"notopnoleftnoright\" style=\"margin-bottom: 2px;\"><tr>';\n\tif ($picto) $return.= '<td class=\"nobordernopadding hideonsmartphone\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, 'id=\"pictotitle\"', $pictoisfullpath).'</td>';\n\t$return.= '<td class=\"nobordernopadding\" valign=\"middle\">';\n\t$return.= '<div class=\"titre\">'.$titre.'</div>';\n\t$return.= '</td>';\n\tif (dol_strlen($mesg))\n\t{\n\t\t$return.= '<td class=\"nobordernopadding\" align=\"right\" valign=\"middle\"><b>'.$mesg.'</b></td>';\n\t}\n\t$return.= '</tr></table>'.\"\\n\";\n\n\treturn $return;\n}\n\n/**\n *\tPrint a title with navigation controls for pagination\n *\n *\t@param\tstring\t$titre\t\t\t\tTitle to show (required)\n *\t@param\tstring\t$page\t\t\t\tNumero of page (required)\n *\t@param\tstring\t$file\t\t\t\tUrl of page (required)\n *\t@param\tstring\t$options         \tparametres complementaires lien ('' par defaut)\n *\t@param\tstring\t$sortfield       \tchamp de tri ('' par defaut)\n *\t@param\tstring\t$sortorder       \tordre de tri ('' par defaut)\n *\t@param\tstring\t$center          \tchaine du centre ('' par defaut)\n *\t@param\tint\t\t$num\t\t\t\tnumber of records found by select with limit+1\n *\t@param\tint\t\t$totalnboflines\t\tTotal number of records/lines for all pages (if known)\n *\t@param\tstring\t$picto\t\t\t\tIcon to use before title (should be a 32x32 transparent png file)\n *\t@param\tint\t\t$pictoisfullpath\t\t1=Icon name is a full absolute url of image\n *\t@return\tvoid\n */\nfunction print_barre_liste($titre, $page, $file, $options='', $sortfield='', $sortorder='', $center='', $num=-1, $totalnboflines=0, $picto='title.png', $pictoisfullpath=0)\n{\n\tglobal $conf,$langs;\n\n\tif ($picto == 'setup') $picto='title.png';\n\tif (!empty($conf->browser->ie) && $picto=='title.png') $picto='title.gif';\n\n\tif ($num > $conf->liste_limit or $num == -1)\n\t{\n\t\t$nextpage = 1;\n\t}\n\telse\n\t{\n\t\t$nextpage = 0;\n\t}\n\n\tprint \"\\n\";\n\tprint \"<!-- Begin title '\".$titre.\"' -->\\n\";\n\tprint '<table width=\"100%\" border=\"0\" class=\"notopnoleftnoright\" style=\"margin-bottom: 2px;\"><tr>';\n\n\t$pagelist = '';\n\n\t// Left\n\tif ($page > 0 || $num > $conf->liste_limit)\n\t{\n\t\tif ($totalnboflines)\n\t\t{\n\t\t\tif ($picto && $titre) print '<td class=\"nobordernopadding\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, '', $pictoisfullpath).'</td>';\n\t\t\tprint '<td class=\"nobordernopadding\">';\n\t\t\tprint '<div class=\"titre\">'.$titre.'</div>';\n\t\t\tprint '</td>';\n\n\t\t\t$maxnbofpage=10;\n\n\t\t\t$nbpages=ceil($totalnboflines/$conf->liste_limit);\n\t\t\t$cpt=($page-$maxnbofpage);\n\t\t\tif ($cpt < 0) { $cpt=0; }\n\t\t\t$pagelist.=$langs->trans('Page');\n\t\t\tif ($cpt>=1)\n\t\t\t{\n\t\t\t\t$pagelist.=' <a href=\"'.$file.'?page=0'.$options.'&amp;sortfield='.$sortfield.'&amp;sortorder='.$sortorder.'\">1</a>';\n\t\t\t\tif ($cpt >= 2) $pagelist.=' ...';\n\t\t\t}\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif($cpt==$page)\n\t\t\t\t{\n\t\t\t\t\t$pagelist.= ' <u>'.($page+1).'</u>';\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$pagelist.= ' <a href=\"'.$file.'?page='.$cpt.$options.'&amp;sortfield='.$sortfield.'&amp;sortorder='.$sortorder.'\">'.($cpt+1).'</a>';\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t\twhile ($cpt < $nbpages && $cpt<=$page+$maxnbofpage);\n\t\t\tif ($cpt<$nbpages)\n\t\t\t{\n\t\t\t\tif ($cpt<$nbpages-1) $pagelist.= ' ...';\n\t\t\t\t$pagelist.= ' <a href=\"'.$file.'?page='.($nbpages-1).$options.'&amp;sortfield='.$sortfield.'&amp;sortorder='.$sortorder.'\">'.$nbpages.'</a>';\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (empty($conf->browser->phone) && $picto && $titre) print '<td class=\"nobordernopadding\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, '', $pictoisfullpath).'</td>';\n\t\t\tprint '<td class=\"nobordernopadding\">';\n\t\t\tprint '<div class=\"titre\">'.$titre.'</div>';\n\t\t\t$pagelist.= $langs->trans('Page').' '.($page+1);\n\t\t\tprint '</td>';\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (empty($conf->browser->phone) && $picto && $titre) print '<td class=\"nobordernopadding\" width=\"40\" align=\"left\" valign=\"middle\">'.img_picto('',$picto, '', $pictoisfullpath).'</td>';\n\t\tprint '<td class=\"nobordernopadding\"><div class=\"titre\">'.$titre.'</div></td>';\n\t}\n\n\t// Center\n\tif ($center)\n\t{\n\t\tprint '<td class=\"nobordernopadding\" align=\"left\" valign=\"middle\">'.$center.'</td>';\n\t}\n\n\t// Right\n\tprint '<td class=\"nobordernopadding\" align=\"right\" valign=\"middle\">';\n\tif ($sortfield) $options .= \"&amp;sortfield=\".$sortfield;\n\tif ($sortorder) $options .= \"&amp;sortorder=\".$sortorder;\n\t// Affichage des fleches de navigation\n\tprint_fleche_navigation($page,$file,$options,$nextpage,$pagelist);\n\tprint '</td>';\n\n\tprint '</tr></table>'.\"\\n\";\n\tprint \"<!-- End title -->\\n\\n\";\n}\n\n/**\n *\tFonction servant a afficher les fleches de navigation dans les pages de listes\n *\n *\t@param\tint\t\t$page\t\t\t\tNumero of page\n *\t@param\tstring\t$file\t\t\t\tLien\n *\t@param\tstring\t$options         \tAutres parametres d'url a propager dans les liens (\"\" par defaut)\n *\t@param\tint\t\t$nextpage\t    \tFaut-il une page suivante\n *\t@param\tstring\t$betweenarrows\t\tHTML Content to show between arrows\n *\t@return\tvoid\n */\nfunction print_fleche_navigation($page,$file,$options='',$nextpage=0,$betweenarrows='')\n{\n\tglobal $conf, $langs;\n\tif ($page > 0)\n\t{\n\t\tprint '<a href=\"'.$file.'?page='.($page-1).$options.'\">'.img_previous($langs->trans(\"Previous\")).'</a>';\n\t}\n\tif ($betweenarrows) print ($page > 0?' ':'').$betweenarrows.($nextpage>0?' ':'');\n\tif ($nextpage > 0)\n\t{\n\t\tprint '<a href=\"'.$file.'?page='.($page+1).$options.'\">'.img_next($langs->trans(\"Next\")).'</a>';\n\t}\n}\n\n\n/**\n *\tReturn a string with VAT rate label formated for view output\n *\tUsed into pdf and HTML pages\n *\n *\t@param\tfloat\t$rate\t\t\tRate value to format (19.6 19,6 19.6% 19,6%,...)\n *  @param\tboolean\t$addpercent\t\tAdd a percent % sign in output\n *\t@param\tint\t\t$info_bits\t\tMiscellanous information on vat (0=Default, 1=French NPR vat)\n *\t@param\tint\t\t$usestarfornpr\t1=Use '*' for NPR vat rate intead of MAIN_LABEL_MENTION_NPR\n *  @return\tstring\t\t\t\t\tString with formated amounts (19,6 or 19,6% or 8.5% NPR or 8.5% *)\n */\nfunction vatrate($rate,$addpercent=false,$info_bits=0,$usestarfornpr=0)\n{\n\t// Test for compatibility\n\tif (preg_match('/%/',$rate))\n\t{\n\t\t$rate=str_replace('%','',$rate);\n\t\t$addpercent=true;\n\t}\n\tif (preg_match('/\\*/',$rate) || preg_match('/'.constant('MAIN_LABEL_MENTION_NPR').'/i',$rate))\n\t{\n\t\t$rate=str_replace('*','',$rate);\n\t\t$info_bits |= 1;\n\t}\n\n\t$ret=price($rate,0,'',0,0).($addpercent?'%':'');\n\tif ($info_bits & 1) $ret.=' '.($usestarfornpr?'*':constant('MAIN_LABEL_MENTION_NPR'));\n\treturn $ret;\n}\n\n\n/**\n *\t\tFonction qui formate un montant pour visualisation\n *\t\tFonction utilisee dans les pdf et les pages html\n *\n *\t\t@param\tfloat\t\t$amount\t\t\tMontant a formater\n *\t\t@param\tstring\t\t$form\t\t\tType de formatage, html ou pas (par defaut)\n *\t\t@param\tTranslate\t$outlangs\t\tObjet langs pour formatage text\n *\t\t@param\tint\t\t\t$trunc\t\t\t1=Tronque affichage si trop de decimales,0=Force le non troncage\n *\t\t@param\tint\t\t\t$rounding\t\tMinimum number of decimal. If not defined we use min($conf->global->MAIN_MAX_DECIMALS_UNIT,$conf->global->MAIN_MAX_DECIMALS_TOTAL)\n *\t\t@param\tint\t\t\t$forcerounding\tForce the number of decimal\n *\t\t@return\tstring\t\t\t\t\t\tChaine avec montant formate\n *\n *\t\t@see\tprice2num\t\t\t\t\tRevert function of price\n */\nfunction price($amount, $form=0, $outlangs='', $trunc=1, $rounding=-1, $forcerounding=-1)\n{\n\tglobal $langs,$conf;\n\n\t// Clean parameters\n\tif (empty($amount)) $amount=0;\t// To have a numeric value if amount not defined or = ''\n\t$amount = (is_numeric($amount)?$amount:0); // Check if amount is numeric, for example, an error occured when amount value = o (letter) instead 0 (number)\n\tif ($rounding < 0) $rounding=min($conf->global->MAIN_MAX_DECIMALS_UNIT,$conf->global->MAIN_MAX_DECIMALS_TOT);\n\n\t$nbdecimal=$rounding;\n\n\t// Output separators by default (french)\n\t$dec=','; $thousand=' ';\n\n\t// If $outlangs not forced, we use use language\n\tif (! is_object($outlangs)) $outlangs=$langs;\n\n\tif ($outlangs->trans(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec=$outlangs->trans(\"SeparatorDecimal\");\n\tif ($outlangs->trans(\"SeparatorThousand\")!= \"SeparatorThousand\") $thousand=$outlangs->trans(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand='';\n\t//print \"amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t//print \"amount=\".$amount.\"-\";\n\t$amount = str_replace(',','.',$amount);\t// should be useless\n\t//print $amount.\"-\";\n\t$datas = explode('.',$amount);\n\t$decpart = isset($datas[1])?$datas[1]:'';\n\t$decpart = preg_replace('/0+$/i','',$decpart);\t// Supprime les 0 de fin de partie decimale\n\t//print \"decpart=\".$decpart.\"<br>\";\n\t$end='';\n\n\t// We increase nbdecimal if there is more decimal than asked (to not loose information)\n\tif (dol_strlen($decpart) > $nbdecimal) $nbdecimal=dol_strlen($decpart);\n\t// Si on depasse max\n\tif ($trunc && $nbdecimal > $conf->global->MAIN_MAX_DECIMALS_SHOWN)\n\t{\n\t\t$nbdecimal=$conf->global->MAIN_MAX_DECIMALS_SHOWN;\n\t\tif (preg_match('/\\.\\.\\./i',$conf->global->MAIN_MAX_DECIMALS_SHOWN))\n\t\t{\n\t\t\t// Si un affichage est tronque, on montre des ...\n\t\t\t$end='...';\n\t\t}\n\t}\n\n\t// If force rounding\n\tif ($forcerounding >= 0) $nbdecimal = $forcerounding;\n\n\t// Format number\n\tif ($form)\n\t{\n\t\t$output=preg_replace('/\\s/','&nbsp;',number_format($amount, $nbdecimal, $dec, $thousand));\n\t}\n\telse\n\t{\n\t\t$output=number_format($amount, $nbdecimal, $dec, $thousand);\n\t}\n\t$output.=$end;\n\n\treturn $output;\n}\n\n/**\n *\tFunction that return a number with universal decimal format (decimal separator is '.') from\n *\tan amount typed by a user.\n *\tFunction to use on each input amount before any numeric test or database insert\n *\n *\t@param\tfloat\t$amount\t\t\tAmount to convert/clean\n *\t@param\tstring\t$rounding\t\t''=No rounding\n * \t\t\t\t\t\t\t\t\t'MU'=Round to Max unit price (MAIN_MAX_DECIMALS_UNIT)\n *\t\t\t\t\t\t\t\t\t'MT'=Round to Max for totals with Tax (MAIN_MAX_DECIMALS_TOT)\n *\t\t\t\t\t\t\t\t\t'MS'=Round to Max Shown (MAIN_MAX_DECIMALS_SHOWN)\n * \t@param\tint\t\t$alreadysqlnb\tPut 1 if you know that content is already universal format number\n *\t@return\tstring\t\t\t\t\tAmount with universal numeric format (Example: '99.99999')\n *\n *\t@see    price\t\t\t\t\tOpposite function of price2num\n */\nfunction price2num($amount,$rounding='',$alreadysqlnb=0)\n{\n\tglobal $langs,$conf;\n\n\t// Round PHP function does not allow number like '1,234.56' nor '1.234,56' nor '1 234,56'\n\t// Numbers must be '1234.56'\n\t// Decimal delimiter for PHP and database SQL requests must be '.'\n\t$dec=','; $thousand=' ';\n\tif ($langs->trans(\"SeparatorDecimal\") != \"SeparatorDecimal\")  $dec=$langs->trans(\"SeparatorDecimal\");\n\tif ($langs->trans(\"SeparatorThousand\")!= \"SeparatorThousand\") $thousand=$langs->trans(\"SeparatorThousand\");\n\tif ($thousand == 'None') $thousand='';\n\t//print \"amount=\".$amount.\" html=\".$form.\" trunc=\".$trunc.\" nbdecimal=\".$nbdecimal.\" dec='\".$dec.\"' thousand='\".$thousand.\"'<br>\";\n\n\t// Convert value to universal number format (no thousand separator, '.' as decimal separator)\n\tif ($alreadysqlnb != 1)\t// If not a PHP number or unknown, we change format\n\t{\n\t\t//print 'PP'.$amount.' - '.$dec.' - '.$thousand.'<br>';\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be like defined by Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps=sprintf(\"%0.10F\",$amount-intval($amount));\t// temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps=preg_replace('/([\\.1-9])0+$/','\\\\1',$temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec=max(0,dol_strlen($temps)-2);\t// -2 to remove \"0.\"\n\t\t\t$amount=number_format($amount,$nbofdec,$dec,$thousand);\n\t\t}\n\t\t//print \"QQ\".$amount.'<br>';\n\n\t\t// Now make replace (the main goal of function)\n\t\tif ($thousand != ',' && $thousand != '.') $amount=str_replace(',','.',$amount);\t// To accept 2 notations for french users\n\t\t$amount=str_replace(' ','',$amount);\t\t// To avoid spaces\n\t\t$amount=str_replace($thousand,'',$amount);\t// Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount=str_replace($dec,'.',$amount);\n\t}\n\n\t// Now, make a rounding if required\n\tif ($rounding)\n\t{\n\t\t$nbofdectoround='';\n\t\tif ($rounding == 'MU')     $nbofdectoround=$conf->global->MAIN_MAX_DECIMALS_UNIT;\n\t\telseif ($rounding == 'MT') $nbofdectoround=$conf->global->MAIN_MAX_DECIMALS_TOT;\n\t\telseif ($rounding == 'MS') $nbofdectoround=$conf->global->MAIN_MAX_DECIMALS_SHOWN;\n\t\telseif (is_numeric($rounding))  $nbofdectoround=$rounding; \t// For admin info page\n\t\t//print \"RR\".$amount.' - '.$nbofdectoround.'<br>';\n\t\tif (dol_strlen($nbofdectoround)) $amount = round($amount,$nbofdectoround);\t// $nbofdectoround can be 0.\n\t\telse return 'ErrorBadParameterProvidedToFunction';\n\t\t//print 'SS'.$amount.' - '.$nbofdec.' - '.$dec.' - '.$thousand.' - '.$nbofdectoround.'<br>';\n\n\t\t// Convert amount to format with dolibarr dec and thousand (this is because PHP convert a number\n\t\t// to format defined by LC_NUMERIC after a calculation and we want source format to be defined by Dolibarr setup.\n\t\tif (is_numeric($amount))\n\t\t{\n\t\t\t// We put in temps value of decimal (\"0.00001\"). Works with 0 and 2.0E-5 and 9999.10\n\t\t\t$temps=sprintf(\"%0.10F\",$amount-intval($amount));\t// temps=0.0000000000 or 0.0000200000 or 9999.1000000000\n\t\t\t$temps=preg_replace('/([\\.1-9])0+$/','\\\\1',$temps); // temps=0. or 0.00002 or 9999.1\n\t\t\t$nbofdec=max(0,dol_strlen($temps)-2);\t// -2 to remove \"0.\"\n\t\t\t$amount=number_format($amount,min($nbofdec,$nbofdectoround),$dec,$thousand);\t\t// Convert amount to format with dolibarr dec and thousand\n\t\t}\n\t\t//print \"TT\".$amount.'<br>';\n\n\t\t// Always make replace because each math function (like round) replace\n\t\t// with local values and we want a number that has a SQL string format x.y\n\t\tif ($thousand != ',' && $thousand != '.') $amount=str_replace(',','.',$amount);\t// To accept 2 notations for french users\n\t\t$amount=str_replace(' ','',$amount);\t\t// To avoid spaces\n\t\t$amount=str_replace($thousand,'',$amount);\t// Replace of thousand before replace of dec to avoid pb if thousand is .\n\t\t$amount=str_replace($dec,'.',$amount);\n\t}\n\n\treturn $amount;\n}\n\n/**\n *\tReturn localtax rate for a particular vat, when selling a product with vat $tva, from a $thirdparty_buyer to a $thirdparty_seller\n *  Note: It applies same rule than get_default_tva\n *\n * \t@param\tfloat\t\t$tva\t\t\t        Vat taxe\n * \t@param  int\t\t\t$local\t\t         \tLocal tax to search and return (1 or 2 return only tax rate 1 or tax rate 2)\n *  @param  Societe\t\t$thirdparty_buyer    \tObject of buying third party\n *  @param\tSociete\t\t$thirdparty_seller\t\tObject of selling third party\n * \t@return\tmixed\t\t\t   \t\t\t\t\t0 if not found, localtax if found\n *  @see get_default_tva\n */\nfunction get_localtax($tva, $local, $thirdparty_buyer=\"\", $thirdparty_seller=\"\")\n{\n\tglobal $db, $conf, $mysoc;\n\n\tif (empty($thirdparty_seller) || ! is_object($thirdparty_seller)) $thirdparty_seller=$mysoc;\n\n\tdol_syslog(\"get_localtax tva=\".$tva.\" local=\".$local.\" thirdparty_buyer id=\".(is_object($thirdparty_buyer)?$thirdparty_buyer->id:'').\" thirdparty_seller id=\".$thirdparty_seller->id);\n\n\t// Some test to guess with no need to make database access\n\tif ($mysoc->country_code == 'ES') // For spain localtaxes 1 and 2, tax is qualified if buyer use local taxe\n\t{\n\t\tif ($local == 1) \n\t\t{\n\t\t\tif ($thirdparty_seller->id==$mysoc->id)\n\t\t\t{\n\t\t\t\tif (! $thirdparty_buyer->localtax1_assuj) return 0;\n\t\t\t}\n\t\t\telse \n\t\t\t{\n\t\t\t\tif (! $thirdparty_seller->localtax1_assuj) return 0;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($local == 2 && ! $thirdparty_buyer->localtax2_assuj) return 0;\n\t}\n\telse\n\t{\n\t\tif ($local == 1 && ! $thirdparty_seller->localtax1_assuj) return 0;\n\t\tif ($local == 2 && ! $thirdparty_seller->localtax2_assuj) return 0;\n\t}\n\t//if ($local == 0 && ! $thirdparty_seller->localtax1_assuj && ! $thirdparty_seller->localtax2_assuj) return array('localtax1'=>0,'localtax2'=>0);\n\n\t$code_country=$thirdparty_seller->country_code;\n\tif (is_object($thirdparty_buyer))\n\t{\n\t\tif ($code_country != $thirdparty_buyer->country_code) return 0;\n\t}\n\n\t// Search local taxes\n\t$sql  = \"SELECT t.localtax1, t.localtax2, t.localtax1_type, t.localtax2_type\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\n\t$sql .= \" WHERE t.fk_pays = p.rowid AND p.code = '\".$code_country.\"'\";\n\t$sql .= \" AND t.taux = \".$tva.\" AND t.active = 1\";\n\n\tdol_syslog(\"get_localtax sql=\".$sql);\n\t$resql=$db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($local==1 && $obj->localtax1_type != '7') return $obj->localtax1;\n\t\telseif ($local==2 && $obj->localtax2_type != '7') return $obj->localtax2;\n\t}\n\n\treturn 0;\n}\n\n/**\r\n *  Get type and rate of localtaxes for a particular vat rate/country fo thirdparty\r\n *\r\n *  @param\t\treal\t$vatrate\t\t\tVAT Rate\r\n *  @param\t\tint\t\t$local              Number of localtax (1 / 2)\r\n *  @param\t\tint\t\t$thirdparty         company object\r\n *  @return\t\tarray    \t  \t\t\t\tarray(Type of local tax (1 to 7 / 0 if not found), rate or amount of localtax)\n *  @deprecated\tTODO We should remove this function by storing rate and type into detail lines.\r\n */\r\nfunction getLocalTaxesFromRate($vatrate, $local, $thirdparty)\r\n{\r\n\tglobal $db;\r\n\n\tdol_syslog(\"getLocalTaxesFromRate vatrate=\".$vatrate.\" local=\".$local.\" thirdparty id=\".(is_object($thirdparty)?$thirdparty->id:''));\r\n\r\n\t// Search local taxes\r\n\t$sql  = \"SELECT t.localtax1, t.localtax1_type, t.localtax2, t.localtax2_type\";\r\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\r\n\t$sql .= \" WHERE t.fk_pays = p.rowid AND p.code = '\".$thirdparty->country_code.\"'\";\r\n\t$sql .= \" AND t.taux = \".$vatrate.\" AND t.active = 1\";\r\n\r\n\t$resql=$db->query($sql);\r\n\tif ($resql)\r\n\t{\r\n\t\t$obj = $db->fetch_object($resql);\r\n\t\tif ($local == 1) return array($obj->localtax1_type, $obj->localtax1);\r\n\t\telseif ($local == 2) return array($obj->localtax2_type, $obj->localtax2);\r\n\t}\r\n\r\n\treturn 0;\r\n}\n\n/**\n *\tReturn vat rate of a product in a particular selling country or default country vat if product is unknown\n *\n *  @param\tint\t\t\t$idprod          \tId of product or 0 if not a predefined product\n *  @param  Societe\t\t$thirdparty_seller  Thirdparty with a ->country_code defined (FR, US, IT, ...)\n *\t@param\tint\t\t\t$idprodfournprice\tId product_fournisseur_price (for supplier order/invoice)\n *  @return int\t\t\t\t\t         \t<0 if KO, Vat rate if OK\n *  @see get_product_localtax_for_country\n */\nfunction get_product_vat_for_country($idprod, $thirdparty_seller, $idprodfournprice=0)\n{\n\tglobal $db,$mysoc;\n\n\tif (! class_exists('Product')) {\n\t\trequire DOL_DOCUMENT_ROOT . '/product/class/product.class.php';\n\t}\n\n\t$ret=0;\n\t$found=0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product=new Product($db);\n\t\t$result=$product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\tif ($idprodfournprice > 0)     // We want vat for product for a supplier order or invoice\n\t\t\t{\n\t\t\t\t$product->get_buyprice($idprodfournprice,0,0,0);\n\t\t\t\t$ret=$product->vatrate_supplier;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ret=$product->tva_tx;    // Default vat of product we defined\n\t\t\t}\n\t\t\t$found=1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product\n\n\n\t\t}\n\t}\n\n\tif (! $found)\n\t{\n\t\t// If vat of product for the country not found or not defined, we return higher vat of country.\n\t\t$sql = \"SELECT taux as vat_rate\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\n\t\t$sql.= \" WHERE t.active=1 AND t.fk_pays = p.rowid AND p.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t$sql.= \" ORDER BY t.taux DESC, t.recuperableonly ASC\";\n\t\t$sql.= $db->plimit(1);\n\n\t\t$resql=$db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$db->fetch_object($resql);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\t$ret=$obj->vat_rate;\n\t\t\t}\n\t\t}\n\t\telse dol_print_error($db);\n\t}\n\n\tdol_syslog(\"get_product_vat_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tReturn localtax vat rate of a product in a particular selling country or default country vat if product is unknown\n *\n *  @param\tint\t\t$idprod         \t\tId of product\n *  @param  int\t\t$local          \t\t1 for localtax1, 2 for localtax 2\n *  @param  Societe\t$thirdparty_seller    \tThirdparty with a ->country_code defined (FR, US, IT, ...)\n *  @return int             \t\t\t\t<0 if KO, Vat rate if OK\n *  @see get_product_vat_for_country\n */\nfunction get_product_localtax_for_country($idprod, $local, $thirdparty_seller)\n{\n\tglobal $db,$mysoc;\n\n\tif (! class_exists('Product')) {\n\t\trequire DOL_DOCUMENT_ROOT . '/product/class/product.class.php';\n\t}\n\n\t$ret=0;\n\t$found=0;\n\n\tif ($idprod > 0)\n\t{\n\t\t// Load product\n\t\t$product=new Product($db);\n\t\t$result=$product->fetch($idprod);\n\n\t\tif ($mysoc->country_code == $thirdparty_seller->country_code) // If selling country is ours\n\t\t{\n\t\t\t/* Not defined yet, so we don't use this\n\t\t\tif ($local==1) $ret=$product->localtax1_tx;\n\t\t\telseif ($local==2) $ret=$product->localtax2_tx;\n\t\t\t$found=1;\n\t\t\t*/\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// TODO Read default product vat according to countrycode and product\n\n\n\t\t}\n\t}\n\n\tif (! $found)\n\t{\n\t\t// If vat of product for the country not found or not defined, we return higher vat of country.\n\t\t$sql = \"SELECT taux as vat_rate, localtax1, localtax2\";\n\t\t$sql.= \" FROM \".MAIN_DB_PREFIX.\"c_tva as t, \".MAIN_DB_PREFIX.\"c_pays as p\";\n\t\t$sql.= \" WHERE t.active=1 AND t.fk_pays = p.rowid AND p.code='\".$thirdparty_seller->country_code.\"'\";\n\t\t$sql.= \" ORDER BY t.taux DESC, t.recuperableonly ASC\";\n\t\t$sql.= $db->plimit(1);\n\n\t\t$resql=$db->query($sql);\n\t\tif ($resql)\n\t\t{\n\t\t\t$obj=$db->fetch_object($resql);\n\t\t\tif ($obj)\n\t\t\t{\n\t\t\t\tif ($local==1) $ret=$obj->localtax1;\n\t\t\t\telseif ($local==2) $ret=$obj->localtax2;\n\t\t\t}\n\t\t}\n\t\telse dol_print_error($db);\n\t}\n\n\tdol_syslog(\"get_product_localtax_for_country: ret=\".$ret);\n\treturn $ret;\n}\n\n/**\n *\tFunction that return vat rate of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier ou entreprise sans num TVA intra) alors TVA par defaut=TVA du produit vendu. Fin de regle\n *\t Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise avec num TVA) intra alors TVA par defaut=0. Fin de regle\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@param\tint\t\t\t$idprodfournprice\t\tId product_fournisseur_price (for supplier order/invoice)\n *\t@return float         \t\t\t\t      \tTaux de tva a appliquer, -1 si ne peut etre determine\n *  @see get_default_localtax\n */\nfunction get_default_tva($thirdparty_seller, $thirdparty_buyer, $idprod=0, $idprodfournprice=0)\n{\n\tglobal $conf;\n\n\tif (!is_object($thirdparty_seller)) return -1;\n\tif (!is_object($thirdparty_buyer)) return -1;\n\n\tdol_syslog(\"get_default_tva: seller use vat=\".$thirdparty_seller->tva_assuj.\", seller country=\".$thirdparty_seller->country_code.\", seller in cee=\".$thirdparty_seller->isInEEC().\", buyer country=\".$thirdparty_buyer->country_code.\", buyer in cee=\".$thirdparty_buyer->isInEEC().\", idprod=\".$idprod.\", idprodfournprice=\".$idprodfournprice.\", SERVICE_ARE_ECOMMERCE_200238EC=\".(! empty($conf->global->SERVICES_ARE_ECOMMERCE_200238EC)?$conf->global->SERVICES_ARE_ECOMMERCE_200238EC:''));\n\n\t// If services are eServices according to EU Council Directive 2002/38/EC (http://ec.europa.eu/taxation_customs/taxation/vat/traders/e-commerce/article_1610_en.htm)\r\n\t// we use the buyer VAT.\r\n\tif (! empty($conf->global->SERVICE_ARE_ECOMMERCE_200238EC))\r\n\t{\r\n\t\t//print \"eee\".$thirdparty_buyer->isACompany();exit;\r\n\t\tif (! $thirdparty_seller->isInEEC() && $thirdparty_buyer->isInEEC() && ! $thirdparty_buyer->isACompany())\r\n\t\t{\r\n\t\t\t//print 'VATRULE 6';\r\n\t\t\treturn get_product_vat_for_country($idprod,$thirdparty_buyer,$idprodfournprice);\r\n\t\t}\r\n\t}\r\n\r\n\t// Si vendeur non assujeti a TVA (tva_assuj vaut 0/1 ou franchise/reel)\n\tif (is_numeric($thirdparty_seller->tva_assuj) && ! $thirdparty_seller->tva_assuj)\n\t{\n\t\t//print 'VATRULE 1';\n\t\treturn 0;\n\t}\n\tif (! is_numeric($thirdparty_seller->tva_assuj) && $thirdparty_seller->tva_assuj=='franchise')\n\t{\n\t\t//print 'VATRULE 2';\n\t\treturn 0;\n\t}\n\n\t//if (is_object($thirdparty_buyer) && ($thirdparty_seller->country_id == $thirdparty_buyer->country_id) && ($thirdparty_buyer->tva_assuj == 1 || $thirdparty_buyer->tva_assuj == 'reel'))\n\t// Le test ci-dessus ne devrait pas etre necessaire. Me signaler l'exemple du cas juridique concerne si le test suivant n'est pas suffisant.\n\n\t// Si le (pays vendeur = pays acheteur) alors la TVA par defaut=TVA du produit vendu. Fin de regle.\n\tif (($thirdparty_seller->country_code == $thirdparty_buyer->country_code)\n\t|| (in_array($thirdparty_seller->country_code,array('FR,MC')) && in_array($thirdparty_buyer->country_code,array('FR','MC')))) // Warning ->country_code not always defined\n\t{\n\t\t//print 'VATRULE 3';\n\t\treturn get_product_vat_for_country($idprod,$thirdparty_seller,$idprodfournprice);\n\t}\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (bien vendu = moyen de transports neuf comme auto, bateau, avion) alors TVA par defaut=0 (La TVA doit etre paye par l'acheteur au centre d'impots de son pays et non au vendeur). Fin de regle.\n\t// Non gere\n\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = entreprise) alors TVA par defaut=0. Fin de regle\n\t// Si (vendeur et acheteur dans Communaute europeenne) et (acheteur = particulier) alors TVA par defaut=TVA du produit vendu. Fin de regle\n\tif (($thirdparty_seller->isInEEC() && $thirdparty_buyer->isInEEC()))\n\t{\n\t\t$isacompany=$thirdparty_buyer->isACompany();\n\t\tif ($isacompany)\n\t\t{\n\t\t\t//print 'VATRULE 4';\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t//print 'VATRULE 5';\n\t\t\treturn get_product_vat_for_country($idprod,$thirdparty_seller,$idprodfournprice);\n\t\t}\n\t}\n\n\t// Sinon la TVA proposee par defaut=0. Fin de regle.\n\t// Rem: Cela signifie qu'au moins un des 2 est hors Communaute europeenne et que le pays differe\n\t//print 'VATRULE 7';\n\treturn 0;\n}\n\n\n/**\n *\tFonction qui renvoie si tva doit etre tva percue recuperable\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *  @param  int\t\t\t$idprod                 Id product\n *\t@return float       \t\t\t        \t0 or 1\n */\nfunction get_default_npr($thirdparty_seller, $thirdparty_buyer, $idprod)\n{\n\treturn 0;\n}\n\n/**\n *\tFunction that return localtax of a product line (according to seller, buyer and product vat rate)\n *   Si vendeur non assujeti a TVA, TVA par defaut=0. Fin de regle.\n *\t Si le (pays vendeur = pays acheteur) alors TVA par defaut=TVA du produit vendu. Fin de regle.\n *\t Sinon TVA proposee par defaut=0. Fin de regle.\n *\n *\t@param\tSociete\t\t$thirdparty_seller    \tObjet societe vendeuse\n *\t@param  Societe\t\t$thirdparty_buyer   \tObjet societe acheteuse\n *  @param\tint\t\t\t$local\t\t\t\t\tLocaltax to process (1 or 2)\n *\t@param  int\t\t\t$idprod\t\t\t\t\tId product\n *\t@return float        \t\t\t\t       \tlocaltax, -1 si ne peut etre determine\n *  @see get_default_tva\n */\nfunction get_default_localtax($thirdparty_seller, $thirdparty_buyer, $local, $idprod=0)\n{\n\tglobal $mysoc;\n\n\tif (!is_object($thirdparty_seller)) return -1;\n\tif (!is_object($thirdparty_buyer)) return -1;\n\n\tif ($local==1) // Localtax 1\n\t{\n\t\tif ($mysoc->country_code == 'ES')\n\t\t{\n\t\t\tif (is_numeric($thirdparty_buyer->localtax1_assuj) && ! $thirdparty_buyer->localtax1_assuj) return 0;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Si vendeur non assujeti a Localtax1, localtax1 par default=0\n\t\t\tif (is_numeric($thirdparty_seller->localtax1_assuj) && ! $thirdparty_seller->localtax1_assuj) return 0;\n\t\t\tif (! is_numeric($thirdparty_seller->localtax1_assuj) && $thirdparty_seller->localtax1_assuj=='localtax1off') return 0;\n\t\t}\n\t}\n\telseif ($local==2) //I Localtax 2\n\t{\n\t\t// Si vendeur non assujeti a Localtax2, localtax2 par default=0\n\t\tif (is_numeric($thirdparty_seller->localtax2_assuj) && ! $thirdparty_seller->localtax2_assuj) return 0;\n\t\tif (! is_numeric($thirdparty_seller->localtax2_assuj) && $thirdparty_seller->localtax2_assuj=='localtax2off') return 0;\n\t}\n\n\tif ($thirdparty_seller->country_code == $thirdparty_buyer->country_code)\n\t{\n\t\treturn get_product_localtax_for_country($idprod, $local, $thirdparty_seller);\n\t}\n\n\treturn 0;\n}\n\n/**\n *\tReturn yes or no in current language\n *\n *\t@param\tstring\t$yesno\t\t\tValue to test (1, 'yes', 'true' or 0, 'no', 'false')\n *\t@param\tstring\t$case\t\t\t1=Yes/No, 0=yes/no\n *\t@param\tint\t\t$color\t\t\t0=texte only, 1=Text is formated with a color font style ('ok' or 'error'), 2=Text is formated with 'ok' color.\n *\t@return\tstring\t\t\t\t\tHTML string\n */\nfunction yn($yesno, $case=1, $color=0)\n{\n\tglobal $langs;\n\t$result='unknown';\n\tif ($yesno == 1 || strtolower($yesno) == 'yes' || strtolower($yesno) == 'true') \t// A mettre avant test sur no a cause du == 0\n\t{\n\t\t$result=($case?$langs->trans(\"Yes\"):$langs->trans(\"yes\"));\n\t\t$classname='ok';\n\t}\n\telseif ($yesno == 0 || strtolower($yesno) == 'no' || strtolower($yesno) == 'false')\n\t{\n\t\t$result=($case?$langs->trans(\"No\"):$langs->trans(\"no\"));\n\t\tif ($color == 2) $classname='ok';\n\t\telse $classname='error';\n\t}\n\tif ($color) return '<font class=\"'.$classname.'\">'.$result.'</font>';\n\treturn $result;\n}\n\n\n/**\n *\tReturn a path to have a directory according to an id\n *  Examples:       '001' with level 3->\"0/0/1/\", '015' with level 3->\"0/1/5/\"\n *  Examples:       'ABC-1' with level 3 ->\"0/0/1/\", '015' with level 1->\"5/\"\n *\n *\t@param\tstring\t$num            Id to develop\n *\t@param  int\t\t$level\t\t    Level of development (1, 2 or 3 level)\n * \t@param\tint\t\t$alpha\t\t    Use alpha ref\n *  @param  int\t\t$withoutslash   0=With slash at end, 1=without slash at end\n *  @return\tstring\t\t\t\t\tDir to use\n */\nfunction get_exdir($num,$level=3,$alpha=0,$withoutslash=0)\n{\n\t$path = '';\n\tif (empty($alpha)) $num = preg_replace('/([^0-9])/i','',$num);\n\telse $num = preg_replace('/^.*\\-/i','',$num);\n\t$num = substr(\"000\".$num, -$level);\n\tif ($level == 1) $path = substr($num,0,1);\n\tif ($level == 2) $path = substr($num,1,1).'/'.substr($num,0,1);\n\tif ($level == 3) $path = substr($num,2,1).'/'.substr($num,1,1).'/'.substr($num,0,1);\n\tif (empty($withoutslash)) $path.='/';\n\treturn $path;\n}\n\n/**\n *\tCreation of a directory (this can create recursive subdir)\n *\n *\t@param\tstring\t$dir\t\tDirectory to create (Separator must be '/'. Example: '/mydir/mysubdir')\n *\t@param\tstring\t$dataroot\tData root directory (To avoid having the data root in the loop. Using this will also lost the warning on first dir PHP has no permission when open_basedir is used)\n *\t@return int         \t\t< 0 if KO, 0 = already exists, > 0 if OK\n */\nfunction dol_mkdir($dir, $dataroot='')\n{\n\tglobal $conf;\n\n\tdol_syslog(\"functions.lib::dol_mkdir: dir=\".$dir,LOG_INFO);\n\n\t$dir_osencoded=dol_osencode($dir);\n\tif (@is_dir($dir_osencoded)) return 0;\n\n\t$nberr=0;\n\t$nbcreated=0;\n\n\t$ccdir='';\n\tif (! empty($dataroot)) {\n\t\t// Remove data root from loop\n\t\t$dir = str_replace($dataroot.'/', '', $dir);\n\t\t$ccdir = $dataroot.'/';\n\t}\n\n\t$cdir = explode(\"/\", $dir);\n\t$num=count($cdir);\n\tfor ($i = 0; $i < $num; $i++)\n\t{\n\t\tif ($i > 0) $ccdir .= '/'.$cdir[$i];\n\t\telse $ccdir .= $cdir[$i];\n\t\tif (preg_match(\"/^.:$/\",$ccdir,$regs)) continue;\t// Si chemin Windows incomplet, on poursuit par rep suivant\n\n\t\t// Attention, le is_dir() peut echouer bien que le rep existe.\n\t\t// (ex selon config de open_basedir)\n\t\tif ($ccdir)\n\t\t{\n\t\t\t$ccdir_osencoded=dol_osencode($ccdir);\n\t\t\tif (! @is_dir($ccdir_osencoded))\n\t\t\t{\n\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' does not exists or is outside open_basedir PHP setting.\",LOG_DEBUG);\n\n\t\t\t\tumask(0);\n\t\t\t\t$dirmaskdec=octdec('0755');\n\t\t\t\tif (! empty($conf->global->MAIN_UMASK)) $dirmaskdec=octdec($conf->global->MAIN_UMASK);\n\t\t\t\t$dirmaskdec |= octdec('0111');  // Set x bit required for directories\n\t\t\t\tif (! @mkdir($ccdir_osencoded, $dirmaskdec))\n\t\t\t\t{\n\t\t\t\t\t// Si le is_dir a renvoye une fausse info, alors on passe ici.\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Fails to create directory '\".$ccdir.\"' or directory already exists.\",LOG_WARNING);\n\t\t\t\t\t$nberr++;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tdol_syslog(\"functions.lib::dol_mkdir: Directory '\".$ccdir.\"' created\",LOG_DEBUG);\n\t\t\t\t\t$nberr=0;\t// On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignore\n\t\t\t\t\t$nbcreated++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$nberr=0;\t// On remet a zero car si on arrive ici, cela veut dire que les echecs precedents peuvent etre ignores\n\t\t\t}\n\t\t}\n\t}\n\treturn ($nberr ? -$nberr : $nbcreated);\n}\n\n\n/**\n *\tReturn picto saying a field is required\n *\n *\t@return  string\t\tChaine avec picto obligatoire\n */\nfunction picto_required()\n{\n\treturn '<span class=\"fieldrequired\">*</span>';\n}\n\n\n/**\n *\tClean a string from all HTML tags and entities\n *\n *\t@param\tstring\t$StringHtml\t\t\tString to clean\n *\t@param\tstring\t$removelinefeed\t\tReplace also all lines feeds by a space\n *  @param  string\t$pagecodeto      \tEncoding of input string\n *\t@return string\t    \t\t\t\tString cleaned\n */\nfunction dol_string_nohtmltag($StringHtml,$removelinefeed=1,$pagecodeto='UTF-8')\n{\n\t$pattern = \"/<[^>]+>/\";\n\t$temp = dol_html_entity_decode($StringHtml,ENT_COMPAT,$pagecodeto);\n\t$temp = preg_replace($pattern,\"\",$temp);\n\n\t// Supprime aussi les retours\n\tif ($removelinefeed) $temp=str_replace(array(\"\\r\\n\",\"\\r\",\"\\n\"),\" \",$temp);\n\n\t// et les espaces doubles\n\twhile(strpos($temp,\"  \"))\n\t{\n\t\t$temp = str_replace(\"  \",\" \",$temp);\n\t}\n\t$CleanString = trim($temp);\n\treturn $CleanString;\n}\n\n\n/**\n *\tReplace CRLF in string with a HTML BR tag\n *\n *\t@param\tstring\t$stringtoencode\t\tString to encode\n *\t@param\tstring\t$nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br\n *  @param  string\t$forxml             false=Use <br>, true=Use <br />\n *\t@return\tstring\t\t\t\t\t\tString encoded\n */\nfunction dol_nl2br($stringtoencode,$nl2brmode=0,$forxml=false)\n{\n\tif (! $nl2brmode)\n\t{\n\t\t// We use @ to avoid warning on PHP4 that does not support entity encoding from UTF8;\n\t\tif (version_compare(PHP_VERSION, '5.3.0') < 0) return @nl2br($stringtoencode);\n\t\telse return @nl2br($stringtoencode,$forxml);\n\t}\n\telse\n\t{\n\t\t$ret=preg_replace('/(\\r\\n|\\r|\\n)/i',($forxml?'<br />':'<br>'),$stringtoencode);\n\t\treturn $ret;\n\t}\n}\n\n/**\n *\tThis function is called to encode a string into a HTML string but differs from htmlentities because\n * \tall entities but &,<,> are converted. This permits to encode special chars to entities with no double\n *  encoding for already encoded HTML strings.\n * \tThis function also remove last CR/BR.\n *  For PDF usage, you can show text by 2 ways:\n *              - writeHTMLCell -> param must be encoded into HTML.\n *              - MultiCell -> param must not be encoded into HTML.\n *              Because writeHTMLCell convert also \\n into <br>, if function\n *              is used to build PDF, nl2brmode must be 1\n *\n *\t@param\tstring\t$stringtoencode\t\tString to encode\n *\t@param\tint\t\t$nl2brmode\t\t\t0=Adding br before \\n, 1=Replacing \\n by br (for use with FPDF writeHTMLCell function for example)\n *  @param  string\t$pagecodefrom       Pagecode stringtoencode is encoded\n *  @return\tstring\t\t\t\t\t\tString encoded\n */\nfunction dol_htmlentitiesbr($stringtoencode,$nl2brmode=0,$pagecodefrom='UTF-8')\n{\n\tif (dol_textishtml($stringtoencode))\n\t{\n\t\t$newstring=$stringtoencode;\n\t\t$newstring=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i','<br>',$newstring);\t// Replace \"<br type=\"_moz\" />\" by \"<br>\". It's same and avoid pb with FPDF.\n\t\t$newstring=preg_replace('/<br>$/i','',$newstring);\t// Remove last <br>\n\t\t$newstring=strtr($newstring,array('&'=>'__and__','<'=>'__lt__','>'=>'__gt__','\"'=>'__dquot__'));\n\t\t$newstring=dol_htmlentities($newstring,ENT_COMPAT,$pagecodefrom);\t// Make entity encoding\n\t\t$newstring=strtr($newstring,array('__and__'=>'&','__lt__'=>'<','__gt__'=>'>','__dquot__'=>'\"'));\n\t\t//$newstring=strtr($newstring,array('__li__'=>\"<li>\\n\")); // Restore <li>\\n\n\t}\n\telse\n\t{\n\t\t$newstring=dol_nl2br(dol_htmlentities($stringtoencode,ENT_COMPAT,$pagecodefrom),$nl2brmode);\n\t}\n\t// Other substitutions that htmlentities does not do\n\t//$newstring=str_replace(chr(128),'&euro;',$newstring);\t// 128 = 0x80. Not in html entity table.     // Seems useles with TCPDF. Make bug with UTF8 languages\n\treturn $newstring;\n}\n\n/**\n *\tThis function is called to decode a HTML string (it decodes entities and br tags)\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@param\tstring\t$pagecodeto\t\t\tPage code for result\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlentitiesbr_decode($stringtodecode,$pagecodeto='UTF-8')\n{\n\t$ret=dol_html_entity_decode($stringtodecode,ENT_COMPAT,$pagecodeto);\n\t$ret=preg_replace('/'.\"\\r\\n\".'<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i',\"<br>\",$ret);\n\t$ret=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\r\\n\".'/i',\"\\r\\n\",$ret);\n\t$ret=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>'.\"\\n\".'/i',\"\\n\",$ret);\n\t$ret=preg_replace('/<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>/i',\"\\n\",$ret);\n\treturn $ret;\n}\n\n/**\n *\tThis function remove all ending \\n and br at end\n *\n *\t@param\tstring\t$stringtodecode\t\tString to decode\n *\t@return\tstring\t\t\t\t\t\tString decoded\n */\nfunction dol_htmlcleanlastbr($stringtodecode)\n{\n\t$ret=preg_replace('/(<br>|<br(\\s[\\sa-zA-Z_=\"]*)?\\/?>|'.\"\\n\".'|'.\"\\r\".')+$/i',\"\",$stringtodecode);\n\treturn $ret;\n}\n\n/**\n * Replace html_entity_decode functions to manage errors\n *\n * @param   string\t$a\t\tOperand a\n * @param   string\t$b\t\tOperand b\n * @param   string\t$c\t\tOperand c\n * @return  string\t\t\tString decoded\n */\nfunction dol_html_entity_decode($a,$b,$c='UTF-8')\n{\n\t// We use @ to avoid warning on PHP4 that does not support entity decoding to UTF8;\n\t$ret=@html_entity_decode($a,$b,$c);\n\treturn $ret;\n}\n\n/**\n * Replace htmlentities functions to manage errors\n *\n * @param   string\t$a\t\tOperand a\n * @param   string\t$b\t\tOperand b\n * @param   string\t$c\t\tOperand c\n * @return  string      \tString encoded\n */\nfunction dol_htmlentities($a,$b,$c='UTF-8')\n{\n\t// We use @ to avoid warning on PHP4 that does not support entity decoding to UTF8;\n\t$ret=@htmlentities($a,$b,$c);\n\treturn $ret;\n}\n\n\n/**\n *\tCheck if a string is a correct iso string\n *\tIf not, it will we considered not HTML encoded even if it is by FPDF.\n *\tExample, if string contains euro symbol that has ascii code 128\n *\n *\t@param\tstring\t$s      String to check\n *\t@return\tint     \t\t0 if bad iso, 1 if good iso\n */\nfunction dol_string_is_good_iso($s)\n{\n\t$len=dol_strlen($s);\n\t$ok=1;\n\tfor($scursor=0;$scursor<$len;$scursor++)\n\t{\n\t\t$ordchar=ord($s{$scursor});\n\t\t//print $scursor.'-'.$ordchar.'<br>';\n\t\tif ($ordchar < 32 && $ordchar != 13 && $ordchar != 10) { $ok=0; break; }\n\t\tif ($ordchar > 126 && $ordchar < 160) { $ok=0; break; }\n\t}\n\treturn $ok;\n}\n\n\n/**\n *\tReturn nb of lines of a clear text\n *\n *\t@param\tstring\t$s\t\t\tString to check\n * \t@param\tstring\t$maxchar\tNot yet used\n *\t@return\tint\t\t\t\t\tNumber of lines\n */\nfunction dol_nboflines($s,$maxchar=0)\n{\n\tif ($s == '') return 0;\n\t$arraystring=explode(\"\\n\",$s);\n\t$nb=count($arraystring);\n\n\treturn $nb;\n}\n\n\n/**\n *\tReturn nb of lines of a formated text with \\n and <br> (we can't have both \\n and br)\n *\n *\t@param\tstring\t$text      \t\tText\n *\t@param\tint\t\t$maxlinesize  \tLargeur de ligne en caracteres (ou 0 si pas de limite - defaut)\n * \t@param\tstring\t$charset\t\tGive the charset used to encode the $text variable in memory.\n *\t@return int\t\t\t\t\t\tNumber of lines\n */\nfunction dol_nboflines_bis($text,$maxlinesize=0,$charset='UTF-8')\n{\n\t$repTable = array(\"\\t\" => \" \", \"\\n\" => \"<br>\", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\tif (dol_textishtml($text)) $repTable = array(\"\\t\" => \" \", \"\\n\" => \" \", \"\\r\" => \" \", \"\\0\" => \" \", \"\\x0B\" => \" \");\n\n\t$text = strtr($text, $repTable);\n\tif ($charset == 'UTF-8') { $pattern = '/(<br[^>]*>)/Uu'; }\t// /U is to have UNGREEDY regex to limit to one html tag. /u is for UTF8 support\n\telse $pattern = '/(<br[^>]*>)/U';\t\t\t\t\t\t\t// /U is to have UNGREEDY regex to limit to one html tag.\n\t$a = preg_split($pattern, $text, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);\n\n\t$nblines = floor((count($a)+1)/2);\n\t// count possible auto line breaks\n\tif($maxlinesize)\n\t{\n\t\tforeach ($a as $line)\n\t\t{\n\t\t\tif (dol_strlen($line)>$maxlinesize)\n\t\t\t{\n\t\t\t\t//$line_dec = html_entity_decode(strip_tags($line));\n\t\t\t\t$line_dec = html_entity_decode($line);\n\t\t\t\tif(dol_strlen($line_dec)>$maxlinesize)\n\t\t\t\t{\n\t\t\t\t\t$line_dec=wordwrap($line_dec,$maxlinesize,'\\n',true);\n\t\t\t\t\t$nblines+=substr_count($line_dec,'\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $nblines;\n}\n\n/**\n *\t Same function than microtime in PHP 5 but compatible with PHP4\n *\n *\t @return\t\tfloat\t\tTime (millisecondes) with microsecondes in decimal part\n */\nfunction dol_microtime_float()\n{\n\tlist($usec, $sec) = explode(\" \", microtime());\n\treturn ((float) $usec + (float) $sec);\n}\n\n/**\n *\tReturn if a text is a html content\n *\n *\t@param\tstring\t$msg\t\tContent to check\n *\t@param\tint\t\t$option\t\t0=Full detection, 1=Fast check\n *\t@return\tboolean\t\t\t\ttrue/false\n *\t@see\tdol_concatdesc\n */\nfunction dol_textishtml($msg,$option=0)\n{\n\tif ($option == 1)\n\t{\n\t\tif (preg_match('/<html/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<br/i',$msg))\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\telse\n\t{\n\t\tif (preg_match('/<html/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<body/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<br/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<span/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<div/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<li/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<table/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<font/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<strong/i',$msg))\t\t\treturn true;\n\t\telseif (preg_match('/<img/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<i>/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/<b>/i',$msg))\t\t\t\treturn true;\n\t\telseif (preg_match('/&[A-Z0-9]{1,6};/i',$msg))\treturn true;    // Html entities names (http://www.w3schools.com/tags/ref_entities.asp)\n\t\telseif (preg_match('/&#[0-9]{2,3};/i',$msg))\treturn true;    // Html entities numbers (http://www.w3schools.com/tags/ref_entities.asp)\n\t\treturn false;\n\t}\n}\n\n/**\n *  Concat 2 descriptions (second one after first one)\n *  text1 html + text2 html => text1 + '<br>' + text2\n *  text1 html + text2 txt  => text1 + '<br>' + dol_nl2br(text2)\n *  text1 txt  + text2 html => dol_nl2br(text1) + '<br>' + text2\n *  text1 txt  + text2 txt  => text1 + '\\n' + text2\n *\n *  @param\tstring\t$text1\t\tText 1\n *  @param\tstring\t$text2\t\tText 2\n *  @param  string\t$forxml     false=Use <br>, true=Use <br />\n *  @return\tstring\t\t\t\tText 1 + new line + Text2\n *  @see    dol_textishtml\n */\nfunction dol_concatdesc($text1,$text2,$forxml=false)\n{\n\t$ret='';\n\t$ret.= (! dol_textishtml($text1) && dol_textishtml($text2))?dol_nl2br($text1, 0, $forxml):$text1;\n\t$ret.= (! empty($text1) && ! empty($text2)) ? ((dol_textishtml($text1) || dol_textishtml($text2))?($forxml?\"<br \\>\\n\":\"<br>\\n\") : \"\\n\") : \"\";\n\t$ret.= (dol_textishtml($text1) && ! dol_textishtml($text2))?dol_nl2br($text2, 0, $forxml):$text2;\n\treturn $ret;\n}\n\n/**\n *  Make substition into a string\n *  There is two type of substitions:\n * \t- From $substitutionarray (oldval=>newval)\n * \t- From special constants (__XXX__=>f(objet->xxx)) by substitutions modules\n *\n *  @param\tstring\t$chaine      \t\t\tSource string in which we must do substitution\n *  @param  array\t$substitutionarray\t\tArray with key->val to substitute\n * \t@return string  \t\t    \t\t\tOutput string after subsitutions\n *  @see\tcomplete_substitutions_array\n */\nfunction make_substitutions($chaine,$substitutionarray)\n{\n\tglobal $conf;\n\n\tif (! is_array($substitutionarray)) return 'ErrorBadParameterSubstitutionArrayWhenCalling_make_substitutions';\n\n\t// Make substitition\n\tforeach ($substitutionarray as $key => $value)\n\t{\n\t\tif ($key == '__SIGNATURE__' && (! empty($conf->global->MAIN_MAIL_DO_NOT_USE_SIGN))) $value='';\n\t\t$chaine=str_replace(\"$key\",\"$value\",$chaine);\t// We must keep the \" to work when value is 123.5 for example\n\t}\n\n\treturn $chaine;\n}\n\n/**\n *  Complete the $substitutionarray with more entries\n *\n *  @param  array\t\t&$substitutionarray\t\tArray substitution old value => new value value\n *  @param  Translate\t$outputlangs            If we want substitution from special constants, we provide a language\n *  @param  Object\t\t$object                 If we want substitution from special constants, we provide data in a source object\n *  @param  Object/array  $parameters       Add more parameters (useful to pass product lines)\n *  @param  string              $callfunc               What is the name of the custom function that will be called? (default: completesubstitutionarray)\n *  @return\tvoid\n *  @see \tmake_substitutions\n */\nfunction complete_substitutions_array(&$substitutionarray,$outputlangs,$object='',$parameters=null,$callfunc=\"completesubstitutionarray\")\n{\n\tglobal $conf,$user;\n\n\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t// Check if there is external substitution to do asked by plugins\n\t$dirsubstitutions=array_merge(array(),(array) $conf->modules_parts['substitutions']);\n\n\tforeach($dirsubstitutions as $reldir)\n\t{\n\t\t$dir=dol_buildpath($reldir,0);\n\n\t\t// Check if directory exists\n\t\tif (! dol_is_dir($dir)) continue;\n\n\t\t$substitfiles=dol_dir_list($dir,'files',0,'functions_');\n\t\tforeach($substitfiles as $substitfile)\n\t\t{\n\t\t\tif (preg_match('/functions_(.*)\\.lib\\.php/i',$substitfile['name'],$reg))\n\t\t\t{\n\t\t\t\t$module=$reg[1];\n\n\t\t\t\tdol_syslog(\"Library functions_\".$substitfile['name'].\" found into \".$dir);\n\t\t\t\trequire_once $dir.$substitfile['name'];\n\t\t\t\t$function_name=$module.\"_\".$callfunc;\n\t\t\t\tif (function_exists($function_name)) $function_name($substitutionarray,$outputlangs,$object,$parameters);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\ttimestamp\t$date_start    Start date\n *    @param    timestamp\t$date_end      End date\n *    @param    string\t\t$format        Output format\n *    @param\tTranslate\t$outputlangs   Output language\n *    @return\tvoid\n */\nfunction print_date_range($date_start,$date_end,$format = '',$outputlangs='')\n{\n\tprint get_date_range($date_start,$date_end,$format,$outputlangs);\n}\n\n/**\n *    Format output for start and end date\n *\n *    @param\ttimestamp\t$date_start    Start date\n *    @param    timestamp\t$date_end      End date\n *    @param    string\t\t$format        Output format\n *    @param\tTranslate\t$outputlangs   Output language\n *    @return\tstring\t\t\t\t\t\tString\n */\nfunction get_date_range($date_start,$date_end,$format = '',$outputlangs='')\n{\n\tglobal $langs;\n\n\t$out='';\n\n\tif (! is_object($outputlangs)) $outputlangs=$langs;\n\n\tif ($date_start && $date_end)\n\t{\n\t\t$out.= ' ('.$outputlangs->trans('DateFromTo',dol_print_date($date_start, $format, false, $outputlangs),dol_print_date($date_end, $format, false, $outputlangs)).')';\n\t}\n\tif ($date_start && ! $date_end)\n\t{\n\t\t$out.= ' ('.$outputlangs->trans('DateFrom',dol_print_date($date_start, $format, false, $outputlangs)).')';\n\t}\n\tif (! $date_start && $date_end)\n\t{\n\t\t$out.= ' ('.$outputlangs->trans('DateUntil',dol_print_date($date_end, $format, false, $outputlangs)).')';\n\t}\n\n\treturn $out;\n}\n\n/**\n *\tSet event message in dol_events session\n *\n *\t@param\tmixed\t$mesgs\t\t\tMessage string or array\n *  @param  string\t$style      \tWhich style to use ('mesgs', 'warnings', 'errors')\n *  @return\tvoid\n *  @see\tdol_htmloutput_events\n */\nfunction setEventMessage($mesgs, $style='mesgs')\n{\n\tif (! in_array((string) $style, array('mesgs','warnings','errors'))) dol_print_error('','Bad parameter for setEventMessage');\n\tif (! is_array($mesgs))\t\t// If mesgs is a string\n\t{\n\t\tif ($mesgs) $_SESSION['dol_events'][$style][] = $mesgs;\n\t}\n\telse\t\t\t\t\t\t// If mesgs is an array\n\t{\n\t\tforeach($mesgs as $mesg)\n\t\t{\n\t\t\tif ($mesg) $_SESSION['dol_events'][$style][] = $mesg;\n\t\t}\n\t}\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *\n *  @return\tvoid\n *  @see    dol_htmloutput_mesg\n */\nfunction dol_htmloutput_events()\n{\n\t// Show mesgs\n\tif (isset($_SESSION['dol_events']['mesgs'])) {\n\t\tdol_htmloutput_mesg('', $_SESSION['dol_events']['mesgs']);\n\t\tunset($_SESSION['dol_events']['mesgs']);\n\t}\n\n\t// Show errors\n\tif (isset($_SESSION['dol_events']['errors'])) {\n\t\tdol_htmloutput_mesg('', $_SESSION['dol_events']['errors'], 'error');\n\t\tunset($_SESSION['dol_events']['errors']);\n\t}\n\n\t// Show warnings\n\tif (isset($_SESSION['dol_events']['warnings'])) {\n\t\tdol_htmloutput_mesg('', $_SESSION['dol_events']['warnings'], 'warning');\n\t\tunset($_SESSION['dol_events']['warnings']);\n\t}\n}\n\n/**\n *\tGet formated messages to output (Used to show messages on html output).\n *\n *\t@param\tstring\t\t$mesgstring\t\tMessage string\n *\t@param\tarray\t\t$mesgarray      Messages array\n *  @param  string\t\t$style          Style of message output ('ok' or 'error')\n *  @param  int\t\t\t$keepembedded   Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *\t@return\tstring\t\t\t\t\t\tReturn html output\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_errors\n */\nfunction get_htmloutput_mesg($mesgstring='',$mesgarray='', $style='ok', $keepembedded=0)\n{\n\tglobal $conf, $langs;\n\n\t$ret='';\n\t$out='';\n\t$divstart=$divend='';\n\n\t// If inline message with no format, we add it.\n\tif ((empty($conf->use_javascript_ajax) || ! empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) || $keepembedded) && ! preg_match('/<div class=\".*\">/i',$out))\n\t{\n\t\t$divstart='<div class=\"'.$style.'\">';\n\t\t$divend='</div>';\n\t}\n\n\tif ((is_array($mesgarray) && count($mesgarray)) || $mesgstring)\n\t{\n\t\t$langs->load(\"errors\");\n\t\t$out.=$divstart;\n\t\tif (is_array($mesgarray) && count($mesgarray))\n\t\t{\n\t\t\tforeach($mesgarray as $message)\n\t\t\t{\n\t\t\t\t$ret++;\n\t\t\t\t$out.= $langs->trans($message);\n\t\t\t\tif ($ret < count($mesgarray)) $out.= \"<br>\\n\";\n\t\t\t}\n\t\t}\n\t\tif ($mesgstring)\n\t\t{\n\t\t\t$langs->load(\"errors\");\n\t\t\t$ret++;\n\t\t\t$out.= $langs->trans($mesgstring);\n\t\t}\n\t\t$out.=$divend;\n\t}\n\n\tif ($out)\n\t{\n\t\tif (! empty($conf->use_javascript_ajax) && empty($conf->global->MAIN_DISABLE_JQUERY_JNOTIFY) && empty($keepembedded))\n\t\t{\n\t\t\t$return = '<script type=\"text/javascript\">\n\t\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t\tvar block = '.(! empty($conf->global->MAIN_USE_JQUERY_BLOCKUI)?\"true\":\"false\").'\n\t\t\t\t\t\tif (block) {\n\t\t\t\t\t\t\t$.dolEventValid(\"\",\"'.dol_escape_js($out).'\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$.jnotify(\"'.dol_escape_js($out).'\",\n\t\t\t\t\t\t\t\"'.($style==\"ok\" ? 3000 : $style).'\",\n\t\t\t\t\t\t\t'.($style==\"ok\" ? \"false\" : \"true\").',\n\t\t\t\t\t\t\t{ remove: function (){} } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t</script>';\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$return = $out;\n\t\t}\n\t}\n\n\treturn $return;\n}\n\n/**\n *  Get formated error messages to output (Used to show messages on html output).\n *\n *  @param\tstring\t$mesgstring         Error message\n *  @param  array\t$mesgarray          Error messages array\n *  @param  int\t\t$keepembedded       Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return string                \t\tReturn html output\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_mesg\n */\nfunction get_htmloutput_errors($mesgstring='', $mesgarray='', $keepembedded=0)\n{\n\treturn get_htmloutput_mesg($mesgstring, $mesgarray,'error',$keepembedded);\n}\n\n/**\n *\tPrint formated messages to output (Used to show messages on html output).\n *\n *\t@param\tstring\t$mesgstring\t\t Message\n *\t@param\tarray\t$mesgarray       Messages array\n *  @param  string\t$style           Which style to use ('ok', 'warning', 'error')\n *  @param  int\t\t$keepembedded    Set to 1 if message must be kept embedded into its html place (this disable jnotify)\n *  @return\tvoid\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_errors\n */\nfunction dol_htmloutput_mesg($mesgstring='',$mesgarray='', $style='ok', $keepembedded=0)\n{\n\tif (empty($mesgstring) && (! is_array($mesgarray) || count($mesgarray) == 0)) return;\n\n\t$iserror=0;\n\t$iswarning=0;\n\tif (is_array($mesgarray))\n\t{\n\t\tforeach($mesgarray as $val)\n\t\t{\n\t\t\tif ($val && preg_match('/class=\"error\"/i',$val)) { $iserror++; break; }\n\t\t\tif ($val && preg_match('/class=\"warning\"/i',$val)) { $iswarning++; break; }\n\t\t}\n\t}\n\telse if ($mesgstring && preg_match('/class=\"error\"/i',$mesgstring)) $iserror++;\n\telse if ($mesgstring && preg_match('/class=\"warning\"/i',$mesgstring)) $iswarning++;\n\tif ($style=='error') $iserror++;\n\tif ($style=='warning') $iswarning++;\n\n\tif ($iserror || $iswarning)\n\t{\n\t\t// Remove div from texts\n\t\t$mesgstring=preg_replace('/<\\/div><div class=\"(error|warning)\">/','<br>',$mesgstring);\n\t\t$mesgstring=preg_replace('/<div class=\"(error|warning)\">/','',$mesgstring);\n\t\t$mesgstring=preg_replace('/<\\/div>/','',$mesgstring);\n\t\t// Remove div from texts array\n\t\tif (is_array($mesgarray))\n\t\t{\n\t\t\t$newmesgarray=array();\n\t\t\tforeach($mesgarray as $val)\n\t\t\t{\n\t\t\t\t$tmpmesgstring=preg_replace('/<\\/div><div class=\"(error|warning)\">/','<br>',$val);\n\t\t\t\t$tmpmesgstring=preg_replace('/<div class=\"(error|warning)\">/','',$tmpmesgstring);\n\t\t\t\t$tmpmesgstring=preg_replace('/<\\/div>/','',$tmpmesgstring);\n\t\t\t\t$newmesgarray[]=$tmpmesgstring;\n\t\t\t}\n\t\t\t$mesgarray=$newmesgarray;\n\t\t}\n\t\tprint get_htmloutput_mesg($mesgstring,$mesgarray,($iserror?'error':'warning'),$keepembedded);\n\t}\n\telse print get_htmloutput_mesg($mesgstring,$mesgarray,'ok',$keepembedded);\n}\n\n/**\n *  Print formated error messages to output (Used to show messages on html output).\n *\n *  @param\tstring\t$mesgstring          Error message\n *  @param  array\t$mesgarray           Error messages array\n *  @param  int\t\t$keepembedded        Set to 1 in error message must be kept embedded into its html place (this disable jnotify)\n *  @return\tvoid\n *\n *  @see    dol_print_error\n *  @see    dol_htmloutput_mesg\n */\nfunction dol_htmloutput_errors($mesgstring='', $mesgarray='', $keepembedded=0)\n{\n\tdol_htmloutput_mesg($mesgstring, $mesgarray, 'error', $keepembedded);\n}\n\n/**\n * \tAdvanced sort array by second index function, which produces ascending (default)\n *  or descending output and uses optionally natural case insensitive sorting (which\n *  can be optionally case sensitive as well).\n *\n *  @param      array\t\t&$array      \t\tArray to sort (array of array('key','otherkey1','otherkey2'...))\n *  @param      string\t\t$index\t\t\t\tKey in array to use for sorting criteria\n *  @param      int\t\t\t$order\t\t\t\tSort order\n *  @param      int\t\t\t$natsort\t\t\t1=use \"natural\" sort (natsort), 0=use \"standard sort (asort)\n *  @param      int\t\t\t$case_sensitive\t\t1=sort is case sensitive, 0=not case sensitive\n *  @return     array\t\t\t\t\t\t\tSorted array\n */\nfunction dol_sort_array(&$array, $index, $order='asc', $natsort=0, $case_sensitive=0)\n{\n\t// Clean parameters\n\t$order=strtolower($order);\n\n\t$sizearray=count($array);\n\tif (is_array($array) && $sizearray>0)\n\t{\n\t\tforeach(array_keys($array) as $key) $temp[$key]=$array[$key][$index];\n\t\tif (!$natsort) ($order=='asc') ? asort($temp) : arsort($temp);\n\t\telse\n\t\t{\n\t\t\t($case_sensitive) ? natsort($temp) : natcasesort($temp);\n\t\t\tif($order!='asc') $temp=array_reverse($temp,TRUE);\n\t\t}\n\t\tforeach(array_keys($temp) as $key) (is_numeric($key))? $sorted[]=$array[$key] : $sorted[$key]=$array[$key];\n\t\treturn $sorted;\n\t}\n\treturn $array;\n}\n\n\n/**\n *      Check if a string is in UTF8\n *\n *      @param\tstring\t$str        String to check\n * \t\t@return\tboolean\t\t\t\tTrue if string is UTF8 or ISO compatible with UTF8, False if not (ISO with special char or Binary)\n */\nfunction utf8_check($str)\n{\n\t// We must use here a binary strlen function (so not dol_strlen)\n\t$strLength = dol_strlen($str);\n\tfor ($i=0; $i<$strLength; $i++)\n\t{\n\t\tif (ord($str[$i]) < 0x80) continue; // 0bbbbbbb\n\t\telseif ((ord($str[$i]) & 0xE0) == 0xC0) $n=1; // 110bbbbb\n\t\telseif ((ord($str[$i]) & 0xF0) == 0xE0) $n=2; // 1110bbbb\n\t\telseif ((ord($str[$i]) & 0xF8) == 0xF0) $n=3; // 11110bbb\n\t\telseif ((ord($str[$i]) & 0xFC) == 0xF8) $n=4; // 111110bb\n\t\telseif ((ord($str[$i]) & 0xFE) == 0xFC) $n=5; // 1111110b\n\t\telse return false; // Does not match any model\n\t\tfor ($j=0; $j<$n; $j++) { // n bytes matching 10bbbbbb follow ?\n\t\t\tif ((++$i == strlen($str)) || ((ord($str[$i]) & 0xC0) != 0x80))\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n/**\n *      Return an UTF-8 string encoded into OS filesystem encoding. This function is used to define\n * \t    value to pass to filesystem PHP functions.\n *\n *      @param\tstring\t$str        String to encode (UTF-8)\n * \t\t@return\tstring\t\t\t\tEncoded string (UTF-8, ISO-8859-1)\n */\nfunction dol_osencode($str)\n{\n\tglobal $conf;\n\n\t$tmp=ini_get(\"unicode.filesystem_encoding\");\t\t\t\t\t\t// Disponible avec PHP 6.0\n\tif (empty($tmp) && ! empty($_SERVER[\"WINDIR\"])) $tmp='iso-8859-1';\t// By default for windows\n\tif (empty($tmp)) $tmp='utf-8';\t\t\t\t\t\t\t\t\t\t// By default for other\n\tif (! empty($conf->global->MAIN_FILESYSTEM_ENCODING)) $tmp=$conf->global->MAIN_FILESYSTEM_ENCODING;\n\n\tif ($tmp == 'iso-8859-1') return utf8_decode($str);\n\treturn $str;\n}\n\n\n/**\n *      Return an id or code from a code or id. Store Code-Id in a cache.\n *\n * \t\t@param\tDoliDB\t$db\t\t\tDatabase handler\n * \t\t@param\tstring\t$key\t\tCode to get Id\n * \t\t@param\tstring\t$tablename\tTable name without prefix\n * \t\t@param\tstring\t$fieldkey\tField for code\n * \t\t@param\tstring\t$fieldid\tField for id\n *      @return int\t\t\t\t\tId of code\n */\nfunction dol_getIdFromCode($db,$key,$tablename,$fieldkey='code',$fieldid='id')\n{\n\tglobal $cache_codes;\n\n\t// If key empty\n\tif ($key == '') return '';\n\n\t// Check in cache\n\tif (isset($cache_codes[$tablename][$key]))\t// Can be defined to 0 or ''\n\t{\n\t\treturn $cache_codes[$tablename][$key];   // Found in cache\n\t}\n\n\t$sql = \"SELECT \".$fieldid.\" as id\";\n\t$sql.= \" FROM \".MAIN_DB_PREFIX.$tablename;\n\t$sql.= \" WHERE \".$fieldkey.\" = '\".$key.\"'\";\n\tdol_syslog('dol_getIdFromCode sql='.$sql,LOG_DEBUG);\n\t$resql = $db->query($sql);\n\tif ($resql)\n\t{\n\t\t$obj = $db->fetch_object($resql);\n\t\tif ($obj) $cache_codes[$tablename][$key]=$obj->id;\n\t\telse $cache_codes[$tablename][$key]='';\n\t\t$db->free($resql);\n\t\treturn $cache_codes[$tablename][$key];\n\t}\n\telse\n\t{\n\t\tdol_syslog(\"dol_getIdFromCode error=\".$db->lasterror(),LOG_ERR);\n\t\treturn -1;\n\t}\n}\n\n/**\n * Verify if condition in string is ok or not\n *\n * @param \tstring\t\t$strRights\t\tString with condition to check\n * @return \tboolean\t\t\t\t\t\tTrue or False. Return true if strRights is ''\n */\nfunction verifCond($strRights)\n{\n\tglobal $user,$conf,$langs;\n\tglobal $leftmenu;\n\tglobal $rights;    // To export to dol_eval function\n\n\t//print $strRights.\"<br>\\n\";\n\t$rights = true;\n\tif ($strRights != '')\n\t{\n\t\t//$tab_rights = explode('&&', $strRights);\n\t\t//$i = 0;\n\t\t//while (($i < count($tab_rights)) && ($rights == true)) {\n\t\t$str = 'if(!(' . $strRights . ')) { $rights = false; }';\n\t\tdol_eval($str);\n\t\t//\t$i++;\n\t\t//}\n\t}\n\treturn $rights;\n}\n\n/**\n * Replace eval function to add more security.\n * This function is called by verifCond() or trans() and transnoentitiesnoconv().\n *\n * @param \tstring\t$s\t\t\t\tString to evaluate\n * @param\tint\t\t$returnvalue\t0=No return (used to execute $a=something). 1=Value of eval is returned (used to eval $something).\n * @return\tmixed\t\t\t\t\tNothing or return of eval\n */\nfunction dol_eval($s,$returnvalue=0)\n{\n\t// Only global variables can be changed by eval function and returned to caller\n\tglobal $langs, $user, $conf;\n\tglobal $leftmenu;\n\tglobal $rights;\n\n\t//print $s.\"<br>\\n\";\n\tif ($returnvalue) return eval('return '.$s.';');\n\telse eval($s);\n}\n\n/**\n* Return if var element is ok\n*\n* @param   string      $element    Variable to check\n* @return  boolean                 Return true of variable is not empty\n*/\nfunction dol_validElement($element)\n{\n\treturn (trim($element) != '');\n}\n\n/**\n * \tReturn img flag of country for a language code or country code\n *\n * \t@param\tstring\t$codelang\tLanguage code (en_IN, fr_CA...) or Country code (IN, FR)\n * \t@return\tstring\t\t\t\tHTML img string with flag.\n */\nfunction picto_from_langcode($codelang)\n{\n\tglobal $langs;\n\n\tif ($codelang == 'auto')\n\t{\n\t\treturn img_picto_common($langs->trans('AutoDetectLang'), 'flags/int.png');\n\t}\n\n\t$langtocountryflag = array(\n\t\t'ar_AR' => '',\n\t\t'ca_ES' => 'catalonia',\n\t\t'da_DA' => 'dk',\n\t\t'fr_CA' => 'mq',\n\t\t'sv_SV' => 'se'\n\t);\n\n\tif (isset($langtocountryflag[$codelang])) $flagImage = $langtocountryflag[$codelang];\n\telse\n\t{\n\t\t$tmparray = explode('_', $codelang);\n\t\t$flagImage = empty($tmparray[1]) ? $tmparray[0] : $tmparray[1];\n\t}\n\n\treturn img_picto_common($codelang, 'flags/'.strtolower($flagImage).'.png');\n}\n\n/**\n *  Complete or removed entries into a head array (used to build tabs) with value added by external modules.\n *  Such values are declared into $conf->tabs_modules.\n *\n *  @param\tConf\t\t$conf           Object conf\n *  @param  Translate\t$langs          Object langs\n *  @param  Object\t\t$object         Object object\n *  @param  array\t\t&$head          Object head\n *  @param  int\t\t\t&$h             New position to fill\n *  @param  string\t\t$type           Value for object where objectvalue can be\n *                              \t\t'thirdparty'       to add a tab in third party view\n *\t\t                              \t'intervention'     to add a tab in intervention view\n *     \t\t                         \t'supplier_order'   to add a tab in supplier order view\n *          \t\t                    'supplier_invoice' to add a tab in supplier invoice view\n *                  \t\t            'invoice'          to add a tab in customer invoice view\n *                          \t\t    'order'            to add a tab in customer order view\n *                      \t\t        'product'          to add a tab in product view\n *                              \t\t'propal'           to add a tab in propal view\n *                              \t\t'user'             to add a tab in user view\n *                              \t\t'group'            to add a tab in group view\n * \t\t        \t                    'member'           to add a tab in fundation member view\n *      \t\t                        'categories_x'\t   to add a tab in category view ('x': type of category (0=product, 1=supplier, 2=customer, 3=member)\n *  @param  string\t\t$mode  \t        'add' to complete head, 'remove' to remove entries\n *\t@return\tvoid\n */\nfunction complete_head_from_modules($conf,$langs,$object,&$head,&$h,$type,$mode='add')\n{\n\tif (isset($conf->tabs_modules[$type]) && is_array($conf->tabs_modules[$type]))\n\t{\n\t\tforeach ($conf->tabs_modules[$type] as $value)\n\t\t{\n\t\t\t$values=explode(':',$value);\n\n\t\t\tif ($mode == 'add' && ! preg_match('/^\\-/',$values[1]))\n\t\t\t{\n\t\t\t\tif (count($values) == 6)       // new declaration with permissions:  $value='objecttype:+tabname1:Title1:langfile@mymodule:$user->rights->mymodule->read:/mymodule/mynewtab1.php?id=__ID__'\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\n\t\t\t\t\tif (verifCond($values[4]))\n\t\t\t\t\t{\n\t\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', (! empty($object->id)?$object->id:''), $values[5]), 1);\n\t\t\t\t\t\t$head[$h][1] = $langs->trans($values[2]);\n\t\t\t\t\t\t$head[$h][2] = str_replace('+','',$values[1]);\n\t\t\t\t\t\t$h++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (count($values) == 5)       // new declaration\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t\tif ($values[3]) $langs->load($values[3]);\n\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', (! empty($object->id)?$object->id:''), $values[4]), 1);\n\t\t\t\t\t$head[$h][1] = $langs->trans($values[2]);\n\t\t\t\t\t$head[$h][2] = str_replace('+','',$values[1]);\n\t\t\t\t\t$h++;\n\t\t\t\t}\n\t\t\t\telse if (count($values) == 4)   // old declaration, for backward compatibility\n\t\t\t\t{\n\t\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t\tif ($values[2]) $langs->load($values[2]);\n\t\t\t\t\t$head[$h][0] = dol_buildpath(preg_replace('/__ID__/i', (! empty($object->id)?$object->id:''), $values[3]), 1);\n\t\t\t\t\t$head[$h][1] = $langs->trans($values[1]);\n\t\t\t\t\t$head[$h][2] = 'tab'.$values[1];\n\t\t\t\t\t$h++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($mode == 'remove' && preg_match('/^\\-/',$values[1]))\n\t\t\t{\n\t\t\t\tif ($values[0] != $type) continue;\n\t\t\t\t$tabname=str_replace('-','',$values[1]);\n\t\t\t\tforeach($head as $key => $val)\n\t\t\t\t{\n\t\t\t\t\t$condition = (! empty($values[3]) ? verifCond($values[3]) : 1);\n\t\t\t\t\tif ($head[$key][2]==$tabname && $condition)\n\t\t\t\t\t{\n\t\t\t\t\t\tunset($head[$key]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Print common footer :\n * \t\tconf->global->MAIN_HTML_FOOTER\n * \t\tconf->global->MAIN_GOOGLE_AN_ID\n * \t\tDOL_TUNING\n * \t\tconf->logbuffer\n *\n * @param\tstring\t$zone\t'private' (for private pages) or 'public' (for public pages)\n * @return\tvoid\n */\nfunction printCommonFooter($zone='private')\n{\n\tglobal $conf;\n\tglobal $micro_start_time;\n\n\tif ($zone == 'private') print \"\\n\".'<!-- Common footer for private page -->'.\"\\n\";\n\telse print \"\\n\".'<!-- Common footer for public page -->'.\"\\n\";\n\n\tif (! empty($conf->global->MAIN_HTML_FOOTER)) print $conf->global->MAIN_HTML_FOOTER.\"\\n\";\n\n\t// Google Analytics (need Google module)\n\tif (! empty($conf->global->MAIN_GOOGLE_AN_ID))\n\t{\n\t\tprint \"\\n\";\n\t\tprint '<script type=\"text/javascript\">'.\"\\n\";\n\t\tprint '  var _gaq = _gaq || [];'.\"\\n\";\n\t\tprint '  _gaq.push([\\'_setAccount\\', \\''.$conf->global->MAIN_GOOGLE_AN_ID.'\\']);'.\"\\n\";\n\t\tprint '  _gaq.push([\\'_trackPageview\\']);'.\"\\n\";\n\t\tprint ''.\"\\n\";\n\t\tprint '  (function() {'.\"\\n\";\n\t\tprint '    var ga = document.createElement(\\'script\\'); ga.type = \\'text/javascript\\'; ga.async = true;'.\"\\n\";\n\t\tprint '    ga.src = (\\'https:\\' == document.location.protocol ? \\'https://ssl\\' : \\'http://www\\') + \\'.google-analytics.com/ga.js\\';'.\"\\n\";\n\t\tprint '    var s = document.getElementsByTagName(\\'script\\')[0]; s.parentNode.insertBefore(ga, s);'.\"\\n\";\n\t\tprint '  })();'.\"\\n\";\n\t\tprint '</script>'.\"\\n\";\n\t}\n\n\t// End of tuning\n\tif (! empty($_SERVER['DOL_TUNING']))\n\t{\n\t\t$micro_end_time=dol_microtime_float(true);\n\t\tprint \"\\n\".'<script type=\"text/javascript\">'.\"\\n\";\n\t\tprint 'window.console && console.log(\"';\n\t\tif (! empty($conf->global->MEMCACHED_SERVER)) print 'MEMCACHED_SERVER='.$conf->global->MEMCACHED_SERVER.' - ';\n\t\tprint 'MAIN_OPTIMIZE_SPEED='.(isset($conf->global->MAIN_OPTIMIZE_SPEED)?$conf->global->MAIN_OPTIMIZE_SPEED:'off');\n\t\tprint ' - Build time: '.ceil(1000*($micro_end_time-$micro_start_time)).' ms';\n\t\tif (function_exists(\"memory_get_usage\"))\n\t\t{\n\t\t\tprint ' - Mem: '.memory_get_usage();\n\t\t}\n\t\tif (function_exists(\"xdebug_memory_usage\"))\n\t\t{\n\t\t\tprint ' - XDebug time: '.ceil(1000*xdebug_time_index()).' ms';\n\t\t\tprint ' - XDebug mem: '.xdebug_memory_usage();\n\t\t\tprint ' - XDebug mem peak: '.xdebug_peak_memory_usage();\n\t\t}\n\t\tif (function_exists(\"zend_loader_file_encoded\"))\n\t\t{\n\t\t\tprint ' - Zend encoded file: '.(zend_loader_file_encoded()?'yes':'no');\n\t\t}\n\t\tprint '\");'.\"\\n\";\n\t\tprint '</script>'.\"\\n\";\n\n\t\t// Add Xdebug coverage of code\n\t\tif (defined('XDEBUGCOVERAGE')) {\n\t\t\tvar_dump(xdebug_get_code_coverage());\n\t\t}\n\t}\n\n\t// If there is some logs in buffer to show\n\tif (count($conf->logbuffer))\n\t{\n\t\tprint \"\\n\";\n\t\tprint \"<!-- Start of log output\\n\";\n\t\t//print '<div class=\"hidden\">'.\"\\n\";\n\t\tforeach($conf->logbuffer as $logline)\n\t\t{\n\t\t\tprint $logline.\"<br>\\n\";\n\t\t}\n\t\t//print '</div>'.\"\\n\";\n\t\tprint \"End of log output -->\\n\";\n\t}\n\n}\n\n/**\n *\tConvert an array with RGB value into hex RGB value\n *\n *  @param\tarray\t$arraycolor\t\t\tArray\n *  @param\tstring\t$colorifnotfound\tColor code to return if entry not defined\n *  @return\tstring\t\t\t\t\t\tRGB hex value (without # before). For example: FF00FF\n */\nfunction colorArrayToHex($arraycolor,$colorifnotfound='888888')\n{\n\tif (! is_array($arraycolor)) return $colorifnotfound;\n\treturn dechex($arraycolor[0]).dechex($arraycolor[1]).dechex($arraycolor[2]);\n}\n\n/**\n *\tConvert a currency code into its symbol\n *\n *  @param\t\tstring\t$currency_code\t\tCurrency code\n *  @return\t\tstring\t\t\t\t\t\tCurrency symbol encoded into UTF8\n */\nfunction getCurrencySymbol($currency_code)\n{\n\tglobal $db, $form;\n\n\t$currency_sign = '';\n\n\tif (! is_object($form)) $form = new Form($db);\n\n\t$form->load_cache_currencies();\n\n\tif (function_exists(\"mb_convert_encoding\") && isset($form->cache_currencies[$currency_code]) && is_array($form->cache_currencies[$currency_code]['unicode']) && ! empty($form->cache_currencies[$currency_code]['unicode']))\n\t{\n\t\tforeach($form->cache_currencies[$currency_code]['unicode'] as $unicode)\n\t\t{\n\t\t\t$currency_sign .= mb_convert_encoding(\"&#{$unicode};\", \"UTF-8\", 'HTML-ENTITIES');\n\t\t}\n\t}\n\telse\n\t{\n\t\t$currency_sign = $currency_code;\n\t}\n\n\treturn $currency_sign;\n}\n\n\nif (! function_exists('getmypid'))\n{\n\t/**\n\t * Return random PID\n\t * Some web hosts disable this php function for security reasons\n\t *\n\t * @return\tint\n\t */\n\tfunction getmypid()\n\t{\n\t\treturn rand(1,32768);\n\t}\n}\n\n?>\n"], "filenames": ["htdocs/core/lib/functions.lib.php"], "buggy_code_start_loc": [2103], "buggy_code_end_loc": [2107], "fixing_code_start_loc": [2103], "fixing_code_end_loc": [2107], "type": "CWE-79", "message": "Cross-site Scripting (XSS) in Dolibarr ERP/CRM 3.3.1 allows remote attackers to inject arbitrary web script or HTML in functions.lib.php.", "other": {"cve": {"id": "CVE-2013-2092", "sourceIdentifier": "secalert@redhat.com", "published": "2019-11-20T21:15:11.273", "lastModified": "2022-11-17T17:21:59.260", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) in Dolibarr ERP/CRM 3.3.1 allows remote attackers to inject arbitrary web script or HTML in functions.lib.php."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) en Dolibarr ERP/CRM versi\u00f3n 3.3.1, permite a atacantes remotos inyectar script web o HTML arbitrario en el archivo functions.lib.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "B7BE6392-FFEB-406B-81C4-172729C06D93"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2013/05/14/3", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/Dolibarr/dolibarr/commit/8a90598b23e1b2689848187941f7a96b04907005", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://security-tracker.debian.org/tracker/CVE-2013-2092", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Dolibarr/dolibarr/commit/8a90598b23e1b2689848187941f7a96b04907005"}}