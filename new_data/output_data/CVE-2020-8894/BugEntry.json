{"buggy_code": ["<?php\n\nApp::uses('AppController', 'Controller');\n\nclass ThreadsController extends AppController\n{\n    public $components = array(\n        'Security',\n        'RequestHandler',\n        'Session',\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public $paginate = array(\n            'limit' => 60,\n    );\n\n    public function viewEvent($id = false)\n    {\n        if (empty($id)) {\n            throw new MethodNotAllowedException('No Event ID set.');\n        }\n        $this->loadModel('Event');\n        $result = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n        $thread_id = false;\n        if ($result) {\n            $thread_id = $this->Thread->find('first', array('recursive' => -1, 'conditions' => array('Thread.event_id' => $id), 'fields' => array('Thread.id')));\n            if ($thread_id) {\n                $thread_id = $thread_id['Thread']['id'];\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->viewData($array(), $this->response->type());\n                }\n                $thread_id = false;\n            }\n        }\n        if ($thread_id) {\n            $post_id = false;\n            if (isset($this->passedArgs['post_id'])) {\n                $post_id = $this->passedArgs['post_id'];\n            }\n            $response = $this->__view($thread_id, false, $post_id);\n            if ($this->_isRest()) {\n                return $response;\n            }\n        } else {\n            throw new NotFoundException('Invalid Thread.');\n        }\n    }\n\n    public function view($thread_id, $eventView = false)\n    {\n        $post_id = false;\n        if (isset($this->passedArgs['post_id'])) {\n            $post_id = $this->passedArgs['post_id'];\n        }\n        $response = $this->__view($thread_id, $eventView, $post_id);\n        if ($this->_isRest()) {\n            return $response;\n        }\n    }\n\n    private function __view($thread_id, $eventView, $post_id)\n    {\n        if ($eventView) {\n            $id = $thread_id;\n            // Show the discussion\n            $this->Thread->Behaviors->unload('SysLogLogable.SysLogLogable');\n            $params = array('conditions' => array('event_id' => $id),\n                    'recursive' => -1,\n                    'fields' => array('id', 'event_id', 'distribution', 'title', 'sharing_group_id', 'org_id')\n            );\n            $thread = $this->Thread->find('first', $params);\n            if (!empty($thread)) {\n                if (!$this->_isSiteAdmin()) {\n                    if ($thread['Thread']['distribution'] == 0 && $thread['Thread']['org_id'] != $this->Auth->user('org_id')) {\n                        throw new MethodNotAllowedException('Invalid Thread.');\n                    }\n                    if ($thread['Thread']['distribution'] == 4) {\n                        if (!$this->Thread->SharingGroup->checkIfAuthorised($this->Auth->user(), $thread['Thread']['sharing_group_id'])) {\n                            new NotFoundException('Invalid thread.');\n                        }\n                    }\n                }\n                $thread_id = $thread['Thread']['id'];\n            } else {\n                $thread_id = 0;\n            }\n            $this->set('currentEvent', $id);\n        } else {\n            $this->Thread->recursive = -1;\n            $this->Thread->id = $thread_id;\n\n            //If the thread doesn't exist, throw exception\n            if (!$this->Thread->exists()) {\n                throw new NotFoundException('Invalid thread.');\n            }\n            $thread = $this->Thread->read();\n\n            // If the thread belongs to an event, we have to make sure that the event's distribution level hasn't changed.\n            // This is also a good time to update the thread's distribution level if that did happen.\n            if (!empty($thread['Thread']['event_id'])) {\n                $this->loadModel('Event');\n                $this->Event->id = $thread['Thread']['event_id'];\n                $this->Event->recursive = -1;\n                $this->Event->read(array('id', 'distribution', 'org_id', 'sharing_group_id'));\n                if ($this->Event->data['Event']['distribution'] != $thread['Thread']['distribution']) {\n                    $this->Thread->saveField('distribution', $this->Event->data['Event']['distribution']);\n                }\n                if ($this->Event->data['Event']['sharing_group_id'] != $thread['Thread']['sharing_group_id']) {\n                    $this->Thread->saveField('sharing_group_id', $this->Event->data['Event']['sharing_group_id']);\n                }\n                $this->set('event_id', $thread['Thread']['event_id']);\n            }\n\n            // If the user shouldn't be allowed to see the event send him away.\n            if (!$this->_isSiteAdmin()) {\n                if ($thread['Thread']['distribution'] == 0 && $thread['Thread']['org_id'] != $this->Auth->user('org_id')) {\n                    throw new MethodNotAllowedException('Invalid Thread.');\n                }\n                if ($thread['Thread']['distribution'] == 4) {\n                    if (!$this->Thread->SharingGroup->checkIfAuthorised($this->Auth->user(), $thread['Thread']['sharing_group_id'])) {\n                        new NotFoundException('Invalid thread.');\n                    }\n                }\n            }\n        }\n        if ($thread_id) {\n            $this->paginate = array(\n                    'limit' => 10,\n                    'conditions' => array('Post.thread_id' => $thread_id),\n                    'contain' => array(\n                            'User' => array(\n                                    'fields' => array('User.email', 'User.id'),\n                                    'Organisation' => array(\n                                            'fields' => array('id', 'name')\n                                    ),\n                            ),\n                    ),\n            );\n            if ($this->_isRest()) {\n                $posts = $this->Thread->Post->find('all', array(\n                    'contain' => $this->paginate['contain'],\n                    'conditions' => $this->paginate['conditions']\n                ));\n            } else {\n                $posts = $this->paginate('Post');\n            }\n            foreach ($posts as $k => $post) {\n                $posts[$k]['Post']['org_name'] = empty($post['User']['id']) ? 'Deactivated user' : $post['User']['Organisation']['name'];\n                if ($this->_isSiteAdmin() || $this->Auth->user('org_id') == $post['User']['org_id']) {\n                    $posts[$k]['Post']['user_email'] = empty($post['User']['id']) ? 'Unavailable' : $post['User']['email'];\n                }\n                $posts[$k]['Post']['user_id'] = empty($post['User']['id']) ? null : $post['User']['id'];\n                $posts[$k] = $posts[$k]['Post'];\n            }\n            if ($this->_isRest()) {\n                if (!empty($posts)) {\n                    $thread['Thread']['Post'] = $posts;\n                }\n                return $this->RestResponse->viewData($thread, $this->response->type());\n            } else {\n                $this->set('posts', $posts);\n                $this->set('post_id', $post_id);\n                $this->set('thread', $thread);\n            }\n        }\n        if ($eventView) {\n            $this->set('context', 'event');\n            if (!$this->request->is('ajax')) {\n                $this->redirect(array('controller' => 'events', 'action' => 'view', $id));\n            }\n        } else {\n            $this->set('context', 'thread');\n        }\n        $this->set('myuserid', $this->Auth->user('id'));\n        if ($this->request->is('ajax')) {\n            $this->layout = 'ajax';\n            $this->render('/Elements/eventdiscussion');\n        }\n    }\n\n    public function index()\n    {\n        $this->loadModel('Posts');\n        $this->loadModel('SharingGroup');\n        $sgids = $this->SharingGroup->fetchAllAuthorised($this->Auth->user);\n        $conditions = null;\n        if (!$this->_isSiteAdmin()) {\n            $conditions['AND']['OR'] = array(\n                'Thread.distribution' => array(1, 2, 3),\n                array(\n                    'AND' => array(\n                        'Thread.distribution' => 0,\n                        'Thread.org_id' => $this->Auth->user('org_id'),\n                    )\n                ),\n                array(\n                    'AND' => array(\n                        'Thread.distribution' => 4,\n                        'Thread.sharing_group_id' => $sgids,\n                    )\n                )\n            );\n        }\n        $conditions['AND'][] = array('Thread.post_count >' => 0);\n        $this->paginate = array(\n                'conditions' => array($conditions),\n                'fields' => array('date_modified', 'date_created', 'org_id', 'distribution', 'title', 'post_count', 'sharing_group_id'),\n                'contain' => array(\n                    'Post' =>array(\n                        'fields' => array(),\n                        'limit' => 1,\n                        'order' => 'Post.date_modified DESC',\n                        'User' => array(\n                            'fields' => array('id','email', 'org_id'),\n                            'Organisation' => array(\n                                'fields' => array('id', 'name')\n                            ),\n                        ),\n                    ),\n                    'Organisation' => array(\n                        'fields' => array('id', 'name')\n                    ),\n                    'SharingGroup' => array(\n                        'fields' => array('id', 'name')\n                    ),\n                ),\n                'order' => array('Thread.date_modified' => 'desc'),\n                'recursive' => -1\n        );\n        $threadsBeforeEmailRemoval = $this->paginate();\n        if (!$this->_isSiteAdmin()) {\n            foreach ($threadsBeforeEmailRemoval as $key => $thread) {\n                if (empty($thread['Post'][0]['User']['org_id'])) {\n                    $threadsBeforeEmailRemoval[$key]['Post'][0]['User']['email'] = 'Deactivated user';\n                } elseif ($thread['Post'][0]['User']['org_id'] != $this->Auth->user('org_id')) {\n                    $threadsBeforeEmailRemoval[$key]['Post'][0]['User']['email'] = 'User ' . $thread['Post'][0]['User']['id'] . \" (\" . $thread['Post'][0]['User']['Organisation']['name'] . \")\";\n                }\n            }\n        }\n        $this->set('threads', $threadsBeforeEmailRemoval);\n        $this->loadModel('Event');\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n    }\n}\n", "<?php\n\nApp::uses('AppModel', 'Model');\n\nclass Thread extends AppModel\n{\n    public $actsAs = array(\n            'Containable',\n            'SysLogLogable.SysLogLogable' => array( // TODO Audit, logable\n                    'roleModel' => 'Thread',\n                    'roleKey' => 'thread_id',\n                    'change' => 'full'\n            ),\n    );\n    public $hasMany = 'Post';\n    public $belongsTo = array(\n        'Event',\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id'\n        ),\n        'SharingGroup'\n    );\n\n    public function updateAfterPostChange($thread, $add = false)\n    {\n        $count = count($thread['Post']);\n        // If we have 0 posts left, delete the thread!\n        if ($count == 0) {\n            $this->delete($thread['Thread']['id']);\n            return false;\n        } else {\n            $thread['Thread']['post_count'] = $count;\n            if ($add) {\n                $thread['Thread']['date_modified'] = date('Y/m/d H:i:s');\n            }\n            $this->save($thread);\n            return true;\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\nApp::uses('AppController', 'Controller');\n\nclass ThreadsController extends AppController\n{\n    public $components = array(\n        'Security',\n        'RequestHandler',\n        'Session',\n    );\n\n    public $helpers = array('Js' => array('Jquery'));\n\n    public $paginate = array(\n            'limit' => 60,\n    );\n\n    public function viewEvent($id = false)\n    {\n        if (empty($id)) {\n            throw new MethodNotAllowedException('No Event ID set.');\n        }\n        $this->loadModel('Event');\n        $result = $this->Event->fetchEvent($this->Auth->user(), array('eventid' => $id));\n        $thread_id = false;\n        if ($result) {\n            $thread_id = $this->Thread->find('first', array('recursive' => -1, 'conditions' => array('Thread.event_id' => $id), 'fields' => array('Thread.id')));\n            if ($thread_id) {\n                $thread_id = $thread_id['Thread']['id'];\n            } else {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->viewData($array(), $this->response->type());\n                }\n                $thread_id = false;\n            }\n        }\n        if ($thread_id) {\n            $post_id = false;\n            if (isset($this->passedArgs['post_id'])) {\n                $post_id = $this->passedArgs['post_id'];\n            }\n            $response = $this->__view($thread_id, false, $post_id);\n            if ($this->_isRest()) {\n                return $response;\n            }\n        } else {\n            throw new NotFoundException('Invalid Thread.');\n        }\n    }\n\n    public function view($thread_id, $eventView = false)\n    {\n        $post_id = false;\n        if (isset($this->passedArgs['post_id'])) {\n            $post_id = $this->passedArgs['post_id'];\n        }\n        $response = $this->__view($thread_id, $eventView, $post_id);\n        if ($this->_isRest()) {\n            return $response;\n        }\n    }\n\n    private function __view($thread_id, $eventView, $post_id)\n    {\n        $conditions = array('id' => $thread_id);\n        if ($eventView) {\n            $event_id = $thread_id;\n            if (!$this->request->is('ajax')) {\n                $this->redirect(array('controller' => 'events', 'action' => 'view', $event_id));\n            }\n            $conditions = array('event_id' => $event_id);\n            $this->set('currentEvent', $event_id);\n            $this->set('event_id', $event_id);\n            $this->set('context', 'event');\n        } else {\n            $this->set('context', 'thread');\n        }\n        $this->set('myuserid', $this->Auth->user('id'));\n        $thread = $this->Thread->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        if (empty($thread)) {\n            if (!$eventView) {\n                throw new NotFoundException('Invalid thread.');\n            }\n        } else {\n            $thread_id = $thread['Thread']['id'];\n            if (!$this->Thread->checkIfAuthorised($this->Auth->user(), $thread_id)) {\n                throw new NotFoundException('Invalid thread.');\n            }\n        }\n        if ($thread_id) {\n            $this->paginate = array(\n                    'limit' => 10,\n                    'conditions' => array('Post.thread_id' => $thread_id),\n                    'contain' => array(\n                            'User' => array(\n                                    'fields' => array('User.email', 'User.id'),\n                                    'Organisation' => array(\n                                            'fields' => array('id', 'name')\n                                    ),\n                            ),\n                    ),\n            );\n            if ($this->_isRest()) {\n                $posts = $this->Thread->Post->find('all', array(\n                    'contain' => $this->paginate['contain'],\n                    'conditions' => $this->paginate['conditions']\n                ));\n            } else {\n                $posts = $this->paginate('Post');\n            }\n            foreach ($posts as $k => $post) {\n                $posts[$k]['Post']['org_name'] = empty($post['User']['id']) ? 'Deactivated user' : $post['User']['Organisation']['name'];\n                if ($this->_isSiteAdmin() || $this->Auth->user('org_id') == $post['User']['org_id']) {\n                    $posts[$k]['Post']['user_email'] = empty($post['User']['id']) ? 'Unavailable' : $post['User']['email'];\n                }\n                $posts[$k]['Post']['user_id'] = empty($post['User']['id']) ? null : $post['User']['id'];\n                $posts[$k] = $posts[$k]['Post'];\n            }\n            if ($this->_isRest()) {\n                if (!empty($posts)) {\n                    $thread['Thread']['Post'] = $posts;\n                }\n                return $this->RestResponse->viewData($thread, $this->response->type());\n            } else {\n                $this->set('posts', $posts);\n                $this->set('post_id', $post_id);\n                $this->set('thread', $thread);\n            }\n        }\n        if ($this->request->is('ajax')) {\n            $this->layout = 'ajax';\n            $this->render('/Elements/eventdiscussion');\n        }\n    }\n\n    public function index()\n    {\n        $this->loadModel('Posts');\n        $this->loadModel('SharingGroup');\n        $sgids = $this->SharingGroup->fetchAllAuthorised($this->Auth->user());\n        $conditions = null;\n        if (!$this->_isSiteAdmin()) {\n            $conditions['AND']['OR'] = array(\n                'Thread.distribution' => array(1, 2, 3),\n                array(\n                    'AND' => array(\n                        'Thread.distribution' => 0,\n                        'Thread.org_id' => $this->Auth->user('org_id'),\n                    )\n                ),\n                array(\n                    'AND' => array(\n                        'Thread.distribution' => 4,\n                        'Thread.sharing_group_id' => $sgids,\n                    )\n                )\n            );\n        }\n        $conditions['AND'][] = array('Thread.post_count >' => 0);\n        $this->paginate = array(\n                'conditions' => $conditions,\n                'fields' => array('date_modified', 'date_created', 'org_id', 'distribution', 'title', 'post_count', 'sharing_group_id'),\n                'contain' => array(\n                    'Post' =>array(\n                        'fields' => array(),\n                        'limit' => 1,\n                        'order' => 'Post.date_modified DESC',\n                        'User' => array(\n                            'fields' => array('id','email', 'org_id'),\n                            'Organisation' => array(\n                                'fields' => array('id', 'name')\n                            ),\n                        ),\n                    ),\n                    'Organisation' => array(\n                        'fields' => array('id', 'name')\n                    ),\n                    'SharingGroup' => array(\n                        'fields' => array('id', 'name')\n                    ),\n                ),\n                'order' => array('Thread.date_modified' => 'desc'),\n                'recursive' => -1\n        );\n        $threadsBeforeEmailRemoval = $this->paginate();\n        if (!$this->_isSiteAdmin()) {\n            foreach ($threadsBeforeEmailRemoval as $key => $thread) {\n                if (empty($thread['Post'][0]['User']['org_id'])) {\n                    $threadsBeforeEmailRemoval[$key]['Post'][0]['User']['email'] = 'Deactivated user';\n                } elseif ($thread['Post'][0]['User']['org_id'] != $this->Auth->user('org_id')) {\n                    $threadsBeforeEmailRemoval[$key]['Post'][0]['User']['email'] = 'User ' . $thread['Post'][0]['User']['id'] . \" (\" . $thread['Post'][0]['User']['Organisation']['name'] . \")\";\n                }\n            }\n        }\n        $this->set('threads', $threadsBeforeEmailRemoval);\n        $this->loadModel('Event');\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n    }\n}\n", "<?php\n\nApp::uses('AppModel', 'Model');\n\nclass Thread extends AppModel\n{\n    public $actsAs = array(\n            'Containable',\n            'SysLogLogable.SysLogLogable' => array( // TODO Audit, logable\n                    'roleModel' => 'Thread',\n                    'roleKey' => 'thread_id',\n                    'change' => 'full'\n            ),\n    );\n    public $hasMany = 'Post';\n    public $belongsTo = array(\n        'Event',\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id'\n        ),\n        'SharingGroup'\n    );\n\n    public function updateAfterPostChange($thread, $add = false)\n    {\n        $count = count($thread['Post']);\n        // If we have 0 posts left, delete the thread!\n        if ($count == 0) {\n            $this->delete($thread['Thread']['id']);\n            return false;\n        } else {\n            $thread['Thread']['post_count'] = $count;\n            if ($add) {\n                $thread['Thread']['date_modified'] = date('Y/m/d H:i:s');\n            }\n            $this->save($thread);\n            return true;\n        }\n    }\n\n    // convenience method to check whether a user can see an event\n    public function checkIfAuthorised($user, $id)\n    {\n        if (!isset($user['id'])) {\n            throw new MethodNotAllowedException('Invalid user.');\n        }\n        $this->id = $id;\n        if (!$this->exists()) {\n            return false;\n        }\n        $thread = $this->find('first', array(\n            'conditions' => array('id' => $id),\n            'recursive' => -1\n        ));\n        if (!empty($thread['Thread']['event_id'])) {\n            $event = $this->Event->fetchEvent($user, array(\n                'eventid' => $thread['Thread']['event_id'],\n                'metadata' => true\n            ));\n            if (empty($event)) {\n                return false;\n            }\n            $event = $event[0];\n            // update the distribution if it diverged from the event\n            if (\n                $event['Event']['distribution'] != $thread['Thread']['distribution'] ||\n                $event['Event']['sharing_group_id'] != $thread['Thread']['sharing_group_id']\n            ) {\n                $this->Behaviors->unload('SysLogLogable.SysLogLogable');\n                $thread['Thread']['distribution'] = $event['Event']['distribution'];\n                $thread['Thread']['sharing_group_id'] = $event['Event']['sharing_group_id'];\n                $this->save($thread);\n            }\n            return !empty($event);\n        }\n        if ($user['Role']['perm_site_admin']) {\n            return true;\n        }\n        if ($thread['Thread']['org_id'] == $user['org_id'] || ($thread['Thread']['distribution'] > 0 && $thread['Thread']['distribution'] < 4)) {\n            return true;\n        }\n        if ($thread['Thread']['distribution'] == 4 && $this->SharingGroup->checkIfAuthorised($user, $thread['Thread']['sharing_group_id'])) {\n            return true;\n        }\n        return false;\n    }\n}\n"], "filenames": ["app/Controller/ThreadsController.php", "app/Model/Thread.php"], "buggy_code_start_loc": [65, 40], "buggy_code_end_loc": [210, 40], "fixing_code_start_loc": [66, 41], "fixing_code_end_loc": [166, 88], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in MISP before 2.4.121. ACLs for discussion threads were mishandled in app/Controller/ThreadsController.php and app/Model/Thread.php.", "other": {"cve": {"id": "CVE-2020-8894", "sourceIdentifier": "cve@mitre.org", "published": "2020-02-12T00:15:09.890", "lastModified": "2020-02-14T19:23:44.990", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in MISP before 2.4.121. ACLs for discussion threads were mishandled in app/Controller/ThreadsController.php and app/Model/Thread.php."}, {"lang": "es", "value": "Se detect\u00f3 un problema en MISP versiones anteriores a 2.4.121. Las ACL para subprocesos (hilos) de discusi\u00f3n se manejaron inapropiadamente en los archivos app/Controller/ThreadsController.php y app/Model/Thread.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 2.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.121", "matchCriteriaId": "C4AE73C5-6FE2-4A7F-86F3-013F1D0A1AC8"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/9400b8bc8699435d84508e598aca98a31affd77c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/MISP/MISP/compare/v2.4.120...v2.4.121", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/9400b8bc8699435d84508e598aca98a31affd77c"}}