{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.log.admin\");\npimcore.log.admin = Class.create({\n\n    initialize: function (config) {\n\n        this.panel = null;\n        this.config = {\n            searchParams: {},\n            refreshInterval: 5\n        };\n\n        Ext.apply(this.config, config);\n        this.searchParams = this.config.searchParams;\n        this.refreshInterval = this.config.refreshInterval;\n\n        if(!this.config['localMode']) {\n            this.getTabPanel();\n        }\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_applicationlog_admin\");\n    },\n\n    getTabPanel: function () {\n        if(!this.panel) {\n\n            var panelConfig = {\n                border: false,\n                layout: \"fit\",\n                iconCls: \"pimcore_icon_log_admin\",\n            };\n\n            if (!this.config.localMode) {\n                panelConfig.title = t(\"log_applicationlog\");\n                panelConfig.id =  \"pimcore_applicationlog_admin\";\n                panelConfig.closable = true;\n            } else {\n                panelConfig.tooltip = t(\"log_applicationlog\");\n            }\n\n            this.panel = new Ext.Panel(panelConfig);\n\n            this.autoRefreshTask = {\n                run: function(){\n                    this.store.reload();\n                }.bind(this),\n                interval: (this.refreshInterval*1000)\n            };\n\n            this.intervalInSeconds = {\n                xtype: \"numberfield\",\n                name: \"interval\",\n                width: 70,\n                value: 5,\n                listeners: {\n                    change: function (item, value) {\n                        if(value < 1){\n                            value = 1;\n                        }\n                        Ext.TaskManager.stop(this.autoRefreshTask);\n                        if(this.autoRefresh.getValue()){\n                            this.autoRefreshTask.interval = value*1000;\n                            Ext.TaskManager.start(this.autoRefreshTask);\n                        }\n\n                    }.bind(this)\n                }\n            }\n\n            this.autoRefresh = new Ext.form.Checkbox({\n                stateful: true,\n                stateId: 'log_auto_refresh',\n                stateEvents: ['click'],\n                checked : false,\n                boxLabel: t('log_refresh_label'),\n                listeners: {\n                    change: function (cbx, checked) {\n                        if (checked) {\n                            // this.resultpanel.view.loadMask.destroy();\n                            Ext.TaskManager.start(this.autoRefreshTask);\n                        } else {\n                            //Todo: enable load mask\n                            Ext.TaskManager.stop(this.autoRefreshTask);\n                        }\n                    }.bind(this)\n                }\n            });\n\n            this.priorityStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_log_priorityjson'),\n                    reader: {\n                        rootProperty: 'priorities',\n                        idProperty: 'key'\n                    }\n                },\n                fields: ['key', 'value']\n            });\n\n            this.componentStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_log_componentjson'),\n                    reader: {\n                        type: 'json',\n                        rootProperty: 'components',\n                        idProperty: 'key'\n                    }\n                },\n                fields: ['key', 'value']\n            });\n\n            if (!this.config.localMode) {\n                var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n                tabPanel.add(this.panel);\n                tabPanel.setActiveItem(\"pimcore_applicationlog_admin\");\n\n                this.panel.on(\"destroy\", function () {\n                    pimcore.globalmanager.remove(\"pimcore_applicationlog_admin\");\n                }.bind(this));\n            } else {\n                this.panel.on(\"afterrender\", function () {\n                    this.priorityStore.load();\n                    this.componentStore.load();\n                    this.store.load();\n                }.bind(this));\n            }\n\n            var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n            this.store = pimcore.helpers.grid.buildDefaultStore(\n                Routing.generate('pimcore_admin_log_show'),\n                [\n                    'id', 'pid', 'message', 'priority', 'timestamp', 'fileobject', 'component', 'relatedobject', 'source'\n                ],\n                itemsPerPage, {\n                    autoLoad: false\n                }\n            );\n            if (this.config.localMode && this.searchParams.relatedobject) {\n                this.store.getProxy().setExtraParam(\"relatedobject\",this.searchParams.relatedobject);\n            }\n            var reader = this.store.getProxy().getReader();\n            reader.setRootProperty('p_results');\n            reader.setTotalProperty('p_totalCount');\n\n            this.pagingToolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n            //auto reload items\n            this.pagingToolbar.insert(11,\"-\");\n            this.pagingToolbar.insert(12,this.autoRefresh);\n            this.pagingToolbar.insert(13,this.intervalInSeconds);\n            this.pagingToolbar.insert(14,t(\"log_refresh_seconds\"));\n\n            this.resultpanel = new Ext.grid.GridPanel({\n                store: this.store,\n                title: t(\"log_applicationlog\"),\n                trackMouseOver:false,\n                disableSelection:true,\n                autoScroll: true,\n                region: \"center\",\n                columns:[{\n                    text: t(\"log_timestamp\"),\n                    dataIndex: 'timestamp',\n                    width: 150,\n                    align: 'left',\n                    sortable: true\n                },{\n                    text: t(\"log_pid\"),\n                    dataIndex: 'pid',\n                    flex: 40,\n                    sortable: true,\n                    hidden: true\n                },{\n                    text: t(\"log_message\"),\n                    dataIndex: 'message',\n                    flex: 220,\n                    sortable: true,\n                    renderer: function (s) {\n                        return Ext.util.Format.htmlEncode(s);\n                    }\n                },{\n                    text: t(\"log_type\"),\n                    dataIndex: 'priority',\n                    flex: 25,\n                    sortable: true\n                },{\n                    text: t(\"log_fileobject\"),\n                    dataIndex: 'fileobject',\n                    flex: 70,\n                    renderer: function(value, p, record){\n                        if (value) {\n                            var url = Routing.generate('pimcore_admin_log_showfileobject', {filePath: record.data.fileobject});\n                            return Ext.String.format('<a href=\"{0}\" target=\"_blank\">{1}</a>', url,  t(\"open\"));\n                        }\n\n                        return '';\n                    },\n                    sortable: true\n                },{\n                    text: t(\"log_relatedobject\"),\n                    dataIndex: 'relatedobject',\n                    flex: 35,\n                    sortable: false,\n                    renderer: function (value, p, record) {\n                        if (value) {\n                            return Ext.String.format('<a href=\"#\" onclick=\"pimcore.helpers.openElement({0}, \\'{1}\\')\">{2}</a>', value, record.get('relatedobjecttype'), record.get('relatedobjecttype')+' '+value);\n                        }\n\n                        return '';\n                    },\n                },{\n                    text: t(\"log_component\"),\n                    dataIndex: 'component',\n                    flex: 50,\n                    sortable: true\n                },{\n                    text: t(\"log_source\"),\n                    dataIndex: 'source',\n                    flex: 50,\n                    sortable: true\n                }],\n\n                // customize view config\n                viewConfig: {\n                    forceFit:true,\n                    // loadMask: false,\n                    getRowClass: function(record) {\n                        return 'log-type-' + record.get('priority');\n                    },\n                    enableTextSelection: true\n                },\n\n                listeners: {\n                    rowdblclick : function(grid, record, tr, rowIndex, e, eOpts ) {\n                        new pimcore.log.detailwindow(this.store.getAt(rowIndex).data);\n                    }.bind(this)\n                },\n\n                // paging bar on the bottom\n                bbar: this.pagingToolbar\n\n            });\n\n            this.fromDate = new Ext.form.DateField({\n                name: 'from_date',\n                width: 130,\n                xtype: 'datefield'\n            });\n\n            this.fromTime = new Ext.form.TimeField({\n                name: 'from_time',\n                width: 100,\n                xtype: 'timefield'\n            });\n\n            this.toDate = new Ext.form.DateField({\n                name: 'to_date',\n                width: 130,\n                xtype: 'datefield'\n            });\n\n            this.toTime = new Ext.form.TimeField({\n                name: 'to_time',\n                width: 100,\n                xtype: 'timefield'\n            });\n\n            this.searchpanel = new Ext.FormPanel({\n                region: \"east\",\n                title: t(\"log_search_form\"),\n                width: 370,\n                height: 500,\n                border: false,\n                autoScroll: true,\n                referenceHolder: true,\n                defaultButton: 'log_search_button',\n                buttons: [{\n                    text: t(\"reset\"),\n                    handler: this.clearValues.bind(this),\n                    iconCls: \"pimcore_icon_stop\"\n                },{\n                    reference: 'log_search_button',\n                    text: t(\"search\"),\n                    handler: this.find.bind(this),\n                    iconCls: \"pimcore_icon_search\"\n                }],\n                items: [ {\n                    xtype:'fieldset',\n                    autoHeight:true,\n                    labelWidth: 150,\n                    items :[\n                        {\n                            xtype: 'fieldcontainer',\n                            layout: 'hbox',\n                            fieldLabel: t('log_search_from'),\n                            combineErrors: true,\n                            name: 'from',\n                            items: [this.fromDate, this.fromTime]\n                        },{\n                            xtype: 'fieldcontainer',\n                            layout: 'hbox',\n                            fieldLabel: t('log_search_to'),\n                            combineErrors: true,\n                            name: 'to',\n                            items: [this.toDate, this.toTime]\n                        },{\n                            xtype:'combo',\n                            name: 'priority',\n                            fieldLabel: t('log_search_type'),\n                            width: 335,\n                            listWidth: 150,\n                            mode: 'local',\n                            typeAhead:true,\n                            forceSelection: true,\n                            triggerAction: 'all',\n                            store: this.priorityStore,\n                            displayField: 'value',\n                            valueField: 'key'\n                        },{\n                            xtype:'combo',\n                            name: 'component',\n                            fieldLabel: t('log_search_component'),\n                            width: 333,\n                            listWidth: 150,\n                            mode: 'local',\n                            typeAhead:true,\n                            forceSelection: true,\n                            triggerAction: 'all',\n                            store: this.componentStore,\n                            displayField: 'value',\n                            valueField: 'key'\n                        },{\n                            xtype:'numberfield',\n                            name: 'relatedobject',\n                            fieldLabel: t('log_search_relatedobject'),\n                            value: this.searchParams.relatedobject ? this.searchParams.relatedobject : \"\",\n                            width: 335,\n                            listWidth: 150,\n                            disabled: this.config.localMode\n                        },{\n                            xtype:'textfield',\n                            name: 'message',\n                            fieldLabel: t('log_search_message'),\n                            width: 335,\n                            listWidth: 150\n                        },{\n                            xtype:'numberfield',\n                            name: 'pid',\n                            fieldLabel: t('log_search_pid'),\n                            width: 335,\n                            listWidth: 150\n                        }]\n                }]});\n\n            var layout = new Ext.Panel({\n                border: false,\n                layout: \"border\",\n                items: [this.searchpanel, this.resultpanel],\n            });\n\n\n            this.panel.add(layout);\n            if (!this.config.localMode) {\n                this.store.load();\n            }\n            pimcore.layout.refresh();\n        }\n        return this.panel;\n    },\n\n    clearValues: function(){\n        this.searchpanel.getForm().reset();\n\n        this.searchParams.fromDate = null;\n        this.searchParams.fromTime = null;\n        this.searchParams.toDate = null;\n        this.searchParams.toTime = null;\n        this.searchParams.priority = null;\n        this.searchParams.component = null;\n        this.searchParams.message = null;\n        this.searchParams.pid = null;\n        this.store.baseParams = this.searchParams;\n        this.store.reload({\n            params:this.searchParams\n        });\n    },\n\n\n    find: function() {\n        var formValues = this.searchpanel.getForm().getFieldValues();\n\n        this.searchParams.fromDate = this.fromDate.getValue();\n        this.searchParams.fromTime = this.fromTime.getValue();\n        this.searchParams.toDate = this.toDate.getValue();\n        this.searchParams.toTime = this.toTime.getValue();\n        this.searchParams.priority = formValues.priority;\n        this.searchParams.component = formValues.component;\n        if (!this.config.localMode) {\n            this.searchParams.relatedobject = formValues.relatedobject;\n        }\n        this.searchParams.message = formValues.message;\n        this.searchParams.pid = formValues.pid;\n\n        var proxy = this.store.getProxy();\n        proxy.extraParams = this.searchParams;\n        this.pagingToolbar.moveFirst();\n    }\n\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.log.admin\");\npimcore.log.admin = Class.create({\n\n    initialize: function (config) {\n\n        this.panel = null;\n        this.config = {\n            searchParams: {},\n            refreshInterval: 5\n        };\n\n        Ext.apply(this.config, config);\n        this.searchParams = this.config.searchParams;\n        this.refreshInterval = this.config.refreshInterval;\n\n        if(!this.config['localMode']) {\n            this.getTabPanel();\n        }\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_applicationlog_admin\");\n    },\n\n    getTabPanel: function () {\n        if(!this.panel) {\n\n            var panelConfig = {\n                border: false,\n                layout: \"fit\",\n                iconCls: \"pimcore_icon_log_admin\",\n            };\n\n            if (!this.config.localMode) {\n                panelConfig.title = t(\"log_applicationlog\");\n                panelConfig.id =  \"pimcore_applicationlog_admin\";\n                panelConfig.closable = true;\n            } else {\n                panelConfig.tooltip = t(\"log_applicationlog\");\n            }\n\n            this.panel = new Ext.Panel(panelConfig);\n\n            this.autoRefreshTask = {\n                run: function(){\n                    this.store.reload();\n                }.bind(this),\n                interval: (this.refreshInterval*1000)\n            };\n\n            this.intervalInSeconds = {\n                xtype: \"numberfield\",\n                name: \"interval\",\n                width: 70,\n                value: 5,\n                listeners: {\n                    change: function (item, value) {\n                        if(value < 1){\n                            value = 1;\n                        }\n                        Ext.TaskManager.stop(this.autoRefreshTask);\n                        if(this.autoRefresh.getValue()){\n                            this.autoRefreshTask.interval = value*1000;\n                            Ext.TaskManager.start(this.autoRefreshTask);\n                        }\n\n                    }.bind(this)\n                }\n            }\n\n            this.autoRefresh = new Ext.form.Checkbox({\n                stateful: true,\n                stateId: 'log_auto_refresh',\n                stateEvents: ['click'],\n                checked : false,\n                boxLabel: t('log_refresh_label'),\n                listeners: {\n                    change: function (cbx, checked) {\n                        if (checked) {\n                            // this.resultpanel.view.loadMask.destroy();\n                            Ext.TaskManager.start(this.autoRefreshTask);\n                        } else {\n                            //Todo: enable load mask\n                            Ext.TaskManager.stop(this.autoRefreshTask);\n                        }\n                    }.bind(this)\n                }\n            });\n\n            this.priorityStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_log_priorityjson'),\n                    reader: {\n                        rootProperty: 'priorities',\n                        idProperty: 'key'\n                    }\n                },\n                fields: ['key', 'value']\n            });\n\n            this.componentStore = new Ext.data.JsonStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_log_componentjson'),\n                    reader: {\n                        type: 'json',\n                        rootProperty: 'components',\n                        idProperty: 'key'\n                    }\n                },\n                fields: ['key', 'value']\n            });\n\n            if (!this.config.localMode) {\n                var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n                tabPanel.add(this.panel);\n                tabPanel.setActiveItem(\"pimcore_applicationlog_admin\");\n\n                this.panel.on(\"destroy\", function () {\n                    pimcore.globalmanager.remove(\"pimcore_applicationlog_admin\");\n                }.bind(this));\n            } else {\n                this.panel.on(\"afterrender\", function () {\n                    this.priorityStore.load();\n                    this.componentStore.load();\n                    this.store.load();\n                }.bind(this));\n            }\n\n            var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n            this.store = pimcore.helpers.grid.buildDefaultStore(\n                Routing.generate('pimcore_admin_log_show'),\n                [\n                    'id', 'pid', 'message', 'priority', 'timestamp', 'fileobject', 'component', 'relatedobject', 'source'\n                ],\n                itemsPerPage, {\n                    autoLoad: false\n                }\n            );\n            if (this.config.localMode && this.searchParams.relatedobject) {\n                this.store.getProxy().setExtraParam(\"relatedobject\",this.searchParams.relatedobject);\n            }\n            var reader = this.store.getProxy().getReader();\n            reader.setRootProperty('p_results');\n            reader.setTotalProperty('p_totalCount');\n\n            this.pagingToolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n            //auto reload items\n            this.pagingToolbar.insert(11,\"-\");\n            this.pagingToolbar.insert(12,this.autoRefresh);\n            this.pagingToolbar.insert(13,this.intervalInSeconds);\n            this.pagingToolbar.insert(14,t(\"log_refresh_seconds\"));\n\n            this.resultpanel = new Ext.grid.GridPanel({\n                store: this.store,\n                title: t(\"log_applicationlog\"),\n                trackMouseOver:false,\n                disableSelection:true,\n                autoScroll: true,\n                region: \"center\",\n                columns:[{\n                    text: t(\"log_timestamp\"),\n                    dataIndex: 'timestamp',\n                    width: 150,\n                    align: 'left',\n                    sortable: true\n                },{\n                    text: t(\"log_pid\"),\n                    dataIndex: 'pid',\n                    flex: 40,\n                    sortable: true,\n                    hidden: true\n                },{\n                    text: t(\"log_message\"),\n                    dataIndex: 'message',\n                    flex: 220,\n                    sortable: true,\n                    renderer: function (s) {\n                        return Ext.util.Format.htmlEncode(s);\n                    }\n                },{\n                    text: t(\"log_type\"),\n                    dataIndex: 'priority',\n                    flex: 25,\n                    sortable: true\n                },{\n                    text: t(\"log_fileobject\"),\n                    dataIndex: 'fileobject',\n                    flex: 70,\n                    renderer: function(value, p, record){\n                        if (value) {\n                            var url = Routing.generate('pimcore_admin_log_showfileobject', {filePath: record.data.fileobject});\n                            return Ext.String.format('<a href=\"{0}\" target=\"_blank\">{1}</a>', url,  t(\"open\"));\n                        }\n\n                        return '';\n                    },\n                    sortable: true\n                },{\n                    text: t(\"log_relatedobject\"),\n                    dataIndex: 'relatedobject',\n                    flex: 35,\n                    sortable: false,\n                    renderer: function (value, p, record) {\n                        if (value) {\n                            return Ext.String.format('<a href=\"#\" onclick=\"pimcore.helpers.openElement({0}, \\'{1}\\')\">{2}</a>', value, record.get('relatedobjecttype'), record.get('relatedobjecttype')+' '+value);\n                        }\n\n                        return '';\n                    },\n                },{\n                    text: t(\"log_component\"),\n                    dataIndex: 'component',\n                    flex: 50,\n                    sortable: true\n                },{\n                    text: t(\"log_source\"),\n                    dataIndex: 'source',\n                    flex: 50,\n                    sortable: true\n                }],\n\n                // customize view config\n                viewConfig: {\n                    forceFit:true,\n                    // loadMask: false,\n                    getRowClass: function(record) {\n                        return 'log-type-' + record.get('priority');\n                    },\n                    enableTextSelection: true\n                },\n\n                listeners: {\n                    rowdblclick : function(grid, record, tr, rowIndex, e, eOpts ) {\n                        new pimcore.log.detailwindow(this.store.getAt(rowIndex).data);\n                    }.bind(this)\n                },\n\n                // paging bar on the bottom\n                bbar: this.pagingToolbar\n\n            });\n\n            this.fromDate = new Ext.form.DateField({\n                name: 'from_date',\n                width: 130,\n                invalidText: 'Enter date as MM/DD/YYYY',\n                xtype: 'datefield'\n            });\n\n            this.fromTime = new Ext.form.TimeField({\n                name: 'from_time',\n                width: 100,\n                invalidText: 'Enter time as HH:MM AM/PM',\n                xtype: 'timefield'\n            });\n\n            this.toDate = new Ext.form.DateField({\n                name: 'to_date',\n                width: 130,\n                invalidText: 'Enter date as MM/DD/YYYY',\n                xtype: 'datefield'\n            });\n\n            this.toTime = new Ext.form.TimeField({\n                name: 'to_time',\n                width: 100,\n                invalidText: 'Enter time as HH:MM AM/PM',\n                xtype: 'timefield'\n            });\n\n            this.searchpanel = new Ext.FormPanel({\n                region: \"east\",\n                title: t(\"log_search_form\"),\n                width: 370,\n                height: 500,\n                border: false,\n                autoScroll: true,\n                referenceHolder: true,\n                defaultButton: 'log_search_button',\n                buttons: [{\n                    text: t(\"reset\"),\n                    handler: this.clearValues.bind(this),\n                    iconCls: \"pimcore_icon_stop\"\n                },{\n                    reference: 'log_search_button',\n                    text: t(\"search\"),\n                    handler: this.find.bind(this),\n                    iconCls: \"pimcore_icon_search\"\n                }],\n                items: [ {\n                    xtype:'fieldset',\n                    autoHeight:true,\n                    labelWidth: 150,\n                    items :[\n                        {\n                            xtype: 'fieldcontainer',\n                            layout: 'hbox',\n                            fieldLabel: t('log_search_from'),\n                            combineErrors: true,\n                            name: 'from',\n                            items: [this.fromDate, this.fromTime]\n                        },{\n                            xtype: 'fieldcontainer',\n                            layout: 'hbox',\n                            fieldLabel: t('log_search_to'),\n                            combineErrors: true,\n                            name: 'to',\n                            items: [this.toDate, this.toTime]\n                        },{\n                            xtype:'combo',\n                            name: 'priority',\n                            fieldLabel: t('log_search_type'),\n                            width: 335,\n                            listWidth: 150,\n                            mode: 'local',\n                            typeAhead:true,\n                            forceSelection: true,\n                            triggerAction: 'all',\n                            store: this.priorityStore,\n                            displayField: 'value',\n                            valueField: 'key'\n                        },{\n                            xtype:'combo',\n                            name: 'component',\n                            fieldLabel: t('log_search_component'),\n                            width: 333,\n                            listWidth: 150,\n                            mode: 'local',\n                            typeAhead:true,\n                            forceSelection: true,\n                            triggerAction: 'all',\n                            store: this.componentStore,\n                            displayField: 'value',\n                            valueField: 'key'\n                        },{\n                            xtype:'numberfield',\n                            name: 'relatedobject',\n                            fieldLabel: t('log_search_relatedobject'),\n                            value: this.searchParams.relatedobject ? this.searchParams.relatedobject : \"\",\n                            width: 335,\n                            listWidth: 150,\n                            disabled: this.config.localMode\n                        },{\n                            xtype:'textfield',\n                            name: 'message',\n                            fieldLabel: t('log_search_message'),\n                            width: 335,\n                            listWidth: 150\n                        },{\n                            xtype:'numberfield',\n                            name: 'pid',\n                            fieldLabel: t('log_search_pid'),\n                            width: 335,\n                            listWidth: 150\n                        }]\n                }]});\n\n            var layout = new Ext.Panel({\n                border: false,\n                layout: \"border\",\n                items: [this.searchpanel, this.resultpanel],\n            });\n\n\n            this.panel.add(layout);\n            if (!this.config.localMode) {\n                this.store.load();\n            }\n            pimcore.layout.refresh();\n        }\n        return this.panel;\n    },\n\n    clearValues: function(){\n        this.searchpanel.getForm().reset();\n\n        this.searchParams.fromDate = null;\n        this.searchParams.fromTime = null;\n        this.searchParams.toDate = null;\n        this.searchParams.toTime = null;\n        this.searchParams.priority = null;\n        this.searchParams.component = null;\n        this.searchParams.message = null;\n        this.searchParams.pid = null;\n        this.store.baseParams = this.searchParams;\n        this.store.reload({\n            params:this.searchParams\n        });\n    },\n\n\n    find: function() {\n        var formValues = this.searchpanel.getForm().getFieldValues();\n\n        this.searchParams.fromDate = this.fromDate.getValue();\n        this.searchParams.fromTime = this.fromTime.getValue();\n        this.searchParams.toDate = this.toDate.getValue();\n        this.searchParams.toTime = this.toTime.getValue();\n        this.searchParams.priority = formValues.priority;\n        this.searchParams.component = formValues.component;\n        if (!this.config.localMode) {\n            this.searchParams.relatedobject = formValues.relatedobject;\n        }\n        this.searchParams.message = formValues.message;\n        this.searchParams.pid = formValues.pid;\n\n        var proxy = this.store.getProxy();\n        proxy.extraParams = this.searchParams;\n        this.pagingToolbar.moveFirst();\n    }\n\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/log/admin.js"], "buggy_code_start_loc": [263], "buggy_code_end_loc": [281], "fixing_code_start_loc": [264], "fixing_code_end_loc": [286], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.19.", "other": {"cve": {"id": "CVE-2023-1312", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-10T11:15:12.017", "lastModified": "2023-03-15T16:22:07.287", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository pimcore/pimcore prior to 10.5.19."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.1, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.19", "matchCriteriaId": "9F355AEC-329F-43D1-A3D7-44C2481A1999"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/d35d0712858f24d0ec96ddfd4cbe82ff4b5a5fbb", "source": "security@huntr.dev", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://huntr.dev/bounties/2a64a32d-b1cc-4def-91da-18040d59f356", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/d35d0712858f24d0ec96ddfd4cbe82ff4b5a5fbb"}}