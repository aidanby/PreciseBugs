{"buggy_code": ["class ActionTable {\n    constructor(options) {\n        this.__globalCounter = 0;\n        this.options = options;\n        this.id = options.id;\n        this.container = options.container;\n        this.classes = options.classes;\n        this.table_title = options.title;\n        this.header = options.header;\n        this.onAddition = options.onAddition;\n        this.onRemove = options.onRemove;\n        this.header.push(\"Action\");\n        this.row_num = this.header.length;\n        this.data = options.data === undefined ? [] : options.data;\n        this.tr_id_mapping = {};\n        this.control_items = options.control_items;\n        this.header_action_button = options.header_action_button === undefined ? {} : options.header_action_button;\n        if (options.header_action_button !== undefined) {\n            this.header_action_button_style = this.header_action_button.style === undefined ? {} : this.header_action_button.style;\n            this.additionEnabled = this.header_action_button.additionEnabled === undefined ? true : this.header_action_button.additionEnabled;\n            this.additionButtonDisabled = this.header_action_button.disabled === undefined ? false : this.header_action_button.disabled;\n        } else {\n            this.header_action_button_style = {};\n            this.additionEnabled = true;\n            this.additionButtonDisabled = false;\n        }\n\n        this.row_action_button = options.row_action_button === undefined ? {} : options.row_action_button;\n        if (options.row_action_button !== undefined) {\n            this.row_action_button_style = this.row_action_button.style === undefined ? {} : this.row_action_button.style;\n            this.removalEnabled = this.row_action_button.removalEnabled === undefined ? true : this.row_action_button.removalEnabled;\n        } else {\n            this.row_action_button_style = {};\n            this.removalEnabled = true;\n        }\n\n        this.selects = {};\n\n        this.__create_table();\n    }\n\n    __get_uniq_index() {\n        this.__globalCounter++;\n        return this.__globalCounter-1;\n    }\n\n    add_row(row) {\n        if (!this.__data_already_exists(row)) {\n            var id = this.__add_row(row);\n            this.tr_id_mapping[this.data.length] = id;\n            this.data.push(row);\n        }\n    }\n\n    delete_row(row_id) {\n        var tr = document.getElementById(row_id);\n        var array = this.__get_array_from_DOM_row(tr);\n        var data_index = this.__find_array_index(array, this.data);\n        tr.outerHTML = \"\";\n        this.data.splice(data_index, 1);\n    }\n\n    delete_row_index(row_pos) {\n        var tr = this.get_DOM_row(row_pos);\n        var array = this.__get_array_from_DOM_row(tr);\n        var data_index = this.__find_array_index(array, this.data);\n        tr.outerHTML = \"\";\n        this.data.splice(data_index, 1);\n    }\n\n    get_DOM_row(row_pos) {\n        var row_id = this.tr_id_mapping[row_pos];\n        var tr = document.getElementById(row_id);\n        return tr;\n    }\n\n    get_data() {\n        return this.data;\n    }\n\n    clear_table() {\n        var dataLength = this.data.length;\n        for (var i=0; i<dataLength; i++) {\n            this.delete_row_index(i);\n        }\n    }\n\n    set_table_data(data) {\n        this.clear_table();\n        for (var i in data) {\n            this.add_row(data[i]);\n        }\n    }\n\n    add_options(id, values) {\n        var select = this.selects[id];\n        var selected_value = select.value;\n        select.innerHTML = \"\"; // ensure uniqueness\n        this.__add_options_to_select(select, values);\n        select.value = selected_value;\n    }\n\n    __get_array_from_DOM_row(tr) {\n        var children = tr.children;\n        var array = [];\n        for (var i = 0; i < children.length-1; i++) {\n            array.push(children[i].innerText);\n        }\n        return array;\n    }\n\n    __data_already_exists(data) {\n        return this.__find_array_index(data, this.data) >= 0;\n    }\n\n    __find_array_index(value, array) {\n        for (var i in array) {\n            if (JSON.stringify(array[i]) === JSON.stringify(value)) { // compare array\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    __create_table() {\n        if (this.table_title !== undefined) {\n            var label = document.createElement('label');\n            label.innerHTML = this.table_title;\n            this.container.appendChild(label);\n        }\n        this.form = document.createElement('form');\n        this.table = document.createElement('table');\n        this.table.classList.add(\"table\", \"table-bordered\", \"action-table\");\n        if (this.classes !== undefined) {\n            for (var i in this.classes) {\n                this.table.classList.add(this.classes[i]);\n            }\n        }\n        this.thead = document.createElement('thead');\n        this.tbody = document.createElement('tbody');\n        var trHead = document.createElement('tr');\n        for (var col of this.header) {\n            var th = document.createElement('th');\n            th.innerHTML = col;\n            trHead.appendChild(th);\n        }\n        this.thead.appendChild(trHead);\n\n        this.__add_control_row();\n\n        for (var row of this.data) {\n            this.__add_row(row);\n        }\n        this.table.appendChild(this.thead);\n        this.table.appendChild(this.tbody);\n        this.form.appendChild(this.table);\n        this.container.appendChild(this.form);\n    }\n\n    __add_row(row) {\n        var tr = document.createElement('tr');\n        tr.id = \"tr_\" + this.__uuidv4();\n        for (var col of row) {\n            var td = document.createElement('td');\n            td.innerHTML = col;\n            tr.appendChild(td);\n        }\n        this.__add_action_button(tr);\n        this.tbody.appendChild(tr);\n        return tr.id;\n    }\n\n    __add_control_row() {\n        var tr = document.createElement('tr');\n        for (var itemOption of this.control_items) {\n            var td = document.createElement('td');\n            var item = this.__add_control_item(itemOption);\n            if (itemOption.colspan !== undefined) {\n                td.colSpan = itemOption.colspan;\n            }\n            td.appendChild(item);\n            tr.appendChild(td);\n        }\n        var td = document.createElement('td');\n\n        var btn = document.createElement('button');\n        var header_action_button_style = this.header_action_button.style === undefined ? {} : this.header_action_button.style;\n        if (header_action_button_style.type !== undefined) {\n            btn.classList.add(\"btn\", \"btn-\"+header_action_button_style.type);\n        } else {\n            btn.classList.add(\"btn\", \"btn-primary\");\n        }\n        if (header_action_button_style.tooltip !== undefined) {\n            btn.title = header_action_button_style.tooltip;\n        }\n        if (header_action_button_style.icon !== undefined) {\n            btn.innerHTML = '<span class=\"fa '+header_action_button_style.icon+'\"></span>';\n        } else {\n            btn.innerHTML = '<span class=\"fa fa-plus-square\"></span>';\n        }\n        btn.type = \"button\";\n        btn.disabled = this.additionButtonDisabled;\n\n        var that = this;\n        btn.addEventListener(\"click\", function(evt) {\n            var data = [];\n            for (var elem of that.form.elements) {\n                if (elem.classList.contains('form-group')) {\n                    data.push(elem.value);\n                }\n            }\n            if (that.additionEnabled) {\n                that.add_row(data);\n            }\n            if (that.onAddition !== undefined) {\n                that.onAddition(data, that);\n            }\n        });\n\n        td.appendChild(btn);\n\n        tr.appendChild(td);\n        this.thead.appendChild(tr);\n    }\n\n    __add_control_item(options) {\n        var item;\n        switch(options.DOMType) {\n            case \"select\":\n                item = this.__create_select(options.item_options);\n                this.selects[item.id] = item;\n                break;\n            case \"input\":\n                item = this.__create_input(options.item_options);\n                break;\n            case \"empty\":\n                item = this.__create_empty(options.item_options);\n                break;\n            default:\n                break;\n        }\n        return item;\n    }\n\n    __add_action_button(tr) {\n        var that = this;\n        var td = document.createElement('td');\n        var btn = document.createElement('button');\n        btn.classList.add(\"btn\", \"btn-danger\");\n        btn.innerHTML = '<span class=\"fa fa-trash\"></span>';\n        btn.type = \"button\";\n        btn.setAttribute('rowID', tr.id);\n        if (that.row_action_button_style.tooltip !== undefined) {\n            btn.title = that.row_action_button_style.tooltip;\n        }\n        if (that.row_action_button_style.style !== undefined) {\n            btn.style = that.row_action_button_style.style;\n        }\n        var that = this;\n        btn.addEventListener(\"click\", function(evt) {\n            if (that.onRemove !== undefined) {\n                var tr = document.getElementById(this.getAttribute('rowID'));\n                var data = that.__get_array_from_DOM_row(tr);\n                that.onRemove(data, that);\n            }\n            if (that.removalEnabled) {\n                that.delete_row(this.getAttribute('rowID'));\n            }\n        });\n        td.appendChild(btn);\n\n        if (that.row_action_button.others !== undefined) {\n            for (var i in that.row_action_button.others) {\n                var newBtnOptions = that.row_action_button.others[i];\n\n                var btn_style = newBtnOptions.style !== undefined ? newBtnOptions.style : {};\n                var btn = document.createElement('button');\n                btn.type = \"button\";\n                if (btn_style.type !== undefined) {\n                    btn.classList.add(\"btn\", \"btn-\"+btn_style.type);\n                } else {\n                    btn.classList.add(\"btn\", \"btn-primary\");\n                }\n                if (btn_style.icon !== undefined) {\n                    btn.innerHTML = '<span class=\"fa '+btn_style.icon+'\"></span>';\n                } else {\n                    btn.innerHTML = '<span class=\"fa fa-check\"></span>';\n                }\n                if (btn_style.title !== undefined) {\n                    btn.title = btn_style.title;\n                }\n                if (btn_style.style !== undefined) {\n                    btn.style = btn_style.style+\"margin-left: 3px\";\n                } else {\n                    btn.style = \"margin-left: 3px\";\n                }\n                btn.setAttribute('rowID', tr.id);\n                if (newBtnOptions.event !== undefined) {\n                    btn.addEventListener(\"click\", function(evt) {\n                        var tr = document.getElementById(this.getAttribute('rowID'));\n                        var data = that.__get_array_from_DOM_row(tr);\n                        newBtnOptions.event(data, that);\n                    });\n                }\n                td.appendChild(btn);\n            }\n        }\n\n        tr.appendChild(td);\n    }\n\n    __create_empty(options) {\n        var empty = document.createElement('span');\n        empty.classList.add(\"form-group\");\n        empty.id = options.id !== undefined ? options.id : 'actionTable_controlSelect_'+this.__get_uniq_index();\n        return empty;\n    }\n\n    __create_input(options) {\n        var input = document.createElement('input');\n        input.classList.add(\"form-group\");\n        input.id = options.id !== undefined ? options.id : 'actionTable_controlSelect_'+this.__get_uniq_index();\n        if (options.style !== undefined) {\n            input.style = options.style;\n        }\n        if (options.placeholder !== undefined) {\n            input.placeholder = options.placeholder;\n        }\n        if (options.disabled !== undefined) {\n            input.disabled = options.disabled;\n        }\n        if (options.typeahead !== undefined) {\n            var typeaheadOption = options.typeahead;\n            $('#'+input.id).typeahead(typeaheadOption);\n        }\n        return input;\n    }\n\n    __create_select(select_options) {\n        var select = document.createElement('select');\n        select.classList.add(\"form-group\");\n        select.id = select_options.id !== undefined ? select_options.id : 'actionTable_controlSelect_'+this.__get_uniq_index();\n        select.style.width = \"100%\";\n        this.__add_options_to_select(select, select_options.options);\n        if(select_options.default !== undefined) {\n            select.value = select_options.default;\n        }\n        return select;\n    }\n\n    __add_options_to_select(select, options) {\n        for(var value of options) {\n            var option = document.createElement('option');\n            if (Array.isArray(value)) { // array of type [value, text]\n                option.value = value[1];\n                option.textContent = value[1];\n            } else { // only value, text=value\n                option.value = value;\n                option.textContent = value;\n            }\n            select.appendChild(option);\n        }\n    }\n\n    __uuidv4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n"], "fixing_code": ["class ActionTable {\n    constructor(options) {\n        this.__globalCounter = 0;\n        this.options = options;\n        this.id = options.id;\n        this.container = options.container;\n        this.classes = options.classes;\n        this.table_title = options.title;\n        this.header = options.header;\n        this.onAddition = options.onAddition;\n        this.onRemove = options.onRemove;\n        this.header.push(\"Action\");\n        this.row_num = this.header.length;\n        this.data = options.data === undefined ? [] : options.data;\n        this.tr_id_mapping = {};\n        this.control_items = options.control_items;\n        this.header_action_button = options.header_action_button === undefined ? {} : options.header_action_button;\n        if (options.header_action_button !== undefined) {\n            this.header_action_button_style = this.header_action_button.style === undefined ? {} : this.header_action_button.style;\n            this.additionEnabled = this.header_action_button.additionEnabled === undefined ? true : this.header_action_button.additionEnabled;\n            this.additionButtonDisabled = this.header_action_button.disabled === undefined ? false : this.header_action_button.disabled;\n        } else {\n            this.header_action_button_style = {};\n            this.additionEnabled = true;\n            this.additionButtonDisabled = false;\n        }\n\n        this.row_action_button = options.row_action_button === undefined ? {} : options.row_action_button;\n        if (options.row_action_button !== undefined) {\n            this.row_action_button_style = this.row_action_button.style === undefined ? {} : this.row_action_button.style;\n            this.removalEnabled = this.row_action_button.removalEnabled === undefined ? true : this.row_action_button.removalEnabled;\n        } else {\n            this.row_action_button_style = {};\n            this.removalEnabled = true;\n        }\n\n        this.selects = {};\n\n        this.__create_table();\n    }\n\n    __get_uniq_index() {\n        this.__globalCounter++;\n        return this.__globalCounter-1;\n    }\n\n    add_row(row) {\n        if (!this.__data_already_exists(row)) {\n            var id = this.__add_row(row);\n            this.tr_id_mapping[this.data.length] = id;\n            this.data.push(row);\n        }\n    }\n\n    delete_row(row_id) {\n        var tr = document.getElementById(row_id);\n        var array = this.__get_array_from_DOM_row(tr);\n        var data_index = this.__find_array_index(array, this.data);\n        tr.outerHTML = \"\";\n        this.data.splice(data_index, 1);\n    }\n\n    delete_row_index(row_pos) {\n        var tr = this.get_DOM_row(row_pos);\n        var array = this.__get_array_from_DOM_row(tr);\n        var data_index = this.__find_array_index(array, this.data);\n        tr.outerHTML = \"\";\n        this.data.splice(data_index, 1);\n    }\n\n    get_DOM_row(row_pos) {\n        var row_id = this.tr_id_mapping[row_pos];\n        var tr = document.getElementById(row_id);\n        return tr;\n    }\n\n    get_data() {\n        return this.data;\n    }\n\n    clear_table() {\n        var dataLength = this.data.length;\n        for (var i=0; i<dataLength; i++) {\n            this.delete_row_index(i);\n        }\n    }\n\n    set_table_data(data) {\n        this.clear_table();\n        for (var i in data) {\n            this.add_row(data[i]);\n        }\n    }\n\n    add_options(id, values) {\n        var select = this.selects[id];\n        var selected_value = select.value;\n        select.innerHTML = \"\"; // ensure uniqueness\n        this.__add_options_to_select(select, values);\n        select.value = selected_value;\n    }\n\n    __get_array_from_DOM_row(tr) {\n        var children = tr.children;\n        var array = [];\n        for (var i = 0; i < children.length-1; i++) {\n            array.push(children[i].innerText);\n        }\n        return array;\n    }\n\n    __data_already_exists(data) {\n        return this.__find_array_index(data, this.data) >= 0;\n    }\n\n    __find_array_index(value, array) {\n        for (var i in array) {\n            if (JSON.stringify(array[i]) === JSON.stringify(value)) { // compare array\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    __create_table() {\n        if (this.table_title !== undefined) {\n            var label = document.createElement('label');\n            label.innerHTML = this.table_title;\n            this.container.appendChild(label);\n        }\n        this.form = document.createElement('form');\n        this.table = document.createElement('table');\n        this.table.classList.add(\"table\", \"table-bordered\", \"action-table\");\n        if (this.classes !== undefined) {\n            for (var i in this.classes) {\n                this.table.classList.add(this.classes[i]);\n            }\n        }\n        this.thead = document.createElement('thead');\n        this.tbody = document.createElement('tbody');\n        var trHead = document.createElement('tr');\n        for (var col of this.header) {\n            var th = document.createElement('th');\n            th.innerHTML = col;\n            trHead.appendChild(th);\n        }\n        this.thead.appendChild(trHead);\n\n        this.__add_control_row();\n\n        for (var row of this.data) {\n            this.__add_row(row);\n        }\n        this.table.appendChild(this.thead);\n        this.table.appendChild(this.tbody);\n        this.form.appendChild(this.table);\n        this.container.appendChild(this.form);\n    }\n\n    __add_row(row) {\n        var tr = document.createElement('tr');\n        tr.id = \"tr_\" + this.__uuidv4();\n        for (var col of row) {\n            var td = document.createElement('td');\n            td.textContent = col;\n            tr.appendChild(td);\n        }\n        this.__add_action_button(tr);\n        this.tbody.appendChild(tr);\n        return tr.id;\n    }\n\n    __add_control_row() {\n        var tr = document.createElement('tr');\n        for (var itemOption of this.control_items) {\n            var td = document.createElement('td');\n            var item = this.__add_control_item(itemOption);\n            if (itemOption.colspan !== undefined) {\n                td.colSpan = itemOption.colspan;\n            }\n            td.appendChild(item);\n            tr.appendChild(td);\n        }\n        var td = document.createElement('td');\n\n        var btn = document.createElement('button');\n        var header_action_button_style = this.header_action_button.style === undefined ? {} : this.header_action_button.style;\n        if (header_action_button_style.type !== undefined) {\n            btn.classList.add(\"btn\", \"btn-\"+header_action_button_style.type);\n        } else {\n            btn.classList.add(\"btn\", \"btn-primary\");\n        }\n        if (header_action_button_style.tooltip !== undefined) {\n            btn.title = header_action_button_style.tooltip;\n        }\n        if (header_action_button_style.icon !== undefined) {\n            btn.innerHTML = '<span class=\"fa '+header_action_button_style.icon+'\"></span>';\n        } else {\n            btn.innerHTML = '<span class=\"fa fa-plus-square\"></span>';\n        }\n        btn.type = \"button\";\n        btn.disabled = this.additionButtonDisabled;\n\n        var that = this;\n        btn.addEventListener(\"click\", function(evt) {\n            var data = [];\n            for (var elem of that.form.elements) {\n                if (elem.classList.contains('form-group')) {\n                    data.push(elem.value);\n                }\n            }\n            if (that.additionEnabled) {\n                that.add_row(data);\n            }\n            if (that.onAddition !== undefined) {\n                that.onAddition(data, that);\n            }\n        });\n\n        td.appendChild(btn);\n\n        tr.appendChild(td);\n        this.thead.appendChild(tr);\n    }\n\n    __add_control_item(options) {\n        var item;\n        switch(options.DOMType) {\n            case \"select\":\n                item = this.__create_select(options.item_options);\n                this.selects[item.id] = item;\n                break;\n            case \"input\":\n                item = this.__create_input(options.item_options);\n                break;\n            case \"empty\":\n                item = this.__create_empty(options.item_options);\n                break;\n            default:\n                break;\n        }\n        return item;\n    }\n\n    __add_action_button(tr) {\n        var that = this;\n        var td = document.createElement('td');\n        var btn = document.createElement('button');\n        btn.classList.add(\"btn\", \"btn-danger\");\n        btn.innerHTML = '<span class=\"fa fa-trash\"></span>';\n        btn.type = \"button\";\n        btn.setAttribute('rowID', tr.id);\n        if (that.row_action_button_style.tooltip !== undefined) {\n            btn.title = that.row_action_button_style.tooltip;\n        }\n        if (that.row_action_button_style.style !== undefined) {\n            btn.style = that.row_action_button_style.style;\n        }\n        var that = this;\n        btn.addEventListener(\"click\", function(evt) {\n            if (that.onRemove !== undefined) {\n                var tr = document.getElementById(this.getAttribute('rowID'));\n                var data = that.__get_array_from_DOM_row(tr);\n                that.onRemove(data, that);\n            }\n            if (that.removalEnabled) {\n                that.delete_row(this.getAttribute('rowID'));\n            }\n        });\n        td.appendChild(btn);\n\n        if (that.row_action_button.others !== undefined) {\n            for (var i in that.row_action_button.others) {\n                var newBtnOptions = that.row_action_button.others[i];\n\n                var btn_style = newBtnOptions.style !== undefined ? newBtnOptions.style : {};\n                var btn = document.createElement('button');\n                btn.type = \"button\";\n                if (btn_style.type !== undefined) {\n                    btn.classList.add(\"btn\", \"btn-\"+btn_style.type);\n                } else {\n                    btn.classList.add(\"btn\", \"btn-primary\");\n                }\n                if (btn_style.icon !== undefined) {\n                    btn.innerHTML = '<span class=\"fa '+btn_style.icon+'\"></span>';\n                } else {\n                    btn.innerHTML = '<span class=\"fa fa-check\"></span>';\n                }\n                if (btn_style.title !== undefined) {\n                    btn.title = btn_style.title;\n                }\n                if (btn_style.style !== undefined) {\n                    btn.style = btn_style.style+\"margin-left: 3px\";\n                } else {\n                    btn.style = \"margin-left: 3px\";\n                }\n                btn.setAttribute('rowID', tr.id);\n                if (newBtnOptions.event !== undefined) {\n                    btn.addEventListener(\"click\", function(evt) {\n                        var tr = document.getElementById(this.getAttribute('rowID'));\n                        var data = that.__get_array_from_DOM_row(tr);\n                        newBtnOptions.event(data, that);\n                    });\n                }\n                td.appendChild(btn);\n            }\n        }\n\n        tr.appendChild(td);\n    }\n\n    __create_empty(options) {\n        var empty = document.createElement('span');\n        empty.classList.add(\"form-group\");\n        empty.id = options.id !== undefined ? options.id : 'actionTable_controlSelect_'+this.__get_uniq_index();\n        return empty;\n    }\n\n    __create_input(options) {\n        var input = document.createElement('input');\n        input.classList.add(\"form-group\");\n        input.id = options.id !== undefined ? options.id : 'actionTable_controlSelect_'+this.__get_uniq_index();\n        if (options.style !== undefined) {\n            input.style = options.style;\n        }\n        if (options.placeholder !== undefined) {\n            input.placeholder = options.placeholder;\n        }\n        if (options.disabled !== undefined) {\n            input.disabled = options.disabled;\n        }\n        if (options.typeahead !== undefined) {\n            var typeaheadOption = options.typeahead;\n            $('#'+input.id).typeahead(typeaheadOption);\n        }\n        return input;\n    }\n\n    __create_select(select_options) {\n        var select = document.createElement('select');\n        select.classList.add(\"form-group\");\n        select.id = select_options.id !== undefined ? select_options.id : 'actionTable_controlSelect_'+this.__get_uniq_index();\n        select.style.width = \"100%\";\n        this.__add_options_to_select(select, select_options.options);\n        if(select_options.default !== undefined) {\n            select.value = select_options.default;\n        }\n        return select;\n    }\n\n    __add_options_to_select(select, options) {\n        for(var value of options) {\n            var option = document.createElement('option');\n            if (Array.isArray(value)) { // array of type [value, text]\n                option.value = value[1];\n                option.textContent = value[1];\n            } else { // only value, text=value\n                option.value = value;\n                option.textContent = value;\n            }\n            select.appendChild(option);\n        }\n    }\n\n    __uuidv4() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n}\n"], "filenames": ["app/webroot/js/action_table.js"], "buggy_code_start_loc": [165], "buggy_code_end_loc": [166], "fixing_code_start_loc": [165], "fixing_code_end_loc": [166], "type": "CWE-79", "message": "In MISP 2.4.167, app/webroot/js/action_table.js allows XSS via a network history name.", "other": {"cve": {"id": "CVE-2023-24027", "sourceIdentifier": "cve@mitre.org", "published": "2023-01-20T22:15:10.707", "lastModified": "2023-01-27T13:47:57.200", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In MISP 2.4.167, app/webroot/js/action_table.js allows XSS via a network history name."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.167:*:*:*:*:*:*:*", "matchCriteriaId": "1147A220-6AB4-4A78-9A97-75C367352A48"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/72c5424034c378583d128fc1e769aae33fb1c8b9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/72c5424034c378583d128fc1e769aae33fb1c8b9"}}