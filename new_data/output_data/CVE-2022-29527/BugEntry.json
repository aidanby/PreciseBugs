{"buggy_code": ["// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n// use this file except in compliance with the License. A copy of the\n// License is located at\n//\n// http://aws.amazon.com/apache2.0/\n//\n// or in the \"license\" file accompanying this file. This file is distributed\n// on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n// either express or implied. See the License for the specific language governing\n// permissions and limitations under the License.\n//\n//go:build darwin || freebsd || linux || netbsd || openbsd\n// +build darwin freebsd linux netbsd openbsd\n\n// utility package implements all the shared methods between clients.\npackage utility\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"syscall\"\n\t\"unsafe\"\n\n\t\"github.com/aws/amazon-ssm-agent/agent/appconfig\"\n\t\"github.com/aws/amazon-ssm-agent/agent/context\"\n\t\"github.com/aws/amazon-ssm-agent/agent/fileutil\"\n\t\"github.com/aws/amazon-ssm-agent/agent/log\"\n\t\"github.com/aws/amazon-ssm-agent/agent/session/utility/model\"\n)\n\nvar ShellPluginCommandName = \"sh\"\nvar ShellPluginCommandArgs = []string{\"-c\"}\n\nconst (\n\tsudoersFile     = \"/etc/sudoers.d/ssm-agent-users\"\n\tsudoersFileMode = 0440\n\tfs_ioc_getflags = uintptr(0x80086601)\n\tfs_ioc_setflags = uintptr(0x40086602)\n\tFS_APPEND_FL    = 0x00000020 /* writes to file may only append */\n\tFS_RESET_FL     = 0x00000000 /* reset file property */\n)\n\n// ResetPasswordIfDefaultUserExists resets default RunAs user password if user exists\nfunc (u *SessionUtil) ResetPasswordIfDefaultUserExists(context context.T) (err error) {\n\t// Do nothing here as no password is required for unix platform local user\n\treturn nil\n}\n\n// DoesUserExist checks if given user already exists\nfunc (u *SessionUtil) DoesUserExist(username string) (bool, error) {\n\tshellCmdArgs := append(ShellPluginCommandArgs, fmt.Sprintf(\"id %s\", username))\n\tcmd := exec.Command(ShellPluginCommandName, shellCmdArgs...)\n\tif err := cmd.Run(); err != nil {\n\t\tif exitErr, ok := err.(*exec.ExitError); ok {\n\t\t\t// The program has exited with an exit code != 0\n\t\t\treturn false, fmt.Errorf(\"encountered an error while checking for %s: %v\", appconfig.DefaultRunAsUserName, exitErr.Error())\n\t\t}\n\t\treturn false, nil\n\t}\n\treturn true, nil\n}\n\n// createLocalAdminUser creates a local OS user on the instance with admin permissions. The password will alway be empty\nfunc (u *SessionUtil) CreateLocalAdminUser(log log.T) (newPassword string, err error) {\n\n\tuserExists, _ := u.DoesUserExist(appconfig.DefaultRunAsUserName)\n\n\tif userExists {\n\t\tlog.Infof(\"%s already exists.\", appconfig.DefaultRunAsUserName)\n\t} else {\n\t\tif err = u.createLocalUser(log); err != nil {\n\t\t\treturn\n\t\t}\n\t\t// only create sudoers file when user does not exist\n\t\terr = u.createSudoersFileIfNotPresent(log)\n\t}\n\n\treturn\n}\n\n// createLocalUser creates an OS local user.\nfunc (u *SessionUtil) createLocalUser(log log.T) error {\n\n\tcommandArgs := append(ShellPluginCommandArgs, fmt.Sprintf(model.AddUserCommand, appconfig.DefaultRunAsUserName))\n\tcmd := exec.Command(ShellPluginCommandName, commandArgs...)\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Errorf(\"Failed to create %s: %v\", appconfig.DefaultRunAsUserName, err)\n\t\treturn err\n\t}\n\tlog.Infof(\"Successfully created %s\", appconfig.DefaultRunAsUserName)\n\treturn nil\n}\n\n// createSudoersFileIfNotPresent will create the sudoers file if not present.\nfunc (u *SessionUtil) createSudoersFileIfNotPresent(log log.T) error {\n\n\t// Return if the file exists\n\tif _, err := os.Stat(sudoersFile); err == nil {\n\t\tlog.Infof(\"File %s already exists\", sudoersFile)\n\t\t_ = u.changeModeOfSudoersFile(log)\n\t\treturn err\n\t}\n\n\t// Create a sudoers file for ssm-user\n\tfile, err := os.Create(sudoersFile)\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to add %s to sudoers file: %v\", appconfig.DefaultRunAsUserName, err)\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif closeErr := file.Close(); closeErr != nil {\n\t\t\tlog.Warnf(\"error occurred while closing file, %v\", closeErr)\n\t\t}\n\t}()\n\n\tif _, err := file.WriteString(fmt.Sprintf(\"# User rules for %s\\n\", appconfig.DefaultRunAsUserName)); err != nil {\n\t\treturn err\n\t}\n\tif _, err := file.WriteString(fmt.Sprintf(\"%s ALL=(ALL) NOPASSWD:ALL\\n\", appconfig.DefaultRunAsUserName)); err != nil {\n\t\treturn err\n\t}\n\tlog.Infof(\"Successfully created file %s\", sudoersFile)\n\t_ = u.changeModeOfSudoersFile(log)\n\treturn nil\n}\n\n// changeModeOfSudoersFile will change the sudoersFile mode to 0440 (read only).\n// This file is created with mode 0666 using os.Create() so needs to be updated to read only with chmod.\nfunc (u *SessionUtil) changeModeOfSudoersFile(log log.T) error {\n\tfileMode := os.FileMode(sudoersFileMode)\n\tif err := os.Chmod(sudoersFile, fileMode); err != nil {\n\t\tlog.Errorf(\"Failed to change mode of %s to %d: %v\", sudoersFile, sudoersFileMode, err)\n\t\treturn err\n\t}\n\tlog.Infof(\"Successfully changed mode of %s to %d\", sudoersFile, sudoersFileMode)\n\treturn nil\n}\n\nfunc (u *SessionUtil) DisableLocalUser(log log.T) (err error) {\n\t// Do nothing here as no password is required for unix platform local user, so that no need to disable user.\n\treturn nil\n}\n\n// NewListener starts a new socket listener on the address.\nfunc NewListener(log log.T, address string) (net.Listener, error) {\n\treturn net.Listen(\"unix\", address)\n}\n\n// ioctl is used for making system calls to manipulate file attributes\nfunc ioctl(f *os.File, request uintptr, attrp *int32) error {\n\targp := uintptr(unsafe.Pointer(attrp))\n\t_, _, errno := syscall.Syscall(syscall.SYS_IOCTL, f.Fd(), request, argp)\n\tif errno != 0 {\n\t\treturn os.NewSyscallError(\"ioctl\", errno)\n\t}\n\n\treturn nil\n}\n\n// SetAttr sets the attributes of a file on a linux filesystem to the given value\nfunc (u *SessionUtil) SetAttr(f *os.File, attr int32) error {\n\treturn ioctl(f, fs_ioc_setflags, &attr)\n}\n\n// GetAttr retrieves the attributes of a file on a linux filesystem\nfunc (u *SessionUtil) GetAttr(f *os.File) (int32, error) {\n\tattr := int32(-1)\n\terr := ioctl(f, fs_ioc_getflags, &attr)\n\treturn attr, err\n}\n\n// DeleteIpcTempFile resets file properties of ipcTempFile and tries deletion\nfunc (u *SessionUtil) DeleteIpcTempFile(log log.T, sessionOrchestrationPath string) (bool, error) {\n\tipcTempFilePath := filepath.Join(sessionOrchestrationPath, appconfig.PluginNameStandardStream, \"ipcTempFile.log\")\n\n\t// check if ipcTempFile exists\n\tif _, err := os.Stat(ipcTempFilePath); err != nil {\n\t\treturn false, fmt.Errorf(\"ipcTempFile does not exist, %v\", err)\n\t}\n\n\t// open ipcTempFile\n\tipcFile, err := os.Open(ipcTempFilePath)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"failed to open ipcTempFile %s, %v\", ipcTempFilePath, err)\n\t}\n\tdefer func() {\n\t\tif closeErr := ipcFile.Close(); closeErr != nil {\n\t\t\tlog.Warnf(\"error occurred while closing ipcFile, %v\", closeErr)\n\t\t}\n\t}()\n\n\t// reset file attributes\n\tif err := u.SetAttr(ipcFile, FS_RESET_FL); err != nil {\n\t\treturn false, fmt.Errorf(\"unable to reset file properties for %s, %v\", ipcTempFilePath, err)\n\t}\n\n\t// delete the directory\n\tif err := fileutil.DeleteDirectory(sessionOrchestrationPath); err != nil {\n\t\treturn false, err\n\t}\n\n\treturn true, nil\n}\n"], "fixing_code": ["// Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"). You may not\n// use this file except in compliance with the License. A copy of the\n// License is located at\n//\n// http://aws.amazon.com/apache2.0/\n//\n// or in the \"license\" file accompanying this file. This file is distributed\n// on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n// either express or implied. See the License for the specific language governing\n// permissions and limitations under the License.\n//\n//go:build darwin || freebsd || linux || netbsd || openbsd\n// +build darwin freebsd linux netbsd openbsd\n\n// utility package implements all the shared methods between clients.\npackage utility\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path/filepath\"\n\t\"syscall\"\n\t\"unsafe\"\n\n\t\"github.com/aws/amazon-ssm-agent/agent/appconfig\"\n\t\"github.com/aws/amazon-ssm-agent/agent/context\"\n\t\"github.com/aws/amazon-ssm-agent/agent/fileutil\"\n\t\"github.com/aws/amazon-ssm-agent/agent/log\"\n\t\"github.com/aws/amazon-ssm-agent/agent/session/utility/model\"\n)\n\nvar ShellPluginCommandName = \"sh\"\nvar ShellPluginCommandArgs = []string{\"-c\"}\n\nconst (\n\tsudoersFile                = \"/etc/sudoers.d/ssm-agent-users\"\n\tsudoersFileCreateWriteMode = 0640\n\tsudoersFileReadOnlyMode    = 0440\n\tfs_ioc_getflags            = uintptr(0x80086601)\n\tfs_ioc_setflags            = uintptr(0x40086602)\n\tFS_APPEND_FL               = 0x00000020 /* writes to file may only append */\n\tFS_RESET_FL                = 0x00000000 /* reset file property */\n)\n\n// ResetPasswordIfDefaultUserExists resets default RunAs user password if user exists\nfunc (u *SessionUtil) ResetPasswordIfDefaultUserExists(context context.T) (err error) {\n\t// Do nothing here as no password is required for unix platform local user\n\treturn nil\n}\n\n// DoesUserExist checks if given user already exists\nfunc (u *SessionUtil) DoesUserExist(username string) (bool, error) {\n\tshellCmdArgs := append(ShellPluginCommandArgs, fmt.Sprintf(\"id %s\", username))\n\tcmd := exec.Command(ShellPluginCommandName, shellCmdArgs...)\n\tif err := cmd.Run(); err != nil {\n\t\tif exitErr, ok := err.(*exec.ExitError); ok {\n\t\t\t// The program has exited with an exit code != 0\n\t\t\treturn false, fmt.Errorf(\"encountered an error while checking for %s: %v\", appconfig.DefaultRunAsUserName, exitErr.Error())\n\t\t}\n\t\treturn false, nil\n\t}\n\treturn true, nil\n}\n\n// createLocalAdminUser creates a local OS user on the instance with admin permissions. The password will alway be empty\nfunc (u *SessionUtil) CreateLocalAdminUser(log log.T) (newPassword string, err error) {\n\n\tuserExists, _ := u.DoesUserExist(appconfig.DefaultRunAsUserName)\n\n\tif userExists {\n\t\tlog.Infof(\"%s already exists.\", appconfig.DefaultRunAsUserName)\n\t} else {\n\t\tif err = u.createLocalUser(log); err != nil {\n\t\t\treturn\n\t\t}\n\t\t// only create sudoers file when user does not exist\n\t\terr = u.createSudoersFileIfNotPresent(log)\n\t}\n\n\treturn\n}\n\n// createLocalUser creates an OS local user.\nfunc (u *SessionUtil) createLocalUser(log log.T) error {\n\n\tcommandArgs := append(ShellPluginCommandArgs, fmt.Sprintf(model.AddUserCommand, appconfig.DefaultRunAsUserName))\n\tcmd := exec.Command(ShellPluginCommandName, commandArgs...)\n\tif err := cmd.Run(); err != nil {\n\t\tlog.Errorf(\"Failed to create %s: %v\", appconfig.DefaultRunAsUserName, err)\n\t\treturn err\n\t}\n\tlog.Infof(\"Successfully created %s\", appconfig.DefaultRunAsUserName)\n\treturn nil\n}\n\n// createSudoersFileIfNotPresent will create the sudoers file if not present.\nfunc (u *SessionUtil) createSudoersFileIfNotPresent(log log.T) error {\n\n\t// Return if the file exists\n\tif _, err := os.Stat(sudoersFile); err == nil {\n\t\tlog.Infof(\"File %s already exists\", sudoersFile)\n\t\t_ = u.changeModeOfSudoersFile(log)\n\t\treturn err\n\t}\n\n\t// Create a sudoers file for ssm-user with read/write access\n\tfile, err := os.OpenFile(sudoersFile, os.O_WRONLY|os.O_CREATE, sudoersFileCreateWriteMode)\n\tif err != nil {\n\t\tlog.Errorf(\"Failed to add %s to sudoers file: %v\", appconfig.DefaultRunAsUserName, err)\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif closeErr := file.Close(); closeErr != nil {\n\t\t\tlog.Warnf(\"error occurred while closing file, %v\", closeErr)\n\t\t}\n\t}()\n\n\tif _, err := file.WriteString(fmt.Sprintf(\"# User rules for %s\\n\", appconfig.DefaultRunAsUserName)); err != nil {\n\t\treturn err\n\t}\n\tif _, err := file.WriteString(fmt.Sprintf(\"%s ALL=(ALL) NOPASSWD:ALL\\n\", appconfig.DefaultRunAsUserName)); err != nil {\n\t\treturn err\n\t}\n\tlog.Infof(\"Successfully created file %s\", sudoersFile)\n\t_ = u.changeModeOfSudoersFile(log)\n\treturn nil\n}\n\n// changeModeOfSudoersFile will change the sudoersFile mode to 0440 (read only).\n// This file is created with mode 0666 using os.Create() so needs to be updated to read only with chmod.\nfunc (u *SessionUtil) changeModeOfSudoersFile(log log.T) error {\n\tfileMode := os.FileMode(sudoersFileReadOnlyMode)\n\tif err := os.Chmod(sudoersFile, fileMode); err != nil {\n\t\tlog.Errorf(\"Failed to change mode of %s to %d: %v\", sudoersFile, sudoersFileReadOnlyMode, err)\n\t\treturn err\n\t}\n\tlog.Infof(\"Successfully changed mode of %s to %d\", sudoersFile, sudoersFileReadOnlyMode)\n\treturn nil\n}\n\nfunc (u *SessionUtil) DisableLocalUser(log log.T) (err error) {\n\t// Do nothing here as no password is required for unix platform local user, so that no need to disable user.\n\treturn nil\n}\n\n// NewListener starts a new socket listener on the address.\nfunc NewListener(log log.T, address string) (net.Listener, error) {\n\treturn net.Listen(\"unix\", address)\n}\n\n// ioctl is used for making system calls to manipulate file attributes\nfunc ioctl(f *os.File, request uintptr, attrp *int32) error {\n\targp := uintptr(unsafe.Pointer(attrp))\n\t_, _, errno := syscall.Syscall(syscall.SYS_IOCTL, f.Fd(), request, argp)\n\tif errno != 0 {\n\t\treturn os.NewSyscallError(\"ioctl\", errno)\n\t}\n\n\treturn nil\n}\n\n// SetAttr sets the attributes of a file on a linux filesystem to the given value\nfunc (u *SessionUtil) SetAttr(f *os.File, attr int32) error {\n\treturn ioctl(f, fs_ioc_setflags, &attr)\n}\n\n// GetAttr retrieves the attributes of a file on a linux filesystem\nfunc (u *SessionUtil) GetAttr(f *os.File) (int32, error) {\n\tattr := int32(-1)\n\terr := ioctl(f, fs_ioc_getflags, &attr)\n\treturn attr, err\n}\n\n// DeleteIpcTempFile resets file properties of ipcTempFile and tries deletion\nfunc (u *SessionUtil) DeleteIpcTempFile(log log.T, sessionOrchestrationPath string) (bool, error) {\n\tipcTempFilePath := filepath.Join(sessionOrchestrationPath, appconfig.PluginNameStandardStream, \"ipcTempFile.log\")\n\n\t// check if ipcTempFile exists\n\tif _, err := os.Stat(ipcTempFilePath); err != nil {\n\t\treturn false, fmt.Errorf(\"ipcTempFile does not exist, %v\", err)\n\t}\n\n\t// open ipcTempFile\n\tipcFile, err := os.Open(ipcTempFilePath)\n\tif err != nil {\n\t\treturn false, fmt.Errorf(\"failed to open ipcTempFile %s, %v\", ipcTempFilePath, err)\n\t}\n\tdefer func() {\n\t\tif closeErr := ipcFile.Close(); closeErr != nil {\n\t\t\tlog.Warnf(\"error occurred while closing ipcFile, %v\", closeErr)\n\t\t}\n\t}()\n\n\t// reset file attributes\n\tif err := u.SetAttr(ipcFile, FS_RESET_FL); err != nil {\n\t\treturn false, fmt.Errorf(\"unable to reset file properties for %s, %v\", ipcTempFilePath, err)\n\t}\n\n\t// delete the directory\n\tif err := fileutil.DeleteDirectory(sessionOrchestrationPath); err != nil {\n\t\treturn false, err\n\t}\n\n\treturn true, nil\n}\n"], "filenames": ["agent/session/utility/utility_unix.go"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [141], "fixing_code_start_loc": [40], "fixing_code_end_loc": [142], "type": "NVD-CWE-noinfo", "message": "Amazon AWS amazon-ssm-agent before 3.1.1208.0 creates a world-writable sudoers file, which allows local attackers to inject Sudo rules and escalate privileges to root. This occurs in certain situations involving a race condition.", "other": {"cve": {"id": "CVE-2022-29527", "sourceIdentifier": "cve@mitre.org", "published": "2022-04-20T10:15:08.073", "lastModified": "2022-05-03T19:52:53.100", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Amazon AWS amazon-ssm-agent before 3.1.1208.0 creates a world-writable sudoers file, which allows local attackers to inject Sudo rules and escalate privileges to root. This occurs in certain situations involving a race condition."}, {"lang": "es", "value": "Amazon AWS amazon-ssm-agent versiones anteriores a 3.1.1208.0, crea un archivo sudoers escribible en todo el mundo, lo que permite a los atacantes locales inyectar reglas Sudo y escalar privilegios a root. Esto ocurre en determinadas situaciones que implican una condici\u00f3n de carrera"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.0, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:C/I:C/A:C", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 6.9}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.4, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:amazon:amazon_ssm_agent:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.1208.0", "matchCriteriaId": "67CBD69A-67B0-4908-A479-C3567CF0C432"}]}]}], "references": [{"url": "https://bugzilla.suse.com/show_bug.cgi?id=1196556", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/aws/amazon-ssm-agent/commit/0fe8ae99b2ff25649c7b86d3bc05fc037400aca7", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/aws/amazon-ssm-agent/releases/tag/3.1.1208.0", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/aws/amazon-ssm-agent/commit/0fe8ae99b2ff25649c7b86d3bc05fc037400aca7"}}