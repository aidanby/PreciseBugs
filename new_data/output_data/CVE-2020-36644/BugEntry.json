{"buggy_code": ["require 'action_view/helpers' if defined?(Rails)\nrequire 'action_view/context' if defined?(Rails)\n\nmodule InlineSvg\n  module ActionView\n    module Helpers\n      def inline_svg_tag(filename, transform_params={})\n        with_asset_finder(InlineSvg.configuration.asset_finder) do\n          render_inline_svg(filename, transform_params)\n        end\n      end\n\n      def inline_svg_pack_tag(filename, transform_params={})\n        with_asset_finder(InlineSvg::WebpackAssetFinder) do\n          render_inline_svg(filename, transform_params)\n        end\n      end\n\n      def inline_svg(filename, transform_params={})\n        ActiveSupport::Deprecation.warn(\n          '`inline_svg` is deprecated and will be removed from inline_svg 2.0 (use `inline_svg_tag` or `inline_svg_pack_tag` instead)'\n        )\n\n        render_inline_svg(filename, transform_params)\n      end\n\n      private\n\n      def render_inline_svg(filename, transform_params={})\n        begin\n          svg_file = read_svg(filename)\n        rescue InlineSvg::AssetFile::FileNotFound => error\n          raise error if InlineSvg.configuration.raise_on_file_not_found?\n          return placeholder(filename) unless transform_params[:fallback].present?\n\n          if transform_params[:fallback].present?\n            begin\n              svg_file = read_svg(transform_params[:fallback])\n            rescue InlineSvg::AssetFile::FileNotFound\n              placeholder(filename)\n            end\n          end\n        end\n\n        InlineSvg::TransformPipeline.generate_html_from(svg_file, transform_params).html_safe\n      end\n\n      def read_svg(filename)\n        if InlineSvg::IOResource === filename\n          InlineSvg::IOResource.read filename\n        else\n          configured_asset_file.named filename\n        end\n      end\n\n      def placeholder(filename)\n        css_class = InlineSvg.configuration.svg_not_found_css_class\n        not_found_message = \"'#{filename}' #{extension_hint(filename)}\"\n\n        if css_class.nil?\n          return \"<svg><!-- SVG file not found: #{not_found_message}--></svg>\".html_safe\n        else\n          return \"<svg class='#{css_class}'><!-- SVG file not found: #{not_found_message}--></svg>\".html_safe\n        end\n      end\n\n      def configured_asset_file\n        InlineSvg.configuration.asset_file\n      end\n\n      def with_asset_finder(asset_finder)\n        Thread.current[:inline_svg_asset_finder] = asset_finder\n        output = yield\n        Thread.current[:inline_svg_asset_finder] = nil\n\n        output\n      end\n\n      def extension_hint(filename)\n        filename.ends_with?(\".svg\") ? \"\" : \"(Try adding .svg to your filename) \"\n      end\n    end\n  end\nend\n", "require 'inline_svg'\n\nclass WorkingCustomTransform < InlineSvg::CustomTransformation\n  def transform(doc)\n    doc = Nokogiri::XML::Document.parse(doc.to_html)\n    svg = doc.at_css 'svg'\n    svg['custom'] = value\n    doc\n  end\nend\n\ndescribe InlineSvg::ActionView::Helpers do\n\n  let(:helper) { ( Class.new { include InlineSvg::ActionView::Helpers } ).new }\n\n  shared_examples \"inline_svg helper\" do |helper_method:|\n\n    context \"when passed the name of an SVG that does not exist\" do\n      after(:each) do\n        InlineSvg.reset_configuration!\n      end\n\n      context \"and configured to raise\" do\n        it \"raises an exception\" do\n          InlineSvg.configure do |config|\n            config.raise_on_file_not_found = true\n          end\n\n          allow(InlineSvg::AssetFile).to receive(:named).\n            with('some-missing-file.svg').\n            and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n          expect {\n            helper.send(helper_method, 'some-missing-file.svg')\n          }.to raise_error(InlineSvg::AssetFile::FileNotFound)\n        end\n      end\n\n      it \"returns an empty, html safe, SVG document as a placeholder\" do\n        allow(InlineSvg::AssetFile).to receive(:named).\n          with('some-missing-file.svg').\n          and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n        output = helper.send(helper_method, 'some-missing-file.svg')\n        expect(output).to eq \"<svg><!-- SVG file not found: 'some-missing-file.svg' --></svg>\"\n        expect(output).to be_html_safe\n      end\n\n      it \"gives a helpful hint when no .svg extension is provided in the filename\" do\n        allow(InlineSvg::AssetFile).to receive(:named).\n          with('missing-file-with-no-extension').\n          and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n        output = helper.send(helper_method, 'missing-file-with-no-extension')\n        expect(output).to eq \"<svg><!-- SVG file not found: 'missing-file-with-no-extension' (Try adding .svg to your filename) --></svg>\"\n      end\n\n      it \"allows the CSS class on the empty SVG document to be changed\" do\n        InlineSvg.configure do |config|\n          config.svg_not_found_css_class = 'missing-svg'\n        end\n\n        allow(InlineSvg::AssetFile).to receive(:named).\n          with('some-other-missing-file.svg').\n          and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n        output = helper.send(helper_method, 'some-other-missing-file.svg')\n        expect(output).to eq \"<svg class='missing-svg'><!-- SVG file not found: 'some-other-missing-file.svg' --></svg>\"\n        expect(output).to be_html_safe\n      end\n\n      context \"and a fallback that does exist\" do\n        it \"displays the fallback\" do\n          allow(InlineSvg::AssetFile).to receive(:named).\n            with('missing.svg').\n            and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n          fallback_file = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('fallback.svg').and_return(fallback_file)\n          expect(helper.send(helper_method, 'missing.svg', fallback: 'fallback.svg')).to eq fallback_file\n        end\n      end\n    end\n\n    context \"when passed an existing SVG file\" do\n\n      context \"and no options\" do\n        it \"returns a html safe version of the file's contents\" do\n          example_file = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(example_file)\n          expect(helper.send(helper_method, 'some-file')).to eq example_file\n        end\n      end\n\n      context \"and the 'title' option\" do\n        it \"adds the title node to the SVG output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"><title>A title</title></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', title: 'A title')).to eq expected_output\n        end\n      end\n\n      context \"and the 'desc' option\" do\n        it \"adds the description node to the SVG output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"><desc>A description</desc></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', desc: 'A description')).to eq expected_output\n        end\n      end\n\n      context \"and the 'nocomment' option\" do\n        it \"strips comments and other unknown/unsafe nodes from the output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', nocomment: true)).to eq expected_output\n        end\n      end\n\n      context \"and the 'aria_hidden' option\" do\n        it \"sets 'aria-hidden=true' in the output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\" aria-hidden=\"true\"></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', aria_hidden: true)).to eq expected_output\n        end\n      end\n\n      context \"and all options\" do\n        it \"applies all expected transformations to the output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><title>A title</title><desc>A description</desc></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', title: 'A title', desc: 'A description', nocomment: true)).to eq expected_output\n        end\n      end\n\n      context \"with custom transformations\" do\n        before(:each) do\n          InlineSvg.configure do |config|\n            config.add_custom_transformation({attribute: :custom, transform: WorkingCustomTransform})\n          end\n        end\n\n        after(:each) do\n          InlineSvg.reset_configuration!\n        end\n\n        it \"applies custm transformations to the output\" do\n          input_svg = <<-SVG\n<svg></svg>\nSVG\n          expected_output = <<-SVG\n<svg custom=\"some value\"></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', custom: 'some value')).to eq expected_output\n        end\n      end\n\n      context \"with custom transformations using a default value\" do\n        before(:each) do\n          InlineSvg.configure do |config|\n            config.add_custom_transformation({attribute: :custom, transform: WorkingCustomTransform, default_value: 'default value'})\n          end\n        end\n\n        after(:each) do\n          InlineSvg.reset_configuration!\n        end\n\n        context \"without passing the attribute value\" do\n          it \"applies custom transformations to the output using the default value\" do\n            input_svg = '<svg></svg>'\n\n            allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n\n            expect(helper.send(helper_method, 'some-file')).to eq \"<svg custom=\\\"default value\\\"></svg>\\n\"\n          end\n        end\n\n        context \"passing the attribute value\" do\n          it \"applies custom transformations to the output\" do\n            input_svg = '<svg></svg>'\n\n            allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n\n            expect(helper.send(helper_method, 'some-file', custom: 'some value')).to eq \"<svg custom=\\\"some value\\\"></svg>\\n\"\n          end\n        end\n      end\n\n    end\n    context 'argument polimorphizm' do\n      let(:argument) { double('argument') }\n      it 'accept IO' do\n        expect(InlineSvg::IOResource).to receive(:===).with(argument).and_return(true)\n        expect(InlineSvg::IOResource).to receive(:read).with(argument)\n        expect(InlineSvg::AssetFile).to_not receive(:named)\n        helper.send(helper_method, argument)\n      end\n      it 'accept filename' do\n        expect(InlineSvg::IOResource).to receive(:===).with(argument).and_return(false)\n        expect(InlineSvg::IOResource).to_not receive(:read)\n        expect(InlineSvg::AssetFile).to receive(:named).with(argument)\n        helper.send(helper_method, argument)\n      end\n    end\n    context 'when passed IO object argument' do\n      let(:io_object) { double('io_object') }\n      let(:file_path) { File.expand_path('../../files/example.svg', __FILE__) }\n      let(:answer) { File.read(file_path) }\n      it 'return valid svg' do\n        expect(InlineSvg::IOResource).to receive(:===).with(io_object).and_return(true)\n        expect(InlineSvg::IOResource).to receive(:read).with(io_object).and_return(\"<svg><!-- Test IO --></svg>\")\n        output = helper.send(helper_method, io_object)\n        expect(output).to eq \"<svg><!-- Test IO --></svg>\\n\"\n        expect(output).to be_html_safe\n      end\n\n      it 'return valid svg for file' do\n        output = helper.send(helper_method, File.new(file_path))\n        expect(output).to eq \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xml:lang=\\\"en\\\" role=\\\"presentation\\\"><!-- This is a test comment --></svg>\\n\"\n        expect(output).to be_html_safe\n      end\n\n    end\n  end\n\n  describe '#inline_svg' do\n    it_behaves_like \"inline_svg helper\", helper_method: :inline_svg\n  end\n\n  describe '#inline_svg_tag' do\n    it_behaves_like \"inline_svg helper\", helper_method: :inline_svg_tag\n  end\n\n  describe '#inline_svg_tag' do\n    it_behaves_like \"inline_svg helper\", helper_method: :inline_svg_pack_tag\n  end\nend\n"], "fixing_code": ["require 'action_view/helpers' if defined?(Rails)\nrequire 'action_view/context' if defined?(Rails)\n\nmodule InlineSvg\n  module ActionView\n    module Helpers\n      def inline_svg_tag(filename, transform_params={})\n        with_asset_finder(InlineSvg.configuration.asset_finder) do\n          render_inline_svg(filename, transform_params)\n        end\n      end\n\n      def inline_svg_pack_tag(filename, transform_params={})\n        with_asset_finder(InlineSvg::WebpackAssetFinder) do\n          render_inline_svg(filename, transform_params)\n        end\n      end\n\n      def inline_svg(filename, transform_params={})\n        ActiveSupport::Deprecation.warn(\n          '`inline_svg` is deprecated and will be removed from inline_svg 2.0 (use `inline_svg_tag` or `inline_svg_pack_tag` instead)'\n        )\n\n        render_inline_svg(filename, transform_params)\n      end\n\n      private\n\n      def render_inline_svg(filename, transform_params={})\n        begin\n          svg_file = read_svg(filename)\n        rescue InlineSvg::AssetFile::FileNotFound => error\n          raise error if InlineSvg.configuration.raise_on_file_not_found?\n          return placeholder(filename) unless transform_params[:fallback].present?\n\n          if transform_params[:fallback].present?\n            begin\n              svg_file = read_svg(transform_params[:fallback])\n            rescue InlineSvg::AssetFile::FileNotFound\n              placeholder(filename)\n            end\n          end\n        end\n\n        InlineSvg::TransformPipeline.generate_html_from(svg_file, transform_params).html_safe\n      end\n\n      def read_svg(filename)\n        if InlineSvg::IOResource === filename\n          InlineSvg::IOResource.read filename\n        else\n          configured_asset_file.named filename\n        end\n      end\n\n      def placeholder(filename)\n        css_class = InlineSvg.configuration.svg_not_found_css_class\n        not_found_message = \"'#{ERB::Util.html_escape_once(filename)}' #{extension_hint(filename)}\"\n\n        if css_class.nil?\n          return \"<svg><!-- SVG file not found: #{not_found_message}--></svg>\".html_safe\n        else\n          return \"<svg class='#{css_class}'><!-- SVG file not found: #{not_found_message}--></svg>\".html_safe\n        end\n      end\n\n      def configured_asset_file\n        InlineSvg.configuration.asset_file\n      end\n\n      def with_asset_finder(asset_finder)\n        Thread.current[:inline_svg_asset_finder] = asset_finder\n        output = yield\n        Thread.current[:inline_svg_asset_finder] = nil\n\n        output\n      end\n\n      def extension_hint(filename)\n        filename.ends_with?(\".svg\") ? \"\" : \"(Try adding .svg to your filename) \"\n      end\n    end\n  end\nend\n", "require 'inline_svg'\n\nclass WorkingCustomTransform < InlineSvg::CustomTransformation\n  def transform(doc)\n    doc = Nokogiri::XML::Document.parse(doc.to_html)\n    svg = doc.at_css 'svg'\n    svg['custom'] = value\n    doc\n  end\nend\n\ndescribe InlineSvg::ActionView::Helpers do\n\n  let(:helper) { ( Class.new { include InlineSvg::ActionView::Helpers } ).new }\n\n  shared_examples \"inline_svg helper\" do |helper_method:|\n\n    context \"when passed the name of an SVG that does not exist\" do\n      after(:each) do\n        InlineSvg.reset_configuration!\n      end\n\n      context \"and configured to raise\" do\n        it \"raises an exception\" do\n          InlineSvg.configure do |config|\n            config.raise_on_file_not_found = true\n          end\n\n          allow(InlineSvg::AssetFile).to receive(:named).\n            with('some-missing-file.svg').\n            and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n          expect {\n            helper.send(helper_method, 'some-missing-file.svg')\n          }.to raise_error(InlineSvg::AssetFile::FileNotFound)\n        end\n      end\n\n      it \"returns an empty, html safe, SVG document as a placeholder\" do\n        allow(InlineSvg::AssetFile).to receive(:named).\n          with('some-missing-file.svg').\n          and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n        output = helper.send(helper_method, 'some-missing-file.svg')\n        expect(output).to eq \"<svg><!-- SVG file not found: 'some-missing-file.svg' --></svg>\"\n        expect(output).to be_html_safe\n      end\n\n      it \"escapes malicious input\" do\n        malicious = \"--></svg><script>alert(1)</script><svg>.svg\"\n        allow(InlineSvg::AssetFile).to receive(:named).\n          with(malicious).\n          and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n        output = helper.send(helper_method, malicious)\n        expect(output).to eq \"<svg><!-- SVG file not found: '#{ERB::Util.html_escape_once(malicious)}' --></svg>\"\n        expect(output).to be_html_safe\n      end\n\n      it \"gives a helpful hint when no .svg extension is provided in the filename\" do\n        allow(InlineSvg::AssetFile).to receive(:named).\n          with('missing-file-with-no-extension').\n          and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n        output = helper.send(helper_method, 'missing-file-with-no-extension')\n        expect(output).to eq \"<svg><!-- SVG file not found: 'missing-file-with-no-extension' (Try adding .svg to your filename) --></svg>\"\n      end\n\n      it \"allows the CSS class on the empty SVG document to be changed\" do\n        InlineSvg.configure do |config|\n          config.svg_not_found_css_class = 'missing-svg'\n        end\n\n        allow(InlineSvg::AssetFile).to receive(:named).\n          with('some-other-missing-file.svg').\n          and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n        output = helper.send(helper_method, 'some-other-missing-file.svg')\n        expect(output).to eq \"<svg class='missing-svg'><!-- SVG file not found: 'some-other-missing-file.svg' --></svg>\"\n        expect(output).to be_html_safe\n      end\n\n      context \"and a fallback that does exist\" do\n        it \"displays the fallback\" do\n          allow(InlineSvg::AssetFile).to receive(:named).\n            with('missing.svg').\n            and_raise(InlineSvg::AssetFile::FileNotFound.new)\n\n          fallback_file = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('fallback.svg').and_return(fallback_file)\n          expect(helper.send(helper_method, 'missing.svg', fallback: 'fallback.svg')).to eq fallback_file\n        end\n      end\n    end\n\n    context \"when passed an existing SVG file\" do\n\n      context \"and no options\" do\n        it \"returns a html safe version of the file's contents\" do\n          example_file = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(example_file)\n          expect(helper.send(helper_method, 'some-file')).to eq example_file\n        end\n      end\n\n      context \"and the 'title' option\" do\n        it \"adds the title node to the SVG output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"><title>A title</title></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', title: 'A title')).to eq expected_output\n        end\n      end\n\n      context \"and the 'desc' option\" do\n        it \"adds the description node to the SVG output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" role=\"presentation\" xml:lang=\"en\"><desc>A description</desc></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', desc: 'A description')).to eq expected_output\n        end\n      end\n\n      context \"and the 'nocomment' option\" do\n        it \"strips comments and other unknown/unsafe nodes from the output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', nocomment: true)).to eq expected_output\n        end\n      end\n\n      context \"and the 'aria_hidden' option\" do\n        it \"sets 'aria-hidden=true' in the output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\" aria-hidden=\"true\"></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', aria_hidden: true)).to eq expected_output\n        end\n      end\n\n      context \"and all options\" do\n        it \"applies all expected transformations to the output\" do\n          input_svg = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><!-- This is a comment --></svg>\nSVG\n          expected_output = <<-SVG\n<svg xmlns=\"http://www.w3.org/2000/svg\" xml:lang=\"en\"><title>A title</title><desc>A description</desc></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', title: 'A title', desc: 'A description', nocomment: true)).to eq expected_output\n        end\n      end\n\n      context \"with custom transformations\" do\n        before(:each) do\n          InlineSvg.configure do |config|\n            config.add_custom_transformation({attribute: :custom, transform: WorkingCustomTransform})\n          end\n        end\n\n        after(:each) do\n          InlineSvg.reset_configuration!\n        end\n\n        it \"applies custm transformations to the output\" do\n          input_svg = <<-SVG\n<svg></svg>\nSVG\n          expected_output = <<-SVG\n<svg custom=\"some value\"></svg>\nSVG\n          allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n          expect(helper.send(helper_method, 'some-file', custom: 'some value')).to eq expected_output\n        end\n      end\n\n      context \"with custom transformations using a default value\" do\n        before(:each) do\n          InlineSvg.configure do |config|\n            config.add_custom_transformation({attribute: :custom, transform: WorkingCustomTransform, default_value: 'default value'})\n          end\n        end\n\n        after(:each) do\n          InlineSvg.reset_configuration!\n        end\n\n        context \"without passing the attribute value\" do\n          it \"applies custom transformations to the output using the default value\" do\n            input_svg = '<svg></svg>'\n\n            allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n\n            expect(helper.send(helper_method, 'some-file')).to eq \"<svg custom=\\\"default value\\\"></svg>\\n\"\n          end\n        end\n\n        context \"passing the attribute value\" do\n          it \"applies custom transformations to the output\" do\n            input_svg = '<svg></svg>'\n\n            allow(InlineSvg::AssetFile).to receive(:named).with('some-file').and_return(input_svg)\n\n            expect(helper.send(helper_method, 'some-file', custom: 'some value')).to eq \"<svg custom=\\\"some value\\\"></svg>\\n\"\n          end\n        end\n      end\n\n    end\n    context 'argument polimorphizm' do\n      let(:argument) { double('argument') }\n      it 'accept IO' do\n        expect(InlineSvg::IOResource).to receive(:===).with(argument).and_return(true)\n        expect(InlineSvg::IOResource).to receive(:read).with(argument)\n        expect(InlineSvg::AssetFile).to_not receive(:named)\n        helper.send(helper_method, argument)\n      end\n      it 'accept filename' do\n        expect(InlineSvg::IOResource).to receive(:===).with(argument).and_return(false)\n        expect(InlineSvg::IOResource).to_not receive(:read)\n        expect(InlineSvg::AssetFile).to receive(:named).with(argument)\n        helper.send(helper_method, argument)\n      end\n    end\n    context 'when passed IO object argument' do\n      let(:io_object) { double('io_object') }\n      let(:file_path) { File.expand_path('../../files/example.svg', __FILE__) }\n      let(:answer) { File.read(file_path) }\n      it 'return valid svg' do\n        expect(InlineSvg::IOResource).to receive(:===).with(io_object).and_return(true)\n        expect(InlineSvg::IOResource).to receive(:read).with(io_object).and_return(\"<svg><!-- Test IO --></svg>\")\n        output = helper.send(helper_method, io_object)\n        expect(output).to eq \"<svg><!-- Test IO --></svg>\\n\"\n        expect(output).to be_html_safe\n      end\n\n      it 'return valid svg for file' do\n        output = helper.send(helper_method, File.new(file_path))\n        expect(output).to eq \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xml:lang=\\\"en\\\" role=\\\"presentation\\\"><!-- This is a test comment --></svg>\\n\"\n        expect(output).to be_html_safe\n      end\n\n    end\n  end\n\n  describe '#inline_svg' do\n    it_behaves_like \"inline_svg helper\", helper_method: :inline_svg\n  end\n\n  describe '#inline_svg_tag' do\n    it_behaves_like \"inline_svg helper\", helper_method: :inline_svg_tag\n  end\n\n  describe '#inline_svg_tag' do\n    it_behaves_like \"inline_svg helper\", helper_method: :inline_svg_pack_tag\n  end\nend\n"], "filenames": ["lib/inline_svg/action_view/helpers.rb", "spec/helpers/inline_svg_spec.rb"], "buggy_code_start_loc": [58, 45], "buggy_code_end_loc": [59, 45], "fixing_code_start_loc": [58, 46], "fixing_code_end_loc": [59, 57], "type": "CWE-79", "message": "A vulnerability has been found in jamesmartin Inline SVG up to 1.7.1 and classified as problematic. Affected by this vulnerability is an unknown functionality of the file lib/inline_svg/action_view/helpers.rb of the component URL Parameter Handler. The manipulation of the argument filename leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.7.2 is able to address this issue. The name of the patch is f5363b351508486021f99e083c92068cf2943621. It is recommended to upgrade the affected component. The identifier VDB-217597 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2020-36644", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-07T10:15:09.417", "lastModified": "2023-01-12T16:40:20.770", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in jamesmartin Inline SVG up to 1.7.1 and classified as problematic. Affected by this vulnerability is an unknown functionality of the file lib/inline_svg/action_view/helpers.rb of the component URL Parameter Handler. The manipulation of the argument filename leads to cross site scripting. The attack can be launched remotely. Upgrading to version 1.7.2 is able to address this issue. The name of the patch is f5363b351508486021f99e083c92068cf2943621. It is recommended to upgrade the affected component. The identifier VDB-217597 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:inline_svg_project:inline_svg:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.2", "matchCriteriaId": "7741CA72-12D1-4538-A079-E2EC3D4BF377"}]}]}], "references": [{"url": "https://github.com/jamesmartin/inline_svg/commit/f5363b351508486021f99e083c92068cf2943621", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jamesmartin/inline_svg/pull/117", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jamesmartin/inline_svg/releases/tag/v1.7.2", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217597", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.217597", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/jamesmartin/inline_svg/commit/f5363b351508486021f99e083c92068cf2943621"}}