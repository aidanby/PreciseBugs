{"buggy_code": ["<?php\ndefined('PROJECT_PATH') OR exit('No direct script access allowed');\n\nclass Image\n{\n\tconst THUMB_W = 476;\n\tconst THUMB_H = 476;\n\n\tconst PHP_FILE_UPLOAD_ERRORS = [\n\t\t0 => 'There is no error, the file uploaded with success.',\n\t\t1 => 'The uploaded file exceeds the upload_max_filesize directive in php.ini.',\n\t\t2 => 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.',\n\t\t3 => 'The uploaded file was only partially uploaded.',\n\t\t4 => 'No file was uploaded.',\n\t\t6 => 'Missing a temporary folder.',\n\t\t7 => 'Failed to write file to disk.',\n\t\t8 => 'A PHP extension stopped the file upload.',\n\t];\n\n\tprivate static function random_str($len = 10){\n\t\t$chr = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\t\t$chr_len = strlen($chr);\n\t\t$random_str = '';\n\n\t\tfor($i = 0; $i < $len; $i++){\n\t\t\t$random_str .= $chr[rand(0, $chr_len - 1)];\n\t\t}\n\n\t\treturn $random_str;\n\t}\n\n\tprivate static function fix_orientation($path, $img){\n\t\tif(!function_exists('exif_read_data')){\n\t\t\treturn $img;\n\t\t}\n\n\t\t$exif = exif_read_data($path);\n\t\tif(!$exif || !isset($exif['Orientation'])){\n\t\t\treturn $img;\n\t\t}\n\n\t\t$deg = 0;\n\t\tswitch($exif['Orientation']){\n\t\t\tcase 3:\n\t\t\t\t$deg = 180;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$deg = 270;\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$deg = 90;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif($deg){\n\t\t\treturn imagerotate($img, $deg, 0);\n\t\t}\n\n\t\treturn $img;\n\t}\n\n\tprivate static function thumb($source_path, $thumb_path){\n\t\tini_set('memory_limit', '128M');\n\n\t\t$source_details = getimagesize($source_path);\n\t\t$source_w = $source_details[0];\n\t\t$source_h = $source_details[1];\n\n\t\tif($source_w > $source_h){\n\t\t\t$new_w = self::THUMB_W;\n\t\t\t$new_h = intval($source_h * $new_w / $source_w);\n\t\t} else {\n\t\t\t$new_h = self::THUMB_H;\n\t\t\t$new_w = intval($source_w * $new_h / $source_h);\n\t\t}\n\n\t\tswitch($source_details[2]){\n\t\t\tcase IMAGETYPE_GIF:\n\t\t\t\t$imgt = \"imagegif\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromgif\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_JPEG:\n\t\t\t\t$imgt = \"imagejpeg\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromjpeg\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_PNG:\n\t\t\t\t$imgt = \"imagepng\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefrompng\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_WEBP:\n\t\t\t\t$imgt = \"imagewebp\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromwebp\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_WBMP:\n\t\t\t\t$imgt = \"imagewbmp\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromwbmp\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_BMP:\n\t\t\t\t$imgt = \"imagebmp\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefrombmp\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t$old_image = $imgcreatefrom($source_path);\n\t\t$new_image = imagecreatetruecolor($new_w, $new_h);\n\t\timagecopyresampled($new_image, $old_image, 0, 0, 0, 0, $new_w, $new_h, $source_w, $source_h);\n\n\t\t$new_image = self::fix_orientation($source_path, $new_image);\n\t\t$old_image = self::fix_orientation($source_path, $old_image);\n\n\t\t$imgt($new_image, $thumb_path);\n\t\t$imgt($old_image, $source_path);\n\t\treturn true;\n\t}\n\n\tpublic static function upload(){\n\t\tif(!$_FILES){\n\t\t\tthrow new Exception(\"No file.\");\n\t\t}\n\n\t\t// Create MD5\n\t\t$md5 = md5_file($_FILES['file']['tmp_name']);\n\n\t\t// Find duplicate\n\t\tif($d = DB::get_instance()->query(\"SELECT `path`, `thumb` FROM `images` WHERE `md5` = ? AND `status` = 1 LIMIT 1\", $md5)->first()){\n\t\t\treturn $d;\n\t\t}\n\n\t\t// Ensure, that directories exists\n\t\t$_images_path = Config::get('images_path');\n\t\t$_thumbnails_path = Config::get('thumbnails_path');\n\t\tif(\n\t\t\t(!is_dir($_images_path) && !mkdir($_images_path, 0755, true)) ||\n\t\t\t(!is_dir($_thumbnails_path) && !mkdir($_thumbnails_path, 0755, true))\n\t\t){\n\t\t\tthrow new Exception(\"Images or thumbnails directory could not be created.\");\n\t\t}\n\n\t\t// Get metadata\n\t\t$name = $_FILES['file']['name'];\n\t\t$ext = pathinfo($name, PATHINFO_EXTENSION);\n\n\t\t// Save to DB\n\t\t$id = DB::get_instance()->insert('images', [\n\t\t\t'name' => $name,\n\t\t\t'type' => $ext,\n\t\t\t'md5' => $md5,\n\t\t\t'datetime' => 'NOW()',\n\t\t\t'status' => 0,\n\t\t])->last_id();\n\n\t\t// Create path name\n\t\t$name = dechex($id).self::random_str(3).\".\".$ext;\n\t\t$path = $_images_path.$name;\n\t\t$thumb = $_thumbnails_path.$name;\n\n\t\t// Save path\n\t\tif(!move_uploaded_file($_FILES['file']['tmp_name'], $path)){\n\t\t\tthrow new Exception(self::PHP_FILE_UPLOAD_ERRORS[$_FILES['file']['error']]);\n\t\t}\n\n\t\t// Create thumb\n\t\tif(!self::thumb($path, $thumb)){\n\t\t\tunlink($path);\n\t\t\tunlink($thumb);\n\t\t\tthrow new Exception(\"File is not valid image.\");\n\t\t}\n\n\t\t// Save to DB\n\t\tDB::get_instance()->update('images', [\n\t\t\t'path' => $path,\n\t\t\t'thumb' => $thumb,\n\t\t\t'status' => 1,\n\t\t], \"WHERE `id` = ?\", $id);\n\n\t\treturn [\n\t\t\t\"path\" => $path,\n\t\t\t\"thumb\" => $thumb\n\t\t];\n\t}\n}"], "fixing_code": ["<?php\ndefined('PROJECT_PATH') OR exit('No direct script access allowed');\n\nclass Image\n{\n\tconst THUMB_W = 476;\n\tconst THUMB_H = 476;\n\n\tconst PHP_FILE_UPLOAD_ERRORS = [\n\t\t0 => 'There is no error, the file uploaded with success.',\n\t\t1 => 'The uploaded file exceeds the upload_max_filesize directive in php.ini.',\n\t\t2 => 'The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.',\n\t\t3 => 'The uploaded file was only partially uploaded.',\n\t\t4 => 'No file was uploaded.',\n\t\t6 => 'Missing a temporary folder.',\n\t\t7 => 'Failed to write file to disk.',\n\t\t8 => 'A PHP extension stopped the file upload.',\n\t];\n\n\tprivate static function random_str($len = 10){\n\t\t$chr = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\t\t$chr_len = strlen($chr);\n\t\t$random_str = '';\n\n\t\tfor($i = 0; $i < $len; $i++){\n\t\t\t$random_str .= $chr[rand(0, $chr_len - 1)];\n\t\t}\n\n\t\treturn $random_str;\n\t}\n\n\tprivate static function fix_orientation($path, $img){\n\t\tif(!function_exists('exif_read_data')){\n\t\t\treturn $img;\n\t\t}\n\n\t\t$exif = exif_read_data($path);\n\t\tif(!$exif || !isset($exif['Orientation'])){\n\t\t\treturn $img;\n\t\t}\n\n\t\t$deg = 0;\n\t\tswitch($exif['Orientation']){\n\t\t\tcase 3:\n\t\t\t\t$deg = 180;\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$deg = 270;\n\t\t\t\tbreak;\n\t\t\tcase 8:\n\t\t\t\t$deg = 90;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif($deg){\n\t\t\treturn imagerotate($img, $deg, 0);\n\t\t}\n\n\t\treturn $img;\n\t}\n\n\tprivate static function thumb($source_path, $thumb_path){\n\t\tini_set('memory_limit', '128M');\n\n\t\t$source_details = getimagesize($source_path);\n\t\t$source_w = $source_details[0];\n\t\t$source_h = $source_details[1];\n\n\t\tif($source_w > $source_h){\n\t\t\t$new_w = self::THUMB_W;\n\t\t\t$new_h = intval($source_h * $new_w / $source_w);\n\t\t} else {\n\t\t\t$new_h = self::THUMB_H;\n\t\t\t$new_w = intval($source_w * $new_h / $source_h);\n\t\t}\n\n\t\tswitch($source_details[2]){\n\t\t\tcase IMAGETYPE_GIF:\n\t\t\t\t$imgt = \"imagegif\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromgif\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_JPEG:\n\t\t\t\t$imgt = \"imagejpeg\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromjpeg\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_PNG:\n\t\t\t\t$imgt = \"imagepng\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefrompng\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_WEBP:\n\t\t\t\t$imgt = \"imagewebp\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromwebp\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_WBMP:\n\t\t\t\t$imgt = \"imagewbmp\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefromwbmp\";\n\t\t\t\tbreak;\n\n\t\t\tcase IMAGETYPE_BMP:\n\t\t\t\t$imgt = \"imagebmp\";\n\t\t\t\t$imgcreatefrom = \"imagecreatefrombmp\";\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn false;\n\t\t}\n\n\t\t$old_image = $imgcreatefrom($source_path);\n\t\tif ($old_image === false) return false;\n\n\t\t$new_image = imagecreatetruecolor($new_w, $new_h);\n\t\timagecopyresampled($new_image, $old_image, 0, 0, 0, 0, $new_w, $new_h, $source_w, $source_h);\n\n\t\t$new_image = self::fix_orientation($source_path, $new_image);\n\t\t$old_image = self::fix_orientation($source_path, $old_image);\n\n\t\treturn $imgt($new_image, $thumb_path)\n\t\t\t&& $imgt($old_image, $source_path);\n\t}\n\n\tpublic static function upload(){\n\t\tif(!$_FILES){\n\t\t\tthrow new Exception(\"No file.\");\n\t\t}\n\n\t\t// Create MD5\n\t\t$md5 = md5_file($_FILES['file']['tmp_name']);\n\n\t\t// Find duplicate\n\t\tif($d = DB::get_instance()->query(\"SELECT `path`, `thumb` FROM `images` WHERE `md5` = ? AND `status` = 1 LIMIT 1\", $md5)->first()){\n\t\t\treturn $d;\n\t\t}\n\n\t\t// Ensure, that directories exists\n\t\t$_images_path = Config::get('images_path');\n\t\t$_thumbnails_path = Config::get('thumbnails_path');\n\t\tif(\n\t\t\t(!is_dir($_images_path) && !mkdir($_images_path, 0755, true)) ||\n\t\t\t(!is_dir($_thumbnails_path) && !mkdir($_thumbnails_path, 0755, true))\n\t\t){\n\t\t\tthrow new Exception(\"Images or thumbnails directory could not be created.\");\n\t\t}\n\n\t\t// Get metadata\n\t\t$name = $_FILES['file']['name'];\n\t\t$ext = pathinfo($name, PATHINFO_EXTENSION);\n\n\t\t// Save to DB\n\t\t$id = DB::get_instance()->insert('images', [\n\t\t\t'name' => $name,\n\t\t\t'type' => $ext,\n\t\t\t'md5' => $md5,\n\t\t\t'datetime' => 'NOW()',\n\t\t\t'status' => 0,\n\t\t])->last_id();\n\n\t\t// Create path name\n\t\t$name = dechex($id).self::random_str(3).\".\".$ext;\n\t\t$path = $_images_path.$name;\n\t\t$thumb = $_thumbnails_path.$name;\n\n\t\t// Save path\n\t\tif(!move_uploaded_file($_FILES['file']['tmp_name'], $path)){\n\t\t\tthrow new Exception(self::PHP_FILE_UPLOAD_ERRORS[$_FILES['file']['error']]);\n\t\t}\n\n\t\t// Create thumb\n\t\tif(!self::thumb($path, $thumb)){\n\t\t\tunlink($path);\n\t\t\tunlink($thumb);\n\t\t\tthrow new Exception(\"File is not valid image.\");\n\t\t}\n\n\t\t// Save to DB\n\t\tDB::get_instance()->update('images', [\n\t\t\t'path' => $path,\n\t\t\t'thumb' => $thumb,\n\t\t\t'status' => 1,\n\t\t], \"WHERE `id` = ?\", $id);\n\n\t\treturn [\n\t\t\t\"path\" => $path,\n\t\t\t\"thumb\" => $thumb\n\t\t];\n\t}\n}"], "filenames": ["app/image.class.php"], "buggy_code_start_loc": [112], "buggy_code_end_loc": [122], "fixing_code_start_loc": [113], "fixing_code_end_loc": [123], "type": "CWE-20", "message": "m1k1o/blog is a lightweight self-hosted facebook-styled PHP blog. Errors from functions `imagecreatefrom*` and `image*` have not been checked properly. Although PHP issued warnings and the upload function returned `false`, the original file (that could contain a malicious payload) was kept on the disk. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue.", "other": {"cve": {"id": "CVE-2022-23626", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-08T22:15:07.817", "lastModified": "2022-10-07T03:03:59.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "m1k1o/blog is a lightweight self-hosted facebook-styled PHP blog. Errors from functions `imagecreatefrom*` and `image*` have not been checked properly. Although PHP issued warnings and the upload function returned `false`, the original file (that could contain a malicious payload) was kept on the disk. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue."}, {"lang": "es", "value": "m1k1o/blog es un blog PHP ligero y auto-alojado al estilo de Facebook. Los errores de las funciones \"imagecreatefrom*\" y \"image*\" no han sido comprobados apropiadamente. Aunque PHP emit\u00eda advertencias y la funci\u00f3n de carga devolv\u00eda \"false\", el archivo original (que podr\u00eda contener una carga maliciosa) era mantenido en el disco. Es reacomendado a usuarios actualizar lo antes posible. No hay medidas de mitigaci\u00f3n adicionales conocidas para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:blog_project:blog:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4", "matchCriteriaId": "849BD9A6-17B1-477E-AD28-5336E0F450AA"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/167235/m1k1os-Blog-1.3-Remote-Code-Execution.html", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/m1k1o/blog/commit/6f5e59f1401c4a3cf2e518aa85b231ea14e8a2ef", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/m1k1o/blog/security/advisories/GHSA-wmqj-5v54-24x4", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/m1k1o/blog/commit/6f5e59f1401c4a3cf2e518aa85b231ea14e8a2ef"}}