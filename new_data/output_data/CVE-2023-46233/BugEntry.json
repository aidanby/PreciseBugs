{"buggy_code": ["/*jshint node: true*/\n\nmodule.exports = {\n    build: {\n        files: [{\n            expand: false,\n            cwd: '<%= meta.cwd %>',\n            src: ['<%= meta.source %>'],\n            dest: '<%= meta.build %>'\n        }],\n        options: {\n            // all\n            \"index\": {\n                \"global\": \"CryptoJS\",\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\", \"x64-core\", \"lib-typedarrays\", \"enc-utf16\", \"enc-base64\", \"enc-base64url\", \"md5\", \"sha1\", \"sha256\", \"sha224\", \"sha512\", \"sha384\", \"sha3\", \"ripemd160\", \"hmac\", \"pbkdf2\", \"evpkdf\", \"cipher-core\", \"mode-cfb\", \"mode-ctr\", \"mode-ctr-gladman\", \"mode-ofb\", \"mode-ecb\", \"pad-ansix923\", \"pad-iso10126\", \"pad-iso97971\", \"pad-zeropadding\", \"pad-nopadding\", \"format-hex\", \"aes\", \"tripledes\", \"rc4\", \"rabbit\", \"rabbit-legacy\",\"blowfish\"]\n            },\n            \"crypto-js\": {\n                \"pack\": true,\n                \"global\": \"CryptoJS\",\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\", \"x64-core\", \"lib-typedarrays\", \"enc-utf16\", \"enc-base64\", \"enc-base64url\", \"md5\", \"sha1\", \"sha256\", \"sha224\", \"sha512\", \"sha384\", \"sha3\", \"ripemd160\", \"hmac\", \"pbkdf2\", \"evpkdf\", \"cipher-core\", \"mode-cfb\", \"mode-ctr\", \"mode-ctr-gladman\", \"mode-ofb\", \"mode-ecb\", \"pad-ansix923\", \"pad-iso10126\", \"pad-iso97971\", \"pad-zeropadding\", \"pad-nopadding\", \"format-hex\", \"aes\", \"tripledes\", \"rc4\", \"rabbit\", \"rabbit-legacy\",\"blowfish\"]\n            },\n\n            // hash\n            \"md5\": {\n                \"exports\": \"CryptoJS.MD5\",\n                \"components\": [\"core\", \"md5\"]\n            },\n            \"sha1\": {\n                \"exports\": \"CryptoJS.SHA1\",\n                \"components\": [\"core\", \"sha1\"]\n            },\n            \"sha256\": {\n                \"exports\": \"CryptoJS.SHA256\",\n                \"components\": [\"core\", \"sha256\"]\n            },\n            \"sha224\": {\n                \"exports\": \"CryptoJS.SHA224\",\n                \"components\": [\"core\", \"sha256\", \"sha224\"]\n            },\n            \"sha512\": {\n                \"exports\": \"CryptoJS.SHA512\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\"]\n            },\n            \"sha384\": {\n                \"exports\": \"CryptoJS.SHA384\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\", \"sha384\"]\n            },\n            \"sha3\": {\n                \"exports\": \"CryptoJS.SHA3\",\n                \"components\": [\"core\", \"x64-core\", \"sha3\"]\n            },\n            \"ripemd160\": {\n                \"exports\": \"CryptoJS.RIPEMD160\",\n                \"components\": [\"core\", \"ripemd160\"]\n            },\n\n            // hmac hash\n            \"hmac-md5\": {\n                \"exports\": \"CryptoJS.HmacMD5\",\n                \"components\": [\"core\", \"md5\", \"hmac\"]\n            },\n            \"hmac-sha1\": {\n                \"exports\": \"CryptoJS.HmacSHA1\",\n                \"components\": [\"core\", \"sha1\", \"hmac\"]\n            },\n            \"hmac-sha256\": {\n                \"exports\": \"CryptoJS.HmacSHA256\",\n                \"components\": [\"core\", \"sha256\", \"hmac\"]\n            },\n            \"hmac-sha224\": {\n                \"exports\": \"CryptoJS.HmacSHA224\",\n                \"components\": [\"core\", \"sha256\", \"sha224\", \"hmac\"]\n            },\n            \"hmac-sha512\": {\n                \"exports\": \"CryptoJS.HmacSHA512\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\", \"hmac\"]\n            },\n            \"hmac-sha384\": {\n                \"exports\": \"CryptoJS.HmacSHA384\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\", \"sha384\", \"hmac\"]\n            },\n            \"hmac-sha3\": {\n                \"exports\": \"CryptoJS.HmacSHA3\",\n                \"components\": [\"core\", \"x64-core\", \"sha3\", \"hmac\"]\n            },\n            \"hmac-ripemd160\": {\n                \"exports\": \"CryptoJS.HmacRIPEMD160\",\n                \"components\": [\"core\", \"ripemd160\", \"hmac\"]\n            },\n            \"pbkdf2\": {\n                \"exports\": \"CryptoJS.PBKDF2\",\n                \"components\": [\"core\", \"sha1\", \"hmac\", \"pbkdf2\"]\n            },\n            \"evpkdf\": {\n                \"exports\": \"CryptoJS.EvpKDF\",\n                \"components\": [\"core\", \"sha1\", \"hmac\", \"evpkdf\"]\n            },\n\n            // cipher\n            \"aes\": {\n                \"exports\": \"CryptoJS.AES\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"aes\"]\n            },\n            \"blowfish\": {\n                \"exports\": \"CryptoJS.Blowfish\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"blowfish\"]\n            },\n            \"tripledes\": {\n                \"exports\": \"CryptoJS.TripleDES\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"tripledes\"]\n            },\n            \"rc4\": {\n                \"exports\": \"CryptoJS.RC4\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"rc4\"]\n            },\n            \"rabbit\": {\n                \"exports\": \"CryptoJS.Rabbit\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"rabbit\"]\n            },\n            \"rabbit-legacy\": {\n                \"exports\": \"CryptoJS.RabbitLegacy\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"rabbit-legacy\"]\n            },\n\n            // core\n            \"core\": {\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\"],\n                \"global\": \"CryptoJS\"\n            },\n            \"x64-core\": {\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\", \"x64-core\"]\n            },\n            \"hmac\": {\n                \"components\": [\"core\", \"hmac\"]\n            },\n            \"cipher-core\": {\n                \"components\": [\"core\", \"evpkdf\", \"cipher-core\"]\n            },\n\n            // lib\n            \"lib-typedarrays\": {\n                \"exports\": \"CryptoJS.lib.WordArray\",\n                \"components\": [\"core\", \"lib-typedarrays\"]\n            },\n\n            // format\n            \"format-openssl\": {\n                \"exports\": \"CryptoJS.format.OpenSSL\",\n                \"components\": [\"core\", \"cipher-core\"]\n            },\n            \"format-hex\": {\n                \"exports\": \"CryptoJS.format.Hex\",\n                \"components\": [\"core\", \"cipher-core\", \"format-hex\"]\n            },\n\n            // enc\n            \"enc-latin1\": {\n                \"exports\": \"CryptoJS.enc.Latin1\",\n                \"components\": [\"core\"]\n            },\n            \"enc-utf8\": {\n                \"exports\": \"CryptoJS.enc.Utf8\",\n                \"components\": [\"core\"]\n            },\n            \"enc-hex\": {\n                \"exports\": \"CryptoJS.enc.Hex\",\n                \"components\": [\"core\"]\n            },\n            \"enc-utf16\": {\n                \"exports\": \"CryptoJS.enc.Utf16\",\n                \"components\": [\"core\", \"enc-utf16\"]\n            },\n            \"enc-base64\": {\n                \"exports\": \"CryptoJS.enc.Base64\",\n                \"components\": [\"core\", \"enc-base64\"]\n            },\n            \"enc-base64url\": {\n                \"exports\": \"CryptoJS.enc.Base64url\",\n                \"components\": [\"core\", \"enc-base64url\"]\n            },\n\n            // mode\n            \"mode-cfb\": {\n                \"exports\": \"CryptoJS.mode.CFB\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-cfb\"]\n            },\n            \"mode-ctr\": {\n                \"exports\": \"CryptoJS.mode.CTR\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ctr\"]\n            },\n            \"mode-ctr-gladman\": {\n                \"exports\": \"CryptoJS.mode.CTRGladman\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ctr-gladman\"]\n            },\n            \"mode-ofb\": {\n                \"exports\": \"CryptoJS.mode.OFB\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ofb\"]\n            },\n            \"mode-ecb\": {\n                \"exports\": \"CryptoJS.mode.ECB\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ecb\"]\n            },\n\n            // pad\n            \"pad-pkcs7\": {\n                \"exports\": \"CryptoJS.pad.Pkcs7\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-pkcs7\"]\n            },\n            \"pad-ansix923\": {\n                \"exports\": \"CryptoJS.pad.Ansix923\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-ansix923\"]\n            },\n            \"pad-iso10126\": {\n                \"exports\": \"CryptoJS.pad.Iso10126\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-iso10126\"]\n            },\n            \"pad-iso97971\": {\n                \"exports\": \"CryptoJS.pad.Iso97971\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-iso97971\"]\n            },\n            \"pad-zeropadding\": {\n                \"exports\": \"CryptoJS.pad.ZeroPadding\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-zeropadding\"]\n            },\n            \"pad-nopadding\": {\n                \"exports\": \"CryptoJS.pad.NoPadding\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-nopadding\"]\n            }\n        }\n    }\n};\n", "(function () {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var WordArray = C_lib.WordArray;\r\n    var C_algo = C.algo;\r\n    var SHA1 = C_algo.SHA1;\r\n    var HMAC = C_algo.HMAC;\r\n\r\n    /**\r\n     * Password-Based Key Derivation Function 2 algorithm.\r\n     */\r\n    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\r\n         * @property {Hasher} hasher The hasher to use. Default: SHA1\r\n         * @property {number} iterations The number of iterations to perform. Default: 1\r\n         */\r\n        cfg: Base.extend({\r\n            keySize: 128/32,\r\n            hasher: SHA1,\r\n            iterations: 1\r\n        }),\r\n\r\n        /**\r\n         * Initializes a newly created key derivation function.\r\n         *\r\n         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var kdf = CryptoJS.algo.PBKDF2.create();\r\n         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\r\n         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\r\n         */\r\n        init: function (cfg) {\r\n            this.cfg = this.cfg.extend(cfg);\r\n        },\r\n\r\n        /**\r\n         * Computes the Password-Based Key Derivation Function 2.\r\n         *\r\n         * @param {WordArray|string} password The password.\r\n         * @param {WordArray|string} salt A salt.\r\n         *\r\n         * @return {WordArray} The derived key.\r\n         *\r\n         * @example\r\n         *\r\n         *     var key = kdf.compute(password, salt);\r\n         */\r\n        compute: function (password, salt) {\r\n            // Shortcut\r\n            var cfg = this.cfg;\r\n\r\n            // Init HMAC\r\n            var hmac = HMAC.create(cfg.hasher, password);\r\n\r\n            // Initial values\r\n            var derivedKey = WordArray.create();\r\n            var blockIndex = WordArray.create([0x00000001]);\r\n\r\n            // Shortcuts\r\n            var derivedKeyWords = derivedKey.words;\r\n            var blockIndexWords = blockIndex.words;\r\n            var keySize = cfg.keySize;\r\n            var iterations = cfg.iterations;\r\n\r\n            // Generate key\r\n            while (derivedKeyWords.length < keySize) {\r\n                var block = hmac.update(salt).finalize(blockIndex);\r\n                hmac.reset();\r\n\r\n                // Shortcuts\r\n                var blockWords = block.words;\r\n                var blockWordsLength = blockWords.length;\r\n\r\n                // Iterations\r\n                var intermediate = block;\r\n                for (var i = 1; i < iterations; i++) {\r\n                    intermediate = hmac.finalize(intermediate);\r\n                    hmac.reset();\r\n\r\n                    // Shortcut\r\n                    var intermediateWords = intermediate.words;\r\n\r\n                    // XOR intermediate with block\r\n                    for (var j = 0; j < blockWordsLength; j++) {\r\n                        blockWords[j] ^= intermediateWords[j];\r\n                    }\r\n                }\r\n\r\n                derivedKey.concat(block);\r\n                blockIndexWords[0]++;\r\n            }\r\n            derivedKey.sigBytes = keySize * 4;\r\n\r\n            return derivedKey;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Computes the Password-Based Key Derivation Function 2.\r\n     *\r\n     * @param {WordArray|string} password The password.\r\n     * @param {WordArray|string} salt A salt.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this computation.\r\n     *\r\n     * @return {WordArray} The derived key.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var key = CryptoJS.PBKDF2(password, salt);\r\n     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\r\n     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\r\n     */\r\n    C.PBKDF2 = function (password, salt, cfg) {\r\n        return PBKDF2.create(cfg).compute(password, salt);\r\n    };\r\n}());\r\n", "YUI.add('algo-pbkdf2-test', function (Y) {\r\n    var C = CryptoJS;\r\n\r\n    Y.Test.Runner.add(new Y.Test.Case({\r\n        name: 'PBKDF2',\r\n\r\n        testKeySize128: function () {\r\n            Y.Assert.areEqual('cdedb5281bb2f801565a1122b2563515', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32 }).toString());\r\n        },\r\n\r\n        testKeySize256: function () {\r\n            Y.Assert.areEqual('cdedb5281bb2f801565a1122b25635150ad1f7a04bb9f3a333ecc0e2e1f70837', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations2: function () {\r\n            Y.Assert.areEqual('01dbee7f4a9e243e988b62c73cda935d', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 2 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations2: function () {\r\n            Y.Assert.areEqual('01dbee7f4a9e243e988b62c73cda935da05378b93244ec8f48a99e61ad799d86', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 2 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations1200: function () {\r\n            Y.Assert.areEqual('5c08eb61fdf71e4e4ec3cf6ba1f5512b', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations1200: function () {\r\n            Y.Assert.areEqual('5c08eb61fdf71e4e4ec3cf6ba1f5512ba7e52ddbc5e5142f708a31e2e62b1e13', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations5: function () {\r\n            Y.Assert.areEqual('d1daa78615f287e6a1c8b120d7062a49', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 128/32, iterations: 5 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations5: function () {\r\n            Y.Assert.areEqual('d1daa78615f287e6a1c8b120d7062a493f98d203e6be49a6adf4fa574b6e64ee', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 256/32, iterations: 5 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations1200PassPhraseEqualsBlockSize: function () {\r\n            Y.Assert.areEqual('139c30c0966bc32ba55fdbf212530ac9', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations1200PassPhraseEqualsBlockSize: function () {\r\n            Y.Assert.areEqual('139c30c0966bc32ba55fdbf212530ac9c5ec59f1a452f5cc9ad940fea0598ed1', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations1200PassPhraseExceedsBlockSize: function () {\r\n            Y.Assert.areEqual('9ccad6d468770cd51b10e6a68721be61', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations1200PassPhraseExceedsBlockSize: function () {\r\n            Y.Assert.areEqual('9ccad6d468770cd51b10e6a68721be611a8b4d282601db3b36be9246915ec82a', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations50: function () {\r\n            Y.Assert.areEqual('6b9cf26d45455a43a5b8bb276a403b39', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 128/32, iterations: 50 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations50: function () {\r\n            Y.Assert.areEqual('6b9cf26d45455a43a5b8bb276a403b39e7fe37a0c41e02c281ff3069e1e94f52', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 256/32, iterations: 50 }).toString());\r\n        },\r\n\r\n        testInputIntegrity: function () {\r\n            var password = C.lib.WordArray.create([0x12345678]);\r\n            var salt = C.lib.WordArray.create([0x12345678]);\r\n\r\n            var expectedPassword = password.toString();\r\n            var expectedSalt = salt.toString();\r\n\r\n            C.PBKDF2(password, salt);\r\n\r\n            Y.Assert.areEqual(expectedPassword, password.toString());\r\n            Y.Assert.areEqual(expectedSalt, salt.toString());\r\n        },\r\n\r\n        testHelper: function () {\r\n            Y.Assert.areEqual(C.algo.PBKDF2.create({ keySize: 128/32 }).compute('password', 'ATHENA.MIT.EDUraeburn').toString(), C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32 }).toString());\r\n        }\r\n    }));\r\n}, '$Rev$');\r\n"], "fixing_code": ["/*jshint node: true*/\n\nmodule.exports = {\n    build: {\n        files: [{\n            expand: false,\n            cwd: '<%= meta.cwd %>',\n            src: ['<%= meta.source %>'],\n            dest: '<%= meta.build %>'\n        }],\n        options: {\n            // all\n            \"index\": {\n                \"global\": \"CryptoJS\",\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\", \"x64-core\", \"lib-typedarrays\", \"enc-utf16\", \"enc-base64\", \"enc-base64url\", \"md5\", \"sha1\", \"sha256\", \"sha224\", \"sha512\", \"sha384\", \"sha3\", \"ripemd160\", \"hmac\", \"pbkdf2\", \"evpkdf\", \"cipher-core\", \"mode-cfb\", \"mode-ctr\", \"mode-ctr-gladman\", \"mode-ofb\", \"mode-ecb\", \"pad-ansix923\", \"pad-iso10126\", \"pad-iso97971\", \"pad-zeropadding\", \"pad-nopadding\", \"format-hex\", \"aes\", \"tripledes\", \"rc4\", \"rabbit\", \"rabbit-legacy\",\"blowfish\"]\n            },\n            \"crypto-js\": {\n                \"pack\": true,\n                \"global\": \"CryptoJS\",\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\", \"x64-core\", \"lib-typedarrays\", \"enc-utf16\", \"enc-base64\", \"enc-base64url\", \"md5\", \"sha1\", \"sha256\", \"sha224\", \"sha512\", \"sha384\", \"sha3\", \"ripemd160\", \"hmac\", \"pbkdf2\", \"evpkdf\", \"cipher-core\", \"mode-cfb\", \"mode-ctr\", \"mode-ctr-gladman\", \"mode-ofb\", \"mode-ecb\", \"pad-ansix923\", \"pad-iso10126\", \"pad-iso97971\", \"pad-zeropadding\", \"pad-nopadding\", \"format-hex\", \"aes\", \"tripledes\", \"rc4\", \"rabbit\", \"rabbit-legacy\",\"blowfish\"]\n            },\n\n            // hash\n            \"md5\": {\n                \"exports\": \"CryptoJS.MD5\",\n                \"components\": [\"core\", \"md5\"]\n            },\n            \"sha1\": {\n                \"exports\": \"CryptoJS.SHA1\",\n                \"components\": [\"core\", \"sha1\"]\n            },\n            \"sha256\": {\n                \"exports\": \"CryptoJS.SHA256\",\n                \"components\": [\"core\", \"sha256\"]\n            },\n            \"sha224\": {\n                \"exports\": \"CryptoJS.SHA224\",\n                \"components\": [\"core\", \"sha256\", \"sha224\"]\n            },\n            \"sha512\": {\n                \"exports\": \"CryptoJS.SHA512\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\"]\n            },\n            \"sha384\": {\n                \"exports\": \"CryptoJS.SHA384\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\", \"sha384\"]\n            },\n            \"sha3\": {\n                \"exports\": \"CryptoJS.SHA3\",\n                \"components\": [\"core\", \"x64-core\", \"sha3\"]\n            },\n            \"ripemd160\": {\n                \"exports\": \"CryptoJS.RIPEMD160\",\n                \"components\": [\"core\", \"ripemd160\"]\n            },\n\n            // hmac hash\n            \"hmac-md5\": {\n                \"exports\": \"CryptoJS.HmacMD5\",\n                \"components\": [\"core\", \"md5\", \"hmac\"]\n            },\n            \"hmac-sha1\": {\n                \"exports\": \"CryptoJS.HmacSHA1\",\n                \"components\": [\"core\", \"sha1\", \"hmac\"]\n            },\n            \"hmac-sha256\": {\n                \"exports\": \"CryptoJS.HmacSHA256\",\n                \"components\": [\"core\", \"sha256\", \"hmac\"]\n            },\n            \"hmac-sha224\": {\n                \"exports\": \"CryptoJS.HmacSHA224\",\n                \"components\": [\"core\", \"sha256\", \"sha224\", \"hmac\"]\n            },\n            \"hmac-sha512\": {\n                \"exports\": \"CryptoJS.HmacSHA512\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\", \"hmac\"]\n            },\n            \"hmac-sha384\": {\n                \"exports\": \"CryptoJS.HmacSHA384\",\n                \"components\": [\"core\", \"x64-core\", \"sha512\", \"sha384\", \"hmac\"]\n            },\n            \"hmac-sha3\": {\n                \"exports\": \"CryptoJS.HmacSHA3\",\n                \"components\": [\"core\", \"x64-core\", \"sha3\", \"hmac\"]\n            },\n            \"hmac-ripemd160\": {\n                \"exports\": \"CryptoJS.HmacRIPEMD160\",\n                \"components\": [\"core\", \"ripemd160\", \"hmac\"]\n            },\n            \"pbkdf2\": {\n                \"exports\": \"CryptoJS.PBKDF2\",\n                \"components\": [\"core\", \"sha256\", \"hmac\", \"pbkdf2\"]\n            },\n            \"evpkdf\": {\n                \"exports\": \"CryptoJS.EvpKDF\",\n                \"components\": [\"core\", \"sha1\", \"hmac\", \"evpkdf\"]\n            },\n\n            // cipher\n            \"aes\": {\n                \"exports\": \"CryptoJS.AES\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"aes\"]\n            },\n            \"blowfish\": {\n                \"exports\": \"CryptoJS.Blowfish\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"blowfish\"]\n            },\n            \"tripledes\": {\n                \"exports\": \"CryptoJS.TripleDES\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"tripledes\"]\n            },\n            \"rc4\": {\n                \"exports\": \"CryptoJS.RC4\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"rc4\"]\n            },\n            \"rabbit\": {\n                \"exports\": \"CryptoJS.Rabbit\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"rabbit\"]\n            },\n            \"rabbit-legacy\": {\n                \"exports\": \"CryptoJS.RabbitLegacy\",\n                \"components\": [\"core\", \"enc-base64\", \"md5\", \"evpkdf\", \"cipher-core\", \"rabbit-legacy\"]\n            },\n\n            // core\n            \"core\": {\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\"],\n                \"global\": \"CryptoJS\"\n            },\n            \"x64-core\": {\n                \"exports\": \"CryptoJS\",\n                \"components\": [\"core\", \"x64-core\"]\n            },\n            \"hmac\": {\n                \"components\": [\"core\", \"hmac\"]\n            },\n            \"cipher-core\": {\n                \"components\": [\"core\", \"evpkdf\", \"cipher-core\"]\n            },\n\n            // lib\n            \"lib-typedarrays\": {\n                \"exports\": \"CryptoJS.lib.WordArray\",\n                \"components\": [\"core\", \"lib-typedarrays\"]\n            },\n\n            // format\n            \"format-openssl\": {\n                \"exports\": \"CryptoJS.format.OpenSSL\",\n                \"components\": [\"core\", \"cipher-core\"]\n            },\n            \"format-hex\": {\n                \"exports\": \"CryptoJS.format.Hex\",\n                \"components\": [\"core\", \"cipher-core\", \"format-hex\"]\n            },\n\n            // enc\n            \"enc-latin1\": {\n                \"exports\": \"CryptoJS.enc.Latin1\",\n                \"components\": [\"core\"]\n            },\n            \"enc-utf8\": {\n                \"exports\": \"CryptoJS.enc.Utf8\",\n                \"components\": [\"core\"]\n            },\n            \"enc-hex\": {\n                \"exports\": \"CryptoJS.enc.Hex\",\n                \"components\": [\"core\"]\n            },\n            \"enc-utf16\": {\n                \"exports\": \"CryptoJS.enc.Utf16\",\n                \"components\": [\"core\", \"enc-utf16\"]\n            },\n            \"enc-base64\": {\n                \"exports\": \"CryptoJS.enc.Base64\",\n                \"components\": [\"core\", \"enc-base64\"]\n            },\n            \"enc-base64url\": {\n                \"exports\": \"CryptoJS.enc.Base64url\",\n                \"components\": [\"core\", \"enc-base64url\"]\n            },\n\n            // mode\n            \"mode-cfb\": {\n                \"exports\": \"CryptoJS.mode.CFB\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-cfb\"]\n            },\n            \"mode-ctr\": {\n                \"exports\": \"CryptoJS.mode.CTR\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ctr\"]\n            },\n            \"mode-ctr-gladman\": {\n                \"exports\": \"CryptoJS.mode.CTRGladman\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ctr-gladman\"]\n            },\n            \"mode-ofb\": {\n                \"exports\": \"CryptoJS.mode.OFB\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ofb\"]\n            },\n            \"mode-ecb\": {\n                \"exports\": \"CryptoJS.mode.ECB\",\n                \"components\": [\"core\", \"cipher-core\", \"mode-ecb\"]\n            },\n\n            // pad\n            \"pad-pkcs7\": {\n                \"exports\": \"CryptoJS.pad.Pkcs7\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-pkcs7\"]\n            },\n            \"pad-ansix923\": {\n                \"exports\": \"CryptoJS.pad.Ansix923\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-ansix923\"]\n            },\n            \"pad-iso10126\": {\n                \"exports\": \"CryptoJS.pad.Iso10126\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-iso10126\"]\n            },\n            \"pad-iso97971\": {\n                \"exports\": \"CryptoJS.pad.Iso97971\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-iso97971\"]\n            },\n            \"pad-zeropadding\": {\n                \"exports\": \"CryptoJS.pad.ZeroPadding\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-zeropadding\"]\n            },\n            \"pad-nopadding\": {\n                \"exports\": \"CryptoJS.pad.NoPadding\",\n                \"components\": [\"core\", \"cipher-core\", \"pad-nopadding\"]\n            }\n        }\n    }\n};\n", "(function () {\r\n    // Shortcuts\r\n    var C = CryptoJS;\r\n    var C_lib = C.lib;\r\n    var Base = C_lib.Base;\r\n    var WordArray = C_lib.WordArray;\r\n    var C_algo = C.algo;\r\n    var SHA256 = C_algo.SHA256;\r\n    var HMAC = C_algo.HMAC;\r\n\r\n    /**\r\n     * Password-Based Key Derivation Function 2 algorithm.\r\n     */\r\n    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\r\n        /**\r\n         * Configuration options.\r\n         *\r\n         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\r\n         * @property {Hasher} hasher The hasher to use. Default: SHA256\r\n         * @property {number} iterations The number of iterations to perform. Default: 250000\r\n         */\r\n        cfg: Base.extend({\r\n            keySize: 128/32,\r\n            hasher: SHA256,\r\n            iterations: 250000\r\n        }),\r\n\r\n        /**\r\n         * Initializes a newly created key derivation function.\r\n         *\r\n         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\r\n         *\r\n         * @example\r\n         *\r\n         *     var kdf = CryptoJS.algo.PBKDF2.create();\r\n         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\r\n         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\r\n         */\r\n        init: function (cfg) {\r\n            this.cfg = this.cfg.extend(cfg);\r\n        },\r\n\r\n        /**\r\n         * Computes the Password-Based Key Derivation Function 2.\r\n         *\r\n         * @param {WordArray|string} password The password.\r\n         * @param {WordArray|string} salt A salt.\r\n         *\r\n         * @return {WordArray} The derived key.\r\n         *\r\n         * @example\r\n         *\r\n         *     var key = kdf.compute(password, salt);\r\n         */\r\n        compute: function (password, salt) {\r\n            // Shortcut\r\n            var cfg = this.cfg;\r\n\r\n            // Init HMAC\r\n            var hmac = HMAC.create(cfg.hasher, password);\r\n\r\n            // Initial values\r\n            var derivedKey = WordArray.create();\r\n            var blockIndex = WordArray.create([0x00000001]);\r\n\r\n            // Shortcuts\r\n            var derivedKeyWords = derivedKey.words;\r\n            var blockIndexWords = blockIndex.words;\r\n            var keySize = cfg.keySize;\r\n            var iterations = cfg.iterations;\r\n\r\n            // Generate key\r\n            while (derivedKeyWords.length < keySize) {\r\n                var block = hmac.update(salt).finalize(blockIndex);\r\n                hmac.reset();\r\n\r\n                // Shortcuts\r\n                var blockWords = block.words;\r\n                var blockWordsLength = blockWords.length;\r\n\r\n                // Iterations\r\n                var intermediate = block;\r\n                for (var i = 1; i < iterations; i++) {\r\n                    intermediate = hmac.finalize(intermediate);\r\n                    hmac.reset();\r\n\r\n                    // Shortcut\r\n                    var intermediateWords = intermediate.words;\r\n\r\n                    // XOR intermediate with block\r\n                    for (var j = 0; j < blockWordsLength; j++) {\r\n                        blockWords[j] ^= intermediateWords[j];\r\n                    }\r\n                }\r\n\r\n                derivedKey.concat(block);\r\n                blockIndexWords[0]++;\r\n            }\r\n            derivedKey.sigBytes = keySize * 4;\r\n\r\n            return derivedKey;\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Computes the Password-Based Key Derivation Function 2.\r\n     *\r\n     * @param {WordArray|string} password The password.\r\n     * @param {WordArray|string} salt A salt.\r\n     * @param {Object} cfg (Optional) The configuration options to use for this computation.\r\n     *\r\n     * @return {WordArray} The derived key.\r\n     *\r\n     * @static\r\n     *\r\n     * @example\r\n     *\r\n     *     var key = CryptoJS.PBKDF2(password, salt);\r\n     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\r\n     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\r\n     */\r\n    C.PBKDF2 = function (password, salt, cfg) {\r\n        return PBKDF2.create(cfg).compute(password, salt);\r\n    };\r\n}());\r\n", "YUI.add('algo-pbkdf2-test', function (Y) {\r\n    var C = CryptoJS;\r\n\r\n    Y.Test.Runner.add(new Y.Test.Case({\r\n        name: 'PBKDF2',\r\n\r\n        testKeySize128: function () {\r\n            Y.Assert.areEqual('62929ab995a1111c75c37bc562261ea3', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32 }).toString());\r\n        },\r\n\r\n        testKeySize256: function () {\r\n            Y.Assert.areEqual('62929ab995a1111c75c37bc562261ea3fb3cdc7e725c4ca87c03cec5bb7663e1', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations2: function () {\r\n            Y.Assert.areEqual('262fb72ea65b44ab5ceba7f8c8bfa781', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 2 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations2: function () {\r\n            Y.Assert.areEqual('262fb72ea65b44ab5ceba7f8c8bfa7815ff9939204eb7357a59a75877d745777', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 2 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations1200: function () {\r\n            Y.Assert.areEqual('c76a982415f1acc71dc197273c5b6ada', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations1200: function () {\r\n            Y.Assert.areEqual('c76a982415f1acc71dc197273c5b6ada32f62915ed461718aad32843762433fa', C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 256/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations5: function () {\r\n            Y.Assert.areEqual('74e98b2e9eeddaab3113c1efc6d82b07', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 128/32, iterations: 5 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations5: function () {\r\n            Y.Assert.areEqual('74e98b2e9eeddaab3113c1efc6d82b073c4860195b3e0737fa21a4778f376321', C.PBKDF2('password', C.enc.Hex.parse('1234567878563412'), { keySize: 256/32, iterations: 5 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations1200PassPhraseEqualsBlockSize: function () {\r\n            Y.Assert.areEqual('c1dfb29a4d2f2fb67c6f78d074d66367', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations1200PassPhraseEqualsBlockSize: function () {\r\n            Y.Assert.areEqual('c1dfb29a4d2f2fb67c6f78d074d663671e6fd4da1e598572b1fecf256cb7cf61', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase equals block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations1200PassPhraseExceedsBlockSize: function () {\r\n            Y.Assert.areEqual('22344bc4b6e32675a8090f3ea80be01d', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 128/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations1200PassPhraseExceedsBlockSize: function () {\r\n            Y.Assert.areEqual('22344bc4b6e32675a8090f3ea80be01d5f95126a2cddc3facc4a5e6dca04ec58', C.PBKDF2('XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX', 'pass phrase exceeds block size', { keySize: 256/32, iterations: 1200 }).toString());\r\n        },\r\n\r\n        testKeySize128Iterations50: function () {\r\n            Y.Assert.areEqual('44b0781253db3141ac4174af29325818', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 128/32, iterations: 50 }).toString());\r\n        },\r\n\r\n        testKeySize256Iterations50: function () {\r\n            Y.Assert.areEqual('44b0781253db3141ac4174af29325818584698d507a79f9879033dec308a2b77', C.PBKDF2(C.enc.Hex.parse('f09d849e'), 'EXAMPLE.COMpianist', { keySize: 256/32, iterations: 50 }).toString());\r\n        },\r\n\r\n        testInputIntegrity: function () {\r\n            var password = C.lib.WordArray.create([0x12345678]);\r\n            var salt = C.lib.WordArray.create([0x12345678]);\r\n\r\n            var expectedPassword = password.toString();\r\n            var expectedSalt = salt.toString();\r\n\r\n            C.PBKDF2(password, salt);\r\n\r\n            Y.Assert.areEqual(expectedPassword, password.toString());\r\n            Y.Assert.areEqual(expectedSalt, salt.toString());\r\n        },\r\n\r\n        testHelper: function () {\r\n            Y.Assert.areEqual(C.algo.PBKDF2.create({ keySize: 128/32 }).compute('password', 'ATHENA.MIT.EDUraeburn').toString(), C.PBKDF2('password', 'ATHENA.MIT.EDUraeburn', { keySize: 128/32 }).toString());\r\n        }\r\n    }));\r\n}, '$Rev$');\r\n"], "filenames": ["grunt/config/modularize.js", "src/pbkdf2.js", "test/pbkdf2-test.js"], "buggy_code_start_loc": [94, 8, 8], "buggy_code_end_loc": [95, 26, 61], "fixing_code_start_loc": [94, 8, 8], "fixing_code_end_loc": [95, 26, 61], "type": "CWE-327", "message": "crypto-js is a JavaScript library of crypto standards. Prior to version 4.2.0, crypto-js PBKDF2 is 1,000 times weaker than originally specified in 1993, and at least 1,300,000 times weaker than current industry standard. This is because it both defaults to SHA1, a cryptographic hash algorithm considered insecure since at least 2005, and defaults to one single iteration, a 'strength' or 'difficulty' value specified at 1,000 when specified in 1993. PBKDF2 relies on iteration count as a countermeasure to preimage and collision attacks. If used to protect passwords, the impact is high. If used to generate signatures, the impact is high. Version 4.2.0 contains a patch for this issue. As a workaround, configure crypto-js to use SHA256 with at least 250,000 iterations.", "other": {"cve": {"id": "CVE-2023-46233", "sourceIdentifier": "security-advisories@github.com", "published": "2023-10-25T21:15:10.307", "lastModified": "2023-11-27T20:15:06.880", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "crypto-js is a JavaScript library of crypto standards. Prior to version 4.2.0, crypto-js PBKDF2 is 1,000 times weaker than originally specified in 1993, and at least 1,300,000 times weaker than current industry standard. This is because it both defaults to SHA1, a cryptographic hash algorithm considered insecure since at least 2005, and defaults to one single iteration, a 'strength' or 'difficulty' value specified at 1,000 when specified in 1993. PBKDF2 relies on iteration count as a countermeasure to preimage and collision attacks. If used to protect passwords, the impact is high. If used to generate signatures, the impact is high. Version 4.2.0 contains a patch for this issue. As a workaround, configure crypto-js to use SHA256 with at least 250,000 iterations."}, {"lang": "es", "value": "crypto-js es una librer\u00eda JavaScript de est\u00e1ndares criptogr\u00e1ficos. Antes de la versi\u00f3n 4.2.0, crypto-js PBKDF2 era 1000 veces m\u00e1s d\u00e9bil de lo especificado originalmente en 1993 y al menos 1.300.000 veces m\u00e1s d\u00e9bil que el est\u00e1ndar actual de la industria. Esto se debe a que su valor predeterminado es SHA1, un algoritmo hash criptogr\u00e1fico considerado inseguro desde al menos 2005, y su valor predeterminado es una \u00fanica iteraci\u00f3n, un valor de \"fuerza\" o \"dificultad\" especificado en 1000 cuando se especific\u00f3 en 1993. PBKDF2 se basa en el recuento de iteraciones como una contramedida a los ataques de preimagen y colisi\u00f3n. Si se utiliza para proteger contrase\u00f1as, el impacto es alto. Si se utiliza para generar firmas, el impacto es alto. La versi\u00f3n 4.2.0 contiene un parche para este problema. Como workaround, configure crypto-js para usar SHA256 con al menos 250 000 iteraciones."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-327"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-328"}, {"lang": "en", "value": "CWE-916"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:crypto-js_project:crypto-js:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.2.0", "matchCriteriaId": "B50D5D27-E8C7-40A3-9B23-C320A41DBB25"}]}]}], "references": [{"url": "https://github.com/brix/crypto-js/commit/421dd538b2d34e7c24a5b72cc64dc2b9167db40a", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/brix/crypto-js/security/advisories/GHSA-xwcq-pm8m-c4vf", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2023/11/msg00025.html", "source": "security-advisories@github.com"}]}, "github_commit_url": "https://github.com/brix/crypto-js/commit/421dd538b2d34e7c24a5b72cc64dc2b9167db40a"}}