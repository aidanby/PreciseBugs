{"buggy_code": ["<?php\n/**\n *\n *  2007-2021 PayPal\n *\n *  NOTICE OF LICENSE\n *\n *  This source file is subject to the Academic Free License (AFL 3.0)\n *  that is bundled with this package in the file LICENSE.txt.\n *  It is also available through the world-wide-web at this URL:\n *  http://opensource.org/licenses/afl-3.0.php\n *  If you did not receive a copy of the license and are unable to\n *  obtain it through the world-wide-web, please send an email\n *  to license@prestashop.com so we can send you a copy immediately.\n *\n *  DISCLAIMER\n *\n *  Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n *  versions in the future. If you wish to customize PrestaShop for your\n *  needs please refer to http://www.prestashop.com for more information.\n *\n *  @author 2007-2021 PayPal\n *  @author 202 ecommerce <tech@202-ecommerce.com>\n *  @copyright PayPal\n *  @license http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n *\n */\n\ninclude_once dirname(__FILE__).'/../../config/config.inc.php';\ninclude_once _PS_ROOT_DIR_.'/init.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal.php';\n\n/*\n * Instant payment notification class.\n * (wait for PayPal payment confirmation, then validate order)\n */\nclass PayPalIPN extends PayPal\n{\n\n    public function getIPNTransactionDetails($result)\n    {\n        if (is_array($result) || (strcmp(trim($result), \"VERIFIED\") === false)) {\n            $transaction_id = pSQL($result['txn_id']);\n\n            return array(\n                'id_transaction' => $transaction_id,\n                'transaction_id' => $transaction_id,\n                'id_invoice' => $result['invoice'],\n                'currency' => pSQL($result['mc_currency']),\n                'total_paid' => (float) $result['mc_gross'],\n                'shipping' => (float) $result['mc_shipping'],\n                'payment_date' => pSQL($result['payment_date']),\n                'payment_status' => pSQL($result['payment_status']),\n            );\n        } else {\n            $transaction_id = pSQL(Tools::getValue('txn_id'));\n\n            return array(\n                'id_transaction' => $transaction_id,\n                'transaction_id' => $transaction_id,\n                'id_invoice' => pSQL(Tools::getValue('invoice')),\n                'currency' => pSQL(Tools::getValue('mc_currency')),\n                'total_paid' => (float) Tools::getValue('mc_gross'),\n                'shipping' => (float) Tools::getValue('mc_shipping'),\n                'payment_date' => pSQL(Tools::getValue('payment_date')),\n                'payment_status' => pSQL(Tools::getValue('payment_status')),\n            );\n        }\n    }\n\n    public function confirmOrder($custom)\n    {\n        $result = $this->getResult();\n\n        $payment_status = Tools::getValue('payment_status');\n        $mc_gross = Tools::getValue('mc_gross');\n        $txn_id = Tools::getValue('txn_id');\n\n        $id_order = (int) Order::getOrderByCartId((int) $custom['id_cart']);\n        Context::getContext()->cart = new Cart((int) $custom['id_cart']);\n\n        $address = new Address((int) Context::getContext()->cart->id_address_invoice);\n        Context::getContext()->country = new Country((int) $address->id_country);\n        Context::getContext()->customer = new Customer((int) Context::getContext()->cart->id_customer);\n        Context::getContext()->language = new Language((int) Context::getContext()->cart->id_lang);\n        Context::getContext()->currency = new Currency((int) Context::getContext()->cart->id_currency);\n\n        if (isset(Context::getContext()->cart->id_shop)) {\n            Context::getContext()->shop = new Shop(Context::getContext()->cart->id_shop);\n        }\n\n        if (strcmp(trim($result), \"VERIFIED\") === false) {\n            $details = $this->getIPNTransactionDetails($result);\n\n            if ($id_order) {\n                $history = new OrderHistory();\n                $history->id_order = (int) $id_order;\n\n                PayPalOrder::updateOrder($id_order, $details);\n                $history->changeIdOrderState((int) Configuration::get('PS_OS_ERROR'), $history->id_order);\n\n                $history->addWithemail();\n                $history->save();\n            }\n        } elseif (strcmp(trim($result), \"VERIFIED\") === 0) {\n            $details = $this->getIPNTransactionDetails($result);\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                $shop = null;\n            } else {\n                $shop_id = Context::getContext()->shop->id;\n                $shop = new Shop($shop_id);\n            }\n\n            if ($id_order) {\n                $order = new Order((int) $id_order);\n                $values = $this->checkPayment($payment_status, $mc_gross, false);\n                if ((int) $order->current_state == (int) $values['payment_type']) {\n                    return;\n                }\n                $history = new OrderHistory();\n                $history->id_order = (int) $id_order;\n                if (PayPalOrder::getOrderById($id_order)) {\n                    PayPalOrder::updateOrder($id_order, $details);\n                } else {\n                    PayPalOrder::saveOrder($id_order, $details);\n                }\n                $history->changeIdOrderState($values['payment_type'], $history->id_order);\n\n                $history->addWithemail();\n                $history->save();\n                Db::getInstance()->update('order_payment', array(\n                    'transaction_id' => pSQL($details['transaction_id']),\n                ), 'order_reference = \"'.pSQL($order->reference).'\"');\n            } else {\n                $values = $this->checkPayment($payment_status, $mc_gross, true);\n                $customer = new Customer((int) Context::getContext()->cart->id_customer);\n                $this->validateOrder(Context::getContext()->cart->id, $values['payment_type'], $values['total_price'], $this->displayName, $values['message'], $details, Context::getContext()->cart->id_currency, false, $customer->secure_key, $shop);\n            }\n        }\n    }\n\n    public function checkPayment($payment_status, $mc_gross_not_rounded, $new_order = false)\n    {\n        $currency_decimals = is_array(Context::getContext()->currency) ? (int) Context::getContext()->currency['decimals'] : (int) Context::getContext()->currency->decimals;\n        $this->decimals = $currency_decimals * _PS_PRICE_DISPLAY_PRECISION_;\n\n        $mc_gross = Tools::ps_round($mc_gross_not_rounded, $this->decimals);\n\n        $cart_details = Context::getContext()->cart->getSummaryDetails(null, true);\n        $cart_hash = sha1(serialize(Context::getContext()->cart->nbProducts()));\n        $custom = Tools::jsonDecode(Tools::getValue('custom'), true);\n\n        $shipping = $cart_details['total_shipping_tax_exc'];\n        $subtotal = $cart_details['total_price_without_tax'] - $cart_details['total_shipping_tax_exc'];\n        $tax = $cart_details['total_tax'];\n\n        $total_price = Tools::ps_round($shipping + $subtotal + $tax, $this->decimals);\n\n        if (($new_order) && ($this->comp($mc_gross, $total_price, 2) !== 0)) {\n            $payment_type = (int) Configuration::get('PS_OS_ERROR');\n            $message = $this->l('Price paid on paypal is not the same that on PrestaShop.').'<br />';\n        } elseif (($new_order) && ($custom['hash'] != $cart_hash)) {\n            $payment_type = (int) Configuration::get('PS_OS_ERROR');\n            $message = $this->l('Cart changed, please retry.').'<br />';\n        } else {\n            return $this->getDetails($payment_status) + array(\n                'payment_status' => $payment_status,\n                'total_price' => $total_price,\n            );\n        }\n        return array(\n            'message' => $message,\n            'payment_type' => $payment_type,\n            'payment_status' => $payment_status,\n            'total_price' => $total_price,\n        );\n    }\n\n    public function getDetails($payment_status)\n    {\n        if ((bool) Configuration::get('PAYPAL_CAPTURE')) {\n            $payment_type = (int) Configuration::get('PS_OS_WS_PAYMENT');\n            $message = $this->l('Pending payment capture.').'<br />';\n        } else {\n            if (strcmp($payment_status, 'Completed') === 0) {\n                $payment_type = (int) Configuration::get('PS_OS_PAYMENT');\n                $message = $this->l('Payment accepted.').'<br />';\n            } elseif (strcmp($payment_status, 'Pending') === 0) {\n                $payment_type = (int) Configuration::get('PS_OS_PAYPAL');\n                $message = $this->l('Pending payment confirmation.').'<br />';\n            } elseif (strcmp($payment_status, 'Refunded') === 0) {\n                $payment_type = (int) Configuration::get('PS_OS_REFUND');\n                $message = $this->l('Payment refunded.').'<br />';\n            } else {\n                $payment_type = (int) Configuration::get('PS_OS_ERROR');\n                $message = $this->l('Cart changed, please retry.').'<br />';\n            }\n        }\n\n        return array(\n            'message' => $message,\n            'payment_type' => (int) $payment_type,\n        );\n    }\n\n    public function getResult()\n    {\n        if ((int) Configuration::get('PAYPAL_SANDBOX') == 1) {\n            $action_url = 'https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_notify-validate';\n        } else {\n            $action_url = 'https://www.paypal.com/cgi-bin/webscr?cmd=_notify-validate';\n        }\n\n        $request = '';\n        foreach ($_POST as $key => $value) {\n            $value = urlencode(Tools::stripslashes($value));\n            $request .= \"&$key=$value\";\n        }\n\n\n        $curl = curl_init();\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl, CURLOPT_URL, $action_url.$request);\n        curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 5);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n\n        $content = curl_exec($curl);\n        curl_close($curl);\n        return $content;\n    }\n}\n\nif (Tools::getValue('receiver_email') == Configuration::get('PAYPAL_BUSINESS_ACCOUNT')) {\n    if (Tools::getIsset('custom')) {\n        $ipn = new PayPalIPN();\n        $custom = Tools::jsonDecode(Tools::getValue('custom'), true);\n        $res = @fopen($custom['id_cart'].'.txt', 'x');\n        $seconds = 0;\n        if (!$res) {\n            while (file_exists($custom['id_cart'].'.txt')) {\n                sleep(1);\n                $seconds++;\n                if ($seconds >= 300) {\n                    @rename($custom['id_cart'].'.txt', date('YmdHis').'_'.$custom['id_cart'].'.txt');\n                }\n            }\n        }\n        $ipn->confirmOrder($custom);\n        if ($res) {\n            fclose($res);\n            unlink($custom['id_cart'].'.txt');\n        }\n    }\n} elseif (Tools::isSubmit('custom') && (int)Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS) {\n    $custom = Tools::jsonDecode(Tools::getValue('custom'), true);\n    Db::getInstance()->insert('paypal_hss_email_error', array('id_cart' => $custom['id_cart'], 'email' => Tools::getValue('receiver_email')));\n}\n", "<?php\n/**\n *\n *  2007-2021 PayPal\n *\n *  NOTICE OF LICENSE\n *\n *  This source file is subject to the Academic Free License (AFL 3.0)\n *  that is bundled with this package in the file LICENSE.txt.\n *  It is also available through the world-wide-web at this URL:\n *  http://opensource.org/licenses/afl-3.0.php\n *  If you did not receive a copy of the license and are unable to\n *  obtain it through the world-wide-web, please send an email\n *  to license@prestashop.com so we can send you a copy immediately.\n *\n *  DISCLAIMER\n *\n *  Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n *  versions in the future. If you wish to customize PrestaShop for your\n *  needs please refer to http://www.prestashop.com for more information.\n *\n *  @author 2007-2021 PayPal\n *  @author 202 ecommerce <tech@202-ecommerce.com>\n *  @copyright PayPal\n *  @license http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n *\n */\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\ninclude_once _PS_MODULE_DIR_.'paypal/api/paypal_lib.php';\ninclude_once _PS_MODULE_DIR_.'paypal/api/CallApiPaypalPlus.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_logos.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_orders.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_tools.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_login/paypal_login.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_login/PayPalLoginUser.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/PaypalCapture.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/AuthenticatePaymentMethods.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/PaypalPlusPui.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/Braintree.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/InstallmentBanner/ConfigurationMap.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/InstallmentBanner/BannerManager.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/InstallmentBanner/Banner.php';\nrequire_once _PS_MODULE_DIR_.'paypal/express_checkout/ExpressCheckout.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/Services/OrderPrice.php';\n\ndefine('WPS', 1); //Paypal Integral\ndefine('HSS', 2); //Paypal Integral Evolution\ndefine('ECS', 4); //Paypal Option +\ndefine('PPP', 5); //Paypal Plus\ndefine('PVZ', 6); //Braintree ONLY\n\n/* Tracking */\ndefine('TRACKING_INTEGRAL_EVOLUTION', 'FR_PRESTASHOP_H3S');\ndefine('TRACKING_INTEGRAL', 'PRESTASHOP_EC');\ndefine('TRACKING_OPTION_PLUS', 'PRESTASHOP_ECM');\ndefine('TRACKING_PAYPAL_PLUS', 'PrestaShop_Cart_PPP_16');\ndefine('PAYPAL_HSS_REDIRECTION', 0);\ndefine('PAYPAL_HSS_IFRAME', 1);\ndefine('TRACKING_EXPRESS_CHECKOUT_SEAMLESS', 'PrestaShopCEMEA_Cart_LIPP');\n\ndefine('TRACKING_CODE', 'FR_PRESTASHOP_H3S');\ndefine('SMARTPHONE_TRACKING_CODE', 'Prestashop_Cart_smartphone_EC');\ndefine('TABLET_TRACKING_CODE', 'Prestashop_Cart_tablet_EC');\n\n/* Traking APAC */\ndefine('APAC_TRACKING_INTEGRAL_EVOLUTION', 'PSAPAC_PRESTASHOP_H3S');\ndefine('APAC_TRACKING_INTEGRAL', 'PSAPAC_PRESTASHOP_EC');\ndefine('APAC_TRACKING_OPTION_PLUS', 'PSAPAC_PRESTASHOP_ECM');\ndefine('APAC_TRACKING_PAYPAL_PLUS', 'PSAPAC_PRESTASHOP_PPP');\ndefine('APAC_TRACKING_EXPRESS_CHECKOUT_SEAMLESS', 'PSAPAC_PRESTASHOP_LIPP');\n\ndefine('APAC_TRACKING_CODE', 'PSAPAC_PRESTASHOP_H3S');\ndefine('APAC_SMARTPHONE_TRACKING_CODE', 'PSAPAC_PRESTASHOP_MOB_EC');\ndefine('APAC_TABLET_TRACKING_CODE', 'PSAPAC_PRESTASHOP_TAB_EC');\n\ndefine('_PAYPAL_LOGO_XML_', 'logos.xml');\ndefine('_PAYPAL_MODULE_DIRNAME_', 'paypal');\ndefine('_PAYPAL_TRANSLATIONS_XML_', 'translations.xml');\n\nclass PayPal extends PaymentModule\n{\n\n    protected $_html = '';\n    public $_errors = array();\n    public $context;\n    public $iso_code;\n    public $default_country;\n    public $paypal_logos;\n    public $module_key = '336225a5988ad434b782f2d868d7bfcd';\n    public $psCheckoutCountry = ['FR', 'ES', 'IT', 'GB', 'PL', 'BE', 'NL', 'LU', 'US'];\n\n    const BACKWARD_REQUIREMENT = '0.4';\n    const ONLY_PRODUCTS = 1;\n    const ONLY_DISCOUNTS = 2;\n    const BOTH = 3;\n    const BOTH_WITHOUT_SHIPPING = 4;\n    const ONLY_SHIPPING = 5;\n    const ONLY_WRAPPING = 6;\n    const ONLY_PRODUCTS_WITHOUT_SHIPPING = 7;\n\n    public function __construct()\n    {\n        $this->name = 'paypal';\n        $this->tab = 'payments_gateways';\n        $this->version = '@version@';\n        $this->author = '202-ecommerce';\n        $this->is_eu_compatible = 1;\n        $this->ps_versions_compliancy = array('min' => '1.5', 'max' => '1.6');\n\n        $this->currencies = true;\n        $this->currencies_mode = 'radio';\n\n        parent::__construct();\n        $country = new Country(Configuration::get('PS_COUNTRY_DEFAULT'));\n        require_once realpath(dirname(__FILE__) .'/smarty/plugins') . '/modifier.paypalreplace.php';\n\n        if ($country->iso_code == 'FR') {\n            $this->description = $this->l('Benefit from PayPal\\'s complete payments platform and grow your business online, on mobile and internationally and discover a new payment experience with Braintree.Accept credit cards, debit cards and PayPal payments.');\n        } else {\n            $this->description = $this->l('Accepts payments by credit cards (CB, Visa, MasterCard, Amex, Aurore, Cofinoga, 4 stars) with PayPal.');\n        }\n        $this->displayName = $this->l('PayPal');\n        $this->confirmUninstall = $this->l('Are you sure you want to delete your details?');\n\n        $this->page = basename(__FILE__, '.php');\n\n        if (version_compare(_PS_VERSION_, '1.5', '<')) {\n            $mobile_enabled = (int) Configuration::get('PS_MOBILE_DEVICE');\n            require _PS_MODULE_DIR_.$this->name.'/backward_compatibility/backward.php';\n        } else {\n            $mobile_enabled = (int) Configuration::get('PS_ALLOW_MOBILE_DEVICE');\n        }\n\n        if (self::isInstalled($this->name)) {\n            $this->loadDefaults();\n            if ($mobile_enabled && $this->active) {\n                $this->checkMobileCredentials();\n            } elseif ($mobile_enabled && !$this->active) {\n                $this->checkMobileNeeds();\n            }\n        } else {\n            $this->checkMobileNeeds();\n        }\n\n        if (false == Validate::isLoadedObject($this->context->cart)) {\n            if (false == empty($this->context->cookie->id_cart)) {\n                $this->context->cart = new Cart((int)$this->context->cookie->id_cart);\n            }\n        }\n    }\n\n    public function install()\n    {\n        if (!parent::install()\n            || !$this->registerHook('payment')\n            || !$this->registerHook('paymentReturn')\n            || !$this->registerHook('shoppingCartExtra')\n            || !$this->registerHook('backBeforePayment')\n            || !$this->registerHook('rightColumn')\n            || !$this->registerHook('cancelProduct')\n            || !$this->registerHook('productFooter')\n            || !$this->registerHook('header')\n            || !$this->registerHook('adminOrder')\n            || !$this->registerHook('backOfficeHeader')\n            || !$this->registerHook('displayPDFInvoice')\n            || !$this->registerHook('actionBeforeCartUpdateQty')\n            || !$this->registerHook('actionOrderSlipAdd')\n            || !$this->registerHook('PDFInvoice')\n            || !$this->registerHook('displayTop')\n            || !$this->registerHook('displayProductButtons')\n            || !$this->registerHook('displayPaymentTop')) {\n            return false;\n        }\n\n        if ((_PS_VERSION_ >= '1.5') && (!$this->registerHook('displayMobileHeader')\n            || !$this->registerHook('displayMobileShoppingCartTop')\n            || !$this->registerHook('displayMobileAddToCartTop')\n            || !$this->registerHook('displayPaymentEU')\n            || !$this->registerHook('actionPSCleanerGetModulesTables')\n            || !$this->registerHook('actionOrderStatusPostUpdate')\n            || !$this->registerHook('displayOrderConfirmation')\n            )) {\n            return false;\n        }\n\n        include_once _PS_MODULE_DIR_.$this->name.'/paypal_install.php';\n        $paypal_install = new PayPalInstall();\n        $paypal_install->createTables();\n        $paypal_install->updateConfiguration($this->version);\n        $paypal_install->createOrderState();\n\n        $paypal_tools = new PayPalTools($this->name);\n        $paypal_tools->moveTopPayments(1);\n        $paypal_tools->moveRightColumn(3);\n        $this->installTab();\n\n        $this->runUpgrades(true);\n\n        return true;\n    }\n\n    public function installTab()\n    {\n        $tab = Tab::getInstanceFromClassName('AdminPaypalAjaxHandler');\n\n        if (Validate::isLoadedObject($tab)) {\n            return true;\n        }\n\n        $tab->active = false;\n        $tab->class_name = 'AdminPaypalAjaxHandler';\n        $tab->name = array();\n\n        foreach (Language::getLanguages() as $lang) {\n            $tab->name[$lang['id_lang']] = 'Paypal Ajax Handler';\n        }\n\n        $tab->id_parent = 0;\n        $tab->module = $this->name;\n\n        return $tab->save();\n    }\n\n    public function uninstallTab()\n    {\n        $tab = Tab::getInstanceFromClassName('AdminPaypalAjaxHandler');\n\n        if (Validate::isLoadedObject($tab) == false) {\n            return true;\n        }\n\n        return $tab->delete();\n    }\n\n    public function uninstall()\n    {\n        include_once _PS_MODULE_DIR_.$this->name.'/paypal_install.php';\n        $paypal_install = new PayPalInstall();\n        $paypal_install->deleteConfiguration();\n        $this->uninstallTab();\n\n        return parent::uninstall();\n    }\n\n    /**\n     * Launch upgrade process\n     */\n    public function runUpgrades($install = false)\n    {\n        if (version_compare(_PS_VERSION_, '1.5', '<')) {\n            foreach (array('2.8', '3.0', '3.7', '3.8.3', '3.9', '3.10.1', '3.10.4','3.10.10') as $version) {\n                $file = dirname(__FILE__).'/upgrade/install-'.$version.'.php';\n                if (version_compare(Configuration::get('PAYPAL_VERSION'), $version, '<') && file_exists($file)) {\n                    include_once $file;\n                    call_user_func('upgrade_module_'.str_replace('.', '_', $version), $this, $install);\n                }\n            }\n        }\n    }\n\n    private function compatibilityCheck()\n    {\n        if (file_exists(_PS_MODULE_DIR_.'paypalapi/paypalapi.php') && $this->active) {\n            $this->warning = $this->l('All features of Paypal API module are included in the new Paypal module. In order to do not have any conflict, please do not use and remove PayPalAPI module.').'<br />';\n        }\n\n        /* For 1.4.3 and less compatibility */\n        $update_config = array('PS_OS_CHEQUE' => 1, 'PS_OS_PAYMENT' => 2, 'PS_OS_PREPARATION' => 3,\n            'PS_OS_SHIPPING' => 4,\n            'PS_OS_DELIVERED' => 5, 'PS_OS_CANCELED' => 6, 'PS_OS_REFUND' => 7, 'PS_OS_ERROR' => 8,\n            'PS_OS_OUTOFSTOCK' => 9,\n            'PS_OS_BANKWIRE' => 10, 'PS_OS_PAYPAL' => 11, 'PS_OS_WS_PAYMENT' => 12);\n\n        foreach ($update_config as $key => $value) {\n            if (!Configuration::get($key) || (int) Configuration::get($key) < 1) {\n                if (defined('_'.$key.'_') && (int) constant('_'.$key.'_')\n                    > 0) {\n                    Configuration::updateValue($key, constant('_'.$key.'_'));\n                } else {\n                    Configuration::updateValue($key, $value);\n                }\n            }\n        }\n    }\n\n    public function isPayPalAPIAvailable()\n    {\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (($payment_method == WPS || $payment_method == ECS) && (!is_null(Configuration::get('PAYPAL_API_USER'))\n            && !is_null(Configuration::get('PAYPAL_API_PASSWORD')) && !is_null(Configuration::get('PAYPAL_API_SIGNATURE')))) {\n            return true;\n        }\n\n        if ($payment_method == PPP && (!is_null(Configuration::get('PAYPAL_PLUS_CLIENT_ID'))\n            || !is_null(Configuration::get('PAYPAL_PLUS_SECRET')))) {\n            return true;\n        }\n\n        if ($payment_method == HSS && !is_null(Configuration::get('PAYPAL_BUSINESS_ACCOUNT'))) {\n            return true;\n        }\n\n        if ($payment_method == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Initialize default values\n     */\n    protected function loadDefaults()\n    {\n        $this->paypal_logos = new PayPalLogos(Tools::strtoupper($this->context->language->iso_code));\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n        $order_process_type = (int) Configuration::get('PS_ORDER_PROCESS_TYPE');\n\n        if (Tools::getValue('paypal_ec_canceled') || $this->context->cart === false) {\n            unset($this->context->cookie->express_checkout);\n        }\n\n        if (version_compare(_PS_VERSION_, '1.5.0.2', '>=')) {\n            $version = Db::getInstance()->getValue('SELECT version FROM `'._DB_PREFIX_.'module` WHERE name = \\''.pSQL($this->name).'\\'');\n            if (empty($version) === true) {\n                Db::getInstance()->execute('\n                    UPDATE `'._DB_PREFIX_.'module` m\n                    SET m.version = \\''.bqSQL($this->version).'\\'\n                    WHERE m.name = \\''.bqSQL($this->name).'\\'');\n            }\n        }\n\n        if (defined('_PS_ADMIN_DIR_')) {\n            /* Backward compatibility */\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                $this->backwardCompatibilityChecks();\n            }\n\n            /* Upgrade and compatibility checks */\n            $this->runUpgrades();\n            $this->compatibilityCheck();\n            $this->warningsCheck();\n        } else {\n            if (isset($this->context->cookie->express_checkout)) {\n                $this->context->smarty->assign('paypal_authorization', true);\n            }\n\n            $isECS = false;\n            if (isset($this->context->cookie->express_checkout)) {\n                $cookie_ECS = unserialize($this->context->cookie->express_checkout);\n                if (isset($cookie_ECS['token']) && isset($cookie_ECS['payer_id'])) {\n                    $isECS = true;\n                }\n            }\n\n            if (($order_process_type == 1) && ((int) $payment_method == HSS)) {\n                $this->context->smarty->assign('paypal_order_opc', true);\n            } elseif (($order_process_type == 1) && ((bool) Tools::getValue('isPaymentStep') == true || $isECS)) {\n                $shop_url = PayPal::getShopDomainSsl(true, true);\n                if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                    $link = $shop_url._MODULE_DIR_.$this->name.'/express_checkout/payment.php';\n                    $this->context->smarty->assign(\n                        'paypal_confirmation',\n                        $link.'?'.http_build_query(array('get_confirmation' => true), '', '&')\n                    );\n                } else {\n                    $values = array('fc' => 'module', 'module' => 'paypal', 'controller' => 'confirm',\n                        'get_confirmation' => true);\n                    $this->context->smarty->assign('paypal_confirmation', $shop_url.__PS_BASE_URI__.'?'.http_build_query($values));\n                }\n            }\n        }\n    }\n\n    protected function checkMobileCredentials()\n    {\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (((int) $payment_method == HSS) && (\n            (!(bool) Configuration::get('PAYPAL_API_USER')) &&\n            (!(bool) Configuration::get('PAYPAL_API_PASSWORD')) &&\n            (!(bool) Configuration::get('PAYPAL_API_SIGNATURE')))) {\n            $this->warning .= $this->l('You must set your PayPal Integral credentials in order to have the mobile theme work correctly.').'<br />';\n        }\n    }\n\n    protected function checkMobileNeeds()\n    {\n        $iso_code = Country::getIsoById((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n        $paypal_countries = array('ES', 'FR', 'PL', 'IT');\n\n        if (method_exists($this->context->shop, 'getTheme')) {\n            if (($this->context->shop->getTheme() == 'default') && in_array($iso_code, $paypal_countries)) {\n                $this->warning .= $this->l('The mobile theme only works with the PayPal\\'s payment module at this time. Please activate the module to enable payments.').'<br />';\n            }\n        } else {\n            $this->warning .= $this->l('In order to use the module you need to install the backward compatibility.').'<br />';\n        }\n    }\n\n    /* Check status of backward compatibility module */\n\n    protected function backwardCompatibilityChecks()\n    {\n        if (Module::isInstalled('backwardcompatibility')) {\n            $backward_module = Module::getInstanceByName('backwardcompatibility');\n            if (!$backward_module->active) {\n                $this->warning .= $this->l('To work properly the module requires the backward compatibility module enabled').'<br />';\n            } elseif ($backward_module->version < PayPal::BACKWARD_REQUIREMENT) {\n                $this->warning .= $this->l('To work properly the module requires at least the backward compatibility module v').PayPal::BACKWARD_REQUIREMENT.'.<br />';\n            }\n        } else {\n            $this->warning .= $this->l('In order to use the module you need to install the backward compatibility.').'<br />';\n        }\n    }\n\n    public static function countryIso2to3($iso2)\n    {\n        //ISO 3166-1 alpha-2 -> alpha-3 correspondence array\n        $iso2to3 = array(\n          'AW' => 'ABW',\n          'AO' => 'AGO',\n          'AI' => 'AIA',\n          'AX' => 'ALA',\n          'AL' => 'ALB',\n          'AD' => 'AND',\n          'AN' => 'ANT',\n          'AE' => 'ARE',\n          'AR' => 'ARG',\n          'AM' => 'ARM',\n          'AS' => 'ASM',\n          'AQ' => 'ATA',\n          'TF' => 'ATF',\n          'AG' => 'ATG',\n          'AU' => 'AUS',\n          'AT' => 'AUT',\n          'AZ' => 'AZE',\n          'BI' => 'BDI',\n          'BE' => 'BEL',\n          'BJ' => 'BEN',\n          'BF' => 'BFA',\n          'BD' => 'BGD',\n          'BG' => 'BGR',\n          'BH' => 'BHR',\n          'BS' => 'BHS',\n          'BA' => 'BIH',\n          'BL' => 'BLM',\n          'BY' => 'BLR',\n          'BZ' => 'BLZ',\n          'BM' => 'BMU',\n          'BO' => 'BOL',\n          'BR' => 'BRA',\n          'BB' => 'BRB',\n          'BN' => 'BRN',\n          'BT' => 'BTN',\n          'BV' => 'BVT',\n          'BW' => 'BWA',\n          'CF' => 'CAF',\n          'CA' => 'CAN',\n          'CC' => 'CCK',\n          'CH' => 'CHE',\n          'CL' => 'CHL',\n          'CN' => 'CHN',\n          'CI' => 'CIV',\n          'CM' => 'CMR',\n          'CD' => 'COD',\n          'CG' => 'COG',\n          'CK' => 'COK',\n          'CO' => 'COL',\n          'KM' => 'COM',\n          'CV' => 'CPV',\n          'CR' => 'CRI',\n          'CU' => 'CUB',\n          'CX' => 'CXR',\n          'KY' => 'CYM',\n          'CY' => 'CYP',\n          'CZ' => 'CZE',\n          'DE' => 'DEU',\n          'DJ' => 'DJI',\n          'DM' => 'DMA',\n          'DK' => 'DNK',\n          'DO' => 'DOM',\n          'DZ' => 'DZA',\n          'EC' => 'ECU',\n          'EG' => 'EGY',\n          'ER' => 'ERI',\n          'EH' => 'ESH',\n          'ES' => 'ESP',\n          'EE' => 'EST',\n          'ET' => 'ETH',\n          'FI' => 'FIN',\n          'FJ' => 'FJI',\n          'FK' => 'FLK',\n          'FR' => 'FRA',\n          'FO' => 'FRO',\n          'FM' => 'FSM',\n          'GA' => 'GAB',\n          'GB' => 'GBR',\n          'GE' => 'GEO',\n          'GG' => 'GGY',\n          'GH' => 'GHA',\n          'GI' => 'GIB',\n          'GN' => 'GIN',\n          'GP' => 'GLP',\n          'GM' => 'GMB',\n          'GW' => 'GNB',\n          'GQ' => 'GNQ',\n          'GR' => 'GRC',\n          'GD' => 'GRD',\n          'GL' => 'GRL',\n          'GT' => 'GTM',\n          'GF' => 'GUF',\n          'GU' => 'GUM',\n          'GY' => 'GUY',\n          'HK' => 'HKG',\n          'HM' => 'HMD',\n          'HN' => 'HND',\n          'HR' => 'HRV',\n          'HT' => 'HTI',\n          'HU' => 'HUN',\n          'ID' => 'IDN',\n          'IM' => 'IMN',\n          'IN' => 'IND',\n          'IO' => 'IOT',\n          'IE' => 'IRL',\n          'IR' => 'IRN',\n          'IQ' => 'IRQ',\n          'IS' => 'ISL',\n          'IL' => 'ISR',\n          'IT' => 'ITA',\n          'JM' => 'JAM',\n          'JE' => 'JEY',\n          'JO' => 'JOR',\n          'JP' => 'JPN',\n          'KZ' => 'KAZ',\n          'KE' => 'KEN',\n          'KG' => 'KGZ',\n          'KH' => 'KHM',\n          'KI' => 'KIR',\n          'KN' => 'KNA',\n          'KR' => 'KOR',\n          'KW' => 'KWT',\n          'LA' => 'LAO',\n          'LB' => 'LBN',\n          'LR' => 'LBR',\n          'LY' => 'LBY',\n          'LC' => 'LCA',\n          'LI' => 'LIE',\n          'LK' => 'LKA',\n          'LS' => 'LSO',\n          'LT' => 'LTU',\n          'LU' => 'LUX',\n          'LV' => 'LVA',\n          'MO' => 'MAC',\n          'MF' => 'MAF',\n          'MA' => 'MAR',\n          'MC' => 'MCO',\n          'MD' => 'MDA',\n          'MG' => 'MDG',\n          'MV' => 'MDV',\n          'MX' => 'MEX',\n          'MH' => 'MHL',\n          'MK' => 'MKD',\n          'ML' => 'MLI',\n          'MT' => 'MLT',\n          'MM' => 'MMR',\n          'ME' => 'MNE',\n          'MN' => 'MNG',\n          'MP' => 'MNP',\n          'MZ' => 'MOZ',\n          'MR' => 'MRT',\n          'MS' => 'MSR',\n          'MQ' => 'MTQ',\n          'MU' => 'MUS',\n          'MW' => 'MWI',\n          'MY' => 'MYS',\n          'YT' => 'MYT',\n          'NC' => 'NCL',\n          'NE' => 'NER',\n          'NF' => 'NFK',\n          'NG' => 'NGA',\n          'NI' => 'NIC',\n          'NU' => 'NIU',\n          'NL' => 'NLD',\n          'NO' => 'NOR',\n          'NP' => 'NPL',\n          'NR' => 'NRU',\n          'NZ' => 'NZL',\n          'OM' => 'OMN',\n          'PK' => 'PAK',\n          'PA' => 'PAN',\n          'PN' => 'PCN',\n          'PE' => 'PER',\n          'PH' => 'PHL',\n          'PW' => 'PLW',\n          'PG' => 'PNG',\n          'PL' => 'POL',\n          'PR' => 'PRI',\n          'KP' => 'PRK',\n          'PT' => 'PRT',\n          'PY' => 'PRY',\n          'PS' => 'PSE',\n          'PF' => 'PYF',\n          'QA' => 'QAT',\n          'RE' => 'REU',\n          'RO' => 'ROU',\n          'RU' => 'RUS',\n          'RW' => 'RWA',\n          'SA' => 'SAU',\n          'SD' => 'SDN',\n          'SN' => 'SEN',\n          'SG' => 'SGP',\n          'GS' => 'SGS',\n          'SH' => 'SHN',\n          'SJ' => 'SJM',\n          'SB' => 'SLB',\n          'SL' => 'SLE',\n          'SV' => 'SLV',\n          'SM' => 'SMR',\n          'SO' => 'SOM',\n          'PM' => 'SPM',\n          'RS' => 'SRB',\n          'SS' => 'SSD',\n          'ST' => 'STP',\n          'SR' => 'SUR',\n          'SK' => 'SVK',\n          'SI' => 'SVN',\n          'SE' => 'SWE',\n          'SZ' => 'SWZ',\n          'SC' => 'SYC',\n          'SY' => 'SYR',\n          'TC' => 'TCA',\n          'TD' => 'TCD',\n          'TG' => 'TGO',\n          'TH' => 'THA',\n          'TJ' => 'TJK',\n          'TK' => 'TKL',\n          'TM' => 'TKM',\n          'TL' => 'TLS',\n          'TO' => 'TON',\n          'TT' => 'TTO',\n          'TN' => 'TUN',\n          'TR' => 'TUR',\n          'TV' => 'TUV',\n          'TW' => 'TWN',\n          'TZ' => 'TZA',\n          'UG' => 'UGA',\n          'UA' => 'UKR',\n          'UM' => 'UMI',\n          'UY' => 'URY',\n          'US' => 'USA',\n          'UZ' => 'UZB',\n          'VA' => 'VAT',\n          'VC' => 'VCT',\n          'VE' => 'VEN',\n          'VG' => 'VGB',\n          'VI' => 'VIR',\n          'VN' => 'VNM',\n          'VU' => 'VUT',\n          'WF' => 'WLF',\n          'WS' => 'WSM',\n          'YE' => 'YEM',\n          'ZA' => 'ZAF',\n          'ZM' => 'ZMB',\n          'ZW' => 'ZWE'\n        );\n\n        return $iso2to3[$iso2];\n    }\n\n    protected function wpsIsConfigured()\n    {\n        return Configuration::get('PAYPAL_API_USER') &&\n            Configuration::get('PAYPAL_API_PASSWORD') &&\n            Configuration::get('PAYPAL_API_SIGNATURE');\n    }\n\n    public function getContent()\n    {\n        if (Configuration::get('PS_SSL_ENABLED') && Configuration::get('PS_SSL_ENABLED_EVERYWHERE') && Tools::usingSecureMode() == false) {\n            Tools::redirect('https://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']);\n        }\n\n        if (Tools::getIsset('BRAINTREE_ENABLED')) {\n            Configuration::updateValue('VZERO_ENABLED', 1);\n        }\n\n        $output = $this->_postProcess();\n\n        $braintree_message = '';\n        $braintree_style = '';\n        if (version_compare(phpversion(), '5.4', '<')) {\n            if (version_compare(_PS_VERSION_, '1.6.1', '>=')) {\n                $output = $this->displayWarning($this->l('Your server is not compatible with PayPal module upcoming release. Please contact your hosting company in order to upgrade PHP version to at least version 5.4 or latest.'));\n            } else {\n                $output = $this->displayError($this->l('Your server is not compatible with PayPal module upcoming release. Please contact your hosting company in order to upgrade PHP version to at least version 5.4 or latest.'));\n            }\n        }\n\n        if (!Tools::isSubmit('submitButton') && Tools::getIsset('accessToken') && Tools::getIsset('expiresAt') && Tools::getIsset('refreshToken')) {\n            $output = $this->displayConfirmation((Configuration::get('PAYPAL_SANDBOX')?$this->l('Your Braintree account is now configured in sandbox mode. You can sell on Euro only. If you have problems, you can join Braintree support on 08 05 54 27 14'):$this->l('Your Braintree account is now configured in live mode. If you have problems, you can join Braintree support on 08 05 54 27 14') ));\n        }\n\n        if (!Tools::isSubmit('submitButton') && Tools::getValue('error')) {\n            $output = $this->displayError($this->l('Braintree is not configured. If you have problems, you can join Braintree support on 08 05 54 27 14'));\n\n            $braintree_message = $this->l('Braintree is not configured. If you have problems, you can join Braintree support on 08 05 54 27 14');\n            $braintree_style = 'color:#dc143c;';\n        }\n\n        // Check if all Braintree credentials are present\n        $prestaBraintree = new PrestaBraintree();\n        $braintree_configured = (bool)$prestaBraintree->isConfigured();\n\n        $admin_dir = explode('/', _PS_ADMIN_DIR_);\n\n        $braintree_redirect_url = _PS_BASE_URL_.__PS_BASE_URI__. $admin_dir[ ( count($admin_dir) - 1 ) ] .'/index.php?controller=AdminModules&tab_module=payments_gateways&configure='.$this->name.'&module_name='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules');\n\n        if (($id_lang = Language::getIdByIso('EN')) == 0) {\n            $english_language_id = (int) $this->context->employee->id_lang;\n        } else {\n            $english_language_id = (int) $id_lang;\n        }\n\n        $this->context->smarty->assign(array(\n            'PayPal_WPS' => (int) WPS,\n            'PayPal_HSS' => (int) HSS,\n            'PayPal_PPP' => (int) PPP,\n            'PayPal_PVZ' => (int) PVZ,\n            'PayPal_ECS' => (int) ECS,\n            'PP_errors' => $this->_errors,\n            'PayPal_WPS_is_configured' => $this->wpsIsConfigured(),\n            'PayPal_logo' => $this->paypal_logos->getLogos(),\n            'PayPal_allowed_methods' => $this->getPaymentMethods(),\n            'PayPal_country' => Country::getNameById((int) $english_language_id, (int) $this->default_country),\n            'PayPal_country_id' => (int) $this->default_country,\n            'PayPal_business' => Configuration::get('PAYPAL_BUSINESS'),\n            'PayPal_payment_method' => (int) Configuration::get('PAYPAL_PAYMENT_METHOD'),\n            'PayPal_api_username' => Configuration::get('PAYPAL_API_USER'),\n            'PayPal_api_password' => Configuration::get('PAYPAL_API_PASSWORD'),\n            'PayPal_api_signature' => Configuration::get('PAYPAL_API_SIGNATURE'),\n            'PayPal_api_business_account' => Configuration::get('PAYPAL_BUSINESS_ACCOUNT'),\n            'PayPal_express_checkout_shortcut' => (int) Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT'),\n            'PayPal_in_context_checkout' => (int) Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),\n            'use_paypal_in_context' => (int) $this->useInContextCheckout(),\n            'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID'),\n            'PayPal_sandbox_mode' => (int) Configuration::get('PAYPAL_SANDBOX'),\n            'PayPal_payment_capture' => (int) Configuration::get('PAYPAL_CAPTURE'),\n            'PayPal_country_default' => (int) $this->default_country,\n            'PayPal_change_country_url' => 'index.php?tab=AdminCountries&token='.Tools::getAdminTokenLite('AdminCountries').'#footer',\n            'Countries' => Country::getCountries($english_language_id),\n            'One_Page_Checkout' => (int) Configuration::get('PS_ORDER_PROCESS_TYPE'),\n            'PayPal_integral_evolution_template' => Configuration::get('PAYPAL_HSS_TEMPLATE'),\n            'PayPal_integral_evolution_solution' => Configuration::get('PAYPAL_HSS_SOLUTION'),\n            'PayPal_login' => (int) Configuration::get('PAYPAL_LOGIN'),\n            'PayPal_login_tpl' => (int) Configuration::get('PAYPAL_LOGIN_TPL'),\n            'default_lang_iso' => Language::getIsoById($this->context->employee->id_lang),\n            'PayPal_plus_client' => Configuration::get('PAYPAL_PLUS_CLIENT_ID'),\n            'PayPal_plus_secret' => Configuration::get('PAYPAL_PLUS_SECRET'),\n            'PayPal_plus_webprofile' => (Configuration::get('PAYPAL_WEB_PROFILE_ID') != '0') ? Configuration::get('PAYPAL_WEB_PROFILE_ID') : 0,\n            //'PayPal_version_tls_checked' => $tls_version,\n            'Presta_version' => _PS_VERSION_,\n            'Currencies' => Currency::getCurrencies(),\n            'PayPal_account_braintree' => (array) Tools::jsonDecode(Configuration::get('PAYPAL_ACCOUNT_BRAINTREE')),\n            'Currency_default'=> Configuration::get('PS_CURRENCY_DEFAULT'),\n            //*TO DELETE* 'PayPal_braintree_public_key'=> Configuration::get('PAYPAL_BRAINTREE_PUBLIC_KEY'),\n            //*TO DELETE* 'PayPal_braintree_private_key'=> Configuration::get('PAYPAL_BRAINTREE_PRIVATE_KEY'),\n            'PayPal_braintree_merchant_id'=> Configuration::get('PAYPAL_BRAINTREE_MERCHANT_ID'),\n            'PayPal_check3Dsecure'=> Configuration::get('PAYPAL_USE_3D_SECURE'),\n            'PayPal_braintree_enabled'=> Configuration::get('PAYPAL_BRAINTREE_ENABLED'),\n            // Pour le bouton Braintree\n            'User_Country' => PayPal::countryIso2to3(Context::getContext()->country->iso_code),\n            'User_Mail' => Context::getContext()->employee->email,\n            'Business_Name' => Configuration::get('PS_SHOP_NAME'),\n            'Business_Country' => PayPal::countryIso2to3(Context::getContext()->country->iso_code),\n            'Braintree_Redirect_Url' => $braintree_redirect_url,\n            'Braintree_Configured' => $braintree_configured,\n            'Braintree_Message' => $braintree_message,\n            'Braintree_Style' => $braintree_style,\n            'Braintree_Access_Token' => Configuration::get('PAYPAL_BRAINTREE_ACCESS_TOKEN'),\n            'Braintree_Refresh_Token' => Configuration::get('PAYPAL_BRAINTREE_REFRESH_TOKEN'),\n            'Braintree_Expires_At' => strtotime(Configuration::get('PAYPAL_BRAINTREE_EXPIRES_AT')),\n            'ps_ssl_active' => Configuration::get('PS_SSL_ENABLED'),\n            'tls_link_ajax' => $this->context->link->getModuleLink($this->name, 'tlscurltest', array('ajax'=>1)),\n            'paypal_braintree_pub_key_live' => Configuration::get('PAYPAL_BRAINTREE_PUB_KEY_LIVE'),\n            'paypal_braintree_priv_key_live' => Configuration::get('PAYPAL_BRAINTREE_PRIV_KEY_LIVE'),\n            'paypal_braintree_merchant_id_live' => Configuration::get('PAYPAL_BRAINTREE_MERCHANT_ID_LIVE'),\n            'paypal_braintree_pub_key_sandbox' => Configuration::get('PAYPAL_BRAINTREE_PUB_KEY_SANDBOX'),\n            'paypal_braintree_priv_key_sandbox' => Configuration::get('PAYPAL_BRAINTREE_PRIV_KEY_SANDBOX'),\n            'paypal_braintree_merchant_id_sandbox' => Configuration::get('PAYPAL_BRAINTREE_MERCHANT_ID_SANDBOX'),\n            'showWarningForBraintreeUsers' => $prestaBraintree->useToken() && Configuration::get('PAYPAL_BRAINTREE_ACCESS_TOKEN'),\n            'showPsCheckoutInfo' => $this->showPsCheckoutMessage(),\n            'moduleDir' => _MODULE_DIR_ . $this->name,\n            'activeNavTab' => Tools::isSubmit('installmentSettingForm') ? '[paypal-nav-bar] li[tab-content=\"payment4x\"]' : '[paypal-nav-bar] li[tab-content=\"general\"]'\n        ));\n\n        // Tpl vars for Paypal installment banner. Start\n        $banner = new Banner();\n        $isoCountryDefault = Tools::strtolower(Country::getIsoById(Configuration::get('PS_COUNTRY_DEFAULT')));\n        $installmentColorOptions = [\n            ConfigurationMap::COLOR_GRAY => $this->l('gray'),\n            ConfigurationMap::COLOR_BLUE => $this->l('blue'),\n            ConfigurationMap::COLOR_BLACK => $this->l('black'),\n            ConfigurationMap::COLOR_WHITE => $this->l('white')\n        ];\n\n        if (false === ($isoCountryDefault === 'de')) {\n            $installmentColorOptions[ConfigurationMap::COLOR_MONOCHROME] = $this->l('monochrome');\n            $installmentColorOptions[ConfigurationMap::COLOR_GRAYSCALE] = $this->l('grayscale');\n        }\n\n        $this->context->smarty->assign([\n            ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT => Configuration::get(ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT),\n            ConfigurationMap::ENABLE_INSTALLMENT => Configuration::get(ConfigurationMap::ENABLE_INSTALLMENT),\n            ConfigurationMap::COLOR => Configuration::get(ConfigurationMap::COLOR),\n            'installmentColorOptions' => $installmentColorOptions,\n            ConfigurationMap::HOME_PAGE => Configuration::get(ConfigurationMap::HOME_PAGE),\n            ConfigurationMap::CATEGORY_PAGE => Configuration::get(ConfigurationMap::CATEGORY_PAGE),\n            ConfigurationMap::PRODUCT_PAGE => Configuration::get(ConfigurationMap::PRODUCT_PAGE),\n            ConfigurationMap::CART_PAGE => Configuration::get(ConfigurationMap::CART_PAGE),\n            ConfigurationMap::CHECKOUT_PAGE => Configuration::get(ConfigurationMap::CHECKOUT_PAGE),\n            ConfigurationMap::CLIENT_ID => ConfigurationMap::getClientId(),\n            'paypalInstallmentBanner' => $banner->render(),\n            'showInstallmentPopup' => $this->isShowInstallmentPopup(),\n            'showInstallmentSetting' => $this->isShowInstallmentSetting(),\n            'isoCountryDefault' => $isoCountryDefault\n        ]);\n\n        // Tpl vars for Paypal installment banner. End\n\n        MediaCore::addJsDef([\n            'ajaxHandler' => $this->context->link->getAdminLink('AdminPaypalAjaxHandler')\n        ]);\n\n        if ((int)Configuration::get('PAYPAL_PAYMENT_METHOD') === HSS) {\n            $hss_errors = Db::getInstance()->executeS('SELECT * FROM `'._DB_PREFIX_.'paypal_hss_email_error`');\n            $this->context->smarty->assign(array(\n                'hss_errors' => $hss_errors\n            ));\n        }\n\n        $this->getTranslations();\n\n        $output .= $this->fetchTemplate('/views/templates/admin/back_office.tpl');\n\n        if ($this->active == false) {\n            return $output.$this->hookBackOfficeHeader();\n        }\n\n        return $output;\n    }\n\n    /**\n     * Hooks methods\n     */\n    public function hookHeader($params)\n    {\n        $id_hook = (int) Configuration::get('PS_MOBILE_HOOK_HEADER_ID');\n        if ($id_hook > 0) {\n            $module = Hook::getModulesFromHook($id_hook, $this->id);\n            if (!$module) {\n                $this->registerHook('displayMobileHeader');\n            }\n        }\n\n\n        if (isset($this->context->cart) && $this->context->cart->id) {\n            $this->context->smarty->assign('id_cart', (int) $this->context->cart->id);\n        }\n\n\n\n        /* Added for PrestaBox */\n        if (method_exists($this->context->controller, 'addCSS')) {\n            $this->context->controller->addCSS(_MODULE_DIR_.$this->name.'/views/css/paypal.css');\n        } else {\n            Tools::addCSS(_MODULE_DIR_.$this->name.'/views/css/paypal.css');\n        }\n\n        $smarty = $this->context->smarty;\n        $smarty->assign(array(\n            'ssl_enabled' => Configuration::get('PS_SSL_ENABLED'),\n            'PAYPAL_SANDBOX' => Configuration::get('PAYPAL_SANDBOX'),\n            'PayPal_in_context_checkout' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),\n            'use_paypal_in_context' => (int) $this->useInContextCheckout(),\n            'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID'),\n            'paypal_mode' => Configuration::get('PAYPAL_SANDBOX') ? \"sandbox\" : \"production\",\n        ));\n        $process = '<script defer type=\"text/javascript\">'.$this->fetchTemplate('views/js/paypal.js').'</script>';\n        if ($this->useInContextCheckout()) {\n            $process .= $this->fetchTemplate('header.tpl');\n            $this->context->controller->addJS(_MODULE_DIR_.$this->name.'/views/js/incontext.js');\n            $process .= '<script defer src=\"//www.paypalobjects.com/api/checkout.js\"></script>';\n        }\n\n\n        if (Configuration::get('PAYPAL_PAYMENT_METHOD') == PPP) {\n            $this->context->smarty->assign(array(\n                'paypal_locale' => $this->getLocalePayPalPlus(),\n                'PAYPAL_LOGIN_CLIENT_ID' => Configuration::get('PAYPAL_LOGIN_CLIENT_ID'),\n                'PAYPAL_LOGIN_TPL' => Configuration::get('PAYPAL_LOGIN_TPL'),\n                'PAYPAL_RETURN_LINK' => PayPalLogin::getReturnLink(),\n            ));\n            $process .= '<script src=\"https://www.paypalobjects.com/webstatic/ppplus/ppplus.min.js\" type=\"text/javascript\"></script>';\n        }\n\n        // JS FOR OPC BRAINTREE\n        if ((Configuration::get('PAYPAL_PAYMENT_METHOD') == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && version_compare(PHP_VERSION, '5.4.0', '>=') && $this->context->controller instanceof OrderOpcController) {\n            $process .= '<script src=\"https://js.braintreegateway.com/web/3.50.0/js/client.min.js\"></script>\n\t<script src=\"https://js.braintreegateway.com/web/3.50.0/js/hosted-fields.min.js\"></script>\n\t<script src=\"https://js.braintreegateway.com/web/3.24.0/js/data-collector.min.js\"></script>\n\t<script src=\"https://js.braintreegateway.com/web/3.50.0/js/three-d-secure.min.js\"></script>';\n        }\n\n        return $process;\n    }\n\n    public function useInContextCheckout()\n    {\n        return Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT') && Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID')\n            != null;\n    }\n\n    public function getLocalePayPalPlus()\n    {\n        switch (Tools::strtolower($this->getCountryCode())) {\n            case 'fr':\n                return 'fr_FR';\n            case 'hk':\n                return 'zh_HK';\n            case 'cn':\n                return 'zh_CN';\n            case 'tw':\n                return 'zh_TW';\n            case 'xc':\n                return 'zh_XC';\n            case 'dk':\n                return 'da_DK';\n            case 'nl':\n                return 'nl_NL';\n            case 'gb':\n                return 'en_GB';\n            case 'de':\n                return 'de_DE';\n            case 'il':\n                return 'he_IL';\n            case 'id':\n                return 'id_ID';\n            case 'it':\n                return 'it_IT';\n            case 'jp':\n                return 'ja_JP';\n            case 'no':\n                return 'no_NO';\n            case 'pt':\n                return 'pt_PT';\n            case 'pl':\n                return 'pl_PL';\n            case 'ru':\n                return 'ru_RU';\n            case 'es':\n                return 'es_ES';\n            case 'se':\n                return 'sv_SE';\n            case 'th':\n                return 'th_TH';\n            case 'tr':\n                return 'tr_TR';\n            default:\n                return 'en_GB';\n        }\n    }\n\n    public function getLocale()\n    {\n        switch (Language::getIsoById($this->context->language->id)) {\n            case 'fr':\n                return 'fr-fr';\n            case 'hk':\n                return 'zh-hk';\n            case 'cn':\n                return 'zh-cn';\n            case 'tw':\n                return 'zh-tw';\n            case 'xc':\n                return 'zh-xc';\n            case 'dk':\n                return 'da-dk';\n            case 'nl':\n                return 'nl-nl';\n            case 'gb':\n                return 'en-gb';\n            case 'de':\n                return 'de-de';\n            case 'il':\n                return 'he-il';\n            case 'id':\n                return 'id-id';\n            case 'il':\n                return 'it-it';\n            case 'jp':\n                return 'ja-jp';\n            case 'no':\n                return 'no-no';\n            case 'pt':\n                return 'pt-pt';\n            case 'pl':\n                return 'pl-pl';\n            case 'ru':\n                return 'ru-ru';\n            case 'es':\n                return 'es-es';\n            case 'se':\n                return 'sv-se';\n            case 'th':\n                return 'th-th';\n            case 'tr':\n                return 'tr-tr';\n            default:\n                return 'en-gb';\n        }\n    }\n\n    public function canBeUsed()\n    {\n        if (!$this->active) {\n            return false;\n        }\n\n\n        //If merchant has not upgraded and payment method is out of country's specs\n        if (!Configuration::get('PAYPAL_UPDATED_COUNTRIES_OK') && !in_array((int) Configuration::get('PAYPAL_PAYMENT_METHOD'), $this->getPaymentMethods())) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function hookDisplayMobileHeader($params = null)\n    {\n        return $this->hookHeader($params);\n    }\n\n    public function hookDisplayMobileShoppingCartTop()\n    {\n        return $this->renderExpressCheckoutButton('cart').$this->renderExpressCheckoutForm('cart');\n    }\n\n    public function hookDisplayMobileAddToCartTop()\n    {\n        return $this->renderExpressCheckoutButton('cart').$this->renderExpressCheckoutForm('cart');\n    }\n\n    public function hookProductFooter()\n    {\n        $content = (!$this->useMobile()) ? $this->renderExpressCheckoutButton('product')\n        : null;\n\n        return $content.$this->renderExpressCheckoutForm('product');\n    }\n\n    public function hookDisplayProductButtons()\n    {\n        $content = '';\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            $content .= $bannerManager->renderForProductPage();\n        }\n\n        return $content;\n    }\n\n    public function hookActionOrderStatusPostUpdate($params)\n    {\n        if ($params['newOrderStatus']->id == Configuration::get('PS_OS_CANCELED')) {\n            $transction_id = Db::getInstance()->getValue('SELECT transaction FROM '._DB_PREFIX_.'paypal_braintree WHERE id_order = '.(int)$params['id_order']);\n\n            if ($transction_id) {\n                include_once _PS_MODULE_DIR_.'paypal/classes/Braintree.php';\n                $braintree = new PrestaBraintree();\n                $braintree->void($transction_id);\n            }\n        }\n    }\n\n    public function hookPayment($params)\n    {\n        if (!$this->canBeUsed()) {\n            return;\n        }\n\n        $use_mobile = $this->useMobile();\n\n        $method = (int) Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (isset($this->context->cookie->express_checkout)) {\n            $this->redirectToConfirmation();\n        }\n\n        $iso_lang = array(\n            'en' => 'en_US',\n            'fr' => 'fr_FR',\n            'de' => 'de_DE',\n        );\n\n        $this->context->smarty->assign(array(\n            'logos' => $this->paypal_logos->getLogos(),\n            'sandbox_mode' => Configuration::get('PAYPAL_SANDBOX'),\n            'use_mobile' => $use_mobile,\n            'PayPal_lang_code' => (isset($iso_lang[$this->context->language->iso_code]))\n            ? $iso_lang[$this->context->language->iso_code] : 'en_US',\n        ));\n\n        if (($method == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && version_compare(PHP_VERSION, '5.4.0', '>') && $this->context->currency->iso_code == 'EUR') {\n            $id_account_braintree = $this->set_good_context();\n\n            $braintree = new PrestaBraintree();\n\n            $clientToken = $braintree->createToken($id_account_braintree);\n\n            $this->reset_context();\n\n            if (!$clientToken) {\n                $return_braintree = '';\n            } else {\n                $this->context->smarty->assign(array(\n                    'opc' => Configuration::get('PS_ORDER_PROCESS_TYPE'),\n                    'error_msg'=> Tools::getValue('bt_error_msg'),\n                    'braintreeToken'=>$clientToken,\n                    'braintreeSubmitUrl'=>$this->context->link->getModuleLink('paypal', 'braintreesubmit', array(), true),\n                    'braintreeAmount'=>$this->context->cart->getOrderTotal(),\n                ));\n\n                $return_braintree =  $this->fetchTemplate('braintree_payment.tpl');\n            }\n        } else {\n            $return_braintree = '';\n        }\n\n        if ($method == HSS) {\n            $billing_address = new Address($this->context->cart->id_address_invoice);\n            $delivery_address = new Address($this->context->cart->id_address_delivery);\n            $billing_address->country = new Country($billing_address->id_country);\n            $delivery_address->country = new Country($delivery_address->id_country);\n            $billing_address->state = new State($billing_address->id_state);\n            $delivery_address->state = new State($delivery_address->id_state);\n\n            $cart = $this->context->cart;\n            $cart_details = $cart->getSummaryDetails(null, true);\n\n            if ((int) Configuration::get('PAYPAL_SANDBOX') == 1) {\n                $action_url = 'https://securepayments.sandbox.paypal.com/acquiringweb';\n            } else {\n                $action_url = 'https://securepayments.paypal.com/acquiringweb';\n            }\n\n            $shop_url = PayPal::getShopDomainSsl(true, true);\n\n            $this->context->smarty->assign(array(\n                'action_url' => $action_url,\n                'cart' => $cart,\n                'cart_details' => $cart_details,\n                'currency' => new Currency((int) $cart->id_currency),\n                'customer' => $this->context->customer,\n                'business_account' => Configuration::get('PAYPAL_BUSINESS_ACCOUNT'),\n                'custom' => Tools::jsonEncode(array('id_cart' => $cart->id, 'hash' => sha1(serialize($cart->nbProducts())))),\n                'gift_price' => (float) $this->getGiftWrappingPrice(),\n                'billing_address' => $billing_address,\n                'delivery_address' => $delivery_address,\n                'shipping' => $cart_details['total_shipping_tax_exc'],\n                'subtotal' => $cart_details['total_price_without_tax'] - $cart_details['total_shipping_tax_exc'],\n                'time' => time(),\n                'cancel_return' => $this->context->link->getPageLink('order.php'),\n                'notify_url' => $shop_url._MODULE_DIR_.$this->name.'/ipn.php',\n                'return_url' => $shop_url._MODULE_DIR_.$this->name.'/integral_evolution/submit.php?id_cart='.(int) $cart->id,\n                'tracking_code' => $this->getTrackingCode($method),\n                'iso_code' => Tools::strtoupper($this->context->language->iso_code),\n                'payment_hss_solution' => Configuration::get('PAYPAL_HSS_SOLUTION'),\n                'payment_hss_template' => Configuration::get('PAYPAL_HSS_TEMPLATE'),\n            ));\n            $this->getTranslations();\n            return $return_braintree.$this->fetchTemplate('integral_evolution_payment.tpl');\n        } elseif ($method == WPS || $method == ECS) {\n            $expressCheckout = new ExpressCheckout();\n\n            if ($expressCheckout->isConfigured() === false) {\n                return '';\n            }\n\n            $this->getTranslations();\n            $this->context->smarty->assign(array(\n                'PayPal_integral' => WPS,\n                'PayPal_express_checkout' => ECS,\n                'PayPal_payment_method' => $method,\n                'PayPal_payment_type' => 'payment_cart',\n                'PayPal_current_page' => $this->getCurrentUrl(),\n                'PayPal_tracking_code' => $this->getTrackingCode($method),\n                'PayPal_in_context_checkout' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),\n                'use_paypal_in_context' => (int) $this->useInContextCheckout(),\n                'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID'),\n                'baseURI' => $this->context->shop->getBaseURI()\n            ));\n            return $return_braintree.$this->fetchTemplate('express_checkout_payment.tpl');\n        } elseif ($method == PPP) {\n            $CallApiPaypalPlus = new CallApiPaypalPlus();\n            $CallApiPaypalPlus->setParams($params);\n            $approuval_url = $CallApiPaypalPlus->getApprovalUrl();\n            $this->context->smarty->assign(\n                array(\n                    'approval_url' => $approuval_url,\n                    'language' => $this->getLocalePayPalPlus(),\n                    'country' => $this->getCountryCode(),\n                    'mode' => Configuration::get('PAYPAL_SANDBOX') ? 'sandbox': 'live',\n                    'ajaxUrl' => $this->context->link->getModuleLink('paypal', 'pluspatch', array('id_cart'=>$this->context->cart->id,'id_payment'=>$CallApiPaypalPlus->id_payment)),\n                    'img_loader' => _PS_IMG_.'loader.gif',\n                )\n            );\n            return $return_braintree.$this->fetchTemplate('paypal_plus_payment.tpl');\n        }\n    }\n\n    public function hookDisplayPaymentEU($params)\n    {\n        if (!$this->active) {\n            return;\n        }\n\n        if ($this->hookPayment($params) == null) {\n            return null;\n        }\n\n        $method = (int) Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (isset($this->context->cookie->express_checkout)) {\n            $this->redirectToConfirmation();\n        }\n\n        $logos = $this->paypal_logos->getLogos();\n\n        if (isset($logos['LocalPayPalHorizontalSolutionPP']) && $method == WPS) {\n            $logo = $logos['LocalPayPalHorizontalSolutionPP'];\n        } else {\n            $logo = $logos['LocalPayPalLogoMedium'];\n        }\n\n        if ($method == HSS) {\n            return array(\n                'cta_text' => $this->l('Paypal'),\n                'logo' => $logo,\n                'form' => $this->fetchTemplate('integral_evolution_payment_eu.tpl'),\n            );\n        } elseif ($method == WPS || $method == ECS) {\n            return array(\n                'cta_text' => $this->l('Paypal'),\n                'logo' => $logo,\n                'form' => $this->fetchTemplate('express_checkout_payment_eu.tpl'),\n            );\n        } elseif ($method == PPP) {\n            if (Module::isEnabled('eu_legal') || Module::isEnabled('advancedeucompliance')) {\n                $this->context->smarty->assign(\n                    array(\n                        'eu_legal_active' => Module::isEnabled('eu_legal'),\n                        'advancedeucompliance_active' => Module::isEnabled('advancedeucompliance'),\n                    )\n                );\n\n                return array(\n                    'cta_text' => $this->l('Paypal, Lastschrift, Kreditkarte, Rechnung'),\n                    'logo' => $logo,\n                    'form' => $this->fetchTemplate('paypal_plus_payment_eu_legal.tpl'),\n                );\n            }\n            return array(\n                'cta_text' => $this->l('Paypal, Lastschrift, Kreditkarte, Rechnung'),\n                'logo' => $logo,\n                'form' => $this->fetchTemplate('paypal_plus_payment_eu.tpl'),\n            );\n        }\n    }\n\n    public function hookDisplayTop()\n    {\n        if ($this->context->controller instanceof IndexController === false\n            && $this->context->controller instanceof CategoryController === false) {\n            return '';\n        }\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            return $bannerManager->renderForHomePage();\n        }\n    }\n\n    public function hookDisplayPaymentTop()\n    {\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            return $bannerManager->renderForCheckoutPage();\n        }\n    }\n\n    public function hookShoppingCartExtra()\n    {\n        $content = '';\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            $content .= $bannerManager->renderForCartPage();\n        }\n\n        return $content . $this->renderExpressCheckoutButton('cart').$this->renderExpressCheckoutForm('cart');\n    }\n\n    public function hookPaymentReturn($params)\n    {\n        if (!$this->active) {\n            return null;\n        }\n        $this->context->smarty->assign(array(\n            'PayPal_payment_mode' => Configuration::get('PAYPAL_CAPTURE'),\n        ));\n        if (Tools::getValue('braintree')) {\n            return $this->fetchTemplate('braintree_return.tpl');\n        } else {\n            return $this->fetchTemplate('confirmation.tpl');\n        }\n    }\n\n    public function hookRightColumn()\n    {\n        $this->context->smarty->assign('logo', $this->paypal_logos->getCardsLogo(true));\n        return $this->fetchTemplate('column.tpl');\n    }\n\n    public function hookLeftColumn()\n    {\n        return $this->hookRightColumn();\n    }\n\n    public function hookBackBeforePayment($params)\n    {\n        if (!$this->active) {\n            return null;\n        }\n\n        /* Only execute if you use PayPal API for payment */\n        if (((int) Configuration::get('PAYPAL_PAYMENT_METHOD') != HSS) && $this->isPayPalAPIAvailable()) {\n            if ($params['module'] != $this->name || !$this->context->cookie->paypal_token\n                || !$this->context->cookie->paypal_payer_id) {\n                return false;\n            }\n\n            Tools::redirect('modules/'.$this->name.'/express_checkout/submit.php?confirm=1&token='.$this->context->cookie->paypal_token.'&payerID='.$this->context->cookie->paypal_payer_id);\n        }\n    }\n\n    public function setPayPalAsConfigured()\n    {\n        Configuration::updateValue('PAYPAL_CONFIGURATION_OK', true);\n    }\n\n    public function hookAdminOrder($params)\n    {\n        if (Tools::isSubmit('submitPayPalCapture')) {\n            if ($capture_amount = Tools::getValue('totalCaptureMoney')) {\n                if ($capture_amount = PaypalCapture::parsePrice($capture_amount)) {\n                    if (Validate::isFloat($capture_amount)) {\n                        $capture_amount = Tools::ps_round($capture_amount, '6');\n                        $ord = new Order((int) $params['id_order']);\n                        $cpt = new PaypalCapture();\n\n                        if (($capture_amount > Tools::ps_round(0, '6')) && (Tools::ps_round($cpt->getRestToPaid($ord), '6') >= $capture_amount)) {\n                            $complete = false;\n                            $totalPaid = $this->getOrderPriceService()->getTotalPaidByReference($ord->reference);\n\n                            if ($capture_amount > Tools::ps_round((float) $totalPaid, '6')) {\n                                $capture_amount = Tools::ps_round((float) $totalPaid, '6');\n                                $complete = true;\n                            }\n                            if ($capture_amount == Tools::ps_round($cpt->getRestToPaid($ord), '6')) {\n                                $complete = true;\n                            }\n\n                            $this->_doCapture($params['id_order'], $capture_amount, $complete);\n                        }\n                    }\n                }\n            }\n        } elseif (Tools::isSubmit('submitPayPalRefund')) {\n            $this->_doTotalRefund($params['id_order']);\n        }\n\n\n        $admin_templates = array();\n        if ($this->isPayPalAPIAvailable()) {\n            if ($this->_needValidation((int) $params['id_order'])) {\n                $admin_templates[] = 'validation';\n            }\n\n            if ($this->_needCapture((int) $params['id_order'])) {\n                $admin_templates[] = 'capture';\n            }\n\n            if ($this->_canRefund((int) $params['id_order'])) {\n                $admin_templates[] = 'refund';\n            }\n        }\n\n        if (count($admin_templates) > 0) {\n            $order = new Order((int) $params['id_order']);\n            $currency = new Currency($order->id_currency);\n            $cpt = new PaypalCapture();\n            $cpt->id_order = (int) $order->id;\n\n            if (version_compare(_PS_VERSION_, '1.5', '>=')) {\n                $order_state = $order->current_state;\n            } else {\n                $order_state = OrderHistory::getLastOrderState($order->id);\n            }\n\n            $order_payment = Tools::strtolower($order->payment);\n\n            $this->context->smarty->assign(\n                array(\n                    'authorization' => (int) Configuration::get('PAYPAL_OS_AUTHORIZATION'),\n                    'base_url' => Tools::getHttpHost(true).__PS_BASE_URI__,\n                    'module_name' => $this->name,\n                    'order_state' => $order_state,\n                    'order_payment' => $order_payment,\n                    'params' => array('id_order' => $params['id_order']),\n                    'id_currency' => $currency->getSign(),\n                    'rest_to_capture' => Tools::ps_round($cpt->getRestToPaid($order), '6'),\n                    'list_captures' => $cpt->getListCaptured(),\n                    'ps_version' => _PS_VERSION_,\n                )\n            );\n\n            foreach ($admin_templates as $admin_template) {\n                $this->_html .= $this->fetchTemplate('/views/templates/admin/admin_order/'.$admin_template.'.tpl');\n                $this->_postProcess();\n                $this->_html .= '</fieldset>';\n            }\n        }\n\n        return $this->_html;\n    }\n\n    public function getOrderPriceService()\n    {\n        return new OrderPrice();\n    }\n\n    public function hookCancelProduct($params)\n    {\n        if (Tools::isSubmit('generateDiscount') || !$this->isPayPalAPIAvailable()\n            || Tools::isSubmit('generateCreditSlip')) {\n            return false;\n        } elseif ($params['order']->module != $this->name || !($order = $params['order'])\n            || !Validate::isLoadedObject($order)) {\n            return false;\n        } elseif (!$order->hasBeenPaid()) {\n            return false;\n        }\n\n        $order_detail = new OrderDetail((int) $params['id_order_detail']);\n        if (!$order_detail || !Validate::isLoadedObject($order_detail)) {\n            return false;\n        }\n\n        $paypal_order = PayPalOrder::getOrderById((int) $order->id);\n        if (!$paypal_order) {\n            return false;\n        }\n\n        $products = $order->getProducts();\n        $cancel_quantity = Tools::getValue('cancelQuantity');\n        $message = $this->l('Cancel products result:').'<br>';\n\n        $amount = (float) ($products[(int) $order_detail->id]['product_price_wt']\n             * (int) $cancel_quantity[(int) $order_detail->id]);\n        $refund = $this->_makeRefund($paypal_order['id_transaction'], (int) $order->id, $amount);\n        $this->formatMessage($refund, $message);\n        $this->_addNewPrivateMessage((int) $order->id, $message);\n    }\n\n    public function hookActionPSCleanerGetModulesTables()\n    {\n        return array('paypal_customer', 'paypal_order');\n    }\n\n    public function hookBackOfficeHeader()\n    {\n        if ((strcmp(Tools::getValue('configure'), $this->name) === 0) ||\n            (strcmp(Tools::getValue('module_name'), $this->name) === 0)) {\n            header('Clear-Site-Data: \"cache\"');\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                $output = '<script type=\"text/javascript\" src=\"'.__PS_BASE_URI__.'js/jquery/jquery-ui-1.8.10.custom.min.js\"></script>\n                    <script type=\"text/javascript\" src=\"'.__PS_BASE_URI__.'js/jquery/jquery.fancybox-1.3.4.js\"></script>\n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"'.__PS_BASE_URI__.'css/jquery.fancybox-1.3.4.css\" />\n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"'._MODULE_DIR_.$this->name.'/views/css/paypal.css\" />';\n            } else {\n                $this->context->controller->addJquery();\n                $this->context->controller->addJQueryPlugin('fancybox');\n                $this->context->controller->addCSS(_PS_MODULE_DIR_.$this->name.'/views/css/paypal.css');\n            }\n\n            $this->context->smarty->assign(array(\n                'PayPal_module_dir' => _MODULE_DIR_.$this->name,\n                'PayPal_WPS' => (int) WPS,\n                'PayPal_HSS' => (int) HSS,\n                'PayPal_ECS' => (int) ECS,\n                'PayPal_PPP' => (int) PPP,\n                'PayPal_PVZ' => (int) PVZ,\n            ));\n\n            return (isset($output) ? $output : null).$this->fetchTemplate('/views/templates/admin/header.tpl');\n        }\n\n        if (Tools::getValue('controller') == \"AdminOrders\" && Tools::getValue('id_order')) {\n            $repeat = false;\n            Media::addJsDefL('chb_braintree_refund', $this->l('Refund PayPal'), null, $repeat);\n            $this->context->controller->addJS(_PS_MODULE_DIR_ . $this->name . '/views/js/bo_order.js');\n        }\n\n        return null;\n    }\n\n    public function renderExpressCheckoutButton($type)\n    {\n        $expressCheckout = new ExpressCheckout();\n\n        if ($expressCheckout->isConfigured() === false) {\n            return '';\n        }\n\n        if ((!Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT'))) {\n            return '';\n        }\n\n        if (!in_array(ECS, $this->getPaymentMethods())) {\n            return '';\n        }\n\n        if (((int) Configuration::get('PAYPAL_BUSINESS') == 1) && (int) Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS) {\n            return '';\n        }\n\n        if ((int) Configuration::get('PAYPAL_PAYMENT_METHOD') == PPP) {\n            return '';\n        }\n\n        $paypal_logos = $this->paypal_logos->getLogos();\n        $iso_lang = array(\n            'en' => 'en_US',\n            'fr' => 'fr_FR',\n            'de' => 'de_DE',\n        );\n\n        $this->context->smarty->assign(array(\n            'use_mobile' => (bool) $this->useMobile(),\n            'PayPal_payment_type' => $type,\n            'PayPal_current_page' => $this->getCurrentUrl(),\n            'PayPal_lang_code' => (isset($iso_lang[$this->context->language->iso_code]))\n            ? $iso_lang[$this->context->language->iso_code] : 'en_US',\n            'PayPal_tracking_code' => $this->getTrackingCode((int) Configuration::get('PAYPAL_PAYMENT_METHOD')),\n            'paypal_express_checkout_shortcut_logo' => isset($paypal_logos['ExpressCheckoutShortcutButton'])\n            ? $paypal_logos['ExpressCheckoutShortcutButton'] : false,\n        ));\n\n        return $this->fetchTemplate('express_checkout_shortcut_button.tpl');\n    }\n\n    public function renderExpressCheckoutForm($type)\n    {\n        if ((!Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT'))\n            || !in_array(ECS, $this->getPaymentMethods()) ||\n            (((int) Configuration::get('PAYPAL_BUSINESS') == 1) && ((int) Configuration::get('PAYPAL_PAYMENT_METHOD')\n                == HSS))) {\n            return;\n        }\n\n        $id_product = (int) Tools::getValue('id_product');\n        $id_product_attribute = (int) Product::getDefaultAttribute($id_product);\n        if ($id_product_attribute) {\n            $minimal_quantity = Attribute::getAttributeMinimalQty($id_product_attribute);\n        } else {\n            $product = new Product($id_product);\n            $minimal_quantity = $product->minimal_quantity;\n        }\n\n        $this->context->smarty->assign(array(\n            'PayPal_payment_type' => $type,\n            'PayPal_current_page' => $this->getCurrentUrl(),\n            'id_product_attribute_ecs' => $id_product_attribute,\n            'product_minimal_quantity' => $minimal_quantity,\n            'PayPal_tracking_code' => $this->getTrackingCode((int) Configuration::get('PAYPAL_PAYMENT_METHOD')),\n        ));\n\n        return $this->fetchTemplate('express_checkout_shortcut_form.tpl');\n    }\n\n    public function useMobile()\n    {\n        if ((method_exists($this->context, 'getMobileDevice') && $this->context->getMobileDevice())\n            || Tools::getValue('ps_mobile_site')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function isCountryAPAC()\n    {\n        $country = new Country(Configuration::get('PS_COUNTRY_DEFAULT'));\n\n        $tabCountryApac = array('CN', 'JP', 'AU', 'HK', 'TW', 'NZ', 'BU', 'BN', 'KH',\n            'ID', 'LA', 'MY', 'PH', 'SG', 'TH',\n            'TL', 'VN');\n\n        if (in_array($country->iso_code, $tabCountryApac)) {\n            return true;\n        }\n        return false;\n    }\n\n    public function getTrackingCode($method)\n    {\n        $isApacCountry = $this->isCountryAPAC();\n\n        if ((_PS_VERSION_ < '1.5') && (_THEME_NAME_ == 'prestashop_mobile' || Tools::getValue('ps_mobile_site')\n            == 1)) {\n            if (_PS_MOBILE_TABLET_) {\n                return $isApacCountry ? APAC_TABLET_TRACKING_CODE : TABLET_TRACKING_CODE;\n            } elseif (_PS_MOBILE_PHONE_) {\n                return $isApacCountry ? APAC_SMARTPHONE_TRACKING_CODE : SMARTPHONE_TRACKING_CODE;\n            }\n        }\n        //Get Seamless checkout\n\n        $login_user = false;\n        if (Configuration::get('PAYPAL_LOGIN')) {\n            $login_user = PaypalLoginUser::getByIdCustomer((int) $this->context->customer->id);\n\n            if ($login_user && $login_user->expires_in <= time()) {\n                $obj = new PayPalLogin();\n                $login_user = $obj->getRefreshToken();\n            }\n        }\n\n        if ($method == WPS) {\n            if ($login_user) {\n                return $isApacCountry ? APAC_TRACKING_EXPRESS_CHECKOUT_SEAMLESS : TRACKING_EXPRESS_CHECKOUT_SEAMLESS;\n            } else {\n                return $isApacCountry ? APAC_TRACKING_INTEGRAL : TRACKING_INTEGRAL;\n            }\n        }\n        if ($method == HSS) {\n            return $isApacCountry ? APAC_TRACKING_INTEGRAL_EVOLUTION : TRACKING_INTEGRAL_EVOLUTION;\n        }\n\n        if ($method == ECS) {\n            if ($login_user) {\n                return $isApacCountry ? APAC_TRACKING_EXPRESS_CHECKOUT_SEAMLESS : TRACKING_EXPRESS_CHECKOUT_SEAMLESS;\n            } else {\n                return $isApacCountry ? APAC_TRACKING_OPTION_PLUS : TRACKING_OPTION_PLUS;\n            }\n        }\n        if ($method == PPP) {\n            return $isApacCountry ? APAC_TRACKING_PAYPAL_PLUS : TRACKING_PAYPAL_PLUS;\n        }\n\n        return TRACKING_CODE;\n    }\n\n    public function hookDisplayOrderConfirmation($params)\n    {\n\n        $id_order = (int) Tools::getValue('id_order');\n        $transactionId = Db::getInstance()->getValue('SELECT transaction FROM `'._DB_PREFIX_.'paypal_braintree` WHERE id_order = '.(int)$id_order);\n        if (!isset($transactionId) || empty($transactionId)) {\n            return;\n        }\n        $order = new Order($id_order);\n\n        $price = Tools::displayPrice($order->total_paid_tax_incl, $this->context->currency);\n\n        $this->context->smarty->assign(array(\n            'transaction_id'=> $transactionId,\n            'order' => (array)$order,\n            'price' => $price,\n\n        ));\n        return $this->fetchTemplate('braintree_confirm.tpl');\n    }\n\n    public function getTranslations()\n    {\n        $file = dirname(__FILE__).'/'._PAYPAL_TRANSLATIONS_XML_;\n        if (file_exists($file)) {\n            $xml = simplexml_load_file($file);\n            if (isset($xml) && $xml) {\n                $index = -1;\n                $content = $default = array();\n\n                while (isset($xml->country[++$index])) {\n                    $country = $xml->country[$index];\n                    $country_iso = $country->attributes()->iso_code;\n\n                    if (($this->iso_code != 'default') && ($country_iso == $this->iso_code)) {\n                        $content = (array) $country;\n                    } elseif ($country_iso == 'default') {\n                        $default = (array) $country;\n                    }\n                }\n\n                $content += $default;\n                $this->context->smarty->assign('PayPal_content', $content);\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public function getPayPalURL()\n    {\n        return 'www'.(Configuration::get('PAYPAL_SANDBOX') ? '.sandbox' : '').'.paypal.com';\n    }\n\n    public function getPaypalIntegralEvolutionUrl()\n    {\n        if (Configuration::get('PAYPAL_SANDBOX')) {\n            return 'https://'.$this->getPayPalURL().'/cgi-bin/acquiringweb';\n        }\n\n        return 'https://securepayments.paypal.com/acquiringweb?cmd=_hosted-payment';\n    }\n\n    public function getPaypalStandardUrl()\n    {\n        return 'https://'.$this->getPayPalURL().'/cgi-bin/webscr';\n    }\n\n    public function getAPIURL()\n    {\n        return 'api-3t'.(Configuration::get('PAYPAL_SANDBOX') ? '.sandbox' : '').'.paypal.com';\n    }\n\n    public function getAPIScript()\n    {\n        return '/nvp';\n    }\n\n    public function getPaymentMethods()\n    {\n        $country = new Country((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n        return AuthenticatePaymentMethods::authenticatePaymentMethodByCountry($country->iso_code);\n    }\n\n    public function getCountryCode()\n    {\n        $cart = new Cart((int) $this->context->cookie->id_cart);\n        $address = new Address((int) $cart->id_address_invoice);\n        $country = new Country((int) $address->id_country);\n\n        return $country->iso_code;\n    }\n\n    public function displayPayPalAPIError($message, $log = false)\n    {\n        $send = true;\n        // Sanitize log\n        foreach ($log as $key => $string) {\n            if ($string == 'ACK -> Success') {\n                $send = false;\n            } elseif (Tools::substr($string, 0, 6) == 'METHOD') {\n                $values = explode('&', $string);\n                foreach ($values as $key2 => $value) {\n                    $values2 = explode('=', $value);\n                    foreach ($values2 as $key3 => $value2) {\n                        if ($value2 == 'PWD' || $value2 == 'SIGNATURE') {\n                            $values2[$key3 + 1] = '*********';\n                        }\n                    }\n\n                    $values[$key2] = implode('=', $values2);\n                }\n                $log[$key] = implode('&', $values);\n            }\n        }\n\n        $this->context->smarty->assign(array('message' => $message, 'logs' => $log));\n\n        if ($send) {\n            $id_lang = (int) $this->context->language->id;\n            $iso_lang = Language::getIsoById($id_lang);\n\n            if (!is_dir(dirname(__FILE__).'/mails/'.Tools::strtolower($iso_lang))) {\n                $id_lang = Language::getIdByIso('en');\n            }\n\n            Mail::Send(\n                $id_lang,\n                'error_reporting',\n                Mail::l('Error reporting from your PayPal module', (int) $this->context->language->id),\n                array('{logs}' => implode('<br />', $log)),\n                Configuration::get('PS_SHOP_EMAIL'),\n                null,\n                null,\n                null,\n                null,\n                null,\n                _PS_MODULE_DIR_.$this->name.'/mails/'\n            );\n        }\n\n        return $this->fetchTemplate('error.tpl');\n    }\n\n    private function _canRefund($id_order)\n    {\n        if (!(bool) $id_order) {\n            return false;\n        }\n\n        $paypal_order = Db::getInstance()->getRow('\n            SELECT `payment_status`, `capture`\n            FROM `'._DB_PREFIX_.'paypal_order`\n            WHERE `id_order` = '.(int) $id_order);\n\n\n        return ($paypal_order && in_array($paypal_order['payment_status'], array('Completed','approved','settled','submitted_for_settlement')) && $paypal_order['capture'] == 0);\n    }\n\n    private function _needValidation($id_order)\n    {\n        if (!(int) $id_order) {\n            return false;\n        }\n\n        $order = Db::getInstance()->getRow('\n            SELECT `payment_method`, `payment_status`\n            FROM `'._DB_PREFIX_.'paypal_order`\n            WHERE `id_order` = '.(int) $id_order);\n\n        return $order && $order['payment_method'] != HSS && $order['payment_status']\n            == 'Pending_validation';\n    }\n\n    private function _needCapture($id_order)\n    {\n        if (!(int) $id_order) {\n            return false;\n        }\n\n        $result = Db::getInstance()->getRow('\n            SELECT `payment_method`, `payment_status`\n            FROM `'._DB_PREFIX_.'paypal_order`\n            WHERE `id_order` = '.(int) $id_order.' AND `capture` = 1');\n\n        return $result && ($result['payment_method'] != HSS && $result['payment_status'] == 'Pending_capture' || ($result['payment_method'] == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && $result['payment_status'] == 'authorized');\n    }\n\n    private function _preProcess()\n    {\n        if (Tools::isSubmit('submitPaypal')) {\n            $business = Tools::getValue('business') !== false ? (int) Tools::getValue('business')\n            : false;\n            $payment_method = Tools::getValue('paypal_payment_method') !== false\n            ? (int) Tools::getValue('paypal_payment_method') : false;\n            $payment_capture = Tools::getValue('payment_capture') !== false ? (int) Tools::getValue('payment_capture')\n            : false;\n            $sandbox_mode = Tools::getValue('sandbox_mode') !== false ? (int) Tools::getValue('sandbox_mode')\n            : false;\n            if ($this->default_country === false || $sandbox_mode === false || $payment_capture\n                === false || $business === false || $payment_method === false) {\n                $this->_errors[] = $this->l('Some fields are empty.');\n            } elseif ($business == 0) {\n                $this->_errors[] = $this->l('Credentials fields cannot be empty');\n            } elseif ($business == 1) {\n                if (($payment_method == WPS || $payment_method == ECS) && (!Tools::getValue('api_username')\n                    || !Tools::getValue('api_password') || !Tools::getValue('api_signature'))) {\n                    $this->_errors[] = $this->l('Credentials fields cannot be empty');\n                }\n\n                if ($payment_method == PPP && (Tools::getValue('paypalplus_webprofile')\n                    != 0 && (!Tools::getValue('client_id') && !Tools::getValue('secret')))) {\n                    $this->_errors[] = $this->l('Credentials fields cannot be empty');\n                }\n\n                if ($payment_method == HSS && !Tools::getValue('api_business_account')) {\n                    $this->_errors[] = $this->l('Business e-mail field cannot be empty');\n                }\n\n                $currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n                $account_braintree = Tools::getValue('account_braintree');\n                if ($payment_method == PVZ && empty($account_braintree[$currency->iso_code])) {\n                    $this->_errors[] = sprintf($this->l('Braintree Account %s field cannot be empty'), $currency->iso_code);\n                }\n            }\n        }\n\n        return !count($this->_errors);\n    }\n\n    private function _postProcess()\n    {\n        if (Tools::isSubmit('submitPaypal')) {\n            if (Tools::getValue('paypal_country_only')) {\n                Configuration::updateValue('PAYPAL_COUNTRY_DEFAULT', (int) Tools::getValue('paypal_country_only'));\n            } elseif ($this->_preProcess()) {\n                $expressCheckout = new ExpressCheckout();\n                if ((int) Tools::getValue('paypal_payment_method') == 5) {\n                    $refresh_webprofile = Configuration::get('PAYPAL_PLUS_CLIENT_ID') != Tools::getValue('client_id')\n                        || Configuration::get('PAYPAL_PLUS_SECRET') != Tools::getValue('secret')\n                        || Configuration::get('PAYPAL_SANDBOX') != (int) Tools::getValue('sandbox_mode');\n                } else {\n                    $refresh_webprofile = false;\n                }\n\n                $new_hss_email = Tools::getValue('api_business_account');\n                Db::getInstance()->delete('paypal_hss_email_error', 'email = \"'.$new_hss_email.'\"');\n\n                Configuration::updateValue('PAYPAL_BUSINESS', (int) Tools::getValue('business'));\n                Configuration::updateValue('PAYPAL_PAYMENT_METHOD', (int) Tools::getValue('paypal_payment_method'));\n                $expressCheckout->setApiUser(trim(Tools::getValue('api_username')));\n                $expressCheckout->setApiPassword(trim(Tools::getValue('api_password')));\n                $expressCheckout->setApiSignature(trim(Tools::getValue('api_signature')));\n                Configuration::updateValue('PAYPAL_BUSINESS_ACCOUNT', trim(Tools::getValue('api_business_account')));\n                Configuration::updateValue('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT', (int) Tools::getValue('express_checkout_shortcut'));\n                $expressCheckout->setApiMerchantId(trim(Tools::getValue('in_context_checkout_merchant_id')));\n\n                $sandbox = (int)Configuration::get('PAYPAL_SANDBOX');\n                $switch_sandbox = false;\n\n                Configuration::updateValue('PAYPAL_SANDBOX', (int) Tools::getValue('sandbox_mode'));\n                Configuration::updateValue('PAYPAL_CAPTURE', (int) Tools::getValue('payment_capture'));\n\n                $expressCheckout->checkCredentials();\n                /* USE PAYPAL LOGIN */\n                Configuration::updateValue('PAYPAL_LOGIN', (int) Tools::getValue('paypal_login'));\n                Configuration::updateValue('PAYPAL_LOGIN_CLIENT_ID', Tools::getValue('paypal_login_client_id'));\n                Configuration::updateValue('PAYPAL_LOGIN_SECRET', Tools::getValue('paypal_login_client_secret'));\n                Configuration::updateValue('PAYPAL_LOGIN_TPL', (int) Tools::getValue('paypal_login_client_template'));\n\n                Configuration::updateValue('PAYPAL_BRAINTREE_ENABLED', (int) Tools::getValue('braintree_enabled'));\n                Configuration::updateValue('PAYPAL_USE_3D_SECURE', (int) Tools::getValue('use_threedsecure'));\n\n                if ($sandbox && $sandbox != (int) Tools::getValue('sandbox_mode')) {\n                    $switch_sandbox = true;\n\n                    Configuration::updateValue('PAYPAL_BRAINTREE_ACCESS_TOKEN', null);\n                    Configuration::updateValue('PAYPAL_BRAINTREE_EXPIRES_AT', null);\n                    Configuration::updateValue('PAYPAL_BRAINTREE_REFRESH_TOKEN', null);\n                    Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID', null);\n                }\n\n                //*TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_ENABLED',Tools::getValue('braintree_enabled'));\n                //*TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_PUBLIC_KEY', Tools::getValue('braintree_public_key'));\n                //*TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_PRIVATE_KEY', Tools::getValue('braintree_private_key'));\n                // TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID', Tools::getValue('braintree_merchant_id'));\n\n                /* USE PAYPAL PLUS */\n                if ((int) Tools::getValue('paypal_payment_method') == 5) {\n                    Configuration::updateValue('PAYPAL_PLUS_CLIENT_ID', Tools::getValue('client_id'));\n                    Configuration::updateValue('PAYPAL_PLUS_SECRET', Tools::getValue('secret'));\n                    if ((int) Tools::getValue('paypalplus_webprofile') == 1 || $refresh_webprofile) {\n                        unset($this->context->cookie->paypal_access_token_time_max);\n                        unset($this->context->cookie->paypal_access_token_access_token);\n                        $ApiPaypalPlus = new ApiPaypalPlus();\n                        $idWebProfile = $ApiPaypalPlus->getWebProfile();\n                        if ($idWebProfile) {\n                            Configuration::updateValue('PAYPAL_WEB_PROFILE_ID', $idWebProfile);\n                        } else {\n                            Configuration::updateValue('PAYPAL_WEB_PROFILE_ID', '0');\n                        }\n                    }\n                }\n                /* IS IN_CONTEXT_CHECKOUT ENABLED */\n                if ((int) Tools::getValue('paypal_payment_method') != 2) {\n                    Configuration::updateValue('PAYPAL_IN_CONTEXT_CHECKOUT', (int) Tools::getValue('in_context_checkout'));\n                } else {\n                    Configuration::updateValue('PAYPAL_IN_CONTEXT_CHECKOUT', 0);\n                }\n\n                /* /IS IN_CONTEXT_CHECKOUT ENABLED */\n\n                //EXPRESS CHECKOUT TEMPLATE\n                Configuration::updateValue('PAYPAL_HSS_SOLUTION', (int) Tools::getValue('integral_evolution_solution'));\n                if (Tools::getValue('integral_evolution_solution') == PAYPAL_HSS_IFRAME) {\n                    Configuration::updateValue('PAYPAL_HSS_TEMPLATE', 'D');\n                } else {\n                    Configuration::updateValue('PAYPAL_HSS_TEMPLATE', Tools::getValue('integral_evolution_template'));\n                }\n\n                $account_brain = Tools::getValue('account_braintree');\n                Configuration::updateValue('PAYPAL_ACCOUNT_BRAINTREE', Tools::jsonEncode($account_brain));\n                // Start save Braintree credentials\n                Configuration::updateValue('PAYPAL_BRAINTREE_PUB_KEY_LIVE', Tools::getValue('paypal_braintree_pub_key_live'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_PRIV_KEY_LIVE', Tools::getValue('paypal_braintree_priv_key_live'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID_LIVE', Tools::getValue('paypal_braintree_merchant_id_live'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_PUB_KEY_SANDBOX', Tools::getValue('paypal_braintree_pub_key_sandbox'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_PRIV_KEY_SANDBOX', Tools::getValue('paypal_braintree_priv_key_sandbox'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID_SANDBOX', Tools::getValue('paypal_braintree_merchant_id_sandbox'));\n                // End save Braintree credentials\n\n                $this->context->smarty->assign('PayPal_save_success', true);\n\n                if ($switch_sandbox) {\n                    if ((int) Tools::getValue('sandbox_mode') == 1) {\n                        return $this->displayWarning($this->l('You have switched from live to sandbox mode. Please reconfigure your products.'));\n                    } else {\n                        return $this->displayWarning($this->l('You have switched from sandbox to live mode. Please reconfigure your products.'));\n                    }\n                }\n            } else {\n                $this->_html = $this->displayError(implode('<br />', $this->_errors)); // Not displayed at this time\n                $this->context->smarty->assign('PayPal_save_failure', true);\n            }\n        }\n\n        if (Tools::isSubmit('installmentSettingForm')) {\n            Configuration::updateValue(ConfigurationMap::ENABLE_INSTALLMENT, Tools::getValue(ConfigurationMap::ENABLE_INSTALLMENT));\n            Configuration::updateValue(ConfigurationMap::HOME_PAGE, Tools::getValue(ConfigurationMap::HOME_PAGE));\n            Configuration::updateValue(ConfigurationMap::CATEGORY_PAGE, Tools::getValue(ConfigurationMap::CATEGORY_PAGE));\n            Configuration::updateValue(ConfigurationMap::CART_PAGE, Tools::getValue(ConfigurationMap::CART_PAGE));\n            Configuration::updateValue(ConfigurationMap::CHECKOUT_PAGE, Tools::getValue(ConfigurationMap::CHECKOUT_PAGE));\n            Configuration::updateValue(ConfigurationMap::PRODUCT_PAGE, Tools::getValue(ConfigurationMap::PRODUCT_PAGE));\n            Configuration::updateValue(ConfigurationMap::COLOR, Tools::getValue(ConfigurationMap::COLOR));\n            Configuration::updateValue(ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT, Tools::getValue(ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT));\n            ConfigurationMap::setClientId(Tools::getValue(ConfigurationMap::CLIENT_ID, ''));\n        }\n\n        return $this->loadLangDefault();\n    }\n\n    private function _makeRefund($id_transaction, $id_order, $amt = false)\n    {\n        if (!$this->isPayPalAPIAvailable()) {\n            die(Tools::displayError('Fatal Error: no API Credentials are available'));\n        } elseif (!$id_transaction) {\n            die(Tools::displayError('Fatal Error: id_transaction is null'));\n        }\n\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        $id_paypal_braintree = Db::getInstance()->getValue('\n                    SELECT `id_paypal_braintree`\n                    FROM `'._DB_PREFIX_.'paypal_braintree`\n                    WHERE `id_order` = '.(int) $id_order);\n\n        if (Configuration::get('PAYPAL_BRAINTREE_ENABLED') && $id_paypal_braintree) {\n            if (!$amt) {\n                $amt = Db::getInstance()->getValue('\n                    SELECT total_paid\n                    FROM `'._DB_PREFIX_.'orders` o\n                    WHERE o.`id_order` = '.(int) $id_order);\n            }\n            include_once(_PS_MODULE_DIR_.'paypal/classes/Braintree.php');\n            $braintree = new PrestaBraintree();\n\n            $transaction_status = $braintree->getTransactionStatus($id_transaction);\n\n            if ($transaction_status == 'submitted_for_settlement') {\n                $result = $braintree->void($id_transaction);\n            } else {\n                $result = $braintree->refund($id_transaction, $amt);\n            }\n\n            return $result;\n        } elseif ($payment_method != PPP) {\n            if (!$amt) {\n                $params = array('TRANSACTIONID' => $id_transaction, 'REFUNDTYPE' => 'Full');\n            } else {\n                $iso_currency = Db::getInstance()->getValue('\n                    SELECT `iso_code`\n                    FROM `'._DB_PREFIX_.'orders` o\n                    LEFT JOIN `'._DB_PREFIX_.'currency` c ON (o.`id_currency` = c.`id_currency`)\n                    WHERE o.`id_order` = '.(int) $id_order);\n\n                $params = array('TRANSACTIONID' => $id_transaction, 'REFUNDTYPE' => 'Partial',\n                    'AMT' => (float) $amt, 'CURRENCYCODE' => Tools::strtoupper($iso_currency));\n            }\n\n            $paypal_lib = new PaypalLib();\n\n            return $paypal_lib->makeCall(\n                $this->getAPIURL(),\n                $this->getAPIScript(),\n                'RefundTransaction',\n                '&'.http_build_query($params, '', '&')\n            );\n        } else {\n            if (!$amt) {\n                $params = new stdClass();\n            } else {\n                $result = Db::getInstance()->ExecuteS('SELECT * FROM '._DB_PREFIX_.'paypal_order WHERE id_transaction = \"'.pSQL($id_transaction).'\"');\n                $result = current($result);\n\n                $amount = new stdClass();\n                $amount->total = $amt;\n                $amount->currency = $result['currency'];\n\n                $params = new stdClass();\n                $params->amount = $amount;\n            }\n\n            $callApiPaypalPlus = new CallApiPaypalPlus();\n\n            return Tools::jsonDecode($callApiPaypalPlus->executeRefund($id_transaction, $params));\n        }\n    }\n\n    public function _addNewPrivateMessage($id_order, $message)\n    {\n        if (!(bool) $id_order) {\n            return false;\n        }\n\n        $new_message = new Message();\n        $message = strip_tags($message, '<br>');\n\n        if (!Validate::isCleanHtml($message)) {\n            $message = $this->l('Payment message is not valid, please check your module.');\n        }\n\n        $new_message->message = $message;\n        $new_message->id_order = (int) $id_order;\n        $new_message->private = 1;\n\n        return $new_message->add();\n    }\n\n    public function hookActionOrderSlipAdd($params)\n    {\n        if (Tools::getValue('generateDiscountRefund') == 'on') {\n            $order = $params['order'];\n            $paypalOrder = PayPalOrder::getOrderById((int) $order->id);\n            $total_paid = floatval($paypalOrder['total_paid']);\n            $amount = floatval(Tools::getValue('partialRefundShippingCost', ''));\n\n            foreach ($params['productList'] as $product) {\n                $amount += $product['amount'];\n            }\n\n            $total_paid -= $amount;\n            $dataUpdate = array(\n                'total_paid' => $total_paid\n            );\n\n            Db::getInstance()->update('paypal_order', $dataUpdate, 'id_order=' . $order->id);\n        }\n\n        if (Tools::isSubmit('doPartialRefundPayPal')) {\n            $order = $params['order'];\n            $paypalOrder = PayPalOrder::getOrderById((int) $order->id);\n\n            if (!$this->isPayPalAPIAvailable() || !$paypalOrder) {\n                return false;\n            }\n\n            $amount = floatval(Tools::getValue('partialRefundShippingCost', ''));\n\n            foreach ($params['productList'] as $product) {\n                $amount += $product['amount'];\n            }\n\n            $response = $this->_makeRefund($paypalOrder['id_transaction'], $order->id, $amount);\n            $message = $this->l('Refund operation result:').\" \\r\\n\";\n\n            foreach ($response as $key => $value) {\n                if (is_object($value) || is_array($value)) {\n                    $message .= $key.': '.Tools::jsonEncode($value).\" \\r\\n\";\n                } else {\n                    $message .= $key.': '.$value.\" \\r\\n\";\n                }\n            }\n\n            if ((array_key_exists('ACK', $response) && $response['ACK'] == 'Success' &&\n                    $response['REFUNDTRANSACTIONID'] != '') || (isset($response->state) &&\n                    $response->state == 'completed') ||\n                ((Configuration::get('PAYPAL_PAYMENT_METHOD') || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && $response)) {\n                if (Configuration::get('PAYPAL_BRAINTREE_ENABLED') && !is_array($response)) {\n                    $message .= $this->l('Braintree refund successful!');\n                } else {\n                    $message .= $this->l('PayPal refund successful!');\n                }\n\n                $total_paid = $total_paid = floatval($paypalOrder['total_paid']);\n                $total_paid -= $amount;\n                $dataUpdate = array(\n                    'payment_status' => 'Refunded',\n                    'total_paid' => $total_paid\n                );\n                $res = Db::getInstance()->update('paypal_order', $dataUpdate, 'id_order=' . $order->id);\n\n                if (!$res) {\n                    die(Tools::displayError('Error when updating PayPal database'));\n                }\n            } else {\n                $message .= $this->l('Transaction error!');\n            }\n\n            $this->_addNewPrivateMessage((int) $order->id, $message);\n        }\n    }\n\n    private function _doTotalRefund($id_order)\n    {\n        $paypal_order = PayPalOrder::getOrderById((int) $id_order);\n\n        if (!$this->isPayPalAPIAvailable() || !$paypal_order) {\n            return false;\n        }\n\n        $order = new Order((int) $id_order);\n\n        if (!Validate::isLoadedObject($order)) {\n            return false;\n        }\n\n        $currency = new Currency((int) $order->id_currency);\n\n        if (!Validate::isLoadedObject($currency)) {\n            $this->_errors[] = $this->l('Not a valid currency');\n            return false;\n        }\n\n        $decimals = (is_array($currency) ? (int) $currency['decimals'] : (int) $currency->decimals) * _PS_PRICE_DISPLAY_PRECISION_;\n\n        // check if total or partial\n        if (Tools::ps_round($order->total_paid_real, $decimals) == Tools::ps_round($paypal_order['total_paid'], $decimals)) {\n            $response = $this->_makeRefund($paypal_order['id_transaction'], $order->id);\n        } else {\n            $response = $this->_makeRefund($paypal_order['id_transaction'], $order->id, (float) ($paypal_order['total_paid']));\n        }\n\n        $message = $this->l('Refund operation result:').\" \\r\\n\";\n        foreach ($response as $key => $value) {\n            if (is_object($value) || is_array($value)) {\n                $message .= $key.': '.Tools::jsonEncode($value).\" \\r\\n\";\n            } else {\n                $message .= $key.': '.$value.\" \\r\\n\";\n            }\n        }\n        if ((array_key_exists('ACK', $response) && $response['ACK'] == 'Success' && $response['REFUNDTRANSACTIONID'] != '') || (isset($response->state) && $response->state == 'completed') || ((Configuration::get('PAYPAL_PAYMENT_METHOD') || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && $response)) {\n            if (Configuration::get('PAYPAL_BRAINTREE_ENABLED') && !is_array($response)) {\n                $message .= $this->l('Braintree refund successful!');\n            } else {\n                $message .= $this->l('PayPal refund successful!');\n            }\n\n            if (!Db::getInstance()->Execute('UPDATE `'._DB_PREFIX_.'paypal_order` SET `payment_status` = \\'Refunded\\' WHERE `id_order` = '.(int) $id_order)) {\n                die(Tools::displayError('Error when updating PayPal database'));\n            }\n\n            $history = new OrderHistory();\n            $history->id_order = (int) $id_order;\n            $history->changeIdOrderState((int) Configuration::get('PS_OS_REFUND'), $history->id_order);\n            $history->addWithemail();\n            $history->save();\n        } else {\n            $message .= $this->l('Transaction error!');\n        }\n\n        $this->_addNewPrivateMessage((int) $id_order, $message);\n\n        Tools::redirect($_SERVER['HTTP_REFERER']);\n    }\n\n    private function _doCapture($id_order, $capture_amount = false, $is_complete = false)\n    {\n        $paypal_order = PayPalOrder::getOrderById((int) $id_order);\n        if (!$this->isPayPalAPIAvailable() || !$paypal_order) {\n            return false;\n        }\n\n        $order = new Order((int) $id_order);\n        $currency = new Currency((int) $order->id_currency);\n\n        if (!$capture_amount) {\n            $capture_amount = (float) $order->total_paid;\n        }\n\n        $sql = 'SELECT transaction\n            FROM '._DB_PREFIX_.'paypal_braintree\n            WHERE id_order = '.(int)$id_order;\n\n        $transaction_braintree = Db::getInstance()->getValue($sql);\n\n        if ($transaction_braintree) {\n            include_once(_PS_MODULE_DIR_.'paypal/classes/Braintree.php');\n            $braintree = new PrestaBraintree();\n            $result_transaction = $braintree->submitForSettlement($transaction_braintree, $capture_amount);\n            if (!$result_transaction) {\n                if ($braintree->error == 'Authorization_expired') {\n                    die(Tools::displayError($this->l('The authorization of the banking transaction has expired. For more information, please refer to the expiration cases.')));\n                }\n            }\n\n            $captureBraintree = new PaypalCapture();\n            $captureBraintree->id_order = (int)$id_order;\n            $captureBraintree->capture_amount = (float)$capture_amount;\n            $captureBraintree->result = 'Completed';\n            $captureBraintree->save();\n\n\n            if (!($captureBraintree->getRestToCapture($captureBraintree->id_order))) {\n                //plus d'argent a capturer\n                if (!Db::getInstance()->Execute(\n                    'UPDATE `' . _DB_PREFIX_ . 'paypal_order`\n                        SET `capture` = 0, `payment_status` = \\'Completed\\'\n                        WHERE `id_order` = ' . (int)$id_order\n                )\n                ) {\n                    die(Tools::displayError('Error when updating PayPal database'));\n                }\n\n                $order_history = new OrderHistory();\n                $order_history->id_order = (int)$id_order;\n\n                if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                    $order_history->changeIdOrderState(Configuration::get('PAYPAL_BT_OS_AUTHORIZATION'), (int)$id_order);\n                } else {\n                    $order_history->changeIdOrderState(Configuration::get('PAYPAL_BT_OS_AUTHORIZATION'), $order);\n                }\n\n                $order_history->addWithemail();\n                $message = $this->l('Order finished with PayPal!');\n            }\n        } else {\n            $complete = 'Complete';\n            if (!$is_complete) {\n                $complete = 'NotComplete';\n            }\n\n            $paypal_lib = new PaypalLib();\n            $response = $paypal_lib->makeCall(\n                $this->getAPIURL(),\n                $this->getAPIScript(),\n                'DoCapture',\n                '&' . http_build_query(array('AMT' => $capture_amount, 'AUTHORIZATIONID' => $paypal_order['id_transaction'], 'CURRENCYCODE' => $currency->iso_code, 'COMPLETETYPE' => $complete), '', '&')\n            );\n            $message = $this->l('Capture operation result:') . '<br>';\n\n            foreach ($response as $key => $value) {\n                $message .= $key . ': ' . $value . '<br>';\n            }\n\n            $capture = new PaypalCapture();\n            $capture->id_order = (int)$id_order;\n            $capture->capture_amount = (float)$capture_amount;\n\n            if ((array_key_exists('ACK', $response)) && ($response['ACK'] == 'Success')\n                && ($response['PAYMENTSTATUS'] == 'Completed')\n            ) {\n                $capture->result = pSQL($response['PAYMENTSTATUS']);\n                if ($capture->save()) {\n                    if (!($capture->getRestToCapture($capture->id_order))) {\n                        //plus d'argent a capturer\n                        if (!Db::getInstance()->Execute(\n                            'UPDATE `' . _DB_PREFIX_ . 'paypal_order`\n                        SET `capture` = 0, `payment_status` = \\'' . pSQL($response['PAYMENTSTATUS']) . '\\', `id_transaction` = \\'' . pSQL($response['TRANSACTIONID']) . '\\'\n                        WHERE `id_order` = ' . (int)$id_order\n                        )\n                        ) {\n                            die(Tools::displayError('Error when updating PayPal database'));\n                        }\n\n                        $order_history = new OrderHistory();\n                        $order_history->id_order = (int)$id_order;\n\n                        if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                            $order_history->changeIdOrderState(Configuration::get('PS_OS_WS_PAYMENT'), (int)$id_order);\n                        } else {\n                            $order_history->changeIdOrderState(Configuration::get('PS_OS_WS_PAYMENT'), $order);\n                        }\n\n                        $order_history->addWithemail();\n                        $message .= $this->l('Order finished with PayPal!');\n                    }\n                }\n            } elseif (isset($response['PAYMENTSTATUS'])) {\n                $capture->result = pSQL($response['PAYMENTSTATUS']);\n                $capture->save();\n                $message .= $this->l('Transaction error!');\n            }\n\n            $this->_addNewPrivateMessage((int)$id_order, $message);\n        }\n        Tools::redirect($_SERVER['HTTP_REFERER']);\n    }\n\n    private function _updatePaymentStatusOfOrder($id_order)\n    {\n        if (!(bool) $id_order || !$this->isPayPalAPIAvailable()) {\n            return false;\n        }\n\n        $paypal_order = PayPalOrder::getOrderById((int) $id_order);\n        if (!$paypal_order) {\n            return false;\n        }\n\n        $paypal_lib = new PaypalLib();\n        $response = $paypal_lib->makeCall(\n            $this->getAPIURL(),\n            $this->getAPIScript(),\n            'GetTransactionDetails',\n            '&'.http_build_query(array('TRANSACTIONID' => $paypal_order['id_transaction']), '', '&')\n        );\n\n        if (array_key_exists('ACK', $response)) {\n            if ($response['ACK'] == 'Success' && isset($response['PAYMENTSTATUS'])) {\n                $history = new OrderHistory();\n                $history->id_order = (int) $id_order;\n\n                if ($response['PAYMENTSTATUS'] == 'Completed') {\n                    $history->changeIdOrderState(Configuration::get('PS_OS_PAYMENT'), (int) $id_order);\n                } elseif (($response['PAYMENTSTATUS'] == 'Pending') && ($response['PENDINGREASON']\n                    == 'authorization')) {\n                    $history->changeIdOrderState((int) (Configuration::get('PAYPAL_OS_AUTHORIZATION')), (int) $id_order);\n                } elseif ($response['PAYMENTSTATUS'] == 'Reversed') {\n                    $history->changeIdOrderState(Configuration::get('PS_OS_ERROR'), (int) $id_order);\n                }\n\n                $history->addWithemail();\n\n                if (!Db::getInstance()->Execute(\n                    'UPDATE `'._DB_PREFIX_.'paypal_order`\n                    SET `payment_status` = \\''.pSQL($response['PAYMENTSTATUS']).($response['PENDINGREASON'] == 'authorization' ? '_authorization' : '').'\\'\n                    WHERE `id_order` = '.(int) $id_order\n                )\n                ) {\n                    die(Tools::displayError('Error when updating PayPal database'));\n                }\n            }\n\n            $message = $this->l('Verification status :').'<br>';\n            $this->formatMessage($response, $message);\n            $this->_addNewPrivateMessage((int) $id_order, $message);\n\n            return $response;\n        }\n\n        return false;\n    }\n\n    public function fetchTemplate($name)\n    {\n        if (version_compare(_PS_VERSION_, '1.4', '<')) {\n            $this->context->smarty->currentTemplate = $name;\n        } elseif (version_compare(_PS_VERSION_, '1.5', '<')) {\n            $views = 'views/templates/';\n            if (@filemtime(dirname(__FILE__).'/'.$name)) {\n                return $this->display(__FILE__, $name);\n            } elseif (@filemtime(dirname(__FILE__).'/'.$views.'hook/'.$name)) {\n                return $this->display(__FILE__, $views.'hook/'.$name);\n            } elseif (@filemtime(dirname(__FILE__).'/'.$views.'front/'.$name)) {\n                return $this->display(__FILE__, $views.'front/'.$name);\n            } elseif (@filemtime(dirname(__FILE__).'/'.$views.'admin/'.$name)) {\n                return $this->display(__FILE__, $views.'admin/'.$name);\n            }\n        }\n        return $this->display(__FILE__, $name);\n    }\n\n    public static function getPayPalCustomerIdByEmail($email)\n    {\n        return Db::getInstance()->getValue(\n            'SELECT `id_customer`\n            FROM `'._DB_PREFIX_.'paypal_customer`\n            WHERE paypal_email = \\''.pSQL($email).'\\''\n        );\n    }\n\n    public static function getPayPalEmailByIdCustomer($id_customer)\n    {\n        return Db::getInstance()->getValue(\n            'SELECT `paypal_email`\n            FROM `'._DB_PREFIX_.'paypal_customer`\n            WHERE `id_customer` = '.(int) $id_customer\n        );\n    }\n\n    public static function addPayPalCustomer($id_customer, $email)\n    {\n        if (!PayPal::getPayPalEmailByIdCustomer($id_customer)) {\n            Db::getInstance()->Execute(\n                'INSERT INTO `'._DB_PREFIX_.'paypal_customer` (`id_customer`, `paypal_email`)\n                VALUES('.(int) $id_customer.', \\''.pSQL($email).'\\')'\n            );\n\n            return Db::getInstance()->Insert_ID();\n        }\n\n        return false;\n    }\n\n    private function warningsCheck()\n    {\n        if (Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS && Configuration::get('PAYPAL_BUSINESS_ACCOUNT') == 'paypal@prestashop.com') {\n            $this->warning = $this->l('You are currently using the default PayPal e-mail address, please enter your own e-mail address.').'<br />';\n        }\n\n        /* Check preactivation warning */\n        if (Configuration::get('PS_PREACTIVATION_PAYPAL_WARNING')) {\n            $this->warning .= (!empty($this->warning)) ? ', ' : Configuration::get('PS_PREACTIVATION_PAYPAL_WARNING').'<br />';\n        }\n\n        if (!function_exists('curl_init')) {\n            $this->warning .= $this->l('In order to use your module, please activate cURL (PHP extension)');\n        }\n    }\n\n    private function loadLangDefault()\n    {\n        $this->default_country = (int) Configuration::get('PS_COUNTRY_DEFAULT');\n        $country = new Country($this->default_country);\n        $this->iso_code = Tools::strtoupper($country->iso_code);\n    }\n\n    public function formatMessage($response, &$message)\n    {\n        foreach ($response as $key => $value) {\n            $message .= $key.': '.$value.'<br>';\n        }\n    }\n\n    private function checkCurrency($cart)\n    {\n        $currency_module = $this->getCurrency((int) $cart->id_currency);\n\n        if ((int) $cart->id_currency == (int) $currency_module->id) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function getShopDomainSsl($http = false, $entities = false)\n    {\n        if (method_exists('Tools', 'getShopDomainSsl')) {\n            return Tools::getShopDomainSsl($http, $entities);\n        } else {\n            if (!($domain = Configuration::get('PS_SHOP_DOMAIN_SSL'))) {\n                $domain = self::getHttpHost();\n            }\n\n            if ($entities) {\n                $domain = htmlspecialchars($domain, ENT_COMPAT, 'UTF-8');\n            }\n\n            if ($http) {\n                $domain = (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://').$domain;\n            }\n\n            return $domain;\n        }\n    }\n\n    public function validateOrder($id_cart, $id_order_state, $amount_paid, $payment_method = 'Unknown', $message = null, $transaction = array(), $currency_special = null, $dont_touch_amount = false, $secure_key = false, Shop $shop = null)\n    {\n        if ($this->active) {\n            // Set transaction details if pcc is defined in PaymentModule class_exists\n            if (isset($this->pcc)) {\n                $this->pcc->transaction_id = (isset($transaction['transaction_id']) ? $transaction['transaction_id'] : '');\n            }\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                parent::validateOrder(\n                    (int) $id_cart,\n                    (int) $id_order_state,\n                    (float) $amount_paid,\n                    $payment_method,\n                    $message,\n                    $transaction,\n                    $currency_special,\n                    $dont_touch_amount,\n                    $secure_key\n                );\n            } else {\n                parent::validateOrder(\n                    (int) $id_cart,\n                    (int) $id_order_state,\n                    (float) $amount_paid,\n                    $payment_method,\n                    $message,\n                    $transaction,\n                    $currency_special,\n                    $dont_touch_amount,\n                    $secure_key,\n                    $shop\n                );\n            }\n\n            if (count($transaction) > 0) {\n                /*var_dump($transaction);\n                die();*/\n\n                PayPalOrder::saveOrder((int) $this->currentOrder, $transaction);\n            }\n\n            $this->setPayPalAsConfigured();\n        }\n    }\n\n    protected function getGiftWrappingPrice()\n    {\n        if (version_compare(_PS_VERSION_, '1.5.3.0', '>=')) {\n            $wrapping_fees_tax_inc = $this->context->cart->getGiftWrappingPrice();\n        } else {\n            $wrapping_fees = (float) (Configuration::get('PS_GIFT_WRAPPING_PRICE'));\n            $wrapping_fees_tax = new Tax((int) (Configuration::get('PS_GIFT_WRAPPING_TAX')));\n            $wrapping_fees_tax_inc = $wrapping_fees * (1 + (((float) ($wrapping_fees_tax->rate) / 100)));\n        }\n\n        return (float) Tools::convertPrice($wrapping_fees_tax_inc, $this->context->currency);\n    }\n\n    public function redirectToConfirmation()\n    {\n        $shop_url = PayPal::getShopDomainSsl(true, true);\n\n        // Check if user went through the payment preparation detail and completed it\n        $detail = unserialize($this->context->cookie->express_checkout);\n\n        if (!empty($detail['payer_id']) && !empty($detail['token'])) {\n            $values = array('get_confirmation' => true);\n            $link = $shop_url._MODULE_DIR_.$this->name.'/express_checkout/payment.php';\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                Tools::redirectLink($link.'?'.http_build_query($values, '', '&'));\n            } else {\n                Tools::redirect(Context::getContext()->link->getModuleLink('paypal', 'confirm', $values));\n            }\n        }\n    }\n\n    /**\n     * Check if the current page use SSL connection on not\n     *\n     * @return bool uses SSL\n     */\n    public function usingSecureMode()\n    {\n        if (isset($_SERVER['HTTPS'])) {\n            return ($_SERVER['HTTPS'] == 1 || Tools::strtolower($_SERVER['HTTPS']) == 'on');\n        }\n\n        // $_SERVER['SSL'] exists only in some specific configuration\n        if (isset($_SERVER['SSL'])) {\n            return ($_SERVER['SSL'] == 1 || Tools::strtolower($_SERVER['SSL']) == 'on');\n        }\n\n        return false;\n    }\n\n    protected function getCurrentUrl()\n    {\n        $protocol_link = $this->usingSecureMode() ? 'https://' : 'http://';\n        $request = $_SERVER['REQUEST_URI'];\n        $pos = strpos($request, '?');\n\n        if (($pos !== false) && ($pos >= 0)) {\n            $request = Tools::substr($request, 0, $pos);\n        }\n\n        $params = urlencode($_SERVER['QUERY_STRING']);\n        if ($params) {\n            $url = $protocol_link.Tools::getShopDomainSsl().$request.'?'.$params;\n        } else {\n            $url = $protocol_link.Tools::getShopDomainSsl().$request;\n        }\n\n        return $url;\n    }\n\n    /**\n     * Use $this->comp instead of bccomp which is not added in all versions of PHP\n     * @param float $num1  number 1 to compare\n     * @param float $num2  number 2 to compare\n     * @param [type] $scale [description]\n     */\n    public function comp($num1, $num2, $scale = null)\n    {\n        // check if they're valid positive numbers, extract the whole numbers and decimals\n        if (!preg_match(\"/^\\+?(\\d+)(\\.\\d+)?$/\", $num1, $tmp1) || !preg_match(\"/^\\+?(\\d+)(\\.\\d+)?$/\", $num2, $tmp2)) {\n            return ('0');\n        }\n\n        // remove leading zeroes from whole numbers\n        $num1 = ltrim($tmp1[1], '0');\n        $num2 = ltrim($tmp2[1], '0');\n\n        // first, we can just check the lengths of the numbers, this can help save processing time\n        // if $num1 is longer than $num2, return 1.. vice versa with the next step.\n        if (Tools::strlen($num1) > Tools::strlen($num2)) {\n            return 1;\n        } else {\n            if (Tools::strlen($num1) < Tools::strlen($num2)) {\n                return -1;\n            } else {\n                // if the two numbers are of equal length, we check digit-by-digit\n\n                // remove ending zeroes from decimals and remove point\n                $dec1 = isset($tmp1[2]) ? rtrim(Tools::substr($tmp1[2], 1), '0') : '';\n                $dec2 = isset($tmp2[2]) ? rtrim(Tools::substr($tmp2[2], 1), '0') : '';\n\n                // if the user defined $scale, then make sure we use that only\n                if ($scale != null) {\n                    $dec1 = Tools::substr($dec1, 0, $scale);\n                    $dec2 = Tools::substr($dec2, 0, $scale);\n                }\n\n                // calculate the longest length of decimals\n                $d_len = max(Tools::strlen($dec1), Tools::strlen($dec2));\n\n                // append the padded decimals onto the end of the whole numbers\n                $num1 .= str_pad($dec1, $d_len, '0');\n                $num2 .= str_pad($dec2, $d_len, '0');\n\n                // check digit-by-digit, if they have a difference, return 1 or -1 (greater/lower than)\n                for ($i = 0; $i < Tools::strlen($num1); $i++) {\n                    if ((int) $num1{$i} > (int) $num2{$i}) {\n                        return 1;\n                    } elseif ((int) $num1{$i} < (int) $num2{$i}) {\n                        return -1;\n                    }\n                }\n                // if the two numbers have no difference (they're the same).. return 0\n                return 0;\n            }\n        }\n    }\n\n    public function assignCartSummary()\n    {\n        $currency = new Currency((int) $this->context->cart->id_currency);\n\n        $this->context->smarty->assign(array(\n            'total' => Tools::displayPrice($this->context->cart->getOrderTotal(true), $currency),\n            'logos' => $this->paypal_logos->getLogos(),\n            'use_mobile' => (bool) $this->useMobile(),\n            'address_shipping' => new Address($this->context->cart->id_address_delivery),\n            'address_billing' => new Address($this->context->cart->id_address_invoice),\n            'cart' => $this->context->cart,\n            'patternRules' => array('avoid' => array()),\n            'cart_image_size' => version_compare(_PS_VERSION_, '1.5', '<') ? 'small' : version_compare(_PS_VERSION_, '1.6', '<') ? ImageType::getFormatedName('small') : ImageType::getFormatedName('cart'),\n            'useStyle14' => version_compare(_PS_VERSION_, '1.5', '<'),\n            'useStyle15' => version_compare(_PS_VERSION_, '1.5', '>') && version_compare(_PS_VERSION_, '1.6', '<'),\n        ));\n\n        $this->context->smarty->assign(array(\n            'paypal_cart_summary' => $this->display(__FILE__, 'views/templates/hook/paypal_cart_summary.tpl'),\n        ));\n    }\n\n    public function set_good_context()\n    {\n        $account_braintree = Tools::jsonDecode(Configuration::get('PAYPAL_ACCOUNT_BRAINTREE'), true);\n        $currency = new Currency($this->context->cart->id_currency);\n        $this->context_modified = false;\n        $this->id_currency_origin_cart = $this->context->cart->id_currency;\n        $this->id_currency_origin_cookie = $this->context->cookie->id_currency;\n\n        return $account_braintree[$currency->iso_code];\n    }\n\n    public function reset_context()\n    {\n        if ($this->context_modified) {\n            $this->context->cart->id_currency = $this->id_currency_origin_cart;\n            $this->context->cookie->id_currency = $this->id_currency_origin_cookie;\n        }\n    }\n\n    // FOR PRESTASHOP 1.4\n    public function hookPDFInvoice($params)\n    {\n        return $this->hookDisplayPDFInvoice($params);\n    }\n\n    public function hookDisplayPDFInvoice($params)\n    {\n        $order_detail = PaypalPlusPui::getByIdOrder($params['object']->id_order);\n        $information = Tools::jsonDecode($order_detail['pui_informations'], true);\n        if ($information['recipient_banking_instruction']['bank_name']) {\n            $tab = '<table style=\"border: solid 1pt black; padding:0 10pt\">\n    <tr><td></td><td></td></tr>\n    <tr><td><b>'.$this->l('Bank name').'</b></td><td>'.$information['recipient_banking_instruction']['bank_name'].'</td></tr>\n    <tr><td><b>'.$this->l('Account holder name').'</b></td><td>'.$information['recipient_banking_instruction']['account_holder_name'].'</td></tr>\n    <tr><td><b>'.$this->l('IBAN').'</b></td><td>'.$information['recipient_banking_instruction']['international_bank_account_number'].'</td></tr>\n    <tr><td><b>'.$this->l('BIC').'</b></td><td>'.$information['recipient_banking_instruction']['bank_identifier_code'].'</td></tr>\n    <tr><td></td><td></td></tr>\n    <tr><td><b>'.$this->l('Amount due / currency').'</b></td><td>'.$information['amount']['value'].' '.$information['amount']['currency'].'</td></tr>\n    <tr><td><b>'.$this->l('Payment due date').'</b></td><td>'.$information['payment_due_date'].'</td></tr>\n    <tr><td><b>'.$this->l('reference').'</b></td><td>'.$information['reference_number'].'</td></tr>\n    <tr><td></td><td></td></tr>\n</table>';\n            return $tab;\n        }\n    }\n\n    public function hookActionBeforeCartUpdateQty($params)\n    {\n        if (isset($this->context->cookie->express_checkout)) {\n            //unset cookie of payment init if it's no more same cart\n            Context::getContext()->cookie->__unset('express_checkout');\n        }\n    }\n\n    public function setPsCheckoutMessageValue($value)\n    {\n        $notShowDetails = Configuration::get('PAYPAL_NOT_SHOW_PS_CHECKOUT');\n\n        if (is_string($notShowDetails)) {\n            try {\n                $notShowDetailsArray = json_decode($notShowDetails, true);\n                $notShowDetailsArray[$this->version] = $value;\n            } catch (Exception $e) {\n                $notShowDetailsArray = [$this->version => $value];\n            }\n        } else {\n            $notShowDetailsArray = [$this->version => $value];\n        }\n\n        return Configuration::updateValue('PAYPAL_NOT_SHOW_PS_CHECKOUT', json_encode($notShowDetailsArray));\n    }\n\n    public function showPsCheckoutMessage()\n    {\n        $countryDefault = new Country((int)\\Configuration::get('PS_COUNTRY_DEFAULT'), $this->context->language->id);\n        $notShowDetails = Configuration::get('PAYPAL_NOT_SHOW_PS_CHECKOUT');\n\n        if (is_string($notShowDetails)) {\n            try {\n                $notShowDetailsArray = json_decode($notShowDetails, true);\n                $notShowPsCheckout = isset($notShowDetailsArray[$this->version]) ? (bool)$notShowDetailsArray[$this->version] : false;\n            } catch (Exception $e) {\n                $notShowPsCheckout = false;\n            }\n        } else {\n            $notShowPsCheckout = false;\n        }\n\n        return in_array($countryDefault->iso_code, $this->psCheckoutCountry) && ($notShowPsCheckout == false);\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isShowInstallmentSetting()\n    {\n        $countryDefault = new Country((int)Configuration::get('PS_COUNTRY_DEFAULT'));\n\n        if (in_array(Tools::strtolower($countryDefault->iso_code), ConfigurationMap::getAllowedCountries())) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isShowInstallmentPopup()\n    {\n        $countryDefault = new Country((int)Configuration::get('PS_COUNTRY_DEFAULT', null, null, $this->context->shop->id));\n\n        if (Validate::isLoadedObject($countryDefault) === false) {\n            return false;\n        }\n\n        if (Tools::strtolower($countryDefault->iso_code) != 'fr') {\n            return false;\n        }\n\n        if (false == (int)Configuration::get('PAYPAL_SHOW_INSTALLMENT_POPUP', null, null, $this->context->shop->id)) {\n            return false;\n        }\n\n        Configuration::updateValue('PAYPAL_SHOW_INSTALLMENT_POPUP', 0, false, null, $this->context->shop->id);\n        return true;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n *\n *  2007-2021 PayPal\n *\n *  NOTICE OF LICENSE\n *\n *  This source file is subject to the Academic Free License (AFL 3.0)\n *  that is bundled with this package in the file LICENSE.txt.\n *  It is also available through the world-wide-web at this URL:\n *  http://opensource.org/licenses/afl-3.0.php\n *  If you did not receive a copy of the license and are unable to\n *  obtain it through the world-wide-web, please send an email\n *  to license@prestashop.com so we can send you a copy immediately.\n *\n *  DISCLAIMER\n *\n *  Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n *  versions in the future. If you wish to customize PrestaShop for your\n *  needs please refer to http://www.prestashop.com for more information.\n *\n *  @author 2007-2021 PayPal\n *  @author 202 ecommerce <tech@202-ecommerce.com>\n *  @copyright PayPal\n *  @license http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n *\n */\n\ninclude_once dirname(__FILE__).'/../../config/config.inc.php';\ninclude_once _PS_ROOT_DIR_.'/init.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal.php';\n\n/*\n * Instant payment notification class.\n * (wait for PayPal payment confirmation, then validate order)\n */\nclass PayPalIPN extends PayPal\n{\n\n    public function getIPNTransactionDetails($result)\n    {\n        if (is_array($result) || (strcmp(trim($result), \"VERIFIED\") === false)) {\n            $transaction_id = pSQL($result['txn_id']);\n\n            return array(\n                'id_transaction' => $transaction_id,\n                'transaction_id' => $transaction_id,\n                'id_invoice' => $result['invoice'],\n                'currency' => pSQL($result['mc_currency']),\n                'total_paid' => (float) $result['mc_gross'],\n                'shipping' => (float) $result['mc_shipping'],\n                'payment_date' => pSQL($result['payment_date']),\n                'payment_status' => pSQL($result['payment_status']),\n            );\n        } else {\n            $transaction_id = pSQL(Tools::getValue('txn_id'));\n\n            return array(\n                'id_transaction' => $transaction_id,\n                'transaction_id' => $transaction_id,\n                'id_invoice' => pSQL(Tools::getValue('invoice')),\n                'currency' => pSQL(Tools::getValue('mc_currency')),\n                'total_paid' => (float) Tools::getValue('mc_gross'),\n                'shipping' => (float) Tools::getValue('mc_shipping'),\n                'payment_date' => pSQL(Tools::getValue('payment_date')),\n                'payment_status' => pSQL(Tools::getValue('payment_status')),\n            );\n        }\n    }\n\n    public function confirmOrder($custom)\n    {\n        $result = $this->getResult();\n\n        $payment_status = Tools::getValue('payment_status');\n        $mc_gross = Tools::getValue('mc_gross');\n        $txn_id = Tools::getValue('txn_id');\n\n        $id_order = (int) Order::getOrderByCartId((int) $custom['id_cart']);\n        Context::getContext()->cart = new Cart((int) $custom['id_cart']);\n\n        $address = new Address((int) Context::getContext()->cart->id_address_invoice);\n        Context::getContext()->country = new Country((int) $address->id_country);\n        Context::getContext()->customer = new Customer((int) Context::getContext()->cart->id_customer);\n        Context::getContext()->language = new Language((int) Context::getContext()->cart->id_lang);\n        Context::getContext()->currency = new Currency((int) Context::getContext()->cart->id_currency);\n\n        if (isset(Context::getContext()->cart->id_shop)) {\n            Context::getContext()->shop = new Shop(Context::getContext()->cart->id_shop);\n        }\n\n        if (strcmp(trim($result), \"VERIFIED\") === false) {\n            $details = $this->getIPNTransactionDetails($result);\n\n            if ($id_order) {\n                $history = new OrderHistory();\n                $history->id_order = (int) $id_order;\n\n                PayPalOrder::updateOrder($id_order, $details);\n                $history->changeIdOrderState((int) Configuration::get('PS_OS_ERROR'), $history->id_order);\n\n                $history->addWithemail();\n                $history->save();\n            }\n        } elseif (strcmp(trim($result), \"VERIFIED\") === 0) {\n            $details = $this->getIPNTransactionDetails($result);\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                $shop = null;\n            } else {\n                $shop_id = Context::getContext()->shop->id;\n                $shop = new Shop($shop_id);\n            }\n\n            if ($id_order) {\n                $order = new Order((int) $id_order);\n                $values = $this->checkPayment($payment_status, $mc_gross, false);\n                if ((int) $order->current_state == (int) $values['payment_type']) {\n                    return;\n                }\n                $history = new OrderHistory();\n                $history->id_order = (int) $id_order;\n                if (PayPalOrder::getOrderById($id_order)) {\n                    PayPalOrder::updateOrder($id_order, $details);\n                } else {\n                    PayPalOrder::saveOrder($id_order, $details);\n                }\n                $history->changeIdOrderState($values['payment_type'], $history->id_order);\n\n                $history->addWithemail();\n                $history->save();\n                Db::getInstance()->update('order_payment', array(\n                    'transaction_id' => pSQL($details['transaction_id']),\n                ), 'order_reference = \"'.pSQL($order->reference).'\"');\n            } else {\n                $values = $this->checkPayment($payment_status, $mc_gross, true);\n                $customer = new Customer((int) Context::getContext()->cart->id_customer);\n                $this->validateOrder(Context::getContext()->cart->id, $values['payment_type'], $values['total_price'], $this->displayName, $values['message'], $details, Context::getContext()->cart->id_currency, false, $customer->secure_key, $shop);\n            }\n        }\n    }\n\n    public function checkPayment($payment_status, $mc_gross_not_rounded, $new_order = false)\n    {\n        $currency_decimals = is_array(Context::getContext()->currency) ? (int) Context::getContext()->currency['decimals'] : (int) Context::getContext()->currency->decimals;\n        $this->decimals = $currency_decimals * _PS_PRICE_DISPLAY_PRECISION_;\n\n        $mc_gross = Tools::ps_round($mc_gross_not_rounded, $this->decimals);\n\n        $cart_details = Context::getContext()->cart->getSummaryDetails(null, true);\n        $cart_hash = sha1(serialize(Context::getContext()->cart->nbProducts()));\n        $custom = Tools::jsonDecode(Tools::getValue('custom'), true);\n\n        $shipping = $cart_details['total_shipping_tax_exc'];\n        $subtotal = $cart_details['total_price_without_tax'] - $cart_details['total_shipping_tax_exc'];\n        $tax = $cart_details['total_tax'];\n\n        $total_price = Tools::ps_round($shipping + $subtotal + $tax, $this->decimals);\n\n        if (($new_order) && ($this->comp($mc_gross, $total_price, 2) !== 0)) {\n            $payment_type = (int) Configuration::get('PS_OS_ERROR');\n            $message = $this->l('Price paid on paypal is not the same that on PrestaShop.').'<br />';\n        } elseif (($new_order) && ($custom['hash'] != $cart_hash)) {\n            $payment_type = (int) Configuration::get('PS_OS_ERROR');\n            $message = $this->l('Cart changed, please retry.').'<br />';\n        } else {\n            return $this->getDetails($payment_status) + array(\n                'payment_status' => $payment_status,\n                'total_price' => $total_price,\n            );\n        }\n        return array(\n            'message' => $message,\n            'payment_type' => $payment_type,\n            'payment_status' => $payment_status,\n            'total_price' => $total_price,\n        );\n    }\n\n    public function getDetails($payment_status)\n    {\n        if ((bool) Configuration::get('PAYPAL_CAPTURE')) {\n            $payment_type = (int) Configuration::get('PS_OS_WS_PAYMENT');\n            $message = $this->l('Pending payment capture.').'<br />';\n        } else {\n            if (strcmp($payment_status, 'Completed') === 0) {\n                $payment_type = (int) Configuration::get('PS_OS_PAYMENT');\n                $message = $this->l('Payment accepted.').'<br />';\n            } elseif (strcmp($payment_status, 'Pending') === 0) {\n                $payment_type = (int) Configuration::get('PS_OS_PAYPAL');\n                $message = $this->l('Pending payment confirmation.').'<br />';\n            } elseif (strcmp($payment_status, 'Refunded') === 0) {\n                $payment_type = (int) Configuration::get('PS_OS_REFUND');\n                $message = $this->l('Payment refunded.').'<br />';\n            } else {\n                $payment_type = (int) Configuration::get('PS_OS_ERROR');\n                $message = $this->l('Cart changed, please retry.').'<br />';\n            }\n        }\n\n        return array(\n            'message' => $message,\n            'payment_type' => (int) $payment_type,\n        );\n    }\n\n    public function getResult()\n    {\n        if ((int) Configuration::get('PAYPAL_SANDBOX') == 1) {\n            $action_url = 'https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_notify-validate';\n        } else {\n            $action_url = 'https://www.paypal.com/cgi-bin/webscr?cmd=_notify-validate';\n        }\n\n        $request = '';\n        foreach ($_POST as $key => $value) {\n            $value = urlencode(Tools::stripslashes($value));\n            $request .= \"&$key=$value\";\n        }\n\n\n        $curl = curl_init();\n        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($curl, CURLOPT_URL, $action_url.$request);\n        curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 5);\n        curl_setopt($curl, CURLOPT_TIMEOUT, 5);\n        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);\n\n        $content = curl_exec($curl);\n        curl_close($curl);\n        return $content;\n    }\n}\n\nif (Tools::getValue('receiver_email') == Configuration::get('PAYPAL_BUSINESS_ACCOUNT')) {\n    if (Tools::getIsset('custom')) {\n        $ipn = new PayPalIPN();\n        $custom = Tools::jsonDecode(Tools::getValue('custom'), true);\n        $res = @fopen($custom['id_cart'].'.txt', 'x');\n        $seconds = 0;\n        if (!$res) {\n            while (file_exists($custom['id_cart'].'.txt')) {\n                sleep(1);\n                $seconds++;\n                if ($seconds >= 300) {\n                    @rename($custom['id_cart'].'.txt', date('YmdHis').'_'.$custom['id_cart'].'.txt');\n                }\n            }\n        }\n        $ipn->confirmOrder($custom);\n        if ($res) {\n            fclose($res);\n            unlink($custom['id_cart'].'.txt');\n        }\n    }\n} elseif (Tools::isSubmit('custom') && (int)Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS) {\n    $custom = Tools::jsonDecode(Tools::getValue('custom'), true);\n    Db::getInstance()->insert('paypal_hss_email_error', array('id_cart' => (int) $custom['id_cart'], 'email' => pSQL(Tools::getValue('receiver_email', ''))));\n}\n", "<?php\n/**\n *\n *  2007-2021 PayPal\n *\n *  NOTICE OF LICENSE\n *\n *  This source file is subject to the Academic Free License (AFL 3.0)\n *  that is bundled with this package in the file LICENSE.txt.\n *  It is also available through the world-wide-web at this URL:\n *  http://opensource.org/licenses/afl-3.0.php\n *  If you did not receive a copy of the license and are unable to\n *  obtain it through the world-wide-web, please send an email\n *  to license@prestashop.com so we can send you a copy immediately.\n *\n *  DISCLAIMER\n *\n *  Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n *  versions in the future. If you wish to customize PrestaShop for your\n *  needs please refer to http://www.prestashop.com for more information.\n *\n *  @author 2007-2021 PayPal\n *  @author 202 ecommerce <tech@202-ecommerce.com>\n *  @copyright PayPal\n *  @license http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)\n *\n */\n\nif (!defined('_PS_VERSION_')) {\n    exit;\n}\n\ninclude_once _PS_MODULE_DIR_.'paypal/api/paypal_lib.php';\ninclude_once _PS_MODULE_DIR_.'paypal/api/CallApiPaypalPlus.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_logos.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_orders.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_tools.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_login/paypal_login.php';\ninclude_once _PS_MODULE_DIR_.'paypal/paypal_login/PayPalLoginUser.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/PaypalCapture.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/AuthenticatePaymentMethods.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/PaypalPlusPui.php';\ninclude_once _PS_MODULE_DIR_.'paypal/classes/Braintree.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/InstallmentBanner/ConfigurationMap.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/InstallmentBanner/BannerManager.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/InstallmentBanner/Banner.php';\nrequire_once _PS_MODULE_DIR_.'paypal/express_checkout/ExpressCheckout.php';\nrequire_once _PS_MODULE_DIR_.'paypal/classes/Services/OrderPrice.php';\n\ndefine('WPS', 1); //Paypal Integral\ndefine('HSS', 2); //Paypal Integral Evolution\ndefine('ECS', 4); //Paypal Option +\ndefine('PPP', 5); //Paypal Plus\ndefine('PVZ', 6); //Braintree ONLY\n\n/* Tracking */\ndefine('TRACKING_INTEGRAL_EVOLUTION', 'FR_PRESTASHOP_H3S');\ndefine('TRACKING_INTEGRAL', 'PRESTASHOP_EC');\ndefine('TRACKING_OPTION_PLUS', 'PRESTASHOP_ECM');\ndefine('TRACKING_PAYPAL_PLUS', 'PrestaShop_Cart_PPP_16');\ndefine('PAYPAL_HSS_REDIRECTION', 0);\ndefine('PAYPAL_HSS_IFRAME', 1);\ndefine('TRACKING_EXPRESS_CHECKOUT_SEAMLESS', 'PrestaShopCEMEA_Cart_LIPP');\n\ndefine('TRACKING_CODE', 'FR_PRESTASHOP_H3S');\ndefine('SMARTPHONE_TRACKING_CODE', 'Prestashop_Cart_smartphone_EC');\ndefine('TABLET_TRACKING_CODE', 'Prestashop_Cart_tablet_EC');\n\n/* Traking APAC */\ndefine('APAC_TRACKING_INTEGRAL_EVOLUTION', 'PSAPAC_PRESTASHOP_H3S');\ndefine('APAC_TRACKING_INTEGRAL', 'PSAPAC_PRESTASHOP_EC');\ndefine('APAC_TRACKING_OPTION_PLUS', 'PSAPAC_PRESTASHOP_ECM');\ndefine('APAC_TRACKING_PAYPAL_PLUS', 'PSAPAC_PRESTASHOP_PPP');\ndefine('APAC_TRACKING_EXPRESS_CHECKOUT_SEAMLESS', 'PSAPAC_PRESTASHOP_LIPP');\n\ndefine('APAC_TRACKING_CODE', 'PSAPAC_PRESTASHOP_H3S');\ndefine('APAC_SMARTPHONE_TRACKING_CODE', 'PSAPAC_PRESTASHOP_MOB_EC');\ndefine('APAC_TABLET_TRACKING_CODE', 'PSAPAC_PRESTASHOP_TAB_EC');\n\ndefine('_PAYPAL_LOGO_XML_', 'logos.xml');\ndefine('_PAYPAL_MODULE_DIRNAME_', 'paypal');\ndefine('_PAYPAL_TRANSLATIONS_XML_', 'translations.xml');\n\nclass PayPal extends PaymentModule\n{\n\n    protected $_html = '';\n    public $_errors = array();\n    public $context;\n    public $iso_code;\n    public $default_country;\n    public $paypal_logos;\n    public $module_key = '336225a5988ad434b782f2d868d7bfcd';\n    public $psCheckoutCountry = ['FR', 'ES', 'IT', 'GB', 'PL', 'BE', 'NL', 'LU', 'US'];\n\n    const BACKWARD_REQUIREMENT = '0.4';\n    const ONLY_PRODUCTS = 1;\n    const ONLY_DISCOUNTS = 2;\n    const BOTH = 3;\n    const BOTH_WITHOUT_SHIPPING = 4;\n    const ONLY_SHIPPING = 5;\n    const ONLY_WRAPPING = 6;\n    const ONLY_PRODUCTS_WITHOUT_SHIPPING = 7;\n\n    public function __construct()\n    {\n        $this->name = 'paypal';\n        $this->tab = 'payments_gateways';\n        $this->version = '@version@';\n        $this->author = '202-ecommerce';\n        $this->is_eu_compatible = 1;\n        $this->ps_versions_compliancy = array('min' => '1.5', 'max' => '1.6');\n\n        $this->currencies = true;\n        $this->currencies_mode = 'radio';\n\n        parent::__construct();\n        $country = new Country(Configuration::get('PS_COUNTRY_DEFAULT'));\n        require_once realpath(dirname(__FILE__) .'/smarty/plugins') . '/modifier.paypalreplace.php';\n\n        if ($country->iso_code == 'FR') {\n            $this->description = $this->l('Benefit from PayPal\\'s complete payments platform and grow your business online, on mobile and internationally and discover a new payment experience with Braintree.Accept credit cards, debit cards and PayPal payments.');\n        } else {\n            $this->description = $this->l('Accepts payments by credit cards (CB, Visa, MasterCard, Amex, Aurore, Cofinoga, 4 stars) with PayPal.');\n        }\n        $this->displayName = $this->l('PayPal');\n        $this->confirmUninstall = $this->l('Are you sure you want to delete your details?');\n\n        $this->page = basename(__FILE__, '.php');\n\n        if (version_compare(_PS_VERSION_, '1.5', '<')) {\n            $mobile_enabled = (int) Configuration::get('PS_MOBILE_DEVICE');\n            require _PS_MODULE_DIR_.$this->name.'/backward_compatibility/backward.php';\n        } else {\n            $mobile_enabled = (int) Configuration::get('PS_ALLOW_MOBILE_DEVICE');\n        }\n\n        if (self::isInstalled($this->name)) {\n            $this->loadDefaults();\n            if ($mobile_enabled && $this->active) {\n                $this->checkMobileCredentials();\n            } elseif ($mobile_enabled && !$this->active) {\n                $this->checkMobileNeeds();\n            }\n        } else {\n            $this->checkMobileNeeds();\n        }\n\n        if (false == Validate::isLoadedObject($this->context->cart)) {\n            if (false == empty($this->context->cookie->id_cart)) {\n                $this->context->cart = new Cart((int)$this->context->cookie->id_cart);\n            }\n        }\n    }\n\n    public function install()\n    {\n        if (!parent::install()\n            || !$this->registerHook('payment')\n            || !$this->registerHook('paymentReturn')\n            || !$this->registerHook('shoppingCartExtra')\n            || !$this->registerHook('backBeforePayment')\n            || !$this->registerHook('rightColumn')\n            || !$this->registerHook('cancelProduct')\n            || !$this->registerHook('productFooter')\n            || !$this->registerHook('header')\n            || !$this->registerHook('adminOrder')\n            || !$this->registerHook('backOfficeHeader')\n            || !$this->registerHook('displayPDFInvoice')\n            || !$this->registerHook('actionBeforeCartUpdateQty')\n            || !$this->registerHook('actionOrderSlipAdd')\n            || !$this->registerHook('PDFInvoice')\n            || !$this->registerHook('displayTop')\n            || !$this->registerHook('displayProductButtons')\n            || !$this->registerHook('displayPaymentTop')) {\n            return false;\n        }\n\n        if ((_PS_VERSION_ >= '1.5') && (!$this->registerHook('displayMobileHeader')\n            || !$this->registerHook('displayMobileShoppingCartTop')\n            || !$this->registerHook('displayMobileAddToCartTop')\n            || !$this->registerHook('displayPaymentEU')\n            || !$this->registerHook('actionPSCleanerGetModulesTables')\n            || !$this->registerHook('actionOrderStatusPostUpdate')\n            || !$this->registerHook('displayOrderConfirmation')\n            )) {\n            return false;\n        }\n\n        include_once _PS_MODULE_DIR_.$this->name.'/paypal_install.php';\n        $paypal_install = new PayPalInstall();\n        $paypal_install->createTables();\n        $paypal_install->updateConfiguration($this->version);\n        $paypal_install->createOrderState();\n\n        $paypal_tools = new PayPalTools($this->name);\n        $paypal_tools->moveTopPayments(1);\n        $paypal_tools->moveRightColumn(3);\n        $this->installTab();\n\n        $this->runUpgrades(true);\n\n        return true;\n    }\n\n    public function installTab()\n    {\n        $tab = Tab::getInstanceFromClassName('AdminPaypalAjaxHandler');\n\n        if (Validate::isLoadedObject($tab)) {\n            return true;\n        }\n\n        $tab->active = false;\n        $tab->class_name = 'AdminPaypalAjaxHandler';\n        $tab->name = array();\n\n        foreach (Language::getLanguages() as $lang) {\n            $tab->name[$lang['id_lang']] = 'Paypal Ajax Handler';\n        }\n\n        $tab->id_parent = 0;\n        $tab->module = $this->name;\n\n        return $tab->save();\n    }\n\n    public function uninstallTab()\n    {\n        $tab = Tab::getInstanceFromClassName('AdminPaypalAjaxHandler');\n\n        if (Validate::isLoadedObject($tab) == false) {\n            return true;\n        }\n\n        return $tab->delete();\n    }\n\n    public function uninstall()\n    {\n        include_once _PS_MODULE_DIR_.$this->name.'/paypal_install.php';\n        $paypal_install = new PayPalInstall();\n        $paypal_install->deleteConfiguration();\n        $this->uninstallTab();\n\n        return parent::uninstall();\n    }\n\n    /**\n     * Launch upgrade process\n     */\n    public function runUpgrades($install = false)\n    {\n        if (version_compare(_PS_VERSION_, '1.5', '<')) {\n            foreach (array('2.8', '3.0', '3.7', '3.8.3', '3.9', '3.10.1', '3.10.4','3.10.10') as $version) {\n                $file = dirname(__FILE__).'/upgrade/install-'.$version.'.php';\n                if (version_compare(Configuration::get('PAYPAL_VERSION'), $version, '<') && file_exists($file)) {\n                    include_once $file;\n                    call_user_func('upgrade_module_'.str_replace('.', '_', $version), $this, $install);\n                }\n            }\n        }\n    }\n\n    private function compatibilityCheck()\n    {\n        if (file_exists(_PS_MODULE_DIR_.'paypalapi/paypalapi.php') && $this->active) {\n            $this->warning = $this->l('All features of Paypal API module are included in the new Paypal module. In order to do not have any conflict, please do not use and remove PayPalAPI module.').'<br />';\n        }\n\n        /* For 1.4.3 and less compatibility */\n        $update_config = array('PS_OS_CHEQUE' => 1, 'PS_OS_PAYMENT' => 2, 'PS_OS_PREPARATION' => 3,\n            'PS_OS_SHIPPING' => 4,\n            'PS_OS_DELIVERED' => 5, 'PS_OS_CANCELED' => 6, 'PS_OS_REFUND' => 7, 'PS_OS_ERROR' => 8,\n            'PS_OS_OUTOFSTOCK' => 9,\n            'PS_OS_BANKWIRE' => 10, 'PS_OS_PAYPAL' => 11, 'PS_OS_WS_PAYMENT' => 12);\n\n        foreach ($update_config as $key => $value) {\n            if (!Configuration::get($key) || (int) Configuration::get($key) < 1) {\n                if (defined('_'.$key.'_') && (int) constant('_'.$key.'_')\n                    > 0) {\n                    Configuration::updateValue($key, constant('_'.$key.'_'));\n                } else {\n                    Configuration::updateValue($key, $value);\n                }\n            }\n        }\n    }\n\n    public function isPayPalAPIAvailable()\n    {\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (($payment_method == WPS || $payment_method == ECS) && (!is_null(Configuration::get('PAYPAL_API_USER'))\n            && !is_null(Configuration::get('PAYPAL_API_PASSWORD')) && !is_null(Configuration::get('PAYPAL_API_SIGNATURE')))) {\n            return true;\n        }\n\n        if ($payment_method == PPP && (!is_null(Configuration::get('PAYPAL_PLUS_CLIENT_ID'))\n            || !is_null(Configuration::get('PAYPAL_PLUS_SECRET')))) {\n            return true;\n        }\n\n        if ($payment_method == HSS && !is_null(Configuration::get('PAYPAL_BUSINESS_ACCOUNT'))) {\n            return true;\n        }\n\n        if ($payment_method == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Initialize default values\n     */\n    protected function loadDefaults()\n    {\n        $this->paypal_logos = new PayPalLogos(Tools::strtoupper($this->context->language->iso_code));\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n        $order_process_type = (int) Configuration::get('PS_ORDER_PROCESS_TYPE');\n\n        if (Tools::getValue('paypal_ec_canceled') || $this->context->cart === false) {\n            unset($this->context->cookie->express_checkout);\n        }\n\n        if (version_compare(_PS_VERSION_, '1.5.0.2', '>=')) {\n            $version = Db::getInstance()->getValue('SELECT version FROM `'._DB_PREFIX_.'module` WHERE name = \\''.pSQL($this->name).'\\'');\n            if (empty($version) === true) {\n                Db::getInstance()->execute('\n                    UPDATE `'._DB_PREFIX_.'module` m\n                    SET m.version = \\''.bqSQL($this->version).'\\'\n                    WHERE m.name = \\''.bqSQL($this->name).'\\'');\n            }\n        }\n\n        if (defined('_PS_ADMIN_DIR_')) {\n            /* Backward compatibility */\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                $this->backwardCompatibilityChecks();\n            }\n\n            /* Upgrade and compatibility checks */\n            $this->runUpgrades();\n            $this->compatibilityCheck();\n            $this->warningsCheck();\n        } else {\n            if (isset($this->context->cookie->express_checkout)) {\n                $this->context->smarty->assign('paypal_authorization', true);\n            }\n\n            $isECS = false;\n            if (isset($this->context->cookie->express_checkout)) {\n                $cookie_ECS = unserialize($this->context->cookie->express_checkout);\n                if (isset($cookie_ECS['token']) && isset($cookie_ECS['payer_id'])) {\n                    $isECS = true;\n                }\n            }\n\n            if (($order_process_type == 1) && ((int) $payment_method == HSS)) {\n                $this->context->smarty->assign('paypal_order_opc', true);\n            } elseif (($order_process_type == 1) && ((bool) Tools::getValue('isPaymentStep') == true || $isECS)) {\n                $shop_url = PayPal::getShopDomainSsl(true, true);\n                if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                    $link = $shop_url._MODULE_DIR_.$this->name.'/express_checkout/payment.php';\n                    $this->context->smarty->assign(\n                        'paypal_confirmation',\n                        $link.'?'.http_build_query(array('get_confirmation' => true), '', '&')\n                    );\n                } else {\n                    $values = array('fc' => 'module', 'module' => 'paypal', 'controller' => 'confirm',\n                        'get_confirmation' => true);\n                    $this->context->smarty->assign('paypal_confirmation', $shop_url.__PS_BASE_URI__.'?'.http_build_query($values));\n                }\n            }\n        }\n    }\n\n    protected function checkMobileCredentials()\n    {\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (((int) $payment_method == HSS) && (\n            (!(bool) Configuration::get('PAYPAL_API_USER')) &&\n            (!(bool) Configuration::get('PAYPAL_API_PASSWORD')) &&\n            (!(bool) Configuration::get('PAYPAL_API_SIGNATURE')))) {\n            $this->warning .= $this->l('You must set your PayPal Integral credentials in order to have the mobile theme work correctly.').'<br />';\n        }\n    }\n\n    protected function checkMobileNeeds()\n    {\n        $iso_code = Country::getIsoById((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n        $paypal_countries = array('ES', 'FR', 'PL', 'IT');\n\n        if (method_exists($this->context->shop, 'getTheme')) {\n            if (($this->context->shop->getTheme() == 'default') && in_array($iso_code, $paypal_countries)) {\n                $this->warning .= $this->l('The mobile theme only works with the PayPal\\'s payment module at this time. Please activate the module to enable payments.').'<br />';\n            }\n        } else {\n            $this->warning .= $this->l('In order to use the module you need to install the backward compatibility.').'<br />';\n        }\n    }\n\n    /* Check status of backward compatibility module */\n\n    protected function backwardCompatibilityChecks()\n    {\n        if (Module::isInstalled('backwardcompatibility')) {\n            $backward_module = Module::getInstanceByName('backwardcompatibility');\n            if (!$backward_module->active) {\n                $this->warning .= $this->l('To work properly the module requires the backward compatibility module enabled').'<br />';\n            } elseif ($backward_module->version < PayPal::BACKWARD_REQUIREMENT) {\n                $this->warning .= $this->l('To work properly the module requires at least the backward compatibility module v').PayPal::BACKWARD_REQUIREMENT.'.<br />';\n            }\n        } else {\n            $this->warning .= $this->l('In order to use the module you need to install the backward compatibility.').'<br />';\n        }\n    }\n\n    public static function countryIso2to3($iso2)\n    {\n        //ISO 3166-1 alpha-2 -> alpha-3 correspondence array\n        $iso2to3 = array(\n          'AW' => 'ABW',\n          'AO' => 'AGO',\n          'AI' => 'AIA',\n          'AX' => 'ALA',\n          'AL' => 'ALB',\n          'AD' => 'AND',\n          'AN' => 'ANT',\n          'AE' => 'ARE',\n          'AR' => 'ARG',\n          'AM' => 'ARM',\n          'AS' => 'ASM',\n          'AQ' => 'ATA',\n          'TF' => 'ATF',\n          'AG' => 'ATG',\n          'AU' => 'AUS',\n          'AT' => 'AUT',\n          'AZ' => 'AZE',\n          'BI' => 'BDI',\n          'BE' => 'BEL',\n          'BJ' => 'BEN',\n          'BF' => 'BFA',\n          'BD' => 'BGD',\n          'BG' => 'BGR',\n          'BH' => 'BHR',\n          'BS' => 'BHS',\n          'BA' => 'BIH',\n          'BL' => 'BLM',\n          'BY' => 'BLR',\n          'BZ' => 'BLZ',\n          'BM' => 'BMU',\n          'BO' => 'BOL',\n          'BR' => 'BRA',\n          'BB' => 'BRB',\n          'BN' => 'BRN',\n          'BT' => 'BTN',\n          'BV' => 'BVT',\n          'BW' => 'BWA',\n          'CF' => 'CAF',\n          'CA' => 'CAN',\n          'CC' => 'CCK',\n          'CH' => 'CHE',\n          'CL' => 'CHL',\n          'CN' => 'CHN',\n          'CI' => 'CIV',\n          'CM' => 'CMR',\n          'CD' => 'COD',\n          'CG' => 'COG',\n          'CK' => 'COK',\n          'CO' => 'COL',\n          'KM' => 'COM',\n          'CV' => 'CPV',\n          'CR' => 'CRI',\n          'CU' => 'CUB',\n          'CX' => 'CXR',\n          'KY' => 'CYM',\n          'CY' => 'CYP',\n          'CZ' => 'CZE',\n          'DE' => 'DEU',\n          'DJ' => 'DJI',\n          'DM' => 'DMA',\n          'DK' => 'DNK',\n          'DO' => 'DOM',\n          'DZ' => 'DZA',\n          'EC' => 'ECU',\n          'EG' => 'EGY',\n          'ER' => 'ERI',\n          'EH' => 'ESH',\n          'ES' => 'ESP',\n          'EE' => 'EST',\n          'ET' => 'ETH',\n          'FI' => 'FIN',\n          'FJ' => 'FJI',\n          'FK' => 'FLK',\n          'FR' => 'FRA',\n          'FO' => 'FRO',\n          'FM' => 'FSM',\n          'GA' => 'GAB',\n          'GB' => 'GBR',\n          'GE' => 'GEO',\n          'GG' => 'GGY',\n          'GH' => 'GHA',\n          'GI' => 'GIB',\n          'GN' => 'GIN',\n          'GP' => 'GLP',\n          'GM' => 'GMB',\n          'GW' => 'GNB',\n          'GQ' => 'GNQ',\n          'GR' => 'GRC',\n          'GD' => 'GRD',\n          'GL' => 'GRL',\n          'GT' => 'GTM',\n          'GF' => 'GUF',\n          'GU' => 'GUM',\n          'GY' => 'GUY',\n          'HK' => 'HKG',\n          'HM' => 'HMD',\n          'HN' => 'HND',\n          'HR' => 'HRV',\n          'HT' => 'HTI',\n          'HU' => 'HUN',\n          'ID' => 'IDN',\n          'IM' => 'IMN',\n          'IN' => 'IND',\n          'IO' => 'IOT',\n          'IE' => 'IRL',\n          'IR' => 'IRN',\n          'IQ' => 'IRQ',\n          'IS' => 'ISL',\n          'IL' => 'ISR',\n          'IT' => 'ITA',\n          'JM' => 'JAM',\n          'JE' => 'JEY',\n          'JO' => 'JOR',\n          'JP' => 'JPN',\n          'KZ' => 'KAZ',\n          'KE' => 'KEN',\n          'KG' => 'KGZ',\n          'KH' => 'KHM',\n          'KI' => 'KIR',\n          'KN' => 'KNA',\n          'KR' => 'KOR',\n          'KW' => 'KWT',\n          'LA' => 'LAO',\n          'LB' => 'LBN',\n          'LR' => 'LBR',\n          'LY' => 'LBY',\n          'LC' => 'LCA',\n          'LI' => 'LIE',\n          'LK' => 'LKA',\n          'LS' => 'LSO',\n          'LT' => 'LTU',\n          'LU' => 'LUX',\n          'LV' => 'LVA',\n          'MO' => 'MAC',\n          'MF' => 'MAF',\n          'MA' => 'MAR',\n          'MC' => 'MCO',\n          'MD' => 'MDA',\n          'MG' => 'MDG',\n          'MV' => 'MDV',\n          'MX' => 'MEX',\n          'MH' => 'MHL',\n          'MK' => 'MKD',\n          'ML' => 'MLI',\n          'MT' => 'MLT',\n          'MM' => 'MMR',\n          'ME' => 'MNE',\n          'MN' => 'MNG',\n          'MP' => 'MNP',\n          'MZ' => 'MOZ',\n          'MR' => 'MRT',\n          'MS' => 'MSR',\n          'MQ' => 'MTQ',\n          'MU' => 'MUS',\n          'MW' => 'MWI',\n          'MY' => 'MYS',\n          'YT' => 'MYT',\n          'NC' => 'NCL',\n          'NE' => 'NER',\n          'NF' => 'NFK',\n          'NG' => 'NGA',\n          'NI' => 'NIC',\n          'NU' => 'NIU',\n          'NL' => 'NLD',\n          'NO' => 'NOR',\n          'NP' => 'NPL',\n          'NR' => 'NRU',\n          'NZ' => 'NZL',\n          'OM' => 'OMN',\n          'PK' => 'PAK',\n          'PA' => 'PAN',\n          'PN' => 'PCN',\n          'PE' => 'PER',\n          'PH' => 'PHL',\n          'PW' => 'PLW',\n          'PG' => 'PNG',\n          'PL' => 'POL',\n          'PR' => 'PRI',\n          'KP' => 'PRK',\n          'PT' => 'PRT',\n          'PY' => 'PRY',\n          'PS' => 'PSE',\n          'PF' => 'PYF',\n          'QA' => 'QAT',\n          'RE' => 'REU',\n          'RO' => 'ROU',\n          'RU' => 'RUS',\n          'RW' => 'RWA',\n          'SA' => 'SAU',\n          'SD' => 'SDN',\n          'SN' => 'SEN',\n          'SG' => 'SGP',\n          'GS' => 'SGS',\n          'SH' => 'SHN',\n          'SJ' => 'SJM',\n          'SB' => 'SLB',\n          'SL' => 'SLE',\n          'SV' => 'SLV',\n          'SM' => 'SMR',\n          'SO' => 'SOM',\n          'PM' => 'SPM',\n          'RS' => 'SRB',\n          'SS' => 'SSD',\n          'ST' => 'STP',\n          'SR' => 'SUR',\n          'SK' => 'SVK',\n          'SI' => 'SVN',\n          'SE' => 'SWE',\n          'SZ' => 'SWZ',\n          'SC' => 'SYC',\n          'SY' => 'SYR',\n          'TC' => 'TCA',\n          'TD' => 'TCD',\n          'TG' => 'TGO',\n          'TH' => 'THA',\n          'TJ' => 'TJK',\n          'TK' => 'TKL',\n          'TM' => 'TKM',\n          'TL' => 'TLS',\n          'TO' => 'TON',\n          'TT' => 'TTO',\n          'TN' => 'TUN',\n          'TR' => 'TUR',\n          'TV' => 'TUV',\n          'TW' => 'TWN',\n          'TZ' => 'TZA',\n          'UG' => 'UGA',\n          'UA' => 'UKR',\n          'UM' => 'UMI',\n          'UY' => 'URY',\n          'US' => 'USA',\n          'UZ' => 'UZB',\n          'VA' => 'VAT',\n          'VC' => 'VCT',\n          'VE' => 'VEN',\n          'VG' => 'VGB',\n          'VI' => 'VIR',\n          'VN' => 'VNM',\n          'VU' => 'VUT',\n          'WF' => 'WLF',\n          'WS' => 'WSM',\n          'YE' => 'YEM',\n          'ZA' => 'ZAF',\n          'ZM' => 'ZMB',\n          'ZW' => 'ZWE'\n        );\n\n        return $iso2to3[$iso2];\n    }\n\n    protected function wpsIsConfigured()\n    {\n        return Configuration::get('PAYPAL_API_USER') &&\n            Configuration::get('PAYPAL_API_PASSWORD') &&\n            Configuration::get('PAYPAL_API_SIGNATURE');\n    }\n\n    public function getContent()\n    {\n        if (Configuration::get('PS_SSL_ENABLED') && Configuration::get('PS_SSL_ENABLED_EVERYWHERE') && Tools::usingSecureMode() == false) {\n            Tools::redirect('https://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI']);\n        }\n\n        if (Tools::getIsset('BRAINTREE_ENABLED')) {\n            Configuration::updateValue('VZERO_ENABLED', 1);\n        }\n\n        $output = $this->_postProcess();\n\n        $braintree_message = '';\n        $braintree_style = '';\n        if (version_compare(phpversion(), '5.4', '<')) {\n            if (version_compare(_PS_VERSION_, '1.6.1', '>=')) {\n                $output = $this->displayWarning($this->l('Your server is not compatible with PayPal module upcoming release. Please contact your hosting company in order to upgrade PHP version to at least version 5.4 or latest.'));\n            } else {\n                $output = $this->displayError($this->l('Your server is not compatible with PayPal module upcoming release. Please contact your hosting company in order to upgrade PHP version to at least version 5.4 or latest.'));\n            }\n        }\n\n        if (!Tools::isSubmit('submitButton') && Tools::getIsset('accessToken') && Tools::getIsset('expiresAt') && Tools::getIsset('refreshToken')) {\n            $output = $this->displayConfirmation((Configuration::get('PAYPAL_SANDBOX')?$this->l('Your Braintree account is now configured in sandbox mode. You can sell on Euro only. If you have problems, you can join Braintree support on 08 05 54 27 14'):$this->l('Your Braintree account is now configured in live mode. If you have problems, you can join Braintree support on 08 05 54 27 14') ));\n        }\n\n        if (!Tools::isSubmit('submitButton') && Tools::getValue('error')) {\n            $output = $this->displayError($this->l('Braintree is not configured. If you have problems, you can join Braintree support on 08 05 54 27 14'));\n\n            $braintree_message = $this->l('Braintree is not configured. If you have problems, you can join Braintree support on 08 05 54 27 14');\n            $braintree_style = 'color:#dc143c;';\n        }\n\n        // Check if all Braintree credentials are present\n        $prestaBraintree = new PrestaBraintree();\n        $braintree_configured = (bool)$prestaBraintree->isConfigured();\n\n        $admin_dir = explode('/', _PS_ADMIN_DIR_);\n\n        $braintree_redirect_url = _PS_BASE_URL_.__PS_BASE_URI__. $admin_dir[ ( count($admin_dir) - 1 ) ] .'/index.php?controller=AdminModules&tab_module=payments_gateways&configure='.$this->name.'&module_name='.$this->name.'&token='.Tools::getAdminTokenLite('AdminModules');\n\n        if (($id_lang = Language::getIdByIso('EN')) == 0) {\n            $english_language_id = (int) $this->context->employee->id_lang;\n        } else {\n            $english_language_id = (int) $id_lang;\n        }\n\n        $this->context->smarty->assign(array(\n            'PayPal_WPS' => (int) WPS,\n            'PayPal_HSS' => (int) HSS,\n            'PayPal_PPP' => (int) PPP,\n            'PayPal_PVZ' => (int) PVZ,\n            'PayPal_ECS' => (int) ECS,\n            'PP_errors' => $this->_errors,\n            'PayPal_WPS_is_configured' => $this->wpsIsConfigured(),\n            'PayPal_logo' => $this->paypal_logos->getLogos(),\n            'PayPal_allowed_methods' => $this->getPaymentMethods(),\n            'PayPal_country' => Country::getNameById((int) $english_language_id, (int) $this->default_country),\n            'PayPal_country_id' => (int) $this->default_country,\n            'PayPal_business' => Configuration::get('PAYPAL_BUSINESS'),\n            'PayPal_payment_method' => (int) Configuration::get('PAYPAL_PAYMENT_METHOD'),\n            'PayPal_api_username' => Configuration::get('PAYPAL_API_USER'),\n            'PayPal_api_password' => Configuration::get('PAYPAL_API_PASSWORD'),\n            'PayPal_api_signature' => Configuration::get('PAYPAL_API_SIGNATURE'),\n            'PayPal_api_business_account' => Configuration::get('PAYPAL_BUSINESS_ACCOUNT'),\n            'PayPal_express_checkout_shortcut' => (int) Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT'),\n            'PayPal_in_context_checkout' => (int) Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),\n            'use_paypal_in_context' => (int) $this->useInContextCheckout(),\n            'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID'),\n            'PayPal_sandbox_mode' => (int) Configuration::get('PAYPAL_SANDBOX'),\n            'PayPal_payment_capture' => (int) Configuration::get('PAYPAL_CAPTURE'),\n            'PayPal_country_default' => (int) $this->default_country,\n            'PayPal_change_country_url' => 'index.php?tab=AdminCountries&token='.Tools::getAdminTokenLite('AdminCountries').'#footer',\n            'Countries' => Country::getCountries($english_language_id),\n            'One_Page_Checkout' => (int) Configuration::get('PS_ORDER_PROCESS_TYPE'),\n            'PayPal_integral_evolution_template' => Configuration::get('PAYPAL_HSS_TEMPLATE'),\n            'PayPal_integral_evolution_solution' => Configuration::get('PAYPAL_HSS_SOLUTION'),\n            'PayPal_login' => (int) Configuration::get('PAYPAL_LOGIN'),\n            'PayPal_login_tpl' => (int) Configuration::get('PAYPAL_LOGIN_TPL'),\n            'default_lang_iso' => Language::getIsoById($this->context->employee->id_lang),\n            'PayPal_plus_client' => Configuration::get('PAYPAL_PLUS_CLIENT_ID'),\n            'PayPal_plus_secret' => Configuration::get('PAYPAL_PLUS_SECRET'),\n            'PayPal_plus_webprofile' => (Configuration::get('PAYPAL_WEB_PROFILE_ID') != '0') ? Configuration::get('PAYPAL_WEB_PROFILE_ID') : 0,\n            //'PayPal_version_tls_checked' => $tls_version,\n            'Presta_version' => _PS_VERSION_,\n            'Currencies' => Currency::getCurrencies(),\n            'PayPal_account_braintree' => (array) Tools::jsonDecode(Configuration::get('PAYPAL_ACCOUNT_BRAINTREE')),\n            'Currency_default'=> Configuration::get('PS_CURRENCY_DEFAULT'),\n            //*TO DELETE* 'PayPal_braintree_public_key'=> Configuration::get('PAYPAL_BRAINTREE_PUBLIC_KEY'),\n            //*TO DELETE* 'PayPal_braintree_private_key'=> Configuration::get('PAYPAL_BRAINTREE_PRIVATE_KEY'),\n            'PayPal_braintree_merchant_id'=> Configuration::get('PAYPAL_BRAINTREE_MERCHANT_ID'),\n            'PayPal_check3Dsecure'=> Configuration::get('PAYPAL_USE_3D_SECURE'),\n            'PayPal_braintree_enabled'=> Configuration::get('PAYPAL_BRAINTREE_ENABLED'),\n            // Pour le bouton Braintree\n            'User_Country' => PayPal::countryIso2to3(Context::getContext()->country->iso_code),\n            'User_Mail' => Context::getContext()->employee->email,\n            'Business_Name' => Configuration::get('PS_SHOP_NAME'),\n            'Business_Country' => PayPal::countryIso2to3(Context::getContext()->country->iso_code),\n            'Braintree_Redirect_Url' => $braintree_redirect_url,\n            'Braintree_Configured' => $braintree_configured,\n            'Braintree_Message' => $braintree_message,\n            'Braintree_Style' => $braintree_style,\n            'Braintree_Access_Token' => Configuration::get('PAYPAL_BRAINTREE_ACCESS_TOKEN'),\n            'Braintree_Refresh_Token' => Configuration::get('PAYPAL_BRAINTREE_REFRESH_TOKEN'),\n            'Braintree_Expires_At' => strtotime(Configuration::get('PAYPAL_BRAINTREE_EXPIRES_AT')),\n            'ps_ssl_active' => Configuration::get('PS_SSL_ENABLED'),\n            'tls_link_ajax' => $this->context->link->getModuleLink($this->name, 'tlscurltest', array('ajax'=>1)),\n            'paypal_braintree_pub_key_live' => Configuration::get('PAYPAL_BRAINTREE_PUB_KEY_LIVE'),\n            'paypal_braintree_priv_key_live' => Configuration::get('PAYPAL_BRAINTREE_PRIV_KEY_LIVE'),\n            'paypal_braintree_merchant_id_live' => Configuration::get('PAYPAL_BRAINTREE_MERCHANT_ID_LIVE'),\n            'paypal_braintree_pub_key_sandbox' => Configuration::get('PAYPAL_BRAINTREE_PUB_KEY_SANDBOX'),\n            'paypal_braintree_priv_key_sandbox' => Configuration::get('PAYPAL_BRAINTREE_PRIV_KEY_SANDBOX'),\n            'paypal_braintree_merchant_id_sandbox' => Configuration::get('PAYPAL_BRAINTREE_MERCHANT_ID_SANDBOX'),\n            'showWarningForBraintreeUsers' => $prestaBraintree->useToken() && Configuration::get('PAYPAL_BRAINTREE_ACCESS_TOKEN'),\n            'showPsCheckoutInfo' => $this->showPsCheckoutMessage(),\n            'moduleDir' => _MODULE_DIR_ . $this->name,\n            'activeNavTab' => Tools::isSubmit('installmentSettingForm') ? '[paypal-nav-bar] li[tab-content=\"payment4x\"]' : '[paypal-nav-bar] li[tab-content=\"general\"]'\n        ));\n\n        // Tpl vars for Paypal installment banner. Start\n        $banner = new Banner();\n        $isoCountryDefault = Tools::strtolower(Country::getIsoById(Configuration::get('PS_COUNTRY_DEFAULT')));\n        $installmentColorOptions = [\n            ConfigurationMap::COLOR_GRAY => $this->l('gray'),\n            ConfigurationMap::COLOR_BLUE => $this->l('blue'),\n            ConfigurationMap::COLOR_BLACK => $this->l('black'),\n            ConfigurationMap::COLOR_WHITE => $this->l('white')\n        ];\n\n        if (false === ($isoCountryDefault === 'de')) {\n            $installmentColorOptions[ConfigurationMap::COLOR_MONOCHROME] = $this->l('monochrome');\n            $installmentColorOptions[ConfigurationMap::COLOR_GRAYSCALE] = $this->l('grayscale');\n        }\n\n        $this->context->smarty->assign([\n            ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT => Configuration::get(ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT),\n            ConfigurationMap::ENABLE_INSTALLMENT => Configuration::get(ConfigurationMap::ENABLE_INSTALLMENT),\n            ConfigurationMap::COLOR => Configuration::get(ConfigurationMap::COLOR),\n            'installmentColorOptions' => $installmentColorOptions,\n            ConfigurationMap::HOME_PAGE => Configuration::get(ConfigurationMap::HOME_PAGE),\n            ConfigurationMap::CATEGORY_PAGE => Configuration::get(ConfigurationMap::CATEGORY_PAGE),\n            ConfigurationMap::PRODUCT_PAGE => Configuration::get(ConfigurationMap::PRODUCT_PAGE),\n            ConfigurationMap::CART_PAGE => Configuration::get(ConfigurationMap::CART_PAGE),\n            ConfigurationMap::CHECKOUT_PAGE => Configuration::get(ConfigurationMap::CHECKOUT_PAGE),\n            ConfigurationMap::CLIENT_ID => ConfigurationMap::getClientId(),\n            'paypalInstallmentBanner' => $banner->render(),\n            'showInstallmentPopup' => $this->isShowInstallmentPopup(),\n            'showInstallmentSetting' => $this->isShowInstallmentSetting(),\n            'isoCountryDefault' => $isoCountryDefault\n        ]);\n\n        // Tpl vars for Paypal installment banner. End\n\n        MediaCore::addJsDef([\n            'ajaxHandler' => $this->context->link->getAdminLink('AdminPaypalAjaxHandler')\n        ]);\n\n        if ((int)Configuration::get('PAYPAL_PAYMENT_METHOD') === HSS) {\n            $hss_errors = Db::getInstance()->executeS('SELECT * FROM `'._DB_PREFIX_.'paypal_hss_email_error`');\n            $this->context->smarty->assign(array(\n                'hss_errors' => $hss_errors\n            ));\n        }\n\n        $this->getTranslations();\n\n        $output .= $this->fetchTemplate('/views/templates/admin/back_office.tpl');\n\n        if ($this->active == false) {\n            return $output.$this->hookBackOfficeHeader();\n        }\n\n        return $output;\n    }\n\n    /**\n     * Hooks methods\n     */\n    public function hookHeader($params)\n    {\n        $id_hook = (int) Configuration::get('PS_MOBILE_HOOK_HEADER_ID');\n        if ($id_hook > 0) {\n            $module = Hook::getModulesFromHook($id_hook, $this->id);\n            if (!$module) {\n                $this->registerHook('displayMobileHeader');\n            }\n        }\n\n\n        if (isset($this->context->cart) && $this->context->cart->id) {\n            $this->context->smarty->assign('id_cart', (int) $this->context->cart->id);\n        }\n\n\n\n        /* Added for PrestaBox */\n        if (method_exists($this->context->controller, 'addCSS')) {\n            $this->context->controller->addCSS(_MODULE_DIR_.$this->name.'/views/css/paypal.css');\n        } else {\n            Tools::addCSS(_MODULE_DIR_.$this->name.'/views/css/paypal.css');\n        }\n\n        $smarty = $this->context->smarty;\n        $smarty->assign(array(\n            'ssl_enabled' => Configuration::get('PS_SSL_ENABLED'),\n            'PAYPAL_SANDBOX' => Configuration::get('PAYPAL_SANDBOX'),\n            'PayPal_in_context_checkout' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),\n            'use_paypal_in_context' => (int) $this->useInContextCheckout(),\n            'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID'),\n            'paypal_mode' => Configuration::get('PAYPAL_SANDBOX') ? \"sandbox\" : \"production\",\n        ));\n        $process = '<script defer type=\"text/javascript\">'.$this->fetchTemplate('views/js/paypal.js').'</script>';\n        if ($this->useInContextCheckout()) {\n            $process .= $this->fetchTemplate('header.tpl');\n            $this->context->controller->addJS(_MODULE_DIR_.$this->name.'/views/js/incontext.js');\n            $process .= '<script defer src=\"//www.paypalobjects.com/api/checkout.js\"></script>';\n        }\n\n\n        if (Configuration::get('PAYPAL_PAYMENT_METHOD') == PPP) {\n            $this->context->smarty->assign(array(\n                'paypal_locale' => $this->getLocalePayPalPlus(),\n                'PAYPAL_LOGIN_CLIENT_ID' => Configuration::get('PAYPAL_LOGIN_CLIENT_ID'),\n                'PAYPAL_LOGIN_TPL' => Configuration::get('PAYPAL_LOGIN_TPL'),\n                'PAYPAL_RETURN_LINK' => PayPalLogin::getReturnLink(),\n            ));\n            $process .= '<script src=\"https://www.paypalobjects.com/webstatic/ppplus/ppplus.min.js\" type=\"text/javascript\"></script>';\n        }\n\n        // JS FOR OPC BRAINTREE\n        if ((Configuration::get('PAYPAL_PAYMENT_METHOD') == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && version_compare(PHP_VERSION, '5.4.0', '>=') && $this->context->controller instanceof OrderOpcController) {\n            $process .= '<script src=\"https://js.braintreegateway.com/web/3.50.0/js/client.min.js\"></script>\n\t<script src=\"https://js.braintreegateway.com/web/3.50.0/js/hosted-fields.min.js\"></script>\n\t<script src=\"https://js.braintreegateway.com/web/3.24.0/js/data-collector.min.js\"></script>\n\t<script src=\"https://js.braintreegateway.com/web/3.50.0/js/three-d-secure.min.js\"></script>';\n        }\n\n        return $process;\n    }\n\n    public function useInContextCheckout()\n    {\n        return Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT') && Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID')\n            != null;\n    }\n\n    public function getLocalePayPalPlus()\n    {\n        switch (Tools::strtolower($this->getCountryCode())) {\n            case 'fr':\n                return 'fr_FR';\n            case 'hk':\n                return 'zh_HK';\n            case 'cn':\n                return 'zh_CN';\n            case 'tw':\n                return 'zh_TW';\n            case 'xc':\n                return 'zh_XC';\n            case 'dk':\n                return 'da_DK';\n            case 'nl':\n                return 'nl_NL';\n            case 'gb':\n                return 'en_GB';\n            case 'de':\n                return 'de_DE';\n            case 'il':\n                return 'he_IL';\n            case 'id':\n                return 'id_ID';\n            case 'it':\n                return 'it_IT';\n            case 'jp':\n                return 'ja_JP';\n            case 'no':\n                return 'no_NO';\n            case 'pt':\n                return 'pt_PT';\n            case 'pl':\n                return 'pl_PL';\n            case 'ru':\n                return 'ru_RU';\n            case 'es':\n                return 'es_ES';\n            case 'se':\n                return 'sv_SE';\n            case 'th':\n                return 'th_TH';\n            case 'tr':\n                return 'tr_TR';\n            default:\n                return 'en_GB';\n        }\n    }\n\n    public function getLocale()\n    {\n        switch (Language::getIsoById($this->context->language->id)) {\n            case 'fr':\n                return 'fr-fr';\n            case 'hk':\n                return 'zh-hk';\n            case 'cn':\n                return 'zh-cn';\n            case 'tw':\n                return 'zh-tw';\n            case 'xc':\n                return 'zh-xc';\n            case 'dk':\n                return 'da-dk';\n            case 'nl':\n                return 'nl-nl';\n            case 'gb':\n                return 'en-gb';\n            case 'de':\n                return 'de-de';\n            case 'il':\n                return 'he-il';\n            case 'id':\n                return 'id-id';\n            case 'il':\n                return 'it-it';\n            case 'jp':\n                return 'ja-jp';\n            case 'no':\n                return 'no-no';\n            case 'pt':\n                return 'pt-pt';\n            case 'pl':\n                return 'pl-pl';\n            case 'ru':\n                return 'ru-ru';\n            case 'es':\n                return 'es-es';\n            case 'se':\n                return 'sv-se';\n            case 'th':\n                return 'th-th';\n            case 'tr':\n                return 'tr-tr';\n            default:\n                return 'en-gb';\n        }\n    }\n\n    public function canBeUsed()\n    {\n        if (!$this->active) {\n            return false;\n        }\n\n\n        //If merchant has not upgraded and payment method is out of country's specs\n        if (!Configuration::get('PAYPAL_UPDATED_COUNTRIES_OK') && !in_array((int) Configuration::get('PAYPAL_PAYMENT_METHOD'), $this->getPaymentMethods())) {\n            return false;\n        }\n\n        return true;\n    }\n\n    public function hookDisplayMobileHeader($params = null)\n    {\n        return $this->hookHeader($params);\n    }\n\n    public function hookDisplayMobileShoppingCartTop()\n    {\n        return $this->renderExpressCheckoutButton('cart').$this->renderExpressCheckoutForm('cart');\n    }\n\n    public function hookDisplayMobileAddToCartTop()\n    {\n        return $this->renderExpressCheckoutButton('cart').$this->renderExpressCheckoutForm('cart');\n    }\n\n    public function hookProductFooter()\n    {\n        $content = (!$this->useMobile()) ? $this->renderExpressCheckoutButton('product')\n        : null;\n\n        return $content.$this->renderExpressCheckoutForm('product');\n    }\n\n    public function hookDisplayProductButtons()\n    {\n        $content = '';\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            $content .= $bannerManager->renderForProductPage();\n        }\n\n        return $content;\n    }\n\n    public function hookActionOrderStatusPostUpdate($params)\n    {\n        if ($params['newOrderStatus']->id == Configuration::get('PS_OS_CANCELED')) {\n            $transction_id = Db::getInstance()->getValue('SELECT transaction FROM '._DB_PREFIX_.'paypal_braintree WHERE id_order = '.(int)$params['id_order']);\n\n            if ($transction_id) {\n                include_once _PS_MODULE_DIR_.'paypal/classes/Braintree.php';\n                $braintree = new PrestaBraintree();\n                $braintree->void($transction_id);\n            }\n        }\n    }\n\n    public function hookPayment($params)\n    {\n        if (!$this->canBeUsed()) {\n            return;\n        }\n\n        $use_mobile = $this->useMobile();\n\n        $method = (int) Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (isset($this->context->cookie->express_checkout)) {\n            $this->redirectToConfirmation();\n        }\n\n        $iso_lang = array(\n            'en' => 'en_US',\n            'fr' => 'fr_FR',\n            'de' => 'de_DE',\n        );\n\n        $this->context->smarty->assign(array(\n            'logos' => $this->paypal_logos->getLogos(),\n            'sandbox_mode' => Configuration::get('PAYPAL_SANDBOX'),\n            'use_mobile' => $use_mobile,\n            'PayPal_lang_code' => (isset($iso_lang[$this->context->language->iso_code]))\n            ? $iso_lang[$this->context->language->iso_code] : 'en_US',\n        ));\n\n        if (($method == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && version_compare(PHP_VERSION, '5.4.0', '>') && $this->context->currency->iso_code == 'EUR') {\n            $id_account_braintree = $this->set_good_context();\n\n            $braintree = new PrestaBraintree();\n\n            $clientToken = $braintree->createToken($id_account_braintree);\n\n            $this->reset_context();\n\n            if (!$clientToken) {\n                $return_braintree = '';\n            } else {\n                $this->context->smarty->assign(array(\n                    'opc' => Configuration::get('PS_ORDER_PROCESS_TYPE'),\n                    'error_msg'=> Tools::getValue('bt_error_msg'),\n                    'braintreeToken'=>$clientToken,\n                    'braintreeSubmitUrl'=>$this->context->link->getModuleLink('paypal', 'braintreesubmit', array(), true),\n                    'braintreeAmount'=>$this->context->cart->getOrderTotal(),\n                ));\n\n                $return_braintree =  $this->fetchTemplate('braintree_payment.tpl');\n            }\n        } else {\n            $return_braintree = '';\n        }\n\n        if ($method == HSS) {\n            $billing_address = new Address($this->context->cart->id_address_invoice);\n            $delivery_address = new Address($this->context->cart->id_address_delivery);\n            $billing_address->country = new Country($billing_address->id_country);\n            $delivery_address->country = new Country($delivery_address->id_country);\n            $billing_address->state = new State($billing_address->id_state);\n            $delivery_address->state = new State($delivery_address->id_state);\n\n            $cart = $this->context->cart;\n            $cart_details = $cart->getSummaryDetails(null, true);\n\n            if ((int) Configuration::get('PAYPAL_SANDBOX') == 1) {\n                $action_url = 'https://securepayments.sandbox.paypal.com/acquiringweb';\n            } else {\n                $action_url = 'https://securepayments.paypal.com/acquiringweb';\n            }\n\n            $shop_url = PayPal::getShopDomainSsl(true, true);\n\n            $this->context->smarty->assign(array(\n                'action_url' => $action_url,\n                'cart' => $cart,\n                'cart_details' => $cart_details,\n                'currency' => new Currency((int) $cart->id_currency),\n                'customer' => $this->context->customer,\n                'business_account' => Configuration::get('PAYPAL_BUSINESS_ACCOUNT'),\n                'custom' => Tools::jsonEncode(array('id_cart' => $cart->id, 'hash' => sha1(serialize($cart->nbProducts())))),\n                'gift_price' => (float) $this->getGiftWrappingPrice(),\n                'billing_address' => $billing_address,\n                'delivery_address' => $delivery_address,\n                'shipping' => $cart_details['total_shipping_tax_exc'],\n                'subtotal' => $cart_details['total_price_without_tax'] - $cart_details['total_shipping_tax_exc'],\n                'time' => time(),\n                'cancel_return' => $this->context->link->getPageLink('order.php'),\n                'notify_url' => $shop_url._MODULE_DIR_.$this->name.'/ipn.php',\n                'return_url' => $shop_url._MODULE_DIR_.$this->name.'/integral_evolution/submit.php?id_cart='.(int) $cart->id,\n                'tracking_code' => $this->getTrackingCode($method),\n                'iso_code' => Tools::strtoupper($this->context->language->iso_code),\n                'payment_hss_solution' => Configuration::get('PAYPAL_HSS_SOLUTION'),\n                'payment_hss_template' => Configuration::get('PAYPAL_HSS_TEMPLATE'),\n            ));\n            $this->getTranslations();\n            return $return_braintree.$this->fetchTemplate('integral_evolution_payment.tpl');\n        } elseif ($method == WPS || $method == ECS) {\n            $expressCheckout = new ExpressCheckout();\n\n            if ($expressCheckout->isConfigured() === false) {\n                return '';\n            }\n\n            $this->getTranslations();\n            $this->context->smarty->assign(array(\n                'PayPal_integral' => WPS,\n                'PayPal_express_checkout' => ECS,\n                'PayPal_payment_method' => $method,\n                'PayPal_payment_type' => 'payment_cart',\n                'PayPal_current_page' => $this->getCurrentUrl(),\n                'PayPal_tracking_code' => $this->getTrackingCode($method),\n                'PayPal_in_context_checkout' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT'),\n                'use_paypal_in_context' => (int) $this->useInContextCheckout(),\n                'PayPal_in_context_checkout_merchant_id' => Configuration::get('PAYPAL_IN_CONTEXT_CHECKOUT_M_ID'),\n                'baseURI' => $this->context->shop->getBaseURI()\n            ));\n            return $return_braintree.$this->fetchTemplate('express_checkout_payment.tpl');\n        } elseif ($method == PPP) {\n            $CallApiPaypalPlus = new CallApiPaypalPlus();\n            $CallApiPaypalPlus->setParams($params);\n            $approuval_url = $CallApiPaypalPlus->getApprovalUrl();\n            $this->context->smarty->assign(\n                array(\n                    'approval_url' => $approuval_url,\n                    'language' => $this->getLocalePayPalPlus(),\n                    'country' => $this->getCountryCode(),\n                    'mode' => Configuration::get('PAYPAL_SANDBOX') ? 'sandbox': 'live',\n                    'ajaxUrl' => $this->context->link->getModuleLink('paypal', 'pluspatch', array('id_cart'=>$this->context->cart->id,'id_payment'=>$CallApiPaypalPlus->id_payment)),\n                    'img_loader' => _PS_IMG_.'loader.gif',\n                )\n            );\n            return $return_braintree.$this->fetchTemplate('paypal_plus_payment.tpl');\n        }\n    }\n\n    public function hookDisplayPaymentEU($params)\n    {\n        if (!$this->active) {\n            return;\n        }\n\n        if ($this->hookPayment($params) == null) {\n            return null;\n        }\n\n        $method = (int) Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        if (isset($this->context->cookie->express_checkout)) {\n            $this->redirectToConfirmation();\n        }\n\n        $logos = $this->paypal_logos->getLogos();\n\n        if (isset($logos['LocalPayPalHorizontalSolutionPP']) && $method == WPS) {\n            $logo = $logos['LocalPayPalHorizontalSolutionPP'];\n        } else {\n            $logo = $logos['LocalPayPalLogoMedium'];\n        }\n\n        if ($method == HSS) {\n            return array(\n                'cta_text' => $this->l('Paypal'),\n                'logo' => $logo,\n                'form' => $this->fetchTemplate('integral_evolution_payment_eu.tpl'),\n            );\n        } elseif ($method == WPS || $method == ECS) {\n            return array(\n                'cta_text' => $this->l('Paypal'),\n                'logo' => $logo,\n                'form' => $this->fetchTemplate('express_checkout_payment_eu.tpl'),\n            );\n        } elseif ($method == PPP) {\n            if (Module::isEnabled('eu_legal') || Module::isEnabled('advancedeucompliance')) {\n                $this->context->smarty->assign(\n                    array(\n                        'eu_legal_active' => Module::isEnabled('eu_legal'),\n                        'advancedeucompliance_active' => Module::isEnabled('advancedeucompliance'),\n                    )\n                );\n\n                return array(\n                    'cta_text' => $this->l('Paypal, Lastschrift, Kreditkarte, Rechnung'),\n                    'logo' => $logo,\n                    'form' => $this->fetchTemplate('paypal_plus_payment_eu_legal.tpl'),\n                );\n            }\n            return array(\n                'cta_text' => $this->l('Paypal, Lastschrift, Kreditkarte, Rechnung'),\n                'logo' => $logo,\n                'form' => $this->fetchTemplate('paypal_plus_payment_eu.tpl'),\n            );\n        }\n    }\n\n    public function hookDisplayTop()\n    {\n        if ($this->context->controller instanceof IndexController === false\n            && $this->context->controller instanceof CategoryController === false) {\n            return '';\n        }\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            return $bannerManager->renderForHomePage();\n        }\n    }\n\n    public function hookDisplayPaymentTop()\n    {\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            return $bannerManager->renderForCheckoutPage();\n        }\n    }\n\n    public function hookShoppingCartExtra()\n    {\n        $content = '';\n        $bannerManager = new BannerManager();\n\n        if ($bannerManager->isBannerAvailable()) {\n            $content .= $bannerManager->renderForCartPage();\n        }\n\n        return $content . $this->renderExpressCheckoutButton('cart').$this->renderExpressCheckoutForm('cart');\n    }\n\n    public function hookPaymentReturn($params)\n    {\n        if (!$this->active) {\n            return null;\n        }\n        $this->context->smarty->assign(array(\n            'PayPal_payment_mode' => Configuration::get('PAYPAL_CAPTURE'),\n        ));\n        if (Tools::getValue('braintree')) {\n            return $this->fetchTemplate('braintree_return.tpl');\n        } else {\n            return $this->fetchTemplate('confirmation.tpl');\n        }\n    }\n\n    public function hookRightColumn()\n    {\n        $this->context->smarty->assign('logo', $this->paypal_logos->getCardsLogo(true));\n        return $this->fetchTemplate('column.tpl');\n    }\n\n    public function hookLeftColumn()\n    {\n        return $this->hookRightColumn();\n    }\n\n    public function hookBackBeforePayment($params)\n    {\n        if (!$this->active) {\n            return null;\n        }\n\n        /* Only execute if you use PayPal API for payment */\n        if (((int) Configuration::get('PAYPAL_PAYMENT_METHOD') != HSS) && $this->isPayPalAPIAvailable()) {\n            if ($params['module'] != $this->name || !$this->context->cookie->paypal_token\n                || !$this->context->cookie->paypal_payer_id) {\n                return false;\n            }\n\n            Tools::redirect('modules/'.$this->name.'/express_checkout/submit.php?confirm=1&token='.$this->context->cookie->paypal_token.'&payerID='.$this->context->cookie->paypal_payer_id);\n        }\n    }\n\n    public function setPayPalAsConfigured()\n    {\n        Configuration::updateValue('PAYPAL_CONFIGURATION_OK', true);\n    }\n\n    public function hookAdminOrder($params)\n    {\n        if (Tools::isSubmit('submitPayPalCapture')) {\n            if ($capture_amount = Tools::getValue('totalCaptureMoney')) {\n                if ($capture_amount = PaypalCapture::parsePrice($capture_amount)) {\n                    if (Validate::isFloat($capture_amount)) {\n                        $capture_amount = Tools::ps_round($capture_amount, '6');\n                        $ord = new Order((int) $params['id_order']);\n                        $cpt = new PaypalCapture();\n\n                        if (($capture_amount > Tools::ps_round(0, '6')) && (Tools::ps_round($cpt->getRestToPaid($ord), '6') >= $capture_amount)) {\n                            $complete = false;\n                            $totalPaid = $this->getOrderPriceService()->getTotalPaidByReference($ord->reference);\n\n                            if ($capture_amount > Tools::ps_round((float) $totalPaid, '6')) {\n                                $capture_amount = Tools::ps_round((float) $totalPaid, '6');\n                                $complete = true;\n                            }\n                            if ($capture_amount == Tools::ps_round($cpt->getRestToPaid($ord), '6')) {\n                                $complete = true;\n                            }\n\n                            $this->_doCapture($params['id_order'], $capture_amount, $complete);\n                        }\n                    }\n                }\n            }\n        } elseif (Tools::isSubmit('submitPayPalRefund')) {\n            $this->_doTotalRefund($params['id_order']);\n        }\n\n\n        $admin_templates = array();\n        if ($this->isPayPalAPIAvailable()) {\n            if ($this->_needValidation((int) $params['id_order'])) {\n                $admin_templates[] = 'validation';\n            }\n\n            if ($this->_needCapture((int) $params['id_order'])) {\n                $admin_templates[] = 'capture';\n            }\n\n            if ($this->_canRefund((int) $params['id_order'])) {\n                $admin_templates[] = 'refund';\n            }\n        }\n\n        if (count($admin_templates) > 0) {\n            $order = new Order((int) $params['id_order']);\n            $currency = new Currency($order->id_currency);\n            $cpt = new PaypalCapture();\n            $cpt->id_order = (int) $order->id;\n\n            if (version_compare(_PS_VERSION_, '1.5', '>=')) {\n                $order_state = $order->current_state;\n            } else {\n                $order_state = OrderHistory::getLastOrderState($order->id);\n            }\n\n            $order_payment = Tools::strtolower($order->payment);\n\n            $this->context->smarty->assign(\n                array(\n                    'authorization' => (int) Configuration::get('PAYPAL_OS_AUTHORIZATION'),\n                    'base_url' => Tools::getHttpHost(true).__PS_BASE_URI__,\n                    'module_name' => $this->name,\n                    'order_state' => $order_state,\n                    'order_payment' => $order_payment,\n                    'params' => array('id_order' => $params['id_order']),\n                    'id_currency' => $currency->getSign(),\n                    'rest_to_capture' => Tools::ps_round($cpt->getRestToPaid($order), '6'),\n                    'list_captures' => $cpt->getListCaptured(),\n                    'ps_version' => _PS_VERSION_,\n                )\n            );\n\n            foreach ($admin_templates as $admin_template) {\n                $this->_html .= $this->fetchTemplate('/views/templates/admin/admin_order/'.$admin_template.'.tpl');\n                $this->_postProcess();\n                $this->_html .= '</fieldset>';\n            }\n        }\n\n        return $this->_html;\n    }\n\n    public function getOrderPriceService()\n    {\n        return new OrderPrice();\n    }\n\n    public function hookCancelProduct($params)\n    {\n        if (Tools::isSubmit('generateDiscount') || !$this->isPayPalAPIAvailable()\n            || Tools::isSubmit('generateCreditSlip')) {\n            return false;\n        } elseif ($params['order']->module != $this->name || !($order = $params['order'])\n            || !Validate::isLoadedObject($order)) {\n            return false;\n        } elseif (!$order->hasBeenPaid()) {\n            return false;\n        }\n\n        $order_detail = new OrderDetail((int) $params['id_order_detail']);\n        if (!$order_detail || !Validate::isLoadedObject($order_detail)) {\n            return false;\n        }\n\n        $paypal_order = PayPalOrder::getOrderById((int) $order->id);\n        if (!$paypal_order) {\n            return false;\n        }\n\n        $products = $order->getProducts();\n        $cancel_quantity = Tools::getValue('cancelQuantity');\n        $message = $this->l('Cancel products result:').'<br>';\n\n        $amount = (float) ($products[(int) $order_detail->id]['product_price_wt']\n             * (int) $cancel_quantity[(int) $order_detail->id]);\n        $refund = $this->_makeRefund($paypal_order['id_transaction'], (int) $order->id, $amount);\n        $this->formatMessage($refund, $message);\n        $this->_addNewPrivateMessage((int) $order->id, $message);\n    }\n\n    public function hookActionPSCleanerGetModulesTables()\n    {\n        return array('paypal_customer', 'paypal_order');\n    }\n\n    public function hookBackOfficeHeader()\n    {\n        if ((strcmp(Tools::getValue('configure'), $this->name) === 0) ||\n            (strcmp(Tools::getValue('module_name'), $this->name) === 0)) {\n            header('Clear-Site-Data: \"cache\"');\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                $output = '<script type=\"text/javascript\" src=\"'.__PS_BASE_URI__.'js/jquery/jquery-ui-1.8.10.custom.min.js\"></script>\n                    <script type=\"text/javascript\" src=\"'.__PS_BASE_URI__.'js/jquery/jquery.fancybox-1.3.4.js\"></script>\n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"'.__PS_BASE_URI__.'css/jquery.fancybox-1.3.4.css\" />\n                    <link type=\"text/css\" rel=\"stylesheet\" href=\"'._MODULE_DIR_.$this->name.'/views/css/paypal.css\" />';\n            } else {\n                $this->context->controller->addJquery();\n                $this->context->controller->addJQueryPlugin('fancybox');\n                $this->context->controller->addCSS(_PS_MODULE_DIR_.$this->name.'/views/css/paypal.css');\n            }\n\n            $this->context->smarty->assign(array(\n                'PayPal_module_dir' => _MODULE_DIR_.$this->name,\n                'PayPal_WPS' => (int) WPS,\n                'PayPal_HSS' => (int) HSS,\n                'PayPal_ECS' => (int) ECS,\n                'PayPal_PPP' => (int) PPP,\n                'PayPal_PVZ' => (int) PVZ,\n            ));\n\n            return (isset($output) ? $output : null).$this->fetchTemplate('/views/templates/admin/header.tpl');\n        }\n\n        if (Tools::getValue('controller') == \"AdminOrders\" && Tools::getValue('id_order')) {\n            $repeat = false;\n            Media::addJsDefL('chb_braintree_refund', $this->l('Refund PayPal'), null, $repeat);\n            $this->context->controller->addJS(_PS_MODULE_DIR_ . $this->name . '/views/js/bo_order.js');\n        }\n\n        return null;\n    }\n\n    public function renderExpressCheckoutButton($type)\n    {\n        $expressCheckout = new ExpressCheckout();\n\n        if ($expressCheckout->isConfigured() === false) {\n            return '';\n        }\n\n        if ((!Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT'))) {\n            return '';\n        }\n\n        if (!in_array(ECS, $this->getPaymentMethods())) {\n            return '';\n        }\n\n        if (((int) Configuration::get('PAYPAL_BUSINESS') == 1) && (int) Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS) {\n            return '';\n        }\n\n        if ((int) Configuration::get('PAYPAL_PAYMENT_METHOD') == PPP) {\n            return '';\n        }\n\n        $paypal_logos = $this->paypal_logos->getLogos();\n        $iso_lang = array(\n            'en' => 'en_US',\n            'fr' => 'fr_FR',\n            'de' => 'de_DE',\n        );\n\n        $this->context->smarty->assign(array(\n            'use_mobile' => (bool) $this->useMobile(),\n            'PayPal_payment_type' => $type,\n            'PayPal_current_page' => $this->getCurrentUrl(),\n            'PayPal_lang_code' => (isset($iso_lang[$this->context->language->iso_code]))\n            ? $iso_lang[$this->context->language->iso_code] : 'en_US',\n            'PayPal_tracking_code' => $this->getTrackingCode((int) Configuration::get('PAYPAL_PAYMENT_METHOD')),\n            'paypal_express_checkout_shortcut_logo' => isset($paypal_logos['ExpressCheckoutShortcutButton'])\n            ? $paypal_logos['ExpressCheckoutShortcutButton'] : false,\n        ));\n\n        return $this->fetchTemplate('express_checkout_shortcut_button.tpl');\n    }\n\n    public function renderExpressCheckoutForm($type)\n    {\n        if ((!Configuration::get('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT'))\n            || !in_array(ECS, $this->getPaymentMethods()) ||\n            (((int) Configuration::get('PAYPAL_BUSINESS') == 1) && ((int) Configuration::get('PAYPAL_PAYMENT_METHOD')\n                == HSS))) {\n            return;\n        }\n\n        $id_product = (int) Tools::getValue('id_product');\n        $id_product_attribute = (int) Product::getDefaultAttribute($id_product);\n        if ($id_product_attribute) {\n            $minimal_quantity = Attribute::getAttributeMinimalQty($id_product_attribute);\n        } else {\n            $product = new Product($id_product);\n            $minimal_quantity = $product->minimal_quantity;\n        }\n\n        $this->context->smarty->assign(array(\n            'PayPal_payment_type' => $type,\n            'PayPal_current_page' => $this->getCurrentUrl(),\n            'id_product_attribute_ecs' => $id_product_attribute,\n            'product_minimal_quantity' => $minimal_quantity,\n            'PayPal_tracking_code' => $this->getTrackingCode((int) Configuration::get('PAYPAL_PAYMENT_METHOD')),\n        ));\n\n        return $this->fetchTemplate('express_checkout_shortcut_form.tpl');\n    }\n\n    public function useMobile()\n    {\n        if ((method_exists($this->context, 'getMobileDevice') && $this->context->getMobileDevice())\n            || Tools::getValue('ps_mobile_site')) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function isCountryAPAC()\n    {\n        $country = new Country(Configuration::get('PS_COUNTRY_DEFAULT'));\n\n        $tabCountryApac = array('CN', 'JP', 'AU', 'HK', 'TW', 'NZ', 'BU', 'BN', 'KH',\n            'ID', 'LA', 'MY', 'PH', 'SG', 'TH',\n            'TL', 'VN');\n\n        if (in_array($country->iso_code, $tabCountryApac)) {\n            return true;\n        }\n        return false;\n    }\n\n    public function getTrackingCode($method)\n    {\n        $isApacCountry = $this->isCountryAPAC();\n\n        if ((_PS_VERSION_ < '1.5') && (_THEME_NAME_ == 'prestashop_mobile' || Tools::getValue('ps_mobile_site')\n            == 1)) {\n            if (_PS_MOBILE_TABLET_) {\n                return $isApacCountry ? APAC_TABLET_TRACKING_CODE : TABLET_TRACKING_CODE;\n            } elseif (_PS_MOBILE_PHONE_) {\n                return $isApacCountry ? APAC_SMARTPHONE_TRACKING_CODE : SMARTPHONE_TRACKING_CODE;\n            }\n        }\n        //Get Seamless checkout\n\n        $login_user = false;\n        if (Configuration::get('PAYPAL_LOGIN')) {\n            $login_user = PaypalLoginUser::getByIdCustomer((int) $this->context->customer->id);\n\n            if ($login_user && $login_user->expires_in <= time()) {\n                $obj = new PayPalLogin();\n                $login_user = $obj->getRefreshToken();\n            }\n        }\n\n        if ($method == WPS) {\n            if ($login_user) {\n                return $isApacCountry ? APAC_TRACKING_EXPRESS_CHECKOUT_SEAMLESS : TRACKING_EXPRESS_CHECKOUT_SEAMLESS;\n            } else {\n                return $isApacCountry ? APAC_TRACKING_INTEGRAL : TRACKING_INTEGRAL;\n            }\n        }\n        if ($method == HSS) {\n            return $isApacCountry ? APAC_TRACKING_INTEGRAL_EVOLUTION : TRACKING_INTEGRAL_EVOLUTION;\n        }\n\n        if ($method == ECS) {\n            if ($login_user) {\n                return $isApacCountry ? APAC_TRACKING_EXPRESS_CHECKOUT_SEAMLESS : TRACKING_EXPRESS_CHECKOUT_SEAMLESS;\n            } else {\n                return $isApacCountry ? APAC_TRACKING_OPTION_PLUS : TRACKING_OPTION_PLUS;\n            }\n        }\n        if ($method == PPP) {\n            return $isApacCountry ? APAC_TRACKING_PAYPAL_PLUS : TRACKING_PAYPAL_PLUS;\n        }\n\n        return TRACKING_CODE;\n    }\n\n    public function hookDisplayOrderConfirmation($params)\n    {\n\n        $id_order = (int) Tools::getValue('id_order');\n        $transactionId = Db::getInstance()->getValue('SELECT transaction FROM `'._DB_PREFIX_.'paypal_braintree` WHERE id_order = '.(int)$id_order);\n        if (!isset($transactionId) || empty($transactionId)) {\n            return;\n        }\n        $order = new Order($id_order);\n\n        $price = Tools::displayPrice($order->total_paid_tax_incl, $this->context->currency);\n\n        $this->context->smarty->assign(array(\n            'transaction_id'=> $transactionId,\n            'order' => (array)$order,\n            'price' => $price,\n\n        ));\n        return $this->fetchTemplate('braintree_confirm.tpl');\n    }\n\n    public function getTranslations()\n    {\n        $file = dirname(__FILE__).'/'._PAYPAL_TRANSLATIONS_XML_;\n        if (file_exists($file)) {\n            $xml = simplexml_load_file($file);\n            if (isset($xml) && $xml) {\n                $index = -1;\n                $content = $default = array();\n\n                while (isset($xml->country[++$index])) {\n                    $country = $xml->country[$index];\n                    $country_iso = $country->attributes()->iso_code;\n\n                    if (($this->iso_code != 'default') && ($country_iso == $this->iso_code)) {\n                        $content = (array) $country;\n                    } elseif ($country_iso == 'default') {\n                        $default = (array) $country;\n                    }\n                }\n\n                $content += $default;\n                $this->context->smarty->assign('PayPal_content', $content);\n\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public function getPayPalURL()\n    {\n        return 'www'.(Configuration::get('PAYPAL_SANDBOX') ? '.sandbox' : '').'.paypal.com';\n    }\n\n    public function getPaypalIntegralEvolutionUrl()\n    {\n        if (Configuration::get('PAYPAL_SANDBOX')) {\n            return 'https://'.$this->getPayPalURL().'/cgi-bin/acquiringweb';\n        }\n\n        return 'https://securepayments.paypal.com/acquiringweb?cmd=_hosted-payment';\n    }\n\n    public function getPaypalStandardUrl()\n    {\n        return 'https://'.$this->getPayPalURL().'/cgi-bin/webscr';\n    }\n\n    public function getAPIURL()\n    {\n        return 'api-3t'.(Configuration::get('PAYPAL_SANDBOX') ? '.sandbox' : '').'.paypal.com';\n    }\n\n    public function getAPIScript()\n    {\n        return '/nvp';\n    }\n\n    public function getPaymentMethods()\n    {\n        $country = new Country((int) Configuration::get('PS_COUNTRY_DEFAULT'));\n        return AuthenticatePaymentMethods::authenticatePaymentMethodByCountry($country->iso_code);\n    }\n\n    public function getCountryCode()\n    {\n        $cart = new Cart((int) $this->context->cookie->id_cart);\n        $address = new Address((int) $cart->id_address_invoice);\n        $country = new Country((int) $address->id_country);\n\n        return $country->iso_code;\n    }\n\n    public function displayPayPalAPIError($message, $log = false)\n    {\n        $send = true;\n        // Sanitize log\n        foreach ($log as $key => $string) {\n            if ($string == 'ACK -> Success') {\n                $send = false;\n            } elseif (Tools::substr($string, 0, 6) == 'METHOD') {\n                $values = explode('&', $string);\n                foreach ($values as $key2 => $value) {\n                    $values2 = explode('=', $value);\n                    foreach ($values2 as $key3 => $value2) {\n                        if ($value2 == 'PWD' || $value2 == 'SIGNATURE') {\n                            $values2[$key3 + 1] = '*********';\n                        }\n                    }\n\n                    $values[$key2] = implode('=', $values2);\n                }\n                $log[$key] = implode('&', $values);\n            }\n        }\n\n        $this->context->smarty->assign(array('message' => $message, 'logs' => $log));\n\n        if ($send) {\n            $id_lang = (int) $this->context->language->id;\n            $iso_lang = Language::getIsoById($id_lang);\n\n            if (!is_dir(dirname(__FILE__).'/mails/'.Tools::strtolower($iso_lang))) {\n                $id_lang = Language::getIdByIso('en');\n            }\n\n            Mail::Send(\n                $id_lang,\n                'error_reporting',\n                Mail::l('Error reporting from your PayPal module', (int) $this->context->language->id),\n                array('{logs}' => implode('<br />', $log)),\n                Configuration::get('PS_SHOP_EMAIL'),\n                null,\n                null,\n                null,\n                null,\n                null,\n                _PS_MODULE_DIR_.$this->name.'/mails/'\n            );\n        }\n\n        return $this->fetchTemplate('error.tpl');\n    }\n\n    private function _canRefund($id_order)\n    {\n        if (!(bool) $id_order) {\n            return false;\n        }\n\n        $paypal_order = Db::getInstance()->getRow('\n            SELECT `payment_status`, `capture`\n            FROM `'._DB_PREFIX_.'paypal_order`\n            WHERE `id_order` = '.(int) $id_order);\n\n\n        return ($paypal_order && in_array($paypal_order['payment_status'], array('Completed','approved','settled','submitted_for_settlement')) && $paypal_order['capture'] == 0);\n    }\n\n    private function _needValidation($id_order)\n    {\n        if (!(int) $id_order) {\n            return false;\n        }\n\n        $order = Db::getInstance()->getRow('\n            SELECT `payment_method`, `payment_status`\n            FROM `'._DB_PREFIX_.'paypal_order`\n            WHERE `id_order` = '.(int) $id_order);\n\n        return $order && $order['payment_method'] != HSS && $order['payment_status']\n            == 'Pending_validation';\n    }\n\n    private function _needCapture($id_order)\n    {\n        if (!(int) $id_order) {\n            return false;\n        }\n\n        $result = Db::getInstance()->getRow('\n            SELECT `payment_method`, `payment_status`\n            FROM `'._DB_PREFIX_.'paypal_order`\n            WHERE `id_order` = '.(int) $id_order.' AND `capture` = 1');\n\n        return $result && ($result['payment_method'] != HSS && $result['payment_status'] == 'Pending_capture' || ($result['payment_method'] == PVZ || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && $result['payment_status'] == 'authorized');\n    }\n\n    private function _preProcess()\n    {\n        if (Tools::isSubmit('submitPaypal')) {\n            $business = Tools::getValue('business') !== false ? (int) Tools::getValue('business')\n            : false;\n            $payment_method = Tools::getValue('paypal_payment_method') !== false\n            ? (int) Tools::getValue('paypal_payment_method') : false;\n            $payment_capture = Tools::getValue('payment_capture') !== false ? (int) Tools::getValue('payment_capture')\n            : false;\n            $sandbox_mode = Tools::getValue('sandbox_mode') !== false ? (int) Tools::getValue('sandbox_mode')\n            : false;\n            if ($this->default_country === false || $sandbox_mode === false || $payment_capture\n                === false || $business === false || $payment_method === false) {\n                $this->_errors[] = $this->l('Some fields are empty.');\n            } elseif ($business == 0) {\n                $this->_errors[] = $this->l('Credentials fields cannot be empty');\n            } elseif ($business == 1) {\n                if (($payment_method == WPS || $payment_method == ECS) && (!Tools::getValue('api_username')\n                    || !Tools::getValue('api_password') || !Tools::getValue('api_signature'))) {\n                    $this->_errors[] = $this->l('Credentials fields cannot be empty');\n                }\n\n                if ($payment_method == PPP && (Tools::getValue('paypalplus_webprofile')\n                    != 0 && (!Tools::getValue('client_id') && !Tools::getValue('secret')))) {\n                    $this->_errors[] = $this->l('Credentials fields cannot be empty');\n                }\n\n                if ($payment_method == HSS && !Tools::getValue('api_business_account')) {\n                    $this->_errors[] = $this->l('Business e-mail field cannot be empty');\n                }\n\n                $currency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));\n                $account_braintree = Tools::getValue('account_braintree');\n                if ($payment_method == PVZ && empty($account_braintree[$currency->iso_code])) {\n                    $this->_errors[] = sprintf($this->l('Braintree Account %s field cannot be empty'), $currency->iso_code);\n                }\n            }\n        }\n\n        return !count($this->_errors);\n    }\n\n    private function _postProcess()\n    {\n        if (Tools::isSubmit('submitPaypal')) {\n            if (Tools::getValue('paypal_country_only')) {\n                Configuration::updateValue('PAYPAL_COUNTRY_DEFAULT', (int) Tools::getValue('paypal_country_only'));\n            } elseif ($this->_preProcess()) {\n                $expressCheckout = new ExpressCheckout();\n                if ((int) Tools::getValue('paypal_payment_method') == 5) {\n                    $refresh_webprofile = Configuration::get('PAYPAL_PLUS_CLIENT_ID') != Tools::getValue('client_id')\n                        || Configuration::get('PAYPAL_PLUS_SECRET') != Tools::getValue('secret')\n                        || Configuration::get('PAYPAL_SANDBOX') != (int) Tools::getValue('sandbox_mode');\n                } else {\n                    $refresh_webprofile = false;\n                }\n\n                $new_hss_email = Tools::getValue('api_business_account');\n                Db::getInstance()->delete('paypal_hss_email_error', 'email = \"'. pSQL($new_hss_email) .'\"');\n\n                Configuration::updateValue('PAYPAL_BUSINESS', (int) Tools::getValue('business'));\n                Configuration::updateValue('PAYPAL_PAYMENT_METHOD', (int) Tools::getValue('paypal_payment_method'));\n                $expressCheckout->setApiUser(trim(Tools::getValue('api_username')));\n                $expressCheckout->setApiPassword(trim(Tools::getValue('api_password')));\n                $expressCheckout->setApiSignature(trim(Tools::getValue('api_signature')));\n                Configuration::updateValue('PAYPAL_BUSINESS_ACCOUNT', trim(Tools::getValue('api_business_account')));\n                Configuration::updateValue('PAYPAL_EXPRESS_CHECKOUT_SHORTCUT', (int) Tools::getValue('express_checkout_shortcut'));\n                $expressCheckout->setApiMerchantId(trim(Tools::getValue('in_context_checkout_merchant_id')));\n\n                $sandbox = (int)Configuration::get('PAYPAL_SANDBOX');\n                $switch_sandbox = false;\n\n                Configuration::updateValue('PAYPAL_SANDBOX', (int) Tools::getValue('sandbox_mode'));\n                Configuration::updateValue('PAYPAL_CAPTURE', (int) Tools::getValue('payment_capture'));\n\n                $expressCheckout->checkCredentials();\n                /* USE PAYPAL LOGIN */\n                Configuration::updateValue('PAYPAL_LOGIN', (int) Tools::getValue('paypal_login'));\n                Configuration::updateValue('PAYPAL_LOGIN_CLIENT_ID', Tools::getValue('paypal_login_client_id'));\n                Configuration::updateValue('PAYPAL_LOGIN_SECRET', Tools::getValue('paypal_login_client_secret'));\n                Configuration::updateValue('PAYPAL_LOGIN_TPL', (int) Tools::getValue('paypal_login_client_template'));\n\n                Configuration::updateValue('PAYPAL_BRAINTREE_ENABLED', (int) Tools::getValue('braintree_enabled'));\n                Configuration::updateValue('PAYPAL_USE_3D_SECURE', (int) Tools::getValue('use_threedsecure'));\n\n                if ($sandbox && $sandbox != (int) Tools::getValue('sandbox_mode')) {\n                    $switch_sandbox = true;\n\n                    Configuration::updateValue('PAYPAL_BRAINTREE_ACCESS_TOKEN', null);\n                    Configuration::updateValue('PAYPAL_BRAINTREE_EXPIRES_AT', null);\n                    Configuration::updateValue('PAYPAL_BRAINTREE_REFRESH_TOKEN', null);\n                    Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID', null);\n                }\n\n                //*TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_ENABLED',Tools::getValue('braintree_enabled'));\n                //*TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_PUBLIC_KEY', Tools::getValue('braintree_public_key'));\n                //*TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_PRIVATE_KEY', Tools::getValue('braintree_private_key'));\n                // TO DELETE* Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID', Tools::getValue('braintree_merchant_id'));\n\n                /* USE PAYPAL PLUS */\n                if ((int) Tools::getValue('paypal_payment_method') == 5) {\n                    Configuration::updateValue('PAYPAL_PLUS_CLIENT_ID', Tools::getValue('client_id'));\n                    Configuration::updateValue('PAYPAL_PLUS_SECRET', Tools::getValue('secret'));\n                    if ((int) Tools::getValue('paypalplus_webprofile') == 1 || $refresh_webprofile) {\n                        unset($this->context->cookie->paypal_access_token_time_max);\n                        unset($this->context->cookie->paypal_access_token_access_token);\n                        $ApiPaypalPlus = new ApiPaypalPlus();\n                        $idWebProfile = $ApiPaypalPlus->getWebProfile();\n                        if ($idWebProfile) {\n                            Configuration::updateValue('PAYPAL_WEB_PROFILE_ID', $idWebProfile);\n                        } else {\n                            Configuration::updateValue('PAYPAL_WEB_PROFILE_ID', '0');\n                        }\n                    }\n                }\n                /* IS IN_CONTEXT_CHECKOUT ENABLED */\n                if ((int) Tools::getValue('paypal_payment_method') != 2) {\n                    Configuration::updateValue('PAYPAL_IN_CONTEXT_CHECKOUT', (int) Tools::getValue('in_context_checkout'));\n                } else {\n                    Configuration::updateValue('PAYPAL_IN_CONTEXT_CHECKOUT', 0);\n                }\n\n                /* /IS IN_CONTEXT_CHECKOUT ENABLED */\n\n                //EXPRESS CHECKOUT TEMPLATE\n                Configuration::updateValue('PAYPAL_HSS_SOLUTION', (int) Tools::getValue('integral_evolution_solution'));\n                if (Tools::getValue('integral_evolution_solution') == PAYPAL_HSS_IFRAME) {\n                    Configuration::updateValue('PAYPAL_HSS_TEMPLATE', 'D');\n                } else {\n                    Configuration::updateValue('PAYPAL_HSS_TEMPLATE', Tools::getValue('integral_evolution_template'));\n                }\n\n                $account_brain = Tools::getValue('account_braintree');\n                Configuration::updateValue('PAYPAL_ACCOUNT_BRAINTREE', Tools::jsonEncode($account_brain));\n                // Start save Braintree credentials\n                Configuration::updateValue('PAYPAL_BRAINTREE_PUB_KEY_LIVE', Tools::getValue('paypal_braintree_pub_key_live'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_PRIV_KEY_LIVE', Tools::getValue('paypal_braintree_priv_key_live'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID_LIVE', Tools::getValue('paypal_braintree_merchant_id_live'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_PUB_KEY_SANDBOX', Tools::getValue('paypal_braintree_pub_key_sandbox'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_PRIV_KEY_SANDBOX', Tools::getValue('paypal_braintree_priv_key_sandbox'));\n                Configuration::updateValue('PAYPAL_BRAINTREE_MERCHANT_ID_SANDBOX', Tools::getValue('paypal_braintree_merchant_id_sandbox'));\n                // End save Braintree credentials\n\n                $this->context->smarty->assign('PayPal_save_success', true);\n\n                if ($switch_sandbox) {\n                    if ((int) Tools::getValue('sandbox_mode') == 1) {\n                        return $this->displayWarning($this->l('You have switched from live to sandbox mode. Please reconfigure your products.'));\n                    } else {\n                        return $this->displayWarning($this->l('You have switched from sandbox to live mode. Please reconfigure your products.'));\n                    }\n                }\n            } else {\n                $this->_html = $this->displayError(implode('<br />', $this->_errors)); // Not displayed at this time\n                $this->context->smarty->assign('PayPal_save_failure', true);\n            }\n        }\n\n        if (Tools::isSubmit('installmentSettingForm')) {\n            Configuration::updateValue(ConfigurationMap::ENABLE_INSTALLMENT, Tools::getValue(ConfigurationMap::ENABLE_INSTALLMENT));\n            Configuration::updateValue(ConfigurationMap::HOME_PAGE, Tools::getValue(ConfigurationMap::HOME_PAGE));\n            Configuration::updateValue(ConfigurationMap::CATEGORY_PAGE, Tools::getValue(ConfigurationMap::CATEGORY_PAGE));\n            Configuration::updateValue(ConfigurationMap::CART_PAGE, Tools::getValue(ConfigurationMap::CART_PAGE));\n            Configuration::updateValue(ConfigurationMap::CHECKOUT_PAGE, Tools::getValue(ConfigurationMap::CHECKOUT_PAGE));\n            Configuration::updateValue(ConfigurationMap::PRODUCT_PAGE, Tools::getValue(ConfigurationMap::PRODUCT_PAGE));\n            Configuration::updateValue(ConfigurationMap::COLOR, Tools::getValue(ConfigurationMap::COLOR));\n            Configuration::updateValue(ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT, Tools::getValue(ConfigurationMap::ADVANCED_OPTIONS_INSTALLMENT));\n            ConfigurationMap::setClientId(Tools::getValue(ConfigurationMap::CLIENT_ID, ''));\n        }\n\n        return $this->loadLangDefault();\n    }\n\n    private function _makeRefund($id_transaction, $id_order, $amt = false)\n    {\n        if (!$this->isPayPalAPIAvailable()) {\n            die(Tools::displayError('Fatal Error: no API Credentials are available'));\n        } elseif (!$id_transaction) {\n            die(Tools::displayError('Fatal Error: id_transaction is null'));\n        }\n\n        $payment_method = Configuration::get('PAYPAL_PAYMENT_METHOD');\n\n        $id_paypal_braintree = Db::getInstance()->getValue('\n                    SELECT `id_paypal_braintree`\n                    FROM `'._DB_PREFIX_.'paypal_braintree`\n                    WHERE `id_order` = '.(int) $id_order);\n\n        if (Configuration::get('PAYPAL_BRAINTREE_ENABLED') && $id_paypal_braintree) {\n            if (!$amt) {\n                $amt = Db::getInstance()->getValue('\n                    SELECT total_paid\n                    FROM `'._DB_PREFIX_.'orders` o\n                    WHERE o.`id_order` = '.(int) $id_order);\n            }\n            include_once(_PS_MODULE_DIR_.'paypal/classes/Braintree.php');\n            $braintree = new PrestaBraintree();\n\n            $transaction_status = $braintree->getTransactionStatus($id_transaction);\n\n            if ($transaction_status == 'submitted_for_settlement') {\n                $result = $braintree->void($id_transaction);\n            } else {\n                $result = $braintree->refund($id_transaction, $amt);\n            }\n\n            return $result;\n        } elseif ($payment_method != PPP) {\n            if (!$amt) {\n                $params = array('TRANSACTIONID' => $id_transaction, 'REFUNDTYPE' => 'Full');\n            } else {\n                $iso_currency = Db::getInstance()->getValue('\n                    SELECT `iso_code`\n                    FROM `'._DB_PREFIX_.'orders` o\n                    LEFT JOIN `'._DB_PREFIX_.'currency` c ON (o.`id_currency` = c.`id_currency`)\n                    WHERE o.`id_order` = '.(int) $id_order);\n\n                $params = array('TRANSACTIONID' => $id_transaction, 'REFUNDTYPE' => 'Partial',\n                    'AMT' => (float) $amt, 'CURRENCYCODE' => Tools::strtoupper($iso_currency));\n            }\n\n            $paypal_lib = new PaypalLib();\n\n            return $paypal_lib->makeCall(\n                $this->getAPIURL(),\n                $this->getAPIScript(),\n                'RefundTransaction',\n                '&'.http_build_query($params, '', '&')\n            );\n        } else {\n            if (!$amt) {\n                $params = new stdClass();\n            } else {\n                $result = Db::getInstance()->ExecuteS('SELECT * FROM '._DB_PREFIX_.'paypal_order WHERE id_transaction = \"'.pSQL($id_transaction).'\"');\n                $result = current($result);\n\n                $amount = new stdClass();\n                $amount->total = $amt;\n                $amount->currency = $result['currency'];\n\n                $params = new stdClass();\n                $params->amount = $amount;\n            }\n\n            $callApiPaypalPlus = new CallApiPaypalPlus();\n\n            return Tools::jsonDecode($callApiPaypalPlus->executeRefund($id_transaction, $params));\n        }\n    }\n\n    public function _addNewPrivateMessage($id_order, $message)\n    {\n        if (!(bool) $id_order) {\n            return false;\n        }\n\n        $new_message = new Message();\n        $message = strip_tags($message, '<br>');\n\n        if (!Validate::isCleanHtml($message)) {\n            $message = $this->l('Payment message is not valid, please check your module.');\n        }\n\n        $new_message->message = $message;\n        $new_message->id_order = (int) $id_order;\n        $new_message->private = 1;\n\n        return $new_message->add();\n    }\n\n    public function hookActionOrderSlipAdd($params)\n    {\n        if (Tools::getValue('generateDiscountRefund') == 'on') {\n            $order = $params['order'];\n            $paypalOrder = PayPalOrder::getOrderById((int) $order->id);\n            $total_paid = floatval($paypalOrder['total_paid']);\n            $amount = floatval(Tools::getValue('partialRefundShippingCost', ''));\n\n            foreach ($params['productList'] as $product) {\n                $amount += $product['amount'];\n            }\n\n            $total_paid -= $amount;\n            $dataUpdate = array(\n                'total_paid' => $total_paid\n            );\n\n            Db::getInstance()->update('paypal_order', $dataUpdate, 'id_order=' . $order->id);\n        }\n\n        if (Tools::isSubmit('doPartialRefundPayPal')) {\n            $order = $params['order'];\n            $paypalOrder = PayPalOrder::getOrderById((int) $order->id);\n\n            if (!$this->isPayPalAPIAvailable() || !$paypalOrder) {\n                return false;\n            }\n\n            $amount = floatval(Tools::getValue('partialRefundShippingCost', ''));\n\n            foreach ($params['productList'] as $product) {\n                $amount += $product['amount'];\n            }\n\n            $response = $this->_makeRefund($paypalOrder['id_transaction'], $order->id, $amount);\n            $message = $this->l('Refund operation result:').\" \\r\\n\";\n\n            foreach ($response as $key => $value) {\n                if (is_object($value) || is_array($value)) {\n                    $message .= $key.': '.Tools::jsonEncode($value).\" \\r\\n\";\n                } else {\n                    $message .= $key.': '.$value.\" \\r\\n\";\n                }\n            }\n\n            if ((array_key_exists('ACK', $response) && $response['ACK'] == 'Success' &&\n                    $response['REFUNDTRANSACTIONID'] != '') || (isset($response->state) &&\n                    $response->state == 'completed') ||\n                ((Configuration::get('PAYPAL_PAYMENT_METHOD') || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && $response)) {\n                if (Configuration::get('PAYPAL_BRAINTREE_ENABLED') && !is_array($response)) {\n                    $message .= $this->l('Braintree refund successful!');\n                } else {\n                    $message .= $this->l('PayPal refund successful!');\n                }\n\n                $total_paid = $total_paid = floatval($paypalOrder['total_paid']);\n                $total_paid -= $amount;\n                $dataUpdate = array(\n                    'payment_status' => 'Refunded',\n                    'total_paid' => $total_paid\n                );\n                $res = Db::getInstance()->update('paypal_order', $dataUpdate, 'id_order=' . $order->id);\n\n                if (!$res) {\n                    die(Tools::displayError('Error when updating PayPal database'));\n                }\n            } else {\n                $message .= $this->l('Transaction error!');\n            }\n\n            $this->_addNewPrivateMessage((int) $order->id, $message);\n        }\n    }\n\n    private function _doTotalRefund($id_order)\n    {\n        $paypal_order = PayPalOrder::getOrderById((int) $id_order);\n\n        if (!$this->isPayPalAPIAvailable() || !$paypal_order) {\n            return false;\n        }\n\n        $order = new Order((int) $id_order);\n\n        if (!Validate::isLoadedObject($order)) {\n            return false;\n        }\n\n        $currency = new Currency((int) $order->id_currency);\n\n        if (!Validate::isLoadedObject($currency)) {\n            $this->_errors[] = $this->l('Not a valid currency');\n            return false;\n        }\n\n        $decimals = (is_array($currency) ? (int) $currency['decimals'] : (int) $currency->decimals) * _PS_PRICE_DISPLAY_PRECISION_;\n\n        // check if total or partial\n        if (Tools::ps_round($order->total_paid_real, $decimals) == Tools::ps_round($paypal_order['total_paid'], $decimals)) {\n            $response = $this->_makeRefund($paypal_order['id_transaction'], $order->id);\n        } else {\n            $response = $this->_makeRefund($paypal_order['id_transaction'], $order->id, (float) ($paypal_order['total_paid']));\n        }\n\n        $message = $this->l('Refund operation result:').\" \\r\\n\";\n        foreach ($response as $key => $value) {\n            if (is_object($value) || is_array($value)) {\n                $message .= $key.': '.Tools::jsonEncode($value).\" \\r\\n\";\n            } else {\n                $message .= $key.': '.$value.\" \\r\\n\";\n            }\n        }\n        if ((array_key_exists('ACK', $response) && $response['ACK'] == 'Success' && $response['REFUNDTRANSACTIONID'] != '') || (isset($response->state) && $response->state == 'completed') || ((Configuration::get('PAYPAL_PAYMENT_METHOD') || Configuration::get('PAYPAL_BRAINTREE_ENABLED')) && $response)) {\n            if (Configuration::get('PAYPAL_BRAINTREE_ENABLED') && !is_array($response)) {\n                $message .= $this->l('Braintree refund successful!');\n            } else {\n                $message .= $this->l('PayPal refund successful!');\n            }\n\n            if (!Db::getInstance()->Execute('UPDATE `'._DB_PREFIX_.'paypal_order` SET `payment_status` = \\'Refunded\\' WHERE `id_order` = '.(int) $id_order)) {\n                die(Tools::displayError('Error when updating PayPal database'));\n            }\n\n            $history = new OrderHistory();\n            $history->id_order = (int) $id_order;\n            $history->changeIdOrderState((int) Configuration::get('PS_OS_REFUND'), $history->id_order);\n            $history->addWithemail();\n            $history->save();\n        } else {\n            $message .= $this->l('Transaction error!');\n        }\n\n        $this->_addNewPrivateMessage((int) $id_order, $message);\n\n        Tools::redirect($_SERVER['HTTP_REFERER']);\n    }\n\n    private function _doCapture($id_order, $capture_amount = false, $is_complete = false)\n    {\n        $paypal_order = PayPalOrder::getOrderById((int) $id_order);\n        if (!$this->isPayPalAPIAvailable() || !$paypal_order) {\n            return false;\n        }\n\n        $order = new Order((int) $id_order);\n        $currency = new Currency((int) $order->id_currency);\n\n        if (!$capture_amount) {\n            $capture_amount = (float) $order->total_paid;\n        }\n\n        $sql = 'SELECT transaction\n            FROM '._DB_PREFIX_.'paypal_braintree\n            WHERE id_order = '.(int)$id_order;\n\n        $transaction_braintree = Db::getInstance()->getValue($sql);\n\n        if ($transaction_braintree) {\n            include_once(_PS_MODULE_DIR_.'paypal/classes/Braintree.php');\n            $braintree = new PrestaBraintree();\n            $result_transaction = $braintree->submitForSettlement($transaction_braintree, $capture_amount);\n            if (!$result_transaction) {\n                if ($braintree->error == 'Authorization_expired') {\n                    die(Tools::displayError($this->l('The authorization of the banking transaction has expired. For more information, please refer to the expiration cases.')));\n                }\n            }\n\n            $captureBraintree = new PaypalCapture();\n            $captureBraintree->id_order = (int)$id_order;\n            $captureBraintree->capture_amount = (float)$capture_amount;\n            $captureBraintree->result = 'Completed';\n            $captureBraintree->save();\n\n\n            if (!($captureBraintree->getRestToCapture($captureBraintree->id_order))) {\n                //plus d'argent a capturer\n                if (!Db::getInstance()->Execute(\n                    'UPDATE `' . _DB_PREFIX_ . 'paypal_order`\n                        SET `capture` = 0, `payment_status` = \\'Completed\\'\n                        WHERE `id_order` = ' . (int)$id_order\n                )\n                ) {\n                    die(Tools::displayError('Error when updating PayPal database'));\n                }\n\n                $order_history = new OrderHistory();\n                $order_history->id_order = (int)$id_order;\n\n                if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                    $order_history->changeIdOrderState(Configuration::get('PAYPAL_BT_OS_AUTHORIZATION'), (int)$id_order);\n                } else {\n                    $order_history->changeIdOrderState(Configuration::get('PAYPAL_BT_OS_AUTHORIZATION'), $order);\n                }\n\n                $order_history->addWithemail();\n                $message = $this->l('Order finished with PayPal!');\n            }\n        } else {\n            $complete = 'Complete';\n            if (!$is_complete) {\n                $complete = 'NotComplete';\n            }\n\n            $paypal_lib = new PaypalLib();\n            $response = $paypal_lib->makeCall(\n                $this->getAPIURL(),\n                $this->getAPIScript(),\n                'DoCapture',\n                '&' . http_build_query(array('AMT' => $capture_amount, 'AUTHORIZATIONID' => $paypal_order['id_transaction'], 'CURRENCYCODE' => $currency->iso_code, 'COMPLETETYPE' => $complete), '', '&')\n            );\n            $message = $this->l('Capture operation result:') . '<br>';\n\n            foreach ($response as $key => $value) {\n                $message .= $key . ': ' . $value . '<br>';\n            }\n\n            $capture = new PaypalCapture();\n            $capture->id_order = (int)$id_order;\n            $capture->capture_amount = (float)$capture_amount;\n\n            if ((array_key_exists('ACK', $response)) && ($response['ACK'] == 'Success')\n                && ($response['PAYMENTSTATUS'] == 'Completed')\n            ) {\n                $capture->result = pSQL($response['PAYMENTSTATUS']);\n                if ($capture->save()) {\n                    if (!($capture->getRestToCapture($capture->id_order))) {\n                        //plus d'argent a capturer\n                        if (!Db::getInstance()->Execute(\n                            'UPDATE `' . _DB_PREFIX_ . 'paypal_order`\n                        SET `capture` = 0, `payment_status` = \\'' . pSQL($response['PAYMENTSTATUS']) . '\\', `id_transaction` = \\'' . pSQL($response['TRANSACTIONID']) . '\\'\n                        WHERE `id_order` = ' . (int)$id_order\n                        )\n                        ) {\n                            die(Tools::displayError('Error when updating PayPal database'));\n                        }\n\n                        $order_history = new OrderHistory();\n                        $order_history->id_order = (int)$id_order;\n\n                        if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                            $order_history->changeIdOrderState(Configuration::get('PS_OS_WS_PAYMENT'), (int)$id_order);\n                        } else {\n                            $order_history->changeIdOrderState(Configuration::get('PS_OS_WS_PAYMENT'), $order);\n                        }\n\n                        $order_history->addWithemail();\n                        $message .= $this->l('Order finished with PayPal!');\n                    }\n                }\n            } elseif (isset($response['PAYMENTSTATUS'])) {\n                $capture->result = pSQL($response['PAYMENTSTATUS']);\n                $capture->save();\n                $message .= $this->l('Transaction error!');\n            }\n\n            $this->_addNewPrivateMessage((int)$id_order, $message);\n        }\n        Tools::redirect($_SERVER['HTTP_REFERER']);\n    }\n\n    private function _updatePaymentStatusOfOrder($id_order)\n    {\n        if (!(bool) $id_order || !$this->isPayPalAPIAvailable()) {\n            return false;\n        }\n\n        $paypal_order = PayPalOrder::getOrderById((int) $id_order);\n        if (!$paypal_order) {\n            return false;\n        }\n\n        $paypal_lib = new PaypalLib();\n        $response = $paypal_lib->makeCall(\n            $this->getAPIURL(),\n            $this->getAPIScript(),\n            'GetTransactionDetails',\n            '&'.http_build_query(array('TRANSACTIONID' => $paypal_order['id_transaction']), '', '&')\n        );\n\n        if (array_key_exists('ACK', $response)) {\n            if ($response['ACK'] == 'Success' && isset($response['PAYMENTSTATUS'])) {\n                $history = new OrderHistory();\n                $history->id_order = (int) $id_order;\n\n                if ($response['PAYMENTSTATUS'] == 'Completed') {\n                    $history->changeIdOrderState(Configuration::get('PS_OS_PAYMENT'), (int) $id_order);\n                } elseif (($response['PAYMENTSTATUS'] == 'Pending') && ($response['PENDINGREASON']\n                    == 'authorization')) {\n                    $history->changeIdOrderState((int) (Configuration::get('PAYPAL_OS_AUTHORIZATION')), (int) $id_order);\n                } elseif ($response['PAYMENTSTATUS'] == 'Reversed') {\n                    $history->changeIdOrderState(Configuration::get('PS_OS_ERROR'), (int) $id_order);\n                }\n\n                $history->addWithemail();\n\n                if (!Db::getInstance()->Execute(\n                    'UPDATE `'._DB_PREFIX_.'paypal_order`\n                    SET `payment_status` = \\''.pSQL($response['PAYMENTSTATUS']).($response['PENDINGREASON'] == 'authorization' ? '_authorization' : '').'\\'\n                    WHERE `id_order` = '.(int) $id_order\n                )\n                ) {\n                    die(Tools::displayError('Error when updating PayPal database'));\n                }\n            }\n\n            $message = $this->l('Verification status :').'<br>';\n            $this->formatMessage($response, $message);\n            $this->_addNewPrivateMessage((int) $id_order, $message);\n\n            return $response;\n        }\n\n        return false;\n    }\n\n    public function fetchTemplate($name)\n    {\n        if (version_compare(_PS_VERSION_, '1.4', '<')) {\n            $this->context->smarty->currentTemplate = $name;\n        } elseif (version_compare(_PS_VERSION_, '1.5', '<')) {\n            $views = 'views/templates/';\n            if (@filemtime(dirname(__FILE__).'/'.$name)) {\n                return $this->display(__FILE__, $name);\n            } elseif (@filemtime(dirname(__FILE__).'/'.$views.'hook/'.$name)) {\n                return $this->display(__FILE__, $views.'hook/'.$name);\n            } elseif (@filemtime(dirname(__FILE__).'/'.$views.'front/'.$name)) {\n                return $this->display(__FILE__, $views.'front/'.$name);\n            } elseif (@filemtime(dirname(__FILE__).'/'.$views.'admin/'.$name)) {\n                return $this->display(__FILE__, $views.'admin/'.$name);\n            }\n        }\n        return $this->display(__FILE__, $name);\n    }\n\n    public static function getPayPalCustomerIdByEmail($email)\n    {\n        return Db::getInstance()->getValue(\n            'SELECT `id_customer`\n            FROM `'._DB_PREFIX_.'paypal_customer`\n            WHERE paypal_email = \\''.pSQL($email).'\\''\n        );\n    }\n\n    public static function getPayPalEmailByIdCustomer($id_customer)\n    {\n        return Db::getInstance()->getValue(\n            'SELECT `paypal_email`\n            FROM `'._DB_PREFIX_.'paypal_customer`\n            WHERE `id_customer` = '.(int) $id_customer\n        );\n    }\n\n    public static function addPayPalCustomer($id_customer, $email)\n    {\n        if (!PayPal::getPayPalEmailByIdCustomer($id_customer)) {\n            Db::getInstance()->Execute(\n                'INSERT INTO `'._DB_PREFIX_.'paypal_customer` (`id_customer`, `paypal_email`)\n                VALUES('.(int) $id_customer.', \\''.pSQL($email).'\\')'\n            );\n\n            return Db::getInstance()->Insert_ID();\n        }\n\n        return false;\n    }\n\n    private function warningsCheck()\n    {\n        if (Configuration::get('PAYPAL_PAYMENT_METHOD') == HSS && Configuration::get('PAYPAL_BUSINESS_ACCOUNT') == 'paypal@prestashop.com') {\n            $this->warning = $this->l('You are currently using the default PayPal e-mail address, please enter your own e-mail address.').'<br />';\n        }\n\n        /* Check preactivation warning */\n        if (Configuration::get('PS_PREACTIVATION_PAYPAL_WARNING')) {\n            $this->warning .= (!empty($this->warning)) ? ', ' : Configuration::get('PS_PREACTIVATION_PAYPAL_WARNING').'<br />';\n        }\n\n        if (!function_exists('curl_init')) {\n            $this->warning .= $this->l('In order to use your module, please activate cURL (PHP extension)');\n        }\n    }\n\n    private function loadLangDefault()\n    {\n        $this->default_country = (int) Configuration::get('PS_COUNTRY_DEFAULT');\n        $country = new Country($this->default_country);\n        $this->iso_code = Tools::strtoupper($country->iso_code);\n    }\n\n    public function formatMessage($response, &$message)\n    {\n        foreach ($response as $key => $value) {\n            $message .= $key.': '.$value.'<br>';\n        }\n    }\n\n    private function checkCurrency($cart)\n    {\n        $currency_module = $this->getCurrency((int) $cart->id_currency);\n\n        if ((int) $cart->id_currency == (int) $currency_module->id) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public static function getShopDomainSsl($http = false, $entities = false)\n    {\n        if (method_exists('Tools', 'getShopDomainSsl')) {\n            return Tools::getShopDomainSsl($http, $entities);\n        } else {\n            if (!($domain = Configuration::get('PS_SHOP_DOMAIN_SSL'))) {\n                $domain = self::getHttpHost();\n            }\n\n            if ($entities) {\n                $domain = htmlspecialchars($domain, ENT_COMPAT, 'UTF-8');\n            }\n\n            if ($http) {\n                $domain = (Configuration::get('PS_SSL_ENABLED') ? 'https://' : 'http://').$domain;\n            }\n\n            return $domain;\n        }\n    }\n\n    public function validateOrder($id_cart, $id_order_state, $amount_paid, $payment_method = 'Unknown', $message = null, $transaction = array(), $currency_special = null, $dont_touch_amount = false, $secure_key = false, Shop $shop = null)\n    {\n        if ($this->active) {\n            // Set transaction details if pcc is defined in PaymentModule class_exists\n            if (isset($this->pcc)) {\n                $this->pcc->transaction_id = (isset($transaction['transaction_id']) ? $transaction['transaction_id'] : '');\n            }\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                parent::validateOrder(\n                    (int) $id_cart,\n                    (int) $id_order_state,\n                    (float) $amount_paid,\n                    $payment_method,\n                    $message,\n                    $transaction,\n                    $currency_special,\n                    $dont_touch_amount,\n                    $secure_key\n                );\n            } else {\n                parent::validateOrder(\n                    (int) $id_cart,\n                    (int) $id_order_state,\n                    (float) $amount_paid,\n                    $payment_method,\n                    $message,\n                    $transaction,\n                    $currency_special,\n                    $dont_touch_amount,\n                    $secure_key,\n                    $shop\n                );\n            }\n\n            if (count($transaction) > 0) {\n                /*var_dump($transaction);\n                die();*/\n\n                PayPalOrder::saveOrder((int) $this->currentOrder, $transaction);\n            }\n\n            $this->setPayPalAsConfigured();\n        }\n    }\n\n    protected function getGiftWrappingPrice()\n    {\n        if (version_compare(_PS_VERSION_, '1.5.3.0', '>=')) {\n            $wrapping_fees_tax_inc = $this->context->cart->getGiftWrappingPrice();\n        } else {\n            $wrapping_fees = (float) (Configuration::get('PS_GIFT_WRAPPING_PRICE'));\n            $wrapping_fees_tax = new Tax((int) (Configuration::get('PS_GIFT_WRAPPING_TAX')));\n            $wrapping_fees_tax_inc = $wrapping_fees * (1 + (((float) ($wrapping_fees_tax->rate) / 100)));\n        }\n\n        return (float) Tools::convertPrice($wrapping_fees_tax_inc, $this->context->currency);\n    }\n\n    public function redirectToConfirmation()\n    {\n        $shop_url = PayPal::getShopDomainSsl(true, true);\n\n        // Check if user went through the payment preparation detail and completed it\n        $detail = unserialize($this->context->cookie->express_checkout);\n\n        if (!empty($detail['payer_id']) && !empty($detail['token'])) {\n            $values = array('get_confirmation' => true);\n            $link = $shop_url._MODULE_DIR_.$this->name.'/express_checkout/payment.php';\n\n            if (version_compare(_PS_VERSION_, '1.5', '<')) {\n                Tools::redirectLink($link.'?'.http_build_query($values, '', '&'));\n            } else {\n                Tools::redirect(Context::getContext()->link->getModuleLink('paypal', 'confirm', $values));\n            }\n        }\n    }\n\n    /**\n     * Check if the current page use SSL connection on not\n     *\n     * @return bool uses SSL\n     */\n    public function usingSecureMode()\n    {\n        if (isset($_SERVER['HTTPS'])) {\n            return ($_SERVER['HTTPS'] == 1 || Tools::strtolower($_SERVER['HTTPS']) == 'on');\n        }\n\n        // $_SERVER['SSL'] exists only in some specific configuration\n        if (isset($_SERVER['SSL'])) {\n            return ($_SERVER['SSL'] == 1 || Tools::strtolower($_SERVER['SSL']) == 'on');\n        }\n\n        return false;\n    }\n\n    protected function getCurrentUrl()\n    {\n        $protocol_link = $this->usingSecureMode() ? 'https://' : 'http://';\n        $request = $_SERVER['REQUEST_URI'];\n        $pos = strpos($request, '?');\n\n        if (($pos !== false) && ($pos >= 0)) {\n            $request = Tools::substr($request, 0, $pos);\n        }\n\n        $params = urlencode($_SERVER['QUERY_STRING']);\n        if ($params) {\n            $url = $protocol_link.Tools::getShopDomainSsl().$request.'?'.$params;\n        } else {\n            $url = $protocol_link.Tools::getShopDomainSsl().$request;\n        }\n\n        return $url;\n    }\n\n    /**\n     * Use $this->comp instead of bccomp which is not added in all versions of PHP\n     * @param float $num1  number 1 to compare\n     * @param float $num2  number 2 to compare\n     * @param [type] $scale [description]\n     */\n    public function comp($num1, $num2, $scale = null)\n    {\n        // check if they're valid positive numbers, extract the whole numbers and decimals\n        if (!preg_match(\"/^\\+?(\\d+)(\\.\\d+)?$/\", $num1, $tmp1) || !preg_match(\"/^\\+?(\\d+)(\\.\\d+)?$/\", $num2, $tmp2)) {\n            return ('0');\n        }\n\n        // remove leading zeroes from whole numbers\n        $num1 = ltrim($tmp1[1], '0');\n        $num2 = ltrim($tmp2[1], '0');\n\n        // first, we can just check the lengths of the numbers, this can help save processing time\n        // if $num1 is longer than $num2, return 1.. vice versa with the next step.\n        if (Tools::strlen($num1) > Tools::strlen($num2)) {\n            return 1;\n        } else {\n            if (Tools::strlen($num1) < Tools::strlen($num2)) {\n                return -1;\n            } else {\n                // if the two numbers are of equal length, we check digit-by-digit\n\n                // remove ending zeroes from decimals and remove point\n                $dec1 = isset($tmp1[2]) ? rtrim(Tools::substr($tmp1[2], 1), '0') : '';\n                $dec2 = isset($tmp2[2]) ? rtrim(Tools::substr($tmp2[2], 1), '0') : '';\n\n                // if the user defined $scale, then make sure we use that only\n                if ($scale != null) {\n                    $dec1 = Tools::substr($dec1, 0, $scale);\n                    $dec2 = Tools::substr($dec2, 0, $scale);\n                }\n\n                // calculate the longest length of decimals\n                $d_len = max(Tools::strlen($dec1), Tools::strlen($dec2));\n\n                // append the padded decimals onto the end of the whole numbers\n                $num1 .= str_pad($dec1, $d_len, '0');\n                $num2 .= str_pad($dec2, $d_len, '0');\n\n                // check digit-by-digit, if they have a difference, return 1 or -1 (greater/lower than)\n                for ($i = 0; $i < Tools::strlen($num1); $i++) {\n                    if ((int) $num1{$i} > (int) $num2{$i}) {\n                        return 1;\n                    } elseif ((int) $num1{$i} < (int) $num2{$i}) {\n                        return -1;\n                    }\n                }\n                // if the two numbers have no difference (they're the same).. return 0\n                return 0;\n            }\n        }\n    }\n\n    public function assignCartSummary()\n    {\n        $currency = new Currency((int) $this->context->cart->id_currency);\n\n        $this->context->smarty->assign(array(\n            'total' => Tools::displayPrice($this->context->cart->getOrderTotal(true), $currency),\n            'logos' => $this->paypal_logos->getLogos(),\n            'use_mobile' => (bool) $this->useMobile(),\n            'address_shipping' => new Address($this->context->cart->id_address_delivery),\n            'address_billing' => new Address($this->context->cart->id_address_invoice),\n            'cart' => $this->context->cart,\n            'patternRules' => array('avoid' => array()),\n            'cart_image_size' => version_compare(_PS_VERSION_, '1.5', '<') ? 'small' : version_compare(_PS_VERSION_, '1.6', '<') ? ImageType::getFormatedName('small') : ImageType::getFormatedName('cart'),\n            'useStyle14' => version_compare(_PS_VERSION_, '1.5', '<'),\n            'useStyle15' => version_compare(_PS_VERSION_, '1.5', '>') && version_compare(_PS_VERSION_, '1.6', '<'),\n        ));\n\n        $this->context->smarty->assign(array(\n            'paypal_cart_summary' => $this->display(__FILE__, 'views/templates/hook/paypal_cart_summary.tpl'),\n        ));\n    }\n\n    public function set_good_context()\n    {\n        $account_braintree = Tools::jsonDecode(Configuration::get('PAYPAL_ACCOUNT_BRAINTREE'), true);\n        $currency = new Currency($this->context->cart->id_currency);\n        $this->context_modified = false;\n        $this->id_currency_origin_cart = $this->context->cart->id_currency;\n        $this->id_currency_origin_cookie = $this->context->cookie->id_currency;\n\n        return $account_braintree[$currency->iso_code];\n    }\n\n    public function reset_context()\n    {\n        if ($this->context_modified) {\n            $this->context->cart->id_currency = $this->id_currency_origin_cart;\n            $this->context->cookie->id_currency = $this->id_currency_origin_cookie;\n        }\n    }\n\n    // FOR PRESTASHOP 1.4\n    public function hookPDFInvoice($params)\n    {\n        return $this->hookDisplayPDFInvoice($params);\n    }\n\n    public function hookDisplayPDFInvoice($params)\n    {\n        $order_detail = PaypalPlusPui::getByIdOrder($params['object']->id_order);\n        $information = Tools::jsonDecode($order_detail['pui_informations'], true);\n        if ($information['recipient_banking_instruction']['bank_name']) {\n            $tab = '<table style=\"border: solid 1pt black; padding:0 10pt\">\n    <tr><td></td><td></td></tr>\n    <tr><td><b>'.$this->l('Bank name').'</b></td><td>'.$information['recipient_banking_instruction']['bank_name'].'</td></tr>\n    <tr><td><b>'.$this->l('Account holder name').'</b></td><td>'.$information['recipient_banking_instruction']['account_holder_name'].'</td></tr>\n    <tr><td><b>'.$this->l('IBAN').'</b></td><td>'.$information['recipient_banking_instruction']['international_bank_account_number'].'</td></tr>\n    <tr><td><b>'.$this->l('BIC').'</b></td><td>'.$information['recipient_banking_instruction']['bank_identifier_code'].'</td></tr>\n    <tr><td></td><td></td></tr>\n    <tr><td><b>'.$this->l('Amount due / currency').'</b></td><td>'.$information['amount']['value'].' '.$information['amount']['currency'].'</td></tr>\n    <tr><td><b>'.$this->l('Payment due date').'</b></td><td>'.$information['payment_due_date'].'</td></tr>\n    <tr><td><b>'.$this->l('reference').'</b></td><td>'.$information['reference_number'].'</td></tr>\n    <tr><td></td><td></td></tr>\n</table>';\n            return $tab;\n        }\n    }\n\n    public function hookActionBeforeCartUpdateQty($params)\n    {\n        if (isset($this->context->cookie->express_checkout)) {\n            //unset cookie of payment init if it's no more same cart\n            Context::getContext()->cookie->__unset('express_checkout');\n        }\n    }\n\n    public function setPsCheckoutMessageValue($value)\n    {\n        $notShowDetails = Configuration::get('PAYPAL_NOT_SHOW_PS_CHECKOUT');\n\n        if (is_string($notShowDetails)) {\n            try {\n                $notShowDetailsArray = json_decode($notShowDetails, true);\n                $notShowDetailsArray[$this->version] = $value;\n            } catch (Exception $e) {\n                $notShowDetailsArray = [$this->version => $value];\n            }\n        } else {\n            $notShowDetailsArray = [$this->version => $value];\n        }\n\n        return Configuration::updateValue('PAYPAL_NOT_SHOW_PS_CHECKOUT', json_encode($notShowDetailsArray));\n    }\n\n    public function showPsCheckoutMessage()\n    {\n        $countryDefault = new Country((int)\\Configuration::get('PS_COUNTRY_DEFAULT'), $this->context->language->id);\n        $notShowDetails = Configuration::get('PAYPAL_NOT_SHOW_PS_CHECKOUT');\n\n        if (is_string($notShowDetails)) {\n            try {\n                $notShowDetailsArray = json_decode($notShowDetails, true);\n                $notShowPsCheckout = isset($notShowDetailsArray[$this->version]) ? (bool)$notShowDetailsArray[$this->version] : false;\n            } catch (Exception $e) {\n                $notShowPsCheckout = false;\n            }\n        } else {\n            $notShowPsCheckout = false;\n        }\n\n        return in_array($countryDefault->iso_code, $this->psCheckoutCountry) && ($notShowPsCheckout == false);\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isShowInstallmentSetting()\n    {\n        $countryDefault = new Country((int)Configuration::get('PS_COUNTRY_DEFAULT'));\n\n        if (in_array(Tools::strtolower($countryDefault->iso_code), ConfigurationMap::getAllowedCountries())) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @return bool\n     */\n    protected function isShowInstallmentPopup()\n    {\n        $countryDefault = new Country((int)Configuration::get('PS_COUNTRY_DEFAULT', null, null, $this->context->shop->id));\n\n        if (Validate::isLoadedObject($countryDefault) === false) {\n            return false;\n        }\n\n        if (Tools::strtolower($countryDefault->iso_code) != 'fr') {\n            return false;\n        }\n\n        if (false == (int)Configuration::get('PAYPAL_SHOW_INSTALLMENT_POPUP', null, null, $this->context->shop->id)) {\n            return false;\n        }\n\n        Configuration::updateValue('PAYPAL_SHOW_INSTALLMENT_POPUP', 0, false, null, $this->context->shop->id);\n        return true;\n    }\n}\n"], "filenames": ["ipn.php", "paypal.php"], "buggy_code_start_loc": [258, 1929], "buggy_code_end_loc": [259, 1930], "fixing_code_start_loc": [258, 1929], "fixing_code_end_loc": [259, 1930], "type": "CWE-89", "message": "PrestaShop/paypal is an open source module for the PrestaShop web commerce ecosystem which provides paypal payment support. A SQL injection vulnerability found in the PrestaShop paypal module from release from 3.12.0 to and including 3.16.3 allow a remote attacker to gain privileges, modify data, and potentially affect system availability. The cause of this issue is that SQL queries were being constructed with user input which had not been properly filtered. Only deployments on PrestaShop 1.6 are affected. Users are advised to upgrade to module version 3.16.4. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-28843", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-31T18:15:07.093", "lastModified": "2023-04-07T18:01:50.077", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop/paypal is an open source module for the PrestaShop web commerce ecosystem which provides paypal payment support. A SQL injection vulnerability found in the PrestaShop paypal module from release from 3.12.0 to and including 3.16.3 allow a remote attacker to gain privileges, modify data, and potentially affect system availability. The cause of this issue is that SQL queries were being constructed with user input which had not been properly filtered. Only deployments on PrestaShop 1.6 are affected. Users are advised to upgrade to module version 3.16.4. There are no known workarounds for this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:202-ecommerce:paypal:*:*:*:*:*:prestashop:*:*", "versionStartIncluding": "3.12.0", "versionEndExcluding": "3.16.4", "matchCriteriaId": "25A2149B-EE06-4764-A1B4-B19A7E9180DA"}]}]}], "references": [{"url": "https://github.com/202ecommerce/paypal/commit/2f6884ea1d0fe4b58441699fcc1d6c56c7d733eb", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/202ecommerce/paypal/security/advisories/GHSA-66pc-8gh8-mx7m", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/202ecommerce/paypal/commit/2f6884ea1d0fe4b58441699fcc1d6c56c7d733eb"}}