{"buggy_code": ["14/01/2022:\n\t- Detection of HTJ2K also added for KakaduImage.cc for logging purposes (DEBUG needs to be enabled at compile time)\n\n\n07/01/2022:\n\t- Added detection of HTJ2K streams to OpenJPEG.cc for logging purposes (DEBUG needs to be enabled at compile time)\n\n\n14/09/2021:\n\t- Fix to use C99 stdint types instead of deprecated libtiff types\n\n\n13/09/2021:\n\t- Added extra error-checking to TIFFSetDirectory()\n\n\n03/09/2021:\n\t- Handle the more stringent ICC profile checking introduced in libpng 1.6. Fix to prevent incorrect sRGB\n\t  profiles failing with an error.\n\n\n06/07/2021:\n\t- Added support for PNG output. Functionality available through the CVT command (CVT=png) as well as through IIIF API.\n\t  PNG encoder supports alpha channels, 8 or 16 bit output, ICC profiles and XMP metadata.\n\n\n02/07/2021:\n\t- Small modification to Compressor class and removal of duplicate quality parameter from JPEGCompressor class\n\n\n28/04/2021:\n\t- Additional type casting added to IIIF.cc to avoid compiler warnings\n\n\n21/04/2021:\n\t- Modified log transform function in Transform.cc to set appropriate input scaling for 8 bit output\n\n\n13/04/2021:\n\t- Switched all FCGI printf statements to putStr or putS as all string data is always pre-formatted before\n\t  being sent. This is not only more efficient, but also elinates the risk of uncontrolled format string injection.\n\n\n11/03/2021:\n\t- Extra checks within bilinear interpolation code to avoid problems when used with address-sanitizer.\n\t- Re-ordering to fix incoherent rendering of content-disposition in IIPResponse.cc.\n\n\n04/03/2021:\n\t- Minor logging changes to TileManager class to allow improve logging with very detailed logging now moved into\n\t  higher loglevel.\n\n\n01/03/2012:\n\t- Modified JPEGCompressor::Finish() class to calculate data size before destroying compression structure.\n\t  Avoids complaints when using address-sanitizer complilation flag.\n\n\n13/02/2021:\n\t- Added logarithm transform processing to Transform.cc using the formula: out = c*log(1+in).\n\t  Log transform can be requested by setting the gamma request to GAM=log or GAM=logarithm.\n\n\n03/02/2021:\n\t- Added round() definition to JPEGCompressor.cc to allow MSVC compilation: https://github.com/ruven/iipsrv/issues/205\n\n\n27/06/2020:\n\t- Trailing query suffixes using the ? character are now stripped off the IIIF quality/format string.\n\t  Fixes: https://github.com/ruven/iipsrv/issues/145\n\n\n26/06/2020:\n\t- JPEG encoding re-written. Now more efficient with compressed data put directly into\n\t  output memory with no intermediate buffering and superfluous memory-memory copying.\n\t  Change also fixes problem with large ICC profiles: https://github.com/ruven/iipsrv/issues/198\n\n\n23/06/2020:\n\t- Fixed incorrect resizing in IIIF when provided with -ve parameters.\n\t  Fixes: https://github.com/ruven/iipsrv/issues/201.\n\n\n01/05/2020:\n\t- Corrected media type for ld+json response in IIIF.cc.\n\t  Fixes: https://github.com/ruven/iipsrv/issues/199\n\n\n06/03/2020:\n\t- Added % escaping to URL::escape() function to avoid problems with FCGI's printf()\n\t  Fixes https://github.com/ruven/iipsrv/issues/195\n\n\n25/02/2020:\n\t- Change return of createHTTPHeader function due to lack on stringstream\n\t  copying in older versions of GCC.\n\n\n21/02/2020:\n\t- New utility function in IIPResponse class to generate HTTP headers,\n\t  avoiding repetition within Zoomify, Deepzoom, IIIF code etc.\n\n\n19/02/2020:\n\t- Added CORS headers to both Zoomify and Deepzoom XML info files\n\n\n18/02/2020:\n\t- Added capture resolution info from JPEG2000 images when using Kakadu\n\n\n17/02/2020:\n\t- Physical image resolution in DPI or pixels/cm is now extracted from source image\n\t  (TIFF only for now) and used to calculate appropriate DPI for current zooming level\n\t  and injected into output JPEG metadata (https://github.com/ruven/iipsrv/issues/191)\n\n\n07/02/2020:\n\t- Added ability to change HTTP status code in IIPResponse class and\n\t  changed empty request reponse to 200 (https://github.com/ruven/iipsrv/issues/190)\n\n\n27/01/2020:\n\t- Added content-negotiation to IIIF info.json retrieval. If an IIIF\n\t  context profile has been added to the HTTP Accept headers, the\n\t  specified version will be used.\n\t- Also added ability to disable caching. All info.json responses now\n\t  not cached by Memcached and Content-Control header is set to private.\n\n\n23/01/2020:\n\t- Refactored and corrected resolution calculation code in View class\n\t- Added IIIF_VERSION server directive and support for v3 info.json\n\n\n21/01/2020:\n\t- Changes to standardize error messages in TPTImage class\n\n\n17/01/2020:\n\t- Modified MAX_CVT startup variable. Values can now be set all the way\n\t  down to 1px. Also possible to set to -1 to disable all limits\n\n\n10/10/2019:\n\t- Added CORS header to PFL profile output\n\n\n19/12/2019:\n\t- Switched indices to unsigned long long in interpolation routines in\n\t  Transform.cc to better handle very large image requests. Also added\n\t  memory allocation exception handling in Main.cc\n\n\n04/12/2019:\n\t- Added FILESYSTEM_SUFFIX configuration variable.\n\n\n04/07/2019:\n\t- Updated homepage URLs.\n\t- Forced Content-type for error messages to client text/plain to avoid\n\t  potential XSS issues.\n\n\n24/03/2019: Version 1.1 Released\n\n\n20/06/2019:\n\t- Documentation updates for doxygen\n\n\n13/06/2019:\n\t- Re-factored to display Logger output type availability at configure stage.\n\t- SIGHUP signal now empties internal caches rather than terminates iipsrv.\n\n\n12/06/2019:\n\t- Fix to avoid unnecessary conversion to binary when image already binary.\n\t- Update to OpenJPEG code to fix problem when re-using codec structures\n\t  more than once in the same request (for example when calculating histogram).\n\n\n11/06/2019:\n\t- Fixes to eliminate Coverity static scan analysis warnings.\n\t- New rewritten OpenJPEG module: now faster, cleaner and correctly\n\t  handles ICC profiles, bilevel and 16 bit images. Now activated by\n\t  default if OpenJPEG library found and Kakadu not requested.\n\n\n13/05/2019:\n\t- Update to configure.ac to change AC_CHECK_FILE for Kakadu sources to\n\t  AS_IF to properly enable cross builds. Patched thanks to Helmut Grohne.\n\n\n23/02/2019:\n\t- Added test for resolutions that may be untiled within a tiled TIFF.\n\n\n01/04/2019:\n\t- Added Logger class, which replaces the previous raw ofstream. The class\n\t  includes functionality to output log to syslog on UNIX-type systems.\n\t  Pass \"syslog\" to the LOGFILE startup environment variable to use syslog.\n\t- Minor code changes for Windows MSVC compilation\n\n\n19/03/2019:\n\t- Small increase in temporary buffer size in OBJ.cc colorspace() function\n\t  to avoid truncation warning in GCC 8.2\n\n\n13/03/2019:\n\t- Fixed bug in vertical mirroring transformation\n\t- Minor change to IIIF square parsing to allow correct logging\n\n\n25/02/2019:\n\t- Added check for overly large XMP sizes in JPEGCompressor.cc\n\n\n20/02/2019:\n\t- Fixed rounding error in getViewWidth() / getViewHeight() which was causing\n\t  certain IIIF requests to be handled by CVT rather than JTL. See:\n          https://github.com/ruven/iipsrv/issues/148#issuecomment-453125005\n\t- Adding missing default initialization for kdu_readmode variable.\n\n\n15/02/2019:\n\t- Changed exit code after signal handling for clean shutdown when iipsrv used\n\t  with systemd.\n\n\n15/01/2019:\n\t- Added \"bitonal\" to list of available qualities in the IIIF info.json file and\n\t  replaced use of pow with a faster bitwise shift.\n\n\n09/01/2019:\n\t- Added ability to do contrast stretching and histogram equalization via extensions\n\t  to the CNT command (CNT=EQ and CNT=ST respectively). Also added new IIP command to\n\t  enable color space conversion to greyscale or binary (aka bi-level or bitonal) via\n\t  the COL command (COL=grey or COL=binary). Image histogram is calculated once when\n\t  needed and saved in the image cache.\n\n\n21/12/2018:\n\t- Added fix for rounding error in CVT.cc to avoid garbled last lines in region\n\t  requests for very large images.\n\n\n30/11/2018:\n\t- Added maxWidth and maxHeight IIIF API 2.1 directives to info.json.\n\n\n13/11/2018:\n\t- Converted RawTile dataLength variable to unsigned to improve overflow\n\t  avoidance as per https://github.com/ruven/iipsrv/pull/156\n\t- Added Visual Studio version check to round() implementation in\n\t  windows/Time.cc as now supported in recent versions.\n\n\n12/11/2018:\n\t- Refactored image procesing code. Transform functions are now encapsulated\n\t  within a struct to allow new processing engines to be more easily added.\n\t- Cleanup to Environment.h to remove redundant comparison as readmode is\n\t  declared unsigned and can never be less than 0.\n\n\n05/11/2018:\n\t- Added codecOptions list to Session class for setting options for the encoders\n\t  or decoders. Added KDU_READMODE environment variable for setting the Kakadu\n\t  read-mode in KakaduImage.cc. Options are 0 (fast), 1 (fussy) or 2 (resilient).\n\n\n23/07/2018:\n\t- Fixed incorrect big endian TIFF file signature.\n\n\n27/04/2018:\n\t- Updates to Windows build files: removed Kakadu dependencies.\n\t- Added version check for snprintf Windows redefinition as this is now\n\t  supported in recent versions of Visual Studio.\n\n\n18/12/2017:\n\t- Added missing snprintf definition for Windows in JPEGCompressor.h\n\n\n14/12/2017:\n\t- Added the \"max\" parameter for the size section to the IIIF parser ahead of\n\t  deprecation in IIIF version 3.0: http://iiif.io/api/image/2.1/#size\n\t- Fixed some spelling mistakes in various files - thanks to Stefan Weil\n\n\n13/12/2017:\n\t- Update to configure.ac to fix compilation with Kakadu 7.10\n\n\n28/11/2017:\n\t- Modified bilinear interpolation code to avoid risk of unallocated buffer\n\t  reads at edges and to use replicated pixels.\n\n\n26/11/2017:\n\t- Removed exception specifications from the IIPImage and Compressor class\n\t  declarations as well as from their derived classes. Dynamic exception\n\t  specifications are deprecated in C++11 onwards. See for rationale and details:\n\t  http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3051.html\n\n\n25/11/2017:\n\t- Added missing RED, GREEN and BLUE colormap implementations to Transforms.cc\n\n\n24/11/2017:\n\t- Added input validation for SPECTRA, PFL and MINMAX commands to avoid\n\t  possible access to unmapped memory - thanks to John Heasman at DocuSign.\n\n\n17/11/2017:\n\t- Added a check to KakaduImage.cc for zero-sized regions\n\n\n04/10/2017:\n\t- Set an upper size limit to ICC profiles accepted for embedding\n\n\n04/08/2017:\n\t- Increased JPEG buffer size to handle large markers such as XMP metadata.\n\t- XMP metadata size now reported in CVT.cc.\n\n\n14/07/2017:\n\t- Added Compressor class from which JPEGCompressor is now derived.\n\t  Abstracting this will enable easier integration of PNG output.\n\t  Output format now specified in View class.\n\n\n06/07/2017:\n\t- Enabled CORS for error responses.\n\n\n05/07/2017:\n\t- Added \"Access-Control-Allow-Headers\" field if CORS has been set to\n\t  fix CORS Ajax problems with js libraries such as JQuery, Mootools.\n\n\n02/07/2017:\n\t- Added OpenMP threading info to startup in Main.cc.\n\n\n30/06/2017:\n\t- Added ICC profile embedding support in JPEGCompressor for both JTL\n\t  and CVT commands using an implementation based on IJG's iccjpeg.\n\t  TPTImage and KakaduImage now extract the profile into the metadata map.\n\t  Added also new EMBED_ICC environment variable to allow user to disable\n\t  embedding. Thanks to Dave Beaudet for initial implementation.\n\t- Refactored XMP metadata handling within JPEG.\n\n\n23/06/2017:\n\t- Added new OBJ metadata request for IIP protocol to return full list\n\t  of existing image resolutions.\n\n\n19/06/2017:\n\t- Modified URI_MAP to parse this prefix first and only if not present,\n\t  to use the query string. This allows query strings to be appended for\n\t  caching purposes etc.\n\n\n14/06/2017:\n\t- Added URI_MAP environment variable to enable mapping of URL prefixes\n\t  to specific protocol handlers without requiring web server rewriting.\n\t- Added missing checkImage() function to JTL and harmonized with CVT.cc.\n\n\n12/06/2017:\n\t- Added try block to avoid crashes with malformed images in older\n\t  versions of Kakadu.\n\n\n05/04/2017:\n\t- Fixed crash in KakaduImage.cc when zero sized images are requested\n\n\n29/03/2017:\n\t- Fixed scaling factor for bilinear interpolation in Transforms.cc\n\n\n02/03/2017:\n\t- Added extra conditions to JTL uncompressed tile request and slightly\n\t  refactored code to fix bug when greyscale conversion requested\n\n\n08/02/2017:\n\t- Extra try/catch in KakaduImage for images with missing codestreams\n\n\n29/11/2016:\n\t- Another update to IIIF aspect ratio code\n\n\n28/11/2016:\n\t- Update to aspect ratio code for sizes exceeding max CVT limit\n\n\n18/11/2016:\n\t- Modified IIIF.cc to respect aspect ratio when only width or height size\n\t  parameter is given and size exceeds server max CVT limit.\n\n\n16/10/2016:\n\t- Added IIIF 2.1 square region support\n\n\n29/08/2016:\n\t- Fix to bug in rotation code for 270 degs introduced when parallelization added.\n\t- Added test for pkg-config to configure.ac script.\n\n\n10/08/2016:\n\t- Update to configure.ac script for OpenJPEG\n\n\n04/08/2016:\n\t- Fix to info.json code in IIIF.cc to avoid problems with images containing only\n\t  one resolution level.\n\t- Fixed bug in filter_contrast() due to incorrectly calculated buffer size.\n\n\n08/07/2016:\n\t- Removed \"gray\" from IIIF list of supported features - already specified in the\n\t  qualities list.\n\n\n07/06/2016:\n\t- Added fix for API change in get_colour_mapping() function in Kakadu version 7.8\n\n\n02/06/2016:\n\t- Type change of counter in filter_contrast to long to avoid overflows with large\n\t  image exports.\n\n\n22/03/2016: Version 1.0 Released\n\n\n08/03/2016:\n\t- Added sizes field to IIIF JSON responses giving list of exportable pyramid sizes\n\t  smaller than MAX_CVT.\n\n\n29/02/2016:\n\t- Added support for 1 bit bilevel TIFF\n\n\n11/02/2016:\n\t- Added backlog parameter support for command line use through --backlog parameter.\n\t- Fixed several more Coverity scan warnings.\n\n\n29/01/2016:\n\t- Minor update to IIPImage.cc to reduce risk of race condition in stat -> fopen calls\n\n\n28/01/2016:\n\t- Added ifdefs to Transform.cc to enforce either ivdep for icc or openmp for gcc\n\n\n15/01/2016:\n\t- Fixed a series of minor issues identified by Coverity scan\n\n\n12/01/2016:\n\t- Added check to JPEGCompressor to reject images that are not 8 bits per channel\n\t- Added new floatProcessing() function to View.h to simplify code in JTL and CVT\n\n\n06/01/2016:\n\t- Added extra parameter check for incoherent region sizes for IIIF protocol\n\n\n21/12/2015:\n\t- Fixed infinite loop in View::calculateResolution if requested size = 0. Set\n\t  minimum output size to 1px.\n\n\n07/09/2015:\n\t- Fixed isfinite autoconf macro in acinclude.m4 to force float type\n\n\n06/08/2015:\n\t- Added timestamp check and metadata reload for images that have been modified\n\t- Added X-Powered-By header as a number of web servers strip out the Server header\n\n\n03/08/2015:\n\t- Added palette support for bilevel images to handle cases where LUTs are inverted\n\n\n27/07/2015:\n\t- Modified ROT command to accept horizontal flipping through \"!\" prefix as with IIIF.\n\t- Cosmetic improvement to FIF logging.\n\t- Modified TPTImage to disable use of memory mapping when opening images as this seems\n\t  to be slower when opening very large TIFFs.\n\n\n24/07/2015:\n\t- Added timers to all image processing functions in CVT.cc + code cleanup.\n\n\n21/07/2015:\n\t- Fixed error in View.cc when setting regions sizes that extend beyond image boundaries:\n\t  regions now cropped to boundaries.\n\n\n20/07/2015:\n\t- More OpenMP parallelization and cleanups to Transform.cc\n\n\n17/07/2015:\n\t- Increased buffer memory for JPEG encoding to handle certain images or tiles that\n\t  encode at Q=100 to sizes significantly larger than the raw data.\n\t- Added new CACHE_CONTROL server parameter to allow user control over this. If not\n\t  set, it defaults to the previous default value of \"max-age=86400\".\n\t- More image processing routines now parallelized with OpenMP: bilinear interpolation,\n\t  for example, now parallelized and considerably faster.\n\n\n19/03/2015:\n\t- Fix to KakaduImage.cc to check for increases in stripe heights and make sure\n\t  sufficient memory is allocated.\n\n\n13/02/2015:\n\t- Added checks for NULL FCGX_GetParam results and to empty HTTP_IF_MODIFIED_SINCE.\n\t  See: https://github.com/ruven/iipsrv/issues/33 - thanks to Brian Helba.\n\n\n12/02/2015:\n\t- Fixed @id decoding in IIIF.cc for paths containing slashes\n\n\n19/01/2015:\n\t- Added missing <cctype> include in URL.h and replaced pow(2.0,x) with bit shifting in\n\t  KakaduImage.cc and View.cc. Now compiles cleanly with VisualStudio Express.\n\t- Added extra OpenMP parallel declarations to Transform.cc and autoconf directive to\n\t  enable OpenMP by default.\n\n\n09/01/2015:\n\t- Better logging for exceptions in Main.cc\n\n\n27/11/2014:\n\t- Added new magic identifier for BigTIFF images to IIPImage.cc\n\n\n25/11/2014:\n\t- Fix of rounding error problem in View.cc for calculating resolution level.\n\t- Fix to IIIF.cc to properly handle resolution 0 requests.\n\n\n24/11/2014:\n\t- Fix to TileManager.cc to properly calculate tile height for final row.\n\t- Updates to IIIF code to ensure tiles are properly detected.\n\t- Changes to View class to calculate regions from full resolution image.\n\n\n24/10/2014:\n\t- Updated MINMAX command syntax in Task.cc to channel:min,max\n\n\n22/10/2014:\n\t- Updated KakaduImage.cc to use Kakadu namespaces in version 7.5 and greater.\n\n\n05/09/2014:\n\t- Updated IIIF info.json output to be compliant with changed IIIF 2.0 specification.\n\n\n03/09/2014:\n\t- Fix to IIPImage.cc for file type detection for multispectral sequences.\n\n\n22/08/2014:\n\t- Fix to properly read 12 bit JP2 files.\n\t- KakaduImage's virtual_levels counter moved into IIPImage class.\n\t- Modification to properly read number of components in multi-band JPEG2000 images.\n\n\n21/08/2014:\n\t- Fixes to allow compilation on older versions of gcc.\n\n\n20/08/2014:\n\t- Cleanup to IIIF code and some cosmetic improvements to generated JSON.\n\t- Added string escape function to URL class and moved all environment variable access to\n\t  Main.cc.\n\n\n19/08/2014:\n\t- Added aspect ratio flag in View.h for use in CVT.cc. Also cleaned up Main.cc to remove\n\t  unnecessary logging and record extra http headers.\n\t- Added IIIF protocol version 2.0 support via the IIIF argument.\n\n\n13/08/2014:\n\t- The rotate filter only ever operates on 8bit data, so remove if else type statements from\n\t  function - increases average function speed by about around 15%.\n\t- Added missing URL.h to src/Makefile.am.\n\t- Refactored JTL into 2 separate functions: run (parses arguments) & send (performs tile\n\t  request, processing and sending). Allows this to be re-used in other functions, such as\n\t  Zoomify.cc etc.\n\t- Refactored CVT similarly to JTL with now a separate send() function.\n\n\n11/08/2014:\n\t- Renamed variable bpp in IIPImage and its derived classes to bpc (bits per channel),\n\t  which is more logical and how we have named things elsewhere.\n\t- Modification to TileManager, which was requesting more tiles than necessary for regions.\n\t- Changes to View.cc to make WID and HEI requests with region exports produce images with a\n\t  *final* size of that requested by WID or HEI. For example RGN=0.1,0.1,0.5,0.5&WID=500 will\n\t  now produce an image of 500px in width rather than extract the region from an image of size\n\t  500px wide. CVT also cleaned up.\n\n\n06/08/2014:\n\t- Updated exception handling to use std::invalid_argument and a new derived file_error\n\t  exception within the IIPImage and derived classes. Allows better distinguishing between\n\t  HTTP status errors.\n\t- Moved URL decoding code from FIF.cc to separate URL class in URL.h.\n\n\n05/08/2014:\n\t- Added flip function to Transforms.\n\t- Modified JTL, DeepZoom, Zoomify and CVT to avoid float conversion if not required.\n\t- Converted bilinear and nearest neighbour resize code to unsigned char to avoid\n\t  unnecessary conversion to float.\n\n\n30/07/2014:\n\t- Moved CTW processing function to before gamma function in JTL.cc and CVT.cc.\n\t- Added missing function comments and minor layout changes in Transform.cc and FIF.cc.\n\n\n24/07/2014:\n\t- Simplified the use of hash_map types and removed the customized hash function, which\n\t  was causing our image metadata cache to work incorrectly. Removed the const prefix from\n\t  all hash maps keys.\n\n\n20/07/2014:\n\t- Min Max values are now read as vectors in multiple channel images - thanks to Chiara Marmo.\n\n\n19/07/2014:\n\t- Added support for magic byte signature file format detection instead of relying on\n\t  the file path suffix. Images can now be named arbitrarily (though suffixes still used\n\t  for sequences). Format enum types added to IIPImage class.\n\n\n18/07/2014:\n\t- Fix for unusual JPEG2000 \"sRGB\" bilevel images.\n\n\n20/03/2014:\n\t- Fixed signed/unsigned comparison compiler warning in Task.cc.\n\n\n16/03/2014:\n\t- Added back missing <algorithm> include to Task.cc.\n\n\n12/03/2014:\n\t- Added ability to handle multi-band (>3 channel) images and added new CTW color twist\n\t  command that takes a matrix that is applied to each channel in the image.\n\t- Cleanup of and more comprehensive timing output within JTL.cc.\n\n\n08/03/2014:\n\t- Changes to resizing algorithms to enable expansions as well as shrink for all views\n\t  and regions.\n\t- Added CORS (Cross Origin Resource Sharing) support via CORS environment variable for\n\t  (AJAX) metadata requests.\n\n\n24/02/2014:\n\t- Added missing function timer to JTL.cc and increased output precision in PFL.cc to 9.\n\n\n24/01/2014:\n\t- Changes to IIPImage and KakaduImage constructors to force correct initialization of\n\t  the tile size.\n\t- Added missing std::isinfinite function for Windows Visual Studio compilation.\n\n\n17/01/2013:\n\t- Fix to rotation code to have array indices run fully down to zero when counting down.\n\t  Thanks to Michal Becak for spotting this.\n\n\n06/12/2013:\n\t- Minor fixes to PFL.cc to add extra error checking and eliminate compiler warnings.\n\n\n05/12/2013:\n\t- Another update to use the ISO C++11 version of unordered_map if available. Plus a bunch\n\t  of compiler warning clean-ups.\n\n\n04/12/2013:\n\t- Updated hash map definitions to try to use unordered_map if available and fall back to\n\t  hash_map or map. Now done more cleanly using autoconf detection.\n\n\n02/12/2013:\n\t- Changes to IIPImage, TPTImage and KakaduImage class contstructors to use more efficient\n\t  member initializer lists, which are also necessary for compilation with clang compiler.\n\n\n25/11/2013:\n\t- Bug on red/green/blue colormaps fixed. Adding colormap inversion function (Chiara Marmo).\n\n\n22/10/2013:\n\t- Bittype compatibility has been completely reviewed. After normalization all processing\n\t  is done in float (Chiara Marmo).\n\n\n07/09/2013:\n\t- Modified PFL to handle single points as well as profiles. Thus syntax for single\n\t  points: PFL=<resolution>:<x>,<y> and for profiles PFL=<resolution>:<x1>,<y1>-<x2>,<y2>\n\n\n03/09/2013:\n\t- Updated PFL command to also handle multi-spectral data.\n\n\n02/09/2013:\n\t- Modified PFL command to use JSON and implemented vertical profiles.\n\n\n28/08/2013:\n\t- Added PFL command for obtaining raw X profiles of data. Syntax\n\t  is <resolution>:<x1>,<y1>-<x2>,<y2>. Only horizontal profiles are supported so far.\n\n\n23/08/2013:\n\t- Fix to OpenMP code in Transform.cc for compatibility with Intel compiler - thanks\n\t  Emmanuel Bertin.\n\t- Addition of extra timing output in JTL.cc\n\n\n06/08/2013:\n\t- Moved setenv/unsetenv function definitions to Main.cc where they are now needed following\n\t  movement of timezone setting code there.\n\n\n31/07/2013:\n\t- Fix to JTL.cc and TPTImage.cc for multispectral sequences consisting of images of\n\t  different bit depths.\n\n\n23/07/2013:\n\t- Fix to KakaduImage.cc to enable correct handling of bilevel images.\n\t- Fix to quality layer decoding - variables moved directly into IIPImage class\n\t- Scaling of 8 and 16 bit spectral data to normalized 0.0->1.0 float in SPECTRA.cc\n\n\n08/07/2013:\n\t- Fix to configure.in for libmemcached configuration problem on Fedora.\n\n\n02/07/2013:\n        - Optimizations to FIF.cc. Unnecessary file header reading is now avoided as top\n          level IIPImage class cache fully utilized. Cleanup of constructor code of IIPImage,\n          TPTImage and KakaduImage code. Significant speed up to requests of cached images.\n        - Modification to if_modified_since code in FIF.cc, to avoid repeatedly resetting the\n          timezone environment variable to UTC when checking timestamps, which is a relatively\n          slow process. This is now set once globally in Main.cc and set back on main exit.\n\n\n12/06/2013:\n\t- Extra checks for malformed images in KakaduImage.cc.\n\n\n11/04/2013:\n\t- Several fixes to Kakadu.cc. To force resolution levels to be floor(x/2) rather than the default\n\t  ceil(x/2) to match how TIFF resolutions are created. Also modification to force 16 bit\n\t  JPEG2000 to unsigned output. And also fix to strip alpha channels from images.\n\n\n14/03/2013:\n\t- Fix to gamma conversion - thanks Chiara Marmo\n\t- Update to greyscale conversion code\n\n\n09/03/2013:\n\t- Updated copyright message in header to new Free Software Foundation address.\n\n\n08/03/2013:\n\t- Added greyscale conversion support via new filter_greyscale transform function.\n\n\n23/02/2013:\n\t- Gamma correction fixed, minmax commands added, colormap commands added (Chiara Marmo)\n\n\n30/01/2013:\n\t- Fix to prevent crashing on malformed JPEG2000 files.\n\n\n11/12/2012:\n\t- Changed FLOAT enum type to FLOATINGPOINT to avoid VC++ compiler error.\n\t- Implemented 16 and 32bit versions of interpolation functions.\n\n\n10/12/2012:\n\t- Cleanup to 32 bit code\n\t- New command to set dynamically the min and max for 32 bit float\n\t- Addition of rotation function for 90,180,270 degree rotations\n\t- Fixes to autoconf\n\n\n30/10/2012:\n\t- Autoconf cleanup. Removed unnecessary autoconf files: should now use\n\t  autogen.sh script first before ./configure\n\n\n18/10/2012:\n\t- Fix to imageCache delete in FIF.cc - thanks to Michal Becak.\n\n\n16/10/2012:\n\t- Added support for TIFF 32 bit integer and float.\n\t- Fixed 16 bit JPEG2000 support.\n\t- Added 1 bit support for TIFF.\n\t- Added gamma support via GAM command.\n\t- Thanks to Chiara Marmo for initial implementation.\n\n\n09/09/2012:\n\t- TIFF metadata fixes.\n\n\n25/08/2012:\n\t- Windows compilation fixes by Michal Becak.\n\n\n13/08/2012:\n\t- Detect JPEG YCbCr encoding in TIFF and request conversion to RGB\n\t  by libtiff. Tile _TIFFmalloc() now only occurs in getTile().\n\n\n16/07/2012:\n\t- Added check to KakaduImage.cc to handle bilevel images.\n\t- Clean up to use only floats and floorf() in Transforms.cc.\n\n\n14/05/2012:\n\t- Added bilinear interpolation option for CVT resizing. Added\n\t  INTERPOLATION parameter to Environment.h, which takes an integer.\n\t  0 for fastest nearest neighbour and 1 for bilinear (default).\n\t  Current bilinear implementation 2.5x slower than nearest neighbour.\n\t- Additional fix to MAX_LAYERS code.\n\n\n11/05/2012:\n\t- Modified layer handling to decode all available layers if\n\t  MAX_LAYERS parameter is set to -1.\n\n\n08/05/2012:\n\t- Fix to Mac OSX and FreeBSD compilation of KakaduImage.cc.\n\n\n07/05/2012:\n\t- Fixed strip height calculation error in CVT.cc\n\n\n01/05/2012:\n\t- Modified memory handling in JPEGCompressor.cc to better handle\n\t  images where the compressed version may be bigger than the\n\t  original (for example at very high quality levels).\n\t- Changes to CVT.cc to work with new JPEGCompressor code and removal\n\t  of chunked encoding header directive from CVT.cc.\n\t- Fixed bug in CVT when specifying both WID and HEI.\n\t- Fixed compiler warning in IIPResponse.cc.\n\t- Added man page.\n\t- Added missing definition of get_nprocs() function to Kakadu.cc\n\t  for Mac OSX and FreeBSD.\n\n\n20/04/2012:\n\t- Fixed memory overun error in filter_contrast in Transforms.cc.\n\n\n18/04/2012:\n\t- Major rewrite of CVT code to unify TIFF and JPEG2000 region\n\t  export. Region compositing now in TileManager->getRegion with\n\t  modified getRegion Kakadu function. Changes also to View class\n\t  and ColourTransforms code to enable greater modularity for\n\t  image processing to regions. ColourTransforms renamed to\n\t  Transforms.\n\t  Thanks to The National Library of Wales, who will be using\n\t  iipsrv & iipmooviewer to deliver their Historic Newspapers\n\t  in 2012.\n\n\n21/03/2012:\n\t- Fix to TPTImage.c to force RGB conversion for YCbCr compressed\n\t  JPEG TIFFs, which is now the default in VIPS. Thanks to John\n\t  Cupitt for spotting this.\n\n\n17/03/2012:\n\t- Changes to View.[h,cc] to make sure getRequestWidth and Height\n\t  return correctly rounded values.\n\n\n12/03/2012:\n\t- Added HTTP Status: 400 Bad Request to error messages.\n\n\n28/01/2012:\n\t- Fixes to KakaduImage.cc to properly catch exceptions during file\n\t  opening and a check for existence during codestream shutdown.\n\t- Also added a check to updateTimeStamp to throw an exception if file\n\t  unreadable.\n\n\n28/08/2011:\n\t- Performance improvement to JPEG2000 16->8 bit downsampling. Now\n\t  using integer arithmetic rather than float.\n\n\n24/08/2011:\n\t- Updates to configure.in, FIF.cc and DeepZoom.cc to check for and\n\t  handle missing setenv, unsetenv and log2 functions. Fixes problem\n\t  on Solaris 10.\n\n\n02/08/2011:\n\t- Changed timegm function in FIF.cc to use more cross-platform POSIX\n\t  mktime function instead. Fixes compilation error on Solaris.\n\n\n22/07/2011:\n\t- Added 16bit and CIELAB support for JPEG2000.\n\t- Other minor cleanups.\n\n\n24/05/2011:\n\t- Fix added to DeepZoom.cc as FreeBSD does not have the log2 function.\n\t  Thanks to Andrew Hankinson for spotting this.\n\n\n23/05/2011:\n\t- Another fix to ensure the max layers variable is correctly used in\n\t  Zoomify and DeepZoom output.\n\n\n15/04/2011: Version 0.9.9 Released\n\n\n15/04/2011:\n\t- Fix to View.h to properly take into account max layers variable.\n\n\n14/04/2011:\n\t- Minor logging update to Zoomify.cc.\n\n\n13/04/2011:\n\t- Updated VC++ project files.\n\t- Minor changes to logging in Main.cc.\n\t- Updated autoconf files.\n\n\n08/04/2011:\n\t- Change to TileManager.cc to take into account whether a tile is padded\n\t  or not when applying a watermark.\n\n\n06/04/2011:\n\t- Changes to allow compilation on Windows with Visual C++ Express 2010.\n\t  New windows subfolder with missing time definitions and VC solution file.\n\t  Fixes also include definition of snprintf, log2 and S_ISREG, which are\n\t  all missing in Windows. Many thanks to Rob \"Bubba\" Hines for his help in\n\t  porting.\n\n\n21/03/2011:\n\t- Added extra NULL assignment to Task pointer after catch block to avoid\n\t  problems with uninitialized memory being deleted.\n\t- Added SIGINT handler for Ctrl-C interruptions with strsignal() to\n\t  display a more meaningful message.\n\n\n17/03/2011:\n\t- Clean-up of signed/unsigned variables in IIPImage.h and KakaduImage.h.\n\n\n15/03/2011:\n\t- Added sanity check for requested resolutions and tiles in JTL.cc.\n\t- Fixed problem with edge tiles and watermarking.\n\t- Clean-up of error message in TPTImage.cc.\n\n\n14/03/2011:\n\t- Fixed problem with standalone mode. Can now bind to an FCGI socket by\n\t  running iipsrv on the command line with the argument --bind.\n\t  For example: ./iipsrv.fcgi --bind localhost:9000\n\t- Fixed memory problem reported by valgrind with 16bit images.\n\t  Now simply use memcpy instead of re-assigning memory blocks. Changes to\n\t  JTL.cc, DeepZoom.cc and Zoomify.cc.\n\t- Added extra buffer overhead during JPEG compression.\n\t- Minor fixes to buffer copy code in Writer.h.\n\t- Fixed memory leak in Memcached code - need to explicitly free returned\n\t  objects!\n\n\n01/12/2010:\n\t- Modified Main.cc to not check in Memcached if there has been a\n\t  If-Modified-Since parameter sent and to not store 304 or error replies.\n\t  Otherwise we risk to send 304 replies to requests from uncached browsers.\n\n\n25/11/2010:\n\t- Removed final CRLF from JTL, Zoomify and DeepZoom requests, which causes\n\t  problems with http pipelining in firefox.\n\n\n24/11/2010:\n\t- Added extra checks to both TPTImage and KakaduImage for whether the\n\t  requested resolution exists.\n\t- Added ability to KakaduImage to downsize resolutions that were not generated\n\t  during encoding.\n\t- Added decompressor.finish() to catch block as finish crashes if called after\n\t  thread environment shut down.\n\n\n18/11/2010:\n\t- Fixed problem when clipping when applying watermarks for both 8 and 16 bit images.\n\n\n15/11/2010:\n\t- Added memcached support via libmemcached. List of servers passed via\n\t  MEMCACHED_SERVERS environment variable. Length of time the cache\n\t  remains valid set by optional MEMCACHED_TIMEOUT environment variable\n\t  (default is 3600 seconds). Storage is at output level, rather than tile\n\t  level, so is complementary to internal tile cache.\n\t  Thanks to Moravian Library in Brno (Moravska zemska knihovna v Brne,\n\t  http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online\n\t  (http://www.oldmapsonline.org/) from the Ministry of Culture\n\t  of the Czech Republic.\n\n\n06/11/2010:\n\t- Modification to Cache.h to use string::capacity() function instead of length()\n\t  to determine space used by string.\n\n\n31/10/2010:\n\t- Added simple watermarking support via Watermark class. New environment\n\t  variables added for the watermark image, the opacity and probability.\n\t  Changes mainly to the TileManager and Session class. Watermarking happens\n\t  transparently within the TileManager class for all tiles. Thanks to\n\t  Moravian Library in Brno (Moravska zemska knihovna v Brne, http://www.mzk.cz/)\n\t  R&D grant MK00009494301 & Old Maps Online (http://www.oldmapsonline.org/)\n\t  from the Ministry of Culture of the Czech Republic.\n\n\n15/09/2010:\n\t- Modified IIPImage.cc to enable handling of images with spectral band\n\t  indices with mixtures of 3 or 4 digits. For example, H1_pyr_000_090.tif\n\t  and H1_pyr_2500_090.tif.\n\n\n05/03/2010:\n\t- Another fix to JPEGCompressor.cc to fix a crash with very small\n\t  tiles with libjpeg-8.\n\n\n23/02/2010:\n\t- Modified JPEGCompressor.cc to fix compatibility problem with\n\t  libjpeg version 8. Simply removed jpeg_write_tables from\n\t  InitCompression function.\n\n\n09/02/2010:\n\t- Fixed memory leak in Zoomify.cc and DeepZoom.cc\n\n\n11/01/2010:\n\t- JPEG2000 support added via the Kakadu SDK. Added new class\n\t  KakaduImage derived from the IIPImage class. JPEG2000 support\n\t  added thanks to Moravian Library in Brno (Moravska zemska knihovna\n\t  v Brne, http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online\n\t  (http://www.oldmapsonline.org/) from the Ministry of Culture of\n\t  the Czech Republic.\n\t- Fix to string literal warnings in Writer.h\n\n\n08/01/2010:\n\t- Major changes to the HTTP headers sent by iipsrv. Added\n\t  HTTP Server id and Last-Modified timestamps to all server output.\n\t  Checks are now made for a If-Modified-Since response and a\n\t  304 Not Modified response returned if the timestamps match.\n\t  This should significantly improve server performance.\n\n\n04/01/2010:\n\t- Fixed bug in FIF.cc - the file system prefix was not being\n\t  initialized for each new image.\n\t- Layers environment variable changed to MAX_LAYERS to represent\n\t  the maximum number of layers user is allowed to decode.\n\n\n03/12/2009: Version 0.9.8 Released\n\n\n02/12/2009:\n\t- Adding missing include to IIPImage.cc for compilation with\n\t  gcc 4.4.1\n\n\n01/12/2009:\n\t- Added DeepZoom protocol support. Work carried out thanks to\n\t  Moravian Library in Brno (Moravska zemska knihovna v Brne,\n\t  http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online\n\t  (http://www.oldmapsonline.org/) from the Ministry of Culture of\n\t  the Czech Republic.\n\n\n29/11/2009:\n\t- Added SPECTRA.cc class for returning spectral reflectance values\n\t  from multispectral images.\n\t- Fix to IIPImage.cc to properly count the number of horizontal and\n\t  vertical angles (used for multispectral bands).\n\n\n26/11/2009:\n\t- Fix to View class to take resampling into account when limiting\n\t  the CVT output size to the maximum server setting.\n\n\n17/11/2009:\n\t- Update to Zoomify to fix way it calculates number of zoom levels.\n\n\n05/11/2009:\n\t- Updated the autoconf, aclocal, automake and libtool scripts to the\n\t  latest versions.\n\n\n04/11/2009:\n\t- Added FILESYSTEM_PREFIX environment variable to allow a fixed prefix to\n\t  be applied to all image paths. Embedded NULL bytes of the form %00 and\n\t  any \"../\" are also now stripped out of any path for security reasons.\n          (Thanks to Willem Hengeveld for suggesting this)\n\n\n01/11/2009:\n\t- Fixes to View.h and View.cc to set the requested size to the maximum\n\t  allowable if not WID or HEI is set for the CVT command. The correct\n\t  resolution to use for CVT is now calculated for views smaller than\n\t  the smallest available.\n\n\n30/10/2009:\n\t- Security fixes to Task.cc to make sure while loop is limited to the\n\t  expected number of arguments. (Thanks to Willem Hengeveld for pointing\n\t  this out).\n\n\n19/08/2009:\n\t- Minor updates to IIPImage.h and IIPImage.cc. FIF.cc also now tests\n\t  for upper/lowercase .tif and .tiff suffixes.\n\n\n14/08/2009:\n\t- Modification to View.cc and CVT.cc to calculate the appropriate\n\t  resolution as the smallest resolution with a dimension greater size\n\t  than the requested dimensions. The WID and HEI directives now\n\t  effectively give bounding dimensions.\n\n11/08/2009:\n\t- Added simple nearest neighbour resampling to CVT command to allow it to\n\t  resize to the exact dimensions and not just the nearest available pyramid\n\t  resolution.\n\t- CVT Content-disposition tag now gives the image filename allowing the user\n\t  to save the image directly with this.\n\n\n01/07/2009:\n\t- Added quality layer parameter to images for future use with file formats\n\t  such as JPEG2000 that support this. This allows the decoding of several\n\t  quality layers via the LYR command. Modifications to the RawTile API\n\t  as well as IIPImage::getTile resulting in a series of changes to\n\t  CVT.cc, JTL.CC, TIL.cc, TPTImage.cc, View.h, Main.cc and Environment.h.\n\t  New startup configuration \"LAYERS\" to set the default number of layers.\n\t  Default is 1 otherwise.\n\n\n22/06/2009:\n\t- Changes to Zoomify.cc to take into account the fact that Zoomify expects\n\t  a fixed number of resolution levels.\n\n\n15/04/2009:\n\t- Added a flag for padded tiles into RawTile.h. TIFF's are padded out\n\t  to the tile size, but other formats may not be. Changes to TPTImage,\n\t  TileManager and CVT to handle this.\n\t- Also changed the RawTile flag for memory managed tiles.\n\n\n18/03/2009:\n\t- Added modification timestamps to the IIPImage and Rawtile classes.\n\t  The TileManager now checks whether the tile is fresh and reloads it\n\t  if necessary.\n\n\n11/03/2009:\n\t- Several changes to JTL.cc and Cache.h to eliminate a memory leak. Also\n\t  replaced malloc/free in Rawtile with new/delete.\n\n\n04/03/2009:\n\t- Minor changes to IIPResponse.cc to elimate type warnings.\n\n\n06/06/2008:\n\t- Modified the way the image dimensions are stored in the IIPImage class.\n\t  Rather than simply storing the max size, a vector of available dimensions\n\t  is saved making it easier to get the size for a given resolution.\n\n\n05/06/2008:\n\t- Added Zoomify support via the Zoomify=/path.tif request. Works with both\n\t  the official flash client and the Zoomify patched OpenLayers javascript\n\t  client. Work carried out thanks to R&D grant DC08P02OUK006 - Old Maps\n\t  Online (www.oldmapsonline.org) from Ministry of Culture of the Czech Republic.\n\n\n09/08/2007:\n\t- Added a Bits-per-channel OBJ request so that viewers can determine whether\n\t  to perform contrast adjustment server-side or client-side.\n\n\n07/08/2007:\n\t- Added CIELAB conversion and contrast handling to JTL so that it can handle\n\t  16 bit images.\n\n\n12/06/2007:\n\t- Updated URL decoding function in FIF.cc to C++ style and avoid a potential\n\t  buffer overflow.\n\t- Changed Task::run arguments to be const std::string& instead of just std::string.\n\n\n08/06/2007:\n\t- Changed JTL headers to enable HTTP 1.1 compatible cache control.\n\n\n13/12/2006: Version 0.9.7 Released\n\n\n07/11/2006:\n\t- Fixed the standalone mode, which is now activated by launching with\n\t  --standalone with an argument giving the socket port or path. For example,\n\t  localhost:8000 or /tmp/iipsrv.sock.\n\n\n31/10/2006:\n\t- Added hillshading Task class and function for simulated raking light\n\t  visualization using 3D surface normal data. This is used via the SHD\n\t  command in association with CVT, which takes 2 arguments: the horizontal\n\t  light source angle in degrees and the vertical angle from the horizontal\n\t  plane.\n\n\n26/09/2006:\n\t- Cleaned up the hash_map and pool_allocator stuff a little to use typedefs\n\t  instead of #ifdefs.\n\t- Added the legacy JTLS command class for panoramic views.\n\n\n22/09/2006:\n\t- Added an FCGI stand-alone mode usable with lighttpd's spawn-fcgi command.\n\t- Also changed the IIPImage cache to use a hash_map and pool_alloc memory.\n\n\n19/09/2006:\n\t- If we are using appropriate versions of g++, we now use the high\n\t  performance pool_alloc memory allocators for our cache containers.\n\t  Also, instead of a std::map, we use the hash_map extension which\n\t  offers better performance. Otherwise we default to std::map.\n\t- Fixed problem in TileManager where uncompressed tiles in the cache\n\t  were not being cropped when converted to JPEG. The IIPImage tile_width\n\t  and tile_height fields now hold the base tile size and not the current\n\t  tile size.\n\n\n18/092006:\n\t- Added a \"Last-Modified\" and \"ETag\" header to the CVT HTTP response\n\t  to prevent double requests from being made by web browsers.\n\t- Fixed bug in CVT where the tile size was being incorrectly set from\n\t  the IIPImage object and not the tile itself, which was a problem\n\t  when getting tiles from the cache.\n\n\n15/09/2006:\n\t- Changed the Cache keys to be simple strings rather than custom\n\t  objects. This has solved one of the crashing problems when tiles\n\t  are deleted from the cache.\n\n\n29/08/2006:\n\t- Added Writer class to shield the command implentations from any\n\t  FCGI specific functions.\n\n\n28/08/2006:\n\t- *Major* refactoring of the code. Each command is now called via its own\n\t  Task class (command pattern), with no processing done in Main.cc.\n\t  OBJ commands are in OBJ.cc and each output command (eg TIL,CVT etc)\n\t  now have their own classes.\n\t- The xangle and yangle variables are now in the View class, which\n\t  was previously named the ImageTransform class.\n\n\n25/08/2006:\n\t- Cleaned up the option variable parsing in Main.cc. It is now mostly\n\t  done via an Environment class, which checks for defaults etc.\n\n\n16/08/2006:\n\t- Moved QLT limit checking from Main into JPEG class. Also now check\n\t  for empty strings.\n\n\n08/08/2006:\n\t- Changed the contrast adjustment code to limit the result to a max of\n\t  255.0 as this was creating problems with the windows build.\n\n\n07/03/2006: Version 0.9.6 release.\n\n\n13/02/2006:\n\t- Fixed another problem on Mac OS X in TPTImage.cc. The number of\n\t  channels and bits per sample were giving strange values, so a\n\t  temporary uint16 variable is now used and cast from. It now works\n\t  perfectly on Mac :-)\n\n\n09/02/2006:\n\t- Changed the start_t and start_u types in Timer.h to long for\n\t  compatibility with Solaris and Mac OS X.\n\t- Some code cleanups in the IIPResponse class.\n\n\n23/01/2006:\n\t- Added an extra timer for tile insertion - this is the slowest\n\t  cache operation. We should look to put this in a separate\n\t  thread at some point!\n\n\n18/01/2006:\n\t- Added support for ptif suffix images. These are in fact just\n\t  pyramidal TIFF images.\n\n\n11/01/2006:\n\t- More fixes to the TileManager class. Cache can now handle\n\t  multiple compression types for the same tile simultaneously.\n\n\n24/12/2005:\n\t- Major rewrite of the TileManager class. Now much more concise.\n\n\n21/10/2005:\n\t- Added a check in JPEGCompressor for the number of channels.\n\t  JPEG can handle only image with either 1 or 3 channels.\n\n\n13/10/2005:\n\t- Added a TileManager class to act as a higher level access to\n\t  the tile cache. It checks whether a JPEG compressed tile\n\t  already exists and if not decodes one from the source image.\n\t  It also crops any edge tiles to the correct size (required\n\t  for the new Vips TIFF format).\n\n\n12/10/2005:\n\t- Fixed a JTL problem with the new tiled TIFF format. The edge\n\t  tiles are now cropped before being sent out.\n\t- Reworked JTL to just forward the request to JTLS rather than\n\t  duplicating the code there.\n\n\n09/06/2005:\n\t- Changed IIPImage.cc to use glob conditionally if glob has been\n\t  detected. This is needed for mingw compilation.\n\n\n01/04/2005:\n\t- Completed an LRU tile cache with the ability to set the max\n\t  cache size via the configuration variable MAX_IMAGE_CACHE_SIZE,\n\t  specified in MB.\n\n\n22/03/2005:\n\t- Added new Timer class to handle timing data to debug tile\n\t  access, command and total request times.\n\n\n06/01/2005:\n\t- Found problem in the CVT code when dealing with image sequences\n\t  of different numbers of channels. We have to reload the channel\n\t  information.\n\n\n15/12/2004:\n\t- CVT now works with the new standard compliant TIFF tile format\n\t  as used by vips-7.10 and later.\n\n\n10/12/2004:\n\t- CVT now works with 16 bit TIFF. The compression type reported\n\t  by TIL also switches from JPEG with 8 bit images to none with\n\t  16 bit.\n\n\n08/12/2004:\n\t- Added CNT contrast command support. Also added check to\n\t  TPTImage openImage() for whether our image is in fact\n\t  tiled or not, which can cause the server to crash.\n\n\n07/12/2004:\n\t- Added 16 bit support. Changes to RawTile - the data is now\n\t  a generic (void*) and there are now fields for channels per\n\t  sample and bits per channel. Changes also to TPTImage.cc,\n\t  Main.cc and JPEGCompressor.cc.\n\n\n01/09/2004:\n\t- Changed the LAB2sRGB code to allow a/b values from\n\t  +-127 as per the TIFF spec instead +-100.\n\t- Also fixed a problem caused by signed/unsigned comparisons\n\t  in ImageTransform with requests for CVT sizes smaller than\n\t  the tile size.\n\n\n26/08/2004:\n\t- Added largefile support by simply adding a configure\n\t  directive that will add the appropriate defines.\n\n\n05/07/2004:\n\t- Fixed problem in JPEGCompressor.cc concerning the value of\n\t  a structure that we try to read after de-allocating memory.\n\t  Only seems to be a problem with MSVC++ compiler. (Thanks to\n\t  Chris Tuijn for spotting this).\n\n\n11/05/2004: Version 0.9.5 release.\n\n\n04/05/2004:\n\t- Moved the colorspace check from TPTImage::getTile to\n\t  TPTImage::openImage so that a Colorspace request will always\n\t  have an associated colour space and not just after getTile\n\t  has been called. We assume for now that all the tiles of an\n\t  image are all of the same colour space.\n\n\n21/05/2004:\n\t- Removed no-cache pragma from CVT header. Also modified\n\t  max_CVT variable to limit the effective size and not the\n\t  total image size. ie a small RGN of a massive image can\n\t  still be sent OK. The resolution calculations have been\n\t  moved into ImageTransform and is now performed at the last\n\t  moment in the CVT section.\n\n\n16/05/2004:\n\t- Added MAX_CVT environment variable to limit width and height\n\t  requests of CVT commands. The default is set to 5000 pixels.\n\n\n02/04/2004:\n\t- Added SDS command support. This can be used for specifying\n\t  subimages or the horizontal/vertical angle in 3D sequence\n\t  images and will eventually replace the use of JTLS by the\n\t  client. Current usage is SDS=h,v where h and v are the\n\t  horizontal and vertical sequence angles.\n\n\n01/04/2004:\n        - Fixed length given by the error response. We now count both\n          the code and the argument.\n\n\n30/03/2004:\n        - Fixed TIL to only send the MIME type once before the tile\n          sequence.\n        - Added better error handling. The IIPResponse is now set\n          whenever we have a problem in Main.cc. Plus the catch\n          clause now checks for an error in IIPResponse and sends\n          this if available rather than the advertising banner.\n\n\n29/03/2004:\n        - Changed the vertical and horizontal views syntax back to\n          old style.\n        - Fixed problem with the number of CRLF's after the MIME type:\n          Apache complains if there are not 2 sets of CRLF.\n        - Changed the IIPImage metadata map to use the string class\n          rather than char* - seems to fix a freeze problem.\n\n\n06/03/2004:\n\t- More fixes to RGN code. Moved the verification logic into\n\t  the ImageTransform class itself rather than having it in\n\t  Main.cc. Also fixed a crash resulting from the use of\n\t  inlining - a gcc bug perhaps? Anyway, now perfectly stable.\n\n\n05/03/2004:\n\t- Some minor fixes to the RGN code to prevent crashes from\n\t  images of less than 8 pixels in size.\n\n\n04/03/2004:\n\t- Finished implementation of RGN CVT modifier. Can now specify\n\t  a region to CVT rather than always having the whole image.\n\t- Updated embedded XHTML advertising page.\n\t- Some doxygen-related cleanups and documenting.\n\n\n03/03/2004:\n\t- Changed Horizontal-views and Vertical-views return syntax to\n\t  return the number of views also (request by Denis):\n\t  Vertical-views/<number views>:view1 view2 ...\n\t  eg. Vertical-views/3:0 90 180.\n\n\n02/03/2004:\n\t- Added automatic colour spaces conversion for CIELAB images\n\t  to sRGB in CVT mode.\n\n\n14/12/2003:\n\t- Added Content-disposition headers to the JTL,JTLS and CVT output.\n\n\n10/11/2003:\n\t- Added missing std:: prefixes to a few STL variables in IIPImage.h\n\t  and IIPResponse.h.\n\t- Fixed the TIL command to return only the tiles within the\n\t  rectangle defined by the specified range rather than all of them.\n\n\n25/10/2003:\n\t- Fixed missing value in error message for non decodable tiles\n\t  in TPTImage.cc and erroneous extra CRLF in the Colorspace\n\t  reply.\n\n\n22/10/2003:\n\t- Changed the IIPImage class to give the horizontal and\n\t  vertical angles a default value of 0,90 for non-sequence\n\t  images.\n\n\n11/10/2003:\n\t- Removed the new allocator in getFileName() in IIPImage.cc to\n\t  a statically allocated buffer of size 1024.\n\n\n04/10/2003:\n\t- Generalised the metadata handling in Main to cope with any\n\t  available metadata.\n\t- Changed the way Basic-info and Summary-info work to simply\n\t  add more objects to the request string rather than try to\n\t  handle it themselves. Nicely eliminates duplicate handler code\n\t  without introducing classes or external functions for each obj.\n\t- Also fixed the server capability return code to follow the IIP\n\t  spec properly.\n\n\n03/10/2003:\n\t- Added tracking of image data to the IIPResponse class. In this\n\t  way, we can print an error if we have an uncomplete command\n\t  syntax. eg. a WID without a CVT. We should now never not have\n\t  some sort of response from the server.\n\t- Also added Author, Subject etc metadata handling to IIPImage\n\t  and the necessary handlers to IIPResponse.\n\n\n15/09/2003:\n\t- Added doxygen compatible comments to the header files. The\n\t  generated documentation is in the doc subdirectory.\n\t- Changed sprintf to snprintf in Main.cc for the vertical-views\n\t  handler; snprintf is already used everywhere else.\n\t- Added IIPResponse class to handle message passing back to the\n\t  client from OBJ requests. This allows for better error and\n\t  mime header handling and eliminates having to use FCGX_Fprintf.\n\t- Added SIGHUP handling to the other signals handled - we simply\n\t  exit and allow mod_fastcgi to restart us.\n\t- Added support for IIP-opt-comm and IIP-opt-obj requests.\n\t- Removed the deprecated Max-sequence and Vertical-views object\n\t  handlers.\n\n\n12/09/2003: Version 0.9.4 release.\n\t- Added content-type heading to error returns.\n\t- Added default catch() clause to the end of the main try block.\n\n\n11/09/2003:\n\t- Added Base64 URL decoding for the image path argument supplied\n\t  to the FIF command.\n\t- Cleanups to eliminate most GCC -Wall warnings.\n\n\n10/09/2003:\n\t- Changed tolower to ::tolower to fix compilation problem using\n\t  GCC 3x.\n\t- Logging cleanup.\n\n\n08/09/2003:\n\t- Major cleanup up the JPEGCompressor class.\n\t- Added bits per pixel to the IIPImage copy constructors.\n\t- Used the new JPEG buffer-buffer functions to add support for the\n\t  CVT command (limited to JPEG output only).\n\n\n07/09/2003:\n\t- Modified the JPEGCompressor class to allow stream-based buffer\n\t  to buffer encoding via 3 new functions (init, compressstrip and\n\t  finish).\n\n\n03/09/2003:\n\t- Fixed bug in TPTImage.cc. Added TIFFGetField commands for tile_width\n\t  and tile_height so that they get reset to the correct value even if\n\t  we loop through the end of a row.\n\t- Added a bits per pixel field to the IIPImage class.\n\n\n02/09/2003:\n\t- Fixed mis-placed jpeg_set_defaults in JPEGCompressor.cc.\n\t  Was being called after some individual values were set. This only\n\t  seemed affected the dct_method. Should compress faster now.\n\n\n28/08/2003:\n\t- Added WID and HEI command support.\n\n\n25/08/2003:\n\t- Autoconf cleanups. Now properly detect for JPEG and TIFF.\n\n\n24/08/2003:\n\t- Improvements to the configure script. Can now completely disable\n\t  the dynamic module loading code from even compiling.\n\t- The FCGI development library is now included in the distribution\n\t  for convenience and is integrated into the top-level configure\n\t  system. It is only used if it is not found on the computer.\n\n\n22/08/2003:\n\t- Added extra variable to track the current vertical position as\n\t  well as the horizontal. Fixes bug when switching between vertical\n\t  angles on sequence zero.\n\t- XHTMLified the advertising banner :-)\n\n\n22/03/2003: Version 0.9.3 release.\n\t- Reworked and cleaned up the TIL compression type and subtype data\n\t  stream prefix with reference to the FlashPix specification.\n\n\n21/03/2003:\n\t- All commands are converted to lower case to handle the java JAI\n\t  IIP implementation which does not properly follow the spec.\n\t- Also fixed typo in the Colorspace OBJ reply.\n\n\n15/03/2003:\n\t- Modifications to the JPEGCompressor constructor to take only the\n\t  Q factor. Plus the environment variable JPEG_QUALITY can\n\t  set the default Q factor.\n\t- Plus added an #undef HAVE_STDLIB_H to JPEGCompressor.h which was\n\t  interfering with libjpeg. No compiler warnings now even\n\t  with -pendantic set :-)\n\n\n13/03/2003:\n\t- Added extended colour space handling. The TIFF image now has its\n\t  colourspace extracted and a ColourSpace enum type now exists.\n\t  Greyscale, RGB and CIELAB are now handled, though the latter is not\n\t  in the official IIP spec.\n\n\n10/03/2003:\n\t- Changed RawTile copy constructor to use memcpy instead of looping\n\t  through an array: Big speed improvement :-)\n\n\n08/03/2003:\n\t- Added USR1 and TERM signal handling to main loop: We now have some\n\t  stats printed in the logfile on shutdown.\n\t- Modified IIPImage to accept a filename pattern variable, so that\n\t  the \"_pyr_\" image sequence pattern can be user modified.\n\t- Plus started work on a new tile cache system, but seems very slow,\n\t  so will mothball it till after the forthcoming release.\n\n\n10/11/2002:\n\t- Changes to some header files etc to make it compatible with gcc 3.2:\n\t  Mainly STL string specifiers, plus replacement of slist type\n\t  with std::list.\n\n\n24/03/2002\n        - Changed error handling to follow IIP return code specification\n          for unsupported objects and commands. Should do this for\n\t  each individual exception also.\n        - Added runtime configuration variable for max image cache size.\n\n\n18/03/2002: Version 0.9.2 release.\n\t- Changes to JPEGCompressor.cc: Fixed bug when encoding very small\n\t  tiles. Sometimes the JPEG data is larger than the original\n\t  so we need to allocate some extra memory just in case.\n\t- Also fixed the iip_empty_output_buffer( j_compress_ptr cinfo )\n\t  function. Now properly empties the buffer and returns TRUE.\n\t- The Compress() routine now passes the entire image buffer array\n\t  into jpeg_write_scanlines rather than doing it row by\n\t  row. The row array is dynamically allocated and deleted\n\t  at the end.\n\t- Added proper copy constructor to RawTile class to properly copy\n\t  data without leaving dangling pointers.\n\n\n09/08/2001:\n\t- Added time stamp.\n\t- Some minor changes to the JPEG wrapper - a couple of ints\n\t  changed to size_t's and a conditional added just before\n\t  the memcopy code.\n\n\n07/07/2001: Version 0.9.1 release.\n\t- Added field for number of bands in Rawtile.h, so that we can now\n\t  view 1-band black and white as well as 3-band colour images\n\t- Added missing JTL command handler for single non-sequential images\n\t  This does the same as JTLS command, but supplies 0 for sequence\n\t  and angle.\n\n\n05/03/2001: Version 0.9 release.\n\t- Bug fixes: moving IIPImage objects in the cache was resulting\n\t  in lost information.\n\t- DSOImage memory bug. Modules should handle their own cleanup\n\t  in close_image, which is now called by the ~DSOImage\n\n\n04/03/2001:\n\t- Changed ModuleLoader to a DSOImage derived class of IIPImage.\n\t- Use a STL map of image type to module path keywords instead\n\t  of trying to store caches of DSOImages.\n\t- Clean up and rationalisation of IIPImage class and derived\n\t  classes.\n\n\n01/03/2001:\n\t- Added tokenizer class.\n\t- Now checks for variables passed to fcgi at start up time\n\t  via --initial-env directive within Apache.\n\t- Added basic ModuleLoader class for loading external image decoders.\n\t- Fixes so that it no longer crashes even with null input query etc.\n\t- Removed ifdef DEBUG stuff.\n\n\n27/02/2001:\n\t- Added Tile-size directive and related IIPImage::getTileWidth() etc.\n\t- Allowing for various tile sizes to be used :)\n\t- Improved logfile reporting.\n", "/*\n    IIP JTL Command Handler Class Member Function: Export a single tile\n\n    Copyright (C) 2006-2021 Ruven Pillay.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.\n*/\n\n#include \"Task.h\"\n#include \"Transforms.h\"\n\n#include <cmath>\n#include <sstream>\n\nusing namespace std;\n\n\nvoid JTL::send( Session* session, int resolution, int tile ){\n\n  Timer function_timer;\n\n  if( session->loglevel >= 3 ) (*session->logfile) << \"JTL handler reached\" << endl;\n\n\n  // Make sure we have set our image\n  this->session = session;\n  checkImage();\n\n\n  // Time this command\n  if( session->loglevel >= 2 ) command_timer.start();\n\n\n  // If we have requested a rotation, remap the tile index to rotated coordinates\n  if( (int)((session->view)->getRotation()) % 360 == 90 ){\n\n  }\n  else if( (int)((session->view)->getRotation()) % 360 == 270 ){\n\n  }\n  else if( (int)((session->view)->getRotation()) % 360 == 180 ){\n    int num_res = (*session->image)->getNumResolutions();\n    unsigned int im_width = (*session->image)->image_widths[num_res-resolution-1];\n    unsigned int im_height = (*session->image)->image_heights[num_res-resolution-1];\n    unsigned int tw = (*session->image)->getTileWidth();\n    //    unsigned int th = (*session->image)->getTileHeight();\n    int ntiles = (int) ceil( (double)im_width/tw ) * (int) ceil( (double)im_height/tw );\n    tile = ntiles - tile - 1;\n  }\n\n\n  // Sanity check\n  if( (resolution<0) || (tile<0) ){\n    ostringstream error;\n    error << \"JTL :: Invalid resolution/tile number: \" << resolution << \",\" << tile;\n    throw error.str();\n  }\n\n\n  // Determine which output encoding to use\n  CompressionType ct = session->view->output_format;\n  Compressor *compressor;\n  if( session->view->output_format == JPEG ) compressor = session->jpeg;\n#ifdef HAVE_PNG\n  else if( session->view->output_format == PNG ) compressor = session->png;\n#endif\n  else compressor = session->jpeg;\n\n\n  TileManager tilemanager( session->tileCache, *session->image, session->watermark, compressor, session->logfile, session->loglevel );\n\n\n  // First calculate histogram if we have asked for either binarization,\n  //  histogram equalization or contrast stretching\n  if( session->view->requireHistogram() && (*session->image)->histogram.size()==0 ){\n\n    if( session->loglevel >= 4 ) function_timer.start();\n\n    // Retrieve an uncompressed version of our smallest tile\n    // which should be sufficient for calculating the histogram\n    RawTile thumbnail = tilemanager.getTile( 0, 0, 0, session->view->yangle, session->view->getLayers(), UNCOMPRESSED );\n\n    // Calculate histogram\n    (*session->image)->histogram =\n      session->processor->histogram( thumbnail, (*session->image)->max, (*session->image)->min );\n\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Calculated histogram in \"\n\t\t\t  << function_timer.getTime() << \" microseconds\" << endl;\n    }\n\n    // Insert the histogram into our image cache\n    const string key = (*session->image)->getImagePath();\n    imageCacheMapType::iterator i = session->imageCache->find(key);\n    if( i != session->imageCache->end() ) (i->second).histogram = (*session->image)->histogram;\n  }\n\n\n\n  // Request uncompressed tile if raw pixel data is required for processing\n  if( (*session->image)->getNumBitsPerPixel() > 8 || (*session->image)->getColourSpace() == CIELAB\n      || (*session->image)->getNumChannels() == 2 || (*session->image)->getNumChannels() > 3\n      || ( (session->view->colourspace==GREYSCALE || session->view->colourspace==BINARY) && (*session->image)->getNumChannels()==3 &&\n\t   (*session->image)->getNumBitsPerPixel()==8 )\n      || session->view->floatProcessing() || session->view->equalization\n      || session->view->getRotation() != 0.0 || session->view->flip != 0\n      ) ct = UNCOMPRESSED;\n\n\n  // Set the physical output resolution for this particular view and zoom level\n  int num_res = (*session->image)->getNumResolutions();\n  unsigned int im_width = (*session->image)->image_widths[num_res-resolution-1];\n  unsigned int im_height = (*session->image)->image_heights[num_res-resolution-1];\n  float dpi_x = (*session->image)->dpi_x * (float) im_width / (float) (*session->image)->getImageWidth();\n  float dpi_y = (*session->image)->dpi_y * (float) im_height / (float) (*session->image)->getImageHeight();\n  compressor->setResolution( dpi_x, dpi_y, (*session->image)->dpi_units );\n\n  if( session->loglevel >= 5 ){\n    *(session->logfile) << \"JTL :: Setting physical resolution of tile to \" <<  dpi_x << \" x \" << dpi_y\n                        << ( ((*session->image)->dpi_units==1) ? \" pixels/inch\" : \" pixels/cm\" ) << endl;\n  }\n\n  // Embed ICC profile\n  if( session->view->embedICC() && ((*session->image)->getMetadata(\"icc\").size()>0) ){\n    if( session->loglevel >= 3 ){\n      *(session->logfile) << \"JTL :: Embedding ICC profile with size \"\n\t\t\t  << (*session->image)->getMetadata(\"icc\").size() << \" bytes\" << endl;\n    }\n    compressor->setICCProfile( (*session->image)->getMetadata(\"icc\") );\n  }\n\n\n  RawTile rawtile = tilemanager.getTile( resolution, tile, session->view->xangle,\n\t\t\t\t\t session->view->yangle, session->view->getLayers(), ct );\n\n\n  int len = rawtile.dataLength;\n\n  if( session->loglevel >= 2 ){\n    *(session->logfile) << \"JTL :: Tile size: \" << rawtile.width << \" x \" << rawtile.height << endl\n\t\t\t<< \"JTL :: Channels per sample: \" << rawtile.channels << endl\n\t\t\t<< \"JTL :: Bits per channel: \" << rawtile.bpc << endl\n\t\t\t<< \"JTL :: Data size is \" << len << \" bytes\" << endl;\n  }\n\n\n  // Convert CIELAB to sRGB\n  if( (*session->image)->getColourSpace() == CIELAB ){\n\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Converting from CIELAB->sRGB\";\n      function_timer.start();\n    }\n    session->processor->LAB2sRGB( rawtile );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Only use our float pipeline if necessary\n  if( rawtile.bpc > 8 || session->view->floatProcessing() ){\n\n    // Make a copy of our max and min as we may change these\n    vector <float> min = (*session->image)->min;\n    vector <float> max = (*session->image)->max;\n\n    // Change our image max and min if we have asked for a contrast stretch\n    if( session->view->contrast == -1 ){\n\n      // Find first non-zero bin in histogram\n      unsigned int n0 = 0;\n      while( (*session->image)->histogram[n0] == 0 ) ++n0;\n\n      // Find highest bin\n      unsigned int n1 = (*session->image)->histogram.size() - 1;\n      while( (*session->image)->histogram[n1] == 0 ) --n1;\n\n      // Histogram has been calculated using 8 bits, so scale up to native bit depth\n      if( rawtile.bpc > 8 && rawtile.sampleType == FIXEDPOINT ){\n\tn0 = n0 << (rawtile.bpc-8);\n\tn1 = n1 << (rawtile.bpc-8);\n      }\n\n      min.assign( rawtile.bpc, (float)n0 );\n      max.assign( rawtile.bpc, (float)n1 );\n\n      // Reset our contrast\n      session->view->contrast = 1.0;\n\n      if( session->loglevel >= 5 ){\n\t*(session->logfile) << \"JTL :: Applying contrast stretch for image range of \"\n\t\t\t    << n0 << \" - \" << n1 << endl;\n      }\n    }\n\n\n    // Apply normalization and float conversion\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Normalizing and converting to float\";\n      function_timer.start();\n    }\n    session->processor->normalize( rawtile, max, min );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n\n\n    // Apply hill shading if requested\n    if( session->view->shaded ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying hill-shading\";\n\tfunction_timer.start();\n      }\n      session->processor->shade( rawtile, session->view->shade[0], session->view->shade[1] );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply color twist if requested\n    if( session->view->ctw.size() ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying color twist\";\n\tfunction_timer.start();\n      }\n      session->processor->twist( rawtile, session->view->ctw );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply any gamma or log transform\n    if( session->view->gamma != 1.0 ){\n\n      float gamma = session->view->gamma;\n      if( session->loglevel >= 4 ) function_timer.start();\n\n      // Check whether we have asked for logarithm\n      if( gamma == -1 ) session->processor->log( rawtile );\n      else session->processor->gamma( rawtile, gamma );\n\n      if( session->loglevel >= 4 ){\n\tif( gamma == -1 ) *(session->logfile) << \"JTL :: Applying logarithm transform in \";\n\telse *(session->logfile) << \"JTL :: Applying gamma of \" << gamma << \" in \";\n\t*(session->logfile) << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply inversion if requested\n    if( session->view->inverted ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying inversion\";\n\tfunction_timer.start();\n      }\n      session->processor->inv( rawtile );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply color mapping if requested\n    if( session->view->cmapped ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying color map\";\n\tfunction_timer.start();\n      }\n      session->processor->cmap( rawtile, session->view->cmap );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply any contrast adjustments and/or clip to 8bit from 16 or 32 bit\n    float contrast = session->view->contrast;\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Applying contrast of \" << contrast << \" and converting to 8 bit\";\n      function_timer.start();\n    }\n    session->processor->contrast( rawtile, contrast );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n\n  }\n\n\n  // Reduce to 1 or 3 bands if we have an alpha channel or a multi-band image and have requested a JPEG tile\n  // For PNG, strip extra bands if we have more than 4 present\n  if( ( (session->view->output_format == JPEG) && (rawtile.channels == 2 || rawtile.channels > 3) ) ||\n      ( (session->view->output_format == PNG) && (rawtile.channels > 4) ) ){\n\n    unsigned int bands = (rawtile.channels==2) ? 1 : 3;\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Flattening channels to \" << bands;\n      function_timer.start();\n    }\n    session->processor->flatten( rawtile, bands );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Convert to greyscale if requested\n  if( (*session->image)->getColourSpace() == sRGB && session->view->colourspace == GREYSCALE ){\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Converting to greyscale\";\n      function_timer.start();\n    }\n    session->processor->greyscale( rawtile );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Convert to binary (bi-level) if requested\n  if( (*session->image)->getColourSpace() != BINARY && session->view->colourspace == BINARY ){\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Converting to binary with threshold \";\n      function_timer.start();\n    }\n    unsigned int threshold = session->processor->threshold( (*session->image)->histogram );\n    session->processor->binary( rawtile, threshold );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << threshold << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Apply histogram equalization\n  if( session->view->equalization ){\n    if( session->loglevel >= 4 ) function_timer.start();\n    // Perform histogram equalization\n    session->processor->equalize( rawtile, (*session->image)->histogram );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Applying histogram equalization in \"\n                          << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Apply flip\n  if( session->view->flip != 0 ){\n    Timer flip_timer;\n    if( session->loglevel >= 5 ){\n      flip_timer.start();\n    }\n\n    session->processor->flip( rawtile, session->view->flip  );\n\n    if( session->loglevel >= 5 ){\n      *(session->logfile) << \"JTL :: Flipping image \";\n      if( session->view->flip == 1 ) *(session->logfile) << \"horizontally\";\n      else *(session->logfile) << \"vertically\";\n      *(session->logfile) << \" in \" << flip_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Apply rotation - can apply this safely after gamma and contrast adjustment\n  if( session->view->getRotation() != 0.0 ){\n    float rotation = session->view->getRotation();\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Rotating image by \" << rotation << \" degrees\";\n      function_timer.start();\n    }\n    session->processor->rotate( rawtile, rotation );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Compress to requested output format\n  if( rawtile.compressionType == UNCOMPRESSED ){\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Encoding UNCOMPRESSED tile\";\n      function_timer.start();\n    }\n    len = compressor->Compress( rawtile );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds to \"\n                          << rawtile.dataLength << \" bytes\" << endl;\n\n    }\n  }\n\n\n#ifndef DEBUG\n\n  // Send HTTP header\n  stringstream header;\n  header << session->response->createHTTPHeader( compressor->getMimeType(), (*session->image)->getTimestamp(), len );\n  if( session->out->putStr( (const char*) header.str().c_str(), header.tellp() ) == -1 ){\n    if( session->loglevel >= 1 ){\n      *(session->logfile) << \"JTL :: Error writing HTTP header\" << endl;\n    }\n  }\n\n#endif\n\n\n  if( session->out->putStr( static_cast<const char*>(rawtile.data), len ) != len ){\n   if( session->loglevel >= 1 ){\n     *(session->logfile) << \"JTL :: Error writing JPEG tile\" << endl;\n   }\n  }\n\n\n  if( session->out->flush() == -1 ) {\n    if( session->loglevel >= 1 ){\n      *(session->logfile) << \"JTL :: Error flushing JPEG tile\" << endl;\n    }\n  }\n\n\n  // Inform our response object that we have sent something to the client\n  session->response->setImageSent();\n\n  // Total JTL response time\n  if( session->loglevel >= 2 ){\n    *(session->logfile) << \"JTL :: Total command time \" << command_timer.getTime() << \" microseconds\" << endl;\n  }\n\n}\n", "/*\n    IIP SPECTRA Command Handler Class Member Function\n\n    Copyright (C) 2009-2021 Ruven Pillay.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.\n*/\n\n#include \"Task.h\"\n#include <cmath>\n\nusing namespace std;\n\n\n/// Return the spectral reflectance for a particular point in XML format\nvoid SPECTRA::run( Session* session, const std::string& argument ){\n\n  /* The argument should consist of 2 comma separated values:\n     1) resolution\n     2) tile number\n     3) pixel index in x direction\n     4) pixel index in y direction\n  */\n\n  if( session->loglevel >= 3 ) (*session->logfile) << \"SPECTRA handler reached\" << endl;\n\n  int resolution, tile, x, y;\n\n\n  // Time this command\n  if( session->loglevel >= 2 ) command_timer.start();\n\n\n  // Parse the argument list\n  string arg = argument;\n  int delimitter = arg.find( \",\" );\n  resolution = atoi( arg.substr(0,delimitter).c_str() );\n\n  arg = arg.substr( delimitter + 1, arg.length() );\n  delimitter = arg.find( \",\" );\n  tile = atoi( arg.substr(0,delimitter).c_str() );\n\n  arg = arg.substr( delimitter + 1, arg.length() );\n  delimitter = arg.find( \",\" );\n  x = atoi( arg.substr(0,delimitter).c_str() );\n\n  arg = arg.substr( delimitter + 1, arg.length() );\n  delimitter = arg.find( \",\" );\n  y = atoi( arg.substr(0,arg.length()).c_str() );\n\n  if( session->loglevel >= 5 ){ \n    (*session->logfile) << \"SPECTRA :: resolution: \" << resolution\n\t\t\t<< \", tile: \" << tile\n\t\t\t<< \", x: \" << x\n\t\t\t<< \", y: \" << y << endl;\n  }\n\n  // Make sure our x,y coordinates are within the tile dimensions\n  if( x < 0 || x >= (int)(*session->image)->getTileWidth() ||\n      y < 0 || y >= (int)(*session->image)->getTileHeight() ){\n    throw invalid_argument( \"SPECTRA :: Error: x,y coordinates outside of tile boundaries\" );\n  }\n  \n\n  TileManager tilemanager( session->tileCache, *session->image, session->watermark, session->jpeg, session->logfile, session->loglevel );\n\n  // Use our horizontal views function to get a list of available spectral images\n  list <int> views = (*session->image)->getHorizontalViewsList();\n  list <int> :: const_iterator i;\n\n  // Our list of spectral reflectance values for the requested point\n  list <float> spectrum;\n\n\n#ifndef DEBUG\n  // Output our HTTP header\n  stringstream header;\n  header << session->response->createHTTPHeader( \"xml\", (*session->image)->getTimestamp() );\n  session->out->putStr( (const char*) header.str().c_str(), header.tellp() );\n  session->out->flush();\n#endif\n\n  session->out->putS( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" );\n  session->out->putS( \"<spectra>\\n\" );\n  session->out->flush();\n\n  for( i = views.begin(); i != views.end(); i++ ){\n\n    int n = *i;\n\n    RawTile rawtile = tilemanager.getTile( resolution, tile, n, session->view->yangle, session->view->getLayers(), UNCOMPRESSED );\n\n    // Make sure our x,y coordinates are within the tile dimensions\n    if( x >= (int)rawtile.width || y >= (int)rawtile.height ){\n      if( session->loglevel >= 1 ){\n\t(*session->logfile) << \"SPECTRA :: Error: x,y coordinates outside of tile boundaries\" << endl;\n      }\n      break;\n    }\n\n\n    unsigned int tw = (*session->image)->getTileWidth();\n    unsigned int index = y*tw + x;\n\n    void *ptr;\n    float reflectance = 0.0;\n\n    if( session->loglevel >= 5 ) (*session->logfile) << \"SPECTRA :: \" << rawtile.bpc << \" bits per channel data\" << endl;\n\n    // Handle depending on bit depth\n    if( rawtile.bpc == 8 ){\n      ptr = (unsigned char*) (rawtile.data);\n      reflectance = static_cast<float>((float)((unsigned char*)ptr)[index]) / 255.0;\n    }\n    else if( rawtile.bpc == 16 ){\n      ptr = (unsigned short*) (rawtile.data);\n      reflectance = static_cast<float>((float)((unsigned short*)ptr)[index]) / 65535.0;\n    }\n    else if( rawtile.bpc == 32 ){\n      if( rawtile.sampleType == FIXEDPOINT ) {\n        ptr = (unsigned int*) rawtile.data;\n        reflectance = static_cast<float>((float)((unsigned int*)ptr)[index]);\n      }\n      else {\n        ptr = (float*) rawtile.data;\n        reflectance = static_cast<float>((float)((float*)ptr)[index]);\n      }\n    }\n\n    spectrum.push_front( reflectance );\n\n    string metadata = (*session->image)->getMetadata( \"subject\" );\n\n    char tmp[1024];\n    snprintf( tmp, 1024, \"\\t<point>\\n\\t\\t<wavelength>%d</wavelength>\\n\\t\\t<reflectance>%f</reflectance>\\n\\t</point>\\n\", n, reflectance );\n    session->out->putS( tmp );\n    session->out->flush();\n\n    if( session->loglevel >= 3 ) (*session->logfile) << \"SPECTRA :: Band: \" << n << \", reflectance: \" << reflectance << endl;\n  }\n\n\n  session->out->putS( \"</spectra>\" );\n\n  if( session->out->flush() == -1 ) {\n    if( session->loglevel >= 1 ){\n      *(session->logfile) << \"SPECTRA :: Error flushing XML\" << endl;\n    }\n  }\n\n\n  // Inform our response object that we have sent something to the client\n  session->response->setImageSent();\n\n  // Total SPECTRA response time\n  if( session->loglevel >= 2 ){\n    *(session->logfile) << \"SPECTRA :: Total command time \" << command_timer.getTime() << \" microseconds\" << endl;\n  }\n\n}\n"], "fixing_code": ["15/01/2022:\n\t- Added verification that image has been set in SPECTRA.cc and check on the validity of the requested tile\n\t  resolution in JTL.cc. Fixes a couple of the crash conditions reported in https://github.com/ruven/iipsrv/issues/223\n\n\n14/01/2022:\n\t- Detection of HTJ2K also added for KakaduImage.cc for logging purposes (DEBUG needs to be enabled at compile time)\n\n\n07/01/2022:\n\t- Added detection of HTJ2K streams to OpenJPEG.cc for logging purposes (DEBUG needs to be enabled at compile time)\n\n\n14/09/2021:\n\t- Fix to use C99 stdint types instead of deprecated libtiff types\n\n\n13/09/2021:\n\t- Added extra error-checking to TIFFSetDirectory()\n\n\n03/09/2021:\n\t- Handle the more stringent ICC profile checking introduced in libpng 1.6. Fix to prevent incorrect sRGB\n\t  profiles failing with an error.\n\n\n06/07/2021:\n\t- Added support for PNG output. Functionality available through the CVT command (CVT=png) as well as through IIIF API.\n\t  PNG encoder supports alpha channels, 8 or 16 bit output, ICC profiles and XMP metadata.\n\n\n02/07/2021:\n\t- Small modification to Compressor class and removal of duplicate quality parameter from JPEGCompressor class\n\n\n28/04/2021:\n\t- Additional type casting added to IIIF.cc to avoid compiler warnings\n\n\n21/04/2021:\n\t- Modified log transform function in Transform.cc to set appropriate input scaling for 8 bit output\n\n\n13/04/2021:\n\t- Switched all FCGI printf statements to putStr or putS as all string data is always pre-formatted before\n\t  being sent. This is not only more efficient, but also elinates the risk of uncontrolled format string injection.\n\n\n11/03/2021:\n\t- Extra checks within bilinear interpolation code to avoid problems when used with address-sanitizer.\n\t- Re-ordering to fix incoherent rendering of content-disposition in IIPResponse.cc.\n\n\n04/03/2021:\n\t- Minor logging changes to TileManager class to allow improve logging with very detailed logging now moved into\n\t  higher loglevel.\n\n\n01/03/2012:\n\t- Modified JPEGCompressor::Finish() class to calculate data size before destroying compression structure.\n\t  Avoids complaints when using address-sanitizer complilation flag.\n\n\n13/02/2021:\n\t- Added logarithm transform processing to Transform.cc using the formula: out = c*log(1+in).\n\t  Log transform can be requested by setting the gamma request to GAM=log or GAM=logarithm.\n\n\n03/02/2021:\n\t- Added round() definition to JPEGCompressor.cc to allow MSVC compilation: https://github.com/ruven/iipsrv/issues/205\n\n\n27/06/2020:\n\t- Trailing query suffixes using the ? character are now stripped off the IIIF quality/format string.\n\t  Fixes: https://github.com/ruven/iipsrv/issues/145\n\n\n26/06/2020:\n\t- JPEG encoding re-written. Now more efficient with compressed data put directly into\n\t  output memory with no intermediate buffering and superfluous memory-memory copying.\n\t  Change also fixes problem with large ICC profiles: https://github.com/ruven/iipsrv/issues/198\n\n\n23/06/2020:\n\t- Fixed incorrect resizing in IIIF when provided with -ve parameters.\n\t  Fixes: https://github.com/ruven/iipsrv/issues/201.\n\n\n01/05/2020:\n\t- Corrected media type for ld+json response in IIIF.cc.\n\t  Fixes: https://github.com/ruven/iipsrv/issues/199\n\n\n06/03/2020:\n\t- Added % escaping to URL::escape() function to avoid problems with FCGI's printf()\n\t  Fixes https://github.com/ruven/iipsrv/issues/195\n\n\n25/02/2020:\n\t- Change return of createHTTPHeader function due to lack on stringstream\n\t  copying in older versions of GCC.\n\n\n21/02/2020:\n\t- New utility function in IIPResponse class to generate HTTP headers,\n\t  avoiding repetition within Zoomify, Deepzoom, IIIF code etc.\n\n\n19/02/2020:\n\t- Added CORS headers to both Zoomify and Deepzoom XML info files\n\n\n18/02/2020:\n\t- Added capture resolution info from JPEG2000 images when using Kakadu\n\n\n17/02/2020:\n\t- Physical image resolution in DPI or pixels/cm is now extracted from source image\n\t  (TIFF only for now) and used to calculate appropriate DPI for current zooming level\n\t  and injected into output JPEG metadata (https://github.com/ruven/iipsrv/issues/191)\n\n\n07/02/2020:\n\t- Added ability to change HTTP status code in IIPResponse class and\n\t  changed empty request reponse to 200 (https://github.com/ruven/iipsrv/issues/190)\n\n\n27/01/2020:\n\t- Added content-negotiation to IIIF info.json retrieval. If an IIIF\n\t  context profile has been added to the HTTP Accept headers, the\n\t  specified version will be used.\n\t- Also added ability to disable caching. All info.json responses now\n\t  not cached by Memcached and Content-Control header is set to private.\n\n\n23/01/2020:\n\t- Refactored and corrected resolution calculation code in View class\n\t- Added IIIF_VERSION server directive and support for v3 info.json\n\n\n21/01/2020:\n\t- Changes to standardize error messages in TPTImage class\n\n\n17/01/2020:\n\t- Modified MAX_CVT startup variable. Values can now be set all the way\n\t  down to 1px. Also possible to set to -1 to disable all limits\n\n\n10/10/2019:\n\t- Added CORS header to PFL profile output\n\n\n19/12/2019:\n\t- Switched indices to unsigned long long in interpolation routines in\n\t  Transform.cc to better handle very large image requests. Also added\n\t  memory allocation exception handling in Main.cc\n\n\n04/12/2019:\n\t- Added FILESYSTEM_SUFFIX configuration variable.\n\n\n04/07/2019:\n\t- Updated homepage URLs.\n\t- Forced Content-type for error messages to client text/plain to avoid\n\t  potential XSS issues.\n\n\n24/03/2019: Version 1.1 Released\n\n\n20/06/2019:\n\t- Documentation updates for doxygen\n\n\n13/06/2019:\n\t- Re-factored to display Logger output type availability at configure stage.\n\t- SIGHUP signal now empties internal caches rather than terminates iipsrv.\n\n\n12/06/2019:\n\t- Fix to avoid unnecessary conversion to binary when image already binary.\n\t- Update to OpenJPEG code to fix problem when re-using codec structures\n\t  more than once in the same request (for example when calculating histogram).\n\n\n11/06/2019:\n\t- Fixes to eliminate Coverity static scan analysis warnings.\n\t- New rewritten OpenJPEG module: now faster, cleaner and correctly\n\t  handles ICC profiles, bilevel and 16 bit images. Now activated by\n\t  default if OpenJPEG library found and Kakadu not requested.\n\n\n13/05/2019:\n\t- Update to configure.ac to change AC_CHECK_FILE for Kakadu sources to\n\t  AS_IF to properly enable cross builds. Patched thanks to Helmut Grohne.\n\n\n23/02/2019:\n\t- Added test for resolutions that may be untiled within a tiled TIFF.\n\n\n01/04/2019:\n\t- Added Logger class, which replaces the previous raw ofstream. The class\n\t  includes functionality to output log to syslog on UNIX-type systems.\n\t  Pass \"syslog\" to the LOGFILE startup environment variable to use syslog.\n\t- Minor code changes for Windows MSVC compilation\n\n\n19/03/2019:\n\t- Small increase in temporary buffer size in OBJ.cc colorspace() function\n\t  to avoid truncation warning in GCC 8.2\n\n\n13/03/2019:\n\t- Fixed bug in vertical mirroring transformation\n\t- Minor change to IIIF square parsing to allow correct logging\n\n\n25/02/2019:\n\t- Added check for overly large XMP sizes in JPEGCompressor.cc\n\n\n20/02/2019:\n\t- Fixed rounding error in getViewWidth() / getViewHeight() which was causing\n\t  certain IIIF requests to be handled by CVT rather than JTL. See:\n          https://github.com/ruven/iipsrv/issues/148#issuecomment-453125005\n\t- Adding missing default initialization for kdu_readmode variable.\n\n\n15/02/2019:\n\t- Changed exit code after signal handling for clean shutdown when iipsrv used\n\t  with systemd.\n\n\n15/01/2019:\n\t- Added \"bitonal\" to list of available qualities in the IIIF info.json file and\n\t  replaced use of pow with a faster bitwise shift.\n\n\n09/01/2019:\n\t- Added ability to do contrast stretching and histogram equalization via extensions\n\t  to the CNT command (CNT=EQ and CNT=ST respectively). Also added new IIP command to\n\t  enable color space conversion to greyscale or binary (aka bi-level or bitonal) via\n\t  the COL command (COL=grey or COL=binary). Image histogram is calculated once when\n\t  needed and saved in the image cache.\n\n\n21/12/2018:\n\t- Added fix for rounding error in CVT.cc to avoid garbled last lines in region\n\t  requests for very large images.\n\n\n30/11/2018:\n\t- Added maxWidth and maxHeight IIIF API 2.1 directives to info.json.\n\n\n13/11/2018:\n\t- Converted RawTile dataLength variable to unsigned to improve overflow\n\t  avoidance as per https://github.com/ruven/iipsrv/pull/156\n\t- Added Visual Studio version check to round() implementation in\n\t  windows/Time.cc as now supported in recent versions.\n\n\n12/11/2018:\n\t- Refactored image procesing code. Transform functions are now encapsulated\n\t  within a struct to allow new processing engines to be more easily added.\n\t- Cleanup to Environment.h to remove redundant comparison as readmode is\n\t  declared unsigned and can never be less than 0.\n\n\n05/11/2018:\n\t- Added codecOptions list to Session class for setting options for the encoders\n\t  or decoders. Added KDU_READMODE environment variable for setting the Kakadu\n\t  read-mode in KakaduImage.cc. Options are 0 (fast), 1 (fussy) or 2 (resilient).\n\n\n23/07/2018:\n\t- Fixed incorrect big endian TIFF file signature.\n\n\n27/04/2018:\n\t- Updates to Windows build files: removed Kakadu dependencies.\n\t- Added version check for snprintf Windows redefinition as this is now\n\t  supported in recent versions of Visual Studio.\n\n\n18/12/2017:\n\t- Added missing snprintf definition for Windows in JPEGCompressor.h\n\n\n14/12/2017:\n\t- Added the \"max\" parameter for the size section to the IIIF parser ahead of\n\t  deprecation in IIIF version 3.0: http://iiif.io/api/image/2.1/#size\n\t- Fixed some spelling mistakes in various files - thanks to Stefan Weil\n\n\n13/12/2017:\n\t- Update to configure.ac to fix compilation with Kakadu 7.10\n\n\n28/11/2017:\n\t- Modified bilinear interpolation code to avoid risk of unallocated buffer\n\t  reads at edges and to use replicated pixels.\n\n\n26/11/2017:\n\t- Removed exception specifications from the IIPImage and Compressor class\n\t  declarations as well as from their derived classes. Dynamic exception\n\t  specifications are deprecated in C++11 onwards. See for rationale and details:\n\t  http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2010/n3051.html\n\n\n25/11/2017:\n\t- Added missing RED, GREEN and BLUE colormap implementations to Transforms.cc\n\n\n24/11/2017:\n\t- Added input validation for SPECTRA, PFL and MINMAX commands to avoid\n\t  possible access to unmapped memory - thanks to John Heasman at DocuSign.\n\n\n17/11/2017:\n\t- Added a check to KakaduImage.cc for zero-sized regions\n\n\n04/10/2017:\n\t- Set an upper size limit to ICC profiles accepted for embedding\n\n\n04/08/2017:\n\t- Increased JPEG buffer size to handle large markers such as XMP metadata.\n\t- XMP metadata size now reported in CVT.cc.\n\n\n14/07/2017:\n\t- Added Compressor class from which JPEGCompressor is now derived.\n\t  Abstracting this will enable easier integration of PNG output.\n\t  Output format now specified in View class.\n\n\n06/07/2017:\n\t- Enabled CORS for error responses.\n\n\n05/07/2017:\n\t- Added \"Access-Control-Allow-Headers\" field if CORS has been set to\n\t  fix CORS Ajax problems with js libraries such as JQuery, Mootools.\n\n\n02/07/2017:\n\t- Added OpenMP threading info to startup in Main.cc.\n\n\n30/06/2017:\n\t- Added ICC profile embedding support in JPEGCompressor for both JTL\n\t  and CVT commands using an implementation based on IJG's iccjpeg.\n\t  TPTImage and KakaduImage now extract the profile into the metadata map.\n\t  Added also new EMBED_ICC environment variable to allow user to disable\n\t  embedding. Thanks to Dave Beaudet for initial implementation.\n\t- Refactored XMP metadata handling within JPEG.\n\n\n23/06/2017:\n\t- Added new OBJ metadata request for IIP protocol to return full list\n\t  of existing image resolutions.\n\n\n19/06/2017:\n\t- Modified URI_MAP to parse this prefix first and only if not present,\n\t  to use the query string. This allows query strings to be appended for\n\t  caching purposes etc.\n\n\n14/06/2017:\n\t- Added URI_MAP environment variable to enable mapping of URL prefixes\n\t  to specific protocol handlers without requiring web server rewriting.\n\t- Added missing checkImage() function to JTL and harmonized with CVT.cc.\n\n\n12/06/2017:\n\t- Added try block to avoid crashes with malformed images in older\n\t  versions of Kakadu.\n\n\n05/04/2017:\n\t- Fixed crash in KakaduImage.cc when zero sized images are requested\n\n\n29/03/2017:\n\t- Fixed scaling factor for bilinear interpolation in Transforms.cc\n\n\n02/03/2017:\n\t- Added extra conditions to JTL uncompressed tile request and slightly\n\t  refactored code to fix bug when greyscale conversion requested\n\n\n08/02/2017:\n\t- Extra try/catch in KakaduImage for images with missing codestreams\n\n\n29/11/2016:\n\t- Another update to IIIF aspect ratio code\n\n\n28/11/2016:\n\t- Update to aspect ratio code for sizes exceeding max CVT limit\n\n\n18/11/2016:\n\t- Modified IIIF.cc to respect aspect ratio when only width or height size\n\t  parameter is given and size exceeds server max CVT limit.\n\n\n16/10/2016:\n\t- Added IIIF 2.1 square region support\n\n\n29/08/2016:\n\t- Fix to bug in rotation code for 270 degs introduced when parallelization added.\n\t- Added test for pkg-config to configure.ac script.\n\n\n10/08/2016:\n\t- Update to configure.ac script for OpenJPEG\n\n\n04/08/2016:\n\t- Fix to info.json code in IIIF.cc to avoid problems with images containing only\n\t  one resolution level.\n\t- Fixed bug in filter_contrast() due to incorrectly calculated buffer size.\n\n\n08/07/2016:\n\t- Removed \"gray\" from IIIF list of supported features - already specified in the\n\t  qualities list.\n\n\n07/06/2016:\n\t- Added fix for API change in get_colour_mapping() function in Kakadu version 7.8\n\n\n02/06/2016:\n\t- Type change of counter in filter_contrast to long to avoid overflows with large\n\t  image exports.\n\n\n22/03/2016: Version 1.0 Released\n\n\n08/03/2016:\n\t- Added sizes field to IIIF JSON responses giving list of exportable pyramid sizes\n\t  smaller than MAX_CVT.\n\n\n29/02/2016:\n\t- Added support for 1 bit bilevel TIFF\n\n\n11/02/2016:\n\t- Added backlog parameter support for command line use through --backlog parameter.\n\t- Fixed several more Coverity scan warnings.\n\n\n29/01/2016:\n\t- Minor update to IIPImage.cc to reduce risk of race condition in stat -> fopen calls\n\n\n28/01/2016:\n\t- Added ifdefs to Transform.cc to enforce either ivdep for icc or openmp for gcc\n\n\n15/01/2016:\n\t- Fixed a series of minor issues identified by Coverity scan\n\n\n12/01/2016:\n\t- Added check to JPEGCompressor to reject images that are not 8 bits per channel\n\t- Added new floatProcessing() function to View.h to simplify code in JTL and CVT\n\n\n06/01/2016:\n\t- Added extra parameter check for incoherent region sizes for IIIF protocol\n\n\n21/12/2015:\n\t- Fixed infinite loop in View::calculateResolution if requested size = 0. Set\n\t  minimum output size to 1px.\n\n\n07/09/2015:\n\t- Fixed isfinite autoconf macro in acinclude.m4 to force float type\n\n\n06/08/2015:\n\t- Added timestamp check and metadata reload for images that have been modified\n\t- Added X-Powered-By header as a number of web servers strip out the Server header\n\n\n03/08/2015:\n\t- Added palette support for bilevel images to handle cases where LUTs are inverted\n\n\n27/07/2015:\n\t- Modified ROT command to accept horizontal flipping through \"!\" prefix as with IIIF.\n\t- Cosmetic improvement to FIF logging.\n\t- Modified TPTImage to disable use of memory mapping when opening images as this seems\n\t  to be slower when opening very large TIFFs.\n\n\n24/07/2015:\n\t- Added timers to all image processing functions in CVT.cc + code cleanup.\n\n\n21/07/2015:\n\t- Fixed error in View.cc when setting regions sizes that extend beyond image boundaries:\n\t  regions now cropped to boundaries.\n\n\n20/07/2015:\n\t- More OpenMP parallelization and cleanups to Transform.cc\n\n\n17/07/2015:\n\t- Increased buffer memory for JPEG encoding to handle certain images or tiles that\n\t  encode at Q=100 to sizes significantly larger than the raw data.\n\t- Added new CACHE_CONTROL server parameter to allow user control over this. If not\n\t  set, it defaults to the previous default value of \"max-age=86400\".\n\t- More image processing routines now parallelized with OpenMP: bilinear interpolation,\n\t  for example, now parallelized and considerably faster.\n\n\n19/03/2015:\n\t- Fix to KakaduImage.cc to check for increases in stripe heights and make sure\n\t  sufficient memory is allocated.\n\n\n13/02/2015:\n\t- Added checks for NULL FCGX_GetParam results and to empty HTTP_IF_MODIFIED_SINCE.\n\t  See: https://github.com/ruven/iipsrv/issues/33 - thanks to Brian Helba.\n\n\n12/02/2015:\n\t- Fixed @id decoding in IIIF.cc for paths containing slashes\n\n\n19/01/2015:\n\t- Added missing <cctype> include in URL.h and replaced pow(2.0,x) with bit shifting in\n\t  KakaduImage.cc and View.cc. Now compiles cleanly with VisualStudio Express.\n\t- Added extra OpenMP parallel declarations to Transform.cc and autoconf directive to\n\t  enable OpenMP by default.\n\n\n09/01/2015:\n\t- Better logging for exceptions in Main.cc\n\n\n27/11/2014:\n\t- Added new magic identifier for BigTIFF images to IIPImage.cc\n\n\n25/11/2014:\n\t- Fix of rounding error problem in View.cc for calculating resolution level.\n\t- Fix to IIIF.cc to properly handle resolution 0 requests.\n\n\n24/11/2014:\n\t- Fix to TileManager.cc to properly calculate tile height for final row.\n\t- Updates to IIIF code to ensure tiles are properly detected.\n\t- Changes to View class to calculate regions from full resolution image.\n\n\n24/10/2014:\n\t- Updated MINMAX command syntax in Task.cc to channel:min,max\n\n\n22/10/2014:\n\t- Updated KakaduImage.cc to use Kakadu namespaces in version 7.5 and greater.\n\n\n05/09/2014:\n\t- Updated IIIF info.json output to be compliant with changed IIIF 2.0 specification.\n\n\n03/09/2014:\n\t- Fix to IIPImage.cc for file type detection for multispectral sequences.\n\n\n22/08/2014:\n\t- Fix to properly read 12 bit JP2 files.\n\t- KakaduImage's virtual_levels counter moved into IIPImage class.\n\t- Modification to properly read number of components in multi-band JPEG2000 images.\n\n\n21/08/2014:\n\t- Fixes to allow compilation on older versions of gcc.\n\n\n20/08/2014:\n\t- Cleanup to IIIF code and some cosmetic improvements to generated JSON.\n\t- Added string escape function to URL class and moved all environment variable access to\n\t  Main.cc.\n\n\n19/08/2014:\n\t- Added aspect ratio flag in View.h for use in CVT.cc. Also cleaned up Main.cc to remove\n\t  unnecessary logging and record extra http headers.\n\t- Added IIIF protocol version 2.0 support via the IIIF argument.\n\n\n13/08/2014:\n\t- The rotate filter only ever operates on 8bit data, so remove if else type statements from\n\t  function - increases average function speed by about around 15%.\n\t- Added missing URL.h to src/Makefile.am.\n\t- Refactored JTL into 2 separate functions: run (parses arguments) & send (performs tile\n\t  request, processing and sending). Allows this to be re-used in other functions, such as\n\t  Zoomify.cc etc.\n\t- Refactored CVT similarly to JTL with now a separate send() function.\n\n\n11/08/2014:\n\t- Renamed variable bpp in IIPImage and its derived classes to bpc (bits per channel),\n\t  which is more logical and how we have named things elsewhere.\n\t- Modification to TileManager, which was requesting more tiles than necessary for regions.\n\t- Changes to View.cc to make WID and HEI requests with region exports produce images with a\n\t  *final* size of that requested by WID or HEI. For example RGN=0.1,0.1,0.5,0.5&WID=500 will\n\t  now produce an image of 500px in width rather than extract the region from an image of size\n\t  500px wide. CVT also cleaned up.\n\n\n06/08/2014:\n\t- Updated exception handling to use std::invalid_argument and a new derived file_error\n\t  exception within the IIPImage and derived classes. Allows better distinguishing between\n\t  HTTP status errors.\n\t- Moved URL decoding code from FIF.cc to separate URL class in URL.h.\n\n\n05/08/2014:\n\t- Added flip function to Transforms.\n\t- Modified JTL, DeepZoom, Zoomify and CVT to avoid float conversion if not required.\n\t- Converted bilinear and nearest neighbour resize code to unsigned char to avoid\n\t  unnecessary conversion to float.\n\n\n30/07/2014:\n\t- Moved CTW processing function to before gamma function in JTL.cc and CVT.cc.\n\t- Added missing function comments and minor layout changes in Transform.cc and FIF.cc.\n\n\n24/07/2014:\n\t- Simplified the use of hash_map types and removed the customized hash function, which\n\t  was causing our image metadata cache to work incorrectly. Removed the const prefix from\n\t  all hash maps keys.\n\n\n20/07/2014:\n\t- Min Max values are now read as vectors in multiple channel images - thanks to Chiara Marmo.\n\n\n19/07/2014:\n\t- Added support for magic byte signature file format detection instead of relying on\n\t  the file path suffix. Images can now be named arbitrarily (though suffixes still used\n\t  for sequences). Format enum types added to IIPImage class.\n\n\n18/07/2014:\n\t- Fix for unusual JPEG2000 \"sRGB\" bilevel images.\n\n\n20/03/2014:\n\t- Fixed signed/unsigned comparison compiler warning in Task.cc.\n\n\n16/03/2014:\n\t- Added back missing <algorithm> include to Task.cc.\n\n\n12/03/2014:\n\t- Added ability to handle multi-band (>3 channel) images and added new CTW color twist\n\t  command that takes a matrix that is applied to each channel in the image.\n\t- Cleanup of and more comprehensive timing output within JTL.cc.\n\n\n08/03/2014:\n\t- Changes to resizing algorithms to enable expansions as well as shrink for all views\n\t  and regions.\n\t- Added CORS (Cross Origin Resource Sharing) support via CORS environment variable for\n\t  (AJAX) metadata requests.\n\n\n24/02/2014:\n\t- Added missing function timer to JTL.cc and increased output precision in PFL.cc to 9.\n\n\n24/01/2014:\n\t- Changes to IIPImage and KakaduImage constructors to force correct initialization of\n\t  the tile size.\n\t- Added missing std::isinfinite function for Windows Visual Studio compilation.\n\n\n17/01/2013:\n\t- Fix to rotation code to have array indices run fully down to zero when counting down.\n\t  Thanks to Michal Becak for spotting this.\n\n\n06/12/2013:\n\t- Minor fixes to PFL.cc to add extra error checking and eliminate compiler warnings.\n\n\n05/12/2013:\n\t- Another update to use the ISO C++11 version of unordered_map if available. Plus a bunch\n\t  of compiler warning clean-ups.\n\n\n04/12/2013:\n\t- Updated hash map definitions to try to use unordered_map if available and fall back to\n\t  hash_map or map. Now done more cleanly using autoconf detection.\n\n\n02/12/2013:\n\t- Changes to IIPImage, TPTImage and KakaduImage class contstructors to use more efficient\n\t  member initializer lists, which are also necessary for compilation with clang compiler.\n\n\n25/11/2013:\n\t- Bug on red/green/blue colormaps fixed. Adding colormap inversion function (Chiara Marmo).\n\n\n22/10/2013:\n\t- Bittype compatibility has been completely reviewed. After normalization all processing\n\t  is done in float (Chiara Marmo).\n\n\n07/09/2013:\n\t- Modified PFL to handle single points as well as profiles. Thus syntax for single\n\t  points: PFL=<resolution>:<x>,<y> and for profiles PFL=<resolution>:<x1>,<y1>-<x2>,<y2>\n\n\n03/09/2013:\n\t- Updated PFL command to also handle multi-spectral data.\n\n\n02/09/2013:\n\t- Modified PFL command to use JSON and implemented vertical profiles.\n\n\n28/08/2013:\n\t- Added PFL command for obtaining raw X profiles of data. Syntax\n\t  is <resolution>:<x1>,<y1>-<x2>,<y2>. Only horizontal profiles are supported so far.\n\n\n23/08/2013:\n\t- Fix to OpenMP code in Transform.cc for compatibility with Intel compiler - thanks\n\t  Emmanuel Bertin.\n\t- Addition of extra timing output in JTL.cc\n\n\n06/08/2013:\n\t- Moved setenv/unsetenv function definitions to Main.cc where they are now needed following\n\t  movement of timezone setting code there.\n\n\n31/07/2013:\n\t- Fix to JTL.cc and TPTImage.cc for multispectral sequences consisting of images of\n\t  different bit depths.\n\n\n23/07/2013:\n\t- Fix to KakaduImage.cc to enable correct handling of bilevel images.\n\t- Fix to quality layer decoding - variables moved directly into IIPImage class\n\t- Scaling of 8 and 16 bit spectral data to normalized 0.0->1.0 float in SPECTRA.cc\n\n\n08/07/2013:\n\t- Fix to configure.in for libmemcached configuration problem on Fedora.\n\n\n02/07/2013:\n        - Optimizations to FIF.cc. Unnecessary file header reading is now avoided as top\n          level IIPImage class cache fully utilized. Cleanup of constructor code of IIPImage,\n          TPTImage and KakaduImage code. Significant speed up to requests of cached images.\n        - Modification to if_modified_since code in FIF.cc, to avoid repeatedly resetting the\n          timezone environment variable to UTC when checking timestamps, which is a relatively\n          slow process. This is now set once globally in Main.cc and set back on main exit.\n\n\n12/06/2013:\n\t- Extra checks for malformed images in KakaduImage.cc.\n\n\n11/04/2013:\n\t- Several fixes to Kakadu.cc. To force resolution levels to be floor(x/2) rather than the default\n\t  ceil(x/2) to match how TIFF resolutions are created. Also modification to force 16 bit\n\t  JPEG2000 to unsigned output. And also fix to strip alpha channels from images.\n\n\n14/03/2013:\n\t- Fix to gamma conversion - thanks Chiara Marmo\n\t- Update to greyscale conversion code\n\n\n09/03/2013:\n\t- Updated copyright message in header to new Free Software Foundation address.\n\n\n08/03/2013:\n\t- Added greyscale conversion support via new filter_greyscale transform function.\n\n\n23/02/2013:\n\t- Gamma correction fixed, minmax commands added, colormap commands added (Chiara Marmo)\n\n\n30/01/2013:\n\t- Fix to prevent crashing on malformed JPEG2000 files.\n\n\n11/12/2012:\n\t- Changed FLOAT enum type to FLOATINGPOINT to avoid VC++ compiler error.\n\t- Implemented 16 and 32bit versions of interpolation functions.\n\n\n10/12/2012:\n\t- Cleanup to 32 bit code\n\t- New command to set dynamically the min and max for 32 bit float\n\t- Addition of rotation function for 90,180,270 degree rotations\n\t- Fixes to autoconf\n\n\n30/10/2012:\n\t- Autoconf cleanup. Removed unnecessary autoconf files: should now use\n\t  autogen.sh script first before ./configure\n\n\n18/10/2012:\n\t- Fix to imageCache delete in FIF.cc - thanks to Michal Becak.\n\n\n16/10/2012:\n\t- Added support for TIFF 32 bit integer and float.\n\t- Fixed 16 bit JPEG2000 support.\n\t- Added 1 bit support for TIFF.\n\t- Added gamma support via GAM command.\n\t- Thanks to Chiara Marmo for initial implementation.\n\n\n09/09/2012:\n\t- TIFF metadata fixes.\n\n\n25/08/2012:\n\t- Windows compilation fixes by Michal Becak.\n\n\n13/08/2012:\n\t- Detect JPEG YCbCr encoding in TIFF and request conversion to RGB\n\t  by libtiff. Tile _TIFFmalloc() now only occurs in getTile().\n\n\n16/07/2012:\n\t- Added check to KakaduImage.cc to handle bilevel images.\n\t- Clean up to use only floats and floorf() in Transforms.cc.\n\n\n14/05/2012:\n\t- Added bilinear interpolation option for CVT resizing. Added\n\t  INTERPOLATION parameter to Environment.h, which takes an integer.\n\t  0 for fastest nearest neighbour and 1 for bilinear (default).\n\t  Current bilinear implementation 2.5x slower than nearest neighbour.\n\t- Additional fix to MAX_LAYERS code.\n\n\n11/05/2012:\n\t- Modified layer handling to decode all available layers if\n\t  MAX_LAYERS parameter is set to -1.\n\n\n08/05/2012:\n\t- Fix to Mac OSX and FreeBSD compilation of KakaduImage.cc.\n\n\n07/05/2012:\n\t- Fixed strip height calculation error in CVT.cc\n\n\n01/05/2012:\n\t- Modified memory handling in JPEGCompressor.cc to better handle\n\t  images where the compressed version may be bigger than the\n\t  original (for example at very high quality levels).\n\t- Changes to CVT.cc to work with new JPEGCompressor code and removal\n\t  of chunked encoding header directive from CVT.cc.\n\t- Fixed bug in CVT when specifying both WID and HEI.\n\t- Fixed compiler warning in IIPResponse.cc.\n\t- Added man page.\n\t- Added missing definition of get_nprocs() function to Kakadu.cc\n\t  for Mac OSX and FreeBSD.\n\n\n20/04/2012:\n\t- Fixed memory overun error in filter_contrast in Transforms.cc.\n\n\n18/04/2012:\n\t- Major rewrite of CVT code to unify TIFF and JPEG2000 region\n\t  export. Region compositing now in TileManager->getRegion with\n\t  modified getRegion Kakadu function. Changes also to View class\n\t  and ColourTransforms code to enable greater modularity for\n\t  image processing to regions. ColourTransforms renamed to\n\t  Transforms.\n\t  Thanks to The National Library of Wales, who will be using\n\t  iipsrv & iipmooviewer to deliver their Historic Newspapers\n\t  in 2012.\n\n\n21/03/2012:\n\t- Fix to TPTImage.c to force RGB conversion for YCbCr compressed\n\t  JPEG TIFFs, which is now the default in VIPS. Thanks to John\n\t  Cupitt for spotting this.\n\n\n17/03/2012:\n\t- Changes to View.[h,cc] to make sure getRequestWidth and Height\n\t  return correctly rounded values.\n\n\n12/03/2012:\n\t- Added HTTP Status: 400 Bad Request to error messages.\n\n\n28/01/2012:\n\t- Fixes to KakaduImage.cc to properly catch exceptions during file\n\t  opening and a check for existence during codestream shutdown.\n\t- Also added a check to updateTimeStamp to throw an exception if file\n\t  unreadable.\n\n\n28/08/2011:\n\t- Performance improvement to JPEG2000 16->8 bit downsampling. Now\n\t  using integer arithmetic rather than float.\n\n\n24/08/2011:\n\t- Updates to configure.in, FIF.cc and DeepZoom.cc to check for and\n\t  handle missing setenv, unsetenv and log2 functions. Fixes problem\n\t  on Solaris 10.\n\n\n02/08/2011:\n\t- Changed timegm function in FIF.cc to use more cross-platform POSIX\n\t  mktime function instead. Fixes compilation error on Solaris.\n\n\n22/07/2011:\n\t- Added 16bit and CIELAB support for JPEG2000.\n\t- Other minor cleanups.\n\n\n24/05/2011:\n\t- Fix added to DeepZoom.cc as FreeBSD does not have the log2 function.\n\t  Thanks to Andrew Hankinson for spotting this.\n\n\n23/05/2011:\n\t- Another fix to ensure the max layers variable is correctly used in\n\t  Zoomify and DeepZoom output.\n\n\n15/04/2011: Version 0.9.9 Released\n\n\n15/04/2011:\n\t- Fix to View.h to properly take into account max layers variable.\n\n\n14/04/2011:\n\t- Minor logging update to Zoomify.cc.\n\n\n13/04/2011:\n\t- Updated VC++ project files.\n\t- Minor changes to logging in Main.cc.\n\t- Updated autoconf files.\n\n\n08/04/2011:\n\t- Change to TileManager.cc to take into account whether a tile is padded\n\t  or not when applying a watermark.\n\n\n06/04/2011:\n\t- Changes to allow compilation on Windows with Visual C++ Express 2010.\n\t  New windows subfolder with missing time definitions and VC solution file.\n\t  Fixes also include definition of snprintf, log2 and S_ISREG, which are\n\t  all missing in Windows. Many thanks to Rob \"Bubba\" Hines for his help in\n\t  porting.\n\n\n21/03/2011:\n\t- Added extra NULL assignment to Task pointer after catch block to avoid\n\t  problems with uninitialized memory being deleted.\n\t- Added SIGINT handler for Ctrl-C interruptions with strsignal() to\n\t  display a more meaningful message.\n\n\n17/03/2011:\n\t- Clean-up of signed/unsigned variables in IIPImage.h and KakaduImage.h.\n\n\n15/03/2011:\n\t- Added sanity check for requested resolutions and tiles in JTL.cc.\n\t- Fixed problem with edge tiles and watermarking.\n\t- Clean-up of error message in TPTImage.cc.\n\n\n14/03/2011:\n\t- Fixed problem with standalone mode. Can now bind to an FCGI socket by\n\t  running iipsrv on the command line with the argument --bind.\n\t  For example: ./iipsrv.fcgi --bind localhost:9000\n\t- Fixed memory problem reported by valgrind with 16bit images.\n\t  Now simply use memcpy instead of re-assigning memory blocks. Changes to\n\t  JTL.cc, DeepZoom.cc and Zoomify.cc.\n\t- Added extra buffer overhead during JPEG compression.\n\t- Minor fixes to buffer copy code in Writer.h.\n\t- Fixed memory leak in Memcached code - need to explicitly free returned\n\t  objects!\n\n\n01/12/2010:\n\t- Modified Main.cc to not check in Memcached if there has been a\n\t  If-Modified-Since parameter sent and to not store 304 or error replies.\n\t  Otherwise we risk to send 304 replies to requests from uncached browsers.\n\n\n25/11/2010:\n\t- Removed final CRLF from JTL, Zoomify and DeepZoom requests, which causes\n\t  problems with http pipelining in firefox.\n\n\n24/11/2010:\n\t- Added extra checks to both TPTImage and KakaduImage for whether the\n\t  requested resolution exists.\n\t- Added ability to KakaduImage to downsize resolutions that were not generated\n\t  during encoding.\n\t- Added decompressor.finish() to catch block as finish crashes if called after\n\t  thread environment shut down.\n\n\n18/11/2010:\n\t- Fixed problem when clipping when applying watermarks for both 8 and 16 bit images.\n\n\n15/11/2010:\n\t- Added memcached support via libmemcached. List of servers passed via\n\t  MEMCACHED_SERVERS environment variable. Length of time the cache\n\t  remains valid set by optional MEMCACHED_TIMEOUT environment variable\n\t  (default is 3600 seconds). Storage is at output level, rather than tile\n\t  level, so is complementary to internal tile cache.\n\t  Thanks to Moravian Library in Brno (Moravska zemska knihovna v Brne,\n\t  http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online\n\t  (http://www.oldmapsonline.org/) from the Ministry of Culture\n\t  of the Czech Republic.\n\n\n06/11/2010:\n\t- Modification to Cache.h to use string::capacity() function instead of length()\n\t  to determine space used by string.\n\n\n31/10/2010:\n\t- Added simple watermarking support via Watermark class. New environment\n\t  variables added for the watermark image, the opacity and probability.\n\t  Changes mainly to the TileManager and Session class. Watermarking happens\n\t  transparently within the TileManager class for all tiles. Thanks to\n\t  Moravian Library in Brno (Moravska zemska knihovna v Brne, http://www.mzk.cz/)\n\t  R&D grant MK00009494301 & Old Maps Online (http://www.oldmapsonline.org/)\n\t  from the Ministry of Culture of the Czech Republic.\n\n\n15/09/2010:\n\t- Modified IIPImage.cc to enable handling of images with spectral band\n\t  indices with mixtures of 3 or 4 digits. For example, H1_pyr_000_090.tif\n\t  and H1_pyr_2500_090.tif.\n\n\n05/03/2010:\n\t- Another fix to JPEGCompressor.cc to fix a crash with very small\n\t  tiles with libjpeg-8.\n\n\n23/02/2010:\n\t- Modified JPEGCompressor.cc to fix compatibility problem with\n\t  libjpeg version 8. Simply removed jpeg_write_tables from\n\t  InitCompression function.\n\n\n09/02/2010:\n\t- Fixed memory leak in Zoomify.cc and DeepZoom.cc\n\n\n11/01/2010:\n\t- JPEG2000 support added via the Kakadu SDK. Added new class\n\t  KakaduImage derived from the IIPImage class. JPEG2000 support\n\t  added thanks to Moravian Library in Brno (Moravska zemska knihovna\n\t  v Brne, http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online\n\t  (http://www.oldmapsonline.org/) from the Ministry of Culture of\n\t  the Czech Republic.\n\t- Fix to string literal warnings in Writer.h\n\n\n08/01/2010:\n\t- Major changes to the HTTP headers sent by iipsrv. Added\n\t  HTTP Server id and Last-Modified timestamps to all server output.\n\t  Checks are now made for a If-Modified-Since response and a\n\t  304 Not Modified response returned if the timestamps match.\n\t  This should significantly improve server performance.\n\n\n04/01/2010:\n\t- Fixed bug in FIF.cc - the file system prefix was not being\n\t  initialized for each new image.\n\t- Layers environment variable changed to MAX_LAYERS to represent\n\t  the maximum number of layers user is allowed to decode.\n\n\n03/12/2009: Version 0.9.8 Released\n\n\n02/12/2009:\n\t- Adding missing include to IIPImage.cc for compilation with\n\t  gcc 4.4.1\n\n\n01/12/2009:\n\t- Added DeepZoom protocol support. Work carried out thanks to\n\t  Moravian Library in Brno (Moravska zemska knihovna v Brne,\n\t  http://www.mzk.cz/) R&D grant MK00009494301 & Old Maps Online\n\t  (http://www.oldmapsonline.org/) from the Ministry of Culture of\n\t  the Czech Republic.\n\n\n29/11/2009:\n\t- Added SPECTRA.cc class for returning spectral reflectance values\n\t  from multispectral images.\n\t- Fix to IIPImage.cc to properly count the number of horizontal and\n\t  vertical angles (used for multispectral bands).\n\n\n26/11/2009:\n\t- Fix to View class to take resampling into account when limiting\n\t  the CVT output size to the maximum server setting.\n\n\n17/11/2009:\n\t- Update to Zoomify to fix way it calculates number of zoom levels.\n\n\n05/11/2009:\n\t- Updated the autoconf, aclocal, automake and libtool scripts to the\n\t  latest versions.\n\n\n04/11/2009:\n\t- Added FILESYSTEM_PREFIX environment variable to allow a fixed prefix to\n\t  be applied to all image paths. Embedded NULL bytes of the form %00 and\n\t  any \"../\" are also now stripped out of any path for security reasons.\n          (Thanks to Willem Hengeveld for suggesting this)\n\n\n01/11/2009:\n\t- Fixes to View.h and View.cc to set the requested size to the maximum\n\t  allowable if not WID or HEI is set for the CVT command. The correct\n\t  resolution to use for CVT is now calculated for views smaller than\n\t  the smallest available.\n\n\n30/10/2009:\n\t- Security fixes to Task.cc to make sure while loop is limited to the\n\t  expected number of arguments. (Thanks to Willem Hengeveld for pointing\n\t  this out).\n\n\n19/08/2009:\n\t- Minor updates to IIPImage.h and IIPImage.cc. FIF.cc also now tests\n\t  for upper/lowercase .tif and .tiff suffixes.\n\n\n14/08/2009:\n\t- Modification to View.cc and CVT.cc to calculate the appropriate\n\t  resolution as the smallest resolution with a dimension greater size\n\t  than the requested dimensions. The WID and HEI directives now\n\t  effectively give bounding dimensions.\n\n11/08/2009:\n\t- Added simple nearest neighbour resampling to CVT command to allow it to\n\t  resize to the exact dimensions and not just the nearest available pyramid\n\t  resolution.\n\t- CVT Content-disposition tag now gives the image filename allowing the user\n\t  to save the image directly with this.\n\n\n01/07/2009:\n\t- Added quality layer parameter to images for future use with file formats\n\t  such as JPEG2000 that support this. This allows the decoding of several\n\t  quality layers via the LYR command. Modifications to the RawTile API\n\t  as well as IIPImage::getTile resulting in a series of changes to\n\t  CVT.cc, JTL.CC, TIL.cc, TPTImage.cc, View.h, Main.cc and Environment.h.\n\t  New startup configuration \"LAYERS\" to set the default number of layers.\n\t  Default is 1 otherwise.\n\n\n22/06/2009:\n\t- Changes to Zoomify.cc to take into account the fact that Zoomify expects\n\t  a fixed number of resolution levels.\n\n\n15/04/2009:\n\t- Added a flag for padded tiles into RawTile.h. TIFF's are padded out\n\t  to the tile size, but other formats may not be. Changes to TPTImage,\n\t  TileManager and CVT to handle this.\n\t- Also changed the RawTile flag for memory managed tiles.\n\n\n18/03/2009:\n\t- Added modification timestamps to the IIPImage and Rawtile classes.\n\t  The TileManager now checks whether the tile is fresh and reloads it\n\t  if necessary.\n\n\n11/03/2009:\n\t- Several changes to JTL.cc and Cache.h to eliminate a memory leak. Also\n\t  replaced malloc/free in Rawtile with new/delete.\n\n\n04/03/2009:\n\t- Minor changes to IIPResponse.cc to elimate type warnings.\n\n\n06/06/2008:\n\t- Modified the way the image dimensions are stored in the IIPImage class.\n\t  Rather than simply storing the max size, a vector of available dimensions\n\t  is saved making it easier to get the size for a given resolution.\n\n\n05/06/2008:\n\t- Added Zoomify support via the Zoomify=/path.tif request. Works with both\n\t  the official flash client and the Zoomify patched OpenLayers javascript\n\t  client. Work carried out thanks to R&D grant DC08P02OUK006 - Old Maps\n\t  Online (www.oldmapsonline.org) from Ministry of Culture of the Czech Republic.\n\n\n09/08/2007:\n\t- Added a Bits-per-channel OBJ request so that viewers can determine whether\n\t  to perform contrast adjustment server-side or client-side.\n\n\n07/08/2007:\n\t- Added CIELAB conversion and contrast handling to JTL so that it can handle\n\t  16 bit images.\n\n\n12/06/2007:\n\t- Updated URL decoding function in FIF.cc to C++ style and avoid a potential\n\t  buffer overflow.\n\t- Changed Task::run arguments to be const std::string& instead of just std::string.\n\n\n08/06/2007:\n\t- Changed JTL headers to enable HTTP 1.1 compatible cache control.\n\n\n13/12/2006: Version 0.9.7 Released\n\n\n07/11/2006:\n\t- Fixed the standalone mode, which is now activated by launching with\n\t  --standalone with an argument giving the socket port or path. For example,\n\t  localhost:8000 or /tmp/iipsrv.sock.\n\n\n31/10/2006:\n\t- Added hillshading Task class and function for simulated raking light\n\t  visualization using 3D surface normal data. This is used via the SHD\n\t  command in association with CVT, which takes 2 arguments: the horizontal\n\t  light source angle in degrees and the vertical angle from the horizontal\n\t  plane.\n\n\n26/09/2006:\n\t- Cleaned up the hash_map and pool_allocator stuff a little to use typedefs\n\t  instead of #ifdefs.\n\t- Added the legacy JTLS command class for panoramic views.\n\n\n22/09/2006:\n\t- Added an FCGI stand-alone mode usable with lighttpd's spawn-fcgi command.\n\t- Also changed the IIPImage cache to use a hash_map and pool_alloc memory.\n\n\n19/09/2006:\n\t- If we are using appropriate versions of g++, we now use the high\n\t  performance pool_alloc memory allocators for our cache containers.\n\t  Also, instead of a std::map, we use the hash_map extension which\n\t  offers better performance. Otherwise we default to std::map.\n\t- Fixed problem in TileManager where uncompressed tiles in the cache\n\t  were not being cropped when converted to JPEG. The IIPImage tile_width\n\t  and tile_height fields now hold the base tile size and not the current\n\t  tile size.\n\n\n18/092006:\n\t- Added a \"Last-Modified\" and \"ETag\" header to the CVT HTTP response\n\t  to prevent double requests from being made by web browsers.\n\t- Fixed bug in CVT where the tile size was being incorrectly set from\n\t  the IIPImage object and not the tile itself, which was a problem\n\t  when getting tiles from the cache.\n\n\n15/09/2006:\n\t- Changed the Cache keys to be simple strings rather than custom\n\t  objects. This has solved one of the crashing problems when tiles\n\t  are deleted from the cache.\n\n\n29/08/2006:\n\t- Added Writer class to shield the command implentations from any\n\t  FCGI specific functions.\n\n\n28/08/2006:\n\t- *Major* refactoring of the code. Each command is now called via its own\n\t  Task class (command pattern), with no processing done in Main.cc.\n\t  OBJ commands are in OBJ.cc and each output command (eg TIL,CVT etc)\n\t  now have their own classes.\n\t- The xangle and yangle variables are now in the View class, which\n\t  was previously named the ImageTransform class.\n\n\n25/08/2006:\n\t- Cleaned up the option variable parsing in Main.cc. It is now mostly\n\t  done via an Environment class, which checks for defaults etc.\n\n\n16/08/2006:\n\t- Moved QLT limit checking from Main into JPEG class. Also now check\n\t  for empty strings.\n\n\n08/08/2006:\n\t- Changed the contrast adjustment code to limit the result to a max of\n\t  255.0 as this was creating problems with the windows build.\n\n\n07/03/2006: Version 0.9.6 release.\n\n\n13/02/2006:\n\t- Fixed another problem on Mac OS X in TPTImage.cc. The number of\n\t  channels and bits per sample were giving strange values, so a\n\t  temporary uint16 variable is now used and cast from. It now works\n\t  perfectly on Mac :-)\n\n\n09/02/2006:\n\t- Changed the start_t and start_u types in Timer.h to long for\n\t  compatibility with Solaris and Mac OS X.\n\t- Some code cleanups in the IIPResponse class.\n\n\n23/01/2006:\n\t- Added an extra timer for tile insertion - this is the slowest\n\t  cache operation. We should look to put this in a separate\n\t  thread at some point!\n\n\n18/01/2006:\n\t- Added support for ptif suffix images. These are in fact just\n\t  pyramidal TIFF images.\n\n\n11/01/2006:\n\t- More fixes to the TileManager class. Cache can now handle\n\t  multiple compression types for the same tile simultaneously.\n\n\n24/12/2005:\n\t- Major rewrite of the TileManager class. Now much more concise.\n\n\n21/10/2005:\n\t- Added a check in JPEGCompressor for the number of channels.\n\t  JPEG can handle only image with either 1 or 3 channels.\n\n\n13/10/2005:\n\t- Added a TileManager class to act as a higher level access to\n\t  the tile cache. It checks whether a JPEG compressed tile\n\t  already exists and if not decodes one from the source image.\n\t  It also crops any edge tiles to the correct size (required\n\t  for the new Vips TIFF format).\n\n\n12/10/2005:\n\t- Fixed a JTL problem with the new tiled TIFF format. The edge\n\t  tiles are now cropped before being sent out.\n\t- Reworked JTL to just forward the request to JTLS rather than\n\t  duplicating the code there.\n\n\n09/06/2005:\n\t- Changed IIPImage.cc to use glob conditionally if glob has been\n\t  detected. This is needed for mingw compilation.\n\n\n01/04/2005:\n\t- Completed an LRU tile cache with the ability to set the max\n\t  cache size via the configuration variable MAX_IMAGE_CACHE_SIZE,\n\t  specified in MB.\n\n\n22/03/2005:\n\t- Added new Timer class to handle timing data to debug tile\n\t  access, command and total request times.\n\n\n06/01/2005:\n\t- Found problem in the CVT code when dealing with image sequences\n\t  of different numbers of channels. We have to reload the channel\n\t  information.\n\n\n15/12/2004:\n\t- CVT now works with the new standard compliant TIFF tile format\n\t  as used by vips-7.10 and later.\n\n\n10/12/2004:\n\t- CVT now works with 16 bit TIFF. The compression type reported\n\t  by TIL also switches from JPEG with 8 bit images to none with\n\t  16 bit.\n\n\n08/12/2004:\n\t- Added CNT contrast command support. Also added check to\n\t  TPTImage openImage() for whether our image is in fact\n\t  tiled or not, which can cause the server to crash.\n\n\n07/12/2004:\n\t- Added 16 bit support. Changes to RawTile - the data is now\n\t  a generic (void*) and there are now fields for channels per\n\t  sample and bits per channel. Changes also to TPTImage.cc,\n\t  Main.cc and JPEGCompressor.cc.\n\n\n01/09/2004:\n\t- Changed the LAB2sRGB code to allow a/b values from\n\t  +-127 as per the TIFF spec instead +-100.\n\t- Also fixed a problem caused by signed/unsigned comparisons\n\t  in ImageTransform with requests for CVT sizes smaller than\n\t  the tile size.\n\n\n26/08/2004:\n\t- Added largefile support by simply adding a configure\n\t  directive that will add the appropriate defines.\n\n\n05/07/2004:\n\t- Fixed problem in JPEGCompressor.cc concerning the value of\n\t  a structure that we try to read after de-allocating memory.\n\t  Only seems to be a problem with MSVC++ compiler. (Thanks to\n\t  Chris Tuijn for spotting this).\n\n\n11/05/2004: Version 0.9.5 release.\n\n\n04/05/2004:\n\t- Moved the colorspace check from TPTImage::getTile to\n\t  TPTImage::openImage so that a Colorspace request will always\n\t  have an associated colour space and not just after getTile\n\t  has been called. We assume for now that all the tiles of an\n\t  image are all of the same colour space.\n\n\n21/05/2004:\n\t- Removed no-cache pragma from CVT header. Also modified\n\t  max_CVT variable to limit the effective size and not the\n\t  total image size. ie a small RGN of a massive image can\n\t  still be sent OK. The resolution calculations have been\n\t  moved into ImageTransform and is now performed at the last\n\t  moment in the CVT section.\n\n\n16/05/2004:\n\t- Added MAX_CVT environment variable to limit width and height\n\t  requests of CVT commands. The default is set to 5000 pixels.\n\n\n02/04/2004:\n\t- Added SDS command support. This can be used for specifying\n\t  subimages or the horizontal/vertical angle in 3D sequence\n\t  images and will eventually replace the use of JTLS by the\n\t  client. Current usage is SDS=h,v where h and v are the\n\t  horizontal and vertical sequence angles.\n\n\n01/04/2004:\n        - Fixed length given by the error response. We now count both\n          the code and the argument.\n\n\n30/03/2004:\n        - Fixed TIL to only send the MIME type once before the tile\n          sequence.\n        - Added better error handling. The IIPResponse is now set\n          whenever we have a problem in Main.cc. Plus the catch\n          clause now checks for an error in IIPResponse and sends\n          this if available rather than the advertising banner.\n\n\n29/03/2004:\n        - Changed the vertical and horizontal views syntax back to\n          old style.\n        - Fixed problem with the number of CRLF's after the MIME type:\n          Apache complains if there are not 2 sets of CRLF.\n        - Changed the IIPImage metadata map to use the string class\n          rather than char* - seems to fix a freeze problem.\n\n\n06/03/2004:\n\t- More fixes to RGN code. Moved the verification logic into\n\t  the ImageTransform class itself rather than having it in\n\t  Main.cc. Also fixed a crash resulting from the use of\n\t  inlining - a gcc bug perhaps? Anyway, now perfectly stable.\n\n\n05/03/2004:\n\t- Some minor fixes to the RGN code to prevent crashes from\n\t  images of less than 8 pixels in size.\n\n\n04/03/2004:\n\t- Finished implementation of RGN CVT modifier. Can now specify\n\t  a region to CVT rather than always having the whole image.\n\t- Updated embedded XHTML advertising page.\n\t- Some doxygen-related cleanups and documenting.\n\n\n03/03/2004:\n\t- Changed Horizontal-views and Vertical-views return syntax to\n\t  return the number of views also (request by Denis):\n\t  Vertical-views/<number views>:view1 view2 ...\n\t  eg. Vertical-views/3:0 90 180.\n\n\n02/03/2004:\n\t- Added automatic colour spaces conversion for CIELAB images\n\t  to sRGB in CVT mode.\n\n\n14/12/2003:\n\t- Added Content-disposition headers to the JTL,JTLS and CVT output.\n\n\n10/11/2003:\n\t- Added missing std:: prefixes to a few STL variables in IIPImage.h\n\t  and IIPResponse.h.\n\t- Fixed the TIL command to return only the tiles within the\n\t  rectangle defined by the specified range rather than all of them.\n\n\n25/10/2003:\n\t- Fixed missing value in error message for non decodable tiles\n\t  in TPTImage.cc and erroneous extra CRLF in the Colorspace\n\t  reply.\n\n\n22/10/2003:\n\t- Changed the IIPImage class to give the horizontal and\n\t  vertical angles a default value of 0,90 for non-sequence\n\t  images.\n\n\n11/10/2003:\n\t- Removed the new allocator in getFileName() in IIPImage.cc to\n\t  a statically allocated buffer of size 1024.\n\n\n04/10/2003:\n\t- Generalised the metadata handling in Main to cope with any\n\t  available metadata.\n\t- Changed the way Basic-info and Summary-info work to simply\n\t  add more objects to the request string rather than try to\n\t  handle it themselves. Nicely eliminates duplicate handler code\n\t  without introducing classes or external functions for each obj.\n\t- Also fixed the server capability return code to follow the IIP\n\t  spec properly.\n\n\n03/10/2003:\n\t- Added tracking of image data to the IIPResponse class. In this\n\t  way, we can print an error if we have an uncomplete command\n\t  syntax. eg. a WID without a CVT. We should now never not have\n\t  some sort of response from the server.\n\t- Also added Author, Subject etc metadata handling to IIPImage\n\t  and the necessary handlers to IIPResponse.\n\n\n15/09/2003:\n\t- Added doxygen compatible comments to the header files. The\n\t  generated documentation is in the doc subdirectory.\n\t- Changed sprintf to snprintf in Main.cc for the vertical-views\n\t  handler; snprintf is already used everywhere else.\n\t- Added IIPResponse class to handle message passing back to the\n\t  client from OBJ requests. This allows for better error and\n\t  mime header handling and eliminates having to use FCGX_Fprintf.\n\t- Added SIGHUP handling to the other signals handled - we simply\n\t  exit and allow mod_fastcgi to restart us.\n\t- Added support for IIP-opt-comm and IIP-opt-obj requests.\n\t- Removed the deprecated Max-sequence and Vertical-views object\n\t  handlers.\n\n\n12/09/2003: Version 0.9.4 release.\n\t- Added content-type heading to error returns.\n\t- Added default catch() clause to the end of the main try block.\n\n\n11/09/2003:\n\t- Added Base64 URL decoding for the image path argument supplied\n\t  to the FIF command.\n\t- Cleanups to eliminate most GCC -Wall warnings.\n\n\n10/09/2003:\n\t- Changed tolower to ::tolower to fix compilation problem using\n\t  GCC 3x.\n\t- Logging cleanup.\n\n\n08/09/2003:\n\t- Major cleanup up the JPEGCompressor class.\n\t- Added bits per pixel to the IIPImage copy constructors.\n\t- Used the new JPEG buffer-buffer functions to add support for the\n\t  CVT command (limited to JPEG output only).\n\n\n07/09/2003:\n\t- Modified the JPEGCompressor class to allow stream-based buffer\n\t  to buffer encoding via 3 new functions (init, compressstrip and\n\t  finish).\n\n\n03/09/2003:\n\t- Fixed bug in TPTImage.cc. Added TIFFGetField commands for tile_width\n\t  and tile_height so that they get reset to the correct value even if\n\t  we loop through the end of a row.\n\t- Added a bits per pixel field to the IIPImage class.\n\n\n02/09/2003:\n\t- Fixed mis-placed jpeg_set_defaults in JPEGCompressor.cc.\n\t  Was being called after some individual values were set. This only\n\t  seemed affected the dct_method. Should compress faster now.\n\n\n28/08/2003:\n\t- Added WID and HEI command support.\n\n\n25/08/2003:\n\t- Autoconf cleanups. Now properly detect for JPEG and TIFF.\n\n\n24/08/2003:\n\t- Improvements to the configure script. Can now completely disable\n\t  the dynamic module loading code from even compiling.\n\t- The FCGI development library is now included in the distribution\n\t  for convenience and is integrated into the top-level configure\n\t  system. It is only used if it is not found on the computer.\n\n\n22/08/2003:\n\t- Added extra variable to track the current vertical position as\n\t  well as the horizontal. Fixes bug when switching between vertical\n\t  angles on sequence zero.\n\t- XHTMLified the advertising banner :-)\n\n\n22/03/2003: Version 0.9.3 release.\n\t- Reworked and cleaned up the TIL compression type and subtype data\n\t  stream prefix with reference to the FlashPix specification.\n\n\n21/03/2003:\n\t- All commands are converted to lower case to handle the java JAI\n\t  IIP implementation which does not properly follow the spec.\n\t- Also fixed typo in the Colorspace OBJ reply.\n\n\n15/03/2003:\n\t- Modifications to the JPEGCompressor constructor to take only the\n\t  Q factor. Plus the environment variable JPEG_QUALITY can\n\t  set the default Q factor.\n\t- Plus added an #undef HAVE_STDLIB_H to JPEGCompressor.h which was\n\t  interfering with libjpeg. No compiler warnings now even\n\t  with -pendantic set :-)\n\n\n13/03/2003:\n\t- Added extended colour space handling. The TIFF image now has its\n\t  colourspace extracted and a ColourSpace enum type now exists.\n\t  Greyscale, RGB and CIELAB are now handled, though the latter is not\n\t  in the official IIP spec.\n\n\n10/03/2003:\n\t- Changed RawTile copy constructor to use memcpy instead of looping\n\t  through an array: Big speed improvement :-)\n\n\n08/03/2003:\n\t- Added USR1 and TERM signal handling to main loop: We now have some\n\t  stats printed in the logfile on shutdown.\n\t- Modified IIPImage to accept a filename pattern variable, so that\n\t  the \"_pyr_\" image sequence pattern can be user modified.\n\t- Plus started work on a new tile cache system, but seems very slow,\n\t  so will mothball it till after the forthcoming release.\n\n\n10/11/2002:\n\t- Changes to some header files etc to make it compatible with gcc 3.2:\n\t  Mainly STL string specifiers, plus replacement of slist type\n\t  with std::list.\n\n\n24/03/2002\n        - Changed error handling to follow IIP return code specification\n          for unsupported objects and commands. Should do this for\n\t  each individual exception also.\n        - Added runtime configuration variable for max image cache size.\n\n\n18/03/2002: Version 0.9.2 release.\n\t- Changes to JPEGCompressor.cc: Fixed bug when encoding very small\n\t  tiles. Sometimes the JPEG data is larger than the original\n\t  so we need to allocate some extra memory just in case.\n\t- Also fixed the iip_empty_output_buffer( j_compress_ptr cinfo )\n\t  function. Now properly empties the buffer and returns TRUE.\n\t- The Compress() routine now passes the entire image buffer array\n\t  into jpeg_write_scanlines rather than doing it row by\n\t  row. The row array is dynamically allocated and deleted\n\t  at the end.\n\t- Added proper copy constructor to RawTile class to properly copy\n\t  data without leaving dangling pointers.\n\n\n09/08/2001:\n\t- Added time stamp.\n\t- Some minor changes to the JPEG wrapper - a couple of ints\n\t  changed to size_t's and a conditional added just before\n\t  the memcopy code.\n\n\n07/07/2001: Version 0.9.1 release.\n\t- Added field for number of bands in Rawtile.h, so that we can now\n\t  view 1-band black and white as well as 3-band colour images\n\t- Added missing JTL command handler for single non-sequential images\n\t  This does the same as JTLS command, but supplies 0 for sequence\n\t  and angle.\n\n\n05/03/2001: Version 0.9 release.\n\t- Bug fixes: moving IIPImage objects in the cache was resulting\n\t  in lost information.\n\t- DSOImage memory bug. Modules should handle their own cleanup\n\t  in close_image, which is now called by the ~DSOImage\n\n\n04/03/2001:\n\t- Changed ModuleLoader to a DSOImage derived class of IIPImage.\n\t- Use a STL map of image type to module path keywords instead\n\t  of trying to store caches of DSOImages.\n\t- Clean up and rationalisation of IIPImage class and derived\n\t  classes.\n\n\n01/03/2001:\n\t- Added tokenizer class.\n\t- Now checks for variables passed to fcgi at start up time\n\t  via --initial-env directive within Apache.\n\t- Added basic ModuleLoader class for loading external image decoders.\n\t- Fixes so that it no longer crashes even with null input query etc.\n\t- Removed ifdef DEBUG stuff.\n\n\n27/02/2001:\n\t- Added Tile-size directive and related IIPImage::getTileWidth() etc.\n\t- Allowing for various tile sizes to be used :)\n\t- Improved logfile reporting.\n", "/*\n    IIP JTL Command Handler Class Member Function: Export a single tile\n\n    Copyright (C) 2006-2022 Ruven Pillay.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.\n*/\n\n#include \"Task.h\"\n#include \"Transforms.h\"\n\n#include <cmath>\n#include <sstream>\n\nusing namespace std;\n\n\nvoid JTL::send( Session* session, int resolution, int tile ){\n\n  Timer function_timer;\n\n  if( session->loglevel >= 3 ) (*session->logfile) << \"JTL handler reached\" << endl;\n\n\n  // Make sure we have set our image\n  this->session = session;\n  checkImage();\n\n\n  // Time this command\n  if( session->loglevel >= 2 ) command_timer.start();\n\n\n  // Need to know the number of resolutions\n  int num_res = (*session->image)->getNumResolutions();\n\n\n  // If we have requested a rotation, remap the tile index to rotated coordinates\n  if( (int)((session->view)->getRotation()) % 360 == 90 ){\n\n  }\n  else if( (int)((session->view)->getRotation()) % 360 == 270 ){\n\n  }\n  else if( (int)((session->view)->getRotation()) % 360 == 180 ){\n    unsigned int im_width = (*session->image)->image_widths[num_res-resolution-1];\n    unsigned int im_height = (*session->image)->image_heights[num_res-resolution-1];\n    unsigned int tw = (*session->image)->getTileWidth();\n    //    unsigned int th = (*session->image)->getTileHeight();\n    int ntiles = (int) ceil( (double)im_width/tw ) * (int) ceil( (double)im_height/tw );\n    tile = ntiles - tile - 1;\n  }\n\n\n  // Sanity check\n  if( (resolution<0) || (tile<0) || (resolution>=num_res) ){\n    ostringstream error;\n    error << \"JTL :: Invalid resolution/tile number: \" << resolution << \",\" << tile;\n    throw error.str();\n  }\n\n\n  // Determine which output encoding to use\n  CompressionType ct = session->view->output_format;\n  Compressor *compressor;\n  if( session->view->output_format == JPEG ) compressor = session->jpeg;\n#ifdef HAVE_PNG\n  else if( session->view->output_format == PNG ) compressor = session->png;\n#endif\n  else compressor = session->jpeg;\n\n\n  TileManager tilemanager( session->tileCache, *session->image, session->watermark, compressor, session->logfile, session->loglevel );\n\n\n  // First calculate histogram if we have asked for either binarization,\n  //  histogram equalization or contrast stretching\n  if( session->view->requireHistogram() && (*session->image)->histogram.size()==0 ){\n\n    if( session->loglevel >= 4 ) function_timer.start();\n\n    // Retrieve an uncompressed version of our smallest tile\n    // which should be sufficient for calculating the histogram\n    RawTile thumbnail = tilemanager.getTile( 0, 0, 0, session->view->yangle, session->view->getLayers(), UNCOMPRESSED );\n\n    // Calculate histogram\n    (*session->image)->histogram =\n      session->processor->histogram( thumbnail, (*session->image)->max, (*session->image)->min );\n\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Calculated histogram in \"\n\t\t\t  << function_timer.getTime() << \" microseconds\" << endl;\n    }\n\n    // Insert the histogram into our image cache\n    const string key = (*session->image)->getImagePath();\n    imageCacheMapType::iterator i = session->imageCache->find(key);\n    if( i != session->imageCache->end() ) (i->second).histogram = (*session->image)->histogram;\n  }\n\n\n\n  // Request uncompressed tile if raw pixel data is required for processing\n  if( (*session->image)->getNumBitsPerPixel() > 8 || (*session->image)->getColourSpace() == CIELAB\n      || (*session->image)->getNumChannels() == 2 || (*session->image)->getNumChannels() > 3\n      || ( (session->view->colourspace==GREYSCALE || session->view->colourspace==BINARY) && (*session->image)->getNumChannels()==3 &&\n\t   (*session->image)->getNumBitsPerPixel()==8 )\n      || session->view->floatProcessing() || session->view->equalization\n      || session->view->getRotation() != 0.0 || session->view->flip != 0\n      ) ct = UNCOMPRESSED;\n\n\n  // Set the physical output resolution for this particular view and zoom level\n  if( (*session->image)->dpi_x > 0 && (*session->image)->dpi_y > 0 ){\n    unsigned int im_width = (*session->image)->image_widths[num_res-resolution-1];\n    unsigned int im_height = (*session->image)->image_heights[num_res-resolution-1];\n    float dpi_x = (*session->image)->dpi_x * ( (float)im_width / (float)(*session->image)->getImageWidth() );\n    float dpi_y = (*session->image)->dpi_y * ( (float)im_height / (float)(*session->image)->getImageHeight() );\n    compressor->setResolution( dpi_x, dpi_y, (*session->image)->dpi_units );\n\n    if( session->loglevel >= 5 ){\n      *(session->logfile) << \"JTL :: Setting physical resolution of tile to \" <<  dpi_x << \" x \" << dpi_y\n\t\t\t  << ( ((*session->image)->dpi_units==1) ? \" pixels/inch\" : \" pixels/cm\" ) << endl;\n    }\n  }\n\n\n  // Embed ICC profile\n  if( session->view->embedICC() && ((*session->image)->getMetadata(\"icc\").size()>0) ){\n    if( session->loglevel >= 3 ){\n      *(session->logfile) << \"JTL :: Embedding ICC profile with size \"\n\t\t\t  << (*session->image)->getMetadata(\"icc\").size() << \" bytes\" << endl;\n    }\n    compressor->setICCProfile( (*session->image)->getMetadata(\"icc\") );\n  }\n\n\n  RawTile rawtile = tilemanager.getTile( resolution, tile, session->view->xangle,\n\t\t\t\t\t session->view->yangle, session->view->getLayers(), ct );\n\n\n  int len = rawtile.dataLength;\n\n  if( session->loglevel >= 2 ){\n    *(session->logfile) << \"JTL :: Tile size: \" << rawtile.width << \" x \" << rawtile.height << endl\n\t\t\t<< \"JTL :: Channels per sample: \" << rawtile.channels << endl\n\t\t\t<< \"JTL :: Bits per channel: \" << rawtile.bpc << endl\n\t\t\t<< \"JTL :: Data size is \" << len << \" bytes\" << endl;\n  }\n\n\n  // Convert CIELAB to sRGB\n  if( (*session->image)->getColourSpace() == CIELAB ){\n\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Converting from CIELAB->sRGB\";\n      function_timer.start();\n    }\n    session->processor->LAB2sRGB( rawtile );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Only use our float pipeline if necessary\n  if( rawtile.bpc > 8 || session->view->floatProcessing() ){\n\n    // Make a copy of our max and min as we may change these\n    vector <float> min = (*session->image)->min;\n    vector <float> max = (*session->image)->max;\n\n    // Change our image max and min if we have asked for a contrast stretch\n    if( session->view->contrast == -1 ){\n\n      // Find first non-zero bin in histogram\n      unsigned int n0 = 0;\n      while( (*session->image)->histogram[n0] == 0 ) ++n0;\n\n      // Find highest bin\n      unsigned int n1 = (*session->image)->histogram.size() - 1;\n      while( (*session->image)->histogram[n1] == 0 ) --n1;\n\n      // Histogram has been calculated using 8 bits, so scale up to native bit depth\n      if( rawtile.bpc > 8 && rawtile.sampleType == FIXEDPOINT ){\n\tn0 = n0 << (rawtile.bpc-8);\n\tn1 = n1 << (rawtile.bpc-8);\n      }\n\n      min.assign( rawtile.bpc, (float)n0 );\n      max.assign( rawtile.bpc, (float)n1 );\n\n      // Reset our contrast\n      session->view->contrast = 1.0;\n\n      if( session->loglevel >= 5 ){\n\t*(session->logfile) << \"JTL :: Applying contrast stretch for image range of \"\n\t\t\t    << n0 << \" - \" << n1 << endl;\n      }\n    }\n\n\n    // Apply normalization and float conversion\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Normalizing and converting to float\";\n      function_timer.start();\n    }\n    session->processor->normalize( rawtile, max, min );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n\n\n    // Apply hill shading if requested\n    if( session->view->shaded ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying hill-shading\";\n\tfunction_timer.start();\n      }\n      session->processor->shade( rawtile, session->view->shade[0], session->view->shade[1] );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply color twist if requested\n    if( session->view->ctw.size() ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying color twist\";\n\tfunction_timer.start();\n      }\n      session->processor->twist( rawtile, session->view->ctw );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply any gamma or log transform\n    if( session->view->gamma != 1.0 ){\n\n      float gamma = session->view->gamma;\n      if( session->loglevel >= 4 ) function_timer.start();\n\n      // Check whether we have asked for logarithm\n      if( gamma == -1 ) session->processor->log( rawtile );\n      else session->processor->gamma( rawtile, gamma );\n\n      if( session->loglevel >= 4 ){\n\tif( gamma == -1 ) *(session->logfile) << \"JTL :: Applying logarithm transform in \";\n\telse *(session->logfile) << \"JTL :: Applying gamma of \" << gamma << \" in \";\n\t*(session->logfile) << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply inversion if requested\n    if( session->view->inverted ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying inversion\";\n\tfunction_timer.start();\n      }\n      session->processor->inv( rawtile );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply color mapping if requested\n    if( session->view->cmapped ){\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \"JTL :: Applying color map\";\n\tfunction_timer.start();\n      }\n      session->processor->cmap( rawtile, session->view->cmap );\n      if( session->loglevel >= 4 ){\n\t*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n      }\n    }\n\n\n    // Apply any contrast adjustments and/or clip to 8bit from 16 or 32 bit\n    float contrast = session->view->contrast;\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Applying contrast of \" << contrast << \" and converting to 8 bit\";\n      function_timer.start();\n    }\n    session->processor->contrast( rawtile, contrast );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n\n  }\n\n\n  // Reduce to 1 or 3 bands if we have an alpha channel or a multi-band image and have requested a JPEG tile\n  // For PNG, strip extra bands if we have more than 4 present\n  if( ( (session->view->output_format == JPEG) && (rawtile.channels == 2 || rawtile.channels > 3) ) ||\n      ( (session->view->output_format == PNG) && (rawtile.channels > 4) ) ){\n\n    unsigned int bands = (rawtile.channels==2) ? 1 : 3;\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Flattening channels to \" << bands;\n      function_timer.start();\n    }\n    session->processor->flatten( rawtile, bands );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Convert to greyscale if requested\n  if( (*session->image)->getColourSpace() == sRGB && session->view->colourspace == GREYSCALE ){\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Converting to greyscale\";\n      function_timer.start();\n    }\n    session->processor->greyscale( rawtile );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Convert to binary (bi-level) if requested\n  if( (*session->image)->getColourSpace() != BINARY && session->view->colourspace == BINARY ){\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Converting to binary with threshold \";\n      function_timer.start();\n    }\n    unsigned int threshold = session->processor->threshold( (*session->image)->histogram );\n    session->processor->binary( rawtile, threshold );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << threshold << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Apply histogram equalization\n  if( session->view->equalization ){\n    if( session->loglevel >= 4 ) function_timer.start();\n    // Perform histogram equalization\n    session->processor->equalize( rawtile, (*session->image)->histogram );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Applying histogram equalization in \"\n                          << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Apply flip\n  if( session->view->flip != 0 ){\n    Timer flip_timer;\n    if( session->loglevel >= 5 ){\n      flip_timer.start();\n    }\n\n    session->processor->flip( rawtile, session->view->flip  );\n\n    if( session->loglevel >= 5 ){\n      *(session->logfile) << \"JTL :: Flipping image \";\n      if( session->view->flip == 1 ) *(session->logfile) << \"horizontally\";\n      else *(session->logfile) << \"vertically\";\n      *(session->logfile) << \" in \" << flip_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Apply rotation - can apply this safely after gamma and contrast adjustment\n  if( session->view->getRotation() != 0.0 ){\n    float rotation = session->view->getRotation();\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Rotating image by \" << rotation << \" degrees\";\n      function_timer.start();\n    }\n    session->processor->rotate( rawtile, rotation );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;\n    }\n  }\n\n\n  // Compress to requested output format\n  if( rawtile.compressionType == UNCOMPRESSED ){\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \"JTL :: Encoding UNCOMPRESSED tile\";\n      function_timer.start();\n    }\n    len = compressor->Compress( rawtile );\n    if( session->loglevel >= 4 ){\n      *(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds to \"\n                          << rawtile.dataLength << \" bytes\" << endl;\n\n    }\n  }\n\n\n#ifndef DEBUG\n\n  // Send HTTP header\n  stringstream header;\n  header << session->response->createHTTPHeader( compressor->getMimeType(), (*session->image)->getTimestamp(), len );\n  if( session->out->putStr( (const char*) header.str().c_str(), header.tellp() ) == -1 ){\n    if( session->loglevel >= 1 ){\n      *(session->logfile) << \"JTL :: Error writing HTTP header\" << endl;\n    }\n  }\n\n#endif\n\n\n  if( session->out->putStr( static_cast<const char*>(rawtile.data), len ) != len ){\n   if( session->loglevel >= 1 ){\n     *(session->logfile) << \"JTL :: Error writing JPEG tile\" << endl;\n   }\n  }\n\n\n  if( session->out->flush() == -1 ) {\n    if( session->loglevel >= 1 ){\n      *(session->logfile) << \"JTL :: Error flushing JPEG tile\" << endl;\n    }\n  }\n\n\n  // Inform our response object that we have sent something to the client\n  session->response->setImageSent();\n\n  // Total JTL response time\n  if( session->loglevel >= 2 ){\n    *(session->logfile) << \"JTL :: Total command time \" << command_timer.getTime() << \" microseconds\" << endl;\n  }\n\n}\n", "/*\n    IIP SPECTRA Command Handler Class Member Function\n\n    Copyright (C) 2009-2022 Ruven Pillay.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software Foundation,\n    Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.\n*/\n\n#include \"Task.h\"\n#include <cmath>\n\nusing namespace std;\n\n\n/// Return the spectral reflectance for a particular point in XML format\nvoid SPECTRA::run( Session* session, const std::string& argument ){\n\n  /* The argument should consist of 2 comma separated values:\n     1) resolution\n     2) tile number\n     3) pixel index in x direction\n     4) pixel index in y direction\n  */\n\n  if( session->loglevel >= 3 ) (*session->logfile) << \"SPECTRA handler reached\" << endl;\n\n\n  // Make sure we have set our image\n  this->session = session;\n  checkImage();\n\n\n  // Time this command\n  if( session->loglevel >= 2 ) command_timer.start();\n\n\n  // Parse the argument list\n  string arg = argument;\n  int delimitter = arg.find( \",\" );\n  int resolution = atoi( arg.substr(0,delimitter).c_str() );\n\n  arg = arg.substr( delimitter + 1, arg.length() );\n  delimitter = arg.find( \",\" );\n  int tile = atoi( arg.substr(0,delimitter).c_str() );\n\n  arg = arg.substr( delimitter + 1, arg.length() );\n  delimitter = arg.find( \",\" );\n  int x = atoi( arg.substr(0,delimitter).c_str() );\n\n  arg = arg.substr( delimitter + 1, arg.length() );\n  delimitter = arg.find( \",\" );\n  int y = atoi( arg.substr(0,arg.length()).c_str() );\n\n  if( session->loglevel >= 5 ){ \n    (*session->logfile) << \"SPECTRA :: resolution: \" << resolution\n\t\t\t<< \", tile: \" << tile\n\t\t\t<< \", x: \" << x\n\t\t\t<< \", y: \" << y << endl;\n  }\n\n  // Make sure our x,y coordinates are within the tile dimensions\n  if( x < 0 || x >= (int)(*session->image)->getTileWidth() ||\n      y < 0 || y >= (int)(*session->image)->getTileHeight() ){\n    throw invalid_argument( \"SPECTRA :: Error: x,y coordinates outside of tile boundaries\" );\n  }\n  \n\n  TileManager tilemanager( session->tileCache, *session->image, session->watermark, session->jpeg, session->logfile, session->loglevel );\n\n  // Use our horizontal views function to get a list of available spectral images\n  list <int> views = (*session->image)->getHorizontalViewsList();\n  list <int> :: const_iterator i;\n\n  // Our list of spectral reflectance values for the requested point\n  list <float> spectrum;\n\n\n#ifndef DEBUG\n  // Output our HTTP header\n  stringstream header;\n  header << session->response->createHTTPHeader( \"xml\", (*session->image)->getTimestamp() );\n  session->out->putStr( (const char*) header.str().c_str(), header.tellp() );\n  session->out->flush();\n#endif\n\n  session->out->putS( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" );\n  session->out->putS( \"<spectra>\\n\" );\n  session->out->flush();\n\n  for( i = views.begin(); i != views.end(); i++ ){\n\n    int n = *i;\n\n    RawTile rawtile = tilemanager.getTile( resolution, tile, n, session->view->yangle, session->view->getLayers(), UNCOMPRESSED );\n\n    // Make sure our x,y coordinates are within the tile dimensions\n    if( x >= (int)rawtile.width || y >= (int)rawtile.height ){\n      if( session->loglevel >= 1 ){\n\t(*session->logfile) << \"SPECTRA :: Error: x,y coordinates outside of tile boundaries\" << endl;\n      }\n      break;\n    }\n\n\n    unsigned int tw = (*session->image)->getTileWidth();\n    unsigned int index = y*tw + x;\n\n    void *ptr;\n    float reflectance = 0.0;\n\n    if( session->loglevel >= 5 ) (*session->logfile) << \"SPECTRA :: \" << rawtile.bpc << \" bits per channel data\" << endl;\n\n    // Handle depending on bit depth\n    if( rawtile.bpc == 8 ){\n      ptr = (unsigned char*) (rawtile.data);\n      reflectance = static_cast<float>((float)((unsigned char*)ptr)[index]) / 255.0;\n    }\n    else if( rawtile.bpc == 16 ){\n      ptr = (unsigned short*) (rawtile.data);\n      reflectance = static_cast<float>((float)((unsigned short*)ptr)[index]) / 65535.0;\n    }\n    else if( rawtile.bpc == 32 ){\n      if( rawtile.sampleType == FIXEDPOINT ) {\n        ptr = (unsigned int*) rawtile.data;\n        reflectance = static_cast<float>((float)((unsigned int*)ptr)[index]);\n      }\n      else {\n        ptr = (float*) rawtile.data;\n        reflectance = static_cast<float>((float)((float*)ptr)[index]);\n      }\n    }\n\n    spectrum.push_front( reflectance );\n\n    string metadata = (*session->image)->getMetadata( \"subject\" );\n\n    char tmp[1024];\n    snprintf( tmp, 1024, \"\\t<point>\\n\\t\\t<wavelength>%d</wavelength>\\n\\t\\t<reflectance>%f</reflectance>\\n\\t</point>\\n\", n, reflectance );\n    session->out->putS( tmp );\n    session->out->flush();\n\n    if( session->loglevel >= 3 ) (*session->logfile) << \"SPECTRA :: Band: \" << n << \", reflectance: \" << reflectance << endl;\n  }\n\n\n  session->out->putS( \"</spectra>\" );\n\n  if( session->out->flush() == -1 ) {\n    if( session->loglevel >= 1 ){\n      *(session->logfile) << \"SPECTRA :: Error flushing XML\" << endl;\n    }\n  }\n\n\n  // Inform our response object that we have sent something to the client\n  session->response->setImageSent();\n\n  // Total SPECTRA response time\n  if( session->loglevel >= 2 ){\n    *(session->logfile) << \"SPECTRA :: Total command time \" << command_timer.getTime() << \" microseconds\" << endl;\n  }\n\n}\n"], "filenames": ["ChangeLog", "src/JTL.cc", "src/SPECTRA.cc"], "buggy_code_start_loc": [0, 4, 4], "buggy_code_end_loc": [0, 134, 62], "fixing_code_start_loc": [1, 4, 4], "fixing_code_end_loc": [6, 139, 65], "type": "CWE-190", "message": "IIPImage High Resolution Streaming Image Server prior to commit 882925b295a80ec992063deffc2a3b0d803c3195 is affected by an integer overflow in iipsrv.fcgi through malformed HTTP query parameters.", "other": {"cve": {"id": "CVE-2021-46389", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-07T14:15:07.727", "lastModified": "2022-02-10T21:02:29.107", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "IIPImage High Resolution Streaming Image Server prior to commit 882925b295a80ec992063deffc2a3b0d803c3195 is affected by an integer overflow in iipsrv.fcgi through malformed HTTP query parameters."}, {"lang": "es", "value": "IIPImage High Resolution Streaming Image Server versiones anteriores al commit 882925b295a80ec992063deffc2a3b0d803c3195, est\u00e1 afectado por un desbordamiento de enteros en el archivo iipsrv.fcgi mediante par\u00e1metros de consulta HTTP mal formados"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:high_resolution_streaming_image_server_project:high_resolution_streaming_image_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-01-14", "matchCriteriaId": "E71F30B5-21BB-44D7-859D-82A703CF9857"}]}]}], "references": [{"url": "https://github.com/ruven/iipsrv/commit/4ed59265fbbd636dc2fbbf325f8ea37ed300a6d9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ruven/iipsrv/commit/882925b295a80ec992063deffc2a3b0d803c3195", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ruven/iipsrv/commit/4ed59265fbbd636dc2fbbf325f8ea37ed300a6d9"}}