{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\DataHubBundle\\Controller;\n\nuse Pimcore\\Bundle\\DataHubBundle\\ConfigEvents;\nuse Pimcore\\Bundle\\DataHubBundle\\Configuration;\nuse Pimcore\\Bundle\\DataHubBundle\\Event\\AdminEvents;\nuse Pimcore\\Bundle\\DataHubBundle\\Event\\Config\\SpecialEntitiesEvent;\nuse Pimcore\\Bundle\\DataHubBundle\\GraphQL\\Service;\nuse Pimcore\\Bundle\\DataHubBundle\\Model\\SpecialEntitySetting;\nuse Pimcore\\Bundle\\DataHubBundle\\WorkspaceHelper;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\User;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\RouterInterface;\n\n/**\n * @Route(\"/admin/pimcoredatahub/config\")\n */\nclass ConfigController extends \\Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController\n{\n    public const CONFIG_NAME = 'plugin_datahub_config';\n\n    /**\n     * @param Configuration $configuration\n     *\n     * @return array\n     */\n    private function buildItem($configuration): array\n    {\n        $type = $configuration->getType() ?: 'graphql';\n        $name = $configuration->getName();\n\n        return [\n            'id' => $name,\n            'text' => $name,\n            'type' => 'config',\n            'iconCls' => 'plugin_pimcore_datahub_icon_' . $type,\n            'expandable' => false,\n            'leaf' => true,\n            'adapter' => $type,\n            'writeable' => $configuration->isWriteable(),\n            'permissions' => [\n                'delete' => $configuration->isAllowed('delete'),\n                'update' => $configuration->isAllowed('update')\n            ]\n        ];\n    }\n\n    /**\n     * @Route(\"/list\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listAction(Request $request): JsonResponse\n    {\n        // check permissions\n        $this->checkPermission(self::CONFIG_NAME);\n\n        $list = Configuration::getList();\n\n        $event = new GenericEvent($this);\n        $event->setArgument('list', $list);\n        \\Pimcore::getEventDispatcher()->dispatch($event, AdminEvents::CONFIGURATION_LIST);\n        $list = $event->getArgument('list');\n\n        $tree = [];\n\n        $groups = [];\n        /** @var Configuration $item */\n        foreach ($list as $item) {\n            if ($item->isAllowed('read')) {\n                if ($item->getGroup()) {\n                    if (empty($groups[$item->getGroup()])) {\n                        $groups[$item->getGroup()] = [\n                            'id' => 'group_' . $item->getName(),\n                            'text' => htmlspecialchars($item->getGroup()),\n                            'expandable' => true,\n                            'leaf' => false,\n                            'allowChildren' => true,\n                            'iconCls' => 'pimcore_icon_folder',\n                            'group' => $item->getGroup(),\n                            'children' => []\n                        ];\n                    }\n                    $groups[$item->getGroup()]['children'][] = $this->buildItem($item);\n                } else {\n                    $tree[] = $this->buildItem($item);\n                }\n            }\n        }\n\n        foreach ($groups as $group) {\n            $tree[] = $group;\n        }\n\n        return $this->json($tree);\n    }\n\n    /**\n     * @Route(\"/delete\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        if ((new Configuration(null, null))->isWriteable() === false) {\n            throw new ConfigWriteException();\n        }\n\n        try {\n            $name = $request->get('name');\n\n            $config = Configuration::getByName($name);\n            if (!$config instanceof Configuration) {\n                throw new \\Exception('Name does not exist.');\n            }\n            if ($config->isWriteable() === false) {\n                throw new ConfigWriteException();\n            }\n            if (!$config->isAllowed('delete')) {\n                throw $this->createAccessDeniedHttpException();\n            }\n\n            WorkspaceHelper::deleteConfiguration($config);\n\n            $config->delete();\n\n            return $this->json(['success' => true]);\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/add\")\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        if ((new Configuration(null, null))->isWriteable() === false) {\n            throw new ConfigWriteException();\n        }\n\n        try {\n            $path = $request->get('path');\n            $name = $request->get('name');\n            $type = $request->get('type');\n            $this->checkPermissionsHasOneOf(['plugin_datahub_admin', 'plugin_datahub_adapter_' . $type]);\n\n            $config = Configuration::getByName($name);\n\n            if ($config instanceof Configuration) {\n                throw new \\Exception('Name already exists.');\n            }\n\n            $config = new Configuration($type, $path, $name);\n            $config->save();\n\n            return $this->json(['success' => true, 'name' => $name]);\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/clone\")\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        try {\n            $name = $request->get('name');\n\n            $config = Configuration::getByName($name);\n            if ($config instanceof Configuration) {\n                throw new \\Exception('Name already exists.');\n            }\n\n            $originalName = $request->get('originalName');\n            $originalConfig = Configuration::getByName($originalName);\n            if (!$originalConfig) {\n                throw new \\Exception('Configuration not found');\n            }\n            if ($originalConfig->isWriteable() === false) {\n                throw new ConfigWriteException();\n            }\n            if (!$originalConfig->isAllowed('update')) {\n                throw $this->createAccessDeniedHttpException();\n            }\n            $this->checkPermissionsHasOneOf(['plugin_datahub_admin', 'plugin_datahub_adapter_' . $originalConfig->getType()]);\n\n            $originalConfig->setName($name);\n            $originalConfig->save();\n\n            return $this->json(['success' => true, 'name' => $name]);\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/get\")\n     *\n     * @param Request $request\n     * @param Service $graphQlService\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request, Service $graphQlService, EventDispatcherInterface $eventDispatcher): JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        $name = $request->get('name');\n\n        $configuration = Configuration::getByName($name);\n        if (!$configuration) {\n            throw new \\Exception('Datahub configuration ' . $name . ' does not exist.');\n        }\n        if (!$configuration->isAllowed('read')) {\n            throw $this->createAccessDeniedHttpException();\n        }\n\n        $config = $configuration->getConfiguration();\n        $config['schema']['queryEntities'] = array_values($config['schema']['queryEntities'] ?? []);\n        $config['schema']['mutationEntities'] = array_values($config['schema']['mutationEntities'] ?? []);\n        $config['schema']['specialEntities'] = $config['schema']['specialEntities'] ?? [];\n\n        if (!$config['schema']['specialEntities']) {\n            $config['schema']['specialEntities'] = [];\n        }\n\n        $coreSettings = [\n            new SpecialEntitySetting(\n                'document',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['document']['read'] ?? false,\n                $config['schema']['specialEntities']['document']['create'] ?? false,\n                $config['schema']['specialEntities']['document']['update'] ?? false,\n                $config['schema']['specialEntities']['document']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'document_folder',\n                true,\n                false,\n                false,\n                true,\n                $config['schema']['specialEntities']['document_folder']['read'] ?? false,\n                $config['schema']['specialEntities']['document_folder']['create'] ?? false,\n                $config['schema']['specialEntities']['document_folder']['update'] ?? false,\n                $config['schema']['specialEntities']['document_folder']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'asset',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['asset']['read'] ?? false,\n                $config['schema']['specialEntities']['asset']['create'] ?? false,\n                $config['schema']['specialEntities']['asset']['update'] ?? false,\n                $config['schema']['specialEntities']['asset']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'asset_folder',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['asset_folder']['read'] ?? false,\n                $config['schema']['specialEntities']['asset_folder']['create'] ?? false,\n                $config['schema']['specialEntities']['asset_folder']['update'] ?? false,\n                $config['schema']['specialEntities']['asset_folder']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'asset_listing',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['asset_listing']['read'] ?? false,\n                $config['schema']['specialEntities']['asset_listing']['create'] ?? false,\n                $config['schema']['specialEntities']['asset_listing']['update'] ?? false,\n                $config['schema']['specialEntities']['asset_listing']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'object_folder',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['object_folder']['read'] ?? false,\n                $config['schema']['specialEntities']['object_folder']['create'] ?? false,\n                $config['schema']['specialEntities']['object_folder']['update'] ?? false,\n                $config['schema']['specialEntities']['object_folder']['delete'] ?? false\n            )\n        ];\n\n        $specialSettingsEvent = new SpecialEntitiesEvent($coreSettings, $config);\n        $eventDispatcher->dispatch($specialSettingsEvent, ConfigEvents::SPECIAL_ENTITIES);\n\n        $finalSettings = [];\n\n        foreach ($specialSettingsEvent->getSpecialSettings() as $item) {\n            $finalSettings[$item->getName()] = $item;\n        }\n\n        $config['schema']['specialEntities'] = $specialSettingsEvent->getSpecialSettings();\n\n        //TODO we probably need this stuff only for graphql stuff\n        $supportedQueryDataTypes = $graphQlService->getSupportedDataObjectQueryDataTypes();\n        $supportedMutationDataTypes = $graphQlService->getSupportedDataObjectMutationDataTypes();\n\n        return new JsonResponse(\n            [\n                'name' => $configuration->getName(),\n                'configuration' => $config,\n                'userPermissions' => [\n                    'update' => $configuration->isAllowed('update'),\n                    'delete' => $configuration->isAllowed('delete')\n                ],\n                'supportedGraphQLQueryDataTypes' => $supportedQueryDataTypes,\n                'supportedGraphQLMutationDataTypes' => $supportedMutationDataTypes,\n                'modificationDate' => $config['general']['modificationDate']\n            ]\n        );\n    }\n\n    /**\n     * @Route(\"/save\")\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function saveAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        try {\n            $data = $request->get('data');\n            $modificationDate = $request->get('modificationDate', 0);\n\n            $dataDecoded = json_decode($data, true);\n\n            $name = $dataDecoded['general']['name'];\n            $config = Configuration::getByName($name);\n            if ($config->isWriteable() === false) {\n                throw new ConfigWriteException();\n            }\n            if (!$config->isAllowed('update')) {\n                throw $this->createAccessDeniedHttpException();\n            }\n            $configuration = $config->getConfiguration();\n\n            $savedModificationDate = 0;\n\n            if ($configuration && isset($configuration['general']['modificationDate'])) {\n                $savedModificationDate = $configuration['general']['modificationDate'];\n            }\n\n            if ($modificationDate < $savedModificationDate) {\n                throw new \\Exception('The configuration was modified during editing, please reload the configuration and make your changes again');\n            }\n\n            $dataDecoded['general']['modificationDate'] = time();\n\n            $keys = ['queryEntities', 'mutationEntities'];\n            foreach ($keys as $key) {\n                $transformedEntities = [];\n                if ($dataDecoded['schema'][$key]) {\n                    foreach ($dataDecoded['schema'][$key] as $entity) {\n                        $transformedEntities[$entity['id']] = $entity;\n                    }\n                }\n                $dataDecoded['schema'][$key] = $transformedEntities;\n            }\n\n            if ($dataDecoded['schema']['specialEntities']) {\n                $transformedEntities = [];\n\n                foreach ($dataDecoded['schema']['specialEntities'] as $entity) {\n                    $transformedEntities[$entity['name']] = [\n                        'read' => $entity['readAllowed'],\n                        'create' => $entity['createAllowed'],\n                        'update' => $entity['updateAllowed'],\n                        'delete' => $entity['deleteAllowed'],\n                    ];\n\n                    $dataDecoded['schema']['specialEntities'] = $transformedEntities;\n                }\n            }\n\n            $config->setConfiguration($dataDecoded);\n\n            if ($config->isAllowed('read') && $config->isAllowed('update')) {\n                $config->save();\n\n                return $this->json(['success' => true, 'modificationDate' => $dataDecoded['general']['modificationDate']]);\n            } else {\n                return $this->json(['success' => false, 'permissionError' => true]);\n            }\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/get-explorer-url\")\n     *\n     * @param RouterInterface $routingService\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function getExplorerUrlAction(RouterInterface $routingService, Request $request): ?JsonResponse\n    {\n        $name = $request->get('name');\n\n        $url = $routingService->generate('admin_pimcoredatahub_config', ['clientname' => $name]);\n        if ($url) {\n            return $this->json(['explorerUrl' => $url]);\n        } else {\n            throw new \\Exception('unable to resolve');\n        }\n    }\n\n    /**\n     * @Route(\"/thumbnail-tree\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailTreeAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new \\Pimcore\\Model\\Asset\\Image\\Thumbnail\\Config\\Listing();\n        $items = $list->load();\n\n        foreach ($items as $item) {\n            $thumbnails[] = [\n                'id' => $item->getName(),\n                'text' => $item->getName()\n            ];\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/permissions-users\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPermissionUsersAction(Request $request)\n    {\n        $type = $request->get('type', 'user');\n\n        $list = new User\\Listing();\n        if ($type === 'role') {\n            $list = new User\\Role\\Listing();\n        }\n\n        $list->setCondition('type = ? AND id != 1', [$type]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n\n        $users = [];\n        foreach ($list->getItems() as $user) {\n            if ($user->getId() && $user->getName() != 'system') {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'text' => $user->getName(),\n                    'elementType' => 'user',\n                ];\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\DataHubBundle\\Controller;\n\nuse Pimcore\\Bundle\\DataHubBundle\\ConfigEvents;\nuse Pimcore\\Bundle\\DataHubBundle\\Configuration;\nuse Pimcore\\Bundle\\DataHubBundle\\Event\\AdminEvents;\nuse Pimcore\\Bundle\\DataHubBundle\\Event\\Config\\SpecialEntitiesEvent;\nuse Pimcore\\Bundle\\DataHubBundle\\GraphQL\\Service;\nuse Pimcore\\Bundle\\DataHubBundle\\Model\\SpecialEntitySetting;\nuse Pimcore\\Bundle\\DataHubBundle\\WorkspaceHelper;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\User;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\RouterInterface;\n\n/**\n * @Route(\"/admin/pimcoredatahub/config\")\n */\nclass ConfigController extends \\Pimcore\\Bundle\\AdminBundle\\Controller\\AdminController\n{\n    public const CONFIG_NAME = 'plugin_datahub_config';\n\n    /**\n     * @param Configuration $configuration\n     *\n     * @return array\n     */\n    private function buildItem($configuration): array\n    {\n        $type = $configuration->getType() ?: 'graphql';\n        $name = $configuration->getName();\n\n        return [\n            'id' => $name,\n            'text' => htmlspecialchars($name),\n            'type' => 'config',\n            'iconCls' => 'plugin_pimcore_datahub_icon_' . $type,\n            'expandable' => false,\n            'leaf' => true,\n            'adapter' => $type,\n            'writeable' => $configuration->isWriteable(),\n            'permissions' => [\n                'delete' => $configuration->isAllowed('delete'),\n                'update' => $configuration->isAllowed('update')\n            ]\n        ];\n    }\n\n    /**\n     * @Route(\"/list\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function listAction(Request $request): JsonResponse\n    {\n        // check permissions\n        $this->checkPermission(self::CONFIG_NAME);\n\n        $list = Configuration::getList();\n\n        $event = new GenericEvent($this);\n        $event->setArgument('list', $list);\n        \\Pimcore::getEventDispatcher()->dispatch($event, AdminEvents::CONFIGURATION_LIST);\n        $list = $event->getArgument('list');\n\n        $tree = [];\n\n        $groups = [];\n        /** @var Configuration $item */\n        foreach ($list as $item) {\n            if ($item->isAllowed('read')) {\n                if ($item->getGroup()) {\n                    if (empty($groups[$item->getGroup()])) {\n                        $groups[$item->getGroup()] = [\n                            'id' => 'group_' . $item->getName(),\n                            'text' => htmlspecialchars($item->getGroup()),\n                            'expandable' => true,\n                            'leaf' => false,\n                            'allowChildren' => true,\n                            'iconCls' => 'pimcore_icon_folder',\n                            'group' => $item->getGroup(),\n                            'children' => []\n                        ];\n                    }\n                    $groups[$item->getGroup()]['children'][] = $this->buildItem($item);\n                } else {\n                    $tree[] = $this->buildItem($item);\n                }\n            }\n        }\n\n        foreach ($groups as $group) {\n            $tree[] = $group;\n        }\n\n        return $this->json($tree);\n    }\n\n    /**\n     * @Route(\"/delete\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function deleteAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        if ((new Configuration(null, null))->isWriteable() === false) {\n            throw new ConfigWriteException();\n        }\n\n        try {\n            $name = $request->get('name');\n\n            $config = Configuration::getByName($name);\n            if (!$config instanceof Configuration) {\n                throw new \\Exception('Name does not exist.');\n            }\n            if ($config->isWriteable() === false) {\n                throw new ConfigWriteException();\n            }\n            if (!$config->isAllowed('delete')) {\n                throw $this->createAccessDeniedHttpException();\n            }\n\n            WorkspaceHelper::deleteConfiguration($config);\n\n            $config->delete();\n\n            return $this->json(['success' => true]);\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/add\")\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        if ((new Configuration(null, null))->isWriteable() === false) {\n            throw new ConfigWriteException();\n        }\n\n        try {\n            $path = $request->get('path');\n            $name = $request->get('name');\n            $type = $request->get('type');\n            $this->checkPermissionsHasOneOf(['plugin_datahub_admin', 'plugin_datahub_adapter_' . $type]);\n\n            $config = Configuration::getByName($name);\n\n            if ($config instanceof Configuration) {\n                throw new \\Exception('Name already exists.');\n            }\n\n            $config = new Configuration($type, $path, $name);\n            $config->save();\n\n            return $this->json(['success' => true, 'name' => $name]);\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/clone\")\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        try {\n            $name = $request->get('name');\n\n            $config = Configuration::getByName($name);\n            if ($config instanceof Configuration) {\n                throw new \\Exception('Name already exists.');\n            }\n\n            $originalName = $request->get('originalName');\n            $originalConfig = Configuration::getByName($originalName);\n            if (!$originalConfig) {\n                throw new \\Exception('Configuration not found');\n            }\n            if ($originalConfig->isWriteable() === false) {\n                throw new ConfigWriteException();\n            }\n            if (!$originalConfig->isAllowed('update')) {\n                throw $this->createAccessDeniedHttpException();\n            }\n            $this->checkPermissionsHasOneOf(['plugin_datahub_admin', 'plugin_datahub_adapter_' . $originalConfig->getType()]);\n\n            $originalConfig->setName($name);\n            $originalConfig->save();\n\n            return $this->json(['success' => true, 'name' => $name]);\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/get\")\n     *\n     * @param Request $request\n     * @param Service $graphQlService\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request, Service $graphQlService, EventDispatcherInterface $eventDispatcher): JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        $name = $request->get('name');\n\n        $configuration = Configuration::getByName($name);\n        if (!$configuration) {\n            throw new \\Exception('Datahub configuration ' . $name . ' does not exist.');\n        }\n        if (!$configuration->isAllowed('read')) {\n            throw $this->createAccessDeniedHttpException();\n        }\n\n        $config = $configuration->getConfiguration();\n        $config['schema']['queryEntities'] = array_values($config['schema']['queryEntities'] ?? []);\n        $config['schema']['mutationEntities'] = array_values($config['schema']['mutationEntities'] ?? []);\n        $config['schema']['specialEntities'] = $config['schema']['specialEntities'] ?? [];\n\n        if (!$config['schema']['specialEntities']) {\n            $config['schema']['specialEntities'] = [];\n        }\n\n        $coreSettings = [\n            new SpecialEntitySetting(\n                'document',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['document']['read'] ?? false,\n                $config['schema']['specialEntities']['document']['create'] ?? false,\n                $config['schema']['specialEntities']['document']['update'] ?? false,\n                $config['schema']['specialEntities']['document']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'document_folder',\n                true,\n                false,\n                false,\n                true,\n                $config['schema']['specialEntities']['document_folder']['read'] ?? false,\n                $config['schema']['specialEntities']['document_folder']['create'] ?? false,\n                $config['schema']['specialEntities']['document_folder']['update'] ?? false,\n                $config['schema']['specialEntities']['document_folder']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'asset',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['asset']['read'] ?? false,\n                $config['schema']['specialEntities']['asset']['create'] ?? false,\n                $config['schema']['specialEntities']['asset']['update'] ?? false,\n                $config['schema']['specialEntities']['asset']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'asset_folder',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['asset_folder']['read'] ?? false,\n                $config['schema']['specialEntities']['asset_folder']['create'] ?? false,\n                $config['schema']['specialEntities']['asset_folder']['update'] ?? false,\n                $config['schema']['specialEntities']['asset_folder']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'asset_listing',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['asset_listing']['read'] ?? false,\n                $config['schema']['specialEntities']['asset_listing']['create'] ?? false,\n                $config['schema']['specialEntities']['asset_listing']['update'] ?? false,\n                $config['schema']['specialEntities']['asset_listing']['delete'] ?? false\n            ),\n            new SpecialEntitySetting(\n                'object_folder',\n                true,\n                true,\n                true,\n                true,\n                $config['schema']['specialEntities']['object_folder']['read'] ?? false,\n                $config['schema']['specialEntities']['object_folder']['create'] ?? false,\n                $config['schema']['specialEntities']['object_folder']['update'] ?? false,\n                $config['schema']['specialEntities']['object_folder']['delete'] ?? false\n            )\n        ];\n\n        $specialSettingsEvent = new SpecialEntitiesEvent($coreSettings, $config);\n        $eventDispatcher->dispatch($specialSettingsEvent, ConfigEvents::SPECIAL_ENTITIES);\n\n        $finalSettings = [];\n\n        foreach ($specialSettingsEvent->getSpecialSettings() as $item) {\n            $finalSettings[$item->getName()] = $item;\n        }\n\n        $config['schema']['specialEntities'] = $specialSettingsEvent->getSpecialSettings();\n\n        //TODO we probably need this stuff only for graphql stuff\n        $supportedQueryDataTypes = $graphQlService->getSupportedDataObjectQueryDataTypes();\n        $supportedMutationDataTypes = $graphQlService->getSupportedDataObjectMutationDataTypes();\n\n        return new JsonResponse(\n            [\n                'name' => $configuration->getName(),\n                'configuration' => $config,\n                'userPermissions' => [\n                    'update' => $configuration->isAllowed('update'),\n                    'delete' => $configuration->isAllowed('delete')\n                ],\n                'supportedGraphQLQueryDataTypes' => $supportedQueryDataTypes,\n                'supportedGraphQLMutationDataTypes' => $supportedMutationDataTypes,\n                'modificationDate' => $config['general']['modificationDate']\n            ]\n        );\n    }\n\n    /**\n     * @Route(\"/save\")\n     *\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function saveAction(Request $request): ?JsonResponse\n    {\n        $this->checkPermission(self::CONFIG_NAME);\n\n        try {\n            $data = $request->get('data');\n            $modificationDate = $request->get('modificationDate', 0);\n\n            $dataDecoded = json_decode($data, true);\n\n            $name = $dataDecoded['general']['name'];\n            $config = Configuration::getByName($name);\n            if ($config->isWriteable() === false) {\n                throw new ConfigWriteException();\n            }\n            if (!$config->isAllowed('update')) {\n                throw $this->createAccessDeniedHttpException();\n            }\n            $configuration = $config->getConfiguration();\n\n            $savedModificationDate = 0;\n\n            if ($configuration && isset($configuration['general']['modificationDate'])) {\n                $savedModificationDate = $configuration['general']['modificationDate'];\n            }\n\n            if ($modificationDate < $savedModificationDate) {\n                throw new \\Exception('The configuration was modified during editing, please reload the configuration and make your changes again');\n            }\n\n            $dataDecoded['general']['modificationDate'] = time();\n\n            $keys = ['queryEntities', 'mutationEntities'];\n            foreach ($keys as $key) {\n                $transformedEntities = [];\n                if ($dataDecoded['schema'][$key]) {\n                    foreach ($dataDecoded['schema'][$key] as $entity) {\n                        $transformedEntities[$entity['id']] = $entity;\n                    }\n                }\n                $dataDecoded['schema'][$key] = $transformedEntities;\n            }\n\n            if ($dataDecoded['schema']['specialEntities']) {\n                $transformedEntities = [];\n\n                foreach ($dataDecoded['schema']['specialEntities'] as $entity) {\n                    $transformedEntities[$entity['name']] = [\n                        'read' => $entity['readAllowed'],\n                        'create' => $entity['createAllowed'],\n                        'update' => $entity['updateAllowed'],\n                        'delete' => $entity['deleteAllowed'],\n                    ];\n\n                    $dataDecoded['schema']['specialEntities'] = $transformedEntities;\n                }\n            }\n\n            $config->setConfiguration($dataDecoded);\n\n            if ($config->isAllowed('read') && $config->isAllowed('update')) {\n                $config->save();\n\n                return $this->json(['success' => true, 'modificationDate' => $dataDecoded['general']['modificationDate']]);\n            } else {\n                return $this->json(['success' => false, 'permissionError' => true]);\n            }\n        } catch (\\Exception $e) {\n            return $this->json(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/get-explorer-url\")\n     *\n     * @param RouterInterface $routingService\n     * @param Request $request\n     *\n     * @throws \\Exception\n     *\n     * @return JsonResponse\n     */\n    public function getExplorerUrlAction(RouterInterface $routingService, Request $request): ?JsonResponse\n    {\n        $name = $request->get('name');\n\n        $url = $routingService->generate('admin_pimcoredatahub_config', ['clientname' => $name]);\n        if ($url) {\n            return $this->json(['explorerUrl' => $url]);\n        } else {\n            throw new \\Exception('unable to resolve');\n        }\n    }\n\n    /**\n     * @Route(\"/thumbnail-tree\")\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailTreeAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new \\Pimcore\\Model\\Asset\\Image\\Thumbnail\\Config\\Listing();\n        $items = $list->load();\n\n        foreach ($items as $item) {\n            $thumbnails[] = [\n                'id' => $item->getName(),\n                'text' => $item->getName()\n            ];\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/permissions-users\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPermissionUsersAction(Request $request)\n    {\n        $type = $request->get('type', 'user');\n\n        $list = new User\\Listing();\n        if ($type === 'role') {\n            $list = new User\\Role\\Listing();\n        }\n\n        $list->setCondition('type = ? AND id != 1', [$type]);\n        $list->setOrder('ASC');\n        $list->setOrderKey('name');\n\n        $users = [];\n        foreach ($list->getItems() as $user) {\n            if ($user->getId() && $user->getName() != 'system') {\n                $users[] = [\n                    'id' => $user->getId(),\n                    'text' => $user->getName(),\n                    'elementType' => 'user',\n                ];\n            }\n        }\n\n        return $this->adminJson($users);\n    }\n}\n"], "filenames": ["src/Controller/ConfigController.php"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [54], "fixing_code_start_loc": [53], "fixing_code_end_loc": [54], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/data-hub prior to 1.2.4.", "other": {"cve": {"id": "CVE-2022-0955", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-24T15:15:07.963", "lastModified": "2022-03-29T15:39:59.113", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/data-hub prior to 1.2.4."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio de GitHub pimcore/data-hub versiones anteriores a 1.2.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:data-hub:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.4", "matchCriteriaId": "6EFDCFA9-AC47-49A4-AE24-4A40A51BADF1"}]}]}], "references": [{"url": "https://github.com/pimcore/data-hub/commit/15d5b57af2466eebd3bbc531ead5dafa35d0a36e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/708971a6-1e6c-4c51-a411-255caeba51df", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/data-hub/commit/15d5b57af2466eebd3bbc531ead5dafa35d0a36e"}}