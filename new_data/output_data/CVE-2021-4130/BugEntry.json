{"buggy_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Actionlog;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetModel;\nuse App\\Models\\Company;\nuse App\\Models\\Setting;\nuse App\\Models\\User;\nuse App\\Notifications\\RequestAssetCancelation;\nuse App\\Notifications\\RequestAssetNotification;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Http\\Request;\n\n/**\n * This controller handles all actions related to the ability for users\n * to view their own assets in the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass ViewAssetsController extends Controller\n{\n    /**\n     * Redirect to the profile page.\n     *\n     * @return Redirect\n     */\n    public function getIndex()\n    {\n\n        $user = User::with(\n            'assets.model',\n            'consumables',\n            'accessories',\n            'licenses',\n            'userloc',\n            'userlog'\n        )->withTrashed()->find(Auth::user()->id);\n\n\n        $userlog = $user->userlog->load('item', 'user', 'target');\n\n        if (isset($user->id)) {\n            return view('account/view-assets', compact('user', 'userlog'))\n                ->with('settings', Setting::getSettings());\n        } else {\n            // Redirect to the user management page\n            return redirect()->route('users.index')->with('error', trans('admin/users/message.user_not_found', compact('id')));\n        }\n        // Redirect to the user management page\n        return redirect()->route('users.index')\n            ->with('error', trans('admin/users/message.user_not_found', $user->id));\n\n    }\n\n\n    /**\n     * Returns view of requestable items for a user.\n     * @return \\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     */\n    public function getRequestableIndex()\n    {\n\n        $assets = Asset::with('model', 'defaultLoc', 'location', 'assignedTo', 'requests')->Hardware()->RequestableAssets()->get();\n        $models = AssetModel::with('category', 'requests', 'assets')->RequestableModels()->get();\n\n        return view('account/requestable-assets', compact('assets', 'models'));\n    }\n\n\n\n    public function getRequestItem(Request $request, $itemType, $itemId = null)\n    {\n        $item = null;\n        $fullItemType = 'App\\\\Models\\\\' . studly_case($itemType);\n\n        if ($itemType == \"asset_model\") {\n            $itemType = \"model\";\n        }\n        $item = call_user_func(array($fullItemType, 'find'), $itemId);\n\n        $user = Auth::user();\n\n\n        $logaction = new Actionlog();\n        $logaction->item_id = $data['asset_id'] = $item->id;\n        $logaction->item_type = $fullItemType;\n        $logaction->created_at = $data['requested_date'] = date(\"Y-m-d H:i:s\");\n\n        if ($user->location_id) {\n            $logaction->location_id = $user->location_id;\n        }\n        $logaction->target_id = $data['user_id'] = Auth::user()->id;\n        $logaction->target_type = User::class;\n\n        $data['item_quantity'] = $request->has('request-quantity') ? e($request->input('request-quantity')) : 1;\n        $data['requested_by'] = $user->present()->fullName();\n        $data['item'] = $item;\n        $data['item_type'] = $itemType;\n        $data['target'] = Auth::user();\n\n\n        if ($fullItemType == Asset::class) {\n            $data['item_url'] = route('hardware.show', $item->id);\n        } else {\n            $data['item_url'] = route(\"view/${itemType}\", $item->id);\n\n        }\n\n        $settings = Setting::getSettings();\n\n        if ($item_request = $item->isRequestedBy($user)) {\n           $item->cancelRequest();\n           $data['item_quantity'] = $item_request->qty;\n           $logaction->logaction('request_canceled');\n\n            if (($settings->alert_email!='')  && ($settings->alerts_enabled=='1') && (!config('app.lock_passwords'))) {\n                $settings->notify(new RequestAssetCancelation($data));\n            }\n\n            return redirect()->route('requestable-assets')->with('success')->with('success', trans('admin/hardware/message.requests.canceled'));\n\n        } else {\n            $item->request();\n            if (($settings->alert_email!='')  && ($settings->alerts_enabled=='1') && (!config('app.lock_passwords'))) {\n                $logaction->logaction('requested');\n                $settings->notify(new RequestAssetNotification($data));\n            }\n\n\n\n            return redirect()->route('requestable-assets')->with('success')->with('success', trans('admin/hardware/message.requests.success'));\n        }\n    }\n\n\n    /**\n     * Process a specific requested asset\n     * @param null $assetId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function getRequestAsset($assetId = null)\n    {\n\n        $user = Auth::user();\n\n        // Check if the asset exists and is requestable\n        if (is_null($asset = Asset::RequestableAssets()->find($assetId))) {\n            return redirect()->route('requestable-assets')\n                ->with('error', trans('admin/hardware/message.does_not_exist_or_not_requestable'));\n        }\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return redirect()->route('requestable-assets')\n                ->with('error', trans('general.insufficient_permissions'));\n        }\n\n        $data['item'] = $asset;\n        $data['target'] =  Auth::user();\n        $data['item_quantity'] = 1;\n        $settings = Setting::getSettings();\n\n        $logaction = new Actionlog();\n        $logaction->item_id = $data['asset_id'] = $asset->id;\n        $logaction->item_type = $data['item_type'] = Asset::class;\n        $logaction->created_at = $data['requested_date'] = date(\"Y-m-d H:i:s\");\n\n        if ($user->location_id) {\n            $logaction->location_id = $user->location_id;\n        }\n        $logaction->target_id = $data['user_id'] = Auth::user()->id;\n        $logaction->target_type = User::class;\n\n\n        // If it's already requested, cancel the request.\n        if ($asset->isRequestedBy(Auth::user())) {\n            $asset->cancelRequest();\n            $asset->decrement('requests_counter', 1);\n            \n            $logaction->logaction('request canceled');\n            $settings->notify(new RequestAssetCancelation($data));\n            return redirect()->route('requestable-assets')\n                ->with('success')->with('success', trans('admin/hardware/message.requests.cancel-success'));\n        }\n\n        $logaction->logaction('requested');\n        $asset->request();\n        $asset->increment('requests_counter', 1);\n        $settings->notify(new RequestAssetNotification($data));\n\n\n        return redirect()->route('requestable-assets')->with('success')->with('success', trans('admin/hardware/message.requests.success'));\n\n\n    }\n\n    public function getRequestedAssets()\n    {\n        return view('account/requested');\n    }\n\n\n    // Get the acceptance screen\n    public function getAcceptAsset($logID = null)\n    {\n\n        $findlog = Actionlog::where('id', $logID)->first();\n\n        if (!$findlog) {\n            return redirect()->to('account/view-assets')->with('error', 'No matching record.');\n        }\n\n        if ($findlog->accepted_id!='') {\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.asset_already_accepted'));\n        }\n\n        $user = Auth::user();\n\n\n        // TODO - Fix this for non-assets\n        if (($findlog->item_type==Asset::class) && ($user->id != $findlog->item->assigned_to)) {\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.incorrect_user_accepted'));\n        }\n\n\n        $item = $findlog->item;\n\n        // Check if the asset exists\n        if (is_null($item)) {\n            // Redirect to the asset management page\n            return redirect()->to('account')->with('error', trans('admin/hardware/message.does_not_exist'));\n        } elseif (!Company::isCurrentUserHasAccess($item)) {\n            return redirect()->route('requestable-assets')->with('error', trans('general.insufficient_permissions'));\n        } else {\n            return view('account/accept-asset', compact('item'))->with('findlog', $findlog)->with('item', $item);\n        }\n    }\n\n    // Save the acceptance\n    public function postAcceptAsset(Request $request, $logID = null)\n    {\n\n        // Check if the asset exists\n        if (is_null($findlog = Actionlog::where('id', $logID)->first())) {\n            // Redirect to the asset management page\n            return redirect()->to('account/view-assets')->with('error', trans('admin/hardware/message.does_not_exist'));\n        }\n\n\n        if ($findlog->accepted_id!='') {\n            // Redirect to the asset management page\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.asset_already_accepted'));\n        }\n\n        if ($request->missing('asset_acceptance')) {\n            return redirect()->back()->with('error', trans('admin/users/message.error.accept_or_decline'));\n        }\n\n        $user = Auth::user();\n\n        if (($findlog->item_type==Asset::class) && ($user->id != $findlog->item->assigned_to)) {\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.incorrect_user_accepted'));\n        }\n\n        if ($request->filled('signature_output')) {\n            $path = config('app.private_uploads').'/signatures';\n            $sig_filename = \"siglog-\".$findlog->id.'-'.date('Y-m-d-his').\".png\";\n            $data_uri = e($request->get('signature_output'));\n            $encoded_image = explode(\",\", $data_uri);\n            $decoded_image = base64_decode($encoded_image[1]);\n            file_put_contents($path.\"/\".$sig_filename, $decoded_image);\n        }\n\n\n        $logaction = new Actionlog();\n\n        if ($request->input('asset_acceptance')=='accepted') {\n            $logaction_msg  = 'accepted';\n            $accepted=\"accepted\";\n            $return_msg = trans('admin/users/message.accepted');\n        } else {\n            $logaction_msg = 'declined';\n            $accepted=\"rejected\";\n            $return_msg = trans('admin/users/message.declined');\n        }\n            $logaction->item_id      = $findlog->item_id;\n            $logaction->item_type    = $findlog->item_type;\n\n        // Asset\n        if (($findlog->item_id!='') && ($findlog->item_type==Asset::class)) {\n            if ($request->input('asset_acceptance')!='accepted') {\n                DB::table('assets')\n                ->where('id', $findlog->item_id)\n                ->update(array('assigned_to' => null));\n            }\n        }\n\n        $logaction->target_id = $findlog->target_id;\n        $logaction->target_type = User::class;\n        $logaction->note = e($request->input('note'));\n        $logaction->updated_at = date(\"Y-m-d H:i:s\");\n\n\n        if (isset($sig_filename)) {\n            $logaction->accept_signature = $sig_filename;\n        }\n        $log = $logaction->logaction($logaction_msg);\n\n        $update_checkout = DB::table('action_logs')\n        ->where('id', $findlog->id)\n        ->update(array('accepted_id' => $logaction->id));\n\n        if (($findlog->item_id!='') && ($findlog->item_type==Asset::class)) {\n            $affected_asset = $logaction->item;\n            $affected_asset->accepted = $accepted;\n            $affected_asset->save();\n        }\n\n        if ($update_checkout) {\n            return redirect()->to('account/view-assets')->with('success', $return_msg);\n\n        } else {\n            return redirect()->to('account/view-assets')->with('error', 'Something went wrong ');\n        }\n    }\n}\n", "<?php\n\nreturn array(\n\n    'undeployable' \t\t=> '<strong>Warning: </strong> This asset has been marked as currently undeployable.\n                        If this status has changed, please update the asset status.',\n    'does_not_exist' \t=> 'Asset does not exist.',\n    'does_not_exist_or_not_requestable' => 'Nice try. That asset does not exist or is not requestable.',\n    'assoc_users'\t \t=> 'This asset is currently checked out to a user and cannot be deleted. Please check the asset in first, and then try deleting again. ',\n\n    'create' => array(\n        'error'   \t\t=> 'Asset was not created, please try again. :(',\n        'success' \t\t=> 'Asset created successfully. :)'\n    ),\n\n    'update' => array(\n        'error'   \t\t\t=> 'Asset was not updated, please try again',\n        'success' \t\t\t=> 'Asset updated successfully.',\n        'nothing_updated'\t=>  'No fields were selected, so nothing was updated.',\n    ),\n\n    'restore' => array(\n        'error'   \t\t=> 'Asset was not restored, please try again',\n        'success' \t\t=> 'Asset restored successfully.'\n    ),\n\n    'audit' => array(\n        'error'   \t\t=> 'Asset audit was unsuccessful. Please try again.',\n        'success' \t\t=> 'Asset audit successfully logged.'\n    ),\n\n\n    'deletefile' => array(\n        'error'   => 'File not deleted. Please try again.',\n        'success' => 'File successfully deleted.',\n    ),\n\n    'upload' => array(\n        'error'   => 'File(s) not uploaded. Please try again.',\n        'success' => 'File(s) successfully uploaded.',\n        'nofiles' => 'You did not select any files for upload, or the file you are trying to upload is too large',\n        'invalidfiles' => 'One or more of your files is too large or is a filetype that is not allowed. Allowed filetypes are png, gif, jpg, doc, docx, pdf, and txt.',\n    ),\n\n    'import' => array(\n        'error'                 => 'Some items did not import correctly.',\n        'errorDetail'           => 'The following Items were not imported because of errors.',\n        'success'               => \"Your file has been imported\",\n        'file_delete_success'   => \"Your file has been been successfully deleted\",\n        'file_delete_error'      => \"The file was unable to be deleted\",\n    ),\n\n\n    'delete' => array(\n        'confirm'   \t=> 'Are you sure you wish to delete this asset?',\n        'error'   \t\t=> 'There was an issue deleting the asset. Please try again.',\n        'nothing_updated'   => 'No assets were selected, so nothing was deleted.',\n        'success' \t\t=> 'The asset was deleted successfully.'\n    ),\n\n    'checkout' => array(\n        'error'   \t\t=> 'Asset was not checked out, please try again',\n        'success' \t\t=> 'Asset checked out successfully.',\n        'user_does_not_exist' => 'That user is invalid. Please try again.',\n        'not_available' => 'That asset is not available for checkout!',\n        'no_assets_selected' => 'You must select at least one asset from the list'\n    ),\n\n    'checkin' => array(\n        'error'   \t\t=> 'Asset was not checked in, please try again',\n        'success' \t\t=> 'Asset checked in successfully.',\n        'user_does_not_exist' => 'That user is invalid. Please try again.',\n        'already_checked_in'  => 'That asset is already checked in.',\n\n    ),\n\n    'requests' => array(\n        'error'   \t\t=> 'Asset was not requested, please try again',\n        'success' \t\t=> 'Asset requested successfully.',\n        'canceled'      => 'Checkout request successfully canceled'\n    )\n\n);\n", "@push('css')\n<link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/bootstrap-table.css')) }}\">\n\n@endpush\n\n@push('js')\n<script src=\"{{ url(mix('js/dist/bootstrap-table.js')) }}\"></script>\n<script nonce=\"{{ csrf_token() }}\">\n\n    $(function () {\n\n\n        var stickyHeaderOffsetY = 0;\n\n        if ( $('.navbar-fixed-top').css('height') ) {\n            stickyHeaderOffsetY = +$('.navbar-fixed-top').css('height').replace('px','');\n        }\n        if ( $('.navbar-fixed-top').css('margin-bottom') ) {\n            stickyHeaderOffsetY += +$('.navbar-fixed-top').css('margin-bottom').replace('px','');\n        }\n\n        var blockedFields = \"searchable,sortable,switchable,title,visible,formatter,class\".split(\",\");\n\n        var keyBlocked = function(key) {\n            for(var j in blockedFields) {\n                if (key === blockedFields[j]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        $('.snipe-table').bootstrapTable('destroy').bootstrapTable({\n            classes: 'table table-responsive table-no-bordered',\n            ajaxOptions: {\n                headers: {\n                    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n                }\n            },\n            stickyHeader: true,\n            stickyHeaderOffsetY: stickyHeaderOffsetY + 'px',\n            undefinedText: '',\n            iconsPrefix: 'fa',\n            cookie: true,\n            cookieExpire: '2y',\n            mobileResponsive: true,\n            maintainSelected: true,\n            trimOnSearch: false,\n            showSearchClearButton: true,\n            paginationFirstText: \"{{ trans('general.first') }}\",\n            paginationLastText: \"{{ trans('general.last') }}\",\n            paginationPreText: \"{{ trans('general.previous') }}\",\n            paginationNextText: \"{{ trans('general.next') }}\",\n            pageList: ['10','20', '30','50','100','150','200', '500', '1000'],\n            pageSize: {{  (($snipeSettings->per_page!='') && ($snipeSettings->per_page > 0)) ? $snipeSettings->per_page : 20 }},\n            paginationVAlign: 'both',\n            queryParams: function (params) {\n                var newParams = {};\n                for(var i in params) {\n                    if(!keyBlocked(i)) { // only send the field if it's not in blockedFields\n                        newParams[i] = params[i];\n                    }\n                }\n                return newParams;\n            },\n            formatLoadingMessage: function () {\n                return '<h2><i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i> Loading... please wait.... </h4>';\n            },\n            icons: {\n                advancedSearchIcon: 'fa fa-search-plus',\n                paginationSwitchDown: 'fa-caret-square-o-down',\n                paginationSwitchUp: 'fa-caret-square-o-up',\n                columns: 'fa-columns',\n                refresh: 'fa-refresh',\n                export: 'fa-download',\n                clearSearch: 'fa-times'\n            },\n            exportOptions: {\n                htmlContent: true,\n            },\n\n            exportTypes: ['csv', 'excel', 'doc', 'txt','json', 'xml', 'pdf'],\n            onLoadSuccess: function () {\n                $('[data-toggle=\"tooltip\"]').tooltip(); // Needed to attach tooltips after ajax call\n            }\n\n        });   \n\n    });\n\n\n\n\n\n    function dateRowCheckStyle(value) {\n        if ((value.days_to_next_audit) && (value.days_to_next_audit < {{ $snipeSettings->audit_warning_days ?: 0 }})) {\n            return { classes : \"danger\" }\n        }\n        return {};\n    }\n\n\n    // These methods dynamically add/remove hidden input values in the bulk actions form\n    $('.snipe-table').on('check.bs.table .btSelectItem', function (row, $element) {\n        $('#bulkEdit').removeAttr('disabled');\n        $('#bulkEdit').prepend('<input id=\"checkbox_' + $element.id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + $element.id + '\">');\n    });\n\n    $('.snipe-table').on('uncheck.bs.table .btSelectItem', function (row, $element) {\n        $( \"#checkbox_\" + $element.id).remove();\n    });\n    \n\n    // Handle whether or not the edit button should be disabled\n    $('.snipe-table').on('uncheck.bs.table', function () {\n        if ($('.snipe-table').bootstrapTable('getSelections').length == 0) {\n            $('#bulkEdit').attr('disabled', 'disabled');\n        }\n    });\n\n    $('.snipe-table').on('uncheck-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        $('#bulkEdit').attr('disabled', 'disabled');\n        //console.dir(rowsBefore);\n\n        for (var i in rowsBefore) {\n            $( \"#checkbox_\" + rowsBefore[i].id).remove();\n        }\n\n    });\n\n    $('.snipe-table').on('check-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        \n        $('#bulkEdit').removeAttr('disabled');\n        //console.dir(rowsAfter);\n        \n        for (var i in rowsAfter) {\n            // console.log(rowsAfter[i].id);\n            $('#bulkEdit').prepend('<input id=\"checkbox_' + rowsAfter[i].id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + rowsAfter[i].id + '\">');\n        }\n    });\n\n    \n\n    // This only works for model index pages because it uses the row's model ID\n    function genericRowLinkFormatter(destination) {\n        return function (value,row) {\n            if (value) {\n                return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '\">' + value + '</a>';\n            }\n        };\n    }\n\n    // Use this when we're introspecting into a column object and need to link\n    function genericColumnObjLinkFormatter(destination) {\n        return function (value,row) {\n            if ((value) && (value.status_meta)) {\n\n                var text_color;\n                var icon_style;\n                var text_help;\n                var status_meta = {\n                  'deployed': '{{ strtolower(trans('general.deployed')) }}',\n                  'deployable': '{{ strtolower(trans('admin/hardware/general.deployable')) }}',\n                  'pending': '{{ strtolower(trans('general.pending')) }}'\n                }\n\n                switch (value.status_meta) {\n                    case 'deployed':\n                        text_color = 'blue';\n                        icon_style = 'fa-circle';\n                        text_help = '<label class=\"label label-default\">{{ trans('general.deployed') }}</label>';\n                    break;\n                    case 'deployable':\n                        text_color = 'green';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                    break;\n                    case 'pending':\n                        text_color = 'orange';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                        break;\n                    default:\n                        text_color = 'red';\n                        icon_style = 'fa-times';\n                        text_help = '';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + destination + '/' + value.id + '\" data-toggle=\"tooltip\" title=\"'+ status_meta[value.status_meta] + '\"> <i class=\"fa ' + icon_style + ' text-' + text_color + '\"></i> ' + value.name + ' ' + text_help + ' </a> </nobr>';\n            } else if ((value) && (value.name)) {\n\n                // Add some overrides for any funny urls we have\n                var dest = destination;\n                var dpolymorphicItemFormatterest = '';\n                if (destination=='fieldsets') {\n                    var dpolymorphicItemFormatterest = 'fields/';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + dpolymorphicItemFormatterest + dest + '/' + value.id + '\">' + value.name + '</a></span>';\n            }\n        };\n    }\n\n    function hardwareAuditFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/hardware/audit/' + row.id + '/\" class=\"btn btn-sm bg-yellow\" data-tooltip=\"true\" title=\"Audit this item\">{{ trans('general.audit') }}</a>';\n    }\n\n\n    // Make the edit/delete buttons\n    function genericActionsFormatter(owner_name, element_name) {\n        if (!element_name) {\n            element_name = '';\n        }\n\n        return function (value,row) {\n\n            var actions = '<nobr>';\n\n            // Add some overrides for any funny urls we have\n            var dest = owner_name;\n\n            if (dest =='groups') {\n                var dest = 'admin/groups';\n            }\n\n            if (dest =='maintenances') {\n                var dest = 'hardware/maintenances';\n            }\n\n            if(element_name != '') {\n                dest = dest + '/' + row.owner_id + '/' + element_name;\n            }\n\n            if ((row.available_actions) && (row.available_actions.clone === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/clone\" class=\"btn btn-sm btn-info\" data-tooltip=\"true\" title=\"Clone Item\"><i class=\"fa fa-copy\" aria-hidden=\"true\"></i><span class=\"sr-only\">Clone</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.update === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/edit\" class=\"btn btn-sm btn-warning\" data-tooltip=\"true\" title=\"{{ trans('general.update') }}\"><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.update') }}</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.delete === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '\" '\n                    + ' class=\"btn btn-danger btn-sm delete-asset\"  data-toggle=\"tooltip\"  '\n                    + ' data-toggle=\"modal\" '\n                    + ' data-content=\"{{ trans('general.sure_to_delete') }} ' + row.name + '?\" '\n                    + ' data-title=\"{{  trans('general.delete') }}\" onClick=\"return false;\">'\n                    + '<i class=\"fa fa-trash\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.delete') }}</span></a>&nbsp;';\n            } else {\n                actions += '<a class=\"btn btn-danger btn-sm delete-asset disabled\" onClick=\"return false;\"><i class=\"fa fa-trash\"></i></a>&nbsp;';\n            }\n            \n\n            if ((row.available_actions) && (row.available_actions.restore === true)) {\n                actions += '<form style=\"display: inline;\" method=\"POST\" action=\"{{ url('/') }}/' + dest + '/' + row.id + '/restore\"> ';\n                actions += '@csrf';\n                actions += '<button class=\"btn btn-sm btn-warning\" data-toggle=\"tooltip\" title=\"{{ trans('general.restore') }}\">';\n                actions += '<i class=\"fa fa-retweet\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.restore') }}</span></button></form>&nbsp;';\n            }\n\n            actions +='</nobr>';\n            return actions;\n\n        };\n    }\n\n\n    // This handles the icons and display of polymorphic entries\n    function polymorphicItemFormatter(value) {\n\n        var item_destination = '';\n        var item_icon;\n\n        if ((value) && (value.type)) {\n\n            if (value.type == 'asset') {\n                item_destination = 'hardware';\n                item_icon = 'fa-barcode';\n            } else if (value.type == 'accessory') {\n                item_destination = 'accessories';\n                item_icon = 'fa-keyboard-o';\n            } else if (value.type == 'component') {\n                item_destination = 'components';\n                item_icon = 'fa-hdd-o';\n            } else if (value.type == 'consumable') {\n                item_destination = 'consumables';\n                item_icon = 'fa-tint';\n            } else if (value.type == 'license') {\n                item_destination = 'licenses';\n                item_icon = 'fa-floppy-o';\n            } else if (value.type == 'user') {\n                item_destination = 'users';\n                item_icon = 'fa-user';\n            } else if (value.type == 'location') {\n                item_destination = 'locations'\n                item_icon = 'fa-map-marker';\n            }\n\n            return '<nobr><a href=\"{{ url('/') }}/' + item_destination +'/' + value.id + '\" data-tooltip=\"true\" title=\"' + value.type + '\"><i class=\"fa ' + item_icon + ' text-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} \"></i> ' + value.name + '</a></nobr>';\n\n        } else {\n            return '';\n        }\n\n\n    }\n\n    // This just prints out the item type in the activity report\n    function itemTypeFormatter(value, row) {\n\n        if ((row) && (row.item) && (row.item.type)) {\n            return row.item.type;\n        }\n    }\n\n\n    // Convert line breaks to <br>\n    function notesFormatter(value) {\n        if (value) {\n            return value.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');;\n        }\n    }\n\n\n    // We need a special formatter for license seats, since they don't work exactly the same\n    // Checkouts need the license ID, checkins need the specific seat ID\n\n    function licenseSeatInOutFormatter(value, row) {\n        // The user is allowed to check the license seat out and it's available\n        if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.license_id + '/checkout/'+row.id+'\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n        } else {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check in this license seat.\">{{ trans('general.checkin') }}</a>';\n        }\n\n    }\n\n    function genericCheckinCheckoutFormatter(destination) {\n        return function (value,row) {\n\n            // The user is allowed to check items out, AND the item is deployable\n            if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkout\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n\n            // The user is allowed to check items out, but the item is not deployable\n            } else if (((row.user_can_checkout == false)) && (row.available_actions.checkout == true) && (!row.assigned_to)) {\n                return '<div  data-toggle=\"tooltip\" title=\"This item has a status label that is undeployable and cannot be checked out at this time.\"><a class=\"btn btn-sm bg-maroon disabled\">{{ trans('general.checkout') }}</a></div>';\n\n            // The user is allowed to check items in\n            } else if (row.available_actions.checkin == true)  {\n                if (row.assigned_to) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                } else if (row.assigned_pivot_id) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.assigned_pivot_id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                }\n\n            }\n\n        }\n\n\n    }\n\n\n    // This is only used by the requestable assets section\n    function assetRequestActionsFormatter (row, value) {\n        if (value.available_actions.cancel == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"GET\"><button class=\"btn btn-danger btn-sm\" data-toggle=\"tooltip\" title=\"Cancel this item request\">{{ trans('button.cancel') }}</button></form>';\n        } else if (value.available_actions.request == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"GET\"><button class=\"btn btn-primary btn-sm\" data-toggle=\"tooltip\" title=\"Request this item\">{{ trans('button.request') }}</button></form>';\n        }\n\n    }\n\n\n\n    var formatters = [\n        'hardware',\n        'accessories',\n        'consumables',\n        'components',\n        'locations',\n        'users',\n        'manufacturers',\n        'maintenances',\n        'statuslabels',\n        'models',\n        'licenses',\n        'categories',\n        'suppliers',\n        'departments',\n        'companies',\n        'depreciations',\n        'fieldsets',\n        'groups',\n        'kits'\n    ];\n\n    for (var i in formatters) {\n        window[formatters[i] + 'LinkFormatter'] = genericRowLinkFormatter(formatters[i]);\n        window[formatters[i] + 'LinkObjFormatter'] = genericColumnObjLinkFormatter(formatters[i]);\n        window[formatters[i] + 'ActionsFormatter'] = genericActionsFormatter(formatters[i]);\n        window[formatters[i] + 'InOutFormatter'] = genericCheckinCheckoutFormatter(formatters[i]);\n    }\n\n    var child_formatters = [\n        ['kits', 'models'],\n        ['kits', 'licenses'],\n        ['kits', 'consumables'],\n        ['kits', 'accessories'],\n    ];\n\n    for (var i in child_formatters) {\n        var owner_name = child_formatters[i][0];\n        var child_name = child_formatters[i][1];\n        window[owner_name + '_' + child_name + 'ActionsFormatter'] = genericActionsFormatter(owner_name, child_name);\n    }\n\n\n\n    // This is  gross, but necessary so that we can package the API response\n    // for custom fields in a more useful way.\n    function customFieldsFormatter(value, row) {\n\n\n            if ((!this) || (!this.title)) {\n                return '';\n            }\n\n            var field_column = this.title;\n\n            // Pull out any HTMl that might be passed via the presenter\n            // (for example, the locked icon for encrypted fields)\n            var field_column_plain = field_column.replace(/<(?:.|\\n)*?> ?/gm, '');\n            if ((row.custom_fields) && (row.custom_fields[field_column_plain])) {\n\n                // If the field type needs special formatting, do that here\n                if ((row.custom_fields[field_column_plain].field_format) && (row.custom_fields[field_column_plain].value)) {\n                    if (row.custom_fields[field_column_plain].field_format=='URL') {\n                        return '<a href=\"' + row.custom_fields[field_column_plain].value + '\" target=\"_blank\" rel=\"noopener\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    } else if (row.custom_fields[field_column_plain].field_format=='EMAIL') {\n                        return '<a href=\"mailto:' + row.custom_fields[field_column_plain].value + '\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    }\n                }\n                return row.custom_fields[field_column_plain].value;\n\n            }\n\n    }\n\n\n    function createdAtFormatter(value) {\n        if ((value) && (value.formatted)) {\n            return value.formatted;\n        }\n    }\n\n    function externalLinkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\" target=\"_blank\">' + value + '</a>';\n        }\n    }\n\n    function groupsFormatter(value) {\n\n        if (value) {\n            var groups = '';\n            for (var index in value.rows) {\n                groups += '<a href=\"{{ url('/') }}/admin/groups/' + value.rows[index].id + '\" class=\"label label-default\">' + value.rows[index].name + '</a> ';\n            }\n            return groups;\n        }\n    }\n\n\n\n    function changeLogFormatter(value) {\n        var result = '';\n            for (var index in value) {\n                result += index + ': <del>' + value[index].old + '</del>  <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ' + value[index].new + '<br>'\n            }\n\n        return result;\n\n    }\n\n\n    // Create a linked phone number in the table list\n    function phoneFormatter(value) {\n        if (value) {\n            return  '<a href=\"tel:' + value + '\">' + value + '</a>';\n        }\n    }\n\n\n    function deployedLocationFormatter(row, value) {\n        if ((row) && (row!=undefined)) {\n            return '<a href=\"{{ url('/') }}/locations/' + row.id + '\">' + row.name + '</a>';\n        } else if (value.rtd_location) {\n            return '<a href=\"{{ url('/') }}/locations/' + value.rtd_location.id + '\" data-toggle=\"tooltip\" title=\"Default Location\">' + value.rtd_location.name + '</a>';\n        }\n\n    }\n\n    function groupsAdminLinkFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/admin/groups/' + row.id + '\">' + value + '</a>';\n    }\n\n    function assetTagLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.id)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\">' + row.asset.asset_tag + '</a>';\n        }\n        return '';\n\n    }\n\n    function departmentNameLinkFormatter(value, row) {\n        if ((row.assigned_user) && (row.assigned_user.department) && (row.assigned_user.department.name)) {\n            return '<a href=\"{{ url('/') }}/department/' + row.assigned_user.department.id + '\">' + row.assigned_user.department.name + '</a>';\n        }\n\n    }\n\n    function assetNameLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.name)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\">' + row.asset.name + '</a>';\n        }\n\n    }\n\n    function trueFalseFormatter(value) {\n        if ((value) && ((value == 'true') || (value == '1'))) {\n            return '<i class=\"fa fa-check text-success\"></i>';\n        } else {\n            return '<i class=\"fa fa-times text-danger\"></i>';\n        }\n    }\n\n    function dateDisplayFormatter(value) {\n        if (value) {\n            return  value.formatted;\n        }\n    }\n\n    function iconFormatter(value) {\n        if (value) {\n            return '<i class=\"' + value + '  icon-med\"></i>';\n        }\n    }\n\n    function emailFormatter(value) {\n        if (value) {\n            return '<a href=\"mailto:' + value + '\">' + value + '</a>';\n        }\n    }\n\n    function linkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\">' + value + '</a>';\n        }\n    }\n\n    function assetCompanyFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.id + '\">' + value + '</a>';\n        }\n    }\n\n    function assetCompanyObjFilterFormatter(value, row) {\n        if ((row) && (row.company)) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.company.id + '\">' + row.company.name + '</a>';\n        }\n    }\n\n    function usersCompanyObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/users/?company_id=' + row.id + '\">' + value + '</a>';\n        } else {\n            return value;\n        }\n    }\n\n    function employeeNumFormatter(value, row) {\n\n        if ((row) && (row.assigned_to) && ((row.assigned_to.employee_number))) {\n            return '<a href=\"{{ url('/') }}/users/' + row.assigned_to.id + '\">' + row.assigned_to.employee_number + '</a>';\n        }\n    }\n\n    function orderNumberObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?order_number=' + row.order_number + '\">' + row.order_number + '</a>';\n        }\n    }\n\n\n   function imageFormatter(value, row) {\n\n\n\n        if (value) {\n\n            if (row.name) {\n                var altName = row.name;\n            }\n                else if ((row) && (row.model)) {\n                var altName = row.model.name;\n           }\n            return '<a href=\"' + value + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\" alt=\"' + altName + '\"></a>';\n        }\n    }\n\n    function fileUploadFormatter(value) {\n        if ((value) && (value.url) && (value.inlineable)) {\n            return '<a href=\"' + value.url + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value.url + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\"></a>';\n        } else if ((value) && (value.url)) {\n            return '<a href=\"' + value.url + '\" class=\"btn btn-default\"><i class=\"fa fa-download\"></i></a>';\n        }\n    }\n\n\n    function fileUploadNameFormatter(value) {\n        console.dir(value);\n        if ((value) && (value.filename) && (value.url)) {\n            return '<a href=\"' + value.url + '\">' + value.filename + '</a>';\n        }\n    }\n\n    function cleanFloat(number) {\n        if(!number) { // in a JavaScript context, meaning, if it's null or zero or unset\n            return 0.0;\n        }\n        if (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\") {\n            // yank periods, change commas to periods\n            periodless = number.toString().replace(/\\./g,\"\");\n            decimalfixed = periodless.replace(/,/g,\".\");\n        } else {\n            // yank commas, that's it.\n            decimalfixed = number.toString().replace(\",\",\"\");\n        }\n        return parseFloat(decimalfixed);\n    }\n\n    function sumFormatter(data) {\n        if (Array.isArray(data)) {\n            var field = this.field;\n            var total_sum = data.reduce(function(sum, row) {\n                return (sum) + (cleanFloat(row[field]) || 0);\n            }, 0);\n            return numberWithCommas(total_sum.toFixed(2));\n        }\n        return 'not an array';\n    }\n\n    function numberWithCommas(value) {\n        if ((value) && (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\")){\n            var parts = value.toString().split(\".\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n             return parts.join(\",\");\n         } else {\n             var parts = value.toString().split(\",\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n             return parts.join(\".\");\n        }\n        return value\n    }\n\n    $(function () {\n        $('#bulkEdit').click(function () {\n            var selectedIds = $('.snipe-table').bootstrapTable('getSelections');\n            $.each(selectedIds, function(key,value) {\n                $( \"#bulkForm\" ).append($('<input type=\"hidden\" name=\"ids[' + value.id + ']\" value=\"' + value.id + '\">' ));\n            });\n\n        });\n    });\n\n\n\n    $(function() {\n\n        // This handles the search box highlighting on both ajax and client-side\n        // bootstrap tables\n        var searchboxHighlighter = function (event) {\n\n            $('.search-input').each(function (index, element) {\n\n                if ($(element).val() != '') {\n                    $(element).addClass('search-highlight');\n                    $(element).next().children().addClass('search-highlight');\n                } else {\n                    $(element).removeClass('search-highlight');\n                    $(element).next().children().removeClass('search-highlight');\n                }\n            });\n        };\n\n        $('.search button[name=clearSearch]').click(searchboxHighlighter);\n        searchboxHighlighter({ name:'pageload'});\n        $('.search-input').keyup(searchboxHighlighter);\n\n        //  This is necessary to make the bootstrap tooltips work inside of the\n        // wenzhixin/bootstrap-table formatters\n        $('#table').on('post-body.bs.table', function () {\n            $('[data-toggle=\"tooltip\"]').tooltip({\n                container: 'body'\n            });\n\n\n        });\n    });\n\n</script>\n    \n@endpush\n", "<?php\n\n\nRoute::group(['middleware' => 'auth'], function () {\n    /*\n    * Companies\n    */\n    Route::resource('companies', 'CompaniesController', [\n        'parameters' => ['company' => 'company_id']\n    ]);\n\n    /*\n    * Categories\n    */\n    Route::resource('categories', 'CategoriesController', [\n        'parameters' => ['category' => 'category_id']\n    ]);\n\n    /*\n    * Locations\n    */\n    Route::resource('locations', 'LocationsController', [\n        'parameters' => ['location' => 'location_id']\n    ]);\n    \n    Route::get(\n        'locations/{locationId}/printassigned',\n        [ 'as' => 'locations.print_assigned', 'uses' => 'LocationsController@print_assigned' ]\n    );\n    \n    Route::get(\n        'locations/{locationId}/printallassigned',\n        [ 'as' => 'locations.print_all_assigned', 'uses' => 'LocationsController@print_all_assigned' ]\n    );\n\n    /*\n    * Manufacturers\n    */\n\n    Route::group([ 'prefix' => 'manufacturers', 'middleware' => ['auth'] ], function () {\n\n        Route::post('{manufacturers_id}/restore', [ 'as' => 'restore/manufacturer', 'uses' => 'ManufacturersController@restore']);\n    });\n\n    Route::resource('manufacturers', 'ManufacturersController', [\n        'parameters' => ['manufacturer' => 'manufacturers_id']\n    ]);\n\n    /*\n    * Suppliers\n    */\n    Route::resource('suppliers', 'SuppliersController', [\n        'parameters' => ['supplier' => 'supplier_id']\n    ]);\n\n    /*\n    * Depreciations\n     */\n     Route::resource('depreciations', 'DepreciationsController', [\n         'parameters' => ['depreciation' => 'depreciation_id']\n     ]);\n\n     /*\n     * Status Labels\n      */\n      Route::resource('statuslabels', 'StatuslabelsController', [\n          'parameters' => ['statuslabel' => 'statuslabel_id']\n      ]);\n\n\n    /*\n    * Departments\n    */\n    Route::resource('departments', 'DepartmentsController', [\n        'parameters' => ['department' => 'department_id']\n    ]);\n\n\n});\n\n\n/*\n|\n|--------------------------------------------------------------------------\n| Re-Usable Modal Dialog routes.\n|--------------------------------------------------------------------------\n|\n| Routes for various modal dialogs to interstitially create various things\n| \n*/\n\nRoute::group(['middleware' => 'auth','prefix' => 'modals'], function () {\n    Route::get('{type}/{itemId?}',['as' => 'modal.show', 'uses' => 'ModalController@show']);\n});\n\n/*\n|--------------------------------------------------------------------------\n| Log Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\nRoute::group(['middleware' => 'auth'], function () {\n\n    Route::get(\n        'display-sig/{filename}',\n        [\n            'as' => 'log.signature.view',\n            'uses' => 'ActionlogController@displaySig' ]\n    );\n\n\n});\n\n\n\n/*\n|--------------------------------------------------------------------------\n| Admin Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\n\n\nRoute::group([ 'prefix' => 'admin','middleware' => ['auth', 'authorize:superuser']], function () {\n\n    Route::get('settings', ['as' => 'settings.general.index','uses' => 'SettingsController@getSettings' ]);\n    Route::post('settings', ['as' => 'settings.general.save','uses' => 'SettingsController@postSettings' ]);\n\n\n    Route::get('branding', ['as' => 'settings.branding.index','uses' => 'SettingsController@getBranding' ]);\n    Route::post('branding', ['as' => 'settings.branding.save','uses' => 'SettingsController@postBranding' ]);\n\n    Route::get('security', ['as' => 'settings.security.index','uses' => 'SettingsController@getSecurity' ]);\n    Route::post('security', ['as' => 'settings.security.save','uses' => 'SettingsController@postSecurity' ]);\n\n    Route::get('groups', ['as' => 'settings.groups.index','uses' => 'GroupsController@index' ]);\n\n    Route::get('localization', ['as' => 'settings.localization.index','uses' => 'SettingsController@getLocalization' ]);\n    Route::post('localization', ['as' => 'settings.localization.save','uses' => 'SettingsController@postLocalization' ]);\n\n    Route::get('notifications', ['as' => 'settings.alerts.index','uses' => 'SettingsController@getAlerts' ]);\n    Route::post('notifications', ['as' => 'settings.alerts.save','uses' => 'SettingsController@postAlerts' ]);\n\n    Route::get('slack', ['as' => 'settings.slack.index','uses' => 'SettingsController@getSlack' ]);\n    Route::post('slack', ['as' => 'settings.slack.save','uses' => 'SettingsController@postSlack' ]);\n\n    Route::get('asset_tags', ['as' => 'settings.asset_tags.index','uses' => 'SettingsController@getAssetTags' ]);\n    Route::post('asset_tags', ['as' => 'settings.asset_tags.save','uses' => 'SettingsController@postAssetTags' ]);\n\n    Route::get('barcodes', ['as' => 'settings.barcodes.index','uses' => 'SettingsController@getBarcodes' ]);\n    Route::post('barcodes', ['as' => 'settings.barcodes.save','uses' => 'SettingsController@postBarcodes' ]);\n\n    Route::get('labels', ['as' => 'settings.labels.index','uses' => 'SettingsController@getLabels' ]);\n    Route::post('labels', ['as' => 'settings.labels.save','uses' => 'SettingsController@postLabels' ]);\n\n    Route::get('ldap', ['as' => 'settings.ldap.index','uses' => 'SettingsController@getLdapSettings' ]);\n    Route::post('ldap', ['as' => 'settings.ldap.save','uses' => 'SettingsController@postLdapSettings' ]);\n\n    Route::get('phpinfo', ['as' => 'settings.phpinfo.index','uses' => 'SettingsController@getPhpInfo' ]);\n\n\n    Route::get('oauth', [ 'as' => 'settings.oauth.index', 'uses' => 'SettingsController@api' ]);\n\n    Route::get('purge', ['as' => 'settings.purge.index', 'uses' => 'SettingsController@getPurge']);\n    Route::post('purge', ['as' => 'settings.purge.save', 'uses' => 'SettingsController@postPurge']);\n\n    Route::get('login-attempts', ['as' => 'settings.logins.index','uses' => 'SettingsController@getLoginAttempts' ]);\n\n    # Backups\n    Route::group([ 'prefix' => 'backups', 'middleware' => 'auth' ], function () {\n\n\n        Route::get('download/{filename}', [\n            'as' => 'settings.backups.download',\n            'uses' => 'SettingsController@downloadFile' ]);\n\n        Route::delete('delete/{filename}', [\n            'as' => 'settings.backups.destroy',\n            'uses' => 'SettingsController@deleteFile' ]);\n\n        Route::post('/', [\n            'as' => 'settings.backups.create',\n            'uses' => 'SettingsController@postBackups'\n        ]);\n\n        Route::get('/', [ 'as' => 'settings.backups.index', 'uses' => 'SettingsController@getBackups' ]);\n\n    });\n\n\n\n    Route::resource('groups', 'GroupsController', [\n        'middleware' => ['auth'],\n        'parameters' => ['group' => 'group_id']\n    ]);\n\n    Route::get('/', ['as' => 'settings.index', 'uses' => 'SettingsController@index' ]);\n\n\n});\n\n\n\n\n/*\n|--------------------------------------------------------------------------\n| Importer Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group([ 'prefix' => 'import', 'middleware' => ['auth']], function () {\n        Route::get('/', [\n                'as' => 'imports.index',\n                'uses' => 'ImportsController@index'\n        ]);\n});\n\n\n/*\n|--------------------------------------------------------------------------\n| Account Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group([ 'prefix' => 'account', 'middleware' => ['auth']], function () {\n\n    # Profile\n    Route::get('profile', [ 'as' => 'profile', 'uses' => 'ProfileController@getIndex' ]);\n    Route::post('profile', 'ProfileController@postIndex');\n\n    Route::get('menu', [ 'as' => 'account.menuprefs', 'uses' => 'ProfileController@getMenuState' ]);\n\n    Route::get('password', [ 'as' => 'account.password.index', 'uses' => 'ProfileController@password' ]);\n    Route::post('password', [ 'uses' => 'ProfileController@passwordSave' ]);\n\n    Route::get('api', [ 'as' => 'user.api', 'uses' => 'ProfileController@api' ]);\n\n    # View Assets\n    Route::get('view-assets', [ 'as' => 'view-assets', 'uses' => 'ViewAssetsController@getIndex' ]);\n\n    Route::get('requested', [ 'as' => 'account.requested', 'uses' => 'ViewAssetsController@getRequestedAssets' ]);\n\n    # Accept Asset\n    Route::get(\n        'accept-asset/{logID}',\n        [ 'as' => 'account/accept-assets', 'uses' => 'ViewAssetsController@getAcceptAsset' ]\n    );\n\n    # Profile\n    Route::get(\n        'requestable-assets',\n        [ 'as' => 'requestable-assets', 'uses' => 'ViewAssetsController@getRequestableIndex' ]\n    );\n    Route::get(\n        'request-asset/{assetId}',\n        [ 'as' => 'account/request-asset', 'uses' => 'ViewAssetsController@getRequestAsset' ]\n    );\n\n    Route::post(\n        'request/{itemType}/{itemId}',\n        [ 'as' => 'account/request-item', 'uses' => 'ViewAssetsController@getRequestItem']\n    );\n\n    # Account Dashboard\n    Route::get('/', [ 'as' => 'account', 'uses' => 'ViewAssetsController@getIndex' ]);\n\n\n    Route::get('accept', 'Account\\AcceptanceController@index')\n        ->name('account.accept');\n        \n    Route::get('accept/{id}', 'Account\\AcceptanceController@create')\n        ->name('account.accept.item');\n\n    Route::post('accept/{id}', 'Account\\AcceptanceController@store');        \n\n});\n\n\nRoute::group(['middleware' => ['auth']], function () {\n\n    Route::get('reports/audit', [\n        'as' => 'reports.audit',\n        'uses' => 'ReportsController@audit'\n    ]);\n\n    Route::get(\n        'reports/depreciation',\n        [ 'as' => 'reports/depreciation', 'uses' => 'ReportsController@getDeprecationReport' ]\n    );\n    Route::get(\n        'reports/export/depreciation',\n        [ 'as' => 'reports/export/depreciation', 'uses' => 'ReportsController@exportDeprecationReport' ]\n    );\n    Route::get(\n        'reports/asset_maintenances',\n        [ 'as' => 'reports/asset_maintenances', 'uses' => 'ReportsController@getAssetMaintenancesReport' ]\n    );\n    Route::get(\n        'reports/export/asset_maintenances',\n        [\n            'as'   => 'reports/export/asset_maintenances',\n            'uses' => 'ReportsController@exportAssetMaintenancesReport'\n        ]\n    );\n    Route::get(\n        'reports/licenses',\n        [ 'as' => 'reports/licenses', 'uses' => 'ReportsController@getLicenseReport' ]\n    );\n    Route::get(\n        'reports/export/licenses',\n        [ 'as' => 'reports/export/licenses', 'uses' => 'ReportsController@exportLicenseReport' ]\n    );\n\n    Route::get('reports/accessories', [ 'as' => 'reports/accessories', 'uses' => 'ReportsController@getAccessoryReport' ]);\n    Route::get(\n        'reports/export/accessories',\n        [ 'as' => 'reports/export/accessories', 'uses' => 'ReportsController@exportAccessoryReport' ]\n    );\n    Route::get('reports/custom', [ 'as' => 'reports/custom', 'uses' => 'ReportsController@getCustomReport' ]);\n    Route::post('reports/custom', 'ReportsController@postCustom');\n\n    Route::get(\n        'reports/activity',\n        [ 'as' => 'reports.activity', 'uses' => 'ReportsController@getActivityReport' ]\n    );\n\n    Route::post('reports/activity', 'ReportsController@postActivityReport');\n\n\n\n    Route::get(\n        'reports/unaccepted_assets',\n        [ 'as' => 'reports/unaccepted_assets', 'uses' => 'ReportsController@getAssetAcceptanceReport' ]\n    );\n    Route::get(\n        'reports/export/unaccepted_assets',\n        [ 'as' => 'reports/export/unaccepted_assets', 'uses' => 'ReportsController@exportAssetAcceptanceReport' ]\n    );\n});\n\nRoute::get(\n    'auth/signin',\n    ['uses' => 'Auth\\LoginController@legacyAuthRedirect' ]\n);\n\n\n\n\n/*\n|--------------------------------------------------------------------------\n| Setup Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group([ 'prefix' => 'setup', 'middleware' => 'web'], function () {\n    Route::get(\n        'user',\n        [\n        'as'  => 'setup.user',\n        'uses' => 'SettingsController@getSetupUser' ]\n    );\n\n    Route::post(\n        'user',\n        [\n        'as'  => 'setup.user.save',\n        'uses' => 'SettingsController@postSaveFirstAdmin' ]\n    );\n\n\n    Route::get(\n        'migrate',\n        [\n        'as'  => 'setup.migrate',\n        'uses' => 'SettingsController@getSetupMigrate' ]\n    );\n\n    Route::get(\n        'done',\n        [\n        'as'  => 'setup.done',\n        'uses' => 'SettingsController@getSetupDone' ]\n    );\n\n    Route::get(\n        'mailtest',\n        [\n        'as'  => 'setup.mailtest',\n        'uses' => 'SettingsController@ajaxTestEmail' ]\n    );\n\n\n    Route::get(\n        '/',\n        [\n        'as'  => 'setup',\n        'uses' => 'SettingsController@getSetupIndex' ]\n    );\n\n});\n\nRoute::get(\n    'two-factor-enroll',\n    [\n        'as' => 'two-factor-enroll',\n        'middleware' => ['web'],\n        'uses' => 'Auth\\LoginController@getTwoFactorEnroll' ]\n);\n\nRoute::get(\n    'two-factor',\n    [\n        'as' => 'two-factor',\n        'middleware' => ['web'],\n        'uses' => 'Auth\\LoginController@getTwoFactorAuth' ]\n);\n\nRoute::post(\n    'two-factor',\n    [\n        'as' => 'two-factor',\n        'middleware' => ['web'],\n        'uses' => 'Auth\\LoginController@postTwoFactorAuth' ]\n);\n\nRoute::get(\n    '/',\n    [\n    'as' => 'home',\n    'middleware' => ['auth'],\n    'uses' => 'DashboardController@getIndex' ]\n);\n\n\n\nRoute::group(['middleware' => 'web'], function () {\n    //Route::auth();\n    Route::get(\n        'login',\n        [\n            'as' => 'login',\n            'middleware' => ['web'],\n            'uses' => 'Auth\\LoginController@showLoginForm' ]\n    );\n\n    Route::post(\n        'login',\n        [\n            'as' => 'login',\n            'middleware' => ['web'],\n            'uses' => 'Auth\\LoginController@login' ]\n    );\n\n\n});\n\nAuth::routes();\n\nRoute::get('/health', [ 'as' => 'health', 'uses' => 'HealthController@get']);"], "fixing_code": ["<?php\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\Actionlog;\nuse App\\Models\\Asset;\nuse App\\Models\\AssetModel;\nuse App\\Models\\Company;\nuse App\\Models\\Setting;\nuse App\\Models\\User;\nuse App\\Notifications\\RequestAssetCancelation;\nuse App\\Notifications\\RequestAssetNotification;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Http\\Request;\n\n/**\n * This controller handles all actions related to the ability for users\n * to view their own assets in the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass ViewAssetsController extends Controller\n{\n    /**\n     * Redirect to the profile page.\n     *\n     * @return Redirect\n     */\n    public function getIndex()\n    {\n\n        $user = User::with(\n            'assets.model',\n            'consumables',\n            'accessories',\n            'licenses',\n            'userloc',\n            'userlog'\n        )->withTrashed()->find(Auth::user()->id);\n\n\n        $userlog = $user->userlog->load('item', 'user', 'target');\n\n        if (isset($user->id)) {\n            return view('account/view-assets', compact('user', 'userlog'))\n                ->with('settings', Setting::getSettings());\n        } else {\n            // Redirect to the user management page\n            return redirect()->route('users.index')->with('error', trans('admin/users/message.user_not_found', compact('id')));\n        }\n        // Redirect to the user management page\n        return redirect()->route('users.index')\n            ->with('error', trans('admin/users/message.user_not_found', $user->id));\n\n    }\n\n\n    /**\n     * Returns view of requestable items for a user.\n     * @return \\Illuminate\\Contracts\\View\\Factory|\\Illuminate\\View\\View\n     */\n    public function getRequestableIndex()\n    {\n\n        $assets = Asset::with('model', 'defaultLoc', 'location', 'assignedTo', 'requests')->Hardware()->RequestableAssets()->get();\n        $models = AssetModel::with('category', 'requests', 'assets')->RequestableModels()->get();\n\n        return view('account/requestable-assets', compact('assets', 'models'));\n    }\n\n\n\n    public function getRequestItem(Request $request, $itemType, $itemId = null)\n    {\n        $item = null;\n        $fullItemType = 'App\\\\Models\\\\' . studly_case($itemType);\n\n        if ($itemType == \"asset_model\") {\n            $itemType = \"model\";\n        }\n        $item = call_user_func(array($fullItemType, 'find'), $itemId);\n\n        $user = Auth::user();\n\n\n        $logaction = new Actionlog();\n        $logaction->item_id = $data['asset_id'] = $item->id;\n        $logaction->item_type = $fullItemType;\n        $logaction->created_at = $data['requested_date'] = date(\"Y-m-d H:i:s\");\n\n        if ($user->location_id) {\n            $logaction->location_id = $user->location_id;\n        }\n        $logaction->target_id = $data['user_id'] = Auth::user()->id;\n        $logaction->target_type = User::class;\n\n        $data['item_quantity'] = $request->has('request-quantity') ? e($request->input('request-quantity')) : 1;\n        $data['requested_by'] = $user->present()->fullName();\n        $data['item'] = $item;\n        $data['item_type'] = $itemType;\n        $data['target'] = Auth::user();\n\n\n        if ($fullItemType == Asset::class) {\n            $data['item_url'] = route('hardware.show', $item->id);\n        } else {\n            $data['item_url'] = route(\"view/${itemType}\", $item->id);\n\n        }\n\n        $settings = Setting::getSettings();\n\n        if ($item_request = $item->isRequestedBy($user)) {\n           $item->cancelRequest();\n           $data['item_quantity'] = $item_request->qty;\n           $logaction->logaction('request_canceled');\n\n            if (($settings->alert_email!='')  && ($settings->alerts_enabled=='1') && (!config('app.lock_passwords'))) {\n                $settings->notify(new RequestAssetCancelation($data));\n            }\n\n            return redirect()->route('requestable-assets')->with('success')->with('success', trans('admin/hardware/message.requests.canceled'));\n\n        } else {\n            $item->request();\n            if (($settings->alert_email!='')  && ($settings->alerts_enabled=='1') && (!config('app.lock_passwords'))) {\n                $logaction->logaction('requested');\n                $settings->notify(new RequestAssetNotification($data));\n            }\n\n\n\n            return redirect()->route('requestable-assets')->with('success')->with('success', trans('admin/hardware/message.requests.success'));\n        }\n    }\n\n\n    /**\n     * Process a specific requested asset\n     * @param null $assetId\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function getRequestAsset($assetId = null)\n    {\n\n        $user = Auth::user();\n\n        // Check if the asset exists and is requestable\n        if (is_null($asset = Asset::RequestableAssets()->find($assetId))) {\n            return redirect()->route('requestable-assets')\n                ->with('error', trans('admin/hardware/message.does_not_exist_or_not_requestable'));\n        }\n        if (!Company::isCurrentUserHasAccess($asset)) {\n            return redirect()->route('requestable-assets')\n                ->with('error', trans('general.insufficient_permissions'));\n        }\n\n        $data['item'] = $asset;\n        $data['target'] =  Auth::user();\n        $data['item_quantity'] = 1;\n        $settings = Setting::getSettings();\n\n        $logaction = new Actionlog();\n        $logaction->item_id = $data['asset_id'] = $asset->id;\n        $logaction->item_type = $data['item_type'] = Asset::class;\n        $logaction->created_at = $data['requested_date'] = date(\"Y-m-d H:i:s\");\n\n        if ($user->location_id) {\n            $logaction->location_id = $user->location_id;\n        }\n        $logaction->target_id = $data['user_id'] = Auth::user()->id;\n        $logaction->target_type = User::class;\n\n\n        // If it's already requested, cancel the request.\n        if ($asset->isRequestedBy(Auth::user())) {\n            $asset->cancelRequest();\n            $asset->decrement('requests_counter', 1);\n            \n            $logaction->logaction('request canceled');\n            $settings->notify(new RequestAssetCancelation($data));\n            return redirect()->route('requestable-assets')\n                ->with('success')->with('success', trans('admin/hardware/message.requests.cancel'));\n        }\n\n        $logaction->logaction('requested');\n        $asset->request();\n        $asset->increment('requests_counter', 1);\n        $settings->notify(new RequestAssetNotification($data));\n\n\n        return redirect()->route('requestable-assets')->with('success')->with('success', trans('admin/hardware/message.requests.success'));\n\n\n    }\n\n    public function getRequestedAssets()\n    {\n        return view('account/requested');\n    }\n\n\n    // Get the acceptance screen\n    public function getAcceptAsset($logID = null)\n    {\n\n        $findlog = Actionlog::where('id', $logID)->first();\n\n        if (!$findlog) {\n            return redirect()->to('account/view-assets')->with('error', 'No matching record.');\n        }\n\n        if ($findlog->accepted_id!='') {\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.asset_already_accepted'));\n        }\n\n        $user = Auth::user();\n\n\n        // TODO - Fix this for non-assets\n        if (($findlog->item_type==Asset::class) && ($user->id != $findlog->item->assigned_to)) {\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.incorrect_user_accepted'));\n        }\n\n\n        $item = $findlog->item;\n\n        // Check if the asset exists\n        if (is_null($item)) {\n            // Redirect to the asset management page\n            return redirect()->to('account')->with('error', trans('admin/hardware/message.does_not_exist'));\n        } elseif (!Company::isCurrentUserHasAccess($item)) {\n            return redirect()->route('requestable-assets')->with('error', trans('general.insufficient_permissions'));\n        } else {\n            return view('account/accept-asset', compact('item'))->with('findlog', $findlog)->with('item', $item);\n        }\n    }\n\n    // Save the acceptance\n    public function postAcceptAsset(Request $request, $logID = null)\n    {\n\n        // Check if the asset exists\n        if (is_null($findlog = Actionlog::where('id', $logID)->first())) {\n            // Redirect to the asset management page\n            return redirect()->to('account/view-assets')->with('error', trans('admin/hardware/message.does_not_exist'));\n        }\n\n\n        if ($findlog->accepted_id!='') {\n            // Redirect to the asset management page\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.asset_already_accepted'));\n        }\n\n        if ($request->missing('asset_acceptance')) {\n            return redirect()->back()->with('error', trans('admin/users/message.error.accept_or_decline'));\n        }\n\n        $user = Auth::user();\n\n        if (($findlog->item_type==Asset::class) && ($user->id != $findlog->item->assigned_to)) {\n            return redirect()->to('account/view-assets')->with('error', trans('admin/users/message.error.incorrect_user_accepted'));\n        }\n\n        if ($request->filled('signature_output')) {\n            $path = config('app.private_uploads').'/signatures';\n            $sig_filename = \"siglog-\".$findlog->id.'-'.date('Y-m-d-his').\".png\";\n            $data_uri = e($request->get('signature_output'));\n            $encoded_image = explode(\",\", $data_uri);\n            $decoded_image = base64_decode($encoded_image[1]);\n            file_put_contents($path.\"/\".$sig_filename, $decoded_image);\n        }\n\n\n        $logaction = new Actionlog();\n\n        if ($request->input('asset_acceptance')=='accepted') {\n            $logaction_msg  = 'accepted';\n            $accepted=\"accepted\";\n            $return_msg = trans('admin/users/message.accepted');\n        } else {\n            $logaction_msg = 'declined';\n            $accepted=\"rejected\";\n            $return_msg = trans('admin/users/message.declined');\n        }\n            $logaction->item_id      = $findlog->item_id;\n            $logaction->item_type    = $findlog->item_type;\n\n        // Asset\n        if (($findlog->item_id!='') && ($findlog->item_type==Asset::class)) {\n            if ($request->input('asset_acceptance')!='accepted') {\n                DB::table('assets')\n                ->where('id', $findlog->item_id)\n                ->update(array('assigned_to' => null));\n            }\n        }\n\n        $logaction->target_id = $findlog->target_id;\n        $logaction->target_type = User::class;\n        $logaction->note = e($request->input('note'));\n        $logaction->updated_at = date(\"Y-m-d H:i:s\");\n\n\n        if (isset($sig_filename)) {\n            $logaction->accept_signature = $sig_filename;\n        }\n        $log = $logaction->logaction($logaction_msg);\n\n        $update_checkout = DB::table('action_logs')\n        ->where('id', $findlog->id)\n        ->update(array('accepted_id' => $logaction->id));\n\n        if (($findlog->item_id!='') && ($findlog->item_type==Asset::class)) {\n            $affected_asset = $logaction->item;\n            $affected_asset->accepted = $accepted;\n            $affected_asset->save();\n        }\n\n        if ($update_checkout) {\n            return redirect()->to('account/view-assets')->with('success', $return_msg);\n\n        } else {\n            return redirect()->to('account/view-assets')->with('error', 'Something went wrong ');\n        }\n    }\n}\n", "<?php\n\nreturn array(\n\n    'undeployable' \t\t=> '<strong>Warning: </strong> This asset has been marked as currently undeployable.\n                        If this status has changed, please update the asset status.',\n    'does_not_exist' \t=> 'Asset does not exist.',\n    'does_not_exist_or_not_requestable' => 'Nice try. That asset does not exist or is not requestable.',\n    'assoc_users'\t \t=> 'This asset is currently checked out to a user and cannot be deleted. Please check the asset in first, and then try deleting again. ',\n\n    'create' => array(\n        'error'   \t\t=> 'Asset was not created, please try again. :(',\n        'success' \t\t=> 'Asset created successfully. :)'\n    ),\n\n    'update' => array(\n        'error'   \t\t\t=> 'Asset was not updated, please try again',\n        'success' \t\t\t=> 'Asset updated successfully.',\n        'nothing_updated'\t=>  'No fields were selected, so nothing was updated.',\n    ),\n\n    'restore' => array(\n        'error'   \t\t=> 'Asset was not restored, please try again',\n        'success' \t\t=> 'Asset restored successfully.'\n    ),\n\n    'audit' => array(\n        'error'   \t\t=> 'Asset audit was unsuccessful. Please try again.',\n        'success' \t\t=> 'Asset audit successfully logged.'\n    ),\n\n\n    'deletefile' => array(\n        'error'   => 'File not deleted. Please try again.',\n        'success' => 'File successfully deleted.',\n    ),\n\n    'upload' => array(\n        'error'   => 'File(s) not uploaded. Please try again.',\n        'success' => 'File(s) successfully uploaded.',\n        'nofiles' => 'You did not select any files for upload, or the file you are trying to upload is too large',\n        'invalidfiles' => 'One or more of your files is too large or is a filetype that is not allowed. Allowed filetypes are png, gif, jpg, doc, docx, pdf, and txt.',\n    ),\n\n    'import' => array(\n        'error'                 => 'Some items did not import correctly.',\n        'errorDetail'           => 'The following Items were not imported because of errors.',\n        'success'               => \"Your file has been imported\",\n        'file_delete_success'   => \"Your file has been been successfully deleted\",\n        'file_delete_error'      => \"The file was unable to be deleted\",\n    ),\n\n\n    'delete' => array(\n        'confirm'   \t=> 'Are you sure you wish to delete this asset?',\n        'error'   \t\t=> 'There was an issue deleting the asset. Please try again.',\n        'nothing_updated'   => 'No assets were selected, so nothing was deleted.',\n        'success' \t\t=> 'The asset was deleted successfully.'\n    ),\n\n    'checkout' => array(\n        'error'   \t\t=> 'Asset was not checked out, please try again',\n        'success' \t\t=> 'Asset checked out successfully.',\n        'user_does_not_exist' => 'That user is invalid. Please try again.',\n        'not_available' => 'That asset is not available for checkout!',\n        'no_assets_selected' => 'You must select at least one asset from the list'\n    ),\n\n    'checkin' => array(\n        'error'   \t\t=> 'Asset was not checked in, please try again',\n        'success' \t\t=> 'Asset checked in successfully.',\n        'user_does_not_exist' => 'That user is invalid. Please try again.',\n        'already_checked_in'  => 'That asset is already checked in.',\n\n    ),\n\n    'requests' => array(\n        'error'   \t\t=> 'Asset was not requested, please try again',\n        'success' \t\t=> 'Asset requested successfully.',\n        'cancel'      => 'Checkout request successfully canceled'\n    )\n\n);\n", "@push('css')\n<link rel=\"stylesheet\" href=\"{{ url(mix('css/dist/bootstrap-table.css')) }}\">\n\n@endpush\n\n@push('js')\n<script src=\"{{ url(mix('js/dist/bootstrap-table.js')) }}\"></script>\n<script nonce=\"{{ csrf_token() }}\">\n\n    $(function () {\n\n\n        var stickyHeaderOffsetY = 0;\n\n        if ( $('.navbar-fixed-top').css('height') ) {\n            stickyHeaderOffsetY = +$('.navbar-fixed-top').css('height').replace('px','');\n        }\n        if ( $('.navbar-fixed-top').css('margin-bottom') ) {\n            stickyHeaderOffsetY += +$('.navbar-fixed-top').css('margin-bottom').replace('px','');\n        }\n\n        var blockedFields = \"searchable,sortable,switchable,title,visible,formatter,class\".split(\",\");\n\n        var keyBlocked = function(key) {\n            for(var j in blockedFields) {\n                if (key === blockedFields[j]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        $('.snipe-table').bootstrapTable('destroy').bootstrapTable({\n            classes: 'table table-responsive table-no-bordered',\n            ajaxOptions: {\n                headers: {\n                    'X-CSRF-TOKEN': $('meta[name=\"csrf-token\"]').attr('content')\n                }\n            },\n            stickyHeader: true,\n            stickyHeaderOffsetY: stickyHeaderOffsetY + 'px',\n            undefinedText: '',\n            iconsPrefix: 'fa',\n            cookie: true,\n            cookieExpire: '2y',\n            mobileResponsive: true,\n            maintainSelected: true,\n            trimOnSearch: false,\n            showSearchClearButton: true,\n            paginationFirstText: \"{{ trans('general.first') }}\",\n            paginationLastText: \"{{ trans('general.last') }}\",\n            paginationPreText: \"{{ trans('general.previous') }}\",\n            paginationNextText: \"{{ trans('general.next') }}\",\n            pageList: ['10','20', '30','50','100','150','200', '500', '1000'],\n            pageSize: {{  (($snipeSettings->per_page!='') && ($snipeSettings->per_page > 0)) ? $snipeSettings->per_page : 20 }},\n            paginationVAlign: 'both',\n            queryParams: function (params) {\n                var newParams = {};\n                for(var i in params) {\n                    if(!keyBlocked(i)) { // only send the field if it's not in blockedFields\n                        newParams[i] = params[i];\n                    }\n                }\n                return newParams;\n            },\n            formatLoadingMessage: function () {\n                return '<h2><i class=\"fa fa-spinner fa-spin\" aria-hidden=\"true\"></i> Loading... please wait.... </h4>';\n            },\n            icons: {\n                advancedSearchIcon: 'fa fa-search-plus',\n                paginationSwitchDown: 'fa-caret-square-o-down',\n                paginationSwitchUp: 'fa-caret-square-o-up',\n                columns: 'fa-columns',\n                refresh: 'fa-refresh',\n                export: 'fa-download',\n                clearSearch: 'fa-times'\n            },\n            exportOptions: {\n                htmlContent: true,\n            },\n\n            exportTypes: ['csv', 'excel', 'doc', 'txt','json', 'xml', 'pdf'],\n            onLoadSuccess: function () {\n                $('[data-toggle=\"tooltip\"]').tooltip(); // Needed to attach tooltips after ajax call\n            }\n\n        });   \n\n    });\n\n\n\n\n\n    function dateRowCheckStyle(value) {\n        if ((value.days_to_next_audit) && (value.days_to_next_audit < {{ $snipeSettings->audit_warning_days ?: 0 }})) {\n            return { classes : \"danger\" }\n        }\n        return {};\n    }\n\n\n    // These methods dynamically add/remove hidden input values in the bulk actions form\n    $('.snipe-table').on('check.bs.table .btSelectItem', function (row, $element) {\n        $('#bulkEdit').removeAttr('disabled');\n        $('#bulkEdit').prepend('<input id=\"checkbox_' + $element.id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + $element.id + '\">');\n    });\n\n    $('.snipe-table').on('uncheck.bs.table .btSelectItem', function (row, $element) {\n        $( \"#checkbox_\" + $element.id).remove();\n    });\n    \n\n    // Handle whether or not the edit button should be disabled\n    $('.snipe-table').on('uncheck.bs.table', function () {\n        if ($('.snipe-table').bootstrapTable('getSelections').length == 0) {\n            $('#bulkEdit').attr('disabled', 'disabled');\n        }\n    });\n\n    $('.snipe-table').on('uncheck-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        $('#bulkEdit').attr('disabled', 'disabled');\n        //console.dir(rowsBefore);\n\n        for (var i in rowsBefore) {\n            $( \"#checkbox_\" + rowsBefore[i].id).remove();\n        }\n\n    });\n\n    $('.snipe-table').on('check-all.bs.table', function (event, rowsAfter, rowsBefore) {\n        \n        $('#bulkEdit').removeAttr('disabled');\n        //console.dir(rowsAfter);\n        \n        for (var i in rowsAfter) {\n            // console.log(rowsAfter[i].id);\n            $('#bulkEdit').prepend('<input id=\"checkbox_' + rowsAfter[i].id + '\" type=\"hidden\" name=\"ids[]\" value=\"' + rowsAfter[i].id + '\">');\n        }\n    });\n\n    \n\n    // This only works for model index pages because it uses the row's model ID\n    function genericRowLinkFormatter(destination) {\n        return function (value,row) {\n            if (value) {\n                return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '\">' + value + '</a>';\n            }\n        };\n    }\n\n    // Use this when we're introspecting into a column object and need to link\n    function genericColumnObjLinkFormatter(destination) {\n        return function (value,row) {\n            if ((value) && (value.status_meta)) {\n\n                var text_color;\n                var icon_style;\n                var text_help;\n                var status_meta = {\n                  'deployed': '{{ strtolower(trans('general.deployed')) }}',\n                  'deployable': '{{ strtolower(trans('admin/hardware/general.deployable')) }}',\n                  'pending': '{{ strtolower(trans('general.pending')) }}'\n                }\n\n                switch (value.status_meta) {\n                    case 'deployed':\n                        text_color = 'blue';\n                        icon_style = 'fa-circle';\n                        text_help = '<label class=\"label label-default\">{{ trans('general.deployed') }}</label>';\n                    break;\n                    case 'deployable':\n                        text_color = 'green';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                    break;\n                    case 'pending':\n                        text_color = 'orange';\n                        icon_style = 'fa-circle';\n                        text_help = '';\n                        break;\n                    default:\n                        text_color = 'red';\n                        icon_style = 'fa-times';\n                        text_help = '';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + destination + '/' + value.id + '\" data-toggle=\"tooltip\" title=\"'+ status_meta[value.status_meta] + '\"> <i class=\"fa ' + icon_style + ' text-' + text_color + '\"></i> ' + value.name + ' ' + text_help + ' </a> </nobr>';\n            } else if ((value) && (value.name)) {\n\n                // Add some overrides for any funny urls we have\n                var dest = destination;\n                var dpolymorphicItemFormatterest = '';\n                if (destination=='fieldsets') {\n                    var dpolymorphicItemFormatterest = 'fields/';\n                }\n\n                return '<nobr><a href=\"{{ url('/') }}/' + dpolymorphicItemFormatterest + dest + '/' + value.id + '\">' + value.name + '</a></span>';\n            }\n        };\n    }\n\n    function hardwareAuditFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/hardware/audit/' + row.id + '/\" class=\"btn btn-sm bg-yellow\" data-tooltip=\"true\" title=\"Audit this item\">{{ trans('general.audit') }}</a>';\n    }\n\n\n    // Make the edit/delete buttons\n    function genericActionsFormatter(owner_name, element_name) {\n        if (!element_name) {\n            element_name = '';\n        }\n\n        return function (value,row) {\n\n            var actions = '<nobr>';\n\n            // Add some overrides for any funny urls we have\n            var dest = owner_name;\n\n            if (dest =='groups') {\n                var dest = 'admin/groups';\n            }\n\n            if (dest =='maintenances') {\n                var dest = 'hardware/maintenances';\n            }\n\n            if(element_name != '') {\n                dest = dest + '/' + row.owner_id + '/' + element_name;\n            }\n\n            if ((row.available_actions) && (row.available_actions.clone === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/clone\" class=\"btn btn-sm btn-info\" data-tooltip=\"true\" title=\"Clone Item\"><i class=\"fa fa-copy\" aria-hidden=\"true\"></i><span class=\"sr-only\">Clone</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.update === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '/edit\" class=\"btn btn-sm btn-warning\" data-tooltip=\"true\" title=\"{{ trans('general.update') }}\"><i class=\"fa fa-pencil\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.update') }}</span></a>&nbsp;';\n            }\n\n            if ((row.available_actions) && (row.available_actions.delete === true)) {\n                actions += '<a href=\"{{ url('/') }}/' + dest + '/' + row.id + '\" '\n                    + ' class=\"btn btn-danger btn-sm delete-asset\"  data-toggle=\"tooltip\"  '\n                    + ' data-toggle=\"modal\" '\n                    + ' data-content=\"{{ trans('general.sure_to_delete') }} ' + row.name + '?\" '\n                    + ' data-title=\"{{  trans('general.delete') }}\" onClick=\"return false;\">'\n                    + '<i class=\"fa fa-trash\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.delete') }}</span></a>&nbsp;';\n            } else {\n                actions += '<a class=\"btn btn-danger btn-sm delete-asset disabled\" onClick=\"return false;\"><i class=\"fa fa-trash\"></i></a>&nbsp;';\n            }\n            \n\n            if ((row.available_actions) && (row.available_actions.restore === true)) {\n                actions += '<form style=\"display: inline;\" method=\"POST\" action=\"{{ url('/') }}/' + dest + '/' + row.id + '/restore\"> ';\n                actions += '@csrf';\n                actions += '<button class=\"btn btn-sm btn-warning\" data-toggle=\"tooltip\" title=\"{{ trans('general.restore') }}\">';\n                actions += '<i class=\"fa fa-retweet\" aria-hidden=\"true\"></i><span class=\"sr-only\">{{ trans('general.restore') }}</span></button></form>&nbsp;';\n            }\n\n            actions +='</nobr>';\n            return actions;\n\n        };\n    }\n\n\n    // This handles the icons and display of polymorphic entries\n    function polymorphicItemFormatter(value) {\n\n        var item_destination = '';\n        var item_icon;\n\n        if ((value) && (value.type)) {\n\n            if (value.type == 'asset') {\n                item_destination = 'hardware';\n                item_icon = 'fa-barcode';\n            } else if (value.type == 'accessory') {\n                item_destination = 'accessories';\n                item_icon = 'fa-keyboard-o';\n            } else if (value.type == 'component') {\n                item_destination = 'components';\n                item_icon = 'fa-hdd-o';\n            } else if (value.type == 'consumable') {\n                item_destination = 'consumables';\n                item_icon = 'fa-tint';\n            } else if (value.type == 'license') {\n                item_destination = 'licenses';\n                item_icon = 'fa-floppy-o';\n            } else if (value.type == 'user') {\n                item_destination = 'users';\n                item_icon = 'fa-user';\n            } else if (value.type == 'location') {\n                item_destination = 'locations'\n                item_icon = 'fa-map-marker';\n            }\n\n            return '<nobr><a href=\"{{ url('/') }}/' + item_destination +'/' + value.id + '\" data-tooltip=\"true\" title=\"' + value.type + '\"><i class=\"fa ' + item_icon + ' text-{{ $snipeSettings->skin!='' ? $snipeSettings->skin : 'blue' }} \"></i> ' + value.name + '</a></nobr>';\n\n        } else {\n            return '';\n        }\n\n\n    }\n\n    // This just prints out the item type in the activity report\n    function itemTypeFormatter(value, row) {\n\n        if ((row) && (row.item) && (row.item.type)) {\n            return row.item.type;\n        }\n    }\n\n\n    // Convert line breaks to <br>\n    function notesFormatter(value) {\n        if (value) {\n            return value.replace(/(?:\\r\\n|\\r|\\n)/g, '<br />');;\n        }\n    }\n\n\n    // We need a special formatter for license seats, since they don't work exactly the same\n    // Checkouts need the license ID, checkins need the specific seat ID\n\n    function licenseSeatInOutFormatter(value, row) {\n        // The user is allowed to check the license seat out and it's available\n        if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.license_id + '/checkout/'+row.id+'\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n        } else {\n            return '<a href=\"{{ url('/') }}/licenses/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check in this license seat.\">{{ trans('general.checkin') }}</a>';\n        }\n\n    }\n\n    function genericCheckinCheckoutFormatter(destination) {\n        return function (value,row) {\n\n            // The user is allowed to check items out, AND the item is deployable\n            if ((row.available_actions.checkout == true) && (row.user_can_checkout == true) && ((!row.asset_id) && (!row.assigned_to))) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkout\" class=\"btn btn-sm bg-maroon\" data-toggle=\"tooltip\" title=\"Check this item out\">{{ trans('general.checkout') }}</a>';\n\n            // The user is allowed to check items out, but the item is not deployable\n            } else if (((row.user_can_checkout == false)) && (row.available_actions.checkout == true) && (!row.assigned_to)) {\n                return '<div  data-toggle=\"tooltip\" title=\"This item has a status label that is undeployable and cannot be checked out at this time.\"><a class=\"btn btn-sm bg-maroon disabled\">{{ trans('general.checkout') }}</a></div>';\n\n            // The user is allowed to check items in\n            } else if (row.available_actions.checkin == true)  {\n                if (row.assigned_to) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                } else if (row.assigned_pivot_id) {\n                    return '<a href=\"{{ url('/') }}/' + destination + '/' + row.assigned_pivot_id + '/checkin\" class=\"btn btn-sm bg-purple\" data-toggle=\"tooltip\" title=\"Check this item in so it is available for re-imaging, re-issue, etc.\">{{ trans('general.checkin') }}</a>';\n                }\n\n            }\n\n        }\n\n\n    }\n\n\n    // This is only used by the requestable assets section\n    function assetRequestActionsFormatter (row, value) {\n        if (value.available_actions.cancel == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"POST\">@csrf<button class=\"btn btn-danger btn-sm\" data-toggle=\"tooltip\" title=\"Cancel this item request\">{{ trans('button.cancel') }}</button></form>';\n        } else if (value.available_actions.request == true)  {\n            return '<form action=\"{{ url('/') }}/account/request-asset/'+ value.id + '\" method=\"POST\">@csrf<button class=\"btn btn-primary btn-sm\" data-toggle=\"tooltip\" title=\"Request this item\">{{ trans('button.request') }}</button></form>';\n        }\n\n    }\n\n\n\n    var formatters = [\n        'hardware',\n        'accessories',\n        'consumables',\n        'components',\n        'locations',\n        'users',\n        'manufacturers',\n        'maintenances',\n        'statuslabels',\n        'models',\n        'licenses',\n        'categories',\n        'suppliers',\n        'departments',\n        'companies',\n        'depreciations',\n        'fieldsets',\n        'groups',\n        'kits'\n    ];\n\n    for (var i in formatters) {\n        window[formatters[i] + 'LinkFormatter'] = genericRowLinkFormatter(formatters[i]);\n        window[formatters[i] + 'LinkObjFormatter'] = genericColumnObjLinkFormatter(formatters[i]);\n        window[formatters[i] + 'ActionsFormatter'] = genericActionsFormatter(formatters[i]);\n        window[formatters[i] + 'InOutFormatter'] = genericCheckinCheckoutFormatter(formatters[i]);\n    }\n\n    var child_formatters = [\n        ['kits', 'models'],\n        ['kits', 'licenses'],\n        ['kits', 'consumables'],\n        ['kits', 'accessories'],\n    ];\n\n    for (var i in child_formatters) {\n        var owner_name = child_formatters[i][0];\n        var child_name = child_formatters[i][1];\n        window[owner_name + '_' + child_name + 'ActionsFormatter'] = genericActionsFormatter(owner_name, child_name);\n    }\n\n\n\n    // This is  gross, but necessary so that we can package the API response\n    // for custom fields in a more useful way.\n    function customFieldsFormatter(value, row) {\n\n\n            if ((!this) || (!this.title)) {\n                return '';\n            }\n\n            var field_column = this.title;\n\n            // Pull out any HTMl that might be passed via the presenter\n            // (for example, the locked icon for encrypted fields)\n            var field_column_plain = field_column.replace(/<(?:.|\\n)*?> ?/gm, '');\n            if ((row.custom_fields) && (row.custom_fields[field_column_plain])) {\n\n                // If the field type needs special formatting, do that here\n                if ((row.custom_fields[field_column_plain].field_format) && (row.custom_fields[field_column_plain].value)) {\n                    if (row.custom_fields[field_column_plain].field_format=='URL') {\n                        return '<a href=\"' + row.custom_fields[field_column_plain].value + '\" target=\"_blank\" rel=\"noopener\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    } else if (row.custom_fields[field_column_plain].field_format=='EMAIL') {\n                        return '<a href=\"mailto:' + row.custom_fields[field_column_plain].value + '\">' + row.custom_fields[field_column_plain].value + '</a>';\n                    }\n                }\n                return row.custom_fields[field_column_plain].value;\n\n            }\n\n    }\n\n\n    function createdAtFormatter(value) {\n        if ((value) && (value.formatted)) {\n            return value.formatted;\n        }\n    }\n\n    function externalLinkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\" target=\"_blank\">' + value + '</a>';\n        }\n    }\n\n    function groupsFormatter(value) {\n\n        if (value) {\n            var groups = '';\n            for (var index in value.rows) {\n                groups += '<a href=\"{{ url('/') }}/admin/groups/' + value.rows[index].id + '\" class=\"label label-default\">' + value.rows[index].name + '</a> ';\n            }\n            return groups;\n        }\n    }\n\n\n\n    function changeLogFormatter(value) {\n        var result = '';\n            for (var index in value) {\n                result += index + ': <del>' + value[index].old + '</del>  <i class=\"fa fa-long-arrow-right\" aria-hidden=\"true\"></i> ' + value[index].new + '<br>'\n            }\n\n        return result;\n\n    }\n\n\n    // Create a linked phone number in the table list\n    function phoneFormatter(value) {\n        if (value) {\n            return  '<a href=\"tel:' + value + '\">' + value + '</a>';\n        }\n    }\n\n\n    function deployedLocationFormatter(row, value) {\n        if ((row) && (row!=undefined)) {\n            return '<a href=\"{{ url('/') }}/locations/' + row.id + '\">' + row.name + '</a>';\n        } else if (value.rtd_location) {\n            return '<a href=\"{{ url('/') }}/locations/' + value.rtd_location.id + '\" data-toggle=\"tooltip\" title=\"Default Location\">' + value.rtd_location.name + '</a>';\n        }\n\n    }\n\n    function groupsAdminLinkFormatter(value, row) {\n        return '<a href=\"{{ url('/') }}/admin/groups/' + row.id + '\">' + value + '</a>';\n    }\n\n    function assetTagLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.id)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\">' + row.asset.asset_tag + '</a>';\n        }\n        return '';\n\n    }\n\n    function departmentNameLinkFormatter(value, row) {\n        if ((row.assigned_user) && (row.assigned_user.department) && (row.assigned_user.department.name)) {\n            return '<a href=\"{{ url('/') }}/department/' + row.assigned_user.department.id + '\">' + row.assigned_user.department.name + '</a>';\n        }\n\n    }\n\n    function assetNameLinkFormatter(value, row) {\n        if ((row.asset) && (row.asset.name)) {\n            return '<a href=\"{{ url('/') }}/hardware/' + row.asset.id + '\">' + row.asset.name + '</a>';\n        }\n\n    }\n\n    function trueFalseFormatter(value) {\n        if ((value) && ((value == 'true') || (value == '1'))) {\n            return '<i class=\"fa fa-check text-success\"></i>';\n        } else {\n            return '<i class=\"fa fa-times text-danger\"></i>';\n        }\n    }\n\n    function dateDisplayFormatter(value) {\n        if (value) {\n            return  value.formatted;\n        }\n    }\n\n    function iconFormatter(value) {\n        if (value) {\n            return '<i class=\"' + value + '  icon-med\"></i>';\n        }\n    }\n\n    function emailFormatter(value) {\n        if (value) {\n            return '<a href=\"mailto:' + value + '\">' + value + '</a>';\n        }\n    }\n\n    function linkFormatter(value) {\n        if (value) {\n            return '<a href=\"' + value + '\">' + value + '</a>';\n        }\n    }\n\n    function assetCompanyFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.id + '\">' + value + '</a>';\n        }\n    }\n\n    function assetCompanyObjFilterFormatter(value, row) {\n        if ((row) && (row.company)) {\n            return '<a href=\"{{ url('/') }}/hardware/?company_id=' + row.company.id + '\">' + row.company.name + '</a>';\n        }\n    }\n\n    function usersCompanyObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/users/?company_id=' + row.id + '\">' + value + '</a>';\n        } else {\n            return value;\n        }\n    }\n\n    function employeeNumFormatter(value, row) {\n\n        if ((row) && (row.assigned_to) && ((row.assigned_to.employee_number))) {\n            return '<a href=\"{{ url('/') }}/users/' + row.assigned_to.id + '\">' + row.assigned_to.employee_number + '</a>';\n        }\n    }\n\n    function orderNumberObjFilterFormatter(value, row) {\n        if (value) {\n            return '<a href=\"{{ url('/') }}/hardware/?order_number=' + row.order_number + '\">' + row.order_number + '</a>';\n        }\n    }\n\n\n   function imageFormatter(value, row) {\n\n\n\n        if (value) {\n\n            if (row.name) {\n                var altName = row.name;\n            }\n                else if ((row) && (row.model)) {\n                var altName = row.model.name;\n           }\n            return '<a href=\"' + value + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\" alt=\"' + altName + '\"></a>';\n        }\n    }\n\n    function fileUploadFormatter(value) {\n        if ((value) && (value.url) && (value.inlineable)) {\n            return '<a href=\"' + value.url + '\" data-toggle=\"lightbox\" data-type=\"image\"><img src=\"' + value.url + '\" style=\"max-height: {{ $snipeSettings->thumbnail_max_h }}px; width: auto;\" class=\"img-responsive\"></a>';\n        } else if ((value) && (value.url)) {\n            return '<a href=\"' + value.url + '\" class=\"btn btn-default\"><i class=\"fa fa-download\"></i></a>';\n        }\n    }\n\n\n    function fileUploadNameFormatter(value) {\n        console.dir(value);\n        if ((value) && (value.filename) && (value.url)) {\n            return '<a href=\"' + value.url + '\">' + value.filename + '</a>';\n        }\n    }\n\n    function cleanFloat(number) {\n        if(!number) { // in a JavaScript context, meaning, if it's null or zero or unset\n            return 0.0;\n        }\n        if (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\") {\n            // yank periods, change commas to periods\n            periodless = number.toString().replace(/\\./g,\"\");\n            decimalfixed = periodless.replace(/,/g,\".\");\n        } else {\n            // yank commas, that's it.\n            decimalfixed = number.toString().replace(\",\",\"\");\n        }\n        return parseFloat(decimalfixed);\n    }\n\n    function sumFormatter(data) {\n        if (Array.isArray(data)) {\n            var field = this.field;\n            var total_sum = data.reduce(function(sum, row) {\n                return (sum) + (cleanFloat(row[field]) || 0);\n            }, 0);\n            return numberWithCommas(total_sum.toFixed(2));\n        }\n        return 'not an array';\n    }\n\n    function numberWithCommas(value) {\n        if ((value) && (\"{{$snipeSettings->digit_separator}}\" == \"1.234,56\")){\n            var parts = value.toString().split(\".\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \".\");\n             return parts.join(\",\");\n         } else {\n             var parts = value.toString().split(\",\");\n             parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n             return parts.join(\".\");\n        }\n        return value\n    }\n\n    $(function () {\n        $('#bulkEdit').click(function () {\n            var selectedIds = $('.snipe-table').bootstrapTable('getSelections');\n            $.each(selectedIds, function(key,value) {\n                $( \"#bulkForm\" ).append($('<input type=\"hidden\" name=\"ids[' + value.id + ']\" value=\"' + value.id + '\">' ));\n            });\n\n        });\n    });\n\n\n\n    $(function() {\n\n        // This handles the search box highlighting on both ajax and client-side\n        // bootstrap tables\n        var searchboxHighlighter = function (event) {\n\n            $('.search-input').each(function (index, element) {\n\n                if ($(element).val() != '') {\n                    $(element).addClass('search-highlight');\n                    $(element).next().children().addClass('search-highlight');\n                } else {\n                    $(element).removeClass('search-highlight');\n                    $(element).next().children().removeClass('search-highlight');\n                }\n            });\n        };\n\n        $('.search button[name=clearSearch]').click(searchboxHighlighter);\n        searchboxHighlighter({ name:'pageload'});\n        $('.search-input').keyup(searchboxHighlighter);\n\n        //  This is necessary to make the bootstrap tooltips work inside of the\n        // wenzhixin/bootstrap-table formatters\n        $('#table').on('post-body.bs.table', function () {\n            $('[data-toggle=\"tooltip\"]').tooltip({\n                container: 'body'\n            });\n\n\n        });\n    });\n\n</script>\n    \n@endpush\n", "<?php\n\n\nRoute::group(['middleware' => 'auth'], function () {\n    /*\n    * Companies\n    */\n    Route::resource('companies', 'CompaniesController', [\n        'parameters' => ['company' => 'company_id']\n    ]);\n\n    /*\n    * Categories\n    */\n    Route::resource('categories', 'CategoriesController', [\n        'parameters' => ['category' => 'category_id']\n    ]);\n\n    /*\n    * Locations\n    */\n    Route::resource('locations', 'LocationsController', [\n        'parameters' => ['location' => 'location_id']\n    ]);\n    \n    Route::get(\n        'locations/{locationId}/printassigned',\n        [ 'as' => 'locations.print_assigned', 'uses' => 'LocationsController@print_assigned' ]\n    );\n    \n    Route::get(\n        'locations/{locationId}/printallassigned',\n        [ 'as' => 'locations.print_all_assigned', 'uses' => 'LocationsController@print_all_assigned' ]\n    );\n\n    /*\n    * Manufacturers\n    */\n\n    Route::group([ 'prefix' => 'manufacturers', 'middleware' => ['auth'] ], function () {\n\n        Route::post('{manufacturers_id}/restore', [ 'as' => 'restore/manufacturer', 'uses' => 'ManufacturersController@restore']);\n    });\n\n    Route::resource('manufacturers', 'ManufacturersController', [\n        'parameters' => ['manufacturer' => 'manufacturers_id']\n    ]);\n\n    /*\n    * Suppliers\n    */\n    Route::resource('suppliers', 'SuppliersController', [\n        'parameters' => ['supplier' => 'supplier_id']\n    ]);\n\n    /*\n    * Depreciations\n     */\n     Route::resource('depreciations', 'DepreciationsController', [\n         'parameters' => ['depreciation' => 'depreciation_id']\n     ]);\n\n     /*\n     * Status Labels\n      */\n      Route::resource('statuslabels', 'StatuslabelsController', [\n          'parameters' => ['statuslabel' => 'statuslabel_id']\n      ]);\n\n\n    /*\n    * Departments\n    */\n    Route::resource('departments', 'DepartmentsController', [\n        'parameters' => ['department' => 'department_id']\n    ]);\n\n\n});\n\n\n/*\n|\n|--------------------------------------------------------------------------\n| Re-Usable Modal Dialog routes.\n|--------------------------------------------------------------------------\n|\n| Routes for various modal dialogs to interstitially create various things\n| \n*/\n\nRoute::group(['middleware' => 'auth','prefix' => 'modals'], function () {\n    Route::get('{type}/{itemId?}',['as' => 'modal.show', 'uses' => 'ModalController@show']);\n});\n\n/*\n|--------------------------------------------------------------------------\n| Log Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\nRoute::group(['middleware' => 'auth'], function () {\n\n    Route::get(\n        'display-sig/{filename}',\n        [\n            'as' => 'log.signature.view',\n            'uses' => 'ActionlogController@displaySig' ]\n    );\n\n\n});\n\n\n\n/*\n|--------------------------------------------------------------------------\n| Admin Routes\n|--------------------------------------------------------------------------\n|\n| Register all the admin routes.\n|\n*/\n\n\n\nRoute::group([ 'prefix' => 'admin','middleware' => ['auth', 'authorize:superuser']], function () {\n\n    Route::get('settings', ['as' => 'settings.general.index','uses' => 'SettingsController@getSettings' ]);\n    Route::post('settings', ['as' => 'settings.general.save','uses' => 'SettingsController@postSettings' ]);\n\n\n    Route::get('branding', ['as' => 'settings.branding.index','uses' => 'SettingsController@getBranding' ]);\n    Route::post('branding', ['as' => 'settings.branding.save','uses' => 'SettingsController@postBranding' ]);\n\n    Route::get('security', ['as' => 'settings.security.index','uses' => 'SettingsController@getSecurity' ]);\n    Route::post('security', ['as' => 'settings.security.save','uses' => 'SettingsController@postSecurity' ]);\n\n    Route::get('groups', ['as' => 'settings.groups.index','uses' => 'GroupsController@index' ]);\n\n    Route::get('localization', ['as' => 'settings.localization.index','uses' => 'SettingsController@getLocalization' ]);\n    Route::post('localization', ['as' => 'settings.localization.save','uses' => 'SettingsController@postLocalization' ]);\n\n    Route::get('notifications', ['as' => 'settings.alerts.index','uses' => 'SettingsController@getAlerts' ]);\n    Route::post('notifications', ['as' => 'settings.alerts.save','uses' => 'SettingsController@postAlerts' ]);\n\n    Route::get('slack', ['as' => 'settings.slack.index','uses' => 'SettingsController@getSlack' ]);\n    Route::post('slack', ['as' => 'settings.slack.save','uses' => 'SettingsController@postSlack' ]);\n\n    Route::get('asset_tags', ['as' => 'settings.asset_tags.index','uses' => 'SettingsController@getAssetTags' ]);\n    Route::post('asset_tags', ['as' => 'settings.asset_tags.save','uses' => 'SettingsController@postAssetTags' ]);\n\n    Route::get('barcodes', ['as' => 'settings.barcodes.index','uses' => 'SettingsController@getBarcodes' ]);\n    Route::post('barcodes', ['as' => 'settings.barcodes.save','uses' => 'SettingsController@postBarcodes' ]);\n\n    Route::get('labels', ['as' => 'settings.labels.index','uses' => 'SettingsController@getLabels' ]);\n    Route::post('labels', ['as' => 'settings.labels.save','uses' => 'SettingsController@postLabels' ]);\n\n    Route::get('ldap', ['as' => 'settings.ldap.index','uses' => 'SettingsController@getLdapSettings' ]);\n    Route::post('ldap', ['as' => 'settings.ldap.save','uses' => 'SettingsController@postLdapSettings' ]);\n\n    Route::get('phpinfo', ['as' => 'settings.phpinfo.index','uses' => 'SettingsController@getPhpInfo' ]);\n\n\n    Route::get('oauth', [ 'as' => 'settings.oauth.index', 'uses' => 'SettingsController@api' ]);\n\n    Route::get('purge', ['as' => 'settings.purge.index', 'uses' => 'SettingsController@getPurge']);\n    Route::post('purge', ['as' => 'settings.purge.save', 'uses' => 'SettingsController@postPurge']);\n\n    Route::get('login-attempts', ['as' => 'settings.logins.index','uses' => 'SettingsController@getLoginAttempts' ]);\n\n    # Backups\n    Route::group([ 'prefix' => 'backups', 'middleware' => 'auth' ], function () {\n\n\n        Route::get('download/{filename}', [\n            'as' => 'settings.backups.download',\n            'uses' => 'SettingsController@downloadFile' ]);\n\n        Route::delete('delete/{filename}', [\n            'as' => 'settings.backups.destroy',\n            'uses' => 'SettingsController@deleteFile' ]);\n\n        Route::post('/', [\n            'as' => 'settings.backups.create',\n            'uses' => 'SettingsController@postBackups'\n        ]);\n\n        Route::get('/', [ 'as' => 'settings.backups.index', 'uses' => 'SettingsController@getBackups' ]);\n\n    });\n\n\n\n    Route::resource('groups', 'GroupsController', [\n        'middleware' => ['auth'],\n        'parameters' => ['group' => 'group_id']\n    ]);\n\n    Route::get('/', ['as' => 'settings.index', 'uses' => 'SettingsController@index' ]);\n\n\n});\n\n\n\n\n/*\n|--------------------------------------------------------------------------\n| Importer Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group([ 'prefix' => 'import', 'middleware' => ['auth']], function () {\n        Route::get('/', [\n                'as' => 'imports.index',\n                'uses' => 'ImportsController@index'\n        ]);\n});\n\n\n/*\n|--------------------------------------------------------------------------\n| Account Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group([ 'prefix' => 'account', 'middleware' => ['auth']], function () {\n\n    # Profile\n    Route::get('profile', [ 'as' => 'profile', 'uses' => 'ProfileController@getIndex' ]);\n    Route::post('profile', 'ProfileController@postIndex');\n\n    Route::get('menu', [ 'as' => 'account.menuprefs', 'uses' => 'ProfileController@getMenuState' ]);\n\n    Route::get('password', [ 'as' => 'account.password.index', 'uses' => 'ProfileController@password' ]);\n    Route::post('password', [ 'uses' => 'ProfileController@passwordSave' ]);\n\n    Route::get('api', [ 'as' => 'user.api', 'uses' => 'ProfileController@api' ]);\n\n    # View Assets\n    Route::get('view-assets', [ 'as' => 'view-assets', 'uses' => 'ViewAssetsController@getIndex' ]);\n\n    Route::get('requested', [ 'as' => 'account.requested', 'uses' => 'ViewAssetsController@getRequestedAssets' ]);\n\n    # Accept Asset\n    Route::get(\n        'accept-asset/{logID}',\n        [ 'as' => 'account/accept-assets', 'uses' => 'ViewAssetsController@getAcceptAsset' ]\n    );\n\n    # Profile\n    Route::get(\n        'requestable-assets',\n        [ 'as' => 'requestable-assets', 'uses' => 'ViewAssetsController@getRequestableIndex' ]\n    );\n    Route::post(\n        'request-asset/{assetId}',\n        [ 'as' => 'account/request-asset', 'uses' => 'ViewAssetsController@getRequestAsset' ]\n    );\n\n    Route::post(\n        'request/{itemType}/{itemId}',\n        [ 'as' => 'account/request-item', 'uses' => 'ViewAssetsController@getRequestItem']\n    );\n\n    # Account Dashboard\n    Route::get('/', [ 'as' => 'account', 'uses' => 'ViewAssetsController@getIndex' ]);\n\n\n    Route::get('accept', 'Account\\AcceptanceController@index')\n        ->name('account.accept');\n        \n    Route::get('accept/{id}', 'Account\\AcceptanceController@create')\n        ->name('account.accept.item');\n\n    Route::post('accept/{id}', 'Account\\AcceptanceController@store');        \n\n});\n\n\nRoute::group(['middleware' => ['auth']], function () {\n\n    Route::get('reports/audit', [\n        'as' => 'reports.audit',\n        'uses' => 'ReportsController@audit'\n    ]);\n\n    Route::get(\n        'reports/depreciation',\n        [ 'as' => 'reports/depreciation', 'uses' => 'ReportsController@getDeprecationReport' ]\n    );\n    Route::get(\n        'reports/export/depreciation',\n        [ 'as' => 'reports/export/depreciation', 'uses' => 'ReportsController@exportDeprecationReport' ]\n    );\n    Route::get(\n        'reports/asset_maintenances',\n        [ 'as' => 'reports/asset_maintenances', 'uses' => 'ReportsController@getAssetMaintenancesReport' ]\n    );\n    Route::get(\n        'reports/export/asset_maintenances',\n        [\n            'as'   => 'reports/export/asset_maintenances',\n            'uses' => 'ReportsController@exportAssetMaintenancesReport'\n        ]\n    );\n    Route::get(\n        'reports/licenses',\n        [ 'as' => 'reports/licenses', 'uses' => 'ReportsController@getLicenseReport' ]\n    );\n    Route::get(\n        'reports/export/licenses',\n        [ 'as' => 'reports/export/licenses', 'uses' => 'ReportsController@exportLicenseReport' ]\n    );\n\n    Route::get('reports/accessories', [ 'as' => 'reports/accessories', 'uses' => 'ReportsController@getAccessoryReport' ]);\n    Route::get(\n        'reports/export/accessories',\n        [ 'as' => 'reports/export/accessories', 'uses' => 'ReportsController@exportAccessoryReport' ]\n    );\n    Route::get('reports/custom', [ 'as' => 'reports/custom', 'uses' => 'ReportsController@getCustomReport' ]);\n    Route::post('reports/custom', 'ReportsController@postCustom');\n\n    Route::get(\n        'reports/activity',\n        [ 'as' => 'reports.activity', 'uses' => 'ReportsController@getActivityReport' ]\n    );\n\n    Route::post('reports/activity', 'ReportsController@postActivityReport');\n\n\n\n    Route::get(\n        'reports/unaccepted_assets',\n        [ 'as' => 'reports/unaccepted_assets', 'uses' => 'ReportsController@getAssetAcceptanceReport' ]\n    );\n    Route::get(\n        'reports/export/unaccepted_assets',\n        [ 'as' => 'reports/export/unaccepted_assets', 'uses' => 'ReportsController@exportAssetAcceptanceReport' ]\n    );\n});\n\nRoute::get(\n    'auth/signin',\n    ['uses' => 'Auth\\LoginController@legacyAuthRedirect' ]\n);\n\n\n\n\n/*\n|--------------------------------------------------------------------------\n| Setup Routes\n|--------------------------------------------------------------------------\n|\n|\n|\n*/\nRoute::group([ 'prefix' => 'setup', 'middleware' => 'web'], function () {\n    Route::get(\n        'user',\n        [\n        'as'  => 'setup.user',\n        'uses' => 'SettingsController@getSetupUser' ]\n    );\n\n    Route::post(\n        'user',\n        [\n        'as'  => 'setup.user.save',\n        'uses' => 'SettingsController@postSaveFirstAdmin' ]\n    );\n\n\n    Route::get(\n        'migrate',\n        [\n        'as'  => 'setup.migrate',\n        'uses' => 'SettingsController@getSetupMigrate' ]\n    );\n\n    Route::get(\n        'done',\n        [\n        'as'  => 'setup.done',\n        'uses' => 'SettingsController@getSetupDone' ]\n    );\n\n    Route::get(\n        'mailtest',\n        [\n        'as'  => 'setup.mailtest',\n        'uses' => 'SettingsController@ajaxTestEmail' ]\n    );\n\n\n    Route::get(\n        '/',\n        [\n        'as'  => 'setup',\n        'uses' => 'SettingsController@getSetupIndex' ]\n    );\n\n});\n\nRoute::get(\n    'two-factor-enroll',\n    [\n        'as' => 'two-factor-enroll',\n        'middleware' => ['web'],\n        'uses' => 'Auth\\LoginController@getTwoFactorEnroll' ]\n);\n\nRoute::get(\n    'two-factor',\n    [\n        'as' => 'two-factor',\n        'middleware' => ['web'],\n        'uses' => 'Auth\\LoginController@getTwoFactorAuth' ]\n);\n\nRoute::post(\n    'two-factor',\n    [\n        'as' => 'two-factor',\n        'middleware' => ['web'],\n        'uses' => 'Auth\\LoginController@postTwoFactorAuth' ]\n);\n\nRoute::get(\n    '/',\n    [\n    'as' => 'home',\n    'middleware' => ['auth'],\n    'uses' => 'DashboardController@getIndex' ]\n);\n\n\n\nRoute::group(['middleware' => 'web'], function () {\n    //Route::auth();\n    Route::get(\n        'login',\n        [\n            'as' => 'login',\n            'middleware' => ['web'],\n            'uses' => 'Auth\\LoginController@showLoginForm' ]\n    );\n\n    Route::post(\n        'login',\n        [\n            'as' => 'login',\n            'middleware' => ['web'],\n            'uses' => 'Auth\\LoginController@login' ]\n    );\n\n\n});\n\nAuth::routes();\n\nRoute::get('/health', [ 'as' => 'health', 'uses' => 'HealthController@get']);"], "filenames": ["app/Http/Controllers/ViewAssetsController.php", "resources/lang/en/admin/hardware/message.php", "resources/views/partials/bootstrap-table.blade.php", "routes/web.php"], "buggy_code_start_loc": [182, 80, 368, 264], "buggy_code_end_loc": [183, 81, 371, 265], "fixing_code_start_loc": [182, 80, 368, 264], "fixing_code_end_loc": [183, 81, 371, 265], "type": "CWE-352", "message": "snipe-it is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-4130", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-18T05:15:08.847", "lastModified": "2021-12-21T15:57:17.927", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "snipe-it is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "snipe-it es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.3.6", "matchCriteriaId": "A20E1796-CC9F-4351-9408-026A4D610DA8"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/9b2dd6522f214a3fbee6a4e32699104d0ea2b6ae", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ccf073cd-7f54-4d51-89f2-6b4a2e4ae81e", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/9b2dd6522f214a3fbee6a4e32699104d0ea2b6ae"}}