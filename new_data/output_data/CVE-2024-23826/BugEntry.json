{"buggy_code": ["# -*- coding: utf-8 -*-\n\nimport os\nimport json\nimport pathlib\n\nimport requests\n\nfrom PIL import Image\n\nfrom flask import session\nfrom flask_login import (\n    login_user,\n    login_required,\n    logout_user,\n    current_user,\n    LoginManager,\n)\nfrom flask import session, request, flash, render_template, redirect, url_for\nfrom google_auth_oauthlib.flow import Flow\nimport google.auth.transport.requests\nfrom google.oauth2 import id_token\nfrom pip._vendor import cachecontrol\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom flask_se_config import secure_filename\nfrom se_models import db, Users\n\n# Global variables\nUPLOAD_FOLDER = \"static/images/avatars/\"\nUPLOAD_TMP_FOLDER = \"static/tmp/avatars/\"\nALLOWED_EXTENSIONS = {\"bmp\", \"png\", \"jpg\", \"jpeg\"}\n\nlogin_manager = LoginManager()\nlogin_manager.login_view = \"login_index\"\n\n# create an alias of login_required decorator\nlogin_required = login_required\n\n\n# Google auth (https://github.com/code-specialist/flask_google_login/blob/main/app.py)\nos.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n\nGOOGLE_CLIENT_ID = (\n    \"593053078492-i6hf335m9hm0vtj23df62q09j07esbhu.apps.googleusercontent.com\"\n)\nclient_secrets_file = os.path.join(pathlib.Path(__file__).parent, \"client_google.json\")\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return Users.query.get(int(user_id))\n\n\n@login_manager.unauthorized_handler\ndef handle_needs_login():\n    flash(\"\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043e\u0439\u0442\u0438.\")\n    return redirect(url_for(\"login_index\", next=request.endpoint))\n\n\ndef redirect_next_url(fallback):\n    if \"next_url\" not in session:\n        redirect(fallback)\n\n    try:\n        dest_url = url_for(session[\"next_url\"])\n        return redirect(dest_url)\n    except:\n        return redirect(fallback)\n\n\ndef allowed_file(filename):\n    return \".\" in filename and filename.rsplit(\".\", 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\ndef login_index():\n    if current_user.is_authenticated:\n        return redirect(url_for(\"user_profile\"))\n\n    next_url = request.args.get(\"next\")\n\n    if next_url:\n        session[\"next_url\"] = next_url\n    else:\n        session.pop(\"next_url\", None)\n\n    if request.method == \"POST\":\n        email = request.form.get(\"email\")\n        password = request.form.get(\"password\")\n        user = Users.query.filter_by(email=email).first()\n        if user:\n            if (user.password_hash is not None) and check_password_hash(\n                user.password_hash, password\n            ):\n                login_user(user, remember=True)\n                return redirect_next_url(fallback=url_for(\"user_profile\"))\n            else:\n                flash(\"\u041f\u0430\u0440\u0430 \u043b\u043e\u0433\u0438\u043d \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u043d\u0435\u0432\u0435\u0440\u043d\u043e\", category=\"error\")\n                return render_template(\"auth/login.html\", user=current_user)\n        else:\n            flash(\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u043a\u0438\u043c \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u043d\u0435\u0442\", category=\"error\")\n            return render_template(\"auth/login.html\", user=current_user)\n\n    return render_template(\"auth/login.html\", user=current_user)\n\n\n# https://vk.com/dev/authcode_flow_user\ndef vk_callback():\n    user_code = request.args.get(\"code\")\n\n    if not user_code:\n        return redirect(url_for(\"index\"))\n\n    # Get access token\n    response = requests.get(\n        \"https://oauth.vk.com/access_token?client_id=8051225&client_secret=ZPNX8y5nQmzGCghUKdJ9&redirect_uri=https://se.math.spbu.ru/vk_callback&code=\"\n        + user_code\n    )\n    access_token_json = json.loads(response.text)\n\n    if \"error\" in access_token_json:\n        return redirect(url_for(\"index\"))\n\n    print(access_token_json)\n\n    vk_id = access_token_json[\"user_id\"]\n    access_token = access_token_json[\"access_token\"]\n    vk_email = access_token_json[\"email\"]\n\n    # Get user name\n    response = requests.get(\n        \"https://api.vk.com/method/users.get?user_ids=\"\n        + str(vk_id)\n        + \"&fields=photo_100&access_token=\"\n        + str(access_token)\n        + \"&v=5.130\"\n    )\n    vk_user = json.loads(response.text)\n\n    user = Users.query.filter_by(vk_id=vk_id).first()\n\n    # New user?\n    if user is None:\n        # Yes\n        try:\n            avatar_uri = os.urandom(16).hex()\n            avatar_uri = avatar_uri + \".jpg\"\n\n            if \"photo_100\" in vk_user[\"response\"][0]:\n                r = requests.get(\n                    vk_user[\"response\"][0][\"photo_100\"], allow_redirects=True\n                )\n                open(\"static/images/avatars/\" + avatar_uri, \"wb\").write(r.content)\n\n            new_user = Users(\n                last_name=vk_user[\"response\"][0][\"last_name\"],\n                first_name=vk_user[\"response\"][0][\"first_name\"],\n                avatar_uri=avatar_uri,\n                email=vk_email,\n                vk_id=vk_id,\n            )\n            db.session.add(new_user)\n            db.session.commit()\n        except SQLAlchemyError as e:\n            db.session.rollback()\n            error = str(e.__dict__[\"orig\"])\n            print(error)\n            print(\"Can't add new user to the Database\")\n            flash(error, category=\"error\")\n            return redirect(url_for(\"login_index\"))\n\n        user = Users.query.filter_by(vk_id=vk_id).first()\n\n    login_user(user, remember=True)\n    return redirect_next_url(fallback=url_for(\"user_profile\"))\n\n\ndef register_basic():\n    if request.method == \"POST\":\n        email = request.form.get(\"email\").strip()\n        password = request.form.get(\"password\")\n        first_name = request.form.get(\"first_name\").strip()\n\n        user = Users.query.filter_by(email=email).first()\n        if user:\n            flash(\"\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d.\", category=\"error\")\n        elif len(email) < 5:\n            flash(\"\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\", category=\"error\")\n        elif len(password) < 5:\n            flash(\"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\", category=\"error\")\n        elif len(first_name) < 1:\n            flash(\"\u0418\u043c\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c\")\n        else:\n            new_user = Users(\n                email=email,\n                first_name=first_name,\n                password_hash=generate_password_hash(password, method=\"sha256\"),\n            )\n            db.session.add(new_user)\n            db.session.commit()\n            login_user(new_user, remember=True)\n            return redirect(url_for(\"user_profile\"))\n\n    return render_template(\"auth/register_basic.html\", user=current_user)\n\n\ndef password_recovery():\n    return render_template(\"password_recovery.html\")\n\n\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for(\"index\"))\n\n\n@login_required\ndef user_profile():\n    user = Users.query.filter_by(id=current_user.id).first()\n\n    if request.method == \"POST\":\n        last_name = request.form.get(\"last_name\").strip()\n        first_name = request.form.get(\"first_name\").strip()\n        middle_name = request.form.get(\"middle_name\").strip()\n        how_to_contact = request.form.get(\"how_to_contact\").strip()\n\n        if first_name:\n            user.first_name = first_name\n            user.middle_name = middle_name\n            user.last_name = last_name\n            user.how_to_contact = how_to_contact\n            db.session.commit()\n\n    return render_template(\"auth/profile.html\", user=user)\n\n\n@login_required\ndef upload_avatar():\n    if request.method == \"POST\":\n        # check if the post request has the file part\n        if \"file\" not in request.files:\n            flash(\"No file part\")\n            return redirect(request.url)\n        file = request.files[\"file\"]\n        # If the user does not select a file, the browser submits an\n        # empty file without a filename.\n        if file.filename == \"\":\n            flash(\"No selected file\")\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            new_filename = os.urandom(16).hex()\n            f, ext = os.path.splitext(filename)\n\n            if ext in [\".jpg\", \".jpeg\"]:\n                file.save(os.path.join(UPLOAD_FOLDER + \"/\" + new_filename + \".jpg\"))\n            else:\n                try:\n                    file.save(\n                        os.path.join(UPLOAD_TMP_FOLDER + \"/\" + new_filename + ext)\n                    )\n                    with Image.open(UPLOAD_TMP_FOLDER + \"/\" + new_filename + ext) as im:\n                        rgb_im = im.convert(\"RGB\")\n                        rgb_im.save(UPLOAD_FOLDER + \"/\" + new_filename + \".jpg\")\n                        os.unlink(UPLOAD_TMP_FOLDER + \"/\" + new_filename + ext)\n                except OSError:\n                    print(\"cannot convert\", new_filename + \".jpg\")\n\n            user = Users.query.filter_by(id=current_user.id).first()\n\n            # If user have avatar -> remove it from disk\n            new_full_filename = new_filename + \".jpg\"\n            if user.avatar_uri != \"empty.jpg\":\n                if os.path.isfile(UPLOAD_FOLDER + \"/\" + user.avatar_uri):\n                    os.unlink(UPLOAD_FOLDER + \"/\" + user.avatar_uri)\n\n            user.avatar_uri = new_full_filename\n            db.session.commit()\n\n    return \"\", 204\n\n\ndef google_login():\n    flow = Flow.from_client_secrets_file(\n        client_secrets_file=client_secrets_file,\n        scopes=[\n            \"https://www.googleapis.com/auth/userinfo.profile\",\n            \"https://www.googleapis.com/auth/userinfo.email\",\n            \"openid\",\n        ],\n    )\n\n    flow.redirect_uri = url_for(\"google_callback\", _external=True)\n    authorization_url, state = flow.authorization_url(\n        access_type=\"offline\", include_granted_scopes=\"true\"\n    )\n    session[\"state\"] = state\n    return redirect(authorization_url)\n\n\ndef google_callback():\n    state = session[\"state\"]\n    print(request.args.get(\"state\"), session)\n\n    if not state:\n        redirect(url_for(\"login_index\"))\n\n    flow = Flow.from_client_secrets_file(\n        client_secrets_file=client_secrets_file,\n        scopes=[\n            \"https://www.googleapis.com/auth/userinfo.profile\",\n            \"https://www.googleapis.com/auth/userinfo.email\",\n            \"openid\",\n        ],\n    )\n\n    flow.redirect_uri = url_for(\"google_callback\", _external=True)\n    flow.fetch_token(authorization_response=request.url)\n\n    credentials = flow.credentials\n    request_session = requests.session()\n    cached_session = cachecontrol.CacheControl(request_session)\n    token_request = google.auth.transport.requests.Request(session=cached_session)\n\n    id_info = id_token.verify_oauth2_token(\n        id_token=credentials._id_token,\n        request=token_request,\n        audience=GOOGLE_CLIENT_ID,\n        clock_skew_in_seconds=60,\n    )\n\n    user = Users.query.filter_by(google_id=id_info.get(\"sub\")).first()\n\n    # New user?\n    if user is None:\n        # Yes\n        try:\n            avatar_uri = os.urandom(16).hex()\n            avatar_uri = avatar_uri + \".jpg\"\n\n            if \"picture\" in id_info:\n                r = requests.get(id_info.get(\"picture\"), allow_redirects=True)\n                open(\"static/images/avatars/\" + avatar_uri, \"wb\").write(r.content)\n\n            new_user = Users(\n                last_name=id_info.get(\"family_name\"),\n                first_name=id_info.get(\"given_name\"),\n                avatar_uri=avatar_uri,\n                google_id=id_info.get(\"sub\"),\n                email=id_info.get(\"email\"),\n            )\n            db.session.add(new_user)\n            db.session.commit()\n        except SQLAlchemyError as e:\n            db.session.rollback()\n            error = str(e.__dict__[\"orig\"])\n            print(error)\n            print(\"Can't add new user to Database\")\n            flash(error, category=\"error\")\n            return redirect(url_for(\"login_index\"))\n\n        user = Users.query.filter_by(google_id=id_info.get(\"sub\")).first()\n\n    login_user(user, remember=True)\n    return redirect_next_url(fallback=url_for(\"user_profile\"))\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n\nimport os\nimport json\nimport pathlib\n\nimport requests\n\nfrom PIL import Image\n\nfrom flask import session\nfrom flask_login import (\n    login_user,\n    login_required,\n    logout_user,\n    current_user,\n    LoginManager,\n)\nfrom flask import session, request, flash, render_template, redirect, url_for\nfrom google_auth_oauthlib.flow import Flow\nimport google.auth.transport.requests\nfrom google.oauth2 import id_token\nfrom pip._vendor import cachecontrol\nfrom sqlalchemy.exc import SQLAlchemyError\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nfrom flask_se_config import secure_filename\nfrom se_models import db, Users\n\n# Global variables\nUPLOAD_FOLDER = \"static/images/avatars/\"\nUPLOAD_TMP_FOLDER = \"static/tmp/avatars/\"\nALLOWED_EXTENSIONS = {\"bmp\", \"png\", \"jpg\", \"jpeg\"}\n\nlogin_manager = LoginManager()\nlogin_manager.login_view = \"login_index\"\n\n# create an alias of login_required decorator\nlogin_required = login_required\n\n\n# Google auth (https://github.com/code-specialist/flask_google_login/blob/main/app.py)\nos.environ[\"OAUTHLIB_INSECURE_TRANSPORT\"] = \"1\"\n\nGOOGLE_CLIENT_ID = (\n    \"593053078492-i6hf335m9hm0vtj23df62q09j07esbhu.apps.googleusercontent.com\"\n)\nclient_secrets_file = os.path.join(pathlib.Path(__file__).parent, \"client_google.json\")\n\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return Users.query.get(int(user_id))\n\n\n@login_manager.unauthorized_handler\ndef handle_needs_login():\n    flash(\"\u0414\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u044d\u0442\u043e\u0433\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u043e\u0439\u0442\u0438.\")\n    return redirect(url_for(\"login_index\", next=request.endpoint))\n\n\ndef redirect_next_url(fallback):\n    if \"next_url\" not in session:\n        redirect(fallback)\n\n    try:\n        dest_url = url_for(session[\"next_url\"])\n        return redirect(dest_url)\n    except:\n        return redirect(fallback)\n\n\ndef allowed_file(filename):\n    return \".\" in filename and filename.rsplit(\".\", 1)[1].lower() in ALLOWED_EXTENSIONS\n\n\ndef login_index():\n    if current_user.is_authenticated:\n        return redirect(url_for(\"user_profile\"))\n\n    next_url = request.args.get(\"next\")\n\n    if next_url:\n        session[\"next_url\"] = next_url\n    else:\n        session.pop(\"next_url\", None)\n\n    if request.method == \"POST\":\n        email = request.form.get(\"email\")\n        password = request.form.get(\"password\")\n        user = Users.query.filter_by(email=email).first()\n        if user:\n            if (user.password_hash is not None) and check_password_hash(\n                user.password_hash, password\n            ):\n                login_user(user, remember=True)\n                return redirect_next_url(fallback=url_for(\"user_profile\"))\n            else:\n                flash(\"\u041f\u0430\u0440\u0430 \u043b\u043e\u0433\u0438\u043d \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u043d\u0435\u0432\u0435\u0440\u043d\u043e\", category=\"error\")\n                return render_template(\"auth/login.html\", user=current_user)\n        else:\n            flash(\"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0441 \u0442\u0430\u043a\u0438\u043c \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u043d\u0435\u0442\", category=\"error\")\n            return render_template(\"auth/login.html\", user=current_user)\n\n    return render_template(\"auth/login.html\", user=current_user)\n\n\n# https://vk.com/dev/authcode_flow_user\ndef vk_callback():\n    user_code = request.args.get(\"code\")\n\n    if not user_code:\n        return redirect(url_for(\"index\"))\n\n    # Get access token\n    response = requests.get(\n        \"https://oauth.vk.com/access_token?client_id=8051225&client_secret=ZPNX8y5nQmzGCghUKdJ9&redirect_uri=https://se.math.spbu.ru/vk_callback&code=\"\n        + user_code\n    )\n    access_token_json = json.loads(response.text)\n\n    if \"error\" in access_token_json:\n        return redirect(url_for(\"index\"))\n\n    print(access_token_json)\n\n    vk_id = access_token_json[\"user_id\"]\n    access_token = access_token_json[\"access_token\"]\n    vk_email = access_token_json[\"email\"]\n\n    # Get user name\n    response = requests.get(\n        \"https://api.vk.com/method/users.get?user_ids=\"\n        + str(vk_id)\n        + \"&fields=photo_100&access_token=\"\n        + str(access_token)\n        + \"&v=5.130\"\n    )\n    vk_user = json.loads(response.text)\n\n    user = Users.query.filter_by(vk_id=vk_id).first()\n\n    # New user?\n    if user is None:\n        # Yes\n        try:\n            avatar_uri = os.urandom(16).hex()\n            avatar_uri = avatar_uri + \".jpg\"\n\n            if \"photo_100\" in vk_user[\"response\"][0]:\n                r = requests.get(\n                    vk_user[\"response\"][0][\"photo_100\"], allow_redirects=True\n                )\n                open(\"static/images/avatars/\" + avatar_uri, \"wb\").write(r.content)\n\n            new_user = Users(\n                last_name=vk_user[\"response\"][0][\"last_name\"],\n                first_name=vk_user[\"response\"][0][\"first_name\"],\n                avatar_uri=avatar_uri,\n                email=vk_email,\n                vk_id=vk_id,\n            )\n            db.session.add(new_user)\n            db.session.commit()\n        except SQLAlchemyError as e:\n            db.session.rollback()\n            error = str(e.__dict__[\"orig\"])\n            print(error)\n            print(\"Can't add new user to the Database\")\n            flash(error, category=\"error\")\n            return redirect(url_for(\"login_index\"))\n\n        user = Users.query.filter_by(vk_id=vk_id).first()\n\n    login_user(user, remember=True)\n    return redirect_next_url(fallback=url_for(\"user_profile\"))\n\n\ndef register_basic():\n    if request.method == \"POST\":\n        email = request.form.get(\"email\").strip()\n        password = request.form.get(\"password\")\n        first_name = request.form.get(\"first_name\").strip()\n\n        user = Users.query.filter_by(email=email).first()\n        if user:\n            flash(\"\u0422\u0430\u043a\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0443\u0436\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d.\", category=\"error\")\n        elif len(email) < 5:\n            flash(\"\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\", category=\"error\")\n        elif len(password) < 5:\n            flash(\"\u041f\u0430\u0440\u043e\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c 5 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\", category=\"error\")\n        elif len(first_name) < 1:\n            flash(\"\u0418\u043c\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c\")\n        else:\n            new_user = Users(\n                email=email,\n                first_name=first_name,\n                password_hash=generate_password_hash(password, method=\"sha256\"),\n            )\n            db.session.add(new_user)\n            db.session.commit()\n            login_user(new_user, remember=True)\n            return redirect(url_for(\"user_profile\"))\n\n    return render_template(\"auth/register_basic.html\", user=current_user)\n\n\ndef password_recovery():\n    return render_template(\"password_recovery.html\")\n\n\n@login_required\ndef logout():\n    logout_user()\n    return redirect(url_for(\"index\"))\n\n\n@login_required\ndef user_profile():\n    user = Users.query.filter_by(id=current_user.id).first()\n\n    if request.method == \"POST\":\n        last_name = request.form.get(\"last_name\").strip()\n        first_name = request.form.get(\"first_name\").strip()\n        middle_name = request.form.get(\"middle_name\").strip()\n        how_to_contact = request.form.get(\"how_to_contact\").strip()\n\n        if first_name:\n            user.first_name = first_name\n            user.middle_name = middle_name\n            user.last_name = last_name\n            user.how_to_contact = how_to_contact\n            db.session.commit()\n\n    return render_template(\"auth/profile.html\", user=user)\n\n\n@login_required\ndef upload_avatar():\n    if request.method == \"POST\":\n        # check if the post request has the file part\n        if \"file\" not in request.files:\n            flash(\"No file part\")\n            return redirect(request.url)\n        file = request.files[\"file\"]\n        # If the user does not select a file, the browser submits an\n        # empty file without a filename.\n        if file.filename == \"\":\n            flash(\"No selected file\")\n            return redirect(request.url)\n        # Sanity check: limit uploadable filename\n        # to avoid excessive burden to NFKD normalization\n        # in secure_filename() method\n        if len(file.filename) > 1000:\n            flash(\"Filename too long\")\n            return redirect(request.url)\n        if file and allowed_file(file.filename):\n            filename = secure_filename(file.filename)\n            new_filename = os.urandom(16).hex()\n            f, ext = os.path.splitext(filename)\n\n            if ext in [\".jpg\", \".jpeg\"]:\n                file.save(os.path.join(UPLOAD_FOLDER + \"/\" + new_filename + \".jpg\"))\n            else:\n                try:\n                    file.save(\n                        os.path.join(UPLOAD_TMP_FOLDER + \"/\" + new_filename + ext)\n                    )\n                    with Image.open(UPLOAD_TMP_FOLDER + \"/\" + new_filename + ext) as im:\n                        rgb_im = im.convert(\"RGB\")\n                        rgb_im.save(UPLOAD_FOLDER + \"/\" + new_filename + \".jpg\")\n                        os.unlink(UPLOAD_TMP_FOLDER + \"/\" + new_filename + ext)\n                except OSError:\n                    print(\"cannot convert\", new_filename + \".jpg\")\n\n            user = Users.query.filter_by(id=current_user.id).first()\n\n            # If user have avatar -> remove it from disk\n            new_full_filename = new_filename + \".jpg\"\n            if user.avatar_uri != \"empty.jpg\":\n                if os.path.isfile(UPLOAD_FOLDER + \"/\" + user.avatar_uri):\n                    os.unlink(UPLOAD_FOLDER + \"/\" + user.avatar_uri)\n\n            user.avatar_uri = new_full_filename\n            db.session.commit()\n\n    return \"\", 204\n\n\ndef google_login():\n    flow = Flow.from_client_secrets_file(\n        client_secrets_file=client_secrets_file,\n        scopes=[\n            \"https://www.googleapis.com/auth/userinfo.profile\",\n            \"https://www.googleapis.com/auth/userinfo.email\",\n            \"openid\",\n        ],\n    )\n\n    flow.redirect_uri = url_for(\"google_callback\", _external=True)\n    authorization_url, state = flow.authorization_url(\n        access_type=\"offline\", include_granted_scopes=\"true\"\n    )\n    session[\"state\"] = state\n    return redirect(authorization_url)\n\n\ndef google_callback():\n    state = session[\"state\"]\n    print(request.args.get(\"state\"), session)\n\n    if not state:\n        redirect(url_for(\"login_index\"))\n\n    flow = Flow.from_client_secrets_file(\n        client_secrets_file=client_secrets_file,\n        scopes=[\n            \"https://www.googleapis.com/auth/userinfo.profile\",\n            \"https://www.googleapis.com/auth/userinfo.email\",\n            \"openid\",\n        ],\n    )\n\n    flow.redirect_uri = url_for(\"google_callback\", _external=True)\n    flow.fetch_token(authorization_response=request.url)\n\n    credentials = flow.credentials\n    request_session = requests.session()\n    cached_session = cachecontrol.CacheControl(request_session)\n    token_request = google.auth.transport.requests.Request(session=cached_session)\n\n    id_info = id_token.verify_oauth2_token(\n        id_token=credentials._id_token,\n        request=token_request,\n        audience=GOOGLE_CLIENT_ID,\n        clock_skew_in_seconds=60,\n    )\n\n    user = Users.query.filter_by(google_id=id_info.get(\"sub\")).first()\n\n    # New user?\n    if user is None:\n        # Yes\n        try:\n            avatar_uri = os.urandom(16).hex()\n            avatar_uri = avatar_uri + \".jpg\"\n\n            if \"picture\" in id_info:\n                r = requests.get(id_info.get(\"picture\"), allow_redirects=True)\n                open(\"static/images/avatars/\" + avatar_uri, \"wb\").write(r.content)\n\n            new_user = Users(\n                last_name=id_info.get(\"family_name\"),\n                first_name=id_info.get(\"given_name\"),\n                avatar_uri=avatar_uri,\n                google_id=id_info.get(\"sub\"),\n                email=id_info.get(\"email\"),\n            )\n            db.session.add(new_user)\n            db.session.commit()\n        except SQLAlchemyError as e:\n            db.session.rollback()\n            error = str(e.__dict__[\"orig\"])\n            print(error)\n            print(\"Can't add new user to Database\")\n            flash(error, category=\"error\")\n            return redirect(url_for(\"login_index\"))\n\n        user = Users.query.filter_by(google_id=id_info.get(\"sub\")).first()\n\n    login_user(user, remember=True)\n    return redirect_next_url(fallback=url_for(\"user_profile\"))\n"], "filenames": ["src/flask_se_auth.py"], "buggy_code_start_loc": [250], "buggy_code_end_loc": [250], "fixing_code_start_loc": [251], "fixing_code_end_loc": [257], "type": "CWE-770", "message": "spbu_se_site is the website of the Department of System Programming of St. Petersburg State University. Before 2024.01.29, when uploading an avatar image, an authenticated user may intentionally use a large Unicode filename which would lead to a server-side denial of service under Windows. This is due to no limitation of the length of the filename and the costly use of the Unicode normalization with the form NFKD on Windows OS.  This vulnerability was fixed in the 2024.01.29 release.", "other": {"cve": {"id": "CVE-2024-23826", "sourceIdentifier": "security-advisories@github.com", "published": "2024-01-29T16:15:09.640", "lastModified": "2024-02-08T16:43:13.403", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "spbu_se_site is the website of the Department of System Programming of St. Petersburg State University. Before 2024.01.29, when uploading an avatar image, an authenticated user may intentionally use a large Unicode filename which would lead to a server-side denial of service under Windows. This is due to no limitation of the length of the filename and the costly use of the Unicode normalization with the form NFKD on Windows OS.  This vulnerability was fixed in the 2024.01.29 release."}, {"lang": "es", "value": "spbu_se_site es el sitio web del Departamento de Programaci\u00f3n de Sistemas de la Universidad Estatal de San Petersburgo. Antes del 29/01/2024, al cargar una imagen de avatar, un usuario autenticado puede utilizar intencionalmente un nombre de archivo Unicode grande, lo que provocar\u00eda una denegaci\u00f3n de servicio del lado del servidor en Windows. Esto se debe a la falta de limitaci\u00f3n de la longitud del nombre del archivo y al costoso uso de la normalizaci\u00f3n Unicode con el formato NFKD en el sistema operativo Windows. Esta vulnerabilidad se solucion\u00f3 en la versi\u00f3n 2024.01.29."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-770"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:se.math.spbu:spbu_se_site:*:*:*:*:*:*:*:*", "versionEndExcluding": "2024.01.29", "matchCriteriaId": "1FF8CD3A-E3DF-4A93-BE6F-8057AD60ED84"}]}]}], "references": [{"url": "https://github.com/spbu-se/spbu_se_site/commit/5ad623eb0405260763046343c5785bc588d8a57d", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/spbu-se/spbu_se_site/security/advisories/GHSA-5vfc-v7hg-pvwm", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/spbu-se/spbu_se_site/commit/5ad623eb0405260763046343c5785bc588d8a57d"}}