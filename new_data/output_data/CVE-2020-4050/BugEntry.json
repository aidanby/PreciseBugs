{"buggy_code": ["<?php\n/**\n * Misc WordPress Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/**\n * Returns whether the server is running Apache with the mod_rewrite module loaded.\n *\n * @since 2.0.0\n *\n * @return bool Whether the server is running Apache with the mod_rewrite module loaded.\n */\nfunction got_mod_rewrite() {\n\t$got_rewrite = apache_mod_loaded( 'mod_rewrite', true );\n\n\t/**\n\t * Filters whether Apache and mod_rewrite are present.\n\t *\n\t * This filter was previously used to force URL rewriting for other servers,\n\t * like nginx. Use the {@see 'got_url_rewrite'} filter in got_url_rewrite() instead.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @see got_url_rewrite()\n\t *\n\t * @param bool $got_rewrite Whether Apache and mod_rewrite are present.\n\t */\n\treturn apply_filters( 'got_rewrite', $got_rewrite );\n}\n\n/**\n * Returns whether the server supports URL rewriting.\n *\n * Detects Apache's mod_rewrite, IIS 7.0+ permalink support, and nginx.\n *\n * @since 3.7.0\n *\n * @global bool $is_nginx\n *\n * @return bool Whether the server supports URL rewriting.\n */\nfunction got_url_rewrite() {\n\t$got_url_rewrite = ( got_mod_rewrite() || $GLOBALS['is_nginx'] || iis7_supports_permalinks() );\n\n\t/**\n\t * Filters whether URL rewriting is available.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param bool $got_url_rewrite Whether URL rewriting is available.\n\t */\n\treturn apply_filters( 'got_url_rewrite', $got_url_rewrite );\n}\n\n/**\n * Extracts strings from between the BEGIN and END markers in the .htaccess file.\n *\n * @since 1.5.0\n *\n * @param string $filename Filename to extract the strings from.\n * @param string $marker   The marker to extract the strings from.\n * @return string[] An array of strings from a file (.htaccess) from between BEGIN and END markers.\n */\nfunction extract_from_markers( $filename, $marker ) {\n\t$result = array();\n\n\tif ( ! file_exists( $filename ) ) {\n\t\treturn $result;\n\t}\n\n\t$markerdata = explode( \"\\n\", implode( '', file( $filename ) ) );\n\n\t$state = false;\n\tforeach ( $markerdata as $markerline ) {\n\t\tif ( false !== strpos( $markerline, '# END ' . $marker ) ) {\n\t\t\t$state = false;\n\t\t}\n\t\tif ( $state ) {\n\t\t\tif ( '#' === substr( $markerline, 0, 1 ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$result[] = $markerline;\n\t\t}\n\t\tif ( false !== strpos( $markerline, '# BEGIN ' . $marker ) ) {\n\t\t\t$state = true;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n/**\n * Inserts an array of strings into a file (.htaccess), placing it between\n * BEGIN and END markers.\n *\n * Replaces existing marked info. Retains surrounding\n * data. Creates file if none exists.\n *\n * @since 1.5.0\n *\n * @param string       $filename  Filename to alter.\n * @param string       $marker    The marker to alter.\n * @param array|string $insertion The new content to insert.\n * @return bool True on write success, false on failure.\n */\nfunction insert_with_markers( $filename, $marker, $insertion ) {\n\tif ( ! file_exists( $filename ) ) {\n\t\tif ( ! is_writable( dirname( $filename ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! touch( $filename ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure the file is created with a minimum set of permissions.\n\t\t$perms = fileperms( $filename );\n\t\tif ( $perms ) {\n\t\t\tchmod( $filename, $perms | 0644 );\n\t\t}\n\t} elseif ( ! is_writeable( $filename ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! is_array( $insertion ) ) {\n\t\t$insertion = explode( \"\\n\", $insertion );\n\t}\n\n\t$switched_locale = switch_to_locale( get_locale() );\n\n\t$instructions = sprintf(\n\t\t/* translators: 1: Marker. */\n\t\t__(\n\t\t\t'The directives (lines) between `BEGIN %1$s` and `END %1$s` are\ndynamically generated, and should only be modified via WordPress filters.\nAny changes to the directives between these markers will be overwritten.'\n\t\t),\n\t\t$marker\n\t);\n\n\t$instructions = explode( \"\\n\", $instructions );\n\tforeach ( $instructions as $line => $text ) {\n\t\t$instructions[ $line ] = '# ' . $text;\n\t}\n\n\t/**\n\t * Filters the inline instructions inserted before the dynamically generated content.\n\t *\n\t * @since 5.3.0\n\t *\n\t * @param string[] $instructions Array of lines with inline instructions.\n\t * @param string   $marker       The marker being inserted.\n\t */\n\t$instructions = apply_filters( 'insert_with_markers_inline_instructions', $instructions, $marker );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t$insertion = array_merge( $instructions, $insertion );\n\n\t$start_marker = \"# BEGIN {$marker}\";\n\t$end_marker   = \"# END {$marker}\";\n\n\t$fp = fopen( $filename, 'r+' );\n\tif ( ! $fp ) {\n\t\treturn false;\n\t}\n\n\t// Attempt to get a lock. If the filesystem supports locking, this will block until the lock is acquired.\n\tflock( $fp, LOCK_EX );\n\n\t$lines = array();\n\twhile ( ! feof( $fp ) ) {\n\t\t$lines[] = rtrim( fgets( $fp ), \"\\r\\n\" );\n\t}\n\n\t// Split out the existing file into the preceding lines, and those that appear after the marker.\n\t$pre_lines        = array();\n\t$post_lines       = array();\n\t$existing_lines   = array();\n\t$found_marker     = false;\n\t$found_end_marker = false;\n\tforeach ( $lines as $line ) {\n\t\tif ( ! $found_marker && false !== strpos( $line, $start_marker ) ) {\n\t\t\t$found_marker = true;\n\t\t\tcontinue;\n\t\t} elseif ( ! $found_end_marker && false !== strpos( $line, $end_marker ) ) {\n\t\t\t$found_end_marker = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif ( ! $found_marker ) {\n\t\t\t$pre_lines[] = $line;\n\t\t} elseif ( $found_marker && $found_end_marker ) {\n\t\t\t$post_lines[] = $line;\n\t\t} else {\n\t\t\t$existing_lines[] = $line;\n\t\t}\n\t}\n\n\t// Check to see if there was a change.\n\tif ( $existing_lines === $insertion ) {\n\t\tflock( $fp, LOCK_UN );\n\t\tfclose( $fp );\n\n\t\treturn true;\n\t}\n\n\t// Generate the new file data.\n\t$new_file_data = implode(\n\t\t\"\\n\",\n\t\tarray_merge(\n\t\t\t$pre_lines,\n\t\t\tarray( $start_marker ),\n\t\t\t$insertion,\n\t\t\tarray( $end_marker ),\n\t\t\t$post_lines\n\t\t)\n\t);\n\n\t// Write to the start of the file, and truncate it to that length.\n\tfseek( $fp, 0 );\n\t$bytes = fwrite( $fp, $new_file_data );\n\tif ( $bytes ) {\n\t\tftruncate( $fp, ftell( $fp ) );\n\t}\n\tfflush( $fp );\n\tflock( $fp, LOCK_UN );\n\tfclose( $fp );\n\n\treturn (bool) $bytes;\n}\n\n/**\n * Updates the htaccess file with the current rules if it is writable.\n *\n * Always writes to the file if it exists and is writable to ensure that we\n * blank out old rules.\n *\n * @since 1.5.0\n *\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @return bool|null True on write success, false on failure. Null in multisite.\n */\nfunction save_mod_rewrite_rules() {\n\tif ( is_multisite() ) {\n\t\treturn;\n\t}\n\n\tglobal $wp_rewrite;\n\n\t// Ensure get_home_path() is declared.\n\trequire_once ABSPATH . 'wp-admin/includes/file.php';\n\n\t$home_path     = get_home_path();\n\t$htaccess_file = $home_path . '.htaccess';\n\n\t/*\n\t * If the file doesn't already exist check for write access to the directory\n\t * and whether we have some rules. Else check for write access to the file.\n\t */\n\tif ( ( ! file_exists( $htaccess_file ) && is_writable( $home_path ) && $wp_rewrite->using_mod_rewrite_permalinks() ) || is_writable( $htaccess_file ) ) {\n\t\tif ( got_mod_rewrite() ) {\n\t\t\t$rules = explode( \"\\n\", $wp_rewrite->mod_rewrite_rules() );\n\t\t\treturn insert_with_markers( $htaccess_file, 'WordPress', $rules );\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Updates the IIS web.config file with the current rules if it is writable.\n * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file.\n *\n * @since 2.8.0\n *\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @return bool|null True on write success, false on failure. Null in multisite.\n */\nfunction iis7_save_url_rewrite_rules() {\n\tif ( is_multisite() ) {\n\t\treturn;\n\t}\n\n\tglobal $wp_rewrite;\n\n\t// Ensure get_home_path() is declared.\n\trequire_once ABSPATH . 'wp-admin/includes/file.php';\n\n\t$home_path       = get_home_path();\n\t$web_config_file = $home_path . 'web.config';\n\n\t// Using win_is_writable() instead of is_writable() because of a bug in Windows PHP.\n\tif ( iis7_supports_permalinks() && ( ( ! file_exists( $web_config_file ) && win_is_writable( $home_path ) && $wp_rewrite->using_mod_rewrite_permalinks() ) || win_is_writable( $web_config_file ) ) ) {\n\t\t$rule = $wp_rewrite->iis7_url_rewrite_rules( false );\n\t\tif ( ! empty( $rule ) ) {\n\t\t\treturn iis7_add_rewrite_rule( $web_config_file, $rule );\n\t\t} else {\n\t\t\treturn iis7_delete_rewrite_rule( $web_config_file );\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Update the \"recently-edited\" file for the plugin or theme editor.\n *\n * @since 1.5.0\n *\n * @param string $file\n */\nfunction update_recently_edited( $file ) {\n\t$oldfiles = (array) get_option( 'recently_edited' );\n\tif ( $oldfiles ) {\n\t\t$oldfiles   = array_reverse( $oldfiles );\n\t\t$oldfiles[] = $file;\n\t\t$oldfiles   = array_reverse( $oldfiles );\n\t\t$oldfiles   = array_unique( $oldfiles );\n\t\tif ( 5 < count( $oldfiles ) ) {\n\t\t\tarray_pop( $oldfiles );\n\t\t}\n\t} else {\n\t\t$oldfiles[] = $file;\n\t}\n\tupdate_option( 'recently_edited', $oldfiles );\n}\n\n/**\n * Makes a tree structure for the theme editor's file list.\n *\n * @since 4.9.0\n * @access private\n *\n * @param array $allowed_files List of theme file paths.\n * @return array Tree structure for listing theme files.\n */\nfunction wp_make_theme_file_tree( $allowed_files ) {\n\t$tree_list = array();\n\tforeach ( $allowed_files as $file_name => $absolute_filename ) {\n\t\t$list     = explode( '/', $file_name );\n\t\t$last_dir = &$tree_list;\n\t\tforeach ( $list as $dir ) {\n\t\t\t$last_dir =& $last_dir[ $dir ];\n\t\t}\n\t\t$last_dir = $file_name;\n\t}\n\treturn $tree_list;\n}\n\n/**\n * Outputs the formatted file list for the theme editor.\n *\n * @since 4.9.0\n * @access private\n *\n * @global string $relative_file Name of the file being edited relative to the\n *                               theme directory.\n * @global string $stylesheet    The stylesheet name of the theme being edited.\n *\n * @param array|string $tree  List of file/folder paths, or filename.\n * @param int          $level The aria-level for the current iteration.\n * @param int          $size  The aria-setsize for the current iteration.\n * @param int          $index The aria-posinset for the current iteration.\n */\nfunction wp_print_theme_file_tree( $tree, $level = 2, $size = 1, $index = 1 ) {\n\tglobal $relative_file, $stylesheet;\n\n\tif ( is_array( $tree ) ) {\n\t\t$index = 0;\n\t\t$size  = count( $tree );\n\t\tforeach ( $tree as $label => $theme_file ) :\n\t\t\t$index++;\n\t\t\tif ( ! is_array( $theme_file ) ) {\n\t\t\t\twp_print_theme_file_tree( $theme_file, $level, $index, $size );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t?>\n\t\t\t<li role=\"treeitem\" aria-expanded=\"true\" tabindex=\"-1\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<span class=\"folder-label\"><?php echo esc_html( $label ); ?> <span class=\"screen-reader-text\"><?php _e( 'folder' ); ?></span><span aria-hidden=\"true\" class=\"icon\"></span></span>\n\t\t\t\t<ul role=\"group\" class=\"tree-folder\"><?php wp_print_theme_file_tree( $theme_file, $level + 1, $index, $size ); ?></ul>\n\t\t\t</li>\n\t\t\t<?php\n\t\tendforeach;\n\t} else {\n\t\t$filename = $tree;\n\t\t$url      = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'file'  => rawurlencode( $tree ),\n\t\t\t\t'theme' => rawurlencode( $stylesheet ),\n\t\t\t),\n\t\t\tself_admin_url( 'theme-editor.php' )\n\t\t);\n\t\t?>\n\t\t<li role=\"none\" class=\"<?php echo esc_attr( $relative_file === $filename ? 'current-file' : '' ); ?>\">\n\t\t\t<a role=\"treeitem\" tabindex=\"<?php echo esc_attr( $relative_file === $filename ? '0' : '-1' ); ?>\"\n\t\t\t\thref=\"<?php echo esc_url( $url ); ?>\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<?php\n\t\t\t\t$file_description = esc_html( get_file_description( $filename ) );\n\t\t\t\tif ( $file_description !== $filename && wp_basename( $filename ) !== $file_description ) {\n\t\t\t\t\t$file_description .= '<br /><span class=\"nonessential\">(' . esc_html( $filename ) . ')</span>';\n\t\t\t\t}\n\n\t\t\t\tif ( $relative_file === $filename ) {\n\t\t\t\t\techo '<span class=\"notice notice-info\">' . $file_description . '</span>';\n\t\t\t\t} else {\n\t\t\t\t\techo $file_description;\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</a>\n\t\t</li>\n\t\t<?php\n\t}\n}\n\n/**\n * Makes a tree structure for the plugin editor's file list.\n *\n * @since 4.9.0\n * @access private\n *\n * @param array $plugin_editable_files List of plugin file paths.\n * @return array Tree structure for listing plugin files.\n */\nfunction wp_make_plugin_file_tree( $plugin_editable_files ) {\n\t$tree_list = array();\n\tforeach ( $plugin_editable_files as $plugin_file ) {\n\t\t$list     = explode( '/', preg_replace( '#^.+?/#', '', $plugin_file ) );\n\t\t$last_dir = &$tree_list;\n\t\tforeach ( $list as $dir ) {\n\t\t\t$last_dir =& $last_dir[ $dir ];\n\t\t}\n\t\t$last_dir = $plugin_file;\n\t}\n\treturn $tree_list;\n}\n\n/**\n * Outputs the formatted file list for the plugin editor.\n *\n * @since 4.9.0\n * @access private\n *\n * @param array|string $tree  List of file/folder paths, or filename.\n * @param string       $label Name of file or folder to print.\n * @param int          $level The aria-level for the current iteration.\n * @param int          $size  The aria-setsize for the current iteration.\n * @param int          $index The aria-posinset for the current iteration.\n */\nfunction wp_print_plugin_file_tree( $tree, $label = '', $level = 2, $size = 1, $index = 1 ) {\n\tglobal $file, $plugin;\n\tif ( is_array( $tree ) ) {\n\t\t$index = 0;\n\t\t$size  = count( $tree );\n\t\tforeach ( $tree as $label => $plugin_file ) :\n\t\t\t$index++;\n\t\t\tif ( ! is_array( $plugin_file ) ) {\n\t\t\t\twp_print_plugin_file_tree( $plugin_file, $label, $level, $index, $size );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t?>\n\t\t\t<li role=\"treeitem\" aria-expanded=\"true\" tabindex=\"-1\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<span class=\"folder-label\"><?php echo esc_html( $label ); ?> <span class=\"screen-reader-text\"><?php _e( 'folder' ); ?></span><span aria-hidden=\"true\" class=\"icon\"></span></span>\n\t\t\t\t<ul role=\"group\" class=\"tree-folder\"><?php wp_print_plugin_file_tree( $plugin_file, '', $level + 1, $index, $size ); ?></ul>\n\t\t\t</li>\n\t\t\t<?php\n\t\tendforeach;\n\t} else {\n\t\t$url = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'file'   => rawurlencode( $tree ),\n\t\t\t\t'plugin' => rawurlencode( $plugin ),\n\t\t\t),\n\t\t\tself_admin_url( 'plugin-editor.php' )\n\t\t);\n\t\t?>\n\t\t<li role=\"none\" class=\"<?php echo esc_attr( $file === $tree ? 'current-file' : '' ); ?>\">\n\t\t\t<a role=\"treeitem\" tabindex=\"<?php echo esc_attr( $file === $tree ? '0' : '-1' ); ?>\"\n\t\t\t\thref=\"<?php echo esc_url( $url ); ?>\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<?php\n\t\t\t\tif ( $file === $tree ) {\n\t\t\t\t\techo '<span class=\"notice notice-info\">' . esc_html( $label ) . '</span>';\n\t\t\t\t} else {\n\t\t\t\t\techo esc_html( $label );\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</a>\n\t\t</li>\n\t\t<?php\n\t}\n}\n\n/**\n * Flushes rewrite rules if siteurl, home or page_on_front changed.\n *\n * @since 2.1.0\n *\n * @param string $old_value\n * @param string $value\n */\nfunction update_home_siteurl( $old_value, $value ) {\n\tif ( wp_installing() ) {\n\t\treturn;\n\t}\n\n\tif ( is_multisite() && ms_is_switched() ) {\n\t\tdelete_option( 'rewrite_rules' );\n\t} else {\n\t\tflush_rewrite_rules();\n\t}\n}\n\n\n/**\n * Resets global variables based on $_GET and $_POST\n *\n * This function resets global variables based on the names passed\n * in the $vars array to the value of $_POST[$var] or $_GET[$var] or ''\n * if neither is defined.\n *\n * @since 2.0.0\n *\n * @param array $vars An array of globals to reset.\n */\nfunction wp_reset_vars( $vars ) {\n\tforeach ( $vars as $var ) {\n\t\tif ( empty( $_POST[ $var ] ) ) {\n\t\t\tif ( empty( $_GET[ $var ] ) ) {\n\t\t\t\t$GLOBALS[ $var ] = '';\n\t\t\t} else {\n\t\t\t\t$GLOBALS[ $var ] = $_GET[ $var ];\n\t\t\t}\n\t\t} else {\n\t\t\t$GLOBALS[ $var ] = $_POST[ $var ];\n\t\t}\n\t}\n}\n\n/**\n * Displays the given administration message.\n *\n * @since 2.1.0\n *\n * @param string|WP_Error $message\n */\nfunction show_message( $message ) {\n\tif ( is_wp_error( $message ) ) {\n\t\tif ( $message->get_error_data() && is_string( $message->get_error_data() ) ) {\n\t\t\t$message = $message->get_error_message() . ': ' . $message->get_error_data();\n\t\t} else {\n\t\t\t$message = $message->get_error_message();\n\t\t}\n\t}\n\techo \"<p>$message</p>\\n\";\n\twp_ob_end_flush_all();\n\tflush();\n}\n\n/**\n * @since 2.8.0\n *\n * @param string $content\n * @return array\n */\nfunction wp_doc_link_parse( $content ) {\n\tif ( ! is_string( $content ) || empty( $content ) ) {\n\t\treturn array();\n\t}\n\n\tif ( ! function_exists( 'token_get_all' ) ) {\n\t\treturn array();\n\t}\n\n\t$tokens           = token_get_all( $content );\n\t$count            = count( $tokens );\n\t$functions        = array();\n\t$ignore_functions = array();\n\tfor ( $t = 0; $t < $count - 2; $t++ ) {\n\t\tif ( ! is_array( $tokens[ $t ] ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( T_STRING == $tokens[ $t ][0] && ( '(' == $tokens[ $t + 1 ] || '(' == $tokens[ $t + 2 ] ) ) {\n\t\t\t// If it's a function or class defined locally, there's not going to be any docs available.\n\t\t\tif ( ( isset( $tokens[ $t - 2 ][1] ) && in_array( $tokens[ $t - 2 ][1], array( 'function', 'class' ) ) ) || ( isset( $tokens[ $t - 2 ][0] ) && T_OBJECT_OPERATOR == $tokens[ $t - 1 ][0] ) ) {\n\t\t\t\t$ignore_functions[] = $tokens[ $t ][1];\n\t\t\t}\n\t\t\t// Add this to our stack of unique references.\n\t\t\t$functions[] = $tokens[ $t ][1];\n\t\t}\n\t}\n\n\t$functions = array_unique( $functions );\n\tsort( $functions );\n\n\t/**\n\t * Filters the list of functions and classes to be ignored from the documentation lookup.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string[] $ignore_functions Array of names of functions and classes to be ignored.\n\t */\n\t$ignore_functions = apply_filters( 'documentation_ignore_functions', $ignore_functions );\n\n\t$ignore_functions = array_unique( $ignore_functions );\n\n\t$out = array();\n\tforeach ( $functions as $function ) {\n\t\tif ( in_array( $function, $ignore_functions ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$out[] = $function;\n\t}\n\n\treturn $out;\n}\n\n/**\n * Saves option for number of rows when listing posts, pages, comments, etc.\n *\n * @since 2.8.0\n */\nfunction set_screen_options() {\n\n\tif ( isset( $_POST['wp_screen_options'] ) && is_array( $_POST['wp_screen_options'] ) ) {\n\t\tcheck_admin_referer( 'screen-options-nonce', 'screenoptionnonce' );\n\n\t\t$user = wp_get_current_user();\n\t\tif ( ! $user ) {\n\t\t\treturn;\n\t\t}\n\t\t$option = $_POST['wp_screen_options']['option'];\n\t\t$value  = $_POST['wp_screen_options']['value'];\n\n\t\tif ( sanitize_key( $option ) != $option ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$map_option = $option;\n\t\t$type       = str_replace( 'edit_', '', $map_option );\n\t\t$type       = str_replace( '_per_page', '', $type );\n\t\tif ( in_array( $type, get_taxonomies() ) ) {\n\t\t\t$map_option = 'edit_tags_per_page';\n\t\t} elseif ( in_array( $type, get_post_types() ) ) {\n\t\t\t$map_option = 'edit_per_page';\n\t\t} else {\n\t\t\t$option = str_replace( '-', '_', $option );\n\t\t}\n\n\t\tswitch ( $map_option ) {\n\t\t\tcase 'edit_per_page':\n\t\t\tcase 'users_per_page':\n\t\t\tcase 'edit_comments_per_page':\n\t\t\tcase 'upload_per_page':\n\t\t\tcase 'edit_tags_per_page':\n\t\t\tcase 'plugins_per_page':\n\t\t\tcase 'export_personal_data_requests_per_page':\n\t\t\tcase 'remove_personal_data_requests_per_page':\n\t\t\t\t// Network admin.\n\t\t\tcase 'sites_network_per_page':\n\t\t\tcase 'users_network_per_page':\n\t\t\tcase 'site_users_network_per_page':\n\t\t\tcase 'plugins_network_per_page':\n\t\t\tcase 'themes_network_per_page':\n\t\t\tcase 'site_themes_network_per_page':\n\t\t\t\t$value = (int) $value;\n\t\t\t\tif ( $value < 1 || $value > 999 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/**\n\t\t\t\t * Filters a screen option value before it is set.\n\t\t\t\t *\n\t\t\t\t * The filter can also be used to modify non-standard [items]_per_page\n\t\t\t\t * settings. See the parent function for a full list of standard options.\n\t\t\t\t *\n\t\t\t\t * Returning false to the filter will skip saving the current option.\n\t\t\t\t *\n\t\t\t\t * @since 2.8.0\n\t\t\t\t *\n\t\t\t\t * @see set_screen_options()\n\t\t\t\t *\n\t\t\t\t * @param bool     $keep   Whether to save or skip saving the screen option value. Default false.\n\t\t\t\t * @param string   $option The option name.\n\t\t\t\t * @param int      $value  The number of rows to use.\n\t\t\t\t */\n\t\t\t\t$value = apply_filters( 'set-screen-option', false, $option, $value ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\n\t\t\t\tif ( false === $value ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tupdate_user_meta( $user->ID, $option, $value );\n\n\t\t$url = remove_query_arg( array( 'pagenum', 'apage', 'paged' ), wp_get_referer() );\n\t\tif ( isset( $_POST['mode'] ) ) {\n\t\t\t$url = add_query_arg( array( 'mode' => $_POST['mode'] ), $url );\n\t\t}\n\n\t\twp_safe_redirect( $url );\n\t\texit;\n\t}\n}\n\n/**\n * Check if rewrite rule for WordPress already exists in the IIS 7+ configuration file\n *\n * @since 2.8.0\n *\n * @return bool\n * @param string $filename The file path to the configuration file\n */\nfunction iis7_rewrite_rule_exists( $filename ) {\n\tif ( ! file_exists( $filename ) ) {\n\t\treturn false;\n\t}\n\tif ( ! class_exists( 'DOMDocument', false ) ) {\n\t\treturn false;\n\t}\n\n\t$doc = new DOMDocument();\n\tif ( $doc->load( $filename ) === false ) {\n\t\treturn false;\n\t}\n\t$xpath = new DOMXPath( $doc );\n\t$rules = $xpath->query( '/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'wordpress\\')] | /configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'WordPress\\')]' );\n\tif ( 0 == $rules->length ) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\n/**\n * Delete WordPress rewrite rule from web.config file if it exists there\n *\n * @since 2.8.0\n *\n * @param string $filename Name of the configuration file\n * @return bool\n */\nfunction iis7_delete_rewrite_rule( $filename ) {\n\t// If configuration file does not exist then rules also do not exist, so there is nothing to delete.\n\tif ( ! file_exists( $filename ) ) {\n\t\treturn true;\n\t}\n\n\tif ( ! class_exists( 'DOMDocument', false ) ) {\n\t\treturn false;\n\t}\n\n\t$doc                     = new DOMDocument();\n\t$doc->preserveWhiteSpace = false;\n\n\tif ( $doc->load( $filename ) === false ) {\n\t\treturn false;\n\t}\n\t$xpath = new DOMXPath( $doc );\n\t$rules = $xpath->query( '/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'wordpress\\')] | /configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'WordPress\\')]' );\n\tif ( $rules->length > 0 ) {\n\t\t$child  = $rules->item( 0 );\n\t\t$parent = $child->parentNode;\n\t\t$parent->removeChild( $child );\n\t\t$doc->formatOutput = true;\n\t\tsaveDomDocument( $doc, $filename );\n\t}\n\treturn true;\n}\n\n/**\n * Add WordPress rewrite rule to the IIS 7+ configuration file.\n *\n * @since 2.8.0\n *\n * @param string $filename The file path to the configuration file\n * @param string $rewrite_rule The XML fragment with URL Rewrite rule\n * @return bool\n */\nfunction iis7_add_rewrite_rule( $filename, $rewrite_rule ) {\n\tif ( ! class_exists( 'DOMDocument', false ) ) {\n\t\treturn false;\n\t}\n\n\t// If configuration file does not exist then we create one.\n\tif ( ! file_exists( $filename ) ) {\n\t\t$fp = fopen( $filename, 'w' );\n\t\tfwrite( $fp, '<configuration/>' );\n\t\tfclose( $fp );\n\t}\n\n\t$doc                     = new DOMDocument();\n\t$doc->preserveWhiteSpace = false;\n\n\tif ( $doc->load( $filename ) === false ) {\n\t\treturn false;\n\t}\n\n\t$xpath = new DOMXPath( $doc );\n\n\t// First check if the rule already exists as in that case there is no need to re-add it.\n\t$wordpress_rules = $xpath->query( '/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'wordpress\\')] | /configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'WordPress\\')]' );\n\tif ( $wordpress_rules->length > 0 ) {\n\t\treturn true;\n\t}\n\n\t// Check the XPath to the rewrite rule and create XML nodes if they do not exist.\n\t$xmlnodes = $xpath->query( '/configuration/system.webServer/rewrite/rules' );\n\tif ( $xmlnodes->length > 0 ) {\n\t\t$rules_node = $xmlnodes->item( 0 );\n\t} else {\n\t\t$rules_node = $doc->createElement( 'rules' );\n\n\t\t$xmlnodes = $xpath->query( '/configuration/system.webServer/rewrite' );\n\t\tif ( $xmlnodes->length > 0 ) {\n\t\t\t$rewrite_node = $xmlnodes->item( 0 );\n\t\t\t$rewrite_node->appendChild( $rules_node );\n\t\t} else {\n\t\t\t$rewrite_node = $doc->createElement( 'rewrite' );\n\t\t\t$rewrite_node->appendChild( $rules_node );\n\n\t\t\t$xmlnodes = $xpath->query( '/configuration/system.webServer' );\n\t\t\tif ( $xmlnodes->length > 0 ) {\n\t\t\t\t$system_webServer_node = $xmlnodes->item( 0 );\n\t\t\t\t$system_webServer_node->appendChild( $rewrite_node );\n\t\t\t} else {\n\t\t\t\t$system_webServer_node = $doc->createElement( 'system.webServer' );\n\t\t\t\t$system_webServer_node->appendChild( $rewrite_node );\n\n\t\t\t\t$xmlnodes = $xpath->query( '/configuration' );\n\t\t\t\tif ( $xmlnodes->length > 0 ) {\n\t\t\t\t\t$config_node = $xmlnodes->item( 0 );\n\t\t\t\t\t$config_node->appendChild( $system_webServer_node );\n\t\t\t\t} else {\n\t\t\t\t\t$config_node = $doc->createElement( 'configuration' );\n\t\t\t\t\t$doc->appendChild( $config_node );\n\t\t\t\t\t$config_node->appendChild( $system_webServer_node );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$rule_fragment = $doc->createDocumentFragment();\n\t$rule_fragment->appendXML( $rewrite_rule );\n\t$rules_node->appendChild( $rule_fragment );\n\n\t$doc->encoding     = 'UTF-8';\n\t$doc->formatOutput = true;\n\tsaveDomDocument( $doc, $filename );\n\n\treturn true;\n}\n\n/**\n * Saves the XML document into a file\n *\n * @since 2.8.0\n *\n * @param DOMDocument $doc\n * @param string $filename\n */\nfunction saveDomDocument( $doc, $filename ) { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid\n\t$config = $doc->saveXML();\n\t$config = preg_replace( \"/([^\\r])\\n/\", \"$1\\r\\n\", $config );\n\t$fp     = fopen( $filename, 'w' );\n\tfwrite( $fp, $config );\n\tfclose( $fp );\n}\n\n/**\n * Display the default admin color scheme picker (Used in user-edit.php)\n *\n * @since 3.0.0\n *\n * @global array $_wp_admin_css_colors\n *\n * @param int $user_id User ID.\n */\nfunction admin_color_scheme_picker( $user_id ) {\n\tglobal $_wp_admin_css_colors;\n\n\tksort( $_wp_admin_css_colors );\n\n\tif ( isset( $_wp_admin_css_colors['fresh'] ) ) {\n\t\t// Set Default ('fresh') and Light should go first.\n\t\t$_wp_admin_css_colors = array_filter(\n\t\t\tarray_merge(\n\t\t\t\tarray(\n\t\t\t\t\t'fresh' => '',\n\t\t\t\t\t'light' => '',\n\t\t\t\t),\n\t\t\t\t$_wp_admin_css_colors\n\t\t\t)\n\t\t);\n\t}\n\n\t$current_color = get_user_option( 'admin_color', $user_id );\n\n\tif ( empty( $current_color ) || ! isset( $_wp_admin_css_colors[ $current_color ] ) ) {\n\t\t$current_color = 'fresh';\n\t}\n\n\t?>\n\t<fieldset id=\"color-picker\" class=\"scheme-list\">\n\t\t<legend class=\"screen-reader-text\"><span><?php _e( 'Admin Color Scheme' ); ?></span></legend>\n\t\t<?php\n\t\twp_nonce_field( 'save-color-scheme', 'color-nonce', false );\n\t\tforeach ( $_wp_admin_css_colors as $color => $color_info ) :\n\n\t\t\t?>\n\t\t\t<div class=\"color-option <?php echo ( $color == $current_color ) ? 'selected' : ''; ?>\">\n\t\t\t\t<input name=\"admin_color\" id=\"admin_color_<?php echo esc_attr( $color ); ?>\" type=\"radio\" value=\"<?php echo esc_attr( $color ); ?>\" class=\"tog\" <?php checked( $color, $current_color ); ?> />\n\t\t\t\t<input type=\"hidden\" class=\"css_url\" value=\"<?php echo esc_url( $color_info->url ); ?>\" />\n\t\t\t\t<input type=\"hidden\" class=\"icon_colors\" value=\"<?php echo esc_attr( wp_json_encode( array( 'icons' => $color_info->icon_colors ) ) ); ?>\" />\n\t\t\t\t<label for=\"admin_color_<?php echo esc_attr( $color ); ?>\"><?php echo esc_html( $color_info->name ); ?></label>\n\t\t\t\t<table class=\"color-palette\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t<?php\n\n\t\t\t\t\tforeach ( $color_info->colors as $html_color ) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<td style=\"background-color: <?php echo esc_attr( $html_color ); ?>\">&nbsp;</td>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\n\t\t\t\t\t?>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<?php\n\n\t\tendforeach;\n\n\t\t?>\n\t</fieldset>\n\t<?php\n}\n\n/**\n *\n * @global array $_wp_admin_css_colors\n */\nfunction wp_color_scheme_settings() {\n\tglobal $_wp_admin_css_colors;\n\n\t$color_scheme = get_user_option( 'admin_color' );\n\n\t// It's possible to have a color scheme set that is no longer registered.\n\tif ( empty( $_wp_admin_css_colors[ $color_scheme ] ) ) {\n\t\t$color_scheme = 'fresh';\n\t}\n\n\tif ( ! empty( $_wp_admin_css_colors[ $color_scheme ]->icon_colors ) ) {\n\t\t$icon_colors = $_wp_admin_css_colors[ $color_scheme ]->icon_colors;\n\t} elseif ( ! empty( $_wp_admin_css_colors['fresh']->icon_colors ) ) {\n\t\t$icon_colors = $_wp_admin_css_colors['fresh']->icon_colors;\n\t} else {\n\t\t// Fall back to the default set of icon colors if the default scheme is missing.\n\t\t$icon_colors = array(\n\t\t\t'base'    => '#a0a5aa',\n\t\t\t'focus'   => '#00a0d2',\n\t\t\t'current' => '#fff',\n\t\t);\n\t}\n\n\techo '<script type=\"text/javascript\">var _wpColorScheme = ' . wp_json_encode( array( 'icons' => $icon_colors ) ) . \";</script>\\n\";\n}\n\n/**\n * @since 3.3.0\n */\nfunction _ipad_meta() {\n\tif ( wp_is_mobile() ) {\n\t\t?>\n\t\t<meta name=\"viewport\" id=\"viewport-meta\" content=\"width=device-width, initial-scale=1\">\n\t\t<?php\n\t}\n}\n\n/**\n * Check lock status for posts displayed on the Posts screen\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n */\nfunction wp_check_locked_posts( $response, $data, $screen_id ) {\n\t$checked = array();\n\n\tif ( array_key_exists( 'wp-check-locked-posts', $data ) && is_array( $data['wp-check-locked-posts'] ) ) {\n\t\tforeach ( $data['wp-check-locked-posts'] as $key ) {\n\t\t\t$post_id = absint( substr( $key, 5 ) );\n\t\t\tif ( ! $post_id ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$user_id = wp_check_post_lock( $post_id );\n\t\t\tif ( $user_id ) {\n\t\t\t\t$user = get_userdata( $user_id );\n\t\t\t\tif ( $user && current_user_can( 'edit_post', $post_id ) ) {\n\t\t\t\t\t$send = array(\n\t\t\t\t\t\t/* translators: %s: User's display name. */\n\t\t\t\t\t\t'text' => sprintf( __( '%s is currently editing' ), $user->display_name ),\n\t\t\t\t\t);\n\n\t\t\t\t\t$avatar = get_avatar( $user->ID, 18 );\n\t\t\t\t\tif ( $avatar && preg_match( \"|src='([^']+)'|\", $avatar, $matches ) ) {\n\t\t\t\t\t\t$send['avatar_src'] = $matches[1];\n\t\t\t\t\t}\n\n\t\t\t\t\t$checked[ $key ] = $send;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $checked ) ) {\n\t\t$response['wp-check-locked-posts'] = $checked;\n\t}\n\n\treturn $response;\n}\n\n/**\n * Check lock status on the New/Edit Post screen and refresh the lock\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n */\nfunction wp_refresh_post_lock( $response, $data, $screen_id ) {\n\tif ( array_key_exists( 'wp-refresh-post-lock', $data ) ) {\n\t\t$received = $data['wp-refresh-post-lock'];\n\t\t$send     = array();\n\n\t\t$post_id = absint( $received['post_id'] );\n\t\tif ( ! $post_id ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\t$user_id = wp_check_post_lock( $post_id );\n\t\t$user    = get_userdata( $user_id );\n\t\tif ( $user ) {\n\t\t\t$error = array(\n\t\t\t\t/* translators: %s: User's display name. */\n\t\t\t\t'text' => sprintf( __( '%s has taken over and is currently editing.' ), $user->display_name ),\n\t\t\t);\n\n\t\t\t$avatar = get_avatar( $user->ID, 64 );\n\t\t\tif ( $avatar ) {\n\t\t\t\tif ( preg_match( \"|src='([^']+)'|\", $avatar, $matches ) ) {\n\t\t\t\t\t$error['avatar_src'] = $matches[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$send['lock_error'] = $error;\n\t\t} else {\n\t\t\t$new_lock = wp_set_post_lock( $post_id );\n\t\t\tif ( $new_lock ) {\n\t\t\t\t$send['new_lock'] = implode( ':', $new_lock );\n\t\t\t}\n\t\t}\n\n\t\t$response['wp-refresh-post-lock'] = $send;\n\t}\n\n\treturn $response;\n}\n\n/**\n * Check nonce expiration on the New/Edit Post screen and refresh if needed\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n */\nfunction wp_refresh_post_nonces( $response, $data, $screen_id ) {\n\tif ( array_key_exists( 'wp-refresh-post-nonces', $data ) ) {\n\t\t$received                           = $data['wp-refresh-post-nonces'];\n\t\t$response['wp-refresh-post-nonces'] = array( 'check' => 1 );\n\n\t\t$post_id = absint( $received['post_id'] );\n\t\tif ( ! $post_id ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\t$response['wp-refresh-post-nonces'] = array(\n\t\t\t'replace' => array(\n\t\t\t\t'getpermalinknonce'    => wp_create_nonce( 'getpermalink' ),\n\t\t\t\t'samplepermalinknonce' => wp_create_nonce( 'samplepermalink' ),\n\t\t\t\t'closedpostboxesnonce' => wp_create_nonce( 'closedpostboxes' ),\n\t\t\t\t'_ajax_linking_nonce'  => wp_create_nonce( 'internal-linking' ),\n\t\t\t\t'_wpnonce'             => wp_create_nonce( 'update-post_' . $post_id ),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn $response;\n}\n\n/**\n * Add the latest Heartbeat and REST-API nonce to the Heartbeat response.\n *\n * @since 5.0.0\n *\n * @param array  $response  The Heartbeat response.\n * @return array The Heartbeat response.\n */\nfunction wp_refresh_heartbeat_nonces( $response ) {\n\t// Refresh the Rest API nonce.\n\t$response['rest_nonce'] = wp_create_nonce( 'wp_rest' );\n\n\t// Refresh the Heartbeat nonce.\n\t$response['heartbeat_nonce'] = wp_create_nonce( 'heartbeat-nonce' );\n\treturn $response;\n}\n\n/**\n * Disable suspension of Heartbeat on the Add/Edit Post screens.\n *\n * @since 3.8.0\n *\n * @global string $pagenow\n *\n * @param array $settings An array of Heartbeat settings.\n * @return array Filtered Heartbeat settings.\n */\nfunction wp_heartbeat_set_suspension( $settings ) {\n\tglobal $pagenow;\n\n\tif ( 'post.php' === $pagenow || 'post-new.php' === $pagenow ) {\n\t\t$settings['suspension'] = 'disable';\n\t}\n\n\treturn $settings;\n}\n\n/**\n * Autosave with heartbeat\n *\n * @since 3.9.0\n *\n * @param array $response The Heartbeat response.\n * @param array $data     The $_POST data sent.\n * @return array The Heartbeat response.\n */\nfunction heartbeat_autosave( $response, $data ) {\n\tif ( ! empty( $data['wp_autosave'] ) ) {\n\t\t$saved = wp_autosave( $data['wp_autosave'] );\n\n\t\tif ( is_wp_error( $saved ) ) {\n\t\t\t$response['wp_autosave'] = array(\n\t\t\t\t'success' => false,\n\t\t\t\t'message' => $saved->get_error_message(),\n\t\t\t);\n\t\t} elseif ( empty( $saved ) ) {\n\t\t\t$response['wp_autosave'] = array(\n\t\t\t\t'success' => false,\n\t\t\t\t'message' => __( 'Error while saving.' ),\n\t\t\t);\n\t\t} else {\n\t\t\t/* translators: Draft saved date format, see https://www.php.net/date */\n\t\t\t$draft_saved_date_format = __( 'g:i:s a' );\n\t\t\t$response['wp_autosave'] = array(\n\t\t\t\t'success' => true,\n\t\t\t\t/* translators: %s: Date and time. */\n\t\t\t\t'message' => sprintf( __( 'Draft saved at %s.' ), date_i18n( $draft_saved_date_format ) ),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn $response;\n}\n\n/**\n * Remove single-use URL parameters and create canonical link based on new URL.\n *\n * Remove specific query string parameters from a URL, create the canonical link,\n * put it in the admin header, and change the current URL to match.\n *\n * @since 4.2.0\n */\nfunction wp_admin_canonical_url() {\n\t$removable_query_args = wp_removable_query_args();\n\n\tif ( empty( $removable_query_args ) ) {\n\t\treturn;\n\t}\n\n\t// Ensure we're using an absolute URL.\n\t$current_url  = set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t$filtered_url = remove_query_arg( $removable_query_args, $current_url );\n\t?>\n\t<link id=\"wp-admin-canonical\" rel=\"canonical\" href=\"<?php echo esc_url( $filtered_url ); ?>\" />\n\t<script>\n\t\tif ( window.history.replaceState ) {\n\t\t\twindow.history.replaceState( null, null, document.getElementById( 'wp-admin-canonical' ).href + window.location.hash );\n\t\t}\n\t</script>\n\t<?php\n}\n\n/**\n * Send a referrer policy header so referrers are not sent externally from administration screens.\n *\n * @since 4.9.0\n */\nfunction wp_admin_headers() {\n\t$policy = 'strict-origin-when-cross-origin';\n\n\t/**\n\t * Filters the admin referrer policy header value.\n\t *\n\t * @since 4.9.0\n\t * @since 4.9.5 The default value was changed to 'strict-origin-when-cross-origin'.\n\t *\n\t * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\n\t *\n\t * @param string $policy The admin referrer policy header value. Default 'strict-origin-when-cross-origin'.\n\t */\n\t$policy = apply_filters( 'admin_referrer_policy', $policy );\n\n\theader( sprintf( 'Referrer-Policy: %s', $policy ) );\n}\n\n/**\n * Outputs JS that reloads the page if the user navigated to it with the Back or Forward button.\n *\n * Used on the Edit Post and Add New Post screens. Needed to ensure the page is not loaded from browser cache,\n * so the post title and editor content are the last saved versions. Ideally this script should run first in the head.\n *\n * @since 4.6.0\n */\nfunction wp_page_reload_on_back_button_js() {\n\t?>\n\t<script>\n\t\tif ( typeof performance !== 'undefined' && performance.navigation && performance.navigation.type === 2 ) {\n\t\t\tdocument.location.reload( true );\n\t\t}\n\t</script>\n\t<?php\n}\n\n/**\n * Send a confirmation request email when a change of site admin email address is attempted.\n *\n * The new site admin address will not become active until confirmed.\n *\n * @since 3.0.0\n * @since 4.9.0 This function was moved from wp-admin/includes/ms.php so it's no longer Multisite specific.\n *\n * @param string $old_value The old site admin email address.\n * @param string $value     The proposed new site admin email address.\n */\nfunction update_option_new_admin_email( $old_value, $value ) {\n\tif ( get_option( 'admin_email' ) === $value || ! is_email( $value ) ) {\n\t\treturn;\n\t}\n\n\t$hash            = md5( $value . time() . wp_rand() );\n\t$new_admin_email = array(\n\t\t'hash'     => $hash,\n\t\t'newemail' => $value,\n\t);\n\tupdate_option( 'adminhash', $new_admin_email );\n\n\t$switched_locale = switch_to_locale( get_user_locale() );\n\n\t/* translators: Do not translate USERNAME, ADMIN_URL, EMAIL, SITENAME, SITEURL: those are placeholders. */\n\t$email_text = __(\n\t\t'Howdy ###USERNAME###,\n\nYou recently requested to have the administration email address on\nyour site changed.\n\nIf this is correct, please click on the following link to change it:\n###ADMIN_URL###\n\nYou can safely ignore and delete this email if you do not want to\ntake this action.\n\nThis email has been sent to ###EMAIL###\n\nRegards,\nAll at ###SITENAME###\n###SITEURL###'\n\t);\n\n\t/**\n\t * Filters the text of the email sent when a change of site admin email address is attempted.\n\t *\n\t * The following strings have a special meaning and will get replaced dynamically:\n\t * ###USERNAME###  The current user's username.\n\t * ###ADMIN_URL### The link to click on to confirm the email change.\n\t * ###EMAIL###     The proposed new site admin email address.\n\t * ###SITENAME###  The name of the site.\n\t * ###SITEURL###   The URL to the site.\n\t *\n\t * @since MU (3.0.0)\n\t * @since 4.9.0 This filter is no longer Multisite specific.\n\t *\n\t * @param string $email_text      Text in the email.\n\t * @param array  $new_admin_email {\n\t *     Data relating to the new site admin email address.\n\t *\n\t *     @type string $hash     The secure hash used in the confirmation link URL.\n\t *     @type string $newemail The proposed new site admin email address.\n\t * }\n\t */\n\t$content = apply_filters( 'new_admin_email_content', $email_text, $new_admin_email );\n\n\t$current_user = wp_get_current_user();\n\t$content      = str_replace( '###USERNAME###', $current_user->user_login, $content );\n\t$content      = str_replace( '###ADMIN_URL###', esc_url( self_admin_url( 'options.php?adminhash=' . $hash ) ), $content );\n\t$content      = str_replace( '###EMAIL###', $value, $content );\n\t$content      = str_replace( '###SITENAME###', wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES ), $content );\n\t$content      = str_replace( '###SITEURL###', home_url(), $content );\n\n\twp_mail(\n\t\t$value,\n\t\tsprintf(\n\t\t\t/* translators: New admin email address notification email subject. %s: Site title. */\n\t\t\t__( '[%s] New Admin Email Address' ),\n\t\t\twp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES )\n\t\t),\n\t\t$content\n\t);\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n}\n\n/**\n * Appends '(Draft)' to draft page titles in the privacy page dropdown\n * so that unpublished content is obvious.\n *\n * @since 4.9.8\n * @access private\n *\n * @param string  $title Page title.\n * @param WP_Post $page  Page data object.\n *\n * @return string Page title.\n */\nfunction _wp_privacy_settings_filter_draft_page_titles( $title, $page ) {\n\tif ( 'draft' === $page->post_status && 'privacy' === get_current_screen()->id ) {\n\t\t/* translators: %s: Page title. */\n\t\t$title = sprintf( __( '%s (Draft)' ), $title );\n\t}\n\n\treturn $title;\n}\n\n/**\n * Checks if the user needs to update PHP.\n *\n * @since 5.1.0\n * @since 5.1.1 Added the {@see 'wp_is_php_version_acceptable'} filter.\n *\n * @return array|false $response Array of PHP version data. False on failure.\n */\nfunction wp_check_php_version() {\n\t$version = phpversion();\n\t$key     = md5( $version );\n\n\t$response = get_site_transient( 'php_check_' . $key );\n\tif ( false === $response ) {\n\t\t$url = 'http://api.wordpress.org/core/serve-happy/1.0/';\n\t\tif ( wp_http_supports( array( 'ssl' ) ) ) {\n\t\t\t$url = set_url_scheme( $url, 'https' );\n\t\t}\n\n\t\t$url = add_query_arg( 'php_version', $version, $url );\n\n\t\t$response = wp_remote_get( $url );\n\n\t\tif ( is_wp_error( $response ) || 200 !== wp_remote_retrieve_response_code( $response ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Response should be an array with:\n\t\t *  'recommended_version' - string - The PHP version recommended by WordPress.\n\t\t *  'is_supported' - boolean - Whether the PHP version is actively supported.\n\t\t *  'is_secure' - boolean - Whether the PHP version receives security updates.\n\t\t *  'is_acceptable' - boolean - Whether the PHP version is still acceptable for WordPress.\n\t\t */\n\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\n\t\tif ( ! is_array( $response ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tset_site_transient( 'php_check_' . $key, $response, WEEK_IN_SECONDS );\n\t}\n\n\tif ( isset( $response['is_acceptable'] ) && $response['is_acceptable'] ) {\n\t\t/**\n\t\t * Filters whether the active PHP version is considered acceptable by WordPress.\n\t\t *\n\t\t * Returning false will trigger a PHP version warning to show up in the admin dashboard to administrators.\n\t\t *\n\t\t * This filter is only run if the wordpress.org Serve Happy API considers the PHP version acceptable, ensuring\n\t\t * that this filter can only make this check stricter, but not loosen it.\n\t\t *\n\t\t * @since 5.1.1\n\t\t *\n\t\t * @param bool   $is_acceptable Whether the PHP version is considered acceptable. Default true.\n\t\t * @param string $version       PHP version checked.\n\t\t */\n\t\t$response['is_acceptable'] = (bool) apply_filters( 'wp_is_php_version_acceptable', true, $version );\n\t}\n\n\treturn $response;\n}\n"], "fixing_code": ["<?php\n/**\n * Misc WordPress Administration API.\n *\n * @package WordPress\n * @subpackage Administration\n */\n\n/**\n * Returns whether the server is running Apache with the mod_rewrite module loaded.\n *\n * @since 2.0.0\n *\n * @return bool Whether the server is running Apache with the mod_rewrite module loaded.\n */\nfunction got_mod_rewrite() {\n\t$got_rewrite = apache_mod_loaded( 'mod_rewrite', true );\n\n\t/**\n\t * Filters whether Apache and mod_rewrite are present.\n\t *\n\t * This filter was previously used to force URL rewriting for other servers,\n\t * like nginx. Use the {@see 'got_url_rewrite'} filter in got_url_rewrite() instead.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @see got_url_rewrite()\n\t *\n\t * @param bool $got_rewrite Whether Apache and mod_rewrite are present.\n\t */\n\treturn apply_filters( 'got_rewrite', $got_rewrite );\n}\n\n/**\n * Returns whether the server supports URL rewriting.\n *\n * Detects Apache's mod_rewrite, IIS 7.0+ permalink support, and nginx.\n *\n * @since 3.7.0\n *\n * @global bool $is_nginx\n *\n * @return bool Whether the server supports URL rewriting.\n */\nfunction got_url_rewrite() {\n\t$got_url_rewrite = ( got_mod_rewrite() || $GLOBALS['is_nginx'] || iis7_supports_permalinks() );\n\n\t/**\n\t * Filters whether URL rewriting is available.\n\t *\n\t * @since 3.7.0\n\t *\n\t * @param bool $got_url_rewrite Whether URL rewriting is available.\n\t */\n\treturn apply_filters( 'got_url_rewrite', $got_url_rewrite );\n}\n\n/**\n * Extracts strings from between the BEGIN and END markers in the .htaccess file.\n *\n * @since 1.5.0\n *\n * @param string $filename Filename to extract the strings from.\n * @param string $marker   The marker to extract the strings from.\n * @return string[] An array of strings from a file (.htaccess) from between BEGIN and END markers.\n */\nfunction extract_from_markers( $filename, $marker ) {\n\t$result = array();\n\n\tif ( ! file_exists( $filename ) ) {\n\t\treturn $result;\n\t}\n\n\t$markerdata = explode( \"\\n\", implode( '', file( $filename ) ) );\n\n\t$state = false;\n\tforeach ( $markerdata as $markerline ) {\n\t\tif ( false !== strpos( $markerline, '# END ' . $marker ) ) {\n\t\t\t$state = false;\n\t\t}\n\t\tif ( $state ) {\n\t\t\tif ( '#' === substr( $markerline, 0, 1 ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$result[] = $markerline;\n\t\t}\n\t\tif ( false !== strpos( $markerline, '# BEGIN ' . $marker ) ) {\n\t\t\t$state = true;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\n/**\n * Inserts an array of strings into a file (.htaccess), placing it between\n * BEGIN and END markers.\n *\n * Replaces existing marked info. Retains surrounding\n * data. Creates file if none exists.\n *\n * @since 1.5.0\n *\n * @param string       $filename  Filename to alter.\n * @param string       $marker    The marker to alter.\n * @param array|string $insertion The new content to insert.\n * @return bool True on write success, false on failure.\n */\nfunction insert_with_markers( $filename, $marker, $insertion ) {\n\tif ( ! file_exists( $filename ) ) {\n\t\tif ( ! is_writable( dirname( $filename ) ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( ! touch( $filename ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Make sure the file is created with a minimum set of permissions.\n\t\t$perms = fileperms( $filename );\n\t\tif ( $perms ) {\n\t\t\tchmod( $filename, $perms | 0644 );\n\t\t}\n\t} elseif ( ! is_writeable( $filename ) ) {\n\t\treturn false;\n\t}\n\n\tif ( ! is_array( $insertion ) ) {\n\t\t$insertion = explode( \"\\n\", $insertion );\n\t}\n\n\t$switched_locale = switch_to_locale( get_locale() );\n\n\t$instructions = sprintf(\n\t\t/* translators: 1: Marker. */\n\t\t__(\n\t\t\t'The directives (lines) between `BEGIN %1$s` and `END %1$s` are\ndynamically generated, and should only be modified via WordPress filters.\nAny changes to the directives between these markers will be overwritten.'\n\t\t),\n\t\t$marker\n\t);\n\n\t$instructions = explode( \"\\n\", $instructions );\n\tforeach ( $instructions as $line => $text ) {\n\t\t$instructions[ $line ] = '# ' . $text;\n\t}\n\n\t/**\n\t * Filters the inline instructions inserted before the dynamically generated content.\n\t *\n\t * @since 5.3.0\n\t *\n\t * @param string[] $instructions Array of lines with inline instructions.\n\t * @param string   $marker       The marker being inserted.\n\t */\n\t$instructions = apply_filters( 'insert_with_markers_inline_instructions', $instructions, $marker );\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n\n\t$insertion = array_merge( $instructions, $insertion );\n\n\t$start_marker = \"# BEGIN {$marker}\";\n\t$end_marker   = \"# END {$marker}\";\n\n\t$fp = fopen( $filename, 'r+' );\n\tif ( ! $fp ) {\n\t\treturn false;\n\t}\n\n\t// Attempt to get a lock. If the filesystem supports locking, this will block until the lock is acquired.\n\tflock( $fp, LOCK_EX );\n\n\t$lines = array();\n\twhile ( ! feof( $fp ) ) {\n\t\t$lines[] = rtrim( fgets( $fp ), \"\\r\\n\" );\n\t}\n\n\t// Split out the existing file into the preceding lines, and those that appear after the marker.\n\t$pre_lines        = array();\n\t$post_lines       = array();\n\t$existing_lines   = array();\n\t$found_marker     = false;\n\t$found_end_marker = false;\n\tforeach ( $lines as $line ) {\n\t\tif ( ! $found_marker && false !== strpos( $line, $start_marker ) ) {\n\t\t\t$found_marker = true;\n\t\t\tcontinue;\n\t\t} elseif ( ! $found_end_marker && false !== strpos( $line, $end_marker ) ) {\n\t\t\t$found_end_marker = true;\n\t\t\tcontinue;\n\t\t}\n\t\tif ( ! $found_marker ) {\n\t\t\t$pre_lines[] = $line;\n\t\t} elseif ( $found_marker && $found_end_marker ) {\n\t\t\t$post_lines[] = $line;\n\t\t} else {\n\t\t\t$existing_lines[] = $line;\n\t\t}\n\t}\n\n\t// Check to see if there was a change.\n\tif ( $existing_lines === $insertion ) {\n\t\tflock( $fp, LOCK_UN );\n\t\tfclose( $fp );\n\n\t\treturn true;\n\t}\n\n\t// Generate the new file data.\n\t$new_file_data = implode(\n\t\t\"\\n\",\n\t\tarray_merge(\n\t\t\t$pre_lines,\n\t\t\tarray( $start_marker ),\n\t\t\t$insertion,\n\t\t\tarray( $end_marker ),\n\t\t\t$post_lines\n\t\t)\n\t);\n\n\t// Write to the start of the file, and truncate it to that length.\n\tfseek( $fp, 0 );\n\t$bytes = fwrite( $fp, $new_file_data );\n\tif ( $bytes ) {\n\t\tftruncate( $fp, ftell( $fp ) );\n\t}\n\tfflush( $fp );\n\tflock( $fp, LOCK_UN );\n\tfclose( $fp );\n\n\treturn (bool) $bytes;\n}\n\n/**\n * Updates the htaccess file with the current rules if it is writable.\n *\n * Always writes to the file if it exists and is writable to ensure that we\n * blank out old rules.\n *\n * @since 1.5.0\n *\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @return bool|null True on write success, false on failure. Null in multisite.\n */\nfunction save_mod_rewrite_rules() {\n\tif ( is_multisite() ) {\n\t\treturn;\n\t}\n\n\tglobal $wp_rewrite;\n\n\t// Ensure get_home_path() is declared.\n\trequire_once ABSPATH . 'wp-admin/includes/file.php';\n\n\t$home_path     = get_home_path();\n\t$htaccess_file = $home_path . '.htaccess';\n\n\t/*\n\t * If the file doesn't already exist check for write access to the directory\n\t * and whether we have some rules. Else check for write access to the file.\n\t */\n\tif ( ( ! file_exists( $htaccess_file ) && is_writable( $home_path ) && $wp_rewrite->using_mod_rewrite_permalinks() ) || is_writable( $htaccess_file ) ) {\n\t\tif ( got_mod_rewrite() ) {\n\t\t\t$rules = explode( \"\\n\", $wp_rewrite->mod_rewrite_rules() );\n\t\t\treturn insert_with_markers( $htaccess_file, 'WordPress', $rules );\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Updates the IIS web.config file with the current rules if it is writable.\n * If the permalinks do not require rewrite rules then the rules are deleted from the web.config file.\n *\n * @since 2.8.0\n *\n * @global WP_Rewrite $wp_rewrite WordPress rewrite component.\n *\n * @return bool|null True on write success, false on failure. Null in multisite.\n */\nfunction iis7_save_url_rewrite_rules() {\n\tif ( is_multisite() ) {\n\t\treturn;\n\t}\n\n\tglobal $wp_rewrite;\n\n\t// Ensure get_home_path() is declared.\n\trequire_once ABSPATH . 'wp-admin/includes/file.php';\n\n\t$home_path       = get_home_path();\n\t$web_config_file = $home_path . 'web.config';\n\n\t// Using win_is_writable() instead of is_writable() because of a bug in Windows PHP.\n\tif ( iis7_supports_permalinks() && ( ( ! file_exists( $web_config_file ) && win_is_writable( $home_path ) && $wp_rewrite->using_mod_rewrite_permalinks() ) || win_is_writable( $web_config_file ) ) ) {\n\t\t$rule = $wp_rewrite->iis7_url_rewrite_rules( false );\n\t\tif ( ! empty( $rule ) ) {\n\t\t\treturn iis7_add_rewrite_rule( $web_config_file, $rule );\n\t\t} else {\n\t\t\treturn iis7_delete_rewrite_rule( $web_config_file );\n\t\t}\n\t}\n\treturn false;\n}\n\n/**\n * Update the \"recently-edited\" file for the plugin or theme editor.\n *\n * @since 1.5.0\n *\n * @param string $file\n */\nfunction update_recently_edited( $file ) {\n\t$oldfiles = (array) get_option( 'recently_edited' );\n\tif ( $oldfiles ) {\n\t\t$oldfiles   = array_reverse( $oldfiles );\n\t\t$oldfiles[] = $file;\n\t\t$oldfiles   = array_reverse( $oldfiles );\n\t\t$oldfiles   = array_unique( $oldfiles );\n\t\tif ( 5 < count( $oldfiles ) ) {\n\t\t\tarray_pop( $oldfiles );\n\t\t}\n\t} else {\n\t\t$oldfiles[] = $file;\n\t}\n\tupdate_option( 'recently_edited', $oldfiles );\n}\n\n/**\n * Makes a tree structure for the theme editor's file list.\n *\n * @since 4.9.0\n * @access private\n *\n * @param array $allowed_files List of theme file paths.\n * @return array Tree structure for listing theme files.\n */\nfunction wp_make_theme_file_tree( $allowed_files ) {\n\t$tree_list = array();\n\tforeach ( $allowed_files as $file_name => $absolute_filename ) {\n\t\t$list     = explode( '/', $file_name );\n\t\t$last_dir = &$tree_list;\n\t\tforeach ( $list as $dir ) {\n\t\t\t$last_dir =& $last_dir[ $dir ];\n\t\t}\n\t\t$last_dir = $file_name;\n\t}\n\treturn $tree_list;\n}\n\n/**\n * Outputs the formatted file list for the theme editor.\n *\n * @since 4.9.0\n * @access private\n *\n * @global string $relative_file Name of the file being edited relative to the\n *                               theme directory.\n * @global string $stylesheet    The stylesheet name of the theme being edited.\n *\n * @param array|string $tree  List of file/folder paths, or filename.\n * @param int          $level The aria-level for the current iteration.\n * @param int          $size  The aria-setsize for the current iteration.\n * @param int          $index The aria-posinset for the current iteration.\n */\nfunction wp_print_theme_file_tree( $tree, $level = 2, $size = 1, $index = 1 ) {\n\tglobal $relative_file, $stylesheet;\n\n\tif ( is_array( $tree ) ) {\n\t\t$index = 0;\n\t\t$size  = count( $tree );\n\t\tforeach ( $tree as $label => $theme_file ) :\n\t\t\t$index++;\n\t\t\tif ( ! is_array( $theme_file ) ) {\n\t\t\t\twp_print_theme_file_tree( $theme_file, $level, $index, $size );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t?>\n\t\t\t<li role=\"treeitem\" aria-expanded=\"true\" tabindex=\"-1\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<span class=\"folder-label\"><?php echo esc_html( $label ); ?> <span class=\"screen-reader-text\"><?php _e( 'folder' ); ?></span><span aria-hidden=\"true\" class=\"icon\"></span></span>\n\t\t\t\t<ul role=\"group\" class=\"tree-folder\"><?php wp_print_theme_file_tree( $theme_file, $level + 1, $index, $size ); ?></ul>\n\t\t\t</li>\n\t\t\t<?php\n\t\tendforeach;\n\t} else {\n\t\t$filename = $tree;\n\t\t$url      = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'file'  => rawurlencode( $tree ),\n\t\t\t\t'theme' => rawurlencode( $stylesheet ),\n\t\t\t),\n\t\t\tself_admin_url( 'theme-editor.php' )\n\t\t);\n\t\t?>\n\t\t<li role=\"none\" class=\"<?php echo esc_attr( $relative_file === $filename ? 'current-file' : '' ); ?>\">\n\t\t\t<a role=\"treeitem\" tabindex=\"<?php echo esc_attr( $relative_file === $filename ? '0' : '-1' ); ?>\"\n\t\t\t\thref=\"<?php echo esc_url( $url ); ?>\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<?php\n\t\t\t\t$file_description = esc_html( get_file_description( $filename ) );\n\t\t\t\tif ( $file_description !== $filename && wp_basename( $filename ) !== $file_description ) {\n\t\t\t\t\t$file_description .= '<br /><span class=\"nonessential\">(' . esc_html( $filename ) . ')</span>';\n\t\t\t\t}\n\n\t\t\t\tif ( $relative_file === $filename ) {\n\t\t\t\t\techo '<span class=\"notice notice-info\">' . $file_description . '</span>';\n\t\t\t\t} else {\n\t\t\t\t\techo $file_description;\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</a>\n\t\t</li>\n\t\t<?php\n\t}\n}\n\n/**\n * Makes a tree structure for the plugin editor's file list.\n *\n * @since 4.9.0\n * @access private\n *\n * @param array $plugin_editable_files List of plugin file paths.\n * @return array Tree structure for listing plugin files.\n */\nfunction wp_make_plugin_file_tree( $plugin_editable_files ) {\n\t$tree_list = array();\n\tforeach ( $plugin_editable_files as $plugin_file ) {\n\t\t$list     = explode( '/', preg_replace( '#^.+?/#', '', $plugin_file ) );\n\t\t$last_dir = &$tree_list;\n\t\tforeach ( $list as $dir ) {\n\t\t\t$last_dir =& $last_dir[ $dir ];\n\t\t}\n\t\t$last_dir = $plugin_file;\n\t}\n\treturn $tree_list;\n}\n\n/**\n * Outputs the formatted file list for the plugin editor.\n *\n * @since 4.9.0\n * @access private\n *\n * @param array|string $tree  List of file/folder paths, or filename.\n * @param string       $label Name of file or folder to print.\n * @param int          $level The aria-level for the current iteration.\n * @param int          $size  The aria-setsize for the current iteration.\n * @param int          $index The aria-posinset for the current iteration.\n */\nfunction wp_print_plugin_file_tree( $tree, $label = '', $level = 2, $size = 1, $index = 1 ) {\n\tglobal $file, $plugin;\n\tif ( is_array( $tree ) ) {\n\t\t$index = 0;\n\t\t$size  = count( $tree );\n\t\tforeach ( $tree as $label => $plugin_file ) :\n\t\t\t$index++;\n\t\t\tif ( ! is_array( $plugin_file ) ) {\n\t\t\t\twp_print_plugin_file_tree( $plugin_file, $label, $level, $index, $size );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t?>\n\t\t\t<li role=\"treeitem\" aria-expanded=\"true\" tabindex=\"-1\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<span class=\"folder-label\"><?php echo esc_html( $label ); ?> <span class=\"screen-reader-text\"><?php _e( 'folder' ); ?></span><span aria-hidden=\"true\" class=\"icon\"></span></span>\n\t\t\t\t<ul role=\"group\" class=\"tree-folder\"><?php wp_print_plugin_file_tree( $plugin_file, '', $level + 1, $index, $size ); ?></ul>\n\t\t\t</li>\n\t\t\t<?php\n\t\tendforeach;\n\t} else {\n\t\t$url = add_query_arg(\n\t\t\tarray(\n\t\t\t\t'file'   => rawurlencode( $tree ),\n\t\t\t\t'plugin' => rawurlencode( $plugin ),\n\t\t\t),\n\t\t\tself_admin_url( 'plugin-editor.php' )\n\t\t);\n\t\t?>\n\t\t<li role=\"none\" class=\"<?php echo esc_attr( $file === $tree ? 'current-file' : '' ); ?>\">\n\t\t\t<a role=\"treeitem\" tabindex=\"<?php echo esc_attr( $file === $tree ? '0' : '-1' ); ?>\"\n\t\t\t\thref=\"<?php echo esc_url( $url ); ?>\"\n\t\t\t\taria-level=\"<?php echo esc_attr( $level ); ?>\"\n\t\t\t\taria-setsize=\"<?php echo esc_attr( $size ); ?>\"\n\t\t\t\taria-posinset=\"<?php echo esc_attr( $index ); ?>\">\n\t\t\t\t<?php\n\t\t\t\tif ( $file === $tree ) {\n\t\t\t\t\techo '<span class=\"notice notice-info\">' . esc_html( $label ) . '</span>';\n\t\t\t\t} else {\n\t\t\t\t\techo esc_html( $label );\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</a>\n\t\t</li>\n\t\t<?php\n\t}\n}\n\n/**\n * Flushes rewrite rules if siteurl, home or page_on_front changed.\n *\n * @since 2.1.0\n *\n * @param string $old_value\n * @param string $value\n */\nfunction update_home_siteurl( $old_value, $value ) {\n\tif ( wp_installing() ) {\n\t\treturn;\n\t}\n\n\tif ( is_multisite() && ms_is_switched() ) {\n\t\tdelete_option( 'rewrite_rules' );\n\t} else {\n\t\tflush_rewrite_rules();\n\t}\n}\n\n\n/**\n * Resets global variables based on $_GET and $_POST\n *\n * This function resets global variables based on the names passed\n * in the $vars array to the value of $_POST[$var] or $_GET[$var] or ''\n * if neither is defined.\n *\n * @since 2.0.0\n *\n * @param array $vars An array of globals to reset.\n */\nfunction wp_reset_vars( $vars ) {\n\tforeach ( $vars as $var ) {\n\t\tif ( empty( $_POST[ $var ] ) ) {\n\t\t\tif ( empty( $_GET[ $var ] ) ) {\n\t\t\t\t$GLOBALS[ $var ] = '';\n\t\t\t} else {\n\t\t\t\t$GLOBALS[ $var ] = $_GET[ $var ];\n\t\t\t}\n\t\t} else {\n\t\t\t$GLOBALS[ $var ] = $_POST[ $var ];\n\t\t}\n\t}\n}\n\n/**\n * Displays the given administration message.\n *\n * @since 2.1.0\n *\n * @param string|WP_Error $message\n */\nfunction show_message( $message ) {\n\tif ( is_wp_error( $message ) ) {\n\t\tif ( $message->get_error_data() && is_string( $message->get_error_data() ) ) {\n\t\t\t$message = $message->get_error_message() . ': ' . $message->get_error_data();\n\t\t} else {\n\t\t\t$message = $message->get_error_message();\n\t\t}\n\t}\n\techo \"<p>$message</p>\\n\";\n\twp_ob_end_flush_all();\n\tflush();\n}\n\n/**\n * @since 2.8.0\n *\n * @param string $content\n * @return array\n */\nfunction wp_doc_link_parse( $content ) {\n\tif ( ! is_string( $content ) || empty( $content ) ) {\n\t\treturn array();\n\t}\n\n\tif ( ! function_exists( 'token_get_all' ) ) {\n\t\treturn array();\n\t}\n\n\t$tokens           = token_get_all( $content );\n\t$count            = count( $tokens );\n\t$functions        = array();\n\t$ignore_functions = array();\n\tfor ( $t = 0; $t < $count - 2; $t++ ) {\n\t\tif ( ! is_array( $tokens[ $t ] ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ( T_STRING == $tokens[ $t ][0] && ( '(' == $tokens[ $t + 1 ] || '(' == $tokens[ $t + 2 ] ) ) {\n\t\t\t// If it's a function or class defined locally, there's not going to be any docs available.\n\t\t\tif ( ( isset( $tokens[ $t - 2 ][1] ) && in_array( $tokens[ $t - 2 ][1], array( 'function', 'class' ) ) ) || ( isset( $tokens[ $t - 2 ][0] ) && T_OBJECT_OPERATOR == $tokens[ $t - 1 ][0] ) ) {\n\t\t\t\t$ignore_functions[] = $tokens[ $t ][1];\n\t\t\t}\n\t\t\t// Add this to our stack of unique references.\n\t\t\t$functions[] = $tokens[ $t ][1];\n\t\t}\n\t}\n\n\t$functions = array_unique( $functions );\n\tsort( $functions );\n\n\t/**\n\t * Filters the list of functions and classes to be ignored from the documentation lookup.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string[] $ignore_functions Array of names of functions and classes to be ignored.\n\t */\n\t$ignore_functions = apply_filters( 'documentation_ignore_functions', $ignore_functions );\n\n\t$ignore_functions = array_unique( $ignore_functions );\n\n\t$out = array();\n\tforeach ( $functions as $function ) {\n\t\tif ( in_array( $function, $ignore_functions ) ) {\n\t\t\tcontinue;\n\t\t}\n\t\t$out[] = $function;\n\t}\n\n\treturn $out;\n}\n\n/**\n * Saves option for number of rows when listing posts, pages, comments, etc.\n *\n * @since 2.8.0\n */\nfunction set_screen_options() {\n\n\tif ( isset( $_POST['wp_screen_options'] ) && is_array( $_POST['wp_screen_options'] ) ) {\n\t\tcheck_admin_referer( 'screen-options-nonce', 'screenoptionnonce' );\n\n\t\t$user = wp_get_current_user();\n\t\tif ( ! $user ) {\n\t\t\treturn;\n\t\t}\n\t\t$option = $_POST['wp_screen_options']['option'];\n\t\t$value  = $_POST['wp_screen_options']['value'];\n\n\t\tif ( sanitize_key( $option ) != $option ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$map_option = $option;\n\t\t$type       = str_replace( 'edit_', '', $map_option );\n\t\t$type       = str_replace( '_per_page', '', $type );\n\t\tif ( in_array( $type, get_taxonomies() ) ) {\n\t\t\t$map_option = 'edit_tags_per_page';\n\t\t} elseif ( in_array( $type, get_post_types() ) ) {\n\t\t\t$map_option = 'edit_per_page';\n\t\t} else {\n\t\t\t$option = str_replace( '-', '_', $option );\n\t\t}\n\n\t\tswitch ( $map_option ) {\n\t\t\tcase 'edit_per_page':\n\t\t\tcase 'users_per_page':\n\t\t\tcase 'edit_comments_per_page':\n\t\t\tcase 'upload_per_page':\n\t\t\tcase 'edit_tags_per_page':\n\t\t\tcase 'plugins_per_page':\n\t\t\tcase 'export_personal_data_requests_per_page':\n\t\t\tcase 'remove_personal_data_requests_per_page':\n\t\t\t\t// Network admin.\n\t\t\tcase 'sites_network_per_page':\n\t\t\tcase 'users_network_per_page':\n\t\t\tcase 'site_users_network_per_page':\n\t\t\tcase 'plugins_network_per_page':\n\t\t\tcase 'themes_network_per_page':\n\t\t\tcase 'site_themes_network_per_page':\n\t\t\t\t$value = (int) $value;\n\t\t\t\tif ( $value < 1 || $value > 999 ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif ( '_page' === substr( $option, -5 ) || 'layout_columns' === $option ) {\n\t\t\t\t\t/**\n\t\t\t\t\t * Filters a screen option value before it is set.\n\t\t\t\t\t *\n\t\t\t\t\t * The filter can also be used to modify non-standard [items]_per_page\n\t\t\t\t\t * settings. See the parent function for a full list of standard options.\n\t\t\t\t\t *\n\t\t\t\t\t * Returning false to the filter will skip saving the current option.\n\t\t\t\t\t *\n\t\t\t\t\t * @since 2.8.0\n\t\t\t\t\t * @since 5.4.2 Only applied to options ending with '_page',\n\t\t\t\t\t *              or the 'layout_columns' option.\n\t\t\t\t\t *\n\t\t\t\t\t * @see set_screen_options()\n\t\t\t\t\t *\n\t\t\t\t\t * @param bool   $keep   Whether to save or skip saving the screen option value.\n\t\t\t\t\t *                       Default false.\n\t\t\t\t\t * @param string $option The option name.\n\t\t\t\t\t * @param int    $value  The number of rows to use.\n\t\t\t\t\t */\n\t\t\t\t\t$value = apply_filters( 'set-screen-option', false, $option, $value ); // phpcs:ignore WordPress.NamingConventions.ValidHookName.UseUnderscores\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * Filters a screen option value before it is set.\n\t\t\t\t *\n\t\t\t\t * The dynamic portion of the hook, `$option`, refers to the option name.\n\t\t\t\t *\n\t\t\t\t * Returning false to the filter will skip saving the current option.\n\t\t\t\t *\n\t\t\t\t * @since 5.4.2\n\t\t\t\t *\n\t\t\t\t * @see set_screen_options()\n\t\t\t\t *\n\t\t\t\t * @param bool   $keep   Whether to save or skip saving the screen option value.\n\t\t\t\t *                       Default false.\n\t\t\t\t * @param string $option The option name.\n\t\t\t\t * @param int    $value  The number of rows to use.\n\t\t\t\t */\n\t\t\t\t$value = apply_filters( \"set_screen_option_{$option}\", false, $option, $value );\n\n\t\t\t\tif ( false === $value ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tupdate_user_meta( $user->ID, $option, $value );\n\n\t\t$url = remove_query_arg( array( 'pagenum', 'apage', 'paged' ), wp_get_referer() );\n\t\tif ( isset( $_POST['mode'] ) ) {\n\t\t\t$url = add_query_arg( array( 'mode' => $_POST['mode'] ), $url );\n\t\t}\n\n\t\twp_safe_redirect( $url );\n\t\texit;\n\t}\n}\n\n/**\n * Check if rewrite rule for WordPress already exists in the IIS 7+ configuration file\n *\n * @since 2.8.0\n *\n * @return bool\n * @param string $filename The file path to the configuration file\n */\nfunction iis7_rewrite_rule_exists( $filename ) {\n\tif ( ! file_exists( $filename ) ) {\n\t\treturn false;\n\t}\n\tif ( ! class_exists( 'DOMDocument', false ) ) {\n\t\treturn false;\n\t}\n\n\t$doc = new DOMDocument();\n\tif ( $doc->load( $filename ) === false ) {\n\t\treturn false;\n\t}\n\t$xpath = new DOMXPath( $doc );\n\t$rules = $xpath->query( '/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'wordpress\\')] | /configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'WordPress\\')]' );\n\tif ( 0 == $rules->length ) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\n/**\n * Delete WordPress rewrite rule from web.config file if it exists there\n *\n * @since 2.8.0\n *\n * @param string $filename Name of the configuration file\n * @return bool\n */\nfunction iis7_delete_rewrite_rule( $filename ) {\n\t// If configuration file does not exist then rules also do not exist, so there is nothing to delete.\n\tif ( ! file_exists( $filename ) ) {\n\t\treturn true;\n\t}\n\n\tif ( ! class_exists( 'DOMDocument', false ) ) {\n\t\treturn false;\n\t}\n\n\t$doc                     = new DOMDocument();\n\t$doc->preserveWhiteSpace = false;\n\n\tif ( $doc->load( $filename ) === false ) {\n\t\treturn false;\n\t}\n\t$xpath = new DOMXPath( $doc );\n\t$rules = $xpath->query( '/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'wordpress\\')] | /configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'WordPress\\')]' );\n\tif ( $rules->length > 0 ) {\n\t\t$child  = $rules->item( 0 );\n\t\t$parent = $child->parentNode;\n\t\t$parent->removeChild( $child );\n\t\t$doc->formatOutput = true;\n\t\tsaveDomDocument( $doc, $filename );\n\t}\n\treturn true;\n}\n\n/**\n * Add WordPress rewrite rule to the IIS 7+ configuration file.\n *\n * @since 2.8.0\n *\n * @param string $filename The file path to the configuration file\n * @param string $rewrite_rule The XML fragment with URL Rewrite rule\n * @return bool\n */\nfunction iis7_add_rewrite_rule( $filename, $rewrite_rule ) {\n\tif ( ! class_exists( 'DOMDocument', false ) ) {\n\t\treturn false;\n\t}\n\n\t// If configuration file does not exist then we create one.\n\tif ( ! file_exists( $filename ) ) {\n\t\t$fp = fopen( $filename, 'w' );\n\t\tfwrite( $fp, '<configuration/>' );\n\t\tfclose( $fp );\n\t}\n\n\t$doc                     = new DOMDocument();\n\t$doc->preserveWhiteSpace = false;\n\n\tif ( $doc->load( $filename ) === false ) {\n\t\treturn false;\n\t}\n\n\t$xpath = new DOMXPath( $doc );\n\n\t// First check if the rule already exists as in that case there is no need to re-add it.\n\t$wordpress_rules = $xpath->query( '/configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'wordpress\\')] | /configuration/system.webServer/rewrite/rules/rule[starts-with(@name,\\'WordPress\\')]' );\n\tif ( $wordpress_rules->length > 0 ) {\n\t\treturn true;\n\t}\n\n\t// Check the XPath to the rewrite rule and create XML nodes if they do not exist.\n\t$xmlnodes = $xpath->query( '/configuration/system.webServer/rewrite/rules' );\n\tif ( $xmlnodes->length > 0 ) {\n\t\t$rules_node = $xmlnodes->item( 0 );\n\t} else {\n\t\t$rules_node = $doc->createElement( 'rules' );\n\n\t\t$xmlnodes = $xpath->query( '/configuration/system.webServer/rewrite' );\n\t\tif ( $xmlnodes->length > 0 ) {\n\t\t\t$rewrite_node = $xmlnodes->item( 0 );\n\t\t\t$rewrite_node->appendChild( $rules_node );\n\t\t} else {\n\t\t\t$rewrite_node = $doc->createElement( 'rewrite' );\n\t\t\t$rewrite_node->appendChild( $rules_node );\n\n\t\t\t$xmlnodes = $xpath->query( '/configuration/system.webServer' );\n\t\t\tif ( $xmlnodes->length > 0 ) {\n\t\t\t\t$system_webServer_node = $xmlnodes->item( 0 );\n\t\t\t\t$system_webServer_node->appendChild( $rewrite_node );\n\t\t\t} else {\n\t\t\t\t$system_webServer_node = $doc->createElement( 'system.webServer' );\n\t\t\t\t$system_webServer_node->appendChild( $rewrite_node );\n\n\t\t\t\t$xmlnodes = $xpath->query( '/configuration' );\n\t\t\t\tif ( $xmlnodes->length > 0 ) {\n\t\t\t\t\t$config_node = $xmlnodes->item( 0 );\n\t\t\t\t\t$config_node->appendChild( $system_webServer_node );\n\t\t\t\t} else {\n\t\t\t\t\t$config_node = $doc->createElement( 'configuration' );\n\t\t\t\t\t$doc->appendChild( $config_node );\n\t\t\t\t\t$config_node->appendChild( $system_webServer_node );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t$rule_fragment = $doc->createDocumentFragment();\n\t$rule_fragment->appendXML( $rewrite_rule );\n\t$rules_node->appendChild( $rule_fragment );\n\n\t$doc->encoding     = 'UTF-8';\n\t$doc->formatOutput = true;\n\tsaveDomDocument( $doc, $filename );\n\n\treturn true;\n}\n\n/**\n * Saves the XML document into a file\n *\n * @since 2.8.0\n *\n * @param DOMDocument $doc\n * @param string $filename\n */\nfunction saveDomDocument( $doc, $filename ) { // phpcs:ignore WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid\n\t$config = $doc->saveXML();\n\t$config = preg_replace( \"/([^\\r])\\n/\", \"$1\\r\\n\", $config );\n\t$fp     = fopen( $filename, 'w' );\n\tfwrite( $fp, $config );\n\tfclose( $fp );\n}\n\n/**\n * Display the default admin color scheme picker (Used in user-edit.php)\n *\n * @since 3.0.0\n *\n * @global array $_wp_admin_css_colors\n *\n * @param int $user_id User ID.\n */\nfunction admin_color_scheme_picker( $user_id ) {\n\tglobal $_wp_admin_css_colors;\n\n\tksort( $_wp_admin_css_colors );\n\n\tif ( isset( $_wp_admin_css_colors['fresh'] ) ) {\n\t\t// Set Default ('fresh') and Light should go first.\n\t\t$_wp_admin_css_colors = array_filter(\n\t\t\tarray_merge(\n\t\t\t\tarray(\n\t\t\t\t\t'fresh' => '',\n\t\t\t\t\t'light' => '',\n\t\t\t\t),\n\t\t\t\t$_wp_admin_css_colors\n\t\t\t)\n\t\t);\n\t}\n\n\t$current_color = get_user_option( 'admin_color', $user_id );\n\n\tif ( empty( $current_color ) || ! isset( $_wp_admin_css_colors[ $current_color ] ) ) {\n\t\t$current_color = 'fresh';\n\t}\n\n\t?>\n\t<fieldset id=\"color-picker\" class=\"scheme-list\">\n\t\t<legend class=\"screen-reader-text\"><span><?php _e( 'Admin Color Scheme' ); ?></span></legend>\n\t\t<?php\n\t\twp_nonce_field( 'save-color-scheme', 'color-nonce', false );\n\t\tforeach ( $_wp_admin_css_colors as $color => $color_info ) :\n\n\t\t\t?>\n\t\t\t<div class=\"color-option <?php echo ( $color == $current_color ) ? 'selected' : ''; ?>\">\n\t\t\t\t<input name=\"admin_color\" id=\"admin_color_<?php echo esc_attr( $color ); ?>\" type=\"radio\" value=\"<?php echo esc_attr( $color ); ?>\" class=\"tog\" <?php checked( $color, $current_color ); ?> />\n\t\t\t\t<input type=\"hidden\" class=\"css_url\" value=\"<?php echo esc_url( $color_info->url ); ?>\" />\n\t\t\t\t<input type=\"hidden\" class=\"icon_colors\" value=\"<?php echo esc_attr( wp_json_encode( array( 'icons' => $color_info->icon_colors ) ) ); ?>\" />\n\t\t\t\t<label for=\"admin_color_<?php echo esc_attr( $color ); ?>\"><?php echo esc_html( $color_info->name ); ?></label>\n\t\t\t\t<table class=\"color-palette\">\n\t\t\t\t\t<tr>\n\t\t\t\t\t<?php\n\n\t\t\t\t\tforeach ( $color_info->colors as $html_color ) {\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<td style=\"background-color: <?php echo esc_attr( $html_color ); ?>\">&nbsp;</td>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t}\n\n\t\t\t\t\t?>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t\t<?php\n\n\t\tendforeach;\n\n\t\t?>\n\t</fieldset>\n\t<?php\n}\n\n/**\n *\n * @global array $_wp_admin_css_colors\n */\nfunction wp_color_scheme_settings() {\n\tglobal $_wp_admin_css_colors;\n\n\t$color_scheme = get_user_option( 'admin_color' );\n\n\t// It's possible to have a color scheme set that is no longer registered.\n\tif ( empty( $_wp_admin_css_colors[ $color_scheme ] ) ) {\n\t\t$color_scheme = 'fresh';\n\t}\n\n\tif ( ! empty( $_wp_admin_css_colors[ $color_scheme ]->icon_colors ) ) {\n\t\t$icon_colors = $_wp_admin_css_colors[ $color_scheme ]->icon_colors;\n\t} elseif ( ! empty( $_wp_admin_css_colors['fresh']->icon_colors ) ) {\n\t\t$icon_colors = $_wp_admin_css_colors['fresh']->icon_colors;\n\t} else {\n\t\t// Fall back to the default set of icon colors if the default scheme is missing.\n\t\t$icon_colors = array(\n\t\t\t'base'    => '#a0a5aa',\n\t\t\t'focus'   => '#00a0d2',\n\t\t\t'current' => '#fff',\n\t\t);\n\t}\n\n\techo '<script type=\"text/javascript\">var _wpColorScheme = ' . wp_json_encode( array( 'icons' => $icon_colors ) ) . \";</script>\\n\";\n}\n\n/**\n * @since 3.3.0\n */\nfunction _ipad_meta() {\n\tif ( wp_is_mobile() ) {\n\t\t?>\n\t\t<meta name=\"viewport\" id=\"viewport-meta\" content=\"width=device-width, initial-scale=1\">\n\t\t<?php\n\t}\n}\n\n/**\n * Check lock status for posts displayed on the Posts screen\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n */\nfunction wp_check_locked_posts( $response, $data, $screen_id ) {\n\t$checked = array();\n\n\tif ( array_key_exists( 'wp-check-locked-posts', $data ) && is_array( $data['wp-check-locked-posts'] ) ) {\n\t\tforeach ( $data['wp-check-locked-posts'] as $key ) {\n\t\t\t$post_id = absint( substr( $key, 5 ) );\n\t\t\tif ( ! $post_id ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$user_id = wp_check_post_lock( $post_id );\n\t\t\tif ( $user_id ) {\n\t\t\t\t$user = get_userdata( $user_id );\n\t\t\t\tif ( $user && current_user_can( 'edit_post', $post_id ) ) {\n\t\t\t\t\t$send = array(\n\t\t\t\t\t\t/* translators: %s: User's display name. */\n\t\t\t\t\t\t'text' => sprintf( __( '%s is currently editing' ), $user->display_name ),\n\t\t\t\t\t);\n\n\t\t\t\t\t$avatar = get_avatar( $user->ID, 18 );\n\t\t\t\t\tif ( $avatar && preg_match( \"|src='([^']+)'|\", $avatar, $matches ) ) {\n\t\t\t\t\t\t$send['avatar_src'] = $matches[1];\n\t\t\t\t\t}\n\n\t\t\t\t\t$checked[ $key ] = $send;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( ! empty( $checked ) ) {\n\t\t$response['wp-check-locked-posts'] = $checked;\n\t}\n\n\treturn $response;\n}\n\n/**\n * Check lock status on the New/Edit Post screen and refresh the lock\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n */\nfunction wp_refresh_post_lock( $response, $data, $screen_id ) {\n\tif ( array_key_exists( 'wp-refresh-post-lock', $data ) ) {\n\t\t$received = $data['wp-refresh-post-lock'];\n\t\t$send     = array();\n\n\t\t$post_id = absint( $received['post_id'] );\n\t\tif ( ! $post_id ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\t$user_id = wp_check_post_lock( $post_id );\n\t\t$user    = get_userdata( $user_id );\n\t\tif ( $user ) {\n\t\t\t$error = array(\n\t\t\t\t/* translators: %s: User's display name. */\n\t\t\t\t'text' => sprintf( __( '%s has taken over and is currently editing.' ), $user->display_name ),\n\t\t\t);\n\n\t\t\t$avatar = get_avatar( $user->ID, 64 );\n\t\t\tif ( $avatar ) {\n\t\t\t\tif ( preg_match( \"|src='([^']+)'|\", $avatar, $matches ) ) {\n\t\t\t\t\t$error['avatar_src'] = $matches[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$send['lock_error'] = $error;\n\t\t} else {\n\t\t\t$new_lock = wp_set_post_lock( $post_id );\n\t\t\tif ( $new_lock ) {\n\t\t\t\t$send['new_lock'] = implode( ':', $new_lock );\n\t\t\t}\n\t\t}\n\n\t\t$response['wp-refresh-post-lock'] = $send;\n\t}\n\n\treturn $response;\n}\n\n/**\n * Check nonce expiration on the New/Edit Post screen and refresh if needed\n *\n * @since 3.6.0\n *\n * @param array  $response  The Heartbeat response.\n * @param array  $data      The $_POST data sent.\n * @param string $screen_id The screen id.\n * @return array The Heartbeat response.\n */\nfunction wp_refresh_post_nonces( $response, $data, $screen_id ) {\n\tif ( array_key_exists( 'wp-refresh-post-nonces', $data ) ) {\n\t\t$received                           = $data['wp-refresh-post-nonces'];\n\t\t$response['wp-refresh-post-nonces'] = array( 'check' => 1 );\n\n\t\t$post_id = absint( $received['post_id'] );\n\t\tif ( ! $post_id ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\tif ( ! current_user_can( 'edit_post', $post_id ) ) {\n\t\t\treturn $response;\n\t\t}\n\n\t\t$response['wp-refresh-post-nonces'] = array(\n\t\t\t'replace' => array(\n\t\t\t\t'getpermalinknonce'    => wp_create_nonce( 'getpermalink' ),\n\t\t\t\t'samplepermalinknonce' => wp_create_nonce( 'samplepermalink' ),\n\t\t\t\t'closedpostboxesnonce' => wp_create_nonce( 'closedpostboxes' ),\n\t\t\t\t'_ajax_linking_nonce'  => wp_create_nonce( 'internal-linking' ),\n\t\t\t\t'_wpnonce'             => wp_create_nonce( 'update-post_' . $post_id ),\n\t\t\t),\n\t\t);\n\t}\n\n\treturn $response;\n}\n\n/**\n * Add the latest Heartbeat and REST-API nonce to the Heartbeat response.\n *\n * @since 5.0.0\n *\n * @param array  $response  The Heartbeat response.\n * @return array The Heartbeat response.\n */\nfunction wp_refresh_heartbeat_nonces( $response ) {\n\t// Refresh the Rest API nonce.\n\t$response['rest_nonce'] = wp_create_nonce( 'wp_rest' );\n\n\t// Refresh the Heartbeat nonce.\n\t$response['heartbeat_nonce'] = wp_create_nonce( 'heartbeat-nonce' );\n\treturn $response;\n}\n\n/**\n * Disable suspension of Heartbeat on the Add/Edit Post screens.\n *\n * @since 3.8.0\n *\n * @global string $pagenow\n *\n * @param array $settings An array of Heartbeat settings.\n * @return array Filtered Heartbeat settings.\n */\nfunction wp_heartbeat_set_suspension( $settings ) {\n\tglobal $pagenow;\n\n\tif ( 'post.php' === $pagenow || 'post-new.php' === $pagenow ) {\n\t\t$settings['suspension'] = 'disable';\n\t}\n\n\treturn $settings;\n}\n\n/**\n * Autosave with heartbeat\n *\n * @since 3.9.0\n *\n * @param array $response The Heartbeat response.\n * @param array $data     The $_POST data sent.\n * @return array The Heartbeat response.\n */\nfunction heartbeat_autosave( $response, $data ) {\n\tif ( ! empty( $data['wp_autosave'] ) ) {\n\t\t$saved = wp_autosave( $data['wp_autosave'] );\n\n\t\tif ( is_wp_error( $saved ) ) {\n\t\t\t$response['wp_autosave'] = array(\n\t\t\t\t'success' => false,\n\t\t\t\t'message' => $saved->get_error_message(),\n\t\t\t);\n\t\t} elseif ( empty( $saved ) ) {\n\t\t\t$response['wp_autosave'] = array(\n\t\t\t\t'success' => false,\n\t\t\t\t'message' => __( 'Error while saving.' ),\n\t\t\t);\n\t\t} else {\n\t\t\t/* translators: Draft saved date format, see https://www.php.net/date */\n\t\t\t$draft_saved_date_format = __( 'g:i:s a' );\n\t\t\t$response['wp_autosave'] = array(\n\t\t\t\t'success' => true,\n\t\t\t\t/* translators: %s: Date and time. */\n\t\t\t\t'message' => sprintf( __( 'Draft saved at %s.' ), date_i18n( $draft_saved_date_format ) ),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn $response;\n}\n\n/**\n * Remove single-use URL parameters and create canonical link based on new URL.\n *\n * Remove specific query string parameters from a URL, create the canonical link,\n * put it in the admin header, and change the current URL to match.\n *\n * @since 4.2.0\n */\nfunction wp_admin_canonical_url() {\n\t$removable_query_args = wp_removable_query_args();\n\n\tif ( empty( $removable_query_args ) ) {\n\t\treturn;\n\t}\n\n\t// Ensure we're using an absolute URL.\n\t$current_url  = set_url_scheme( 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'] );\n\t$filtered_url = remove_query_arg( $removable_query_args, $current_url );\n\t?>\n\t<link id=\"wp-admin-canonical\" rel=\"canonical\" href=\"<?php echo esc_url( $filtered_url ); ?>\" />\n\t<script>\n\t\tif ( window.history.replaceState ) {\n\t\t\twindow.history.replaceState( null, null, document.getElementById( 'wp-admin-canonical' ).href + window.location.hash );\n\t\t}\n\t</script>\n\t<?php\n}\n\n/**\n * Send a referrer policy header so referrers are not sent externally from administration screens.\n *\n * @since 4.9.0\n */\nfunction wp_admin_headers() {\n\t$policy = 'strict-origin-when-cross-origin';\n\n\t/**\n\t * Filters the admin referrer policy header value.\n\t *\n\t * @since 4.9.0\n\t * @since 4.9.5 The default value was changed to 'strict-origin-when-cross-origin'.\n\t *\n\t * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\n\t *\n\t * @param string $policy The admin referrer policy header value. Default 'strict-origin-when-cross-origin'.\n\t */\n\t$policy = apply_filters( 'admin_referrer_policy', $policy );\n\n\theader( sprintf( 'Referrer-Policy: %s', $policy ) );\n}\n\n/**\n * Outputs JS that reloads the page if the user navigated to it with the Back or Forward button.\n *\n * Used on the Edit Post and Add New Post screens. Needed to ensure the page is not loaded from browser cache,\n * so the post title and editor content are the last saved versions. Ideally this script should run first in the head.\n *\n * @since 4.6.0\n */\nfunction wp_page_reload_on_back_button_js() {\n\t?>\n\t<script>\n\t\tif ( typeof performance !== 'undefined' && performance.navigation && performance.navigation.type === 2 ) {\n\t\t\tdocument.location.reload( true );\n\t\t}\n\t</script>\n\t<?php\n}\n\n/**\n * Send a confirmation request email when a change of site admin email address is attempted.\n *\n * The new site admin address will not become active until confirmed.\n *\n * @since 3.0.0\n * @since 4.9.0 This function was moved from wp-admin/includes/ms.php so it's no longer Multisite specific.\n *\n * @param string $old_value The old site admin email address.\n * @param string $value     The proposed new site admin email address.\n */\nfunction update_option_new_admin_email( $old_value, $value ) {\n\tif ( get_option( 'admin_email' ) === $value || ! is_email( $value ) ) {\n\t\treturn;\n\t}\n\n\t$hash            = md5( $value . time() . wp_rand() );\n\t$new_admin_email = array(\n\t\t'hash'     => $hash,\n\t\t'newemail' => $value,\n\t);\n\tupdate_option( 'adminhash', $new_admin_email );\n\n\t$switched_locale = switch_to_locale( get_user_locale() );\n\n\t/* translators: Do not translate USERNAME, ADMIN_URL, EMAIL, SITENAME, SITEURL: those are placeholders. */\n\t$email_text = __(\n\t\t'Howdy ###USERNAME###,\n\nYou recently requested to have the administration email address on\nyour site changed.\n\nIf this is correct, please click on the following link to change it:\n###ADMIN_URL###\n\nYou can safely ignore and delete this email if you do not want to\ntake this action.\n\nThis email has been sent to ###EMAIL###\n\nRegards,\nAll at ###SITENAME###\n###SITEURL###'\n\t);\n\n\t/**\n\t * Filters the text of the email sent when a change of site admin email address is attempted.\n\t *\n\t * The following strings have a special meaning and will get replaced dynamically:\n\t * ###USERNAME###  The current user's username.\n\t * ###ADMIN_URL### The link to click on to confirm the email change.\n\t * ###EMAIL###     The proposed new site admin email address.\n\t * ###SITENAME###  The name of the site.\n\t * ###SITEURL###   The URL to the site.\n\t *\n\t * @since MU (3.0.0)\n\t * @since 4.9.0 This filter is no longer Multisite specific.\n\t *\n\t * @param string $email_text      Text in the email.\n\t * @param array  $new_admin_email {\n\t *     Data relating to the new site admin email address.\n\t *\n\t *     @type string $hash     The secure hash used in the confirmation link URL.\n\t *     @type string $newemail The proposed new site admin email address.\n\t * }\n\t */\n\t$content = apply_filters( 'new_admin_email_content', $email_text, $new_admin_email );\n\n\t$current_user = wp_get_current_user();\n\t$content      = str_replace( '###USERNAME###', $current_user->user_login, $content );\n\t$content      = str_replace( '###ADMIN_URL###', esc_url( self_admin_url( 'options.php?adminhash=' . $hash ) ), $content );\n\t$content      = str_replace( '###EMAIL###', $value, $content );\n\t$content      = str_replace( '###SITENAME###', wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES ), $content );\n\t$content      = str_replace( '###SITEURL###', home_url(), $content );\n\n\twp_mail(\n\t\t$value,\n\t\tsprintf(\n\t\t\t/* translators: New admin email address notification email subject. %s: Site title. */\n\t\t\t__( '[%s] New Admin Email Address' ),\n\t\t\twp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES )\n\t\t),\n\t\t$content\n\t);\n\n\tif ( $switched_locale ) {\n\t\trestore_previous_locale();\n\t}\n}\n\n/**\n * Appends '(Draft)' to draft page titles in the privacy page dropdown\n * so that unpublished content is obvious.\n *\n * @since 4.9.8\n * @access private\n *\n * @param string  $title Page title.\n * @param WP_Post $page  Page data object.\n *\n * @return string Page title.\n */\nfunction _wp_privacy_settings_filter_draft_page_titles( $title, $page ) {\n\tif ( 'draft' === $page->post_status && 'privacy' === get_current_screen()->id ) {\n\t\t/* translators: %s: Page title. */\n\t\t$title = sprintf( __( '%s (Draft)' ), $title );\n\t}\n\n\treturn $title;\n}\n\n/**\n * Checks if the user needs to update PHP.\n *\n * @since 5.1.0\n * @since 5.1.1 Added the {@see 'wp_is_php_version_acceptable'} filter.\n *\n * @return array|false $response Array of PHP version data. False on failure.\n */\nfunction wp_check_php_version() {\n\t$version = phpversion();\n\t$key     = md5( $version );\n\n\t$response = get_site_transient( 'php_check_' . $key );\n\tif ( false === $response ) {\n\t\t$url = 'http://api.wordpress.org/core/serve-happy/1.0/';\n\t\tif ( wp_http_supports( array( 'ssl' ) ) ) {\n\t\t\t$url = set_url_scheme( $url, 'https' );\n\t\t}\n\n\t\t$url = add_query_arg( 'php_version', $version, $url );\n\n\t\t$response = wp_remote_get( $url );\n\n\t\tif ( is_wp_error( $response ) || 200 !== wp_remote_retrieve_response_code( $response ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t/**\n\t\t * Response should be an array with:\n\t\t *  'recommended_version' - string - The PHP version recommended by WordPress.\n\t\t *  'is_supported' - boolean - Whether the PHP version is actively supported.\n\t\t *  'is_secure' - boolean - Whether the PHP version receives security updates.\n\t\t *  'is_acceptable' - boolean - Whether the PHP version is still acceptable for WordPress.\n\t\t */\n\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\n\t\tif ( ! is_array( $response ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tset_site_transient( 'php_check_' . $key, $response, WEEK_IN_SECONDS );\n\t}\n\n\tif ( isset( $response['is_acceptable'] ) && $response['is_acceptable'] ) {\n\t\t/**\n\t\t * Filters whether the active PHP version is considered acceptable by WordPress.\n\t\t *\n\t\t * Returning false will trigger a PHP version warning to show up in the admin dashboard to administrators.\n\t\t *\n\t\t * This filter is only run if the wordpress.org Serve Happy API considers the PHP version acceptable, ensuring\n\t\t * that this filter can only make this check stricter, but not loosen it.\n\t\t *\n\t\t * @since 5.1.1\n\t\t *\n\t\t * @param bool   $is_acceptable Whether the PHP version is considered acceptable. Default true.\n\t\t * @param string $version       PHP version checked.\n\t\t */\n\t\t$response['is_acceptable'] = (bool) apply_filters( 'wp_is_php_version_acceptable', true, $version );\n\t}\n\n\treturn $response;\n}\n"], "filenames": ["src/wp-admin/includes/misc.php"], "buggy_code_start_loc": [688], "buggy_code_end_loc": [706], "fixing_code_start_loc": [689], "fixing_code_end_loc": [729], "type": "CWE-288", "message": "In affected versions of WordPress, misuse of the `set-screen-option` filter's return value allows arbitrary user meta fields to be saved. It does require an admin to install a plugin that would misuse the filter. Once installed, it can be leveraged by low privileged users. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34).", "other": {"cve": {"id": "CVE-2020-4050", "sourceIdentifier": "security-advisories@github.com", "published": "2020-06-12T16:15:10.793", "lastModified": "2023-02-27T18:20:21.087", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In affected versions of WordPress, misuse of the `set-screen-option` filter's return value allows arbitrary user meta fields to be saved. It does require an admin to install a plugin that would misuse the filter. Once installed, it can be leveraged by low privileged users. This has been patched in version 5.4.2, along with all the previously affected versions via a minor release (5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34)."}, {"lang": "es", "value": "En las versiones afectadas de WordPress, el uso incorrecto del valor de retorno del filtro \"set-screen-option\", permite que campos meta arbitrarios del usuario sean guardados. Requiere que un administrador instale un plugin que pueda usar incorrectamente el filtro. Una vez instalado, pueden ser aprovechados por los usuarios con poco privilegiados. Esto ha sido parcheado en la versi\u00f3n 5.4.2, junto con todas las versiones afectadas anteriormente por medio de una versi\u00f3n menor (versiones 5.3.4, 5.2.7, 5.1.6, 5.0.10, 4.9.15, 4.8.14, 4.7.18, 4.6.19, 4.5.22, 4.4.23, 4.3.24, 4.2.28, 4.1.31, 4.0.31, 3.9.32, 3.8.34, 3.7.34)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.1, "baseSeverity": "LOW"}, "exploitabilityScore": 1.6, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-288"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.7", "versionEndExcluding": "3.7.34", "matchCriteriaId": "67D72FAA-7968-4A6C-AEEB-6E67B330C0F1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.8", "versionEndExcluding": "3.8.34", "matchCriteriaId": "160A1456-677B-42B1-9559-895571365DB2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.9", "versionEndExcluding": "3.9.32", "matchCriteriaId": "82A1A5C0-148F-4AFD-A806-8A972D1D5257"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.0", "versionEndExcluding": "4.0.31", "matchCriteriaId": "6266BB9D-8266-4E86-9955-9A73E2E9F365"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.1", "versionEndExcluding": "4.1.31", "matchCriteriaId": "A34D6D45-363A-4426-8BED-A1850BCF658A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.2", "versionEndExcluding": "4.2.28", "matchCriteriaId": "5EAAF57C-586A-424A-8231-DCFB619829D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.3", "versionEndExcluding": "4.3.24", "matchCriteriaId": "24F9EBD8-A2F0-447C-A3A4-BEAE0BB7C1D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.4", "versionEndExcluding": "4.4.23", "matchCriteriaId": "19926F93-81E2-42CF-9367-3DECF5B3AB4B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.5", "versionEndExcluding": "4.5.22", "matchCriteriaId": "AAD6A986-8169-4B8A-9881-D7DA6B0F5E51"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.6", "versionEndExcluding": "4.6.19", "matchCriteriaId": "20CB8A83-705A-41CD-A6CF-0D2E90A076CD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.7", "versionEndExcluding": "4.7.18", "matchCriteriaId": "802504AF-67C7-4F98-8420-7F476CE13D71"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.8", "versionEndExcluding": "4.8.14", "matchCriteriaId": "021BC2EA-D165-47CA-B8A0-DA501086EC62"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.9", "versionEndExcluding": "4.9.15", "matchCriteriaId": "51132C16-BA57-4241-A577-768089CB4B6E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0", "versionEndExcluding": "5.0.10", "matchCriteriaId": "6C9006BA-CBAF-4688-97A4-0AD6FFAACB85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.1", "versionEndExcluding": "5.1.6", "matchCriteriaId": "61356333-054E-4931-AA63-40AA5FC67F48"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.2", "versionEndExcluding": "5.2.7", "matchCriteriaId": "1F45140E-0E95-456B-ACB2-A01BB49485AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.3.0", "versionEndExcluding": "5.3.4", "matchCriteriaId": "FAB63ED5-4756-4EA3-8AEB-951A47BEBDD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.4", "versionEndExcluding": "5.4.2", "matchCriteriaId": "C9673216-8B08-4144-832B-E51D66C595B5"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:31:*:*:*:*:*:*:*", "matchCriteriaId": "80F0FA5D-8D3B-4C0E-81E2-87998286AF33"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:32:*:*:*:*:*:*:*", "matchCriteriaId": "36D96259-24BD-44E2-96D9-78CE1D41F956"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://github.com/WordPress/wordpress-develop/commit/b8dea76b495f0072523106c6ec46b9ea0d2a0920", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/WordPress/wordpress-develop/security/advisories/GHSA-4vpv-fgg2-gcqc", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/07/msg00000.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2020/09/msg00011.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/773N2ZV7QEMBGKH6FBKI6Q5S3YJMW357/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/ODNHXVJS25YVWYQHOCICXTLIN5UYJFDN/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://wordpress.org/news/2020/06/wordpress-5-4-2-security-and-maintenance-release/", "source": "security-advisories@github.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://www.debian.org/security/2020/dsa-4709", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/wordpress-develop/commit/b8dea76b495f0072523106c6ec46b9ea0d2a0920"}}