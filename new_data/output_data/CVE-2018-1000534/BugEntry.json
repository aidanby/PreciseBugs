{"buggy_code": ["# Joplin\n\n[![Donate](https://joplin.cozic.net/images/badges/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=E8JMYD2LQ8MMA&lc=GB&item_name=Joplin+Development&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted) [![Donate with Bitcoin](https://joplin.cozic.net/images/badges/Donate-Bitcoin.svg)](https://joplin.cozic.net/donate/#bitcoin) [![Travis Build Status](https://travis-ci.org/laurent22/joplin.svg?branch=master)](https://travis-ci.org/laurent22/joplin) [![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/github/laurent22/joplin?branch=master&passingText=master%20-%20OK&svg=true)](https://ci.appveyor.com/project/laurent22/joplin)\n\nJoplin is a free, open source note taking and to-do application, which can handle a large number of notes organised into notebooks. The notes are searchable, can be copied, tagged and modified either from the applications directly or from your own text editor. The notes are in [Markdown format](#markdown).\n\nNotes exported from Evernote via .enex files [can be imported](#importing) into Joplin, including the formatted content (which is converted to Markdown), resources (images, attachments, etc.) and complete metadata (geolocation, updated time, created time, etc.). Plain Markdown files can also be imported.\n\nThe notes can be [synchronised](#synchronisation) with various cloud services including [Nextcloud](https://nextcloud.com/), Dropbox, OneDrive or the file system (for example with a network directory). When synchronising the notes, notebooks, tags and other metadata are saved to plain text files which can be easily inspected, backed up and moved around.\n\nThe UI of the terminal client is built on top of the great [terminal-kit](https://github.com/cronvel/terminal-kit) library, the desktop client using [Electron](https://electronjs.org/), and the Android client front end is done using [React Native](https://facebook.github.io/react-native/).\n\n<div class=\"top-screenshot\"><img src=\"https://joplin.cozic.net/images/AllClients.jpg\" style=\"max-width: 100%; max-height: 35em;\"></div>\n\n# Installation\n\nThree types of applications are available: for the **desktop** (Windows, macOS and Linux), for **mobile** (Android and iOS) and for **terminal** (Windows, macOS and Linux). All applications have similar user interfaces and can synchronise with each others.\n\n## Desktop applications\n\nOperating System | Download | Alternative\n-----------------|--------|-------------------\nWindows (32 and 64-bit)         | <a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.exe'><img alt='Get it on Windows' height=\"40px\" src='https://joplin.cozic.net/images/BadgeWindows.png'/></a> | \nmacOS          | <a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.dmg'><img alt='Get it on macOS' height=\"40px\" src='https://joplin.cozic.net/images/BadgeMacOS.png'/></a> | \nLinux          | <a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89-x86_64.AppImage'><img alt='Get it on Linux' height=\"40px\" src='https://joplin.cozic.net/images/BadgeLinux.png'/></a> | An Arch Linux package [is also available](#terminal-application).\n\n## Mobile applications\n\nOperating System | Download | Alt. Download\n-----------------|----------|----------------\nAndroid          | <a href='https://play.google.com/store/apps/details?id=net.cozic.joplin&utm_source=GitHub&utm_campaign=README&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' height=\"40px\" src='https://joplin.cozic.net/images/BadgeAndroid.png'/></a> | or [Download APK File](https://github.com/laurent22/joplin-android/releases/download/android-v1.0.123/joplin-v1.0.123.apk)\niOS              | <a href='https://itunes.apple.com/us/app/joplin/id1315599797'><img alt='Get it on the App Store' height=\"40px\" src='https://joplin.cozic.net/images/BadgeIOS.png'/></a> | -\n\n## Terminal application\n\nOperating system | Method\n-----------------|----------------\nmacOS            | `brew install joplin`\nLinux or Windows (via [WSL](https://msdn.microsoft.com/en-us/commandline/wsl/faq?f=255&MSPPError=-2147217396)) | **Important:** First, [install Node 8+](https://nodejs.org/en/download/package-manager/). Node 8 is LTS but not yet available everywhere so you might need to manually install it.<br/><br/>`NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin`<br/>`sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin`<br><br>By default, the application binary will be installed under `~/.joplin-bin`. You may change this directory if needed. Alternatively, if your npm permissions are setup as described [here](https://docs.npmjs.com/getting-started/fixing-npm-permissions#option-2-change-npms-default-directory-to-another-directory) (Option 2) then simply running `npm -g install joplin` would work.\nArch Linux | An Arch Linux package is available [here](https://aur.archlinux.org/packages/joplin/). To install it, use an AUR wrapper such as yay: `yay -S joplin`. Both the CLI tool (type `joplin`) and desktop app (type `joplin-desktop`) are packaged. For support, please go to the [GitHub repo](https://github.com/masterkorp/joplin-pkgbuild).\n\nTo start it, type `joplin`.\n\nFor usage information, please refer to the full [Joplin Terminal Application Documentation](https://joplin.cozic.net/terminal).\n\n<!-- TOC -->\n# Table of contents\n\n- Applications\n\n\t- [Desktop application](https://github.com/laurent22/joplin/blob/master/readme/desktop.md)\n\t- [Mobile applications](https://github.com/laurent22/joplin/blob/master/readme/mobile.md)\n\t- [Terminal application](https://github.com/laurent22/joplin/blob/master/readme/terminal.md)\n\n- Support\n\n\t- [Joplin Forum](https://discourse.joplin.cozic.net)\n\t- [How to enable end-to-end encryption](https://github.com/laurent22/joplin/blob/master/readme/e2ee.md)\n\t- [End-to-end encryption spec](https://github.com/laurent22/joplin/blob/master/readme/spec.md)\n\t- [How to enable debug mode](https://github.com/laurent22/joplin/blob/master/readme/debugging.md)\n\t- [FAQ](https://github.com/laurent22/joplin/blob/master/readme/faq.md)\n\n- About\n\n\t- [Changelog](https://github.com/laurent22/joplin/blob/master/readme/changelog.md)\n\t- [Stats](https://github.com/laurent22/joplin/blob/master/readme/stats.md)\n\t- [Donate](https://github.com/laurent22/joplin/blob/master/readme/donate.md)\n<!-- TOC -->\n\n# Features \n\n- Desktop, mobile and terminal applications.\n- End To End Encryption (E2EE)\n- Synchronisation with various services, including NextCloud, Dropbox, WebDAV and OneDrive.\n- Import Enex files (Evernote export format) and Markdown files.\n- Export JEX files (Joplin Export format) and raw files.\n- Support notes, to-dos, tags and notebooks.\n- Sort notes by multiple criteria - title, updated time, etc.\n- Support for alarms (notifications) in mobile and desktop applications.\n- Offline first, so the entire data is always available on the device even without an internet connection.\n- Markdown notes, which are rendered with images and formatting in the desktop and mobile applications. Support for extra features such as math notation and checkboxes.\n- File attachment support - images are displayed, and other files are linked and can be opened in the relevant application.\n- Search functionality.\n- Geo-location support.\n- Supports multiple languages\n\n# Importing\n\n## Importing from Evernote \n\nJoplin was designed as a replacement for Evernote and so can import complete Evernote notebooks, as well as notes, tags, resources (attached files) and note metadata (such as author, geo-location, etc.) via ENEX files. In terms of data, the only two things that might slightly differ are:\n\n- Recognition data - Evernote images, in particular scanned (or photographed) documents have [recognition data](https://en.wikipedia.org/wiki/Optical_character_recognition) associated with them. It is the text that Evernote has been able to recognise in the document. This data is not preserved when the note are imported into Joplin. However, should it become supported in the search tool or other parts of Joplin, it should be possible to regenerate this recognition data since the actual image would still be available.\n\n- Colour, font sizes and faces - Evernote text is stored as HTML and this is converted to Markdown during the import process. For notes that are mostly plain text or with basic formatting (bold, italic, bullet points, links, etc.) this is a lossless conversion, and the note, once rendered back to HTML should be very similar. Tables are also imported and converted to Markdown tables. For very complex notes, some formatting data might be lost - in particular colours, font sizes and font faces will not be imported. The text itself however is always imported in full regardless of formatting.\n\nTo import Evernote data, first export your Evernote notebooks to ENEX files as described [here](https://help.evernote.com/hc/en-us/articles/209005557-How-to-back-up-export-and-restore-import-notes-and-notebooks). Then follow these steps:\n\nOn the **desktop application**, open File > Import > ENEX and select your file. The notes will be imported into a new separate notebook. If needed they can then be moved to a different notebook, or the notebook can be renamed, etc.\n\nOn the **terminal application**, in [command-line mode](https://joplin.cozic.net/terminal#command-line-mode), type `import /path/to/file.enex`. This will import the notes into a new notebook named after the filename.\n\n## Importing from Markdown files\n\nJoplin can import notes from plain Markdown file. You can either import a complete directory of Markdown files or individual files.\n\nOn the **desktop application**, open File > Import > MD and select your Markdown file or directory.\n\nOn the **terminal application**, in [command-line mode](https://joplin.cozic.net/terminal#command-line-mode), type `import --format md /path/to/file.md` or `import --format md /path/to/directory/`.\n\n## Importing from other applications\n\nIn general the way to import notes from any application into Joplin is to convert the notes to ENEX files (Evernote format) and to import these ENEX files into Joplin using the method above. Most note-taking applications support ENEX files so it should be relatively straightforward. For help about specific applications, see below:\n\n* Standard Notes: Please see [this tutorial](https://programadorwebvalencia.com/migrate-notes-from-standard-notes-to-joplin/)\n* Tomboy Notes: Export the notes to ENEX files [as described here](https://askubuntu.com/questions/243691/how-can-i-export-my-tomboy-notes-into-evernote/608551) for example, and import these ENEX files into Joplin.\n* OneNote: First [import the notes from OneNote into Evernote](https://discussion.evernote.com/topic/107736-is-there-a-way-to-import-from-onenote-into-evernote-on-the-mac/). Then export the ENEX file from Evernote and import it into Joplin.\n\n# Exporting\n\nJoplin can export to the JEX format (Joplin Export file), which is a tar file that can contain multiple notes, notebooks, etc. This is a lossless format in that all the notes, but also metadata such as geo-location, updated time, tags, etc. are preserved. This format is convenient for backup purposes and can be re-imported into Joplin. A \"raw\" format is also available. This is the same as the JEX format except that the data is saved to a directory and each item represented by a single file.\n\n# Synchronisation\n\nOne of the goals of Joplin was to avoid being tied to any particular company or service, whether it is Evernote, Google or Microsoft. As such the synchronisation is designed without any hard dependency to any particular service. Most of the synchronisation process is done at an abstract level and access to external services, such as Nextcloud or Dropbox, is done via lightweight drivers. It is easy to support new services by creating simple drivers that provide a filesystem-like interface, i.e. the ability to read, write, delete and list items. It is also simple to switch from one service to another or to even sync to multiple services at once. Each note, notebook, tags, as well as the relation between items is transmitted as plain text files during synchronisation, which means the data can also be moved to a different application, can be easily backed up, inspected, etc.\n\nCurrently, synchronisation is possible with Nextcloud, Dropbox (by default) or the local filesystem. To setup synchronisation please follow the instructions below. After that, the application will synchronise in the background whenever it is running, or you can click on \"Synchronise\" to start a synchronisation manually.\n\n## Nextcloud synchronisation\n\n<img src=\"https://joplin.cozic.net/images/nextcloud-logo-background.png\" width=\"100\" align=\"left\"> <a href=\"https://nextcloud.com/\">Nextcloud</a> is a self-hosted, private cloud solution. It can store documents, images and videos but also calendars, passwords and countless other things and can sync them to your laptop or phone. As you can host your own Nextcloud server, you own both the data on your device and infrastructure used for synchronisation. As such it is a good fit for Joplin. The platform is also well supported and with a strong community, so it is likely to be around for a while - since it's open source anyway, it is not a service that can be closed, it can exist on a server for as long as one chooses.\n\nOn the **desktop application** or **mobile application**, go to the config screen and select Nextcloud as the synchronisation target. Then input the WebDAV URL (to get it, click on Settings in the bottom left corner of the page, in Nextcloud), this is normally `https://example.com/nextcloud/remote.php/webdav/Joplin` (**make sure to create the \"Joplin\" directory in Nextcloud**), and set the username and password. If it does not work, please [see this explanation](https://github.com/laurent22/joplin/issues/61#issuecomment-373282608) for more details.\n\nOn the **terminal application**, you will need to set the `sync.target` config variable and all the `sync.5.path`, `sync.5.username` and `sync.5.password` config variables to, respectively the Nextcloud WebDAV URL, your username and your password. This can be done from the command line mode using:\n\n\t:config sync.5.path https://example.com/nextcloud/remote.php/webdav/Joplin\n\t:config sync.5.username YOUR_USERNAME\n\t:config sync.5.password YOUR_PASSWORD\n\t:config sync.target 5\n\nIf synchronisation does not work, please consult the logs in the app profile directory - it is often due to a misconfigured URL or password. The log should indicate what the exact issue is.\n\n## Dropbox synchronisation\n\nWhen syncing with Dropbox, Joplin creates a sub-directory in Dropbox, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.\n\nOn the **desktop application** or **mobile application**, select \"Dropbox\" as the synchronisation target in the config screen (it is selected by default). Then, to initiate the synchronisation process, click on the \"Synchronise\" button in the sidebar and follow the instructions.\n\nOn the **terminal application**, to initiate the synchronisation process, type `:sync`. You will be asked to follow a link to authorise the application. It is possible to also synchronise outside of the user interface by typing `joplin sync` from the terminal. This can be used to setup a cron script to synchronise at regular interval. For example, this would do it every 30 minutes:\n\n\t*/30 * * * * /path/to/joplin sync\n\n## WebDAV synchronisation\n\nSelect the \"WebDAV\" synchronisation target and follow the same instructions as for Nextcloud above.\n\nWebDAV-compatible services that are known to work with Joplin.\n\n- [Box.com](https://www.box.com/)\n- [DriveHQ](https://www.drivehq.com)\n- [HiDrive](https://www.strato.fr/stockage-en-ligne/) from Strato. [Setup help](https://github.com/laurent22/joplin/issues/309)\n- [OwnCloud](https://owncloud.org/)\n- [Seafile](https://www.seafile.com/)\n- [Stack](https://www.transip.nl/stack/)\n- [Zimbra](https://www.zimbra.com/)\n\n## OneDrive synchronisation\n\nWhen syncing with OneDrive, Joplin creates a sub-directory in OneDrive, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.\n\nOn the **desktop application** or **mobile application**, select \"OneDrive\" as the synchronisation target in the config screen. Then, to initiate the synchronisation process, click on the \"Synchronise\" button in the sidebar and follow the instructions.\n\nOn the **terminal application**, to initiate the synchronisation process, type `:sync`. You will be asked to follow a link to authorise the application (simply input your Microsoft credentials - you do not need to register with OneDrive).\n\n# Encryption\n\nJoplin supports end-to-end encryption (E2EE) on all the applications. E2EE is a system where only the owner of the notes, notebooks, tags or resources can read them. It prevents potential eavesdroppers - including telecom providers, internet providers, and even the developers of Joplin from being able to access the data. Please see the [End-To-End Encryption Tutorial](https://joplin.cozic.net/e2ee) for more information about this feature and how to enable it.\n\nFor a more technical description, mostly relevant for development or to review the method being used, please see the [Encryption specification](https://joplin.cozic.net/spec).\n\n# Attachments / Resources\n\nAny kind of file can be attached to a note. In Markdown, links to these files are represented as a simple ID to the resource. In the note viewer, these files, if they are images, will be displayed or, if they are other files (PDF, text files, etc.) they will be displayed as links. Clicking on this link will open the file in the default application.\n\nResources that are not attached to any note will be automatically deleted after a day or two.\n\n**Important:** Resources larger than 10 MB are not currently supported on mobile. They will crash the application when synchronising so it is recommended not to attach such resources at the moment. The issue is being looked at.\n\n# Notifications\n\nOn the desktop and mobile apps, an alarm can be associated with any to-do. It will be triggered at the given time by displaying a notification. How the notification will be displayed depends on the operating system since each has a different way to handle this. Please see below for the requirements for the desktop applications:\n\n- **Windows**: >= 8. Make sure the Action Center is enabled on Windows. Task bar balloon for Windows < 8. Growl as fallback. Growl takes precedence over Windows balloons.\n- **macOS**: >= 10.8 or Growl if earlier.\n- **Linux**: `notify-osd` or `libnotify-bin` installed (Ubuntu should have this by default). Growl otherwise\n\nSee [documentation and flow chart for reporter choice](https://github.com/mikaelbr/node-notifier/blob/master/DECISION_FLOW.md)\n\nOn mobile, the alarms will be displayed using the built-in notification system.\n\nIf for any reason the notifications do not work, please [open an issue](https://github.com/laurent22/joplin/issues).\n\n# Sub-notebooks\n\nSub-notebooks allow organising multiple notebooks into a tree of notebooks. For example it can be used to regroup all the notebooks related to work, to family or to a particular project under a parent notebook.\n\n![](https://joplin.cozic.net/images/SubNotebooks.png)\n\n- On the **desktop application**, to create a subnotebook, drag and drop it onto another notebook. To move it back to the root, drag and drop it on the \"Notebooks\" header. Currently only the desktop app can be used to organise the notebooks.\n- The **mobile application** supports displaying and collapsing/expanding the tree of notebooks, however it does not currently support moving the subnotebooks to different notebooks.\n- The **terminal app** supports displaying the tree of subnotebooks but it does not support collapsing/expanding them or moving the subnotebooks around.\n\n# Markdown\n\nJoplin uses and renders [Github-flavoured Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) with a few variations and additions. In particular:\n\n## Links to other notes\n\nYou can create a link to a note by specifying its ID in the URL. For example:\n\n\t[Link to my note](:/0b0d62d15e60409dac34f354b6e9e839)\n\nSince getting the ID of a note is not straightforward, each app provides a way to create such link. In the **desktop app**, right click on a note an select \"Copy Markdown link\". In the **mobile app**, open a note and, in the top right menu, select \"Copy Markdown link\". You can then paste this link anywhere in another note.\n\n## Math notation\n\nMath expressions can be added using the [Katex notation](https://khan.github.io/KaTeX/). To add an inline equation, wrap the expression in `$EXPRESSION$`, eg. `$\\sqrt{3x-1}+(1+x)^2$`. To create an expression block, wrap it as follow:\n\n\t$$\n\tEXPRESSION\n\t$$\n\nFor example:\n\n\t$$\n\tf(x) = \\int_{-\\infty}^\\infty\n\t\t\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n\t\t\\,d\\xi\n\t$$\n\nHere is an example with the Markdown and rendered result side by side:\n\n<img src=\"https://joplin.cozic.net/images/Katex.png\" style=\"max-width: 100%; max-height: 35em;\">\n\n## Checkboxes\n\nCheckboxes can be added like so:\n\n\t- [ ] Milk\n\t- [ ] Rice\n\t- [ ] Eggs\n\nThe checkboxes can then be ticked in the mobile and desktop applications.\n\n# Donations\n\nDonations to Joplin support the development of the project. Developing quality applications mostly takes time, but there are also some expenses, such as digital certificates to sign the applications, app store fees, hosting, etc. Most of all, your donation will make it possible to keep up the current development standard.\n\nPlease see the [donation page](https://joplin.cozic.net/donate/) for information on how to support the development of Joplin.\n\n# Community\n\n- For general discussion about Joplin, user support, software development questions, and to discuss new features, go to the [Joplin Forum](https://discourse.joplin.cozic.net/). It is possible to login with your GitHub account.\n- For bug reports and feature requests, go to the [GitHub Issue Tracker](https://github.com/laurent22/joplin/issues).\n- The latest news are often posted [on this Twitter account](https://twitter.com/laurent2233).\n\n# Contributing\n\nPlease see the guide for information on how to contribute to the development of Joplin: https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md\n\n# Localisation\n\nJoplin is currently available in the languages below. If you would like to contribute a **new translation**, it is quite straightforward, please follow these steps:\n\n- [Download Poedit](https://poedit.net/), the translation editor, and install it.\n- [Download the file to be translated](https://raw.githubusercontent.com/laurent22/joplin/master/CliClient/locales/joplin.pot).\n- In Poedit, open this .pot file, go into the Catalog menu and click Configuration. Change \"Country\" and \"Language\" to your own country and language.\n- From then you can translate the file. Once it is done, please either [open a pull request](https://github.com/laurent22/joplin/pulls) or send the file to [this address](https://raw.githubusercontent.com/laurent22/joplin/master/Assets/Adresse.png).\n\nThis translation will apply to the three applications - desktop, mobile and terminal.\n\nTo **update a translation**, follow the same steps as above but instead of getting the .pot file, get the .po file for your language from the table below.\n\nCurrent translations:\n\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n&nbsp;  |  Language  |  Po File  |  Last translator  |  Percent done\n---|---|---|---|---\n![](https://joplin.cozic.net/images/flags/es/basque_country.png)  |  Basque  |  [eu](https://github.com/laurent22/joplin/blob/master/CliClient/locales/eu.po)  |  juan.abasolo@ehu.eus  |  75%\n![](https://joplin.cozic.net/images/flags/country-4x3/hr.png)  |  Croatian  |  [hr_HR](https://github.com/laurent22/joplin/blob/master/CliClient/locales/hr_HR.po)  |  Hrvoje Mandi\u0107 <trbuhom@net.hr>  |  61%\n![](https://joplin.cozic.net/images/flags/country-4x3/cz.png)  |  Czech  |  [cs_CZ](https://github.com/laurent22/joplin/blob/master/CliClient/locales/cs_CZ.po)  |  Lukas Helebrandt <lukas@aiya.cz>  |  95%\n![](https://joplin.cozic.net/images/flags/country-4x3/dk.png)  |  Dansk  |  [da_DK](https://github.com/laurent22/joplin/blob/master/CliClient/locales/da_DK.po)  |  Morten Juhl-Johansen Z\u00f6lde-Fej\u00e9r <mjjzf@syntaktisk.  |  97%\n![](https://joplin.cozic.net/images/flags/country-4x3/de.png)  |  Deutsch  |  [de_DE](https://github.com/laurent22/joplin/blob/master/CliClient/locales/de_DE.po)  |  Philipp Zumstein <zuphilip@gmail.com>  |  98%\n![](https://joplin.cozic.net/images/flags/country-4x3/gb.png)  |  English  |  [en_GB](https://github.com/laurent22/joplin/blob/master/CliClient/locales/en_GB.po)  |    |  100%\n![](https://joplin.cozic.net/images/flags/country-4x3/es.png)  |  Espa\u00f1ol  |  [es_ES](https://github.com/laurent22/joplin/blob/master/CliClient/locales/es_ES.po)  |  Fernando Mart\u00edn <f@mrtn.es>  |  99%\n![](https://joplin.cozic.net/images/flags/country-4x3/fr.png)  |  Fran\u00e7ais  |  [fr_FR](https://github.com/laurent22/joplin/blob/master/CliClient/locales/fr_FR.po)  |  Laurent Cozic  |  98%\n![](https://joplin.cozic.net/images/flags/country-4x3/es.png)  |  Galician  |  [gl_ES](https://github.com/laurent22/joplin/blob/master/CliClient/locales/gl_ES.po)  |  Marcos Lans <marcoslansgarza@gmail.com>  |  95%\n![](https://joplin.cozic.net/images/flags/country-4x3/it.png)  |  Italiano  |  [it_IT](https://github.com/laurent22/joplin/blob/master/CliClient/locales/it_IT.po)  |    |  63%\n![](https://joplin.cozic.net/images/flags/country-4x3/be.png)  |  Nederlands  |  [nl_BE](https://github.com/laurent22/joplin/blob/master/CliClient/locales/nl_BE.po)  |    |  76%\n![](https://joplin.cozic.net/images/flags/country-4x3/br.png)  |  Portugu\u00eas (Brasil)  |  [pt_BR](https://github.com/laurent22/joplin/blob/master/CliClient/locales/pt_BR.po)  |  Renato Nunes Bastos <rnbastos@gmail.com>  |  97%\n![](https://joplin.cozic.net/images/flags/country-4x3/ru.png)  |  \u0420\u0443\u0441\u0441\u043a\u0438\u0439  |  [ru_RU](https://github.com/laurent22/joplin/blob/master/CliClient/locales/ru_RU.po)  |  Artyom Karlov <artyom.karlov@gmail.com>  |  94%\n![](https://joplin.cozic.net/images/flags/country-4x3/cn.png)  |  \u4e2d\u6587 (\u7b80\u4f53)  |  [zh_CN](https://github.com/laurent22/joplin/blob/master/CliClient/locales/zh_CN.po)  |    |  91%\n![](https://joplin.cozic.net/images/flags/country-4x3/jp.png)  |  \u65e5\u672c\u8a9e  |  [ja_JP](https://github.com/laurent22/joplin/blob/master/CliClient/locales/ja_JP.po)  |    |  61%\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n\n# Known bugs\n\n- Resources larger than 10 MB are not currently supported on mobile. They will crash the application so it is recommended not to attach such resources at the moment. The issue is being looked at.\n- Non-alphabetical characters such as Chinese or Arabic might create glitches in the terminal on Windows. This is a limitation of the current Windows console.\n- It is only possible to upload files of up to 4MB to OneDrive due to a limitation of [the API](https://docs.microsoft.com/en-gb/onedrive/developer/rest-api/api/driveitem_put_content) being currently used. There is currently no plan to support OneDrive \"large file\" API.\n\n# License\n\nMIT License\n\nCopyright (c) 2016-2018 Laurent Cozic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n", "const MarkdownIt = require('markdown-it');\nconst Entities = require('html-entities').AllHtmlEntities;\nconst htmlentities = (new Entities()).encode;\nconst Resource = require('lib/models/Resource.js');\nconst ModelCache = require('lib/ModelCache');\nconst ObjectUtils = require('lib/ObjectUtils');\nconst { shim } = require('lib/shim.js');\nconst { _ } = require('lib/locale');\nconst md5 = require('md5');\nconst MdToHtml_Katex = require('lib/MdToHtml_Katex');\n\nclass MdToHtml {\n\n\tconstructor(options = null) {\n\t\tif (!options) options = {};\n\n\t\tthis.loadedResources_ = {};\n\t\tthis.cachedContent_ = null;\n\t\tthis.cachedContentKey_ = null;\n\t\tthis.modelCache_ = new ModelCache();\n\n\t\t// Must include last \"/\"\n\t\tthis.resourceBaseUrl_ = ('resourceBaseUrl' in options) ? options.resourceBaseUrl : null;\n\t}\n\n\tmakeContentKey(resources, body, style, options) {\n\t\tlet k = [];\n\t\tfor (let n in resources) {\n\t\t\tif (!resources.hasOwnProperty(n)) continue;\n\t\t\tconst r = resources[n];\n\t\t\tk.push(r.id);\n\t\t}\n\t\tk.push(md5(escape(body))); // https://github.com/pvorb/node-md5/issues/41\n\t\tk.push(md5(JSON.stringify(style)));\n\t\tk.push(md5(JSON.stringify(options)));\n\t\treturn k.join('_');\n\t}\n\n\trenderAttrs_(attrs) {\n\t\tif (!attrs) return '';\n\n\t\tlet output = [];\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tconst n = attrs[i][0];\n\t\t\tconst v = attrs[i].length >= 2 ? attrs[i][1] : null;\n\n\t\t\tif (n === 'alt' && !v) {\n\t\t\t\tcontinue;\n\t\t\t} else if (n === 'src') {\n\t\t\t\toutput.push('src=\"' + htmlentities(v) + '\"');\n\t\t\t} else {\n\t\t\t\toutput.push(n + '=\"' + (v ? htmlentities(v) : '') + '\"');\n\t\t\t}\n\t\t}\n\t\treturn output.join(' ');\n\t}\n\n\tgetAttr_(attrs, name, defaultValue = null) {\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tif (attrs[i][0] === name) return attrs[i].length > 1 ? attrs[i][1] : null;\n\t\t}\n\t\treturn defaultValue;\n\t}\n\n\tsetAttr_(attrs, name, value) {\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tif (attrs[i][0] === name) {\n\t\t\t\tattrs[i][1] = value;\n\t\t\t\treturn attrs;\n\t\t\t}\n\t\t}\n\t\tattrs.push([name, value]);\n\t\treturn attrs;\n\t}\n\n\trenderImage_(attrs, options) {\n\t\tconst loadResource = async (id) => {\n\t\t\t// console.info('Loading resource: ' + id);\n\n\t\t\t// Initially set to to an empty object to make\n\t\t\t// it clear that it is being loaded. Otherwise\n\t\t\t// it sometimes results in multiple calls to\n\t\t\t// loadResource() for the same resource.\n\t\t\tthis.loadedResources_[id] = {};\n\n\t\t\tconst resource = await Resource.load(id);\n\t\t\t//const resource = await this.modelCache_.load(Resource, id);\n\n\t\t\tif (!resource) {\n\t\t\t\t// Can happen for example if an image is attached to a note, but the resource hasn't\n\t\t\t\t// been downloaded from the sync target yet.\n\t\t\t\tconsole.warn('Cannot load resource: ' + id);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loadedResources_[id] = resource;\n\n\t\t\tif (options.onResourceLoaded) options.onResourceLoaded();\n\t\t}\n\n\t\tconst title = this.getAttr_(attrs, 'title');\n\t\tconst href = this.getAttr_(attrs, 'src');\n\n\t\tif (!Resource.isResourceUrl(href)) {\n\t\t\treturn '<img title=\"' + htmlentities(title) + '\" src=\"' + href + '\"/>';\n\t\t}\n\n\t\tconst resourceId = Resource.urlToId(href);\n\t\tconst resource = this.loadedResources_[resourceId];\n\t\tif (!resource) {\n\t\t\tloadResource(resourceId);\n\t\t\treturn '';\n\t\t}\n\n\t\tif (!resource.id) return ''; // Resource is being loaded\n\n\t\tconst mime = resource.mime ? resource.mime.toLowerCase() : '';\n\t\tif (mime == 'image/png' || mime == 'image/jpg' || mime == 'image/jpeg' || mime == 'image/gif') {\n\t\t\tlet src = './' + Resource.filename(resource);\n\t\t\tif (this.resourceBaseUrl_ !== null) src = this.resourceBaseUrl_ + src;\n\t\t\tlet output = '<img data-resource-id=\"' + resource.id + '\" title=\"' + htmlentities(title) + '\" src=\"' + src + '\"/>';\n\t\t\treturn output;\n\t\t}\n\t\t\n\t\treturn '[Image: ' + htmlentities(resource.title) + ' (' + htmlentities(mime) + ')]';\n\t}\n\n\trenderOpenLink_(attrs, options) {\n\t\tlet href = this.getAttr_(attrs, 'href');\n\t\tconst text = this.getAttr_(attrs, 'text');\n\t\tconst isResourceUrl = Resource.isResourceUrl(href);\n\t\tconst title = isResourceUrl ? this.getAttr_(attrs, 'title') : href;\n\n\t\tlet resourceIdAttr = \"\";\n\t\tlet icon = \"\";\n\t\tlet hrefAttr = '#';\n\t\tif (isResourceUrl) {\n\t\t\tconst resourceId = Resource.pathToId(href);\n\t\t\thref = \"joplin://\" + resourceId;\n\t\t\tresourceIdAttr = \"data-resource-id='\" + resourceId + \"'\";\n\t\t\ticon = '<span class=\"resource-icon\"></span>';\n\t\t} else {\n\t\t\t// If the link is a plain URL (as opposed to a resource link), set the href to the actual\n\t\t\t// link. This allows the link to be exported too when exporting to PDF. \n\t\t\threfAttr = href;\n\t\t}\n\n\t\tconst js = options.postMessageSyntax + \"(\" + JSON.stringify(href) + \"); return false;\";\n\t\tlet output = \"<a \" + resourceIdAttr + \" title='\" + htmlentities(title) + \"' href='\" + hrefAttr + \"' onclick='\" + js + \"'>\" + icon;\n\t\treturn output;\n\t}\n\n\trenderCloseLink_(attrs, options) {\n\t\treturn '</a>';\n\t}\n\n\trendererPlugin_(language) {\n\t\tif (!language) return null;\n\n\t\tconst handlers = {};\n\t\thandlers['katex'] = new MdToHtml_Katex();\n\t\treturn language in handlers ? handlers[language] : null;\n\t}\n\n\tparseInlineCodeLanguage_(content) {\n\t\tconst m = content.match(/^\\{\\.([a-zA-Z0-9]+)\\}/);\n\t\tif (m && m.length >= 2) {\n\t\t\tconst language = m[1];\n\t\t\treturn {\n\t\t\t\tlanguage: language,\n\t\t\t\tnewContent: content.substr(language.length + 3),\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\turldecode_(str) {\n\t\ttry {\n\t\t\treturn decodeURIComponent((str+'').replace(/\\+/g, '%20'));\n\t\t} catch (error) {\n\t\t\t// decodeURIComponent can throw if the string contains non-encoded data (for example \"100%\")\n\t\t\t// so in this case just return the non encoded string. \n\t\t\treturn str;\n\t\t}\n\t}\n\n\n\trenderTokens_(markdownIt, tokens, options) {\n\t\tlet output = [];\n\t\tlet previousToken = null;\n\t\tlet anchorAttrs = [];\n\t\tlet extraCssBlocks = {};\n\t\tlet anchorHrefs = [];\n\n\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\tlet t = tokens[i];\n\t\t\tconst nextToken = i < tokens.length ? tokens[i+1] : null;\n\n\t\t\tlet tag = t.tag;\n\t\t\tlet openTag = null;\n\t\t\tlet closeTag = null;\n\t\t\tlet attrs = t.attrs ? t.attrs : [];\n\t\t\tlet tokenContent = t.content ? t.content : '';\n\t\t\tconst isCodeBlock = tag === 'code' && t.block;\n\t\t\tconst isInlineCode = t.type === 'code_inline';\n\t\t\tconst codeBlockLanguage = t && t.info ? t.info : null;\n\t\t\tlet rendererPlugin = null;\n\t\t\tlet rendererPluginOptions = { tagType: 'inline' };\n\t\t\tlet linkHref = null;\n\n\t\t\tif (isCodeBlock) rendererPlugin = this.rendererPlugin_(codeBlockLanguage);\n\n\t\t\tif (isInlineCode) {\n\t\t\t\topenTag = null;\n\t\t\t} else if (tag && t.type.indexOf('html_inline') >= 0) {\n\t\t\t\topenTag = null;\n\t\t\t} else if (tag && t.type.indexOf('_open') >= 0) {\n\t\t\t\topenTag = tag;\n\t\t\t} else if (tag && t.type.indexOf('_close') >= 0) {\n\t\t\t\tcloseTag = tag;\n\t\t\t} else if (tag && t.type.indexOf('inline') >= 0) {\n\t\t\t\topenTag = tag;\n\t\t\t} else if (t.type === 'link_open') {\n\t\t\t\topenTag = 'a';\n\t\t\t} else if (isCodeBlock) {\n\t\t\t\tif (rendererPlugin) {\n\t\t\t\t\topenTag = null;\n\t\t\t\t} else {\n\t\t\t\t\topenTag = 'pre';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (openTag) {\n\t\t\t\tif (openTag === 'a') {\n\t\t\t\t\tanchorAttrs.push(attrs);\n\t\t\t\t\tanchorHrefs.push(this.getAttr_(attrs, 'href'));\n\t\t\t\t\toutput.push(this.renderOpenLink_(attrs, options));\n\t\t\t\t} else {\n\t\t\t\t\tconst attrsHtml = this.renderAttrs_(attrs);\n\t\t\t\t\toutput.push('<' + openTag + (attrsHtml ? ' ' + attrsHtml : '') + '>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCodeBlock) {\n\t\t\t\tconst codeAttrs = ['code'];\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\tif (codeBlockLanguage) codeAttrs.push(t.info); // t.info contains the language when the token is a codeblock\n\t\t\t\t\toutput.push('<code class=\"' + codeAttrs.join(' ') + '\">');\n\t\t\t\t}\n\t\t\t} else if (isInlineCode) {\n\t\t\t\tconst result = this.parseInlineCodeLanguage_(tokenContent);\n\t\t\t\tif (result) {\n\t\t\t\t\trendererPlugin = this.rendererPlugin_(result.language);\n\t\t\t\t\ttokenContent = result.newContent;\n\t\t\t\t}\n\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\toutput.push('<code>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (t.type === 'math_inline' || t.type === 'math_block') {\n\t\t\t\trendererPlugin = this.rendererPlugin_('katex');\n\t\t\t\trendererPluginOptions = { tagType: t.type === 'math_block' ? 'block' : 'inline' };\n\t\t\t}\n\n\t\t\tif (rendererPlugin) {\n\t\t\t\trendererPlugin.loadAssets().catch((error) => {\n\t\t\t\t\tconsole.warn('MdToHtml: Error loading assets for ' + rendererPlugin.name() + ': ', error.message);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (t.type === 'image') {\n\t\t\t\tif (tokenContent) attrs.push(['title', tokenContent]);\n\t\t\t\toutput.push(this.renderImage_(attrs, options));\n\t\t\t} else if (t.type === 'html_inline') {\n\t\t\t\toutput.push(t.content);\n\t\t\t} else if (t.type === 'softbreak') {\n\t\t\t\toutput.push('<br/>');\n\t\t\t} else if (t.type === 'hr') {\n\t\t\t\toutput.push('<hr/>');\n\t\t\t} else {\n\t\t\t\tif (t.children) {\n\t\t\t\t\tconst parsedChildren = this.renderTokens_(markdownIt, t.children, options);\n\t\t\t\t\toutput = output.concat(parsedChildren);\n\t\t\t\t} else {\n\t\t\t\t\tif (tokenContent) {\n\t\t\t\t\t\tif ((isCodeBlock || isInlineCode) && rendererPlugin) {\n\t\t\t\t\t\t\toutput = rendererPlugin.processContent(output, tokenContent, isCodeBlock ? 'block' : 'inline');\n\t\t\t\t\t\t} else if (rendererPlugin) {\n\t\t\t\t\t\t\toutput = rendererPlugin.processContent(output, tokenContent, rendererPluginOptions.tagType);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutput.push(htmlentities(tokenContent));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n \n \t\t\tif (nextToken && nextToken.tag === 'li' && t.tag === 'p') {\n \t\t\t\tcloseTag = null;\n \t\t\t} else if (t.type === 'link_close') {\n\t\t\t\tcloseTag = 'a';\n\t\t\t} else if (tag && t.type.indexOf('inline') >= 0) {\n\t\t\t\tcloseTag = openTag;\n\t\t\t} else if (isCodeBlock) {\n\t\t\t\tif (!rendererPlugin) closeTag = openTag;\n\t\t\t}\n\n\t\t\tif (isCodeBlock) {\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\toutput.push('</code>');\n\t\t\t\t}\n\t\t\t} else if (isInlineCode) {\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\toutput.push('</code>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (closeTag) {\n\t\t\t\tif (closeTag === 'a') {\n\t\t\t\t\tconst currentAnchorAttrs = anchorAttrs.pop();\n\n\t\t\t\t\t// NOTE: Disabled for now due to this:\n\t\t\t\t\t// https://github.com/laurent22/joplin/issues/318#issuecomment-375854848\n\n\t\t\t\t\t// const previousContent = output.length ? output[output.length - 1].trim() : '';\n\t\t\t\t\t// const anchorHref = this.getAttr_(currentAnchorAttrs, 'href', '').trim();\n\n\t\t\t\t\t// Optimisation: If the content of the anchor is the same as the URL, we replace the content\n\t\t\t\t\t// by (Link). This is to shorten the text, which is important especially when the note comes\n\t\t\t\t\t// from imported HTML, which can contain many such links and make the text unreadble. An example\n\t\t\t\t\t// would be a movie review that has multiple links to allow a user to rate the film from 1 to 5 stars.\n\t\t\t\t\t// In the original page, it might be rendered as stars, via CSS, but in the imported note it would look like this:\n\t\t\t\t\t// http://example.com/rate/1 http://example.com/rate/2 http://example.com/rate/3\n\t\t\t\t\t// http://example.com/rate/4 http://example.com/rate/5\n\t\t\t\t\t// which would take a lot of screen space even though it doesn't matter since the user is unlikely\n\t\t\t\t\t// to rate the film from the note. This is actually a nice example, still readable, but there is way\n\t\t\t\t\t// worse that this in notes that come from web-clipped content.\n\t\t\t\t\t// With this change, the links will still be preserved but displayed like\n\t\t\t\t\t// (link) (link) (link) (link) (link)\n\n\t\t\t\t\t// if (this.urldecode_(previousContent) === htmlentities(this.urldecode_(anchorHref))) {\n\t\t\t\t\t// \toutput.pop();\n\t\t\t\t\t// \toutput.push(_('(Link)'));\n\t\t\t\t\t// }\n\n\t\t\t\t\toutput.push(this.renderCloseLink_(currentAnchorAttrs, options));\n\t\t\t\t} else {\n\t\t\t\t\toutput.push('</' + closeTag + '>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rendererPlugin) {\n\t\t\t\tconst extraCss = rendererPlugin.extraCss();\n\t\t\t\tconst name = rendererPlugin.name();\n\t\t\t\tif (extraCss && !(name in extraCssBlocks)) {\n\t\t\t\t\textraCssBlocks[name] = extraCss;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpreviousToken = t;\n\t\t}\n\n\t\t// Insert the extra CSS at the top of the HTML\n\n\t\tif (!ObjectUtils.isEmpty(extraCssBlocks)) {\n\t\t\tconst temp = ['<style>'];\n\t\t\tfor (let n in extraCssBlocks) {\n\t\t\t\tif (!extraCssBlocks.hasOwnProperty(n)) continue;\n\t\t\t\ttemp.push(extraCssBlocks[n]);\n\t\t\t}\n\t\t\ttemp.push('</style>');\n\n\t\t\toutput = temp.concat(output);\n\t\t}\n\n\t\treturn output.join('');\n\t}\n\n\trender(body, style, options = null) {\n\t\tif (!options) options = {};\n\t\tif (!options.postMessageSyntax) options.postMessageSyntax = 'postMessage';\n\t\tif (!options.paddingBottom) options.paddingBottom = '0';\n\n\t\tconst cacheKey = this.makeContentKey(this.loadedResources_, body, style, options);\n\t\tif (this.cachedContentKey_ === cacheKey) return this.cachedContent_;\n\n\t\tconst md = new MarkdownIt({\n\t\t\tbreaks: true,\n\t\t\tlinkify: true,\n\t\t\thtml: true,\n\t\t});\n\n\t\t// This is currently used only so that the $expression$ and $$\\nexpression\\n$$ blocks are translated\n\t\t// to math_inline and math_block blocks. These blocks are then processed directly with the Katex\n\t\t// library.  It is better this way as then it is possible to conditionally load the CSS required by\n\t\t// Katex and use an up-to-date version of Katex (as of 2018, the plugin is still using 0.6, which is\n\t\t// buggy instead of 0.9).\n\t\tmd.use(require('markdown-it-katex'));\n\n\t\t// Hack to make checkboxes clickable. Ideally, checkboxes should be parsed properly in\n\t\t// renderTokens_(), but for now this hack works. Marking it with HORRIBLE_HACK so\n\t\t// that it can be removed and replaced later on.\n\t\tconst HORRIBLE_HACK = true;\n\n\t\tif (HORRIBLE_HACK) {\n\t\t\tlet counter = -1;\n\t\t\twhile (body.indexOf('- [ ]') >= 0 || body.indexOf('- [X]') >= 0 || body.indexOf('- [x]') >= 0) {\n\t\t\t\tbody = body.replace(/- \\[(X| |x)\\]/, function(v, p1) {\n\t\t\t\t\tlet s = p1 == ' ' ? 'NOTICK' : 'TICK';\n\t\t\t\t\tcounter++;\n\t\t\t\t\treturn '- mJOPmCHECKBOXm' + s + 'm' + counter + 'm';\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst env = {};\n\t\tconst tokens = md.parse(body, env);\n\n\t\tlet renderedBody = this.renderTokens_(md, tokens, options);\n\n\t\t// console.info(body);\n\t\t// console.info(tokens);\n\t\t// console.info(renderedBody);\n\n\t\tif (HORRIBLE_HACK) {\n\t\t\tlet loopCount = 0;\n\t\t\twhile (renderedBody.indexOf('mJOPm') >= 0) {\n\t\t\t\trenderedBody = renderedBody.replace(/mJOPmCHECKBOXm([A-Z]+)m(\\d+)m/, function(v, type, index) {\n\t\t\t\t\tconst js = options.postMessageSyntax + \"('checkboxclick:\" + type + ':' + index + \"'); this.classList.contains('tick') ? this.classList.remove('tick') : this.classList.add('tick'); return false;\";\n\t\t\t\t\treturn '<a href=\"#\" onclick=\"' + js + '\" class=\"checkbox ' + (type == 'NOTICK' ? '' : 'tick') + '\"><span>' + '' + '</span></a>';\n\t\t\t\t});\n\t\t\t\tif (loopCount++ >= 9999) break;\n\t\t\t}\n\t\t}\n\n\t\t// https://necolas.github.io/normalize.css/\n\t\tconst normalizeCss = `\n\t\t\thtml{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}\n\t\t\tarticle,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}\n\t\t\tpre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}\n\t\t\tb,strong{font-weight:bolder}small{font-size:80%}img{border-style:none}\n\t\t`;\n\n\t\tconst fontFamily = 'sans-serif';\n\n\t\tconst css = `\n\t\t\tbody {\n\t\t\t\tfont-size: ` + style.htmlFontSize + `;\n\t\t\t\tcolor: ` + style.htmlColor + `;\n\t\t\t\tline-height: ` + style.htmlLineHeight + `;\n\t\t\t\tbackground-color: ` + style.htmlBackgroundColor + `;\n\t\t\t\tfont-family: ` + fontFamily + `;\n\t\t\t\tpadding-bottom: ` + options.paddingBottom + `;\n\t\t\t}\n\t\t\tp, h1, h2, h3, h4, h5, h6, ul, table {\n\t\t\t\tmargin-top: 0;\n\t\t\t\tmargin-bottom: 14px;\n\t\t\t}\n\t\t\th1 {\n\t\t\t\tfont-size: 1.5em;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\th3, h4, h5, h6 {\n\t\t\t\tfont-size: 1em;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\ta {\n\t\t\t\tcolor: ` + style.htmlLinkColor + `\n\t\t\t}\n\t\t\tul {\n\t\t\t\tpadding-left: 1.3em;\n\t\t\t}\n\t\t\tli p {\n\t\t\t\tmargin-bottom: 0;\n\t\t\t}\n\t\t\t.resource-icon {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: .5em;\n\t\t\t\ttext-decoration: none;\n\t\t\t\twidth: 1.15em;\n\t\t\t\theight: 1.5em;\n\t\t\t\tmargin-right: 0.4em;\n\t\t\t\tbackground-color:  ` + style.htmlColor + `;\n\t\t\t\t/* Awesome Font file */\n\t\t\t\t-webkit-mask: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 384 512'><path d='M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z'/></svg>\");\n\t\t\t}\n\t\t\ta.checkbox {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: .5em;\n\t\t\t\ttext-decoration: none;\n\t\t\t\twidth: 1.65em; /* Need to cut a bit the right border otherwise the SVG will display a black line */\n\t\t\t\theight: 1.7em;\n\t\t\t\tmargin-right: .3em;\n\t\t\t\tbackground-color:  ` + style.htmlColor + `;\n\t\t\t\t/* Awesome Font square-o */\n\t\t\t\t-webkit-mask: url(\"data:image/svg+xml;utf8,<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z'/></svg>\");\n\t\t\t}\n\t\t\ta.checkbox.tick {\n\t\t\t\tleft: .1245em; /* square-o and check-square-o aren't exactly aligned so add this extra gap to align them  */\n\t\t\t\t/* Awesome Font check-square-o */\n\t\t\t\t-webkit-mask: url(\"data:image/svg+xml;utf8,<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1472 930v318q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q63 0 117 25 15 7 18 23 3 17-9 29l-49 49q-10 10-23 10-3 0-9-2-23-6-45-6h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113v-254q0-13 9-22l64-64q10-10 23-10 6 0 12 3 20 8 20 29zm231-489l-814 814q-24 24-57 24t-57-24l-430-430q-24-24-24-57t24-57l110-110q24-24 57-24t57 24l263 263 647-647q24-24 57-24t57 24l110 110q24 24 24 57t-24 57z'/></svg>\");\n\t\t\t}\n\t\t\ttable {\n\t\t\t\tborder-collapse: collapse;\n\t\t\t}\n\t\t\ttd, th {\n\t\t\t\tborder: 1px solid silver;\n\t\t\t\tpadding: .5em 1em .5em 1em;\n\t\t\t\tfont-size: ` + style.htmlFontSize + `;\n\t\t\t\tcolor: ` + style.htmlColor + `;\n\t\t\t\tbackground-color: ` + style.htmlBackgroundColor + `;\n\t\t\t\tfont-family: ` + fontFamily + `;\n\t\t\t}\n\t\t\thr {\n\t\t\t\tborder: none;\n\t\t\t\tborder-bottom: 1px solid ` + style.htmlDividerColor + `;\n\t\t\t}\n\t\t\timg {\n\t\t\t\twidth: auto;\n\t\t\t\tmax-width: 100%;\n\t\t\t}\n\n\t\t\t@media print {\n\t\t\t\tbody {\n\t\t\t\t\theight: auto !important;\n\t\t\t\t}\n\n\t\t\t\ta.checkbox {\n\t\t\t\t\tborder: 1pt solid ` + style.htmlColor + `;\n\t\t\t\t\tborder-radius: 2pt;\n\t\t\t\t\twidth: 1em;\n\t\t\t\t\theight: 1em;\n\t\t\t\t\tline-height: 1em;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\ttop: .4em;\n\t\t\t\t}\n\n\t\t\t\ta.checkbox.tick:after {\n\t\t\t\t\tcontent: \"X\";\n\t\t\t\t}\n\n\t\t\t\ta.checkbox.tick {\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tleft: -0.02em;\n\t\t\t\t\tcolor: ` + style.htmlColor + `;\n\t\t\t\t}\n\t\t\t}\n\t\t`;\n\n\t\tconst styleHtml = '<style>' + normalizeCss + \"\\n\" + css + '</style>';\n\n\t\tconst output = styleHtml + renderedBody;\n\n\t\tthis.cachedContent_ = output;\n\t\tthis.cachedContentKey_ = cacheKey;\n\t\treturn this.cachedContent_;\n\t}\n\n\ttoggleTickAt(body, index) {\n\t\tlet counter = -1;\n\t\twhile (body.indexOf('- [ ]') >= 0 || body.indexOf('- [X]') >= 0 || body.indexOf('- [x]') >= 0) {\n\t\t\tcounter++;\n\n\t\t\tbody = body.replace(/- \\[(X| |x)\\]/, function(v, p1) {\n\t\t\t\tlet s = p1 == ' ' ? 'NOTICK' : 'TICK';\n\t\t\t\tif (index == counter) {\n\t\t\t\t\ts = s == 'NOTICK' ? 'TICK' : 'NOTICK';\n\t\t\t\t}\n\t\t\t\treturn '\u00b0\u00b0JOP\u00b0CHECKBOX\u00b0' + s + '\u00b0\u00b0';\n\t\t\t});\n\t\t}\n\n\t\tbody = body.replace(/\u00b0\u00b0JOP\u00b0CHECKBOX\u00b0NOTICK\u00b0\u00b0/g, '- [ ]'); \n\t\tbody = body.replace(/\u00b0\u00b0JOP\u00b0CHECKBOX\u00b0TICK\u00b0\u00b0/g, '- [X]'); \n\n\t\treturn body;\n\t}\n\n\thandleCheckboxClick(msg, noteBody) {\n\t\tmsg = msg.split(':');\n\t\tlet index = Number(msg[msg.length - 1]);\n\t\tlet currentState = msg[msg.length - 2]; // Not really needed but keep it anyway\n\t\treturn this.toggleTickAt(noteBody, index);\t\t\n\t}\n\n}\n\nmodule.exports = MdToHtml;", "<!doctype html>\n<html>\n<head>\n\t<title>Joplin - an open source note taking and to-do application with synchronisation capabilities</title>\n\t<meta charset=\"utf-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t<link rel=\"stylesheet\" href=\"https://joplin.cozic.net/css/bootstrap.min.css\">\n\t<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n\t<link rel=\"stylesheet\" href=\"https://joplin.cozic.net/css/fontawesome-all.min.css\"> \n\t<script src=\"https://joplin.cozic.net/js/jquery-3.2.1.slim.min.js\"></script>\n\t<style>\n\tbody {\n\t\tbackground-color: #F1F1F1;\n\t\tcolor: #333333;\n\t}\n\ttable {\n\t\tmargin-bottom: 1em;\n\t}\n\ttd, th {\n\t\tpadding: .8em;\n\t\tborder: 1px solid #ccc;\n\t}\n\th1, h2 {\n\t\tborder-bottom: 1px solid #eaecef;\n\t\tpadding-bottom: 0.3em;\n\t\tfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\t\tfont-weight: 600;\n\t\tfont-size: 2em;\n\t\tmargin-bottom: 16px;\n\t}\n\th2 {\n\t\tfont-size: 1.6em;\n\t}\n\th3 {\n\t\tfont-size: 1.3em;\n\t}\n\tcode {\n\t\tcolor: black;\n\t\tbackground-color: #eee;\n\t\tborder: 1px solid #ccc;\n\t\tfont-size: .85em;\n\t}\n\tpre code {\n\t\tborder: none;\n\t}\n\tpre {\n\t\tfont-size: .85em;\n\t}\n\t#toc ul {\n\t\tmargin-bottom: 10px;\n\t}\n\t#toc {\n\t\tpadding-bottom: 1em;\n\t}\n\t.title-icon {\n\t\theight: 2em;\n\t}\n\t.sub-title {\n\t\tfont-weight: bold;\n\t\tfont-size: 1.5em;\n\t}\n\t.container {\n\t\tbackground-color: white;\n\t\tpadding: 0;\n\t\tbox-shadow: 0 10px 20px #888888;\n\t}\n\ttable.screenshots {\n\t\tmargin-top: 2em;\n\t\tmargin-bottom: 2em;\n\t}\n\ttable.screenshots th {\n\t\theight: 3em;\n\t\ttext-align: center;\n\t}\n\ttable.screenshots th, \n\ttable.screenshots td {\n\t\tborder: 1px solid #C2C2C2;\n\t}\n\timg[align=\"left\"] {\n\t\tmargin-right: 10px;\n\t\tmargin-bottom: 10px;\n\t}\n\t.mobile-screenshot {\n\t\theight: 40em;\n\t\tpadding: 1em;\n\t}\n\t.cli-screenshot-wrapper {\n\t\tbackground-color: black;\n\t\tvertical-align: top;\n\t\tpadding: 1em 2em 1em 1em;\n\t}\n\t.cli-screenshot {\n\t\tfont-family: \"Monaco\", \"Inconsolata\", \"CONSOLAS\", \"Deja Vu Sans Mono\", \"Droid Sans Mono\", \"Andale Mono\", monospace;\n\t\tbackground-color: black;\n\t\tcolor: white;\n\t\tborder: none;\n\t}\n\t.cli-screenshot .prompt {\n\t\tcolor: #48C2F0;\n\t}\n\t.top-screenshot {\n\t\tmargin-top: 2em;\n\t\ttext-align: center;\n\t}\n\t.header {\n\t\tposition: relative;\n\t\tpadding-left: 2em;\n\t\tpadding-right: 2em;\n\t\tpadding-top: 1em;\n\t\tpadding-bottom: 1em;\n\t\tcolor: white;\n\t\tbackground-color: #2B2B3D;\n\t}\n\t.header a h1 {\n\t\tcolor: white;\n\t}\n\t.content {\n\t\tpadding-left: 2em;\n\t\tpadding-right: 2em;\n\t\tpadding-bottom: 2em;\n\t\tpadding-top: 2em;\n\t}\n\t.forkme {\n\t\tposition: absolute;\n\t\tright: 0;\n\t\ttop:0;\n\t}\n\t.nav-wrapper {\n\t\tposition: relative;\n\t\twidth: inherit;\n\t}\n\t.nav {\n\t\tbackground-color: black;\n\t\tdisplay: table;\n\t\twidth: inherit;\n\t}\n\t.nav.sticky {\n\t\tposition:fixed;\n\t\ttop: 0;\n\t\twidth: inherit;\n\t\tbox-shadow: 0 0 10px #000000;\n\t}\n\t.nav a {\n\t\tcolor: white;\n\t\tdisplay: inline-block;\n\t\tpadding: .6em .9em .6em .9em;\n\t}\n\t.nav ul {\n\t\tpadding-left: 2em;\n\t\tmargin-bottom: 0;\n\t\tdisplay: table-cell;\n\t\tmin-width: 250px;\n\t}\n\t.nav ul li {\n\t\tdisplay: inline-block;\n\t\tpadding: 0;\n\t}\n\t.nav li.selected {\n\t\tbackground-color: #222;\n\t\tfont-weight: bold;\n\t}\n\t.nav-right {\n\t\tdisplay: table-cell;\n\t\twidth: 100%;\n\t\ttext-align: right;\n\t\tvertical-align: middle;\n\t\tline-height: 0;\n\t}\n\t.nav-right .share-btn {\n\t\tdisplay: none;\n\t}\n\t.nav-right .small-share-btn {\n\t\tdisplay: none;\n\t}\n\t.footer {\n\t\tpadding-top: 1em;\n\t\tborder-top: 1px solid #d4d4d4;\n\t\tmargin-top: 2em;\n\t\tcolor: gray;\n\t\tfont-size: .9em;\n\t}\n\t@media all and (min-width: 400px) {\n\t\t.nav-right .share-btn {\n\t\t\tdisplay: inline-block;\n\t\t}\n\t\t.nav-right .small-share-btn {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n</style>\n</head>\n\n<body>\n\n<div class=\"container\">\n\n<div class=\"header\">\n\t<a class=\"forkme\" href=\"https://github.com/laurent22/joplin\"><img src=\"https://joplin.cozic.net/images/ForkMe.png\"/></a>\n\t<a href=\"https://joplin.cozic.net\"><h1 id=\"joplin\"><img class=\"title-icon\" src=\"https://joplin.cozic.net/images/Icon512.png\">oplin</h1></a>\n\t<p class=\"sub-title\">An open source note taking and to-do application with synchronisation capabilities.</p>\n</div>\n\n<div class=\"nav-wrapper\">\n\t<div class=\"nav\">\n\t\t<ul>\n\t\t\t<li class=\"\"><a href=\"https:&#x2F;&#x2F;joplin.cozic.net/\" title=\"Home\"><i class=\"fa fa-home\"></i></a></li>\n\t\t\t<li><a href=\"https://discourse.joplin.cozic.net\" title=\"Forum\">Forum</a></li>\n\t\t\t<li><a class=\"help\" href=\"#\" title=\"Menu\">Menu</a></li>\n\t\t</ul>\n\t\t<div class=\"nav-right\">\n\t\t\t<iframe class=\"share-btn\" src=\"https://www.facebook.com/plugins/share_button.php?href=http%3A%2F%2Fjoplin.cozic.net&layout=button&size=small&mobile_iframe=true&width=60&height=20&appId\" width=\"60\" height=\"20\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowTransparency=\"true\"></iframe>\n\t\t\t<iframe class=\"share-btn\" src=\"https://platform.twitter.com/widgets/tweet_button.html?url=http%3A%2F%2Fjoplin.cozic.net\" width=\"62\" height=\"20\" title=\"Tweet\" style=\"border: 0; overflow: hidden;\"></iframe>\n\t\t\t<iframe class=\"share-btn share-btn-github\" src=\"https://ghbtns.com/github-btn.html?user=laurent22&repo=joplin&type=star&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"100px\" height=\"20px\"></iframe>\n\t\t</div>\n\t</div>\n</div>\n\n<div class=\"content\">\n\t<div id=\"toc\"><ul>\n<li>\n<p>Applications</p>\n<ul>\n<li><a href=\"https://joplin.cozic.net/desktop\">Desktop application</a></li>\n<li><a href=\"https://joplin.cozic.net/mobile\">Mobile applications</a></li>\n<li><a href=\"https://joplin.cozic.net/terminal\">Terminal application</a></li>\n</ul>\n</li>\n<li>\n<p>Support</p>\n<ul>\n<li><a href=\"https://discourse.joplin.cozic.net\">Joplin Forum</a></li>\n<li><a href=\"https://joplin.cozic.net/e2ee\">How to enable end-to-end encryption</a></li>\n<li><a href=\"https://joplin.cozic.net/spec\">End-to-end encryption spec</a></li>\n<li><a href=\"https://joplin.cozic.net/debugging\">How to enable debug mode</a></li>\n<li><a href=\"https://joplin.cozic.net/faq\">FAQ</a></li>\n</ul>\n</li>\n<li>\n<p>About</p>\n<ul>\n<li><a href=\"https://joplin.cozic.net/changelog\">Changelog</a></li>\n<li><a href=\"https://joplin.cozic.net/stats\">Stats</a></li>\n<li><a href=\"https://joplin.cozic.net/donate\">Donate</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=E8JMYD2LQ8MMA&amp;lc=GB&amp;item_name=Joplin+Development&amp;currency_code=EUR&amp;bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted\"><img src=\"https://joplin.cozic.net/images/badges/Donate-PayPal-green.svg\" alt=\"Donate\"></a> <a href=\"https://joplin.cozic.net/donate/#bitcoin\"><img src=\"https://joplin.cozic.net/images/badges/Donate-Bitcoin.svg\" alt=\"Donate with Bitcoin\"></a> <a href=\"https://travis-ci.org/laurent22/joplin\"><img src=\"https://travis-ci.org/laurent22/joplin.svg?branch=master\" alt=\"Travis Build Status\"></a> <a href=\"https://ci.appveyor.com/project/laurent22/joplin\"><img src=\"https://ci.appveyor.com/api/projects/status/github/laurent22/joplin?branch=master&amp;passingText=master%20-%20OK&amp;svg=true\" alt=\"Appveyor Build Status\"></a></p>\n<p>Joplin is a free, open source note taking and to-do application, which can handle a large number of notes organised into notebooks. The notes are searchable, can be copied, tagged and modified either from the applications directly or from your own text editor. The notes are in <a href=\"#markdown\">Markdown format</a>.</p>\n<p>Notes exported from Evernote via .enex files <a href=\"#importing\">can be imported</a> into Joplin, including the formatted content (which is converted to Markdown), resources (images, attachments, etc.) and complete metadata (geolocation, updated time, created time, etc.). Plain Markdown files can also be imported.</p>\n<p>The notes can be <a href=\"#synchronisation\">synchronised</a> with various cloud services including <a href=\"https://nextcloud.com/\">Nextcloud</a>, Dropbox, OneDrive or the file system (for example with a network directory). When synchronising the notes, notebooks, tags and other metadata are saved to plain text files which can be easily inspected, backed up and moved around.</p>\n<p>The UI of the terminal client is built on top of the great <a href=\"https://github.com/cronvel/terminal-kit\">terminal-kit</a> library, the desktop client using <a href=\"https://electronjs.org/\">Electron</a>, and the Android client front end is done using <a href=\"https://facebook.github.io/react-native/\">React Native</a>.</p>\n<div class=\"top-screenshot\"><img src=\"https://joplin.cozic.net/images/AllClients.jpg\" style=\"max-width: 100%; max-height: 35em;\"></div>\n\n<h1 id=\"installation\">Installation</h1>\n<p>Three types of applications are available: for the <strong>desktop</strong> (Windows, macOS and Linux), for <strong>mobile</strong> (Android and iOS) and for <strong>terminal</strong> (Windows, macOS and Linux). All applications have similar user interfaces and can synchronise with each others.</p>\n<h2 id=\"desktop-applications\">Desktop applications</h2>\n<table>\n<thead>\n<tr>\n<th>Operating System</th>\n<th>Download</th>\n<th>Alternative</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Windows (32 and 64-bit)</td>\n<td><a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.exe'><img alt='Get it on Windows' height=\"40px\" src='https://joplin.cozic.net/images/BadgeWindows.png'/></a></td>\n<td></td>\n</tr>\n<tr>\n<td>macOS</td>\n<td><a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.dmg'><img alt='Get it on macOS' height=\"40px\" src='https://joplin.cozic.net/images/BadgeMacOS.png'/></a></td>\n<td></td>\n</tr>\n<tr>\n<td>Linux</td>\n<td><a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89-x86_64.AppImage'><img alt='Get it on Linux' height=\"40px\" src='https://joplin.cozic.net/images/BadgeLinux.png'/></a></td>\n<td>An Arch Linux package <a href=\"#terminal-application\">is also available</a>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mobile-applications\">Mobile applications</h2>\n<table>\n<thead>\n<tr>\n<th>Operating System</th>\n<th>Download</th>\n<th>Alt. Download</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android</td>\n<td><a href='https://play.google.com/store/apps/details?id=net.cozic.joplin&utm_source=GitHub&utm_campaign=README&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' height=\"40px\" src='https://joplin.cozic.net/images/BadgeAndroid.png'/></a></td>\n<td>or <a href=\"https://github.com/laurent22/joplin-android/releases/download/android-v1.0.123/joplin-v1.0.123.apk\">Download APK File</a></td>\n</tr>\n<tr>\n<td>iOS</td>\n<td><a href='https://itunes.apple.com/us/app/joplin/id1315599797'><img alt='Get it on the App Store' height=\"40px\" src='https://joplin.cozic.net/images/BadgeIOS.png'/></a></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"terminal-application\">Terminal application</h2>\n<table>\n<thead>\n<tr>\n<th>Operating system</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>macOS</td>\n<td><code>brew install joplin</code></td>\n</tr>\n<tr>\n<td>Linux or Windows (via <a href=\"https://msdn.microsoft.com/en-us/commandline/wsl/faq?f=255&amp;MSPPError=-2147217396\">WSL</a>)</td>\n<td><strong>Important:</strong> First, <a href=\"https://nodejs.org/en/download/package-manager/\">install Node 8+</a>. Node 8 is LTS but not yet available everywhere so you might need to manually install it.<br/><br/><code>NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin</code><br/><code>sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin</code><br><br>By default, the application binary will be installed under <code>~/.joplin-bin</code>. You may change this directory if needed. Alternatively, if your npm permissions are setup as described <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions#option-2-change-npms-default-directory-to-another-directory\">here</a> (Option 2) then simply running <code>npm -g install joplin</code> would work.</td>\n</tr>\n<tr>\n<td>Arch Linux</td>\n<td>An Arch Linux package is available <a href=\"https://aur.archlinux.org/packages/joplin/\">here</a>. To install it, use an AUR wrapper such as yay: <code>yay -S joplin</code>. Both the CLI tool (type <code>joplin</code>) and desktop app (type <code>joplin-desktop</code>) are packaged. For support, please go to the <a href=\"https://github.com/masterkorp/joplin-pkgbuild\">GitHub repo</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>To start it, type <code>joplin</code>.</p>\n<p>For usage information, please refer to the full <a href=\"https://joplin.cozic.net/terminal\">Joplin Terminal Application Documentation</a>.</p>\n<h1 id=\"features\">Features</h1>\n<ul>\n<li>Desktop, mobile and terminal applications.</li>\n<li>End To End Encryption (E2EE)</li>\n<li>Synchronisation with various services, including NextCloud, Dropbox, WebDAV and OneDrive.</li>\n<li>Import Enex files (Evernote export format) and Markdown files.</li>\n<li>Export JEX files (Joplin Export format) and raw files.</li>\n<li>Support notes, to-dos, tags and notebooks.</li>\n<li>Sort notes by multiple criteria - title, updated time, etc.</li>\n<li>Support for alarms (notifications) in mobile and desktop applications.</li>\n<li>Offline first, so the entire data is always available on the device even without an internet connection.</li>\n<li>Markdown notes, which are rendered with images and formatting in the desktop and mobile applications. Support for extra features such as math notation and checkboxes.</li>\n<li>File attachment support - images are displayed, and other files are linked and can be opened in the relevant application.</li>\n<li>Search functionality.</li>\n<li>Geo-location support.</li>\n<li>Supports multiple languages</li>\n</ul>\n<h1 id=\"importing\">Importing</h1>\n<h2 id=\"importing-from-evernote\">Importing from Evernote</h2>\n<p>Joplin was designed as a replacement for Evernote and so can import complete Evernote notebooks, as well as notes, tags, resources (attached files) and note metadata (such as author, geo-location, etc.) via ENEX files. In terms of data, the only two things that might slightly differ are:</p>\n<ul>\n<li><p>Recognition data - Evernote images, in particular scanned (or photographed) documents have <a href=\"https://en.wikipedia.org/wiki/Optical_character_recognition\">recognition data</a> associated with them. It is the text that Evernote has been able to recognise in the document. This data is not preserved when the note are imported into Joplin. However, should it become supported in the search tool or other parts of Joplin, it should be possible to regenerate this recognition data since the actual image would still be available.</p>\n</li>\n<li><p>Colour, font sizes and faces - Evernote text is stored as HTML and this is converted to Markdown during the import process. For notes that are mostly plain text or with basic formatting (bold, italic, bullet points, links, etc.) this is a lossless conversion, and the note, once rendered back to HTML should be very similar. Tables are also imported and converted to Markdown tables. For very complex notes, some formatting data might be lost - in particular colours, font sizes and font faces will not be imported. The text itself however is always imported in full regardless of formatting.</p>\n</li>\n</ul>\n<p>To import Evernote data, first export your Evernote notebooks to ENEX files as described <a href=\"https://help.evernote.com/hc/en-us/articles/209005557-How-to-back-up-export-and-restore-import-notes-and-notebooks\">here</a>. Then follow these steps:</p>\n<p>On the <strong>desktop application</strong>, open File &gt; Import &gt; ENEX and select your file. The notes will be imported into a new separate notebook. If needed they can then be moved to a different notebook, or the notebook can be renamed, etc.</p>\n<p>On the <strong>terminal application</strong>, in <a href=\"https://joplin.cozic.net/terminal#command-line-mode\">command-line mode</a>, type <code>import /path/to/file.enex</code>. This will import the notes into a new notebook named after the filename.</p>\n<h2 id=\"importing-from-markdown-files\">Importing from Markdown files</h2>\n<p>Joplin can import notes from plain Markdown file. You can either import a complete directory of Markdown files or individual files.</p>\n<p>On the <strong>desktop application</strong>, open File &gt; Import &gt; MD and select your Markdown file or directory.</p>\n<p>On the <strong>terminal application</strong>, in <a href=\"https://joplin.cozic.net/terminal#command-line-mode\">command-line mode</a>, type <code>import --format md /path/to/file.md</code> or <code>import --format md /path/to/directory/</code>.</p>\n<h2 id=\"importing-from-other-applications\">Importing from other applications</h2>\n<p>In general the way to import notes from any application into Joplin is to convert the notes to ENEX files (Evernote format) and to import these ENEX files into Joplin using the method above. Most note-taking applications support ENEX files so it should be relatively straightforward. For help about specific applications, see below:</p>\n<ul>\n<li>Standard Notes: Please see <a href=\"https://programadorwebvalencia.com/migrate-notes-from-standard-notes-to-joplin/\">this tutorial</a></li>\n<li>Tomboy Notes: Export the notes to ENEX files <a href=\"https://askubuntu.com/questions/243691/how-can-i-export-my-tomboy-notes-into-evernote/608551\">as described here</a> for example, and import these ENEX files into Joplin.</li>\n<li>OneNote: First <a href=\"https://discussion.evernote.com/topic/107736-is-there-a-way-to-import-from-onenote-into-evernote-on-the-mac/\">import the notes from OneNote into Evernote</a>. Then export the ENEX file from Evernote and import it into Joplin.</li>\n</ul>\n<h1 id=\"exporting\">Exporting</h1>\n<p>Joplin can export to the JEX format (Joplin Export file), which is a tar file that can contain multiple notes, notebooks, etc. This is a lossless format in that all the notes, but also metadata such as geo-location, updated time, tags, etc. are preserved. This format is convenient for backup purposes and can be re-imported into Joplin. A &quot;raw&quot; format is also available. This is the same as the JEX format except that the data is saved to a directory and each item represented by a single file.</p>\n<h1 id=\"synchronisation\">Synchronisation</h1>\n<p>One of the goals of Joplin was to avoid being tied to any particular company or service, whether it is Evernote, Google or Microsoft. As such the synchronisation is designed without any hard dependency to any particular service. Most of the synchronisation process is done at an abstract level and access to external services, such as Nextcloud or Dropbox, is done via lightweight drivers. It is easy to support new services by creating simple drivers that provide a filesystem-like interface, i.e. the ability to read, write, delete and list items. It is also simple to switch from one service to another or to even sync to multiple services at once. Each note, notebook, tags, as well as the relation between items is transmitted as plain text files during synchronisation, which means the data can also be moved to a different application, can be easily backed up, inspected, etc.</p>\n<p>Currently, synchronisation is possible with Nextcloud, Dropbox (by default) or the local filesystem. To setup synchronisation please follow the instructions below. After that, the application will synchronise in the background whenever it is running, or you can click on &quot;Synchronise&quot; to start a synchronisation manually.</p>\n<h2 id=\"nextcloud-synchronisation\">Nextcloud synchronisation</h2>\n<p><img src=\"https://joplin.cozic.net/images/nextcloud-logo-background.png\" width=\"100\" align=\"left\"> <a href=\"https://nextcloud.com/\">Nextcloud</a> is a self-hosted, private cloud solution. It can store documents, images and videos but also calendars, passwords and countless other things and can sync them to your laptop or phone. As you can host your own Nextcloud server, you own both the data on your device and infrastructure used for synchronisation. As such it is a good fit for Joplin. The platform is also well supported and with a strong community, so it is likely to be around for a while - since it&#39;s open source anyway, it is not a service that can be closed, it can exist on a server for as long as one chooses.</p>\n<p>On the <strong>desktop application</strong> or <strong>mobile application</strong>, go to the config screen and select Nextcloud as the synchronisation target. Then input the WebDAV URL (to get it, click on Settings in the bottom left corner of the page, in Nextcloud), this is normally <code>https://example.com/nextcloud/remote.php/webdav/Joplin</code> (<strong>make sure to create the &quot;Joplin&quot; directory in Nextcloud</strong>), and set the username and password. If it does not work, please <a href=\"https://github.com/laurent22/joplin/issues/61#issuecomment-373282608\">see this explanation</a> for more details.</p>\n<p>On the <strong>terminal application</strong>, you will need to set the <code>sync.target</code> config variable and all the <code>sync.5.path</code>, <code>sync.5.username</code> and <code>sync.5.password</code> config variables to, respectively the Nextcloud WebDAV URL, your username and your password. This can be done from the command line mode using:</p>\n<pre><code>:config sync.5.path https://example.com/nextcloud/remote.php/webdav/Joplin\n:config sync.5.username YOUR_USERNAME\n:config sync.5.password YOUR_PASSWORD\n:config sync.target 5\n</code></pre><p>If synchronisation does not work, please consult the logs in the app profile directory - it is often due to a misconfigured URL or password. The log should indicate what the exact issue is.</p>\n<h2 id=\"dropbox-synchronisation\">Dropbox synchronisation</h2>\n<p>When syncing with Dropbox, Joplin creates a sub-directory in Dropbox, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.</p>\n<p>On the <strong>desktop application</strong> or <strong>mobile application</strong>, select &quot;Dropbox&quot; as the synchronisation target in the config screen (it is selected by default). Then, to initiate the synchronisation process, click on the &quot;Synchronise&quot; button in the sidebar and follow the instructions.</p>\n<p>On the <strong>terminal application</strong>, to initiate the synchronisation process, type <code>:sync</code>. You will be asked to follow a link to authorise the application. It is possible to also synchronise outside of the user interface by typing <code>joplin sync</code> from the terminal. This can be used to setup a cron script to synchronise at regular interval. For example, this would do it every 30 minutes:</p>\n<pre><code>*/30 * * * * /path/to/joplin sync\n</code></pre><h2 id=\"webdav-synchronisation\">WebDAV synchronisation</h2>\n<p>Select the &quot;WebDAV&quot; synchronisation target and follow the same instructions as for Nextcloud above.</p>\n<p>WebDAV-compatible services that are known to work with Joplin.</p>\n<ul>\n<li><a href=\"https://www.box.com/\">Box.com</a></li>\n<li><a href=\"https://www.drivehq.com\">DriveHQ</a></li>\n<li><a href=\"https://www.strato.fr/stockage-en-ligne/\">HiDrive</a> from Strato. <a href=\"https://github.com/laurent22/joplin/issues/309\">Setup help</a></li>\n<li><a href=\"https://owncloud.org/\">OwnCloud</a></li>\n<li><a href=\"https://www.seafile.com/\">Seafile</a></li>\n<li><a href=\"https://www.transip.nl/stack/\">Stack</a></li>\n<li><a href=\"https://www.zimbra.com/\">Zimbra</a></li>\n</ul>\n<h2 id=\"onedrive-synchronisation\">OneDrive synchronisation</h2>\n<p>When syncing with OneDrive, Joplin creates a sub-directory in OneDrive, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.</p>\n<p>On the <strong>desktop application</strong> or <strong>mobile application</strong>, select &quot;OneDrive&quot; as the synchronisation target in the config screen. Then, to initiate the synchronisation process, click on the &quot;Synchronise&quot; button in the sidebar and follow the instructions.</p>\n<p>On the <strong>terminal application</strong>, to initiate the synchronisation process, type <code>:sync</code>. You will be asked to follow a link to authorise the application (simply input your Microsoft credentials - you do not need to register with OneDrive).</p>\n<h1 id=\"encryption\">Encryption</h1>\n<p>Joplin supports end-to-end encryption (E2EE) on all the applications. E2EE is a system where only the owner of the notes, notebooks, tags or resources can read them. It prevents potential eavesdroppers - including telecom providers, internet providers, and even the developers of Joplin from being able to access the data. Please see the <a href=\"https://joplin.cozic.net/e2ee\">End-To-End Encryption Tutorial</a> for more information about this feature and how to enable it.</p>\n<p>For a more technical description, mostly relevant for development or to review the method being used, please see the <a href=\"https://joplin.cozic.net/spec\">Encryption specification</a>.</p>\n<h1 id=\"attachments-resources\">Attachments / Resources</h1>\n<p>Any kind of file can be attached to a note. In Markdown, links to these files are represented as a simple ID to the resource. In the note viewer, these files, if they are images, will be displayed or, if they are other files (PDF, text files, etc.) they will be displayed as links. Clicking on this link will open the file in the default application.</p>\n<p>Resources that are not attached to any note will be automatically deleted after a day or two.</p>\n<p><strong>Important:</strong> Resources larger than 10 MB are not currently supported on mobile. They will crash the application when synchronising so it is recommended not to attach such resources at the moment. The issue is being looked at.</p>\n<h1 id=\"notifications\">Notifications</h1>\n<p>On the desktop and mobile apps, an alarm can be associated with any to-do. It will be triggered at the given time by displaying a notification. How the notification will be displayed depends on the operating system since each has a different way to handle this. Please see below for the requirements for the desktop applications:</p>\n<ul>\n<li><strong>Windows</strong>: &gt;= 8. Make sure the Action Center is enabled on Windows. Task bar balloon for Windows &lt; 8. Growl as fallback. Growl takes precedence over Windows balloons.</li>\n<li><strong>macOS</strong>: &gt;= 10.8 or Growl if earlier.</li>\n<li><strong>Linux</strong>: <code>notify-osd</code> or <code>libnotify-bin</code> installed (Ubuntu should have this by default). Growl otherwise</li>\n</ul>\n<p>See <a href=\"https://github.com/mikaelbr/node-notifier/blob/master/DECISION_FLOW.md\">documentation and flow chart for reporter choice</a></p>\n<p>On mobile, the alarms will be displayed using the built-in notification system.</p>\n<p>If for any reason the notifications do not work, please <a href=\"https://github.com/laurent22/joplin/issues\">open an issue</a>.</p>\n<h1 id=\"sub-notebooks\">Sub-notebooks</h1>\n<p>Sub-notebooks allow organising multiple notebooks into a tree of notebooks. For example it can be used to regroup all the notebooks related to work, to family or to a particular project under a parent notebook.</p>\n<p><img src=\"https://joplin.cozic.net/images/SubNotebooks.png\" alt=\"\"></p>\n<ul>\n<li>On the <strong>desktop application</strong>, to create a subnotebook, drag and drop it onto another notebook. To move it back to the root, drag and drop it on the &quot;Notebooks&quot; header. Currently only the desktop app can be used to organise the notebooks.</li>\n<li>The <strong>mobile application</strong> supports displaying and collapsing/expanding the tree of notebooks, however it does not currently support moving the subnotebooks to different notebooks.</li>\n<li>The <strong>terminal app</strong> supports displaying the tree of subnotebooks but it does not support collapsing/expanding them or moving the subnotebooks around.</li>\n</ul>\n<h1 id=\"markdown\">Markdown</h1>\n<p>Joplin uses and renders <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">Github-flavoured Markdown</a> with a few variations and additions. In particular:</p>\n<h2 id=\"links-to-other-notes\">Links to other notes</h2>\n<p>You can create a link to a note by specifying its ID in the URL. For example:</p>\n<pre><code>[Link to my note](:/0b0d62d15e60409dac34f354b6e9e839)\n</code></pre><p>Since getting the ID of a note is not straightforward, each app provides a way to create such link. In the <strong>desktop app</strong>, right click on a note an select &quot;Copy Markdown link&quot;. In the <strong>mobile app</strong>, open a note and, in the top right menu, select &quot;Copy Markdown link&quot;. You can then paste this link anywhere in another note.</p>\n<h2 id=\"math-notation\">Math notation</h2>\n<p>Math expressions can be added using the <a href=\"https://khan.github.io/KaTeX/\">Katex notation</a>. To add an inline equation, wrap the expression in <code>$EXPRESSION$</code>, eg. <code>$\\sqrt{3x-1}+(1+x)^2$</code>. To create an expression block, wrap it as follow:</p>\n<pre><code>$$\nEXPRESSION\n$$\n</code></pre><p>For example:</p>\n<pre><code>$$\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n</code></pre><p>Here is an example with the Markdown and rendered result side by side:</p>\n<p><img src=\"https://joplin.cozic.net/images/Katex.png\" style=\"max-width: 100%; max-height: 35em;\"></p>\n<h2 id=\"checkboxes\">Checkboxes</h2>\n<p>Checkboxes can be added like so:</p>\n<pre><code>- [ ] Milk\n- [ ] Rice\n- [ ] Eggs\n</code></pre><p>The checkboxes can then be ticked in the mobile and desktop applications.</p>\n<h1 id=\"donations\">Donations</h1>\n<p>Donations to Joplin support the development of the project. Developing quality applications mostly takes time, but there are also some expenses, such as digital certificates to sign the applications, app store fees, hosting, etc. Most of all, your donation will make it possible to keep up the current development standard.</p>\n<p>Please see the <a href=\"https://joplin.cozic.net/donate/\">donation page</a> for information on how to support the development of Joplin.</p>\n<h1 id=\"community\">Community</h1>\n<ul>\n<li>For general discussion about Joplin, user support, software development questions, and to discuss new features, go to the <a href=\"https://discourse.joplin.cozic.net/\">Joplin Forum</a>. It is possible to login with your GitHub account.</li>\n<li>For bug reports and feature requests, go to the <a href=\"https://github.com/laurent22/joplin/issues\">GitHub Issue Tracker</a>.</li>\n<li>The latest news are often posted <a href=\"https://twitter.com/laurent2233\">on this Twitter account</a>.</li>\n</ul>\n<h1 id=\"contributing\">Contributing</h1>\n<p>Please see the guide for information on how to contribute to the development of Joplin: <a href=\"https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md\">https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md</a></p>\n<h1 id=\"localisation\">Localisation</h1>\n<p>Joplin is currently available in the languages below. If you would like to contribute a <strong>new translation</strong>, it is quite straightforward, please follow these steps:</p>\n<ul>\n<li><a href=\"https://poedit.net/\">Download Poedit</a>, the translation editor, and install it.</li>\n<li><a href=\"https://raw.githubusercontent.com/laurent22/joplin/master/CliClient/locales/joplin.pot\">Download the file to be translated</a>.</li>\n<li>In Poedit, open this .pot file, go into the Catalog menu and click Configuration. Change &quot;Country&quot; and &quot;Language&quot; to your own country and language.</li>\n<li>From then you can translate the file. Once it is done, please either <a href=\"https://github.com/laurent22/joplin/pulls\">open a pull request</a> or send the file to <a href=\"https://raw.githubusercontent.com/laurent22/joplin/master/Assets/Adresse.png\">this address</a>.</li>\n</ul>\n<p>This translation will apply to the three applications - desktop, mobile and terminal.</p>\n<p>To <strong>update a translation</strong>, follow the same steps as above but instead of getting the .pot file, get the .po file for your language from the table below.</p>\n<p>Current translations:</p>\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n<table>\n<thead>\n<tr>\n<th>&nbsp;</th>\n<th>Language</th>\n<th>Po File</th>\n<th>Last translator</th>\n<th>Percent done</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/es/basque_country.png\" alt=\"\"></td>\n<td>Basque</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/eu.po\">eu</a></td>\n<td>juan.abasolo@ehu.eus</td>\n<td>75%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/hr.png\" alt=\"\"></td>\n<td>Croatian</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/hr_HR.po\">hr_HR</a></td>\n<td>Hrvoje Mandi\u0107 <a href=\"&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#116;&#x72;&#98;&#117;&#104;&#x6f;&#109;&#64;&#110;&#x65;&#116;&#x2e;&#104;&#114;\">&#116;&#x72;&#98;&#117;&#104;&#x6f;&#109;&#64;&#110;&#x65;&#116;&#x2e;&#104;&#114;</a></td>\n<td>61%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/cz.png\" alt=\"\"></td>\n<td>Czech</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/cs_CZ.po\">cs_CZ</a></td>\n<td>Lukas Helebrandt <a href=\"&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#108;&#x75;&#x6b;&#97;&#x73;&#x40;&#x61;&#x69;&#121;&#97;&#46;&#x63;&#x7a;\">&#108;&#x75;&#x6b;&#97;&#x73;&#x40;&#x61;&#x69;&#121;&#97;&#46;&#x63;&#x7a;</a></td>\n<td>95%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/dk.png\" alt=\"\"></td>\n<td>Dansk</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/da_DK.po\">da_DK</a></td>\n<td>Morten Juhl-Johansen Z\u00f6lde-Fej\u00e9r &lt;mjjzf@syntaktisk.</td>\n<td>97%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/de.png\" alt=\"\"></td>\n<td>Deutsch</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/de_DE.po\">de_DE</a></td>\n<td>Philipp Zumstein <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#122;&#x75;&#x70;&#104;&#105;&#108;&#105;&#x70;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;\">&#122;&#x75;&#x70;&#104;&#105;&#108;&#105;&#x70;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a></td>\n<td>98%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/gb.png\" alt=\"\"></td>\n<td>English</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/en_GB.po\">en_GB</a></td>\n<td></td>\n<td>100%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/es.png\" alt=\"\"></td>\n<td>Espa\u00f1ol</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/es_ES.po\">es_ES</a></td>\n<td>Fernando Mart\u00edn <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#102;&#64;&#x6d;&#114;&#116;&#x6e;&#x2e;&#101;&#115;\">&#102;&#64;&#x6d;&#114;&#116;&#x6e;&#x2e;&#101;&#115;</a></td>\n<td>99%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/fr.png\" alt=\"\"></td>\n<td>Fran\u00e7ais</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/fr_FR.po\">fr_FR</a></td>\n<td>Laurent Cozic</td>\n<td>98%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/es.png\" alt=\"\"></td>\n<td>Galician</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/gl_ES.po\">gl_ES</a></td>\n<td>Marcos Lans <a href=\"&#x6d;&#97;&#x69;&#108;&#116;&#111;&#58;&#x6d;&#97;&#114;&#99;&#111;&#x73;&#108;&#x61;&#110;&#x73;&#103;&#97;&#x72;&#122;&#97;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;\">&#x6d;&#97;&#114;&#99;&#111;&#x73;&#108;&#x61;&#110;&#x73;&#103;&#97;&#x72;&#122;&#97;&#64;&#x67;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a></td>\n<td>95%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/it.png\" alt=\"\"></td>\n<td>Italiano</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/it_IT.po\">it_IT</a></td>\n<td></td>\n<td>63%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/be.png\" alt=\"\"></td>\n<td>Nederlands</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/nl_BE.po\">nl_BE</a></td>\n<td></td>\n<td>76%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/br.png\" alt=\"\"></td>\n<td>Portugu\u00eas (Brasil)</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/pt_BR.po\">pt_BR</a></td>\n<td>Renato Nunes Bastos <a href=\"&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x72;&#x6e;&#x62;&#97;&#x73;&#116;&#x6f;&#x73;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;\">&#x72;&#x6e;&#x62;&#97;&#x73;&#116;&#x6f;&#x73;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></td>\n<td>97%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/ru.png\" alt=\"\"></td>\n<td>\u0420\u0443\u0441\u0441\u043a\u0438\u0439</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/ru_RU.po\">ru_RU</a></td>\n<td>Artyom Karlov <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#114;&#116;&#x79;&#x6f;&#x6d;&#x2e;&#x6b;&#97;&#x72;&#x6c;&#x6f;&#x76;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;\">&#97;&#114;&#116;&#x79;&#x6f;&#x6d;&#x2e;&#x6b;&#97;&#x72;&#x6c;&#x6f;&#x76;&#64;&#x67;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a></td>\n<td>94%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/cn.png\" alt=\"\"></td>\n<td>\u4e2d\u6587 (\u7b80\u4f53)</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/zh_CN.po\">zh_CN</a></td>\n<td></td>\n<td>91%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/jp.png\" alt=\"\"></td>\n<td>\u65e5\u672c\u8a9e</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/ja_JP.po\">ja_JP</a></td>\n<td></td>\n<td>61%</td>\n</tr>\n</tbody>\n</table>\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n<h1 id=\"known-bugs\">Known bugs</h1>\n<ul>\n<li>Resources larger than 10 MB are not currently supported on mobile. They will crash the application so it is recommended not to attach such resources at the moment. The issue is being looked at.</li>\n<li>Non-alphabetical characters such as Chinese or Arabic might create glitches in the terminal on Windows. This is a limitation of the current Windows console.</li>\n<li>It is only possible to upload files of up to 4MB to OneDrive due to a limitation of <a href=\"https://docs.microsoft.com/en-gb/onedrive/developer/rest-api/api/driveitem_put_content\">the API</a> being currently used. There is currently no plan to support OneDrive &quot;large file&quot; API.</li>\n</ul>\n<h1 id=\"license\">License</h1>\n<p>MIT License</p>\n<p>Copyright (c) 2016-2018 Laurent Cozic</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n\n<script>\n\tfunction stickyHeader() { \n\t\treturn; // Disabled\n\n\t\tif ($(window).scrollTop() > 179) {\n\t\t\t$('.nav').addClass('sticky'); \n\t\t} else {\n\t\t\t$('.nav').removeClass('sticky');\n\t\t}\n\t}\n\n\t$('#toc').hide();\n\n\t$('.help').click(function(event) {\n\t\tevent.preventDefault();\n\t\t$('#toc').show();\n\t});\n\n\t$(window).scroll(function() {\n\t\tstickyHeader();\n\t});\n\n\t(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n\t})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\tga('create', 'UA-103586105-1', 'auto');\n\tga('send', 'pageview');\n</script>\n\n<div class=\"footer\">\nCopyright (c) 2016-2018 Laurent Cozic\n</div>\n</body>\n</html>\n"], "fixing_code": ["# Joplin\n\n[![Donate](https://joplin.cozic.net/images/badges/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=E8JMYD2LQ8MMA&lc=GB&item_name=Joplin+Development&currency_code=EUR&bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted) [![Donate with Bitcoin](https://joplin.cozic.net/images/badges/Donate-Bitcoin.svg)](https://joplin.cozic.net/donate/#bitcoin) [![Travis Build Status](https://travis-ci.org/laurent22/joplin.svg?branch=master)](https://travis-ci.org/laurent22/joplin) [![Appveyor Build Status](https://ci.appveyor.com/api/projects/status/github/laurent22/joplin?branch=master&passingText=master%20-%20OK&svg=true)](https://ci.appveyor.com/project/laurent22/joplin)\n\nJoplin is a free, open source note taking and to-do application, which can handle a large number of notes organised into notebooks. The notes are searchable, can be copied, tagged and modified either from the applications directly or from your own text editor. The notes are in [Markdown format](#markdown).\n\nNotes exported from Evernote via .enex files [can be imported](#importing) into Joplin, including the formatted content (which is converted to Markdown), resources (images, attachments, etc.) and complete metadata (geolocation, updated time, created time, etc.). Plain Markdown files can also be imported.\n\nThe notes can be [synchronised](#synchronisation) with various cloud services including [Nextcloud](https://nextcloud.com/), Dropbox, OneDrive or the file system (for example with a network directory). When synchronising the notes, notebooks, tags and other metadata are saved to plain text files which can be easily inspected, backed up and moved around.\n\nThe UI of the terminal client is built on top of the great [terminal-kit](https://github.com/cronvel/terminal-kit) library, the desktop client using [Electron](https://electronjs.org/), and the Android client front end is done using [React Native](https://facebook.github.io/react-native/).\n\n<div class=\"top-screenshot\"><img src=\"https://joplin.cozic.net/images/AllClients.jpg\" style=\"max-width: 100%; max-height: 35em;\"></div>\n\n# Installation\n\nThree types of applications are available: for the **desktop** (Windows, macOS and Linux), for **mobile** (Android and iOS) and for **terminal** (Windows, macOS and Linux). All applications have similar user interfaces and can synchronise with each others.\n\n## Desktop applications\n\nOperating System | Download | Alternative\n-----------------|--------|-------------------\nWindows (32 and 64-bit)         | <a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.exe'><img alt='Get it on Windows' height=\"40px\" src='https://joplin.cozic.net/images/BadgeWindows.png'/></a> | \nmacOS          | <a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.dmg'><img alt='Get it on macOS' height=\"40px\" src='https://joplin.cozic.net/images/BadgeMacOS.png'/></a> | \nLinux          | <a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89-x86_64.AppImage'><img alt='Get it on Linux' height=\"40px\" src='https://joplin.cozic.net/images/BadgeLinux.png'/></a> | An Arch Linux package [is also available](#terminal-application).\n\n## Mobile applications\n\nOperating System | Download | Alt. Download\n-----------------|----------|----------------\nAndroid          | <a href='https://play.google.com/store/apps/details?id=net.cozic.joplin&utm_source=GitHub&utm_campaign=README&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' height=\"40px\" src='https://joplin.cozic.net/images/BadgeAndroid.png'/></a> | or [Download APK File](https://github.com/laurent22/joplin-android/releases/download/android-v1.0.123/joplin-v1.0.123.apk)\niOS              | <a href='https://itunes.apple.com/us/app/joplin/id1315599797'><img alt='Get it on the App Store' height=\"40px\" src='https://joplin.cozic.net/images/BadgeIOS.png'/></a> | -\n\n## Terminal application\n\nOperating system | Method\n-----------------|----------------\nmacOS            | `brew install joplin`\nLinux or Windows (via [WSL](https://msdn.microsoft.com/en-us/commandline/wsl/faq?f=255&MSPPError=-2147217396)) | **Important:** First, [install Node 8+](https://nodejs.org/en/download/package-manager/). Node 8 is LTS but not yet available everywhere so you might need to manually install it.<br/><br/>`NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin`<br/>`sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin`<br><br>By default, the application binary will be installed under `~/.joplin-bin`. You may change this directory if needed. Alternatively, if your npm permissions are setup as described [here](https://docs.npmjs.com/getting-started/fixing-npm-permissions#option-2-change-npms-default-directory-to-another-directory) (Option 2) then simply running `npm -g install joplin` would work.\nArch Linux | An Arch Linux package is available [here](https://aur.archlinux.org/packages/joplin/). To install it, use an AUR wrapper such as yay: `yay -S joplin`. Both the CLI tool (type `joplin`) and desktop app (type `joplin-desktop`) are packaged. For support, please go to the [GitHub repo](https://github.com/masterkorp/joplin-pkgbuild).\n\nTo start it, type `joplin`.\n\nFor usage information, please refer to the full [Joplin Terminal Application Documentation](https://joplin.cozic.net/terminal).\n\n<!-- TOC -->\n# Table of contents\n\n- Applications\n\n\t- [Desktop application](https://github.com/laurent22/joplin/blob/master/readme/desktop.md)\n\t- [Mobile applications](https://github.com/laurent22/joplin/blob/master/readme/mobile.md)\n\t- [Terminal application](https://github.com/laurent22/joplin/blob/master/readme/terminal.md)\n\n- Support\n\n\t- [Joplin Forum](https://discourse.joplin.cozic.net)\n\t- [How to enable end-to-end encryption](https://github.com/laurent22/joplin/blob/master/readme/e2ee.md)\n\t- [End-to-end encryption spec](https://github.com/laurent22/joplin/blob/master/readme/spec.md)\n\t- [How to enable debug mode](https://github.com/laurent22/joplin/blob/master/readme/debugging.md)\n\t- [FAQ](https://github.com/laurent22/joplin/blob/master/readme/faq.md)\n\n- About\n\n\t- [Changelog](https://github.com/laurent22/joplin/blob/master/readme/changelog.md)\n\t- [Stats](https://github.com/laurent22/joplin/blob/master/readme/stats.md)\n\t- [Donate](https://github.com/laurent22/joplin/blob/master/readme/donate.md)\n<!-- TOC -->\n\n# Features \n\n- Desktop, mobile and terminal applications.\n- End To End Encryption (E2EE)\n- Synchronisation with various services, including NextCloud, Dropbox, WebDAV and OneDrive.\n- Import Enex files (Evernote export format) and Markdown files.\n- Export JEX files (Joplin Export format) and raw files.\n- Support notes, to-dos, tags and notebooks.\n- Sort notes by multiple criteria - title, updated time, etc.\n- Support for alarms (notifications) in mobile and desktop applications.\n- Offline first, so the entire data is always available on the device even without an internet connection.\n- Markdown notes, which are rendered with images and formatting in the desktop and mobile applications. Support for extra features such as math notation and checkboxes.\n- File attachment support - images are displayed, and other files are linked and can be opened in the relevant application.\n- Search functionality.\n- Geo-location support.\n- Supports multiple languages\n\n# Importing\n\n## Importing from Evernote \n\nJoplin was designed as a replacement for Evernote and so can import complete Evernote notebooks, as well as notes, tags, resources (attached files) and note metadata (such as author, geo-location, etc.) via ENEX files. In terms of data, the only two things that might slightly differ are:\n\n- Recognition data - Evernote images, in particular scanned (or photographed) documents have [recognition data](https://en.wikipedia.org/wiki/Optical_character_recognition) associated with them. It is the text that Evernote has been able to recognise in the document. This data is not preserved when the note are imported into Joplin. However, should it become supported in the search tool or other parts of Joplin, it should be possible to regenerate this recognition data since the actual image would still be available.\n\n- Colour, font sizes and faces - Evernote text is stored as HTML and this is converted to Markdown during the import process. For notes that are mostly plain text or with basic formatting (bold, italic, bullet points, links, etc.) this is a lossless conversion, and the note, once rendered back to HTML should be very similar. Tables are also imported and converted to Markdown tables. For very complex notes, some formatting data might be lost - in particular colours, font sizes and font faces will not be imported. The text itself however is always imported in full regardless of formatting.\n\nTo import Evernote data, first export your Evernote notebooks to ENEX files as described [here](https://help.evernote.com/hc/en-us/articles/209005557-How-to-back-up-export-and-restore-import-notes-and-notebooks). Then follow these steps:\n\nOn the **desktop application**, open File > Import > ENEX and select your file. The notes will be imported into a new separate notebook. If needed they can then be moved to a different notebook, or the notebook can be renamed, etc.\n\nOn the **terminal application**, in [command-line mode](https://joplin.cozic.net/terminal#command-line-mode), type `import /path/to/file.enex`. This will import the notes into a new notebook named after the filename.\n\n## Importing from Markdown files\n\nJoplin can import notes from plain Markdown file. You can either import a complete directory of Markdown files or individual files.\n\nOn the **desktop application**, open File > Import > MD and select your Markdown file or directory.\n\nOn the **terminal application**, in [command-line mode](https://joplin.cozic.net/terminal#command-line-mode), type `import --format md /path/to/file.md` or `import --format md /path/to/directory/`.\n\n## Importing from other applications\n\nIn general the way to import notes from any application into Joplin is to convert the notes to ENEX files (Evernote format) and to import these ENEX files into Joplin using the method above. Most note-taking applications support ENEX files so it should be relatively straightforward. For help about specific applications, see below:\n\n* Standard Notes: Please see [this tutorial](https://programadorwebvalencia.com/migrate-notes-from-standard-notes-to-joplin/)\n* Tomboy Notes: Export the notes to ENEX files [as described here](https://askubuntu.com/questions/243691/how-can-i-export-my-tomboy-notes-into-evernote/608551) for example, and import these ENEX files into Joplin.\n* OneNote: First [import the notes from OneNote into Evernote](https://discussion.evernote.com/topic/107736-is-there-a-way-to-import-from-onenote-into-evernote-on-the-mac/). Then export the ENEX file from Evernote and import it into Joplin.\n\n# Exporting\n\nJoplin can export to the JEX format (Joplin Export file), which is a tar file that can contain multiple notes, notebooks, etc. This is a lossless format in that all the notes, but also metadata such as geo-location, updated time, tags, etc. are preserved. This format is convenient for backup purposes and can be re-imported into Joplin. A \"raw\" format is also available. This is the same as the JEX format except that the data is saved to a directory and each item represented by a single file.\n\n# Synchronisation\n\nOne of the goals of Joplin was to avoid being tied to any particular company or service, whether it is Evernote, Google or Microsoft. As such the synchronisation is designed without any hard dependency to any particular service. Most of the synchronisation process is done at an abstract level and access to external services, such as Nextcloud or Dropbox, is done via lightweight drivers. It is easy to support new services by creating simple drivers that provide a filesystem-like interface, i.e. the ability to read, write, delete and list items. It is also simple to switch from one service to another or to even sync to multiple services at once. Each note, notebook, tags, as well as the relation between items is transmitted as plain text files during synchronisation, which means the data can also be moved to a different application, can be easily backed up, inspected, etc.\n\nCurrently, synchronisation is possible with Nextcloud, Dropbox (by default) or the local filesystem. To setup synchronisation please follow the instructions below. After that, the application will synchronise in the background whenever it is running, or you can click on \"Synchronise\" to start a synchronisation manually.\n\n## Nextcloud synchronisation\n\n<img src=\"https://joplin.cozic.net/images/nextcloud-logo-background.png\" width=\"100\" align=\"left\"> <a href=\"https://nextcloud.com/\">Nextcloud</a> is a self-hosted, private cloud solution. It can store documents, images and videos but also calendars, passwords and countless other things and can sync them to your laptop or phone. As you can host your own Nextcloud server, you own both the data on your device and infrastructure used for synchronisation. As such it is a good fit for Joplin. The platform is also well supported and with a strong community, so it is likely to be around for a while - since it's open source anyway, it is not a service that can be closed, it can exist on a server for as long as one chooses.\n\nOn the **desktop application** or **mobile application**, go to the config screen and select Nextcloud as the synchronisation target. Then input the WebDAV URL (to get it, click on Settings in the bottom left corner of the page, in Nextcloud), this is normally `https://example.com/nextcloud/remote.php/webdav/Joplin` (**make sure to create the \"Joplin\" directory in Nextcloud**), and set the username and password. If it does not work, please [see this explanation](https://github.com/laurent22/joplin/issues/61#issuecomment-373282608) for more details.\n\nOn the **terminal application**, you will need to set the `sync.target` config variable and all the `sync.5.path`, `sync.5.username` and `sync.5.password` config variables to, respectively the Nextcloud WebDAV URL, your username and your password. This can be done from the command line mode using:\n\n\t:config sync.5.path https://example.com/nextcloud/remote.php/webdav/Joplin\n\t:config sync.5.username YOUR_USERNAME\n\t:config sync.5.password YOUR_PASSWORD\n\t:config sync.target 5\n\nIf synchronisation does not work, please consult the logs in the app profile directory - it is often due to a misconfigured URL or password. The log should indicate what the exact issue is.\n\n## Dropbox synchronisation\n\nWhen syncing with Dropbox, Joplin creates a sub-directory in Dropbox, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.\n\nOn the **desktop application** or **mobile application**, select \"Dropbox\" as the synchronisation target in the config screen (it is selected by default). Then, to initiate the synchronisation process, click on the \"Synchronise\" button in the sidebar and follow the instructions.\n\nOn the **terminal application**, to initiate the synchronisation process, type `:sync`. You will be asked to follow a link to authorise the application. It is possible to also synchronise outside of the user interface by typing `joplin sync` from the terminal. This can be used to setup a cron script to synchronise at regular interval. For example, this would do it every 30 minutes:\n\n\t*/30 * * * * /path/to/joplin sync\n\n## WebDAV synchronisation\n\nSelect the \"WebDAV\" synchronisation target and follow the same instructions as for Nextcloud above.\n\nWebDAV-compatible services that are known to work with Joplin.\n\n- [Box.com](https://www.box.com/)\n- [DriveHQ](https://www.drivehq.com)\n- [HiDrive](https://www.strato.fr/stockage-en-ligne/) from Strato. [Setup help](https://github.com/laurent22/joplin/issues/309)\n- [OwnCloud](https://owncloud.org/)\n- [Seafile](https://www.seafile.com/)\n- [Stack](https://www.transip.nl/stack/)\n- [Zimbra](https://www.zimbra.com/)\n\n## OneDrive synchronisation\n\nWhen syncing with OneDrive, Joplin creates a sub-directory in OneDrive, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.\n\nOn the **desktop application** or **mobile application**, select \"OneDrive\" as the synchronisation target in the config screen. Then, to initiate the synchronisation process, click on the \"Synchronise\" button in the sidebar and follow the instructions.\n\nOn the **terminal application**, to initiate the synchronisation process, type `:sync`. You will be asked to follow a link to authorise the application (simply input your Microsoft credentials - you do not need to register with OneDrive).\n\n# Encryption\n\nJoplin supports end-to-end encryption (E2EE) on all the applications. E2EE is a system where only the owner of the notes, notebooks, tags or resources can read them. It prevents potential eavesdroppers - including telecom providers, internet providers, and even the developers of Joplin from being able to access the data. Please see the [End-To-End Encryption Tutorial](https://joplin.cozic.net/e2ee) for more information about this feature and how to enable it.\n\nFor a more technical description, mostly relevant for development or to review the method being used, please see the [Encryption specification](https://joplin.cozic.net/spec).\n\n# Attachments / Resources\n\nAny kind of file can be attached to a note. In Markdown, links to these files are represented as a simple ID to the resource. In the note viewer, these files, if they are images, will be displayed or, if they are other files (PDF, text files, etc.) they will be displayed as links. Clicking on this link will open the file in the default application.\n\nResources that are not attached to any note will be automatically deleted after a day or two.\n\n**Important:** Resources larger than 10 MB are not currently supported on mobile. They will crash the application when synchronising so it is recommended not to attach such resources at the moment. The issue is being looked at.\n\n# Notifications\n\nOn the desktop and mobile apps, an alarm can be associated with any to-do. It will be triggered at the given time by displaying a notification. How the notification will be displayed depends on the operating system since each has a different way to handle this. Please see below for the requirements for the desktop applications:\n\n- **Windows**: >= 8. Make sure the Action Center is enabled on Windows. Task bar balloon for Windows < 8. Growl as fallback. Growl takes precedence over Windows balloons.\n- **macOS**: >= 10.8 or Growl if earlier.\n- **Linux**: `notify-osd` or `libnotify-bin` installed (Ubuntu should have this by default). Growl otherwise\n\nSee [documentation and flow chart for reporter choice](https://github.com/mikaelbr/node-notifier/blob/master/DECISION_FLOW.md)\n\nOn mobile, the alarms will be displayed using the built-in notification system.\n\nIf for any reason the notifications do not work, please [open an issue](https://github.com/laurent22/joplin/issues).\n\n# Sub-notebooks\n\nSub-notebooks allow organising multiple notebooks into a tree of notebooks. For example it can be used to regroup all the notebooks related to work, to family or to a particular project under a parent notebook.\n\n![](https://joplin.cozic.net/images/SubNotebooks.png)\n\n- On the **desktop application**, to create a subnotebook, drag and drop it onto another notebook. To move it back to the root, drag and drop it on the \"Notebooks\" header. Currently only the desktop app can be used to organise the notebooks.\n- The **mobile application** supports displaying and collapsing/expanding the tree of notebooks, however it does not currently support moving the subnotebooks to different notebooks.\n- The **terminal app** supports displaying the tree of subnotebooks but it does not support collapsing/expanding them or moving the subnotebooks around.\n\n# Markdown\n\nJoplin uses and renders [Github-flavoured Markdown](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) with a few variations and additions. In particular:\n\n## Links to other notes\n\nYou can create a link to a note by specifying its ID in the URL. For example:\n\n\t[Link to my note](:/0b0d62d15e60409dac34f354b6e9e839)\n\nSince getting the ID of a note is not straightforward, each app provides a way to create such link. In the **desktop app**, right click on a note an select \"Copy Markdown link\". In the **mobile app**, open a note and, in the top right menu, select \"Copy Markdown link\". You can then paste this link anywhere in another note.\n\n## Math notation\n\nMath expressions can be added using the [Katex notation](https://khan.github.io/KaTeX/). To add an inline equation, wrap the expression in `$EXPRESSION$`, eg. `$\\sqrt{3x-1}+(1+x)^2$`. To create an expression block, wrap it as follow:\n\n\t$$\n\tEXPRESSION\n\t$$\n\nFor example:\n\n\t$$\n\tf(x) = \\int_{-\\infty}^\\infty\n\t\t\\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n\t\t\\,d\\xi\n\t$$\n\nHere is an example with the Markdown and rendered result side by side:\n\n<img src=\"https://joplin.cozic.net/images/Katex.png\" style=\"max-width: 100%; max-height: 35em;\">\n\n## Checkboxes\n\nCheckboxes can be added like so:\n\n\t- [ ] Milk\n\t- [ ] Rice\n\t- [ ] Eggs\n\nThe checkboxes can then be ticked in the mobile and desktop applications.\n\n## HTML support\n\nOnly the `<br>` tag is supported - it can be used to force a new line, which is convenient to insert new lines inside table cells. For security reasons, other HTML tags are not supported.\n\n# Donations\n\nDonations to Joplin support the development of the project. Developing quality applications mostly takes time, but there are also some expenses, such as digital certificates to sign the applications, app store fees, hosting, etc. Most of all, your donation will make it possible to keep up the current development standard.\n\nPlease see the [donation page](https://joplin.cozic.net/donate/) for information on how to support the development of Joplin.\n\n# Community\n\n- For general discussion about Joplin, user support, software development questions, and to discuss new features, go to the [Joplin Forum](https://discourse.joplin.cozic.net/). It is possible to login with your GitHub account.\n- For bug reports and feature requests, go to the [GitHub Issue Tracker](https://github.com/laurent22/joplin/issues).\n- The latest news are often posted [on this Twitter account](https://twitter.com/laurent2233).\n\n# Contributing\n\nPlease see the guide for information on how to contribute to the development of Joplin: https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md\n\n# Localisation\n\nJoplin is currently available in the languages below. If you would like to contribute a **new translation**, it is quite straightforward, please follow these steps:\n\n- [Download Poedit](https://poedit.net/), the translation editor, and install it.\n- [Download the file to be translated](https://raw.githubusercontent.com/laurent22/joplin/master/CliClient/locales/joplin.pot).\n- In Poedit, open this .pot file, go into the Catalog menu and click Configuration. Change \"Country\" and \"Language\" to your own country and language.\n- From then you can translate the file. Once it is done, please either [open a pull request](https://github.com/laurent22/joplin/pulls) or send the file to [this address](https://raw.githubusercontent.com/laurent22/joplin/master/Assets/Adresse.png).\n\nThis translation will apply to the three applications - desktop, mobile and terminal.\n\nTo **update a translation**, follow the same steps as above but instead of getting the .pot file, get the .po file for your language from the table below.\n\nCurrent translations:\n\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n&nbsp;  |  Language  |  Po File  |  Last translator  |  Percent done\n---|---|---|---|---\n![](https://joplin.cozic.net/images/flags/es/basque_country.png)  |  Basque  |  [eu](https://github.com/laurent22/joplin/blob/master/CliClient/locales/eu.po)  |  juan.abasolo@ehu.eus  |  75%\n![](https://joplin.cozic.net/images/flags/country-4x3/hr.png)  |  Croatian  |  [hr_HR](https://github.com/laurent22/joplin/blob/master/CliClient/locales/hr_HR.po)  |  Hrvoje Mandi\u0107 <trbuhom@net.hr>  |  61%\n![](https://joplin.cozic.net/images/flags/country-4x3/cz.png)  |  Czech  |  [cs_CZ](https://github.com/laurent22/joplin/blob/master/CliClient/locales/cs_CZ.po)  |  Lukas Helebrandt <lukas@aiya.cz>  |  95%\n![](https://joplin.cozic.net/images/flags/country-4x3/dk.png)  |  Dansk  |  [da_DK](https://github.com/laurent22/joplin/blob/master/CliClient/locales/da_DK.po)  |  Morten Juhl-Johansen Z\u00f6lde-Fej\u00e9r <mjjzf@syntaktisk.  |  97%\n![](https://joplin.cozic.net/images/flags/country-4x3/de.png)  |  Deutsch  |  [de_DE](https://github.com/laurent22/joplin/blob/master/CliClient/locales/de_DE.po)  |  Philipp Zumstein <zuphilip@gmail.com>  |  98%\n![](https://joplin.cozic.net/images/flags/country-4x3/gb.png)  |  English  |  [en_GB](https://github.com/laurent22/joplin/blob/master/CliClient/locales/en_GB.po)  |    |  100%\n![](https://joplin.cozic.net/images/flags/country-4x3/es.png)  |  Espa\u00f1ol  |  [es_ES](https://github.com/laurent22/joplin/blob/master/CliClient/locales/es_ES.po)  |  Fernando Mart\u00edn <f@mrtn.es>  |  99%\n![](https://joplin.cozic.net/images/flags/country-4x3/fr.png)  |  Fran\u00e7ais  |  [fr_FR](https://github.com/laurent22/joplin/blob/master/CliClient/locales/fr_FR.po)  |  Laurent Cozic  |  98%\n![](https://joplin.cozic.net/images/flags/country-4x3/es.png)  |  Galician  |  [gl_ES](https://github.com/laurent22/joplin/blob/master/CliClient/locales/gl_ES.po)  |  Marcos Lans <marcoslansgarza@gmail.com>  |  95%\n![](https://joplin.cozic.net/images/flags/country-4x3/it.png)  |  Italiano  |  [it_IT](https://github.com/laurent22/joplin/blob/master/CliClient/locales/it_IT.po)  |    |  63%\n![](https://joplin.cozic.net/images/flags/country-4x3/be.png)  |  Nederlands  |  [nl_BE](https://github.com/laurent22/joplin/blob/master/CliClient/locales/nl_BE.po)  |    |  76%\n![](https://joplin.cozic.net/images/flags/country-4x3/br.png)  |  Portugu\u00eas (Brasil)  |  [pt_BR](https://github.com/laurent22/joplin/blob/master/CliClient/locales/pt_BR.po)  |  Renato Nunes Bastos <rnbastos@gmail.com>  |  97%\n![](https://joplin.cozic.net/images/flags/country-4x3/ru.png)  |  \u0420\u0443\u0441\u0441\u043a\u0438\u0439  |  [ru_RU](https://github.com/laurent22/joplin/blob/master/CliClient/locales/ru_RU.po)  |  Artyom Karlov <artyom.karlov@gmail.com>  |  94%\n![](https://joplin.cozic.net/images/flags/country-4x3/cn.png)  |  \u4e2d\u6587 (\u7b80\u4f53)  |  [zh_CN](https://github.com/laurent22/joplin/blob/master/CliClient/locales/zh_CN.po)  |    |  91%\n![](https://joplin.cozic.net/images/flags/country-4x3/jp.png)  |  \u65e5\u672c\u8a9e  |  [ja_JP](https://github.com/laurent22/joplin/blob/master/CliClient/locales/ja_JP.po)  |    |  61%\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n\n# Known bugs\n\n- Resources larger than 10 MB are not currently supported on mobile. They will crash the application so it is recommended not to attach such resources at the moment. The issue is being looked at.\n- Non-alphabetical characters such as Chinese or Arabic might create glitches in the terminal on Windows. This is a limitation of the current Windows console.\n- It is only possible to upload files of up to 4MB to OneDrive due to a limitation of [the API](https://docs.microsoft.com/en-gb/onedrive/developer/rest-api/api/driveitem_put_content) being currently used. There is currently no plan to support OneDrive \"large file\" API.\n\n# License\n\nMIT License\n\nCopyright (c) 2016-2018 Laurent Cozic\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n", "const MarkdownIt = require('markdown-it');\nconst Entities = require('html-entities').AllHtmlEntities;\nconst htmlentities = (new Entities()).encode;\nconst Resource = require('lib/models/Resource.js');\nconst ModelCache = require('lib/ModelCache');\nconst ObjectUtils = require('lib/ObjectUtils');\nconst { shim } = require('lib/shim.js');\nconst { _ } = require('lib/locale');\nconst md5 = require('md5');\nconst MdToHtml_Katex = require('lib/MdToHtml_Katex');\n\nclass MdToHtml {\n\n\tconstructor(options = null) {\n\t\tif (!options) options = {};\n\n\t\tthis.loadedResources_ = {};\n\t\tthis.cachedContent_ = null;\n\t\tthis.cachedContentKey_ = null;\n\t\tthis.modelCache_ = new ModelCache();\n\n\t\t// Must include last \"/\"\n\t\tthis.resourceBaseUrl_ = ('resourceBaseUrl' in options) ? options.resourceBaseUrl : null;\n\t}\n\n\tmakeContentKey(resources, body, style, options) {\n\t\tlet k = [];\n\t\tfor (let n in resources) {\n\t\t\tif (!resources.hasOwnProperty(n)) continue;\n\t\t\tconst r = resources[n];\n\t\t\tk.push(r.id);\n\t\t}\n\t\tk.push(md5(escape(body))); // https://github.com/pvorb/node-md5/issues/41\n\t\tk.push(md5(JSON.stringify(style)));\n\t\tk.push(md5(JSON.stringify(options)));\n\t\treturn k.join('_');\n\t}\n\n\trenderAttrs_(attrs) {\n\t\tif (!attrs) return '';\n\n\t\tlet output = [];\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tconst n = attrs[i][0];\n\t\t\tconst v = attrs[i].length >= 2 ? attrs[i][1] : null;\n\n\t\t\tif (n === 'alt' && !v) {\n\t\t\t\tcontinue;\n\t\t\t} else if (n === 'src') {\n\t\t\t\toutput.push('src=\"' + htmlentities(v) + '\"');\n\t\t\t} else {\n\t\t\t\toutput.push(n + '=\"' + (v ? htmlentities(v) : '') + '\"');\n\t\t\t}\n\t\t}\n\t\treturn output.join(' ');\n\t}\n\n\tgetAttr_(attrs, name, defaultValue = null) {\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tif (attrs[i][0] === name) return attrs[i].length > 1 ? attrs[i][1] : null;\n\t\t}\n\t\treturn defaultValue;\n\t}\n\n\tsetAttr_(attrs, name, value) {\n\t\tfor (let i = 0; i < attrs.length; i++) {\n\t\t\tif (attrs[i][0] === name) {\n\t\t\t\tattrs[i][1] = value;\n\t\t\t\treturn attrs;\n\t\t\t}\n\t\t}\n\t\tattrs.push([name, value]);\n\t\treturn attrs;\n\t}\n\n\trenderImage_(attrs, options) {\n\t\tconst loadResource = async (id) => {\n\t\t\t// console.info('Loading resource: ' + id);\n\n\t\t\t// Initially set to to an empty object to make\n\t\t\t// it clear that it is being loaded. Otherwise\n\t\t\t// it sometimes results in multiple calls to\n\t\t\t// loadResource() for the same resource.\n\t\t\tthis.loadedResources_[id] = {};\n\n\t\t\tconst resource = await Resource.load(id);\n\t\t\t//const resource = await this.modelCache_.load(Resource, id);\n\n\t\t\tif (!resource) {\n\t\t\t\t// Can happen for example if an image is attached to a note, but the resource hasn't\n\t\t\t\t// been downloaded from the sync target yet.\n\t\t\t\tconsole.warn('Cannot load resource: ' + id);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.loadedResources_[id] = resource;\n\n\t\t\tif (options.onResourceLoaded) options.onResourceLoaded();\n\t\t}\n\n\t\tconst title = this.getAttr_(attrs, 'title');\n\t\tconst href = this.getAttr_(attrs, 'src');\n\n\t\tif (!Resource.isResourceUrl(href)) {\n\t\t\treturn '<img title=\"' + htmlentities(title) + '\" src=\"' + href + '\"/>';\n\t\t}\n\n\t\tconst resourceId = Resource.urlToId(href);\n\t\tconst resource = this.loadedResources_[resourceId];\n\t\tif (!resource) {\n\t\t\tloadResource(resourceId);\n\t\t\treturn '';\n\t\t}\n\n\t\tif (!resource.id) return ''; // Resource is being loaded\n\n\t\tconst mime = resource.mime ? resource.mime.toLowerCase() : '';\n\t\tif (mime == 'image/png' || mime == 'image/jpg' || mime == 'image/jpeg' || mime == 'image/gif') {\n\t\t\tlet src = './' + Resource.filename(resource);\n\t\t\tif (this.resourceBaseUrl_ !== null) src = this.resourceBaseUrl_ + src;\n\t\t\tlet output = '<img data-resource-id=\"' + resource.id + '\" title=\"' + htmlentities(title) + '\" src=\"' + src + '\"/>';\n\t\t\treturn output;\n\t\t}\n\t\t\n\t\treturn '[Image: ' + htmlentities(resource.title) + ' (' + htmlentities(mime) + ')]';\n\t}\n\n\trenderOpenLink_(attrs, options) {\n\t\tlet href = this.getAttr_(attrs, 'href');\n\t\tconst text = this.getAttr_(attrs, 'text');\n\t\tconst isResourceUrl = Resource.isResourceUrl(href);\n\t\tconst title = isResourceUrl ? this.getAttr_(attrs, 'title') : href;\n\n\t\tlet resourceIdAttr = \"\";\n\t\tlet icon = \"\";\n\t\tlet hrefAttr = '#';\n\t\tif (isResourceUrl) {\n\t\t\tconst resourceId = Resource.pathToId(href);\n\t\t\thref = \"joplin://\" + resourceId;\n\t\t\tresourceIdAttr = \"data-resource-id='\" + resourceId + \"'\";\n\t\t\ticon = '<span class=\"resource-icon\"></span>';\n\t\t} else {\n\t\t\t// If the link is a plain URL (as opposed to a resource link), set the href to the actual\n\t\t\t// link. This allows the link to be exported too when exporting to PDF. \n\t\t\threfAttr = href;\n\t\t}\n\n\t\tconst js = options.postMessageSyntax + \"(\" + JSON.stringify(href) + \"); return false;\";\n\t\tlet output = \"<a \" + resourceIdAttr + \" title='\" + htmlentities(title) + \"' href='\" + hrefAttr + \"' onclick='\" + js + \"'>\" + icon;\n\t\treturn output;\n\t}\n\n\trenderCloseLink_(attrs, options) {\n\t\treturn '</a>';\n\t}\n\n\trendererPlugin_(language) {\n\t\tif (!language) return null;\n\n\t\tconst handlers = {};\n\t\thandlers['katex'] = new MdToHtml_Katex();\n\t\treturn language in handlers ? handlers[language] : null;\n\t}\n\n\tparseInlineCodeLanguage_(content) {\n\t\tconst m = content.match(/^\\{\\.([a-zA-Z0-9]+)\\}/);\n\t\tif (m && m.length >= 2) {\n\t\t\tconst language = m[1];\n\t\t\treturn {\n\t\t\t\tlanguage: language,\n\t\t\t\tnewContent: content.substr(language.length + 3),\n\t\t\t};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\turldecode_(str) {\n\t\ttry {\n\t\t\treturn decodeURIComponent((str+'').replace(/\\+/g, '%20'));\n\t\t} catch (error) {\n\t\t\t// decodeURIComponent can throw if the string contains non-encoded data (for example \"100%\")\n\t\t\t// so in this case just return the non encoded string. \n\t\t\treturn str;\n\t\t}\n\t}\n\n\n\trenderTokens_(markdownIt, tokens, options) {\n\t\tlet output = [];\n\t\tlet previousToken = null;\n\t\tlet anchorAttrs = [];\n\t\tlet extraCssBlocks = {};\n\t\tlet anchorHrefs = [];\n\n\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\tlet t = tokens[i];\n\t\t\tconst nextToken = i < tokens.length ? tokens[i+1] : null;\n\n\t\t\tlet tag = t.tag;\n\t\t\tlet openTag = null;\n\t\t\tlet closeTag = null;\n\t\t\tlet attrs = t.attrs ? t.attrs : [];\n\t\t\tlet tokenContent = t.content ? t.content : '';\n\t\t\tconst isCodeBlock = tag === 'code' && t.block;\n\t\t\tconst isInlineCode = t.type === 'code_inline';\n\t\t\tconst codeBlockLanguage = t && t.info ? t.info : null;\n\t\t\tlet rendererPlugin = null;\n\t\t\tlet rendererPluginOptions = { tagType: 'inline' };\n\t\t\tlet linkHref = null;\n\n\t\t\tif (isCodeBlock) rendererPlugin = this.rendererPlugin_(codeBlockLanguage);\n\n\t\t\tif (isInlineCode) {\n\t\t\t\topenTag = null;\n\t\t\t} else if (tag && t.type.indexOf('html_inline') >= 0) {\n\t\t\t\topenTag = null;\n\t\t\t} else if (tag && t.type.indexOf('_open') >= 0) {\n\t\t\t\topenTag = tag;\n\t\t\t} else if (tag && t.type.indexOf('_close') >= 0) {\n\t\t\t\tcloseTag = tag;\n\t\t\t} else if (tag && t.type.indexOf('inline') >= 0) {\n\t\t\t\topenTag = tag;\n\t\t\t} else if (t.type === 'link_open') {\n\t\t\t\topenTag = 'a';\n\t\t\t} else if (isCodeBlock) {\n\t\t\t\tif (rendererPlugin) {\n\t\t\t\t\topenTag = null;\n\t\t\t\t} else {\n\t\t\t\t\topenTag = 'pre';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (openTag) {\n\t\t\t\tif (openTag === 'a') {\n\t\t\t\t\tanchorAttrs.push(attrs);\n\t\t\t\t\tanchorHrefs.push(this.getAttr_(attrs, 'href'));\n\t\t\t\t\toutput.push(this.renderOpenLink_(attrs, options));\n\t\t\t\t} else {\n\t\t\t\t\tconst attrsHtml = this.renderAttrs_(attrs);\n\t\t\t\t\toutput.push('<' + openTag + (attrsHtml ? ' ' + attrsHtml : '') + '>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isCodeBlock) {\n\t\t\t\tconst codeAttrs = ['code'];\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\tif (codeBlockLanguage) codeAttrs.push(t.info); // t.info contains the language when the token is a codeblock\n\t\t\t\t\toutput.push('<code class=\"' + codeAttrs.join(' ') + '\">');\n\t\t\t\t}\n\t\t\t} else if (isInlineCode) {\n\t\t\t\tconst result = this.parseInlineCodeLanguage_(tokenContent);\n\t\t\t\tif (result) {\n\t\t\t\t\trendererPlugin = this.rendererPlugin_(result.language);\n\t\t\t\t\ttokenContent = result.newContent;\n\t\t\t\t}\n\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\toutput.push('<code>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (t.type === 'math_inline' || t.type === 'math_block') {\n\t\t\t\trendererPlugin = this.rendererPlugin_('katex');\n\t\t\t\trendererPluginOptions = { tagType: t.type === 'math_block' ? 'block' : 'inline' };\n\t\t\t}\n\n\t\t\tif (rendererPlugin) {\n\t\t\t\trendererPlugin.loadAssets().catch((error) => {\n\t\t\t\t\tconsole.warn('MdToHtml: Error loading assets for ' + rendererPlugin.name() + ': ', error.message);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (t.type === 'image') {\n\t\t\t\tif (tokenContent) attrs.push(['title', tokenContent]);\n\t\t\t\toutput.push(this.renderImage_(attrs, options));\n\t\t\t} else if (t.type === 'html_inline') {\n\t\t\t\toutput.push(t.content);\n\t\t\t} else if (t.type === 'softbreak') {\n\t\t\t\toutput.push('<br/>');\n\t\t\t} else if (t.type === 'hr') {\n\t\t\t\toutput.push('<hr/>');\n\t\t\t} else {\n\t\t\t\tif (t.children) {\n\t\t\t\t\tconst parsedChildren = this.renderTokens_(markdownIt, t.children, options);\n\t\t\t\t\toutput = output.concat(parsedChildren);\n\t\t\t\t} else {\n\t\t\t\t\tif (tokenContent) {\n\t\t\t\t\t\tif ((isCodeBlock || isInlineCode) && rendererPlugin) {\n\t\t\t\t\t\t\toutput = rendererPlugin.processContent(output, tokenContent, isCodeBlock ? 'block' : 'inline');\n\t\t\t\t\t\t} else if (rendererPlugin) {\n\t\t\t\t\t\t\toutput = rendererPlugin.processContent(output, tokenContent, rendererPluginOptions.tagType);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\toutput.push(htmlentities(tokenContent));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n \n \t\t\tif (nextToken && nextToken.tag === 'li' && t.tag === 'p') {\n \t\t\t\tcloseTag = null;\n \t\t\t} else if (t.type === 'link_close') {\n\t\t\t\tcloseTag = 'a';\n\t\t\t} else if (tag && t.type.indexOf('inline') >= 0) {\n\t\t\t\tcloseTag = openTag;\n\t\t\t} else if (isCodeBlock) {\n\t\t\t\tif (!rendererPlugin) closeTag = openTag;\n\t\t\t}\n\n\t\t\tif (isCodeBlock) {\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\toutput.push('</code>');\n\t\t\t\t}\n\t\t\t} else if (isInlineCode) {\n\t\t\t\tif (!rendererPlugin) {\n\t\t\t\t\toutput.push('</code>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (closeTag) {\n\t\t\t\tif (closeTag === 'a') {\n\t\t\t\t\tconst currentAnchorAttrs = anchorAttrs.pop();\n\n\t\t\t\t\t// NOTE: Disabled for now due to this:\n\t\t\t\t\t// https://github.com/laurent22/joplin/issues/318#issuecomment-375854848\n\n\t\t\t\t\t// const previousContent = output.length ? output[output.length - 1].trim() : '';\n\t\t\t\t\t// const anchorHref = this.getAttr_(currentAnchorAttrs, 'href', '').trim();\n\n\t\t\t\t\t// Optimisation: If the content of the anchor is the same as the URL, we replace the content\n\t\t\t\t\t// by (Link). This is to shorten the text, which is important especially when the note comes\n\t\t\t\t\t// from imported HTML, which can contain many such links and make the text unreadble. An example\n\t\t\t\t\t// would be a movie review that has multiple links to allow a user to rate the film from 1 to 5 stars.\n\t\t\t\t\t// In the original page, it might be rendered as stars, via CSS, but in the imported note it would look like this:\n\t\t\t\t\t// http://example.com/rate/1 http://example.com/rate/2 http://example.com/rate/3\n\t\t\t\t\t// http://example.com/rate/4 http://example.com/rate/5\n\t\t\t\t\t// which would take a lot of screen space even though it doesn't matter since the user is unlikely\n\t\t\t\t\t// to rate the film from the note. This is actually a nice example, still readable, but there is way\n\t\t\t\t\t// worse that this in notes that come from web-clipped content.\n\t\t\t\t\t// With this change, the links will still be preserved but displayed like\n\t\t\t\t\t// (link) (link) (link) (link) (link)\n\n\t\t\t\t\t// if (this.urldecode_(previousContent) === htmlentities(this.urldecode_(anchorHref))) {\n\t\t\t\t\t// \toutput.pop();\n\t\t\t\t\t// \toutput.push(_('(Link)'));\n\t\t\t\t\t// }\n\n\t\t\t\t\toutput.push(this.renderCloseLink_(currentAnchorAttrs, options));\n\t\t\t\t} else {\n\t\t\t\t\toutput.push('</' + closeTag + '>');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (rendererPlugin) {\n\t\t\t\tconst extraCss = rendererPlugin.extraCss();\n\t\t\t\tconst name = rendererPlugin.name();\n\t\t\t\tif (extraCss && !(name in extraCssBlocks)) {\n\t\t\t\t\textraCssBlocks[name] = extraCss;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpreviousToken = t;\n\t\t}\n\n\t\t// Insert the extra CSS at the top of the HTML\n\n\t\tif (!ObjectUtils.isEmpty(extraCssBlocks)) {\n\t\t\tconst temp = ['<style>'];\n\t\t\tfor (let n in extraCssBlocks) {\n\t\t\t\tif (!extraCssBlocks.hasOwnProperty(n)) continue;\n\t\t\t\ttemp.push(extraCssBlocks[n]);\n\t\t\t}\n\t\t\ttemp.push('</style>');\n\n\t\t\toutput = temp.concat(output);\n\t\t}\n\n\t\treturn output.join('');\n\t}\n\n\trender(body, style, options = null) {\n\t\tif (!options) options = {};\n\t\tif (!options.postMessageSyntax) options.postMessageSyntax = 'postMessage';\n\t\tif (!options.paddingBottom) options.paddingBottom = '0';\n\n\t\tconst cacheKey = this.makeContentKey(this.loadedResources_, body, style, options);\n\t\tif (this.cachedContentKey_ === cacheKey) return this.cachedContent_;\n\n\t\tconst md = new MarkdownIt({\n\t\t\tbreaks: true,\n\t\t\tlinkify: true,\n\t\t\thtml: false, // For security, HTML tags are not supported - https://github.com/laurent22/joplin/issues/500\n\t\t});\n\n\t\t// This is currently used only so that the $expression$ and $$\\nexpression\\n$$ blocks are translated\n\t\t// to math_inline and math_block blocks. These blocks are then processed directly with the Katex\n\t\t// library.  It is better this way as then it is possible to conditionally load the CSS required by\n\t\t// Katex and use an up-to-date version of Katex (as of 2018, the plugin is still using 0.6, which is\n\t\t// buggy instead of 0.9).\n\t\tmd.use(require('markdown-it-katex'));\n\n\t\t// Hack to make checkboxes clickable. Ideally, checkboxes should be parsed properly in\n\t\t// renderTokens_(), but for now this hack works. Marking it with HORRIBLE_HACK so\n\t\t// that it can be removed and replaced later on.\n\t\tconst HORRIBLE_HACK = true;\n\n\t\tif (HORRIBLE_HACK) {\n\t\t\tlet counter = -1;\n\t\t\twhile (body.indexOf('- [ ]') >= 0 || body.indexOf('- [X]') >= 0 || body.indexOf('- [x]') >= 0) {\n\t\t\t\tbody = body.replace(/- \\[(X| |x)\\]/, function(v, p1) {\n\t\t\t\t\tlet s = p1 == ' ' ? 'NOTICK' : 'TICK';\n\t\t\t\t\tcounter++;\n\t\t\t\t\treturn '- mJOPmCHECKBOXm' + s + 'm' + counter + 'm';\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst env = {};\n\t\tconst tokens = md.parse(body, env);\n\n\t\tlet renderedBody = this.renderTokens_(md, tokens, options);\n\n\t\t// console.info(body);\n\t\t// console.info(tokens);\n\t\t// console.info(renderedBody);\n\n\t\tif (HORRIBLE_HACK) {\n\t\t\tlet loopCount = 0;\n\t\t\twhile (renderedBody.indexOf('mJOPm') >= 0) {\n\t\t\t\trenderedBody = renderedBody.replace(/mJOPmCHECKBOXm([A-Z]+)m(\\d+)m/, function(v, type, index) {\n\t\t\t\t\tconst js = options.postMessageSyntax + \"('checkboxclick:\" + type + ':' + index + \"'); this.classList.contains('tick') ? this.classList.remove('tick') : this.classList.add('tick'); return false;\";\n\t\t\t\t\treturn '<a href=\"#\" onclick=\"' + js + '\" class=\"checkbox ' + (type == 'NOTICK' ? '' : 'tick') + '\"><span>' + '' + '</span></a>';\n\t\t\t\t});\n\t\t\t\tif (loopCount++ >= 9999) break;\n\t\t\t}\n\t\t}\n\n\t\t// Support <br> tag to allow newlines inside table cells\n\t\trenderedBody = renderedBody.replace(/&lt;br&gt;/gi, '<br>');\n\n\t\t// https://necolas.github.io/normalize.css/\n\t\tconst normalizeCss = `\n\t\t\thtml{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}\n\t\t\tarticle,aside,footer,header,nav,section{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}\n\t\t\tpre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}\n\t\t\tb,strong{font-weight:bolder}small{font-size:80%}img{border-style:none}\n\t\t`;\n\n\t\tconst fontFamily = 'sans-serif';\n\n\t\tconst css = `\n\t\t\tbody {\n\t\t\t\tfont-size: ` + style.htmlFontSize + `;\n\t\t\t\tcolor: ` + style.htmlColor + `;\n\t\t\t\tline-height: ` + style.htmlLineHeight + `;\n\t\t\t\tbackground-color: ` + style.htmlBackgroundColor + `;\n\t\t\t\tfont-family: ` + fontFamily + `;\n\t\t\t\tpadding-bottom: ` + options.paddingBottom + `;\n\t\t\t}\n\t\t\tp, h1, h2, h3, h4, h5, h6, ul, table {\n\t\t\t\tmargin-top: 0;\n\t\t\t\tmargin-bottom: 14px;\n\t\t\t}\n\t\t\th1 {\n\t\t\t\tfont-size: 1.5em;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\th2 {\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\th3, h4, h5, h6 {\n\t\t\t\tfont-size: 1em;\n\t\t\t\tfont-weight: bold;\n\t\t\t}\n\t\t\ta {\n\t\t\t\tcolor: ` + style.htmlLinkColor + `\n\t\t\t}\n\t\t\tul {\n\t\t\t\tpadding-left: 1.3em;\n\t\t\t}\n\t\t\tli p {\n\t\t\t\tmargin-bottom: 0;\n\t\t\t}\n\t\t\t.resource-icon {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: .5em;\n\t\t\t\ttext-decoration: none;\n\t\t\t\twidth: 1.15em;\n\t\t\t\theight: 1.5em;\n\t\t\t\tmargin-right: 0.4em;\n\t\t\t\tbackground-color:  ` + style.htmlColor + `;\n\t\t\t\t/* Awesome Font file */\n\t\t\t\t-webkit-mask: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 384 512'><path d='M369.9 97.9L286 14C277 5 264.8-.1 252.1-.1H48C21.5 0 0 21.5 0 48v416c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48V131.9c0-12.7-5.1-25-14.1-34zM332.1 128H256V51.9l76.1 76.1zM48 464V48h160v104c0 13.3 10.7 24 24 24h104v288H48z'/></svg>\");\n\t\t\t}\n\t\t\ta.checkbox {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tposition: relative;\n\t\t\t\ttop: .5em;\n\t\t\t\ttext-decoration: none;\n\t\t\t\twidth: 1.65em; /* Need to cut a bit the right border otherwise the SVG will display a black line */\n\t\t\t\theight: 1.7em;\n\t\t\t\tmargin-right: .3em;\n\t\t\t\tbackground-color:  ` + style.htmlColor + `;\n\t\t\t\t/* Awesome Font square-o */\n\t\t\t\t-webkit-mask: url(\"data:image/svg+xml;utf8,<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z'/></svg>\");\n\t\t\t}\n\t\t\ta.checkbox.tick {\n\t\t\t\tleft: .1245em; /* square-o and check-square-o aren't exactly aligned so add this extra gap to align them  */\n\t\t\t\t/* Awesome Font check-square-o */\n\t\t\t\t-webkit-mask: url(\"data:image/svg+xml;utf8,<svg viewBox='0 0 1792 1792' xmlns='http://www.w3.org/2000/svg'><path d='M1472 930v318q0 119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119 84.5-203.5t203.5-84.5h832q63 0 117 25 15 7 18 23 3 17-9 29l-49 49q-10 10-23 10-3 0-9-2-23-6-45-6h-832q-66 0-113 47t-47 113v832q0 66 47 113t113 47h832q66 0 113-47t47-113v-254q0-13 9-22l64-64q10-10 23-10 6 0 12 3 20 8 20 29zm231-489l-814 814q-24 24-57 24t-57-24l-430-430q-24-24-24-57t24-57l110-110q24-24 57-24t57 24l263 263 647-647q24-24 57-24t57 24l110 110q24 24 24 57t-24 57z'/></svg>\");\n\t\t\t}\n\t\t\ttable {\n\t\t\t\tborder-collapse: collapse;\n\t\t\t}\n\t\t\ttd, th {\n\t\t\t\tborder: 1px solid silver;\n\t\t\t\tpadding: .5em 1em .5em 1em;\n\t\t\t\tfont-size: ` + style.htmlFontSize + `;\n\t\t\t\tcolor: ` + style.htmlColor + `;\n\t\t\t\tbackground-color: ` + style.htmlBackgroundColor + `;\n\t\t\t\tfont-family: ` + fontFamily + `;\n\t\t\t}\n\t\t\thr {\n\t\t\t\tborder: none;\n\t\t\t\tborder-bottom: 1px solid ` + style.htmlDividerColor + `;\n\t\t\t}\n\t\t\timg {\n\t\t\t\twidth: auto;\n\t\t\t\tmax-width: 100%;\n\t\t\t}\n\n\t\t\t@media print {\n\t\t\t\tbody {\n\t\t\t\t\theight: auto !important;\n\t\t\t\t}\n\n\t\t\t\ta.checkbox {\n\t\t\t\t\tborder: 1pt solid ` + style.htmlColor + `;\n\t\t\t\t\tborder-radius: 2pt;\n\t\t\t\t\twidth: 1em;\n\t\t\t\t\theight: 1em;\n\t\t\t\t\tline-height: 1em;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\ttop: .4em;\n\t\t\t\t}\n\n\t\t\t\ta.checkbox.tick:after {\n\t\t\t\t\tcontent: \"X\";\n\t\t\t\t}\n\n\t\t\t\ta.checkbox.tick {\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tleft: -0.02em;\n\t\t\t\t\tcolor: ` + style.htmlColor + `;\n\t\t\t\t}\n\t\t\t}\n\t\t`;\n\n\t\tconst styleHtml = '<style>' + normalizeCss + \"\\n\" + css + '</style>';\n\n\t\tconst output = styleHtml + renderedBody;\n\n\t\tthis.cachedContent_ = output;\n\t\tthis.cachedContentKey_ = cacheKey;\n\t\treturn this.cachedContent_;\n\t}\n\n\ttoggleTickAt(body, index) {\n\t\tlet counter = -1;\n\t\twhile (body.indexOf('- [ ]') >= 0 || body.indexOf('- [X]') >= 0 || body.indexOf('- [x]') >= 0) {\n\t\t\tcounter++;\n\n\t\t\tbody = body.replace(/- \\[(X| |x)\\]/, function(v, p1) {\n\t\t\t\tlet s = p1 == ' ' ? 'NOTICK' : 'TICK';\n\t\t\t\tif (index == counter) {\n\t\t\t\t\ts = s == 'NOTICK' ? 'TICK' : 'NOTICK';\n\t\t\t\t}\n\t\t\t\treturn '\u00b0\u00b0JOP\u00b0CHECKBOX\u00b0' + s + '\u00b0\u00b0';\n\t\t\t});\n\t\t}\n\n\t\tbody = body.replace(/\u00b0\u00b0JOP\u00b0CHECKBOX\u00b0NOTICK\u00b0\u00b0/g, '- [ ]'); \n\t\tbody = body.replace(/\u00b0\u00b0JOP\u00b0CHECKBOX\u00b0TICK\u00b0\u00b0/g, '- [X]'); \n\n\t\treturn body;\n\t}\n\n\thandleCheckboxClick(msg, noteBody) {\n\t\tmsg = msg.split(':');\n\t\tlet index = Number(msg[msg.length - 1]);\n\t\tlet currentState = msg[msg.length - 2]; // Not really needed but keep it anyway\n\t\treturn this.toggleTickAt(noteBody, index);\t\t\n\t}\n\n}\n\nmodule.exports = MdToHtml;", "<!doctype html>\n<html>\n<head>\n\t<title>Joplin - an open source note taking and to-do application with synchronisation capabilities</title>\n\t<meta charset=\"utf-8\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t<link rel=\"stylesheet\" href=\"https://joplin.cozic.net/css/bootstrap.min.css\">\n\t<link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"favicon.ico\">\n\t<link rel=\"stylesheet\" href=\"https://joplin.cozic.net/css/fontawesome-all.min.css\"> \n\t<script src=\"https://joplin.cozic.net/js/jquery-3.2.1.slim.min.js\"></script>\n\t<style>\n\tbody {\n\t\tbackground-color: #F1F1F1;\n\t\tcolor: #333333;\n\t}\n\ttable {\n\t\tmargin-bottom: 1em;\n\t}\n\ttd, th {\n\t\tpadding: .8em;\n\t\tborder: 1px solid #ccc;\n\t}\n\th1, h2 {\n\t\tborder-bottom: 1px solid #eaecef;\n\t\tpadding-bottom: 0.3em;\n\t\tfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\t\tfont-weight: 600;\n\t\tfont-size: 2em;\n\t\tmargin-bottom: 16px;\n\t}\n\th2 {\n\t\tfont-size: 1.6em;\n\t}\n\th3 {\n\t\tfont-size: 1.3em;\n\t}\n\tcode {\n\t\tcolor: black;\n\t\tbackground-color: #eee;\n\t\tborder: 1px solid #ccc;\n\t\tfont-size: .85em;\n\t}\n\tpre code {\n\t\tborder: none;\n\t}\n\tpre {\n\t\tfont-size: .85em;\n\t}\n\t#toc ul {\n\t\tmargin-bottom: 10px;\n\t}\n\t#toc {\n\t\tpadding-bottom: 1em;\n\t}\n\t.title-icon {\n\t\theight: 2em;\n\t}\n\t.sub-title {\n\t\tfont-weight: bold;\n\t\tfont-size: 1.5em;\n\t}\n\t.container {\n\t\tbackground-color: white;\n\t\tpadding: 0;\n\t\tbox-shadow: 0 10px 20px #888888;\n\t}\n\ttable.screenshots {\n\t\tmargin-top: 2em;\n\t\tmargin-bottom: 2em;\n\t}\n\ttable.screenshots th {\n\t\theight: 3em;\n\t\ttext-align: center;\n\t}\n\ttable.screenshots th, \n\ttable.screenshots td {\n\t\tborder: 1px solid #C2C2C2;\n\t}\n\timg[align=\"left\"] {\n\t\tmargin-right: 10px;\n\t\tmargin-bottom: 10px;\n\t}\n\t.mobile-screenshot {\n\t\theight: 40em;\n\t\tpadding: 1em;\n\t}\n\t.cli-screenshot-wrapper {\n\t\tbackground-color: black;\n\t\tvertical-align: top;\n\t\tpadding: 1em 2em 1em 1em;\n\t}\n\t.cli-screenshot {\n\t\tfont-family: \"Monaco\", \"Inconsolata\", \"CONSOLAS\", \"Deja Vu Sans Mono\", \"Droid Sans Mono\", \"Andale Mono\", monospace;\n\t\tbackground-color: black;\n\t\tcolor: white;\n\t\tborder: none;\n\t}\n\t.cli-screenshot .prompt {\n\t\tcolor: #48C2F0;\n\t}\n\t.top-screenshot {\n\t\tmargin-top: 2em;\n\t\ttext-align: center;\n\t}\n\t.header {\n\t\tposition: relative;\n\t\tpadding-left: 2em;\n\t\tpadding-right: 2em;\n\t\tpadding-top: 1em;\n\t\tpadding-bottom: 1em;\n\t\tcolor: white;\n\t\tbackground-color: #2B2B3D;\n\t}\n\t.header a h1 {\n\t\tcolor: white;\n\t}\n\t.content {\n\t\tpadding-left: 2em;\n\t\tpadding-right: 2em;\n\t\tpadding-bottom: 2em;\n\t\tpadding-top: 2em;\n\t}\n\t.forkme {\n\t\tposition: absolute;\n\t\tright: 0;\n\t\ttop:0;\n\t}\n\t.nav-wrapper {\n\t\tposition: relative;\n\t\twidth: inherit;\n\t}\n\t.nav {\n\t\tbackground-color: black;\n\t\tdisplay: table;\n\t\twidth: inherit;\n\t}\n\t.nav.sticky {\n\t\tposition:fixed;\n\t\ttop: 0;\n\t\twidth: inherit;\n\t\tbox-shadow: 0 0 10px #000000;\n\t}\n\t.nav a {\n\t\tcolor: white;\n\t\tdisplay: inline-block;\n\t\tpadding: .6em .9em .6em .9em;\n\t}\n\t.nav ul {\n\t\tpadding-left: 2em;\n\t\tmargin-bottom: 0;\n\t\tdisplay: table-cell;\n\t\tmin-width: 250px;\n\t}\n\t.nav ul li {\n\t\tdisplay: inline-block;\n\t\tpadding: 0;\n\t}\n\t.nav li.selected {\n\t\tbackground-color: #222;\n\t\tfont-weight: bold;\n\t}\n\t.nav-right {\n\t\tdisplay: table-cell;\n\t\twidth: 100%;\n\t\ttext-align: right;\n\t\tvertical-align: middle;\n\t\tline-height: 0;\n\t}\n\t.nav-right .share-btn {\n\t\tdisplay: none;\n\t}\n\t.nav-right .small-share-btn {\n\t\tdisplay: none;\n\t}\n\t.footer {\n\t\tpadding-top: 1em;\n\t\tborder-top: 1px solid #d4d4d4;\n\t\tmargin-top: 2em;\n\t\tcolor: gray;\n\t\tfont-size: .9em;\n\t}\n\t@media all and (min-width: 400px) {\n\t\t.nav-right .share-btn {\n\t\t\tdisplay: inline-block;\n\t\t}\n\t\t.nav-right .small-share-btn {\n\t\t\tdisplay: none;\n\t\t}\n\t}\n</style>\n</head>\n\n<body>\n\n<div class=\"container\">\n\n<div class=\"header\">\n\t<a class=\"forkme\" href=\"https://github.com/laurent22/joplin\"><img src=\"https://joplin.cozic.net/images/ForkMe.png\"/></a>\n\t<a href=\"https://joplin.cozic.net\"><h1 id=\"joplin\"><img class=\"title-icon\" src=\"https://joplin.cozic.net/images/Icon512.png\">oplin</h1></a>\n\t<p class=\"sub-title\">An open source note taking and to-do application with synchronisation capabilities.</p>\n</div>\n\n<div class=\"nav-wrapper\">\n\t<div class=\"nav\">\n\t\t<ul>\n\t\t\t<li class=\"\"><a href=\"https:&#x2F;&#x2F;joplin.cozic.net/\" title=\"Home\"><i class=\"fa fa-home\"></i></a></li>\n\t\t\t<li><a href=\"https://discourse.joplin.cozic.net\" title=\"Forum\">Forum</a></li>\n\t\t\t<li><a class=\"help\" href=\"#\" title=\"Menu\">Menu</a></li>\n\t\t</ul>\n\t\t<div class=\"nav-right\">\n\t\t\t<iframe class=\"share-btn\" src=\"https://www.facebook.com/plugins/share_button.php?href=http%3A%2F%2Fjoplin.cozic.net&layout=button&size=small&mobile_iframe=true&width=60&height=20&appId\" width=\"60\" height=\"20\" style=\"border:none;overflow:hidden\" scrolling=\"no\" frameborder=\"0\" allowTransparency=\"true\"></iframe>\n\t\t\t<iframe class=\"share-btn\" src=\"https://platform.twitter.com/widgets/tweet_button.html?url=http%3A%2F%2Fjoplin.cozic.net\" width=\"62\" height=\"20\" title=\"Tweet\" style=\"border: 0; overflow: hidden;\"></iframe>\n\t\t\t<iframe class=\"share-btn share-btn-github\" src=\"https://ghbtns.com/github-btn.html?user=laurent22&repo=joplin&type=star&count=true\" frameborder=\"0\" scrolling=\"0\" width=\"100px\" height=\"20px\"></iframe>\n\t\t</div>\n\t</div>\n</div>\n\n<div class=\"content\">\n\t<div id=\"toc\"><ul>\n<li>\n<p>Applications</p>\n<ul>\n<li><a href=\"https://joplin.cozic.net/desktop\">Desktop application</a></li>\n<li><a href=\"https://joplin.cozic.net/mobile\">Mobile applications</a></li>\n<li><a href=\"https://joplin.cozic.net/terminal\">Terminal application</a></li>\n</ul>\n</li>\n<li>\n<p>Support</p>\n<ul>\n<li><a href=\"https://discourse.joplin.cozic.net\">Joplin Forum</a></li>\n<li><a href=\"https://joplin.cozic.net/e2ee\">How to enable end-to-end encryption</a></li>\n<li><a href=\"https://joplin.cozic.net/spec\">End-to-end encryption spec</a></li>\n<li><a href=\"https://joplin.cozic.net/debugging\">How to enable debug mode</a></li>\n<li><a href=\"https://joplin.cozic.net/faq\">FAQ</a></li>\n</ul>\n</li>\n<li>\n<p>About</p>\n<ul>\n<li><a href=\"https://joplin.cozic.net/changelog\">Changelog</a></li>\n<li><a href=\"https://joplin.cozic.net/stats\">Stats</a></li>\n<li><a href=\"https://joplin.cozic.net/donate\">Donate</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<p><a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;business=E8JMYD2LQ8MMA&amp;lc=GB&amp;item_name=Joplin+Development&amp;currency_code=EUR&amp;bn=PP%2dDonationsBF%3abtn_donateCC_LG%2egif%3aNonHosted\"><img src=\"https://joplin.cozic.net/images/badges/Donate-PayPal-green.svg\" alt=\"Donate\"></a> <a href=\"https://joplin.cozic.net/donate/#bitcoin\"><img src=\"https://joplin.cozic.net/images/badges/Donate-Bitcoin.svg\" alt=\"Donate with Bitcoin\"></a> <a href=\"https://travis-ci.org/laurent22/joplin\"><img src=\"https://travis-ci.org/laurent22/joplin.svg?branch=master\" alt=\"Travis Build Status\"></a> <a href=\"https://ci.appveyor.com/project/laurent22/joplin\"><img src=\"https://ci.appveyor.com/api/projects/status/github/laurent22/joplin?branch=master&amp;passingText=master%20-%20OK&amp;svg=true\" alt=\"Appveyor Build Status\"></a></p>\n<p>Joplin is a free, open source note taking and to-do application, which can handle a large number of notes organised into notebooks. The notes are searchable, can be copied, tagged and modified either from the applications directly or from your own text editor. The notes are in <a href=\"#markdown\">Markdown format</a>.</p>\n<p>Notes exported from Evernote via .enex files <a href=\"#importing\">can be imported</a> into Joplin, including the formatted content (which is converted to Markdown), resources (images, attachments, etc.) and complete metadata (geolocation, updated time, created time, etc.). Plain Markdown files can also be imported.</p>\n<p>The notes can be <a href=\"#synchronisation\">synchronised</a> with various cloud services including <a href=\"https://nextcloud.com/\">Nextcloud</a>, Dropbox, OneDrive or the file system (for example with a network directory). When synchronising the notes, notebooks, tags and other metadata are saved to plain text files which can be easily inspected, backed up and moved around.</p>\n<p>The UI of the terminal client is built on top of the great <a href=\"https://github.com/cronvel/terminal-kit\">terminal-kit</a> library, the desktop client using <a href=\"https://electronjs.org/\">Electron</a>, and the Android client front end is done using <a href=\"https://facebook.github.io/react-native/\">React Native</a>.</p>\n<div class=\"top-screenshot\"><img src=\"https://joplin.cozic.net/images/AllClients.jpg\" style=\"max-width: 100%; max-height: 35em;\"></div>\n\n<h1 id=\"installation\">Installation</h1>\n<p>Three types of applications are available: for the <strong>desktop</strong> (Windows, macOS and Linux), for <strong>mobile</strong> (Android and iOS) and for <strong>terminal</strong> (Windows, macOS and Linux). All applications have similar user interfaces and can synchronise with each others.</p>\n<h2 id=\"desktop-applications\">Desktop applications</h2>\n<table>\n<thead>\n<tr>\n<th>Operating System</th>\n<th>Download</th>\n<th>Alternative</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Windows (32 and 64-bit)</td>\n<td><a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.exe'><img alt='Get it on Windows' height=\"40px\" src='https://joplin.cozic.net/images/BadgeWindows.png'/></a></td>\n<td></td>\n</tr>\n<tr>\n<td>macOS</td>\n<td><a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89.dmg'><img alt='Get it on macOS' height=\"40px\" src='https://joplin.cozic.net/images/BadgeMacOS.png'/></a></td>\n<td></td>\n</tr>\n<tr>\n<td>Linux</td>\n<td><a href='https://github.com/laurent22/joplin/releases/download/v1.0.89/Joplin-1.0.89-x86_64.AppImage'><img alt='Get it on Linux' height=\"40px\" src='https://joplin.cozic.net/images/BadgeLinux.png'/></a></td>\n<td>An Arch Linux package <a href=\"#terminal-application\">is also available</a>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mobile-applications\">Mobile applications</h2>\n<table>\n<thead>\n<tr>\n<th>Operating System</th>\n<th>Download</th>\n<th>Alt. Download</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Android</td>\n<td><a href='https://play.google.com/store/apps/details?id=net.cozic.joplin&utm_source=GitHub&utm_campaign=README&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'><img alt='Get it on Google Play' height=\"40px\" src='https://joplin.cozic.net/images/BadgeAndroid.png'/></a></td>\n<td>or <a href=\"https://github.com/laurent22/joplin-android/releases/download/android-v1.0.123/joplin-v1.0.123.apk\">Download APK File</a></td>\n</tr>\n<tr>\n<td>iOS</td>\n<td><a href='https://itunes.apple.com/us/app/joplin/id1315599797'><img alt='Get it on the App Store' height=\"40px\" src='https://joplin.cozic.net/images/BadgeIOS.png'/></a></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"terminal-application\">Terminal application</h2>\n<table>\n<thead>\n<tr>\n<th>Operating system</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>macOS</td>\n<td><code>brew install joplin</code></td>\n</tr>\n<tr>\n<td>Linux or Windows (via <a href=\"https://msdn.microsoft.com/en-us/commandline/wsl/faq?f=255&amp;MSPPError=-2147217396\">WSL</a>)</td>\n<td><strong>Important:</strong> First, <a href=\"https://nodejs.org/en/download/package-manager/\">install Node 8+</a>. Node 8 is LTS but not yet available everywhere so you might need to manually install it.<br/><br/><code>NPM_CONFIG_PREFIX=~/.joplin-bin npm install -g joplin</code><br/><code>sudo ln -s ~/.joplin-bin/bin/joplin /usr/bin/joplin</code><br><br>By default, the application binary will be installed under <code>~/.joplin-bin</code>. You may change this directory if needed. Alternatively, if your npm permissions are setup as described <a href=\"https://docs.npmjs.com/getting-started/fixing-npm-permissions#option-2-change-npms-default-directory-to-another-directory\">here</a> (Option 2) then simply running <code>npm -g install joplin</code> would work.</td>\n</tr>\n<tr>\n<td>Arch Linux</td>\n<td>An Arch Linux package is available <a href=\"https://aur.archlinux.org/packages/joplin/\">here</a>. To install it, use an AUR wrapper such as yay: <code>yay -S joplin</code>. Both the CLI tool (type <code>joplin</code>) and desktop app (type <code>joplin-desktop</code>) are packaged. For support, please go to the <a href=\"https://github.com/masterkorp/joplin-pkgbuild\">GitHub repo</a>.</td>\n</tr>\n</tbody>\n</table>\n<p>To start it, type <code>joplin</code>.</p>\n<p>For usage information, please refer to the full <a href=\"https://joplin.cozic.net/terminal\">Joplin Terminal Application Documentation</a>.</p>\n<h1 id=\"features\">Features</h1>\n<ul>\n<li>Desktop, mobile and terminal applications.</li>\n<li>End To End Encryption (E2EE)</li>\n<li>Synchronisation with various services, including NextCloud, Dropbox, WebDAV and OneDrive.</li>\n<li>Import Enex files (Evernote export format) and Markdown files.</li>\n<li>Export JEX files (Joplin Export format) and raw files.</li>\n<li>Support notes, to-dos, tags and notebooks.</li>\n<li>Sort notes by multiple criteria - title, updated time, etc.</li>\n<li>Support for alarms (notifications) in mobile and desktop applications.</li>\n<li>Offline first, so the entire data is always available on the device even without an internet connection.</li>\n<li>Markdown notes, which are rendered with images and formatting in the desktop and mobile applications. Support for extra features such as math notation and checkboxes.</li>\n<li>File attachment support - images are displayed, and other files are linked and can be opened in the relevant application.</li>\n<li>Search functionality.</li>\n<li>Geo-location support.</li>\n<li>Supports multiple languages</li>\n</ul>\n<h1 id=\"importing\">Importing</h1>\n<h2 id=\"importing-from-evernote\">Importing from Evernote</h2>\n<p>Joplin was designed as a replacement for Evernote and so can import complete Evernote notebooks, as well as notes, tags, resources (attached files) and note metadata (such as author, geo-location, etc.) via ENEX files. In terms of data, the only two things that might slightly differ are:</p>\n<ul>\n<li><p>Recognition data - Evernote images, in particular scanned (or photographed) documents have <a href=\"https://en.wikipedia.org/wiki/Optical_character_recognition\">recognition data</a> associated with them. It is the text that Evernote has been able to recognise in the document. This data is not preserved when the note are imported into Joplin. However, should it become supported in the search tool or other parts of Joplin, it should be possible to regenerate this recognition data since the actual image would still be available.</p>\n</li>\n<li><p>Colour, font sizes and faces - Evernote text is stored as HTML and this is converted to Markdown during the import process. For notes that are mostly plain text or with basic formatting (bold, italic, bullet points, links, etc.) this is a lossless conversion, and the note, once rendered back to HTML should be very similar. Tables are also imported and converted to Markdown tables. For very complex notes, some formatting data might be lost - in particular colours, font sizes and font faces will not be imported. The text itself however is always imported in full regardless of formatting.</p>\n</li>\n</ul>\n<p>To import Evernote data, first export your Evernote notebooks to ENEX files as described <a href=\"https://help.evernote.com/hc/en-us/articles/209005557-How-to-back-up-export-and-restore-import-notes-and-notebooks\">here</a>. Then follow these steps:</p>\n<p>On the <strong>desktop application</strong>, open File &gt; Import &gt; ENEX and select your file. The notes will be imported into a new separate notebook. If needed they can then be moved to a different notebook, or the notebook can be renamed, etc.</p>\n<p>On the <strong>terminal application</strong>, in <a href=\"https://joplin.cozic.net/terminal#command-line-mode\">command-line mode</a>, type <code>import /path/to/file.enex</code>. This will import the notes into a new notebook named after the filename.</p>\n<h2 id=\"importing-from-markdown-files\">Importing from Markdown files</h2>\n<p>Joplin can import notes from plain Markdown file. You can either import a complete directory of Markdown files or individual files.</p>\n<p>On the <strong>desktop application</strong>, open File &gt; Import &gt; MD and select your Markdown file or directory.</p>\n<p>On the <strong>terminal application</strong>, in <a href=\"https://joplin.cozic.net/terminal#command-line-mode\">command-line mode</a>, type <code>import --format md /path/to/file.md</code> or <code>import --format md /path/to/directory/</code>.</p>\n<h2 id=\"importing-from-other-applications\">Importing from other applications</h2>\n<p>In general the way to import notes from any application into Joplin is to convert the notes to ENEX files (Evernote format) and to import these ENEX files into Joplin using the method above. Most note-taking applications support ENEX files so it should be relatively straightforward. For help about specific applications, see below:</p>\n<ul>\n<li>Standard Notes: Please see <a href=\"https://programadorwebvalencia.com/migrate-notes-from-standard-notes-to-joplin/\">this tutorial</a></li>\n<li>Tomboy Notes: Export the notes to ENEX files <a href=\"https://askubuntu.com/questions/243691/how-can-i-export-my-tomboy-notes-into-evernote/608551\">as described here</a> for example, and import these ENEX files into Joplin.</li>\n<li>OneNote: First <a href=\"https://discussion.evernote.com/topic/107736-is-there-a-way-to-import-from-onenote-into-evernote-on-the-mac/\">import the notes from OneNote into Evernote</a>. Then export the ENEX file from Evernote and import it into Joplin.</li>\n</ul>\n<h1 id=\"exporting\">Exporting</h1>\n<p>Joplin can export to the JEX format (Joplin Export file), which is a tar file that can contain multiple notes, notebooks, etc. This is a lossless format in that all the notes, but also metadata such as geo-location, updated time, tags, etc. are preserved. This format is convenient for backup purposes and can be re-imported into Joplin. A &quot;raw&quot; format is also available. This is the same as the JEX format except that the data is saved to a directory and each item represented by a single file.</p>\n<h1 id=\"synchronisation\">Synchronisation</h1>\n<p>One of the goals of Joplin was to avoid being tied to any particular company or service, whether it is Evernote, Google or Microsoft. As such the synchronisation is designed without any hard dependency to any particular service. Most of the synchronisation process is done at an abstract level and access to external services, such as Nextcloud or Dropbox, is done via lightweight drivers. It is easy to support new services by creating simple drivers that provide a filesystem-like interface, i.e. the ability to read, write, delete and list items. It is also simple to switch from one service to another or to even sync to multiple services at once. Each note, notebook, tags, as well as the relation between items is transmitted as plain text files during synchronisation, which means the data can also be moved to a different application, can be easily backed up, inspected, etc.</p>\n<p>Currently, synchronisation is possible with Nextcloud, Dropbox (by default) or the local filesystem. To setup synchronisation please follow the instructions below. After that, the application will synchronise in the background whenever it is running, or you can click on &quot;Synchronise&quot; to start a synchronisation manually.</p>\n<h2 id=\"nextcloud-synchronisation\">Nextcloud synchronisation</h2>\n<p><img src=\"https://joplin.cozic.net/images/nextcloud-logo-background.png\" width=\"100\" align=\"left\"> <a href=\"https://nextcloud.com/\">Nextcloud</a> is a self-hosted, private cloud solution. It can store documents, images and videos but also calendars, passwords and countless other things and can sync them to your laptop or phone. As you can host your own Nextcloud server, you own both the data on your device and infrastructure used for synchronisation. As such it is a good fit for Joplin. The platform is also well supported and with a strong community, so it is likely to be around for a while - since it&#39;s open source anyway, it is not a service that can be closed, it can exist on a server for as long as one chooses.</p>\n<p>On the <strong>desktop application</strong> or <strong>mobile application</strong>, go to the config screen and select Nextcloud as the synchronisation target. Then input the WebDAV URL (to get it, click on Settings in the bottom left corner of the page, in Nextcloud), this is normally <code>https://example.com/nextcloud/remote.php/webdav/Joplin</code> (<strong>make sure to create the &quot;Joplin&quot; directory in Nextcloud</strong>), and set the username and password. If it does not work, please <a href=\"https://github.com/laurent22/joplin/issues/61#issuecomment-373282608\">see this explanation</a> for more details.</p>\n<p>On the <strong>terminal application</strong>, you will need to set the <code>sync.target</code> config variable and all the <code>sync.5.path</code>, <code>sync.5.username</code> and <code>sync.5.password</code> config variables to, respectively the Nextcloud WebDAV URL, your username and your password. This can be done from the command line mode using:</p>\n<pre><code>:config sync.5.path https://example.com/nextcloud/remote.php/webdav/Joplin\n:config sync.5.username YOUR_USERNAME\n:config sync.5.password YOUR_PASSWORD\n:config sync.target 5\n</code></pre><p>If synchronisation does not work, please consult the logs in the app profile directory - it is often due to a misconfigured URL or password. The log should indicate what the exact issue is.</p>\n<h2 id=\"dropbox-synchronisation\">Dropbox synchronisation</h2>\n<p>When syncing with Dropbox, Joplin creates a sub-directory in Dropbox, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.</p>\n<p>On the <strong>desktop application</strong> or <strong>mobile application</strong>, select &quot;Dropbox&quot; as the synchronisation target in the config screen (it is selected by default). Then, to initiate the synchronisation process, click on the &quot;Synchronise&quot; button in the sidebar and follow the instructions.</p>\n<p>On the <strong>terminal application</strong>, to initiate the synchronisation process, type <code>:sync</code>. You will be asked to follow a link to authorise the application. It is possible to also synchronise outside of the user interface by typing <code>joplin sync</code> from the terminal. This can be used to setup a cron script to synchronise at regular interval. For example, this would do it every 30 minutes:</p>\n<pre><code>*/30 * * * * /path/to/joplin sync\n</code></pre><h2 id=\"webdav-synchronisation\">WebDAV synchronisation</h2>\n<p>Select the &quot;WebDAV&quot; synchronisation target and follow the same instructions as for Nextcloud above.</p>\n<p>WebDAV-compatible services that are known to work with Joplin.</p>\n<ul>\n<li><a href=\"https://www.box.com/\">Box.com</a></li>\n<li><a href=\"https://www.drivehq.com\">DriveHQ</a></li>\n<li><a href=\"https://www.strato.fr/stockage-en-ligne/\">HiDrive</a> from Strato. <a href=\"https://github.com/laurent22/joplin/issues/309\">Setup help</a></li>\n<li><a href=\"https://owncloud.org/\">OwnCloud</a></li>\n<li><a href=\"https://www.seafile.com/\">Seafile</a></li>\n<li><a href=\"https://www.transip.nl/stack/\">Stack</a></li>\n<li><a href=\"https://www.zimbra.com/\">Zimbra</a></li>\n</ul>\n<h2 id=\"onedrive-synchronisation\">OneDrive synchronisation</h2>\n<p>When syncing with OneDrive, Joplin creates a sub-directory in OneDrive, in /Apps/Joplin and read/write the notes and notebooks from it. The application does not have access to anything outside this directory.</p>\n<p>On the <strong>desktop application</strong> or <strong>mobile application</strong>, select &quot;OneDrive&quot; as the synchronisation target in the config screen. Then, to initiate the synchronisation process, click on the &quot;Synchronise&quot; button in the sidebar and follow the instructions.</p>\n<p>On the <strong>terminal application</strong>, to initiate the synchronisation process, type <code>:sync</code>. You will be asked to follow a link to authorise the application (simply input your Microsoft credentials - you do not need to register with OneDrive).</p>\n<h1 id=\"encryption\">Encryption</h1>\n<p>Joplin supports end-to-end encryption (E2EE) on all the applications. E2EE is a system where only the owner of the notes, notebooks, tags or resources can read them. It prevents potential eavesdroppers - including telecom providers, internet providers, and even the developers of Joplin from being able to access the data. Please see the <a href=\"https://joplin.cozic.net/e2ee\">End-To-End Encryption Tutorial</a> for more information about this feature and how to enable it.</p>\n<p>For a more technical description, mostly relevant for development or to review the method being used, please see the <a href=\"https://joplin.cozic.net/spec\">Encryption specification</a>.</p>\n<h1 id=\"attachments-resources\">Attachments / Resources</h1>\n<p>Any kind of file can be attached to a note. In Markdown, links to these files are represented as a simple ID to the resource. In the note viewer, these files, if they are images, will be displayed or, if they are other files (PDF, text files, etc.) they will be displayed as links. Clicking on this link will open the file in the default application.</p>\n<p>Resources that are not attached to any note will be automatically deleted after a day or two.</p>\n<p><strong>Important:</strong> Resources larger than 10 MB are not currently supported on mobile. They will crash the application when synchronising so it is recommended not to attach such resources at the moment. The issue is being looked at.</p>\n<h1 id=\"notifications\">Notifications</h1>\n<p>On the desktop and mobile apps, an alarm can be associated with any to-do. It will be triggered at the given time by displaying a notification. How the notification will be displayed depends on the operating system since each has a different way to handle this. Please see below for the requirements for the desktop applications:</p>\n<ul>\n<li><strong>Windows</strong>: &gt;= 8. Make sure the Action Center is enabled on Windows. Task bar balloon for Windows &lt; 8. Growl as fallback. Growl takes precedence over Windows balloons.</li>\n<li><strong>macOS</strong>: &gt;= 10.8 or Growl if earlier.</li>\n<li><strong>Linux</strong>: <code>notify-osd</code> or <code>libnotify-bin</code> installed (Ubuntu should have this by default). Growl otherwise</li>\n</ul>\n<p>See <a href=\"https://github.com/mikaelbr/node-notifier/blob/master/DECISION_FLOW.md\">documentation and flow chart for reporter choice</a></p>\n<p>On mobile, the alarms will be displayed using the built-in notification system.</p>\n<p>If for any reason the notifications do not work, please <a href=\"https://github.com/laurent22/joplin/issues\">open an issue</a>.</p>\n<h1 id=\"sub-notebooks\">Sub-notebooks</h1>\n<p>Sub-notebooks allow organising multiple notebooks into a tree of notebooks. For example it can be used to regroup all the notebooks related to work, to family or to a particular project under a parent notebook.</p>\n<p><img src=\"https://joplin.cozic.net/images/SubNotebooks.png\" alt=\"\"></p>\n<ul>\n<li>On the <strong>desktop application</strong>, to create a subnotebook, drag and drop it onto another notebook. To move it back to the root, drag and drop it on the &quot;Notebooks&quot; header. Currently only the desktop app can be used to organise the notebooks.</li>\n<li>The <strong>mobile application</strong> supports displaying and collapsing/expanding the tree of notebooks, however it does not currently support moving the subnotebooks to different notebooks.</li>\n<li>The <strong>terminal app</strong> supports displaying the tree of subnotebooks but it does not support collapsing/expanding them or moving the subnotebooks around.</li>\n</ul>\n<h1 id=\"markdown\">Markdown</h1>\n<p>Joplin uses and renders <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">Github-flavoured Markdown</a> with a few variations and additions. In particular:</p>\n<h2 id=\"links-to-other-notes\">Links to other notes</h2>\n<p>You can create a link to a note by specifying its ID in the URL. For example:</p>\n<pre><code>[Link to my note](:/0b0d62d15e60409dac34f354b6e9e839)\n</code></pre><p>Since getting the ID of a note is not straightforward, each app provides a way to create such link. In the <strong>desktop app</strong>, right click on a note an select &quot;Copy Markdown link&quot;. In the <strong>mobile app</strong>, open a note and, in the top right menu, select &quot;Copy Markdown link&quot;. You can then paste this link anywhere in another note.</p>\n<h2 id=\"math-notation\">Math notation</h2>\n<p>Math expressions can be added using the <a href=\"https://khan.github.io/KaTeX/\">Katex notation</a>. To add an inline equation, wrap the expression in <code>$EXPRESSION$</code>, eg. <code>$\\sqrt{3x-1}+(1+x)^2$</code>. To create an expression block, wrap it as follow:</p>\n<pre><code>$$\nEXPRESSION\n$$\n</code></pre><p>For example:</p>\n<pre><code>$$\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n$$\n</code></pre><p>Here is an example with the Markdown and rendered result side by side:</p>\n<p><img src=\"https://joplin.cozic.net/images/Katex.png\" style=\"max-width: 100%; max-height: 35em;\"></p>\n<h2 id=\"checkboxes\">Checkboxes</h2>\n<p>Checkboxes can be added like so:</p>\n<pre><code>- [ ] Milk\n- [ ] Rice\n- [ ] Eggs\n</code></pre><p>The checkboxes can then be ticked in the mobile and desktop applications.</p>\n<h2 id=\"html-support\">HTML support</h2>\n<p>Only the <code>&lt;br&gt;</code> tag is supported - it can be used to force a new line, which is convenient to insert new lines inside table cells. For security reasons, other HTML tags are not supported.</p>\n<h1 id=\"donations\">Donations</h1>\n<p>Donations to Joplin support the development of the project. Developing quality applications mostly takes time, but there are also some expenses, such as digital certificates to sign the applications, app store fees, hosting, etc. Most of all, your donation will make it possible to keep up the current development standard.</p>\n<p>Please see the <a href=\"https://joplin.cozic.net/donate/\">donation page</a> for information on how to support the development of Joplin.</p>\n<h1 id=\"community\">Community</h1>\n<ul>\n<li>For general discussion about Joplin, user support, software development questions, and to discuss new features, go to the <a href=\"https://discourse.joplin.cozic.net/\">Joplin Forum</a>. It is possible to login with your GitHub account.</li>\n<li>For bug reports and feature requests, go to the <a href=\"https://github.com/laurent22/joplin/issues\">GitHub Issue Tracker</a>.</li>\n<li>The latest news are often posted <a href=\"https://twitter.com/laurent2233\">on this Twitter account</a>.</li>\n</ul>\n<h1 id=\"contributing\">Contributing</h1>\n<p>Please see the guide for information on how to contribute to the development of Joplin: <a href=\"https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md\">https://github.com/laurent22/joplin/blob/master/CONTRIBUTING.md</a></p>\n<h1 id=\"localisation\">Localisation</h1>\n<p>Joplin is currently available in the languages below. If you would like to contribute a <strong>new translation</strong>, it is quite straightforward, please follow these steps:</p>\n<ul>\n<li><a href=\"https://poedit.net/\">Download Poedit</a>, the translation editor, and install it.</li>\n<li><a href=\"https://raw.githubusercontent.com/laurent22/joplin/master/CliClient/locales/joplin.pot\">Download the file to be translated</a>.</li>\n<li>In Poedit, open this .pot file, go into the Catalog menu and click Configuration. Change &quot;Country&quot; and &quot;Language&quot; to your own country and language.</li>\n<li>From then you can translate the file. Once it is done, please either <a href=\"https://github.com/laurent22/joplin/pulls\">open a pull request</a> or send the file to <a href=\"https://raw.githubusercontent.com/laurent22/joplin/master/Assets/Adresse.png\">this address</a>.</li>\n</ul>\n<p>This translation will apply to the three applications - desktop, mobile and terminal.</p>\n<p>To <strong>update a translation</strong>, follow the same steps as above but instead of getting the .pot file, get the .po file for your language from the table below.</p>\n<p>Current translations:</p>\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n<table>\n<thead>\n<tr>\n<th>&nbsp;</th>\n<th>Language</th>\n<th>Po File</th>\n<th>Last translator</th>\n<th>Percent done</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/es/basque_country.png\" alt=\"\"></td>\n<td>Basque</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/eu.po\">eu</a></td>\n<td>juan.abasolo@ehu.eus</td>\n<td>75%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/hr.png\" alt=\"\"></td>\n<td>Croatian</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/hr_HR.po\">hr_HR</a></td>\n<td>Hrvoje Mandi\u0107 <a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#116;&#x72;&#x62;&#x75;&#x68;&#111;&#x6d;&#x40;&#x6e;&#x65;&#116;&#46;&#x68;&#x72;\">&#116;&#x72;&#x62;&#x75;&#x68;&#111;&#x6d;&#x40;&#x6e;&#x65;&#116;&#46;&#x68;&#x72;</a></td>\n<td>61%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/cz.png\" alt=\"\"></td>\n<td>Czech</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/cs_CZ.po\">cs_CZ</a></td>\n<td>Lukas Helebrandt <a href=\"&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#x3a;&#108;&#117;&#x6b;&#x61;&#115;&#64;&#97;&#x69;&#121;&#97;&#46;&#99;&#122;\">&#108;&#117;&#x6b;&#x61;&#115;&#64;&#97;&#x69;&#121;&#97;&#46;&#99;&#122;</a></td>\n<td>95%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/dk.png\" alt=\"\"></td>\n<td>Dansk</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/da_DK.po\">da_DK</a></td>\n<td>Morten Juhl-Johansen Z\u00f6lde-Fej\u00e9r &lt;mjjzf@syntaktisk.</td>\n<td>97%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/de.png\" alt=\"\"></td>\n<td>Deutsch</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/de_DE.po\">de_DE</a></td>\n<td>Philipp Zumstein <a href=\"&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#122;&#117;&#x70;&#104;&#x69;&#108;&#x69;&#x70;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#122;&#117;&#x70;&#104;&#x69;&#108;&#x69;&#x70;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></td>\n<td>98%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/gb.png\" alt=\"\"></td>\n<td>English</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/en_GB.po\">en_GB</a></td>\n<td></td>\n<td>100%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/es.png\" alt=\"\"></td>\n<td>Espa\u00f1ol</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/es_ES.po\">es_ES</a></td>\n<td>Fernando Mart\u00edn <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#102;&#64;&#109;&#x72;&#116;&#110;&#46;&#x65;&#x73;\">&#102;&#64;&#109;&#x72;&#116;&#110;&#46;&#x65;&#x73;</a></td>\n<td>99%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/fr.png\" alt=\"\"></td>\n<td>Fran\u00e7ais</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/fr_FR.po\">fr_FR</a></td>\n<td>Laurent Cozic</td>\n<td>98%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/es.png\" alt=\"\"></td>\n<td>Galician</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/gl_ES.po\">gl_ES</a></td>\n<td>Marcos Lans <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#x3a;&#109;&#x61;&#114;&#x63;&#x6f;&#115;&#x6c;&#97;&#110;&#115;&#103;&#97;&#x72;&#122;&#x61;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#109;&#x61;&#114;&#x63;&#x6f;&#115;&#x6c;&#97;&#110;&#115;&#103;&#97;&#x72;&#122;&#x61;&#x40;&#103;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></td>\n<td>95%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/it.png\" alt=\"\"></td>\n<td>Italiano</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/it_IT.po\">it_IT</a></td>\n<td></td>\n<td>63%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/be.png\" alt=\"\"></td>\n<td>Nederlands</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/nl_BE.po\">nl_BE</a></td>\n<td></td>\n<td>76%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/br.png\" alt=\"\"></td>\n<td>Portugu\u00eas (Brasil)</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/pt_BR.po\">pt_BR</a></td>\n<td>Renato Nunes Bastos <a href=\"&#x6d;&#97;&#105;&#108;&#x74;&#111;&#x3a;&#x72;&#110;&#x62;&#x61;&#115;&#x74;&#111;&#x73;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;\">&#x72;&#110;&#x62;&#x61;&#115;&#x74;&#111;&#x73;&#x40;&#x67;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#109;</a></td>\n<td>97%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/ru.png\" alt=\"\"></td>\n<td>\u0420\u0443\u0441\u0441\u043a\u0438\u0439</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/ru_RU.po\">ru_RU</a></td>\n<td>Artyom Karlov <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#97;&#x72;&#116;&#121;&#111;&#109;&#x2e;&#107;&#97;&#114;&#x6c;&#x6f;&#x76;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;\">&#97;&#x72;&#116;&#121;&#111;&#109;&#x2e;&#107;&#97;&#114;&#x6c;&#x6f;&#x76;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></td>\n<td>94%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/cn.png\" alt=\"\"></td>\n<td>\u4e2d\u6587 (\u7b80\u4f53)</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/zh_CN.po\">zh_CN</a></td>\n<td></td>\n<td>91%</td>\n</tr>\n<tr>\n<td><img src=\"https://joplin.cozic.net/images/flags/country-4x3/jp.png\" alt=\"\"></td>\n<td>\u65e5\u672c\u8a9e</td>\n<td><a href=\"https://github.com/laurent22/joplin/blob/master/CliClient/locales/ja_JP.po\">ja_JP</a></td>\n<td></td>\n<td>61%</td>\n</tr>\n</tbody>\n</table>\n<!-- LOCALE-TABLE-AUTO-GENERATED -->\n<h1 id=\"known-bugs\">Known bugs</h1>\n<ul>\n<li>Resources larger than 10 MB are not currently supported on mobile. They will crash the application so it is recommended not to attach such resources at the moment. The issue is being looked at.</li>\n<li>Non-alphabetical characters such as Chinese or Arabic might create glitches in the terminal on Windows. This is a limitation of the current Windows console.</li>\n<li>It is only possible to upload files of up to 4MB to OneDrive due to a limitation of <a href=\"https://docs.microsoft.com/en-gb/onedrive/developer/rest-api/api/driveitem_put_content\">the API</a> being currently used. There is currently no plan to support OneDrive &quot;large file&quot; API.</li>\n</ul>\n<h1 id=\"license\">License</h1>\n<p>MIT License</p>\n<p>Copyright (c) 2016-2018 Laurent Cozic</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n\n<script>\n\tfunction stickyHeader() { \n\t\treturn; // Disabled\n\n\t\tif ($(window).scrollTop() > 179) {\n\t\t\t$('.nav').addClass('sticky'); \n\t\t} else {\n\t\t\t$('.nav').removeClass('sticky');\n\t\t}\n\t}\n\n\t$('#toc').hide();\n\n\t$('.help').click(function(event) {\n\t\tevent.preventDefault();\n\t\t$('#toc').show();\n\t});\n\n\t$(window).scroll(function() {\n\t\tstickyHeader();\n\t});\n\n\t(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n\t(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n\tm=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n\t})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\tga('create', 'UA-103586105-1', 'auto');\n\tga('send', 'pageview');\n</script>\n\n<div class=\"footer\">\nCopyright (c) 2016-2018 Laurent Cozic\n</div>\n</body>\n</html>\n"], "filenames": ["README.md", "ReactNativeClient/lib/MdToHtml.js", "docs/index.html"], "buggy_code_start_loc": [254, 392, 456], "buggy_code_end_loc": [254, 436, 580], "fixing_code_start_loc": [255, 392, 457], "fixing_code_end_loc": [259, 440, 582], "type": "CWE-79", "message": "Joplin version prior to 1.0.90 contains a XSS evolving into code execution due to enabled nodeIntegration for that particular BrowserWindow instance where XSS was identified from vulnerability in Note content field - information on the fix can be found here https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89 that can result in executing unauthorized code within the rights in which the application is running. This attack appear to be exploitable via Victim synchronizing notes from the cloud services or other note-keeping services which contain malicious code. This vulnerability appears to have been fixed in 1.0.90 and later.", "other": {"cve": {"id": "CVE-2018-1000534", "sourceIdentifier": "cve@mitre.org", "published": "2018-06-26T16:29:01.947", "lastModified": "2018-08-21T11:41:10.923", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Joplin version prior to 1.0.90 contains a XSS evolving into code execution due to enabled nodeIntegration for that particular BrowserWindow instance where XSS was identified from vulnerability in Note content field - information on the fix can be found here https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89 that can result in executing unauthorized code within the rights in which the application is running. This attack appear to be exploitable via Victim synchronizing notes from the cloud services or other note-keeping services which contain malicious code. This vulnerability appears to have been fixed in 1.0.90 and later."}, {"lang": "es", "value": "Joplin en versiones anteriores a la 1.0.90 contiene Cross-Site Scripting (XSS) que evoluciona a una ejecuci\u00f3n de c\u00f3digo debido a que se habilita nodeIntegration para esa instancia BrowserWindow en concreto en la que se identific\u00f3 XSS a partir de la vulnerabilidad en el campo de contenido Note. La informaci\u00f3n sobre la soluci\u00f3n se puede encontrar en https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89. Esto podr\u00eda resultar en la ejecuci\u00f3n de c\u00f3digo no autorizado con los derechos en los que se ejecuta la aplicaci\u00f3n. Este ataque parece ser explotable mediante una v\u00edctima que sincroniza notas desde los servicios cloud u otros servicios de guardado de notas que contienen c\u00f3digo malicioso. La vulnerabilidad parece haber sido solucionada en las versiones 1.0.90 y siguientes."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:joplin_project:joplin:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.90", "matchCriteriaId": "B661B315-948E-48F7-8A0B-ACB84D0DF32B"}]}]}], "references": [{"url": "https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/laurent22/joplin/issues/500", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/laurent22/joplin/commit/494e235e18659574f836f84fcf9f4d4fcdcfcf89"}}