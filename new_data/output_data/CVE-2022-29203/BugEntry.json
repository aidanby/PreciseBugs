{"buggy_code": ["# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for SpaceToBatch and BatchToSpace ops.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.compiler.tests import xla_test\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gen_array_ops\nfrom tensorflow.python.platform import test\n\n\ndef space_to_batch_direct(input_array, block_shape, paddings):\n  \"\"\"Direct Python implementation of space-to-batch conversion.\n\n  This is used for tests only.\n\n  Args:\n    input_array: N-D array\n    block_shape: 1-D array of shape [num_block_dims].\n    paddings: 2-D array of shape [num_block_dims, 2].\n\n  Returns:\n    Converted tensor.\n  \"\"\"\n  input_array = np.array(input_array)\n  block_shape = np.array(block_shape)\n  num_block_dims = len(block_shape)\n  paddings = np.array(paddings).reshape((len(block_shape), 2))\n\n  padded = np.pad(input_array,\n                  pad_width=([[0, 0]] + list(paddings) + [[0, 0]] *\n                             (input_array.ndim - 1 - num_block_dims)),\n                  mode=\"constant\")\n  reshaped_padded_shape = [input_array.shape[0]]\n  output_shape = [input_array.shape[0] * np.prod(block_shape)]\n  for block_dim, block_shape_value in enumerate(block_shape):\n    reduced_size = padded.shape[block_dim + 1] // block_shape_value\n    reshaped_padded_shape.append(reduced_size)\n    output_shape.append(reduced_size)\n    reshaped_padded_shape.append(block_shape_value)\n  reshaped_padded_shape.extend(input_array.shape[num_block_dims + 1:])\n  output_shape.extend(input_array.shape[num_block_dims + 1:])\n\n  reshaped_padded = padded.reshape(reshaped_padded_shape)\n  permuted_reshaped_padded = np.transpose(reshaped_padded, (\n      list(np.arange(num_block_dims) * 2 + 2) + [0] +\n      list(np.arange(num_block_dims) * 2 + 1) + list(\n          np.arange(input_array.ndim - num_block_dims - 1) + 1 + num_block_dims\n          * 2)))\n  return permuted_reshaped_padded.reshape(output_shape)\n\n\nclass SpaceToBatchTest(xla_test.XLATestCase):\n  \"\"\"Tests input-output pairs for the SpaceToBatch and BatchToSpace ops.\"\"\"\n\n  def _testPad(self, inputs, paddings, block_size, outputs):\n    with self.session() as sess, self.test_scope():\n      for dtype in self.float_types:\n        # outputs = space_to_batch(inputs)\n        placeholder = array_ops.placeholder(dtype)\n        x_tf = gen_array_ops.space_to_batch(\n            placeholder, paddings, block_size=block_size)\n        self.assertAllEqual(sess.run(x_tf, {placeholder: inputs}), outputs)\n        # inputs = batch_to_space(outputs)\n        x_tf = gen_array_ops.batch_to_space(\n            placeholder, paddings, block_size=block_size)\n        self.assertAllEqual(sess.run(x_tf, {placeholder: outputs}), inputs)\n\n  def _testOne(self, inputs, block_size, outputs):\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    self._testPad(inputs, paddings, block_size, outputs)\n\n  # [1, 2, 2, 1] <-> [4, 1, 1, 1]\n  def testSmallInput2x2(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    block_size = 2\n    x_out = [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # [1, 2, 2, 1] <-> [1, 3, 3, 1] (padding) <-> [9, 1, 1, 1]\n  def testSmallInput2x2Pad1x0(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.array([[1, 0], [1, 0]], dtype=np.int32)\n    block_size = 3\n    x_out = [[[[0]]], [[[0]]], [[[0]]], [[[0]]], [[[1]]], [[[2]]], [[[0]]],\n             [[[3]]], [[[4]]]]\n    self._testPad(x_np, paddings, block_size, x_out)\n\n  # Test with depth larger than 1.\n  # [1, 2, 2, 3] <-> [4, 1, 1, 3]\n  def testDepthInput2x2(self):\n    x_np = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]\n    block_size = 2\n    x_out = [[[[1, 2, 3]]], [[[4, 5, 6]]], [[[7, 8, 9]]], [[[10, 11, 12]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test for larger input dimensions.\n  # [1, 4, 4, 1] <-> [4, 2, 2, 1]\n  def testLargerInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]],\n             [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test with batch larger than 1.\n  # [2, 2, 4, 1] <-> [8, 1, 2, 1]\n  def testBatchInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]]],\n            [[[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],\n             [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Tests for larger input spatial dimensions AND batch larger than 1, to ensure\n  # that elements are correctly laid out spatially and properly interleaved\n  # along the batch dimension.\n  # [2, 4, 4, 1] <-> [8, 2, 2, 1]\n  def testLargerInputBatch2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]],\n            [[[17], [18], [19], [20]], [[21], [22], [23], [24]],\n             [[25], [26], [27], [28]], [[29], [30], [31], [32]]]]\n    x_out = [[[[1], [3]], [[9], [11]]], [[[17], [19]], [[25], [27]]],\n             [[[2], [4]], [[10], [12]]], [[[18], [20]], [[26], [28]]],\n             [[[5], [7]], [[13], [15]]], [[[21], [23]], [[29], [31]]],\n             [[[6], [8]], [[14], [16]]], [[[22], [24]], [[30], [32]]]]\n    block_size = 2\n    self._testOne(x_np, block_size, x_out)\n\n\nclass SpaceToBatchNDTest(xla_test.XLATestCase):\n  \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"\n\n  def _testPad(self, inputs, block_shape, paddings, outputs):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings).reshape((len(block_shape), 2))\n    with self.session() as sess, self.test_scope():\n      for dtype in self.float_types:\n        # TODO(b/68813416): Skip bfloat16's as the input type for direct is\n        # float32 and results in a mismatch, while making testDirect provide the\n        # correctly typed input results in 'no fill-function for data-type'\n        # error.\n        if dtype == dtypes.bfloat16.as_numpy_dtype:\n          continue\n        if dtype == np.float16:\n          actual_inputs = np.array(inputs).astype(dtype)\n          actual_paddings = np.array(paddings).astype(dtype)\n          expected_outputs = np.array(outputs).astype(dtype)\n        else:\n          actual_inputs = inputs\n          actual_paddings = paddings\n          expected_outputs = outputs\n        placeholder = array_ops.placeholder(dtype)\n        # outputs = space_to_batch(inputs)\n        x_tf = array_ops.space_to_batch_nd(placeholder, block_shape,\n                                           actual_paddings)\n        self.assertAllEqual(\n            sess.run(x_tf, {placeholder: actual_inputs}), expected_outputs)\n        # inputs = batch_to_space(outputs)\n        placeholder = array_ops.placeholder(dtype)\n        x_tf = array_ops.batch_to_space_nd(placeholder, block_shape,\n                                           actual_paddings)\n        self.assertAllEqual(\n            sess.run(x_tf, {placeholder: expected_outputs}), actual_inputs)\n\n  def _testDirect(self, input_shape, block_shape, paddings):\n    inputs = np.arange(np.prod(input_shape), dtype=np.float32)\n    inputs = inputs.reshape(input_shape)\n    self._testPad(inputs, block_shape, paddings,\n                  space_to_batch_direct(inputs, block_shape, paddings))\n\n  def testZeroBlockDimsZeroRemainingDims(self):\n    self._testPad(\n        inputs=[1, 2],\n        block_shape=[],\n        paddings=[],\n        outputs=[1, 2],)\n\n  def testZeroBlockDimsOneRemainingDim(self):\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[1, 2], [3, 4]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[1, 2], [3, 4]])\n\n  def testZeroBlockDimsTwoRemainingDims(self):\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with two no-op block dims.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1, 1],\n        paddings=[[0, 0], [0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n  def testOneBlockDimZeroRemainingDims(self):\n    self._testPad(\n        inputs=[[1, 2, 3], [4, 5, 6]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[0, 2], [0, 5], [1, 3], [4, 6]])\n\n  def testOneBlockDimOneRemainingDim(self):\n    self._testPad(\n        inputs=[[[1, 11], [2, 21], [3, 31]], [[4, 41], [5, 51], [6, 61]]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[[0, 0], [2, 21]], [[0, 0], [5, 51]], [[1, 11], [3, 31]],\n                 [[4, 41], [6, 61]]])\n\n  def testDirect0(self):\n    # Test with zero-size remaining dimension.\n    self._testDirect(\n        input_shape=[3, 1, 2, 0], block_shape=[3], paddings=[[0, 2]])\n\n  def testDirect1(self):\n    # Test with zero-size blocked dimension.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[0, 0]])\n\n  def testDirect2(self):\n    # Test with padding up from zero size.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[1, 2]])\n\n  def testDirect3(self):\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2],\n        paddings=[[1, 2], [0, 0], [3, 0]])\n\n  def testDirect4(self):\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2, 2],\n        paddings=[[1, 2], [0, 0], [3, 0], [0, 0]])\n\n  def testDirect5(self):\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0]])\n\n  def testDirect6(self):\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2, 1],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0], [0, 0]])\n\n\nif __name__ == \"__main__\":\n  test.main()\n", "load(\"//tensorflow/core/platform:rules_cc.bzl\", \"cc_library\")\nload(\"//tensorflow:tensorflow.bzl\", \"tf_kernel_library\")\n\npackage(\n    default_visibility = [\n        \"//tensorflow/compiler/tf2xla:internal\",\n        \"//third_party/cloud_tpu/inference_converter:__subpackages__\",\n    ],\n    licenses = [\"notice\"],\n)\n\ntf_kernel_library(\n    name = \"xla_ops\",\n    srcs = [\n        \"aggregate_ops.cc\",\n        \"all_reduce_op.cc\",\n        \"approx_topk_op.cc\",\n        \"arg_op.cc\",\n        \"batch_matmul_op.cc\",\n        \"batch_norm_op.cc\",\n        \"batchtospace_op.cc\",\n        \"bcast_ops.cc\",\n        \"beta_op.cc\",\n        \"bias_ops.cc\",\n        \"binary_ops.cc\",\n        \"broadcast_to_op.cc\",\n        \"bucketize_op.cc\",\n        \"cast_op.cc\",\n        \"categorical_op.cc\",\n        \"cholesky_op.cc\",\n        \"clip_by_value_op.cc\",\n        \"concat_op.cc\",\n        \"const_op.cc\",\n        \"conv_ops.cc\",\n        \"cross_op.cc\",\n        \"cwise_ops.cc\",\n        \"cwise_ops.h\",\n        \"data_format_ops.cc\",\n        \"depthtospace_op.cc\",\n        \"dequantize_op.cc\",\n        \"device_index_op.cc\",\n        \"diag_op.cc\",\n        \"dynamic_partition_op.cc\",\n        \"dynamic_slice_ops.cc\",\n        \"dynamic_stitch_op.cc\",\n        \"einsum_op.cc\",\n        \"elu_op.cc\",\n        \"elu_op.h\",\n        \"empty_op.cc\",\n        \"ensure_shape_op.cc\",\n        \"extract_image_patches_op.cc\",\n        \"fake_param_op.cc\",\n        \"fake_quantize_ops.cc\",\n        \"fft_ops.cc\",\n        \"fill_op.cc\",\n        \"function_ops.cc\",\n        \"gather_op.cc\",\n        \"gather_op_helpers.h\",\n        \"gather_scatter_ops.cc\",\n        \"identity_op.cc\",\n        \"image_ops.cc\",\n        \"image_resize_ops.cc\",\n        \"in_topk_op.cc\",\n        \"index_ops.cc\",\n        \"l2loss_op.cc\",\n        \"listdiff_op.cc\",\n        \"lower_upper_bound_ops.cc\",\n        \"lrn_ops.cc\",\n        \"matmul_op.cc\",\n        \"matrix_band_part_op.cc\",\n        \"matrix_diag_ops.cc\",\n        \"matrix_inverse_op.cc\",\n        \"matrix_solve_op.cc\",\n        \"matrix_triangular_solve_op.cc\",\n        \"mirror_pad_op.cc\",\n        \"next_after_op.cc\",\n        \"no_op.cc\",\n        \"one_hot_op.cc\",\n        \"pack_op.cc\",\n        \"pad_op.cc\",\n        \"pooling_ops.cc\",\n        \"qr_op.cc\",\n        \"quantize_and_dequantize_op.cc\",\n        \"random_ops.cc\",\n        \"random_ops_util.cc\",\n        \"random_ops_util.h\",\n        \"reduce_window_op.cc\",\n        \"reduction_ops.cc\",\n        \"reduction_ops.h\",\n        \"reduction_ops_common.cc\",\n        \"relu_op.cc\",\n        \"relu_op.h\",\n        \"replica_id_op.cc\",\n        \"reshape_op.cc\",\n        \"retval_op.cc\",\n        \"reverse_op.cc\",\n        \"reverse_sequence_op.cc\",\n        \"roll_op.cc\",\n        \"scan_ops.cc\",\n        \"scatter_nd_op.cc\",\n        \"segment_reduction_ops.cc\",\n        \"select_op.cc\",\n        \"sendrecv_ops.cc\",\n        \"sequence_ops.cc\",\n        \"shape_op.cc\",\n        \"shape_util.cc\",\n        \"sharding_op.cc\",\n        \"sharding_util_ops.cc\",\n        \"slice_op.cc\",\n        \"softmax_op.cc\",\n        \"sort_ops.cc\",\n        \"spacetobatch_op.cc\",\n        \"spacetodepth_op.cc\",\n        \"sparse_to_dense_op.cc\",\n        \"split_op.cc\",\n        \"spmd_manual_sharding_ops.cc\",\n        \"stack_ops.cc\",\n        \"stateful_random_ops.cc\",\n        \"stateless_random_ops.cc\",\n        \"stateless_random_ops_v2.cc\",\n        \"strided_slice_op.cc\",\n        \"tensor_array_ops.cc\",\n        \"tensor_list_ops.cc\",\n        \"tile_ops.cc\",\n        \"to_bool_op.cc\",\n        \"topk_op.cc\",\n        \"training_ops.cc\",\n        \"transpose_op.cc\",\n        \"tridiagonal_ops.cc\",\n        \"unary_ops.cc\",\n        \"unary_ops_composition.cc\",\n        \"unique_op.cc\",\n        \"unpack_op.cc\",\n        \"variable_ops.cc\",\n        \"where_op.cc\",\n        \"xla_broadcast_helper_op.cc\",\n        \"xla_conv_op.cc\",\n        \"xla_custom_call_op.cc\",\n        \"xla_dequantize_op.cc\",\n        \"xla_dot_op.cc\",\n        \"xla_optimization_barrier_op.cc\",\n        \"xla_pad_op.cc\",\n        \"xla_reduce_op.cc\",\n        \"xla_select_and_scatter_op.cc\",\n        \"xla_self_adjoint_eig_op.cc\",\n        \"xla_svd_op.cc\",\n    ],\n    hdrs = [\n        \"image_resize_ops.h\",\n        \"index_ops.h\",\n        \"shape_util.h\",\n    ],\n    tags = [\"optonly\"],\n    deps = [\n        \":case_op\",\n        \":conv_op_helpers\",\n        \":if_op\",\n        \":tensor_list_utils\",\n        \":while_op\",\n        \"//tensorflow/compiler/jit:xla_activity_listener\",\n        \"//tensorflow/compiler/jit:xla_activity_proto_cc\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:mlir_xla_op_kernel\",\n        \"//tensorflow/compiler/tf2xla:xla_compilation_device\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_context\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla:xla_resource\",\n        \"//tensorflow/compiler/tf2xla/lib:broadcast\",\n        \"//tensorflow/compiler/tf2xla/lib:data_format\",\n        \"//tensorflow/compiler/tf2xla/lib:random\",\n        \"//tensorflow/compiler/tf2xla/lib:scatter\",\n        \"//tensorflow/compiler/tf2xla/lib:util\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:array4d\",\n        \"//tensorflow/compiler/xla:comparison_util\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla:literal_util\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:sharding_op_util\",\n        \"//tensorflow/compiler/xla:status_macros\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla:xla_data_proto_cc\",\n        \"//tensorflow/compiler/xla/client:client_library\",\n        \"//tensorflow/compiler/xla/client:value_inference\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client:xla_computation\",\n        \"//tensorflow/compiler/xla/client/lib:approx_topk\",\n        \"//tensorflow/compiler/xla/client/lib:arithmetic\",\n        \"//tensorflow/compiler/xla/client/lib:comparators\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/compiler/xla/client/lib:dynamic_shaped_ops\",\n        \"//tensorflow/compiler/xla/client/lib:loops\",\n        \"//tensorflow/compiler/xla/client/lib:math\",\n        \"//tensorflow/compiler/xla/client/lib:matrix\",\n        \"//tensorflow/compiler/xla/client/lib:pooling\",\n        \"//tensorflow/compiler/xla/client/lib:prng\",\n        \"//tensorflow/compiler/xla/client/lib:qr\",\n        \"//tensorflow/compiler/xla/client/lib:quantize\",\n        \"//tensorflow/compiler/xla/client/lib:self_adjoint_eig\",\n        \"//tensorflow/compiler/xla/client/lib:slicing\",\n        \"//tensorflow/compiler/xla/client/lib:sorting\",\n        \"//tensorflow/compiler/xla/client/lib:svd\",\n        \"//tensorflow/compiler/xla/client/lib:tridiagonal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/kernels:resource_variable_util\",\n        \"//tensorflow/core/kernels:scatter_nd_util\",\n        \"//tensorflow/core/kernels:stateful_random_ops_header\",\n        \"//tensorflow/core/kernels:stateless_random_ops_v2_header\",\n        \"//tensorflow/core/tpu:tpu_defs\",\n        \"//tensorflow/stream_executor/lib\",\n        \"@com_google_absl//absl/algorithm:container\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/strings:str_format\",\n        \"@com_google_absl//absl/types:optional\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\n# A separate cc_library for resampler_ops is needed because resampler is in\n# contrib/, and thus the declaration of resampler cannot be pulled into the deps\n# of xla_ops. Therefore, resampler_ops is its own cc_library target, and its\n# corresponding tf_kernel_library is defined in contrib/resampler/BUILD.\ncc_library(\n    name = \"resampler_ops\",\n    srcs = [\"resampler_ops.cc\"],\n    hdrs = [\"resampler_ops.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/xla:array4d\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:xla_data_proto_cc\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:arithmetic\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n    alwayslink = 1,\n)\n\n# See note on resampler_ops target for why this is also a seprate op.\ncc_library(\n    name = \"resampler_addon_ops\",\n    srcs = [\"resampler_addon_ops.cc\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":resampler_ops\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"conv_op_helpers\",\n    srcs = [\"conv_op_helpers.cc\"],\n    hdrs = [\"conv_op_helpers.h\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/xla:literal_util\",\n        \"//tensorflow/compiler/xla:statusor\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:arithmetic\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/kernels:conv_grad_shape_utils\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_list_utils\",\n    srcs = [\"tensor_list_utils.cc\"],\n    hdrs = [\"tensor_list_utils.h\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/xla:literal_util\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:status_macros\",\n        \"//tensorflow/compiler/xla:statusor\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla:xla_data_proto_cc\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"if_while_utils\",\n    srcs = [\"if_while_utils.cc\"],\n    hdrs = [\"if_while_utils.h\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"while_op\",\n    srcs = [\"while_op.cc\"],\n    hdrs = [\"while_op.h\"],\n    deps = [\n        \":if_while_utils\",\n        \":tensor_list_utils\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:side_effect_util\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla:status_macros\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client:xla_computation\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"if_op\",\n    srcs = [\"if_op.cc\"],\n    hdrs = [\"if_op.h\"],\n    deps = [\n        \":if_while_utils\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:side_effect_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_context\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:dynamic_shaped_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"case_op\",\n    srcs = [\"case_op.cc\"],\n    hdrs = [\"case_op.h\"],\n    deps = [\n        \":if_while_utils\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:side_effect_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_context\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/compiler/xla/client/lib:dynamic_shaped_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\n# Kernels that have a dummy (no-op) implementation.\ntf_kernel_library(\n    name = \"xla_dummy_ops\",\n    srcs = [\n        \"assert_op.cc\",\n        \"check_numerics_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:mlir_xla_op_kernel\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:logging_ops_op_lib\",\n    ],\n    alwayslink = 1,\n)\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/tf2xla/xla_helpers.h\"\n#include \"tensorflow/compiler/tf2xla/xla_op_kernel.h\"\n#include \"tensorflow/compiler/tf2xla/xla_op_registry.h\"\n#include \"tensorflow/compiler/xla/client/xla_builder.h\"\n\nnamespace tensorflow {\nnamespace {\n\nvoid SpaceToBatch(XlaOpKernelContext* ctx, const xla::XlaOp& input,\n                  DataType input_dtype, const TensorShape& input_tensor_shape,\n                  absl::Span<const int64_t> block_shape,\n                  const xla::Literal& paddings) {\n  const int input_rank = input_tensor_shape.dims();\n  const absl::InlinedVector<int64_t, 4> input_shape =\n      input_tensor_shape.dim_sizes();\n  const int block_rank = block_shape.size();\n\n  OP_REQUIRES(\n      ctx, input_rank >= 1 + block_rank,\n      errors::InvalidArgument(\"input rank should be >= \", 1 + block_rank,\n                              \" instead of \", input_rank));\n  absl::Span<const int64_t> remainder_shape(input_shape);\n  remainder_shape.remove_prefix(1 + block_rank);\n\n  OP_REQUIRES(\n      ctx,\n      paddings.shape().rank() == 2 &&\n          block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0) &&\n          2 == xla::ShapeUtil::GetDimension(paddings.shape(), 1),\n      errors::InvalidArgument(\"paddings should have shape [\", block_rank,\n                              \", 2] instead of \",\n                              xla::ShapeUtil::HumanString(paddings.shape())));\n\n  xla::XlaBuilder* b = ctx->builder();\n\n  // 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the\n  //  input according to `paddings` to produce `padded` of shape `padded_shape`.\n  xla::PaddingConfig padding_config;\n  std::vector<int64_t> padded_shape(input_shape.begin(), input_shape.end());\n  int64_t block_num_elems = 1LL;\n  padding_config.add_dimensions();  // Don't pad the batch dimension.\n  for (int i = 0; i < block_rank; ++i) {\n    auto* dim = padding_config.add_dimensions();\n    int64_t pad_start = paddings.Get<int64_t>({i, 0});\n    int64_t pad_end = paddings.Get<int64_t>({i, 1});\n    OP_REQUIRES(ctx, pad_start >= 0 && pad_end >= 0,\n                errors::InvalidArgument(\"Paddings must be non-negative\"));\n    dim->set_edge_padding_low(pad_start);\n    dim->set_edge_padding_high(pad_end);\n    padded_shape[1 + i] += pad_start + pad_end;\n    block_num_elems *= block_shape[i];\n  }\n  // Don't pad the remainder dimensions.\n  for (int i = 0; i < remainder_shape.size(); ++i) {\n    padding_config.add_dimensions();\n  }\n  OP_REQUIRES(ctx, block_num_elems > 0,\n              errors::InvalidArgument(\n                  \"The product of the block dimensions must be positive\"));\n\n  xla::XlaOp padded =\n      xla::Pad(input, XlaHelpers::Zero(b, input_dtype), padding_config);\n\n  // 2. Reshape `padded` to `reshaped_padded` of shape:\n  //\n  //      [batch] +\n  //      [padded_shape[1] / block_shape[0],\n  //        block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1],\n  //       block_shape[M-1]] +\n  //      remaining_shape\n  const int64_t batch_size = input_shape[0];\n  std::vector<int64_t> reshaped_padded_shape(input_rank + block_rank);\n  reshaped_padded_shape[0] = batch_size;\n  for (int i = 0; i < block_rank; ++i) {\n    OP_REQUIRES(ctx, padded_shape[1 + i] % block_shape[i] == 0,\n                errors::InvalidArgument(\"padded_shape[\", 1 + i,\n                                        \"]=\", padded_shape[1 + i],\n                                        \" is not divisible by block_shape[\", i,\n                                        \"]=\", block_shape[i]));\n\n    reshaped_padded_shape[1 + i * 2] = padded_shape[1 + i] / block_shape[i];\n    reshaped_padded_shape[1 + i * 2 + 1] = block_shape[i];\n  }\n  std::copy(remainder_shape.begin(), remainder_shape.end(),\n            reshaped_padded_shape.begin() + 1 + 2 * block_rank);\n\n  xla::XlaOp reshaped_padded = xla::Reshape(padded, reshaped_padded_shape);\n\n  // 3. Permute dimensions of `reshaped_padded` to produce\n  //    `permuted_reshaped_padded` of shape:\n  //\n  //      block_shape +\n  //      [batch] +\n  //      [padded_shape[1] / block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1]] +\n  //      remaining_shape\n  std::vector<int64_t> permutation(reshaped_padded_shape.size());\n  for (int i = 0; i < block_rank; ++i) {\n    permutation[i] = 1 + 2 * i + 1;\n    permutation[block_rank + 1 + i] = 1 + 2 * i;\n  }\n  permutation[block_rank] = 0;\n  std::iota(permutation.begin() + 1 + block_rank * 2, permutation.end(),\n            1 + block_rank * 2);\n  xla::XlaOp permuted_reshaped_padded =\n      xla::Transpose(reshaped_padded, permutation);\n\n  // 4. Reshape `permuted_reshaped_padded` to flatten `block_shape` into the\n  //    batch dimension, producing an output tensor of shape:\n  //\n  //      [batch * prod(block_shape)] +\n  //      [padded_shape[1] / block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1]] +\n  //      remaining_shape\n  // Determine the length of the prefix of block dims that can be combined\n  // into the batch dimension due to having no padding and block_shape=1.\n  std::vector<int64_t> output_shape(input_rank);\n  output_shape[0] = batch_size * block_num_elems;\n  for (int i = 0; i < block_rank; ++i) {\n    output_shape[1 + i] = padded_shape[1 + i] / block_shape[i];\n  }\n  std::copy(remainder_shape.begin(), remainder_shape.end(),\n            output_shape.begin() + 1 + block_rank);\n\n  xla::XlaOp output = xla::Reshape(permuted_reshaped_padded, output_shape);\n  ctx->SetOutput(0, output);\n}\n\nclass SpaceToBatchNDOp : public XlaOpKernel {\n public:\n  explicit SpaceToBatchNDOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {}\n\n  void Compile(XlaOpKernelContext* ctx) override {\n    std::vector<int64_t> block_shape;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsIntVector(1, &block_shape));\n\n    xla::Literal paddings;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsInt64Literal(2, &paddings));\n\n    SpaceToBatch(ctx, ctx->Input(0), input_type(0), ctx->InputShape(0),\n                 block_shape, paddings);\n  }\n};\nREGISTER_XLA_OP(Name(\"SpaceToBatchND\")\n                    .CompileTimeConstantInput(\"paddings\")\n                    .CompileTimeConstantInput(\"block_shape\"),\n                SpaceToBatchNDOp);\n\nclass SpaceToBatchOp : public XlaOpKernel {\n public:\n  explicit SpaceToBatchOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"block_size\", &block_size_));\n    OP_REQUIRES(\n        ctx, block_size_ > 1,\n        errors::InvalidArgument(\"Block size should be > 1: \", block_size_));\n  }\n\n  void Compile(XlaOpKernelContext* ctx) override {\n    xla::Literal paddings;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsInt64Literal(1, &paddings));\n\n    SpaceToBatch(ctx, ctx->Input(0), input_type(0), ctx->InputShape(0),\n                 {block_size_, block_size_}, paddings);\n  }\n\n private:\n  int block_size_;\n};\nREGISTER_XLA_OP(Name(\"SpaceToBatch\").CompileTimeConstantInput(\"paddings\"),\n                SpaceToBatchOp);\n\n}  // namespace\n}  // namespace tensorflow\n", "load(\n    \"//tensorflow/core/platform:build_config.bzl\",\n    \"tf_kernel_tests_linkstatic\",\n    \"tf_proto_library\",\n    \"tf_pyclif_proto_library\",\n)\nload(\n    \"//tensorflow:tensorflow.bzl\",\n    \"tf_cc_test\",\n    \"tf_cc_tests\",\n    \"tf_copts\",\n    \"tf_cuda_library\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"filegroup\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_cc_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_generate_proto_text_sources\")\n\n# buildifier: disable=same-origin-load\nload(\n    \"//tensorflow/core/platform:build_config_root.bzl\",\n    \"if_static\",\n    \"tf_cuda_tests_tags\",\n)\nload(\n    \"//tensorflow/core/platform:rules_cc.bzl\",\n    \"cc_library\",\n)\n\npackage(\n    default_visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n    licenses = [\"notice\"],\n)\n\n# Export all header files for which we do not yet provide a dedicated build\n# rule. This avoids breaking all the rules in tensorflow/core/BUILD.\nexports_files(\n    srcs = [\n        \"allocator_registry.h\",\n        \"cancellation.h\",\n        \"collective.h\",\n        \"control_flow.h\",\n        \"dataset.h\",\n        \"dataset_stateful_op_allowlist.h\",\n        \"device.h\",\n        \"device_base.h\",\n        \"device_factory.h\",\n        \"function.h\",\n        \"function_handle_cache.h\",\n        \"graph_def_util.h\",\n        \"graph_to_functiondef.h\",\n        \"kernel_def_builder.h\",\n        \"kernel_def_util.h\",\n        \"logging.h\",\n        \"lookup_interface.h\",\n        \"memory_types.h\",\n        \"metrics.h\",\n        \"model.h\",\n        \"node_def_builder.h\",\n        \"numeric_op.h\",\n        \"op_kernel.h\",\n        \"op_requires.h\",\n        \"op_segment.h\",\n        \"ops_util.h\",\n        \"partial_tensor_shape.h\",\n        \"queue_interface.h\",\n        \"reader_interface.h\",\n        \"reader_op_kernel.h\",\n        \"ref_var.h\",\n        \"register_types_traits.h\",\n        \"rendezvous.h\",\n        \"resource_mgr.h\",\n        \"resource_op_kernel.h\",\n        \"resource_var.h\",\n        \"rng_alg.h\",\n        \"run_handler.h\",\n        \"run_handler_util.h\",\n        \"session_state.h\",\n        \"shared_ptr_variant.h\",\n        \"stats_aggregator.h\",\n        \"tensor_reference.h\",\n        \"tensor_slice.h\",\n        \"tensor_util.h\",\n        \"thread_factory.h\",\n        \"tracking_allocator.h\",\n        \"versions.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/common_runtime:__pkg__\",\n    ],\n)\n\n# List of exported test source files that do not yet have local build rules.\nexports_files(\n    srcs = [\n        \"op_gen_lib_test.cc\",\n        \"op_segment_test.cc\",\n        \"run_handler_test.cc\",\n        \"run_handler_util_test.cc\",\n        \"variant_op_copy_test.cc\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\n# List of exported proto source files.\nexports_files(\n    srcs = [\n        \"allocation_description.proto\",\n        \"api_def.proto\",\n        \"attr_value.proto\",\n        \"cost_graph.proto\",\n        \"dataset_metadata.proto\",\n        \"dataset_options.proto\",\n        \"device_attributes.proto\",\n        \"full_type.proto\",\n        \"function.proto\",\n        \"graph.proto\",\n        \"graph_transfer_info.proto\",\n        \"kernel_def.proto\",\n        \"log_memory.proto\",\n        \"model.proto\",\n        \"node_def.proto\",\n        \"op_def.proto\",\n        \"reader_base.proto\",\n        \"resource_handle.proto\",\n        \"step_stats.proto\",\n        \"summary.proto\",\n        \"tensor.proto\",\n        \"tensor_description.proto\",\n        \"tensor_shape.proto\",\n        \"tensor_slice.proto\",\n        \"types.proto\",\n        \"variable.proto\",\n        \"versions.proto\",\n    ],\n    visibility = [\n        \"//tensorflow:internal\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n)\n\nexports_files(\n    [\n        \"attr_value_util.h\",\n        \"common_shape_fns.h\",\n        \"kernel_shape_util.h\",\n        \"node_def_util.h\",\n        \"node_properties.h\",\n        \"op.h\",\n        \"op_def_builder.h\",\n        \"full_type_util.h\",\n        \"full_type_inference_util.h\",\n        \"op_def_util.h\",\n        \"shape_inference.h\",\n    ],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n)\n\n# The following filegroups are needed since globbing across packages boundaries\n# will just fail silently (see 3rd caveat at\n# https://docs.bazel.build/versions/master/be/functions.html#glob).\n\n# Files needed for core:framework_internal_impl.\nfilegroup(\n    name = \"framework_internal_private_hdrs\",\n    srcs = [\n        \"allocator.h\",\n        \"allocator_registry.h\",\n        \"attr_value_util.h\",\n        \"bfloat16.h\",\n        \"bounds_check.h\",\n        \"cancellation.h\",\n        \"collective.h\",\n        \"common_shape_fns.h\",\n        \"control_flow.h\",\n        \"dataset.h\",\n        \"dataset_stateful_op_allowlist.h\",\n        \"device.h\",\n        \"device_base.h\",\n        \"device_factory.h\",\n        \"full_type_inference_util.h\",\n        \"full_type_util.h\",\n        \"function.h\",\n        \"function_handle_cache.h\",\n        \"graph_def_util.h\",\n        \"graph_to_functiondef.h\",\n        \"kernel_def_builder.h\",\n        \"kernel_def_util.h\",\n        \"kernel_shape_util.h\",\n        \"local_rendezvous.h\",\n        \"log_memory.h\",\n        \"logging.h\",\n        \"lookup_interface.h\",\n        \"memory_types.h\",\n        \"metrics.h\",\n        \"model.h\",\n        \"node_def_builder.h\",\n        \"node_def_util.h\",\n        \"node_properties.h\",\n        \"numeric_op.h\",\n        \"numeric_types.h\",\n        \"op.h\",\n        \"op_def_builder.h\",\n        \"op_def_util.h\",\n        \"op_kernel.h\",\n        \"op_requires.h\",\n        \"op_segment.h\",\n        \"ops_util.h\",\n        \"partial_tensor_shape.h\",\n        \"queue_interface.h\",\n        \"reader_interface.h\",\n        \"reader_op_kernel.h\",\n        \"ref_var.h\",\n        \"register_types.h\",\n        \"register_types_traits.h\",\n        \"rendezvous.h\",\n        \"resource_base.h\",\n        \"resource_handle.h\",\n        \"resource_mgr.h\",\n        \"resource_op_kernel.h\",\n        \"resource_var.h\",\n        \"run_handler.h\",\n        \"run_handler_util.h\",\n        \"session_state.h\",\n        \"shape_inference.h\",\n        \"shared_ptr_variant.h\",\n        \"stats_aggregator.h\",\n        \"tensor.h\",\n        \"tensor_key.h\",\n        \"tensor_reference.h\",\n        \"tensor_shape.h\",\n        \"tensor_slice.h\",\n        \"tensor_types.h\",\n        \"tensor_util.h\",\n        \"thread_factory.h\",\n        \"tracking_allocator.h\",\n        \"type_index.h\",\n        \"type_traits.h\",\n        \"typed_allocator.h\",\n        \"types.h\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.h\",\n        \"versions.h\",\n        \"//tensorflow/core/framework/registration:options.h\",\n        \"//tensorflow/core/framework/registration:registration.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_impl_srcs\",\n    srcs = [\n        \"cancellation.cc\",\n        \"collective.cc\",\n        \"dataset.cc\",\n        \"device.cc\",\n        \"device_base.cc\",\n        \"device_factory.cc\",\n        \"function.cc\",\n        \"function_handle_cache.cc\",\n        \"graph_def_util.cc\",\n        \"graph_to_functiondef.cc\",\n        \"kernel_def_builder.cc\",\n        \"kernel_def_util.cc\",\n        \"load_library.cc\",\n        \"local_rendezvous.cc\",\n        \"logging.cc\",\n        \"lookup_interface.cc\",\n        \"memory_types.cc\",\n        \"metrics.cc\",\n        \"model.cc\",\n        \"node_def_builder.cc\",\n        \"op_kernel.cc\",\n        \"op_segment.cc\",\n        \"ops_util.cc\",\n        \"ref_var.cc\",\n        \"rendezvous.cc\",\n        \"resource_mgr.cc\",\n        \"resource_var.cc\",\n        \"run_handler.cc\",\n        \"run_handler_util.cc\",\n        \"tensor_slice.cc\",\n        \"tensor_util.cc\",\n        \"versions.cc\",\n    ],\n)\n\n# Files needed for core:mobile_srcs_(no|only)_runtime.\nfilegroup(\n    name = \"mobile_srcs_no_runtime\",\n    srcs = [\n        \"allocator.cc\",\n        \"allocator.h\",\n        \"allocator_registry.cc\",\n        \"allocator_registry.h\",\n        \"bfloat16.cc\",\n        \"bfloat16.h\",\n        \"bounds_check.h\",\n        \"cpu_allocator_impl.cc\",\n        \"kernel_shape_util.cc\",\n        \"kernel_shape_util.h\",\n        \"log_memory.cc\",\n        \"log_memory.h\",\n        \"numeric_types.h\",\n        \"op_requires.h\",\n        \"ops_util.cc\",\n        \"ops_util.h\",\n        \"register_types.h\",\n        \"resource_base.h\",\n        \"resource_handle.cc\",\n        \"resource_handle.h\",\n        \"tensor.cc\",\n        \"tensor.h\",\n        \"tensor_key.h\",\n        \"tensor_shape.cc\",\n        \"tensor_shape.h\",\n        \"tensor_types.h\",\n        \"tracking_allocator.cc\",\n        \"tracking_allocator.h\",\n        \"type_index.h\",\n        \"type_traits.h\",\n        \"typed_allocator.cc\",\n        \"typed_allocator.h\",\n        \"types.cc\",\n        \"types.h\",\n        \"variant.cc\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.cc\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.cc\",\n        \"variant_tensor_data.h\",\n    ],\n)\n\nfilegroup(\n    name = \"mobile_srcs_only_runtime\",\n    srcs = [\n        \"attr_value_util.cc\",\n        \"attr_value_util.h\",\n        \"cancellation.cc\",\n        \"cancellation.h\",\n        \"collective.cc\",\n        \"collective.h\",\n        \"common_shape_fns.cc\",\n        \"common_shape_fns.h\",\n        \"control_flow.h\",\n        \"dataset.cc\",\n        \"dataset.h\",\n        \"dataset_stateful_op_allowlist.h\",\n        \"device.cc\",\n        \"device.h\",\n        \"device_base.cc\",\n        \"device_base.h\",\n        \"device_factory.cc\",\n        \"device_factory.h\",\n        \"full_type_inference_util.cc\",\n        \"full_type_inference_util.h\",\n        \"full_type_util.cc\",\n        \"full_type_util.h\",\n        \"function.cc\",\n        \"function.h\",\n        \"function_handle_cache.cc\",\n        \"function_handle_cache.h\",\n        \"graph_def_util.cc\",\n        \"graph_def_util.h\",\n        \"graph_to_functiondef.cc\",\n        \"graph_to_functiondef.h\",\n        \"kernel_def_builder.cc\",\n        \"kernel_def_builder.h\",\n        \"kernel_def_util.cc\",\n        \"kernel_def_util.h\",\n        \"load_library.cc\",\n        \"local_rendezvous.cc\",\n        \"local_rendezvous.h\",\n        \"logging.cc\",\n        \"logging.h\",\n        \"lookup_interface.cc\",\n        \"lookup_interface.h\",\n        \"memory_types.cc\",\n        \"memory_types.h\",\n        \"metrics.cc\",\n        \"metrics.h\",\n        \"model.cc\",\n        \"model.h\",\n        \"node_def_builder.cc\",\n        \"node_def_builder.h\",\n        \"node_def_util.cc\",\n        \"node_def_util.h\",\n        \"node_properties.cc\",\n        \"node_properties.h\",\n        \"numeric_op.h\",\n        \"op.cc\",\n        \"op.h\",\n        \"op_def_builder.cc\",\n        \"op_def_builder.h\",\n        \"op_def_util.cc\",\n        \"op_def_util.h\",\n        \"op_kernel.cc\",\n        \"op_kernel.h\",\n        \"op_segment.cc\",\n        \"op_segment.h\",\n        \"partial_tensor_shape.h\",\n        \"queue_interface.h\",\n        \"reader_base.cc\",\n        \"reader_base.h\",\n        \"reader_interface.h\",\n        \"reader_op_kernel.h\",\n        \"ref_var.cc\",\n        \"ref_var.h\",\n        \"register_types_traits.h\",\n        \"rendezvous.cc\",\n        \"rendezvous.h\",\n        \"resource_mgr.cc\",\n        \"resource_mgr.h\",\n        \"resource_op_kernel.h\",\n        \"resource_var.cc\",\n        \"resource_var.h\",\n        \"rng_alg.h\",\n        \"run_handler.cc\",\n        \"run_handler.h\",\n        \"run_handler_util.cc\",\n        \"run_handler_util.h\",\n        \"session_state.h\",\n        \"shape_inference.cc\",\n        \"shape_inference.h\",\n        \"stats_aggregator.h\",\n        \"tensor_reference.h\",\n        \"tensor_slice.cc\",\n        \"tensor_slice.h\",\n        \"tensor_util.cc\",\n        \"tensor_util.h\",\n        \"thread_factory.h\",\n        \"versions.cc\",\n        \"versions.h\",\n        \"//tensorflow/core/framework/registration:options.h\",\n        \"//tensorflow/core/framework/registration:registration.h\",\n    ],\n)\n\nfilegroup(\n    name = \"android_test_hdrs\",\n    srcs = [\n        \"fake_input.h\",\n        \"shape_inference_testutil.h\",\n        \"tensor_testutil.h\",\n    ],\n)\n\nfilegroup(\n    name = \"android_test_srcs\",\n    srcs = [\n        \"fake_input.cc\",\n        \":android_test_srcs_no_core\",\n    ],\n)\n\nfilegroup(\n    name = \"android_test_srcs_no_core\",\n    srcs = [\n        \"shape_inference_testutil.cc\",\n        \"tensor_testutil.cc\",\n    ],\n)\n\n# Individual targets. These should be preferred over tensorflow/core:framework\n# whenever possible.\n\n# This is redundant with the \"tensorflow/core:framework\" target. It's useful for\n# applications that want to depend on a minimal subset of TensorFlow (e.g. XLA).\ncc_library(\n    name = \"allocator\",\n    srcs = [\n        \"allocator.cc\",\n        \"allocator_registry.h\",\n        \"tracking_allocator.cc\",\n        \"tracking_allocator.h\",\n    ],\n    hdrs = [\n        \"allocator.h\",\n    ],\n    features = [\"parse_headers\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":numeric_types\",\n        \":type_traits\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ] + if_static(\n        extra_deps = [\n            \":allocator_registry_impl\",\n            \"//tensorflow/core/lib/gtl:inlined_vector\",\n            \"//tensorflow/core/lib/strings:strcat\",\n            \"//tensorflow/core/lib/strings:stringprintf\",\n            \"//tensorflow/core/platform:env\",\n            \"//tensorflow/core/platform:env_impl\",\n            \"//tensorflow/core/platform:logging\",\n            \"//tensorflow/core/platform:macros\",\n            \"//tensorflow/core/platform:mutex\",\n            \"//tensorflow/core/platform:platform_port\",\n            \"//tensorflow/core/platform:thread_annotations\",\n            \"//tensorflow/core/platform:types\",\n        ],\n        otherwise = [\n            \"//tensorflow/core:lib\",\n        ],\n    ),\n    alwayslink = 1,\n)\n\n# This target will be included in libtensorflow_framework.so via the\n# framework_internal_impl target.\n# All other dependencies on this target need to go through if_static guard,\n# as otherwise duplicate registration in the registry will cause crashes.\ncc_library(\n    name = \"allocator_registry_impl\",\n    srcs = [\n        \"allocator.h\",\n        \"allocator_registry.cc\",\n        \"allocator_registry.h\",\n        \"cpu_allocator_impl.cc\",\n        \"tracking_allocator.h\",\n    ],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n    deps = [\n        \":numeric_types\",\n        \":type_traits\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/lib/strings:stringprintf\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:thread_annotations\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/profiler/lib:scoped_memory_debug_annotation\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"tensor_testutil\",\n    testonly = 1,\n    srcs = [\"tensor_testutil.cc\"],\n    hdrs = [\"tensor_testutil.h\"],\n    copts = tf_copts(),\n    visibility = [\"//tensorflow:internal\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n    ],\n)\n\ncc_library(\n    name = \"shape_inference_testutil\",\n    testonly = 1,\n    srcs = [\"shape_inference_testutil.cc\"],\n    hdrs = [\"shape_inference_testutil.h\"],\n    copts = tf_copts(),\n    visibility = [\"//tensorflow:internal\"],\n    deps = [\n        \":node_def_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ncc_library(\n    name = \"reader_base\",\n    srcs = [\"reader_base.cc\"],\n    hdrs = [\"reader_base.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":reader_base_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"op_gen_lib\",\n    srcs = [\"op_gen_lib.cc\"],\n    hdrs = [\"op_gen_lib.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":api_def_proto_cc\",\n        \":attr_value_proto_cc\",\n        \":op_def_proto_cc\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"fake_input\",\n    testonly = 1,\n    srcs = [\"fake_input.cc\"],\n    hdrs = [\"fake_input.h\"],\n    visibility = [\"//tensorflow:__subpackages__\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":op_def_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"function_testlib\",\n    testonly = 1,\n    srcs = [\"function_testlib.cc\"],\n    hdrs = [\"function_testlib.h\"],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n    deps = [\n        \":function_proto_cc\",\n        \":graph_proto_cc\",\n        \":node_def_proto_cc\",\n        \":tensor_testutil\",\n        \":versions_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"bfloat16\",\n    srcs = [\"bfloat16.cc\"],\n    hdrs = [\"bfloat16.h\"],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n    deps = [\n        \":numeric_types\",\n        \"//tensorflow/core/platform:byte_order\",\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"numeric_types\",\n    hdrs = [\"numeric_types.h\"],\n    visibility = [\n        \"//tensorflow/compiler:__subpackages__\",\n        \"//tensorflow/core:__subpackages__\",\n    ],\n    deps = [\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"bounds_check\",\n    hdrs = [\"bounds_check.h\"],\n    visibility = [\"//tensorflow/core/kernels:friends\"],\n    deps = [\n        \"//tensorflow/core/platform:macros\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_shape\",\n    srcs = [\"tensor_shape.cc\"],\n    hdrs = [\n        \"partial_tensor_shape.h\",\n        \"tensor_shape.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/runtime_fallback:__subpackages__\",\n        \"//tensorflow/core/tfrt/utils:__subpackages__\",\n    ],\n    deps = [\n        \":bounds_check\",\n        \":tensor_shape_proto_cc\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:statusor\",\n        \"//tensorflow/core/util:overflow\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"resource_base\",\n    hdrs = [\"resource_base.h\"],\n    deps = [\n        \"//tensorflow/core/lib/core:refcount\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/platform:errors\",\n    ],\n)\n\ncc_library(\n    name = \"resource_handle\",\n    srcs = [\"resource_handle.cc\"],\n    hdrs = [\"resource_handle.h\"],\n    visibility = [\n        \"//tensorflow/compiler/mlir/tensorflow:__subpackages__\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n    deps = [\n        \":resource_base\",\n        \":resource_handle_proto_cc\",\n        \":tensor_shape\",\n        \":type_index\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:casts\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:intrusive_ptr\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:statusor\",\n        \"//tensorflow/core/platform:tensor_coding\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/util:managed_stack_trace\",\n        \"@com_google_absl//absl/strings:str_format\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cc_test(\n    name = \"resource_handle_test\",\n    size = \"small\",\n    srcs = [\"resource_handle_test.cc\"],\n    deps = [\n        \":resource_handle\",\n        \":resource_handle_proto_cc\",\n        \":tensor_shape_proto_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ncc_library(\n    name = \"type_index\",\n    hdrs = [\"type_index.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \"//tensorflow/core/platform:hash\",\n        \"//tensorflow/core/platform:stringpiece\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_types\",\n    hdrs = [\"tensor_types.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \"//tensorflow/core/platform:logging\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"type_traits\",\n    hdrs = [\"type_traits.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \":numeric_types\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"tensor\",\n    srcs = [\n        \"log_memory.cc\",\n        \"tensor.cc\",\n        \"typed_allocator.cc\",\n        \"types.cc\",\n        \"variant.cc\",\n        \"variant_op_registry.cc\",\n        \"variant_tensor_data.cc\",\n    ],\n    hdrs = [\n        \"log_memory.h\",\n        \"register_types.h\",\n        \"tensor.h\",\n        \"typed_allocator.h\",\n        \"types.h\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/runtime_fallback:__subpackages__\",\n        \"//tensorflow/core/tfrt:__subpackages__\",\n        \"//tensorflow/core/util:__pkg__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n    deps = [\n        \":allocation_description_proto_cc\",\n        \":allocator\",\n        \":bfloat16\",\n        \":full_type_proto_cc\",\n        \":log_memory_proto_cc\",\n        \":numeric_types\",\n        \":resource_handle\",\n        \":resource_handle_proto_cc\",\n        \":tensor_description_proto_cc\",\n        \":tensor_proto_cc\",\n        \":tensor_shape\",\n        \":tensor_types\",\n        \":type_index\",\n        \":type_traits\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:coding\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:refcount\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:flatmap\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:abi\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:strcat\",\n        \"//tensorflow/core/platform:tensor_coding\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/public:version\",\n        \"//tensorflow/core/util:managed_stack_trace\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/strings\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"shape_inference\",\n    srcs = [\"shape_inference.cc\"],\n    hdrs = [\"shape_inference.h\"],\n    deps = [\n        \":bounds_check\",\n        \":full_type_proto_cc\",\n        \":full_type_util\",\n        \":node_def_proto_cc\",\n        \":node_def_util\",\n        \":op_def_proto_cc\",\n        \":tensor_shape\",\n        \":tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/strings:numbers\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/platform:macros\",\n        \"@com_google_absl//absl/memory\",\n    ],\n)\n\ncc_library(\n    name = \"kernel_shape_util\",\n    srcs = [\"kernel_shape_util.cc\"],\n    hdrs = [\"kernel_shape_util.h\"],\n    deps = [\n        \":tensor\",\n        \":tensor_shape\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/util:padding\",\n    ],\n)\n\ncc_library(\n    name = \"common_shape_fns\",\n    srcs = [\"common_shape_fns.cc\"],\n    hdrs = [\"common_shape_fns.h\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":shape_inference\",\n        \":tensor\",\n        \":tensor_shape\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/util:einsum_op_util\",\n        \"//tensorflow/core/util:padding\",\n        \"//tensorflow/core/util:tensor_format\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"attr_value_util\",\n    srcs = [\"attr_value_util.cc\"],\n    hdrs = [\"attr_value_util.h\"],\n    deps = [\n        \":attr_value_proto_text\",\n        \":tensor\",\n        \":tensor_shape\",\n        \":tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/lib/strings:proto_serialization\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/platform:fingerprint\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"op_def_util\",\n    srcs = [\"op_def_util.cc\"],\n    hdrs = [\"op_def_util.h\"],\n    deps = [\n        \":api_def_proto_cc\",\n        \":attr_value_proto_cc\",\n        \":attr_value_util\",\n        \":op_def_proto_cc\",\n        \":tensor\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:map_util\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/lib/strings:proto_serialization\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"node_def_util\",\n    srcs = [\"node_def_util.cc\"],\n    hdrs = [\"node_def_util.h\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":attr_value_util\",\n        \":node_def_proto_cc\",\n        \":op_def_proto_cc\",\n        \":op_def_util\",\n        \":tensor\",\n        \":tensor_proto_cc\",\n        \":tensor_shape\",\n        \":tensor_shape_proto_cc\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:flatmap\",\n        \"//tensorflow/core/lib/gtl:map_util\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:hash\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:scanner\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/platform:strcat\",\n        \"//tensorflow/core/platform:stringpiece\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/util:padding\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"node_properties\",\n    srcs = [\"node_properties.cc\"],\n    hdrs = [\"node_properties.h\"],\n    deps = [\n        \":full_type_proto_cc\",\n        \":node_def_proto_cc\",\n        \":node_def_util\",\n        \":op\",\n        \":op_def_builder\",\n        \":op_def_proto_cc\",\n        \":tensor\",\n        \"//tensorflow/core/lib/core:status\",\n    ],\n)\n\ncc_library(\n    name = \"op_def_builder\",\n    srcs = [\"op_def_builder.cc\"],\n    hdrs = [\"op_def_builder.h\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":attr_value_util\",\n        \":full_type_proto_cc\",\n        \":op_def_proto_cc\",\n        \":op_def_util\",\n        \":tensor\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:macros\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\n# TODO(mdan): Move these into a separate directory.\ncc_library(\n    name = \"full_type_util\",\n    srcs = [\n        \"full_type_inference_util.cc\",\n        \"full_type_util.cc\",\n    ],\n    hdrs = [\n        \"full_type_inference_util.h\",\n        \"full_type_util.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n        # Necessary for calling REGISTER_OP with SetTypeConstructor\n        # http://yaqs/4779722181477138432\n        \"//intelligence/brella/analytics/sql/tensorflow:__pkg__\",\n    ],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":full_type_proto_cc\",\n        \":node_def_proto_cc\",\n        \":node_def_util\",\n        \":op_def_builder\",\n        \":op_def_proto_cc\",\n        \":tensor\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:hash\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/platform:statusor\",\n        \"//tensorflow/core/protobuf:error_codes_proto_impl_cc\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"op\",\n    srcs = [\"op.cc\"],\n    hdrs = [\"op.h\"],\n    deps = [\n        \":full_type_proto_cc\",\n        \":full_type_util\",\n        \":op_def_builder\",\n        \":op_def_util\",\n        \"//tensorflow/core/framework/registration\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/gtl:map_util\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:thread_annotations\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"op_requires\",\n    hdrs = [\"op_requires.h\"],\n    deps = [\"//tensorflow/core/platform:macros\"],\n)\n\n# Files whose users still need to be migrated from core:framework to the\n# above targets.\n# TODO(gonnet): Remove these files once targets depending on them have\n# been cleaned up.\nexports_files(\n    srcs = [\n        \"allocator.h\",\n        \"bfloat16.h\",\n        \"bounds_check.h\",\n        \"fake_input.h\",\n        \"function_testlib.h\",\n        \"log_memory.h\",\n        \"numeric_types.h\",\n        \"op_gen_lib.h\",\n        \"reader_base.h\",\n        \"register_types.h\",\n        \"resource_base.h\",\n        \"resource_handle.h\",\n        \"shape_inference_testutil.h\",\n        \"tensor.h\",\n        \"tensor_interface.h\",\n        \"tensor_shape.h\",\n        \"tensor_testutil.h\",\n        \"tensor_types.h\",\n        \"type_index.h\",\n        \"type_traits.h\",\n        \"typed_allocator.h\",\n        \"types.h\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.h\",\n    ],\n)\n\n# Framework tests.\ntf_cc_test(\n    name = \"framework_op_gen_lib_test\",\n    size = \"small\",\n    srcs = [\"op_gen_lib_test.cc\"],\n    deps = [\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/framework:op_gen_lib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"variant_op_copy_test\",\n    size = \"small\",\n    srcs = [\"variant_op_copy_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    tags = tf_cuda_tests_tags(),\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/cc:ops\",\n        \"//tensorflow/cc:scope\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels:array\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_run_handler_util_test\",\n    size = \"small\",\n    srcs = [\"run_handler_util_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_run_handler_test\",\n    size = \"small\",\n    srcs = [\"run_handler_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session_internal\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n        \"//tensorflow/core/kernels:cwise_op\",\n        \"//tensorflow/core/kernels:matmul_op\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/synchronization\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_op_segment_test\",\n    size = \"small\",\n    srcs = [\"op_segment_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:direct_session_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels:cwise_op\",\n        \"//tensorflow/core/kernels:ops_util\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_resource_var_test\",\n    size = \"small\",\n    srcs = [\"resource_var_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ncc_library(\n    name = \"op_kernel_test_base\",\n    testonly = True,\n    hdrs = [\n        \"op_kernel_test_base.h\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:function_ops\",\n        \"//tensorflow/cc:sendrecv_ops\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"higher_level_tests\",\n    size = \"small\",\n    srcs = [\n        \"allocator_test.cc\",\n        \"attr_value_util_test.cc\",\n        \"batch_util_test.cc\",\n        \"bfloat16_test.cc\",\n        \"cancellation_test.cc\",\n        \"common_shape_fns_test.cc\",\n        \"dataset_test.cc\",\n        \"device_base_test.cc\",\n        \"disable_jit_test.cc\",\n        \"full_type_inference_util_test.cc\",\n        \"full_type_util_test.cc\",\n        \"function_test.cc\",\n        \"graph_def_util_test.cc\",\n        \"graph_to_functiondef_test.cc\",\n        \"kernel_def_builder_test.cc\",\n        \"kernel_def_util_test.cc\",\n        \"memory_types_test.cc\",\n        \"model_test.cc\",\n        \"node_def_builder_test.cc\",\n        \"node_def_util_test.cc\",\n        \"node_properties_test.cc\",\n        \"op_compatibility_test.cc\",\n        \"op_def_builder_test.cc\",\n        \"op_def_util_test.cc\",\n        \"op_kernel_test.cc\",\n        \"op_registration_test.cc\",\n        \"partial_tensor_shape_test.cc\",\n        \"rendezvous_test.cc\",\n        \"resource_mgr_test.cc\",\n        \"resource_op_kernel_test.cc\",\n        \"shape_inference_test.cc\",\n        \"shape_inference_testutil_test.cc\",\n        \"tensor_shape_test.cc\",\n        \"tensor_slice_test.cc\",\n        \"tensor_test.cc\",\n        \"tensor_testutil_test.cc\",\n        \"tensor_util_test.cc\",\n        \"tracking_allocator_test.cc\",\n        \"types_test.cc\",\n        \"variant_op_registry_test.cc\",\n        \"variant_test.cc\",\n    ],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = tf_kernel_tests_linkstatic(),\n    visibility = [\n        \"//tensorflow:internal\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n    deps = [\n        \":op_kernel_test_base\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:function_ops\",\n        \"//tensorflow/cc:ops\",\n        \"//tensorflow/cc:scope\",\n        \"//tensorflow/cc:sendrecv_ops\",\n        \"//tensorflow/cc:while_loop\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"//tensorflow/core/kernels:ops_util\",\n        \"//tensorflow/core/lib/monitoring:cell_reader\",\n        \"//tensorflow/core/platform:regexp\",\n        \"//tensorflow/core/platform:status_matchers\",\n        \"//tensorflow/core/profiler/lib:profiler_session\",\n        \"//tensorflow/core/profiler/protobuf:memory_profile_proto_cc\",\n        \"//tensorflow/core/profiler/utils:xplane_schema\",\n        \"//tensorflow/core/profiler/utils:xplane_visitor\",\n        \"//tensorflow/core/util:protos_test_cc\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"pywrap_required_hdrs\",\n    textual_hdrs = [\n        \"op_gen_lib.h\",\n        \"rendezvous.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/client:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n)\n\n# All framewrok protos are self-contained, i.e. they only import other\n# protos from the same package, so we can build the protos here and then\n# link them from core:protos_all without circular dependencies.\n\n# Generate the C++ sources for some of the protos.\ntf_generate_proto_text_sources(\n    name = \"attr_value_proto_text\",\n    srcs = [\n        \"attr_value.proto\",\n        \"resource_handle.proto\",\n        \"tensor.proto\",\n        \"tensor_shape.proto\",\n        \"types.proto\",\n    ],\n    srcs_relative_dir = \"tensorflow/core/framework/\",\n    deps = [\n        \":attr_value_proto_cc\",\n        \":resource_handle_proto_cc\",\n        \":tensor_proto_cc\",\n        \":tensor_shape_proto_cc\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/strings:proto_text_util\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ntf_pyclif_proto_library(\n    name = \"cost_graph_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"cost_graph.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"tensor_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"tensor.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"kernel_def_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"kernel_def.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"node_def_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"node_def.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"function_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"function.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"graph_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"graph.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"step_stats_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"step_stats.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"types_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"types.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"variable_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"variable.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"log_memory_proto\",\n    srcs = [\"log_memory.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":tensor_description_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"versions_proto\",\n    srcs = [\"versions.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"graph_proto\",\n    srcs = [\"graph.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":function_proto\",\n        \":node_def_proto\",\n        \":op_def_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n        \":versions_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"node_def_proto\",\n    srcs = [\"node_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":full_type_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"allocation_description_proto\",\n    srcs = [\"allocation_description.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"tensor_slice_proto\",\n    srcs = [\"tensor_slice.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"tensor_description_proto\",\n    srcs = [\"tensor_description.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"device_attributes_proto\",\n    srcs = [\"device_attributes.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"resource_handle_proto\",\n    srcs = [\"resource_handle.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"step_stats_proto\",\n    srcs = [\"step_stats.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":tensor_description_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"reader_base_proto\",\n    srcs = [\"reader_base.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"kernel_def_proto\",\n    srcs = [\"kernel_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"op_def_proto\",\n    srcs = [\"op_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":full_type_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n)\n\ntf_proto_library(\n    name = \"attr_value_proto\",\n    srcs = [\"attr_value.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n)\n\ntf_proto_library(\n    name = \"full_type_proto\",\n    srcs = [\"full_type.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [],\n)\n\ntf_proto_library(\n    name = \"tensor_proto\",\n    srcs = [\"tensor.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":resource_handle_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"api_def_proto\",\n    srcs = [\"api_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"variable_proto\",\n    srcs = [\"variable.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"graph_transfer_info_proto\",\n    srcs = [\"graph_transfer_info.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"types_proto\",\n    srcs = [\"types.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"cost_graph_proto\",\n    srcs = [\"cost_graph.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"tensor_shape_proto\",\n    srcs = [\"tensor_shape.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"function_proto\",\n    srcs = [\"function.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":node_def_proto\",\n        \":op_def_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\n# copybara:uncomment_begin(google-only)\n# py_proto_library(\n#     name = \"function_proto_py_pb2\",\n#     has_services = 0,\n#     api_version = 2,\n#     deps = [\n#         \":function_proto\",\n#     ],\n# )\n# copybara:uncomment_end\n\ntf_proto_library(\n    name = \"summary_proto\",\n    srcs = [\"summary.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"model_proto\",\n    srcs = [\"model.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"dataset_metadata_proto\",\n    srcs = [\"dataset_metadata.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"dataset_options_proto\",\n    srcs = [\"dataset_options.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":model_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"protos_all\",\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":api_def_proto\",\n        \":attr_value_proto\",\n        \":cost_graph_proto\",\n        \":dataset_metadata_proto\",\n        \":dataset_options_proto\",\n        \":device_attributes_proto\",\n        \":full_type_proto\",\n        \":function_proto\",\n        \":graph_proto\",\n        \":graph_transfer_info_proto\",\n        \":kernel_def_proto\",\n        \":log_memory_proto\",\n        \":model_proto\",\n        \":node_def_proto\",\n        \":op_def_proto\",\n        \":reader_base_proto\",\n        \":resource_handle_proto\",\n        \":step_stats_proto\",\n        \":summary_proto\",\n        \":tensor_description_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":tensor_slice_proto\",\n        \":types_proto\",\n        \":variable_proto\",\n        \":versions_proto\",\n    ],\n    tags = [\n        \"alt_dep=//third_party/tensorflow/core:protos_all\",\n    ],\n)\n", "/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/framework/shape_inference.h\"\n\n#include <cstdint>\n\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/full_type_util.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/framework/op_def.pb.h\"\n#include \"tensorflow/core/framework/partial_tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_shape.pb.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/strings/numbers.h\"\n#include \"tensorflow/core/lib/strings/scanner.h\"\n#include \"tensorflow/core/lib/strings/str_util.h\"\n\nnamespace tensorflow {\nnamespace shape_inference {\n\nconstexpr int32_t InferenceContext::kUnknownRank;\nconstexpr int64_t InferenceContext::kUnknownDim;\n\n// Same as above, but with PartialTensorShape instead of TensorShapeProto\nInferenceContext::InferenceContext(\n    int graph_def_version, const AttrSlice& attrs, const OpDef& op_def,\n    const std::vector<PartialTensorShape>& input_shapes,\n    const std::vector<const Tensor*>& input_tensors,\n    const std::vector<PartialTensorShape>& input_tensors_as_shapes,\n    const std::vector<\n        std::unique_ptr<std::vector<std::pair<PartialTensorShape, DataType>>>>&\n        input_handle_shapes_and_types)\n    : graph_def_version_(graph_def_version), attrs_(attrs) {\n  std::vector<ShapeHandle> input_tensors_as_shape_handles;\n  input_tensors_as_shape_handles.reserve(input_tensors_as_shapes.size());\n  for (const PartialTensorShape& p : input_tensors_as_shapes) {\n    ShapeHandle shape;\n    construction_status_.Update(MakeShapeFromPartialTensorShape(p, &shape));\n    if (!construction_status_.ok()) {\n      return;\n    }\n    input_tensors_as_shape_handles.push_back(shape);\n  }\n  PreInputInit(op_def, input_tensors, input_tensors_as_shape_handles);\n  if (!construction_status_.ok()) return;\n  inputs_.reserve(input_shapes.size());\n  for (const PartialTensorShape& p : input_shapes) {\n    ShapeHandle shape;\n    construction_status_.Update(MakeShapeFromPartialTensorShape(p, &shape));\n    if (!construction_status_.ok()) {\n      return;\n    }\n    inputs_.push_back(shape);\n  }\n  std::vector<std::unique_ptr<std::vector<ShapeAndType>>> handle_data(\n      input_shapes.size());\n  for (int i = 0, end = input_handle_shapes_and_types.size(); i < end; ++i) {\n    const auto& v = input_handle_shapes_and_types[i];\n    if (v == nullptr) {\n      continue;\n    }\n    handle_data[i].reset(new std::vector<ShapeAndType>(v->size()));\n    auto& new_v = *handle_data[i];\n    for (int j = 0, end = v->size(); j < end; ++j) {\n      const auto& p = (*v)[j];\n      construction_status_.Update(\n          MakeShapeFromPartialTensorShape(p.first, &new_v[j].shape));\n      if (!construction_status_.ok()) {\n        return;\n      }\n      new_v[j].dtype = p.second;\n    }\n  }\n  PostInputInit(std::move(handle_data));\n}\n\nInferenceContext::InferenceContext(\n    int graph_def_version, const AttrSlice& attrs, const OpDef& op_def,\n    const std::vector<ShapeHandle>& input_shapes,\n    const std::vector<const Tensor*>& input_tensors,\n    const std::vector<ShapeHandle>& input_tensors_as_shapes,\n    std::vector<std::unique_ptr<std::vector<ShapeAndType>>>\n        input_handle_shapes_and_types)\n    : graph_def_version_(graph_def_version), attrs_(attrs) {\n  PreInputInit(op_def, input_tensors, input_tensors_as_shapes);\n  if (!construction_status_.ok()) return;\n  inputs_ = input_shapes;\n\n  PostInputInit(std::move(input_handle_shapes_and_types));\n}\n\nInferenceContext::~InferenceContext() {}\n\nStatus InferenceContext::Run(\n    const std::function<Status(shape_inference::InferenceContext* c)>& fn) {\n  ForgetMerges();\n  Status s = fn(this);\n  if (!s.ok()) {\n    ForgetMerges();\n    return AttachContext(s);\n  }\n#ifndef NDEBUG\n  for (int i = 0; i < num_outputs(); ++i) {\n    DCHECK(output(i).IsSet()) << i << \" for \" << attrs_.SummarizeNode();\n  }\n#endif  // NDEBUG\n  return s;\n}\n\nStatus InferenceContext::set_output(StringPiece output_name,\n                                    const std::vector<ShapeHandle>& shapes) {\n  auto result = output_name_map_.find(output_name);\n  if (result == output_name_map_.end()) {\n    return errors::InvalidArgument(\"Unknown output name: \", output_name);\n  } else {\n    const int start = result->second.first;\n    const int size = result->second.second - start;\n    const int shapes_size = shapes.size();\n    if (size != shapes_size) {\n      return errors::InvalidArgument(\"Must have exactly \", shapes.size(),\n                                     \" shapes.\");\n    }\n    for (int i = 0; i < shapes_size; ++i) {\n      outputs_[i + start] = shapes[i];\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::input(StringPiece input_name,\n                               std::vector<ShapeHandle>* output) const {\n  const auto result = input_name_map_.find(input_name);\n  if (result == input_name_map_.end()) {\n    return errors::InvalidArgument(\"Unknown input name: \", input_name);\n  } else {\n    output->clear();\n    for (int i = result->second.first; i < result->second.second; ++i) {\n      output->push_back(inputs_[i]);\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::output(StringPiece output_name,\n                                std::vector<ShapeHandle>* output) const {\n  const auto result = output_name_map_.find(output_name);\n  if (result == output_name_map_.end()) {\n    return errors::InvalidArgument(\"Unknown output name: \", output_name);\n  } else {\n    output->clear();\n    for (int i = result->second.first; i < result->second.second; ++i) {\n      output->push_back(outputs_[i]);\n    }\n  }\n  return Status::OK();\n}\n\nvoid InferenceContext::PreInputInit(\n    const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,\n    const std::vector<ShapeHandle>& input_tensors_as_shapes) {\n  // TODO(mdan): This is also done at graph construction. Run only here instead?\n  Status s = full_type::SpecializeType(attrs_, op_def, ret_types_);\n  if (!s.ok()) {\n    construction_status_ = s;\n    return;\n  }\n\n  input_tensors_ = input_tensors;\n  input_tensors_as_shapes_ = input_tensors_as_shapes;\n\n  construction_status_ =\n      NameRangesForNode(attrs_, op_def, &input_name_map_, &output_name_map_);\n  if (!construction_status_.ok()) return;\n\n  int num_outputs = 0;\n  for (const auto& e : output_name_map_) {\n    num_outputs = std::max(num_outputs, e.second.second);\n  }\n  outputs_.assign(num_outputs, nullptr);\n  output_handle_shapes_and_types_.resize(num_outputs);\n}\n\nStatus InferenceContext::ExpandOutputs(int new_output_size) {\n  const int outputs_size = outputs_.size();\n  if (new_output_size < outputs_size) {\n    return errors::InvalidArgument(\"Trying to reduce number of outputs of op.\");\n  }\n  outputs_.resize(new_output_size, nullptr);\n  output_handle_shapes_and_types_.resize(new_output_size);\n  return Status::OK();\n}\n\nvoid InferenceContext::PostInputInit(\n    std::vector<std::unique_ptr<std::vector<ShapeAndType>>> input_handle_data) {\n  int num_inputs_from_node_def = 0;\n  for (const auto& e : input_name_map_) {\n    num_inputs_from_node_def =\n        std::max(num_inputs_from_node_def, e.second.second);\n  }\n\n  // Allow passing empty shapes/dtypes to avoid changing every single test.\n  if (input_handle_data.empty()) {\n    input_handle_shapes_and_types_.resize(inputs_.size());\n  } else {\n    if (input_handle_data.size() != inputs_.size()) {\n      construction_status_ = errors::InvalidArgument(\n          \"Wrong number of handle shapes passed; expected \", inputs_.size(),\n          \" got \", input_handle_data.size());\n      return;\n    }\n    input_handle_shapes_and_types_ = std::move(input_handle_data);\n  }\n  const int inputs_size = inputs_.size();\n  if (inputs_size != num_inputs_from_node_def) {\n    construction_status_ = errors::InvalidArgument(\n        \"Wrong number of inputs passed: \", inputs_.size(), \" while \",\n        num_inputs_from_node_def, \" expected based on NodeDef\");\n    return;\n  }\n\n  CHECK_LE(input_tensors_.size(), inputs_.size());\n  input_tensors_.resize(inputs_.size());\n  requested_input_tensor_.resize(inputs_.size());\n  requested_input_tensor_as_partial_shape_.resize(inputs_.size());\n}\n\nvoid InferenceContext::ShapeHandleToProto(ShapeHandle handle,\n                                          TensorShapeProto* proto) {\n  if (!RankKnown(handle)) {\n    proto->set_unknown_rank(true);\n    return;\n  }\n\n  for (int32_t i = 0; i < Rank(handle); ++i) {\n    DimensionHandle dim = Dim(handle, i);\n    auto* dim_shape = proto->add_dim();\n    if (ValueKnown(dim)) {\n      dim_shape->set_size(Value(dim));\n    } else {\n      dim_shape->set_size(-1);\n    }\n  }\n}\n\nbool InferenceContext::FullyDefined(ShapeHandle s) {\n  if (!RankKnown(s)) return false;\n  for (int i = 0; i < Rank(s); ++i) {\n    if (!ValueKnown(Dim(s, i))) return false;\n  }\n  return true;\n}\n\nDimensionHandle InferenceContext::NumElements(ShapeHandle s) {\n  const auto rank = Rank(s);\n  if (rank == kUnknownRank) return UnknownDim();\n  bool found_unknown = false;\n  int64_t size = 1;\n  for (int i = 0; i < rank; ++i) {\n    int64_t dim_val = Value(Dim(s, i));\n    if (dim_val == kUnknownDim) {\n      found_unknown = true;\n    } else if (dim_val == 0) {\n      return MakeDim(0);\n    } else {\n      size *= dim_val;\n    }\n  }\n  if (found_unknown) {\n    return UnknownDim();\n  } else {\n    return MakeDim(size);\n  }\n}\n\nstring InferenceContext::DebugString(ShapeHandle s) {\n  if (RankKnown(s)) {\n    std::vector<string> vals;\n    for (auto d : s->dims_) vals.push_back(DebugString(d));\n    return strings::StrCat(\"[\", absl::StrJoin(vals, \",\"), \"]\");\n  } else {\n    return \"?\";\n  }\n}\n\nstring InferenceContext::DebugString(DimensionHandle d) {\n  return ValueKnown(d) ? strings::StrCat(Value(d)) : \"?\";\n}\n\nstring InferenceContext::DebugString() const {\n  return strings::StrCat(\"InferenceContext for node: \", attrs_.SummarizeNode());\n}\n\nstring InferenceContext::DebugString(const ShapeAndType& shape_and_type) {\n  return strings::StrCat(DebugString(shape_and_type.shape), \":\",\n                         DataTypeString(shape_and_type.dtype));\n}\n\nstring InferenceContext::DebugString(\n    gtl::ArraySlice<ShapeAndType> shape_and_types) {\n  std::vector<string> pieces;\n  for (const ShapeAndType& s : shape_and_types) {\n    pieces.push_back(DebugString(s));\n  }\n  return strings::StrCat(\"[\", absl::StrJoin(pieces, \",\"), \"]\");\n}\n\nStatus InferenceContext::WithRank(ShapeHandle shape, int64_t rank,\n                                  ShapeHandle* out) {\n  if (rank > kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  const int32_t existing = Rank(shape);\n  if (existing == rank) {\n    *out = shape;\n    return Status::OK();\n  }\n  if (existing == kUnknownRank) {\n    std::vector<DimensionHandle> dims;\n    dims.reserve(rank);\n    for (int i = 0; i < rank; ++i) {\n      dims.push_back(UnknownDim());\n    }\n    ShapeHandle shp = shape_manager_.MakeShape(dims);\n    return Merge(shape, shp, out);\n  }\n  *out = nullptr;\n\n  return errors::InvalidArgument(\"Shape must be rank \", rank, \" but is rank \",\n                                 existing);\n}\n\nStatus InferenceContext::WithRankAtLeast(ShapeHandle shape, int64_t rank,\n                                         ShapeHandle* out) {\n  if (rank > kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  const int32_t existing = Rank(shape);\n  if (existing >= rank || existing == kUnknownRank) {\n    *out = shape;\n    return Status::OK();\n  }\n  *out = nullptr;\n  return errors::InvalidArgument(\"Shape must be at least rank \", rank,\n                                 \" but is rank \", existing);\n}\n\nStatus InferenceContext::WithRankAtMost(ShapeHandle shape, int64_t rank,\n                                        ShapeHandle* out) {\n  if (rank > kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  const int32_t existing = Rank(shape);\n  if (existing <= rank || existing == kUnknownRank) {\n    *out = shape;\n    return Status::OK();\n  }\n  *out = nullptr;\n  return errors::InvalidArgument(\"Shape must be at most rank \", rank,\n                                 \" but is rank \", existing);\n}\n\nStatus InferenceContext::WithValue(DimensionHandle dim, int64_t value,\n                                   DimensionHandle* out) {\n  const int64_t existing = Value(dim);\n  if (existing == value) {\n    *out = dim;\n    return Status::OK();\n  }\n  if (existing == kUnknownDim) {\n    DimensionHandle d = MakeDim(value);\n    return Merge(dim, d, out);\n  }\n  *out = nullptr;\n  return errors::InvalidArgument(\"Dimension must be \", value, \" but is \",\n                                 existing);\n}\n\nvoid InferenceContext::Relax(DimensionHandle d_old, DimensionHandle d_new,\n                             DimensionHandle* out) {\n  if (d_old.SameHandle(d_new)) {\n    *out = d_old;\n  } else if (!ValueKnown(d_old) && !ValueKnown(d_new)) {\n    // The node will be fed by the dimension d_new instead of d_old: any\n    // equality assertion between d_old and other input dimension on this node\n    // may not be true anymore, so forget them all.\n    ForgetMerges();\n    // Return the new shape handle to force the relaxation to propagate to the\n    // fanout of the context.\n    *out = d_new;\n  } else if (!ValueKnown(d_new)) {\n    ForgetMerges();\n    *out = d_new;\n  } else if (Value(d_old) == Value(d_new)) {\n    // Return the old shape handle. This will stop the relaxation in the fanout\n    // of the context.\n    *out = d_old;\n  } else {\n    // Return a new handle that encodes a different unknown dim.\n    ForgetMerges();\n    *out = UnknownDim();\n  }\n}\n\nStatus InferenceContext::Merge(DimensionHandle d0, DimensionHandle d1,\n                               DimensionHandle* out) {\n  if (d0.SameHandle(d1)) {\n    *out = d0;\n    return Status::OK();\n  } else if (!ValueKnown(d1)) {\n    *out = d0;\n    merged_dims_.emplace_back(d0, d1);\n    return Status::OK();\n  } else if (!ValueKnown(d0)) {\n    *out = d1;\n    merged_dims_.emplace_back(d0, d1);\n    return Status::OK();\n  } else if (Value(d0) == Value(d1)) {\n    *out = d0;\n    return Status::OK();\n  } else {\n    *out = nullptr;\n    return errors::InvalidArgument(\"Dimensions must be equal, but are \",\n                                   Value(d0), \" and \", Value(d1));\n  }\n}\n\nStatus InferenceContext::MergePrefix(ShapeHandle s, ShapeHandle prefix,\n                                     ShapeHandle* s_out,\n                                     ShapeHandle* prefix_out) {\n  *s_out = *prefix_out = nullptr;\n  if (!RankKnown(prefix) || !RankKnown(s)) {\n    *s_out = s;\n    *prefix_out = prefix;\n    return Status::OK();\n  }\n  const int32_t rank = Rank(prefix);\n  TF_RETURN_IF_ERROR(WithRankAtLeast(s, rank, &s));\n\n  // Merge the prefix dims and create the new output shapes.\n  const int32_t rank_s = Rank(s);\n  std::vector<DimensionHandle> dims;\n  dims.reserve(std::max(rank, rank_s));\n  dims.resize(rank);\n  for (int i = 0; i < rank; ++i) {\n    TF_RETURN_IF_ERROR(Merge(Dim(s, i), Dim(prefix, i), &dims[i]));\n  }\n  *prefix_out = MakeShape(dims);\n  for (int i = rank; i < rank_s; ++i) dims.push_back(Dim(s, i));\n  *s_out = MakeShape(dims);\n  return Status::OK();\n}\n\nvoid InferenceContext::Relax(ShapeHandle s_old, ShapeHandle s_new,\n                             ShapeHandle* out) {\n  if (s_old.SameHandle(s_new)) {\n    *out = s_old;\n    return;\n  } else if (!RankKnown(s_new) || !s_old.IsSet()) {\n    ForgetMerges();\n    *out = s_new;\n    return;\n  }\n\n  const int32_t rank = Rank(s_old);\n  if (rank != Rank(s_new)) {\n    ForgetMerges();\n    *out = UnknownShape();\n    return;\n  }\n\n  bool return_s_old = true;\n  for (int i = 0; i < rank; ++i) {\n    auto d0 = Dim(s_old, i);\n    auto d1 = Dim(s_new, i);\n    if (d0.SameHandle(d1)) continue;\n\n    auto v0 = Value(d0);\n    auto v1 = Value(d1);\n    if (v0 == kUnknownDim || v1 == kUnknownDim || v0 != v1) {\n      return_s_old = false;\n      break;\n    }\n  }\n  if (return_s_old) {\n    *out = s_old;\n    return;\n  }\n\n  // Relax dims.\n  std::vector<DimensionHandle> dims(rank);\n  for (int i = 0; i < rank; ++i) {\n    Relax(Dim(s_old, i), Dim(s_new, i), &dims[i]);\n  }\n  ForgetMerges();\n  *out = MakeShape(dims);\n}\n\nStatus InferenceContext::Merge(ShapeHandle s0, ShapeHandle s1,\n                               ShapeHandle* out) {\n  if (s0.SameHandle(s1)) {\n    *out = s0;\n    return Status::OK();\n  } else if (!RankKnown(s1)) {\n    *out = s0;\n    merged_shapes_.emplace_back(s0, s1);\n    return Status::OK();\n  } else if (!RankKnown(s0)) {\n    *out = s1;\n    merged_shapes_.emplace_back(s0, s1);\n    return Status::OK();\n  }\n\n  const int32_t rank = Rank(s0);\n  if (rank != Rank(s1)) {\n    *out = nullptr;\n    return errors::InvalidArgument(\"Shapes must be equal rank, but are \", rank,\n                                   \" and \", Rank(s1));\n  }\n\n  bool return_s0 = true;\n  bool return_s1 = true;\n  for (int i = 0; i < rank; ++i) {\n    auto d0 = Dim(s0, i);\n    auto d1 = Dim(s1, i);\n    if (d0.SameHandle(d1)) continue;\n\n    auto v0 = Value(d0);\n    auto v1 = Value(d1);\n    if (v0 == kUnknownDim) {\n      if (v1 != kUnknownDim) {\n        return_s0 = false;\n      }\n    } else if (v1 == kUnknownDim) {\n      return_s1 = false;\n    } else if (v0 != v1) {\n      *out = nullptr;\n      return errors::InvalidArgument(\n          \"Dimension \", i, \" in both shapes must be equal, but are \", Value(d0),\n          \" and \", Value(d1), \". Shapes are \", DebugString(s0), \" and \",\n          DebugString(s1), \".\");\n    }\n  }\n\n  merged_shapes_.emplace_back(s0, s1);\n\n  if (return_s0 || return_s1) {\n    *out = return_s0 ? s0 : s1;\n    return Status::OK();\n  }\n\n  // Merge dims.\n  std::vector<DimensionHandle> dims(rank, nullptr);\n  for (int i = 0; i < rank; ++i) {\n    // Invariant for merge was checked earlier, so CHECK is ok.\n    TF_CHECK_OK(Merge(Dim(s0, i), Dim(s1, i), &dims[i]));\n  }\n\n  Status s = ReturnCreatedShape(dims, out);\n  if (s.ok()) {\n    // Merge the new shape with s0. Since s0 and s1 are merged, this implies\n    // that s1 and out are also merged.\n    merged_shapes_.emplace_back(s0, *out);\n  }\n  return s;\n}\n\nStatus InferenceContext::Subshape(ShapeHandle s, int64_t start,\n                                  ShapeHandle* out) {\n  return Subshape(s, start, std::numeric_limits<int64_t>::max() /* end */, out);\n}\n\nStatus InferenceContext::Subshape(ShapeHandle s, int64_t start, int64_t end,\n                                  ShapeHandle* out) {\n  return Subshape(s, start, end, 1 /* stride */, out);\n}\n\nStatus InferenceContext::Subshape(ShapeHandle s, int64_t start, int64_t end,\n                                  int64_t stride, ShapeHandle* out) {\n  int64_t start_in = start;\n  int64_t end_in = end;\n\n  const int32_t rank = Rank(s);\n  if (start == 0 && stride == 1 &&\n      ((RankKnown(s) && end >= rank) ||\n       end == std::numeric_limits<int64_t>::max())) {\n    *out = s;\n    return Status::OK();\n  }\n  if (!RankKnown(s)) {\n    return ReturnUnknownShape(out);\n  }\n\n  if (start > rank) start = rank;\n  if (end > rank) end = rank;\n\n  if (stride < 0 && start == rank) --start;\n\n  if (start < 0) {\n    start = rank + start;\n    if (start < 0) {\n      *out = nullptr;\n      return errors::InvalidArgument(\"Subshape start out of bounds: \", start_in,\n                                     \", for shape with rank \", rank);\n    }\n  }\n\n  if (end < 0) {\n    end = rank + end;\n    if (end < 0) {\n      *out = nullptr;\n      return errors::InvalidArgument(\"Subshape end out of bounds: \", end_in,\n                                     \", for shape with rank \", rank);\n    }\n  }\n  if (stride > 0 && start > end) {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Subshape must have computed start <= end, but is \", start, \" and \",\n        end, \" (computed from start \", start_in, \" and end \", end_in,\n        \" over shape with rank \", rank, \")\");\n  } else if (stride < 0 && start < end) {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Subshape must have computed start >= end since stride is negative, \"\n        \"but is \",\n        start, \" and \", end, \" (computed from start \", start_in, \" and end \",\n        end_in, \" over shape with rank \", rank, \" and stride\", stride, \")\");\n  }\n\n  std::vector<DimensionHandle> dims;\n  for (int i = start; stride > 0 ? i < end : i > end; i += stride) {\n    dims.push_back(Dim(s, i));\n  }\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::Concatenate(ShapeHandle s1, ShapeHandle s2,\n                                     ShapeHandle* out) {\n  if (!RankKnown(s1) || !RankKnown(s2)) {\n    return ReturnUnknownShape(out);\n  }\n  const int32_t s1_rank = Rank(s1);\n  const int32_t s2_rank = Rank(s2);\n  const int32_t rank = s1_rank + s2_rank;\n  std::vector<DimensionHandle> dims;\n  dims.reserve(rank);\n  for (int i = 0; i < s1_rank; ++i) dims.push_back(Dim(s1, i));\n  for (int i = 0; i < s2_rank; ++i) dims.push_back(Dim(s2, i));\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::ReplaceDim(ShapeHandle s, int64_t dim_index_in,\n                                    DimensionHandle new_dim, ShapeHandle* out) {\n  if (!RankKnown(s)) {\n    return ReturnUnknownShape(out);\n  }\n  int64_t dim_index = dim_index_in;\n  if (dim_index < 0) {\n    dim_index = s->dims_.size() + dim_index;\n  }\n  if (!FastBoundsCheck(dim_index, s->dims_.size())) {\n    *out = nullptr;\n    return errors::InvalidArgument(\"Out of range dim_index \", dim_index_in,\n                                   \" for shape with \", s->dims_.size(),\n                                   \" dimensions\");\n  }\n  std::vector<DimensionHandle> dims(s->dims_);\n  dims[dim_index] = new_dim;\n  return ReturnCreatedShape(dims, out);\n}\n\nShapeHandle InferenceContext::MakeShape(\n    const std::vector<DimensionHandle>& dims) {\n  return shape_manager_.MakeShape(dims);\n}\n\nShapeHandle InferenceContext::MakeShape(\n    std::initializer_list<DimensionOrConstant> dims) {\n  std::vector<DimensionHandle> dims_actual;\n  dims_actual.reserve(dims.size());\n  for (const DimensionOrConstant& d : dims) {\n    dims_actual.push_back(MakeDim(d));\n  }\n\n  return shape_manager_.MakeShape(dims_actual);\n}\n\nShapeHandle InferenceContext::UnknownShape() {\n  return shape_manager_.UnknownShape();\n}\n\nShapeHandle InferenceContext::UnknownShapeOfRank(int64_t rank) {\n  CHECK_LE(rank, kint32max) << \"rank must be less than kint32max\";\n  if (rank == kUnknownRank) {\n    return UnknownShape();\n  }\n  CHECK_GE(rank, 0) << \"rank must not be negative\";\n  std::vector<DimensionHandle> dims(rank);\n  for (int32_t i = 0; i < rank; ++i) {\n    dims[i] = UnknownDim();\n  }\n  return MakeShape(dims);\n}\n\nShapeHandle InferenceContext::Scalar() { return MakeShape({}); }\n\nShapeHandle InferenceContext::Vector(DimensionOrConstant dim) {\n  return MakeShape({dim});\n}\n\nShapeHandle InferenceContext::Matrix(DimensionOrConstant dim1,\n                                     DimensionOrConstant dim2) {\n  return MakeShape({dim1, dim2});\n}\n\nStatus InferenceContext::MakeShapeFromShapeTensorTreatScalarAsUnknownShape(\n    int input_idx, ShapeHandle* out) {\n  ShapeHandle input_shape;\n  TF_RETURN_IF_ERROR(WithRankAtMost(input(input_idx), 1, &input_shape));\n\n  request_input_tensor_as_partial_shape(input_idx);\n  const int input_tensors_as_shapes_size = input_tensors_as_shapes_.size();\n  if (input_idx < input_tensors_as_shapes_size &&\n      input_tensors_as_shapes_[input_idx].IsSet() &&\n      RankKnown(input_tensors_as_shapes_[input_idx])) {\n    *out = input_tensors_as_shapes_[input_idx];\n    return Status::OK();\n  }\n\n  return InternalMakeShapeFromTensor(\n      true /* treat_unknown_scalar_tensor_as_unknown_shape */,\n      input_tensor(input_idx), input_shape, out);\n}\n\nStatus InferenceContext::MakeShapeFromShapeTensor(int input_idx,\n                                                  ShapeHandle* out) {\n  ShapeHandle input_shape;\n  TF_RETURN_IF_ERROR(WithRank(input(input_idx), 1, &input_shape));\n\n  request_input_tensor_as_partial_shape(input_idx);\n  const int input_tensors_as_shapes_size = input_tensors_as_shapes_.size();\n  if (input_idx < input_tensors_as_shapes_size &&\n      input_tensors_as_shapes_[input_idx].IsSet() &&\n      RankKnown(input_tensors_as_shapes_[input_idx])) {\n    *out = input_tensors_as_shapes_[input_idx];\n    return Status::OK();\n  }\n\n  return InternalMakeShapeFromTensor(\n      false /* treat_unknown_scalar_tensor_as_unknown_shape */,\n      input_tensor(input_idx), input_shape, out);\n}\n\nStatus InferenceContext::MakeShapeFromTensor(const Tensor* t,\n                                             ShapeHandle tensor_shape,\n                                             ShapeHandle* out) {\n  return InternalMakeShapeFromTensor(\n      false /* treat_unknown_scalar_tensor_as_unknown_shape */, t, tensor_shape,\n      out);\n}\n\nStatus InferenceContext::InternalMakeShapeFromTensor(\n    bool treat_unknown_scalar_tensor_as_unknown_shape, const Tensor* t,\n    ShapeHandle tensor_shape, ShapeHandle* out) {\n  // Only callers who have set\n  if (!treat_unknown_scalar_tensor_as_unknown_shape) {\n    TF_RETURN_IF_ERROR(WithRank(tensor_shape, 1, &tensor_shape));\n  }\n  if (t == nullptr) {\n    // This is guarded by the check above.\n    if (Rank(tensor_shape) == 0) {\n      return ReturnUnknownShape(out);\n    }\n    // Shape tensor is not known, but if the shape of the shape tensor is then\n    // the right number of unknown dims can be created.\n    DimensionHandle shape_dim = Dim(tensor_shape, 0);\n    if (!ValueKnown(shape_dim)) {\n      return ReturnUnknownShape(out);\n    }\n    const auto num_dims = Value(shape_dim);\n    // TODO(mihaimaruseac): Should be `TensorShape::MaxDimensions()` as we are\n    // not able to materialize shapes with more than this number of dimensions\n    // but then shape inference would fail for operations such as\n    // `tf.range`/`tf.ones`, etc. where the shape is not really materialized,\n    // only used during the inference. Hence, just prevent doing a `reserve`\n    // with a very large argument.\n    const int64_t max_dimensions = 1 << 25;\n    if (num_dims >= max_dimensions) {\n      return errors::Internal(\n          \"Cannot create a tensor with \", num_dims,\n          \" dimensions, as these would be more than maximum of \",\n          max_dimensions);\n    }\n    std::vector<DimensionHandle> dims;\n    dims.reserve(num_dims);\n    for (int i = 0; i < num_dims; i++) dims.push_back(UnknownDim());\n    return ReturnCreatedShape(dims, out);\n  }\n\n  if (t->shape().dims() == 0) {\n    if (t->dtype() == DataType::DT_INT32) {\n      auto flat_t = t->scalar<int32>();\n      if (flat_t() != -1) {\n        *out = nullptr;\n        return errors::InvalidArgument(\n            \"Input tensor must be rank 1, or if its rank 0 it must have value \"\n            \"-1 \"\n            \"(representing an unknown shape).  Saw value: \",\n            flat_t());\n      }\n      return ReturnUnknownShape(out);\n    } else if (t->dtype() == DataType::DT_INT64) {\n      auto flat_t = t->scalar<int64_t>();\n      if (flat_t() != -1) {\n        *out = nullptr;\n        return errors::InvalidArgument(\n            \"Input tensor must be rank 1, or if its rank 0 it must have value \"\n            \"-1 \"\n            \"(representing an unknown shape).  Saw value: \",\n            flat_t());\n      }\n      return ReturnUnknownShape(out);\n    } else {\n      *out = nullptr;\n      return errors::InvalidArgument(\n          \"Input tensor must be int32 or int64, but was \",\n          DataTypeString(t->dtype()));\n    }\n  }\n\n  if (t->shape().dims() != 1) {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Input tensor must be rank 1, but was rank \", t->shape().dims(), \".\",\n        ((t->shape().dims() == 0)\n             ? \"If it is rank 0 rank 0 it must have statically known value -1 \"\n               \"(representing an unknown shape). \"\n             : \" \"),\n        \"Saw tensor shape \", t->shape().DebugString());\n  }\n  std::vector<DimensionHandle> dims;\n  if (t->dtype() == DataType::DT_INT32) {\n    auto flat_t = t->flat<int32>();\n    for (int i = 0; i < flat_t.size(); ++i) {\n      const int32_t val = flat_t(i);\n      if (val < -1) {\n        return errors::InvalidArgument(\n            \"Invalid value in tensor used for shape: \", val);\n      }\n      // -1 will become an unknown dim.\n      dims.push_back(MakeDim(val));\n    }\n  } else if (t->dtype() == DataType::DT_INT64) {\n    auto flat_t = t->flat<int64_t>();\n    for (int i = 0; i < flat_t.size(); ++i) {\n      const int64_t val = flat_t(i);\n      if (val < -1) {\n        return errors::InvalidArgument(\n            \"Invalid value in tensor used for shape: \", val);\n      }\n      // -1 will become an unknown dim.\n      dims.push_back(MakeDim(val));\n    }\n  } else {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Input tensor must be int32 or int64, but was \",\n        DataTypeString(t->dtype()));\n  }\n\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::MakeShapeFromPartialTensorShape(\n    const PartialTensorShape& partial_shape, ShapeHandle* out) {\n  *out = nullptr;\n  if (partial_shape.dims() == -1) {\n    return ReturnUnknownShape(out);\n  }\n  const int num_dims = partial_shape.dims();\n  std::vector<DimensionHandle> dims(num_dims);\n  for (int i = 0; i < num_dims; ++i) {\n    // -1 is unknown in PartialTensorShape and in InferenceContext, so this size\n    // can be passed directly to MakeDim.\n    dims[i] = MakeDim(partial_shape.dim_size(i));\n  }\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::MakeShapeFromTensorShape(const TensorShape& shape,\n                                                  ShapeHandle* out) {\n  return MakeShapeFromPartialTensorShape(PartialTensorShape(shape.dim_sizes()),\n                                         out);\n}\n\nStatusOr<ShapeHandle> InferenceContext::MakeShapeFromShapeTensor(\n    const TensorShape& shape) {\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(MakeShapeFromTensorShape(shape, &out));\n  return out;\n}\n\nTensorShapeProto InferenceContext::ShapeHandleToProto(ShapeHandle handle) {\n  TensorShapeProto out;\n  ShapeHandleToProto(handle, &out);\n  return out;\n}\n\nStatus InferenceContext::MakeShapeFromShapeProto(const TensorShapeProto& proto,\n                                                 ShapeHandle* out) {\n  *out = nullptr;\n  TF_RETURN_IF_ERROR(PartialTensorShape::IsValidShape(proto));\n  PartialTensorShape partial_shape(proto);\n  return MakeShapeFromPartialTensorShape(partial_shape, out);\n}\n\nStatus InferenceContext::GetScalarFromTensor(const Tensor* t, int64_t* val) {\n  // Caller must ensure that <t> is not NULL.\n  const int rank = t->dims();\n  if (rank != 0) {\n    return errors::InvalidArgument(\"Input must be scalar but has rank \", rank);\n  }\n\n  if (t->dtype() == DataType::DT_INT32) {\n    *val = t->scalar<int32>()();\n    return Status::OK();\n  } else if (t->dtype() == DataType::DT_INT64) {\n    *val = t->scalar<int64_t>()();\n    return Status::OK();\n  } else {\n    return errors::InvalidArgument(\"Scalar input must be int32 or int64.\");\n  }\n}\n\nStatus InferenceContext::GetScalarFromTensor(const Tensor* t, int64_t idx,\n                                             int64_t* val) {\n  // Caller must ensure that <t> is not NULL.\n  const int rank = t->dims();\n  if (rank != 1) {\n    return errors::InvalidArgument(\"Input must be 1D but has rank \", rank);\n  }\n\n  if (t->dtype() == DataType::DT_INT32) {\n    auto flat_t = t->flat<int32>();\n    if (idx < 0 || idx >= flat_t.size()) {\n      return errors::InvalidArgument(\"Invalid index \", idx,\n                                     \" for Tensor of size \", flat_t.size());\n    }\n    *val = flat_t(idx);\n    return Status::OK();\n  } else if (t->dtype() == DataType::DT_INT64) {\n    auto flat_t = t->flat<int64_t>();\n    if (idx < 0 || idx >= flat_t.size()) {\n      return errors::InvalidArgument(\"Invalid index \", idx,\n                                     \" for Tensor of size \", flat_t.size());\n    }\n    *val = flat_t(idx);\n    return Status::OK();\n  } else {\n    return errors::InvalidArgument(\"Tensor input must be int32 or int64.\");\n  }\n}\n\n// Returns a new dimension whose value is given by a scalar input tensor.\nStatus InferenceContext::MakeDimForScalarInput(int idx, DimensionHandle* out) {\n  int64_t val;\n  const Tensor* t = input_tensor(idx);\n  if (t == nullptr) {\n    *out = UnknownDim();\n    return Status::OK();\n  }\n  TF_RETURN_IF_ERROR(GetScalarFromTensor(t, &val));\n  if (val < 0) {\n    return errors::InvalidArgument(\"Dimension size, given by scalar input \",\n                                   idx, \", must be non-negative but is \", val);\n  }\n  *out = MakeDim(val);\n  return Status::OK();\n}\n\nStatus InferenceContext::MakeDimForScalarInputWithNegativeIndexing(\n    int idx, int input_rank, DimensionHandle* out) {\n  int64_t val;\n  const Tensor* t = input_tensor(idx);\n  if (t == nullptr) {\n    *out = UnknownDim();\n    return Status::OK();\n  }\n  TF_RETURN_IF_ERROR(GetScalarFromTensor(t, &val));\n  if (val < 0) {\n    if (input_rank < 0) {\n      *out = UnknownDim();\n      return Status::OK();\n    } else if (val + input_rank < 0) {\n      return errors::InvalidArgument(\"Dimension size, given by scalar input \",\n                                     val, \" must be in range [-\", input_rank,\n                                     \", \", input_rank, \")\");\n    } else {\n      val += input_rank;\n    }\n  } else if (input_rank >= 0 && val >= input_rank) {\n    return errors::InvalidArgument(\"Dimension size, given by scalar input \",\n                                   val, \" must be in range [-\", input_rank,\n                                   \", \", input_rank, \")\");\n  }\n  *out = MakeDim(val);\n  return Status::OK();\n}\n\nStatus InferenceContext::Divide(DimensionHandle dividend,\n                                DimensionOrConstant divisor,\n                                bool evenly_divisible, DimensionHandle* out) {\n  const int64_t divisor_value = Value(divisor);\n  if (divisor_value == 1) {\n    *out = dividend;\n  } else if (!ValueKnown(dividend) ||\n             (divisor.dim.IsSet() && !ValueKnown(divisor.dim))) {\n    *out = UnknownDim();\n  } else {\n    const int64_t v = Value(dividend);\n    if (divisor_value <= 0) {\n      return errors::InvalidArgument(\"Divisor must be positive but is \",\n                                     divisor_value);\n    }\n    if (evenly_divisible && (v % divisor_value) != 0) {\n      return errors::InvalidArgument(\n          \"Dimension size must be evenly divisible by \", divisor_value,\n          \" but is \", v);\n    }\n    *out = MakeDim(v / divisor_value);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Add(DimensionHandle first, DimensionOrConstant second,\n                             DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  // Special cases.\n  if (first_value == 0) {\n    *out = MakeDim(second);\n  } else if (second_value == 0) {\n    *out = first;\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    // Invariant: Both values are known and positive. Still in run-time we can\n    // get pair of values which cannot be store in output. Check below will\n    // report error. We still need to avoid undefined behavior of signed\n    // overflow and use unsigned addition.\n    const int64_t sum = static_cast<uint64>(first_value) + second_value;\n    if (sum < 0) {\n      return errors::InvalidArgument(\"Dimension size overflow from adding \",\n                                     first_value, \" and \", second_value);\n    }\n    *out = MakeDim(sum);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Subtract(DimensionHandle first,\n                                  DimensionOrConstant second,\n                                  DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  // Special cases.\n  if (second_value == 0) {\n    *out = first;\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    // Invariant: Both values are known, first_value is non-negative, and\n    // second_value is positive.\n    if (first_value < second_value) {\n      return errors::InvalidArgument(\n          \"Negative dimension size caused by subtracting \", second_value,\n          \" from \", first_value);\n    }\n    *out = MakeDim(first_value - second_value);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Multiply(DimensionHandle first,\n                                  DimensionOrConstant second,\n                                  DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  // Special cases.\n  if (first_value == 0) {\n    *out = first;\n  } else if (second_value == 0) {\n    *out = MakeDim(second);\n  } else if (first_value == 1) {\n    *out = MakeDim(second);\n  } else if (second_value == 1) {\n    *out = first;\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    // Invariant: Both values are known and greater than 1.\n    const int64_t product = first_value * second_value;\n    if (product < 0) {\n      return errors::InvalidArgument(\n          \"Negative dimension size caused by overflow when multiplying \",\n          first_value, \" and \", second_value);\n    }\n    *out = MakeDim(product);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Min(DimensionHandle first, DimensionOrConstant second,\n                             DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  if (first_value == 0) {\n    *out = first;\n  } else if (second_value == 0) {\n    *out = MakeDim(second);\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    if (first_value <= second_value) {\n      *out = first;\n    } else {\n      *out = MakeDim(second);\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Max(DimensionHandle first, DimensionOrConstant second,\n                             DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    if (first_value >= second_value) {\n      *out = first;\n    } else {\n      *out = MakeDim(second);\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::AttachContext(const Status& status) {\n  std::vector<string> input_shapes;\n  input_shapes.reserve(inputs_.size());\n  for (const ShapeHandle& input_shape : inputs_) {\n    input_shapes.emplace_back(DebugString(input_shape));\n  }\n\n  // Add information about the input tensors and partial tensor shapes used.\n  std::vector<string> input_from_tensors_str;\n  std::vector<string> input_from_tensors_as_shape_str;\n  input_from_tensors_as_shape_str.reserve(inputs_.size());\n  for (int i = 0, end = inputs_.size(); i < end; ++i) {\n    const int input_tensors_as_shapes_size = input_tensors_as_shapes_.size();\n    const int input_tensors_size = input_tensors_.size();\n    if (requested_input_tensor_as_partial_shape_[i] &&\n        i < input_tensors_as_shapes_size &&\n        input_tensors_as_shapes_[i].IsSet() &&\n        RankKnown(input_tensors_as_shapes_[i])) {\n      input_from_tensors_as_shape_str.push_back(strings::StrCat(\n          \"input[\", i, \"] = \", DebugString(input_tensors_as_shapes_[i])));\n    } else if (requested_input_tensor_[i] && i < input_tensors_size &&\n               input_tensors_[i] != nullptr) {\n      input_from_tensors_str.push_back(strings::StrCat(\n          \"input[\", i, \"] = <\",\n          input_tensors_[i]->SummarizeValue(256 /* max_values */), \">\"));\n    }\n  }\n\n  string error_context = strings::StrCat(\n      \" for '\", attrs_.SummarizeNode(),\n      \"' with input shapes: \", absl::StrJoin(input_shapes, \", \"));\n  if (!input_from_tensors_str.empty()) {\n    strings::StrAppend(&error_context, \" and with computed input tensors: \",\n                       absl::StrJoin(input_from_tensors_str, \", \"));\n  }\n  if (!input_from_tensors_as_shape_str.empty()) {\n    strings::StrAppend(&error_context,\n                       \" and with input tensors computed as partial shapes: \",\n                       absl::StrJoin(input_from_tensors_as_shape_str, \",\"));\n  }\n\n  strings::StrAppend(&error_context, \".\");\n  return errors::CreateWithUpdatedMessage(\n      status, strings::StrCat(status.error_message(), error_context));\n}\n\nbool InferenceContext::MergeHandleShapesAndTypes(\n    const std::vector<ShapeAndType>& shapes_and_types,\n    std::vector<ShapeAndType>* to_update) {\n  if (shapes_and_types.size() != to_update->size()) {\n    return false;\n  }\n  std::vector<ShapeAndType> new_values(shapes_and_types.size());\n  bool refined = false;\n  for (int i = 0, end = shapes_and_types.size(); i < end; ++i) {\n    const ShapeAndType& existing = (*to_update)[i];\n    if (shapes_and_types[i].dtype == existing.dtype) {\n      new_values[i].dtype = existing.dtype;\n    } else {\n      if (existing.dtype != DT_INVALID) {\n        return false;\n      } else {\n        new_values[i].dtype = shapes_and_types[i].dtype;\n        refined = true;\n      }\n    }\n    if (!Merge(existing.shape, shapes_and_types[i].shape, &new_values[i].shape)\n             .ok()) {\n      // merge failed, ignore the new value.\n      new_values[i].shape = existing.shape;\n    }\n    if (!existing.shape.SameHandle(new_values[i].shape)) {\n      refined = true;\n    }\n  }\n  if (!refined) {\n    return false;\n  }\n  for (int i = 0, end = new_values.size(); i < end; ++i) {\n    (*to_update)[i] = new_values[i];\n  }\n  return true;\n}\n\nbool InferenceContext::MergeOutputHandleShapesAndTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (output_handle_shapes_and_types_[idx] == nullptr) {\n    output_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return MergeHandleShapesAndTypes(shapes_and_types,\n                                   output_handle_shapes_and_types_[idx].get());\n}\n\nbool InferenceContext::MergeInputHandleShapesAndTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (input_handle_shapes_and_types_[idx] == nullptr) {\n    input_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return MergeHandleShapesAndTypes(shapes_and_types,\n                                   input_handle_shapes_and_types_[idx].get());\n}\n\nbool InferenceContext::RelaxHandleShapesAndMergeTypes(\n    const std::vector<ShapeAndType>& shapes_and_types,\n    std::vector<ShapeAndType>* to_update) {\n  if (shapes_and_types.size() != to_update->size()) {\n    return false;\n  }\n  std::vector<ShapeAndType> new_values(shapes_and_types.size());\n  for (int i = 0, end = shapes_and_types.size(); i < end; ++i) {\n    const ShapeAndType& existing = (*to_update)[i];\n    if (shapes_and_types[i].dtype == existing.dtype) {\n      new_values[i].dtype = existing.dtype;\n    } else {\n      if (existing.dtype != DT_INVALID) {\n        return false;\n      } else {\n        new_values[i].dtype = shapes_and_types[i].dtype;\n      }\n    }\n    Relax(existing.shape, shapes_and_types[i].shape, &new_values[i].shape);\n  }\n  to_update->swap(new_values);\n  return true;\n}\n\nbool InferenceContext::RelaxOutputHandleShapesAndMergeTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (output_handle_shapes_and_types_[idx] == nullptr) {\n    output_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return RelaxHandleShapesAndMergeTypes(\n      shapes_and_types, output_handle_shapes_and_types_[idx].get());\n}\n\nbool InferenceContext::RelaxInputHandleShapesAndMergeTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (input_handle_shapes_and_types_[idx] == nullptr) {\n    input_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return RelaxHandleShapesAndMergeTypes(\n      shapes_and_types, input_handle_shapes_and_types_[idx].get());\n}\n\n// -----------------------------------------------------------------------------\n// ShapeManager\n// -----------------------------------------------------------------------------\nInferenceContext::ShapeManager::ShapeManager() {}\nInferenceContext::ShapeManager::~ShapeManager() {\n  for (auto* s : all_shapes_) delete s;\n  for (auto* d : all_dims_) delete d;\n}\n\nShapeHandle InferenceContext::ShapeManager::MakeShape(\n    const std::vector<DimensionHandle>& dims) {\n  all_shapes_.push_back(new Shape(dims));\n  return all_shapes_.back();\n}\n\nShapeHandle InferenceContext::ShapeManager::UnknownShape() {\n  all_shapes_.push_back(new Shape());\n  return all_shapes_.back();\n}\n\n}  // namespace shape_inference\n}  // namespace tensorflow\n", "load(\"//tensorflow/core/platform:rules_cc.bzl\", \"cc_library\")\nload(\"@bazel_skylib//rules:build_test.bzl\", \"build_test\")\nload(\n    \"//tensorflow:tensorflow.bzl\",\n    \"if_android\",\n    \"if_cuda_or_rocm\",\n    \"if_google\",\n    \"if_mobile\",\n    \"if_not_windows\",\n    \"if_oss\",\n    \"tf_cc_binary\",\n    \"tf_cc_test\",\n    \"tf_cc_tests\",\n    \"tf_copts\",\n    \"tf_cuda_library\",\n    \"tf_opts_nortti_if_lite_protos\",\n)\nload(\n    \"//tensorflow/core/kernels/mlir_generated:build_defs.bzl\",\n    \"if_mlir_generated_cpu_kernels_enabled\",\n    \"if_mlir_generated_experimental_kernels_enabled\",\n    \"if_mlir_generated_gpu_kernels_enabled\",\n)\nload(\n    \"//tensorflow/core/platform:build_config.bzl\",\n    \"tf_fingerprint_deps\",\n    \"tf_kernel_tests_linkstatic\",\n)\nload(\n    \"//third_party/mkl:build_defs.bzl\",\n    \"if_mkl\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"cc_header_only_library\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"get_compatible_with_portable\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_kernel_library\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"if_nccl\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_disable_ptxas_warning_flags\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_cc_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_only_cc_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_cc_tests\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"filegroup\")\nload(\n    \"//tensorflow/core/platform:build_config_root.bzl\",\n    \"tf_cuda_tests_tags\",\n)\nload(\n    \"//third_party/mkl:build_defs.bzl\",\n    \"mkl_deps\",\n)\nload(\"@local_config_cuda//cuda:build_defs.bzl\", \"if_cuda\")\nload(\n    \"@local_config_rocm//rocm:build_defs.bzl\",\n    \"if_rocm\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_shared_library\")\n\n# Description:\n# Op kernel implementations for TensorFlow.\n#\n# Note: Any test that uses GPU support and which we would like to\n# benchmark should be linked statically so that it can be executed\n# from a py_binary or cuda_py_test test logger.  For such a test,\n# append \"_gpu\" to the test name to invoke the GPU benchmarks.  Example:\n#\n#   # for CPU tests\n#   $ bazel test --config opt //third_party/tensorflow/core/kernels:my_op_test\n#   # for GPU benchmarks\n#   $ bazel run --config opt --config=cuda //third_party/tensorflow/core/kernels:my_op_test_gpu -- --benchmark_filter=..\n#\npackage(\n    default_visibility = [\"//visibility:public\"],\n    features = if_google(\n        [\n            \"-layering_check\",\n            \"-parse_headers\",\n        ],\n        [\"-layering_check\"],\n    ),\n    licenses = [\"notice\"],\n)\n\npackage_group(\n    name = \"friends\",\n    packages = [\n        \"//tensorflow/...\",\n        \"//tensorflow_text/...\",\n    ],\n)\n\npackage_group(\n    name = \"optimizer_helper_friends\",\n    packages = [\n        \"//learning/brain/research/lather/...\",\n        \"//learning/clair/alise/...\",\n    ],\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_xsmm=1\" to your build command to use libxsmm for\n    # sparse matrix multiplications. You will also need appropriate -mavx*\n    # options, as required by specific op you use.\n    name = \"xsmm\",\n    define_values = {\n        \"tensorflow_xsmm\": \"1\",\n    },\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_xsmm_convolutions=1\" to your build command to\n    # use libxsmm for forward convolutions. You will also need appropriate\n    # -mavx* # options, as required by specific op you use.\n    name = \"xsmm_convolutions\",\n    define_values = {\n        \"tensorflow_xsmm_convolutions\": \"1\",\n    },\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_xsmm_convolutions=1 --define\n    # tensorflow_xsmm_backward_convolutions=1\" to your build command to use libxsmm for\n    # backward convolutions (and possibly more in the future). You will also\n    # need appropriate -mavx* options, as required by specific op you use.\n    name = \"xsmm_backward_convolutions\",\n    define_values = {\n        \"tensorflow_xsmm_backward_convolutions\": \"1\",\n    },\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_mkldnn_contraction_kernel=0\" to your build command to disable mkldnn\n    # sgemm in Eigen tensor contractions (matrix multiplications and convolutions). The mkldnn\n    # kernels are generated at runtime and use avx/avx2/fma/avx512 based on cpu status registers\n    # (https://en.wikipedia.org/wiki/CPUID). Default Eigen contraction kernel is\n    # Eigen::internal::gebp_kernel (general block-panel kernel).\n    name = \"no_mkldnn_contraction_kernel\",\n    define_values = {\n        \"tensorflow_mkldnn_contraction_kernel\": \"0\",\n    },\n)\n\n# Public support libraries ----------------------------------------------------\n\ncc_library(\n    name = \"assign_op\",\n    hdrs = [\"assign_op.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"strided_slice_op\",\n    srcs = [\n        \"strided_slice_op.cc\",\n        \"strided_slice_op_inst_0.cc\",\n        \"strided_slice_op_inst_1.cc\",\n        \"strided_slice_op_inst_2.cc\",\n        \"strided_slice_op_inst_3.cc\",\n        \"strided_slice_op_inst_4.cc\",\n        \"strided_slice_op_inst_5.cc\",\n        \"strided_slice_op_inst_6.cc\",\n        \"strided_slice_op_inst_7.cc\",\n        \"strided_slice_op_inst_8.cc\",\n    ],\n    hdrs = [\n        \"slice_op.h\",\n        \"strided_slice_op.h\",\n        \"strided_slice_op_impl.h\",\n    ],\n    gpu_srcs = [\n        \"slice_op.h\",\n        \"strided_slice_op.h\",\n        \"strided_slice_op_impl.h\",\n        \"strided_slice_op_gpu_impl.h\",\n        \"strided_slice_op_gpu_int.cu.cc\",\n        \"strided_slice_op_gpu_complex.cu.cc\",\n        \"strided_slice_op_gpu_bool.cu.cc\",\n        \"strided_slice_op_gpu_number_types.cu.cc\",\n    ],\n    deps = [\n        \":dense_update_functor\",\n        \":inplace_ops\",\n        \":ops_util\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"clustering_ops\",\n    prefix = \"clustering_ops\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_headers_lib\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"clustering_ops_test\",\n    srcs = [\"clustering_ops_test.cc\"],\n    deps = [\n        \":clustering_ops\",\n        \"//tensorflow/core:clustering_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"collective_ops\",\n    srcs = if_nccl([\n        \"collective_nccl.h\",\n        \"collective_nccl.cc\",\n        \"collective_nccl_broadcaster.h\",\n        \"collective_nccl_broadcaster.cc\",\n        \"collective_nccl_gatherer.h\",\n        \"collective_nccl_gatherer.cc\",\n        \"collective_nccl_reducer.h\",\n        \"collective_nccl_reducer.cc\",\n    ]),\n    prefix = \"collective_ops\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ] + if_nccl([\n        \"//tensorflow/core/nccl:collective_communicator\",\n    ]),\n)\n\ntf_cuda_cc_test(\n    name = \"collective_nccl_test\",\n    size = \"small\",\n    srcs = [\"collective_nccl_test.cc\"],\n    tags = tf_cuda_tests_tags() + [\n        \"guitar\",\n        \"multi_gpu\",\n        \"no_oss\",\n    ],\n    deps = [\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/nccl:collective_communicator\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"concat_lib\",\n    srcs = [\n        \"concat_lib_cpu.cc\",\n        \"concat_lib_gpu.cc\",\n    ],\n    hdrs = [\n        \"concat_lib.h\",\n        \"concat_lib_cpu.h\",\n    ],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"concat_lib_gpu_impl.cu.cc\",\n        \"concat_lib.h\",\n        \"concat_lib_gpu.h\",\n        \"gpu_device_array.h\",\n        \"gpu_device_array_gpu.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 0,\n)\n\ncc_library(\n    name = \"concat_lib_hdrs\",\n    hdrs = [\n        \"concat_lib.h\",\n        \"concat_lib_cpu.h\",\n    ],\n    deps = [\"//third_party/eigen3\"],\n)\n\ntf_kernel_library(\n    name = \"conv_2d\",\n    hdrs = [\"conv_2d.h\"],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"conv_2d.h\",\n        \"conv_2d_gpu.h\",\n        \"conv_2d_gpu_double.cu.cc\",\n        \"conv_2d_gpu_float.cu.cc\",\n        \"conv_2d_gpu_half.cu.cc\",\n        \"conv_2d_gpu_int.cu.cc\",\n        \"conv_2d_gpu_int_spatial_convolution.cu.cc\",\n        \"conv_2d_gpu_int_spatial_convolution_backward.cu.cc\",\n        \"conv_2d_gpu_uint16.cu.cc\",\n        \"conv_2d_gpu_uint32.cu.cc\",\n        \"conv_2d_gpu_uint64.cu.cc\",\n        \"conv_2d_gpu_uint8.cu.cc\",\n    ],\n    deps = [\n        \":eigen_helpers\",\n        \":fill_functor\",\n        \":ops_util\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ] + if_cuda_or_rocm([\":gpu_utils\"]),\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"conv_2d_hdrs\",\n    hdrs = [\"conv_2d.h\"],\n    deps = [\n        \":eigen_helpers\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"conv_3d\",\n    hdrs = [\"conv_3d.h\"],\n    deps = [\n        \":eigen_helpers\",\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"fill_functor\",\n    prefix = \"fill_functor\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"initializable_lookup_table\",\n    srcs = [\"initializable_lookup_table.cc\"],\n    hdrs = [\"initializable_lookup_table.h\"],\n    deps = [\n        \"//tensorflow/core:core_cpu_base\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"lookup_util\",\n    srcs = [\"lookup_util.cc\"],\n    hdrs = [\"lookup_util.h\"],\n    deps = [\n        \":initializable_lookup_table\",\n        \"//tensorflow/core:core_cpu_base\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:op_requires\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"nccl_kernels\",\n    srcs = if_cuda_or_rocm([\n        \"nccl_ops.cc\",\n    ]),\n    deps = if_cuda([\n        \"@local_config_nccl//:nccl\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rccl\",\n    ]) + if_cuda_or_rocm([\n        \"//tensorflow/core/nccl:nccl_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:gpu_headers_lib\",\n    ]),\n)\n\ncc_library(\n    name = \"sparse_utils\",\n    srcs = [\n        \"sparse_utils.cc\",\n    ],\n    hdrs = [\"sparse_utils.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sparse_utils_test\",\n    srcs = [\"sparse_utils_test.cc\"],\n    deps = [\n        \":sparse_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/base:core_headers\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_flag_utils\",\n    srcs = [\n        \"tensor_flag_utils.cc\",\n    ],\n    hdrs = [\"tensor_flag_utils.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"tensor_flag_utils_test\",\n    srcs = [\"tensor_flag_utils_test.cc\"],\n    deps = [\n        \":tensor_flag_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/base:core_headers\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"ops_testutil\",\n    testonly = 1,\n    srcs = [\"ops_testutil.cc\"],\n    hdrs = [\"ops_testutil.h\"],\n    cuda_deps = [\n        \"//tensorflow/core:gpu_lib\",\n        \"//tensorflow/core:gpu_runtime\",\n    ],\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n    ],\n)\n\ncc_library(\n    name = \"ops_util\",\n    hdrs = [\"ops_util.h\"],\n    copts = if_not_windows([\"-Wno-sign-compare\"]),\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ncc_library(\n    name = \"ops_util_hdrs\",\n    hdrs = [\"ops_util.h\"],\n    deps = [\"//third_party/eigen3\"],\n)\n\ncc_library(\n    name = \"gpu_prim_hdrs\",\n    hdrs = [\"gpu_prim.h\"],\n    deps = if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ncc_library(\n    name = \"gpu_prim_helpers\",\n    hdrs = [\"gpu_prim_helpers.h\"],\n    deps = if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n    ]),\n)\n\ntf_cuda_only_cc_test(\n    name = \"gpu_prim_helpers_test\",\n    srcs = [\"gpu_prim_helpers_test.cu.cc\"],\n    tags = [\"no_cuda_asan\"],  # TODO(b/183963619)\n    deps = [\n        \":gpu_prim_helpers\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"conv_ops_gpu_hdrs\",\n    hdrs = [\"conv_ops_gpu.h\"],\n)\n\n# We keep this target only because some contrib/ targets depend on it. The\n# reason why the contrib/ targets can't depend on gpu_utils is that, some\n# of the targets are tf_custom_op_library. tf_custom_op_library forbids the\n# dependency to tensorflow/core:lib, which gpu_utils certainly depends on.\ncc_library(\n    name = \"gpu_util_hdrs\",\n    hdrs = [\n        \"gpu_utils.h\",\n        # See the exports_files declaration for a description of why this\n        # silliness is here.\n        #\n        # TODO(b/202546057) get rid of this once fused_conv is moved out of\n        # contrib.\n        \"//tensorflow/stream_executor:lazy_op_runner.h\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"gpu_utils\",\n    srcs = if_cuda_or_rocm([\"gpu_utils.cc\"]),\n    hdrs = [\"gpu_utils.h\"],\n    deps = [\n        \":gpu_util_hdrs\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/core/protobuf:autotuning_proto_cc\",\n        \"//tensorflow/core/protobuf:conv_autotuning_proto_cc\",\n        \"//tensorflow/core/util:env_var\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"//tensorflow/stream_executor:lazy_op_runner\",\n        \"//tensorflow/stream_executor/gpu:asm_compiler\",\n        \"//tensorflow/stream_executor/gpu:redzone_allocator\",\n        \"@com_google_absl//absl/algorithm:container\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_absl//absl/types:span\",\n        \"@com_google_absl//absl/strings:str_format\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//tensorflow/core/util/autotune_maps:conv_parameters\",\n    ] + if_cuda([\n        \"@local_config_cuda//cuda:cudnn_header\",\n        \"//tensorflow/stream_executor:tf_allocator_adapter\",\n    ]),\n)\n\ntf_cc_test(\n    name = \"ops_util_test\",\n    size = \"small\",\n    srcs = [\"ops_util_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"reshape_util\",\n    srcs = [\"reshape_util.cc\"],\n    hdrs = [\"reshape_util.h\"],\n    gpu_srcs = [\n        \"reshape_util_gpu.cu.cc\",\n        \"reshape_util.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"variable_ops_test\",\n    size = \"small\",\n    srcs = [\"variable_ops_test.cc\"],\n    deps = [\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stage_op\",\n    srcs = [\"stage_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"map_stage_op\",\n    srcs = [\"map_stage_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"queue_base\",\n    srcs = [\"queue_base.cc\"],\n    hdrs = [\"queue_base.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"queue_op\",\n    srcs = [\"queue_op.cc\"],\n    hdrs = [\"queue_op.h\"],\n    deps = [\n        \":queue_base\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"priority_queue\",\n    srcs = [\"priority_queue.cc\"],\n    hdrs = [\"priority_queue.h\"],\n    deps = [\n        \":queue_base\",\n        \":typed_queue\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"batch_kernels\",\n    srcs = [\"batch_kernels.cc\"],\n    hdrs = [\"batch_kernels.h\"],\n    deps = [\n        \":ops_util_hdrs\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/kernels/batching_util:adaptive_shared_batch_scheduler\",\n        \"//tensorflow/core/kernels/batching_util:batch_resource_base\",\n        \"//tensorflow/core/kernels/batching_util:bounded_executor\",\n        \"//tensorflow/core/kernels/batching_util:concat_split_util\",\n        \"//tensorflow/core/kernels/batching_util:periodic_function_dynamic\",\n        \"//tensorflow/core/platform:numbers\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ],\n    alwayslink = 1,\n)\n\ntf_kernel_library(\n    name = \"record_input_op\",\n    srcs = [\n        \"record_input_op.cc\",\n        \"record_yielder.cc\",\n        \"record_yielder.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"save_restore_tensor\",\n    srcs = [\"save_restore_tensor.cc\"],\n    hdrs = [\"save_restore_tensor.h\"],\n    copts = if_not_windows([\"-Wno-sign-compare\"]),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util/tensor_bundle\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"split_lib\",\n    srcs = [\"split_lib_cpu.cc\"],\n    hdrs = [\"split_lib.h\"],\n    gpu_srcs = [\n        \"split_lib_gpu.cu.cc\",\n        \"split_lib.h\",\n        \"split_lib_gpu.h\",\n    ],\n    deps = [\n        \":gpu_device_array\",\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 0,\n)\n\ncc_library(\n    name = \"split_lib_hdrs\",\n    hdrs = [\"split_lib.h\"],\n    deps = [\n        \"//tensorflow/core:framework_lite\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"typed_queue\",\n    hdrs = [\"typed_queue.h\"],\n    deps = [\n        \":queue_base\",\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ncc_library(\n    name = \"training_op_helpers\",\n    srcs = [\"training_op_helpers.cc\"],\n    hdrs = [\"training_op_helpers.h\"],\n    visibility = [\n        \":friends\",\n        \":optimizer_helper_friends\",\n    ],\n    deps = [\n        \":dense_update_functor\",\n        \":variable_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\n# Private support libraries ---------------------------------------------------\n\ncc_library(\n    name = \"gpu_device_array\",\n    hdrs = [\n        \"gpu_device_array.h\",\n        \"gpu_device_array_gpu.h\",\n    ],\n    visibility = [\"//tensorflow:__subpackages__\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:gpu_headers_lib\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\n# Depending on a build configuration this target provides custom kernel for Eigen\n# tensor contractions (small matrix multiplication kernel used to multiple together\n# blocks of the original tensors).\n#\n# 1) Default:\n#    Use Mkldnn single threaded sgemm. The mkldnn kernels are generated at runtime and\n#    use avx/avx2/fma/avx512 based on cpu status registers (https://en.wikipedia.org/wiki/CPUID).\n#\n# 2) Eigen: --define tensorflow_mkldnn_contraction_kernel=0 (disable mkldnn)\n#    Use Eigen contraction kernel: Eigen::internal::gebp_kernel.\n#\n# If you use `tensor.contract(other_tensor)` in your code, you must include additional header\n# to get the benefit of custom contraction kernel:\n#\n#   #if defined(TENSORFLOW_USE_CUSTOM_CONTRACTION_KERNEL)\n#   #include \"third_party/tensorflow/core/kernels/eigen_contraction_kernel.h\"\n#   #endif\n#\n# We define a two-level target because if we just add\n#   \":no_mkldnn_contraction_kernel\": []\n# in the same select list with //third_party/tensorflow:{android,arm,ios,ppc},\n# there can be more than one match, e.g., when building for android and MKL-DNN\n# contraction kernel is disabled. Bazel doesn't allow multiple matches.\n# See more details in\n#   https://github.com/tensorflow/tensorflow/issues/24414\ncc_library(\n    name = \"eigen_contraction_kernel\",\n    hdrs = [\"eigen_contraction_kernel.h\"],\n    compatible_with = get_compatible_with_portable(),\n    deps = select({\n        \":no_mkldnn_contraction_kernel\": [\":eigen_contraction_kernel_no_mkl\"],\n        \"//conditions:default\": [\":eigen_contraction_kernel_with_mkl\"],\n    }) + [\"@com_google_absl//absl/base\"],\n)\n\ncc_library(\n    name = \"eigen_contraction_kernel_with_mkl\",\n    srcs = [\"eigen_contraction_kernel.cc\"],\n    hdrs = [\"eigen_contraction_kernel.h\"],\n    defines = select({\n        \"//tensorflow:android_x86\": [],\n        \"//tensorflow:arm_any\": [],\n        \"//tensorflow:fuchsia_x86_64\": [],\n        \"//tensorflow:ios\": [],\n        \"//tensorflow:linux_ppc64le\": [],\n        \"//tensorflow:linux_s390x\": [],\n        \"//tensorflow:macos_arm64\": [],\n        \"//conditions:default\": [\n            \"TENSORFLOW_USE_CUSTOM_CONTRACTION_KERNEL\",\n            \"TENSORFLOW_USE_MKLDNN_CONTRACTION_KERNEL\",\n        ],\n    }),\n    deps = [\n        \"@com_google_absl//absl/base\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core/platform:dynamic_annotations\",\n    ] + select({\n        \"//tensorflow:android_x86\": [],\n        \"//tensorflow:arm_any\": [],\n        \"//tensorflow:fuchsia_x86_64\": [],\n        \"//tensorflow:ios\": [],\n        \"//tensorflow:linux_ppc64le\": [],\n        \"//tensorflow:linux_s390x\": [],\n        \"//tensorflow:macos_arm64\": [],\n        \"//conditions:default\": [\"@mkl_dnn_v1//:mkl_dnn\"],\n    }),\n)\n\ncc_library(\n    name = \"eigen_contraction_kernel_no_mkl\",\n    srcs = [\"eigen_contraction_kernel.cc\"],\n    hdrs = [\"eigen_contraction_kernel.h\"],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\n        \"//tensorflow/core/platform:dynamic_annotations\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/base\",\n    ],\n)\n\nfilegroup(\n    name = \"xla_cpu_runtime_hdrs\",\n    srcs = [\n        \"eigen_contraction_kernel.h\",\n        \"eigen_convolution_helpers.h\",\n        \"eigen_spatial_convolutions.h\",\n        \"eigen_spatial_convolutions-inl.h\",\n    ],\n)\n\nfilegroup(\n    name = \"xla_cpu_runtime_srcs\",\n    srcs = [\n        \"eigen_contraction_kernel.cc\",\n    ],\n)\n\ncc_library(\n    name = \"redux_functor\",\n    hdrs = [\"redux_functor.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"fused_eigen_output_kernels\",\n    srcs = [\"fused_eigen_output_kernels.cc\"],\n    hdrs = [\"fused_eigen_output_kernels.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_helpers\",\n    hdrs = [\n        \"eigen_activations.h\",\n        \"eigen_attention.h\",\n        \"eigen_backward_cuboid_convolutions.h\",\n        \"eigen_backward_spatial_convolutions.h\",\n        \"eigen_cuboid_convolution.h\",\n        \"eigen_pooling.h\",\n        \"eigen_spatial_convolutions.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\n        \":eigen_contraction_kernel\",\n        \":eigen_convolution_helpers\",\n        \":eigen_spatial_convolutions-inl\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_helpers_no_mkl\",\n    hdrs = [\n        \"eigen_activations.h\",\n        \"eigen_attention.h\",\n        \"eigen_backward_cuboid_convolutions.h\",\n        \"eigen_backward_spatial_convolutions.h\",\n        \"eigen_cuboid_convolution.h\",\n        \"eigen_pooling.h\",\n        \"eigen_spatial_convolutions.h\",\n    ],\n    deps = [\n        \":eigen_convolution_helpers\",\n        \":eigen_spatial_convolutions-inl\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_spatial_convolutions-inl\",\n    hdrs = [\n        \"eigen_spatial_convolutions-inl.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\n        \":eigen_convolution_helpers\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_convolution_helpers\",\n    hdrs = [\n        \"eigen_convolution_helpers.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    defines = [\n        \"EIGEN_ALTIVEC_USE_CUSTOM_PACK=0\",\n    ],\n)\n\n# OpKernel libraries ----------------------------------------------------------\n\nARRAY_DEPS = [\n    \":concat_lib\",\n    \":fill_functor\",\n    \":gather_functor\",\n    \":ops_util\",\n    \":transpose_functor\",\n    \"//tensorflow/core:array_grad\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core/profiler/lib:scoped_memory_debug_annotation\",\n    \"//third_party/eigen3\",\n]\n\ntf_kernel_library(\n    name = \"immutable_constant_op\",\n    prefix = \"immutable_constant_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"set_kernels\",\n    prefix = \"set_kernels\",\n    deps = [\n        \"//tensorflow/core:framework_headers_lib\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/container:btree\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"debug_ops\",\n    prefix = \"debug_ops\",\n    deps = ARRAY_DEPS + [\n        \"//tensorflow/core:gpu_runtime\",\n        \"//tensorflow/core/debug:debug_io_utils\",\n    ],\n)\n\ncc_library(\n    name = \"array\",\n    deps = [\n        \":batch_space_ops\",\n        \":bcast_ops\",\n        \":broadcast_to_op\",\n        \":concat_op\",\n        \":constant_op\",\n        \":depth_space_ops\",\n        \":diag_op\",\n        \":edit_distance_op\",\n        \":fingerprint_op\",\n        \":gather_nd_op\",\n        \":gather_op\",\n        \":guarantee_const_op\",\n        \":host_constant_op\",\n        \":identity_n_op\",\n        \":identity_op\",\n        \":immutable_constant_op\",\n        \":inplace_ops\",\n        \":listdiff_op\",\n        \":one_hot_op\",\n        \":pack_op\",\n        \":pad_op\",\n        \":quantize_and_dequantize_op\",\n        \":reshape_op\",\n        \":reverse_op\",\n        \":reverse_sequence_op\",\n        \":searchsorted_op\",\n        \":shape_ops\",\n        \":slice_op\",\n        \":snapshot_op\",\n        \":split_op\",\n        \":split_v_op\",\n        \":strided_slice_op\",\n        \":tile_ops\",\n        \":transpose_op\",\n        \":unique_op\",\n        \":unpack_op\",\n        \":unravel_index_op\",\n        \":where_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"bcast_ops\",\n    prefix = \"bcast_ops\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"bitcast_op\",\n    deprecation = \"use //third_party/tensorflow/c/kernels:bitcast_op instead\",\n    deps = [\"//tensorflow/c/kernels:bitcast_op\"],\n)\n\ntf_kernel_library(\n    name = \"broadcast_to_op\",\n    prefix = \"broadcast_to_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"concat_op\",\n    prefix = \"concat_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"guarantee_const_op\",\n    prefix = \"guarantee_const_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"constant_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"constant_op\",\n    deps = ARRAY_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:constant_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"host_constant_op\",\n    prefix = \"host_constant_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"diag_op\",\n    prefix = \"diag_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"edit_distance_op\",\n    prefix = \"edit_distance_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"fingerprint_op\",\n    prefix = \"fingerprint_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_cc_test(\n    name = \"fingerprint_op_test\",\n    size = \"small\",\n    srcs = [\"fingerprint_op_test.cc\"],\n    deps = [\n        \":fingerprint_op\",\n        \":ops_testutil\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"gather_nd_op\",\n    prefix = \"gather_nd_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"gather_op\",\n    prefix = \"gather_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"identity_op\",\n    prefix = \"identity_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"identity_n_op\",\n    prefix = \"identity_n_op\",\n    deps = ARRAY_DEPS + [\n        \"//tensorflow/core:core_cpu_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"listdiff_op\",\n    prefix = \"listdiff_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"one_hot_op\",\n    prefix = \"one_hot_op\",\n    deps = ARRAY_DEPS + [\"//tensorflow/core/util:overflow\"],\n)\n\ntf_kernel_library(\n    name = \"pack_op\",\n    prefix = \"pack_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"pad_op\",\n    prefix = \"pad_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"quantize_and_dequantize_op\",\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    prefix = \"quantize_and_dequantize_op\",\n    deps = ARRAY_DEPS + [\":cwise_op\"],\n)\n\ntf_kernel_library(\n    name = \"reshape_op\",\n    prefix = \"reshape_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"reverse_op\",\n    prefix = \"reverse_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"reverse_sequence_op\",\n    prefix = \"reverse_sequence_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"shape_ops\",\n    prefix = \"shape_ops\",\n    deps = ARRAY_DEPS + [\"//tensorflow/core/common_runtime:dma_helper\"],\n)\n\ntf_kernel_library(\n    name = \"slice_op\",\n    prefix = \"slice_op\",\n    deps = ARRAY_DEPS + [\":strided_slice_op\"],\n)\n\ntf_kernel_library(\n    name = \"snapshot_op\",\n    prefix = \"snapshot_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"split_op\",\n    gpu_srcs = [\"gpu_device_array.h\"],\n    prefix = \"split_op\",\n    deps = ARRAY_DEPS + [\":split_lib\"],\n)\n\ntf_kernel_library(\n    name = \"split_v_op\",\n    gpu_srcs = [\"gpu_device_array.h\"],\n    prefix = \"split_v_op\",\n    deps = ARRAY_DEPS + [\":split_lib\"],\n)\n\ntf_kernel_library(\n    name = \"searchsorted_op\",\n    prefix = \"searchsorted_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"inplace_ops\",\n    prefix = \"inplace_ops\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"tile_ops\",\n    srcs = [\n        \"tile_functor_cpu.h\",\n        \"tile_functor_cpu_bfloat16.cc\",\n        \"tile_functor_cpu_bool.cc\",\n        \"tile_functor_cpu_complex128.cc\",\n        \"tile_functor_cpu_complex64.cc\",\n        \"tile_functor_cpu_double.cc\",\n        \"tile_functor_cpu_float.cc\",\n        \"tile_functor_cpu_half.cc\",\n        \"tile_functor_cpu_int16.cc\",\n        \"tile_functor_cpu_int32.cc\",\n        \"tile_functor_cpu_int64.cc\",\n        \"tile_functor_cpu_int8.cc\",\n        \"tile_functor_cpu_tstring.cc\",\n        \"tile_functor_cpu_uint32.cc\",\n        \"tile_functor_cpu_uint64.cc\",\n        \"tile_functor_cpu_uint8.cc\",\n        \"tile_functor_cpu_variant.cc\",\n    ],\n    hdrs = [\"tile_functor.h\"],\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    gpu_srcs = [\n        \"tile_functor.h\",\n        \"tile_functor_gpu.h\",\n        \"tile_functor_gpu_bool.cu.cc\",\n        \"tile_functor_gpu_complex64.cu.cc\",\n        \"tile_functor_gpu_complex128.cu.cc\",\n        \"tile_functor_gpu_double.cu.cc\",\n        \"tile_functor_gpu_float.cu.cc\",\n        \"tile_functor_gpu_half.cu.cc\",\n        \"tile_functor_gpu_int16.cu.cc\",\n        \"tile_functor_gpu_int32.cu.cc\",\n        \"tile_functor_gpu_int64.cu.cc\",\n    ],\n    prefix = \"tile_ops\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"transpose_op\",\n    srcs = [\n        \"transpose_op.cc\",\n    ],\n    hdrs = [\"transpose_op.h\"],\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"unique_op\",\n    prefix = \"unique_op\",\n    deps = ARRAY_DEPS + [\n        \"@com_google_absl//absl/container:flat_hash_map\",\n    ] + if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"unpack_op\",\n    prefix = \"unpack_op\",\n    deps = ARRAY_DEPS + [\":split_lib\"],\n)\n\ntf_kernel_library(\n    name = \"unravel_index_op\",\n    prefix = \"unravel_index_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"where_op\",\n    srcs = [\"where_op.cc\"],\n    hdrs = [\"where_op.h\"],\n    gpu_srcs = [\n        \"where_op.h\",\n        \"where_op_gpu.cu.h\",\n        \"where_op_gpu_impl_1.cu.cc\",\n        \"where_op_gpu_impl_2.cu.cc\",\n        \"where_op_gpu_impl_3.cu.cc\",\n        \"where_op_gpu_impl_4.cu.cc\",\n        \"where_op_gpu_impl_5.cu.cc\",\n        \"where_op_gpu_impl_6.cu.cc\",\n        \"where_op_gpu_impl_7.cu.cc\",\n        \"where_op_gpu_impl_8.cu.cc\",\n    ],\n    deps = if_cuda([\n               \"//tensorflow/core/util:cuda_solvers\",\n           ]) + if_rocm([\n               \"//tensorflow/core/util:rocm_solvers\",\n           ]) + [\":gpu_prim_hdrs\"] +\n           ARRAY_DEPS,\n)\n\ncc_library(\n    name = \"composite_tensor_variant\",\n    srcs = [\"composite_tensor_variant.cc\"],\n    hdrs = [\"composite_tensor_variant.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ntf_cc_test(\n    name = \"composite_tensor_variant_test\",\n    size = \"small\",\n    srcs = [\"composite_tensor_variant_test.cc\"],\n    deps = [\n        \":composite_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"composite_tensor_ops\",\n    srcs = [\"composite_tensor_ops.cc\"],\n    deps = [\n        \":composite_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_ops\",\n    deps = [\n        \":ragged_cross_op\",\n        \":ragged_gather_op\",\n        \":ragged_range_op\",\n        \":ragged_tensor_from_variant_op\",\n        \":ragged_tensor_to_sparse_kernel\",\n        \":ragged_tensor_to_tensor_op\",\n        \":ragged_tensor_to_variant_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_gather_op\",\n    srcs = [\"ragged_gather_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_gather_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_gather_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_gather_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_range_op\",\n    srcs = [\"ragged_range_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_range_op_test\",\n    srcs = [\"ragged_range_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_range_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_to_sparse_kernel\",\n    srcs = [\"ragged_tensor_to_sparse_kernel.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_to_tensor_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_to_tensor_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_to_tensor_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_to_tensor_op\",\n    srcs = [\"ragged_tensor_to_tensor_op.cc\"],\n    deps = [\n        \":broadcast_to_op\",\n        \":list_kernels\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/util:ragged_to_dense_util\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_to_sparse_kernel_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_to_sparse_kernel_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_to_sparse_kernel\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_tensor_variant\",\n    srcs = [\"ragged_tensor_variant.cc\"],\n    hdrs = [\"ragged_tensor_variant.h\"],\n    deps = [\n        \":cwise_op\",\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_to_variant_op\",\n    srcs = [\"ragged_tensor_to_variant_op.cc\"],\n    deps = [\n        \":concat_lib\",\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_from_variant_op\",\n    srcs = [\"ragged_tensor_from_variant_op.cc\"],\n    deps = [\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_to_variant_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_to_variant_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_to_variant_op\",\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_from_variant_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_from_variant_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_from_variant_op\",\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_cross_op\",\n    srcs = [\"ragged_cross_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"rnn_ops\",\n    deps = [\n        \"//tensorflow/core/kernels/rnn:gru_ops\",\n        \"//tensorflow/core/kernels/rnn:lstm_ops\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"cudnn_rnn_kernels\",\n    srcs = [\"cudnn_rnn_ops.cc\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":gpu_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/core/profiler/lib:scoped_annotation\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"batch_norm_op_test\",\n    size = \"small\",\n    srcs = [\"batch_norm_op_test.cc\"],\n    tags = [\n        \"no_oss\",  # b/189866692\n    ],\n    deps = [\n        \":batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"batch_kernel_test_util\",\n    testonly = 1,\n    srcs = [\"batch_kernel_test_util.cc\"],\n    hdrs = [\"batch_kernel_test_util.h\"],\n    deps = [\n        \":batch_kernels\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"batch_kernels_test\",\n    size = \"small\",\n    srcs = [\"batch_kernels_test.cc\"],\n    deps = [\n        \":batch_kernel_test_util\",\n        \":batch_kernels\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"batch_kernels_env_test\",\n    size = \"small\",\n    srcs = [\"batch_kernels_env_test.cc\"],\n    deps = [\n        \":batch_kernel_test_util\",\n        \":batch_kernels\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/platform:status_matchers\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ops_testutil_test\",\n    size = \"small\",\n    srcs = [\"ops_testutil_test.cc\"],\n    deps = [\n        \":identity_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"concat_op_test\",\n    size = \"small\",\n    srcs = [\"concat_op_test.cc\"],\n    deps = [\n        \":concat_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"bincount_op_test\",\n    size = \"small\",\n    srcs = [\"bincount_op_test.cc\"],\n    deps = [\n        \":bincount_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"broadcast_to_op_test\",\n    size = \"small\",\n    srcs = [\"broadcast_to_op_test.cc\"],\n    deps = [\n        \":broadcast_to_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"constant_op_test\",\n    size = \"small\",\n    srcs = [\"constant_op_test.cc\"],\n    tags = [\"no_cuda_on_cpu_tap\"],\n    deps = [\n        \":constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"deep_conv2d_test\",\n    size = \"small\",\n    srcs = [\"deep_conv2d_test.cc\"],\n    deps = [\n        \":conv_ops\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"xsmm_conv2d_test\",\n    size = \"small\",\n    srcs = select({\n        \":xsmm_convolutions\": [\"xsmm_conv2d_test.cc\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":conv_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ] + select({\n        \":xsmm_convolutions\": [\n            \"@libxsmm_archive//:xsmm_avx\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\ntf_cuda_cc_test(\n    name = \"conv_ops_test\",\n    size = \"medium\",\n    srcs = [\"conv_ops_test.cc\"],\n    tags = [\n        \"no_cuda_asan\",  # TODO(b/171342275): re-enable.\n    ],\n    deps = [\n        \":conv_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels/image\",\n        \"//tensorflow/core/platform:tensor_float_32_utils\",\n        \"@com_google_absl//absl/algorithm:container\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"conv_ops_benchmark_test\",\n    size = \"medium\",\n    srcs = [\"conv_ops_benchmark_test.cc\"],\n    tags = [\n        \"nomac\",  # b/132448918\n        \"nomsan\",  # b/141643254\n    ],\n    deps = [\n        \":bias_op\",\n        \":conv_ops\",\n        \":fused_batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":relu_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ] + if_mkl([\"//tensorflow/core/kernels/mkl:mkl_conv_op\"]),\n)\n\ntf_cuda_cc_test(\n    name = \"conv_grad_filter_ops_benchmark_test\",\n    size = \"medium\",\n    srcs = [\"conv_grad_filter_ops_benchmark_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":conv_ops\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"conv_grad_input_ops_benchmark_test\",\n    size = \"medium\",\n    srcs = [\"conv_grad_input_ops_benchmark_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":conv_ops\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"depthwise_conv_ops_test\",\n    size = \"small\",\n    srcs = [\"depthwise_conv_ops_test.cc\"],\n    tags = tf_cuda_tests_tags() + [\n        \"no_gpu\",  # TODO(b/194100358): re-enable after flakiness resolved.\n        \"no_cuda_asan\",  # TODO(b/171342266): re-enable.\n    ],\n    deps = [\n        \":conv_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels/image\",\n    ],\n)\n\ntf_cc_test(\n    name = \"example_parsing_ops_test\",\n    size = \"medium\",\n    srcs = [\"example_parsing_ops_test.cc\"],\n    shard_count = 4,\n    tags = [\"optonly\"],\n    deps = [\n        \":example_parsing_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/base\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"fake_quant_ops_test\",\n    size = \"small\",\n    srcs = [\"fake_quant_ops_test.cc\"],\n    tags = tf_cuda_tests_tags(),\n    deps = [\n        \":fake_quant_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"fused_batch_norm_op_test\",\n    size = \"small\",\n    srcs = [\"fused_batch_norm_op_test.cc\"],\n    tags = [\n        \"nomsan\",  # TODO(b/181135145), use-of-uninitialized-value in initializedLoggingWithEnvVariables\n    ],\n    deps = [\n        \":fused_batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"fused_batch_norm_ex_op_test\",\n    size = \"small\",\n    srcs = [\"fused_batch_norm_ex_op_test.cc\"],\n    tags = [\n        \"no_cuda_on_cpu_tap\",\n        \"nomsan\",  # b/141643254\n    ],\n    deps = [\n        \":cwise_op\",\n        \":fused_batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":relu_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n        \"@com_google_absl//absl/algorithm:container\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"in_topk_op_test\",\n    size = \"small\",\n    srcs = [\"in_topk_op_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":in_topk_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"gather_functor\",\n    prefix = \"gather_functor\",\n    visibility = [\":friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Unlike gather_functor library, this does not include the CUDA code and deps.\ncc_library(\n    name = \"gather_functor_hdr\",\n    hdrs = [\n        \"gather_functor.h\",\n        \"gather_functor_batched.h\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dense_update_functor\",\n    srcs = [\"dense_update_functor.cc\"],\n    hdrs = [\"dense_update_functor.h\"],\n    gpu_srcs = [\n        \"dense_update_functor.h\",\n        \"dense_update_functor_gpu.cu.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 0,\n)\n\ntf_cuda_cc_test(\n    name = \"gather_op_test\",\n    size = \"small\",\n    srcs = [\"gather_op_test.cc\"],\n    deps = [\n        \":gather_op\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"gather_nd_op_test\",\n    size = \"small\",\n    srcs = [\"gather_nd_op_test.cc\"],\n    deps = [\n        \":gather_nd_op\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"guarantee_const_op_test\",\n    size = \"small\",\n    srcs = [\"guarantee_const_op_test.cc\"],\n    deps = [\n        \":guarantee_const_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"identity_op_test\",\n    size = \"small\",\n    srcs = [\"identity_op_test.cc\"],\n    deps = [\n        \":identity_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"identity_n_op_test\",\n    size = \"small\",\n    srcs = [\"identity_n_op_test.cc\"],\n    deps = [\n        \":identity_n_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"debug_ops_test\",\n    size = \"small\",\n    srcs = [\"debug_ops_test.cc\"],\n    deps = [\n        \":debug_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:debug_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/debug:debug_io_utils\",\n        \"//tensorflow/core/debug:debug_node_key\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"quantize_and_dequantize_op_test\",\n    size = \"small\",\n    srcs = [\"quantize_and_dequantize_op_test.cc\"],\n    tags = [\n        \"no_windows\",  # test uses rand_r which does not exist on Windows\n    ],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantize_and_dequantize_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"dequantize_op_test\",\n    size = \"small\",\n    srcs = [\"dequantize_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"one_hot_op_test\",\n    size = \"small\",\n    srcs = [\"one_hot_op_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":one_hot_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cc_test(\n    name = \"reverse_op_test\",\n    size = \"small\",\n    srcs = [\"reverse_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":reverse_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"scatter_functor\",\n    prefix = \"scatter_functor\",\n    visibility = [\":friends\"],\n    deps = [\n        \":dense_update_functor\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"shape_ops_test\",\n    size = \"small\",\n    srcs = [\"shape_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":shape_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"slice_op_test\",\n    size = \"small\",\n    srcs = [\"slice_op_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":slice_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"strided_slice_op_test\",\n    size = \"small\",\n    srcs = [\"strided_slice_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":slice_op\",\n        \":strided_slice_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"unique_op_test\",\n    size = \"small\",\n    srcs = [\"unique_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":unique_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"transpose_functor\",\n    srcs = [\"transpose_functor_cpu.cc\"],\n    hdrs = [\"transpose_functor.h\"],\n    gpu_srcs = [\n        \"transpose_functor_gpu.cu.cc\",\n        \"transpose_functor.h\",\n    ],\n    visibility = [\":friends\"],\n    deps = [\n        \":conv_2d\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cc_test(\n    name = \"transpose_util_test\",\n    size = \"small\",\n    srcs = [\"transpose_util_test.cc\"],\n    deps = [\n        \":transpose_functor\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"candidate_sampler_ops\",\n    prefix = \"candidate_sampler_ops\",\n    deps = [\n        \":range_sampler\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"range_sampler\",\n    srcs = [\"range_sampler.cc\"],\n    hdrs = [\"range_sampler.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cc_test(\n    name = \"range_sampler_test\",\n    size = \"small\",\n    srcs = [\"range_sampler_test.cc\"],\n    deps = [\n        \":range_sampler\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"control_flow_ops\",\n    prefix = \"control_flow_ops\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"while_op_test\",\n    srcs = [\"while_op_test.cc\"],\n    tags = [\n        \"no_windows\",\n    ],  # TODO(b/208697533): Re-enable after fixing.\n    deps = [\n        \":control_flow_ops\",\n        \"//tensorflow/c/experimental/stream_executor\",\n        \"//tensorflow/c/experimental/stream_executor:stream_executor_test_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"//tensorflow/core/common_runtime/pluggable_device:pluggable_device_runtime_impl\",\n        \"//tensorflow/core/framework:function_testlib\",\n        \"//tensorflow/core/kernels:cast_op\",\n        \"//tensorflow/core/kernels:constant_op\",\n        \"//tensorflow/core/kernels:cwise_op\",\n        \"//tensorflow/core/kernels:functional_ops\",\n        \"//tensorflow/core/kernels:identity_op\",\n        \"//tensorflow/core/kernels:ops_testutil\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ctc_ops\",\n    prefix = \"ctc\",\n    deps = [\n        \"//tensorflow/core/framework:bounds_check\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util/ctc:ctc_beam_search_lib\",\n        \"//tensorflow/core/util/ctc:ctc_loss_calculator_lib\",\n    ] + if_cuda_or_rocm([\n        \":gpu_utils\",\n        \":conv_ops_gpu_hdrs\",\n    ]) + if_cuda([\n        \"@local_config_cuda//cuda:cudnn_header\",\n    ]),\n)\n\ntf_cc_test(\n    name = \"control_flow_ops_test\",\n    size = \"small\",\n    srcs = [\"control_flow_ops_test.cc\"],\n    deps = [\n        \":control_flow_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:forward_type_inference\",\n    ],\n)\n\ncc_library(\n    name = \"data_flow\",\n    deps = [\n        \":barrier_ops\",\n        \":conditional_accumulator_base_op\",\n        \":conditional_accumulator_op\",\n        \":dynamic_partition_op\",\n        \":dynamic_stitch_op\",\n        \":fifo_queue_op\",\n        \":lookup_table_init_op\",\n        \":lookup_table_op\",\n        \":map_stage_op\",\n        \":padding_fifo_queue_op\",\n        \":priority_queue_op\",\n        \":queue_ops\",\n        \":random_shuffle_queue_op\",\n        \":record_input_op\",\n        \":session_ops\",\n        \":sparse_conditional_accumulator_op\",\n        \":stack_ops\",\n        \":stage_op\",\n        \":tensor_array_ops\",\n    ],\n)\n\ncc_library(\n    name = \"lookup\",\n    deps = [\n        \":lookup_table_init_op\",\n        \":lookup_table_op\",\n    ],\n)\n\ncc_header_only_library(\n    name = \"lookup_headers_lib\",\n    deps = [\":lookup\"],\n)\n\nDATA_FLOW_DEPS = [\n    \":concat_lib\",\n    \":conditional_accumulator\",\n    \":conditional_accumulator_base\",\n    \":fifo_queue\",\n    \":initializable_lookup_table\",\n    \":lookup_util\",\n    \":padding_fifo_queue\",\n    \":priority_queue\",\n    \":queue_base\",\n    \":queue_op\",\n    \":sparse_conditional_accumulator\",\n    \":split_lib\",\n    \":tensor_array\",\n    \":typed_conditional_accumulator_base\",\n    \":typed_queue\",\n    \"//third_party/eigen3\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core/framework:bounds_check\",\n]\n\ntf_kernel_library(\n    name = \"conditional_accumulator_base_op\",\n    prefix = \"conditional_accumulator_base_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"conditional_accumulator_op\",\n    prefix = \"conditional_accumulator_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"barrier_ops\",\n    prefix = \"barrier_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"fifo_queue_op\",\n    prefix = \"fifo_queue_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"padding_fifo_queue_op\",\n    prefix = \"padding_fifo_queue_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"priority_queue_op\",\n    prefix = \"priority_queue_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"queue_ops\",\n    prefix = \"queue_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"random_shuffle_queue_op\",\n    prefix = \"random_shuffle_queue_op\",\n    deps = DATA_FLOW_DEPS + [\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"scoped_allocator_ops\",\n    prefix = \"scoped_allocator_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"scoped_allocator_ops_test\",\n    srcs = [\"scoped_allocator_ops_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),  #Required for benchmarking\n    deps = [\n        \":cwise_op\",\n        \":dense_update_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scoped_allocator_ops\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"session_ops\",\n    prefix = \"session_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_conditional_accumulator_op\",\n    prefix = \"sparse_conditional_accumulator_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ncc_library(\n    name = \"stack\",\n    srcs = [\"stack.cc\"],\n    hdrs = [\"stack.h\"],\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stack_ops\",\n    prefix = \"stack_ops\",\n    deps = DATA_FLOW_DEPS + [\":stack\"],\n)\n\ntf_kernel_library(\n    name = \"tensor_array_ops\",\n    prefix = \"tensor_array_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\nDYNAMIC_DEPS = [\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"dynamic_partition_op\",\n    prefix = \"dynamic_partition_op\",\n    deps = DYNAMIC_DEPS + [\n        \":fill_functor\",\n        \":gather_functor\",\n        \":gpu_prim_hdrs\",\n        \"//tensorflow/core:framework_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dynamic_stitch_op\",\n    gpu_srcs = [\n        \"gpu_device_array.h\",\n        \"gpu_device_array_gpu.h\",\n    ],\n    prefix = \"dynamic_stitch_op\",\n    deps = DYNAMIC_DEPS,\n)\n\ncc_library(\n    name = \"tensor_cord\",\n    srcs = [\"tensor_cord.cc\"],\n    hdrs = [\"tensor_cord.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ntf_cc_test(\n    name = \"tensor_cord_test\",\n    srcs = [\"tensor_cord_test.cc\"],\n    deps = [\n        \":tensor_cord\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/platform:cord\",\n    ],\n)\n\nLOOKUP_DEPS = [\n    \":initializable_lookup_table\",\n    \":lookup_util\",\n    \"@com_google_absl//absl/container:flat_hash_map\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core/framework:bounds_check\",\n]\n\ntf_kernel_library(\n    name = \"lookup_table_init_op\",\n    prefix = \"lookup_table_init_op\",\n    deps = LOOKUP_DEPS,\n)\n\ntf_kernel_library(\n    name = \"lookup_table_op\",\n    prefix = \"lookup_table_op\",\n    deps = LOOKUP_DEPS,\n)\n\ncc_library(\n    name = \"checkpoint_ops\",\n    deps = [\n        \":generate_vocab_remapping_op\",\n        \":load_and_remap_matrix_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"generate_vocab_remapping_op\",\n    srcs = [\"generate_vocab_remapping_op.cc\"],\n    deps = [\n        \":lookup_table_init_op\",\n        \":lookup_table_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"load_and_remap_matrix_op\",\n    srcs = [\"load_and_remap_matrix_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/util/tensor_bundle\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cuda_cc_tests(\n    name = \"dynamic_op_test\",\n    size = \"small\",\n    srcs = [\n        \"dynamic_partition_op_test.cc\",\n        \"dynamic_stitch_op_test.cc\",\n    ],\n    deps = [\n        \":data_flow\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"fifo_queue\",\n    srcs = [\"fifo_queue.cc\"],\n    hdrs = [\"fifo_queue.h\"],\n    visibility = [\":friends\"],\n    deps = [\n        \":queue_base\",\n        \":queue_op\",\n        \":typed_queue\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"padding_fifo_queue\",\n    srcs = [\"padding_fifo_queue.cc\"],\n    hdrs = [\"padding_fifo_queue.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \":fifo_queue\",\n        \":queue_base\",\n        \":typed_queue\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"conditional_accumulator_base\",\n    srcs = [\"conditional_accumulator_base.cc\"],\n    hdrs = [\n        \"conditional_accumulator_base.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"typed_conditional_accumulator_base\",\n    hdrs = [\"typed_conditional_accumulator_base.h\"],\n    deps = [\n        \":conditional_accumulator_base\",\n    ],\n)\n\ncc_library(\n    name = \"conditional_accumulator\",\n    hdrs = [\n        \"conditional_accumulator.h\",\n        \"conditional_accumulator_base_op.h\",\n    ],\n    deps = [\n        \":conditional_accumulator_base\",\n        \":fill_functor\",\n        \":typed_conditional_accumulator_base\",\n    ],\n)\n\ncc_library(\n    name = \"sparse_conditional_accumulator\",\n    hdrs = [\"sparse_conditional_accumulator.h\"],\n    deps = [\n        \":typed_conditional_accumulator_base\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"tensor_array\",\n    srcs = [\"tensor_array.cc\"],\n    hdrs = [\"tensor_array.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \":aggregate_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"resource_variable_ops\",\n    srcs = [\"resource_variable_ops.cc\"],\n    hdrs = [\"resource_variable_ops.h\"],\n    deps = [\n        \":dense_update_functor\",\n        \":gather_functor\",\n        \":gather_nd_op\",\n        \":resource_variable_util\",\n        \":scatter_functor\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"resource_variable_util\",\n    srcs = [\"resource_variable_util.cc\"],\n    hdrs = [\"resource_variable_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_list\",\n    srcs = [\"tensor_list.cc\"],\n    hdrs = [\"tensor_list.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/framework:tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:refcount\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"list_kernels\",\n    srcs = [\"list_kernels.cc\"],\n    hdrs = [\"list_kernels.h\"],\n    gpu_srcs = [\n        \"list_kernels.cu.cc\",\n        \"list_kernels.h\",\n    ],\n    deps = [\n        \":concat_lib\",\n        \":fill_functor\",\n        \":tensor_list\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/stream_executor\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_map\",\n    srcs = [\"tensor_map.cc\"],\n    hdrs = [\"tensor_map.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/framework:tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:refcount\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"map_kernels\",\n    srcs = [\"map_kernels.cc\"],\n    hdrs = [\"map_kernels.h\"],\n    deps = [\n        \":concat_lib\",\n        \":fill_functor\",\n        \":tensor_map\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"tensor_map_test\",\n    size = \"small\",\n    srcs = [\n        \"tensor_map_test.cc\",\n    ],\n    tags = [\"nomsan\"],  # b/163222155\n    deps = [\n        \":tensor_map\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"fact_op\",\n    prefix = \"fact_op\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"function_ops\",\n    prefix = \"function_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"functional_ops\",\n    prefix = \"functional_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"partitioned_function_ops\",\n    prefix = \"partitioned_function_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/grappler:grappler_item\",\n        \"//tensorflow/core/grappler/clusters:virtual_cluster\",\n        \"//tensorflow/core/grappler/optimizers:meta_optimizer\",\n        \"//tensorflow/core/grappler/utils:functions\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n        \"//tensorflow/stream_executor:stream\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"eigen_test\",\n    size = \"small\",\n    srcs = [\n        \"eigen_activations_test.cc\",\n        \"eigen_attention_test.cc\",\n        \"eigen_backward_cuboid_convolutions_test.cc\",\n        \"eigen_backward_spatial_convolutions_test.cc\",\n        \"eigen_pooling_test.cc\",\n        \"eigen_spatial_convolutions_test.cc\",\n    ],\n    deps = [\n        \":eigen_helpers\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\n# Conditional test target generation is not supported by the \"tf_cc_tests\" macro\n# (can't add 'select' to the srcs field, type 'select' is not iterable).\ntf_cc_test(\n    name = \"eigen_mkldnn_contraction_kernel_test\",\n    size = \"small\",\n    srcs = select({\n        \"//tensorflow:android_x86\": [],\n        \"//tensorflow:arm_any\": [],\n        \"//tensorflow:fuchsia_x86_64\": [],\n        \"//tensorflow:ios\": [],\n        \"//tensorflow:linux_ppc64le\": [],\n        \"//tensorflow:linux_s390x\": [],\n        \":no_mkldnn_contraction_kernel\": [],\n        \"//conditions:default\": [\"eigen_mkldnn_contraction_kernel_test.cc\"],\n    }),\n    tags = [\"mkldnn_contraction_kernel\"],\n    deps = [\n        \":eigen_contraction_kernel\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_benchmark\",\n    testonly = 1,\n    hdrs = [\n        \"eigen_benchmark.h\",\n        \":eigen_helpers\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"eigen_benchmark_cpu_test\",\n    srcs = [\"eigen_benchmark_cpu_test.cc\"],\n    deps = [\n        \":eigen_benchmark\",\n        \":eigen_helpers\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"basic_ops_benchmark_test\",\n    size = \"small\",\n    srcs = [\n        \"basic_ops_benchmark_test.cc\",\n    ],\n    deps = [\n        \":math\",\n        \":ops_util\",\n        \":state\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"io\",\n    deps = [\n        \":fixed_length_record_reader_op\",\n        \":identity_reader_op\",\n        \":matching_files_op\",\n        \":reader_ops\",\n        \":restore_op\",\n        \":save_op\",\n        \":save_restore_v2_ops\",\n        \":text_line_reader_op\",\n        \":tf_record_reader_op\",\n        \":whole_file_read_ops\",\n    ] + select({\n        \"//tensorflow:fuchsia\": [],\n        \"//conditions:default\": [\":lmdb_reader_op\"],\n    }),\n)\n\nIO_DEPS = [\n    \":ops_util\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    \"//tensorflow/core:reader_base\",\n    \"//tensorflow/core/util/tensor_bundle\",\n]\n\ntf_kernel_library(\n    name = \"fixed_length_record_reader_op\",\n    prefix = \"fixed_length_record_reader_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"identity_reader_op\",\n    prefix = \"identity_reader_op\",\n    deps = IO_DEPS + [\"@com_google_absl//absl/strings\"],\n)\n\ntf_kernel_library(\n    name = \"lmdb_reader_op\",\n    prefix = \"lmdb_reader_op\",\n    deps = IO_DEPS + [\n        \"@lmdb\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"matching_files_op\",\n    prefix = \"matching_files_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"reader_ops\",\n    prefix = \"reader_ops\",\n    deps = IO_DEPS,\n)\n\nSAVE_RESTORE_DEPS = [\n    \":checkpoint_callback_manager\",\n    \":save_restore_tensor\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core/util/tensor_bundle\",\n]\n\ntf_kernel_library(\n    name = \"restore_op\",\n    prefix = \"restore_op\",\n    deps = SAVE_RESTORE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"save_op\",\n    prefix = \"save_op\",\n    deps = SAVE_RESTORE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"checkpoint_callback_manager\",\n    srcs = [\n        \"checkpoint_callback_manager.cc\",\n    ],\n    hdrs = [\n        \"checkpoint_callback_manager.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/platform:regexp\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"checkpoint_callback_manager_test\",\n    size = \"small\",\n    srcs = [\"checkpoint_callback_manager_test.cc\"],\n    deps = [\n        \":checkpoint_callback_manager\",\n        \":io\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"save_restore_v2_ops\",\n    prefix = \"save_restore_v2_ops\",\n    deps = SAVE_RESTORE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"text_line_reader_op\",\n    prefix = \"text_line_reader_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"tf_record_reader_op\",\n    prefix = \"tf_record_reader_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"whole_file_read_ops\",\n    prefix = \"whole_file_read_ops\",\n    deps = IO_DEPS + [\"@com_google_absl//absl/strings\"],\n)\n\ntf_cc_tests(\n    name = \"bonus2_tests\",\n    size = \"small\",\n    srcs = [\n        \"merge_v2_checkpoints_op_test.cc\",\n        \"restore_op_test.cc\",\n        \"restore_v2_op_test.cc\",\n        \"save_op_test.cc\",\n        \"save_v2_op_test.cc\",\n    ],\n    deps = [\n        \":io\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/util/tensor_bundle\",\n    ],\n)\n\ncc_library(\n    name = \"logging\",\n    deps = [\n        \":logging_ops\",\n        \":summary_audio_op\",\n        \":summary_image_op\",\n        \":summary_tensor_op\",\n    ],\n)\n\nLOGGING_DEPS = [\n    \"@com_google_absl//absl/strings\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    # TODO(b/162630222): remove this dependency.\n    \"//tensorflow/c/kernels:histogram_summary_op\",\n    \"//tensorflow/c/kernels:merge_summary_op\",\n    \"//tensorflow/c/kernels:summary_op\",\n    \"//tensorflow/core/util:determinism_for_kernels\",\n]\n\ntf_kernel_library(\n    name = \"logging_ops\",\n    prefix = \"logging_ops\",\n    deps = LOGGING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"summary_audio_op\",\n    prefix = \"summary_audio_op\",\n    deps = LOGGING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"summary_image_op\",\n    prefix = \"summary_image_op\",\n    deps = LOGGING_DEPS + [\"//tensorflow/core/lib/png:png_io\"],\n)\n\n# TODO(b/162630222): remove this target\ncc_library(\n    name = \"summary_op\",\n    deps = [\n        \"//tensorflow/c/kernels:histogram_summary_op\",\n        \"//tensorflow/c/kernels:merge_summary_op\",\n        \"//tensorflow/c/kernels:summary_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"summary_tensor_op\",\n    prefix = \"summary_tensor_op\",\n    deps = LOGGING_DEPS,\n)\n\ntf_cc_tests(\n    name = \"bonus3_tests\",\n    size = \"small\",\n    srcs = [\n        \"logging_ops_test.cc\",\n        \"summary_audio_op_test.cc\",\n        \"summary_image_op_test.cc\",\n        \"summary_op_test.cc\",\n        \"summary_tensor_op_test.cc\",\n    ],\n    deps = [\n        \":logging\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/platform:status_matchers\",\n        \"//tensorflow/core/util:determinism_test_util\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"manip\",\n    deps = [\n        \":roll_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"roll_op\",\n    srcs = [\"roll_op.cc\"],\n    hdrs = [\"roll_op.h\"],\n    gpu_srcs = [\n        \"roll_op_gpu.cu.cc\",\n        \"roll_op.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"roll_op_test\",\n    size = \"small\",\n    srcs = [\"roll_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":roll_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"resource_ops_test\",\n    size = \"small\",\n    srcs = [\"resource_ops_test.cc\"],\n    deps = [\n        \":dense_update_functor\",\n        \":ops_testutil\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"lookup_ops_test\",\n    size = \"small\",\n    srcs = [\"lookup_ops_test.cc\"],\n    deps = [\n        \":lookup_table_op\",\n        \":ops_testutil\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\nMATH_DEPS = [\n    \":fill_functor\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:math_grad\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core/framework:op_requires\",\n    \"//third_party/eigen3\",\n]\n\ntf_kernel_library(\n    name = \"sparse_matmul_op\",\n    defines = select({\n        \":xsmm\": [\"TENSORFLOW_USE_LIBXSMM\"],\n        \"//conditions:default\": [],\n    }),\n    prefix = \"sparse_matmul_op\",\n    deps = MATH_DEPS + [\":eigen_contraction_kernel\"] + select({\n        \":xsmm\": [\n            \"@libxsmm_archive//:xsmm_avx\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\ncc_library(\n    name = \"math\",\n    deps = [\n        \":aggregate_ops\",\n        \":argmax_op\",\n        \":betainc_op\",\n        \":bincount_op\",\n        \":bucketize_op\",\n        \":cast_op\",\n        \":check_numerics_op\",\n        \":cross_op\",\n        \":cwise_op\",\n        \":fft_ops\",\n        \":histogram_op\",\n        \":matmul_op\",\n        \":nextafter_op\",\n        \":population_count_op\",\n        \":reduction_ops\",\n        \":scan_ops\",\n        \":segment_reduction_ops\",\n        \":sequence_ops\",\n        \":sparse_matmul_op\",\n        \"//tensorflow/core/kernels/special_math:special_math_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"aggregate_ops\",\n    prefix = \"aggregate_ops\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"argmax_op\",\n    prefix = \"argmax_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"batch_matmul_op\",\n    deps = [\":matmul_op\"],\n)\n\ntf_kernel_library(\n    name = \"matmul_op\",\n    # <prefix>*impl.h are excluded by default from the CPU build, add explicitly.\n    hdrs = [\"matmul_op_impl.h\"],\n    defines = select({\n        \":xsmm\": [\"TENSORFLOW_USE_LIBXSMM\"],\n        \"//conditions:default\": [],\n    }),\n    prefix = \"matmul_op\",\n    deps = MATH_DEPS + [\n        \":eigen_contraction_kernel\",\n        \":fused_eigen_output_kernels\",\n    ] + select({\n        \":xsmm\": [\"@libxsmm_archive//:xsmm_avx\"],\n        \"//conditions:default\": [],\n    }) + mkl_deps() + if_cuda([\n        \"//tensorflow/core/platform/default/build_config:cublas_plugin\",\n    ]) + if_cuda_or_rocm([\":gpu_utils\"]),\n)\n\ntf_kernel_library(\n    name = \"betainc_op\",\n    prefix = \"betainc_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"bucketize_op\",\n    gpu_srcs = [\"gpu_device_array.h\"],\n    prefix = \"bucketize_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"cast_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"cast_op\",\n    deps = MATH_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:cast_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"check_numerics_op\",\n    prefix = \"check_numerics_op\",\n    deps = MATH_DEPS + [\"//tensorflow/core:framework_internal\"],\n)\n\ntf_kernel_library(\n    name = \"cross_op\",\n    prefix = \"cross_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"cwise_op\",\n    copts = if_mlir_generated_cpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_CPU_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_experimental_kernels_enabled([\n        \"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\",\n    ]) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_cpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_CPU_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_experimental_kernels_enabled([\n        \"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\",\n    ]) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"cwise_op\",\n    deps = MATH_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:cwise_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"nextafter_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"nextafter_op\",\n    deps = MATH_DEPS + [\n        \":cwise_op\",\n        \"//tensorflow/core/kernels/mlir_generated:nextafter_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"population_count_op\",\n    prefix = \"population_count_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"fft_ops\",\n    prefix = \"fft_ops\",\n    deps = MATH_DEPS + [\n    ] + if_cuda([\n        \"//tensorflow/core/platform/default/build_config:cufft_plugin\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"reduction_ops\",\n    gpu_srcs = [\"reduction_gpu_kernels.cu.h\"],\n    prefix = \"reduction_ops\",\n    deps = MATH_DEPS + [\n        \":gpu_prim_hdrs\",\n        \":transpose_functor\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"segment_reduction_ops\",\n    prefix = \"segment_reduction_ops\",\n    deps = MATH_DEPS + [\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda_or_rocm([\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"scan_ops\",\n    srcs = [\"scan_ops.cc\"],\n    hdrs = [\"scan_ops.h\"],\n    gpu_srcs = [\n        \"scan_ops.h\",\n        \"scan_ops_gpu.h\",\n        \"scan_ops_gpu_double.cu.cc\",\n        \"scan_ops_gpu_float.cu.cc\",\n        \"scan_ops_gpu_half.cu.cc\",\n        \"scan_ops_gpu_int.cu.cc\",\n    ],\n    deps = MATH_DEPS + [\":gpu_prim_hdrs\"],\n)\n\ntf_kernel_library(\n    name = \"sequence_ops\",\n    prefix = \"sequence_ops\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"unary_ops_composition\",\n    prefix = \"unary_ops_composition\",\n    deps = MATH_DEPS + [\n        \":cwise_op\",\n        \":relu_op\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sequence_ops_test\",\n    size = \"small\",\n    srcs = [\"sequence_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sequence_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"cast_op_test\",\n    size = \"small\",\n    srcs = [\"cast_op_test.cc\"],\n    deps = [\n        \":cast_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"cross_op_test\",\n    size = \"small\",\n    srcs = [\"cross_op_test.cc\"],\n    deps = [\n        \":cross_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"sparse_tests\",\n    size = \"small\",\n    srcs = [\n        \"sparse_add_op_test.cc\",\n        \"sparse_dense_binary_op_shared_test.cc\",\n        \"sparse_reduce_sum_op_test.cc\",\n    ],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sparse_add_op\",\n        \":sparse_dense_binary_op_shared\",\n        \":sparse_reduce_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"cwise_ops_test\",\n    size = \"small\",\n    srcs = [\"cwise_ops_test.cc\"],\n    deps = [\n        \":cwise_op\",\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/framework:bounds_check\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"unary_ops_composition_test\",\n    size = \"small\",\n    srcs = [\"unary_ops_composition_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":unary_ops_composition\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"matmul_op_test\",\n    size = \"small\",\n    srcs = [\"matmul_op_test.cc\"],\n    deps = [\n        \":matmul_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/algorithm:container\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"scan_ops_test\",\n    size = \"small\",\n    srcs = [\"scan_ops_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scan_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"reduction_ops_test\",\n    size = \"small\",\n    srcs = [\"reduction_ops_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":reduction_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"segment_reduction_ops_test\",\n    size = \"small\",\n    srcs = [\"segment_reduction_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":segment_reduction_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"immutable_constant_op_test\",\n    srcs = [\"immutable_constant_op_test.cc\"],\n    deps = [\n        \":array\",\n        \":immutable_constant_op\",\n        \":matmul_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":random_shuffle_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"sparse_matmul_op_test\",\n    size = \"small\",\n    srcs = [\"sparse_matmul_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sparse_matmul_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"split_op_test\",\n    size = \"small\",\n    srcs = [\"split_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":split_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"split_v_op_test\",\n    size = \"small\",\n    srcs = [\"split_v_op_test.cc\"],\n    tags = [\n        \"no_windows\",  # split_v_op uses lrand48 which does not exist on Windows\n    ],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":split_v_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"diag_op_test\",\n    size = \"small\",\n    srcs = [\"diag_op_test.cc\"],\n    deps = [\n        \":diag_op\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# conv_grad_ops currently has to be built with conv_ops*.\n# TODO(josh11b, zhengxq): put these a separate libraries in \":nn\" below once\n# conv_ops_gpu.h has be separated into its own library.\ntf_kernel_library(\n    name = \"conv_ops\",\n    srcs = [\n        \"conv_grad_filter_ops.cc\",\n        \"conv_grad_input_ops_double.cc\",\n        \"conv_grad_input_ops_float.cc\",\n        \"conv_grad_input_ops_half.cc\",\n        \"conv_grad_input_ops_int32.cc\",\n        \"conv_grad_input_ops.cc\",\n        \"conv_grad_ops_3d.cc\",\n        \"deep_conv2d.cc\",\n    ] + select({\n        \":xsmm_convolutions\": [\"xsmm_conv2d.cc\"],\n        \"//conditions:default\": [],\n    }),\n    hdrs = [\n        \"fill_functor.h\",\n        \"conv_grad_ops.h\",\n        \"conv_grad_input_ops.h\",\n        \"deep_conv2d.h\",\n        \"gemm_functors.h\",\n        \"winograd_transform.h\",\n        \"conv_ops_fused_impl.h\",\n    ] + select({\n        \":xsmm_convolutions\": [\"xsmm_conv2d.h\"],\n        \"//conditions:default\": [],\n    }),\n    defines = select({\n        \":xsmm_convolutions\": [\"TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS\"],\n        \"//conditions:default\": [],\n    }) + select({\n        \":xsmm_backward_convolutions\": [\"TENSORFLOW_USE_LIBXSMM_BACKWARD_CONVOLUTIONS\"],\n        \"//conditions:default\": [],\n    }),\n    prefix = \"conv_ops\",\n    deps = [\n        \":conv_grad_shape_utils\",\n        \":conv_2d\",\n        \":conv_3d\",\n        \":eigen_contraction_kernel\",\n        \":fill_functor\",\n        \":fused_eigen_output_kernels\",\n        \":ops_util\",\n        \"@com_google_absl//absl/base:dynamic_annotations\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/synchronization\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/profiler/lib:scoped_annotation\",\n        \"//tensorflow/core/protobuf:autotuning_proto_cc\",\n        \"//tensorflow/core/util:image_resizer_state\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n    ] + select({\n        \":xsmm_convolutions\": [\n            \"@libxsmm_archive//:xsmm_avx\",\n        ],\n        \"//conditions:default\": [],\n    }) + if_cuda([\n        \"//tensorflow/stream_executor/gpu:gpu_asm_opts\",\n        \"//tensorflow/core/platform/default/build_config:cublas_plugin\",\n        \"//tensorflow/core/platform/default/build_config:cudnn_plugin\",\n        \"//tensorflow/stream_executor:tf_allocator_adapter\",\n        \"//tensorflow/stream_executor:stream_executor_headers\",\n        \"//tensorflow/core/platform:stream_executor\",\n    ]) + if_cuda_or_rocm([\n        \":gpu_utils\",\n        \"//tensorflow/stream_executor/gpu:redzone_allocator\",\n        \"//tensorflow/core/util/autotune_maps:conv_parameters\",\n        \"//tensorflow/core/util/autotune_maps:conv_autotune_maps\",\n    ]),\n)\n\ncc_library(\n    name = \"conv_grad_shape_utils\",\n    srcs = [\n        \"conv_grad_shape_utils.cc\",\n    ],\n    hdrs = [\n        \"conv_grad_shape_utils.h\",\n    ],\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"depthwise_conv_op\",\n    srcs = [\"depthwise_conv_op.cc\"],\n    hdrs = [\"depthwise_conv_op.h\"],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"depthwise_conv_op.h\",\n        \"depthwise_conv_op_gpu.h\",\n        \"depthwise_conv_op_gpu_double.cu.cc\",\n        \"depthwise_conv_op_gpu_float.cu.cc\",\n        \"depthwise_conv_op_gpu_half.cu.cc\",\n    ],\n    deps = [\n        \":conv_ops\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n        \"@local_config_cuda//cuda:cudnn_header\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"depthwise_conv_grad_op\",\n    hdrs = [\n        \"depthwise_conv_op.h\",\n    ],\n    prefix = \"depthwise_conv_grad_op\",\n    deps = [\n        \":cast_op\",\n        \":conv_ops\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda([\n        \"@local_config_cuda//cuda:cudnn_header\",\n    ]),\n)\n\ncc_library(\n    name = \"nn\",\n    deps = [\n        \":batch_norm_op\",\n        \":bias_op\",\n        \":conv_ops\",\n        \":data_format_ops\",\n        \":depthwise_conv_grad_op\",\n        \":depthwise_conv_op\",\n        \":dilation_ops\",\n        \":fused_batch_norm_op\",\n        \":in_topk_op\",\n        \":l2loss_op\",\n        \":lrn_op\",\n        \":nth_element_op\",\n        \":relu_op\",\n        \":softmax_op\",\n        \":softplus_op\",\n        \":softsign_op\",\n        \":topk_op\",\n        \":xent_op\",\n    ],\n)\n\n# Kernels for the nodes intented to be added to the graph by the Grappler optimizers.\ncc_library(\n    name = \"grappler\",\n    deps = [\n        \":unary_ops_composition\",\n    ],\n)\n\nNN_DEPS = if_cuda_or_rocm([\":conv_2d\"]) + [\n    \":eigen_contraction_kernel\",\n    \":ops_util\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:nn_grad\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//third_party/eigen3\",\n]\n\ntf_kernel_library(\n    name = \"batch_norm_op\",\n    prefix = \"batch_norm_op\",\n    deps = NN_DEPS,\n)\n\ntf_kernel_library(\n    name = \"data_format_ops\",\n    prefix = \"data_format_ops\",\n    deps = NN_DEPS,\n)\n\ntf_kernel_library(\n    name = \"bias_op\",\n    prefix = \"bias_op\",\n    deps = NN_DEPS + [\n        \":redux_functor\",\n        \"//tensorflow/core/profiler/lib:scoped_annotation\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]) + if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/stream_executor/cuda:cuda_stream\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"fused_batch_norm_op\",\n    prefix = \"fused_batch_norm_op\",\n    deps = NN_DEPS + [\n        \":fill_functor\",\n        \":redux_functor\",\n        \":transpose_functor\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda([\n        \"//tensorflow/core/platform:stream_executor\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"in_topk_op\",\n    prefix = \"in_topk_op\",\n    deps = NN_DEPS + [\":reduction_ops\"],\n)\n\ntf_kernel_library(\n    name = \"lrn_op\",\n    prefix = \"lrn_op\",\n    deps = NN_DEPS + if_rocm([\":conv_ops_gpu_hdrs\"]),\n)\n\ntf_kernel_library(\n    name = \"relu_op\",\n    copts = if_mlir_generated_experimental_kernels_enabled(\n        [\"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_experimental_kernels_enabled(\n        [\"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"relu_op\",\n    deps = NN_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:relu_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"softmax_op\",\n    prefix = \"softmax_op\",\n    deps = NN_DEPS + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]) + [\":gpu_prim_hdrs\"],\n)\n\ntf_kernel_library(\n    name = \"softplus_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"softplus_op\",\n    deps = NN_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:softplus_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"softsign_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"softsign_op\",\n    deps = NN_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:softsign_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"topk_op\",\n    srcs = [\"topk_op.cc\"],\n    hdrs = [\"topk_op.h\"],\n    gpu_srcs = [\n        \"topk_op.h\",\n        \"topk_op_gpu.h\",\n        \"topk_op_gpu_double.cu.cc\",\n        \"topk_op_gpu_float.cu.cc\",\n        \"topk_op_gpu_half.cu.cc\",\n        \"topk_op_gpu_uint64.cu.cc\",\n        \"topk_op_gpu_int64.cu.cc\",\n        \"topk_op_gpu_uint32.cu.cc\",\n        \"topk_op_gpu_int32.cu.cc\",\n        \"topk_op_gpu_int16.cu.cc\",\n        \"topk_op_gpu_uint16.cu.cc\",\n        \"topk_op_gpu_int8.cu.cc\",\n        \"topk_op_gpu_uint8.cu.cc\",\n    ],\n    deps = NN_DEPS + [\":gpu_prim_hdrs\"],\n)\n\ntf_kernel_library(\n    name = \"nth_element_op\",\n    prefix = \"nth_element_op\",\n    deps = NN_DEPS,\n)\n\ntf_kernel_library(\n    name = \"xent_op\",\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    prefix = \"xent_op\",\n    deps = NN_DEPS + [\"//tensorflow/core/util:determinism_for_kernels\"],\n)\n\ntf_kernel_library(\n    name = \"bincount_op\",\n    prefix = \"bincount_op\",\n    deps = [\n        \":fill_functor\",\n        \":gpu_prim_hdrs\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"histogram_op\",\n    prefix = \"histogram_op\",\n    deps = [\n        \":gpu_prim_hdrs\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"l2loss_op\",\n    prefix = \"l2loss_op\",\n    deps = [\n        \":gpu_prim_hdrs\",\n        \":reduction_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:nn_grad\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"lrn_op_test\",\n    srcs = [\"lrn_op_test.cc\"],\n    deps = [\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":xent_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"xent_op_test\",\n    srcs = [\"xent_op_test.cc\"],\n    deps = [\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":xent_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"nn_ops_test\",\n    srcs = [\"nn_ops_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":pooling_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"pooling_ops\",\n    srcs = [\n        \"avgpooling_op.cc\",\n        \"cudnn_pooling_gpu.cc\",\n        \"fractional_avg_pool_op.cc\",\n        \"fractional_max_pool_op.cc\",\n        \"fractional_pool_common.cc\",\n        \"maxpooling_op.cc\",\n        \"pooling_ops_3d.cc\",\n        \"pooling_ops_common.cc\",\n    ],\n    hdrs = [\n        \"avgpooling_op.h\",\n        \"cudnn_pooling_gpu.h\",\n        \"fractional_pool_common.h\",\n        \"maxpooling_op.h\",\n        \"pooling_ops_3d.h\",\n        \"pooling_ops_common.h\",\n    ],\n    gpu_srcs = [\n        \"avgpooling_op.h\",\n        \"avgpooling_op_gpu.cu.cc\",\n        \"maxpooling_op.h\",\n        \"maxpooling_op_gpu.cu.cc\",\n        \"maxpooling_op_gpu.h\",\n        \"pooling_ops_common.h\",\n        \"pooling_ops_common_gpu.h\",\n        \"pooling_ops_3d_gpu.h\",\n        \"pooling_ops_3d_gpu.cu.cc\",\n    ],\n    deps = [\n        \":conv_2d\",\n        \":conv_3d\",\n        \":conv_ops\",\n        \":eigen_helpers\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"fake_quant_ops\",\n    srcs = [\"fake_quant_ops.cc\"],\n    hdrs = [\"fake_quant_ops_functor.h\"],\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    gpu_srcs = [\n        \"fake_quant_ops_gpu.cu.cc\",\n        \"fake_quant_ops_functor.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"pooling_ops_hdrs\",\n    hdrs = [\n        \"avgpooling_op.h\",\n        \"maxpooling_op.h\",\n        \"pooling_ops_common.h\",\n    ],\n    deps = [\n        \":eigen_helpers\",\n        \":ops_util_hdrs\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dilation_ops\",\n    prefix = \"dilation_ops\",\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"batch_space_ops\",\n    srcs = [\n        \"batchtospace_op.cc\",\n        \"spacetobatch_functor.cc\",\n        \"spacetobatch_functor.h\",\n        \"spacetobatch_op.cc\",\n    ],\n    gpu_srcs = [\n        \"spacetobatch_functor.h\",\n        \"spacetobatch_functor_gpu.cu.cc\",\n    ],\n    visibility = [\":friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"spacetobatch_benchmark_test\",\n    srcs = [\"spacetobatch_benchmark_test.cc\"],\n    deps = [\n        \":batch_space_ops\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"depth_space_ops\",\n    srcs = [\n        \"depthtospace_op.cc\",\n        \"spacetodepth_op.cc\",\n    ],\n    hdrs = [\n        \"depthtospace_op.h\",\n        \"spacetodepth_op.h\",\n    ],\n    gpu_srcs = [\n        \"depthtospace_op.h\",\n        \"depthtospace_op_gpu.cu.cc\",\n        \"spacetodepth_op.h\",\n        \"spacetodepth_op_gpu.cu.cc\",\n    ],\n    visibility = [\":friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"parsing\",\n    deps = [\n        \":decode_compressed_op\",\n        \":decode_csv_op\",\n        \":decode_padded_raw_op\",\n        \":decode_raw_op\",\n        \":example_parsing_ops\",\n        \":parse_tensor_op\",\n        \":string_to_number_op\",\n    ],\n)\n\nPARSING_DEPS = [\n    \"@com_google_absl//absl/base\",\n    \"//tensorflow/core:core_cpu_internal\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:protos_all_cc\",\n]\n\ntf_kernel_library(\n    name = \"decode_csv_op\",\n    prefix = \"decode_csv_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"decode_raw_op\",\n    prefix = \"decode_raw_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"decode_padded_raw_op\",\n    prefix = \"decode_padded_raw_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"decode_compressed_op\",\n    prefix = \"decode_compressed_op\",\n    deps = [\n        \"//tensorflow/core:lib_internal\",\n    ] + PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"example_parsing_ops\",\n    prefix = \"example_parsing_ops\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"parse_tensor_op\",\n    prefix = \"parse_tensor_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_cc_test(\n    name = \"parse_tensor_test\",\n    srcs = [\"parse_tensor_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":parse_tensor_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_to_number_op\",\n    prefix = \"string_to_number_op\",\n    deps = PARSING_DEPS,\n)\n\ncc_library(\n    name = \"random_ops\",\n    deps = [\n        \":random_op\",\n        \":random_shuffle_op\",\n    ],\n)\n\nRANDOM_OPS_DEPS = [\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"random_op\",\n    prefix = \"random_op\",\n    deps = RANDOM_OPS_DEPS,\n)\n\ntf_kernel_library(\n    name = \"random_shuffle_op\",\n    prefix = \"random_shuffle_op\",\n    deps = RANDOM_OPS_DEPS,\n)\n\ntf_cuda_cc_test(\n    name = \"random_op_test\",\n    size = \"small\",\n    srcs = [\"random_op_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":random_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"stateful_random_ops_header\",\n    hdrs = [\"stateful_random_ops.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"stateless_random_ops_v2_header\",\n    hdrs = [\"stateless_random_ops_v2.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stateful_random_ops\",\n    prefix = \"stateful_random_ops\",\n    deps = [\n        \":dense_update_functor\",\n        \":fill_functor\",\n        \":gather_functor\",\n        \":mutex_ops\",\n        \":random_op\",\n        \":resource_variable_ops\",\n        \":scatter_functor\",\n        \":state\",\n        \":stateful_random_ops_header\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:variant\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stateless_random_gamma_op\",\n    prefix = \"stateless_random_gamma_op\",\n    deps = [\n        \":stateless_random_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stateless_random_ops\",\n    prefix = \"stateless_random_ops\",\n    deps = [\n        \":random_op\",\n        \":random_poisson_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n    ],\n)\n\ncc_library(\n    name = \"random_index_shuffle\",\n    srcs = [\"random_index_shuffle.cc\"],\n    hdrs = [\"random_index_shuffle.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"random_index_shuffle_test\",\n    srcs = [\"random_index_shuffle_test.cc\"],\n    deps = [\n        \":random_index_shuffle\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"random_index_shuffle_ops\",\n    prefix = \"random_index_shuffle_ops\",\n    deps = [\n        \":random_index_shuffle\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ],\n)\n\ncc_library(\n    name = \"required\",\n    deps = [\n        \":no_op\",\n        \":sendrecv_ops\",\n    ],\n)\n\nREQUIRED_DEPS = [\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:protos_all_cc\",\n]\n\ntf_kernel_library(\n    name = \"no_op\",\n    prefix = \"no_op\",\n    deps = REQUIRED_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sendrecv_ops\",\n    prefix = \"sendrecv_ops\",\n    deps = REQUIRED_DEPS + [\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sendrecv_ops_test\",\n    srcs = [\"sendrecv_ops_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),  # Required for benchmarking\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sendrecv_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"sparse\",\n    deps = [\n        \":deserialize_sparse_string_op\",\n        \":deserialize_sparse_variant_op\",\n        \":serialize_sparse_op\",\n        \":sparse_add_grad_op\",\n        \":sparse_add_op\",\n        \":sparse_concat_op\",\n        \":sparse_cross_op\",\n        \":sparse_dense_binary_op_shared\",\n        \":sparse_fill_empty_rows_op\",\n        \":sparse_reduce_op\",\n        \":sparse_reorder_op\",\n        \":sparse_reshape_op\",\n        \":sparse_slice_grad_op\",\n        \":sparse_slice_op\",\n        \":sparse_softmax\",\n        \":sparse_sparse_binary_op_shared\",\n        \":sparse_split_op\",\n        \":sparse_tensor_dense_add_op\",\n        \":sparse_tensor_dense_matmul_op\",\n        \":sparse_tensors_map_ops\",\n        \":sparse_to_dense_op\",\n        \":sparse_xent_op\",\n    ],\n)\n\nSPARSE_DEPS = [\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n]\n\ntf_kernel_library(\n    name = \"sparse_add_grad_op\",\n    prefix = \"sparse_add_grad_op\",\n    deps = SPARSE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_add_op\",\n    prefix = \"sparse_add_op\",\n    deps = SPARSE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_concat_op\",\n    prefix = \"sparse_concat_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_device_array\",\n        \":gpu_prim_helpers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_fill_empty_rows_op\",\n    prefix = \"sparse_fill_empty_rows_op\",\n    deps = SPARSE_DEPS + [\":gpu_prim_hdrs\"] + if_cuda_or_rocm([\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_cross_op\",\n    prefix = \"sparse_cross_op\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_reduce_op\",\n    prefix = \"sparse_reduce_op\",\n    deps = SPARSE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_dense_binary_op_shared\",\n    prefix = \"sparse_dense_binary_op_shared\",\n    deps = SPARSE_DEPS + [\n        \":cwise_op\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_sparse_binary_op_shared\",\n    prefix = \"sparse_sparse_binary_op_shared\",\n    deps = SPARSE_DEPS + [\n        \":cwise_op\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_reorder_op\",\n    prefix = \"sparse_reorder_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n        \":gpu_prim_helpers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_reshape_op\",\n    prefix = \"sparse_reshape_op\",\n    deps = SPARSE_DEPS + [\n        \":reshape_util\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_slice_grad_op\",\n    prefix = \"sparse_slice_grad_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_slice_op\",\n    prefix = \"sparse_slice_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_device_array\",\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_softmax\",\n    prefix = \"sparse_softmax\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_split_op\",\n    prefix = \"sparse_split_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_device_array\",\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_tensor_dense_add_op\",\n    prefix = \"sparse_tensor_dense_add_op\",\n    deps = SPARSE_DEPS + [\n        \":scatter_functor\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_tensor_dense_matmul_op\",\n    prefix = \"sparse_tensor_dense_matmul_op\",\n    deps = SPARSE_DEPS + [\n        \":fill_functor\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_to_dense_op\",\n    prefix = \"sparse_to_dense_op\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n    ] + if_cuda_or_rocm([\n        \":gpu_utils\",\n        \"//tensorflow/core/platform:stream_executor\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_xent_op\",\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    prefix = \"sparse_xent_op\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]) + if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"serialize_sparse_op\",\n    prefix = \"serialize_sparse_op\",\n    deps = SPARSE_DEPS + [\n        \":reshape_util\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"deserialize_sparse_string_op\",\n    prefix = \"deserialize_sparse_string_op\",\n    deps = SPARSE_DEPS + [\n        \":reshape_util\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"deserialize_sparse_variant_op\",\n    prefix = \"deserialize_sparse_variant_op\",\n    deps = SPARSE_DEPS + [\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_tensors_map_ops\",\n    prefix = \"sparse_tensors_map_ops\",\n    deps = SPARSE_DEPS,\n)\n\ntf_cuda_cc_tests(\n    name = \"sparse2_tests\",\n    size = \"small\",\n    srcs = [\n        \"sparse_tensor_dense_matmul_op_test.cc\",\n        \"sparse_to_dense_op_test.cc\",\n        \"sparse_xent_op_test.cc\",\n    ],\n    deps = [\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sparse\",\n        \":xent_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"loss_updaters\",\n    hdrs = [\n        \"hinge-loss.h\",\n        \"logistic-loss.h\",\n        \"loss.h\",\n        \"poisson-loss.h\",\n        \"smooth-hinge-loss.h\",\n        \"squared-loss.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework_headers_lib\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"loss_test\",\n    size = \"small\",\n    srcs = [\"loss_test.cc\"],\n    deps = [\n        \":loss_updaters\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sdca_ops_test\",\n    size = \"small\",\n    srcs = [\"sdca_ops_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),  # Required for benchmarking\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sdca_ops\",\n    prefix = \"sdca_ops\",\n    deps = [\n        \":loss_updaters\",\n        \":sdca_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/strings:str_format\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"sdca_internal\",\n    srcs = [\"sdca_internal.cc\"],\n    hdrs = [\"sdca_internal.h\"],\n    deps = [\n        \":eigen_contraction_kernel\",\n        \":loss_updaters\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"state\",\n    deps = [\n        \":count_up_to_op\",\n        \":dense_update_ops\",\n        \":scatter_nd_op\",\n        \":scatter_op\",\n        \":variable_ops\",\n    ],\n)\n\nSTATE_DEPS = [\n    \":assign_op\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \":fill_functor\",\n    \":scatter_functor\",\n    \"//third_party/eigen3\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"count_up_to_op\",\n    prefix = \"count_up_to_op\",\n    deps = STATE_DEPS + [\":variable_ops\"],\n)\n\ntf_kernel_library(\n    name = \"dense_update_ops\",\n    prefix = \"dense_update_ops\",\n    deps = STATE_DEPS + [\":dense_update_functor\"],\n)\n\ntf_kernel_library(\n    name = \"scatter_op\",\n    prefix = \"scatter_op\",\n    deps = STATE_DEPS + [\"//tensorflow/core/util:determinism_for_kernels\"],\n)\n\ntf_kernel_library(\n    name = \"count_ops\",\n    prefix = \"count_ops\",\n    deps = STATE_DEPS + [\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"//tensorflow/core/framework:op_requires\",\n    ],\n)\n\ntf_cc_test(\n    name = \"count_ops_test\",\n    size = \"small\",\n    srcs = [\"count_ops_test.cc\"],\n    deps = [\n        \":count_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"scatter_nd_util\",\n    srcs = [\"scatter_nd_util.cc\"],\n    hdrs = [\"scatter_nd_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"scatter_nd_op\",\n    srcs = [\n        \"scatter_nd_op.cc\",\n        \"scatter_nd_op_cpu_impl_0.cc\",\n        \"scatter_nd_op_cpu_impl_1.cc\",\n        \"scatter_nd_op_cpu_impl_2.cc\",\n        \"scatter_nd_op_cpu_impl_3.cc\",\n        \"scatter_nd_op_cpu_impl_4.cc\",\n        \"scatter_nd_op_cpu_impl_5.cc\",\n        \"scatter_nd_op_cpu_impl_6.cc\",\n        \"scatter_nd_op_cpu_impl_7.cc\",\n    ],\n    hdrs = [\n        \"scatter_nd_op.h\",\n        \"scatter_nd_op_cpu_impl.h\",\n    ],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"scatter_nd_op.h\",\n        \"scatter_nd_op_gpu.cu.cc\",\n    ],\n    deps = STATE_DEPS + [\n        \":scatter_nd_util\",\n        \":dense_update_functor\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \":inplace_ops\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"variable_ops\",\n    prefix = \"variable_ops\",\n    deps = STATE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"mutex_ops\",\n    prefix = \"mutex_ops\",\n    deps = STATE_DEPS + [\":ops_util\"],\n)\n\ntf_cc_test(\n    name = \"scatter_op_test\",\n    size = \"small\",\n    srcs = [\"scatter_op_test.cc\"],\n    deps = [\n        \":fill_functor\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scatter_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"scatter_nd_op_test\",\n    size = \"small\",\n    srcs = [\"scatter_nd_op_test.cc\"],\n    tags = [\"noasan\"],  # http://b/32635055\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scatter_nd_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"string\",\n    deps = [\n        \":as_string_op\",\n        \":base64_ops\",\n        \":reduce_join_op\",\n        \":regex_full_match_op\",\n        \":regex_replace_op\",\n        \":string_format_op\",\n        \":string_join_op\",\n        \":string_length_op\",\n        \":string_lower_op\",\n        \":string_ngrams_op\",\n        \":string_split_op\",\n        \":string_strip_op\",\n        \":string_to_hash_bucket_op\",\n        \":string_upper_op\",\n        \":substr_op\",\n        \":tensor_to_hash_bucket_op\",\n        \":unicode_ops\",\n        \":unicode_script_op\",\n        \":unsorted_segment_join_op\",\n    ],\n)\n\ncc_library(\n    name = \"string_util\",\n    srcs = [\"string_util.cc\"],\n    hdrs = [\"string_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"@icu//:common\",\n    ],\n)\n\nSTRING_DEPS = [\n    \"//tensorflow/core/framework:bounds_check\",\n    \":string_util\",\n    \"//third_party/eigen3\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"string_to_hash_bucket_op\",\n    srcs = [\n        \"string_to_hash_bucket_fast_op.cc\",\n        \"string_to_hash_bucket_op.cc\",\n    ],\n    hdrs = [\n        \"string_to_hash_bucket_fast_op.h\",\n        \"string_to_hash_bucket_op.h\",\n    ],\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"tensor_to_hash_bucket_op\",\n    prefix = \"tensor_to_hash_bucket_op\",\n    deps = STRING_DEPS + if_oss(\n        if_cuda([\"@farmhash_gpu_archive//:farmhash_gpu\"]),\n        tf_fingerprint_deps(),\n    ),\n)\n\ntf_kernel_library(\n    name = \"reduce_join_op\",\n    prefix = \"reduce_join_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"unsorted_segment_join_op\",\n    prefix = \"unsorted_segment_join_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"string_format_op\",\n    prefix = \"string_format_op\",\n    deps = STRING_DEPS + [\"@com_google_absl//absl/strings\"],\n)\n\ntf_cc_test(\n    name = \"string_format_op_test\",\n    size = \"small\",\n    srcs = [\"string_format_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":string_format_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_join_op\",\n    prefix = \"string_join_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"string_length_op\",\n    prefix = \"string_length_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"regex_full_match_op\",\n    prefix = \"regex_full_match_op\",\n    deps = STRING_DEPS + [\"@com_googlesource_code_re2//:re2\"],\n)\n\ntf_kernel_library(\n    name = \"regex_replace_op\",\n    prefix = \"regex_replace_op\",\n    deps = STRING_DEPS + [\"@com_googlesource_code_re2//:re2\"],\n)\n\ntf_cc_test(\n    name = \"regex_replace_op_test\",\n    size = \"small\",\n    srcs = [\"regex_replace_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":regex_replace_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_split_op\",\n    prefix = \"string_split_op\",\n    deps = STRING_DEPS,\n)\n\ntf_cc_test(\n    name = \"string_split_op_test\",\n    size = \"small\",\n    srcs = [\"string_split_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":string_split_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_ngrams_op\",\n    srcs = [\"string_ngrams_op.cc\"],\n    deps = STRING_DEPS + [\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"string_ngrams_op_test\",\n    srcs = [\"string_ngrams_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":string_ngrams_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_strip_op\",\n    prefix = \"string_strip_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"string_lower_op\",\n    prefix = \"string_lower_op\",\n    deps = STRING_DEPS + [\n        \"@com_google_absl//absl/strings\",\n        \"@icu//:common\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_upper_op\",\n    prefix = \"string_upper_op\",\n    deps = STRING_DEPS + [\n        \"@com_google_absl//absl/strings\",\n        \"@icu//:common\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"substr_op\",\n    prefix = \"substr_op\",\n    deps = STRING_DEPS,\n)\n\ntf_cc_test(\n    name = \"substr_op_test\",\n    size = \"small\",\n    srcs = [\"substr_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":substr_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"as_string_op\",\n    prefix = \"as_string_op\",\n    deps = STRING_DEPS,\n)\n\ntf_cc_test(\n    name = \"as_string_op_test\",\n    size = \"small\",\n    srcs = [\"as_string_op_test.cc\"],\n    deps = [\n        \":as_string_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"unicode_ops\",\n    prefix = \"unicode_ops\",\n    deps = [\n        \":string_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n        \"//third_party/icu/data:conversion_data\",\n        \"@icu//:common\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"base64_ops\",\n    prefix = \"base64_ops\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"training_ops\",\n    prefix = \"training_ops\",\n    deps = [\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"training_ops_test\",\n    size = \"small\",\n    srcs = [\"training_ops_test.cc\"],\n    deps = [\n        \":dense_update_ops\",\n        \":ops_util\",\n        \":training_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"multinomial_op\",\n    prefix = \"multinomial_op\",\n    deps = [\n        \":random_op\",\n        \":random_ops\",\n        \":stateless_random_ops\",\n        \":gpu_prim_hdrs\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ] + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]),\n)\n\ntf_cuda_cc_test(\n    name = \"multinomial_op_test\",\n    size = \"small\",\n    srcs = [\"multinomial_op_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":multinomial_op\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"parameterized_truncated_normal_op\",\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    prefix = \"parameterized_truncated_normal_op\",\n    deps = [\n        \":stateless_random_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"parameterized_truncated_normal_op_test\",\n    size = \"small\",\n    srcs = [\"parameterized_truncated_normal_op_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":ops_util\",\n        \":parameterized_truncated_normal_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"random_binomial_op\",\n    prefix = \"random_binomial_op\",\n    deps = [\n        \":cwise_op\",\n        \":random_op\",\n        \":resource_variable_ops\",\n        \":stateful_random_ops\",\n        \":stateless_random_ops\",\n        \":training_op_helpers\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:random_ops_op_lib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"random_binomial_op_test\",\n    size = \"small\",\n    srcs = [\"random_binomial_op_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \":random_binomial_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"random_poisson_op\",\n    prefix = \"random_poisson_op\",\n    deps = [\n        \":random_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"random_poisson_op_test\",\n    size = \"small\",\n    srcs = [\"random_poisson_op_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \":random_poisson_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"word2vec_kernels\",\n    prefix = \"word2vec_kernels\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:word2vec_ops\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"encode_wav_op\",\n    prefix = \"encode_wav_op\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/framework:bounds_check\",\n    ],\n)\n\ntf_cc_test(\n    name = \"encode_wav_op_test\",\n    size = \"small\",\n    srcs = [\"encode_wav_op_test.cc\"],\n    deps = [\n        \":decode_wav_op\",\n        \":encode_wav_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"decode_wav_op\",\n    prefix = \"decode_wav_op\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"decode_wav_op_test\",\n    size = \"small\",\n    srcs = [\"decode_wav_op_test.cc\"],\n    deps = [\n        \":decode_wav_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\nalias(\n    name = \"spectrogram_test_data\",\n    actual = \"//tensorflow/core/kernels/spectrogram_test_data:spectrogram_test_data\",\n    visibility = [\"//visibility:public\"],\n)\n\ncc_library(\n    name = \"spectrogram\",\n    srcs = [\"spectrogram.cc\"],\n    hdrs = [\"spectrogram.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/fft2d:fft2d_headers\",\n        \"@fft2d\",\n    ],\n)\n\ncc_library(\n    name = \"spectrogram_test_utils\",\n    testonly = 1,\n    srcs = [\"spectrogram_test_utils.cc\"],\n    hdrs = [\"spectrogram_test_utils.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n    ],\n)\n\ntf_cc_binary(\n    name = \"spectrogram_convert_test_data\",\n    testonly = 1,\n    srcs = [\"spectrogram_convert_test_data.cc\"],\n    deps = [\n        \":spectrogram_test_utils\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cc_test(\n    name = \"spectrogram_test\",\n    size = \"medium\",\n    srcs = [\"spectrogram_test.cc\"],\n    data = [\":spectrogram_test_data\"],\n    deps = [\n        \":spectrogram\",\n        \":spectrogram_test_utils\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/platform:resource_loader\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"spectrogram_op\",\n    prefix = \"spectrogram_op\",\n    deps = [\n        \":spectrogram\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cuda_cc_test(\n    name = \"spectrogram_op_test\",\n    size = \"small\",\n    srcs = [\"spectrogram_op_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \":spectrogram_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"mfcc_dct\",\n    srcs = [\"mfcc_dct.cc\"],\n    hdrs = [\"mfcc_dct.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"mfcc_dct_test\",\n    size = \"small\",\n    srcs = [\"mfcc_dct_test.cc\"],\n    deps = [\n        \":mfcc_dct\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"mfcc_mel_filterbank\",\n    srcs = [\"mfcc_mel_filterbank.cc\"],\n    hdrs = [\"mfcc_mel_filterbank.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"mfcc_mel_filterbank_test\",\n    size = \"small\",\n    srcs = [\"mfcc_mel_filterbank_test.cc\"],\n    deps = [\n        \":mfcc_mel_filterbank\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"mfcc\",\n    srcs = [\"mfcc.cc\"],\n    hdrs = [\"mfcc.h\"],\n    copts = tf_copts(),\n    deps = [\n        \":mfcc_dct\",\n        \":mfcc_mel_filterbank\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"mfcc_test\",\n    size = \"small\",\n    srcs = [\"mfcc_test.cc\"],\n    deps = [\n        \":mfcc\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"mfcc_op\",\n    prefix = \"mfcc_op\",\n    deps = [\n        \":mfcc\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cuda_cc_test(\n    name = \"mfcc_op_test\",\n    size = \"small\",\n    srcs = [\"mfcc_op_test.cc\"],\n    deps = [\n        \":mfcc_op\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"audio\",\n    deps = [\n        \":decode_wav_op\",\n        \":encode_wav_op\",\n        \":mfcc_op\",\n        \":spectrogram_op\",\n    ],\n)\n\ncc_library(\n    name = \"meta_support\",\n    srcs = [\"meta_support.cc\"],\n    hdrs = [\"meta_support.h\"],\n    deps = [\n        \":quantization_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:mutex\",\n        \"@gemmlowp\",\n    ],\n)\n\n# Android libraries -----------------------------------------------------------\nfilegroup(\n    name = \"mobile_srcs\",\n    srcs = [\n        \"avgpooling_op.h\",\n        \"batch_util.h\",\n        \"cwise_ops.h\",\n        \"cwise_ops_common.h\",\n        \"cwise_ops_gradients.h\",\n        \"eigen_activations.h\",\n        \"eigen_attention.h\",\n        \"eigen_backward_cuboid_convolutions.h\",\n        \"eigen_backward_spatial_convolutions.h\",\n        \"eigen_convolution_helpers.h\",\n        \"eigen_cuboid_convolution.h\",\n        \"eigen_pooling.h\",\n        \"eigen_spatial_convolutions.h\",\n        \"eigen_spatial_convolutions-inl.h\",\n        \"fifo_queue.h\",\n        \"initializable_lookup_table.cc\",\n        \"initializable_lookup_table.h\",\n        \"lookup_util.cc\",\n        \"lookup_util.h\",\n        \"maxpooling_op.h\",\n        \"ops_util.h\",\n        \"padding_fifo_queue.h\",\n        \"pooling_ops_common.cc\",\n        \"pooling_ops_common.h\",\n        \"queue_base.h\",\n        \"queue_op.h\",\n        \"typed_queue.h\",\n    ],\n)\n\nalias(\n    name = \"android_srcs\",\n    actual = \":mobile_srcs\",\n)\n\n# Core kernels we want on Android. Only a subset of kernels to keep\n# base library small.\nfilegroup(\n    name = \"portable_core_ops\",\n    srcs = [\n        \"aggregate_ops.cc\",\n        \"aggregate_ops.h\",\n        \"aggregate_ops_cpu.h\",\n        \"assign_op.h\",\n        \"bias_op.cc\",\n        \"bias_op.h\",\n        \"cast_op.cc\",\n        \"cast_op.h\",\n        \"cast_op_impl.h\",\n        \"cast_op_impl_bfloat.cc\",\n        \"cast_op_impl_bool.cc\",\n        \"cast_op_impl_complex128.cc\",\n        \"cast_op_impl_complex64.cc\",\n        \"cast_op_impl_double.cc\",\n        \"cast_op_impl_float.cc\",\n        \"cast_op_impl_half.cc\",\n        \"cast_op_impl_int16.cc\",\n        \"cast_op_impl_int32.cc\",\n        \"cast_op_impl_int64.cc\",\n        \"cast_op_impl_int8.cc\",\n        \"cast_op_impl_uint16.cc\",\n        \"cast_op_impl_uint32.cc\",\n        \"cast_op_impl_uint64.cc\",\n        \"cast_op_impl_uint8.cc\",\n        \"concat_lib.h\",\n        \"concat_lib_cpu.cc\",\n        \"concat_lib_cpu.h\",\n        \"concat_op.cc\",\n        \"constant_op.cc\",\n        \"constant_op.h\",\n        \"cwise_ops.h\",\n        \"cwise_ops_common.cc\",\n        \"cwise_ops_common.h\",\n        \"cwise_ops_gradients.h\",\n        \"dense_update_functor.cc\",\n        \"dense_update_functor.h\",\n        \"dense_update_ops.cc\",\n        \"example_parsing_ops.cc\",\n        \"fill_functor.cc\",\n        \"fill_functor.h\",\n        \"function_ops.cc\",\n        \"function_ops.h\",\n        \"gather_functor.h\",\n        \"gather_functor_batched.h\",\n        \"gather_nd_op.cc\",\n        \"gather_nd_op.h\",\n        \"gather_nd_op_cpu_impl_0.cc\",\n        \"gather_nd_op_cpu_impl_1.cc\",\n        \"gather_nd_op_cpu_impl_2.cc\",\n        \"gather_nd_op_cpu_impl_3.cc\",\n        \"gather_nd_op_cpu_impl_4.cc\",\n        \"gather_nd_op_cpu_impl_5.cc\",\n        \"gather_nd_op_cpu_impl_6.cc\",\n        \"gather_nd_op_cpu_impl_7.cc\",\n        \"gather_op.cc\",\n        \"identity_n_op.cc\",\n        \"identity_n_op.h\",\n        \"identity_op.cc\",\n        \"identity_op.h\",\n        \"immutable_constant_op.cc\",\n        \"immutable_constant_op.h\",\n        \"matmul_op_impl.h\",\n        \"matmul_op_real.cc\",\n        \"no_op.cc\",\n        \"no_op.h\",\n        \"one_hot_op.cc\",\n        \"one_hot_op.h\",\n        \"ops_util.h\",\n        \"pack_op.cc\",\n        \"pooling_ops_common.h\",\n        \"redux_functor.h\",\n        \"reshape_op.cc\",\n        \"reshape_op.h\",\n        \"reverse_sequence_op.cc\",\n        \"reverse_sequence_op.h\",\n        \"sendrecv_ops.cc\",\n        \"sendrecv_ops.h\",\n        \"sequence_ops.cc\",\n        \"sequence_ops.h\",\n        \"shape_ops.cc\",\n        \"shape_ops.h\",\n        \"slice_op.cc\",\n        \"slice_op.h\",\n        \"slice_op_cpu_impl_1.cc\",\n        \"slice_op_cpu_impl_2.cc\",\n        \"slice_op_cpu_impl_3.cc\",\n        \"slice_op_cpu_impl_4.cc\",\n        \"slice_op_cpu_impl_5.cc\",\n        \"slice_op_cpu_impl_6.cc\",\n        \"slice_op_cpu_impl_7.cc\",\n        \"slice_op_cpu_impl_8.cc\",\n        \"softmax_op.cc\",\n        \"softmax_op_functor.h\",\n        \"sparse_concat_op.h\",\n        \"sparse_concat_op.cc\",\n        \"split_lib.h\",\n        \"split_lib_cpu.cc\",\n        \"split_op.cc\",\n        \"split_v_op.cc\",\n        \"strided_slice_op.cc\",\n        \"strided_slice_op.h\",\n        \"strided_slice_op_inst_0.cc\",\n        \"strided_slice_op_inst_1.cc\",\n        \"strided_slice_op_inst_2.cc\",\n        \"strided_slice_op_inst_3.cc\",\n        \"strided_slice_op_inst_4.cc\",\n        \"strided_slice_op_inst_5.cc\",\n        \"strided_slice_op_inst_6.cc\",\n        \"strided_slice_op_inst_7.cc\",\n        \"strided_slice_op_inst_8.cc\",\n        \"unpack_op.cc\",\n        \"variable_ops.cc\",\n        \"variable_ops.h\",\n    ] + [\n        \"//tensorflow/c/kernels:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/image:non_max_suppression_op.cc\",\n        \"//tensorflow/core/kernels/image:non_max_suppression_op.h\",\n    ],\n)\n\n# Other kernels we may want on Android.\n#\n# The kernels can be consumed as a whole or in two groups for\n# supporting separate compilation. Note that the split into groups\n# is entirely for improving compilation time, and not for\n# organizational reasons; you should not depend on any\n# of those groups independently.\nfilegroup(\n    name = \"portable_extended_ops\",\n    srcs = [\n        \":portable_extended_ops_group1\",\n        \":portable_extended_ops_group2\",\n        \":portable_quantized_ops\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nfilegroup(\n    name = \"portable_extended_ops_headers\",\n    srcs = [\n        \"argmax_op.h\",\n        \"avgpooling_op.h\",\n        \"batch_norm_op.h\",\n        \"bincount_op.h\",\n        \"broadcast_to_op.h\",\n        \"bucketize_op.h\",\n        \"checkpoint_callback_manager.h\",\n        \"concat_lib.h\",\n        \"control_flow_ops.h\",\n        \"conv_2d.h\",\n        \"conv_3d.h\",\n        \"conv_ops.h\",\n        \"conv_ops_gpu.h\",\n        \"data_format_ops.h\",\n        \"depthtospace_op.h\",\n        \"depthwise_conv_op.h\",\n        \"diag_op.h\",\n        \"dilation_ops.h\",\n        \"fake_quant_ops_functor.h\",\n        \"fused_batch_norm_op.h\",\n        \"inplace_ops.cc\",\n        \"inplace_ops_functor.h\",\n        \"lookup_table_init_op.h\",\n        \"lookup_table_op.h\",\n        \"list_kernels.h\",\n        \"l2loss_op.h\",\n        \"map_kernels.h\",\n        \"maxpooling_op.h\",\n        \"mfcc.h\",\n        \"mfcc_dct.h\",\n        \"mfcc_mel_filterbank.h\",\n        \"multinomial_op.h\",\n        \"pad_op.h\",\n        \"partitioned_function_ops.h\",\n        \"pooling_ops_3d.h\",\n        \"ragged_tensor_variant.h\",\n        \"random_op.h\",\n        \"random_poisson_op.h\",\n        \"random_index_shuffle.h\",\n        \"reduction_ops.h\",\n        \"reduction_ops_common.h\",\n        \"relu_op.h\",\n        \"relu_op_functor.h\",\n        \"reshape_util.h\",\n        \"resource_variable_ops.h\",\n        \"resource_variable_util.h\",\n        \"reverse_op.h\",\n        \"roll_op.h\",\n        \"save_restore_tensor.h\",\n        \"scan_ops.h\",\n        \"scatter_functor.h\",\n        \"scatter_nd_op.h\",\n        \"scatter_nd_util.h\",\n        \"searchsorted_op.h\",\n        \"segment_reduction_ops.h\",\n        \"segment_reduction_ops_impl.h\",\n        \"softplus_op.h\",\n        \"softsign_op.h\",\n        \"spacetobatch_functor.h\",\n        \"spacetodepth_op.h\",\n        \"spectrogram.h\",\n        \"stateless_random_gamma_op.h\",\n        \"stateless_random_ops.h\",\n        \"stateless_random_ops_v2.h\",\n        \"sparse_xent_op.h\",\n        \"sparse_fill_empty_rows_op.h\",\n        \"sparse_reorder_op.h\",\n        \"sparse_slice_op.h\",\n        \"sparse_tensor_dense_matmul_op.h\",\n        \"string_util.h\",\n        \"string_to_hash_bucket_op.h\",\n        \"string_to_hash_bucket_fast_op.h\",\n        \"tensor_array.h\",\n        \"tensor_list.h\",\n        \"tensor_map.h\",\n        \"tile_functor.h\",\n        \"tile_ops_impl.h\",\n        \"topk_op.h\",\n        \"training_op_helpers.h\",\n        \"training_ops.h\",\n        \"transpose_functor.h\",\n        \"transpose_op.h\",\n        \"where_op.h\",\n        \"xent_op.h\",\n    ] + [\n        \"//tensorflow/core/kernels/data:portable_all_op_kernels_headers\",\n        \"//tensorflow/core/kernels/image:adjust_contrast_op.h\",\n        \"//tensorflow/core/kernels/image:adjust_hue_op.h\",\n        \"//tensorflow/core/kernels/image:adjust_saturation_op.h\",\n        \"//tensorflow/core/kernels/image:colorspace_op.h\",\n        \"//tensorflow/core/kernels/image:extract_image_patches_op.h\",\n        \"//tensorflow/core/kernels/image:image_ops.h\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op.h\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl.h\",\n        \"//tensorflow/core/kernels/image:resize_bilinear_op.h\",\n        \"//tensorflow/core/kernels/image:resize_nearest_neighbor_op.h\",\n        \"//tensorflow/core/kernels/linalg:linalg_ops_common.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_band_part_op.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_diag_op.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_set_diag_op.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_triangular_solve_op_impl.h\",\n        \"//tensorflow/core/kernels/linalg:qr_op_impl.h\",\n        \"//tensorflow/core/util:image_resizer_state.h\",\n    ],\n)\n\nfilegroup(\n    name = \"portable_extended_ops_group1\",\n    srcs = [\n        \":portable_extended_ops_headers\",\n        \"argmax_op.cc\",\n        \"avgpooling_op.cc\",\n        \"batch_norm_op.cc\",\n        \"bcast_ops.cc\",\n        \"check_numerics_op.cc\",\n        \"control_flow_ops.cc\",\n        \"conv_2d.h\",\n        \"conv_grad_filter_ops.cc\",\n        \"conv_grad_input_ops.h\",\n        \"conv_grad_input_ops_double.cc\",\n        \"conv_grad_input_ops_float.cc\",\n        \"conv_grad_input_ops_half.cc\",\n        \"conv_grad_input_ops_int32.cc\",\n        \"conv_grad_input_ops.cc\",\n        \"conv_grad_ops.h\",\n        \"conv_grad_ops_3d.cc\",\n        \"conv_grad_shape_utils.cc\",\n        \"conv_grad_shape_utils.h\",\n        \"conv_ops.cc\",\n        \"conv_ops_3d.cc\",\n        \"conv_ops_fused_double.cc\",\n        \"conv_ops_fused_float.cc\",\n        \"conv_ops_fused_half.cc\",\n        \"conv_ops_fused_image_transform.cc\",\n        \"conv_ops_fused_impl.h\",\n        \"conv_ops_using_gemm.cc\",\n        \"cwise_op_abs.cc\",\n        \"cwise_op_add_1.cc\",\n        \"cwise_op_add_2.cc\",\n        \"cwise_op_arg.cc\",\n        \"cwise_op_atan.cc\",\n        \"cwise_op_atan2.cc\",\n        \"cwise_op_bitwise_and.cc\",\n        \"cwise_op_bitwise_or.cc\",\n        \"cwise_op_bitwise_xor.cc\",\n        \"cwise_op_ceil.cc\",\n        \"cwise_op_complex.cc\",\n        \"cwise_op_conj.cc\",\n        \"cwise_op_cos.cc\",\n        \"cwise_op_cosh.cc\",\n        \"cwise_op_div.cc\",\n        \"cwise_op_equal_to_1.cc\",\n        \"cwise_op_equal_to_2.cc\",\n        \"cwise_op_erf.cc\",\n        \"cwise_op_exp.cc\",\n        \"cwise_op_floor.cc\",\n        \"cwise_op_floor_div.cc\",\n        \"cwise_op_floor_mod.cc\",\n        \"cwise_op_greater.cc\",\n        \"cwise_op_greater_equal.cc\",\n        \"cwise_op_imag.cc\",\n        \"cwise_op_invert.cc\",\n        \"cwise_op_isfinite.cc\",\n        \"cwise_op_isnan.cc\",\n        \"cwise_op_leakyrelu_bf16.cc\",\n        \"cwise_op_left_shift.cc\",\n        \"cwise_op_less.cc\",\n        \"cwise_op_less_equal.cc\",\n        \"cwise_op_log.cc\",\n        \"cwise_op_logical_and.cc\",\n        \"cwise_op_logical_not.cc\",\n        \"cwise_op_logical_or.cc\",\n        \"cwise_op_maximum.cc\",\n        \"cwise_op_minimum.cc\",\n        \"cwise_op_mul_1.cc\",\n        \"cwise_op_mul_2.cc\",\n        \"cwise_op_neg_1.cc\",\n        \"cwise_op_neg_2.cc\",\n        \"cwise_op_not_equal_to_1.cc\",\n        \"cwise_op_not_equal_to_2.cc\",\n        \"cwise_op_pow.cc\",\n        \"cwise_op_real.cc\",\n        \"cwise_op_reciprocal.cc\",\n        \"cwise_op_right_shift.cc\",\n        \"cwise_op_round.cc\",\n        \"cwise_op_rsqrt.cc\",\n        \"cwise_op_select.cc\",\n        \"cwise_op_sigmoid.cc\",\n        \"cwise_op_sign.cc\",\n        \"cwise_op_sin.cc\",\n        \"cwise_op_sinh.cc\",\n        \"cwise_op_sqrt.cc\",\n        \"cwise_op_square.cc\",\n        \"cwise_op_squared_difference.cc\",\n        \"cwise_op_sub.cc\",\n        \"cwise_op_tan.cc\",\n        \"cwise_op_tanh.cc\",\n        \"cwise_op_xdivy.cc\",\n        \"cwise_op_xlog1py.cc\",\n        \"cwise_op_xlogy.cc\",\n        \"data_format_ops.cc\",\n        \"decode_raw_op.cc\",\n        \"decode_wav_op.cc\",\n        \"deep_conv2d.cc\",\n        \"deep_conv2d.h\",\n        \"depthwise_conv_grad_op.cc\",\n        \"depthwise_conv_op.cc\",\n        \"dynamic_partition_op.cc\",\n        \"eigen_contraction_kernel.cc\",\n        \"eigen_contraction_kernel.h\",\n        \"encode_wav_op.cc\",\n        \"fake_quant_ops.cc\",\n        \"fifo_queue.cc\",\n        \"fifo_queue_op.cc\",\n        \"fingerprint_op.cc\",\n        \"fused_batch_norm_op.cc\",\n        \"fused_eigen_output_kernels.cc\",\n        \"fused_eigen_output_kernels.h\",\n        \"listdiff_op.cc\",\n        \"population_count_op.cc\",\n        \"population_count_op.h\",\n        \"winograd_transform.h\",\n    ] + [\n        \"//tensorflow/core/kernels/image:crop_and_resize_op.cc\",\n        \"//tensorflow/core/kernels/image:crop_and_resize_op.h\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_half.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_bfloat16.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_int32.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_int64.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_float.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_double.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_complex64.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_complex128.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl.h\",\n        \"//tensorflow/core/kernels/linalg:einsum_op.h\",\n        \"//tensorflow/core/kernels/image:decode_image_op.cc\",\n        \"//tensorflow/core/kernels/image:encode_jpeg_op.cc\",\n        \"//tensorflow/core/kernels/image:encode_png_op.cc\",\n        \"//tensorflow/core/kernels/image:colorspace_op.cc\",\n    ] + select({\n        \":xsmm_convolutions\": [\n            \"xsmm_conv2d.h\",\n            \"xsmm_conv2d.cc\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\nfilegroup(\n    name = \"portable_extended_ops_group2\",\n    srcs = [\n        \":portable_extended_ops_headers\",\n        \"as_string_op.cc\",\n        \"base64_ops.cc\",\n        \"batchtospace_op.cc\",\n        \"bincount_op.cc\",\n        \"broadcast_to_op.cc\",\n        \"bucketize_op.cc\",\n        \"checkpoint_callback_manager.cc\",\n        \"ctc_decoder_ops.cc\",\n        \"decode_padded_raw_op.cc\",\n        \"depthtospace_op.cc\",\n        \"diag_op.cc\",\n        \"dilation_ops.cc\",\n        \"dynamic_stitch_op.cc\",\n        \"fft_ops.cc\",\n        \"functional_ops.cc\",\n        \"in_topk_op.cc\",\n        \"in_topk_op.h\",\n        \"list_kernels.cc\",\n        \"logging_ops.cc\",\n        \"logging_ops.h\",\n        \"lookup_table_init_op.cc\",\n        \"lookup_table_op.cc\",\n        \"lrn_op.cc\",\n        \"l2loss_op.cc\",\n        \"map_kernels.cc\",\n        \"maxpooling_op.cc\",\n        \"mfcc.cc\",\n        \"mfcc_dct.cc\",\n        \"mfcc_mel_filterbank.cc\",\n        \"mfcc_op.cc\",\n        \"multinomial_op.cc\",\n        \"pad_op.cc\",\n        \"padding_fifo_queue.cc\",\n        \"padding_fifo_queue_op.cc\",\n        \"parse_tensor_op.cc\",\n        \"partitioned_function_ops.cc\",\n        \"pooling_ops_3d.cc\",\n        \"queue_base.cc\",\n        \"queue_op.cc\",\n        \"queue_ops.cc\",\n        \"ragged_tensor_variant.cc\",\n        \"ragged_range_op.cc\",\n        \"ragged_gather_op.cc\",\n        \"ragged_tensor_to_sparse_kernel.cc\",\n        \"ragged_tensor_to_tensor_op.cc\",\n        \"ragged_tensor_to_variant_op.cc\",\n        \"ragged_tensor_from_variant_op.cc\",\n        \"random_index_shuffle.h\",\n        \"random_index_shuffle.cc\",\n        \"random_index_shuffle_ops.cc\",\n        \"random_op.cc\",\n        \"random_op_cpu.h\",\n        \"random_ops_util.h\",\n        \"random_poisson_op.cc\",\n        \"random_shuffle_op.cc\",\n        \"reduce_join_op.cc\",\n        \"reduction_ops_all.cc\",\n        \"reduction_ops_any.cc\",\n        \"reduction_ops_common.cc\",\n        \"reduction_ops_max.cc\",\n        \"reduction_ops_mean.cc\",\n        \"reduction_ops_min.cc\",\n        \"reduction_ops_prod.cc\",\n        \"reduction_ops_sum.cc\",\n        \"regex_replace_op.cc\",\n        \"regex_full_match_op.cc\",\n        \"relu_op.cc\",\n        \"reshape_util.cc\",\n        \"resource_variable_ops.cc\",\n        \"resource_variable_util.cc\",\n        \"restore_op.cc\",\n        \"reverse_op.cc\",\n        \"roll_op.cc\",\n        \"save_op.cc\",\n        \"save_restore_tensor.cc\",\n        \"save_restore_v2_ops.cc\",\n        \"scan_ops.cc\",\n        \"scatter_functor.cc\",\n        \"scatter_nd_op.cc\",\n        \"scatter_nd_op_cpu_impl_0.cc\",\n        \"scatter_nd_op_cpu_impl_1.cc\",\n        \"scatter_nd_op_cpu_impl_2.cc\",\n        \"scatter_nd_op_cpu_impl_3.cc\",\n        \"scatter_nd_op_cpu_impl_4.cc\",\n        \"scatter_nd_op_cpu_impl_5.cc\",\n        \"scatter_nd_op_cpu_impl_6.cc\",\n        \"scatter_nd_op_cpu_impl_7.cc\",\n        \"scatter_nd_util.cc\",\n        \"searchsorted_op.cc\",\n        \"segment_reduction_ops_impl_1.cc\",\n        \"segment_reduction_ops_impl_2.cc\",\n        \"segment_reduction_ops_impl_3.cc\",\n        \"segment_reduction_ops_impl_4.cc\",\n        \"segment_reduction_ops_impl_5.cc\",\n        \"session_ops.cc\",\n        \"set_kernels.cc\",\n        \"softplus_op.cc\",\n        \"softsign_op.cc\",\n        \"spacetobatch_functor.cc\",\n        \"spacetobatch_op.cc\",\n        \"spacetodepth_op.cc\",\n        \"sparse_add_op.cc\",\n        \"sparse_cross_op.cc\",\n        \"sparse_reduce_op.cc\",\n        \"sparse_xent_op.cc\",\n        \"sparse_fill_empty_rows_op.cc\",\n        \"sparse_reorder_op.cc\",\n        \"sparse_reshape_op.cc\",\n        \"sparse_slice_op.cc\",\n        \"sparse_tensor_dense_matmul_op.cc\",\n        \"sparse_to_dense_op.cc\",\n        \"spectrogram.cc\",\n        \"spectrogram_op.cc\",\n        \"stack.cc\",\n        \"stack.h\",\n        \"stack_ops.cc\",\n        \"stateless_random_gamma_op.cc\",\n        \"stateless_random_ops.cc\",\n        \"stateless_random_ops_v2.cc\",\n        \"string_format_op.cc\",\n        \"string_join_op.cc\",\n        \"string_length_op.cc\",\n        \"string_lower_op.cc\",\n        \"string_util.cc\",\n        \"string_split_op.cc\",\n        \"string_strip_op.cc\",\n        \"string_to_hash_bucket_op.cc\",\n        \"string_to_hash_bucket_fast_op.cc\",\n        \"string_to_number_op.cc\",\n        \"substr_op.cc\",\n        \"tensor_array.cc\",\n        \"tensor_array_ops.cc\",\n        \"tensor_list.cc\",\n        \"tensor_map.cc\",\n        \"tile_functor_cpu.h\",\n        \"tile_functor_cpu_bfloat16.cc\",\n        \"tile_functor_cpu_bool.cc\",\n        \"tile_functor_cpu_complex128.cc\",\n        \"tile_functor_cpu_complex64.cc\",\n        \"tile_functor_cpu_double.cc\",\n        \"tile_functor_cpu_float.cc\",\n        \"tile_functor_cpu_half.cc\",\n        \"tile_functor_cpu_int16.cc\",\n        \"tile_functor_cpu_int32.cc\",\n        \"tile_functor_cpu_int64.cc\",\n        \"tile_functor_cpu_int8.cc\",\n        \"tile_functor_cpu_tstring.cc\",\n        \"tile_functor_cpu_uint32.cc\",\n        \"tile_functor_cpu_uint64.cc\",\n        \"tile_functor_cpu_uint8.cc\",\n        \"tile_functor_cpu_variant.cc\",\n        \"tile_ops.cc\",\n        \"tile_ops_cpu_impl_1.cc\",\n        \"tile_ops_cpu_impl_2.cc\",\n        \"tile_ops_cpu_impl_3.cc\",\n        \"tile_ops_cpu_impl_4.cc\",\n        \"tile_ops_cpu_impl_5.cc\",\n        \"tile_ops_cpu_impl_6.cc\",\n        \"tile_ops_cpu_impl_7.cc\",\n        \"topk_op.cc\",\n        \"training_op_helpers.cc\",\n        \"training_ops.cc\",\n        \"transpose_functor_cpu.cc\",\n        \"transpose_op.cc\",\n        \"unicode_ops.cc\",\n        \"unique_op.cc\",\n        \"unsorted_segment_join_op.cc\",\n        \"where_op.cc\",\n        \"whole_file_read_ops.cc\",\n        \"xent_op.cc\",\n    ] + [\n        \"//tensorflow/core/kernels/data:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/image:adjust_contrast_op.cc\",\n        \"//tensorflow/core/kernels/image:adjust_hue_op.cc\",\n        \"//tensorflow/core/kernels/image:adjust_saturation_op.cc\",\n        \"//tensorflow/core/kernels/image:extract_image_patches_op.cc\",\n        \"//tensorflow/core/kernels/image:image_ops.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_1.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_2.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_3.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_4.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_5.cc\",\n        \"//tensorflow/core/kernels/image:resize_bicubic_op.cc\",\n        \"//tensorflow/core/kernels/image:resize_bilinear_op.cc\",\n        \"//tensorflow/core/kernels/image:resize_nearest_neighbor_op.cc\",\n        \"//tensorflow/core/kernels/image:sample_distorted_bounding_box_op.cc\",\n        \"//tensorflow/core/kernels/linalg:cholesky_op.cc\",\n        \"//tensorflow/core/kernels/linalg:determinant_op.cc\",\n        \"//tensorflow/core/kernels/linalg:linalg_ops_common.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_band_part_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_diag_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_inverse_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_set_diag_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_triangular_solve_op_complex.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_triangular_solve_op_real.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_complex128.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_complex64.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_double.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_float.cc\",\n    ],\n)\n\nfilegroup(\n    name = \"portable_quantized_ops\",\n    srcs = [\n        \"dequantize_op.cc\",\n        \"meta_support.cc\",\n        \"meta_support.h\",\n        \"quantization_utils.cc\",\n        \"quantization_utils.h\",\n        \"quantize_down_and_shrink_range.cc\",\n        \"quantize_op.cc\",\n        \"quantized_activation_ops.cc\",\n        \"quantized_add_op.cc\",\n        \"quantized_batch_norm_op.cc\",\n        \"quantized_bias_add_op.cc\",\n        \"quantized_concat_op.cc\",\n        \"quantized_conv_ops.cc\",\n        \"quantized_instance_norm.cc\",\n        \"quantized_matmul_op.cc\",\n        \"quantized_mul_op.cc\",\n        \"quantized_pooling_ops.cc\",\n        \"quantized_reshape_op.cc\",\n        \"quantized_resize_bilinear_op.cc\",\n        \"reference_gemm.h\",\n        \"requantization_range_op.cc\",\n        \"requantize.cc\",\n        \"reshape_op.h\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nANDROID_TEXTUAL_HDRS = [\n    \"eigen_convolution_helpers.h\",\n    \"eigen_spatial_convolutions-inl.h\",\n    \"gather_nd_op_cpu_impl.h\",\n    \"gemm_functors.h\",\n    \"scatter_nd_op_cpu_impl.h\",\n    \"slice_op_cpu_impl.h\",\n    \"strided_slice_op_impl.h\",\n    \"tile_ops_cpu_impl.h\",\n]\n\n# A file group which contains nearly all available operators which\n# may work on mobile environment. This is intended to be used with selective\n# registration.\nfilegroup(\n    name = \"portable_all_ops\",\n    srcs = [\n        \"//tensorflow/c/kernels:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/data:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/image:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/linalg:portable_all_op_kernels\",\n    ] + glob(\n        [\n            \"*.cc\",\n            \"*.h\",\n        ],\n        exclude = [\n            \"*test.cc\",\n            \"*test_util*\",\n            \"*testutil*\",\n            \"*testlib*\",\n            \"*main.cc\",\n            \"*_gpu*\",\n            \"*_3d*\",\n            \"*.cu.*\",\n            # Helper files for tests\n            \"eigen_benchmark.h\",\n            # Ops already in android_srcs\n            \"pooling_ops_common.cc\",\n            # Ops which we are currently excluding because they are likely\n            # not used on Android. Those ops also do not compile if included,\n            # unless we add the additional deps they need.\n            \"tf_record_reader_op.*\",\n            \"cudnn_rnn_ops.*\",\n            \"lmdb_reader_op.*\",\n            \"string_to_hash_bucket_op.*\",\n            \"sdca_ops.*\",\n            \"sdca_internal.*\",\n            \"sparse_cross_op.*\",\n            \"text_line_reader_op.*\",\n            \"summary_image_op.*\",\n            \"identity_reader_op.*\",\n            \"fixed_length_record_reader_op.*\",\n            \"sample_distorted_bounding_box_op.*\",\n            \"ctc_loss_op.*\",\n            \"summary_interface.*\",\n            \"summary_kernels.*\",\n            \"spectrogram_convert_test_data.cc\",\n            \"decode_proto_op.cc\",\n            \"encode_proto_op.cc\",\n            \"sobol_op.cc\",\n            # Excluded due to experimental status:\n            \"debug_ops.*\",\n            \"mutex_ops.*\",\n            \"batch_kernels.*\",\n            \"regex_replace_op.cc\",\n            \"string_lower_op.cc\",  # Requires ICU for unicode.\n            \"string_upper_op.cc\",  # Requires ICU for unicode.\n            \"unicode_ops.cc\",\n            \"unicode_script_op.cc\",\n            # Ops that are inherently incompatible with Android (e.g. tied to x86 platform).\n            \"xsmm_*\",\n            \"nextafter_op.cc\",\n            \"initializable_lookup_table.*\",\n            \"lookup_util.*\",\n        ] + ANDROID_TEXTUAL_HDRS,\n    ) + [\n        # Referenced by stateful_random_ops.cc but excluded with the *gpu*\n        # rule above. Seems to have only have worked before because of\n        # hdrs_check loose.\n        \"stateful_random_ops_cpu_gpu.h\",\n        # Allows conv_3d ops for android but excluded from *_3d* rule above.\n        \"conv_3d.h\",\n        \"conv_ops_3d.cc\",\n        \"conv_ops_gpu.h\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"android_all_ops\",\n    actual = \":portable_all_ops\",\n)\n\nfilegroup(\n    name = \"portable_all_ops_textual_hdrs\",\n    srcs = ANDROID_TEXTUAL_HDRS + [\n        \"//tensorflow/core/kernels/image:portable_all_ops_textual_hdrs\",\n        \"//tensorflow/core/util:image_resizer_state.h\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"android_all_ops_textual_hdrs\",\n    actual = \"portable_all_ops_textual_hdrs\",\n)\n\ncc_library(\n    name = \"portable_tensorflow_kernels\",\n    srcs = if_mobile([\n        \"//tensorflow/core/kernels:portable_core_ops\",\n        \"//tensorflow/core/kernels:portable_extended_ops\",\n    ]),\n    copts = tf_copts() + tf_opts_nortti_if_lite_protos(),\n    linkopts = if_android([\"-ldl\"]),\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    # These headers are not self-contained, so should be included in textual_hdrs only.\n    textual_hdrs = ANDROID_TEXTUAL_HDRS,\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/core:portable_gif_internal\",\n        \"//tensorflow/core:portable_jpeg_internal\",\n        \"//tensorflow/core:portable_tensorflow_lib_lite\",\n        \"//tensorflow/core:protos_all_cc_impl\",\n        \"//tensorflow/core/lib/png:png_io\",\n        \"//tensorflow/core/platform:strong_hash\",\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n        \"//third_party/fft2d:fft2d_headers\",\n        \"//third_party/icu/data:conversion_data\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_protobuf//:protobuf\",\n        \"@fft2d\",\n        \"@gemmlowp\",\n        \"@icu//:common\",\n    ],\n    alwayslink = 1,\n)\n\nbuild_test(\n    name = \"portable_tensorflow_kernels_build_test\",\n    targets = [\":portable_tensorflow_kernels\"],\n)\n\ncc_library(\n    name = \"android_whole_file_read_ops\",\n    srcs = if_android([\"whole_file_read_ops.cc\"]),\n    copts = tf_copts(),\n    linkopts = [\"-ldl\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/core:portable_tensorflow_lib_lite\",\n    ],\n    alwayslink = 1,\n)\n\n#   Quantization-specific OpKernels\n\ntf_kernel_library(\n    name = \"quantized_ops\",\n    srcs = [\n        \"dequantize_op.cc\",\n        \"quantize_down_and_shrink_range.cc\",\n        \"quantize_op.cc\",\n        \"quantized_activation_ops.cc\",\n        \"quantized_add_op.cc\",\n        \"quantized_batch_norm_op.cc\",\n        \"quantized_bias_add_op.cc\",\n        \"quantized_concat_op.cc\",\n        \"quantized_conv_ops.cc\",\n        \"quantized_instance_norm.cc\",\n        \"quantized_matmul_op.cc\",\n        \"quantized_mul_op.cc\",\n        \"quantized_pooling_ops.cc\",\n        \"quantized_reshape_op.cc\",\n        \"quantized_resize_bilinear_op.cc\",\n        \"requantization_range_op.cc\",\n        \"requantize.cc\",\n        \"reshape_op.h\",\n    ],\n    hdrs = [\"reference_gemm.h\"],\n    deps = [\n        \":concat_lib_hdrs\",\n        \":conv_ops\",\n        \":cwise_op\",\n        \":eigen_helpers\",\n        \":meta_support\",\n        \":ops_util\",\n        \":pooling_ops\",\n        \":quantization_utils\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//tensorflow/core/util:image_resizer_state\",\n        \"//third_party/eigen3\",\n        \"@gemmlowp\",\n    ],\n)\n\ntf_cc_test(\n    name = \"requantization_range_op_test\",\n    size = \"small\",\n    srcs = [\"requantization_range_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantize_down_and_shrink_range_op_test\",\n    size = \"small\",\n    srcs = [\"quantize_down_and_shrink_range_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"requantize_op_test\",\n    size = \"small\",\n    srcs = [\"requantize_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantization_utils_test\",\n    srcs = [\"quantization_utils_test.cc\"],\n    deps = [\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Android-only test for quantization utilities.\ntf_cc_binary(\n    name = \"quantization_utils_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantization_utils_test.cc\"],\n    copts = tf_copts(),\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-lm\",\n            \"-llog\",\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":quantized_ops\",\n            \"//third_party/eigen3\",\n            \"//tensorflow/core:core_cpu_internal\",\n            \"//tensorflow/core:lib\",\n            \"//tensorflow/core:test\",\n            \"//tensorflow/cc:cc_ops\",\n            \"//tensorflow/cc:client_session\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_activation_ops_test\",\n    srcs = [\"quantized_activation_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# Android-only test for quantized addition.\ncc_binary(\n    name = \"quantized_add_op_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_add_op_test.cc\"],\n    copts = tf_copts(),\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-lm\",\n            \"-llog\",\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":ops_util\",\n            \":quantized_ops\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core:protos_all_cc\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n            \"//tensorflow/core:tensorflow\",\n            \"//tensorflow/core:test\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_add_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_add_op_test.cc\"],\n    deps = [\n        \":math\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_resize_bilinear_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_resize_bilinear_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:image_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# Android-only test for quantized resize bilinear.\ncc_binary(\n    name = \"quantized_resize_bilinear_op_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_resize_bilinear_op_test.cc\"],\n    copts = tf_copts(),\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-lm\",\n            \"-llog\",\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":ops_testutil\",\n            \":ops_util\",\n            \":quantized_ops\",\n            \"//tensorflow/core:core_cpu\",\n            \"//tensorflow/core:direct_session\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core:image_ops_op_lib\",\n            \"//tensorflow/core:protos_all_cc\",\n            \"//tensorflow/core:test\",\n            \"//tensorflow/core:testlib\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_bias_add_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_bias_add_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_conv_ops_test\",\n    size = \"small\",\n    srcs = [\"quantized_conv_ops_test.cc\"],\n    tags = [\"nomsan\"],  # http://b/32242946\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantize_op_test\",\n    size = \"small\",\n    srcs = [\"quantize_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_matmul_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_matmul_op_test.cc\"],\n    tags = [\"nomsan\"],  # http://b/32242946\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# Android-only test for quantized multiply.\ncc_binary(\n    name = \"quantized_mul_op_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_mul_op_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":ops_util\",\n            \":quantized_ops\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n            \"//tensorflow/core:protos_all_cc\",\n            \"//tensorflow/core:test\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_mul_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_mul_op_test.cc\"],\n    deps = [\n        \":math\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_pooling_ops_test\",\n    size = \"small\",\n    srcs = [\"quantized_pooling_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_reshape_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_reshape_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_concat_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_concat_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_batch_norm_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_batch_norm_op_test.cc\"],\n    deps = [\n        \":batch_norm_op\",\n        \":ops_testutil\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Android-only test for quantized instance norm.\ncc_binary(\n    name = \"quantized_instance_norm_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_instance_norm_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_instance_norm_test\",\n    size = \"small\",\n    srcs = [\"quantized_instance_norm_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"quantization_utils\",\n    srcs = [\"quantization_utils.cc\"],\n    hdrs = [\"quantization_utils.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"@gemmlowp\",\n    ],\n)\n\ntf_cc_test(\n    name = \"bias_op_test\",\n    size = \"small\",\n    srcs = [\"bias_op_test.cc\"],\n    deps = [\n        \":bias_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# NOTE(lespeholt): This rule is deprecated, please use:\n# tensorflow/core/util/batch_util.h\ncc_library(\n    name = \"batch_util\",\n    hdrs = [\"batch_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(name = \"boosted_trees_ops\")\n\ntf_kernel_library(\n    name = \"data_service_ops\",\n    deps = [\n        \"//tensorflow/core/kernels/data/experimental:data_service_kernels\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dataset_ops\",\n    deps = [\n        \"//tensorflow/core/kernels/data\",\n    ],\n)\n\ncc_library(\n    name = \"summary_interface\",\n    hdrs = [\"summary_interface.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"summary_kernels\",\n    srcs = [\"summary_kernels.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/lib/db:sqlite\",\n        \"//tensorflow/core/summary:schema\",\n        \"//tensorflow/core/summary:summary_db_writer\",\n        \"//tensorflow/core/summary:summary_file_writer\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"decode_proto_op\",\n    srcs = [\n        \"decode_proto_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util/proto:decode\",\n        \"//tensorflow/core/util/proto:descriptors\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"encode_proto_op\",\n    srcs = [\"encode_proto_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util/proto:descriptors\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"unicode_script_op\",\n    srcs = [\"unicode_script_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"@icu//:common\",\n    ],\n)\n\n# Library to link with when compiling the cwise_op kernels directly,\n# e.g. for selective registration.\n# should not be linked by projects that also link the cwise_op library.\ncc_library(\n    name = \"cwise_lib\",\n    srcs = [\"cwise_ops_common.cc\"],\n    hdrs = [\n        \"cwise_ops.h\",\n        \"cwise_ops_common.h\",\n        \"cwise_ops_gpu_common.cu.h\",\n        \"cwise_ops_gpu_gradients.cu.h\",\n        \"cwise_ops_gradients.h\",\n        \"fill_functor.h\",\n    ],\n    deps = [\n        \":meta_support\",\n        \":quantization_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n        \"@gemmlowp\",\n    ],\n)\n\n# Header-only version of cwise_lib for clients that want to use the cwise_ops\n# functionality in their own custom ops.\ncc_header_only_library(\n    name = \"cwise_lib_hdrs\",\n    deps = [\n        \":cwise_lib\",\n    ],\n)\n\n# Library to link with when compiling the quantize and dequantize kernels directly,\n# e.g. for selective registration.\ncc_header_only_library(\n    name = \"quantize_and_dequantize_op_hdrs\",\n    deps = [\n        \":quantize_and_dequantize_op\",\n    ],\n)\n\ncc_library(\n    name = \"kernel_platform_strings\",\n    srcs = [\"kernel_platform_strings.h\"],\n    deps = [\n        \"//tensorflow/core/platform:platform_strings\",\n    ],\n    alwayslink = 1,\n)\n\n# Shared object that links all the kernels TF needs.\ntf_cc_shared_library(\n    name = \"libtfkernel_all_kernels.so\",\n    static_deps = [\n        # TODO(rostam): Remove Copybara transform.\n        # copybara:comment_begin(oss only)\n        \"@bazel_tools//:__subpackages__\",\n        \"@boringssl//:__subpackages__\",\n        \"@com_github_cares_cares//:__subpackages__\",\n        \"@com_github_googlecloudplatform_tensorflow_gcp_tools//:__subpackages__\",\n        \"@com_github_grpc_grpc//:__subpackages__\",\n        \"@com_google_absl//:__subpackages__\",\n        \"@com_google_googleapis//:__subpackages__\",\n        \"@com_google_protobuf//:__subpackages__\",\n        \"@com_googlesource_code_re2//:__subpackages__\",\n        \"@compute_library//:__subpackages__\",\n        \"@curl//:__subpackages__\",\n        \"@double_conversion//:__subpackages__\",\n        \"@eigen_archive//:__subpackages__\",\n        \"@farmhash_archive//:__subpackages__\",\n        \"@farmhash_gpu_archive//:__subpackages__\",\n        \"@fft2d//:__subpackages__\",\n        \"@gemmlowp//:__subpackages__\",\n        \"@gif//:__subpackages__\",\n        \"@highwayhash//:__subpackages__\",\n        \"@hwloc//:__subpackages__\",\n        \"@icu//:__subpackages__\",\n        \"@jsoncpp_git//:__subpackages__\",\n        \"@libjpeg_turbo//:__subpackages__\",\n        \"@libxsmm_archive//:__subpackages__\",\n        \"@llvm_openmp//:__subpackages__\",\n        \"@llvm-project//:__subpackages__\",\n        \"@llvm_terminfo//:__subpackages__\",\n        \"@llvm_zlib//:__subpackages__\",\n        \"@lmdb//:__subpackages__\",\n        \"@local_config_cuda//:__subpackages__\",\n        \"@local_config_git//:__subpackages__\",\n        \"@local_config_nccl//:__subpackages__\",\n        \"@local_config_rocm//:__subpackages__\",\n        \"@local_config_tensorrt//:__subpackages__\",\n        \"@local_execution_config_platform//:__subpackages__\",\n        \"@mkl_dnn_acl_compatible//:__subpackages__\",\n        \"@mkl_dnn_v1//:__subpackages__\",\n        \"@nsync//:__subpackages__\",\n        \"@org_sqlite//:__subpackages__\",\n        \"@platforms//:__subpackages__\",\n        \"@png//:__subpackages__\",\n        \"@snappy//:__subpackages__\",\n        \"//:__subpackages__\",\n        \"@upb//:__subpackages__\",\n        \"@zlib//:__subpackages__\",\n        # copybara:comment_end\n    ],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":kernel_platform_strings\",\n        \"//tensorflow/core:all_kernels_impl\",\n    ],\n)\n\n# Manually curated set of tests that are useful for building and testing against\n# platforms and architecures that don't support CUDA.\n# TODO(b/153737462): Automatically filter tests to create the appropriate\n# portable test list.\ntest_suite(\n    name = \"portable_kernel_tests\",\n    tags = [\n        \"manual\",  # Avoid redundancy when using wildcard test patterns.\n    ],\n    tests = [\n        \":batch_norm_op_test\",\n        \":broadcast_to_op_test_cpu\",\n        \":cast_op_test_cpu\",\n        \":concat_op_test\",\n        \":control_flow_ops_test\",\n        \":cwise_ops_test_cpu\",\n        \":deep_conv2d_test\",\n        \":dequantize_op_test\",\n        \":diag_op_test_cpu\",\n        \":eigen_activations_test\",\n        \":eigen_pooling_test\",\n        \":eigen_spatial_convolutions_test\",\n        \":gather_nd_op_test_cpu\",\n        \":matmul_op_test_cpu\",\n        \":mfcc_test\",\n        \":multinomial_op_test_cpu\",\n        \":nn_ops_test_cpu\",\n        \":quantization_utils_test\",\n        \":quantize_and_dequantize_op_test_cpu\",\n        \":quantize_op_test\",\n        \":quantized_activation_ops_test\",\n        \":quantized_batch_norm_op_test\",\n        \":quantized_conv_ops_test\",\n        \":quantized_matmul_op_test\",\n        \":quantized_pooling_ops_test\",\n        \":random_binomial_op_test_cpu\",\n        \":random_op_test_cpu\",\n        \":random_poisson_op_test_cpu\",\n        \":reduction_ops_test_cpu\",\n        \":requantization_range_op_test\",\n        \":scatter_op_test\",\n        \":segment_reduction_ops_test\",\n        \":slice_op_test\",\n        \":spectrogram_test\",\n        \":split_op_test\",\n        \":split_v_op_test_cpu\",\n        \":strided_slice_op_test\",\n        \":unique_op_test\",\n        \":variable_ops_test\",\n        \"//tensorflow/core/kernels/image:crop_and_resize_op_test\",\n        \"//tensorflow/core/kernels/image:non_max_suppression_op_test\",\n        \"//tensorflow/core/kernels/image:resize_ops_test_cpu\",\n    ],\n)\n\nexports_files([\n    \"cwise_op_abs.cc\",\n    \"cwise_op_add_1.cc\",\n    \"cwise_op_add_2.cc\",\n    \"cwise_op_atan2.cc\",\n    \"cwise_op_ceil.cc\",\n    \"cwise_op_cos.cc\",\n    \"cwise_op_div.cc\",\n    \"cwise_op_equal_to_1.cc\",\n    \"cwise_op_equal_to_2.cc\",\n    \"cwise_op_exp.cc\",\n    \"cwise_op_floor.cc\",\n    \"cwise_op_floor_div.cc\",\n    \"cwise_op_floor_mod.cc\",\n    \"cwise_op_gpu_add.cu.cc\",\n    \"cwise_op_gpu_atan2.cu.cc\",\n    \"cwise_op_gpu_ceil.cu.cc\",\n    \"cwise_op_gpu_cos.cu.cc\",\n    \"cwise_op_gpu_div.cu.cc\",\n    \"cwise_op_gpu_equal_to.cu.cc\",\n    \"cwise_op_gpu_exp.cu.cc\",\n    \"cwise_op_gpu_floor.cu.cc\",\n    \"cwise_op_gpu_floor_div.cu.cc\",\n    \"cwise_op_gpu_greater.cu.cc\",\n    \"cwise_op_gpu_greater_equal.cu.cc\",\n    \"cwise_op_gpu_isinf.cu.cc\",\n    \"cwise_op_gpu_less.cu.cc\",\n    \"cwise_op_gpu_less_equal.cu.cc\",\n    \"cwise_op_gpu_log.cu.cc\",\n    \"cwise_op_gpu_logical_and.cu.cc\",\n    \"cwise_op_gpu_logical_not.cu.cc\",\n    \"cwise_op_gpu_logical_or.cu.cc\",\n    \"cwise_op_gpu_maximum.cu.cc\",\n    \"cwise_op_gpu_minimum.cu.cc\",\n    \"cwise_op_gpu_mod.cu.cc\",\n    \"cwise_op_gpu_mul.cu.cc\",\n    \"cwise_op_gpu_neg.cu.cc\",\n    \"cwise_op_gpu_not_equal_to.cu.cc\",\n    \"cwise_op_gpu_pow.cu.cc\",\n    \"cwise_op_gpu_round.cu.cc\",\n    \"cwise_op_gpu_rsqrt.cu.cc\",\n    \"cwise_op_gpu_select.cu.cc\",\n    \"cwise_op_gpu_sigmoid.cu.cc\",\n    \"cwise_op_gpu_sin.cu.cc\",\n    \"cwise_op_gpu_sqrt.cu.cc\",\n    \"cwise_op_gpu_square.cu.cc\",\n    \"cwise_op_gpu_squared_difference.cu.cc\",\n    \"cwise_op_gpu_sub.cu.cc\",\n    \"cwise_op_gpu_tanh.cu.cc\",\n    \"cwise_op_greater.cc\",\n    \"cwise_op_greater_equal.cc\",\n    \"cwise_op_isinf.cc\",\n    \"cwise_op_leakyrelu_bf16.cc\",\n    \"cwise_op_less.cc\",\n    \"cwise_op_less_equal.cc\",\n    \"cwise_op_log.cc\",\n    \"cwise_op_logical_and.cc\",\n    \"cwise_op_logical_not.cc\",\n    \"cwise_op_logical_or.cc\",\n    \"cwise_op_maximum.cc\",\n    \"cwise_op_minimum.cc\",\n    \"cwise_op_mod.cc\",\n    \"cwise_op_mul_1.cc\",\n    \"cwise_op_mul_2.cc\",\n    \"cwise_op_neg_1.cc\",\n    \"cwise_op_neg_2.cc\",\n    \"cwise_op_not_equal_to_1.cc\",\n    \"cwise_op_not_equal_to_2.cc\",\n    \"cwise_op_pow.cc\",\n    \"cwise_op_round.cc\",\n    \"cwise_op_rsqrt.cc\",\n    \"cwise_op_select.cc\",\n    \"cwise_op_sigmoid.cc\",\n    \"cwise_op_sin.cc\",\n    \"cwise_op_sign.cc\",\n    \"cwise_op_sqrt.cc\",\n    \"cwise_op_square.cc\",\n    \"cwise_op_squared_difference.cc\",\n    \"cwise_op_sub.cc\",\n    \"cwise_op_tanh.cc\",\n    \"dequantize_op.cc\",\n    \"ops_testutil.h\",\n    \"quantize_and_dequantize_op.cc\",\n    \"quantize_op.cc\",\n    \"sparse_cross_op.cc\",\n    \"sparse_fill_empty_rows_op.cc\",\n    \"sparse_reshape_op.cc\",\n    \"unary_ops_composition.cc\",\n])\n\ntf_kernel_library(\n    name = \"sobol_op\",\n    srcs = [\n        \"sobol_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n        \"@sobol_data\",\n    ],\n)\n\n# ---- temporary forwarding declaration for libraries in linalg\n# TODO(b/160344057): Remove after updating dependencies.\ntf_kernel_library(\n    name = \"matrix_inverse_op\",\n    deps = [\"//tensorflow/core/kernels/linalg:matrix_inverse_op\"],\n)\n\ntf_kernel_library(\n    name = \"einsum_op\",\n    deps = [\"//tensorflow/core/kernels/linalg:einsum_op\"],\n)\n\ntf_kernel_library(\n    name = \"isotonic_regression_op\",\n    srcs = [\n        \"isotonic_regression_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"isotonic_regression_op_test\",\n    size = \"small\",\n    srcs = [\"isotonic_regression_op_test.cc\"],\n    deps = [\n        \":isotonic_regression_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"filesystem_ops\",\n    srcs = [\"filesystem_ops.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n", "/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <memory>\n#include <string>\n#include <utility>\n\n#include \"tensorflow/core/kernels/spacetobatch_functor.h\"\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/types.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\ntemplate <typename Device, typename T>\nStatus SpaceToBatchOpCompute(OpKernelContext* context,\n                             const Tensor& orig_input_tensor,\n                             const Tensor& orig_block_shape,\n                             const Tensor& orig_paddings) {\n  const int input_dims = orig_input_tensor.dims();\n  if (!TensorShapeUtils::IsVector(orig_block_shape.shape())) {\n    return errors::InvalidArgument(\"block_shape rank should be 1 instead of \",\n                                   orig_block_shape.dims());\n  }\n\n  const int block_dims = orig_block_shape.dim_size(0);\n  if (orig_input_tensor.dims() < 1 + block_dims) {\n    return errors::InvalidArgument(\"input rank should be >= \", 1 + block_dims,\n                                   \" instead of \", orig_input_tensor.dims());\n  }\n\n  if (!(TensorShapeUtils::IsMatrix(orig_paddings.shape()) &&\n        block_dims == orig_paddings.dim_size(0) &&\n        2 == orig_paddings.dim_size(1))) {\n    return errors::InvalidArgument(\"paddings should have shape [\", block_dims,\n                                   \", 2] instead of \",\n                                   orig_paddings.shape().DebugString());\n  }\n\n  // To avoid out-of-bounds access in the case that the block_shape and/or\n  // paddings tensors are concurrently modified, we must copy the values.\n  gtl::InlinedVector<int64_t, 4> block_shape;\n  gtl::InlinedVector<int64_t, 8> paddings;\n  internal::spacetobatch::SubtleMustCopyFlat(orig_block_shape, &block_shape);\n  internal::spacetobatch::SubtleMustCopyFlat(orig_paddings, &paddings);\n\n  // Determine the length of the prefix of block dims that can be combined\n  // into the batch dimension due to having no padding and block_shape=1.\n  int removed_prefix_block_dims = 0;\n  for (; removed_prefix_block_dims < block_dims; ++removed_prefix_block_dims) {\n    const int dim = removed_prefix_block_dims;\n    if (paddings[2 * dim] != 0 || paddings[2 * dim + 1] != 0 ||\n        block_shape[dim] != 1) {\n      break;\n    }\n  }\n\n  // Determine the length of the suffix of block dims that can be combined\n  // into the depth dimension due to having no padding and block_shape=1.\n  int removed_suffix_block_dims = 0;\n  for (; removed_suffix_block_dims < block_dims - removed_prefix_block_dims;\n       ++removed_suffix_block_dims) {\n    const int dim = block_dims - 1 - removed_suffix_block_dims;\n    if (paddings[dim * 2] != 0 || paddings[dim * 2 + 1] != 0 ||\n        block_shape[dim] != 1) {\n      break;\n    }\n  }\n\n  // Compute the product of the block_shape values.\n  int64_t block_shape_product = 1;\n  for (int block_dim = 0; block_dim < block_dims; ++block_dim) {\n    block_shape_product *= block_shape[block_dim];\n  }\n  if (block_shape_product <= 0) {\n    return errors::InvalidArgument(\n        \"Product of block sizes must be positive, got \", block_shape_product);\n  }\n\n  const int internal_block_dims =\n      block_dims - removed_prefix_block_dims - removed_suffix_block_dims;\n  if (internal_block_dims > kMaxSpaceToBatchBlockDims) {\n    return errors::InvalidArgument(\n        \"Maximum number of non-combined block dimensions is \",\n        internal_block_dims, \" but must not exceed \",\n        kMaxSpaceToBatchBlockDims);\n  }\n\n  if (internal_block_dims == 0) {\n    context->set_output(0, orig_input_tensor);\n    return Status::OK();\n  }\n\n  // For the purpose of computing the result, the input will be treated as\n  // having this shape, of rank 2 + internal_block_dims.\n  TensorShape internal_input_shape;\n\n  // For the purpose of computing the result, the output will be treated as\n  // having this shape, of rank 2 + internal_block_dims.\n  TensorShape internal_output_shape;\n\n  // The actual output shape exposed to callers.\n  TensorShape external_output_shape;\n\n  external_output_shape.AddDim(orig_input_tensor.dim_size(0) *\n                               block_shape_product);\n\n  int64_t input_batch_size = orig_input_tensor.dim_size(0);\n  for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {\n    const int64_t size = orig_input_tensor.dim_size(block_dim + 1);\n    input_batch_size *= size;\n    external_output_shape.AddDim(size);\n  }\n  internal_input_shape.AddDim(input_batch_size);\n  internal_output_shape.AddDim(input_batch_size * block_shape_product);\n\n  for (int block_dim = removed_prefix_block_dims;\n       block_dim < block_dims - removed_suffix_block_dims; ++block_dim) {\n    const int64_t pad_start = paddings[2 * block_dim],\n                  pad_end = paddings[2 * block_dim + 1];\n    if (pad_start < 0 || pad_end < 0) {\n      return errors::InvalidArgument(\"Paddings must be non-negative\");\n    }\n    const int64_t input_size = orig_input_tensor.dim_size(block_dim + 1);\n    const int64_t block_shape_value = block_shape[block_dim];\n    const int64_t padded_size = input_size + pad_start + pad_end;\n    if (padded_size % block_shape_value != 0) {\n      return errors::InvalidArgument(\"padded_shape[\", block_dim,\n                                     \"]=\", padded_size,\n                                     \" is not divisible by block_shape[\",\n                                     block_dim, \"]=\", block_shape_value);\n    }\n    internal_input_shape.AddDim(input_size);\n    const int64_t output_size = padded_size / block_shape_value;\n    internal_output_shape.AddDim(output_size);\n    external_output_shape.AddDim(output_size);\n  }\n\n  int64_t depth = 1;\n  for (int dim = block_dims - removed_suffix_block_dims + 1; dim < input_dims;\n       ++dim) {\n    const int64_t size = orig_input_tensor.dim_size(dim);\n    external_output_shape.AddDim(size);\n    depth *= size;\n  }\n  internal_input_shape.AddDim(depth);\n  internal_output_shape.AddDim(depth);\n\n  // Allocate output tensor.\n  Tensor* output_tensor = nullptr;\n  TF_RETURN_IF_ERROR(\n      context->allocate_output(0, external_output_shape, &output_tensor));\n\n  const int64_t* internal_paddings = &paddings[2 * removed_prefix_block_dims];\n  const int64_t* internal_block_shape = &block_shape[removed_prefix_block_dims];\n\n  switch (internal_block_dims) {\n#define TF_SPACETOBATCH_BLOCK_DIMS_CASE(NUM_BLOCK_DIMS)                   \\\n  case NUM_BLOCK_DIMS: {                                                  \\\n    TF_RETURN_IF_ERROR(                                                   \\\n        functor::SpaceToBatchFunctor<Device, T, NUM_BLOCK_DIMS, false>()( \\\n            context->eigen_device<Device>(),                              \\\n            orig_input_tensor.shaped<T, NUM_BLOCK_DIMS + 2>(              \\\n                internal_input_shape.dim_sizes()),                        \\\n            internal_block_shape, internal_paddings,                      \\\n            output_tensor->shaped<T, NUM_BLOCK_DIMS + 2>(                 \\\n                internal_output_shape.dim_sizes())));                     \\\n  } break;                                                                \\\n    /**/\n    TF_SPACETOBATCH_FOR_EACH_NUM_BLOCK_DIMS(TF_SPACETOBATCH_BLOCK_DIMS_CASE)\n#undef TF_SPACETOBATCH_BLOCK_DIMS_CASE\n  }\n  return Status::OK();\n}\n\n}  // namespace\n\ntemplate <typename Device, typename T>\nclass SpaceToBatchNDOp : public OpKernel {\n public:\n  explicit SpaceToBatchNDOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& orig_input_tensor = context->input(0);\n    const Tensor& orig_block_shape = context->input(1);\n    const Tensor& orig_paddings = context->input(2);\n    OP_REQUIRES_OK(context, SpaceToBatchOpCompute<Device, T>(\n                                context, orig_input_tensor, orig_block_shape,\n                                orig_paddings));\n  }\n};\n\ntemplate <typename Device, typename T>\nclass SpaceToBatchOp : public OpKernel {\n public:\n  explicit SpaceToBatchOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"block_size\", &block_size_));\n    OP_REQUIRES(\n        context, block_size_ > 1,\n        errors::InvalidArgument(\"Block size should be > 1: \", block_size_));\n    block_shape_ = Tensor(tensorflow::DT_INT64, TensorShape({2}));\n    auto block_shape_vec = block_shape_.vec<int64_t>();\n    block_shape_vec(0) = block_size_;\n    block_shape_vec(1) = block_size_;\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in0 = context->input(0);\n    const Tensor& in1 = context->input(1);\n    const int dims = in0.dims();\n\n    static const int kRequiredDims = 4;\n    OP_REQUIRES(context, kRequiredDims == dims,\n                errors::InvalidArgument(\"Input rank should be: \", kRequiredDims,\n                                        \"instead of: \", dims));\n    OP_REQUIRES_OK(context, SpaceToBatchOpCompute<Device, T>(\n                                context, in0, block_shape_, in1));\n  }\n\n private:\n  int block_size_;\n  Tensor block_shape_;\n};\n\n#define REGISTER(T)                                        \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatchND\")           \\\n                              .Device(DEVICE_CPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"block_shape\")   \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchNDOp<CPUDevice, T>); \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatch\")             \\\n                              .Device(DEVICE_CPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchOp<CPUDevice, T>);\n\nTF_CALL_REAL_NUMBER_TYPES(REGISTER);\n#undef REGISTER\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define REGISTER(T)                                        \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatchND\")           \\\n                              .Device(DEVICE_GPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"block_shape\")   \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchNDOp<GPUDevice, T>); \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatch\")             \\\n                              .Device(DEVICE_GPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchOp<GPUDevice, T>);\n\nTF_CALL_GPU_NUMBER_TYPES(REGISTER);\n#undef REGISTER\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n}  // end namespace tensorflow\n", "load(\n    \"//tensorflow/core/platform:build_config.bzl\",\n    \"tf_kernel_tests_linkstatic\",\n    \"tf_proto_library\",\n)\nload(\n    \"//tensorflow/core/platform:rules_cc.bzl\",\n    \"cc_library\",\n)\nload(\n    \"//tensorflow:tensorflow.bzl\",\n    \"tf_cc_test\",\n    \"tf_cc_tests\",\n    \"tf_copts\",\n    \"tf_cuda_library\",\n    \"tf_cuda_only_cc_test\",\n    \"tf_kernel_library\",\n    \"tf_mkl_kernel_library\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"filegroup\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"get_compatible_with_portable\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_version_info_genrule\")\nload(\n    \"//tensorflow/core/platform:build_config_root.bzl\",\n    \"if_static\",\n)\nload(\"@local_config_cuda//cuda:build_defs.bzl\", \"if_cuda\")\nload(\n    \"@local_config_rocm//rocm:build_defs.bzl\",\n    \"if_rocm\",\n)\n\ndefault_package_visibility = [\n    \"//tensorflow/core:__subpackages__\",\n]\n\npackage(\n    default_visibility = default_package_visibility,\n    features = [\n        \"-layering_check\",\n        \"-parse_headers\",\n    ],\n    licenses = [\"notice\"],\n)\n\n# List of exported source files.\nexports_files(\n    srcs = [\n        \"event.proto\",\n        \"example_proto_fast_parsing_test.proto\",\n        \"image_resizer_state.h\",\n        \"memmapped_file_system.proto\",\n        \"saved_tensor_slice.proto\",\n    ],\n    visibility = [\n        \"//tensorflow:internal\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n)\n\n# Export source files needed for mobile builds, which do not use granular targets.\nfilegroup(\n    name = \"mobile_srcs_no_runtime\",\n    srcs = [\n        \"overflow.h\",\n        \"padding.cc\",\n        \"padding.h\",\n        \"tensor_format.cc\",\n        \"tensor_format.h\",\n    ],\n)\n\nfilegroup(\n    name = \"mobile_srcs_only_runtime\",\n    srcs = [\n        \"batch_util.cc\",\n        \"batch_util.h\",\n        \"bcast.cc\",\n        \"bcast.h\",\n        \"command_line_flags.cc\",\n        \"command_line_flags.h\",\n        \"determinism.cc\",\n        \"determinism.h\",\n        \"device_name_utils.cc\",\n        \"device_name_utils.h\",\n        \"dump_graph.cc\",\n        \"dump_graph.h\",\n        \"einsum_op_util.cc\",\n        \"einsum_op_util.h\",\n        \"env_var.cc\",\n        \"env_var.h\",\n        \"equal_graph_def.cc\",\n        \"equal_graph_def.h\",\n        \"example_proto_fast_parsing.cc\",\n        \"example_proto_fast_parsing.h\",\n        \"example_proto_helper.cc\",\n        \"example_proto_helper.h\",\n        \"guarded_philox_random.cc\",\n        \"guarded_philox_random.h\",\n        \"managed_stack_trace.h\",\n        \"matmul_autotune.cc\",\n        \"matmul_autotune.h\",\n        \"matmul_bcast.h\",\n        \"mirror_pad_mode.cc\",\n        \"mirror_pad_mode.h\",\n        \"port.cc\",\n        \"port.h\",\n        \"presized_cuckoo_map.h\",\n        \"ptr_util.h\",\n        \"ragged_to_dense_util.cc\",\n        \"ragged_to_dense_util.h\",\n        \"ragged_to_dense_util_common.h\",\n        \"reffed_status_callback.h\",\n        \"saved_tensor_slice_util.cc\",\n        \"saved_tensor_slice_util.h\",\n        \"stat_summarizer.cc\",\n        \"stat_summarizer.h\",\n        \"strided_slice_op.cc\",\n        \"strided_slice_op.h\",\n        \"tensor_ops_util.h\",\n        \"tensor_slice_reader.cc\",\n        \"tensor_slice_reader.h\",\n        \"tensor_slice_reader_cache.cc\",\n        \"tensor_slice_reader_cache.h\",\n        \"tensor_slice_set.cc\",\n        \"tensor_slice_set.h\",\n        \"tensor_slice_util.h\",\n        \"tensor_slice_writer.cc\",\n        \"tensor_slice_writer.h\",\n        \"use_cudnn.cc\",\n        \"use_cudnn.h\",\n        \"util.cc\",\n        \"util.h\",\n        \"work_sharder.cc\",\n        \"work_sharder.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_private_hdrs\",\n    srcs = [\n        \"activation_mode.h\",\n        \"batch_util.h\",\n        \"bcast.h\",\n        \"command_line_flags.h\",\n        \"debug_events_writer.h\",\n        \"device_name_utils.h\",\n        \"dump_graph.h\",\n        \"einsum_op_util.h\",\n        \"env_var.h\",\n        \"equal_graph_def.h\",\n        \"events_writer.h\",\n        \"example_proto_fast_parsing.h\",\n        \"example_proto_helper.h\",\n        \"exec_on_stall.h\",\n        \"gpu_cuda_alias.h\",\n        \"gpu_device_functions.h\",\n        \"gpu_kernel_helper.h\",\n        \"gpu_launch_config.h\",\n        \"guarded_philox_random.h\",\n        \"matmul_autotune.h\",\n        \"matmul_bcast.h\",\n        \"mirror_pad_mode.h\",\n        \"mkl_threadpool.h\",\n        \"mkl_util.h\",\n        \"onednn_env_vars.h\",\n        \"overflow.h\",\n        \"padding.h\",\n        \"permutation_input_iterator.h\",\n        \"permutation_output_iterator.h\",\n        \"presized_cuckoo_map.h\",\n        \"ptr_util.h\",\n        \"reffed_status_callback.h\",\n        \"saved_tensor_slice_util.h\",\n        \"stat_summarizer.h\",\n        \"stat_summarizer_options.h\",\n        \"stats_calculator.h\",\n        \"stream_executor_util.h\",\n        \"strided_slice_op.h\",\n        \"tensor_format.h\",\n        \"tensor_ops_util.h\",\n        \"tensor_slice_reader.h\",\n        \"tensor_slice_reader_cache.h\",\n        \"tensor_slice_set.h\",\n        \"tensor_slice_util.h\",\n        \"tensor_slice_writer.h\",\n        \"transform_output_iterator.h\",\n        \"use_cudnn.h\",\n        \"util.h\",\n        \"work_sharder.h\",\n        \"xla_config_registry.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_public_hdrs\",\n    srcs = [\n        \"command_line_flags.h\",\n        \"equal_graph_def.h\",\n        \"presized_cuckoo_map.h\",\n        \"tensor_slice_set.h\",\n        \"tensor_slice_util.h\",\n        \"xla_config_registry.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_impl_srcs\",\n    srcs = [\n        \"activation_mode.cc\",\n        \"batch_util.cc\",\n        \"bcast.cc\",\n        \"command_line_flags.cc\",\n        \"debug_events_writer.cc\",\n        \"device_name_utils.cc\",\n        \"dump_graph.cc\",\n        \"equal_graph_def.cc\",\n        \"events_writer.cc\",\n        \"example_proto_fast_parsing.cc\",\n        \"example_proto_helper.cc\",\n        \"guarded_philox_random.cc\",\n        \"matmul_autotune.cc\",\n        \"mirror_pad_mode.cc\",\n        \"saved_tensor_slice_util.cc\",\n        \"stat_summarizer.cc\",\n        \"strided_slice_op.cc\",\n        \"tensor_slice_reader.cc\",\n        \"tensor_slice_reader_cache.cc\",\n        \"tensor_slice_set.cc\",\n        \"tensor_slice_writer.cc\",\n        \"use_cudnn.cc\",\n        \"util.cc\",\n        \"work_sharder.cc\",\n        \"xla_config_registry.cc\",\n    ],\n)\n\nfilegroup(\n    name = \"lib_internal_public_hdrs\",\n    srcs = [\n        \"env_var.h\",\n        \"use_cudnn.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"lib_hdrs\",\n    srcs = [\n        \"gpu_cuda_alias.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"memmapped_file_system_hdrs\",\n    srcs = [\n        \"memmapped_file_system.h\",\n        \"memmapped_file_system_writer.h\",\n    ],\n)\n\nfilegroup(\n    name = \"memmapped_file_system_srcs\",\n    srcs = [\n        \"memmapped_file_system.cc\",\n        \"memmapped_file_system_writer.cc\",\n    ],\n)\n\nfilegroup(\n    name = \"port_hdrs\",\n    srcs = [\n        \"port.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n)\n\nfilegroup(\n    name = \"test_hdrs\",\n    testonly = 1,\n    srcs = [\n        \"reporter.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"mkl_util_hdrs\",\n    srcs = [\n        \"mkl_threadpool.h\",\n        \"mkl_util.h\",\n        \"onednn_env_vars.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"mkl_util_test_srcs\",\n    testonly = 1,\n    srcs = [\n        \"mkl_util_test.cc\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"android_test_hdrs\",\n    testonly = 1,\n    srcs = [\n        \"reporter.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"android_test_srcs\",\n    testonly = 1,\n    srcs = [\n        \"reporter.cc\",\n        \":android_test_hdrs\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"framework_srcs\",\n    srcs = [\n        \"activation_mode.h\",\n        \"batch_util.h\",\n        \"bcast.h\",\n        \"debug_events_writer.h\",\n        \"device_name_utils.h\",\n        \"dump_graph.h\",\n        \"einsum_op_util.h\",\n        \"events_writer.h\",\n        \"example_proto_fast_parsing.h\",\n        \"example_proto_helper.h\",\n        \"gpu_kernel_helper.h\",\n        \"guarded_philox_random.h\",\n        \"managed_stack_trace.h\",\n        \"matmul_autotune.h\",\n        \"matmul_bcast.h\",\n        \"mirror_pad_mode.h\",\n        \"padding.h\",\n        \"port.h\",\n        \"ptr_util.h\",\n        \"reffed_status_callback.h\",\n        \"saved_tensor_slice_util.h\",\n        \"stat_summarizer.h\",\n        \"stat_summarizer_options.h\",\n        \"stream_executor_util.h\",\n        \"strided_slice_op.h\",\n        \"tensor_format.h\",\n        \"tensor_ops_util.h\",\n        \"tensor_slice_reader.h\",\n        \"tensor_slice_reader_cache.h\",\n        \"tensor_slice_writer.h\",\n        \"use_cudnn.h\",\n        \"util.h\",\n        \"work_sharder.h\",\n    ],\n)\n\n# Version info generation needs to be generated in the same package where it\n# is written.\ntf_version_info_genrule(\n    name = \"version_info_gen\",\n    out = \"version_info.h\",\n    compatible_with = get_compatible_with_portable(),\n)\n\ncc_library(\n    name = \"version_info\",\n    hdrs = [\"version_info.h\"],\n    visibility = [\"//visibility:public\"],\n)\n\ncc_library(\n    name = \"stats_calculator_portable\",\n    srcs = [\n        \"stat_summarizer_options.h\",\n        \"stats_calculator.cc\",\n    ],\n    hdrs = [\n        \"stats_calculator.h\",\n    ],\n    copts = tf_copts(),\n    visibility = [\n        \"//tensorflow:internal\",\n    ],\n)\n\ntf_mkl_kernel_library(\n    name = \"onednn_env_vars\",\n    srcs = [\"onednn_env_vars.cc\"],\n    hdrs = [\"onednn_env_vars.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/kernels:ops_util\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_to_dense_util_common\",\n    hdrs = [\n        \"ragged_to_dense_util_common.h\",\n    ],\n    visibility = [\n        \"//visibility:public\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_to_dense_util\",\n    srcs = [\n        \"ragged_to_dense_util.cc\",\n    ],\n    hdrs = [\n        \"ragged_to_dense_util.h\",\n    ],\n    deps = [\n        \":ragged_to_dense_util_common\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_to_dense_util_test\",\n    srcs = [\n        \"ragged_to_dense_util_test.cc\",\n    ],\n    deps = [\n        \":ragged_to_dense_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"stats_calculator_test\",\n    srcs = [\"stats_calculator_test.cc\"],\n    deps = [\n        \":stats_calculator_portable\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ncc_library(\n    name = \"reporter\",\n    srcs = [\"reporter.cc\"],\n    hdrs = [\"reporter.h\"],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n    deps = [\n        \":test_log_proto_impl_cc\",\n        \"//tensorflow/core/platform:env\",\n        \"//tensorflow/core/platform:env_impl\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:str_util\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"port\",\n    srcs = [\"port.cc\"],\n    hdrs = [\"port.h\"],\n    copts = tf_copts(),\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"managed_stack_trace\",\n    hdrs = [\"managed_stack_trace.h\"],\n    visibility = [\n        \"//tensorflow/c/eager:__pkg__\",\n        \"//tensorflow/compiler/mlir/tensorflow:__pkg__\",\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/common_runtime/eager:__pkg__\",\n        \"//tensorflow/core/framework:__pkg__\",\n        \"//tensorflow/core/platform:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/eager:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n    deps = [\n        \"//tensorflow/core/platform:stack_frame\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"gpu_cuda_alias\",\n    hdrs = [\"gpu_cuda_alias.h\"],\n)\n\ntf_cuda_library(\n    name = \"gpu_device_functions\",\n    hdrs = [\"gpu_device_functions.h\"],\n    deps = [\n        \":gpu_cuda_alias\",\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"overflow\",\n    hdrs = [\"overflow.h\"],\n    deps = [\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"exec_on_stall\",\n    hdrs = [\"exec_on_stall.h\"],\n    deps = [\n        \"//tensorflow/core/platform:env\",\n        \"//tensorflow/core/platform:mutex\",\n    ],\n)\n\ncc_library(\n    name = \"ptr_util\",\n    hdrs = [\"ptr_util.h\"],\n)\n\ncc_library(\n    name = \"tensor_format\",\n    srcs = [\"tensor_format.cc\"],\n    hdrs = [\"tensor_format.h\"],\n    deps = [\n        \"//tensorflow/core/framework:tensor\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/platform:types\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"padding\",\n    srcs = [\"padding.cc\"],\n    hdrs = [\"padding.h\"],\n    deps = [\n        \":tensor_format\",\n        \"//tensorflow/core/framework:attr_value_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n    ],\n)\n\ncc_library(\n    name = \"einsum_op_util\",\n    srcs = [\"einsum_op_util.cc\"],\n    hdrs = [\"einsum_op_util.h\"],\n    deps = [\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"env_var\",\n    srcs = [\"env_var.cc\"],\n    hdrs = [\"env_var.h\"],\n    deps = [\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:numbers\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/platform:str_util\",\n        \"//tensorflow/core/platform:strcat\",\n        \"//tensorflow/core/platform:stringpiece\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"incremental_barrier\",\n    srcs = [\"incremental_barrier.cc\"],\n    hdrs = [\"incremental_barrier.h\"],\n    visibility = default_package_visibility + [\"//tensorflow_serving:__subpackages__\"],\n    deps = [\n        \"//tensorflow/core:lib\",\n        \"@com_google_absl//absl/functional:bind_front\",\n    ],\n)\n\n# Note: This rule should not be used as a dependency for kernels. Use the\n# \"determinism_for_kernels\" rule below instead.\ncc_library(\n    name = \"determinism\",\n    srcs = [\"determinism.cc\"],\n    hdrs = [\"determinism.h\"],\n    copts = tf_copts(),\n    visibility = [\"//tensorflow:__subpackages__\"],\n    deps = [\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/util:env_var\",\n    ],\n    alwayslink = 1,\n)\n\nfilegroup(\n    name = \"determinism_hdr\",\n    srcs = [\"determinism.h\"],\n    compatible_with = get_compatible_with_portable(),\n    visibility = [\"//tensorflow:__subpackages__\"],\n)\n\ncc_library(\n    name = \"determinism_hdr_lib\",\n    hdrs = [\":determinism_hdr\"],\n    compatible_with = get_compatible_with_portable(),\n    visibility = [\"//visibility:private\"],\n)\n\n# This alias should be used as a dependency for kernels which use determinism,\n# as well any other rules which are in the same shared library as the kernels.\n# This rule does not include the determinism.cc file for nonstatic builds. The\n# reason is that for nonstatic builds, the shared object which contains the\n# kernels (e.g. _pywrap_tensorflow_internal.so) must not contain the global\n# variable in determinism.cc, since the global variable is already in\n# libtensorflow_framework.so.\nalias(\n    name = \"determinism_for_kernels\",\n    actual = if_static(\":determinism\", \":determinism_hdr_lib\"),\n    visibility = [\"//tensorflow:__subpackages__\"],\n)\n\ncc_library(\n    name = \"determinism_test_util\",\n    hdrs = [\":determinism_test_util.h\"],\n    deps = [\":determinism\"],\n)\n\ntf_kernel_library(\n    name = \"cuda_solvers\",\n    srcs = [\"cuda_solvers.cc\"],\n    hdrs = [\"gpu_solvers.h\"],\n    compatible_with = [],\n    # @local_config_cuda//cuda:cusolver_static, //third_party/eigen3:blas,\n    # and //third_party/libf2c all contain various parts of BLAS, LAPACK,\n    # and f2c helper functions in global namespace. Tell the compiler to\n    # allow multiple definitions when linking this.\n    linkopts = select({\n        \"//tensorflow:macos\": [],\n        \"//tensorflow:windows\": [],\n        \"//conditions:default\": [\"-Wl,-z,muldefs\"],\n    }),\n    visibility = [\"//tensorflow/core/kernels:friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/platform/default/build_config:cublas_plugin\",\n        \"//tensorflow/stream_executor/cuda:cublas_lib\",\n        \"//tensorflow/stream_executor/cuda:cusolver_lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"rocm_solvers\",\n    srcs = [\"rocm_solvers.cc\"],\n    hdrs = [\"gpu_solvers.h\"],\n    compatible_with = [],\n    visibility = [\"//tensorflow/core/kernels:friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/stream_executor/lib\",\n        \"//tensorflow/stream_executor/platform:dso_loader\",\n        \"//tensorflow/stream_executor/rocm:rocblas_plugin\",\n        \"//tensorflow/stream_executor/rocm:rocblas_wrapper\",\n        \"//tensorflow/stream_executor/rocm:rocm_gpu_executor\",\n        \"//tensorflow/stream_executor/rocm:rocsolver_wrapper\",\n    ] + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"cuda_sparse\",\n    srcs = if_cuda([\"cuda_sparse.cc\"]) + if_rocm([\"rocm_sparse.cc\"]),\n    hdrs = [\n        \"cuda_sparse.h\",\n        \"gpu_solvers.h\",\n    ],\n    compatible_with = [],\n    deps = [\n        \":cuda_solvers\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ] + if_cuda([\n        \"//tensorflow/stream_executor/cuda:cusparse_lib\",\n        \"@local_config_cuda//cuda:cub_headers\",\n    ]) + if_rocm([\n        \"//tensorflow/stream_executor/rocm:rocsolver_wrapper\",\n        \"//tensorflow/stream_executor/rocm:hipsparse_wrapper\",\n    ]),\n)\n\ncc_library(\n    name = \"image_resizer_state\",\n    hdrs = [\"image_resizer_state.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Tests.\ntf_cc_test(\n    name = \"overflow_test\",\n    size = \"small\",\n    srcs = [\"overflow_test.cc\"],\n    deps = [\n        \":overflow\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"exec_on_stall_test\",\n    size = \"small\",\n    srcs = [\"exec_on_stall_test.cc\"],\n    deps = [\n        \":exec_on_stall\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cuda_only_cc_test(\n    name = \"gpu_kernel_helper_test\",\n    srcs = [\n        \"gpu_kernel_helper_test.cu.cc\",\n    ],\n    tags = [\n        \"no_cuda_asan\",  # TODO(b/171342366): re-enable.\n    ],\n    deps = [\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"higher_level_tests\",\n    size = \"small\",\n    srcs = [\n        \"bcast_test.cc\",\n        \"command_line_flags_test.cc\",\n        \"device_name_utils_test.cc\",\n        \"dump_graph_test.cc\",\n        \"equal_graph_def_test.cc\",\n        \"events_writer_test.cc\",\n        \"example_proto_fast_parsing_test.cc\",\n        \"example_proto_helper_test.cc\",\n        \"matmul_bcast_test.cc\",\n        \"memmapped_file_system_test.cc\",\n        \"presized_cuckoo_map_test.cc\",\n        \"reffed_status_callback_test.cc\",\n        \"reporter_test.cc\",\n        \"saved_tensor_slice_util_test.cc\",\n        \"semver_test.cc\",\n        \"stat_summarizer_test.cc\",\n        \"tensor_format_test.cc\",\n        \"tensor_slice_reader_test.cc\",\n        \"tensor_slice_set_test.cc\",\n        \"tensor_slice_util_test.cc\",\n        \"tensor_slice_writer_test.cc\",\n        \"work_sharder_test.cc\",\n    ],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = tf_kernel_tests_linkstatic(),\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n    ],\n    deps = [\n        \":protos_test_cc\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:function_ops\",\n        \"//tensorflow/cc:ops\",\n        \"//tensorflow/cc:scope\",\n        \"//tensorflow/cc:sendrecv_ops\",\n        \"//tensorflow/cc:while_loop\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"//tensorflow/core/kernels:ops_util\",\n        \"//tensorflow/core/platform:regexp\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"debug_events_writer_test\",\n    size = \"small\",\n    srcs = [\"debug_events_writer_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n    ],\n)\n\ntf_cc_test(\n    name = \"incremental_barrier_test\",\n    srcs = [\"incremental_barrier_test.cc\"],\n    deps = [\n        \":incremental_barrier\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/platform\",\n        \"@com_google_absl//absl/functional:bind_front\",\n        \"@com_google_absl//absl/time\",\n    ],\n)\n\n# Proto libraries.\ntf_proto_library(\n    name = \"test_log_proto_impl\",\n    srcs = [\"test_log.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    # Not to be used outside of tensorflow/core.\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\ntf_proto_library(\n    name = \"protos_test\",\n    srcs = [\"example_proto_fast_parsing_test.proto\"],\n    cc_api_version = 2,\n    protodeps = [\"//tensorflow/core:protos_all\"],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"event_proto\",\n    srcs = [\"event.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \"//tensorflow/core/framework:summary_proto\",\n        \"//tensorflow/core/framework:resource_handle_proto\",\n        \"//tensorflow/core/framework:tensor_proto\",\n        \"//tensorflow/core/framework:tensor_shape_proto\",\n        \"//tensorflow/core/framework:types_proto\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"saved_tensor_slice_proto\",\n    srcs = [\"saved_tensor_slice.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \"//tensorflow/core/framework:resource_handle_proto\",\n        \"//tensorflow/core/framework:tensor_proto\",\n        \"//tensorflow/core/framework:tensor_shape_proto\",\n        \"//tensorflow/core/framework:tensor_slice_proto\",\n        \"//tensorflow/core/framework:types_proto\",\n        \"//tensorflow/core/framework:versions_proto\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"memmapped_file_system_proto\",\n    srcs = [\"memmapped_file_system.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"protos_all\",\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":event_proto\",\n        \":saved_tensor_slice_proto\",\n        \":memmapped_file_system_proto\",\n    ],\n    tags = [\n        \"alt_dep=//third_party/tensorflow/core:protos_all\",\n    ],\n)\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for SpaceToBatch and BatchToSpace ops.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import tensor_util\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gen_array_ops\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import test\n\n\ndef space_to_batch_direct(input_array, block_shape, paddings):\n  \"\"\"Direct Python implementation of space-to-batch conversion.\n\n  This is used for tests only.\n\n  Args:\n    input_array: N-D array\n    block_shape: 1-D array of shape [num_block_dims].\n    paddings: 2-D array of shape [num_block_dims, 2].\n\n  Returns:\n    Converted tensor.\n  \"\"\"\n  input_array = np.array(input_array)\n  block_shape = np.array(block_shape)\n  num_block_dims = len(block_shape)\n  paddings = np.array(paddings).reshape((len(block_shape), 2))\n\n  padded = np.pad(input_array,\n                  pad_width=([[0, 0]] + list(paddings) + [[0, 0]] *\n                             (input_array.ndim - 1 - num_block_dims)),\n                  mode=\"constant\")\n  reshaped_padded_shape = [input_array.shape[0]]\n  output_shape = [input_array.shape[0] * np.prod(block_shape)]\n  for block_dim, block_shape_value in enumerate(block_shape):\n    reduced_size = padded.shape[block_dim + 1] // block_shape_value\n    reshaped_padded_shape.append(reduced_size)\n    output_shape.append(reduced_size)\n    reshaped_padded_shape.append(block_shape_value)\n  reshaped_padded_shape.extend(input_array.shape[num_block_dims + 1:])\n  output_shape.extend(input_array.shape[num_block_dims + 1:])\n\n  reshaped_padded = padded.reshape(reshaped_padded_shape)\n  permuted_reshaped_padded = np.transpose(reshaped_padded, (\n      list(np.arange(num_block_dims) * 2 + 2) + [0] +\n      list(np.arange(num_block_dims) * 2 + 1) + list(\n          np.arange(input_array.ndim - num_block_dims - 1) + 1 + num_block_dims\n          * 2)))\n  return permuted_reshaped_padded.reshape(output_shape)\n\n\nclass PythonOpImpl(object):\n\n  @staticmethod\n  def space_to_batch(*args, **kwargs):\n    return array_ops.space_to_batch(*args, **kwargs)\n\n  @staticmethod\n  def batch_to_space(*args, **kwargs):\n    return array_ops.batch_to_space(*args, **kwargs)\n\n\nclass CppOpImpl(object):\n\n  @staticmethod\n  def space_to_batch(*args, **kwargs):\n    return gen_array_ops.space_to_batch(*args, **kwargs)\n\n  @staticmethod\n  def batch_to_space(*args, **kwargs):\n    return gen_array_ops.batch_to_space(*args, **kwargs)\n\n\nclass SpaceToBatchTest(test.TestCase, PythonOpImpl):\n  \"\"\"Tests input-output pairs for the SpaceToBatch and BatchToSpace ops.\n\n  This uses the Python compatibility wrapper that forwards to space_to_batch_nd.\n  \"\"\"\n\n  def _testPad(self, inputs, paddings, block_size, outputs):\n    with self.cached_session():\n      # outputs = space_to_batch(inputs)\n      x_tf = self.space_to_batch(\n          math_ops.cast(inputs, dtypes.float32),\n          paddings,\n          block_size=block_size)\n      self.assertAllEqual(x_tf, outputs)\n      # inputs = batch_to_space(outputs)\n      x_tf = self.batch_to_space(\n          math_ops.cast(outputs, dtypes.float32),\n          paddings,\n          block_size=block_size)\n      self.assertAllEqual(x_tf, inputs)\n\n  def _testOne(self, inputs, block_size, outputs):\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    self._testPad(inputs, paddings, block_size, outputs)\n\n  # [1, 2, 2, 1] <-> [4, 1, 1, 1]\n  @test_util.run_deprecated_v1\n  def testSmallInput2x2(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    block_size = 2\n    x_out = [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # [1, 2, 2, 1] <-> [1, 3, 3, 1] (padding) <-> [9, 1, 1, 1]\n  @test_util.run_deprecated_v1\n  def testSmallInput2x2Pad1x0(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.array([[1, 0], [1, 0]], dtype=np.int32)\n    block_size = 3\n    x_out = [[[[0]]], [[[0]]], [[[0]]], [[[0]]], [[[1]]], [[[2]]], [[[0]]],\n             [[[3]]], [[[4]]]]\n    self._testPad(x_np, paddings, block_size, x_out)\n\n  # Test with depth larger than 1.\n  # [1, 2, 2, 3] <-> [4, 1, 1, 3]\n  @test_util.run_deprecated_v1\n  def testDepthInput2x2(self):\n    x_np = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]\n    block_size = 2\n    x_out = [[[[1, 2, 3]]], [[[4, 5, 6]]], [[[7, 8, 9]]], [[[10, 11, 12]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test for larger input dimensions.\n  # [1, 4, 4, 1] <-> [4, 2, 2, 1]\n  @test_util.run_deprecated_v1\n  def testLargerInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]],\n             [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test with batch larger than 1.\n  # [2, 2, 4, 1] <-> [8, 1, 2, 1]\n  @test_util.run_deprecated_v1\n  def testBatchInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]]],\n            [[[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],\n             [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Tests for larger input spatial dimensions AND batch larger than 1, to ensure\n  # that elements are correctly laid out spatially and properly interleaved\n  # along the batch dimension.\n  # [2, 4, 4, 1] <-> [8, 2, 2, 1]\n  @test_util.run_deprecated_v1\n  def testLargerInputBatch2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]],\n            [[[17], [18], [19], [20]], [[21], [22], [23], [24]],\n             [[25], [26], [27], [28]], [[29], [30], [31], [32]]]]\n    x_out = [[[[1], [3]], [[9], [11]]], [[[17], [19]], [[25], [27]]],\n             [[[2], [4]], [[10], [12]]], [[[18], [20]], [[26], [28]]],\n             [[[5], [7]], [[13], [15]]], [[[21], [23]], [[29], [31]]],\n             [[[6], [8]], [[14], [16]]], [[[22], [24]], [[30], [32]]]]\n    block_size = 2\n    self._testOne(x_np, block_size, x_out)\n\n\nclass SpaceToBatchCppTest(SpaceToBatchTest, CppOpImpl):\n  \"\"\"Tests input-output pairs for the SpaceToBatch and BatchToSpace ops.\n\n  This uses the C++ ops.\n  \"\"\"\n  pass\n\n\nclass SpaceToBatchNDTest(test.TestCase):\n  \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"\n\n  def _testPad(self, inputs, block_shape, paddings, outputs):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings).reshape((len(block_shape), 2))\n    for use_gpu in [False, True]:\n      with self.cached_session(use_gpu=use_gpu):\n        # outputs = space_to_batch(inputs)\n        x_tf = array_ops.space_to_batch_nd(\n            math_ops.cast(inputs, dtypes.float32), block_shape, paddings)\n        self.assertAllEqual(x_tf, outputs)\n        # inputs = batch_to_space(outputs)\n        x_tf = array_ops.batch_to_space_nd(\n            math_ops.cast(outputs, dtypes.float32), block_shape, paddings)\n        self.assertAllEqual(x_tf, inputs)\n\n  def _testDirect(self, input_shape, block_shape, paddings):\n    inputs = np.arange(np.prod(input_shape), dtype=np.float32)\n    inputs = inputs.reshape(input_shape)\n    self._testPad(inputs, block_shape, paddings,\n                  space_to_batch_direct(inputs, block_shape, paddings))\n\n  @test_util.run_deprecated_v1\n  def testZeroBlockDimsZeroRemainingDims(self):\n    self._testPad(\n        inputs=[1, 2],\n        block_shape=[],\n        paddings=[],\n        outputs=[1, 2],)\n\n  @test_util.run_deprecated_v1\n  def testZeroBlockDimsOneRemainingDim(self):\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[1, 2], [3, 4]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[1, 2], [3, 4]])\n\n  @test_util.run_deprecated_v1\n  def testZeroBlockDimsTwoRemainingDims(self):\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with two no-op block dims.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1, 1],\n        paddings=[[0, 0], [0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n  @test_util.run_deprecated_v1\n  def testOneBlockDimZeroRemainingDims(self):\n    self._testPad(\n        inputs=[[1, 2, 3], [4, 5, 6]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[0, 2], [0, 5], [1, 3], [4, 6]])\n\n  @test_util.run_deprecated_v1\n  def testOneBlockDimOneRemainingDim(self):\n    self._testPad(\n        inputs=[[[1, 11], [2, 21], [3, 31]], [[4, 41], [5, 51], [6, 61]]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[[0, 0], [2, 21]], [[0, 0], [5, 51]], [[1, 11], [3, 31]],\n                 [[4, 41], [6, 61]]])\n\n  @test_util.run_deprecated_v1\n  def testDirect(self):\n    # Test with zero-size remaining dimension.\n    self._testDirect(\n        input_shape=[3, 1, 2, 0], block_shape=[3], paddings=[[0, 2]])\n\n    # Test with zero-size blocked dimension.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[0, 0]])\n\n    # Test with padding up from zero size.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[1, 2]])\n\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2],\n        paddings=[[1, 2], [0, 0], [3, 0]])\n\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2, 2],\n        paddings=[[1, 2], [0, 0], [3, 0], [0, 0]])\n\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0]])\n\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2, 1],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0], [0, 0]])\n\n\nclass SpaceToBatchSpaceToDepth(test.TestCase, PythonOpImpl):\n\n  # Verifies that: space_to_batch(x) = transpose(space_to_depth(transpose(x)))\n  @test_util.run_deprecated_v1\n  def testSpaceToDepthTranspose(self):\n    x = np.arange(5 * 10 * 16 * 7, dtype=np.float32).reshape([5, 10, 16, 7])\n    block_size = 2\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    y1 = self.space_to_batch(x, paddings, block_size=block_size)\n    y2 = array_ops.transpose(\n        array_ops.space_to_depth(\n            array_ops.transpose(x, [3, 1, 2, 0]), block_size=block_size),\n        [3, 1, 2, 0])\n    with self.session():\n      self.assertAllEqual(y1, y2)\n\n\nclass SpaceToBatchSpaceToDepthCpp(SpaceToBatchSpaceToDepth, CppOpImpl):\n  pass\n\n\nclass SpaceToBatchErrorHandlingTest(test.TestCase, PythonOpImpl):\n\n  @test_util.run_deprecated_v1\n  def testInputWrongDimMissingBatch(self):\n    # The input is missing the first dimension (\"batch\")\n    x_np = [[[1], [2]], [[3], [4]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 2\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testBlockSize0(self):\n    # The block size is 0.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 0\n    with self.assertRaises(ValueError):\n      out_tf = self.space_to_batch(x_np, paddings, block_size)\n      out_tf.eval()\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeOne(self):\n    # The block size is 1. The block size needs to be > 1.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 1\n    with self.assertRaises(ValueError):\n      out_tf = self.space_to_batch(x_np, paddings, block_size)\n      out_tf.eval()\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeLarger(self):\n    # The block size is too large for this input.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 10\n    with self.assertRaises(ValueError):\n      out_tf = self.space_to_batch(x_np, paddings, block_size)\n      self.evaluate(out_tf)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisibleWidth(self):\n    # The block size divides width but not height.\n    x_np = [[[[1], [2], [3]], [[3], [4], [7]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 3\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisibleHeight(self):\n    # The block size divides height but not width.\n    x_np = [[[[1], [2]], [[3], [4]], [[5], [6]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 3\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisibleBoth(self):\n    # The block size does not divide neither width or height.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 3\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testUnknownShape(self):\n    t = self.space_to_batch(\n        array_ops.placeholder(dtypes.float32),\n        array_ops.placeholder(dtypes.int32),\n        block_size=4)\n    self.assertEqual(4, t.get_shape().ndims)\n\n\nclass SpaceToBatchErrorHandlingCppTest(SpaceToBatchErrorHandlingTest,\n                                       CppOpImpl):\n  pass\n\n\nclass SpaceToBatchNDErrorHandlingTest(test.TestCase):\n\n  def _testStaticShape(self, input_shape, block_shape, paddings, error):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings)\n\n    # Try with sizes known at graph construction time.\n    with self.assertRaises(error):\n      _ = array_ops.space_to_batch_nd(\n          np.zeros(input_shape, np.float32), block_shape, paddings)\n\n  def _testDynamicShape(self, input_shape, block_shape, paddings):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings)\n    # Try with sizes unknown at graph construction time.\n    input_placeholder = array_ops.placeholder(dtypes.float32)\n    block_shape_placeholder = array_ops.placeholder(\n        dtypes.int32, shape=block_shape.shape)\n    paddings_placeholder = array_ops.placeholder(dtypes.int32)\n    t = array_ops.space_to_batch_nd(input_placeholder, block_shape_placeholder,\n                                    paddings_placeholder)\n\n    with self.assertRaises(ValueError):\n      _ = t.eval({\n          input_placeholder: np.zeros(input_shape, np.float32),\n          block_shape_placeholder: block_shape,\n          paddings_placeholder: paddings\n      })\n\n  def _testShape(self, input_shape, block_shape, paddings, error):\n    self._testStaticShape(input_shape, block_shape, paddings, error)\n    self._testDynamicShape(input_shape, block_shape, paddings)\n\n  @test_util.run_deprecated_v1\n  def testBlockSize0(self):\n    # The block size is 0.\n    self._testShape([1, 2, 2], [0, 2], [[0, 0], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNegative(self):\n    self._testShape([1, 2, 2], [-1, 2], [[0, 0], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testNegativePadding(self):\n    # The padding is negative.\n    self._testShape([1, 2, 2], [1, 1], [[0, -1], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisible(self):\n    # The padded size is not divisible by the block size.\n    self._testShape([1, 2, 3, 1], [3, 3], [[0, 0], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testBlockDimsMismatch(self):\n    # Shape of block_shape does not match shape of paddings.\n    self._testStaticShape([1, 3, 3, 1], [3, 3], [[0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testUnknown(self):\n    # Verify that input shape and paddings shape can be unknown.\n    _ = array_ops.space_to_batch_nd(\n        array_ops.placeholder(dtypes.float32),\n        array_ops.placeholder(\n            dtypes.int32, shape=(2,)),\n        array_ops.placeholder(dtypes.int32))\n\n    # Only number of input dimensions is known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(None, None, None, None)),\n        array_ops.placeholder(\n            dtypes.int32, shape=(2,)),\n        array_ops.placeholder(dtypes.int32))\n    self.assertEqual(4, t.get_shape().ndims)\n\n    # Dimensions are partially known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(None, None, None, 2)),\n        array_ops.placeholder(\n            dtypes.int32, shape=(2,)),\n        array_ops.placeholder(dtypes.int32))\n    self.assertEqual([None, None, None, 2], t.get_shape().as_list())\n\n    # Dimensions are partially known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(3, None, None, 2)), [2, 3],\n        array_ops.placeholder(dtypes.int32))\n    self.assertEqual([3 * 2 * 3, None, None, 2], t.get_shape().as_list())\n\n    # Dimensions are partially known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(3, None, 2, 2)), [2, 3], [[1, 1], [0, 1]])\n    self.assertEqual([3 * 2 * 3, None, 1, 2], t.get_shape().as_list())\n\n    # Dimensions are fully known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])\n    self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())\n\n\nclass SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):\n\n  # Check the gradients.\n  def _checkGrad(self, x, paddings, block_size):\n    assert 4 == x.ndim\n    with self.cached_session():\n      tf_x = ops.convert_to_tensor(x)\n      tf_y = self.space_to_batch(tf_x, paddings, block_size)\n      epsilon = 1e-5\n      ((x_jacob_t, x_jacob_n)) = gradient_checker.compute_gradient(\n          tf_x,\n          x.shape,\n          tf_y,\n          tf_y.get_shape().as_list(),\n          x_init_value=x,\n          delta=epsilon)\n\n    self.assertAllClose(x_jacob_t, x_jacob_n, rtol=1e-2, atol=epsilon)\n\n  # Tests a gradient for space_to_batch of x which is a four dimensional\n  # tensor of shape [b, h * block_size, w * block_size, d].\n  def _compare(self, b, h, w, d, block_size, pad_beg, pad_end):\n    block_size_sq = block_size * block_size\n    x = np.random.normal(0, 1, b * h * w * d *\n                         block_size_sq).astype(np.float32).reshape(\n                             [b, h * block_size, w * block_size, d])\n    paddings = np.array(\n        [[pad_beg, pad_end], [pad_beg, pad_end]], dtype=np.int32)\n\n    self._checkGrad(x, paddings, block_size)\n\n  # Don't use very large numbers as dimensions here as the result is tensor\n  # with cartesian product of the dimensions.\n  @test_util.run_deprecated_v1\n  def testSmall(self):\n    block_size = 2\n    pad_beg = 0\n    pad_end = 0\n    self._compare(1, 2, 3, 5, block_size, pad_beg, pad_end)\n\n  @test_util.run_deprecated_v1\n  def testSmall2(self):\n    block_size = 2\n    pad_beg = 0\n    pad_end = 0\n    self._compare(2, 4, 3, 2, block_size, pad_beg, pad_end)\n\n  @test_util.run_deprecated_v1\n  def testSmallPad1x1(self):\n    block_size = 2\n    pad_beg = 1\n    pad_end = 1\n    self._compare(1, 2, 3, 5, block_size, pad_beg, pad_end)\n\n\nclass SpaceToBatchGradientCppTest(SpaceToBatchGradientTest, CppOpImpl):\n  pass\n\n\nclass SpaceToBatchNDGradientTest(test.TestCase):\n\n  # Check the gradients.\n  def _checkGrad(self, x, block_shape, paddings):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings).reshape((len(block_shape), 2))\n    with self.cached_session():\n      tf_x = ops.convert_to_tensor(x)\n      tf_y = array_ops.space_to_batch_nd(tf_x, block_shape, paddings)\n      epsilon = 1e-5\n      ((x_jacob_t, x_jacob_n)) = gradient_checker.compute_gradient(\n          tf_x,\n          x.shape,\n          tf_y,\n          tf_y.get_shape().as_list(),\n          x_init_value=x,\n          delta=epsilon)\n\n    self.assertAllClose(x_jacob_t, x_jacob_n, rtol=1e-2, atol=epsilon)\n\n  def _compare(self, input_shape, block_shape, paddings):\n    x = np.random.normal(\n        0, 1, np.prod(input_shape)).astype(np.float32).reshape(input_shape)\n    self._checkGrad(x, block_shape, paddings)\n\n  # Don't use very large numbers as dimensions here as the result is tensor\n  # with cartesian product of the dimensions.\n  @test_util.run_deprecated_v1\n  def testSmall(self):\n    self._compare([1, 4, 6, 5], [2, 2], [[0, 0], [0, 0]])\n\n  @test_util.run_deprecated_v1\n  def testSmall2(self):\n    self._compare([2, 8, 6, 2], [2, 2], [[0, 0], [0, 0]])\n\n  @test_util.run_deprecated_v1\n  def testSmallPad1(self):\n    self._compare([2, 4, 6, 2], [2, 2], [[1, 1], [1, 1]])\n\n  @test_util.run_deprecated_v1\n  def testSmallPadThreeBlockDims(self):\n    self._compare([2, 2, 4, 3, 2], [2, 2, 2], [[1, 1], [1, 1], [1, 0]])\n\n\nclass RequiredSpaceToBatchPaddingsTest(test.TestCase):\n\n  def _checkProperties(self, input_shape, block_shape, base_paddings, paddings,\n                       crops):\n    \"\"\"Checks that `paddings` and `crops` satisfy invariants.\"\"\"\n    num_block_dims = len(block_shape)\n    self.assertEqual(len(input_shape), num_block_dims)\n    if base_paddings is None:\n      base_paddings = np.zeros((num_block_dims, 2), np.int32)\n    self.assertEqual(base_paddings.shape, (num_block_dims, 2))\n    self.assertEqual(paddings.shape, (num_block_dims, 2))\n    self.assertEqual(crops.shape, (num_block_dims, 2))\n    for i in range(num_block_dims):\n      self.assertEqual(paddings[i, 0], base_paddings[i, 0])\n      self.assertLessEqual(0, paddings[i, 1] - base_paddings[i, 1])\n      self.assertLess(paddings[i, 1] - base_paddings[i, 1], block_shape[i])\n      self.assertEqual(\n          (input_shape[i] + paddings[i, 0] + paddings[i, 1]) % block_shape[i],\n          0)\n      self.assertEqual(crops[i, 0], 0)\n      self.assertEqual(crops[i, 1], paddings[i, 1] - base_paddings[i, 1])\n\n  def _test(self, input_shape, block_shape, base_paddings):\n    input_shape = np.array(input_shape)\n    block_shape = np.array(block_shape)\n    if base_paddings is not None:\n      base_paddings = np.array(base_paddings)\n    # Check with constants.\n    paddings, crops = array_ops.required_space_to_batch_paddings(input_shape,\n                                                                 block_shape,\n                                                                 base_paddings)\n    paddings_const = tensor_util.constant_value(paddings)\n    crops_const = tensor_util.constant_value(crops)\n    self.assertIsNotNone(paddings_const)\n    self.assertIsNotNone(crops_const)\n    self._checkProperties(input_shape, block_shape, base_paddings,\n                          paddings_const, crops_const)\n    # Check with non-constants.\n    assignments = {}\n    input_shape_placeholder = array_ops.placeholder(dtypes.int32)\n    assignments[input_shape_placeholder] = input_shape\n    block_shape_placeholder = array_ops.placeholder(dtypes.int32,\n                                                    [len(block_shape)])\n    assignments[block_shape_placeholder] = block_shape\n    if base_paddings is not None:\n      base_paddings_placeholder = array_ops.placeholder(dtypes.int32,\n                                                        [len(block_shape), 2])\n      assignments[base_paddings_placeholder] = base_paddings\n    else:\n      base_paddings_placeholder = None\n    t_paddings, t_crops = array_ops.required_space_to_batch_paddings(\n        input_shape_placeholder, block_shape_placeholder,\n        base_paddings_placeholder)\n    with self.cached_session():\n      paddings_result = t_paddings.eval(assignments)\n      crops_result = t_crops.eval(assignments)\n    self.assertAllEqual(paddings_result, paddings_const)\n    self.assertAllEqual(crops_result, crops_const)\n\n  @test_util.run_deprecated_v1\n  def testSimple(self):\n    self._test(\n        input_shape=np.zeros((0,), np.int32),\n        block_shape=np.zeros((0,), np.int32),\n        base_paddings=None)\n    self._test(\n        input_shape=np.zeros((0,), np.int32),\n        block_shape=np.zeros((0,), np.int32),\n        base_paddings=np.zeros((0, 2), np.int32))\n    self._test(input_shape=[1], block_shape=[2], base_paddings=None)\n    self._test(input_shape=[1], block_shape=[2], base_paddings=[[1, 0]])\n    self._test(input_shape=[3], block_shape=[1], base_paddings=[[1, 2]])\n    self._test(input_shape=[1], block_shape=[2], base_paddings=[[2, 3]])\n    self._test(input_shape=[4, 5], block_shape=[3, 2], base_paddings=None)\n    self._test(\n        input_shape=[4, 5], block_shape=[3, 2], base_paddings=[[0, 0], [0, 1]])\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "fixing_code": ["# Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for SpaceToBatch and BatchToSpace ops.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.compiler.tests import xla_test\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gen_array_ops\nfrom tensorflow.python.platform import test\n\n\ndef space_to_batch_direct(input_array, block_shape, paddings):\n  \"\"\"Direct Python implementation of space-to-batch conversion.\n\n  This is used for tests only.\n\n  Args:\n    input_array: N-D array\n    block_shape: 1-D array of shape [num_block_dims].\n    paddings: 2-D array of shape [num_block_dims, 2].\n\n  Returns:\n    Converted tensor.\n  \"\"\"\n  input_array = np.array(input_array)\n  block_shape = np.array(block_shape)\n  num_block_dims = len(block_shape)\n  paddings = np.array(paddings).reshape((len(block_shape), 2))\n\n  padded = np.pad(input_array,\n                  pad_width=([[0, 0]] + list(paddings) + [[0, 0]] *\n                             (input_array.ndim - 1 - num_block_dims)),\n                  mode=\"constant\")\n  reshaped_padded_shape = [input_array.shape[0]]\n  output_shape = [input_array.shape[0] * np.prod(block_shape)]\n  for block_dim, block_shape_value in enumerate(block_shape):\n    reduced_size = padded.shape[block_dim + 1] // block_shape_value\n    reshaped_padded_shape.append(reduced_size)\n    output_shape.append(reduced_size)\n    reshaped_padded_shape.append(block_shape_value)\n  reshaped_padded_shape.extend(input_array.shape[num_block_dims + 1:])\n  output_shape.extend(input_array.shape[num_block_dims + 1:])\n\n  reshaped_padded = padded.reshape(reshaped_padded_shape)\n  permuted_reshaped_padded = np.transpose(reshaped_padded, (\n      list(np.arange(num_block_dims) * 2 + 2) + [0] +\n      list(np.arange(num_block_dims) * 2 + 1) + list(\n          np.arange(input_array.ndim - num_block_dims - 1) + 1 + num_block_dims\n          * 2)))\n  return permuted_reshaped_padded.reshape(output_shape)\n\n\nclass SpaceToBatchTest(xla_test.XLATestCase):\n  \"\"\"Tests input-output pairs for the SpaceToBatch and BatchToSpace ops.\"\"\"\n\n  def _testPad(self, inputs, paddings, block_size, outputs):\n    with self.session() as sess, self.test_scope():\n      for dtype in self.float_types:\n        # outputs = space_to_batch(inputs)\n        placeholder = array_ops.placeholder(dtype)\n        x_tf = gen_array_ops.space_to_batch(\n            placeholder, paddings, block_size=block_size)\n        self.assertAllEqual(sess.run(x_tf, {placeholder: inputs}), outputs)\n        # inputs = batch_to_space(outputs)\n        x_tf = gen_array_ops.batch_to_space(\n            placeholder, paddings, block_size=block_size)\n        self.assertAllEqual(sess.run(x_tf, {placeholder: outputs}), inputs)\n\n  def _testOne(self, inputs, block_size, outputs):\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    self._testPad(inputs, paddings, block_size, outputs)\n\n  # [1, 2, 2, 1] <-> [4, 1, 1, 1]\n  def testSmallInput2x2(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    block_size = 2\n    x_out = [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # [1, 2, 2, 1] <-> [1, 3, 3, 1] (padding) <-> [9, 1, 1, 1]\n  def testSmallInput2x2Pad1x0(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.array([[1, 0], [1, 0]], dtype=np.int32)\n    block_size = 3\n    x_out = [[[[0]]], [[[0]]], [[[0]]], [[[0]]], [[[1]]], [[[2]]], [[[0]]],\n             [[[3]]], [[[4]]]]\n    self._testPad(x_np, paddings, block_size, x_out)\n\n  # Test with depth larger than 1.\n  # [1, 2, 2, 3] <-> [4, 1, 1, 3]\n  def testDepthInput2x2(self):\n    x_np = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]\n    block_size = 2\n    x_out = [[[[1, 2, 3]]], [[[4, 5, 6]]], [[[7, 8, 9]]], [[[10, 11, 12]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test for larger input dimensions.\n  # [1, 4, 4, 1] <-> [4, 2, 2, 1]\n  def testLargerInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]],\n             [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test with batch larger than 1.\n  # [2, 2, 4, 1] <-> [8, 1, 2, 1]\n  def testBatchInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]]],\n            [[[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],\n             [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Tests for larger input spatial dimensions AND batch larger than 1, to ensure\n  # that elements are correctly laid out spatially and properly interleaved\n  # along the batch dimension.\n  # [2, 4, 4, 1] <-> [8, 2, 2, 1]\n  def testLargerInputBatch2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]],\n            [[[17], [18], [19], [20]], [[21], [22], [23], [24]],\n             [[25], [26], [27], [28]], [[29], [30], [31], [32]]]]\n    x_out = [[[[1], [3]], [[9], [11]]], [[[17], [19]], [[25], [27]]],\n             [[[2], [4]], [[10], [12]]], [[[18], [20]], [[26], [28]]],\n             [[[5], [7]], [[13], [15]]], [[[21], [23]], [[29], [31]]],\n             [[[6], [8]], [[14], [16]]], [[[22], [24]], [[30], [32]]]]\n    block_size = 2\n    self._testOne(x_np, block_size, x_out)\n\n\nclass SpaceToBatchNDErrorHandlingTest(xla_test.XLATestCase):\n\n  def testInvalidBlockShape(self):\n    with self.assertRaisesRegex(ValueError, \"block_shape must be positive\"):\n      with self.session() as sess, self.test_scope():\n        tf_in = constant_op.constant(\n            -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)\n        block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)\n        paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n        sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))\n\n  def testOutputSizeOutOfBounds(self):\n    with self.assertRaisesRegex(ValueError,\n                                \"Negative.* dimension size caused by overflow\"):\n      with self.session() as sess, self.test_scope():\n        tf_in = constant_op.constant(\n            -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)\n        block_shape = constant_op.constant(\n            1879048192, shape=[2], dtype=dtypes.int64)\n        paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n        sess.run(array_ops.space_to_batch_nd(tf_in, block_shape, paddings))\n\n\nclass SpaceToBatchNDTest(xla_test.XLATestCase):\n  \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"\n\n  def _testPad(self, inputs, block_shape, paddings, outputs):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings).reshape((len(block_shape), 2))\n    with self.session() as sess, self.test_scope():\n      for dtype in self.float_types:\n        # TODO(b/68813416): Skip bfloat16's as the input type for direct is\n        # float32 and results in a mismatch, while making testDirect provide the\n        # correctly typed input results in 'no fill-function for data-type'\n        # error.\n        if dtype == dtypes.bfloat16.as_numpy_dtype:\n          continue\n        if dtype == np.float16:\n          actual_inputs = np.array(inputs).astype(dtype)\n          actual_paddings = np.array(paddings).astype(dtype)\n          expected_outputs = np.array(outputs).astype(dtype)\n        else:\n          actual_inputs = inputs\n          actual_paddings = paddings\n          expected_outputs = outputs\n        placeholder = array_ops.placeholder(dtype)\n        # outputs = space_to_batch(inputs)\n        x_tf = array_ops.space_to_batch_nd(placeholder, block_shape,\n                                           actual_paddings)\n        self.assertAllEqual(\n            sess.run(x_tf, {placeholder: actual_inputs}), expected_outputs)\n        # inputs = batch_to_space(outputs)\n        placeholder = array_ops.placeholder(dtype)\n        x_tf = array_ops.batch_to_space_nd(placeholder, block_shape,\n                                           actual_paddings)\n        self.assertAllEqual(\n            sess.run(x_tf, {placeholder: expected_outputs}), actual_inputs)\n\n  def _testDirect(self, input_shape, block_shape, paddings):\n    inputs = np.arange(np.prod(input_shape), dtype=np.float32)\n    inputs = inputs.reshape(input_shape)\n    self._testPad(inputs, block_shape, paddings,\n                  space_to_batch_direct(inputs, block_shape, paddings))\n\n  def testZeroBlockDimsZeroRemainingDims(self):\n    self._testPad(\n        inputs=[1, 2],\n        block_shape=[],\n        paddings=[],\n        outputs=[1, 2],)\n\n  def testZeroBlockDimsOneRemainingDim(self):\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[1, 2], [3, 4]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[1, 2], [3, 4]])\n\n  def testZeroBlockDimsTwoRemainingDims(self):\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with two no-op block dims.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1, 1],\n        paddings=[[0, 0], [0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n  def testOneBlockDimZeroRemainingDims(self):\n    self._testPad(\n        inputs=[[1, 2, 3], [4, 5, 6]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[0, 2], [0, 5], [1, 3], [4, 6]])\n\n  def testOneBlockDimOneRemainingDim(self):\n    self._testPad(\n        inputs=[[[1, 11], [2, 21], [3, 31]], [[4, 41], [5, 51], [6, 61]]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[[0, 0], [2, 21]], [[0, 0], [5, 51]], [[1, 11], [3, 31]],\n                 [[4, 41], [6, 61]]])\n\n  def testDirect0(self):\n    # Test with zero-size remaining dimension.\n    self._testDirect(\n        input_shape=[3, 1, 2, 0], block_shape=[3], paddings=[[0, 2]])\n\n  def testDirect1(self):\n    # Test with zero-size blocked dimension.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[0, 0]])\n\n  def testDirect2(self):\n    # Test with padding up from zero size.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[1, 2]])\n\n  def testDirect3(self):\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2],\n        paddings=[[1, 2], [0, 0], [3, 0]])\n\n  def testDirect4(self):\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2, 2],\n        paddings=[[1, 2], [0, 0], [3, 0], [0, 0]])\n\n  def testDirect5(self):\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0]])\n\n  def testDirect6(self):\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2, 1],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0], [0, 0]])\n\n\nif __name__ == \"__main__\":\n  test.main()\n", "load(\"//tensorflow/core/platform:rules_cc.bzl\", \"cc_library\")\nload(\"//tensorflow:tensorflow.bzl\", \"tf_kernel_library\")\n\npackage(\n    default_visibility = [\n        \"//tensorflow/compiler/tf2xla:internal\",\n        \"//third_party/cloud_tpu/inference_converter:__subpackages__\",\n    ],\n    licenses = [\"notice\"],\n)\n\ntf_kernel_library(\n    name = \"xla_ops\",\n    srcs = [\n        \"aggregate_ops.cc\",\n        \"all_reduce_op.cc\",\n        \"approx_topk_op.cc\",\n        \"arg_op.cc\",\n        \"batch_matmul_op.cc\",\n        \"batch_norm_op.cc\",\n        \"batchtospace_op.cc\",\n        \"bcast_ops.cc\",\n        \"beta_op.cc\",\n        \"bias_ops.cc\",\n        \"binary_ops.cc\",\n        \"broadcast_to_op.cc\",\n        \"bucketize_op.cc\",\n        \"cast_op.cc\",\n        \"categorical_op.cc\",\n        \"cholesky_op.cc\",\n        \"clip_by_value_op.cc\",\n        \"concat_op.cc\",\n        \"const_op.cc\",\n        \"conv_ops.cc\",\n        \"cross_op.cc\",\n        \"cwise_ops.cc\",\n        \"cwise_ops.h\",\n        \"data_format_ops.cc\",\n        \"depthtospace_op.cc\",\n        \"dequantize_op.cc\",\n        \"device_index_op.cc\",\n        \"diag_op.cc\",\n        \"dynamic_partition_op.cc\",\n        \"dynamic_slice_ops.cc\",\n        \"dynamic_stitch_op.cc\",\n        \"einsum_op.cc\",\n        \"elu_op.cc\",\n        \"elu_op.h\",\n        \"empty_op.cc\",\n        \"ensure_shape_op.cc\",\n        \"extract_image_patches_op.cc\",\n        \"fake_param_op.cc\",\n        \"fake_quantize_ops.cc\",\n        \"fft_ops.cc\",\n        \"fill_op.cc\",\n        \"function_ops.cc\",\n        \"gather_op.cc\",\n        \"gather_op_helpers.h\",\n        \"gather_scatter_ops.cc\",\n        \"identity_op.cc\",\n        \"image_ops.cc\",\n        \"image_resize_ops.cc\",\n        \"in_topk_op.cc\",\n        \"index_ops.cc\",\n        \"l2loss_op.cc\",\n        \"listdiff_op.cc\",\n        \"lower_upper_bound_ops.cc\",\n        \"lrn_ops.cc\",\n        \"matmul_op.cc\",\n        \"matrix_band_part_op.cc\",\n        \"matrix_diag_ops.cc\",\n        \"matrix_inverse_op.cc\",\n        \"matrix_solve_op.cc\",\n        \"matrix_triangular_solve_op.cc\",\n        \"mirror_pad_op.cc\",\n        \"next_after_op.cc\",\n        \"no_op.cc\",\n        \"one_hot_op.cc\",\n        \"pack_op.cc\",\n        \"pad_op.cc\",\n        \"pooling_ops.cc\",\n        \"qr_op.cc\",\n        \"quantize_and_dequantize_op.cc\",\n        \"random_ops.cc\",\n        \"random_ops_util.cc\",\n        \"random_ops_util.h\",\n        \"reduce_window_op.cc\",\n        \"reduction_ops.cc\",\n        \"reduction_ops.h\",\n        \"reduction_ops_common.cc\",\n        \"relu_op.cc\",\n        \"relu_op.h\",\n        \"replica_id_op.cc\",\n        \"reshape_op.cc\",\n        \"retval_op.cc\",\n        \"reverse_op.cc\",\n        \"reverse_sequence_op.cc\",\n        \"roll_op.cc\",\n        \"scan_ops.cc\",\n        \"scatter_nd_op.cc\",\n        \"segment_reduction_ops.cc\",\n        \"select_op.cc\",\n        \"sendrecv_ops.cc\",\n        \"sequence_ops.cc\",\n        \"shape_op.cc\",\n        \"shape_util.cc\",\n        \"sharding_op.cc\",\n        \"sharding_util_ops.cc\",\n        \"slice_op.cc\",\n        \"softmax_op.cc\",\n        \"sort_ops.cc\",\n        \"spacetobatch_op.cc\",\n        \"spacetodepth_op.cc\",\n        \"sparse_to_dense_op.cc\",\n        \"split_op.cc\",\n        \"spmd_manual_sharding_ops.cc\",\n        \"stack_ops.cc\",\n        \"stateful_random_ops.cc\",\n        \"stateless_random_ops.cc\",\n        \"stateless_random_ops_v2.cc\",\n        \"strided_slice_op.cc\",\n        \"tensor_array_ops.cc\",\n        \"tensor_list_ops.cc\",\n        \"tile_ops.cc\",\n        \"to_bool_op.cc\",\n        \"topk_op.cc\",\n        \"training_ops.cc\",\n        \"transpose_op.cc\",\n        \"tridiagonal_ops.cc\",\n        \"unary_ops.cc\",\n        \"unary_ops_composition.cc\",\n        \"unique_op.cc\",\n        \"unpack_op.cc\",\n        \"variable_ops.cc\",\n        \"where_op.cc\",\n        \"xla_broadcast_helper_op.cc\",\n        \"xla_conv_op.cc\",\n        \"xla_custom_call_op.cc\",\n        \"xla_dequantize_op.cc\",\n        \"xla_dot_op.cc\",\n        \"xla_optimization_barrier_op.cc\",\n        \"xla_pad_op.cc\",\n        \"xla_reduce_op.cc\",\n        \"xla_select_and_scatter_op.cc\",\n        \"xla_self_adjoint_eig_op.cc\",\n        \"xla_svd_op.cc\",\n    ],\n    hdrs = [\n        \"image_resize_ops.h\",\n        \"index_ops.h\",\n        \"shape_util.h\",\n    ],\n    tags = [\"optonly\"],\n    deps = [\n        \":case_op\",\n        \":conv_op_helpers\",\n        \":if_op\",\n        \":tensor_list_utils\",\n        \":while_op\",\n        \"//tensorflow/compiler/jit:xla_activity_listener\",\n        \"//tensorflow/compiler/jit:xla_activity_proto_cc\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:mlir_xla_op_kernel\",\n        \"//tensorflow/compiler/tf2xla:xla_compilation_device\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_context\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla:xla_resource\",\n        \"//tensorflow/compiler/tf2xla/lib:broadcast\",\n        \"//tensorflow/compiler/tf2xla/lib:data_format\",\n        \"//tensorflow/compiler/tf2xla/lib:random\",\n        \"//tensorflow/compiler/tf2xla/lib:scatter\",\n        \"//tensorflow/compiler/tf2xla/lib:util\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:array4d\",\n        \"//tensorflow/compiler/xla:comparison_util\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla:literal_util\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:sharding_op_util\",\n        \"//tensorflow/compiler/xla:status_macros\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla:xla_data_proto_cc\",\n        \"//tensorflow/compiler/xla/client:client_library\",\n        \"//tensorflow/compiler/xla/client:value_inference\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client:xla_computation\",\n        \"//tensorflow/compiler/xla/client/lib:approx_topk\",\n        \"//tensorflow/compiler/xla/client/lib:arithmetic\",\n        \"//tensorflow/compiler/xla/client/lib:comparators\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/compiler/xla/client/lib:dynamic_shaped_ops\",\n        \"//tensorflow/compiler/xla/client/lib:loops\",\n        \"//tensorflow/compiler/xla/client/lib:math\",\n        \"//tensorflow/compiler/xla/client/lib:matrix\",\n        \"//tensorflow/compiler/xla/client/lib:pooling\",\n        \"//tensorflow/compiler/xla/client/lib:prng\",\n        \"//tensorflow/compiler/xla/client/lib:qr\",\n        \"//tensorflow/compiler/xla/client/lib:quantize\",\n        \"//tensorflow/compiler/xla/client/lib:self_adjoint_eig\",\n        \"//tensorflow/compiler/xla/client/lib:slicing\",\n        \"//tensorflow/compiler/xla/client/lib:sorting\",\n        \"//tensorflow/compiler/xla/client/lib:svd\",\n        \"//tensorflow/compiler/xla/client/lib:tridiagonal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/kernels:resource_variable_util\",\n        \"//tensorflow/core/kernels:scatter_nd_util\",\n        \"//tensorflow/core/kernels:stateful_random_ops_header\",\n        \"//tensorflow/core/kernels:stateless_random_ops_v2_header\",\n        \"//tensorflow/core/tpu:tpu_defs\",\n        \"//tensorflow/core/util:overflow\",\n        \"//tensorflow/stream_executor/lib\",\n        \"@com_google_absl//absl/algorithm:container\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/strings:str_format\",\n        \"@com_google_absl//absl/types:optional\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\n# A separate cc_library for resampler_ops is needed because resampler is in\n# contrib/, and thus the declaration of resampler cannot be pulled into the deps\n# of xla_ops. Therefore, resampler_ops is its own cc_library target, and its\n# corresponding tf_kernel_library is defined in contrib/resampler/BUILD.\ncc_library(\n    name = \"resampler_ops\",\n    srcs = [\"resampler_ops.cc\"],\n    hdrs = [\"resampler_ops.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/xla:array4d\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:xla_data_proto_cc\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:arithmetic\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n    alwayslink = 1,\n)\n\n# See note on resampler_ops target for why this is also a seprate op.\ncc_library(\n    name = \"resampler_addon_ops\",\n    srcs = [\"resampler_addon_ops.cc\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":resampler_ops\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"conv_op_helpers\",\n    srcs = [\"conv_op_helpers.cc\"],\n    hdrs = [\"conv_op_helpers.h\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/xla:literal_util\",\n        \"//tensorflow/compiler/xla:statusor\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:arithmetic\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/kernels:conv_grad_shape_utils\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_list_utils\",\n    srcs = [\"tensor_list_utils.cc\"],\n    hdrs = [\"tensor_list_utils.h\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/xla:literal_util\",\n        \"//tensorflow/compiler/xla:shape_util\",\n        \"//tensorflow/compiler/xla:status_macros\",\n        \"//tensorflow/compiler/xla:statusor\",\n        \"//tensorflow/compiler/xla:util\",\n        \"//tensorflow/compiler/xla:xla_data_proto_cc\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"if_while_utils\",\n    srcs = [\"if_while_utils.cc\"],\n    hdrs = [\"if_while_utils.h\"],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"while_op\",\n    srcs = [\"while_op.cc\"],\n    hdrs = [\"while_op.h\"],\n    deps = [\n        \":if_while_utils\",\n        \":tensor_list_utils\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:side_effect_util\",\n        \"//tensorflow/compiler/tf2xla:tf2xla_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_helpers\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla:status_macros\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client:xla_computation\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"if_op\",\n    srcs = [\"if_op.cc\"],\n    hdrs = [\"if_op.h\"],\n    deps = [\n        \":if_while_utils\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:side_effect_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_context\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:dynamic_shaped_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"case_op\",\n    srcs = [\"case_op.cc\"],\n    hdrs = [\"case_op.h\"],\n    deps = [\n        \":if_while_utils\",\n        \"//tensorflow/compiler/tf2xla:common\",\n        \"//tensorflow/compiler/tf2xla:side_effect_util\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_context\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/compiler/xla:literal\",\n        \"//tensorflow/compiler/xla/client:xla_builder\",\n        \"//tensorflow/compiler/xla/client/lib:constants\",\n        \"//tensorflow/compiler/xla/client/lib:dynamic_shaped_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\n# Kernels that have a dummy (no-op) implementation.\ntf_kernel_library(\n    name = \"xla_dummy_ops\",\n    srcs = [\n        \"assert_op.cc\",\n        \"check_numerics_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/compiler/tf2xla:mlir_xla_op_kernel\",\n        \"//tensorflow/compiler/tf2xla:xla_compiler\",\n        \"//tensorflow/compiler/tf2xla:xla_op_registry\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:logging_ops_op_lib\",\n    ],\n    alwayslink = 1,\n)\n", "/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n#include \"tensorflow/compiler/tf2xla/xla_helpers.h\"\n#include \"tensorflow/compiler/tf2xla/xla_op_kernel.h\"\n#include \"tensorflow/compiler/tf2xla/xla_op_registry.h\"\n#include \"tensorflow/compiler/xla/client/xla_builder.h\"\n#include \"tensorflow/core/util/overflow.h\"\n\nnamespace tensorflow {\nnamespace {\n\nvoid SpaceToBatch(XlaOpKernelContext* ctx, const xla::XlaOp& input,\n                  DataType input_dtype, const TensorShape& input_tensor_shape,\n                  absl::Span<const int64_t> block_shape,\n                  const xla::Literal& paddings) {\n  const int input_rank = input_tensor_shape.dims();\n  const absl::InlinedVector<int64_t, 4> input_shape =\n      input_tensor_shape.dim_sizes();\n  const int block_rank = block_shape.size();\n\n  OP_REQUIRES(\n      ctx, input_rank >= 1 + block_rank,\n      errors::InvalidArgument(\"input rank should be >= \", 1 + block_rank,\n                              \" instead of \", input_rank));\n  absl::Span<const int64_t> remainder_shape(input_shape);\n  remainder_shape.remove_prefix(1 + block_rank);\n\n  OP_REQUIRES(\n      ctx,\n      paddings.shape().rank() == 2 &&\n          block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0) &&\n          2 == xla::ShapeUtil::GetDimension(paddings.shape(), 1),\n      errors::InvalidArgument(\"paddings should have shape [\", block_rank,\n                              \", 2] instead of \",\n                              xla::ShapeUtil::HumanString(paddings.shape())));\n\n  xla::XlaBuilder* b = ctx->builder();\n\n  // 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the\n  //  input according to `paddings` to produce `padded` of shape `padded_shape`.\n  xla::PaddingConfig padding_config;\n  std::vector<int64_t> padded_shape(input_shape.begin(), input_shape.end());\n  int64_t block_num_elems = 1LL;\n  padding_config.add_dimensions();  // Don't pad the batch dimension.\n  for (int i = 0; i < block_rank; ++i) {\n    auto* dim = padding_config.add_dimensions();\n    int64_t pad_start = paddings.Get<int64_t>({i, 0});\n    int64_t pad_end = paddings.Get<int64_t>({i, 1});\n    OP_REQUIRES(ctx, pad_start >= 0 && pad_end >= 0,\n                errors::InvalidArgument(\"Paddings must be non-negative\"));\n    OP_REQUIRES(ctx, block_shape[i] >= 1,\n                errors::InvalidArgument(\n                    \"All values in block_shape must be positive, got value, \",\n                    block_shape[i], \" at index \", i, \".\"));\n    dim->set_edge_padding_low(pad_start);\n    dim->set_edge_padding_high(pad_end);\n    padded_shape[1 + i] += pad_start + pad_end;\n    block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i]);\n  }\n  // Don't pad the remainder dimensions.\n  for (int i = 0; i < remainder_shape.size(); ++i) {\n    padding_config.add_dimensions();\n  }\n  OP_REQUIRES(ctx, block_num_elems > 0,\n              errors::InvalidArgument(\n                  \"The product of the block dimensions must be positive\"));\n  const int64_t batch_size = input_shape[0];\n  const int64_t output_dim =\n      MultiplyWithoutOverflow(batch_size, block_num_elems);\n  if (output_dim < 0) {\n    OP_REQUIRES(\n        ctx, output_dim >= 0,\n        errors::InvalidArgument(\"Negative output dimension size caused by \"\n                                \"overflow when multiplying \",\n                                batch_size, \" and \", block_num_elems));\n  }\n\n  xla::XlaOp padded =\n      xla::Pad(input, XlaHelpers::Zero(b, input_dtype), padding_config);\n\n  // 2. Reshape `padded` to `reshaped_padded` of shape:\n  //\n  //      [batch] +\n  //      [padded_shape[1] / block_shape[0],\n  //        block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1],\n  //       block_shape[M-1]] +\n  //      remaining_shape\n  std::vector<int64_t> reshaped_padded_shape(input_rank + block_rank);\n  reshaped_padded_shape[0] = batch_size;\n  for (int i = 0; i < block_rank; ++i) {\n    OP_REQUIRES(ctx, padded_shape[1 + i] % block_shape[i] == 0,\n                errors::InvalidArgument(\"padded_shape[\", 1 + i,\n                                        \"]=\", padded_shape[1 + i],\n                                        \" is not divisible by block_shape[\", i,\n                                        \"]=\", block_shape[i]));\n\n    reshaped_padded_shape[1 + i * 2] = padded_shape[1 + i] / block_shape[i];\n    reshaped_padded_shape[1 + i * 2 + 1] = block_shape[i];\n  }\n  std::copy(remainder_shape.begin(), remainder_shape.end(),\n            reshaped_padded_shape.begin() + 1 + 2 * block_rank);\n\n  xla::XlaOp reshaped_padded = xla::Reshape(padded, reshaped_padded_shape);\n\n  // 3. Permute dimensions of `reshaped_padded` to produce\n  //    `permuted_reshaped_padded` of shape:\n  //\n  //      block_shape +\n  //      [batch] +\n  //      [padded_shape[1] / block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1]] +\n  //      remaining_shape\n  std::vector<int64_t> permutation(reshaped_padded_shape.size());\n  for (int i = 0; i < block_rank; ++i) {\n    permutation[i] = 1 + 2 * i + 1;\n    permutation[block_rank + 1 + i] = 1 + 2 * i;\n  }\n  permutation[block_rank] = 0;\n  std::iota(permutation.begin() + 1 + block_rank * 2, permutation.end(),\n            1 + block_rank * 2);\n  xla::XlaOp permuted_reshaped_padded =\n      xla::Transpose(reshaped_padded, permutation);\n\n  // 4. Reshape `permuted_reshaped_padded` to flatten `block_shape` into the\n  //    batch dimension, producing an output tensor of shape:\n  //\n  //      [batch * prod(block_shape)] +\n  //      [padded_shape[1] / block_shape[0],\n  //       ...,\n  //       padded_shape[M] / block_shape[M-1]] +\n  //      remaining_shape\n  // Determine the length of the prefix of block dims that can be combined\n  // into the batch dimension due to having no padding and block_shape=1.\n  std::vector<int64_t> output_shape(input_rank);\n  output_shape[0] = output_dim;\n  for (int i = 0; i < block_rank; ++i) {\n    output_shape[1 + i] = padded_shape[1 + i] / block_shape[i];\n  }\n  std::copy(remainder_shape.begin(), remainder_shape.end(),\n            output_shape.begin() + 1 + block_rank);\n\n  xla::XlaOp output = xla::Reshape(permuted_reshaped_padded, output_shape);\n  ctx->SetOutput(0, output);\n}\n\nclass SpaceToBatchNDOp : public XlaOpKernel {\n public:\n  explicit SpaceToBatchNDOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {}\n\n  void Compile(XlaOpKernelContext* ctx) override {\n    std::vector<int64_t> block_shape;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsIntVector(1, &block_shape));\n\n    xla::Literal paddings;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsInt64Literal(2, &paddings));\n\n    SpaceToBatch(ctx, ctx->Input(0), input_type(0), ctx->InputShape(0),\n                 block_shape, paddings);\n  }\n};\nREGISTER_XLA_OP(Name(\"SpaceToBatchND\")\n                    .CompileTimeConstantInput(\"paddings\")\n                    .CompileTimeConstantInput(\"block_shape\"),\n                SpaceToBatchNDOp);\n\nclass SpaceToBatchOp : public XlaOpKernel {\n public:\n  explicit SpaceToBatchOp(OpKernelConstruction* ctx) : XlaOpKernel(ctx) {\n    OP_REQUIRES_OK(ctx, ctx->GetAttr(\"block_size\", &block_size_));\n    OP_REQUIRES(\n        ctx, block_size_ > 1,\n        errors::InvalidArgument(\"Block size should be > 1: \", block_size_));\n  }\n\n  void Compile(XlaOpKernelContext* ctx) override {\n    xla::Literal paddings;\n    OP_REQUIRES_OK(ctx, ctx->ConstantInputAsInt64Literal(1, &paddings));\n\n    SpaceToBatch(ctx, ctx->Input(0), input_type(0), ctx->InputShape(0),\n                 {block_size_, block_size_}, paddings);\n  }\n\n private:\n  int block_size_;\n};\nREGISTER_XLA_OP(Name(\"SpaceToBatch\").CompileTimeConstantInput(\"paddings\"),\n                SpaceToBatchOp);\n\n}  // namespace\n}  // namespace tensorflow\n", "load(\n    \"//tensorflow/core/platform:build_config.bzl\",\n    \"tf_kernel_tests_linkstatic\",\n    \"tf_proto_library\",\n    \"tf_pyclif_proto_library\",\n)\nload(\n    \"//tensorflow:tensorflow.bzl\",\n    \"tf_cc_test\",\n    \"tf_cc_tests\",\n    \"tf_copts\",\n    \"tf_cuda_library\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"filegroup\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_cc_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_generate_proto_text_sources\")\n\n# buildifier: disable=same-origin-load\nload(\n    \"//tensorflow/core/platform:build_config_root.bzl\",\n    \"if_static\",\n    \"tf_cuda_tests_tags\",\n)\nload(\n    \"//tensorflow/core/platform:rules_cc.bzl\",\n    \"cc_library\",\n)\n\npackage(\n    default_visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n    licenses = [\"notice\"],\n)\n\n# Export all header files for which we do not yet provide a dedicated build\n# rule. This avoids breaking all the rules in tensorflow/core/BUILD.\nexports_files(\n    srcs = [\n        \"allocator_registry.h\",\n        \"cancellation.h\",\n        \"collective.h\",\n        \"control_flow.h\",\n        \"dataset.h\",\n        \"dataset_stateful_op_allowlist.h\",\n        \"device.h\",\n        \"device_base.h\",\n        \"device_factory.h\",\n        \"function.h\",\n        \"function_handle_cache.h\",\n        \"graph_def_util.h\",\n        \"graph_to_functiondef.h\",\n        \"kernel_def_builder.h\",\n        \"kernel_def_util.h\",\n        \"logging.h\",\n        \"lookup_interface.h\",\n        \"memory_types.h\",\n        \"metrics.h\",\n        \"model.h\",\n        \"node_def_builder.h\",\n        \"numeric_op.h\",\n        \"op_kernel.h\",\n        \"op_requires.h\",\n        \"op_segment.h\",\n        \"ops_util.h\",\n        \"partial_tensor_shape.h\",\n        \"queue_interface.h\",\n        \"reader_interface.h\",\n        \"reader_op_kernel.h\",\n        \"ref_var.h\",\n        \"register_types_traits.h\",\n        \"rendezvous.h\",\n        \"resource_mgr.h\",\n        \"resource_op_kernel.h\",\n        \"resource_var.h\",\n        \"rng_alg.h\",\n        \"run_handler.h\",\n        \"run_handler_util.h\",\n        \"session_state.h\",\n        \"shared_ptr_variant.h\",\n        \"stats_aggregator.h\",\n        \"tensor_reference.h\",\n        \"tensor_slice.h\",\n        \"tensor_util.h\",\n        \"thread_factory.h\",\n        \"tracking_allocator.h\",\n        \"versions.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/common_runtime:__pkg__\",\n    ],\n)\n\n# List of exported test source files that do not yet have local build rules.\nexports_files(\n    srcs = [\n        \"op_gen_lib_test.cc\",\n        \"op_segment_test.cc\",\n        \"run_handler_test.cc\",\n        \"run_handler_util_test.cc\",\n        \"variant_op_copy_test.cc\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\n# List of exported proto source files.\nexports_files(\n    srcs = [\n        \"allocation_description.proto\",\n        \"api_def.proto\",\n        \"attr_value.proto\",\n        \"cost_graph.proto\",\n        \"dataset_metadata.proto\",\n        \"dataset_options.proto\",\n        \"device_attributes.proto\",\n        \"full_type.proto\",\n        \"function.proto\",\n        \"graph.proto\",\n        \"graph_transfer_info.proto\",\n        \"kernel_def.proto\",\n        \"log_memory.proto\",\n        \"model.proto\",\n        \"node_def.proto\",\n        \"op_def.proto\",\n        \"reader_base.proto\",\n        \"resource_handle.proto\",\n        \"step_stats.proto\",\n        \"summary.proto\",\n        \"tensor.proto\",\n        \"tensor_description.proto\",\n        \"tensor_shape.proto\",\n        \"tensor_slice.proto\",\n        \"types.proto\",\n        \"variable.proto\",\n        \"versions.proto\",\n    ],\n    visibility = [\n        \"//tensorflow:internal\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n)\n\nexports_files(\n    [\n        \"attr_value_util.h\",\n        \"common_shape_fns.h\",\n        \"kernel_shape_util.h\",\n        \"node_def_util.h\",\n        \"node_properties.h\",\n        \"op.h\",\n        \"op_def_builder.h\",\n        \"full_type_util.h\",\n        \"full_type_inference_util.h\",\n        \"op_def_util.h\",\n        \"shape_inference.h\",\n    ],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n)\n\n# The following filegroups are needed since globbing across packages boundaries\n# will just fail silently (see 3rd caveat at\n# https://docs.bazel.build/versions/master/be/functions.html#glob).\n\n# Files needed for core:framework_internal_impl.\nfilegroup(\n    name = \"framework_internal_private_hdrs\",\n    srcs = [\n        \"allocator.h\",\n        \"allocator_registry.h\",\n        \"attr_value_util.h\",\n        \"bfloat16.h\",\n        \"bounds_check.h\",\n        \"cancellation.h\",\n        \"collective.h\",\n        \"common_shape_fns.h\",\n        \"control_flow.h\",\n        \"dataset.h\",\n        \"dataset_stateful_op_allowlist.h\",\n        \"device.h\",\n        \"device_base.h\",\n        \"device_factory.h\",\n        \"full_type_inference_util.h\",\n        \"full_type_util.h\",\n        \"function.h\",\n        \"function_handle_cache.h\",\n        \"graph_def_util.h\",\n        \"graph_to_functiondef.h\",\n        \"kernel_def_builder.h\",\n        \"kernel_def_util.h\",\n        \"kernel_shape_util.h\",\n        \"local_rendezvous.h\",\n        \"log_memory.h\",\n        \"logging.h\",\n        \"lookup_interface.h\",\n        \"memory_types.h\",\n        \"metrics.h\",\n        \"model.h\",\n        \"node_def_builder.h\",\n        \"node_def_util.h\",\n        \"node_properties.h\",\n        \"numeric_op.h\",\n        \"numeric_types.h\",\n        \"op.h\",\n        \"op_def_builder.h\",\n        \"op_def_util.h\",\n        \"op_kernel.h\",\n        \"op_requires.h\",\n        \"op_segment.h\",\n        \"ops_util.h\",\n        \"partial_tensor_shape.h\",\n        \"queue_interface.h\",\n        \"reader_interface.h\",\n        \"reader_op_kernel.h\",\n        \"ref_var.h\",\n        \"register_types.h\",\n        \"register_types_traits.h\",\n        \"rendezvous.h\",\n        \"resource_base.h\",\n        \"resource_handle.h\",\n        \"resource_mgr.h\",\n        \"resource_op_kernel.h\",\n        \"resource_var.h\",\n        \"run_handler.h\",\n        \"run_handler_util.h\",\n        \"session_state.h\",\n        \"shape_inference.h\",\n        \"shared_ptr_variant.h\",\n        \"stats_aggregator.h\",\n        \"tensor.h\",\n        \"tensor_key.h\",\n        \"tensor_reference.h\",\n        \"tensor_shape.h\",\n        \"tensor_slice.h\",\n        \"tensor_types.h\",\n        \"tensor_util.h\",\n        \"thread_factory.h\",\n        \"tracking_allocator.h\",\n        \"type_index.h\",\n        \"type_traits.h\",\n        \"typed_allocator.h\",\n        \"types.h\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.h\",\n        \"versions.h\",\n        \"//tensorflow/core/framework/registration:options.h\",\n        \"//tensorflow/core/framework/registration:registration.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_impl_srcs\",\n    srcs = [\n        \"cancellation.cc\",\n        \"collective.cc\",\n        \"dataset.cc\",\n        \"device.cc\",\n        \"device_base.cc\",\n        \"device_factory.cc\",\n        \"function.cc\",\n        \"function_handle_cache.cc\",\n        \"graph_def_util.cc\",\n        \"graph_to_functiondef.cc\",\n        \"kernel_def_builder.cc\",\n        \"kernel_def_util.cc\",\n        \"load_library.cc\",\n        \"local_rendezvous.cc\",\n        \"logging.cc\",\n        \"lookup_interface.cc\",\n        \"memory_types.cc\",\n        \"metrics.cc\",\n        \"model.cc\",\n        \"node_def_builder.cc\",\n        \"op_kernel.cc\",\n        \"op_segment.cc\",\n        \"ops_util.cc\",\n        \"ref_var.cc\",\n        \"rendezvous.cc\",\n        \"resource_mgr.cc\",\n        \"resource_var.cc\",\n        \"run_handler.cc\",\n        \"run_handler_util.cc\",\n        \"tensor_slice.cc\",\n        \"tensor_util.cc\",\n        \"versions.cc\",\n    ],\n)\n\n# Files needed for core:mobile_srcs_(no|only)_runtime.\nfilegroup(\n    name = \"mobile_srcs_no_runtime\",\n    srcs = [\n        \"allocator.cc\",\n        \"allocator.h\",\n        \"allocator_registry.cc\",\n        \"allocator_registry.h\",\n        \"bfloat16.cc\",\n        \"bfloat16.h\",\n        \"bounds_check.h\",\n        \"cpu_allocator_impl.cc\",\n        \"kernel_shape_util.cc\",\n        \"kernel_shape_util.h\",\n        \"log_memory.cc\",\n        \"log_memory.h\",\n        \"numeric_types.h\",\n        \"op_requires.h\",\n        \"ops_util.cc\",\n        \"ops_util.h\",\n        \"register_types.h\",\n        \"resource_base.h\",\n        \"resource_handle.cc\",\n        \"resource_handle.h\",\n        \"tensor.cc\",\n        \"tensor.h\",\n        \"tensor_key.h\",\n        \"tensor_shape.cc\",\n        \"tensor_shape.h\",\n        \"tensor_types.h\",\n        \"tracking_allocator.cc\",\n        \"tracking_allocator.h\",\n        \"type_index.h\",\n        \"type_traits.h\",\n        \"typed_allocator.cc\",\n        \"typed_allocator.h\",\n        \"types.cc\",\n        \"types.h\",\n        \"variant.cc\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.cc\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.cc\",\n        \"variant_tensor_data.h\",\n    ],\n)\n\nfilegroup(\n    name = \"mobile_srcs_only_runtime\",\n    srcs = [\n        \"attr_value_util.cc\",\n        \"attr_value_util.h\",\n        \"cancellation.cc\",\n        \"cancellation.h\",\n        \"collective.cc\",\n        \"collective.h\",\n        \"common_shape_fns.cc\",\n        \"common_shape_fns.h\",\n        \"control_flow.h\",\n        \"dataset.cc\",\n        \"dataset.h\",\n        \"dataset_stateful_op_allowlist.h\",\n        \"device.cc\",\n        \"device.h\",\n        \"device_base.cc\",\n        \"device_base.h\",\n        \"device_factory.cc\",\n        \"device_factory.h\",\n        \"full_type_inference_util.cc\",\n        \"full_type_inference_util.h\",\n        \"full_type_util.cc\",\n        \"full_type_util.h\",\n        \"function.cc\",\n        \"function.h\",\n        \"function_handle_cache.cc\",\n        \"function_handle_cache.h\",\n        \"graph_def_util.cc\",\n        \"graph_def_util.h\",\n        \"graph_to_functiondef.cc\",\n        \"graph_to_functiondef.h\",\n        \"kernel_def_builder.cc\",\n        \"kernel_def_builder.h\",\n        \"kernel_def_util.cc\",\n        \"kernel_def_util.h\",\n        \"load_library.cc\",\n        \"local_rendezvous.cc\",\n        \"local_rendezvous.h\",\n        \"logging.cc\",\n        \"logging.h\",\n        \"lookup_interface.cc\",\n        \"lookup_interface.h\",\n        \"memory_types.cc\",\n        \"memory_types.h\",\n        \"metrics.cc\",\n        \"metrics.h\",\n        \"model.cc\",\n        \"model.h\",\n        \"node_def_builder.cc\",\n        \"node_def_builder.h\",\n        \"node_def_util.cc\",\n        \"node_def_util.h\",\n        \"node_properties.cc\",\n        \"node_properties.h\",\n        \"numeric_op.h\",\n        \"op.cc\",\n        \"op.h\",\n        \"op_def_builder.cc\",\n        \"op_def_builder.h\",\n        \"op_def_util.cc\",\n        \"op_def_util.h\",\n        \"op_kernel.cc\",\n        \"op_kernel.h\",\n        \"op_segment.cc\",\n        \"op_segment.h\",\n        \"partial_tensor_shape.h\",\n        \"queue_interface.h\",\n        \"reader_base.cc\",\n        \"reader_base.h\",\n        \"reader_interface.h\",\n        \"reader_op_kernel.h\",\n        \"ref_var.cc\",\n        \"ref_var.h\",\n        \"register_types_traits.h\",\n        \"rendezvous.cc\",\n        \"rendezvous.h\",\n        \"resource_mgr.cc\",\n        \"resource_mgr.h\",\n        \"resource_op_kernel.h\",\n        \"resource_var.cc\",\n        \"resource_var.h\",\n        \"rng_alg.h\",\n        \"run_handler.cc\",\n        \"run_handler.h\",\n        \"run_handler_util.cc\",\n        \"run_handler_util.h\",\n        \"session_state.h\",\n        \"shape_inference.cc\",\n        \"shape_inference.h\",\n        \"stats_aggregator.h\",\n        \"tensor_reference.h\",\n        \"tensor_slice.cc\",\n        \"tensor_slice.h\",\n        \"tensor_util.cc\",\n        \"tensor_util.h\",\n        \"thread_factory.h\",\n        \"versions.cc\",\n        \"versions.h\",\n        \"//tensorflow/core/framework/registration:options.h\",\n        \"//tensorflow/core/framework/registration:registration.h\",\n    ],\n)\n\nfilegroup(\n    name = \"android_test_hdrs\",\n    srcs = [\n        \"fake_input.h\",\n        \"shape_inference_testutil.h\",\n        \"tensor_testutil.h\",\n    ],\n)\n\nfilegroup(\n    name = \"android_test_srcs\",\n    srcs = [\n        \"fake_input.cc\",\n        \":android_test_srcs_no_core\",\n    ],\n)\n\nfilegroup(\n    name = \"android_test_srcs_no_core\",\n    srcs = [\n        \"shape_inference_testutil.cc\",\n        \"tensor_testutil.cc\",\n    ],\n)\n\n# Individual targets. These should be preferred over tensorflow/core:framework\n# whenever possible.\n\n# This is redundant with the \"tensorflow/core:framework\" target. It's useful for\n# applications that want to depend on a minimal subset of TensorFlow (e.g. XLA).\ncc_library(\n    name = \"allocator\",\n    srcs = [\n        \"allocator.cc\",\n        \"allocator_registry.h\",\n        \"tracking_allocator.cc\",\n        \"tracking_allocator.h\",\n    ],\n    hdrs = [\n        \"allocator.h\",\n    ],\n    features = [\"parse_headers\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":numeric_types\",\n        \":type_traits\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ] + if_static(\n        extra_deps = [\n            \":allocator_registry_impl\",\n            \"//tensorflow/core/lib/gtl:inlined_vector\",\n            \"//tensorflow/core/lib/strings:strcat\",\n            \"//tensorflow/core/lib/strings:stringprintf\",\n            \"//tensorflow/core/platform:env\",\n            \"//tensorflow/core/platform:env_impl\",\n            \"//tensorflow/core/platform:logging\",\n            \"//tensorflow/core/platform:macros\",\n            \"//tensorflow/core/platform:mutex\",\n            \"//tensorflow/core/platform:platform_port\",\n            \"//tensorflow/core/platform:thread_annotations\",\n            \"//tensorflow/core/platform:types\",\n        ],\n        otherwise = [\n            \"//tensorflow/core:lib\",\n        ],\n    ),\n    alwayslink = 1,\n)\n\n# This target will be included in libtensorflow_framework.so via the\n# framework_internal_impl target.\n# All other dependencies on this target need to go through if_static guard,\n# as otherwise duplicate registration in the registry will cause crashes.\ncc_library(\n    name = \"allocator_registry_impl\",\n    srcs = [\n        \"allocator.h\",\n        \"allocator_registry.cc\",\n        \"allocator_registry.h\",\n        \"cpu_allocator_impl.cc\",\n        \"tracking_allocator.h\",\n    ],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n    deps = [\n        \":numeric_types\",\n        \":type_traits\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/lib/strings:stringprintf\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:thread_annotations\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/profiler/lib:scoped_memory_debug_annotation\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"tensor_testutil\",\n    testonly = 1,\n    srcs = [\"tensor_testutil.cc\"],\n    hdrs = [\"tensor_testutil.h\"],\n    copts = tf_copts(),\n    visibility = [\"//tensorflow:internal\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n    ],\n)\n\ncc_library(\n    name = \"shape_inference_testutil\",\n    testonly = 1,\n    srcs = [\"shape_inference_testutil.cc\"],\n    hdrs = [\"shape_inference_testutil.h\"],\n    copts = tf_copts(),\n    visibility = [\"//tensorflow:internal\"],\n    deps = [\n        \":node_def_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ncc_library(\n    name = \"reader_base\",\n    srcs = [\"reader_base.cc\"],\n    hdrs = [\"reader_base.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":reader_base_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"op_gen_lib\",\n    srcs = [\"op_gen_lib.cc\"],\n    hdrs = [\"op_gen_lib.h\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":api_def_proto_cc\",\n        \":attr_value_proto_cc\",\n        \":op_def_proto_cc\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"fake_input\",\n    testonly = 1,\n    srcs = [\"fake_input.cc\"],\n    hdrs = [\"fake_input.h\"],\n    visibility = [\"//tensorflow:__subpackages__\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":op_def_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"function_testlib\",\n    testonly = 1,\n    srcs = [\"function_testlib.cc\"],\n    hdrs = [\"function_testlib.h\"],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n    deps = [\n        \":function_proto_cc\",\n        \":graph_proto_cc\",\n        \":node_def_proto_cc\",\n        \":tensor_testutil\",\n        \":versions_proto_cc\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"bfloat16\",\n    srcs = [\"bfloat16.cc\"],\n    hdrs = [\"bfloat16.h\"],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n    deps = [\n        \":numeric_types\",\n        \"//tensorflow/core/platform:byte_order\",\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"numeric_types\",\n    hdrs = [\"numeric_types.h\"],\n    visibility = [\n        \"//tensorflow/compiler:__subpackages__\",\n        \"//tensorflow/core:__subpackages__\",\n    ],\n    deps = [\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"bounds_check\",\n    hdrs = [\"bounds_check.h\"],\n    visibility = [\"//tensorflow/core/kernels:friends\"],\n    deps = [\n        \"//tensorflow/core/platform:macros\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_shape\",\n    srcs = [\"tensor_shape.cc\"],\n    hdrs = [\n        \"partial_tensor_shape.h\",\n        \"tensor_shape.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/runtime_fallback:__subpackages__\",\n        \"//tensorflow/core/tfrt/utils:__subpackages__\",\n    ],\n    deps = [\n        \":bounds_check\",\n        \":tensor_shape_proto_cc\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:statusor\",\n        \"//tensorflow/core/util:overflow\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"resource_base\",\n    hdrs = [\"resource_base.h\"],\n    deps = [\n        \"//tensorflow/core/lib/core:refcount\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/platform:errors\",\n    ],\n)\n\ncc_library(\n    name = \"resource_handle\",\n    srcs = [\"resource_handle.cc\"],\n    hdrs = [\"resource_handle.h\"],\n    visibility = [\n        \"//tensorflow/compiler/mlir/tensorflow:__subpackages__\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n    deps = [\n        \":resource_base\",\n        \":resource_handle_proto_cc\",\n        \":tensor_shape\",\n        \":type_index\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:casts\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:intrusive_ptr\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:statusor\",\n        \"//tensorflow/core/platform:tensor_coding\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/util:managed_stack_trace\",\n        \"@com_google_absl//absl/strings:str_format\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cc_test(\n    name = \"resource_handle_test\",\n    size = \"small\",\n    srcs = [\"resource_handle_test.cc\"],\n    deps = [\n        \":resource_handle\",\n        \":resource_handle_proto_cc\",\n        \":tensor_shape_proto_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ncc_library(\n    name = \"type_index\",\n    hdrs = [\"type_index.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \"//tensorflow/core/platform:hash\",\n        \"//tensorflow/core/platform:stringpiece\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_types\",\n    hdrs = [\"tensor_types.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \"//tensorflow/core/platform:logging\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"type_traits\",\n    hdrs = [\"type_traits.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \":numeric_types\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"tensor\",\n    srcs = [\n        \"log_memory.cc\",\n        \"tensor.cc\",\n        \"typed_allocator.cc\",\n        \"types.cc\",\n        \"variant.cc\",\n        \"variant_op_registry.cc\",\n        \"variant_tensor_data.cc\",\n    ],\n    hdrs = [\n        \"log_memory.h\",\n        \"register_types.h\",\n        \"tensor.h\",\n        \"typed_allocator.h\",\n        \"types.h\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/runtime_fallback:__subpackages__\",\n        \"//tensorflow/core/tfrt:__subpackages__\",\n        \"//tensorflow/core/util:__pkg__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n    deps = [\n        \":allocation_description_proto_cc\",\n        \":allocator\",\n        \":bfloat16\",\n        \":full_type_proto_cc\",\n        \":log_memory_proto_cc\",\n        \":numeric_types\",\n        \":resource_handle\",\n        \":resource_handle_proto_cc\",\n        \":tensor_description_proto_cc\",\n        \":tensor_proto_cc\",\n        \":tensor_shape\",\n        \":tensor_types\",\n        \":type_index\",\n        \":type_traits\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:coding\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:refcount\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:flatmap\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:abi\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:strcat\",\n        \"//tensorflow/core/platform:tensor_coding\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/public:version\",\n        \"//tensorflow/core/util:managed_stack_trace\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/strings\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"shape_inference\",\n    srcs = [\"shape_inference.cc\"],\n    hdrs = [\"shape_inference.h\"],\n    deps = [\n        \":bounds_check\",\n        \":full_type_proto_cc\",\n        \":full_type_util\",\n        \":node_def_proto_cc\",\n        \":node_def_util\",\n        \":op_def_proto_cc\",\n        \":tensor_shape\",\n        \":tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/lib/strings:numbers\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/util:overflow\",\n        \"@com_google_absl//absl/memory\",\n    ],\n)\n\ncc_library(\n    name = \"kernel_shape_util\",\n    srcs = [\"kernel_shape_util.cc\"],\n    hdrs = [\"kernel_shape_util.h\"],\n    deps = [\n        \":tensor\",\n        \":tensor_shape\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/util:padding\",\n    ],\n)\n\ncc_library(\n    name = \"common_shape_fns\",\n    srcs = [\"common_shape_fns.cc\"],\n    hdrs = [\"common_shape_fns.h\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":shape_inference\",\n        \":tensor\",\n        \":tensor_shape\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/util:einsum_op_util\",\n        \"//tensorflow/core/util:padding\",\n        \"//tensorflow/core/util:tensor_format\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"attr_value_util\",\n    srcs = [\"attr_value_util.cc\"],\n    hdrs = [\"attr_value_util.h\"],\n    deps = [\n        \":attr_value_proto_text\",\n        \":tensor\",\n        \":tensor_shape\",\n        \":tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/lib/strings:proto_serialization\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/platform:fingerprint\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"op_def_util\",\n    srcs = [\"op_def_util.cc\"],\n    hdrs = [\"op_def_util.h\"],\n    deps = [\n        \":api_def_proto_cc\",\n        \":attr_value_proto_cc\",\n        \":attr_value_util\",\n        \":op_def_proto_cc\",\n        \":tensor\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:map_util\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/lib/strings:proto_serialization\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"node_def_util\",\n    srcs = [\"node_def_util.cc\"],\n    hdrs = [\"node_def_util.h\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":attr_value_util\",\n        \":node_def_proto_cc\",\n        \":op_def_proto_cc\",\n        \":op_def_util\",\n        \":tensor\",\n        \":tensor_proto_cc\",\n        \":tensor_shape\",\n        \":tensor_shape_proto_cc\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:flatmap\",\n        \"//tensorflow/core/lib/gtl:map_util\",\n        \"//tensorflow/core/lib/hash\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:hash\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:scanner\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/platform:strcat\",\n        \"//tensorflow/core/platform:stringpiece\",\n        \"//tensorflow/core/platform:types\",\n        \"//tensorflow/core/util:padding\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"node_properties\",\n    srcs = [\"node_properties.cc\"],\n    hdrs = [\"node_properties.h\"],\n    deps = [\n        \":full_type_proto_cc\",\n        \":node_def_proto_cc\",\n        \":node_def_util\",\n        \":op\",\n        \":op_def_builder\",\n        \":op_def_proto_cc\",\n        \":tensor\",\n        \"//tensorflow/core/lib/core:status\",\n    ],\n)\n\ncc_library(\n    name = \"op_def_builder\",\n    srcs = [\"op_def_builder.cc\"],\n    hdrs = [\"op_def_builder.h\"],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":attr_value_util\",\n        \":full_type_proto_cc\",\n        \":op_def_proto_cc\",\n        \":op_def_util\",\n        \":tensor\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:macros\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\n# TODO(mdan): Move these into a separate directory.\ncc_library(\n    name = \"full_type_util\",\n    srcs = [\n        \"full_type_inference_util.cc\",\n        \"full_type_util.cc\",\n    ],\n    hdrs = [\n        \"full_type_inference_util.h\",\n        \"full_type_util.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n        # Necessary for calling REGISTER_OP with SetTypeConstructor\n        # http://yaqs/4779722181477138432\n        \"//intelligence/brella/analytics/sql/tensorflow:__pkg__\",\n    ],\n    deps = [\n        \":attr_value_proto_cc\",\n        \":full_type_proto_cc\",\n        \":node_def_proto_cc\",\n        \":node_def_util\",\n        \":op_def_builder\",\n        \":op_def_proto_cc\",\n        \":tensor\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:hash\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/platform:statusor\",\n        \"//tensorflow/core/protobuf:error_codes_proto_impl_cc\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"op\",\n    srcs = [\"op.cc\"],\n    hdrs = [\"op.h\"],\n    deps = [\n        \":full_type_proto_cc\",\n        \":full_type_util\",\n        \":op_def_builder\",\n        \":op_def_util\",\n        \"//tensorflow/core/framework/registration\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/gtl:map_util\",\n        \"//tensorflow/core/lib/strings:str_util\",\n        \"//tensorflow/core/lib/strings:strcat\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:platform_port\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:thread_annotations\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"op_requires\",\n    hdrs = [\"op_requires.h\"],\n    deps = [\"//tensorflow/core/platform:macros\"],\n)\n\n# Files whose users still need to be migrated from core:framework to the\n# above targets.\n# TODO(gonnet): Remove these files once targets depending on them have\n# been cleaned up.\nexports_files(\n    srcs = [\n        \"allocator.h\",\n        \"bfloat16.h\",\n        \"bounds_check.h\",\n        \"fake_input.h\",\n        \"function_testlib.h\",\n        \"log_memory.h\",\n        \"numeric_types.h\",\n        \"op_gen_lib.h\",\n        \"reader_base.h\",\n        \"register_types.h\",\n        \"resource_base.h\",\n        \"resource_handle.h\",\n        \"shape_inference_testutil.h\",\n        \"tensor.h\",\n        \"tensor_interface.h\",\n        \"tensor_shape.h\",\n        \"tensor_testutil.h\",\n        \"tensor_types.h\",\n        \"type_index.h\",\n        \"type_traits.h\",\n        \"typed_allocator.h\",\n        \"types.h\",\n        \"variant.h\",\n        \"variant_encode_decode.h\",\n        \"variant_op_registry.h\",\n        \"variant_tensor_data.h\",\n    ],\n)\n\n# Framework tests.\ntf_cc_test(\n    name = \"framework_op_gen_lib_test\",\n    size = \"small\",\n    srcs = [\"op_gen_lib_test.cc\"],\n    deps = [\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/framework:op_gen_lib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"variant_op_copy_test\",\n    size = \"small\",\n    srcs = [\"variant_op_copy_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    tags = tf_cuda_tests_tags(),\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/cc:ops\",\n        \"//tensorflow/cc:scope\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels:array\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_run_handler_util_test\",\n    size = \"small\",\n    srcs = [\"run_handler_util_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_run_handler_test\",\n    size = \"small\",\n    srcs = [\"run_handler_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session_internal\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n        \"//tensorflow/core/kernels:cwise_op\",\n        \"//tensorflow/core/kernels:matmul_op\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/synchronization\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_op_segment_test\",\n    size = \"small\",\n    srcs = [\"op_segment_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:direct_session_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels:cwise_op\",\n        \"//tensorflow/core/kernels:ops_util\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"framework_resource_var_test\",\n    size = \"small\",\n    srcs = [\"resource_var_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ncc_library(\n    name = \"op_kernel_test_base\",\n    testonly = True,\n    hdrs = [\n        \"op_kernel_test_base.h\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:function_ops\",\n        \"//tensorflow/cc:sendrecv_ops\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"higher_level_tests\",\n    size = \"small\",\n    srcs = [\n        \"allocator_test.cc\",\n        \"attr_value_util_test.cc\",\n        \"batch_util_test.cc\",\n        \"bfloat16_test.cc\",\n        \"cancellation_test.cc\",\n        \"common_shape_fns_test.cc\",\n        \"dataset_test.cc\",\n        \"device_base_test.cc\",\n        \"disable_jit_test.cc\",\n        \"full_type_inference_util_test.cc\",\n        \"full_type_util_test.cc\",\n        \"function_test.cc\",\n        \"graph_def_util_test.cc\",\n        \"graph_to_functiondef_test.cc\",\n        \"kernel_def_builder_test.cc\",\n        \"kernel_def_util_test.cc\",\n        \"memory_types_test.cc\",\n        \"model_test.cc\",\n        \"node_def_builder_test.cc\",\n        \"node_def_util_test.cc\",\n        \"node_properties_test.cc\",\n        \"op_compatibility_test.cc\",\n        \"op_def_builder_test.cc\",\n        \"op_def_util_test.cc\",\n        \"op_kernel_test.cc\",\n        \"op_registration_test.cc\",\n        \"partial_tensor_shape_test.cc\",\n        \"rendezvous_test.cc\",\n        \"resource_mgr_test.cc\",\n        \"resource_op_kernel_test.cc\",\n        \"shape_inference_test.cc\",\n        \"shape_inference_testutil_test.cc\",\n        \"tensor_shape_test.cc\",\n        \"tensor_slice_test.cc\",\n        \"tensor_test.cc\",\n        \"tensor_testutil_test.cc\",\n        \"tensor_util_test.cc\",\n        \"tracking_allocator_test.cc\",\n        \"types_test.cc\",\n        \"variant_op_registry_test.cc\",\n        \"variant_test.cc\",\n    ],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = tf_kernel_tests_linkstatic(),\n    visibility = [\n        \"//tensorflow:internal\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n    deps = [\n        \":op_kernel_test_base\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:function_ops\",\n        \"//tensorflow/cc:ops\",\n        \"//tensorflow/cc:scope\",\n        \"//tensorflow/cc:sendrecv_ops\",\n        \"//tensorflow/cc:while_loop\",\n        \"//tensorflow/compiler/tf2xla/ops:xla_ops\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"//tensorflow/core/kernels:ops_util\",\n        \"//tensorflow/core/lib/monitoring:cell_reader\",\n        \"//tensorflow/core/platform:regexp\",\n        \"//tensorflow/core/platform:status_matchers\",\n        \"//tensorflow/core/profiler/lib:profiler_session\",\n        \"//tensorflow/core/profiler/protobuf:memory_profile_proto_cc\",\n        \"//tensorflow/core/profiler/utils:xplane_schema\",\n        \"//tensorflow/core/profiler/utils:xplane_visitor\",\n        \"//tensorflow/core/util:protos_test_cc\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"pywrap_required_hdrs\",\n    textual_hdrs = [\n        \"op_gen_lib.h\",\n        \"rendezvous.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/client:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n)\n\n# All framewrok protos are self-contained, i.e. they only import other\n# protos from the same package, so we can build the protos here and then\n# link them from core:protos_all without circular dependencies.\n\n# Generate the C++ sources for some of the protos.\ntf_generate_proto_text_sources(\n    name = \"attr_value_proto_text\",\n    srcs = [\n        \"attr_value.proto\",\n        \"resource_handle.proto\",\n        \"tensor.proto\",\n        \"tensor_shape.proto\",\n        \"types.proto\",\n    ],\n    srcs_relative_dir = \"tensorflow/core/framework/\",\n    deps = [\n        \":attr_value_proto_cc\",\n        \":resource_handle_proto_cc\",\n        \":tensor_proto_cc\",\n        \":tensor_shape_proto_cc\",\n        \":types_proto_cc\",\n        \"//tensorflow/core/lib/strings:proto_text_util\",\n        \"//tensorflow/core/lib/strings:scanner\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:protobuf\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ntf_pyclif_proto_library(\n    name = \"cost_graph_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"cost_graph.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"tensor_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"tensor.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"kernel_def_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"kernel_def.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"node_def_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"node_def.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"function_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"function.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"graph_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"graph.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"step_stats_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"step_stats.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"types_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"types.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_pyclif_proto_library(\n    name = \"variable_pyclif\",\n    proto_lib = \"//tensorflow/core:protos_all\",\n    proto_srcfile = \"variable.proto\",\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"log_memory_proto\",\n    srcs = [\"log_memory.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":tensor_description_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"versions_proto\",\n    srcs = [\"versions.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"graph_proto\",\n    srcs = [\"graph.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":function_proto\",\n        \":node_def_proto\",\n        \":op_def_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n        \":versions_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"node_def_proto\",\n    srcs = [\"node_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":full_type_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"allocation_description_proto\",\n    srcs = [\"allocation_description.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"tensor_slice_proto\",\n    srcs = [\"tensor_slice.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"tensor_description_proto\",\n    srcs = [\"tensor_description.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"device_attributes_proto\",\n    srcs = [\"device_attributes.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"resource_handle_proto\",\n    srcs = [\"resource_handle.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"step_stats_proto\",\n    srcs = [\"step_stats.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":tensor_description_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"reader_base_proto\",\n    srcs = [\"reader_base.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"kernel_def_proto\",\n    srcs = [\"kernel_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"op_def_proto\",\n    srcs = [\"op_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":full_type_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n)\n\ntf_proto_library(\n    name = \"attr_value_proto\",\n    srcs = [\"attr_value.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__subpackages__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/security/fuzzing:__subpackages__\",\n    ],\n)\n\ntf_proto_library(\n    name = \"full_type_proto\",\n    srcs = [\"full_type.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [],\n)\n\ntf_proto_library(\n    name = \"tensor_proto\",\n    srcs = [\"tensor.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":resource_handle_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"api_def_proto\",\n    srcs = [\"api_def.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"variable_proto\",\n    srcs = [\"variable.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"graph_transfer_info_proto\",\n    srcs = [\"graph_transfer_info.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"types_proto\",\n    srcs = [\"types.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"cost_graph_proto\",\n    srcs = [\"cost_graph.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"tensor_shape_proto\",\n    srcs = [\"tensor_shape.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"function_proto\",\n    srcs = [\"function.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":attr_value_proto\",\n        \":node_def_proto\",\n        \":op_def_proto\",\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\n# copybara:uncomment_begin(google-only)\n# py_proto_library(\n#     name = \"function_proto_py_pb2\",\n#     has_services = 0,\n#     api_version = 2,\n#     deps = [\n#         \":function_proto\",\n#     ],\n# )\n# copybara:uncomment_end\n\ntf_proto_library(\n    name = \"summary_proto\",\n    srcs = [\"summary.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":resource_handle_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":types_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"model_proto\",\n    srcs = [\"model.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"dataset_metadata_proto\",\n    srcs = [\"dataset_metadata.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n)\n\ntf_proto_library(\n    name = \"dataset_options_proto\",\n    srcs = [\"dataset_options.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":model_proto\",\n    ],\n)\n\ntf_proto_library(\n    name = \"protos_all\",\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":allocation_description_proto\",\n        \":api_def_proto\",\n        \":attr_value_proto\",\n        \":cost_graph_proto\",\n        \":dataset_metadata_proto\",\n        \":dataset_options_proto\",\n        \":device_attributes_proto\",\n        \":full_type_proto\",\n        \":function_proto\",\n        \":graph_proto\",\n        \":graph_transfer_info_proto\",\n        \":kernel_def_proto\",\n        \":log_memory_proto\",\n        \":model_proto\",\n        \":node_def_proto\",\n        \":op_def_proto\",\n        \":reader_base_proto\",\n        \":resource_handle_proto\",\n        \":step_stats_proto\",\n        \":summary_proto\",\n        \":tensor_description_proto\",\n        \":tensor_proto\",\n        \":tensor_shape_proto\",\n        \":tensor_slice_proto\",\n        \":types_proto\",\n        \":variable_proto\",\n        \":versions_proto\",\n    ],\n    tags = [\n        \"alt_dep=//third_party/tensorflow/core:protos_all\",\n    ],\n)\n", "/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n#include \"tensorflow/core/framework/shape_inference.h\"\n\n#include <cstdint>\n\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/full_type_util.h\"\n#include \"tensorflow/core/framework/node_def.pb.h\"\n#include \"tensorflow/core/framework/op_def.pb.h\"\n#include \"tensorflow/core/framework/partial_tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_shape.pb.h\"\n#include \"tensorflow/core/lib/core/errors.h\"\n#include \"tensorflow/core/lib/strings/numbers.h\"\n#include \"tensorflow/core/lib/strings/scanner.h\"\n#include \"tensorflow/core/lib/strings/str_util.h\"\n#include \"tensorflow/core/util/overflow.h\"\n\nnamespace tensorflow {\nnamespace shape_inference {\n\nconstexpr int32_t InferenceContext::kUnknownRank;\nconstexpr int64_t InferenceContext::kUnknownDim;\n\n// Same as above, but with PartialTensorShape instead of TensorShapeProto\nInferenceContext::InferenceContext(\n    int graph_def_version, const AttrSlice& attrs, const OpDef& op_def,\n    const std::vector<PartialTensorShape>& input_shapes,\n    const std::vector<const Tensor*>& input_tensors,\n    const std::vector<PartialTensorShape>& input_tensors_as_shapes,\n    const std::vector<\n        std::unique_ptr<std::vector<std::pair<PartialTensorShape, DataType>>>>&\n        input_handle_shapes_and_types)\n    : graph_def_version_(graph_def_version), attrs_(attrs) {\n  std::vector<ShapeHandle> input_tensors_as_shape_handles;\n  input_tensors_as_shape_handles.reserve(input_tensors_as_shapes.size());\n  for (const PartialTensorShape& p : input_tensors_as_shapes) {\n    ShapeHandle shape;\n    construction_status_.Update(MakeShapeFromPartialTensorShape(p, &shape));\n    if (!construction_status_.ok()) {\n      return;\n    }\n    input_tensors_as_shape_handles.push_back(shape);\n  }\n  PreInputInit(op_def, input_tensors, input_tensors_as_shape_handles);\n  if (!construction_status_.ok()) return;\n  inputs_.reserve(input_shapes.size());\n  for (const PartialTensorShape& p : input_shapes) {\n    ShapeHandle shape;\n    construction_status_.Update(MakeShapeFromPartialTensorShape(p, &shape));\n    if (!construction_status_.ok()) {\n      return;\n    }\n    inputs_.push_back(shape);\n  }\n  std::vector<std::unique_ptr<std::vector<ShapeAndType>>> handle_data(\n      input_shapes.size());\n  for (int i = 0, end = input_handle_shapes_and_types.size(); i < end; ++i) {\n    const auto& v = input_handle_shapes_and_types[i];\n    if (v == nullptr) {\n      continue;\n    }\n    handle_data[i].reset(new std::vector<ShapeAndType>(v->size()));\n    auto& new_v = *handle_data[i];\n    for (int j = 0, end = v->size(); j < end; ++j) {\n      const auto& p = (*v)[j];\n      construction_status_.Update(\n          MakeShapeFromPartialTensorShape(p.first, &new_v[j].shape));\n      if (!construction_status_.ok()) {\n        return;\n      }\n      new_v[j].dtype = p.second;\n    }\n  }\n  PostInputInit(std::move(handle_data));\n}\n\nInferenceContext::InferenceContext(\n    int graph_def_version, const AttrSlice& attrs, const OpDef& op_def,\n    const std::vector<ShapeHandle>& input_shapes,\n    const std::vector<const Tensor*>& input_tensors,\n    const std::vector<ShapeHandle>& input_tensors_as_shapes,\n    std::vector<std::unique_ptr<std::vector<ShapeAndType>>>\n        input_handle_shapes_and_types)\n    : graph_def_version_(graph_def_version), attrs_(attrs) {\n  PreInputInit(op_def, input_tensors, input_tensors_as_shapes);\n  if (!construction_status_.ok()) return;\n  inputs_ = input_shapes;\n\n  PostInputInit(std::move(input_handle_shapes_and_types));\n}\n\nInferenceContext::~InferenceContext() {}\n\nStatus InferenceContext::Run(\n    const std::function<Status(shape_inference::InferenceContext* c)>& fn) {\n  ForgetMerges();\n  Status s = fn(this);\n  if (!s.ok()) {\n    ForgetMerges();\n    return AttachContext(s);\n  }\n#ifndef NDEBUG\n  for (int i = 0; i < num_outputs(); ++i) {\n    DCHECK(output(i).IsSet()) << i << \" for \" << attrs_.SummarizeNode();\n  }\n#endif  // NDEBUG\n  return s;\n}\n\nStatus InferenceContext::set_output(StringPiece output_name,\n                                    const std::vector<ShapeHandle>& shapes) {\n  auto result = output_name_map_.find(output_name);\n  if (result == output_name_map_.end()) {\n    return errors::InvalidArgument(\"Unknown output name: \", output_name);\n  } else {\n    const int start = result->second.first;\n    const int size = result->second.second - start;\n    const int shapes_size = shapes.size();\n    if (size != shapes_size) {\n      return errors::InvalidArgument(\"Must have exactly \", shapes.size(),\n                                     \" shapes.\");\n    }\n    for (int i = 0; i < shapes_size; ++i) {\n      outputs_[i + start] = shapes[i];\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::input(StringPiece input_name,\n                               std::vector<ShapeHandle>* output) const {\n  const auto result = input_name_map_.find(input_name);\n  if (result == input_name_map_.end()) {\n    return errors::InvalidArgument(\"Unknown input name: \", input_name);\n  } else {\n    output->clear();\n    for (int i = result->second.first; i < result->second.second; ++i) {\n      output->push_back(inputs_[i]);\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::output(StringPiece output_name,\n                                std::vector<ShapeHandle>* output) const {\n  const auto result = output_name_map_.find(output_name);\n  if (result == output_name_map_.end()) {\n    return errors::InvalidArgument(\"Unknown output name: \", output_name);\n  } else {\n    output->clear();\n    for (int i = result->second.first; i < result->second.second; ++i) {\n      output->push_back(outputs_[i]);\n    }\n  }\n  return Status::OK();\n}\n\nvoid InferenceContext::PreInputInit(\n    const OpDef& op_def, const std::vector<const Tensor*>& input_tensors,\n    const std::vector<ShapeHandle>& input_tensors_as_shapes) {\n  // TODO(mdan): This is also done at graph construction. Run only here instead?\n  Status s = full_type::SpecializeType(attrs_, op_def, ret_types_);\n  if (!s.ok()) {\n    construction_status_ = s;\n    return;\n  }\n\n  input_tensors_ = input_tensors;\n  input_tensors_as_shapes_ = input_tensors_as_shapes;\n\n  construction_status_ =\n      NameRangesForNode(attrs_, op_def, &input_name_map_, &output_name_map_);\n  if (!construction_status_.ok()) return;\n\n  int num_outputs = 0;\n  for (const auto& e : output_name_map_) {\n    num_outputs = std::max(num_outputs, e.second.second);\n  }\n  outputs_.assign(num_outputs, nullptr);\n  output_handle_shapes_and_types_.resize(num_outputs);\n}\n\nStatus InferenceContext::ExpandOutputs(int new_output_size) {\n  const int outputs_size = outputs_.size();\n  if (new_output_size < outputs_size) {\n    return errors::InvalidArgument(\"Trying to reduce number of outputs of op.\");\n  }\n  outputs_.resize(new_output_size, nullptr);\n  output_handle_shapes_and_types_.resize(new_output_size);\n  return Status::OK();\n}\n\nvoid InferenceContext::PostInputInit(\n    std::vector<std::unique_ptr<std::vector<ShapeAndType>>> input_handle_data) {\n  int num_inputs_from_node_def = 0;\n  for (const auto& e : input_name_map_) {\n    num_inputs_from_node_def =\n        std::max(num_inputs_from_node_def, e.second.second);\n  }\n\n  // Allow passing empty shapes/dtypes to avoid changing every single test.\n  if (input_handle_data.empty()) {\n    input_handle_shapes_and_types_.resize(inputs_.size());\n  } else {\n    if (input_handle_data.size() != inputs_.size()) {\n      construction_status_ = errors::InvalidArgument(\n          \"Wrong number of handle shapes passed; expected \", inputs_.size(),\n          \" got \", input_handle_data.size());\n      return;\n    }\n    input_handle_shapes_and_types_ = std::move(input_handle_data);\n  }\n  const int inputs_size = inputs_.size();\n  if (inputs_size != num_inputs_from_node_def) {\n    construction_status_ = errors::InvalidArgument(\n        \"Wrong number of inputs passed: \", inputs_.size(), \" while \",\n        num_inputs_from_node_def, \" expected based on NodeDef\");\n    return;\n  }\n\n  CHECK_LE(input_tensors_.size(), inputs_.size());\n  input_tensors_.resize(inputs_.size());\n  requested_input_tensor_.resize(inputs_.size());\n  requested_input_tensor_as_partial_shape_.resize(inputs_.size());\n}\n\nvoid InferenceContext::ShapeHandleToProto(ShapeHandle handle,\n                                          TensorShapeProto* proto) {\n  if (!RankKnown(handle)) {\n    proto->set_unknown_rank(true);\n    return;\n  }\n\n  for (int32_t i = 0; i < Rank(handle); ++i) {\n    DimensionHandle dim = Dim(handle, i);\n    auto* dim_shape = proto->add_dim();\n    if (ValueKnown(dim)) {\n      dim_shape->set_size(Value(dim));\n    } else {\n      dim_shape->set_size(-1);\n    }\n  }\n}\n\nbool InferenceContext::FullyDefined(ShapeHandle s) {\n  if (!RankKnown(s)) return false;\n  for (int i = 0; i < Rank(s); ++i) {\n    if (!ValueKnown(Dim(s, i))) return false;\n  }\n  return true;\n}\n\nDimensionHandle InferenceContext::NumElements(ShapeHandle s) {\n  const auto rank = Rank(s);\n  if (rank == kUnknownRank) return UnknownDim();\n  bool found_unknown = false;\n  int64_t size = 1;\n  for (int i = 0; i < rank; ++i) {\n    int64_t dim_val = Value(Dim(s, i));\n    if (dim_val == kUnknownDim) {\n      found_unknown = true;\n    } else if (dim_val == 0) {\n      return MakeDim(0);\n    } else {\n      size *= dim_val;\n    }\n  }\n  if (found_unknown) {\n    return UnknownDim();\n  } else {\n    return MakeDim(size);\n  }\n}\n\nstring InferenceContext::DebugString(ShapeHandle s) {\n  if (RankKnown(s)) {\n    std::vector<string> vals;\n    for (auto d : s->dims_) vals.push_back(DebugString(d));\n    return strings::StrCat(\"[\", absl::StrJoin(vals, \",\"), \"]\");\n  } else {\n    return \"?\";\n  }\n}\n\nstring InferenceContext::DebugString(DimensionHandle d) {\n  return ValueKnown(d) ? strings::StrCat(Value(d)) : \"?\";\n}\n\nstring InferenceContext::DebugString() const {\n  return strings::StrCat(\"InferenceContext for node: \", attrs_.SummarizeNode());\n}\n\nstring InferenceContext::DebugString(const ShapeAndType& shape_and_type) {\n  return strings::StrCat(DebugString(shape_and_type.shape), \":\",\n                         DataTypeString(shape_and_type.dtype));\n}\n\nstring InferenceContext::DebugString(\n    gtl::ArraySlice<ShapeAndType> shape_and_types) {\n  std::vector<string> pieces;\n  for (const ShapeAndType& s : shape_and_types) {\n    pieces.push_back(DebugString(s));\n  }\n  return strings::StrCat(\"[\", absl::StrJoin(pieces, \",\"), \"]\");\n}\n\nStatus InferenceContext::WithRank(ShapeHandle shape, int64_t rank,\n                                  ShapeHandle* out) {\n  if (rank > kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  const int32_t existing = Rank(shape);\n  if (existing == rank) {\n    *out = shape;\n    return Status::OK();\n  }\n  if (existing == kUnknownRank) {\n    std::vector<DimensionHandle> dims;\n    dims.reserve(rank);\n    for (int i = 0; i < rank; ++i) {\n      dims.push_back(UnknownDim());\n    }\n    ShapeHandle shp = shape_manager_.MakeShape(dims);\n    return Merge(shape, shp, out);\n  }\n  *out = nullptr;\n\n  return errors::InvalidArgument(\"Shape must be rank \", rank, \" but is rank \",\n                                 existing);\n}\n\nStatus InferenceContext::WithRankAtLeast(ShapeHandle shape, int64_t rank,\n                                         ShapeHandle* out) {\n  if (rank > kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  const int32_t existing = Rank(shape);\n  if (existing >= rank || existing == kUnknownRank) {\n    *out = shape;\n    return Status::OK();\n  }\n  *out = nullptr;\n  return errors::InvalidArgument(\"Shape must be at least rank \", rank,\n                                 \" but is rank \", existing);\n}\n\nStatus InferenceContext::WithRankAtMost(ShapeHandle shape, int64_t rank,\n                                        ShapeHandle* out) {\n  if (rank > kint32max) {\n    return errors::InvalidArgument(\"Rank cannot exceed kint32max\");\n  }\n  const int32_t existing = Rank(shape);\n  if (existing <= rank || existing == kUnknownRank) {\n    *out = shape;\n    return Status::OK();\n  }\n  *out = nullptr;\n  return errors::InvalidArgument(\"Shape must be at most rank \", rank,\n                                 \" but is rank \", existing);\n}\n\nStatus InferenceContext::WithValue(DimensionHandle dim, int64_t value,\n                                   DimensionHandle* out) {\n  const int64_t existing = Value(dim);\n  if (existing == value) {\n    *out = dim;\n    return Status::OK();\n  }\n  if (existing == kUnknownDim) {\n    DimensionHandle d = MakeDim(value);\n    return Merge(dim, d, out);\n  }\n  *out = nullptr;\n  return errors::InvalidArgument(\"Dimension must be \", value, \" but is \",\n                                 existing);\n}\n\nvoid InferenceContext::Relax(DimensionHandle d_old, DimensionHandle d_new,\n                             DimensionHandle* out) {\n  if (d_old.SameHandle(d_new)) {\n    *out = d_old;\n  } else if (!ValueKnown(d_old) && !ValueKnown(d_new)) {\n    // The node will be fed by the dimension d_new instead of d_old: any\n    // equality assertion between d_old and other input dimension on this node\n    // may not be true anymore, so forget them all.\n    ForgetMerges();\n    // Return the new shape handle to force the relaxation to propagate to the\n    // fanout of the context.\n    *out = d_new;\n  } else if (!ValueKnown(d_new)) {\n    ForgetMerges();\n    *out = d_new;\n  } else if (Value(d_old) == Value(d_new)) {\n    // Return the old shape handle. This will stop the relaxation in the fanout\n    // of the context.\n    *out = d_old;\n  } else {\n    // Return a new handle that encodes a different unknown dim.\n    ForgetMerges();\n    *out = UnknownDim();\n  }\n}\n\nStatus InferenceContext::Merge(DimensionHandle d0, DimensionHandle d1,\n                               DimensionHandle* out) {\n  if (d0.SameHandle(d1)) {\n    *out = d0;\n    return Status::OK();\n  } else if (!ValueKnown(d1)) {\n    *out = d0;\n    merged_dims_.emplace_back(d0, d1);\n    return Status::OK();\n  } else if (!ValueKnown(d0)) {\n    *out = d1;\n    merged_dims_.emplace_back(d0, d1);\n    return Status::OK();\n  } else if (Value(d0) == Value(d1)) {\n    *out = d0;\n    return Status::OK();\n  } else {\n    *out = nullptr;\n    return errors::InvalidArgument(\"Dimensions must be equal, but are \",\n                                   Value(d0), \" and \", Value(d1));\n  }\n}\n\nStatus InferenceContext::MergePrefix(ShapeHandle s, ShapeHandle prefix,\n                                     ShapeHandle* s_out,\n                                     ShapeHandle* prefix_out) {\n  *s_out = *prefix_out = nullptr;\n  if (!RankKnown(prefix) || !RankKnown(s)) {\n    *s_out = s;\n    *prefix_out = prefix;\n    return Status::OK();\n  }\n  const int32_t rank = Rank(prefix);\n  TF_RETURN_IF_ERROR(WithRankAtLeast(s, rank, &s));\n\n  // Merge the prefix dims and create the new output shapes.\n  const int32_t rank_s = Rank(s);\n  std::vector<DimensionHandle> dims;\n  dims.reserve(std::max(rank, rank_s));\n  dims.resize(rank);\n  for (int i = 0; i < rank; ++i) {\n    TF_RETURN_IF_ERROR(Merge(Dim(s, i), Dim(prefix, i), &dims[i]));\n  }\n  *prefix_out = MakeShape(dims);\n  for (int i = rank; i < rank_s; ++i) dims.push_back(Dim(s, i));\n  *s_out = MakeShape(dims);\n  return Status::OK();\n}\n\nvoid InferenceContext::Relax(ShapeHandle s_old, ShapeHandle s_new,\n                             ShapeHandle* out) {\n  if (s_old.SameHandle(s_new)) {\n    *out = s_old;\n    return;\n  } else if (!RankKnown(s_new) || !s_old.IsSet()) {\n    ForgetMerges();\n    *out = s_new;\n    return;\n  }\n\n  const int32_t rank = Rank(s_old);\n  if (rank != Rank(s_new)) {\n    ForgetMerges();\n    *out = UnknownShape();\n    return;\n  }\n\n  bool return_s_old = true;\n  for (int i = 0; i < rank; ++i) {\n    auto d0 = Dim(s_old, i);\n    auto d1 = Dim(s_new, i);\n    if (d0.SameHandle(d1)) continue;\n\n    auto v0 = Value(d0);\n    auto v1 = Value(d1);\n    if (v0 == kUnknownDim || v1 == kUnknownDim || v0 != v1) {\n      return_s_old = false;\n      break;\n    }\n  }\n  if (return_s_old) {\n    *out = s_old;\n    return;\n  }\n\n  // Relax dims.\n  std::vector<DimensionHandle> dims(rank);\n  for (int i = 0; i < rank; ++i) {\n    Relax(Dim(s_old, i), Dim(s_new, i), &dims[i]);\n  }\n  ForgetMerges();\n  *out = MakeShape(dims);\n}\n\nStatus InferenceContext::Merge(ShapeHandle s0, ShapeHandle s1,\n                               ShapeHandle* out) {\n  if (s0.SameHandle(s1)) {\n    *out = s0;\n    return Status::OK();\n  } else if (!RankKnown(s1)) {\n    *out = s0;\n    merged_shapes_.emplace_back(s0, s1);\n    return Status::OK();\n  } else if (!RankKnown(s0)) {\n    *out = s1;\n    merged_shapes_.emplace_back(s0, s1);\n    return Status::OK();\n  }\n\n  const int32_t rank = Rank(s0);\n  if (rank != Rank(s1)) {\n    *out = nullptr;\n    return errors::InvalidArgument(\"Shapes must be equal rank, but are \", rank,\n                                   \" and \", Rank(s1));\n  }\n\n  bool return_s0 = true;\n  bool return_s1 = true;\n  for (int i = 0; i < rank; ++i) {\n    auto d0 = Dim(s0, i);\n    auto d1 = Dim(s1, i);\n    if (d0.SameHandle(d1)) continue;\n\n    auto v0 = Value(d0);\n    auto v1 = Value(d1);\n    if (v0 == kUnknownDim) {\n      if (v1 != kUnknownDim) {\n        return_s0 = false;\n      }\n    } else if (v1 == kUnknownDim) {\n      return_s1 = false;\n    } else if (v0 != v1) {\n      *out = nullptr;\n      return errors::InvalidArgument(\n          \"Dimension \", i, \" in both shapes must be equal, but are \", Value(d0),\n          \" and \", Value(d1), \". Shapes are \", DebugString(s0), \" and \",\n          DebugString(s1), \".\");\n    }\n  }\n\n  merged_shapes_.emplace_back(s0, s1);\n\n  if (return_s0 || return_s1) {\n    *out = return_s0 ? s0 : s1;\n    return Status::OK();\n  }\n\n  // Merge dims.\n  std::vector<DimensionHandle> dims(rank, nullptr);\n  for (int i = 0; i < rank; ++i) {\n    // Invariant for merge was checked earlier, so CHECK is ok.\n    TF_CHECK_OK(Merge(Dim(s0, i), Dim(s1, i), &dims[i]));\n  }\n\n  Status s = ReturnCreatedShape(dims, out);\n  if (s.ok()) {\n    // Merge the new shape with s0. Since s0 and s1 are merged, this implies\n    // that s1 and out are also merged.\n    merged_shapes_.emplace_back(s0, *out);\n  }\n  return s;\n}\n\nStatus InferenceContext::Subshape(ShapeHandle s, int64_t start,\n                                  ShapeHandle* out) {\n  return Subshape(s, start, std::numeric_limits<int64_t>::max() /* end */, out);\n}\n\nStatus InferenceContext::Subshape(ShapeHandle s, int64_t start, int64_t end,\n                                  ShapeHandle* out) {\n  return Subshape(s, start, end, 1 /* stride */, out);\n}\n\nStatus InferenceContext::Subshape(ShapeHandle s, int64_t start, int64_t end,\n                                  int64_t stride, ShapeHandle* out) {\n  int64_t start_in = start;\n  int64_t end_in = end;\n\n  const int32_t rank = Rank(s);\n  if (start == 0 && stride == 1 &&\n      ((RankKnown(s) && end >= rank) ||\n       end == std::numeric_limits<int64_t>::max())) {\n    *out = s;\n    return Status::OK();\n  }\n  if (!RankKnown(s)) {\n    return ReturnUnknownShape(out);\n  }\n\n  if (start > rank) start = rank;\n  if (end > rank) end = rank;\n\n  if (stride < 0 && start == rank) --start;\n\n  if (start < 0) {\n    start = rank + start;\n    if (start < 0) {\n      *out = nullptr;\n      return errors::InvalidArgument(\"Subshape start out of bounds: \", start_in,\n                                     \", for shape with rank \", rank);\n    }\n  }\n\n  if (end < 0) {\n    end = rank + end;\n    if (end < 0) {\n      *out = nullptr;\n      return errors::InvalidArgument(\"Subshape end out of bounds: \", end_in,\n                                     \", for shape with rank \", rank);\n    }\n  }\n  if (stride > 0 && start > end) {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Subshape must have computed start <= end, but is \", start, \" and \",\n        end, \" (computed from start \", start_in, \" and end \", end_in,\n        \" over shape with rank \", rank, \")\");\n  } else if (stride < 0 && start < end) {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Subshape must have computed start >= end since stride is negative, \"\n        \"but is \",\n        start, \" and \", end, \" (computed from start \", start_in, \" and end \",\n        end_in, \" over shape with rank \", rank, \" and stride\", stride, \")\");\n  }\n\n  std::vector<DimensionHandle> dims;\n  for (int i = start; stride > 0 ? i < end : i > end; i += stride) {\n    dims.push_back(Dim(s, i));\n  }\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::Concatenate(ShapeHandle s1, ShapeHandle s2,\n                                     ShapeHandle* out) {\n  if (!RankKnown(s1) || !RankKnown(s2)) {\n    return ReturnUnknownShape(out);\n  }\n  const int32_t s1_rank = Rank(s1);\n  const int32_t s2_rank = Rank(s2);\n  const int32_t rank = s1_rank + s2_rank;\n  std::vector<DimensionHandle> dims;\n  dims.reserve(rank);\n  for (int i = 0; i < s1_rank; ++i) dims.push_back(Dim(s1, i));\n  for (int i = 0; i < s2_rank; ++i) dims.push_back(Dim(s2, i));\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::ReplaceDim(ShapeHandle s, int64_t dim_index_in,\n                                    DimensionHandle new_dim, ShapeHandle* out) {\n  if (!RankKnown(s)) {\n    return ReturnUnknownShape(out);\n  }\n  int64_t dim_index = dim_index_in;\n  if (dim_index < 0) {\n    dim_index = s->dims_.size() + dim_index;\n  }\n  if (!FastBoundsCheck(dim_index, s->dims_.size())) {\n    *out = nullptr;\n    return errors::InvalidArgument(\"Out of range dim_index \", dim_index_in,\n                                   \" for shape with \", s->dims_.size(),\n                                   \" dimensions\");\n  }\n  std::vector<DimensionHandle> dims(s->dims_);\n  dims[dim_index] = new_dim;\n  return ReturnCreatedShape(dims, out);\n}\n\nShapeHandle InferenceContext::MakeShape(\n    const std::vector<DimensionHandle>& dims) {\n  return shape_manager_.MakeShape(dims);\n}\n\nShapeHandle InferenceContext::MakeShape(\n    std::initializer_list<DimensionOrConstant> dims) {\n  std::vector<DimensionHandle> dims_actual;\n  dims_actual.reserve(dims.size());\n  for (const DimensionOrConstant& d : dims) {\n    dims_actual.push_back(MakeDim(d));\n  }\n\n  return shape_manager_.MakeShape(dims_actual);\n}\n\nShapeHandle InferenceContext::UnknownShape() {\n  return shape_manager_.UnknownShape();\n}\n\nShapeHandle InferenceContext::UnknownShapeOfRank(int64_t rank) {\n  CHECK_LE(rank, kint32max) << \"rank must be less than kint32max\";\n  if (rank == kUnknownRank) {\n    return UnknownShape();\n  }\n  CHECK_GE(rank, 0) << \"rank must not be negative\";\n  std::vector<DimensionHandle> dims(rank);\n  for (int32_t i = 0; i < rank; ++i) {\n    dims[i] = UnknownDim();\n  }\n  return MakeShape(dims);\n}\n\nShapeHandle InferenceContext::Scalar() { return MakeShape({}); }\n\nShapeHandle InferenceContext::Vector(DimensionOrConstant dim) {\n  return MakeShape({dim});\n}\n\nShapeHandle InferenceContext::Matrix(DimensionOrConstant dim1,\n                                     DimensionOrConstant dim2) {\n  return MakeShape({dim1, dim2});\n}\n\nStatus InferenceContext::MakeShapeFromShapeTensorTreatScalarAsUnknownShape(\n    int input_idx, ShapeHandle* out) {\n  ShapeHandle input_shape;\n  TF_RETURN_IF_ERROR(WithRankAtMost(input(input_idx), 1, &input_shape));\n\n  request_input_tensor_as_partial_shape(input_idx);\n  const int input_tensors_as_shapes_size = input_tensors_as_shapes_.size();\n  if (input_idx < input_tensors_as_shapes_size &&\n      input_tensors_as_shapes_[input_idx].IsSet() &&\n      RankKnown(input_tensors_as_shapes_[input_idx])) {\n    *out = input_tensors_as_shapes_[input_idx];\n    return Status::OK();\n  }\n\n  return InternalMakeShapeFromTensor(\n      true /* treat_unknown_scalar_tensor_as_unknown_shape */,\n      input_tensor(input_idx), input_shape, out);\n}\n\nStatus InferenceContext::MakeShapeFromShapeTensor(int input_idx,\n                                                  ShapeHandle* out) {\n  ShapeHandle input_shape;\n  TF_RETURN_IF_ERROR(WithRank(input(input_idx), 1, &input_shape));\n\n  request_input_tensor_as_partial_shape(input_idx);\n  const int input_tensors_as_shapes_size = input_tensors_as_shapes_.size();\n  if (input_idx < input_tensors_as_shapes_size &&\n      input_tensors_as_shapes_[input_idx].IsSet() &&\n      RankKnown(input_tensors_as_shapes_[input_idx])) {\n    *out = input_tensors_as_shapes_[input_idx];\n    return Status::OK();\n  }\n\n  return InternalMakeShapeFromTensor(\n      false /* treat_unknown_scalar_tensor_as_unknown_shape */,\n      input_tensor(input_idx), input_shape, out);\n}\n\nStatus InferenceContext::MakeShapeFromTensor(const Tensor* t,\n                                             ShapeHandle tensor_shape,\n                                             ShapeHandle* out) {\n  return InternalMakeShapeFromTensor(\n      false /* treat_unknown_scalar_tensor_as_unknown_shape */, t, tensor_shape,\n      out);\n}\n\nStatus InferenceContext::InternalMakeShapeFromTensor(\n    bool treat_unknown_scalar_tensor_as_unknown_shape, const Tensor* t,\n    ShapeHandle tensor_shape, ShapeHandle* out) {\n  // Only callers who have set\n  if (!treat_unknown_scalar_tensor_as_unknown_shape) {\n    TF_RETURN_IF_ERROR(WithRank(tensor_shape, 1, &tensor_shape));\n  }\n  if (t == nullptr) {\n    // This is guarded by the check above.\n    if (Rank(tensor_shape) == 0) {\n      return ReturnUnknownShape(out);\n    }\n    // Shape tensor is not known, but if the shape of the shape tensor is then\n    // the right number of unknown dims can be created.\n    DimensionHandle shape_dim = Dim(tensor_shape, 0);\n    if (!ValueKnown(shape_dim)) {\n      return ReturnUnknownShape(out);\n    }\n    const auto num_dims = Value(shape_dim);\n    // TODO(mihaimaruseac): Should be `TensorShape::MaxDimensions()` as we are\n    // not able to materialize shapes with more than this number of dimensions\n    // but then shape inference would fail for operations such as\n    // `tf.range`/`tf.ones`, etc. where the shape is not really materialized,\n    // only used during the inference. Hence, just prevent doing a `reserve`\n    // with a very large argument.\n    const int64_t max_dimensions = 1 << 25;\n    if (num_dims >= max_dimensions) {\n      return errors::Internal(\n          \"Cannot create a tensor with \", num_dims,\n          \" dimensions, as these would be more than maximum of \",\n          max_dimensions);\n    }\n    std::vector<DimensionHandle> dims;\n    dims.reserve(num_dims);\n    for (int i = 0; i < num_dims; i++) dims.push_back(UnknownDim());\n    return ReturnCreatedShape(dims, out);\n  }\n\n  if (t->shape().dims() == 0) {\n    if (t->dtype() == DataType::DT_INT32) {\n      auto flat_t = t->scalar<int32>();\n      if (flat_t() != -1) {\n        *out = nullptr;\n        return errors::InvalidArgument(\n            \"Input tensor must be rank 1, or if its rank 0 it must have value \"\n            \"-1 \"\n            \"(representing an unknown shape).  Saw value: \",\n            flat_t());\n      }\n      return ReturnUnknownShape(out);\n    } else if (t->dtype() == DataType::DT_INT64) {\n      auto flat_t = t->scalar<int64_t>();\n      if (flat_t() != -1) {\n        *out = nullptr;\n        return errors::InvalidArgument(\n            \"Input tensor must be rank 1, or if its rank 0 it must have value \"\n            \"-1 \"\n            \"(representing an unknown shape).  Saw value: \",\n            flat_t());\n      }\n      return ReturnUnknownShape(out);\n    } else {\n      *out = nullptr;\n      return errors::InvalidArgument(\n          \"Input tensor must be int32 or int64, but was \",\n          DataTypeString(t->dtype()));\n    }\n  }\n\n  if (t->shape().dims() != 1) {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Input tensor must be rank 1, but was rank \", t->shape().dims(), \".\",\n        ((t->shape().dims() == 0)\n             ? \"If it is rank 0 rank 0 it must have statically known value -1 \"\n               \"(representing an unknown shape). \"\n             : \" \"),\n        \"Saw tensor shape \", t->shape().DebugString());\n  }\n  std::vector<DimensionHandle> dims;\n  if (t->dtype() == DataType::DT_INT32) {\n    auto flat_t = t->flat<int32>();\n    for (int i = 0; i < flat_t.size(); ++i) {\n      const int32_t val = flat_t(i);\n      if (val < -1) {\n        return errors::InvalidArgument(\n            \"Invalid value in tensor used for shape: \", val);\n      }\n      // -1 will become an unknown dim.\n      dims.push_back(MakeDim(val));\n    }\n  } else if (t->dtype() == DataType::DT_INT64) {\n    auto flat_t = t->flat<int64_t>();\n    for (int i = 0; i < flat_t.size(); ++i) {\n      const int64_t val = flat_t(i);\n      if (val < -1) {\n        return errors::InvalidArgument(\n            \"Invalid value in tensor used for shape: \", val);\n      }\n      // -1 will become an unknown dim.\n      dims.push_back(MakeDim(val));\n    }\n  } else {\n    *out = nullptr;\n    return errors::InvalidArgument(\n        \"Input tensor must be int32 or int64, but was \",\n        DataTypeString(t->dtype()));\n  }\n\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::MakeShapeFromPartialTensorShape(\n    const PartialTensorShape& partial_shape, ShapeHandle* out) {\n  *out = nullptr;\n  if (partial_shape.dims() == -1) {\n    return ReturnUnknownShape(out);\n  }\n  const int num_dims = partial_shape.dims();\n  std::vector<DimensionHandle> dims(num_dims);\n  for (int i = 0; i < num_dims; ++i) {\n    // -1 is unknown in PartialTensorShape and in InferenceContext, so this size\n    // can be passed directly to MakeDim.\n    dims[i] = MakeDim(partial_shape.dim_size(i));\n  }\n  return ReturnCreatedShape(dims, out);\n}\n\nStatus InferenceContext::MakeShapeFromTensorShape(const TensorShape& shape,\n                                                  ShapeHandle* out) {\n  return MakeShapeFromPartialTensorShape(PartialTensorShape(shape.dim_sizes()),\n                                         out);\n}\n\nStatusOr<ShapeHandle> InferenceContext::MakeShapeFromShapeTensor(\n    const TensorShape& shape) {\n  ShapeHandle out;\n  TF_RETURN_IF_ERROR(MakeShapeFromTensorShape(shape, &out));\n  return out;\n}\n\nTensorShapeProto InferenceContext::ShapeHandleToProto(ShapeHandle handle) {\n  TensorShapeProto out;\n  ShapeHandleToProto(handle, &out);\n  return out;\n}\n\nStatus InferenceContext::MakeShapeFromShapeProto(const TensorShapeProto& proto,\n                                                 ShapeHandle* out) {\n  *out = nullptr;\n  TF_RETURN_IF_ERROR(PartialTensorShape::IsValidShape(proto));\n  PartialTensorShape partial_shape(proto);\n  return MakeShapeFromPartialTensorShape(partial_shape, out);\n}\n\nStatus InferenceContext::GetScalarFromTensor(const Tensor* t, int64_t* val) {\n  // Caller must ensure that <t> is not NULL.\n  const int rank = t->dims();\n  if (rank != 0) {\n    return errors::InvalidArgument(\"Input must be scalar but has rank \", rank);\n  }\n\n  if (t->dtype() == DataType::DT_INT32) {\n    *val = t->scalar<int32>()();\n    return Status::OK();\n  } else if (t->dtype() == DataType::DT_INT64) {\n    *val = t->scalar<int64_t>()();\n    return Status::OK();\n  } else {\n    return errors::InvalidArgument(\"Scalar input must be int32 or int64.\");\n  }\n}\n\nStatus InferenceContext::GetScalarFromTensor(const Tensor* t, int64_t idx,\n                                             int64_t* val) {\n  // Caller must ensure that <t> is not NULL.\n  const int rank = t->dims();\n  if (rank != 1) {\n    return errors::InvalidArgument(\"Input must be 1D but has rank \", rank);\n  }\n\n  if (t->dtype() == DataType::DT_INT32) {\n    auto flat_t = t->flat<int32>();\n    if (idx < 0 || idx >= flat_t.size()) {\n      return errors::InvalidArgument(\"Invalid index \", idx,\n                                     \" for Tensor of size \", flat_t.size());\n    }\n    *val = flat_t(idx);\n    return Status::OK();\n  } else if (t->dtype() == DataType::DT_INT64) {\n    auto flat_t = t->flat<int64_t>();\n    if (idx < 0 || idx >= flat_t.size()) {\n      return errors::InvalidArgument(\"Invalid index \", idx,\n                                     \" for Tensor of size \", flat_t.size());\n    }\n    *val = flat_t(idx);\n    return Status::OK();\n  } else {\n    return errors::InvalidArgument(\"Tensor input must be int32 or int64.\");\n  }\n}\n\n// Returns a new dimension whose value is given by a scalar input tensor.\nStatus InferenceContext::MakeDimForScalarInput(int idx, DimensionHandle* out) {\n  int64_t val;\n  const Tensor* t = input_tensor(idx);\n  if (t == nullptr) {\n    *out = UnknownDim();\n    return Status::OK();\n  }\n  TF_RETURN_IF_ERROR(GetScalarFromTensor(t, &val));\n  if (val < 0) {\n    return errors::InvalidArgument(\"Dimension size, given by scalar input \",\n                                   idx, \", must be non-negative but is \", val);\n  }\n  *out = MakeDim(val);\n  return Status::OK();\n}\n\nStatus InferenceContext::MakeDimForScalarInputWithNegativeIndexing(\n    int idx, int input_rank, DimensionHandle* out) {\n  int64_t val;\n  const Tensor* t = input_tensor(idx);\n  if (t == nullptr) {\n    *out = UnknownDim();\n    return Status::OK();\n  }\n  TF_RETURN_IF_ERROR(GetScalarFromTensor(t, &val));\n  if (val < 0) {\n    if (input_rank < 0) {\n      *out = UnknownDim();\n      return Status::OK();\n    } else if (val + input_rank < 0) {\n      return errors::InvalidArgument(\"Dimension size, given by scalar input \",\n                                     val, \" must be in range [-\", input_rank,\n                                     \", \", input_rank, \")\");\n    } else {\n      val += input_rank;\n    }\n  } else if (input_rank >= 0 && val >= input_rank) {\n    return errors::InvalidArgument(\"Dimension size, given by scalar input \",\n                                   val, \" must be in range [-\", input_rank,\n                                   \", \", input_rank, \")\");\n  }\n  *out = MakeDim(val);\n  return Status::OK();\n}\n\nStatus InferenceContext::Divide(DimensionHandle dividend,\n                                DimensionOrConstant divisor,\n                                bool evenly_divisible, DimensionHandle* out) {\n  const int64_t divisor_value = Value(divisor);\n  if (divisor_value == 1) {\n    *out = dividend;\n  } else if (!ValueKnown(dividend) ||\n             (divisor.dim.IsSet() && !ValueKnown(divisor.dim))) {\n    *out = UnknownDim();\n  } else {\n    const int64_t v = Value(dividend);\n    if (divisor_value <= 0) {\n      return errors::InvalidArgument(\"Divisor must be positive but is \",\n                                     divisor_value);\n    }\n    if (evenly_divisible && (v % divisor_value) != 0) {\n      return errors::InvalidArgument(\n          \"Dimension size must be evenly divisible by \", divisor_value,\n          \" but is \", v);\n    }\n    *out = MakeDim(v / divisor_value);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Add(DimensionHandle first, DimensionOrConstant second,\n                             DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  // Special cases.\n  if (first_value == 0) {\n    *out = MakeDim(second);\n  } else if (second_value == 0) {\n    *out = first;\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    // Invariant: Both values are known and positive. Still in run-time we can\n    // get pair of values which cannot be store in output. Check below will\n    // report error. We still need to avoid undefined behavior of signed\n    // overflow and use unsigned addition.\n    const int64_t sum = static_cast<uint64>(first_value) + second_value;\n    if (sum < 0) {\n      return errors::InvalidArgument(\"Dimension size overflow from adding \",\n                                     first_value, \" and \", second_value);\n    }\n    *out = MakeDim(sum);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Subtract(DimensionHandle first,\n                                  DimensionOrConstant second,\n                                  DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  // Special cases.\n  if (second_value == 0) {\n    *out = first;\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    // Invariant: Both values are known, first_value is non-negative, and\n    // second_value is positive.\n    if (first_value < second_value) {\n      return errors::InvalidArgument(\n          \"Negative dimension size caused by subtracting \", second_value,\n          \" from \", first_value);\n    }\n    *out = MakeDim(first_value - second_value);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Multiply(DimensionHandle first,\n                                  DimensionOrConstant second,\n                                  DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  // Special cases.\n  if (first_value == 0) {\n    *out = first;\n  } else if (second_value == 0) {\n    *out = MakeDim(second);\n  } else if (first_value == 1) {\n    *out = MakeDim(second);\n  } else if (second_value == 1) {\n    *out = first;\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    // Invariant: Both values are known and greater than 1.\n    const int64_t product = MultiplyWithoutOverflow(first_value, second_value);\n    if (product < 0) {\n      return errors::InvalidArgument(\n          \"Negative dimension size caused by overflow when multiplying \",\n          first_value, \" and \", second_value);\n    }\n    *out = MakeDim(product);\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Min(DimensionHandle first, DimensionOrConstant second,\n                             DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  if (first_value == 0) {\n    *out = first;\n  } else if (second_value == 0) {\n    *out = MakeDim(second);\n  } else if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    if (first_value <= second_value) {\n      *out = first;\n    } else {\n      *out = MakeDim(second);\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::Max(DimensionHandle first, DimensionOrConstant second,\n                             DimensionHandle* out) {\n  const int64_t first_value = Value(first);\n  const int64_t second_value = Value(second);\n  if (first_value == kUnknownDim || second_value == kUnknownDim) {\n    *out = UnknownDim();\n  } else {\n    if (first_value >= second_value) {\n      *out = first;\n    } else {\n      *out = MakeDim(second);\n    }\n  }\n  return Status::OK();\n}\n\nStatus InferenceContext::AttachContext(const Status& status) {\n  std::vector<string> input_shapes;\n  input_shapes.reserve(inputs_.size());\n  for (const ShapeHandle& input_shape : inputs_) {\n    input_shapes.emplace_back(DebugString(input_shape));\n  }\n\n  // Add information about the input tensors and partial tensor shapes used.\n  std::vector<string> input_from_tensors_str;\n  std::vector<string> input_from_tensors_as_shape_str;\n  input_from_tensors_as_shape_str.reserve(inputs_.size());\n  for (int i = 0, end = inputs_.size(); i < end; ++i) {\n    const int input_tensors_as_shapes_size = input_tensors_as_shapes_.size();\n    const int input_tensors_size = input_tensors_.size();\n    if (requested_input_tensor_as_partial_shape_[i] &&\n        i < input_tensors_as_shapes_size &&\n        input_tensors_as_shapes_[i].IsSet() &&\n        RankKnown(input_tensors_as_shapes_[i])) {\n      input_from_tensors_as_shape_str.push_back(strings::StrCat(\n          \"input[\", i, \"] = \", DebugString(input_tensors_as_shapes_[i])));\n    } else if (requested_input_tensor_[i] && i < input_tensors_size &&\n               input_tensors_[i] != nullptr) {\n      input_from_tensors_str.push_back(strings::StrCat(\n          \"input[\", i, \"] = <\",\n          input_tensors_[i]->SummarizeValue(256 /* max_values */), \">\"));\n    }\n  }\n\n  string error_context = strings::StrCat(\n      \" for '\", attrs_.SummarizeNode(),\n      \"' with input shapes: \", absl::StrJoin(input_shapes, \", \"));\n  if (!input_from_tensors_str.empty()) {\n    strings::StrAppend(&error_context, \" and with computed input tensors: \",\n                       absl::StrJoin(input_from_tensors_str, \", \"));\n  }\n  if (!input_from_tensors_as_shape_str.empty()) {\n    strings::StrAppend(&error_context,\n                       \" and with input tensors computed as partial shapes: \",\n                       absl::StrJoin(input_from_tensors_as_shape_str, \",\"));\n  }\n\n  strings::StrAppend(&error_context, \".\");\n  return errors::CreateWithUpdatedMessage(\n      status, strings::StrCat(status.error_message(), error_context));\n}\n\nbool InferenceContext::MergeHandleShapesAndTypes(\n    const std::vector<ShapeAndType>& shapes_and_types,\n    std::vector<ShapeAndType>* to_update) {\n  if (shapes_and_types.size() != to_update->size()) {\n    return false;\n  }\n  std::vector<ShapeAndType> new_values(shapes_and_types.size());\n  bool refined = false;\n  for (int i = 0, end = shapes_and_types.size(); i < end; ++i) {\n    const ShapeAndType& existing = (*to_update)[i];\n    if (shapes_and_types[i].dtype == existing.dtype) {\n      new_values[i].dtype = existing.dtype;\n    } else {\n      if (existing.dtype != DT_INVALID) {\n        return false;\n      } else {\n        new_values[i].dtype = shapes_and_types[i].dtype;\n        refined = true;\n      }\n    }\n    if (!Merge(existing.shape, shapes_and_types[i].shape, &new_values[i].shape)\n             .ok()) {\n      // merge failed, ignore the new value.\n      new_values[i].shape = existing.shape;\n    }\n    if (!existing.shape.SameHandle(new_values[i].shape)) {\n      refined = true;\n    }\n  }\n  if (!refined) {\n    return false;\n  }\n  for (int i = 0, end = new_values.size(); i < end; ++i) {\n    (*to_update)[i] = new_values[i];\n  }\n  return true;\n}\n\nbool InferenceContext::MergeOutputHandleShapesAndTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (output_handle_shapes_and_types_[idx] == nullptr) {\n    output_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return MergeHandleShapesAndTypes(shapes_and_types,\n                                   output_handle_shapes_and_types_[idx].get());\n}\n\nbool InferenceContext::MergeInputHandleShapesAndTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (input_handle_shapes_and_types_[idx] == nullptr) {\n    input_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return MergeHandleShapesAndTypes(shapes_and_types,\n                                   input_handle_shapes_and_types_[idx].get());\n}\n\nbool InferenceContext::RelaxHandleShapesAndMergeTypes(\n    const std::vector<ShapeAndType>& shapes_and_types,\n    std::vector<ShapeAndType>* to_update) {\n  if (shapes_and_types.size() != to_update->size()) {\n    return false;\n  }\n  std::vector<ShapeAndType> new_values(shapes_and_types.size());\n  for (int i = 0, end = shapes_and_types.size(); i < end; ++i) {\n    const ShapeAndType& existing = (*to_update)[i];\n    if (shapes_and_types[i].dtype == existing.dtype) {\n      new_values[i].dtype = existing.dtype;\n    } else {\n      if (existing.dtype != DT_INVALID) {\n        return false;\n      } else {\n        new_values[i].dtype = shapes_and_types[i].dtype;\n      }\n    }\n    Relax(existing.shape, shapes_and_types[i].shape, &new_values[i].shape);\n  }\n  to_update->swap(new_values);\n  return true;\n}\n\nbool InferenceContext::RelaxOutputHandleShapesAndMergeTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (output_handle_shapes_and_types_[idx] == nullptr) {\n    output_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return RelaxHandleShapesAndMergeTypes(\n      shapes_and_types, output_handle_shapes_and_types_[idx].get());\n}\n\nbool InferenceContext::RelaxInputHandleShapesAndMergeTypes(\n    int idx, const std::vector<ShapeAndType>& shapes_and_types) {\n  if (input_handle_shapes_and_types_[idx] == nullptr) {\n    input_handle_shapes_and_types_[idx].reset(\n        new std::vector<ShapeAndType>(shapes_and_types));\n    return true;\n  }\n  return RelaxHandleShapesAndMergeTypes(\n      shapes_and_types, input_handle_shapes_and_types_[idx].get());\n}\n\n// -----------------------------------------------------------------------------\n// ShapeManager\n// -----------------------------------------------------------------------------\nInferenceContext::ShapeManager::ShapeManager() {}\nInferenceContext::ShapeManager::~ShapeManager() {\n  for (auto* s : all_shapes_) delete s;\n  for (auto* d : all_dims_) delete d;\n}\n\nShapeHandle InferenceContext::ShapeManager::MakeShape(\n    const std::vector<DimensionHandle>& dims) {\n  all_shapes_.push_back(new Shape(dims));\n  return all_shapes_.back();\n}\n\nShapeHandle InferenceContext::ShapeManager::UnknownShape() {\n  all_shapes_.push_back(new Shape());\n  return all_shapes_.back();\n}\n\n}  // namespace shape_inference\n}  // namespace tensorflow\n", "load(\"//tensorflow/core/platform:rules_cc.bzl\", \"cc_library\")\nload(\"@bazel_skylib//rules:build_test.bzl\", \"build_test\")\nload(\n    \"//tensorflow:tensorflow.bzl\",\n    \"if_android\",\n    \"if_cuda_or_rocm\",\n    \"if_google\",\n    \"if_mobile\",\n    \"if_not_windows\",\n    \"if_oss\",\n    \"tf_cc_binary\",\n    \"tf_cc_test\",\n    \"tf_cc_tests\",\n    \"tf_copts\",\n    \"tf_cuda_library\",\n    \"tf_opts_nortti_if_lite_protos\",\n)\nload(\n    \"//tensorflow/core/kernels/mlir_generated:build_defs.bzl\",\n    \"if_mlir_generated_cpu_kernels_enabled\",\n    \"if_mlir_generated_experimental_kernels_enabled\",\n    \"if_mlir_generated_gpu_kernels_enabled\",\n)\nload(\n    \"//tensorflow/core/platform:build_config.bzl\",\n    \"tf_fingerprint_deps\",\n    \"tf_kernel_tests_linkstatic\",\n)\nload(\n    \"//third_party/mkl:build_defs.bzl\",\n    \"if_mkl\",\n    \"mkl_deps\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"cc_header_only_library\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"get_compatible_with_portable\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_kernel_library\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"if_nccl\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_disable_ptxas_warning_flags\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_cc_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_only_cc_test\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cuda_cc_tests\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"filegroup\")\nload(\n    \"//tensorflow/core/platform:build_config_root.bzl\",\n    \"tf_cuda_tests_tags\",\n)\nload(\"@local_config_cuda//cuda:build_defs.bzl\", \"if_cuda\")\nload(\n    \"@local_config_rocm//rocm:build_defs.bzl\",\n    \"if_rocm\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_cc_shared_library\")\n\n# Description:\n# Op kernel implementations for TensorFlow.\n#\n# Note: Any test that uses GPU support and which we would like to\n# benchmark should be linked statically so that it can be executed\n# from a py_binary or cuda_py_test test logger.  For such a test,\n# append \"_gpu\" to the test name to invoke the GPU benchmarks.  Example:\n#\n#   # for CPU tests\n#   $ bazel test --config opt //third_party/tensorflow/core/kernels:my_op_test\n#   # for GPU benchmarks\n#   $ bazel run --config opt --config=cuda //third_party/tensorflow/core/kernels:my_op_test_gpu -- --benchmark_filter=..\n#\npackage(\n    default_visibility = [\"//visibility:public\"],\n    features = if_google(\n        [\n            \"-layering_check\",\n            \"-parse_headers\",\n        ],\n        [\"-layering_check\"],\n    ),\n    licenses = [\"notice\"],\n)\n\npackage_group(\n    name = \"friends\",\n    packages = [\n        \"//tensorflow/...\",\n        \"//tensorflow_text/...\",\n    ],\n)\n\npackage_group(\n    name = \"optimizer_helper_friends\",\n    packages = [\n        \"//learning/brain/research/lather/...\",\n        \"//learning/clair/alise/...\",\n    ],\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_xsmm=1\" to your build command to use libxsmm for\n    # sparse matrix multiplications. You will also need appropriate -mavx*\n    # options, as required by specific op you use.\n    name = \"xsmm\",\n    define_values = {\n        \"tensorflow_xsmm\": \"1\",\n    },\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_xsmm_convolutions=1\" to your build command to\n    # use libxsmm for forward convolutions. You will also need appropriate\n    # -mavx* # options, as required by specific op you use.\n    name = \"xsmm_convolutions\",\n    define_values = {\n        \"tensorflow_xsmm_convolutions\": \"1\",\n    },\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_xsmm_convolutions=1 --define\n    # tensorflow_xsmm_backward_convolutions=1\" to your build command to use libxsmm for\n    # backward convolutions (and possibly more in the future). You will also\n    # need appropriate -mavx* options, as required by specific op you use.\n    name = \"xsmm_backward_convolutions\",\n    define_values = {\n        \"tensorflow_xsmm_backward_convolutions\": \"1\",\n    },\n)\n\nconfig_setting(\n    # Add \"--define tensorflow_mkldnn_contraction_kernel=0\" to your build command to disable mkldnn\n    # sgemm in Eigen tensor contractions (matrix multiplications and convolutions). The mkldnn\n    # kernels are generated at runtime and use avx/avx2/fma/avx512 based on cpu status registers\n    # (https://en.wikipedia.org/wiki/CPUID). Default Eigen contraction kernel is\n    # Eigen::internal::gebp_kernel (general block-panel kernel).\n    name = \"no_mkldnn_contraction_kernel\",\n    define_values = {\n        \"tensorflow_mkldnn_contraction_kernel\": \"0\",\n    },\n)\n\n# Public support libraries ----------------------------------------------------\n\ncc_library(\n    name = \"assign_op\",\n    hdrs = [\"assign_op.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"strided_slice_op\",\n    srcs = [\n        \"strided_slice_op.cc\",\n        \"strided_slice_op_inst_0.cc\",\n        \"strided_slice_op_inst_1.cc\",\n        \"strided_slice_op_inst_2.cc\",\n        \"strided_slice_op_inst_3.cc\",\n        \"strided_slice_op_inst_4.cc\",\n        \"strided_slice_op_inst_5.cc\",\n        \"strided_slice_op_inst_6.cc\",\n        \"strided_slice_op_inst_7.cc\",\n        \"strided_slice_op_inst_8.cc\",\n    ],\n    hdrs = [\n        \"slice_op.h\",\n        \"strided_slice_op.h\",\n        \"strided_slice_op_impl.h\",\n    ],\n    gpu_srcs = [\n        \"slice_op.h\",\n        \"strided_slice_op.h\",\n        \"strided_slice_op_impl.h\",\n        \"strided_slice_op_gpu_impl.h\",\n        \"strided_slice_op_gpu_int.cu.cc\",\n        \"strided_slice_op_gpu_complex.cu.cc\",\n        \"strided_slice_op_gpu_bool.cu.cc\",\n        \"strided_slice_op_gpu_number_types.cu.cc\",\n    ],\n    deps = [\n        \":dense_update_functor\",\n        \":inplace_ops\",\n        \":ops_util\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"clustering_ops\",\n    prefix = \"clustering_ops\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_headers_lib\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"clustering_ops_test\",\n    srcs = [\"clustering_ops_test.cc\"],\n    deps = [\n        \":clustering_ops\",\n        \"//tensorflow/core:clustering_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"collective_ops\",\n    srcs = if_nccl([\n        \"collective_nccl.h\",\n        \"collective_nccl.cc\",\n        \"collective_nccl_broadcaster.h\",\n        \"collective_nccl_broadcaster.cc\",\n        \"collective_nccl_gatherer.h\",\n        \"collective_nccl_gatherer.cc\",\n        \"collective_nccl_reducer.h\",\n        \"collective_nccl_reducer.cc\",\n    ]),\n    prefix = \"collective_ops\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ] + if_nccl([\n        \"//tensorflow/core/nccl:collective_communicator\",\n    ]),\n)\n\ntf_cuda_cc_test(\n    name = \"collective_nccl_test\",\n    size = \"small\",\n    srcs = [\"collective_nccl_test.cc\"],\n    tags = tf_cuda_tests_tags() + [\n        \"guitar\",\n        \"multi_gpu\",\n        \"no_oss\",\n    ],\n    deps = [\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/nccl:collective_communicator\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"concat_lib\",\n    srcs = [\n        \"concat_lib_cpu.cc\",\n        \"concat_lib_gpu.cc\",\n    ],\n    hdrs = [\n        \"concat_lib.h\",\n        \"concat_lib_cpu.h\",\n    ],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"concat_lib_gpu_impl.cu.cc\",\n        \"concat_lib.h\",\n        \"concat_lib_gpu.h\",\n        \"gpu_device_array.h\",\n        \"gpu_device_array_gpu.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 0,\n)\n\ncc_library(\n    name = \"concat_lib_hdrs\",\n    hdrs = [\n        \"concat_lib.h\",\n        \"concat_lib_cpu.h\",\n    ],\n    deps = [\"//third_party/eigen3\"],\n)\n\ntf_kernel_library(\n    name = \"conv_2d\",\n    hdrs = [\"conv_2d.h\"],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"conv_2d.h\",\n        \"conv_2d_gpu.h\",\n        \"conv_2d_gpu_double.cu.cc\",\n        \"conv_2d_gpu_float.cu.cc\",\n        \"conv_2d_gpu_half.cu.cc\",\n        \"conv_2d_gpu_int.cu.cc\",\n        \"conv_2d_gpu_int_spatial_convolution.cu.cc\",\n        \"conv_2d_gpu_int_spatial_convolution_backward.cu.cc\",\n        \"conv_2d_gpu_uint16.cu.cc\",\n        \"conv_2d_gpu_uint32.cu.cc\",\n        \"conv_2d_gpu_uint64.cu.cc\",\n        \"conv_2d_gpu_uint8.cu.cc\",\n    ],\n    deps = [\n        \":eigen_helpers\",\n        \":fill_functor\",\n        \":ops_util\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ] + if_cuda_or_rocm([\":gpu_utils\"]),\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"conv_2d_hdrs\",\n    hdrs = [\"conv_2d.h\"],\n    deps = [\n        \":eigen_helpers\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"conv_3d\",\n    hdrs = [\"conv_3d.h\"],\n    deps = [\n        \":eigen_helpers\",\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"fill_functor\",\n    prefix = \"fill_functor\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"initializable_lookup_table\",\n    srcs = [\"initializable_lookup_table.cc\"],\n    hdrs = [\"initializable_lookup_table.h\"],\n    deps = [\n        \"//tensorflow/core:core_cpu_base\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"lookup_util\",\n    srcs = [\"lookup_util.cc\"],\n    hdrs = [\"lookup_util.h\"],\n    deps = [\n        \":initializable_lookup_table\",\n        \"//tensorflow/core:core_cpu_base\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:op_requires\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"nccl_kernels\",\n    srcs = if_cuda_or_rocm([\n        \"nccl_ops.cc\",\n    ]),\n    deps = if_cuda([\n        \"@local_config_nccl//:nccl\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rccl\",\n    ]) + if_cuda_or_rocm([\n        \"//tensorflow/core/nccl:nccl_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:gpu_headers_lib\",\n    ]),\n)\n\ncc_library(\n    name = \"sparse_utils\",\n    srcs = [\n        \"sparse_utils.cc\",\n    ],\n    hdrs = [\"sparse_utils.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sparse_utils_test\",\n    srcs = [\"sparse_utils_test.cc\"],\n    deps = [\n        \":sparse_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/base:core_headers\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_flag_utils\",\n    srcs = [\n        \"tensor_flag_utils.cc\",\n    ],\n    hdrs = [\"tensor_flag_utils.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"tensor_flag_utils_test\",\n    srcs = [\"tensor_flag_utils_test.cc\"],\n    deps = [\n        \":tensor_flag_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/base:core_headers\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"ops_testutil\",\n    testonly = 1,\n    srcs = [\"ops_testutil.cc\"],\n    hdrs = [\"ops_testutil.h\"],\n    cuda_deps = [\n        \"//tensorflow/core:gpu_lib\",\n        \"//tensorflow/core:gpu_runtime\",\n    ],\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n    ],\n)\n\ncc_library(\n    name = \"ops_util\",\n    hdrs = [\"ops_util.h\"],\n    copts = if_not_windows([\"-Wno-sign-compare\"]),\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ncc_library(\n    name = \"ops_util_hdrs\",\n    hdrs = [\"ops_util.h\"],\n    deps = [\"//third_party/eigen3\"],\n)\n\ncc_library(\n    name = \"gpu_prim_hdrs\",\n    hdrs = [\"gpu_prim.h\"],\n    deps = if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ncc_library(\n    name = \"gpu_prim_helpers\",\n    hdrs = [\"gpu_prim_helpers.h\"],\n    deps = if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n    ]),\n)\n\ntf_cuda_only_cc_test(\n    name = \"gpu_prim_helpers_test\",\n    srcs = [\"gpu_prim_helpers_test.cu.cc\"],\n    tags = [\"no_cuda_asan\"],  # TODO(b/183963619)\n    deps = [\n        \":gpu_prim_helpers\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"conv_ops_gpu_hdrs\",\n    hdrs = [\"conv_ops_gpu.h\"],\n)\n\n# We keep this target only because some contrib/ targets depend on it. The\n# reason why the contrib/ targets can't depend on gpu_utils is that, some\n# of the targets are tf_custom_op_library. tf_custom_op_library forbids the\n# dependency to tensorflow/core:lib, which gpu_utils certainly depends on.\ncc_library(\n    name = \"gpu_util_hdrs\",\n    hdrs = [\n        \"gpu_utils.h\",\n        # See the exports_files declaration for a description of why this\n        # silliness is here.\n        #\n        # TODO(b/202546057) get rid of this once fused_conv is moved out of\n        # contrib.\n        \"//tensorflow/stream_executor:lazy_op_runner.h\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"gpu_utils\",\n    srcs = if_cuda_or_rocm([\"gpu_utils.cc\"]),\n    hdrs = [\"gpu_utils.h\"],\n    deps = [\n        \":gpu_util_hdrs\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/core/protobuf:autotuning_proto_cc\",\n        \"//tensorflow/core/protobuf:conv_autotuning_proto_cc\",\n        \"//tensorflow/core/util:env_var\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"//tensorflow/stream_executor:lazy_op_runner\",\n        \"//tensorflow/stream_executor/gpu:asm_compiler\",\n        \"//tensorflow/stream_executor/gpu:redzone_allocator\",\n        \"@com_google_absl//absl/algorithm:container\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_absl//absl/types:span\",\n        \"@com_google_absl//absl/strings:str_format\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//tensorflow/core/util/autotune_maps:conv_parameters\",\n    ] + if_cuda([\n        \"@local_config_cuda//cuda:cudnn_header\",\n        \"//tensorflow/stream_executor:tf_allocator_adapter\",\n    ]),\n)\n\ntf_cc_test(\n    name = \"ops_util_test\",\n    size = \"small\",\n    srcs = [\"ops_util_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"reshape_util\",\n    srcs = [\"reshape_util.cc\"],\n    hdrs = [\"reshape_util.h\"],\n    gpu_srcs = [\n        \"reshape_util_gpu.cu.cc\",\n        \"reshape_util.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"variable_ops_test\",\n    size = \"small\",\n    srcs = [\"variable_ops_test.cc\"],\n    deps = [\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stage_op\",\n    srcs = [\"stage_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"map_stage_op\",\n    srcs = [\"map_stage_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"queue_base\",\n    srcs = [\"queue_base.cc\"],\n    hdrs = [\"queue_base.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"queue_op\",\n    srcs = [\"queue_op.cc\"],\n    hdrs = [\"queue_op.h\"],\n    deps = [\n        \":queue_base\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"priority_queue\",\n    srcs = [\"priority_queue.cc\"],\n    hdrs = [\"priority_queue.h\"],\n    deps = [\n        \":queue_base\",\n        \":typed_queue\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"batch_kernels\",\n    srcs = [\"batch_kernels.cc\"],\n    hdrs = [\"batch_kernels.h\"],\n    deps = [\n        \":ops_util_hdrs\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/kernels/batching_util:adaptive_shared_batch_scheduler\",\n        \"//tensorflow/core/kernels/batching_util:batch_resource_base\",\n        \"//tensorflow/core/kernels/batching_util:bounded_executor\",\n        \"//tensorflow/core/kernels/batching_util:concat_split_util\",\n        \"//tensorflow/core/kernels/batching_util:periodic_function_dynamic\",\n        \"//tensorflow/core/platform:numbers\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ],\n    alwayslink = 1,\n)\n\ntf_kernel_library(\n    name = \"record_input_op\",\n    srcs = [\n        \"record_input_op.cc\",\n        \"record_yielder.cc\",\n        \"record_yielder.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"save_restore_tensor\",\n    srcs = [\"save_restore_tensor.cc\"],\n    hdrs = [\"save_restore_tensor.h\"],\n    copts = if_not_windows([\"-Wno-sign-compare\"]),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util/tensor_bundle\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"split_lib\",\n    srcs = [\"split_lib_cpu.cc\"],\n    hdrs = [\"split_lib.h\"],\n    gpu_srcs = [\n        \"split_lib_gpu.cu.cc\",\n        \"split_lib.h\",\n        \"split_lib_gpu.h\",\n    ],\n    deps = [\n        \":gpu_device_array\",\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 0,\n)\n\ncc_library(\n    name = \"split_lib_hdrs\",\n    hdrs = [\"split_lib.h\"],\n    deps = [\n        \"//tensorflow/core:framework_lite\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"typed_queue\",\n    hdrs = [\"typed_queue.h\"],\n    deps = [\n        \":queue_base\",\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ncc_library(\n    name = \"training_op_helpers\",\n    srcs = [\"training_op_helpers.cc\"],\n    hdrs = [\"training_op_helpers.h\"],\n    visibility = [\n        \":friends\",\n        \":optimizer_helper_friends\",\n    ],\n    deps = [\n        \":dense_update_functor\",\n        \":variable_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\n# Private support libraries ---------------------------------------------------\n\ncc_library(\n    name = \"gpu_device_array\",\n    hdrs = [\n        \"gpu_device_array.h\",\n        \"gpu_device_array_gpu.h\",\n    ],\n    visibility = [\"//tensorflow:__subpackages__\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:gpu_headers_lib\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\n# Depending on a build configuration this target provides custom kernel for Eigen\n# tensor contractions (small matrix multiplication kernel used to multiple together\n# blocks of the original tensors).\n#\n# 1) Default:\n#    Use Mkldnn single threaded sgemm. The mkldnn kernels are generated at runtime and\n#    use avx/avx2/fma/avx512 based on cpu status registers (https://en.wikipedia.org/wiki/CPUID).\n#\n# 2) Eigen: --define tensorflow_mkldnn_contraction_kernel=0 (disable mkldnn)\n#    Use Eigen contraction kernel: Eigen::internal::gebp_kernel.\n#\n# If you use `tensor.contract(other_tensor)` in your code, you must include additional header\n# to get the benefit of custom contraction kernel:\n#\n#   #if defined(TENSORFLOW_USE_CUSTOM_CONTRACTION_KERNEL)\n#   #include \"third_party/tensorflow/core/kernels/eigen_contraction_kernel.h\"\n#   #endif\n#\n# We define a two-level target because if we just add\n#   \":no_mkldnn_contraction_kernel\": []\n# in the same select list with //third_party/tensorflow:{android,arm,ios,ppc},\n# there can be more than one match, e.g., when building for android and MKL-DNN\n# contraction kernel is disabled. Bazel doesn't allow multiple matches.\n# See more details in\n#   https://github.com/tensorflow/tensorflow/issues/24414\ncc_library(\n    name = \"eigen_contraction_kernel\",\n    hdrs = [\"eigen_contraction_kernel.h\"],\n    compatible_with = get_compatible_with_portable(),\n    deps = select({\n        \":no_mkldnn_contraction_kernel\": [\":eigen_contraction_kernel_no_mkl\"],\n        \"//conditions:default\": [\":eigen_contraction_kernel_with_mkl\"],\n    }) + [\"@com_google_absl//absl/base\"],\n)\n\ncc_library(\n    name = \"eigen_contraction_kernel_with_mkl\",\n    srcs = [\"eigen_contraction_kernel.cc\"],\n    hdrs = [\"eigen_contraction_kernel.h\"],\n    defines = select({\n        \"//tensorflow:android_x86\": [],\n        \"//tensorflow:arm_any\": [],\n        \"//tensorflow:fuchsia_x86_64\": [],\n        \"//tensorflow:ios\": [],\n        \"//tensorflow:linux_ppc64le\": [],\n        \"//tensorflow:linux_s390x\": [],\n        \"//tensorflow:macos_arm64\": [],\n        \"//conditions:default\": [\n            \"TENSORFLOW_USE_CUSTOM_CONTRACTION_KERNEL\",\n            \"TENSORFLOW_USE_MKLDNN_CONTRACTION_KERNEL\",\n        ],\n    }),\n    deps = [\n        \"@com_google_absl//absl/base\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core/platform:dynamic_annotations\",\n    ] + select({\n        \"//tensorflow:android_x86\": [],\n        \"//tensorflow:arm_any\": [],\n        \"//tensorflow:fuchsia_x86_64\": [],\n        \"//tensorflow:ios\": [],\n        \"//tensorflow:linux_ppc64le\": [],\n        \"//tensorflow:linux_s390x\": [],\n        \"//tensorflow:macos_arm64\": [],\n        \"//conditions:default\": [\"@mkl_dnn_v1//:mkl_dnn\"],\n    }),\n)\n\ncc_library(\n    name = \"eigen_contraction_kernel_no_mkl\",\n    srcs = [\"eigen_contraction_kernel.cc\"],\n    hdrs = [\"eigen_contraction_kernel.h\"],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\n        \"//tensorflow/core/platform:dynamic_annotations\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/base\",\n    ],\n)\n\nfilegroup(\n    name = \"xla_cpu_runtime_hdrs\",\n    srcs = [\n        \"eigen_contraction_kernel.h\",\n        \"eigen_convolution_helpers.h\",\n        \"eigen_spatial_convolutions.h\",\n        \"eigen_spatial_convolutions-inl.h\",\n    ],\n)\n\nfilegroup(\n    name = \"xla_cpu_runtime_srcs\",\n    srcs = [\n        \"eigen_contraction_kernel.cc\",\n    ],\n)\n\ncc_library(\n    name = \"redux_functor\",\n    hdrs = [\"redux_functor.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"fused_eigen_output_kernels\",\n    srcs = [\"fused_eigen_output_kernels.cc\"],\n    hdrs = [\"fused_eigen_output_kernels.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_helpers\",\n    hdrs = [\n        \"eigen_activations.h\",\n        \"eigen_attention.h\",\n        \"eigen_backward_cuboid_convolutions.h\",\n        \"eigen_backward_spatial_convolutions.h\",\n        \"eigen_cuboid_convolution.h\",\n        \"eigen_pooling.h\",\n        \"eigen_spatial_convolutions.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\n        \":eigen_contraction_kernel\",\n        \":eigen_convolution_helpers\",\n        \":eigen_spatial_convolutions-inl\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_helpers_no_mkl\",\n    hdrs = [\n        \"eigen_activations.h\",\n        \"eigen_attention.h\",\n        \"eigen_backward_cuboid_convolutions.h\",\n        \"eigen_backward_spatial_convolutions.h\",\n        \"eigen_cuboid_convolution.h\",\n        \"eigen_pooling.h\",\n        \"eigen_spatial_convolutions.h\",\n    ],\n    deps = [\n        \":eigen_convolution_helpers\",\n        \":eigen_spatial_convolutions-inl\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_spatial_convolutions-inl\",\n    hdrs = [\n        \"eigen_spatial_convolutions-inl.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    deps = [\n        \":eigen_convolution_helpers\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_convolution_helpers\",\n    hdrs = [\n        \"eigen_convolution_helpers.h\",\n    ],\n    compatible_with = get_compatible_with_portable(),\n    defines = [\n        \"EIGEN_ALTIVEC_USE_CUSTOM_PACK=0\",\n    ],\n)\n\n# OpKernel libraries ----------------------------------------------------------\n\nARRAY_DEPS = [\n    \":concat_lib\",\n    \":fill_functor\",\n    \":gather_functor\",\n    \":ops_util\",\n    \":transpose_functor\",\n    \"//tensorflow/core:array_grad\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core/profiler/lib:scoped_memory_debug_annotation\",\n    \"//third_party/eigen3\",\n]\n\ntf_kernel_library(\n    name = \"immutable_constant_op\",\n    prefix = \"immutable_constant_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"set_kernels\",\n    prefix = \"set_kernels\",\n    deps = [\n        \"//tensorflow/core:framework_headers_lib\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/container:btree\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"debug_ops\",\n    prefix = \"debug_ops\",\n    deps = ARRAY_DEPS + [\n        \"//tensorflow/core:gpu_runtime\",\n        \"//tensorflow/core/debug:debug_io_utils\",\n    ],\n)\n\ncc_library(\n    name = \"array\",\n    deps = [\n        \":batch_space_ops\",\n        \":bcast_ops\",\n        \":broadcast_to_op\",\n        \":concat_op\",\n        \":constant_op\",\n        \":depth_space_ops\",\n        \":diag_op\",\n        \":edit_distance_op\",\n        \":fingerprint_op\",\n        \":gather_nd_op\",\n        \":gather_op\",\n        \":guarantee_const_op\",\n        \":host_constant_op\",\n        \":identity_n_op\",\n        \":identity_op\",\n        \":immutable_constant_op\",\n        \":inplace_ops\",\n        \":listdiff_op\",\n        \":one_hot_op\",\n        \":pack_op\",\n        \":pad_op\",\n        \":quantize_and_dequantize_op\",\n        \":reshape_op\",\n        \":reverse_op\",\n        \":reverse_sequence_op\",\n        \":searchsorted_op\",\n        \":shape_ops\",\n        \":slice_op\",\n        \":snapshot_op\",\n        \":split_op\",\n        \":split_v_op\",\n        \":strided_slice_op\",\n        \":tile_ops\",\n        \":transpose_op\",\n        \":unique_op\",\n        \":unpack_op\",\n        \":unravel_index_op\",\n        \":where_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"bcast_ops\",\n    prefix = \"bcast_ops\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"bitcast_op\",\n    deprecation = \"use //third_party/tensorflow/c/kernels:bitcast_op instead\",\n    deps = [\"//tensorflow/c/kernels:bitcast_op\"],\n)\n\ntf_kernel_library(\n    name = \"broadcast_to_op\",\n    prefix = \"broadcast_to_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"concat_op\",\n    prefix = \"concat_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"guarantee_const_op\",\n    prefix = \"guarantee_const_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"constant_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"constant_op\",\n    deps = ARRAY_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:constant_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"host_constant_op\",\n    prefix = \"host_constant_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"diag_op\",\n    prefix = \"diag_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"edit_distance_op\",\n    prefix = \"edit_distance_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"fingerprint_op\",\n    prefix = \"fingerprint_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_cc_test(\n    name = \"fingerprint_op_test\",\n    size = \"small\",\n    srcs = [\"fingerprint_op_test.cc\"],\n    deps = [\n        \":fingerprint_op\",\n        \":ops_testutil\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"gather_nd_op\",\n    prefix = \"gather_nd_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"gather_op\",\n    prefix = \"gather_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"identity_op\",\n    prefix = \"identity_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"identity_n_op\",\n    prefix = \"identity_n_op\",\n    deps = ARRAY_DEPS + [\n        \"//tensorflow/core:core_cpu_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"listdiff_op\",\n    prefix = \"listdiff_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"one_hot_op\",\n    prefix = \"one_hot_op\",\n    deps = ARRAY_DEPS + [\"//tensorflow/core/util:overflow\"],\n)\n\ntf_kernel_library(\n    name = \"pack_op\",\n    prefix = \"pack_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"pad_op\",\n    prefix = \"pad_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"quantize_and_dequantize_op\",\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    prefix = \"quantize_and_dequantize_op\",\n    deps = ARRAY_DEPS + [\":cwise_op\"],\n)\n\ntf_kernel_library(\n    name = \"reshape_op\",\n    prefix = \"reshape_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"reverse_op\",\n    prefix = \"reverse_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"reverse_sequence_op\",\n    prefix = \"reverse_sequence_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"shape_ops\",\n    prefix = \"shape_ops\",\n    deps = ARRAY_DEPS + [\"//tensorflow/core/common_runtime:dma_helper\"],\n)\n\ntf_kernel_library(\n    name = \"slice_op\",\n    prefix = \"slice_op\",\n    deps = ARRAY_DEPS + [\":strided_slice_op\"],\n)\n\ntf_kernel_library(\n    name = \"snapshot_op\",\n    prefix = \"snapshot_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"split_op\",\n    gpu_srcs = [\"gpu_device_array.h\"],\n    prefix = \"split_op\",\n    deps = ARRAY_DEPS + [\":split_lib\"],\n)\n\ntf_kernel_library(\n    name = \"split_v_op\",\n    gpu_srcs = [\"gpu_device_array.h\"],\n    prefix = \"split_v_op\",\n    deps = ARRAY_DEPS + [\":split_lib\"],\n)\n\ntf_kernel_library(\n    name = \"searchsorted_op\",\n    prefix = \"searchsorted_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"inplace_ops\",\n    prefix = \"inplace_ops\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"tile_ops\",\n    srcs = [\n        \"tile_functor_cpu.h\",\n        \"tile_functor_cpu_bfloat16.cc\",\n        \"tile_functor_cpu_bool.cc\",\n        \"tile_functor_cpu_complex128.cc\",\n        \"tile_functor_cpu_complex64.cc\",\n        \"tile_functor_cpu_double.cc\",\n        \"tile_functor_cpu_float.cc\",\n        \"tile_functor_cpu_half.cc\",\n        \"tile_functor_cpu_int16.cc\",\n        \"tile_functor_cpu_int32.cc\",\n        \"tile_functor_cpu_int64.cc\",\n        \"tile_functor_cpu_int8.cc\",\n        \"tile_functor_cpu_tstring.cc\",\n        \"tile_functor_cpu_uint32.cc\",\n        \"tile_functor_cpu_uint64.cc\",\n        \"tile_functor_cpu_uint8.cc\",\n        \"tile_functor_cpu_variant.cc\",\n    ],\n    hdrs = [\"tile_functor.h\"],\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    gpu_srcs = [\n        \"tile_functor.h\",\n        \"tile_functor_gpu.h\",\n        \"tile_functor_gpu_bool.cu.cc\",\n        \"tile_functor_gpu_complex64.cu.cc\",\n        \"tile_functor_gpu_complex128.cu.cc\",\n        \"tile_functor_gpu_double.cu.cc\",\n        \"tile_functor_gpu_float.cu.cc\",\n        \"tile_functor_gpu_half.cu.cc\",\n        \"tile_functor_gpu_int16.cu.cc\",\n        \"tile_functor_gpu_int32.cu.cc\",\n        \"tile_functor_gpu_int64.cu.cc\",\n    ],\n    prefix = \"tile_ops\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"transpose_op\",\n    srcs = [\n        \"transpose_op.cc\",\n    ],\n    hdrs = [\"transpose_op.h\"],\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"unique_op\",\n    prefix = \"unique_op\",\n    deps = ARRAY_DEPS + [\n        \"@com_google_absl//absl/container:flat_hash_map\",\n    ] + if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"unpack_op\",\n    prefix = \"unpack_op\",\n    deps = ARRAY_DEPS + [\":split_lib\"],\n)\n\ntf_kernel_library(\n    name = \"unravel_index_op\",\n    prefix = \"unravel_index_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"where_op\",\n    srcs = [\"where_op.cc\"],\n    hdrs = [\"where_op.h\"],\n    gpu_srcs = [\n        \"where_op.h\",\n        \"where_op_gpu.cu.h\",\n        \"where_op_gpu_impl_1.cu.cc\",\n        \"where_op_gpu_impl_2.cu.cc\",\n        \"where_op_gpu_impl_3.cu.cc\",\n        \"where_op_gpu_impl_4.cu.cc\",\n        \"where_op_gpu_impl_5.cu.cc\",\n        \"where_op_gpu_impl_6.cu.cc\",\n        \"where_op_gpu_impl_7.cu.cc\",\n        \"where_op_gpu_impl_8.cu.cc\",\n    ],\n    deps = if_cuda([\n               \"//tensorflow/core/util:cuda_solvers\",\n           ]) + if_rocm([\n               \"//tensorflow/core/util:rocm_solvers\",\n           ]) + [\":gpu_prim_hdrs\"] +\n           ARRAY_DEPS,\n)\n\ncc_library(\n    name = \"composite_tensor_variant\",\n    srcs = [\"composite_tensor_variant.cc\"],\n    hdrs = [\"composite_tensor_variant.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ntf_cc_test(\n    name = \"composite_tensor_variant_test\",\n    size = \"small\",\n    srcs = [\"composite_tensor_variant_test.cc\"],\n    deps = [\n        \":composite_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"composite_tensor_ops\",\n    srcs = [\"composite_tensor_ops.cc\"],\n    deps = [\n        \":composite_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_ops\",\n    deps = [\n        \":ragged_cross_op\",\n        \":ragged_gather_op\",\n        \":ragged_range_op\",\n        \":ragged_tensor_from_variant_op\",\n        \":ragged_tensor_to_sparse_kernel\",\n        \":ragged_tensor_to_tensor_op\",\n        \":ragged_tensor_to_variant_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_gather_op\",\n    srcs = [\"ragged_gather_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_gather_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_gather_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_gather_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_range_op\",\n    srcs = [\"ragged_range_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_range_op_test\",\n    srcs = [\"ragged_range_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_range_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_to_sparse_kernel\",\n    srcs = [\"ragged_tensor_to_sparse_kernel.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_to_tensor_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_to_tensor_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_to_tensor_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_to_tensor_op\",\n    srcs = [\"ragged_tensor_to_tensor_op.cc\"],\n    deps = [\n        \":broadcast_to_op\",\n        \":list_kernels\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/util:ragged_to_dense_util\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_to_sparse_kernel_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_to_sparse_kernel_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_to_sparse_kernel\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_tensor_variant\",\n    srcs = [\"ragged_tensor_variant.cc\"],\n    hdrs = [\"ragged_tensor_variant.h\"],\n    deps = [\n        \":cwise_op\",\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_to_variant_op\",\n    srcs = [\"ragged_tensor_to_variant_op.cc\"],\n    deps = [\n        \":concat_lib\",\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_tensor_from_variant_op\",\n    srcs = [\"ragged_tensor_from_variant_op.cc\"],\n    deps = [\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_to_variant_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_to_variant_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_to_variant_op\",\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_tensor_from_variant_op_test\",\n    size = \"small\",\n    srcs = [\"ragged_tensor_from_variant_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ragged_tensor_from_variant_op\",\n        \":ragged_tensor_variant\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ragged_cross_op\",\n    srcs = [\"ragged_cross_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"rnn_ops\",\n    deps = [\n        \"//tensorflow/core/kernels/rnn:gru_ops\",\n        \"//tensorflow/core/kernels/rnn:lstm_ops\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"cudnn_rnn_kernels\",\n    srcs = [\"cudnn_rnn_ops.cc\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":gpu_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/core/profiler/lib:scoped_annotation\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"batch_norm_op_test\",\n    size = \"small\",\n    srcs = [\"batch_norm_op_test.cc\"],\n    tags = [\n        \"no_oss\",  # b/189866692\n    ],\n    deps = [\n        \":batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"batch_kernel_test_util\",\n    testonly = 1,\n    srcs = [\"batch_kernel_test_util.cc\"],\n    hdrs = [\"batch_kernel_test_util.h\"],\n    deps = [\n        \":batch_kernels\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"batch_kernels_test\",\n    size = \"small\",\n    srcs = [\"batch_kernels_test.cc\"],\n    deps = [\n        \":batch_kernel_test_util\",\n        \":batch_kernels\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"batch_kernels_env_test\",\n    size = \"small\",\n    srcs = [\"batch_kernels_env_test.cc\"],\n    deps = [\n        \":batch_kernel_test_util\",\n        \":batch_kernels\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/platform:status_matchers\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ops_testutil_test\",\n    size = \"small\",\n    srcs = [\"ops_testutil_test.cc\"],\n    deps = [\n        \":identity_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"concat_op_test\",\n    size = \"small\",\n    srcs = [\"concat_op_test.cc\"],\n    deps = [\n        \":concat_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"bincount_op_test\",\n    size = \"small\",\n    srcs = [\"bincount_op_test.cc\"],\n    deps = [\n        \":bincount_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"broadcast_to_op_test\",\n    size = \"small\",\n    srcs = [\"broadcast_to_op_test.cc\"],\n    deps = [\n        \":broadcast_to_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"constant_op_test\",\n    size = \"small\",\n    srcs = [\"constant_op_test.cc\"],\n    tags = [\"no_cuda_on_cpu_tap\"],\n    deps = [\n        \":constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"deep_conv2d_test\",\n    size = \"small\",\n    srcs = [\"deep_conv2d_test.cc\"],\n    deps = [\n        \":conv_ops\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"xsmm_conv2d_test\",\n    size = \"small\",\n    srcs = select({\n        \":xsmm_convolutions\": [\"xsmm_conv2d_test.cc\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":conv_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ] + select({\n        \":xsmm_convolutions\": [\n            \"@libxsmm_archive//:xsmm_avx\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\ntf_cuda_cc_test(\n    name = \"conv_ops_test\",\n    size = \"medium\",\n    srcs = [\"conv_ops_test.cc\"],\n    tags = [\n        \"no_cuda_asan\",  # TODO(b/171342275): re-enable.\n    ],\n    deps = [\n        \":conv_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels/image\",\n        \"//tensorflow/core/platform:tensor_float_32_utils\",\n        \"@com_google_absl//absl/algorithm:container\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"conv_ops_benchmark_test\",\n    size = \"medium\",\n    srcs = [\"conv_ops_benchmark_test.cc\"],\n    tags = [\n        \"nomac\",  # b/132448918\n        \"nomsan\",  # b/141643254\n    ],\n    deps = [\n        \":bias_op\",\n        \":conv_ops\",\n        \":fused_batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":relu_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ] + if_mkl([\"//tensorflow/core/kernels/mkl:mkl_conv_op\"]),\n)\n\ntf_cuda_cc_test(\n    name = \"conv_grad_filter_ops_benchmark_test\",\n    size = \"medium\",\n    srcs = [\"conv_grad_filter_ops_benchmark_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":conv_ops\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"conv_grad_input_ops_benchmark_test\",\n    size = \"medium\",\n    srcs = [\"conv_grad_input_ops_benchmark_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":conv_ops\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"depthwise_conv_ops_test\",\n    size = \"small\",\n    srcs = [\"depthwise_conv_ops_test.cc\"],\n    tags = tf_cuda_tests_tags() + [\n        \"no_gpu\",  # TODO(b/194100358): re-enable after flakiness resolved.\n        \"no_cuda_asan\",  # TODO(b/171342266): re-enable.\n    ],\n    deps = [\n        \":conv_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/kernels/image\",\n    ],\n)\n\ntf_cc_test(\n    name = \"example_parsing_ops_test\",\n    size = \"medium\",\n    srcs = [\"example_parsing_ops_test.cc\"],\n    shard_count = 4,\n    tags = [\"optonly\"],\n    deps = [\n        \":example_parsing_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/base\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"fake_quant_ops_test\",\n    size = \"small\",\n    srcs = [\"fake_quant_ops_test.cc\"],\n    tags = tf_cuda_tests_tags(),\n    deps = [\n        \":fake_quant_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"fused_batch_norm_op_test\",\n    size = \"small\",\n    srcs = [\"fused_batch_norm_op_test.cc\"],\n    tags = [\n        \"nomsan\",  # TODO(b/181135145), use-of-uninitialized-value in initializedLoggingWithEnvVariables\n    ],\n    deps = [\n        \":fused_batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"fused_batch_norm_ex_op_test\",\n    size = \"small\",\n    srcs = [\"fused_batch_norm_ex_op_test.cc\"],\n    tags = [\n        \"no_cuda_on_cpu_tap\",\n        \"nomsan\",  # b/141643254\n    ],\n    deps = [\n        \":cwise_op\",\n        \":fused_batch_norm_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":relu_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n        \"@com_google_absl//absl/algorithm:container\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"in_topk_op_test\",\n    size = \"small\",\n    srcs = [\"in_topk_op_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":in_topk_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"gather_functor\",\n    prefix = \"gather_functor\",\n    visibility = [\":friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Unlike gather_functor library, this does not include the CUDA code and deps.\ncc_library(\n    name = \"gather_functor_hdr\",\n    hdrs = [\n        \"gather_functor.h\",\n        \"gather_functor_batched.h\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dense_update_functor\",\n    srcs = [\"dense_update_functor.cc\"],\n    hdrs = [\"dense_update_functor.h\"],\n    gpu_srcs = [\n        \"dense_update_functor.h\",\n        \"dense_update_functor_gpu.cu.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 0,\n)\n\ntf_cuda_cc_test(\n    name = \"gather_op_test\",\n    size = \"small\",\n    srcs = [\"gather_op_test.cc\"],\n    deps = [\n        \":gather_op\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"gather_nd_op_test\",\n    size = \"small\",\n    srcs = [\"gather_nd_op_test.cc\"],\n    deps = [\n        \":gather_nd_op\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"guarantee_const_op_test\",\n    size = \"small\",\n    srcs = [\"guarantee_const_op_test.cc\"],\n    deps = [\n        \":guarantee_const_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"identity_op_test\",\n    size = \"small\",\n    srcs = [\"identity_op_test.cc\"],\n    deps = [\n        \":identity_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"identity_n_op_test\",\n    size = \"small\",\n    srcs = [\"identity_n_op_test.cc\"],\n    deps = [\n        \":identity_n_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"debug_ops_test\",\n    size = \"small\",\n    srcs = [\"debug_ops_test.cc\"],\n    deps = [\n        \":debug_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:debug_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/debug:debug_io_utils\",\n        \"//tensorflow/core/debug:debug_node_key\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"quantize_and_dequantize_op_test\",\n    size = \"small\",\n    srcs = [\"quantize_and_dequantize_op_test.cc\"],\n    tags = [\n        \"no_windows\",  # test uses rand_r which does not exist on Windows\n    ],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantize_and_dequantize_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"dequantize_op_test\",\n    size = \"small\",\n    srcs = [\"dequantize_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"one_hot_op_test\",\n    size = \"small\",\n    srcs = [\"one_hot_op_test.cc\"],\n    tags = [\"nomsan\"],  # b/141643254\n    deps = [\n        \":one_hot_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/stream_executor/cuda:cudnn_plugin\",\n    ],\n)\n\ntf_cc_test(\n    name = \"reverse_op_test\",\n    size = \"small\",\n    srcs = [\"reverse_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":reverse_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"scatter_functor\",\n    prefix = \"scatter_functor\",\n    visibility = [\":friends\"],\n    deps = [\n        \":dense_update_functor\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"shape_ops_test\",\n    size = \"small\",\n    srcs = [\"shape_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":shape_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"slice_op_test\",\n    size = \"small\",\n    srcs = [\"slice_op_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":slice_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"strided_slice_op_test\",\n    size = \"small\",\n    srcs = [\"strided_slice_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":slice_op\",\n        \":strided_slice_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"unique_op_test\",\n    size = \"small\",\n    srcs = [\"unique_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":unique_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"transpose_functor\",\n    srcs = [\"transpose_functor_cpu.cc\"],\n    hdrs = [\"transpose_functor.h\"],\n    gpu_srcs = [\n        \"transpose_functor_gpu.cu.cc\",\n        \"transpose_functor.h\",\n    ],\n    visibility = [\":friends\"],\n    deps = [\n        \":conv_2d\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cc_test(\n    name = \"transpose_util_test\",\n    size = \"small\",\n    srcs = [\"transpose_util_test.cc\"],\n    deps = [\n        \":transpose_functor\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"candidate_sampler_ops\",\n    prefix = \"candidate_sampler_ops\",\n    deps = [\n        \":range_sampler\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"range_sampler\",\n    srcs = [\"range_sampler.cc\"],\n    hdrs = [\"range_sampler.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cc_test(\n    name = \"range_sampler_test\",\n    size = \"small\",\n    srcs = [\"range_sampler_test.cc\"],\n    deps = [\n        \":range_sampler\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"control_flow_ops\",\n    prefix = \"control_flow_ops\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"while_op_test\",\n    srcs = [\"while_op_test.cc\"],\n    tags = [\n        \"no_windows\",\n    ],  # TODO(b/208697533): Re-enable after fixing.\n    deps = [\n        \":control_flow_ops\",\n        \"//tensorflow/c/experimental/stream_executor\",\n        \"//tensorflow/c/experimental/stream_executor:stream_executor_test_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"//tensorflow/core/common_runtime/pluggable_device:pluggable_device_runtime_impl\",\n        \"//tensorflow/core/framework:function_testlib\",\n        \"//tensorflow/core/kernels:cast_op\",\n        \"//tensorflow/core/kernels:constant_op\",\n        \"//tensorflow/core/kernels:cwise_op\",\n        \"//tensorflow/core/kernels:functional_ops\",\n        \"//tensorflow/core/kernels:identity_op\",\n        \"//tensorflow/core/kernels:ops_testutil\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"ctc_ops\",\n    prefix = \"ctc\",\n    deps = [\n        \"//tensorflow/core/framework:bounds_check\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util/ctc:ctc_beam_search_lib\",\n        \"//tensorflow/core/util/ctc:ctc_loss_calculator_lib\",\n    ] + if_cuda_or_rocm([\n        \":gpu_utils\",\n        \":conv_ops_gpu_hdrs\",\n    ]) + if_cuda([\n        \"@local_config_cuda//cuda:cudnn_header\",\n    ]),\n)\n\ntf_cc_test(\n    name = \"control_flow_ops_test\",\n    size = \"small\",\n    srcs = [\"control_flow_ops_test.cc\"],\n    deps = [\n        \":control_flow_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:forward_type_inference\",\n    ],\n)\n\ncc_library(\n    name = \"data_flow\",\n    deps = [\n        \":barrier_ops\",\n        \":conditional_accumulator_base_op\",\n        \":conditional_accumulator_op\",\n        \":dynamic_partition_op\",\n        \":dynamic_stitch_op\",\n        \":fifo_queue_op\",\n        \":lookup_table_init_op\",\n        \":lookup_table_op\",\n        \":map_stage_op\",\n        \":padding_fifo_queue_op\",\n        \":priority_queue_op\",\n        \":queue_ops\",\n        \":random_shuffle_queue_op\",\n        \":record_input_op\",\n        \":session_ops\",\n        \":sparse_conditional_accumulator_op\",\n        \":stack_ops\",\n        \":stage_op\",\n        \":tensor_array_ops\",\n    ],\n)\n\ncc_library(\n    name = \"lookup\",\n    deps = [\n        \":lookup_table_init_op\",\n        \":lookup_table_op\",\n    ],\n)\n\ncc_header_only_library(\n    name = \"lookup_headers_lib\",\n    deps = [\":lookup\"],\n)\n\nDATA_FLOW_DEPS = [\n    \":concat_lib\",\n    \":conditional_accumulator\",\n    \":conditional_accumulator_base\",\n    \":fifo_queue\",\n    \":initializable_lookup_table\",\n    \":lookup_util\",\n    \":padding_fifo_queue\",\n    \":priority_queue\",\n    \":queue_base\",\n    \":queue_op\",\n    \":sparse_conditional_accumulator\",\n    \":split_lib\",\n    \":tensor_array\",\n    \":typed_conditional_accumulator_base\",\n    \":typed_queue\",\n    \"//third_party/eigen3\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core/framework:bounds_check\",\n]\n\ntf_kernel_library(\n    name = \"conditional_accumulator_base_op\",\n    prefix = \"conditional_accumulator_base_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"conditional_accumulator_op\",\n    prefix = \"conditional_accumulator_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"barrier_ops\",\n    prefix = \"barrier_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"fifo_queue_op\",\n    prefix = \"fifo_queue_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"padding_fifo_queue_op\",\n    prefix = \"padding_fifo_queue_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"priority_queue_op\",\n    prefix = \"priority_queue_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"queue_ops\",\n    prefix = \"queue_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"random_shuffle_queue_op\",\n    prefix = \"random_shuffle_queue_op\",\n    deps = DATA_FLOW_DEPS + [\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"scoped_allocator_ops\",\n    prefix = \"scoped_allocator_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"scoped_allocator_ops_test\",\n    srcs = [\"scoped_allocator_ops_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),  #Required for benchmarking\n    deps = [\n        \":cwise_op\",\n        \":dense_update_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scoped_allocator_ops\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"session_ops\",\n    prefix = \"session_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_conditional_accumulator_op\",\n    prefix = \"sparse_conditional_accumulator_op\",\n    deps = DATA_FLOW_DEPS,\n)\n\ncc_library(\n    name = \"stack\",\n    srcs = [\"stack.cc\"],\n    hdrs = [\"stack.h\"],\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stack_ops\",\n    prefix = \"stack_ops\",\n    deps = DATA_FLOW_DEPS + [\":stack\"],\n)\n\ntf_kernel_library(\n    name = \"tensor_array_ops\",\n    prefix = \"tensor_array_ops\",\n    deps = DATA_FLOW_DEPS,\n)\n\nDYNAMIC_DEPS = [\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"dynamic_partition_op\",\n    prefix = \"dynamic_partition_op\",\n    deps = DYNAMIC_DEPS + [\n        \":fill_functor\",\n        \":gather_functor\",\n        \":gpu_prim_hdrs\",\n        \"//tensorflow/core:framework_internal\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dynamic_stitch_op\",\n    gpu_srcs = [\n        \"gpu_device_array.h\",\n        \"gpu_device_array_gpu.h\",\n    ],\n    prefix = \"dynamic_stitch_op\",\n    deps = DYNAMIC_DEPS,\n)\n\ncc_library(\n    name = \"tensor_cord\",\n    srcs = [\"tensor_cord.cc\"],\n    hdrs = [\"tensor_cord.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ntf_cc_test(\n    name = \"tensor_cord_test\",\n    srcs = [\"tensor_cord_test.cc\"],\n    deps = [\n        \":tensor_cord\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/platform:cord\",\n    ],\n)\n\nLOOKUP_DEPS = [\n    \":initializable_lookup_table\",\n    \":lookup_util\",\n    \"@com_google_absl//absl/container:flat_hash_map\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core/framework:bounds_check\",\n]\n\ntf_kernel_library(\n    name = \"lookup_table_init_op\",\n    prefix = \"lookup_table_init_op\",\n    deps = LOOKUP_DEPS,\n)\n\ntf_kernel_library(\n    name = \"lookup_table_op\",\n    prefix = \"lookup_table_op\",\n    deps = LOOKUP_DEPS,\n)\n\ncc_library(\n    name = \"checkpoint_ops\",\n    deps = [\n        \":generate_vocab_remapping_op\",\n        \":load_and_remap_matrix_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"generate_vocab_remapping_op\",\n    srcs = [\"generate_vocab_remapping_op.cc\"],\n    deps = [\n        \":lookup_table_init_op\",\n        \":lookup_table_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"load_and_remap_matrix_op\",\n    srcs = [\"load_and_remap_matrix_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/util/tensor_bundle\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cuda_cc_tests(\n    name = \"dynamic_op_test\",\n    size = \"small\",\n    srcs = [\n        \"dynamic_partition_op_test.cc\",\n        \"dynamic_stitch_op_test.cc\",\n    ],\n    deps = [\n        \":data_flow\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"fifo_queue\",\n    srcs = [\"fifo_queue.cc\"],\n    hdrs = [\"fifo_queue.h\"],\n    visibility = [\":friends\"],\n    deps = [\n        \":queue_base\",\n        \":queue_op\",\n        \":typed_queue\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"padding_fifo_queue\",\n    srcs = [\"padding_fifo_queue.cc\"],\n    hdrs = [\"padding_fifo_queue.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \":fifo_queue\",\n        \":queue_base\",\n        \":typed_queue\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ncc_library(\n    name = \"conditional_accumulator_base\",\n    srcs = [\"conditional_accumulator_base.cc\"],\n    hdrs = [\n        \"conditional_accumulator_base.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"typed_conditional_accumulator_base\",\n    hdrs = [\"typed_conditional_accumulator_base.h\"],\n    deps = [\n        \":conditional_accumulator_base\",\n    ],\n)\n\ncc_library(\n    name = \"conditional_accumulator\",\n    hdrs = [\n        \"conditional_accumulator.h\",\n        \"conditional_accumulator_base_op.h\",\n    ],\n    deps = [\n        \":conditional_accumulator_base\",\n        \":fill_functor\",\n        \":typed_conditional_accumulator_base\",\n    ],\n)\n\ncc_library(\n    name = \"sparse_conditional_accumulator\",\n    hdrs = [\"sparse_conditional_accumulator.h\"],\n    deps = [\n        \":typed_conditional_accumulator_base\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"tensor_array\",\n    srcs = [\"tensor_array.cc\"],\n    hdrs = [\"tensor_array.h\"],\n    visibility = [\"//visibility:private\"],\n    deps = [\n        \":aggregate_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"resource_variable_ops\",\n    srcs = [\"resource_variable_ops.cc\"],\n    hdrs = [\"resource_variable_ops.h\"],\n    deps = [\n        \":dense_update_functor\",\n        \":gather_functor\",\n        \":gather_nd_op\",\n        \":resource_variable_util\",\n        \":scatter_functor\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"resource_variable_util\",\n    srcs = [\"resource_variable_util.cc\"],\n    hdrs = [\"resource_variable_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_list\",\n    srcs = [\"tensor_list.cc\"],\n    hdrs = [\"tensor_list.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/framework:tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:refcount\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"list_kernels\",\n    srcs = [\"list_kernels.cc\"],\n    hdrs = [\"list_kernels.h\"],\n    gpu_srcs = [\n        \"list_kernels.cu.cc\",\n        \"list_kernels.h\",\n    ],\n    deps = [\n        \":concat_lib\",\n        \":fill_functor\",\n        \":tensor_list\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/stream_executor\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"tensor_map\",\n    srcs = [\"tensor_map.cc\"],\n    hdrs = [\"tensor_map.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/framework:tensor_shape_proto_cc\",\n        \"//tensorflow/core/lib/core:refcount\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"map_kernels\",\n    srcs = [\"map_kernels.cc\"],\n    hdrs = [\"map_kernels.h\"],\n    deps = [\n        \":concat_lib\",\n        \":fill_functor\",\n        \":tensor_map\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"tensor_map_test\",\n    size = \"small\",\n    srcs = [\n        \"tensor_map_test.cc\",\n    ],\n    tags = [\"nomsan\"],  # b/163222155\n    deps = [\n        \":tensor_map\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/framework:tensor_testutil\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"fact_op\",\n    prefix = \"fact_op\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"function_ops\",\n    prefix = \"function_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"functional_ops\",\n    prefix = \"functional_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"partitioned_function_ops\",\n    prefix = \"partitioned_function_ops\",\n    deps = [\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/grappler:grappler_item\",\n        \"//tensorflow/core/grappler/clusters:virtual_cluster\",\n        \"//tensorflow/core/grappler/optimizers:meta_optimizer\",\n        \"//tensorflow/core/grappler/utils:functions\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n        \"//tensorflow/stream_executor:stream\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"eigen_test\",\n    size = \"small\",\n    srcs = [\n        \"eigen_activations_test.cc\",\n        \"eigen_attention_test.cc\",\n        \"eigen_backward_cuboid_convolutions_test.cc\",\n        \"eigen_backward_spatial_convolutions_test.cc\",\n        \"eigen_pooling_test.cc\",\n        \"eigen_spatial_convolutions_test.cc\",\n    ],\n    deps = [\n        \":eigen_helpers\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\n# Conditional test target generation is not supported by the \"tf_cc_tests\" macro\n# (can't add 'select' to the srcs field, type 'select' is not iterable).\ntf_cc_test(\n    name = \"eigen_mkldnn_contraction_kernel_test\",\n    size = \"small\",\n    srcs = select({\n        \"//tensorflow:android_x86\": [],\n        \"//tensorflow:arm_any\": [],\n        \"//tensorflow:fuchsia_x86_64\": [],\n        \"//tensorflow:ios\": [],\n        \"//tensorflow:linux_ppc64le\": [],\n        \"//tensorflow:linux_s390x\": [],\n        \":no_mkldnn_contraction_kernel\": [],\n        \"//conditions:default\": [\"eigen_mkldnn_contraction_kernel_test.cc\"],\n    }),\n    tags = [\"mkldnn_contraction_kernel\"],\n    deps = [\n        \":eigen_contraction_kernel\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"eigen_benchmark\",\n    testonly = 1,\n    hdrs = [\n        \"eigen_benchmark.h\",\n        \":eigen_helpers\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"eigen_benchmark_cpu_test\",\n    srcs = [\"eigen_benchmark_cpu_test.cc\"],\n    deps = [\n        \":eigen_benchmark\",\n        \":eigen_helpers\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"basic_ops_benchmark_test\",\n    size = \"small\",\n    srcs = [\n        \"basic_ops_benchmark_test.cc\",\n    ],\n    deps = [\n        \":math\",\n        \":ops_util\",\n        \":state\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"io\",\n    deps = [\n        \":fixed_length_record_reader_op\",\n        \":identity_reader_op\",\n        \":matching_files_op\",\n        \":reader_ops\",\n        \":restore_op\",\n        \":save_op\",\n        \":save_restore_v2_ops\",\n        \":text_line_reader_op\",\n        \":tf_record_reader_op\",\n        \":whole_file_read_ops\",\n    ] + select({\n        \"//tensorflow:fuchsia\": [],\n        \"//conditions:default\": [\":lmdb_reader_op\"],\n    }),\n)\n\nIO_DEPS = [\n    \":ops_util\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    \"//tensorflow/core:reader_base\",\n    \"//tensorflow/core/util/tensor_bundle\",\n]\n\ntf_kernel_library(\n    name = \"fixed_length_record_reader_op\",\n    prefix = \"fixed_length_record_reader_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"identity_reader_op\",\n    prefix = \"identity_reader_op\",\n    deps = IO_DEPS + [\"@com_google_absl//absl/strings\"],\n)\n\ntf_kernel_library(\n    name = \"lmdb_reader_op\",\n    prefix = \"lmdb_reader_op\",\n    deps = IO_DEPS + [\n        \"@lmdb\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"matching_files_op\",\n    prefix = \"matching_files_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"reader_ops\",\n    prefix = \"reader_ops\",\n    deps = IO_DEPS,\n)\n\nSAVE_RESTORE_DEPS = [\n    \":checkpoint_callback_manager\",\n    \":save_restore_tensor\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core/util/tensor_bundle\",\n]\n\ntf_kernel_library(\n    name = \"restore_op\",\n    prefix = \"restore_op\",\n    deps = SAVE_RESTORE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"save_op\",\n    prefix = \"save_op\",\n    deps = SAVE_RESTORE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"checkpoint_callback_manager\",\n    srcs = [\n        \"checkpoint_callback_manager.cc\",\n    ],\n    hdrs = [\n        \"checkpoint_callback_manager.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/platform:regexp\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"checkpoint_callback_manager_test\",\n    size = \"small\",\n    srcs = [\"checkpoint_callback_manager_test.cc\"],\n    deps = [\n        \":checkpoint_callback_manager\",\n        \":io\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"save_restore_v2_ops\",\n    prefix = \"save_restore_v2_ops\",\n    deps = SAVE_RESTORE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"text_line_reader_op\",\n    prefix = \"text_line_reader_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"tf_record_reader_op\",\n    prefix = \"tf_record_reader_op\",\n    deps = IO_DEPS,\n)\n\ntf_kernel_library(\n    name = \"whole_file_read_ops\",\n    prefix = \"whole_file_read_ops\",\n    deps = IO_DEPS + [\"@com_google_absl//absl/strings\"],\n)\n\ntf_cc_tests(\n    name = \"bonus2_tests\",\n    size = \"small\",\n    srcs = [\n        \"merge_v2_checkpoints_op_test.cc\",\n        \"restore_op_test.cc\",\n        \"restore_v2_op_test.cc\",\n        \"save_op_test.cc\",\n        \"save_v2_op_test.cc\",\n    ],\n    deps = [\n        \":io\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/util/tensor_bundle\",\n    ],\n)\n\ncc_library(\n    name = \"logging\",\n    deps = [\n        \":logging_ops\",\n        \":summary_audio_op\",\n        \":summary_image_op\",\n        \":summary_tensor_op\",\n    ],\n)\n\nLOGGING_DEPS = [\n    \"@com_google_absl//absl/strings\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:protos_all_cc\",\n    # TODO(b/162630222): remove this dependency.\n    \"//tensorflow/c/kernels:histogram_summary_op\",\n    \"//tensorflow/c/kernels:merge_summary_op\",\n    \"//tensorflow/c/kernels:summary_op\",\n    \"//tensorflow/core/util:determinism_for_kernels\",\n]\n\ntf_kernel_library(\n    name = \"logging_ops\",\n    prefix = \"logging_ops\",\n    deps = LOGGING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"summary_audio_op\",\n    prefix = \"summary_audio_op\",\n    deps = LOGGING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"summary_image_op\",\n    prefix = \"summary_image_op\",\n    deps = LOGGING_DEPS + [\"//tensorflow/core/lib/png:png_io\"],\n)\n\n# TODO(b/162630222): remove this target\ncc_library(\n    name = \"summary_op\",\n    deps = [\n        \"//tensorflow/c/kernels:histogram_summary_op\",\n        \"//tensorflow/c/kernels:merge_summary_op\",\n        \"//tensorflow/c/kernels:summary_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"summary_tensor_op\",\n    prefix = \"summary_tensor_op\",\n    deps = LOGGING_DEPS,\n)\n\ntf_cc_tests(\n    name = \"bonus3_tests\",\n    size = \"small\",\n    srcs = [\n        \"logging_ops_test.cc\",\n        \"summary_audio_op_test.cc\",\n        \"summary_image_op_test.cc\",\n        \"summary_op_test.cc\",\n        \"summary_tensor_op_test.cc\",\n    ],\n    deps = [\n        \":logging\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/platform:status_matchers\",\n        \"//tensorflow/core/util:determinism_test_util\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"manip\",\n    deps = [\n        \":roll_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"roll_op\",\n    srcs = [\"roll_op.cc\"],\n    hdrs = [\"roll_op.h\"],\n    gpu_srcs = [\n        \"roll_op_gpu.cu.cc\",\n        \"roll_op.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"roll_op_test\",\n    size = \"small\",\n    srcs = [\"roll_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":roll_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"resource_ops_test\",\n    size = \"small\",\n    srcs = [\"resource_ops_test.cc\"],\n    deps = [\n        \":dense_update_functor\",\n        \":ops_testutil\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"lookup_ops_test\",\n    size = \"small\",\n    srcs = [\"lookup_ops_test.cc\"],\n    deps = [\n        \":lookup_table_op\",\n        \":ops_testutil\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\nMATH_DEPS = [\n    \":fill_functor\",\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:math_grad\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//tensorflow/core/framework:op_requires\",\n    \"//third_party/eigen3\",\n]\n\ntf_kernel_library(\n    name = \"sparse_matmul_op\",\n    defines = select({\n        \":xsmm\": [\"TENSORFLOW_USE_LIBXSMM\"],\n        \"//conditions:default\": [],\n    }),\n    prefix = \"sparse_matmul_op\",\n    deps = MATH_DEPS + [\":eigen_contraction_kernel\"] + select({\n        \":xsmm\": [\n            \"@libxsmm_archive//:xsmm_avx\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\ncc_library(\n    name = \"math\",\n    deps = [\n        \":aggregate_ops\",\n        \":argmax_op\",\n        \":betainc_op\",\n        \":bincount_op\",\n        \":bucketize_op\",\n        \":cast_op\",\n        \":check_numerics_op\",\n        \":cross_op\",\n        \":cwise_op\",\n        \":fft_ops\",\n        \":histogram_op\",\n        \":matmul_op\",\n        \":nextafter_op\",\n        \":population_count_op\",\n        \":reduction_ops\",\n        \":scan_ops\",\n        \":segment_reduction_ops\",\n        \":sequence_ops\",\n        \":sparse_matmul_op\",\n        \"//tensorflow/core/kernels/special_math:special_math_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"aggregate_ops\",\n    prefix = \"aggregate_ops\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"argmax_op\",\n    prefix = \"argmax_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"batch_matmul_op\",\n    deps = [\":matmul_op\"],\n)\n\ntf_kernel_library(\n    name = \"matmul_op\",\n    # <prefix>*impl.h are excluded by default from the CPU build, add explicitly.\n    hdrs = [\"matmul_op_impl.h\"],\n    defines = select({\n        \":xsmm\": [\"TENSORFLOW_USE_LIBXSMM\"],\n        \"//conditions:default\": [],\n    }),\n    prefix = \"matmul_op\",\n    deps = MATH_DEPS + [\n        \":eigen_contraction_kernel\",\n        \":fused_eigen_output_kernels\",\n    ] + select({\n        \":xsmm\": [\"@libxsmm_archive//:xsmm_avx\"],\n        \"//conditions:default\": [],\n    }) + mkl_deps() + if_cuda([\n        \"//tensorflow/core/platform/default/build_config:cublas_plugin\",\n    ]) + if_cuda_or_rocm([\":gpu_utils\"]),\n)\n\ntf_kernel_library(\n    name = \"betainc_op\",\n    prefix = \"betainc_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"bucketize_op\",\n    gpu_srcs = [\"gpu_device_array.h\"],\n    prefix = \"bucketize_op\",\n    deps = ARRAY_DEPS,\n)\n\ntf_kernel_library(\n    name = \"cast_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"cast_op\",\n    deps = MATH_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:cast_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"check_numerics_op\",\n    prefix = \"check_numerics_op\",\n    deps = MATH_DEPS + [\"//tensorflow/core:framework_internal\"],\n)\n\ntf_kernel_library(\n    name = \"cross_op\",\n    prefix = \"cross_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"cwise_op\",\n    copts = if_mlir_generated_cpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_CPU_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_experimental_kernels_enabled([\n        \"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\",\n    ]) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_cpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_CPU_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_experimental_kernels_enabled([\n        \"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\",\n    ]) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"cwise_op\",\n    deps = MATH_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:cwise_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"nextafter_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"nextafter_op\",\n    deps = MATH_DEPS + [\n        \":cwise_op\",\n        \"//tensorflow/core/kernels/mlir_generated:nextafter_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"population_count_op\",\n    prefix = \"population_count_op\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"fft_ops\",\n    prefix = \"fft_ops\",\n    deps = MATH_DEPS + [\n    ] + if_cuda([\n        \"//tensorflow/core/platform/default/build_config:cufft_plugin\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"reduction_ops\",\n    gpu_srcs = [\"reduction_gpu_kernels.cu.h\"],\n    prefix = \"reduction_ops\",\n    deps = MATH_DEPS + [\n        \":gpu_prim_hdrs\",\n        \":transpose_functor\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"segment_reduction_ops\",\n    prefix = \"segment_reduction_ops\",\n    deps = MATH_DEPS + [\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda_or_rocm([\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"scan_ops\",\n    srcs = [\"scan_ops.cc\"],\n    hdrs = [\"scan_ops.h\"],\n    gpu_srcs = [\n        \"scan_ops.h\",\n        \"scan_ops_gpu.h\",\n        \"scan_ops_gpu_double.cu.cc\",\n        \"scan_ops_gpu_float.cu.cc\",\n        \"scan_ops_gpu_half.cu.cc\",\n        \"scan_ops_gpu_int.cu.cc\",\n    ],\n    deps = MATH_DEPS + [\":gpu_prim_hdrs\"],\n)\n\ntf_kernel_library(\n    name = \"sequence_ops\",\n    prefix = \"sequence_ops\",\n    deps = MATH_DEPS,\n)\n\ntf_kernel_library(\n    name = \"unary_ops_composition\",\n    prefix = \"unary_ops_composition\",\n    deps = MATH_DEPS + [\n        \":cwise_op\",\n        \":relu_op\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sequence_ops_test\",\n    size = \"small\",\n    srcs = [\"sequence_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sequence_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"cast_op_test\",\n    size = \"small\",\n    srcs = [\"cast_op_test.cc\"],\n    deps = [\n        \":cast_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"cross_op_test\",\n    size = \"small\",\n    srcs = [\"cross_op_test.cc\"],\n    deps = [\n        \":cross_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"sparse_tests\",\n    size = \"small\",\n    srcs = [\n        \"sparse_add_op_test.cc\",\n        \"sparse_dense_binary_op_shared_test.cc\",\n        \"sparse_reduce_sum_op_test.cc\",\n    ],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sparse_add_op\",\n        \":sparse_dense_binary_op_shared\",\n        \":sparse_reduce_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"cwise_ops_test\",\n    size = \"small\",\n    srcs = [\"cwise_ops_test.cc\"],\n    deps = [\n        \":cwise_op\",\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/framework:bounds_check\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"unary_ops_composition_test\",\n    size = \"small\",\n    srcs = [\"unary_ops_composition_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":unary_ops_composition\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"matmul_op_test\",\n    size = \"small\",\n    srcs = [\"matmul_op_test.cc\"],\n    deps = [\n        \":matmul_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_absl//absl/algorithm:container\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"scan_ops_test\",\n    size = \"small\",\n    srcs = [\"scan_ops_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scan_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"reduction_ops_test\",\n    size = \"small\",\n    srcs = [\"reduction_ops_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    deps = [\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":reduction_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"segment_reduction_ops_test\",\n    size = \"small\",\n    srcs = [\"segment_reduction_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":segment_reduction_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"immutable_constant_op_test\",\n    srcs = [\"immutable_constant_op_test.cc\"],\n    deps = [\n        \":array\",\n        \":immutable_constant_op\",\n        \":matmul_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":random_shuffle_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"sparse_matmul_op_test\",\n    size = \"small\",\n    srcs = [\"sparse_matmul_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sparse_matmul_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"split_op_test\",\n    size = \"small\",\n    srcs = [\"split_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":split_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"split_v_op_test\",\n    size = \"small\",\n    srcs = [\"split_v_op_test.cc\"],\n    tags = [\n        \"no_windows\",  # split_v_op uses lrand48 which does not exist on Windows\n    ],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":split_v_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"diag_op_test\",\n    size = \"small\",\n    srcs = [\"diag_op_test.cc\"],\n    deps = [\n        \":diag_op\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# conv_grad_ops currently has to be built with conv_ops*.\n# TODO(josh11b, zhengxq): put these a separate libraries in \":nn\" below once\n# conv_ops_gpu.h has be separated into its own library.\ntf_kernel_library(\n    name = \"conv_ops\",\n    srcs = [\n        \"conv_grad_filter_ops.cc\",\n        \"conv_grad_input_ops_double.cc\",\n        \"conv_grad_input_ops_float.cc\",\n        \"conv_grad_input_ops_half.cc\",\n        \"conv_grad_input_ops_int32.cc\",\n        \"conv_grad_input_ops.cc\",\n        \"conv_grad_ops_3d.cc\",\n        \"deep_conv2d.cc\",\n    ] + select({\n        \":xsmm_convolutions\": [\"xsmm_conv2d.cc\"],\n        \"//conditions:default\": [],\n    }),\n    hdrs = [\n        \"fill_functor.h\",\n        \"conv_grad_ops.h\",\n        \"conv_grad_input_ops.h\",\n        \"deep_conv2d.h\",\n        \"gemm_functors.h\",\n        \"winograd_transform.h\",\n        \"conv_ops_fused_impl.h\",\n    ] + select({\n        \":xsmm_convolutions\": [\"xsmm_conv2d.h\"],\n        \"//conditions:default\": [],\n    }),\n    defines = select({\n        \":xsmm_convolutions\": [\"TENSORFLOW_USE_LIBXSMM_CONVOLUTIONS\"],\n        \"//conditions:default\": [],\n    }) + select({\n        \":xsmm_backward_convolutions\": [\"TENSORFLOW_USE_LIBXSMM_BACKWARD_CONVOLUTIONS\"],\n        \"//conditions:default\": [],\n    }),\n    prefix = \"conv_ops\",\n    deps = [\n        \":conv_grad_shape_utils\",\n        \":conv_2d\",\n        \":conv_3d\",\n        \":eigen_contraction_kernel\",\n        \":fill_functor\",\n        \":fused_eigen_output_kernels\",\n        \":ops_util\",\n        \"@com_google_absl//absl/base:dynamic_annotations\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/synchronization\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/profiler/lib:scoped_annotation\",\n        \"//tensorflow/core/protobuf:autotuning_proto_cc\",\n        \"//tensorflow/core/util:image_resizer_state\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n    ] + select({\n        \":xsmm_convolutions\": [\n            \"@libxsmm_archive//:xsmm_avx\",\n        ],\n        \"//conditions:default\": [],\n    }) + if_cuda([\n        \"//tensorflow/stream_executor/gpu:gpu_asm_opts\",\n        \"//tensorflow/core/platform/default/build_config:cublas_plugin\",\n        \"//tensorflow/core/platform/default/build_config:cudnn_plugin\",\n        \"//tensorflow/stream_executor:tf_allocator_adapter\",\n        \"//tensorflow/stream_executor:stream_executor_headers\",\n        \"//tensorflow/core/platform:stream_executor\",\n    ]) + if_cuda_or_rocm([\n        \":gpu_utils\",\n        \"//tensorflow/stream_executor/gpu:redzone_allocator\",\n        \"//tensorflow/core/util/autotune_maps:conv_parameters\",\n        \"//tensorflow/core/util/autotune_maps:conv_autotune_maps\",\n    ]),\n)\n\ncc_library(\n    name = \"conv_grad_shape_utils\",\n    srcs = [\n        \"conv_grad_shape_utils.cc\",\n    ],\n    hdrs = [\n        \"conv_grad_shape_utils.h\",\n    ],\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:stringpiece\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"depthwise_conv_op\",\n    srcs = [\"depthwise_conv_op.cc\"],\n    hdrs = [\"depthwise_conv_op.h\"],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"depthwise_conv_op.h\",\n        \"depthwise_conv_op_gpu.h\",\n        \"depthwise_conv_op_gpu_double.cu.cc\",\n        \"depthwise_conv_op_gpu_float.cu.cc\",\n        \"depthwise_conv_op_gpu_half.cu.cc\",\n    ],\n    deps = [\n        \":conv_ops\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n        \"@local_config_cuda//cuda:cudnn_header\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"depthwise_conv_grad_op\",\n    hdrs = [\n        \"depthwise_conv_op.h\",\n    ],\n    prefix = \"depthwise_conv_grad_op\",\n    deps = [\n        \":cast_op\",\n        \":conv_ops\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda([\n        \"@local_config_cuda//cuda:cudnn_header\",\n    ]),\n)\n\ncc_library(\n    name = \"nn\",\n    deps = [\n        \":batch_norm_op\",\n        \":bias_op\",\n        \":conv_ops\",\n        \":data_format_ops\",\n        \":depthwise_conv_grad_op\",\n        \":depthwise_conv_op\",\n        \":dilation_ops\",\n        \":fused_batch_norm_op\",\n        \":in_topk_op\",\n        \":l2loss_op\",\n        \":lrn_op\",\n        \":nth_element_op\",\n        \":relu_op\",\n        \":softmax_op\",\n        \":softplus_op\",\n        \":softsign_op\",\n        \":topk_op\",\n        \":xent_op\",\n    ],\n)\n\n# Kernels for the nodes intented to be added to the graph by the Grappler optimizers.\ncc_library(\n    name = \"grappler\",\n    deps = [\n        \":unary_ops_composition\",\n    ],\n)\n\nNN_DEPS = if_cuda_or_rocm([\":conv_2d\"]) + [\n    \":eigen_contraction_kernel\",\n    \":ops_util\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n    \"//tensorflow/core:nn_grad\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \"//third_party/eigen3\",\n]\n\ntf_kernel_library(\n    name = \"batch_norm_op\",\n    prefix = \"batch_norm_op\",\n    deps = NN_DEPS,\n)\n\ntf_kernel_library(\n    name = \"data_format_ops\",\n    prefix = \"data_format_ops\",\n    deps = NN_DEPS,\n)\n\ntf_kernel_library(\n    name = \"bias_op\",\n    prefix = \"bias_op\",\n    deps = NN_DEPS + [\n        \":redux_functor\",\n        \"//tensorflow/core/profiler/lib:scoped_annotation\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]) + if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/stream_executor/cuda:cuda_stream\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"fused_batch_norm_op\",\n    prefix = \"fused_batch_norm_op\",\n    deps = NN_DEPS + [\n        \":fill_functor\",\n        \":redux_functor\",\n        \":transpose_functor\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda([\n        \"//tensorflow/core/platform:stream_executor\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"in_topk_op\",\n    prefix = \"in_topk_op\",\n    deps = NN_DEPS + [\":reduction_ops\"],\n)\n\ntf_kernel_library(\n    name = \"lrn_op\",\n    prefix = \"lrn_op\",\n    deps = NN_DEPS + if_rocm([\":conv_ops_gpu_hdrs\"]),\n)\n\ntf_kernel_library(\n    name = \"relu_op\",\n    copts = if_mlir_generated_experimental_kernels_enabled(\n        [\"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_experimental_kernels_enabled(\n        [\"-DMLIR_GENERATED_EXPERIMENTAL_KERNELS_ENABLED\"],\n    ) + if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"relu_op\",\n    deps = NN_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:relu_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"softmax_op\",\n    prefix = \"softmax_op\",\n    deps = NN_DEPS + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]) + [\":gpu_prim_hdrs\"],\n)\n\ntf_kernel_library(\n    name = \"softplus_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"softplus_op\",\n    deps = NN_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:softplus_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"softsign_op\",\n    copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    # *.cu.cc sources are compiled with gpu_copts instead of copts.\n    gpu_copts = if_mlir_generated_gpu_kernels_enabled(\n        [\"-DMLIR_GENERATED_GPU_KERNELS_ENABLED\"],\n    ),\n    prefix = \"softsign_op\",\n    deps = NN_DEPS + [\n        \"//tensorflow/core/kernels/mlir_generated:softsign_op\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"topk_op\",\n    srcs = [\"topk_op.cc\"],\n    hdrs = [\"topk_op.h\"],\n    gpu_srcs = [\n        \"topk_op.h\",\n        \"topk_op_gpu.h\",\n        \"topk_op_gpu_double.cu.cc\",\n        \"topk_op_gpu_float.cu.cc\",\n        \"topk_op_gpu_half.cu.cc\",\n        \"topk_op_gpu_uint64.cu.cc\",\n        \"topk_op_gpu_int64.cu.cc\",\n        \"topk_op_gpu_uint32.cu.cc\",\n        \"topk_op_gpu_int32.cu.cc\",\n        \"topk_op_gpu_int16.cu.cc\",\n        \"topk_op_gpu_uint16.cu.cc\",\n        \"topk_op_gpu_int8.cu.cc\",\n        \"topk_op_gpu_uint8.cu.cc\",\n    ],\n    deps = NN_DEPS + [\":gpu_prim_hdrs\"],\n)\n\ntf_kernel_library(\n    name = \"nth_element_op\",\n    prefix = \"nth_element_op\",\n    deps = NN_DEPS,\n)\n\ntf_kernel_library(\n    name = \"xent_op\",\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    prefix = \"xent_op\",\n    deps = NN_DEPS + [\"//tensorflow/core/util:determinism_for_kernels\"],\n)\n\ntf_kernel_library(\n    name = \"bincount_op\",\n    prefix = \"bincount_op\",\n    deps = [\n        \":fill_functor\",\n        \":gpu_prim_hdrs\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"histogram_op\",\n    prefix = \"histogram_op\",\n    deps = [\n        \":gpu_prim_hdrs\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"l2loss_op\",\n    prefix = \"l2loss_op\",\n    deps = [\n        \":gpu_prim_hdrs\",\n        \":reduction_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:nn_grad\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"lrn_op_test\",\n    srcs = [\"lrn_op_test.cc\"],\n    deps = [\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":xent_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"xent_op_test\",\n    srcs = [\"xent_op_test.cc\"],\n    deps = [\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":xent_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"nn_ops_test\",\n    srcs = [\"nn_ops_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":nn\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":pooling_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"pooling_ops\",\n    srcs = [\n        \"avgpooling_op.cc\",\n        \"cudnn_pooling_gpu.cc\",\n        \"fractional_avg_pool_op.cc\",\n        \"fractional_max_pool_op.cc\",\n        \"fractional_pool_common.cc\",\n        \"maxpooling_op.cc\",\n        \"pooling_ops_3d.cc\",\n        \"pooling_ops_common.cc\",\n    ],\n    hdrs = [\n        \"avgpooling_op.h\",\n        \"cudnn_pooling_gpu.h\",\n        \"fractional_pool_common.h\",\n        \"maxpooling_op.h\",\n        \"pooling_ops_3d.h\",\n        \"pooling_ops_common.h\",\n    ],\n    gpu_srcs = [\n        \"avgpooling_op.h\",\n        \"avgpooling_op_gpu.cu.cc\",\n        \"maxpooling_op.h\",\n        \"maxpooling_op_gpu.cu.cc\",\n        \"maxpooling_op_gpu.h\",\n        \"pooling_ops_common.h\",\n        \"pooling_ops_common_gpu.h\",\n        \"pooling_ops_3d_gpu.h\",\n        \"pooling_ops_3d_gpu.cu.cc\",\n    ],\n    deps = [\n        \":conv_2d\",\n        \":conv_3d\",\n        \":conv_ops\",\n        \":eigen_helpers\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/platform:stream_executor\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"fake_quant_ops\",\n    srcs = [\"fake_quant_ops.cc\"],\n    hdrs = [\"fake_quant_ops_functor.h\"],\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    gpu_srcs = [\n        \"fake_quant_ops_gpu.cu.cc\",\n        \"fake_quant_ops_functor.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"pooling_ops_hdrs\",\n    hdrs = [\n        \"avgpooling_op.h\",\n        \"maxpooling_op.h\",\n        \"pooling_ops_common.h\",\n    ],\n    deps = [\n        \":eigen_helpers\",\n        \":ops_util_hdrs\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dilation_ops\",\n    prefix = \"dilation_ops\",\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"batch_space_ops\",\n    srcs = [\n        \"batchtospace_op.cc\",\n        \"spacetobatch_functor.cc\",\n        \"spacetobatch_functor.h\",\n        \"spacetobatch_op.cc\",\n    ],\n    gpu_srcs = [\n        \"spacetobatch_functor.h\",\n        \"spacetobatch_functor_gpu.cu.cc\",\n    ],\n    visibility = [\":friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:overflow\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"spacetobatch_benchmark_test\",\n    srcs = [\"spacetobatch_benchmark_test.cc\"],\n    deps = [\n        \":batch_space_ops\",\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"depth_space_ops\",\n    srcs = [\n        \"depthtospace_op.cc\",\n        \"spacetodepth_op.cc\",\n    ],\n    hdrs = [\n        \"depthtospace_op.h\",\n        \"spacetodepth_op.h\",\n    ],\n    gpu_srcs = [\n        \"depthtospace_op.h\",\n        \"depthtospace_op_gpu.cu.cc\",\n        \"spacetodepth_op.h\",\n        \"spacetodepth_op_gpu.cu.cc\",\n    ],\n    visibility = [\":friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"parsing\",\n    deps = [\n        \":decode_compressed_op\",\n        \":decode_csv_op\",\n        \":decode_padded_raw_op\",\n        \":decode_raw_op\",\n        \":example_parsing_ops\",\n        \":parse_tensor_op\",\n        \":string_to_number_op\",\n    ],\n)\n\nPARSING_DEPS = [\n    \"@com_google_absl//absl/base\",\n    \"//tensorflow/core:core_cpu_internal\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:protos_all_cc\",\n]\n\ntf_kernel_library(\n    name = \"decode_csv_op\",\n    prefix = \"decode_csv_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"decode_raw_op\",\n    prefix = \"decode_raw_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"decode_padded_raw_op\",\n    prefix = \"decode_padded_raw_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"decode_compressed_op\",\n    prefix = \"decode_compressed_op\",\n    deps = [\n        \"//tensorflow/core:lib_internal\",\n    ] + PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"example_parsing_ops\",\n    prefix = \"example_parsing_ops\",\n    deps = PARSING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"parse_tensor_op\",\n    prefix = \"parse_tensor_op\",\n    deps = PARSING_DEPS,\n)\n\ntf_cc_test(\n    name = \"parse_tensor_test\",\n    srcs = [\"parse_tensor_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":parse_tensor_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_to_number_op\",\n    prefix = \"string_to_number_op\",\n    deps = PARSING_DEPS,\n)\n\ncc_library(\n    name = \"random_ops\",\n    deps = [\n        \":random_op\",\n        \":random_shuffle_op\",\n    ],\n)\n\nRANDOM_OPS_DEPS = [\n    \"//tensorflow/core:core_cpu\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"random_op\",\n    prefix = \"random_op\",\n    deps = RANDOM_OPS_DEPS,\n)\n\ntf_kernel_library(\n    name = \"random_shuffle_op\",\n    prefix = \"random_shuffle_op\",\n    deps = RANDOM_OPS_DEPS,\n)\n\ntf_cuda_cc_test(\n    name = \"random_op_test\",\n    size = \"small\",\n    srcs = [\"random_op_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":random_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"stateful_random_ops_header\",\n    hdrs = [\"stateful_random_ops.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ncc_library(\n    name = \"stateless_random_ops_v2_header\",\n    hdrs = [\"stateless_random_ops_v2.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stateful_random_ops\",\n    prefix = \"stateful_random_ops\",\n    deps = [\n        \":dense_update_functor\",\n        \":fill_functor\",\n        \":gather_functor\",\n        \":mutex_ops\",\n        \":random_op\",\n        \":resource_variable_ops\",\n        \":scatter_functor\",\n        \":state\",\n        \":stateful_random_ops_header\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:variant\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stateless_random_gamma_op\",\n    prefix = \"stateless_random_gamma_op\",\n    deps = [\n        \":stateless_random_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"stateless_random_ops\",\n    prefix = \"stateless_random_ops\",\n    deps = [\n        \":random_op\",\n        \":random_poisson_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n    ],\n)\n\ncc_library(\n    name = \"random_index_shuffle\",\n    srcs = [\"random_index_shuffle.cc\"],\n    hdrs = [\"random_index_shuffle.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"random_index_shuffle_test\",\n    srcs = [\"random_index_shuffle_test.cc\"],\n    deps = [\n        \":random_index_shuffle\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"random_index_shuffle_ops\",\n    prefix = \"random_index_shuffle_ops\",\n    deps = [\n        \":random_index_shuffle\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ],\n)\n\ncc_library(\n    name = \"required\",\n    deps = [\n        \":no_op\",\n        \":sendrecv_ops\",\n    ],\n)\n\nREQUIRED_DEPS = [\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:protos_all_cc\",\n]\n\ntf_kernel_library(\n    name = \"no_op\",\n    prefix = \"no_op\",\n    deps = REQUIRED_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sendrecv_ops\",\n    prefix = \"sendrecv_ops\",\n    deps = REQUIRED_DEPS + [\n        \"//tensorflow/core/profiler/lib:traceme\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sendrecv_ops_test\",\n    srcs = [\"sendrecv_ops_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),  # Required for benchmarking\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sendrecv_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"sparse\",\n    deps = [\n        \":deserialize_sparse_string_op\",\n        \":deserialize_sparse_variant_op\",\n        \":serialize_sparse_op\",\n        \":sparse_add_grad_op\",\n        \":sparse_add_op\",\n        \":sparse_concat_op\",\n        \":sparse_cross_op\",\n        \":sparse_dense_binary_op_shared\",\n        \":sparse_fill_empty_rows_op\",\n        \":sparse_reduce_op\",\n        \":sparse_reorder_op\",\n        \":sparse_reshape_op\",\n        \":sparse_slice_grad_op\",\n        \":sparse_slice_op\",\n        \":sparse_softmax\",\n        \":sparse_sparse_binary_op_shared\",\n        \":sparse_split_op\",\n        \":sparse_tensor_dense_add_op\",\n        \":sparse_tensor_dense_matmul_op\",\n        \":sparse_tensors_map_ops\",\n        \":sparse_to_dense_op\",\n        \":sparse_xent_op\",\n    ],\n)\n\nSPARSE_DEPS = [\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n]\n\ntf_kernel_library(\n    name = \"sparse_add_grad_op\",\n    prefix = \"sparse_add_grad_op\",\n    deps = SPARSE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_add_op\",\n    prefix = \"sparse_add_op\",\n    deps = SPARSE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_concat_op\",\n    prefix = \"sparse_concat_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_device_array\",\n        \":gpu_prim_helpers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_fill_empty_rows_op\",\n    prefix = \"sparse_fill_empty_rows_op\",\n    deps = SPARSE_DEPS + [\":gpu_prim_hdrs\"] + if_cuda_or_rocm([\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_cross_op\",\n    prefix = \"sparse_cross_op\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_reduce_op\",\n    prefix = \"sparse_reduce_op\",\n    deps = SPARSE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"sparse_dense_binary_op_shared\",\n    prefix = \"sparse_dense_binary_op_shared\",\n    deps = SPARSE_DEPS + [\n        \":cwise_op\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_sparse_binary_op_shared\",\n    prefix = \"sparse_sparse_binary_op_shared\",\n    deps = SPARSE_DEPS + [\n        \":cwise_op\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_reorder_op\",\n    prefix = \"sparse_reorder_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n        \":gpu_prim_helpers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_reshape_op\",\n    prefix = \"sparse_reshape_op\",\n    deps = SPARSE_DEPS + [\n        \":reshape_util\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_slice_grad_op\",\n    prefix = \"sparse_slice_grad_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_prim_hdrs\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_slice_op\",\n    prefix = \"sparse_slice_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_device_array\",\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_softmax\",\n    prefix = \"sparse_softmax\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_split_op\",\n    prefix = \"sparse_split_op\",\n    deps = SPARSE_DEPS + if_cuda_or_rocm([\n        \":gpu_device_array\",\n        \":gpu_prim_helpers\",\n    ]) + if_cuda([\n        \"//tensorflow/core/util:cuda_solvers\",\n    ]) + if_rocm([\n        \"//tensorflow/core/util:rocm_solvers\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_tensor_dense_add_op\",\n    prefix = \"sparse_tensor_dense_add_op\",\n    deps = SPARSE_DEPS + [\n        \":scatter_functor\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_tensor_dense_matmul_op\",\n    prefix = \"sparse_tensor_dense_matmul_op\",\n    deps = SPARSE_DEPS + [\n        \":fill_functor\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_to_dense_op\",\n    prefix = \"sparse_to_dense_op\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n    ] + if_cuda_or_rocm([\n        \":gpu_utils\",\n        \"//tensorflow/core/platform:stream_executor\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"sparse_xent_op\",\n    gpu_copts = tf_disable_ptxas_warning_flags(),\n    prefix = \"sparse_xent_op\",\n    deps = SPARSE_DEPS + [\n        \"//third_party/eigen3\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n    ] + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]) + if_cuda([\n        \"@local_config_cuda//cuda:cub_headers\",\n    ]) + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"serialize_sparse_op\",\n    prefix = \"serialize_sparse_op\",\n    deps = SPARSE_DEPS + [\n        \":reshape_util\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"deserialize_sparse_string_op\",\n    prefix = \"deserialize_sparse_string_op\",\n    deps = SPARSE_DEPS + [\n        \":reshape_util\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"deserialize_sparse_variant_op\",\n    prefix = \"deserialize_sparse_variant_op\",\n    deps = SPARSE_DEPS + [\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sparse_tensors_map_ops\",\n    prefix = \"sparse_tensors_map_ops\",\n    deps = SPARSE_DEPS,\n)\n\ntf_cuda_cc_tests(\n    name = \"sparse2_tests\",\n    size = \"small\",\n    srcs = [\n        \"sparse_tensor_dense_matmul_op_test.cc\",\n        \"sparse_to_dense_op_test.cc\",\n        \"sparse_xent_op_test.cc\",\n    ],\n    deps = [\n        \":host_constant_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":sparse\",\n        \":xent_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"loss_updaters\",\n    hdrs = [\n        \"hinge-loss.h\",\n        \"logistic-loss.h\",\n        \"loss.h\",\n        \"poisson-loss.h\",\n        \"smooth-hinge-loss.h\",\n        \"squared-loss.h\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework_headers_lib\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"loss_test\",\n    size = \"small\",\n    srcs = [\"loss_test.cc\"],\n    deps = [\n        \":loss_updaters\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"sdca_ops_test\",\n    size = \"small\",\n    srcs = [\"sdca_ops_test.cc\"],\n    linkstatic = tf_kernel_tests_linkstatic(),  # Required for benchmarking\n    deps = [\n        \":ops_util\",\n        \"//tensorflow/core:all_kernels\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"sdca_ops\",\n    prefix = \"sdca_ops\",\n    deps = [\n        \":loss_updaters\",\n        \":sdca_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/strings:str_format\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"sdca_internal\",\n    srcs = [\"sdca_internal.cc\"],\n    hdrs = [\"sdca_internal.h\"],\n    deps = [\n        \":eigen_contraction_kernel\",\n        \":loss_updaters\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"state\",\n    deps = [\n        \":count_up_to_op\",\n        \":dense_update_ops\",\n        \":scatter_nd_op\",\n        \":scatter_op\",\n        \":variable_ops\",\n    ],\n)\n\nSTATE_DEPS = [\n    \":assign_op\",\n    \"//tensorflow/core/framework:bounds_check\",\n    \":fill_functor\",\n    \":scatter_functor\",\n    \"//third_party/eigen3\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"count_up_to_op\",\n    prefix = \"count_up_to_op\",\n    deps = STATE_DEPS + [\":variable_ops\"],\n)\n\ntf_kernel_library(\n    name = \"dense_update_ops\",\n    prefix = \"dense_update_ops\",\n    deps = STATE_DEPS + [\":dense_update_functor\"],\n)\n\ntf_kernel_library(\n    name = \"scatter_op\",\n    prefix = \"scatter_op\",\n    deps = STATE_DEPS + [\"//tensorflow/core/util:determinism_for_kernels\"],\n)\n\ntf_kernel_library(\n    name = \"count_ops\",\n    prefix = \"count_ops\",\n    deps = STATE_DEPS + [\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"//tensorflow/core/framework:op_requires\",\n    ],\n)\n\ntf_cc_test(\n    name = \"count_ops_test\",\n    size = \"small\",\n    srcs = [\"count_ops_test.cc\"],\n    deps = [\n        \":count_ops\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"scatter_nd_util\",\n    srcs = [\"scatter_nd_util.cc\"],\n    hdrs = [\"scatter_nd_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"scatter_nd_op\",\n    srcs = [\n        \"scatter_nd_op.cc\",\n        \"scatter_nd_op_cpu_impl_0.cc\",\n        \"scatter_nd_op_cpu_impl_1.cc\",\n        \"scatter_nd_op_cpu_impl_2.cc\",\n        \"scatter_nd_op_cpu_impl_3.cc\",\n        \"scatter_nd_op_cpu_impl_4.cc\",\n        \"scatter_nd_op_cpu_impl_5.cc\",\n        \"scatter_nd_op_cpu_impl_6.cc\",\n        \"scatter_nd_op_cpu_impl_7.cc\",\n    ],\n    hdrs = [\n        \"scatter_nd_op.h\",\n        \"scatter_nd_op_cpu_impl.h\",\n    ],\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    gpu_srcs = [\n        \"scatter_nd_op.h\",\n        \"scatter_nd_op_gpu.cu.cc\",\n    ],\n    deps = STATE_DEPS + [\n        \":scatter_nd_util\",\n        \":dense_update_functor\",\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \":inplace_ops\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"variable_ops\",\n    prefix = \"variable_ops\",\n    deps = STATE_DEPS,\n)\n\ntf_kernel_library(\n    name = \"mutex_ops\",\n    prefix = \"mutex_ops\",\n    deps = STATE_DEPS + [\":ops_util\"],\n)\n\ntf_cc_test(\n    name = \"scatter_op_test\",\n    size = \"small\",\n    srcs = [\"scatter_op_test.cc\"],\n    deps = [\n        \":fill_functor\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scatter_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"scatter_nd_op_test\",\n    size = \"small\",\n    srcs = [\"scatter_nd_op_test.cc\"],\n    tags = [\"noasan\"],  # http://b/32635055\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":scatter_nd_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"string\",\n    deps = [\n        \":as_string_op\",\n        \":base64_ops\",\n        \":reduce_join_op\",\n        \":regex_full_match_op\",\n        \":regex_replace_op\",\n        \":string_format_op\",\n        \":string_join_op\",\n        \":string_length_op\",\n        \":string_lower_op\",\n        \":string_ngrams_op\",\n        \":string_split_op\",\n        \":string_strip_op\",\n        \":string_to_hash_bucket_op\",\n        \":string_upper_op\",\n        \":substr_op\",\n        \":tensor_to_hash_bucket_op\",\n        \":unicode_ops\",\n        \":unicode_script_op\",\n        \":unsorted_segment_join_op\",\n    ],\n)\n\ncc_library(\n    name = \"string_util\",\n    srcs = [\"string_util.cc\"],\n    hdrs = [\"string_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"@icu//:common\",\n    ],\n)\n\nSTRING_DEPS = [\n    \"//tensorflow/core/framework:bounds_check\",\n    \":string_util\",\n    \"//third_party/eigen3\",\n    \"//tensorflow/core:framework\",\n    \"//tensorflow/core:lib\",\n    \"//tensorflow/core:lib_internal\",\n]\n\ntf_kernel_library(\n    name = \"string_to_hash_bucket_op\",\n    srcs = [\n        \"string_to_hash_bucket_fast_op.cc\",\n        \"string_to_hash_bucket_op.cc\",\n    ],\n    hdrs = [\n        \"string_to_hash_bucket_fast_op.h\",\n        \"string_to_hash_bucket_op.h\",\n    ],\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"tensor_to_hash_bucket_op\",\n    prefix = \"tensor_to_hash_bucket_op\",\n    deps = STRING_DEPS + if_oss(\n        if_cuda([\"@farmhash_gpu_archive//:farmhash_gpu\"]),\n        tf_fingerprint_deps(),\n    ),\n)\n\ntf_kernel_library(\n    name = \"reduce_join_op\",\n    prefix = \"reduce_join_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"unsorted_segment_join_op\",\n    prefix = \"unsorted_segment_join_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"string_format_op\",\n    prefix = \"string_format_op\",\n    deps = STRING_DEPS + [\"@com_google_absl//absl/strings\"],\n)\n\ntf_cc_test(\n    name = \"string_format_op_test\",\n    size = \"small\",\n    srcs = [\"string_format_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":string_format_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_join_op\",\n    prefix = \"string_join_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"string_length_op\",\n    prefix = \"string_length_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"regex_full_match_op\",\n    prefix = \"regex_full_match_op\",\n    deps = STRING_DEPS + [\"@com_googlesource_code_re2//:re2\"],\n)\n\ntf_kernel_library(\n    name = \"regex_replace_op\",\n    prefix = \"regex_replace_op\",\n    deps = STRING_DEPS + [\"@com_googlesource_code_re2//:re2\"],\n)\n\ntf_cc_test(\n    name = \"regex_replace_op_test\",\n    size = \"small\",\n    srcs = [\"regex_replace_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":regex_replace_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_split_op\",\n    prefix = \"string_split_op\",\n    deps = STRING_DEPS,\n)\n\ntf_cc_test(\n    name = \"string_split_op_test\",\n    size = \"small\",\n    srcs = [\"string_split_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":string_split_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_ngrams_op\",\n    srcs = [\"string_ngrams_op.cc\"],\n    deps = STRING_DEPS + [\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"string_ngrams_op_test\",\n    srcs = [\"string_ngrams_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":string_ngrams_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_strip_op\",\n    prefix = \"string_strip_op\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"string_lower_op\",\n    prefix = \"string_lower_op\",\n    deps = STRING_DEPS + [\n        \"@com_google_absl//absl/strings\",\n        \"@icu//:common\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"string_upper_op\",\n    prefix = \"string_upper_op\",\n    deps = STRING_DEPS + [\n        \"@com_google_absl//absl/strings\",\n        \"@icu//:common\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"substr_op\",\n    prefix = \"substr_op\",\n    deps = STRING_DEPS,\n)\n\ntf_cc_test(\n    name = \"substr_op_test\",\n    size = \"small\",\n    srcs = [\"substr_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":substr_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"as_string_op\",\n    prefix = \"as_string_op\",\n    deps = STRING_DEPS,\n)\n\ntf_cc_test(\n    name = \"as_string_op_test\",\n    size = \"small\",\n    srcs = [\"as_string_op_test.cc\"],\n    deps = [\n        \":as_string_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"unicode_ops\",\n    prefix = \"unicode_ops\",\n    deps = [\n        \":string_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n        \"//third_party/icu/data:conversion_data\",\n        \"@icu//:common\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"base64_ops\",\n    prefix = \"base64_ops\",\n    deps = STRING_DEPS,\n)\n\ntf_kernel_library(\n    name = \"training_ops\",\n    prefix = \"training_ops\",\n    deps = [\n        \":training_op_helpers\",\n        \":variable_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"training_ops_test\",\n    size = \"small\",\n    srcs = [\"training_ops_test.cc\"],\n    deps = [\n        \":dense_update_ops\",\n        \":ops_util\",\n        \":training_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"multinomial_op\",\n    prefix = \"multinomial_op\",\n    deps = [\n        \":random_op\",\n        \":random_ops\",\n        \":stateless_random_ops\",\n        \":gpu_prim_hdrs\",\n        \"//third_party/eigen3\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ] + if_cuda_or_rocm([\n        \":reduction_ops\",\n    ]),\n)\n\ntf_cuda_cc_test(\n    name = \"multinomial_op_test\",\n    size = \"small\",\n    srcs = [\"multinomial_op_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":multinomial_op\",\n        \":ops_util\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"parameterized_truncated_normal_op\",\n    gpu_copts = if_not_windows([\n        \"-Wno-pass-failed\",  # clang misses #pragma loop optimizations\n    ]),\n    prefix = \"parameterized_truncated_normal_op\",\n    deps = [\n        \":stateless_random_ops\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"parameterized_truncated_normal_op_test\",\n    size = \"small\",\n    srcs = [\"parameterized_truncated_normal_op_test.cc\"],\n    deps = [\n        \":host_constant_op\",\n        \":ops_util\",\n        \":parameterized_truncated_normal_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"random_binomial_op\",\n    prefix = \"random_binomial_op\",\n    deps = [\n        \":cwise_op\",\n        \":random_op\",\n        \":resource_variable_ops\",\n        \":stateful_random_ops\",\n        \":stateless_random_ops\",\n        \":training_op_helpers\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:random_ops_op_lib\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"random_binomial_op_test\",\n    size = \"small\",\n    srcs = [\"random_binomial_op_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \":random_binomial_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"random_poisson_op\",\n    prefix = \"random_poisson_op\",\n    deps = [\n        \":random_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cuda_cc_test(\n    name = \"random_poisson_op_test\",\n    size = \"small\",\n    srcs = [\"random_poisson_op_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \":random_poisson_op\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"word2vec_kernels\",\n    prefix = \"word2vec_kernels\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:word2vec_ops\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"encode_wav_op\",\n    prefix = \"encode_wav_op\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/framework:bounds_check\",\n    ],\n)\n\ntf_cc_test(\n    name = \"encode_wav_op_test\",\n    size = \"small\",\n    srcs = [\"encode_wav_op_test.cc\"],\n    deps = [\n        \":decode_wav_op\",\n        \":encode_wav_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"decode_wav_op\",\n    prefix = \"decode_wav_op\",\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"decode_wav_op_test\",\n    size = \"small\",\n    srcs = [\"decode_wav_op_test.cc\"],\n    deps = [\n        \":decode_wav_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\nalias(\n    name = \"spectrogram_test_data\",\n    actual = \"//tensorflow/core/kernels/spectrogram_test_data:spectrogram_test_data\",\n    visibility = [\"//visibility:public\"],\n)\n\ncc_library(\n    name = \"spectrogram\",\n    srcs = [\"spectrogram.cc\"],\n    hdrs = [\"spectrogram.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/fft2d:fft2d_headers\",\n        \"@fft2d\",\n    ],\n)\n\ncc_library(\n    name = \"spectrogram_test_utils\",\n    testonly = 1,\n    srcs = [\"spectrogram_test_utils.cc\"],\n    hdrs = [\"spectrogram_test_utils.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n    ],\n)\n\ntf_cc_binary(\n    name = \"spectrogram_convert_test_data\",\n    testonly = 1,\n    srcs = [\"spectrogram_convert_test_data.cc\"],\n    deps = [\n        \":spectrogram_test_utils\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n)\n\ntf_cc_test(\n    name = \"spectrogram_test\",\n    size = \"medium\",\n    srcs = [\"spectrogram_test.cc\"],\n    data = [\":spectrogram_test_data\"],\n    deps = [\n        \":spectrogram\",\n        \":spectrogram_test_utils\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/platform:resource_loader\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"spectrogram_op\",\n    prefix = \"spectrogram_op\",\n    deps = [\n        \":spectrogram\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cuda_cc_test(\n    name = \"spectrogram_op_test\",\n    size = \"small\",\n    srcs = [\"spectrogram_op_test.cc\"],\n    deps = [\n        \":ops_util\",\n        \":spectrogram_op\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"mfcc_dct\",\n    srcs = [\"mfcc_dct.cc\"],\n    hdrs = [\"mfcc_dct.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"mfcc_dct_test\",\n    size = \"small\",\n    srcs = [\"mfcc_dct_test.cc\"],\n    deps = [\n        \":mfcc_dct\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"mfcc_mel_filterbank\",\n    srcs = [\"mfcc_mel_filterbank.cc\"],\n    hdrs = [\"mfcc_mel_filterbank.h\"],\n    copts = tf_copts(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"mfcc_mel_filterbank_test\",\n    size = \"small\",\n    srcs = [\"mfcc_mel_filterbank_test.cc\"],\n    deps = [\n        \":mfcc_mel_filterbank\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"mfcc\",\n    srcs = [\"mfcc.cc\"],\n    hdrs = [\"mfcc.h\"],\n    copts = tf_copts(),\n    deps = [\n        \":mfcc_dct\",\n        \":mfcc_mel_filterbank\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"mfcc_test\",\n    size = \"small\",\n    srcs = [\"mfcc_test.cc\"],\n    deps = [\n        \":mfcc\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:lib_test_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"mfcc_op\",\n    prefix = \"mfcc_op\",\n    deps = [\n        \":mfcc\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n    ],\n    alwayslink = 1,\n)\n\ntf_cuda_cc_test(\n    name = \"mfcc_op_test\",\n    size = \"small\",\n    srcs = [\"mfcc_op_test.cc\"],\n    deps = [\n        \":mfcc_op\",\n        \":ops_util\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:tensorflow\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"audio\",\n    deps = [\n        \":decode_wav_op\",\n        \":encode_wav_op\",\n        \":mfcc_op\",\n        \":spectrogram_op\",\n    ],\n)\n\ncc_library(\n    name = \"meta_support\",\n    srcs = [\"meta_support.cc\"],\n    hdrs = [\"meta_support.h\"],\n    deps = [\n        \":quantization_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:mutex\",\n        \"@gemmlowp\",\n    ],\n)\n\n# Android libraries -----------------------------------------------------------\nfilegroup(\n    name = \"mobile_srcs\",\n    srcs = [\n        \"avgpooling_op.h\",\n        \"batch_util.h\",\n        \"cwise_ops.h\",\n        \"cwise_ops_common.h\",\n        \"cwise_ops_gradients.h\",\n        \"eigen_activations.h\",\n        \"eigen_attention.h\",\n        \"eigen_backward_cuboid_convolutions.h\",\n        \"eigen_backward_spatial_convolutions.h\",\n        \"eigen_convolution_helpers.h\",\n        \"eigen_cuboid_convolution.h\",\n        \"eigen_pooling.h\",\n        \"eigen_spatial_convolutions.h\",\n        \"eigen_spatial_convolutions-inl.h\",\n        \"fifo_queue.h\",\n        \"initializable_lookup_table.cc\",\n        \"initializable_lookup_table.h\",\n        \"lookup_util.cc\",\n        \"lookup_util.h\",\n        \"maxpooling_op.h\",\n        \"ops_util.h\",\n        \"padding_fifo_queue.h\",\n        \"pooling_ops_common.cc\",\n        \"pooling_ops_common.h\",\n        \"queue_base.h\",\n        \"queue_op.h\",\n        \"typed_queue.h\",\n    ],\n)\n\nalias(\n    name = \"android_srcs\",\n    actual = \":mobile_srcs\",\n)\n\n# Core kernels we want on Android. Only a subset of kernels to keep\n# base library small.\nfilegroup(\n    name = \"portable_core_ops\",\n    srcs = [\n        \"aggregate_ops.cc\",\n        \"aggregate_ops.h\",\n        \"aggregate_ops_cpu.h\",\n        \"assign_op.h\",\n        \"bias_op.cc\",\n        \"bias_op.h\",\n        \"cast_op.cc\",\n        \"cast_op.h\",\n        \"cast_op_impl.h\",\n        \"cast_op_impl_bfloat.cc\",\n        \"cast_op_impl_bool.cc\",\n        \"cast_op_impl_complex128.cc\",\n        \"cast_op_impl_complex64.cc\",\n        \"cast_op_impl_double.cc\",\n        \"cast_op_impl_float.cc\",\n        \"cast_op_impl_half.cc\",\n        \"cast_op_impl_int16.cc\",\n        \"cast_op_impl_int32.cc\",\n        \"cast_op_impl_int64.cc\",\n        \"cast_op_impl_int8.cc\",\n        \"cast_op_impl_uint16.cc\",\n        \"cast_op_impl_uint32.cc\",\n        \"cast_op_impl_uint64.cc\",\n        \"cast_op_impl_uint8.cc\",\n        \"concat_lib.h\",\n        \"concat_lib_cpu.cc\",\n        \"concat_lib_cpu.h\",\n        \"concat_op.cc\",\n        \"constant_op.cc\",\n        \"constant_op.h\",\n        \"cwise_ops.h\",\n        \"cwise_ops_common.cc\",\n        \"cwise_ops_common.h\",\n        \"cwise_ops_gradients.h\",\n        \"dense_update_functor.cc\",\n        \"dense_update_functor.h\",\n        \"dense_update_ops.cc\",\n        \"example_parsing_ops.cc\",\n        \"fill_functor.cc\",\n        \"fill_functor.h\",\n        \"function_ops.cc\",\n        \"function_ops.h\",\n        \"gather_functor.h\",\n        \"gather_functor_batched.h\",\n        \"gather_nd_op.cc\",\n        \"gather_nd_op.h\",\n        \"gather_nd_op_cpu_impl_0.cc\",\n        \"gather_nd_op_cpu_impl_1.cc\",\n        \"gather_nd_op_cpu_impl_2.cc\",\n        \"gather_nd_op_cpu_impl_3.cc\",\n        \"gather_nd_op_cpu_impl_4.cc\",\n        \"gather_nd_op_cpu_impl_5.cc\",\n        \"gather_nd_op_cpu_impl_6.cc\",\n        \"gather_nd_op_cpu_impl_7.cc\",\n        \"gather_op.cc\",\n        \"identity_n_op.cc\",\n        \"identity_n_op.h\",\n        \"identity_op.cc\",\n        \"identity_op.h\",\n        \"immutable_constant_op.cc\",\n        \"immutable_constant_op.h\",\n        \"matmul_op_impl.h\",\n        \"matmul_op_real.cc\",\n        \"no_op.cc\",\n        \"no_op.h\",\n        \"one_hot_op.cc\",\n        \"one_hot_op.h\",\n        \"ops_util.h\",\n        \"pack_op.cc\",\n        \"pooling_ops_common.h\",\n        \"redux_functor.h\",\n        \"reshape_op.cc\",\n        \"reshape_op.h\",\n        \"reverse_sequence_op.cc\",\n        \"reverse_sequence_op.h\",\n        \"sendrecv_ops.cc\",\n        \"sendrecv_ops.h\",\n        \"sequence_ops.cc\",\n        \"sequence_ops.h\",\n        \"shape_ops.cc\",\n        \"shape_ops.h\",\n        \"slice_op.cc\",\n        \"slice_op.h\",\n        \"slice_op_cpu_impl_1.cc\",\n        \"slice_op_cpu_impl_2.cc\",\n        \"slice_op_cpu_impl_3.cc\",\n        \"slice_op_cpu_impl_4.cc\",\n        \"slice_op_cpu_impl_5.cc\",\n        \"slice_op_cpu_impl_6.cc\",\n        \"slice_op_cpu_impl_7.cc\",\n        \"slice_op_cpu_impl_8.cc\",\n        \"softmax_op.cc\",\n        \"softmax_op_functor.h\",\n        \"sparse_concat_op.h\",\n        \"sparse_concat_op.cc\",\n        \"split_lib.h\",\n        \"split_lib_cpu.cc\",\n        \"split_op.cc\",\n        \"split_v_op.cc\",\n        \"strided_slice_op.cc\",\n        \"strided_slice_op.h\",\n        \"strided_slice_op_inst_0.cc\",\n        \"strided_slice_op_inst_1.cc\",\n        \"strided_slice_op_inst_2.cc\",\n        \"strided_slice_op_inst_3.cc\",\n        \"strided_slice_op_inst_4.cc\",\n        \"strided_slice_op_inst_5.cc\",\n        \"strided_slice_op_inst_6.cc\",\n        \"strided_slice_op_inst_7.cc\",\n        \"strided_slice_op_inst_8.cc\",\n        \"unpack_op.cc\",\n        \"variable_ops.cc\",\n        \"variable_ops.h\",\n    ] + [\n        \"//tensorflow/c/kernels:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/image:non_max_suppression_op.cc\",\n        \"//tensorflow/core/kernels/image:non_max_suppression_op.h\",\n    ],\n)\n\n# Other kernels we may want on Android.\n#\n# The kernels can be consumed as a whole or in two groups for\n# supporting separate compilation. Note that the split into groups\n# is entirely for improving compilation time, and not for\n# organizational reasons; you should not depend on any\n# of those groups independently.\nfilegroup(\n    name = \"portable_extended_ops\",\n    srcs = [\n        \":portable_extended_ops_group1\",\n        \":portable_extended_ops_group2\",\n        \":portable_quantized_ops\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nfilegroup(\n    name = \"portable_extended_ops_headers\",\n    srcs = [\n        \"argmax_op.h\",\n        \"avgpooling_op.h\",\n        \"batch_norm_op.h\",\n        \"bincount_op.h\",\n        \"broadcast_to_op.h\",\n        \"bucketize_op.h\",\n        \"checkpoint_callback_manager.h\",\n        \"concat_lib.h\",\n        \"control_flow_ops.h\",\n        \"conv_2d.h\",\n        \"conv_3d.h\",\n        \"conv_ops.h\",\n        \"conv_ops_gpu.h\",\n        \"data_format_ops.h\",\n        \"depthtospace_op.h\",\n        \"depthwise_conv_op.h\",\n        \"diag_op.h\",\n        \"dilation_ops.h\",\n        \"fake_quant_ops_functor.h\",\n        \"fused_batch_norm_op.h\",\n        \"inplace_ops.cc\",\n        \"inplace_ops_functor.h\",\n        \"lookup_table_init_op.h\",\n        \"lookup_table_op.h\",\n        \"list_kernels.h\",\n        \"l2loss_op.h\",\n        \"map_kernels.h\",\n        \"maxpooling_op.h\",\n        \"mfcc.h\",\n        \"mfcc_dct.h\",\n        \"mfcc_mel_filterbank.h\",\n        \"multinomial_op.h\",\n        \"pad_op.h\",\n        \"partitioned_function_ops.h\",\n        \"pooling_ops_3d.h\",\n        \"ragged_tensor_variant.h\",\n        \"random_op.h\",\n        \"random_poisson_op.h\",\n        \"random_index_shuffle.h\",\n        \"reduction_ops.h\",\n        \"reduction_ops_common.h\",\n        \"relu_op.h\",\n        \"relu_op_functor.h\",\n        \"reshape_util.h\",\n        \"resource_variable_ops.h\",\n        \"resource_variable_util.h\",\n        \"reverse_op.h\",\n        \"roll_op.h\",\n        \"save_restore_tensor.h\",\n        \"scan_ops.h\",\n        \"scatter_functor.h\",\n        \"scatter_nd_op.h\",\n        \"scatter_nd_util.h\",\n        \"searchsorted_op.h\",\n        \"segment_reduction_ops.h\",\n        \"segment_reduction_ops_impl.h\",\n        \"softplus_op.h\",\n        \"softsign_op.h\",\n        \"spacetobatch_functor.h\",\n        \"spacetodepth_op.h\",\n        \"spectrogram.h\",\n        \"stateless_random_gamma_op.h\",\n        \"stateless_random_ops.h\",\n        \"stateless_random_ops_v2.h\",\n        \"sparse_xent_op.h\",\n        \"sparse_fill_empty_rows_op.h\",\n        \"sparse_reorder_op.h\",\n        \"sparse_slice_op.h\",\n        \"sparse_tensor_dense_matmul_op.h\",\n        \"string_util.h\",\n        \"string_to_hash_bucket_op.h\",\n        \"string_to_hash_bucket_fast_op.h\",\n        \"tensor_array.h\",\n        \"tensor_list.h\",\n        \"tensor_map.h\",\n        \"tile_functor.h\",\n        \"tile_ops_impl.h\",\n        \"topk_op.h\",\n        \"training_op_helpers.h\",\n        \"training_ops.h\",\n        \"transpose_functor.h\",\n        \"transpose_op.h\",\n        \"where_op.h\",\n        \"xent_op.h\",\n    ] + [\n        \"//tensorflow/core/kernels/data:portable_all_op_kernels_headers\",\n        \"//tensorflow/core/kernels/image:adjust_contrast_op.h\",\n        \"//tensorflow/core/kernels/image:adjust_hue_op.h\",\n        \"//tensorflow/core/kernels/image:adjust_saturation_op.h\",\n        \"//tensorflow/core/kernels/image:colorspace_op.h\",\n        \"//tensorflow/core/kernels/image:extract_image_patches_op.h\",\n        \"//tensorflow/core/kernels/image:image_ops.h\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op.h\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl.h\",\n        \"//tensorflow/core/kernels/image:resize_bilinear_op.h\",\n        \"//tensorflow/core/kernels/image:resize_nearest_neighbor_op.h\",\n        \"//tensorflow/core/kernels/linalg:linalg_ops_common.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_band_part_op.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_diag_op.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_set_diag_op.h\",\n        \"//tensorflow/core/kernels/linalg:matrix_triangular_solve_op_impl.h\",\n        \"//tensorflow/core/kernels/linalg:qr_op_impl.h\",\n        \"//tensorflow/core/util:image_resizer_state.h\",\n    ],\n)\n\nfilegroup(\n    name = \"portable_extended_ops_group1\",\n    srcs = [\n        \":portable_extended_ops_headers\",\n        \"argmax_op.cc\",\n        \"avgpooling_op.cc\",\n        \"batch_norm_op.cc\",\n        \"bcast_ops.cc\",\n        \"check_numerics_op.cc\",\n        \"control_flow_ops.cc\",\n        \"conv_2d.h\",\n        \"conv_grad_filter_ops.cc\",\n        \"conv_grad_input_ops.h\",\n        \"conv_grad_input_ops_double.cc\",\n        \"conv_grad_input_ops_float.cc\",\n        \"conv_grad_input_ops_half.cc\",\n        \"conv_grad_input_ops_int32.cc\",\n        \"conv_grad_input_ops.cc\",\n        \"conv_grad_ops.h\",\n        \"conv_grad_ops_3d.cc\",\n        \"conv_grad_shape_utils.cc\",\n        \"conv_grad_shape_utils.h\",\n        \"conv_ops.cc\",\n        \"conv_ops_3d.cc\",\n        \"conv_ops_fused_double.cc\",\n        \"conv_ops_fused_float.cc\",\n        \"conv_ops_fused_half.cc\",\n        \"conv_ops_fused_image_transform.cc\",\n        \"conv_ops_fused_impl.h\",\n        \"conv_ops_using_gemm.cc\",\n        \"cwise_op_abs.cc\",\n        \"cwise_op_add_1.cc\",\n        \"cwise_op_add_2.cc\",\n        \"cwise_op_arg.cc\",\n        \"cwise_op_atan.cc\",\n        \"cwise_op_atan2.cc\",\n        \"cwise_op_bitwise_and.cc\",\n        \"cwise_op_bitwise_or.cc\",\n        \"cwise_op_bitwise_xor.cc\",\n        \"cwise_op_ceil.cc\",\n        \"cwise_op_complex.cc\",\n        \"cwise_op_conj.cc\",\n        \"cwise_op_cos.cc\",\n        \"cwise_op_cosh.cc\",\n        \"cwise_op_div.cc\",\n        \"cwise_op_equal_to_1.cc\",\n        \"cwise_op_equal_to_2.cc\",\n        \"cwise_op_erf.cc\",\n        \"cwise_op_exp.cc\",\n        \"cwise_op_floor.cc\",\n        \"cwise_op_floor_div.cc\",\n        \"cwise_op_floor_mod.cc\",\n        \"cwise_op_greater.cc\",\n        \"cwise_op_greater_equal.cc\",\n        \"cwise_op_imag.cc\",\n        \"cwise_op_invert.cc\",\n        \"cwise_op_isfinite.cc\",\n        \"cwise_op_isnan.cc\",\n        \"cwise_op_leakyrelu_bf16.cc\",\n        \"cwise_op_left_shift.cc\",\n        \"cwise_op_less.cc\",\n        \"cwise_op_less_equal.cc\",\n        \"cwise_op_log.cc\",\n        \"cwise_op_logical_and.cc\",\n        \"cwise_op_logical_not.cc\",\n        \"cwise_op_logical_or.cc\",\n        \"cwise_op_maximum.cc\",\n        \"cwise_op_minimum.cc\",\n        \"cwise_op_mul_1.cc\",\n        \"cwise_op_mul_2.cc\",\n        \"cwise_op_neg_1.cc\",\n        \"cwise_op_neg_2.cc\",\n        \"cwise_op_not_equal_to_1.cc\",\n        \"cwise_op_not_equal_to_2.cc\",\n        \"cwise_op_pow.cc\",\n        \"cwise_op_real.cc\",\n        \"cwise_op_reciprocal.cc\",\n        \"cwise_op_right_shift.cc\",\n        \"cwise_op_round.cc\",\n        \"cwise_op_rsqrt.cc\",\n        \"cwise_op_select.cc\",\n        \"cwise_op_sigmoid.cc\",\n        \"cwise_op_sign.cc\",\n        \"cwise_op_sin.cc\",\n        \"cwise_op_sinh.cc\",\n        \"cwise_op_sqrt.cc\",\n        \"cwise_op_square.cc\",\n        \"cwise_op_squared_difference.cc\",\n        \"cwise_op_sub.cc\",\n        \"cwise_op_tan.cc\",\n        \"cwise_op_tanh.cc\",\n        \"cwise_op_xdivy.cc\",\n        \"cwise_op_xlog1py.cc\",\n        \"cwise_op_xlogy.cc\",\n        \"data_format_ops.cc\",\n        \"decode_raw_op.cc\",\n        \"decode_wav_op.cc\",\n        \"deep_conv2d.cc\",\n        \"deep_conv2d.h\",\n        \"depthwise_conv_grad_op.cc\",\n        \"depthwise_conv_op.cc\",\n        \"dynamic_partition_op.cc\",\n        \"eigen_contraction_kernel.cc\",\n        \"eigen_contraction_kernel.h\",\n        \"encode_wav_op.cc\",\n        \"fake_quant_ops.cc\",\n        \"fifo_queue.cc\",\n        \"fifo_queue_op.cc\",\n        \"fingerprint_op.cc\",\n        \"fused_batch_norm_op.cc\",\n        \"fused_eigen_output_kernels.cc\",\n        \"fused_eigen_output_kernels.h\",\n        \"listdiff_op.cc\",\n        \"population_count_op.cc\",\n        \"population_count_op.h\",\n        \"winograd_transform.h\",\n    ] + [\n        \"//tensorflow/core/kernels/image:crop_and_resize_op.cc\",\n        \"//tensorflow/core/kernels/image:crop_and_resize_op.h\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_half.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_bfloat16.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_int32.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_int64.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_float.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_double.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_complex64.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl_complex128.cc\",\n        \"//tensorflow/core/kernels/linalg:einsum_op_impl.h\",\n        \"//tensorflow/core/kernels/linalg:einsum_op.h\",\n        \"//tensorflow/core/kernels/image:decode_image_op.cc\",\n        \"//tensorflow/core/kernels/image:encode_jpeg_op.cc\",\n        \"//tensorflow/core/kernels/image:encode_png_op.cc\",\n        \"//tensorflow/core/kernels/image:colorspace_op.cc\",\n    ] + select({\n        \":xsmm_convolutions\": [\n            \"xsmm_conv2d.h\",\n            \"xsmm_conv2d.cc\",\n        ],\n        \"//conditions:default\": [],\n    }),\n)\n\nfilegroup(\n    name = \"portable_extended_ops_group2\",\n    srcs = [\n        \":portable_extended_ops_headers\",\n        \"as_string_op.cc\",\n        \"base64_ops.cc\",\n        \"batchtospace_op.cc\",\n        \"bincount_op.cc\",\n        \"broadcast_to_op.cc\",\n        \"bucketize_op.cc\",\n        \"checkpoint_callback_manager.cc\",\n        \"ctc_decoder_ops.cc\",\n        \"decode_padded_raw_op.cc\",\n        \"depthtospace_op.cc\",\n        \"diag_op.cc\",\n        \"dilation_ops.cc\",\n        \"dynamic_stitch_op.cc\",\n        \"fft_ops.cc\",\n        \"functional_ops.cc\",\n        \"in_topk_op.cc\",\n        \"in_topk_op.h\",\n        \"list_kernels.cc\",\n        \"logging_ops.cc\",\n        \"logging_ops.h\",\n        \"lookup_table_init_op.cc\",\n        \"lookup_table_op.cc\",\n        \"lrn_op.cc\",\n        \"l2loss_op.cc\",\n        \"map_kernels.cc\",\n        \"maxpooling_op.cc\",\n        \"mfcc.cc\",\n        \"mfcc_dct.cc\",\n        \"mfcc_mel_filterbank.cc\",\n        \"mfcc_op.cc\",\n        \"multinomial_op.cc\",\n        \"pad_op.cc\",\n        \"padding_fifo_queue.cc\",\n        \"padding_fifo_queue_op.cc\",\n        \"parse_tensor_op.cc\",\n        \"partitioned_function_ops.cc\",\n        \"pooling_ops_3d.cc\",\n        \"queue_base.cc\",\n        \"queue_op.cc\",\n        \"queue_ops.cc\",\n        \"ragged_tensor_variant.cc\",\n        \"ragged_range_op.cc\",\n        \"ragged_gather_op.cc\",\n        \"ragged_tensor_to_sparse_kernel.cc\",\n        \"ragged_tensor_to_tensor_op.cc\",\n        \"ragged_tensor_to_variant_op.cc\",\n        \"ragged_tensor_from_variant_op.cc\",\n        \"random_index_shuffle.h\",\n        \"random_index_shuffle.cc\",\n        \"random_index_shuffle_ops.cc\",\n        \"random_op.cc\",\n        \"random_op_cpu.h\",\n        \"random_ops_util.h\",\n        \"random_poisson_op.cc\",\n        \"random_shuffle_op.cc\",\n        \"reduce_join_op.cc\",\n        \"reduction_ops_all.cc\",\n        \"reduction_ops_any.cc\",\n        \"reduction_ops_common.cc\",\n        \"reduction_ops_max.cc\",\n        \"reduction_ops_mean.cc\",\n        \"reduction_ops_min.cc\",\n        \"reduction_ops_prod.cc\",\n        \"reduction_ops_sum.cc\",\n        \"regex_replace_op.cc\",\n        \"regex_full_match_op.cc\",\n        \"relu_op.cc\",\n        \"reshape_util.cc\",\n        \"resource_variable_ops.cc\",\n        \"resource_variable_util.cc\",\n        \"restore_op.cc\",\n        \"reverse_op.cc\",\n        \"roll_op.cc\",\n        \"save_op.cc\",\n        \"save_restore_tensor.cc\",\n        \"save_restore_v2_ops.cc\",\n        \"scan_ops.cc\",\n        \"scatter_functor.cc\",\n        \"scatter_nd_op.cc\",\n        \"scatter_nd_op_cpu_impl_0.cc\",\n        \"scatter_nd_op_cpu_impl_1.cc\",\n        \"scatter_nd_op_cpu_impl_2.cc\",\n        \"scatter_nd_op_cpu_impl_3.cc\",\n        \"scatter_nd_op_cpu_impl_4.cc\",\n        \"scatter_nd_op_cpu_impl_5.cc\",\n        \"scatter_nd_op_cpu_impl_6.cc\",\n        \"scatter_nd_op_cpu_impl_7.cc\",\n        \"scatter_nd_util.cc\",\n        \"searchsorted_op.cc\",\n        \"segment_reduction_ops_impl_1.cc\",\n        \"segment_reduction_ops_impl_2.cc\",\n        \"segment_reduction_ops_impl_3.cc\",\n        \"segment_reduction_ops_impl_4.cc\",\n        \"segment_reduction_ops_impl_5.cc\",\n        \"session_ops.cc\",\n        \"set_kernels.cc\",\n        \"softplus_op.cc\",\n        \"softsign_op.cc\",\n        \"spacetobatch_functor.cc\",\n        \"spacetobatch_op.cc\",\n        \"spacetodepth_op.cc\",\n        \"sparse_add_op.cc\",\n        \"sparse_cross_op.cc\",\n        \"sparse_reduce_op.cc\",\n        \"sparse_xent_op.cc\",\n        \"sparse_fill_empty_rows_op.cc\",\n        \"sparse_reorder_op.cc\",\n        \"sparse_reshape_op.cc\",\n        \"sparse_slice_op.cc\",\n        \"sparse_tensor_dense_matmul_op.cc\",\n        \"sparse_to_dense_op.cc\",\n        \"spectrogram.cc\",\n        \"spectrogram_op.cc\",\n        \"stack.cc\",\n        \"stack.h\",\n        \"stack_ops.cc\",\n        \"stateless_random_gamma_op.cc\",\n        \"stateless_random_ops.cc\",\n        \"stateless_random_ops_v2.cc\",\n        \"string_format_op.cc\",\n        \"string_join_op.cc\",\n        \"string_length_op.cc\",\n        \"string_lower_op.cc\",\n        \"string_util.cc\",\n        \"string_split_op.cc\",\n        \"string_strip_op.cc\",\n        \"string_to_hash_bucket_op.cc\",\n        \"string_to_hash_bucket_fast_op.cc\",\n        \"string_to_number_op.cc\",\n        \"substr_op.cc\",\n        \"tensor_array.cc\",\n        \"tensor_array_ops.cc\",\n        \"tensor_list.cc\",\n        \"tensor_map.cc\",\n        \"tile_functor_cpu.h\",\n        \"tile_functor_cpu_bfloat16.cc\",\n        \"tile_functor_cpu_bool.cc\",\n        \"tile_functor_cpu_complex128.cc\",\n        \"tile_functor_cpu_complex64.cc\",\n        \"tile_functor_cpu_double.cc\",\n        \"tile_functor_cpu_float.cc\",\n        \"tile_functor_cpu_half.cc\",\n        \"tile_functor_cpu_int16.cc\",\n        \"tile_functor_cpu_int32.cc\",\n        \"tile_functor_cpu_int64.cc\",\n        \"tile_functor_cpu_int8.cc\",\n        \"tile_functor_cpu_tstring.cc\",\n        \"tile_functor_cpu_uint32.cc\",\n        \"tile_functor_cpu_uint64.cc\",\n        \"tile_functor_cpu_uint8.cc\",\n        \"tile_functor_cpu_variant.cc\",\n        \"tile_ops.cc\",\n        \"tile_ops_cpu_impl_1.cc\",\n        \"tile_ops_cpu_impl_2.cc\",\n        \"tile_ops_cpu_impl_3.cc\",\n        \"tile_ops_cpu_impl_4.cc\",\n        \"tile_ops_cpu_impl_5.cc\",\n        \"tile_ops_cpu_impl_6.cc\",\n        \"tile_ops_cpu_impl_7.cc\",\n        \"topk_op.cc\",\n        \"training_op_helpers.cc\",\n        \"training_ops.cc\",\n        \"transpose_functor_cpu.cc\",\n        \"transpose_op.cc\",\n        \"unicode_ops.cc\",\n        \"unique_op.cc\",\n        \"unsorted_segment_join_op.cc\",\n        \"where_op.cc\",\n        \"whole_file_read_ops.cc\",\n        \"xent_op.cc\",\n    ] + [\n        \"//tensorflow/core/kernels/data:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/image:adjust_contrast_op.cc\",\n        \"//tensorflow/core/kernels/image:adjust_hue_op.cc\",\n        \"//tensorflow/core/kernels/image:adjust_saturation_op.cc\",\n        \"//tensorflow/core/kernels/image:extract_image_patches_op.cc\",\n        \"//tensorflow/core/kernels/image:image_ops.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_1.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_2.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_3.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_4.cc\",\n        \"//tensorflow/core/kernels/image:mirror_pad_op_cpu_impl_5.cc\",\n        \"//tensorflow/core/kernels/image:resize_bicubic_op.cc\",\n        \"//tensorflow/core/kernels/image:resize_bilinear_op.cc\",\n        \"//tensorflow/core/kernels/image:resize_nearest_neighbor_op.cc\",\n        \"//tensorflow/core/kernels/image:sample_distorted_bounding_box_op.cc\",\n        \"//tensorflow/core/kernels/linalg:cholesky_op.cc\",\n        \"//tensorflow/core/kernels/linalg:determinant_op.cc\",\n        \"//tensorflow/core/kernels/linalg:linalg_ops_common.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_band_part_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_diag_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_inverse_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_set_diag_op.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_triangular_solve_op_complex.cc\",\n        \"//tensorflow/core/kernels/linalg:matrix_triangular_solve_op_real.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_complex128.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_complex64.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_double.cc\",\n        \"//tensorflow/core/kernels/linalg:qr_op_float.cc\",\n    ],\n)\n\nfilegroup(\n    name = \"portable_quantized_ops\",\n    srcs = [\n        \"dequantize_op.cc\",\n        \"meta_support.cc\",\n        \"meta_support.h\",\n        \"quantization_utils.cc\",\n        \"quantization_utils.h\",\n        \"quantize_down_and_shrink_range.cc\",\n        \"quantize_op.cc\",\n        \"quantized_activation_ops.cc\",\n        \"quantized_add_op.cc\",\n        \"quantized_batch_norm_op.cc\",\n        \"quantized_bias_add_op.cc\",\n        \"quantized_concat_op.cc\",\n        \"quantized_conv_ops.cc\",\n        \"quantized_instance_norm.cc\",\n        \"quantized_matmul_op.cc\",\n        \"quantized_mul_op.cc\",\n        \"quantized_pooling_ops.cc\",\n        \"quantized_reshape_op.cc\",\n        \"quantized_resize_bilinear_op.cc\",\n        \"reference_gemm.h\",\n        \"requantization_range_op.cc\",\n        \"requantize.cc\",\n        \"reshape_op.h\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nANDROID_TEXTUAL_HDRS = [\n    \"eigen_convolution_helpers.h\",\n    \"eigen_spatial_convolutions-inl.h\",\n    \"gather_nd_op_cpu_impl.h\",\n    \"gemm_functors.h\",\n    \"scatter_nd_op_cpu_impl.h\",\n    \"slice_op_cpu_impl.h\",\n    \"strided_slice_op_impl.h\",\n    \"tile_ops_cpu_impl.h\",\n]\n\n# A file group which contains nearly all available operators which\n# may work on mobile environment. This is intended to be used with selective\n# registration.\nfilegroup(\n    name = \"portable_all_ops\",\n    srcs = [\n        \"//tensorflow/c/kernels:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/data:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/image:portable_all_op_kernels\",\n        \"//tensorflow/core/kernels/linalg:portable_all_op_kernels\",\n    ] + glob(\n        [\n            \"*.cc\",\n            \"*.h\",\n        ],\n        exclude = [\n            \"*test.cc\",\n            \"*test_util*\",\n            \"*testutil*\",\n            \"*testlib*\",\n            \"*main.cc\",\n            \"*_gpu*\",\n            \"*_3d*\",\n            \"*.cu.*\",\n            # Helper files for tests\n            \"eigen_benchmark.h\",\n            # Ops already in android_srcs\n            \"pooling_ops_common.cc\",\n            # Ops which we are currently excluding because they are likely\n            # not used on Android. Those ops also do not compile if included,\n            # unless we add the additional deps they need.\n            \"tf_record_reader_op.*\",\n            \"cudnn_rnn_ops.*\",\n            \"lmdb_reader_op.*\",\n            \"string_to_hash_bucket_op.*\",\n            \"sdca_ops.*\",\n            \"sdca_internal.*\",\n            \"sparse_cross_op.*\",\n            \"text_line_reader_op.*\",\n            \"summary_image_op.*\",\n            \"identity_reader_op.*\",\n            \"fixed_length_record_reader_op.*\",\n            \"sample_distorted_bounding_box_op.*\",\n            \"ctc_loss_op.*\",\n            \"summary_interface.*\",\n            \"summary_kernels.*\",\n            \"spectrogram_convert_test_data.cc\",\n            \"decode_proto_op.cc\",\n            \"encode_proto_op.cc\",\n            \"sobol_op.cc\",\n            # Excluded due to experimental status:\n            \"debug_ops.*\",\n            \"mutex_ops.*\",\n            \"batch_kernels.*\",\n            \"regex_replace_op.cc\",\n            \"string_lower_op.cc\",  # Requires ICU for unicode.\n            \"string_upper_op.cc\",  # Requires ICU for unicode.\n            \"unicode_ops.cc\",\n            \"unicode_script_op.cc\",\n            # Ops that are inherently incompatible with Android (e.g. tied to x86 platform).\n            \"xsmm_*\",\n            \"nextafter_op.cc\",\n            \"initializable_lookup_table.*\",\n            \"lookup_util.*\",\n        ] + ANDROID_TEXTUAL_HDRS,\n    ) + [\n        # Referenced by stateful_random_ops.cc but excluded with the *gpu*\n        # rule above. Seems to have only have worked before because of\n        # hdrs_check loose.\n        \"stateful_random_ops_cpu_gpu.h\",\n        # Allows conv_3d ops for android but excluded from *_3d* rule above.\n        \"conv_3d.h\",\n        \"conv_ops_3d.cc\",\n        \"conv_ops_gpu.h\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"android_all_ops\",\n    actual = \":portable_all_ops\",\n)\n\nfilegroup(\n    name = \"portable_all_ops_textual_hdrs\",\n    srcs = ANDROID_TEXTUAL_HDRS + [\n        \"//tensorflow/core/kernels/image:portable_all_ops_textual_hdrs\",\n        \"//tensorflow/core/util:image_resizer_state.h\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\nalias(\n    name = \"android_all_ops_textual_hdrs\",\n    actual = \"portable_all_ops_textual_hdrs\",\n)\n\ncc_library(\n    name = \"portable_tensorflow_kernels\",\n    srcs = if_mobile([\n        \"//tensorflow/core/kernels:portable_core_ops\",\n        \"//tensorflow/core/kernels:portable_extended_ops\",\n    ]),\n    copts = tf_copts() + tf_opts_nortti_if_lite_protos(),\n    linkopts = if_android([\"-ldl\"]),\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    # These headers are not self-contained, so should be included in textual_hdrs only.\n    textual_hdrs = ANDROID_TEXTUAL_HDRS,\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/core:portable_gif_internal\",\n        \"//tensorflow/core:portable_jpeg_internal\",\n        \"//tensorflow/core:portable_tensorflow_lib_lite\",\n        \"//tensorflow/core:protos_all_cc_impl\",\n        \"//tensorflow/core/lib/png:png_io\",\n        \"//tensorflow/core/platform:strong_hash\",\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n        \"//third_party/fft2d:fft2d_headers\",\n        \"//third_party/icu/data:conversion_data\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_protobuf//:protobuf\",\n        \"@fft2d\",\n        \"@gemmlowp\",\n        \"@icu//:common\",\n    ],\n    alwayslink = 1,\n)\n\nbuild_test(\n    name = \"portable_tensorflow_kernels_build_test\",\n    targets = [\":portable_tensorflow_kernels\"],\n)\n\ncc_library(\n    name = \"android_whole_file_read_ops\",\n    srcs = if_android([\"whole_file_read_ops.cc\"]),\n    copts = tf_copts(),\n    linkopts = [\"-ldl\"],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \"//tensorflow/core:portable_tensorflow_lib_lite\",\n    ],\n    alwayslink = 1,\n)\n\n#   Quantization-specific OpKernels\n\ntf_kernel_library(\n    name = \"quantized_ops\",\n    srcs = [\n        \"dequantize_op.cc\",\n        \"quantize_down_and_shrink_range.cc\",\n        \"quantize_op.cc\",\n        \"quantized_activation_ops.cc\",\n        \"quantized_add_op.cc\",\n        \"quantized_batch_norm_op.cc\",\n        \"quantized_bias_add_op.cc\",\n        \"quantized_concat_op.cc\",\n        \"quantized_conv_ops.cc\",\n        \"quantized_instance_norm.cc\",\n        \"quantized_matmul_op.cc\",\n        \"quantized_mul_op.cc\",\n        \"quantized_pooling_ops.cc\",\n        \"quantized_reshape_op.cc\",\n        \"quantized_resize_bilinear_op.cc\",\n        \"requantization_range_op.cc\",\n        \"requantize.cc\",\n        \"reshape_op.h\",\n    ],\n    hdrs = [\"reference_gemm.h\"],\n    deps = [\n        \":concat_lib_hdrs\",\n        \":conv_ops\",\n        \":cwise_op\",\n        \":eigen_helpers\",\n        \":meta_support\",\n        \":ops_util\",\n        \":pooling_ops\",\n        \":quantization_utils\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util:determinism_for_kernels\",\n        \"//tensorflow/core/util:image_resizer_state\",\n        \"//third_party/eigen3\",\n        \"@gemmlowp\",\n    ],\n)\n\ntf_cc_test(\n    name = \"requantization_range_op_test\",\n    size = \"small\",\n    srcs = [\"requantization_range_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantize_down_and_shrink_range_op_test\",\n    size = \"small\",\n    srcs = [\"quantize_down_and_shrink_range_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"requantize_op_test\",\n    size = \"small\",\n    srcs = [\"requantize_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantization_utils_test\",\n    srcs = [\"quantization_utils_test.cc\"],\n    deps = [\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Android-only test for quantization utilities.\ntf_cc_binary(\n    name = \"quantization_utils_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantization_utils_test.cc\"],\n    copts = tf_copts(),\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-lm\",\n            \"-llog\",\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":quantized_ops\",\n            \"//third_party/eigen3\",\n            \"//tensorflow/core:core_cpu_internal\",\n            \"//tensorflow/core:lib\",\n            \"//tensorflow/core:test\",\n            \"//tensorflow/cc:cc_ops\",\n            \"//tensorflow/cc:client_session\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_activation_ops_test\",\n    srcs = [\"quantized_activation_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# Android-only test for quantized addition.\ncc_binary(\n    name = \"quantized_add_op_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_add_op_test.cc\"],\n    copts = tf_copts(),\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-lm\",\n            \"-llog\",\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":ops_util\",\n            \":quantized_ops\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core:protos_all_cc\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n            \"//tensorflow/core:tensorflow\",\n            \"//tensorflow/core:test\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_add_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_add_op_test.cc\"],\n    deps = [\n        \":math\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_resize_bilinear_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_resize_bilinear_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:image_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# Android-only test for quantized resize bilinear.\ncc_binary(\n    name = \"quantized_resize_bilinear_op_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_resize_bilinear_op_test.cc\"],\n    copts = tf_copts(),\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-lm\",\n            \"-llog\",\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":ops_testutil\",\n            \":ops_util\",\n            \":quantized_ops\",\n            \"//tensorflow/core:core_cpu\",\n            \"//tensorflow/core:direct_session\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core:image_ops_op_lib\",\n            \"//tensorflow/core:protos_all_cc\",\n            \"//tensorflow/core:test\",\n            \"//tensorflow/core:testlib\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_bias_add_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_bias_add_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_conv_ops_test\",\n    size = \"small\",\n    srcs = [\"quantized_conv_ops_test.cc\"],\n    tags = [\"nomsan\"],  # http://b/32242946\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantize_op_test\",\n    size = \"small\",\n    srcs = [\"quantize_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_matmul_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_matmul_op_test.cc\"],\n    tags = [\"nomsan\"],  # http://b/32242946\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# Android-only test for quantized multiply.\ncc_binary(\n    name = \"quantized_mul_op_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_mul_op_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \":ops_util\",\n            \":quantized_ops\",\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n            \"//tensorflow/core:protos_all_cc\",\n            \"//tensorflow/core:test\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_mul_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_mul_op_test.cc\"],\n    deps = [\n        \":math\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_pooling_ops_test\",\n    size = \"small\",\n    srcs = [\"quantized_pooling_ops_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_reshape_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_reshape_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_concat_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_concat_op_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_cc_test(\n    name = \"quantized_batch_norm_op_test\",\n    size = \"small\",\n    srcs = [\"quantized_batch_norm_op_test.cc\"],\n    deps = [\n        \":batch_norm_op\",\n        \":ops_testutil\",\n        \":quantization_utils\",\n        \":quantized_ops\",\n        \"//tensorflow/core:array_ops_op_lib\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:math_ops_op_lib\",\n        \"//tensorflow/core:nn_ops_op_lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Android-only test for quantized instance norm.\ncc_binary(\n    name = \"quantized_instance_norm_test_android_only\",\n    testonly = 1,\n    srcs = [\"quantized_instance_norm_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:android\": [\n            \"-pie\",\n        ],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = 1,\n    tags = [\n        \"manual\",\n        \"notap\",\n    ],\n    deps = [\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n    ] + select({\n        \"//tensorflow:android\": [\n            \":portable_tensorflow_kernels\",\n            \"//tensorflow/core:portable_tensorflow_lib\",\n            \"//tensorflow/core:portable_tensorflow_test_lib\",\n        ],\n        \"//conditions:default\": [\n            \"//tensorflow/core:framework\",\n            \"//tensorflow/core/framework:tensor_testutil\",\n        ],\n    }),\n)\n\ntf_cc_test(\n    name = \"quantized_instance_norm_test\",\n    size = \"small\",\n    srcs = [\"quantized_instance_norm_test.cc\"],\n    deps = [\n        \":ops_testutil\",\n        \":ops_util\",\n        \":quantized_ops\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:client_session\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:direct_session\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ncc_library(\n    name = \"quantization_utils\",\n    srcs = [\"quantization_utils.cc\"],\n    hdrs = [\"quantization_utils.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"@gemmlowp\",\n    ],\n)\n\ntf_cc_test(\n    name = \"bias_op_test\",\n    size = \"small\",\n    srcs = [\"bias_op_test.cc\"],\n    deps = [\n        \":bias_op\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\n# NOTE(lespeholt): This rule is deprecated, please use:\n# tensorflow/core/util/batch_util.h\ncc_library(\n    name = \"batch_util\",\n    hdrs = [\"batch_util.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n\ntf_kernel_library(name = \"boosted_trees_ops\")\n\ntf_kernel_library(\n    name = \"data_service_ops\",\n    deps = [\n        \"//tensorflow/core/kernels/data/experimental:data_service_kernels\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"dataset_ops\",\n    deps = [\n        \"//tensorflow/core/kernels/data\",\n    ],\n)\n\ncc_library(\n    name = \"summary_interface\",\n    hdrs = [\"summary_interface.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"summary_kernels\",\n    srcs = [\"summary_kernels.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core/lib/db:sqlite\",\n        \"//tensorflow/core/summary:schema\",\n        \"//tensorflow/core/summary:summary_db_writer\",\n        \"//tensorflow/core/summary:summary_file_writer\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"decode_proto_op\",\n    srcs = [\n        \"decode_proto_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util/proto:decode\",\n        \"//tensorflow/core/util/proto:descriptors\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/types:span\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"encode_proto_op\",\n    srcs = [\"encode_proto_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/util/proto:descriptors\",\n        \"//tensorflow/core/util/proto:proto_utils\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"unicode_script_op\",\n    srcs = [\"unicode_script_op.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"@icu//:common\",\n    ],\n)\n\n# Library to link with when compiling the cwise_op kernels directly,\n# e.g. for selective registration.\n# should not be linked by projects that also link the cwise_op library.\ncc_library(\n    name = \"cwise_lib\",\n    srcs = [\"cwise_ops_common.cc\"],\n    hdrs = [\n        \"cwise_ops.h\",\n        \"cwise_ops_common.h\",\n        \"cwise_ops_gpu_common.cu.h\",\n        \"cwise_ops_gpu_gradients.cu.h\",\n        \"cwise_ops_gradients.h\",\n        \"fill_functor.h\",\n    ],\n    deps = [\n        \":meta_support\",\n        \":quantization_utils\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n        \"@gemmlowp\",\n    ],\n)\n\n# Header-only version of cwise_lib for clients that want to use the cwise_ops\n# functionality in their own custom ops.\ncc_header_only_library(\n    name = \"cwise_lib_hdrs\",\n    deps = [\n        \":cwise_lib\",\n    ],\n)\n\n# Library to link with when compiling the quantize and dequantize kernels directly,\n# e.g. for selective registration.\ncc_header_only_library(\n    name = \"quantize_and_dequantize_op_hdrs\",\n    deps = [\n        \":quantize_and_dequantize_op\",\n    ],\n)\n\ncc_library(\n    name = \"kernel_platform_strings\",\n    srcs = [\"kernel_platform_strings.h\"],\n    deps = [\n        \"//tensorflow/core/platform:platform_strings\",\n    ],\n    alwayslink = 1,\n)\n\n# Shared object that links all the kernels TF needs.\ntf_cc_shared_library(\n    name = \"libtfkernel_all_kernels.so\",\n    static_deps = [\n        # TODO(rostam): Remove Copybara transform.\n        # copybara:comment_begin(oss only)\n        \"@bazel_tools//:__subpackages__\",\n        \"@boringssl//:__subpackages__\",\n        \"@com_github_cares_cares//:__subpackages__\",\n        \"@com_github_googlecloudplatform_tensorflow_gcp_tools//:__subpackages__\",\n        \"@com_github_grpc_grpc//:__subpackages__\",\n        \"@com_google_absl//:__subpackages__\",\n        \"@com_google_googleapis//:__subpackages__\",\n        \"@com_google_protobuf//:__subpackages__\",\n        \"@com_googlesource_code_re2//:__subpackages__\",\n        \"@compute_library//:__subpackages__\",\n        \"@curl//:__subpackages__\",\n        \"@double_conversion//:__subpackages__\",\n        \"@eigen_archive//:__subpackages__\",\n        \"@farmhash_archive//:__subpackages__\",\n        \"@farmhash_gpu_archive//:__subpackages__\",\n        \"@fft2d//:__subpackages__\",\n        \"@gemmlowp//:__subpackages__\",\n        \"@gif//:__subpackages__\",\n        \"@highwayhash//:__subpackages__\",\n        \"@hwloc//:__subpackages__\",\n        \"@icu//:__subpackages__\",\n        \"@jsoncpp_git//:__subpackages__\",\n        \"@libjpeg_turbo//:__subpackages__\",\n        \"@libxsmm_archive//:__subpackages__\",\n        \"@llvm_openmp//:__subpackages__\",\n        \"@llvm-project//:__subpackages__\",\n        \"@llvm_terminfo//:__subpackages__\",\n        \"@llvm_zlib//:__subpackages__\",\n        \"@lmdb//:__subpackages__\",\n        \"@local_config_cuda//:__subpackages__\",\n        \"@local_config_git//:__subpackages__\",\n        \"@local_config_nccl//:__subpackages__\",\n        \"@local_config_rocm//:__subpackages__\",\n        \"@local_config_tensorrt//:__subpackages__\",\n        \"@local_execution_config_platform//:__subpackages__\",\n        \"@mkl_dnn_acl_compatible//:__subpackages__\",\n        \"@mkl_dnn_v1//:__subpackages__\",\n        \"@nsync//:__subpackages__\",\n        \"@org_sqlite//:__subpackages__\",\n        \"@platforms//:__subpackages__\",\n        \"@png//:__subpackages__\",\n        \"@snappy//:__subpackages__\",\n        \"//:__subpackages__\",\n        \"@upb//:__subpackages__\",\n        \"@zlib//:__subpackages__\",\n        # copybara:comment_end\n    ],\n    visibility = [\"//visibility:public\"],\n    deps = [\n        \":kernel_platform_strings\",\n        \"//tensorflow/core:all_kernels_impl\",\n    ],\n)\n\n# Manually curated set of tests that are useful for building and testing against\n# platforms and architecures that don't support CUDA.\n# TODO(b/153737462): Automatically filter tests to create the appropriate\n# portable test list.\ntest_suite(\n    name = \"portable_kernel_tests\",\n    tags = [\n        \"manual\",  # Avoid redundancy when using wildcard test patterns.\n    ],\n    tests = [\n        \":batch_norm_op_test\",\n        \":broadcast_to_op_test_cpu\",\n        \":cast_op_test_cpu\",\n        \":concat_op_test\",\n        \":control_flow_ops_test\",\n        \":cwise_ops_test_cpu\",\n        \":deep_conv2d_test\",\n        \":dequantize_op_test\",\n        \":diag_op_test_cpu\",\n        \":eigen_activations_test\",\n        \":eigen_pooling_test\",\n        \":eigen_spatial_convolutions_test\",\n        \":gather_nd_op_test_cpu\",\n        \":matmul_op_test_cpu\",\n        \":mfcc_test\",\n        \":multinomial_op_test_cpu\",\n        \":nn_ops_test_cpu\",\n        \":quantization_utils_test\",\n        \":quantize_and_dequantize_op_test_cpu\",\n        \":quantize_op_test\",\n        \":quantized_activation_ops_test\",\n        \":quantized_batch_norm_op_test\",\n        \":quantized_conv_ops_test\",\n        \":quantized_matmul_op_test\",\n        \":quantized_pooling_ops_test\",\n        \":random_binomial_op_test_cpu\",\n        \":random_op_test_cpu\",\n        \":random_poisson_op_test_cpu\",\n        \":reduction_ops_test_cpu\",\n        \":requantization_range_op_test\",\n        \":scatter_op_test\",\n        \":segment_reduction_ops_test\",\n        \":slice_op_test\",\n        \":spectrogram_test\",\n        \":split_op_test\",\n        \":split_v_op_test_cpu\",\n        \":strided_slice_op_test\",\n        \":unique_op_test\",\n        \":variable_ops_test\",\n        \"//tensorflow/core/kernels/image:crop_and_resize_op_test\",\n        \"//tensorflow/core/kernels/image:non_max_suppression_op_test\",\n        \"//tensorflow/core/kernels/image:resize_ops_test_cpu\",\n    ],\n)\n\nexports_files([\n    \"cwise_op_abs.cc\",\n    \"cwise_op_add_1.cc\",\n    \"cwise_op_add_2.cc\",\n    \"cwise_op_atan2.cc\",\n    \"cwise_op_ceil.cc\",\n    \"cwise_op_cos.cc\",\n    \"cwise_op_div.cc\",\n    \"cwise_op_equal_to_1.cc\",\n    \"cwise_op_equal_to_2.cc\",\n    \"cwise_op_exp.cc\",\n    \"cwise_op_floor.cc\",\n    \"cwise_op_floor_div.cc\",\n    \"cwise_op_floor_mod.cc\",\n    \"cwise_op_gpu_add.cu.cc\",\n    \"cwise_op_gpu_atan2.cu.cc\",\n    \"cwise_op_gpu_ceil.cu.cc\",\n    \"cwise_op_gpu_cos.cu.cc\",\n    \"cwise_op_gpu_div.cu.cc\",\n    \"cwise_op_gpu_equal_to.cu.cc\",\n    \"cwise_op_gpu_exp.cu.cc\",\n    \"cwise_op_gpu_floor.cu.cc\",\n    \"cwise_op_gpu_floor_div.cu.cc\",\n    \"cwise_op_gpu_greater.cu.cc\",\n    \"cwise_op_gpu_greater_equal.cu.cc\",\n    \"cwise_op_gpu_isinf.cu.cc\",\n    \"cwise_op_gpu_less.cu.cc\",\n    \"cwise_op_gpu_less_equal.cu.cc\",\n    \"cwise_op_gpu_log.cu.cc\",\n    \"cwise_op_gpu_logical_and.cu.cc\",\n    \"cwise_op_gpu_logical_not.cu.cc\",\n    \"cwise_op_gpu_logical_or.cu.cc\",\n    \"cwise_op_gpu_maximum.cu.cc\",\n    \"cwise_op_gpu_minimum.cu.cc\",\n    \"cwise_op_gpu_mod.cu.cc\",\n    \"cwise_op_gpu_mul.cu.cc\",\n    \"cwise_op_gpu_neg.cu.cc\",\n    \"cwise_op_gpu_not_equal_to.cu.cc\",\n    \"cwise_op_gpu_pow.cu.cc\",\n    \"cwise_op_gpu_round.cu.cc\",\n    \"cwise_op_gpu_rsqrt.cu.cc\",\n    \"cwise_op_gpu_select.cu.cc\",\n    \"cwise_op_gpu_sigmoid.cu.cc\",\n    \"cwise_op_gpu_sin.cu.cc\",\n    \"cwise_op_gpu_sqrt.cu.cc\",\n    \"cwise_op_gpu_square.cu.cc\",\n    \"cwise_op_gpu_squared_difference.cu.cc\",\n    \"cwise_op_gpu_sub.cu.cc\",\n    \"cwise_op_gpu_tanh.cu.cc\",\n    \"cwise_op_greater.cc\",\n    \"cwise_op_greater_equal.cc\",\n    \"cwise_op_isinf.cc\",\n    \"cwise_op_leakyrelu_bf16.cc\",\n    \"cwise_op_less.cc\",\n    \"cwise_op_less_equal.cc\",\n    \"cwise_op_log.cc\",\n    \"cwise_op_logical_and.cc\",\n    \"cwise_op_logical_not.cc\",\n    \"cwise_op_logical_or.cc\",\n    \"cwise_op_maximum.cc\",\n    \"cwise_op_minimum.cc\",\n    \"cwise_op_mod.cc\",\n    \"cwise_op_mul_1.cc\",\n    \"cwise_op_mul_2.cc\",\n    \"cwise_op_neg_1.cc\",\n    \"cwise_op_neg_2.cc\",\n    \"cwise_op_not_equal_to_1.cc\",\n    \"cwise_op_not_equal_to_2.cc\",\n    \"cwise_op_pow.cc\",\n    \"cwise_op_round.cc\",\n    \"cwise_op_rsqrt.cc\",\n    \"cwise_op_select.cc\",\n    \"cwise_op_sigmoid.cc\",\n    \"cwise_op_sin.cc\",\n    \"cwise_op_sign.cc\",\n    \"cwise_op_sqrt.cc\",\n    \"cwise_op_square.cc\",\n    \"cwise_op_squared_difference.cc\",\n    \"cwise_op_sub.cc\",\n    \"cwise_op_tanh.cc\",\n    \"dequantize_op.cc\",\n    \"ops_testutil.h\",\n    \"quantize_and_dequantize_op.cc\",\n    \"quantize_op.cc\",\n    \"sparse_cross_op.cc\",\n    \"sparse_fill_empty_rows_op.cc\",\n    \"sparse_reshape_op.cc\",\n    \"unary_ops_composition.cc\",\n])\n\ntf_kernel_library(\n    name = \"sobol_op\",\n    srcs = [\n        \"sobol_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n        \"@sobol_data\",\n    ],\n)\n\n# ---- temporary forwarding declaration for libraries in linalg\n# TODO(b/160344057): Remove after updating dependencies.\ntf_kernel_library(\n    name = \"matrix_inverse_op\",\n    deps = [\"//tensorflow/core/kernels/linalg:matrix_inverse_op\"],\n)\n\ntf_kernel_library(\n    name = \"einsum_op\",\n    deps = [\"//tensorflow/core/kernels/linalg:einsum_op\"],\n)\n\ntf_kernel_library(\n    name = \"isotonic_regression_op\",\n    srcs = [\n        \"isotonic_regression_op.cc\",\n    ],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_test(\n    name = \"isotonic_regression_op_test\",\n    size = \"small\",\n    srcs = [\"isotonic_regression_op_test.cc\"],\n    deps = [\n        \":isotonic_regression_op\",\n        \":ops_testutil\",\n        \":ops_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"filesystem_ops\",\n    srcs = [\"filesystem_ops.cc\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ],\n)\n", "/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include <memory>\n#include <string>\n#include <utility>\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/tensor_types.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/spacetobatch_functor.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/platform/types.h\"\n#include \"tensorflow/core/util/overflow.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\ntemplate <typename Device, typename T>\nStatus SpaceToBatchOpCompute(OpKernelContext* context,\n                             const Tensor& orig_input_tensor,\n                             const Tensor& orig_block_shape,\n                             const Tensor& orig_paddings) {\n  const int input_dims = orig_input_tensor.dims();\n  if (!TensorShapeUtils::IsVector(orig_block_shape.shape())) {\n    return errors::InvalidArgument(\"block_shape rank should be 1 instead of \",\n                                   orig_block_shape.dims());\n  }\n\n  const int block_dims = orig_block_shape.dim_size(0);\n  if (orig_input_tensor.dims() < 1 + block_dims) {\n    return errors::InvalidArgument(\"input rank should be >= \", 1 + block_dims,\n                                   \" instead of \", orig_input_tensor.dims());\n  }\n\n  if (!(TensorShapeUtils::IsMatrix(orig_paddings.shape()) &&\n        block_dims == orig_paddings.dim_size(0) &&\n        2 == orig_paddings.dim_size(1))) {\n    return errors::InvalidArgument(\"paddings should have shape [\", block_dims,\n                                   \", 2] instead of \",\n                                   orig_paddings.shape().DebugString());\n  }\n\n  // To avoid out-of-bounds access in the case that the block_shape and/or\n  // paddings tensors are concurrently modified, we must copy the values.\n  gtl::InlinedVector<int64_t, 4> block_shape;\n  gtl::InlinedVector<int64_t, 8> paddings;\n  internal::spacetobatch::SubtleMustCopyFlat(orig_block_shape, &block_shape);\n  internal::spacetobatch::SubtleMustCopyFlat(orig_paddings, &paddings);\n\n  // Determine the length of the prefix of block dims that can be combined\n  // into the batch dimension due to having no padding and block_shape=1.\n  int removed_prefix_block_dims = 0;\n  for (; removed_prefix_block_dims < block_dims; ++removed_prefix_block_dims) {\n    const int dim = removed_prefix_block_dims;\n    if (paddings[2 * dim] != 0 || paddings[2 * dim + 1] != 0 ||\n        block_shape[dim] != 1) {\n      break;\n    }\n  }\n\n  // Determine the length of the suffix of block dims that can be combined\n  // into the depth dimension due to having no padding and block_shape=1.\n  int removed_suffix_block_dims = 0;\n  for (; removed_suffix_block_dims < block_dims - removed_prefix_block_dims;\n       ++removed_suffix_block_dims) {\n    const int dim = block_dims - 1 - removed_suffix_block_dims;\n    if (paddings[dim * 2] != 0 || paddings[dim * 2 + 1] != 0 ||\n        block_shape[dim] != 1) {\n      break;\n    }\n  }\n\n  // Compute the product of the block_shape values.\n  int64_t block_shape_product = 1;\n  for (int block_dim = 0; block_dim < block_dims; ++block_dim) {\n    if (block_shape[block_dim] < 1) {\n      return errors::InvalidArgument(\n          \"All values in block_shape must be positive, got value, \",\n          block_shape[block_dim], \" at index \", block_dim, \".\");\n    }\n    block_shape_product =\n        MultiplyWithoutOverflow(block_shape_product, block_shape[block_dim]);\n  }\n  if (block_shape_product <= 0) {\n    return errors::InvalidArgument(\n        \"Product of block sizes must be positive, got \", block_shape_product);\n  }\n\n  const int internal_block_dims =\n      block_dims - removed_prefix_block_dims - removed_suffix_block_dims;\n  if (internal_block_dims > kMaxSpaceToBatchBlockDims) {\n    return errors::InvalidArgument(\n        \"Maximum number of non-combined block dimensions is \",\n        internal_block_dims, \" but must not exceed \",\n        kMaxSpaceToBatchBlockDims);\n  }\n\n  if (internal_block_dims == 0) {\n    context->set_output(0, orig_input_tensor);\n    return Status::OK();\n  }\n\n  // For the purpose of computing the result, the input will be treated as\n  // having this shape, of rank 2 + internal_block_dims.\n  TensorShape internal_input_shape;\n\n  // For the purpose of computing the result, the output will be treated as\n  // having this shape, of rank 2 + internal_block_dims.\n  TensorShape internal_output_shape;\n\n  // The actual output shape exposed to callers.\n  TensorShape external_output_shape;\n\n  const int64_t output_shape = MultiplyWithoutOverflow(\n      orig_input_tensor.dim_size(0), block_shape_product);\n  if (output_shape < 0) {\n    return errors::InvalidArgument(\n        \"Negative output dimension size caused by overflow when multiplying \",\n        orig_input_tensor.dim_size(0), \" and \", block_shape_product);\n  }\n  external_output_shape.AddDim(output_shape);\n\n  int64_t input_batch_size = orig_input_tensor.dim_size(0);\n  for (int block_dim = 0; block_dim < removed_prefix_block_dims; ++block_dim) {\n    const int64_t size = orig_input_tensor.dim_size(block_dim + 1);\n    input_batch_size *= size;\n    external_output_shape.AddDim(size);\n  }\n  internal_input_shape.AddDim(input_batch_size);\n  internal_output_shape.AddDim(input_batch_size * block_shape_product);\n\n  for (int block_dim = removed_prefix_block_dims;\n       block_dim < block_dims - removed_suffix_block_dims; ++block_dim) {\n    const int64_t pad_start = paddings[2 * block_dim],\n                  pad_end = paddings[2 * block_dim + 1];\n    if (pad_start < 0 || pad_end < 0) {\n      return errors::InvalidArgument(\"Paddings must be non-negative\");\n    }\n    const int64_t input_size = orig_input_tensor.dim_size(block_dim + 1);\n    const int64_t block_shape_value = block_shape[block_dim];\n    const int64_t padded_size = input_size + pad_start + pad_end;\n    if (padded_size % block_shape_value != 0) {\n      return errors::InvalidArgument(\"padded_shape[\", block_dim,\n                                     \"]=\", padded_size,\n                                     \" is not divisible by block_shape[\",\n                                     block_dim, \"]=\", block_shape_value);\n    }\n    internal_input_shape.AddDim(input_size);\n    const int64_t output_size = padded_size / block_shape_value;\n    internal_output_shape.AddDim(output_size);\n    external_output_shape.AddDim(output_size);\n  }\n\n  int64_t depth = 1;\n  for (int dim = block_dims - removed_suffix_block_dims + 1; dim < input_dims;\n       ++dim) {\n    const int64_t size = orig_input_tensor.dim_size(dim);\n    external_output_shape.AddDim(size);\n    depth *= size;\n  }\n  internal_input_shape.AddDim(depth);\n  internal_output_shape.AddDim(depth);\n\n  // Allocate output tensor.\n  Tensor* output_tensor = nullptr;\n  TF_RETURN_IF_ERROR(\n      context->allocate_output(0, external_output_shape, &output_tensor));\n\n  const int64_t* internal_paddings = &paddings[2 * removed_prefix_block_dims];\n  const int64_t* internal_block_shape = &block_shape[removed_prefix_block_dims];\n\n  switch (internal_block_dims) {\n#define TF_SPACETOBATCH_BLOCK_DIMS_CASE(NUM_BLOCK_DIMS)                   \\\n  case NUM_BLOCK_DIMS: {                                                  \\\n    TF_RETURN_IF_ERROR(                                                   \\\n        functor::SpaceToBatchFunctor<Device, T, NUM_BLOCK_DIMS, false>()( \\\n            context->eigen_device<Device>(),                              \\\n            orig_input_tensor.shaped<T, NUM_BLOCK_DIMS + 2>(              \\\n                internal_input_shape.dim_sizes()),                        \\\n            internal_block_shape, internal_paddings,                      \\\n            output_tensor->shaped<T, NUM_BLOCK_DIMS + 2>(                 \\\n                internal_output_shape.dim_sizes())));                     \\\n  } break;                                                                \\\n    /**/\n    TF_SPACETOBATCH_FOR_EACH_NUM_BLOCK_DIMS(TF_SPACETOBATCH_BLOCK_DIMS_CASE)\n#undef TF_SPACETOBATCH_BLOCK_DIMS_CASE\n  }\n  return Status::OK();\n}\n\n}  // namespace\n\ntemplate <typename Device, typename T>\nclass SpaceToBatchNDOp : public OpKernel {\n public:\n  explicit SpaceToBatchNDOp(OpKernelConstruction* context)\n      : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& orig_input_tensor = context->input(0);\n    const Tensor& orig_block_shape = context->input(1);\n    const Tensor& orig_paddings = context->input(2);\n    OP_REQUIRES_OK(context, SpaceToBatchOpCompute<Device, T>(\n                                context, orig_input_tensor, orig_block_shape,\n                                orig_paddings));\n  }\n};\n\ntemplate <typename Device, typename T>\nclass SpaceToBatchOp : public OpKernel {\n public:\n  explicit SpaceToBatchOp(OpKernelConstruction* context) : OpKernel(context) {\n    OP_REQUIRES_OK(context, context->GetAttr(\"block_size\", &block_size_));\n    OP_REQUIRES(\n        context, block_size_ > 1,\n        errors::InvalidArgument(\"Block size should be > 1: \", block_size_));\n    block_shape_ = Tensor(tensorflow::DT_INT64, TensorShape({2}));\n    auto block_shape_vec = block_shape_.vec<int64_t>();\n    block_shape_vec(0) = block_size_;\n    block_shape_vec(1) = block_size_;\n  }\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& in0 = context->input(0);\n    const Tensor& in1 = context->input(1);\n    const int dims = in0.dims();\n\n    static const int kRequiredDims = 4;\n    OP_REQUIRES(context, kRequiredDims == dims,\n                errors::InvalidArgument(\"Input rank should be: \", kRequiredDims,\n                                        \"instead of: \", dims));\n    OP_REQUIRES_OK(context, SpaceToBatchOpCompute<Device, T>(\n                                context, in0, block_shape_, in1));\n  }\n\n private:\n  int block_size_;\n  Tensor block_shape_;\n};\n\n#define REGISTER(T)                                        \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatchND\")           \\\n                              .Device(DEVICE_CPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"block_shape\")   \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchNDOp<CPUDevice, T>); \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatch\")             \\\n                              .Device(DEVICE_CPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchOp<CPUDevice, T>);\n\nTF_CALL_REAL_NUMBER_TYPES(REGISTER);\n#undef REGISTER\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n#define REGISTER(T)                                        \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatchND\")           \\\n                              .Device(DEVICE_GPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"block_shape\")   \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchNDOp<GPUDevice, T>); \\\n  REGISTER_KERNEL_BUILDER(Name(\"SpaceToBatch\")             \\\n                              .Device(DEVICE_GPU)          \\\n                              .TypeConstraint<T>(\"T\")      \\\n                              .HostMemory(\"paddings\"),     \\\n                          SpaceToBatchOp<GPUDevice, T>);\n\nTF_CALL_GPU_NUMBER_TYPES(REGISTER);\n#undef REGISTER\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n}  // end namespace tensorflow\n", "load(\n    \"//tensorflow/core/platform:build_config.bzl\",\n    \"tf_kernel_tests_linkstatic\",\n    \"tf_proto_library\",\n)\nload(\n    \"//tensorflow/core/platform:rules_cc.bzl\",\n    \"cc_library\",\n)\nload(\n    \"//tensorflow:tensorflow.bzl\",\n    \"tf_cc_test\",\n    \"tf_cc_tests\",\n    \"tf_copts\",\n    \"tf_cuda_library\",\n    \"tf_cuda_only_cc_test\",\n    \"tf_kernel_library\",\n    \"tf_mkl_kernel_library\",\n)\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"filegroup\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"get_compatible_with_portable\")\n\n# buildifier: disable=same-origin-load\nload(\"//tensorflow:tensorflow.bzl\", \"tf_version_info_genrule\")\nload(\n    \"//tensorflow/core/platform:build_config_root.bzl\",\n    \"if_static\",\n)\nload(\"@local_config_cuda//cuda:build_defs.bzl\", \"if_cuda\")\nload(\n    \"@local_config_rocm//rocm:build_defs.bzl\",\n    \"if_rocm\",\n)\n\ndefault_package_visibility = [\n    \"//tensorflow/core:__subpackages__\",\n]\n\npackage(\n    default_visibility = default_package_visibility,\n    features = [\n        \"-layering_check\",\n        \"-parse_headers\",\n    ],\n    licenses = [\"notice\"],\n)\n\n# List of exported source files.\nexports_files(\n    srcs = [\n        \"event.proto\",\n        \"example_proto_fast_parsing_test.proto\",\n        \"image_resizer_state.h\",\n        \"memmapped_file_system.proto\",\n        \"saved_tensor_slice.proto\",\n    ],\n    visibility = [\n        \"//tensorflow:internal\",\n        \"//tensorflow/core:__pkg__\",\n    ],\n)\n\n# Export source files needed for mobile builds, which do not use granular targets.\nfilegroup(\n    name = \"mobile_srcs_no_runtime\",\n    srcs = [\n        \"overflow.h\",\n        \"padding.cc\",\n        \"padding.h\",\n        \"tensor_format.cc\",\n        \"tensor_format.h\",\n    ],\n)\n\nfilegroup(\n    name = \"mobile_srcs_only_runtime\",\n    srcs = [\n        \"batch_util.cc\",\n        \"batch_util.h\",\n        \"bcast.cc\",\n        \"bcast.h\",\n        \"command_line_flags.cc\",\n        \"command_line_flags.h\",\n        \"determinism.cc\",\n        \"determinism.h\",\n        \"device_name_utils.cc\",\n        \"device_name_utils.h\",\n        \"dump_graph.cc\",\n        \"dump_graph.h\",\n        \"einsum_op_util.cc\",\n        \"einsum_op_util.h\",\n        \"env_var.cc\",\n        \"env_var.h\",\n        \"equal_graph_def.cc\",\n        \"equal_graph_def.h\",\n        \"example_proto_fast_parsing.cc\",\n        \"example_proto_fast_parsing.h\",\n        \"example_proto_helper.cc\",\n        \"example_proto_helper.h\",\n        \"guarded_philox_random.cc\",\n        \"guarded_philox_random.h\",\n        \"managed_stack_trace.h\",\n        \"matmul_autotune.cc\",\n        \"matmul_autotune.h\",\n        \"matmul_bcast.h\",\n        \"mirror_pad_mode.cc\",\n        \"mirror_pad_mode.h\",\n        \"port.cc\",\n        \"port.h\",\n        \"presized_cuckoo_map.h\",\n        \"ptr_util.h\",\n        \"ragged_to_dense_util.cc\",\n        \"ragged_to_dense_util.h\",\n        \"ragged_to_dense_util_common.h\",\n        \"reffed_status_callback.h\",\n        \"saved_tensor_slice_util.cc\",\n        \"saved_tensor_slice_util.h\",\n        \"stat_summarizer.cc\",\n        \"stat_summarizer.h\",\n        \"strided_slice_op.cc\",\n        \"strided_slice_op.h\",\n        \"tensor_ops_util.h\",\n        \"tensor_slice_reader.cc\",\n        \"tensor_slice_reader.h\",\n        \"tensor_slice_reader_cache.cc\",\n        \"tensor_slice_reader_cache.h\",\n        \"tensor_slice_set.cc\",\n        \"tensor_slice_set.h\",\n        \"tensor_slice_util.h\",\n        \"tensor_slice_writer.cc\",\n        \"tensor_slice_writer.h\",\n        \"use_cudnn.cc\",\n        \"use_cudnn.h\",\n        \"util.cc\",\n        \"util.h\",\n        \"work_sharder.cc\",\n        \"work_sharder.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_private_hdrs\",\n    srcs = [\n        \"activation_mode.h\",\n        \"batch_util.h\",\n        \"bcast.h\",\n        \"command_line_flags.h\",\n        \"debug_events_writer.h\",\n        \"device_name_utils.h\",\n        \"dump_graph.h\",\n        \"einsum_op_util.h\",\n        \"env_var.h\",\n        \"equal_graph_def.h\",\n        \"events_writer.h\",\n        \"example_proto_fast_parsing.h\",\n        \"example_proto_helper.h\",\n        \"exec_on_stall.h\",\n        \"gpu_cuda_alias.h\",\n        \"gpu_device_functions.h\",\n        \"gpu_kernel_helper.h\",\n        \"gpu_launch_config.h\",\n        \"guarded_philox_random.h\",\n        \"matmul_autotune.h\",\n        \"matmul_bcast.h\",\n        \"mirror_pad_mode.h\",\n        \"mkl_threadpool.h\",\n        \"mkl_util.h\",\n        \"onednn_env_vars.h\",\n        \"overflow.h\",\n        \"padding.h\",\n        \"permutation_input_iterator.h\",\n        \"permutation_output_iterator.h\",\n        \"presized_cuckoo_map.h\",\n        \"ptr_util.h\",\n        \"reffed_status_callback.h\",\n        \"saved_tensor_slice_util.h\",\n        \"stat_summarizer.h\",\n        \"stat_summarizer_options.h\",\n        \"stats_calculator.h\",\n        \"stream_executor_util.h\",\n        \"strided_slice_op.h\",\n        \"tensor_format.h\",\n        \"tensor_ops_util.h\",\n        \"tensor_slice_reader.h\",\n        \"tensor_slice_reader_cache.h\",\n        \"tensor_slice_set.h\",\n        \"tensor_slice_util.h\",\n        \"tensor_slice_writer.h\",\n        \"transform_output_iterator.h\",\n        \"use_cudnn.h\",\n        \"util.h\",\n        \"work_sharder.h\",\n        \"xla_config_registry.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_public_hdrs\",\n    srcs = [\n        \"command_line_flags.h\",\n        \"equal_graph_def.h\",\n        \"presized_cuckoo_map.h\",\n        \"tensor_slice_set.h\",\n        \"tensor_slice_util.h\",\n        \"xla_config_registry.h\",\n    ],\n)\n\nfilegroup(\n    name = \"framework_internal_impl_srcs\",\n    srcs = [\n        \"activation_mode.cc\",\n        \"batch_util.cc\",\n        \"bcast.cc\",\n        \"command_line_flags.cc\",\n        \"debug_events_writer.cc\",\n        \"device_name_utils.cc\",\n        \"dump_graph.cc\",\n        \"equal_graph_def.cc\",\n        \"events_writer.cc\",\n        \"example_proto_fast_parsing.cc\",\n        \"example_proto_helper.cc\",\n        \"guarded_philox_random.cc\",\n        \"matmul_autotune.cc\",\n        \"mirror_pad_mode.cc\",\n        \"saved_tensor_slice_util.cc\",\n        \"stat_summarizer.cc\",\n        \"strided_slice_op.cc\",\n        \"tensor_slice_reader.cc\",\n        \"tensor_slice_reader_cache.cc\",\n        \"tensor_slice_set.cc\",\n        \"tensor_slice_writer.cc\",\n        \"use_cudnn.cc\",\n        \"util.cc\",\n        \"work_sharder.cc\",\n        \"xla_config_registry.cc\",\n    ],\n)\n\nfilegroup(\n    name = \"lib_internal_public_hdrs\",\n    srcs = [\n        \"env_var.h\",\n        \"use_cudnn.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"lib_hdrs\",\n    srcs = [\n        \"gpu_cuda_alias.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"memmapped_file_system_hdrs\",\n    srcs = [\n        \"memmapped_file_system.h\",\n        \"memmapped_file_system_writer.h\",\n    ],\n)\n\nfilegroup(\n    name = \"memmapped_file_system_srcs\",\n    srcs = [\n        \"memmapped_file_system.cc\",\n        \"memmapped_file_system_writer.cc\",\n    ],\n)\n\nfilegroup(\n    name = \"port_hdrs\",\n    srcs = [\n        \"port.h\",\n    ],\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n)\n\nfilegroup(\n    name = \"test_hdrs\",\n    testonly = 1,\n    srcs = [\n        \"reporter.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"mkl_util_hdrs\",\n    srcs = [\n        \"mkl_threadpool.h\",\n        \"mkl_util.h\",\n        \"onednn_env_vars.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"mkl_util_test_srcs\",\n    testonly = 1,\n    srcs = [\n        \"mkl_util_test.cc\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"android_test_hdrs\",\n    testonly = 1,\n    srcs = [\n        \"reporter.h\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"android_test_srcs\",\n    testonly = 1,\n    srcs = [\n        \"reporter.cc\",\n        \":android_test_hdrs\",\n    ],\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\nfilegroup(\n    name = \"framework_srcs\",\n    srcs = [\n        \"activation_mode.h\",\n        \"batch_util.h\",\n        \"bcast.h\",\n        \"debug_events_writer.h\",\n        \"device_name_utils.h\",\n        \"dump_graph.h\",\n        \"einsum_op_util.h\",\n        \"events_writer.h\",\n        \"example_proto_fast_parsing.h\",\n        \"example_proto_helper.h\",\n        \"gpu_kernel_helper.h\",\n        \"guarded_philox_random.h\",\n        \"managed_stack_trace.h\",\n        \"matmul_autotune.h\",\n        \"matmul_bcast.h\",\n        \"mirror_pad_mode.h\",\n        \"padding.h\",\n        \"port.h\",\n        \"ptr_util.h\",\n        \"reffed_status_callback.h\",\n        \"saved_tensor_slice_util.h\",\n        \"stat_summarizer.h\",\n        \"stat_summarizer_options.h\",\n        \"stream_executor_util.h\",\n        \"strided_slice_op.h\",\n        \"tensor_format.h\",\n        \"tensor_ops_util.h\",\n        \"tensor_slice_reader.h\",\n        \"tensor_slice_reader_cache.h\",\n        \"tensor_slice_writer.h\",\n        \"use_cudnn.h\",\n        \"util.h\",\n        \"work_sharder.h\",\n    ],\n)\n\n# Version info generation needs to be generated in the same package where it\n# is written.\ntf_version_info_genrule(\n    name = \"version_info_gen\",\n    out = \"version_info.h\",\n    compatible_with = get_compatible_with_portable(),\n)\n\ncc_library(\n    name = \"version_info\",\n    hdrs = [\"version_info.h\"],\n    visibility = [\"//visibility:public\"],\n)\n\ncc_library(\n    name = \"stats_calculator_portable\",\n    srcs = [\n        \"stat_summarizer_options.h\",\n        \"stats_calculator.cc\",\n    ],\n    hdrs = [\n        \"stats_calculator.h\",\n    ],\n    copts = tf_copts(),\n    visibility = [\n        \"//tensorflow:internal\",\n    ],\n)\n\ntf_mkl_kernel_library(\n    name = \"onednn_env_vars\",\n    srcs = [\"onednn_env_vars.cc\"],\n    hdrs = [\"onednn_env_vars.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//tensorflow/core/kernels:ops_util\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_to_dense_util_common\",\n    hdrs = [\n        \"ragged_to_dense_util_common.h\",\n    ],\n    visibility = [\n        \"//visibility:public\",\n    ],\n)\n\ncc_library(\n    name = \"ragged_to_dense_util\",\n    srcs = [\n        \"ragged_to_dense_util.cc\",\n    ],\n    hdrs = [\n        \"ragged_to_dense_util.h\",\n    ],\n    deps = [\n        \":ragged_to_dense_util_common\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n    ],\n)\n\ntf_cc_test(\n    name = \"ragged_to_dense_util_test\",\n    srcs = [\n        \"ragged_to_dense_util_test.cc\",\n    ],\n    deps = [\n        \":ragged_to_dense_util\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:testlib\",\n        \"@com_google_googletest//:gtest_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"stats_calculator_test\",\n    srcs = [\"stats_calculator_test.cc\"],\n    deps = [\n        \":stats_calculator_portable\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ncc_library(\n    name = \"reporter\",\n    srcs = [\"reporter.cc\"],\n    hdrs = [\"reporter.h\"],\n    visibility = [\"//tensorflow/core:__subpackages__\"],\n    deps = [\n        \":test_log_proto_impl_cc\",\n        \"//tensorflow/core/platform:env\",\n        \"//tensorflow/core/platform:env_impl\",\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/platform:str_util\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"port\",\n    srcs = [\"port.cc\"],\n    hdrs = [\"port.h\"],\n    copts = tf_copts(),\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n    alwayslink = 1,\n)\n\ncc_library(\n    name = \"managed_stack_trace\",\n    hdrs = [\"managed_stack_trace.h\"],\n    visibility = [\n        \"//tensorflow/c/eager:__pkg__\",\n        \"//tensorflow/compiler/mlir/tensorflow:__pkg__\",\n        \"//tensorflow/core:__pkg__\",\n        \"//tensorflow/core/common_runtime/eager:__pkg__\",\n        \"//tensorflow/core/framework:__pkg__\",\n        \"//tensorflow/core/platform:__pkg__\",\n        \"//tensorflow/python:__pkg__\",\n        \"//tensorflow/python/eager:__pkg__\",\n        \"//tensorflow/python/util:__pkg__\",\n    ],\n    deps = [\n        \"//tensorflow/core/platform:stack_frame\",\n        \"@com_google_absl//absl/strings\",\n        \"@com_google_absl//absl/types:optional\",\n    ],\n)\n\ntf_cuda_library(\n    name = \"gpu_cuda_alias\",\n    hdrs = [\"gpu_cuda_alias.h\"],\n)\n\ntf_cuda_library(\n    name = \"gpu_device_functions\",\n    hdrs = [\"gpu_device_functions.h\"],\n    deps = [\n        \":gpu_cuda_alias\",\n        \"//tensorflow/core/platform:types\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ncc_library(\n    name = \"overflow\",\n    hdrs = [\"overflow.h\"],\n    visibility = [\n        \"//tensorflow:internal\",\n    ],\n    deps = [\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:macros\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"exec_on_stall\",\n    hdrs = [\"exec_on_stall.h\"],\n    deps = [\n        \"//tensorflow/core/platform:env\",\n        \"//tensorflow/core/platform:mutex\",\n    ],\n)\n\ncc_library(\n    name = \"ptr_util\",\n    hdrs = [\"ptr_util.h\"],\n)\n\ncc_library(\n    name = \"tensor_format\",\n    srcs = [\"tensor_format.cc\"],\n    hdrs = [\"tensor_format.h\"],\n    deps = [\n        \"//tensorflow/core/framework:tensor\",\n        \"//tensorflow/core/lib/gtl:array_slice\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"//tensorflow/core/platform:types\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"padding\",\n    srcs = [\"padding.cc\"],\n    hdrs = [\"padding.h\"],\n    deps = [\n        \":tensor_format\",\n        \"//tensorflow/core/framework:attr_value_proto_cc\",\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n    ],\n)\n\ncc_library(\n    name = \"einsum_op_util\",\n    srcs = [\"einsum_op_util.cc\"],\n    hdrs = [\"einsum_op_util.h\"],\n    deps = [\n        \"//tensorflow/core/lib/core:errors\",\n        \"//tensorflow/core/lib/core:status\",\n        \"//tensorflow/core/lib/gtl:inlined_vector\",\n        \"@com_google_absl//absl/container:flat_hash_map\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ncc_library(\n    name = \"env_var\",\n    srcs = [\"env_var.cc\"],\n    hdrs = [\"env_var.h\"],\n    deps = [\n        \"//tensorflow/core/platform:errors\",\n        \"//tensorflow/core/platform:logging\",\n        \"//tensorflow/core/platform:numbers\",\n        \"//tensorflow/core/platform:status\",\n        \"//tensorflow/core/platform:str_util\",\n        \"//tensorflow/core/platform:strcat\",\n        \"//tensorflow/core/platform:stringpiece\",\n        \"//tensorflow/core/platform:types\",\n    ],\n)\n\ncc_library(\n    name = \"incremental_barrier\",\n    srcs = [\"incremental_barrier.cc\"],\n    hdrs = [\"incremental_barrier.h\"],\n    visibility = default_package_visibility + [\"//tensorflow_serving:__subpackages__\"],\n    deps = [\n        \"//tensorflow/core:lib\",\n        \"@com_google_absl//absl/functional:bind_front\",\n    ],\n)\n\n# Note: This rule should not be used as a dependency for kernels. Use the\n# \"determinism_for_kernels\" rule below instead.\ncc_library(\n    name = \"determinism\",\n    srcs = [\"determinism.cc\"],\n    hdrs = [\"determinism.h\"],\n    copts = tf_copts(),\n    visibility = [\"//tensorflow:__subpackages__\"],\n    deps = [\n        \"//tensorflow/core/platform:mutex\",\n        \"//tensorflow/core/util:env_var\",\n    ],\n    alwayslink = 1,\n)\n\nfilegroup(\n    name = \"determinism_hdr\",\n    srcs = [\"determinism.h\"],\n    compatible_with = get_compatible_with_portable(),\n    visibility = [\"//tensorflow:__subpackages__\"],\n)\n\ncc_library(\n    name = \"determinism_hdr_lib\",\n    hdrs = [\":determinism_hdr\"],\n    compatible_with = get_compatible_with_portable(),\n    visibility = [\"//visibility:private\"],\n)\n\n# This alias should be used as a dependency for kernels which use determinism,\n# as well any other rules which are in the same shared library as the kernels.\n# This rule does not include the determinism.cc file for nonstatic builds. The\n# reason is that for nonstatic builds, the shared object which contains the\n# kernels (e.g. _pywrap_tensorflow_internal.so) must not contain the global\n# variable in determinism.cc, since the global variable is already in\n# libtensorflow_framework.so.\nalias(\n    name = \"determinism_for_kernels\",\n    actual = if_static(\":determinism\", \":determinism_hdr_lib\"),\n    visibility = [\"//tensorflow:__subpackages__\"],\n)\n\ncc_library(\n    name = \"determinism_test_util\",\n    hdrs = [\":determinism_test_util.h\"],\n    deps = [\":determinism\"],\n)\n\ntf_kernel_library(\n    name = \"cuda_solvers\",\n    srcs = [\"cuda_solvers.cc\"],\n    hdrs = [\"gpu_solvers.h\"],\n    compatible_with = [],\n    # @local_config_cuda//cuda:cusolver_static, //third_party/eigen3:blas,\n    # and //third_party/libf2c all contain various parts of BLAS, LAPACK,\n    # and f2c helper functions in global namespace. Tell the compiler to\n    # allow multiple definitions when linking this.\n    linkopts = select({\n        \"//tensorflow:macos\": [],\n        \"//tensorflow:windows\": [],\n        \"//conditions:default\": [\"-Wl,-z,muldefs\"],\n    }),\n    visibility = [\"//tensorflow/core/kernels:friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/platform/default/build_config:cublas_plugin\",\n        \"//tensorflow/stream_executor/cuda:cublas_lib\",\n        \"//tensorflow/stream_executor/cuda:cusolver_lib\",\n    ],\n)\n\ntf_kernel_library(\n    name = \"rocm_solvers\",\n    srcs = [\"rocm_solvers.cc\"],\n    hdrs = [\"gpu_solvers.h\"],\n    compatible_with = [],\n    visibility = [\"//tensorflow/core/kernels:friends\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/stream_executor/lib\",\n        \"//tensorflow/stream_executor/platform:dso_loader\",\n        \"//tensorflow/stream_executor/rocm:rocblas_plugin\",\n        \"//tensorflow/stream_executor/rocm:rocblas_wrapper\",\n        \"//tensorflow/stream_executor/rocm:rocm_gpu_executor\",\n        \"//tensorflow/stream_executor/rocm:rocsolver_wrapper\",\n    ] + if_rocm([\n        \"@local_config_rocm//rocm:rocprim\",\n    ]),\n)\n\ntf_kernel_library(\n    name = \"cuda_sparse\",\n    srcs = if_cuda([\"cuda_sparse.cc\"]) + if_rocm([\"rocm_sparse.cc\"]),\n    hdrs = [\n        \"cuda_sparse.h\",\n        \"gpu_solvers.h\",\n    ],\n    compatible_with = [],\n    deps = [\n        \":cuda_solvers\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n    ] + if_cuda([\n        \"//tensorflow/stream_executor/cuda:cusparse_lib\",\n        \"@local_config_cuda//cuda:cub_headers\",\n    ]) + if_rocm([\n        \"//tensorflow/stream_executor/rocm:rocsolver_wrapper\",\n        \"//tensorflow/stream_executor/rocm:hipsparse_wrapper\",\n    ]),\n)\n\ncc_library(\n    name = \"image_resizer_state\",\n    hdrs = [\"image_resizer_state.h\"],\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core/framework:bounds_check\",\n        \"//third_party/eigen3\",\n    ],\n)\n\n# Tests.\ntf_cc_test(\n    name = \"overflow_test\",\n    size = \"small\",\n    srcs = [\"overflow_test.cc\"],\n    deps = [\n        \":overflow\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cc_test(\n    name = \"exec_on_stall_test\",\n    size = \"small\",\n    srcs = [\"exec_on_stall_test.cc\"],\n    deps = [\n        \":exec_on_stall\",\n        \"//tensorflow/core:framework_lite\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n    ],\n)\n\ntf_cuda_only_cc_test(\n    name = \"gpu_kernel_helper_test\",\n    srcs = [\n        \"gpu_kernel_helper_test.cu.cc\",\n    ],\n    tags = [\n        \"no_cuda_asan\",  # TODO(b/171342366): re-enable.\n    ],\n    deps = [\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//third_party/eigen3\",\n    ],\n)\n\ntf_cc_tests(\n    name = \"higher_level_tests\",\n    size = \"small\",\n    srcs = [\n        \"bcast_test.cc\",\n        \"command_line_flags_test.cc\",\n        \"device_name_utils_test.cc\",\n        \"dump_graph_test.cc\",\n        \"equal_graph_def_test.cc\",\n        \"events_writer_test.cc\",\n        \"example_proto_fast_parsing_test.cc\",\n        \"example_proto_helper_test.cc\",\n        \"matmul_bcast_test.cc\",\n        \"memmapped_file_system_test.cc\",\n        \"presized_cuckoo_map_test.cc\",\n        \"reffed_status_callback_test.cc\",\n        \"reporter_test.cc\",\n        \"saved_tensor_slice_util_test.cc\",\n        \"semver_test.cc\",\n        \"stat_summarizer_test.cc\",\n        \"tensor_format_test.cc\",\n        \"tensor_slice_reader_test.cc\",\n        \"tensor_slice_set_test.cc\",\n        \"tensor_slice_util_test.cc\",\n        \"tensor_slice_writer_test.cc\",\n        \"work_sharder_test.cc\",\n    ],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = tf_kernel_tests_linkstatic(),\n    visibility = [\n        \"//tensorflow/core:__pkg__\",\n    ],\n    deps = [\n        \":protos_test_cc\",\n        \"//tensorflow/cc:cc_ops\",\n        \"//tensorflow/cc:cc_ops_internal\",\n        \"//tensorflow/cc:function_ops\",\n        \"//tensorflow/cc:ops\",\n        \"//tensorflow/cc:scope\",\n        \"//tensorflow/cc:sendrecv_ops\",\n        \"//tensorflow/cc:while_loop\",\n        \"//tensorflow/core\",\n        \"//tensorflow/core:core_cpu\",\n        \"//tensorflow/core:core_cpu_internal\",\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:framework_internal\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:lib_internal\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core:testlib\",\n        \"//tensorflow/core/common_runtime:direct_session_internal\",\n        \"//tensorflow/core/kernels:ops_util\",\n        \"//tensorflow/core/platform:regexp\",\n        \"//third_party/eigen3\",\n        \"@com_google_absl//absl/base\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n        \"@com_google_absl//absl/memory\",\n        \"@com_google_absl//absl/strings\",\n    ],\n)\n\ntf_cc_test(\n    name = \"debug_events_writer_test\",\n    size = \"small\",\n    srcs = [\"debug_events_writer_test.cc\"],\n    linkopts = select({\n        \"//tensorflow:macos\": [\"-headerpad_max_install_names\"],\n        \"//conditions:default\": [],\n    }),\n    linkstatic = tf_kernel_tests_linkstatic(),\n    deps = [\n        \"//tensorflow/core:framework\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:ops\",\n        \"//tensorflow/core:protos_all_cc\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"@com_google_absl//absl/container:flat_hash_set\",\n    ],\n)\n\ntf_cc_test(\n    name = \"incremental_barrier_test\",\n    srcs = [\"incremental_barrier_test.cc\"],\n    deps = [\n        \":incremental_barrier\",\n        \"//tensorflow/core:lib\",\n        \"//tensorflow/core:test\",\n        \"//tensorflow/core:test_main\",\n        \"//tensorflow/core/platform\",\n        \"@com_google_absl//absl/functional:bind_front\",\n        \"@com_google_absl//absl/time\",\n    ],\n)\n\n# Proto libraries.\ntf_proto_library(\n    name = \"test_log_proto_impl\",\n    srcs = [\"test_log.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    # Not to be used outside of tensorflow/core.\n    visibility = [\"//tensorflow/core:__pkg__\"],\n)\n\ntf_proto_library(\n    name = \"protos_test\",\n    srcs = [\"example_proto_fast_parsing_test.proto\"],\n    cc_api_version = 2,\n    protodeps = [\"//tensorflow/core:protos_all\"],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"event_proto\",\n    srcs = [\"event.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \"//tensorflow/core/framework:summary_proto\",\n        \"//tensorflow/core/framework:resource_handle_proto\",\n        \"//tensorflow/core/framework:tensor_proto\",\n        \"//tensorflow/core/framework:tensor_shape_proto\",\n        \"//tensorflow/core/framework:types_proto\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"saved_tensor_slice_proto\",\n    srcs = [\"saved_tensor_slice.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \"//tensorflow/core/framework:resource_handle_proto\",\n        \"//tensorflow/core/framework:tensor_proto\",\n        \"//tensorflow/core/framework:tensor_shape_proto\",\n        \"//tensorflow/core/framework:tensor_slice_proto\",\n        \"//tensorflow/core/framework:types_proto\",\n        \"//tensorflow/core/framework:versions_proto\",\n    ],\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"memmapped_file_system_proto\",\n    srcs = [\"memmapped_file_system.proto\"],\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    visibility = [\"//visibility:public\"],\n)\n\ntf_proto_library(\n    name = \"protos_all\",\n    cc_api_version = 2,\n    make_default_target_header_only = True,\n    protodeps = [\n        \":event_proto\",\n        \":saved_tensor_slice_proto\",\n        \":memmapped_file_system_proto\",\n    ],\n    tags = [\n        \"alt_dep=//third_party/tensorflow/core:protos_all\",\n    ],\n)\n", "# Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n# ==============================================================================\n\"\"\"Functional tests for SpaceToBatch and BatchToSpace ops.\"\"\"\n\nimport numpy as np\n\nfrom tensorflow.python.framework import constant_op\nfrom tensorflow.python.framework import dtypes\nfrom tensorflow.python.framework import errors\nfrom tensorflow.python.framework import ops\nfrom tensorflow.python.framework import tensor_util\nfrom tensorflow.python.framework import test_util\nfrom tensorflow.python.ops import array_ops\nfrom tensorflow.python.ops import gen_array_ops\nfrom tensorflow.python.ops import gradient_checker\nfrom tensorflow.python.ops import math_ops\nfrom tensorflow.python.platform import test\n\n\ndef space_to_batch_direct(input_array, block_shape, paddings):\n  \"\"\"Direct Python implementation of space-to-batch conversion.\n\n  This is used for tests only.\n\n  Args:\n    input_array: N-D array\n    block_shape: 1-D array of shape [num_block_dims].\n    paddings: 2-D array of shape [num_block_dims, 2].\n\n  Returns:\n    Converted tensor.\n  \"\"\"\n  input_array = np.array(input_array)\n  block_shape = np.array(block_shape)\n  num_block_dims = len(block_shape)\n  paddings = np.array(paddings).reshape((len(block_shape), 2))\n\n  padded = np.pad(input_array,\n                  pad_width=([[0, 0]] + list(paddings) + [[0, 0]] *\n                             (input_array.ndim - 1 - num_block_dims)),\n                  mode=\"constant\")\n  reshaped_padded_shape = [input_array.shape[0]]\n  output_shape = [input_array.shape[0] * np.prod(block_shape)]\n  for block_dim, block_shape_value in enumerate(block_shape):\n    reduced_size = padded.shape[block_dim + 1] // block_shape_value\n    reshaped_padded_shape.append(reduced_size)\n    output_shape.append(reduced_size)\n    reshaped_padded_shape.append(block_shape_value)\n  reshaped_padded_shape.extend(input_array.shape[num_block_dims + 1:])\n  output_shape.extend(input_array.shape[num_block_dims + 1:])\n\n  reshaped_padded = padded.reshape(reshaped_padded_shape)\n  permuted_reshaped_padded = np.transpose(reshaped_padded, (\n      list(np.arange(num_block_dims) * 2 + 2) + [0] +\n      list(np.arange(num_block_dims) * 2 + 1) + list(\n          np.arange(input_array.ndim - num_block_dims - 1) + 1 + num_block_dims\n          * 2)))\n  return permuted_reshaped_padded.reshape(output_shape)\n\n\nclass PythonOpImpl(object):\n\n  @staticmethod\n  def space_to_batch(*args, **kwargs):\n    return array_ops.space_to_batch(*args, **kwargs)\n\n  @staticmethod\n  def batch_to_space(*args, **kwargs):\n    return array_ops.batch_to_space(*args, **kwargs)\n\n\nclass CppOpImpl(object):\n\n  @staticmethod\n  def space_to_batch(*args, **kwargs):\n    return gen_array_ops.space_to_batch(*args, **kwargs)\n\n  @staticmethod\n  def batch_to_space(*args, **kwargs):\n    return gen_array_ops.batch_to_space(*args, **kwargs)\n\n\nclass SpaceToBatchTest(test.TestCase, PythonOpImpl):\n  \"\"\"Tests input-output pairs for the SpaceToBatch and BatchToSpace ops.\n\n  This uses the Python compatibility wrapper that forwards to space_to_batch_nd.\n  \"\"\"\n\n  def _testPad(self, inputs, paddings, block_size, outputs):\n    with self.cached_session():\n      # outputs = space_to_batch(inputs)\n      x_tf = self.space_to_batch(\n          math_ops.cast(inputs, dtypes.float32),\n          paddings,\n          block_size=block_size)\n      self.assertAllEqual(x_tf, outputs)\n      # inputs = batch_to_space(outputs)\n      x_tf = self.batch_to_space(\n          math_ops.cast(outputs, dtypes.float32),\n          paddings,\n          block_size=block_size)\n      self.assertAllEqual(x_tf, inputs)\n\n  def _testOne(self, inputs, block_size, outputs):\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    self._testPad(inputs, paddings, block_size, outputs)\n\n  # [1, 2, 2, 1] <-> [4, 1, 1, 1]\n  @test_util.run_deprecated_v1\n  def testSmallInput2x2(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    block_size = 2\n    x_out = [[[[1]]], [[[2]]], [[[3]]], [[[4]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # [1, 2, 2, 1] <-> [1, 3, 3, 1] (padding) <-> [9, 1, 1, 1]\n  @test_util.run_deprecated_v1\n  def testSmallInput2x2Pad1x0(self):\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.array([[1, 0], [1, 0]], dtype=np.int32)\n    block_size = 3\n    x_out = [[[[0]]], [[[0]]], [[[0]]], [[[0]]], [[[1]]], [[[2]]], [[[0]]],\n             [[[3]]], [[[4]]]]\n    self._testPad(x_np, paddings, block_size, x_out)\n\n  # Test with depth larger than 1.\n  # [1, 2, 2, 3] <-> [4, 1, 1, 3]\n  @test_util.run_deprecated_v1\n  def testDepthInput2x2(self):\n    x_np = [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]\n    block_size = 2\n    x_out = [[[[1, 2, 3]]], [[[4, 5, 6]]], [[[7, 8, 9]]], [[[10, 11, 12]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test for larger input dimensions.\n  # [1, 4, 4, 1] <-> [4, 2, 2, 1]\n  @test_util.run_deprecated_v1\n  def testLargerInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]], [[9], [11]]], [[[2], [4]], [[10], [12]]],\n             [[[5], [7]], [[13], [15]]], [[[6], [8]], [[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Test with batch larger than 1.\n  # [2, 2, 4, 1] <-> [8, 1, 2, 1]\n  @test_util.run_deprecated_v1\n  def testBatchInput2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]]],\n            [[[9], [10], [11], [12]], [[13], [14], [15], [16]]]]\n    block_size = 2\n    x_out = [[[[1], [3]]], [[[9], [11]]], [[[2], [4]]], [[[10], [12]]],\n             [[[5], [7]]], [[[13], [15]]], [[[6], [8]]], [[[14], [16]]]]\n    self._testOne(x_np, block_size, x_out)\n\n  # Tests for larger input spatial dimensions AND batch larger than 1, to ensure\n  # that elements are correctly laid out spatially and properly interleaved\n  # along the batch dimension.\n  # [2, 4, 4, 1] <-> [8, 2, 2, 1]\n  @test_util.run_deprecated_v1\n  def testLargerInputBatch2x2(self):\n    x_np = [[[[1], [2], [3], [4]], [[5], [6], [7], [8]],\n             [[9], [10], [11], [12]], [[13], [14], [15], [16]]],\n            [[[17], [18], [19], [20]], [[21], [22], [23], [24]],\n             [[25], [26], [27], [28]], [[29], [30], [31], [32]]]]\n    x_out = [[[[1], [3]], [[9], [11]]], [[[17], [19]], [[25], [27]]],\n             [[[2], [4]], [[10], [12]]], [[[18], [20]], [[26], [28]]],\n             [[[5], [7]], [[13], [15]]], [[[21], [23]], [[29], [31]]],\n             [[[6], [8]], [[14], [16]]], [[[22], [24]], [[30], [32]]]]\n    block_size = 2\n    self._testOne(x_np, block_size, x_out)\n\n\nclass SpaceToBatchCppTest(SpaceToBatchTest, CppOpImpl):\n  \"\"\"Tests input-output pairs for the SpaceToBatch and BatchToSpace ops.\n\n  This uses the C++ ops.\n  \"\"\"\n  pass\n\n\nclass SpaceToBatchNDTest(test.TestCase):\n  \"\"\"Tests input-output pairs for the SpaceToBatchND and BatchToSpaceND ops.\"\"\"\n\n  def _testPad(self, inputs, block_shape, paddings, outputs):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings).reshape((len(block_shape), 2))\n    for use_gpu in [False, True]:\n      with self.cached_session(use_gpu=use_gpu):\n        # outputs = space_to_batch(inputs)\n        x_tf = array_ops.space_to_batch_nd(\n            math_ops.cast(inputs, dtypes.float32), block_shape, paddings)\n        self.assertAllEqual(x_tf, outputs)\n        # inputs = batch_to_space(outputs)\n        x_tf = array_ops.batch_to_space_nd(\n            math_ops.cast(outputs, dtypes.float32), block_shape, paddings)\n        self.assertAllEqual(x_tf, inputs)\n\n  def _testDirect(self, input_shape, block_shape, paddings):\n    inputs = np.arange(np.prod(input_shape), dtype=np.float32)\n    inputs = inputs.reshape(input_shape)\n    self._testPad(inputs, block_shape, paddings,\n                  space_to_batch_direct(inputs, block_shape, paddings))\n\n  @test_util.run_deprecated_v1\n  def testZeroBlockDimsZeroRemainingDims(self):\n    self._testPad(\n        inputs=[1, 2],\n        block_shape=[],\n        paddings=[],\n        outputs=[1, 2],)\n\n  @test_util.run_deprecated_v1\n  def testZeroBlockDimsOneRemainingDim(self):\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[1, 2], [3, 4]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[1, 2], [3, 4]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[1, 2], [3, 4]])\n\n  @test_util.run_deprecated_v1\n  def testZeroBlockDimsTwoRemainingDims(self):\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[],\n        paddings=[],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with a no-op block dim.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1],\n        paddings=[[0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n    # Same thing, but with two no-op block dims.\n    self._testPad(\n        inputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\n        block_shape=[1, 1],\n        paddings=[[0, 0], [0, 0]],\n        outputs=[[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n\n  @test_util.run_deprecated_v1\n  def testOneBlockDimZeroRemainingDims(self):\n    self._testPad(\n        inputs=[[1, 2, 3], [4, 5, 6]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[0, 2], [0, 5], [1, 3], [4, 6]])\n\n  @test_util.run_deprecated_v1\n  def testOneBlockDimOneRemainingDim(self):\n    self._testPad(\n        inputs=[[[1, 11], [2, 21], [3, 31]], [[4, 41], [5, 51], [6, 61]]],\n        block_shape=[2],\n        paddings=[1, 0],\n        outputs=[[[0, 0], [2, 21]], [[0, 0], [5, 51]], [[1, 11], [3, 31]],\n                 [[4, 41], [6, 61]]])\n\n  @test_util.run_deprecated_v1\n  def testDirect(self):\n    # Test with zero-size remaining dimension.\n    self._testDirect(\n        input_shape=[3, 1, 2, 0], block_shape=[3], paddings=[[0, 2]])\n\n    # Test with zero-size blocked dimension.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[0, 0]])\n\n    # Test with padding up from zero size.\n    self._testDirect(\n        input_shape=[3, 0, 2, 5], block_shape=[3], paddings=[[1, 2]])\n\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2],\n        paddings=[[1, 2], [0, 0], [3, 0]])\n\n    self._testDirect(\n        input_shape=[3, 3, 4, 5, 2],\n        block_shape=[3, 4, 2, 2],\n        paddings=[[1, 2], [0, 0], [3, 0], [0, 0]])\n\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0]])\n\n    self._testDirect(\n        input_shape=[3, 2, 2, 3, 4, 5, 2, 5],\n        block_shape=[1, 1, 3, 4, 2, 2, 1],\n        paddings=[[0, 0], [0, 0], [1, 2], [0, 0], [3, 0], [0, 0], [0, 0]])\n\n\nclass SpaceToBatchSpaceToDepth(test.TestCase, PythonOpImpl):\n\n  # Verifies that: space_to_batch(x) = transpose(space_to_depth(transpose(x)))\n  @test_util.run_deprecated_v1\n  def testSpaceToDepthTranspose(self):\n    x = np.arange(5 * 10 * 16 * 7, dtype=np.float32).reshape([5, 10, 16, 7])\n    block_size = 2\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    y1 = self.space_to_batch(x, paddings, block_size=block_size)\n    y2 = array_ops.transpose(\n        array_ops.space_to_depth(\n            array_ops.transpose(x, [3, 1, 2, 0]), block_size=block_size),\n        [3, 1, 2, 0])\n    with self.session():\n      self.assertAllEqual(y1, y2)\n\n\nclass SpaceToBatchSpaceToDepthCpp(SpaceToBatchSpaceToDepth, CppOpImpl):\n  pass\n\n\nclass SpaceToBatchErrorHandlingTest(test.TestCase, PythonOpImpl):\n\n  @test_util.run_deprecated_v1\n  def testInputWrongDimMissingBatch(self):\n    # The input is missing the first dimension (\"batch\")\n    x_np = [[[1], [2]], [[3], [4]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 2\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testBlockSize0(self):\n    # The block size is 0.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 0\n    with self.assertRaises(ValueError):\n      out_tf = self.space_to_batch(x_np, paddings, block_size)\n      out_tf.eval()\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeOne(self):\n    # The block size is 1. The block size needs to be > 1.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 1\n    with self.assertRaises(ValueError):\n      out_tf = self.space_to_batch(x_np, paddings, block_size)\n      out_tf.eval()\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeLarger(self):\n    # The block size is too large for this input.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 10\n    with self.assertRaises(ValueError):\n      out_tf = self.space_to_batch(x_np, paddings, block_size)\n      self.evaluate(out_tf)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisibleWidth(self):\n    # The block size divides width but not height.\n    x_np = [[[[1], [2], [3]], [[3], [4], [7]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 3\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisibleHeight(self):\n    # The block size divides height but not width.\n    x_np = [[[[1], [2]], [[3], [4]], [[5], [6]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 3\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisibleBoth(self):\n    # The block size does not divide neither width or height.\n    x_np = [[[[1], [2]], [[3], [4]]]]\n    paddings = np.zeros((2, 2), dtype=np.int32)\n    block_size = 3\n    with self.assertRaises(ValueError):\n      _ = self.space_to_batch(x_np, paddings, block_size)\n\n  @test_util.run_deprecated_v1\n  def testUnknownShape(self):\n    t = self.space_to_batch(\n        array_ops.placeholder(dtypes.float32),\n        array_ops.placeholder(dtypes.int32),\n        block_size=4)\n    self.assertEqual(4, t.get_shape().ndims)\n\n\nclass SpaceToBatchErrorHandlingCppTest(SpaceToBatchErrorHandlingTest,\n                                       CppOpImpl):\n  pass\n\n\nclass SpaceToBatchNDErrorHandlingTest(test.TestCase):\n\n  def _testStaticShape(self, input_shape, block_shape, paddings, error):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings)\n\n    # Try with sizes known at graph construction time.\n    with self.assertRaises(error):\n      _ = array_ops.space_to_batch_nd(\n          np.zeros(input_shape, np.float32), block_shape, paddings)\n\n  def _testDynamicShape(self, input_shape, block_shape, paddings):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings)\n    # Try with sizes unknown at graph construction time.\n    input_placeholder = array_ops.placeholder(dtypes.float32)\n    block_shape_placeholder = array_ops.placeholder(\n        dtypes.int32, shape=block_shape.shape)\n    paddings_placeholder = array_ops.placeholder(dtypes.int32)\n    t = array_ops.space_to_batch_nd(input_placeholder, block_shape_placeholder,\n                                    paddings_placeholder)\n\n    with self.assertRaises(ValueError):\n      _ = t.eval({\n          input_placeholder: np.zeros(input_shape, np.float32),\n          block_shape_placeholder: block_shape,\n          paddings_placeholder: paddings\n      })\n\n  def _testShape(self, input_shape, block_shape, paddings, error):\n    self._testStaticShape(input_shape, block_shape, paddings, error)\n    self._testDynamicShape(input_shape, block_shape, paddings)\n\n  @test_util.run_deprecated_v1\n  def testBlockSize0(self):\n    # The block size is 0.\n    self._testShape([1, 2, 2], [0, 2], [[0, 0], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNegative(self):\n    self._testShape([1, 2, 2], [-1, 2], [[0, 0], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testNegativePadding(self):\n    # The padding is negative.\n    self._testShape([1, 2, 2], [1, 1], [[0, -1], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testBlockSizeNotDivisible(self):\n    # The padded size is not divisible by the block size.\n    self._testShape([1, 2, 3, 1], [3, 3], [[0, 0], [0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testBlockDimsMismatch(self):\n    # Shape of block_shape does not match shape of paddings.\n    self._testStaticShape([1, 3, 3, 1], [3, 3], [[0, 0]], ValueError)\n\n  @test_util.run_deprecated_v1\n  def testUnknown(self):\n    # Verify that input shape and paddings shape can be unknown.\n    _ = array_ops.space_to_batch_nd(\n        array_ops.placeholder(dtypes.float32),\n        array_ops.placeholder(\n            dtypes.int32, shape=(2,)),\n        array_ops.placeholder(dtypes.int32))\n\n    # Only number of input dimensions is known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(None, None, None, None)),\n        array_ops.placeholder(\n            dtypes.int32, shape=(2,)),\n        array_ops.placeholder(dtypes.int32))\n    self.assertEqual(4, t.get_shape().ndims)\n\n    # Dimensions are partially known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(None, None, None, 2)),\n        array_ops.placeholder(\n            dtypes.int32, shape=(2,)),\n        array_ops.placeholder(dtypes.int32))\n    self.assertEqual([None, None, None, 2], t.get_shape().as_list())\n\n    # Dimensions are partially known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(3, None, None, 2)), [2, 3],\n        array_ops.placeholder(dtypes.int32))\n    self.assertEqual([3 * 2 * 3, None, None, 2], t.get_shape().as_list())\n\n    # Dimensions are partially known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(3, None, 2, 2)), [2, 3], [[1, 1], [0, 1]])\n    self.assertEqual([3 * 2 * 3, None, 1, 2], t.get_shape().as_list())\n\n    # Dimensions are fully known.\n    t = array_ops.space_to_batch_nd(\n        array_ops.placeholder(\n            dtypes.float32, shape=(3, 2, 3, 2)), [2, 3], [[1, 1], [0, 0]])\n    self.assertEqual([3 * 2 * 3, 2, 1, 2], t.get_shape().as_list())\n\n  @test_util.run_in_graph_and_eager_modes\n  def testInvalidBlockShape(self):\n    tf_in = constant_op.constant(\n        -3.5e+35, shape=[10, 20, 20], dtype=dtypes.float32)\n    block_shape = constant_op.constant(-10, shape=[2], dtype=dtypes.int64)\n    paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                \"block_shape must be positive\"):\n      array_ops.space_to_batch_nd(tf_in, block_shape, paddings)\n\n  @test_util.run_in_graph_and_eager_modes\n  def testOutputSizeOutOfBounds(self):\n    tf_in = constant_op.constant(\n        -3.5e+35, shape=[10, 19, 22], dtype=dtypes.float32)\n    block_shape = constant_op.constant(\n        1879048192, shape=[2], dtype=dtypes.int64)\n    paddings = constant_op.constant(0, shape=[2, 2], dtype=dtypes.int32)\n    with self.assertRaisesRegex((ValueError, errors.InvalidArgumentError),\n                                \"Negative.* dimension size caused by overflow\"):\n      array_ops.space_to_batch_nd(tf_in, block_shape, paddings)\n\n\nclass SpaceToBatchGradientTest(test.TestCase, PythonOpImpl):\n\n  # Check the gradients.\n  def _checkGrad(self, x, paddings, block_size):\n    assert 4 == x.ndim\n    with self.cached_session():\n      tf_x = ops.convert_to_tensor(x)\n      tf_y = self.space_to_batch(tf_x, paddings, block_size)\n      epsilon = 1e-5\n      ((x_jacob_t, x_jacob_n)) = gradient_checker.compute_gradient(\n          tf_x,\n          x.shape,\n          tf_y,\n          tf_y.get_shape().as_list(),\n          x_init_value=x,\n          delta=epsilon)\n\n    self.assertAllClose(x_jacob_t, x_jacob_n, rtol=1e-2, atol=epsilon)\n\n  # Tests a gradient for space_to_batch of x which is a four dimensional\n  # tensor of shape [b, h * block_size, w * block_size, d].\n  def _compare(self, b, h, w, d, block_size, pad_beg, pad_end):\n    block_size_sq = block_size * block_size\n    x = np.random.normal(0, 1, b * h * w * d *\n                         block_size_sq).astype(np.float32).reshape(\n                             [b, h * block_size, w * block_size, d])\n    paddings = np.array(\n        [[pad_beg, pad_end], [pad_beg, pad_end]], dtype=np.int32)\n\n    self._checkGrad(x, paddings, block_size)\n\n  # Don't use very large numbers as dimensions here as the result is tensor\n  # with cartesian product of the dimensions.\n  @test_util.run_deprecated_v1\n  def testSmall(self):\n    block_size = 2\n    pad_beg = 0\n    pad_end = 0\n    self._compare(1, 2, 3, 5, block_size, pad_beg, pad_end)\n\n  @test_util.run_deprecated_v1\n  def testSmall2(self):\n    block_size = 2\n    pad_beg = 0\n    pad_end = 0\n    self._compare(2, 4, 3, 2, block_size, pad_beg, pad_end)\n\n  @test_util.run_deprecated_v1\n  def testSmallPad1x1(self):\n    block_size = 2\n    pad_beg = 1\n    pad_end = 1\n    self._compare(1, 2, 3, 5, block_size, pad_beg, pad_end)\n\n\nclass SpaceToBatchGradientCppTest(SpaceToBatchGradientTest, CppOpImpl):\n  pass\n\n\nclass SpaceToBatchNDGradientTest(test.TestCase):\n\n  # Check the gradients.\n  def _checkGrad(self, x, block_shape, paddings):\n    block_shape = np.array(block_shape)\n    paddings = np.array(paddings).reshape((len(block_shape), 2))\n    with self.cached_session():\n      tf_x = ops.convert_to_tensor(x)\n      tf_y = array_ops.space_to_batch_nd(tf_x, block_shape, paddings)\n      epsilon = 1e-5\n      ((x_jacob_t, x_jacob_n)) = gradient_checker.compute_gradient(\n          tf_x,\n          x.shape,\n          tf_y,\n          tf_y.get_shape().as_list(),\n          x_init_value=x,\n          delta=epsilon)\n\n    self.assertAllClose(x_jacob_t, x_jacob_n, rtol=1e-2, atol=epsilon)\n\n  def _compare(self, input_shape, block_shape, paddings):\n    x = np.random.normal(\n        0, 1, np.prod(input_shape)).astype(np.float32).reshape(input_shape)\n    self._checkGrad(x, block_shape, paddings)\n\n  # Don't use very large numbers as dimensions here as the result is tensor\n  # with cartesian product of the dimensions.\n  @test_util.run_deprecated_v1\n  def testSmall(self):\n    self._compare([1, 4, 6, 5], [2, 2], [[0, 0], [0, 0]])\n\n  @test_util.run_deprecated_v1\n  def testSmall2(self):\n    self._compare([2, 8, 6, 2], [2, 2], [[0, 0], [0, 0]])\n\n  @test_util.run_deprecated_v1\n  def testSmallPad1(self):\n    self._compare([2, 4, 6, 2], [2, 2], [[1, 1], [1, 1]])\n\n  @test_util.run_deprecated_v1\n  def testSmallPadThreeBlockDims(self):\n    self._compare([2, 2, 4, 3, 2], [2, 2, 2], [[1, 1], [1, 1], [1, 0]])\n\n\nclass RequiredSpaceToBatchPaddingsTest(test.TestCase):\n\n  def _checkProperties(self, input_shape, block_shape, base_paddings, paddings,\n                       crops):\n    \"\"\"Checks that `paddings` and `crops` satisfy invariants.\"\"\"\n    num_block_dims = len(block_shape)\n    self.assertEqual(len(input_shape), num_block_dims)\n    if base_paddings is None:\n      base_paddings = np.zeros((num_block_dims, 2), np.int32)\n    self.assertEqual(base_paddings.shape, (num_block_dims, 2))\n    self.assertEqual(paddings.shape, (num_block_dims, 2))\n    self.assertEqual(crops.shape, (num_block_dims, 2))\n    for i in range(num_block_dims):\n      self.assertEqual(paddings[i, 0], base_paddings[i, 0])\n      self.assertLessEqual(0, paddings[i, 1] - base_paddings[i, 1])\n      self.assertLess(paddings[i, 1] - base_paddings[i, 1], block_shape[i])\n      self.assertEqual(\n          (input_shape[i] + paddings[i, 0] + paddings[i, 1]) % block_shape[i],\n          0)\n      self.assertEqual(crops[i, 0], 0)\n      self.assertEqual(crops[i, 1], paddings[i, 1] - base_paddings[i, 1])\n\n  def _test(self, input_shape, block_shape, base_paddings):\n    input_shape = np.array(input_shape)\n    block_shape = np.array(block_shape)\n    if base_paddings is not None:\n      base_paddings = np.array(base_paddings)\n    # Check with constants.\n    paddings, crops = array_ops.required_space_to_batch_paddings(input_shape,\n                                                                 block_shape,\n                                                                 base_paddings)\n    paddings_const = tensor_util.constant_value(paddings)\n    crops_const = tensor_util.constant_value(crops)\n    self.assertIsNotNone(paddings_const)\n    self.assertIsNotNone(crops_const)\n    self._checkProperties(input_shape, block_shape, base_paddings,\n                          paddings_const, crops_const)\n    # Check with non-constants.\n    assignments = {}\n    input_shape_placeholder = array_ops.placeholder(dtypes.int32)\n    assignments[input_shape_placeholder] = input_shape\n    block_shape_placeholder = array_ops.placeholder(dtypes.int32,\n                                                    [len(block_shape)])\n    assignments[block_shape_placeholder] = block_shape\n    if base_paddings is not None:\n      base_paddings_placeholder = array_ops.placeholder(dtypes.int32,\n                                                        [len(block_shape), 2])\n      assignments[base_paddings_placeholder] = base_paddings\n    else:\n      base_paddings_placeholder = None\n    t_paddings, t_crops = array_ops.required_space_to_batch_paddings(\n        input_shape_placeholder, block_shape_placeholder,\n        base_paddings_placeholder)\n    with self.cached_session():\n      paddings_result = t_paddings.eval(assignments)\n      crops_result = t_crops.eval(assignments)\n    self.assertAllEqual(paddings_result, paddings_const)\n    self.assertAllEqual(crops_result, crops_const)\n\n  @test_util.run_deprecated_v1\n  def testSimple(self):\n    self._test(\n        input_shape=np.zeros((0,), np.int32),\n        block_shape=np.zeros((0,), np.int32),\n        base_paddings=None)\n    self._test(\n        input_shape=np.zeros((0,), np.int32),\n        block_shape=np.zeros((0,), np.int32),\n        base_paddings=np.zeros((0, 2), np.int32))\n    self._test(input_shape=[1], block_shape=[2], base_paddings=None)\n    self._test(input_shape=[1], block_shape=[2], base_paddings=[[1, 0]])\n    self._test(input_shape=[3], block_shape=[1], base_paddings=[[1, 2]])\n    self._test(input_shape=[1], block_shape=[2], base_paddings=[[2, 3]])\n    self._test(input_shape=[4, 5], block_shape=[3, 2], base_paddings=None)\n    self._test(\n        input_shape=[4, 5], block_shape=[3, 2], base_paddings=[[0, 0], [0, 1]])\n\n\nif __name__ == \"__main__\":\n  test.main()\n"], "filenames": ["tensorflow/compiler/tests/spacetobatch_op_test.py", "tensorflow/compiler/tf2xla/kernels/BUILD", "tensorflow/compiler/tf2xla/kernels/spacetobatch_op.cc", "tensorflow/core/framework/BUILD", "tensorflow/core/framework/shape_inference.cc", "tensorflow/core/kernels/BUILD", "tensorflow/core/kernels/spacetobatch_op.cc", "tensorflow/core/util/BUILD", "tensorflow/python/kernel_tests/array_ops/spacetobatch_op_test.py"], "buggy_code_start_loc": [19, 213, 19, 893, 28, 31, 23, 535, 18], "buggy_code_end_loc": [145, 213, 138, 893, 1115, 4571, 136, 535, 517], "fixing_code_start_loc": [20, 214, 20, 894, 29, 32, 22, 536, 19], "fixing_code_end_loc": [170, 215, 152, 895, 1116, 4570, 148, 539, 541], "type": "CWE-190", "message": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow: The result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue.", "other": {"cve": {"id": "CVE-2022-29203", "sourceIdentifier": "security-advisories@github.com", "published": "2022-05-20T23:15:44.543", "lastModified": "2022-06-02T19:16:37.337", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow: The result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto para el aprendizaje autom\u00e1tico. En versiones anteriores a 2.9.0, 2.8.1, 2.7.2 y 2.6.4, la implementaci\u00f3n de \"tf.raw_ops.SpaceToBatchND\" (en todos los backends como XLA y kernels manuscritos) es vulnerable a un desbordamiento de enteros: El resultado de este desbordamiento de enteros es usado para asignar el tensor de salida, por lo que es obtenido una denegaci\u00f3n de servicio por medio de un fallo de \"CHECK\" (fallo de aserci\u00f3n), como en TFSA-2021-198. Las versiones 2.9.0, 2.8.1, 2.7.2 y 2.6.4 contienen un parche para este problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.4", "matchCriteriaId": "D9359D32-D090-44CF-AC43-2046084A28BB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.7.0", "versionEndExcluding": "2.7.2", "matchCriteriaId": "C4DFBF2D-5283-42F6-8800-D653BFA5CE82"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "A58EDA5C-66D6-46F1-962E-60AFB7C784A7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.7.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "89522760-C2DF-400D-9624-626D8F160CBA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.8.0:-:*:*:*:*:*:*", "matchCriteriaId": "E9EA1898-ACAA-4699-8BAE-54D62C1819FB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.8.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "130DE3C9-6842-456F-A259-BF8FF8457217"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.8.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "BBF2FCEF-989C-409D-9F4C-81418C65B972"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.9.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "9CFB1CFC-579D-4647-A472-6DE8BE1951DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.9.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "F3F3F37E-D27F-4060-830C-0AFF16150777"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/blob/master/tensorflow/security/advisory/tfsa-2021-198.md", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.6.4", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.7.2", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.8.1", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.9.0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-jjm6-4vf7-cjh4", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/acd56b8bcb72b163c834ae4f18469047b001fadf"}}