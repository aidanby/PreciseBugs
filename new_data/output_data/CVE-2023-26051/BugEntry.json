{"buggy_code": ["import datetime\nimport json\nimport os\nimport re\nfrom collections import defaultdict\nfrom datetime import timedelta\nfrom unittest.mock import ANY, MagicMock, Mock, call, patch\nfrom urllib.parse import urlencode\n\nimport graphene\nimport pytest\nfrom django.conf import settings\nfrom django.contrib.auth.tokens import default_token_generator\nfrom django.core.exceptions import ValidationError\nfrom django.core.files import File\nfrom django.test import override_settings\nfrom django.utils import timezone\nfrom django.utils.functional import SimpleLazyObject\nfrom freezegun import freeze_time\n\nfrom ....account import events as account_events\nfrom ....account.error_codes import AccountErrorCode\nfrom ....account.models import Address, Group, User\nfrom ....account.notifications import get_default_user_payload\nfrom ....account.search import (\n    generate_address_search_document_value,\n    generate_user_fields_search_document_value,\n    prepare_user_search_document_value,\n)\nfrom ....checkout import AddressType\nfrom ....core.jwt import create_token\nfrom ....core.notify_events import NotifyEventType\nfrom ....core.tests.utils import get_site_context_payload\nfrom ....core.tokens import account_delete_token_generator\nfrom ....core.utils.json_serializer import CustomJsonEncoder\nfrom ....core.utils.url import prepare_url\nfrom ....order import OrderStatus\nfrom ....order.models import FulfillmentStatus, Order\nfrom ....permission.enums import AccountPermissions, OrderPermissions\nfrom ....product.tests.utils import create_image\nfrom ....thumbnail.models import Thumbnail\nfrom ....webhook.event_types import WebhookEventAsyncType\nfrom ....webhook.payloads import (\n    generate_customer_payload,\n    generate_meta,\n    generate_requestor,\n)\nfrom ...core.enums import ThumbnailFormatEnum\nfrom ...core.utils import str_to_enum, to_global_id_or_none\nfrom ...tests.utils import (\n    assert_graphql_error_with_message,\n    assert_no_permission,\n    get_graphql_content,\n    get_graphql_content_from_response,\n    get_multipart_request_body,\n)\nfrom ..mutations.base import INVALID_TOKEN\nfrom ..mutations.staff import CustomerDelete, StaffDelete, StaffUpdate, UserDelete\nfrom ..tests.utils import convert_dict_keys_to_camel_case\n\n\ndef generate_address_webhook_call_args(address, event, requestor, webhook):\n    return [\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"Address\", address.id),\n                \"city\": address.city,\n                \"country\": {\"code\": address.country.code, \"name\": address.country.name},\n                \"company_name\": address.company_name,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: requestor)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        event,\n        [webhook],\n        address,\n        SimpleLazyObject(lambda: requestor),\n    ]\n\n\n@pytest.fixture\ndef query_customer_with_filter():\n    query = \"\"\"\n    query ($filter: CustomerFilterInput!, ) {\n        customers(first: 5, filter: $filter) {\n            totalCount\n            edges {\n                node {\n                    id\n                    lastName\n                    firstName\n                }\n            }\n        }\n    }\n    \"\"\"\n    return query\n\n\n@pytest.fixture\ndef query_staff_users_with_filter():\n    query = \"\"\"\n    query ($filter: StaffUserInput!, ) {\n        staffUsers(first: 5, filter: $filter) {\n            totalCount\n            edges {\n                node {\n                    id\n                    lastName\n                    firstName\n                }\n            }\n        }\n    }\n    \"\"\"\n    return query\n\n\nFULL_USER_QUERY = \"\"\"\n    query User($id: ID!) {\n        user(id: $id) {\n            email\n            firstName\n            lastName\n            isStaff\n            isActive\n            addresses {\n                id\n                isDefaultShippingAddress\n                isDefaultBillingAddress\n            }\n            checkoutIds\n            orders(first: 10) {\n                totalCount\n                edges {\n                    node {\n                        id\n                    }\n                }\n            }\n            languageCode\n            dateJoined\n            lastLogin\n            defaultShippingAddress {\n                firstName\n                lastName\n                companyName\n                streetAddress1\n                streetAddress2\n                city\n                cityArea\n                postalCode\n                countryArea\n                phone\n                country {\n                    code\n                }\n                isDefaultShippingAddress\n                isDefaultBillingAddress\n            }\n            defaultBillingAddress {\n                firstName\n                lastName\n                companyName\n                streetAddress1\n                streetAddress2\n                city\n                cityArea\n                postalCode\n                countryArea\n                phone\n                country {\n                    code\n                }\n                isDefaultShippingAddress\n                isDefaultBillingAddress\n            }\n            avatar {\n                url\n            }\n            userPermissions {\n                code\n                sourcePermissionGroups(userId: $id) {\n                    name\n                }\n            }\n            permissionGroups {\n                name\n                permissions {\n                    code\n                }\n            }\n            editableGroups {\n                name\n            }\n            giftCards(first: 10) {\n                edges {\n                    node {\n                        id\n                    }\n                }\n            }\n            checkouts(first: 10) {\n                edges {\n                    node {\n                        id\n                    }\n                }\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_query_customer_user(\n    staff_api_client,\n    customer_user,\n    gift_card_used,\n    gift_card_expiry_date,\n    address,\n    permission_manage_users,\n    permission_manage_orders,\n    media_root,\n    settings,\n    checkout,\n):\n    user = customer_user\n    user.default_shipping_address.country = \"US\"\n    user.default_shipping_address.save()\n    user.addresses.add(address.get_copy())\n\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save()\n\n    checkout.user = user\n    checkout.save()\n\n    Group.objects.create(name=\"empty group\")\n\n    query = FULL_USER_QUERY\n    ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": ID}\n    staff_api_client.user.user_permissions.add(\n        permission_manage_users, permission_manage_orders\n    )\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert data[\"email\"] == user.email\n    assert data[\"firstName\"] == user.first_name\n    assert data[\"lastName\"] == user.last_name\n    assert data[\"isStaff\"] == user.is_staff\n    assert data[\"isActive\"] == user.is_active\n    assert data[\"orders\"][\"totalCount\"] == user.orders.count()\n    assert data[\"avatar\"][\"url\"]\n    assert data[\"languageCode\"] == settings.LANGUAGE_CODE.upper()\n    assert len(data[\"editableGroups\"]) == 0\n\n    assert len(data[\"addresses\"]) == user.addresses.count()\n    for address in data[\"addresses\"]:\n        if address[\"isDefaultShippingAddress\"]:\n            address_id = graphene.Node.to_global_id(\n                \"Address\", user.default_shipping_address.id\n            )\n            assert address[\"id\"] == address_id\n        if address[\"isDefaultBillingAddress\"]:\n            address_id = graphene.Node.to_global_id(\n                \"Address\", user.default_billing_address.id\n            )\n            assert address[\"id\"] == address_id\n\n    address = data[\"defaultShippingAddress\"]\n    user_address = user.default_shipping_address\n    assert address[\"firstName\"] == user_address.first_name\n    assert address[\"lastName\"] == user_address.last_name\n    assert address[\"companyName\"] == user_address.company_name\n    assert address[\"streetAddress1\"] == user_address.street_address_1\n    assert address[\"streetAddress2\"] == user_address.street_address_2\n    assert address[\"city\"] == user_address.city\n    assert address[\"cityArea\"] == user_address.city_area\n    assert address[\"postalCode\"] == user_address.postal_code\n    assert address[\"country\"][\"code\"] == user_address.country.code\n    assert address[\"countryArea\"] == user_address.country_area\n    assert address[\"phone\"] == user_address.phone.as_e164\n    assert address[\"isDefaultShippingAddress\"] is None\n    assert address[\"isDefaultBillingAddress\"] is None\n\n    address = data[\"defaultBillingAddress\"]\n    user_address = user.default_billing_address\n    assert address[\"firstName\"] == user_address.first_name\n    assert address[\"lastName\"] == user_address.last_name\n    assert address[\"companyName\"] == user_address.company_name\n    assert address[\"streetAddress1\"] == user_address.street_address_1\n    assert address[\"streetAddress2\"] == user_address.street_address_2\n    assert address[\"city\"] == user_address.city\n    assert address[\"cityArea\"] == user_address.city_area\n    assert address[\"postalCode\"] == user_address.postal_code\n    assert address[\"country\"][\"code\"] == user_address.country.code\n    assert address[\"countryArea\"] == user_address.country_area\n    assert address[\"phone\"] == user_address.phone.as_e164\n    assert address[\"isDefaultShippingAddress\"] is None\n    assert address[\"isDefaultBillingAddress\"] is None\n    assert len(data[\"giftCards\"]) == 1\n    assert data[\"giftCards\"][\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"GiftCard\", gift_card_used.pk\n    )\n    assert data[\"checkoutIds\"] == [to_global_id_or_none(checkout)]\n    assert data[\"checkouts\"][\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"Checkout\", checkout.pk\n    )\n\n\ndef test_query_customer_user_with_orders(\n    staff_api_client,\n    customer_user,\n    order_list,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    # given\n    query = FULL_USER_QUERY\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = customer_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = customer_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = customer_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query,\n        variables,\n        permissions=[permission_manage_users, permission_manage_orders],\n    )\n\n    # then\n    content = get_graphql_content(response)\n    user = content[\"data\"][\"user\"]\n    assert {order[\"node\"][\"id\"] for order in user[\"orders\"][\"edges\"]} == {\n        graphene.Node.to_global_id(\"Order\", order.pk) for order in order_list\n    }\n\n\ndef test_query_customer_user_with_orders_no_manage_orders_perm(\n    staff_api_client,\n    customer_user,\n    order_list,\n    permission_manage_users,\n):\n    # given\n    query = FULL_USER_QUERY\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = customer_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = customer_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = customer_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    assert_no_permission(response)\n\n\ndef test_query_customer_user_app(\n    app_api_client,\n    customer_user,\n    address,\n    permission_manage_users,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n    app,\n):\n    user = customer_user\n    user.default_shipping_address.country = \"US\"\n    user.default_shipping_address.save()\n    user.addresses.add(address.get_copy())\n\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save()\n\n    Group.objects.create(name=\"empty group\")\n\n    query = FULL_USER_QUERY\n    ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": ID}\n    app.permissions.add(\n        permission_manage_staff, permission_manage_users, permission_manage_orders\n    )\n    response = app_api_client.post_graphql(query, variables)\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert data[\"email\"] == user.email\n\n\ndef test_query_customer_user_with_orders_by_app_no_manage_orders_perm(\n    app_api_client,\n    customer_user,\n    order_list,\n    permission_manage_users,\n):\n    # given\n    query = FULL_USER_QUERY\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = customer_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = customer_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = customer_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": id}\n\n    # when\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    assert_no_permission(response)\n\n\ndef test_query_staff_user(\n    staff_api_client,\n    staff_user,\n    address,\n    permission_manage_users,\n    media_root,\n    permission_manage_orders,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_menus,\n):\n    staff_user.user_permissions.add(permission_manage_orders, permission_manage_staff)\n\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"another user group\"),\n            Group(name=\"another group\"),\n            Group(name=\"empty group\"),\n        ]\n    )\n    group1, group2, group3, group4 = groups\n\n    group1.permissions.add(permission_manage_users, permission_manage_products)\n\n    # user groups\n    staff_user.groups.add(group1, group2)\n\n    # another group (not user group) with permission_manage_users\n    group3.permissions.add(permission_manage_users, permission_manage_menus)\n\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image2.jpg\"\n    staff_user.avatar = avatar_mock\n    staff_user.save()\n\n    query = FULL_USER_QUERY\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": user_id}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n\n    assert data[\"email\"] == staff_user.email\n    assert data[\"firstName\"] == staff_user.first_name\n    assert data[\"lastName\"] == staff_user.last_name\n    assert data[\"isStaff\"] == staff_user.is_staff\n    assert data[\"isActive\"] == staff_user.is_active\n    assert data[\"orders\"][\"totalCount\"] == staff_user.orders.count()\n    assert data[\"avatar\"][\"url\"]\n\n    assert len(data[\"permissionGroups\"]) == 2\n    assert {group_data[\"name\"] for group_data in data[\"permissionGroups\"]} == {\n        group1.name,\n        group2.name,\n    }\n    assert len(data[\"userPermissions\"]) == 4\n    assert len(data[\"editableGroups\"]) == Group.objects.count() - 1\n    assert {data_group[\"name\"] for data_group in data[\"editableGroups\"]} == {\n        group1.name,\n        group2.name,\n        group4.name,\n    }\n\n    formated_user_permissions_result = [\n        {\n            \"code\": perm[\"code\"].lower(),\n            \"groups\": {group[\"name\"] for group in perm[\"sourcePermissionGroups\"]},\n        }\n        for perm in data[\"userPermissions\"]\n    ]\n    all_permissions = group1.permissions.all() | staff_user.user_permissions.all()\n    for perm in all_permissions:\n        source_groups = {group.name for group in perm.group_set.filter(user=staff_user)}\n        expected_data = {\"code\": perm.codename, \"groups\": source_groups}\n        assert expected_data in formated_user_permissions_result\n\n\ndef test_query_staff_user_with_order_and_without_manage_orders_perm(\n    staff_api_client,\n    staff_user,\n    order_list,\n    permission_manage_staff,\n):\n    # given\n    staff_user.user_permissions.add(permission_manage_staff)\n\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = staff_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = staff_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = staff_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    query = FULL_USER_QUERY\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": user_id}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n\n    assert data[\"email\"] == staff_user.email\n    assert data[\"orders\"][\"totalCount\"] == 2\n    assert {node[\"node\"][\"id\"] for node in data[\"orders\"][\"edges\"]} == {\n        graphene.Node.to_global_id(\"Order\", order.pk)\n        for order in [order_unfulfilled, order_unconfirmed]\n    }\n\n\ndef test_query_staff_user_with_orders_and_manage_orders_perm(\n    staff_api_client,\n    staff_user,\n    order_list,\n    permission_manage_staff,\n    permission_manage_orders,\n):\n    # given\n    staff_user.user_permissions.add(permission_manage_staff, permission_manage_orders)\n\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = staff_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = staff_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = staff_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    query = FULL_USER_QUERY\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": user_id}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n\n    assert data[\"email\"] == staff_user.email\n    assert data[\"orders\"][\"totalCount\"] == 3\n    assert {node[\"node\"][\"id\"] for node in data[\"orders\"][\"edges\"]} == {\n        graphene.Node.to_global_id(\"Order\", order.pk)\n        for order in [order_unfulfilled, order_unconfirmed, order_draft]\n    }\n\n\nUSER_QUERY = \"\"\"\n    query User($id: ID $email: String, $externalReference: String) {\n        user(id: $id, email: $email, externalReference: $externalReference) {\n            id\n            email\n            externalReference\n        }\n    }\n\"\"\"\n\n\ndef test_query_user_by_email_address(\n    user_api_client, customer_user, permission_manage_users\n):\n    email = customer_user.email\n    variables = {\"email\": email}\n    response = user_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert customer_user.email == data[\"email\"]\n\n\ndef test_query_user_by_external_reference(\n    user_api_client, customer_user, permission_manage_users\n):\n    # given\n    user = customer_user\n    ext_ref = \"test-ext-ref\"\n    user.external_reference = ext_ref\n    user.save(update_fields=[\"external_reference\"])\n    variables = {\"externalReference\": ext_ref}\n\n    # when\n    response = user_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"user\"]\n    assert data[\"externalReference\"] == user.external_reference\n\n\ndef test_query_user_by_id_and_email(\n    user_api_client, customer_user, permission_manage_users\n):\n    email = customer_user.email\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\n        \"id\": id,\n        \"email\": email,\n    }\n    response = user_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    assert_graphql_error_with_message(\n        response, \"Argument 'id' cannot be combined with 'email'\"\n    )\n\n\ndef test_customer_can_not_see_other_users_data(user_api_client, staff_user):\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id}\n    response = user_api_client.post_graphql(USER_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_user_query_anonymous_user(api_client):\n    variables = {\"id\": \"\"}\n    response = api_client.post_graphql(USER_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_user_query_permission_manage_users_get_customer(\n    staff_api_client, customer_user, permission_manage_users\n):\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert customer_user.email == data[\"email\"]\n\n\ndef test_user_query_as_app(app_api_client, customer_user, permission_manage_users):\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n    response = app_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert customer_user.email == data[\"email\"]\n\n\ndef test_user_query_permission_manage_users_get_staff(\n    staff_api_client, staff_user, permission_manage_users\n):\n    staff_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": staff_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    assert not content[\"data\"][\"user\"]\n\n\ndef test_user_query_permission_manage_staff_get_customer(\n    staff_api_client, customer_user, permission_manage_staff\n):\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    assert not content[\"data\"][\"user\"]\n\n\ndef test_user_query_permission_manage_staff_get_staff(\n    staff_api_client, staff_user, permission_manage_staff\n):\n    staff_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": staff_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert staff_user.email == data[\"email\"]\n\n\n@pytest.mark.parametrize(\"id\", [\"'\", \"abc\"])\ndef test_user_query_invalid_id(\n    id, staff_api_client, customer_user, permission_manage_users\n):\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n\n    content = get_graphql_content_from_response(response)\n    assert len(content[\"errors\"]) == 1\n    assert content[\"errors\"][0][\"message\"] == f\"Couldn't resolve id: {id}.\"\n    assert content[\"data\"][\"user\"] is None\n\n\ndef test_user_query_object_with_given_id_does_not_exist(\n    staff_api_client, permission_manage_users\n):\n    id = graphene.Node.to_global_id(\"User\", -1)\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"user\"] is None\n\n\ndef test_user_query_object_with_invalid_object_type(\n    staff_api_client, customer_user, permission_manage_users\n):\n    id = graphene.Node.to_global_id(\"Order\", customer_user.pk)\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"user\"] is None\n\n\nUSER_AVATAR_QUERY = \"\"\"\n    query User($id: ID, $size: Int, $format: ThumbnailFormatEnum) {\n        user(id: $id) {\n            id\n            avatar(size: $size, format: $format) {\n                url\n                alt\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_query_user_avatar_with_size_and_format_proxy_url_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    format = ThumbnailFormatEnum.WEBP.name\n\n    user_id = graphene.Node.to_global_id(\"User\", user.id)\n    user_uuid = graphene.Node.to_global_id(\"User\", user.uuid)\n    variables = {\"id\": user_id, \"size\": 120, \"format\": format}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    domain = site_settings.site.domain\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{domain}/thumbnail/{user_uuid}/128/{format.lower()}/\"\n    )\n\n\ndef test_query_user_avatar_with_size_proxy_url_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    user_id = graphene.Node.to_global_id(\"User\", user.id)\n    user_uuid = graphene.Node.to_global_id(\"User\", user.uuid)\n    variables = {\"id\": user_id, \"size\": 120}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/thumbnail/{user_uuid}/128/\"\n    )\n\n\ndef test_query_user_avatar_with_size_thumbnail_url_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    thumbnail_mock = MagicMock(spec=File)\n    thumbnail_mock.name = \"thumbnail_image.jpg\"\n    Thumbnail.objects.create(user=user, size=128, image=thumbnail_mock)\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id, \"size\": 120}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/media/thumbnails/{thumbnail_mock.name}\"\n    )\n\n\ndef test_query_user_avatar_original_size_custom_format_provided_original_image_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    format = ThumbnailFormatEnum.WEBP.name\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id, \"format\": format, \"size\": 0}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/media/user-avatars/{avatar_mock.name}\"\n    )\n\n\ndef test_query_user_avatar_no_size_value(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id}\n\n    user_uuid = graphene.Node.to_global_id(\"User\", user.uuid)\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/thumbnail/{user_uuid}/4096/\"\n    )\n\n\ndef test_query_user_avatar_no_image(staff_api_client, permission_manage_staff):\n    # given\n    user = staff_api_client.user\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert data[\"id\"]\n    assert not data[\"avatar\"]\n\n\ndef test_query_customers(staff_api_client, user_api_client, permission_manage_users):\n    query = \"\"\"\n    query Users {\n        customers(first: 20) {\n            totalCount\n            edges {\n                node {\n                    isStaff\n                }\n            }\n        }\n    }\n    \"\"\"\n    variables = {}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert users\n    assert all([not user[\"node\"][\"isStaff\"] for user in users])\n\n    # check permissions\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_query_staff(\n    staff_api_client, user_api_client, staff_user, admin_user, permission_manage_staff\n):\n    query = \"\"\"\n    {\n        staffUsers(first: 20) {\n            edges {\n                node {\n                    email\n                    isStaff\n                }\n            }\n        }\n    }\n    \"\"\"\n    variables = {}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUsers\"][\"edges\"]\n    assert len(data) == 2\n    staff_emails = [user[\"node\"][\"email\"] for user in data]\n    assert sorted(staff_emails) == [admin_user.email, staff_user.email]\n    assert all([user[\"node\"][\"isStaff\"] for user in data])\n\n    # check permissions\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_who_can_see_user(\n    staff_user, customer_user, staff_api_client, permission_manage_users\n):\n    query = \"\"\"\n    query Users {\n        customers {\n            totalCount\n        }\n    }\n    \"\"\"\n\n    # Random person (even staff) can't see users data without permissions\n    ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": ID}\n    response = staff_api_client.post_graphql(USER_QUERY, variables)\n    assert_no_permission(response)\n\n    response = staff_api_client.post_graphql(query)\n    assert_no_permission(response)\n\n    # Add permission and ensure staff can see user(s)\n    staff_user.user_permissions.add(permission_manage_users)\n    response = staff_api_client.post_graphql(USER_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"user\"][\"email\"] == customer_user.email\n\n    response = staff_api_client.post_graphql(query)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"customers\"][\"totalCount\"] == 1\n\n\nME_QUERY = \"\"\"\n    query Me {\n        me {\n            id\n            email\n            checkout {\n                token\n            }\n            userPermissions {\n                code\n                name\n            }\n            checkouts(first: 10) {\n                edges {\n                    node {\n                        id\n                    }\n                }\n                totalCount\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_me_query(user_api_client):\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert data[\"email\"] == user_api_client.user.email\n\n\ndef test_me_user_permissions_query(\n    user_api_client, permission_manage_users, permission_group_manage_users\n):\n    user = user_api_client.user\n    user.user_permissions.add(permission_manage_users)\n    user.groups.add(permission_group_manage_users)\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    user_permissions = content[\"data\"][\"me\"][\"userPermissions\"]\n\n    assert len(user_permissions) == 1\n    assert user_permissions[0][\"code\"] == permission_manage_users.codename.upper()\n\n\ndef test_me_query_anonymous_client(api_client):\n    response = api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"me\"] is None\n\n\ndef test_me_query_customer_can_not_see_note(\n    staff_user, staff_api_client, permission_manage_users\n):\n    query = \"\"\"\n    query Me {\n        me {\n            id\n            email\n            note\n        }\n    }\n    \"\"\"\n    # Random person (even staff) can't see own note without permissions\n    response = staff_api_client.post_graphql(query)\n    assert_no_permission(response)\n\n    # Add permission and ensure staff can see own note\n    response = staff_api_client.post_graphql(\n        query, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert data[\"email\"] == staff_api_client.user.email\n    assert data[\"note\"] == staff_api_client.user.note\n\n\ndef test_me_query_checkout(user_api_client, checkout):\n    user = user_api_client.user\n    checkout.user = user\n    checkout.save()\n\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert data[\"checkout\"][\"token\"] == str(checkout.token)\n    assert data[\"checkouts\"][\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"Checkout\", checkout.pk\n    )\n\n\ndef test_me_query_checkout_with_inactive_channel(user_api_client, checkout):\n    user = user_api_client.user\n    channel = checkout.channel\n    channel.is_active = False\n    channel.save()\n    checkout.user = user\n    checkout.save()\n\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert not data[\"checkout\"]\n    assert not data[\"checkouts\"][\"edges\"]\n\n\ndef test_me_query_checkouts_with_channel(user_api_client, checkout, checkout_JPY):\n    query = \"\"\"\n        query Me($channel: String) {\n            me {\n                checkouts(first: 10, channel: $channel) {\n                    edges {\n                        node {\n                            id\n                            channel {\n                                slug\n                            }\n                        }\n                    }\n                    totalCount\n                }\n            }\n        }\n    \"\"\"\n\n    user = user_api_client.user\n    checkout.user = checkout_JPY.user = user\n    checkout.save()\n    checkout_JPY.save()\n\n    response = user_api_client.post_graphql(query, {\"channel\": checkout.channel.slug})\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"][\"checkouts\"]\n    assert data[\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"Checkout\", checkout.pk\n    )\n    assert data[\"totalCount\"] == 1\n    assert data[\"edges\"][0][\"node\"][\"channel\"][\"slug\"] == checkout.channel.slug\n\n\nQUERY_ME_CHECKOUT_TOKENS = \"\"\"\nquery getCheckoutTokens($channel: String) {\n  me {\n    checkoutTokens(channel: $channel)\n  }\n}\n\"\"\"\n\n\ndef test_me_checkout_tokens_without_channel_param(\n    user_api_client, checkouts_assigned_to_customer\n):\n    # given\n    checkouts = checkouts_assigned_to_customer\n\n    # when\n    response = user_api_client.post_graphql(QUERY_ME_CHECKOUT_TOKENS)\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert len(data[\"checkoutTokens\"]) == len(checkouts)\n    for checkout in checkouts:\n        assert str(checkout.token) in data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_without_channel_param_inactive_channel(\n    user_api_client, channel_PLN, checkouts_assigned_to_customer\n):\n    # given\n    channel_PLN.is_active = False\n    channel_PLN.save()\n    checkouts = checkouts_assigned_to_customer\n\n    # when\n    response = user_api_client.post_graphql(QUERY_ME_CHECKOUT_TOKENS)\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert str(checkouts[0].token) in data[\"checkoutTokens\"]\n    assert str(checkouts[1].token) not in data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_with_channel(\n    user_api_client, channel_USD, checkouts_assigned_to_customer\n):\n    # given\n    checkouts = checkouts_assigned_to_customer\n\n    # when\n    response = user_api_client.post_graphql(\n        QUERY_ME_CHECKOUT_TOKENS, {\"channel\": channel_USD.slug}\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert str(checkouts[0].token) in data[\"checkoutTokens\"]\n    assert str(checkouts[1].token) not in data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_with_inactive_channel(\n    user_api_client, channel_USD, checkouts_assigned_to_customer\n):\n    # given\n    channel_USD.is_active = False\n    channel_USD.save()\n\n    # when\n    response = user_api_client.post_graphql(\n        QUERY_ME_CHECKOUT_TOKENS, {\"channel\": channel_USD.slug}\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert not data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_with_not_existing_channel(\n    user_api_client, checkouts_assigned_to_customer\n):\n    # given\n\n    # when\n    response = user_api_client.post_graphql(\n        QUERY_ME_CHECKOUT_TOKENS, {\"channel\": \"Not-existing\"}\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert not data[\"checkoutTokens\"]\n\n\ndef test_me_with_cancelled_fulfillments(\n    user_api_client, fulfilled_order_with_cancelled_fulfillment\n):\n    query = \"\"\"\n    query Me {\n        me {\n            orders (first: 1) {\n                edges {\n                    node {\n                        id\n                        fulfillments {\n                            status\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \"\"\"\n    response = user_api_client.post_graphql(query)\n    content = get_graphql_content(response)\n    order_id = graphene.Node.to_global_id(\n        \"Order\", fulfilled_order_with_cancelled_fulfillment.id\n    )\n    data = content[\"data\"][\"me\"]\n    order = data[\"orders\"][\"edges\"][0][\"node\"]\n    assert order[\"id\"] == order_id\n    fulfillments = order[\"fulfillments\"]\n    assert len(fulfillments) == 1\n    assert fulfillments[0][\"status\"] == FulfillmentStatus.FULFILLED.upper()\n\n\ndef test_user_with_cancelled_fulfillments(\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    permission_manage_orders,\n    fulfilled_order_with_cancelled_fulfillment,\n):\n    query = \"\"\"\n    query User($id: ID!) {\n        user(id: $id) {\n            orders (first: 1) {\n                edges {\n                    node {\n                        id\n                        fulfillments {\n                            status\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \"\"\"\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": user_id}\n    staff_api_client.user.user_permissions.add(\n        permission_manage_users, permission_manage_orders\n    )\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    order_id = graphene.Node.to_global_id(\n        \"Order\", fulfilled_order_with_cancelled_fulfillment.id\n    )\n    data = content[\"data\"][\"user\"]\n    order = data[\"orders\"][\"edges\"][0][\"node\"]\n    assert order[\"id\"] == order_id\n    fulfillments = order[\"fulfillments\"]\n    assert len(fulfillments) == 2\n    assert fulfillments[0][\"status\"] == FulfillmentStatus.FULFILLED.upper()\n    assert fulfillments[1][\"status\"] == FulfillmentStatus.CANCELED.upper()\n\n\nACCOUNT_REGISTER_MUTATION = \"\"\"\n    mutation RegisterAccount(\n        $password: String!,\n        $email: String!,\n        $firstName: String,\n        $lastName: String,\n        $redirectUrl: String,\n        $languageCode: LanguageCodeEnum\n        $metadata: [MetadataInput!],\n        $channel: String\n    ) {\n        accountRegister(\n            input: {\n                password: $password,\n                email: $email,\n                firstName: $firstName,\n                lastName: $lastName,\n                redirectUrl: $redirectUrl,\n                languageCode: $languageCode,\n                metadata: $metadata,\n                channel: $channel\n            }\n        ) {\n            errors {\n                field\n                message\n                code\n            }\n            user {\n                id\n                email\n            }\n        }\n    }\n\"\"\"\n\n\n@override_settings(\n    ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=True, ALLOWED_CLIENT_HOSTS=[\"localhost\"]\n)\n@patch(\"saleor.account.notifications.default_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_register(\n    mocked_notify,\n    mocked_generator,\n    api_client,\n    channel_PLN,\n    order,\n    site_settings,\n):\n    mocked_generator.return_value = \"token\"\n    email = \"customer@example.com\"\n\n    redirect_url = \"http://localhost:3000\"\n    variables = {\n        \"email\": email,\n        \"password\": \"Password\",\n        \"redirectUrl\": redirect_url,\n        \"firstName\": \"saleor\",\n        \"lastName\": \"rocks\",\n        \"languageCode\": \"PL\",\n        \"metadata\": [{\"key\": \"meta\", \"value\": \"data\"}],\n        \"channel\": channel_PLN.slug,\n    }\n    query = ACCOUNT_REGISTER_MUTATION\n    mutation_name = \"accountRegister\"\n\n    response = api_client.post_graphql(query, variables)\n\n    new_user = User.objects.get(email=email)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    params = urlencode({\"email\": email, \"token\": \"token\"})\n    confirm_url = prepare_url(params, redirect_url)\n\n    expected_payload = {\n        \"user\": get_default_user_payload(new_user),\n        \"token\": \"token\",\n        \"confirm_url\": confirm_url,\n        \"recipient_email\": new_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n    assert new_user.metadata == {\"meta\": \"data\"}\n    assert new_user.language_code == \"pl\"\n    assert new_user.first_name == variables[\"firstName\"]\n    assert new_user.last_name == variables[\"lastName\"]\n    assert new_user.search_document == generate_user_fields_search_document_value(\n        new_user\n    )\n    assert not data[\"errors\"]\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_CONFIRMATION,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n    response = api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"email\"\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.UNIQUE.name\n\n    customer_creation_event = account_events.CustomerEvent.objects.get()\n    assert customer_creation_event.type == account_events.CustomerEvents.ACCOUNT_CREATED\n    assert customer_creation_event.user == new_user\n\n\n@override_settings(ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=False)\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_register_disabled_email_confirmation(mocked_notify, api_client):\n    email = \"customer@example.com\"\n    variables = {\"email\": email, \"password\": \"Password\"}\n    response = api_client.post_graphql(ACCOUNT_REGISTER_MUTATION, variables)\n    errors = response.json()[\"data\"][\"accountRegister\"][\"errors\"]\n\n    assert errors == []\n    created_user = User.objects.get()\n    expected_payload = get_default_user_payload(created_user)\n    expected_payload[\"token\"] = \"token\"\n    expected_payload[\"redirect_url\"] = \"http://localhost:3000\"\n    mocked_notify.assert_not_called()\n\n\n@override_settings(ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=True)\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_register_no_redirect_url(mocked_notify, api_client):\n    variables = {\"email\": \"customer@example.com\", \"password\": \"Password\"}\n    response = api_client.post_graphql(ACCOUNT_REGISTER_MUTATION, variables)\n    errors = response.json()[\"data\"][\"accountRegister\"][\"errors\"]\n    assert \"redirectUrl\" in map(lambda error: error[\"field\"], errors)\n    mocked_notify.assert_not_called()\n\n\n@override_settings(ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=False)\ndef test_customer_register_upper_case_email(api_client):\n    # given\n    email = \"CUSTOMER@example.com\"\n    variables = {\"email\": email, \"password\": \"Password\"}\n\n    # when\n    response = api_client.post_graphql(ACCOUNT_REGISTER_MUTATION, variables)\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"accountRegister\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"].lower()\n\n\nCUSTOMER_CREATE_MUTATION = \"\"\"\n    mutation CreateCustomer(\n        $email: String, $firstName: String, $lastName: String, $channel: String\n        $note: String, $billing: AddressInput, $shipping: AddressInput,\n        $redirect_url: String, $languageCode: LanguageCodeEnum,\n        $externalReference: String\n    ) {\n        customerCreate(input: {\n            email: $email,\n            firstName: $firstName,\n            lastName: $lastName,\n            note: $note,\n            defaultShippingAddress: $shipping,\n            defaultBillingAddress: $billing,\n            redirectUrl: $redirect_url,\n            languageCode: $languageCode,\n            channel: $channel,\n            externalReference: $externalReference\n        }) {\n            errors {\n                field\n                code\n                message\n            }\n            user {\n                id\n                defaultBillingAddress {\n                    id\n                }\n                defaultShippingAddress {\n                    id\n                }\n                languageCode\n                email\n                firstName\n                lastName\n                isActive\n                isStaff\n                note\n                externalReference\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.account.notifications.default_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_create(\n    mocked_notify,\n    mocked_generator,\n    staff_api_client,\n    address,\n    permission_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    mocked_generator.return_value = \"token\"\n    email = \"api_user@example.com\"\n    first_name = \"api_first_name\"\n    last_name = \"api_last_name\"\n    note = \"Test user\"\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n    address_data.pop(\"metadata\")\n    address_data.pop(\"privateMetadata\")\n\n    redirect_url = \"https://www.example.com\"\n    external_reference = \"test-ext-ref\"\n    variables = {\n        \"email\": email,\n        \"firstName\": first_name,\n        \"lastName\": last_name,\n        \"note\": note,\n        \"shipping\": address_data,\n        \"billing\": address_data,\n        \"redirect_url\": redirect_url,\n        \"languageCode\": \"PL\",\n        \"channel\": channel_PLN.slug,\n        \"externalReference\": external_reference,\n    }\n\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    new_customer = User.objects.get(email=email)\n\n    shipping_address, billing_address = (\n        new_customer.default_shipping_address,\n        new_customer.default_billing_address,\n    )\n    assert shipping_address == address\n    assert billing_address == address\n    assert shipping_address.pk != billing_address.pk\n\n    data = content[\"data\"][\"customerCreate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"firstName\"] == first_name\n    assert data[\"user\"][\"lastName\"] == last_name\n    assert data[\"user\"][\"note\"] == note\n    assert data[\"user\"][\"languageCode\"] == \"PL\"\n    assert data[\"user\"][\"externalReference\"] == external_reference\n    assert not data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n\n    new_user = User.objects.get(email=email)\n    assert (\n        generate_user_fields_search_document_value(new_user) in new_user.search_document\n    )\n    assert generate_address_search_document_value(address) in new_user.search_document\n    params = urlencode({\"email\": new_user.email, \"token\": \"token\"})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(new_user),\n        \"token\": \"token\",\n        \"password_set_url\": password_set_url,\n        \"recipient_email\": new_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_CUSTOMER_PASSWORD,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n    assert set([shipping_address, billing_address]) == set(new_user.addresses.all())\n    customer_creation_event = account_events.CustomerEvent.objects.get()\n    assert customer_creation_event.type == account_events.CustomerEvents.ACCOUNT_CREATED\n    assert customer_creation_event.user == new_customer\n\n\n@patch(\"saleor.account.notifications.default_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_create_send_password_with_url(\n    mocked_notify,\n    mocked_generator,\n    staff_api_client,\n    permission_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    mocked_generator.return_value = \"token\"\n    email = \"api_user@example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": \"https://www.example.com\",\n        \"channel\": channel_PLN.slug,\n    }\n\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert not data[\"errors\"]\n\n    new_customer = User.objects.get(email=email)\n    assert new_customer\n    redirect_url = \"https://www.example.com\"\n    params = urlencode({\"email\": email, \"token\": \"token\"})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(new_customer),\n        \"password_set_url\": password_set_url,\n        \"token\": \"token\",\n        \"recipient_email\": new_customer.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_CUSTOMER_PASSWORD,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\ndef test_customer_create_without_send_password(\n    staff_api_client, permission_manage_users\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email}\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert not data[\"errors\"]\n    User.objects.get(email=email)\n\n\ndef test_customer_create_with_invalid_url(staff_api_client, permission_manage_users):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"invalid\"}\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"message\": ANY,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_customer_create_with_not_allowed_url(\n    staff_api_client, permission_manage_users\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"https://www.fake.com\"}\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"message\": ANY,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_customer_create_with_upper_case_email(\n    staff_api_client, permission_manage_users\n):\n    # given\n    email = \"UPPERCASE@example.com\"\n    variables = {\"email\": email}\n\n    # when\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerCreate\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == email.lower()\n\n\ndef test_customer_create_with_non_unique_external_reference(\n    staff_api_client, permission_manage_users, customer_user\n):\n    # given\n    ext_ref = \"test-ext-ref\"\n    customer_user.external_reference = ext_ref\n    customer_user.save(update_fields=[\"external_reference\"])\n\n    variables = {\"email\": \"mail.test@exampale.com\", \"externalReference\": ext_ref}\n\n    # when\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    error = content[\"data\"][\"customerCreate\"][\"errors\"][0]\n    assert error[\"field\"] == \"externalReference\"\n    assert error[\"code\"] == AccountErrorCode.UNIQUE.name\n    assert error[\"message\"] == \"User with this External reference already exists.\"\n\n\ndef test_customer_update(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = \"\"\"\n    mutation UpdateCustomer(\n            $id: ID!, $firstName: String, $lastName: String,\n            $isActive: Boolean, $note: String, $billing: AddressInput,\n            $shipping: AddressInput, $languageCode: LanguageCodeEnum,\n            $externalReference: String\n        ) {\n        customerUpdate(\n            id: $id,\n            input: {\n                isActive: $isActive,\n                firstName: $firstName,\n                lastName: $lastName,\n                note: $note,\n                defaultBillingAddress: $billing\n                defaultShippingAddress: $shipping,\n                languageCode: $languageCode,\n                externalReference: $externalReference\n                }\n            ) {\n            errors {\n                field\n                message\n            }\n            user {\n                id\n                firstName\n                lastName\n                defaultBillingAddress {\n                    id\n                }\n                defaultShippingAddress {\n                    id\n                }\n                languageCode\n                isActive\n                note\n                externalReference\n            }\n        }\n    }\n    \"\"\"\n\n    # this test requires addresses to be set and checks whether new address\n    # instances weren't created, but the existing ones got updated\n    assert customer_user.default_billing_address\n    assert customer_user.default_shipping_address\n    billing_address_pk = customer_user.default_billing_address.pk\n    shipping_address_pk = customer_user.default_shipping_address.pk\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    first_name = \"new_first_name\"\n    last_name = \"new_last_name\"\n    note = \"Test update note\"\n    external_reference = \"test-ext-ref\"\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n    address_data.pop(\"metadata\")\n    address_data.pop(\"privateMetadata\")\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": first_name,\n        \"lastName\": last_name,\n        \"isActive\": False,\n        \"note\": note,\n        \"billing\": address_data,\n        \"shipping\": address_data,\n        \"languageCode\": \"PL\",\n        \"externalReference\": external_reference,\n    }\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    customer = User.objects.get(email=customer_user.email)\n\n    # check that existing instances are updated\n    shipping_address, billing_address = (\n        customer.default_shipping_address,\n        customer.default_billing_address,\n    )\n    assert billing_address.pk == billing_address_pk\n    assert shipping_address.pk == shipping_address_pk\n\n    assert billing_address.street_address_1 == new_street_address\n    assert shipping_address.street_address_1 == new_street_address\n\n    data = content[\"data\"][\"customerUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"firstName\"] == first_name\n    assert data[\"user\"][\"lastName\"] == last_name\n    assert data[\"user\"][\"note\"] == note\n    assert data[\"user\"][\"languageCode\"] == \"PL\"\n    assert data[\"user\"][\"externalReference\"] == external_reference\n    assert not data[\"user\"][\"isActive\"]\n\n    (\n        name_changed_event,\n        deactivated_event,\n    ) = account_events.CustomerEvent.objects.order_by(\"pk\")\n\n    assert name_changed_event.type == account_events.CustomerEvents.NAME_ASSIGNED\n    assert name_changed_event.user.pk == staff_user.pk\n    assert name_changed_event.parameters == {\"message\": customer.get_full_name()}\n\n    assert deactivated_event.type == account_events.CustomerEvents.ACCOUNT_DEACTIVATED\n    assert deactivated_event.user.pk == staff_user.pk\n    assert deactivated_event.parameters == {\"account_id\": customer_user.id}\n\n    customer_user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(billing_address)\n        in customer_user.search_document\n    )\n    assert (\n        generate_address_search_document_value(shipping_address)\n        in customer_user.search_document\n    )\n\n\nUPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE = \"\"\"\n    mutation UpdateCustomer(\n        $id: ID, $externalReference: String, $input: CustomerInput!\n    ) {\n        customerUpdate(id: $id, externalReference: $externalReference, input: $input) {\n            errors {\n                field\n                message\n                code\n            }\n            user {\n                id\n                externalReference\n                firstName\n            }\n        }\n    }\n    \"\"\"\n\n\ndef test_customer_update_by_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n    user = customer_user\n    new_name = \"updated name\"\n    ext_ref = \"test-ext-ref\"\n    user.external_reference = ext_ref\n    user.save(update_fields=[\"external_reference\"])\n\n    variables = {\n        \"externalReference\": ext_ref,\n        \"input\": {\"firstName\": new_name},\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    user.refresh_from_db()\n    data = content[\"data\"][\"customerUpdate\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"firstName\"] == new_name == user.first_name\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", user.id)\n    assert data[\"user\"][\"externalReference\"] == ext_ref\n\n\ndef test_update_customer_by_both_id_and_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n    variables = {\"input\": {}, \"externalReference\": \"whatever\", \"id\": \"whatever\"}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerUpdate\"]\n    assert not data[\"user\"]\n    assert (\n        data[\"errors\"][0][\"message\"]\n        == \"Argument 'id' cannot be combined with 'external_reference'\"\n    )\n\n\ndef test_update_customer_by_external_reference_not_existing(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n    ext_ref = \"non-existing-ext-ref\"\n    variables = {\n        \"input\": {},\n        \"externalReference\": ext_ref,\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerUpdate\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"][0][\"message\"] == f\"Couldn't resolve to a node: {ext_ref}\"\n    assert data[\"errors\"][0][\"field\"] == \"externalReference\"\n\n\ndef test_update_customer_with_non_unique_external_reference(\n    staff_api_client, permission_manage_users, user_list\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n\n    ext_ref = \"test-ext-ref\"\n    user_1 = user_list[0]\n    user_1.external_reference = ext_ref\n    user_1.save(update_fields=[\"external_reference\"])\n    user_2_id = graphene.Node.to_global_id(\"User\", user_list[1].id)\n\n    variables = {\"input\": {\"externalReference\": ext_ref}, \"id\": user_2_id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    error = content[\"data\"][\"customerUpdate\"][\"errors\"][0]\n    assert error[\"field\"] == \"externalReference\"\n    assert error[\"code\"] == AccountErrorCode.UNIQUE.name\n    assert error[\"message\"] == \"User with this External reference already exists.\"\n\n\nUPDATE_CUSTOMER_EMAIL_MUTATION = \"\"\"\n    mutation UpdateCustomer(\n            $id: ID!, $firstName: String, $lastName: String, $email: String) {\n        customerUpdate(id: $id, input: {\n            firstName: $firstName,\n            lastName: $lastName,\n            email: $email\n        }) {\n            errors {\n                field\n                message\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_update_generates_event_when_changing_email(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": \"mirumee@example.com\",\n    }\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # The email was changed, an event should have been triggered\n    email_changed_event = account_events.CustomerEvent.objects.get()\n    assert email_changed_event.type == account_events.CustomerEvents.EMAIL_ASSIGNED\n    assert email_changed_event.user.pk == staff_user.pk\n    assert email_changed_event.parameters == {\"message\": \"mirumee@example.com\"}\n\n\nUPDATE_CUSTOMER_IS_ACTIVE_MUTATION = \"\"\"\n    mutation UpdateCustomer(\n        $id: ID!, $isActive: Boolean) {\n            customerUpdate(id: $id, input: {\n            isActive: $isActive,\n        }) {\n            errors {\n                field\n                message\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_update_generates_event_when_deactivating(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": False}\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    account_deactivated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_deactivated_event.type\n        == account_events.CustomerEvents.ACCOUNT_DEACTIVATED\n    )\n    assert account_deactivated_event.user.pk == staff_user.pk\n    assert account_deactivated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_generates_event_when_activating(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    customer_user.is_active = False\n    customer_user.save(update_fields=[\"is_active\"])\n\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": True}\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    account_activated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_activated_event.type == account_events.CustomerEvents.ACCOUNT_ACTIVATED\n    )\n    assert account_activated_event.user.pk == staff_user.pk\n    assert account_activated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_generates_event_when_deactivating_as_app(\n    app_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": False}\n    app_api_client.post_graphql(query, variables, permissions=[permission_manage_users])\n\n    account_deactivated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_deactivated_event.type\n        == account_events.CustomerEvents.ACCOUNT_DEACTIVATED\n    )\n    assert account_deactivated_event.user is None\n    assert account_deactivated_event.app.pk == app_api_client.app.pk\n    assert account_deactivated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_generates_event_when_activating_as_app(\n    app_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    customer_user.is_active = False\n    customer_user.save(update_fields=[\"is_active\"])\n\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": True}\n    app_api_client.post_graphql(query, variables, permissions=[permission_manage_users])\n\n    account_activated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_activated_event.type == account_events.CustomerEvents.ACCOUNT_ACTIVATED\n    )\n    assert account_activated_event.user is None\n    assert account_activated_event.app.pk == app_api_client.app.pk\n    assert account_activated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_without_any_changes_generates_no_event(\n    staff_api_client, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": customer_user.email,\n    }\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # No event should have been generated\n    assert not account_events.CustomerEvent.objects.exists()\n\n\ndef test_customer_update_generates_event_when_changing_email_by_app(\n    app_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": \"mirumee@example.com\",\n    }\n    app_api_client.post_graphql(query, variables, permissions=[permission_manage_users])\n\n    # The email was changed, an event should have been triggered\n    email_changed_event = account_events.CustomerEvent.objects.get()\n    assert email_changed_event.type == account_events.CustomerEvents.EMAIL_ASSIGNED\n    assert email_changed_event.user is None\n    assert email_changed_event.parameters == {\"message\": \"mirumee@example.com\"}\n\n\ndef test_customer_update_assign_gift_cards_and_orders(\n    staff_api_client,\n    staff_user,\n    customer_user,\n    address,\n    gift_card,\n    order,\n    permission_manage_users,\n):\n    # given\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n    new_email = \"mirumee@example.com\"\n\n    gift_card.created_by = None\n    gift_card.created_by_email = new_email\n    gift_card.save(update_fields=[\"created_by\", \"created_by_email\"])\n\n    order.user = None\n    order.user_email = new_email\n    order.save(update_fields=[\"user_email\", \"user\"])\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": new_email,\n    }\n\n    # when\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    email_changed_event = account_events.CustomerEvent.objects.get()\n    assert email_changed_event.type == account_events.CustomerEvents.EMAIL_ASSIGNED\n    gift_card.refresh_from_db()\n    customer_user.refresh_from_db()\n    assert gift_card.created_by == customer_user\n    assert gift_card.created_by_email == customer_user.email\n    order.refresh_from_db()\n    assert order.user == customer_user\n\n\nACCOUNT_UPDATE_QUERY = \"\"\"\n    mutation accountUpdate(\n        $billing: AddressInput\n        $shipping: AddressInput\n        $firstName: String,\n        $lastName: String\n        $languageCode: LanguageCodeEnum\n    ) {\n        accountUpdate(\n          input: {\n            defaultBillingAddress: $billing,\n            defaultShippingAddress: $shipping,\n            firstName: $firstName,\n            lastName: $lastName,\n            languageCode: $languageCode\n        }) {\n            errors {\n                field\n                code\n                message\n                addressType\n            }\n            user {\n                firstName\n                lastName\n                email\n                defaultBillingAddress {\n                    id\n                }\n                defaultShippingAddress {\n                    id\n                }\n                languageCode\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_logged_customer_updates_language_code(user_api_client):\n    language_code = \"PL\"\n    user = user_api_client.user\n    assert user.language_code != language_code\n    variables = {\"languageCode\": language_code}\n\n    response = user_api_client.post_graphql(ACCOUNT_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountUpdate\"]\n\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"languageCode\"] == language_code\n    user.refresh_from_db()\n    assert user.language_code == language_code.lower()\n    assert user.search_document\n\n\ndef test_logged_customer_update_names(user_api_client):\n    first_name = \"first\"\n    last_name = \"last\"\n    user = user_api_client.user\n    assert user.first_name != first_name\n    assert user.last_name != last_name\n\n    variables = {\"firstName\": first_name, \"lastName\": last_name}\n    response = user_api_client.post_graphql(ACCOUNT_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountUpdate\"]\n\n    user.refresh_from_db()\n    assert not data[\"errors\"]\n    assert user.first_name == first_name\n    assert user.last_name == last_name\n\n\ndef test_logged_customer_update_addresses(user_api_client, graphql_address_data):\n    # this test requires addresses to be set and checks whether new address\n    # instances weren't created, but the existing ones got updated\n    user = user_api_client.user\n    new_first_name = graphql_address_data[\"firstName\"]\n    assert user.default_billing_address\n    assert user.default_shipping_address\n    assert user.default_billing_address.first_name != new_first_name\n    assert user.default_shipping_address.first_name != new_first_name\n\n    query = ACCOUNT_UPDATE_QUERY\n    mutation_name = \"accountUpdate\"\n    variables = {\"billing\": graphql_address_data, \"shipping\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    # check that existing instances are updated\n    billing_address_pk = user.default_billing_address.pk\n    shipping_address_pk = user.default_shipping_address.pk\n    user = User.objects.get(email=user.email)\n    assert user.default_billing_address.pk == billing_address_pk\n    assert user.default_shipping_address.pk == shipping_address_pk\n\n    assert user.default_billing_address.first_name == new_first_name\n    assert user.default_shipping_address.first_name == new_first_name\n    assert user.search_document\n\n\ndef test_logged_customer_update_addresses_invalid_shipping_address(\n    user_api_client, graphql_address_data\n):\n    shipping_address = graphql_address_data.copy()\n    del shipping_address[\"country\"]\n\n    query = ACCOUNT_UPDATE_QUERY\n    mutation_name = \"accountUpdate\"\n    variables = {\"billing\": graphql_address_data, \"shipping\": shipping_address}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert len(data[\"errors\"]) == 1\n    errors = data[\"errors\"]\n    assert errors[0][\"field\"] == \"country\"\n    assert errors[0][\"code\"] == AccountErrorCode.REQUIRED.name\n    assert errors[0][\"addressType\"] == AddressType.SHIPPING.upper()\n\n\ndef test_logged_customer_update_addresses_invalid_billing_address(\n    user_api_client, graphql_address_data\n):\n    billing_address = graphql_address_data.copy()\n    del billing_address[\"country\"]\n\n    query = ACCOUNT_UPDATE_QUERY\n    mutation_name = \"accountUpdate\"\n    variables = {\"billing\": billing_address, \"shipping\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert len(data[\"errors\"]) == 1\n    errors = data[\"errors\"]\n    assert errors[0][\"field\"] == \"country\"\n    assert errors[0][\"code\"] == AccountErrorCode.REQUIRED.name\n    assert errors[0][\"addressType\"] == AddressType.BILLING.upper()\n\n\ndef test_logged_customer_update_anonymous_user(api_client):\n    query = ACCOUNT_UPDATE_QUERY\n    response = api_client.post_graphql(query, {})\n    assert_no_permission(response)\n\n\nACCOUNT_REQUEST_DELETION_MUTATION = \"\"\"\n    mutation accountRequestDeletion($redirectUrl: String!, $channel: String) {\n        accountRequestDeletion(redirectUrl: $redirectUrl, channel: $channel) {\n            errors {\n                field\n                code\n                message\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.account.notifications.account_delete_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion(\n    mocked_notify, mocked_token, user_api_client, channel_PLN, site_settings\n):\n    mocked_token.return_value = \"token\"\n    user = user_api_client.user\n    redirect_url = \"https://www.example.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n    params = urlencode({\"token\": \"token\"})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": \"token\",\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_token_validation(\n    mocked_notify, user_api_client, channel_PLN, site_settings\n):\n    user = user_api_client.user\n    token = account_delete_token_generator.make_token(user)\n    redirect_url = \"https://www.example.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n    params = urlencode({\"token\": token})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": token,\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_anonymous_user(mocked_notify, api_client):\n    variables = {\"redirectUrl\": \"https://www.example.com\"}\n    response = api_client.post_graphql(ACCOUNT_REQUEST_DELETION_MUTATION, variables)\n    assert_no_permission(response)\n    mocked_notify.assert_not_called()\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_storefront_hosts_not_allowed(\n    mocked_notify, user_api_client\n):\n    variables = {\"redirectUrl\": \"https://www.fake.com\"}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"message\": ANY,\n    }\n    mocked_notify.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_all_storefront_hosts_allowed(\n    mocked_notify, user_api_client, settings, channel_PLN, site_settings\n):\n    user = user_api_client.user\n    user.last_login = timezone.now()\n    user.save(update_fields=[\"last_login\"])\n\n    token = account_delete_token_generator.make_token(user)\n    settings.ALLOWED_CLIENT_HOSTS = [\"*\"]\n    redirect_url = \"https://www.test.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n\n    params = urlencode({\"token\": token})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": token,\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_subdomain(\n    mocked_notify, user_api_client, settings, channel_PLN, site_settings\n):\n    user = user_api_client.user\n    token = account_delete_token_generator.make_token(user)\n    settings.ALLOWED_CLIENT_HOSTS = [\".example.com\"]\n    redirect_url = \"https://sub.example.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n    params = urlencode({\"token\": token})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": token,\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\nACCOUNT_DELETE_MUTATION = \"\"\"\n    mutation AccountDelete($token: String!){\n        accountDelete(token: $token){\n            errors{\n                field\n                message\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.core.tasks.delete_from_storage_task.delay\")\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete(delete_from_storage_task_mock, user_api_client, media_root):\n    # given\n    thumbnail_mock = MagicMock(spec=File)\n    thumbnail_mock.name = \"image.jpg\"\n\n    user = user_api_client.user\n    user.last_login = timezone.now()\n    user.save(update_fields=[\"last_login\"])\n\n    user_id = user.id\n\n    # create thumbnail\n    thumbnail = Thumbnail.objects.create(user=user, size=128, image=thumbnail_mock)\n    assert user.thumbnails.all()\n    img_path = thumbnail.image.name\n\n    token = account_delete_token_generator.make_token(user)\n    variables = {\"token\": token}\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=user.id).exists()\n    # ensure all related thumbnails have been deleted\n    assert not Thumbnail.objects.filter(user_id=user_id).exists()\n    delete_from_storage_task_mock.assert_called_once_with(img_path)\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete_user_never_log_in(user_api_client):\n    user = user_api_client.user\n    token = account_delete_token_generator.make_token(user)\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=user.id).exists()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete_log_out_after_deletion_request(user_api_client):\n    user = user_api_client.user\n    user.last_login = timezone.now()\n    user.save(update_fields=[\"last_login\"])\n\n    token = account_delete_token_generator.make_token(user)\n\n    # simulate re-login\n    user.last_login = timezone.now() + datetime.timedelta(hours=1)\n    user.save(update_fields=[\"last_login\"])\n\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=user.id).exists()\n\n\ndef test_account_delete_invalid_token(user_api_client):\n    user = user_api_client.user\n    variables = {\"token\": \"invalid\"}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"message\"] == \"Invalid or expired token.\"\n    assert User.objects.filter(pk=user.id).exists()\n\n\ndef test_account_delete_anonymous_user(api_client):\n    variables = {\"token\": \"invalid\"}\n\n    response = api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    assert_no_permission(response)\n\n\ndef test_account_delete_staff_user(staff_api_client):\n    user = staff_api_client.user\n    variables = {\"token\": \"invalid\"}\n\n    response = staff_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"message\"] == \"Cannot delete a staff account.\"\n    assert User.objects.filter(pk=user.id).exists()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete_other_customer_token(user_api_client):\n    user = user_api_client.user\n    other_user = User.objects.create(email=\"temp@example.com\")\n    token = account_delete_token_generator.make_token(other_user)\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"message\"] == \"Invalid or expired token.\"\n    assert User.objects.filter(pk=user.id).exists()\n    assert User.objects.filter(pk=other_user.id).exists()\n\n\nCUSTOMER_DELETE_MUTATION = \"\"\"\n    mutation CustomerDelete($id: ID, $externalReference: String) {\n        customerDelete(id: $id, externalReference: $externalReference) {\n            errors {\n                field\n                message\n            }\n            user {\n                id\n                externalReference\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.account.signals.delete_from_storage_task.delay\")\n@patch(\"saleor.graphql.account.utils.account_events.customer_deleted_event\")\ndef test_customer_delete(\n    mocked_deletion_event,\n    delete_from_storage_task_mock,\n    staff_api_client,\n    staff_user,\n    customer_user,\n    image,\n    permission_manage_users,\n    media_root,\n):\n    \"\"\"Ensure deleting a customer actually deletes the customer and creates proper\n    related events\"\"\"\n\n    query = CUSTOMER_DELETE_MUTATION\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    customer_user.avatar = image\n    customer_user.save(update_fields=[\"avatar\"])\n    variables = {\"id\": customer_id}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerDelete\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"id\"] == customer_id\n\n    # Ensure the customer was properly deleted\n    # and any related event was properly triggered\n    mocked_deletion_event.assert_called_once_with(\n        staff_user=staff_user, app=None, deleted_count=1\n    )\n    delete_from_storage_task_mock.assert_called_once_with(customer_user.avatar.name)\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_delete_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        CUSTOMER_DELETE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerDelete\"]\n\n    # then\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"id\"] == customer_id\n    mocked_webhook_trigger.assert_called_once_with(\n        generate_customer_payload(customer_user, staff_api_client.user),\n        WebhookEventAsyncType.CUSTOMER_DELETED,\n        [any_webhook],\n        customer_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n\n@patch(\"saleor.account.signals.delete_from_storage_task.delay\")\n@patch(\"saleor.graphql.account.utils.account_events.customer_deleted_event\")\ndef test_customer_delete_by_app(\n    mocked_deletion_event,\n    delete_from_storage_task_mock,\n    app_api_client,\n    app,\n    customer_user,\n    image,\n    permission_manage_users,\n    media_root,\n):\n    \"\"\"Ensure deleting a customer actually deletes the customer and creates proper\n    related events\"\"\"\n\n    query = CUSTOMER_DELETE_MUTATION\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    customer_user.avatar = image\n    customer_user.save(update_fields=[\"avatar\"])\n    variables = {\"id\": customer_id}\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerDelete\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"id\"] == customer_id\n\n    # Ensure the customer was properly deleted\n    # and any related event was properly triggered\n    assert mocked_deletion_event.call_count == 1\n    args, kwargs = mocked_deletion_event.call_args\n    assert kwargs[\"deleted_count\"] == 1\n    assert kwargs[\"staff_user\"] is None\n    assert kwargs[\"app\"] == app\n    delete_from_storage_task_mock.assert_called_once_with(customer_user.avatar.name)\n\n\ndef test_customer_delete_errors(customer_user, admin_user, staff_user):\n    info = Mock(context=Mock(user=admin_user))\n    with pytest.raises(ValidationError) as e:\n        CustomerDelete.clean_instance(info, staff_user)\n\n    msg = \"Cannot delete a staff account.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n    # should not raise any errors\n    CustomerDelete.clean_instance(info, customer_user)\n\n\ndef test_customer_delete_by_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    user = customer_user\n    query = CUSTOMER_DELETE_MUTATION\n    ext_ref = \"test-ext-ref\"\n    user.external_reference = ext_ref\n    user.save(update_fields=[\"external_reference\"])\n    variables = {\"externalReference\": ext_ref}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerDelete\"]\n    with pytest.raises(user._meta.model.DoesNotExist):\n        user.refresh_from_db()\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"externalReference\"] == ext_ref\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", user.id)\n\n\ndef test_delete_customer_by_both_id_and_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = CUSTOMER_DELETE_MUTATION\n    variables = {\"externalReference\": \"whatever\", \"id\": \"whatever\"}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    errors = content[\"data\"][\"customerDelete\"][\"errors\"]\n    assert (\n        errors[0][\"message\"]\n        == \"Argument 'id' cannot be combined with 'external_reference'\"\n    )\n\n\ndef test_delete_customer_by_external_reference_not_existing(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = CUSTOMER_DELETE_MUTATION\n    ext_ref = \"non-existing-ext-ref\"\n    variables = {\"externalReference\": ext_ref}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    errors = content[\"data\"][\"customerDelete\"][\"errors\"]\n    assert errors[0][\"message\"] == f\"Couldn't resolve to a node: {ext_ref}\"\n\n\nSTAFF_CREATE_MUTATION = \"\"\"\n    mutation CreateStaff(\n            $email: String, $redirect_url: String, $add_groups: [ID!]\n        ) {\n        staffCreate(input: {email: $email, redirectUrl: $redirect_url,\n            addGroups: $add_groups}\n        ) {\n            errors {\n                field\n                code\n                permissions\n                groups\n            }\n            user {\n                id\n                email\n                isStaff\n                isActive\n                userPermissions {\n                    code\n                }\n                permissionGroups {\n                    name\n                    permissions {\n                        code\n                    }\n                }\n                avatar {\n                    url\n                }\n            }\n        }\n    }\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_staff_create(\n    mocked_notify,\n    staff_api_client,\n    staff_user,\n    media_root,\n    permission_group_manage_users,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    group = permission_group_manage_users\n    group.permissions.add(permission_manage_products)\n    staff_user.user_permissions.add(permission_manage_products, permission_manage_users)\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n\n    expected_perms = {\n        permission_manage_products.codename,\n        permission_manage_users.codename,\n    }\n    permissions = data[\"user\"][\"userPermissions\"]\n    assert {perm[\"code\"].lower() for perm in permissions} == expected_perms\n\n    staff_user = User.objects.get(email=email)\n\n    assert staff_user.is_staff\n    assert staff_user.search_document == f\"{email}\\n\".lower()\n\n    groups = data[\"user\"][\"permissionGroups\"]\n    assert len(groups) == 1\n    assert {perm[\"code\"].lower() for perm in groups[0][\"permissions\"]} == expected_perms\n\n    token = default_token_generator.make_token(staff_user)\n    params = urlencode({\"email\": email, \"token\": token})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_user),\n        \"password_set_url\": password_set_url,\n        \"token\": token,\n        \"recipient_email\": staff_user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_STAFF_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_promote_customer_to_staff_user(\n    mocked_notify,\n    staff_api_client,\n    staff_user,\n    customer_user,\n    media_root,\n    permission_group_manage_users,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_users,\n    channel_PLN,\n):\n    group = permission_group_manage_users\n    group.permissions.add(permission_manage_products)\n    staff_user.user_permissions.add(permission_manage_products, permission_manage_users)\n    redirect_url = \"https://www.example.com\"\n    email = customer_user.email\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n\n    expected_perms = {\n        permission_manage_products.codename,\n        permission_manage_users.codename,\n    }\n    permissions = data[\"user\"][\"userPermissions\"]\n    assert {perm[\"code\"].lower() for perm in permissions} == expected_perms\n\n    staff_user = User.objects.get(email=email)\n\n    assert staff_user.is_staff\n\n    groups = data[\"user\"][\"permissionGroups\"]\n    assert len(groups) == 1\n    assert {perm[\"code\"].lower() for perm in groups[0][\"permissions\"]} == expected_perms\n\n    mocked_notify.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_staff_create_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    staff_user,\n    permission_group_manage_users,\n    permission_manage_staff,\n    permission_manage_users,\n    channel_PLN,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    staff_user.user_permissions.add(permission_manage_users)\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [\n            graphene.Node.to_global_id(\"Group\", permission_group_manage_users.pk)\n        ],\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    new_staff_user = User.objects.get(email=email)\n\n    # then\n    assert not data[\"errors\"]\n    assert data[\"user\"]\n    expected_call = call(\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"User\", new_staff_user.id),\n                \"email\": email,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: staff_api_client.user)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        WebhookEventAsyncType.STAFF_CREATED,\n        [any_webhook],\n        new_staff_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n    assert expected_call in mocked_webhook_trigger.call_args_list\n\n\ndef test_staff_create_app_no_permission(\n    app_api_client,\n    staff_user,\n    media_root,\n    permission_group_manage_users,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_users,\n):\n    group = permission_group_manage_users\n    group.permissions.add(permission_manage_products)\n    staff_user.user_permissions.add(permission_manage_products, permission_manage_users)\n    email = \"api_user@example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": \"https://www.example.com\",\n        \"add_groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    response = app_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n\n    assert_no_permission(response)\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_staff_create_out_of_scope_group(\n    mocked_notify,\n    staff_api_client,\n    superuser_api_client,\n    media_root,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_group_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    \"\"\"Ensure user can't create staff with groups which are out of user scope.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    group = permission_group_manage_users\n    group2 = Group.objects.create(name=\"second group\")\n    group2.permissions.add(permission_manage_staff)\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [\n            graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group, group2]\n        ],\n    }\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    errors = data[\"errors\"]\n    assert not data[\"user\"]\n    assert len(errors) == 1\n\n    expected_error = {\n        \"field\": \"addGroups\",\n        \"code\": AccountErrorCode.OUT_OF_SCOPE_GROUP.name,\n        \"permissions\": None,\n        \"groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    assert errors[0] == expected_error\n\n    mocked_notify.assert_not_called()\n\n    # for superuser\n    response = superuser_api_client.post_graphql(STAFF_CREATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n    expected_perms = {\n        permission_manage_staff.codename,\n        permission_manage_users.codename,\n    }\n    permissions = data[\"user\"][\"userPermissions\"]\n    assert {perm[\"code\"].lower() for perm in permissions} == expected_perms\n\n    staff_user = User.objects.get(email=email)\n\n    assert staff_user.is_staff\n\n    expected_groups = [\n        {\n            \"name\": group.name,\n            \"permissions\": [{\"code\": permission_manage_users.codename.upper()}],\n        },\n        {\n            \"name\": group2.name,\n            \"permissions\": [{\"code\": permission_manage_staff.codename.upper()}],\n        },\n    ]\n    groups = data[\"user\"][\"permissionGroups\"]\n    assert len(groups) == 2\n    for group in expected_groups:\n        assert group in groups\n    token = default_token_generator.make_token(staff_user)\n    params = urlencode({\"email\": email, \"token\": token})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_user),\n        \"password_set_url\": password_set_url,\n        \"token\": token,\n        \"recipient_email\": staff_user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_STAFF_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_staff_create_send_password_with_url(\n    mocked_notify, staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\"email\": email, \"redirect_url\": redirect_url}\n\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert not data[\"errors\"]\n\n    staff_user = User.objects.get(email=email)\n    assert staff_user.is_staff\n\n    token = default_token_generator.make_token(staff_user)\n    params = urlencode({\"email\": email, \"token\": token})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_user),\n        \"password_set_url\": password_set_url,\n        \"token\": token,\n        \"recipient_email\": staff_user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_STAFF_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\ndef test_staff_create_without_send_password(\n    staff_api_client, media_root, permission_manage_staff\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email}\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert not data[\"errors\"]\n    User.objects.get(email=email)\n\n\ndef test_staff_create_with_invalid_url(\n    staff_api_client, media_root, permission_manage_staff\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"invalid\"}\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"permissions\": None,\n        \"groups\": None,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_staff_create_with_not_allowed_url(\n    staff_api_client, media_root, permission_manage_staff\n):\n    email = \"api_userrr@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"https://www.fake.com\"}\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"permissions\": None,\n        \"groups\": None,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_staff_create_with_upper_case_email(\n    staff_api_client, media_root, permission_manage_staff\n):\n    # given\n    email = \"api_user@example.com\"\n    variables = {\"email\": email}\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"staffCreate\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == email.lower()\n\n\nSTAFF_UPDATE_MUTATIONS = \"\"\"\n    mutation UpdateStaff(\n            $id: ID!, $input: StaffUpdateInput!) {\n        staffUpdate(\n                id: $id,\n                input: $input) {\n            errors {\n                field\n                code\n                message\n                permissions\n                groups\n            }\n            user {\n                userPermissions {\n                    code\n                }\n                permissionGroups {\n                    name\n                }\n                isActive\n                email\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_staff_update(staff_api_client, permission_manage_staff, media_root):\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert not data[\"user\"][\"isActive\"]\n    staff_user.refresh_from_db()\n    assert not staff_user.search_document\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_staff_update_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    permission_manage_staff,\n    media_root,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_UPDATE_MUTATIONS, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n\n    # then\n    assert not data[\"errors\"]\n    assert data[\"user\"]\n    mocked_webhook_trigger.assert_called_once_with(\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"User\", staff_user.id),\n                \"email\": staff_user.email,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: staff_api_client.user)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        WebhookEventAsyncType.STAFF_UPDATED,\n        [any_webhook],\n        staff_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n\ndef test_staff_update_email(staff_api_client, permission_manage_staff, media_root):\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    new_email = \"test@email.com\"\n    variables = {\"id\": id, \"input\": {\"email\": new_email}}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert data[\"user\"][\"isActive\"]\n    staff_user.refresh_from_db()\n    assert staff_user.search_document == f\"{new_email}\\n\"\n\n\n@pytest.mark.parametrize(\"field\", [\"firstName\", \"lastName\"])\ndef test_staff_update_name_field(\n    field, staff_api_client, permission_manage_staff, media_root\n):\n    query = STAFF_UPDATE_MUTATIONS\n    email = \"staffuser@example.com\"\n    staff_user = User.objects.create(email=email, is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    value = \"Name\"\n    variables = {\"id\": id, \"input\": {field: value}}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert data[\"user\"][\"isActive\"]\n    staff_user.refresh_from_db()\n    assert staff_user.search_document == f\"{email}\\n{value.lower()}\\n\"\n\n\ndef test_staff_update_app_no_permission(\n    app_api_client, permission_manage_staff, media_root\n):\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    assert_no_permission(response)\n\n\ndef test_staff_update_groups_and_permissions(\n    staff_api_client,\n    media_root,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_manage_orders,\n    permission_manage_products,\n):\n    query = STAFF_UPDATE_MUTATIONS\n    groups = Group.objects.bulk_create(\n        [Group(name=\"manage users\"), Group(name=\"manage orders\"), Group(name=\"empty\")]\n    )\n    group1, group2, group3 = groups\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_orders)\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_user.groups.add(group1)\n\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\n        \"id\": id,\n        \"input\": {\n            \"addGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group2, group3]\n            ],\n            \"removeGroups\": [graphene.Node.to_global_id(\"Group\", group1.pk)],\n        },\n    }\n\n    staff_api_client.user.user_permissions.add(\n        permission_manage_users, permission_manage_orders, permission_manage_products\n    )\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert {perm[\"code\"].lower() for perm in data[\"user\"][\"userPermissions\"]} == {\n        permission_manage_orders.codename,\n    }\n    assert {group[\"name\"] for group in data[\"user\"][\"permissionGroups\"]} == {\n        group2.name,\n        group3.name,\n    }\n\n\ndef test_staff_update_out_of_scope_user(\n    staff_api_client,\n    superuser_api_client,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n):\n    \"\"\"Ensure that staff user cannot update user with wider scope of permission.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_user.user_permissions.add(permission_manage_orders)\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert not data[\"user\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"id\"\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.OUT_OF_SCOPE_USER.name\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"user\"][\"email\"] == staff_user.email\n    assert data[\"user\"][\"isActive\"] is False\n    assert not data[\"errors\"]\n\n\ndef test_staff_update_out_of_scope_groups(\n    staff_api_client,\n    superuser_api_client,\n    permission_manage_staff,\n    media_root,\n    permission_manage_users,\n    permission_manage_orders,\n    permission_manage_products,\n):\n    \"\"\"Ensure that staff user cannot add to groups which permission scope is wider\n    than user's scope.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    query = STAFF_UPDATE_MUTATIONS\n\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage orders\"),\n            Group(name=\"manage products\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_orders)\n    group3.permissions.add(permission_manage_products)\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_api_client.user.user_permissions.add(permission_manage_orders)\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\n        \"id\": id,\n        \"input\": {\n            \"isActive\": False,\n            \"addGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group1, group2]\n            ],\n            \"removeGroups\": [graphene.Node.to_global_id(\"Group\", group3.pk)],\n        },\n    }\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n    assert not data[\"user\"]\n    assert len(errors) == 2\n\n    expected_errors = [\n        {\n            \"field\": \"addGroups\",\n            \"code\": AccountErrorCode.OUT_OF_SCOPE_GROUP.name,\n            \"permissions\": None,\n            \"groups\": [graphene.Node.to_global_id(\"Group\", group1.pk)],\n        },\n        {\n            \"field\": \"removeGroups\",\n            \"code\": AccountErrorCode.OUT_OF_SCOPE_GROUP.name,\n            \"permissions\": None,\n            \"groups\": [graphene.Node.to_global_id(\"Group\", group3.pk)],\n        },\n    ]\n    for error in errors:\n        error.pop(\"message\")\n        assert error in expected_errors\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n    assert not errors\n    assert data[\"user\"][\"email\"] == staff_user.email\n    assert {group[\"name\"] for group in data[\"user\"][\"permissionGroups\"]} == {\n        group1.name,\n        group2.name,\n    }\n\n\ndef test_staff_update_duplicated_input_items(\n    staff_api_client,\n    permission_manage_staff,\n    media_root,\n    permission_manage_orders,\n    permission_manage_users,\n):\n    query = STAFF_UPDATE_MUTATIONS\n\n    groups = Group.objects.bulk_create(\n        [Group(name=\"manage users\"), Group(name=\"manage orders\"), Group(name=\"empty\")]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_orders)\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_api_client.user.user_permissions.add(\n        permission_manage_orders, permission_manage_users\n    )\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\n        \"id\": id,\n        \"input\": {\n            \"addGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group1, group2]\n            ],\n            \"removeGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk)\n                for gr in [group1, group2, group3]\n            ],\n        },\n    }\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    assert len(errors) == 1\n    assert errors[0][\"field\"] is None\n    assert errors[0][\"code\"] == AccountErrorCode.DUPLICATED_INPUT_ITEM.name\n    assert set(errors[0][\"groups\"]) == {\n        graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group1, group2]\n    }\n    assert errors[0][\"permissions\"] is None\n\n\ndef test_staff_update_doesnt_change_existing_avatar(\n    staff_api_client,\n    permission_manage_staff,\n    media_root,\n    staff_users,\n):\n    query = STAFF_UPDATE_MUTATIONS\n\n    mock_file = MagicMock(spec=File)\n    mock_file.name = \"image.jpg\"\n\n    staff_user, staff_user1, _ = staff_users\n\n    id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n\n    staff_user.refresh_from_db()\n    assert not staff_user.avatar\n\n\ndef test_staff_update_deactivate_with_manage_staff_left_not_manageable_perms(\n    staff_api_client,\n    superuser_api_client,\n    staff_users,\n    permission_manage_users,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n):\n    \"\"\"Ensure that staff user can't and superuser can deactivate user where some\n    permissions will be not manageable.\n    \"\"\"\n    query = STAFF_UPDATE_MUTATIONS\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1)\n    group2.user_set.add(staff_user2, staff_user1)\n    group3.user_set.add(staff_user2)\n\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n\n    id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    assert not data[\"user\"]\n    assert len(errors) == 1\n    assert errors[0][\"field\"] == \"isActive\"\n    assert errors[0][\"code\"] == AccountErrorCode.LEFT_NOT_MANAGEABLE_PERMISSION.name\n    assert len(errors[0][\"permissions\"]) == 1\n    assert errors[0][\"permissions\"][0] == AccountPermissions.MANAGE_USERS.name\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    staff_user1.refresh_from_db()\n    assert data[\"user\"][\"email\"] == staff_user1.email\n    assert data[\"user\"][\"isActive\"] is False\n    assert not errors\n    assert not staff_user1.is_active\n\n\ndef test_staff_update_deactivate_with_manage_staff_all_perms_manageable(\n    staff_api_client,\n    staff_users,\n    permission_manage_users,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n):\n    query = STAFF_UPDATE_MUTATIONS\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1, staff_user2)\n    group2.user_set.add(staff_user2, staff_user1)\n    group3.user_set.add(staff_user2)\n\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n\n    id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    staff_user1.refresh_from_db()\n    assert not errors\n    assert staff_user1.is_active is False\n\n\ndef test_staff_update_update_email_assign_gift_cards_and_orders(\n    staff_api_client, permission_manage_staff, gift_card, order\n):\n    # given\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n\n    new_email = \"testuser@example.com\"\n\n    gift_card.created_by = None\n    gift_card.created_by_email = new_email\n    gift_card.save(update_fields=[\"created_by\", \"created_by_email\"])\n\n    order.user = None\n    order.user_email = new_email\n    order.save(update_fields=[\"user_email\", \"user\"])\n\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"email\": new_email}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert data[\"user\"][\"email\"] == new_email\n    gift_card.refresh_from_db()\n    staff_user.refresh_from_db()\n    assert gift_card.created_by == staff_user\n    assert gift_card.created_by_email == staff_user.email\n    order.refresh_from_db()\n    assert order.user == staff_user\n\n\nSTAFF_DELETE_MUTATION = \"\"\"\n        mutation DeleteStaff($id: ID!) {\n            staffDelete(id: $id) {\n                errors {\n                    field\n                    code\n                    message\n                    permissions\n                }\n                user {\n                    id\n                }\n            }\n        }\n    \"\"\"\n\n\ndef test_staff_delete(staff_api_client, permission_manage_staff):\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    assert data[\"errors\"] == []\n    assert not User.objects.filter(pk=staff_user.id).exists()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_staff_delete_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    permission_manage_staff,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_DELETE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n\n    # then\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=staff_user.id).exists()\n    mocked_webhook_trigger.assert_called_once_with(\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"User\", staff_user.id),\n                \"email\": staff_user.email,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: staff_api_client.user)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        WebhookEventAsyncType.STAFF_DELETED,\n        [any_webhook],\n        staff_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n\n@patch(\"saleor.account.signals.delete_from_storage_task.delay\")\ndef test_staff_delete_with_avatar(\n    delete_from_storage_task_mock,\n    staff_api_client,\n    image,\n    permission_manage_staff,\n    media_root,\n):\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(\n        email=\"staffuser@example.com\", avatar=image, is_staff=True\n    )\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    assert data[\"errors\"] == []\n    assert not User.objects.filter(pk=staff_user.id).exists()\n    delete_from_storage_task_mock.assert_called_once_with(staff_user.avatar.name)\n\n\ndef test_staff_delete_app_no_permission(app_api_client, permission_manage_staff):\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    assert_no_permission(response)\n\n\ndef test_staff_delete_out_of_scope_user(\n    staff_api_client,\n    superuser_api_client,\n    permission_manage_staff,\n    permission_manage_products,\n):\n    \"\"\"Ensure staff user cannot delete users even when some of user permissions are\n    out of requestor scope.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_user.user_permissions.add(permission_manage_products)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    assert not data[\"user\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"id\"\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.OUT_OF_SCOPE_USER.name\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n\n    assert data[\"errors\"] == []\n    assert not User.objects.filter(pk=staff_user.id).exists()\n\n\ndef test_staff_delete_left_not_manageable_permissions(\n    staff_api_client,\n    superuser_api_client,\n    staff_users,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    \"\"\"Ensure staff user can't and superuser can delete staff user when some of\n    permissions will be not manageable.\n    \"\"\"\n    query = STAFF_DELETE_MUTATION\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1)\n    group2.user_set.add(staff_user2, staff_user1)\n    group3.user_set.add(staff_user1)\n\n    user_id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": user_id}\n\n    # for staff user\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    errors = data[\"errors\"]\n\n    assert len(errors) == 1\n    assert errors[0][\"field\"] == \"id\"\n    assert errors[0][\"code\"] == AccountErrorCode.LEFT_NOT_MANAGEABLE_PERMISSION.name\n    assert set(errors[0][\"permissions\"]) == {\n        AccountPermissions.MANAGE_USERS.name,\n        OrderPermissions.MANAGE_ORDERS.name,\n    }\n    assert User.objects.filter(pk=staff_user1.id).exists()\n\n    # for superuser\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    errors = data[\"errors\"]\n\n    assert not errors\n    assert not User.objects.filter(pk=staff_user1.id).exists()\n\n\ndef test_staff_delete_all_permissions_manageable(\n    staff_api_client,\n    staff_users,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    query = STAFF_DELETE_MUTATION\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage users and orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_users, permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1)\n    group2.user_set.add(staff_user2)\n    group3.user_set.add(staff_user1)\n\n    user_id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": user_id}\n\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    errors = data[\"errors\"]\n\n    assert len(errors) == 0\n    assert not User.objects.filter(pk=staff_user1.id).exists()\n\n\ndef test_user_delete_errors(staff_user, admin_user):\n    info = Mock(context=Mock(user=staff_user))\n    with pytest.raises(ValidationError) as e:\n        UserDelete.clean_instance(info, staff_user)\n\n    msg = \"You cannot delete your own account.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n    info = Mock(context=Mock(user=staff_user))\n    with pytest.raises(ValidationError) as e:\n        UserDelete.clean_instance(info, admin_user)\n\n    msg = \"Cannot delete this account.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n\ndef test_staff_delete_errors(staff_user, customer_user, admin_user):\n    info = Mock(context=Mock(user=staff_user, app=None))\n    with pytest.raises(ValidationError) as e:\n        StaffDelete.clean_instance(info, customer_user)\n    msg = \"Cannot delete a non-staff users.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n    # should not raise any errors\n    info = Mock(context=Mock(user=admin_user, app=None))\n    StaffDelete.clean_instance(info, staff_user)\n\n\ndef test_staff_update_errors(staff_user, customer_user, admin_user):\n    errors = defaultdict(list)\n    input = {\"is_active\": None}\n    StaffUpdate.clean_is_active(input, customer_user, staff_user, errors)\n    assert not errors[\"is_active\"]\n\n    input[\"is_active\"] = False\n    StaffUpdate.clean_is_active(input, staff_user, staff_user, errors)\n    assert len(errors[\"is_active\"]) == 1\n    assert (\n        errors[\"is_active\"][0].code.upper()\n        == AccountErrorCode.DEACTIVATE_OWN_ACCOUNT.name\n    )\n\n    errors = defaultdict(list)\n    StaffUpdate.clean_is_active(input, admin_user, staff_user, errors)\n    assert len(errors[\"is_active\"]) == 2\n    assert {error.code.upper() for error in errors[\"is_active\"]} == {\n        AccountErrorCode.DEACTIVATE_SUPERUSER_ACCOUNT.name,\n        AccountErrorCode.LEFT_NOT_MANAGEABLE_PERMISSION.name,\n    }\n\n    errors = defaultdict(list)\n    # should not raise any errors\n    StaffUpdate.clean_is_active(input, customer_user, staff_user, errors)\n    assert not errors[\"is_active\"]\n\n\nSET_PASSWORD_MUTATION = \"\"\"\n    mutation SetPassword($email: String!, $token: String!, $password: String!) {\n        setPassword(email: $email, token: $token, password: $password) {\n            errors {\n                field\n                message\n            }\n            errors {\n                field\n                message\n                code\n            }\n            user {\n                id\n            }\n            token\n            refreshToken\n        }\n    }\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_set_password(user_api_client, customer_user):\n    token = default_token_generator.make_token(customer_user)\n    password = \"spanish-inquisition\"\n\n    variables = {\"email\": customer_user.email, \"password\": password, \"token\": token}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"setPassword\"]\n    assert data[\"user\"][\"id\"]\n    assert data[\"token\"]\n\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(password)\n\n    password_resent_event = account_events.CustomerEvent.objects.get()\n    assert password_resent_event.type == account_events.CustomerEvents.PASSWORD_RESET\n    assert password_resent_event.user == customer_user\n\n\ndef test_set_password_invalid_token(user_api_client, customer_user):\n    variables = {\"email\": customer_user.email, \"password\": \"pass\", \"token\": \"token\"}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert errors[0][\"message\"] == INVALID_TOKEN\n\n    account_errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert account_errors[0][\"message\"] == INVALID_TOKEN\n    assert account_errors[0][\"code\"] == AccountErrorCode.INVALID.name\n\n\ndef test_set_password_invalid_email(user_api_client):\n    variables = {\"email\": \"fake@example.com\", \"password\": \"pass\", \"token\": \"token\"}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert len(errors) == 1\n    assert errors[0][\"field\"] == \"email\"\n\n    account_errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert len(account_errors) == 1\n    assert account_errors[0][\"field\"] == \"email\"\n    assert account_errors[0][\"code\"] == AccountErrorCode.NOT_FOUND.name\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_set_password_invalid_password(user_api_client, customer_user, settings):\n    settings.AUTH_PASSWORD_VALIDATORS = [\n        {\n            \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n            \"OPTIONS\": {\"min_length\": 5},\n        },\n        {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\"},\n    ]\n\n    token = default_token_generator.make_token(customer_user)\n    variables = {\"email\": customer_user.email, \"password\": \"1234\", \"token\": token}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert len(errors) == 2\n    assert (\n        errors[0][\"message\"]\n        == \"This password is too short. It must contain at least 5 characters.\"\n    )\n    assert errors[1][\"message\"] == \"This password is entirely numeric.\"\n\n    account_errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert account_errors[0][\"code\"] == str_to_enum(\"password_too_short\")\n    assert account_errors[1][\"code\"] == str_to_enum(\"password_entirely_numeric\")\n\n\nCHANGE_PASSWORD_MUTATION = \"\"\"\n    mutation PasswordChange($oldPassword: String, $newPassword: String!) {\n        passwordChange(oldPassword: $oldPassword, newPassword: $newPassword) {\n            errors {\n                field\n                message\n            }\n            user {\n                email\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_password_change(user_api_client):\n    customer_user = user_api_client.user\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"oldPassword\": \"password\", \"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == customer_user.email\n\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(new_password)\n\n    password_change_event = account_events.CustomerEvent.objects.get()\n    assert password_change_event.type == account_events.CustomerEvents.PASSWORD_CHANGED\n    assert password_change_event.user == customer_user\n\n\ndef test_password_change_incorrect_old_password(user_api_client):\n    customer_user = user_api_client.user\n    variables = {\"oldPassword\": \"incorrect\", \"newPassword\": \"\"}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(\"password\")\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"oldPassword\"\n\n\ndef test_password_change_invalid_new_password(user_api_client, settings):\n    settings.AUTH_PASSWORD_VALIDATORS = [\n        {\n            \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n            \"OPTIONS\": {\"min_length\": 5},\n        },\n        {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\"},\n    ]\n\n    customer_user = user_api_client.user\n    variables = {\"oldPassword\": \"password\", \"newPassword\": \"1234\"}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"passwordChange\"][\"errors\"]\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(\"password\")\n    assert len(errors) == 2\n    assert errors[1][\"field\"] == \"newPassword\"\n    assert (\n        errors[0][\"message\"]\n        == \"This password is too short. It must contain at least 5 characters.\"\n    )\n    assert errors[1][\"field\"] == \"newPassword\"\n    assert errors[1][\"message\"] == \"This password is entirely numeric.\"\n\n\ndef test_password_change_user_unusable_password_fails_if_old_password_is_set(\n    user_api_client,\n):\n    customer_user = user_api_client.user\n    customer_user.set_unusable_password()\n    customer_user.save()\n\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"oldPassword\": \"password\", \"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"oldPassword\"\n\n    customer_user.refresh_from_db()\n    assert not customer_user.has_usable_password()\n\n\ndef test_password_change_user_unusable_password_if_old_password_is_omitted(\n    user_api_client,\n):\n    customer_user = user_api_client.user\n    customer_user.set_unusable_password()\n    customer_user.save()\n\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"oldPassword\": None, \"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == customer_user.email\n\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(new_password)\n\n    password_change_event = account_events.CustomerEvent.objects.get()\n    assert password_change_event.type == account_events.CustomerEvents.PASSWORD_CHANGED\n    assert password_change_event.user == customer_user\n\n\ndef test_password_change_user_usable_password_fails_if_old_password_is_omitted(\n    user_api_client,\n):\n    customer_user = user_api_client.user\n\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"oldPassword\"\n\n    customer_user.refresh_from_db()\n    assert customer_user.has_usable_password()\n    assert not customer_user.check_password(new_password)\n\n\nADDRESS_CREATE_MUTATION = \"\"\"\n    mutation CreateUserAddress($user: ID!, $address: AddressInput!) {\n        addressCreate(userId: $user, input: $address) {\n            errors {\n                field\n                message\n            }\n            address {\n                id\n                city\n                country {\n                    code\n                }\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_create_address_mutation(\n    staff_api_client, customer_user, permission_manage_users, graphql_address_data\n):\n    # given\n    query = ADDRESS_CREATE_MUTATION\n    graphql_address_data[\"city\"] = \"Dummy\"\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    # then\n    assert content[\"data\"][\"addressCreate\"][\"errors\"] == []\n    data = content[\"data\"][\"addressCreate\"]\n    assert data[\"address\"][\"city\"] == \"DUMMY\"\n    assert data[\"address\"][\"country\"][\"code\"] == \"PL\"\n    address_obj = Address.objects.get(city=\"DUMMY\")\n    assert address_obj.user_addresses.first() == customer_user\n    assert data[\"user\"][\"id\"] == user_id\n\n    customer_user.refresh_from_db()\n    for field in [\"city\", \"country\"]:\n        assert variables[\"address\"][field].lower() in customer_user.search_document\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_create_address_mutation_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    settings,\n    graphql_address_data,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n\n    # when\n    response = staff_api_client.post_graphql(\n        ADDRESS_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    address = Address.objects.last()\n\n    # then\n    assert not content[\"data\"][\"addressCreate\"][\"errors\"]\n    assert content[\"data\"][\"addressCreate\"]\n\n    mocked_webhook_trigger.assert_called_once_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_CREATED,\n            staff_api_client.user,\n            any_webhook,\n        )\n    )\n\n\n@override_settings(MAX_USER_ADDRESSES=2)\ndef test_create_address_mutation_the_oldest_address_is_deleted(\n    staff_api_client,\n    customer_user,\n    address,\n    permission_manage_users,\n    graphql_address_data,\n):\n    # given\n    same_address = Address.objects.create(**address.as_data())\n    customer_user.addresses.set([address, same_address])\n\n    user_addresses_count = customer_user.addresses.count()\n    graphql_address_data[\"city\"] = \"Dummy\"\n    query = ADDRESS_CREATE_MUTATION\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    assert content[\"data\"][\"addressCreate\"][\"errors\"] == []\n    data = content[\"data\"][\"addressCreate\"]\n    assert data[\"address\"][\"city\"] == \"DUMMY\"\n    assert data[\"address\"][\"country\"][\"code\"] == \"PL\"\n    address_obj = Address.objects.get(city=\"DUMMY\")\n    assert address_obj.user_addresses.first() == customer_user\n    assert data[\"user\"][\"id\"] == user_id\n\n    customer_user.refresh_from_db()\n    assert customer_user.addresses.count() == user_addresses_count\n\n    with pytest.raises(address._meta.model.DoesNotExist):\n        address.refresh_from_db()\n\n\ndef test_create_address_validation_fails(\n    staff_api_client,\n    customer_user,\n    graphql_address_data,\n    permission_manage_users,\n    address,\n):\n    # given\n    query = ADDRESS_CREATE_MUTATION\n    address_data = graphql_address_data\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data[\"postalCode\"] = \"wrong postal code\"\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"addressCreate\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"postalCode\"\n    assert data[\"address\"] is None\n\n\nADDRESS_UPDATE_MUTATION = \"\"\"\n    mutation updateUserAddress($addressId: ID!, $address: AddressInput!) {\n        addressUpdate(id: $addressId, input: $address) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_address_update_mutation(\n    staff_api_client, customer_user, permission_manage_users, graphql_address_data\n):\n    query = ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n    assert staff_api_client.user not in address_obj.user_addresses.all()\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": graphql_address_data,\n    }\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressUpdate\"]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n    address_obj.refresh_from_db()\n    assert address_obj.city == graphql_address_data[\"city\"].upper()\n    customer_user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(address_obj)\n        in customer_user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_address_update_mutation_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    graphql_address_data,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    assert staff_api_client.user not in address.user_addresses.all()\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"address\": graphql_address_data,\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        ADDRESS_UPDATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    address.refresh_from_db()\n\n    # then\n    assert content[\"data\"][\"addressUpdate\"]\n    mocked_webhook_trigger.assert_called_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_UPDATED,\n            staff_api_client.user,\n            any_webhook,\n        )\n    )\n\n\n@patch(\"saleor.graphql.account.mutations.base.prepare_user_search_document_value\")\ndef test_address_update_mutation_no_user_assigned(\n    prepare_user_search_document_value_mock,\n    staff_api_client,\n    address,\n    permission_manage_users,\n    graphql_address_data,\n):\n    # given\n    query = ADDRESS_UPDATE_MUTATION\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"address\": graphql_address_data,\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressUpdate\"]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n    prepare_user_search_document_value_mock.assert_not_called()\n\n\nACCOUNT_ADDRESS_UPDATE_MUTATION = \"\"\"\n    mutation updateAccountAddress($addressId: ID!, $address: AddressInput!) {\n        accountAddressUpdate(id: $addressId, input: $address) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_update_own_address(\n    user_api_client, customer_user, graphql_address_data\n):\n    query = ACCOUNT_ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n    address_data = graphql_address_data\n    address_data[\"city\"] = \"Pozna\u0144\"\n    assert address_data[\"city\"] != address_obj.city\n    user = user_api_client.user\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": address_data,\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountAddressUpdate\"]\n    assert data[\"address\"][\"city\"] == address_data[\"city\"].upper()\n    address_obj.refresh_from_db()\n    assert address_obj.city == address_data[\"city\"].upper()\n    user.refresh_from_db()\n    assert generate_address_search_document_value(address_obj) in user.search_document\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_address_update_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    user_api_client,\n    customer_user,\n    graphql_address_data,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    address_data = graphql_address_data\n    address_data[\"city\"] = \"Pozna\u0144\"\n    assert address_data[\"city\"] != address.city\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"address\": graphql_address_data,\n    }\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_UPDATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    address.refresh_from_db()\n\n    # then\n    assert content[\"data\"][\"accountAddressUpdate\"]\n    mocked_webhook_trigger.assert_called_once_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_UPDATED,\n            user_api_client.user,\n            any_webhook,\n        )\n    )\n\n\ndef test_update_address_as_anonymous_user(\n    api_client, customer_user, graphql_address_data\n):\n    query = ACCOUNT_ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": graphql_address_data,\n    }\n    response = api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_customer_update_own_address_not_updated_when_validation_fails(\n    user_api_client, customer_user, graphql_address_data\n):\n    query = ACCOUNT_ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n    address_data = graphql_address_data\n    address_data[\"city\"] = \"Pozna\u0144\"\n    address_data[\"postalCode\"] = \"wrong postal code\"\n    assert address_data[\"city\"] != address_obj.city\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": address_data,\n    }\n    user_api_client.post_graphql(query, variables)\n    address_obj.refresh_from_db()\n    assert address_obj.city != address_data[\"city\"]\n    assert address_obj.postal_code != address_data[\"postalCode\"]\n\n\n@pytest.mark.parametrize(\n    \"query\", [ADDRESS_UPDATE_MUTATION, ACCOUNT_ADDRESS_UPDATE_MUTATION]\n)\ndef test_customer_update_address_for_other(\n    user_api_client, customer_user, address_other_country, graphql_address_data, query\n):\n    address_obj = address_other_country\n    assert customer_user not in address_obj.user_addresses.all()\n\n    address_data = graphql_address_data\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": address_data,\n    }\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\nADDRESS_DELETE_MUTATION = \"\"\"\n    mutation deleteUserAddress($id: ID!) {\n        addressDelete(id: $id) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_address_delete_mutation(\n    staff_api_client, customer_user, permission_manage_users\n):\n    query = ADDRESS_DELETE_MUTATION\n    address_obj = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressDelete\"]\n    assert data[\"address\"][\"city\"] == address_obj.city\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", customer_user.pk)\n    with pytest.raises(address_obj._meta.model.DoesNotExist):\n        address_obj.refresh_from_db()\n\n    customer_user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(address_obj)\n        not in customer_user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_address_delete_mutation_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address.id)}\n\n    # when\n    response = staff_api_client.post_graphql(\n        ADDRESS_DELETE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    assert content[\"data\"][\"addressDelete\"]\n    mocked_webhook_trigger.assert_called_once_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_DELETED,\n            staff_api_client.user,\n            any_webhook,\n        )\n    )\n\n\ndef test_address_delete_mutation_as_app(\n    app_api_client, customer_user, permission_manage_users\n):\n    query = ADDRESS_DELETE_MUTATION\n    address_obj = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressDelete\"]\n    assert data[\"address\"][\"city\"] == address_obj.city\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", customer_user.pk)\n    with pytest.raises(address_obj._meta.model.DoesNotExist):\n        address_obj.refresh_from_db()\n\n\nACCOUNT_ADDRESS_DELETE_MUTATION = \"\"\"\n    mutation deleteUserAddress($id: ID!) {\n        accountAddressDelete(id: $id) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_delete_own_address(user_api_client, customer_user):\n    query = ACCOUNT_ADDRESS_DELETE_MUTATION\n    address_obj = customer_user.addresses.first()\n    user = user_api_client.user\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountAddressDelete\"]\n    assert data[\"address\"][\"city\"] == address_obj.city\n    with pytest.raises(address_obj._meta.model.DoesNotExist):\n        address_obj.refresh_from_db()\n    user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(address_obj) not in user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_delete_address_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    user_api_client,\n    customer_user,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address.id)}\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n\n    # then\n    assert content[\"data\"][\"accountAddressDelete\"]\n    mocked_webhook_trigger.assert_called_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_DELETED,\n            user_api_client.user,\n            any_webhook,\n        )\n    )\n\n\n@pytest.mark.parametrize(\n    \"query\", [ADDRESS_DELETE_MUTATION, ACCOUNT_ADDRESS_DELETE_MUTATION]\n)\ndef test_customer_delete_address_for_other(\n    user_api_client, customer_user, address_other_country, query\n):\n    address_obj = address_other_country\n    assert customer_user not in address_obj.user_addresses.all()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n    address_obj.refresh_from_db()\n\n\nSET_DEFAULT_ADDRESS_MUTATION = \"\"\"\nmutation($address_id: ID!, $user_id: ID!, $type: AddressTypeEnum!) {\n  addressSetDefault(addressId: $address_id, userId: $user_id, type: $type) {\n    errors {\n      field\n      message\n    }\n    user {\n      defaultBillingAddress {\n        id\n      }\n      defaultShippingAddress {\n        id\n      }\n    }\n  }\n}\n\"\"\"\n\n\ndef test_set_default_address(\n    staff_api_client, address_other_country, customer_user, permission_manage_users\n):\n    customer_user.default_billing_address = None\n    customer_user.default_shipping_address = None\n    customer_user.save()\n\n    # try to set an address that doesn't belong to that user\n    address = address_other_country\n\n    variables = {\n        \"address_id\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"user_id\": graphene.Node.to_global_id(\"User\", customer_user.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n\n    response = staff_api_client.post_graphql(\n        SET_DEFAULT_ADDRESS_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressSetDefault\"]\n    assert data[\"errors\"][0][\"field\"] == \"addressId\"\n\n    # try to set a new billing address using one of user's addresses\n    address = customer_user.addresses.first()\n    address_id = graphene.Node.to_global_id(\"Address\", address.id)\n\n    variables[\"address_id\"] = address_id\n    response = staff_api_client.post_graphql(SET_DEFAULT_ADDRESS_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressSetDefault\"]\n    assert data[\"user\"][\"defaultShippingAddress\"][\"id\"] == address_id\n\n\nGET_ADDRESS_VALIDATION_RULES_QUERY = \"\"\"\n    query getValidator(\n        $country_code: CountryCode!, $country_area: String, $city_area: String) {\n        addressValidationRules(\n                countryCode: $country_code,\n                countryArea: $country_area,\n                cityArea: $city_area) {\n            countryCode\n            countryName\n            addressFormat\n            addressLatinFormat\n            allowedFields\n            requiredFields\n            upperFields\n            countryAreaType\n            countryAreaChoices {\n                verbose\n                raw\n            }\n            cityType\n            cityChoices {\n                raw\n                verbose\n            }\n            cityAreaType\n            cityAreaChoices {\n                raw\n                verbose\n            }\n            postalCodeType\n            postalCodeMatchers\n            postalCodeExamples\n            postalCodePrefix\n        }\n    }\n\"\"\"\n\n\ndef test_address_validation_rules(user_api_client):\n    query = GET_ADDRESS_VALIDATION_RULES_QUERY\n    variables = {\"country_code\": \"PL\", \"country_area\": None, \"city_area\": None}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressValidationRules\"]\n    assert data[\"countryCode\"] == \"PL\"\n    assert data[\"countryName\"] == \"POLAND\"\n    assert data[\"addressFormat\"] is not None\n    assert data[\"addressLatinFormat\"] is not None\n    assert data[\"cityType\"] == \"city\"\n    assert data[\"cityAreaType\"] == \"suburb\"\n    matcher = data[\"postalCodeMatchers\"][0]\n    matcher = re.compile(matcher)\n    assert matcher.match(\"00-123\")\n    assert not data[\"cityAreaChoices\"]\n    assert not data[\"cityChoices\"]\n    assert not data[\"countryAreaChoices\"]\n    assert data[\"postalCodeExamples\"]\n    assert data[\"postalCodeType\"] == \"postal\"\n    assert set(data[\"allowedFields\"]) == {\n        \"companyName\",\n        \"city\",\n        \"postalCode\",\n        \"streetAddress1\",\n        \"name\",\n        \"streetAddress2\",\n    }\n    assert set(data[\"requiredFields\"]) == {\"postalCode\", \"streetAddress1\", \"city\"}\n    assert set(data[\"upperFields\"]) == {\"city\"}\n\n\ndef test_address_validation_rules_with_country_area(user_api_client):\n    query = GET_ADDRESS_VALIDATION_RULES_QUERY\n    variables = {\n        \"country_code\": \"CN\",\n        \"country_area\": \"Fujian Sheng\",\n        \"city_area\": None,\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressValidationRules\"]\n    assert data[\"countryCode\"] == \"CN\"\n    assert data[\"countryName\"] == \"CHINA\"\n    assert data[\"countryAreaType\"] == \"province\"\n    assert data[\"countryAreaChoices\"]\n    assert data[\"cityType\"] == \"city\"\n    assert data[\"cityChoices\"]\n    assert data[\"cityAreaType\"] == \"district\"\n    assert not data[\"cityAreaChoices\"]\n    assert data[\"cityChoices\"]\n    assert data[\"countryAreaChoices\"]\n    assert data[\"postalCodeExamples\"]\n    assert data[\"postalCodeType\"] == \"postal\"\n    assert set(data[\"allowedFields\"]) == {\n        \"city\",\n        \"postalCode\",\n        \"streetAddress1\",\n        \"name\",\n        \"streetAddress2\",\n        \"countryArea\",\n        \"companyName\",\n        \"cityArea\",\n    }\n    assert set(data[\"requiredFields\"]) == {\n        \"postalCode\",\n        \"streetAddress1\",\n        \"city\",\n        \"countryArea\",\n    }\n    assert set(data[\"upperFields\"]) == {\"countryArea\"}\n\n\ndef test_address_validation_rules_fields_in_camel_case(user_api_client):\n    query = \"\"\"\n    query getValidator(\n        $country_code: CountryCode!) {\n        addressValidationRules(countryCode: $country_code) {\n            requiredFields\n            allowedFields\n        }\n    }\n    \"\"\"\n    variables = {\"country_code\": \"PL\"}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressValidationRules\"]\n    required_fields = data[\"requiredFields\"]\n    allowed_fields = data[\"allowedFields\"]\n    assert \"streetAddress1\" in required_fields\n    assert \"streetAddress2\" not in required_fields\n    assert \"streetAddress1\" in allowed_fields\n    assert \"streetAddress2\" in allowed_fields\n\n\nREQUEST_PASSWORD_RESET_MUTATION = \"\"\"\n    mutation RequestPasswordReset(\n        $email: String!, $redirectUrl: String!, $channel: String) {\n        requestPasswordReset(\n            email: $email, redirectUrl: $redirectUrl, channel: $channel) {\n            errors {\n                field\n                message\n            }\n        }\n    }\n\"\"\"\n\nCONFIRM_ACCOUNT_MUTATION = \"\"\"\n    mutation ConfirmAccount($email: String!, $token: String!) {\n        confirmAccount(email: $email, token: $token) {\n            errors {\n                field\n                code\n            }\n            user {\n                id\n                email\n            }\n        }\n    }\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    channel_PLN,\n    channel_USD,\n    site_settings,\n):\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_with_upper_case_email(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    channel_PLN,\n    channel_USD,\n    site_settings,\n):\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": customer_user.email.upper(),\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.graphql.account.mutations.base.assign_user_gift_cards\")\n@patch(\"saleor.graphql.account.mutations.base.match_orders_with_new_user\")\ndef test_account_confirmation(\n    match_orders_with_new_user_mock,\n    assign_gift_cards_mock,\n    api_client,\n    customer_user,\n    channel_USD,\n):\n    customer_user.is_active = False\n    customer_user.save()\n\n    variables = {\n        \"email\": customer_user.email,\n        \"token\": default_token_generator.make_token(customer_user),\n        \"channel\": channel_USD.slug,\n    }\n    response = api_client.post_graphql(CONFIRM_ACCOUNT_MUTATION, variables)\n    content = get_graphql_content(response)\n    assert not content[\"data\"][\"confirmAccount\"][\"errors\"]\n    assert content[\"data\"][\"confirmAccount\"][\"user\"][\"email\"] == customer_user.email\n    customer_user.refresh_from_db()\n    match_orders_with_new_user_mock.assert_called_once_with(customer_user)\n    assign_gift_cards_mock.assert_called_once_with(customer_user)\n    assert customer_user.is_active is True\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.graphql.account.mutations.base.assign_user_gift_cards\")\n@patch(\"saleor.graphql.account.mutations.base.match_orders_with_new_user\")\ndef test_account_confirmation_invalid_user(\n    match_orders_with_new_user_mock,\n    assign_gift_cards_mock,\n    user_api_client,\n    customer_user,\n    channel_USD,\n):\n    variables = {\n        \"email\": \"non-existing@example.com\",\n        \"token\": default_token_generator.make_token(customer_user),\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(CONFIRM_ACCOUNT_MUTATION, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"field\"] == \"email\"\n    assert (\n        content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"code\"]\n        == AccountErrorCode.NOT_FOUND.name\n    )\n    match_orders_with_new_user_mock.assert_not_called()\n    assign_gift_cards_mock.assert_not_called()\n\n\n@patch(\"saleor.graphql.account.mutations.base.assign_user_gift_cards\")\n@patch(\"saleor.graphql.account.mutations.base.match_orders_with_new_user\")\ndef test_account_confirmation_invalid_token(\n    match_orders_with_new_user_mock,\n    assign_gift_cards_mock,\n    user_api_client,\n    customer_user,\n    channel_USD,\n):\n    variables = {\n        \"email\": customer_user.email,\n        \"token\": \"invalid_token\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(CONFIRM_ACCOUNT_MUTATION, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"field\"] == \"token\"\n    assert (\n        content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"code\"]\n        == AccountErrorCode.INVALID.name\n    )\n    match_orders_with_new_user_mock.assert_not_called()\n    assign_gift_cards_mock.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_request_password_reset_email_for_staff(\n    mocked_notify, staff_api_client, channel_USD, site_settings\n):\n    redirect_url = \"https://www.example.com\"\n    variables = {\"email\": staff_api_client.user.email, \"redirectUrl\": redirect_url}\n    response = staff_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n    token = default_token_generator.make_token(staff_api_client.user)\n    params = urlencode({\"email\": staff_api_client.user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_api_client.user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": staff_api_client.user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_STAFF_RESET_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_invalid_email(\n    mocked_notify, user_api_client, channel_USD\n):\n    variables = {\n        \"email\": \"non-existing-email@email.com\",\n        \"redirectUrl\": \"https://www.example.com\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert len(data[\"errors\"]) == 1\n    mocked_notify.assert_not_called()\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_user_is_inactive(\n    mocked_notify, user_api_client, customer_user, channel_USD\n):\n    user = customer_user\n    user.is_active = False\n    user.save()\n\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": \"https://www.example.com\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    results = response.json()\n    assert \"errors\" in results\n    assert (\n        results[\"errors\"][0][\"message\"]\n        == \"Invalid token. User does not exist or is inactive.\"\n    )\n    assert not mocked_notify.called\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_storefront_hosts_not_allowed(\n    mocked_notify, user_api_client, customer_user, channel_USD\n):\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": \"https://www.fake.com\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"redirectUrl\"\n    mocked_notify.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_all_storefront_hosts_allowed(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    settings,\n    channel_PLN,\n    channel_USD,\n    site_settings,\n):\n    settings.ALLOWED_CLIENT_HOSTS = [\"*\"]\n    redirect_url = \"https://www.test.com\"\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_subdomain(\n    mocked_notify, user_api_client, customer_user, settings, channel_PLN, site_settings\n):\n    settings.ALLOWED_CLIENT_HOSTS = [\".example.com\"]\n    redirect_url = \"https://sub.example.com\"\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\nACCOUNT_ADDRESS_CREATE_MUTATION = \"\"\"\nmutation($addressInput: AddressInput!, $addressType: AddressTypeEnum) {\n  accountAddressCreate(input: $addressInput, type: $addressType) {\n    address {\n        id,\n        city\n    }\n    user {\n        email\n    }\n    errors {\n        code\n        field\n        addressType\n    }\n  }\n}\n\"\"\"\n\n\ndef test_customer_create_address(user_api_client, graphql_address_data):\n    user = user_api_client.user\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    mutation_name = \"accountAddressCreate\"\n\n    variables = {\"addressInput\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count + 1\n    assert (\n        generate_address_search_document_value(user.addresses.last())\n        in user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_create_address_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    user_api_client,\n    graphql_address_data,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    variables = {\"addressInput\": graphql_address_data}\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_CREATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    address = Address.objects.last()\n\n    # then\n    assert content[\"data\"][\"accountAddressCreate\"]\n    mocked_webhook_trigger.assert_called_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_CREATED,\n            user_api_client.user,\n            any_webhook,\n        )\n    )\n\n\ndef test_account_address_create_return_user(user_api_client, graphql_address_data):\n    user = user_api_client.user\n    variables = {\"addressInput\": graphql_address_data}\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_CREATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountAddressCreate\"][\"user\"]\n    assert data[\"email\"] == user.email\n\n\ndef test_customer_create_default_address(user_api_client, graphql_address_data):\n    user = user_api_client.user\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    mutation_name = \"accountAddressCreate\"\n\n    address_type = AddressType.SHIPPING.upper()\n    variables = {\"addressInput\": graphql_address_data, \"addressType\": address_type}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count + 1\n    assert user.default_shipping_address.id == int(\n        graphene.Node.from_global_id(data[\"address\"][\"id\"])[1]\n    )\n\n    address_type = AddressType.BILLING.upper()\n    variables = {\"addressInput\": graphql_address_data, \"addressType\": address_type}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count + 2\n    assert user.default_billing_address.id == int(\n        graphene.Node.from_global_id(data[\"address\"][\"id\"])[1]\n    )\n\n\n@override_settings(MAX_USER_ADDRESSES=2)\ndef test_customer_create_address_the_oldest_address_is_deleted(\n    user_api_client, graphql_address_data, address\n):\n    \"\"\"Ensure that when mew address it added to user with max amount of addressess,\n    the oldest address will be removed.\"\"\"\n    user = user_api_client.user\n    same_address = Address.objects.create(**address.as_data())\n    user.addresses.set([address, same_address])\n\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    mutation_name = \"accountAddressCreate\"\n\n    variables = {\"addressInput\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count\n\n    with pytest.raises(address._meta.model.DoesNotExist):\n        address.refresh_from_db()\n\n\ndef test_anonymous_user_create_address(api_client, graphql_address_data):\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    variables = {\"addressInput\": graphql_address_data}\n    response = api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_address_not_created_after_validation_fails(\n    user_api_client, graphql_address_data\n):\n    user = user_api_client.user\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n\n    graphql_address_data[\"postalCode\"] = \"wrong postal code\"\n\n    address_type = AddressType.SHIPPING.upper()\n    variables = {\"addressInput\": graphql_address_data, \"addressType\": address_type}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n\n    data = content[\"data\"][\"accountAddressCreate\"]\n    assert not data[\"address\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.INVALID.name\n    assert data[\"errors\"][0][\"field\"] == \"postalCode\"\n    assert data[\"errors\"][0][\"addressType\"] == address_type\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count\n\n\nACCOUNT_SET_DEFAULT_ADDRESS_MUTATION = \"\"\"\nmutation($id: ID!, $type: AddressTypeEnum!) {\n  accountSetDefaultAddress(id: $id, type: $type) {\n    errors {\n      field,\n      message\n    }\n  }\n}\n\"\"\"\n\n\ndef test_customer_set_address_as_default(user_api_client):\n    user = user_api_client.user\n    user.default_billing_address = None\n    user.default_shipping_address = None\n    user.save()\n    assert not user.default_billing_address\n    assert not user.default_shipping_address\n    assert user.addresses.exists()\n\n    address = user.addresses.first()\n    query = ACCOUNT_SET_DEFAULT_ADDRESS_MUTATION\n    mutation_name = \"accountSetDefaultAddress\"\n\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    user.refresh_from_db()\n    assert user.default_shipping_address == address\n\n    variables[\"type\"] = AddressType.BILLING.upper()\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    user.refresh_from_db()\n    assert user.default_billing_address == address\n\n\ndef test_customer_change_default_address(user_api_client, address_other_country):\n    user = user_api_client.user\n    assert user.default_billing_address\n    assert user.default_billing_address\n    address = user.default_shipping_address\n    assert address in user.addresses.all()\n    assert address_other_country not in user.addresses.all()\n\n    user.default_shipping_address = address_other_country\n    user.save()\n    user.refresh_from_db()\n    assert address_other_country not in user.addresses.all()\n\n    query = ACCOUNT_SET_DEFAULT_ADDRESS_MUTATION\n    mutation_name = \"accountSetDefaultAddress\"\n\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    user.refresh_from_db()\n    assert user.default_shipping_address == address\n    assert address_other_country in user.addresses.all()\n\n\ndef test_customer_change_default_address_invalid_address(\n    user_api_client, address_other_country\n):\n    user = user_api_client.user\n    assert address_other_country not in user.addresses.all()\n\n    query = ACCOUNT_SET_DEFAULT_ADDRESS_MUTATION\n    mutation_name = \"accountSetDefaultAddress\"\n\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Address\", address_other_country.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][mutation_name][\"errors\"][0][\"field\"] == \"id\"\n\n\nUSER_AVATAR_UPDATE_MUTATION = \"\"\"\n    mutation userAvatarUpdate($image: Upload!) {\n        userAvatarUpdate(image: $image) {\n            user {\n                avatar(size: 0) {\n                    url\n                }\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_user_avatar_update_mutation_permission(api_client):\n    \"\"\"Should raise error if user is not staff.\"\"\"\n\n    query = USER_AVATAR_UPDATE_MUTATION\n\n    image_file, image_name = create_image(\"avatar\")\n    variables = {\"image\": image_name}\n    body = get_multipart_request_body(query, variables, image_file, image_name)\n    response = api_client.post_multipart(body)\n\n    assert_no_permission(response)\n\n\ndef test_user_avatar_update_mutation(\n    monkeypatch, staff_api_client, media_root, site_settings\n):\n    query = USER_AVATAR_UPDATE_MUTATION\n\n    user = staff_api_client.user\n\n    image_file, image_name = create_image(\"avatar\")\n    variables = {\"image\": image_name}\n    body = get_multipart_request_body(query, variables, image_file, image_name)\n\n    # when\n    response = staff_api_client.post_multipart(body)\n\n    # then\n    content = get_graphql_content(response)\n\n    data = content[\"data\"][\"userAvatarUpdate\"]\n    user.refresh_from_db()\n\n    assert user.avatar\n    assert data[\"user\"][\"avatar\"][\"url\"].startswith(\n        f\"http://{site_settings.site.domain}/media/user-avatars/avatar\"\n    )\n    img_name, format = os.path.splitext(image_file._name)\n    file_name = user.avatar.name\n    assert file_name != image_file._name\n    assert file_name.startswith(f\"user-avatars/{img_name}\")\n    assert file_name.endswith(format)\n\n\ndef test_user_avatar_update_mutation_image_exists(\n    staff_api_client, media_root, site_settings\n):\n    query = USER_AVATAR_UPDATE_MUTATION\n\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save()\n\n    # create thumbnail for old avatar\n    Thumbnail.objects.create(user=staff_api_client.user, size=128)\n    assert user.thumbnails.exists()\n\n    image_file, image_name = create_image(\"new_image\")\n    variables = {\"image\": image_name}\n    body = get_multipart_request_body(query, variables, image_file, image_name)\n\n    # when\n    response = staff_api_client.post_multipart(body)\n\n    # then\n    content = get_graphql_content(response)\n\n    data = content[\"data\"][\"userAvatarUpdate\"]\n    user.refresh_from_db()\n\n    assert user.avatar != avatar_mock\n    assert data[\"user\"][\"avatar\"][\"url\"].startswith(\n        f\"http://{site_settings.site.domain}/media/user-avatars/new_image\"\n    )\n    assert not user.thumbnails.exists()\n\n\nUSER_AVATAR_DELETE_MUTATION = \"\"\"\n    mutation userAvatarDelete {\n        userAvatarDelete {\n            user {\n                avatar {\n                    url\n                }\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_user_avatar_delete_mutation_permission(api_client):\n    \"\"\"Should raise error if user is not staff.\"\"\"\n\n    query = USER_AVATAR_DELETE_MUTATION\n\n    response = api_client.post_graphql(query)\n\n    assert_no_permission(response)\n\n\ndef test_user_avatar_delete_mutation(staff_api_client):\n    # given\n    query = USER_AVATAR_DELETE_MUTATION\n\n    user = staff_api_client.user\n    Thumbnail.objects.create(user=staff_api_client.user, size=128)\n    assert user.thumbnails.all()\n\n    # when\n    response = staff_api_client.post_graphql(query)\n    content = get_graphql_content(response)\n\n    # then\n    user.refresh_from_db()\n\n    assert not user.avatar\n    assert not content[\"data\"][\"userAvatarDelete\"][\"user\"][\"avatar\"]\n    assert not user.thumbnails.exists()\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"placedOrders\": {\"gte\": \"2019-04-18\"}}, 1),\n        ({\"placedOrders\": {\"lte\": \"2012-01-14\"}}, 1),\n        ({\"placedOrders\": {\"lte\": \"2012-01-14\", \"gte\": \"2012-01-13\"}}, 1),\n        ({\"placedOrders\": {\"gte\": \"2012-01-14\"}}, 2),\n    ],\n)\ndef test_query_customers_with_filter_placed_orders(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n    channel_USD,\n):\n    Order.objects.create(user=customer_user, channel=channel_USD)\n    second_customer = User.objects.create(email=\"second_example@example.com\")\n    with freeze_time(\"2012-01-14 11:00:00\"):\n        Order.objects.create(user=second_customer, channel=channel_USD)\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(users) == count\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"dateJoined\": {\"gte\": \"2019-04-18\"}}, 1),\n        ({\"dateJoined\": {\"lte\": \"2012-01-14\"}}, 1),\n        ({\"dateJoined\": {\"lte\": \"2012-01-14\", \"gte\": \"2012-01-13\"}}, 1),\n        ({\"dateJoined\": {\"gte\": \"2012-01-14\"}}, 2),\n        ({\"updatedAt\": {\"gte\": \"2012-01-14T10:59:00+00:00\"}}, 2),\n        ({\"updatedAt\": {\"gte\": \"2012-01-14T11:01:00+00:00\"}}, 1),\n        ({\"updatedAt\": {\"lte\": \"2012-01-14T12:00:00+00:00\"}}, 1),\n        ({\"updatedAt\": {\"lte\": \"2011-01-14T10:59:00+00:00\"}}, 0),\n        (\n            {\n                \"updatedAt\": {\n                    \"lte\": \"2012-01-14T12:00:00+00:00\",\n                    \"gte\": \"2012-01-14T10:00:00+00:00\",\n                }\n            },\n            1,\n        ),\n        ({\"updatedAt\": {\"gte\": \"2012-01-14T10:00:00+00:00\"}}, 2),\n    ],\n)\ndef test_query_customers_with_filter_date_joined_and_updated_at(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n):\n    with freeze_time(\"2012-01-14 11:00:00\"):\n        User.objects.create(email=\"second_example@example.com\")\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == count\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"numberOfOrders\": {\"gte\": 0, \"lte\": 1}}, 1),\n        ({\"numberOfOrders\": {\"gte\": 1, \"lte\": 3}}, 2),\n        ({\"numberOfOrders\": {\"gte\": 0}}, 2),\n        ({\"numberOfOrders\": {\"lte\": 3}}, 2),\n    ],\n)\ndef test_query_customers_with_filter_placed_orders_(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n    channel_USD,\n):\n    Order.objects.bulk_create(\n        [\n            Order(user=customer_user, channel=channel_USD),\n            Order(user=customer_user, channel=channel_USD),\n            Order(user=customer_user, channel=channel_USD),\n        ]\n    )\n    second_customer = User.objects.create(email=\"second_example@example.com\")\n    with freeze_time(\"2012-01-14 11:00:00\"):\n        Order.objects.create(user=second_customer, channel=channel_USD)\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(users) == count\n\n\ndef test_query_customers_with_filter_metadata(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n    channel_USD,\n):\n    second_customer = User.objects.create(email=\"second_example@example.com\")\n    second_customer.store_value_in_metadata({\"metakey\": \"metavalue\"})\n    second_customer.save()\n\n    variables = {\"filter\": {\"metadata\": [{\"key\": \"metakey\", \"value\": \"metavalue\"}]}}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == 1\n    user = users[0]\n    _, user_id = graphene.Node.from_global_id(user[\"node\"][\"id\"])\n    assert second_customer.id == int(user_id)\n\n\ndef test_query_customers_search_without_duplications(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    customer = User.objects.create(email=\"david@example.com\")\n    customer.addresses.create(first_name=\"David\")\n    customer.addresses.create(first_name=\"David\")\n    customer.search_document = prepare_user_search_document_value(customer)\n    customer.save(update_fields=[\"search_document\"])\n\n    variables = {\"filter\": {\"search\": \"David\"}}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == 1\n\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter,\n        variables,\n        permissions=[permission_manage_orders],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == 1\n\n\ndef test_query_customers_with_permission_manage_orders(\n    query_customer_with_filter,\n    customer_user,\n    staff_api_client,\n    permission_manage_orders,\n):\n    variables = {\"filter\": {}}\n\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter,\n        variables,\n        permissions=[permission_manage_orders],\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"totalCount\"]\n    assert users == 1\n\n\nQUERY_CUSTOMERS_WITH_SORT = \"\"\"\n    query ($sort_by: UserSortingInput!) {\n        customers(first:5, sortBy: $sort_by) {\n                edges{\n                    node{\n                        firstName\n                    }\n                }\n            }\n        }\n\"\"\"\n\n\n@pytest.mark.parametrize(\n    \"customer_sort, result_order\",\n    [\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"ASC\"}, [\"Joe\", \"John\", \"Leslie\"]),\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"John\", \"Joe\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"ASC\"}, [\"John\", \"Joe\", \"Leslie\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"Joe\", \"John\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"Joe\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"DESC\"}, [\"Joe\", \"Leslie\", \"John\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"Joe\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"DESC\"}, [\"Joe\", \"Leslie\", \"John\"]),\n        ({\"field\": \"CREATED_AT\", \"direction\": \"ASC\"}, [\"John\", \"Joe\", \"Leslie\"]),\n        ({\"field\": \"CREATED_AT\", \"direction\": \"DESC\"}, [\"Leslie\", \"Joe\", \"John\"]),\n        ({\"field\": \"LAST_MODIFIED_AT\", \"direction\": \"ASC\"}, [\"Leslie\", \"John\", \"Joe\"]),\n        ({\"field\": \"LAST_MODIFIED_AT\", \"direction\": \"DESC\"}, [\"Joe\", \"John\", \"Leslie\"]),\n    ],\n)\ndef test_query_customers_with_sort(\n    customer_sort, result_order, staff_api_client, permission_manage_users, channel_USD\n):\n    users = User.objects.bulk_create(\n        [\n            User(\n                first_name=\"John\",\n                last_name=\"Allen\",\n                email=\"allen@example.com\",\n                is_staff=False,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Joe\",\n                last_name=\"Doe\",\n                email=\"zordon01@example.com\",\n                is_staff=False,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Leslie\",\n                last_name=\"Wade\",\n                email=\"leslie@example.com\",\n                is_staff=False,\n                is_active=True,\n            ),\n        ]\n    )\n\n    users[2].save()\n    users[0].save()\n    users[1].save()\n\n    Order.objects.create(\n        user=User.objects.get(email=\"zordon01@example.com\"), channel=channel_USD\n    )\n\n    variables = {\"sort_by\": customer_sort}\n    staff_api_client.user.user_permissions.add(permission_manage_users)\n    response = staff_api_client.post_graphql(QUERY_CUSTOMERS_WITH_SORT, variables)\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    for order, user_first_name in enumerate(result_order):\n        assert users[order][\"node\"][\"firstName\"] == user_first_name\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"search\": \"mirumee.com\"}, 2),\n        ({\"search\": \"Alice\"}, 1),\n        ({\"search\": \"Kowalski\"}, 1),\n        ({\"search\": \"John\"}, 1),  # first_name\n        ({\"search\": \"Doe\"}, 1),  # last_name\n        ({\"search\": \"wroc\"}, 1),  # city\n        ({\"search\": \"pl\"}, 1),  # country\n        ({\"search\": \"+48713988102\"}, 1),\n        ({\"search\": \"alice Kowalski\"}, 1),\n        ({\"search\": \"kowalski alice\"}, 1),\n        ({\"search\": \"John doe\"}, 1),\n        ({\"search\": \"Alice Doe\"}, 0),\n    ],\n)\ndef test_query_customer_members_with_filter_search(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    address,\n    staff_user,\n):\n    users = User.objects.bulk_create(\n        [\n            User(\n                email=\"second@mirumee.com\",\n                first_name=\"Alice\",\n                last_name=\"Kowalski\",\n                is_active=False,\n            ),\n            User(\n                email=\"third@mirumee.com\",\n                is_active=True,\n            ),\n        ]\n    )\n    users[1].addresses.set([address])\n\n    for user in users:\n        user.search_document = prepare_user_search_document_value(user)\n    User.objects.bulk_update(users, [\"search_document\"])\n\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(users) == count\n\n\ndef test_query_customers_with_filter_by_one_id(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    search_user = customer_users[0]\n\n    variables = {\n        \"filter\": {\n            \"ids\": [graphene.Node.to_global_id(\"User\", search_user.pk)],\n        }\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_user = content[\"data\"][\"customers\"][\"edges\"][0]\n    _, id = graphene.Node.from_global_id(result_user[\"node\"][\"id\"])\n    assert id == str(search_user.pk)\n\n\ndef test_query_customers_with_filter_by_multiple_ids(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    search_users = [customer_users[0], customer_users[1]]\n    search_users_ids = [\n        graphene.Node.to_global_id(\"User\", user.pk) for user in search_users\n    ]\n\n    variables = {\"filter\": {\"ids\": search_users_ids}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_users = content[\"data\"][\"customers\"][\"edges\"]\n    expected_ids = [str(user.pk) for user in customer_users]\n\n    assert len(result_users) == len(search_users)\n    for result_user in result_users:\n        _, id = graphene.Node.from_global_id(result_user[\"node\"][\"id\"])\n        assert id in expected_ids\n\n\ndef test_query_customers_with_filter_by_empty_list(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    variables = {\"filter\": {\"ids\": []}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_users = content[\"data\"][\"customers\"][\"edges\"]\n    expected_ids = [str(user.pk) for user in customer_users]\n\n    assert len(result_users) == len(customer_users)\n    for result_user in result_users:\n        _, id = graphene.Node.from_global_id(result_user[\"node\"][\"id\"])\n        assert id in expected_ids\n\n\ndef test_query_customers_with_filter_by_not_existing_id(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    search_pk = max([user.pk for user in customer_users]) + 1\n    search_id = graphene.Node.to_global_id(\"User\", search_pk)\n    variables = {\"filter\": {\"ids\": [search_id]}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(result_users) == 0\n\n\n@pytest.mark.parametrize(\n    \"staff_member_filter, count\",\n    [({\"status\": \"DEACTIVATED\"}, 1), ({\"status\": \"ACTIVE\"}, 2)],\n)\ndef test_query_staff_members_with_filter_status(\n    staff_member_filter,\n    count,\n    query_staff_users_with_filter,\n    staff_api_client,\n    permission_manage_staff,\n    staff_user,\n):\n    User.objects.bulk_create(\n        [\n            User(email=\"second@example.com\", is_staff=True, is_active=False),\n            User(email=\"third@example.com\", is_staff=True, is_active=True),\n        ]\n    )\n\n    variables = {\"filter\": staff_member_filter}\n    response = staff_api_client.post_graphql(\n        query_staff_users_with_filter, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n\n    assert len(users) == count\n\n\ndef test_query_staff_members_with_filter_by_ids(\n    query_staff_users_with_filter,\n    staff_api_client,\n    permission_manage_staff,\n    staff_user,\n):\n    # given\n    variables = {\n        \"filter\": {\n            \"ids\": [graphene.Node.to_global_id(\"User\", staff_user.pk)],\n        }\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_staff_users_with_filter, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n    assert len(users) == 1\n\n\n@pytest.mark.parametrize(\n    \"staff_member_filter, count\",\n    [\n        ({\"search\": \"mirumee.com\"}, 2),\n        ({\"search\": \"alice\"}, 1),\n        ({\"search\": \"kowalski\"}, 1),\n        ({\"search\": \"John\"}, 1),  # first_name\n        ({\"search\": \"Doe\"}, 1),  # last_name\n        ({\"search\": \"irv\"}, 1),  # city\n        ({\"search\": \"us\"}, 1),  # country\n        ({\"search\": \"Alice Kowalski\"}, 1),\n        ({\"search\": \"Kowalski Alice\"}, 1),\n        ({\"search\": \"john doe\"}, 1),\n        ({\"search\": \"Alice Doe\"}, 0),\n    ],\n)\ndef test_query_staff_members_with_filter_search(\n    staff_member_filter,\n    count,\n    query_staff_users_with_filter,\n    staff_api_client,\n    permission_manage_staff,\n    address_usa,\n    staff_user,\n):\n    users = User.objects.bulk_create(\n        [\n            User(\n                email=\"second@mirumee.com\",\n                first_name=\"Alice\",\n                last_name=\"Kowalski\",\n                is_staff=True,\n                is_active=False,\n            ),\n            User(\n                email=\"third@mirumee.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n            User(\n                email=\"customer@mirumee.com\",\n                first_name=\"Alice\",\n                last_name=\"Kowalski\",\n                is_staff=False,\n                is_active=True,\n            ),\n        ]\n    )\n    users[1].addresses.set([address_usa])\n    for user in users:\n        user.search_document = prepare_user_search_document_value(user)\n    User.objects.bulk_update(users, [\"search_document\"])\n\n    variables = {\"filter\": staff_member_filter}\n    response = staff_api_client.post_graphql(\n        query_staff_users_with_filter, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n\n    assert len(users) == count\n\n\nQUERY_STAFF_USERS_WITH_SORT = \"\"\"\n    query ($sort_by: UserSortingInput!) {\n        staffUsers(first:5, sortBy: $sort_by) {\n                edges{\n                    node{\n                        firstName\n                    }\n                }\n            }\n        }\n\"\"\"\n\n\n@pytest.mark.parametrize(\n    \"customer_sort, result_order\",\n    [\n        # Empty string in result is first_name for staff_api_client.\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"ASC\"}, [\"\", \"Joe\", \"John\", \"Leslie\"]),\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"John\", \"Joe\", \"\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"ASC\"}, [\"\", \"John\", \"Joe\", \"Leslie\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"Joe\", \"John\", \"\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"\", \"Joe\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"DESC\"}, [\"Joe\", \"\", \"Leslie\", \"John\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"\", \"Joe\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"DESC\"}, [\"Joe\", \"\", \"Leslie\", \"John\"]),\n    ],\n)\ndef test_query_staff_members_with_sort(\n    customer_sort, result_order, staff_api_client, permission_manage_staff, channel_USD\n):\n    User.objects.bulk_create(\n        [\n            User(\n                first_name=\"John\",\n                last_name=\"Allen\",\n                email=\"allen@example.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Joe\",\n                last_name=\"Doe\",\n                email=\"zordon01@example.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Leslie\",\n                last_name=\"Wade\",\n                email=\"leslie@example.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n        ]\n    )\n    Order.objects.create(\n        user=User.objects.get(email=\"zordon01@example.com\"), channel=channel_USD\n    )\n    variables = {\"sort_by\": customer_sort}\n    staff_api_client.user.user_permissions.add(permission_manage_staff)\n    response = staff_api_client.post_graphql(QUERY_STAFF_USERS_WITH_SORT, variables)\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n\n    for order, user_first_name in enumerate(result_order):\n        assert users[order][\"node\"][\"firstName\"] == user_first_name\n\n\nUSER_CHANGE_ACTIVE_STATUS_MUTATION = \"\"\"\n    mutation userChangeActiveStatus($ids: [ID!]!, $is_active: Boolean!) {\n        userBulkSetActive(ids: $ids, isActive: $is_active) {\n            count\n            errors {\n                field\n                message\n            }\n        }\n    }\n    \"\"\"\n\n\ndef test_staff_bulk_set_active(\n    staff_api_client, user_list_not_active, permission_manage_users\n):\n    users = user_list_not_active\n    active_status = True\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"count\"] == users.count()\n    users = User.objects.filter(pk__in=[user.pk for user in users])\n    assert all(user.is_active for user in users)\n\n\ndef test_staff_bulk_set_not_active(\n    staff_api_client, user_list, permission_manage_users\n):\n    users = user_list\n    active_status = False\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"count\"] == len(users)\n    users = User.objects.filter(pk__in=[user.pk for user in users])\n    assert not any(user.is_active for user in users)\n\n\ndef test_change_active_status_for_superuser(\n    staff_api_client, superuser, permission_manage_users\n):\n    users = [superuser]\n    superuser_id = graphene.Node.to_global_id(\"User\", superuser.id)\n    active_status = False\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"errors\"][0][\"field\"] == superuser_id\n    assert (\n        data[\"errors\"][0][\"message\"] == \"Cannot activate or deactivate \"\n        \"superuser's account.\"\n    )\n\n\ndef test_change_active_status_for_himself(staff_api_client, permission_manage_users):\n    users = [staff_api_client.user]\n    user_id = graphene.Node.to_global_id(\"User\", staff_api_client.user.id)\n    active_status = False\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"errors\"][0][\"field\"] == user_id\n    assert (\n        data[\"errors\"][0][\"message\"] == \"Cannot activate or deactivate \"\n        \"your own account.\"\n    )\n\n\nADDRESS_QUERY = \"\"\"\nquery address($id: ID!) {\n    address(id: $id) {\n        postalCode\n        lastName\n        firstName\n        city\n        country {\n          code\n        }\n    }\n}\n\"\"\"\n\n\ndef test_address_query_as_owner(user_api_client, customer_user):\n    address = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address.pk)}\n    response = user_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"address\"]\n    assert data[\"country\"][\"code\"] == address.country.code\n\n\ndef test_address_query_as_not_owner(\n    user_api_client, customer_user, address_other_country\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = user_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"address\"]\n    assert not data\n\n\ndef test_address_query_as_app_with_permission(\n    app_api_client,\n    address_other_country,\n    permission_manage_users,\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = app_api_client.post_graphql(\n        ADDRESS_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"address\"]\n    assert data[\"country\"][\"code\"] == address_other_country.country.code\n\n\ndef test_address_query_as_app_without_permission(\n    app_api_client, app, address_other_country\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = app_api_client.post_graphql(ADDRESS_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_address_query_as_anonymous_user(api_client, address_other_country):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = api_client.post_graphql(ADDRESS_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_address_query_invalid_id(\n    staff_api_client,\n    address_other_country,\n):\n    id = \"..afs\"\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content_from_response(response)\n    assert len(content[\"errors\"]) == 1\n    assert content[\"errors\"][0][\"message\"] == f\"Couldn't resolve id: {id}.\"\n    assert content[\"data\"][\"address\"] is None\n\n\ndef test_address_query_with_invalid_object_type(\n    staff_api_client,\n    address_other_country,\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Order\", address_other_country.pk)}\n    response = staff_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"address\"] is None\n\n\nREQUEST_EMAIL_CHANGE_QUERY = \"\"\"\nmutation requestEmailChange(\n    $password: String!, $new_email: String!, $redirect_url: String!, $channel:String\n) {\n    requestEmailChange(\n        password: $password,\n        newEmail: $new_email,\n        redirectUrl: $redirect_url,\n        channel: $channel\n    ) {\n        user {\n            email\n        }\n        errors {\n            code\n            message\n            field\n        }\n  }\n}\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_email_change_with_upper_case_email(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    site_settings,\n    channel_PLN,\n):\n    # given\n    new_email = \"NEW_EMAIL@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"new_email\": new_email,\n        \"redirect_url\": redirect_url,\n        \"password\": \"password\",\n        \"channel\": channel_PLN.slug,\n    }\n    token_payload = {\n        \"old_email\": customer_user.email,\n        \"new_email\": new_email.lower(),\n        \"user_pk\": customer_user.pk,\n    }\n    token = create_token(token_payload, settings.JWT_TTL_REQUEST_EMAIL_CHANGE)\n\n    # when\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"errors\"]\n\n    params = urlencode({\"token\": token})\n    redirect_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"recipient_email\": new_email.lower(),\n        \"token\": token,\n        \"redirect_url\": redirect_url,\n        \"old_email\": customer_user.email,\n        \"new_email\": new_email.lower(),\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_CHANGE_EMAIL_REQUEST,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\ndef test_request_email_change(user_api_client, customer_user, channel_PLN):\n    variables = {\n        \"password\": \"password\",\n        \"new_email\": \"new_email@example.com\",\n        \"redirect_url\": \"http://www.example.com\",\n        \"channel\": channel_PLN.slug,\n    }\n\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert data[\"user\"][\"email\"] == customer_user.email\n\n\ndef test_request_email_change_to_existing_email(\n    user_api_client, customer_user, staff_user\n):\n    variables = {\n        \"password\": \"password\",\n        \"new_email\": staff_user.email,\n        \"redirect_url\": \"http://www.example.com\",\n    }\n\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"] == [\n        {\n            \"code\": \"UNIQUE\",\n            \"message\": \"Email is used by other user.\",\n            \"field\": \"newEmail\",\n        }\n    ]\n\n\ndef test_request_email_change_with_invalid_redirect_url(\n    user_api_client, customer_user, staff_user\n):\n    variables = {\n        \"password\": \"password\",\n        \"new_email\": \"new_email@example.com\",\n        \"redirect_url\": \"www.example.com\",\n    }\n\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"] == [\n        {\n            \"code\": \"INVALID\",\n            \"message\": \"Invalid URL. Please check if URL is in RFC 1808 format.\",\n            \"field\": \"redirectUrl\",\n        }\n    ]\n\n\ndef test_request_email_change_with_invalid_password(user_api_client, customer_user):\n    variables = {\n        \"password\": \"spanishinquisition\",\n        \"new_email\": \"new_email@example.com\",\n        \"redirect_url\": \"http://www.example.com\",\n    }\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.INVALID_CREDENTIALS.name\n    assert data[\"errors\"][0][\"field\"] == \"password\"\n\n\nEMAIL_UPDATE_QUERY = \"\"\"\nmutation emailUpdate($token: String!, $channel: String) {\n    confirmEmailChange(token: $token, channel: $channel){\n        user {\n            email\n        }\n        errors {\n            code\n            message\n            field\n        }\n  }\n}\n\"\"\"\n\n\n@patch(\"saleor.graphql.account.mutations.account.match_orders_with_new_user\")\n@patch(\"saleor.graphql.account.mutations.account.assign_user_gift_cards\")\ndef test_email_update(\n    assign_gift_cards_mock,\n    assign_orders_mock,\n    user_api_client,\n    customer_user,\n    channel_PLN,\n):\n    new_email = \"new_email@example.com\"\n    payload = {\n        \"old_email\": customer_user.email,\n        \"new_email\": new_email,\n        \"user_pk\": customer_user.pk,\n    }\n    user = user_api_client.user\n\n    token = create_token(payload, timedelta(hours=1))\n    variables = {\"token\": token, \"channel\": channel_PLN.slug}\n\n    response = user_api_client.post_graphql(EMAIL_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"confirmEmailChange\"]\n    assert data[\"user\"][\"email\"] == new_email\n    user.refresh_from_db()\n    assert new_email in user.search_document\n    assign_gift_cards_mock.assert_called_once_with(customer_user)\n    assign_orders_mock.assert_called_once_with(customer_user)\n\n\ndef test_email_update_to_existing_email(user_api_client, customer_user, staff_user):\n    payload = {\n        \"old_email\": customer_user.email,\n        \"new_email\": staff_user.email,\n        \"user_pk\": customer_user.pk,\n    }\n    token = create_token(payload, timedelta(hours=1))\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(EMAIL_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"confirmEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"] == [\n        {\n            \"code\": \"UNIQUE\",\n            \"message\": \"Email is used by other user.\",\n            \"field\": \"newEmail\",\n        }\n    ]\n\n\nUSER_FEDERATION_QUERY = \"\"\"\n  query GetUserInFederation($representations: [_Any]) {\n    _entities(representations: $representations) {\n      __typename\n      ... on User {\n        id\n        email\n      }\n    }\n  }\n\"\"\"\n\n\ndef test_staff_query_user_by_id_for_federation(\n    staff_api_client, customer_user, permission_manage_users\n):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_staff_query_user_by_email_for_federation(\n    staff_api_client, customer_user, permission_manage_users\n):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_staff_query_user_by_id_without_permission_for_federation(\n    staff_api_client, customer_user\n):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(USER_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_staff_query_user_by_email_without_permission_for_federation(\n    staff_api_client, customer_user\n):\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(USER_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_customer_query_self_by_id_for_federation(user_api_client, customer_user):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_customer_query_self_by_email_for_federation(user_api_client, customer_user):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_customer_query_user_by_id_for_federation(\n    user_api_client, customer_user, staff_user\n):\n    staff_user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": staff_user_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_customer_query_user_by_email_for_federation(\n    user_api_client, customer_user, staff_user\n):\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": staff_user.email,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_user_by_id_for_federation(api_client, customer_user):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_user_by_email_for_federation(api_client, customer_user):\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\nADDRESS_FEDERATION_QUERY = \"\"\"\n  query GetUserInFederation($representations: [_Any]) {\n    _entities(representations: $representations) {\n      __typename\n      ... on Address {\n        id\n        city\n      }\n    }\n  }\n\"\"\"\n\n\ndef test_customer_query_address_federation(user_api_client, customer_user, address):\n    customer_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Address\",\n            \"id\": address_id,\n            \"city\": address.city,\n        }\n    ]\n\n\ndef test_customer_query_other_user_address_federation(\n    user_api_client, staff_user, customer_user, address\n):\n    staff_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_staff_query_other_user_address_federation(\n    staff_api_client, customer_user, address\n):\n    customer_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_staff_query_other_user_address_with_permission_federation(\n    staff_api_client, customer_user, address, permission_manage_users\n):\n    customer_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        ADDRESS_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_app_query_address_federation(app_api_client, address, permission_manage_users):\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(\n        ADDRESS_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Address\",\n            \"id\": address_id,\n            \"city\": address.city,\n        }\n    ]\n\n\ndef test_app_no_permission_query_address_federation(app_api_client, address):\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_address_federation(api_client, address):\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\nGROUP_FEDERATION_QUERY = \"\"\"\n  query GetGroupInFederation($representations: [_Any]) {\n    _entities(representations: $representations) {\n      __typename\n      ... on Group {\n        id\n        name\n      }\n    }\n  }\n\"\"\"\n\n\ndef test_staff_query_group_federation(staff_api_client, permission_manage_staff):\n    group = Group.objects.create(name=\"empty group\")\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        GROUP_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_staff],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Group\",\n            \"id\": group_id,\n            \"name\": group.name,\n        }\n    ]\n\n\ndef test_app_query_group_federation(app_api_client, permission_manage_staff):\n    group = Group.objects.create(name=\"empty group\")\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(\n        GROUP_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_staff],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Group\",\n            \"id\": group_id,\n            \"name\": group.name,\n        }\n    ]\n\n\ndef test_app_no_permission_query_group_federation(app_api_client):\n    group = Group.objects.create(name=\"empty group\")\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(GROUP_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_client_query_group_federation(user_api_client):\n    group = Group.objects.create(name=\"empty group\")\n\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(GROUP_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_group_federation(api_client):\n    group = Group.objects.create(name=\"empty group\")\n\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(GROUP_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n", "import os.path\nimport secrets\nfrom enum import Enum\nfrom itertools import chain\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    overload,\n)\nfrom uuid import UUID\n\nimport graphene\nfrom django.core.exceptions import (\n    NON_FIELD_ERRORS,\n    ImproperlyConfigured,\n    ValidationError,\n)\nfrom django.core.files.storage import default_storage\nfrom django.core.files.uploadedfile import UploadedFile\nfrom django.db.models import Model, Q, QuerySet\nfrom django.db.models.fields.files import FileField\nfrom graphene import ObjectType\nfrom graphene.types.mutation import MutationOptions\nfrom graphql.error import GraphQLError\n\nfrom ...core.error_codes import MetadataErrorCode\nfrom ...core.exceptions import PermissionDenied\nfrom ...core.utils.events import call_event\nfrom ...permission.auth_filters import AuthorizationFilters\nfrom ...permission.enums import BasePermissionEnum\nfrom ...permission.utils import (\n    message_one_of_permissions_required,\n    one_of_permissions_or_auth_filter_required,\n)\nfrom ..core import ResolveInfo\nfrom ..core.utils import ext_ref_to_global_id_or_error\nfrom ..core.validators import validate_one_of_args_is_in_mutation\nfrom ..meta.permissions import PRIVATE_META_PERMISSION_MAP, PUBLIC_META_PERMISSION_MAP\nfrom ..payment.utils import metadata_contains_empty_key\nfrom ..plugins.dataloaders import get_plugin_manager_promise\nfrom ..utils import get_nodes, resolve_global_ids_to_primary_keys\nfrom .context import disallow_replica_in_context, setup_context_user\nfrom .descriptions import DEPRECATED_IN_3X_FIELD\nfrom .types import (\n    TYPES_WITH_DOUBLE_ID_AVAILABLE,\n    File,\n    ModelObjectType,\n    NonNullList,\n    Upload,\n    UploadError,\n)\nfrom .utils import from_global_id_or_error, snake_to_camel_case\nfrom .utils.error_codes import get_error_code_from_error\n\n\ndef get_model_name(model):\n    \"\"\"Return name of the model with first letter lowercase.\"\"\"\n    model_name = model.__name__\n    return model_name[:1].lower() + model_name[1:]\n\n\ndef get_error_fields(error_type_class, error_type_field, deprecation_reason=None):\n    error_field = graphene.Field(\n        NonNullList(\n            error_type_class,\n            description=\"List of errors that occurred executing the mutation.\",\n        ),\n        default_value=[],\n        required=True,\n    )\n    if deprecation_reason is not None:\n        error_field.deprecation_reason = deprecation_reason\n    return {error_type_field: error_field}\n\n\ndef validation_error_to_error_type(\n    validation_error: ValidationError, error_type_class\n) -> list:\n    \"\"\"Convert a ValidationError into a list of Error types.\"\"\"\n    err_list = []\n    error_class_fields = set(error_type_class._meta.fields.keys())\n    if hasattr(validation_error, \"error_dict\"):\n        # convert field errors\n        for field_label, field_errors in validation_error.error_dict.items():\n            field = (\n                None\n                if field_label == NON_FIELD_ERRORS\n                else snake_to_camel_case(field_label)\n            )\n            for err in field_errors:\n                error = error_type_class(\n                    field=field,\n                    message=err.messages[0],\n                    code=get_error_code_from_error(err),\n                )\n                attach_error_params(error, err.params, error_class_fields)\n                err_list.append(error)\n    else:\n        # convert non-field errors\n        for err in validation_error.error_list:\n            error = error_type_class(\n                message=err.messages[0],\n                code=get_error_code_from_error(err),\n            )\n            attach_error_params(error, err.params, error_class_fields)\n            err_list.append(error)\n    return err_list\n\n\ndef attach_error_params(error, params: Optional[dict], error_class_fields: set):\n    if not params:\n        return {}\n    # If some of the params key overlap with error class fields\n    # attach param value to the error\n    error_fields_in_params = set(params.keys()) & error_class_fields\n    for error_field in error_fields_in_params:\n        setattr(error, error_field, params[error_field])\n\n\nclass ModelMutationOptions(MutationOptions):\n    exclude = None\n    model = None\n    object_type = None\n    return_field_name = None\n\n\nMT = TypeVar(\"MT\", bound=Model)\n\n\nclass BaseMutation(graphene.Mutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def _validate_permissions(cls, permissions):\n        if not permissions:\n            return\n        if not isinstance(permissions, tuple):\n            raise ImproperlyConfigured(\n                f\"Permissions should be a tuple in Meta class: {permissions}\"\n            )\n        for p in permissions:\n            if not isinstance(p, Enum):\n                raise ImproperlyConfigured(f\"Permission should be an enum: {p}.\")\n\n    @classmethod\n    def __init_subclass_with_meta__(\n        cls,\n        auto_permission_message=True,\n        description=None,\n        permissions: Optional[Collection[BasePermissionEnum]] = None,\n        _meta=None,\n        error_type_class=None,\n        error_type_field=None,\n        errors_mapping=None,\n        support_meta_field=False,\n        support_private_meta_field=False,\n        **options,\n    ):\n        if not _meta:\n            _meta = MutationOptions(cls)\n\n        if not description:\n            raise ImproperlyConfigured(\"No description provided in Meta\")\n\n        if not error_type_class:\n            raise ImproperlyConfigured(\"No error_type_class provided in Meta.\")\n\n        cls._validate_permissions(permissions)\n\n        _meta.auto_permission_message = auto_permission_message\n        _meta.permissions = permissions\n        _meta.error_type_class = error_type_class\n        _meta.error_type_field = error_type_field\n        _meta.errors_mapping = errors_mapping\n        _meta.support_meta_field = support_meta_field\n        _meta.support_private_meta_field = support_private_meta_field\n\n        if permissions and auto_permission_message:\n            permissions_msg = message_one_of_permissions_required(permissions)\n            description = f\"{description} {permissions_msg}\"\n\n        super().__init_subclass_with_meta__(\n            description=description, _meta=_meta, **options\n        )\n\n        if error_type_field:\n            deprecated_msg = f\"{DEPRECATED_IN_3X_FIELD} Use `errors` field instead.\"\n            cls._meta.fields.update(\n                get_error_fields(\n                    error_type_class,\n                    error_type_field,\n                    deprecated_msg,\n                )\n            )\n        cls._meta.fields.update(get_error_fields(error_type_class, \"errors\"))\n\n    @classmethod\n    def _update_mutation_arguments_and_fields(cls, arguments, fields):\n        cls._meta.arguments.update(arguments)\n        cls._meta.fields.update(fields)\n\n    @classmethod\n    def _get_node_by_pk(\n        cls,\n        info: ResolveInfo,\n        graphene_type: Type[ModelObjectType[MT]],\n        pk: Union[int, str],\n        qs=None,\n    ) -> Optional[MT]:\n        \"\"\"Attempt to resolve a node from the given internal ID.\n\n        Whether by using the provided query set object or by calling type's get_node().\n        \"\"\"\n        if qs is not None:\n            lookup = Q(pk=pk)\n            if pk is not None and str(graphene_type) in TYPES_WITH_DOUBLE_ID_AVAILABLE:\n                # This is temporary solution that allows fetching objects with use of\n                # new and old id.\n                try:\n                    UUID(str(pk))\n                except ValueError:\n                    lookup = (\n                        Q(number=pk) & Q(use_old_id=True)\n                        if str(graphene_type) == \"Order\"\n                        else Q(old_id=pk) & Q(old_id__isnull=False)\n                    )\n            return qs.filter(lookup).first()\n        get_node = getattr(graphene_type, \"get_node\", None)\n        if get_node:\n            return get_node(info, pk)\n        return None\n\n    @classmethod\n    def get_global_id_or_error(\n        cls,\n        id: str,\n        only_type: Union[ObjectType, str, None] = None,\n        field: str = \"id\",\n    ):\n        try:\n            _object_type, pk = from_global_id_or_error(id, only_type, raise_error=True)\n        except GraphQLError as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        return pk\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: str,\n        *,\n        field: str = \"id\",\n        only_type: Type[ModelObjectType[MT]],\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> MT:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: Optional[str],\n        *,\n        field: str = \"id\",\n        only_type: Type[ModelObjectType[MT]],\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> Optional[MT]:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: str,\n        *,\n        field: str = \"id\",\n        only_type: None,\n        qs: QuerySet[MT],\n        code: str = \"not_found\",\n    ) -> MT:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: str,\n        *,\n        field: str = \"id\",\n        only_type: None = None,\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> Model:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: Optional[str],\n        *,\n        field: str = \"id\",\n        only_type: Any = None,\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> Optional[Model]:\n        ...\n\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: Optional[str],\n        *,\n        field: str = \"id\",\n        only_type: Optional[Type[ObjectType]] = None,\n        qs: Optional[QuerySet] = None,\n        code: str = \"not_found\",\n    ) -> Optional[Model]:\n        if not node_id:\n            # FIXME: this is weird behavior and we should drop it\n            # the function now has three possible outcomes:\n            # * Null\n            # * the object you asked for\n            # * ValidationError\n            return None\n\n        try:\n            object_type, pk = from_global_id_or_error(\n                node_id, only_type, raise_error=True\n            )\n\n            if isinstance(object_type, str):\n                object_type = info.schema.get_type(object_type).graphene_type\n\n            node = cls._get_node_by_pk(info, graphene_type=object_type, pk=pk, qs=qs)\n        except (AssertionError, GraphQLError) as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        else:\n            if node is None:\n                raise ValidationError(\n                    {\n                        field: ValidationError(\n                            f\"Couldn't resolve to a node: {node_id}\", code=code\n                        )\n                    }\n                )\n        return node\n\n    @classmethod\n    def get_global_ids_or_error(\n        cls,\n        ids: Iterable[str],\n        only_type: Union[ObjectType, str, None] = None,\n        field: str = \"ids\",\n    ):\n        try:\n            _nodes_type, pks = resolve_global_ids_to_primary_keys(\n                ids, only_type, raise_error=True\n            )\n        except GraphQLError as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        return pks\n\n    @overload\n    @classmethod\n    def get_nodes_or_error(\n        cls, ids, field, only_type: Type[ModelObjectType[MT]], qs=None, schema=None\n    ) -> List[MT]:\n        ...\n\n    @overload\n    @classmethod\n    def get_nodes_or_error(\n        cls, ids, field, only_type: Optional[ObjectType] = None, qs=None, schema=None\n    ) -> List[Model]:\n        ...\n\n    @classmethod\n    def get_nodes_or_error(cls, ids, field, only_type=None, qs=None, schema=None):\n        try:\n            instances = get_nodes(ids, only_type, qs=qs, schema=schema)\n        except GraphQLError as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        return instances\n\n    @staticmethod\n    def remap_error_fields(validation_error, field_map) -> None:\n        \"\"\"Rename validation_error fields according to provided field_map.\n\n        Skips renaming fields from field_map that are not on validation_error.\n        \"\"\"\n        for old_field, new_field in field_map.items():\n            try:\n                validation_error.error_dict[\n                    new_field\n                ] = validation_error.error_dict.pop(old_field)\n            except KeyError:\n                pass\n\n    @classmethod\n    def clean_instance(cls, info: ResolveInfo, instance, /) -> None:\n        \"\"\"Clean the instance that was created using the input data.\n\n        Once an instance is created, this method runs `full_clean()` to perform\n        model validation.\n        \"\"\"\n        try:\n            instance.full_clean()\n        except ValidationError as error:\n            if hasattr(cls._meta, \"exclude\"):\n                # Ignore validation errors for fields that are specified as\n                # excluded.\n                new_error_dict = {}\n                for field, errors in error.error_dict.items():\n                    if field not in cls._meta.exclude:\n                        new_error_dict[field] = errors\n                error.error_dict = new_error_dict\n\n            if cls._meta.errors_mapping:\n                cls.remap_error_fields(error, cls._meta.errors_mapping)\n\n            if error.error_dict:\n                raise error\n\n    @classmethod\n    def construct_instance(cls, instance, cleaned_data):\n        \"\"\"Fill instance fields with cleaned data.\n\n        The `instance` argument is either an empty instance of a already\n        existing one which was fetched from the database. `cleaned_data` is\n        data to be set in instance fields. Returns `instance` with filled\n        fields, but not saved to the database.\n        \"\"\"\n        from django.db import models\n\n        opts = instance._meta\n\n        for f in opts.fields:\n            if any(\n                [\n                    not f.editable,\n                    isinstance(f, models.AutoField),\n                    f.name not in cleaned_data,\n                ]\n            ):\n                continue\n            data = cleaned_data[f.name]\n            if data is None:\n                # We want to reset the file field value when None was passed\n                # in the input, but `FileField.save_form_data` ignores None\n                # values. In that case we manually pass False which clears\n                # the file.\n                if isinstance(f, FileField):\n                    data = False\n                if not f.null:\n                    data = f._get_default()\n            f.save_form_data(instance, data)\n        return instance\n\n    @classmethod\n    def check_permissions(cls, context, permissions=None, **data):\n        \"\"\"Determine whether user or app has rights to perform this mutation.\n\n        Default implementation assumes that account is allowed to perform any\n        mutation. By overriding this method or defining required permissions\n        in the meta-class, you can restrict access to it.\n\n        The `context` parameter is the Context instance associated with the request.\n        \"\"\"\n        all_permissions = permissions or cls._meta.permissions\n        if not all_permissions:\n            return True\n\n        return one_of_permissions_or_auth_filter_required(context, all_permissions)\n\n    @classmethod\n    def mutate(cls, root, info: ResolveInfo, **data):\n        disallow_replica_in_context(info.context)\n        setup_context_user(info.context)\n\n        if not cls.check_permissions(info.context, data=data):\n            raise PermissionDenied(permissions=cls._meta.permissions)\n        manager = get_plugin_manager_promise(info.context).get()\n        result = manager.perform_mutation(\n            mutation_cls=cls, root=root, info=info, data=data\n        )\n        if result is not None:\n            return result\n\n        try:\n            response = cls.perform_mutation(root, info, **data)\n            if response.errors is None:\n                response.errors = []\n            return response\n        except ValidationError as e:\n            return cls.handle_errors(e)\n\n    @classmethod\n    def perform_mutation(cls, _root, _info: ResolveInfo, /):\n        raise NotImplementedError()\n\n    @classmethod\n    def handle_errors(cls, error: ValidationError, **extra):\n        error_list = validation_error_to_error_type(error, cls._meta.error_type_class)\n        return cls.handle_typed_errors(error_list, **extra)\n\n    @classmethod\n    def handle_typed_errors(cls, errors: list, **extra):\n        \"\"\"Return class instance with errors.\"\"\"\n        if cls._meta.error_type_field is not None:\n            extra.update({cls._meta.error_type_field: errors})\n        return cls(errors=errors, **extra)\n\n    @staticmethod\n    def call_event(func_obj, *func_args):\n        return call_event(func_obj, *func_args)\n\n    @classmethod\n    def update_metadata(cls, instance, meta_data_list: List, is_private: bool = False):\n        if is_private:\n            instance.store_value_in_private_metadata(\n                {data.key: data.value for data in meta_data_list}\n            )\n        else:\n            instance.store_value_in_metadata(\n                {data.key: data.value for data in meta_data_list}\n            )\n\n    @classmethod\n    def validate_metadata_keys(cls, metadata_list: List[dict]):\n        if metadata_contains_empty_key(metadata_list):\n            raise ValidationError(\n                {\n                    \"input\": ValidationError(\n                        \"Metadata key cannot be empty.\",\n                        code=MetadataErrorCode.REQUIRED.value,\n                    )\n                }\n            )\n\n    @classmethod\n    def validate_and_update_metadata(\n        cls, instance, metadata_list, private_metadata_list\n    ):\n        if cls._meta.support_meta_field and metadata_list is not None:\n            cls.validate_metadata_keys(metadata_list)\n            cls.update_metadata(instance, metadata_list)\n        if cls._meta.support_private_meta_field and private_metadata_list is not None:\n            cls.validate_metadata_keys(private_metadata_list)\n            cls.update_metadata(instance, private_metadata_list, is_private=True)\n\n    @classmethod\n    def check_metadata_permissions(cls, info: ResolveInfo, object_id, private=False):\n        type_name, db_id = graphene.Node.from_global_id(object_id)\n\n        if private:\n            meta_permission = PRIVATE_META_PERMISSION_MAP.get(type_name)\n        else:\n            meta_permission = PUBLIC_META_PERMISSION_MAP.get(type_name)\n\n        if not meta_permission:\n            raise NotImplementedError(\n                f\"Couldn't resolve permission to item type: {type_name}. \"\n            )\n\n\ndef is_list_of_ids(field) -> bool:\n    if isinstance(field.type, graphene.List):\n        of_type = field.type.of_type\n        if isinstance(of_type, graphene.NonNull):\n            of_type = of_type.of_type\n        return of_type == graphene.ID\n    return False\n\n\ndef is_id_field(field) -> bool:\n    return (\n        field.type == graphene.ID\n        or isinstance(field.type, graphene.NonNull)\n        and field.type.of_type == graphene.ID\n    )\n\n\ndef is_upload_field(field) -> bool:\n    if hasattr(field.type, \"of_type\"):\n        return field.type.of_type == Upload\n    return field.type == Upload\n\n\nclass ModelMutation(BaseMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def __init_subclass_with_meta__(\n        cls,\n        arguments=None,\n        model=None,\n        exclude=None,\n        return_field_name=None,\n        object_type=None,\n        _meta=None,\n        **options,\n    ):\n        if not model:\n            raise ImproperlyConfigured(\"model is required for ModelMutation\")\n        if not _meta:\n            _meta = ModelMutationOptions(cls)\n\n        if exclude is None:\n            exclude = []\n\n        if not return_field_name:\n            return_field_name = get_model_name(model)\n        if arguments is None:\n            arguments = {}\n\n        _meta.model = model\n        _meta.object_type = object_type\n        _meta.return_field_name = return_field_name\n        _meta.exclude = exclude\n        super().__init_subclass_with_meta__(_meta=_meta, **options)\n\n        model_type = cls.get_type_for_model()\n        if not model_type:\n            raise ImproperlyConfigured(\n                f\"GraphQL type for model {cls._meta.model.__name__} could not be \"\n                f\"resolved for {cls.__name__}\"\n            )\n        fields = {return_field_name: graphene.Field(model_type)}\n\n        cls._update_mutation_arguments_and_fields(arguments=arguments, fields=fields)\n\n    @classmethod\n    def clean_input(cls, info: ResolveInfo, instance, data, *, input_cls=None):\n        \"\"\"Clean input data received from mutation arguments.\n\n        Fields containing IDs or lists of IDs are automatically resolved into\n        model instances. `instance` argument is the model instance the mutation\n        is operating on (before setting the input data). `input` is raw input\n        data the mutation receives.\n\n        Override this method to provide custom transformations of incoming\n        data.\n        \"\"\"\n\n        if not input_cls:\n            input_cls = getattr(cls.Arguments, \"input\")\n        cleaned_input = {}\n\n        for field_name, field_item in input_cls._meta.fields.items():\n            if field_name in data:\n                value = data[field_name]\n\n                # handle list of IDs field\n                if value is not None and is_list_of_ids(field_item):\n                    instances = (\n                        cls.get_nodes_or_error(value, field_name, schema=info.schema)\n                        if value\n                        else []\n                    )\n                    cleaned_input[field_name] = instances\n\n                # handle ID field\n                elif value is not None and is_id_field(field_item):\n                    instance = cls.get_node_or_error(info, value, field=field_name)\n                    cleaned_input[field_name] = instance\n\n                # handle uploaded files\n                elif value is not None and is_upload_field(field_item):\n                    value = info.context.FILES.get(value)\n                    cleaned_input[field_name] = value\n\n                # handle other fields\n                else:\n                    cleaned_input[field_name] = value\n        return cleaned_input\n\n    @classmethod\n    def _save_m2m(cls, _info: ResolveInfo, instance, cleaned_data):\n        opts = instance._meta\n        for f in chain(opts.many_to_many, opts.private_fields):\n            if not hasattr(f, \"save_form_data\"):\n                continue\n            if f.name in cleaned_data and cleaned_data[f.name] is not None:\n                f.save_form_data(instance, cleaned_data[f.name])\n\n    @classmethod\n    def success_response(cls, instance):\n        \"\"\"Return a success response.\"\"\"\n        return cls(**{cls._meta.return_field_name: instance, \"errors\": []})\n\n    @classmethod\n    def save(cls, _info: ResolveInfo, instance, _cleaned_input, /):\n        instance.save()\n\n    @classmethod\n    def get_type_for_model(cls):\n        if not cls._meta.object_type:\n            raise ImproperlyConfigured(\n                f\"Either GraphQL type for model {cls._meta.model.__name__} needs to be \"\n                f\"specified on object_type option or {cls.__name__} needs to define \"\n                \"custom get_type_for_model() method.\"\n            )\n\n        return cls._meta.object_type\n\n    @classmethod\n    def get_instance(cls, info: ResolveInfo, **data):\n        \"\"\"Retrieve an instance from the supplied global id.\n\n        The expected graphene type can be lazy (str).\n        \"\"\"\n        object_id = data.get(\"id\")\n        qs = data.get(\"qs\")\n        if object_id:\n            model_type = cls.get_type_for_model()\n            instance = cls.get_node_or_error(\n                info, object_id, only_type=model_type, qs=qs\n            )\n        else:\n            instance = cls._meta.model()\n        return instance\n\n    @classmethod\n    def post_save_action(cls, info: ResolveInfo, instance, cleaned_input):\n        \"\"\"Perform an action after saving an object and its m2m.\"\"\"\n        pass\n\n    @classmethod\n    def perform_mutation(cls, _root, info: ResolveInfo, /, **data):\n        \"\"\"Perform model mutation.\n\n        Depending on the input data, `mutate` either creates a new instance or\n        updates an existing one. If `id` argument is present, it is assumed\n        that this is an \"update\" mutation. Otherwise, a new instance is\n        created based on the model associated with this mutation.\n        \"\"\"\n        instance = cls.get_instance(info, **data)\n        data = data.get(\"input\")\n        cleaned_input = cls.clean_input(info, instance, data)\n        metadata_list = cleaned_input.pop(\"metadata\", None)\n        private_metadata_list = cleaned_input.pop(\"private_metadata\", None)\n        instance = cls.construct_instance(instance, cleaned_input)\n\n        cls.validate_and_update_metadata(instance, metadata_list, private_metadata_list)\n        cls.clean_instance(info, instance)\n        cls.save(info, instance, cleaned_input)\n        cls._save_m2m(info, instance, cleaned_input)\n        cls.post_save_action(info, instance, cleaned_input)\n        return cls.success_response(instance)\n\n\nclass ModelWithExtRefMutation(ModelMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def get_object_id(cls, **data):\n        \"\"\"Resolve object id by given id or external reference.\"\"\"\n        object_id, ext_ref = data.get(\"id\"), data.get(\"external_reference\")\n        validate_one_of_args_is_in_mutation(\n            \"id\", object_id, \"external_reference\", ext_ref\n        )\n\n        if ext_ref and not object_id:\n            object_id = ext_ref_to_global_id_or_error(cls._meta.model, ext_ref)\n\n        return object_id\n\n    @classmethod\n    def get_instance(cls, info, **data):\n        \"\"\"Retrieve an instance from the supplied global id.\n\n        The expected graphene type can be lazy (str).\n        \"\"\"\n        object_id = cls.get_object_id(**data)\n        qs = data.get(\"qs\")\n        if object_id:\n            model_type = cls.get_type_for_model()\n            return cls.get_node_or_error(info, object_id, only_type=model_type, qs=qs)\n\n\nclass ModelDeleteMutation(ModelMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def clean_instance(cls, _info: ResolveInfo, _instance, /):\n        \"\"\"Perform additional logic before deleting the model instance.\n\n        Override this method to raise custom validation error and abort\n        the deletion process.\n        \"\"\"\n\n    @classmethod\n    def perform_mutation(  # type: ignore[override]\n        cls, _root, info: ResolveInfo, /, *, external_reference=None, id=None\n    ):\n        \"\"\"Perform a mutation that deletes a model instance.\"\"\"\n        instance = cls.get_instance(info, external_reference=external_reference, id=id)\n\n        cls.clean_instance(info, instance)\n        db_id = instance.id\n        instance.delete()\n\n        # After the instance is deleted, set its ID to the original database's\n        # ID so that the success response contains ID of the deleted object.\n        instance.id = db_id\n        cls.post_save_action(info, instance, None)\n        return cls.success_response(instance)\n\n\nclass BaseBulkMutation(BaseMutation):\n    count = graphene.Int(\n        required=True, description=\"Returns how many objects were affected.\"\n    )\n\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def __init_subclass_with_meta__(\n        cls, model=None, object_type=None, _meta=None, **kwargs\n    ):\n        if not model:\n            raise ImproperlyConfigured(\"model is required for bulk mutation\")\n        if not _meta:\n            _meta = ModelMutationOptions(cls)\n        _meta.model = model\n        _meta.object_type = object_type\n\n        super().__init_subclass_with_meta__(_meta=_meta, **kwargs)\n\n    @classmethod\n    def get_type_for_model(cls):\n        if not cls._meta.object_type:\n            raise ImproperlyConfigured(\n                f\"Either GraphQL type for model {cls._meta.model.__name__} needs to be \"\n                f\"specified on object_type option or {cls.__name__} needs to define \"\n                \"custom get_type_for_model() method.\"\n            )\n\n        return cls._meta.object_type\n\n    @classmethod\n    def clean_instance(cls, _info: ResolveInfo, _instance, /):\n        \"\"\"Perform additional logic.\n\n        Override this method to raise custom validation error and prevent\n        bulk action on the instance.\n        \"\"\"\n\n    @classmethod\n    def bulk_action(cls, _info: ResolveInfo, _queryset: QuerySet, /):\n        \"\"\"Implement action performed on queryset.\"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def perform_mutation(  # type: ignore[override]\n        cls, _root, info: ResolveInfo, /, *, ids, **data\n    ) -> Tuple[int, Optional[ValidationError]]:\n        \"\"\"Perform a mutation that deletes a list of model instances.\"\"\"\n        clean_instance_ids = []\n        errors_dict: Dict[str, List[ValidationError]] = {}\n        # Allow to pass empty list for dummy mutation\n        if not ids:\n            return 0, None\n        instance_model = cls._meta.model\n        model_type = cls.get_type_for_model()\n        if not model_type:\n            raise ImproperlyConfigured(\n                f\"GraphQL type for model {cls._meta.model.__name__} could not be \"\n                f\"resolved for {cls.__name__}\"\n            )\n\n        try:\n            instances = cls.get_nodes_or_error(\n                ids, \"id\", model_type, schema=info.schema\n            )\n        except ValidationError as error:\n            return 0, error\n        for instance, node_id in zip(instances, ids):\n            instance_errors = []\n\n            # catch individual validation errors to raise them later as\n            # a single error\n            try:\n                cls.clean_instance(info, instance)\n            except ValidationError as e:\n                msg = \". \".join(e.messages)\n                instance_errors.append(msg)\n\n            if not instance_errors:\n                clean_instance_ids.append(instance.pk)\n            else:\n                instance_errors_msg = \". \".join(instance_errors)\n                ValidationError({node_id: instance_errors_msg}).update_error_dict(\n                    errors_dict\n                )\n\n        if errors_dict:\n            errors = ValidationError(errors_dict)\n        else:\n            errors = None\n        count = len(clean_instance_ids)\n        if count:\n            qs = instance_model.objects.filter(pk__in=clean_instance_ids)\n            cls.bulk_action(info, qs, **data)\n        return count, errors\n\n    @classmethod\n    def mutate(cls, root, info: ResolveInfo, **data):\n        disallow_replica_in_context(info.context)\n        setup_context_user(info.context)\n\n        if not cls.check_permissions(info.context):\n            raise PermissionDenied(permissions=cls._meta.permissions)\n        manager = get_plugin_manager_promise(info.context).get()\n        result = manager.perform_mutation(\n            mutation_cls=cls, root=root, info=info, data=data\n        )\n        if result is not None:\n            return result\n\n        count, errors = cls.perform_mutation(root, info, **data)\n        if errors:\n            return cls.handle_errors(errors, count=count)\n\n        return cls(errors=[], count=count)\n\n\nclass ModelBulkDeleteMutation(BaseBulkMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def bulk_action(cls, _info: ResolveInfo, queryset, /):\n        queryset.delete()\n\n\nclass FileUpload(BaseMutation):\n    uploaded_file = graphene.Field(File)\n\n    class Arguments:\n        file = Upload(\n            required=True, description=\"Represents a file in a multipart request.\"\n        )\n\n    class Meta:\n        description = (\n            \"Upload a file. This mutation must be sent as a `multipart` \"\n            \"request. More detailed specs of the upload format can be found here: \"\n            \"https://github.com/jaydenseric/graphql-multipart-request-spec\"\n        )\n        error_type_class = UploadError\n        error_type_field = \"upload_errors\"\n        permissions = (\n            AuthorizationFilters.AUTHENTICATED_APP,\n            AuthorizationFilters.AUTHENTICATED_STAFF_USER,\n        )\n\n    @classmethod\n    def perform_mutation(  # type: ignore[override]\n        cls, _root, info: ResolveInfo, /, file\n    ):\n        file_data: UploadedFile = cast(UploadedFile, info.context.FILES[file])\n\n        # add unique text fragment to the file name to prevent file overriding\n        file_name, format = os.path.splitext(file_data.name or \"\")\n\n        # replace spaced with an underscore to prevent replacing the spaces with encoded\n        # values by storage\n        file_name = file_name.replace(\" \", \"_\")\n\n        hash = secrets.token_hex(nbytes=4)\n        new_name = f\"file_upload/{file_name}_{hash}{format}\"\n\n        path = default_storage.save(new_name, file_data.file)\n\n        return FileUpload(\n            uploaded_file=File(url=path, content_type=file_data.content_type)\n        )\n", "from unittest import mock\n\nimport graphene\nimport pytest\nfrom django.test import override_settings\nfrom graphql.execution.base import ExecutionResult\n\nfrom .... import __version__ as saleor_version\nfrom ....demo.views import EXAMPLE_QUERY\nfrom ...tests.fixtures import API_PATH\nfrom ...tests.utils import get_graphql_content, get_graphql_content_from_response\nfrom ...views import generate_cache_key\n\n\ndef test_batch_queries(category, product, api_client, channel_USD):\n    query_product = \"\"\"\n        query GetProduct($id: ID!, $channel: String) {\n            product(id: $id, channel: $channel) {\n                name\n            }\n        }\n    \"\"\"\n    query_category = \"\"\"\n        query GetCategory($id: ID!) {\n            category(id: $id) {\n                name\n            }\n        }\n    \"\"\"\n    data = [\n        {\n            \"query\": query_category,\n            \"variables\": {\n                \"id\": graphene.Node.to_global_id(\"Category\", category.pk),\n                \"channel\": channel_USD.slug,\n            },\n        },\n        {\n            \"query\": query_product,\n            \"variables\": {\n                \"id\": graphene.Node.to_global_id(\"Product\", product.pk),\n                \"channel\": channel_USD.slug,\n            },\n        },\n    ]\n    response = api_client.post(data)\n    batch_content = get_graphql_content(response)\n    assert \"errors\" not in batch_content\n    assert isinstance(batch_content, list)\n    assert len(batch_content) == 2\n\n    data = {\n        field: value\n        for content in batch_content\n        for field, value in content[\"data\"].items()\n    }\n    assert data[\"product\"][\"name\"] == product.name\n    assert data[\"category\"][\"name\"] == category.name\n\n\ndef test_graphql_view_query_with_invalid_object_type(\n    staff_api_client, product, permission_manage_orders, graphql_log_handler\n):\n    query = \"\"\"\n    query($id: ID!) {\n        order(id: $id){\n            token\n        }\n    }\n    \"\"\"\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Product\", product.pk),\n    }\n    staff_api_client.user.user_permissions.add(permission_manage_orders)\n    response = staff_api_client.post_graphql(query, variables=variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"order\"] is None\n\n\n@pytest.mark.parametrize(\"playground_on, status\", [(True, 200), (False, 405)])\ndef test_graphql_view_get_enabled_or_disabled(client, settings, playground_on, status):\n    settings.PLAYGROUND_ENABLED = playground_on\n    response = client.get(API_PATH)\n    assert response.status_code == status\n\n\n@pytest.mark.parametrize(\"method\", (\"put\", \"patch\", \"delete\"))\ndef test_graphql_view_not_allowed(method, client):\n    func = getattr(client, method)\n    response = func(API_PATH)\n    assert response.status_code == 405\n\n\ndef test_invalid_request_body_non_debug(client):\n    data = \"invalid-data\"\n    response = client.post(API_PATH, data, content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert \"errors\" in content\n\n\n@override_settings(DEBUG=True)\ndef test_invalid_request_body_with_debug(client):\n    data = \"invalid-data\"\n    response = client.post(API_PATH, data, content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    errors = content.get(\"errors\")\n    assert errors == [\n        {\n            \"extensions\": {\"exception\": {\"code\": \"str\", \"stacktrace\": []}},\n            \"message\": \"Unable to parse query.\",\n        }\n    ]\n\n\ndef test_invalid_query(api_client):\n    query = \"query { invalid }\"\n    response = api_client.post_graphql(query, check_no_permissions=False)\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert \"errors\" in content\n\n\ndef test_no_query(client):\n    response = client.post(API_PATH, \"\", content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert content[\"errors\"][0][\"message\"] == \"Must provide a query string.\"\n\n\ndef test_query_is_dict(client):\n    data = {\"query\": {\"type\": \"dict\"}}\n    response = client.post(API_PATH, data, content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert content[\"errors\"][0][\"message\"] == \"Must provide a query string.\"\n\n\ndef test_graphql_execution_exception(monkeypatch, api_client):\n    def mocked_execute(*args, **kwargs):\n        raise IOError(\"Spanish inquisition\")\n\n    monkeypatch.setattr(\"graphql.backend.core.execute_and_validate\", mocked_execute)\n    response = api_client.post_graphql(\"{ shop { name }}\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert content[\"errors\"][0][\"message\"] == \"Spanish inquisition\"\n\n\ndef test_invalid_query_graphql_errors_are_logged_in_another_logger(\n    api_client, graphql_log_handler\n):\n    response = api_client.post_graphql(\"{ shop }\")\n    assert response.status_code == 400\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].GraphQLError\"\n    ]\n\n\ndef test_invalid_syntax_graphql_errors_are_logged_in_another_logger(\n    api_client, graphql_log_handler\n):\n    response = api_client.post_graphql(\"{ }\")\n    assert response.status_code == 400\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].GraphQLSyntaxError\"\n    ]\n\n\ndef test_permission_denied_query_graphql_errors_are_logged_in_another_logger(\n    api_client, graphql_log_handler\n):\n    response = api_client.post_graphql(\n        \"\"\"\n        mutation {\n          productMediaDelete(id: \"aa\") {\n            errors {\n              message\n            }\n          }\n        }\n        \"\"\"\n    )\n    assert response.status_code == 200\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].PermissionDenied\"\n    ]\n\n\ndef test_validation_errors_query_do_not_get_logged(\n    staff_api_client, graphql_log_handler, permission_manage_products\n):\n    staff_api_client.user.user_permissions.add(permission_manage_products)\n    response = staff_api_client.post_graphql(\n        \"\"\"\n        mutation {\n          productMediaDelete(id: \"aa\") {\n            errors {\n              message\n            }\n          }\n        }\n        \"\"\"\n    )\n    assert response.status_code == 200\n    assert graphql_log_handler.messages == []\n\n\n@mock.patch(\"saleor.graphql.product.schema.resolve_collection_by_id\")\ndef test_unexpected_exceptions_are_logged_in_their_own_logger(\n    mocked_resolve_collection_by_id,\n    staff_api_client,\n    graphql_log_handler,\n    permission_manage_products,\n    published_collection,\n    channel_USD,\n):\n    def bad_mocked_resolve_collection_by_id(info, id, channel, requestor):\n        raise NotImplementedError(info, id, channel, requestor)\n\n    mocked_resolve_collection_by_id.side_effect = bad_mocked_resolve_collection_by_id\n\n    staff_api_client.user.user_permissions.add(permission_manage_products)\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Collection\", published_collection.pk),\n        \"channel\": channel_USD.slug,\n    }\n    response = staff_api_client.post_graphql(\n        \"\"\"\n        query($id: ID!,$channel:String) {\n            collection(id: $id,channel:$channel) {\n                name\n            }\n        }\"\"\",\n        variables=variables,\n    )\n\n    assert response.status_code == 200\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.unhandled[ERROR].NotImplementedError\"\n    ]\n\n\ndef test_example_query(api_client, product):\n    response = api_client.post_graphql(EXAMPLE_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"products\"][\"edges\"][0][\"node\"][\"name\"] == product.name\n\n\n@pytest.mark.parametrize(\n    \"other_query\",\n    [\"me{email}\", 'products(first:5,channel:\"channel\"){edges{node{name}}}'],\n)\ndef test_query_contains_not_only_schema_raise_error(\n    other_query, api_client, graphql_log_handler\n):\n    query = \"\"\"\n        query IntrospectionQuery {\n            %(other_query)s\n            __schema {\n                queryType {\n                    name\n                }\n            }\n        }\n        \"\"\"\n    response = api_client.post_graphql(query % {\"other_query\": other_query})\n    assert response.status_code == 400\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].GraphQLError\"\n    ]\n\n\nINTROSPECTION_QUERY = \"\"\"\nquery IntrospectionQuery {\n    __schema {\n        queryType {\n            name\n        }\n    }\n}\n\"\"\"\n\nINTROSPECTION_RESULT = {\"__schema\": {\"queryType\": {\"name\": \"Query\"}}}\n\n\n@mock.patch(\"saleor.graphql.views.cache.set\")\n@mock.patch(\"saleor.graphql.views.cache.get\")\n@override_settings(DEBUG=False)\ndef test_introspection_query_is_cached(cache_get_mock, cache_set_mock, api_client):\n    cache_get_mock.return_value = None\n    cache_key = generate_cache_key(INTROSPECTION_QUERY)\n    response = api_client.post_graphql(INTROSPECTION_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"] == INTROSPECTION_RESULT\n    cache_get_mock.assert_called_once_with(cache_key)\n    cache_set_mock.assert_called_once_with(\n        cache_key, ExecutionResult(data=INTROSPECTION_RESULT)\n    )\n\n\n@mock.patch(\"saleor.graphql.views.cache.set\")\n@mock.patch(\"saleor.graphql.views.cache.get\")\n@override_settings(DEBUG=False)\ndef test_introspection_query_is_cached_only_once(\n    cache_get_mock, cache_set_mock, api_client\n):\n    cache_get_mock.return_value = ExecutionResult(data=INTROSPECTION_RESULT)\n    cache_key = generate_cache_key(INTROSPECTION_QUERY)\n    response = api_client.post_graphql(INTROSPECTION_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"] == INTROSPECTION_RESULT\n    cache_get_mock.assert_called_once_with(cache_key)\n    cache_set_mock.assert_not_called()\n\n\n@mock.patch(\"saleor.graphql.views.cache.set\")\n@mock.patch(\"saleor.graphql.views.cache.get\")\n@override_settings(DEBUG=True)\ndef test_introspection_query_is_not_cached_in_debug_mode(\n    cache_get_mock, cache_set_mock, api_client\n):\n    response = api_client.post_graphql(INTROSPECTION_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"] == INTROSPECTION_RESULT\n    cache_get_mock.assert_not_called()\n    cache_set_mock.assert_not_called()\n\n\ndef test_generate_cache_key_use_saleor_version():\n    cache_key = generate_cache_key(INTROSPECTION_QUERY)\n    assert saleor_version in cache_key\n", "import re\n\nfrom graphql.utils import schema_printer\n\nfrom .utils import get_graphql_content\n\n\ndef test_multiple_interface_separator_in_schema(api_client):\n    query = \"\"\"\n    query __ApolloGetServiceDefinition__ {\n        _service {\n            sdl\n        }\n    }\n    \"\"\"\n    response = api_client.post_graphql(query)\n\n    content = get_graphql_content(response)\n    sdl = content[\"data\"][\"_service\"][\"sdl\"]\n    comma_separated_interfaces = re.findall(\"implements (\\\\w+,) (\\\\w+)\", sdl)\n    ampersand_separated_interfaces = re.findall(\"implements (\\\\w+) & (\\\\w+)\", sdl)\n    assert not comma_separated_interfaces\n    assert ampersand_separated_interfaces\n\n\ndef test_graphql_core_contains_patched_function():\n    assert hasattr(schema_printer, \"_print_object\")\n", "import hashlib\nimport logging\nimport traceback\nfrom typing import TYPE_CHECKING, Any, Dict, Iterable, Union\nfrom uuid import UUID\n\nimport graphene\nfrom django.conf import settings\nfrom django.db.models import Q, Value\nfrom django.db.models.functions import Concat\nfrom graphql import GraphQLDocument\nfrom graphql.error import GraphQLError\nfrom graphql.error import format_error as format_graphql_error\n\nfrom ...account.models import User\nfrom ...app.models import App\nfrom ..core.enums import PermissionEnum\nfrom ..core.types import TYPES_WITH_DOUBLE_ID_AVAILABLE, Permission\nfrom ..core.utils import from_global_id_or_error\n\nif TYPE_CHECKING:\n    from ..core import SaleorContext\n\nunhandled_errors_logger = logging.getLogger(\"saleor.graphql.errors.unhandled\")\nhandled_errors_logger = logging.getLogger(\"saleor.graphql.errors.handled\")\n\n\nERROR_COULD_NO_RESOLVE_GLOBAL_ID = (\n    \"Could not resolve to a node with the global id list of '%s'.\"\n)\nREVERSED_DIRECTION = {\n    \"-\": \"\",\n    \"\": \"-\",\n}\n\n\ndef resolve_global_ids_to_primary_keys(\n    ids: Iterable[str], graphene_type=None, raise_error: bool = False\n):\n    pks = []\n    invalid_ids = []\n    used_type = graphene_type\n\n    for graphql_id in ids:\n        if not graphql_id:\n            invalid_ids.append(graphql_id)\n            continue\n\n        try:\n            node_type, _id = from_global_id_or_error(graphql_id)\n        except Exception:\n            invalid_ids.append(graphql_id)\n            continue\n\n        # Raise GraphQL error if ID of a different type was passed\n        if used_type and str(used_type) != str(node_type):\n            if not raise_error:\n                continue\n            raise GraphQLError(f\"Must receive {str(used_type)} id: {graphql_id}.\")\n\n        used_type = node_type\n        pks.append(_id)\n\n    if invalid_ids:\n        raise GraphQLError(ERROR_COULD_NO_RESOLVE_GLOBAL_ID % invalid_ids)\n\n    return used_type, pks\n\n\ndef _resolve_graphene_type(schema, type_name):\n    type_from_schema = schema.get_type(type_name)\n    if type_from_schema:\n        return type_from_schema.graphene_type\n    raise GraphQLError(\"Could not resolve the type {}\".format(type_name))\n\n\ndef get_nodes(\n    ids,\n    graphene_type: Union[graphene.ObjectType, str, None] = None,\n    model=None,\n    qs=None,\n    schema=None,\n):\n    \"\"\"Return a list of nodes.\n\n    If the `graphene_type` argument is provided, the IDs will be validated\n    against this type. If the type was not provided, it will be looked up in\n    the schema. Raises an error if not all IDs are of the same\n    type.\n\n    If the `graphene_type` is of type str, the model keyword argument must be provided.\n    \"\"\"\n    nodes_type, pks = resolve_global_ids_to_primary_keys(\n        ids, graphene_type, raise_error=True\n    )\n    # If `graphene_type` was not provided, check if all resolved types are\n    # the same. This prevents from accidentally mismatching IDs of different\n    # types.\n    if nodes_type and not graphene_type:\n        if schema:\n            graphene_type = _resolve_graphene_type(schema, nodes_type)\n        else:\n            raise GraphQLError(\"GraphQL schema was not provided\")\n\n    if qs is None and graphene_type and not isinstance(graphene_type, str):\n        qs = graphene_type._meta.model.objects\n    elif model is not None:\n        qs = model.objects\n\n    is_object_type_with_double_id = str(graphene_type) in TYPES_WITH_DOUBLE_ID_AVAILABLE\n    if is_object_type_with_double_id:\n        nodes = _get_node_for_types_with_double_id(qs, pks, graphene_type)\n    else:\n        nodes = list(qs.filter(pk__in=pks))\n        nodes.sort(key=lambda e: pks.index(str(e.pk)))  # preserve order in pks\n\n    if not nodes:\n        raise GraphQLError(ERROR_COULD_NO_RESOLVE_GLOBAL_ID % ids)\n\n    nodes_pk_list = [str(node.pk) for node in nodes]\n    if is_object_type_with_double_id:\n        old_id_field = \"number\" if str(graphene_type) == \"Order\" else \"old_id\"\n        nodes_pk_list.extend([str(getattr(node, old_id_field)) for node in nodes])\n    for pk in pks:\n        assert pk in nodes_pk_list, \"There is no node of type {} with pk {}\".format(\n            graphene_type, pk\n        )\n    return nodes\n\n\ndef _get_node_for_types_with_double_id(qs, pks, graphene_type):\n    uuid_pks = []\n    old_pks = []\n    is_order_type = str(graphene_type) == \"Order\"\n\n    for pk in pks:\n        try:\n            uuid_pks.append(UUID(str(pk)))\n        except ValueError:\n            old_pks.append(pk)\n    if is_order_type:\n        lookup = Q(id__in=uuid_pks) | (Q(use_old_id=True) & Q(number__in=old_pks))\n    else:\n        lookup = Q(id__in=uuid_pks) | (Q(old_id__isnull=False) & Q(old_id__in=old_pks))\n    nodes = list(qs.filter(lookup))\n    old_id_field = \"number\" if is_order_type else \"old_id\"\n    return sorted(\n        nodes,\n        key=lambda e: pks.index(\n            str(e.pk) if e.pk in uuid_pks else str(getattr(e, old_id_field))\n        ),\n    )  # preserve order in pks\n\n\ndef format_permissions_for_display(permissions):\n    \"\"\"Transform permissions queryset into Permission list.\n\n    Keyword Arguments:\n        permissions - queryset with permissions\n\n    \"\"\"\n    permissions_data = permissions.annotate(\n        formated_codename=Concat(\"content_type__app_label\", Value(\".\"), \"codename\")\n    ).values(\"name\", \"formated_codename\")\n\n    formatted_permissions = [\n        Permission(\n            code=PermissionEnum.get(data[\"formated_codename\"]), name=data[\"name\"]\n        )\n        for data in permissions_data\n    ]\n    return formatted_permissions\n\n\ndef get_user_or_app_from_context(context: \"SaleorContext\") -> Union[App, User, None]:\n    # order is important\n    # app can be None but user if None then is passed as anonymous\n    return context.app or context.user\n\n\ndef requestor_is_superuser(requestor):\n    \"\"\"Return True if requestor is superuser.\"\"\"\n    return getattr(requestor, \"is_superuser\", False)\n\n\ndef query_identifier(document: GraphQLDocument) -> str:\n    \"\"\"Generate a fingerprint for a GraphQL query.\n\n    For queries identifier is sorted set of all root objects separated by `,`.\n    e.g\n    query AnyQuery {\n        product {\n            id\n        }\n        order {\n            id\n        }\n        Product2: product {\n            id\n        }\n        Myself: me {\n            email\n        }\n    }\n    identifier: me, order, product\n\n    For mutations identifier is mutation type name.\n    e.g.\n    mutation CreateToken{\n        tokenCreate(...){\n            token\n        }\n        deleteWarehouse(...){\n            ...\n        }\n    }\n    identifier: deleteWarehouse, tokenCreate\n    \"\"\"\n    labels = []\n    for definition in document.document_ast.definitions:\n        if getattr(definition, \"operation\", None) in {\n            \"query\",\n            \"mutation\",\n        }:\n            selections = definition.selection_set.selections\n            for selection in selections:\n                labels.append(selection.name.value)\n    if not labels:\n        return \"undefined\"\n    return \", \".join(sorted(set(labels)))\n\n\ndef query_fingerprint(document: GraphQLDocument) -> str:\n    \"\"\"Generate a fingerprint for a GraphQL query.\"\"\"\n    label = \"unknown\"\n    for definition in document.document_ast.definitions:\n        if getattr(definition, \"operation\", None) in {\n            \"query\",\n            \"mutation\",\n            \"subscription\",\n        }:\n            if definition.name:\n                label = f\"{definition.operation}:{definition.name.value}\"\n            else:\n                label = definition.operation\n            break\n    query_hash = hashlib.md5(document.document_string.encode(\"utf-8\")).hexdigest()\n    return f\"{label}:{query_hash}\"\n\n\ndef format_error(error, handled_exceptions):\n    result: Dict[str, Any]\n    if isinstance(error, GraphQLError):\n        result = format_graphql_error(error)\n    else:\n        result = {\"message\": str(error)}\n\n    if \"extensions\" not in result:\n        result[\"extensions\"] = {}\n\n    exc = error\n    while isinstance(exc, GraphQLError) and hasattr(exc, \"original_error\"):\n        exc = exc.original_error\n    if isinstance(exc, AssertionError):\n        exc = GraphQLError(str(exc))\n    if isinstance(exc, handled_exceptions):\n        handled_errors_logger.info(\"A query had an error\", exc_info=exc)\n    else:\n        unhandled_errors_logger.error(\"A query failed unexpectedly\", exc_info=exc)\n\n    result[\"extensions\"][\"exception\"] = {\"code\": type(exc).__name__}\n    if settings.DEBUG:\n        lines = []\n\n        if isinstance(exc, BaseException):\n            for line in traceback.format_exception(type(exc), exc, exc.__traceback__):\n                lines.extend(line.rstrip().splitlines())\n        result[\"extensions\"][\"exception\"][\"stacktrace\"] = lines\n    return result\n"], "fixing_code": ["import datetime\nimport json\nimport os\nimport re\nfrom collections import defaultdict\nfrom datetime import timedelta\nfrom unittest.mock import ANY, MagicMock, Mock, call, patch\nfrom urllib.parse import urlencode\n\nimport graphene\nimport pytest\nfrom django.conf import settings\nfrom django.contrib.auth.tokens import default_token_generator\nfrom django.core.exceptions import ValidationError\nfrom django.core.files import File\nfrom django.test import override_settings\nfrom django.utils import timezone\nfrom django.utils.functional import SimpleLazyObject\nfrom freezegun import freeze_time\n\nfrom ....account import events as account_events\nfrom ....account.error_codes import AccountErrorCode\nfrom ....account.models import Address, Group, User\nfrom ....account.notifications import get_default_user_payload\nfrom ....account.search import (\n    generate_address_search_document_value,\n    generate_user_fields_search_document_value,\n    prepare_user_search_document_value,\n)\nfrom ....checkout import AddressType\nfrom ....core.jwt import create_token\nfrom ....core.notify_events import NotifyEventType\nfrom ....core.tests.utils import get_site_context_payload\nfrom ....core.tokens import account_delete_token_generator\nfrom ....core.utils.json_serializer import CustomJsonEncoder\nfrom ....core.utils.url import prepare_url\nfrom ....order import OrderStatus\nfrom ....order.models import FulfillmentStatus, Order\nfrom ....permission.enums import AccountPermissions, OrderPermissions\nfrom ....product.tests.utils import create_image\nfrom ....thumbnail.models import Thumbnail\nfrom ....webhook.event_types import WebhookEventAsyncType\nfrom ....webhook.payloads import (\n    generate_customer_payload,\n    generate_meta,\n    generate_requestor,\n)\nfrom ...core.enums import ThumbnailFormatEnum\nfrom ...core.utils import str_to_enum, to_global_id_or_none\nfrom ...tests.utils import (\n    assert_graphql_error_with_message,\n    assert_no_permission,\n    get_graphql_content,\n    get_graphql_content_from_response,\n    get_multipart_request_body,\n)\nfrom ..mutations.base import INVALID_TOKEN\nfrom ..mutations.staff import CustomerDelete, StaffDelete, StaffUpdate, UserDelete\nfrom ..tests.utils import convert_dict_keys_to_camel_case\n\n\ndef generate_address_webhook_call_args(address, event, requestor, webhook):\n    return [\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"Address\", address.id),\n                \"city\": address.city,\n                \"country\": {\"code\": address.country.code, \"name\": address.country.name},\n                \"company_name\": address.company_name,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: requestor)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        event,\n        [webhook],\n        address,\n        SimpleLazyObject(lambda: requestor),\n    ]\n\n\n@pytest.fixture\ndef query_customer_with_filter():\n    query = \"\"\"\n    query ($filter: CustomerFilterInput!, ) {\n        customers(first: 5, filter: $filter) {\n            totalCount\n            edges {\n                node {\n                    id\n                    lastName\n                    firstName\n                }\n            }\n        }\n    }\n    \"\"\"\n    return query\n\n\n@pytest.fixture\ndef query_staff_users_with_filter():\n    query = \"\"\"\n    query ($filter: StaffUserInput!, ) {\n        staffUsers(first: 5, filter: $filter) {\n            totalCount\n            edges {\n                node {\n                    id\n                    lastName\n                    firstName\n                }\n            }\n        }\n    }\n    \"\"\"\n    return query\n\n\nFULL_USER_QUERY = \"\"\"\n    query User($id: ID!) {\n        user(id: $id) {\n            email\n            firstName\n            lastName\n            isStaff\n            isActive\n            addresses {\n                id\n                isDefaultShippingAddress\n                isDefaultBillingAddress\n            }\n            checkoutIds\n            orders(first: 10) {\n                totalCount\n                edges {\n                    node {\n                        id\n                    }\n                }\n            }\n            languageCode\n            dateJoined\n            lastLogin\n            defaultShippingAddress {\n                firstName\n                lastName\n                companyName\n                streetAddress1\n                streetAddress2\n                city\n                cityArea\n                postalCode\n                countryArea\n                phone\n                country {\n                    code\n                }\n                isDefaultShippingAddress\n                isDefaultBillingAddress\n            }\n            defaultBillingAddress {\n                firstName\n                lastName\n                companyName\n                streetAddress1\n                streetAddress2\n                city\n                cityArea\n                postalCode\n                countryArea\n                phone\n                country {\n                    code\n                }\n                isDefaultShippingAddress\n                isDefaultBillingAddress\n            }\n            avatar {\n                url\n            }\n            userPermissions {\n                code\n                sourcePermissionGroups(userId: $id) {\n                    name\n                }\n            }\n            permissionGroups {\n                name\n                permissions {\n                    code\n                }\n            }\n            editableGroups {\n                name\n            }\n            giftCards(first: 10) {\n                edges {\n                    node {\n                        id\n                    }\n                }\n            }\n            checkouts(first: 10) {\n                edges {\n                    node {\n                        id\n                    }\n                }\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_query_customer_user(\n    staff_api_client,\n    customer_user,\n    gift_card_used,\n    gift_card_expiry_date,\n    address,\n    permission_manage_users,\n    permission_manage_orders,\n    media_root,\n    settings,\n    checkout,\n):\n    user = customer_user\n    user.default_shipping_address.country = \"US\"\n    user.default_shipping_address.save()\n    user.addresses.add(address.get_copy())\n\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save()\n\n    checkout.user = user\n    checkout.save()\n\n    Group.objects.create(name=\"empty group\")\n\n    query = FULL_USER_QUERY\n    ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": ID}\n    staff_api_client.user.user_permissions.add(\n        permission_manage_users, permission_manage_orders\n    )\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert data[\"email\"] == user.email\n    assert data[\"firstName\"] == user.first_name\n    assert data[\"lastName\"] == user.last_name\n    assert data[\"isStaff\"] == user.is_staff\n    assert data[\"isActive\"] == user.is_active\n    assert data[\"orders\"][\"totalCount\"] == user.orders.count()\n    assert data[\"avatar\"][\"url\"]\n    assert data[\"languageCode\"] == settings.LANGUAGE_CODE.upper()\n    assert len(data[\"editableGroups\"]) == 0\n\n    assert len(data[\"addresses\"]) == user.addresses.count()\n    for address in data[\"addresses\"]:\n        if address[\"isDefaultShippingAddress\"]:\n            address_id = graphene.Node.to_global_id(\n                \"Address\", user.default_shipping_address.id\n            )\n            assert address[\"id\"] == address_id\n        if address[\"isDefaultBillingAddress\"]:\n            address_id = graphene.Node.to_global_id(\n                \"Address\", user.default_billing_address.id\n            )\n            assert address[\"id\"] == address_id\n\n    address = data[\"defaultShippingAddress\"]\n    user_address = user.default_shipping_address\n    assert address[\"firstName\"] == user_address.first_name\n    assert address[\"lastName\"] == user_address.last_name\n    assert address[\"companyName\"] == user_address.company_name\n    assert address[\"streetAddress1\"] == user_address.street_address_1\n    assert address[\"streetAddress2\"] == user_address.street_address_2\n    assert address[\"city\"] == user_address.city\n    assert address[\"cityArea\"] == user_address.city_area\n    assert address[\"postalCode\"] == user_address.postal_code\n    assert address[\"country\"][\"code\"] == user_address.country.code\n    assert address[\"countryArea\"] == user_address.country_area\n    assert address[\"phone\"] == user_address.phone.as_e164\n    assert address[\"isDefaultShippingAddress\"] is None\n    assert address[\"isDefaultBillingAddress\"] is None\n\n    address = data[\"defaultBillingAddress\"]\n    user_address = user.default_billing_address\n    assert address[\"firstName\"] == user_address.first_name\n    assert address[\"lastName\"] == user_address.last_name\n    assert address[\"companyName\"] == user_address.company_name\n    assert address[\"streetAddress1\"] == user_address.street_address_1\n    assert address[\"streetAddress2\"] == user_address.street_address_2\n    assert address[\"city\"] == user_address.city\n    assert address[\"cityArea\"] == user_address.city_area\n    assert address[\"postalCode\"] == user_address.postal_code\n    assert address[\"country\"][\"code\"] == user_address.country.code\n    assert address[\"countryArea\"] == user_address.country_area\n    assert address[\"phone\"] == user_address.phone.as_e164\n    assert address[\"isDefaultShippingAddress\"] is None\n    assert address[\"isDefaultBillingAddress\"] is None\n    assert len(data[\"giftCards\"]) == 1\n    assert data[\"giftCards\"][\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"GiftCard\", gift_card_used.pk\n    )\n    assert data[\"checkoutIds\"] == [to_global_id_or_none(checkout)]\n    assert data[\"checkouts\"][\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"Checkout\", checkout.pk\n    )\n\n\ndef test_query_customer_user_with_orders(\n    staff_api_client,\n    customer_user,\n    order_list,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    # given\n    query = FULL_USER_QUERY\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = customer_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = customer_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = customer_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query,\n        variables,\n        permissions=[permission_manage_users, permission_manage_orders],\n    )\n\n    # then\n    content = get_graphql_content(response)\n    user = content[\"data\"][\"user\"]\n    assert {order[\"node\"][\"id\"] for order in user[\"orders\"][\"edges\"]} == {\n        graphene.Node.to_global_id(\"Order\", order.pk) for order in order_list\n    }\n\n\ndef test_query_customer_user_with_orders_no_manage_orders_perm(\n    staff_api_client,\n    customer_user,\n    order_list,\n    permission_manage_users,\n):\n    # given\n    query = FULL_USER_QUERY\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = customer_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = customer_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = customer_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    assert_no_permission(response)\n\n\ndef test_query_customer_user_app(\n    app_api_client,\n    customer_user,\n    address,\n    permission_manage_users,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n    app,\n):\n    user = customer_user\n    user.default_shipping_address.country = \"US\"\n    user.default_shipping_address.save()\n    user.addresses.add(address.get_copy())\n\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save()\n\n    Group.objects.create(name=\"empty group\")\n\n    query = FULL_USER_QUERY\n    ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": ID}\n    app.permissions.add(\n        permission_manage_staff, permission_manage_users, permission_manage_orders\n    )\n    response = app_api_client.post_graphql(query, variables)\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert data[\"email\"] == user.email\n\n\ndef test_query_customer_user_with_orders_by_app_no_manage_orders_perm(\n    app_api_client,\n    customer_user,\n    order_list,\n    permission_manage_users,\n):\n    # given\n    query = FULL_USER_QUERY\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = customer_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = customer_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = customer_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": id}\n\n    # when\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    assert_no_permission(response)\n\n\ndef test_query_staff_user(\n    staff_api_client,\n    staff_user,\n    address,\n    permission_manage_users,\n    media_root,\n    permission_manage_orders,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_menus,\n):\n    staff_user.user_permissions.add(permission_manage_orders, permission_manage_staff)\n\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"another user group\"),\n            Group(name=\"another group\"),\n            Group(name=\"empty group\"),\n        ]\n    )\n    group1, group2, group3, group4 = groups\n\n    group1.permissions.add(permission_manage_users, permission_manage_products)\n\n    # user groups\n    staff_user.groups.add(group1, group2)\n\n    # another group (not user group) with permission_manage_users\n    group3.permissions.add(permission_manage_users, permission_manage_menus)\n\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image2.jpg\"\n    staff_user.avatar = avatar_mock\n    staff_user.save()\n\n    query = FULL_USER_QUERY\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": user_id}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n\n    assert data[\"email\"] == staff_user.email\n    assert data[\"firstName\"] == staff_user.first_name\n    assert data[\"lastName\"] == staff_user.last_name\n    assert data[\"isStaff\"] == staff_user.is_staff\n    assert data[\"isActive\"] == staff_user.is_active\n    assert data[\"orders\"][\"totalCount\"] == staff_user.orders.count()\n    assert data[\"avatar\"][\"url\"]\n\n    assert len(data[\"permissionGroups\"]) == 2\n    assert {group_data[\"name\"] for group_data in data[\"permissionGroups\"]} == {\n        group1.name,\n        group2.name,\n    }\n    assert len(data[\"userPermissions\"]) == 4\n    assert len(data[\"editableGroups\"]) == Group.objects.count() - 1\n    assert {data_group[\"name\"] for data_group in data[\"editableGroups\"]} == {\n        group1.name,\n        group2.name,\n        group4.name,\n    }\n\n    formated_user_permissions_result = [\n        {\n            \"code\": perm[\"code\"].lower(),\n            \"groups\": {group[\"name\"] for group in perm[\"sourcePermissionGroups\"]},\n        }\n        for perm in data[\"userPermissions\"]\n    ]\n    all_permissions = group1.permissions.all() | staff_user.user_permissions.all()\n    for perm in all_permissions:\n        source_groups = {group.name for group in perm.group_set.filter(user=staff_user)}\n        expected_data = {\"code\": perm.codename, \"groups\": source_groups}\n        assert expected_data in formated_user_permissions_result\n\n\ndef test_query_staff_user_with_order_and_without_manage_orders_perm(\n    staff_api_client,\n    staff_user,\n    order_list,\n    permission_manage_staff,\n):\n    # given\n    staff_user.user_permissions.add(permission_manage_staff)\n\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = staff_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = staff_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = staff_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    query = FULL_USER_QUERY\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": user_id}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n\n    assert data[\"email\"] == staff_user.email\n    assert data[\"orders\"][\"totalCount\"] == 2\n    assert {node[\"node\"][\"id\"] for node in data[\"orders\"][\"edges\"]} == {\n        graphene.Node.to_global_id(\"Order\", order.pk)\n        for order in [order_unfulfilled, order_unconfirmed]\n    }\n\n\ndef test_query_staff_user_with_orders_and_manage_orders_perm(\n    staff_api_client,\n    staff_user,\n    order_list,\n    permission_manage_staff,\n    permission_manage_orders,\n):\n    # given\n    staff_user.user_permissions.add(permission_manage_staff, permission_manage_orders)\n\n    order_unfulfilled = order_list[0]\n    order_unfulfilled.user = staff_user\n\n    order_unconfirmed = order_list[1]\n    order_unconfirmed.status = OrderStatus.UNCONFIRMED\n    order_unconfirmed.user = staff_user\n\n    order_draft = order_list[2]\n    order_draft.status = OrderStatus.DRAFT\n    order_draft.user = staff_user\n\n    Order.objects.bulk_update(\n        [order_unconfirmed, order_draft, order_unfulfilled], [\"user\", \"status\"]\n    )\n\n    query = FULL_USER_QUERY\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": user_id}\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n\n    assert data[\"email\"] == staff_user.email\n    assert data[\"orders\"][\"totalCount\"] == 3\n    assert {node[\"node\"][\"id\"] for node in data[\"orders\"][\"edges\"]} == {\n        graphene.Node.to_global_id(\"Order\", order.pk)\n        for order in [order_unfulfilled, order_unconfirmed, order_draft]\n    }\n\n\nUSER_QUERY = \"\"\"\n    query User($id: ID $email: String, $externalReference: String) {\n        user(id: $id, email: $email, externalReference: $externalReference) {\n            id\n            email\n            externalReference\n        }\n    }\n\"\"\"\n\n\ndef test_query_user_by_email_address(\n    user_api_client, customer_user, permission_manage_users\n):\n    email = customer_user.email\n    variables = {\"email\": email}\n    response = user_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert customer_user.email == data[\"email\"]\n\n\ndef test_query_user_by_external_reference(\n    user_api_client, customer_user, permission_manage_users\n):\n    # given\n    user = customer_user\n    ext_ref = \"test-ext-ref\"\n    user.external_reference = ext_ref\n    user.save(update_fields=[\"external_reference\"])\n    variables = {\"externalReference\": ext_ref}\n\n    # when\n    response = user_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"user\"]\n    assert data[\"externalReference\"] == user.external_reference\n\n\ndef test_query_user_by_id_and_email(\n    user_api_client, customer_user, permission_manage_users\n):\n    email = customer_user.email\n    id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\n        \"id\": id,\n        \"email\": email,\n    }\n    response = user_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    assert_graphql_error_with_message(\n        response, \"Argument 'id' cannot be combined with 'email'\"\n    )\n\n\ndef test_customer_can_not_see_other_users_data(user_api_client, staff_user):\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id}\n    response = user_api_client.post_graphql(USER_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_user_query_anonymous_user(api_client):\n    variables = {\"id\": \"\"}\n    response = api_client.post_graphql(USER_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_user_query_permission_manage_users_get_customer(\n    staff_api_client, customer_user, permission_manage_users\n):\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert customer_user.email == data[\"email\"]\n\n\ndef test_user_query_as_app(app_api_client, customer_user, permission_manage_users):\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n    response = app_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert customer_user.email == data[\"email\"]\n\n\ndef test_user_query_permission_manage_users_get_staff(\n    staff_api_client, staff_user, permission_manage_users\n):\n    staff_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": staff_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    assert not content[\"data\"][\"user\"]\n\n\ndef test_user_query_permission_manage_staff_get_customer(\n    staff_api_client, customer_user, permission_manage_staff\n):\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    assert not content[\"data\"][\"user\"]\n\n\ndef test_user_query_permission_manage_staff_get_staff(\n    staff_api_client, staff_user, permission_manage_staff\n):\n    staff_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\"id\": staff_id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert staff_user.email == data[\"email\"]\n\n\n@pytest.mark.parametrize(\"id\", [\"'\", \"abc\"])\ndef test_user_query_invalid_id(\n    id, staff_api_client, customer_user, permission_manage_users\n):\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n\n    content = get_graphql_content_from_response(response)\n    assert len(content[\"errors\"]) == 1\n    assert content[\"errors\"][0][\"message\"] == f\"Couldn't resolve id: {id}.\"\n    assert content[\"data\"][\"user\"] is None\n\n\ndef test_user_query_object_with_given_id_does_not_exist(\n    staff_api_client, permission_manage_users\n):\n    id = graphene.Node.to_global_id(\"User\", -1)\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"user\"] is None\n\n\ndef test_user_query_object_with_invalid_object_type(\n    staff_api_client, customer_user, permission_manage_users\n):\n    id = graphene.Node.to_global_id(\"Order\", customer_user.pk)\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(\n        USER_QUERY, variables, permissions=[permission_manage_users]\n    )\n\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"user\"] is None\n\n\nUSER_AVATAR_QUERY = \"\"\"\n    query User($id: ID, $size: Int, $format: ThumbnailFormatEnum) {\n        user(id: $id) {\n            id\n            avatar(size: $size, format: $format) {\n                url\n                alt\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_query_user_avatar_with_size_and_format_proxy_url_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    format = ThumbnailFormatEnum.WEBP.name\n\n    user_id = graphene.Node.to_global_id(\"User\", user.id)\n    user_uuid = graphene.Node.to_global_id(\"User\", user.uuid)\n    variables = {\"id\": user_id, \"size\": 120, \"format\": format}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    domain = site_settings.site.domain\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{domain}/thumbnail/{user_uuid}/128/{format.lower()}/\"\n    )\n\n\ndef test_query_user_avatar_with_size_proxy_url_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    user_id = graphene.Node.to_global_id(\"User\", user.id)\n    user_uuid = graphene.Node.to_global_id(\"User\", user.uuid)\n    variables = {\"id\": user_id, \"size\": 120}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/thumbnail/{user_uuid}/128/\"\n    )\n\n\ndef test_query_user_avatar_with_size_thumbnail_url_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    thumbnail_mock = MagicMock(spec=File)\n    thumbnail_mock.name = \"thumbnail_image.jpg\"\n    Thumbnail.objects.create(user=user, size=128, image=thumbnail_mock)\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id, \"size\": 120}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/media/thumbnails/{thumbnail_mock.name}\"\n    )\n\n\ndef test_query_user_avatar_original_size_custom_format_provided_original_image_returned(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    format = ThumbnailFormatEnum.WEBP.name\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id, \"format\": format, \"size\": 0}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/media/user-avatars/{avatar_mock.name}\"\n    )\n\n\ndef test_query_user_avatar_no_size_value(\n    staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    # given\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save(update_fields=[\"avatar\"])\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id}\n\n    user_uuid = graphene.Node.to_global_id(\"User\", user.uuid)\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert (\n        data[\"avatar\"][\"url\"]\n        == f\"http://{site_settings.site.domain}/thumbnail/{user_uuid}/4096/\"\n    )\n\n\ndef test_query_user_avatar_no_image(staff_api_client, permission_manage_staff):\n    # given\n    user = staff_api_client.user\n\n    id = graphene.Node.to_global_id(\"User\", user.pk)\n    variables = {\"id\": id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        USER_AVATAR_QUERY, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"user\"]\n    assert data[\"id\"]\n    assert not data[\"avatar\"]\n\n\ndef test_query_customers(staff_api_client, user_api_client, permission_manage_users):\n    query = \"\"\"\n    query Users {\n        customers(first: 20) {\n            totalCount\n            edges {\n                node {\n                    isStaff\n                }\n            }\n        }\n    }\n    \"\"\"\n    variables = {}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert users\n    assert all([not user[\"node\"][\"isStaff\"] for user in users])\n\n    # check permissions\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_query_staff(\n    staff_api_client, user_api_client, staff_user, admin_user, permission_manage_staff\n):\n    query = \"\"\"\n    {\n        staffUsers(first: 20) {\n            edges {\n                node {\n                    email\n                    isStaff\n                }\n            }\n        }\n    }\n    \"\"\"\n    variables = {}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUsers\"][\"edges\"]\n    assert len(data) == 2\n    staff_emails = [user[\"node\"][\"email\"] for user in data]\n    assert sorted(staff_emails) == [admin_user.email, staff_user.email]\n    assert all([user[\"node\"][\"isStaff\"] for user in data])\n\n    # check permissions\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_who_can_see_user(\n    staff_user, customer_user, staff_api_client, permission_manage_users\n):\n    query = \"\"\"\n    query Users {\n        customers {\n            totalCount\n        }\n    }\n    \"\"\"\n\n    # Random person (even staff) can't see users data without permissions\n    ID = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": ID}\n    response = staff_api_client.post_graphql(USER_QUERY, variables)\n    assert_no_permission(response)\n\n    response = staff_api_client.post_graphql(query)\n    assert_no_permission(response)\n\n    # Add permission and ensure staff can see user(s)\n    staff_user.user_permissions.add(permission_manage_users)\n    response = staff_api_client.post_graphql(USER_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"user\"][\"email\"] == customer_user.email\n\n    response = staff_api_client.post_graphql(query)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"customers\"][\"totalCount\"] == 1\n\n\nME_QUERY = \"\"\"\n    query Me {\n        me {\n            id\n            email\n            checkout {\n                token\n            }\n            userPermissions {\n                code\n                name\n            }\n            checkouts(first: 10) {\n                edges {\n                    node {\n                        id\n                    }\n                }\n                totalCount\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_me_query(user_api_client):\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert data[\"email\"] == user_api_client.user.email\n\n\ndef test_me_user_permissions_query(\n    user_api_client, permission_manage_users, permission_group_manage_users\n):\n    user = user_api_client.user\n    user.user_permissions.add(permission_manage_users)\n    user.groups.add(permission_group_manage_users)\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    user_permissions = content[\"data\"][\"me\"][\"userPermissions\"]\n\n    assert len(user_permissions) == 1\n    assert user_permissions[0][\"code\"] == permission_manage_users.codename.upper()\n\n\ndef test_me_query_anonymous_client(api_client):\n    response = api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"me\"] is None\n\n\ndef test_me_query_customer_can_not_see_note(\n    staff_user, staff_api_client, permission_manage_users\n):\n    query = \"\"\"\n    query Me {\n        me {\n            id\n            email\n            note\n        }\n    }\n    \"\"\"\n    # Random person (even staff) can't see own note without permissions\n    response = staff_api_client.post_graphql(query)\n    assert_no_permission(response)\n\n    # Add permission and ensure staff can see own note\n    response = staff_api_client.post_graphql(\n        query, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert data[\"email\"] == staff_api_client.user.email\n    assert data[\"note\"] == staff_api_client.user.note\n\n\ndef test_me_query_checkout(user_api_client, checkout):\n    user = user_api_client.user\n    checkout.user = user\n    checkout.save()\n\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert data[\"checkout\"][\"token\"] == str(checkout.token)\n    assert data[\"checkouts\"][\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"Checkout\", checkout.pk\n    )\n\n\ndef test_me_query_checkout_with_inactive_channel(user_api_client, checkout):\n    user = user_api_client.user\n    channel = checkout.channel\n    channel.is_active = False\n    channel.save()\n    checkout.user = user\n    checkout.save()\n\n    response = user_api_client.post_graphql(ME_QUERY)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert not data[\"checkout\"]\n    assert not data[\"checkouts\"][\"edges\"]\n\n\ndef test_me_query_checkouts_with_channel(user_api_client, checkout, checkout_JPY):\n    query = \"\"\"\n        query Me($channel: String) {\n            me {\n                checkouts(first: 10, channel: $channel) {\n                    edges {\n                        node {\n                            id\n                            channel {\n                                slug\n                            }\n                        }\n                    }\n                    totalCount\n                }\n            }\n        }\n    \"\"\"\n\n    user = user_api_client.user\n    checkout.user = checkout_JPY.user = user\n    checkout.save()\n    checkout_JPY.save()\n\n    response = user_api_client.post_graphql(query, {\"channel\": checkout.channel.slug})\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"][\"checkouts\"]\n    assert data[\"edges\"][0][\"node\"][\"id\"] == graphene.Node.to_global_id(\n        \"Checkout\", checkout.pk\n    )\n    assert data[\"totalCount\"] == 1\n    assert data[\"edges\"][0][\"node\"][\"channel\"][\"slug\"] == checkout.channel.slug\n\n\nQUERY_ME_CHECKOUT_TOKENS = \"\"\"\nquery getCheckoutTokens($channel: String) {\n  me {\n    checkoutTokens(channel: $channel)\n  }\n}\n\"\"\"\n\n\ndef test_me_checkout_tokens_without_channel_param(\n    user_api_client, checkouts_assigned_to_customer\n):\n    # given\n    checkouts = checkouts_assigned_to_customer\n\n    # when\n    response = user_api_client.post_graphql(QUERY_ME_CHECKOUT_TOKENS)\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert len(data[\"checkoutTokens\"]) == len(checkouts)\n    for checkout in checkouts:\n        assert str(checkout.token) in data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_without_channel_param_inactive_channel(\n    user_api_client, channel_PLN, checkouts_assigned_to_customer\n):\n    # given\n    channel_PLN.is_active = False\n    channel_PLN.save()\n    checkouts = checkouts_assigned_to_customer\n\n    # when\n    response = user_api_client.post_graphql(QUERY_ME_CHECKOUT_TOKENS)\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert str(checkouts[0].token) in data[\"checkoutTokens\"]\n    assert str(checkouts[1].token) not in data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_with_channel(\n    user_api_client, channel_USD, checkouts_assigned_to_customer\n):\n    # given\n    checkouts = checkouts_assigned_to_customer\n\n    # when\n    response = user_api_client.post_graphql(\n        QUERY_ME_CHECKOUT_TOKENS, {\"channel\": channel_USD.slug}\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert str(checkouts[0].token) in data[\"checkoutTokens\"]\n    assert str(checkouts[1].token) not in data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_with_inactive_channel(\n    user_api_client, channel_USD, checkouts_assigned_to_customer\n):\n    # given\n    channel_USD.is_active = False\n    channel_USD.save()\n\n    # when\n    response = user_api_client.post_graphql(\n        QUERY_ME_CHECKOUT_TOKENS, {\"channel\": channel_USD.slug}\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert not data[\"checkoutTokens\"]\n\n\ndef test_me_checkout_tokens_with_not_existing_channel(\n    user_api_client, checkouts_assigned_to_customer\n):\n    # given\n\n    # when\n    response = user_api_client.post_graphql(\n        QUERY_ME_CHECKOUT_TOKENS, {\"channel\": \"Not-existing\"}\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"me\"]\n    assert not data[\"checkoutTokens\"]\n\n\ndef test_me_with_cancelled_fulfillments(\n    user_api_client, fulfilled_order_with_cancelled_fulfillment\n):\n    query = \"\"\"\n    query Me {\n        me {\n            orders (first: 1) {\n                edges {\n                    node {\n                        id\n                        fulfillments {\n                            status\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \"\"\"\n    response = user_api_client.post_graphql(query)\n    content = get_graphql_content(response)\n    order_id = graphene.Node.to_global_id(\n        \"Order\", fulfilled_order_with_cancelled_fulfillment.id\n    )\n    data = content[\"data\"][\"me\"]\n    order = data[\"orders\"][\"edges\"][0][\"node\"]\n    assert order[\"id\"] == order_id\n    fulfillments = order[\"fulfillments\"]\n    assert len(fulfillments) == 1\n    assert fulfillments[0][\"status\"] == FulfillmentStatus.FULFILLED.upper()\n\n\ndef test_user_with_cancelled_fulfillments(\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    permission_manage_orders,\n    fulfilled_order_with_cancelled_fulfillment,\n):\n    query = \"\"\"\n    query User($id: ID!) {\n        user(id: $id) {\n            orders (first: 1) {\n                edges {\n                    node {\n                        id\n                        fulfillments {\n                            status\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \"\"\"\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"id\": user_id}\n    staff_api_client.user.user_permissions.add(\n        permission_manage_users, permission_manage_orders\n    )\n    response = staff_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    order_id = graphene.Node.to_global_id(\n        \"Order\", fulfilled_order_with_cancelled_fulfillment.id\n    )\n    data = content[\"data\"][\"user\"]\n    order = data[\"orders\"][\"edges\"][0][\"node\"]\n    assert order[\"id\"] == order_id\n    fulfillments = order[\"fulfillments\"]\n    assert len(fulfillments) == 2\n    assert fulfillments[0][\"status\"] == FulfillmentStatus.FULFILLED.upper()\n    assert fulfillments[1][\"status\"] == FulfillmentStatus.CANCELED.upper()\n\n\nACCOUNT_REGISTER_MUTATION = \"\"\"\n    mutation RegisterAccount(\n        $password: String!,\n        $email: String!,\n        $firstName: String,\n        $lastName: String,\n        $redirectUrl: String,\n        $languageCode: LanguageCodeEnum\n        $metadata: [MetadataInput!],\n        $channel: String\n    ) {\n        accountRegister(\n            input: {\n                password: $password,\n                email: $email,\n                firstName: $firstName,\n                lastName: $lastName,\n                redirectUrl: $redirectUrl,\n                languageCode: $languageCode,\n                metadata: $metadata,\n                channel: $channel\n            }\n        ) {\n            errors {\n                field\n                message\n                code\n            }\n            user {\n                id\n                email\n            }\n        }\n    }\n\"\"\"\n\n\n@override_settings(\n    ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=True, ALLOWED_CLIENT_HOSTS=[\"localhost\"]\n)\n@patch(\"saleor.account.notifications.default_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_register(\n    mocked_notify,\n    mocked_generator,\n    api_client,\n    channel_PLN,\n    order,\n    site_settings,\n):\n    mocked_generator.return_value = \"token\"\n    email = \"customer@example.com\"\n\n    redirect_url = \"http://localhost:3000\"\n    variables = {\n        \"email\": email,\n        \"password\": \"Password\",\n        \"redirectUrl\": redirect_url,\n        \"firstName\": \"saleor\",\n        \"lastName\": \"rocks\",\n        \"languageCode\": \"PL\",\n        \"metadata\": [{\"key\": \"meta\", \"value\": \"data\"}],\n        \"channel\": channel_PLN.slug,\n    }\n    query = ACCOUNT_REGISTER_MUTATION\n    mutation_name = \"accountRegister\"\n\n    response = api_client.post_graphql(query, variables)\n\n    new_user = User.objects.get(email=email)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    params = urlencode({\"email\": email, \"token\": \"token\"})\n    confirm_url = prepare_url(params, redirect_url)\n\n    expected_payload = {\n        \"user\": get_default_user_payload(new_user),\n        \"token\": \"token\",\n        \"confirm_url\": confirm_url,\n        \"recipient_email\": new_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n    assert new_user.metadata == {\"meta\": \"data\"}\n    assert new_user.language_code == \"pl\"\n    assert new_user.first_name == variables[\"firstName\"]\n    assert new_user.last_name == variables[\"lastName\"]\n    assert new_user.search_document == generate_user_fields_search_document_value(\n        new_user\n    )\n    assert not data[\"errors\"]\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_CONFIRMATION,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n    response = api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"email\"\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.UNIQUE.name\n\n    customer_creation_event = account_events.CustomerEvent.objects.get()\n    assert customer_creation_event.type == account_events.CustomerEvents.ACCOUNT_CREATED\n    assert customer_creation_event.user == new_user\n\n\n@override_settings(ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=False)\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_register_disabled_email_confirmation(mocked_notify, api_client):\n    email = \"customer@example.com\"\n    variables = {\"email\": email, \"password\": \"Password\"}\n    response = api_client.post_graphql(ACCOUNT_REGISTER_MUTATION, variables)\n    errors = response.json()[\"data\"][\"accountRegister\"][\"errors\"]\n\n    assert errors == []\n    created_user = User.objects.get()\n    expected_payload = get_default_user_payload(created_user)\n    expected_payload[\"token\"] = \"token\"\n    expected_payload[\"redirect_url\"] = \"http://localhost:3000\"\n    mocked_notify.assert_not_called()\n\n\n@override_settings(ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=True)\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_register_no_redirect_url(mocked_notify, api_client):\n    variables = {\"email\": \"customer@example.com\", \"password\": \"Password\"}\n    response = api_client.post_graphql(ACCOUNT_REGISTER_MUTATION, variables)\n    errors = response.json()[\"data\"][\"accountRegister\"][\"errors\"]\n    assert \"redirectUrl\" in map(lambda error: error[\"field\"], errors)\n    mocked_notify.assert_not_called()\n\n\n@override_settings(ENABLE_ACCOUNT_CONFIRMATION_BY_EMAIL=False)\ndef test_customer_register_upper_case_email(api_client):\n    # given\n    email = \"CUSTOMER@example.com\"\n    variables = {\"email\": email, \"password\": \"Password\"}\n\n    # when\n    response = api_client.post_graphql(ACCOUNT_REGISTER_MUTATION, variables)\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"accountRegister\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"].lower()\n\n\nCUSTOMER_CREATE_MUTATION = \"\"\"\n    mutation CreateCustomer(\n        $email: String, $firstName: String, $lastName: String, $channel: String\n        $note: String, $billing: AddressInput, $shipping: AddressInput,\n        $redirect_url: String, $languageCode: LanguageCodeEnum,\n        $externalReference: String\n    ) {\n        customerCreate(input: {\n            email: $email,\n            firstName: $firstName,\n            lastName: $lastName,\n            note: $note,\n            defaultShippingAddress: $shipping,\n            defaultBillingAddress: $billing,\n            redirectUrl: $redirect_url,\n            languageCode: $languageCode,\n            channel: $channel,\n            externalReference: $externalReference\n        }) {\n            errors {\n                field\n                code\n                message\n            }\n            user {\n                id\n                defaultBillingAddress {\n                    id\n                }\n                defaultShippingAddress {\n                    id\n                }\n                languageCode\n                email\n                firstName\n                lastName\n                isActive\n                isStaff\n                note\n                externalReference\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.account.notifications.default_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_create(\n    mocked_notify,\n    mocked_generator,\n    staff_api_client,\n    address,\n    permission_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    mocked_generator.return_value = \"token\"\n    email = \"api_user@example.com\"\n    first_name = \"api_first_name\"\n    last_name = \"api_last_name\"\n    note = \"Test user\"\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n    address_data.pop(\"metadata\")\n    address_data.pop(\"privateMetadata\")\n\n    redirect_url = \"https://www.example.com\"\n    external_reference = \"test-ext-ref\"\n    variables = {\n        \"email\": email,\n        \"firstName\": first_name,\n        \"lastName\": last_name,\n        \"note\": note,\n        \"shipping\": address_data,\n        \"billing\": address_data,\n        \"redirect_url\": redirect_url,\n        \"languageCode\": \"PL\",\n        \"channel\": channel_PLN.slug,\n        \"externalReference\": external_reference,\n    }\n\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    new_customer = User.objects.get(email=email)\n\n    shipping_address, billing_address = (\n        new_customer.default_shipping_address,\n        new_customer.default_billing_address,\n    )\n    assert shipping_address == address\n    assert billing_address == address\n    assert shipping_address.pk != billing_address.pk\n\n    data = content[\"data\"][\"customerCreate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"firstName\"] == first_name\n    assert data[\"user\"][\"lastName\"] == last_name\n    assert data[\"user\"][\"note\"] == note\n    assert data[\"user\"][\"languageCode\"] == \"PL\"\n    assert data[\"user\"][\"externalReference\"] == external_reference\n    assert not data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n\n    new_user = User.objects.get(email=email)\n    assert (\n        generate_user_fields_search_document_value(new_user) in new_user.search_document\n    )\n    assert generate_address_search_document_value(address) in new_user.search_document\n    params = urlencode({\"email\": new_user.email, \"token\": \"token\"})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(new_user),\n        \"token\": \"token\",\n        \"password_set_url\": password_set_url,\n        \"recipient_email\": new_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_CUSTOMER_PASSWORD,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n    assert set([shipping_address, billing_address]) == set(new_user.addresses.all())\n    customer_creation_event = account_events.CustomerEvent.objects.get()\n    assert customer_creation_event.type == account_events.CustomerEvents.ACCOUNT_CREATED\n    assert customer_creation_event.user == new_customer\n\n\n@patch(\"saleor.account.notifications.default_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_customer_create_send_password_with_url(\n    mocked_notify,\n    mocked_generator,\n    staff_api_client,\n    permission_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    mocked_generator.return_value = \"token\"\n    email = \"api_user@example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": \"https://www.example.com\",\n        \"channel\": channel_PLN.slug,\n    }\n\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert not data[\"errors\"]\n\n    new_customer = User.objects.get(email=email)\n    assert new_customer\n    redirect_url = \"https://www.example.com\"\n    params = urlencode({\"email\": email, \"token\": \"token\"})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(new_customer),\n        \"password_set_url\": password_set_url,\n        \"token\": \"token\",\n        \"recipient_email\": new_customer.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_CUSTOMER_PASSWORD,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\ndef test_customer_create_without_send_password(\n    staff_api_client, permission_manage_users\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email}\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert not data[\"errors\"]\n    User.objects.get(email=email)\n\n\ndef test_customer_create_with_invalid_url(staff_api_client, permission_manage_users):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"invalid\"}\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"message\": ANY,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_customer_create_with_not_allowed_url(\n    staff_api_client, permission_manage_users\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"https://www.fake.com\"}\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"message\": ANY,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_customer_create_with_upper_case_email(\n    staff_api_client, permission_manage_users\n):\n    # given\n    email = \"UPPERCASE@example.com\"\n    variables = {\"email\": email}\n\n    # when\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerCreate\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == email.lower()\n\n\ndef test_customer_create_with_non_unique_external_reference(\n    staff_api_client, permission_manage_users, customer_user\n):\n    # given\n    ext_ref = \"test-ext-ref\"\n    customer_user.external_reference = ext_ref\n    customer_user.save(update_fields=[\"external_reference\"])\n\n    variables = {\"email\": \"mail.test@exampale.com\", \"externalReference\": ext_ref}\n\n    # when\n    response = staff_api_client.post_graphql(\n        CUSTOMER_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    error = content[\"data\"][\"customerCreate\"][\"errors\"][0]\n    assert error[\"field\"] == \"externalReference\"\n    assert error[\"code\"] == AccountErrorCode.UNIQUE.name\n    assert error[\"message\"] == \"User with this External reference already exists.\"\n\n\ndef test_customer_update(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = \"\"\"\n    mutation UpdateCustomer(\n            $id: ID!, $firstName: String, $lastName: String,\n            $isActive: Boolean, $note: String, $billing: AddressInput,\n            $shipping: AddressInput, $languageCode: LanguageCodeEnum,\n            $externalReference: String\n        ) {\n        customerUpdate(\n            id: $id,\n            input: {\n                isActive: $isActive,\n                firstName: $firstName,\n                lastName: $lastName,\n                note: $note,\n                defaultBillingAddress: $billing\n                defaultShippingAddress: $shipping,\n                languageCode: $languageCode,\n                externalReference: $externalReference\n                }\n            ) {\n            errors {\n                field\n                message\n            }\n            user {\n                id\n                firstName\n                lastName\n                defaultBillingAddress {\n                    id\n                }\n                defaultShippingAddress {\n                    id\n                }\n                languageCode\n                isActive\n                note\n                externalReference\n            }\n        }\n    }\n    \"\"\"\n\n    # this test requires addresses to be set and checks whether new address\n    # instances weren't created, but the existing ones got updated\n    assert customer_user.default_billing_address\n    assert customer_user.default_shipping_address\n    billing_address_pk = customer_user.default_billing_address.pk\n    shipping_address_pk = customer_user.default_shipping_address.pk\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    first_name = \"new_first_name\"\n    last_name = \"new_last_name\"\n    note = \"Test update note\"\n    external_reference = \"test-ext-ref\"\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n    address_data.pop(\"metadata\")\n    address_data.pop(\"privateMetadata\")\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": first_name,\n        \"lastName\": last_name,\n        \"isActive\": False,\n        \"note\": note,\n        \"billing\": address_data,\n        \"shipping\": address_data,\n        \"languageCode\": \"PL\",\n        \"externalReference\": external_reference,\n    }\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    customer = User.objects.get(email=customer_user.email)\n\n    # check that existing instances are updated\n    shipping_address, billing_address = (\n        customer.default_shipping_address,\n        customer.default_billing_address,\n    )\n    assert billing_address.pk == billing_address_pk\n    assert shipping_address.pk == shipping_address_pk\n\n    assert billing_address.street_address_1 == new_street_address\n    assert shipping_address.street_address_1 == new_street_address\n\n    data = content[\"data\"][\"customerUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"firstName\"] == first_name\n    assert data[\"user\"][\"lastName\"] == last_name\n    assert data[\"user\"][\"note\"] == note\n    assert data[\"user\"][\"languageCode\"] == \"PL\"\n    assert data[\"user\"][\"externalReference\"] == external_reference\n    assert not data[\"user\"][\"isActive\"]\n\n    (\n        name_changed_event,\n        deactivated_event,\n    ) = account_events.CustomerEvent.objects.order_by(\"pk\")\n\n    assert name_changed_event.type == account_events.CustomerEvents.NAME_ASSIGNED\n    assert name_changed_event.user.pk == staff_user.pk\n    assert name_changed_event.parameters == {\"message\": customer.get_full_name()}\n\n    assert deactivated_event.type == account_events.CustomerEvents.ACCOUNT_DEACTIVATED\n    assert deactivated_event.user.pk == staff_user.pk\n    assert deactivated_event.parameters == {\"account_id\": customer_user.id}\n\n    customer_user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(billing_address)\n        in customer_user.search_document\n    )\n    assert (\n        generate_address_search_document_value(shipping_address)\n        in customer_user.search_document\n    )\n\n\nUPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE = \"\"\"\n    mutation UpdateCustomer(\n        $id: ID, $externalReference: String, $input: CustomerInput!\n    ) {\n        customerUpdate(id: $id, externalReference: $externalReference, input: $input) {\n            errors {\n                field\n                message\n                code\n            }\n            user {\n                id\n                externalReference\n                firstName\n            }\n        }\n    }\n    \"\"\"\n\n\ndef test_customer_update_by_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n    user = customer_user\n    new_name = \"updated name\"\n    ext_ref = \"test-ext-ref\"\n    user.external_reference = ext_ref\n    user.save(update_fields=[\"external_reference\"])\n\n    variables = {\n        \"externalReference\": ext_ref,\n        \"input\": {\"firstName\": new_name},\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    user.refresh_from_db()\n    data = content[\"data\"][\"customerUpdate\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"firstName\"] == new_name == user.first_name\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", user.id)\n    assert data[\"user\"][\"externalReference\"] == ext_ref\n\n\ndef test_update_customer_by_both_id_and_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n    variables = {\"input\": {}, \"externalReference\": \"whatever\", \"id\": \"whatever\"}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerUpdate\"]\n    assert not data[\"user\"]\n    assert (\n        data[\"errors\"][0][\"message\"]\n        == \"Argument 'id' cannot be combined with 'external_reference'\"\n    )\n\n\ndef test_update_customer_by_external_reference_not_existing(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n    ext_ref = \"non-existing-ext-ref\"\n    variables = {\n        \"input\": {},\n        \"externalReference\": ext_ref,\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerUpdate\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"][0][\"message\"] == f\"Couldn't resolve to a node: {ext_ref}\"\n    assert data[\"errors\"][0][\"field\"] == \"externalReference\"\n\n\ndef test_update_customer_with_non_unique_external_reference(\n    staff_api_client, permission_manage_users, user_list\n):\n    # given\n    query = UPDATE_CUSTOMER_BY_EXTERNAL_REFERENCE\n\n    ext_ref = \"test-ext-ref\"\n    user_1 = user_list[0]\n    user_1.external_reference = ext_ref\n    user_1.save(update_fields=[\"external_reference\"])\n    user_2_id = graphene.Node.to_global_id(\"User\", user_list[1].id)\n\n    variables = {\"input\": {\"externalReference\": ext_ref}, \"id\": user_2_id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    error = content[\"data\"][\"customerUpdate\"][\"errors\"][0]\n    assert error[\"field\"] == \"externalReference\"\n    assert error[\"code\"] == AccountErrorCode.UNIQUE.name\n    assert error[\"message\"] == \"User with this External reference already exists.\"\n\n\nUPDATE_CUSTOMER_EMAIL_MUTATION = \"\"\"\n    mutation UpdateCustomer(\n            $id: ID!, $firstName: String, $lastName: String, $email: String) {\n        customerUpdate(id: $id, input: {\n            firstName: $firstName,\n            lastName: $lastName,\n            email: $email\n        }) {\n            errors {\n                field\n                message\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_update_generates_event_when_changing_email(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": \"mirumee@example.com\",\n    }\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # The email was changed, an event should have been triggered\n    email_changed_event = account_events.CustomerEvent.objects.get()\n    assert email_changed_event.type == account_events.CustomerEvents.EMAIL_ASSIGNED\n    assert email_changed_event.user.pk == staff_user.pk\n    assert email_changed_event.parameters == {\"message\": \"mirumee@example.com\"}\n\n\nUPDATE_CUSTOMER_IS_ACTIVE_MUTATION = \"\"\"\n    mutation UpdateCustomer(\n        $id: ID!, $isActive: Boolean) {\n            customerUpdate(id: $id, input: {\n            isActive: $isActive,\n        }) {\n            errors {\n                field\n                message\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_update_generates_event_when_deactivating(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": False}\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    account_deactivated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_deactivated_event.type\n        == account_events.CustomerEvents.ACCOUNT_DEACTIVATED\n    )\n    assert account_deactivated_event.user.pk == staff_user.pk\n    assert account_deactivated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_generates_event_when_activating(\n    staff_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    customer_user.is_active = False\n    customer_user.save(update_fields=[\"is_active\"])\n\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": True}\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    account_activated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_activated_event.type == account_events.CustomerEvents.ACCOUNT_ACTIVATED\n    )\n    assert account_activated_event.user.pk == staff_user.pk\n    assert account_activated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_generates_event_when_deactivating_as_app(\n    app_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": False}\n    app_api_client.post_graphql(query, variables, permissions=[permission_manage_users])\n\n    account_deactivated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_deactivated_event.type\n        == account_events.CustomerEvents.ACCOUNT_DEACTIVATED\n    )\n    assert account_deactivated_event.user is None\n    assert account_deactivated_event.app.pk == app_api_client.app.pk\n    assert account_deactivated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_generates_event_when_activating_as_app(\n    app_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    customer_user.is_active = False\n    customer_user.save(update_fields=[\"is_active\"])\n\n    query = UPDATE_CUSTOMER_IS_ACTIVE_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n\n    variables = {\"id\": user_id, \"isActive\": True}\n    app_api_client.post_graphql(query, variables, permissions=[permission_manage_users])\n\n    account_activated_event = account_events.CustomerEvent.objects.get()\n    assert (\n        account_activated_event.type == account_events.CustomerEvents.ACCOUNT_ACTIVATED\n    )\n    assert account_activated_event.user is None\n    assert account_activated_event.app.pk == app_api_client.app.pk\n    assert account_activated_event.parameters == {\"account_id\": customer_user.id}\n\n\ndef test_customer_update_without_any_changes_generates_no_event(\n    staff_api_client, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": customer_user.email,\n    }\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # No event should have been generated\n    assert not account_events.CustomerEvent.objects.exists()\n\n\ndef test_customer_update_generates_event_when_changing_email_by_app(\n    app_api_client, staff_user, customer_user, address, permission_manage_users\n):\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": \"mirumee@example.com\",\n    }\n    app_api_client.post_graphql(query, variables, permissions=[permission_manage_users])\n\n    # The email was changed, an event should have been triggered\n    email_changed_event = account_events.CustomerEvent.objects.get()\n    assert email_changed_event.type == account_events.CustomerEvents.EMAIL_ASSIGNED\n    assert email_changed_event.user is None\n    assert email_changed_event.parameters == {\"message\": \"mirumee@example.com\"}\n\n\ndef test_customer_update_assign_gift_cards_and_orders(\n    staff_api_client,\n    staff_user,\n    customer_user,\n    address,\n    gift_card,\n    order,\n    permission_manage_users,\n):\n    # given\n    query = UPDATE_CUSTOMER_EMAIL_MUTATION\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data = convert_dict_keys_to_camel_case(address.as_data())\n\n    new_street_address = \"Updated street address\"\n    address_data[\"streetAddress1\"] = new_street_address\n    new_email = \"mirumee@example.com\"\n\n    gift_card.created_by = None\n    gift_card.created_by_email = new_email\n    gift_card.save(update_fields=[\"created_by\", \"created_by_email\"])\n\n    order.user = None\n    order.user_email = new_email\n    order.save(update_fields=[\"user_email\", \"user\"])\n\n    variables = {\n        \"id\": user_id,\n        \"firstName\": customer_user.first_name,\n        \"lastName\": customer_user.last_name,\n        \"email\": new_email,\n    }\n\n    # when\n    staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    email_changed_event = account_events.CustomerEvent.objects.get()\n    assert email_changed_event.type == account_events.CustomerEvents.EMAIL_ASSIGNED\n    gift_card.refresh_from_db()\n    customer_user.refresh_from_db()\n    assert gift_card.created_by == customer_user\n    assert gift_card.created_by_email == customer_user.email\n    order.refresh_from_db()\n    assert order.user == customer_user\n\n\nACCOUNT_UPDATE_QUERY = \"\"\"\n    mutation accountUpdate(\n        $billing: AddressInput\n        $shipping: AddressInput\n        $firstName: String,\n        $lastName: String\n        $languageCode: LanguageCodeEnum\n    ) {\n        accountUpdate(\n          input: {\n            defaultBillingAddress: $billing,\n            defaultShippingAddress: $shipping,\n            firstName: $firstName,\n            lastName: $lastName,\n            languageCode: $languageCode\n        }) {\n            errors {\n                field\n                code\n                message\n                addressType\n            }\n            user {\n                firstName\n                lastName\n                email\n                defaultBillingAddress {\n                    id\n                }\n                defaultShippingAddress {\n                    id\n                }\n                languageCode\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_logged_customer_updates_language_code(user_api_client):\n    language_code = \"PL\"\n    user = user_api_client.user\n    assert user.language_code != language_code\n    variables = {\"languageCode\": language_code}\n\n    response = user_api_client.post_graphql(ACCOUNT_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountUpdate\"]\n\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"languageCode\"] == language_code\n    user.refresh_from_db()\n    assert user.language_code == language_code.lower()\n    assert user.search_document\n\n\ndef test_logged_customer_update_names(user_api_client):\n    first_name = \"first\"\n    last_name = \"last\"\n    user = user_api_client.user\n    assert user.first_name != first_name\n    assert user.last_name != last_name\n\n    variables = {\"firstName\": first_name, \"lastName\": last_name}\n    response = user_api_client.post_graphql(ACCOUNT_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountUpdate\"]\n\n    user.refresh_from_db()\n    assert not data[\"errors\"]\n    assert user.first_name == first_name\n    assert user.last_name == last_name\n\n\ndef test_logged_customer_update_addresses(user_api_client, graphql_address_data):\n    # this test requires addresses to be set and checks whether new address\n    # instances weren't created, but the existing ones got updated\n    user = user_api_client.user\n    new_first_name = graphql_address_data[\"firstName\"]\n    assert user.default_billing_address\n    assert user.default_shipping_address\n    assert user.default_billing_address.first_name != new_first_name\n    assert user.default_shipping_address.first_name != new_first_name\n\n    query = ACCOUNT_UPDATE_QUERY\n    mutation_name = \"accountUpdate\"\n    variables = {\"billing\": graphql_address_data, \"shipping\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    # check that existing instances are updated\n    billing_address_pk = user.default_billing_address.pk\n    shipping_address_pk = user.default_shipping_address.pk\n    user = User.objects.get(email=user.email)\n    assert user.default_billing_address.pk == billing_address_pk\n    assert user.default_shipping_address.pk == shipping_address_pk\n\n    assert user.default_billing_address.first_name == new_first_name\n    assert user.default_shipping_address.first_name == new_first_name\n    assert user.search_document\n\n\ndef test_logged_customer_update_addresses_invalid_shipping_address(\n    user_api_client, graphql_address_data\n):\n    shipping_address = graphql_address_data.copy()\n    del shipping_address[\"country\"]\n\n    query = ACCOUNT_UPDATE_QUERY\n    mutation_name = \"accountUpdate\"\n    variables = {\"billing\": graphql_address_data, \"shipping\": shipping_address}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert len(data[\"errors\"]) == 1\n    errors = data[\"errors\"]\n    assert errors[0][\"field\"] == \"country\"\n    assert errors[0][\"code\"] == AccountErrorCode.REQUIRED.name\n    assert errors[0][\"addressType\"] == AddressType.SHIPPING.upper()\n\n\ndef test_logged_customer_update_addresses_invalid_billing_address(\n    user_api_client, graphql_address_data\n):\n    billing_address = graphql_address_data.copy()\n    del billing_address[\"country\"]\n\n    query = ACCOUNT_UPDATE_QUERY\n    mutation_name = \"accountUpdate\"\n    variables = {\"billing\": billing_address, \"shipping\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert len(data[\"errors\"]) == 1\n    errors = data[\"errors\"]\n    assert errors[0][\"field\"] == \"country\"\n    assert errors[0][\"code\"] == AccountErrorCode.REQUIRED.name\n    assert errors[0][\"addressType\"] == AddressType.BILLING.upper()\n\n\ndef test_logged_customer_update_anonymous_user(api_client):\n    query = ACCOUNT_UPDATE_QUERY\n    response = api_client.post_graphql(query, {})\n    assert_no_permission(response)\n\n\nACCOUNT_REQUEST_DELETION_MUTATION = \"\"\"\n    mutation accountRequestDeletion($redirectUrl: String!, $channel: String) {\n        accountRequestDeletion(redirectUrl: $redirectUrl, channel: $channel) {\n            errors {\n                field\n                code\n                message\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.account.notifications.account_delete_token_generator.make_token\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion(\n    mocked_notify, mocked_token, user_api_client, channel_PLN, site_settings\n):\n    mocked_token.return_value = \"token\"\n    user = user_api_client.user\n    redirect_url = \"https://www.example.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n    params = urlencode({\"token\": \"token\"})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": \"token\",\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_token_validation(\n    mocked_notify, user_api_client, channel_PLN, site_settings\n):\n    user = user_api_client.user\n    token = account_delete_token_generator.make_token(user)\n    redirect_url = \"https://www.example.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n    params = urlencode({\"token\": token})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": token,\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_anonymous_user(mocked_notify, api_client):\n    variables = {\"redirectUrl\": \"https://www.example.com\"}\n    response = api_client.post_graphql(ACCOUNT_REQUEST_DELETION_MUTATION, variables)\n    assert_no_permission(response)\n    mocked_notify.assert_not_called()\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_storefront_hosts_not_allowed(\n    mocked_notify, user_api_client\n):\n    variables = {\"redirectUrl\": \"https://www.fake.com\"}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"message\": ANY,\n    }\n    mocked_notify.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_all_storefront_hosts_allowed(\n    mocked_notify, user_api_client, settings, channel_PLN, site_settings\n):\n    user = user_api_client.user\n    user.last_login = timezone.now()\n    user.save(update_fields=[\"last_login\"])\n\n    token = account_delete_token_generator.make_token(user)\n    settings.ALLOWED_CLIENT_HOSTS = [\"*\"]\n    redirect_url = \"https://www.test.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n\n    params = urlencode({\"token\": token})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": token,\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_deletion_subdomain(\n    mocked_notify, user_api_client, settings, channel_PLN, site_settings\n):\n    user = user_api_client.user\n    token = account_delete_token_generator.make_token(user)\n    settings.ALLOWED_CLIENT_HOSTS = [\".example.com\"]\n    redirect_url = \"https://sub.example.com\"\n    variables = {\"redirectUrl\": redirect_url, \"channel\": channel_PLN.slug}\n    response = user_api_client.post_graphql(\n        ACCOUNT_REQUEST_DELETION_MUTATION, variables\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountRequestDeletion\"]\n    assert not data[\"errors\"]\n    params = urlencode({\"token\": token})\n    delete_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(user),\n        \"delete_url\": delete_url,\n        \"token\": token,\n        \"recipient_email\": user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_DELETE,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\nACCOUNT_DELETE_MUTATION = \"\"\"\n    mutation AccountDelete($token: String!){\n        accountDelete(token: $token){\n            errors{\n                field\n                message\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.core.tasks.delete_from_storage_task.delay\")\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete(delete_from_storage_task_mock, user_api_client, media_root):\n    # given\n    thumbnail_mock = MagicMock(spec=File)\n    thumbnail_mock.name = \"image.jpg\"\n\n    user = user_api_client.user\n    user.last_login = timezone.now()\n    user.save(update_fields=[\"last_login\"])\n\n    user_id = user.id\n\n    # create thumbnail\n    thumbnail = Thumbnail.objects.create(user=user, size=128, image=thumbnail_mock)\n    assert user.thumbnails.all()\n    img_path = thumbnail.image.name\n\n    token = account_delete_token_generator.make_token(user)\n    variables = {\"token\": token}\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=user.id).exists()\n    # ensure all related thumbnails have been deleted\n    assert not Thumbnail.objects.filter(user_id=user_id).exists()\n    delete_from_storage_task_mock.assert_called_once_with(img_path)\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete_user_never_log_in(user_api_client):\n    user = user_api_client.user\n    token = account_delete_token_generator.make_token(user)\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=user.id).exists()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete_log_out_after_deletion_request(user_api_client):\n    user = user_api_client.user\n    user.last_login = timezone.now()\n    user.save(update_fields=[\"last_login\"])\n\n    token = account_delete_token_generator.make_token(user)\n\n    # simulate re-login\n    user.last_login = timezone.now() + datetime.timedelta(hours=1)\n    user.save(update_fields=[\"last_login\"])\n\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=user.id).exists()\n\n\ndef test_account_delete_invalid_token(user_api_client):\n    user = user_api_client.user\n    variables = {\"token\": \"invalid\"}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"message\"] == \"Invalid or expired token.\"\n    assert User.objects.filter(pk=user.id).exists()\n\n\ndef test_account_delete_anonymous_user(api_client):\n    variables = {\"token\": \"invalid\"}\n\n    response = api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    assert_no_permission(response)\n\n\ndef test_account_delete_staff_user(staff_api_client):\n    user = staff_api_client.user\n    variables = {\"token\": \"invalid\"}\n\n    response = staff_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"message\"] == \"Cannot delete a staff account.\"\n    assert User.objects.filter(pk=user.id).exists()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_account_delete_other_customer_token(user_api_client):\n    user = user_api_client.user\n    other_user = User.objects.create(email=\"temp@example.com\")\n    token = account_delete_token_generator.make_token(other_user)\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(ACCOUNT_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountDelete\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"message\"] == \"Invalid or expired token.\"\n    assert User.objects.filter(pk=user.id).exists()\n    assert User.objects.filter(pk=other_user.id).exists()\n\n\nCUSTOMER_DELETE_MUTATION = \"\"\"\n    mutation CustomerDelete($id: ID, $externalReference: String) {\n        customerDelete(id: $id, externalReference: $externalReference) {\n            errors {\n                field\n                message\n            }\n            user {\n                id\n                externalReference\n            }\n        }\n    }\n\"\"\"\n\n\n@patch(\"saleor.account.signals.delete_from_storage_task.delay\")\n@patch(\"saleor.graphql.account.utils.account_events.customer_deleted_event\")\ndef test_customer_delete(\n    mocked_deletion_event,\n    delete_from_storage_task_mock,\n    staff_api_client,\n    staff_user,\n    customer_user,\n    image,\n    permission_manage_users,\n    media_root,\n):\n    \"\"\"Ensure deleting a customer actually deletes the customer and creates proper\n    related events\"\"\"\n\n    query = CUSTOMER_DELETE_MUTATION\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    customer_user.avatar = image\n    customer_user.save(update_fields=[\"avatar\"])\n    variables = {\"id\": customer_id}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerDelete\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"id\"] == customer_id\n\n    # Ensure the customer was properly deleted\n    # and any related event was properly triggered\n    mocked_deletion_event.assert_called_once_with(\n        staff_user=staff_user, app=None, deleted_count=1\n    )\n    delete_from_storage_task_mock.assert_called_once_with(customer_user.avatar.name)\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_delete_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\"id\": customer_id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        CUSTOMER_DELETE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerDelete\"]\n\n    # then\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"id\"] == customer_id\n    mocked_webhook_trigger.assert_called_once_with(\n        generate_customer_payload(customer_user, staff_api_client.user),\n        WebhookEventAsyncType.CUSTOMER_DELETED,\n        [any_webhook],\n        customer_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n\n@patch(\"saleor.account.signals.delete_from_storage_task.delay\")\n@patch(\"saleor.graphql.account.utils.account_events.customer_deleted_event\")\ndef test_customer_delete_by_app(\n    mocked_deletion_event,\n    delete_from_storage_task_mock,\n    app_api_client,\n    app,\n    customer_user,\n    image,\n    permission_manage_users,\n    media_root,\n):\n    \"\"\"Ensure deleting a customer actually deletes the customer and creates proper\n    related events\"\"\"\n\n    query = CUSTOMER_DELETE_MUTATION\n    customer_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    customer_user.avatar = image\n    customer_user.save(update_fields=[\"avatar\"])\n    variables = {\"id\": customer_id}\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"customerDelete\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"id\"] == customer_id\n\n    # Ensure the customer was properly deleted\n    # and any related event was properly triggered\n    assert mocked_deletion_event.call_count == 1\n    args, kwargs = mocked_deletion_event.call_args\n    assert kwargs[\"deleted_count\"] == 1\n    assert kwargs[\"staff_user\"] is None\n    assert kwargs[\"app\"] == app\n    delete_from_storage_task_mock.assert_called_once_with(customer_user.avatar.name)\n\n\ndef test_customer_delete_errors(customer_user, admin_user, staff_user):\n    info = Mock(context=Mock(user=admin_user))\n    with pytest.raises(ValidationError) as e:\n        CustomerDelete.clean_instance(info, staff_user)\n\n    msg = \"Cannot delete a staff account.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n    # should not raise any errors\n    CustomerDelete.clean_instance(info, customer_user)\n\n\ndef test_customer_delete_by_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    user = customer_user\n    query = CUSTOMER_DELETE_MUTATION\n    ext_ref = \"test-ext-ref\"\n    user.external_reference = ext_ref\n    user.save(update_fields=[\"external_reference\"])\n    variables = {\"externalReference\": ext_ref}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"customerDelete\"]\n    with pytest.raises(user._meta.model.DoesNotExist):\n        user.refresh_from_db()\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"externalReference\"] == ext_ref\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", user.id)\n\n\ndef test_delete_customer_by_both_id_and_external_reference(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = CUSTOMER_DELETE_MUTATION\n    variables = {\"externalReference\": \"whatever\", \"id\": \"whatever\"}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    errors = content[\"data\"][\"customerDelete\"][\"errors\"]\n    assert (\n        errors[0][\"message\"]\n        == \"Argument 'id' cannot be combined with 'external_reference'\"\n    )\n\n\ndef test_delete_customer_by_external_reference_not_existing(\n    staff_api_client, customer_user, permission_manage_users\n):\n    # given\n    query = CUSTOMER_DELETE_MUTATION\n    ext_ref = \"non-existing-ext-ref\"\n    variables = {\"externalReference\": ext_ref}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    errors = content[\"data\"][\"customerDelete\"][\"errors\"]\n    assert errors[0][\"message\"] == f\"Couldn't resolve to a node: {ext_ref}\"\n\n\nSTAFF_CREATE_MUTATION = \"\"\"\n    mutation CreateStaff(\n            $email: String, $redirect_url: String, $add_groups: [ID!]\n        ) {\n        staffCreate(input: {email: $email, redirectUrl: $redirect_url,\n            addGroups: $add_groups}\n        ) {\n            errors {\n                field\n                code\n                permissions\n                groups\n            }\n            user {\n                id\n                email\n                isStaff\n                isActive\n                userPermissions {\n                    code\n                }\n                permissionGroups {\n                    name\n                    permissions {\n                        code\n                    }\n                }\n                avatar {\n                    url\n                }\n            }\n        }\n    }\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_staff_create(\n    mocked_notify,\n    staff_api_client,\n    staff_user,\n    media_root,\n    permission_group_manage_users,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    group = permission_group_manage_users\n    group.permissions.add(permission_manage_products)\n    staff_user.user_permissions.add(permission_manage_products, permission_manage_users)\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n\n    expected_perms = {\n        permission_manage_products.codename,\n        permission_manage_users.codename,\n    }\n    permissions = data[\"user\"][\"userPermissions\"]\n    assert {perm[\"code\"].lower() for perm in permissions} == expected_perms\n\n    staff_user = User.objects.get(email=email)\n\n    assert staff_user.is_staff\n    assert staff_user.search_document == f\"{email}\\n\".lower()\n\n    groups = data[\"user\"][\"permissionGroups\"]\n    assert len(groups) == 1\n    assert {perm[\"code\"].lower() for perm in groups[0][\"permissions\"]} == expected_perms\n\n    token = default_token_generator.make_token(staff_user)\n    params = urlencode({\"email\": email, \"token\": token})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_user),\n        \"password_set_url\": password_set_url,\n        \"token\": token,\n        \"recipient_email\": staff_user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_STAFF_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_promote_customer_to_staff_user(\n    mocked_notify,\n    staff_api_client,\n    staff_user,\n    customer_user,\n    media_root,\n    permission_group_manage_users,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_users,\n    channel_PLN,\n):\n    group = permission_group_manage_users\n    group.permissions.add(permission_manage_products)\n    staff_user.user_permissions.add(permission_manage_products, permission_manage_users)\n    redirect_url = \"https://www.example.com\"\n    email = customer_user.email\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n\n    expected_perms = {\n        permission_manage_products.codename,\n        permission_manage_users.codename,\n    }\n    permissions = data[\"user\"][\"userPermissions\"]\n    assert {perm[\"code\"].lower() for perm in permissions} == expected_perms\n\n    staff_user = User.objects.get(email=email)\n\n    assert staff_user.is_staff\n\n    groups = data[\"user\"][\"permissionGroups\"]\n    assert len(groups) == 1\n    assert {perm[\"code\"].lower() for perm in groups[0][\"permissions\"]} == expected_perms\n\n    mocked_notify.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_staff_create_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    staff_user,\n    permission_group_manage_users,\n    permission_manage_staff,\n    permission_manage_users,\n    channel_PLN,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    staff_user.user_permissions.add(permission_manage_users)\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [\n            graphene.Node.to_global_id(\"Group\", permission_group_manage_users.pk)\n        ],\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    new_staff_user = User.objects.get(email=email)\n\n    # then\n    assert not data[\"errors\"]\n    assert data[\"user\"]\n    expected_call = call(\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"User\", new_staff_user.id),\n                \"email\": email,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: staff_api_client.user)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        WebhookEventAsyncType.STAFF_CREATED,\n        [any_webhook],\n        new_staff_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n    assert expected_call in mocked_webhook_trigger.call_args_list\n\n\ndef test_staff_create_app_no_permission(\n    app_api_client,\n    staff_user,\n    media_root,\n    permission_group_manage_users,\n    permission_manage_products,\n    permission_manage_staff,\n    permission_manage_users,\n):\n    group = permission_group_manage_users\n    group.permissions.add(permission_manage_products)\n    staff_user.user_permissions.add(permission_manage_products, permission_manage_users)\n    email = \"api_user@example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": \"https://www.example.com\",\n        \"add_groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    response = app_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n\n    assert_no_permission(response)\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_staff_create_out_of_scope_group(\n    mocked_notify,\n    staff_api_client,\n    superuser_api_client,\n    media_root,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_group_manage_users,\n    channel_PLN,\n    site_settings,\n):\n    \"\"\"Ensure user can't create staff with groups which are out of user scope.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    group = permission_group_manage_users\n    group2 = Group.objects.create(name=\"second group\")\n    group2.permissions.add(permission_manage_staff)\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": email,\n        \"redirect_url\": redirect_url,\n        \"add_groups\": [\n            graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group, group2]\n        ],\n    }\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    errors = data[\"errors\"]\n    assert not data[\"user\"]\n    assert len(errors) == 1\n\n    expected_error = {\n        \"field\": \"addGroups\",\n        \"code\": AccountErrorCode.OUT_OF_SCOPE_GROUP.name,\n        \"permissions\": None,\n        \"groups\": [graphene.Node.to_global_id(\"Group\", group.pk)],\n    }\n\n    assert errors[0] == expected_error\n\n    mocked_notify.assert_not_called()\n\n    # for superuser\n    response = superuser_api_client.post_graphql(STAFF_CREATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"email\"] == email\n    assert data[\"user\"][\"isStaff\"]\n    assert data[\"user\"][\"isActive\"]\n    expected_perms = {\n        permission_manage_staff.codename,\n        permission_manage_users.codename,\n    }\n    permissions = data[\"user\"][\"userPermissions\"]\n    assert {perm[\"code\"].lower() for perm in permissions} == expected_perms\n\n    staff_user = User.objects.get(email=email)\n\n    assert staff_user.is_staff\n\n    expected_groups = [\n        {\n            \"name\": group.name,\n            \"permissions\": [{\"code\": permission_manage_users.codename.upper()}],\n        },\n        {\n            \"name\": group2.name,\n            \"permissions\": [{\"code\": permission_manage_staff.codename.upper()}],\n        },\n    ]\n    groups = data[\"user\"][\"permissionGroups\"]\n    assert len(groups) == 2\n    for group in expected_groups:\n        assert group in groups\n    token = default_token_generator.make_token(staff_user)\n    params = urlencode({\"email\": email, \"token\": token})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_user),\n        \"password_set_url\": password_set_url,\n        \"token\": token,\n        \"recipient_email\": staff_user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_STAFF_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_staff_create_send_password_with_url(\n    mocked_notify, staff_api_client, media_root, permission_manage_staff, site_settings\n):\n    email = \"api_user@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\"email\": email, \"redirect_url\": redirect_url}\n\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert not data[\"errors\"]\n\n    staff_user = User.objects.get(email=email)\n    assert staff_user.is_staff\n\n    token = default_token_generator.make_token(staff_user)\n    params = urlencode({\"email\": email, \"token\": token})\n    password_set_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_user),\n        \"password_set_url\": password_set_url,\n        \"token\": token,\n        \"recipient_email\": staff_user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_SET_STAFF_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\ndef test_staff_create_without_send_password(\n    staff_api_client, media_root, permission_manage_staff\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email}\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert not data[\"errors\"]\n    User.objects.get(email=email)\n\n\ndef test_staff_create_with_invalid_url(\n    staff_api_client, media_root, permission_manage_staff\n):\n    email = \"api_user@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"invalid\"}\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"permissions\": None,\n        \"groups\": None,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_staff_create_with_not_allowed_url(\n    staff_api_client, media_root, permission_manage_staff\n):\n    email = \"api_userrr@example.com\"\n    variables = {\"email\": email, \"redirect_url\": \"https://www.fake.com\"}\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffCreate\"]\n    assert data[\"errors\"][0] == {\n        \"field\": \"redirectUrl\",\n        \"code\": AccountErrorCode.INVALID.name,\n        \"permissions\": None,\n        \"groups\": None,\n    }\n    staff_user = User.objects.filter(email=email)\n    assert not staff_user\n\n\ndef test_staff_create_with_upper_case_email(\n    staff_api_client, media_root, permission_manage_staff\n):\n    # given\n    email = \"api_user@example.com\"\n    variables = {\"email\": email}\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_CREATE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"staffCreate\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == email.lower()\n\n\nSTAFF_UPDATE_MUTATIONS = \"\"\"\n    mutation UpdateStaff(\n            $id: ID!, $input: StaffUpdateInput!) {\n        staffUpdate(\n                id: $id,\n                input: $input) {\n            errors {\n                field\n                code\n                message\n                permissions\n                groups\n            }\n            user {\n                userPermissions {\n                    code\n                }\n                permissionGroups {\n                    name\n                }\n                isActive\n                email\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_staff_update(staff_api_client, permission_manage_staff, media_root):\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert not data[\"user\"][\"isActive\"]\n    staff_user.refresh_from_db()\n    assert not staff_user.search_document\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_staff_update_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    permission_manage_staff,\n    media_root,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_UPDATE_MUTATIONS, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n\n    # then\n    assert not data[\"errors\"]\n    assert data[\"user\"]\n    mocked_webhook_trigger.assert_called_once_with(\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"User\", staff_user.id),\n                \"email\": staff_user.email,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: staff_api_client.user)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        WebhookEventAsyncType.STAFF_UPDATED,\n        [any_webhook],\n        staff_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n\ndef test_staff_update_email(staff_api_client, permission_manage_staff, media_root):\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    new_email = \"test@email.com\"\n    variables = {\"id\": id, \"input\": {\"email\": new_email}}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert data[\"user\"][\"isActive\"]\n    staff_user.refresh_from_db()\n    assert staff_user.search_document == f\"{new_email}\\n\"\n\n\n@pytest.mark.parametrize(\"field\", [\"firstName\", \"lastName\"])\ndef test_staff_update_name_field(\n    field, staff_api_client, permission_manage_staff, media_root\n):\n    query = STAFF_UPDATE_MUTATIONS\n    email = \"staffuser@example.com\"\n    staff_user = User.objects.create(email=email, is_staff=True)\n    assert not staff_user.search_document\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    value = \"Name\"\n    variables = {\"id\": id, \"input\": {field: value}}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert data[\"user\"][\"isActive\"]\n    staff_user.refresh_from_db()\n    assert staff_user.search_document == f\"{email}\\n{value.lower()}\\n\"\n\n\ndef test_staff_update_app_no_permission(\n    app_api_client, permission_manage_staff, media_root\n):\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    assert_no_permission(response)\n\n\ndef test_staff_update_groups_and_permissions(\n    staff_api_client,\n    media_root,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_manage_orders,\n    permission_manage_products,\n):\n    query = STAFF_UPDATE_MUTATIONS\n    groups = Group.objects.bulk_create(\n        [Group(name=\"manage users\"), Group(name=\"manage orders\"), Group(name=\"empty\")]\n    )\n    group1, group2, group3 = groups\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_orders)\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_user.groups.add(group1)\n\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\n        \"id\": id,\n        \"input\": {\n            \"addGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group2, group3]\n            ],\n            \"removeGroups\": [graphene.Node.to_global_id(\"Group\", group1.pk)],\n        },\n    }\n\n    staff_api_client.user.user_permissions.add(\n        permission_manage_users, permission_manage_orders, permission_manage_products\n    )\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert {perm[\"code\"].lower() for perm in data[\"user\"][\"userPermissions\"]} == {\n        permission_manage_orders.codename,\n    }\n    assert {group[\"name\"] for group in data[\"user\"][\"permissionGroups\"]} == {\n        group2.name,\n        group3.name,\n    }\n\n\ndef test_staff_update_out_of_scope_user(\n    staff_api_client,\n    superuser_api_client,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n):\n    \"\"\"Ensure that staff user cannot update user with wider scope of permission.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_user.user_permissions.add(permission_manage_orders)\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert not data[\"user\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"id\"\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.OUT_OF_SCOPE_USER.name\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"user\"][\"email\"] == staff_user.email\n    assert data[\"user\"][\"isActive\"] is False\n    assert not data[\"errors\"]\n\n\ndef test_staff_update_out_of_scope_groups(\n    staff_api_client,\n    superuser_api_client,\n    permission_manage_staff,\n    media_root,\n    permission_manage_users,\n    permission_manage_orders,\n    permission_manage_products,\n):\n    \"\"\"Ensure that staff user cannot add to groups which permission scope is wider\n    than user's scope.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    query = STAFF_UPDATE_MUTATIONS\n\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage orders\"),\n            Group(name=\"manage products\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_orders)\n    group3.permissions.add(permission_manage_products)\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_api_client.user.user_permissions.add(permission_manage_orders)\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\n        \"id\": id,\n        \"input\": {\n            \"isActive\": False,\n            \"addGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group1, group2]\n            ],\n            \"removeGroups\": [graphene.Node.to_global_id(\"Group\", group3.pk)],\n        },\n    }\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n    assert not data[\"user\"]\n    assert len(errors) == 2\n\n    expected_errors = [\n        {\n            \"field\": \"addGroups\",\n            \"code\": AccountErrorCode.OUT_OF_SCOPE_GROUP.name,\n            \"permissions\": None,\n            \"groups\": [graphene.Node.to_global_id(\"Group\", group1.pk)],\n        },\n        {\n            \"field\": \"removeGroups\",\n            \"code\": AccountErrorCode.OUT_OF_SCOPE_GROUP.name,\n            \"permissions\": None,\n            \"groups\": [graphene.Node.to_global_id(\"Group\", group3.pk)],\n        },\n    ]\n    for error in errors:\n        error.pop(\"message\")\n        assert error in expected_errors\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n    assert not errors\n    assert data[\"user\"][\"email\"] == staff_user.email\n    assert {group[\"name\"] for group in data[\"user\"][\"permissionGroups\"]} == {\n        group1.name,\n        group2.name,\n    }\n\n\ndef test_staff_update_duplicated_input_items(\n    staff_api_client,\n    permission_manage_staff,\n    media_root,\n    permission_manage_orders,\n    permission_manage_users,\n):\n    query = STAFF_UPDATE_MUTATIONS\n\n    groups = Group.objects.bulk_create(\n        [Group(name=\"manage users\"), Group(name=\"manage orders\"), Group(name=\"empty\")]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_orders)\n\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_api_client.user.user_permissions.add(\n        permission_manage_orders, permission_manage_users\n    )\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\n        \"id\": id,\n        \"input\": {\n            \"addGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group1, group2]\n            ],\n            \"removeGroups\": [\n                graphene.Node.to_global_id(\"Group\", gr.pk)\n                for gr in [group1, group2, group3]\n            ],\n        },\n    }\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    assert len(errors) == 1\n    assert errors[0][\"field\"] is None\n    assert errors[0][\"code\"] == AccountErrorCode.DUPLICATED_INPUT_ITEM.name\n    assert set(errors[0][\"groups\"]) == {\n        graphene.Node.to_global_id(\"Group\", gr.pk) for gr in [group1, group2]\n    }\n    assert errors[0][\"permissions\"] is None\n\n\ndef test_staff_update_doesnt_change_existing_avatar(\n    staff_api_client,\n    permission_manage_staff,\n    media_root,\n    staff_users,\n):\n    query = STAFF_UPDATE_MUTATIONS\n\n    mock_file = MagicMock(spec=File)\n    mock_file.name = \"image.jpg\"\n\n    staff_user, staff_user1, _ = staff_users\n\n    id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n\n    staff_user.refresh_from_db()\n    assert not staff_user.avatar\n\n\ndef test_staff_update_deactivate_with_manage_staff_left_not_manageable_perms(\n    staff_api_client,\n    superuser_api_client,\n    staff_users,\n    permission_manage_users,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n):\n    \"\"\"Ensure that staff user can't and superuser can deactivate user where some\n    permissions will be not manageable.\n    \"\"\"\n    query = STAFF_UPDATE_MUTATIONS\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1)\n    group2.user_set.add(staff_user2, staff_user1)\n    group3.user_set.add(staff_user2)\n\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n\n    id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    assert not data[\"user\"]\n    assert len(errors) == 1\n    assert errors[0][\"field\"] == \"isActive\"\n    assert errors[0][\"code\"] == AccountErrorCode.LEFT_NOT_MANAGEABLE_PERMISSION.name\n    assert len(errors[0][\"permissions\"]) == 1\n    assert errors[0][\"permissions\"][0] == AccountPermissions.MANAGE_USERS.name\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    staff_user1.refresh_from_db()\n    assert data[\"user\"][\"email\"] == staff_user1.email\n    assert data[\"user\"][\"isActive\"] is False\n    assert not errors\n    assert not staff_user1.is_active\n\n\ndef test_staff_update_deactivate_with_manage_staff_all_perms_manageable(\n    staff_api_client,\n    staff_users,\n    permission_manage_users,\n    permission_manage_staff,\n    permission_manage_orders,\n    media_root,\n):\n    query = STAFF_UPDATE_MUTATIONS\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1, staff_user2)\n    group2.user_set.add(staff_user2, staff_user1)\n    group3.user_set.add(staff_user2)\n\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n\n    id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": id, \"input\": {\"isActive\": False}}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    errors = data[\"errors\"]\n\n    staff_user1.refresh_from_db()\n    assert not errors\n    assert staff_user1.is_active is False\n\n\ndef test_staff_update_update_email_assign_gift_cards_and_orders(\n    staff_api_client, permission_manage_staff, gift_card, order\n):\n    # given\n    query = STAFF_UPDATE_MUTATIONS\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n\n    new_email = \"testuser@example.com\"\n\n    gift_card.created_by = None\n    gift_card.created_by_email = new_email\n    gift_card.save(update_fields=[\"created_by\", \"created_by_email\"])\n\n    order.user = None\n    order.user_email = new_email\n    order.save(update_fields=[\"user_email\", \"user\"])\n\n    id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": id, \"input\": {\"email\": new_email}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffUpdate\"]\n    assert data[\"errors\"] == []\n    assert data[\"user\"][\"userPermissions\"] == []\n    assert data[\"user\"][\"email\"] == new_email\n    gift_card.refresh_from_db()\n    staff_user.refresh_from_db()\n    assert gift_card.created_by == staff_user\n    assert gift_card.created_by_email == staff_user.email\n    order.refresh_from_db()\n    assert order.user == staff_user\n\n\nSTAFF_DELETE_MUTATION = \"\"\"\n        mutation DeleteStaff($id: ID!) {\n            staffDelete(id: $id) {\n                errors {\n                    field\n                    code\n                    message\n                    permissions\n                }\n                user {\n                    id\n                }\n            }\n        }\n    \"\"\"\n\n\ndef test_staff_delete(staff_api_client, permission_manage_staff):\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    assert data[\"errors\"] == []\n    assert not User.objects.filter(pk=staff_user.id).exists()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_staff_delete_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    permission_manage_staff,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    # when\n    response = staff_api_client.post_graphql(\n        STAFF_DELETE_MUTATION, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n\n    # then\n    assert not data[\"errors\"]\n    assert not User.objects.filter(pk=staff_user.id).exists()\n    mocked_webhook_trigger.assert_called_once_with(\n        json.dumps(\n            {\n                \"id\": graphene.Node.to_global_id(\"User\", staff_user.id),\n                \"email\": staff_user.email,\n                \"meta\": generate_meta(\n                    requestor_data=generate_requestor(\n                        SimpleLazyObject(lambda: staff_api_client.user)\n                    )\n                ),\n            },\n            cls=CustomJsonEncoder,\n        ),\n        WebhookEventAsyncType.STAFF_DELETED,\n        [any_webhook],\n        staff_user,\n        SimpleLazyObject(lambda: staff_api_client.user),\n    )\n\n\n@patch(\"saleor.account.signals.delete_from_storage_task.delay\")\ndef test_staff_delete_with_avatar(\n    delete_from_storage_task_mock,\n    staff_api_client,\n    image,\n    permission_manage_staff,\n    media_root,\n):\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(\n        email=\"staffuser@example.com\", avatar=image, is_staff=True\n    )\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    assert data[\"errors\"] == []\n    assert not User.objects.filter(pk=staff_user.id).exists()\n    delete_from_storage_task_mock.assert_called_once_with(staff_user.avatar.name)\n\n\ndef test_staff_delete_app_no_permission(app_api_client, permission_manage_staff):\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n\n    assert_no_permission(response)\n\n\ndef test_staff_delete_out_of_scope_user(\n    staff_api_client,\n    superuser_api_client,\n    permission_manage_staff,\n    permission_manage_products,\n):\n    \"\"\"Ensure staff user cannot delete users even when some of user permissions are\n    out of requestor scope.\n    Ensure superuser pass restrictions.\n    \"\"\"\n    query = STAFF_DELETE_MUTATION\n    staff_user = User.objects.create(email=\"staffuser@example.com\", is_staff=True)\n    staff_user.user_permissions.add(permission_manage_products)\n    user_id = graphene.Node.to_global_id(\"User\", staff_user.id)\n    variables = {\"id\": user_id}\n\n    # for staff user\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    assert not data[\"user\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"id\"\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.OUT_OF_SCOPE_USER.name\n\n    # for superuser\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n\n    assert data[\"errors\"] == []\n    assert not User.objects.filter(pk=staff_user.id).exists()\n\n\ndef test_staff_delete_left_not_manageable_permissions(\n    staff_api_client,\n    superuser_api_client,\n    staff_users,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    \"\"\"Ensure staff user can't and superuser can delete staff user when some of\n    permissions will be not manageable.\n    \"\"\"\n    query = STAFF_DELETE_MUTATION\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1)\n    group2.user_set.add(staff_user2, staff_user1)\n    group3.user_set.add(staff_user1)\n\n    user_id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": user_id}\n\n    # for staff user\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    errors = data[\"errors\"]\n\n    assert len(errors) == 1\n    assert errors[0][\"field\"] == \"id\"\n    assert errors[0][\"code\"] == AccountErrorCode.LEFT_NOT_MANAGEABLE_PERMISSION.name\n    assert set(errors[0][\"permissions\"]) == {\n        AccountPermissions.MANAGE_USERS.name,\n        OrderPermissions.MANAGE_ORDERS.name,\n    }\n    assert User.objects.filter(pk=staff_user1.id).exists()\n\n    # for superuser\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n    response = superuser_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    errors = data[\"errors\"]\n\n    assert not errors\n    assert not User.objects.filter(pk=staff_user1.id).exists()\n\n\ndef test_staff_delete_all_permissions_manageable(\n    staff_api_client,\n    staff_users,\n    permission_manage_staff,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    query = STAFF_DELETE_MUTATION\n    groups = Group.objects.bulk_create(\n        [\n            Group(name=\"manage users\"),\n            Group(name=\"manage staff\"),\n            Group(name=\"manage users and orders\"),\n        ]\n    )\n    group1, group2, group3 = groups\n\n    group1.permissions.add(permission_manage_users)\n    group2.permissions.add(permission_manage_staff)\n    group3.permissions.add(permission_manage_users, permission_manage_orders)\n\n    staff_user, staff_user1, staff_user2 = staff_users\n    group1.user_set.add(staff_user1)\n    group2.user_set.add(staff_user2)\n    group3.user_set.add(staff_user1)\n\n    user_id = graphene.Node.to_global_id(\"User\", staff_user1.id)\n    variables = {\"id\": user_id}\n\n    staff_user.user_permissions.add(permission_manage_users, permission_manage_orders)\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"staffDelete\"]\n    errors = data[\"errors\"]\n\n    assert len(errors) == 0\n    assert not User.objects.filter(pk=staff_user1.id).exists()\n\n\ndef test_user_delete_errors(staff_user, admin_user):\n    info = Mock(context=Mock(user=staff_user))\n    with pytest.raises(ValidationError) as e:\n        UserDelete.clean_instance(info, staff_user)\n\n    msg = \"You cannot delete your own account.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n    info = Mock(context=Mock(user=staff_user))\n    with pytest.raises(ValidationError) as e:\n        UserDelete.clean_instance(info, admin_user)\n\n    msg = \"Cannot delete this account.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n\ndef test_staff_delete_errors(staff_user, customer_user, admin_user):\n    info = Mock(context=Mock(user=staff_user, app=None))\n    with pytest.raises(ValidationError) as e:\n        StaffDelete.clean_instance(info, customer_user)\n    msg = \"Cannot delete a non-staff users.\"\n    assert e.value.error_dict[\"id\"][0].message == msg\n\n    # should not raise any errors\n    info = Mock(context=Mock(user=admin_user, app=None))\n    StaffDelete.clean_instance(info, staff_user)\n\n\ndef test_staff_update_errors(staff_user, customer_user, admin_user):\n    errors = defaultdict(list)\n    input = {\"is_active\": None}\n    StaffUpdate.clean_is_active(input, customer_user, staff_user, errors)\n    assert not errors[\"is_active\"]\n\n    input[\"is_active\"] = False\n    StaffUpdate.clean_is_active(input, staff_user, staff_user, errors)\n    assert len(errors[\"is_active\"]) == 1\n    assert (\n        errors[\"is_active\"][0].code.upper()\n        == AccountErrorCode.DEACTIVATE_OWN_ACCOUNT.name\n    )\n\n    errors = defaultdict(list)\n    StaffUpdate.clean_is_active(input, admin_user, staff_user, errors)\n    assert len(errors[\"is_active\"]) == 2\n    assert {error.code.upper() for error in errors[\"is_active\"]} == {\n        AccountErrorCode.DEACTIVATE_SUPERUSER_ACCOUNT.name,\n        AccountErrorCode.LEFT_NOT_MANAGEABLE_PERMISSION.name,\n    }\n\n    errors = defaultdict(list)\n    # should not raise any errors\n    StaffUpdate.clean_is_active(input, customer_user, staff_user, errors)\n    assert not errors[\"is_active\"]\n\n\nSET_PASSWORD_MUTATION = \"\"\"\n    mutation SetPassword($email: String!, $token: String!, $password: String!) {\n        setPassword(email: $email, token: $token, password: $password) {\n            errors {\n                field\n                message\n            }\n            errors {\n                field\n                message\n                code\n            }\n            user {\n                id\n            }\n            token\n            refreshToken\n        }\n    }\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_set_password(user_api_client, customer_user):\n    token = default_token_generator.make_token(customer_user)\n    password = \"spanish-inquisition\"\n\n    variables = {\"email\": customer_user.email, \"password\": password, \"token\": token}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"setPassword\"]\n    assert data[\"user\"][\"id\"]\n    assert data[\"token\"]\n\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(password)\n\n    password_resent_event = account_events.CustomerEvent.objects.get()\n    assert password_resent_event.type == account_events.CustomerEvents.PASSWORD_RESET\n    assert password_resent_event.user == customer_user\n\n\ndef test_set_password_invalid_token(user_api_client, customer_user):\n    variables = {\"email\": customer_user.email, \"password\": \"pass\", \"token\": \"token\"}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert errors[0][\"message\"] == INVALID_TOKEN\n\n    account_errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert account_errors[0][\"message\"] == INVALID_TOKEN\n    assert account_errors[0][\"code\"] == AccountErrorCode.INVALID.name\n\n\ndef test_set_password_invalid_email(user_api_client):\n    variables = {\"email\": \"fake@example.com\", \"password\": \"pass\", \"token\": \"token\"}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert len(errors) == 1\n    assert errors[0][\"field\"] == \"email\"\n\n    account_errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert len(account_errors) == 1\n    assert account_errors[0][\"field\"] == \"email\"\n    assert account_errors[0][\"code\"] == AccountErrorCode.NOT_FOUND.name\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\ndef test_set_password_invalid_password(user_api_client, customer_user, settings):\n    settings.AUTH_PASSWORD_VALIDATORS = [\n        {\n            \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n            \"OPTIONS\": {\"min_length\": 5},\n        },\n        {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\"},\n    ]\n\n    token = default_token_generator.make_token(customer_user)\n    variables = {\"email\": customer_user.email, \"password\": \"1234\", \"token\": token}\n    response = user_api_client.post_graphql(SET_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert len(errors) == 2\n    assert (\n        errors[0][\"message\"]\n        == \"This password is too short. It must contain at least 5 characters.\"\n    )\n    assert errors[1][\"message\"] == \"This password is entirely numeric.\"\n\n    account_errors = content[\"data\"][\"setPassword\"][\"errors\"]\n    assert account_errors[0][\"code\"] == str_to_enum(\"password_too_short\")\n    assert account_errors[1][\"code\"] == str_to_enum(\"password_entirely_numeric\")\n\n\nCHANGE_PASSWORD_MUTATION = \"\"\"\n    mutation PasswordChange($oldPassword: String, $newPassword: String!) {\n        passwordChange(oldPassword: $oldPassword, newPassword: $newPassword) {\n            errors {\n                field\n                message\n            }\n            user {\n                email\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_password_change(user_api_client):\n    customer_user = user_api_client.user\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"oldPassword\": \"password\", \"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == customer_user.email\n\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(new_password)\n\n    password_change_event = account_events.CustomerEvent.objects.get()\n    assert password_change_event.type == account_events.CustomerEvents.PASSWORD_CHANGED\n    assert password_change_event.user == customer_user\n\n\ndef test_password_change_incorrect_old_password(user_api_client):\n    customer_user = user_api_client.user\n    variables = {\"oldPassword\": \"incorrect\", \"newPassword\": \"\"}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(\"password\")\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"oldPassword\"\n\n\ndef test_password_change_invalid_new_password(user_api_client, settings):\n    settings.AUTH_PASSWORD_VALIDATORS = [\n        {\n            \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n            \"OPTIONS\": {\"min_length\": 5},\n        },\n        {\"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\"},\n    ]\n\n    customer_user = user_api_client.user\n    variables = {\"oldPassword\": \"password\", \"newPassword\": \"1234\"}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    errors = content[\"data\"][\"passwordChange\"][\"errors\"]\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(\"password\")\n    assert len(errors) == 2\n    assert errors[1][\"field\"] == \"newPassword\"\n    assert (\n        errors[0][\"message\"]\n        == \"This password is too short. It must contain at least 5 characters.\"\n    )\n    assert errors[1][\"field\"] == \"newPassword\"\n    assert errors[1][\"message\"] == \"This password is entirely numeric.\"\n\n\ndef test_password_change_user_unusable_password_fails_if_old_password_is_set(\n    user_api_client,\n):\n    customer_user = user_api_client.user\n    customer_user.set_unusable_password()\n    customer_user.save()\n\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"oldPassword\": \"password\", \"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"oldPassword\"\n\n    customer_user.refresh_from_db()\n    assert not customer_user.has_usable_password()\n\n\ndef test_password_change_user_unusable_password_if_old_password_is_omitted(\n    user_api_client,\n):\n    customer_user = user_api_client.user\n    customer_user.set_unusable_password()\n    customer_user.save()\n\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"oldPassword\": None, \"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert not data[\"errors\"]\n    assert data[\"user\"][\"email\"] == customer_user.email\n\n    customer_user.refresh_from_db()\n    assert customer_user.check_password(new_password)\n\n    password_change_event = account_events.CustomerEvent.objects.get()\n    assert password_change_event.type == account_events.CustomerEvents.PASSWORD_CHANGED\n    assert password_change_event.user == customer_user\n\n\ndef test_password_change_user_usable_password_fails_if_old_password_is_omitted(\n    user_api_client,\n):\n    customer_user = user_api_client.user\n\n    new_password = \"spanish-inquisition\"\n\n    variables = {\"newPassword\": new_password}\n    response = user_api_client.post_graphql(CHANGE_PASSWORD_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"passwordChange\"]\n    assert data[\"errors\"]\n    assert data[\"errors\"][0][\"field\"] == \"oldPassword\"\n\n    customer_user.refresh_from_db()\n    assert customer_user.has_usable_password()\n    assert not customer_user.check_password(new_password)\n\n\nADDRESS_CREATE_MUTATION = \"\"\"\n    mutation CreateUserAddress($user: ID!, $address: AddressInput!) {\n        addressCreate(userId: $user, input: $address) {\n            errors {\n                field\n                message\n            }\n            address {\n                id\n                city\n                country {\n                    code\n                }\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_create_address_mutation(\n    staff_api_client, customer_user, permission_manage_users, graphql_address_data\n):\n    # given\n    query = ADDRESS_CREATE_MUTATION\n    graphql_address_data[\"city\"] = \"Dummy\"\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    # then\n    assert content[\"data\"][\"addressCreate\"][\"errors\"] == []\n    data = content[\"data\"][\"addressCreate\"]\n    assert data[\"address\"][\"city\"] == \"DUMMY\"\n    assert data[\"address\"][\"country\"][\"code\"] == \"PL\"\n    address_obj = Address.objects.get(city=\"DUMMY\")\n    assert address_obj.user_addresses.first() == customer_user\n    assert data[\"user\"][\"id\"] == user_id\n\n    customer_user.refresh_from_db()\n    for field in [\"city\", \"country\"]:\n        assert variables[\"address\"][field].lower() in customer_user.search_document\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_create_address_mutation_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    settings,\n    graphql_address_data,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n\n    # when\n    response = staff_api_client.post_graphql(\n        ADDRESS_CREATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    address = Address.objects.last()\n\n    # then\n    assert not content[\"data\"][\"addressCreate\"][\"errors\"]\n    assert content[\"data\"][\"addressCreate\"]\n\n    mocked_webhook_trigger.assert_called_once_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_CREATED,\n            staff_api_client.user,\n            any_webhook,\n        )\n    )\n\n\n@override_settings(MAX_USER_ADDRESSES=2)\ndef test_create_address_mutation_the_oldest_address_is_deleted(\n    staff_api_client,\n    customer_user,\n    address,\n    permission_manage_users,\n    graphql_address_data,\n):\n    # given\n    same_address = Address.objects.create(**address.as_data())\n    customer_user.addresses.set([address, same_address])\n\n    user_addresses_count = customer_user.addresses.count()\n    graphql_address_data[\"city\"] = \"Dummy\"\n    query = ADDRESS_CREATE_MUTATION\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    assert content[\"data\"][\"addressCreate\"][\"errors\"] == []\n    data = content[\"data\"][\"addressCreate\"]\n    assert data[\"address\"][\"city\"] == \"DUMMY\"\n    assert data[\"address\"][\"country\"][\"code\"] == \"PL\"\n    address_obj = Address.objects.get(city=\"DUMMY\")\n    assert address_obj.user_addresses.first() == customer_user\n    assert data[\"user\"][\"id\"] == user_id\n\n    customer_user.refresh_from_db()\n    assert customer_user.addresses.count() == user_addresses_count\n\n    with pytest.raises(address._meta.model.DoesNotExist):\n        address.refresh_from_db()\n\n\ndef test_create_address_validation_fails(\n    staff_api_client,\n    customer_user,\n    graphql_address_data,\n    permission_manage_users,\n    address,\n):\n    # given\n    query = ADDRESS_CREATE_MUTATION\n    address_data = graphql_address_data\n    user_id = graphene.Node.to_global_id(\"User\", customer_user.id)\n    address_data[\"postalCode\"] = \"wrong postal code\"\n    variables = {\"user\": user_id, \"address\": graphql_address_data}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"addressCreate\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"postalCode\"\n    assert data[\"address\"] is None\n\n\nADDRESS_UPDATE_MUTATION = \"\"\"\n    mutation updateUserAddress($addressId: ID!, $address: AddressInput!) {\n        addressUpdate(id: $addressId, input: $address) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_address_update_mutation(\n    staff_api_client, customer_user, permission_manage_users, graphql_address_data\n):\n    query = ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n    assert staff_api_client.user not in address_obj.user_addresses.all()\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": graphql_address_data,\n    }\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressUpdate\"]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n    address_obj.refresh_from_db()\n    assert address_obj.city == graphql_address_data[\"city\"].upper()\n    customer_user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(address_obj)\n        in customer_user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_address_update_mutation_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    graphql_address_data,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    assert staff_api_client.user not in address.user_addresses.all()\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"address\": graphql_address_data,\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        ADDRESS_UPDATE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    address.refresh_from_db()\n\n    # then\n    assert content[\"data\"][\"addressUpdate\"]\n    mocked_webhook_trigger.assert_called_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_UPDATED,\n            staff_api_client.user,\n            any_webhook,\n        )\n    )\n\n\n@patch(\"saleor.graphql.account.mutations.base.prepare_user_search_document_value\")\ndef test_address_update_mutation_no_user_assigned(\n    prepare_user_search_document_value_mock,\n    staff_api_client,\n    address,\n    permission_manage_users,\n    graphql_address_data,\n):\n    # given\n    query = ADDRESS_UPDATE_MUTATION\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"address\": graphql_address_data,\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n\n    # then\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressUpdate\"]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n    prepare_user_search_document_value_mock.assert_not_called()\n\n\nACCOUNT_ADDRESS_UPDATE_MUTATION = \"\"\"\n    mutation updateAccountAddress($addressId: ID!, $address: AddressInput!) {\n        accountAddressUpdate(id: $addressId, input: $address) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_update_own_address(\n    user_api_client, customer_user, graphql_address_data\n):\n    query = ACCOUNT_ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n    address_data = graphql_address_data\n    address_data[\"city\"] = \"Pozna\u0144\"\n    assert address_data[\"city\"] != address_obj.city\n    user = user_api_client.user\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": address_data,\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountAddressUpdate\"]\n    assert data[\"address\"][\"city\"] == address_data[\"city\"].upper()\n    address_obj.refresh_from_db()\n    assert address_obj.city == address_data[\"city\"].upper()\n    user.refresh_from_db()\n    assert generate_address_search_document_value(address_obj) in user.search_document\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_address_update_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    user_api_client,\n    customer_user,\n    graphql_address_data,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    address_data = graphql_address_data\n    address_data[\"city\"] = \"Pozna\u0144\"\n    assert address_data[\"city\"] != address.city\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"address\": graphql_address_data,\n    }\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_UPDATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    address.refresh_from_db()\n\n    # then\n    assert content[\"data\"][\"accountAddressUpdate\"]\n    mocked_webhook_trigger.assert_called_once_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_UPDATED,\n            user_api_client.user,\n            any_webhook,\n        )\n    )\n\n\ndef test_update_address_as_anonymous_user(\n    api_client, customer_user, graphql_address_data\n):\n    query = ACCOUNT_ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": graphql_address_data,\n    }\n    response = api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_customer_update_own_address_not_updated_when_validation_fails(\n    user_api_client, customer_user, graphql_address_data\n):\n    query = ACCOUNT_ADDRESS_UPDATE_MUTATION\n    address_obj = customer_user.addresses.first()\n    address_data = graphql_address_data\n    address_data[\"city\"] = \"Pozna\u0144\"\n    address_data[\"postalCode\"] = \"wrong postal code\"\n    assert address_data[\"city\"] != address_obj.city\n\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": address_data,\n    }\n    user_api_client.post_graphql(query, variables)\n    address_obj.refresh_from_db()\n    assert address_obj.city != address_data[\"city\"]\n    assert address_obj.postal_code != address_data[\"postalCode\"]\n\n\n@pytest.mark.parametrize(\n    \"query\", [ADDRESS_UPDATE_MUTATION, ACCOUNT_ADDRESS_UPDATE_MUTATION]\n)\ndef test_customer_update_address_for_other(\n    user_api_client, customer_user, address_other_country, graphql_address_data, query\n):\n    address_obj = address_other_country\n    assert customer_user not in address_obj.user_addresses.all()\n\n    address_data = graphql_address_data\n    variables = {\n        \"addressId\": graphene.Node.to_global_id(\"Address\", address_obj.id),\n        \"address\": address_data,\n    }\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\nADDRESS_DELETE_MUTATION = \"\"\"\n    mutation deleteUserAddress($id: ID!) {\n        addressDelete(id: $id) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_address_delete_mutation(\n    staff_api_client, customer_user, permission_manage_users\n):\n    query = ADDRESS_DELETE_MUTATION\n    address_obj = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = staff_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressDelete\"]\n    assert data[\"address\"][\"city\"] == address_obj.city\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", customer_user.pk)\n    with pytest.raises(address_obj._meta.model.DoesNotExist):\n        address_obj.refresh_from_db()\n\n    customer_user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(address_obj)\n        not in customer_user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_address_delete_mutation_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    staff_api_client,\n    customer_user,\n    permission_manage_users,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address.id)}\n\n    # when\n    response = staff_api_client.post_graphql(\n        ADDRESS_DELETE_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    assert content[\"data\"][\"addressDelete\"]\n    mocked_webhook_trigger.assert_called_once_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_DELETED,\n            staff_api_client.user,\n            any_webhook,\n        )\n    )\n\n\ndef test_address_delete_mutation_as_app(\n    app_api_client, customer_user, permission_manage_users\n):\n    query = ADDRESS_DELETE_MUTATION\n    address_obj = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = app_api_client.post_graphql(\n        query, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressDelete\"]\n    assert data[\"address\"][\"city\"] == address_obj.city\n    assert data[\"user\"][\"id\"] == graphene.Node.to_global_id(\"User\", customer_user.pk)\n    with pytest.raises(address_obj._meta.model.DoesNotExist):\n        address_obj.refresh_from_db()\n\n\nACCOUNT_ADDRESS_DELETE_MUTATION = \"\"\"\n    mutation deleteUserAddress($id: ID!) {\n        accountAddressDelete(id: $id) {\n            address {\n                city\n            }\n            user {\n                id\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_customer_delete_own_address(user_api_client, customer_user):\n    query = ACCOUNT_ADDRESS_DELETE_MUTATION\n    address_obj = customer_user.addresses.first()\n    user = user_api_client.user\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountAddressDelete\"]\n    assert data[\"address\"][\"city\"] == address_obj.city\n    with pytest.raises(address_obj._meta.model.DoesNotExist):\n        address_obj.refresh_from_db()\n    user.refresh_from_db()\n    assert (\n        generate_address_search_document_value(address_obj) not in user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_delete_address_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    user_api_client,\n    customer_user,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    address = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address.id)}\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_DELETE_MUTATION, variables)\n    content = get_graphql_content(response)\n\n    # then\n    assert content[\"data\"][\"accountAddressDelete\"]\n    mocked_webhook_trigger.assert_called_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_DELETED,\n            user_api_client.user,\n            any_webhook,\n        )\n    )\n\n\n@pytest.mark.parametrize(\n    \"query\", [ADDRESS_DELETE_MUTATION, ACCOUNT_ADDRESS_DELETE_MUTATION]\n)\ndef test_customer_delete_address_for_other(\n    user_api_client, customer_user, address_other_country, query\n):\n    address_obj = address_other_country\n    assert customer_user not in address_obj.user_addresses.all()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_obj.id)}\n    response = user_api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n    address_obj.refresh_from_db()\n\n\nSET_DEFAULT_ADDRESS_MUTATION = \"\"\"\nmutation($address_id: ID!, $user_id: ID!, $type: AddressTypeEnum!) {\n  addressSetDefault(addressId: $address_id, userId: $user_id, type: $type) {\n    errors {\n      field\n      message\n    }\n    user {\n      defaultBillingAddress {\n        id\n      }\n      defaultShippingAddress {\n        id\n      }\n    }\n  }\n}\n\"\"\"\n\n\ndef test_set_default_address(\n    staff_api_client, address_other_country, customer_user, permission_manage_users\n):\n    customer_user.default_billing_address = None\n    customer_user.default_shipping_address = None\n    customer_user.save()\n\n    # try to set an address that doesn't belong to that user\n    address = address_other_country\n\n    variables = {\n        \"address_id\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"user_id\": graphene.Node.to_global_id(\"User\", customer_user.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n\n    response = staff_api_client.post_graphql(\n        SET_DEFAULT_ADDRESS_MUTATION, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressSetDefault\"]\n    assert data[\"errors\"][0][\"field\"] == \"addressId\"\n\n    # try to set a new billing address using one of user's addresses\n    address = customer_user.addresses.first()\n    address_id = graphene.Node.to_global_id(\"Address\", address.id)\n\n    variables[\"address_id\"] = address_id\n    response = staff_api_client.post_graphql(SET_DEFAULT_ADDRESS_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressSetDefault\"]\n    assert data[\"user\"][\"defaultShippingAddress\"][\"id\"] == address_id\n\n\nGET_ADDRESS_VALIDATION_RULES_QUERY = \"\"\"\n    query getValidator(\n        $country_code: CountryCode!, $country_area: String, $city_area: String) {\n        addressValidationRules(\n                countryCode: $country_code,\n                countryArea: $country_area,\n                cityArea: $city_area) {\n            countryCode\n            countryName\n            addressFormat\n            addressLatinFormat\n            allowedFields\n            requiredFields\n            upperFields\n            countryAreaType\n            countryAreaChoices {\n                verbose\n                raw\n            }\n            cityType\n            cityChoices {\n                raw\n                verbose\n            }\n            cityAreaType\n            cityAreaChoices {\n                raw\n                verbose\n            }\n            postalCodeType\n            postalCodeMatchers\n            postalCodeExamples\n            postalCodePrefix\n        }\n    }\n\"\"\"\n\n\ndef test_address_validation_rules(user_api_client):\n    query = GET_ADDRESS_VALIDATION_RULES_QUERY\n    variables = {\"country_code\": \"PL\", \"country_area\": None, \"city_area\": None}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressValidationRules\"]\n    assert data[\"countryCode\"] == \"PL\"\n    assert data[\"countryName\"] == \"POLAND\"\n    assert data[\"addressFormat\"] is not None\n    assert data[\"addressLatinFormat\"] is not None\n    assert data[\"cityType\"] == \"city\"\n    assert data[\"cityAreaType\"] == \"suburb\"\n    matcher = data[\"postalCodeMatchers\"][0]\n    matcher = re.compile(matcher)\n    assert matcher.match(\"00-123\")\n    assert not data[\"cityAreaChoices\"]\n    assert not data[\"cityChoices\"]\n    assert not data[\"countryAreaChoices\"]\n    assert data[\"postalCodeExamples\"]\n    assert data[\"postalCodeType\"] == \"postal\"\n    assert set(data[\"allowedFields\"]) == {\n        \"companyName\",\n        \"city\",\n        \"postalCode\",\n        \"streetAddress1\",\n        \"name\",\n        \"streetAddress2\",\n    }\n    assert set(data[\"requiredFields\"]) == {\"postalCode\", \"streetAddress1\", \"city\"}\n    assert set(data[\"upperFields\"]) == {\"city\"}\n\n\ndef test_address_validation_rules_with_country_area(user_api_client):\n    query = GET_ADDRESS_VALIDATION_RULES_QUERY\n    variables = {\n        \"country_code\": \"CN\",\n        \"country_area\": \"Fujian Sheng\",\n        \"city_area\": None,\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressValidationRules\"]\n    assert data[\"countryCode\"] == \"CN\"\n    assert data[\"countryName\"] == \"CHINA\"\n    assert data[\"countryAreaType\"] == \"province\"\n    assert data[\"countryAreaChoices\"]\n    assert data[\"cityType\"] == \"city\"\n    assert data[\"cityChoices\"]\n    assert data[\"cityAreaType\"] == \"district\"\n    assert not data[\"cityAreaChoices\"]\n    assert data[\"cityChoices\"]\n    assert data[\"countryAreaChoices\"]\n    assert data[\"postalCodeExamples\"]\n    assert data[\"postalCodeType\"] == \"postal\"\n    assert set(data[\"allowedFields\"]) == {\n        \"city\",\n        \"postalCode\",\n        \"streetAddress1\",\n        \"name\",\n        \"streetAddress2\",\n        \"countryArea\",\n        \"companyName\",\n        \"cityArea\",\n    }\n    assert set(data[\"requiredFields\"]) == {\n        \"postalCode\",\n        \"streetAddress1\",\n        \"city\",\n        \"countryArea\",\n    }\n    assert set(data[\"upperFields\"]) == {\"countryArea\"}\n\n\ndef test_address_validation_rules_fields_in_camel_case(user_api_client):\n    query = \"\"\"\n    query getValidator(\n        $country_code: CountryCode!) {\n        addressValidationRules(countryCode: $country_code) {\n            requiredFields\n            allowedFields\n        }\n    }\n    \"\"\"\n    variables = {\"country_code\": \"PL\"}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"addressValidationRules\"]\n    required_fields = data[\"requiredFields\"]\n    allowed_fields = data[\"allowedFields\"]\n    assert \"streetAddress1\" in required_fields\n    assert \"streetAddress2\" not in required_fields\n    assert \"streetAddress1\" in allowed_fields\n    assert \"streetAddress2\" in allowed_fields\n\n\nREQUEST_PASSWORD_RESET_MUTATION = \"\"\"\n    mutation RequestPasswordReset(\n        $email: String!, $redirectUrl: String!, $channel: String) {\n        requestPasswordReset(\n            email: $email, redirectUrl: $redirectUrl, channel: $channel) {\n            errors {\n                field\n                message\n                code\n            }\n        }\n    }\n\"\"\"\n\nCONFIRM_ACCOUNT_MUTATION = \"\"\"\n    mutation ConfirmAccount($email: String!, $token: String!) {\n        confirmAccount(email: $email, token: $token) {\n            errors {\n                field\n                code\n            }\n            user {\n                id\n                email\n            }\n        }\n    }\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    channel_PLN,\n    channel_USD,\n    site_settings,\n):\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_with_upper_case_email(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    channel_PLN,\n    channel_USD,\n    site_settings,\n):\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"email\": customer_user.email.upper(),\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.graphql.account.mutations.base.assign_user_gift_cards\")\n@patch(\"saleor.graphql.account.mutations.base.match_orders_with_new_user\")\ndef test_account_confirmation(\n    match_orders_with_new_user_mock,\n    assign_gift_cards_mock,\n    api_client,\n    customer_user,\n    channel_USD,\n):\n    customer_user.is_active = False\n    customer_user.save()\n\n    variables = {\n        \"email\": customer_user.email,\n        \"token\": default_token_generator.make_token(customer_user),\n        \"channel\": channel_USD.slug,\n    }\n    response = api_client.post_graphql(CONFIRM_ACCOUNT_MUTATION, variables)\n    content = get_graphql_content(response)\n    assert not content[\"data\"][\"confirmAccount\"][\"errors\"]\n    assert content[\"data\"][\"confirmAccount\"][\"user\"][\"email\"] == customer_user.email\n    customer_user.refresh_from_db()\n    match_orders_with_new_user_mock.assert_called_once_with(customer_user)\n    assign_gift_cards_mock.assert_called_once_with(customer_user)\n    assert customer_user.is_active is True\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.graphql.account.mutations.base.assign_user_gift_cards\")\n@patch(\"saleor.graphql.account.mutations.base.match_orders_with_new_user\")\ndef test_account_confirmation_invalid_user(\n    match_orders_with_new_user_mock,\n    assign_gift_cards_mock,\n    user_api_client,\n    customer_user,\n    channel_USD,\n):\n    variables = {\n        \"email\": \"non-existing@example.com\",\n        \"token\": default_token_generator.make_token(customer_user),\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(CONFIRM_ACCOUNT_MUTATION, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"field\"] == \"email\"\n    assert (\n        content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"code\"]\n        == AccountErrorCode.NOT_FOUND.name\n    )\n    match_orders_with_new_user_mock.assert_not_called()\n    assign_gift_cards_mock.assert_not_called()\n\n\n@patch(\"saleor.graphql.account.mutations.base.assign_user_gift_cards\")\n@patch(\"saleor.graphql.account.mutations.base.match_orders_with_new_user\")\ndef test_account_confirmation_invalid_token(\n    match_orders_with_new_user_mock,\n    assign_gift_cards_mock,\n    user_api_client,\n    customer_user,\n    channel_USD,\n):\n    variables = {\n        \"email\": customer_user.email,\n        \"token\": \"invalid_token\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(CONFIRM_ACCOUNT_MUTATION, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"field\"] == \"token\"\n    assert (\n        content[\"data\"][\"confirmAccount\"][\"errors\"][0][\"code\"]\n        == AccountErrorCode.INVALID.name\n    )\n    match_orders_with_new_user_mock.assert_not_called()\n    assign_gift_cards_mock.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_request_password_reset_email_for_staff(\n    mocked_notify, staff_api_client, channel_USD, site_settings\n):\n    redirect_url = \"https://www.example.com\"\n    variables = {\"email\": staff_api_client.user.email, \"redirectUrl\": redirect_url}\n    response = staff_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n    token = default_token_generator.make_token(staff_api_client.user)\n    params = urlencode({\"email\": staff_api_client.user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(staff_api_client.user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": staff_api_client.user.email,\n        \"channel_slug\": None,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_STAFF_RESET_PASSWORD,\n        payload=expected_payload,\n        channel_slug=None,\n    )\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_invalid_email(\n    mocked_notify, user_api_client, channel_USD\n):\n    variables = {\n        \"email\": \"non-existing-email@email.com\",\n        \"redirectUrl\": \"https://www.example.com\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert len(data[\"errors\"]) == 1\n    mocked_notify.assert_not_called()\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_user_is_inactive(\n    mocked_notify, user_api_client, customer_user, channel_USD\n):\n    user = customer_user\n    user.is_active = False\n    user.save()\n\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": \"https://www.example.com\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.JWT_INVALID_TOKEN.name\n    assert not mocked_notify.called\n\n\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_storefront_hosts_not_allowed(\n    mocked_notify, user_api_client, customer_user, channel_USD\n):\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": \"https://www.fake.com\",\n        \"channel\": channel_USD.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"field\"] == \"redirectUrl\"\n    mocked_notify.assert_not_called()\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_all_storefront_hosts_allowed(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    settings,\n    channel_PLN,\n    channel_USD,\n    site_settings,\n):\n    settings.ALLOWED_CLIENT_HOSTS = [\"*\"]\n    redirect_url = \"https://www.test.com\"\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_reset_password_subdomain(\n    mocked_notify, user_api_client, customer_user, settings, channel_PLN, site_settings\n):\n    settings.ALLOWED_CLIENT_HOSTS = [\".example.com\"]\n    redirect_url = \"https://sub.example.com\"\n    variables = {\n        \"email\": customer_user.email,\n        \"redirectUrl\": redirect_url,\n        \"channel\": channel_PLN.slug,\n    }\n    response = user_api_client.post_graphql(REQUEST_PASSWORD_RESET_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestPasswordReset\"]\n    assert not data[\"errors\"]\n\n    token = default_token_generator.make_token(customer_user)\n    params = urlencode({\"email\": customer_user.email, \"token\": token})\n    reset_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"reset_url\": reset_url,\n        \"token\": token,\n        \"recipient_email\": customer_user.email,\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_PASSWORD_RESET,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\nACCOUNT_ADDRESS_CREATE_MUTATION = \"\"\"\nmutation($addressInput: AddressInput!, $addressType: AddressTypeEnum) {\n  accountAddressCreate(input: $addressInput, type: $addressType) {\n    address {\n        id,\n        city\n    }\n    user {\n        email\n    }\n    errors {\n        code\n        field\n        addressType\n    }\n  }\n}\n\"\"\"\n\n\ndef test_customer_create_address(user_api_client, graphql_address_data):\n    user = user_api_client.user\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    mutation_name = \"accountAddressCreate\"\n\n    variables = {\"addressInput\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count + 1\n    assert (\n        generate_address_search_document_value(user.addresses.last())\n        in user.search_document\n    )\n\n\n@freeze_time(\"2022-05-12 12:00:00\")\n@patch(\"saleor.plugins.webhook.plugin.get_webhooks_for_event\")\n@patch(\"saleor.plugins.webhook.plugin.trigger_webhooks_async\")\ndef test_customer_create_address_trigger_webhook(\n    mocked_webhook_trigger,\n    mocked_get_webhooks_for_event,\n    any_webhook,\n    user_api_client,\n    graphql_address_data,\n    settings,\n):\n    # given\n    mocked_get_webhooks_for_event.return_value = [any_webhook]\n    settings.PLUGINS = [\"saleor.plugins.webhook.plugin.WebhookPlugin\"]\n\n    variables = {\"addressInput\": graphql_address_data}\n\n    # when\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_CREATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    address = Address.objects.last()\n\n    # then\n    assert content[\"data\"][\"accountAddressCreate\"]\n    mocked_webhook_trigger.assert_called_with(\n        *generate_address_webhook_call_args(\n            address,\n            WebhookEventAsyncType.ADDRESS_CREATED,\n            user_api_client.user,\n            any_webhook,\n        )\n    )\n\n\ndef test_account_address_create_return_user(user_api_client, graphql_address_data):\n    user = user_api_client.user\n    variables = {\"addressInput\": graphql_address_data}\n    response = user_api_client.post_graphql(ACCOUNT_ADDRESS_CREATE_MUTATION, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"accountAddressCreate\"][\"user\"]\n    assert data[\"email\"] == user.email\n\n\ndef test_customer_create_default_address(user_api_client, graphql_address_data):\n    user = user_api_client.user\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    mutation_name = \"accountAddressCreate\"\n\n    address_type = AddressType.SHIPPING.upper()\n    variables = {\"addressInput\": graphql_address_data, \"addressType\": address_type}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count + 1\n    assert user.default_shipping_address.id == int(\n        graphene.Node.from_global_id(data[\"address\"][\"id\"])[1]\n    )\n\n    address_type = AddressType.BILLING.upper()\n    variables = {\"addressInput\": graphql_address_data, \"addressType\": address_type}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count + 2\n    assert user.default_billing_address.id == int(\n        graphene.Node.from_global_id(data[\"address\"][\"id\"])[1]\n    )\n\n\n@override_settings(MAX_USER_ADDRESSES=2)\ndef test_customer_create_address_the_oldest_address_is_deleted(\n    user_api_client, graphql_address_data, address\n):\n    \"\"\"Ensure that when mew address it added to user with max amount of addressess,\n    the oldest address will be removed.\"\"\"\n    user = user_api_client.user\n    same_address = Address.objects.create(**address.as_data())\n    user.addresses.set([address, same_address])\n\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    mutation_name = \"accountAddressCreate\"\n\n    variables = {\"addressInput\": graphql_address_data}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n\n    assert data[\"address\"][\"city\"] == graphql_address_data[\"city\"].upper()\n\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count\n\n    with pytest.raises(address._meta.model.DoesNotExist):\n        address.refresh_from_db()\n\n\ndef test_anonymous_user_create_address(api_client, graphql_address_data):\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n    variables = {\"addressInput\": graphql_address_data}\n    response = api_client.post_graphql(query, variables)\n    assert_no_permission(response)\n\n\ndef test_address_not_created_after_validation_fails(\n    user_api_client, graphql_address_data\n):\n    user = user_api_client.user\n    user_addresses_count = user.addresses.count()\n\n    query = ACCOUNT_ADDRESS_CREATE_MUTATION\n\n    graphql_address_data[\"postalCode\"] = \"wrong postal code\"\n\n    address_type = AddressType.SHIPPING.upper()\n    variables = {\"addressInput\": graphql_address_data, \"addressType\": address_type}\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n\n    data = content[\"data\"][\"accountAddressCreate\"]\n    assert not data[\"address\"]\n    assert len(data[\"errors\"]) == 1\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.INVALID.name\n    assert data[\"errors\"][0][\"field\"] == \"postalCode\"\n    assert data[\"errors\"][0][\"addressType\"] == address_type\n    user.refresh_from_db()\n    assert user.addresses.count() == user_addresses_count\n\n\nACCOUNT_SET_DEFAULT_ADDRESS_MUTATION = \"\"\"\nmutation($id: ID!, $type: AddressTypeEnum!) {\n  accountSetDefaultAddress(id: $id, type: $type) {\n    errors {\n      field,\n      message\n    }\n  }\n}\n\"\"\"\n\n\ndef test_customer_set_address_as_default(user_api_client):\n    user = user_api_client.user\n    user.default_billing_address = None\n    user.default_shipping_address = None\n    user.save()\n    assert not user.default_billing_address\n    assert not user.default_shipping_address\n    assert user.addresses.exists()\n\n    address = user.addresses.first()\n    query = ACCOUNT_SET_DEFAULT_ADDRESS_MUTATION\n    mutation_name = \"accountSetDefaultAddress\"\n\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    user.refresh_from_db()\n    assert user.default_shipping_address == address\n\n    variables[\"type\"] = AddressType.BILLING.upper()\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    user.refresh_from_db()\n    assert user.default_billing_address == address\n\n\ndef test_customer_change_default_address(user_api_client, address_other_country):\n    user = user_api_client.user\n    assert user.default_billing_address\n    assert user.default_billing_address\n    address = user.default_shipping_address\n    assert address in user.addresses.all()\n    assert address_other_country not in user.addresses.all()\n\n    user.default_shipping_address = address_other_country\n    user.save()\n    user.refresh_from_db()\n    assert address_other_country not in user.addresses.all()\n\n    query = ACCOUNT_SET_DEFAULT_ADDRESS_MUTATION\n    mutation_name = \"accountSetDefaultAddress\"\n\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Address\", address.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][mutation_name]\n    assert not data[\"errors\"]\n\n    user.refresh_from_db()\n    assert user.default_shipping_address == address\n    assert address_other_country in user.addresses.all()\n\n\ndef test_customer_change_default_address_invalid_address(\n    user_api_client, address_other_country\n):\n    user = user_api_client.user\n    assert address_other_country not in user.addresses.all()\n\n    query = ACCOUNT_SET_DEFAULT_ADDRESS_MUTATION\n    mutation_name = \"accountSetDefaultAddress\"\n\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Address\", address_other_country.id),\n        \"type\": AddressType.SHIPPING.upper(),\n    }\n    response = user_api_client.post_graphql(query, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][mutation_name][\"errors\"][0][\"field\"] == \"id\"\n\n\nUSER_AVATAR_UPDATE_MUTATION = \"\"\"\n    mutation userAvatarUpdate($image: Upload!) {\n        userAvatarUpdate(image: $image) {\n            user {\n                avatar(size: 0) {\n                    url\n                }\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_user_avatar_update_mutation_permission(api_client):\n    \"\"\"Should raise error if user is not staff.\"\"\"\n\n    query = USER_AVATAR_UPDATE_MUTATION\n\n    image_file, image_name = create_image(\"avatar\")\n    variables = {\"image\": image_name}\n    body = get_multipart_request_body(query, variables, image_file, image_name)\n    response = api_client.post_multipart(body)\n\n    assert_no_permission(response)\n\n\ndef test_user_avatar_update_mutation(\n    monkeypatch, staff_api_client, media_root, site_settings\n):\n    query = USER_AVATAR_UPDATE_MUTATION\n\n    user = staff_api_client.user\n\n    image_file, image_name = create_image(\"avatar\")\n    variables = {\"image\": image_name}\n    body = get_multipart_request_body(query, variables, image_file, image_name)\n\n    # when\n    response = staff_api_client.post_multipart(body)\n\n    # then\n    content = get_graphql_content(response)\n\n    data = content[\"data\"][\"userAvatarUpdate\"]\n    user.refresh_from_db()\n\n    assert user.avatar\n    assert data[\"user\"][\"avatar\"][\"url\"].startswith(\n        f\"http://{site_settings.site.domain}/media/user-avatars/avatar\"\n    )\n    img_name, format = os.path.splitext(image_file._name)\n    file_name = user.avatar.name\n    assert file_name != image_file._name\n    assert file_name.startswith(f\"user-avatars/{img_name}\")\n    assert file_name.endswith(format)\n\n\ndef test_user_avatar_update_mutation_image_exists(\n    staff_api_client, media_root, site_settings\n):\n    query = USER_AVATAR_UPDATE_MUTATION\n\n    user = staff_api_client.user\n    avatar_mock = MagicMock(spec=File)\n    avatar_mock.name = \"image.jpg\"\n    user.avatar = avatar_mock\n    user.save()\n\n    # create thumbnail for old avatar\n    Thumbnail.objects.create(user=staff_api_client.user, size=128)\n    assert user.thumbnails.exists()\n\n    image_file, image_name = create_image(\"new_image\")\n    variables = {\"image\": image_name}\n    body = get_multipart_request_body(query, variables, image_file, image_name)\n\n    # when\n    response = staff_api_client.post_multipart(body)\n\n    # then\n    content = get_graphql_content(response)\n\n    data = content[\"data\"][\"userAvatarUpdate\"]\n    user.refresh_from_db()\n\n    assert user.avatar != avatar_mock\n    assert data[\"user\"][\"avatar\"][\"url\"].startswith(\n        f\"http://{site_settings.site.domain}/media/user-avatars/new_image\"\n    )\n    assert not user.thumbnails.exists()\n\n\nUSER_AVATAR_DELETE_MUTATION = \"\"\"\n    mutation userAvatarDelete {\n        userAvatarDelete {\n            user {\n                avatar {\n                    url\n                }\n            }\n        }\n    }\n\"\"\"\n\n\ndef test_user_avatar_delete_mutation_permission(api_client):\n    \"\"\"Should raise error if user is not staff.\"\"\"\n\n    query = USER_AVATAR_DELETE_MUTATION\n\n    response = api_client.post_graphql(query)\n\n    assert_no_permission(response)\n\n\ndef test_user_avatar_delete_mutation(staff_api_client):\n    # given\n    query = USER_AVATAR_DELETE_MUTATION\n\n    user = staff_api_client.user\n    Thumbnail.objects.create(user=staff_api_client.user, size=128)\n    assert user.thumbnails.all()\n\n    # when\n    response = staff_api_client.post_graphql(query)\n    content = get_graphql_content(response)\n\n    # then\n    user.refresh_from_db()\n\n    assert not user.avatar\n    assert not content[\"data\"][\"userAvatarDelete\"][\"user\"][\"avatar\"]\n    assert not user.thumbnails.exists()\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"placedOrders\": {\"gte\": \"2019-04-18\"}}, 1),\n        ({\"placedOrders\": {\"lte\": \"2012-01-14\"}}, 1),\n        ({\"placedOrders\": {\"lte\": \"2012-01-14\", \"gte\": \"2012-01-13\"}}, 1),\n        ({\"placedOrders\": {\"gte\": \"2012-01-14\"}}, 2),\n    ],\n)\ndef test_query_customers_with_filter_placed_orders(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n    channel_USD,\n):\n    Order.objects.create(user=customer_user, channel=channel_USD)\n    second_customer = User.objects.create(email=\"second_example@example.com\")\n    with freeze_time(\"2012-01-14 11:00:00\"):\n        Order.objects.create(user=second_customer, channel=channel_USD)\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(users) == count\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"dateJoined\": {\"gte\": \"2019-04-18\"}}, 1),\n        ({\"dateJoined\": {\"lte\": \"2012-01-14\"}}, 1),\n        ({\"dateJoined\": {\"lte\": \"2012-01-14\", \"gte\": \"2012-01-13\"}}, 1),\n        ({\"dateJoined\": {\"gte\": \"2012-01-14\"}}, 2),\n        ({\"updatedAt\": {\"gte\": \"2012-01-14T10:59:00+00:00\"}}, 2),\n        ({\"updatedAt\": {\"gte\": \"2012-01-14T11:01:00+00:00\"}}, 1),\n        ({\"updatedAt\": {\"lte\": \"2012-01-14T12:00:00+00:00\"}}, 1),\n        ({\"updatedAt\": {\"lte\": \"2011-01-14T10:59:00+00:00\"}}, 0),\n        (\n            {\n                \"updatedAt\": {\n                    \"lte\": \"2012-01-14T12:00:00+00:00\",\n                    \"gte\": \"2012-01-14T10:00:00+00:00\",\n                }\n            },\n            1,\n        ),\n        ({\"updatedAt\": {\"gte\": \"2012-01-14T10:00:00+00:00\"}}, 2),\n    ],\n)\ndef test_query_customers_with_filter_date_joined_and_updated_at(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n):\n    with freeze_time(\"2012-01-14 11:00:00\"):\n        User.objects.create(email=\"second_example@example.com\")\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == count\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"numberOfOrders\": {\"gte\": 0, \"lte\": 1}}, 1),\n        ({\"numberOfOrders\": {\"gte\": 1, \"lte\": 3}}, 2),\n        ({\"numberOfOrders\": {\"gte\": 0}}, 2),\n        ({\"numberOfOrders\": {\"lte\": 3}}, 2),\n    ],\n)\ndef test_query_customers_with_filter_placed_orders_(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n    channel_USD,\n):\n    Order.objects.bulk_create(\n        [\n            Order(user=customer_user, channel=channel_USD),\n            Order(user=customer_user, channel=channel_USD),\n            Order(user=customer_user, channel=channel_USD),\n        ]\n    )\n    second_customer = User.objects.create(email=\"second_example@example.com\")\n    with freeze_time(\"2012-01-14 11:00:00\"):\n        Order.objects.create(user=second_customer, channel=channel_USD)\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(users) == count\n\n\ndef test_query_customers_with_filter_metadata(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_user,\n    channel_USD,\n):\n    second_customer = User.objects.create(email=\"second_example@example.com\")\n    second_customer.store_value_in_metadata({\"metakey\": \"metavalue\"})\n    second_customer.save()\n\n    variables = {\"filter\": {\"metadata\": [{\"key\": \"metakey\", \"value\": \"metavalue\"}]}}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == 1\n    user = users[0]\n    _, user_id = graphene.Node.from_global_id(user[\"node\"][\"id\"])\n    assert second_customer.id == int(user_id)\n\n\ndef test_query_customers_search_without_duplications(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    permission_manage_orders,\n):\n    customer = User.objects.create(email=\"david@example.com\")\n    customer.addresses.create(first_name=\"David\")\n    customer.addresses.create(first_name=\"David\")\n    customer.search_document = prepare_user_search_document_value(customer)\n    customer.save(update_fields=[\"search_document\"])\n\n    variables = {\"filter\": {\"search\": \"David\"}}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == 1\n\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter,\n        variables,\n        permissions=[permission_manage_orders],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n    assert len(users) == 1\n\n\ndef test_query_customers_with_permission_manage_orders(\n    query_customer_with_filter,\n    customer_user,\n    staff_api_client,\n    permission_manage_orders,\n):\n    variables = {\"filter\": {}}\n\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter,\n        variables,\n        permissions=[permission_manage_orders],\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"totalCount\"]\n    assert users == 1\n\n\nQUERY_CUSTOMERS_WITH_SORT = \"\"\"\n    query ($sort_by: UserSortingInput!) {\n        customers(first:5, sortBy: $sort_by) {\n                edges{\n                    node{\n                        firstName\n                    }\n                }\n            }\n        }\n\"\"\"\n\n\n@pytest.mark.parametrize(\n    \"customer_sort, result_order\",\n    [\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"ASC\"}, [\"Joe\", \"John\", \"Leslie\"]),\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"John\", \"Joe\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"ASC\"}, [\"John\", \"Joe\", \"Leslie\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"Joe\", \"John\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"Joe\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"DESC\"}, [\"Joe\", \"Leslie\", \"John\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"Joe\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"DESC\"}, [\"Joe\", \"Leslie\", \"John\"]),\n        ({\"field\": \"CREATED_AT\", \"direction\": \"ASC\"}, [\"John\", \"Joe\", \"Leslie\"]),\n        ({\"field\": \"CREATED_AT\", \"direction\": \"DESC\"}, [\"Leslie\", \"Joe\", \"John\"]),\n        ({\"field\": \"LAST_MODIFIED_AT\", \"direction\": \"ASC\"}, [\"Leslie\", \"John\", \"Joe\"]),\n        ({\"field\": \"LAST_MODIFIED_AT\", \"direction\": \"DESC\"}, [\"Joe\", \"John\", \"Leslie\"]),\n    ],\n)\ndef test_query_customers_with_sort(\n    customer_sort, result_order, staff_api_client, permission_manage_users, channel_USD\n):\n    users = User.objects.bulk_create(\n        [\n            User(\n                first_name=\"John\",\n                last_name=\"Allen\",\n                email=\"allen@example.com\",\n                is_staff=False,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Joe\",\n                last_name=\"Doe\",\n                email=\"zordon01@example.com\",\n                is_staff=False,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Leslie\",\n                last_name=\"Wade\",\n                email=\"leslie@example.com\",\n                is_staff=False,\n                is_active=True,\n            ),\n        ]\n    )\n\n    users[2].save()\n    users[0].save()\n    users[1].save()\n\n    Order.objects.create(\n        user=User.objects.get(email=\"zordon01@example.com\"), channel=channel_USD\n    )\n\n    variables = {\"sort_by\": customer_sort}\n    staff_api_client.user.user_permissions.add(permission_manage_users)\n    response = staff_api_client.post_graphql(QUERY_CUSTOMERS_WITH_SORT, variables)\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    for order, user_first_name in enumerate(result_order):\n        assert users[order][\"node\"][\"firstName\"] == user_first_name\n\n\n@pytest.mark.parametrize(\n    \"customer_filter, count\",\n    [\n        ({\"search\": \"mirumee.com\"}, 2),\n        ({\"search\": \"Alice\"}, 1),\n        ({\"search\": \"Kowalski\"}, 1),\n        ({\"search\": \"John\"}, 1),  # first_name\n        ({\"search\": \"Doe\"}, 1),  # last_name\n        ({\"search\": \"wroc\"}, 1),  # city\n        ({\"search\": \"pl\"}, 1),  # country\n        ({\"search\": \"+48713988102\"}, 1),\n        ({\"search\": \"alice Kowalski\"}, 1),\n        ({\"search\": \"kowalski alice\"}, 1),\n        ({\"search\": \"John doe\"}, 1),\n        ({\"search\": \"Alice Doe\"}, 0),\n    ],\n)\ndef test_query_customer_members_with_filter_search(\n    customer_filter,\n    count,\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    address,\n    staff_user,\n):\n    users = User.objects.bulk_create(\n        [\n            User(\n                email=\"second@mirumee.com\",\n                first_name=\"Alice\",\n                last_name=\"Kowalski\",\n                is_active=False,\n            ),\n            User(\n                email=\"third@mirumee.com\",\n                is_active=True,\n            ),\n        ]\n    )\n    users[1].addresses.set([address])\n\n    for user in users:\n        user.search_document = prepare_user_search_document_value(user)\n    User.objects.bulk_update(users, [\"search_document\"])\n\n    variables = {\"filter\": customer_filter}\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(users) == count\n\n\ndef test_query_customers_with_filter_by_one_id(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    search_user = customer_users[0]\n\n    variables = {\n        \"filter\": {\n            \"ids\": [graphene.Node.to_global_id(\"User\", search_user.pk)],\n        }\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_user = content[\"data\"][\"customers\"][\"edges\"][0]\n    _, id = graphene.Node.from_global_id(result_user[\"node\"][\"id\"])\n    assert id == str(search_user.pk)\n\n\ndef test_query_customers_with_filter_by_multiple_ids(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    search_users = [customer_users[0], customer_users[1]]\n    search_users_ids = [\n        graphene.Node.to_global_id(\"User\", user.pk) for user in search_users\n    ]\n\n    variables = {\"filter\": {\"ids\": search_users_ids}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_users = content[\"data\"][\"customers\"][\"edges\"]\n    expected_ids = [str(user.pk) for user in customer_users]\n\n    assert len(result_users) == len(search_users)\n    for result_user in result_users:\n        _, id = graphene.Node.from_global_id(result_user[\"node\"][\"id\"])\n        assert id in expected_ids\n\n\ndef test_query_customers_with_filter_by_empty_list(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    variables = {\"filter\": {\"ids\": []}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_users = content[\"data\"][\"customers\"][\"edges\"]\n    expected_ids = [str(user.pk) for user in customer_users]\n\n    assert len(result_users) == len(customer_users)\n    for result_user in result_users:\n        _, id = graphene.Node.from_global_id(result_user[\"node\"][\"id\"])\n        assert id in expected_ids\n\n\ndef test_query_customers_with_filter_by_not_existing_id(\n    query_customer_with_filter,\n    staff_api_client,\n    permission_manage_users,\n    customer_users,\n):\n    # given\n    search_pk = max([user.pk for user in customer_users]) + 1\n    search_id = graphene.Node.to_global_id(\"User\", search_pk)\n    variables = {\"filter\": {\"ids\": [search_id]}}\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_customer_with_filter, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    result_users = content[\"data\"][\"customers\"][\"edges\"]\n\n    assert len(result_users) == 0\n\n\n@pytest.mark.parametrize(\n    \"staff_member_filter, count\",\n    [({\"status\": \"DEACTIVATED\"}, 1), ({\"status\": \"ACTIVE\"}, 2)],\n)\ndef test_query_staff_members_with_filter_status(\n    staff_member_filter,\n    count,\n    query_staff_users_with_filter,\n    staff_api_client,\n    permission_manage_staff,\n    staff_user,\n):\n    User.objects.bulk_create(\n        [\n            User(email=\"second@example.com\", is_staff=True, is_active=False),\n            User(email=\"third@example.com\", is_staff=True, is_active=True),\n        ]\n    )\n\n    variables = {\"filter\": staff_member_filter}\n    response = staff_api_client.post_graphql(\n        query_staff_users_with_filter, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n\n    assert len(users) == count\n\n\ndef test_query_staff_members_with_filter_by_ids(\n    query_staff_users_with_filter,\n    staff_api_client,\n    permission_manage_staff,\n    staff_user,\n):\n    # given\n    variables = {\n        \"filter\": {\n            \"ids\": [graphene.Node.to_global_id(\"User\", staff_user.pk)],\n        }\n    }\n\n    # when\n    response = staff_api_client.post_graphql(\n        query_staff_users_with_filter, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n\n    # then\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n    assert len(users) == 1\n\n\n@pytest.mark.parametrize(\n    \"staff_member_filter, count\",\n    [\n        ({\"search\": \"mirumee.com\"}, 2),\n        ({\"search\": \"alice\"}, 1),\n        ({\"search\": \"kowalski\"}, 1),\n        ({\"search\": \"John\"}, 1),  # first_name\n        ({\"search\": \"Doe\"}, 1),  # last_name\n        ({\"search\": \"irv\"}, 1),  # city\n        ({\"search\": \"us\"}, 1),  # country\n        ({\"search\": \"Alice Kowalski\"}, 1),\n        ({\"search\": \"Kowalski Alice\"}, 1),\n        ({\"search\": \"john doe\"}, 1),\n        ({\"search\": \"Alice Doe\"}, 0),\n    ],\n)\ndef test_query_staff_members_with_filter_search(\n    staff_member_filter,\n    count,\n    query_staff_users_with_filter,\n    staff_api_client,\n    permission_manage_staff,\n    address_usa,\n    staff_user,\n):\n    users = User.objects.bulk_create(\n        [\n            User(\n                email=\"second@mirumee.com\",\n                first_name=\"Alice\",\n                last_name=\"Kowalski\",\n                is_staff=True,\n                is_active=False,\n            ),\n            User(\n                email=\"third@mirumee.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n            User(\n                email=\"customer@mirumee.com\",\n                first_name=\"Alice\",\n                last_name=\"Kowalski\",\n                is_staff=False,\n                is_active=True,\n            ),\n        ]\n    )\n    users[1].addresses.set([address_usa])\n    for user in users:\n        user.search_document = prepare_user_search_document_value(user)\n    User.objects.bulk_update(users, [\"search_document\"])\n\n    variables = {\"filter\": staff_member_filter}\n    response = staff_api_client.post_graphql(\n        query_staff_users_with_filter, variables, permissions=[permission_manage_staff]\n    )\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n\n    assert len(users) == count\n\n\nQUERY_STAFF_USERS_WITH_SORT = \"\"\"\n    query ($sort_by: UserSortingInput!) {\n        staffUsers(first:5, sortBy: $sort_by) {\n                edges{\n                    node{\n                        firstName\n                    }\n                }\n            }\n        }\n\"\"\"\n\n\n@pytest.mark.parametrize(\n    \"customer_sort, result_order\",\n    [\n        # Empty string in result is first_name for staff_api_client.\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"ASC\"}, [\"\", \"Joe\", \"John\", \"Leslie\"]),\n        ({\"field\": \"FIRST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"John\", \"Joe\", \"\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"ASC\"}, [\"\", \"John\", \"Joe\", \"Leslie\"]),\n        ({\"field\": \"LAST_NAME\", \"direction\": \"DESC\"}, [\"Leslie\", \"Joe\", \"John\", \"\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"\", \"Joe\"]),\n        ({\"field\": \"EMAIL\", \"direction\": \"DESC\"}, [\"Joe\", \"\", \"Leslie\", \"John\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"ASC\"}, [\"John\", \"Leslie\", \"\", \"Joe\"]),\n        ({\"field\": \"ORDER_COUNT\", \"direction\": \"DESC\"}, [\"Joe\", \"\", \"Leslie\", \"John\"]),\n    ],\n)\ndef test_query_staff_members_with_sort(\n    customer_sort, result_order, staff_api_client, permission_manage_staff, channel_USD\n):\n    User.objects.bulk_create(\n        [\n            User(\n                first_name=\"John\",\n                last_name=\"Allen\",\n                email=\"allen@example.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Joe\",\n                last_name=\"Doe\",\n                email=\"zordon01@example.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n            User(\n                first_name=\"Leslie\",\n                last_name=\"Wade\",\n                email=\"leslie@example.com\",\n                is_staff=True,\n                is_active=True,\n            ),\n        ]\n    )\n    Order.objects.create(\n        user=User.objects.get(email=\"zordon01@example.com\"), channel=channel_USD\n    )\n    variables = {\"sort_by\": customer_sort}\n    staff_api_client.user.user_permissions.add(permission_manage_staff)\n    response = staff_api_client.post_graphql(QUERY_STAFF_USERS_WITH_SORT, variables)\n    content = get_graphql_content(response)\n    users = content[\"data\"][\"staffUsers\"][\"edges\"]\n\n    for order, user_first_name in enumerate(result_order):\n        assert users[order][\"node\"][\"firstName\"] == user_first_name\n\n\nUSER_CHANGE_ACTIVE_STATUS_MUTATION = \"\"\"\n    mutation userChangeActiveStatus($ids: [ID!]!, $is_active: Boolean!) {\n        userBulkSetActive(ids: $ids, isActive: $is_active) {\n            count\n            errors {\n                field\n                message\n            }\n        }\n    }\n    \"\"\"\n\n\ndef test_staff_bulk_set_active(\n    staff_api_client, user_list_not_active, permission_manage_users\n):\n    users = user_list_not_active\n    active_status = True\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"count\"] == users.count()\n    users = User.objects.filter(pk__in=[user.pk for user in users])\n    assert all(user.is_active for user in users)\n\n\ndef test_staff_bulk_set_not_active(\n    staff_api_client, user_list, permission_manage_users\n):\n    users = user_list\n    active_status = False\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"count\"] == len(users)\n    users = User.objects.filter(pk__in=[user.pk for user in users])\n    assert not any(user.is_active for user in users)\n\n\ndef test_change_active_status_for_superuser(\n    staff_api_client, superuser, permission_manage_users\n):\n    users = [superuser]\n    superuser_id = graphene.Node.to_global_id(\"User\", superuser.id)\n    active_status = False\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"errors\"][0][\"field\"] == superuser_id\n    assert (\n        data[\"errors\"][0][\"message\"] == \"Cannot activate or deactivate \"\n        \"superuser's account.\"\n    )\n\n\ndef test_change_active_status_for_himself(staff_api_client, permission_manage_users):\n    users = [staff_api_client.user]\n    user_id = graphene.Node.to_global_id(\"User\", staff_api_client.user.id)\n    active_status = False\n    variables = {\n        \"ids\": [graphene.Node.to_global_id(\"User\", user.id) for user in users],\n        \"is_active\": active_status,\n    }\n    response = staff_api_client.post_graphql(\n        USER_CHANGE_ACTIVE_STATUS_MUTATION,\n        variables,\n        permissions=[permission_manage_users],\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"userBulkSetActive\"]\n    assert data[\"errors\"][0][\"field\"] == user_id\n    assert (\n        data[\"errors\"][0][\"message\"] == \"Cannot activate or deactivate \"\n        \"your own account.\"\n    )\n\n\nADDRESS_QUERY = \"\"\"\nquery address($id: ID!) {\n    address(id: $id) {\n        postalCode\n        lastName\n        firstName\n        city\n        country {\n          code\n        }\n    }\n}\n\"\"\"\n\n\ndef test_address_query_as_owner(user_api_client, customer_user):\n    address = customer_user.addresses.first()\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address.pk)}\n    response = user_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"address\"]\n    assert data[\"country\"][\"code\"] == address.country.code\n\n\ndef test_address_query_as_not_owner(\n    user_api_client, customer_user, address_other_country\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = user_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"address\"]\n    assert not data\n\n\ndef test_address_query_as_app_with_permission(\n    app_api_client,\n    address_other_country,\n    permission_manage_users,\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = app_api_client.post_graphql(\n        ADDRESS_QUERY, variables, permissions=[permission_manage_users]\n    )\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"address\"]\n    assert data[\"country\"][\"code\"] == address_other_country.country.code\n\n\ndef test_address_query_as_app_without_permission(\n    app_api_client, app, address_other_country\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = app_api_client.post_graphql(ADDRESS_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_address_query_as_anonymous_user(api_client, address_other_country):\n    variables = {\"id\": graphene.Node.to_global_id(\"Address\", address_other_country.pk)}\n    response = api_client.post_graphql(ADDRESS_QUERY, variables)\n    assert_no_permission(response)\n\n\ndef test_address_query_invalid_id(\n    staff_api_client,\n    address_other_country,\n):\n    id = \"..afs\"\n    variables = {\"id\": id}\n    response = staff_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content_from_response(response)\n    assert len(content[\"errors\"]) == 1\n    assert content[\"errors\"][0][\"message\"] == f\"Couldn't resolve id: {id}.\"\n    assert content[\"data\"][\"address\"] is None\n\n\ndef test_address_query_with_invalid_object_type(\n    staff_api_client,\n    address_other_country,\n):\n    variables = {\"id\": graphene.Node.to_global_id(\"Order\", address_other_country.pk)}\n    response = staff_api_client.post_graphql(ADDRESS_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"address\"] is None\n\n\nREQUEST_EMAIL_CHANGE_QUERY = \"\"\"\nmutation requestEmailChange(\n    $password: String!, $new_email: String!, $redirect_url: String!, $channel:String\n) {\n    requestEmailChange(\n        password: $password,\n        newEmail: $new_email,\n        redirectUrl: $redirect_url,\n        channel: $channel\n    ) {\n        user {\n            email\n        }\n        errors {\n            code\n            message\n            field\n        }\n  }\n}\n\"\"\"\n\n\n@freeze_time(\"2018-05-31 12:00:01\")\n@patch(\"saleor.plugins.manager.PluginsManager.notify\")\ndef test_account_request_email_change_with_upper_case_email(\n    mocked_notify,\n    user_api_client,\n    customer_user,\n    site_settings,\n    channel_PLN,\n):\n    # given\n    new_email = \"NEW_EMAIL@example.com\"\n    redirect_url = \"https://www.example.com\"\n    variables = {\n        \"new_email\": new_email,\n        \"redirect_url\": redirect_url,\n        \"password\": \"password\",\n        \"channel\": channel_PLN.slug,\n    }\n    token_payload = {\n        \"old_email\": customer_user.email,\n        \"new_email\": new_email.lower(),\n        \"user_pk\": customer_user.pk,\n    }\n    token = create_token(token_payload, settings.JWT_TTL_REQUEST_EMAIL_CHANGE)\n\n    # when\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n\n    # then\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"errors\"]\n\n    params = urlencode({\"token\": token})\n    redirect_url = prepare_url(params, redirect_url)\n    expected_payload = {\n        \"user\": get_default_user_payload(customer_user),\n        \"recipient_email\": new_email.lower(),\n        \"token\": token,\n        \"redirect_url\": redirect_url,\n        \"old_email\": customer_user.email,\n        \"new_email\": new_email.lower(),\n        \"channel_slug\": channel_PLN.slug,\n        **get_site_context_payload(site_settings.site),\n    }\n\n    mocked_notify.assert_called_once_with(\n        NotifyEventType.ACCOUNT_CHANGE_EMAIL_REQUEST,\n        payload=expected_payload,\n        channel_slug=channel_PLN.slug,\n    )\n\n\ndef test_request_email_change(user_api_client, customer_user, channel_PLN):\n    variables = {\n        \"password\": \"password\",\n        \"new_email\": \"new_email@example.com\",\n        \"redirect_url\": \"http://www.example.com\",\n        \"channel\": channel_PLN.slug,\n    }\n\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert data[\"user\"][\"email\"] == customer_user.email\n\n\ndef test_request_email_change_to_existing_email(\n    user_api_client, customer_user, staff_user\n):\n    variables = {\n        \"password\": \"password\",\n        \"new_email\": staff_user.email,\n        \"redirect_url\": \"http://www.example.com\",\n    }\n\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"] == [\n        {\n            \"code\": \"UNIQUE\",\n            \"message\": \"Email is used by other user.\",\n            \"field\": \"newEmail\",\n        }\n    ]\n\n\ndef test_request_email_change_with_invalid_redirect_url(\n    user_api_client, customer_user, staff_user\n):\n    variables = {\n        \"password\": \"password\",\n        \"new_email\": \"new_email@example.com\",\n        \"redirect_url\": \"www.example.com\",\n    }\n\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"] == [\n        {\n            \"code\": \"INVALID\",\n            \"message\": \"Invalid URL. Please check if URL is in RFC 1808 format.\",\n            \"field\": \"redirectUrl\",\n        }\n    ]\n\n\ndef test_request_email_change_with_invalid_password(user_api_client, customer_user):\n    variables = {\n        \"password\": \"spanishinquisition\",\n        \"new_email\": \"new_email@example.com\",\n        \"redirect_url\": \"http://www.example.com\",\n    }\n    response = user_api_client.post_graphql(REQUEST_EMAIL_CHANGE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"requestEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"][0][\"code\"] == AccountErrorCode.INVALID_CREDENTIALS.name\n    assert data[\"errors\"][0][\"field\"] == \"password\"\n\n\nEMAIL_UPDATE_QUERY = \"\"\"\nmutation emailUpdate($token: String!, $channel: String) {\n    confirmEmailChange(token: $token, channel: $channel){\n        user {\n            email\n        }\n        errors {\n            code\n            message\n            field\n        }\n  }\n}\n\"\"\"\n\n\n@patch(\"saleor.graphql.account.mutations.account.match_orders_with_new_user\")\n@patch(\"saleor.graphql.account.mutations.account.assign_user_gift_cards\")\ndef test_email_update(\n    assign_gift_cards_mock,\n    assign_orders_mock,\n    user_api_client,\n    customer_user,\n    channel_PLN,\n):\n    new_email = \"new_email@example.com\"\n    payload = {\n        \"old_email\": customer_user.email,\n        \"new_email\": new_email,\n        \"user_pk\": customer_user.pk,\n    }\n    user = user_api_client.user\n\n    token = create_token(payload, timedelta(hours=1))\n    variables = {\"token\": token, \"channel\": channel_PLN.slug}\n\n    response = user_api_client.post_graphql(EMAIL_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"confirmEmailChange\"]\n    assert data[\"user\"][\"email\"] == new_email\n    user.refresh_from_db()\n    assert new_email in user.search_document\n    assign_gift_cards_mock.assert_called_once_with(customer_user)\n    assign_orders_mock.assert_called_once_with(customer_user)\n\n\ndef test_email_update_to_existing_email(user_api_client, customer_user, staff_user):\n    payload = {\n        \"old_email\": customer_user.email,\n        \"new_email\": staff_user.email,\n        \"user_pk\": customer_user.pk,\n    }\n    token = create_token(payload, timedelta(hours=1))\n    variables = {\"token\": token}\n\n    response = user_api_client.post_graphql(EMAIL_UPDATE_QUERY, variables)\n    content = get_graphql_content(response)\n    data = content[\"data\"][\"confirmEmailChange\"]\n    assert not data[\"user\"]\n    assert data[\"errors\"] == [\n        {\n            \"code\": \"UNIQUE\",\n            \"message\": \"Email is used by other user.\",\n            \"field\": \"newEmail\",\n        }\n    ]\n\n\nUSER_FEDERATION_QUERY = \"\"\"\n  query GetUserInFederation($representations: [_Any]) {\n    _entities(representations: $representations) {\n      __typename\n      ... on User {\n        id\n        email\n      }\n    }\n  }\n\"\"\"\n\n\ndef test_staff_query_user_by_id_for_federation(\n    staff_api_client, customer_user, permission_manage_users\n):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_staff_query_user_by_email_for_federation(\n    staff_api_client, customer_user, permission_manage_users\n):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_staff_query_user_by_id_without_permission_for_federation(\n    staff_api_client, customer_user\n):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(USER_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_staff_query_user_by_email_without_permission_for_federation(\n    staff_api_client, customer_user\n):\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(USER_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_customer_query_self_by_id_for_federation(user_api_client, customer_user):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_customer_query_self_by_email_for_federation(user_api_client, customer_user):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"User\",\n            \"id\": customer_user_id,\n            \"email\": customer_user.email,\n        }\n    ]\n\n\ndef test_customer_query_user_by_id_for_federation(\n    user_api_client, customer_user, staff_user\n):\n    staff_user_id = graphene.Node.to_global_id(\"User\", staff_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": staff_user_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_customer_query_user_by_email_for_federation(\n    user_api_client, customer_user, staff_user\n):\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": staff_user.email,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_user_by_id_for_federation(api_client, customer_user):\n    customer_user_id = graphene.Node.to_global_id(\"User\", customer_user.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"id\": customer_user_id,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_user_by_email_for_federation(api_client, customer_user):\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"User\",\n                \"email\": customer_user.email,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(\n        USER_FEDERATION_QUERY,\n        variables,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\nADDRESS_FEDERATION_QUERY = \"\"\"\n  query GetUserInFederation($representations: [_Any]) {\n    _entities(representations: $representations) {\n      __typename\n      ... on Address {\n        id\n        city\n      }\n    }\n  }\n\"\"\"\n\n\ndef test_customer_query_address_federation(user_api_client, customer_user, address):\n    customer_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Address\",\n            \"id\": address_id,\n            \"city\": address.city,\n        }\n    ]\n\n\ndef test_customer_query_other_user_address_federation(\n    user_api_client, staff_user, customer_user, address\n):\n    staff_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_staff_query_other_user_address_federation(\n    staff_api_client, customer_user, address\n):\n    customer_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_staff_query_other_user_address_with_permission_federation(\n    staff_api_client, customer_user, address, permission_manage_users\n):\n    customer_user.addresses.add(address)\n\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        ADDRESS_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_app_query_address_federation(app_api_client, address, permission_manage_users):\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(\n        ADDRESS_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_users],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Address\",\n            \"id\": address_id,\n            \"city\": address.city,\n        }\n    ]\n\n\ndef test_app_no_permission_query_address_federation(app_api_client, address):\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_address_federation(api_client, address):\n    address_id = graphene.Node.to_global_id(\"Address\", address.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Address\",\n                \"id\": address_id,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(ADDRESS_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\nGROUP_FEDERATION_QUERY = \"\"\"\n  query GetGroupInFederation($representations: [_Any]) {\n    _entities(representations: $representations) {\n      __typename\n      ... on Group {\n        id\n        name\n      }\n    }\n  }\n\"\"\"\n\n\ndef test_staff_query_group_federation(staff_api_client, permission_manage_staff):\n    group = Group.objects.create(name=\"empty group\")\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = staff_api_client.post_graphql(\n        GROUP_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_staff],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Group\",\n            \"id\": group_id,\n            \"name\": group.name,\n        }\n    ]\n\n\ndef test_app_query_group_federation(app_api_client, permission_manage_staff):\n    group = Group.objects.create(name=\"empty group\")\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(\n        GROUP_FEDERATION_QUERY,\n        variables,\n        permissions=[permission_manage_staff],\n        check_no_permissions=False,\n    )\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [\n        {\n            \"__typename\": \"Group\",\n            \"id\": group_id,\n            \"name\": group.name,\n        }\n    ]\n\n\ndef test_app_no_permission_query_group_federation(app_api_client):\n    group = Group.objects.create(name=\"empty group\")\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = app_api_client.post_graphql(GROUP_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_client_query_group_federation(user_api_client):\n    group = Group.objects.create(name=\"empty group\")\n\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = user_api_client.post_graphql(GROUP_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n\n\ndef test_unauthenticated_query_group_federation(api_client):\n    group = Group.objects.create(name=\"empty group\")\n\n    group_id = graphene.Node.to_global_id(\"Group\", group.pk)\n    variables = {\n        \"representations\": [\n            {\n                \"__typename\": \"Group\",\n                \"id\": group_id,\n            },\n        ],\n    }\n\n    response = api_client.post_graphql(GROUP_FEDERATION_QUERY, variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"_entities\"] == [None]\n", "import os.path\nimport secrets\nfrom enum import Enum\nfrom itertools import chain\nfrom typing import (\n    Any,\n    Collection,\n    Dict,\n    Iterable,\n    List,\n    Optional,\n    Tuple,\n    Type,\n    TypeVar,\n    Union,\n    cast,\n    overload,\n)\nfrom uuid import UUID\n\nimport graphene\nimport jwt\nfrom django.core.exceptions import (\n    NON_FIELD_ERRORS,\n    ImproperlyConfigured,\n    ValidationError,\n)\nfrom django.core.files.storage import default_storage\nfrom django.core.files.uploadedfile import UploadedFile\nfrom django.db.models import Model, Q, QuerySet\nfrom django.db.models.fields.files import FileField\nfrom graphene import ObjectType\nfrom graphene.types.mutation import MutationOptions\nfrom graphql.error import GraphQLError\n\nfrom ...account.error_codes import AccountErrorCode\nfrom ...core.error_codes import MetadataErrorCode\nfrom ...core.exceptions import PermissionDenied\nfrom ...core.utils.events import call_event\nfrom ...permission.auth_filters import AuthorizationFilters\nfrom ...permission.enums import BasePermissionEnum\nfrom ...permission.utils import (\n    message_one_of_permissions_required,\n    one_of_permissions_or_auth_filter_required,\n)\nfrom ..core import ResolveInfo\nfrom ..core.utils import ext_ref_to_global_id_or_error\nfrom ..core.validators import validate_one_of_args_is_in_mutation\nfrom ..meta.permissions import PRIVATE_META_PERMISSION_MAP, PUBLIC_META_PERMISSION_MAP\nfrom ..payment.utils import metadata_contains_empty_key\nfrom ..plugins.dataloaders import get_plugin_manager_promise\nfrom ..utils import get_nodes, resolve_global_ids_to_primary_keys\nfrom .context import disallow_replica_in_context, setup_context_user\nfrom .descriptions import DEPRECATED_IN_3X_FIELD\nfrom .types import (\n    TYPES_WITH_DOUBLE_ID_AVAILABLE,\n    File,\n    ModelObjectType,\n    NonNullList,\n    Upload,\n    UploadError,\n)\nfrom .utils import from_global_id_or_error, snake_to_camel_case\nfrom .utils.error_codes import get_error_code_from_error\n\n\ndef get_model_name(model):\n    \"\"\"Return name of the model with first letter lowercase.\"\"\"\n    model_name = model.__name__\n    return model_name[:1].lower() + model_name[1:]\n\n\ndef get_error_fields(error_type_class, error_type_field, deprecation_reason=None):\n    error_field = graphene.Field(\n        NonNullList(\n            error_type_class,\n            description=\"List of errors that occurred executing the mutation.\",\n        ),\n        default_value=[],\n        required=True,\n    )\n    if deprecation_reason is not None:\n        error_field.deprecation_reason = deprecation_reason\n    return {error_type_field: error_field}\n\n\ndef validation_error_to_error_type(\n    validation_error: ValidationError, error_type_class\n) -> list:\n    \"\"\"Convert a ValidationError into a list of Error types.\"\"\"\n    err_list = []\n    error_class_fields = set(error_type_class._meta.fields.keys())\n    if hasattr(validation_error, \"error_dict\"):\n        # convert field errors\n        for field_label, field_errors in validation_error.error_dict.items():\n            field = (\n                None\n                if field_label == NON_FIELD_ERRORS\n                else snake_to_camel_case(field_label)\n            )\n            for err in field_errors:\n                error = error_type_class(\n                    field=field,\n                    message=err.messages[0],\n                    code=get_error_code_from_error(err),\n                )\n                attach_error_params(error, err.params, error_class_fields)\n                err_list.append(error)\n    else:\n        # convert non-field errors\n        for err in validation_error.error_list:\n            error = error_type_class(\n                message=err.messages[0],\n                code=get_error_code_from_error(err),\n            )\n            attach_error_params(error, err.params, error_class_fields)\n            err_list.append(error)\n    return err_list\n\n\ndef attach_error_params(error, params: Optional[dict], error_class_fields: set):\n    if not params:\n        return {}\n    # If some of the params key overlap with error class fields\n    # attach param value to the error\n    error_fields_in_params = set(params.keys()) & error_class_fields\n    for error_field in error_fields_in_params:\n        setattr(error, error_field, params[error_field])\n\n\nclass ModelMutationOptions(MutationOptions):\n    exclude = None\n    model = None\n    object_type = None\n    return_field_name = None\n\n\nMT = TypeVar(\"MT\", bound=Model)\n\n\nclass BaseMutation(graphene.Mutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def _validate_permissions(cls, permissions):\n        if not permissions:\n            return\n        if not isinstance(permissions, tuple):\n            raise ImproperlyConfigured(\n                f\"Permissions should be a tuple in Meta class: {permissions}\"\n            )\n        for p in permissions:\n            if not isinstance(p, Enum):\n                raise ImproperlyConfigured(f\"Permission should be an enum: {p}.\")\n\n    @classmethod\n    def __init_subclass_with_meta__(\n        cls,\n        auto_permission_message=True,\n        description=None,\n        permissions: Optional[Collection[BasePermissionEnum]] = None,\n        _meta=None,\n        error_type_class=None,\n        error_type_field=None,\n        errors_mapping=None,\n        support_meta_field=False,\n        support_private_meta_field=False,\n        **options,\n    ):\n        if not _meta:\n            _meta = MutationOptions(cls)\n\n        if not description:\n            raise ImproperlyConfigured(\"No description provided in Meta\")\n\n        if not error_type_class:\n            raise ImproperlyConfigured(\"No error_type_class provided in Meta.\")\n\n        cls._validate_permissions(permissions)\n\n        _meta.auto_permission_message = auto_permission_message\n        _meta.permissions = permissions\n        _meta.error_type_class = error_type_class\n        _meta.error_type_field = error_type_field\n        _meta.errors_mapping = errors_mapping\n        _meta.support_meta_field = support_meta_field\n        _meta.support_private_meta_field = support_private_meta_field\n\n        if permissions and auto_permission_message:\n            permissions_msg = message_one_of_permissions_required(permissions)\n            description = f\"{description} {permissions_msg}\"\n\n        super().__init_subclass_with_meta__(\n            description=description, _meta=_meta, **options\n        )\n\n        if error_type_field:\n            deprecated_msg = f\"{DEPRECATED_IN_3X_FIELD} Use `errors` field instead.\"\n            cls._meta.fields.update(\n                get_error_fields(\n                    error_type_class,\n                    error_type_field,\n                    deprecated_msg,\n                )\n            )\n        cls._meta.fields.update(get_error_fields(error_type_class, \"errors\"))\n\n    @classmethod\n    def _update_mutation_arguments_and_fields(cls, arguments, fields):\n        cls._meta.arguments.update(arguments)\n        cls._meta.fields.update(fields)\n\n    @classmethod\n    def _get_node_by_pk(\n        cls,\n        info: ResolveInfo,\n        graphene_type: Type[ModelObjectType[MT]],\n        pk: Union[int, str],\n        qs=None,\n    ) -> Optional[MT]:\n        \"\"\"Attempt to resolve a node from the given internal ID.\n\n        Whether by using the provided query set object or by calling type's get_node().\n        \"\"\"\n        if qs is not None:\n            lookup = Q(pk=pk)\n            if pk is not None and str(graphene_type) in TYPES_WITH_DOUBLE_ID_AVAILABLE:\n                # This is temporary solution that allows fetching objects with use of\n                # new and old id.\n                try:\n                    UUID(str(pk))\n                except ValueError:\n                    lookup = (\n                        Q(number=pk) & Q(use_old_id=True)\n                        if str(graphene_type) == \"Order\"\n                        else Q(old_id=pk) & Q(old_id__isnull=False)\n                    )\n            return qs.filter(lookup).first()\n        get_node = getattr(graphene_type, \"get_node\", None)\n        if get_node:\n            return get_node(info, pk)\n        return None\n\n    @classmethod\n    def get_global_id_or_error(\n        cls,\n        id: str,\n        only_type: Union[ObjectType, str, None] = None,\n        field: str = \"id\",\n    ):\n        try:\n            _object_type, pk = from_global_id_or_error(id, only_type, raise_error=True)\n        except GraphQLError as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        return pk\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: str,\n        *,\n        field: str = \"id\",\n        only_type: Type[ModelObjectType[MT]],\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> MT:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: Optional[str],\n        *,\n        field: str = \"id\",\n        only_type: Type[ModelObjectType[MT]],\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> Optional[MT]:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: str,\n        *,\n        field: str = \"id\",\n        only_type: None,\n        qs: QuerySet[MT],\n        code: str = \"not_found\",\n    ) -> MT:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: str,\n        *,\n        field: str = \"id\",\n        only_type: None = None,\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> Model:\n        ...\n\n    @overload\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: Optional[str],\n        *,\n        field: str = \"id\",\n        only_type: Any = None,\n        qs: Any = None,\n        code: str = \"not_found\",\n    ) -> Optional[Model]:\n        ...\n\n    @classmethod\n    def get_node_or_error(\n        cls,\n        info: ResolveInfo,\n        node_id: Optional[str],\n        *,\n        field: str = \"id\",\n        only_type: Optional[Type[ObjectType]] = None,\n        qs: Optional[QuerySet] = None,\n        code: str = \"not_found\",\n    ) -> Optional[Model]:\n        if not node_id:\n            # FIXME: this is weird behavior and we should drop it\n            # the function now has three possible outcomes:\n            # * Null\n            # * the object you asked for\n            # * ValidationError\n            return None\n\n        try:\n            object_type, pk = from_global_id_or_error(\n                node_id, only_type, raise_error=True\n            )\n\n            if isinstance(object_type, str):\n                object_type = info.schema.get_type(object_type).graphene_type\n\n            node = cls._get_node_by_pk(info, graphene_type=object_type, pk=pk, qs=qs)\n        except (AssertionError, GraphQLError) as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        else:\n            if node is None:\n                raise ValidationError(\n                    {\n                        field: ValidationError(\n                            f\"Couldn't resolve to a node: {node_id}\", code=code\n                        )\n                    }\n                )\n        return node\n\n    @classmethod\n    def get_global_ids_or_error(\n        cls,\n        ids: Iterable[str],\n        only_type: Union[ObjectType, str, None] = None,\n        field: str = \"ids\",\n    ):\n        try:\n            _nodes_type, pks = resolve_global_ids_to_primary_keys(\n                ids, only_type, raise_error=True\n            )\n        except GraphQLError as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        return pks\n\n    @overload\n    @classmethod\n    def get_nodes_or_error(\n        cls, ids, field, only_type: Type[ModelObjectType[MT]], qs=None, schema=None\n    ) -> List[MT]:\n        ...\n\n    @overload\n    @classmethod\n    def get_nodes_or_error(\n        cls, ids, field, only_type: Optional[ObjectType] = None, qs=None, schema=None\n    ) -> List[Model]:\n        ...\n\n    @classmethod\n    def get_nodes_or_error(cls, ids, field, only_type=None, qs=None, schema=None):\n        try:\n            instances = get_nodes(ids, only_type, qs=qs, schema=schema)\n        except GraphQLError as e:\n            raise ValidationError(\n                {field: ValidationError(str(e), code=\"graphql_error\")}\n            )\n        return instances\n\n    @staticmethod\n    def remap_error_fields(validation_error, field_map) -> None:\n        \"\"\"Rename validation_error fields according to provided field_map.\n\n        Skips renaming fields from field_map that are not on validation_error.\n        \"\"\"\n        for old_field, new_field in field_map.items():\n            try:\n                validation_error.error_dict[\n                    new_field\n                ] = validation_error.error_dict.pop(old_field)\n            except KeyError:\n                pass\n\n    @classmethod\n    def clean_instance(cls, info: ResolveInfo, instance, /) -> None:\n        \"\"\"Clean the instance that was created using the input data.\n\n        Once an instance is created, this method runs `full_clean()` to perform\n        model validation.\n        \"\"\"\n        try:\n            instance.full_clean()\n        except ValidationError as error:\n            if hasattr(cls._meta, \"exclude\"):\n                # Ignore validation errors for fields that are specified as\n                # excluded.\n                new_error_dict = {}\n                for field, errors in error.error_dict.items():\n                    if field not in cls._meta.exclude:\n                        new_error_dict[field] = errors\n                error.error_dict = new_error_dict\n\n            if cls._meta.errors_mapping:\n                cls.remap_error_fields(error, cls._meta.errors_mapping)\n\n            if error.error_dict:\n                raise error\n\n    @classmethod\n    def construct_instance(cls, instance, cleaned_data):\n        \"\"\"Fill instance fields with cleaned data.\n\n        The `instance` argument is either an empty instance of a already\n        existing one which was fetched from the database. `cleaned_data` is\n        data to be set in instance fields. Returns `instance` with filled\n        fields, but not saved to the database.\n        \"\"\"\n        from django.db import models\n\n        opts = instance._meta\n\n        for f in opts.fields:\n            if any(\n                [\n                    not f.editable,\n                    isinstance(f, models.AutoField),\n                    f.name not in cleaned_data,\n                ]\n            ):\n                continue\n            data = cleaned_data[f.name]\n            if data is None:\n                # We want to reset the file field value when None was passed\n                # in the input, but `FileField.save_form_data` ignores None\n                # values. In that case we manually pass False which clears\n                # the file.\n                if isinstance(f, FileField):\n                    data = False\n                if not f.null:\n                    data = f._get_default()\n            f.save_form_data(instance, data)\n        return instance\n\n    @classmethod\n    def check_permissions(cls, context, permissions=None, **data):\n        \"\"\"Determine whether user or app has rights to perform this mutation.\n\n        Default implementation assumes that account is allowed to perform any\n        mutation. By overriding this method or defining required permissions\n        in the meta-class, you can restrict access to it.\n\n        The `context` parameter is the Context instance associated with the request.\n        \"\"\"\n        all_permissions = permissions or cls._meta.permissions\n        if not all_permissions:\n            return True\n\n        return one_of_permissions_or_auth_filter_required(context, all_permissions)\n\n    @classmethod\n    def mutate(cls, root, info: ResolveInfo, **data):\n        disallow_replica_in_context(info.context)\n        try:\n            setup_context_user(info.context)\n        except jwt.InvalidTokenError:\n            return cls.handle_errors(\n                ValidationError(\n                    \"Invalid token\", code=AccountErrorCode.JWT_INVALID_TOKEN.value\n                )\n            )\n\n        if not cls.check_permissions(info.context, data=data):\n            raise PermissionDenied(permissions=cls._meta.permissions)\n        manager = get_plugin_manager_promise(info.context).get()\n        result = manager.perform_mutation(\n            mutation_cls=cls, root=root, info=info, data=data\n        )\n        if result is not None:\n            return result\n\n        try:\n            response = cls.perform_mutation(root, info, **data)\n            if response.errors is None:\n                response.errors = []\n            return response\n        except ValidationError as e:\n            return cls.handle_errors(e)\n\n    @classmethod\n    def perform_mutation(cls, _root, _info: ResolveInfo, /):\n        raise NotImplementedError()\n\n    @classmethod\n    def handle_errors(cls, error: ValidationError, **extra):\n        error_list = validation_error_to_error_type(error, cls._meta.error_type_class)\n        return cls.handle_typed_errors(error_list, **extra)\n\n    @classmethod\n    def handle_typed_errors(cls, errors: list, **extra):\n        \"\"\"Return class instance with errors.\"\"\"\n        if cls._meta.error_type_field is not None:\n            extra.update({cls._meta.error_type_field: errors})\n        return cls(errors=errors, **extra)\n\n    @staticmethod\n    def call_event(func_obj, *func_args):\n        return call_event(func_obj, *func_args)\n\n    @classmethod\n    def update_metadata(cls, instance, meta_data_list: List, is_private: bool = False):\n        if is_private:\n            instance.store_value_in_private_metadata(\n                {data.key: data.value for data in meta_data_list}\n            )\n        else:\n            instance.store_value_in_metadata(\n                {data.key: data.value for data in meta_data_list}\n            )\n\n    @classmethod\n    def validate_metadata_keys(cls, metadata_list: List[dict]):\n        if metadata_contains_empty_key(metadata_list):\n            raise ValidationError(\n                {\n                    \"input\": ValidationError(\n                        \"Metadata key cannot be empty.\",\n                        code=MetadataErrorCode.REQUIRED.value,\n                    )\n                }\n            )\n\n    @classmethod\n    def validate_and_update_metadata(\n        cls, instance, metadata_list, private_metadata_list\n    ):\n        if cls._meta.support_meta_field and metadata_list is not None:\n            cls.validate_metadata_keys(metadata_list)\n            cls.update_metadata(instance, metadata_list)\n        if cls._meta.support_private_meta_field and private_metadata_list is not None:\n            cls.validate_metadata_keys(private_metadata_list)\n            cls.update_metadata(instance, private_metadata_list, is_private=True)\n\n    @classmethod\n    def check_metadata_permissions(cls, info: ResolveInfo, object_id, private=False):\n        type_name, db_id = graphene.Node.from_global_id(object_id)\n\n        if private:\n            meta_permission = PRIVATE_META_PERMISSION_MAP.get(type_name)\n        else:\n            meta_permission = PUBLIC_META_PERMISSION_MAP.get(type_name)\n\n        if not meta_permission:\n            raise NotImplementedError(\n                f\"Couldn't resolve permission to item type: {type_name}. \"\n            )\n\n\ndef is_list_of_ids(field) -> bool:\n    if isinstance(field.type, graphene.List):\n        of_type = field.type.of_type\n        if isinstance(of_type, graphene.NonNull):\n            of_type = of_type.of_type\n        return of_type == graphene.ID\n    return False\n\n\ndef is_id_field(field) -> bool:\n    return (\n        field.type == graphene.ID\n        or isinstance(field.type, graphene.NonNull)\n        and field.type.of_type == graphene.ID\n    )\n\n\ndef is_upload_field(field) -> bool:\n    if hasattr(field.type, \"of_type\"):\n        return field.type.of_type == Upload\n    return field.type == Upload\n\n\nclass ModelMutation(BaseMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def __init_subclass_with_meta__(\n        cls,\n        arguments=None,\n        model=None,\n        exclude=None,\n        return_field_name=None,\n        object_type=None,\n        _meta=None,\n        **options,\n    ):\n        if not model:\n            raise ImproperlyConfigured(\"model is required for ModelMutation\")\n        if not _meta:\n            _meta = ModelMutationOptions(cls)\n\n        if exclude is None:\n            exclude = []\n\n        if not return_field_name:\n            return_field_name = get_model_name(model)\n        if arguments is None:\n            arguments = {}\n\n        _meta.model = model\n        _meta.object_type = object_type\n        _meta.return_field_name = return_field_name\n        _meta.exclude = exclude\n        super().__init_subclass_with_meta__(_meta=_meta, **options)\n\n        model_type = cls.get_type_for_model()\n        if not model_type:\n            raise ImproperlyConfigured(\n                f\"GraphQL type for model {cls._meta.model.__name__} could not be \"\n                f\"resolved for {cls.__name__}\"\n            )\n        fields = {return_field_name: graphene.Field(model_type)}\n\n        cls._update_mutation_arguments_and_fields(arguments=arguments, fields=fields)\n\n    @classmethod\n    def clean_input(cls, info: ResolveInfo, instance, data, *, input_cls=None):\n        \"\"\"Clean input data received from mutation arguments.\n\n        Fields containing IDs or lists of IDs are automatically resolved into\n        model instances. `instance` argument is the model instance the mutation\n        is operating on (before setting the input data). `input` is raw input\n        data the mutation receives.\n\n        Override this method to provide custom transformations of incoming\n        data.\n        \"\"\"\n\n        if not input_cls:\n            input_cls = getattr(cls.Arguments, \"input\")\n        cleaned_input = {}\n\n        for field_name, field_item in input_cls._meta.fields.items():\n            if field_name in data:\n                value = data[field_name]\n\n                # handle list of IDs field\n                if value is not None and is_list_of_ids(field_item):\n                    instances = (\n                        cls.get_nodes_or_error(value, field_name, schema=info.schema)\n                        if value\n                        else []\n                    )\n                    cleaned_input[field_name] = instances\n\n                # handle ID field\n                elif value is not None and is_id_field(field_item):\n                    instance = cls.get_node_or_error(info, value, field=field_name)\n                    cleaned_input[field_name] = instance\n\n                # handle uploaded files\n                elif value is not None and is_upload_field(field_item):\n                    value = info.context.FILES.get(value)\n                    cleaned_input[field_name] = value\n\n                # handle other fields\n                else:\n                    cleaned_input[field_name] = value\n        return cleaned_input\n\n    @classmethod\n    def _save_m2m(cls, _info: ResolveInfo, instance, cleaned_data):\n        opts = instance._meta\n        for f in chain(opts.many_to_many, opts.private_fields):\n            if not hasattr(f, \"save_form_data\"):\n                continue\n            if f.name in cleaned_data and cleaned_data[f.name] is not None:\n                f.save_form_data(instance, cleaned_data[f.name])\n\n    @classmethod\n    def success_response(cls, instance):\n        \"\"\"Return a success response.\"\"\"\n        return cls(**{cls._meta.return_field_name: instance, \"errors\": []})\n\n    @classmethod\n    def save(cls, _info: ResolveInfo, instance, _cleaned_input, /):\n        instance.save()\n\n    @classmethod\n    def get_type_for_model(cls):\n        if not cls._meta.object_type:\n            raise ImproperlyConfigured(\n                f\"Either GraphQL type for model {cls._meta.model.__name__} needs to be \"\n                f\"specified on object_type option or {cls.__name__} needs to define \"\n                \"custom get_type_for_model() method.\"\n            )\n\n        return cls._meta.object_type\n\n    @classmethod\n    def get_instance(cls, info: ResolveInfo, **data):\n        \"\"\"Retrieve an instance from the supplied global id.\n\n        The expected graphene type can be lazy (str).\n        \"\"\"\n        object_id = data.get(\"id\")\n        qs = data.get(\"qs\")\n        if object_id:\n            model_type = cls.get_type_for_model()\n            instance = cls.get_node_or_error(\n                info, object_id, only_type=model_type, qs=qs\n            )\n        else:\n            instance = cls._meta.model()\n        return instance\n\n    @classmethod\n    def post_save_action(cls, info: ResolveInfo, instance, cleaned_input):\n        \"\"\"Perform an action after saving an object and its m2m.\"\"\"\n        pass\n\n    @classmethod\n    def perform_mutation(cls, _root, info: ResolveInfo, /, **data):\n        \"\"\"Perform model mutation.\n\n        Depending on the input data, `mutate` either creates a new instance or\n        updates an existing one. If `id` argument is present, it is assumed\n        that this is an \"update\" mutation. Otherwise, a new instance is\n        created based on the model associated with this mutation.\n        \"\"\"\n        instance = cls.get_instance(info, **data)\n        data = data.get(\"input\")\n        cleaned_input = cls.clean_input(info, instance, data)\n        metadata_list = cleaned_input.pop(\"metadata\", None)\n        private_metadata_list = cleaned_input.pop(\"private_metadata\", None)\n        instance = cls.construct_instance(instance, cleaned_input)\n\n        cls.validate_and_update_metadata(instance, metadata_list, private_metadata_list)\n        cls.clean_instance(info, instance)\n        cls.save(info, instance, cleaned_input)\n        cls._save_m2m(info, instance, cleaned_input)\n        cls.post_save_action(info, instance, cleaned_input)\n        return cls.success_response(instance)\n\n\nclass ModelWithExtRefMutation(ModelMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def get_object_id(cls, **data):\n        \"\"\"Resolve object id by given id or external reference.\"\"\"\n        object_id, ext_ref = data.get(\"id\"), data.get(\"external_reference\")\n        validate_one_of_args_is_in_mutation(\n            \"id\", object_id, \"external_reference\", ext_ref\n        )\n\n        if ext_ref and not object_id:\n            object_id = ext_ref_to_global_id_or_error(cls._meta.model, ext_ref)\n\n        return object_id\n\n    @classmethod\n    def get_instance(cls, info, **data):\n        \"\"\"Retrieve an instance from the supplied global id.\n\n        The expected graphene type can be lazy (str).\n        \"\"\"\n        object_id = cls.get_object_id(**data)\n        qs = data.get(\"qs\")\n        if object_id:\n            model_type = cls.get_type_for_model()\n            return cls.get_node_or_error(info, object_id, only_type=model_type, qs=qs)\n\n\nclass ModelDeleteMutation(ModelMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def clean_instance(cls, _info: ResolveInfo, _instance, /):\n        \"\"\"Perform additional logic before deleting the model instance.\n\n        Override this method to raise custom validation error and abort\n        the deletion process.\n        \"\"\"\n\n    @classmethod\n    def perform_mutation(  # type: ignore[override]\n        cls, _root, info: ResolveInfo, /, *, external_reference=None, id=None\n    ):\n        \"\"\"Perform a mutation that deletes a model instance.\"\"\"\n        instance = cls.get_instance(info, external_reference=external_reference, id=id)\n\n        cls.clean_instance(info, instance)\n        db_id = instance.id\n        instance.delete()\n\n        # After the instance is deleted, set its ID to the original database's\n        # ID so that the success response contains ID of the deleted object.\n        instance.id = db_id\n        cls.post_save_action(info, instance, None)\n        return cls.success_response(instance)\n\n\nclass BaseBulkMutation(BaseMutation):\n    count = graphene.Int(\n        required=True, description=\"Returns how many objects were affected.\"\n    )\n\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def __init_subclass_with_meta__(\n        cls, model=None, object_type=None, _meta=None, **kwargs\n    ):\n        if not model:\n            raise ImproperlyConfigured(\"model is required for bulk mutation\")\n        if not _meta:\n            _meta = ModelMutationOptions(cls)\n        _meta.model = model\n        _meta.object_type = object_type\n\n        super().__init_subclass_with_meta__(_meta=_meta, **kwargs)\n\n    @classmethod\n    def get_type_for_model(cls):\n        if not cls._meta.object_type:\n            raise ImproperlyConfigured(\n                f\"Either GraphQL type for model {cls._meta.model.__name__} needs to be \"\n                f\"specified on object_type option or {cls.__name__} needs to define \"\n                \"custom get_type_for_model() method.\"\n            )\n\n        return cls._meta.object_type\n\n    @classmethod\n    def clean_instance(cls, _info: ResolveInfo, _instance, /):\n        \"\"\"Perform additional logic.\n\n        Override this method to raise custom validation error and prevent\n        bulk action on the instance.\n        \"\"\"\n\n    @classmethod\n    def bulk_action(cls, _info: ResolveInfo, _queryset: QuerySet, /):\n        \"\"\"Implement action performed on queryset.\"\"\"\n        raise NotImplementedError\n\n    @classmethod\n    def perform_mutation(  # type: ignore[override]\n        cls, _root, info: ResolveInfo, /, *, ids, **data\n    ) -> Tuple[int, Optional[ValidationError]]:\n        \"\"\"Perform a mutation that deletes a list of model instances.\"\"\"\n        clean_instance_ids = []\n        errors_dict: Dict[str, List[ValidationError]] = {}\n        # Allow to pass empty list for dummy mutation\n        if not ids:\n            return 0, None\n        instance_model = cls._meta.model\n        model_type = cls.get_type_for_model()\n        if not model_type:\n            raise ImproperlyConfigured(\n                f\"GraphQL type for model {cls._meta.model.__name__} could not be \"\n                f\"resolved for {cls.__name__}\"\n            )\n\n        try:\n            instances = cls.get_nodes_or_error(\n                ids, \"id\", model_type, schema=info.schema\n            )\n        except ValidationError as error:\n            return 0, error\n        for instance, node_id in zip(instances, ids):\n            instance_errors = []\n\n            # catch individual validation errors to raise them later as\n            # a single error\n            try:\n                cls.clean_instance(info, instance)\n            except ValidationError as e:\n                msg = \". \".join(e.messages)\n                instance_errors.append(msg)\n\n            if not instance_errors:\n                clean_instance_ids.append(instance.pk)\n            else:\n                instance_errors_msg = \". \".join(instance_errors)\n                ValidationError({node_id: instance_errors_msg}).update_error_dict(\n                    errors_dict\n                )\n\n        if errors_dict:\n            errors = ValidationError(errors_dict)\n        else:\n            errors = None\n        count = len(clean_instance_ids)\n        if count:\n            qs = instance_model.objects.filter(pk__in=clean_instance_ids)\n            cls.bulk_action(info, qs, **data)\n        return count, errors\n\n    @classmethod\n    def mutate(cls, root, info: ResolveInfo, **data):\n        disallow_replica_in_context(info.context)\n        try:\n            setup_context_user(info.context)\n        except jwt.InvalidTokenError:\n            return cls.handle_errors(\n                ValidationError(\n                    \"Invalid token\", code=AccountErrorCode.JWT_INVALID_TOKEN.value\n                )\n            )\n\n        if not cls.check_permissions(info.context):\n            raise PermissionDenied(permissions=cls._meta.permissions)\n        manager = get_plugin_manager_promise(info.context).get()\n        result = manager.perform_mutation(\n            mutation_cls=cls, root=root, info=info, data=data\n        )\n        if result is not None:\n            return result\n\n        count, errors = cls.perform_mutation(root, info, **data)\n        if errors:\n            return cls.handle_errors(errors, count=count)\n\n        return cls(errors=[], count=count)\n\n\nclass ModelBulkDeleteMutation(BaseBulkMutation):\n    class Meta:\n        abstract = True\n\n    @classmethod\n    def bulk_action(cls, _info: ResolveInfo, queryset, /):\n        queryset.delete()\n\n\nclass FileUpload(BaseMutation):\n    uploaded_file = graphene.Field(File)\n\n    class Arguments:\n        file = Upload(\n            required=True, description=\"Represents a file in a multipart request.\"\n        )\n\n    class Meta:\n        description = (\n            \"Upload a file. This mutation must be sent as a `multipart` \"\n            \"request. More detailed specs of the upload format can be found here: \"\n            \"https://github.com/jaydenseric/graphql-multipart-request-spec\"\n        )\n        error_type_class = UploadError\n        error_type_field = \"upload_errors\"\n        permissions = (\n            AuthorizationFilters.AUTHENTICATED_APP,\n            AuthorizationFilters.AUTHENTICATED_STAFF_USER,\n        )\n\n    @classmethod\n    def perform_mutation(  # type: ignore[override]\n        cls, _root, info: ResolveInfo, /, file\n    ):\n        file_data: UploadedFile = cast(UploadedFile, info.context.FILES[file])\n\n        # add unique text fragment to the file name to prevent file overriding\n        file_name, format = os.path.splitext(file_data.name or \"\")\n\n        # replace spaced with an underscore to prevent replacing the spaces with encoded\n        # values by storage\n        file_name = file_name.replace(\" \", \"_\")\n\n        hash = secrets.token_hex(nbytes=4)\n        new_name = f\"file_upload/{file_name}_{hash}{format}\"\n\n        path = default_storage.save(new_name, file_data.file)\n\n        return FileUpload(\n            uploaded_file=File(url=path, content_type=file_data.content_type)\n        )\n", "from unittest import mock\n\nimport graphene\nimport pytest\nfrom django.test import override_settings\nfrom graphql.execution.base import ExecutionResult\n\nfrom .... import __version__ as saleor_version\nfrom ....demo.views import EXAMPLE_QUERY\nfrom ....graphql.utils import INTERNAL_ERROR_MESSAGE\nfrom ...tests.fixtures import API_PATH\nfrom ...tests.utils import get_graphql_content, get_graphql_content_from_response\nfrom ...views import generate_cache_key\n\n\ndef test_batch_queries(category, product, api_client, channel_USD):\n    query_product = \"\"\"\n        query GetProduct($id: ID!, $channel: String) {\n            product(id: $id, channel: $channel) {\n                name\n            }\n        }\n    \"\"\"\n    query_category = \"\"\"\n        query GetCategory($id: ID!) {\n            category(id: $id) {\n                name\n            }\n        }\n    \"\"\"\n    data = [\n        {\n            \"query\": query_category,\n            \"variables\": {\n                \"id\": graphene.Node.to_global_id(\"Category\", category.pk),\n                \"channel\": channel_USD.slug,\n            },\n        },\n        {\n            \"query\": query_product,\n            \"variables\": {\n                \"id\": graphene.Node.to_global_id(\"Product\", product.pk),\n                \"channel\": channel_USD.slug,\n            },\n        },\n    ]\n    response = api_client.post(data)\n    batch_content = get_graphql_content(response)\n    assert \"errors\" not in batch_content\n    assert isinstance(batch_content, list)\n    assert len(batch_content) == 2\n\n    data = {\n        field: value\n        for content in batch_content\n        for field, value in content[\"data\"].items()\n    }\n    assert data[\"product\"][\"name\"] == product.name\n    assert data[\"category\"][\"name\"] == category.name\n\n\ndef test_graphql_view_query_with_invalid_object_type(\n    staff_api_client, product, permission_manage_orders, graphql_log_handler\n):\n    query = \"\"\"\n    query($id: ID!) {\n        order(id: $id){\n            token\n        }\n    }\n    \"\"\"\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Product\", product.pk),\n    }\n    staff_api_client.user.user_permissions.add(permission_manage_orders)\n    response = staff_api_client.post_graphql(query, variables=variables)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"order\"] is None\n\n\n@pytest.mark.parametrize(\"playground_on, status\", [(True, 200), (False, 405)])\ndef test_graphql_view_get_enabled_or_disabled(client, settings, playground_on, status):\n    settings.PLAYGROUND_ENABLED = playground_on\n    response = client.get(API_PATH)\n    assert response.status_code == status\n\n\n@pytest.mark.parametrize(\"method\", (\"put\", \"patch\", \"delete\"))\ndef test_graphql_view_not_allowed(method, client):\n    func = getattr(client, method)\n    response = func(API_PATH)\n    assert response.status_code == 405\n\n\ndef test_invalid_request_body_non_debug(client):\n    data = \"invalid-data\"\n    response = client.post(API_PATH, data, content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert \"errors\" in content\n\n\n@override_settings(DEBUG=True)\ndef test_invalid_request_body_with_debug(client):\n    data = \"invalid-data\"\n    response = client.post(API_PATH, data, content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    errors = content.get(\"errors\")\n    assert errors == [\n        {\n            \"extensions\": {\"exception\": {\"code\": \"str\", \"stacktrace\": []}},\n            \"message\": \"Unable to parse query.\",\n        }\n    ]\n\n\ndef test_invalid_query(api_client):\n    query = \"query { invalid }\"\n    response = api_client.post_graphql(query, check_no_permissions=False)\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert \"errors\" in content\n\n\ndef test_no_query(client):\n    response = client.post(API_PATH, \"\", content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert content[\"errors\"][0][\"message\"] == \"Must provide a query string.\"\n\n\ndef test_query_is_dict(client):\n    data = {\"query\": {\"type\": \"dict\"}}\n    response = client.post(API_PATH, data, content_type=\"application/json\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert content[\"errors\"][0][\"message\"] == \"Must provide a query string.\"\n\n\ndef test_graphql_execution_exception(monkeypatch, api_client):\n    def mocked_execute(*args, **kwargs):\n        raise IOError(\"Spanish inquisition\")\n\n    monkeypatch.setattr(\"graphql.backend.core.execute_and_validate\", mocked_execute)\n    response = api_client.post_graphql(\"{ shop { name }}\")\n    assert response.status_code == 400\n    content = get_graphql_content_from_response(response)\n    assert content[\"errors\"][0][\"message\"] == INTERNAL_ERROR_MESSAGE\n\n\ndef test_invalid_query_graphql_errors_are_logged_in_another_logger(\n    api_client, graphql_log_handler\n):\n    response = api_client.post_graphql(\"{ shop }\")\n    assert response.status_code == 400\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].GraphQLError\"\n    ]\n\n\ndef test_invalid_syntax_graphql_errors_are_logged_in_another_logger(\n    api_client, graphql_log_handler\n):\n    response = api_client.post_graphql(\"{ }\")\n    assert response.status_code == 400\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].GraphQLSyntaxError\"\n    ]\n\n\ndef test_permission_denied_query_graphql_errors_are_logged_in_another_logger(\n    api_client, graphql_log_handler\n):\n    response = api_client.post_graphql(\n        \"\"\"\n        mutation {\n          productMediaDelete(id: \"aa\") {\n            errors {\n              message\n            }\n          }\n        }\n        \"\"\"\n    )\n    assert response.status_code == 200\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].PermissionDenied\"\n    ]\n\n\ndef test_validation_errors_query_do_not_get_logged(\n    staff_api_client, graphql_log_handler, permission_manage_products\n):\n    staff_api_client.user.user_permissions.add(permission_manage_products)\n    response = staff_api_client.post_graphql(\n        \"\"\"\n        mutation {\n          productMediaDelete(id: \"aa\") {\n            errors {\n              message\n            }\n          }\n        }\n        \"\"\"\n    )\n    assert response.status_code == 200\n    assert graphql_log_handler.messages == []\n\n\n@mock.patch(\"saleor.graphql.product.schema.resolve_collection_by_id\")\ndef test_unexpected_exceptions_are_logged_in_their_own_logger(\n    mocked_resolve_collection_by_id,\n    staff_api_client,\n    graphql_log_handler,\n    permission_manage_products,\n    published_collection,\n    channel_USD,\n):\n    def bad_mocked_resolve_collection_by_id(info, id, channel, requestor):\n        raise NotImplementedError(info, id, channel, requestor)\n\n    mocked_resolve_collection_by_id.side_effect = bad_mocked_resolve_collection_by_id\n\n    staff_api_client.user.user_permissions.add(permission_manage_products)\n    variables = {\n        \"id\": graphene.Node.to_global_id(\"Collection\", published_collection.pk),\n        \"channel\": channel_USD.slug,\n    }\n    response = staff_api_client.post_graphql(\n        \"\"\"\n        query($id: ID!,$channel:String) {\n            collection(id: $id,channel:$channel) {\n                name\n            }\n        }\"\"\",\n        variables=variables,\n    )\n\n    assert response.status_code == 200\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.unhandled[ERROR].NotImplementedError\"\n    ]\n\n\ndef test_example_query(api_client, product):\n    response = api_client.post_graphql(EXAMPLE_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"][\"products\"][\"edges\"][0][\"node\"][\"name\"] == product.name\n\n\n@pytest.mark.parametrize(\n    \"other_query\",\n    [\"me{email}\", 'products(first:5,channel:\"channel\"){edges{node{name}}}'],\n)\ndef test_query_contains_not_only_schema_raise_error(\n    other_query, api_client, graphql_log_handler\n):\n    query = \"\"\"\n        query IntrospectionQuery {\n            %(other_query)s\n            __schema {\n                queryType {\n                    name\n                }\n            }\n        }\n        \"\"\"\n    response = api_client.post_graphql(query % {\"other_query\": other_query})\n    assert response.status_code == 400\n    assert graphql_log_handler.messages == [\n        \"saleor.graphql.errors.handled[INFO].GraphQLError\"\n    ]\n\n\nINTROSPECTION_QUERY = \"\"\"\nquery IntrospectionQuery {\n    __schema {\n        queryType {\n            name\n        }\n    }\n}\n\"\"\"\n\nINTROSPECTION_RESULT = {\"__schema\": {\"queryType\": {\"name\": \"Query\"}}}\n\n\n@mock.patch(\"saleor.graphql.views.cache.set\")\n@mock.patch(\"saleor.graphql.views.cache.get\")\n@override_settings(DEBUG=False)\ndef test_introspection_query_is_cached(cache_get_mock, cache_set_mock, api_client):\n    cache_get_mock.return_value = None\n    cache_key = generate_cache_key(INTROSPECTION_QUERY)\n    response = api_client.post_graphql(INTROSPECTION_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"] == INTROSPECTION_RESULT\n    cache_get_mock.assert_called_once_with(cache_key)\n    cache_set_mock.assert_called_once_with(\n        cache_key, ExecutionResult(data=INTROSPECTION_RESULT)\n    )\n\n\n@mock.patch(\"saleor.graphql.views.cache.set\")\n@mock.patch(\"saleor.graphql.views.cache.get\")\n@override_settings(DEBUG=False)\ndef test_introspection_query_is_cached_only_once(\n    cache_get_mock, cache_set_mock, api_client\n):\n    cache_get_mock.return_value = ExecutionResult(data=INTROSPECTION_RESULT)\n    cache_key = generate_cache_key(INTROSPECTION_QUERY)\n    response = api_client.post_graphql(INTROSPECTION_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"] == INTROSPECTION_RESULT\n    cache_get_mock.assert_called_once_with(cache_key)\n    cache_set_mock.assert_not_called()\n\n\n@mock.patch(\"saleor.graphql.views.cache.set\")\n@mock.patch(\"saleor.graphql.views.cache.get\")\n@override_settings(DEBUG=True)\ndef test_introspection_query_is_not_cached_in_debug_mode(\n    cache_get_mock, cache_set_mock, api_client\n):\n    response = api_client.post_graphql(INTROSPECTION_QUERY)\n    content = get_graphql_content(response)\n    assert content[\"data\"] == INTROSPECTION_RESULT\n    cache_get_mock.assert_not_called()\n    cache_set_mock.assert_not_called()\n\n\ndef test_generate_cache_key_use_saleor_version():\n    cache_key = generate_cache_key(INTROSPECTION_QUERY)\n    assert saleor_version in cache_key\n", "import re\n\nfrom django.test import override_settings\nfrom graphql.utils import schema_printer\n\nfrom ..utils import ALLOWED_ERRORS, INTERNAL_ERROR_MESSAGE, format_error\nfrom .utils import get_graphql_content\n\n\ndef test_multiple_interface_separator_in_schema(api_client):\n    query = \"\"\"\n    query __ApolloGetServiceDefinition__ {\n        _service {\n            sdl\n        }\n    }\n    \"\"\"\n    response = api_client.post_graphql(query)\n\n    content = get_graphql_content(response)\n    sdl = content[\"data\"][\"_service\"][\"sdl\"]\n    comma_separated_interfaces = re.findall(\"implements (\\\\w+,) (\\\\w+)\", sdl)\n    ampersand_separated_interfaces = re.findall(\"implements (\\\\w+) & (\\\\w+)\", sdl)\n    assert not comma_separated_interfaces\n    assert ampersand_separated_interfaces\n\n\ndef test_graphql_core_contains_patched_function():\n    assert hasattr(schema_printer, \"_print_object\")\n\n\n@override_settings(DEBUG=False)\ndef test_format_error_hides_internal_error_msg_in_production_mode():\n    error = ValueError(\"Example error\")\n    result = format_error(error, ())\n    assert result[\"message\"] == INTERNAL_ERROR_MESSAGE\n\n\n@override_settings(DEBUG=False)\ndef test_format_error_prints_allowed_errors():\n    error_cls = ALLOWED_ERRORS[0]\n    error = error_cls(\"Example error\")\n    result = format_error(error, ())\n    assert result[\"message\"] == str(error)\n\n\n@override_settings(DEBUG=True)\ndef test_format_error_prints_internal_error_msg_in_debug_mode():\n    error = ValueError(\"Example error\")\n    result = format_error(error, ())\n    assert result[\"message\"] == str(error)\n", "import hashlib\nimport logging\nimport traceback\nfrom typing import TYPE_CHECKING, Any, Dict, Iterable, Union\nfrom uuid import UUID\n\nimport graphene\nfrom django.conf import settings\nfrom django.core.exceptions import ValidationError\nfrom django.db.models import Q, Value\nfrom django.db.models.functions import Concat\nfrom graphql import GraphQLDocument\nfrom graphql.error import GraphQLError\nfrom graphql.error import format_error as format_graphql_error\n\nfrom ...account.models import User\nfrom ...app.models import App\nfrom ...core.exceptions import (\n    CircularSubscriptionSyncEvent,\n    PermissionDenied,\n    ReadOnlyException,\n)\nfrom ..core.enums import PermissionEnum\nfrom ..core.types import TYPES_WITH_DOUBLE_ID_AVAILABLE, Permission\nfrom ..core.utils import from_global_id_or_error\nfrom ..core.validators.query_cost import QueryCostError\n\nif TYPE_CHECKING:\n    from ..core import SaleorContext\n\nunhandled_errors_logger = logging.getLogger(\"saleor.graphql.errors.unhandled\")\nhandled_errors_logger = logging.getLogger(\"saleor.graphql.errors.handled\")\n\n\nERROR_COULD_NO_RESOLVE_GLOBAL_ID = (\n    \"Could not resolve to a node with the global id list of '%s'.\"\n)\nREVERSED_DIRECTION = {\n    \"-\": \"\",\n    \"\": \"-\",\n}\n\n# List of error types of which messages can be returned in the GraphQL API.\nALLOWED_ERRORS = [\n    CircularSubscriptionSyncEvent,\n    GraphQLError,\n    PermissionDenied,\n    ReadOnlyException,\n    ValidationError,\n    QueryCostError,\n]\n\nINTERNAL_ERROR_MESSAGE = \"Internal Server Error\"\n\n\ndef resolve_global_ids_to_primary_keys(\n    ids: Iterable[str], graphene_type=None, raise_error: bool = False\n):\n    pks = []\n    invalid_ids = []\n    used_type = graphene_type\n\n    for graphql_id in ids:\n        if not graphql_id:\n            invalid_ids.append(graphql_id)\n            continue\n\n        try:\n            node_type, _id = from_global_id_or_error(graphql_id)\n        except Exception:\n            invalid_ids.append(graphql_id)\n            continue\n\n        # Raise GraphQL error if ID of a different type was passed\n        if used_type and str(used_type) != str(node_type):\n            if not raise_error:\n                continue\n            raise GraphQLError(f\"Must receive {str(used_type)} id: {graphql_id}.\")\n\n        used_type = node_type\n        pks.append(_id)\n\n    if invalid_ids:\n        raise GraphQLError(ERROR_COULD_NO_RESOLVE_GLOBAL_ID % invalid_ids)\n\n    return used_type, pks\n\n\ndef _resolve_graphene_type(schema, type_name):\n    type_from_schema = schema.get_type(type_name)\n    if type_from_schema:\n        return type_from_schema.graphene_type\n    raise GraphQLError(\"Could not resolve the type {}\".format(type_name))\n\n\ndef get_nodes(\n    ids,\n    graphene_type: Union[graphene.ObjectType, str, None] = None,\n    model=None,\n    qs=None,\n    schema=None,\n):\n    \"\"\"Return a list of nodes.\n\n    If the `graphene_type` argument is provided, the IDs will be validated\n    against this type. If the type was not provided, it will be looked up in\n    the schema. Raises an error if not all IDs are of the same\n    type.\n\n    If the `graphene_type` is of type str, the model keyword argument must be provided.\n    \"\"\"\n    nodes_type, pks = resolve_global_ids_to_primary_keys(\n        ids, graphene_type, raise_error=True\n    )\n    # If `graphene_type` was not provided, check if all resolved types are\n    # the same. This prevents from accidentally mismatching IDs of different\n    # types.\n    if nodes_type and not graphene_type:\n        if schema:\n            graphene_type = _resolve_graphene_type(schema, nodes_type)\n        else:\n            raise GraphQLError(\"GraphQL schema was not provided\")\n\n    if qs is None and graphene_type and not isinstance(graphene_type, str):\n        qs = graphene_type._meta.model.objects\n    elif model is not None:\n        qs = model.objects\n\n    is_object_type_with_double_id = str(graphene_type) in TYPES_WITH_DOUBLE_ID_AVAILABLE\n    if is_object_type_with_double_id:\n        nodes = _get_node_for_types_with_double_id(qs, pks, graphene_type)\n    else:\n        nodes = list(qs.filter(pk__in=pks))\n        nodes.sort(key=lambda e: pks.index(str(e.pk)))  # preserve order in pks\n\n    if not nodes:\n        raise GraphQLError(ERROR_COULD_NO_RESOLVE_GLOBAL_ID % ids)\n\n    nodes_pk_list = [str(node.pk) for node in nodes]\n    if is_object_type_with_double_id:\n        old_id_field = \"number\" if str(graphene_type) == \"Order\" else \"old_id\"\n        nodes_pk_list.extend([str(getattr(node, old_id_field)) for node in nodes])\n    for pk in pks:\n        assert pk in nodes_pk_list, \"There is no node of type {} with pk {}\".format(\n            graphene_type, pk\n        )\n    return nodes\n\n\ndef _get_node_for_types_with_double_id(qs, pks, graphene_type):\n    uuid_pks = []\n    old_pks = []\n    is_order_type = str(graphene_type) == \"Order\"\n\n    for pk in pks:\n        try:\n            uuid_pks.append(UUID(str(pk)))\n        except ValueError:\n            old_pks.append(pk)\n    if is_order_type:\n        lookup = Q(id__in=uuid_pks) | (Q(use_old_id=True) & Q(number__in=old_pks))\n    else:\n        lookup = Q(id__in=uuid_pks) | (Q(old_id__isnull=False) & Q(old_id__in=old_pks))\n    nodes = list(qs.filter(lookup))\n    old_id_field = \"number\" if is_order_type else \"old_id\"\n    return sorted(\n        nodes,\n        key=lambda e: pks.index(\n            str(e.pk) if e.pk in uuid_pks else str(getattr(e, old_id_field))\n        ),\n    )  # preserve order in pks\n\n\ndef format_permissions_for_display(permissions):\n    \"\"\"Transform permissions queryset into Permission list.\n\n    Keyword Arguments:\n        permissions - queryset with permissions\n\n    \"\"\"\n    permissions_data = permissions.annotate(\n        formated_codename=Concat(\"content_type__app_label\", Value(\".\"), \"codename\")\n    ).values(\"name\", \"formated_codename\")\n\n    formatted_permissions = [\n        Permission(\n            code=PermissionEnum.get(data[\"formated_codename\"]), name=data[\"name\"]\n        )\n        for data in permissions_data\n    ]\n    return formatted_permissions\n\n\ndef get_user_or_app_from_context(context: \"SaleorContext\") -> Union[App, User, None]:\n    # order is important\n    # app can be None but user if None then is passed as anonymous\n    return context.app or context.user\n\n\ndef requestor_is_superuser(requestor):\n    \"\"\"Return True if requestor is superuser.\"\"\"\n    return getattr(requestor, \"is_superuser\", False)\n\n\ndef query_identifier(document: GraphQLDocument) -> str:\n    \"\"\"Generate a fingerprint for a GraphQL query.\n\n    For queries identifier is sorted set of all root objects separated by `,`.\n    e.g\n    query AnyQuery {\n        product {\n            id\n        }\n        order {\n            id\n        }\n        Product2: product {\n            id\n        }\n        Myself: me {\n            email\n        }\n    }\n    identifier: me, order, product\n\n    For mutations identifier is mutation type name.\n    e.g.\n    mutation CreateToken{\n        tokenCreate(...){\n            token\n        }\n        deleteWarehouse(...){\n            ...\n        }\n    }\n    identifier: deleteWarehouse, tokenCreate\n    \"\"\"\n    labels = []\n    for definition in document.document_ast.definitions:\n        if getattr(definition, \"operation\", None) in {\n            \"query\",\n            \"mutation\",\n        }:\n            selections = definition.selection_set.selections\n            for selection in selections:\n                labels.append(selection.name.value)\n    if not labels:\n        return \"undefined\"\n    return \", \".join(sorted(set(labels)))\n\n\ndef query_fingerprint(document: GraphQLDocument) -> str:\n    \"\"\"Generate a fingerprint for a GraphQL query.\"\"\"\n    label = \"unknown\"\n    for definition in document.document_ast.definitions:\n        if getattr(definition, \"operation\", None) in {\n            \"query\",\n            \"mutation\",\n            \"subscription\",\n        }:\n            if definition.name:\n                label = f\"{definition.operation}:{definition.name.value}\"\n            else:\n                label = definition.operation\n            break\n    query_hash = hashlib.md5(document.document_string.encode(\"utf-8\")).hexdigest()\n    return f\"{label}:{query_hash}\"\n\n\ndef format_error(error, handled_exceptions):\n    result: Dict[str, Any]\n    if isinstance(error, GraphQLError):\n        result = format_graphql_error(error)\n    else:\n        result = {\"message\": str(error)}\n\n    if \"extensions\" not in result:\n        result[\"extensions\"] = {}\n\n    exc = error\n    while isinstance(exc, GraphQLError) and hasattr(exc, \"original_error\"):\n        exc = exc.original_error\n    if isinstance(exc, AssertionError):\n        exc = GraphQLError(str(exc))\n    if isinstance(exc, handled_exceptions):\n        handled_errors_logger.info(\"A query had an error\", exc_info=exc)\n    else:\n        unhandled_errors_logger.error(\"A query failed unexpectedly\", exc_info=exc)\n\n    # If DEBUG mode is disabled we allow only certain error messages to be returned in\n    # the API. This prevents from leaking internals that might be included in Python\n    # exceptions' error messages.\n    if type(exc) not in ALLOWED_ERRORS and not settings.DEBUG:\n        result[\"message\"] = INTERNAL_ERROR_MESSAGE\n\n    result[\"extensions\"][\"exception\"] = {\"code\": type(exc).__name__}\n    if settings.DEBUG:\n        lines = []\n\n        if isinstance(exc, BaseException):\n            for line in traceback.format_exception(type(exc), exc, exc.__traceback__):\n                lines.extend(line.rstrip().splitlines())\n        result[\"extensions\"][\"exception\"][\"stacktrace\"] = lines\n    return result\n"], "filenames": ["saleor/graphql/account/tests/test_account.py", "saleor/graphql/core/mutations.py", "saleor/graphql/core/tests/test_view.py", "saleor/graphql/tests/test_utils.py", "saleor/graphql/utils/__init__.py"], "buggy_code_start_loc": [5280, 21, 9, 2, 8], "buggy_code_end_loc": [5525, 942, 149, 27, 270], "fixing_code_start_loc": [5281, 22, 10, 3, 9], "fixing_code_end_loc": [5524, 958, 150, 52, 296], "type": "CWE-209", "message": "Saleor is a headless, GraphQL commerce platform delivering personalized shopping experiences. Some internal Python exceptions are not handled properly and thus are returned in API as error messages. Some messages might contain sensitive information like user email address in staff-authenticated requests.", "other": {"cve": {"id": "CVE-2023-26051", "sourceIdentifier": "security-advisories@github.com", "published": "2023-03-02T19:15:10.667", "lastModified": "2023-03-13T15:30:54.487", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Saleor is a headless, GraphQL commerce platform delivering personalized shopping experiences. Some internal Python exceptions are not handled properly and thus are returned in API as error messages. Some messages might contain sensitive information like user email address in staff-authenticated requests."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-209"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-209"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:saleor:saleor:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.0.0", "versionEndExcluding": "3.1.48", "matchCriteriaId": "32910EFF-045F-4F93-BBD2-8D370D8DC6EB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saleor:saleor:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.2.0", "versionEndExcluding": "3.7.59", "matchCriteriaId": "087E100F-63DE-4F84-9410-77BB517D14E3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saleor:saleor:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.8.0", "versionEndExcluding": "3.8.30", "matchCriteriaId": "FE021955-5B68-4626-8C74-534A3C0BFA62"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saleor:saleor:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.9.0", "versionEndExcluding": "3.9.27", "matchCriteriaId": "B87F6451-DB7D-47E2-9265-86EFF197727B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saleor:saleor:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.10.0", "versionEndExcluding": "3.10.14", "matchCriteriaId": "10A27FA1-6BA8-4678-A27E-16BFDD241DCB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:saleor:saleor:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.11.0", "versionEndExcluding": "3.11.12", "matchCriteriaId": "A86A9221-83AB-4977-81AD-83364AF05B9C"}]}]}], "references": [{"url": "https://github.com/saleor/saleor/commit/31bce881ccccf0d79a9b14ecb6ca3138d1edeec1", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/saleor/saleor/releases/tag/3.1.48", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/saleor/saleor/releases/tag/3.10.14", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/saleor/saleor/releases/tag/3.11.12", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/saleor/saleor/releases/tag/3.7.59", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/saleor/saleor/releases/tag/3.8.30", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/saleor/saleor/releases/tag/3.9.27", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/saleor/saleor/security/advisories/GHSA-r8qr-wwg3-2r85", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/saleor/saleor/commit/31bce881ccccf0d79a9b14ecb6ca3138d1edeec1"}}