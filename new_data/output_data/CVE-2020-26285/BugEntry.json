{"buggy_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Widget\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Widget Instance Model\n *\n * @method Mage_Widget_Model_Resource_Widget_Instance _getResource()\n * @method Mage_Widget_Model_Resource_Widget_Instance getResource()\n * @method Mage_Widget_Model_Resource_Widget_Instance_Collection getCollection()\n *\n * @method array getPageGroups()\n * @method $this setPageGroups(array $value)\n * @method $this setStoreIds(string $value)\n * @method string getTitle()\n * @method $this setTitle(string $value)\n * @method $this setWidgetParameters(string $value)\n * @method int getSortOrder()\n * @method $this setSortOrder(int $value)\n *\n * @category    Mage\n * @package     Mage_Widget\n * @author      Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Widget_Model_Widget_Instance extends Mage_Core_Model_Abstract\n{\n    const SPECIFIC_ENTITIES = 'specific';\n    const ALL_ENTITIES      = 'all';\n\n    const DEFAULT_LAYOUT_HANDLE            = 'default';\n    const PRODUCT_LAYOUT_HANDLE            = 'catalog_product_view';\n    const SINGLE_PRODUCT_LAYOUT_HANLDE     = 'PRODUCT_{{ID}}';\n    const PRODUCT_TYPE_LAYOUT_HANDLE       = 'PRODUCT_TYPE_{{TYPE}}';\n    const ANCHOR_CATEGORY_LAYOUT_HANDLE    = 'catalog_category_layered';\n    const NOTANCHOR_CATEGORY_LAYOUT_HANDLE = 'catalog_category_default';\n    const SINGLE_CATEGORY_LAYOUT_HANDLE    = 'CATEGORY_{{ID}}';\n\n    const XML_NODE_RELATED_CACHE = 'global/widget/related_cache_types';\n\n    protected $_layoutHandles = array();\n\n    protected $_specificEntitiesLayoutHandles = array();\n\n    /**\n     * @var Varien_Simplexml_Element\n     */\n    protected $_widgetConfigXml = null;\n\n    /**\n     * Prefix of model events names\n     *\n     * @var string\n     */\n    protected $_eventPrefix = 'widget_widget_instance';\n\n    /**\n     * Internal Constructor\n     */\n    protected function _construct()\n    {\n        $this->_cacheTag = 'widget_instance';\n        parent::_construct();\n        $this->_init('widget/widget_instance');\n        $this->_layoutHandles = array(\n            'anchor_categories' => self::ANCHOR_CATEGORY_LAYOUT_HANDLE,\n            'notanchor_categories' => self::NOTANCHOR_CATEGORY_LAYOUT_HANDLE,\n            'all_products' => self::PRODUCT_LAYOUT_HANDLE,\n            'all_pages' => self::DEFAULT_LAYOUT_HANDLE\n        );\n        $this->_specificEntitiesLayoutHandles = array(\n            'anchor_categories' => self::SINGLE_CATEGORY_LAYOUT_HANDLE,\n            'notanchor_categories' => self::SINGLE_CATEGORY_LAYOUT_HANDLE,\n            'all_products' => self::SINGLE_PRODUCT_LAYOUT_HANLDE,\n        );\n        foreach (Mage_Catalog_Model_Product_Type::getTypes() as $typeId => $type) {\n            $layoutHandle = str_replace('{{TYPE}}', $typeId, self::PRODUCT_TYPE_LAYOUT_HANDLE);\n            $this->_layoutHandles[$typeId . '_products'] = $layoutHandle;\n            $this->_specificEntitiesLayoutHandles[$typeId . '_products'] = self::SINGLE_PRODUCT_LAYOUT_HANLDE;\n        }\n    }\n\n     /**\n     * Init mapping array of short fields to\n     * its full names\n     *\n     * @return Varien_Object\n     */\n    protected function _initOldFieldsMap()\n    {\n        $this->_oldFieldsMap = array(\n            'type' => 'instance_type',\n        );\n        return $this;\n    }\n\n    /**\n     * Processing object before save data\n     *\n     * @inheritDoc\n     */\n    protected function _beforeSave()\n    {\n        $pageGroupIds = array();\n        $tmpPageGroups = array();\n        $pageGroups = $this->getData('page_groups');\n        if ($pageGroups) {\n            foreach ($pageGroups as $pageGroup) {\n                if (isset($pageGroup[$pageGroup['page_group']])) {\n                    $pageGroupData = $pageGroup[$pageGroup['page_group']];\n                    if ($pageGroupData['page_id']) {\n                        $pageGroupIds[] = $pageGroupData['page_id'];\n                    }\n                    if ($pageGroup['page_group'] == 'pages') {\n                        $layoutHandle = $pageGroupData['layout_handle'];\n                    } else {\n                        $layoutHandle = $this->_layoutHandles[$pageGroup['page_group']];\n                    }\n                    if (!isset($pageGroupData['template'])) {\n                        $pageGroupData['template'] = '';\n                    }\n                    $tmpPageGroup = array(\n                        'page_id' => $pageGroupData['page_id'],\n                        'group' => $pageGroup['page_group'],\n                        'layout_handle' => $layoutHandle,\n                        'for' => $pageGroupData['for'],\n                        'block_reference' => $pageGroupData['block'],\n                        'entities' => '',\n                        'layout_handle_updates' => array($layoutHandle),\n                        'template' => $pageGroupData['template']?$pageGroupData['template']:''\n                    );\n                    if ($pageGroupData['for'] == self::SPECIFIC_ENTITIES) {\n                        $layoutHandleUpdates = array();\n                        foreach (explode(',', $pageGroupData['entities']) as $entity) {\n                            $layoutHandleUpdates[] = str_replace(\n                                '{{ID}}',\n                                $entity,\n                                $this->_specificEntitiesLayoutHandles[$pageGroup['page_group']]\n                            );\n                        }\n                        $tmpPageGroup['entities'] = $pageGroupData['entities'];\n                        $tmpPageGroup['layout_handle_updates'] = $layoutHandleUpdates;\n                    }\n                    $tmpPageGroups[] = $tmpPageGroup;\n                }\n            }\n        }\n        if (is_array($this->getData('store_ids'))) {\n            $this->setData('store_ids', implode(',', $this->getData('store_ids')));\n        }\n        if (is_array($this->getData('widget_parameters'))) {\n            $this->setData('widget_parameters', serialize($this->getData('widget_parameters')));\n        }\n        $this->setData('page_groups', $tmpPageGroups);\n        $this->setData('page_group_ids', $pageGroupIds);\n\n        return parent::_beforeSave();\n    }\n\n    /**\n     * Validate widget instance data\n     *\n     * @return string|boolean\n     */\n    public function validate()\n    {\n        if ($this->isCompleteToCreate()) {\n            return true;\n        }\n        return Mage::helper('widget')->__('Widget instance is not full complete to create.');\n    }\n\n    /**\n     * Check if widget instance has required data (other data depends on it)\n     *\n     * @return boolean\n     */\n    public function isCompleteToCreate()\n    {\n        return (bool)($this->getType() && $this->getPackageTheme());\n    }\n\n    /**\n     * Setter\n     * Prepare widget type\n     *\n     * @param string $type\n     * @return $this\n     */\n    public function setType($type)\n    {\n        $this->setData('type', $type);\n        $this->_prepareType();\n        return $this;\n    }\n\n    /**\n     * Getter\n     * Prepare widget type\n     *\n     * @return string\n     */\n    public function getType()\n    {\n        $this->_prepareType();\n        return $this->_getData('type');\n    }\n\n    /**\n     * Replace '-' to '/', if was passed from request(GET request)\n     *\n     * @return $this\n     */\n    protected function _prepareType()\n    {\n        if (strpos($this->_getData('type'), '-') >= 0) {\n            $this->setData('type', str_replace('-', '/', $this->_getData('type')));\n        }\n        return $this;\n    }\n\n    /**\n     * Setter\n     * Prepare widget package theme\n     *\n     * @param string $packageTheme\n     * @return $this\n     */\n    public function setPackageTheme($packageTheme)\n    {\n        $this->setData('package_theme', $packageTheme);\n        return $this;\n    }\n\n    /**\n     * Getter\n     * Prepare widget package theme\n     *\n     * @return string\n     */\n    public function getPackageTheme()\n    {\n        return $this->_getData('package_theme');\n    }\n\n    /**\n     * Replace '_' to '/', if was set from request(GET request)\n     *\n     * @deprecated after 1.6.1.0-alpha1\n     *\n     * @return $this\n     */\n    protected function _preparePackageTheme()\n    {\n        return $this;\n    }\n\n    /**\n     * Getter.\n     * If not set return default\n     *\n     * @return string\n     */\n    public function getArea()\n    {\n        if (!$this->_getData('area')) {\n            return Mage_Core_Model_Design_Package::DEFAULT_AREA;\n        }\n        return $this->_getData('area');\n    }\n\n    /**\n     * Getter\n     *\n     * @return string\n     */\n    public function getPackage()\n    {\n        if (!$this->_getData('package')) {\n            $this->_parsePackageTheme();\n        }\n        return $this->_getData('package');\n    }\n\n    /**\n     * Getter\n     *\n     * @return string\n     */\n    public function getTheme()\n    {\n        if (!$this->_getData('theme')) {\n            $this->_parsePackageTheme();\n        }\n        return $this->_getData('theme');\n    }\n\n    /**\n     * Parse packageTheme and set parsed package and theme\n     *\n     * @return $this\n     */\n    protected function _parsePackageTheme()\n    {\n        if ($this->getPackageTheme() && strpos($this->getPackageTheme(), '/')) {\n            list($package, $theme) = explode('/', $this->getPackageTheme());\n            $this->setData('package', $package);\n            $this->setData('theme', $theme);\n        }\n        return $this;\n    }\n\n    /**\n     * Getter\n     * Explode to array if string setted\n     *\n     * @return array\n     */\n    public function getStoreIds()\n    {\n        if (is_string($this->getData('store_ids'))) {\n            return explode(',', $this->getData('store_ids'));\n        }\n        return $this->getData('store_ids');\n    }\n\n    /**\n     * Getter\n     * Unserialize if serialized string setted\n     *\n     * @return array\n     */\n    public function getWidgetParameters()\n    {\n        if (is_string($this->getData('widget_parameters'))) {\n            try {\n                return Mage::helper('core/unserializeArray')->unserialize($this->getData('widget_parameters'));\n            } catch (Exception $e) {\n                Mage::logException($e);\n            }\n        }\n        return (is_array($this->getData('widget_parameters'))) ? $this->getData('widget_parameters') : array();\n    }\n\n    /**\n     * Retrieve option array of widget types\n     *\n     * @return array\n     */\n    public function getWidgetsOptionArray()\n    {\n        $widgets = array();\n        $widgetsArr = Mage::getSingleton('widget/widget')->getWidgetsArray();\n        foreach ($widgetsArr as $widget) {\n            $widgets[] = array(\n                'value' => $widget['type'],\n                'label' => $widget['name']\n            );\n        }\n        return $widgets;\n    }\n\n    /**\n     * Load widget XML config and merge with theme widget config\n     *\n     * @return Varien_Simplexml_Element|null\n     */\n    public function getWidgetConfig()\n    {\n        if ($this->_widgetConfigXml === null) {\n            $this->_widgetConfigXml = Mage::getSingleton('widget/widget')\n                ->getXmlElementByType($this->getType());\n            if ($this->_widgetConfigXml) {\n                $configFile = Mage::getSingleton('core/design_package')->getBaseDir(array(\n                    '_area'    => $this->getArea(),\n                    '_package' => $this->getPackage(),\n                    '_theme'   => $this->getTheme(),\n                    '_type'    => 'etc'\n                )) . DS . 'widget.xml';\n                if (is_readable($configFile)) {\n                    $themeWidgetsConfig = new Varien_Simplexml_Config();\n                    $themeWidgetsConfig->loadFile($configFile);\n                    if ($themeWidgetTypeConfig = $themeWidgetsConfig->getNode($this->_widgetConfigXml->getName())) {\n                        $this->_widgetConfigXml->extend($themeWidgetTypeConfig);\n                    }\n                }\n            }\n        }\n        return $this->_widgetConfigXml;\n    }\n\n    /**\n     * Retrieve widget availabel templates\n     *\n     * @return array\n     */\n    public function getWidgetTemplates()\n    {\n        $templates = array();\n        if ($this->getWidgetConfig() && ($configTemplates = $this->getWidgetConfig()->parameters->template)) {\n            if ($configTemplates->values && $configTemplates->values->children()) {\n                foreach ($configTemplates->values->children() as $name => $template) {\n                    $helper = $template->getAttribute('module') ? $template->getAttribute('module') : 'widget';\n                    $templates[(string)$name] = array(\n                        'value' => (string)$template->value,\n                        'label' => Mage::helper($helper)->__((string)$template->label)\n                    );\n                }\n            } elseif ($configTemplates->value) {\n                $templates['default'] = array(\n                    'value' => (string)$configTemplates->value,\n                    'label' => Mage::helper('widget')->__('Default Template')\n                );\n            }\n        }\n        return $templates;\n    }\n\n    /**\n     * Retrieve blocks that widget support\n     *\n     * @return array\n     */\n    public function getWidgetSupportedBlocks()\n    {\n        $blocks = array();\n        if ($this->getWidgetConfig() && ($supportedBlocks = $this->getWidgetConfig()->supported_blocks)) {\n            foreach ($supportedBlocks->children() as $block) {\n                $blocks[] = (string)$block->block_name;\n            }\n        }\n        return $blocks;\n    }\n\n    /**\n     * Retrieve widget templates that supported by given block reference\n     *\n     * @param string $blockReference\n     * @return array\n     */\n    public function getWidgetSupportedTemplatesByBlock($blockReference)\n    {\n        $templates = array();\n        $widgetTemplates = $this->getWidgetTemplates();\n        if ($this->getWidgetConfig()) {\n            if (!($supportedBlocks = $this->getWidgetConfig()->supported_blocks)) {\n                return $widgetTemplates;\n            }\n            foreach ($supportedBlocks->children() as $block) {\n                if ((string)$block->block_name == $blockReference) {\n                    if ($block->template && $block->template->children()) {\n                        foreach ($block->template->children() as $template) {\n                            if (isset($widgetTemplates[(string)$template])) {\n                                $templates[] = $widgetTemplates[(string)$template];\n                            }\n                        }\n                    } else {\n                        $templates[] = $widgetTemplates[(string)$template];\n                    }\n                }\n            }\n        } else {\n            return $widgetTemplates;\n        }\n        return $templates;\n    }\n\n    /**\n     * Generate layout update xml\n     *\n     * @param string $blockReference\n     * @param string $templatePath\n     * @return string\n     */\n    public function generateLayoutUpdateXml($blockReference, $templatePath = '')\n    {\n        $templateFilename = Mage::getSingleton('core/design_package')->getTemplateFilename($templatePath, array(\n            '_area'    => $this->getArea(),\n            '_package' => $this->getPackage(),\n            '_theme'   => $this->getTheme()\n        ));\n        if (!$this->getId() && !$this->isCompleteToCreate()\n            || ($templatePath && !is_readable($templateFilename))) {\n            return '';\n        }\n        $parameters = $this->getWidgetParameters();\n        $xml = '<reference name=\"' . $blockReference . '\">';\n        $template = '';\n        if (isset($parameters['template'])) {\n            unset($parameters['template']);\n        }\n        if ($templatePath) {\n            $template = ' template=\"' . $templatePath . '\"';\n        }\n\n        $hash = Mage::helper('core')->uniqHash();\n        $xml .= '<block type=\"' . $this->getType() . '\" name=\"' . $hash . '\"' . $template . '>';\n        foreach ($parameters as $name => $value) {\n            if (is_array($value)) {\n                $value = implode(',', $value);\n            }\n            if ($name && strlen((string)$value)) {\n                $xml .= '<action method=\"setData\">'\n                    . '<name>' . $name . '</name>'\n                    . '<value>' . Mage::helper('widget')->escapeHtml($value) . '</value>'\n                    . '</action>';\n            }\n        }\n        $xml .= '</block></reference>';\n\n        return $xml;\n    }\n\n    /**\n     * Invalidate related cache types\n     *\n     * @return $this\n     */\n    protected function _invalidateCache()\n    {\n        $types = Mage::getConfig()->getNode(self::XML_NODE_RELATED_CACHE);\n        if ($types) {\n            $types = $types->asArray();\n            Mage::app()->getCacheInstance()->invalidateType(array_keys($types));\n        }\n        return $this;\n    }\n\n    /**\n     * Invalidate related cache if instance contain layout updates\n     */\n    protected function _afterSave()\n    {\n        if ($this->dataHasChangedFor('page_groups') || $this->dataHasChangedFor('widget_parameters')) {\n            $this->_invalidateCache();\n        }\n        return parent::_afterSave();\n    }\n\n    /**\n     * Invalidate related cache if instance contain layout updates\n     */\n    protected function _beforeDelete()\n    {\n        if ($this->getPageGroups()) {\n            $this->_invalidateCache();\n        }\n        return parent::_beforeDelete();\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Widget\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Widget Instance Model\n *\n * @method Mage_Widget_Model_Resource_Widget_Instance _getResource()\n * @method Mage_Widget_Model_Resource_Widget_Instance getResource()\n * @method Mage_Widget_Model_Resource_Widget_Instance_Collection getCollection()\n *\n * @method array getPageGroups()\n * @method $this setPageGroups(array $value)\n * @method $this setStoreIds(string $value)\n * @method string getTitle()\n * @method $this setTitle(string $value)\n * @method $this setWidgetParameters(string $value)\n * @method int getSortOrder()\n * @method $this setSortOrder(int $value)\n *\n * @category    Mage\n * @package     Mage_Widget\n * @author      Magento Core Team <core@magentocommerce.com>\n */\nclass Mage_Widget_Model_Widget_Instance extends Mage_Core_Model_Abstract\n{\n    const SPECIFIC_ENTITIES = 'specific';\n    const ALL_ENTITIES      = 'all';\n\n    const DEFAULT_LAYOUT_HANDLE            = 'default';\n    const PRODUCT_LAYOUT_HANDLE            = 'catalog_product_view';\n    const SINGLE_PRODUCT_LAYOUT_HANLDE     = 'PRODUCT_{{ID}}';\n    const PRODUCT_TYPE_LAYOUT_HANDLE       = 'PRODUCT_TYPE_{{TYPE}}';\n    const ANCHOR_CATEGORY_LAYOUT_HANDLE    = 'catalog_category_layered';\n    const NOTANCHOR_CATEGORY_LAYOUT_HANDLE = 'catalog_category_default';\n    const SINGLE_CATEGORY_LAYOUT_HANDLE    = 'CATEGORY_{{ID}}';\n\n    const XML_NODE_RELATED_CACHE = 'global/widget/related_cache_types';\n\n    protected $_layoutHandles = array();\n\n    protected $_specificEntitiesLayoutHandles = array();\n\n    /**\n     * @var Varien_Simplexml_Element\n     */\n    protected $_widgetConfigXml = null;\n\n    /**\n     * Prefix of model events names\n     *\n     * @var string\n     */\n    protected $_eventPrefix = 'widget_widget_instance';\n\n    /**\n     * Internal Constructor\n     */\n    protected function _construct()\n    {\n        $this->_cacheTag = 'widget_instance';\n        parent::_construct();\n        $this->_init('widget/widget_instance');\n        $this->_layoutHandles = array(\n            'anchor_categories' => self::ANCHOR_CATEGORY_LAYOUT_HANDLE,\n            'notanchor_categories' => self::NOTANCHOR_CATEGORY_LAYOUT_HANDLE,\n            'all_products' => self::PRODUCT_LAYOUT_HANDLE,\n            'all_pages' => self::DEFAULT_LAYOUT_HANDLE\n        );\n        $this->_specificEntitiesLayoutHandles = array(\n            'anchor_categories' => self::SINGLE_CATEGORY_LAYOUT_HANDLE,\n            'notanchor_categories' => self::SINGLE_CATEGORY_LAYOUT_HANDLE,\n            'all_products' => self::SINGLE_PRODUCT_LAYOUT_HANLDE,\n        );\n        foreach (Mage_Catalog_Model_Product_Type::getTypes() as $typeId => $type) {\n            $layoutHandle = str_replace('{{TYPE}}', $typeId, self::PRODUCT_TYPE_LAYOUT_HANDLE);\n            $this->_layoutHandles[$typeId . '_products'] = $layoutHandle;\n            $this->_specificEntitiesLayoutHandles[$typeId . '_products'] = self::SINGLE_PRODUCT_LAYOUT_HANLDE;\n        }\n    }\n\n     /**\n     * Init mapping array of short fields to\n     * its full names\n     *\n     * @return Varien_Object\n     */\n    protected function _initOldFieldsMap()\n    {\n        $this->_oldFieldsMap = array(\n            'type' => 'instance_type',\n        );\n        return $this;\n    }\n\n    /**\n     * Processing object before save data\n     *\n     * @inheritDoc\n     */\n    protected function _beforeSave()\n    {\n        $pageGroupIds = array();\n        $tmpPageGroups = array();\n        $pageGroups = $this->getData('page_groups');\n        if ($pageGroups) {\n            foreach ($pageGroups as $pageGroup) {\n                if (isset($pageGroup[$pageGroup['page_group']])) {\n                    $pageGroupData = $pageGroup[$pageGroup['page_group']];\n                    if ($pageGroupData['page_id']) {\n                        $pageGroupIds[] = $pageGroupData['page_id'];\n                    }\n                    if ($pageGroup['page_group'] == 'pages') {\n                        $layoutHandle = $pageGroupData['layout_handle'];\n                    } else {\n                        $layoutHandle = $this->_layoutHandles[$pageGroup['page_group']];\n                    }\n                    if (!isset($pageGroupData['template'])) {\n                        $pageGroupData['template'] = '';\n                    }\n                    $tmpPageGroup = array(\n                        'page_id' => $pageGroupData['page_id'],\n                        'group' => $pageGroup['page_group'],\n                        'layout_handle' => $layoutHandle,\n                        'for' => $pageGroupData['for'],\n                        'block_reference' => $pageGroupData['block'],\n                        'entities' => '',\n                        'layout_handle_updates' => array($layoutHandle),\n                        'template' => $pageGroupData['template']?$pageGroupData['template']:''\n                    );\n                    if ($pageGroupData['for'] == self::SPECIFIC_ENTITIES) {\n                        $layoutHandleUpdates = array();\n                        foreach (explode(',', $pageGroupData['entities']) as $entity) {\n                            $layoutHandleUpdates[] = str_replace(\n                                '{{ID}}',\n                                $entity,\n                                $this->_specificEntitiesLayoutHandles[$pageGroup['page_group']]\n                            );\n                        }\n                        $tmpPageGroup['entities'] = $pageGroupData['entities'];\n                        $tmpPageGroup['layout_handle_updates'] = $layoutHandleUpdates;\n                    }\n                    $tmpPageGroups[] = $tmpPageGroup;\n                }\n            }\n        }\n        if (is_array($this->getData('store_ids'))) {\n            $this->setData('store_ids', implode(',', $this->getData('store_ids')));\n        }\n        if (is_array($this->getData('widget_parameters'))) {\n            $this->setData('widget_parameters', serialize($this->getData('widget_parameters')));\n        }\n        $this->setData('page_groups', $tmpPageGroups);\n        $this->setData('page_group_ids', $pageGroupIds);\n\n        return parent::_beforeSave();\n    }\n\n    /**\n     * Validate widget instance data\n     *\n     * @return string|boolean\n     */\n    public function validate()\n    {\n        if ($this->isCompleteToCreate()) {\n            return true;\n        }\n        return Mage::helper('widget')->__('Widget instance is not full complete to create.');\n    }\n\n    /**\n     * Check if widget instance has required data (other data depends on it)\n     *\n     * @return boolean\n     */\n    public function isCompleteToCreate()\n    {\n        return (bool)($this->getType() && $this->getPackageTheme());\n    }\n\n    /**\n     * Setter\n     * Prepare widget type\n     *\n     * @param string $type\n     * @return $this\n     */\n    public function setType($type)\n    {\n        $this->setData('type', $type);\n        $this->_prepareType();\n        return $this;\n    }\n\n    /**\n     * Getter\n     * Prepare widget type\n     *\n     * @return string\n     */\n    public function getType()\n    {\n        $this->_prepareType();\n        return $this->_getData('type');\n    }\n\n    /**\n     * Replace '-' to '/', if was passed from request(GET request)\n     *\n     * @return $this\n     */\n    protected function _prepareType()\n    {\n        if (strpos($this->_getData('type'), '-') >= 0) {\n            $this->setData('type', str_replace('-', '/', $this->_getData('type')));\n        }\n        return $this;\n    }\n\n    /**\n     * Setter\n     * Prepare widget package theme\n     *\n     * @param string $packageTheme\n     * @return $this\n     */\n    public function setPackageTheme($packageTheme)\n    {\n        $this->setData('package_theme', $packageTheme);\n        return $this;\n    }\n\n    /**\n     * Getter\n     * Prepare widget package theme\n     *\n     * @return string\n     */\n    public function getPackageTheme()\n    {\n        return $this->_getData('package_theme');\n    }\n\n    /**\n     * Replace '_' to '/', if was set from request(GET request)\n     *\n     * @deprecated after 1.6.1.0-alpha1\n     *\n     * @return $this\n     */\n    protected function _preparePackageTheme()\n    {\n        return $this;\n    }\n\n    /**\n     * Getter.\n     * If not set return default\n     *\n     * @return string\n     */\n    public function getArea()\n    {\n        if (!$this->_getData('area')) {\n            return Mage_Core_Model_Design_Package::DEFAULT_AREA;\n        }\n        return $this->_getData('area');\n    }\n\n    /**\n     * Getter\n     *\n     * @return string\n     */\n    public function getPackage()\n    {\n        if (!$this->_getData('package')) {\n            $this->_parsePackageTheme();\n        }\n        return $this->_getData('package');\n    }\n\n    /**\n     * Getter\n     *\n     * @return string\n     */\n    public function getTheme()\n    {\n        if (!$this->_getData('theme')) {\n            $this->_parsePackageTheme();\n        }\n        return $this->_getData('theme');\n    }\n\n    /**\n     * Parse packageTheme and set parsed package and theme\n     *\n     * @return $this\n     */\n    protected function _parsePackageTheme()\n    {\n        if ($this->getPackageTheme() && strpos($this->getPackageTheme(), '/')) {\n            list($package, $theme) = explode('/', $this->getPackageTheme());\n            $this->setData('package', $package);\n            $this->setData('theme', $theme);\n        }\n        return $this;\n    }\n\n    /**\n     * Getter\n     * Explode to array if string setted\n     *\n     * @return array\n     */\n    public function getStoreIds()\n    {\n        if (is_string($this->getData('store_ids'))) {\n            return explode(',', $this->getData('store_ids'));\n        }\n        return $this->getData('store_ids');\n    }\n\n    /**\n     * Getter\n     * Unserialize if serialized string setted\n     *\n     * @return array\n     */\n    public function getWidgetParameters()\n    {\n        if (is_string($this->getData('widget_parameters'))) {\n            try {\n                return Mage::helper('core/unserializeArray')->unserialize($this->getData('widget_parameters'));\n            } catch (Exception $e) {\n                Mage::logException($e);\n            }\n        }\n        return (is_array($this->getData('widget_parameters'))) ? $this->getData('widget_parameters') : array();\n    }\n\n    /**\n     * Retrieve option array of widget types\n     *\n     * @return array\n     */\n    public function getWidgetsOptionArray()\n    {\n        $widgets = array();\n        $widgetsArr = Mage::getSingleton('widget/widget')->getWidgetsArray();\n        foreach ($widgetsArr as $widget) {\n            $widgets[] = array(\n                'value' => $widget['type'],\n                'label' => $widget['name']\n            );\n        }\n        return $widgets;\n    }\n\n    /**\n     * Load widget XML config and merge with theme widget config\n     *\n     * @return Varien_Simplexml_Element|null\n     */\n    public function getWidgetConfig()\n    {\n        if ($this->_widgetConfigXml === null) {\n            $this->_widgetConfigXml = Mage::getSingleton('widget/widget')\n                ->getXmlElementByType($this->getType());\n            if ($this->_widgetConfigXml) {\n                $configFile = Mage::getSingleton('core/design_package')->getBaseDir(array(\n                    '_area'    => $this->getArea(),\n                    '_package' => $this->getPackage(),\n                    '_theme'   => $this->getTheme(),\n                    '_type'    => 'etc'\n                )) . DS . 'widget.xml';\n                if (is_readable($configFile)) {\n                    $themeWidgetsConfig = new Varien_Simplexml_Config();\n                    $themeWidgetsConfig->loadFile($configFile);\n                    if ($themeWidgetTypeConfig = $themeWidgetsConfig->getNode($this->_widgetConfigXml->getName())) {\n                        $this->_widgetConfigXml->extend($themeWidgetTypeConfig);\n                    }\n                }\n            }\n        }\n        return $this->_widgetConfigXml;\n    }\n\n    /**\n     * Retrieve widget availabel templates\n     *\n     * @return array\n     */\n    public function getWidgetTemplates()\n    {\n        $templates = array();\n        if ($this->getWidgetConfig() && ($configTemplates = $this->getWidgetConfig()->parameters->template)) {\n            if ($configTemplates->values && $configTemplates->values->children()) {\n                foreach ($configTemplates->values->children() as $name => $template) {\n                    $helper = $template->getAttribute('module') ? $template->getAttribute('module') : 'widget';\n                    $templates[(string)$name] = array(\n                        'value' => (string)$template->value,\n                        'label' => Mage::helper($helper)->__((string)$template->label)\n                    );\n                }\n            } elseif ($configTemplates->value) {\n                $templates['default'] = array(\n                    'value' => (string)$configTemplates->value,\n                    'label' => Mage::helper('widget')->__('Default Template')\n                );\n            }\n        }\n        return $templates;\n    }\n\n    /**\n     * Retrieve blocks that widget support\n     *\n     * @return array\n     */\n    public function getWidgetSupportedBlocks()\n    {\n        $blocks = array();\n        if ($this->getWidgetConfig() && ($supportedBlocks = $this->getWidgetConfig()->supported_blocks)) {\n            foreach ($supportedBlocks->children() as $block) {\n                $blocks[] = (string)$block->block_name;\n            }\n        }\n        return $blocks;\n    }\n\n    /**\n     * Retrieve widget templates that supported by given block reference\n     *\n     * @param string $blockReference\n     * @return array\n     */\n    public function getWidgetSupportedTemplatesByBlock($blockReference)\n    {\n        $templates = array();\n        $widgetTemplates = $this->getWidgetTemplates();\n        if ($this->getWidgetConfig()) {\n            if (!($supportedBlocks = $this->getWidgetConfig()->supported_blocks)) {\n                return $widgetTemplates;\n            }\n            foreach ($supportedBlocks->children() as $block) {\n                if ((string)$block->block_name == $blockReference) {\n                    if ($block->template && $block->template->children()) {\n                        foreach ($block->template->children() as $template) {\n                            if (isset($widgetTemplates[(string)$template])) {\n                                $templates[] = $widgetTemplates[(string)$template];\n                            }\n                        }\n                    } else {\n                        $templates[] = $widgetTemplates[(string)$template];\n                    }\n                }\n            }\n        } else {\n            return $widgetTemplates;\n        }\n        return $templates;\n    }\n\n    /**\n     * Generate layout update xml\n     *\n     * @param string $blockReference\n     * @param string $templatePath\n     * @return string\n     */\n    public function generateLayoutUpdateXml($blockReference, $templatePath = '')\n    {\n      if ($templatePath !== htmlspecialchars($templatePath, ENT_QUOTES | ENT_HTML5)\n        || $blockReference !== htmlspecialchars($blockReference, ENT_QUOTES | ENT_HTML5)) {\n          Mage::throwException('Templatepath or block reference contain special characters.');\n      }\n\n        $templateFilename = Mage::getSingleton('core/design_package')->getTemplateFilename($templatePath, array(\n            '_area'    => $this->getArea(),\n            '_package' => $this->getPackage(),\n            '_theme'   => $this->getTheme()\n        ));\n        if (!$this->getId() && !$this->isCompleteToCreate()\n            || ($templatePath && !is_readable($templateFilename))) {\n            return '';\n        }\n        $parameters = $this->getWidgetParameters();\n        $xml = '<reference name=\"' . $blockReference . '\">';\n        $template = '';\n        if (isset($parameters['template'])) {\n            unset($parameters['template']);\n        }\n        if ($templatePath) {\n            $template = ' template=\"' . $templatePath . '\"';\n        }\n\n        $hash = Mage::helper('core')->uniqHash();\n        $xml .= '<block type=\"' . $this->getType() . '\" name=\"' . $hash . '\"' . $template . '>';\n        foreach ($parameters as $name => $value) {\n            if (is_array($value)) {\n                $value = implode(',', $value);\n            }\n            if ($name && strlen((string)$value)) {\n                $xml .= '<action method=\"setData\">'\n                    . '<name>' . $name . '</name>'\n                    . '<value>' . Mage::helper('widget')->escapeHtml($value) . '</value>'\n                    . '</action>';\n            }\n        }\n        $xml .= '</block></reference>';\n\n        return $xml;\n    }\n\n    /**\n     * Invalidate related cache types\n     *\n     * @return $this\n     */\n    protected function _invalidateCache()\n    {\n        $types = Mage::getConfig()->getNode(self::XML_NODE_RELATED_CACHE);\n        if ($types) {\n            $types = $types->asArray();\n            Mage::app()->getCacheInstance()->invalidateType(array_keys($types));\n        }\n        return $this;\n    }\n\n    /**\n     * Invalidate related cache if instance contain layout updates\n     */\n    protected function _afterSave()\n    {\n        if ($this->dataHasChangedFor('page_groups') || $this->dataHasChangedFor('widget_parameters')) {\n            $this->_invalidateCache();\n        }\n        return parent::_afterSave();\n    }\n\n    /**\n     * Invalidate related cache if instance contain layout updates\n     */\n    protected function _beforeDelete()\n    {\n        if ($this->getPageGroups()) {\n            $this->_invalidateCache();\n        }\n        return parent::_beforeDelete();\n    }\n}\n"], "filenames": ["app/code/core/Mage/Widget/Model/Widget/Instance.php"], "buggy_code_start_loc": [497], "buggy_code_end_loc": [497], "fixing_code_start_loc": [498], "fixing_code_end_loc": [503], "type": "CWE-22", "message": "OpenMage is a community-driven alternative to Magento CE. In OpenMage before versions 19.4.10 and 20.0.5, there is a vulnerability which enables remote code execution. In affected versions an administrator with permission to import/export data and to create widget instances was able to inject an executable file on the server. The latest OpenMage Versions up from 19.4.9 and 20.0.5 have this Issue solved", "other": {"cve": {"id": "CVE-2020-26285", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-21T14:15:12.620", "lastModified": "2021-01-28T16:21:54.703", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenMage is a community-driven alternative to Magento CE. In OpenMage before versions 19.4.10 and 20.0.5, there is a vulnerability which enables remote code execution. In affected versions an administrator with permission to import/export data and to create widget instances was able to inject an executable file on the server. The latest OpenMage Versions up from 19.4.9 and 20.0.5 have this Issue solved"}, {"lang": "es", "value": "OpenMage es una alternativa impulsada por la comunidad a Magento CE. En OpenMage versiones anteriores a 19.4.10 y 20.0.5, se presenta una vulnerabilidad que permite una ejecuci\u00f3n de c\u00f3digo remota. En las versiones afectadas, un administrador con permiso para importar/exportar datos y crear instancias de widgets pudo inyectar un archivo ejecutable en el servidor. Las \u00faltimas versiones de OpenMage hasta 19.4.9 y 20.0.5 tienen este problema solucionado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmage:openmage:*:*:*:*:lts:*:*:*", "versionEndExcluding": "19.4.10", "matchCriteriaId": "E706EF46-D4ED-40AD-B1D8-EAA875FB326B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmage:openmage:*:*:*:*:lts:*:*:*", "versionStartIncluding": "20.0.0", "versionEndExcluding": "20.0.5", "matchCriteriaId": "4258600B-5C75-41D6-A9C8-6D6AABC6CBF3"}]}]}], "references": [{"url": "https://github.com/OpenMage/magento-lts/commit/4132668f5009f17456fe644742026f56d2297586", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/releases/tag/v19.4.10", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/security/advisories/GHSA-hj6w-xrv3-wjj9", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenMage/magento-lts/commit/4132668f5009f17456fe644742026f56d2297586"}}