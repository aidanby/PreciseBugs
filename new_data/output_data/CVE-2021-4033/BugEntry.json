{"buggy_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\LanguageFormattings;\nuse App\\Entity\\Bookmark;\nuse App\\Entity\\User;\nuse App\\Repository\\BookmarkRepository;\nuse App\\Repository\\Query\\BaseQuery;\nuse App\\Timesheet\\DateTimeFactory;\nuse App\\Utils\\LocaleFormats;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController as BaseAbstractController;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Contracts\\Service\\ServiceSubscriberInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * The abstract base controller.\n * @method null|User getUser()\n */\nabstract class AbstractController extends BaseAbstractController implements ServiceSubscriberInterface\n{\n    /**\n     * @deprecated since 1.6, will be removed with 2.0\n     */\n    public const ROLE_ADMIN = User::ROLE_ADMIN;\n\n    protected function getTranslator(): TranslatorInterface\n    {\n        return $this->container->get('translator');\n    }\n\n    private function getLogger(): LoggerInterface\n    {\n        return $this->container->get('logger');\n    }\n\n    /**\n     * Adds a \"successful\" flash message to the stack.\n     *\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashSuccess(string $translationKey, array $parameter = []): void\n    {\n        $this->addFlashTranslated('success', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds a \"warning\" flash message to the stack.\n     *\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashWarning(string $translationKey, array $parameter = []): void\n    {\n        $this->addFlashTranslated('warning', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds a \"error\" flash message to the stack.\n     *\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashError(string $translationKey, array $parameter = []): void\n    {\n        $this->addFlashTranslated('error', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds an exception flash message for failed update/create actions.\n     *\n     * @param \\Exception $exception\n     */\n    protected function flashUpdateException(\\Exception $exception): void\n    {\n        $this->flashException($exception, 'action.update.error');\n    }\n\n    /**\n     * Adds an exception flash message for failed delete actions.\n     *\n     * @param \\Exception $exception\n     */\n    protected function flashDeleteException(\\Exception $exception): void\n    {\n        $this->flashException($exception, 'action.delete.error');\n    }\n\n    /**\n     * Adds a \"error\" flash message and logs the Exception.\n     *\n     * @param \\Exception $exception\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashException(\\Exception $exception, string $translationKey, array $parameter = []): void\n    {\n        $this->logException($exception);\n\n        if (!\\array_key_exists('%reason%', $parameter)) {\n            $parameter['%reason%'] = $exception->getMessage();\n        }\n\n        $this->addFlashTranslated('error', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds a fully translated (both $message and all keys in $parameter) flash message to the stack.\n     *\n     * @param string $type\n     * @param string $message\n     * @param array $parameter\n     */\n    protected function addFlashTranslated(string $type, string $message, array $parameter = []): void\n    {\n        if (!empty($parameter)) {\n            foreach ($parameter as $key => $value) {\n                $parameter[$key] = $this->getTranslator()->trans($value, [], 'flashmessages');\n            }\n            $message = $this->getTranslator()->trans(\n                $message,\n                $parameter,\n                'flashmessages'\n            );\n        }\n\n        $this->addFlash($type, $message);\n    }\n\n    protected function logException(\\Exception $ex): void\n    {\n        $this->getLogger()->critical($ex->getMessage());\n    }\n\n    public static function getSubscribedServices()\n    {\n        return array_merge(parent::getSubscribedServices(), [\n            'translator' => TranslatorInterface::class,\n            'logger' => LoggerInterface::class,\n            LanguageFormattings::class => LanguageFormattings::class,\n        ]);\n    }\n\n    protected function getDateTimeFactory(?User $user = null): DateTimeFactory\n    {\n        if (null === $user) {\n            $user = $this->getUser();\n        }\n\n        return DateTimeFactory::createByUser($user);\n    }\n\n    protected function getLocaleFormats(string $locale): LocaleFormats\n    {\n        return new LocaleFormats($this->container->get(LanguageFormattings::class), $locale);\n    }\n\n    private function getLastSearch(BaseQuery $query): ?array\n    {\n        $name = 'search_' . $this->getSearchName($query);\n\n        if (!$this->get('session')->has($name)) {\n            return null;\n        }\n\n        return $this->get('session')->get($name);\n    }\n\n    private function removeLastSearch(BaseQuery $query): void\n    {\n        $name = 'search_' . $this->getSearchName($query);\n\n        if ($this->get('session')->has($name)) {\n            $this->get('session')->remove($name);\n        }\n    }\n\n    private function getSearchName(BaseQuery $query): string\n    {\n        return substr($query->getName(), 0, 50);\n    }\n\n    /**\n     * @param Request $request\n     * @internal\n     */\n    protected function ignorePersistedSearch(Request $request): void\n    {\n        $request->query->set('performSearch', true);\n    }\n\n    protected function handleSearch(FormInterface $form, Request $request): bool\n    {\n        $data = $form->getData();\n        if (!($data instanceof BaseQuery)) {\n            throw new \\InvalidArgumentException('handleSearchForm() requires an instanceof BaseQuery as form data');\n        }\n\n        $actions = ['resetSearchFilter', 'removeDefaultQuery', 'setDefaultQuery'];\n        foreach ($actions as $action) {\n            if ($request->query->has($action)) {\n                if (!$this->isCsrfTokenValid('search', $request->query->get('_token'))) {\n                    $this->flashError('action.csrf.error');\n\n                    return false;\n                }\n            }\n        }\n\n        if ($request->query->has('resetSearchFilter')) {\n            $data->resetFilter();\n            $this->removeLastSearch($data);\n\n            return true;\n        }\n\n        $submitData = $request->query->all();\n        // allow to use forms with block-prefix\n        if (!empty($formName = $form->getConfig()->getName()) && $request->request->has($formName)) {\n            $submitData = $request->request->get($formName);\n        }\n\n        $searchName = $this->getSearchName($data);\n\n        /** @var BookmarkRepository $bookmarkRepo */\n        $bookmarkRepo = $this->getDoctrine()->getRepository(Bookmark::class);\n        $bookmark = $bookmarkRepo->getSearchDefaultOptions($this->getUser(), $searchName);\n\n        if ($bookmark !== null) {\n            if ($request->query->has('removeDefaultQuery')) {\n                $bookmarkRepo->deleteBookmark($bookmark);\n                $bookmark = null;\n\n                return true;\n            } else {\n                $data->setBookmark($bookmark);\n            }\n        }\n\n        // apply persisted search data ONLY if search form was not submitted manually\n        if (!$request->query->has('performSearch')) {\n            $sessionSearch = $this->getLastSearch($data);\n            if ($sessionSearch !== null) {\n                $submitData = array_merge($sessionSearch, $submitData);\n            } elseif ($bookmark !== null && !$request->query->has('setDefaultQuery')) {\n                $submitData = array_merge($bookmark->getContent(), $submitData);\n                $data->flagAsBookmarkSearch();\n            }\n        }\n\n        // clean up parameters from unknown search values\n        foreach ($submitData as $name => $values) {\n            if (!$form->has($name)) {\n                unset($submitData[$name]);\n            }\n        }\n\n        $form->submit($submitData, false);\n\n        if (!$form->isValid()) {\n            $data->resetByFormError($form->getErrors(true));\n\n            return false;\n        }\n\n        $params = [];\n        foreach ($form->all() as $name => $child) {\n            $params[$name] = $child->getViewData();\n        }\n\n        // these should NEVER be saved\n        $filter = ['setDefaultQuery', 'removeDefaultQuery', 'performSearch'];\n        foreach ($filter as $name) {\n            if (isset($params[$name])) {\n                unset($params[$name]);\n            }\n        }\n\n        if ($request->query->has('performSearch')) {\n            $this->get('session')->set('search_' . $searchName, $params);\n        }\n\n        // filter stuff, that does not belong in a bookmark\n        $filter = ['page'];\n        foreach ($filter as $name) {\n            if (isset($params[$name])) {\n                unset($params[$name]);\n            }\n        }\n\n        if ($request->query->has('setDefaultQuery')) {\n            $this->removeLastSearch($data);\n            if ($bookmark === null) {\n                $bookmark = new Bookmark();\n                $bookmark->setType(Bookmark::SEARCH_DEFAULT);\n                $bookmark->setUser($this->getUser());\n                $bookmark->setName($searchName);\n            }\n\n            $bookmark->setContent($params);\n            $bookmarkRepo->saveBookmark($bookmark);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Entity\\Customer;\nuse App\\Entity\\Invoice;\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Event\\InvoiceDocumentsEvent;\nuse App\\Export\\Spreadsheet\\AnnotatedObjectExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\InvoiceDocumentUploadForm;\nuse App\\Form\\InvoicePaymentDateForm;\nuse App\\Form\\InvoiceTemplateForm;\nuse App\\Form\\Toolbar\\InvoiceArchiveForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarSimpleForm;\nuse App\\Invoice\\ServiceInvoice;\nuse App\\Repository\\InvoiceDocumentRepository;\nuse App\\Repository\\InvoiceRepository;\nuse App\\Repository\\InvoiceTemplateRepository;\nuse App\\Repository\\Query\\BaseQuery;\nuse App\\Repository\\Query\\InvoiceArchiveQuery;\nuse App\\Repository\\Query\\InvoiceQuery;\nuse Exception;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * Controller used to create invoices and manage invoice templates.\n *\n * @Route(path=\"/invoice\")\n * @Security(\"is_granted('view_invoice')\")\n */\nfinal class InvoiceController extends AbstractController\n{\n    private $service;\n    private $templateRepository;\n    private $invoiceRepository;\n    private $dispatcher;\n\n    public function __construct(ServiceInvoice $service, InvoiceTemplateRepository $templateRepository, InvoiceRepository $invoiceRepository, EventDispatcherInterface $dispatcher)\n    {\n        $this->service = $service;\n        $this->templateRepository = $templateRepository;\n        $this->invoiceRepository = $invoiceRepository;\n        $this->dispatcher = $dispatcher;\n    }\n\n    /**\n     * @Route(path=\"/\", name=\"invoice\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function indexAction(Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            if ($this->isGranted('manage_invoice_template')) {\n                return $this->redirectToRoute('admin_invoice_template_create');\n            }\n            $this->flashWarning('invoice.first_template');\n        }\n\n        $query = $this->getDefaultQuery();\n\n        $token = null;\n        if ($request->query->has('token')) {\n            $token = $request->query->get('token');\n            $request->query->remove('token');\n        }\n\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $models = [];\n        $total = 0;\n        $searched = false;\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            if ($request->query->has('createInvoice')) {\n                if (!$this->isCsrfTokenValid('invoice.create', $token)) {\n                    $this->flashError('action.csrf.error');\n\n                    return $this->redirectToRoute('invoice');\n                }\n\n                try {\n                    return $this->renderInvoice($query, $request);\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError('action.update.error', ['%reason%' => 'check doctor/logs']);\n                }\n            }\n\n            if ($form->get('template')->getData() !== null) {\n                try {\n                    $models = $this->service->createModels($query);\n                    $searched = true;\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError($ex->getMessage());\n                }\n            }\n        }\n\n        foreach ($models as $model) {\n            $total += \\count($model->getCalculator()->getEntries());\n        }\n\n        return $this->render('invoice/index.html.twig', [\n            'models' => $models,\n            'form' => $form->createView(),\n            'limit_preview' => ($total > 500),\n            'searched' => $searched,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/preview/{customer}\", name=\"invoice_preview\", methods={\"GET\"})\n     * @Security(\"is_granted('access', customer)\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function previewAction(Customer $customer, Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        $form->submit($request->query->all(), false);\n\n        if ($form->isValid()) {\n            try {\n                $model = $this->service->createModel($query);\n\n                return $this->service->renderInvoiceWithModel($model, $this->dispatcher);\n            } catch (Exception $ex) {\n                $this->logException($ex);\n                $this->flashError('action.update.error', ['%reason%' => 'Failed generating invoice preview: ' . $ex->getMessage()]);\n            }\n        }\n\n        $this->flashFormError($form);\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/save-invoice/{customer}/{template}\", name=\"invoice_create\", methods={\"GET\"})\n     * @Security(\"is_granted('access', customer)\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function createInvoiceAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $token = null;\n        if ($request->query->has('token')) {\n            $token = $request->query->get('token');\n            $request->query->remove('token');\n        }\n\n        if (!$this->isCsrfTokenValid('invoice.create', $token)) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('invoice');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        $form->submit($request->query->all(), false);\n\n        if ($form->isValid()) {\n            $query->setTemplate($template);\n            $query->setCustomers([$customer]);\n\n            return $this->renderInvoice($query, $request);\n        }\n\n        $this->flashFormError($form);\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/change-status/{id}/{status}/{token}\", name=\"admin_invoice_status\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('access', invoice.getCustomer())\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function changeStatusAction(Invoice $invoice, string $status, string $token, Request $request, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.status', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $token = $csrfTokenManager->refreshToken('invoice.status');\n\n        if ($status === Invoice::STATUS_PAID) {\n            $form = $this->createPaymentDateForm($invoice, $status, $token->getValue());\n            $form->handleRequest($request);\n\n            if (!$form->isSubmitted() || !$form->isValid()) {\n                return $this->render('invoice/payment_date_edit.html.twig', [\n                    'invoice' => $invoice,\n                    'form' => $form->createView()\n                ]);\n            }\n        }\n\n        try {\n            $this->service->changeInvoiceStatus($invoice, $status);\n            $this->flashSuccess('action.update.success');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/delete/{id}/{token}\", name=\"admin_invoice_delete\", methods={\"GET\"})\n     * @Security(\"is_granted('access', invoice.getCustomer())\")\n     * @Security(\"is_granted('delete_invoice')\")\n     */\n    public function deleteInvoiceAction(Invoice $invoice, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.status', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $csrfTokenManager->refreshToken('invoice.status');\n\n        try {\n            $this->service->deleteInvoice($invoice);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/download/{id}\", name=\"admin_invoice_download\", methods={\"GET\"})\n     * @Security(\"is_granted('access', invoice.getCustomer())\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function downloadAction(Invoice $invoice): Response\n    {\n        $file = $this->service->getInvoiceFile($invoice);\n\n        if (null === $file) {\n            throw $this->createNotFoundException(\n                sprintf('Invoice file \"%s\" could not be found for invoice ID \"%s\"', $invoice->getInvoiceFilename(), $invoice->getId())\n            );\n        }\n\n        return $this->file($file->getRealPath(), $file->getBasename());\n    }\n\n    /**\n     * @Route(path=\"/show/{page}\", defaults={\"page\": 1}, requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_invoice_list\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function showInvoicesAction(Request $request, int $page): Response\n    {\n        $invoice = null;\n\n        if (null !== ($id = $request->get('id'))) {\n            $invoice = $this->invoiceRepository->find($id);\n        }\n\n        $query = new InvoiceArchiveQuery();\n        $query->setPage($page);\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $invoices = $this->invoiceRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/listing.html.twig', [\n            'entries' => $invoices,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'download' => $invoice,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"invoice_export\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function exportAction(Request $request, AnnotatedObjectExporter $exporter)\n    {\n        $query = new InvoiceArchiveQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        $entries = $this->invoiceRepository->getInvoicesForQuery($query);\n\n        $spreadsheet = $exporter->export(Invoice::class, $entries);\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-invoices');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    /**\n     * @Route(path=\"/template/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, defaults={\"page\": 1}, name=\"admin_invoice_template\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function listTemplateAction(int $page): Response\n    {\n        $query = new BaseQuery();\n        $query->setPage($page);\n\n        $templates = $this->templateRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/templates.html.twig', [\n            'entries' => $templates,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/edit\", name=\"admin_invoice_template_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function editTemplateAction(InvoiceTemplate $template, Request $request): Response\n    {\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/document_upload\", name=\"admin_invoice_document_upload\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('upload_invoice_template')\")\n     */\n    public function uploadDocumentAction(Request $request, string $projectDirectory, InvoiceDocumentRepository $documentRepository)\n    {\n        $dir = $documentRepository->getUploadDirectory();\n        $invoiceDir = $dir;\n\n        // do not execute realpath, as it will return an empty string if the invoice directory is NOT existing!\n        if ($invoiceDir[0] !== '/') {\n            $invoiceDir = $projectDirectory . DIRECTORY_SEPARATOR . $dir;\n        }\n\n        $used = [];\n        foreach ($this->templateRepository->findAll() as $template) {\n            $used[$template->getRenderer()] = $template;\n        }\n\n        $event = new InvoiceDocumentsEvent($this->service->getDocuments(true));\n        $this->dispatcher->dispatch($event);\n\n        $documents = [];\n        foreach ($event->getInvoiceDocuments() as $document) {\n            $isUsed = \\array_key_exists($document->getId(), $used);\n            $template = null;\n            if ($isUsed) {\n                $template = $used[$document->getId()];\n            }\n            $documents[] = [\n                'document' => $document,\n                'template' => $template,\n                'used' => $isUsed,\n            ];\n        }\n\n        $canUpload = true;\n        $uploadError = null;\n\n        if (\\count($documents) >= $event->getMaximumAllowedDocuments()) {\n            $uploadError = 'invoice_document.max_reached';\n            $canUpload = false;\n        }\n\n        if (!file_exists($invoiceDir)) {\n            @mkdir($invoiceDir, 0777);\n        }\n\n        if (!is_dir($invoiceDir)) {\n            $uploadError = 'error.directory_missing';\n            $canUpload = false;\n        } elseif (!is_writable($invoiceDir)) {\n            $uploadError = 'error.directory_protected';\n            $canUpload = false;\n        }\n\n        $form = $this->createForm(InvoiceDocumentUploadForm::class, null, [\n            'action' => $this->generateUrl('admin_invoice_document_upload', []),\n            'method' => 'POST'\n        ]);\n\n        if ($canUpload) {\n            $form->handleRequest($request);\n\n            if ($form->isSubmitted() && $form->isValid()) {\n                /** @var UploadedFile $uploadedFile */\n                $uploadedFile = $form->get('document')->getData();\n\n                $originalFilename = pathinfo($uploadedFile->getClientOriginalName(), PATHINFO_FILENAME);\n                $safeFilename = transliterator_transliterate(\n                    'Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()',\n                    $originalFilename\n                );\n\n                $extension = $uploadedFile->guessExtension();\n\n                $newFilename = substr($safeFilename, 0, 20) . '.' . $extension;\n\n                try {\n                    $uploadedFile->move($invoiceDir, $newFilename);\n                    $this->flashSuccess('action.update.success');\n\n                    return $this->redirectToRoute('admin_invoice_document_upload');\n                } catch (Exception $ex) {\n                    $this->flashException($ex, 'action.upload.error');\n                }\n            }\n        }\n\n        return $this->render('invoice/document_upload.html.twig', [\n            'error_replacer' => ['%max%' => $event->getMaximumAllowedDocuments(), '%dir%' => $dir],\n            'upload_error' => $uploadError,\n            'can_upload' => $canUpload,\n            'form' => $form->createView(),\n            'documents' => $documents,\n            'baseDirectory' => $projectDirectory . DIRECTORY_SEPARATOR,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/document/{id}/delete/{token}\", name=\"invoice_document_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function deleteDocument(string $id, string $token, CsrfTokenManagerInterface $csrfTokenManager, InvoiceDocumentRepository $documentRepository): Response\n    {\n        $document = $documentRepository->findByName($id);\n        if ($document === null) {\n            throw $this->createNotFoundException();\n        }\n\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete_document', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_document_upload');\n        }\n\n        $csrfTokenManager->refreshToken('invoice.delete_document');\n\n        foreach ($documentRepository->findBuiltIn() as $doc) {\n            if ($doc->getId() === $id) {\n                throw new \\Exception('Document is built-in and cannot be deleted');\n            }\n        }\n\n        foreach ($this->templateRepository->findAll() as $template) {\n            if ($template->getRenderer() === $id) {\n                throw new \\Exception('Document is used and cannot be deleted');\n            }\n        }\n\n        try {\n            $documentRepository->remove($document);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_document_upload');\n    }\n\n    /**\n     * @Route(path=\"/template/create\", name=\"admin_invoice_template_create\", methods={\"GET\", \"POST\"})\n     * @Route(path=\"/template/create/{id}\", name=\"admin_invoice_template_copy\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function createTemplateAction(Request $request, ?InvoiceTemplate $copyFrom): Response\n    {\n        $template = new InvoiceTemplate();\n\n        if (null !== $copyFrom) {\n            $template = clone $copyFrom;\n            $template->setName('Copy of ' . $copyFrom->getName());\n        }\n\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/delete/{token}\", name=\"admin_invoice_template_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function deleteTemplate(InvoiceTemplate $template, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete_template', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_template');\n        }\n\n        $csrfTokenManager->refreshToken('invoice.delete_template');\n\n        try {\n            $this->templateRepository->removeTemplate($template);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_template');\n    }\n\n    private function getDefaultQuery(): InvoiceQuery\n    {\n        $factory = $this->getDateTimeFactory();\n        $begin = $factory->getStartOfMonth();\n        $end = $factory->getEndOfMonth();\n\n        $query = new InvoiceQuery();\n        $query->setBegin($begin);\n        $query->setEnd($end);\n        // limit access to data from teams\n        $query->setCurrentUser($this->getUser());\n\n        if (!$this->isGranted('view_other_timesheet')) {\n            // limit access to own data\n            $query->setUser($this->getUser());\n        }\n\n        return $query;\n    }\n\n    private function renderInvoice(InvoiceQuery $query, Request $request)\n    {\n        // use the current request locale as fallback, if no translation was configured\n        if (null !== $query->getTemplate() && null === $query->getTemplate()->getLanguage()) {\n            $query->getTemplate()->setLanguage($request->getLocale());\n        }\n\n        try {\n            $invoices = $this->service->createInvoices($query, $this->dispatcher);\n\n            $this->flashSuccess('action.update.success');\n\n            if (\\count($invoices) === 1) {\n                return $this->redirectToRoute('admin_invoice_list', ['id' => $invoices[0]->getId()]);\n            }\n\n            return $this->redirectToRoute('admin_invoice_list');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    private function flashFormError(FormInterface $form): void\n    {\n        $err = '';\n        foreach ($form->getErrors(true, true) as $error) {\n            $err .= PHP_EOL . '[' . $error->getOrigin()->getName() . '] ' . $error->getMessage();\n        }\n\n        $this->flashError('action.update.error', ['%reason%' => $err]);\n    }\n\n    private function renderTemplateForm(InvoiceTemplate $template, Request $request): Response\n    {\n        $editForm = $this->createEditForm($template);\n\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->templateRepository->saveTemplate($template);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('admin_invoice_template');\n            } catch (Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('invoice/template_edit.html.twig', [\n            'template' => $template,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    private function getToolbarForm(InvoiceQuery $query, bool $simple): FormInterface\n    {\n        $form = $simple ? InvoiceToolbarSimpleForm::class : InvoiceToolbarForm::class;\n\n        return $this->createForm($form, $query, [\n            'action' => $this->generateUrl('invoice', []),\n            'method' => 'GET',\n            'include_user' => $this->isGranted('view_other_timesheet'),\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-print-form'\n            ],\n        ]);\n    }\n\n    private function getArchiveToolbarForm(InvoiceArchiveQuery $query): FormInterface\n    {\n        return $this->createForm(InvoiceArchiveForm::class, $query, [\n            'action' => $this->generateUrl('admin_invoice_list', []),\n            'method' => 'GET',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-archive-form'\n            ],\n        ]);\n    }\n\n    private function createEditForm(InvoiceTemplate $template): FormInterface\n    {\n        if ($template->getId() === null) {\n            $url = $this->generateUrl('admin_invoice_template_create');\n        } else {\n            $url = $this->generateUrl('admin_invoice_template_edit', ['id' => $template->getId()]);\n        }\n\n        return $this->createForm(InvoiceTemplateForm::class, $template, [\n            'action' => $url,\n            'method' => 'POST'\n        ]);\n    }\n\n    private function createPaymentDateForm(Invoice $invoice, string $status, string $token): FormInterface\n    {\n        if (null === $invoice->getPaymentDate()) {\n            $invoice->setPaymentDate($this->getDateTimeFactory()->createDateTime());\n        }\n\n        $url = $this->generateUrl('admin_invoice_status', ['id' => $invoice->getId(), 'status' => $status, 'token' => $token]);\n\n        return $this->createForm(InvoicePaymentDateForm::class, $invoice, [\n            'action' => $url,\n            'method' => 'POST',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Form\\Extension;\n\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\nuse Symfony\\Component\\Form\\AbstractTypeExtension;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\Form\\FormView;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\n/**\n * Support Remote-API calls for Entity select-boxes.\n */\nclass SelectWithApiDataExtension extends AbstractTypeExtension\n{\n    /**\n     * @var UrlGeneratorInterface\n     */\n    private $router;\n\n    /**\n     * @param UrlGeneratorInterface $router\n     */\n    public function __construct(UrlGeneratorInterface $router)\n    {\n        $this->router = $router;\n    }\n\n    public static function getExtendedTypes(): iterable\n    {\n        return [EntityType::class];\n    }\n\n    /**\n     * @param FormView $view\n     * @param FormInterface $form\n     * @param array $options\n     */\n    public function buildView(FormView $view, FormInterface $form, array $options)\n    {\n        if (!isset($options['api_data'])) {\n            return;\n        }\n\n        $apiData = $options['api_data'];\n\n        if (!\\is_array($apiData)) {\n            throw new \\InvalidArgumentException('Option \"api_data\" must be an array for form \"' . $form->getName() . '\"');\n        }\n\n        if (!isset($apiData['select'])) {\n            return;\n        }\n\n        if (!isset($apiData['route'])) {\n            throw new \\InvalidArgumentException('Missing \"route\" option for \"api_data\" option for form \"' . $form->getName() . '\"');\n        }\n\n        if (!isset($apiData['route_params'])) {\n            $apiData['route_params'] = [];\n        }\n\n        $formPrefixes = [];\n        $parent = $form->getParent();\n        do {\n            $formPrefixes[] = $parent->getName();\n        } while (($parent = $parent->getParent()) !== null);\n\n        $formPrefix = implode('_', array_reverse($formPrefixes));\n\n        $formField = $formPrefix . '_' . $apiData['select'];\n\n        $view->vars['attr'] = array_merge($view->vars['attr'], [\n            'data-form-prefix' => $formPrefix,\n            'data-related-select' => $formField,\n            'data-api-url' => $this->router->generate($apiData['route'], $apiData['route_params']),\n        ]);\n\n        if (isset($apiData['empty_route_params'])) {\n            $view->vars['attr'] = array_merge($view->vars['attr'], [\n                'data-empty-url' => $this->router->generate($apiData['route'], $apiData['empty_route_params']),\n            ]);\n        }\n    }\n\n    /**\n     * @param OptionsResolver $resolver\n     */\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefined(['api_data']);\n        $resolver->setAllowedTypes('api_data', 'array');\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\LanguageFormattings;\nuse App\\Entity\\Bookmark;\nuse App\\Entity\\User;\nuse App\\Repository\\BookmarkRepository;\nuse App\\Repository\\Query\\BaseQuery;\nuse App\\Timesheet\\DateTimeFactory;\nuse App\\Utils\\LocaleFormats;\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController as BaseAbstractController;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Contracts\\Service\\ServiceSubscriberInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * The abstract base controller.\n * @method null|User getUser()\n */\nabstract class AbstractController extends BaseAbstractController implements ServiceSubscriberInterface\n{\n    /**\n     * @deprecated since 1.6, will be removed with 2.0\n     */\n    public const ROLE_ADMIN = User::ROLE_ADMIN;\n\n    protected function getTranslator(): TranslatorInterface\n    {\n        return $this->container->get('translator');\n    }\n\n    private function getLogger(): LoggerInterface\n    {\n        return $this->container->get('logger');\n    }\n\n    /**\n     * Adds a \"successful\" flash message to the stack.\n     *\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashSuccess(string $translationKey, array $parameter = []): void\n    {\n        $this->addFlashTranslated('success', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds a \"warning\" flash message to the stack.\n     *\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashWarning(string $translationKey, array $parameter = []): void\n    {\n        $this->addFlashTranslated('warning', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds a \"error\" flash message to the stack.\n     *\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashError(string $translationKey, array $parameter = []): void\n    {\n        $this->addFlashTranslated('error', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds an exception flash message for failed update/create actions.\n     *\n     * @param \\Exception $exception\n     */\n    protected function flashUpdateException(\\Exception $exception): void\n    {\n        $this->flashException($exception, 'action.update.error');\n    }\n\n    /**\n     * Adds an exception flash message for failed delete actions.\n     *\n     * @param \\Exception $exception\n     */\n    protected function flashDeleteException(\\Exception $exception): void\n    {\n        $this->flashException($exception, 'action.delete.error');\n    }\n\n    /**\n     * Adds a \"error\" flash message and logs the Exception.\n     *\n     * @param \\Exception $exception\n     * @param string $translationKey\n     * @param array $parameter\n     */\n    protected function flashException(\\Exception $exception, string $translationKey, array $parameter = []): void\n    {\n        $this->logException($exception);\n\n        if (!\\array_key_exists('%reason%', $parameter)) {\n            $parameter['%reason%'] = $exception->getMessage();\n        }\n\n        $this->addFlashTranslated('error', $translationKey, $parameter);\n    }\n\n    /**\n     * Adds a fully translated (both $message and all keys in $parameter) flash message to the stack.\n     *\n     * @param string $type\n     * @param string $message\n     * @param array $parameter\n     */\n    protected function addFlashTranslated(string $type, string $message, array $parameter = []): void\n    {\n        if (!empty($parameter)) {\n            foreach ($parameter as $key => $value) {\n                $parameter[$key] = $this->getTranslator()->trans($value, [], 'flashmessages');\n            }\n            $message = $this->getTranslator()->trans(\n                $message,\n                $parameter,\n                'flashmessages'\n            );\n        }\n\n        $this->addFlash($type, $message);\n    }\n\n    protected function logException(\\Exception $ex): void\n    {\n        $this->getLogger()->critical($ex->getMessage());\n    }\n\n    public static function getSubscribedServices()\n    {\n        return array_merge(parent::getSubscribedServices(), [\n            'translator' => TranslatorInterface::class,\n            'logger' => LoggerInterface::class,\n            LanguageFormattings::class => LanguageFormattings::class,\n        ]);\n    }\n\n    protected function getDateTimeFactory(?User $user = null): DateTimeFactory\n    {\n        if (null === $user) {\n            $user = $this->getUser();\n        }\n\n        return DateTimeFactory::createByUser($user);\n    }\n\n    protected function getLocaleFormats(string $locale): LocaleFormats\n    {\n        return new LocaleFormats($this->container->get(LanguageFormattings::class), $locale);\n    }\n\n    private function getLastSearch(BaseQuery $query): ?array\n    {\n        $name = 'search_' . $this->getSearchName($query);\n\n        if (!$this->get('session')->has($name)) {\n            return null;\n        }\n\n        return $this->get('session')->get($name);\n    }\n\n    private function removeLastSearch(BaseQuery $query): void\n    {\n        $name = 'search_' . $this->getSearchName($query);\n\n        if ($this->get('session')->has($name)) {\n            $this->get('session')->remove($name);\n        }\n    }\n\n    private function getSearchName(BaseQuery $query): string\n    {\n        return substr($query->getName(), 0, 50);\n    }\n\n    /**\n     * @param Request $request\n     * @internal\n     */\n    protected function ignorePersistedSearch(Request $request): void\n    {\n        $request->query->set('performSearch', true);\n    }\n\n    protected function handleSearch(FormInterface $form, Request $request): bool\n    {\n        $data = $form->getData();\n        if (!($data instanceof BaseQuery)) {\n            throw new \\InvalidArgumentException('handleSearchForm() requires an instanceof BaseQuery as form data');\n        }\n\n        $actions = ['resetSearchFilter', 'removeDefaultQuery', 'setDefaultQuery'];\n        foreach ($actions as $action) {\n            if ($request->query->has($action)) {\n                if (!$this->isCsrfTokenValid('search', $request->query->get('_token'))) {\n                    $this->flashError('action.csrf.error');\n\n                    return false;\n                }\n            }\n        }\n\n        $request->query->remove('_token');\n\n        if ($request->query->has('resetSearchFilter')) {\n            $data->resetFilter();\n            $this->removeLastSearch($data);\n\n            return true;\n        }\n\n        $submitData = $request->query->all();\n        // allow to use forms with block-prefix\n        if (!empty($formName = $form->getConfig()->getName()) && $request->request->has($formName)) {\n            $submitData = $request->request->get($formName);\n        }\n\n        $searchName = $this->getSearchName($data);\n\n        /** @var BookmarkRepository $bookmarkRepo */\n        $bookmarkRepo = $this->getDoctrine()->getRepository(Bookmark::class);\n        $bookmark = $bookmarkRepo->getSearchDefaultOptions($this->getUser(), $searchName);\n\n        if ($bookmark !== null) {\n            if ($request->query->has('removeDefaultQuery')) {\n                $bookmarkRepo->deleteBookmark($bookmark);\n                $bookmark = null;\n\n                return true;\n            } else {\n                $data->setBookmark($bookmark);\n            }\n        }\n\n        // apply persisted search data ONLY if search form was not submitted manually\n        if (!$request->query->has('performSearch')) {\n            $sessionSearch = $this->getLastSearch($data);\n            if ($sessionSearch !== null) {\n                $submitData = array_merge($sessionSearch, $submitData);\n            } elseif ($bookmark !== null && !$request->query->has('setDefaultQuery')) {\n                $submitData = array_merge($bookmark->getContent(), $submitData);\n                $data->flagAsBookmarkSearch();\n            }\n        }\n\n        // clean up parameters from unknown search values\n        foreach ($submitData as $name => $values) {\n            if (!$form->has($name)) {\n                unset($submitData[$name]);\n            }\n        }\n\n        $form->submit($submitData, false);\n\n        if (!$form->isValid()) {\n            $data->resetByFormError($form->getErrors(true));\n\n            return false;\n        }\n\n        $params = [];\n        foreach ($form->all() as $name => $child) {\n            $params[$name] = $child->getViewData();\n        }\n\n        // these should NEVER be saved\n        $filter = ['setDefaultQuery', 'removeDefaultQuery', 'performSearch'];\n        foreach ($filter as $name) {\n            if (isset($params[$name])) {\n                unset($params[$name]);\n            }\n        }\n\n        if ($request->query->has('performSearch')) {\n            $this->get('session')->set('search_' . $searchName, $params);\n        }\n\n        // filter stuff, that does not belong in a bookmark\n        $filter = ['page'];\n        foreach ($filter as $name) {\n            if (isset($params[$name])) {\n                unset($params[$name]);\n            }\n        }\n\n        if ($request->query->has('setDefaultQuery')) {\n            $this->removeLastSearch($data);\n            if ($bookmark === null) {\n                $bookmark = new Bookmark();\n                $bookmark->setType(Bookmark::SEARCH_DEFAULT);\n                $bookmark->setUser($this->getUser());\n                $bookmark->setName($searchName);\n            }\n\n            $bookmark->setContent($params);\n            $bookmarkRepo->saveBookmark($bookmark);\n\n            return true;\n        }\n\n        return false;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Controller;\n\nuse App\\Configuration\\SystemConfiguration;\nuse App\\Entity\\Customer;\nuse App\\Entity\\Invoice;\nuse App\\Entity\\InvoiceTemplate;\nuse App\\Event\\InvoiceDocumentsEvent;\nuse App\\Export\\Spreadsheet\\AnnotatedObjectExporter;\nuse App\\Export\\Spreadsheet\\Writer\\BinaryFileResponseWriter;\nuse App\\Export\\Spreadsheet\\Writer\\XlsxWriter;\nuse App\\Form\\InvoiceDocumentUploadForm;\nuse App\\Form\\InvoicePaymentDateForm;\nuse App\\Form\\InvoiceTemplateForm;\nuse App\\Form\\Toolbar\\InvoiceArchiveForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarForm;\nuse App\\Form\\Toolbar\\InvoiceToolbarSimpleForm;\nuse App\\Invoice\\ServiceInvoice;\nuse App\\Repository\\InvoiceDocumentRepository;\nuse App\\Repository\\InvoiceRepository;\nuse App\\Repository\\InvoiceTemplateRepository;\nuse App\\Repository\\Query\\BaseQuery;\nuse App\\Repository\\Query\\InvoiceArchiveQuery;\nuse App\\Repository\\Query\\InvoiceQuery;\nuse Exception;\nuse Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Security;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Csrf\\CsrfToken;\nuse Symfony\\Component\\Security\\Csrf\\CsrfTokenManagerInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * Controller used to create invoices and manage invoice templates.\n *\n * @Route(path=\"/invoice\")\n * @Security(\"is_granted('view_invoice')\")\n */\nfinal class InvoiceController extends AbstractController\n{\n    private $service;\n    private $templateRepository;\n    private $invoiceRepository;\n    private $dispatcher;\n\n    public function __construct(ServiceInvoice $service, InvoiceTemplateRepository $templateRepository, InvoiceRepository $invoiceRepository, EventDispatcherInterface $dispatcher)\n    {\n        $this->service = $service;\n        $this->templateRepository = $templateRepository;\n        $this->invoiceRepository = $invoiceRepository;\n        $this->dispatcher = $dispatcher;\n    }\n\n    /**\n     * @Route(path=\"/\", name=\"invoice\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function indexAction(Request $request, SystemConfiguration $configuration, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            if ($this->isGranted('manage_invoice_template')) {\n                return $this->redirectToRoute('admin_invoice_template_create');\n            }\n            $this->flashWarning('invoice.first_template');\n        }\n\n        $query = $this->getDefaultQuery();\n\n        $token = null;\n        if ($request->query->has('token')) {\n            $token = $request->query->get('token');\n            $request->query->remove('token');\n        }\n\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $models = [];\n        $total = 0;\n        $searched = false;\n\n        if ($form->isValid() && $this->isGranted('create_invoice')) {\n            if ($request->query->has('createInvoice')) {\n                if (!$this->isCsrfTokenValid('invoice.create', $token)) {\n                    $this->flashError('action.csrf.error');\n\n                    return $this->redirectToRoute('invoice');\n                }\n\n                $csrfTokenManager->refreshToken('invoice.create');\n\n                try {\n                    return $this->renderInvoice($query, $request);\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError('action.update.error', ['%reason%' => 'check doctor/logs']);\n                }\n            }\n\n            if ($form->get('template')->getData() !== null) {\n                try {\n                    $models = $this->service->createModels($query);\n                    $searched = true;\n                } catch (Exception $ex) {\n                    $this->logException($ex);\n                    $this->flashError($ex->getMessage());\n                }\n            }\n        }\n\n        foreach ($models as $model) {\n            $total += \\count($model->getCalculator()->getEntries());\n        }\n\n        return $this->render('invoice/index.html.twig', [\n            'models' => $models,\n            'form' => $form->createView(),\n            'limit_preview' => ($total > 500),\n            'searched' => $searched,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/preview/{customer}\", name=\"invoice_preview\", methods={\"GET\"})\n     * @Security(\"is_granted('access', customer)\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function previewAction(Customer $customer, Request $request, SystemConfiguration $configuration): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        $form->submit($request->query->all(), false);\n\n        if ($form->isValid()) {\n            try {\n                $query->setCustomers([$customer]);\n                $model = $this->service->createModel($query);\n\n                return $this->service->renderInvoiceWithModel($model, $this->dispatcher);\n            } catch (Exception $ex) {\n                $this->logException($ex);\n                $this->flashError('action.update.error', ['%reason%' => 'Failed generating invoice preview: ' . $ex->getMessage()]);\n            }\n        }\n\n        $this->flashFormError($form);\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/save-invoice/{customer}/{template}\", name=\"invoice_create\", methods={\"GET\"})\n     * @Security(\"is_granted('access', customer)\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function createInvoiceAction(Customer $customer, InvoiceTemplate $template, Request $request, SystemConfiguration $configuration, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$this->templateRepository->hasTemplate()) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        $token = null;\n        if ($request->query->has('token')) {\n            $token = $request->query->get('token');\n            $request->query->remove('token');\n        }\n\n        if (!$this->isCsrfTokenValid('invoice.create', $token)) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('invoice');\n        }\n\n        $csrfTokenManager->refreshToken('invoice.create');\n\n        $query = $this->getDefaultQuery();\n        $form = $this->getToolbarForm($query, $configuration->find('invoice.simple_form'));\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('invoice');\n        }\n\n        if ($form->isValid()) {\n            $query->setTemplate($template);\n            $query->setCustomers([$customer]);\n\n            return $this->renderInvoice($query, $request);\n        }\n\n        $this->flashFormError($form);\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    /**\n     * @Route(path=\"/change-status/{id}/{status}/{token}\", name=\"admin_invoice_status\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('access', invoice.getCustomer())\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function changeStatusAction(Invoice $invoice, string $status, string $token, Request $request, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.status', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $token = $csrfTokenManager->refreshToken('invoice.status');\n\n        if ($status === Invoice::STATUS_PAID) {\n            $form = $this->createPaymentDateForm($invoice, $status, $token->getValue());\n            $form->handleRequest($request);\n\n            if (!$form->isSubmitted() || !$form->isValid()) {\n                return $this->render('invoice/payment_date_edit.html.twig', [\n                    'invoice' => $invoice,\n                    'form' => $form->createView()\n                ]);\n            }\n        }\n\n        try {\n            $this->service->changeInvoiceStatus($invoice, $status);\n            $this->flashSuccess('action.update.success');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/delete/{id}/{token}\", name=\"admin_invoice_delete\", methods={\"GET\"})\n     * @Security(\"is_granted('access', invoice.getCustomer())\")\n     * @Security(\"is_granted('delete_invoice')\")\n     */\n    public function deleteInvoiceAction(Invoice $invoice, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.status', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $csrfTokenManager->refreshToken('invoice.status');\n\n        try {\n            $this->service->deleteInvoice($invoice);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_list');\n    }\n\n    /**\n     * @Route(path=\"/download/{id}\", name=\"admin_invoice_download\", methods={\"GET\"})\n     * @Security(\"is_granted('access', invoice.getCustomer())\")\n     * @Security(\"is_granted('create_invoice')\")\n     */\n    public function downloadAction(Invoice $invoice): Response\n    {\n        $file = $this->service->getInvoiceFile($invoice);\n\n        if (null === $file) {\n            throw $this->createNotFoundException(\n                sprintf('Invoice file \"%s\" could not be found for invoice ID \"%s\"', $invoice->getInvoiceFilename(), $invoice->getId())\n            );\n        }\n\n        return $this->file($file->getRealPath(), $file->getBasename());\n    }\n\n    /**\n     * @Route(path=\"/show/{page}\", defaults={\"page\": 1}, requirements={\"page\": \"[1-9]\\d*\"}, name=\"admin_invoice_list\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function showInvoicesAction(Request $request, int $page): Response\n    {\n        $invoice = null;\n\n        if (null !== ($id = $request->get('id'))) {\n            $invoice = $this->invoiceRepository->find($id);\n        }\n\n        $query = new InvoiceArchiveQuery();\n        $query->setPage($page);\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        if ($this->handleSearch($form, $request)) {\n            return $this->redirectToRoute('admin_invoice_list');\n        }\n\n        $invoices = $this->invoiceRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/listing.html.twig', [\n            'entries' => $invoices,\n            'query' => $query,\n            'toolbarForm' => $form->createView(),\n            'download' => $invoice,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/export\", name=\"invoice_export\", methods={\"GET\"})\n     * @Security(\"is_granted('view_invoice')\")\n     */\n    public function exportAction(Request $request, AnnotatedObjectExporter $exporter)\n    {\n        $query = new InvoiceArchiveQuery();\n        $query->setCurrentUser($this->getUser());\n\n        $form = $this->getArchiveToolbarForm($query);\n        $form->setData($query);\n        $form->submit($request->query->all(), false);\n\n        $entries = $this->invoiceRepository->getInvoicesForQuery($query);\n\n        $spreadsheet = $exporter->export(Invoice::class, $entries);\n        $writer = new BinaryFileResponseWriter(new XlsxWriter(), 'kimai-invoices');\n\n        return $writer->getFileResponse($spreadsheet);\n    }\n\n    /**\n     * @Route(path=\"/template/{page}\", requirements={\"page\": \"[1-9]\\d*\"}, defaults={\"page\": 1}, name=\"admin_invoice_template\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function listTemplateAction(int $page): Response\n    {\n        $query = new BaseQuery();\n        $query->setPage($page);\n\n        $templates = $this->templateRepository->getPagerfantaForQuery($query);\n\n        return $this->render('invoice/templates.html.twig', [\n            'entries' => $templates,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/edit\", name=\"admin_invoice_template_edit\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function editTemplateAction(InvoiceTemplate $template, Request $request): Response\n    {\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/document_upload\", name=\"admin_invoice_document_upload\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('upload_invoice_template')\")\n     */\n    public function uploadDocumentAction(Request $request, string $projectDirectory, InvoiceDocumentRepository $documentRepository)\n    {\n        $dir = $documentRepository->getUploadDirectory();\n        $invoiceDir = $dir;\n\n        // do not execute realpath, as it will return an empty string if the invoice directory is NOT existing!\n        if ($invoiceDir[0] !== '/') {\n            $invoiceDir = $projectDirectory . DIRECTORY_SEPARATOR . $dir;\n        }\n\n        $used = [];\n        foreach ($this->templateRepository->findAll() as $template) {\n            $used[$template->getRenderer()] = $template;\n        }\n\n        $event = new InvoiceDocumentsEvent($this->service->getDocuments(true));\n        $this->dispatcher->dispatch($event);\n\n        $documents = [];\n        foreach ($event->getInvoiceDocuments() as $document) {\n            $isUsed = \\array_key_exists($document->getId(), $used);\n            $template = null;\n            if ($isUsed) {\n                $template = $used[$document->getId()];\n            }\n            $documents[] = [\n                'document' => $document,\n                'template' => $template,\n                'used' => $isUsed,\n            ];\n        }\n\n        $canUpload = true;\n        $uploadError = null;\n\n        if (\\count($documents) >= $event->getMaximumAllowedDocuments()) {\n            $uploadError = 'invoice_document.max_reached';\n            $canUpload = false;\n        }\n\n        if (!file_exists($invoiceDir)) {\n            @mkdir($invoiceDir, 0777);\n        }\n\n        if (!is_dir($invoiceDir)) {\n            $uploadError = 'error.directory_missing';\n            $canUpload = false;\n        } elseif (!is_writable($invoiceDir)) {\n            $uploadError = 'error.directory_protected';\n            $canUpload = false;\n        }\n\n        $form = $this->createForm(InvoiceDocumentUploadForm::class, null, [\n            'action' => $this->generateUrl('admin_invoice_document_upload', []),\n            'method' => 'POST'\n        ]);\n\n        if ($canUpload) {\n            $form->handleRequest($request);\n\n            if ($form->isSubmitted() && $form->isValid()) {\n                /** @var UploadedFile $uploadedFile */\n                $uploadedFile = $form->get('document')->getData();\n\n                $originalFilename = pathinfo($uploadedFile->getClientOriginalName(), PATHINFO_FILENAME);\n                $safeFilename = transliterator_transliterate(\n                    'Any-Latin; Latin-ASCII; [^A-Za-z0-9_] remove; Lower()',\n                    $originalFilename\n                );\n\n                $extension = $uploadedFile->guessExtension();\n\n                $newFilename = substr($safeFilename, 0, 20) . '.' . $extension;\n\n                try {\n                    $uploadedFile->move($invoiceDir, $newFilename);\n                    $this->flashSuccess('action.update.success');\n\n                    return $this->redirectToRoute('admin_invoice_document_upload');\n                } catch (Exception $ex) {\n                    $this->flashException($ex, 'action.upload.error');\n                }\n            }\n        }\n\n        return $this->render('invoice/document_upload.html.twig', [\n            'error_replacer' => ['%max%' => $event->getMaximumAllowedDocuments(), '%dir%' => $dir],\n            'upload_error' => $uploadError,\n            'can_upload' => $canUpload,\n            'form' => $form->createView(),\n            'documents' => $documents,\n            'baseDirectory' => $projectDirectory . DIRECTORY_SEPARATOR,\n        ]);\n    }\n\n    /**\n     * @Route(path=\"/document/{id}/delete/{token}\", name=\"invoice_document_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function deleteDocument(string $id, string $token, CsrfTokenManagerInterface $csrfTokenManager, InvoiceDocumentRepository $documentRepository): Response\n    {\n        $document = $documentRepository->findByName($id);\n        if ($document === null) {\n            throw $this->createNotFoundException();\n        }\n\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete_document', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_document_upload');\n        }\n\n        $csrfTokenManager->refreshToken('invoice.delete_document');\n\n        foreach ($documentRepository->findBuiltIn() as $doc) {\n            if ($doc->getId() === $id) {\n                throw new \\Exception('Document is built-in and cannot be deleted');\n            }\n        }\n\n        foreach ($this->templateRepository->findAll() as $template) {\n            if ($template->getRenderer() === $id) {\n                throw new \\Exception('Document is used and cannot be deleted');\n            }\n        }\n\n        try {\n            $documentRepository->remove($document);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_document_upload');\n    }\n\n    /**\n     * @Route(path=\"/template/create\", name=\"admin_invoice_template_create\", methods={\"GET\", \"POST\"})\n     * @Route(path=\"/template/create/{id}\", name=\"admin_invoice_template_copy\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function createTemplateAction(Request $request, ?InvoiceTemplate $copyFrom): Response\n    {\n        $template = new InvoiceTemplate();\n\n        if (null !== $copyFrom) {\n            $template = clone $copyFrom;\n            $template->setName('Copy of ' . $copyFrom->getName());\n        }\n\n        return $this->renderTemplateForm($template, $request);\n    }\n\n    /**\n     * @Route(path=\"/template/{id}/delete/{token}\", name=\"admin_invoice_template_delete\", methods={\"GET\", \"POST\"})\n     * @Security(\"is_granted('manage_invoice_template')\")\n     */\n    public function deleteTemplate(InvoiceTemplate $template, string $token, CsrfTokenManagerInterface $csrfTokenManager): Response\n    {\n        if (!$csrfTokenManager->isTokenValid(new CsrfToken('invoice.delete_template', $token))) {\n            $this->flashError('action.csrf.error');\n\n            return $this->redirectToRoute('admin_invoice_template');\n        }\n\n        $csrfTokenManager->refreshToken('invoice.delete_template');\n\n        try {\n            $this->templateRepository->removeTemplate($template);\n            $this->flashSuccess('action.delete.success');\n        } catch (Exception $ex) {\n            $this->flashDeleteException($ex);\n        }\n\n        return $this->redirectToRoute('admin_invoice_template');\n    }\n\n    private function getDefaultQuery(): InvoiceQuery\n    {\n        $factory = $this->getDateTimeFactory();\n        $begin = $factory->getStartOfMonth();\n        $end = $factory->getEndOfMonth();\n\n        $query = new InvoiceQuery();\n        $query->setBegin($begin);\n        $query->setEnd($end);\n        // limit access to data from teams\n        $query->setCurrentUser($this->getUser());\n\n        if (!$this->isGranted('view_other_timesheet')) {\n            // limit access to own data\n            $query->setUser($this->getUser());\n        }\n\n        return $query;\n    }\n\n    private function renderInvoice(InvoiceQuery $query, Request $request)\n    {\n        // use the current request locale as fallback, if no translation was configured\n        if (null !== $query->getTemplate() && null === $query->getTemplate()->getLanguage()) {\n            $query->getTemplate()->setLanguage($request->getLocale());\n        }\n\n        try {\n            $invoices = $this->service->createInvoices($query, $this->dispatcher);\n\n            $this->flashSuccess('action.update.success');\n\n            if (\\count($invoices) === 1) {\n                return $this->redirectToRoute('admin_invoice_list', ['id' => $invoices[0]->getId()]);\n            }\n\n            return $this->redirectToRoute('admin_invoice_list');\n        } catch (Exception $ex) {\n            $this->flashUpdateException($ex);\n        }\n\n        return $this->redirectToRoute('invoice');\n    }\n\n    private function flashFormError(FormInterface $form): void\n    {\n        $err = '';\n        foreach ($form->getErrors(true, true) as $error) {\n            $err .= PHP_EOL . '[' . $error->getOrigin()->getName() . '] ' . $error->getMessage();\n        }\n\n        $this->flashError('action.update.error', ['%reason%' => $err]);\n    }\n\n    private function renderTemplateForm(InvoiceTemplate $template, Request $request): Response\n    {\n        $editForm = $this->createEditForm($template);\n\n        $editForm->handleRequest($request);\n\n        if ($editForm->isSubmitted() && $editForm->isValid()) {\n            try {\n                $this->templateRepository->saveTemplate($template);\n                $this->flashSuccess('action.update.success');\n\n                return $this->redirectToRoute('admin_invoice_template');\n            } catch (Exception $ex) {\n                $this->flashUpdateException($ex);\n            }\n        }\n\n        return $this->render('invoice/template_edit.html.twig', [\n            'template' => $template,\n            'form' => $editForm->createView()\n        ]);\n    }\n\n    private function getToolbarForm(InvoiceQuery $query, bool $simple): FormInterface\n    {\n        $form = $simple ? InvoiceToolbarSimpleForm::class : InvoiceToolbarForm::class;\n\n        return $this->createForm($form, $query, [\n            'action' => $this->generateUrl('invoice', []),\n            'method' => 'GET',\n            'include_user' => $this->isGranted('view_other_timesheet'),\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-print-form'\n            ],\n        ]);\n    }\n\n    private function getArchiveToolbarForm(InvoiceArchiveQuery $query): FormInterface\n    {\n        return $this->createForm(InvoiceArchiveForm::class, $query, [\n            'action' => $this->generateUrl('admin_invoice_list', []),\n            'method' => 'GET',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n            'attr' => [\n                'id' => 'invoice-archive-form'\n            ],\n        ]);\n    }\n\n    private function createEditForm(InvoiceTemplate $template): FormInterface\n    {\n        if ($template->getId() === null) {\n            $url = $this->generateUrl('admin_invoice_template_create');\n        } else {\n            $url = $this->generateUrl('admin_invoice_template_edit', ['id' => $template->getId()]);\n        }\n\n        return $this->createForm(InvoiceTemplateForm::class, $template, [\n            'action' => $url,\n            'method' => 'POST'\n        ]);\n    }\n\n    private function createPaymentDateForm(Invoice $invoice, string $status, string $token): FormInterface\n    {\n        if (null === $invoice->getPaymentDate()) {\n            $invoice->setPaymentDate($this->getDateTimeFactory()->createDateTime());\n        }\n\n        $url = $this->generateUrl('admin_invoice_status', ['id' => $invoice->getId(), 'status' => $status, 'token' => $token]);\n\n        return $this->createForm(InvoicePaymentDateForm::class, $invoice, [\n            'action' => $url,\n            'method' => 'POST',\n            'timezone' => $this->getDateTimeFactory()->getTimezone()->getName(),\n        ]);\n    }\n}\n", "<?php\n\n/*\n * This file is part of the Kimai time-tracking app.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace App\\Form\\Extension;\n\nuse Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType;\nuse Symfony\\Component\\Form\\AbstractTypeExtension;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\Component\\Form\\FormView;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\n\n/**\n * Support Remote-API calls for Entity select-boxes.\n */\nclass SelectWithApiDataExtension extends AbstractTypeExtension\n{\n    /**\n     * @var UrlGeneratorInterface\n     */\n    private $router;\n\n    /**\n     * @param UrlGeneratorInterface $router\n     */\n    public function __construct(UrlGeneratorInterface $router)\n    {\n        $this->router = $router;\n    }\n\n    public static function getExtendedTypes(): iterable\n    {\n        return [EntityType::class];\n    }\n\n    /**\n     * @param FormView $view\n     * @param FormInterface $form\n     * @param array $options\n     */\n    public function buildView(FormView $view, FormInterface $form, array $options)\n    {\n        if (!isset($options['api_data'])) {\n            return;\n        }\n\n        $apiData = $options['api_data'];\n\n        if (!\\is_array($apiData)) {\n            throw new \\InvalidArgumentException('Option \"api_data\" must be an array for form \"' . $form->getName() . '\"');\n        }\n\n        if (!isset($apiData['select'])) {\n            return;\n        }\n\n        if (!isset($apiData['route'])) {\n            throw new \\InvalidArgumentException('Missing \"route\" option for \"api_data\" option for form \"' . $form->getName() . '\"');\n        }\n\n        if (!isset($apiData['route_params'])) {\n            $apiData['route_params'] = [];\n        }\n\n        $formPrefixes = [];\n        $parent = $form->getParent();\n        do {\n            $formPrefixes[] = $parent->getName();\n        } while (($parent = $parent->getParent()) !== null);\n\n        $formPrefix = implode('_', array_reverse($formPrefixes));\n        $formField = $apiData['select'];\n\n        // forms with prefix (like toolbar & search) would result in a wrong field name \"_foo\" instead of \"foo\"\n        if ($formPrefix !== '') {\n            $formField = $formPrefix . '_' . $apiData['select'];\n        }\n\n        $view->vars['attr'] = array_merge($view->vars['attr'], [\n            'data-form-prefix' => $formPrefix,\n            'data-related-select' => $formField,\n            'data-api-url' => $this->router->generate($apiData['route'], $apiData['route_params']),\n        ]);\n\n        if (isset($apiData['empty_route_params'])) {\n            $view->vars['attr'] = array_merge($view->vars['attr'], [\n                'data-empty-url' => $this->router->generate($apiData['route'], $apiData['empty_route_params']),\n            ]);\n        }\n    }\n\n    /**\n     * @param OptionsResolver $resolver\n     */\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefined(['api_data']);\n        $resolver->setAllowedTypes('api_data', 'array');\n    }\n}\n"], "filenames": ["src/Controller/AbstractController.php", "src/Controller/InvoiceController.php", "src/Form/Extension/SelectWithApiDataExtension.php"], "buggy_code_start_loc": [220, 69, 77], "buggy_code_end_loc": [220, 191, 80], "fixing_code_start_loc": [221, 69, 78], "fixing_code_end_loc": [223, 198, 84], "type": "CWE-352", "message": "kimai2 is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-4033", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-09T20:15:08.357", "lastModified": "2021-12-13T13:35:21.703", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "kimai2 is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "kimai2 es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kimai:kimai_2:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.7", "matchCriteriaId": "D33199AA-F820-4C6C-B14C-FBF77731F561"}]}]}], "references": [{"url": "https://github.com/kevinpapst/kimai2/commit/1da26e041df62c10bd8075d78f2db7854d3eee07", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/e05be1f7-d00c-4cfd-9390-ccd9d1c737b7", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kevinpapst/kimai2/commit/1da26e041df62c10bd8075d78f2db7854d3eee07"}}