{"buggy_code": ["<?php\n\n/*\n * This file is part of the zenstruck/collection package.\n *\n * (c) Kevin Bond <kevinbond@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Zenstruck\\Collection\\Doctrine\\ORM;\n\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Zenstruck\\Collection\\Doctrine\\ObjectRepository;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n *\n * @template V of object\n * @implements ObjectRepository<V>\n */\nclass EntityRepository implements ObjectRepository\n{\n    /**\n     * @param class-string<V> $class\n     */\n    public function __construct(private EntityManagerInterface $em, private string $class)\n    {\n    }\n\n    /**\n     * @param mixed|Criteria|array<string,mixed>|callable(QueryBuilder):void $specification\n     */\n    public function find(mixed $specification): ?object\n    {\n        try {\n            if ($specification instanceof Criteria) {\n                return $this->qb()->addCriteria($specification)->getQuery()->getSingleResult();\n            }\n\n            if (\\is_array($specification) && !array_is_list($specification)) {\n                return $this->em()->getUnitOfWork()->getEntityPersister($this->class)->load($specification, limit: 1); // @phpstan-ignore-line\n            }\n\n            if (\\is_callable($specification)) {\n                $specification($qb = $this->qb(), 'e');\n\n                return $qb->getQuery()->getSingleResult();\n            }\n\n            return $this->em()->find($this->class, $specification);\n        } catch (NoResultException) {\n            return null;\n        }\n    }\n\n    /**\n     * @param Criteria|array<string,mixed>|callable(QueryBuilder):void $specification\n     *\n     * @return EntityResult<V>\n     */\n    public function query(mixed $specification): EntityResult\n    {\n        $qb = $this->qb();\n\n        if ($specification instanceof Criteria) {\n            return $qb->addCriteria($specification)->result();\n        }\n\n        if (\\is_callable($specification)) {\n            $specification($qb, 'e');\n\n            return $qb->result();\n        }\n\n        if (!\\is_array($specification)) {\n            throw new \\InvalidArgumentException(\\sprintf('Unsupported specification type \"%s\" - only array|Criteria|callable(QueryBuilder) supported.', \\get_debug_type($specification)));\n        }\n\n        foreach ($specification as $field => $value) {\n            $qb->andWhere(\"e.{$field} = :{$field}\")->setParameter($field, $value);\n        }\n\n        return $qb->result();\n    }\n\n    public function count(): int\n    {\n        return $this->qb()->result()->count();\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return $this->qb()->result()->batchIterate();\n    }\n\n    /**\n     * @return EntityResultQueryBuilder<V>\n     */\n    final protected function qb(string $alias = 'e', ?string $indexBy = null): EntityResultQueryBuilder\n    {\n        return EntityResultQueryBuilder::forEntity($this->em, $this->class, $alias, $indexBy);\n    }\n\n    final protected function em(): EntityManagerInterface\n    {\n        return $this->em;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the zenstruck/collection package.\n *\n * (c) Kevin Bond <kevinbond@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Zenstruck\\Collection\\Doctrine\\ORM;\n\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\QueryBuilder;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n *\n * @template V of object\n */\ntrait EntityRepositoryBridge\n{\n    /** @var EntityRepository<V> */\n    private EntityRepository $collectionRepo;\n\n    /**\n     * @param mixed|Criteria|array<string,mixed>|callable(QueryBuilder):void $specification\n     */\n    public function find($specification, $lockMode = null, $lockVersion = null): ?object\n    {\n        if ($lockMode || $lockVersion) {\n            // @phpstan-ignore-next-line\n            return $this->getEntityManager()->find($this->getEntityName(), $specification, $lockMode, $lockVersion);\n        }\n\n        return $this->collectionRepo()->find($specification);\n    }\n\n    /**\n     * @param Criteria|array<string,mixed>|callable(QueryBuilder):void $specification\n     *\n     * @return EntityResult<V>\n     */\n    public function query(mixed $specification): EntityResult\n    {\n        return $this->collectionRepo()->query($specification);\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return $this->collectionRepo()->getIterator();\n    }\n\n    public function count(array $criteria = []): int\n    {\n        return parent::count($criteria);\n    }\n\n    /**\n     * @return EntityResultQueryBuilder<V>\n     */\n    public function createQueryBuilder($alias, $indexBy = null): EntityResultQueryBuilder\n    {\n        return EntityResultQueryBuilder::forEntity($this->_em, $this->getClassName(), $alias, $indexBy);\n    }\n\n    /**\n     * @return EntityResultQueryBuilder<V>\n     */\n    protected function qb(string $alias = 'e', ?string $indexBy = null): EntityResultQueryBuilder\n    {\n        return $this->createQueryBuilder($alias, $indexBy);\n    }\n\n    /**\n     * @return EntityRepository<V>\n     */\n    private function collectionRepo(): EntityRepository\n    {\n        return $this->collectionRepo ??= new EntityRepository($this->getEntityManager(), $this->getEntityName());\n    }\n}\n", "<?php\n\n/*\n * This file is part of the zenstruck/collection package.\n *\n * (c) Kevin Bond <kevinbond@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Zenstruck\\Collection\\Tests\\Doctrine\\ORM;\n\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\QueryBuilder;\nuse PHPUnit\\Framework\\TestCase;\nuse Zenstruck\\Collection\\Doctrine\\Batch\\CountableBatchIterator;\nuse Zenstruck\\Collection\\Doctrine\\ObjectRepository;\nuse Zenstruck\\Collection\\Doctrine\\ORM\\EntityRepository;\nuse Zenstruck\\Collection\\Tests\\CountableIteratorTests;\nuse Zenstruck\\Collection\\Tests\\Doctrine\\Fixture\\Entity;\nuse Zenstruck\\Collection\\Tests\\Doctrine\\Fixture\\Relation;\nuse Zenstruck\\Collection\\Tests\\Doctrine\\HasDatabase;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass EntityRepositoryTest extends TestCase\n{\n    use CountableIteratorTests, HasDatabase;\n\n    /**\n     * @test\n     */\n    public function can_find(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(2));\n    }\n\n    /**\n     * @test\n     */\n    public function can_find_with_array(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(['id' => 2]));\n    }\n\n    /**\n     * @test\n     */\n    public function can_find_with_criteria(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(Criteria::create()->where(Criteria::expr()->eq('id', 2))));\n    }\n\n    /**\n     * @test\n     */\n    public function can_find_with_callable(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 2);\n        }));\n    }\n\n    /**\n     * @test\n     */\n    public function find_returns_null_if_nothing_found(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertNull($repo->find(99));\n        $this->assertNull($repo->find(['id' => 99]));\n        $this->assertNull($repo->find(Criteria::create()->where(Criteria::expr()->eq('id', 99))));\n        $this->assertNull($repo->find(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 99);\n        }));\n    }\n\n    /**\n     * @test\n     */\n    public function can_get_batch_iterator(): void\n    {\n        $iterator = $this->createWithItems(3)->getIterator();\n\n        $this->assertInstanceOf(CountableBatchIterator::class, $iterator);\n        $this->assertCount(3, $iterator);\n    }\n\n    /**\n     * @test\n     */\n    public function detaches_entities_from_em_on_iterate(): void\n    {\n        $iterator = $this->createWithItems(3);\n\n        $result = \\iterator_to_array($iterator)[0];\n\n        $this->assertInstanceOf(Entity::class, $result);\n        $this->assertFalse($this->em->contains($result));\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_array(): void\n    {\n        $objects = $this->createWithItems(3)->query(['id' => 2]);\n\n        $this->assertCount(1, $objects);\n        $this->assertSame('value 2', \\iterator_to_array($objects)[0]->value);\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_none(): void\n    {\n        $objects = $this->createWithItems(3)->query(ObjectRepository::ALL);\n\n        $this->assertCount(3, $objects);\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_criteria(): void\n    {\n        $objects = $this->createWithItems(3)->query(Criteria::create()->where(Criteria::expr()->eq('id', 2)));\n\n        $this->assertCount(1, $objects);\n        $this->assertSame('value 2', \\iterator_to_array($objects)[0]->value);\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_callable(): void\n    {\n        $objects = $this->createWithItems(3)->query(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 2);\n        });\n\n        $this->assertCount(1, $objects);\n        $this->assertSame('value 2', \\iterator_to_array($objects)[0]->value);\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_for_no_results(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEmpty($repo->query(['id' => 99]));\n        $this->assertEmpty($repo->query(Criteria::create()->where(Criteria::expr()->eq('id', 99))));\n        $this->assertEmpty($repo->query(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 99);\n        }));\n    }\n\n    protected function createWithItems(int $count): ObjectRepository\n    {\n        $this->persistEntities($count);\n\n        return $this->repo();\n    }\n\n    protected function expectedValueAt(int $position): Entity\n    {\n        return new Entity(\"value {$position}\", $position);\n    }\n\n    protected function repo(): ObjectRepository\n    {\n        return new EntityRepository($this->em, Entity::class);\n    }\n\n    private function persistEntitiesForJoinTest(): void\n    {\n        $this->em->persist(new Entity('e1'));\n        $this->em->persist(Entity::withRelation('e2', new Relation(1)));\n        $this->em->persist(Entity::withRelation('e3', new Relation(2)));\n        $this->em->persist(new Entity('e4'));\n        $this->em->persist(Entity::withRelation('e5', new Relation(3)));\n        $this->flushAndClear();\n    }\n}\n"], "fixing_code": ["<?php\n\n/*\n * This file is part of the zenstruck/collection package.\n *\n * (c) Kevin Bond <kevinbond@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Zenstruck\\Collection\\Doctrine\\ORM;\n\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Doctrine\\ORM\\NoResultException;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Zenstruck\\Collection\\Doctrine\\ObjectRepository;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n *\n * @template V of object\n * @implements ObjectRepository<V>\n */\nclass EntityRepository implements ObjectRepository\n{\n    /**\n     * @param class-string<V> $class\n     */\n    public function __construct(private EntityManagerInterface $em, private string $class)\n    {\n    }\n\n    /**\n     * @param mixed|Criteria|array<string,mixed>|(object&callable(QueryBuilder):void) $specification\n     */\n    public function find(mixed $specification): ?object\n    {\n        try {\n            if ($specification instanceof Criteria) {\n                return $this->qb()->addCriteria($specification)->getQuery()->getSingleResult();\n            }\n\n            if (\\is_array($specification) && !array_is_list($specification)) {\n                return $this->em()->getUnitOfWork()->getEntityPersister($this->class)->load($specification, limit: 1); // @phpstan-ignore-line\n            }\n\n            if (\\is_callable($specification) && \\is_object($specification)) {\n                $specification($qb = $this->qb(), 'e');\n\n                return $qb->getQuery()->getSingleResult();\n            }\n\n            return $this->em()->find($this->class, $specification);\n        } catch (NoResultException) {\n            return null;\n        }\n    }\n\n    /**\n     * @param Criteria|array<string,mixed>|(object&callable(QueryBuilder):void) $specification\n     *\n     * @return EntityResult<V>\n     */\n    public function query(mixed $specification): EntityResult\n    {\n        $qb = $this->qb();\n\n        if ($specification instanceof Criteria) {\n            return $qb->addCriteria($specification)->result();\n        }\n\n        if (\\is_callable($specification) && \\is_object($specification)) {\n            $specification($qb, 'e');\n\n            return $qb->result();\n        }\n\n        if (!\\is_array($specification)) {\n            throw new \\InvalidArgumentException(\\sprintf('Unsupported specification type \"%s\" - only array|Criteria|callable(QueryBuilder) supported.', \\get_debug_type($specification)));\n        }\n\n        foreach ($specification as $field => $value) {\n            $qb->andWhere(\"e.{$field} = :{$field}\")->setParameter($field, $value);\n        }\n\n        return $qb->result();\n    }\n\n    public function count(): int\n    {\n        return $this->qb()->result()->count();\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return $this->qb()->result()->batchIterate();\n    }\n\n    /**\n     * @return EntityResultQueryBuilder<V>\n     */\n    final protected function qb(string $alias = 'e', ?string $indexBy = null): EntityResultQueryBuilder\n    {\n        return EntityResultQueryBuilder::forEntity($this->em, $this->class, $alias, $indexBy);\n    }\n\n    final protected function em(): EntityManagerInterface\n    {\n        return $this->em;\n    }\n}\n", "<?php\n\n/*\n * This file is part of the zenstruck/collection package.\n *\n * (c) Kevin Bond <kevinbond@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Zenstruck\\Collection\\Doctrine\\ORM;\n\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\QueryBuilder;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n *\n * @template V of object\n */\ntrait EntityRepositoryBridge\n{\n    /** @var EntityRepository<V> */\n    private EntityRepository $collectionRepo;\n\n    /**\n     * @param mixed|Criteria|array<string,mixed>|(object&callable(QueryBuilder):void) $specification\n     */\n    public function find($specification, $lockMode = null, $lockVersion = null): ?object\n    {\n        if ($lockMode || $lockVersion) {\n            // @phpstan-ignore-next-line\n            return $this->getEntityManager()->find($this->getEntityName(), $specification, $lockMode, $lockVersion);\n        }\n\n        return $this->collectionRepo()->find($specification);\n    }\n\n    /**\n     * @param Criteria|array<string,mixed>|(object&callable(QueryBuilder):void) $specification\n     *\n     * @return EntityResult<V>\n     */\n    public function query(mixed $specification): EntityResult\n    {\n        return $this->collectionRepo()->query($specification);\n    }\n\n    public function getIterator(): \\Traversable\n    {\n        return $this->collectionRepo()->getIterator();\n    }\n\n    public function count(array $criteria = []): int\n    {\n        return parent::count($criteria);\n    }\n\n    /**\n     * @return EntityResultQueryBuilder<V>\n     */\n    public function createQueryBuilder($alias, $indexBy = null): EntityResultQueryBuilder\n    {\n        return EntityResultQueryBuilder::forEntity($this->_em, $this->getClassName(), $alias, $indexBy);\n    }\n\n    /**\n     * @return EntityResultQueryBuilder<V>\n     */\n    protected function qb(string $alias = 'e', ?string $indexBy = null): EntityResultQueryBuilder\n    {\n        return $this->createQueryBuilder($alias, $indexBy);\n    }\n\n    /**\n     * @return EntityRepository<V>\n     */\n    private function collectionRepo(): EntityRepository\n    {\n        return $this->collectionRepo ??= new EntityRepository($this->getEntityManager(), $this->getEntityName());\n    }\n}\n", "<?php\n\n/*\n * This file is part of the zenstruck/collection package.\n *\n * (c) Kevin Bond <kevinbond@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Zenstruck\\Collection\\Tests\\Doctrine\\ORM;\n\nuse Doctrine\\Common\\Collections\\Criteria;\nuse Doctrine\\ORM\\QueryBuilder;\nuse PHPUnit\\Framework\\TestCase;\nuse Zenstruck\\Collection\\Doctrine\\Batch\\CountableBatchIterator;\nuse Zenstruck\\Collection\\Doctrine\\ObjectRepository;\nuse Zenstruck\\Collection\\Doctrine\\ORM\\EntityRepository;\nuse Zenstruck\\Collection\\Tests\\CountableIteratorTests;\nuse Zenstruck\\Collection\\Tests\\Doctrine\\Fixture\\Entity;\nuse Zenstruck\\Collection\\Tests\\Doctrine\\Fixture\\Relation;\nuse Zenstruck\\Collection\\Tests\\Doctrine\\HasDatabase;\n\n/**\n * @author Kevin Bond <kevinbond@gmail.com>\n */\nclass EntityRepositoryTest extends TestCase\n{\n    use CountableIteratorTests, HasDatabase;\n\n    /**\n     * @test\n     */\n    public function can_find(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(2));\n    }\n\n    /**\n     * @test\n     */\n    public function can_find_with_array(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(['id' => 2]));\n    }\n\n    /**\n     * @test\n     */\n    public function can_find_with_criteria(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(Criteria::create()->where(Criteria::expr()->eq('id', 2))));\n    }\n\n    /**\n     * @test\n     */\n    public function can_find_with_callable(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEquals($this->expectedValueAt(2), $repo->find(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 2);\n        }));\n    }\n\n    /**\n     * @test\n     */\n    public function find_returns_null_if_nothing_found(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertNull($repo->find(99));\n        $this->assertNull($repo->find(['id' => 99]));\n        $this->assertNull($repo->find(Criteria::create()->where(Criteria::expr()->eq('id', 99))));\n        $this->assertNull($repo->find(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 99);\n        }));\n    }\n\n    /**\n     * @test\n     */\n    public function can_get_batch_iterator(): void\n    {\n        $iterator = $this->createWithItems(3)->getIterator();\n\n        $this->assertInstanceOf(CountableBatchIterator::class, $iterator);\n        $this->assertCount(3, $iterator);\n    }\n\n    /**\n     * @test\n     */\n    public function detaches_entities_from_em_on_iterate(): void\n    {\n        $iterator = $this->createWithItems(3);\n\n        $result = \\iterator_to_array($iterator)[0];\n\n        $this->assertInstanceOf(Entity::class, $result);\n        $this->assertFalse($this->em->contains($result));\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_array(): void\n    {\n        $objects = $this->createWithItems(3)->query(['id' => 2]);\n\n        $this->assertCount(1, $objects);\n        $this->assertSame('value 2', \\iterator_to_array($objects)[0]->value);\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_none(): void\n    {\n        $objects = $this->createWithItems(3)->query(ObjectRepository::ALL);\n\n        $this->assertCount(3, $objects);\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_criteria(): void\n    {\n        $objects = $this->createWithItems(3)->query(Criteria::create()->where(Criteria::expr()->eq('id', 2)));\n\n        $this->assertCount(1, $objects);\n        $this->assertSame('value 2', \\iterator_to_array($objects)[0]->value);\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_with_callable(): void\n    {\n        $objects = $this->createWithItems(3)->query(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 2);\n        });\n\n        $this->assertCount(1, $objects);\n        $this->assertSame('value 2', \\iterator_to_array($objects)[0]->value);\n    }\n\n    /**\n     * @test\n     */\n    public function cannot_find_with_callable_strings(): void\n    {\n        $this->assertIsCallable('system');\n        $this->assertNull($this->repo()->find('system'));\n    }\n\n    /**\n     * @test\n     */\n    public function cannot_query_with_callable_strings(): void\n    {\n        $this->assertIsCallable('system');\n\n        $repo = $this->repo();\n\n        $this->expectException(\\InvalidArgumentException::class);\n\n        $repo->query('system');\n    }\n\n    /**\n     * @test\n     */\n    public function can_filter_for_no_results(): void\n    {\n        $repo = $this->createWithItems(3);\n\n        $this->assertEmpty($repo->query(['id' => 99]));\n        $this->assertEmpty($repo->query(Criteria::create()->where(Criteria::expr()->eq('id', 99))));\n        $this->assertEmpty($repo->query(function(QueryBuilder $qb, string $root) {\n            $qb->andWhere($root.'.id = :id')->setParameter('id', 99);\n        }));\n    }\n\n    protected function createWithItems(int $count): ObjectRepository\n    {\n        $this->persistEntities($count);\n\n        return $this->repo();\n    }\n\n    protected function expectedValueAt(int $position): Entity\n    {\n        return new Entity(\"value {$position}\", $position);\n    }\n\n    protected function repo(): ObjectRepository\n    {\n        return new EntityRepository($this->em, Entity::class);\n    }\n\n    private function persistEntitiesForJoinTest(): void\n    {\n        $this->em->persist(new Entity('e1'));\n        $this->em->persist(Entity::withRelation('e2', new Relation(1)));\n        $this->em->persist(Entity::withRelation('e3', new Relation(2)));\n        $this->em->persist(new Entity('e4'));\n        $this->em->persist(Entity::withRelation('e5', new Relation(3)));\n        $this->flushAndClear();\n    }\n}\n"], "filenames": ["src/Collection/Doctrine/ORM/EntityRepository.php", "src/Collection/Doctrine/ORM/EntityRepositoryBridge.php", "tests/Doctrine/ORM/EntityRepositoryTest.php"], "buggy_code_start_loc": [36, 28, 160], "buggy_code_end_loc": [75, 42, 160], "fixing_code_start_loc": [36, 28, 161], "fixing_code_end_loc": [75, 42, 184], "type": "CWE-74", "message": "zenstruck/collections is a set of helpers for iterating/paginating/filtering collections. Passing _callable strings_ (ie `system`) caused the function to be executed. This would result in a limited subset of specific user input being executed as if it were code. This issue has been addressed in commit `f4b1c48820` and included in release version 0.2.1. Users are advised to upgrade. Users unable to upgrade should ensure that user input is not passed to either `EntityRepository::find()` or `query()`.", "other": {"cve": {"id": "CVE-2023-37473", "sourceIdentifier": "security-advisories@github.com", "published": "2023-07-14T21:15:09.047", "lastModified": "2023-07-31T17:12:55.187", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "zenstruck/collections is a set of helpers for iterating/paginating/filtering collections. Passing _callable strings_ (ie `system`) caused the function to be executed. This would result in a limited subset of specific user input being executed as if it were code. This issue has been addressed in commit `f4b1c48820` and included in release version 0.2.1. Users are advised to upgrade. Users unable to upgrade should ensure that user input is not passed to either `EntityRepository::find()` or `query()`."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 6.0}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zenstruck:collection:0.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "E1467BC0-DA70-402B-A066-205A6D03F1A8"}]}]}], "references": [{"url": "https://github.com/zenstruck/collection/commit/f4b1c488206e1b1581b06fcd331686846f13f19c", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/zenstruck/collection/releases/tag/v0.2.1", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/zenstruck/collection/security/advisories/GHSA-7xr2-8ff7-6fjq", "source": "security-advisories@github.com", "tags": ["Mitigation"]}]}, "github_commit_url": "https://github.com/zenstruck/collection/commit/f4b1c488206e1b1581b06fcd331686846f13f19c"}}