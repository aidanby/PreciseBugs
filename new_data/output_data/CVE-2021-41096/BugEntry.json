{"buggy_code": ["package com.mayank.rucky.activity;\n\nimport android.annotation.SuppressLint;\nimport android.os.Bundle;\nimport android.util.Patterns;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.app.AppCompatDelegate;\nimport androidx.core.content.ContextCompat;\n\nimport com.mayank.rucky.R;\nimport com.mayank.rucky.utils.Config;\nimport com.mayank.rucky.utils.Constants;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Objects;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ConfigActivity extends AppCompatActivity {\n\n    Config config;\n    @SuppressLint(\"StaticFieldLeak\")\n    public static TextView statusText;\n    @SuppressLint(\"StaticFieldLeak\")\n    public static ImageView statusImage;\n    public Button ipButton;\n    public View ipStatusDivider;\n\n    public static Pattern SOCKET_ADDRESS;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        config = new Config(this);\n        if (config.getDarkMode()) {\n            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\n        } else {\n            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\n        }\n        setTheme(Constants.themeList[config.getAccentTheme()]);\n        setContentView(R.layout.activity_config);\n\n        statusText = findViewById(R.id.status_text);\n        statusImage = findViewById(R.id.status_icon);\n        ipButton = findViewById(R.id.ipBtn);\n        ipStatusDivider = findViewById(R.id.divider_config3);\n\n        ipButton.setText(config.getNetworkAddress());\n        SOCKET_ADDRESS = Pattern.compile(Patterns.IP_ADDRESS+\":\"+\"([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])\");\n\n        updateStatus();\n        language();\n        mode();\n        networkAddress();\n    }\n\n    private void language() {\n        Button langBtn = findViewById(R.id.hidBtn);\n        ArrayList<String> languages;\n        if(!config.getHIDCustomise()) {\n            languages = new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.hidLanguages)));\n            langBtn.setText(languages.get(config.getHIDLanguage()));\n            langBtn.setOnClickListener(view -> {\n                AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n                builder.setCancelable(false);\n                builder.setSingleChoiceItems(getResources().getStringArray(R.array.hidLanguages), config.getHIDLanguage(), (dialog, i) -> {\n                    config.setHIDLanguage(i);\n                    dialog.dismiss();\n                    langBtn.setText(languages.get(config.getHIDLanguage()));\n                });\n                builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n                AlertDialog hidDialog = builder.create();\n                Objects.requireNonNull(hidDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n                hidDialog.show();\n            });\n        } else {\n            ArrayList<String> filename = new ArrayList<>();\n            languages = new ArrayList<>();\n            final File[] tmp = Objects.requireNonNull(this.getExternalFilesDir(\"keymap\")).listFiles();\n            assert tmp != null;\n            for(File file: tmp) {\n                if(file.getPath().endsWith(\".json\"))\n                    filename.add(file.getName());\n            }\n            for(int i = 0; i < filename.size(); i++) {\n                languages.add(filename.get(i).replace(\".json\", \"\").replace(\"_\",\" \").toUpperCase());\n            }\n            langBtn.setText(languages.get(filename.indexOf(config.getHIDFileSelected())));\n            langBtn.setOnClickListener(view -> {\n                AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n                builder.setCancelable(false);\n                builder.setSingleChoiceItems(languages.toArray(new CharSequence[0]), filename.indexOf(config.getHIDFileSelected()), (dialog, i) -> {\n                    config.setHIDFileSelected(filename.get(i));\n                    dialog.dismiss();\n                    langBtn.setText(languages.get(i));\n                });\n                builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n                AlertDialog hidDialog = builder.create();\n                Objects.requireNonNull(hidDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n                hidDialog.show();\n            });\n        }\n    }\n\n    private void mode() {\n        ArrayList<String> modes = new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.modes)));\n        Button modeBtn = findViewById(R.id.modeBtn);\n        modeBtn.setText(modes.get(config.getHIDMode()));\n        modeBtn.setOnClickListener(view -> {\n            AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n            builder.setCancelable(false);\n            builder.setSingleChoiceItems(getResources().getStringArray(R.array.modes), config.getHIDMode(), (dialog, i) -> {\n                config.setHIDMode(i);\n                dialog.dismiss();\n                modeBtn.setText(modes.get(config.getHIDMode()));\n                updateStatus();\n            });\n            builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n            AlertDialog modeDialog = builder.create();\n            Objects.requireNonNull(modeDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n            modeDialog.show();\n        });\n    }\n\n    private void updateStatus() {\n        if (config.getHIDMode() == 0) {\n            config.setNetworkStatus(false);\n            EditorActivity.stopNetworkSocketService(this);\n            ipButton.setVisibility(View.GONE);\n            ipStatusDivider.setVisibility(View.GONE);\n            if (config.getUSBStatus()) {\n                statusText.setText(R.string.config_status_usb_on);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_usb));\n            } else {\n                statusText.setText(R.string.config_status_usb_off);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_usb_off));\n            }\n        } else if (config.getHIDMode() == 1) {\n            EditorActivity.startNetworkSocketService(this);\n            ipButton.setVisibility(View.VISIBLE);\n            ipStatusDivider.setVisibility(View.VISIBLE);\n            if (config.getNetworkStatus()) {\n                statusText.setText(R.string.config_status_net_on);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_net));\n            } else {\n                statusText.setText(R.string.config_status_net_off);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_net_off));\n            }\n            EditorActivity.updateNotification(this);\n        }\n    }\n\n    private void networkAddress() {\n        ipButton.setOnClickListener(view -> {\n            AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n            builder.setTitle(getResources().getString(R.string.socket_address));\n            LayoutInflater socketLI = LayoutInflater.from(this);\n            final View socketView = socketLI.inflate(R.layout.config_network, null);\n            builder.setView(socketView);\n            EditText address = socketView.findViewById(R.id.socket_title);\n            address.setText(config.getNetworkAddress());\n            builder.setCancelable(false);\n            builder.setPositiveButton(getResources().getString(R.string.btn_save), (dialog, which) -> {\n                Matcher matcher = SOCKET_ADDRESS.matcher(address.getText().toString());\n                if (matcher.matches())\n                    config.setNetworkAddress(address.getText().toString());\n                ipButton.setText(config.getNetworkAddress());\n                EditorActivity.updateNotification(this);\n            });\n            builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n            AlertDialog saveDialog = builder.create();\n            Objects.requireNonNull(saveDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n            saveDialog.show();\n        });\n    }\n\n}", "package com.mayank.rucky.utils;\n\nimport com.mayank.rucky.R;\n\npublic class Constants {\n\n    //HIDModel\n    public static final int HID_OFFLINE = 1;\n    public static final int HID_UPDATE = 2;\n    public static final int HID_DOWNLOAD = 3;\n\n    //web view\n    public static final String activityTitle = \"ACTIVITY_TITLE\";\n    public static final String webViewID = \"WEBVIEW_URL\";\n\n    //shared preferences\n    public static final String PREF = \"settings\";\n    public static final String PREF_SETTINGS_DARK_THEME = \"darkTheme\";\n    public static final String PREF_SETTING_INIT = \"init\";\n    public static final String PREF_SETTING_UPDATE = \"update\";\n    public static final String PREF_SETTING_ACCENT = \"accent\";\n    public static final String PREF_SETTING_ICON = \"icon\";\n    public static final String PREF_SETTING_ADV_SECURITY = \"advSecurity\";\n    public static final String PREF_DEV_USB = \"usbConnectionState\";\n    public static final String PREF_DEV_NET = \"usbConnectionState\";\n    public static final String PREF_DEV_USB_CONNECTION = \"usbConnectionStatus\";\n    public static final String PREF_DEV_NET_CONNECTION = \"netConnectionStatus\";\n    public static final String PREF_DEV_NET_ADDRESS = \"ipSocket\";\n\n    //hid\n    public static final String PREF_HID_CHOICE = \"hidCustomize\";\n    public static final String PREF_HID_LANG = \"hidLang\";\n    public static final String PREF_HID_MODE = \"hidMode\";\n    public static final String PREF_HID_INTENT = \"hidIntent\";\n    public static final String PREF_HID_FILE = \"hidFile\";\n    public static final String PREF_HID_FILE_SELECTED = \"hidFileSelected\";\n\n    //keystore\n    public static final String PREF_GEN_KEY = \"genKeyDone\";\n    public static final String KEYSTORE_PROVIDER_ANDROID_KEYSTORE = \"AndroidKeyStore\";\n    public static final String RUCKY_KEYSTORE = \"RuckyKeystore\";\n    public static final String RUCKY_KEYSTORE2 = \"RuckyKeystore2\";\n\n    //notifications\n    public static final String CHANNEL_ID = \"com.mayank.rucky.update\";\n    public static final String CHANNEL_NAME = \"Update\";\n    public static final String SCHANNEL_ID = \"com.mayank.rucky.service\";\n    public static final String SCHANNEL_NAME = \"Foreground Service\";\n\n    //theme\n    public static final int[] themeList = {\n            R.style.blue_grey,      R.style.brown,\n            R.style.deep_orange,    R.style.orange,\n            R.style.amber,          R.style.yellow,\n            R.style.lime,           R.style.light_green,\n            R.style.green,          R.style.teal,\n            R.style.cyan,           R.style.light_blue,\n            R.style.blue,           R.style.indigo,\n            R.style.deep_purple,    R.style.purple,\n            R.style.pink,           R.style.red\n    };\n\n    public static final int[] themeSplashBorder = {\n            R.drawable.splash_gradient_blue_grey,       R.drawable.splash_gradient_brown,\n            R.drawable.splash_gradient_deep_orange,     R.drawable.splash_gradient_orange,\n            R.drawable.splash_gradient_amber,           R.drawable.splash_gradient_yellow,\n            R.drawable.splash_gradient_lime,            R.drawable.splash_gradient_light_green,\n            R.drawable.splash_gradient_green,           R.drawable.splash_gradient_teal,\n            R.drawable.splash_gradient_cyan,            R.drawable.splash_gradient_light_blue,\n            R.drawable.splash_gradient_blue,            R.drawable.splash_gradient_indigo,\n            R.drawable.splash_gradient_deep_purple,     R.drawable.splash_gradient_purple,\n            R.drawable.splash_gradient_pink,            R.drawable.splash_gradient_red\n    };\n\n}\n", "package com.mayank.rucky.utils;\n\nimport java.util.Date;\nimport java.util.Random;\n\npublic class Randoms {\n\n    Random random;\n\n    Randoms() {\n        random = new Random();\n        Date date = new Date();\n        random.setSeed(date.getTime());\n    }\n\n    public int randomTheme() {\n        return random.nextInt(Constants.themeList.length);\n    }\n}\n"], "fixing_code": ["package com.mayank.rucky.activity;\n\nimport android.annotation.SuppressLint;\nimport android.os.Bundle;\nimport android.util.Patterns;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.Window;\nimport android.view.WindowManager;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\nimport androidx.appcompat.app.AlertDialog;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.appcompat.app.AppCompatDelegate;\nimport androidx.core.content.ContextCompat;\n\nimport com.mayank.rucky.R;\nimport com.mayank.rucky.utils.Config;\nimport com.mayank.rucky.utils.Constants;\n\nimport java.io.File;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Objects;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class ConfigActivity extends AppCompatActivity {\n\n    Config config;\n    @SuppressLint(\"StaticFieldLeak\")\n    public static TextView statusText;\n    @SuppressLint(\"StaticFieldLeak\")\n    public static ImageView statusImage;\n    public Button ipButton;\n    public View ipStatusDivider;\n\n    public static Pattern SOCKET_ADDRESS;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        config = new Config(this);\n        if (config.getDarkMode()) {\n            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);\n        } else {\n            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);\n        }\n        setTheme(Constants.themeList[config.getAccentTheme()]);\n        setContentView(R.layout.activity_config);\n\n        statusText = findViewById(R.id.status_text);\n        statusImage = findViewById(R.id.status_icon);\n        ipButton = findViewById(R.id.ipBtn);\n        ipStatusDivider = findViewById(R.id.divider_config3);\n\n        ipButton.setText(config.getNetworkAddress());\n        SOCKET_ADDRESS = Pattern.compile(Patterns.IP_ADDRESS+\":\"+\"([1-9][0-9]{0,3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5])\");\n\n        updateStatus();\n        language();\n        mode();\n        networkAddress();\n    }\n\n    private void language() {\n        Button langBtn = findViewById(R.id.hidBtn);\n        ArrayList<String> languages;\n        if(!config.getHIDCustomise()) {\n            languages = new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.hidLanguages)));\n            langBtn.setText(languages.get(config.getHIDLanguage()));\n            langBtn.setOnClickListener(view -> {\n                AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n                builder.setCancelable(false);\n                builder.setSingleChoiceItems(getResources().getStringArray(R.array.hidLanguages), config.getHIDLanguage(), (dialog, i) -> {\n                    config.setHIDLanguage(i);\n                    dialog.dismiss();\n                    langBtn.setText(languages.get(config.getHIDLanguage()));\n                });\n                builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n                AlertDialog hidDialog = builder.create();\n                Objects.requireNonNull(hidDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n                hidDialog.show();\n            });\n        } else {\n            ArrayList<String> filename = new ArrayList<>();\n            languages = new ArrayList<>();\n            final File[] tmp = Objects.requireNonNull(this.getExternalFilesDir(\"keymap\")).listFiles();\n            assert tmp != null;\n            for(File file: tmp) {\n                if(file.getPath().endsWith(\".json\"))\n                    filename.add(file.getName());\n            }\n            for(int i = 0; i < filename.size(); i++) {\n                languages.add(filename.get(i).replace(\".json\", \"\").replace(\"_\",\" \").toUpperCase());\n            }\n            langBtn.setText(languages.get(filename.indexOf(config.getHIDFileSelected())));\n            langBtn.setOnClickListener(view -> {\n                AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n                builder.setCancelable(false);\n                builder.setSingleChoiceItems(languages.toArray(new CharSequence[0]), filename.indexOf(config.getHIDFileSelected()), (dialog, i) -> {\n                    config.setHIDFileSelected(filename.get(i));\n                    dialog.dismiss();\n                    langBtn.setText(languages.get(i));\n                });\n                builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n                AlertDialog hidDialog = builder.create();\n                Objects.requireNonNull(hidDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n                hidDialog.show();\n            });\n        }\n    }\n\n    private void mode() {\n        ArrayList<String> modes = new ArrayList<>(Arrays.asList(getResources().getStringArray(R.array.modes)));\n        Button modeBtn = findViewById(R.id.modeBtn);\n        modeBtn.setText(modes.get(config.getHIDMode()));\n        modeBtn.setOnClickListener(view -> {\n            AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n            builder.setCancelable(false);\n            builder.setSingleChoiceItems(getResources().getStringArray(R.array.modes), config.getHIDMode(), (dialog, i) -> {\n                config.setHIDMode(i);\n                dialog.dismiss();\n                modeBtn.setText(modes.get(config.getHIDMode()));\n                updateStatus();\n            });\n            builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n            AlertDialog modeDialog = builder.create();\n            Objects.requireNonNull(modeDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n            modeDialog.show();\n        });\n    }\n\n    private void updateStatus() {\n        if (config.getHIDMode() == 0) {\n            config.setNetworkStatus(false);\n            EditorActivity.stopNetworkSocketService(this);\n            ipButton.setVisibility(View.INVISIBLE);\n            ipStatusDivider.setVisibility(View.INVISIBLE);\n            if (config.getUSBStatus()) {\n                statusText.setText(R.string.config_status_usb_on);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_usb));\n            } else {\n                statusText.setText(R.string.config_status_usb_off);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_usb_off));\n            }\n        } else if (config.getHIDMode() == 1) {\n            EditorActivity.startNetworkSocketService(this);\n            ipButton.setVisibility(View.VISIBLE);\n            ipStatusDivider.setVisibility(View.VISIBLE);\n            if (config.getNetworkStatus()) {\n                statusText.setText(R.string.config_status_net_on);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_net));\n            } else {\n                statusText.setText(R.string.config_status_net_off);\n                statusImage.setImageDrawable(ContextCompat.getDrawable(this, R.drawable.ic_net_off));\n            }\n            EditorActivity.updateNotification(this);\n        }\n    }\n\n    private void networkAddress() {\n        ipButton.setOnClickListener(view -> {\n            AlertDialog.Builder builder = new AlertDialog.Builder(ConfigActivity.this);\n            builder.setTitle(getResources().getString(R.string.socket_address));\n            LayoutInflater socketLI = LayoutInflater.from(this);\n            final View socketView = socketLI.inflate(R.layout.config_network, null);\n            builder.setView(socketView);\n            EditText address = socketView.findViewById(R.id.socket_title);\n            address.setText(config.getNetworkAddress());\n            builder.setCancelable(false);\n            builder.setPositiveButton(getResources().getString(R.string.btn_save), (dialog, which) -> {\n                Matcher matcher = SOCKET_ADDRESS.matcher(address.getText().toString());\n                if (matcher.matches())\n                    config.setNetworkAddress(address.getText().toString());\n                ipButton.setText(config.getNetworkAddress());\n                EditorActivity.updateNotification(this);\n            });\n            builder.setNegativeButton(getResources().getString(R.string.btn_cancel), (dialog, which) -> dialog.cancel());\n            AlertDialog saveDialog = builder.create();\n            Objects.requireNonNull(saveDialog.getWindow()).setFlags(WindowManager.LayoutParams.FLAG_SECURE, WindowManager.LayoutParams.FLAG_SECURE);\n            saveDialog.show();\n        });\n    }\n\n}", "package com.mayank.rucky.utils;\n\nimport com.mayank.rucky.R;\n\npublic class Constants {\n\n    //HIDModel\n    public static final int HID_OFFLINE = 1;\n    public static final int HID_UPDATE = 2;\n    public static final int HID_DOWNLOAD = 3;\n\n    //web view\n    public static final String activityTitle = \"ACTIVITY_TITLE\";\n    public static final String webViewID = \"WEBVIEW_URL\";\n\n    //shared preferences\n    public static final String PREF = \"settings\";\n    public static final String PREF_SETTINGS_DARK_THEME = \"darkTheme\";\n    public static final String PREF_SETTING_INIT = \"init\";\n    public static final String PREF_SETTING_UPDATE = \"update\";\n    public static final String PREF_SETTING_ACCENT = \"accent\";\n    public static final String PREF_SETTING_ICON = \"icon\";\n    public static final String PREF_SETTING_ADV_SECURITY = \"advSecurity\";\n    public static final String PREF_DEV_USB = \"usbConnectionState\";\n    public static final String PREF_DEV_NET = \"usbConnectionState\";\n    public static final String PREF_DEV_USB_CONNECTION = \"usbConnectionStatus\";\n    public static final String PREF_DEV_NET_CONNECTION = \"netConnectionStatus\";\n    public static final String PREF_DEV_NET_ADDRESS = \"ipSocket\";\n\n    //hid\n    public static final String PREF_HID_CHOICE = \"hidCustomize\";\n    public static final String PREF_HID_LANG = \"hidLang\";\n    public static final String PREF_HID_MODE = \"hidMode\";\n    public static final String PREF_HID_INTENT = \"hidIntent\";\n    public static final String PREF_HID_FILE = \"hidFile\";\n    public static final String PREF_HID_FILE_SELECTED = \"hidFileSelected\";\n\n    //notifications\n    public static final String CHANNEL_ID = \"com.mayank.rucky.update\";\n    public static final String CHANNEL_NAME = \"Update\";\n    public static final String SCHANNEL_ID = \"com.mayank.rucky.service\";\n    public static final String SCHANNEL_NAME = \"Foreground Service\";\n\n    //theme\n    public static final int[] themeList = {\n            R.style.blue_grey,      R.style.brown,\n            R.style.deep_orange,    R.style.orange,\n            R.style.amber,          R.style.yellow,\n            R.style.lime,           R.style.light_green,\n            R.style.green,          R.style.teal,\n            R.style.cyan,           R.style.light_blue,\n            R.style.blue,           R.style.indigo,\n            R.style.deep_purple,    R.style.purple,\n            R.style.pink,           R.style.red\n    };\n\n    public static final int[] themeSplashBorder = {\n            R.drawable.splash_gradient_blue_grey,       R.drawable.splash_gradient_brown,\n            R.drawable.splash_gradient_deep_orange,     R.drawable.splash_gradient_orange,\n            R.drawable.splash_gradient_amber,           R.drawable.splash_gradient_yellow,\n            R.drawable.splash_gradient_lime,            R.drawable.splash_gradient_light_green,\n            R.drawable.splash_gradient_green,           R.drawable.splash_gradient_teal,\n            R.drawable.splash_gradient_cyan,            R.drawable.splash_gradient_light_blue,\n            R.drawable.splash_gradient_blue,            R.drawable.splash_gradient_indigo,\n            R.drawable.splash_gradient_deep_purple,     R.drawable.splash_gradient_purple,\n            R.drawable.splash_gradient_pink,            R.drawable.splash_gradient_red\n    };\n\n}\n", "package com.mayank.rucky.utils;\n\nimport java.util.Date;\nimport java.security.SecureRandom;\n\npublic class Randoms {\n\n    SecureRandom random;\n\n    Randoms() {\n        random = new SecureRandom();\n        Date date = new Date();\n        random.setSeed(date.getTime());\n    }\n\n    public int randomTheme() {\n        return random.nextInt(Constants.themeList.length);\n    }\n}\n"], "filenames": ["app/src/main/java/com/mayank/rucky/activity/ConfigActivity.java", "app/src/main/java/com/mayank/rucky/utils/Constants.java", "app/src/main/java/com/mayank/rucky/utils/Randoms.java"], "buggy_code_start_loc": [143, 38, 4], "buggy_code_end_loc": [145, 44, 12], "fixing_code_start_loc": [143, 37, 4], "fixing_code_end_loc": [145, 37, 12], "type": "CWE-327", "message": "Rucky is a USB HID Rubber Ducky Launch Pad for Android. Versions 2.2 and earlier for release builds and versions 425 and earlier for nightly builds suffer from use of a weak cryptographic algorithm (RSA/ECB/PKCS1Padding). The issue will be patched in v2.3 for release builds and 426 onwards for nightly builds. As a workaround, one may disable an advance security feature if not required.", "other": {"cve": {"id": "CVE-2021-41096", "sourceIdentifier": "security-advisories@github.com", "published": "2021-09-27T20:15:07.337", "lastModified": "2021-10-08T14:27:25.490", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Rucky is a USB HID Rubber Ducky Launch Pad for Android. Versions 2.2 and earlier for release builds and versions 425 and earlier for nightly builds suffer from use of a weak cryptographic algorithm (RSA/ECB/PKCS1Padding). The issue will be patched in v2.3 for release builds and 426 onwards for nightly builds. As a workaround, one may disable an advance security feature if not required."}, {"lang": "es", "value": "Rucky es una plataforma de lanzamiento USB HID Rubber Ducky para Android. Las versiones 2.2 y anteriores para las versiones de lanzamiento y las versiones 425 y anteriores para las versiones nocturnas sufren del uso de un algoritmo criptogr\u00e1fico d\u00e9bil (RSA/ECB/PKCS1Padding). El problema ser\u00e1 corregido en la versi\u00f3n 2.3, para las versiones de lanzamiento y en la 426 para las versiones nocturnas. Como soluci\u00f3n, se puede desactivar una funcionalidad de seguridad avanzada si no es necesaria"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-327"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rucky_project:rucky:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.2", "matchCriteriaId": "D53A73CC-13AA-43D8-9F3B-6E5D4F545988"}]}]}], "references": [{"url": "https://github.com/mayankmetha/Rucky/commit/5e3a477365009f488a73efd26a91168502de1b93", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/mayankmetha/Rucky/security/advisories/GHSA-32m7-456v-wgfw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/mayankmetha/Rucky/commit/5e3a477365009f488a73efd26a91168502de1b93"}}