{"buggy_code": ["\n<span class=\"fas fa-paperclip small\"></span> <a href=\"{{url}}\">{{{value}}}</a>\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\ndefine('view-helper', ['lib!client/lib/purify.min.js'], function () {\n\n    var ViewHelper = function (options) {\n        this.urlRegex = /(^|[^\\(])(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig;\n        this._registerHandlebarsHelpers();\n\n        this.mdBeforeList = [\n            {\n                regex: /\\&\\#x60;\\&\\#x60;\\&\\#x60;\\n?([\\s\\S]*?)\\&\\#x60;\\&\\#x60;\\&\\#x60;/g,\n                value: function (s, string) {\n                    return '<pre><code>' + string.replace(/\\*/g, '&#42;').replace(/\\~/g, '&#126;') + '</code></pre>';\n                }\n            },\n            {\n                regex: /\\&\\#x60;([\\s\\S]*?)\\&\\#x60;/g,\n                value: function (s, string) {\n                    return '<code>' + string.replace(/\\*/g, '&#42;').replace(/\\~/g, '&#126;') + '</code>';\n                }\n            }\n        ];\n\n        marked.setOptions({\n            breaks: true,\n            tables: false\n        });\n    }\n\n    _.extend(ViewHelper.prototype, {\n\n        layoutManager: null,\n\n        settings: null,\n\n        user: null,\n\n        preferences: null,\n\n        language: null,\n\n        getAppParam: function (name) {\n            return (this.appParams || {})[name];\n        },\n\n        stripTags: function (text) {\n            text = text || '';\n            if (typeof text === 'string' || text instanceof String) {\n                return text.replace(/<\\/?[^>]+(>|$)/g, '');\n            }\n            return text;\n        },\n\n        escapeString: function (text) {\n            return Handlebars.Utils.escapeExpression(text);\n        },\n\n        getAvatarHtml: function (id, size, width, additionalClassName) {\n            if (this.config.get('avatarsDisabled')) {\n                return '';\n            }\n\n            var t;\n            var cache = this.cache;\n            if (cache) {\n                t = cache.get('app', 'timestamp');\n            } else {\n                t = Date.now();\n            }\n\n            var basePath = this.basePath || '';\n            var size = size || 'small';\n\n            var width = (width || 16).toString();\n\n            var className = 'avatar';\n            if (additionalClassName) {\n                className += ' ' + additionalClassName;\n            }\n\n            return '<img class=\"'+className+'\" width=\"'+width+'\" src=\"'+basePath+'?entryPoint=avatar&size='+size+'&id=' + id + '&t='+t+'\">';\n        },\n\n        _registerHandlebarsHelpers: function () {\n            var self = this;\n\n            Handlebars.registerHelper('img', function (img) {\n                return new Handlebars.SafeString(\"<img src=\\\"img/\" + img + \"\\\"></img>\");\n            });\n\n            Handlebars.registerHelper('prop', function (object, name) {\n                if (name in object) {\n                    return object[name];\n                }\n            });\n\n            Handlebars.registerHelper('var', function (name, context, options) {\n                return new Handlebars.SafeString(context[name]);\n            });\n\n            Handlebars.registerHelper('concat', function (left, right) {\n                return left + right;\n            });\n\n            Handlebars.registerHelper('ifEqual', function (left, right, options) {\n                if (left == right) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifNotEqual', function (left, right, options) {\n                if (left != right) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifPropEquals', function (object, property, value, options) {\n                if (object[property] == value) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifAttrEquals', function (model, attr, value, options) {\n                if (model.get(attr) == value) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifAttrNotEmpty', function (model, attr, options) {\n                var value = model.get(attr);\n                if (value !== null && typeof value !== 'undefined') {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('get', function (model, name) {\n                return model.get(name);\n            });\n\n            Handlebars.registerHelper('length', function (arr) {\n                return arr.length;\n            });\n\n            Handlebars.registerHelper('translate', function (name, options) {\n                var scope = options.hash.scope || null;\n                var category = options.hash.category || null;\n                if (name === 'null') {\n                    return '';\n                }\n                return self.language.translate(name, category, scope);\n            });\n\n            Handlebars.registerHelper('button', function (name, options) {\n                var style = options.hash.style || 'default';\n                var scope = options.hash.scope || null;\n                var label = options.hash.label || name;\n\n                var html = options.hash.html || options.hash.text || self.language.translate(label, 'labels', scope);\n                return new Handlebars.SafeString('<button class=\"btn btn-'+style+' action'+ (options.hash.hidden ? ' hidden' : '')+'\" data-action=\"'+name+'\" type=\"button\">'+html+'</button>');\n            });\n\n            Handlebars.registerHelper('hyphen', function (string) {\n                return Espo.Utils.convert(string, 'c-h');\n            });\n\n            Handlebars.registerHelper('toDom', function (string) {\n                return Espo.Utils.toDom(string);\n            });\n\n            Handlebars.registerHelper('breaklines', function (text) {\n                text = Handlebars.Utils.escapeExpression(text || '');\n                text = text.replace(/(\\r\\n|\\n|\\r)/gm, '<br>');\n                return new Handlebars.SafeString(text);\n            });\n\n            Handlebars.registerHelper('complexText', function (text) {\n                text = text || ''\n\n                text = text.replace(this.urlRegex, '$1[$2]($2)');\n\n                text = Handlebars.Utils.escapeExpression(text).replace(/&gt;+/g, '>');\n\n                this.mdBeforeList.forEach(function (item) {\n                    text = text.replace(item.regex, item.value);\n                });\n\n                text = marked(text);\n\n                text = DOMPurify.sanitize(text);\n\n                text = text.replace(/<a href=\"mailto:(.*)\"/gm, '<a href=\"javascript:\" data-email-address=\"$1\" data-action=\"mailTo\"');\n\n                return new Handlebars.SafeString(text);\n            }.bind(this));\n\n            Handlebars.registerHelper('translateOption', function (name, options) {\n                var scope = options.hash.scope || null;\n                var field = options.hash.field || null;\n                if (!field) {\n                    return '';\n                }\n                var translationHash = options.hash.translatedOptions || null;\n                if (translationHash === null) {\n                    translationHash = self.language.translate(field, 'options', scope) || {};\n                    if (typeof translationHash !== 'object') {\n                        translationHash = {};\n                    }\n                }\n                return translationHash[name] || name;\n            });\n\n            Handlebars.registerHelper('options', function (list, value, options) {\n                if (typeof value === 'undefined') {\n                    value = false;\n                }\n                list = list || {};\n                var html = '';\n                var isArray = (Object.prototype.toString.call(list) === '[object Array]');\n\n                var multiple = (Object.prototype.toString.call(value) === '[object Array]');\n                var checkOption = function (name) {\n                    if (multiple) {\n                        return value.indexOf(name) !== -1;\n                    } else {\n                        return value === name;\n                    }\n                };\n\n                options.hash = options.hash || {};\n\n                var scope = options.hash.scope || false;\n                var category = options.hash.category || false;\n                var field = options.hash.field || false;\n\n                var translationHash = options.hash.translationHash || options.hash.translatedOptions || null;\n\n                if (translationHash === null) {\n                    if (!category && field) {\n                        translationHash = self.language.translate(field, 'options', scope) || {};\n                        if (typeof translationHash !== 'object') {\n                            translationHash = {};\n                        }\n                    } else {\n                        translationHash = {};\n                    }\n                }\n                var translate = function (name) {\n                    if (!category) {\n                        return translationHash[name] || name;\n                    }\n                    return self.language.translate(name, category, scope);\n                };\n\n                for (var key in list) {\n                    var keyVal = list[key];\n                    html += \"<option value=\\\"\" + keyVal + \"\\\" \" + (checkOption(list[key]) ? 'selected' : '') + \">\" + translate(list[key]) + \"</option>\"\n                }\n                return new Handlebars.SafeString(html);\n            });\n\n            Handlebars.registerHelper('basePath', function () {\n                return self.basePath || '';\n            });\n        },\n\n        getScopeColorIconHtml: function (scope, noWhiteSpace, additionalClassName) {\n            if (this.config.get('scopeColorsDisabled') || this.preferences.get('scopeColorsDisabled')) {\n                return '';\n            }\n\n            var color = this.metadata.get(['clientDefs', scope, 'color']);\n            var html = '';\n\n            if (color) {\n                var $span = $('<span class=\"color-icon fas fa-square-full\">');\n                $span.css('color', color);\n                if (additionalClassName) {\n                    $span.addClass(additionalClassName);\n                }\n                html = $span.get(0).outerHTML;\n            }\n\n            if (!noWhiteSpace) {\n                if (html) html += '&nbsp;';\n            }\n\n            return html;\n        },\n\n        sanitizeHtml: function (text, options) {\n            return DOMPurify.sanitize(text, options);\n        },\n    });\n\n    return ViewHelper;\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of t\u0442he \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/attachment/fields/name', 'views/fields/varchar', function (Dep) {\n\n    return Dep.extend({\n\n        detailTemplate: 'attachment/fields/name/detail',\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n\n            var url = this.getBasePath() + '?entryPoint=download&id=' + this.model.id;\n            if (this.getUser().get('portalId')) {\n                url += '&portalId=' + this.getUser().get('portalId');\n            }\n\n            data.url = url;\n            return data;\n        }\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/fields/wysiwyg', ['views/fields/text', 'lib!Summernote'], function (Dep, Summernote) {\n\n    return Dep.extend({\n\n        type: 'wysiwyg',\n\n        listTemplate: 'fields/wysiwyg/detail',\n\n        detailTemplate: 'fields/wysiwyg/detail',\n\n        editTemplate: 'fields/wysiwyg/edit',\n\n        height: 250,\n\n        rowsDefault: 15,\n\n        seeMoreDisabled: true,\n\n        setup: function () {\n            Dep.prototype.setup.call(this);\n\n            this.hasBodyPlainField = !!~this.getFieldManager().getEntityTypeFieldList(this.model.entityType).indexOf(this.name + 'Plain');\n\n            if ('height' in this.params) {\n                this.height = this.params.height;\n            }\n\n            if ('minHeight' in this.params) {\n                this.minHeight = this.params.minHeight;\n            }\n\n            this.useIframe = this.params.useIframe || this.useIframe;\n\n            this.toolbar = this.params.toolbar || [\n                ['style', ['style']],\n                ['style', ['bold', 'italic', 'underline', 'clear']],\n                ['fontsize', ['fontsize']],\n                ['color', ['color']],\n                ['para', ['ul', 'ol', 'paragraph']],\n                ['height', ['height']],\n                ['table', ['table', 'link', 'picture', 'hr']],\n                ['misc',['codeview', 'fullscreen']]\n            ];\n\n            this.buttons = {};\n\n            if (!this.params.toolbar) {\n                if (this.params.attachmentField) {\n                    this.toolbar.push([\n                        'attachment',\n                        ['attachment']\n                    ]);\n                    var AttachmentButton = function (context) {\n                        var ui = $.summernote.ui;\n                        var button = ui.button({\n                            contents: '<i class=\"fas fa-paperclip\"></i>',\n                            tooltip: this.translate('Attach File'),\n                            click: function () {\n                                this.attachFile();\n                            }.bind(this)\n                        });\n                        return button.render();\n                    }.bind(this);\n                    this.buttons['attachment'] = AttachmentButton;\n                }\n            }\n\n            this.listenTo(this.model, 'change:isHtml', function (model, value, o) {\n                if (o.ui && this.mode == 'edit') {\n                    if (this.isRendered()) {\n                        if (!model.has('isHtml') || model.get('isHtml')) {\n                            var value = this.plainToHtml(this.model.get(this.name));\n                            if (this.lastHtmlValue && this.model.get(this.name) === this.htmlToPlain(this.lastHtmlValue)) {\n                                value = this.lastHtmlValue;\n                            }\n                            this.model.set(this.name, value);\n                            this.enableWysiwygMode();\n                        } else {\n                            this.lastHtmlValue = this.model.get(this.name);\n        \t\t            var value = this.htmlToPlain(this.model.get(this.name));\n        \t\t            this.model.set(this.name, value);\n                            this.disableWysiwygMode();\n                        }\n                    }\n                }\n                if (this.mode == 'detail') {\n                    if (this.isRendered()) {\n                        this.reRender();\n                    }\n                }\n            }, this);\n\n            this.once('remove', function () {\n                if (this.$summernote) {\n                    this.$summernote.summernote('destroy');\n                }\n            });\n\n            this.on('inline-edit-off', function () {\n                if (this.$summernote) {\n                    this.$summernote.summernote('destroy');\n                }\n            });\n\n            this.once('remove', function () {\n                $(window).off('resize.' + this.cid);\n                if (this.$scrollable) {\n                    this.$scrollable.off('scroll.' + this.cid + '-edit');\n                }\n            }.bind(this));\n        },\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n\n            data.useIframe = this.useIframe;\n            data.isPlain = this.model.has('isHtml') && !this.model.get('isHtml');\n\n            return data;\n        },\n\n        getValueForDisplay: function () {\n            var value = Dep.prototype.getValueForDisplay.call(this);\n            return this.sanitizeHtml(value);\n        },\n\n        sanitizeHtml: function (value) {\n            if (value) {\n                if (!this.htmlPurificationDisabled) {\n                    value = this.getHelper().sanitizeHtml(value);\n                } else {\n                    value = this.sanitizeHtmlLight(value);\n                }\n            }\n            return value || '';\n        },\n\n\n        sanitizeHtmlLight: function (value) {\n            value = value || '';\n            value = value.replace(/<[\\/]{0,1}(base)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(object)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(embed)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(applet)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(iframe)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(script)[^><]*>/gi, '');\n            value = value.replace(/<[^><]*([^a-z]{1}on[a-z]+)=[^><]*>/gi, function (match) {\n                return match.replace(/[^a-z]{1}on[a-z]+=/gi, ' data-handler-stripped=');\n            });\n\n            value = value.replace(/href=\" *javascript\\:(.*?)\"/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n            value = value.replace(/href=' *javascript\\:(.*?)'/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n            value = value.replace(/src=\" *javascript\\:(.*?)\"/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n            value = value.replace(/src=' *javascript\\:(.*?)'/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n            return value;\n        },\n\n        getValueForEdit: function () {\n            var value = this.model.get(this.name) || '';\n            return this.sanitizeHtmlLight(value);\n        },\n\n        afterRender: function () {\n            Dep.prototype.afterRender.call(this);\n\n            if (this.mode == 'edit') {\n                this.$summernote = this.$el.find('.summernote');\n            }\n\n            var language = this.getConfig().get('language');\n\n            if (!(language in $.summernote.lang)) {\n                $.summernote.lang[language] = this.getLanguage().translate('summernote', 'sets');\n            }\n\n            if (this.mode == 'edit') {\n                if (!this.model.has('isHtml') || this.model.get('isHtml')) {\n                    this.enableWysiwygMode();\n                } else {\n                    this.$element.removeClass('hidden');\n                }\n            }\n\n            if (this.mode == 'detail' || this.mode == 'list') {\n                if (!this.model.has('isHtml') || this.model.get('isHtml')) {\n                    if (!this.useIframe) {\n                        this.$element = this.$el.find('.html-container');\n                    } else {\n                        this.$el.find('iframe').removeClass('hidden');\n\n                        var $iframe = this.$el.find('iframe');\n\n                        var iframeElement = this.iframe = $iframe.get(0);\n                        if (!iframeElement) return;\n\n                        $iframe.load(function () {\n                            $iframe.contents().find('a').attr('target', '_blank');\n                        });\n\n                        var documentElement = iframeElement.contentWindow.document;\n\n                        var body = this.sanitizeHtml(this.model.get(this.name) || '');\n\n                        var linkElement = iframeElement.contentWindow.document.createElement('link');\n                        linkElement.type = 'text/css';\n                        linkElement.rel = 'stylesheet';\n                        linkElement.href = this.getBasePath() + this.getThemeManager().getIframeStylesheet();\n\n                        body = linkElement.outerHTML + body;\n\n                        documentElement.write(body);\n                        documentElement.close();\n\n                        var $body = $iframe.contents().find('html body');\n\n                        var $document = $(documentElement);\n\n                        var processWidth = function () {\n                            var bodyElement = $body.get(0);\n                            if (bodyElement) {\n                                if (bodyElement.clientWidth !== iframeElement.scrollWidth) {\n                                    iframeElement.style.height = (iframeElement.scrollHeight + 20) + 'px';\n                                }\n                            }\n                        };\n\n                        var increaseHeightStep = 10;\n                        var processIncreaseHeight = function (iteration, previousDiff) {\n                            $body.css('height', '');\n\n                            iteration = iteration || 0;\n\n                            if (iteration > 200) {\n                                return;\n                            }\n\n                            iteration ++;\n\n                            var diff = $document.height() - iframeElement.scrollHeight;\n\n                            if (typeof previousDiff !== 'undefined') {\n                                if (diff === previousDiff) {\n                                    $body.css('height', (iframeElement.clientHeight - increaseHeightStep) + 'px');\n                                    processWidth();\n                                    return;\n                                }\n                            }\n\n                            if (diff) {\n                                var height = iframeElement.scrollHeight + increaseHeightStep;\n                                iframeElement.style.height = height + 'px';\n                                processIncreaseHeight(iteration, diff);\n                            } else {\n                                processWidth();\n                            }\n                        };\n\n                        var processHeight = function (isOnLoad) {\n                            if (!isOnLoad) {\n                                $iframe.css({\n                                    overflowY: 'hidden',\n                                    overflowX: 'hidden'\n                                });\n\n                                iframeElement.style.height = '0px';\n                            } else {\n                                if (iframeElement.scrollHeight >= $document.height()) {\n                                    return;\n                                }\n                            }\n\n                            var $body = $iframe.contents().find('html body');\n                            var height = $body.height();\n                            if (height === 0) {\n                                height = $body.children(0).height() + 100;\n                            }\n\n                            iframeElement.style.height = height + 'px';\n\n                            processIncreaseHeight();\n\n                            if (!isOnLoad) {\n                                $iframe.css({\n                                    overflowY: 'hidden',\n                                    overflowX: 'scroll'\n                                });\n                            }\n                        };\n\n                        $iframe.css({\n                            visibility: 'hidden'\n                        });\n                        setTimeout(function () {\n                            processHeight();\n                            $iframe.css({\n                                visibility: 'visible'\n                            });\n                            $iframe.load(function () {\n                                processHeight(true);\n                            });\n                        }, 40);\n\n                        var windowWidth = $(window).width();\n                        $(window).off('resize.' + this.cid);\n                        $(window).on('resize.' + this.cid, function() {\n                            if ($(window).width() != windowWidth) {\n                                processHeight();\n                                windowWidth = $(window).width();\n                            }\n                        }.bind(this));\n                    }\n\n                } else {\n                    this.$el.find('.plain').removeClass('hidden');\n                }\n            }\n        },\n\n        enableWysiwygMode: function () {\n            if (!this.$element) {\n                return;\n            }\n\n            this.$element.addClass('hidden');\n            this.$summernote.removeClass('hidden');\n\n            var contents = this.getValueForEdit();\n\n            this.$summernote.html(contents);\n\n            this.$summernote.find('style').remove();\n            this.$summernote.find('link[ref=\"stylesheet\"]').remove();\n\n            var options = {\n                lang: this.getConfig().get('language'),\n                callbacks: {\n                    onImageUpload: function (files) {\n                        var file = files[0];\n                        this.notify('Uploading...');\n                        this.getModelFactory().create('Attachment', function (attachment) {\n                            var fileReader = new FileReader();\n                            fileReader.onload = function (e) {\n                                attachment.set('name', file.name);\n                                attachment.set('type', file.type);\n                                attachment.set('role', 'Inline Attachment');\n                                attachment.set('global', true);\n                                attachment.set('size', file.size);\n                                if (this.model.id) {\n                                    attachment.set('relatedId', this.model.id);\n                                }\n                                attachment.set('relatedType', this.model.name);\n                                attachment.set('file', e.target.result);\n                                attachment.set('field', this.name);\n\n                                attachment.once('sync', function () {\n                                    var url = '?entryPoint=attachment&id=' + attachment.id;\n                                    this.$summernote.summernote('insertImage', url);\n                                    this.notify(false);\n                                }, this);\n                                attachment.save();\n                            }.bind(this);\n                            fileReader.readAsDataURL(file);\n                        }, this);\n                    }.bind(this),\n                    onBlur: function () {\n                        this.trigger('change')\n                    }.bind(this),\n                },\n                onCreateLink: function (link) {\n                    return link;\n                },\n                toolbar: this.toolbar,\n                buttons: this.buttons\n            };\n\n            if (this.height) {\n                options.height = this.height;\n            } else {\n                var $scrollable = this.$el.closest('.modal-body');\n                if (!$scrollable.length) {\n                    $scrollable = $(window);\n                }\n                this.$scrollable = $scrollable;\n                $scrollable.off('scroll.' + this.cid + '-edit');\n                $scrollable.on('scroll.' + this.cid + '-edit', function (e) {\n                    this.onScrollEdit(e);\n                }.bind(this));\n            }\n\n            if (this.minHeight) {\n                options.minHeight = this.minHeight;\n            }\n\n            this.$summernote.summernote(options);\n\n            this.$toolbar = this.$el.find('.note-toolbar');\n            this.$area = this.$el.find('.note-editing-area');\n        },\n\n        plainToHtml: function (html) {\n        \thtml = html || '';\n        \tvar value = html.replace(/\\n/g, '<br>');\n        \treturn value;\n        },\n\n        htmlToPlain: function (text) {\n        \ttext = text || '';\n            var value = text.replace(/<br\\s*\\/?>/mg, '\\n');\n\n            value = value.replace(/<\\/p\\s*\\/?>/mg, '\\n\\n');\n\n            var $div = $('<div>').html(value);\n            $div.find('style').remove();\n            $div.find('link[ref=\"stylesheet\"]').remove();\n\n            value =  $div.text();\n\n            return value;\n        },\n\n        disableWysiwygMode: function () {\n            if (this.$summernote) {\n                this.$summernote.summernote('destroy');\n                this.$summernote.addClass('hidden');\n            }\n            this.$element.removeClass('hidden');\n\n            if (this.$scrollable) {\n                this.$scrollable.off('scroll.' + this.cid + '-edit');\n            }\n        },\n\n        fetch: function () {\n            var data = {};\n            if (!this.model.has('isHtml') || this.model.get('isHtml')) {\n                var code = this.$summernote.summernote('code');\n                if (code == '<p><br></p>') {\n                    code = '';\n                }\n                data[this.name] = code;\n            } else {\n                data[this.name] = this.$element.val();\n            }\n\n            if (this.model.has('isHtml') && this.hasBodyPlainField) {\n            \tif (this.model.get('isHtml')) {\n            \t\tdata[this.name + 'Plain'] = this.htmlToPlain(data[this.name]);\n            \t} else {\n            \t\tdata[this.name + 'Plain'] = data[this.name];\n            \t}\n            }\n            return data;\n        },\n\n        onScrollEdit: function (e) {\n            var $target = $(e.target);\n            var toolbarHeight = this.$toolbar.height();\n            var toolbarWidth = this.$toolbar.parent().width();\n            var edgeTop, edgeTopAbsolute;\n\n            if ($target.get(0) === window.document) {\n                var $buttonContainer = $target.find('.detail-button-container:not(.hidden)');\n                var offset = $buttonContainer.offset();\n                if (offset) {\n                    edgeTop = offset.top + $buttonContainer.height();\n                    edgeTopAbsolute = edgeTop - $(window).scrollTop();\n                }\n            } else {\n                var offset = $target.offset();\n                if (offset) {\n                    edgeTop = offset.top;\n                    edgeTopAbsolute = edgeTop - $(window).scrollTop();\n                }\n            }\n\n            var top = this.$el.offset().top;\n            var bottom = top + this.$el.height() - toolbarHeight;\n\n            var toStick = false;\n            if (edgeTop > top && bottom > edgeTop) {\n                toStick = true;\n            }\n\n            if (toStick) {\n                this.$toolbar.css({\n                    top: edgeTopAbsolute + 'px',\n                    width: toolbarWidth + 'px'\n                });\n                this.$toolbar.addClass('sticked');\n                this.$area.css({\n                    marginTop: toolbarHeight + 'px',\n                    backgroundColor: ''\n                });\n            } else {\n                this.$toolbar.css({\n                    top: '',\n                    width: ''\n                });\n                this.$toolbar.removeClass('sticked');\n                this.$area.css({\n                    marginTop: ''\n                });\n            }\n        },\n\n        attachFile: function () {\n            var $form = this.$el.closest('.record');\n            $form.find('.field[data-name=\"'+this.params.attachmentField+'\"] input.file').click();\n        }\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/preferences/fields/dashboard-tab-list', 'views/fields/array', function (Dep) {\n\n    return Dep.extend({\n\n        setup: function () {\n            Dep.prototype.setup.call(this);\n\n            this.translatedOptions = {};\n            var list = this.model.get(this.name) || [];\n            list.forEach(function (value) {\n                this.translatedOptions[value] = value;\n            }, this);\n        },\n\n        getItemHtml: function (value) {\n            var translatedValue = this.translatedOptions[value] || value;\n\n            var html = '' +\n            '<div class=\"list-group-item link-with-role form-inline\" data-value=\"' + value + '\">' +\n                '<div class=\"pull-left\" style=\"width: 92%; display: inline-block;\">' +\n                    '<input data-name=\"translatedValue\" data-value=\"' + value + '\" class=\"role form-control input-sm\" value=\"'+translatedValue+'\">' +\n                '</div>' +\n                '<div style=\"width: 8%; display: inline-block; vertical-align: top;\">' +\n                    '<a href=\"javascript:\" class=\"pull-right\" data-value=\"' + value + '\" data-action=\"removeValue\"><span class=\"fas fa-times\"></a>' +\n                '</div><br style=\"clear: both;\" />' +\n            '</div>';\n\n            return html;\n        },\n\n        fetch: function () {\n            var data = Dep.prototype.fetch.call(this);\n            data.translatedOptions = {};\n            (data[this.name] || []).forEach(function (value) {\n                data.translatedOptions[value] = this.$el.find('input[data-name=\"translatedValue\"][data-value=\"'+value+'\"]').val() || value;\n            }, this);\n\n            return data;\n        }\n\n    });\n\n});\n"], "fixing_code": ["\n<span class=\"fas fa-paperclip small\"></span> <a href=\"{{url}}\">{{value}}</a>\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\ndefine('view-helper', ['lib!client/lib/purify.min.js'], function () {\n\n    var ViewHelper = function (options) {\n        this.urlRegex = /(^|[^\\(])(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig;\n        this._registerHandlebarsHelpers();\n\n        this.mdBeforeList = [\n            {\n                regex: /\\&\\#x60;\\&\\#x60;\\&\\#x60;\\n?([\\s\\S]*?)\\&\\#x60;\\&\\#x60;\\&\\#x60;/g,\n                value: function (s, string) {\n                    return '<pre><code>' + string.replace(/\\*/g, '&#42;').replace(/\\~/g, '&#126;') + '</code></pre>';\n                }\n            },\n            {\n                regex: /\\&\\#x60;([\\s\\S]*?)\\&\\#x60;/g,\n                value: function (s, string) {\n                    return '<code>' + string.replace(/\\*/g, '&#42;').replace(/\\~/g, '&#126;') + '</code>';\n                }\n            }\n        ];\n\n        marked.setOptions({\n            breaks: true,\n            tables: false\n        });\n    }\n\n    _.extend(ViewHelper.prototype, {\n\n        layoutManager: null,\n\n        settings: null,\n\n        user: null,\n\n        preferences: null,\n\n        language: null,\n\n        getAppParam: function (name) {\n            return (this.appParams || {})[name];\n        },\n\n        stripTags: function (text) {\n            text = text || '';\n            if (typeof text === 'string' || text instanceof String) {\n                return text.replace(/<\\/?[^>]+(>|$)/g, '');\n            }\n            return text;\n        },\n\n        escapeString: function (text) {\n            return Handlebars.Utils.escapeExpression(text);\n        },\n\n        getAvatarHtml: function (id, size, width, additionalClassName) {\n            if (this.config.get('avatarsDisabled')) {\n                return '';\n            }\n\n            var t;\n            var cache = this.cache;\n            if (cache) {\n                t = cache.get('app', 'timestamp');\n            } else {\n                t = Date.now();\n            }\n\n            var basePath = this.basePath || '';\n            var size = size || 'small';\n\n            var width = (width || 16).toString();\n\n            var className = 'avatar';\n            if (additionalClassName) {\n                className += ' ' + additionalClassName;\n            }\n\n            return '<img class=\"'+className+'\" width=\"'+width+'\" src=\"'+basePath+'?entryPoint=avatar&size='+size+'&id=' + id + '&t='+t+'\">';\n        },\n\n        _registerHandlebarsHelpers: function () {\n            var self = this;\n\n            Handlebars.registerHelper('img', function (img) {\n                return new Handlebars.SafeString(\"<img src=\\\"img/\" + img + \"\\\"></img>\");\n            });\n\n            Handlebars.registerHelper('prop', function (object, name) {\n                if (name in object) {\n                    return object[name];\n                }\n            });\n\n            Handlebars.registerHelper('var', function (name, context, options) {\n                return new Handlebars.SafeString(context[name]);\n            });\n\n            Handlebars.registerHelper('concat', function (left, right) {\n                return left + right;\n            });\n\n            Handlebars.registerHelper('ifEqual', function (left, right, options) {\n                if (left == right) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifNotEqual', function (left, right, options) {\n                if (left != right) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifPropEquals', function (object, property, value, options) {\n                if (object[property] == value) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifAttrEquals', function (model, attr, value, options) {\n                if (model.get(attr) == value) {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('ifAttrNotEmpty', function (model, attr, options) {\n                var value = model.get(attr);\n                if (value !== null && typeof value !== 'undefined') {\n                    return options.fn(this);\n                }\n                return options.inverse(this);\n            });\n\n            Handlebars.registerHelper('get', function (model, name) {\n                return model.get(name);\n            });\n\n            Handlebars.registerHelper('length', function (arr) {\n                return arr.length;\n            });\n\n            Handlebars.registerHelper('translate', function (name, options) {\n                var scope = options.hash.scope || null;\n                var category = options.hash.category || null;\n                if (name === 'null') {\n                    return '';\n                }\n                return self.language.translate(name, category, scope);\n            });\n\n            Handlebars.registerHelper('button', function (name, options) {\n                var style = options.hash.style || 'default';\n                var scope = options.hash.scope || null;\n                var label = options.hash.label || name;\n\n                var html = options.hash.html || options.hash.text || self.language.translate(label, 'labels', scope);\n                return new Handlebars.SafeString('<button class=\"btn btn-'+style+' action'+ (options.hash.hidden ? ' hidden' : '')+'\" data-action=\"'+name+'\" type=\"button\">'+html+'</button>');\n            });\n\n            Handlebars.registerHelper('hyphen', function (string) {\n                return Espo.Utils.convert(string, 'c-h');\n            });\n\n            Handlebars.registerHelper('toDom', function (string) {\n                return Espo.Utils.toDom(string);\n            });\n\n            Handlebars.registerHelper('breaklines', function (text) {\n                text = Handlebars.Utils.escapeExpression(text || '');\n                text = text.replace(/(\\r\\n|\\n|\\r)/gm, '<br>');\n                return new Handlebars.SafeString(text);\n            });\n\n            Handlebars.registerHelper('complexText', function (text) {\n                text = text || ''\n\n                text = text.replace(this.urlRegex, '$1[$2]($2)');\n\n                text = Handlebars.Utils.escapeExpression(text).replace(/&gt;+/g, '>');\n\n                this.mdBeforeList.forEach(function (item) {\n                    text = text.replace(item.regex, item.value);\n                });\n\n                text = marked(text);\n\n                text = DOMPurify.sanitize(text);\n\n                text = text.replace(/<a href=\"mailto:(.*)\"/gm, '<a href=\"javascript:\" data-email-address=\"$1\" data-action=\"mailTo\"');\n\n                return new Handlebars.SafeString(text);\n            }.bind(this));\n\n            Handlebars.registerHelper('translateOption', function (name, options) {\n                var scope = options.hash.scope || null;\n                var field = options.hash.field || null;\n                if (!field) {\n                    return '';\n                }\n                var translationHash = options.hash.translatedOptions || null;\n                if (translationHash === null) {\n                    translationHash = self.language.translate(field, 'options', scope) || {};\n                    if (typeof translationHash !== 'object') {\n                        translationHash = {};\n                    }\n                }\n                return translationHash[name] || name;\n            });\n\n            Handlebars.registerHelper('options', function (list, value, options) {\n                if (typeof value === 'undefined') {\n                    value = false;\n                }\n                list = list || {};\n                var html = '';\n                var isArray = (Object.prototype.toString.call(list) === '[object Array]');\n\n                var multiple = (Object.prototype.toString.call(value) === '[object Array]');\n                var checkOption = function (name) {\n                    if (multiple) {\n                        return value.indexOf(name) !== -1;\n                    } else {\n                        return value === name;\n                    }\n                };\n\n                options.hash = options.hash || {};\n\n                var scope = options.hash.scope || false;\n                var category = options.hash.category || false;\n                var field = options.hash.field || false;\n\n                var translationHash = options.hash.translationHash || options.hash.translatedOptions || null;\n\n                if (translationHash === null) {\n                    if (!category && field) {\n                        translationHash = self.language.translate(field, 'options', scope) || {};\n                        if (typeof translationHash !== 'object') {\n                            translationHash = {};\n                        }\n                    } else {\n                        translationHash = {};\n                    }\n                }\n                var translate = function (name) {\n                    if (!category) {\n                        return translationHash[name] || name;\n                    }\n                    return self.language.translate(name, category, scope);\n                };\n\n                for (var key in list) {\n                    var keyVal = list[key];\n                    html += \"<option value=\\\"\" + keyVal + \"\\\" \" + (checkOption(list[key]) ? 'selected' : '') + \">\" + translate(list[key]) + \"</option>\"\n                }\n                return new Handlebars.SafeString(html);\n            });\n\n            Handlebars.registerHelper('basePath', function () {\n                return self.basePath || '';\n            });\n        },\n\n        getScopeColorIconHtml: function (scope, noWhiteSpace, additionalClassName) {\n            if (this.config.get('scopeColorsDisabled') || this.preferences.get('scopeColorsDisabled')) {\n                return '';\n            }\n\n            var color = this.metadata.get(['clientDefs', scope, 'color']);\n            var html = '';\n\n            if (color) {\n                var $span = $('<span class=\"color-icon fas fa-square-full\">');\n                $span.css('color', color);\n                if (additionalClassName) {\n                    $span.addClass(additionalClassName);\n                }\n                html = $span.get(0).outerHTML;\n            }\n\n            if (!noWhiteSpace) {\n                if (html) html += '&nbsp;';\n            }\n\n            return html;\n        },\n\n        sanitizeHtml: function (text, options) {\n            return DOMPurify.sanitize(text, options);\n        },\n\n        moderateSanitizeHtml: function (value) {\n            value = value || '';\n            value = value.replace(/<[\\/]{0,1}(base)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(object)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(embed)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(applet)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(iframe)[^><]*>/gi, '');\n            value = value.replace(/<[\\/]{0,1}(script)[^><]*>/gi, '');\n            value = value.replace(/<[^><]*([^a-z]{1}on[a-z]+)=[^><]*>/gi, function (match) {\n                return match.replace(/[^a-z]{1}on[a-z]+=/gi, ' data-handler-stripped=');\n            });\n\n            value = this.stripEventHandlersInHtml(value);\n\n            value = value.replace(/href=\" *javascript\\:(.*?)\"/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n            value = value.replace(/href=' *javascript\\:(.*?)'/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n            value = value.replace(/src=\" *javascript\\:(.*?)\"/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n            value = value.replace(/src=' *javascript\\:(.*?)'/gi, function(m, $1) {\n                return 'removed=\"\"';\n            });\n\n            return value;\n        },\n\n        stripEventHandlersInHtml: function (html) {\n            function stripHTML(){\n                html = html.slice(0, strip) + html.slice(j);\n                j = strip;\n                strip = false;\n            }\n            function isValidTagChar(str) {\n                return str.match(/[a-z?\\\\\\/!]/i);\n            }\n            var strip = false;\n            var lastQuote = false;\n            for (var i = 0; i<html.length; i++){\n                if (html[i] === \"<\" && html[i+1] && isValidTagChar(html[i+1])) {\n                    i++;\n                    for (var j = i; j<html.length; j++){\n                        if (!lastQuote && html[j] === \">\"){\n                            if (strip) {\n                                stripHTML();\n                            }\n                            i = j;\n                            break;\n                        }\n                        if (lastQuote === html[j]){\n                            lastQuote = false;\n                            continue;\n                        }\n                        if (!lastQuote && html[j-1] === \"=\" && (html[j] === \"'\" || html[j] === '\"')){\n                            lastQuote = html[j];\n                        }\n                        if (!lastQuote && html[j-2] === \" \" && html[j-1] === \"o\" && html[j] === \"n\"){\n                            strip = j-2;\n                        }\n                        if (strip && html[j] === \" \" && !lastQuote){\n                            stripHTML();\n                        }\n                    }\n                }\n            }\n            return html;\n        },\n    });\n\n    return ViewHelper;\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of t\u0442he \"EspoCRM\" word.\n ************************************************************************/\n\ndefine('views/attachment/fields/name', 'views/fields/varchar', function (Dep) {\n\n    return Dep.extend({\n\n        detailTemplate: 'attachment/fields/name/detail',\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n\n            var url = this.getBasePath() + '?entryPoint=download&id=' + this.model.id;\n            if (this.getUser().get('portalId')) {\n                url += '&portalId=' + this.getUser().get('portalId');\n            }\n\n            data.url = url;\n            return data;\n        }\n\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\nEspo.define('views/fields/wysiwyg', ['views/fields/text', 'lib!Summernote'], function (Dep, Summernote) {\n\n    return Dep.extend({\n\n        type: 'wysiwyg',\n\n        listTemplate: 'fields/wysiwyg/detail',\n\n        detailTemplate: 'fields/wysiwyg/detail',\n\n        editTemplate: 'fields/wysiwyg/edit',\n\n        height: 250,\n\n        rowsDefault: 15,\n\n        seeMoreDisabled: true,\n\n        setup: function () {\n            Dep.prototype.setup.call(this);\n\n            this.hasBodyPlainField = !!~this.getFieldManager().getEntityTypeFieldList(this.model.entityType).indexOf(this.name + 'Plain');\n\n            if ('height' in this.params) {\n                this.height = this.params.height;\n            }\n\n            if ('minHeight' in this.params) {\n                this.minHeight = this.params.minHeight;\n            }\n\n            this.useIframe = this.params.useIframe || this.useIframe;\n\n            this.toolbar = this.params.toolbar || [\n                ['style', ['style']],\n                ['style', ['bold', 'italic', 'underline', 'clear']],\n                ['fontsize', ['fontsize']],\n                ['color', ['color']],\n                ['para', ['ul', 'ol', 'paragraph']],\n                ['height', ['height']],\n                ['table', ['table', 'link', 'picture', 'hr']],\n                ['misc',['codeview', 'fullscreen']]\n            ];\n\n            this.buttons = {};\n\n            if (!this.params.toolbar) {\n                if (this.params.attachmentField) {\n                    this.toolbar.push([\n                        'attachment',\n                        ['attachment']\n                    ]);\n                    var AttachmentButton = function (context) {\n                        var ui = $.summernote.ui;\n                        var button = ui.button({\n                            contents: '<i class=\"fas fa-paperclip\"></i>',\n                            tooltip: this.translate('Attach File'),\n                            click: function () {\n                                this.attachFile();\n                            }.bind(this)\n                        });\n                        return button.render();\n                    }.bind(this);\n                    this.buttons['attachment'] = AttachmentButton;\n                }\n            }\n\n            this.listenTo(this.model, 'change:isHtml', function (model, value, o) {\n                if (o.ui && this.mode == 'edit') {\n                    if (this.isRendered()) {\n                        if (!model.has('isHtml') || model.get('isHtml')) {\n                            var value = this.plainToHtml(this.model.get(this.name));\n                            if (this.lastHtmlValue && this.model.get(this.name) === this.htmlToPlain(this.lastHtmlValue)) {\n                                value = this.lastHtmlValue;\n                            }\n                            this.model.set(this.name, value);\n                            this.enableWysiwygMode();\n                        } else {\n                            this.lastHtmlValue = this.model.get(this.name);\n        \t\t            var value = this.htmlToPlain(this.model.get(this.name));\n        \t\t            this.model.set(this.name, value);\n                            this.disableWysiwygMode();\n                        }\n                    }\n                }\n                if (this.mode == 'detail') {\n                    if (this.isRendered()) {\n                        this.reRender();\n                    }\n                }\n            }, this);\n\n            this.once('remove', function () {\n                if (this.$summernote) {\n                    this.$summernote.summernote('destroy');\n                }\n            });\n\n            this.on('inline-edit-off', function () {\n                if (this.$summernote) {\n                    this.$summernote.summernote('destroy');\n                }\n            });\n\n            this.once('remove', function () {\n                $(window).off('resize.' + this.cid);\n                if (this.$scrollable) {\n                    this.$scrollable.off('scroll.' + this.cid + '-edit');\n                }\n            }.bind(this));\n        },\n\n        data: function () {\n            var data = Dep.prototype.data.call(this);\n\n            data.useIframe = this.useIframe;\n            data.isPlain = this.model.has('isHtml') && !this.model.get('isHtml');\n\n            return data;\n        },\n\n        getValueForDisplay: function () {\n            var value = Dep.prototype.getValueForDisplay.call(this);\n            return this.sanitizeHtml(value);\n        },\n\n        sanitizeHtml: function (value) {\n            if (value) {\n                if (!this.htmlPurificationDisabled) {\n                    value = this.getHelper().sanitizeHtml(value);\n                } else {\n                    value = this.sanitizeHtmlLight(value);\n                }\n            }\n            return value || '';\n        },\n\n\n        sanitizeHtmlLight: function (value) {\n           return this.getHelper().moderateSanitizeHtml(value);\n        },\n\n        getValueForEdit: function () {\n            var value = this.model.get(this.name) || '';\n            return this.sanitizeHtmlLight(value);\n        },\n\n        afterRender: function () {\n            Dep.prototype.afterRender.call(this);\n\n            if (this.mode == 'edit') {\n                this.$summernote = this.$el.find('.summernote');\n            }\n\n            var language = this.getConfig().get('language');\n\n            if (!(language in $.summernote.lang)) {\n                $.summernote.lang[language] = this.getLanguage().translate('summernote', 'sets');\n            }\n\n            if (this.mode == 'edit') {\n                if (!this.model.has('isHtml') || this.model.get('isHtml')) {\n                    this.enableWysiwygMode();\n                } else {\n                    this.$element.removeClass('hidden');\n                }\n            }\n\n            if (this.mode == 'detail' || this.mode == 'list') {\n                if (!this.model.has('isHtml') || this.model.get('isHtml')) {\n                    if (!this.useIframe) {\n                        this.$element = this.$el.find('.html-container');\n                    } else {\n                        this.$el.find('iframe').removeClass('hidden');\n\n                        var $iframe = this.$el.find('iframe');\n\n                        var iframeElement = this.iframe = $iframe.get(0);\n                        if (!iframeElement) return;\n\n                        $iframe.load(function () {\n                            $iframe.contents().find('a').attr('target', '_blank');\n                        });\n\n                        var documentElement = iframeElement.contentWindow.document;\n\n                        var body = this.sanitizeHtml(this.model.get(this.name) || '');\n\n                        var linkElement = iframeElement.contentWindow.document.createElement('link');\n                        linkElement.type = 'text/css';\n                        linkElement.rel = 'stylesheet';\n                        linkElement.href = this.getBasePath() + this.getThemeManager().getIframeStylesheet();\n\n                        body = linkElement.outerHTML + body;\n\n                        documentElement.write(body);\n                        documentElement.close();\n\n                        var $body = $iframe.contents().find('html body');\n\n                        var $document = $(documentElement);\n\n                        var processWidth = function () {\n                            var bodyElement = $body.get(0);\n                            if (bodyElement) {\n                                if (bodyElement.clientWidth !== iframeElement.scrollWidth) {\n                                    iframeElement.style.height = (iframeElement.scrollHeight + 20) + 'px';\n                                }\n                            }\n                        };\n\n                        var increaseHeightStep = 10;\n                        var processIncreaseHeight = function (iteration, previousDiff) {\n                            $body.css('height', '');\n\n                            iteration = iteration || 0;\n\n                            if (iteration > 200) {\n                                return;\n                            }\n\n                            iteration ++;\n\n                            var diff = $document.height() - iframeElement.scrollHeight;\n\n                            if (typeof previousDiff !== 'undefined') {\n                                if (diff === previousDiff) {\n                                    $body.css('height', (iframeElement.clientHeight - increaseHeightStep) + 'px');\n                                    processWidth();\n                                    return;\n                                }\n                            }\n\n                            if (diff) {\n                                var height = iframeElement.scrollHeight + increaseHeightStep;\n                                iframeElement.style.height = height + 'px';\n                                processIncreaseHeight(iteration, diff);\n                            } else {\n                                processWidth();\n                            }\n                        };\n\n                        var processHeight = function (isOnLoad) {\n                            if (!isOnLoad) {\n                                $iframe.css({\n                                    overflowY: 'hidden',\n                                    overflowX: 'hidden'\n                                });\n\n                                iframeElement.style.height = '0px';\n                            } else {\n                                if (iframeElement.scrollHeight >= $document.height()) {\n                                    return;\n                                }\n                            }\n\n                            var $body = $iframe.contents().find('html body');\n                            var height = $body.height();\n                            if (height === 0) {\n                                height = $body.children(0).height() + 100;\n                            }\n\n                            iframeElement.style.height = height + 'px';\n\n                            processIncreaseHeight();\n\n                            if (!isOnLoad) {\n                                $iframe.css({\n                                    overflowY: 'hidden',\n                                    overflowX: 'scroll'\n                                });\n                            }\n                        };\n\n                        $iframe.css({\n                            visibility: 'hidden'\n                        });\n                        setTimeout(function () {\n                            processHeight();\n                            $iframe.css({\n                                visibility: 'visible'\n                            });\n                            $iframe.load(function () {\n                                processHeight(true);\n                            });\n                        }, 40);\n\n                        var windowWidth = $(window).width();\n                        $(window).off('resize.' + this.cid);\n                        $(window).on('resize.' + this.cid, function() {\n                            if ($(window).width() != windowWidth) {\n                                processHeight();\n                                windowWidth = $(window).width();\n                            }\n                        }.bind(this));\n                    }\n\n                } else {\n                    this.$el.find('.plain').removeClass('hidden');\n                }\n            }\n        },\n\n        enableWysiwygMode: function () {\n            if (!this.$element) {\n                return;\n            }\n\n            this.$element.addClass('hidden');\n            this.$summernote.removeClass('hidden');\n\n            var contents = this.getValueForEdit();\n\n            this.$summernote.html(contents);\n\n            this.$summernote.find('style').remove();\n            this.$summernote.find('link[ref=\"stylesheet\"]').remove();\n\n            var options = {\n                lang: this.getConfig().get('language'),\n                callbacks: {\n                    onImageUpload: function (files) {\n                        var file = files[0];\n                        this.notify('Uploading...');\n                        this.getModelFactory().create('Attachment', function (attachment) {\n                            var fileReader = new FileReader();\n                            fileReader.onload = function (e) {\n                                attachment.set('name', file.name);\n                                attachment.set('type', file.type);\n                                attachment.set('role', 'Inline Attachment');\n                                attachment.set('global', true);\n                                attachment.set('size', file.size);\n                                if (this.model.id) {\n                                    attachment.set('relatedId', this.model.id);\n                                }\n                                attachment.set('relatedType', this.model.name);\n                                attachment.set('file', e.target.result);\n                                attachment.set('field', this.name);\n\n                                attachment.once('sync', function () {\n                                    var url = '?entryPoint=attachment&id=' + attachment.id;\n                                    this.$summernote.summernote('insertImage', url);\n                                    this.notify(false);\n                                }, this);\n                                attachment.save();\n                            }.bind(this);\n                            fileReader.readAsDataURL(file);\n                        }, this);\n                    }.bind(this),\n                    onBlur: function () {\n                        this.trigger('change')\n                    }.bind(this),\n                },\n                onCreateLink: function (link) {\n                    return link;\n                },\n                toolbar: this.toolbar,\n                buttons: this.buttons\n            };\n\n            if (this.height) {\n                options.height = this.height;\n            } else {\n                var $scrollable = this.$el.closest('.modal-body');\n                if (!$scrollable.length) {\n                    $scrollable = $(window);\n                }\n                this.$scrollable = $scrollable;\n                $scrollable.off('scroll.' + this.cid + '-edit');\n                $scrollable.on('scroll.' + this.cid + '-edit', function (e) {\n                    this.onScrollEdit(e);\n                }.bind(this));\n            }\n\n            if (this.minHeight) {\n                options.minHeight = this.minHeight;\n            }\n\n            this.$summernote.summernote(options);\n\n            this.$toolbar = this.$el.find('.note-toolbar');\n            this.$area = this.$el.find('.note-editing-area');\n        },\n\n        plainToHtml: function (html) {\n        \thtml = html || '';\n        \tvar value = html.replace(/\\n/g, '<br>');\n        \treturn value;\n        },\n\n        htmlToPlain: function (text) {\n        \ttext = text || '';\n            var value = text.replace(/<br\\s*\\/?>/mg, '\\n');\n\n            value = value.replace(/<\\/p\\s*\\/?>/mg, '\\n\\n');\n\n            var $div = $('<div>').html(value);\n            $div.find('style').remove();\n            $div.find('link[ref=\"stylesheet\"]').remove();\n\n            value =  $div.text();\n\n            return value;\n        },\n\n        disableWysiwygMode: function () {\n            if (this.$summernote) {\n                this.$summernote.summernote('destroy');\n                this.$summernote.addClass('hidden');\n            }\n            this.$element.removeClass('hidden');\n\n            if (this.$scrollable) {\n                this.$scrollable.off('scroll.' + this.cid + '-edit');\n            }\n        },\n\n        fetch: function () {\n            var data = {};\n            if (!this.model.has('isHtml') || this.model.get('isHtml')) {\n                var code = this.$summernote.summernote('code');\n                if (code == '<p><br></p>') {\n                    code = '';\n                }\n                data[this.name] = code;\n            } else {\n                data[this.name] = this.$element.val();\n            }\n\n            if (this.model.has('isHtml') && this.hasBodyPlainField) {\n            \tif (this.model.get('isHtml')) {\n            \t\tdata[this.name + 'Plain'] = this.htmlToPlain(data[this.name]);\n            \t} else {\n            \t\tdata[this.name + 'Plain'] = data[this.name];\n            \t}\n            }\n            return data;\n        },\n\n        onScrollEdit: function (e) {\n            var $target = $(e.target);\n            var toolbarHeight = this.$toolbar.height();\n            var toolbarWidth = this.$toolbar.parent().width();\n            var edgeTop, edgeTopAbsolute;\n\n            if ($target.get(0) === window.document) {\n                var $buttonContainer = $target.find('.detail-button-container:not(.hidden)');\n                var offset = $buttonContainer.offset();\n                if (offset) {\n                    edgeTop = offset.top + $buttonContainer.height();\n                    edgeTopAbsolute = edgeTop - $(window).scrollTop();\n                }\n            } else {\n                var offset = $target.offset();\n                if (offset) {\n                    edgeTop = offset.top;\n                    edgeTopAbsolute = edgeTop - $(window).scrollTop();\n                }\n            }\n\n            var top = this.$el.offset().top;\n            var bottom = top + this.$el.height() - toolbarHeight;\n\n            var toStick = false;\n            if (edgeTop > top && bottom > edgeTop) {\n                toStick = true;\n            }\n\n            if (toStick) {\n                this.$toolbar.css({\n                    top: edgeTopAbsolute + 'px',\n                    width: toolbarWidth + 'px'\n                });\n                this.$toolbar.addClass('sticked');\n                this.$area.css({\n                    marginTop: toolbarHeight + 'px',\n                    backgroundColor: ''\n                });\n            } else {\n                this.$toolbar.css({\n                    top: '',\n                    width: ''\n                });\n                this.$toolbar.removeClass('sticked');\n                this.$area.css({\n                    marginTop: ''\n                });\n            }\n        },\n\n        attachFile: function () {\n            var $form = this.$el.closest('.record');\n            $form.find('.field[data-name=\"'+this.params.attachmentField+'\"] input.file').click();\n        }\n    });\n});\n", "/************************************************************************\n * This file is part of EspoCRM.\n *\n * EspoCRM - Open Source CRM application.\n * Copyright (C) 2014-2019 Yuri Kuznetsov, Taras Machyshyn, Oleksiy Avramenko\n * Website: https://www.espocrm.com\n *\n * EspoCRM is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * EspoCRM is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with EspoCRM. If not, see http://www.gnu.org/licenses/.\n *\n * The interactive user interfaces in modified source and object code versions\n * of this program must display Appropriate Legal Notices, as required under\n * Section 5 of the GNU General Public License version 3.\n *\n * In accordance with Section 7(b) of the GNU General Public License version 3,\n * these Appropriate Legal Notices must retain the display of the \"EspoCRM\" word.\n ************************************************************************/\n\ndefine('views/preferences/fields/dashboard-tab-list', 'views/fields/array', function (Dep) {\n\n    return Dep.extend({\n\n        setup: function () {\n            Dep.prototype.setup.call(this);\n\n            this.translatedOptions = {};\n            var list = this.model.get(this.name) || [];\n            list.forEach(function (value) {\n                this.translatedOptions[value] = value;\n            }, this);\n        },\n        getItemHtml: function (value) {\n            value = value.toString();\n            var valueSanitized = this.escapeValue(value);\n            var translatedValue = this.escapeValue(this.translatedOptions[value] || value);\n\n            var html = '' +\n            '<div class=\"list-group-item link-with-role form-inline\" data-value=\"' + valueSanitized + '\">' +\n                '<div class=\"pull-left\" style=\"width: 92%; display: inline-block;\">' +\n                    '<input data-name=\"translatedValue\" data-value=\"' + valueSanitized + '\" class=\"role form-control input-sm\" value=\"'+translatedValue+'\">' +\n                '</div>' +\n                '<div style=\"width: 8%; display: inline-block; vertical-align: top;\">' +\n                    '<a href=\"javascript:\" class=\"pull-right\" data-value=\"' + valueSanitized + '\" data-action=\"removeValue\"><span class=\"fas fa-times\"></a>' +\n                '</div><br style=\"clear: both;\" />' +\n            '</div>';\n\n            return html;\n        },\n\n        fetch: function () {\n            var data = Dep.prototype.fetch.call(this);\n            data.translatedOptions = {};\n            (data[this.name] || []).forEach(function (value) {\n                var valueInternal = value.replace(/\"/g, '\\\\\"');\n                data.translatedOptions[value] = this.$el.find('input[data-name=\"translatedValue\"][data-value=\"'+valueInternal+'\"]').val() || value;\n            }, this);\n\n            return data;\n        }\n\n    });\n\n});\n"], "filenames": ["client/res/templates/attachment/fields/name/detail.tpl", "client/src/view-helper.js", "client/src/views/attachment/fields/name.js", "client/src/views/fields/wysiwyg.js", "client/src/views/preferences/fields/dashboard-tab-list.js"], "buggy_code_start_loc": [2, 323, 29, 168, 29], "buggy_code_end_loc": [3, 323, 30, 192, 64], "fixing_code_start_loc": [2, 324, 29, 168, 29], "fixing_code_end_loc": [3, 395, 30, 169, 66], "type": "CWE-79", "message": "An issue was discovered in EspoCRM before 5.6.9. Stored XSS was executed on the Preference page as well as while sending an email when a malicious payload was inserted inside the Email Signature in the Preference page. The attacker could insert malicious JavaScript inside his email signature, which fires when the victim replies or forwards the mail, thus helping him steal victims' cookies (hence compromising their accounts).", "other": {"cve": {"id": "CVE-2019-14546", "sourceIdentifier": "cve@mitre.org", "published": "2019-08-05T19:15:11.257", "lastModified": "2019-08-14T11:31:18.113", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in EspoCRM before 5.6.9. Stored XSS was executed on the Preference page as well as while sending an email when a malicious payload was inserted inside the Email Signature in the Preference page. The attacker could insert malicious JavaScript inside his email signature, which fires when the victim replies or forwards the mail, thus helping him steal victims' cookies (hence compromising their accounts)."}, {"lang": "es", "value": "Se detect\u00f3 un problema en EspoCRM anterior a versi\u00f3n 5.6.9. Un ataque de tipo XSS almacenado fue ejecutado en la p\u00e1gina Preference, as\u00ed como mientras se env\u00eda un correo electr\u00f3nico cuando una carga maliciosa fue insertada dentro de la firma de correo electr\u00f3nico en la p\u00e1gina de Preference. El atacante podr\u00eda insertar JavaScript malicioso dentro de su firma de correo electr\u00f3nico, que se activa cuando la v\u00edctima responde o reenv\u00eda el correo, ayud\u00e1ndolo as\u00ed a robar las cookies de las v\u00edctimas (comprometiendo sus cuentas)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:espocrm:espocrm:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.6.9", "matchCriteriaId": "8863F2C2-81D8-4EC9-9EB7-05652984FDE1"}]}]}], "references": [{"url": "https://gauravnarwani.com/publications/CVE-2019-14546/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/espocrm/espocrm/commit/ffd3f762ce4a8de3b8962f33513e073c55d943b5", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/espocrm/espocrm/issues/1369", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/espocrm/espocrm/releases/tag/5.6.9", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/espocrm/espocrm/commit/ffd3f762ce4a8de3b8962f33513e073c55d943b5"}}