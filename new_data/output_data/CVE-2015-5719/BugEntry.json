{"buggy_code": ["{\"major\":2, \"minor\":3, \"hotfix\":91}", "<?php\n\nApp::uses('AppController', 'Controller');\nApp::uses('Folder', 'Utility');\nApp::uses('File', 'Utility');\n\n/**\n * Templates Controller\n *\n * @property Template $Templates\n */\n\nclass TemplatesController extends AppController {\n\tpublic $components = array('Security' ,'RequestHandler');\n\n\tpublic $paginate = array(\n\t\t\t'limit' => 50,\n\t\t\t'order' => array(\n\t\t\t\t\t'Template.id' => 'desc'\n\t\t\t)\n\t);\n\n\tpublic function beforeFilter() { // TODO REMOVE\n\t\tparent::beforeFilter();\n\t\t$this->Security->unlockedActions = array('uploadFile', 'deleteTemporaryFile');\n\t}\n\t\n\t\n\tpublic function index() {\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['OR'] = array('org' => $this->Auth->user('org'), 'share' => true);\n\t\t}\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$this->paginate = Set::merge($this->paginate,array(\n\t\t\t\t\t'conditions' =>\n\t\t\t\t\tarray(\"OR\" => array(\n\t\t\t\t\t\t\tarray('org' => $this->Auth->user('org')),\n\t\t\t\t\t\t\tarray('share' => true),\n\t\t\t))));\n\t\t}\n\t\t$this->set('list', $this->paginate());\n\t}\n\t\n\tpublic function edit($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\t$this->set('mayModify', true);\n\t\t\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$this->request->data['Template']['id'] = $id;\n\t\t\t\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$oldTags = $this->TemplateTag->find('all', array(\n\t\t\t\t\t'conditions' => array('template_id' => $id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'Tag'\n\t\t\t\t));\n\n\t\t\t\t$newTags = $this->TemplateTag->Tag->find('all', array(\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'conditions' => array('name' => $tagArray)\n\t\t\t\t));\n\t\t\t\t\n\t\t\t\tforeach($oldTags as $k => $oT) {\n\t\t\t\t\tif (!in_array($oT['Tag'], $newTags)) $this->TemplateTag->delete($oT['TemplateTag']['id']); \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach($newTags as $k => $nT) {\n\t\t\t\t\tif (!in_array($nT['Tag'], $oldTags)) {\n\t\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $nT['Tag']['id'])));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be edited.');\n\t\t\t}\n\t\t}\n\t\t$this->request->data = $template;\n\n\t\t// get all existing tags for the tag add dropdown menu\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t\n\t\t//get all tags currently assigned to the event\n\t\t$currentTags = $this->Template->TemplateTag->find('all', array(\n\t\t\t'recursive' => -1,\n\t\t\t'contain' => 'Tag',\n\t\t\t'conditions' => array('template_id' => $id),\n\t\t));\n\t\t$this->set('currentTags', $currentTags);\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function view($id) {\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($id, $this->Auth->user(), false)) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\tif ($this->Template->checkAuthorisation($id, $this->Auth->user(), true)) $this->set('mayModify', true);\n\t\telse $this->set('mayModify', false);\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array(\n\t\t\t\t'id' => $id,\n\t\t\t),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement',\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag',\n\t\t\t\t),\n\t\t\t),\n\t\t));\n\t\tif (empty($template)) throw new NotFoundException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\t$tagArray = array();\n\t\tforeach($template['TemplateTag'] as $tt) {\n\t\t\t$tagArray[] = $tt;\n\t\t}\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t}\n\t\n\tpublic function add() {\n\t\tif (!$this->userRole['perm_template']) throw new MethodNotAllowedException('You are not authorised to do that.');\n\t\tif ($this->request->is('post')) {\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$this->loadModel('Tag');\n\t\t\t\tforeach ($tagArray as $t) {\n\t\t\t\t\t$tag = $this->Tag->find('first', array(\n\t\t\t\t\t\t'conditions' => array('name' => $t),\n\t\t\t\t\t\t'fields' => array('id', 'name'),\n\t\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t));\n\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $tag['Tag']['id'])));\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be created.');\n\t\t\t}\n\t\t}\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function saveElementSorting() {\n\t\t// check if user can edit the template\n\t\t$this->autoRender = false;\n\t\t$this->request->onlyAllow('ajax');\n\t\t$orderedElements = $this->request->data;\n\t\tforeach($orderedElements as &$e) {\n\t\t\t$e = ltrim($e, 'id_');\n\t\t}\n\t\t$extractedIds = array();\n\t\tforeach ($orderedElements as $element) $extractedIds[] = $element;\n\t\t$template_id = $this->Template->TemplateElement->find('first', array(\n\t\t\t'conditions' => array('id' => $extractedIds),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'template_id'),\n\t\t));\n\t\t\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($template_id['TemplateElement']['template_id'], $this->Auth->user(), true)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200));\n\t\t\n\t\t$elements = $this->Template->TemplateElement->find('all', array(\n\t\t\t\t'conditions' => array('template_id' => $template_id['TemplateElement']['template_id']),\n\t\t\t\t'recursive' => -1,\n\t\t));\n\t\tif (empty($elements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, the supplied template elements don\\'t exist, or you are not eligible to edit them.')),'status'=>200));\n\t\tif (count($elements) != count($orderedElements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Incomplete template element list passed as argument. Expecting ' . count($elements) . ' elements, only received positions for ' . count($orderedElements) . '.')),'status'=>200));\n\t\t$template_id = $elements[0]['TemplateElement']['template_id'];\n\t\t\n\t\tforeach ($elements as &$e) {\n\t\t\tif ($template_id !== $e['TemplateElement']['template_id']) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Cannot sort template elements belonging to separate templates. You should never see this message during legitimate use.')),'status'=>200));\n\t\t\tforeach ($orderedElements as $k => $orderedElement) {\n\t\t\t\tif ($orderedElement == $e['TemplateElement']['id']) {\n\t\t\t\t\t$e['TemplateElement']['position'] = $k+1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->Template->TemplateElement->saveMany($elements);\n\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Elements repositioned.')),'status'=>200));\n\t}\n\t\n\tpublic function delete($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action can only be invoked via a post request.');\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\tif ($this->Template->delete($id, true)) {\n\t\t\t$this->Session->setFlash('Template deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t} else {\n\t\t\t$this->Session->setFlash('The template could not be deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t}\n\t}\n\t\n\n\tpublic function templateChoices($id) {\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first' ,array(\n\t\t\t\t'conditions' => array('id' => $id),\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('orgc', 'id'),\n\t\t));\n\t\tif (empty($event) || (!$this->_isSiteAdmin() && $event['Event']['orgc'] != $this->Auth->user('org'))) throw new NotFoundException('Event not found or you are not authorised to edit it.');\n\t\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin) {\n\t\t\t$conditions['OR'] = array('Template.org' => $this->Auth->user('org'), 'Template.share' => true);\n\t\t}\n\t\t$templates = $this->Template->find('all', array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'conditions' => $conditions\n\t\t));\n\t\t$this->set('templates', $templates);\n\t\t$this->set('id', $id);\n\t\t$this->render('ajax/template_choices');\n\t}\n\t\n\tpublic function populateEventFromTemplate($template_id, $event_id) {\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array('Template.id' => $template_id),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement' => array(\n\t\t\t\t\t'TemplateElementAttribute',\n\t\t\t\t\t'TemplateElementText',\n\t\t\t\t\t'TemplateElementFile'\t\n\t\t\t\t),\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag'\n\t\t\t\t)\n\t\t\t),\n\t\t));\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first', array(\n\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'orgc', 'distribution'),\n\t\t));\n\t\t\n\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\tif (empty($template)) throw new MethodNotAllowedException('Template not found or you are not authorised to edit it.');\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif ($template['Template']['org'] != $this->Auth->user('org') && !$template['Template']['share']) throw new MethodNotAllowedException('Template not found or you are not authorised to use it.');\t\n\t\t}\n\t\t\n\t\t$this->set('template_id', $template_id);\n\t\t$this->set('event_id', $event_id);\n\t\tif ($this->request->is('post')) {\n\t\t\t$errors = array();\n\t\t\t$this->set('template', $this->request->data);\n\t\t\t$result = $this->Event->Attribute->checkTemplateAttributes($template, $this->request->data, $event_id, $event['Event']['distribution']);\n\t\t\tif (isset($this->request->data['Template']['modify']) || !empty($result['errors'])) {\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('templateData', $template);\n\t\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t\t} else {\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('attributes', $result['attributes']);\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('distributionLevels', $this->Event->distributionLevels);\n\t\t\t\t$this->render('populate_event_from_template_attributes');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->set('templateData', $template);\n\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t}\n\t}\n\t\n\tpublic function submitEventPopulation($template_id, $event_id) {\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->loadModel('Event');\n\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'fields' => array('id', 'orgc', 'distribution', 'published'),\n\t\t\t\t\t'contain' => 'EventTag',\n\t\t\t));\n\t\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\t}\n\n\t\t\t$template = $this->Template->find('first', array(\n\t\t\t\t\t'id' => $template_id,\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'TemplateTag',\n\t\t\t\t\t'fields' => 'id',\n\t\t\t));\n\t\t\t\n\t\t\tforeach ($template['TemplateTag'] as $tag) {\n\t\t\t\t$exists = false;\n\t\t\t\tforeach ($event['EventTag'] as $eventTag) {\n\t\t\t\t\tif ($eventTag['tag_id'] == $tag['tag_id']) $exists = true;\n\t\t\t\t}\n\t\t\t\tif (!$exists) {\n\t\t\t\t\t$this->Event->EventTag->create();\n\t\t\t\t\t$this->Event->EventTag->save(array('event_id' => $event_id, 'tag_id' => $tag['tag_id']));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($this->request->data['Template']['attributes'])) {\n\t\t\t\t$attributes = json_decode($this->request->data['Template']['attributes'], true);\n\t\t\t\t$this->loadModel('Attribute');\n\t\t\t\t$fails = 0;\n\t\t\t\tforeach($attributes as $k => &$attribute) {\n\t\t\t\t\tif (isset($attribute['data'])) {\n\t\t\t\t\t\t$file = new File(APP . 'tmp/files/' . $attribute['data']);\n\t\t\t\t\t\t$content = $file->read();\n\t\t\t\t\t\t$attribute['data'] = base64_encode($content);\n\t\t\t\t\t\t$file->delete();\n\t\t\t\t\t}\n\t\t\t\t\t$this->Attribute->create();\n\t\t\t\t\tif (!$this->Attribute->save(array('Attribute' => $attribute))) $fails++;\n\t\t\t\t}\n\t\t\t\t$count = $k + 1;\n\t\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('Event.id' => $event_id),\n\t\t\t\t\t'recursive' => -1\n\t\t\t\t));\n\t\t\t\t$event['Event']['published'] = 0;\n\t\t\t\t$date = new DateTime();\n\t\t\t\t$event['Event']['timestamp'] = $date->getTimestamp();\n\t\t\t\t$this->Event->save($event);\n\t\t\t\tif ($fails == 0) $this->Session->setFlash(__('Event populated, ' . $count . ' attributes successfully created.'));\n\t\t\t\telse $this->Session->setFlash(__('Event populated, but ' . $fails . ' attributes could not be saved.'));\n\t\t\t\t$this->redirect(array('controller' => 'events', 'action' => 'view', $event_id));\n\t\t\t} else { \n\t\t\t\tthrow new MethodNotAllowedException('No attributes submitted for creation.');\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t}\n\t\n\tpublic function uploadFile($elementId, $batch) {\n\t\t$this->layout = 'iframe';\n\t\t$this->set('batch', $batch);\n\t\t$this->set('element_id', $elementId);\n\t\tif ($this->request->is('get')) {\n\t\t\t$this->set('element_id', $elementId);\n\t\t} else if ($this->request->is('post')) {\n\t\t\t$fileArray = array();\n\t\t\t$filenames = array();\n\t\t\t$tmp_names = array();\n\t\t\t$element_ids = array();\n\t\t\t$result = array();\n\t\t\t$added = 0;\n\t\t\t$failed = 0;\n\t\t\t// filename checks\n\t\t\tforeach ($this->request->data['Template']['file'] as $k => $file) {\n\t\t\t\tif ($file['size'] > 0 && $file['error'] == 0) {\n\t\t\t\t\tif (preg_match('@^[\\w\\-. ]+$@', $file['name'])) {\n\t\t\t\t\t\t$fn = $this->Template->generateRandomFileName();\n\t\t\t\t\t\tmove_uploaded_file($file['tmp_name'], APP . 'tmp/files/' . $fn);\n\t\t\t\t\t\t$filenames[] =$file['name'];\n\t\t\t\t\t\t$fileArray[] = array('filename' => $file['name'], 'tmp_name' => $fn, 'element_id' => $elementId);\n\t\t\t\t\t\t$added++;\n\t\t\t\t\t} else $failed++;\n\t\t\t\t} else $failed ++;\n\t\t\t}\n\t\t\t$result = $added . ' files uploaded.';\n\t\t\tif ($failed) {\n\t\t\t\t$result .= ' ' . $failed . ' files either failed to upload, or were empty.';\n\t\t\t\t$this->set('upload_error', true);\n\t\t\t} else {\n\t\t\t\t$this->set('upload_error', false);\n\t\t\t}\n\t\t\t\n\t\t\t$this->set('result', $result);\n\t\t\t$this->set('filenames', $filenames);\n\t\t\t$this->set('fileArray', json_encode($fileArray));\n\t\t}\n\t}\n\t\n\tprivate function __combineArrays($array, $array2) {\n\t\tforeach ($array2 as $element) {\n\t\t\tif (!in_array($element, $array)) {\n\t\t\t\t$array[] = $element;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n\n\tpublic function deleteTemporaryFile($filename) {\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action is restricted to accepting POST requests only.');\n\t\t//if (!$this->request->is('ajax')) throw new MethodNotAllowedException('This action is only accessible through AJAX.');\n\t\t$this->autoRender = false;\n\t\tif (preg_match('/^[a-zA-Z0-9]{12}$/', $filename)) {\n\t\t\t$file = new File(APP . 'tmp/files/' . $filename);\n\t\t\tif ($file->exists()) {\n\t\t\t\t$file->delete();\n\t\t\t}\n\t\t}\n\t}\n}\n"], "fixing_code": ["{\"major\":2, \"minor\":3, \"hotfix\":92}", "<?php\n\nApp::uses('AppController', 'Controller');\nApp::uses('Folder', 'Utility');\nApp::uses('File', 'Utility');\n\n/**\n * Templates Controller\n *\n * @property Template $Templates\n */\n\nclass TemplatesController extends AppController {\n\tpublic $components = array('Security' ,'RequestHandler');\n\n\tpublic $paginate = array(\n\t\t\t'limit' => 50,\n\t\t\t'order' => array(\n\t\t\t\t\t'Template.id' => 'desc'\n\t\t\t)\n\t);\n\n\tpublic function beforeFilter() { // TODO REMOVE\n\t\tparent::beforeFilter();\n\t\t$this->Security->unlockedActions = array('uploadFile', 'deleteTemporaryFile');\n\t}\n\t\n\t\n\tpublic function index() {\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['OR'] = array('org' => $this->Auth->user('org'), 'share' => true);\n\t\t}\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$this->paginate = Set::merge($this->paginate,array(\n\t\t\t\t\t'conditions' =>\n\t\t\t\t\tarray(\"OR\" => array(\n\t\t\t\t\t\t\tarray('org' => $this->Auth->user('org')),\n\t\t\t\t\t\t\tarray('share' => true),\n\t\t\t))));\n\t\t}\n\t\t$this->set('list', $this->paginate());\n\t}\n\t\n\tpublic function edit($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\t$this->set('mayModify', true);\n\t\t\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$this->request->data['Template']['id'] = $id;\n\t\t\t\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$oldTags = $this->TemplateTag->find('all', array(\n\t\t\t\t\t'conditions' => array('template_id' => $id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'Tag'\n\t\t\t\t));\n\n\t\t\t\t$newTags = $this->TemplateTag->Tag->find('all', array(\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'conditions' => array('name' => $tagArray)\n\t\t\t\t));\n\t\t\t\t\n\t\t\t\tforeach($oldTags as $k => $oT) {\n\t\t\t\t\tif (!in_array($oT['Tag'], $newTags)) $this->TemplateTag->delete($oT['TemplateTag']['id']); \n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tforeach($newTags as $k => $nT) {\n\t\t\t\t\tif (!in_array($nT['Tag'], $oldTags)) {\n\t\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $nT['Tag']['id'])));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be edited.');\n\t\t\t}\n\t\t}\n\t\t$this->request->data = $template;\n\n\t\t// get all existing tags for the tag add dropdown menu\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t\n\t\t//get all tags currently assigned to the event\n\t\t$currentTags = $this->Template->TemplateTag->find('all', array(\n\t\t\t'recursive' => -1,\n\t\t\t'contain' => 'Tag',\n\t\t\t'conditions' => array('template_id' => $id),\n\t\t));\n\t\t$this->set('currentTags', $currentTags);\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function view($id) {\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($id, $this->Auth->user(), false)) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\tif ($this->Template->checkAuthorisation($id, $this->Auth->user(), true)) $this->set('mayModify', true);\n\t\telse $this->set('mayModify', false);\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array(\n\t\t\t\t'id' => $id,\n\t\t\t),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement',\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag',\n\t\t\t\t),\n\t\t\t),\n\t\t));\n\t\tif (empty($template)) throw new NotFoundException('No template with the provided ID exists, or you are not authorised to see it.');\n\t\t$tagArray = array();\n\t\tforeach($template['TemplateTag'] as $tt) {\n\t\t\t$tagArray[] = $tt;\n\t\t}\n\t\t$this->set('id', $id);\n\t\t$this->set('template', $template);\n\t}\n\t\n\tpublic function add() {\n\t\tif (!$this->userRole['perm_template']) throw new MethodNotAllowedException('You are not authorised to do that.');\n\t\tif ($this->request->is('post')) {\n\t\t\tunset($this->request->data['Template']['tagsPusher']);\n\t\t\t$tags = $this->request->data['Template']['tags'];\n\t\t\tunset($this->request->data['Template']['tags']);\n\t\t\t$this->request->data['Template']['org'] = $this->Auth->user('org');\n\t\t\t$this->Template->create();\n\t\t\tif ($this->Template->save($this->request->data)) {\n\t\t\t\t$id = $this->Template->id;\n\t\t\t\t$tagArray = json_decode($tags);\n\t\t\t\t$this->loadModel('TemplateTag');\n\t\t\t\t$this->loadModel('Tag');\n\t\t\t\tforeach ($tagArray as $t) {\n\t\t\t\t\t$tag = $this->Tag->find('first', array(\n\t\t\t\t\t\t'conditions' => array('name' => $t),\n\t\t\t\t\t\t'fields' => array('id', 'name'),\n\t\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t));\n\t\t\t\t\t$this->TemplateTag->create();\n\t\t\t\t\t$this->TemplateTag->save(array('TemplateTag' => array('template_id' => $id, 'tag_id' => $tag['Tag']['id'])));\n\t\t\t\t}\n\t\t\t\t$this->redirect(array('action' => 'view', $this->Template->id));\n\t\t\t} else {\n\t\t\t\tthrow new Exception('The template could not be created.');\n\t\t\t}\n\t\t}\n\t\t$this->loadModel('Tags');\n\t\t$tags = $this->Tags->find('all');\n\t\t$tagArray = array();\n\t\tforeach ($tags as $tag) {\n\t\t\t$tagArray[$tag['Tags']['id']] = $tag['Tags']['name'];\n\t\t}\n\t\t$this->set('tags', $tagArray);\n\t\t$this->set('tagInfo', $tags);\n\t}\n\t\n\tpublic function saveElementSorting() {\n\t\t// check if user can edit the template\n\t\t$this->autoRender = false;\n\t\t$this->request->onlyAllow('ajax');\n\t\t$orderedElements = $this->request->data;\n\t\tforeach($orderedElements as &$e) {\n\t\t\t$e = ltrim($e, 'id_');\n\t\t}\n\t\t$extractedIds = array();\n\t\tforeach ($orderedElements as $element) $extractedIds[] = $element;\n\t\t$template_id = $this->Template->TemplateElement->find('first', array(\n\t\t\t'conditions' => array('id' => $extractedIds),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'template_id'),\n\t\t));\n\t\t\n\t\tif (!$this->_isSiteAdmin() && !$this->Template->checkAuthorisation($template_id['TemplateElement']['template_id'], $this->Auth->user(), true)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'You are not authorised to do that.')), 'status' => 200));\n\t\t\n\t\t$elements = $this->Template->TemplateElement->find('all', array(\n\t\t\t\t'conditions' => array('template_id' => $template_id['TemplateElement']['template_id']),\n\t\t\t\t'recursive' => -1,\n\t\t));\n\t\tif (empty($elements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, the supplied template elements don\\'t exist, or you are not eligible to edit them.')),'status'=>200));\n\t\tif (count($elements) != count($orderedElements)) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Incomplete template element list passed as argument. Expecting ' . count($elements) . ' elements, only received positions for ' . count($orderedElements) . '.')),'status'=>200));\n\t\t$template_id = $elements[0]['TemplateElement']['template_id'];\n\t\t\n\t\tforeach ($elements as &$e) {\n\t\t\tif ($template_id !== $e['TemplateElement']['template_id']) return new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Cannot sort template elements belonging to separate templates. You should never see this message during legitimate use.')),'status'=>200));\n\t\t\tforeach ($orderedElements as $k => $orderedElement) {\n\t\t\t\tif ($orderedElement == $e['TemplateElement']['id']) {\n\t\t\t\t\t$e['TemplateElement']['position'] = $k+1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->Template->TemplateElement->saveMany($elements);\n\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'Elements repositioned.')),'status'=>200));\n\t}\n\t\n\tpublic function delete($id) {\n\t\t$template = $this->Template->checkAuthorisation($id, $this->Auth->user(), true);\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action can only be invoked via a post request.');\n\t\tif (!$this->_isSiteAdmin() && !$template) throw new MethodNotAllowedException('No template with the provided ID exists, or you are not authorised to edit it.');\n\t\tif ($this->Template->delete($id, true)) {\n\t\t\t$this->Session->setFlash('Template deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t} else {\n\t\t\t$this->Session->setFlash('The template could not be deleted.');\n\t\t\t$this->redirect(array('action' => 'index'));\n\t\t}\n\t}\n\t\n\n\tpublic function templateChoices($id) {\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first' ,array(\n\t\t\t\t'conditions' => array('id' => $id),\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('orgc', 'id'),\n\t\t));\n\t\tif (empty($event) || (!$this->_isSiteAdmin() && $event['Event']['orgc'] != $this->Auth->user('org'))) throw new NotFoundException('Event not found or you are not authorised to edit it.');\n\t\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin) {\n\t\t\t$conditions['OR'] = array('Template.org' => $this->Auth->user('org'), 'Template.share' => true);\n\t\t}\n\t\t$templates = $this->Template->find('all', array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'conditions' => $conditions\n\t\t));\n\t\t$this->set('templates', $templates);\n\t\t$this->set('id', $id);\n\t\t$this->render('ajax/template_choices');\n\t}\n\t\n\tpublic function populateEventFromTemplate($template_id, $event_id) {\n\t\t$template = $this->Template->find('first', array(\n\t\t\t'conditions' => array('Template.id' => $template_id),\n\t\t\t'contain' => array(\n\t\t\t\t'TemplateElement' => array(\n\t\t\t\t\t'TemplateElementAttribute',\n\t\t\t\t\t'TemplateElementText',\n\t\t\t\t\t'TemplateElementFile'\t\n\t\t\t\t),\n\t\t\t\t'TemplateTag' => array(\n\t\t\t\t\t'Tag'\n\t\t\t\t)\n\t\t\t),\n\t\t));\n\t\t$this->loadModel('Event');\n\t\t$event = $this->Event->find('first', array(\n\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'orgc', 'distribution'),\n\t\t));\n\t\t\n\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\tif (empty($template)) throw new MethodNotAllowedException('Template not found or you are not authorised to edit it.');\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif ($template['Template']['org'] != $this->Auth->user('org') && !$template['Template']['share']) throw new MethodNotAllowedException('Template not found or you are not authorised to use it.');\t\n\t\t}\n\t\t\n\t\t$this->set('template_id', $template_id);\n\t\t$this->set('event_id', $event_id);\n\t\tif ($this->request->is('post')) {\n\t\t\t$errors = array();\n\t\t\t$this->set('template', $this->request->data);\n\t\t\t$result = $this->Event->Attribute->checkTemplateAttributes($template, $this->request->data, $event_id, $event['Event']['distribution']);\n\t\t\tif (isset($this->request->data['Template']['modify']) || !empty($result['errors'])) {\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('templateData', $template);\n\t\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t\t} else {\n\t\t\t\t$this->set('errors', $result['errors']);\n\t\t\t\t$this->set('attributes', $result['attributes']);\n\t\t\t\t$fileArray = $this->request->data['Template']['fileArray'];\n\t\t\t\t$this->set('fileArray', $fileArray);\n\t\t\t\t$this->set('distributionLevels', $this->Event->distributionLevels);\n\t\t\t\t$this->render('populate_event_from_template_attributes');\n\t\t\t}\n\t\t} else {\n\t\t\t$this->set('templateData', $template);\n\t\t\t$this->set('validTypeGroups', $this->Event->Attribute->validTypeGroups);\n\t\t}\n\t}\n\t\n\tpublic function submitEventPopulation($template_id, $event_id) {\n\t\tif ($this->request->is('post')) {\n\t\t\t$this->loadModel('Event');\n\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('id' => $event_id),\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'fields' => array('id', 'orgc', 'distribution', 'published'),\n\t\t\t\t\t'contain' => 'EventTag',\n\t\t\t));\n\t\t\tif (empty($event)) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\tif ($event['Event']['orgc'] != $this->Auth->user('org')) throw new MethodNotAllowedException('Event not found or you are not authorised to edit it.');\n\t\t\t}\n\n\t\t\t$template = $this->Template->find('first', array(\n\t\t\t\t\t'id' => $template_id,\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => 'TemplateTag',\n\t\t\t\t\t'fields' => 'id',\n\t\t\t));\n\t\t\t\n\t\t\tforeach ($template['TemplateTag'] as $tag) {\n\t\t\t\t$exists = false;\n\t\t\t\tforeach ($event['EventTag'] as $eventTag) {\n\t\t\t\t\tif ($eventTag['tag_id'] == $tag['tag_id']) $exists = true;\n\t\t\t\t}\n\t\t\t\tif (!$exists) {\n\t\t\t\t\t$this->Event->EventTag->create();\n\t\t\t\t\t$this->Event->EventTag->save(array('event_id' => $event_id, 'tag_id' => $tag['tag_id']));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($this->request->data['Template']['attributes'])) {\n\t\t\t\t$attributes = json_decode($this->request->data['Template']['attributes'], true);\n\t\t\t\t$this->loadModel('Attribute');\n\t\t\t\t$fails = 0;\n\t\t\t\tforeach($attributes as $k => &$attribute) {\n\t\t\t\t\tif (isset($attribute['data']) && preg_match('/^[a-zA-Z0-9]{12}$/', $attribute['data'])) {\n\t\t\t\t\t\t$file = new File(APP . 'tmp/files/' . $attribute['data']);\n\t\t\t\t\t\t$content = $file->read();\n\t\t\t\t\t\t$attribute['data'] = base64_encode($content);\n\t\t\t\t\t\t$file->delete();\n\t\t\t\t\t}\n\t\t\t\t\t$this->Attribute->create();\n\t\t\t\t\tif (!$this->Attribute->save(array('Attribute' => $attribute))) $fails++;\n\t\t\t\t}\n\t\t\t\t$count = $k + 1;\n\t\t\t\t$event = $this->Event->find('first', array(\n\t\t\t\t\t'conditions' => array('Event.id' => $event_id),\n\t\t\t\t\t'recursive' => -1\n\t\t\t\t));\n\t\t\t\t$event['Event']['published'] = 0;\n\t\t\t\t$date = new DateTime();\n\t\t\t\t$event['Event']['timestamp'] = $date->getTimestamp();\n\t\t\t\t$this->Event->save($event);\n\t\t\t\tif ($fails == 0) $this->Session->setFlash(__('Event populated, ' . $count . ' attributes successfully created.'));\n\t\t\t\telse $this->Session->setFlash(__('Event populated, but ' . $fails . ' attributes could not be saved.'));\n\t\t\t\t$this->redirect(array('controller' => 'events', 'action' => 'view', $event_id));\n\t\t\t} else { \n\t\t\t\tthrow new MethodNotAllowedException('No attributes submitted for creation.');\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t}\n\t\n\tpublic function uploadFile($elementId, $batch) {\n\t\t$this->layout = 'iframe';\n\t\t$this->set('batch', $batch);\n\t\t$this->set('element_id', $elementId);\n\t\tif ($this->request->is('get')) {\n\t\t\t$this->set('element_id', $elementId);\n\t\t} else if ($this->request->is('post')) {\n\t\t\t$fileArray = array();\n\t\t\t$filenames = array();\n\t\t\t$tmp_names = array();\n\t\t\t$element_ids = array();\n\t\t\t$result = array();\n\t\t\t$added = 0;\n\t\t\t$failed = 0;\n\t\t\t// filename checks\n\t\t\tforeach ($this->request->data['Template']['file'] as $k => $file) {\n\t\t\t\tif ($file['size'] > 0 && $file['error'] == 0) {\n\t\t\t\t\tif (preg_match('@^[\\w\\-. ]+$@', $file['name'])) {\n\t\t\t\t\t\t$fn = $this->Template->generateRandomFileName();\n\t\t\t\t\t\tmove_uploaded_file($file['tmp_name'], APP . 'tmp/files/' . $fn);\n\t\t\t\t\t\t$filenames[] =$file['name'];\n\t\t\t\t\t\t$fileArray[] = array('filename' => $file['name'], 'tmp_name' => $fn, 'element_id' => $elementId);\n\t\t\t\t\t\t$added++;\n\t\t\t\t\t} else $failed++;\n\t\t\t\t} else $failed ++;\n\t\t\t}\n\t\t\t$result = $added . ' files uploaded.';\n\t\t\tif ($failed) {\n\t\t\t\t$result .= ' ' . $failed . ' files either failed to upload, or were empty.';\n\t\t\t\t$this->set('upload_error', true);\n\t\t\t} else {\n\t\t\t\t$this->set('upload_error', false);\n\t\t\t}\n\t\t\t\n\t\t\t$this->set('result', $result);\n\t\t\t$this->set('filenames', $filenames);\n\t\t\t$this->set('fileArray', json_encode($fileArray));\n\t\t}\n\t}\n\t\n\tprivate function __combineArrays($array, $array2) {\n\t\tforeach ($array2 as $element) {\n\t\t\tif (!in_array($element, $array)) {\n\t\t\t\t$array[] = $element;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n\n\tpublic function deleteTemporaryFile($filename) {\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This action is restricted to accepting POST requests only.');\n\t\t//if (!$this->request->is('ajax')) throw new MethodNotAllowedException('This action is only accessible through AJAX.');\n\t\t$this->autoRender = false;\n\t\tif (preg_match('/^[a-zA-Z0-9]{12}$/', $filename)) {\n\t\t\t$file = new File(APP . 'tmp/files/' . $filename);\n\t\t\tif ($file->exists()) {\n\t\t\t\t$file->delete();\n\t\t\t}\n\t\t}\n\t}\n}\n"], "filenames": ["VERSION.json", "app/Controller/TemplatesController.php"], "buggy_code_start_loc": [1, 337], "buggy_code_end_loc": [2, 338], "fixing_code_start_loc": [1, 337], "fixing_code_end_loc": [2, 338], "type": "NVD-CWE-noinfo", "message": "app/Controller/TemplatesController.php in Malware Information Sharing Platform (MISP) before 2.3.92 does not properly restrict filenames under the tmp/files/ directory, which has unspecified impact and attack vectors.", "other": {"cve": {"id": "CVE-2015-5719", "sourceIdentifier": "cve@mitre.org", "published": "2016-09-03T20:59:00.153", "lastModified": "2016-11-28T19:35:14.670", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "app/Controller/TemplatesController.php in Malware Information Sharing Platform (MISP) before 2.3.92 does not properly restrict filenames under the tmp/files/ directory, which has unspecified impact and attack vectors."}, {"lang": "es", "value": "app/Controller/TemplatesController.php en Malware Information Sharing Platform (MISP) en versiones anteriores a 2.3.92 no restringe adecuadamente nombres de archivo bajo el directorio tmp/files/, lo que tiene un impacto y vectores de ataque no especificados."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp-project:malware_information_sharing_platform:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.91", "matchCriteriaId": "FC0C651C-5962-47D4-AA2E-220BB4B1A1B2"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/92740", "source": "cve@mitre.org"}, {"url": "https://github.com/MISP/MISP/commit/27cc167c3355ec76292235d7f5f4e0016bfd7699", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://www.circl.lu/advisory/CVE-2015-5719/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/27cc167c3355ec76292235d7f5f4e0016bfd7699"}}