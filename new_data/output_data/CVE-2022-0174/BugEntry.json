{"buggy_code": ["<?php\n/* Copyright (C) 2001-2002  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2017  Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2012  Regis Houssin           <regis.houssin@inodbox.com>\n * Copyright (C) 2013       Florian Henry           <florian.henry@open-concept.pro>\n * Copyright (C) 2015-2016  Alexandre Spangaro      <aspangaro@open-dsi.fr>\n * Copyright (C) 2018-2019  Thibault FOUCART        <support@ptibogxiv.net>\n * Copyright (C) 2018-2020  Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/don/card.php\n *  \\ingroup    donations\n *  \\brief      Page of donation card\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/modules/dons/modules_don.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/donation.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/don/class/don.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/compta/paiement/class/paiement.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formmargin.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\nif (!empty($conf->projet->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formprojet.class.php';\n\trequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\n}\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\n$langs->loadLangs(array(\"bills\", \"companies\", \"donations\", \"users\"));\n\n$id = GETPOST('rowid') ?GETPOST('rowid', 'int') : GETPOST('id', 'int');\n$action = GETPOST('action', 'aZ09');\n$cancel = GETPOST('cancel', 'alpha');\n$confirm = GETPOST('confirm', 'alpha');\n\n$amount = price2num(GETPOST('amount', 'alphanohtml'), 'MT');\n$donation_date = dol_mktime(12, 0, 0, GETPOST('remonth'), GETPOST('reday'), GETPOST('reyear'));\n$projectid = (GETPOST('projectid') ? GETPOST('projectid', 'int') : 0);\n$public_donation = (int) GETPOST(\"public\", 'int');\n\n$object = new Don($db);\n$extrafields = new ExtraFields($db);\n\n// Security check\n$result = restrictedArea($user, 'don', $id);\n\n// fetch optionals attributes and labels\n$extrafields->fetch_name_optionals_label($object->table_element);\n$search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');\n\n// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n$hookmanager->initHooks(array('doncard', 'globalcard'));\n\n$upload_dir = $conf->don->dir_output;\n$permissiontoadd = $user->rights->don->creer;\n\n\n/*\n * Actions\n */\n\n$parameters = array();\n\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\nif (empty($reshook)) {\n\t$backurlforlist = DOL_URL_ROOT.'/don/list.php';\n\n\tif (empty($backtopage) || ($cancel && empty($id))) {\n\t\tif (empty($backtopage) || ($cancel && strpos($backtopage, '__ID__'))) {\n\t\t\tif (empty($id) && (($action != 'add' && $action != 'create') || $cancel)) {\n\t\t\t\t$backtopage = $backurlforlist;\n\t\t\t} else {\n\t\t\t\t$backtopage = DOL_URL_ROOT.'/don/card.php?id='.((!empty($id) && $id > 0) ? $id : '__ID__');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($cancel) {\n\t\tif (!empty($backtopageforcancel)) {\n\t\t\theader(\"Location: \".$backtopageforcancel);\n\t\t\texit;\n\t\t} elseif (!empty($backtopage)) {\n\t\t\theader(\"Location: \".$backtopage);\n\t\t\texit;\n\t\t}\n\t\t$action = '';\n\t}\n\n\t// Action reopen object\n\tif ($action == 'confirm_reopen' && $confirm == 'yes' && $permissiontoadd) {\n\t\t$object->fetch($id);\n\n\t\t$result = $object->reopen($user);\n\t\tif ($result >= 0) {\n\t\t\t// Define output language\n\t\t\tif (empty($conf->global->MAIN_DISABLE_PDF_AUTOUPDATE)) {\n\t\t\t\tif (method_exists($object, 'generateDocument')) {\n\t\t\t\t\t$outputlangs = $langs;\n\t\t\t\t\t$newlang = '';\n\t\t\t\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang) && GETPOST('lang_id', 'aZ09')) {\n\t\t\t\t\t\t$newlang = GETPOST('lang_id', 'aZ09');\n\t\t\t\t\t}\n\t\t\t\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang)) {\n\t\t\t\t\t\t$newlang = $object->thirdparty->default_lang;\n\t\t\t\t\t}\n\t\t\t\t\tif (!empty($newlang)) {\n\t\t\t\t\t\t$outputlangs = new Translate(\"\", $conf);\n\t\t\t\t\t\t$outputlangs->setDefaultLang($newlang);\n\t\t\t\t\t}\n\t\t\t\t\t$model = $object->model_pdf;\n\t\t\t\t\t$ret = $object->fetch($id); // Reload to get new records\n\n\t\t\t\t\t$object->generateDocument($model, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].'?id='.$object->id);\n\t\t\texit;\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t}\n\n\n\t// Action update object\n\tif ($action == 'update') {\n\t\tif (!empty($cancel)) {\n\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".urlencode($id));\n\t\t\texit;\n\t\t}\n\n\t\t$error = 0;\n\n\t\tif (empty($donation_date)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Date\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (empty($amount)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Amount\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->fetch($id);\n\n\t\t\t$object->firstname = (string) GETPOST(\"firstname\", 'alpha');\n\t\t\t$object->lastname = (string) GETPOST(\"lastname\", 'alpha');\n\t\t\t$object->societe = (string) GETPOST(\"societe\", 'alpha');\n\t\t\t$object->address = (string) GETPOST(\"address\", 'alpha');\n\t\t\t$object->amount = price2num(GETPOST(\"amount\", 'alpha'));\n\t\t\t$object->town = (string) GETPOST(\"town\", 'alpha');\n\t\t\t$object->zip = (string) GETPOST(\"zipcode\", 'alpha');\n\t\t\t$object->country_id = (int) GETPOST('country_id', 'int');\n\t\t\t$object->email = (string) GETPOST(\"email\", 'alpha');\n\t\t\t$object->date = $donation_date;\n\t\t\t$object->public = $public_donation;\n\t\t\t$object->fk_project = (int) GETPOST(\"fk_project\", 'int');\n\t\t\t$object->note_private = (string) GETPOST(\"note_private\", 'restricthtml');\n\t\t\t$object->note_public = (string) GETPOST(\"note_public\", 'restricthtml');\n\t\t\t$object->modepaymentid = (int) GETPOST('modepayment', 'int');\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object, '@GETPOSTISSET');\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\tif ($object->update($user) > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// Action add/create object\n\tif ($action == 'add') {\n\t\tif (!empty($cancel)) {\n\t\t\theader(\"Location: index.php\");\n\t\t\texit;\n\t\t}\n\n\t\t$error = 0;\n\n\t\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES) && !(GETPOST(\"socid\", 'int') > 0)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"ThirdParty\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\t\tif (empty($donation_date)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Date\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (empty($amount)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Amount\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->socid = (int) GETPOST(\"socid\", 'int');\n\t\t\t$object->firstname = (string) GETPOST(\"firstname\", 'alpha');\n\t\t\t$object->lastname = (string) GETPOST(\"lastname\", 'alpha');\n\t\t\t$object->societe = (string) GETPOST(\"societe\", 'alpha');\n\t\t\t$object->address = (string) GETPOST(\"address\", 'alpha');\n\t\t\t$object->amount = price2num(GETPOST(\"amount\", 'alpha'));\n\t\t\t$object->zip = (string) GETPOST(\"zipcode\", 'alpha');\n\t\t\t$object->town = (string) GETPOST(\"town\", 'alpha');\n\t\t\t$object->country_id = (int) GETPOST('country_id', 'int');\n\t\t\t$object->email = (string) GETPOST('email', 'alpha');\n\t\t\t$object->date = $donation_date;\n\t\t\t$object->note_private = (string) GETPOST(\"note_private\", 'restricthtml');\n\t\t\t$object->note_public = (string) GETPOST(\"note_public\", 'restricthtml');\n\t\t\t$object->public = $public_donation;\n\t\t\t$object->fk_project = (int) GETPOST(\"fk_project\", 'int');\n\t\t\t$object->modepaymentid = (int) GETPOST('modepayment', 'int');\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t$res = $object->create($user);\n\t\t\tif ($res > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$res);\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action delete object\n\tif ($action == 'confirm_delete' && GETPOST(\"confirm\") == \"yes\" && $user->rights->don->supprimer) {\n\t\t$object->fetch($id);\n\t\t$result = $object->delete($user);\n\t\tif ($result > 0) {\n\t\t\theader(\"Location: index.php\");\n\t\t\texit;\n\t\t} else {\n\t\t\tdol_syslog($object->error, LOG_DEBUG);\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t}\n\n\t// Action validation\n\tif ($action == 'valid_promesse') {\n\t\t$object->fetch($id);\n\t\tif ($object->valid_promesse($id, $user->id) >= 0) {\n\t\t\tsetEventMessages($langs->trans(\"DonationValidated\", $object->ref), null);\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t}\n\n\t// Action cancel\n\tif ($action == 'set_cancel') {\n\t\t$object->fetch($id);\n\t\tif ($object->set_cancel($id) >= 0) {\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t}\n\n\t// Action set paid\n\tif ($action == 'set_paid') {\n\t\t$object->fetch($id);\n\t\tif ($object->setPaid($id, $modepayment) >= 0) {\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t} elseif ($action == 'classin' && $user->rights->don->creer) {\n\t\t$object->fetch($id);\n\t\t$object->setProject($projectid);\n\t}\n\n\n\t// Actions to build doc\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n\n\n\t// Remove file in doc form\n\t/*if ($action == 'remove_file')\n\t{\n\t\t$object = new Don($db, 0, GETPOST('id', 'int'));\n\t\tif ($object->fetch($id))\n\t\t{\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t\t$object->fetch_thirdparty();\n\n\t\t\t$langs->load(\"other\");\n\t\t\t$upload_dir = $conf->don->dir_output;\n\t\t\t$file = $upload_dir . '/' . GETPOST('file');\n\t\t\t$ret=dol_delete_file($file,0,0,0,$object);\n\t\t\tif ($ret) setEventMessages($langs->trans(\"FileWasRemoved\", GETPOST('urlfile')), null, 'mesgs');\n\t\t\telse setEventMessages($langs->trans(\"ErrorFailToDeleteFile\", GETPOST('urlfile')), null, 'errors');\n\t\t\t$action='';\n\t\t}\n\t}\n\t*/\n\n\t/*\n\t * Build doc\n\t */\n\t/*\n\tif ($action == 'builddoc')\n\t{\n\t\t$object = new Don($db);\n\t\t$result=$object->fetch($id);\n\n\t\t// Save last template used to generate document\n\t\tif (GETPOST('model')) $object->setDocModel($user, GETPOST('model','alpha'));\n\n\t\t// Define output language\n\t\t$outputlangs = $langs;\n\t\t$newlang='';\n\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang) && ! empty($_REQUEST['lang_id'])) $newlang=$_REQUEST['lang_id'];\n\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang)) $newlang=$object->thirdparty->default_lang;\n\t\tif (! empty($newlang))\n\t\t{\n\t\t\t$outputlangs = new Translate(\"\",$conf);\n\t\t\t$outputlangs->setDefaultLang($newlang);\n\t\t}\n\t\t$result=don_create($db, $object->id, '', $object->model_pdf, $outputlangs);\n\t\tif ($result <= 0)\n\t\t{\n\t\t\tdol_print_error($db,$result);\n\t\t\texit;\n\t\t}\n\t}\n\t*/\n}\n\n\n/*\n * View\n */\n\n$title = $langs->trans(\"Donation\");\n\n$help_url = 'EN:Module_Donations|FR:Module_Dons|ES:M&oacute;dulo_Donaciones|DE:Modul_Spenden';\n\nllxHeader('', $title, $help_url);\n\n$form = new Form($db);\n$formfile = new FormFile($db);\n$formcompany = new FormCompany($db);\nif (!empty($conf->projet->enabled)) {\n\t$formproject = new FormProjets($db);\n}\n\nif ($action == 'create') {\n\tprint load_fiche_titre($langs->trans(\"AddDonation\"), '', 'object_donation');\n\n\tprint '<form name=\"add\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"POST\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\n\tprint dol_get_fiche_head('');\n\n\tprint '<table class=\"border centpercent\">';\n\tprint '<tbody>';\n\n\t// Ref\n\tprint '<tr><td class=\"titlefieldcreate fieldrequired\">'.$langs->trans('Ref').'</td><td>'.$langs->trans('Draft').'</td></tr>';\n\n\t// Company\n\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\t// Thirdparty\n\t\tif ($soc->id > 0) {\n\t\t\tprint '<td class=\"fieldrequired\">'.$langs->trans('ThirdParty').'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $soc->getNomUrl(1);\n\t\t\tprint '<input type=\"hidden\" name=\"socid\" value=\"'.$soc->id.'\">';\n\t\t\t// Outstanding Bill\n\t\t\t$arrayoutstandingbills = $soc->getOutstandingBills();\n\t\t\t$outstandingBills = $arrayoutstandingbills['opened'];\n\t\t\tprint ' ('.$langs->trans('CurrentOutstandingBill').': ';\n\t\t\tprint price($outstandingBills, '', $langs, 0, 0, -1, $conf->currency);\n\t\t\tif ($soc->outstanding_limit != '') {\n\t\t\t\tif ($outstandingBills > $soc->outstanding_limit) {\n\t\t\t\t\tprint img_warning($langs->trans(\"OutstandingBillReached\"));\n\t\t\t\t}\n\t\t\t\tprint ' / '.price($soc->outstanding_limit, '', $langs, 0, 0, -1, $conf->currency);\n\t\t\t}\n\t\t\tprint ')';\n\t\t\tprint '</td>';\n\t\t} else {\n\t\t\tprint '<td class=\"fieldrequired\">'.$langs->trans('ThirdParty').'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->select_company($soc->id, 'socid', '(s.client = 1 OR s.client = 3) AND status=1', 'SelectThirdParty', 0, 0, null, 0, 'minwidth300');\n\t\t\t// Option to reload page to retrieve customer informations. Note, this clear other input\n\t\t\tif (!empty($conf->global->RELOAD_PAGE_ON_CUSTOMER_CHANGE_DISABLED)) {\n\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t$(\"#socid\").change(function() {\n\t\t\t\t\t\tconsole.log(\"We have changed the company - Reload page\");\n\t\t\t\t\t\tvar socid = $(this).val();\n\t\t\t\t        var fac_rec = $(\\'#fac_rec\\').val();\n\t\t\t\t\t\t// reload page\n\t\t\t\t\t\t$(\"input[name=action]\").val(\"create\");\n\t\t\t\t\t\t$(\"form[name=add]\").submit();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>';\n\t\t\t}\n\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/societe/card.php?action=create&client=3&fournisseur=0&backtopage='.urlencode($_SERVER[\"PHP_SELF\"].'?action=create').'\"><span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddThirdParty\").'\"></span></a>';\n\t\t\tprint '</td>';\n\t\t}\n\t\tprint '</tr>'.\"\\n\";\n\t}\n\n\t// Date\n\tprint '<tr><td class=\"fieldrequired titlefieldcreate\">'.$langs->trans(\"Date\").'</td><td>';\n\tprint $form->selectDate($donation_date ? $donation_date : -1, '', '', '', '', \"add\", 1, 1);\n\tprint '</td>';\n\n\t// Amount\n\tprint \"<tr>\".'<td class=\"fieldrequired\">'.$langs->trans(\"Amount\").'</td><td><input type=\"text\" name=\"amount\" value=\"'.dol_escape_htmltag(GETPOST(\"amount\")).'\" size=\"10\"> '.$langs->trans(\"Currency\".$conf->currency).'</td></tr>';\n\n\t// Public donation\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"PublicDonation\").\"</td><td>\";\n\tprint $form->selectyesno(\"public\", $public_donation, 1);\n\tprint \"</td></tr>\\n\";\n\n\tif (empty($conf->societe->enabled) || empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Company\").'</td><td><input type=\"text\" name=\"societe\" value=\"'.dol_escape_htmltag(GETPOST(\"societe\")).'\" class=\"maxwidth200\"></td></tr>';\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Lastname\").'</td><td><input type=\"text\" name=\"lastname\" value=\"'.dol_escape_htmltag(GETPOST(\"lastname\")).'\" class=\"maxwidth200\"></td></tr>';\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Firstname\").'</td><td><input type=\"text\" name=\"firstname\" value=\"'.dol_escape_htmltag(GETPOST(\"firstname\")).'\" class=\"maxwidth200\"></td></tr>';\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Address\").'</td><td>';\n\t\tprint '<textarea name=\"address\" wrap=\"soft\" class=\"quatrevingtpercent\" rows=\"3\">'.dol_escape_htmltag(GETPOST(\"address\", \"alphanohtml\"), 0, 1).'</textarea></td></tr>';\n\n\t\t// Zip / Town\n\t\tprint '<tr><td>'.$langs->trans(\"Zip\").' / '.$langs->trans(\"Town\").'</td><td>';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"zipcode\") ? GETPOST(\"zipcode\") : $object->zip), 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\tprint ' ';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"town\") ? GETPOST(\"town\") : $object->town), 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\tprint '</tr>';\n\n\t\t// Country\n\t\tprint '<tr><td><label for=\"selectcountry_id\">'.$langs->trans('Country').'</label></td><td class=\"maxwidthonsmartphone\">';\n\t\tprint img_picto('', 'globe-americas', 'class=\"paddingrightonly\"').$form->select_country(GETPOST('country_id') != '' ?GETPOST('country_id') : $object->country_id);\n\t\tif ($user->admin) {\n\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t}\n\t\tprint '</td></tr>';\n\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"EMail\").'</td><td>'.img_picto('', 'object_email', 'class=\"paddingrightonly\"').'<input type=\"text\" name=\"email\" value=\"'.dol_escape_htmltag(GETPOST(\"email\")).'\" class=\"maxwidth200\"></td></tr>';\n\t}\n\n\t// Payment mode\n\tprint \"<tr><td>\".$langs->trans(\"PaymentMode\").\"</td><td>\\n\";\n\t$selected = GETPOST('modepayment', 'int');\n\t$form->select_types_paiements($selected, 'modepayment', 'CRDT', 0, 1);\n\tprint \"</td></tr>\\n\";\n\n\t// Public note\n\tprint '<tr>';\n\tprint '<td class=\"tdtop\">'.$langs->trans('NotePublic').'</td>';\n\tprint '<td>';\n\n\t$doleditor = new DolEditor('note_public', $note_public, '', 80, 'dolibarr_notes', 'In', 0, false, empty($conf->global->FCKEDITOR_ENABLE_NOTE_PUBLIC) ? 0 : 1, ROWS_3, '90%');\n\tprint $doleditor->Create(1);\n\tprint '</td></tr>';\n\n\t// Private note\n\tif (empty($user->socid)) {\n\t\tprint '<tr>';\n\t\tprint '<td class=\"tdtop\">'.$langs->trans('NotePrivate').'</td>';\n\t\tprint '<td>';\n\n\t\t$doleditor = new DolEditor('note_private', $note_private, '', 80, 'dolibarr_notes', 'In', 0, false, empty($conf->global->FCKEDITOR_ENABLE_NOTE_PRIVATE) ? 0 : 1, ROWS_3, '90%');\n\t\tprint $doleditor->Create(1);\n\t\tprint '</td></tr>';\n\t}\n\n\tif (!empty($conf->projet->enabled)) {\n\t\tprint \"<tr><td>\".$langs->trans(\"Project\").\"</td><td>\";\n\t\t$formproject->select_projects(-1, $projectid, 'fk_project', 0, 0, 1, 1, 0, 0, 0, '', 0, 0, 'maxwidth500');\n\t\tprint \"</td></tr>\\n\";\n\t}\n\n\t// Other attributes\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tprint $hookmanager->resPrint;\n\tif (empty($reshook)) {\n\t\tprint $object->showOptionals($extrafields, 'create', $parameters);\n\t}\n\n\tprint '</tbody>';\n\tprint \"</table>\\n\";\n\n\tprint dol_get_fiche_end();\n\n\tprint $form->buttonsSaveCancel();\n\n\tprint \"</form>\\n\";\n}\n\n\n/* ************************************************************ */\n/*                                                              */\n/* Donation card in edit mode                                   */\n/*                                                              */\n/* ************************************************************ */\n\nif (!empty($id) && $action == 'edit') {\n\t$result = $object->fetch($id);\n\tif ($result < 0) {\n\t\tdol_print_error($db, $object->error); exit;\n\t}\n\t$result = $object->fetch_optionals();\n\tif ($result < 0) {\n\t\tdol_print_error($db); exit;\n\t}\n\n\t$hselected = 'card';\n\t$head = donation_prepare_head($object);\n\n\tprint '<form name=\"update\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"POST\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\tprint '<input type=\"hidden\" name=\"rowid\" value=\"'.$object->id.'\">';\n\tprint '<input type=\"hidden\" name=\"amount\" value=\"'.$object->amount.'\">';\n\n\n\tprint dol_get_fiche_head($head, $hselected, $langs->trans(\"Donation\"), 0, 'donation');\n\n\tprint '<table class=\"border centpercent\">';\n\n\t// Ref\n\tprint '<tr><td>'.$langs->trans(\"Ref\").'</td><td colspan=\"2\">';\n\tprint $object->getNomUrl();\n\tprint '</td>';\n\tprint '</tr>';\n\n\t// Date\n\tprint '<tr><td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Date\").'</td><td>';\n\tprint $form->selectDate($object->date, '', '', '', '', \"update\");\n\tprint '</td>';\n\n\t// Amount\n\tif ($object->statut == 0) {\n\t\tprint \"<tr>\".'<td class=\"fieldrequired\">'.$langs->trans(\"Amount\").'</td><td><input type=\"text\" name=\"amount\" size=\"10\" value=\"'.price($object->amount).'\"> '.$langs->trans(\"Currency\".$conf->currency).'</td></tr>';\n\t} else {\n\t\tprint '<tr><td>'.$langs->trans(\"Amount\").'</td><td>';\n\t\tprint price($object->amount, 0, $langs, 0, 0, -1, $conf->currency);\n\t\tprint '</td></tr>';\n\t}\n\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"PublicDonation\").\"</td><td>\";\n\tprint $form->selectyesno(\"public\", $object->public, 1);\n\tprint \"</td>\";\n\tprint \"</tr>\\n\";\n\n\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\t$company = new Societe($db);\n\n\t\tprint '<tr><td>'.$langs->trans(\"ThirdParty\").'</td><td colspan=\"2\">';\n\t\tif ($object->socid > 0) {\n\t\t\t$result = $company->fetch($object->socid);\n\t\t\tprint $company->getNomUrl(1);\n\t\t}\n\t\tprint '</td></tr>';\n\t} else {\n\t\t$langs->load(\"companies\");\n\t\tprint '<tr><td>'.$langs->trans(\"Company\").'</td><td><input type=\"text\" name=\"societe\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->societe).'\"></td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Lastname\").'</td><td><input type=\"text\" name=\"lastname\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->lastname).'\"></td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td><td><input type=\"text\" name=\"firstname\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->firstname).'\"></td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Address\").'</td><td>';\n\t\tprint '<textarea name=\"address\" wrap=\"soft\" class=\"quatrevingtpercent\" rows=\"'.ROWS_3.'\">'.dol_escape_htmltag($object->address, 0, 1).'</textarea></td></tr>';\n\n\t\t// Zip / Town\n\t\tprint '<tr><td>'.$langs->trans(\"Zip\").' / '.$langs->trans(\"Town\").'</td><td>';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"zipcode\") ? GETPOSTISSET(\"zipcode\") : $object->zip), 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\tprint ' ';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"town\") ? GETPOST(\"town\") : $object->town), 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\tprint '</tr>';\n\n\t\t// Country\n\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans('Country').'</td><td>';\n\t\tprint $form->select_country((!empty($object->country_id) ? $object->country_id : $mysoc->country_code), 'country_id');\n\t\tif ($user->admin) {\n\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t}\n\t\tprint '</td></tr>';\n\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"EMail\").'</td><td><input type=\"text\" name=\"email\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->email).'\"></td></tr>';\n\t}\n\t// Payment mode\n\tprint \"<tr><td>\".$langs->trans(\"PaymentMode\").\"</td><td>\\n\";\n\tif ($object->mode_reglement_id) {\n\t\t$selected = $object->mode_reglement_id;\n\t} else {\n\t\t$selected = '';\n\t}\n\t$form->select_types_paiements($selected, 'modepayment', 'CRDT', 0, 1);\n\tprint \"</td></tr>\\n\";\n\n\t// Status\n\tprint \"<tr>\".'<td>'.$langs->trans(\"Status\").'</td><td>'.$object->getLibStatut(4).'</td></tr>';\n\n\t// Project\n\tif (!empty($conf->projet->enabled)) {\n\t\t$formproject = new FormProjets($db);\n\n\t\t$langs->load('projects');\n\t\tprint '<tr><td>'.$langs->trans('Project').'</td><td>';\n\t\t$formproject->select_projects(-1, $object->fk_project, 'fk_project', 0, 0, 1, 1, 0, 0, 0, '', 0, 0, 'maxwidth500');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Other attributes\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tprint $hookmanager->resPrint;\n\tif (empty($reshook)) {\n\t\tprint $object->showOptionals($extrafields, 'edit', $parameters);\n\t}\n\n\tprint \"</table>\\n\";\n\n\tprint dol_get_fiche_end();\n\n\tprint $form->buttonsSaveCancel();\n\n\tprint \"</form>\\n\";\n}\n\n\n\n/* ************************************************************ */\n/*                                                              */\n/* Donation card in view mode                                   */\n/*                                                              */\n/* ************************************************************ */\nif (!empty($id) && $action != 'edit') {\n\t// Confirmation delete\n\tif ($action == 'delete') {\n\t\t$text = $langs->trans(\"ConfirmDeleteADonation\");\n\t\tprint $form->formconfirm($_SERVER[\"PHP_SELF\"].\"?id=\".$object->id, $langs->trans(\"DeleteADonation\"), $text, \"confirm_delete\", '', '', 1);\n\t}\n\n\t$result = $object->fetch($id);\n\tif ($result < 0) {\n\t\tdol_print_error($db, $object->error); exit;\n\t}\n\t$result = $object->fetch_optionals();\n\tif ($result < 0) {\n\t\tdol_print_error($db); exit;\n\t}\n\n\t$hselected = 'card';\n\n\t$head = donation_prepare_head($object);\n\tprint dol_get_fiche_head($head, $hselected, $langs->trans(\"Donation\"), -1, 'donation');\n\n\t// Print form confirm\n\tprint $formconfirm;\n\n\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/don/list.php'.(!empty($socid) ? '?socid='.$socid : '').'\">'.$langs->trans(\"BackToList\").'</a>';\n\n\t$morehtmlref = '<div class=\"refidno\">';\n\t// Project\n\tif (!empty($conf->projet->enabled)) {\n\t\t$langs->load(\"projects\");\n\t\t$morehtmlref .= $langs->trans('Project').' ';\n\t\tif ($user->rights->don->creer) {\n\t\t\tif ($action != 'classify') {\n\t\t\t\t$morehtmlref .= '<a class=\"editfielda\" href=\"'.$_SERVER['PHP_SELF'].'?action=classify&token='.newToken().'&id='.$object->id.'\">'.img_edit($langs->transnoentitiesnoconv('SetProject')).'</a> : ';\n\t\t\t}\n\t\t\tif ($action == 'classify') {\n\t\t\t\t//$morehtmlref.=$form->form_project($_SERVER['PHP_SELF'] . '?id=' . $object->id, $object->socid, $object->fk_project, 'projectid', 0, 0, 1, 1);\n\t\t\t\t$morehtmlref .= '<form method=\"post\" action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\">';\n\t\t\t\t$morehtmlref .= '<input type=\"hidden\" name=\"action\" value=\"classin\">';\n\t\t\t\t$morehtmlref .= '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\t\t$morehtmlref .= $formproject->select_projects($object->socid, $object->fk_project, 'projectid', 0, 0, 1, 0, 1, 0, 0, '', 1, 0, 'maxwidth500');\n\t\t\t\t$morehtmlref .= '<input type=\"submit\" class=\"button valignmiddle\" value=\"'.$langs->trans(\"Modify\").'\">';\n\t\t\t\t$morehtmlref .= '</form>';\n\t\t\t} else {\n\t\t\t\t$morehtmlref .= $form->form_project($_SERVER['PHP_SELF'].'?id='.$object->id, $object->socid, $object->fk_project, 'none', 0, 0, 0, 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!empty($object->fk_project)) {\n\t\t\t\t$proj = new Project($db);\n\t\t\t\t$proj->fetch($object->fk_project);\n\t\t\t\t$morehtmlref .= ' : '.$proj->getNomUrl(1);\n\t\t\t\tif ($proj->title) {\n\t\t\t\t\t$morehtmlref .= ' - '.$proj->title;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$morehtmlref .= '';\n\t\t\t}\n\t\t}\n\t}\n\t$morehtmlref .= '</div>';\n\n\n\tdol_banner_tab($object, 'rowid', $linkback, 1, 'rowid', 'ref', $morehtmlref);\n\n\n\tprint '<div class=\"fichecenter\">';\n\tprint '<div class=\"fichehalfleft\">';\n\tprint '<div class=\"underbanner clearboth\"></div>';\n\n\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t// Date\n\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Date\").'</td><td colspan=\"2\">';\n\tprint dol_print_date($object->date, \"day\");\n\tprint \"</td>\";\n\n\tprint '<tr><td>'.$langs->trans(\"Amount\").'</td><td colspan=\"2\">';\n\tprint price($object->amount, 0, $langs, 0, 0, -1, $conf->currency);\n\tprint '</td></tr>';\n\n\tprint '<tr><td>'.$langs->trans(\"PublicDonation\").'</td><td colspan=\"2\">';\n\tprint yn($object->public);\n\tprint '</td></tr>';\n\n\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\t$company = new Societe($db);\n\n\t\tprint '<tr><td>'.$langs->trans(\"ThirdParty\").'</td><td colspan=\"2\">';\n\t\tif ($object->socid > 0) {\n\t\t\t$result = $company->fetch($object->socid);\n\t\t\tprint $company->getNomUrl(1);\n\t\t}\n\t\tprint '</td></tr>';\n\t} else {\n\t\tprint '<tr><td>'.$langs->trans(\"Company\").'</td><td colspan=\"2\">'.$object->societe.'</td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Lastname\").'</td><td colspan=\"2\">'.$object->lastname.'</td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td><td colspan=\"2\">'.$object->firstname.'</td></tr>';\n\t}\n\n\t// Payment mode\n\tprint \"<tr><td>\".$langs->trans(\"PaymentMode\").\"</td><td>\";\n\t$form->form_modes_reglement(null, $object->mode_reglement_id, 'none');\n\tprint \"</td></tr>\\n\";\n\n\t// Other attributes\n\t$cols = 2;\n\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_view.tpl.php';\n\n\tprint '</table>';\n\n\tprint '</div>';\n\tprint '<div class=\"fichehalfright\">';\n\n\t/*\n\t * Payments\n\t */\n\t$sql = \"SELECT p.rowid, p.num_payment, p.datep as dp, p.amount,\";\n\t$sql .= \"c.code as type_code,c.libelle as paiement_type\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"payment_donation as p\";\n\t$sql .= \", \".MAIN_DB_PREFIX.\"c_paiement as c \";\n\t$sql .= \", \".MAIN_DB_PREFIX.\"don as d\";\n\t$sql .= \" WHERE d.rowid = \".((int) $id);\n\t$sql .= \" AND p.fk_donation = d.rowid\";\n\t$sql .= \" AND d.entity IN (\".getEntity('donation').\")\";\n\t$sql .= \" AND p.fk_typepayment = c.id\";\n\t$sql .= \" ORDER BY dp\";\n\n\t//print $sql;\n\t$resql = $db->query($sql);\n\tif ($resql) {\n\t\t$num = $db->num_rows($resql);\n\t\t$i = 0; $total = 0;\n\t\tprint '<table class=\"noborder paymenttable centpercent\">';\n\t\tprint '<tr class=\"liste_titre\">';\n\t\tprint '<td>'.$langs->trans(\"RefPayment\").'</td>';\n\t\tprint '<td>'.$langs->trans(\"Date\").'</td>';\n\t\tprint '<td>'.$langs->trans(\"Type\").'</td>';\n\t\tprint '<td class=\"right\">'.$langs->trans(\"Amount\").'</td>';\n\t\tprint '</tr>';\n\n\t\twhile ($i < $num) {\n\t\t\t$objp = $db->fetch_object($resql);\n\n\t\t\tprint '<tr class=\"oddeven\"><td>';\n\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/don/payment/card.php?id='.$objp->rowid.'\">'.img_object($langs->trans(\"Payment\"), \"payment\").' '.$objp->rowid.'</a></td>';\n\t\t\tprint '<td>'.dol_print_date($db->jdate($objp->dp), 'day').\"</td>\\n\";\n\t\t\t$labeltype = $langs->trans(\"PaymentType\".$objp->type_code) != (\"PaymentType\".$objp->type_code) ? $langs->trans(\"PaymentType\".$objp->type_code) : $objp->paiement_type;\n\t\t\tprint \"<td>\".$labeltype.' '.$objp->num_payment.\"</td>\\n\";\n\t\t\tprint '<td class=\"right\">'.price($objp->amount).\"</td>\\n\";\n\t\t\tprint \"</tr>\";\n\t\t\t$totalpaid += $objp->amount;\n\t\t\t$i++;\n\t\t}\n\n\t\tif ($object->paid == 0) {\n\t\t\tprint \"<tr><td colspan=\\\"3\\\" class=\\\"right\\\">\".$langs->trans(\"AlreadyPaid\").\" :</td><td class=\\\"right\\\">\".price($totalpaid).\"</td></tr>\\n\";\n\t\t\tprint \"<tr><td colspan=\\\"3\\\" class=\\\"right\\\">\".$langs->trans(\"AmountExpected\").\" :</td><td class=\\\"right\\\">\".price($object->amount).\"</td></tr>\\n\";\n\n\t\t\t$remaintopay = $object->amount - $totalpaid;\n\n\t\t\tprint \"<tr><td colspan=\\\"3\\\" class=\\\"right\\\">\".$langs->trans(\"RemainderToPay\").\" :</td>\";\n\t\t\tprint '<td class=\"right'.($resteapayeraffiche ? ' amountremaintopay' : '').'\">'.price($remaintopay).\"</td></tr>\\n\";\n\t\t}\n\t\tprint \"</table>\";\n\t\t$db->free($resql);\n\t} else {\n\t\tdol_print_error($db);\n\t}\n\n\tprint '</div>';\n\tprint '</div>';\n\n\tprint '<div class=\"clearboth\"></div>';\n\n\tprint dol_get_fiche_end();\n\n\t$remaintopay = $object->amount - $totalpaid;\n\n\t// Actions buttons\n\n\tprint '<div class=\"tabsAction\">';\n\n\t// Re-open\n\tif ($permissiontoadd && $object->statut == $object::STATUS_CANCELED) {\n\t\tprint '<a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&action=confirm_reopen&confirm=yes&token='.newToken().'\">'.$langs->trans(\"ReOpen\").'</a>';\n\t}\n\n\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=edit&token='.newToken().'&rowid='.$object->id.'\">'.$langs->trans('Modify').'</a></div>';\n\n\tif ($object->statut == $object::STATUS_DRAFT) {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?rowid='.$object->id.'&action=valid_promesse&token='.newToken().'\">'.$langs->trans(\"ValidPromess\").'</a></div>';\n\t}\n\n\tif (($object->statut == $object::STATUS_DRAFT || $object->statut == $object::STATUS_VALIDATED) && $totalpaid == 0 && $object->paid == 0) {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?rowid='.$object->id.'&action=set_cancel&token='.newToken().'\">'.$langs->trans(\"ClassifyCanceled\").\"</a></div>\";\n\t}\n\n\t// Create payment\n\tif ($object->statut == $object::STATUS_VALIDATED && $object->paid == 0 && $user->rights->don->creer) {\n\t\tif ($remaintopay == 0) {\n\t\t\tprint '<div class=\"inline-block divButAction\"><span class=\"butActionRefused classfortooltip\" title=\"'.$langs->trans(\"DisabledBecauseRemainderToPayIsZero\").'\">'.$langs->trans('DoPayment').'</span></div>';\n\t\t} else {\n\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.DOL_URL_ROOT.'/don/payment/payment.php?rowid='.$object->id.'&action=create&token='.newToken().'\">'.$langs->trans('DoPayment').'</a></div>';\n\t\t}\n\t}\n\n\t// Classify 'paid'\n\tif ($object->statut == $object::STATUS_VALIDATED && round($remaintopay) == 0 && $object->paid == 0 && $user->rights->don->creer) {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?rowid='.$object->id.'&action=set_paid&token='.newToken().'\">'.$langs->trans(\"ClassifyPaid\").\"</a></div>\";\n\t}\n\n\t// Delete\n\tif ($user->rights->don->supprimer) {\n\t\tif ($object->statut == $object::STATUS_CANCELED || $object->statut == $object::STATUS_DRAFT) {\n\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"card.php?rowid='.$object->id.'&action=delete&token='.newToken().'\">'.$langs->trans(\"Delete\").\"</a></div>\";\n\t\t} else {\n\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\">'.$langs->trans(\"Delete\").\"</a></div>\";\n\t\t}\n\t} else {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\">'.$langs->trans(\"Delete\").\"</a></div>\";\n\t}\n\n\tprint \"</div>\";\n\n\n\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\n\t/*\n\t * Generated documents\n\t */\n\t$filename = dol_sanitizeFileName($object->id);\n\t$filedir = $conf->don->dir_output.\"/\".dol_sanitizeFileName($object->id);\n\t$urlsource = $_SERVER['PHP_SELF'].'?rowid='.$object->id;\n\t$genallowed\t= (($object->paid == 0 || $user->admin) && $user->rights->don->lire);\n\t$delallowed\t= $user->rights->don->creer;\n\n\tprint $formfile->showdocuments('donation', $filename, $filedir, $urlsource, $genallowed, $delallowed, $object->model_pdf);\n\n\t// Show links to link elements\n\t$linktoelem = $form->showLinkToObjectBlock($object, null, array('don'));\n\t$somethingshown = $form->showLinkedObjectBlock($object, $linktoelem);\n\n\t// Show online payment link\n\t$useonlinepayment = (!empty($conf->paypal->enabled) || !empty($conf->stripe->enabled) || !empty($conf->paybox->enabled));\n\n\tif ($useonlinepayment) { //$object->statut != Facture::STATUS_DRAFT &&\n\t\tprint '<br><!-- Link to pay -->'.\"\\n\";\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/payments.lib.php';\n\t\tprint showOnlinePaymentUrl('donation', $object->ref).'<br>';\n\t}\n\n\tprint '</div><div class=\"fichehalfright\">';\n\n\tprint '</div></div>';\n}\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2002      Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2008 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2009      Regis Houssin        <regis.houssin@inodbox.com>\n * Copyright (C) 2014      Florian Henry        <florian.henry@open-concept.pro>\n * Copyright (C) 2015-2017 Alexandre Spangaro   <aspangaro@open-dsi.fr>\n * Copyright (C) 2016      Juanjo Menent        <jmenent@2byte.es>\n * Copyright (C) 2019      Thibault FOUCART     <support@ptibogxiv.net>\n * Copyright (C) 2019-2020 Fr\u00e9d\u00e9ric France      <frederic.france@netlogic.fr>\n * Copyright (C) 2021      Maxime DEMAREST      <maxime@indelog.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *   \t\\file       htdocs/don/class/don.class.php\n *\t\t\\ingroup    Donation\n *\t\t\\brief      File of class to manage donations\n */\n\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\n\n\n/**\n *\t\tClass to manage donations\n */\nclass Don extends CommonObject\n{\n\t/**\n\t * @var string ID to identify managed object\n\t */\n\tpublic $element = 'don';\n\n\t/**\n\t * @var string Name of table without prefix where object is stored\n\t */\n\tpublic $table_element = 'don';\n\n\t/**\n\t * @var string Field with ID of parent key if this field has a parent\n\t */\n\tpublic $fk_element = 'fk_donation';\n\n\t/**\n\t * 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\t * @var int\n\t */\n\tpublic $ismultientitymanaged = 1;\n\n\t/**\n\t * @var string String with name of icon for object don. Must be the part after the 'object_' into object_myobject.png\n\t */\n\tpublic $picto = 'donation';\n\n\t/**\n\t * @var string Date of the donation\n\t */\n\tpublic $date;\n\n\t/**\n\t * amount of donation\n\t * @var double\n\t */\n\tpublic $amount;\n\n\t/**\n\t * @var string Thirdparty name\n\t */\n\tpublic $societe;\n\n\t/**\n\t * @var string Address\n\t */\n\tpublic $address;\n\n\t/**\n\t * @var string Zipcode\n\t */\n\tpublic $zip;\n\n\t/**\n\t * @var string Town\n\t */\n\tpublic $town;\n\n\t/**\n\t * @var string Email\n\t */\n\tpublic $email;\n\n\t/**\n\t * @var int 0 or 1\n\t */\n\tpublic $public;\n\n\t/**\n\t * @var int project ID\n\t */\n\tpublic $fk_project;\n\n\t/**\n\t * @var int type payment ID\n\t */\n\tpublic $fk_typepayment;\n\n\tpublic $num_payment;\n\tpublic $date_valid;\n\n\t/**\n\t * @var int payment mode id\n\t */\n\tpublic $modepaymentid = 0;\n\n\t/**\n\t * @var array Array of status label\n\t */\n\tpublic $labelStatus;\n\n\t/**\n\t * @var array Array of status label short\n\t */\n\tpublic $labelStatusShort;\n\n\n\tconst STATUS_DRAFT = 0;\n\tconst STATUS_VALIDATED = 1;\n\tconst STATUS_PAID = 2;\n\tconst STATUS_CANCELED = -1;\n\n\n\t/**\n\t *  Constructor\n\t *\n\t *  @param\tDoliDB\t$db \tDatabase handler\n\t */\n\tpublic function __construct($db)\n\t{\n\t\t $this->db = $db;\n\t}\n\n\n\t/**\n\t * \tReturns the donation status label (draft, valid, abandoned, paid)\n\t *\n\t *  @param  int\t\t$mode          \t0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return string        \t\t\tLabel of status\n\t */\n\tpublic function getLibStatut($mode = 0)\n\t{\n\t\treturn $this->LibStatut($this->statut, $mode);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return the label of a given status\n\t *\n\t *  @param\tint\t\t$status        Id statut\n\t *  @param  int\t\t$mode          0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return string \t\t\t       Label of status\n\t */\n\tpublic function LibStatut($status, $mode = 0)\n\t{\n\t\t// phpcs:enable\n\t\tif (empty($this->labelStatus) || empty($this->labelStatusShort)) {\n\t\t\tglobal $langs;\n\t\t\t$langs->load(\"donations\");\n\t\t\t$this->labelStatus[-1] = $langs->transnoentitiesnoconv(\"Canceled\");\n\t\t\t$this->labelStatus[0] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseNotValidated\");\n\t\t\t$this->labelStatus[1] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseValidated\");\n\t\t\t$this->labelStatus[2] = $langs->transnoentitiesnoconv(\"DonationStatusPaid\");\n\t\t\t$this->labelStatusShort[-1] = $langs->transnoentitiesnoconv(\"Canceled\");\n\t\t\t$this->labelStatusShort[0] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseNotValidatedShort\");\n\t\t\t$this->labelStatusShort[1] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseValidatedShort\");\n\t\t\t$this->labelStatusShort[2] = $langs->transnoentitiesnoconv(\"DonationStatusPaidShort\");\n\t\t}\n\n\t\t$statusType = 'status'.$status;\n\t\tif ($status == self::STATUS_CANCELED) {\n\t\t\t$statusType = 'status9';\n\t\t}\n\t\tif ($status == self::STATUS_PAID) {\n\t\t\t$statusType = 'status6';\n\t\t}\n\n\t\treturn dolGetStatus($this->labelStatus[$status], $this->labelStatusShort[$status], '', $statusType, $mode);\n\t}\n\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *\tid must be 0 if object instance is a specimen.\n\t *\n\t *  @return\tvoid\n\t */\n\tpublic function initAsSpecimen()\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$now = dol_now();\n\n\t\t// Charge tableau des id de societe socids\n\t\t$socids = array();\n\n\t\t$sql = \"SELECT rowid\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"societe\";\n\t\t$sql .= \" WHERE client IN (1, 3)\";\n\t\t$sql .= \" AND entity = \".$conf->entity;\n\t\t$sql .= \" LIMIT 10\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num_socs = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num_socs) {\n\t\t\t\t$i++;\n\n\t\t\t\t$row = $this->db->fetch_row($resql);\n\t\t\t\t$socids[$i] = $row[0];\n\t\t\t}\n\t\t}\n\n\t\t// Initialise parametres\n\t\t$this->id = 0;\n\t\t$this->ref = 'SPECIMEN';\n\t\t$this->specimen = 1;\n\t\t$this->lastname = 'Doe';\n\t\t$this->firstname = 'John';\n\t\t$this->socid = 1;\n\t\t$this->date = $now;\n\t\t$this->date_valid = $now;\n\t\t$this->amount = 100.90;\n\t\t$this->public = 1;\n\t\t$this->societe = 'The Company';\n\t\t$this->address = 'Twist road';\n\t\t$this->zip = '99999';\n\t\t$this->town = 'Town';\n\t\t$this->note_private = 'Private note';\n\t\t$this->note_public = 'Public note';\n\t\t$this->email = 'email@email.com';\n\t\t$this->phone = '0123456789';\n\t\t$this->phone_mobile = '0606060606';\n\t\t$this->statut = 1;\n\t}\n\n\n\t/**\n\t *\tCheck params and init ->errors array.\n\t *  TODO This function seems to not be used by core code.\n\t *\n\t *\t@param\tint\t$minimum\tMinimum\n\t *\t@return\tint\t\t\t\t0 if KO, >0 if OK\n\t */\n\tpublic function check($minimum = 0)\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('main');\n\t\t$langs->load('companies');\n\n\t\t$error_string = array();\n\t\t$err = 0;\n\n\t\tif (dol_strlen(trim($this->societe)) == 0) {\n\t\t\tif ((dol_strlen(trim($this->lastname)) + dol_strlen(trim($this->firstname))) == 0) {\n\t\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Company').'/'.$langs->transnoentitiesnoconv('Firstname').'-'.$langs->transnoentitiesnoconv('Lastname'));\n\t\t\t\t$err++;\n\t\t\t}\n\t\t}\n\n\t\tif (dol_strlen(trim($this->address)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Address'));\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->zip)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Zip'));\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->town)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Town'));\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->email)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('EMail'));\n\t\t\t$err++;\n\t\t}\n\n\t\t$this->amount = trim($this->amount);\n\n\t\t$map = range(0, 9);\n\t\t$len = dol_strlen($this->amount);\n\t\tfor ($i = 0; $i < $len; $i++) {\n\t\t\tif (!isset($map[substr($this->amount, $i, 1)])) {\n\t\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Amount'));\n\t\t\t\t$err++;\n\t\t\t\t$amount_invalid = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!$amount_invalid) {\n\t\t\tif ($this->amount == 0) {\n\t\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Amount'));\n\t\t\t\t$err++;\n\t\t\t} else {\n\t\t\t\tif ($this->amount < $minimum && $minimum > 0) {\n\t\t\t\t\t$error_string[] = $langs->trans('MinimumAmount', $langs->transnoentitiesnoconv('$minimum'));\n\t\t\t\t\t$err++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($err) {\n\t\t\t$this->errors = $error_string;\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Create donation record into database\n\t *\n\t * @param\tUser\t$user\t\tUser who created the donation\n\t * @param\tint\t\t$notrigger\tDisable triggers\n\t * @return  int  \t\t        <0 if KO, id of created donation if OK\n\t * TODO    add numbering module for Ref\n\t */\n\tpublic function create($user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$error = 0;\n\t\t$ret = 0;\n\t\t$now = dol_now();\n\n\t\t// Clean parameters\n\t\t$this->address = ($this->address > 0 ? $this->address : $this->address);\n\t\t$this->zip = ($this->zip > 0 ? $this->zip : $this->zip);\n\t\t$this->town = ($this->town > 0 ? $this->town : $this->town);\n\t\t$this->country_id = ($this->country_id > 0 ? $this->country_id : $this->country_id);\n\t\t$this->country = ($this->country ? $this->country : $this->country);\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"don (\";\n\t\t$sql .= \"datec\";\n\t\t$sql .= \", entity\";\n\t\t$sql .= \", amount\";\n\t\t$sql .= \", fk_payment\";\n\t\t$sql .= \", fk_soc\";\n\t\t$sql .= \", firstname\";\n\t\t$sql .= \", lastname\";\n\t\t$sql .= \", societe\";\n\t\t$sql .= \", address\";\n\t\t$sql .= \", zip\";\n\t\t$sql .= \", town\";\n\t\t$sql .= \", fk_country\";\n\t\t$sql .= \", public\";\n\t\t$sql .= \", fk_projet\";\n\t\t$sql .= \", note_private\";\n\t\t$sql .= \", note_public\";\n\t\t$sql .= \", fk_user_author\";\n\t\t$sql .= \", fk_user_valid\";\n\t\t$sql .= \", datedon\";\n\t\t$sql .= \", email\";\n\t\t$sql .= \", phone\";\n\t\t$sql .= \", phone_mobile\";\n\t\t$sql .= \") VALUES (\";\n\t\t$sql .= \"'\".$this->db->idate($this->date ? $this->date : $now).\"'\";\n\t\t$sql .= \", \".((int) $conf->entity);\n\t\t$sql .= \", \".price2num($this->amount);\n\t\t$sql .= \", \".($this->modepaymentid ? $this->modepaymentid : \"null\");\n\t\t$sql .= \", \".($this->socid > 0 ? $this->socid : \"null\");\n\t\t$sql .= \", '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->societe).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->address).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->zip).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->town).\"'\";\n\t\t$sql .= \", \".(int) ($this->country_id > 0 ? $this->country_id : 0);\n\t\t$sql .= \", \".(int) $this->public;\n\t\t$sql .= \", \".($this->fk_project > 0 ? (int) $this->fk_project : \"null\");\n\t\t$sql .= \", \".(!empty($this->note_private) ? (\"'\".$this->db->escape($this->note_private).\"'\") : \"NULL\");\n\t\t$sql .= \", \".(!empty($this->note_public) ? (\"'\".$this->db->escape($this->note_public).\"'\") : \"NULL\");\n\t\t$sql .= \", \".((int) $user->id);\n\t\t$sql .= \", null\";\n\t\t$sql .= \", '\".$this->db->idate($this->date).\"'\";\n\t\t$sql .= \", '\".$this->db->escape(trim($this->email)).\"'\";\n\t\t$sql .= \", '\".$this->db->escape(trim($this->phone)).\"'\";\n\t\t$sql .= \", '\".$this->db->escape(trim($this->phone_mobile)).\"'\";\n\t\t$sql .= \")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"don\");\n\t\t\t$ret = $this->id;\n\n\t\t\tif (!$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('DON_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->errno = $this->db->lasterrno();\n\t\t\t$error++;\n\t\t}\n\n\t\t// Update extrafield\n\t\tif (!$error) {\n\t\t\t$result = $this->insertExtraFields();\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!$error && !empty($conf->global->MAIN_DISABLEDRAFTSTATUS)) {\n\t\t\t//$res = $this->setValid($user);\n\t\t\t//if ($res < 0) $error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$this->db->commit();\n\t\t\treturn $ret;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Update a donation record\n\t *\n\t *  @param \t\tUser\t$user   Objet utilisateur qui met a jour le don\n\t *  @param      int\t\t$notrigger\tDisable triggers\n\t *  @return     int      \t\t>0 if OK, <0 if KO\n\t */\n\tpublic function update($user, $notrigger = 0)\n\t{\n\t\tglobal $langs, $conf;\n\n\t\t$error = 0;\n\n\t\t// Clean parameters\n\t\t$this->address = ($this->address > 0 ? $this->address : $this->address);\n\t\t$this->zip = ($this->zip > 0 ? $this->zip : $this->zip);\n\t\t$this->town = ($this->town > 0 ? $this->town : $this->town);\n\t\t$this->country_id = ($this->country_id > 0 ? $this->country_id : $this->country_id);\n\t\t$this->country = ($this->country ? $this->country : $this->country);\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET \";\n\t\t$sql .= \"amount = \".price2num($this->amount);\n\t\t$sql .= \",fk_payment = \".($this->modepaymentid ? $this->modepaymentid : \"null\");\n\t\t$sql .= \",firstname = '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql .= \",lastname='\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql .= \",societe='\".$this->db->escape($this->societe).\"'\";\n\t\t$sql .= \",address='\".$this->db->escape($this->address).\"'\";\n\t\t$sql .= \",zip='\".$this->db->escape($this->zip).\"'\";\n\t\t$sql .= \",town='\".$this->db->escape($this->town).\"'\";\n\t\t$sql .= \",fk_country = \".($this->country_id > 0 ? ((int) $this->country_id) : '0');\n\t\t$sql .= \",public=\".((int) $this->public);\n\t\t$sql .= \",fk_projet=\".($this->fk_project > 0 ? $this->fk_project : 'null');\n\t\t$sql .= \",note_private=\".(!empty($this->note_private) ? (\"'\".$this->db->escape($this->note_private).\"'\") : \"NULL\");\n\t\t$sql .= \",note_public=\".(!empty($this->note_public) ? (\"'\".$this->db->escape($this->note_public).\"'\") : \"NULL\");\n\t\t$sql .= \",datedon='\".$this->db->idate($this->date).\"'\";\n\t\t$sql .= \",date_valid=\".($this->date_valid ? \"'\".$this->db->idate($this->date).\"'\" : \"null\");\n\t\t$sql .= \",email='\".$this->db->escape(trim($this->email)).\"'\";\n\t\t$sql .= \",phone='\".$this->db->escape(trim($this->phone)).\"'\";\n\t\t$sql .= \",phone_mobile='\".$this->db->escape(trim($this->phone_mobile)).\"'\";\n\t\t$sql .= \",fk_statut=\".((int) $this->statut);\n\t\t$sql .= \" WHERE rowid = \".((int) $this->id);\n\n\t\tdol_syslog(get_class($this).\"::Update\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif (!$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('DON_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\t// Update extrafield\n\t\t\tif (!$error) {\n\t\t\t\t$result = $this->insertExtraFields();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\t$result = 1;\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\t$result = -1;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->errors[] = $this->error;\n\t\t\t$this->db->rollback();\n\t\t\tdol_syslog(get_class($this).\"::Update error -2 \".$this->error, LOG_ERR);\n\t\t\t$result = -2;\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t *    Delete a donation from database\n\t *\n\t *    @param       User\t\t$user            User\n\t *    @param       int\t\t$notrigger       Disable triggers\n\t *    @return      int       \t\t\t      <0 if KO, 0 if not possible, >0 if OK\n\t */\n\tpublic function delete($user, $notrigger = 0)\n\t{\n\t\tglobal $user, $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\tif (!$error && !$notrigger) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('DON_DELETE', $user);\n\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\t// Delete donation\n\t\tif (!$error) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"don_extrafields\";\n\t\t\t$sql .= \" WHERE fk_object = \".((int) $this->id);\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (!$resql) {\n\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"don\";\n\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (!$resql) {\n\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tforeach ($this->errors as $errmsg) {\n\t\t\t\tdol_syslog(get_class($this).\"::delete \".$errmsg, LOG_ERR);\n\t\t\t\t$this->error .= ($this->error ? ', '.$errmsg : $errmsg);\n\t\t\t}\n\t\t\tdol_syslog(get_class($this).\"::delete \".$this->error, LOG_ERR);\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *      Load donation from database\n\t *\n\t *      @param      int\t\t$id      Id of donation to load\n\t *      @param      string\t$ref        Ref of donation to load\n\t *      @return     int      \t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function fetch($id, $ref = '')\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT d.rowid, d.datec, d.date_valid, d.tms as datem, d.datedon,\";\n\t\t$sql .= \" d.fk_soc as socid,d.firstname, d.lastname, d.societe, d.amount, d.fk_statut, d.address, d.zip, d.town, \";\n\t\t$sql .= \" d.fk_country, d.country as country_olddata, d.public, d.amount, d.fk_payment, d.paid, d.note_private, d.note_public, d.email, d.phone, \";\n\t\t$sql .= \" d.phone_mobile, d.fk_projet as fk_project, d.model_pdf,\";\n\t\t$sql .= \" p.ref as project_ref,\";\n\t\t$sql .= \" cp.libelle as payment_label, cp.code as payment_code,\";\n\t\t$sql .= \" c.code as country_code, c.label as country\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"don as d\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"projet as p ON p.rowid = d.fk_projet\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_paiement as cp ON cp.id = d.fk_payment\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_country as c ON d.fk_country = c.rowid\";\n\t\t$sql .= \" WHERE d.entity IN (\".getEntity('donation').\")\";\n\t\tif (!empty($id)) {\n\t\t\t$sql .= \" AND d.rowid=\".((int) $id);\n\t\t} elseif (!empty($ref)) {\n\t\t\t$sql .= \" AND d.ref='\".$this->db->escape($ref).\"'\";\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::fetch\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->num_rows($resql)) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->id                 = $obj->rowid;\n\t\t\t\t$this->ref                = $obj->rowid;\n\t\t\t\t$this->date_creation      = $this->db->jdate($obj->datec);\n\t\t\t\t$this->datec              = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_validation    = $this->db->jdate($obj->date_valid);\n\t\t\t\t$this->date_valid = $this->db->jdate($obj->date_valid);\n\t\t\t\t$this->date_modification  = $this->db->jdate($obj->datem);\n\t\t\t\t$this->datem              = $this->db->jdate($obj->datem);\n\t\t\t\t$this->date               = $this->db->jdate($obj->datedon);\n\t\t\t\t$this->socid              = $obj->socid;\n\t\t\t\t$this->firstname          = $obj->firstname;\n\t\t\t\t$this->lastname           = $obj->lastname;\n\t\t\t\t$this->societe            = $obj->societe;\n\t\t\t\t$this->statut             = $obj->fk_statut;\n\t\t\t\t$this->address            = $obj->address;\n\t\t\t\t$this->zip                = $obj->zip;\n\t\t\t\t$this->town               = $obj->town;\n\t\t\t\t$this->country_id         = $obj->fk_country;\n\t\t\t\t$this->country_code       = $obj->country_code;\n\t\t\t\t$this->country            = $obj->country;\n\t\t\t\t$this->country_olddata    = $obj->country_olddata; // deprecated\n\t\t\t\t$this->email              = $obj->email;\n\t\t\t\t$this->phone              = $obj->phone;\n\t\t\t\t$this->phone_mobile       = $obj->phone_mobile;\n\t\t\t\t$this->project            = $obj->project_ref;\n\t\t\t\t$this->fk_projet          = $obj->fk_project; // deprecated\n\t\t\t\t$this->fk_project         = $obj->fk_project;\n\t\t\t\t$this->public             = $obj->public;\n\t\t\t\t$this->mode_reglement_id  = $obj->fk_payment;\n\t\t\t\t$this->mode_reglement_code = $obj->payment_code;\n\t\t\t\t$this->mode_reglement     = $obj->payment_label;\n\t\t\t\t$this->paid = $obj->paid;\n\t\t\t\t$this->amount             = $obj->amount;\n\t\t\t\t$this->note_private\t      = $obj->note_private;\n\t\t\t\t$this->note_public = $obj->note_public;\n\t\t\t\t$this->model_pdf          = $obj->model_pdf;\n\t\t\t\t$this->modelpdf           = $obj->model_pdf; // deprecated\n\n\t\t\t\t// Retrieve all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tValidate a intervention\n\t *\n\t *\t@param\t\tUser\t\t$user\t\tUser that validate\n\t *  @param\t\tint\t\t\t$notrigger\t1=Does not execute triggers, 0= execute triggers\n\t *\t@return\t\tint\t\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function setValid($user, $notrigger = 0)\n\t{\n\t\treturn $this->valid_promesse($this->id, $user->id, $notrigger);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Validate a promise of donation\n\t *\n\t *    @param\tint\t\t$id   \t\tid of donation\n\t *    @param  \tint\t\t$userid  \tUser who validate the donation/promise\n\t *    @param\tint\t\t$notrigger\tDisable triggers\n\t *    @return   int     \t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function valid_promesse($id, $userid, $notrigger = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $langs, $user;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET fk_statut = 1, fk_user_valid = \".((int) $userid).\" WHERE rowid = \".((int) $id).\" AND fk_statut = 0\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->affected_rows($resql)) {\n\t\t\t\tif (!$notrigger) {\n\t\t\t\t\t// Call trigger\n\t\t\t\t\t$result = $this->call_trigger('DON_VALIDATE', $user);\n\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t\t// End call triggers\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$this->statut = 1;\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Classify the donation as paid, the donation was received\n\t *\n\t *\t@deprecated\n\t *  @see setPaid()\n\t *  @param\tint\t\t$id           \t    id of donation\n\t *  @param    int\t\t$modepayment   \t    mode of payment\n\t *  @return   int      \t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function set_paid($id, $modepayment = 0)\n\t{\n\t\t// phpcs:enable\n\t\tdol_syslog(get_class($this).\"::set_paid is deprecated, use setPaid instead\", LOG_NOTICE);\n\t\treturn $this->setPaid($id, $modepayment);\n\t}\n\n\t/**\n\t *    Classify the donation as paid, the donation was received\n\t *\n\t *    @param\tint\t\t$id           \t    id of donation\n\t *    @param    int\t\t$modepayment   \t    mode of payment\n\t *    @return   int      \t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function setPaid($id, $modepayment = 0)\n\t{\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET fk_statut = 2\";\n\t\tif ($modepayment) {\n\t\t\t$sql .= \", fk_payment = \".((int) $modepayment);\n\t\t}\n\t\t$sql .= \" WHERE rowid = \".((int) $id).\" AND fk_statut = 1\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->affected_rows($resql)) {\n\t\t\t\t$this->statut = 2;\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Set donation to status cancelled\n\t *\n\t *    @param\tint\t\t$id   \t    id of donation\n\t *    @return   int     \t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function set_cancel($id)\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET fk_statut = -1 WHERE rowid = \".((int) $id);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->affected_rows($resql)) {\n\t\t\t\t$this->statut = -1;\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tSet cancel status\n\t *\n\t *\t@param\tUser\t$user\t\t\tObject user that modify\n\t *  @param\tint\t\t$notrigger\t\t1=Does not execute triggers, 0=Execute triggers\n\t *\t@return\tint\t\t\t\t\t\t<0 if KO, 0=Nothing done, >0 if OK\n\t */\n\tpublic function reopen($user, $notrigger = 0)\n\t{\n\t\t// Protection\n\t\tif ($this->statut != self::STATUS_CANCELED) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t/*if (! ((empty($conf->global->MAIN_USE_ADVANCED_PERMS) && ! empty($user->rights->bom->write))\n\t\t || (! empty($conf->global->MAIN_USE_ADVANCED_PERMS) && ! empty($user->rights->bom->bom_advance->validate))))\n\t\t {\n\t\t $this->error='Permission denied';\n\t\t return -1;\n\t\t }*/\n\n\t\treturn $this->setStatusCommon($user, self::STATUS_VALIDATED, $notrigger, 'DON_REOPEN');\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Sum of donations\n\t *\n\t *\t@param\tstring\t$param\t1=promesses de dons validees , 2=xxx, 3=encaisses\n\t *\t@return\tint\t\t\t\tSumm of donations\n\t */\n\tpublic function sum_donations($param)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$result = 0;\n\n\t\t$sql = \"SELECT sum(amount) as total\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"don\";\n\t\t$sql .= \" WHERE fk_statut = \".((int) $param);\n\t\t$sql .= \" AND entity = \".$conf->entity;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$result = $obj->total;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tCharge indicateurs this->nb pour le tableau de bord\n\t *\n\t *\t@return     int         <0 if KO, >0 if OK\n\t */\n\tpublic function load_state_board()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$this->nb = array();\n\n\t\t$sql = \"SELECT count(d.rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"don as d\";\n\t\t$sql .= \" WHERE d.fk_statut > 0\";\n\t\t$sql .= \" AND d.entity IN (\".getEntity('donation').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->nb[\"donations\"] = $obj->nb;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tReturn clicable name (with picto eventually)\n\t *\n\t *\t@param\tint\t\t$withpicto\t\t\t\t\t0=No picto, 1=Include picto into link, 2=Only picto\n\t *\t@param\tint  \t$notooltip\t\t\t\t\t1=Disable tooltip\n\t *\t@param\tstring\t$moretitle\t\t\t\t\tAdd more text to title tooltip\n\t *  @param  int     $save_lastsearch_value    \t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\tstring\t\t\t\t\t\t\t\tChaine avec URL\n\t */\n\tpublic function getNomUrl($withpicto = 0, $notooltip = 0, $moretitle = '', $save_lastsearch_value = -1)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\tif (!empty($conf->dol_no_mouse_hover)) {\n\t\t\t$notooltip = 1; // Force disable tooltips\n\t\t}\n\n\t\t$result = '';\n\t\t$label = img_picto('', $this->picto).' <u class=\"paddingrightonly\">'.$langs->trans(\"Donation\").'</u>';\n\t\tif (isset($this->status)) {\n\t\t\t$label .= ' '.$this->getLibStatut(5);\n\t\t}\n\t\tif (!empty($this->id)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('Ref').':</b> '.$this->id;\n\t\t\t$label .= '<br><b>'.$langs->trans('Date').':</b> '.dol_print_date($this->date, 'day');\n\t\t}\n\t\tif ($moretitle) {\n\t\t\t$label .= ' - '.$moretitle;\n\t\t}\n\n\t\t$url = DOL_URL_ROOT.'/don/card.php?id='.$this->id;\n\n\t\t$add_save_lastsearch_values = ($save_lastsearch_value == 1 ? 1 : 0);\n\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/', $_SERVER[\"PHP_SELF\"])) {\n\t\t\t$add_save_lastsearch_values = 1;\n\t\t}\n\t\tif ($add_save_lastsearch_values) {\n\t\t\t$url .= '&save_lastsearch_values=1';\n\t\t}\n\n\t\t$linkstart = '<a href=\"'.$url.'\" title=\"'.dol_escape_htmltag($label, 1).'\" class=\"classfortooltip\">';\n\t\t$linkend = '</a>';\n\n\t\t$result .= $linkstart;\n\t\tif ($withpicto) {\n\t\t\t$result .= img_object(($notooltip ? '' : $label), $this->picto, ($notooltip ? (($withpicto != 2) ? 'class=\"paddingright\"' : '') : 'class=\"'.(($withpicto != 2) ? 'paddingright ' : '').'classfortooltip\"'), 0, 0, $notooltip ? 0 : 1);\n\t\t}\n\t\tif ($withpicto != 2) {\n\t\t\t$result .= $this->ref;\n\t\t}\n\t\t$result .= $linkend;\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Information on record\n\t *\n\t * @param\tint\t\t$id      Id of record\n\t * @return\tvoid\n\t */\n\tpublic function info($id)\n\t{\n\t\t$sql = 'SELECT d.rowid, d.datec, d.fk_user_author, d.fk_user_valid,';\n\t\t$sql .= ' d.tms';\n\t\t$sql .= ' FROM '.MAIN_DB_PREFIX.'don as d';\n\t\t$sql .= ' WHERE d.rowid = '.((int) $id);\n\n\t\tdol_syslog(get_class($this).'::info', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\n\t\tif ($result) {\n\t\t\tif ($this->db->num_rows($result)) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$this->id = $obj->rowid;\n\t\t\t\tif ($obj->fk_user_author) {\n\t\t\t\t\t$cuser = new User($this->db);\n\t\t\t\t\t$cuser->fetch($obj->fk_user_author);\n\t\t\t\t\t$this->user_creation = $cuser;\n\t\t\t\t}\n\t\t\t\tif ($obj->fk_user_valid) {\n\t\t\t\t\t$vuser = new User($this->db);\n\t\t\t\t\t$vuser->fetch($obj->fk_user_valid);\n\t\t\t\t\t$this->user_modification = $vuser;\n\t\t\t\t}\n\t\t\t\t$this->date_creation     = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->tms);\n\t\t\t}\n\t\t\t$this->db->free($result);\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t *  @param\t    string\t\t$modele\t\t\tForce template to use ('' to not force)\n\t *  @param\t\tTranslate\t$outputlangs\tobjet lang a utiliser pour traduction\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n\t *  @return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails = 0, $hidedesc = 0, $hideref = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs->load(\"bills\");\n\n\t\tif (!dol_strlen($modele)) {\n\t\t\t$modele = 'html_cerfafr';\n\n\t\t\tif ($this->model_pdf) {\n\t\t\t\t$modele = $this->model_pdf;\n\t\t\t} elseif (!empty($conf->global->DON_ADDON_MODEL)) {\n\t\t\t\t$modele = $conf->global->DON_ADDON_MODEL;\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/dons/\";\n\n\t\t// TODO Restore use of commonGenerateDocument instead of dedicated code here\n\t\t//return $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\n\t\t// Increase limit for PDF build\n\t\t$err = error_reporting();\n\t\terror_reporting(0);\n\t\t@set_time_limit(120);\n\t\terror_reporting($err);\n\n\t\t$srctemplatepath = '';\n\n\t\t// If selected modele is a filename template (then $modele=\"modelname:filename\")\n\t\t$tmp = explode(':', $modele, 2);\n\t\tif (!empty($tmp[1])) {\n\t\t\t$modele = $tmp[0];\n\t\t\t$srctemplatepath = $tmp[1];\n\t\t}\n\n\t\t// Search template files\n\t\t$file = ''; $classname = ''; $filefound = 0;\n\t\t$dirmodels = array('/');\n\t\tif (is_array($conf->modules_parts['models'])) {\n\t\t\t$dirmodels = array_merge($dirmodels, $conf->modules_parts['models']);\n\t\t}\n\t\tforeach ($dirmodels as $reldir) {\n\t\t\tforeach (array('html', 'doc', 'pdf') as $prefix) {\n\t\t\t\t$file = $prefix.\"_\".preg_replace('/^html_/', '', $modele).\".modules.php\";\n\n\t\t\t\t// On verifie l'emplacement du modele\n\t\t\t\t$file = dol_buildpath($reldir.\"core/modules/dons/\".$file, 0);\n\t\t\t\tif (file_exists($file)) {\n\t\t\t\t\t$filefound = 1;\n\t\t\t\t\t$classname = $prefix.'_'.$modele;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($filefound) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Charge le modele\n\t\tif ($filefound) {\n\t\t\trequire_once $file;\n\n\t\t\t$object = $this;\n\n\t\t\t$classname = $modele;\n\t\t\t$obj = new $classname($this->db);\n\n\t\t\t// We save charset_output to restore it because write_file can change it if needed for\n\t\t\t// output format that does not support UTF8.\n\t\t\t$sav_charset_output = $outputlangs->charset_output;\n\t\t\tif ($obj->write_file($object, $outputlangs, $srctemplatepath, $hidedetails, $hidedesc, $hideref) > 0) {\n\t\t\t\t$outputlangs->charset_output = $sav_charset_output;\n\n\t\t\t\t// we delete preview files\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\t\t\tdol_delete_preview($object);\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\t$outputlangs->charset_output = $sav_charset_output;\n\t\t\t\tdol_syslog(\"Erreur dans don_create\");\n\t\t\t\tdol_print_error($this->db, $obj->error);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tprint $langs->trans(\"Error\").\" \".$langs->trans(\"ErrorFileDoesNotExists\", $file);\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param  DoliDB  $db             Database handler\n\t * @param  int     $origin_id      Old third-party id\n\t * @param  int     $dest_id        New third-party id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'don'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\t/**\n\t * Function to get reamain to pay for a donation\n\t *\n\t * @return   int      \t\t\t\t\t<0 if KO, > reamain to pay if  OK\n\t */\n\tpublic function getRemainToPay()\n\t{\n\t\tdol_syslog(__METHOD__, LOG_DEBUG);\n\n\t\tif (empty($this->id)) {\n\t\t\t$this->error = 'Missing object id';\n\t\t\t$this->errors[] = $this->error;\n\t\t\tdol_syslog(__METHOD__.' : '.$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"SELECT SUM(amount) as sum_amount FROM \".MAIN_DB_PREFIX.\"payment_donation WHERE fk_donation = \".((int) $this->id);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -2;\n\t\t} else {\n\t\t\t$sum_amount = (float) $this->db->fetch_object($resql)->sum_amount;\n\t\t\treturn (float) $this->amount - $sum_amount;\n\t\t}\n\t}\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2001-2002  Rodolphe Quiedeville    <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2017  Laurent Destailleur     <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2012  Regis Houssin           <regis.houssin@inodbox.com>\n * Copyright (C) 2013       Florian Henry           <florian.henry@open-concept.pro>\n * Copyright (C) 2015-2016  Alexandre Spangaro      <aspangaro@open-dsi.fr>\n * Copyright (C) 2018-2019  Thibault FOUCART        <support@ptibogxiv.net>\n * Copyright (C) 2018-2020  Fr\u00e9d\u00e9ric France         <frederic.france@netlogic.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *  \\file       htdocs/don/card.php\n *  \\ingroup    donations\n *  \\brief      Page of donation card\n */\n\nrequire '../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/modules/dons/modules_don.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/donation.lib.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formfile.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formcompany.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/don/class/don.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/compta/paiement/class/paiement.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formmargin.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/functions2.lib.php';\nif (!empty($conf->projet->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formprojet.class.php';\n\trequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\n}\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/doleditor.class.php';\n\n$langs->loadLangs(array(\"bills\", \"companies\", \"donations\", \"users\"));\n\n$id = GETPOST('rowid') ?GETPOST('rowid', 'int') : GETPOST('id', 'int');\n$action = GETPOST('action', 'aZ09');\n$cancel = GETPOST('cancel', 'alpha');\n$confirm = GETPOST('confirm', 'alpha');\n\n$amount = price2num(GETPOST('amount', 'alphanohtml'), 'MT');\n$donation_date = dol_mktime(12, 0, 0, GETPOST('remonth'), GETPOST('reday'), GETPOST('reyear'));\n$projectid = (GETPOST('projectid') ? GETPOST('projectid', 'int') : 0);\n$public_donation = (int) GETPOST(\"public\", 'int');\n\n$object = new Don($db);\n$extrafields = new ExtraFields($db);\n\n// Security check\n$result = restrictedArea($user, 'don', $id);\n\n// fetch optionals attributes and labels\n$extrafields->fetch_name_optionals_label($object->table_element);\n$search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');\n\n// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n$hookmanager->initHooks(array('doncard', 'globalcard'));\n\n$upload_dir = $conf->don->dir_output;\n$permissiontoadd = $user->rights->don->creer;\n\n\n/*\n * Actions\n */\n\n$parameters = array();\n\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\nif (empty($reshook)) {\n\t$backurlforlist = DOL_URL_ROOT.'/don/list.php';\n\n\tif (empty($backtopage) || ($cancel && empty($id))) {\n\t\tif (empty($backtopage) || ($cancel && strpos($backtopage, '__ID__'))) {\n\t\t\tif (empty($id) && (($action != 'add' && $action != 'create') || $cancel)) {\n\t\t\t\t$backtopage = $backurlforlist;\n\t\t\t} else {\n\t\t\t\t$backtopage = DOL_URL_ROOT.'/don/card.php?id='.((!empty($id) && $id > 0) ? $id : '__ID__');\n\t\t\t}\n\t\t}\n\t}\n\n\tif ($cancel) {\n\t\tif (!empty($backtopageforcancel)) {\n\t\t\theader(\"Location: \".$backtopageforcancel);\n\t\t\texit;\n\t\t} elseif (!empty($backtopage)) {\n\t\t\theader(\"Location: \".$backtopage);\n\t\t\texit;\n\t\t}\n\t\t$action = '';\n\t}\n\n\t// Action reopen object\n\tif ($action == 'confirm_reopen' && $confirm == 'yes' && $permissiontoadd) {\n\t\t$object->fetch($id);\n\n\t\t$result = $object->reopen($user);\n\t\tif ($result >= 0) {\n\t\t\t// Define output language\n\t\t\tif (empty($conf->global->MAIN_DISABLE_PDF_AUTOUPDATE)) {\n\t\t\t\tif (method_exists($object, 'generateDocument')) {\n\t\t\t\t\t$outputlangs = $langs;\n\t\t\t\t\t$newlang = '';\n\t\t\t\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang) && GETPOST('lang_id', 'aZ09')) {\n\t\t\t\t\t\t$newlang = GETPOST('lang_id', 'aZ09');\n\t\t\t\t\t}\n\t\t\t\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang)) {\n\t\t\t\t\t\t$newlang = $object->thirdparty->default_lang;\n\t\t\t\t\t}\n\t\t\t\t\tif (!empty($newlang)) {\n\t\t\t\t\t\t$outputlangs = new Translate(\"\", $conf);\n\t\t\t\t\t\t$outputlangs->setDefaultLang($newlang);\n\t\t\t\t\t}\n\t\t\t\t\t$model = $object->model_pdf;\n\t\t\t\t\t$ret = $object->fetch($id); // Reload to get new records\n\n\t\t\t\t\t$object->generateDocument($model, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\theader(\"Location: \".$_SERVER[\"PHP_SELF\"].'?id='.$object->id);\n\t\t\texit;\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t$action = 'create';\n\t\t}\n\t}\n\n\n\t// Action update object\n\tif ($action == 'update') {\n\t\tif (!empty($cancel)) {\n\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".urlencode($id));\n\t\t\texit;\n\t\t}\n\n\t\t$error = 0;\n\n\t\tif (empty($donation_date)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Date\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (empty($amount)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Amount\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->fetch($id);\n\n\t\t\t$object->firstname = (string) GETPOST(\"firstname\", 'alpha');\n\t\t\t$object->lastname = (string) GETPOST(\"lastname\", 'alpha');\n\t\t\t$object->societe = (string) GETPOST(\"societe\", 'alpha');\n\t\t\t$object->address = (string) GETPOST(\"address\", 'alpha');\n\t\t\t$object->amount = price2num(GETPOST(\"amount\", 'alpha'), '', 2);\n\t\t\t$object->town = (string) GETPOST(\"town\", 'alpha');\n\t\t\t$object->zip = (string) GETPOST(\"zipcode\", 'alpha');\n\t\t\t$object->country_id = (int) GETPOST('country_id', 'int');\n\t\t\t$object->email = (string) GETPOST(\"email\", 'alpha');\n\t\t\t$object->date = $donation_date;\n\t\t\t$object->public = $public_donation;\n\t\t\t$object->fk_project = (int) GETPOST(\"fk_project\", 'int');\n\t\t\t$object->note_private = (string) GETPOST(\"note_private\", 'restricthtml');\n\t\t\t$object->note_public = (string) GETPOST(\"note_public\", 'restricthtml');\n\t\t\t$object->modepaymentid = (int) GETPOST('modepayment', 'int');\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object, '@GETPOSTISSET');\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\tif ($object->update($user) > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].\"?id=\".$object->id);\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t$action = \"create\";\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// Action add/create object\n\tif ($action == 'add') {\n\t\tif (!empty($cancel)) {\n\t\t\theader(\"Location: index.php\");\n\t\t\texit;\n\t\t}\n\n\t\t$error = 0;\n\n\t\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES) && !(GETPOST(\"socid\", 'int') > 0)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"ThirdParty\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\t\tif (empty($donation_date)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Date\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (empty($amount)) {\n\t\t\tsetEventMessages($langs->trans(\"ErrorFieldRequired\", $langs->transnoentitiesnoconv(\"Amount\")), null, 'errors');\n\t\t\t$action = \"create\";\n\t\t\t$error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$object->socid = (int) GETPOST(\"socid\", 'int');\n\t\t\t$object->firstname = (string) GETPOST(\"firstname\", 'alpha');\n\t\t\t$object->lastname = (string) GETPOST(\"lastname\", 'alpha');\n\t\t\t$object->societe = (string) GETPOST(\"societe\", 'alpha');\n\t\t\t$object->address = (string) GETPOST(\"address\", 'alpha');\n\t\t\t$object->amount = price2num(GETPOST(\"amount\", 'alpha'), '', 2);\n\t\t\t$object->zip = (string) GETPOST(\"zipcode\", 'alpha');\n\t\t\t$object->town = (string) GETPOST(\"town\", 'alpha');\n\t\t\t$object->country_id = (int) GETPOST('country_id', 'int');\n\t\t\t$object->email = (string) GETPOST('email', 'alpha');\n\t\t\t$object->date = $donation_date;\n\t\t\t$object->note_private = (string) GETPOST(\"note_private\", 'restricthtml');\n\t\t\t$object->note_public = (string) GETPOST(\"note_public\", 'restricthtml');\n\t\t\t$object->public = $public_donation;\n\t\t\t$object->fk_project = (int) GETPOST(\"fk_project\", 'int');\n\t\t\t$object->modepaymentid = (int) GETPOST('modepayment', 'int');\n\n\t\t\t// Fill array 'array_options' with data from add form\n\t\t\t$ret = $extrafields->setOptionalsFromPost(null, $object);\n\t\t\tif ($ret < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\n\t\t\t$res = $object->create($user);\n\t\t\tif ($res > 0) {\n\t\t\t\theader(\"Location: \".$_SERVER['PHP_SELF'].'?id='.$res);\n\t\t\t\texit;\n\t\t\t} else {\n\t\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t\t\t$action = \"create\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Action delete object\n\tif ($action == 'confirm_delete' && GETPOST(\"confirm\") == \"yes\" && $user->rights->don->supprimer) {\n\t\t$object->fetch($id);\n\t\t$result = $object->delete($user);\n\t\tif ($result > 0) {\n\t\t\theader(\"Location: index.php\");\n\t\t\texit;\n\t\t} else {\n\t\t\tdol_syslog($object->error, LOG_DEBUG);\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t}\n\n\t// Action validation\n\tif ($action == 'valid_promesse') {\n\t\t$object->fetch($id);\n\t\tif ($object->valid_promesse($id, $user->id) >= 0) {\n\t\t\tsetEventMessages($langs->trans(\"DonationValidated\", $object->ref), null);\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t}\n\n\t// Action cancel\n\tif ($action == 'set_cancel') {\n\t\t$object->fetch($id);\n\t\tif ($object->set_cancel($id) >= 0) {\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t}\n\n\t// Action set paid\n\tif ($action == 'set_paid') {\n\t\t$object->fetch($id);\n\t\tif ($object->setPaid($id, $modepayment) >= 0) {\n\t\t\t$action = '';\n\t\t} else {\n\t\t\tsetEventMessages($object->error, $object->errors, 'errors');\n\t\t}\n\t} elseif ($action == 'classin' && $user->rights->don->creer) {\n\t\t$object->fetch($id);\n\t\t$object->setProject($projectid);\n\t}\n\n\n\t// Actions to build doc\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_builddoc.inc.php';\n\n\n\t// Remove file in doc form\n\t/*if ($action == 'remove_file')\n\t{\n\t\t$object = new Don($db, 0, GETPOST('id', 'int'));\n\t\tif ($object->fetch($id))\n\t\t{\n\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t\t$object->fetch_thirdparty();\n\n\t\t\t$langs->load(\"other\");\n\t\t\t$upload_dir = $conf->don->dir_output;\n\t\t\t$file = $upload_dir . '/' . GETPOST('file');\n\t\t\t$ret=dol_delete_file($file,0,0,0,$object);\n\t\t\tif ($ret) setEventMessages($langs->trans(\"FileWasRemoved\", GETPOST('urlfile')), null, 'mesgs');\n\t\t\telse setEventMessages($langs->trans(\"ErrorFailToDeleteFile\", GETPOST('urlfile')), null, 'errors');\n\t\t\t$action='';\n\t\t}\n\t}\n\t*/\n\n\t/*\n\t * Build doc\n\t */\n\t/*\n\tif ($action == 'builddoc')\n\t{\n\t\t$object = new Don($db);\n\t\t$result=$object->fetch($id);\n\n\t\t// Save last template used to generate document\n\t\tif (GETPOST('model')) $object->setDocModel($user, GETPOST('model','alpha'));\n\n\t\t// Define output language\n\t\t$outputlangs = $langs;\n\t\t$newlang='';\n\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang) && ! empty($_REQUEST['lang_id'])) $newlang=$_REQUEST['lang_id'];\n\t\tif ($conf->global->MAIN_MULTILANGS && empty($newlang)) $newlang=$object->thirdparty->default_lang;\n\t\tif (! empty($newlang))\n\t\t{\n\t\t\t$outputlangs = new Translate(\"\",$conf);\n\t\t\t$outputlangs->setDefaultLang($newlang);\n\t\t}\n\t\t$result=don_create($db, $object->id, '', $object->model_pdf, $outputlangs);\n\t\tif ($result <= 0)\n\t\t{\n\t\t\tdol_print_error($db,$result);\n\t\t\texit;\n\t\t}\n\t}\n\t*/\n}\n\n\n/*\n * View\n */\n\n$title = $langs->trans(\"Donation\");\n\n$help_url = 'EN:Module_Donations|FR:Module_Dons|ES:M&oacute;dulo_Donaciones|DE:Modul_Spenden';\n\nllxHeader('', $title, $help_url);\n\n$form = new Form($db);\n$formfile = new FormFile($db);\n$formcompany = new FormCompany($db);\nif (!empty($conf->projet->enabled)) {\n\t$formproject = new FormProjets($db);\n}\n\nif ($action == 'create') {\n\tprint load_fiche_titre($langs->trans(\"AddDonation\"), '', 'object_donation');\n\n\tprint '<form name=\"add\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"POST\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"add\">';\n\n\tprint dol_get_fiche_head('');\n\n\tprint '<table class=\"border centpercent\">';\n\tprint '<tbody>';\n\n\t// Ref\n\tprint '<tr><td class=\"titlefieldcreate fieldrequired\">'.$langs->trans('Ref').'</td><td>'.$langs->trans('Draft').'</td></tr>';\n\n\t// Company\n\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\t// Thirdparty\n\t\tif ($soc->id > 0) {\n\t\t\tprint '<td class=\"fieldrequired\">'.$langs->trans('ThirdParty').'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $soc->getNomUrl(1);\n\t\t\tprint '<input type=\"hidden\" name=\"socid\" value=\"'.$soc->id.'\">';\n\t\t\t// Outstanding Bill\n\t\t\t$arrayoutstandingbills = $soc->getOutstandingBills();\n\t\t\t$outstandingBills = $arrayoutstandingbills['opened'];\n\t\t\tprint ' ('.$langs->trans('CurrentOutstandingBill').': ';\n\t\t\tprint price($outstandingBills, '', $langs, 0, 0, -1, $conf->currency);\n\t\t\tif ($soc->outstanding_limit != '') {\n\t\t\t\tif ($outstandingBills > $soc->outstanding_limit) {\n\t\t\t\t\tprint img_warning($langs->trans(\"OutstandingBillReached\"));\n\t\t\t\t}\n\t\t\t\tprint ' / '.price($soc->outstanding_limit, '', $langs, 0, 0, -1, $conf->currency);\n\t\t\t}\n\t\t\tprint ')';\n\t\t\tprint '</td>';\n\t\t} else {\n\t\t\tprint '<td class=\"fieldrequired\">'.$langs->trans('ThirdParty').'</td>';\n\t\t\tprint '<td>';\n\t\t\tprint $form->select_company($soc->id, 'socid', '(s.client = 1 OR s.client = 3) AND status=1', 'SelectThirdParty', 0, 0, null, 0, 'minwidth300');\n\t\t\t// Option to reload page to retrieve customer informations. Note, this clear other input\n\t\t\tif (!empty($conf->global->RELOAD_PAGE_ON_CUSTOMER_CHANGE_DISABLED)) {\n\t\t\t\tprint '<script type=\"text/javascript\">\n\t\t\t\t$(document).ready(function() {\n\t\t\t\t\t$(\"#socid\").change(function() {\n\t\t\t\t\t\tconsole.log(\"We have changed the company - Reload page\");\n\t\t\t\t\t\tvar socid = $(this).val();\n\t\t\t\t        var fac_rec = $(\\'#fac_rec\\').val();\n\t\t\t\t\t\t// reload page\n\t\t\t\t\t\t$(\"input[name=action]\").val(\"create\");\n\t\t\t\t\t\t$(\"form[name=add]\").submit();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>';\n\t\t\t}\n\t\t\tprint ' <a href=\"'.DOL_URL_ROOT.'/societe/card.php?action=create&client=3&fournisseur=0&backtopage='.urlencode($_SERVER[\"PHP_SELF\"].'?action=create').'\"><span class=\"fa fa-plus-circle valignmiddle paddingleft\" title=\"'.$langs->trans(\"AddThirdParty\").'\"></span></a>';\n\t\t\tprint '</td>';\n\t\t}\n\t\tprint '</tr>'.\"\\n\";\n\t}\n\n\t// Date\n\tprint '<tr><td class=\"fieldrequired titlefieldcreate\">'.$langs->trans(\"Date\").'</td><td>';\n\tprint $form->selectDate($donation_date ? $donation_date : -1, '', '', '', '', \"add\", 1, 1);\n\tprint '</td>';\n\n\t// Amount\n\tprint \"<tr>\".'<td class=\"fieldrequired\">'.$langs->trans(\"Amount\").'</td><td><input type=\"text\" name=\"amount\" value=\"'.dol_escape_htmltag(GETPOST(\"amount\")).'\" size=\"10\"> '.$langs->trans(\"Currency\".$conf->currency).'</td></tr>';\n\n\t// Public donation\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"PublicDonation\").\"</td><td>\";\n\tprint $form->selectyesno(\"public\", $public_donation, 1);\n\tprint \"</td></tr>\\n\";\n\n\tif (empty($conf->societe->enabled) || empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Company\").'</td><td><input type=\"text\" name=\"societe\" value=\"'.dol_escape_htmltag(GETPOST(\"societe\")).'\" class=\"maxwidth200\"></td></tr>';\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Lastname\").'</td><td><input type=\"text\" name=\"lastname\" value=\"'.dol_escape_htmltag(GETPOST(\"lastname\")).'\" class=\"maxwidth200\"></td></tr>';\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Firstname\").'</td><td><input type=\"text\" name=\"firstname\" value=\"'.dol_escape_htmltag(GETPOST(\"firstname\")).'\" class=\"maxwidth200\"></td></tr>';\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"Address\").'</td><td>';\n\t\tprint '<textarea name=\"address\" wrap=\"soft\" class=\"quatrevingtpercent\" rows=\"3\">'.dol_escape_htmltag(GETPOST(\"address\", \"alphanohtml\"), 0, 1).'</textarea></td></tr>';\n\n\t\t// Zip / Town\n\t\tprint '<tr><td>'.$langs->trans(\"Zip\").' / '.$langs->trans(\"Town\").'</td><td>';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"zipcode\") ? GETPOST(\"zipcode\") : $object->zip), 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\tprint ' ';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"town\") ? GETPOST(\"town\") : $object->town), 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\tprint '</tr>';\n\n\t\t// Country\n\t\tprint '<tr><td><label for=\"selectcountry_id\">'.$langs->trans('Country').'</label></td><td class=\"maxwidthonsmartphone\">';\n\t\tprint img_picto('', 'globe-americas', 'class=\"paddingrightonly\"').$form->select_country(GETPOST('country_id') != '' ?GETPOST('country_id') : $object->country_id);\n\t\tif ($user->admin) {\n\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t}\n\t\tprint '</td></tr>';\n\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"EMail\").'</td><td>'.img_picto('', 'object_email', 'class=\"paddingrightonly\"').'<input type=\"text\" name=\"email\" value=\"'.dol_escape_htmltag(GETPOST(\"email\")).'\" class=\"maxwidth200\"></td></tr>';\n\t}\n\n\t// Payment mode\n\tprint \"<tr><td>\".$langs->trans(\"PaymentMode\").\"</td><td>\\n\";\n\t$selected = GETPOST('modepayment', 'int');\n\t$form->select_types_paiements($selected, 'modepayment', 'CRDT', 0, 1);\n\tprint \"</td></tr>\\n\";\n\n\t// Public note\n\tprint '<tr>';\n\tprint '<td class=\"tdtop\">'.$langs->trans('NotePublic').'</td>';\n\tprint '<td>';\n\n\t$doleditor = new DolEditor('note_public', $note_public, '', 80, 'dolibarr_notes', 'In', 0, false, empty($conf->global->FCKEDITOR_ENABLE_NOTE_PUBLIC) ? 0 : 1, ROWS_3, '90%');\n\tprint $doleditor->Create(1);\n\tprint '</td></tr>';\n\n\t// Private note\n\tif (empty($user->socid)) {\n\t\tprint '<tr>';\n\t\tprint '<td class=\"tdtop\">'.$langs->trans('NotePrivate').'</td>';\n\t\tprint '<td>';\n\n\t\t$doleditor = new DolEditor('note_private', $note_private, '', 80, 'dolibarr_notes', 'In', 0, false, empty($conf->global->FCKEDITOR_ENABLE_NOTE_PRIVATE) ? 0 : 1, ROWS_3, '90%');\n\t\tprint $doleditor->Create(1);\n\t\tprint '</td></tr>';\n\t}\n\n\tif (!empty($conf->projet->enabled)) {\n\t\tprint \"<tr><td>\".$langs->trans(\"Project\").\"</td><td>\";\n\t\t$formproject->select_projects(-1, $projectid, 'fk_project', 0, 0, 1, 1, 0, 0, 0, '', 0, 0, 'maxwidth500');\n\t\tprint \"</td></tr>\\n\";\n\t}\n\n\t// Other attributes\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tprint $hookmanager->resPrint;\n\tif (empty($reshook)) {\n\t\tprint $object->showOptionals($extrafields, 'create', $parameters);\n\t}\n\n\tprint '</tbody>';\n\tprint \"</table>\\n\";\n\n\tprint dol_get_fiche_end();\n\n\tprint $form->buttonsSaveCancel();\n\n\tprint \"</form>\\n\";\n}\n\n\n/* ************************************************************ */\n/*                                                              */\n/* Donation card in edit mode                                   */\n/*                                                              */\n/* ************************************************************ */\n\nif (!empty($id) && $action == 'edit') {\n\t$result = $object->fetch($id);\n\tif ($result < 0) {\n\t\tdol_print_error($db, $object->error); exit;\n\t}\n\t$result = $object->fetch_optionals();\n\tif ($result < 0) {\n\t\tdol_print_error($db); exit;\n\t}\n\n\t$hselected = 'card';\n\t$head = donation_prepare_head($object);\n\n\tprint '<form name=\"update\" action=\"'.$_SERVER[\"PHP_SELF\"].'\" method=\"POST\">';\n\tprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\tprint '<input type=\"hidden\" name=\"action\" value=\"update\">';\n\tprint '<input type=\"hidden\" name=\"rowid\" value=\"'.$object->id.'\">';\n\tprint '<input type=\"hidden\" name=\"amount\" value=\"'.$object->amount.'\">';\n\n\n\tprint dol_get_fiche_head($head, $hselected, $langs->trans(\"Donation\"), 0, 'donation');\n\n\tprint '<table class=\"border centpercent\">';\n\n\t// Ref\n\tprint '<tr><td>'.$langs->trans(\"Ref\").'</td><td colspan=\"2\">';\n\tprint $object->getNomUrl();\n\tprint '</td>';\n\tprint '</tr>';\n\n\t// Date\n\tprint '<tr><td class=\"titlefieldcreate fieldrequired\">'.$langs->trans(\"Date\").'</td><td>';\n\tprint $form->selectDate($object->date, '', '', '', '', \"update\");\n\tprint '</td>';\n\n\t// Amount\n\tif ($object->statut == 0) {\n\t\tprint \"<tr>\".'<td class=\"fieldrequired\">'.$langs->trans(\"Amount\").'</td><td><input type=\"text\" name=\"amount\" size=\"10\" value=\"'.price($object->amount).'\"> '.$langs->trans(\"Currency\".$conf->currency).'</td></tr>';\n\t} else {\n\t\tprint '<tr><td>'.$langs->trans(\"Amount\").'</td><td>';\n\t\tprint price($object->amount, 0, $langs, 0, 0, -1, $conf->currency);\n\t\tprint '</td></tr>';\n\t}\n\n\tprint '<tr><td class=\"fieldrequired\">'.$langs->trans(\"PublicDonation\").\"</td><td>\";\n\tprint $form->selectyesno(\"public\", $object->public, 1);\n\tprint \"</td>\";\n\tprint \"</tr>\\n\";\n\n\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\t$company = new Societe($db);\n\n\t\tprint '<tr><td>'.$langs->trans(\"ThirdParty\").'</td><td colspan=\"2\">';\n\t\tif ($object->socid > 0) {\n\t\t\t$result = $company->fetch($object->socid);\n\t\t\tprint $company->getNomUrl(1);\n\t\t}\n\t\tprint '</td></tr>';\n\t} else {\n\t\t$langs->load(\"companies\");\n\t\tprint '<tr><td>'.$langs->trans(\"Company\").'</td><td><input type=\"text\" name=\"societe\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->societe).'\"></td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Lastname\").'</td><td><input type=\"text\" name=\"lastname\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->lastname).'\"></td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td><td><input type=\"text\" name=\"firstname\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->firstname).'\"></td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Address\").'</td><td>';\n\t\tprint '<textarea name=\"address\" wrap=\"soft\" class=\"quatrevingtpercent\" rows=\"'.ROWS_3.'\">'.dol_escape_htmltag($object->address, 0, 1).'</textarea></td></tr>';\n\n\t\t// Zip / Town\n\t\tprint '<tr><td>'.$langs->trans(\"Zip\").' / '.$langs->trans(\"Town\").'</td><td>';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"zipcode\") ? GETPOSTISSET(\"zipcode\") : $object->zip), 'zipcode', array('town', 'selectcountry_id', 'state_id'), 6);\n\t\tprint ' ';\n\t\tprint $formcompany->select_ziptown((GETPOSTISSET(\"town\") ? GETPOST(\"town\") : $object->town), 'town', array('zipcode', 'selectcountry_id', 'state_id'));\n\t\tprint '</tr>';\n\n\t\t// Country\n\t\tprint '<tr><td class=\"titlefieldcreate\">'.$langs->trans('Country').'</td><td>';\n\t\tprint $form->select_country((!empty($object->country_id) ? $object->country_id : $mysoc->country_code), 'country_id');\n\t\tif ($user->admin) {\n\t\t\tprint info_admin($langs->trans(\"YouCanChangeValuesForThisListFromDictionarySetup\"), 1);\n\t\t}\n\t\tprint '</td></tr>';\n\n\t\tprint \"<tr>\".'<td>'.$langs->trans(\"EMail\").'</td><td><input type=\"text\" name=\"email\" class=\"maxwidth200\" value=\"'.dol_escape_htmltag($object->email).'\"></td></tr>';\n\t}\n\t// Payment mode\n\tprint \"<tr><td>\".$langs->trans(\"PaymentMode\").\"</td><td>\\n\";\n\tif ($object->mode_reglement_id) {\n\t\t$selected = $object->mode_reglement_id;\n\t} else {\n\t\t$selected = '';\n\t}\n\t$form->select_types_paiements($selected, 'modepayment', 'CRDT', 0, 1);\n\tprint \"</td></tr>\\n\";\n\n\t// Status\n\tprint \"<tr>\".'<td>'.$langs->trans(\"Status\").'</td><td>'.$object->getLibStatut(4).'</td></tr>';\n\n\t// Project\n\tif (!empty($conf->projet->enabled)) {\n\t\t$formproject = new FormProjets($db);\n\n\t\t$langs->load('projects');\n\t\tprint '<tr><td>'.$langs->trans('Project').'</td><td>';\n\t\t$formproject->select_projects(-1, $object->fk_project, 'fk_project', 0, 0, 1, 1, 0, 0, 0, '', 0, 0, 'maxwidth500');\n\t\tprint '</td></tr>';\n\t}\n\n\t// Other attributes\n\t$parameters = array();\n\t$reshook = $hookmanager->executeHooks('formObjectOptions', $parameters, $object, $action); // Note that $action and $object may have been modified by hook\n\tprint $hookmanager->resPrint;\n\tif (empty($reshook)) {\n\t\tprint $object->showOptionals($extrafields, 'edit', $parameters);\n\t}\n\n\tprint \"</table>\\n\";\n\n\tprint dol_get_fiche_end();\n\n\tprint $form->buttonsSaveCancel();\n\n\tprint \"</form>\\n\";\n}\n\n\n\n/* ************************************************************ */\n/*                                                              */\n/* Donation card in view mode                                   */\n/*                                                              */\n/* ************************************************************ */\nif (!empty($id) && $action != 'edit') {\n\t// Confirmation delete\n\tif ($action == 'delete') {\n\t\t$text = $langs->trans(\"ConfirmDeleteADonation\");\n\t\tprint $form->formconfirm($_SERVER[\"PHP_SELF\"].\"?id=\".$object->id, $langs->trans(\"DeleteADonation\"), $text, \"confirm_delete\", '', '', 1);\n\t}\n\n\t$result = $object->fetch($id);\n\tif ($result < 0) {\n\t\tdol_print_error($db, $object->error); exit;\n\t}\n\t$result = $object->fetch_optionals();\n\tif ($result < 0) {\n\t\tdol_print_error($db); exit;\n\t}\n\n\t$hselected = 'card';\n\n\t$head = donation_prepare_head($object);\n\tprint dol_get_fiche_head($head, $hselected, $langs->trans(\"Donation\"), -1, 'donation');\n\n\t// Print form confirm\n\tprint $formconfirm;\n\n\t$linkback = '<a href=\"'.DOL_URL_ROOT.'/don/list.php'.(!empty($socid) ? '?socid='.$socid : '').'\">'.$langs->trans(\"BackToList\").'</a>';\n\n\t$morehtmlref = '<div class=\"refidno\">';\n\t// Project\n\tif (!empty($conf->projet->enabled)) {\n\t\t$langs->load(\"projects\");\n\t\t$morehtmlref .= $langs->trans('Project').' ';\n\t\tif ($user->rights->don->creer) {\n\t\t\tif ($action != 'classify') {\n\t\t\t\t$morehtmlref .= '<a class=\"editfielda\" href=\"'.$_SERVER['PHP_SELF'].'?action=classify&token='.newToken().'&id='.$object->id.'\">'.img_edit($langs->transnoentitiesnoconv('SetProject')).'</a> : ';\n\t\t\t}\n\t\t\tif ($action == 'classify') {\n\t\t\t\t//$morehtmlref.=$form->form_project($_SERVER['PHP_SELF'] . '?id=' . $object->id, $object->socid, $object->fk_project, 'projectid', 0, 0, 1, 1);\n\t\t\t\t$morehtmlref .= '<form method=\"post\" action=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'\">';\n\t\t\t\t$morehtmlref .= '<input type=\"hidden\" name=\"action\" value=\"classin\">';\n\t\t\t\t$morehtmlref .= '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\n\t\t\t\t$morehtmlref .= $formproject->select_projects($object->socid, $object->fk_project, 'projectid', 0, 0, 1, 0, 1, 0, 0, '', 1, 0, 'maxwidth500');\n\t\t\t\t$morehtmlref .= '<input type=\"submit\" class=\"button valignmiddle\" value=\"'.$langs->trans(\"Modify\").'\">';\n\t\t\t\t$morehtmlref .= '</form>';\n\t\t\t} else {\n\t\t\t\t$morehtmlref .= $form->form_project($_SERVER['PHP_SELF'].'?id='.$object->id, $object->socid, $object->fk_project, 'none', 0, 0, 0, 1);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!empty($object->fk_project)) {\n\t\t\t\t$proj = new Project($db);\n\t\t\t\t$proj->fetch($object->fk_project);\n\t\t\t\t$morehtmlref .= ' : '.$proj->getNomUrl(1);\n\t\t\t\tif ($proj->title) {\n\t\t\t\t\t$morehtmlref .= ' - '.$proj->title;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$morehtmlref .= '';\n\t\t\t}\n\t\t}\n\t}\n\t$morehtmlref .= '</div>';\n\n\n\tdol_banner_tab($object, 'rowid', $linkback, 1, 'rowid', 'ref', $morehtmlref);\n\n\n\tprint '<div class=\"fichecenter\">';\n\tprint '<div class=\"fichehalfleft\">';\n\tprint '<div class=\"underbanner clearboth\"></div>';\n\n\tprint '<table class=\"border tableforfield\" width=\"100%\">';\n\n\t// Date\n\tprint '<tr><td class=\"titlefield\">'.$langs->trans(\"Date\").'</td><td colspan=\"2\">';\n\tprint dol_print_date($object->date, \"day\");\n\tprint \"</td>\";\n\n\tprint '<tr><td>'.$langs->trans(\"Amount\").'</td><td colspan=\"2\">';\n\tprint price($object->amount, 0, $langs, 0, 0, -1, $conf->currency);\n\tprint '</td></tr>';\n\n\tprint '<tr><td>'.$langs->trans(\"PublicDonation\").'</td><td colspan=\"2\">';\n\tprint yn($object->public);\n\tprint '</td></tr>';\n\n\tif (!empty($conf->societe->enabled) && !empty($conf->global->DONATION_USE_THIRDPARTIES)) {\n\t\t$company = new Societe($db);\n\n\t\tprint '<tr><td>'.$langs->trans(\"ThirdParty\").'</td><td colspan=\"2\">';\n\t\tif ($object->socid > 0) {\n\t\t\t$result = $company->fetch($object->socid);\n\t\t\tprint $company->getNomUrl(1);\n\t\t}\n\t\tprint '</td></tr>';\n\t} else {\n\t\tprint '<tr><td>'.$langs->trans(\"Company\").'</td><td colspan=\"2\">'.$object->societe.'</td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Lastname\").'</td><td colspan=\"2\">'.$object->lastname.'</td></tr>';\n\t\tprint '<tr><td>'.$langs->trans(\"Firstname\").'</td><td colspan=\"2\">'.$object->firstname.'</td></tr>';\n\t}\n\n\t// Payment mode\n\tprint \"<tr><td>\".$langs->trans(\"PaymentMode\").\"</td><td>\";\n\t$form->form_modes_reglement(null, $object->mode_reglement_id, 'none');\n\tprint \"</td></tr>\\n\";\n\n\t// Other attributes\n\t$cols = 2;\n\tinclude DOL_DOCUMENT_ROOT.'/core/tpl/extrafields_view.tpl.php';\n\n\tprint '</table>';\n\n\tprint '</div>';\n\tprint '<div class=\"fichehalfright\">';\n\n\t/*\n\t * Payments\n\t */\n\t$sql = \"SELECT p.rowid, p.num_payment, p.datep as dp, p.amount,\";\n\t$sql .= \"c.code as type_code,c.libelle as paiement_type\";\n\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"payment_donation as p\";\n\t$sql .= \", \".MAIN_DB_PREFIX.\"c_paiement as c \";\n\t$sql .= \", \".MAIN_DB_PREFIX.\"don as d\";\n\t$sql .= \" WHERE d.rowid = \".((int) $id);\n\t$sql .= \" AND p.fk_donation = d.rowid\";\n\t$sql .= \" AND d.entity IN (\".getEntity('donation').\")\";\n\t$sql .= \" AND p.fk_typepayment = c.id\";\n\t$sql .= \" ORDER BY dp\";\n\n\t//print $sql;\n\t$resql = $db->query($sql);\n\tif ($resql) {\n\t\t$num = $db->num_rows($resql);\n\t\t$i = 0; $total = 0;\n\t\tprint '<table class=\"noborder paymenttable centpercent\">';\n\t\tprint '<tr class=\"liste_titre\">';\n\t\tprint '<td>'.$langs->trans(\"RefPayment\").'</td>';\n\t\tprint '<td>'.$langs->trans(\"Date\").'</td>';\n\t\tprint '<td>'.$langs->trans(\"Type\").'</td>';\n\t\tprint '<td class=\"right\">'.$langs->trans(\"Amount\").'</td>';\n\t\tprint '</tr>';\n\n\t\twhile ($i < $num) {\n\t\t\t$objp = $db->fetch_object($resql);\n\n\t\t\tprint '<tr class=\"oddeven\"><td>';\n\t\t\tprint '<a href=\"'.DOL_URL_ROOT.'/don/payment/card.php?id='.$objp->rowid.'\">'.img_object($langs->trans(\"Payment\"), \"payment\").' '.$objp->rowid.'</a></td>';\n\t\t\tprint '<td>'.dol_print_date($db->jdate($objp->dp), 'day').\"</td>\\n\";\n\t\t\t$labeltype = $langs->trans(\"PaymentType\".$objp->type_code) != (\"PaymentType\".$objp->type_code) ? $langs->trans(\"PaymentType\".$objp->type_code) : $objp->paiement_type;\n\t\t\tprint \"<td>\".$labeltype.' '.$objp->num_payment.\"</td>\\n\";\n\t\t\tprint '<td class=\"right\">'.price($objp->amount).\"</td>\\n\";\n\t\t\tprint \"</tr>\";\n\t\t\t$totalpaid += $objp->amount;\n\t\t\t$i++;\n\t\t}\n\n\t\tif ($object->paid == 0) {\n\t\t\tprint \"<tr><td colspan=\\\"3\\\" class=\\\"right\\\">\".$langs->trans(\"AlreadyPaid\").\" :</td><td class=\\\"right\\\">\".price($totalpaid).\"</td></tr>\\n\";\n\t\t\tprint \"<tr><td colspan=\\\"3\\\" class=\\\"right\\\">\".$langs->trans(\"AmountExpected\").\" :</td><td class=\\\"right\\\">\".price($object->amount).\"</td></tr>\\n\";\n\n\t\t\t$remaintopay = $object->amount - $totalpaid;\n\n\t\t\tprint \"<tr><td colspan=\\\"3\\\" class=\\\"right\\\">\".$langs->trans(\"RemainderToPay\").\" :</td>\";\n\t\t\tprint '<td class=\"right'.($resteapayeraffiche ? ' amountremaintopay' : '').'\">'.price($remaintopay).\"</td></tr>\\n\";\n\t\t}\n\t\tprint \"</table>\";\n\t\t$db->free($resql);\n\t} else {\n\t\tdol_print_error($db);\n\t}\n\n\tprint '</div>';\n\tprint '</div>';\n\n\tprint '<div class=\"clearboth\"></div>';\n\n\tprint dol_get_fiche_end();\n\n\t$remaintopay = $object->amount - $totalpaid;\n\n\t// Actions buttons\n\n\tprint '<div class=\"tabsAction\">';\n\n\t// Re-open\n\tif ($permissiontoadd && $object->statut == $object::STATUS_CANCELED) {\n\t\tprint '<a class=\"butAction\" href=\"'.$_SERVER['PHP_SELF'].'?id='.$object->id.'&action=confirm_reopen&confirm=yes&token='.newToken().'\">'.$langs->trans(\"ReOpen\").'</a>';\n\t}\n\n\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?action=edit&token='.newToken().'&rowid='.$object->id.'\">'.$langs->trans('Modify').'</a></div>';\n\n\tif ($object->statut == $object::STATUS_DRAFT) {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?rowid='.$object->id.'&action=valid_promesse&token='.newToken().'\">'.$langs->trans(\"ValidPromess\").'</a></div>';\n\t}\n\n\tif (($object->statut == $object::STATUS_DRAFT || $object->statut == $object::STATUS_VALIDATED) && $totalpaid == 0 && $object->paid == 0) {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?rowid='.$object->id.'&action=set_cancel&token='.newToken().'\">'.$langs->trans(\"ClassifyCanceled\").\"</a></div>\";\n\t}\n\n\t// Create payment\n\tif ($object->statut == $object::STATUS_VALIDATED && $object->paid == 0 && $user->rights->don->creer) {\n\t\tif ($remaintopay == 0) {\n\t\t\tprint '<div class=\"inline-block divButAction\"><span class=\"butActionRefused classfortooltip\" title=\"'.$langs->trans(\"DisabledBecauseRemainderToPayIsZero\").'\">'.$langs->trans('DoPayment').'</span></div>';\n\t\t} else {\n\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.DOL_URL_ROOT.'/don/payment/payment.php?rowid='.$object->id.'&action=create&token='.newToken().'\">'.$langs->trans('DoPayment').'</a></div>';\n\t\t}\n\t}\n\n\t// Classify 'paid'\n\tif ($object->statut == $object::STATUS_VALIDATED && round($remaintopay) == 0 && $object->paid == 0 && $user->rights->don->creer) {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butAction\" href=\"'.$_SERVER[\"PHP_SELF\"].'?rowid='.$object->id.'&action=set_paid&token='.newToken().'\">'.$langs->trans(\"ClassifyPaid\").\"</a></div>\";\n\t}\n\n\t// Delete\n\tif ($user->rights->don->supprimer) {\n\t\tif ($object->statut == $object::STATUS_CANCELED || $object->statut == $object::STATUS_DRAFT) {\n\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionDelete\" href=\"card.php?rowid='.$object->id.'&action=delete&token='.newToken().'\">'.$langs->trans(\"Delete\").\"</a></div>\";\n\t\t} else {\n\t\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\">'.$langs->trans(\"Delete\").\"</a></div>\";\n\t\t}\n\t} else {\n\t\tprint '<div class=\"inline-block divButAction\"><a class=\"butActionRefused classfortooltip\" href=\"#\">'.$langs->trans(\"Delete\").\"</a></div>\";\n\t}\n\n\tprint \"</div>\";\n\n\n\tprint '<div class=\"fichecenter\"><div class=\"fichehalfleft\">';\n\n\t/*\n\t * Generated documents\n\t */\n\t$filename = dol_sanitizeFileName($object->id);\n\t$filedir = $conf->don->dir_output.\"/\".dol_sanitizeFileName($object->id);\n\t$urlsource = $_SERVER['PHP_SELF'].'?rowid='.$object->id;\n\t$genallowed\t= (($object->paid == 0 || $user->admin) && $user->rights->don->lire);\n\t$delallowed\t= $user->rights->don->creer;\n\n\tprint $formfile->showdocuments('donation', $filename, $filedir, $urlsource, $genallowed, $delallowed, $object->model_pdf);\n\n\t// Show links to link elements\n\t$linktoelem = $form->showLinkToObjectBlock($object, null, array('don'));\n\t$somethingshown = $form->showLinkedObjectBlock($object, $linktoelem);\n\n\t// Show online payment link\n\t$useonlinepayment = (!empty($conf->paypal->enabled) || !empty($conf->stripe->enabled) || !empty($conf->paybox->enabled));\n\n\tif ($useonlinepayment) { //$object->statut != Facture::STATUS_DRAFT &&\n\t\tprint '<br><!-- Link to pay -->'.\"\\n\";\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/payments.lib.php';\n\t\tprint showOnlinePaymentUrl('donation', $object->ref).'<br>';\n\t}\n\n\tprint '</div><div class=\"fichehalfright\">';\n\n\tprint '</div></div>';\n}\n\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2002      Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2008 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2009      Regis Houssin        <regis.houssin@inodbox.com>\n * Copyright (C) 2014      Florian Henry        <florian.henry@open-concept.pro>\n * Copyright (C) 2015-2017 Alexandre Spangaro   <aspangaro@open-dsi.fr>\n * Copyright (C) 2016      Juanjo Menent        <jmenent@2byte.es>\n * Copyright (C) 2019      Thibault FOUCART     <support@ptibogxiv.net>\n * Copyright (C) 2019-2020 Fr\u00e9d\u00e9ric France      <frederic.france@netlogic.fr>\n * Copyright (C) 2021      Maxime DEMAREST      <maxime@indelog.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *   \t\\file       htdocs/don/class/don.class.php\n *\t\t\\ingroup    Donation\n *\t\t\\brief      File of class to manage donations\n */\n\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/commonobject.class.php';\n\n\n/**\n *\t\tClass to manage donations\n */\nclass Don extends CommonObject\n{\n\t/**\n\t * @var string ID to identify managed object\n\t */\n\tpublic $element = 'don';\n\n\t/**\n\t * @var string Name of table without prefix where object is stored\n\t */\n\tpublic $table_element = 'don';\n\n\t/**\n\t * @var string Field with ID of parent key if this field has a parent\n\t */\n\tpublic $fk_element = 'fk_donation';\n\n\t/**\n\t * 0=No test on entity, 1=Test with field entity, 2=Test with link by societe\n\t * @var int\n\t */\n\tpublic $ismultientitymanaged = 1;\n\n\t/**\n\t * @var string String with name of icon for object don. Must be the part after the 'object_' into object_myobject.png\n\t */\n\tpublic $picto = 'donation';\n\n\t/**\n\t * @var string Date of the donation\n\t */\n\tpublic $date;\n\n\t/**\n\t * amount of donation\n\t * @var double\n\t */\n\tpublic $amount;\n\n\t/**\n\t * @var string Thirdparty name\n\t */\n\tpublic $societe;\n\n\t/**\n\t * @var string Address\n\t */\n\tpublic $address;\n\n\t/**\n\t * @var string Zipcode\n\t */\n\tpublic $zip;\n\n\t/**\n\t * @var string Town\n\t */\n\tpublic $town;\n\n\t/**\n\t * @var string Email\n\t */\n\tpublic $email;\n\n\t/**\n\t * @var int 0 or 1\n\t */\n\tpublic $public;\n\n\t/**\n\t * @var int project ID\n\t */\n\tpublic $fk_project;\n\n\t/**\n\t * @var int type payment ID\n\t */\n\tpublic $fk_typepayment;\n\n\tpublic $num_payment;\n\tpublic $date_valid;\n\n\t/**\n\t * @var int payment mode id\n\t */\n\tpublic $modepaymentid = 0;\n\n\t/**\n\t * @var array Array of status label\n\t */\n\tpublic $labelStatus;\n\n\t/**\n\t * @var array Array of status label short\n\t */\n\tpublic $labelStatusShort;\n\n\n\tconst STATUS_DRAFT = 0;\n\tconst STATUS_VALIDATED = 1;\n\tconst STATUS_PAID = 2;\n\tconst STATUS_CANCELED = -1;\n\n\n\t/**\n\t *  Constructor\n\t *\n\t *  @param\tDoliDB\t$db \tDatabase handler\n\t */\n\tpublic function __construct($db)\n\t{\n\t\t $this->db = $db;\n\t}\n\n\n\t/**\n\t * \tReturns the donation status label (draft, valid, abandoned, paid)\n\t *\n\t *  @param  int\t\t$mode          \t0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return string        \t\t\tLabel of status\n\t */\n\tpublic function getLibStatut($mode = 0)\n\t{\n\t\treturn $this->LibStatut($this->statut, $mode);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Return the label of a given status\n\t *\n\t *  @param\tint\t\t$status        Id statut\n\t *  @param  int\t\t$mode          0=long label, 1=short label, 2=Picto + short label, 3=Picto, 4=Picto + long label, 5=Short label + Picto, 6=Long label + Picto\n\t *  @return string \t\t\t       Label of status\n\t */\n\tpublic function LibStatut($status, $mode = 0)\n\t{\n\t\t// phpcs:enable\n\t\tif (empty($this->labelStatus) || empty($this->labelStatusShort)) {\n\t\t\tglobal $langs;\n\t\t\t$langs->load(\"donations\");\n\t\t\t$this->labelStatus[-1] = $langs->transnoentitiesnoconv(\"Canceled\");\n\t\t\t$this->labelStatus[0] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseNotValidated\");\n\t\t\t$this->labelStatus[1] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseValidated\");\n\t\t\t$this->labelStatus[2] = $langs->transnoentitiesnoconv(\"DonationStatusPaid\");\n\t\t\t$this->labelStatusShort[-1] = $langs->transnoentitiesnoconv(\"Canceled\");\n\t\t\t$this->labelStatusShort[0] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseNotValidatedShort\");\n\t\t\t$this->labelStatusShort[1] = $langs->transnoentitiesnoconv(\"DonationStatusPromiseValidatedShort\");\n\t\t\t$this->labelStatusShort[2] = $langs->transnoentitiesnoconv(\"DonationStatusPaidShort\");\n\t\t}\n\n\t\t$statusType = 'status'.$status;\n\t\tif ($status == self::STATUS_CANCELED) {\n\t\t\t$statusType = 'status9';\n\t\t}\n\t\tif ($status == self::STATUS_PAID) {\n\t\t\t$statusType = 'status6';\n\t\t}\n\n\t\treturn dolGetStatus($this->labelStatus[$status], $this->labelStatusShort[$status], '', $statusType, $mode);\n\t}\n\n\n\t/**\n\t *  Initialise an instance with random values.\n\t *  Used to build previews or test instances.\n\t *\tid must be 0 if object instance is a specimen.\n\t *\n\t *  @return\tvoid\n\t */\n\tpublic function initAsSpecimen()\n\t{\n\t\tglobal $conf, $user, $langs;\n\n\t\t$now = dol_now();\n\n\t\t// Charge tableau des id de societe socids\n\t\t$socids = array();\n\n\t\t$sql = \"SELECT rowid\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"societe\";\n\t\t$sql .= \" WHERE client IN (1, 3)\";\n\t\t$sql .= \" AND entity = \".$conf->entity;\n\t\t$sql .= \" LIMIT 10\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$num_socs = $this->db->num_rows($resql);\n\t\t\t$i = 0;\n\t\t\twhile ($i < $num_socs) {\n\t\t\t\t$i++;\n\n\t\t\t\t$row = $this->db->fetch_row($resql);\n\t\t\t\t$socids[$i] = $row[0];\n\t\t\t}\n\t\t}\n\n\t\t// Initialise parametres\n\t\t$this->id = 0;\n\t\t$this->ref = 'SPECIMEN';\n\t\t$this->specimen = 1;\n\t\t$this->lastname = 'Doe';\n\t\t$this->firstname = 'John';\n\t\t$this->socid = 1;\n\t\t$this->date = $now;\n\t\t$this->date_valid = $now;\n\t\t$this->amount = 100.90;\n\t\t$this->public = 1;\n\t\t$this->societe = 'The Company';\n\t\t$this->address = 'Twist road';\n\t\t$this->zip = '99999';\n\t\t$this->town = 'Town';\n\t\t$this->note_private = 'Private note';\n\t\t$this->note_public = 'Public note';\n\t\t$this->email = 'email@email.com';\n\t\t$this->phone = '0123456789';\n\t\t$this->phone_mobile = '0606060606';\n\t\t$this->statut = 1;\n\t}\n\n\n\t/**\n\t *\tCheck params and init ->errors array.\n\t *  TODO This function seems to not be used by core code.\n\t *\n\t *\t@param\tint\t$minimum\tMinimum\n\t *\t@return\tint\t\t\t\t0 if KO, >0 if OK\n\t */\n\tpublic function check($minimum = 0)\n\t{\n\t\tglobal $langs;\n\t\t$langs->load('main');\n\t\t$langs->load('companies');\n\n\t\t$error_string = array();\n\t\t$err = 0;\n\n\t\tif (dol_strlen(trim($this->societe)) == 0) {\n\t\t\tif ((dol_strlen(trim($this->lastname)) + dol_strlen(trim($this->firstname))) == 0) {\n\t\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Company').'/'.$langs->transnoentitiesnoconv('Firstname').'-'.$langs->transnoentitiesnoconv('Lastname'));\n\t\t\t\t$err++;\n\t\t\t}\n\t\t}\n\n\t\tif (dol_strlen(trim($this->address)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Address'));\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->zip)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Zip'));\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->town)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Town'));\n\t\t\t$err++;\n\t\t}\n\n\t\tif (dol_strlen(trim($this->email)) == 0) {\n\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('EMail'));\n\t\t\t$err++;\n\t\t}\n\n\t\t$this->amount = trim($this->amount);\n\n\t\t$map = range(0, 9);\n\t\t$len = dol_strlen($this->amount);\n\t\tfor ($i = 0; $i < $len; $i++) {\n\t\t\tif (!isset($map[substr($this->amount, $i, 1)])) {\n\t\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Amount'));\n\t\t\t\t$err++;\n\t\t\t\t$amount_invalid = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!$amount_invalid) {\n\t\t\tif ($this->amount == 0) {\n\t\t\t\t$error_string[] = $langs->trans('ErrorFieldRequired', $langs->transnoentitiesnoconv('Amount'));\n\t\t\t\t$err++;\n\t\t\t} else {\n\t\t\t\tif ($this->amount < $minimum && $minimum > 0) {\n\t\t\t\t\t$error_string[] = $langs->trans('MinimumAmount', $langs->transnoentitiesnoconv('$minimum'));\n\t\t\t\t\t$err++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($err) {\n\t\t\t$this->errors = $error_string;\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\t/**\n\t * Create donation record into database\n\t *\n\t * @param\tUser\t$user\t\tUser who created the donation\n\t * @param\tint\t\t$notrigger\tDisable triggers\n\t * @return  int  \t\t        <0 if KO, id of created donation if OK\n\t * TODO    add numbering module for Ref\n\t */\n\tpublic function create($user, $notrigger = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$error = 0;\n\t\t$ret = 0;\n\t\t$now = dol_now();\n\n\t\t// Clean parameters\n\t\t$this->address = ($this->address > 0 ? $this->address : $this->address);\n\t\t$this->zip = ($this->zip > 0 ? $this->zip : $this->zip);\n\t\t$this->town = ($this->town > 0 ? $this->town : $this->town);\n\t\t$this->country_id = ($this->country_id > 0 ? $this->country_id : $this->country_id);\n\t\t$this->country = ($this->country ? $this->country : $this->country);\n\t\t$this->amount = price2num($this->amount);\n\n\t\t// Check parameters\n\t\tif ($this->amount < 0) {\n\t\t\t$this->error = $langs->trans('FieldCannotBeNegative', $langs->transnoentitiesnoconv(\"Amount\"));\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"INSERT INTO \".MAIN_DB_PREFIX.\"don (\";\n\t\t$sql .= \"datec\";\n\t\t$sql .= \", entity\";\n\t\t$sql .= \", amount\";\n\t\t$sql .= \", fk_payment\";\n\t\t$sql .= \", fk_soc\";\n\t\t$sql .= \", firstname\";\n\t\t$sql .= \", lastname\";\n\t\t$sql .= \", societe\";\n\t\t$sql .= \", address\";\n\t\t$sql .= \", zip\";\n\t\t$sql .= \", town\";\n\t\t$sql .= \", fk_country\";\n\t\t$sql .= \", public\";\n\t\t$sql .= \", fk_projet\";\n\t\t$sql .= \", note_private\";\n\t\t$sql .= \", note_public\";\n\t\t$sql .= \", fk_user_author\";\n\t\t$sql .= \", fk_user_valid\";\n\t\t$sql .= \", datedon\";\n\t\t$sql .= \", email\";\n\t\t$sql .= \", phone\";\n\t\t$sql .= \", phone_mobile\";\n\t\t$sql .= \") VALUES (\";\n\t\t$sql .= \"'\".$this->db->idate($this->date ? $this->date : $now).\"'\";\n\t\t$sql .= \", \".((int) $conf->entity);\n\t\t$sql .= \", \".((float) $this->amount);\n\t\t$sql .= \", \".($this->modepaymentid ? $this->modepaymentid : \"null\");\n\t\t$sql .= \", \".($this->socid > 0 ? $this->socid : \"null\");\n\t\t$sql .= \", '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->societe).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->address).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->zip).\"'\";\n\t\t$sql .= \", '\".$this->db->escape($this->town).\"'\";\n\t\t$sql .= \", \".(int) ($this->country_id > 0 ? $this->country_id : 0);\n\t\t$sql .= \", \".(int) $this->public;\n\t\t$sql .= \", \".($this->fk_project > 0 ? (int) $this->fk_project : \"null\");\n\t\t$sql .= \", \".(!empty($this->note_private) ? (\"'\".$this->db->escape($this->note_private).\"'\") : \"NULL\");\n\t\t$sql .= \", \".(!empty($this->note_public) ? (\"'\".$this->db->escape($this->note_public).\"'\") : \"NULL\");\n\t\t$sql .= \", \".((int) $user->id);\n\t\t$sql .= \", null\";\n\t\t$sql .= \", '\".$this->db->idate($this->date).\"'\";\n\t\t$sql .= \", '\".$this->db->escape(trim($this->email)).\"'\";\n\t\t$sql .= \", '\".$this->db->escape(trim($this->phone)).\"'\";\n\t\t$sql .= \", '\".$this->db->escape(trim($this->phone_mobile)).\"'\";\n\t\t$sql .= \")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$this->id = $this->db->last_insert_id(MAIN_DB_PREFIX.\"don\");\n\t\t\t$ret = $this->id;\n\n\t\t\tif (!$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('DON_CREATE', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->errno = $this->db->lasterrno();\n\t\t\t$error++;\n\t\t}\n\n\t\t// Update extrafield\n\t\tif (!$error) {\n\t\t\t$result = $this->insertExtraFields();\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!$error && !empty($conf->global->MAIN_DISABLEDRAFTSTATUS)) {\n\t\t\t//$res = $this->setValid($user);\n\t\t\t//if ($res < 0) $error++;\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$this->db->commit();\n\t\t\treturn $ret;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *  Update a donation record\n\t *\n\t *  @param \t\tUser\t$user   Objet utilisateur qui met a jour le don\n\t *  @param      int\t\t$notrigger\tDisable triggers\n\t *  @return     int      \t\t>0 if OK, <0 if KO\n\t */\n\tpublic function update($user, $notrigger = 0)\n\t{\n\t\tglobal $langs, $conf;\n\n\t\t$error = 0;\n\n\t\t// Clean parameters\n\t\t$this->address = ($this->address > 0 ? $this->address : $this->address);\n\t\t$this->zip = ($this->zip > 0 ? $this->zip : $this->zip);\n\t\t$this->town = ($this->town > 0 ? $this->town : $this->town);\n\t\t$this->country_id = ($this->country_id > 0 ? $this->country_id : $this->country_id);\n\t\t$this->country = ($this->country ? $this->country : $this->country);\n\t\t$this->amount = price2num($this->amount);\n\n\t\t// Check parameters\n\t\tif ($this->amount < 0) {\n\t\t\t$this->error = $langs->trans('FieldCannotBeNegative', $langs->transnoentitiesnoconv(\"Amount\"));\n\t\t\treturn -1;\n\t\t}\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET\";\n\t\t$sql .= \" amount = \".((float) $this->amount);\n\t\t$sql .= \", fk_payment = \".($this->modepaymentid ? $this->modepaymentid : \"null\");\n\t\t$sql .= \", firstname = '\".$this->db->escape($this->firstname).\"'\";\n\t\t$sql .= \", lastname='\".$this->db->escape($this->lastname).\"'\";\n\t\t$sql .= \", societe='\".$this->db->escape($this->societe).\"'\";\n\t\t$sql .= \", address='\".$this->db->escape($this->address).\"'\";\n\t\t$sql .= \", zip='\".$this->db->escape($this->zip).\"'\";\n\t\t$sql .= \", town='\".$this->db->escape($this->town).\"'\";\n\t\t$sql .= \", fk_country = \".($this->country_id > 0 ? ((int) $this->country_id) : '0');\n\t\t$sql .= \", public=\".((int) $this->public);\n\t\t$sql .= \", fk_projet=\".($this->fk_project > 0 ? $this->fk_project : 'null');\n\t\t$sql .= \", note_private=\".(!empty($this->note_private) ? (\"'\".$this->db->escape($this->note_private).\"'\") : \"NULL\");\n\t\t$sql .= \", note_public=\".(!empty($this->note_public) ? (\"'\".$this->db->escape($this->note_public).\"'\") : \"NULL\");\n\t\t$sql .= \", datedon='\".$this->db->idate($this->date).\"'\";\n\t\t$sql .= \", date_valid=\".($this->date_valid ? \"'\".$this->db->idate($this->date).\"'\" : \"null\");\n\t\t$sql .= \", email='\".$this->db->escape(trim($this->email)).\"'\";\n\t\t$sql .= \", phone='\".$this->db->escape(trim($this->phone)).\"'\";\n\t\t$sql .= \", phone_mobile='\".$this->db->escape(trim($this->phone_mobile)).\"'\";\n\t\t$sql .= \", fk_statut=\".((int) $this->statut);\n\t\t$sql .= \" WHERE rowid = \".((int) $this->id);\n\n\t\tdol_syslog(get_class($this).\"::Update\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif (!$notrigger) {\n\t\t\t\t// Call trigger\n\t\t\t\t$result = $this->call_trigger('DON_MODIFY', $user);\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t\t// End call triggers\n\t\t\t}\n\n\t\t\t// Update extrafield\n\t\t\tif (!$error) {\n\t\t\t\t$result = $this->insertExtraFields();\n\t\t\t\tif ($result < 0) {\n\t\t\t\t\t$error++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$error) {\n\t\t\t\t$this->db->commit();\n\t\t\t\t$result = 1;\n\t\t\t} else {\n\t\t\t\t$this->db->rollback();\n\t\t\t\t$result = -1;\n\t\t\t}\n\t\t} else {\n\t\t\t$this->error = $this->db->lasterror();\n\t\t\t$this->errors[] = $this->error;\n\t\t\t$this->db->rollback();\n\t\t\tdol_syslog(get_class($this).\"::Update error -2 \".$this->error, LOG_ERR);\n\t\t\t$result = -2;\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t *    Delete a donation from database\n\t *\n\t *    @param       User\t\t$user            User\n\t *    @param       int\t\t$notrigger       Disable triggers\n\t *    @return      int       \t\t\t      <0 if KO, 0 if not possible, >0 if OK\n\t */\n\tpublic function delete($user, $notrigger = 0)\n\t{\n\t\tglobal $user, $conf, $langs;\n\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\tif (!$error && !$notrigger) {\n\t\t\t// Call trigger\n\t\t\t$result = $this->call_trigger('DON_DELETE', $user);\n\n\t\t\tif ($result < 0) {\n\t\t\t\t$error++;\n\t\t\t}\n\t\t\t// End call triggers\n\t\t}\n\n\t\t// Delete donation\n\t\tif (!$error) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"don_extrafields\";\n\t\t\t$sql .= \" WHERE fk_object = \".((int) $this->id);\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (!$resql) {\n\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$sql = \"DELETE FROM \".MAIN_DB_PREFIX.\"don\";\n\t\t\t$sql .= \" WHERE rowid=\".((int) $this->id);\n\n\t\t\t$resql = $this->db->query($sql);\n\t\t\tif (!$resql) {\n\t\t\t\t$this->errors[] = $this->db->lasterror();\n\t\t\t\t$error++;\n\t\t\t}\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tforeach ($this->errors as $errmsg) {\n\t\t\t\tdol_syslog(get_class($this).\"::delete \".$errmsg, LOG_ERR);\n\t\t\t\t$this->error .= ($this->error ? ', '.$errmsg : $errmsg);\n\t\t\t}\n\t\t\tdol_syslog(get_class($this).\"::delete \".$this->error, LOG_ERR);\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *      Load donation from database\n\t *\n\t *      @param      int\t\t$id      Id of donation to load\n\t *      @param      string\t$ref        Ref of donation to load\n\t *      @return     int      \t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function fetch($id, $ref = '')\n\t{\n\t\tglobal $conf;\n\n\t\t$sql = \"SELECT d.rowid, d.datec, d.date_valid, d.tms as datem, d.datedon,\";\n\t\t$sql .= \" d.fk_soc as socid,d.firstname, d.lastname, d.societe, d.amount, d.fk_statut, d.address, d.zip, d.town, \";\n\t\t$sql .= \" d.fk_country, d.country as country_olddata, d.public, d.amount, d.fk_payment, d.paid, d.note_private, d.note_public, d.email, d.phone, \";\n\t\t$sql .= \" d.phone_mobile, d.fk_projet as fk_project, d.model_pdf,\";\n\t\t$sql .= \" p.ref as project_ref,\";\n\t\t$sql .= \" cp.libelle as payment_label, cp.code as payment_code,\";\n\t\t$sql .= \" c.code as country_code, c.label as country\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"don as d\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"projet as p ON p.rowid = d.fk_projet\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_paiement as cp ON cp.id = d.fk_payment\";\n\t\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"c_country as c ON d.fk_country = c.rowid\";\n\t\t$sql .= \" WHERE d.entity IN (\".getEntity('donation').\")\";\n\t\tif (!empty($id)) {\n\t\t\t$sql .= \" AND d.rowid=\".((int) $id);\n\t\t} elseif (!empty($ref)) {\n\t\t\t$sql .= \" AND d.ref='\".$this->db->escape($ref).\"'\";\n\t\t}\n\n\t\tdol_syslog(get_class($this).\"::fetch\", LOG_DEBUG);\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->num_rows($resql)) {\n\t\t\t\t$obj = $this->db->fetch_object($resql);\n\n\t\t\t\t$this->id                 = $obj->rowid;\n\t\t\t\t$this->ref                = $obj->rowid;\n\t\t\t\t$this->date_creation      = $this->db->jdate($obj->datec);\n\t\t\t\t$this->datec              = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_validation    = $this->db->jdate($obj->date_valid);\n\t\t\t\t$this->date_valid = $this->db->jdate($obj->date_valid);\n\t\t\t\t$this->date_modification  = $this->db->jdate($obj->datem);\n\t\t\t\t$this->datem              = $this->db->jdate($obj->datem);\n\t\t\t\t$this->date               = $this->db->jdate($obj->datedon);\n\t\t\t\t$this->socid              = $obj->socid;\n\t\t\t\t$this->firstname          = $obj->firstname;\n\t\t\t\t$this->lastname           = $obj->lastname;\n\t\t\t\t$this->societe            = $obj->societe;\n\t\t\t\t$this->statut             = $obj->fk_statut;\n\t\t\t\t$this->address            = $obj->address;\n\t\t\t\t$this->zip                = $obj->zip;\n\t\t\t\t$this->town               = $obj->town;\n\t\t\t\t$this->country_id         = $obj->fk_country;\n\t\t\t\t$this->country_code       = $obj->country_code;\n\t\t\t\t$this->country            = $obj->country;\n\t\t\t\t$this->country_olddata    = $obj->country_olddata; // deprecated\n\t\t\t\t$this->email              = $obj->email;\n\t\t\t\t$this->phone              = $obj->phone;\n\t\t\t\t$this->phone_mobile       = $obj->phone_mobile;\n\t\t\t\t$this->project            = $obj->project_ref;\n\t\t\t\t$this->fk_projet          = $obj->fk_project; // deprecated\n\t\t\t\t$this->fk_project         = $obj->fk_project;\n\t\t\t\t$this->public             = $obj->public;\n\t\t\t\t$this->mode_reglement_id  = $obj->fk_payment;\n\t\t\t\t$this->mode_reglement_code = $obj->payment_code;\n\t\t\t\t$this->mode_reglement     = $obj->payment_label;\n\t\t\t\t$this->paid = $obj->paid;\n\t\t\t\t$this->amount             = $obj->amount;\n\t\t\t\t$this->note_private\t      = $obj->note_private;\n\t\t\t\t$this->note_public = $obj->note_public;\n\t\t\t\t$this->model_pdf          = $obj->model_pdf;\n\t\t\t\t$this->modelpdf           = $obj->model_pdf; // deprecated\n\n\t\t\t\t// Retrieve all extrafield\n\t\t\t\t// fetch optionals attributes and labels\n\t\t\t\t$this->fetch_optionals();\n\t\t\t}\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tValidate a intervention\n\t *\n\t *\t@param\t\tUser\t\t$user\t\tUser that validate\n\t *  @param\t\tint\t\t\t$notrigger\t1=Does not execute triggers, 0= execute triggers\n\t *\t@return\t\tint\t\t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function setValid($user, $notrigger = 0)\n\t{\n\t\treturn $this->valid_promesse($this->id, $user->id, $notrigger);\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Validate a promise of donation\n\t *\n\t *    @param\tint\t\t$id   \t\tid of donation\n\t *    @param  \tint\t\t$userid  \tUser who validate the donation/promise\n\t *    @param\tint\t\t$notrigger\tDisable triggers\n\t *    @return   int     \t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function valid_promesse($id, $userid, $notrigger = 0)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $langs, $user;\n\n\t\t$error = 0;\n\n\t\t$this->db->begin();\n\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET fk_statut = 1, fk_user_valid = \".((int) $userid).\" WHERE rowid = \".((int) $id).\" AND fk_statut = 0\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->affected_rows($resql)) {\n\t\t\t\tif (!$notrigger) {\n\t\t\t\t\t// Call trigger\n\t\t\t\t\t$result = $this->call_trigger('DON_VALIDATE', $user);\n\t\t\t\t\tif ($result < 0) {\n\t\t\t\t\t\t$error++;\n\t\t\t\t\t}\n\t\t\t\t\t// End call triggers\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$error++;\n\t\t\t$this->error = $this->db->lasterror();\n\t\t}\n\n\t\tif (!$error) {\n\t\t\t$this->statut = 1;\n\t\t\t$this->db->commit();\n\t\t\treturn 1;\n\t\t} else {\n\t\t\t$this->db->rollback();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Classify the donation as paid, the donation was received\n\t *\n\t *\t@deprecated\n\t *  @see setPaid()\n\t *  @param\tint\t\t$id           \t    id of donation\n\t *  @param    int\t\t$modepayment   \t    mode of payment\n\t *  @return   int      \t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function set_paid($id, $modepayment = 0)\n\t{\n\t\t// phpcs:enable\n\t\tdol_syslog(get_class($this).\"::set_paid is deprecated, use setPaid instead\", LOG_NOTICE);\n\t\treturn $this->setPaid($id, $modepayment);\n\t}\n\n\t/**\n\t *    Classify the donation as paid, the donation was received\n\t *\n\t *    @param\tint\t\t$id           \t    id of donation\n\t *    @param    int\t\t$modepayment   \t    mode of payment\n\t *    @return   int      \t\t\t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function setPaid($id, $modepayment = 0)\n\t{\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET fk_statut = 2\";\n\t\tif ($modepayment) {\n\t\t\t$sql .= \", fk_payment = \".((int) $modepayment);\n\t\t}\n\t\t$sql .= \" WHERE rowid = \".((int) $id).\" AND fk_statut = 1\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->affected_rows($resql)) {\n\t\t\t\t$this->statut = 2;\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *    Set donation to status cancelled\n\t *\n\t *    @param\tint\t\t$id   \t    id of donation\n\t *    @return   int     \t\t\t<0 if KO, >0 if OK\n\t */\n\tpublic function set_cancel($id)\n\t{\n\t\t// phpcs:enable\n\t\t$sql = \"UPDATE \".MAIN_DB_PREFIX.\"don SET fk_statut = -1 WHERE rowid = \".((int) $id);\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\tif ($this->db->affected_rows($resql)) {\n\t\t\t\t$this->statut = -1;\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tSet cancel status\n\t *\n\t *\t@param\tUser\t$user\t\t\tObject user that modify\n\t *  @param\tint\t\t$notrigger\t\t1=Does not execute triggers, 0=Execute triggers\n\t *\t@return\tint\t\t\t\t\t\t<0 if KO, 0=Nothing done, >0 if OK\n\t */\n\tpublic function reopen($user, $notrigger = 0)\n\t{\n\t\t// Protection\n\t\tif ($this->statut != self::STATUS_CANCELED) {\n\t\t\treturn 0;\n\t\t}\n\n\t\t/*if (! ((empty($conf->global->MAIN_USE_ADVANCED_PERMS) && ! empty($user->rights->bom->write))\n\t\t || (! empty($conf->global->MAIN_USE_ADVANCED_PERMS) && ! empty($user->rights->bom->bom_advance->validate))))\n\t\t {\n\t\t $this->error='Permission denied';\n\t\t return -1;\n\t\t }*/\n\n\t\treturn $this->setStatusCommon($user, self::STATUS_VALIDATED, $notrigger, 'DON_REOPEN');\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *  Sum of donations\n\t *\n\t *\t@param\tstring\t$param\t1=promesses de dons validees , 2=xxx, 3=encaisses\n\t *\t@return\tint\t\t\t\tSumm of donations\n\t */\n\tpublic function sum_donations($param)\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$result = 0;\n\n\t\t$sql = \"SELECT sum(amount) as total\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"don\";\n\t\t$sql .= \" WHERE fk_statut = \".((int) $param);\n\t\t$sql .= \" AND entity = \".$conf->entity;\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\t$obj = $this->db->fetch_object($resql);\n\t\t\t$result = $obj->total;\n\t\t}\n\n\t\treturn $result;\n\t}\n\n\t// phpcs:disable PEAR.NamingConventions.ValidFunctionName.ScopeNotCamelCaps\n\t/**\n\t *\tCharge indicateurs this->nb pour le tableau de bord\n\t *\n\t *\t@return     int         <0 if KO, >0 if OK\n\t */\n\tpublic function load_state_board()\n\t{\n\t\t// phpcs:enable\n\t\tglobal $conf;\n\n\t\t$this->nb = array();\n\n\t\t$sql = \"SELECT count(d.rowid) as nb\";\n\t\t$sql .= \" FROM \".MAIN_DB_PREFIX.\"don as d\";\n\t\t$sql .= \" WHERE d.fk_statut > 0\";\n\t\t$sql .= \" AND d.entity IN (\".getEntity('donation').\")\";\n\n\t\t$resql = $this->db->query($sql);\n\t\tif ($resql) {\n\t\t\twhile ($obj = $this->db->fetch_object($resql)) {\n\t\t\t\t$this->nb[\"donations\"] = $obj->nb;\n\t\t\t}\n\t\t\t$this->db->free($resql);\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t\t$this->error = $this->db->error();\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t *\tReturn clicable name (with picto eventually)\n\t *\n\t *\t@param\tint\t\t$withpicto\t\t\t\t\t0=No picto, 1=Include picto into link, 2=Only picto\n\t *\t@param\tint  \t$notooltip\t\t\t\t\t1=Disable tooltip\n\t *\t@param\tstring\t$moretitle\t\t\t\t\tAdd more text to title tooltip\n\t *  @param  int     $save_lastsearch_value    \t-1=Auto, 0=No save of lastsearch_values when clicking, 1=Save lastsearch_values whenclicking\n\t *\t@return\tstring\t\t\t\t\t\t\t\tChaine avec URL\n\t */\n\tpublic function getNomUrl($withpicto = 0, $notooltip = 0, $moretitle = '', $save_lastsearch_value = -1)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\tif (!empty($conf->dol_no_mouse_hover)) {\n\t\t\t$notooltip = 1; // Force disable tooltips\n\t\t}\n\n\t\t$result = '';\n\t\t$label = img_picto('', $this->picto).' <u class=\"paddingrightonly\">'.$langs->trans(\"Donation\").'</u>';\n\t\tif (isset($this->status)) {\n\t\t\t$label .= ' '.$this->getLibStatut(5);\n\t\t}\n\t\tif (!empty($this->id)) {\n\t\t\t$label .= '<br><b>'.$langs->trans('Ref').':</b> '.$this->id;\n\t\t\t$label .= '<br><b>'.$langs->trans('Date').':</b> '.dol_print_date($this->date, 'day');\n\t\t}\n\t\tif ($moretitle) {\n\t\t\t$label .= ' - '.$moretitle;\n\t\t}\n\n\t\t$url = DOL_URL_ROOT.'/don/card.php?id='.$this->id;\n\n\t\t$add_save_lastsearch_values = ($save_lastsearch_value == 1 ? 1 : 0);\n\t\tif ($save_lastsearch_value == -1 && preg_match('/list\\.php/', $_SERVER[\"PHP_SELF\"])) {\n\t\t\t$add_save_lastsearch_values = 1;\n\t\t}\n\t\tif ($add_save_lastsearch_values) {\n\t\t\t$url .= '&save_lastsearch_values=1';\n\t\t}\n\n\t\t$linkstart = '<a href=\"'.$url.'\" title=\"'.dol_escape_htmltag($label, 1).'\" class=\"classfortooltip\">';\n\t\t$linkend = '</a>';\n\n\t\t$result .= $linkstart;\n\t\tif ($withpicto) {\n\t\t\t$result .= img_object(($notooltip ? '' : $label), $this->picto, ($notooltip ? (($withpicto != 2) ? 'class=\"paddingright\"' : '') : 'class=\"'.(($withpicto != 2) ? 'paddingright ' : '').'classfortooltip\"'), 0, 0, $notooltip ? 0 : 1);\n\t\t}\n\t\tif ($withpicto != 2) {\n\t\t\t$result .= $this->ref;\n\t\t}\n\t\t$result .= $linkend;\n\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Information on record\n\t *\n\t * @param\tint\t\t$id      Id of record\n\t * @return\tvoid\n\t */\n\tpublic function info($id)\n\t{\n\t\t$sql = 'SELECT d.rowid, d.datec, d.fk_user_author, d.fk_user_valid,';\n\t\t$sql .= ' d.tms';\n\t\t$sql .= ' FROM '.MAIN_DB_PREFIX.'don as d';\n\t\t$sql .= ' WHERE d.rowid = '.((int) $id);\n\n\t\tdol_syslog(get_class($this).'::info', LOG_DEBUG);\n\t\t$result = $this->db->query($sql);\n\n\t\tif ($result) {\n\t\t\tif ($this->db->num_rows($result)) {\n\t\t\t\t$obj = $this->db->fetch_object($result);\n\t\t\t\t$this->id = $obj->rowid;\n\t\t\t\tif ($obj->fk_user_author) {\n\t\t\t\t\t$cuser = new User($this->db);\n\t\t\t\t\t$cuser->fetch($obj->fk_user_author);\n\t\t\t\t\t$this->user_creation = $cuser;\n\t\t\t\t}\n\t\t\t\tif ($obj->fk_user_valid) {\n\t\t\t\t\t$vuser = new User($this->db);\n\t\t\t\t\t$vuser->fetch($obj->fk_user_valid);\n\t\t\t\t\t$this->user_modification = $vuser;\n\t\t\t\t}\n\t\t\t\t$this->date_creation     = $this->db->jdate($obj->datec);\n\t\t\t\t$this->date_modification = $this->db->jdate($obj->tms);\n\t\t\t}\n\t\t\t$this->db->free($result);\n\t\t} else {\n\t\t\tdol_print_error($this->db);\n\t\t}\n\t}\n\n\n\t/**\n\t *  Create a document onto disk according to template module.\n\t *\n\t *  @param\t    string\t\t$modele\t\t\tForce template to use ('' to not force)\n\t *  @param\t\tTranslate\t$outputlangs\tobjet lang a utiliser pour traduction\n\t *  @param      int\t\t\t$hidedetails    Hide details of lines\n\t *  @param      int\t\t\t$hidedesc       Hide description\n\t *  @param      int\t\t\t$hideref        Hide ref\n\t *  @return     int         \t\t\t\t0 if KO, 1 if OK\n\t */\n\tpublic function generateDocument($modele, $outputlangs, $hidedetails = 0, $hidedesc = 0, $hideref = 0)\n\t{\n\t\tglobal $conf, $langs;\n\n\t\t$langs->load(\"bills\");\n\n\t\tif (!dol_strlen($modele)) {\n\t\t\t$modele = 'html_cerfafr';\n\n\t\t\tif ($this->model_pdf) {\n\t\t\t\t$modele = $this->model_pdf;\n\t\t\t} elseif (!empty($conf->global->DON_ADDON_MODEL)) {\n\t\t\t\t$modele = $conf->global->DON_ADDON_MODEL;\n\t\t\t}\n\t\t}\n\n\t\t$modelpath = \"core/modules/dons/\";\n\n\t\t// TODO Restore use of commonGenerateDocument instead of dedicated code here\n\t\t//return $this->commonGenerateDocument($modelpath, $modele, $outputlangs, $hidedetails, $hidedesc, $hideref);\n\n\t\t// Increase limit for PDF build\n\t\t$err = error_reporting();\n\t\terror_reporting(0);\n\t\t@set_time_limit(120);\n\t\terror_reporting($err);\n\n\t\t$srctemplatepath = '';\n\n\t\t// If selected modele is a filename template (then $modele=\"modelname:filename\")\n\t\t$tmp = explode(':', $modele, 2);\n\t\tif (!empty($tmp[1])) {\n\t\t\t$modele = $tmp[0];\n\t\t\t$srctemplatepath = $tmp[1];\n\t\t}\n\n\t\t// Search template files\n\t\t$file = ''; $classname = ''; $filefound = 0;\n\t\t$dirmodels = array('/');\n\t\tif (is_array($conf->modules_parts['models'])) {\n\t\t\t$dirmodels = array_merge($dirmodels, $conf->modules_parts['models']);\n\t\t}\n\t\tforeach ($dirmodels as $reldir) {\n\t\t\tforeach (array('html', 'doc', 'pdf') as $prefix) {\n\t\t\t\t$file = $prefix.\"_\".preg_replace('/^html_/', '', $modele).\".modules.php\";\n\n\t\t\t\t// On verifie l'emplacement du modele\n\t\t\t\t$file = dol_buildpath($reldir.\"core/modules/dons/\".$file, 0);\n\t\t\t\tif (file_exists($file)) {\n\t\t\t\t\t$filefound = 1;\n\t\t\t\t\t$classname = $prefix.'_'.$modele;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($filefound) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Charge le modele\n\t\tif ($filefound) {\n\t\t\trequire_once $file;\n\n\t\t\t$object = $this;\n\n\t\t\t$classname = $modele;\n\t\t\t$obj = new $classname($this->db);\n\n\t\t\t// We save charset_output to restore it because write_file can change it if needed for\n\t\t\t// output format that does not support UTF8.\n\t\t\t$sav_charset_output = $outputlangs->charset_output;\n\t\t\tif ($obj->write_file($object, $outputlangs, $srctemplatepath, $hidedetails, $hidedesc, $hideref) > 0) {\n\t\t\t\t$outputlangs->charset_output = $sav_charset_output;\n\n\t\t\t\t// we delete preview files\n\t\t\t\trequire_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\t\t\tdol_delete_preview($object);\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\t$outputlangs->charset_output = $sav_charset_output;\n\t\t\t\tdol_syslog(\"Erreur dans don_create\");\n\t\t\t\tdol_print_error($this->db, $obj->error);\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\tprint $langs->trans(\"Error\").\" \".$langs->trans(\"ErrorFileDoesNotExists\", $file);\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\t/**\n\t * Function used to replace a thirdparty id with another one.\n\t *\n\t * @param  DoliDB  $db             Database handler\n\t * @param  int     $origin_id      Old third-party id\n\t * @param  int     $dest_id        New third-party id\n\t * @return bool\n\t */\n\tpublic static function replaceThirdparty(DoliDB $db, $origin_id, $dest_id)\n\t{\n\t\t$tables = array(\n\t\t\t'don'\n\t\t);\n\n\t\treturn CommonObject::commonReplaceThirdparty($db, $origin_id, $dest_id, $tables);\n\t}\n\n\t/**\n\t * Function to get reamain to pay for a donation\n\t *\n\t * @return   int      \t\t\t\t\t<0 if KO, > reamain to pay if  OK\n\t */\n\tpublic function getRemainToPay()\n\t{\n\t\tdol_syslog(__METHOD__, LOG_DEBUG);\n\n\t\tif (empty($this->id)) {\n\t\t\t$this->error = 'Missing object id';\n\t\t\t$this->errors[] = $this->error;\n\t\t\tdol_syslog(__METHOD__.' : '.$this->error, LOG_ERR);\n\t\t\treturn -1;\n\t\t}\n\n\t\t$sql = \"SELECT SUM(amount) as sum_amount FROM \".MAIN_DB_PREFIX.\"payment_donation WHERE fk_donation = \".((int) $this->id);\n\t\t$resql = $this->db->query($sql);\n\t\tif (!$resql) {\n\t\t\tdol_print_error($this->db);\n\t\t\treturn -2;\n\t\t} else {\n\t\t\t$sum_amount = (float) $this->db->fetch_object($resql)->sum_amount;\n\t\t\treturn (float) $this->amount - $sum_amount;\n\t\t}\n\t}\n}\n"], "filenames": ["htdocs/don/card.php", "htdocs/don/class/don.class.php"], "buggy_code_start_loc": [142, 355], "buggy_code_end_loc": [256, 490], "fixing_code_start_loc": [143, 356], "fixing_code_end_loc": [262, 504], "type": "CWE-20", "message": "dolibarr is vulnerable to Business Logic Errors", "other": {"cve": {"id": "CVE-2022-0174", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-10T18:15:08.240", "lastModified": "2022-11-17T17:38:19.343", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "dolibarr is vulnerable to Business Logic Errors"}, {"lang": "es", "value": "dolibarr es vulnerable a Errores de L\u00f3gica de Negocio"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-840"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:*:*:*:*:*:*:*:*", "versionEndExcluding": "15.0.0", "matchCriteriaId": "53A392E2-A18F-45C3-99B4-8D763AB20BE4"}]}]}], "references": [{"url": "https://github.com/dolibarr/dolibarr/commit/d892160f4f130385a3ce520f66cb8cf2eb8c5c32", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/ed3ed4ce-3968-433c-a350-351c8f8b60db", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dolibarr/dolibarr/commit/d892160f4f130385a3ce520f66cb8cf2eb8c5c32"}}