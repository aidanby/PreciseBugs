{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Backend\\Routing;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Routing\\Exception\\MethodNotAllowedException;\nuse TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteNotFoundException;\nuse TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteTypeNotAllowedException;\n\n/**\n * A value object representing redirects within Backend routing.\n */\nclass RouteRedirect\n{\n    /**\n     * Name of route to be redirected to\n     */\n    private string $name;\n\n    /**\n     * Multi-dimensional query params array\n     * e.g. `['level1' => ['level2' => 'value']]`\n     */\n    private array $parameters;\n\n    public static function create(string $name, $params): self\n    {\n        if (is_string($params)) {\n            parse_str($params, $parsedParameters);\n            $params = $parsedParameters;\n        } elseif (!is_array($params)) {\n            throw new \\LogicException('Params must be array or string', 1627907107);\n        }\n        return new self($name, $params);\n    }\n\n    public static function createFromRoute(Route $route, array $parameters): self\n    {\n        return new self($route->getOption('_identifier'), $parameters);\n    }\n\n    public static function createFromRequest(ServerRequestInterface $request): ?self\n    {\n        $name = $request->getQueryParams()['redirect'] ?? null;\n        if (empty($name)) {\n            return null;\n        }\n        return self::create($name, $request->getQueryParams()['redirectParams'] ?? []);\n    }\n\n    private function __construct(string $name, array $params)\n    {\n        $this->name = $name;\n        $this->parameters = $this->sanitizeParameters($params);\n    }\n\n    private function sanitizeParameters(array $redirectParameters): array\n    {\n        unset($redirectParameters['token']);\n        unset($redirectParameters['route']);\n        unset($redirectParameters['redirect']);\n        unset($redirectParameters['redirectParams']);\n        return $redirectParameters;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function getParameters(): array\n    {\n        return $this->parameters;\n    }\n\n    public function getFormattedParameters(): string\n    {\n        $redirectParameters = http_build_query($this->parameters, '', '&', PHP_QUERY_RFC3986);\n        return ltrim($redirectParameters, '&?');\n    }\n\n    public function hasParameters(): bool\n    {\n        return !empty($this->parameters);\n    }\n\n    /**\n     * Checks if the route can be resolved as a redirect.\n     *\n     * @param Router $router\n     * @throws RouteNotFoundException\n     * @throws MethodNotAllowedException\n     * @throws RouteTypeNotAllowedException\n     */\n    public function resolve(Router $router): void\n    {\n        $route = $router->getRouteCollection()->get($this->name);\n        if ($route === null) {\n            throw new RouteNotFoundException(\n                sprintf('Route \"%s\" was not found', $this->name),\n                1627907587\n            );\n        }\n        if ($route->getOption('ajax')) {\n            throw new RouteTypeNotAllowedException(\n                sprintf('AJAX route \"%s\" cannot be redirected', $this->name),\n                1627407451\n            );\n        }\n        // Links to modules are always allowed, no problem here\n        // Check for the AJAX option should be handled before\n        if ($route->getOption('module')) {\n            return;\n        }\n        if ($route->getMethods() !== [] && !in_array('GET', $route->getMethods(), true)) {\n            throw new MethodNotAllowedException(\n                sprintf('\"%s\" cannot be redirected as it does not allow GET methods', $this->name),\n                1627407452\n            );\n        }\n    }\n}\n", "<?php\n\nuse TYPO3\\CMS\\Backend\\Controller;\n\n/**\n * Definitions for routes provided by EXT:backend\n * Contains all \"regular\" routes for entry points\n *\n * Please note that this setup is preliminary until all core use-cases are set up here.\n * Especially some more properties regarding modules will be added until TYPO3 CMS 7 LTS, and might change.\n *\n * Currently the \"access\" property is only used so no token creation + validation is made,\n * but will be extended further.\n */\nreturn [\n    // Login screen of the TYPO3 Backend\n    'login' => [\n        'path' => '/login',\n        'access' => 'public',\n        'target' => Controller\\LoginController::class . '::formAction',\n    ],\n\n    // Main backend rendering setup (previously called backend.php) for the TYPO3 Backend\n    'main' => [\n        'path' => '/main',\n        'referrer' => 'required,refresh-always',\n        'target' => Controller\\BackendController::class . '::mainAction',\n    ],\n\n    // IFrame dummy-url for browser-history state tracking of web component backend modules\n    'state-tracker' => [\n        'path' => '/state-tracker',\n        'access' => 'public',\n        'target' => Controller\\StateTrackerController::class . '::mainAction',\n    ],\n\n    // Logout script for the TYPO3 Backend\n    'logout' => [\n        'path' => '/logout',\n        'target' => Controller\\LogoutController::class . '::logoutAction',\n    ],\n    // Show the password forgotten form for entering the email\n    'password_forget' => [\n        'path' => '/login/password-reset/forget',\n        'access' => 'public',\n        'target' => Controller\\ResetPasswordController::class . '::forgetPasswordFormAction',\n    ],\n    // Send out the password reset email\n    'password_forget_initiate_reset' => [\n        'path' => '/login/password-reset/initiate-reset',\n        'access' => 'public',\n        'methods' => ['POST'],\n        'target' => Controller\\ResetPasswordController::class . '::initiatePasswordResetAction',\n    ],\n    'password_reset_validate' => [\n        'path' => '/login/password-reset/validate',\n        'access' => 'public',\n        'target' => Controller\\ResetPasswordController::class . '::passwordResetAction',\n    ],\n    'password_reset_finish' => [\n        'path' => '/login/password-reset/finish',\n        'access' => 'public',\n        'methods' => ['POST'],\n        'target' => Controller\\ResetPasswordController::class . '::passwordResetFinishAction',\n    ],\n\n    // Register login frameset\n    'login_frameset' => [\n        'path' => '/login/frame',\n        'access' => 'public',\n        'target' => Controller\\LoginController::class . '::refreshAction',\n    ],\n\n    // Authentication endpoint for Multi-factor authentication\n    'auth_mfa' => [\n        'path' => '/auth/mfa',\n        'target' => Controller\\MfaController::class . '::handleRequest',\n    ],\n\n    // Standalone setup endpoint for Multi-factor authentication\n    'setup_mfa' => [\n        'path' => '/setup/mfa',\n        'target' => Controller\\MfaSetupController::class . '::handleRequest',\n    ],\n\n    // Multi-factor authentication configuration\n    'mfa' => [\n        'path' => '/mfa',\n        'target' => Controller\\MfaConfigurationController::class . '::handleRequest',\n    ],\n\n    /** Wizards */\n    // Register add wizard\n    'wizard_add' => [\n        'path' => '/wizard/add',\n        'target' => Controller\\Wizard\\AddController::class . '::mainAction',\n    ],\n\n    // Register list wizard\n    'wizard_list' => [\n        'path' => '/wizard/list',\n        'target' => Controller\\Wizard\\ListController::class . '::mainAction',\n    ],\n\n    // Register edit wizard\n    'wizard_edit' => [\n        'path' => '/wizard/edit',\n        'target' => Controller\\Wizard\\EditController::class . '::mainAction',\n    ],\n\n    // Register link wizard\n    'wizard_link' => [\n        'path' => '/wizard/link/browse',\n        'target' => Controller\\LinkBrowserController::class . '::mainAction',\n    ],\n\n    /** File- and folder-related routes */\n\n    // Add new online media\n    'online_media' => [\n        'path' => '/online-media',\n        'target' => Controller\\OnlineMediaController::class . '::mainAction',\n    ],\n\n    /** DB Records-related routes */\n    // Register record history module\n    'record_history' => [\n        'path' => '/record/history',\n        'target' => Controller\\ContentElement\\ElementHistoryController::class . '::mainAction',\n    ],\n\n    // Register new record\n    'db_new' => [\n        'path' => '/record/new',\n        'target' => Controller\\NewRecordController::class . '::mainAction',\n    ],\n\n    'db_new_pages' => [\n        'path' => '/record/new-page',\n        'target' => Controller\\NewRecordController::class . '::newPageAction',\n    ],\n\n    // Register sort pages\n    'pages_sort' => [\n        'path' => '/pages/sort',\n        'target' => Controller\\Page\\SortSubPagesController::class . '::mainAction',\n    ],\n\n    // Register create multiple pages\n    'pages_new' => [\n        'path' => '/pages/new',\n        'target' => Controller\\Page\\NewMultiplePagesController::class . '::mainAction',\n    ],\n\n    // Register new content element module (used in a modal)\n    'new_content_element_wizard' => [\n        'path' => '/record/content/wizard/new',\n        'target' => Controller\\ContentElement\\NewContentElementController::class . '::handleRequest',\n    ],\n\n    // Register move element module\n    'move_element' => [\n        'path' => '/record/move',\n        'target' => Controller\\ContentElement\\MoveElementController::class . '::mainAction',\n    ],\n\n    // Register show item module\n    'show_item' => [\n        'path' => '/record/info',\n        'target' => Controller\\ContentElement\\ElementInformationController::class . '::mainAction',\n    ],\n\n    // Dummy document - displays nothing but background color.\n    'dummy' => [\n        'path' => '/empty',\n        'target' => Controller\\DummyController::class . '::mainAction',\n    ],\n\n    /** TYPO3 Core Engine-related routes */\n    /**\n     * TCE gateway (TYPO3 Core Engine) for database handling\n     * This script is a gateway for POST forms to \\TYPO3\\CMS\\Core\\DataHandling\\DataHandler\n     * that manipulates all information in the database!!\n     * For syntax and API information, see the document 'TYPO3 Core APIs'\n     */\n    'tce_db' => [\n        'path' => '/record/commit',\n        'target' => Controller\\SimpleDataHandlerController::class . '::mainAction',\n    ],\n\n    /**\n     * Gateway for TCE (TYPO3 Core Engine) file-handling through POST forms.\n     * This script serves as the file administration part of the TYPO3 Core Engine.\n     * Basically it includes two libraries which are used to manipulate files on the server.\n     *\n     * For syntax and API information, see the document 'TYPO3 Core APIs'\n     */\n    'tce_file' => [\n        'path' => '/file/commit',\n        'target' => Controller\\File\\FileController::class . '::mainAction',\n    ],\n\n    /**\n     * Main form rendering script\n     * By sending certain parameters to this script you can bring up a form\n     * which allows the user to edit the content of one or more database records.\n     */\n    'record_edit' => [\n        'path' => '/record/edit',\n        'target' => Controller\\EditDocumentController::class . '::mainAction',\n    ],\n\n    // Thumbnails\n    'thumbnails' => [\n        'path' => '/thumbnails',\n        'target' => Controller\\File\\ThumbnailController::class . '::render',\n    ],\n\n    // Image processing\n    'image_processing' => [\n        'path' => '/image/process',\n        'target' => Controller\\File\\ImageProcessController::class . '::process',\n    ],\n\n    // Clipboard processing\n    'clipboard_process' => [\n        'path' => '/clipboard/process',\n        'methods' => ['POST'],\n        'target' => Controller\\ClipboardController::class . '::processRequest',\n    ],\n];\n", ".. include:: ../../Includes.txt\n\n======================================================================\nFeature: #93988 - Backend module URLs reflect into browser address bar\n======================================================================\n\nSee :issue:`93988`\n\nDescription\n===========\n\nBackend module URLs are now reflected into the browser address bar, whenever a\nbackend module or a FormEngine record is opened.\n\nThe given URL can be bookmarked or shared with other editors and allows to\nre-open the TYPO3 backend with the given context.\n\nA custom Lit-based web component router is added which reflects module URLs\ninto the browser address bar and at the same time prepares for native web\ncomponents to be used as future iframe module alternatives.\n\n\nImpact\n======\n\nEditors can share links to certain records or include these in bug reports.\n\n.. index:: Backend, JavaScript, ext:backend\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\nnamespace TYPO3\\CMS\\Backend\\Routing;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse TYPO3\\CMS\\Backend\\Routing\\Exception\\MethodNotAllowedException;\nuse TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteNotFoundException;\nuse TYPO3\\CMS\\Backend\\Routing\\Exception\\RouteTypeNotAllowedException;\nuse TYPO3\\CMS\\Core\\Utility\\ArrayUtility;\n\n/**\n * A value object representing redirects within Backend routing.\n */\nclass RouteRedirect\n{\n    /**\n     * Name of route to be redirected to\n     */\n    private string $name;\n\n    /**\n     * Multi-dimensional query params array\n     * e.g. `['level1' => ['level2' => 'value']]`\n     */\n    private array $parameters;\n\n    public static function create(string $name, $params): self\n    {\n        if (is_string($params)) {\n            parse_str($params, $parsedParameters);\n            $params = $parsedParameters;\n        } elseif (!is_array($params)) {\n            throw new \\LogicException('Params must be array or string', 1627907107);\n        }\n        return new self($name, $params);\n    }\n\n    public static function createFromRoute(Route $route, array $parameters): self\n    {\n        return new self($route->getOption('_identifier'), $parameters);\n    }\n\n    public static function createFromRequest(ServerRequestInterface $request): ?self\n    {\n        $name = $request->getQueryParams()['redirect'] ?? null;\n        if (empty($name)) {\n            return null;\n        }\n        return self::create($name, $request->getQueryParams()['redirectParams'] ?? []);\n    }\n\n    private function __construct(string $name, array $params)\n    {\n        $this->name = $name;\n        $this->parameters = $this->sanitizeParameters($params);\n    }\n\n    private function sanitizeParameters(array $redirectParameters): array\n    {\n        unset($redirectParameters['token']);\n        unset($redirectParameters['route']);\n        unset($redirectParameters['redirect']);\n        unset($redirectParameters['redirectParams']);\n        return $redirectParameters;\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    public function getParameters(): array\n    {\n        return $this->parameters;\n    }\n\n    public function getFormattedParameters(): string\n    {\n        $redirectParameters = http_build_query($this->parameters, '', '&', PHP_QUERY_RFC3986);\n        return ltrim($redirectParameters, '&?');\n    }\n\n    public function hasParameters(): bool\n    {\n        return !empty($this->parameters);\n    }\n\n    /**\n     * Checks if the route can be resolved as a redirect.\n     *\n     * @param Router $router\n     * @throws RouteNotFoundException\n     * @throws MethodNotAllowedException\n     * @throws RouteTypeNotAllowedException\n     */\n    public function resolve(Router $router): void\n    {\n        $route = $router->getRouteCollection()->get($this->name);\n        if ($route === null) {\n            throw new RouteNotFoundException(\n                sprintf('Route \"%s\" was not found', $this->name),\n                1627907587\n            );\n        }\n        if ($route->getOption('ajax')) {\n            throw new RouteTypeNotAllowedException(\n                sprintf('AJAX route \"%s\" cannot be redirected', $this->name),\n                1627407451\n            );\n        }\n        // Links to modules are always allowed, no problem here\n        // Check for the AJAX option should be handled before\n        if ($route->getOption('module')) {\n            return;\n        }\n        if ($route->getMethods() !== [] && !in_array('GET', $route->getMethods(), true)) {\n            throw new MethodNotAllowedException(\n                sprintf('\"%s\" cannot be redirected as it does not allow GET methods', $this->name),\n                1627407452\n            );\n        }\n        $settings = $route->getOption('redirect');\n        if (($settings['enable'] ?? false) !== true) {\n            throw new RouteNotFoundException(\n                sprintf('Route \"%s\" cannot be redirected', $this->name),\n                1627407511\n            );\n        }\n        // Only use allowed arguments, if set, otherwise no parameters are allowed\n        if (!empty($settings['parameters'])) {\n            $this->parameters = ArrayUtility::intersectRecursive($this->parameters, (array)$settings['parameters']);\n        } else {\n            $this->parameters = [];\n        }\n    }\n}\n", "<?php\n\nuse TYPO3\\CMS\\Backend\\Controller;\n\n/**\n * Definitions for routes provided by EXT:backend\n * Contains all \"regular\" routes for entry points\n *\n * Please note that this setup is preliminary until all core use-cases are set up here.\n * Especially some more properties regarding modules will be added until TYPO3 CMS 7 LTS, and might change.\n *\n * Currently the \"access\" property is only used so no token creation + validation is made,\n * but will be extended further.\n */\nreturn [\n    // Login screen of the TYPO3 Backend\n    'login' => [\n        'path' => '/login',\n        'access' => 'public',\n        'target' => Controller\\LoginController::class . '::formAction',\n    ],\n\n    // Main backend rendering setup (previously called backend.php) for the TYPO3 Backend\n    'main' => [\n        'path' => '/main',\n        'referrer' => 'required,refresh-always',\n        'target' => Controller\\BackendController::class . '::mainAction',\n    ],\n\n    // IFrame dummy-url for browser-history state tracking of web component backend modules\n    'state-tracker' => [\n        'path' => '/state-tracker',\n        'access' => 'public',\n        'target' => Controller\\StateTrackerController::class . '::mainAction',\n    ],\n\n    // Logout script for the TYPO3 Backend\n    'logout' => [\n        'path' => '/logout',\n        'target' => Controller\\LogoutController::class . '::logoutAction',\n    ],\n    // Show the password forgotten form for entering the email\n    'password_forget' => [\n        'path' => '/login/password-reset/forget',\n        'access' => 'public',\n        'target' => Controller\\ResetPasswordController::class . '::forgetPasswordFormAction',\n    ],\n    // Send out the password reset email\n    'password_forget_initiate_reset' => [\n        'path' => '/login/password-reset/initiate-reset',\n        'access' => 'public',\n        'methods' => ['POST'],\n        'target' => Controller\\ResetPasswordController::class . '::initiatePasswordResetAction',\n    ],\n    'password_reset_validate' => [\n        'path' => '/login/password-reset/validate',\n        'access' => 'public',\n        'target' => Controller\\ResetPasswordController::class . '::passwordResetAction',\n    ],\n    'password_reset_finish' => [\n        'path' => '/login/password-reset/finish',\n        'access' => 'public',\n        'methods' => ['POST'],\n        'target' => Controller\\ResetPasswordController::class . '::passwordResetFinishAction',\n    ],\n\n    // Register login frameset\n    'login_frameset' => [\n        'path' => '/login/frame',\n        'access' => 'public',\n        'target' => Controller\\LoginController::class . '::refreshAction',\n    ],\n\n    // Authentication endpoint for Multi-factor authentication\n    'auth_mfa' => [\n        'path' => '/auth/mfa',\n        'target' => Controller\\MfaController::class . '::handleRequest',\n    ],\n\n    // Standalone setup endpoint for Multi-factor authentication\n    'setup_mfa' => [\n        'path' => '/setup/mfa',\n        'target' => Controller\\MfaSetupController::class . '::handleRequest',\n    ],\n\n    // Multi-factor authentication configuration\n    'mfa' => [\n        'path' => '/mfa',\n        'target' => Controller\\MfaConfigurationController::class . '::handleRequest',\n    ],\n\n    /** Wizards */\n    // Register add wizard\n    'wizard_add' => [\n        'path' => '/wizard/add',\n        'target' => Controller\\Wizard\\AddController::class . '::mainAction',\n    ],\n\n    // Register list wizard\n    'wizard_list' => [\n        'path' => '/wizard/list',\n        'target' => Controller\\Wizard\\ListController::class . '::mainAction',\n    ],\n\n    // Register edit wizard\n    'wizard_edit' => [\n        'path' => '/wizard/edit',\n        'target' => Controller\\Wizard\\EditController::class . '::mainAction',\n    ],\n\n    // Register link wizard\n    'wizard_link' => [\n        'path' => '/wizard/link/browse',\n        'target' => Controller\\LinkBrowserController::class . '::mainAction',\n    ],\n\n    /** File- and folder-related routes */\n\n    // Add new online media\n    'online_media' => [\n        'path' => '/online-media',\n        'target' => Controller\\OnlineMediaController::class . '::mainAction',\n    ],\n\n    /** DB Records-related routes */\n    // Register record history module\n    'record_history' => [\n        'path' => '/record/history',\n        'target' => Controller\\ContentElement\\ElementHistoryController::class . '::mainAction',\n    ],\n\n    // Register new record\n    'db_new' => [\n        'path' => '/record/new',\n        'target' => Controller\\NewRecordController::class . '::mainAction',\n        'redirect' => [\n            'enable' => true,\n            'parameters' => [\n                'id' => true,\n            ],\n        ],\n    ],\n\n    'db_new_pages' => [\n        'path' => '/record/new-page',\n        'target' => Controller\\NewRecordController::class . '::newPageAction',\n        'redirect' => [\n            'enable' => true,\n            'parameters' => [\n                'id' => true,\n            ],\n        ],\n    ],\n\n    // Register sort pages\n    'pages_sort' => [\n        'path' => '/pages/sort',\n        'target' => Controller\\Page\\SortSubPagesController::class . '::mainAction',\n    ],\n\n    // Register create multiple pages\n    'pages_new' => [\n        'path' => '/pages/new',\n        'target' => Controller\\Page\\NewMultiplePagesController::class . '::mainAction',\n        'redirect' => [\n            'enable' => true,\n            'parameters' => [\n                'id' => true,\n            ],\n        ],\n    ],\n\n    // Register new content element module (used in a modal)\n    'new_content_element_wizard' => [\n        'path' => '/record/content/wizard/new',\n        'target' => Controller\\ContentElement\\NewContentElementController::class . '::handleRequest',\n    ],\n\n    // Register move element module\n    'move_element' => [\n        'path' => '/record/move',\n        'target' => Controller\\ContentElement\\MoveElementController::class . '::mainAction',\n    ],\n\n    // Register show item module\n    'show_item' => [\n        'path' => '/record/info',\n        'target' => Controller\\ContentElement\\ElementInformationController::class . '::mainAction',\n    ],\n\n    // Dummy document - displays nothing but background color.\n    'dummy' => [\n        'path' => '/empty',\n        'target' => Controller\\DummyController::class . '::mainAction',\n    ],\n\n    /** TYPO3 Core Engine-related routes */\n    /**\n     * TCE gateway (TYPO3 Core Engine) for database handling\n     * This script is a gateway for POST forms to \\TYPO3\\CMS\\Core\\DataHandling\\DataHandler\n     * that manipulates all information in the database!!\n     * For syntax and API information, see the document 'TYPO3 Core APIs'\n     */\n    'tce_db' => [\n        'path' => '/record/commit',\n        'target' => Controller\\SimpleDataHandlerController::class . '::mainAction',\n    ],\n\n    /**\n     * Gateway for TCE (TYPO3 Core Engine) file-handling through POST forms.\n     * This script serves as the file administration part of the TYPO3 Core Engine.\n     * Basically it includes two libraries which are used to manipulate files on the server.\n     *\n     * For syntax and API information, see the document 'TYPO3 Core APIs'\n     */\n    'tce_file' => [\n        'path' => '/file/commit',\n        'target' => Controller\\File\\FileController::class . '::mainAction',\n    ],\n\n    /**\n     * Main form rendering script\n     * By sending certain parameters to this script you can bring up a form\n     * which allows the user to edit the content of one or more database records.\n     */\n    'record_edit' => [\n        'path' => '/record/edit',\n        'target' => Controller\\EditDocumentController::class . '::mainAction',\n        'redirect' => [\n            'enable' => true,\n            'parameters' => [\n                'edit' => true,\n            ],\n        ],\n    ],\n\n    // Thumbnails\n    'thumbnails' => [\n        'path' => '/thumbnails',\n        'target' => Controller\\File\\ThumbnailController::class . '::render',\n    ],\n\n    // Image processing\n    'image_processing' => [\n        'path' => '/image/process',\n        'target' => Controller\\File\\ImageProcessController::class . '::process',\n    ],\n\n    // Clipboard processing\n    'clipboard_process' => [\n        'path' => '/clipboard/process',\n        'methods' => ['POST'],\n        'target' => Controller\\ClipboardController::class . '::processRequest',\n    ],\n];\n", ".. include:: ../../Includes.txt\n\n======================================================================\nFeature: #93988 - Backend module URLs reflect into browser address bar\n======================================================================\n\nSee :issue:`93988`\n\nDescription\n===========\n\nBackend module URLs are now reflected into the browser address bar, whenever a\nbackend module or a FormEngine record is opened.\n\nThe given URL can be bookmarked or shared with other editors and allows to\nre-open the TYPO3 backend with the given context.\n\nA custom Lit-based web component router is added which reflects module URLs\ninto the browser address bar and at the same time prepares for native web\ncomponents to be used as future iframe module alternatives.\n\n\nImpact\n======\n\nEditors can share links to certain records or include these in bug reports.\n\nThis feature is enabled for all modules. For non-module routes this feature\nwill only work if configured via `Routes.php` by adding a `redirect` section:\n\n:php:\n    'redirect' => [\n        'enable' => true,\n        // Transferred parameters when redirecting\n        'parameters' => [\n            'my-parameter-name' => true\n        ]\n    ],\n\n.. index:: Backend, JavaScript, ext:backend\n"], "filenames": ["typo3/sysext/backend/Classes/Routing/RouteRedirect.php", "typo3/sysext/backend/Configuration/Backend/Routes.php", "typo3/sysext/core/Documentation/Changelog/11.2/Feature-93988-BackendModuleURLsReflectIntoBrowserAddressbar.rst"], "buggy_code_start_loc": [23, 135, 27], "buggy_code_end_loc": [135, 210, 27], "fixing_code_start_loc": [24, 136, 28], "fixing_code_end_loc": [150, 235, 40], "type": "CWE-352", "message": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the new TYPO3 v11 feature that allows users to create and share deep links in the backend user interface is vulnerable to cross-site-request-forgery. The impact is the same as described in TYPO3-CORE-SA-2020-006 (CVE-2020-11069). However, it is not limited to the same site context and does not require the attacker to be authenticated. In a worst case scenario, the attacker could create a new admin user account to compromise the system. To successfully carry out an attack, an attacker must trick his victim to access a compromised system. The victim must have an active session in the TYPO3 backend at that time. The following Same-Site cookie settings in $GLOBALS[TYPO3_CONF_VARS][BE][cookieSameSite] are required for an attack to be successful: SameSite=strict: malicious evil.example.org invoking TYPO3 application at good.example.org and SameSite=lax or none: malicious evil.com invoking TYPO3 application at example.org. Update your instance to TYPO3 version 11.5.0 which addresses the problem described.", "other": {"cve": {"id": "CVE-2021-41113", "sourceIdentifier": "security-advisories@github.com", "published": "2021-10-05T18:15:08.200", "lastModified": "2021-10-09T02:51:56.857", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that the new TYPO3 v11 feature that allows users to create and share deep links in the backend user interface is vulnerable to cross-site-request-forgery. The impact is the same as described in TYPO3-CORE-SA-2020-006 (CVE-2020-11069). However, it is not limited to the same site context and does not require the attacker to be authenticated. In a worst case scenario, the attacker could create a new admin user account to compromise the system. To successfully carry out an attack, an attacker must trick his victim to access a compromised system. The victim must have an active session in the TYPO3 backend at that time. The following Same-Site cookie settings in $GLOBALS[TYPO3_CONF_VARS][BE][cookieSameSite] are required for an attack to be successful: SameSite=strict: malicious evil.example.org invoking TYPO3 application at good.example.org and SameSite=lax or none: malicious evil.com invoking TYPO3 application at example.org. Update your instance to TYPO3 version 11.5.0 which addresses the problem described."}, {"lang": "es", "value": "TYPO3 es un sistema de administraci\u00f3n de contenidos web de c\u00f3digo abierto basado en PHP y publicado bajo la licencia GNU GPL. Se ha detectado que la nueva funci\u00f3n de TYPO3 versi\u00f3n v11 que permite a usuarios crear y compartir enlaces profundos en la interfaz de usuario del backend es vulnerable a un ataque de tipo cross-site-request-forgery. El impacto es el mismo que se describe en TYPO3-CORE-SA-2020-006 (CVE-2020-11069). Sin embargo, no se limita al mismo contexto del sitio y no requiere que el atacante est\u00e9 autenticado. En el peor de los casos, el atacante podr\u00eda crear una nueva cuenta de usuario administrador para comprometer el sistema. Para llevar a cabo un ataque con \u00e9xito, un atacante debe enga\u00f1ar a su v\u00edctima para que acceda a un sistema comprometido. La v\u00edctima debe tener una sesi\u00f3n activa en el backend de TYPO3 en ese momento. La siguiente configuraci\u00f3n de la cookie Same-Site en $GLOBALS[TYPO3_CONF_VARS][BE][cookieSameSite] son requeridas para que un ataque tenga \u00e9xito: SameSite=strict: malicioso evil.example.org invocando la aplicaci\u00f3n TYPO3 en good.example.org y SameSite=lax o none: malicioso evil.com invocando la aplicaci\u00f3n TYPO3 en example.org. Actualice su instancia a la versi\u00f3n 11.5.0 de TYPO3 que soluciona el problema descrito"}], "metrics": {"cvssMetricV31": [{"source": "security-advisories@github.com", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "11.2.0", "versionEndExcluding": "11.5.0", "matchCriteriaId": "16CF44C2-38C2-4BA2-B062-C9569D761DAA"}]}]}], "references": [{"url": "https://github.com/TYPO3/typo3/commit/fa51999203c5e5d913ecae5ea843ccb2b95fa33f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-657m-v5vm-f6rw", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2020-006", "source": "security-advisories@github.com", "tags": ["Not Applicable", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/typo3/commit/fa51999203c5e5d913ecae5ea843ccb2b95fa33f"}}