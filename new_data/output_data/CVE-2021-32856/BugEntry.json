{"buggy_code": ["<?php\n\nnamespace MicroweberPackages\\Content;\n\nuse Content;\nuse ContentFields;\nuse Illuminate\\Support\\Facades\\Cache;\nuse DB;\nuse MicroweberPackages\\Category\\Models\\CategoryItem;\nuse MicroweberPackages\\Menu\\Menu;\nuse MicroweberPackages\\App\\Http\\Controllers\\FrontendController;\n\nclass ContentManagerHelpers extends ContentManagerCrud\n{\n    public function add_content_to_menu($content_id, $menu_id = false)\n    {\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        $new_item = false;\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        if (isset($content_id['id'])) {\n            $content_id = $content_id['id'];\n        }\n\n        $content_id = intval($content_id);\n        if ($content_id == 0 or !isset($this->tables['menus'])) {\n            return;\n        }\n        if ($menu_id != false) {\n            //  $_REQUEST['add_content_to_menu'] = array( $menu_id);\n        }\n\n        $menus = $this->tables['menus'];\n        if (isset($_REQUEST['add_content_to_menu']) and is_array($_REQUEST['add_content_to_menu'])) {\n            $add_to_menus = $_REQUEST['add_content_to_menu'];\n            $add_to_menus_int = array();\n            foreach ($add_to_menus as $value) {\n                if ($value == 'remove_from_all') {\n                    Menu::where('content_id', $content_id)->where('item_type', 'menu_item')->delete();\n                    $this->app->cache_manager->delete('menus');\n                }\n                $value = intval($value);\n                if ($value > 0) {\n                    $add_to_menus_int[] = $value;\n                }\n            }\n        }\n\n        $add_under_parent_page = false;\n        $content_data = false;\n\n        if (isset($_REQUEST['add_content_to_menu_auto_parent']) and ($_REQUEST['add_content_to_menu_auto_parent']) != false) {\n            $add_under_parent_page = true;\n            $content_data = $this->get_by_id($content_id);\n            if ($content_data['is_active'] != 1) {\n                return false;\n            }\n        }\n        if (!isset($add_to_menus_int) or empty($add_to_menus_int)) {\n            if ($menu_id != false) {\n                $add_to_menus_int[] = intval($menu_id);\n            }\n        }\n\n        if (isset($add_to_menus_int) and is_array($add_to_menus_int)) {\n            Menu::where('content_id', $content_id)\n                ->where('item_type', 'menu_item')\n                ->whereNotIn('parent_id', $add_to_menus_int)\n                ->delete();\n            foreach ($add_to_menus_int as $value) {\n                //  $check = $this->app->menu_manager->get_menu_items(\"parent_id={$value}&content_id=$content_id\");\n\n                $check = Menu::where('content_id', $content_id)\n                    ->where('item_type', 'menu_item')\n                    ->where('parent_id', $value)\n                    ->count();\n\n                if ($check == 0) {\n                    $save = array();\n                    $save['item_type'] = 'menu_item';\n                    $save['is_active'] = 1;\n                    $save['parent_id'] = $value;\n                    $save['position'] = 999999;\n                    if ($add_under_parent_page != false and is_array($content_data) and isset($content_data['parent'])) {\n                        $parent_cont = $content_data['parent'];\n                        $check_par = $this->app->menu_manager->get_menu_items(\"limit=1&one=1&content_id=$parent_cont\");\n                        if (is_array($check_par) and isset($check_par['id'])) {\n                            $save['parent_id'] = $check_par['id'];\n                        }\n                    }\n\n                    $save['url'] = '';\n                    $save['content_id'] = $content_id;\n\n                    $new_item = $this->app->database_manager->save($menus, $save);\n\n                    $this->app->cache_manager->delete('menus');\n\n                    $this->app->cache_manager->delete('menus/' . $save['parent_id']);\n\n                    $this->app->cache_manager->delete('menus/' . $value);\n\n                    $this->app->cache_manager->delete('content/' . $content_id);\n                }\n            }\n\n            $this->app->cache_manager->delete('menus');\n            $this->app->cache_manager->delete('menus');\n        }\n\n        return $new_item;\n    }\n\n    public function delete($data)\n    {\n\n        $to_trash = true;\n        $to_untrash = false;\n\n        if (!is_array($data)) {\n            $del_data = array();\n            $del_data['id'] = intval($data);\n            $data = $del_data;\n            $to_trash = false;\n        }\n\n        if (isset($data['forever']) or isset($data['delete_forever'])) {\n            $to_trash = false;\n        }\n\n        if (isset($data['undelete'])) {\n            $to_trash = true;\n            $to_untrash = true;\n        }\n\n        $del_ids = array();\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $del_ids[] = $c_id;\n            if ($to_trash == false) {\n                $this->app->database_manager->delete_by_id('content', $c_id);\n            }\n        }\n        $this->app->event_manager->trigger('content.before.delete', $data);\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n\n            foreach ($data['ids'] as $value) {\n                $c_id = intval($value);\n                if ($c_id) {\n                    $del_ids[] = $c_id;\n                    if ($to_trash == false) {\n                        $this->app->database_manager->delete_by_id('content', $c_id);\n                    }\n                }\n            }\n        }\n//dd($del_ids);\n        if (!empty($del_ids)) {\n            //DB::transaction(function () use ($del_ids, $to_untrash, $to_trash) {\n            foreach ($del_ids as $value) {\n                $c_id = intval($value);\n\n                if ($c_id) {\n                    if ($to_untrash == true) {\n                        DB::table($this->tables['content'])->whereId($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        DB::table($this->tables['content'])->whereParent($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n\n                        if (isset($this->tables['categories'])) {\n                            DB::table($this->tables['categories'])->whereRelId($c_id)->whereRelType('content')->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        }\n                    } elseif ($to_trash == false) {\n                        DB::table($this->tables['content'])->whereParent($c_id)->update(['parent' => 0]);\n\n                        $this->app->database_manager->delete_by_id('menus', $c_id, 'content_id');\n\n                        if (isset($this->tables['media'])) {\n                            DB::table('media')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n\n                        if (isset($this->tables['categories'])) {\n                            DB::table('categories')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n\n                        if (isset($this->tables['categories_items'])) {\n                            DB::table('categories_items')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n                        if (isset($this->tables['custom_fields'])) {\n                            DB::table('custom_fields')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n\n                        if (isset($this->tables['content_data'])) {\n                            DB::table('content_data')->where('content_id', '=', $c_id)->delete();\n                        }\n\n                        if (isset($this->tables['menus'])) {\n                            DB::table('menus')->where('content_id', '=', $c_id)->delete();\n                        }\n                    } else {\n                        DB::table($this->tables['content'])->whereId($c_id)->update(['is_deleted' => 1]);\n                        DB::table($this->tables['content'])->whereParent($c_id)->update(['is_deleted' => 1]);\n\n                        if (isset($this->tables['categories'])) {\n                            DB::table($this->tables['categories'])->whereRelId($c_id)->whereRelType('content')->update(['is_deleted' => 1]);\n                        }\n                    }\n                    $this->app->cache_manager->delete('content/' . $c_id);\n                }\n            }\n            // });\n        }\n        $this->app->cache_manager->delete('menus');\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('categories');\n        $this->app->cache_manager->delete('content');\n\n        return $del_ids;\n    }\n\n    public function reset_modules_settings($modules_ids)\n    {\n        if (isset($modules_ids['modules_ids'])) {\n            $modules_ids = $modules_ids['modules_ids'];\n        }\n        //data.\n\n        if (is_array($modules_ids) and !empty($modules_ids)) {\n            foreach ($modules_ids as $modules_id) {\n                if ($modules_id) {\n                    \\DB::table('options')->where('option_group', '=', $modules_id)->delete();\n                    \\DB::table('media')->where('rel_type', '=', 'modules')->where('rel_id', '=', $modules_id)->delete();\n                }\n            }\n            $this->app->cache_manager->delete('options');\n            $this->app->cache_manager->delete('media');\n\n        }\n        return true;\n    }\n\n    public function reset_edit_field($data)\n    {\n        if ($data) {\n            if (isset($data['reset'])) {\n                $data = $data['reset'];\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.before', $data);\n\n            foreach ($data as $item) {\n                if (isset($item['rel']) and ($item['rel'])) {\n                    if (isset($item['field']) and ($item['field'])) {\n\n                        $del = \\DB::table($this->tables['content_fields'])\n                            ->where('rel_type', '=', $item['rel'])\n                            ->where('field', '=', $item['field']);\n\n\n                        $del = $del->delete();\n\n\n                    }\n                }\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.after', $data);\n\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n\n        return true;\n\n\n    }\n\n    public function bulk_assign($data)\n    {\n        if (is_string($data)) {\n            $data = parse_params($data);\n        }\n\n        if (isset($data['content_ids'])) {\n            $content_ids = $data['content_ids'];\n\n            if (is_array($content_ids)) {\n                foreach ($content_ids as $content_id) {\n                    $to_save = array();\n                    $to_save['id'] = $content_id;\n                    $to_save['skip_timestamps'] = true;\n                    if (isset($data['parent_id'])) {\n                        $to_save['parent'] = $data['parent_id'];\n                    }\n                    if (isset($data['categories'])) {\n                        $to_save['categories'] = $data['categories'];\n                        CategoryItem::where('rel_id', $content_id)->where('rel_type', 'content')->delete();\n                    }\n                    $this->app->content_manager->save_content($to_save);\n                }\n            }\n        }\n\n        return array('success' => 'Content is moved');\n    }\n\n    public function create_default_content($what)\n    {\n        if (defined('MW_NO_DEFAULT_CONTENT')) {\n            return true;\n        }\n\n        switch ($what) {\n            case 'shop' :\n                $is_shop = $this->get('content_type=page&is_shop=0');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n\n                    $add_page['title'] = _e('Online shop', true);\n                    $add_page['url'] = 'shop';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = '1';\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (isset($item['layout_file']) and isset($item['is_shop'])) {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('custom_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                $posts = $this->get('content_type=post&parent=' . $new_shop);\n                if ($posts == false and $new_shop != false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = $new_shop;\n                    $add_page['title'] = 'My product';\n                    $add_page['url'] = 'my-product';\n                    $add_page['content_type'] = 'post';\n                    $add_page['subtype'] = 'product';\n                    $add_page['is_active'] = 1;\n                    //$new_shop = $this->save_content($add_page);\n                    //$this->app->cache_manager->delete('content');\n                    //$this->app->cache_manager->clear();\n                }\n\n                break;\n\n            case 'blog' :\n                $is_shop = $this->get('is_deleted=0&content_type=page&subtype=dynamic&is_shop=1&limit=1');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n                    $add_page['title'] = _e('Blog', true);\n                    $add_page['url'] = 'blog';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = 0;\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (!isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n\n                        foreach ($find_layout as $item) {\n                            if (isset($item['name']) and stristr($item['name'], 'blog') and !isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('content_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                break;\n\n            case 'default' :\n            case 'install' :\n                $any = $this->get('count=1&content_type=page&limit=1');\n                if (intval($any) == 0) {\n                    $table = $this->tables['content'];\n                    mw_var('FORCE_SAVE_CONTENT', $table);\n                    mw_var('FORCE_SAVE', $table);\n\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['title'] = 'Home';\n                    $add_page['url'] = 'home';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'static';\n                    $add_page['is_shop'] = 0;\n                    //$add_page['debug'] = 1;\n                    $add_page['is_active'] = 1;\n                    $add_page['is_home'] = 1;\n                    $add_page['active_site_template'] = 'default';\n                    $new_shop = $this->save_content($add_page);\n                }\n\n                break;\n\n            default :\n                break;\n        }\n    }\n\n    public function copy($data)\n    {\n        $new_cont_id = false;\n\n        if (defined('MW_API_CALL')) {\n            $to_trash = true;\n            $adm = $this->app->user_manager->is_admin();\n            if ($adm == false) {\n                return array('error' => 'You must be admin to copy content!');\n            }\n        }\n        if (isset($data['id'])) {\n            $this->app->event_manager->trigger('content.before.copy', $data);\n            $cont = get_content_by_id($data['id']);\n            if ($cont != false and isset($cont['id'])) {\n                $new_cont = $cont;\n                if (isset($new_cont['title'])) {\n                    $new_cont['title'] = $new_cont['title'] . ' copy';\n                }\n\n                $new_cont['id'] = 0;\n                $content_cats = array();\n\n                $cats = content_categories($cont['id']);\n                if (!empty($cats)) {\n                    foreach ($cats as $cat) {\n                        if (isset($cat['id'])) {\n                            $content_cats[] = $cat['id'];\n                        }\n                    }\n                }\n                if (!empty($content_cats)) {\n                    $new_cont['categories'] = $content_cats;\n                }\n\n                if (isset($new_cont['is_home'])) {\n                    unset($new_cont['is_home']);\n                }\n\n                if (isset($new_cont['content'])) {\n                    $new_cont['content'] = $this->app->parser->make_tags($new_cont['content'], array('change_module_ids' => true));\n\n                }\n\n                if (isset($new_cont['content_body'])) {\n                    $new_cont['content_body'] = $this->app->parser->make_tags($new_cont['content_body'], array('change_module_ids' => true));\n                }\n\n\n                $new_cont_id = $this->save($new_cont);\n\n                $cust_fields = get_custom_fields('content', $data['id'], true);\n                if (!empty($cust_fields)) {\n                    foreach ($cust_fields as $cust_field) {\n                        $new = $cust_field;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_custom_field($new);\n                    }\n                }\n                $images = get_pictures($data['id']);\n                if (!empty($images)) {\n                    foreach ($images as $image) {\n                        $new = $image;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_media($new);\n                    }\n                }\n            }\n        }\n\n        return $new_cont_id;\n    }\n\n    public function related_content_add($data)\n    {\n        if (isset($data['content_id']) and isset($data['related_content_id'])) {\n            $related = ContentRelated::firstOrCreate(\n                ['content_id' => $data['content_id'], 'related_content_id' => $data['related_content_id']]\n            );\n            $related->position = 0;\n            $related->save();\n\n            $this->app->cache_manager->delete('content');\n\n            return $related;\n        }\n    }\n\n    public function related_content_remove($data)\n    {\n        if (isset($data['id'])) {\n            $related = ContentRelated::where(\n                'id', $data['id']\n            )->delete();\n\n            $this->app->cache_manager->delete('content');\n\n            return true;\n        }\n    }\n\n\n    public function related_content_reorder($data)\n    {\n\n\n        if (isset($data['ids'])) {\n            $value = $data['ids'];\n            if (is_array($value)) {\n                $indx = array();\n                $i = 1;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n\n                    ++$i;\n                }\n                $this->app->database_manager->update_position_field('content_related', $indx);\n                $return_res = $indx;\n            }\n        }\n\n        $this->app->cache_manager->delete('content_related');\n\n        $this->app->cache_manager->delete('content');\n\n\n    }\n\n    public function save_from_live_edit($post_data)\n    {\n        $is_module = false;\n\n\n        if (php_can_use_func('ini_set')) {\n            @ini_set('memory_limit', '512M');\n        }\n\n        if (php_can_use_func('set_time_limit')) {\n            set_time_limit(60);\n        }\n\n        $save_as_draft = false;\n        if (isset($post_data['save_draft'])) {\n            $save_as_draft = true;\n            unset($post_data['save_draft']);\n        }\n\n        $json_print = array();\n\n\n        $is_admin = $this->app->user_manager->is_admin();\n        if ($post_data) {\n            if (isset($post_data['data_base64'])) {\n\n                if (!php_can_use_func('base64_decode')) {\n                    return array('error' => 'The base64_decode function must be enabled. Please enable base64_decode function in php.ini');\n                }\n\n                $post_data['json_obj'] = @base64_decode($post_data['data_base64']);\n            }\n            if (isset($post_data['json_obj'])) {\n                $obj = json_decode($post_data['json_obj'], true);\n                $post_data = $obj;\n            }\n            if (isset($post_data['mw_preview_only'])) {\n                $is_no_save = true;\n                unset($post_data['mw_preview_only']);\n            }\n            $is_no_save = false;\n            $is_draft = false;\n            if (isset($post_data['is_draft'])) {\n                unset($post_data['is_draft']);\n                $is_draft = 1;\n            }\n            $the_field_data_all = $post_data;\n        } else {\n            return array('error' => 'no POST?');\n        }\n\n        $ustr2 = $this->app->url_manager->string(1, 1);\n\n        if (isset($ustr2) and trim($ustr2) == 'favicon.ico') {\n            return false;\n        }\n        $ref_page_url = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_page_url = $_SERVER['HTTP_REFERER'];\n        }\n\n        if (isset($post_data['id']) and intval($post_data['id']) > 0) {\n            $page_id = intval($post_data['id']);\n        } elseif ($ref_page_url != '') {\n            //removing hash from url\n            if (strpos($ref_page_url, '#')) {\n                $ref_page_url = substr($ref_page_url, 0, strpos($ref_page_url, '#'));\n            }\n\n            $slug_page = $this->app->permalink_manager->slug($ref_page_url, 'page');\n            $slug_post = $this->app->permalink_manager->slug($ref_page_url, 'post');\n            $slug_category = $this->app->permalink_manager->slug($ref_page_url, 'category');\n\n            if ($slug_page) {\n                $ref_post = false;\n                if ($slug_post) {\n\n                    $ref_post = $this->get_by_url($slug_post);\n\n                }\n\n                if ($ref_post) {\n                    $ref_page2 = $ref_page = $ref_post;\n\n                } else {\n                    $ref_page2 = $ref_page = $this->get_by_url($slug_page);\n\n\n                }\n\n\n            } elseif ($slug_category) {\n                $cat = $this->app->category_manager->get_by_url($slug_category);\n                if ($cat) {\n                    $content_for_cat = $this->app->category_manager->get_page($cat['id']);\n                    if ($content_for_cat) {\n                        $ref_page2 = $ref_page = $content_for_cat;\n                    }\n                }\n            }\n\n\n            if (isset($ref_page2)) {\n                if ($ref_page2 == false) {\n                    $ustr = $this->app->url_manager->string(1);\n\n                    if ($this->app->module_manager->is_installed($ustr)) {\n                        $ref_page = false;\n                    }\n                } else {\n                    $ref_page = $ref_page2;\n                }\n            }\n\n\n            if (isset($ustr) and trim($ustr) == 'favicon.ico') {\n                return false;\n            } elseif ($ustr2 == '' or $ustr2 == '/') {\n                $ref_page = $this->app->content_manager->homepage();\n                if ($ref_page_url) {\n                    $page_url_ref = $this->app->url_manager->param('content_id', $ref_page_url);\n                    if ($page_url_ref !== false) {\n                        if ($page_url_ref == 0) {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            if (!isset($ref_page) or $ref_page == false) {\n                $guess_page_data = new FrontendController();\n                // $guess_page_data =  new  $this->app->controller($this->app);\n                $ref_page_url = strtok($ref_page_url, '?');\n\n\n                $guess_page_data->page_url = $ref_page_url;\n                $guess_page_data->return_data = true;\n                $guess_page_data->create_new_page = true;\n                $pd = $guess_page_data->index();\n                if (isset($pd['id'])) {\n                    $pd1 = DB::table('content')->where('id', $pd['id'])->first();\n                    $pd1 = (array)$pd1;\n                    if ($pd1) {\n                        $pd = $pd1;\n                    }\n\n                }\n\n                $ustr = $this->app->url_manager->string(1);\n                $is_module = false;\n                $pd['url'] = $ustr;\n\n                if (isset($pd['active_site_template']) and $pd['active_site_template'] == template_name()) {\n                    $pd['active_site_template'] = '';\n                }\n\n                if ($this->app->module_manager->is_installed($ustr)) {\n                    $is_module = true;\n                    $save_page['layout_file'] = 'clean.php';\n                    $save_page['subtype'] = 'module';\n                    $hp_id = $this->app->content_manager->homepage();\n                    if (isset($hp_id['id'])) {\n                        $page_id = $hp_id['id'];\n                    } else {\n                        $page_id = 1;\n                    }\n                    $is_module = 1;\n                    $save_page = false;\n                }\n\n                if ($is_admin == true and is_array($pd) and $is_module == false) {\n                    $save_page = $pd;\n                    if (!isset($_GET['mw_quick_edit'])) {\n                        if (isset($ref_page_url) and $ref_page_url != false) {\n                            $save_page['url'] = $ref_page_url;\n                        } else {\n                            $save_page['url'] = $this->app->url_manager->string(1);\n                        }\n                        $title = str_replace('%20', ' ', ($this->app->url_manager->string(1)));\n\n                        if ($title == 'editor_tools/wysiwyg' or $title == 'api/module' or $title == 'admin/view:content') {\n                            return false;\n                        }\n                        if (!isset($save_page['title'])) {\n                            $save_page['title'] = $title;\n                        }\n                        if ($save_page['url'] == '' or $save_page['url'] == '/' or $save_page['url'] == $this->app->url_manager->site()) {\n                            $save_page['url'] = 'home';\n                            $home_exists = $this->app->content_manager->homepage();\n                            if ($home_exists == false) {\n                                $save_page['is_home'] = 1;\n                            }\n                        }\n                    }\n                    if ($save_page['title'] == '') {\n                        $save_page['title'] = 'Home';\n                    }\n                    if (!isset($save_page['is_active'])) {\n                        $save_page['is_active'] = 1;\n                    }\n                    if (isset($save_page['content_type']) and $save_page['content_type'] == 'page') {\n                        if (!isset($save_page['subtype'])) {\n                            $save_page['subtype'] = 'static';\n                            if (!isset($save_page['layout_file']) or $save_page['layout_file'] == false) {\n                                $save_page['layout_file'] = 'inherit';\n                            }\n                        }\n                    }\n\n                    if ($save_page != false) {\n                        if (isset($save_page['url']) and $save_page['url']) {\n                            $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            $u = $this->app->permalink_manager->slug($u, 'content');\n\n                            if (!$u) {\n                                $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            }\n\n                            if ($u) {\n                                $try_to_find_page_with_url = $this->app->content_manager->get_by_url($u);\n\n                                if ($try_to_find_page_with_url and isset($try_to_find_page_with_url['id'])) {\n                                    $save_page['id'] = $try_to_find_page_with_url['id'];\n                                }\n                            }\n                        }\n                        if (!isset($save_page['id'])) {\n                            $page_id = $save_page['id'];\n                        } else {\n                            if (!$save_as_draft) {\n                                $page_id = $this->app->content_manager->save_content_admin($save_page);\n                                $new_content_link = content_link($page_id);\n                                if ($ref_page_url != $new_content_link) {\n                                    $json_print['new_page_url'] = content_link($page_id);\n                                }\n                            }\n\n                        }\n                    }\n                }\n            } else {\n                $page_id = $ref_page['id'];\n                $ref_page['custom_fields'] = $this->app->content_manager->custom_fields($page_id, false);\n            }\n        }\n\n        $author_id = user_id();\n        if ($is_admin == false and $page_id != 0 and $author_id != 0) {\n            $page_data_to_check_author = $this->get_by_id($page_id);\n            if (!isset($page_data_to_check_author['created_by']) or ($page_data_to_check_author['created_by'] != $author_id)) {\n                return array('error' => 'You dont have permission to edit this content');\n            }\n        } elseif ($is_admin == false) {\n            return array('error' => 'Not logged in as admin to use ' . __FUNCTION__);\n        }\n\n\n        foreach ($the_field_data_all as $the_field_data) {\n            $save_global = false;\n            $save_layout = false;\n\n            if (isset($page_id) and $page_id != 0 and !empty($the_field_data)) {\n                $save_global = false;\n\n                $content_id = $page_id;\n\n                $url = $this->app->url_manager->string(true);\n                $some_mods = array();\n                if (isset($the_field_data) and is_array($the_field_data) and isset($the_field_data['attributes'])) {\n                    if (isset($the_field_data['html'])) {\n                        $field = false;\n                        if (isset($the_field_data['attributes']['field'])) {\n                            $field = trim($the_field_data['attributes']['field']);\n                        }\n\n                        if (isset($the_field_data['attributes']['data-field'])) {\n                            $field = $the_field_data['attributes']['field'] = trim($the_field_data['attributes']['data-field']);\n                        }\n\n                        if (($field != false)) {\n                            $page_element_id = $field;\n                        }\n                        if (!isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = 'content';\n                        } else {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        if (isset($the_field_data['attributes']['rel-id'])) {\n                            $content_id = $the_field_data['attributes']['rel-id'];\n                        } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                            $content_id = $the_field_data['attributes']['rel_id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel-id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel_id'];\n                        }\n\n                        $save_global = false;\n                        if (isset($the_field_data['attributes']['rel_type']) and (trim($the_field_data['attributes']['rel_type']) == 'global' or trim($the_field_data['attributes']['rel_type'])) == 'module') {\n                            $save_global = true;\n                        } else {\n                            $save_global = false;\n                        }\n                        if (isset($the_field_data['attributes']['rel_type']) and trim($the_field_data['attributes']['rel_type']) == 'layout') {\n                            $save_global = false;\n                            $save_layout = true;\n                        } else {\n                            $save_layout = false;\n                        }\n                        if (isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        if (!isset($the_field_data['attributes']['data-id'])) {\n                            $the_field_data['attributes']['data-id'] = $content_id;\n                        }\n\n\n                        if (isset($the_field_data['attributes']['rel_type']) and isset($the_field_data['attributes']['data-id'])) {\n                            $rel_ch = trim($the_field_data['attributes']['rel_type']);\n                            switch ($rel_ch) {\n                                case 'content':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $the_field_data['attributes']['data-id'];\n                                    break;\n                                case 'page':\n\n                                case 'post':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $page_id;\n                                    break;\n\n                                case 'module':\n                                    $save_global = true;\n                                    break;\n                                case 'page':\n                                default:\n                                    break;\n                            }\n                        }\n\n                        $inh = false;\n\n                        if (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'inherit') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $inh = $this->app->content_manager->get_inherited_parent($page_id);\n                            if ($inh != false) {\n                                $content_id_for_con_field = $content_id = $inh;\n                            }\n                        } elseif (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'page') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $check_if_page = $this->get_by_id($content_id);\n                            if (is_array($check_if_page)\n                                and isset($check_if_page['content_type'])\n                                and isset($check_if_page['parent'])\n                                and $check_if_page['content_type'] != ''\n                                and intval($check_if_page['parent']) != 0\n                                and $check_if_page['content_type'] != 'page'\n                            ) {\n                                $inh = $check_if_page['parent'];\n                                if ($inh != false) {\n                                    $content_id_for_con_field = $content_id = $inh;\n                                }\n                            }\n                        }\n\n                        $save_layout = false;\n                        if (isset($post_data['id'])) {\n                            $content_id_for_con_field = $post_data['id'];\n                        } elseif ($inh == false and !isset($content_id_for_con_field)) {\n                            if (isset($ref_page)) {\n\n\n                                if (is_array($ref_page) and isset($ref_page['parent']) and isset($ref_page['content_type']) and $ref_page['content_type'] != 'page') {\n                                    $content_id_for_con_field = intval($ref_page['parent']);\n                                } else {\n                                    $content_id_for_con_field = intval($ref_page['id']);\n                                }\n                            }\n                        }\n                        $html_to_save = $the_field_data['html'];\n                        $html_to_save = $content = $this->app->parser->make_tags($html_to_save);\n\n                        if ($save_global == false and $save_layout == false) {\n                            if ($content_id) {\n\n                                $for_histroy = get_content_by_id($content_id);\n\n                                $for_histroy['custom_fields'] = $this->app->content_manager->custom_fields($content_id, false);\n\n\n                                $old = false;\n                                $field123 = str_ireplace('custom_field_', '', $field);\n                                if (stristr($field, 'custom_field_')) {\n                                    $old = $for_histroy['custom_fields'][$field123];\n                                } else {\n                                    if (isset($for_histroy['custom_fields'][$field123])) {\n                                        $old = $for_histroy['custom_fields'][$field123];\n                                    } elseif (isset($for_histroy[$field])) {\n                                        $old = $for_histroy[$field];\n                                    }\n                                }\n\n\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'content';\n                                $history_to_save['id'] = $content_id;\n                                $history_to_save['value'] = $old;\n                                $history_to_save['field'] = $field;\n\n                                $cont_field = array();\n                                $cont_field['rel_type'] = $rel_ch;\n                                $cont_field['field'] = $field;\n                                $cont_field['rel_id'] = $content_id_for_con_field;\n                                $cont_field['value'] = $html_to_save;\n\n                                if ($is_draft != false) {\n                                    $cont_id = $content_id_for_con_field;\n                                    $cont_field['is_draft'] = 1;\n                                    $cont_field['rel_type'] = $rel_ch;\n                                    $cont_field['url'] = $url;\n                                    $to_save_draft = true;\n                                    if (isset($cont_field['value'])) {\n                                        $draftmd5 = md5($cont_field['value']);\n\n                                        $draftmd5_last = $this->app->user_manager->session_get('content_draft_save_md5');\n                                        if ($draftmd5_last == $draftmd5) {\n                                            $to_save_draft = false;\n                                        } else {\n                                            $this->app->user_manager->session_set('content_draft_save_md5', $draftmd5);\n                                        }\n                                    }\n                                    if ($to_save_draft) {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    }\n                                } else {\n                                    if ($field != 'content') {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    } else {\n                                        $cont_table_save = array();\n\n                                    }\n                                }\n                                $this->app->event_manager->trigger('mw.content.save_edit', $cont_field);\n\n                                $to_save = array();\n                                $to_save['id'] = $content_id;\n\n                                $is_native_fld = $this->app->database_manager->get_fields('content');\n                                if (in_array($field, $is_native_fld)) {\n                                    $to_save[$field] = ($html_to_save);\n                                }\n\n                                if ($is_no_save != true and $is_draft == false) {\n                                    $to_save2 = $to_save;\n                                    //   $to_save2['rel_type'] = 'content';\n                                    $to_save2['rel_type'] = $rel_ch;\n                                    $to_save2['rel_id'] = $content_id_for_con_field;\n                                    $to_save2['field'] = $field;\n                                    $json_print[] = $to_save2;\n\n                                    $saved = $this->app->content_manager->save_content_admin($to_save);\n\n                                }\n                            } elseif (isset($category_id)) {\n                                echo __FILE__ . __LINE__ . ' category is not implemented ... not ready yet';\n                            }\n                        } else {\n                            $cont_field = array();\n                            $cont_field['rel_type'] = $the_field_data['attributes']['rel_type'];\n                            $cont_field['rel_id'] = 0;\n                            if (isset($the_field_data['attributes']['rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel-id'];\n                            } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel_id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['content-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['content-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['data-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel_id'];\n                            }\n                            $cont_field['value'] = $this->app->parser->make_tags($html_to_save);\n                            if ((!isset($the_field_data['attributes']['field']) or $the_field_data['attributes']['field'] == '') and isset($the_field_data['attributes']['data-field'])) {\n                                $the_field_data['attributes']['field'] = $the_field_data['attributes']['data-field'];\n                            }\n                            $cont_field['field'] = $the_field_data['attributes']['field'];\n\n\n                            if ($cont_field['rel_type'] == 'module') {\n                                $cont_field['rel_id'] = 0;\n                            }\n\n\n                            if ($is_draft != false) {\n                                $cont_field['is_draft'] = 1;\n                                $cont_field['url'] = $this->app->url_manager->string(true);\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            } else {\n\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            }\n\n                            if ($save_global == true and $save_layout == false) {\n\n\n                                $json_print[] = $cont_field;\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'global';\n                                $history_to_save['value'] = $cont_field['value'];\n                                $history_to_save['field'] = $field;\n                                $history_to_save['page_element_id'] = $page_element_id;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (isset($opts_saved)) {\n            $this->app->cache_manager->delete('options');\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('repositories');\n\n        return $json_print;\n    }\n\n    public function get_edit_field_draft($data)\n    {\n        $page = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == $this->app->url_manager->site()) {\n                $page = $this->app->content_manager->homepage();\n\n            } else {\n                $page = $this->get_by_url($url);\n            }\n        } else {\n            $url = $this->app->url_manager->string();\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $table_drafts = $this->tables['content_fields_drafts'];\n\n        $data = parse_params($data);\n\n        if (isset($data['id']) and $data['id'] == 'latest_content_edit') {\n            if (isset($page['id'])) {\n                $page_data = $this->get_by_id($page['id']);\n\n                $results = array();\n                if (isset($page_data['title'])) {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'title',\n                        'value' => $page_data['title'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                }\n                if (isset($page_data['content']) and $page_data['content'] != '') {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'content',\n                        'value' => $page_data['content'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                }\n                //$results[]\n            }\n        } else {\n            $data['is_draft'] = 1;\n            $data['full'] = 1;\n            $data['all'] = 1;\n            $results = $this->get_edit_field($data);\n        }\n\n        $ret = array();\n\n        if (!isset($results) or $results == false) {\n            return;\n        }\n\n        $i = 0;\n        foreach ($results as $item) {\n            if (isset($item['value'])) {\n                $field_content = htmlspecialchars_decode($item['value']);\n                $field_content = $this->_decode_entities($field_content);\n                $item['value'] = $this->app->parser->process($field_content, $options = false);\n            }\n\n            $ret[$i] = $item;\n            ++$i;\n        }\n\n        return $ret;\n    }\n\n    public function save_content_field($data, $delete_the_cache = true)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        $table = $this->tables['content_fields'];\n     //    $table_drafts = $this->tables['content_fields_drafts'];\n        $table_drafts = 'content_revisions_history';\n\n        if ($adm == false) {\n            return false;\n        }\n\n        if (!is_array($data)) {\n            $data = array();\n        }\n\n        if (isset($data['is_draft']) and $data['is_draft']) {\n            $table = $table_drafts;\n        }\n\n        $data = $this->app->format->strip_unsafe($data);\n\n        if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n            $draft_url = $this->app->database_manager->escape_string($data['url']);\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-1 week'));\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-5 min'));\n            $history_files_params = array();\n            $history_files_params['order_by'] = 'id desc';\n            $history_files_params['fields'] = 'id';\n            $history_files_params['field'] = $data['field'];\n            $history_files_params['rel_type'] = $data['rel_type'];\n            $history_files_params['rel_id'] = $data['rel_id'];\n            $history_files_params['is_draft'] = 1;\n            $history_files_params['limit'] = 200;\n            $history_files_params['limit'] = 20;\n            $history_files_params['no_cache'] = true;\n\n            $history_files_params['url'] = $draft_url;\n            $history_files_params['current_page'] = 2;\n            $history_files_params['created_at'] = '[lt]' . $last_saved_date;\n            $history_files = $this->get_edit_field($history_files_params);\n\n            if (is_array($history_files)) {\n                $history_files_ids = $this->app->format->array_values($history_files);\n            }\n\n            if (isset($history_files_ids) and is_array($history_files_ids) and !empty($history_files_ids)) {\n\n                foreach ($history_files_ids as $item) {\n                    $this->app->database_manager->delete_by_id($table, $item);\n                }\n\n            }\n        }\n        if (!isset($data['rel_type']) or !isset($data['rel_id'])) {\n            mw_error('Error: ' . __FUNCTION__ . ' rel and rel_id is required');\n        }\n        /*\n                if (isset($data['field']) and !isset($data['is_draft'])) {\n                    $fld = $this->app->database_manager->escape_string($data['field']);\n                    $fld_rel = $this->app->database_manager->escape_string($data['rel_type']);\n                    $del_params = array();\n                    $del_params['rel_type'] = $fld_rel;\n                    $del_params['field'] = $fld;\n                    $del_params['table'] = $table;\n                    $del_params['no_cache'] = true;\n\n                    if ($fld_rel != 'module') {\n                        if (isset($data['rel_id'])) {\n                            $i = ($data['rel_id']);\n                            $del_params['rel_id'] = $i;\n                        } else {\n                            $del_params['rel_id'] = 0;\n                        }\n                    }\n                    $del = $this->app->database_manager->get($del_params);\n\n\n                    if (!empty($del)) {\n                        foreach ($del as $item) {\n                            // TODO\n                            $this->app->database_manager->delete_by_id($table, $item['id']);\n                        }\n                    }\n                    $cache_group = guess_cache_group('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n                    $this->app->cache_manager->delete($cache_group);\n                }*/\n\n\n        if (isset($fld)) {\n            $this->app->cache_manager->delete('content_fields/' . $fld);\n            $this->app->cache_manager->delete('content_fields/global/' . $fld);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $cache_group = guess_cache_group('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n            $this->app->cache_manager->delete($cache_group);\n            $this->app->cache_manager->delete('content/' . $data['rel_id']);\n        }\n        if (isset($data['rel_type'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type']);\n        }\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n            $this->app->cache_manager->delete('content_fields/global/' . $data['rel_type'] . '/' . $data['rel_id']);\n        }\n        if (isset($data['field'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['field']);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        $data['table'] = $table;\n        $data['allow_html'] = 1;\n\n\n        // Find existing\n        $filter = array();\n        $filter['field'] = $data['field'];\n        $filter['rel_type'] = $data['rel_type'];\n        $filter['rel_id'] = $data['rel_id'];\n        $filter['one'] = 1;\n        $filter['no_cache'] = true;\n\n         if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n\n          //   $find = $this->app->database_manager->get($table, $filter);\n\n\n             $find = false;\n             //delete old drafts\n             $old = \\DB::table($table)\n                 ->where('rel_type', $data['rel_type'])\n                 ->where('rel_id', $data['rel_id'])\n                 ->where('field', $data['field'])\n                 ->where('url', $data['url'])\n                 ->take(1000)\n                 ->skip(1000)\n                 ->get();\n             if (!empty($old)){\n                 foreach ($old as $item) {\n                     \\DB::table($table)->where('id', $item->id)->delete();\n                 }\n             }\n\n         }  else {\n\n\n\n              $find = $this->app->database_manager->get($table, $filter);\n\n         }\n\n        if ($find and isset($find['id'])) {\n            $data['id'] = $find['id'];\n        }\n\n        $save = $this->app->database_manager->save($data);\n\n        $this->app->cache_manager->delete('content_fields');\n\n        return $save;\n    }\n\n    private function _decode_entities($text)\n    {\n        $text = html_entity_decode($text, ENT_QUOTES, 'ISO-8859-1'); #NOTE: UTF-8 does not work!\n        $text = preg_replace('/&#(\\d+);/m', 'chr(\\\\1)', $text); #decimal notation\n        $text = preg_replace('/&#x([a-f0-9]+);/mi', 'chr(0x\\\\1)', $text); #hex notation\n        return $text;\n    }\n\n    public function download_remote_images_from_text($text)\n    {\n        $site_url = $this->app->url_manager->site();\n        $images = $this->app->parser->query($text, 'img');\n        $to_download = array();\n        $to_replace = array();\n        $possible_sources = array();\n\n        if (!empty($images)) {\n            foreach ($images as $image) {\n                $srcs = array();\n                preg_match('/src=\"([^\"]*)\"/i', $image, $srcs);\n                if (!empty($srcs) and isset($srcs[1]) and $srcs[1] != false) {\n                    $possible_sources[] = $srcs[1];\n                }\n            }\n        }\n\n        if (!empty($possible_sources)) {\n            foreach ($possible_sources as $image_src) {\n                if (!stristr($image_src, $site_url)) {\n                    $to_replace[] = $image_src;\n                    $image_src = strtok($image_src, '?');\n                    $ext = get_file_extension($image_src);\n                    switch (strtolower($ext)) {\n                        case 'jpg':\n                        case 'jpeg':\n                        case 'png':\n                        case 'gif':\n                        case 'svg':\n                            $to_download[] = $image_src;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n\n        if (!empty($to_download)) {\n            $to_download = array_unique($to_download);\n\n            if (!empty($to_download)) {\n                foreach ($to_download as $src) {\n                    $dl_dir = media_base_path() . 'downloaded' . DS;\n                    if (!is_dir($dl_dir)) {\n                        mkdir_recursive($dl_dir);\n                    }\n                    $dl_file = $dl_dir . md5($src) . basename($src);\n                    if (!is_file($dl_file)) {\n                        $is_dl = $this->app->url_manager->download($src, false, $dl_file);\n                    }\n                    if (is_file($dl_file)) {\n                        $url_local = dir2url($dl_file);\n                        $text = str_ireplace($src, $url_local, $text);\n                    }\n                }\n            }\n        }\n\n        return $text;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace MicroweberPackages\\Content;\n\nuse Content;\nuse ContentFields;\nuse Illuminate\\Support\\Facades\\Cache;\nuse DB;\nuse MicroweberPackages\\Category\\Models\\CategoryItem;\nuse MicroweberPackages\\Menu\\Menu;\nuse MicroweberPackages\\App\\Http\\Controllers\\FrontendController;\nuse voku\\helper\\AntiXSS;\n\nclass ContentManagerHelpers extends ContentManagerCrud\n{\n    public function add_content_to_menu($content_id, $menu_id = false)\n    {\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        $new_item = false;\n        $id = $this->app->user_manager->is_admin();\n        if (defined('MW_API_CALL') and $id == false) {\n            return;\n        }\n        if (isset($content_id['id'])) {\n            $content_id = $content_id['id'];\n        }\n\n        $content_id = intval($content_id);\n        if ($content_id == 0 or !isset($this->tables['menus'])) {\n            return;\n        }\n        if ($menu_id != false) {\n            //  $_REQUEST['add_content_to_menu'] = array( $menu_id);\n        }\n\n        $menus = $this->tables['menus'];\n        if (isset($_REQUEST['add_content_to_menu']) and is_array($_REQUEST['add_content_to_menu'])) {\n            $add_to_menus = $_REQUEST['add_content_to_menu'];\n            $add_to_menus_int = array();\n            foreach ($add_to_menus as $value) {\n                if ($value == 'remove_from_all') {\n                    Menu::where('content_id', $content_id)->where('item_type', 'menu_item')->delete();\n                    $this->app->cache_manager->delete('menus');\n                }\n                $value = intval($value);\n                if ($value > 0) {\n                    $add_to_menus_int[] = $value;\n                }\n            }\n        }\n\n        $add_under_parent_page = false;\n        $content_data = false;\n\n        if (isset($_REQUEST['add_content_to_menu_auto_parent']) and ($_REQUEST['add_content_to_menu_auto_parent']) != false) {\n            $add_under_parent_page = true;\n            $content_data = $this->get_by_id($content_id);\n            if ($content_data['is_active'] != 1) {\n                return false;\n            }\n        }\n        if (!isset($add_to_menus_int) or empty($add_to_menus_int)) {\n            if ($menu_id != false) {\n                $add_to_menus_int[] = intval($menu_id);\n            }\n        }\n\n        if (isset($add_to_menus_int) and is_array($add_to_menus_int)) {\n            Menu::where('content_id', $content_id)\n                ->where('item_type', 'menu_item')\n                ->whereNotIn('parent_id', $add_to_menus_int)\n                ->delete();\n            foreach ($add_to_menus_int as $value) {\n                //  $check = $this->app->menu_manager->get_menu_items(\"parent_id={$value}&content_id=$content_id\");\n\n                $check = Menu::where('content_id', $content_id)\n                    ->where('item_type', 'menu_item')\n                    ->where('parent_id', $value)\n                    ->count();\n\n                if ($check == 0) {\n                    $save = array();\n                    $save['item_type'] = 'menu_item';\n                    $save['is_active'] = 1;\n                    $save['parent_id'] = $value;\n                    $save['position'] = 999999;\n                    if ($add_under_parent_page != false and is_array($content_data) and isset($content_data['parent'])) {\n                        $parent_cont = $content_data['parent'];\n                        $check_par = $this->app->menu_manager->get_menu_items(\"limit=1&one=1&content_id=$parent_cont\");\n                        if (is_array($check_par) and isset($check_par['id'])) {\n                            $save['parent_id'] = $check_par['id'];\n                        }\n                    }\n\n                    $save['url'] = '';\n                    $save['content_id'] = $content_id;\n\n                    $new_item = $this->app->database_manager->save($menus, $save);\n\n                    $this->app->cache_manager->delete('menus');\n\n                    $this->app->cache_manager->delete('menus/' . $save['parent_id']);\n\n                    $this->app->cache_manager->delete('menus/' . $value);\n\n                    $this->app->cache_manager->delete('content/' . $content_id);\n                }\n            }\n\n            $this->app->cache_manager->delete('menus');\n            $this->app->cache_manager->delete('menus');\n        }\n\n        return $new_item;\n    }\n\n    public function delete($data)\n    {\n\n        $to_trash = true;\n        $to_untrash = false;\n\n        if (!is_array($data)) {\n            $del_data = array();\n            $del_data['id'] = intval($data);\n            $data = $del_data;\n            $to_trash = false;\n        }\n\n        if (isset($data['forever']) or isset($data['delete_forever'])) {\n            $to_trash = false;\n        }\n\n        if (isset($data['undelete'])) {\n            $to_trash = true;\n            $to_untrash = true;\n        }\n\n        $del_ids = array();\n        if (isset($data['id'])) {\n            $c_id = intval($data['id']);\n            $del_ids[] = $c_id;\n            if ($to_trash == false) {\n                $this->app->database_manager->delete_by_id('content', $c_id);\n            }\n        }\n        $this->app->event_manager->trigger('content.before.delete', $data);\n\n        if (isset($data['ids']) and is_array($data['ids'])) {\n\n            foreach ($data['ids'] as $value) {\n                $c_id = intval($value);\n                if ($c_id) {\n                    $del_ids[] = $c_id;\n                    if ($to_trash == false) {\n                        $this->app->database_manager->delete_by_id('content', $c_id);\n                    }\n                }\n            }\n        }\n//dd($del_ids);\n        if (!empty($del_ids)) {\n            //DB::transaction(function () use ($del_ids, $to_untrash, $to_trash) {\n            foreach ($del_ids as $value) {\n                $c_id = intval($value);\n\n                if ($c_id) {\n                    if ($to_untrash == true) {\n                        DB::table($this->tables['content'])->whereId($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        DB::table($this->tables['content'])->whereParent($c_id)->whereIsDeleted(1)->update(['is_deleted' => 0]);\n\n                        if (isset($this->tables['categories'])) {\n                            DB::table($this->tables['categories'])->whereRelId($c_id)->whereRelType('content')->whereIsDeleted(1)->update(['is_deleted' => 0]);\n                        }\n                    } elseif ($to_trash == false) {\n                        DB::table($this->tables['content'])->whereParent($c_id)->update(['parent' => 0]);\n\n                        $this->app->database_manager->delete_by_id('menus', $c_id, 'content_id');\n\n                        if (isset($this->tables['media'])) {\n                            DB::table('media')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n\n                        if (isset($this->tables['categories'])) {\n                            DB::table('categories')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n\n                        if (isset($this->tables['categories_items'])) {\n                            DB::table('categories_items')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n                        if (isset($this->tables['custom_fields'])) {\n                            DB::table('custom_fields')->where('rel_id', '=', $c_id)->where('rel_type', '=', 'content')->delete();\n                        }\n\n                        if (isset($this->tables['content_data'])) {\n                            DB::table('content_data')->where('content_id', '=', $c_id)->delete();\n                        }\n\n                        if (isset($this->tables['menus'])) {\n                            DB::table('menus')->where('content_id', '=', $c_id)->delete();\n                        }\n                    } else {\n                        DB::table($this->tables['content'])->whereId($c_id)->update(['is_deleted' => 1]);\n                        DB::table($this->tables['content'])->whereParent($c_id)->update(['is_deleted' => 1]);\n\n                        if (isset($this->tables['categories'])) {\n                            DB::table($this->tables['categories'])->whereRelId($c_id)->whereRelType('content')->update(['is_deleted' => 1]);\n                        }\n                    }\n                    $this->app->cache_manager->delete('content/' . $c_id);\n                }\n            }\n            // });\n        }\n        $this->app->cache_manager->delete('menus');\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('categories');\n        $this->app->cache_manager->delete('content');\n\n        return $del_ids;\n    }\n\n    public function reset_modules_settings($modules_ids)\n    {\n        if (isset($modules_ids['modules_ids'])) {\n            $modules_ids = $modules_ids['modules_ids'];\n        }\n        //data.\n\n        if (is_array($modules_ids) and !empty($modules_ids)) {\n            foreach ($modules_ids as $modules_id) {\n                if ($modules_id) {\n                    \\DB::table('options')->where('option_group', '=', $modules_id)->delete();\n                    \\DB::table('media')->where('rel_type', '=', 'modules')->where('rel_id', '=', $modules_id)->delete();\n                }\n            }\n            $this->app->cache_manager->delete('options');\n            $this->app->cache_manager->delete('media');\n\n        }\n        return true;\n    }\n\n    public function reset_edit_field($data)\n    {\n        if ($data) {\n            if (isset($data['reset'])) {\n                $data = $data['reset'];\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.before', $data);\n\n            foreach ($data as $item) {\n                if (isset($item['rel']) and ($item['rel'])) {\n                    if (isset($item['field']) and ($item['field'])) {\n\n                        $del = \\DB::table($this->tables['content_fields'])\n                            ->where('rel_type', '=', $item['rel'])\n                            ->where('field', '=', $item['field']);\n\n\n                        $del = $del->delete();\n\n\n                    }\n                }\n            }\n\n            $this->app->event_manager->trigger('content.reset_edit_field.after', $data);\n\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n\n        return true;\n\n\n    }\n\n    public function bulk_assign($data)\n    {\n        if (is_string($data)) {\n            $data = parse_params($data);\n        }\n\n        if (isset($data['content_ids'])) {\n            $content_ids = $data['content_ids'];\n\n            if (is_array($content_ids)) {\n                foreach ($content_ids as $content_id) {\n                    $to_save = array();\n                    $to_save['id'] = $content_id;\n                    $to_save['skip_timestamps'] = true;\n                    if (isset($data['parent_id'])) {\n                        $to_save['parent'] = $data['parent_id'];\n                    }\n                    if (isset($data['categories'])) {\n                        $to_save['categories'] = $data['categories'];\n                        CategoryItem::where('rel_id', $content_id)->where('rel_type', 'content')->delete();\n                    }\n                    $this->app->content_manager->save_content($to_save);\n                }\n            }\n        }\n\n        return array('success' => 'Content is moved');\n    }\n\n    public function create_default_content($what)\n    {\n        if (defined('MW_NO_DEFAULT_CONTENT')) {\n            return true;\n        }\n\n        switch ($what) {\n            case 'shop' :\n                $is_shop = $this->get('content_type=page&is_shop=0');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n\n                    $add_page['title'] = _e('Online shop', true);\n                    $add_page['url'] = 'shop';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = '1';\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (isset($item['layout_file']) and isset($item['is_shop'])) {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('custom_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                $posts = $this->get('content_type=post&parent=' . $new_shop);\n                if ($posts == false and $new_shop != false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = $new_shop;\n                    $add_page['title'] = 'My product';\n                    $add_page['url'] = 'my-product';\n                    $add_page['content_type'] = 'post';\n                    $add_page['subtype'] = 'product';\n                    $add_page['is_active'] = 1;\n                    //$new_shop = $this->save_content($add_page);\n                    //$this->app->cache_manager->delete('content');\n                    //$this->app->cache_manager->clear();\n                }\n\n                break;\n\n            case 'blog' :\n                $is_shop = $this->get('is_deleted=0&content_type=page&subtype=dynamic&is_shop=1&limit=1');\n                //$is_shop = false;\n                $new_shop = false;\n                if ($is_shop == false) {\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['is_active'] = 1;\n                    $add_page['title'] = _e('Blog', true);\n                    $add_page['url'] = 'blog';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'dynamic';\n                    $add_page['is_shop'] = 0;\n                    $add_page['active_site_template'] = 'default';\n                    $find_layout = $this->app->layouts_manager->scan();\n                    if (is_array($find_layout)) {\n                        foreach ($find_layout as $item) {\n                            if (!isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n\n                        foreach ($find_layout as $item) {\n                            if (isset($item['name']) and stristr($item['name'], 'blog') and !isset($item['is_shop']) and isset($item['layout_file']) and isset($item['content_type']) and trim(strtolower($item['content_type'])) == 'dynamic') {\n                                $add_page['layout_file'] = $item['layout_file'];\n                                if (isset($item['name'])) {\n                                    $add_page['title'] = $item['name'];\n                                }\n                            }\n                        }\n                    }\n\n                    $new_shop = $this->app->database_manager->save('content', $add_page);\n                    $this->app->cache_manager->delete('content');\n                    $this->app->cache_manager->delete('categories');\n                    $this->app->cache_manager->delete('content_fields');\n\n                    //\n                } else {\n                    if (isset($is_shop[0])) {\n                        $new_shop = $is_shop[0]['id'];\n                    }\n                }\n\n                break;\n\n            case 'default' :\n            case 'install' :\n                $any = $this->get('count=1&content_type=page&limit=1');\n                if (intval($any) == 0) {\n                    $table = $this->tables['content'];\n                    mw_var('FORCE_SAVE_CONTENT', $table);\n                    mw_var('FORCE_SAVE', $table);\n\n                    $add_page = array();\n                    $add_page['id'] = 0;\n                    $add_page['parent'] = 0;\n                    $add_page['title'] = 'Home';\n                    $add_page['url'] = 'home';\n                    $add_page['content_type'] = 'page';\n                    $add_page['subtype'] = 'static';\n                    $add_page['is_shop'] = 0;\n                    //$add_page['debug'] = 1;\n                    $add_page['is_active'] = 1;\n                    $add_page['is_home'] = 1;\n                    $add_page['active_site_template'] = 'default';\n                    $new_shop = $this->save_content($add_page);\n                }\n\n                break;\n\n            default :\n                break;\n        }\n    }\n\n    public function copy($data)\n    {\n        $new_cont_id = false;\n\n        if (defined('MW_API_CALL')) {\n            $to_trash = true;\n            $adm = $this->app->user_manager->is_admin();\n            if ($adm == false) {\n                return array('error' => 'You must be admin to copy content!');\n            }\n        }\n        if (isset($data['id'])) {\n            $this->app->event_manager->trigger('content.before.copy', $data);\n            $cont = get_content_by_id($data['id']);\n            if ($cont != false and isset($cont['id'])) {\n                $new_cont = $cont;\n                if (isset($new_cont['title'])) {\n                    $new_cont['title'] = $new_cont['title'] . ' copy';\n                }\n\n                $new_cont['id'] = 0;\n                $content_cats = array();\n\n                $cats = content_categories($cont['id']);\n                if (!empty($cats)) {\n                    foreach ($cats as $cat) {\n                        if (isset($cat['id'])) {\n                            $content_cats[] = $cat['id'];\n                        }\n                    }\n                }\n                if (!empty($content_cats)) {\n                    $new_cont['categories'] = $content_cats;\n                }\n\n                if (isset($new_cont['is_home'])) {\n                    unset($new_cont['is_home']);\n                }\n\n                if (isset($new_cont['content'])) {\n                    $new_cont['content'] = $this->app->parser->make_tags($new_cont['content'], array('change_module_ids' => true));\n\n                }\n\n                if (isset($new_cont['content_body'])) {\n                    $new_cont['content_body'] = $this->app->parser->make_tags($new_cont['content_body'], array('change_module_ids' => true));\n                }\n\n\n                $new_cont_id = $this->save($new_cont);\n\n                $cust_fields = get_custom_fields('content', $data['id'], true);\n                if (!empty($cust_fields)) {\n                    foreach ($cust_fields as $cust_field) {\n                        $new = $cust_field;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_custom_field($new);\n                    }\n                }\n                $images = get_pictures($data['id']);\n                if (!empty($images)) {\n                    foreach ($images as $image) {\n                        $new = $image;\n                        $new['id'] = 0;\n                        $new['rel_id'] = $new_cont_id;\n                        $new['rel_type'] = 'content';\n                        $new_item = save_media($new);\n                    }\n                }\n            }\n        }\n\n        return $new_cont_id;\n    }\n\n    public function related_content_add($data)\n    {\n        if (isset($data['content_id']) and isset($data['related_content_id'])) {\n            $related = ContentRelated::firstOrCreate(\n                ['content_id' => $data['content_id'], 'related_content_id' => $data['related_content_id']]\n            );\n            $related->position = 0;\n            $related->save();\n\n            $this->app->cache_manager->delete('content');\n\n            return $related;\n        }\n    }\n\n    public function related_content_remove($data)\n    {\n        if (isset($data['id'])) {\n            $related = ContentRelated::where(\n                'id', $data['id']\n            )->delete();\n\n            $this->app->cache_manager->delete('content');\n\n            return true;\n        }\n    }\n\n\n    public function related_content_reorder($data)\n    {\n\n\n        if (isset($data['ids'])) {\n            $value = $data['ids'];\n            if (is_array($value)) {\n                $indx = array();\n                $i = 1;\n                foreach ($value as $value2) {\n                    $indx[$i] = $value2;\n\n                    ++$i;\n                }\n                $this->app->database_manager->update_position_field('content_related', $indx);\n                $return_res = $indx;\n            }\n        }\n\n        $this->app->cache_manager->delete('content_related');\n\n        $this->app->cache_manager->delete('content');\n\n\n    }\n\n    public function save_from_live_edit($post_data)\n    {\n        $is_module = false;\n\n\n        if (php_can_use_func('ini_set')) {\n            @ini_set('memory_limit', '512M');\n        }\n\n        if (php_can_use_func('set_time_limit')) {\n            set_time_limit(60);\n        }\n\n        $save_as_draft = false;\n        if (isset($post_data['save_draft'])) {\n            $save_as_draft = true;\n            unset($post_data['save_draft']);\n        }\n\n        $json_print = array();\n\n\n        $is_admin = $this->app->user_manager->is_admin();\n        if ($post_data) {\n            if (isset($post_data['data_base64'])) {\n\n                if (!php_can_use_func('base64_decode')) {\n                    return array('error' => 'The base64_decode function must be enabled. Please enable base64_decode function in php.ini');\n                }\n\n                $post_data['json_obj'] = @base64_decode($post_data['data_base64']);\n            }\n            if (isset($post_data['json_obj'])) {\n                $obj = json_decode($post_data['json_obj'], true);\n                $post_data = $obj;\n            }\n            if (isset($post_data['mw_preview_only'])) {\n                $is_no_save = true;\n                unset($post_data['mw_preview_only']);\n            }\n            $is_no_save = false;\n            $is_draft = false;\n            if (isset($post_data['is_draft'])) {\n                unset($post_data['is_draft']);\n                $is_draft = 1;\n            }\n            $the_field_data_all = $post_data;\n        } else {\n            return array('error' => 'no POST?');\n        }\n\n        $ustr2 = $this->app->url_manager->string(1, 1);\n\n        if (isset($ustr2) and trim($ustr2) == 'favicon.ico') {\n            return false;\n        }\n        $ref_page_url = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $ref_page_url = $_SERVER['HTTP_REFERER'];\n        }\n\n        if (isset($post_data['id']) and intval($post_data['id']) > 0) {\n            $page_id = intval($post_data['id']);\n        } elseif ($ref_page_url != '') {\n            //removing hash from url\n            if (strpos($ref_page_url, '#')) {\n                $ref_page_url = substr($ref_page_url, 0, strpos($ref_page_url, '#'));\n            }\n\n            $slug_page = $this->app->permalink_manager->slug($ref_page_url, 'page');\n            $slug_post = $this->app->permalink_manager->slug($ref_page_url, 'post');\n            $slug_category = $this->app->permalink_manager->slug($ref_page_url, 'category');\n\n            if ($slug_page) {\n                $ref_post = false;\n                if ($slug_post) {\n\n                    $ref_post = $this->get_by_url($slug_post);\n\n                }\n\n                if ($ref_post) {\n                    $ref_page2 = $ref_page = $ref_post;\n\n                } else {\n                    $ref_page2 = $ref_page = $this->get_by_url($slug_page);\n\n\n                }\n\n\n            } elseif ($slug_category) {\n                $cat = $this->app->category_manager->get_by_url($slug_category);\n                if ($cat) {\n                    $content_for_cat = $this->app->category_manager->get_page($cat['id']);\n                    if ($content_for_cat) {\n                        $ref_page2 = $ref_page = $content_for_cat;\n                    }\n                }\n            }\n\n\n            if (isset($ref_page2)) {\n                if ($ref_page2 == false) {\n                    $ustr = $this->app->url_manager->string(1);\n\n                    if ($this->app->module_manager->is_installed($ustr)) {\n                        $ref_page = false;\n                    }\n                } else {\n                    $ref_page = $ref_page2;\n                }\n            }\n\n\n            if (isset($ustr) and trim($ustr) == 'favicon.ico') {\n                return false;\n            } elseif ($ustr2 == '' or $ustr2 == '/') {\n                $ref_page = $this->app->content_manager->homepage();\n                if ($ref_page_url) {\n                    $page_url_ref = $this->app->url_manager->param('content_id', $ref_page_url);\n                    if ($page_url_ref !== false) {\n                        if ($page_url_ref == 0) {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            if (!isset($ref_page) or $ref_page == false) {\n                $guess_page_data = new FrontendController();\n                // $guess_page_data =  new  $this->app->controller($this->app);\n                $ref_page_url = strtok($ref_page_url, '?');\n\n\n                $guess_page_data->page_url = $ref_page_url;\n                $guess_page_data->return_data = true;\n                $guess_page_data->create_new_page = true;\n                $pd = $guess_page_data->index();\n                if (isset($pd['id'])) {\n                    $pd1 = DB::table('content')->where('id', $pd['id'])->first();\n                    $pd1 = (array)$pd1;\n                    if ($pd1) {\n                        $pd = $pd1;\n                    }\n\n                }\n\n                $ustr = $this->app->url_manager->string(1);\n                $is_module = false;\n                $pd['url'] = $ustr;\n\n                if (isset($pd['active_site_template']) and $pd['active_site_template'] == template_name()) {\n                    $pd['active_site_template'] = '';\n                }\n\n                if ($this->app->module_manager->is_installed($ustr)) {\n                    $is_module = true;\n                    $save_page['layout_file'] = 'clean.php';\n                    $save_page['subtype'] = 'module';\n                    $hp_id = $this->app->content_manager->homepage();\n                    if (isset($hp_id['id'])) {\n                        $page_id = $hp_id['id'];\n                    } else {\n                        $page_id = 1;\n                    }\n                    $is_module = 1;\n                    $save_page = false;\n                }\n\n                if ($is_admin == true and is_array($pd) and $is_module == false) {\n                    $save_page = $pd;\n                    if (!isset($_GET['mw_quick_edit'])) {\n                        if (isset($ref_page_url) and $ref_page_url != false) {\n                            $save_page['url'] = $ref_page_url;\n                        } else {\n                            $save_page['url'] = $this->app->url_manager->string(1);\n                        }\n                        $title = str_replace('%20', ' ', ($this->app->url_manager->string(1)));\n\n                        if ($title == 'editor_tools/wysiwyg' or $title == 'api/module' or $title == 'admin/view:content') {\n                            return false;\n                        }\n                        if (!isset($save_page['title'])) {\n                            $save_page['title'] = $title;\n                        }\n                        if ($save_page['url'] == '' or $save_page['url'] == '/' or $save_page['url'] == $this->app->url_manager->site()) {\n                            $save_page['url'] = 'home';\n                            $home_exists = $this->app->content_manager->homepage();\n                            if ($home_exists == false) {\n                                $save_page['is_home'] = 1;\n                            }\n                        }\n                    }\n                    if ($save_page['title'] == '') {\n                        $save_page['title'] = 'Home';\n                    }\n                    if (!isset($save_page['is_active'])) {\n                        $save_page['is_active'] = 1;\n                    }\n                    if (isset($save_page['content_type']) and $save_page['content_type'] == 'page') {\n                        if (!isset($save_page['subtype'])) {\n                            $save_page['subtype'] = 'static';\n                            if (!isset($save_page['layout_file']) or $save_page['layout_file'] == false) {\n                                $save_page['layout_file'] = 'inherit';\n                            }\n                        }\n                    }\n\n                    if ($save_page != false) {\n                        if (isset($save_page['url']) and $save_page['url']) {\n                            $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            $u = $this->app->permalink_manager->slug($u, 'content');\n\n                            if (!$u) {\n                                $u = str_replace($this->app->url_manager->site(), '', $save_page['url']);\n                            }\n\n                            if ($u) {\n                                $try_to_find_page_with_url = $this->app->content_manager->get_by_url($u);\n\n                                if ($try_to_find_page_with_url and isset($try_to_find_page_with_url['id'])) {\n                                    $save_page['id'] = $try_to_find_page_with_url['id'];\n                                }\n                            }\n                        }\n                        if (!isset($save_page['id'])) {\n                            $page_id = $save_page['id'];\n                        } else {\n                            if (!$save_as_draft) {\n                                $page_id = $this->app->content_manager->save_content_admin($save_page);\n                                $new_content_link = content_link($page_id);\n                                if ($ref_page_url != $new_content_link) {\n                                    $json_print['new_page_url'] = content_link($page_id);\n                                }\n                            }\n\n                        }\n                    }\n                }\n            } else {\n                $page_id = $ref_page['id'];\n                $ref_page['custom_fields'] = $this->app->content_manager->custom_fields($page_id, false);\n            }\n        }\n\n        $author_id = user_id();\n        if ($is_admin == false and $page_id != 0 and $author_id != 0) {\n            $page_data_to_check_author = $this->get_by_id($page_id);\n            if (!isset($page_data_to_check_author['created_by']) or ($page_data_to_check_author['created_by'] != $author_id)) {\n                return array('error' => 'You dont have permission to edit this content');\n            }\n        } elseif ($is_admin == false) {\n            return array('error' => 'Not logged in as admin to use ' . __FUNCTION__);\n        }\n\n\n        foreach ($the_field_data_all as $the_field_data) {\n            $save_global = false;\n            $save_layout = false;\n\n            if (isset($page_id) and $page_id != 0 and !empty($the_field_data)) {\n                $save_global = false;\n\n                $content_id = $page_id;\n\n                $url = $this->app->url_manager->string(true);\n                $some_mods = array();\n                if (isset($the_field_data) and is_array($the_field_data) and isset($the_field_data['attributes'])) {\n                    if (isset($the_field_data['html'])) {\n                        $field = false;\n                        if (isset($the_field_data['attributes']['field'])) {\n                            $field = trim($the_field_data['attributes']['field']);\n                        }\n\n                        if (isset($the_field_data['attributes']['data-field'])) {\n                            $field = $the_field_data['attributes']['field'] = trim($the_field_data['attributes']['data-field']);\n                        }\n\n                        if (($field != false)) {\n                            $page_element_id = $field;\n                        }\n                        if (!isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = 'content';\n                        } else {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        if (isset($the_field_data['attributes']['rel-id'])) {\n                            $content_id = $the_field_data['attributes']['rel-id'];\n                        } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                            $content_id = $the_field_data['attributes']['rel_id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel-id'];\n                        } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                            $content_id = $the_field_data['attributes']['data-rel_id'];\n                        }\n\n                        $save_global = false;\n                        if (isset($the_field_data['attributes']['rel_type']) and (trim($the_field_data['attributes']['rel_type']) == 'global' or trim($the_field_data['attributes']['rel_type'])) == 'module') {\n                            $save_global = true;\n                        } else {\n                            $save_global = false;\n                        }\n                        if (isset($the_field_data['attributes']['rel_type']) and trim($the_field_data['attributes']['rel_type']) == 'layout') {\n                            $save_global = false;\n                            $save_layout = true;\n                        } else {\n                            $save_layout = false;\n                        }\n                        if (isset($the_field_data['attributes']['rel'])) {\n                            $the_field_data['attributes']['rel_type'] = $the_field_data['attributes']['rel'];\n                        }\n\n                        if (!isset($the_field_data['attributes']['data-id'])) {\n                            $the_field_data['attributes']['data-id'] = $content_id;\n                        }\n\n\n                        if (isset($the_field_data['attributes']['rel_type']) and isset($the_field_data['attributes']['data-id'])) {\n                            $rel_ch = trim($the_field_data['attributes']['rel_type']);\n                            switch ($rel_ch) {\n                                case 'content':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $the_field_data['attributes']['data-id'];\n                                    break;\n                                case 'page':\n\n                                case 'post':\n                                    $save_global = false;\n                                    $save_layout = false;\n                                    $content_id_for_con_field = $content_id = $page_id;\n                                    break;\n\n                                case 'module':\n                                    $save_global = true;\n                                    break;\n                                case 'page':\n                                default:\n                                    break;\n                            }\n                        }\n\n                        $inh = false;\n\n                        if (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'inherit') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $inh = $this->app->content_manager->get_inherited_parent($page_id);\n                            if ($inh != false) {\n                                $content_id_for_con_field = $content_id = $inh;\n                            }\n                        } elseif (isset($the_field_data['attributes']['rel_type']) and ($the_field_data['attributes']['rel_type']) == 'page') {\n                            $save_global = false;\n                            $save_layout = false;\n                            $content_id = $page_id;\n                            $check_if_page = $this->get_by_id($content_id);\n                            if (is_array($check_if_page)\n                                and isset($check_if_page['content_type'])\n                                and isset($check_if_page['parent'])\n                                and $check_if_page['content_type'] != ''\n                                and intval($check_if_page['parent']) != 0\n                                and $check_if_page['content_type'] != 'page'\n                            ) {\n                                $inh = $check_if_page['parent'];\n                                if ($inh != false) {\n                                    $content_id_for_con_field = $content_id = $inh;\n                                }\n                            }\n                        }\n\n                        $save_layout = false;\n                        if (isset($post_data['id'])) {\n                            $content_id_for_con_field = $post_data['id'];\n                        } elseif ($inh == false and !isset($content_id_for_con_field)) {\n                            if (isset($ref_page)) {\n\n\n                                if (is_array($ref_page) and isset($ref_page['parent']) and isset($ref_page['content_type']) and $ref_page['content_type'] != 'page') {\n                                    $content_id_for_con_field = intval($ref_page['parent']);\n                                } else {\n                                    $content_id_for_con_field = intval($ref_page['id']);\n                                }\n                            }\n                        }\n                        $html_to_save = $the_field_data['html'];\n                        $html_to_save = $this->app->parser->make_tags($html_to_save);\n\n                        $antixss = new AntiXSS();\n                        $html_to_save = $content = $antixss->xss_clean($html_to_save);\n\n\n\n\n                        if ($save_global == false and $save_layout == false) {\n                            if ($content_id) {\n\n                                $for_histroy = get_content_by_id($content_id);\n\n                                $for_histroy['custom_fields'] = $this->app->content_manager->custom_fields($content_id, false);\n\n\n                                $old = false;\n                                $field123 = str_ireplace('custom_field_', '', $field);\n                                if (stristr($field, 'custom_field_')) {\n                                    $old = $for_histroy['custom_fields'][$field123];\n                                } else {\n                                    if (isset($for_histroy['custom_fields'][$field123])) {\n                                        $old = $for_histroy['custom_fields'][$field123];\n                                    } elseif (isset($for_histroy[$field])) {\n                                        $old = $for_histroy[$field];\n                                    }\n                                }\n\n\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'content';\n                                $history_to_save['id'] = $content_id;\n                                $history_to_save['value'] = $old;\n                                $history_to_save['field'] = $field;\n\n                                $cont_field = array();\n                                $cont_field['rel_type'] = $rel_ch;\n                                $cont_field['field'] = $field;\n                                $cont_field['rel_id'] = $content_id_for_con_field;\n                                $cont_field['value'] = $html_to_save;\n\n                                if ($is_draft != false) {\n                                    $cont_id = $content_id_for_con_field;\n                                    $cont_field['is_draft'] = 1;\n                                    $cont_field['rel_type'] = $rel_ch;\n                                    $cont_field['url'] = $url;\n                                    $to_save_draft = true;\n                                    if (isset($cont_field['value'])) {\n                                        $draftmd5 = md5($cont_field['value']);\n\n                                        $draftmd5_last = $this->app->user_manager->session_get('content_draft_save_md5');\n                                        if ($draftmd5_last == $draftmd5) {\n                                            $to_save_draft = false;\n                                        } else {\n                                            $this->app->user_manager->session_set('content_draft_save_md5', $draftmd5);\n                                        }\n                                    }\n                                    if ($to_save_draft) {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    }\n                                } else {\n                                    if ($field != 'content') {\n                                        $cont_field1 = $this->app->content_manager->save_content_field($cont_field);\n                                    } else {\n                                        $cont_table_save = array();\n\n                                    }\n                                }\n                                $this->app->event_manager->trigger('mw.content.save_edit', $cont_field);\n\n                                $to_save = array();\n                                $to_save['id'] = $content_id;\n\n                                $is_native_fld = $this->app->database_manager->get_fields('content');\n                                if (in_array($field, $is_native_fld)) {\n                                    $to_save[$field] = ($html_to_save);\n                                }\n\n                                if ($is_no_save != true and $is_draft == false) {\n                                    $to_save2 = $to_save;\n                                    //   $to_save2['rel_type'] = 'content';\n                                    $to_save2['rel_type'] = $rel_ch;\n                                    $to_save2['rel_id'] = $content_id_for_con_field;\n                                    $to_save2['field'] = $field;\n                                    $json_print[] = $to_save2;\n\n                                    $saved = $this->app->content_manager->save_content_admin($to_save);\n\n                                }\n                            } elseif (isset($category_id)) {\n                                echo __FILE__ . __LINE__ . ' category is not implemented ... not ready yet';\n                            }\n                        } else {\n                            $cont_field = array();\n                            $cont_field['rel_type'] = $the_field_data['attributes']['rel_type'];\n                            $cont_field['rel_id'] = 0;\n                            if (isset($the_field_data['attributes']['rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel-id'];\n                            } elseif (isset($the_field_data['attributes']['rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['rel_id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['content-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['content-id'];\n                            } elseif ($cont_field['rel_type'] != 'global' and isset($the_field_data['attributes']['data-id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-id'];\n                            } elseif (isset($the_field_data['attributes']['data-rel_id'])) {\n                                $cont_field['rel_id'] = $the_field_data['attributes']['data-rel_id'];\n                            }\n                            $cont_field['value'] = $this->app->parser->make_tags($html_to_save);\n                            if ((!isset($the_field_data['attributes']['field']) or $the_field_data['attributes']['field'] == '') and isset($the_field_data['attributes']['data-field'])) {\n                                $the_field_data['attributes']['field'] = $the_field_data['attributes']['data-field'];\n                            }\n                            $cont_field['field'] = $the_field_data['attributes']['field'];\n\n\n                            if ($cont_field['rel_type'] == 'module') {\n                                $cont_field['rel_id'] = 0;\n                            }\n\n\n                            if ($is_draft != false) {\n                                $cont_field['is_draft'] = 1;\n                                $cont_field['url'] = $this->app->url_manager->string(true);\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            } else {\n\n                                $cont_field_new = $this->app->content_manager->save_content_field($cont_field);\n                            }\n\n                            if ($save_global == true and $save_layout == false) {\n\n\n                                $json_print[] = $cont_field;\n                                $history_to_save = array();\n                                $history_to_save['table'] = 'global';\n                                $history_to_save['value'] = $cont_field['value'];\n                                $history_to_save['field'] = $field;\n                                $history_to_save['page_element_id'] = $page_element_id;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (isset($opts_saved)) {\n            $this->app->cache_manager->delete('options');\n        }\n        $this->app->cache_manager->delete('content');\n        $this->app->cache_manager->delete('content_fields');\n        $this->app->cache_manager->delete('repositories');\n\n        return $json_print;\n    }\n\n    public function get_edit_field_draft($data)\n    {\n        $page = false;\n        if (isset($_SERVER['HTTP_REFERER'])) {\n            $url = $_SERVER['HTTP_REFERER'];\n            $url = explode('?', $url);\n            $url = $url[0];\n\n            if (trim($url) == '' or trim($url) == $this->app->url_manager->site()) {\n                $page = $this->app->content_manager->homepage();\n\n            } else {\n                $page = $this->get_by_url($url);\n            }\n        } else {\n            $url = $this->app->url_manager->string();\n        }\n\n        $this->app->content_manager->define_constants($page);\n\n        $table_drafts = $this->tables['content_fields_drafts'];\n\n        $data = parse_params($data);\n\n        if (isset($data['id']) and $data['id'] == 'latest_content_edit') {\n            if (isset($page['id'])) {\n                $page_data = $this->get_by_id($page['id']);\n\n                $results = array();\n                if (isset($page_data['title'])) {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'title',\n                        'value' => $page_data['title'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'title',\n                            'value' => $page_data['title'],);\n                        $results[] = $arr;\n                    }\n                }\n                if (isset($page_data['content']) and $page_data['content'] != '') {\n                    $arr = array('rel_type' => 'content',\n                        'field' => 'content',\n                        'value' => $page_data['content'],);\n                    $results[] = $arr;\n                    if (isset($page_data['content_type'])) {\n                        $arr = array('rel_type' => $page_data['content_type'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                    if (isset($page_data['subtype'])) {\n                        $arr = array('rel_type' => $page_data['subtype'],\n                            'field' => 'content',\n                            'value' => $page_data['content'],);\n                        $results[] = $arr;\n                    }\n                }\n                //$results[]\n            }\n        } else {\n            $data['is_draft'] = 1;\n            $data['full'] = 1;\n            $data['all'] = 1;\n            $results = $this->get_edit_field($data);\n        }\n\n        $ret = array();\n\n        if (!isset($results) or $results == false) {\n            return;\n        }\n\n        $i = 0;\n        foreach ($results as $item) {\n            if (isset($item['value'])) {\n                $field_content = htmlspecialchars_decode($item['value']);\n                $field_content = $this->_decode_entities($field_content);\n                $item['value'] = $this->app->parser->process($field_content, $options = false);\n            }\n\n            $ret[$i] = $item;\n            ++$i;\n        }\n\n        return $ret;\n    }\n\n    public function save_content_field($data, $delete_the_cache = true)\n    {\n        $adm = $this->app->user_manager->is_admin();\n        $table = $this->tables['content_fields'];\n     //    $table_drafts = $this->tables['content_fields_drafts'];\n        $table_drafts = 'content_revisions_history';\n\n        if ($adm == false) {\n            return false;\n        }\n\n        if (!is_array($data)) {\n            $data = array();\n        }\n\n        if (isset($data['is_draft']) and $data['is_draft']) {\n            $table = $table_drafts;\n        }\n\n        $data = $this->app->format->strip_unsafe($data);\n\n        if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n            $draft_url = $this->app->database_manager->escape_string($data['url']);\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-1 week'));\n            $last_saved_date = date('Y-m-d H:i:s', strtotime('-5 min'));\n            $history_files_params = array();\n            $history_files_params['order_by'] = 'id desc';\n            $history_files_params['fields'] = 'id';\n            $history_files_params['field'] = $data['field'];\n            $history_files_params['rel_type'] = $data['rel_type'];\n            $history_files_params['rel_id'] = $data['rel_id'];\n            $history_files_params['is_draft'] = 1;\n            $history_files_params['limit'] = 200;\n            $history_files_params['limit'] = 20;\n            $history_files_params['no_cache'] = true;\n\n            $history_files_params['url'] = $draft_url;\n            $history_files_params['current_page'] = 2;\n            $history_files_params['created_at'] = '[lt]' . $last_saved_date;\n            $history_files = $this->get_edit_field($history_files_params);\n\n            if (is_array($history_files)) {\n                $history_files_ids = $this->app->format->array_values($history_files);\n            }\n\n            if (isset($history_files_ids) and is_array($history_files_ids) and !empty($history_files_ids)) {\n\n                foreach ($history_files_ids as $item) {\n                    $this->app->database_manager->delete_by_id($table, $item);\n                }\n\n            }\n        }\n        if (!isset($data['rel_type']) or !isset($data['rel_id'])) {\n            mw_error('Error: ' . __FUNCTION__ . ' rel and rel_id is required');\n        }\n        /*\n                if (isset($data['field']) and !isset($data['is_draft'])) {\n                    $fld = $this->app->database_manager->escape_string($data['field']);\n                    $fld_rel = $this->app->database_manager->escape_string($data['rel_type']);\n                    $del_params = array();\n                    $del_params['rel_type'] = $fld_rel;\n                    $del_params['field'] = $fld;\n                    $del_params['table'] = $table;\n                    $del_params['no_cache'] = true;\n\n                    if ($fld_rel != 'module') {\n                        if (isset($data['rel_id'])) {\n                            $i = ($data['rel_id']);\n                            $del_params['rel_id'] = $i;\n                        } else {\n                            $del_params['rel_id'] = 0;\n                        }\n                    }\n                    $del = $this->app->database_manager->get($del_params);\n\n\n                    if (!empty($del)) {\n                        foreach ($del as $item) {\n                            // TODO\n                            $this->app->database_manager->delete_by_id($table, $item['id']);\n                        }\n                    }\n                    $cache_group = guess_cache_group('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n                    $this->app->cache_manager->delete($cache_group);\n                }*/\n\n\n        if (isset($fld)) {\n            $this->app->cache_manager->delete('content_fields/' . $fld);\n            $this->app->cache_manager->delete('content_fields/global/' . $fld);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $cache_group = guess_cache_group('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n            $this->app->cache_manager->delete($cache_group);\n            $this->app->cache_manager->delete('content/' . $data['rel_id']);\n        }\n        if (isset($data['rel_type'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type']);\n        }\n        if (isset($data['rel_type']) and isset($data['rel_id'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['rel_type'] . '/' . $data['rel_id']);\n            $this->app->cache_manager->delete('content_fields/global/' . $data['rel_type'] . '/' . $data['rel_id']);\n        }\n        if (isset($data['field'])) {\n            $this->app->cache_manager->delete('content_fields/' . $data['field']);\n        }\n        $this->app->cache_manager->delete('content_fields');\n        $data['table'] = $table;\n        $data['allow_html'] = 1;\n\n\n        // Find existing\n        $filter = array();\n        $filter['field'] = $data['field'];\n        $filter['rel_type'] = $data['rel_type'];\n        $filter['rel_id'] = $data['rel_id'];\n        $filter['one'] = 1;\n        $filter['no_cache'] = true;\n\n         if (isset($data['is_draft']) and $data['is_draft'] and isset($data['url'])) {\n\n          //   $find = $this->app->database_manager->get($table, $filter);\n\n\n             $find = false;\n             //delete old drafts\n             $old = \\DB::table($table)\n                 ->where('rel_type', $data['rel_type'])\n                 ->where('rel_id', $data['rel_id'])\n                 ->where('field', $data['field'])\n                 ->where('url', $data['url'])\n                 ->take(1000)\n                 ->skip(1000)\n                 ->get();\n             if (!empty($old)){\n                 foreach ($old as $item) {\n                     \\DB::table($table)->where('id', $item->id)->delete();\n                 }\n             }\n\n         }  else {\n\n\n\n              $find = $this->app->database_manager->get($table, $filter);\n\n         }\n\n        if ($find and isset($find['id'])) {\n            $data['id'] = $find['id'];\n        }\n\n        $save = $this->app->database_manager->save($data);\n\n        $this->app->cache_manager->delete('content_fields');\n\n        return $save;\n    }\n\n    private function _decode_entities($text)\n    {\n        $text = html_entity_decode($text, ENT_QUOTES, 'ISO-8859-1'); #NOTE: UTF-8 does not work!\n        $text = preg_replace('/&#(\\d+);/m', 'chr(\\\\1)', $text); #decimal notation\n        $text = preg_replace('/&#x([a-f0-9]+);/mi', 'chr(0x\\\\1)', $text); #hex notation\n        return $text;\n    }\n\n    public function download_remote_images_from_text($text)\n    {\n        $site_url = $this->app->url_manager->site();\n        $images = $this->app->parser->query($text, 'img');\n        $to_download = array();\n        $to_replace = array();\n        $possible_sources = array();\n\n        if (!empty($images)) {\n            foreach ($images as $image) {\n                $srcs = array();\n                preg_match('/src=\"([^\"]*)\"/i', $image, $srcs);\n                if (!empty($srcs) and isset($srcs[1]) and $srcs[1] != false) {\n                    $possible_sources[] = $srcs[1];\n                }\n            }\n        }\n\n        if (!empty($possible_sources)) {\n            foreach ($possible_sources as $image_src) {\n                if (!stristr($image_src, $site_url)) {\n                    $to_replace[] = $image_src;\n                    $image_src = strtok($image_src, '?');\n                    $ext = get_file_extension($image_src);\n                    switch (strtolower($ext)) {\n                        case 'jpg':\n                        case 'jpeg':\n                        case 'png':\n                        case 'gif':\n                        case 'svg':\n                            $to_download[] = $image_src;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n        }\n\n        if (!empty($to_download)) {\n            $to_download = array_unique($to_download);\n\n            if (!empty($to_download)) {\n                foreach ($to_download as $src) {\n                    $dl_dir = media_base_path() . 'downloaded' . DS;\n                    if (!is_dir($dl_dir)) {\n                        mkdir_recursive($dl_dir);\n                    }\n                    $dl_file = $dl_dir . md5($src) . basename($src);\n                    if (!is_file($dl_file)) {\n                        $is_dl = $this->app->url_manager->download($src, false, $dl_file);\n                    }\n                    if (is_file($dl_file)) {\n                        $url_local = dir2url($dl_file);\n                        $text = str_ireplace($src, $url_local, $text);\n                    }\n                }\n            }\n        }\n\n        return $text;\n    }\n}\n"], "filenames": ["src/MicroweberPackages/Content/ContentManagerHelpers.php"], "buggy_code_start_loc": [11], "buggy_code_end_loc": [975], "fixing_code_start_loc": [12], "fixing_code_end_loc": [982], "type": "CWE-79", "message": "Microweber is a drag and drop website builder and content management system. Versions 1.2.12 and prior are vulnerable to copy-paste cross-site scripting (XSS). For this particular type of XSS, the victim needs to be fooled into copying a malicious payload into the text editor. A fix was attempted in versions 1.2.9 and 1.2.12, but it is incomplete.", "other": {"cve": {"id": "CVE-2021-32856", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-21T15:15:11.540", "lastModified": "2023-03-02T16:20:38.843", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Microweber is a drag and drop website builder and content management system. Versions 1.2.12 and prior are vulnerable to copy-paste cross-site scripting (XSS). For this particular type of XSS, the victim needs to be fooled into copying a malicious payload into the text editor. A fix was attempted in versions 1.2.9 and 1.2.12, but it is incomplete."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:microweber:microweber:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.12", "matchCriteriaId": "441D576A-1AF1-4418-9D66-0393765DE28E"}]}]}], "references": [{"url": "https://github.com/microweber/microweber/commit/f3b86d59ab674dbf514f9f9948ddfa091739ab75", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://securitylab.github.com/advisories/GHSL-2021-1005-Microweber/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/microweber/microweber/commit/f3b86d59ab674dbf514f9f9948ddfa091739ab75"}}