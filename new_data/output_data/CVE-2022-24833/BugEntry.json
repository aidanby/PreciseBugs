{"buggy_code": ["# PrivateBin version history\n\n  * **1.4 (not yet released)**\n    * ADDED: Translations for Corsican, Estonian and Lojban\n    * ADDED: new HTTP headers improving security (#765)\n    * ADDED: Download button for paste text (#774)\n    * ADDED: Opt-out of federated learning of cohorts (FLoC) (#776)\n    * ADDED: Configuration option to exempt IPs from the rate-limiter (#787)\n    * ADDED: Google Cloud Storage backend support (#795)\n    * ADDED: Oracle database support (#868)\n    * ADDED: Configuration option to limit paste creation and commenting to certain IPs (#883)\n    * ADDED: Set CSP also as meta tag, to deal with misconfigured webservers mangling the HTTP header\n    * CHANGED: Language selection cookie only transmitted over HTTPS (#472)\n    * CHANGED: Upgrading libraries to: base-x 4.0.0, bootstrap 3.4.1 (JS), DOMpurify 2.3.6, ip-lib 1.18.0, jQuery 3.6.0, random_compat 2.0.21 & Showdown 2.0.0\n    * CHANGED: Removed automatic `.ini` configuration file migration (#808)\n    * CHANGED: Removed configurable `dir` for `traffic` & `purge` limiters (#419)\n    * CHANGED: Server salt, traffic and purge limiter now stored in the storage backend (#419)\n  * **1.3.5 (2021-04-05)**\n    * ADDED: Translations for Hebrew, Lithuanian, Indonesian and Catalan\n    * ADDED: Make the project info configurable (#681)\n    * CHANGED: Upgrading libraries to: DOMpurify 2.2.7, kjua 0.9.0 & random_compat 2.0.18\n    * CHANGED: Open all links in new window (#630)\n    * FIXED: PDF display in Firefox (#630)\n    * FIXED: Allow pasting into password input dialog (#630)\n    * FIXED: Display of expiration date in email (#630)\n    * FIXED: Allow display of durations in weeks (#630)\n    * FIXED: Avoid exposing burn-after-reading messages from cache (#630)\n    * FIXED: Only display the dropzone when it should (#630)\n    * FIXED: Detect delete token properly (#630)\n    * FIXED: Sanitize output from `Helper.urls2links()` (#630)\n    * FIXED: Avoid recreation of existing pasteurl element when calling URL shortener (#630)\n    * FIXED: Downloads in Chrome >= 83 (#634)\n    * FIXED: Display of empty files (#663)\n    * FIXED: Improve OpenGraph attributes (#651)\n    * FIXED: Reset to configured burn-after-reading, discussion and expiration settings (#682)\n    * FIXED: Italic segment of project information (#756)\n  * **1.3.4 (2020-03-22)**\n    * CHANGED: Minimum required PHP version is 5.6, due to a change in the identicon library and to use php's native hash_equals()\n    * CHANGED: Upgrading libraries to: identicon 2.0.0\n    * FIXED: Support custom expiration options in email function (#586)\n    * FIXED: Regression with encoding of HTML entities (#588)\n    * FIXED: Unable to paste password on paste with attachment (#565 & #595)\n  * **1.3.3 (2020-02-16)**\n    * CHANGED: Upgrading libraries to: DOMpurify 2.0.8\n    * CHANGED: Several translations got updated with missing messages\n    * CHANGED: Introduce HTML entity encoding on server side (#581)\n    * FIXED: HTML entity double encoding issues introduced in 1.3.2 (#560)\n  * **1.2.3 (2020-02-16)**\n    * CHANGED: Upgrading libraries to: DOMpurify 2.0.8\n    * CHANGED: Introduce HTML entity encoding on server side (#581)\n    * FIXED: HTML entity double encoding issues introduced in 1.3.2 (#560)\n  * **1.3.2 (2020-01-11)**\n    * ADDED: Translation for Ukrainian (#533)\n    * ADDED: Option to send a mail with the link, when creating a paste (#398)\n    * ADDED: Add support for CONFIG_PATH environment variable (#552)\n    * CHANGED: Upgrading libraries to: base-x 3.0.7, DOMpurify 2.0.7 & Showdown 1.9.1\n    * FIXED: HTML injection via unescaped attachment filename (#554)\n    * FIXED: Password disabling option (#527)\n  * **1.2.2 (2020-01-11)**\n    * CHANGED: Upgrading libraries to: bootstrap 3.4.1 (CSS), DOMpurify 2.0.7, jQuery 3.4.1, kjua 0.6.0, Showdown 1.9.1 & SJCL 1.0.8\n    * FIXED: HTML injection via unescaped attachment filename (#554)\n  * **1.3.1 (2019-09-22)**\n    * ADDED: Translation for Bulgarian (#455)\n    * CHANGED: Improved mobile UI - obscured send button and hard to click shortener button (#477)\n    * CHANGED: Enhanced URL shortener integration (#479)\n    * CHANGED: Improved file upload drag & drop UI (#317)\n    * CHANGED: Increased default size limit from 2 to 10 MiB, switch data from BLOB to MEDIUMBLOB in MySQL (#458)\n    * CHANGED: Upgrading libraries to: DOMpurify 2.0.1\n    * FIXED: Enabling browsers without WASM to create pastes and read uncompressed ones (#454)\n    * FIXED: Cloning related issues (#489, #491, #493, #494)\n    * FIXED: Enable file operation only when editing (#497)\n    * FIXED: Clicking 'New' on a previously submitted paste does not blank address bar (#354)\n    * FIXED: Clear address bar when create new paste from existing paste (#479)\n    * FIXED: Discussion section not hiding when new/clone paste is clicked on (#484)\n    * FIXED: Showdown.js error when posting svg qrcode (#485)\n    * FIXED: Failed to handle the case where user cancelled attachment selection properly (#487)\n    * FIXED: Displaying the appropriate errors in older browsers (#508)\n  * **1.3 (2019-07-09)**\n    * ADDED: Translation for Czech (#424)\n    * ADDED: Threat modeled the application (#177)\n    * ADDED: Made compression configurable (#38)\n    * CHANGED: Minimum required PHP version is 5.5, due to a change in the identicon library\n    * CHANGED: Minimum required browser versions are Firefox 54, Chrome 57, Opera 44, Safari 11, Edge 16, due to use of WebCrypto API, async/await, ES6 & WebAssembly features - all Internet Explorer versions are incompatible\n    * CHANGED: JSON and encryption formats were changed to replace SJCL library by browser integrated WebCrypto API (#28, #74)\n    * CHANGED: Replaced rawdeflate.js with zlib.wasm to resolve decompression failures and gain compatibility with standard deflate implementations (#193, #260, #328, #434, #440)\n    * CHANGED: Increase PBKDF2 iterations to 100k (#350)\n    * CHANGED: Replaced last use of MD5 with Fowler\u2013Noll\u2013Vo checksum which produces the exact length we need for the paste ID (#49)\n    * CHANGED: Simplified some PHP code & renamed PrivateBin class into Controller, to make MVC pattern use more obvious (#342)\n    * CHANGED: Upgrading libraries to: identicon 1.2.0, random_compat 2.0.18, jQuery 3.4.1, Showdown 1.9.0, DOMpurify 1.0.11 & kjua 0.6.0\n    * FIXED: Prevent Chrome from sending content of paste to Google for translation (#378)\n    * FIXED: To support attachments larger then 2 MiB in newer Chrome versions, we switched to blob instead of data URIs (#432)\n    * FIXED: Since Outlook strips trailing equal signs in links, the key in URL hash is now base58 encoded, instead of base64 (#377)\n    * FIXED: Facebooks started injecting parameters into shared URLs for tracking that lead to inaccessible pastes (#396)\n    * FIXED: Properly escaped HTML in raw text mode (#358)\n    * FIXED: Made download links better readable in the dark bootstrap theme (#364)\n    * FIXED: Allow Letsencrypt bot to access on apache servers (#413)\n  * **1.2.1 (2018-08-11)**\n    * ADDED: Add support for mega.nz links in pastes and comments (#331)\n    * CHANGED: Added some missing Russian translations (#348)\n    * CHANGED: Minor PHP refactoring: Rename PrivateBin class to Controller, improved logic of some persistence classes (#342)\n    * CHANGED: Upgrading DOMpurify library to 1.0.7\n    * FIXED: Ensure legacy browsers without webcrypto support can't create paste keys with insufficient entropy (#346)\n    * FIXED: Re-add support for old browsers (Firefox&lt;21, Chrome&lt;31, Safari&lt;7, IE&lt;11), broken in 1.2, will be removed again in 1.3\n  * **1.2 (2018-07-22)**\n    * ADDED: Translations for Spanish, Occitan, Norwegian, Portuguese, Dutch and Hungarian\n    * ADDED: Option in configuration to change the default \"PrivateBin\" title of the site\n    * ADDED: Added display of video, audio & PDF, drag & drop, preview of attachments (#182)\n    * ADDED: QR code generation (#169)\n    * ADDED: Introduced DOMpurify library to sanitize generated HTML before display (#183)\n    * CHANGED: Force JSON request for getting paste data & password retry (#216)\n    * CHANGED: Minimum required PHP version is 5.4 (#186)\n    * CHANGED: Shipped .htaccess files were updated for Apache 2.4 (#192)\n    * CHANGED: Cleanup of bootstrap template variants and moved icons to `img` directory\n    * CHANGED: Removed option to hide clone button on expiring pastes, since this requires reading the paste for rendering the template, which leaks information on the pastes state\n    * CHANGED: Upgrading libraries to: SJCL 1.0.7, jQuery 3.3.1, Base64 2.4.5, Showdown 1.8.6, DOMpurify 1.0.5 & Prettify 453bd5f\n    * CHANGED: Refactored JavaScript code, making it modular with private and public functions, making it much easier to maintain (#178)\n    * FIXED: To counteract regressions introduced by the refactoring, we finally introduced property based unit testing for the JavaScript code, this caught several regressions, but also some very old bugs not found so far (#32)\n  * **1.1.1 (2017-10-06)**\n    * CHANGED: Switched to `.php` file extension for configuration file, to avoid leaking configuration data in unprotected installation.\n  * **1.1 (2016-12-26)**\n    * ADDED: Translations for Italian and Russian\n    * ADDED: Loading message displayed until decryption succeeded for slower (in terms of CPU or network) systems\n    * ADDED: Dockerfile for docker container creation\n    * CHANGED: Using modal dialog to request password input instead of native JS input window (#69)\n    * CHANGED: Suppressed referrer HTTP header sending when following links in a paste or comment (#96) and added additional HTTP headers for XSS mitigation (#91)\n    * CHANGED: Updated random_compat and jQuery libraries\n    * FIXED: XSS using JavaScript stored as markdown formatted paste, after clicking on Raw paste button (#137)\n    * FIXED: Automatic purging deleting non-expiring pastes, when using database store (#149)\n  * **1.0 (2016-08-25)**\n    * ADDED: Translations for Slowene and Chinese\n    * ADDED: re-introduced (optional) URL shortener support, which was removed back in version 0.16 for privacy concerns\n    * ADDED: Preview tab, helpful for writing markdown code or check the source code rendering\n    * ADDED: Automatic purging of expired pastes, done on paste creation\n    * ADDED: Option to disable icons in discussions (will only affect newly created pastes)\n    * ADDED: Composer support\n    * CHANGED: Renamed the ZeroBin fork to PrivateBin\n    * CHANGED: Removed unmaintained RainTPL template engine, replacing the templates with straight forward PHP files\n    * CHANGED: New logo and favicons\n    * CHANGED: Upgrading SJCL library to 1.0.4\n    * CHANGED: Switched to GCM instead of CCM mode for AES encryption for newly created pastes\n    * CHANGED: Use backported random bytes function from PHP7 for older PHP versions instead of mcrypt\n    * CHANGED: Switched to a SHA256 HMAC of the IP in traffic limiter instead of storing it in plain text on the server\n    * CHANGED: Introduced content security policy header to reduce cross site scripting (XSS) risks\n    * CHANGED: Added SHA512 subresource integrity hashes for all javascript includes to reduce the risk of manipulated scripts and easier detection of such\n    * CHANGED: Refactored PHP code to conform to PSR-4 and PSR-2 standards\n    * CHANGED: Switched to Identicons as the default for comments with nicknames\n    * CHANGED: Vizhash is now optional and based on (128 byte) SHA512 HMAC instead of (144 byte) combination of MD5, SHA1 and a reversal of that string\n    * FIXED: Content-type negociation for HTML in certain uncommon browser configurations\n    * FIXED: JavaScript error displayed before page is loaded or during attachment load\n    * FIXED: Don't strip space characters at beginning or end of optional password\n    * FIXED: Various UI glitches in mobile version or on smaller desktops with language menu, button spacing and long URLs\n    * FIXED: Back button now works as expected after switching to raw text view of a paste\n    * FIXED: Reactivated second error message above send comment button to ensure its visibility when the main error message is outside the viewport\n    * FIXED: Raw text now displays original markdown instead of rendered HTML\n    * FIXED: Removed unused code detected with the help of various code review tools\n    * FIXED: Table format for PostgreSQL, making it possible to use PostgreSQL as backend in addition to MySQL, SQLite and flat files\n  * **0.22 (2015-11-09)**:\n    * ADDED: Tab character input support\n    * ADDED: Dark bootstrap theme\n    * ADDED: Option to hide clone button on expiring pastes\n    * ADDED: Option to set a different default language then English and/or enforce it as the only language\n    * ADDED: Database now contains version to allow automatic update of structure, only if necessary; removing database structure check on each request\n    * ADDED: Favicons\n    * FIXING: Regressions in database layer, prohibiting pastes from being stored\n    * FIXING: Fixing \"missing\" comments when they were posted during the same second to the same paste\n    * FIXING: JS failing when password input disabled\n    * CHANGED: Switching positions of \"New\" and \"Send\" button, highlighting the latter to improve workflow\n    * CHANGED: Renamed config file to make updates easier\n    * CHANGED: Switching to JSON-based REST-API\n    * CHANGED: Database structure to store attachments, allowing larger attachments to be stored (depending on maximum BLOB size of database backend)\n    * CHANGED: Refactored data model, traffic limiting & request handling\n  * **0.21.1 (2015-09-21)**:\n    * FIXING: lost meta data when using DB model instead of flat files\n    * FIXING: mobile navbar getting triggered on load\n    * CHANGED: database table \"paste\" gets automatically extended with a \"meta\" column\n    * CHANGED: navbar of \"bootstrap\" template now spans full width of view port on large screens\n  * **0.21 (2015-09-19)**:\n    * ADDED: Translations for German, French and Polish, language selection menu (optional)\n    * ADDED: File upload and image display support (optional)\n    * ADDED: Markdown format support\n    * ADDED: \"bootstrap-compact\" template that hides some of the options in a drop down menu to ensure the nav bar fitting on one line on smaller screen sizes\n    * FIXING: Various usability issues with different screen sizes / device types in the \"bootstrap\" template\n    * CHANGED: Instead of having different options to enable and preselect certain formats there is now a generic `[formatter_options]` section where formats can be added to the displayed format drop down menu. A `defaultformatter` can be set, it defaults to \"plaintext\". The `syntaxhighlighting` configuration got deprecated.\n    * `zerobin.js` got a major refactoring:\n      * moved from global namespace into anonymous function\n      * events are no longer set via \"onclick\" attributes in the templates, but bound by from JS side\n      * for simpler maintenance the functions were grouped into objects: zerobin (display logic, event handling), filter (compression,\nencryption), i18n (translation, counterpart of i18n.php) and helper (stateless utilities)\n    * Wiki pages were added to address common topics:\n      * [Upgrading from ZeroBin 0.19 Alpha](https://github.com/PrivateBin/PrivateBin/wiki/Upgrading-from-ZeroBin-0.19-Alpha)\n      * [Directory of public PrivateBin servers](https://github.com/PrivateBin/PrivateBin/wiki/PrivateBin-Directory)\n      * [Translation](https://github.com/PrivateBin/PrivateBin/wiki/Translation)\n      * [Templates](https://github.com/PrivateBin/PrivateBin/wiki/Templates)\n  * **0.20 (2015-09-03)**:\n    * ADDED: Password protected pastes (optional)\n    * ADDED: configuration options for highlighting, password, discussions, expiration times, rate limiting\n    * ADDED: JSON-only retrieval of paste incl. discussion, used to be able to refresh paste when posting a comment\n    * ADDED: bootstrap CSS based template\n    * CHANGED: \"Burn after reading\" pastes are now deleted only after the paste was successfully decrypted via callback. This prevents accidental deletion by chatbots following URLs and the like. Usage of a password is suggested to ensure only the desired recipient is able to encrypt it.\n    * CHANGED: the \"opendiscussion\" option now only controls if the discussion checkbox is preselected. Use \"discussion = false\" to disable the discussion feature completely (which also removes the checkbox from the template).\n    * FIXING: Behaviour of several conflicting configuration options. As a general measure unit tests for 9 of the options and all their possible configurations were added via a unit test generator.\n    * updated JS libraries: jquery to 1.11.3, sjcl to 1.0.2, base64.js to 2.1.9, deflate to 0.5, inflate to 0.3 and prettify to latest\n    * generally improved documentation, both inline phpdoc / JSdoc source code documentation, as well as Wiki pages on installation, configuration, development and JSON-API\n  * **Alpha 0.19 (2013-07-05)**:\n    * Corrected XSS security flaw which affected IE<10. Other browsers were not affected.\n    * Corrected spacing display in IE<10.\n  * **Alpha 0.18 (2013-02-24)**:\n    * ADDED: The resulting URL is automatically selected after pressing \"Send\". You just have to press CTRL+C.\n    * ADDED: Automatic syntax highlighting for 53 languages using highlight.js\n    * ADDED: \"5 minutes\" and \"1 week\" expirations.\n    * ADDED: \"Raw text\" button.\n    * jQuery upgraded to 1.9.1\n    * sjcl upgraded to GitHub master 2013-02-23\n    * base64.js upgraded to 1.7\n    * FIXED: Dates in discussion are now proper local dates.\n    * ADDED: Robot meta tags in HTML to prevent search engines indexing.\n    * ADDED: Better json checking (including entropy).\n    * ADDED: Added version to js/css assets URLs in order to prevent some abusive caches to serve an obsolete version of these files when ZeroBin is upgraded.\n    * \"Burn after reading\" option has been moved out of Expiration combo to a separate checkbox. Reason is: You can prevent a read-once paste to be available ad vitam eternam on the net.\n  * **Alpha 0.17 (2013-02-23)**:\n    * ADDED: Deletion URL.\n    * small refactoring.\n    * improved regex checks.\n    * larger server alt on installation.\n  * **Alpha 0.16**:\n    * FIXED minor php warnings.\n    * FIXED: zerobin.js reformated and properly commented.\n    * FIXED: Directory structure re-organized.\n    * CHANGED: URL shortening button was removed. (It was bad for privacy.)\n  * **Alpha 0.15 (2012-04-20):**\n    * FIXED: 2 minor corrections to avoid notices in php log.\n    * FIXED: Sources converted to UTF-8.\n  * **Alpha 0.14 (2012-04-20):**\n    * ADDED: GD presence is checked.\n    * CHANGED: Traffic limiter data files moved to data/ (\u2192easier rights management)\n    * ADDED: \"Burn after reading\" implemented. Opening the URL will display the paste and immediately destroy it on server.\n  * **Alpha 0.13 (2012-04-18):**\n    * FIXED: ''imageantialias()'' call removed because it's not really usefull and can be a problem on most hosts (if GD is not compiled in php).\n    * FIXED: $error not properly initialized in index.php\n  * **Alpha 0.12 (2012-04-18):**\n    * **DISCUSSIONS !** Now you can enable discussions on your pastes. Of course, posted comments and nickname are also encrypted and the server cannot see them.\n    * This feature implies a change in storage format. You will have to delete all previous pastes in your ZeroBin.\n    * Added [[php:vizhash_gd|Vizhash]] as avatars, so you can match posters IP addresses without revealing them. (Same image = same IP). Of course the IP address cannot be deduced from the Vizhash.\n    * Remaining time before expiration is now displayed.\n    * Explicit tags were added to CSS and jQuery selectors (eg. div#aaa instead of #aaa) to speed up browser.\n    * Better cleaning of the URL (to make sure the key is not broken by some stupid redirection service)\n  * **Alpha 0.11 (2012-04-12):**\n    * Automatically ignore parameters (such as &utm_source=...) added //after// the anchor by some stupid Web 2.0 services.\n    * First public release.\n  * **Alpha 0.10 (2012-04-12):**\n    * IE9 does not seem to correctly support ''pre-wrap'' either. Special handling mode activated for all version of IE<10. (Note: **ALL other browsers** correctly support this feature.)\n  * **Alpha 0.9 (2012-04-11):**\n    * Oh bummer... IE 8 is as shitty as IE6/7: Its does not seem to support ''white-space:pre-wrap'' correctly. I had to activate the special handling mode. I still have to test IE 9.\n  * **Alpha 0.8 (2012-04-11):**\n    * Source code not published yet.\n    * Interface completely redesigned. Icons added.\n    * Now properly supports IE6/7 (ugly display, but it works. \"Clone\" button is disabled though.)\n    * Added one level of depth for storage directories (This is better for higher load servers).\n    * php version is now checked (min: 5.2.6)\n    * Better checks on posted json data on server.\n    * Added \"1 year\" expiration.\n    * URLs are now converted to clickable links. This include http, https, ftp and magnet links.\n    * Clickable links include ''rel=\"nofollow\"'' to discourage SEO.\n    * On my public service (http://sebsauvage.net/paste/)\n      * All data will be deleted (you were warned - this is a test service)\n      * Default paste expiration is now 1 month to prevent clogging-up my host.\n", "/**\n * PrivateBin\n *\n * a zero-knowledge paste bin\n *\n * @see       {@link https://github.com/PrivateBin/PrivateBin}\n * @copyright 2012 S\u00e9bastien SAUVAGE ({@link http://sebsauvage.net})\n * @license   {@link https://www.opensource.org/licenses/zlib-license.php The zlib/libpng License}\n * @version   1.3.5\n * @name      PrivateBin\n * @namespace\n */\n\n// global Base64, DOMPurify, FileReader, RawDeflate, history, navigator, prettyPrint, prettyPrintOne, showdown, kjua\n\njQuery.fn.draghover = function() {\n    'use strict';\n    return this.each(function() {\n        let collection = $(),\n            self = $(this);\n\n        self.on('dragenter', function(e) {\n            if (collection.length === 0) {\n                self.trigger('draghoverstart');\n            }\n            collection = collection.add(e.target);\n        });\n\n        self.on('dragleave drop', function(e) {\n            collection = collection.not(e.target);\n            if (collection.length === 0) {\n                self.trigger('draghoverend');\n            }\n        });\n    });\n};\n\n// main application start, called when DOM is fully loaded\njQuery(document).ready(function() {\n    'use strict';\n    // run main controller\n    $.PrivateBin.Controller.init();\n});\n\njQuery.PrivateBin = (function($, RawDeflate) {\n    'use strict';\n\n    /**\n     * zlib library interface\n     *\n     * @private\n     */\n    let z;\n\n    /**\n     * CryptoData class\n     *\n     * bundles helper fuctions used in both paste and comment formats\n     *\n     * @name CryptoData\n     * @class\n     */\n    function CryptoData(data) {\n        this.v = 1;\n        // store all keys in the default locations for drop-in replacement\n        for (let key in data) {\n            this[key] = data[key];\n        }\n\n        /**\n         * gets the cipher data (cipher text + adata)\n         *\n         * @name Paste.getCipherData\n         * @function\n         * @return {Array}|{string}\n         */\n        this.getCipherData = function()\n        {\n            return this.v === 1 ? this.data : [this.ct, this.adata];\n        }\n    }\n\n    /**\n     * Paste class\n     *\n     * bundles helper fuctions around the paste formats\n     *\n     * @name Paste\n     * @class\n     */\n    function Paste(data) {\n        // inherit constructor and methods of CryptoData\n        CryptoData.call(this, data);\n\n        /**\n         * gets the used formatter\n         *\n         * @name Paste.getFormat\n         * @function\n         * @return {string}\n         */\n        this.getFormat = function()\n        {\n            return this.v === 1 ? this.meta.formatter : this.adata[1];\n        }\n\n        /**\n         * gets the remaining seconds before the paste expires\n         *\n         * returns 0 if there is no expiration\n         *\n         * @name Paste.getTimeToLive\n         * @function\n         * @return {string}\n         */\n        this.getTimeToLive = function()\n        {\n            return (this.v === 1 ? this.meta.remaining_time : this.meta.time_to_live) || 0;\n        }\n\n        /**\n         * is burn-after-reading enabled\n         *\n         * @name Paste.isBurnAfterReadingEnabled\n         * @function\n         * @return {bool}\n         */\n        this.isBurnAfterReadingEnabled = function()\n        {\n            return (this.v === 1 ? this.meta.burnafterreading : this.adata[3]);\n        }\n\n        /**\n         * are discussions enabled\n         *\n         * @name Paste.isDiscussionEnabled\n         * @function\n         * @return {bool}\n         */\n        this.isDiscussionEnabled = function()\n        {\n            return (this.v === 1 ? this.meta.opendiscussion : this.adata[2]);\n        }\n    }\n\n    /**\n     * Comment class\n     *\n     * bundles helper fuctions around the comment formats\n     *\n     * @name Comment\n     * @class\n     */\n    function Comment(data) {\n        // inherit constructor and methods of CryptoData\n        CryptoData.call(this, data);\n\n        /**\n         * gets the UNIX timestamp of the comment creation\n         *\n         * @name Paste.getCreated\n         * @function\n         * @return {int}\n         */\n        this.getCreated = function()\n        {\n            return this.meta[this.v === 1 ? 'postdate' : 'created'];\n        }\n\n        /**\n         * gets the icon of the comment submitter\n         *\n         * @name Paste.getIcon\n         * @function\n         * @return {string}\n         */\n        this.getIcon = function()\n        {\n            return this.meta[this.v === 1 ? 'vizhash' : 'icon'] || '';\n        }\n    }\n\n    /**\n     * static Helper methods\n     *\n     * @name Helper\n     * @class\n     */\n    const Helper = (function () {\n        const me = {};\n\n        /**\n         * character to HTML entity lookup table\n         *\n         * @see    {@link https://github.com/janl/mustache.js/blob/master/mustache.js#L60}\n         * @name Helper.entityMap\n         * @private\n         * @enum   {Object}\n         * @readonly\n         */\n        const entityMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n\n        /**\n         * number of seconds in a minute\n         *\n         * @name Helper.minute\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const minute = 60;\n\n        /**\n         * number of seconds in an hour\n         *\n         * = 60 * 60 seconds\n         *\n         * @name Helper.minute\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const hour = 3600;\n\n        /**\n         * number of seconds in a day\n         *\n         * = 60 * 60 * 24 seconds\n         *\n         * @name Helper.day\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const day = 86400;\n\n        /**\n         * number of seconds in a week\n         *\n         * = 60 * 60 * 24 * 7 seconds\n         *\n         * @name Helper.week\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const week = 604800;\n\n        /**\n         * number of seconds in a month (30 days, an approximation)\n         *\n         * = 60 * 60 * 24 * 30 seconds\n         *\n         * @name Helper.month\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const month = 2592000;\n\n        /**\n         * number of seconds in a non-leap year\n         *\n         * = 60 * 60 * 24 * 365 seconds\n         *\n         * @name Helper.year\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const year = 31536000;\n\n        /**\n         * cache for script location\n         *\n         * @name Helper.baseUri\n         * @private\n         * @enum   {string|null}\n         */\n        let baseUri = null;\n\n        /**\n         * converts a duration (in seconds) into human friendly approximation\n         *\n         * @name Helper.secondsToHuman\n         * @function\n         * @param  {number} seconds\n         * @return {Array}\n         */\n        me.secondsToHuman = function(seconds)\n        {\n            let v;\n            if (seconds < minute)\n            {\n                v = Math.floor(seconds);\n                return [v, 'second'];\n            }\n            if (seconds < hour)\n            {\n                v = Math.floor(seconds / minute);\n                return [v, 'minute'];\n            }\n            if (seconds < day)\n            {\n                v = Math.floor(seconds / hour);\n                return [v, 'hour'];\n            }\n            // If less than 2 months, display in days:\n            if (seconds < (2 * month))\n            {\n                v = Math.floor(seconds / day);\n                return [v, 'day'];\n            }\n            v = Math.floor(seconds / month);\n            return [v, 'month'];\n        };\n\n        /**\n         * converts a duration string into seconds\n         *\n         * The string is expected to be optional digits, followed by a time.\n         * Supported times are: min, hour, day, month, year, never\n         * Examples: 5min, 13hour, never\n         *\n         * @name Helper.durationToSeconds\n         * @function\n         * @param  {String} duration\n         * @return {number}\n         */\n        me.durationToSeconds = function(duration)\n        {\n            let pieces   = duration.split(/(\\D+)/),\n                factor   = pieces[0] || 0,\n                timespan = pieces[1] || pieces[0];\n            switch (timespan)\n            {\n                case 'min':\n                    return factor * minute;\n                case 'hour':\n                    return factor * hour;\n                case 'day':\n                    return factor * day;\n                case 'week':\n                    return factor * week;\n                case 'month':\n                    return factor * month;\n                case 'year':\n                    return factor * year;\n                case 'never':\n                    return 0;\n                default:\n                    return factor;\n            }\n        };\n\n        /**\n         * text range selection\n         *\n         * @see    {@link https://stackoverflow.com/questions/985272/jquery-selecting-text-in-an-element-akin-to-highlighting-with-your-mouse}\n         * @name   Helper.selectText\n         * @function\n         * @param  {HTMLElement} element\n         */\n        me.selectText = function(element)\n        {\n            let range, selection;\n\n            // MS\n            if (document.body.createTextRange) {\n                range = document.body.createTextRange();\n                range.moveToElementText(element);\n                range.select();\n            } else if (window.getSelection) {\n                selection = window.getSelection();\n                range = document.createRange();\n                range.selectNodeContents(element);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        };\n\n        /**\n         * convert URLs to clickable links in the provided element.\n         *\n         * URLs to handle:\n         * <pre>\n         *     magnet:?xt.1=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C&xt.2=urn:sha1:TXGCZQTH26NL6OUQAJJPFALHG2LTGBC7\n         *     https://example.com:8800/zero/?6f09182b8ea51997#WtLEUO5Epj9UHAV9JFs+6pUQZp13TuspAUjnF+iM+dM=\n         *     http://user:example.com@localhost:8800/zero/?6f09182b8ea51997#WtLEUO5Epj9UHAV9JFs+6pUQZp13TuspAUjnF+iM+dM=\n         * </pre>\n         *\n         * @name   Helper.urls2links\n         * @function\n         * @param  {HTMLElement} element\n         */\n        me.urls2links = function(element)\n        {\n            element.html(\n                DOMPurify.sanitize(\n                    element.html().replace(\n                        /(((https?|ftp):\\/\\/[\\w?!=&.\\/-;#@~%+*-]+(?![\\w\\s?!&.\\/;#~%\"=-]>))|((magnet):[\\w?=&.\\/-;#@~%+*-]+))/ig,\n                        '<a href=\"$1\" rel=\"nofollow noopener noreferrer\">$1</a>'\n                    )\n                )\n            );\n        };\n\n        /**\n         * minimal sprintf emulation for %s and %d formats\n         *\n         * Note that this function needs the parameters in the same order as the\n         * format strings appear in the string, contrary to the original.\n         *\n         * @see    {@link https://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format#4795914}\n         * @name   Helper.sprintf\n         * @function\n         * @param  {string} format\n         * @param  {...*} args - one or multiple parameters injected into format string\n         * @return {string}\n         */\n        me.sprintf = function()\n        {\n            const args = Array.prototype.slice.call(arguments);\n            let format = args[0],\n                i = 1;\n            return format.replace(/%(s|d)/g, function (m) {\n                let val = args[i];\n                if (m === '%d') {\n                    val = parseFloat(val);\n                    if (isNaN(val)) {\n                        val = 0;\n                    }\n                }\n                ++i;\n                return val;\n            });\n        };\n\n        /**\n         * get value of cookie, if it was set, empty string otherwise\n         *\n         * @see    {@link http://www.w3schools.com/js/js_cookies.asp}\n         * @name   Helper.getCookie\n         * @function\n         * @param  {string} cname - may not be empty\n         * @return {string}\n         */\n        me.getCookie = function(cname) {\n            const name = cname + '=',\n                  ca   = document.cookie.split(';');\n            for (let i = 0; i < ca.length; ++i) {\n                let c = ca[i];\n                while (c.charAt(0) === ' ')\n                {\n                    c = c.substring(1);\n                }\n                if (c.indexOf(name) === 0)\n                {\n                    return c.substring(name.length, c.length);\n                }\n            }\n            return '';\n        };\n\n        /**\n         * get the current location (without search or hash part of the URL),\n         * eg. https://example.com/path/?aaaa#bbbb --> https://example.com/path/\n         *\n         * @name   Helper.baseUri\n         * @function\n         * @return {string}\n         */\n        me.baseUri = function()\n        {\n            // check for cached version\n            if (baseUri !== null) {\n                return baseUri;\n            }\n\n            baseUri = window.location.origin + window.location.pathname;\n            return baseUri;\n        };\n\n        /**\n         * wrap an object into a Paste, used for mocking in the unit tests\n         *\n         * @name   Helper.PasteFactory\n         * @function\n         * @param  {object} data\n         * @return {Paste}\n         */\n        me.PasteFactory = function(data)\n        {\n            return new Paste(data);\n        };\n\n        /**\n         * wrap an object into a Comment, used for mocking in the unit tests\n         *\n         * @name   Helper.CommentFactory\n         * @function\n         * @param  {object} data\n         * @return {Comment}\n         */\n        me.CommentFactory = function(data)\n        {\n            return new Comment(data);\n        };\n\n        /**\n         * convert all applicable characters to HTML entities\n         *\n         * @see    {@link https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html}\n         * @name   Helper.htmlEntities\n         * @function\n         * @param  {string} str\n         * @return {string} escaped HTML\n         */\n        me.htmlEntities = function(str) {\n            return String(str).replace(\n                /[&<>\"'`=\\/]/g, function(s) {\n                    return entityMap[s];\n                }\n            );\n        }\n\n        /**\n         * calculate expiration date given initial date and expiration period\n         *\n         * @name   Helper.calculateExpirationDate\n         * @function\n         * @param  {Date} initialDate - may not be empty\n         * @param  {string|number} expirationDisplayStringOrSecondsToExpire - may not be empty\n         * @return {Date}\n         */\n        me.calculateExpirationDate = function(initialDate, expirationDisplayStringOrSecondsToExpire) {\n            let expirationDate      = new Date(initialDate),\n                secondsToExpiration = expirationDisplayStringOrSecondsToExpire;\n            if (typeof expirationDisplayStringOrSecondsToExpire === 'string') {\n                secondsToExpiration = me.durationToSeconds(expirationDisplayStringOrSecondsToExpire);\n            }\n\n            if (typeof secondsToExpiration !== 'number') {\n                throw new Error('Cannot calculate expiration date.');\n            }\n            if (secondsToExpiration === 0) {\n                return null;\n            }\n\n            expirationDate = expirationDate.setUTCSeconds(expirationDate.getUTCSeconds() + secondsToExpiration);\n            return expirationDate;\n        };\n\n        /**\n         * resets state, used for unit testing\n         *\n         * @name   Helper.reset\n         * @function\n         */\n        me.reset = function()\n        {\n            baseUri = null;\n        };\n\n        return me;\n    })();\n\n    /**\n     * internationalization module\n     *\n     * @name I18n\n     * @class\n     */\n    const I18n = (function () {\n        const me = {};\n\n        /**\n         * const for string of loaded language\n         *\n         * @name I18n.languageLoadedEvent\n         * @private\n         * @prop   {string}\n         * @readonly\n         */\n        const languageLoadedEvent = 'languageLoaded';\n\n        /**\n         * supported languages, minus the built in 'en'\n         *\n         * @name I18n.supportedLanguages\n         * @private\n         * @prop   {string[]}\n         * @readonly\n         */\n        const supportedLanguages = ['bg', 'ca', 'co', 'cs', 'de', 'es', 'et', 'fr', 'he', 'hu', 'id', 'it', 'jbo', 'lt', 'no', 'nl', 'pl', 'pt', 'oc', 'ru', 'sl', 'uk', 'zh'];\n\n        /**\n         * built in language\n         *\n         * @name I18n.language\n         * @private\n         * @prop   {string|null}\n         */\n        let language = null;\n\n        /**\n         * translation cache\n         *\n         * @name I18n.translations\n         * @private\n         * @enum   {Object}\n         */\n        let translations = {};\n\n        /**\n         * translate a string, alias for I18n.translate\n         *\n         * @name   I18n._\n         * @function\n         * @param  {jQuery} $element - optional\n         * @param  {string} messageId\n         * @param  {...*} args - one or multiple parameters injected into placeholders\n         * @return {string}\n         */\n        me._ = function()\n        {\n            return me.translate.apply(this, arguments);\n        };\n\n        /**\n         * translate a string\n         *\n         * Optionally pass a jQuery element as the first parameter, to automatically\n         * let the text of this element be replaced. In case the (asynchronously\n         * loaded) language is not downloaded yet, this will make sure the string\n         * is replaced when it eventually gets loaded. Using this is both simpler\n         * and more secure, as it avoids potential XSS when inserting text.\n         * The next parameter is the message ID, matching the ones found in\n         * the translation files under the i18n directory.\n         * Any additional parameters will get inserted into the message ID in\n         * place of %s (strings) or %d (digits), applying the appropriate plural\n         * in case of digits. See also Helper.sprintf().\n         *\n         * @name   I18n.translate\n         * @function\n         * @param  {jQuery} $element - optional\n         * @param  {string} messageId\n         * @param  {...*} args - one or multiple parameters injected into placeholders\n         * @return {string}\n         */\n        me.translate = function()\n        {\n            // convert parameters to array\n            let args = Array.prototype.slice.call(arguments),\n                messageId,\n                $element = null;\n\n            // parse arguments\n            if (args[0] instanceof jQuery) {\n                // optional jQuery element as first parameter\n                $element = args[0];\n                args.shift();\n            }\n\n            // extract messageId from arguments\n            let usesPlurals = $.isArray(args[0]);\n            if (usesPlurals) {\n                // use the first plural form as messageId, otherwise the singular\n                messageId = args[0].length > 1 ? args[0][1] : args[0][0];\n            } else {\n                messageId = args[0];\n            }\n\n            if (messageId.length === 0) {\n                return messageId;\n            }\n\n            // if no translation string cannot be found (in translations object)\n            if (!translations.hasOwnProperty(messageId) || language === null) {\n                // if language is still loading and we have an elemt assigned\n                if (language === null && $element !== null) {\n                    // handle the error by attaching the language loaded event\n                    let orgArguments = arguments;\n                    $(document).on(languageLoadedEvent, function () {\n                        // re-execute this function\n                        me.translate.apply(this, orgArguments);\n                    });\n\n                    // and fall back to English for now until the real language\n                    // file is loaded\n                }\n\n                // for all other languages than English for which this behaviour\n                // is expected as it is built-in, log error\n                if (language !== null && language !== 'en') {\n                    console.error('Missing translation for: \\'' + messageId + '\\' in language ' + language);\n                    // fallback to English\n                }\n\n                // save English translation (should be the same on both sides)\n                translations[messageId] = args[0];\n            }\n\n            // lookup plural translation\n            if (usesPlurals && $.isArray(translations[messageId])) {\n                let n = parseInt(args[1] || 1, 10),\n                    key = me.getPluralForm(n),\n                    maxKey = translations[messageId].length - 1;\n                if (key > maxKey) {\n                    key = maxKey;\n                }\n                args[0] = translations[messageId][key];\n                args[1] = n;\n            } else {\n                // lookup singular translation\n                args[0] = translations[messageId];\n            }\n\n            // messageID may contain links, but should be from a trusted source (code or translation JSON files)\n            let containsLinks = args[0].indexOf('<a') !== -1;\n\n            // prevent double encoding, when we insert into a text node\n            if (containsLinks || $element === null) {\n                for (let i = 0; i < args.length; ++i) {\n                    // parameters (i > 0) may never contain HTML as they may come from untrusted parties\n                    if ((containsLinks ? i > 1 : i > 0) || !containsLinks) {\n                        args[i] = Helper.htmlEntities(args[i]);\n                    }\n                }\n            }\n            // format string\n            let output = Helper.sprintf.apply(this, args);\n\n            if (containsLinks) {\n                // only allow tags/attributes we actually use in translations\n                output = DOMPurify.sanitize(\n                    output, {\n                        ALLOWED_TAGS: ['a', 'i', 'span'],\n                        ALLOWED_ATTR: ['href', 'id']\n                    }\n                );\n            }\n\n            // if $element is given, insert translation\n            if ($element !== null) {\n                if (containsLinks) {\n                    $element.html(output);\n                } else {\n                    // text node takes care of entity encoding\n                    $element.text(output);\n                }\n                return '';\n            }\n\n            return output;\n        };\n\n        /**\n         * per language functions to use to determine the plural form\n         *\n         * @see    {@link https://localization-guide.readthedocs.org/en/latest/l10n/pluralforms.html}\n         * @name   I18n.getPluralForm\n         * @function\n         * @param  {int} n\n         * @return {int} array key\n         */\n        me.getPluralForm = function(n) {\n            switch (language)\n            {\n                case 'cs':\n                    return n === 1 ? 0 : (n >= 2 && n <=4 ? 1 : 2);\n                case 'co':\n                case 'fr':\n                case 'oc':\n                case 'zh':\n                    return n > 1 ? 1 : 0;\n                case 'he':\n                    return n === 1 ? 0 : (n === 2 ? 1 : ((n < 0 || n > 10) && (n % 10 === 0) ? 2 : 3));\n                case 'id':\n                case 'jbo':\n                    return 0;\n                case 'lt':\n                    return n % 10 === 1 && n % 100 !== 11 ? 0 : ((n % 10 >= 2 && n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n                case 'pl':\n                    return n === 1 ? 0 : (n % 10 >= 2 && n %10 <=4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n                case 'ru':\n                case 'uk':\n                    return n % 10 === 1 && n % 100 !== 11 ? 0 : (n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n                case 'sl':\n                    return n % 100 === 1 ? 1 : (n % 100 === 2 ? 2 : (n % 100 === 3 || n % 100 === 4 ? 3 : 0));\n                // bg, ca, de, en, es, et, hu, it, nl, no, pt\n                default:\n                    return n !== 1 ? 1 : 0;\n            }\n        };\n\n        /**\n         * load translations into cache\n         *\n         * @name   I18n.loadTranslations\n         * @function\n         */\n        me.loadTranslations = function()\n        {\n            let newLanguage = Helper.getCookie('lang');\n\n            // auto-select language based on browser settings\n            if (newLanguage.length === 0) {\n                newLanguage = (navigator.language || navigator.userLanguage || 'en').substring(0, 2);\n            }\n\n            // if language is already used skip update\n            if (newLanguage === language) {\n                return;\n            }\n\n            // if language is built-in (English) skip update\n            if (newLanguage === 'en') {\n                language = 'en';\n                return;\n            }\n\n            // if language is not supported, show error\n            if (supportedLanguages.indexOf(newLanguage) === -1) {\n                console.error('Language \\'%s\\' is not supported. Translation failed, fallback to English.', newLanguage);\n                language = 'en';\n                return;\n            }\n\n            // load strings from JSON\n            $.getJSON('i18n/' + newLanguage + '.json', function(data) {\n                language = newLanguage;\n                translations = data;\n                $(document).triggerHandler(languageLoadedEvent);\n            }).fail(function (data, textStatus, errorMsg) {\n                console.error('Language \\'%s\\' could not be loaded (%s: %s). Translation failed, fallback to English.', newLanguage, textStatus, errorMsg);\n                language = 'en';\n            });\n        };\n\n        /**\n         * resets state, used for unit testing\n         *\n         * @name   I18n.reset\n         * @function\n         */\n        me.reset = function(mockLanguage, mockTranslations)\n        {\n            language = mockLanguage || null;\n            translations = mockTranslations || {};\n        };\n\n        return me;\n    })();\n\n    /**\n     * handles everything related to en/decryption\n     *\n     * @name CryptTool\n     * @class\n     */\n    const CryptTool = (function () {\n        const me = {};\n\n        /**\n         * base58 encoder & decoder\n         *\n         * @private\n         */\n        let base58 = new baseX('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\n\n        /**\n         * convert UTF-8 string stored in a DOMString to a standard UTF-16 DOMString\n         *\n         * Iterates over the bytes of the message, converting them all hexadecimal\n         * percent encoded representations, then URI decodes them all\n         *\n         * @name   CryptTool.utf8To16\n         * @function\n         * @private\n         * @param  {string} message UTF-8 string\n         * @return {string} UTF-16 string\n         */\n        function utf8To16(message)\n        {\n            return decodeURIComponent(\n                message.split('').map(\n                    function(character)\n                    {\n                        return '%' + ('00' + character.charCodeAt(0).toString(16)).slice(-2);\n                    }\n                ).join('')\n            );\n        }\n\n        /**\n         * convert DOMString (UTF-16) to a UTF-8 string stored in a DOMString\n         *\n         * URI encodes the message, then finds the percent encoded characters\n         * and transforms these hexadecimal representation back into bytes\n         *\n         * @name   CryptTool.utf16To8\n         * @function\n         * @private\n         * @param  {string} message UTF-16 string\n         * @return {string} UTF-8 string\n         */\n        function utf16To8(message)\n        {\n            return encodeURIComponent(message).replace(\n                /%([0-9A-F]{2})/g,\n                function (match, hexCharacter)\n                {\n                    return String.fromCharCode('0x' + hexCharacter);\n                }\n            );\n        }\n\n        /**\n         * convert ArrayBuffer into a UTF-8 string\n         *\n         * Iterates over the bytes of the array, catenating them into a string\n         *\n         * @name   CryptTool.arraybufferToString\n         * @function\n         * @private\n         * @param  {ArrayBuffer} messageArray\n         * @return {string} message\n         */\n        function arraybufferToString(messageArray)\n        {\n            const array = new Uint8Array(messageArray);\n            let message = '',\n                i       = 0;\n            while(i < array.length) {\n                message += String.fromCharCode(array[i++]);\n            }\n            return message;\n        }\n\n        /**\n         * convert UTF-8 string into a Uint8Array\n         *\n         * Iterates over the bytes of the message, writing them to the array\n         *\n         * @name   CryptTool.stringToArraybuffer\n         * @function\n         * @private\n         * @param  {string} message UTF-8 string\n         * @return {Uint8Array} array\n         */\n        function stringToArraybuffer(message)\n        {\n            const messageArray = new Uint8Array(message.length);\n            for (let i = 0; i < message.length; ++i) {\n                messageArray[i] = message.charCodeAt(i);\n            }\n            return messageArray;\n        }\n\n        /**\n         * compress a string (deflate compression), returns buffer\n         *\n         * @name   CryptTool.compress\n         * @async\n         * @function\n         * @private\n         * @param  {string} message\n         * @param  {string} mode\n         * @param  {object} zlib\n         * @throws {string}\n         * @return {ArrayBuffer} data\n         */\n        async function compress(message, mode, zlib)\n        {\n            message = stringToArraybuffer(\n                utf16To8(message)\n            );\n            if (mode === 'zlib') {\n                if (typeof zlib === 'undefined') {\n                    throw 'Error compressing paste, due to missing WebAssembly support.'\n                }\n                return zlib.deflate(message).buffer;\n            }\n            return message;\n        }\n\n        /**\n         * decompress potentially base64 encoded, deflate compressed buffer, returns string\n         *\n         * @name   CryptTool.decompress\n         * @async\n         * @function\n         * @private\n         * @param  {ArrayBuffer} data\n         * @param  {string} mode\n         * @param  {object} zlib\n         * @throws {string}\n         * @return {string} message\n         */\n        async function decompress(data, mode, zlib)\n        {\n            if (mode === 'zlib' || mode === 'none') {\n                if (mode === 'zlib') {\n                    if (typeof zlib === 'undefined') {\n                        throw 'Error decompressing paste, due to missing WebAssembly support.'\n                    }\n                    data = zlib.inflate(\n                        new Uint8Array(data)\n                    ).buffer;\n                }\n                return utf8To16(\n                    arraybufferToString(data)\n                );\n            }\n            // detect presence of Base64.js, indicating legacy ZeroBin paste\n            if (typeof Base64 === 'undefined') {\n                return utf8To16(\n                    RawDeflate.inflate(\n                        utf8To16(\n                            atob(\n                                arraybufferToString(data)\n                            )\n                        )\n                    )\n                );\n            } else {\n                return Base64.btou(\n                    RawDeflate.inflate(\n                        Base64.fromBase64(\n                            arraybufferToString(data)\n                        )\n                    )\n                );\n            }\n        }\n\n        /**\n         * returns specified number of random bytes\n         *\n         * @name   CryptTool.getRandomBytes\n         * @function\n         * @private\n         * @param  {int} length number of random bytes to fetch\n         * @throws {string}\n         * @return {string} random bytes\n         */\n        function getRandomBytes(length)\n        {\n            let bytes       = '';\n            const byteArray = new Uint8Array(length);\n            window.crypto.getRandomValues(byteArray);\n            for (let i = 0; i < length; ++i) {\n                bytes += String.fromCharCode(byteArray[i]);\n            }\n            return bytes;\n        }\n\n        /**\n         * derive cryptographic key from key string and password\n         *\n         * @name   CryptTool.deriveKey\n         * @async\n         * @function\n         * @private\n         * @param  {string} key\n         * @param  {string} password\n         * @param  {array}  spec cryptographic specification\n         * @return {CryptoKey} derived key\n         */\n        async function deriveKey(key, password, spec)\n        {\n            let keyArray = stringToArraybuffer(key);\n            if (password.length > 0) {\n                // version 1 pastes did append the passwords SHA-256 hash in hex\n                if (spec[7] === 'rawdeflate') {\n                    let passwordBuffer = await window.crypto.subtle.digest(\n                        {name: 'SHA-256'},\n                        stringToArraybuffer(\n                            utf16To8(password)\n                        )\n                    ).catch(Alert.showError);\n                    password = Array.prototype.map.call(\n                        new Uint8Array(passwordBuffer),\n                        x => ('00' + x.toString(16)).slice(-2)\n                    ).join('');\n                }\n                let passwordArray = stringToArraybuffer(password),\n                    newKeyArray = new Uint8Array(keyArray.length + passwordArray.length);\n                newKeyArray.set(keyArray, 0);\n                newKeyArray.set(passwordArray, keyArray.length);\n                keyArray = newKeyArray;\n            }\n\n            // import raw key\n            const importedKey = await window.crypto.subtle.importKey(\n                'raw', // only 'raw' is allowed\n                keyArray,\n                {name: 'PBKDF2'}, // we use PBKDF2 for key derivation\n                false, // the key may not be exported\n                ['deriveKey'] // we may only use it for key derivation\n            ).catch(Alert.showError);\n\n            // derive a stronger key for use with AES\n            return window.crypto.subtle.deriveKey(\n                {\n                    name: 'PBKDF2', // we use PBKDF2 for key derivation\n                    salt: stringToArraybuffer(spec[1]), // salt used in HMAC\n                    iterations: spec[2], // amount of iterations to apply\n                    hash: {name: 'SHA-256'} // can be \"SHA-1\", \"SHA-256\", \"SHA-384\" or \"SHA-512\"\n                },\n                importedKey,\n                {\n                    name: 'AES-' + spec[6].toUpperCase(), // can be any supported AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\" or \"HMAC\")\n                    length: spec[3] // can be 128, 192 or 256\n                },\n                false, // the key may not be exported\n                ['encrypt', 'decrypt'] // we may only use it for en- and decryption\n            ).catch(Alert.showError);\n        }\n\n        /**\n         * gets crypto settings from specification and authenticated data\n         *\n         * @name   CryptTool.cryptoSettings\n         * @function\n         * @private\n         * @param  {string} adata authenticated data\n         * @param  {array}  spec cryptographic specification\n         * @return {object} crypto settings\n         */\n        function cryptoSettings(adata, spec)\n        {\n            return {\n                name: 'AES-' + spec[6].toUpperCase(), // can be any supported AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\" or \"HMAC\")\n                iv: stringToArraybuffer(spec[0]), // the initialization vector you used to encrypt\n                additionalData: stringToArraybuffer(adata), // the addtional data you used during encryption (if any)\n                tagLength: spec[4] // the length of the tag you used to encrypt (if any)\n            };\n        }\n\n        /**\n         * compress, then encrypt message with given key and password\n         *\n         * @name   CryptTool.cipher\n         * @async\n         * @function\n         * @param  {string} key\n         * @param  {string} password\n         * @param  {string} message\n         * @param  {array}  adata\n         * @return {array}  encrypted message in base64 encoding & adata containing encryption spec\n         */\n        me.cipher = async function(key, password, message, adata)\n        {\n            let zlib = (await z);\n            // AES in Galois Counter Mode, keysize 256 bit,\n            // authentication tag 128 bit, 10000 iterations in key derivation\n            const compression = (\n                    typeof zlib === 'undefined' ?\n                    'none' : // client lacks support for WASM\n                    ($('body').data('compression') || 'zlib')\n                ),\n                spec = [\n                    getRandomBytes(16), // initialization vector\n                    getRandomBytes(8),  // salt\n                    100000,             // iterations\n                    256,                // key size\n                    128,                // tag size\n                    'aes',              // algorithm\n                    'gcm',              // algorithm mode\n                    compression         // compression\n                ], encodedSpec = [];\n            for (let i = 0; i < spec.length; ++i) {\n                encodedSpec[i] = i < 2 ? btoa(spec[i]) : spec[i];\n            }\n            if (adata.length === 0) {\n                // comment\n                adata = encodedSpec;\n            } else if (adata[0] === null) {\n                // paste\n                adata[0] = encodedSpec;\n            }\n\n            // finally, encrypt message\n            return [\n                btoa(\n                    arraybufferToString(\n                        await window.crypto.subtle.encrypt(\n                            cryptoSettings(JSON.stringify(adata), spec),\n                            await deriveKey(key, password, spec),\n                            await compress(message, compression, zlib)\n                        ).catch(Alert.showError)\n                    )\n                ),\n                adata\n            ];\n        };\n\n        /**\n         * decrypt message with key, then decompress\n         *\n         * @name   CryptTool.decipher\n         * @async\n         * @function\n         * @param  {string} key\n         * @param  {string} password\n         * @param  {string|object} data encrypted message\n         * @return {string} decrypted message, empty if decryption failed\n         */\n        me.decipher = async function(key, password, data)\n        {\n            let adataString, spec, cipherMessage, plaintext;\n            let zlib = (await z);\n            if (data instanceof Array) {\n                // version 2\n                adataString = JSON.stringify(data[1]);\n                // clone the array instead of passing the reference\n                spec = (data[1][0] instanceof Array ? data[1][0] : data[1]).slice();\n                cipherMessage = data[0];\n            } else if (typeof data === 'string') {\n                // version 1\n                let object = JSON.parse(data);\n                adataString = atob(object.adata);\n                spec = [\n                    object.iv,\n                    object.salt,\n                    object.iter,\n                    object.ks,\n                    object.ts,\n                    object.cipher,\n                    object.mode,\n                    'rawdeflate'\n                ];\n                cipherMessage = object.ct;\n            } else {\n                throw 'unsupported message format';\n            }\n            spec[0] = atob(spec[0]);\n            spec[1] = atob(spec[1]);\n            if (spec[7] === 'zlib') {\n                if (typeof zlib === 'undefined') {\n                    throw 'Error decompressing paste, due to missing WebAssembly support.'\n                }\n            }\n            try {\n                plaintext = await window.crypto.subtle.decrypt(\n                    cryptoSettings(adataString, spec),\n                    await deriveKey(key, password, spec),\n                    stringToArraybuffer(\n                        atob(cipherMessage)\n                    )\n                );\n            } catch(err) {\n                console.error(err);\n                return '';\n            }\n            try {\n                return await decompress(plaintext, spec[7], zlib);\n            } catch(err) {\n                Alert.showError(err);\n                return err;\n            }\n        };\n\n        /**\n         * returns a random symmetric key\n         *\n         * generates 256 bit long keys (8 Bits * 32) for AES with 256 bit long blocks\n         *\n         * @name   CryptTool.getSymmetricKey\n         * @function\n         * @throws {string}\n         * @return {string} raw bytes\n         */\n        me.getSymmetricKey = function()\n        {\n            return getRandomBytes(32);\n        };\n\n        /**\n         * base58 encode a DOMString (UTF-16)\n         *\n         * @name   CryptTool.base58encode\n         * @function\n         * @param  {string} input\n         * @return {string} output\n         */\n        me.base58encode = function(input)\n        {\n            return base58.encode(\n                stringToArraybuffer(input)\n            );\n        }\n\n        /**\n         * base58 decode a DOMString (UTF-16)\n         *\n         * @name   CryptTool.base58decode\n         * @function\n         * @param  {string} input\n         * @return {string} output\n         */\n        me.base58decode = function(input)\n        {\n            return arraybufferToString(\n                base58.decode(input)\n            );\n        }\n\n        return me;\n    })();\n\n    /**\n     * (Model) Data source (aka MVC)\n     *\n     * @name   Model\n     * @class\n     */\n    const Model = (function () {\n        const me = {};\n\n        let id = null,\n            pasteData = null,\n            symmetricKey = null,\n            $templates;\n\n        /**\n         * returns the expiration set in the HTML\n         *\n         * @name   Model.getExpirationDefault\n         * @function\n         * @return string\n         */\n        me.getExpirationDefault = function()\n        {\n            return $('#pasteExpiration').val();\n        };\n\n        /**\n         * returns the format set in the HTML\n         *\n         * @name   Model.getFormatDefault\n         * @function\n         * @return string\n         */\n        me.getFormatDefault = function()\n        {\n            return $('#pasteFormatter').val();\n        };\n\n        /**\n         * returns the paste data (including the cipher data)\n         *\n         * @name   Model.getPasteData\n         * @function\n         * @param {function} callback (optional) Called when data is available\n         * @param {function} useCache (optional) Whether to use the cache or\n         *                            force a data reload. Default: true\n         * @return string\n         */\n        me.getPasteData = function(callback, useCache)\n        {\n            // use cache if possible/allowed\n            if (useCache !== false && pasteData !== null) {\n                //execute callback\n                if (typeof callback === 'function') {\n                    return callback(pasteData);\n                }\n\n                // alternatively just using inline\n                return pasteData;\n            }\n\n            // reload data\n            ServerInteraction.prepare();\n            ServerInteraction.setUrl(Helper.baseUri() + '?pasteid=' + me.getPasteId());\n\n            ServerInteraction.setFailure(function (status, data) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showViewButtons();\n\n                // show error message\n                Alert.showError(ServerInteraction.parseUploadError(status, data, 'get paste data'));\n            });\n            ServerInteraction.setSuccess(function (status, data) {\n                pasteData = new Paste(data);\n\n                if (typeof callback === 'function') {\n                    return callback(pasteData);\n                }\n            });\n            ServerInteraction.run();\n        };\n\n        /**\n         * get the pastes unique identifier from the URL,\n         * eg. https://example.com/path/?c05354954c49a487#dfdsdgdgdfgdf returns c05354954c49a487\n         *\n         * @name   Model.getPasteId\n         * @function\n         * @return {string} unique identifier\n         * @throws {string}\n         */\n        me.getPasteId = function()\n        {\n            const idRegEx = /^[a-z0-9]{16}$/;\n\n            // return cached value\n            if (id !== null) {\n                return id;\n            }\n\n            // do use URL interface, if possible\n            const url = new URL(window.location);\n\n            for (const param of url.searchParams) {\n                const key = param[0];\n                const value = param[1];\n\n                if (value === '' && idRegEx.test(key)) {\n                    // safe, as the whole regex is matched\n                    id = key;\n                    return key;\n                }\n            }\n\n            if (id === null) {\n                throw 'no paste id given';\n            }\n\n            return id;\n        }\n\n        /**\n         * returns true, when the URL has a delete token and the current call was used for deleting a paste.\n         *\n         * @name   Model.hasDeleteToken\n         * @function\n         * @return {bool}\n         */\n        me.hasDeleteToken = function()\n        {\n            return window.location.search.indexOf('deletetoken') !== -1;\n        }\n\n        /**\n         * return the deciphering key stored in anchor part of the URL\n         *\n         * @name   Model.getPasteKey\n         * @function\n         * @return {string|null} key\n         * @throws {string}\n         */\n        me.getPasteKey = function()\n        {\n            if (symmetricKey === null) {\n                let newKey = window.location.hash.substring(1);\n                if (newKey === '') {\n                    throw 'no encryption key given';\n                }\n\n                // Some web 2.0 services and redirectors add data AFTER the anchor\n                // (such as &utm_source=...). We will strip any additional data.\n                let ampersandPos = newKey.indexOf('&');\n                if (ampersandPos > -1)\n                {\n                    newKey = newKey.substring(0, ampersandPos);\n                }\n\n                // version 2 uses base58, version 1 uses base64 without decoding\n                try {\n                    // base58 encode strips NULL bytes at the beginning of the\n                    // string, so we re-add them if necessary\n                    symmetricKey = CryptTool.base58decode(newKey).padStart(32, '\\u0000');\n                } catch(e) {\n                    symmetricKey = newKey;\n                }\n            }\n\n            return symmetricKey;\n        };\n\n        /**\n         * returns a jQuery copy of the HTML template\n         *\n         * @name Model.getTemplate\n         * @function\n         * @param  {string} name - the name of the template\n         * @return {jQuery}\n         */\n        me.getTemplate = function(name)\n        {\n            // find template\n            let $element = $templates.find('#' + name + 'template').clone(true);\n            // change ID to avoid collisions (one ID should really be unique)\n            return $element.prop('id', name);\n        };\n\n        /**\n         * resets state, used for unit testing\n         *\n         * @name   Model.reset\n         * @function\n         */\n        me.reset = function()\n        {\n            pasteData = $templates = id = symmetricKey = null;\n        };\n\n        /**\n         * init navigation manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Model.init\n         * @function\n         */\n        me.init = function()\n        {\n            $templates = $('#templates');\n        };\n\n        return me;\n    })();\n\n    /**\n     * Helper functions for user interface\n     *\n     * everything directly UI-related, which fits nowhere else\n     *\n     * @name   UiHelper\n     * @class\n     */\n    const UiHelper = (function () {\n        const me = {};\n\n        /**\n         * handle history (pop) state changes\n         *\n         * currently this does only handle redirects to the home page.\n         *\n         * @name   UiHelper.historyChange\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function historyChange(event)\n        {\n            let currentLocation = Helper.baseUri();\n            if (event.originalEvent.state === null && // no state object passed\n                event.target.location.href === currentLocation && // target location is home page\n                window.location.href === currentLocation // and we are not already on the home page\n            ) {\n                // redirect to home page\n                window.location.href = currentLocation;\n            }\n        }\n\n        /**\n         * reload the page\n         *\n         * This takes the user to the PrivateBin homepage.\n         *\n         * @name   UiHelper.reloadHome\n         * @function\n         */\n        me.reloadHome = function()\n        {\n            window.location.href = Helper.baseUri();\n        };\n\n        /**\n         * checks whether the element is currently visible in the viewport (so\n         * the user can actually see it)\n         *\n         * @see    {@link https://stackoverflow.com/a/40658647}\n         * @name   UiHelper.isVisible\n         * @function\n         * @param  {jQuery} $element The link hash to move to.\n         */\n        me.isVisible = function($element)\n        {\n            let elementTop     = $element.offset().top,\n                viewportTop    = $(window).scrollTop(),\n                viewportBottom = viewportTop + $(window).height();\n            return elementTop > viewportTop && elementTop < viewportBottom;\n        };\n\n        /**\n         * scrolls to a specific element\n         *\n         * @see    {@link https://stackoverflow.com/questions/4198041/jquery-smooth-scroll-to-an-anchor#answer-12714767}\n         * @name   UiHelper.scrollTo\n         * @function\n         * @param  {jQuery}           $element        The link hash to move to.\n         * @param  {(number|string)}  animationDuration passed to jQuery .animate, when set to 0 the animation is skipped\n         * @param  {string}           animationEffect   passed to jQuery .animate\n         * @param  {function}         finishedCallback  function to call after animation finished\n         */\n        me.scrollTo = function($element, animationDuration, animationEffect, finishedCallback)\n        {\n            let $body = $('html, body'),\n                margin = 50,\n                callbackCalled = false,\n                dest = 0;\n\n            // calculate destination place\n            // if it would scroll out of the screen at the bottom only scroll it as\n            // far as the screen can go\n            if ($element.offset().top > $(document).height() - $(window).height()) {\n                dest = $(document).height() - $(window).height();\n            } else {\n                dest = $element.offset().top - margin;\n            }\n            // skip animation if duration is set to 0\n            if (animationDuration === 0) {\n                window.scrollTo(0, dest);\n            } else {\n                // stop previous animation\n                $body.stop();\n                // scroll to destination\n                $body.animate({\n                    scrollTop: dest\n                }, animationDuration, animationEffect);\n            }\n\n            // as we have finished we can enable scrolling again\n            $body.queue(function (next) {\n                if (!callbackCalled) {\n                    // call user function if needed\n                    if (typeof finishedCallback !== 'undefined') {\n                        finishedCallback();\n                    }\n\n                    // prevent calling this function twice\n                    callbackCalled = true;\n                }\n                next();\n            });\n        };\n\n        /**\n         * trigger a history (pop) state change\n         *\n         * used to test the UiHelper.historyChange private function\n         *\n         * @name   UiHelper.mockHistoryChange\n         * @function\n         * @param  {string} state   (optional) state to mock\n         */\n        me.mockHistoryChange = function(state)\n        {\n            if (typeof state === 'undefined') {\n                state = null;\n            }\n            historyChange($.Event('popstate', {originalEvent: new PopStateEvent('popstate', {state: state}), target: window}));\n        };\n\n        /**\n         * initialize\n         *\n         * @name   UiHelper.init\n         * @function\n         */\n        me.init = function()\n        {\n            // update link to home page\n            $('.reloadlink').prop('href', Helper.baseUri());\n\n            $(window).on('popstate', historyChange);\n        };\n\n        return me;\n    })();\n\n    /**\n     * Alert/error manager\n     *\n     * @name   Alert\n     * @class\n     */\n    const Alert = (function () {\n        const me = {};\n\n        let $errorMessage,\n            $loadingIndicator,\n            $statusMessage,\n            $remainingTime,\n            currentIcon,\n            customHandler;\n\n        const alertType = [\n            'loading', // not in bootstrap CSS, but using a plausible value here\n            'info',    // status icon\n            'warning', // warning icon\n            'danger'   // error icon\n        ];\n\n        /**\n         * forwards a request to the i18n module and shows the element\n         *\n         * @name   Alert.handleNotification\n         * @private\n         * @function\n         * @param  {int} id - id of notification\n         * @param  {jQuery} $element - jQuery object\n         * @param  {string|array} args\n         * @param  {string|null} icon - optional, icon\n         */\n        function handleNotification(id, $element, args, icon)\n        {\n            // basic parsing/conversion of parameters\n            if (typeof icon === 'undefined') {\n                icon = null;\n            }\n            if (typeof args === 'undefined') {\n                args = null;\n            } else if (typeof args === 'string') {\n                // convert string to array if needed\n                args = [args];\n            } else if (args  instanceof Error) {\n                // extract message into array if needed\n                args = [args.message];\n            }\n\n            // pass to custom handler if defined\n            if (typeof customHandler === 'function') {\n                let handlerResult = customHandler(alertType[id], $element, args, icon);\n                if (handlerResult === true) {\n                    // if it returns true, skip own handler\n                    return;\n                }\n                if (handlerResult instanceof jQuery) {\n                    // continue processing with new element\n                    $element = handlerResult;\n                    icon = null; // icons not supported in this case\n                }\n            }\n            let $translationTarget = $element;\n\n            // handle icon, if template uses one\n            const $glyphIcon = $element.find(':first');\n            if ($glyphIcon.length) {\n                // if there is an icon, we need to provide an inner element\n                // to translate the message into, instead of the parent\n                $translationTarget = $('<span>');\n                $element.html(' ').prepend($glyphIcon).append($translationTarget);\n\n                if (icon !== null && // icon was passed\n                    icon !== currentIcon[id] // and it differs from current icon\n                ) {\n                    // remove (previous) icon\n                    $glyphIcon.removeClass(currentIcon[id]);\n\n                    // any other thing as a string (e.g. 'null') (only) removes the icon\n                    if (typeof icon === 'string') {\n                        // set new icon\n                        currentIcon[id] = 'glyphicon-' + icon;\n                        $glyphIcon.addClass(currentIcon[id]);\n                    }\n                }\n            }\n\n            // show text\n            if (args !== null) {\n                // add jQuery object to it as first parameter\n                args.unshift($translationTarget);\n                // pass it to I18n\n                I18n._.apply(this, args);\n            }\n\n            // show notification\n            $element.removeClass('hidden');\n        }\n\n        /**\n         * display a status message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showStatus\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         * @param  {string|null}  icon        optional, the icon to show,\n         *                                    default: leave previous icon\n         */\n        me.showStatus = function(message, icon)\n        {\n            handleNotification(1, $statusMessage, message, icon);\n        };\n\n        /**\n         * display a warning message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showWarning\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         * @param  {string|null}  icon        optional, the icon to show, default:\n         *                                    leave previous icon\n         */\n        me.showWarning = function(message, icon)\n        {\n            $errorMessage.find(':first')\n                         .removeClass(currentIcon[3])\n                         .addClass(currentIcon[2]);\n            handleNotification(2, $errorMessage, message, icon);\n        };\n\n        /**\n         * display an error message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showError\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         * @param  {string|null}  icon        optional, the icon to show, default:\n         *                                    leave previous icon\n         */\n        me.showError = function(message, icon)\n        {\n            handleNotification(3, $errorMessage, message, icon);\n        };\n\n        /**\n         * display remaining message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showRemaining\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         */\n        me.showRemaining = function(message)\n        {\n            handleNotification(1, $remainingTime, message);\n        };\n\n        /**\n         * shows a loading message, optionally with a percentage\n         *\n         * This automatically passes all texts to the i10s module.\n         *\n         * @name   Alert.showLoading\n         * @function\n         * @param  {string|array|null} message      optional, use an array for %s/%d options, default: 'Loading\u2026'\n         * @param  {string|null}       icon         optional, the icon to show, default: leave previous icon\n         */\n        me.showLoading = function(message, icon)\n        {\n            // default message text\n            if (typeof message === 'undefined') {\n                message = 'Loading\u2026';\n            }\n\n            handleNotification(0, $loadingIndicator, message, icon);\n\n            // show loading status (cursor)\n            $('body').addClass('loading');\n        };\n\n        /**\n         * hides the loading message\n         *\n         * @name   Alert.hideLoading\n         * @function\n         */\n        me.hideLoading = function()\n        {\n            $loadingIndicator.addClass('hidden');\n\n            // hide loading cursor\n            $('body').removeClass('loading');\n        };\n\n        /**\n         * hides any status/error messages\n         *\n         * This does not include the loading message.\n         *\n         * @name   Alert.hideMessages\n         * @function\n         */\n        me.hideMessages = function()\n        {\n            $statusMessage.addClass('hidden');\n            $errorMessage.addClass('hidden');\n        };\n\n        /**\n         * set a custom handler, which gets all notifications.\n         *\n         * This handler gets the following arguments:\n         * alertType (see array), $element, args, icon\n         * If it returns true, the own processing will be stopped so the message\n         * will not be displayed. Otherwise it will continue.\n         * As an aditional feature it can return q jQuery element, which will\n         * then be used to add the message there. Icons are not supported in\n         * that case and will be ignored.\n         * Pass 'null' to reset/delete the custom handler.\n         * Note that there is no notification when a message is supposed to get\n         * hidden.\n         *\n         * @name   Alert.setCustomHandler\n         * @function\n         * @param {function|null} newHandler\n         */\n        me.setCustomHandler = function(newHandler)\n        {\n            customHandler = newHandler;\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Alert.init\n         * @function\n         */\n        me.init = function()\n        {\n            // hide \"no javascript\" error message\n            $('#noscript').hide();\n\n            // not a reset, but first set of the elements\n            $errorMessage = $('#errormessage');\n            $loadingIndicator = $('#loadingindicator');\n            $statusMessage = $('#status');\n            $remainingTime = $('#remainingtime');\n\n            currentIcon = [\n                'glyphicon-time', // loading icon\n                'glyphicon-info-sign', // status icon\n                'glyphicon-warning-sign', // warning icon\n                'glyphicon-alert' // error icon\n            ];\n        };\n\n        return me;\n    })();\n\n    /**\n     * handles paste status/result\n     *\n     * @name   PasteStatus\n     * @class\n     */\n    const PasteStatus = (function () {\n        const me = {};\n\n        let $pasteSuccess,\n            $pasteUrl,\n            $remainingTime,\n            $shortenButton;\n\n        /**\n         * forward to URL shortener\n         *\n         * @name   PasteStatus.sendToShortener\n         * @private\n         * @function\n         */\n        function sendToShortener()\n        {\n            if ($shortenButton.hasClass('buttondisabled')) {\n                return;\n            }\n            $.ajax({\n                type: 'GET',\n                url: `${$shortenButton.data('shortener')}${encodeURIComponent($pasteUrl.attr('href'))}`,\n                headers: {'Accept': 'text/html, application/xhtml+xml, application/xml, application/json'},\n                processData: false,\n                timeout: 10000,\n                xhrFields: {\n                    withCredentials: false\n                },\n                success: function(response) {\n                    let responseString = response;\n                    if (typeof responseString === 'object') {\n                        responseString = JSON.stringify(responseString);\n                    }\n                    if (typeof responseString === 'string' && responseString.length > 0) {\n                        const shortUrlMatcher = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g;\n                        const shortUrl = (responseString.match(shortUrlMatcher) || []).sort(function(a, b) {\n                            return a.length - b.length;\n                        })[0];\n                        if (typeof shortUrl === 'string' && shortUrl.length > 0) {\n                            // we disable the button to avoid calling shortener again\n                            $shortenButton.addClass('buttondisabled');\n                            // update link\n                            $pasteUrl.text(shortUrl);\n                            $pasteUrl.prop('href', shortUrl);\n                            // we pre-select the link so that the user only has to [Ctrl]+[c] the link\n                            Helper.selectText($pasteUrl[0]);\n                            return;\n                        }\n                    }\n                    Alert.showError('Cannot parse response from URL shortener.');\n                }\n            })\n            .fail(function(data, textStatus, errorThrown) {\n                console.error(textStatus, errorThrown);\n                // we don't know why it failed, could be CORS of the external\n                // server not setup properly, in which case we follow old\n                // behavior to open it in new tab\n                window.open(\n                    `${$shortenButton.data('shortener')}${encodeURIComponent($pasteUrl.attr('href'))}`,\n                    '_blank',\n                    'noopener, noreferrer'\n                );\n            });\n        }\n\n        /**\n         * Forces opening the paste if the link does not do this automatically.\n         *\n         * This is necessary as browsers will not reload the page when it is\n         * already loaded (which is fake as it is set via history.pushState()).\n         *\n         * @name   PasteStatus.pasteLinkClick\n         * @function\n         */\n        function pasteLinkClick()\n        {\n            // check if location is (already) shown in URL bar\n            if (window.location.href === $pasteUrl.attr('href')) {\n                // if so we need to load link by reloading the current site\n                window.location.reload(true);\n            }\n        }\n\n        /**\n         * creates a notification after a successfull paste upload\n         *\n         * @name   PasteStatus.createPasteNotification\n         * @function\n         * @param  {string} url\n         * @param  {string} deleteUrl\n         */\n        me.createPasteNotification = function(url, deleteUrl)\n        {\n            I18n._(\n                $('#pastelink'),\n                'Your paste is <a id=\"pasteurl\" href=\"%s\">%s</a> <span id=\"copyhint\">(Hit [Ctrl]+[c] to copy)</span>',\n                url, url\n            );\n            // save newly created element\n            $pasteUrl = $('#pasteurl');\n            // and add click event\n            $pasteUrl.click(pasteLinkClick);\n\n            // delete link\n            $('#deletelink').html('<a href=\"' + deleteUrl + '\"></a>');\n            I18n._($('#deletelink a').first(), 'Delete data');\n\n            // enable shortener button\n            $shortenButton.removeClass('buttondisabled');\n\n            // show result\n            $pasteSuccess.removeClass('hidden');\n            // we pre-select the link so that the user only has to [Ctrl]+[c] the link\n            Helper.selectText($pasteUrl[0]);\n        };\n\n        /**\n         * shows the remaining time\n         *\n         * @name PasteStatus.showRemainingTime\n         * @function\n         * @param {Paste} paste\n         */\n        me.showRemainingTime = function(paste)\n        {\n            if (paste.isBurnAfterReadingEnabled()) {\n                // display paste \"for your eyes only\" if it is deleted\n\n                // the paste has been deleted when the JSON with the ciphertext\n                // has been downloaded\n\n                Alert.showRemaining('FOR YOUR EYES ONLY. Don\\'t close this window, this message can\\'t be displayed again.');\n                $remainingTime.addClass('foryoureyesonly');\n            } else if (paste.getTimeToLive() > 0) {\n                // display paste expiration\n                let expiration = Helper.secondsToHuman(paste.getTimeToLive()),\n                    expirationLabel = [\n                        'This document will expire in %d ' + expiration[1] + '.',\n                        'This document will expire in %d ' + expiration[1] + 's.'\n                    ];\n\n                Alert.showRemaining([expirationLabel, expiration[0]]);\n                $remainingTime.removeClass('foryoureyesonly');\n            } else {\n                // never expires\n                return;\n            }\n\n            // in the end, display notification\n            $remainingTime.removeClass('hidden');\n        };\n\n        /**\n         * hides the remaining time and successful upload notification\n         *\n         * @name PasteStatus.hideMessages\n         * @function\n         */\n        me.hideMessages = function()\n        {\n            $remainingTime.addClass('hidden');\n            $pasteSuccess.addClass('hidden');\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   PasteStatus.init\n         * @function\n         */\n        me.init = function()\n        {\n            $pasteSuccess = $('#pastesuccess');\n            // $pasteUrl is saved in me.createPasteNotification() after creation\n            $remainingTime = $('#remainingtime');\n            $shortenButton = $('#shortenbutton');\n\n            // bind elements\n            $shortenButton.click(sendToShortener);\n        };\n\n        return me;\n    })();\n\n    /**\n     * password prompt\n     *\n     * @name Prompt\n     * @class\n     */\n    const Prompt = (function () {\n        const me = {};\n\n        let $passwordDecrypt,\n            $passwordForm,\n            $passwordModal,\n            password = '';\n\n        /**\n         * submit a password in the modal dialog\n         *\n         * @name Prompt.submitPasswordModal\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function submitPasswordModal(event)\n        {\n            event.preventDefault();\n\n            // get input\n            password = $passwordDecrypt.val();\n\n            // hide modal\n            $passwordModal.modal('hide');\n\n            PasteDecrypter.run();\n        }\n\n        /**\n         * ask the user for the password and set it\n         *\n         * @name Prompt.requestPassword\n         * @function\n         */\n        me.requestPassword = function()\n        {\n            // show new bootstrap method (if available)\n            if ($passwordModal.length !== 0) {\n                $passwordModal.modal({\n                    backdrop: 'static',\n                    keyboard: false\n                });\n                return;\n            }\n\n            // fallback to old method for page template\n            password = prompt(I18n._('Please enter the password for this paste:'), '');\n            if (password === null) {\n                throw 'password prompt canceled';\n            }\n            if (password.length === 0) {\n                // recurse\u2026\n                return me.requestPassword();\n            }\n            PasteDecrypter.run();\n        };\n\n        /**\n         * get the cached password\n         *\n         * If you do not get a password with this function\n         * (returns an empty string), use requestPassword.\n         *\n         * @name   Prompt.getPassword\n         * @function\n         * @return {string}\n         */\n        me.getPassword = function()\n        {\n            return password;\n        };\n\n        /**\n         * resets the password to an empty string\n         *\n         * @name   Prompt.reset\n         * @function\n         */\n        me.reset = function()\n        {\n            // reset internal\n            password = '';\n\n            // and also reset UI\n            $passwordDecrypt.val('');\n        }\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Prompt.init\n         * @function\n         */\n        me.init = function()\n        {\n            $passwordDecrypt = $('#passworddecrypt');\n            $passwordForm = $('#passwordform');\n            $passwordModal = $('#passwordmodal');\n\n            // bind events\n\n            // focus password input when it is shown\n            $passwordModal.on('shown.bs.Model', function () {\n                $passwordDecrypt.focus();\n            });\n            // handle Model password submission\n            $passwordForm.submit(submitPasswordModal);\n        };\n\n        return me;\n    })();\n\n    /**\n     * Manage paste/message input, and preview tab\n     *\n     * Note that the actual preview is handled by PasteViewer.\n     *\n     * @name   Editor\n     * @class\n     */\n    const Editor = (function () {\n        const me = {};\n\n        let $editorTabs,\n            $messageEdit,\n            $messagePreview,\n            $message,\n            isPreview = false;\n\n        /**\n         * support input of tab character\n         *\n         * @name   Editor.supportTabs\n         * @function\n         * @param  {Event} event\n         * @this $message (but not used, so it is jQuery-free, possibly faster)\n         */\n        function supportTabs(event)\n        {\n            const keyCode = event.keyCode || event.which;\n            // tab was pressed\n            if (keyCode === 9) {\n                // get caret position & selection\n                const val   = this.value,\n                      start = this.selectionStart,\n                      end   = this.selectionEnd;\n                // set textarea value to: text before caret + tab + text after caret\n                this.value = val.substring(0, start) + '\\t' + val.substring(end);\n                // put caret at right position again\n                this.selectionStart = this.selectionEnd = start + 1;\n                // prevent the textarea to lose focus\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * view the Editor tab\n         *\n         * @name   Editor.viewEditor\n         * @function\n         * @param  {Event} event - optional\n         */\n        function viewEditor(event)\n        {\n            // toggle buttons\n            $messageEdit.addClass('active');\n            $messagePreview.removeClass('active');\n\n            $('#messageedit').attr('aria-selected','true');\n            $('#messagepreview').attr('aria-selected','false');\n\n            PasteViewer.hide();\n\n            // reshow input\n            $message.removeClass('hidden');\n\n            me.focusInput();\n\n            // finish\n            isPreview = false;\n\n            // prevent jumping of page to top\n            if (typeof event !== 'undefined') {\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * view the preview tab\n         *\n         * @name   Editor.viewPreview\n         * @function\n         * @param  {Event} event\n         */\n        function viewPreview(event)\n        {\n            // toggle buttons\n            $messageEdit.removeClass('active');\n            $messagePreview.addClass('active');\n\n            $('#messageedit').attr('aria-selected','false');\n            $('#messagepreview').attr('aria-selected','true');\n\n            // hide input as now preview is shown\n            $message.addClass('hidden');\n\n            // show preview\n            PasteViewer.setText($message.val());\n            if (AttachmentViewer.hasAttachmentData()) {\n                const attachment = AttachmentViewer.getAttachment();\n                AttachmentViewer.handleBlobAttachmentPreview(\n                    AttachmentViewer.getAttachmentPreview(),\n                    attachment[0], attachment[1]\n                );\n            }\n            PasteViewer.run();\n\n            // finish\n            isPreview = true;\n\n            // prevent jumping of page to top\n            if (typeof event !== 'undefined') {\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * get the state of the preview\n         *\n         * @name   Editor.isPreview\n         * @function\n         */\n        me.isPreview = function()\n        {\n            return isPreview;\n        };\n\n        /**\n         * reset the Editor view\n         *\n         * @name   Editor.resetInput\n         * @function\n         */\n        me.resetInput = function()\n        {\n            // go back to input\n            if (isPreview) {\n                viewEditor();\n            }\n\n            // clear content\n            $message.val('');\n        };\n\n        /**\n         * shows the Editor\n         *\n         * @name   Editor.show\n         * @function\n         */\n        me.show = function()\n        {\n            $message.removeClass('hidden');\n            $editorTabs.removeClass('hidden');\n        };\n\n        /**\n         * hides the Editor\n         *\n         * @name   Editor.hide\n         * @function\n         */\n        me.hide = function()\n        {\n            $message.addClass('hidden');\n            $editorTabs.addClass('hidden');\n        };\n\n        /**\n         * focuses the message input\n         *\n         * @name   Editor.focusInput\n         * @function\n         */\n        me.focusInput = function()\n        {\n            $message.focus();\n        };\n\n        /**\n         * sets a new text\n         *\n         * @name   Editor.setText\n         * @function\n         * @param {string} newText\n         */\n        me.setText = function(newText)\n        {\n            $message.val(newText);\n        };\n\n        /**\n         * returns the current text\n         *\n         * @name   Editor.getText\n         * @function\n         * @return {string}\n         */\n        me.getText = function()\n        {\n            return $message.val();\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Editor.init\n         * @function\n         */\n        me.init = function()\n        {\n            $editorTabs = $('#editorTabs');\n            $message = $('#message');\n\n            // bind events\n            $message.keydown(supportTabs);\n\n            // bind click events to tab switchers (a), but save parent of them\n            // (li)\n            $messageEdit = $('#messageedit').click(viewEditor).parent();\n            $messagePreview = $('#messagepreview').click(viewPreview).parent();\n        };\n\n        return me;\n    })();\n\n    /**\n     * (view) Parse and show paste.\n     *\n     * @name   PasteViewer\n     * @class\n     */\n    const PasteViewer = (function () {\n        const me = {};\n\n        let $placeholder,\n            $prettyMessage,\n            $prettyPrint,\n            $plainText,\n            text,\n            format = 'plaintext',\n            isDisplayed = false,\n            isChanged = true; // by default true as nothing was parsed yet\n\n        /**\n         * apply the set format on paste and displays it\n         *\n         * @name   PasteViewer.parsePaste\n         * @private\n         * @function\n         */\n        function parsePaste()\n        {\n            // skip parsing if no text is given\n            if (text === '') {\n                return;\n            }\n\n            if (format === 'markdown') {\n                const converter = new showdown.Converter({\n                    strikethrough: true,\n                    tables: true,\n                    tablesHeaderId: true,\n                    simplifiedAutoLink: true,\n                    excludeTrailingPunctuationFromURLs: true\n                });\n                // let showdown convert the HTML and sanitize HTML *afterwards*!\n                $plainText.html(\n                    DOMPurify.sanitize(\n                        converter.makeHtml(text)\n                    )\n                );\n                // add table classes from bootstrap css\n                $plainText.find('table').addClass('table-condensed table-bordered');\n            } else {\n                if (format === 'syntaxhighlighting') {\n                    // yes, this is really needed to initialize the environment\n                    if (typeof prettyPrint === 'function')\n                    {\n                        prettyPrint();\n                    }\n\n                    $prettyPrint.html(\n                        prettyPrintOne(\n                            Helper.htmlEntities(text), null, true\n                        )\n                    );\n                } else {\n                    // = 'plaintext'\n                    $prettyPrint.text(text);\n                }\n                Helper.urls2links($prettyPrint);\n                $prettyPrint.css('white-space', 'pre-wrap');\n                $prettyPrint.css('word-break', 'normal');\n                $prettyPrint.removeClass('prettyprint');\n            }\n        }\n\n        /**\n         * displays the paste\n         *\n         * @name   PasteViewer.showPaste\n         * @private\n         * @function\n         */\n        function showPaste()\n        {\n            // instead of \"nothing\" better display a placeholder\n            if (text === '') {\n                $placeholder.removeClass('hidden');\n                return;\n            }\n            // otherwise hide the placeholder\n            $placeholder.addClass('hidden');\n\n            switch (format) {\n                case 'markdown':\n                    $plainText.removeClass('hidden');\n                    $prettyMessage.addClass('hidden');\n                    break;\n                default:\n                    $plainText.addClass('hidden');\n                    $prettyMessage.removeClass('hidden');\n                    break;\n            }\n        }\n\n        /**\n         * sets the format in which the text is shown\n         *\n         * @name   PasteViewer.setFormat\n         * @function\n         * @param {string} newFormat the new format\n         */\n        me.setFormat = function(newFormat)\n        {\n            // skip if there is no update\n            if (format === newFormat) {\n                return;\n            }\n\n            // needs to update display too, if we switch from or to Markdown\n            if (format === 'markdown' || newFormat === 'markdown') {\n                isDisplayed = false;\n            }\n\n            format = newFormat;\n            isChanged = true;\n        };\n\n        /**\n         * returns the current format\n         *\n         * @name   PasteViewer.getFormat\n         * @function\n         * @return {string}\n         */\n        me.getFormat = function()\n        {\n            return format;\n        };\n\n        /**\n         * returns whether the current view is pretty printed\n         *\n         * @name   PasteViewer.isPrettyPrinted\n         * @function\n         * @return {bool}\n         */\n        me.isPrettyPrinted = function()\n        {\n            return $prettyPrint.hasClass('prettyprinted');\n        };\n\n        /**\n         * sets the text to show\n         *\n         * @name   PasteViewer.setText\n         * @function\n         * @param {string} newText the text to show\n         */\n        me.setText = function(newText)\n        {\n            if (text !== newText) {\n                text = newText;\n                isChanged = true;\n            }\n        };\n\n        /**\n         * gets the current cached text\n         *\n         * @name   PasteViewer.getText\n         * @function\n         * @return {string}\n         */\n        me.getText = function()\n        {\n            return text;\n        };\n\n        /**\n         * show/update the parsed text (preview)\n         *\n         * @name   PasteViewer.run\n         * @function\n         */\n        me.run = function()\n        {\n            if (isChanged) {\n                parsePaste();\n                isChanged = false;\n            }\n\n            if (!isDisplayed) {\n                showPaste();\n                isDisplayed = true;\n            }\n        };\n\n        /**\n         * hide parsed text (preview)\n         *\n         * @name   PasteViewer.hide\n         * @function\n         */\n        me.hide = function()\n        {\n            if (!isDisplayed) {\n                return;\n            }\n\n            $plainText.addClass('hidden');\n            $prettyMessage.addClass('hidden');\n            $placeholder.addClass('hidden');\n            AttachmentViewer.hideAttachmentPreview();\n\n            isDisplayed = false;\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   PasteViewer.init\n         * @function\n         */\n        me.init = function()\n        {\n            $placeholder = $('#placeholder');\n            $plainText = $('#plaintext');\n            $prettyMessage = $('#prettymessage');\n            $prettyPrint = $('#prettyprint');\n\n            // get default option from template/HTML or fall back to set value\n            format = Model.getFormatDefault() || format;\n            text = '';\n            isDisplayed = false;\n            isChanged = true;\n        };\n\n        return me;\n    })();\n\n    /**\n     * (view) Show attachment and preview if possible\n     *\n     * @name   AttachmentViewer\n     * @class\n     */\n    const AttachmentViewer = (function () {\n        const me = {};\n\n        let $attachmentLink,\n            $attachmentPreview,\n            $attachment,\n            attachmentData,\n            file,\n            $fileInput,\n            $dragAndDropFileName,\n            attachmentHasPreview = false,\n            $dropzone;\n\n        /**\n         * sets the attachment but does not yet show it\n         *\n         * @name   AttachmentViewer.setAttachment\n         * @function\n         * @param {string} attachmentData - base64-encoded data of file\n         * @param {string} fileName - optional, file name\n         */\n        me.setAttachment = function(attachmentData, fileName)\n        {\n            // data URI format: data:[<mediaType>][;base64],<data>\n\n            // position in data URI string of where data begins\n            const base64Start = attachmentData.indexOf(',') + 1;\n            // position in data URI string of where mediaType ends\n            const mediaTypeEnd = attachmentData.indexOf(';');\n\n            // extract mediaType\n            const mediaType = attachmentData.substring(5, mediaTypeEnd);\n            // extract data and convert to binary\n            const rawData = attachmentData.substring(base64Start);\n            const decodedData = rawData.length > 0 ? atob(rawData) : '';\n\n            // Transform into a Blob\n            const buf = new Uint8Array(decodedData.length);\n            for (let i = 0; i < decodedData.length; ++i) {\n                buf[i] = decodedData.charCodeAt(i);\n            }\n            const blob = new window.Blob([ buf ], { type: mediaType });\n\n            // Get Blob URL\n            const blobUrl = window.URL.createObjectURL(blob);\n\n            // IE does not support setting a data URI on an a element\n            // Using msSaveBlob to download\n            if (window.Blob && navigator.msSaveBlob) {\n                $attachmentLink.off('click').on('click', function () {\n                    navigator.msSaveBlob(blob, fileName);\n                });\n            } else {\n                $attachmentLink.attr('href', blobUrl);\n            }\n\n            if (typeof fileName !== 'undefined') {\n                $attachmentLink.attr('download', fileName);\n            }\n\n            me.handleBlobAttachmentPreview($attachmentPreview, blobUrl, mediaType);\n        };\n\n        /**\n         * displays the attachment\n         *\n         * @name AttachmentViewer.showAttachment\n         * @function\n         */\n        me.showAttachment = function()\n        {\n            $attachment.removeClass('hidden');\n\n            if (attachmentHasPreview) {\n                $attachmentPreview.removeClass('hidden');\n            }\n        };\n\n        /**\n         * removes the attachment\n         *\n         * This automatically hides the attachment containers too, to\n         * prevent an inconsistent display.\n         *\n         * @name AttachmentViewer.removeAttachment\n         * @function\n         */\n        me.removeAttachment = function()\n        {\n            if (!$attachment.length) {\n                return;\n            }\n            me.hideAttachment();\n            me.hideAttachmentPreview();\n            $attachmentLink.removeAttr('href');\n            $attachmentLink.removeAttr('download');\n            $attachmentLink.off('click');\n            $attachmentPreview.html('');\n            $dragAndDropFileName.text('');\n\n            AttachmentViewer.removeAttachmentData();\n        };\n\n        /**\n         * removes the attachment data\n         *\n         * This removes the data, which would be uploaded otherwise.\n         *\n         * @name AttachmentViewer.removeAttachmentData\n         * @function\n         */\n        me.removeAttachmentData = function()\n        {\n            file = undefined;\n            attachmentData = undefined;\n        };\n\n        /**\n         * Cleares the drag & drop data.\n         *\n         * @name AttachmentViewer.clearDragAndDrop\n         * @function\n         */\n        me.clearDragAndDrop = function()\n        {\n            $dragAndDropFileName.text('');\n        };\n\n        /**\n         * hides the attachment\n         *\n         * This will not hide the preview (see AttachmentViewer.hideAttachmentPreview\n         * for that) nor will it hide the attachment link if it was moved somewhere\n         * else (see AttachmentViewer.moveAttachmentTo).\n         *\n         * @name AttachmentViewer.hideAttachment\n         * @function\n         */\n        me.hideAttachment = function()\n        {\n            $attachment.addClass('hidden');\n        };\n\n        /**\n         * hides the attachment preview\n         *\n         * @name AttachmentViewer.hideAttachmentPreview\n         * @function\n         */\n        me.hideAttachmentPreview = function()\n        {\n            if ($attachmentPreview) {\n                $attachmentPreview.addClass('hidden');\n            }\n        };\n\n        /**\n         * checks if there is an attachment displayed\n         *\n         * @name   AttachmentViewer.hasAttachment\n         * @function\n         */\n        me.hasAttachment = function()\n        {\n            if (!$attachment.length) {\n                return false;\n            }\n            const link = $attachmentLink.prop('href');\n            return (typeof link !== 'undefined' && link !== '');\n        };\n\n        /**\n         * checks if there is attachment data (for preview!) available\n         *\n         * It returns true, when there is data that needs to be encrypted.\n         *\n         * @name   AttachmentViewer.hasAttachmentData\n         * @function\n         */\n        me.hasAttachmentData = function()\n        {\n            if ($attachment.length) {\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * return the attachment\n         *\n         * @name   AttachmentViewer.getAttachment\n         * @function\n         * @returns {array}\n         */\n        me.getAttachment = function()\n        {\n            return [\n                $attachmentLink.prop('href'),\n                $attachmentLink.prop('download')\n            ];\n        };\n\n        /**\n         * moves the attachment link to another element\n         *\n         * It is advisable to hide the attachment afterwards (AttachmentViewer.hideAttachment)\n         *\n         * @name   AttachmentViewer.moveAttachmentTo\n         * @function\n         * @param {jQuery} $element - the wrapper/container element where this should be moved to\n         * @param {string} label - the text to show (%s will be replaced with the file name), will automatically be translated\n         */\n        me.moveAttachmentTo = function($element, label)\n        {\n            // move elemement to new place\n            $attachmentLink.appendTo($element);\n\n            // update text - ensuring no HTML is inserted into the text node\n            I18n._($attachmentLink, label, $attachmentLink.attr('download'));\n        };\n\n        /**\n         * read file data as data URL using the FileReader API\n         *\n         * @name   AttachmentViewer.readFileData\n         * @private\n         * @function\n         * @param {object} loadedFile (optional) loaded file object\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL()}\n         */\n        function readFileData(loadedFile) {\n            if (typeof FileReader === 'undefined') {\n                // revert loading status\u2026\n                me.hideAttachment();\n                me.hideAttachmentPreview();\n                Alert.showWarning('Your browser does not support uploading encrypted files. Please use a newer browser.');\n                return;\n            }\n\n            const fileReader = new FileReader();\n            if (loadedFile === undefined) {\n                loadedFile = $fileInput[0].files[0];\n                $dragAndDropFileName.text('');\n            } else {\n                $dragAndDropFileName.text(loadedFile.name);\n            }\n\n            if (typeof loadedFile !== 'undefined') {\n                file = loadedFile;\n                fileReader.onload = function (event) {\n                    const dataURL = event.target.result;\n                    attachmentData = dataURL;\n\n                    if (Editor.isPreview()) {\n                        me.handleAttachmentPreview($attachmentPreview, dataURL);\n                        $attachmentPreview.removeClass('hidden');\n                    }\n\n                    TopNav.highlightFileupload();\n                };\n                fileReader.readAsDataURL(loadedFile);\n            } else {\n                me.removeAttachmentData();\n            }\n        }\n\n        /**\n         * handle the preview of files decoded to blob that can either be an image, video, audio or pdf element\n         *\n         * @name   AttachmentViewer.handleBlobAttachmentPreview\n         * @function\n         * @argument {jQuery} $targetElement element where the preview should be appended\n         * @argument {string} file as a blob URL\n         * @argument {string} mime type\n         */\n        me.handleBlobAttachmentPreview = function ($targetElement, blobUrl, mimeType) {\n            if (blobUrl) {\n                attachmentHasPreview = true;\n                if (mimeType.match(/image\\//i)) {\n                    $targetElement.html(\n                        $(document.createElement('img'))\n                            .attr('src', blobUrl)\n                            .attr('class', 'img-thumbnail')\n                    );\n                } else if (mimeType.match(/video\\//i)) {\n                    $targetElement.html(\n                        $(document.createElement('video'))\n                            .attr('controls', 'true')\n                            .attr('autoplay', 'true')\n                            .attr('class', 'img-thumbnail')\n\n                            .append($(document.createElement('source'))\n                            .attr('type', mimeType)\n                            .attr('src', blobUrl))\n                    );\n                } else if (mimeType.match(/audio\\//i)) {\n                    $targetElement.html(\n                        $(document.createElement('audio'))\n                            .attr('controls', 'true')\n                            .attr('autoplay', 'true')\n\n                            .append($(document.createElement('source'))\n                            .attr('type', mimeType)\n                            .attr('src', blobUrl))\n                    );\n                } else if (mimeType.match(/\\/pdf/i)) {\n                    // Fallback for browsers, that don't support the vh unit\n                    const clientHeight = $(window).height();\n\n                    $targetElement.html(\n                        $(document.createElement('embed'))\n                            .attr('src', blobUrl)\n                            .attr('type', 'application/pdf')\n                            .attr('class', 'pdfPreview')\n                            .css('height', clientHeight)\n                    );\n                } else {\n                    attachmentHasPreview = false;\n                }\n            }\n        };\n\n        /**\n         * attaches the file attachment drag & drop handler to the page\n         *\n         * @name   AttachmentViewer.addDragDropHandler\n         * @private\n         * @function\n         */\n        function addDragDropHandler() {\n            if (typeof $fileInput === 'undefined' || $fileInput.length === 0) {\n                return;\n            }\n\n            const handleDragEnterOrOver = function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n                return false;\n            };\n\n            const handleDrop = function(event) {\n                const evt = event.originalEvent;\n                evt.stopPropagation();\n                evt.preventDefault();\n\n                if (TopNav.isAttachmentReadonly()) {\n                    return false;\n                }\n\n                if ($fileInput) {\n                    const file = evt.dataTransfer.files[0];\n                    //Clear the file input:\n                    $fileInput.wrap('<form>').closest('form').get(0).reset();\n                    $fileInput.unwrap();\n                    //Only works in Chrome:\n                    //fileInput[0].files = e.dataTransfer.files;\n\n                    readFileData(file);\n                }\n            };\n\n            $(document).draghover().on({\n                'draghoverstart': function(e) {\n                    if (TopNav.isAttachmentReadonly()) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        return false;\n                    }\n                    // show dropzone to indicate drop support\n                    $dropzone.removeClass('hidden');\n                },\n                'draghoverend': function() {\n                    $dropzone.addClass('hidden');\n                }\n            });\n\n            $(document).on('drop', handleDrop);\n            $(document).on('dragenter dragover', handleDragEnterOrOver);\n\n            $fileInput.on('change', function () {\n                readFileData();\n            });\n        }\n\n        /**\n         * attaches the clipboard attachment handler to the page\n         *\n         * @name   AttachmentViewer.addClipboardEventHandler\n         * @private\n         * @function\n         */\n        function addClipboardEventHandler() {\n            $(document).on('paste', function (event) {\n                const items = (event.clipboardData || event.originalEvent.clipboardData).items;\n                const lastItem = items[items.length - 1];\n                if (lastItem.kind === 'file') {\n                    if (TopNav.isAttachmentReadonly()) {\n                        event.stopPropagation();\n                        event.preventDefault();\n                        return false;\n                    } else {\n                        readFileData(lastItem.getAsFile());\n                    }\n                }\n            });\n        }\n\n\n        /**\n         * getter for attachment data\n         *\n         * @name   AttachmentViewer.getAttachmentData\n         * @function\n         * @return {jQuery}\n         */\n        me.getAttachmentData = function () {\n            return attachmentData;\n        };\n\n        /**\n         * getter for attachment link\n         *\n         * @name   AttachmentViewer.getAttachmentLink\n         * @function\n         * @return {jQuery}\n         */\n        me.getAttachmentLink = function () {\n            return $attachmentLink;\n        };\n\n        /**\n         * getter for attachment preview\n         *\n         * @name   AttachmentViewer.getAttachmentPreview\n         * @function\n         * @return {jQuery}\n         */\n        me.getAttachmentPreview = function () {\n            return $attachmentPreview;\n        };\n\n        /**\n         * getter for file data, returns the file contents\n         *\n         * @name   AttachmentViewer.getFile\n         * @function\n         * @return {string}\n         */\n        me.getFile = function () {\n            return file;\n        };\n\n        /**\n         * initiate\n         *\n         * preloads jQuery elements\n         *\n         * @name   AttachmentViewer.init\n         * @function\n         */\n        me.init = function()\n        {\n            $attachment = $('#attachment');\n            $dragAndDropFileName = $('#dragAndDropFileName');\n            $dropzone = $('#dropzone');\n            $attachmentLink = $('#attachment a') || $('<a>');\n            if($attachment.length) {\n                $attachmentPreview = $('#attachmentPreview');\n\n                $fileInput = $('#file');\n                addDragDropHandler();\n                addClipboardEventHandler();\n            }\n        }\n\n        return me;\n    })();\n\n    /**\n     * (view) Shows discussion thread and handles replies\n     *\n     * @name   DiscussionViewer\n     * @class\n     */\n    const DiscussionViewer = (function () {\n        const me = {};\n\n        let $commentTail,\n            $discussion,\n            $reply,\n            $replyMessage,\n            $replyNickname,\n            $replyStatus,\n            $commentContainer,\n            replyCommentId;\n\n        /**\n         * initializes the templates\n         *\n         * @name   DiscussionViewer.initTemplates\n         * @private\n         * @function\n         */\n        function initTemplates()\n        {\n            $reply = Model.getTemplate('reply');\n            $replyMessage = $reply.find('#replymessage');\n            $replyNickname = $reply.find('#nickname');\n            $replyStatus = $reply.find('#replystatus');\n\n            // cache jQuery elements\n            $commentTail = Model.getTemplate('commenttail');\n        }\n\n        /**\n         * open the comment entry when clicking the \"Reply\" button of a comment\n         *\n         * @name   DiscussionViewer.openReply\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function openReply(event)\n        {\n            const $source = $(event.target);\n\n            // clear input\n            $replyMessage.val('');\n            $replyNickname.val('');\n\n            // get comment id from source element\n            replyCommentId = $source.parent().prop('id').split('_')[1];\n\n            // move to correct position\n            $source.after($reply);\n\n            // show\n            $reply.removeClass('hidden');\n            $replyMessage.focus();\n\n            event.preventDefault();\n        }\n\n        /**\n         * custom handler for displaying notifications in own status message area\n         *\n         * @name   DiscussionViewer.handleNotification\n         * @function\n         * @param  {string} alertType\n         * @return {bool|jQuery}\n         */\n        me.handleNotification = function(alertType)\n        {\n            // ignore loading messages\n            if (alertType === 'loading') {\n                return false;\n            }\n\n            if (alertType === 'danger') {\n                $replyStatus.removeClass('alert-info');\n                $replyStatus.addClass('alert-danger');\n                $replyStatus.find(':first').removeClass('glyphicon-alert');\n                $replyStatus.find(':first').addClass('glyphicon-info-sign');\n            } else {\n                $replyStatus.removeClass('alert-danger');\n                $replyStatus.addClass('alert-info');\n                $replyStatus.find(':first').removeClass('glyphicon-info-sign');\n                $replyStatus.find(':first').addClass('glyphicon-alert');\n            }\n\n            return $replyStatus;\n        };\n\n        /**\n         * adds another comment\n         *\n         * @name   DiscussionViewer.addComment\n         * @function\n         * @param {Comment} comment\n         * @param {string} commentText\n         * @param {string} nickname\n         */\n        me.addComment = function(comment, commentText, nickname)\n        {\n            if (commentText === '') {\n                commentText = 'comment decryption failed';\n            }\n\n            // create new comment based on template\n            const $commentEntry = Model.getTemplate('comment');\n            $commentEntry.prop('id', 'comment_' + comment.id);\n            const $commentEntryData = $commentEntry.find('div.commentdata');\n\n            // set & parse text\n            $commentEntryData.text(commentText);\n            Helper.urls2links($commentEntryData);\n\n            // set nickname\n            if (nickname.length > 0) {\n                $commentEntry.find('span.nickname').text(nickname);\n            } else {\n                $commentEntry.find('span.nickname').html('<i></i>');\n                I18n._($commentEntry.find('span.nickname i'), 'Anonymous');\n            }\n\n            // set date\n            $commentEntry.find('span.commentdate')\n                      .text(' (' + (new Date(comment.getCreated() * 1000).toLocaleString()) + ')')\n                      .attr('title', 'CommentID: ' + comment.id);\n\n            // if an avatar is available, display it\n            const icon = comment.getIcon();\n            if (icon) {\n                $commentEntry.find('span.nickname')\n                             .before(\n                                '<img src=\"' + icon + '\" class=\"vizhash\" /> '\n                             );\n                $(document).on('languageLoaded', function () {\n                    $commentEntry.find('img.vizhash')\n                                 .prop('title', I18n._('Avatar generated from IP address'));\n                });\n            }\n\n            // starting point (default value/fallback)\n            let $place = $commentContainer;\n\n            // if parent comment exists\n            const $parentComment = $('#comment_' + comment.parentid);\n            if ($parentComment.length) {\n                // use parent as position for new comment, so it is shifted\n                // to the right\n                $place = $parentComment;\n            }\n\n            // finally append comment\n            $place.append($commentEntry);\n        };\n\n        /**\n         * finishes the discussion area after last comment\n         *\n         * @name   DiscussionViewer.finishDiscussion\n         * @function\n         */\n        me.finishDiscussion = function()\n        {\n            // add 'add new comment' area\n            $commentContainer.append($commentTail);\n\n            // show discussions\n            $discussion.removeClass('hidden');\n        };\n\n        /**\n         * removes the old discussion and prepares everything for creating a new\n         * one.\n         *\n         * @name   DiscussionViewer.prepareNewDiscussion\n         * @function\n         */\n        me.prepareNewDiscussion = function()\n        {\n            $commentContainer.html('');\n            $discussion.addClass('hidden');\n\n            // (re-)init templates\n            initTemplates();\n        };\n\n        /**\n         * returns the users message from the reply form\n         *\n         * @name   DiscussionViewer.getReplyMessage\n         * @function\n         * @return {String}\n         */\n        me.getReplyMessage = function()\n        {\n            return $replyMessage.val();\n        };\n\n        /**\n         * returns the users nickname (if any) from the reply form\n         *\n         * @name   DiscussionViewer.getReplyNickname\n         * @function\n         * @return {String}\n         */\n        me.getReplyNickname = function()\n        {\n            return $replyNickname.val();\n        };\n\n        /**\n         * returns the id of the parent comment the user is replying to\n         *\n         * @name   DiscussionViewer.getReplyCommentId\n         * @function\n         * @return {int|undefined}\n         */\n        me.getReplyCommentId = function()\n        {\n            return replyCommentId;\n        };\n\n        /**\n         * highlights a specific comment and scrolls to it if necessary\n         *\n         * @name   DiscussionViewer.highlightComment\n         * @function\n         * @param {string} commentId\n         * @param {bool} fadeOut - whether to fade out the comment\n         */\n        me.highlightComment = function(commentId, fadeOut)\n        {\n            const $comment = $('#comment_' + commentId);\n            // in case comment does not exist, cancel\n            if ($comment.length === 0) {\n                return;\n            }\n\n            $comment.addClass('highlight');\n            const highlightComment = function () {\n                if (fadeOut === true) {\n                    setTimeout(function () {\n                        $comment.removeClass('highlight');\n\n                    }, 300);\n                }\n            };\n\n            if (UiHelper.isVisible($comment)) {\n                return highlightComment();\n            }\n\n            UiHelper.scrollTo($comment, 100, 'swing', highlightComment);\n        };\n\n        /**\n         * initiate\n         *\n         * preloads jQuery elements\n         *\n         * @name   DiscussionViewer.init\n         * @function\n         */\n        me.init = function()\n        {\n            // bind events to templates (so they are later cloned)\n            $('#commenttailtemplate, #commenttemplate').find('button').on('click', openReply);\n            $('#replytemplate').find('button').on('click', PasteEncrypter.sendComment);\n\n            $commentContainer = $('#commentcontainer');\n            $discussion = $('#discussion');\n        };\n\n        return me;\n    })();\n\n    /**\n     * Manage top (navigation) bar\n     *\n     * @name   TopNav\n     * @param  {object} window\n     * @param  {object} document\n     * @class\n     */\n    const TopNav = (function (window, document) {\n        const me = {};\n\n        let createButtonsDisplayed = false,\n            viewButtonsDisplayed = false,\n            burnAfterReadingDefault = false,\n            openDiscussionDefault = false,\n            $attach,\n            $burnAfterReading,\n            $burnAfterReadingOption,\n            $cloneButton,\n            $customAttachment,\n            $expiration,\n            $fileRemoveButton,\n            $fileWrap,\n            $formatter,\n            $newButton,\n            $openDiscussion,\n            $openDiscussionOption,\n            $password,\n            $passwordInput,\n            $rawTextButton,\n            $downloadTextButton,\n            $qrCodeLink,\n            $emailLink,\n            $sendButton,\n            $retryButton,\n            pasteExpiration = null,\n            retryButtonCallback;\n\n        /**\n         * set the expiration on bootstrap templates in dropdown\n         *\n         * @name   TopNav.updateExpiration\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function updateExpiration(event)\n        {\n            // get selected option\n            const target = $(event.target);\n\n            // update dropdown display and save new expiration time\n            $('#pasteExpirationDisplay').text(target.text());\n            pasteExpiration = target.data('expiration');\n\n            event.preventDefault();\n        }\n\n        /**\n         * set the format on bootstrap templates in dropdown from user interaction\n         *\n         * @name   TopNav.updateFormat\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function updateFormat(event)\n        {\n            // get selected option\n            const $target = $(event.target);\n\n            // update dropdown display and save new format\n            const newFormat = $target.data('format');\n            $('#pasteFormatterDisplay').text($target.text());\n            PasteViewer.setFormat(newFormat);\n\n            // update preview\n            if (Editor.isPreview()) {\n                PasteViewer.run();\n            }\n\n            event.preventDefault();\n        }\n\n        /**\n         * when \"burn after reading\" is checked, disable discussion\n         *\n         * @name   TopNav.changeBurnAfterReading\n         * @private\n         * @function\n         */\n        function changeBurnAfterReading()\n        {\n            if ($burnAfterReading.is(':checked')) {\n                $openDiscussionOption.addClass('buttondisabled');\n                $openDiscussion.prop('checked', false);\n\n                // if button is actually disabled, force-enable it and uncheck other button\n                $burnAfterReadingOption.removeClass('buttondisabled');\n            } else {\n                $openDiscussionOption.removeClass('buttondisabled');\n            }\n        }\n\n        /**\n         * when discussion is checked, disable \"burn after reading\"\n         *\n         * @name   TopNav.changeOpenDiscussion\n         * @private\n         * @function\n         */\n        function changeOpenDiscussion()\n        {\n            if ($openDiscussion.is(':checked')) {\n                $burnAfterReadingOption.addClass('buttondisabled');\n                $burnAfterReading.prop('checked', false);\n\n                // if button is actually disabled, force-enable it and uncheck other button\n                $openDiscussionOption.removeClass('buttondisabled');\n            } else {\n                $burnAfterReadingOption.removeClass('buttondisabled');\n            }\n        }\n\n\n        /**\n         * Clear the attachment input in the top navigation.\n         *\n         * @name   TopNav.clearAttachmentInput\n         * @function\n         */\n        function clearAttachmentInput()\n        {\n            // hide UI for selected files\n            // our up-to-date jQuery can handle it :)\n            $fileWrap.find('input').val('');\n        }\n\n        /**\n         * return raw text\n         *\n         * @name   TopNav.rawText\n         * @private\n         * @function\n         */\n        function rawText()\n        {\n            TopNav.hideAllButtons();\n            Alert.showLoading('Showing raw text\u2026', 'time');\n            let paste = PasteViewer.getText();\n\n            // push a new state to allow back navigation with browser back button\n            history.pushState(\n                {type: 'raw'},\n                document.title,\n                // recreate paste URL\n                Helper.baseUri() + '?' + Model.getPasteId() + '#' +\n                CryptTool.base58encode(Model.getPasteKey())\n            );\n\n            // we use text/html instead of text/plain to avoid a bug when\n            // reloading the raw text view (it reverts to type text/html)\n            const $head  = $('head').children().not('noscript, script, link[type=\"text/css\"]'),\n                  newDoc = document.open('text/html', 'replace');\n            newDoc.write('<!DOCTYPE html><html><head>');\n            for (let i = 0; i < $head.length; ++i) {\n                newDoc.write($head[i].outerHTML);\n            }\n            newDoc.write('</head><body><pre>' + DOMPurify.sanitize(Helper.htmlEntities(paste)) + '</pre></body></html>');\n            newDoc.close();\n        }\n\n        /**\n         * download text\n         *\n         * @name   TopNav.downloadText\n         * @private\n         * @function\n         */\n        function downloadText()\n        {\n            var filename='paste-' + Model.getPasteId() + '.txt';\n            var text = PasteViewer.getText();\n\n            var element = document.createElement('a');\n            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n            element.setAttribute('download', filename);\n\n            element.style.display = 'none';\n            document.body.appendChild(element);\n\n            element.click();\n\n            document.body.removeChild(element);\n        }\n\n        /**\n         * saves the language in a cookie and reloads the page\n         *\n         * @name   TopNav.setLanguage\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function setLanguage(event)\n        {\n            document.cookie = 'lang=' + $(event.target).data('lang') + ';secure';\n            UiHelper.reloadHome();\n        }\n\n        /**\n         * hides all messages and creates a new paste\n         *\n         * @name   TopNav.clickNewPaste\n         * @private\n         * @function\n         */\n        function clickNewPaste()\n        {\n            Controller.hideStatusMessages();\n            Controller.newPaste();\n        }\n\n        /**\n         * retrys some callback registered before\n         *\n         * @name   TopNav.clickRetryButton\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function clickRetryButton(event)\n        {\n            retryButtonCallback(event);\n        }\n\n        /**\n         * removes the existing attachment\n         *\n         * @name   TopNav.removeAttachment\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function removeAttachment(event)\n        {\n            // if custom attachment is used, remove it first\n            if (!$customAttachment.hasClass('hidden')) {\n                AttachmentViewer.removeAttachment();\n                $customAttachment.addClass('hidden');\n                $fileWrap.removeClass('hidden');\n            }\n\n            // in any case, remove saved attachment data\n            AttachmentViewer.removeAttachmentData();\n\n            clearAttachmentInput();\n            AttachmentViewer.clearDragAndDrop();\n\n            // pevent '#' from appearing in the URL\n            event.preventDefault();\n        }\n\n        /**\n         * Shows the QR code of the current paste (URL).\n         *\n         * @name   TopNav.displayQrCode\n         * @private\n         * @function\n         */\n        function displayQrCode()\n        {\n            const qrCanvas = kjua({\n                render: 'canvas',\n                text: window.location.href\n            });\n            $('#qrcode-display').html(qrCanvas);\n        }\n\n        /**\n         * Template Email body.\n         *\n         * @name   TopNav.templateEmailBody\n         * @private\n         * @param {string} expirationDateString\n         * @param {bool} isBurnafterreading\n         */\n        function templateEmailBody(expirationDateString, isBurnafterreading)\n        {\n            const EOL = '\\n';\n            const BULLET = '  - ';\n            let emailBody = '';\n            if (expirationDateString !== null || isBurnafterreading) {\n                emailBody += I18n._('Notice:');\n                emailBody += EOL;\n\n                if (expirationDateString !== null) {\n                    emailBody += EOL;\n                    emailBody += BULLET;\n                    // avoid DOMPurify mess with forward slash in expirationDateString\n                    emailBody += Helper.sprintf(\n                        I18n._(\n                            'This link will expire after %s.',\n                            '%s'\n                        ),\n                        expirationDateString\n                    );\n                }\n                if (isBurnafterreading) {\n                    emailBody += EOL;\n                    emailBody += BULLET;\n                    emailBody += I18n._(\n                        'This link can only be accessed once, do not use back or refresh button in your browser.'\n                    );\n                }\n\n                emailBody += EOL;\n                emailBody += EOL;\n            }\n            emailBody += I18n._('Link:');\n            emailBody += EOL;\n            emailBody += `${window.location.href}`;\n            return emailBody;\n        }\n\n        /**\n         * Trigger Email send.\n         *\n         * @name   TopNav.triggerEmailSend\n         * @private\n         * @param {string} emailBody\n         */\n        function triggerEmailSend(emailBody)\n        {\n            window.open(\n                `mailto:?body=${encodeURIComponent(emailBody)}`,\n                '_self',\n                'noopener, noreferrer'\n            );\n        }\n\n        /**\n         * Send Email with current paste (URL).\n         *\n         * @name   TopNav.sendEmail\n         * @private\n         * @function\n         * @param  {Date|null} expirationDate date of expiration\n         * @param  {bool} isBurnafterreading whether it is burn after reading\n         */\n        function sendEmail(expirationDate, isBurnafterreading)\n        {\n            const expirationDateRoundedToSecond = new Date(expirationDate);\n\n            // round down at least 30 seconds to make up for the delay of request\n            expirationDateRoundedToSecond.setUTCSeconds(\n                expirationDateRoundedToSecond.getUTCSeconds() - 30\n            );\n            expirationDateRoundedToSecond.setUTCSeconds(0);\n\n            const $emailconfirmmodal = $('#emailconfirmmodal');\n            if ($emailconfirmmodal.length > 0) {\n                if (expirationDate !== null) {\n                    I18n._(\n                        $emailconfirmmodal.find('#emailconfirm-display'),\n                        'Recipient may become aware of your timezone, convert time to UTC?'\n                    );\n                    const $emailconfirmTimezoneCurrent = $emailconfirmmodal.find('#emailconfirm-timezone-current');\n                    const $emailconfirmTimezoneUtc = $emailconfirmmodal.find('#emailconfirm-timezone-utc');\n                    $emailconfirmTimezoneCurrent.off('click.sendEmailCurrentTimezone');\n                    $emailconfirmTimezoneCurrent.on('click.sendEmailCurrentTimezone', () => {\n                        const emailBody = templateEmailBody(expirationDateRoundedToSecond.toLocaleString(), isBurnafterreading);\n                        $emailconfirmmodal.modal('hide');\n                        triggerEmailSend(emailBody);\n                    });\n                    $emailconfirmTimezoneUtc.off('click.sendEmailUtcTimezone');\n                    $emailconfirmTimezoneUtc.on('click.sendEmailUtcTimezone', () => {\n                        const emailBody = templateEmailBody(expirationDateRoundedToSecond.toLocaleString(\n                            undefined,\n                            // we don't use Date.prototype.toUTCString() because we would like to avoid GMT\n                            { timeZone: 'UTC', dateStyle: 'long', timeStyle: 'long' }\n                        ), isBurnafterreading);\n                        $emailconfirmmodal.modal('hide');\n                        triggerEmailSend(emailBody);\n                    });\n                    $emailconfirmmodal.modal('show');\n                } else {\n                    triggerEmailSend(templateEmailBody(null, isBurnafterreading));\n                }\n            } else {\n                let emailBody = '';\n                if (expirationDate !== null) {\n                    const expirationDateString = window.confirm(\n                        I18n._('Recipient may become aware of your timezone, convert time to UTC?')\n                    ) ? expirationDateRoundedToSecond.toLocaleString(\n                        undefined,\n                        // we don't use Date.prototype.toUTCString() because we would like to avoid GMT\n                        { timeZone: 'UTC', dateStyle: 'long', timeStyle: 'long' }\n                    ) : expirationDateRoundedToSecond.toLocaleString();\n                    emailBody = templateEmailBody(expirationDateString, isBurnafterreading);\n                } else {\n                    emailBody = templateEmailBody(null, isBurnafterreading);\n                }\n                triggerEmailSend(emailBody);\n            }\n        }\n\n        /**\n         * Shows all navigation elements for viewing an existing paste\n         *\n         * @name   TopNav.showViewButtons\n         * @function\n         */\n        me.showViewButtons = function()\n        {\n            if (viewButtonsDisplayed) {\n                return;\n            }\n\n            $newButton.removeClass('hidden');\n            $cloneButton.removeClass('hidden');\n            $rawTextButton.removeClass('hidden');\n            $downloadTextButton.removeClass('hidden');\n            $qrCodeLink.removeClass('hidden');\n\n            viewButtonsDisplayed = true;\n        };\n\n        /**\n         * Hides all navigation elements for viewing an existing paste\n         *\n         * @name   TopNav.hideViewButtons\n         * @function\n         */\n        me.hideViewButtons = function()\n        {\n            if (!viewButtonsDisplayed) {\n                return;\n            }\n\n            $cloneButton.addClass('hidden');\n            $newButton.addClass('hidden');\n            $rawTextButton.addClass('hidden');\n            $downloadTextButton.addClass('hidden');\n            $qrCodeLink.addClass('hidden');\n            me.hideEmailButton();\n\n            viewButtonsDisplayed = false;\n        };\n\n        /**\n         * Hides all elements belonging to existing pastes\n         *\n         * @name   TopNav.hideAllButtons\n         * @function\n         */\n        me.hideAllButtons = function()\n        {\n            me.hideViewButtons();\n            me.hideCreateButtons();\n        };\n\n        /**\n         * shows all elements needed when creating a new paste\n         *\n         * @name   TopNav.showCreateButtons\n         * @function\n         */\n        me.showCreateButtons = function()\n        {\n            if (createButtonsDisplayed) {\n                return;\n            }\n\n            $attach.removeClass('hidden');\n            $burnAfterReadingOption.removeClass('hidden');\n            $expiration.removeClass('hidden');\n            $formatter.removeClass('hidden');\n            $newButton.removeClass('hidden');\n            $openDiscussionOption.removeClass('hidden');\n            $password.removeClass('hidden');\n            $sendButton.removeClass('hidden');\n\n            createButtonsDisplayed = true;\n        };\n\n        /**\n         * shows all elements needed when creating a new paste\n         *\n         * @name   TopNav.hideCreateButtons\n         * @function\n         */\n        me.hideCreateButtons = function()\n        {\n            if (!createButtonsDisplayed) {\n                return;\n            }\n\n            $newButton.addClass('hidden');\n            $sendButton.addClass('hidden');\n            $expiration.addClass('hidden');\n            $formatter.addClass('hidden');\n            $burnAfterReadingOption.addClass('hidden');\n            $openDiscussionOption.addClass('hidden');\n            $password.addClass('hidden');\n            $attach.addClass('hidden');\n\n            createButtonsDisplayed = false;\n        };\n\n        /**\n         * only shows the \"new paste\" button\n         *\n         * @name   TopNav.showNewPasteButton\n         * @function\n         */\n        me.showNewPasteButton = function()\n        {\n            $newButton.removeClass('hidden');\n        };\n\n        /**\n         * only shows the \"retry\" button\n         *\n         * @name   TopNav.showRetryButton\n         * @function\n         */\n        me.showRetryButton = function()\n        {\n            $retryButton.removeClass('hidden');\n        }\n\n        /**\n         * hides the \"retry\" button\n         *\n         * @name   TopNav.hideRetryButton\n         * @function\n         */\n        me.hideRetryButton = function()\n        {\n            $retryButton.addClass('hidden');\n        }\n\n        /**\n         * show the \"email\" button\n         *\n         * @name   TopNav.showEmailbutton\n         * @function\n         * @param {int|undefined} optionalRemainingTimeInSeconds\n         */\n        me.showEmailButton = function(optionalRemainingTimeInSeconds)\n        {\n            try {\n                // we cache expiration date in closure to avoid inaccurate expiration datetime\n                const expirationDate = Helper.calculateExpirationDate(\n                    new Date(),\n                    typeof optionalRemainingTimeInSeconds === 'number' ? optionalRemainingTimeInSeconds : TopNav.getExpiration()\n                );\n                const isBurnafterreading = TopNav.getBurnAfterReading();\n\n                $emailLink.removeClass('hidden');\n                $emailLink.off('click.sendEmail');\n                $emailLink.on('click.sendEmail', () => {\n                    sendEmail(expirationDate, isBurnafterreading);\n                });\n            } catch (error) {\n                console.error(error);\n                Alert.showError('Cannot calculate expiration date.');\n            }\n        }\n\n        /**\n         * hide the \"email\" button\n         *\n         * @name   TopNav.hideEmailButton\n         * @function\n         */\n        me.hideEmailButton = function()\n        {\n            $emailLink.addClass('hidden');\n            $emailLink.off('click.sendEmail');\n        }\n\n        /**\n         * only hides the clone button\n         *\n         * @name   TopNav.hideCloneButton\n         * @function\n         */\n        me.hideCloneButton = function()\n        {\n            $cloneButton.addClass('hidden');\n        };\n\n        /**\n         * only hides the raw text button\n         *\n         * @name   TopNav.hideRawButton\n         * @function\n         */\n        me.hideRawButton = function()\n        {\n            $rawTextButton.addClass('hidden');\n        };\n\n        /**\n         * only hides the download text button\n         *\n         * @name   TopNav.hideRawButton\n         * @function\n         */\n        me.hideDownloadButton = function()\n        {\n            $downloadTextButton.addClass('hidden');\n        };\n\n        /**\n         * only hides the qr code button\n         *\n         * @name   TopNav.hideQrCodeButton\n         * @function\n         */\n        me.hideQrCodeButton = function()\n        {\n            $qrCodeLink.addClass('hidden');\n        }\n\n        /**\n         * hide all irrelevant buttons when viewing burn after reading paste\n         *\n         * @name   TopNav.hideBurnAfterReadingButtons\n         * @function\n         */\n        me.hideBurnAfterReadingButtons = function()\n        {\n            me.hideCloneButton();\n            me.hideQrCodeButton();\n            me.hideEmailButton();\n        }\n\n        /**\n         * hides the file selector in attachment\n         *\n         * @name   TopNav.hideFileSelector\n         * @function\n         */\n        me.hideFileSelector = function()\n        {\n            $fileWrap.addClass('hidden');\n        };\n\n\n        /**\n         * shows the custom attachment\n         *\n         * @name   TopNav.showCustomAttachment\n         * @function\n         */\n        me.showCustomAttachment = function()\n        {\n            $customAttachment.removeClass('hidden');\n        };\n\n        /**\n         * hides the custom attachment\n         *\n         * @name  TopNav.hideCustomAttachment\n         * @function\n         */\n        me.hideCustomAttachment = function()\n        {\n            $customAttachment.addClass('hidden');\n            $fileWrap.removeClass('hidden');\n        };\n\n        /**\n         * collapses the navigation bar, only if expanded\n         *\n         * @name   TopNav.collapseBar\n         * @function\n         */\n        me.collapseBar = function()\n        {\n            if ($('#navbar').attr('aria-expanded') === 'true') {\n                $('.navbar-toggle').click();\n            }\n        };\n\n        /**\n         * Reset the top navigation back to it's default values.\n         *\n         * @name   TopNav.resetInput\n         * @function\n         */\n        me.resetInput = function()\n        {\n            clearAttachmentInput();\n            $burnAfterReading.prop('checked', burnAfterReadingDefault);\n            $openDiscussion.prop('checked', openDiscussionDefault);\n            if (openDiscussionDefault || !burnAfterReadingDefault) $openDiscussionOption.removeClass('buttondisabled');\n            if (burnAfterReadingDefault || !openDiscussionDefault) $burnAfterReadingOption.removeClass('buttondisabled');\n\n            pasteExpiration = Model.getExpirationDefault() || pasteExpiration;\n            $('#pasteExpiration>option').each(function() {\n                const $this = $(this);\n                if ($this.val() === pasteExpiration) {\n                    $('#pasteExpirationDisplay').text($this.text());\n                }\n            });\n        };\n\n        /**\n         * returns the currently set expiration time\n         *\n         * @name   TopNav.getExpiration\n         * @function\n         * @return {int}\n         */\n        me.getExpiration = function()\n        {\n            return pasteExpiration;\n        };\n\n        /**\n         * returns the currently selected file(s)\n         *\n         * @name   TopNav.getFileList\n         * @function\n         * @return {FileList|null}\n         */\n        me.getFileList = function()\n        {\n            const $file = $('#file');\n\n            // if no file given, return null\n            if (!$file.length || !$file[0].files.length) {\n                return null;\n            }\n\n            // ensure the selected file is still accessible\n            if (!($file[0].files && $file[0].files[0])) {\n                return null;\n            }\n\n            return $file[0].files;\n        };\n\n        /**\n         * returns the state of the burn after reading checkbox\n         *\n         * @name   TopNav.getBurnAfterReading\n         * @function\n         * @return {bool}\n         */\n        me.getBurnAfterReading = function()\n        {\n            return $burnAfterReading.is(':checked');\n        };\n\n        /**\n         * returns the state of the discussion checkbox\n         *\n         * @name   TopNav.getOpenDiscussion\n         * @function\n         * @return {bool}\n         */\n        me.getOpenDiscussion = function()\n        {\n            return $openDiscussion.is(':checked');\n        };\n\n        /**\n         * returns the entered password\n         *\n         * @name   TopNav.getPassword\n         * @function\n         * @return {string}\n         */\n        me.getPassword = function()\n        {\n            // when password is disabled $passwordInput.val() will return undefined\n            return $passwordInput.val() || '';\n        };\n\n        /**\n         * returns the element where custom attachments can be placed\n         *\n         * Used by AttachmentViewer when an attachment is cloned here.\n         *\n         * @name   TopNav.getCustomAttachment\n         * @function\n         * @return {jQuery}\n         */\n        me.getCustomAttachment = function()\n        {\n            return $customAttachment;\n        };\n\n        /**\n         * Set a function to call when the retry button is clicked.\n         *\n         * @name   TopNav.setRetryCallback\n         * @function\n         * @param {function} callback\n         */\n        me.setRetryCallback = function(callback)\n        {\n            retryButtonCallback = callback;\n        }\n\n        /**\n         * Highlight file upload\n         *\n         * @name  TopNav.highlightFileupload\n         * @function\n         */\n        me.highlightFileupload = function()\n        {\n            // visually indicate file uploaded\n            const $attachDropdownToggle = $attach.children('.dropdown-toggle');\n            if ($attachDropdownToggle.attr('aria-expanded') === 'false') {\n                $attachDropdownToggle.click();\n            }\n            $fileWrap.addClass('highlight');\n            setTimeout(function () {\n                $fileWrap.removeClass('highlight');\n            }, 300);\n        }\n\n        /**\n         * set the format on bootstrap templates in dropdown programmatically\n         *\n         * @name    TopNav.setFormat\n         * @function\n         */\n        me.setFormat = function(format)\n        {\n            $formatter.parent().find(`a[data-format=\"${format}\"]`).click();\n        }\n\n        /**\n         * returns if attachment dropdown is readonly, not editable\n         *\n         * @name   TopNav.isAttachmentReadonly\n         * @function\n         * @return {bool}\n         */\n        me.isAttachmentReadonly = function()\n        {\n            return !createButtonsDisplayed || $attach.hasClass('hidden');\n        }\n\n        /**\n         * init navigation manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   TopNav.init\n         * @function\n         */\n        me.init = function()\n        {\n            $attach = $('#attach');\n            $burnAfterReading = $('#burnafterreading');\n            $burnAfterReadingOption = $('#burnafterreadingoption');\n            $cloneButton = $('#clonebutton');\n            $customAttachment = $('#customattachment');\n            $expiration = $('#expiration');\n            $fileRemoveButton = $('#fileremovebutton');\n            $fileWrap = $('#filewrap');\n            $formatter = $('#formatter');\n            $newButton = $('#newbutton');\n            $openDiscussion = $('#opendiscussion');\n            $openDiscussionOption = $('#opendiscussionoption');\n            $password = $('#password');\n            $passwordInput = $('#passwordinput');\n            $rawTextButton = $('#rawtextbutton');\n            $downloadTextButton = $('#downloadtextbutton');\n            $retryButton = $('#retrybutton');\n            $sendButton = $('#sendbutton');\n            $qrCodeLink = $('#qrcodelink');\n            $emailLink = $('#emaillink');\n\n            // bootstrap template drop down\n            $('#language ul.dropdown-menu li a').click(setLanguage);\n            // page template drop down\n            $('#language select option').click(setLanguage);\n\n            // bind events\n            $burnAfterReading.change(changeBurnAfterReading);\n            $openDiscussionOption.change(changeOpenDiscussion);\n            $newButton.click(clickNewPaste);\n            $sendButton.click(PasteEncrypter.sendPaste);\n            $cloneButton.click(Controller.clonePaste);\n            $rawTextButton.click(rawText);\n            $downloadTextButton.click(downloadText);\n            $retryButton.click(clickRetryButton);\n            $fileRemoveButton.click(removeAttachment);\n            $qrCodeLink.click(displayQrCode);\n\n            // bootstrap template drop downs\n            $('ul.dropdown-menu li a', $('#expiration').parent()).click(updateExpiration);\n            $('ul.dropdown-menu li a', $('#formatter').parent()).click(updateFormat);\n\n            // initiate default state of checkboxes\n            changeBurnAfterReading();\n            changeOpenDiscussion();\n\n            // get default values from template or fall back to set value\n            burnAfterReadingDefault = me.getBurnAfterReading();\n            openDiscussionDefault = me.getOpenDiscussion();\n            pasteExpiration = Model.getExpirationDefault() || pasteExpiration;\n\n            createButtonsDisplayed = false;\n            viewButtonsDisplayed = false;\n        };\n\n        return me;\n    })(window, document);\n\n    /**\n     * Responsible for AJAX requests, transparently handles encryption\u2026\n     *\n     * @name   ServerInteraction\n     * @class\n     */\n    const ServerInteraction = (function () {\n        const me = {};\n\n        let successFunc = null,\n            failureFunc = null,\n            symmetricKey = null,\n            url,\n            data,\n            password;\n\n        /**\n         * public variable ('constant') for errors to prevent magic numbers\n         *\n         * @name   ServerInteraction.error\n         * @readonly\n         * @enum   {Object}\n         */\n        me.error = {\n            okay: 0,\n            custom: 1,\n            unknown: 2,\n            serverError: 3\n        };\n\n        /**\n         * ajaxHeaders to send in AJAX requests\n         *\n         * @name   ServerInteraction.ajaxHeaders\n         * @private\n         * @readonly\n         * @enum   {Object}\n         */\n        const ajaxHeaders = {'X-Requested-With': 'JSONHttpRequest'};\n\n        /**\n         * called after successful upload\n         *\n         * @name   ServerInteraction.success\n         * @private\n         * @function\n         * @param {int} status\n         * @param {int} result - optional\n         */\n        function success(status, result)\n        {\n            if (successFunc !== null) {\n                // add useful data to result\n                result.encryptionKey = symmetricKey;\n                successFunc(status, result);\n            }\n        }\n\n        /**\n         * called after a upload failure\n         *\n         * @name   ServerInteraction.fail\n         * @private\n         * @function\n         * @param {int} status - internal code\n         * @param {int} result - original error code\n         */\n        function fail(status, result)\n        {\n            if (failureFunc !== null) {\n                failureFunc(status, result);\n            }\n        }\n\n        /**\n         * actually uploads the data\n         *\n         * @name   ServerInteraction.run\n         * @function\n         */\n        me.run = function()\n        {\n            let isPost = Object.keys(data).length > 0,\n                ajaxParams = {\n                    type: isPost ? 'POST' : 'GET',\n                    url: url,\n                    headers: ajaxHeaders,\n                    dataType: 'json',\n                    success: function(result) {\n                        if (result.status === 0) {\n                            success(0, result);\n                        } else if (result.status === 1) {\n                            fail(1, result);\n                        } else {\n                            fail(2, result);\n                        }\n                    }\n                };\n            if (isPost) {\n                ajaxParams.data = JSON.stringify(data);\n            }\n            $.ajax(ajaxParams).fail(function(jqXHR, textStatus, errorThrown) {\n                console.error(textStatus, errorThrown);\n                fail(3, jqXHR);\n            });\n        };\n\n        /**\n         * return currently set data, used in unit testing\n         *\n         * @name   ServerInteraction.getData\n         * @function\n         */\n        me.getData = function()\n        {\n            return data;\n        };\n\n        /**\n         * set success function\n         *\n         * @name   ServerInteraction.setUrl\n         * @function\n         * @param {function} newUrl\n         */\n        me.setUrl = function(newUrl)\n        {\n            url = newUrl;\n        };\n\n        /**\n         * sets the password to use (first value) and optionally also the\n         * encryption key (not recommended, it is automatically generated).\n         *\n         * Note: Call this after prepare() as prepare() resets these values.\n         *\n         * @name   ServerInteraction.setCryptValues\n         * @function\n         * @param {string} newPassword\n         * @param {string} newKey       - optional\n         */\n        me.setCryptParameters = function(newPassword, newKey)\n        {\n            password = newPassword;\n\n            if (typeof newKey !== 'undefined') {\n                symmetricKey = newKey;\n            }\n        };\n\n        /**\n         * set success function\n         *\n         * @name   ServerInteraction.setSuccess\n         * @function\n         * @param {function} func\n         */\n        me.setSuccess = function(func)\n        {\n            successFunc = func;\n        };\n\n        /**\n         * set failure function\n         *\n         * @name   ServerInteraction.setFailure\n         * @function\n         * @param {function} func\n         */\n        me.setFailure = function(func)\n        {\n            failureFunc = func;\n        };\n\n        /**\n         * prepares a new upload\n         *\n         * Call this when doing a new upload to reset any data from potential\n         * previous uploads. Must be called before any other method of this\n         * module.\n         *\n         * @name   ServerInteraction.prepare\n         * @function\n         * @return {object}\n         */\n        me.prepare = function()\n        {\n            // entropy should already be checked!\n\n            // reset password\n            password = '';\n\n            // reset key, so it a new one is generated when it is used\n            symmetricKey = null;\n\n            // reset data\n            successFunc = null;\n            failureFunc = null;\n            url = Helper.baseUri();\n            data = {};\n        };\n\n        /**\n         * encrypts and sets the data\n         *\n         * @name   ServerInteraction.setCipherMessage\n         * @async\n         * @function\n         * @param {object} cipherMessage\n         */\n        me.setCipherMessage = async function(cipherMessage)\n        {\n            if (\n                symmetricKey === null ||\n                (typeof symmetricKey === 'string' && symmetricKey === '')\n            ) {\n                symmetricKey = CryptTool.getSymmetricKey();\n            }\n            if (!data.hasOwnProperty('adata')) {\n                data['adata'] = [];\n            }\n            let cipherResult = await CryptTool.cipher(symmetricKey, password, JSON.stringify(cipherMessage), data['adata']);\n            data['v'] = 2;\n            data['ct'] = cipherResult[0];\n            data['adata'] = cipherResult[1];\n\n        };\n\n        /**\n         * set the additional metadata to send unencrypted\n         *\n         * @name   ServerInteraction.setUnencryptedData\n         * @function\n         * @param {string} index\n         * @param {mixed} element\n         */\n        me.setUnencryptedData = function(index, element)\n        {\n            data[index] = element;\n        };\n\n        /**\n         * Helper, which parses shows a general error message based on the result of the ServerInteraction\n         *\n         * @name    ServerInteraction.parseUploadError\n         * @function\n         * @param {int} status\n         * @param {object} data\n         * @param {string} doThisThing - a human description of the action, which was tried\n         * @return {array}\n         */\n        me.parseUploadError = function(status, data, doThisThing) {\n            let errorArray;\n\n            switch (status) {\n                case me.error.custom:\n                    errorArray = ['Could not ' + doThisThing + ': %s', data.message];\n                    break;\n                case me.error.unknown:\n                    errorArray = ['Could not ' + doThisThing + ': %s', I18n._('unknown status')];\n                    break;\n                case me.error.serverError:\n                    errorArray = ['Could not ' + doThisThing + ': %s', I18n._('server error or not responding')];\n                    break;\n                default:\n                    errorArray = ['Could not ' + doThisThing + ': %s', I18n._('unknown error')];\n                    break;\n            }\n\n            return errorArray;\n        };\n\n        return me;\n    })();\n\n    /**\n     * (controller) Responsible for encrypting paste and sending it to server.\n     *\n     * Does upload, encryption is done transparently by ServerInteraction.\n     *\n     * @name PasteEncrypter\n     * @class\n     */\n    const PasteEncrypter = (function () {\n        const me = {};\n\n        /**\n         * called after successful paste upload\n         *\n         * @name PasteEncrypter.showCreatedPaste\n         * @private\n         * @function\n         * @param {int} status\n         * @param {object} data\n         */\n        function showCreatedPaste(status, data) {\n            Alert.hideLoading();\n            Alert.hideMessages();\n\n            // show notification\n            const baseUri   = Helper.baseUri() + '?',\n                  url       = baseUri + data.id + '#' + CryptTool.base58encode(data.encryptionKey),\n                  deleteUrl = baseUri + 'pasteid=' + data.id + '&deletetoken=' + data.deletetoken;\n            PasteStatus.createPasteNotification(url, deleteUrl);\n\n            // show new URL in browser bar\n            history.pushState({type: 'newpaste'}, document.title, url);\n\n            TopNav.showViewButtons();\n\n            // this cannot be grouped with showViewButtons due to remaining time calculation\n            TopNav.showEmailButton();\n\n            TopNav.hideRawButton();\n            TopNav.hideDownloadButton();\n            Editor.hide();\n\n            // parse and show text\n            // (preparation already done in me.sendPaste())\n            PasteViewer.run();\n        }\n\n        /**\n         * called after successful comment upload\n         *\n         * @name PasteEncrypter.showUploadedComment\n         * @private\n         * @function\n         * @param {int} status\n         * @param {object} data\n         */\n        function showUploadedComment(status, data) {\n            // show success message\n            Alert.showStatus('Comment posted.');\n\n            // reload paste\n            Controller.refreshPaste(function () {\n                // highlight sent comment\n                DiscussionViewer.highlightComment(data.id, true);\n                // reset error handler\n                Alert.setCustomHandler(null);\n            });\n        }\n\n        /**\n         * send a reply in a discussion\n         *\n         * @name   PasteEncrypter.sendComment\n         * @async\n         * @function\n         */\n        me.sendComment = async function()\n        {\n            Alert.hideMessages();\n            Alert.setCustomHandler(DiscussionViewer.handleNotification);\n\n            // UI loading state\n            TopNav.hideAllButtons();\n            Alert.showLoading('Sending comment\u2026', 'cloud-upload');\n\n            // get data\n            const plainText = DiscussionViewer.getReplyMessage(),\n                  nickname  = DiscussionViewer.getReplyNickname(),\n                  parentid  = DiscussionViewer.getReplyCommentId();\n\n            // do not send if there is no data\n            if (plainText.length === 0) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                Alert.setCustomHandler(null);\n                TopNav.showViewButtons();\n                return;\n            }\n\n            // prepare server interaction\n            ServerInteraction.prepare();\n            ServerInteraction.setCryptParameters(Prompt.getPassword(), Model.getPasteKey());\n\n            // set success/fail functions\n            ServerInteraction.setSuccess(showUploadedComment);\n            ServerInteraction.setFailure(function (status, data) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showViewButtons();\n\n                // \u2026show error message\u2026\n                Alert.showError(\n                    ServerInteraction.parseUploadError(status, data, 'post comment')\n                );\n\n                // \u2026and reset error handler\n                Alert.setCustomHandler(null);\n            });\n\n            // fill it with unencrypted params\n            ServerInteraction.setUnencryptedData('pasteid', Model.getPasteId());\n            if (typeof parentid === 'undefined') {\n                // if parent id is not set, this is the top-most comment, so use\n                // paste id as parent, as the root element of the discussion tree\n                ServerInteraction.setUnencryptedData('parentid', Model.getPasteId());\n            } else {\n                ServerInteraction.setUnencryptedData('parentid', parentid);\n            }\n\n            // prepare cypher message\n            let cipherMessage = {\n                'comment': plainText\n            };\n            if (nickname.length > 0) {\n                cipherMessage['nickname'] = nickname;\n            }\n\n            await ServerInteraction.setCipherMessage(cipherMessage).catch(Alert.showError);\n            ServerInteraction.run();\n        };\n\n        /**\n         * sends a new paste to server\n         *\n         * @name   PasteEncrypter.sendPaste\n         * @async\n         * @function\n         */\n        me.sendPaste = async function()\n        {\n            // hide previous (error) messages\n            Controller.hideStatusMessages();\n\n            // UI loading state\n            TopNav.hideAllButtons();\n            Alert.showLoading('Sending paste\u2026', 'cloud-upload');\n            TopNav.collapseBar();\n\n            // get data\n            const plainText = Editor.getText(),\n                  format    = PasteViewer.getFormat(),\n                  // the methods may return different values if no files are attached (null, undefined or false)\n                  files     = TopNav.getFileList() || AttachmentViewer.getFile() || AttachmentViewer.hasAttachment();\n\n            // do not send if there is no data\n            if (plainText.length === 0 && !files) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showCreateButtons();\n                return;\n            }\n\n            // prepare server interaction\n            ServerInteraction.prepare();\n            ServerInteraction.setCryptParameters(TopNav.getPassword());\n\n            // set success/fail functions\n            ServerInteraction.setSuccess(showCreatedPaste);\n            ServerInteraction.setFailure(function (status, data) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showCreateButtons();\n\n                // show error message\n                Alert.showError(\n                    ServerInteraction.parseUploadError(status, data, 'create paste')\n                );\n            });\n\n            // fill it with unencrypted submitted options\n            ServerInteraction.setUnencryptedData('adata', [\n                null, format,\n                TopNav.getOpenDiscussion() ? 1 : 0,\n                TopNav.getBurnAfterReading() ? 1 : 0\n            ]);\n            ServerInteraction.setUnencryptedData('meta', {'expire': TopNav.getExpiration()});\n\n            // prepare PasteViewer for later preview\n            PasteViewer.setText(plainText);\n            PasteViewer.setFormat(format);\n\n            // prepare cypher message\n            let file = AttachmentViewer.getAttachmentData(),\n                cipherMessage = {\n                    'paste': plainText\n                };\n            if (typeof file !== 'undefined' && file !== null) {\n                cipherMessage['attachment'] = file;\n                cipherMessage['attachment_name'] = AttachmentViewer.getFile().name;\n            } else if (AttachmentViewer.hasAttachment()) {\n                // fall back to cloned part\n                let attachment = AttachmentViewer.getAttachment();\n                cipherMessage['attachment'] = attachment[0];\n                cipherMessage['attachment_name'] = attachment[1];\n\n                // we need to retrieve data from blob if browser already parsed it in memory\n                if (typeof attachment[0] === 'string' && attachment[0].startsWith('blob:')) {\n                    Alert.showStatus(\n                        [\n                            'Retrieving cloned file \\'%s\\' from memory...',\n                            attachment[1]\n                        ],\n                        'copy'\n                    );\n                    try {\n                        const blobData = await $.ajax({\n                            type: 'GET',\n                            url: `${attachment[0]}`,\n                            processData: false,\n                            timeout: 10000,\n                            xhrFields: {\n                                withCredentials: false,\n                                responseType: 'blob'\n                            }\n                        });\n                        if (blobData instanceof window.Blob) {\n                            const fileReading = new Promise(function(resolve, reject) {\n                                const fileReader = new FileReader();\n                                fileReader.onload = function (event) {\n                                    resolve(event.target.result);\n                                };\n                                fileReader.onerror = function (error) {\n                                    reject(error);\n                                }\n                                fileReader.readAsDataURL(blobData);\n                            });\n                            cipherMessage['attachment'] = await fileReading;\n                        } else {\n                            const error = 'Cannot process attachment data.';\n                            Alert.showError(error);\n                            throw new TypeError(error);\n                        }\n                    } catch (error) {\n                        console.error(error);\n                        Alert.showError('Cannot retrieve attachment.');\n                        throw error;\n                    }\n                }\n            }\n\n            // encrypt message\n            await ServerInteraction.setCipherMessage(cipherMessage).catch(Alert.showError);\n\n            // send data\n            ServerInteraction.run();\n        };\n\n        return me;\n    })();\n\n    /**\n     * (controller) Responsible for decrypting cipherdata and passing data to view.\n     *\n     * Only decryption, no download.\n     *\n     * @name PasteDecrypter\n     * @class\n     */\n    const PasteDecrypter = (function () {\n        const me = {};\n\n        /**\n         * decrypt data or prompts for password in case of failure\n         *\n         * @name   PasteDecrypter.decryptOrPromptPassword\n         * @private\n         * @async\n         * @function\n         * @param  {string} key\n         * @param  {string} password - optional, may be an empty string\n         * @param  {string} cipherdata\n         * @throws {string}\n         * @return {false|string} false, when unsuccessful or string (decrypted data)\n         */\n        async function decryptOrPromptPassword(key, password, cipherdata)\n        {\n            // try decryption without password\n            const plaindata = await CryptTool.decipher(key, password, cipherdata);\n\n            // if it fails, request password\n            if (plaindata.length === 0 && password.length === 0) {\n                // show prompt\n                Prompt.requestPassword();\n\n                // Thus, we cannot do anything yet, we need to wait for the user\n                // input.\n                return false;\n            }\n\n            // if all tries failed, we can only return an error\n            if (plaindata.length === 0) {\n                return false;\n            }\n\n            return plaindata;\n        }\n\n        /**\n         * decrypt the actual paste text\n         *\n         * @name   PasteDecrypter.decryptPaste\n         * @private\n         * @async\n         * @function\n         * @param  {Paste} paste - paste data in object form\n         * @param  {string} key\n         * @param  {string} password\n         * @throws {string}\n         * @return {Promise}\n         */\n        async function decryptPaste(paste, key, password)\n        {\n            let pastePlain = await decryptOrPromptPassword(\n                key, password,\n                paste.getCipherData()\n            );\n            if (pastePlain === false) {\n                if (password.length === 0) {\n                    throw 'waiting on user to provide a password';\n                } else {\n                    Alert.hideLoading();\n                    // reset password, so it can be re-entered\n                    Prompt.reset();\n                    TopNav.showRetryButton();\n                    throw 'Could not decrypt data. Did you enter a wrong password? Retry with the button at the top.';\n                }\n            }\n\n            if (paste.v > 1) {\n                // version 2 paste\n                const pasteMessage = JSON.parse(pastePlain);\n                if (pasteMessage.hasOwnProperty('attachment') && pasteMessage.hasOwnProperty('attachment_name')) {\n                    AttachmentViewer.setAttachment(pasteMessage.attachment, pasteMessage.attachment_name);\n                    AttachmentViewer.showAttachment();\n                }\n                pastePlain = pasteMessage.paste;\n            } else {\n                // version 1 paste\n                if (paste.hasOwnProperty('attachment') && paste.hasOwnProperty('attachmentname')) {\n                    Promise.all([\n                        CryptTool.decipher(key, password, paste.attachment),\n                        CryptTool.decipher(key, password, paste.attachmentname)\n                    ]).then((attachment) => {\n                        AttachmentViewer.setAttachment(attachment[0], attachment[1]);\n                        AttachmentViewer.showAttachment();\n                    });\n                }\n            }\n            PasteViewer.setFormat(paste.getFormat());\n            PasteViewer.setText(pastePlain);\n            PasteViewer.run();\n        }\n\n        /**\n         * decrypts all comments and shows them\n         *\n         * @name   PasteDecrypter.decryptComments\n         * @private\n         * @async\n         * @function\n         * @param  {Paste} paste - paste data in object form\n         * @param  {string} key\n         * @param  {string} password\n         * @return {Promise}\n         */\n        async function decryptComments(paste, key, password)\n        {\n            // remove potential previous discussion\n            DiscussionViewer.prepareNewDiscussion();\n\n            const commentDecryptionPromises = [];\n            // iterate over comments\n            for (let i = 0; i < paste.comments.length; ++i) {\n                const comment        = new Comment(paste.comments[i]),\n                      commentPromise = CryptTool.decipher(key, password, comment.getCipherData());\n                paste.comments[i] = comment;\n                if (comment.v > 1) {\n                    // version 2 comment\n                    commentDecryptionPromises.push(\n                        commentPromise.then(function (commentJson) {\n                            const commentMessage = JSON.parse(commentJson);\n                            return [\n                                commentMessage.comment  || '',\n                                commentMessage.nickname || ''\n                            ];\n                        })\n                    );\n                } else {\n                    // version 1 comment\n                    commentDecryptionPromises.push(\n                        Promise.all([\n                            commentPromise,\n                            paste.comments[i].meta.hasOwnProperty('nickname') ?\n                                CryptTool.decipher(key, password, paste.comments[i].meta.nickname) :\n                                Promise.resolve('')\n                        ])\n                    );\n                }\n            }\n            return Promise.all(commentDecryptionPromises).then(function (plaintexts) {\n                for (let i = 0; i < paste.comments.length; ++i) {\n                    if (plaintexts[i][0].length === 0) {\n                        continue;\n                    }\n                    DiscussionViewer.addComment(\n                        paste.comments[i],\n                        plaintexts[i][0],\n                        plaintexts[i][1]\n                    );\n                }\n            });\n        }\n\n        /**\n         * show decrypted text in the display area, including discussion (if open)\n         *\n         * @name   PasteDecrypter.run\n         * @function\n         * @param  {Paste} [paste] - (optional) object including comments to display (items = array with keys ('data','meta'))\n         */\n        me.run = function(paste)\n        {\n            Alert.hideMessages();\n            Alert.showLoading('Decrypting paste\u2026', 'cloud-download');\n\n            if (typeof paste === 'undefined') {\n                // get cipher data and wait until it is available\n                Model.getPasteData(me.run);\n                return;\n            }\n\n            let key = Model.getPasteKey(),\n                password = Prompt.getPassword(),\n                decryptionPromises = [];\n\n            TopNav.setRetryCallback(function () {\n                TopNav.hideRetryButton();\n                me.run(paste);\n            });\n\n            // decrypt paste & attachments\n            decryptionPromises.push(decryptPaste(paste, key, password));\n\n            // if the discussion is opened on this paste, display it\n            if (paste.isDiscussionEnabled()) {\n                decryptionPromises.push(decryptComments(paste, key, password));\n            }\n\n            // shows the remaining time (until) deletion\n            PasteStatus.showRemainingTime(paste);\n\n            Promise.all(decryptionPromises)\n                .then(() => {\n                    Alert.hideLoading();\n                    TopNav.showViewButtons();\n\n                    // discourage cloning (it cannot really be prevented)\n                    if (paste.isBurnAfterReadingEnabled()) {\n                        TopNav.hideBurnAfterReadingButtons();\n                    } else {\n                        // we have to pass in remaining_time here\n                        TopNav.showEmailButton(paste.getTimeToLive());\n                    }\n\n                    // only offer adding comments, after paste was successfully decrypted\n                    if (paste.isDiscussionEnabled()) {\n                        DiscussionViewer.finishDiscussion();\n                    }\n\n                })\n                .catch((err) => {\n                    // wait for the user to type in the password,\n                    // then PasteDecrypter.run will be called again\n                    Alert.showError(err);\n                });\n        };\n\n        return me;\n    })();\n\n    /**\n     * (controller) main PrivateBin logic\n     *\n     * @name   Controller\n     * @param  {object} window\n     * @param  {object} document\n     * @class\n     */\n    const Controller = (function (window, document) {\n        const me = {};\n\n        /**\n         * hides all status messages no matter which module showed them\n         *\n         * @name   Controller.hideStatusMessages\n         * @function\n         */\n        me.hideStatusMessages = function()\n        {\n            PasteStatus.hideMessages();\n            Alert.hideMessages();\n        };\n\n        /**\n         * creates a new paste\n         *\n         * @name   Controller.newPaste\n         * @function\n         */\n        me.newPaste = function()\n        {\n            // Important: This *must not* run Alert.hideMessages() as previous\n            // errors from viewing a paste should be shown.\n            TopNav.hideAllButtons();\n            Alert.showLoading('Preparing new paste\u2026', 'time');\n\n            PasteStatus.hideMessages();\n            PasteViewer.hide();\n            Editor.resetInput();\n            Editor.show();\n            Editor.focusInput();\n            AttachmentViewer.removeAttachment();\n            TopNav.resetInput();\n\n            TopNav.showCreateButtons();\n\n            // newPaste could be called when user is on paste clone editing view\n            TopNav.hideCustomAttachment();\n            AttachmentViewer.clearDragAndDrop();\n            AttachmentViewer.removeAttachmentData();\n\n            Alert.hideLoading();\n            history.pushState({type: 'create'}, document.title, Helper.baseUri());\n\n            // clear discussion\n            DiscussionViewer.prepareNewDiscussion();\n        };\n\n        /**\n         * shows the loaded paste\n         *\n         * @name   Controller.showPaste\n         * @function\n         */\n        me.showPaste = function()\n        {\n            try {\n                Model.getPasteKey();\n            } catch (err) {\n                console.error(err);\n\n                // missing decryption key (or paste ID) in URL?\n                if (window.location.hash.length === 0) {\n                    Alert.showError('Cannot decrypt paste: Decryption key missing in URL (Did you use a redirector or an URL shortener which strips part of the URL?)');\n                    return;\n                }\n            }\n\n            // show proper elements on screen\n            PasteDecrypter.run();\n        };\n\n        /**\n         * refreshes the loaded paste to show potential new data\n         *\n         * @name   Controller.refreshPaste\n         * @function\n         * @param  {function} callback\n         */\n        me.refreshPaste = function(callback)\n        {\n            // save window position to restore it later\n            const orgPosition = $(window).scrollTop();\n\n            Model.getPasteData(function (data) {\n                ServerInteraction.prepare();\n                ServerInteraction.setUrl(Helper.baseUri() + '?pasteid=' + Model.getPasteId());\n\n                ServerInteraction.setFailure(function (status, data) {\n                    // revert loading status\u2026\n                    Alert.hideLoading();\n                    TopNav.showViewButtons();\n\n                    // show error message\n                    Alert.showError(\n                        ServerInteraction.parseUploadError(status, data, 'refresh display')\n                    );\n                });\n                ServerInteraction.setSuccess(function (status, data) {\n                    PasteDecrypter.run(new Paste(data));\n\n                    // restore position\n                    window.scrollTo(0, orgPosition);\n\n                    // NOTE: could create problems as callback may be called\n                    // asyncronously if PasteDecrypter e.g. needs to wait for a\n                    // password being entered\n                    callback();\n                });\n                ServerInteraction.run();\n            }, false); // this false is important as it circumvents the cache\n        }\n\n        /**\n         * clone the current paste\n         *\n         * @name   Controller.clonePaste\n         * @function\n         */\n        me.clonePaste = function()\n        {\n            TopNav.collapseBar();\n            TopNav.hideAllButtons();\n\n            // hide messages from previous paste\n            me.hideStatusMessages();\n\n            // erase the id and the key in url\n            history.pushState({type: 'clone'}, document.title, Helper.baseUri());\n\n            if (AttachmentViewer.hasAttachment()) {\n                AttachmentViewer.moveAttachmentTo(\n                    TopNav.getCustomAttachment(),\n                    'Cloned: \\'%s\\''\n                );\n                TopNav.hideFileSelector();\n                AttachmentViewer.hideAttachment();\n                // NOTE: it also looks nice without removing the attachment\n                // but for a consistent display we remove it\u2026\n                AttachmentViewer.hideAttachmentPreview();\n                TopNav.showCustomAttachment();\n\n                // show another status message to make the user aware that the\n                // file was cloned too!\n                Alert.showStatus(\n                    [\n                        'The cloned file \\'%s\\' was attached to this paste.',\n                        AttachmentViewer.getAttachment()[1]\n                    ],\n                    'copy'\n                );\n            }\n\n            Editor.setText(PasteViewer.getText());\n            // also clone the format\n            TopNav.setFormat(PasteViewer.getFormat());\n            PasteViewer.hide();\n            Editor.show();\n\n            TopNav.showCreateButtons();\n\n            // clear discussion\n            DiscussionViewer.prepareNewDiscussion();\n        };\n\n        /**\n         * try initializing zlib or display a warning if it fails,\n         * extracted from main init to allow unit testing\n         *\n         * @name   Controller.initZ\n         * @function\n         */\n        me.initZ = function()\n        {\n            z = zlib.catch(function () {\n                if ($('body').data('compression') !== 'none') {\n                    Alert.showWarning('Your browser doesn\\'t support WebAssembly, used for zlib compression. You can create uncompressed documents, but can\\'t read compressed ones.');\n                }\n            });\n        }\n\n        /**\n         * application start\n         *\n         * @name   Controller.init\n         * @function\n         */\n        me.init = function()\n        {\n            // first load translations\n            I18n.loadTranslations();\n\n            DOMPurify.setConfig({\n                ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|magnet):)/i,\n                SAFE_FOR_JQUERY: true\n            });\n\n            // Add a hook to make all links open a new window\n            DOMPurify.addHook('afterSanitizeAttributes', function(node) {\n                // set all elements owning target to target=_blank\n                if ('target' in node && node.id !== 'pasteurl') {\n                    node.setAttribute('target', '_blank');\n                }\n                // set non-HTML/MathML links to xlink:show=new\n                if (!node.hasAttribute('target')\n                    && (node.hasAttribute('xlink:href')\n                        || node.hasAttribute('href'))) {\n                    node.setAttribute('xlink:show', 'new');\n                }\n                if ('rel' in node) {\n                    node.setAttribute('rel', 'nofollow noopener noreferrer');\n                }\n            });\n\n            // center all modals\n            $('.modal').on('show.bs.modal', function(e) {\n                $(e.target).css({\n                    display: 'flex'\n                });\n            });\n\n            // initialize other modules/\"classes\"\n            Alert.init();\n            Model.init();\n            AttachmentViewer.init();\n            DiscussionViewer.init();\n            Editor.init();\n            PasteStatus.init();\n            PasteViewer.init();\n            Prompt.init();\n            TopNav.init();\n            UiHelper.init();\n\n            // check for legacy browsers before going any further\n            if (!Legacy.Check.getInit()) {\n                // Legacy check didn't complete, wait and try again\n                setTimeout(init, 500);\n                return;\n            }\n            if (!Legacy.Check.getStatus()) {\n                // something major is wrong, stop right away\n                return;\n            }\n            me.initZ();\n\n            // if delete token is passed (i.e. paste has been deleted by this\n            // access), there is nothing more to do\n            if (Model.hasDeleteToken()) {\n                return;\n            }\n\n            // check whether existing paste needs to be shown\n            try {\n                Model.getPasteId();\n            } catch (e) {\n                // otherwise create a new paste\n                return me.newPaste();\n            }\n\n            // always reload on back button to invalidate cache(protect burn after read paste)\n            window.addEventListener('popstate', () => {\n                window.location.reload();\n            });\n\n            // display an existing paste\n            return me.showPaste();\n        }\n\n        return me;\n    })(window, document);\n\n    return {\n        Helper: Helper,\n        I18n: I18n,\n        CryptTool: CryptTool,\n        Model: Model,\n        UiHelper: UiHelper,\n        Alert: Alert,\n        PasteStatus: PasteStatus,\n        Prompt: Prompt,\n        Editor: Editor,\n        PasteViewer: PasteViewer,\n        AttachmentViewer: AttachmentViewer,\n        DiscussionViewer: DiscussionViewer,\n        TopNav: TopNav,\n        ServerInteraction: ServerInteraction,\n        PasteEncrypter: PasteEncrypter,\n        PasteDecrypter: PasteDecrypter,\n        Controller: Controller\n    };\n})(jQuery, RawDeflate);\n", "<?php\nuse PrivateBin\\I18n;\n$isCpct = substr($template, 9, 8) === '-compact';\n$isDark = substr($template, 9, 5) === '-dark';\n$isPage = substr($template, -5) === '-page';\n?><!DOCTYPE html>\n<html lang=\"<?php echo I18n::_('en'); ?>\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"<?php echo I18n::encode($CSPHEADER); ?>\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta name=\"robots\" content=\"noindex\" />\n\t\t<meta name=\"google\" content=\"notranslate\">\n\t\t<title><?php echo I18n::_($NAME); ?></title>\n<?php\nif (!$isDark) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/bootstrap-3.4.1.css\" />\n<?php\nendif;\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/bootstrap-theme-3.4.1.css\" />\n<?php\nif ($isDark) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/darkstrap-0.9.3.css\" />\n<?php\nendif;\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/privatebin.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\nif ($SYNTAXHIGHLIGHTING) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/prettify.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    if (strlen($SYNTAXHIGHLIGHTINGTHEME)) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/<?php echo rawurlencode($SYNTAXHIGHLIGHTINGTHEME); ?>.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    endif;\nendif;\n?>\n\t\t<noscript><link type=\"text/css\" rel=\"stylesheet\" href=\"css/noscript.css\" /></noscript>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/jquery-3.6.0.js\" integrity=\"sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($QRCODE) :\n?>\n\t\t<script async type=\"text/javascript\" data-cfasync=\"false\" src=\"js/kjua-0.9.0.js\" integrity=\"sha512-CVn7af+vTMBd9RjoS4QM5fpLFEOtBCoB0zPtaqIDC7sF4F8qgUSRFQQpIyEDGsr6yrjbuOLzdf20tkHHmpaqwQ==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($ZEROBINCOMPATIBILITY) :\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base64-1.7.js\" integrity=\"sha512-JdwsSP3GyHR+jaCkns9CL9NTt4JUJqm/BsODGmYhBcj5EAPKcHYh+OiMfyHbcDLECe17TL0hjXADFkusAqiYgA==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/zlib-1.2.11.js\" integrity=\"sha512-Yey/0yoaVmSbqMEyyff3DIu8kCPwpHvHf7tY1AuZ1lrX9NPCMg87PwzngMi+VNbe4ilCApmePeuKT869RTcyCQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base-x-4.0.0.js\" integrity=\"sha512-nNPg5IGCwwrveZ8cA/yMGr5HiRS5Ps2H+s0J/mKTPjCPWUgFGGw7M5nqdnPD3VsRwCVysUh3Y8OWjeSKGkEQJQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/rawinflate-0.3.js\" integrity=\"sha512-g8uelGgJW9A/Z1tB6Izxab++oj5kdD7B4qC7DHwZkB6DGMXKyzx7v5mvap2HXueI2IIn08YlRYM56jwWdm2ucQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/bootstrap-3.4.1.js\" integrity=\"sha512-oBTprMeNEKCnqfuqKd6sbvFzmFQtlXS3e0C/RGFV0hD6QzhHV+ODfaQbAlmY6/q0ubbwlAM/nCJjkrgA3waLzg==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($SYNTAXHIGHLIGHTING) :\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/prettify.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-puO0Ogy++IoA2Pb9IjSxV1n4+kQkKXYAEUtVzfZpQepyDPyXk8hokiYDS7ybMogYlyyEIwMLpZqVhCkARQWLMg==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($MARKDOWN) :\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/showdown-2.0.0.js\" integrity=\"sha512-UB9jpMTOJLSnVzePuqlSGT34G70wEGqtIWabMeAh+Drnj4/uQ8rFkFn1zkN9vkWp/7nA51U2LmP23H5MJvBXsw==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/purify-2.3.6.js\" integrity=\"sha512-N1GGPjbqLbwK821ZN7C925WuTwU4aDxz2CEEOXQ6/s6m6MBwVj8fh5fugiE2hzsm0xud3q7jpjZQ4ILnpMREYQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/legacy.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-LYos+qXHIRqFf5ZPNphvtTB0cgzHUizu2wwcOwcwz/VIpRv9lpcBgPYz4uq6jx0INwCAj6Fbnl5HoKiLufS2jg==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/privatebin.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-EdUms2nI12Cmtv014stIEBlyPjeKMHlkg7NiBJup1b7jJF5amKhev2RwTaldINXK4UaWbZtQ6hGuMPNvvNQZFA==\" crossorigin=\"anonymous\"></script>\n\t\t<!-- icon -->\n\t\t<link rel=\"apple-touch-icon\" href=\"<?php echo I18n::encode($BASEPATH); ?>img/apple-touch-icon.png\" sizes=\"180x180\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-32x32.png\" sizes=\"32x32\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-16x16.png\" sizes=\"16x16\" />\n\t\t<link rel=\"manifest\" href=\"manifest.json?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<link rel=\"mask-icon\" href=\"img/safari-pinned-tab.svg\" color=\"#ffcc00\" />\n\t\t<link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n\t\t<meta name=\"msapplication-config\" content=\"browserconfig.xml\">\n\t\t<meta name=\"theme-color\" content=\"#ffe57e\" />\n\t\t<!-- Twitter/social media cards -->\n\t\t<meta name=\"twitter:card\" content=\"summary\" />\n\t\t<meta name=\"twitter:title\" content=\"<?php echo I18n::_('Encrypted note on PrivateBin') ?>\" />\n\t\t<meta name=\"twitter:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta name=\"twitter:image\" content=\"<?php echo I18n::encode($BASEPATH); ?>img/apple-touch-icon.png\" />\n\t\t<meta property=\"og:title\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:site_name\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta property=\"og:image\" content=\"<?php echo I18n::encode($BASEPATH); ?>img/apple-touch-icon.png\" />\n\t\t<meta property=\"og:image:type\" content=\"image/png\" />\n\t\t<meta property=\"og:image:width\" content=\"180\" />\n\t\t<meta property=\"og:image:height\" content=\"180\" />\n\t</head>\n\t<body role=\"document\" data-compression=\"<?php echo rawurlencode($COMPRESSION); ?>\"<?php\n$class = array();\nif ($isCpct) {\n    $class[] = 'navbar-spacing';\n}\nif ($isDark) {\n    $class[] = 'dark-theme';\n}\nif (count($class)) {\n    echo ' class=\"', implode(' ', $class), '\"';\n}\n?>>\n\t\t<div id=\"passwordmodal\" tabindex=\"-1\" class=\"modal fade\" role=\"dialog\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t<form id=\"passwordform\" role=\"form\">\n\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t<label for=\"passworddecrypt\"><span class=\"glyphicon glyphicon-eye-open\"></span> <?php echo I18n::_('Please enter the password for this paste:') ?></label>\n\t\t\t\t\t\t\t\t<input id=\"passworddecrypt\" type=\"password\" class=\"form-control\" placeholder=\"<?php echo I18n::_('Enter password') ?>\" required=\"required\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-success btn-block\"><span class=\"glyphicon glyphicon-off\"></span> <?php echo I18n::_('Decrypt') ?></button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n<?php\nif ($QRCODE) :\n?>\n\t\t<div id=\"qrcodemodal\" tabindex=\"-1\" class=\"modal fade\" aria-labelledby=\"qrcodemodalTitle\" role=\"dialog\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t<div class=\"mx-auto\" id=\"qrcode-display\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"btn-group col-xs-12\">\n\t\t\t\t\t\t\t<span class=\"col-xs-12\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Close') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n<?php\nendif;\n?>\n\t\t<div id=\"emailconfirmmodal\" tabindex=\"-1\" class=\"modal fade\" aria-labelledby=\"emailconfirmmodalTitle\" role=\"dialog\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t<div id=\"emailconfirm-display\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"btn-group col-xs-12\" data-toggle=\"buttons\">\n\t\t\t\t\t\t\t<span class=\"col-xs-12 col-md-4\">\n\t\t\t\t\t\t\t\t<button id=\"emailconfirm-timezone-current\" type=\"button\" class=\"btn btn-danger btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Use Current Timezone') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span class=\"col-xs-12 col-md-4\">\n\t\t\t\t\t\t\t\t<button id=\"emailconfirm-timezone-utc\" type=\"button\" class=\"btn btn-default btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Convert To UTC') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span class=\"col-xs-12 col-md-4\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Close') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<nav class=\"navbar navbar-<?php echo $isDark ? 'inverse' : 'default'; ?> navbar-<?php echo $isCpct ? 'fixed' : 'static'; ?>-top\"><?php\nif ($isCpct) :\n?><div class=\"container\"><?php\nendif;\n?>\n\t\t\t<div class=\"navbar-header\">\n\t\t\t\t<button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n\t\t\t\t\t<span class=\"sr-only\"><?php echo I18n::_('Toggle navigation'); ?></span>\n\t\t\t\t\t<span class=\"icon-bar\"></span>\n\t\t\t\t\t<span class=\"icon-bar\"></span>\n\t\t\t\t\t<span class=\"icon-bar\"></span>\n\t\t\t\t</button>\n\t\t\t\t<a class=\"reloadlink navbar-brand\" href=\"\">\n\t\t\t\t\t<img alt=\"<?php echo I18n::_($NAME); ?>\" src=\"img/icon.svg\" width=\"38\" />\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div id=\"navbar\" class=\"navbar-collapse collapse\">\n\t\t\t\t<ul class=\"nav navbar-nav\">\n\t\t\t\t\t<li id=\"loadingindicator\" class=\"navbar-text hidden\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-time\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<?php echo I18n::_('Loading\u2026'), PHP_EOL; ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<button id=\"retrybutton\" type=\"button\" class=\"reloadlink hidden btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-repeat\" aria-hidden=\"true\"></span> <?php echo I18n::_('Retry'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n<?php\nif ($isPage) :\n?>\n\t\t\t\t\t\t<button id=\"sendbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-upload\" aria-hidden=\"true\"></span> <?php echo I18n::_('Send'), PHP_EOL;\nelse :\n?>\n\t\t\t\t\t\t<button id=\"newbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-file\" aria-hidden=\"true\"></span> <?php echo I18n::_('New'), PHP_EOL;\nendif;\n?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"clonebutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-duplicate\" aria-hidden=\"true\"></span> <?php echo I18n::_('Clone'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"rawtextbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-text-background\" aria-hidden=\"true\"></span> <?php echo I18n::_('Raw text'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"downloadtextbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon glyphicon-download-alt\" aria-hidden=\"true\"></span> <?php echo I18n::_('Save paste'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"emaillink\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-envelope\" aria-hidden=\"true\"></span> <?php echo I18n::_('Email'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n<?php\nif ($QRCODE) :\n?>\n\t\t\t\t\t\t<button id=\"qrcodelink\" type=\"button\" data-toggle=\"modal\" data-target=\"#qrcodemodal\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-qrcode\" aria-hidden=\"true\"></span> <?php echo I18n::_('QR code'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n<?php\nendif;\n?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"dropdown\">\n\t\t\t\t\t\t<select id=\"pasteExpiration\" name=\"pasteExpiration\" class=\"hidden\">\n<?php\nforeach ($EXPIRE as $key => $value) :\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n    if ($key == $EXPIREDEFAULT) :\n?> selected=\"selected\"<?php\n    endif;\n?>><?php echo $value; ?></option>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<a id=\"expiration\" href=\"#\" class=\"hidden dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Expires'); ?>: <span id=\"pasteExpirationDisplay\"><?php echo $EXPIRE[$EXPIREDEFAULT]; ?></span> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n<?php\nforeach ($EXPIRE as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-expiration=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value, PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nif ($isCpct) :\n?>\n\t\t\t\t\t<li class=\"dropdown\">\n\t\t\t\t\t\t<a id=\"formatter\" href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Options'); ?> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li id=\"burnafterreadingoption\" class=\"checkbox hidden\">\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"burnafterreading\" name=\"burnafterreading\"<?php\n    if ($BURNAFTERREADINGSELECTED) :\n?> checked=\"checked\"<?php\n    endif;\n?> />\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Burn after reading'), PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</li>\n<?php\n    if ($DISCUSSION) :\n?>\n\t\t\t\t\t\t\t<li id=\"opendiscussionoption\" class=\"checkbox hidden\">\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"opendiscussion\" name=\"opendiscussion\"<?php\n        if ($OPENDISCUSSION) :\n?> checked=\"checked\"<?php\n        endif;\n?> />\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Open discussion'), PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</li>\n<?php\n    endif;\n?>\n\t\t\t\t\t\t\t<li role=\"separator\" class=\"divider\"></li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Format'); ?>: <span id=\"pasteFormatterDisplay\"><?php echo $FORMATTER[$FORMATTERDEFAULT]; ?></span> <span class=\"caret\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-format=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value, PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<select id=\"pasteFormatter\" name=\"pasteFormatter\" class=\"hidden\">\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n        if ($key == $FORMATTERDEFAULT) :\n?> selected=\"selected\"<?php\n        endif;\n?>><?php echo $value; ?></option>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</li>\n<?php\nelse :\n?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div id=\"burnafterreadingoption\" class=\"navbar-text checkbox hidden\">\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"burnafterreading\" name=\"burnafterreading\"<?php\n    if ($BURNAFTERREADINGSELECTED) :\n?> checked=\"checked\"<?php\n    endif;\n?> />\n\t\t\t\t\t\t\t\t<?php echo I18n::_('Burn after reading'), PHP_EOL; ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n<?php\n    if ($DISCUSSION) :\n?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div id=\"opendiscussionoption\" class=\"navbar-text checkbox hidden\">\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"opendiscussion\" name=\"opendiscussion\"<?php\n        if ($OPENDISCUSSION) :\n?> checked=\"checked\"<?php\n        endif;\n?> />\n\t\t\t\t\t\t\t\t<?php echo I18n::_('Open discussion'), PHP_EOL; ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n<?php\n    endif;\nendif;\nif ($PASSWORD) :\n?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div id=\"password\" class=\"navbar-form hidden\">\n\t\t\t\t\t\t\t<input type=\"password\" id=\"passwordinput\" placeholder=\"<?php echo I18n::_('Password (recommended)'); ?>\" class=\"form-control\" size=\"23\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n<?php\nendif;\nif ($FILEUPLOAD) :\n?>\n\t\t\t\t\t<li id=\"attach\" class=\"hidden dropdown\">\n\t\t\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Attach a file'); ?> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li id=\"filewrap\">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<input type=\"file\" id=\"file\" name=\"file\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div id=\"dragAndDropFileName\" class=\"dragAndDropFile\"><?php echo I18n::_('alternatively drag & drop a file or paste an image from the clipboard'); ?></div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li id=\"customattachment\" class=\"hidden\"></li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a id=\"fileremovebutton\"  href=\"#\">\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Remove attachment'), PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nendif;\nif (!$isCpct) :\n?>\n\t\t\t\t\t<li class=\"dropdown\">\n\t\t\t\t\t\t<select id=\"pasteFormatter\" name=\"pasteFormatter\" class=\"hidden\">\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n        if ($key == $FORMATTERDEFAULT) :\n?> selected=\"selected\"<?php\n        endif;\n?>><?php echo $value; ?></option>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<a id=\"formatter\" href=\"#\" class=\"hidden dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Format'); ?>: <span id=\"pasteFormatterDisplay\"><?php echo $FORMATTER[$FORMATTERDEFAULT]; ?></span> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-format=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value, PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nendif;\n?>\n\t\t\t\t</ul>\n\t\t\t\t<ul class=\"nav navbar-nav pull-right\">\n<?php\nif (strlen($LANGUAGESELECTION)) :\n?>\n\t\t\t\t\t<li id=\"language\" class=\"dropdown\">\n\t\t\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"glyphicon glyphicon-flag\" aria-hidden=\"true\"></span> <?php echo $LANGUAGES[$LANGUAGESELECTION][0]; ?> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu dropdown-menu-right\">\n<?php\n    foreach ($LANGUAGES as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-lang=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value[0]; ?> (<?php echo $value[1]; ?>)\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nendif;\n?>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t<?php\nif ($isCpct) :\n?></div><?php\nendif;\n?></nav>\n\t\t<main>\n\t\t\t<section class=\"container\">\n<?php\nif (strlen($NOTICE)) :\n?>\n\t\t\t\t<div role=\"alert\" class=\"alert alert-info\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::encode($NOTICE), PHP_EOL; ?>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"remainingtime\" role=\"alert\" class=\"hidden alert alert-info\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-fire\" aria-hidden=\"true\"></span>\n\t\t\t\t</div>\n<?php\nif ($FILEUPLOAD) :\n?>\n\t\t\t\t<div id=\"attachment\" role=\"alert\" class=\"hidden alert alert-info\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-download-alt\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<a class=\"alert-link\"><?php echo I18n::_('Download attachment'), PHP_EOL; ?></a>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"status\" role=\"alert\" class=\"alert alert-info<?php echo empty($STATUS) ? ' hidden' : '' ?>\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::encode($STATUS), PHP_EOL; ?>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"errormessage\" role=\"alert\" class=\"<?php echo empty($ERROR) ? 'hidden' : '' ?> alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::encode($ERROR), PHP_EOL; ?>\n\t\t\t\t</div>\n\t\t\t\t<noscript>\n\t\t\t\t\t<div id=\"noscript\" role=\"alert\" class=\"alert alert-<?php echo $isDark ? 'error' : 'warning'; ?>\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<?php echo I18n::_('JavaScript is required for %s to work. Sorry for the inconvenience.', I18n::_($NAME)), PHP_EOL; ?>\n\t\t\t\t\t</div>\n\t\t\t\t</noscript>\n\t\t\t\t<div id=\"oldnotice\" role=\"alert\" class=\"hidden alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('%s requires a modern browser to work.', I18n::_($NAME)), PHP_EOL; ?>\n\t\t\t\t\t<a href=\"https://www.mozilla.org/firefox/\">Firefox</a>,\n\t\t\t\t\t<a href=\"https://www.opera.com/\">Opera</a>,\n\t\t\t\t\t<a href=\"https://www.google.com/chrome\">Chrome</a>\u2026<br />\n\t\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-the-error-privatebin-requires-a-modern-browser-to-work'); ?></span>\n\t\t\t\t</div>\n<?php\nif ($HTTPWARNING) :\n?>\n\t\t\t\t<div id=\"httpnotice\" role=\"alert\" class=\"hidden alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('This website is using an insecure connection! Please only use it for testing.'), PHP_EOL; ?><br />\n\t\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-an-error-about-an-insecure-connection'); ?></span>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"insecurecontextnotice\" role=\"alert\" class=\"hidden alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('Your browser may require an HTTPS connection to support the WebCrypto API. Try <a href=\"%s\">switching to HTTPS</a>.', $HTTPSLINK); ?>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"pastesuccess\" class=\"hidden\">\n\t\t\t\t\t<div role=\"alert\" class=\"alert alert-success\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<div id=\"deletelink\"></div>\n\t\t\t\t\t\t<div id=\"pastelink\"></div>\n\t\t\t\t\t</div>\n<?php\nif (strlen($URLSHORTENER)) :\n?>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<button id=\"shortenbutton\" data-shortener=\"<?php echo I18n::encode($URLSHORTENER); ?>\" type=\"button\" class=\"btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?> btn-block\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-send\" aria-hidden=\"true\"></span> <?php echo I18n::_('Shorten URL'), PHP_EOL; ?>\n\t\t\t\t\t</button>\n\t\t\t\t\t</p>\n\t\t\t\t\t<div role=\"alert\" class=\"alert alert-danger\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<?php echo I18n::_('URL shortener may expose your decrypt key in URL.'), PHP_EOL; ?>\n\t\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t</div>\n\t\t\t\t<ul id=\"editorTabs\" class=\"nav nav-tabs hidden\">\n\t\t\t\t\t<li role=\"presentation\" class=\"active\"><a role=\"tab\" aria-selected=\"true\" aria-controls=\"editorTabs\" id=\"messageedit\" href=\"#\"><?php echo I18n::_('Editor'); ?></a></li>\n\t\t\t\t\t<li role=\"presentation\"><a role=\"tab\" aria-selected=\"false\" aria-controls=\"editorTabs\" id=\"messagepreview\" href=\"#\"><?php echo I18n::_('Preview'); ?></a></li>\n\t\t\t\t\t<li role=\"presentation\" class=\"pull-right\">\n<?php\nif ($isPage) :\n?>\n\t\t\t\t\t\t<button id=\"newbutton\" type=\"button\" class=\"reloadlink hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?>\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-file\" aria-hidden=\"true\"></span> <?php echo I18n::_('New'), PHP_EOL;\nelse :\n?>\n\t\t\t\t\t\t<button id=\"sendbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?>\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-upload\" aria-hidden=\"true\"></span> <?php echo I18n::_('Send'), PHP_EOL;\nendif;\n?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t\t<section class=\"container\">\n\t\t\t\t<article class=\"row\">\n\t\t\t\t\t<div id=\"placeholder\" class=\"col-md-12 hidden\"><?php echo I18n::_('+++ no paste text +++'); ?></div>\n\t\t\t\t\t<div id=\"attachmentPreview\" class=\"col-md-12 text-center hidden\"></div>\n\t\t\t\t\t<div id=\"prettymessage\" class=\"col-md-12 hidden\">\n\t\t\t\t\t\t<pre id=\"prettyprint\" class=\"col-md-12 prettyprint linenums:1\"></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"plaintext\" class=\"col-md-12 hidden\"></div>\n\t\t\t\t\t<p class=\"col-md-12\"><textarea id=\"message\" name=\"message\" cols=\"80\" rows=\"25\" class=\"form-control hidden\"></textarea></p>\n\t\t\t\t</article>\n\t\t\t</section>\n\t\t\t<section class=\"container\">\n\t\t\t\t<div id=\"discussion\" class=\"hidden\">\n\t\t\t\t\t<h4><?php echo I18n::_('Discussion'); ?></h4>\n\t\t\t\t\t<div id=\"commentcontainer\"></div>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<section class=\"container\">\n\t\t\t\t<div id=\"noscript\" role=\"alert\" class=\"alert alert-info noscript-hide\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('Loading\u2026'); ?><br />\n\t\t\t\t\t<span class=\"small\"><?php echo I18n::_('In case this message never disappears please have a look at <a href=\"%s\">this FAQ for information to troubleshoot</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-the-loading-message-not-go-away'); ?></span>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<footer class=\"container\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<h4 class=\"col-md-5 col-xs-8\"><?php echo I18n::_($NAME); ?> <small>- <?php echo I18n::_('Because ignorance is bliss'); ?></small></h4>\n\t\t\t\t\t<p class=\"col-md-1 col-xs-4 text-center\"><?php echo $VERSION; ?></p>\n\t\t\t\t\t<p id=\"aboutbox\" class=\"col-md-6 col-xs-12\">\n\t\t\t\t\t\t<?php echo sprintf(\n                            I18n::_('%s is a minimalist, open source online pastebin where the server has zero knowledge of pasted data. Data is encrypted/decrypted %sin the browser%s using 256 bits AES.',\n                                I18n::_($NAME),\n                                '%s', '%s'\n                            ),\n                            '<i>', '</i>'), ' ', $INFO, PHP_EOL;\n                        ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</footer>\n\t\t</main>\n<?php\nif ($DISCUSSION) :\n?>\n\t\t<div id=\"serverdata\" class=\"hidden\" aria-hidden=\"true\">\n\t\t\t<div id=\"templates\">\n\t\t\t\t<article id=\"commenttemplate\" class=\"comment\"><div class=\"commentmeta\"><span class=\"nickname\">name</span><span class=\"commentdate\">0000-00-00</span></div><div class=\"commentdata\">c</div><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Reply'); ?></button></article>\n\t\t\t\t<p id=\"commenttailtemplate\" class=\"comment\"><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Add comment'); ?></button></p>\n\t\t\t\t<div id=\"replytemplate\" class=\"reply hidden\"><input type=\"text\" id=\"nickname\" class=\"form-control\" title=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" placeholder=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" /><textarea id=\"replymessage\" class=\"replymessage form-control\" cols=\"80\" rows=\"7\"></textarea><br /><div id=\"replystatus\" role=\"alert\" class=\"statusmessage hidden alert\"><span class=\"glyphicon\" aria-hidden=\"true\"></span> </div><button id=\"replybutton\" class=\"btn btn-default btn-sm\"><?php echo I18n::_('Post comment'); ?></button></div>\n\t\t\t</div>\n\t\t</div>\n<?php\nendif;\n?>\n<?php\nif ($FILEUPLOAD) :\n?>\n\t\t<div id=\"dropzone\" class=\"hidden\" tabindex=\"-1\" aria-hidden=\"true\"></div>\n<?php\nendif;\n?>\n\t</body>\n</html>\n", "<?php\nuse PrivateBin\\I18n;\n?><!DOCTYPE html>\n<html lang=\"<?php echo I18n::_('en'); ?>\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"<?php echo I18n::encode($CSPHEADER); ?>\">\n\t\t<meta name=\"robots\" content=\"noindex\" />\n\t\t<meta name=\"google\" content=\"notranslate\">\n\t\t<title><?php echo I18n::_($NAME); ?></title>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/privatebin.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\nif ($SYNTAXHIGHLIGHTING):\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/prettify.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    if (strlen($SYNTAXHIGHLIGHTINGTHEME)):\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/<?php echo rawurlencode($SYNTAXHIGHLIGHTINGTHEME); ?>.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    endif;\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/jquery-3.6.0.js\" integrity=\"sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($QRCODE):\n?>\n\t\t<script async type=\"text/javascript\" data-cfasync=\"false\" src=\"js/kjua-0.9.0.js\" integrity=\"sha512-CVn7af+vTMBd9RjoS4QM5fpLFEOtBCoB0zPtaqIDC7sF4F8qgUSRFQQpIyEDGsr6yrjbuOLzdf20tkHHmpaqwQ==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($ZEROBINCOMPATIBILITY):\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base64-1.7.js\" integrity=\"sha512-JdwsSP3GyHR+jaCkns9CL9NTt4JUJqm/BsODGmYhBcj5EAPKcHYh+OiMfyHbcDLECe17TL0hjXADFkusAqiYgA==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/zlib-1.2.11.js\" integrity=\"sha512-Yey/0yoaVmSbqMEyyff3DIu8kCPwpHvHf7tY1AuZ1lrX9NPCMg87PwzngMi+VNbe4ilCApmePeuKT869RTcyCQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base-x-4.0.0.js\" integrity=\"sha512-nNPg5IGCwwrveZ8cA/yMGr5HiRS5Ps2H+s0J/mKTPjCPWUgFGGw7M5nqdnPD3VsRwCVysUh3Y8OWjeSKGkEQJQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/rawinflate-0.3.js\" integrity=\"sha512-g8uelGgJW9A/Z1tB6Izxab++oj5kdD7B4qC7DHwZkB6DGMXKyzx7v5mvap2HXueI2IIn08YlRYM56jwWdm2ucQ==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($SYNTAXHIGHLIGHTING):\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/prettify.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-puO0Ogy++IoA2Pb9IjSxV1n4+kQkKXYAEUtVzfZpQepyDPyXk8hokiYDS7ybMogYlyyEIwMLpZqVhCkARQWLMg==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($MARKDOWN):\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/showdown-2.0.0.js\" integrity=\"sha512-UB9jpMTOJLSnVzePuqlSGT34G70wEGqtIWabMeAh+Drnj4/uQ8rFkFn1zkN9vkWp/7nA51U2LmP23H5MJvBXsw==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/purify-2.3.6.js\" integrity=\"sha512-N1GGPjbqLbwK821ZN7C925WuTwU4aDxz2CEEOXQ6/s6m6MBwVj8fh5fugiE2hzsm0xud3q7jpjZQ4ILnpMREYQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/legacy.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-LYos+qXHIRqFf5ZPNphvtTB0cgzHUizu2wwcOwcwz/VIpRv9lpcBgPYz4uq6jx0INwCAj6Fbnl5HoKiLufS2jg==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/privatebin.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-EdUms2nI12Cmtv014stIEBlyPjeKMHlkg7NiBJup1b7jJF5amKhev2RwTaldINXK4UaWbZtQ6hGuMPNvvNQZFA==\" crossorigin=\"anonymous\"></script>\n\t\t<!-- icon -->\n\t\t<link rel=\"apple-touch-icon\" href=\"img/apple-touch-icon.png?<?php echo rawurlencode($VERSION); ?>\" sizes=\"180x180\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-32x32.png?<?php echo rawurlencode($VERSION); ?>\" sizes=\"32x32\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-16x16.png?<?php echo rawurlencode($VERSION); ?>\" sizes=\"16x16\" />\n\t\t<link rel=\"manifest\" href=\"manifest.json?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<link rel=\"mask-icon\" href=\"img/safari-pinned-tab.svg?<?php echo rawurlencode($VERSION); ?>\" color=\"#ffcc00\" />\n\t\t<link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n\t\t<meta name=\"msapplication-config\" content=\"browserconfig.xml\">\n\t\t<meta name=\"theme-color\" content=\"#ffe57e\" />\n\t\t<!-- Twitter/social media cards -->\n\t\t<meta name=\"twitter:card\" content=\"summary\" />\n\t\t<meta name=\"twitter:title\" content=\"<?php echo I18n::_('Encrypted note on PrivateBin') ?>\" />\n\t\t<meta name=\"twitter:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta name=\"twitter:image\" content=\"img/apple-touch-icon.png?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<meta property=\"og:title\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:site_name\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta property=\"og:image\" content=\"img/apple-touch-icon.png?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<meta property=\"og:image:type\" content=\"image/png\" />\n\t\t<meta property=\"og:image:width\" content=\"180\" />\n\t\t<meta property=\"og:image:height\" content=\"180\" />\n\t</head>\n\t<body data-compression=\"<?php echo rawurlencode($COMPRESSION); ?>\">\n\t\t<header>\n\t\t\t<div id=\"aboutbox\">\n\t\t\t\t<?php echo sprintf(\n                    I18n::_('%s is a minimalist, open source online pastebin where the server has zero knowledge of pasted data. Data is encrypted/decrypted %sin the browser%s using 256 bits AES.',\n                        I18n::_($NAME),\n                        '%s', '%s'\n                    ),\n                    '<i>', '</i>'), ' ', $INFO;\n                ?>\n\t\t\t\t<br />\n<?php\nif (strlen($NOTICE)):\n?>\n\t\t\t\t<span class=\"blink\">\u25b6</span> <?php echo I18n::encode($NOTICE);\nendif;\n?>\n\t\t\t</div>\n\t\t\t<h1 class=\"title reloadlink\"><?php echo I18n::_($NAME); ?></h1><br />\n\t\t\t<h2 class=\"title\"><?php echo I18n::_('Because ignorance is bliss'); ?></h2><br />\n\t\t\t<h3 class=\"title\"><?php echo $VERSION; ?></h3>\n\t\t\t<noscript><div id=\"noscript\" class=\"nonworking\"><?php echo I18n::_('JavaScript is required for %s to work. Sorry for the inconvenience.', I18n::_($NAME)); ?></div></noscript>\n\t\t\t<div id=\"oldnotice\" class=\"nonworking hidden\">\n\t\t\t\t<?php echo I18n::_('%s requires a modern browser to work.', I18n::_($NAME)), PHP_EOL; ?>\n\t\t\t\t<a href=\"https://www.mozilla.org/firefox/\">Firefox</a>,\n\t\t\t\t<a href=\"https://www.opera.com/\">Opera</a>,\n\t\t\t\t<a href=\"https://www.google.com/chrome\">Chrome</a>\u2026<br />\n\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-the-error-privatebin-requires-a-modern-browser-to-work'); ?></span>\n\t\t\t</div>\n<?php\nif ($HTTPWARNING):\n?>\n\t\t\t<div id=\"httpnotice\" class=\"errorMessage hidden\">\n\t\t\t\t<?php echo I18n::_('This website is using an insecure connection! Please only use it for testing.'); ?><br />\n\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-an-error-about-an-insecure-connection'); ?></span>\n\t\t\t</div>\n\t\t\t<div id=\"insecurecontextnotice\" class=\"errorMessage hidden\">\n\t\t\t\t<?php echo I18n::_('Your browser may require an HTTPS connection to support the WebCrypto API. Try <a href=\"%s\">switching to HTTPS</a>.', $HTTPSLINK); ?>\n\t\t\t</div>\n<?php\nendif;\n?>\n\t\t</header>\n\t\t<section>\n\t\t\t<article>\n\t\t\t\t<div id=\"loadingindicator\" class=\"hidden\"><?php echo I18n::_('Loading\u2026'); ?></div>\n\t\t\t\t<div id=\"status\"><?php echo I18n::encode($STATUS); ?></div>\n\t\t\t\t<div id=\"errormessage\" class=\"hidden\"><?php echo I18n::encode($ERROR); ?></div>\n\t\t\t\t<div id=\"toolbar\">\n\t\t\t\t\t<button id=\"newbutton\" class=\"reloadlink hidden\"><img src=\"img/icon_new.png\" width=\"11\" height=\"15\" alt=\"\" /><?php echo I18n::_('New'); ?></button>\n\t\t\t\t\t<button id=\"retrybutton\" class=\"reloadlink hidden\"><?php echo I18n::_('Retry'), PHP_EOL; ?></button>\n\t\t\t\t\t<button id=\"sendbutton\" class=\"hidden\"><img src=\"img/icon_send.png\" width=\"18\" height=\"15\" alt=\"\" /><?php echo I18n::_('Send'); ?></button>\n\t\t\t\t\t<button id=\"clonebutton\" class=\"hidden\"><img src=\"img/icon_clone.png\" width=\"15\" height=\"17\" alt=\"\" /><?php echo I18n::_('Clone'); ?></button>\n\t\t\t\t\t<button id=\"rawtextbutton\" class=\"hidden\"><img src=\"img/icon_raw.png\" width=\"15\" height=\"15\" alt=\"\" /><?php echo I18n::_('Raw text'); ?></button>\n\t\t\t\t\t<button id=\"downloadtextbutton\" class=\"hidden\"><?php echo I18n::_('Save paste'), PHP_EOL; ?></button>\n\t\t\t\t\t<button id=\"emaillink\" class=\"hidden\"><img src=\"img/icon_email.png\" width=\"15\" height=\"15\" alt=\"\" /><?php echo I18n::_('Email'); ?></button>\n<?php\nif ($QRCODE):\n?>\n\t\t\t\t\t<button id=\"qrcodelink\" class=\"hidden\"><img src=\"img/icon_qr.png\" width=\"15\" height=\"15\" alt=\"\" /><?php echo I18n::_('QR code'); ?></button>\n<?php\nendif;\n?>\n\t\t\t\t\t<div id=\"expiration\" class=\"hidden button\"><?php echo I18n::_('Expires'); ?>:\n\t\t\t\t\t\t<select id=\"pasteExpiration\" name=\"pasteExpiration\">\n<?php\nforeach ($EXPIRE as $key => $value):\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n    if ($key == $EXPIREDEFAULT):\n?> selected=\"selected\"<?php\n    endif;\n?>><?php echo $value; ?></option>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"remainingtime\" class=\"hidden\"></div>\n\t\t\t\t\t<div id=\"burnafterreadingoption\" class=\"button hidden\">\n\t\t\t\t\t\t<input type=\"checkbox\" id=\"burnafterreading\" name=\"burnafterreading\"<?php\nif ($BURNAFTERREADINGSELECTED):\n?> checked=\"checked\"<?php\nendif;\n?> />\n\t\t\t\t\t\t<label for=\"burnafterreading\"><?php echo I18n::_('Burn after reading'); ?></label>\n\t\t\t\t\t</div>\n<?php\nif ($DISCUSSION):\n?>\n\t\t\t\t\t<div id=\"opendiscussionoption\" class=\"button hidden\">\n\t\t\t\t\t\t<input type=\"checkbox\" id=\"opendiscussion\" name=\"opendiscussion\"<?php\n    if ($OPENDISCUSSION):\n?> checked=\"checked\"<?php\n    endif;\n?> />\n\t\t\t\t\t\t<label for=\"opendiscussion\"><?php echo I18n::_('Open discussion'); ?></label>\n\t\t\t\t\t</div>\n<?php\nendif;\nif ($PASSWORD):\n?>\n\t\t\t\t\t<div id=\"password\" class=\"hidden\">\n\t\t\t\t\t\t<input type=\"password\" id=\"passwordinput\" placeholder=\"<?php echo I18n::_('Password (recommended)'); ?>\" size=\"32\" />\n\t\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t\t<div id=\"formatter\" class=\"button hidden\"><?php echo I18n::_('Format'); ?>:\n\t\t\t\t\t\t<select id=\"pasteFormatter\" name=\"pasteFormatter\">\n<?php\nforeach ($FORMATTER as $key => $value):\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n    if ($key == $FORMATTERDEFAULT):\n?> selected=\"selected\"<?php\n    endif;\n?>><?php echo $value; ?></option>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n<?php\nif (strlen($LANGUAGESELECTION)):\n?>\n\t\t\t\t\t<div id=\"language\" class=\"button\">\n\t\t\t\t\t\t<select name=\"lang\">\n<?php\n    foreach ($LANGUAGES as $key => $value):\n?>\n\t\t\t\t\t\t\t<option data-lang=\"<?php echo $key; ?>\" value=\"<?php echo $key; ?>\"<?php\n        if ($key == $LANGUAGESELECTION):\n?> selected=\"selected\"<?php\n        endif;\n?>><?php echo $value[0]; ?> (<?php echo $value[1]; ?>)</option>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t</div>\n<?php\nif ($QRCODE):\n?>\n\t\t\t\t<div id=\"qrcode-display\"></div>\n<?php\nendif;\n?>\t\t\t\t<div id=\"pastesuccess\" class=\"hidden\">\n\t\t\t\t\t<div id=\"deletelink\"></div>\n\t\t\t\t\t<div id=\"pastelink\"></div>\n<?php\nif (strlen($URLSHORTENER)):\n?>\n\t\t\t\t\t<button id=\"shortenbutton\" data-shortener=\"<?php echo I18n::encode($URLSHORTENER); ?>\"><img src=\"img/icon_shorten.png\" width=\"13\" height=\"15\" /><?php echo I18n::_('Shorten URL'); ?></button>\n<?php\nendif;\n?>\n\t\t\t\t</div>\n<?php\nif ($FILEUPLOAD):\n?>\n\t\t\t\t<div id=\"attachment\" class=\"hidden\"><a><?php echo I18n::_('Download attachment'); ?></a></div>\n\t\t\t\t<div id=\"attach\" class=\"hidden\">\n\t\t\t\t\t<span id=\"clonedfile\" class=\"hidden\"><?php echo I18n::_('Cloned file attached.'); ?></span>\n\t\t\t\t\t<span id=\"filewrap\"><?php echo I18n::_('Attach a file'); ?>: <input type=\"file\" id=\"file\" name=\"file\" /></span>\n\t\t\t\t\t<span id=\"dragAndDropFileName\" class=\"dragAndDropFile\"><?php echo I18n::_('alternatively drag & drop a file or paste an image from the clipboard'); ?></span>\n\t\t\t\t\t<button id=\"fileremovebutton\"><?php echo I18n::_('Remove attachment'); ?></button>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"preview\" class=\"hidden\">\n\t\t\t\t\t<button id=\"messageedit\"><?php echo I18n::_('Editor'); ?></button>\n\t\t\t\t\t<button id=\"messagepreview\"><?php echo I18n::_('Preview'); ?></button>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"attachmentPreview\" class=\"hidden\"></div>\n\t\t\t\t<div id=\"prettymessage\" class=\"hidden\">\n\t\t\t\t\t<pre id=\"prettyprint\" class=\"prettyprint linenums:1\"></pre>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"plaintext\" class=\"hidden\"></div>\n\t\t\t\t<textarea id=\"message\" name=\"message\" cols=\"80\" rows=\"25\" class=\"hidden\"></textarea>\n\t\t\t</article>\n\t\t</section>\n\t\t<section>\n\t\t\t<div id=\"discussion\" class=\"hidden\">\n\t\t\t\t<h4 class=\"title\"><?php echo I18n::_('Discussion'); ?></h4>\n\t\t\t\t<div id=\"commentcontainer\"></div>\n\t\t\t</div>\n\t\t</section>\n<?php\nif ($DISCUSSION):\n?>\n\t\t<div id=\"serverdata\" class=\"hidden\" aria-hidden=\"true\">\n\t\t\t<div id=\"templates\">\n\t\t\t\t<article id=\"commenttemplate\" class=\"comment\"><div class=\"commentmeta\"><span class=\"nickname\">name</span><span class=\"commentdate\">0000-00-00</span></div><div class=\"commentdata\">c</div><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Reply'); ?></button></article>\n\t\t\t\t<div id=\"commenttailtemplate\" class=\"comment\"><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Add comment'); ?></button></div>\n\t\t\t\t<div id=\"replytemplate\" class=\"reply hidden\"><input type=\"text\" id=\"nickname\" class=\"form-control\" title=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" placeholder=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" /><textarea id=\"replymessage\" class=\"replymessage form-control\" cols=\"80\" rows=\"7\"></textarea><br /><div id=\"replystatus\" role=\"alert\" class=\"statusmessage hidden alert\"><span class=\"glyphicon\" aria-hidden=\"true\"></span> </div><button id=\"replybutton\" class=\"btn btn-default btn-sm\"><?php echo I18n::_('Post comment'); ?></button></div>\n\t\t\t</div>\n\t\t</div>\n<?php\nendif;\n?>\n<?php\nif ($FILEUPLOAD):\n?>\n\t\t<div id=\"dropzone\" class=\"hidden\" tabindex=\"-1\" aria-hidden=\"true\"></div>\n<?php\nendif;\n?>\n\t\t<section class=\"container\">\n\t\t\t<div id=\"noscript\" role=\"alert\" class=\"nonworking alert alert-info noscript-hide\"><span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\">\n\t\t\t\t<span> <?php echo I18n::_('Loading\u2026'); ?></span><br>\n\t\t\t\t<span class=\"small\"><?php echo I18n::_('In case this message never disappears please have a look at <a href=\"%s\">this FAQ for information to troubleshoot</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-the-loading-message-not-go-away'); ?></span>\n\t\t\t</div>\n\t\t</section>\n\t</body>\n</html>\n"], "fixing_code": ["# PrivateBin version history\n\n  * **1.4 (not yet released)**\n    * ADDED: Translations for Corsican, Estonian and Lojban\n    * ADDED: new HTTP headers improving security (#765)\n    * ADDED: Download button for paste text (#774)\n    * ADDED: Opt-out of federated learning of cohorts (FLoC) (#776)\n    * ADDED: Configuration option to exempt IPs from the rate-limiter (#787)\n    * ADDED: Google Cloud Storage backend support (#795)\n    * ADDED: Oracle database support (#868)\n    * ADDED: Configuration option to limit paste creation and commenting to certain IPs (#883)\n    * ADDED: Set CSP also as meta tag, to deal with misconfigured webservers mangling the HTTP header\n    * ADDED: Sanitize SVG preview, preventing script execution in instance context\n    * CHANGED: Language selection cookie only transmitted over HTTPS (#472)\n    * CHANGED: Upgrading libraries to: base-x 4.0.0, bootstrap 3.4.1 (JS), DOMpurify 2.3.6, ip-lib 1.18.0, jQuery 3.6.0, random_compat 2.0.21 & Showdown 2.0.0\n    * CHANGED: Removed automatic `.ini` configuration file migration (#808)\n    * CHANGED: Removed configurable `dir` for `traffic` & `purge` limiters (#419)\n    * CHANGED: Server salt, traffic and purge limiter now stored in the storage backend (#419)\n    * CHANGED: Drop support for attachment download in IE\n  * **1.3.5 (2021-04-05)**\n    * ADDED: Translations for Hebrew, Lithuanian, Indonesian and Catalan\n    * ADDED: Make the project info configurable (#681)\n    * CHANGED: Upgrading libraries to: DOMpurify 2.2.7, kjua 0.9.0 & random_compat 2.0.18\n    * CHANGED: Open all links in new window (#630)\n    * FIXED: PDF display in Firefox (#630)\n    * FIXED: Allow pasting into password input dialog (#630)\n    * FIXED: Display of expiration date in email (#630)\n    * FIXED: Allow display of durations in weeks (#630)\n    * FIXED: Avoid exposing burn-after-reading messages from cache (#630)\n    * FIXED: Only display the dropzone when it should (#630)\n    * FIXED: Detect delete token properly (#630)\n    * FIXED: Sanitize output from `Helper.urls2links()` (#630)\n    * FIXED: Avoid recreation of existing pasteurl element when calling URL shortener (#630)\n    * FIXED: Downloads in Chrome >= 83 (#634)\n    * FIXED: Display of empty files (#663)\n    * FIXED: Improve OpenGraph attributes (#651)\n    * FIXED: Reset to configured burn-after-reading, discussion and expiration settings (#682)\n    * FIXED: Italic segment of project information (#756)\n  * **1.3.4 (2020-03-22)**\n    * CHANGED: Minimum required PHP version is 5.6, due to a change in the identicon library and to use php's native hash_equals()\n    * CHANGED: Upgrading libraries to: identicon 2.0.0\n    * FIXED: Support custom expiration options in email function (#586)\n    * FIXED: Regression with encoding of HTML entities (#588)\n    * FIXED: Unable to paste password on paste with attachment (#565 & #595)\n  * **1.3.3 (2020-02-16)**\n    * CHANGED: Upgrading libraries to: DOMpurify 2.0.8\n    * CHANGED: Several translations got updated with missing messages\n    * CHANGED: Introduce HTML entity encoding on server side (#581)\n    * FIXED: HTML entity double encoding issues introduced in 1.3.2 (#560)\n  * **1.2.3 (2020-02-16)**\n    * CHANGED: Upgrading libraries to: DOMpurify 2.0.8\n    * CHANGED: Introduce HTML entity encoding on server side (#581)\n    * FIXED: HTML entity double encoding issues introduced in 1.3.2 (#560)\n  * **1.3.2 (2020-01-11)**\n    * ADDED: Translation for Ukrainian (#533)\n    * ADDED: Option to send a mail with the link, when creating a paste (#398)\n    * ADDED: Add support for CONFIG_PATH environment variable (#552)\n    * CHANGED: Upgrading libraries to: base-x 3.0.7, DOMpurify 2.0.7 & Showdown 1.9.1\n    * FIXED: HTML injection via unescaped attachment filename (#554)\n    * FIXED: Password disabling option (#527)\n  * **1.2.2 (2020-01-11)**\n    * CHANGED: Upgrading libraries to: bootstrap 3.4.1 (CSS), DOMpurify 2.0.7, jQuery 3.4.1, kjua 0.6.0, Showdown 1.9.1 & SJCL 1.0.8\n    * FIXED: HTML injection via unescaped attachment filename (#554)\n  * **1.3.1 (2019-09-22)**\n    * ADDED: Translation for Bulgarian (#455)\n    * CHANGED: Improved mobile UI - obscured send button and hard to click shortener button (#477)\n    * CHANGED: Enhanced URL shortener integration (#479)\n    * CHANGED: Improved file upload drag & drop UI (#317)\n    * CHANGED: Increased default size limit from 2 to 10 MiB, switch data from BLOB to MEDIUMBLOB in MySQL (#458)\n    * CHANGED: Upgrading libraries to: DOMpurify 2.0.1\n    * FIXED: Enabling browsers without WASM to create pastes and read uncompressed ones (#454)\n    * FIXED: Cloning related issues (#489, #491, #493, #494)\n    * FIXED: Enable file operation only when editing (#497)\n    * FIXED: Clicking 'New' on a previously submitted paste does not blank address bar (#354)\n    * FIXED: Clear address bar when create new paste from existing paste (#479)\n    * FIXED: Discussion section not hiding when new/clone paste is clicked on (#484)\n    * FIXED: Showdown.js error when posting svg qrcode (#485)\n    * FIXED: Failed to handle the case where user cancelled attachment selection properly (#487)\n    * FIXED: Displaying the appropriate errors in older browsers (#508)\n  * **1.3 (2019-07-09)**\n    * ADDED: Translation for Czech (#424)\n    * ADDED: Threat modeled the application (#177)\n    * ADDED: Made compression configurable (#38)\n    * CHANGED: Minimum required PHP version is 5.5, due to a change in the identicon library\n    * CHANGED: Minimum required browser versions are Firefox 54, Chrome 57, Opera 44, Safari 11, Edge 16, due to use of WebCrypto API, async/await, ES6 & WebAssembly features - all Internet Explorer versions are incompatible\n    * CHANGED: JSON and encryption formats were changed to replace SJCL library by browser integrated WebCrypto API (#28, #74)\n    * CHANGED: Replaced rawdeflate.js with zlib.wasm to resolve decompression failures and gain compatibility with standard deflate implementations (#193, #260, #328, #434, #440)\n    * CHANGED: Increase PBKDF2 iterations to 100k (#350)\n    * CHANGED: Replaced last use of MD5 with Fowler\u2013Noll\u2013Vo checksum which produces the exact length we need for the paste ID (#49)\n    * CHANGED: Simplified some PHP code & renamed PrivateBin class into Controller, to make MVC pattern use more obvious (#342)\n    * CHANGED: Upgrading libraries to: identicon 1.2.0, random_compat 2.0.18, jQuery 3.4.1, Showdown 1.9.0, DOMpurify 1.0.11 & kjua 0.6.0\n    * FIXED: Prevent Chrome from sending content of paste to Google for translation (#378)\n    * FIXED: To support attachments larger then 2 MiB in newer Chrome versions, we switched to blob instead of data URIs (#432)\n    * FIXED: Since Outlook strips trailing equal signs in links, the key in URL hash is now base58 encoded, instead of base64 (#377)\n    * FIXED: Facebooks started injecting parameters into shared URLs for tracking that lead to inaccessible pastes (#396)\n    * FIXED: Properly escaped HTML in raw text mode (#358)\n    * FIXED: Made download links better readable in the dark bootstrap theme (#364)\n    * FIXED: Allow Letsencrypt bot to access on apache servers (#413)\n  * **1.2.1 (2018-08-11)**\n    * ADDED: Add support for mega.nz links in pastes and comments (#331)\n    * CHANGED: Added some missing Russian translations (#348)\n    * CHANGED: Minor PHP refactoring: Rename PrivateBin class to Controller, improved logic of some persistence classes (#342)\n    * CHANGED: Upgrading DOMpurify library to 1.0.7\n    * FIXED: Ensure legacy browsers without webcrypto support can't create paste keys with insufficient entropy (#346)\n    * FIXED: Re-add support for old browsers (Firefox&lt;21, Chrome&lt;31, Safari&lt;7, IE&lt;11), broken in 1.2, will be removed again in 1.3\n  * **1.2 (2018-07-22)**\n    * ADDED: Translations for Spanish, Occitan, Norwegian, Portuguese, Dutch and Hungarian\n    * ADDED: Option in configuration to change the default \"PrivateBin\" title of the site\n    * ADDED: Added display of video, audio & PDF, drag & drop, preview of attachments (#182)\n    * ADDED: QR code generation (#169)\n    * ADDED: Introduced DOMpurify library to sanitize generated HTML before display (#183)\n    * CHANGED: Force JSON request for getting paste data & password retry (#216)\n    * CHANGED: Minimum required PHP version is 5.4 (#186)\n    * CHANGED: Shipped .htaccess files were updated for Apache 2.4 (#192)\n    * CHANGED: Cleanup of bootstrap template variants and moved icons to `img` directory\n    * CHANGED: Removed option to hide clone button on expiring pastes, since this requires reading the paste for rendering the template, which leaks information on the pastes state\n    * CHANGED: Upgrading libraries to: SJCL 1.0.7, jQuery 3.3.1, Base64 2.4.5, Showdown 1.8.6, DOMpurify 1.0.5 & Prettify 453bd5f\n    * CHANGED: Refactored JavaScript code, making it modular with private and public functions, making it much easier to maintain (#178)\n    * FIXED: To counteract regressions introduced by the refactoring, we finally introduced property based unit testing for the JavaScript code, this caught several regressions, but also some very old bugs not found so far (#32)\n  * **1.1.1 (2017-10-06)**\n    * CHANGED: Switched to `.php` file extension for configuration file, to avoid leaking configuration data in unprotected installation.\n  * **1.1 (2016-12-26)**\n    * ADDED: Translations for Italian and Russian\n    * ADDED: Loading message displayed until decryption succeeded for slower (in terms of CPU or network) systems\n    * ADDED: Dockerfile for docker container creation\n    * CHANGED: Using modal dialog to request password input instead of native JS input window (#69)\n    * CHANGED: Suppressed referrer HTTP header sending when following links in a paste or comment (#96) and added additional HTTP headers for XSS mitigation (#91)\n    * CHANGED: Updated random_compat and jQuery libraries\n    * FIXED: XSS using JavaScript stored as markdown formatted paste, after clicking on Raw paste button (#137)\n    * FIXED: Automatic purging deleting non-expiring pastes, when using database store (#149)\n  * **1.0 (2016-08-25)**\n    * ADDED: Translations for Slowene and Chinese\n    * ADDED: re-introduced (optional) URL shortener support, which was removed back in version 0.16 for privacy concerns\n    * ADDED: Preview tab, helpful for writing markdown code or check the source code rendering\n    * ADDED: Automatic purging of expired pastes, done on paste creation\n    * ADDED: Option to disable icons in discussions (will only affect newly created pastes)\n    * ADDED: Composer support\n    * CHANGED: Renamed the ZeroBin fork to PrivateBin\n    * CHANGED: Removed unmaintained RainTPL template engine, replacing the templates with straight forward PHP files\n    * CHANGED: New logo and favicons\n    * CHANGED: Upgrading SJCL library to 1.0.4\n    * CHANGED: Switched to GCM instead of CCM mode for AES encryption for newly created pastes\n    * CHANGED: Use backported random bytes function from PHP7 for older PHP versions instead of mcrypt\n    * CHANGED: Switched to a SHA256 HMAC of the IP in traffic limiter instead of storing it in plain text on the server\n    * CHANGED: Introduced content security policy header to reduce cross site scripting (XSS) risks\n    * CHANGED: Added SHA512 subresource integrity hashes for all javascript includes to reduce the risk of manipulated scripts and easier detection of such\n    * CHANGED: Refactored PHP code to conform to PSR-4 and PSR-2 standards\n    * CHANGED: Switched to Identicons as the default for comments with nicknames\n    * CHANGED: Vizhash is now optional and based on (128 byte) SHA512 HMAC instead of (144 byte) combination of MD5, SHA1 and a reversal of that string\n    * FIXED: Content-type negociation for HTML in certain uncommon browser configurations\n    * FIXED: JavaScript error displayed before page is loaded or during attachment load\n    * FIXED: Don't strip space characters at beginning or end of optional password\n    * FIXED: Various UI glitches in mobile version or on smaller desktops with language menu, button spacing and long URLs\n    * FIXED: Back button now works as expected after switching to raw text view of a paste\n    * FIXED: Reactivated second error message above send comment button to ensure its visibility when the main error message is outside the viewport\n    * FIXED: Raw text now displays original markdown instead of rendered HTML\n    * FIXED: Removed unused code detected with the help of various code review tools\n    * FIXED: Table format for PostgreSQL, making it possible to use PostgreSQL as backend in addition to MySQL, SQLite and flat files\n  * **0.22 (2015-11-09)**:\n    * ADDED: Tab character input support\n    * ADDED: Dark bootstrap theme\n    * ADDED: Option to hide clone button on expiring pastes\n    * ADDED: Option to set a different default language then English and/or enforce it as the only language\n    * ADDED: Database now contains version to allow automatic update of structure, only if necessary; removing database structure check on each request\n    * ADDED: Favicons\n    * FIXING: Regressions in database layer, prohibiting pastes from being stored\n    * FIXING: Fixing \"missing\" comments when they were posted during the same second to the same paste\n    * FIXING: JS failing when password input disabled\n    * CHANGED: Switching positions of \"New\" and \"Send\" button, highlighting the latter to improve workflow\n    * CHANGED: Renamed config file to make updates easier\n    * CHANGED: Switching to JSON-based REST-API\n    * CHANGED: Database structure to store attachments, allowing larger attachments to be stored (depending on maximum BLOB size of database backend)\n    * CHANGED: Refactored data model, traffic limiting & request handling\n  * **0.21.1 (2015-09-21)**:\n    * FIXING: lost meta data when using DB model instead of flat files\n    * FIXING: mobile navbar getting triggered on load\n    * CHANGED: database table \"paste\" gets automatically extended with a \"meta\" column\n    * CHANGED: navbar of \"bootstrap\" template now spans full width of view port on large screens\n  * **0.21 (2015-09-19)**:\n    * ADDED: Translations for German, French and Polish, language selection menu (optional)\n    * ADDED: File upload and image display support (optional)\n    * ADDED: Markdown format support\n    * ADDED: \"bootstrap-compact\" template that hides some of the options in a drop down menu to ensure the nav bar fitting on one line on smaller screen sizes\n    * FIXING: Various usability issues with different screen sizes / device types in the \"bootstrap\" template\n    * CHANGED: Instead of having different options to enable and preselect certain formats there is now a generic `[formatter_options]` section where formats can be added to the displayed format drop down menu. A `defaultformatter` can be set, it defaults to \"plaintext\". The `syntaxhighlighting` configuration got deprecated.\n    * `zerobin.js` got a major refactoring:\n      * moved from global namespace into anonymous function\n      * events are no longer set via \"onclick\" attributes in the templates, but bound by from JS side\n      * for simpler maintenance the functions were grouped into objects: zerobin (display logic, event handling), filter (compression,\nencryption), i18n (translation, counterpart of i18n.php) and helper (stateless utilities)\n    * Wiki pages were added to address common topics:\n      * [Upgrading from ZeroBin 0.19 Alpha](https://github.com/PrivateBin/PrivateBin/wiki/Upgrading-from-ZeroBin-0.19-Alpha)\n      * [Directory of public PrivateBin servers](https://github.com/PrivateBin/PrivateBin/wiki/PrivateBin-Directory)\n      * [Translation](https://github.com/PrivateBin/PrivateBin/wiki/Translation)\n      * [Templates](https://github.com/PrivateBin/PrivateBin/wiki/Templates)\n  * **0.20 (2015-09-03)**:\n    * ADDED: Password protected pastes (optional)\n    * ADDED: configuration options for highlighting, password, discussions, expiration times, rate limiting\n    * ADDED: JSON-only retrieval of paste incl. discussion, used to be able to refresh paste when posting a comment\n    * ADDED: bootstrap CSS based template\n    * CHANGED: \"Burn after reading\" pastes are now deleted only after the paste was successfully decrypted via callback. This prevents accidental deletion by chatbots following URLs and the like. Usage of a password is suggested to ensure only the desired recipient is able to encrypt it.\n    * CHANGED: the \"opendiscussion\" option now only controls if the discussion checkbox is preselected. Use \"discussion = false\" to disable the discussion feature completely (which also removes the checkbox from the template).\n    * FIXING: Behaviour of several conflicting configuration options. As a general measure unit tests for 9 of the options and all their possible configurations were added via a unit test generator.\n    * updated JS libraries: jquery to 1.11.3, sjcl to 1.0.2, base64.js to 2.1.9, deflate to 0.5, inflate to 0.3 and prettify to latest\n    * generally improved documentation, both inline phpdoc / JSdoc source code documentation, as well as Wiki pages on installation, configuration, development and JSON-API\n  * **Alpha 0.19 (2013-07-05)**:\n    * Corrected XSS security flaw which affected IE<10. Other browsers were not affected.\n    * Corrected spacing display in IE<10.\n  * **Alpha 0.18 (2013-02-24)**:\n    * ADDED: The resulting URL is automatically selected after pressing \"Send\". You just have to press CTRL+C.\n    * ADDED: Automatic syntax highlighting for 53 languages using highlight.js\n    * ADDED: \"5 minutes\" and \"1 week\" expirations.\n    * ADDED: \"Raw text\" button.\n    * jQuery upgraded to 1.9.1\n    * sjcl upgraded to GitHub master 2013-02-23\n    * base64.js upgraded to 1.7\n    * FIXED: Dates in discussion are now proper local dates.\n    * ADDED: Robot meta tags in HTML to prevent search engines indexing.\n    * ADDED: Better json checking (including entropy).\n    * ADDED: Added version to js/css assets URLs in order to prevent some abusive caches to serve an obsolete version of these files when ZeroBin is upgraded.\n    * \"Burn after reading\" option has been moved out of Expiration combo to a separate checkbox. Reason is: You can prevent a read-once paste to be available ad vitam eternam on the net.\n  * **Alpha 0.17 (2013-02-23)**:\n    * ADDED: Deletion URL.\n    * small refactoring.\n    * improved regex checks.\n    * larger server alt on installation.\n  * **Alpha 0.16**:\n    * FIXED minor php warnings.\n    * FIXED: zerobin.js reformated and properly commented.\n    * FIXED: Directory structure re-organized.\n    * CHANGED: URL shortening button was removed. (It was bad for privacy.)\n  * **Alpha 0.15 (2012-04-20):**\n    * FIXED: 2 minor corrections to avoid notices in php log.\n    * FIXED: Sources converted to UTF-8.\n  * **Alpha 0.14 (2012-04-20):**\n    * ADDED: GD presence is checked.\n    * CHANGED: Traffic limiter data files moved to data/ (\u2192easier rights management)\n    * ADDED: \"Burn after reading\" implemented. Opening the URL will display the paste and immediately destroy it on server.\n  * **Alpha 0.13 (2012-04-18):**\n    * FIXED: ''imageantialias()'' call removed because it's not really usefull and can be a problem on most hosts (if GD is not compiled in php).\n    * FIXED: $error not properly initialized in index.php\n  * **Alpha 0.12 (2012-04-18):**\n    * **DISCUSSIONS !** Now you can enable discussions on your pastes. Of course, posted comments and nickname are also encrypted and the server cannot see them.\n    * This feature implies a change in storage format. You will have to delete all previous pastes in your ZeroBin.\n    * Added [[php:vizhash_gd|Vizhash]] as avatars, so you can match posters IP addresses without revealing them. (Same image = same IP). Of course the IP address cannot be deduced from the Vizhash.\n    * Remaining time before expiration is now displayed.\n    * Explicit tags were added to CSS and jQuery selectors (eg. div#aaa instead of #aaa) to speed up browser.\n    * Better cleaning of the URL (to make sure the key is not broken by some stupid redirection service)\n  * **Alpha 0.11 (2012-04-12):**\n    * Automatically ignore parameters (such as &utm_source=...) added //after// the anchor by some stupid Web 2.0 services.\n    * First public release.\n  * **Alpha 0.10 (2012-04-12):**\n    * IE9 does not seem to correctly support ''pre-wrap'' either. Special handling mode activated for all version of IE<10. (Note: **ALL other browsers** correctly support this feature.)\n  * **Alpha 0.9 (2012-04-11):**\n    * Oh bummer... IE 8 is as shitty as IE6/7: Its does not seem to support ''white-space:pre-wrap'' correctly. I had to activate the special handling mode. I still have to test IE 9.\n  * **Alpha 0.8 (2012-04-11):**\n    * Source code not published yet.\n    * Interface completely redesigned. Icons added.\n    * Now properly supports IE6/7 (ugly display, but it works. \"Clone\" button is disabled though.)\n    * Added one level of depth for storage directories (This is better for higher load servers).\n    * php version is now checked (min: 5.2.6)\n    * Better checks on posted json data on server.\n    * Added \"1 year\" expiration.\n    * URLs are now converted to clickable links. This include http, https, ftp and magnet links.\n    * Clickable links include ''rel=\"nofollow\"'' to discourage SEO.\n    * On my public service (http://sebsauvage.net/paste/)\n      * All data will be deleted (you were warned - this is a test service)\n      * Default paste expiration is now 1 month to prevent clogging-up my host.\n", "/**\n * PrivateBin\n *\n * a zero-knowledge paste bin\n *\n * @see       {@link https://github.com/PrivateBin/PrivateBin}\n * @copyright 2012 S\u00e9bastien SAUVAGE ({@link http://sebsauvage.net})\n * @license   {@link https://www.opensource.org/licenses/zlib-license.php The zlib/libpng License}\n * @version   1.3.5\n * @name      PrivateBin\n * @namespace\n */\n\n// global Base64, DOMPurify, FileReader, RawDeflate, history, navigator, prettyPrint, prettyPrintOne, showdown, kjua\n\njQuery.fn.draghover = function() {\n    'use strict';\n    return this.each(function() {\n        let collection = $(),\n            self = $(this);\n\n        self.on('dragenter', function(e) {\n            if (collection.length === 0) {\n                self.trigger('draghoverstart');\n            }\n            collection = collection.add(e.target);\n        });\n\n        self.on('dragleave drop', function(e) {\n            collection = collection.not(e.target);\n            if (collection.length === 0) {\n                self.trigger('draghoverend');\n            }\n        });\n    });\n};\n\n// main application start, called when DOM is fully loaded\njQuery(document).ready(function() {\n    'use strict';\n    // run main controller\n    $.PrivateBin.Controller.init();\n});\n\njQuery.PrivateBin = (function($, RawDeflate) {\n    'use strict';\n\n    /**\n     * zlib library interface\n     *\n     * @private\n     */\n    let z;\n\n    /**\n     * DOMpurify settings for HTML content\n     *\n     * @private\n     */\n     const purifyHtmlConfig = {\n        ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|magnet):)/i,\n        SAFE_FOR_JQUERY: true,\n        USE_PROFILES: {\n            html: true\n        }\n    };\n\n    /**\n     * DOMpurify settings for SVG content\n     *\n     * @private\n     */\n     const purifySvgConfig = {\n        USE_PROFILES: {\n            svg: true,\n            svgFilters: true\n        }\n    };\n\n    /**\n     * CryptoData class\n     *\n     * bundles helper fuctions used in both paste and comment formats\n     *\n     * @name CryptoData\n     * @class\n     */\n    function CryptoData(data) {\n        this.v = 1;\n        // store all keys in the default locations for drop-in replacement\n        for (let key in data) {\n            this[key] = data[key];\n        }\n\n        /**\n         * gets the cipher data (cipher text + adata)\n         *\n         * @name Paste.getCipherData\n         * @function\n         * @return {Array}|{string}\n         */\n        this.getCipherData = function()\n        {\n            return this.v === 1 ? this.data : [this.ct, this.adata];\n        }\n    }\n\n    /**\n     * Paste class\n     *\n     * bundles helper fuctions around the paste formats\n     *\n     * @name Paste\n     * @class\n     */\n    function Paste(data) {\n        // inherit constructor and methods of CryptoData\n        CryptoData.call(this, data);\n\n        /**\n         * gets the used formatter\n         *\n         * @name Paste.getFormat\n         * @function\n         * @return {string}\n         */\n        this.getFormat = function()\n        {\n            return this.v === 1 ? this.meta.formatter : this.adata[1];\n        }\n\n        /**\n         * gets the remaining seconds before the paste expires\n         *\n         * returns 0 if there is no expiration\n         *\n         * @name Paste.getTimeToLive\n         * @function\n         * @return {string}\n         */\n        this.getTimeToLive = function()\n        {\n            return (this.v === 1 ? this.meta.remaining_time : this.meta.time_to_live) || 0;\n        }\n\n        /**\n         * is burn-after-reading enabled\n         *\n         * @name Paste.isBurnAfterReadingEnabled\n         * @function\n         * @return {bool}\n         */\n        this.isBurnAfterReadingEnabled = function()\n        {\n            return (this.v === 1 ? this.meta.burnafterreading : this.adata[3]);\n        }\n\n        /**\n         * are discussions enabled\n         *\n         * @name Paste.isDiscussionEnabled\n         * @function\n         * @return {bool}\n         */\n        this.isDiscussionEnabled = function()\n        {\n            return (this.v === 1 ? this.meta.opendiscussion : this.adata[2]);\n        }\n    }\n\n    /**\n     * Comment class\n     *\n     * bundles helper fuctions around the comment formats\n     *\n     * @name Comment\n     * @class\n     */\n    function Comment(data) {\n        // inherit constructor and methods of CryptoData\n        CryptoData.call(this, data);\n\n        /**\n         * gets the UNIX timestamp of the comment creation\n         *\n         * @name Paste.getCreated\n         * @function\n         * @return {int}\n         */\n        this.getCreated = function()\n        {\n            return this.meta[this.v === 1 ? 'postdate' : 'created'];\n        }\n\n        /**\n         * gets the icon of the comment submitter\n         *\n         * @name Paste.getIcon\n         * @function\n         * @return {string}\n         */\n        this.getIcon = function()\n        {\n            return this.meta[this.v === 1 ? 'vizhash' : 'icon'] || '';\n        }\n    }\n\n    /**\n     * static Helper methods\n     *\n     * @name Helper\n     * @class\n     */\n    const Helper = (function () {\n        const me = {};\n\n        /**\n         * character to HTML entity lookup table\n         *\n         * @see    {@link https://github.com/janl/mustache.js/blob/master/mustache.js#L60}\n         * @name Helper.entityMap\n         * @private\n         * @enum   {Object}\n         * @readonly\n         */\n        const entityMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#39;',\n            '/': '&#x2F;',\n            '`': '&#x60;',\n            '=': '&#x3D;'\n        };\n\n        /**\n         * number of seconds in a minute\n         *\n         * @name Helper.minute\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const minute = 60;\n\n        /**\n         * number of seconds in an hour\n         *\n         * = 60 * 60 seconds\n         *\n         * @name Helper.minute\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const hour = 3600;\n\n        /**\n         * number of seconds in a day\n         *\n         * = 60 * 60 * 24 seconds\n         *\n         * @name Helper.day\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const day = 86400;\n\n        /**\n         * number of seconds in a week\n         *\n         * = 60 * 60 * 24 * 7 seconds\n         *\n         * @name Helper.week\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const week = 604800;\n\n        /**\n         * number of seconds in a month (30 days, an approximation)\n         *\n         * = 60 * 60 * 24 * 30 seconds\n         *\n         * @name Helper.month\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const month = 2592000;\n\n        /**\n         * number of seconds in a non-leap year\n         *\n         * = 60 * 60 * 24 * 365 seconds\n         *\n         * @name Helper.year\n         * @private\n         * @enum   {number}\n         * @readonly\n         */\n        const year = 31536000;\n\n        /**\n         * cache for script location\n         *\n         * @name Helper.baseUri\n         * @private\n         * @enum   {string|null}\n         */\n        let baseUri = null;\n\n        /**\n         * converts a duration (in seconds) into human friendly approximation\n         *\n         * @name Helper.secondsToHuman\n         * @function\n         * @param  {number} seconds\n         * @return {Array}\n         */\n        me.secondsToHuman = function(seconds)\n        {\n            let v;\n            if (seconds < minute)\n            {\n                v = Math.floor(seconds);\n                return [v, 'second'];\n            }\n            if (seconds < hour)\n            {\n                v = Math.floor(seconds / minute);\n                return [v, 'minute'];\n            }\n            if (seconds < day)\n            {\n                v = Math.floor(seconds / hour);\n                return [v, 'hour'];\n            }\n            // If less than 2 months, display in days:\n            if (seconds < (2 * month))\n            {\n                v = Math.floor(seconds / day);\n                return [v, 'day'];\n            }\n            v = Math.floor(seconds / month);\n            return [v, 'month'];\n        };\n\n        /**\n         * converts a duration string into seconds\n         *\n         * The string is expected to be optional digits, followed by a time.\n         * Supported times are: min, hour, day, month, year, never\n         * Examples: 5min, 13hour, never\n         *\n         * @name Helper.durationToSeconds\n         * @function\n         * @param  {String} duration\n         * @return {number}\n         */\n        me.durationToSeconds = function(duration)\n        {\n            let pieces   = duration.split(/(\\D+)/),\n                factor   = pieces[0] || 0,\n                timespan = pieces[1] || pieces[0];\n            switch (timespan)\n            {\n                case 'min':\n                    return factor * minute;\n                case 'hour':\n                    return factor * hour;\n                case 'day':\n                    return factor * day;\n                case 'week':\n                    return factor * week;\n                case 'month':\n                    return factor * month;\n                case 'year':\n                    return factor * year;\n                case 'never':\n                    return 0;\n                default:\n                    return factor;\n            }\n        };\n\n        /**\n         * text range selection\n         *\n         * @see    {@link https://stackoverflow.com/questions/985272/jquery-selecting-text-in-an-element-akin-to-highlighting-with-your-mouse}\n         * @name   Helper.selectText\n         * @function\n         * @param  {HTMLElement} element\n         */\n        me.selectText = function(element)\n        {\n            let range, selection;\n\n            // MS\n            if (document.body.createTextRange) {\n                range = document.body.createTextRange();\n                range.moveToElementText(element);\n                range.select();\n            } else if (window.getSelection) {\n                selection = window.getSelection();\n                range = document.createRange();\n                range.selectNodeContents(element);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        };\n\n        /**\n         * convert URLs to clickable links in the provided element.\n         *\n         * URLs to handle:\n         * <pre>\n         *     magnet:?xt.1=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C&xt.2=urn:sha1:TXGCZQTH26NL6OUQAJJPFALHG2LTGBC7\n         *     https://example.com:8800/zero/?6f09182b8ea51997#WtLEUO5Epj9UHAV9JFs+6pUQZp13TuspAUjnF+iM+dM=\n         *     http://user:example.com@localhost:8800/zero/?6f09182b8ea51997#WtLEUO5Epj9UHAV9JFs+6pUQZp13TuspAUjnF+iM+dM=\n         * </pre>\n         *\n         * @name   Helper.urls2links\n         * @function\n         * @param  {HTMLElement} element\n         */\n        me.urls2links = function(element)\n        {\n            element.html(\n                DOMPurify.sanitize(\n                    element.html().replace(\n                        /(((https?|ftp):\\/\\/[\\w?!=&.\\/-;#@~%+*-]+(?![\\w\\s?!&.\\/;#~%\"=-]>))|((magnet):[\\w?=&.\\/-;#@~%+*-]+))/ig,\n                        '<a href=\"$1\" rel=\"nofollow noopener noreferrer\">$1</a>'\n                    ),\n                    purifyHtmlConfig\n                )\n            );\n        };\n\n        /**\n         * minimal sprintf emulation for %s and %d formats\n         *\n         * Note that this function needs the parameters in the same order as the\n         * format strings appear in the string, contrary to the original.\n         *\n         * @see    {@link https://stackoverflow.com/questions/610406/javascript-equivalent-to-printf-string-format#4795914}\n         * @name   Helper.sprintf\n         * @function\n         * @param  {string} format\n         * @param  {...*} args - one or multiple parameters injected into format string\n         * @return {string}\n         */\n        me.sprintf = function()\n        {\n            const args = Array.prototype.slice.call(arguments);\n            let format = args[0],\n                i = 1;\n            return format.replace(/%(s|d)/g, function (m) {\n                let val = args[i];\n                if (m === '%d') {\n                    val = parseFloat(val);\n                    if (isNaN(val)) {\n                        val = 0;\n                    }\n                }\n                ++i;\n                return val;\n            });\n        };\n\n        /**\n         * get value of cookie, if it was set, empty string otherwise\n         *\n         * @see    {@link http://www.w3schools.com/js/js_cookies.asp}\n         * @name   Helper.getCookie\n         * @function\n         * @param  {string} cname - may not be empty\n         * @return {string}\n         */\n        me.getCookie = function(cname) {\n            const name = cname + '=',\n                  ca   = document.cookie.split(';');\n            for (let i = 0; i < ca.length; ++i) {\n                let c = ca[i];\n                while (c.charAt(0) === ' ')\n                {\n                    c = c.substring(1);\n                }\n                if (c.indexOf(name) === 0)\n                {\n                    return c.substring(name.length, c.length);\n                }\n            }\n            return '';\n        };\n\n        /**\n         * get the current location (without search or hash part of the URL),\n         * eg. https://example.com/path/?aaaa#bbbb --> https://example.com/path/\n         *\n         * @name   Helper.baseUri\n         * @function\n         * @return {string}\n         */\n        me.baseUri = function()\n        {\n            // check for cached version\n            if (baseUri !== null) {\n                return baseUri;\n            }\n\n            baseUri = window.location.origin + window.location.pathname;\n            return baseUri;\n        };\n\n        /**\n         * wrap an object into a Paste, used for mocking in the unit tests\n         *\n         * @name   Helper.PasteFactory\n         * @function\n         * @param  {object} data\n         * @return {Paste}\n         */\n        me.PasteFactory = function(data)\n        {\n            return new Paste(data);\n        };\n\n        /**\n         * wrap an object into a Comment, used for mocking in the unit tests\n         *\n         * @name   Helper.CommentFactory\n         * @function\n         * @param  {object} data\n         * @return {Comment}\n         */\n        me.CommentFactory = function(data)\n        {\n            return new Comment(data);\n        };\n\n        /**\n         * convert all applicable characters to HTML entities\n         *\n         * @see    {@link https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html}\n         * @name   Helper.htmlEntities\n         * @function\n         * @param  {string} str\n         * @return {string} escaped HTML\n         */\n        me.htmlEntities = function(str) {\n            return String(str).replace(\n                /[&<>\"'`=\\/]/g, function(s) {\n                    return entityMap[s];\n                }\n            );\n        }\n\n        /**\n         * calculate expiration date given initial date and expiration period\n         *\n         * @name   Helper.calculateExpirationDate\n         * @function\n         * @param  {Date} initialDate - may not be empty\n         * @param  {string|number} expirationDisplayStringOrSecondsToExpire - may not be empty\n         * @return {Date}\n         */\n        me.calculateExpirationDate = function(initialDate, expirationDisplayStringOrSecondsToExpire) {\n            let expirationDate      = new Date(initialDate),\n                secondsToExpiration = expirationDisplayStringOrSecondsToExpire;\n            if (typeof expirationDisplayStringOrSecondsToExpire === 'string') {\n                secondsToExpiration = me.durationToSeconds(expirationDisplayStringOrSecondsToExpire);\n            }\n\n            if (typeof secondsToExpiration !== 'number') {\n                throw new Error('Cannot calculate expiration date.');\n            }\n            if (secondsToExpiration === 0) {\n                return null;\n            }\n\n            expirationDate = expirationDate.setUTCSeconds(expirationDate.getUTCSeconds() + secondsToExpiration);\n            return expirationDate;\n        };\n\n        /**\n         * resets state, used for unit testing\n         *\n         * @name   Helper.reset\n         * @function\n         */\n        me.reset = function()\n        {\n            baseUri = null;\n        };\n\n        return me;\n    })();\n\n    /**\n     * internationalization module\n     *\n     * @name I18n\n     * @class\n     */\n    const I18n = (function () {\n        const me = {};\n\n        /**\n         * const for string of loaded language\n         *\n         * @name I18n.languageLoadedEvent\n         * @private\n         * @prop   {string}\n         * @readonly\n         */\n        const languageLoadedEvent = 'languageLoaded';\n\n        /**\n         * supported languages, minus the built in 'en'\n         *\n         * @name I18n.supportedLanguages\n         * @private\n         * @prop   {string[]}\n         * @readonly\n         */\n        const supportedLanguages = ['bg', 'ca', 'co', 'cs', 'de', 'es', 'et', 'fr', 'he', 'hu', 'id', 'it', 'jbo', 'lt', 'no', 'nl', 'pl', 'pt', 'oc', 'ru', 'sl', 'uk', 'zh'];\n\n        /**\n         * built in language\n         *\n         * @name I18n.language\n         * @private\n         * @prop   {string|null}\n         */\n        let language = null;\n\n        /**\n         * translation cache\n         *\n         * @name I18n.translations\n         * @private\n         * @enum   {Object}\n         */\n        let translations = {};\n\n        /**\n         * translate a string, alias for I18n.translate\n         *\n         * @name   I18n._\n         * @function\n         * @param  {jQuery} $element - optional\n         * @param  {string} messageId\n         * @param  {...*} args - one or multiple parameters injected into placeholders\n         * @return {string}\n         */\n        me._ = function()\n        {\n            return me.translate.apply(this, arguments);\n        };\n\n        /**\n         * translate a string\n         *\n         * Optionally pass a jQuery element as the first parameter, to automatically\n         * let the text of this element be replaced. In case the (asynchronously\n         * loaded) language is not downloaded yet, this will make sure the string\n         * is replaced when it eventually gets loaded. Using this is both simpler\n         * and more secure, as it avoids potential XSS when inserting text.\n         * The next parameter is the message ID, matching the ones found in\n         * the translation files under the i18n directory.\n         * Any additional parameters will get inserted into the message ID in\n         * place of %s (strings) or %d (digits), applying the appropriate plural\n         * in case of digits. See also Helper.sprintf().\n         *\n         * @name   I18n.translate\n         * @function\n         * @param  {jQuery} $element - optional\n         * @param  {string} messageId\n         * @param  {...*} args - one or multiple parameters injected into placeholders\n         * @return {string}\n         */\n        me.translate = function()\n        {\n            // convert parameters to array\n            let args = Array.prototype.slice.call(arguments),\n                messageId,\n                $element = null;\n\n            // parse arguments\n            if (args[0] instanceof jQuery) {\n                // optional jQuery element as first parameter\n                $element = args[0];\n                args.shift();\n            }\n\n            // extract messageId from arguments\n            let usesPlurals = $.isArray(args[0]);\n            if (usesPlurals) {\n                // use the first plural form as messageId, otherwise the singular\n                messageId = args[0].length > 1 ? args[0][1] : args[0][0];\n            } else {\n                messageId = args[0];\n            }\n\n            if (messageId.length === 0) {\n                return messageId;\n            }\n\n            // if no translation string cannot be found (in translations object)\n            if (!translations.hasOwnProperty(messageId) || language === null) {\n                // if language is still loading and we have an elemt assigned\n                if (language === null && $element !== null) {\n                    // handle the error by attaching the language loaded event\n                    let orgArguments = arguments;\n                    $(document).on(languageLoadedEvent, function () {\n                        // re-execute this function\n                        me.translate.apply(this, orgArguments);\n                    });\n\n                    // and fall back to English for now until the real language\n                    // file is loaded\n                }\n\n                // for all other languages than English for which this behaviour\n                // is expected as it is built-in, log error\n                if (language !== null && language !== 'en') {\n                    console.error('Missing translation for: \\'' + messageId + '\\' in language ' + language);\n                    // fallback to English\n                }\n\n                // save English translation (should be the same on both sides)\n                translations[messageId] = args[0];\n            }\n\n            // lookup plural translation\n            if (usesPlurals && $.isArray(translations[messageId])) {\n                let n = parseInt(args[1] || 1, 10),\n                    key = me.getPluralForm(n),\n                    maxKey = translations[messageId].length - 1;\n                if (key > maxKey) {\n                    key = maxKey;\n                }\n                args[0] = translations[messageId][key];\n                args[1] = n;\n            } else {\n                // lookup singular translation\n                args[0] = translations[messageId];\n            }\n\n            // messageID may contain links, but should be from a trusted source (code or translation JSON files)\n            let containsLinks = args[0].indexOf('<a') !== -1;\n\n            // prevent double encoding, when we insert into a text node\n            if (containsLinks || $element === null) {\n                for (let i = 0; i < args.length; ++i) {\n                    // parameters (i > 0) may never contain HTML as they may come from untrusted parties\n                    if ((containsLinks ? i > 1 : i > 0) || !containsLinks) {\n                        args[i] = Helper.htmlEntities(args[i]);\n                    }\n                }\n            }\n            // format string\n            let output = Helper.sprintf.apply(this, args);\n\n            if (containsLinks) {\n                // only allow tags/attributes we actually use in translations\n                output = DOMPurify.sanitize(\n                    output, {\n                        ALLOWED_TAGS: ['a', 'i', 'span'],\n                        ALLOWED_ATTR: ['href', 'id']\n                    }\n                );\n            }\n\n            // if $element is given, insert translation\n            if ($element !== null) {\n                if (containsLinks) {\n                    $element.html(output);\n                } else {\n                    // text node takes care of entity encoding\n                    $element.text(output);\n                }\n                return '';\n            }\n\n            return output;\n        };\n\n        /**\n         * per language functions to use to determine the plural form\n         *\n         * @see    {@link https://localization-guide.readthedocs.org/en/latest/l10n/pluralforms.html}\n         * @name   I18n.getPluralForm\n         * @function\n         * @param  {int} n\n         * @return {int} array key\n         */\n        me.getPluralForm = function(n) {\n            switch (language)\n            {\n                case 'cs':\n                    return n === 1 ? 0 : (n >= 2 && n <=4 ? 1 : 2);\n                case 'co':\n                case 'fr':\n                case 'oc':\n                case 'zh':\n                    return n > 1 ? 1 : 0;\n                case 'he':\n                    return n === 1 ? 0 : (n === 2 ? 1 : ((n < 0 || n > 10) && (n % 10 === 0) ? 2 : 3));\n                case 'id':\n                case 'jbo':\n                    return 0;\n                case 'lt':\n                    return n % 10 === 1 && n % 100 !== 11 ? 0 : ((n % 10 >= 2 && n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n                case 'pl':\n                    return n === 1 ? 0 : (n % 10 >= 2 && n %10 <=4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n                case 'ru':\n                case 'uk':\n                    return n % 10 === 1 && n % 100 !== 11 ? 0 : (n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);\n                case 'sl':\n                    return n % 100 === 1 ? 1 : (n % 100 === 2 ? 2 : (n % 100 === 3 || n % 100 === 4 ? 3 : 0));\n                // bg, ca, de, en, es, et, hu, it, nl, no, pt\n                default:\n                    return n !== 1 ? 1 : 0;\n            }\n        };\n\n        /**\n         * load translations into cache\n         *\n         * @name   I18n.loadTranslations\n         * @function\n         */\n        me.loadTranslations = function()\n        {\n            let newLanguage = Helper.getCookie('lang');\n\n            // auto-select language based on browser settings\n            if (newLanguage.length === 0) {\n                newLanguage = (navigator.language || navigator.userLanguage || 'en').substring(0, 2);\n            }\n\n            // if language is already used skip update\n            if (newLanguage === language) {\n                return;\n            }\n\n            // if language is built-in (English) skip update\n            if (newLanguage === 'en') {\n                language = 'en';\n                return;\n            }\n\n            // if language is not supported, show error\n            if (supportedLanguages.indexOf(newLanguage) === -1) {\n                console.error('Language \\'%s\\' is not supported. Translation failed, fallback to English.', newLanguage);\n                language = 'en';\n                return;\n            }\n\n            // load strings from JSON\n            $.getJSON('i18n/' + newLanguage + '.json', function(data) {\n                language = newLanguage;\n                translations = data;\n                $(document).triggerHandler(languageLoadedEvent);\n            }).fail(function (data, textStatus, errorMsg) {\n                console.error('Language \\'%s\\' could not be loaded (%s: %s). Translation failed, fallback to English.', newLanguage, textStatus, errorMsg);\n                language = 'en';\n            });\n        };\n\n        /**\n         * resets state, used for unit testing\n         *\n         * @name   I18n.reset\n         * @function\n         */\n        me.reset = function(mockLanguage, mockTranslations)\n        {\n            language = mockLanguage || null;\n            translations = mockTranslations || {};\n        };\n\n        return me;\n    })();\n\n    /**\n     * handles everything related to en/decryption\n     *\n     * @name CryptTool\n     * @class\n     */\n    const CryptTool = (function () {\n        const me = {};\n\n        /**\n         * base58 encoder & decoder\n         *\n         * @private\n         */\n        let base58 = new baseX('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\n\n        /**\n         * convert UTF-8 string stored in a DOMString to a standard UTF-16 DOMString\n         *\n         * Iterates over the bytes of the message, converting them all hexadecimal\n         * percent encoded representations, then URI decodes them all\n         *\n         * @name   CryptTool.utf8To16\n         * @function\n         * @private\n         * @param  {string} message UTF-8 string\n         * @return {string} UTF-16 string\n         */\n        function utf8To16(message)\n        {\n            return decodeURIComponent(\n                message.split('').map(\n                    function(character)\n                    {\n                        return '%' + ('00' + character.charCodeAt(0).toString(16)).slice(-2);\n                    }\n                ).join('')\n            );\n        }\n\n        /**\n         * convert DOMString (UTF-16) to a UTF-8 string stored in a DOMString\n         *\n         * URI encodes the message, then finds the percent encoded characters\n         * and transforms these hexadecimal representation back into bytes\n         *\n         * @name   CryptTool.utf16To8\n         * @function\n         * @private\n         * @param  {string} message UTF-16 string\n         * @return {string} UTF-8 string\n         */\n        function utf16To8(message)\n        {\n            return encodeURIComponent(message).replace(\n                /%([0-9A-F]{2})/g,\n                function (match, hexCharacter)\n                {\n                    return String.fromCharCode('0x' + hexCharacter);\n                }\n            );\n        }\n\n        /**\n         * convert ArrayBuffer into a UTF-8 string\n         *\n         * Iterates over the bytes of the array, catenating them into a string\n         *\n         * @name   CryptTool.arraybufferToString\n         * @function\n         * @private\n         * @param  {ArrayBuffer} messageArray\n         * @return {string} message\n         */\n        function arraybufferToString(messageArray)\n        {\n            const array = new Uint8Array(messageArray);\n            let message = '',\n                i       = 0;\n            while(i < array.length) {\n                message += String.fromCharCode(array[i++]);\n            }\n            return message;\n        }\n\n        /**\n         * convert UTF-8 string into a Uint8Array\n         *\n         * Iterates over the bytes of the message, writing them to the array\n         *\n         * @name   CryptTool.stringToArraybuffer\n         * @function\n         * @private\n         * @param  {string} message UTF-8 string\n         * @return {Uint8Array} array\n         */\n        function stringToArraybuffer(message)\n        {\n            const messageArray = new Uint8Array(message.length);\n            for (let i = 0; i < message.length; ++i) {\n                messageArray[i] = message.charCodeAt(i);\n            }\n            return messageArray;\n        }\n\n        /**\n         * compress a string (deflate compression), returns buffer\n         *\n         * @name   CryptTool.compress\n         * @async\n         * @function\n         * @private\n         * @param  {string} message\n         * @param  {string} mode\n         * @param  {object} zlib\n         * @throws {string}\n         * @return {ArrayBuffer} data\n         */\n        async function compress(message, mode, zlib)\n        {\n            message = stringToArraybuffer(\n                utf16To8(message)\n            );\n            if (mode === 'zlib') {\n                if (typeof zlib === 'undefined') {\n                    throw 'Error compressing paste, due to missing WebAssembly support.'\n                }\n                return zlib.deflate(message).buffer;\n            }\n            return message;\n        }\n\n        /**\n         * decompress potentially base64 encoded, deflate compressed buffer, returns string\n         *\n         * @name   CryptTool.decompress\n         * @async\n         * @function\n         * @private\n         * @param  {ArrayBuffer} data\n         * @param  {string} mode\n         * @param  {object} zlib\n         * @throws {string}\n         * @return {string} message\n         */\n        async function decompress(data, mode, zlib)\n        {\n            if (mode === 'zlib' || mode === 'none') {\n                if (mode === 'zlib') {\n                    if (typeof zlib === 'undefined') {\n                        throw 'Error decompressing paste, due to missing WebAssembly support.'\n                    }\n                    data = zlib.inflate(\n                        new Uint8Array(data)\n                    ).buffer;\n                }\n                return utf8To16(\n                    arraybufferToString(data)\n                );\n            }\n            // detect presence of Base64.js, indicating legacy ZeroBin paste\n            if (typeof Base64 === 'undefined') {\n                return utf8To16(\n                    RawDeflate.inflate(\n                        utf8To16(\n                            atob(\n                                arraybufferToString(data)\n                            )\n                        )\n                    )\n                );\n            } else {\n                return Base64.btou(\n                    RawDeflate.inflate(\n                        Base64.fromBase64(\n                            arraybufferToString(data)\n                        )\n                    )\n                );\n            }\n        }\n\n        /**\n         * returns specified number of random bytes\n         *\n         * @name   CryptTool.getRandomBytes\n         * @function\n         * @private\n         * @param  {int} length number of random bytes to fetch\n         * @throws {string}\n         * @return {string} random bytes\n         */\n        function getRandomBytes(length)\n        {\n            let bytes       = '';\n            const byteArray = new Uint8Array(length);\n            window.crypto.getRandomValues(byteArray);\n            for (let i = 0; i < length; ++i) {\n                bytes += String.fromCharCode(byteArray[i]);\n            }\n            return bytes;\n        }\n\n        /**\n         * derive cryptographic key from key string and password\n         *\n         * @name   CryptTool.deriveKey\n         * @async\n         * @function\n         * @private\n         * @param  {string} key\n         * @param  {string} password\n         * @param  {array}  spec cryptographic specification\n         * @return {CryptoKey} derived key\n         */\n        async function deriveKey(key, password, spec)\n        {\n            let keyArray = stringToArraybuffer(key);\n            if (password.length > 0) {\n                // version 1 pastes did append the passwords SHA-256 hash in hex\n                if (spec[7] === 'rawdeflate') {\n                    let passwordBuffer = await window.crypto.subtle.digest(\n                        {name: 'SHA-256'},\n                        stringToArraybuffer(\n                            utf16To8(password)\n                        )\n                    ).catch(Alert.showError);\n                    password = Array.prototype.map.call(\n                        new Uint8Array(passwordBuffer),\n                        x => ('00' + x.toString(16)).slice(-2)\n                    ).join('');\n                }\n                let passwordArray = stringToArraybuffer(password),\n                    newKeyArray = new Uint8Array(keyArray.length + passwordArray.length);\n                newKeyArray.set(keyArray, 0);\n                newKeyArray.set(passwordArray, keyArray.length);\n                keyArray = newKeyArray;\n            }\n\n            // import raw key\n            const importedKey = await window.crypto.subtle.importKey(\n                'raw', // only 'raw' is allowed\n                keyArray,\n                {name: 'PBKDF2'}, // we use PBKDF2 for key derivation\n                false, // the key may not be exported\n                ['deriveKey'] // we may only use it for key derivation\n            ).catch(Alert.showError);\n\n            // derive a stronger key for use with AES\n            return window.crypto.subtle.deriveKey(\n                {\n                    name: 'PBKDF2', // we use PBKDF2 for key derivation\n                    salt: stringToArraybuffer(spec[1]), // salt used in HMAC\n                    iterations: spec[2], // amount of iterations to apply\n                    hash: {name: 'SHA-256'} // can be \"SHA-1\", \"SHA-256\", \"SHA-384\" or \"SHA-512\"\n                },\n                importedKey,\n                {\n                    name: 'AES-' + spec[6].toUpperCase(), // can be any supported AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\" or \"HMAC\")\n                    length: spec[3] // can be 128, 192 or 256\n                },\n                false, // the key may not be exported\n                ['encrypt', 'decrypt'] // we may only use it for en- and decryption\n            ).catch(Alert.showError);\n        }\n\n        /**\n         * gets crypto settings from specification and authenticated data\n         *\n         * @name   CryptTool.cryptoSettings\n         * @function\n         * @private\n         * @param  {string} adata authenticated data\n         * @param  {array}  spec cryptographic specification\n         * @return {object} crypto settings\n         */\n        function cryptoSettings(adata, spec)\n        {\n            return {\n                name: 'AES-' + spec[6].toUpperCase(), // can be any supported AES algorithm (\"AES-CTR\", \"AES-CBC\", \"AES-CMAC\", \"AES-GCM\", \"AES-CFB\", \"AES-KW\", \"ECDH\", \"DH\" or \"HMAC\")\n                iv: stringToArraybuffer(spec[0]), // the initialization vector you used to encrypt\n                additionalData: stringToArraybuffer(adata), // the addtional data you used during encryption (if any)\n                tagLength: spec[4] // the length of the tag you used to encrypt (if any)\n            };\n        }\n\n        /**\n         * compress, then encrypt message with given key and password\n         *\n         * @name   CryptTool.cipher\n         * @async\n         * @function\n         * @param  {string} key\n         * @param  {string} password\n         * @param  {string} message\n         * @param  {array}  adata\n         * @return {array}  encrypted message in base64 encoding & adata containing encryption spec\n         */\n        me.cipher = async function(key, password, message, adata)\n        {\n            let zlib = (await z);\n            // AES in Galois Counter Mode, keysize 256 bit,\n            // authentication tag 128 bit, 10000 iterations in key derivation\n            const compression = (\n                    typeof zlib === 'undefined' ?\n                    'none' : // client lacks support for WASM\n                    ($('body').data('compression') || 'zlib')\n                ),\n                spec = [\n                    getRandomBytes(16), // initialization vector\n                    getRandomBytes(8),  // salt\n                    100000,             // iterations\n                    256,                // key size\n                    128,                // tag size\n                    'aes',              // algorithm\n                    'gcm',              // algorithm mode\n                    compression         // compression\n                ], encodedSpec = [];\n            for (let i = 0; i < spec.length; ++i) {\n                encodedSpec[i] = i < 2 ? btoa(spec[i]) : spec[i];\n            }\n            if (adata.length === 0) {\n                // comment\n                adata = encodedSpec;\n            } else if (adata[0] === null) {\n                // paste\n                adata[0] = encodedSpec;\n            }\n\n            // finally, encrypt message\n            return [\n                btoa(\n                    arraybufferToString(\n                        await window.crypto.subtle.encrypt(\n                            cryptoSettings(JSON.stringify(adata), spec),\n                            await deriveKey(key, password, spec),\n                            await compress(message, compression, zlib)\n                        ).catch(Alert.showError)\n                    )\n                ),\n                adata\n            ];\n        };\n\n        /**\n         * decrypt message with key, then decompress\n         *\n         * @name   CryptTool.decipher\n         * @async\n         * @function\n         * @param  {string} key\n         * @param  {string} password\n         * @param  {string|object} data encrypted message\n         * @return {string} decrypted message, empty if decryption failed\n         */\n        me.decipher = async function(key, password, data)\n        {\n            let adataString, spec, cipherMessage, plaintext;\n            let zlib = (await z);\n            if (data instanceof Array) {\n                // version 2\n                adataString = JSON.stringify(data[1]);\n                // clone the array instead of passing the reference\n                spec = (data[1][0] instanceof Array ? data[1][0] : data[1]).slice();\n                cipherMessage = data[0];\n            } else if (typeof data === 'string') {\n                // version 1\n                let object = JSON.parse(data);\n                adataString = atob(object.adata);\n                spec = [\n                    object.iv,\n                    object.salt,\n                    object.iter,\n                    object.ks,\n                    object.ts,\n                    object.cipher,\n                    object.mode,\n                    'rawdeflate'\n                ];\n                cipherMessage = object.ct;\n            } else {\n                throw 'unsupported message format';\n            }\n            spec[0] = atob(spec[0]);\n            spec[1] = atob(spec[1]);\n            if (spec[7] === 'zlib') {\n                if (typeof zlib === 'undefined') {\n                    throw 'Error decompressing paste, due to missing WebAssembly support.'\n                }\n            }\n            try {\n                plaintext = await window.crypto.subtle.decrypt(\n                    cryptoSettings(adataString, spec),\n                    await deriveKey(key, password, spec),\n                    stringToArraybuffer(\n                        atob(cipherMessage)\n                    )\n                );\n            } catch(err) {\n                console.error(err);\n                return '';\n            }\n            try {\n                return await decompress(plaintext, spec[7], zlib);\n            } catch(err) {\n                Alert.showError(err);\n                return err;\n            }\n        };\n\n        /**\n         * returns a random symmetric key\n         *\n         * generates 256 bit long keys (8 Bits * 32) for AES with 256 bit long blocks\n         *\n         * @name   CryptTool.getSymmetricKey\n         * @function\n         * @throws {string}\n         * @return {string} raw bytes\n         */\n        me.getSymmetricKey = function()\n        {\n            return getRandomBytes(32);\n        };\n\n        /**\n         * base58 encode a DOMString (UTF-16)\n         *\n         * @name   CryptTool.base58encode\n         * @function\n         * @param  {string} input\n         * @return {string} output\n         */\n        me.base58encode = function(input)\n        {\n            return base58.encode(\n                stringToArraybuffer(input)\n            );\n        }\n\n        /**\n         * base58 decode a DOMString (UTF-16)\n         *\n         * @name   CryptTool.base58decode\n         * @function\n         * @param  {string} input\n         * @return {string} output\n         */\n        me.base58decode = function(input)\n        {\n            return arraybufferToString(\n                base58.decode(input)\n            );\n        }\n\n        return me;\n    })();\n\n    /**\n     * (Model) Data source (aka MVC)\n     *\n     * @name   Model\n     * @class\n     */\n    const Model = (function () {\n        const me = {};\n\n        let id = null,\n            pasteData = null,\n            symmetricKey = null,\n            $templates;\n\n        /**\n         * returns the expiration set in the HTML\n         *\n         * @name   Model.getExpirationDefault\n         * @function\n         * @return string\n         */\n        me.getExpirationDefault = function()\n        {\n            return $('#pasteExpiration').val();\n        };\n\n        /**\n         * returns the format set in the HTML\n         *\n         * @name   Model.getFormatDefault\n         * @function\n         * @return string\n         */\n        me.getFormatDefault = function()\n        {\n            return $('#pasteFormatter').val();\n        };\n\n        /**\n         * returns the paste data (including the cipher data)\n         *\n         * @name   Model.getPasteData\n         * @function\n         * @param {function} callback (optional) Called when data is available\n         * @param {function} useCache (optional) Whether to use the cache or\n         *                            force a data reload. Default: true\n         * @return string\n         */\n        me.getPasteData = function(callback, useCache)\n        {\n            // use cache if possible/allowed\n            if (useCache !== false && pasteData !== null) {\n                //execute callback\n                if (typeof callback === 'function') {\n                    return callback(pasteData);\n                }\n\n                // alternatively just using inline\n                return pasteData;\n            }\n\n            // reload data\n            ServerInteraction.prepare();\n            ServerInteraction.setUrl(Helper.baseUri() + '?pasteid=' + me.getPasteId());\n\n            ServerInteraction.setFailure(function (status, data) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showViewButtons();\n\n                // show error message\n                Alert.showError(ServerInteraction.parseUploadError(status, data, 'get paste data'));\n            });\n            ServerInteraction.setSuccess(function (status, data) {\n                pasteData = new Paste(data);\n\n                if (typeof callback === 'function') {\n                    return callback(pasteData);\n                }\n            });\n            ServerInteraction.run();\n        };\n\n        /**\n         * get the pastes unique identifier from the URL,\n         * eg. https://example.com/path/?c05354954c49a487#dfdsdgdgdfgdf returns c05354954c49a487\n         *\n         * @name   Model.getPasteId\n         * @function\n         * @return {string} unique identifier\n         * @throws {string}\n         */\n        me.getPasteId = function()\n        {\n            const idRegEx = /^[a-z0-9]{16}$/;\n\n            // return cached value\n            if (id !== null) {\n                return id;\n            }\n\n            // do use URL interface, if possible\n            const url = new URL(window.location);\n\n            for (const param of url.searchParams) {\n                const key = param[0];\n                const value = param[1];\n\n                if (value === '' && idRegEx.test(key)) {\n                    // safe, as the whole regex is matched\n                    id = key;\n                    return key;\n                }\n            }\n\n            if (id === null) {\n                throw 'no paste id given';\n            }\n\n            return id;\n        }\n\n        /**\n         * returns true, when the URL has a delete token and the current call was used for deleting a paste.\n         *\n         * @name   Model.hasDeleteToken\n         * @function\n         * @return {bool}\n         */\n        me.hasDeleteToken = function()\n        {\n            return window.location.search.indexOf('deletetoken') !== -1;\n        }\n\n        /**\n         * return the deciphering key stored in anchor part of the URL\n         *\n         * @name   Model.getPasteKey\n         * @function\n         * @return {string|null} key\n         * @throws {string}\n         */\n        me.getPasteKey = function()\n        {\n            if (symmetricKey === null) {\n                let newKey = window.location.hash.substring(1);\n                if (newKey === '') {\n                    throw 'no encryption key given';\n                }\n\n                // Some web 2.0 services and redirectors add data AFTER the anchor\n                // (such as &utm_source=...). We will strip any additional data.\n                let ampersandPos = newKey.indexOf('&');\n                if (ampersandPos > -1)\n                {\n                    newKey = newKey.substring(0, ampersandPos);\n                }\n\n                // version 2 uses base58, version 1 uses base64 without decoding\n                try {\n                    // base58 encode strips NULL bytes at the beginning of the\n                    // string, so we re-add them if necessary\n                    symmetricKey = CryptTool.base58decode(newKey).padStart(32, '\\u0000');\n                } catch(e) {\n                    symmetricKey = newKey;\n                }\n            }\n\n            return symmetricKey;\n        };\n\n        /**\n         * returns a jQuery copy of the HTML template\n         *\n         * @name Model.getTemplate\n         * @function\n         * @param  {string} name - the name of the template\n         * @return {jQuery}\n         */\n        me.getTemplate = function(name)\n        {\n            // find template\n            let $element = $templates.find('#' + name + 'template').clone(true);\n            // change ID to avoid collisions (one ID should really be unique)\n            return $element.prop('id', name);\n        };\n\n        /**\n         * resets state, used for unit testing\n         *\n         * @name   Model.reset\n         * @function\n         */\n        me.reset = function()\n        {\n            pasteData = $templates = id = symmetricKey = null;\n        };\n\n        /**\n         * init navigation manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Model.init\n         * @function\n         */\n        me.init = function()\n        {\n            $templates = $('#templates');\n        };\n\n        return me;\n    })();\n\n    /**\n     * Helper functions for user interface\n     *\n     * everything directly UI-related, which fits nowhere else\n     *\n     * @name   UiHelper\n     * @class\n     */\n    const UiHelper = (function () {\n        const me = {};\n\n        /**\n         * handle history (pop) state changes\n         *\n         * currently this does only handle redirects to the home page.\n         *\n         * @name   UiHelper.historyChange\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function historyChange(event)\n        {\n            let currentLocation = Helper.baseUri();\n            if (event.originalEvent.state === null && // no state object passed\n                event.target.location.href === currentLocation && // target location is home page\n                window.location.href === currentLocation // and we are not already on the home page\n            ) {\n                // redirect to home page\n                window.location.href = currentLocation;\n            }\n        }\n\n        /**\n         * reload the page\n         *\n         * This takes the user to the PrivateBin homepage.\n         *\n         * @name   UiHelper.reloadHome\n         * @function\n         */\n        me.reloadHome = function()\n        {\n            window.location.href = Helper.baseUri();\n        };\n\n        /**\n         * checks whether the element is currently visible in the viewport (so\n         * the user can actually see it)\n         *\n         * @see    {@link https://stackoverflow.com/a/40658647}\n         * @name   UiHelper.isVisible\n         * @function\n         * @param  {jQuery} $element The link hash to move to.\n         */\n        me.isVisible = function($element)\n        {\n            let elementTop     = $element.offset().top,\n                viewportTop    = $(window).scrollTop(),\n                viewportBottom = viewportTop + $(window).height();\n            return elementTop > viewportTop && elementTop < viewportBottom;\n        };\n\n        /**\n         * scrolls to a specific element\n         *\n         * @see    {@link https://stackoverflow.com/questions/4198041/jquery-smooth-scroll-to-an-anchor#answer-12714767}\n         * @name   UiHelper.scrollTo\n         * @function\n         * @param  {jQuery}           $element        The link hash to move to.\n         * @param  {(number|string)}  animationDuration passed to jQuery .animate, when set to 0 the animation is skipped\n         * @param  {string}           animationEffect   passed to jQuery .animate\n         * @param  {function}         finishedCallback  function to call after animation finished\n         */\n        me.scrollTo = function($element, animationDuration, animationEffect, finishedCallback)\n        {\n            let $body = $('html, body'),\n                margin = 50,\n                callbackCalled = false,\n                dest = 0;\n\n            // calculate destination place\n            // if it would scroll out of the screen at the bottom only scroll it as\n            // far as the screen can go\n            if ($element.offset().top > $(document).height() - $(window).height()) {\n                dest = $(document).height() - $(window).height();\n            } else {\n                dest = $element.offset().top - margin;\n            }\n            // skip animation if duration is set to 0\n            if (animationDuration === 0) {\n                window.scrollTo(0, dest);\n            } else {\n                // stop previous animation\n                $body.stop();\n                // scroll to destination\n                $body.animate({\n                    scrollTop: dest\n                }, animationDuration, animationEffect);\n            }\n\n            // as we have finished we can enable scrolling again\n            $body.queue(function (next) {\n                if (!callbackCalled) {\n                    // call user function if needed\n                    if (typeof finishedCallback !== 'undefined') {\n                        finishedCallback();\n                    }\n\n                    // prevent calling this function twice\n                    callbackCalled = true;\n                }\n                next();\n            });\n        };\n\n        /**\n         * trigger a history (pop) state change\n         *\n         * used to test the UiHelper.historyChange private function\n         *\n         * @name   UiHelper.mockHistoryChange\n         * @function\n         * @param  {string} state   (optional) state to mock\n         */\n        me.mockHistoryChange = function(state)\n        {\n            if (typeof state === 'undefined') {\n                state = null;\n            }\n            historyChange($.Event('popstate', {originalEvent: new PopStateEvent('popstate', {state: state}), target: window}));\n        };\n\n        /**\n         * initialize\n         *\n         * @name   UiHelper.init\n         * @function\n         */\n        me.init = function()\n        {\n            // update link to home page\n            $('.reloadlink').prop('href', Helper.baseUri());\n\n            $(window).on('popstate', historyChange);\n        };\n\n        return me;\n    })();\n\n    /**\n     * Alert/error manager\n     *\n     * @name   Alert\n     * @class\n     */\n    const Alert = (function () {\n        const me = {};\n\n        let $errorMessage,\n            $loadingIndicator,\n            $statusMessage,\n            $remainingTime,\n            currentIcon,\n            customHandler;\n\n        const alertType = [\n            'loading', // not in bootstrap CSS, but using a plausible value here\n            'info',    // status icon\n            'warning', // warning icon\n            'danger'   // error icon\n        ];\n\n        /**\n         * forwards a request to the i18n module and shows the element\n         *\n         * @name   Alert.handleNotification\n         * @private\n         * @function\n         * @param  {int} id - id of notification\n         * @param  {jQuery} $element - jQuery object\n         * @param  {string|array} args\n         * @param  {string|null} icon - optional, icon\n         */\n        function handleNotification(id, $element, args, icon)\n        {\n            // basic parsing/conversion of parameters\n            if (typeof icon === 'undefined') {\n                icon = null;\n            }\n            if (typeof args === 'undefined') {\n                args = null;\n            } else if (typeof args === 'string') {\n                // convert string to array if needed\n                args = [args];\n            } else if (args  instanceof Error) {\n                // extract message into array if needed\n                args = [args.message];\n            }\n\n            // pass to custom handler if defined\n            if (typeof customHandler === 'function') {\n                let handlerResult = customHandler(alertType[id], $element, args, icon);\n                if (handlerResult === true) {\n                    // if it returns true, skip own handler\n                    return;\n                }\n                if (handlerResult instanceof jQuery) {\n                    // continue processing with new element\n                    $element = handlerResult;\n                    icon = null; // icons not supported in this case\n                }\n            }\n            let $translationTarget = $element;\n\n            // handle icon, if template uses one\n            const $glyphIcon = $element.find(':first');\n            if ($glyphIcon.length) {\n                // if there is an icon, we need to provide an inner element\n                // to translate the message into, instead of the parent\n                $translationTarget = $('<span>');\n                $element.html(' ').prepend($glyphIcon).append($translationTarget);\n\n                if (icon !== null && // icon was passed\n                    icon !== currentIcon[id] // and it differs from current icon\n                ) {\n                    // remove (previous) icon\n                    $glyphIcon.removeClass(currentIcon[id]);\n\n                    // any other thing as a string (e.g. 'null') (only) removes the icon\n                    if (typeof icon === 'string') {\n                        // set new icon\n                        currentIcon[id] = 'glyphicon-' + icon;\n                        $glyphIcon.addClass(currentIcon[id]);\n                    }\n                }\n            }\n\n            // show text\n            if (args !== null) {\n                // add jQuery object to it as first parameter\n                args.unshift($translationTarget);\n                // pass it to I18n\n                I18n._.apply(this, args);\n            }\n\n            // show notification\n            $element.removeClass('hidden');\n        }\n\n        /**\n         * display a status message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showStatus\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         * @param  {string|null}  icon        optional, the icon to show,\n         *                                    default: leave previous icon\n         */\n        me.showStatus = function(message, icon)\n        {\n            handleNotification(1, $statusMessage, message, icon);\n        };\n\n        /**\n         * display a warning message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showWarning\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         * @param  {string|null}  icon        optional, the icon to show, default:\n         *                                    leave previous icon\n         */\n        me.showWarning = function(message, icon)\n        {\n            $errorMessage.find(':first')\n                         .removeClass(currentIcon[3])\n                         .addClass(currentIcon[2]);\n            handleNotification(2, $errorMessage, message, icon);\n        };\n\n        /**\n         * display an error message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showError\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         * @param  {string|null}  icon        optional, the icon to show, default:\n         *                                    leave previous icon\n         */\n        me.showError = function(message, icon)\n        {\n            handleNotification(3, $errorMessage, message, icon);\n        };\n\n        /**\n         * display remaining message\n         *\n         * This automatically passes the text to I18n for translation.\n         *\n         * @name   Alert.showRemaining\n         * @function\n         * @param  {string|array} message     string, use an array for %s/%d options\n         */\n        me.showRemaining = function(message)\n        {\n            handleNotification(1, $remainingTime, message);\n        };\n\n        /**\n         * shows a loading message, optionally with a percentage\n         *\n         * This automatically passes all texts to the i10s module.\n         *\n         * @name   Alert.showLoading\n         * @function\n         * @param  {string|array|null} message      optional, use an array for %s/%d options, default: 'Loading\u2026'\n         * @param  {string|null}       icon         optional, the icon to show, default: leave previous icon\n         */\n        me.showLoading = function(message, icon)\n        {\n            // default message text\n            if (typeof message === 'undefined') {\n                message = 'Loading\u2026';\n            }\n\n            handleNotification(0, $loadingIndicator, message, icon);\n\n            // show loading status (cursor)\n            $('body').addClass('loading');\n        };\n\n        /**\n         * hides the loading message\n         *\n         * @name   Alert.hideLoading\n         * @function\n         */\n        me.hideLoading = function()\n        {\n            $loadingIndicator.addClass('hidden');\n\n            // hide loading cursor\n            $('body').removeClass('loading');\n        };\n\n        /**\n         * hides any status/error messages\n         *\n         * This does not include the loading message.\n         *\n         * @name   Alert.hideMessages\n         * @function\n         */\n        me.hideMessages = function()\n        {\n            $statusMessage.addClass('hidden');\n            $errorMessage.addClass('hidden');\n        };\n\n        /**\n         * set a custom handler, which gets all notifications.\n         *\n         * This handler gets the following arguments:\n         * alertType (see array), $element, args, icon\n         * If it returns true, the own processing will be stopped so the message\n         * will not be displayed. Otherwise it will continue.\n         * As an aditional feature it can return q jQuery element, which will\n         * then be used to add the message there. Icons are not supported in\n         * that case and will be ignored.\n         * Pass 'null' to reset/delete the custom handler.\n         * Note that there is no notification when a message is supposed to get\n         * hidden.\n         *\n         * @name   Alert.setCustomHandler\n         * @function\n         * @param {function|null} newHandler\n         */\n        me.setCustomHandler = function(newHandler)\n        {\n            customHandler = newHandler;\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Alert.init\n         * @function\n         */\n        me.init = function()\n        {\n            // hide \"no javascript\" error message\n            $('#noscript').hide();\n\n            // not a reset, but first set of the elements\n            $errorMessage = $('#errormessage');\n            $loadingIndicator = $('#loadingindicator');\n            $statusMessage = $('#status');\n            $remainingTime = $('#remainingtime');\n\n            currentIcon = [\n                'glyphicon-time', // loading icon\n                'glyphicon-info-sign', // status icon\n                'glyphicon-warning-sign', // warning icon\n                'glyphicon-alert' // error icon\n            ];\n        };\n\n        return me;\n    })();\n\n    /**\n     * handles paste status/result\n     *\n     * @name   PasteStatus\n     * @class\n     */\n    const PasteStatus = (function () {\n        const me = {};\n\n        let $pasteSuccess,\n            $pasteUrl,\n            $remainingTime,\n            $shortenButton;\n\n        /**\n         * forward to URL shortener\n         *\n         * @name   PasteStatus.sendToShortener\n         * @private\n         * @function\n         */\n        function sendToShortener()\n        {\n            if ($shortenButton.hasClass('buttondisabled')) {\n                return;\n            }\n            $.ajax({\n                type: 'GET',\n                url: `${$shortenButton.data('shortener')}${encodeURIComponent($pasteUrl.attr('href'))}`,\n                headers: {'Accept': 'text/html, application/xhtml+xml, application/xml, application/json'},\n                processData: false,\n                timeout: 10000,\n                xhrFields: {\n                    withCredentials: false\n                },\n                success: function(response) {\n                    let responseString = response;\n                    if (typeof responseString === 'object') {\n                        responseString = JSON.stringify(responseString);\n                    }\n                    if (typeof responseString === 'string' && responseString.length > 0) {\n                        const shortUrlMatcher = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)/g;\n                        const shortUrl = (responseString.match(shortUrlMatcher) || []).sort(function(a, b) {\n                            return a.length - b.length;\n                        })[0];\n                        if (typeof shortUrl === 'string' && shortUrl.length > 0) {\n                            // we disable the button to avoid calling shortener again\n                            $shortenButton.addClass('buttondisabled');\n                            // update link\n                            $pasteUrl.text(shortUrl);\n                            $pasteUrl.prop('href', shortUrl);\n                            // we pre-select the link so that the user only has to [Ctrl]+[c] the link\n                            Helper.selectText($pasteUrl[0]);\n                            return;\n                        }\n                    }\n                    Alert.showError('Cannot parse response from URL shortener.');\n                }\n            })\n            .fail(function(data, textStatus, errorThrown) {\n                console.error(textStatus, errorThrown);\n                // we don't know why it failed, could be CORS of the external\n                // server not setup properly, in which case we follow old\n                // behavior to open it in new tab\n                window.open(\n                    `${$shortenButton.data('shortener')}${encodeURIComponent($pasteUrl.attr('href'))}`,\n                    '_blank',\n                    'noopener, noreferrer'\n                );\n            });\n        }\n\n        /**\n         * Forces opening the paste if the link does not do this automatically.\n         *\n         * This is necessary as browsers will not reload the page when it is\n         * already loaded (which is fake as it is set via history.pushState()).\n         *\n         * @name   PasteStatus.pasteLinkClick\n         * @function\n         */\n        function pasteLinkClick()\n        {\n            // check if location is (already) shown in URL bar\n            if (window.location.href === $pasteUrl.attr('href')) {\n                // if so we need to load link by reloading the current site\n                window.location.reload(true);\n            }\n        }\n\n        /**\n         * creates a notification after a successfull paste upload\n         *\n         * @name   PasteStatus.createPasteNotification\n         * @function\n         * @param  {string} url\n         * @param  {string} deleteUrl\n         */\n        me.createPasteNotification = function(url, deleteUrl)\n        {\n            I18n._(\n                $('#pastelink'),\n                'Your paste is <a id=\"pasteurl\" href=\"%s\">%s</a> <span id=\"copyhint\">(Hit [Ctrl]+[c] to copy)</span>',\n                url, url\n            );\n            // save newly created element\n            $pasteUrl = $('#pasteurl');\n            // and add click event\n            $pasteUrl.click(pasteLinkClick);\n\n            // delete link\n            $('#deletelink').html('<a href=\"' + deleteUrl + '\"></a>');\n            I18n._($('#deletelink a').first(), 'Delete data');\n\n            // enable shortener button\n            $shortenButton.removeClass('buttondisabled');\n\n            // show result\n            $pasteSuccess.removeClass('hidden');\n            // we pre-select the link so that the user only has to [Ctrl]+[c] the link\n            Helper.selectText($pasteUrl[0]);\n        };\n\n        /**\n         * shows the remaining time\n         *\n         * @name PasteStatus.showRemainingTime\n         * @function\n         * @param {Paste} paste\n         */\n        me.showRemainingTime = function(paste)\n        {\n            if (paste.isBurnAfterReadingEnabled()) {\n                // display paste \"for your eyes only\" if it is deleted\n\n                // the paste has been deleted when the JSON with the ciphertext\n                // has been downloaded\n\n                Alert.showRemaining('FOR YOUR EYES ONLY. Don\\'t close this window, this message can\\'t be displayed again.');\n                $remainingTime.addClass('foryoureyesonly');\n            } else if (paste.getTimeToLive() > 0) {\n                // display paste expiration\n                let expiration = Helper.secondsToHuman(paste.getTimeToLive()),\n                    expirationLabel = [\n                        'This document will expire in %d ' + expiration[1] + '.',\n                        'This document will expire in %d ' + expiration[1] + 's.'\n                    ];\n\n                Alert.showRemaining([expirationLabel, expiration[0]]);\n                $remainingTime.removeClass('foryoureyesonly');\n            } else {\n                // never expires\n                return;\n            }\n\n            // in the end, display notification\n            $remainingTime.removeClass('hidden');\n        };\n\n        /**\n         * hides the remaining time and successful upload notification\n         *\n         * @name PasteStatus.hideMessages\n         * @function\n         */\n        me.hideMessages = function()\n        {\n            $remainingTime.addClass('hidden');\n            $pasteSuccess.addClass('hidden');\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   PasteStatus.init\n         * @function\n         */\n        me.init = function()\n        {\n            $pasteSuccess = $('#pastesuccess');\n            // $pasteUrl is saved in me.createPasteNotification() after creation\n            $remainingTime = $('#remainingtime');\n            $shortenButton = $('#shortenbutton');\n\n            // bind elements\n            $shortenButton.click(sendToShortener);\n        };\n\n        return me;\n    })();\n\n    /**\n     * password prompt\n     *\n     * @name Prompt\n     * @class\n     */\n    const Prompt = (function () {\n        const me = {};\n\n        let $passwordDecrypt,\n            $passwordForm,\n            $passwordModal,\n            password = '';\n\n        /**\n         * submit a password in the modal dialog\n         *\n         * @name Prompt.submitPasswordModal\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function submitPasswordModal(event)\n        {\n            event.preventDefault();\n\n            // get input\n            password = $passwordDecrypt.val();\n\n            // hide modal\n            $passwordModal.modal('hide');\n\n            PasteDecrypter.run();\n        }\n\n        /**\n         * ask the user for the password and set it\n         *\n         * @name Prompt.requestPassword\n         * @function\n         */\n        me.requestPassword = function()\n        {\n            // show new bootstrap method (if available)\n            if ($passwordModal.length !== 0) {\n                $passwordModal.modal({\n                    backdrop: 'static',\n                    keyboard: false\n                });\n                return;\n            }\n\n            // fallback to old method for page template\n            password = prompt(I18n._('Please enter the password for this paste:'), '');\n            if (password === null) {\n                throw 'password prompt canceled';\n            }\n            if (password.length === 0) {\n                // recurse\u2026\n                return me.requestPassword();\n            }\n            PasteDecrypter.run();\n        };\n\n        /**\n         * get the cached password\n         *\n         * If you do not get a password with this function\n         * (returns an empty string), use requestPassword.\n         *\n         * @name   Prompt.getPassword\n         * @function\n         * @return {string}\n         */\n        me.getPassword = function()\n        {\n            return password;\n        };\n\n        /**\n         * resets the password to an empty string\n         *\n         * @name   Prompt.reset\n         * @function\n         */\n        me.reset = function()\n        {\n            // reset internal\n            password = '';\n\n            // and also reset UI\n            $passwordDecrypt.val('');\n        }\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Prompt.init\n         * @function\n         */\n        me.init = function()\n        {\n            $passwordDecrypt = $('#passworddecrypt');\n            $passwordForm = $('#passwordform');\n            $passwordModal = $('#passwordmodal');\n\n            // bind events\n\n            // focus password input when it is shown\n            $passwordModal.on('shown.bs.Model', function () {\n                $passwordDecrypt.focus();\n            });\n            // handle Model password submission\n            $passwordForm.submit(submitPasswordModal);\n        };\n\n        return me;\n    })();\n\n    /**\n     * Manage paste/message input, and preview tab\n     *\n     * Note that the actual preview is handled by PasteViewer.\n     *\n     * @name   Editor\n     * @class\n     */\n    const Editor = (function () {\n        const me = {};\n\n        let $editorTabs,\n            $messageEdit,\n            $messagePreview,\n            $message,\n            isPreview = false;\n\n        /**\n         * support input of tab character\n         *\n         * @name   Editor.supportTabs\n         * @function\n         * @param  {Event} event\n         * @this $message (but not used, so it is jQuery-free, possibly faster)\n         */\n        function supportTabs(event)\n        {\n            const keyCode = event.keyCode || event.which;\n            // tab was pressed\n            if (keyCode === 9) {\n                // get caret position & selection\n                const val   = this.value,\n                      start = this.selectionStart,\n                      end   = this.selectionEnd;\n                // set textarea value to: text before caret + tab + text after caret\n                this.value = val.substring(0, start) + '\\t' + val.substring(end);\n                // put caret at right position again\n                this.selectionStart = this.selectionEnd = start + 1;\n                // prevent the textarea to lose focus\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * view the Editor tab\n         *\n         * @name   Editor.viewEditor\n         * @function\n         * @param  {Event} event - optional\n         */\n        function viewEditor(event)\n        {\n            // toggle buttons\n            $messageEdit.addClass('active');\n            $messagePreview.removeClass('active');\n\n            $('#messageedit').attr('aria-selected','true');\n            $('#messagepreview').attr('aria-selected','false');\n\n            PasteViewer.hide();\n\n            // reshow input\n            $message.removeClass('hidden');\n\n            me.focusInput();\n\n            // finish\n            isPreview = false;\n\n            // prevent jumping of page to top\n            if (typeof event !== 'undefined') {\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * view the preview tab\n         *\n         * @name   Editor.viewPreview\n         * @function\n         * @param  {Event} event\n         */\n        function viewPreview(event)\n        {\n            // toggle buttons\n            $messageEdit.removeClass('active');\n            $messagePreview.addClass('active');\n\n            $('#messageedit').attr('aria-selected','false');\n            $('#messagepreview').attr('aria-selected','true');\n\n            // hide input as now preview is shown\n            $message.addClass('hidden');\n\n            // show preview\n            PasteViewer.setText($message.val());\n            if (AttachmentViewer.hasAttachmentData()) {\n                const attachment = AttachmentViewer.getAttachment();\n                AttachmentViewer.handleBlobAttachmentPreview(\n                    AttachmentViewer.getAttachmentPreview(),\n                    attachment[0], attachment[1]\n                );\n            }\n            PasteViewer.run();\n\n            // finish\n            isPreview = true;\n\n            // prevent jumping of page to top\n            if (typeof event !== 'undefined') {\n                event.preventDefault();\n            }\n        }\n\n        /**\n         * get the state of the preview\n         *\n         * @name   Editor.isPreview\n         * @function\n         */\n        me.isPreview = function()\n        {\n            return isPreview;\n        };\n\n        /**\n         * reset the Editor view\n         *\n         * @name   Editor.resetInput\n         * @function\n         */\n        me.resetInput = function()\n        {\n            // go back to input\n            if (isPreview) {\n                viewEditor();\n            }\n\n            // clear content\n            $message.val('');\n        };\n\n        /**\n         * shows the Editor\n         *\n         * @name   Editor.show\n         * @function\n         */\n        me.show = function()\n        {\n            $message.removeClass('hidden');\n            $editorTabs.removeClass('hidden');\n        };\n\n        /**\n         * hides the Editor\n         *\n         * @name   Editor.hide\n         * @function\n         */\n        me.hide = function()\n        {\n            $message.addClass('hidden');\n            $editorTabs.addClass('hidden');\n        };\n\n        /**\n         * focuses the message input\n         *\n         * @name   Editor.focusInput\n         * @function\n         */\n        me.focusInput = function()\n        {\n            $message.focus();\n        };\n\n        /**\n         * sets a new text\n         *\n         * @name   Editor.setText\n         * @function\n         * @param {string} newText\n         */\n        me.setText = function(newText)\n        {\n            $message.val(newText);\n        };\n\n        /**\n         * returns the current text\n         *\n         * @name   Editor.getText\n         * @function\n         * @return {string}\n         */\n        me.getText = function()\n        {\n            return $message.val();\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   Editor.init\n         * @function\n         */\n        me.init = function()\n        {\n            $editorTabs = $('#editorTabs');\n            $message = $('#message');\n\n            // bind events\n            $message.keydown(supportTabs);\n\n            // bind click events to tab switchers (a), but save parent of them\n            // (li)\n            $messageEdit = $('#messageedit').click(viewEditor).parent();\n            $messagePreview = $('#messagepreview').click(viewPreview).parent();\n        };\n\n        return me;\n    })();\n\n    /**\n     * (view) Parse and show paste.\n     *\n     * @name   PasteViewer\n     * @class\n     */\n    const PasteViewer = (function () {\n        const me = {};\n\n        let $placeholder,\n            $prettyMessage,\n            $prettyPrint,\n            $plainText,\n            text,\n            format = 'plaintext',\n            isDisplayed = false,\n            isChanged = true; // by default true as nothing was parsed yet\n\n        /**\n         * apply the set format on paste and displays it\n         *\n         * @name   PasteViewer.parsePaste\n         * @private\n         * @function\n         */\n        function parsePaste()\n        {\n            // skip parsing if no text is given\n            if (text === '') {\n                return;\n            }\n\n            if (format === 'markdown') {\n                const converter = new showdown.Converter({\n                    strikethrough: true,\n                    tables: true,\n                    tablesHeaderId: true,\n                    simplifiedAutoLink: true,\n                    excludeTrailingPunctuationFromURLs: true\n                });\n                // let showdown convert the HTML and sanitize HTML *afterwards*!\n                $plainText.html(\n                    DOMPurify.sanitize(\n                        converter.makeHtml(text),\n                        purifyHtmlConfig\n                    )\n                );\n                // add table classes from bootstrap css\n                $plainText.find('table').addClass('table-condensed table-bordered');\n            } else {\n                if (format === 'syntaxhighlighting') {\n                    // yes, this is really needed to initialize the environment\n                    if (typeof prettyPrint === 'function')\n                    {\n                        prettyPrint();\n                    }\n\n                    $prettyPrint.html(\n                        prettyPrintOne(\n                            Helper.htmlEntities(text), null, true\n                        )\n                    );\n                } else {\n                    // = 'plaintext'\n                    $prettyPrint.text(text);\n                }\n                Helper.urls2links($prettyPrint);\n                $prettyPrint.css('white-space', 'pre-wrap');\n                $prettyPrint.css('word-break', 'normal');\n                $prettyPrint.removeClass('prettyprint');\n            }\n        }\n\n        /**\n         * displays the paste\n         *\n         * @name   PasteViewer.showPaste\n         * @private\n         * @function\n         */\n        function showPaste()\n        {\n            // instead of \"nothing\" better display a placeholder\n            if (text === '') {\n                $placeholder.removeClass('hidden');\n                return;\n            }\n            // otherwise hide the placeholder\n            $placeholder.addClass('hidden');\n\n            switch (format) {\n                case 'markdown':\n                    $plainText.removeClass('hidden');\n                    $prettyMessage.addClass('hidden');\n                    break;\n                default:\n                    $plainText.addClass('hidden');\n                    $prettyMessage.removeClass('hidden');\n                    break;\n            }\n        }\n\n        /**\n         * sets the format in which the text is shown\n         *\n         * @name   PasteViewer.setFormat\n         * @function\n         * @param {string} newFormat the new format\n         */\n        me.setFormat = function(newFormat)\n        {\n            // skip if there is no update\n            if (format === newFormat) {\n                return;\n            }\n\n            // needs to update display too, if we switch from or to Markdown\n            if (format === 'markdown' || newFormat === 'markdown') {\n                isDisplayed = false;\n            }\n\n            format = newFormat;\n            isChanged = true;\n        };\n\n        /**\n         * returns the current format\n         *\n         * @name   PasteViewer.getFormat\n         * @function\n         * @return {string}\n         */\n        me.getFormat = function()\n        {\n            return format;\n        };\n\n        /**\n         * returns whether the current view is pretty printed\n         *\n         * @name   PasteViewer.isPrettyPrinted\n         * @function\n         * @return {bool}\n         */\n        me.isPrettyPrinted = function()\n        {\n            return $prettyPrint.hasClass('prettyprinted');\n        };\n\n        /**\n         * sets the text to show\n         *\n         * @name   PasteViewer.setText\n         * @function\n         * @param {string} newText the text to show\n         */\n        me.setText = function(newText)\n        {\n            if (text !== newText) {\n                text = newText;\n                isChanged = true;\n            }\n        };\n\n        /**\n         * gets the current cached text\n         *\n         * @name   PasteViewer.getText\n         * @function\n         * @return {string}\n         */\n        me.getText = function()\n        {\n            return text;\n        };\n\n        /**\n         * show/update the parsed text (preview)\n         *\n         * @name   PasteViewer.run\n         * @function\n         */\n        me.run = function()\n        {\n            if (isChanged) {\n                parsePaste();\n                isChanged = false;\n            }\n\n            if (!isDisplayed) {\n                showPaste();\n                isDisplayed = true;\n            }\n        };\n\n        /**\n         * hide parsed text (preview)\n         *\n         * @name   PasteViewer.hide\n         * @function\n         */\n        me.hide = function()\n        {\n            if (!isDisplayed) {\n                return;\n            }\n\n            $plainText.addClass('hidden');\n            $prettyMessage.addClass('hidden');\n            $placeholder.addClass('hidden');\n            AttachmentViewer.hideAttachmentPreview();\n\n            isDisplayed = false;\n        };\n\n        /**\n         * init status manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   PasteViewer.init\n         * @function\n         */\n        me.init = function()\n        {\n            $placeholder = $('#placeholder');\n            $plainText = $('#plaintext');\n            $prettyMessage = $('#prettymessage');\n            $prettyPrint = $('#prettyprint');\n\n            // get default option from template/HTML or fall back to set value\n            format = Model.getFormatDefault() || format;\n            text = '';\n            isDisplayed = false;\n            isChanged = true;\n        };\n\n        return me;\n    })();\n\n    /**\n     * (view) Show attachment and preview if possible\n     *\n     * @name   AttachmentViewer\n     * @class\n     */\n    const AttachmentViewer = (function () {\n        const me = {};\n\n        let $attachmentLink,\n            $attachmentPreview,\n            $attachment,\n            attachmentData,\n            file,\n            $fileInput,\n            $dragAndDropFileName,\n            attachmentHasPreview = false,\n            $dropzone;\n\n        /**\n         * get blob URL from string data and mime type\n         *\n         * @name   AttachmentViewer.getBlobUrl\n         * @private\n         * @function\n         * @param {string} data - raw data of attachment\n         * @param {string} data - mime type of attachment\n         * @return {string} objectURL\n         */\n         function getBlobUrl(data, mimeType)\n         {\n            // Transform into a Blob\n            const buf = new Uint8Array(data.length);\n            for (let i = 0; i < data.length; ++i) {\n                buf[i] = data.charCodeAt(i);\n            }\n            const blob = new window.Blob(\n                [buf],\n                {\n                    type: mimeType\n                }\n            );\n\n            // Get Blob URL\n            return window.URL.createObjectURL(blob);\n         }\n\n         /**\n         * sets the attachment but does not yet show it\n         *\n         * @name   AttachmentViewer.setAttachment\n         * @function\n         * @param {string} attachmentData - base64-encoded data of file\n         * @param {string} fileName - optional, file name\n         */\n        me.setAttachment = function(attachmentData, fileName)\n        {\n            // data URI format: data:[<mimeType>][;base64],<data>\n\n            // position in data URI string of where data begins\n            const base64Start = attachmentData.indexOf(',') + 1;\n            // position in data URI string of where mimeType ends\n            const mimeTypeEnd = attachmentData.indexOf(';');\n\n            // extract mimeType\n            const mimeType = attachmentData.substring(5, mimeTypeEnd);\n            // extract data and convert to binary\n            const rawData = attachmentData.substring(base64Start);\n            const decodedData = rawData.length > 0 ? atob(rawData) : '';\n\n            let blobUrl = getBlobUrl(decodedData, mimeType);\n            $attachmentLink.attr('href', blobUrl);\n\n            if (typeof fileName !== 'undefined') {\n                $attachmentLink.attr('download', fileName);\n            }\n\n            // sanitize SVG preview\n            // prevents executing embedded scripts when CSP is not set and user\n            // right-clicks/long-taps and opens the SVG in a new tab - prevented\n            // in the preview by use of an img tag, which disables scripts, too\n            if (mimeType.match(/image\\/svg/i)) {\n                const sanitizedData = DOMPurify.sanitize(\n                    decodedData,\n                    purifySvgConfig\n                );\n                blobUrl = getBlobUrl(sanitizedData, mimeType);\n            }\n\n            me.handleBlobAttachmentPreview($attachmentPreview, blobUrl, mimeType);\n        };\n\n        /**\n         * displays the attachment\n         *\n         * @name AttachmentViewer.showAttachment\n         * @function\n         */\n        me.showAttachment = function()\n        {\n            $attachment.removeClass('hidden');\n\n            if (attachmentHasPreview) {\n                $attachmentPreview.removeClass('hidden');\n            }\n        };\n\n        /**\n         * removes the attachment\n         *\n         * This automatically hides the attachment containers too, to\n         * prevent an inconsistent display.\n         *\n         * @name AttachmentViewer.removeAttachment\n         * @function\n         */\n        me.removeAttachment = function()\n        {\n            if (!$attachment.length) {\n                return;\n            }\n            me.hideAttachment();\n            me.hideAttachmentPreview();\n            $attachmentLink.removeAttr('href');\n            $attachmentLink.removeAttr('download');\n            $attachmentLink.off('click');\n            $attachmentPreview.html('');\n            $dragAndDropFileName.text('');\n\n            AttachmentViewer.removeAttachmentData();\n        };\n\n        /**\n         * removes the attachment data\n         *\n         * This removes the data, which would be uploaded otherwise.\n         *\n         * @name AttachmentViewer.removeAttachmentData\n         * @function\n         */\n        me.removeAttachmentData = function()\n        {\n            file = undefined;\n            attachmentData = undefined;\n        };\n\n        /**\n         * Cleares the drag & drop data.\n         *\n         * @name AttachmentViewer.clearDragAndDrop\n         * @function\n         */\n        me.clearDragAndDrop = function()\n        {\n            $dragAndDropFileName.text('');\n        };\n\n        /**\n         * hides the attachment\n         *\n         * This will not hide the preview (see AttachmentViewer.hideAttachmentPreview\n         * for that) nor will it hide the attachment link if it was moved somewhere\n         * else (see AttachmentViewer.moveAttachmentTo).\n         *\n         * @name AttachmentViewer.hideAttachment\n         * @function\n         */\n        me.hideAttachment = function()\n        {\n            $attachment.addClass('hidden');\n        };\n\n        /**\n         * hides the attachment preview\n         *\n         * @name AttachmentViewer.hideAttachmentPreview\n         * @function\n         */\n        me.hideAttachmentPreview = function()\n        {\n            if ($attachmentPreview) {\n                $attachmentPreview.addClass('hidden');\n            }\n        };\n\n        /**\n         * checks if there is an attachment displayed\n         *\n         * @name   AttachmentViewer.hasAttachment\n         * @function\n         */\n        me.hasAttachment = function()\n        {\n            if (!$attachment.length) {\n                return false;\n            }\n            const link = $attachmentLink.prop('href');\n            return (typeof link !== 'undefined' && link !== '');\n        };\n\n        /**\n         * checks if there is attachment data (for preview!) available\n         *\n         * It returns true, when there is data that needs to be encrypted.\n         *\n         * @name   AttachmentViewer.hasAttachmentData\n         * @function\n         */\n        me.hasAttachmentData = function()\n        {\n            if ($attachment.length) {\n                return true;\n            }\n            return false;\n        };\n\n        /**\n         * return the attachment\n         *\n         * @name   AttachmentViewer.getAttachment\n         * @function\n         * @returns {array}\n         */\n        me.getAttachment = function()\n        {\n            return [\n                $attachmentLink.prop('href'),\n                $attachmentLink.prop('download')\n            ];\n        };\n\n        /**\n         * moves the attachment link to another element\n         *\n         * It is advisable to hide the attachment afterwards (AttachmentViewer.hideAttachment)\n         *\n         * @name   AttachmentViewer.moveAttachmentTo\n         * @function\n         * @param {jQuery} $element - the wrapper/container element where this should be moved to\n         * @param {string} label - the text to show (%s will be replaced with the file name), will automatically be translated\n         */\n        me.moveAttachmentTo = function($element, label)\n        {\n            // move elemement to new place\n            $attachmentLink.appendTo($element);\n\n            // update text - ensuring no HTML is inserted into the text node\n            I18n._($attachmentLink, label, $attachmentLink.attr('download'));\n        };\n\n        /**\n         * read file data as data URL using the FileReader API\n         *\n         * @name   AttachmentViewer.readFileData\n         * @private\n         * @function\n         * @param {object} loadedFile (optional) loaded file object\n         * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/FileReader#readAsDataURL()}\n         */\n        function readFileData(loadedFile) {\n            if (typeof FileReader === 'undefined') {\n                // revert loading status\u2026\n                me.hideAttachment();\n                me.hideAttachmentPreview();\n                Alert.showWarning('Your browser does not support uploading encrypted files. Please use a newer browser.');\n                return;\n            }\n\n            const fileReader = new FileReader();\n            if (loadedFile === undefined) {\n                loadedFile = $fileInput[0].files[0];\n                $dragAndDropFileName.text('');\n            } else {\n                $dragAndDropFileName.text(loadedFile.name);\n            }\n\n            if (typeof loadedFile !== 'undefined') {\n                file = loadedFile;\n                fileReader.onload = function (event) {\n                    const dataURL = event.target.result;\n                    attachmentData = dataURL;\n\n                    if (Editor.isPreview()) {\n                        me.handleAttachmentPreview($attachmentPreview, dataURL);\n                        $attachmentPreview.removeClass('hidden');\n                    }\n\n                    TopNav.highlightFileupload();\n                };\n                fileReader.readAsDataURL(loadedFile);\n            } else {\n                me.removeAttachmentData();\n            }\n        }\n\n        /**\n         * handle the preview of files decoded to blob that can either be an image, video, audio or pdf element\n         *\n         * @name   AttachmentViewer.handleBlobAttachmentPreview\n         * @function\n         * @argument {jQuery} $targetElement element where the preview should be appended\n         * @argument {string} file as a blob URL\n         * @argument {string} mime type\n         */\n        me.handleBlobAttachmentPreview = function ($targetElement, blobUrl, mimeType) {\n            if (blobUrl) {\n                attachmentHasPreview = true;\n                if (mimeType.match(/image\\//i)) {\n                    $targetElement.html(\n                        $(document.createElement('img'))\n                            .attr('src', blobUrl)\n                            .attr('class', 'img-thumbnail')\n                    );\n                } else if (mimeType.match(/video\\//i)) {\n                    $targetElement.html(\n                        $(document.createElement('video'))\n                            .attr('controls', 'true')\n                            .attr('autoplay', 'true')\n                            .attr('class', 'img-thumbnail')\n\n                            .append($(document.createElement('source'))\n                            .attr('type', mimeType)\n                            .attr('src', blobUrl))\n                    );\n                } else if (mimeType.match(/audio\\//i)) {\n                    $targetElement.html(\n                        $(document.createElement('audio'))\n                            .attr('controls', 'true')\n                            .attr('autoplay', 'true')\n\n                            .append($(document.createElement('source'))\n                            .attr('type', mimeType)\n                            .attr('src', blobUrl))\n                    );\n                } else if (mimeType.match(/\\/pdf/i)) {\n                    // Fallback for browsers, that don't support the vh unit\n                    const clientHeight = $(window).height();\n\n                    $targetElement.html(\n                        $(document.createElement('embed'))\n                            .attr('src', blobUrl)\n                            .attr('type', 'application/pdf')\n                            .attr('class', 'pdfPreview')\n                            .css('height', clientHeight)\n                    );\n                } else {\n                    attachmentHasPreview = false;\n                }\n            }\n        };\n\n        /**\n         * attaches the file attachment drag & drop handler to the page\n         *\n         * @name   AttachmentViewer.addDragDropHandler\n         * @private\n         * @function\n         */\n        function addDragDropHandler() {\n            if (typeof $fileInput === 'undefined' || $fileInput.length === 0) {\n                return;\n            }\n\n            const handleDragEnterOrOver = function(event) {\n                event.stopPropagation();\n                event.preventDefault();\n                return false;\n            };\n\n            const handleDrop = function(event) {\n                const evt = event.originalEvent;\n                evt.stopPropagation();\n                evt.preventDefault();\n\n                if (TopNav.isAttachmentReadonly()) {\n                    return false;\n                }\n\n                if ($fileInput) {\n                    const file = evt.dataTransfer.files[0];\n                    //Clear the file input:\n                    $fileInput.wrap('<form>').closest('form').get(0).reset();\n                    $fileInput.unwrap();\n                    //Only works in Chrome:\n                    //fileInput[0].files = e.dataTransfer.files;\n\n                    readFileData(file);\n                }\n            };\n\n            $(document).draghover().on({\n                'draghoverstart': function(e) {\n                    if (TopNav.isAttachmentReadonly()) {\n                        e.stopPropagation();\n                        e.preventDefault();\n                        return false;\n                    }\n                    // show dropzone to indicate drop support\n                    $dropzone.removeClass('hidden');\n                },\n                'draghoverend': function() {\n                    $dropzone.addClass('hidden');\n                }\n            });\n\n            $(document).on('drop', handleDrop);\n            $(document).on('dragenter dragover', handleDragEnterOrOver);\n\n            $fileInput.on('change', function () {\n                readFileData();\n            });\n        }\n\n        /**\n         * attaches the clipboard attachment handler to the page\n         *\n         * @name   AttachmentViewer.addClipboardEventHandler\n         * @private\n         * @function\n         */\n        function addClipboardEventHandler() {\n            $(document).on('paste', function (event) {\n                const items = (event.clipboardData || event.originalEvent.clipboardData).items;\n                const lastItem = items[items.length - 1];\n                if (lastItem.kind === 'file') {\n                    if (TopNav.isAttachmentReadonly()) {\n                        event.stopPropagation();\n                        event.preventDefault();\n                        return false;\n                    } else {\n                        readFileData(lastItem.getAsFile());\n                    }\n                }\n            });\n        }\n\n\n        /**\n         * getter for attachment data\n         *\n         * @name   AttachmentViewer.getAttachmentData\n         * @function\n         * @return {jQuery}\n         */\n        me.getAttachmentData = function () {\n            return attachmentData;\n        };\n\n        /**\n         * getter for attachment link\n         *\n         * @name   AttachmentViewer.getAttachmentLink\n         * @function\n         * @return {jQuery}\n         */\n        me.getAttachmentLink = function () {\n            return $attachmentLink;\n        };\n\n        /**\n         * getter for attachment preview\n         *\n         * @name   AttachmentViewer.getAttachmentPreview\n         * @function\n         * @return {jQuery}\n         */\n        me.getAttachmentPreview = function () {\n            return $attachmentPreview;\n        };\n\n        /**\n         * getter for file data, returns the file contents\n         *\n         * @name   AttachmentViewer.getFile\n         * @function\n         * @return {string}\n         */\n        me.getFile = function () {\n            return file;\n        };\n\n        /**\n         * initiate\n         *\n         * preloads jQuery elements\n         *\n         * @name   AttachmentViewer.init\n         * @function\n         */\n        me.init = function()\n        {\n            $attachment = $('#attachment');\n            $dragAndDropFileName = $('#dragAndDropFileName');\n            $dropzone = $('#dropzone');\n            $attachmentLink = $('#attachment a') || $('<a>');\n            if($attachment.length) {\n                $attachmentPreview = $('#attachmentPreview');\n\n                $fileInput = $('#file');\n                addDragDropHandler();\n                addClipboardEventHandler();\n            }\n        }\n\n        return me;\n    })();\n\n    /**\n     * (view) Shows discussion thread and handles replies\n     *\n     * @name   DiscussionViewer\n     * @class\n     */\n    const DiscussionViewer = (function () {\n        const me = {};\n\n        let $commentTail,\n            $discussion,\n            $reply,\n            $replyMessage,\n            $replyNickname,\n            $replyStatus,\n            $commentContainer,\n            replyCommentId;\n\n        /**\n         * initializes the templates\n         *\n         * @name   DiscussionViewer.initTemplates\n         * @private\n         * @function\n         */\n        function initTemplates()\n        {\n            $reply = Model.getTemplate('reply');\n            $replyMessage = $reply.find('#replymessage');\n            $replyNickname = $reply.find('#nickname');\n            $replyStatus = $reply.find('#replystatus');\n\n            // cache jQuery elements\n            $commentTail = Model.getTemplate('commenttail');\n        }\n\n        /**\n         * open the comment entry when clicking the \"Reply\" button of a comment\n         *\n         * @name   DiscussionViewer.openReply\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function openReply(event)\n        {\n            const $source = $(event.target);\n\n            // clear input\n            $replyMessage.val('');\n            $replyNickname.val('');\n\n            // get comment id from source element\n            replyCommentId = $source.parent().prop('id').split('_')[1];\n\n            // move to correct position\n            $source.after($reply);\n\n            // show\n            $reply.removeClass('hidden');\n            $replyMessage.focus();\n\n            event.preventDefault();\n        }\n\n        /**\n         * custom handler for displaying notifications in own status message area\n         *\n         * @name   DiscussionViewer.handleNotification\n         * @function\n         * @param  {string} alertType\n         * @return {bool|jQuery}\n         */\n        me.handleNotification = function(alertType)\n        {\n            // ignore loading messages\n            if (alertType === 'loading') {\n                return false;\n            }\n\n            if (alertType === 'danger') {\n                $replyStatus.removeClass('alert-info');\n                $replyStatus.addClass('alert-danger');\n                $replyStatus.find(':first').removeClass('glyphicon-alert');\n                $replyStatus.find(':first').addClass('glyphicon-info-sign');\n            } else {\n                $replyStatus.removeClass('alert-danger');\n                $replyStatus.addClass('alert-info');\n                $replyStatus.find(':first').removeClass('glyphicon-info-sign');\n                $replyStatus.find(':first').addClass('glyphicon-alert');\n            }\n\n            return $replyStatus;\n        };\n\n        /**\n         * adds another comment\n         *\n         * @name   DiscussionViewer.addComment\n         * @function\n         * @param {Comment} comment\n         * @param {string} commentText\n         * @param {string} nickname\n         */\n        me.addComment = function(comment, commentText, nickname)\n        {\n            if (commentText === '') {\n                commentText = 'comment decryption failed';\n            }\n\n            // create new comment based on template\n            const $commentEntry = Model.getTemplate('comment');\n            $commentEntry.prop('id', 'comment_' + comment.id);\n            const $commentEntryData = $commentEntry.find('div.commentdata');\n\n            // set & parse text\n            $commentEntryData.text(commentText);\n            Helper.urls2links($commentEntryData);\n\n            // set nickname\n            if (nickname.length > 0) {\n                $commentEntry.find('span.nickname').text(nickname);\n            } else {\n                $commentEntry.find('span.nickname').html('<i></i>');\n                I18n._($commentEntry.find('span.nickname i'), 'Anonymous');\n            }\n\n            // set date\n            $commentEntry.find('span.commentdate')\n                      .text(' (' + (new Date(comment.getCreated() * 1000).toLocaleString()) + ')')\n                      .attr('title', 'CommentID: ' + comment.id);\n\n            // if an avatar is available, display it\n            const icon = comment.getIcon();\n            if (icon) {\n                $commentEntry.find('span.nickname')\n                             .before(\n                                '<img src=\"' + icon + '\" class=\"vizhash\" /> '\n                             );\n                $(document).on('languageLoaded', function () {\n                    $commentEntry.find('img.vizhash')\n                                 .prop('title', I18n._('Avatar generated from IP address'));\n                });\n            }\n\n            // starting point (default value/fallback)\n            let $place = $commentContainer;\n\n            // if parent comment exists\n            const $parentComment = $('#comment_' + comment.parentid);\n            if ($parentComment.length) {\n                // use parent as position for new comment, so it is shifted\n                // to the right\n                $place = $parentComment;\n            }\n\n            // finally append comment\n            $place.append($commentEntry);\n        };\n\n        /**\n         * finishes the discussion area after last comment\n         *\n         * @name   DiscussionViewer.finishDiscussion\n         * @function\n         */\n        me.finishDiscussion = function()\n        {\n            // add 'add new comment' area\n            $commentContainer.append($commentTail);\n\n            // show discussions\n            $discussion.removeClass('hidden');\n        };\n\n        /**\n         * removes the old discussion and prepares everything for creating a new\n         * one.\n         *\n         * @name   DiscussionViewer.prepareNewDiscussion\n         * @function\n         */\n        me.prepareNewDiscussion = function()\n        {\n            $commentContainer.html('');\n            $discussion.addClass('hidden');\n\n            // (re-)init templates\n            initTemplates();\n        };\n\n        /**\n         * returns the users message from the reply form\n         *\n         * @name   DiscussionViewer.getReplyMessage\n         * @function\n         * @return {String}\n         */\n        me.getReplyMessage = function()\n        {\n            return $replyMessage.val();\n        };\n\n        /**\n         * returns the users nickname (if any) from the reply form\n         *\n         * @name   DiscussionViewer.getReplyNickname\n         * @function\n         * @return {String}\n         */\n        me.getReplyNickname = function()\n        {\n            return $replyNickname.val();\n        };\n\n        /**\n         * returns the id of the parent comment the user is replying to\n         *\n         * @name   DiscussionViewer.getReplyCommentId\n         * @function\n         * @return {int|undefined}\n         */\n        me.getReplyCommentId = function()\n        {\n            return replyCommentId;\n        };\n\n        /**\n         * highlights a specific comment and scrolls to it if necessary\n         *\n         * @name   DiscussionViewer.highlightComment\n         * @function\n         * @param {string} commentId\n         * @param {bool} fadeOut - whether to fade out the comment\n         */\n        me.highlightComment = function(commentId, fadeOut)\n        {\n            const $comment = $('#comment_' + commentId);\n            // in case comment does not exist, cancel\n            if ($comment.length === 0) {\n                return;\n            }\n\n            $comment.addClass('highlight');\n            const highlightComment = function () {\n                if (fadeOut === true) {\n                    setTimeout(function () {\n                        $comment.removeClass('highlight');\n\n                    }, 300);\n                }\n            };\n\n            if (UiHelper.isVisible($comment)) {\n                return highlightComment();\n            }\n\n            UiHelper.scrollTo($comment, 100, 'swing', highlightComment);\n        };\n\n        /**\n         * initiate\n         *\n         * preloads jQuery elements\n         *\n         * @name   DiscussionViewer.init\n         * @function\n         */\n        me.init = function()\n        {\n            // bind events to templates (so they are later cloned)\n            $('#commenttailtemplate, #commenttemplate').find('button').on('click', openReply);\n            $('#replytemplate').find('button').on('click', PasteEncrypter.sendComment);\n\n            $commentContainer = $('#commentcontainer');\n            $discussion = $('#discussion');\n        };\n\n        return me;\n    })();\n\n    /**\n     * Manage top (navigation) bar\n     *\n     * @name   TopNav\n     * @param  {object} window\n     * @param  {object} document\n     * @class\n     */\n    const TopNav = (function (window, document) {\n        const me = {};\n\n        let createButtonsDisplayed = false,\n            viewButtonsDisplayed = false,\n            burnAfterReadingDefault = false,\n            openDiscussionDefault = false,\n            $attach,\n            $burnAfterReading,\n            $burnAfterReadingOption,\n            $cloneButton,\n            $customAttachment,\n            $expiration,\n            $fileRemoveButton,\n            $fileWrap,\n            $formatter,\n            $newButton,\n            $openDiscussion,\n            $openDiscussionOption,\n            $password,\n            $passwordInput,\n            $rawTextButton,\n            $downloadTextButton,\n            $qrCodeLink,\n            $emailLink,\n            $sendButton,\n            $retryButton,\n            pasteExpiration = null,\n            retryButtonCallback;\n\n        /**\n         * set the expiration on bootstrap templates in dropdown\n         *\n         * @name   TopNav.updateExpiration\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function updateExpiration(event)\n        {\n            // get selected option\n            const target = $(event.target);\n\n            // update dropdown display and save new expiration time\n            $('#pasteExpirationDisplay').text(target.text());\n            pasteExpiration = target.data('expiration');\n\n            event.preventDefault();\n        }\n\n        /**\n         * set the format on bootstrap templates in dropdown from user interaction\n         *\n         * @name   TopNav.updateFormat\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function updateFormat(event)\n        {\n            // get selected option\n            const $target = $(event.target);\n\n            // update dropdown display and save new format\n            const newFormat = $target.data('format');\n            $('#pasteFormatterDisplay').text($target.text());\n            PasteViewer.setFormat(newFormat);\n\n            // update preview\n            if (Editor.isPreview()) {\n                PasteViewer.run();\n            }\n\n            event.preventDefault();\n        }\n\n        /**\n         * when \"burn after reading\" is checked, disable discussion\n         *\n         * @name   TopNav.changeBurnAfterReading\n         * @private\n         * @function\n         */\n        function changeBurnAfterReading()\n        {\n            if ($burnAfterReading.is(':checked')) {\n                $openDiscussionOption.addClass('buttondisabled');\n                $openDiscussion.prop('checked', false);\n\n                // if button is actually disabled, force-enable it and uncheck other button\n                $burnAfterReadingOption.removeClass('buttondisabled');\n            } else {\n                $openDiscussionOption.removeClass('buttondisabled');\n            }\n        }\n\n        /**\n         * when discussion is checked, disable \"burn after reading\"\n         *\n         * @name   TopNav.changeOpenDiscussion\n         * @private\n         * @function\n         */\n        function changeOpenDiscussion()\n        {\n            if ($openDiscussion.is(':checked')) {\n                $burnAfterReadingOption.addClass('buttondisabled');\n                $burnAfterReading.prop('checked', false);\n\n                // if button is actually disabled, force-enable it and uncheck other button\n                $openDiscussionOption.removeClass('buttondisabled');\n            } else {\n                $burnAfterReadingOption.removeClass('buttondisabled');\n            }\n        }\n\n\n        /**\n         * Clear the attachment input in the top navigation.\n         *\n         * @name   TopNav.clearAttachmentInput\n         * @function\n         */\n        function clearAttachmentInput()\n        {\n            // hide UI for selected files\n            // our up-to-date jQuery can handle it :)\n            $fileWrap.find('input').val('');\n        }\n\n        /**\n         * return raw text\n         *\n         * @name   TopNav.rawText\n         * @private\n         * @function\n         */\n        function rawText()\n        {\n            TopNav.hideAllButtons();\n            Alert.showLoading('Showing raw text\u2026', 'time');\n            let paste = PasteViewer.getText();\n\n            // push a new state to allow back navigation with browser back button\n            history.pushState(\n                {type: 'raw'},\n                document.title,\n                // recreate paste URL\n                Helper.baseUri() + '?' + Model.getPasteId() + '#' +\n                CryptTool.base58encode(Model.getPasteKey())\n            );\n\n            // we use text/html instead of text/plain to avoid a bug when\n            // reloading the raw text view (it reverts to type text/html)\n            const $head  = $('head').children().not('noscript, script, link[type=\"text/css\"]'),\n                  newDoc = document.open('text/html', 'replace');\n            newDoc.write('<!DOCTYPE html><html><head>');\n            for (let i = 0; i < $head.length; ++i) {\n                newDoc.write($head[i].outerHTML);\n            }\n            newDoc.write(\n                '</head><body><pre>' +\n                DOMPurify.sanitize(\n                    Helper.htmlEntities(paste),\n                    purifyHtmlConfig\n                ) +\n                '</pre></body></html>'\n            );\n            newDoc.close();\n        }\n\n        /**\n         * download text\n         *\n         * @name   TopNav.downloadText\n         * @private\n         * @function\n         */\n        function downloadText()\n        {\n            var filename='paste-' + Model.getPasteId() + '.txt';\n            var text = PasteViewer.getText();\n\n            var element = document.createElement('a');\n            element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n            element.setAttribute('download', filename);\n\n            element.style.display = 'none';\n            document.body.appendChild(element);\n\n            element.click();\n\n            document.body.removeChild(element);\n        }\n\n        /**\n         * saves the language in a cookie and reloads the page\n         *\n         * @name   TopNav.setLanguage\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function setLanguage(event)\n        {\n            document.cookie = 'lang=' + $(event.target).data('lang') + ';secure';\n            UiHelper.reloadHome();\n        }\n\n        /**\n         * hides all messages and creates a new paste\n         *\n         * @name   TopNav.clickNewPaste\n         * @private\n         * @function\n         */\n        function clickNewPaste()\n        {\n            Controller.hideStatusMessages();\n            Controller.newPaste();\n        }\n\n        /**\n         * retrys some callback registered before\n         *\n         * @name   TopNav.clickRetryButton\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function clickRetryButton(event)\n        {\n            retryButtonCallback(event);\n        }\n\n        /**\n         * removes the existing attachment\n         *\n         * @name   TopNav.removeAttachment\n         * @private\n         * @function\n         * @param  {Event} event\n         */\n        function removeAttachment(event)\n        {\n            // if custom attachment is used, remove it first\n            if (!$customAttachment.hasClass('hidden')) {\n                AttachmentViewer.removeAttachment();\n                $customAttachment.addClass('hidden');\n                $fileWrap.removeClass('hidden');\n            }\n\n            // in any case, remove saved attachment data\n            AttachmentViewer.removeAttachmentData();\n\n            clearAttachmentInput();\n            AttachmentViewer.clearDragAndDrop();\n\n            // pevent '#' from appearing in the URL\n            event.preventDefault();\n        }\n\n        /**\n         * Shows the QR code of the current paste (URL).\n         *\n         * @name   TopNav.displayQrCode\n         * @private\n         * @function\n         */\n        function displayQrCode()\n        {\n            const qrCanvas = kjua({\n                render: 'canvas',\n                text: window.location.href\n            });\n            $('#qrcode-display').html(qrCanvas);\n        }\n\n        /**\n         * Template Email body.\n         *\n         * @name   TopNav.templateEmailBody\n         * @private\n         * @param {string} expirationDateString\n         * @param {bool} isBurnafterreading\n         */\n        function templateEmailBody(expirationDateString, isBurnafterreading)\n        {\n            const EOL = '\\n';\n            const BULLET = '  - ';\n            let emailBody = '';\n            if (expirationDateString !== null || isBurnafterreading) {\n                emailBody += I18n._('Notice:');\n                emailBody += EOL;\n\n                if (expirationDateString !== null) {\n                    emailBody += EOL;\n                    emailBody += BULLET;\n                    // avoid DOMPurify mess with forward slash in expirationDateString\n                    emailBody += Helper.sprintf(\n                        I18n._(\n                            'This link will expire after %s.',\n                            '%s'\n                        ),\n                        expirationDateString\n                    );\n                }\n                if (isBurnafterreading) {\n                    emailBody += EOL;\n                    emailBody += BULLET;\n                    emailBody += I18n._(\n                        'This link can only be accessed once, do not use back or refresh button in your browser.'\n                    );\n                }\n\n                emailBody += EOL;\n                emailBody += EOL;\n            }\n            emailBody += I18n._('Link:');\n            emailBody += EOL;\n            emailBody += `${window.location.href}`;\n            return emailBody;\n        }\n\n        /**\n         * Trigger Email send.\n         *\n         * @name   TopNav.triggerEmailSend\n         * @private\n         * @param {string} emailBody\n         */\n        function triggerEmailSend(emailBody)\n        {\n            window.open(\n                `mailto:?body=${encodeURIComponent(emailBody)}`,\n                '_self',\n                'noopener, noreferrer'\n            );\n        }\n\n        /**\n         * Send Email with current paste (URL).\n         *\n         * @name   TopNav.sendEmail\n         * @private\n         * @function\n         * @param  {Date|null} expirationDate date of expiration\n         * @param  {bool} isBurnafterreading whether it is burn after reading\n         */\n        function sendEmail(expirationDate, isBurnafterreading)\n        {\n            const expirationDateRoundedToSecond = new Date(expirationDate);\n\n            // round down at least 30 seconds to make up for the delay of request\n            expirationDateRoundedToSecond.setUTCSeconds(\n                expirationDateRoundedToSecond.getUTCSeconds() - 30\n            );\n            expirationDateRoundedToSecond.setUTCSeconds(0);\n\n            const $emailconfirmmodal = $('#emailconfirmmodal');\n            if ($emailconfirmmodal.length > 0) {\n                if (expirationDate !== null) {\n                    I18n._(\n                        $emailconfirmmodal.find('#emailconfirm-display'),\n                        'Recipient may become aware of your timezone, convert time to UTC?'\n                    );\n                    const $emailconfirmTimezoneCurrent = $emailconfirmmodal.find('#emailconfirm-timezone-current');\n                    const $emailconfirmTimezoneUtc = $emailconfirmmodal.find('#emailconfirm-timezone-utc');\n                    $emailconfirmTimezoneCurrent.off('click.sendEmailCurrentTimezone');\n                    $emailconfirmTimezoneCurrent.on('click.sendEmailCurrentTimezone', () => {\n                        const emailBody = templateEmailBody(expirationDateRoundedToSecond.toLocaleString(), isBurnafterreading);\n                        $emailconfirmmodal.modal('hide');\n                        triggerEmailSend(emailBody);\n                    });\n                    $emailconfirmTimezoneUtc.off('click.sendEmailUtcTimezone');\n                    $emailconfirmTimezoneUtc.on('click.sendEmailUtcTimezone', () => {\n                        const emailBody = templateEmailBody(expirationDateRoundedToSecond.toLocaleString(\n                            undefined,\n                            // we don't use Date.prototype.toUTCString() because we would like to avoid GMT\n                            { timeZone: 'UTC', dateStyle: 'long', timeStyle: 'long' }\n                        ), isBurnafterreading);\n                        $emailconfirmmodal.modal('hide');\n                        triggerEmailSend(emailBody);\n                    });\n                    $emailconfirmmodal.modal('show');\n                } else {\n                    triggerEmailSend(templateEmailBody(null, isBurnafterreading));\n                }\n            } else {\n                let emailBody = '';\n                if (expirationDate !== null) {\n                    const expirationDateString = window.confirm(\n                        I18n._('Recipient may become aware of your timezone, convert time to UTC?')\n                    ) ? expirationDateRoundedToSecond.toLocaleString(\n                        undefined,\n                        // we don't use Date.prototype.toUTCString() because we would like to avoid GMT\n                        { timeZone: 'UTC', dateStyle: 'long', timeStyle: 'long' }\n                    ) : expirationDateRoundedToSecond.toLocaleString();\n                    emailBody = templateEmailBody(expirationDateString, isBurnafterreading);\n                } else {\n                    emailBody = templateEmailBody(null, isBurnafterreading);\n                }\n                triggerEmailSend(emailBody);\n            }\n        }\n\n        /**\n         * Shows all navigation elements for viewing an existing paste\n         *\n         * @name   TopNav.showViewButtons\n         * @function\n         */\n        me.showViewButtons = function()\n        {\n            if (viewButtonsDisplayed) {\n                return;\n            }\n\n            $newButton.removeClass('hidden');\n            $cloneButton.removeClass('hidden');\n            $rawTextButton.removeClass('hidden');\n            $downloadTextButton.removeClass('hidden');\n            $qrCodeLink.removeClass('hidden');\n\n            viewButtonsDisplayed = true;\n        };\n\n        /**\n         * Hides all navigation elements for viewing an existing paste\n         *\n         * @name   TopNav.hideViewButtons\n         * @function\n         */\n        me.hideViewButtons = function()\n        {\n            if (!viewButtonsDisplayed) {\n                return;\n            }\n\n            $cloneButton.addClass('hidden');\n            $newButton.addClass('hidden');\n            $rawTextButton.addClass('hidden');\n            $downloadTextButton.addClass('hidden');\n            $qrCodeLink.addClass('hidden');\n            me.hideEmailButton();\n\n            viewButtonsDisplayed = false;\n        };\n\n        /**\n         * Hides all elements belonging to existing pastes\n         *\n         * @name   TopNav.hideAllButtons\n         * @function\n         */\n        me.hideAllButtons = function()\n        {\n            me.hideViewButtons();\n            me.hideCreateButtons();\n        };\n\n        /**\n         * shows all elements needed when creating a new paste\n         *\n         * @name   TopNav.showCreateButtons\n         * @function\n         */\n        me.showCreateButtons = function()\n        {\n            if (createButtonsDisplayed) {\n                return;\n            }\n\n            $attach.removeClass('hidden');\n            $burnAfterReadingOption.removeClass('hidden');\n            $expiration.removeClass('hidden');\n            $formatter.removeClass('hidden');\n            $newButton.removeClass('hidden');\n            $openDiscussionOption.removeClass('hidden');\n            $password.removeClass('hidden');\n            $sendButton.removeClass('hidden');\n\n            createButtonsDisplayed = true;\n        };\n\n        /**\n         * shows all elements needed when creating a new paste\n         *\n         * @name   TopNav.hideCreateButtons\n         * @function\n         */\n        me.hideCreateButtons = function()\n        {\n            if (!createButtonsDisplayed) {\n                return;\n            }\n\n            $newButton.addClass('hidden');\n            $sendButton.addClass('hidden');\n            $expiration.addClass('hidden');\n            $formatter.addClass('hidden');\n            $burnAfterReadingOption.addClass('hidden');\n            $openDiscussionOption.addClass('hidden');\n            $password.addClass('hidden');\n            $attach.addClass('hidden');\n\n            createButtonsDisplayed = false;\n        };\n\n        /**\n         * only shows the \"new paste\" button\n         *\n         * @name   TopNav.showNewPasteButton\n         * @function\n         */\n        me.showNewPasteButton = function()\n        {\n            $newButton.removeClass('hidden');\n        };\n\n        /**\n         * only shows the \"retry\" button\n         *\n         * @name   TopNav.showRetryButton\n         * @function\n         */\n        me.showRetryButton = function()\n        {\n            $retryButton.removeClass('hidden');\n        }\n\n        /**\n         * hides the \"retry\" button\n         *\n         * @name   TopNav.hideRetryButton\n         * @function\n         */\n        me.hideRetryButton = function()\n        {\n            $retryButton.addClass('hidden');\n        }\n\n        /**\n         * show the \"email\" button\n         *\n         * @name   TopNav.showEmailbutton\n         * @function\n         * @param {int|undefined} optionalRemainingTimeInSeconds\n         */\n        me.showEmailButton = function(optionalRemainingTimeInSeconds)\n        {\n            try {\n                // we cache expiration date in closure to avoid inaccurate expiration datetime\n                const expirationDate = Helper.calculateExpirationDate(\n                    new Date(),\n                    typeof optionalRemainingTimeInSeconds === 'number' ? optionalRemainingTimeInSeconds : TopNav.getExpiration()\n                );\n                const isBurnafterreading = TopNav.getBurnAfterReading();\n\n                $emailLink.removeClass('hidden');\n                $emailLink.off('click.sendEmail');\n                $emailLink.on('click.sendEmail', () => {\n                    sendEmail(expirationDate, isBurnafterreading);\n                });\n            } catch (error) {\n                console.error(error);\n                Alert.showError('Cannot calculate expiration date.');\n            }\n        }\n\n        /**\n         * hide the \"email\" button\n         *\n         * @name   TopNav.hideEmailButton\n         * @function\n         */\n        me.hideEmailButton = function()\n        {\n            $emailLink.addClass('hidden');\n            $emailLink.off('click.sendEmail');\n        }\n\n        /**\n         * only hides the clone button\n         *\n         * @name   TopNav.hideCloneButton\n         * @function\n         */\n        me.hideCloneButton = function()\n        {\n            $cloneButton.addClass('hidden');\n        };\n\n        /**\n         * only hides the raw text button\n         *\n         * @name   TopNav.hideRawButton\n         * @function\n         */\n        me.hideRawButton = function()\n        {\n            $rawTextButton.addClass('hidden');\n        };\n\n        /**\n         * only hides the download text button\n         *\n         * @name   TopNav.hideRawButton\n         * @function\n         */\n        me.hideDownloadButton = function()\n        {\n            $downloadTextButton.addClass('hidden');\n        };\n\n        /**\n         * only hides the qr code button\n         *\n         * @name   TopNav.hideQrCodeButton\n         * @function\n         */\n        me.hideQrCodeButton = function()\n        {\n            $qrCodeLink.addClass('hidden');\n        }\n\n        /**\n         * hide all irrelevant buttons when viewing burn after reading paste\n         *\n         * @name   TopNav.hideBurnAfterReadingButtons\n         * @function\n         */\n        me.hideBurnAfterReadingButtons = function()\n        {\n            me.hideCloneButton();\n            me.hideQrCodeButton();\n            me.hideEmailButton();\n        }\n\n        /**\n         * hides the file selector in attachment\n         *\n         * @name   TopNav.hideFileSelector\n         * @function\n         */\n        me.hideFileSelector = function()\n        {\n            $fileWrap.addClass('hidden');\n        };\n\n\n        /**\n         * shows the custom attachment\n         *\n         * @name   TopNav.showCustomAttachment\n         * @function\n         */\n        me.showCustomAttachment = function()\n        {\n            $customAttachment.removeClass('hidden');\n        };\n\n        /**\n         * hides the custom attachment\n         *\n         * @name  TopNav.hideCustomAttachment\n         * @function\n         */\n        me.hideCustomAttachment = function()\n        {\n            $customAttachment.addClass('hidden');\n            $fileWrap.removeClass('hidden');\n        };\n\n        /**\n         * collapses the navigation bar, only if expanded\n         *\n         * @name   TopNav.collapseBar\n         * @function\n         */\n        me.collapseBar = function()\n        {\n            if ($('#navbar').attr('aria-expanded') === 'true') {\n                $('.navbar-toggle').click();\n            }\n        };\n\n        /**\n         * Reset the top navigation back to it's default values.\n         *\n         * @name   TopNav.resetInput\n         * @function\n         */\n        me.resetInput = function()\n        {\n            clearAttachmentInput();\n            $burnAfterReading.prop('checked', burnAfterReadingDefault);\n            $openDiscussion.prop('checked', openDiscussionDefault);\n            if (openDiscussionDefault || !burnAfterReadingDefault) $openDiscussionOption.removeClass('buttondisabled');\n            if (burnAfterReadingDefault || !openDiscussionDefault) $burnAfterReadingOption.removeClass('buttondisabled');\n\n            pasteExpiration = Model.getExpirationDefault() || pasteExpiration;\n            $('#pasteExpiration>option').each(function() {\n                const $this = $(this);\n                if ($this.val() === pasteExpiration) {\n                    $('#pasteExpirationDisplay').text($this.text());\n                }\n            });\n        };\n\n        /**\n         * returns the currently set expiration time\n         *\n         * @name   TopNav.getExpiration\n         * @function\n         * @return {int}\n         */\n        me.getExpiration = function()\n        {\n            return pasteExpiration;\n        };\n\n        /**\n         * returns the currently selected file(s)\n         *\n         * @name   TopNav.getFileList\n         * @function\n         * @return {FileList|null}\n         */\n        me.getFileList = function()\n        {\n            const $file = $('#file');\n\n            // if no file given, return null\n            if (!$file.length || !$file[0].files.length) {\n                return null;\n            }\n\n            // ensure the selected file is still accessible\n            if (!($file[0].files && $file[0].files[0])) {\n                return null;\n            }\n\n            return $file[0].files;\n        };\n\n        /**\n         * returns the state of the burn after reading checkbox\n         *\n         * @name   TopNav.getBurnAfterReading\n         * @function\n         * @return {bool}\n         */\n        me.getBurnAfterReading = function()\n        {\n            return $burnAfterReading.is(':checked');\n        };\n\n        /**\n         * returns the state of the discussion checkbox\n         *\n         * @name   TopNav.getOpenDiscussion\n         * @function\n         * @return {bool}\n         */\n        me.getOpenDiscussion = function()\n        {\n            return $openDiscussion.is(':checked');\n        };\n\n        /**\n         * returns the entered password\n         *\n         * @name   TopNav.getPassword\n         * @function\n         * @return {string}\n         */\n        me.getPassword = function()\n        {\n            // when password is disabled $passwordInput.val() will return undefined\n            return $passwordInput.val() || '';\n        };\n\n        /**\n         * returns the element where custom attachments can be placed\n         *\n         * Used by AttachmentViewer when an attachment is cloned here.\n         *\n         * @name   TopNav.getCustomAttachment\n         * @function\n         * @return {jQuery}\n         */\n        me.getCustomAttachment = function()\n        {\n            return $customAttachment;\n        };\n\n        /**\n         * Set a function to call when the retry button is clicked.\n         *\n         * @name   TopNav.setRetryCallback\n         * @function\n         * @param {function} callback\n         */\n        me.setRetryCallback = function(callback)\n        {\n            retryButtonCallback = callback;\n        }\n\n        /**\n         * Highlight file upload\n         *\n         * @name  TopNav.highlightFileupload\n         * @function\n         */\n        me.highlightFileupload = function()\n        {\n            // visually indicate file uploaded\n            const $attachDropdownToggle = $attach.children('.dropdown-toggle');\n            if ($attachDropdownToggle.attr('aria-expanded') === 'false') {\n                $attachDropdownToggle.click();\n            }\n            $fileWrap.addClass('highlight');\n            setTimeout(function () {\n                $fileWrap.removeClass('highlight');\n            }, 300);\n        }\n\n        /**\n         * set the format on bootstrap templates in dropdown programmatically\n         *\n         * @name    TopNav.setFormat\n         * @function\n         */\n        me.setFormat = function(format)\n        {\n            $formatter.parent().find(`a[data-format=\"${format}\"]`).click();\n        }\n\n        /**\n         * returns if attachment dropdown is readonly, not editable\n         *\n         * @name   TopNav.isAttachmentReadonly\n         * @function\n         * @return {bool}\n         */\n        me.isAttachmentReadonly = function()\n        {\n            return !createButtonsDisplayed || $attach.hasClass('hidden');\n        }\n\n        /**\n         * init navigation manager\n         *\n         * preloads jQuery elements\n         *\n         * @name   TopNav.init\n         * @function\n         */\n        me.init = function()\n        {\n            $attach = $('#attach');\n            $burnAfterReading = $('#burnafterreading');\n            $burnAfterReadingOption = $('#burnafterreadingoption');\n            $cloneButton = $('#clonebutton');\n            $customAttachment = $('#customattachment');\n            $expiration = $('#expiration');\n            $fileRemoveButton = $('#fileremovebutton');\n            $fileWrap = $('#filewrap');\n            $formatter = $('#formatter');\n            $newButton = $('#newbutton');\n            $openDiscussion = $('#opendiscussion');\n            $openDiscussionOption = $('#opendiscussionoption');\n            $password = $('#password');\n            $passwordInput = $('#passwordinput');\n            $rawTextButton = $('#rawtextbutton');\n            $downloadTextButton = $('#downloadtextbutton');\n            $retryButton = $('#retrybutton');\n            $sendButton = $('#sendbutton');\n            $qrCodeLink = $('#qrcodelink');\n            $emailLink = $('#emaillink');\n\n            // bootstrap template drop down\n            $('#language ul.dropdown-menu li a').click(setLanguage);\n            // page template drop down\n            $('#language select option').click(setLanguage);\n\n            // bind events\n            $burnAfterReading.change(changeBurnAfterReading);\n            $openDiscussionOption.change(changeOpenDiscussion);\n            $newButton.click(clickNewPaste);\n            $sendButton.click(PasteEncrypter.sendPaste);\n            $cloneButton.click(Controller.clonePaste);\n            $rawTextButton.click(rawText);\n            $downloadTextButton.click(downloadText);\n            $retryButton.click(clickRetryButton);\n            $fileRemoveButton.click(removeAttachment);\n            $qrCodeLink.click(displayQrCode);\n\n            // bootstrap template drop downs\n            $('ul.dropdown-menu li a', $('#expiration').parent()).click(updateExpiration);\n            $('ul.dropdown-menu li a', $('#formatter').parent()).click(updateFormat);\n\n            // initiate default state of checkboxes\n            changeBurnAfterReading();\n            changeOpenDiscussion();\n\n            // get default values from template or fall back to set value\n            burnAfterReadingDefault = me.getBurnAfterReading();\n            openDiscussionDefault = me.getOpenDiscussion();\n            pasteExpiration = Model.getExpirationDefault() || pasteExpiration;\n\n            createButtonsDisplayed = false;\n            viewButtonsDisplayed = false;\n        };\n\n        return me;\n    })(window, document);\n\n    /**\n     * Responsible for AJAX requests, transparently handles encryption\u2026\n     *\n     * @name   ServerInteraction\n     * @class\n     */\n    const ServerInteraction = (function () {\n        const me = {};\n\n        let successFunc = null,\n            failureFunc = null,\n            symmetricKey = null,\n            url,\n            data,\n            password;\n\n        /**\n         * public variable ('constant') for errors to prevent magic numbers\n         *\n         * @name   ServerInteraction.error\n         * @readonly\n         * @enum   {Object}\n         */\n        me.error = {\n            okay: 0,\n            custom: 1,\n            unknown: 2,\n            serverError: 3\n        };\n\n        /**\n         * ajaxHeaders to send in AJAX requests\n         *\n         * @name   ServerInteraction.ajaxHeaders\n         * @private\n         * @readonly\n         * @enum   {Object}\n         */\n        const ajaxHeaders = {'X-Requested-With': 'JSONHttpRequest'};\n\n        /**\n         * called after successful upload\n         *\n         * @name   ServerInteraction.success\n         * @private\n         * @function\n         * @param {int} status\n         * @param {int} result - optional\n         */\n        function success(status, result)\n        {\n            if (successFunc !== null) {\n                // add useful data to result\n                result.encryptionKey = symmetricKey;\n                successFunc(status, result);\n            }\n        }\n\n        /**\n         * called after a upload failure\n         *\n         * @name   ServerInteraction.fail\n         * @private\n         * @function\n         * @param {int} status - internal code\n         * @param {int} result - original error code\n         */\n        function fail(status, result)\n        {\n            if (failureFunc !== null) {\n                failureFunc(status, result);\n            }\n        }\n\n        /**\n         * actually uploads the data\n         *\n         * @name   ServerInteraction.run\n         * @function\n         */\n        me.run = function()\n        {\n            let isPost = Object.keys(data).length > 0,\n                ajaxParams = {\n                    type: isPost ? 'POST' : 'GET',\n                    url: url,\n                    headers: ajaxHeaders,\n                    dataType: 'json',\n                    success: function(result) {\n                        if (result.status === 0) {\n                            success(0, result);\n                        } else if (result.status === 1) {\n                            fail(1, result);\n                        } else {\n                            fail(2, result);\n                        }\n                    }\n                };\n            if (isPost) {\n                ajaxParams.data = JSON.stringify(data);\n            }\n            $.ajax(ajaxParams).fail(function(jqXHR, textStatus, errorThrown) {\n                console.error(textStatus, errorThrown);\n                fail(3, jqXHR);\n            });\n        };\n\n        /**\n         * return currently set data, used in unit testing\n         *\n         * @name   ServerInteraction.getData\n         * @function\n         */\n        me.getData = function()\n        {\n            return data;\n        };\n\n        /**\n         * set success function\n         *\n         * @name   ServerInteraction.setUrl\n         * @function\n         * @param {function} newUrl\n         */\n        me.setUrl = function(newUrl)\n        {\n            url = newUrl;\n        };\n\n        /**\n         * sets the password to use (first value) and optionally also the\n         * encryption key (not recommended, it is automatically generated).\n         *\n         * Note: Call this after prepare() as prepare() resets these values.\n         *\n         * @name   ServerInteraction.setCryptValues\n         * @function\n         * @param {string} newPassword\n         * @param {string} newKey       - optional\n         */\n        me.setCryptParameters = function(newPassword, newKey)\n        {\n            password = newPassword;\n\n            if (typeof newKey !== 'undefined') {\n                symmetricKey = newKey;\n            }\n        };\n\n        /**\n         * set success function\n         *\n         * @name   ServerInteraction.setSuccess\n         * @function\n         * @param {function} func\n         */\n        me.setSuccess = function(func)\n        {\n            successFunc = func;\n        };\n\n        /**\n         * set failure function\n         *\n         * @name   ServerInteraction.setFailure\n         * @function\n         * @param {function} func\n         */\n        me.setFailure = function(func)\n        {\n            failureFunc = func;\n        };\n\n        /**\n         * prepares a new upload\n         *\n         * Call this when doing a new upload to reset any data from potential\n         * previous uploads. Must be called before any other method of this\n         * module.\n         *\n         * @name   ServerInteraction.prepare\n         * @function\n         * @return {object}\n         */\n        me.prepare = function()\n        {\n            // entropy should already be checked!\n\n            // reset password\n            password = '';\n\n            // reset key, so it a new one is generated when it is used\n            symmetricKey = null;\n\n            // reset data\n            successFunc = null;\n            failureFunc = null;\n            url = Helper.baseUri();\n            data = {};\n        };\n\n        /**\n         * encrypts and sets the data\n         *\n         * @name   ServerInteraction.setCipherMessage\n         * @async\n         * @function\n         * @param {object} cipherMessage\n         */\n        me.setCipherMessage = async function(cipherMessage)\n        {\n            if (\n                symmetricKey === null ||\n                (typeof symmetricKey === 'string' && symmetricKey === '')\n            ) {\n                symmetricKey = CryptTool.getSymmetricKey();\n            }\n            if (!data.hasOwnProperty('adata')) {\n                data['adata'] = [];\n            }\n            let cipherResult = await CryptTool.cipher(symmetricKey, password, JSON.stringify(cipherMessage), data['adata']);\n            data['v'] = 2;\n            data['ct'] = cipherResult[0];\n            data['adata'] = cipherResult[1];\n\n        };\n\n        /**\n         * set the additional metadata to send unencrypted\n         *\n         * @name   ServerInteraction.setUnencryptedData\n         * @function\n         * @param {string} index\n         * @param {mixed} element\n         */\n        me.setUnencryptedData = function(index, element)\n        {\n            data[index] = element;\n        };\n\n        /**\n         * Helper, which parses shows a general error message based on the result of the ServerInteraction\n         *\n         * @name    ServerInteraction.parseUploadError\n         * @function\n         * @param {int} status\n         * @param {object} data\n         * @param {string} doThisThing - a human description of the action, which was tried\n         * @return {array}\n         */\n        me.parseUploadError = function(status, data, doThisThing) {\n            let errorArray;\n\n            switch (status) {\n                case me.error.custom:\n                    errorArray = ['Could not ' + doThisThing + ': %s', data.message];\n                    break;\n                case me.error.unknown:\n                    errorArray = ['Could not ' + doThisThing + ': %s', I18n._('unknown status')];\n                    break;\n                case me.error.serverError:\n                    errorArray = ['Could not ' + doThisThing + ': %s', I18n._('server error or not responding')];\n                    break;\n                default:\n                    errorArray = ['Could not ' + doThisThing + ': %s', I18n._('unknown error')];\n                    break;\n            }\n\n            return errorArray;\n        };\n\n        return me;\n    })();\n\n    /**\n     * (controller) Responsible for encrypting paste and sending it to server.\n     *\n     * Does upload, encryption is done transparently by ServerInteraction.\n     *\n     * @name PasteEncrypter\n     * @class\n     */\n    const PasteEncrypter = (function () {\n        const me = {};\n\n        /**\n         * called after successful paste upload\n         *\n         * @name PasteEncrypter.showCreatedPaste\n         * @private\n         * @function\n         * @param {int} status\n         * @param {object} data\n         */\n        function showCreatedPaste(status, data) {\n            Alert.hideLoading();\n            Alert.hideMessages();\n\n            // show notification\n            const baseUri   = Helper.baseUri() + '?',\n                  url       = baseUri + data.id + '#' + CryptTool.base58encode(data.encryptionKey),\n                  deleteUrl = baseUri + 'pasteid=' + data.id + '&deletetoken=' + data.deletetoken;\n            PasteStatus.createPasteNotification(url, deleteUrl);\n\n            // show new URL in browser bar\n            history.pushState({type: 'newpaste'}, document.title, url);\n\n            TopNav.showViewButtons();\n\n            // this cannot be grouped with showViewButtons due to remaining time calculation\n            TopNav.showEmailButton();\n\n            TopNav.hideRawButton();\n            TopNav.hideDownloadButton();\n            Editor.hide();\n\n            // parse and show text\n            // (preparation already done in me.sendPaste())\n            PasteViewer.run();\n        }\n\n        /**\n         * called after successful comment upload\n         *\n         * @name PasteEncrypter.showUploadedComment\n         * @private\n         * @function\n         * @param {int} status\n         * @param {object} data\n         */\n        function showUploadedComment(status, data) {\n            // show success message\n            Alert.showStatus('Comment posted.');\n\n            // reload paste\n            Controller.refreshPaste(function () {\n                // highlight sent comment\n                DiscussionViewer.highlightComment(data.id, true);\n                // reset error handler\n                Alert.setCustomHandler(null);\n            });\n        }\n\n        /**\n         * send a reply in a discussion\n         *\n         * @name   PasteEncrypter.sendComment\n         * @async\n         * @function\n         */\n        me.sendComment = async function()\n        {\n            Alert.hideMessages();\n            Alert.setCustomHandler(DiscussionViewer.handleNotification);\n\n            // UI loading state\n            TopNav.hideAllButtons();\n            Alert.showLoading('Sending comment\u2026', 'cloud-upload');\n\n            // get data\n            const plainText = DiscussionViewer.getReplyMessage(),\n                  nickname  = DiscussionViewer.getReplyNickname(),\n                  parentid  = DiscussionViewer.getReplyCommentId();\n\n            // do not send if there is no data\n            if (plainText.length === 0) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                Alert.setCustomHandler(null);\n                TopNav.showViewButtons();\n                return;\n            }\n\n            // prepare server interaction\n            ServerInteraction.prepare();\n            ServerInteraction.setCryptParameters(Prompt.getPassword(), Model.getPasteKey());\n\n            // set success/fail functions\n            ServerInteraction.setSuccess(showUploadedComment);\n            ServerInteraction.setFailure(function (status, data) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showViewButtons();\n\n                // \u2026show error message\u2026\n                Alert.showError(\n                    ServerInteraction.parseUploadError(status, data, 'post comment')\n                );\n\n                // \u2026and reset error handler\n                Alert.setCustomHandler(null);\n            });\n\n            // fill it with unencrypted params\n            ServerInteraction.setUnencryptedData('pasteid', Model.getPasteId());\n            if (typeof parentid === 'undefined') {\n                // if parent id is not set, this is the top-most comment, so use\n                // paste id as parent, as the root element of the discussion tree\n                ServerInteraction.setUnencryptedData('parentid', Model.getPasteId());\n            } else {\n                ServerInteraction.setUnencryptedData('parentid', parentid);\n            }\n\n            // prepare cypher message\n            let cipherMessage = {\n                'comment': plainText\n            };\n            if (nickname.length > 0) {\n                cipherMessage['nickname'] = nickname;\n            }\n\n            await ServerInteraction.setCipherMessage(cipherMessage).catch(Alert.showError);\n            ServerInteraction.run();\n        };\n\n        /**\n         * sends a new paste to server\n         *\n         * @name   PasteEncrypter.sendPaste\n         * @async\n         * @function\n         */\n        me.sendPaste = async function()\n        {\n            // hide previous (error) messages\n            Controller.hideStatusMessages();\n\n            // UI loading state\n            TopNav.hideAllButtons();\n            Alert.showLoading('Sending paste\u2026', 'cloud-upload');\n            TopNav.collapseBar();\n\n            // get data\n            const plainText = Editor.getText(),\n                  format    = PasteViewer.getFormat(),\n                  // the methods may return different values if no files are attached (null, undefined or false)\n                  files     = TopNav.getFileList() || AttachmentViewer.getFile() || AttachmentViewer.hasAttachment();\n\n            // do not send if there is no data\n            if (plainText.length === 0 && !files) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showCreateButtons();\n                return;\n            }\n\n            // prepare server interaction\n            ServerInteraction.prepare();\n            ServerInteraction.setCryptParameters(TopNav.getPassword());\n\n            // set success/fail functions\n            ServerInteraction.setSuccess(showCreatedPaste);\n            ServerInteraction.setFailure(function (status, data) {\n                // revert loading status\u2026\n                Alert.hideLoading();\n                TopNav.showCreateButtons();\n\n                // show error message\n                Alert.showError(\n                    ServerInteraction.parseUploadError(status, data, 'create paste')\n                );\n            });\n\n            // fill it with unencrypted submitted options\n            ServerInteraction.setUnencryptedData('adata', [\n                null, format,\n                TopNav.getOpenDiscussion() ? 1 : 0,\n                TopNav.getBurnAfterReading() ? 1 : 0\n            ]);\n            ServerInteraction.setUnencryptedData('meta', {'expire': TopNav.getExpiration()});\n\n            // prepare PasteViewer for later preview\n            PasteViewer.setText(plainText);\n            PasteViewer.setFormat(format);\n\n            // prepare cypher message\n            let file = AttachmentViewer.getAttachmentData(),\n                cipherMessage = {\n                    'paste': plainText\n                };\n            if (typeof file !== 'undefined' && file !== null) {\n                cipherMessage['attachment'] = file;\n                cipherMessage['attachment_name'] = AttachmentViewer.getFile().name;\n            } else if (AttachmentViewer.hasAttachment()) {\n                // fall back to cloned part\n                let attachment = AttachmentViewer.getAttachment();\n                cipherMessage['attachment'] = attachment[0];\n                cipherMessage['attachment_name'] = attachment[1];\n\n                // we need to retrieve data from blob if browser already parsed it in memory\n                if (typeof attachment[0] === 'string' && attachment[0].startsWith('blob:')) {\n                    Alert.showStatus(\n                        [\n                            'Retrieving cloned file \\'%s\\' from memory...',\n                            attachment[1]\n                        ],\n                        'copy'\n                    );\n                    try {\n                        const blobData = await $.ajax({\n                            type: 'GET',\n                            url: `${attachment[0]}`,\n                            processData: false,\n                            timeout: 10000,\n                            xhrFields: {\n                                withCredentials: false,\n                                responseType: 'blob'\n                            }\n                        });\n                        if (blobData instanceof window.Blob) {\n                            const fileReading = new Promise(function(resolve, reject) {\n                                const fileReader = new FileReader();\n                                fileReader.onload = function (event) {\n                                    resolve(event.target.result);\n                                };\n                                fileReader.onerror = function (error) {\n                                    reject(error);\n                                }\n                                fileReader.readAsDataURL(blobData);\n                            });\n                            cipherMessage['attachment'] = await fileReading;\n                        } else {\n                            const error = 'Cannot process attachment data.';\n                            Alert.showError(error);\n                            throw new TypeError(error);\n                        }\n                    } catch (error) {\n                        console.error(error);\n                        Alert.showError('Cannot retrieve attachment.');\n                        throw error;\n                    }\n                }\n            }\n\n            // encrypt message\n            await ServerInteraction.setCipherMessage(cipherMessage).catch(Alert.showError);\n\n            // send data\n            ServerInteraction.run();\n        };\n\n        return me;\n    })();\n\n    /**\n     * (controller) Responsible for decrypting cipherdata and passing data to view.\n     *\n     * Only decryption, no download.\n     *\n     * @name PasteDecrypter\n     * @class\n     */\n    const PasteDecrypter = (function () {\n        const me = {};\n\n        /**\n         * decrypt data or prompts for password in case of failure\n         *\n         * @name   PasteDecrypter.decryptOrPromptPassword\n         * @private\n         * @async\n         * @function\n         * @param  {string} key\n         * @param  {string} password - optional, may be an empty string\n         * @param  {string} cipherdata\n         * @throws {string}\n         * @return {false|string} false, when unsuccessful or string (decrypted data)\n         */\n        async function decryptOrPromptPassword(key, password, cipherdata)\n        {\n            // try decryption without password\n            const plaindata = await CryptTool.decipher(key, password, cipherdata);\n\n            // if it fails, request password\n            if (plaindata.length === 0 && password.length === 0) {\n                // show prompt\n                Prompt.requestPassword();\n\n                // Thus, we cannot do anything yet, we need to wait for the user\n                // input.\n                return false;\n            }\n\n            // if all tries failed, we can only return an error\n            if (plaindata.length === 0) {\n                return false;\n            }\n\n            return plaindata;\n        }\n\n        /**\n         * decrypt the actual paste text\n         *\n         * @name   PasteDecrypter.decryptPaste\n         * @private\n         * @async\n         * @function\n         * @param  {Paste} paste - paste data in object form\n         * @param  {string} key\n         * @param  {string} password\n         * @throws {string}\n         * @return {Promise}\n         */\n        async function decryptPaste(paste, key, password)\n        {\n            let pastePlain = await decryptOrPromptPassword(\n                key, password,\n                paste.getCipherData()\n            );\n            if (pastePlain === false) {\n                if (password.length === 0) {\n                    throw 'waiting on user to provide a password';\n                } else {\n                    Alert.hideLoading();\n                    // reset password, so it can be re-entered\n                    Prompt.reset();\n                    TopNav.showRetryButton();\n                    throw 'Could not decrypt data. Did you enter a wrong password? Retry with the button at the top.';\n                }\n            }\n\n            if (paste.v > 1) {\n                // version 2 paste\n                const pasteMessage = JSON.parse(pastePlain);\n                if (pasteMessage.hasOwnProperty('attachment') && pasteMessage.hasOwnProperty('attachment_name')) {\n                    AttachmentViewer.setAttachment(pasteMessage.attachment, pasteMessage.attachment_name);\n                    AttachmentViewer.showAttachment();\n                }\n                pastePlain = pasteMessage.paste;\n            } else {\n                // version 1 paste\n                if (paste.hasOwnProperty('attachment') && paste.hasOwnProperty('attachmentname')) {\n                    Promise.all([\n                        CryptTool.decipher(key, password, paste.attachment),\n                        CryptTool.decipher(key, password, paste.attachmentname)\n                    ]).then((attachment) => {\n                        AttachmentViewer.setAttachment(attachment[0], attachment[1]);\n                        AttachmentViewer.showAttachment();\n                    });\n                }\n            }\n            PasteViewer.setFormat(paste.getFormat());\n            PasteViewer.setText(pastePlain);\n            PasteViewer.run();\n        }\n\n        /**\n         * decrypts all comments and shows them\n         *\n         * @name   PasteDecrypter.decryptComments\n         * @private\n         * @async\n         * @function\n         * @param  {Paste} paste - paste data in object form\n         * @param  {string} key\n         * @param  {string} password\n         * @return {Promise}\n         */\n        async function decryptComments(paste, key, password)\n        {\n            // remove potential previous discussion\n            DiscussionViewer.prepareNewDiscussion();\n\n            const commentDecryptionPromises = [];\n            // iterate over comments\n            for (let i = 0; i < paste.comments.length; ++i) {\n                const comment        = new Comment(paste.comments[i]),\n                      commentPromise = CryptTool.decipher(key, password, comment.getCipherData());\n                paste.comments[i] = comment;\n                if (comment.v > 1) {\n                    // version 2 comment\n                    commentDecryptionPromises.push(\n                        commentPromise.then(function (commentJson) {\n                            const commentMessage = JSON.parse(commentJson);\n                            return [\n                                commentMessage.comment  || '',\n                                commentMessage.nickname || ''\n                            ];\n                        })\n                    );\n                } else {\n                    // version 1 comment\n                    commentDecryptionPromises.push(\n                        Promise.all([\n                            commentPromise,\n                            paste.comments[i].meta.hasOwnProperty('nickname') ?\n                                CryptTool.decipher(key, password, paste.comments[i].meta.nickname) :\n                                Promise.resolve('')\n                        ])\n                    );\n                }\n            }\n            return Promise.all(commentDecryptionPromises).then(function (plaintexts) {\n                for (let i = 0; i < paste.comments.length; ++i) {\n                    if (plaintexts[i][0].length === 0) {\n                        continue;\n                    }\n                    DiscussionViewer.addComment(\n                        paste.comments[i],\n                        plaintexts[i][0],\n                        plaintexts[i][1]\n                    );\n                }\n            });\n        }\n\n        /**\n         * show decrypted text in the display area, including discussion (if open)\n         *\n         * @name   PasteDecrypter.run\n         * @function\n         * @param  {Paste} [paste] - (optional) object including comments to display (items = array with keys ('data','meta'))\n         */\n        me.run = function(paste)\n        {\n            Alert.hideMessages();\n            Alert.showLoading('Decrypting paste\u2026', 'cloud-download');\n\n            if (typeof paste === 'undefined') {\n                // get cipher data and wait until it is available\n                Model.getPasteData(me.run);\n                return;\n            }\n\n            let key = Model.getPasteKey(),\n                password = Prompt.getPassword(),\n                decryptionPromises = [];\n\n            TopNav.setRetryCallback(function () {\n                TopNav.hideRetryButton();\n                me.run(paste);\n            });\n\n            // decrypt paste & attachments\n            decryptionPromises.push(decryptPaste(paste, key, password));\n\n            // if the discussion is opened on this paste, display it\n            if (paste.isDiscussionEnabled()) {\n                decryptionPromises.push(decryptComments(paste, key, password));\n            }\n\n            // shows the remaining time (until) deletion\n            PasteStatus.showRemainingTime(paste);\n\n            Promise.all(decryptionPromises)\n                .then(() => {\n                    Alert.hideLoading();\n                    TopNav.showViewButtons();\n\n                    // discourage cloning (it cannot really be prevented)\n                    if (paste.isBurnAfterReadingEnabled()) {\n                        TopNav.hideBurnAfterReadingButtons();\n                    } else {\n                        // we have to pass in remaining_time here\n                        TopNav.showEmailButton(paste.getTimeToLive());\n                    }\n\n                    // only offer adding comments, after paste was successfully decrypted\n                    if (paste.isDiscussionEnabled()) {\n                        DiscussionViewer.finishDiscussion();\n                    }\n\n                })\n                .catch((err) => {\n                    // wait for the user to type in the password,\n                    // then PasteDecrypter.run will be called again\n                    Alert.showError(err);\n                });\n        };\n\n        return me;\n    })();\n\n    /**\n     * (controller) main PrivateBin logic\n     *\n     * @name   Controller\n     * @param  {object} window\n     * @param  {object} document\n     * @class\n     */\n    const Controller = (function (window, document) {\n        const me = {};\n\n        /**\n         * hides all status messages no matter which module showed them\n         *\n         * @name   Controller.hideStatusMessages\n         * @function\n         */\n        me.hideStatusMessages = function()\n        {\n            PasteStatus.hideMessages();\n            Alert.hideMessages();\n        };\n\n        /**\n         * creates a new paste\n         *\n         * @name   Controller.newPaste\n         * @function\n         */\n        me.newPaste = function()\n        {\n            // Important: This *must not* run Alert.hideMessages() as previous\n            // errors from viewing a paste should be shown.\n            TopNav.hideAllButtons();\n            Alert.showLoading('Preparing new paste\u2026', 'time');\n\n            PasteStatus.hideMessages();\n            PasteViewer.hide();\n            Editor.resetInput();\n            Editor.show();\n            Editor.focusInput();\n            AttachmentViewer.removeAttachment();\n            TopNav.resetInput();\n\n            TopNav.showCreateButtons();\n\n            // newPaste could be called when user is on paste clone editing view\n            TopNav.hideCustomAttachment();\n            AttachmentViewer.clearDragAndDrop();\n            AttachmentViewer.removeAttachmentData();\n\n            Alert.hideLoading();\n            history.pushState({type: 'create'}, document.title, Helper.baseUri());\n\n            // clear discussion\n            DiscussionViewer.prepareNewDiscussion();\n        };\n\n        /**\n         * shows the loaded paste\n         *\n         * @name   Controller.showPaste\n         * @function\n         */\n        me.showPaste = function()\n        {\n            try {\n                Model.getPasteKey();\n            } catch (err) {\n                console.error(err);\n\n                // missing decryption key (or paste ID) in URL?\n                if (window.location.hash.length === 0) {\n                    Alert.showError('Cannot decrypt paste: Decryption key missing in URL (Did you use a redirector or an URL shortener which strips part of the URL?)');\n                    return;\n                }\n            }\n\n            // show proper elements on screen\n            PasteDecrypter.run();\n        };\n\n        /**\n         * refreshes the loaded paste to show potential new data\n         *\n         * @name   Controller.refreshPaste\n         * @function\n         * @param  {function} callback\n         */\n        me.refreshPaste = function(callback)\n        {\n            // save window position to restore it later\n            const orgPosition = $(window).scrollTop();\n\n            Model.getPasteData(function (data) {\n                ServerInteraction.prepare();\n                ServerInteraction.setUrl(Helper.baseUri() + '?pasteid=' + Model.getPasteId());\n\n                ServerInteraction.setFailure(function (status, data) {\n                    // revert loading status\u2026\n                    Alert.hideLoading();\n                    TopNav.showViewButtons();\n\n                    // show error message\n                    Alert.showError(\n                        ServerInteraction.parseUploadError(status, data, 'refresh display')\n                    );\n                });\n                ServerInteraction.setSuccess(function (status, data) {\n                    PasteDecrypter.run(new Paste(data));\n\n                    // restore position\n                    window.scrollTo(0, orgPosition);\n\n                    // NOTE: could create problems as callback may be called\n                    // asyncronously if PasteDecrypter e.g. needs to wait for a\n                    // password being entered\n                    callback();\n                });\n                ServerInteraction.run();\n            }, false); // this false is important as it circumvents the cache\n        }\n\n        /**\n         * clone the current paste\n         *\n         * @name   Controller.clonePaste\n         * @function\n         */\n        me.clonePaste = function()\n        {\n            TopNav.collapseBar();\n            TopNav.hideAllButtons();\n\n            // hide messages from previous paste\n            me.hideStatusMessages();\n\n            // erase the id and the key in url\n            history.pushState({type: 'clone'}, document.title, Helper.baseUri());\n\n            if (AttachmentViewer.hasAttachment()) {\n                AttachmentViewer.moveAttachmentTo(\n                    TopNav.getCustomAttachment(),\n                    'Cloned: \\'%s\\''\n                );\n                TopNav.hideFileSelector();\n                AttachmentViewer.hideAttachment();\n                // NOTE: it also looks nice without removing the attachment\n                // but for a consistent display we remove it\u2026\n                AttachmentViewer.hideAttachmentPreview();\n                TopNav.showCustomAttachment();\n\n                // show another status message to make the user aware that the\n                // file was cloned too!\n                Alert.showStatus(\n                    [\n                        'The cloned file \\'%s\\' was attached to this paste.',\n                        AttachmentViewer.getAttachment()[1]\n                    ],\n                    'copy'\n                );\n            }\n\n            Editor.setText(PasteViewer.getText());\n            // also clone the format\n            TopNav.setFormat(PasteViewer.getFormat());\n            PasteViewer.hide();\n            Editor.show();\n\n            TopNav.showCreateButtons();\n\n            // clear discussion\n            DiscussionViewer.prepareNewDiscussion();\n        };\n\n        /**\n         * try initializing zlib or display a warning if it fails,\n         * extracted from main init to allow unit testing\n         *\n         * @name   Controller.initZ\n         * @function\n         */\n        me.initZ = function()\n        {\n            z = zlib.catch(function () {\n                if ($('body').data('compression') !== 'none') {\n                    Alert.showWarning('Your browser doesn\\'t support WebAssembly, used for zlib compression. You can create uncompressed documents, but can\\'t read compressed ones.');\n                }\n            });\n        }\n\n        /**\n         * application start\n         *\n         * @name   Controller.init\n         * @function\n         */\n        me.init = function()\n        {\n            // first load translations\n            I18n.loadTranslations();\n\n            // Add a hook to make all links open a new window\n            DOMPurify.addHook('afterSanitizeAttributes', function(node) {\n                // set all elements owning target to target=_blank\n                if ('target' in node && node.id !== 'pasteurl') {\n                    node.setAttribute('target', '_blank');\n                }\n                // set non-HTML/MathML links to xlink:show=new\n                if (!node.hasAttribute('target')\n                    && (node.hasAttribute('xlink:href')\n                        || node.hasAttribute('href'))) {\n                    node.setAttribute('xlink:show', 'new');\n                }\n                if ('rel' in node) {\n                    node.setAttribute('rel', 'nofollow noopener noreferrer');\n                }\n            });\n\n            // center all modals\n            $('.modal').on('show.bs.modal', function(e) {\n                $(e.target).css({\n                    display: 'flex'\n                });\n            });\n\n            // initialize other modules/\"classes\"\n            Alert.init();\n            Model.init();\n            AttachmentViewer.init();\n            DiscussionViewer.init();\n            Editor.init();\n            PasteStatus.init();\n            PasteViewer.init();\n            Prompt.init();\n            TopNav.init();\n            UiHelper.init();\n\n            // check for legacy browsers before going any further\n            if (!Legacy.Check.getInit()) {\n                // Legacy check didn't complete, wait and try again\n                setTimeout(init, 500);\n                return;\n            }\n            if (!Legacy.Check.getStatus()) {\n                // something major is wrong, stop right away\n                return;\n            }\n            me.initZ();\n\n            // if delete token is passed (i.e. paste has been deleted by this\n            // access), there is nothing more to do\n            if (Model.hasDeleteToken()) {\n                return;\n            }\n\n            // check whether existing paste needs to be shown\n            try {\n                Model.getPasteId();\n            } catch (e) {\n                // otherwise create a new paste\n                return me.newPaste();\n            }\n\n            // always reload on back button to invalidate cache(protect burn after read paste)\n            window.addEventListener('popstate', () => {\n                window.location.reload();\n            });\n\n            // display an existing paste\n            return me.showPaste();\n        }\n\n        return me;\n    })(window, document);\n\n    return {\n        Helper: Helper,\n        I18n: I18n,\n        CryptTool: CryptTool,\n        Model: Model,\n        UiHelper: UiHelper,\n        Alert: Alert,\n        PasteStatus: PasteStatus,\n        Prompt: Prompt,\n        Editor: Editor,\n        PasteViewer: PasteViewer,\n        AttachmentViewer: AttachmentViewer,\n        DiscussionViewer: DiscussionViewer,\n        TopNav: TopNav,\n        ServerInteraction: ServerInteraction,\n        PasteEncrypter: PasteEncrypter,\n        PasteDecrypter: PasteDecrypter,\n        Controller: Controller\n    };\n})(jQuery, RawDeflate);\n", "<?php\nuse PrivateBin\\I18n;\n$isCpct = substr($template, 9, 8) === '-compact';\n$isDark = substr($template, 9, 5) === '-dark';\n$isPage = substr($template, -5) === '-page';\n?><!DOCTYPE html>\n<html lang=\"<?php echo I18n::_('en'); ?>\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"<?php echo I18n::encode($CSPHEADER); ?>\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\t\t<meta name=\"robots\" content=\"noindex\" />\n\t\t<meta name=\"google\" content=\"notranslate\">\n\t\t<title><?php echo I18n::_($NAME); ?></title>\n<?php\nif (!$isDark) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/bootstrap-3.4.1.css\" />\n<?php\nendif;\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/bootstrap-theme-3.4.1.css\" />\n<?php\nif ($isDark) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/darkstrap-0.9.3.css\" />\n<?php\nendif;\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/bootstrap/privatebin.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\nif ($SYNTAXHIGHLIGHTING) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/prettify.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    if (strlen($SYNTAXHIGHLIGHTINGTHEME)) :\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/<?php echo rawurlencode($SYNTAXHIGHLIGHTINGTHEME); ?>.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    endif;\nendif;\n?>\n\t\t<noscript><link type=\"text/css\" rel=\"stylesheet\" href=\"css/noscript.css\" /></noscript>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/jquery-3.6.0.js\" integrity=\"sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($QRCODE) :\n?>\n\t\t<script async type=\"text/javascript\" data-cfasync=\"false\" src=\"js/kjua-0.9.0.js\" integrity=\"sha512-CVn7af+vTMBd9RjoS4QM5fpLFEOtBCoB0zPtaqIDC7sF4F8qgUSRFQQpIyEDGsr6yrjbuOLzdf20tkHHmpaqwQ==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($ZEROBINCOMPATIBILITY) :\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base64-1.7.js\" integrity=\"sha512-JdwsSP3GyHR+jaCkns9CL9NTt4JUJqm/BsODGmYhBcj5EAPKcHYh+OiMfyHbcDLECe17TL0hjXADFkusAqiYgA==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/zlib-1.2.11.js\" integrity=\"sha512-Yey/0yoaVmSbqMEyyff3DIu8kCPwpHvHf7tY1AuZ1lrX9NPCMg87PwzngMi+VNbe4ilCApmePeuKT869RTcyCQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base-x-4.0.0.js\" integrity=\"sha512-nNPg5IGCwwrveZ8cA/yMGr5HiRS5Ps2H+s0J/mKTPjCPWUgFGGw7M5nqdnPD3VsRwCVysUh3Y8OWjeSKGkEQJQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/rawinflate-0.3.js\" integrity=\"sha512-g8uelGgJW9A/Z1tB6Izxab++oj5kdD7B4qC7DHwZkB6DGMXKyzx7v5mvap2HXueI2IIn08YlRYM56jwWdm2ucQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/bootstrap-3.4.1.js\" integrity=\"sha512-oBTprMeNEKCnqfuqKd6sbvFzmFQtlXS3e0C/RGFV0hD6QzhHV+ODfaQbAlmY6/q0ubbwlAM/nCJjkrgA3waLzg==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($SYNTAXHIGHLIGHTING) :\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/prettify.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-puO0Ogy++IoA2Pb9IjSxV1n4+kQkKXYAEUtVzfZpQepyDPyXk8hokiYDS7ybMogYlyyEIwMLpZqVhCkARQWLMg==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($MARKDOWN) :\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/showdown-2.0.0.js\" integrity=\"sha512-UB9jpMTOJLSnVzePuqlSGT34G70wEGqtIWabMeAh+Drnj4/uQ8rFkFn1zkN9vkWp/7nA51U2LmP23H5MJvBXsw==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/purify-2.3.6.js\" integrity=\"sha512-N1GGPjbqLbwK821ZN7C925WuTwU4aDxz2CEEOXQ6/s6m6MBwVj8fh5fugiE2hzsm0xud3q7jpjZQ4ILnpMREYQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/legacy.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-LYos+qXHIRqFf5ZPNphvtTB0cgzHUizu2wwcOwcwz/VIpRv9lpcBgPYz4uq6jx0INwCAj6Fbnl5HoKiLufS2jg==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/privatebin.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-5fNML95dptjIMzFG4KAGE2nNbORbyrCWq4ql9tkvoUF2HSnemlxzngQ5PlWhpi0J2ttKIEqfGMBjU5MywzzdWQ==\" crossorigin=\"anonymous\"></script>\n\t\t<!-- icon -->\n\t\t<link rel=\"apple-touch-icon\" href=\"<?php echo I18n::encode($BASEPATH); ?>img/apple-touch-icon.png\" sizes=\"180x180\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-32x32.png\" sizes=\"32x32\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-16x16.png\" sizes=\"16x16\" />\n\t\t<link rel=\"manifest\" href=\"manifest.json?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<link rel=\"mask-icon\" href=\"img/safari-pinned-tab.svg\" color=\"#ffcc00\" />\n\t\t<link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n\t\t<meta name=\"msapplication-config\" content=\"browserconfig.xml\">\n\t\t<meta name=\"theme-color\" content=\"#ffe57e\" />\n\t\t<!-- Twitter/social media cards -->\n\t\t<meta name=\"twitter:card\" content=\"summary\" />\n\t\t<meta name=\"twitter:title\" content=\"<?php echo I18n::_('Encrypted note on PrivateBin') ?>\" />\n\t\t<meta name=\"twitter:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta name=\"twitter:image\" content=\"<?php echo I18n::encode($BASEPATH); ?>img/apple-touch-icon.png\" />\n\t\t<meta property=\"og:title\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:site_name\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta property=\"og:image\" content=\"<?php echo I18n::encode($BASEPATH); ?>img/apple-touch-icon.png\" />\n\t\t<meta property=\"og:image:type\" content=\"image/png\" />\n\t\t<meta property=\"og:image:width\" content=\"180\" />\n\t\t<meta property=\"og:image:height\" content=\"180\" />\n\t</head>\n\t<body role=\"document\" data-compression=\"<?php echo rawurlencode($COMPRESSION); ?>\"<?php\n$class = array();\nif ($isCpct) {\n    $class[] = 'navbar-spacing';\n}\nif ($isDark) {\n    $class[] = 'dark-theme';\n}\nif (count($class)) {\n    echo ' class=\"', implode(' ', $class), '\"';\n}\n?>>\n\t\t<div id=\"passwordmodal\" tabindex=\"-1\" class=\"modal fade\" role=\"dialog\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t<form id=\"passwordform\" role=\"form\">\n\t\t\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t\t\t<label for=\"passworddecrypt\"><span class=\"glyphicon glyphicon-eye-open\"></span> <?php echo I18n::_('Please enter the password for this paste:') ?></label>\n\t\t\t\t\t\t\t\t<input id=\"passworddecrypt\" type=\"password\" class=\"form-control\" placeholder=\"<?php echo I18n::_('Enter password') ?>\" required=\"required\">\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<button type=\"submit\" class=\"btn btn-success btn-block\"><span class=\"glyphicon glyphicon-off\"></span> <?php echo I18n::_('Decrypt') ?></button>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n<?php\nif ($QRCODE) :\n?>\n\t\t<div id=\"qrcodemodal\" tabindex=\"-1\" class=\"modal fade\" aria-labelledby=\"qrcodemodalTitle\" role=\"dialog\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t<div class=\"mx-auto\" id=\"qrcode-display\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"btn-group col-xs-12\">\n\t\t\t\t\t\t\t<span class=\"col-xs-12\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Close') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n<?php\nendif;\n?>\n\t\t<div id=\"emailconfirmmodal\" tabindex=\"-1\" class=\"modal fade\" aria-labelledby=\"emailconfirmmodalTitle\" role=\"dialog\" aria-hidden=\"true\">\n\t\t\t<div class=\"modal-dialog\" role=\"document\">\n\t\t\t\t<div class=\"modal-content\">\n\t\t\t\t\t<div class=\"modal-body\">\n\t\t\t\t\t\t<div id=\"emailconfirm-display\"></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"btn-group col-xs-12\" data-toggle=\"buttons\">\n\t\t\t\t\t\t\t<span class=\"col-xs-12 col-md-4\">\n\t\t\t\t\t\t\t\t<button id=\"emailconfirm-timezone-current\" type=\"button\" class=\"btn btn-danger btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Use Current Timezone') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span class=\"col-xs-12 col-md-4\">\n\t\t\t\t\t\t\t\t<button id=\"emailconfirm-timezone-utc\" type=\"button\" class=\"btn btn-default btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Convert To UTC') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span class=\"col-xs-12 col-md-4\">\n\t\t\t\t\t\t\t\t<button type=\"button\" class=\"btn btn-primary btn-block\" data-dismiss=\"modal\"><?php echo I18n::_('Close') ?></button>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<nav class=\"navbar navbar-<?php echo $isDark ? 'inverse' : 'default'; ?> navbar-<?php echo $isCpct ? 'fixed' : 'static'; ?>-top\"><?php\nif ($isCpct) :\n?><div class=\"container\"><?php\nendif;\n?>\n\t\t\t<div class=\"navbar-header\">\n\t\t\t\t<button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\">\n\t\t\t\t\t<span class=\"sr-only\"><?php echo I18n::_('Toggle navigation'); ?></span>\n\t\t\t\t\t<span class=\"icon-bar\"></span>\n\t\t\t\t\t<span class=\"icon-bar\"></span>\n\t\t\t\t\t<span class=\"icon-bar\"></span>\n\t\t\t\t</button>\n\t\t\t\t<a class=\"reloadlink navbar-brand\" href=\"\">\n\t\t\t\t\t<img alt=\"<?php echo I18n::_($NAME); ?>\" src=\"img/icon.svg\" width=\"38\" />\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div id=\"navbar\" class=\"navbar-collapse collapse\">\n\t\t\t\t<ul class=\"nav navbar-nav\">\n\t\t\t\t\t<li id=\"loadingindicator\" class=\"navbar-text hidden\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-time\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<?php echo I18n::_('Loading\u2026'), PHP_EOL; ?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<button id=\"retrybutton\" type=\"button\" class=\"reloadlink hidden btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-repeat\" aria-hidden=\"true\"></span> <?php echo I18n::_('Retry'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n<?php\nif ($isPage) :\n?>\n\t\t\t\t\t\t<button id=\"sendbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-upload\" aria-hidden=\"true\"></span> <?php echo I18n::_('Send'), PHP_EOL;\nelse :\n?>\n\t\t\t\t\t\t<button id=\"newbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-file\" aria-hidden=\"true\"></span> <?php echo I18n::_('New'), PHP_EOL;\nendif;\n?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"clonebutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-duplicate\" aria-hidden=\"true\"></span> <?php echo I18n::_('Clone'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"rawtextbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-text-background\" aria-hidden=\"true\"></span> <?php echo I18n::_('Raw text'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"downloadtextbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon glyphicon-download-alt\" aria-hidden=\"true\"></span> <?php echo I18n::_('Save paste'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button id=\"emaillink\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-envelope\" aria-hidden=\"true\"></span> <?php echo I18n::_('Email'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n<?php\nif ($QRCODE) :\n?>\n\t\t\t\t\t\t<button id=\"qrcodelink\" type=\"button\" data-toggle=\"modal\" data-target=\"#qrcodemodal\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?> navbar-btn\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-qrcode\" aria-hidden=\"true\"></span> <?php echo I18n::_('QR code'), PHP_EOL; ?>\n\t\t\t\t\t\t</button>\n<?php\nendif;\n?>\n\t\t\t\t\t</li>\n\t\t\t\t\t<li class=\"dropdown\">\n\t\t\t\t\t\t<select id=\"pasteExpiration\" name=\"pasteExpiration\" class=\"hidden\">\n<?php\nforeach ($EXPIRE as $key => $value) :\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n    if ($key == $EXPIREDEFAULT) :\n?> selected=\"selected\"<?php\n    endif;\n?>><?php echo $value; ?></option>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<a id=\"expiration\" href=\"#\" class=\"hidden dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Expires'); ?>: <span id=\"pasteExpirationDisplay\"><?php echo $EXPIRE[$EXPIREDEFAULT]; ?></span> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n<?php\nforeach ($EXPIRE as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-expiration=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value, PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nif ($isCpct) :\n?>\n\t\t\t\t\t<li class=\"dropdown\">\n\t\t\t\t\t\t<a id=\"formatter\" href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Options'); ?> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li id=\"burnafterreadingoption\" class=\"checkbox hidden\">\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"burnafterreading\" name=\"burnafterreading\"<?php\n    if ($BURNAFTERREADINGSELECTED) :\n?> checked=\"checked\"<?php\n    endif;\n?> />\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Burn after reading'), PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</li>\n<?php\n    if ($DISCUSSION) :\n?>\n\t\t\t\t\t\t\t<li id=\"opendiscussionoption\" class=\"checkbox hidden\">\n\t\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"opendiscussion\" name=\"opendiscussion\"<?php\n        if ($OPENDISCUSSION) :\n?> checked=\"checked\"<?php\n        endif;\n?> />\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Open discussion'), PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t</li>\n<?php\n    endif;\n?>\n\t\t\t\t\t\t\t<li role=\"separator\" class=\"divider\"></li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Format'); ?>: <span id=\"pasteFormatterDisplay\"><?php echo $FORMATTER[$FORMATTERDEFAULT]; ?></span> <span class=\"caret\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-format=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value, PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t<select id=\"pasteFormatter\" name=\"pasteFormatter\" class=\"hidden\">\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n        if ($key == $FORMATTERDEFAULT) :\n?> selected=\"selected\"<?php\n        endif;\n?>><?php echo $value; ?></option>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</li>\n<?php\nelse :\n?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div id=\"burnafterreadingoption\" class=\"navbar-text checkbox hidden\">\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"burnafterreading\" name=\"burnafterreading\"<?php\n    if ($BURNAFTERREADINGSELECTED) :\n?> checked=\"checked\"<?php\n    endif;\n?> />\n\t\t\t\t\t\t\t\t<?php echo I18n::_('Burn after reading'), PHP_EOL; ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n<?php\n    if ($DISCUSSION) :\n?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div id=\"opendiscussionoption\" class=\"navbar-text checkbox hidden\">\n\t\t\t\t\t\t\t<label>\n\t\t\t\t\t\t\t\t<input type=\"checkbox\" id=\"opendiscussion\" name=\"opendiscussion\"<?php\n        if ($OPENDISCUSSION) :\n?> checked=\"checked\"<?php\n        endif;\n?> />\n\t\t\t\t\t\t\t\t<?php echo I18n::_('Open discussion'), PHP_EOL; ?>\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n<?php\n    endif;\nendif;\nif ($PASSWORD) :\n?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<div id=\"password\" class=\"navbar-form hidden\">\n\t\t\t\t\t\t\t<input type=\"password\" id=\"passwordinput\" placeholder=\"<?php echo I18n::_('Password (recommended)'); ?>\" class=\"form-control\" size=\"23\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</li>\n<?php\nendif;\nif ($FILEUPLOAD) :\n?>\n\t\t\t\t\t<li id=\"attach\" class=\"hidden dropdown\">\n\t\t\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Attach a file'); ?> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n\t\t\t\t\t\t\t<li id=\"filewrap\">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<input type=\"file\" id=\"file\" name=\"file\" />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div id=\"dragAndDropFileName\" class=\"dragAndDropFile\"><?php echo I18n::_('alternatively drag & drop a file or paste an image from the clipboard'); ?></div>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li id=\"customattachment\" class=\"hidden\"></li>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a id=\"fileremovebutton\"  href=\"#\">\n\t\t\t\t\t\t\t\t\t<?php echo I18n::_('Remove attachment'), PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nendif;\nif (!$isCpct) :\n?>\n\t\t\t\t\t<li class=\"dropdown\">\n\t\t\t\t\t\t<select id=\"pasteFormatter\" name=\"pasteFormatter\" class=\"hidden\">\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n        if ($key == $FORMATTERDEFAULT) :\n?> selected=\"selected\"<?php\n        endif;\n?>><?php echo $value; ?></option>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<a id=\"formatter\" href=\"#\" class=\"hidden dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><?php echo I18n::_('Format'); ?>: <span id=\"pasteFormatterDisplay\"><?php echo $FORMATTER[$FORMATTERDEFAULT]; ?></span> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu\">\n<?php\n    foreach ($FORMATTER as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-format=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value, PHP_EOL; ?>\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nendif;\n?>\n\t\t\t\t</ul>\n\t\t\t\t<ul class=\"nav navbar-nav pull-right\">\n<?php\nif (strlen($LANGUAGESELECTION)) :\n?>\n\t\t\t\t\t<li id=\"language\" class=\"dropdown\">\n\t\t\t\t\t\t<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" role=\"button\" aria-haspopup=\"true\" aria-expanded=\"false\"><span class=\"glyphicon glyphicon-flag\" aria-hidden=\"true\"></span> <?php echo $LANGUAGES[$LANGUAGESELECTION][0]; ?> <span class=\"caret\"></span></a>\n\t\t\t\t\t\t<ul class=\"dropdown-menu dropdown-menu-right\">\n<?php\n    foreach ($LANGUAGES as $key => $value) :\n?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<a href=\"#\" data-lang=\"<?php echo $key; ?>\">\n\t\t\t\t\t\t\t\t\t<?php echo $value[0]; ?> (<?php echo $value[1]; ?>)\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</li>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</li>\n<?php\nendif;\n?>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t<?php\nif ($isCpct) :\n?></div><?php\nendif;\n?></nav>\n\t\t<main>\n\t\t\t<section class=\"container\">\n<?php\nif (strlen($NOTICE)) :\n?>\n\t\t\t\t<div role=\"alert\" class=\"alert alert-info\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::encode($NOTICE), PHP_EOL; ?>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"remainingtime\" role=\"alert\" class=\"hidden alert alert-info\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-fire\" aria-hidden=\"true\"></span>\n\t\t\t\t</div>\n<?php\nif ($FILEUPLOAD) :\n?>\n\t\t\t\t<div id=\"attachment\" role=\"alert\" class=\"hidden alert alert-info\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-download-alt\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<a class=\"alert-link\"><?php echo I18n::_('Download attachment'), PHP_EOL; ?></a>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"status\" role=\"alert\" class=\"alert alert-info<?php echo empty($STATUS) ? ' hidden' : '' ?>\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-info-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::encode($STATUS), PHP_EOL; ?>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"errormessage\" role=\"alert\" class=\"<?php echo empty($ERROR) ? 'hidden' : '' ?> alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::encode($ERROR), PHP_EOL; ?>\n\t\t\t\t</div>\n\t\t\t\t<noscript>\n\t\t\t\t\t<div id=\"noscript\" role=\"alert\" class=\"alert alert-<?php echo $isDark ? 'error' : 'warning'; ?>\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<?php echo I18n::_('JavaScript is required for %s to work. Sorry for the inconvenience.', I18n::_($NAME)), PHP_EOL; ?>\n\t\t\t\t\t</div>\n\t\t\t\t</noscript>\n\t\t\t\t<div id=\"oldnotice\" role=\"alert\" class=\"hidden alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('%s requires a modern browser to work.', I18n::_($NAME)), PHP_EOL; ?>\n\t\t\t\t\t<a href=\"https://www.mozilla.org/firefox/\">Firefox</a>,\n\t\t\t\t\t<a href=\"https://www.opera.com/\">Opera</a>,\n\t\t\t\t\t<a href=\"https://www.google.com/chrome\">Chrome</a>\u2026<br />\n\t\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-the-error-privatebin-requires-a-modern-browser-to-work'); ?></span>\n\t\t\t\t</div>\n<?php\nif ($HTTPWARNING) :\n?>\n\t\t\t\t<div id=\"httpnotice\" role=\"alert\" class=\"hidden alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('This website is using an insecure connection! Please only use it for testing.'), PHP_EOL; ?><br />\n\t\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-an-error-about-an-insecure-connection'); ?></span>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"insecurecontextnotice\" role=\"alert\" class=\"hidden alert alert-danger\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-alert\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('Your browser may require an HTTPS connection to support the WebCrypto API. Try <a href=\"%s\">switching to HTTPS</a>.', $HTTPSLINK); ?>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"pastesuccess\" class=\"hidden\">\n\t\t\t\t\t<div role=\"alert\" class=\"alert alert-success\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-ok\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<div id=\"deletelink\"></div>\n\t\t\t\t\t\t<div id=\"pastelink\"></div>\n\t\t\t\t\t</div>\n<?php\nif (strlen($URLSHORTENER)) :\n?>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<button id=\"shortenbutton\" data-shortener=\"<?php echo I18n::encode($URLSHORTENER); ?>\" type=\"button\" class=\"btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?> btn-block\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-send\" aria-hidden=\"true\"></span> <?php echo I18n::_('Shorten URL'), PHP_EOL; ?>\n\t\t\t\t\t</button>\n\t\t\t\t\t</p>\n\t\t\t\t\t<div role=\"alert\" class=\"alert alert-danger\">\n\t\t\t\t\t\t<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t<?php echo I18n::_('URL shortener may expose your decrypt key in URL.'), PHP_EOL; ?>\n\t\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t</div>\n\t\t\t\t<ul id=\"editorTabs\" class=\"nav nav-tabs hidden\">\n\t\t\t\t\t<li role=\"presentation\" class=\"active\"><a role=\"tab\" aria-selected=\"true\" aria-controls=\"editorTabs\" id=\"messageedit\" href=\"#\"><?php echo I18n::_('Editor'); ?></a></li>\n\t\t\t\t\t<li role=\"presentation\"><a role=\"tab\" aria-selected=\"false\" aria-controls=\"editorTabs\" id=\"messagepreview\" href=\"#\"><?php echo I18n::_('Preview'); ?></a></li>\n\t\t\t\t\t<li role=\"presentation\" class=\"pull-right\">\n<?php\nif ($isPage) :\n?>\n\t\t\t\t\t\t<button id=\"newbutton\" type=\"button\" class=\"reloadlink hidden btn btn-<?php echo $isDark ? 'warning' : 'default'; ?>\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-file\" aria-hidden=\"true\"></span> <?php echo I18n::_('New'), PHP_EOL;\nelse :\n?>\n\t\t\t\t\t\t<button id=\"sendbutton\" type=\"button\" class=\"hidden btn btn-<?php echo $isDark ? 'warning' : 'primary'; ?>\">\n\t\t\t\t\t\t\t<span class=\"glyphicon glyphicon-upload\" aria-hidden=\"true\"></span> <?php echo I18n::_('Send'), PHP_EOL;\nendif;\n?>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</section>\n\t\t\t<section class=\"container\">\n\t\t\t\t<article class=\"row\">\n\t\t\t\t\t<div id=\"placeholder\" class=\"col-md-12 hidden\"><?php echo I18n::_('+++ no paste text +++'); ?></div>\n\t\t\t\t\t<div id=\"attachmentPreview\" class=\"col-md-12 text-center hidden\"></div>\n\t\t\t\t\t<div id=\"prettymessage\" class=\"col-md-12 hidden\">\n\t\t\t\t\t\t<pre id=\"prettyprint\" class=\"col-md-12 prettyprint linenums:1\"></pre>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"plaintext\" class=\"col-md-12 hidden\"></div>\n\t\t\t\t\t<p class=\"col-md-12\"><textarea id=\"message\" name=\"message\" cols=\"80\" rows=\"25\" class=\"form-control hidden\"></textarea></p>\n\t\t\t\t</article>\n\t\t\t</section>\n\t\t\t<section class=\"container\">\n\t\t\t\t<div id=\"discussion\" class=\"hidden\">\n\t\t\t\t\t<h4><?php echo I18n::_('Discussion'); ?></h4>\n\t\t\t\t\t<div id=\"commentcontainer\"></div>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<section class=\"container\">\n\t\t\t\t<div id=\"noscript\" role=\"alert\" class=\"alert alert-info noscript-hide\">\n\t\t\t\t\t<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t<?php echo I18n::_('Loading\u2026'); ?><br />\n\t\t\t\t\t<span class=\"small\"><?php echo I18n::_('In case this message never disappears please have a look at <a href=\"%s\">this FAQ for information to troubleshoot</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-the-loading-message-not-go-away'); ?></span>\n\t\t\t\t</div>\n\t\t\t</section>\n\t\t\t<footer class=\"container\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<h4 class=\"col-md-5 col-xs-8\"><?php echo I18n::_($NAME); ?> <small>- <?php echo I18n::_('Because ignorance is bliss'); ?></small></h4>\n\t\t\t\t\t<p class=\"col-md-1 col-xs-4 text-center\"><?php echo $VERSION; ?></p>\n\t\t\t\t\t<p id=\"aboutbox\" class=\"col-md-6 col-xs-12\">\n\t\t\t\t\t\t<?php echo sprintf(\n                            I18n::_('%s is a minimalist, open source online pastebin where the server has zero knowledge of pasted data. Data is encrypted/decrypted %sin the browser%s using 256 bits AES.',\n                                I18n::_($NAME),\n                                '%s', '%s'\n                            ),\n                            '<i>', '</i>'), ' ', $INFO, PHP_EOL;\n                        ?>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t</footer>\n\t\t</main>\n<?php\nif ($DISCUSSION) :\n?>\n\t\t<div id=\"serverdata\" class=\"hidden\" aria-hidden=\"true\">\n\t\t\t<div id=\"templates\">\n\t\t\t\t<article id=\"commenttemplate\" class=\"comment\"><div class=\"commentmeta\"><span class=\"nickname\">name</span><span class=\"commentdate\">0000-00-00</span></div><div class=\"commentdata\">c</div><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Reply'); ?></button></article>\n\t\t\t\t<p id=\"commenttailtemplate\" class=\"comment\"><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Add comment'); ?></button></p>\n\t\t\t\t<div id=\"replytemplate\" class=\"reply hidden\"><input type=\"text\" id=\"nickname\" class=\"form-control\" title=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" placeholder=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" /><textarea id=\"replymessage\" class=\"replymessage form-control\" cols=\"80\" rows=\"7\"></textarea><br /><div id=\"replystatus\" role=\"alert\" class=\"statusmessage hidden alert\"><span class=\"glyphicon\" aria-hidden=\"true\"></span> </div><button id=\"replybutton\" class=\"btn btn-default btn-sm\"><?php echo I18n::_('Post comment'); ?></button></div>\n\t\t\t</div>\n\t\t</div>\n<?php\nendif;\n?>\n<?php\nif ($FILEUPLOAD) :\n?>\n\t\t<div id=\"dropzone\" class=\"hidden\" tabindex=\"-1\" aria-hidden=\"true\"></div>\n<?php\nendif;\n?>\n\t</body>\n</html>\n", "<?php\nuse PrivateBin\\I18n;\n?><!DOCTYPE html>\n<html lang=\"<?php echo I18n::_('en'); ?>\">\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<meta http-equiv=\"Content-Security-Policy\" content=\"<?php echo I18n::encode($CSPHEADER); ?>\">\n\t\t<meta name=\"robots\" content=\"noindex\" />\n\t\t<meta name=\"google\" content=\"notranslate\">\n\t\t<title><?php echo I18n::_($NAME); ?></title>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/privatebin.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\nif ($SYNTAXHIGHLIGHTING):\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/prettify.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    if (strlen($SYNTAXHIGHLIGHTINGTHEME)):\n?>\n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"css/prettify/<?php echo rawurlencode($SYNTAXHIGHLIGHTINGTHEME); ?>.css?<?php echo rawurlencode($VERSION); ?>\" />\n<?php\n    endif;\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/jquery-3.6.0.js\" integrity=\"sha512-894YE6QWD5I59HgZOGReFYm4dnWc1Qt5NtvYSaNcOP+u1T9qYdvdihz0PPSiiqn/+/3e7Jo4EaG7TubfWGUrMQ==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($QRCODE):\n?>\n\t\t<script async type=\"text/javascript\" data-cfasync=\"false\" src=\"js/kjua-0.9.0.js\" integrity=\"sha512-CVn7af+vTMBd9RjoS4QM5fpLFEOtBCoB0zPtaqIDC7sF4F8qgUSRFQQpIyEDGsr6yrjbuOLzdf20tkHHmpaqwQ==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($ZEROBINCOMPATIBILITY):\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base64-1.7.js\" integrity=\"sha512-JdwsSP3GyHR+jaCkns9CL9NTt4JUJqm/BsODGmYhBcj5EAPKcHYh+OiMfyHbcDLECe17TL0hjXADFkusAqiYgA==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/zlib-1.2.11.js\" integrity=\"sha512-Yey/0yoaVmSbqMEyyff3DIu8kCPwpHvHf7tY1AuZ1lrX9NPCMg87PwzngMi+VNbe4ilCApmePeuKT869RTcyCQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/base-x-4.0.0.js\" integrity=\"sha512-nNPg5IGCwwrveZ8cA/yMGr5HiRS5Ps2H+s0J/mKTPjCPWUgFGGw7M5nqdnPD3VsRwCVysUh3Y8OWjeSKGkEQJQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/rawinflate-0.3.js\" integrity=\"sha512-g8uelGgJW9A/Z1tB6Izxab++oj5kdD7B4qC7DHwZkB6DGMXKyzx7v5mvap2HXueI2IIn08YlRYM56jwWdm2ucQ==\" crossorigin=\"anonymous\"></script>\n<?php\nif ($SYNTAXHIGHLIGHTING):\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/prettify.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-puO0Ogy++IoA2Pb9IjSxV1n4+kQkKXYAEUtVzfZpQepyDPyXk8hokiYDS7ybMogYlyyEIwMLpZqVhCkARQWLMg==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\nif ($MARKDOWN):\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/showdown-2.0.0.js\" integrity=\"sha512-UB9jpMTOJLSnVzePuqlSGT34G70wEGqtIWabMeAh+Drnj4/uQ8rFkFn1zkN9vkWp/7nA51U2LmP23H5MJvBXsw==\" crossorigin=\"anonymous\"></script>\n<?php\nendif;\n?>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/purify-2.3.6.js\" integrity=\"sha512-N1GGPjbqLbwK821ZN7C925WuTwU4aDxz2CEEOXQ6/s6m6MBwVj8fh5fugiE2hzsm0xud3q7jpjZQ4ILnpMREYQ==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/legacy.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-LYos+qXHIRqFf5ZPNphvtTB0cgzHUizu2wwcOwcwz/VIpRv9lpcBgPYz4uq6jx0INwCAj6Fbnl5HoKiLufS2jg==\" crossorigin=\"anonymous\"></script>\n\t\t<script type=\"text/javascript\" data-cfasync=\"false\" src=\"js/privatebin.js?<?php echo rawurlencode($VERSION); ?>\" integrity=\"sha512-5fNML95dptjIMzFG4KAGE2nNbORbyrCWq4ql9tkvoUF2HSnemlxzngQ5PlWhpi0J2ttKIEqfGMBjU5MywzzdWQ==\" crossorigin=\"anonymous\"></script>\n\t\t<!-- icon -->\n\t\t<link rel=\"apple-touch-icon\" href=\"img/apple-touch-icon.png?<?php echo rawurlencode($VERSION); ?>\" sizes=\"180x180\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-32x32.png?<?php echo rawurlencode($VERSION); ?>\" sizes=\"32x32\" />\n\t\t<link rel=\"icon\" type=\"image/png\" href=\"img/favicon-16x16.png?<?php echo rawurlencode($VERSION); ?>\" sizes=\"16x16\" />\n\t\t<link rel=\"manifest\" href=\"manifest.json?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<link rel=\"mask-icon\" href=\"img/safari-pinned-tab.svg?<?php echo rawurlencode($VERSION); ?>\" color=\"#ffcc00\" />\n\t\t<link rel=\"shortcut icon\" href=\"img/favicon.ico\">\n\t\t<meta name=\"msapplication-config\" content=\"browserconfig.xml\">\n\t\t<meta name=\"theme-color\" content=\"#ffe57e\" />\n\t\t<!-- Twitter/social media cards -->\n\t\t<meta name=\"twitter:card\" content=\"summary\" />\n\t\t<meta name=\"twitter:title\" content=\"<?php echo I18n::_('Encrypted note on PrivateBin') ?>\" />\n\t\t<meta name=\"twitter:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta name=\"twitter:image\" content=\"img/apple-touch-icon.png?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<meta property=\"og:title\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:site_name\" content=\"<?php echo I18n::_($NAME); ?>\" />\n\t\t<meta property=\"og:description\" content=\"<?php echo I18n::_('Visit this link to see the note. Giving the URL to anyone allows them to access the note, too.') ?>\" />\n\t\t<meta property=\"og:image\" content=\"img/apple-touch-icon.png?<?php echo rawurlencode($VERSION); ?>\" />\n\t\t<meta property=\"og:image:type\" content=\"image/png\" />\n\t\t<meta property=\"og:image:width\" content=\"180\" />\n\t\t<meta property=\"og:image:height\" content=\"180\" />\n\t</head>\n\t<body data-compression=\"<?php echo rawurlencode($COMPRESSION); ?>\">\n\t\t<header>\n\t\t\t<div id=\"aboutbox\">\n\t\t\t\t<?php echo sprintf(\n                    I18n::_('%s is a minimalist, open source online pastebin where the server has zero knowledge of pasted data. Data is encrypted/decrypted %sin the browser%s using 256 bits AES.',\n                        I18n::_($NAME),\n                        '%s', '%s'\n                    ),\n                    '<i>', '</i>'), ' ', $INFO;\n                ?>\n\t\t\t\t<br />\n<?php\nif (strlen($NOTICE)):\n?>\n\t\t\t\t<span class=\"blink\">\u25b6</span> <?php echo I18n::encode($NOTICE);\nendif;\n?>\n\t\t\t</div>\n\t\t\t<h1 class=\"title reloadlink\"><?php echo I18n::_($NAME); ?></h1><br />\n\t\t\t<h2 class=\"title\"><?php echo I18n::_('Because ignorance is bliss'); ?></h2><br />\n\t\t\t<h3 class=\"title\"><?php echo $VERSION; ?></h3>\n\t\t\t<noscript><div id=\"noscript\" class=\"nonworking\"><?php echo I18n::_('JavaScript is required for %s to work. Sorry for the inconvenience.', I18n::_($NAME)); ?></div></noscript>\n\t\t\t<div id=\"oldnotice\" class=\"nonworking hidden\">\n\t\t\t\t<?php echo I18n::_('%s requires a modern browser to work.', I18n::_($NAME)), PHP_EOL; ?>\n\t\t\t\t<a href=\"https://www.mozilla.org/firefox/\">Firefox</a>,\n\t\t\t\t<a href=\"https://www.opera.com/\">Opera</a>,\n\t\t\t\t<a href=\"https://www.google.com/chrome\">Chrome</a>\u2026<br />\n\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-the-error-privatebin-requires-a-modern-browser-to-work'); ?></span>\n\t\t\t</div>\n<?php\nif ($HTTPWARNING):\n?>\n\t\t\t<div id=\"httpnotice\" class=\"errorMessage hidden\">\n\t\t\t\t<?php echo I18n::_('This website is using an insecure connection! Please only use it for testing.'); ?><br />\n\t\t\t\t<span class=\"small\"><?php echo I18n::_('For more information <a href=\"%s\">see this FAQ entry</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-it-show-me-an-error-about-an-insecure-connection'); ?></span>\n\t\t\t</div>\n\t\t\t<div id=\"insecurecontextnotice\" class=\"errorMessage hidden\">\n\t\t\t\t<?php echo I18n::_('Your browser may require an HTTPS connection to support the WebCrypto API. Try <a href=\"%s\">switching to HTTPS</a>.', $HTTPSLINK); ?>\n\t\t\t</div>\n<?php\nendif;\n?>\n\t\t</header>\n\t\t<section>\n\t\t\t<article>\n\t\t\t\t<div id=\"loadingindicator\" class=\"hidden\"><?php echo I18n::_('Loading\u2026'); ?></div>\n\t\t\t\t<div id=\"status\"><?php echo I18n::encode($STATUS); ?></div>\n\t\t\t\t<div id=\"errormessage\" class=\"hidden\"><?php echo I18n::encode($ERROR); ?></div>\n\t\t\t\t<div id=\"toolbar\">\n\t\t\t\t\t<button id=\"newbutton\" class=\"reloadlink hidden\"><img src=\"img/icon_new.png\" width=\"11\" height=\"15\" alt=\"\" /><?php echo I18n::_('New'); ?></button>\n\t\t\t\t\t<button id=\"retrybutton\" class=\"reloadlink hidden\"><?php echo I18n::_('Retry'), PHP_EOL; ?></button>\n\t\t\t\t\t<button id=\"sendbutton\" class=\"hidden\"><img src=\"img/icon_send.png\" width=\"18\" height=\"15\" alt=\"\" /><?php echo I18n::_('Send'); ?></button>\n\t\t\t\t\t<button id=\"clonebutton\" class=\"hidden\"><img src=\"img/icon_clone.png\" width=\"15\" height=\"17\" alt=\"\" /><?php echo I18n::_('Clone'); ?></button>\n\t\t\t\t\t<button id=\"rawtextbutton\" class=\"hidden\"><img src=\"img/icon_raw.png\" width=\"15\" height=\"15\" alt=\"\" /><?php echo I18n::_('Raw text'); ?></button>\n\t\t\t\t\t<button id=\"downloadtextbutton\" class=\"hidden\"><?php echo I18n::_('Save paste'), PHP_EOL; ?></button>\n\t\t\t\t\t<button id=\"emaillink\" class=\"hidden\"><img src=\"img/icon_email.png\" width=\"15\" height=\"15\" alt=\"\" /><?php echo I18n::_('Email'); ?></button>\n<?php\nif ($QRCODE):\n?>\n\t\t\t\t\t<button id=\"qrcodelink\" class=\"hidden\"><img src=\"img/icon_qr.png\" width=\"15\" height=\"15\" alt=\"\" /><?php echo I18n::_('QR code'); ?></button>\n<?php\nendif;\n?>\n\t\t\t\t\t<div id=\"expiration\" class=\"hidden button\"><?php echo I18n::_('Expires'); ?>:\n\t\t\t\t\t\t<select id=\"pasteExpiration\" name=\"pasteExpiration\">\n<?php\nforeach ($EXPIRE as $key => $value):\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n    if ($key == $EXPIREDEFAULT):\n?> selected=\"selected\"<?php\n    endif;\n?>><?php echo $value; ?></option>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"remainingtime\" class=\"hidden\"></div>\n\t\t\t\t\t<div id=\"burnafterreadingoption\" class=\"button hidden\">\n\t\t\t\t\t\t<input type=\"checkbox\" id=\"burnafterreading\" name=\"burnafterreading\"<?php\nif ($BURNAFTERREADINGSELECTED):\n?> checked=\"checked\"<?php\nendif;\n?> />\n\t\t\t\t\t\t<label for=\"burnafterreading\"><?php echo I18n::_('Burn after reading'); ?></label>\n\t\t\t\t\t</div>\n<?php\nif ($DISCUSSION):\n?>\n\t\t\t\t\t<div id=\"opendiscussionoption\" class=\"button hidden\">\n\t\t\t\t\t\t<input type=\"checkbox\" id=\"opendiscussion\" name=\"opendiscussion\"<?php\n    if ($OPENDISCUSSION):\n?> checked=\"checked\"<?php\n    endif;\n?> />\n\t\t\t\t\t\t<label for=\"opendiscussion\"><?php echo I18n::_('Open discussion'); ?></label>\n\t\t\t\t\t</div>\n<?php\nendif;\nif ($PASSWORD):\n?>\n\t\t\t\t\t<div id=\"password\" class=\"hidden\">\n\t\t\t\t\t\t<input type=\"password\" id=\"passwordinput\" placeholder=\"<?php echo I18n::_('Password (recommended)'); ?>\" size=\"32\" />\n\t\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t\t<div id=\"formatter\" class=\"button hidden\"><?php echo I18n::_('Format'); ?>:\n\t\t\t\t\t\t<select id=\"pasteFormatter\" name=\"pasteFormatter\">\n<?php\nforeach ($FORMATTER as $key => $value):\n?>\n\t\t\t\t\t\t\t<option value=\"<?php echo $key; ?>\"<?php\n    if ($key == $FORMATTERDEFAULT):\n?> selected=\"selected\"<?php\n    endif;\n?>><?php echo $value; ?></option>\n<?php\nendforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n<?php\nif (strlen($LANGUAGESELECTION)):\n?>\n\t\t\t\t\t<div id=\"language\" class=\"button\">\n\t\t\t\t\t\t<select name=\"lang\">\n<?php\n    foreach ($LANGUAGES as $key => $value):\n?>\n\t\t\t\t\t\t\t<option data-lang=\"<?php echo $key; ?>\" value=\"<?php echo $key; ?>\"<?php\n        if ($key == $LANGUAGESELECTION):\n?> selected=\"selected\"<?php\n        endif;\n?>><?php echo $value[0]; ?> (<?php echo $value[1]; ?>)</option>\n<?php\n    endforeach;\n?>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t</div>\n<?php\nif ($QRCODE):\n?>\n\t\t\t\t<div id=\"qrcode-display\"></div>\n<?php\nendif;\n?>\t\t\t\t<div id=\"pastesuccess\" class=\"hidden\">\n\t\t\t\t\t<div id=\"deletelink\"></div>\n\t\t\t\t\t<div id=\"pastelink\"></div>\n<?php\nif (strlen($URLSHORTENER)):\n?>\n\t\t\t\t\t<button id=\"shortenbutton\" data-shortener=\"<?php echo I18n::encode($URLSHORTENER); ?>\"><img src=\"img/icon_shorten.png\" width=\"13\" height=\"15\" /><?php echo I18n::_('Shorten URL'); ?></button>\n<?php\nendif;\n?>\n\t\t\t\t</div>\n<?php\nif ($FILEUPLOAD):\n?>\n\t\t\t\t<div id=\"attachment\" class=\"hidden\"><a><?php echo I18n::_('Download attachment'); ?></a></div>\n\t\t\t\t<div id=\"attach\" class=\"hidden\">\n\t\t\t\t\t<span id=\"clonedfile\" class=\"hidden\"><?php echo I18n::_('Cloned file attached.'); ?></span>\n\t\t\t\t\t<span id=\"filewrap\"><?php echo I18n::_('Attach a file'); ?>: <input type=\"file\" id=\"file\" name=\"file\" /></span>\n\t\t\t\t\t<span id=\"dragAndDropFileName\" class=\"dragAndDropFile\"><?php echo I18n::_('alternatively drag & drop a file or paste an image from the clipboard'); ?></span>\n\t\t\t\t\t<button id=\"fileremovebutton\"><?php echo I18n::_('Remove attachment'); ?></button>\n\t\t\t\t</div>\n<?php\nendif;\n?>\n\t\t\t\t<div id=\"preview\" class=\"hidden\">\n\t\t\t\t\t<button id=\"messageedit\"><?php echo I18n::_('Editor'); ?></button>\n\t\t\t\t\t<button id=\"messagepreview\"><?php echo I18n::_('Preview'); ?></button>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"attachmentPreview\" class=\"hidden\"></div>\n\t\t\t\t<div id=\"prettymessage\" class=\"hidden\">\n\t\t\t\t\t<pre id=\"prettyprint\" class=\"prettyprint linenums:1\"></pre>\n\t\t\t\t</div>\n\t\t\t\t<div id=\"plaintext\" class=\"hidden\"></div>\n\t\t\t\t<textarea id=\"message\" name=\"message\" cols=\"80\" rows=\"25\" class=\"hidden\"></textarea>\n\t\t\t</article>\n\t\t</section>\n\t\t<section>\n\t\t\t<div id=\"discussion\" class=\"hidden\">\n\t\t\t\t<h4 class=\"title\"><?php echo I18n::_('Discussion'); ?></h4>\n\t\t\t\t<div id=\"commentcontainer\"></div>\n\t\t\t</div>\n\t\t</section>\n<?php\nif ($DISCUSSION):\n?>\n\t\t<div id=\"serverdata\" class=\"hidden\" aria-hidden=\"true\">\n\t\t\t<div id=\"templates\">\n\t\t\t\t<article id=\"commenttemplate\" class=\"comment\"><div class=\"commentmeta\"><span class=\"nickname\">name</span><span class=\"commentdate\">0000-00-00</span></div><div class=\"commentdata\">c</div><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Reply'); ?></button></article>\n\t\t\t\t<div id=\"commenttailtemplate\" class=\"comment\"><button class=\"btn btn-default btn-sm\"><?php echo I18n::_('Add comment'); ?></button></div>\n\t\t\t\t<div id=\"replytemplate\" class=\"reply hidden\"><input type=\"text\" id=\"nickname\" class=\"form-control\" title=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" placeholder=\"<?php echo I18n::_('Optional nickname\u2026'); ?>\" /><textarea id=\"replymessage\" class=\"replymessage form-control\" cols=\"80\" rows=\"7\"></textarea><br /><div id=\"replystatus\" role=\"alert\" class=\"statusmessage hidden alert\"><span class=\"glyphicon\" aria-hidden=\"true\"></span> </div><button id=\"replybutton\" class=\"btn btn-default btn-sm\"><?php echo I18n::_('Post comment'); ?></button></div>\n\t\t\t</div>\n\t\t</div>\n<?php\nendif;\n?>\n<?php\nif ($FILEUPLOAD):\n?>\n\t\t<div id=\"dropzone\" class=\"hidden\" tabindex=\"-1\" aria-hidden=\"true\"></div>\n<?php\nendif;\n?>\n\t\t<section class=\"container\">\n\t\t\t<div id=\"noscript\" role=\"alert\" class=\"nonworking alert alert-info noscript-hide\"><span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\">\n\t\t\t\t<span> <?php echo I18n::_('Loading\u2026'); ?></span><br>\n\t\t\t\t<span class=\"small\"><?php echo I18n::_('In case this message never disappears please have a look at <a href=\"%s\">this FAQ for information to troubleshoot</a>.', 'https://github.com/PrivateBin/PrivateBin/wiki/FAQ#why-does-the-loading-message-not-go-away'); ?></span>\n\t\t\t</div>\n\t\t</section>\n\t</body>\n</html>\n"], "filenames": ["CHANGELOG.md", "js/privatebin.js", "tpl/bootstrap.php", "tpl/page.php"], "buggy_code_start_loc": [12, 53, 76, 54], "buggy_code_end_loc": [17, 5402, 77, 55], "fixing_code_start_loc": [13, 54, 76, 54], "fixing_code_end_loc": [20, 5453, 77, 55], "type": "CWE-79", "message": "PrivateBin is minimalist, open source online pastebin clone where the server has zero knowledge of pasted data. In PrivateBin < v1.4.0 a cross-site scripting (XSS) vulnerability was found. The vulnerability is present in all versions from v0.21 of the project, which was at the time still called ZeroBin. The issue is caused by the fact that SVGs can contain JavaScript. This can allow an attacker to execute code, if the user opens a paste with a specifically crafted SVG attachment, and interacts with the preview image and the instance isn't protected by an appropriate content security policy. Users are advised to either upgrade to version 1.4.0 or to ensure the content security policy of their instance is set correctly.", "other": {"cve": {"id": "CVE-2022-24833", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-11T21:15:08.640", "lastModified": "2022-04-19T15:29:15.200", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrivateBin is minimalist, open source online pastebin clone where the server has zero knowledge of pasted data. In PrivateBin < v1.4.0 a cross-site scripting (XSS) vulnerability was found. The vulnerability is present in all versions from v0.21 of the project, which was at the time still called ZeroBin. The issue is caused by the fact that SVGs can contain JavaScript. This can allow an attacker to execute code, if the user opens a paste with a specifically crafted SVG attachment, and interacts with the preview image and the instance isn't protected by an appropriate content security policy. Users are advised to either upgrade to version 1.4.0 or to ensure the content security policy of their instance is set correctly."}, {"lang": "es", "value": "PrivateBin es un clon de pastebin online minimalista y de c\u00f3digo abierto en el que el servidor no presenta conocimiento de los datos pegados. En PrivateBin versiones anteriores a v1.4.0, se ha encontrado una vulnerabilidad de tipo cross-site scripting (XSS). La vulnerabilidad est\u00e1 presente en todas las versiones a partir de la versi\u00f3n v0.21 del proyecto, que en ese momento todav\u00eda era llamado ZeroBin. El problema est\u00e1 causado por el hecho de que los SVG pueden contener JavaScript. Esto puede permitir a un atacante ejecutar c\u00f3digo, si el usuario abre una pasta con un archivo adjunto SVG espec\u00edficamente dise\u00f1ado, e interact\u00faa con la imagen de vista previa y la instancia no est\u00e1 protegida por una pol\u00edtica de seguridad de contenido apropiada. Es recomendado a usuarios actualizar a versi\u00f3n 1.4.0, o que aseguren de que la pol\u00edtica de seguridad de contenidos de su instancia est\u00e1 configurada correctamente"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 8.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:privatebin:privatebin:*:*:*:*:*:*:*:*", "versionStartIncluding": "0.21", "versionEndExcluding": "1.4.0", "matchCriteriaId": "CC75A39A-6AC5-40B1-A781-48691EC6720F"}]}]}], "references": [{"url": "https://github.com/PrivateBin/PrivateBin/commit/2a4d572c1e9eb9b608d32b0cc0cb3b6c3b684eab", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrivateBin/PrivateBin/security/advisories/GHSA-cqcc-mm6x-vmvw", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrivateBin/PrivateBin/commit/2a4d572c1e9eb9b608d32b0cc0cb3b6c3b684eab"}}