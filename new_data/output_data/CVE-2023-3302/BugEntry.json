{"buggy_code": ["<?php\n/**\n ***********************************************************************************************\n * Class manages the list configuration\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * This class creates a list configuration object. With this object it's possible\n * to manage the configuration in the database. You can easily create new lists,\n * add new columns or remove columns. The object will only list columns of the configuration\n * which the current user is allowed to view.\n */\nclass ListConfiguration extends TableLists\n{\n    /**\n     * @var array<int,TableAccess> Array with all columns of the current list\n     */\n    protected $columns = array();\n    /**\n     * @var array<int,TableAccess> array with all column names of the sql statement that belong to the select clause\n     */\n    protected $columnsSqlNames = array();\n    /**\n     * @var array<int,string> Array with the usr_id as key and the first name, last name as values\n     */\n    protected $arrUserNames = array();\n    /**\n     * @var boolean Flag if only the name of the user (first name, last name) should be shown and all other fields\n     * should be removed.\n     */\n    protected $showOnlyNames = false;\n\n    /**\n     * Constructor that will create an object to handle the configuration of lists.\n     * @param Database $database Object of the class Database. This should be the default global object **$gDb**.\n     * @param int      $lstId    The id of the recordset that should be loaded. If id isn't set than an empty object of the table is created.\n     */\n    public function __construct(Database $database, $lstId = 0)\n    {\n        parent::__construct($database, $lstId);\n\n        if ($lstId > 0) {\n            $this->readColumns();\n        }\n    }\n\n    /**\n     * Add new column to column array. The number of the column will be the maximum number of the current\n     * array plus one. The special field usr_uuid could only be added by users with the right to edit all users.\n     * @param int|string $field  Usf-Id of a profile field or the name of a special field.\n     * @param int        $number Optional the number of the column. This is useful if the list already exists\n     *                           and maybe the profile field changed the position within the list.\n     * @param string     $sort   Optional the value **ASC** for ascending and **DESC** for descending.\n     * @param string     $filter Optional a filter for the values of that column.\n     * @return bool Returns true if the field was added to the column list.\n     */\n    public function addColumn($field, $number = 0, $sort = '', $filter = '')\n    {\n        global $gCurrentUser;\n\n        if($number === 0) {\n            // current number of the new column\n            $number = count($this->columns) + 1;\n        }\n\n        // can join max. 61 tables\n        // Passed parameters must be set carefully\n        if (strlen($field) === 0 || $field === 0 || count($this->columns) >= 57) {\n            return false;\n        }\n\n        // uuid could only be added by an administrator\n        if($field === 'usr_uuid' && !$gCurrentUser->editUsers()) {\n            return false;\n        }\n\n        // If column doesn't exist create object\n        if (!array_key_exists($number, $this->columns)) {\n            $this->columns[$number] = new TableAccess($this->db, TBL_LIST_COLUMNS, 'lsc');\n            $this->columns[$number]->setValue('lsc_lst_id', (int) $this->getValue('lst_id'));\n        }\n\n        // Assign content of column\n        if (is_numeric($field)) {\n            $this->columns[$number]->setValue('lsc_usf_id', $field);\n            $this->columns[$number]->setValue('lsc_special_field', '');\n        } else {\n            $this->columns[$number]->setValue('lsc_usf_id', '');\n            $this->columns[$number]->setValue('lsc_special_field', $field);\n        }\n\n        $this->columns[$number]->setValue('lsc_number', $number);\n        $this->columns[$number]->setValue('lsc_sort', $sort);\n        $this->columns[$number]->setValue('lsc_filter', $filter);\n\n        return true;\n    }\n\n    public function clear()\n    {\n        $this->columns = array();\n        $this->columnsSqlNames = array();\n\n        parent::clear();\n    }\n\n    /**\n     * Return count of columns\n     * @return int\n     */\n    public function countColumns()\n    {\n        return count($this->columns);\n    }\n\n    /**\n     * Convert the content of the column independence of the output format.\n     * Therefore, the method will check which datatype the column has and which format the\n     * output should have.\n     * @param int $columnNumber Number of the column for which the content should be converted.\n     * @param string $format    The following formats are possible 'html', 'print', 'csv' or 'pdf'\n     * @param string $content   The content that should be converted.\n     * @param string $userUuid  Uuid of the user for which the content should be converted. This is not the login user.\n     * @return string Returns the converted content.\n     */\n    public function convertColumnContentForOutput(int $columnNumber, string $format, string $content, string $userUuid)\n    {\n        global $gDb, $gProfileFields, $gL10n, $gSettingsManager;\n\n        $column = $this->getColumnObject($columnNumber);\n\n        $usfId = 0;\n        if ($column->getValue('lsc_usf_id') > 0) {\n            // check if customs field and remember\n            $usfId = (int) $column->getValue('lsc_usf_id');\n        }\n\n        // in some cases the content must have a special output format\n\n        if ($usfId > 0 && $usfId === (int) $gProfileFields->getProperty('COUNTRY', 'usf_id')) {\n            $content = $gL10n->getCountryName($content);\n        } elseif ($column->getValue('lsc_special_field') === 'usr_photo') {\n            // show user photo\n            if (in_array($format, array('html', 'print'), true)) {\n                $content = '<img src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/profile/profile_photo_show.php', array('user_uuid' => $userUuid)).'\" style=\"vertical-align: middle;\" alt=\"'.$gL10n->get('SYS_PROFILE_PHOTO').'\" />';\n            }\n            if (in_array($format, array('csv', 'pdf'), true) && $content != null) {\n                $content = $gL10n->get('SYS_PROFILE_PHOTO');\n            }\n        } elseif ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'CHECKBOX') {\n            if (in_array($format, array('csv', 'pdf'), true)) {\n                if ($content == 1) {\n                    $content = $gL10n->get('SYS_YES');\n                } else {\n                    $content = $gL10n->get('SYS_NO');\n                }\n            } elseif ($content != 1) {\n                $content = 0;\n            }\n        } elseif ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'DATE'\n        || $column->getValue('lsc_special_field') === 'mem_begin'\n        || $column->getValue('lsc_special_field') === 'mem_end') {\n            if (strlen($content) > 0) {\n                // date must be formated\n                $date = \\DateTime::createFromFormat('Y-m-d', $content);\n                $content = $date->format($gSettingsManager->getString('system_date'));\n            }\n        } elseif (in_array($format, array('csv', 'pdf'), true)\n        &&    ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'DROPDOWN'\n            || $gProfileFields->getPropertyById($usfId, 'usf_type') === 'RADIO_BUTTON')) {\n            if (strlen($content) > 0) {\n                // show selected text of optionfield or combobox\n                $arrListValues = $gProfileFields->getPropertyById($usfId, 'usf_value_list', 'text');\n                $content = $arrListValues[$content];\n            }\n        } elseif (in_array($column->getValue('lsc_special_field'), array('usr_timestamp_create', 'usr_timestamp_change', 'mem_timestamp_change'))) {\n            if (strlen($content) > 0) {\n                // date must be formated\n                $date = \\DateTime::createFromFormat('Y-m-d H:i:s', $content);\n                $content = $date->format($gSettingsManager->getString('system_date') . ' ' . $gSettingsManager->getString('system_time'));\n            }\n        } elseif ($column->getValue('lsc_special_field') === 'mem_approved') {\n            // Assign Integer to Language strings\n            switch ((int) $content) {\n                case ModuleDates::MEMBER_APPROVAL_STATE_INVITED:\n                    $text = $gL10n->get('DAT_USER_INVITED');\n                    $htmlText = '<i class=\"fas fa-calendar-check admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = '';\n                    break;\n                case ModuleDates::MEMBER_APPROVAL_STATE_ATTEND:\n                    $text = $gL10n->get('DAT_USER_ATTEND');\n                    $htmlText = '<i class=\"fas fa-check-circle admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = 'admidio-event-approval-state-attend';\n                    break;\n                case ModuleDates::MEMBER_APPROVAL_STATE_TENTATIVE:\n                    $text = $gL10n->get('DAT_USER_TENTATIVE');\n                    $htmlText = '<i class=\"fas fa-question-circle admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = 'admidio-event-approval-state-tentative';\n                    break;\n                case ModuleDates::MEMBER_APPROVAL_STATE_REFUSED:\n                    $text = $gL10n->get('DAT_USER_REFUSED');\n                    $htmlText = '<i class=\"fas fa-times-circle admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = 'admidio-event-approval-state-cancel';\n                    break;\n            }\n\n            if ($format === 'csv') {\n                $content = $text;\n            } else {\n                if ($format === 'html') {\n                    $content = '<span class=\"' . $buttonClass . '\">' . $htmlText . '</span>';\n                } else {\n                    $content = $htmlText;\n                }\n            }\n        } elseif (in_array($column->getValue('lsc_special_field'), array('usr_usr_id_create', 'usr_usr_id_change', 'mem_usr_id_change')) && (int) $content) {\n            // Get User Information and store information in array\n            $userId = (int) $content;\n\n            if(array_key_exists($userId, $this->arrUserNames)) {\n                $content = $this->arrUserNames[$userId];\n            } else {\n                $user = new User($gDb, $gProfileFields, $userId);\n                $content = $user->getValue('LAST_NAME') . ', ' . $user->getValue('FIRST_NAME');\n                $this->arrUserNames[$userId] = $content;\n            }\n        }\n\n        // format value for csv export\n        if ($format === 'csv') {\n            $outputContent = $content;\n        }\n        // pdf should show only text and not much html content\n        elseif ($format === 'pdf') {\n            $outputContent = $content;\n        }\n        // create output in html layout\n        else {\n            // firstname and lastname get a link to the profile\n            if ($format === 'html'\n            &&    ($usfId === (int) $gProfileFields->getProperty('LAST_NAME', 'usf_id')\n                || $usfId === (int) $gProfileFields->getProperty('FIRST_NAME', 'usf_id'))) {\n                $htmlValue = $gProfileFields->getHtmlValue($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $content, $userUuid);\n                $outputContent = '<a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/profile/profile.php', array('user_uuid' => $userUuid)).'\">'.$htmlValue.'</a>';\n            } else {\n                // within print mode no links should be set\n                if ($format === 'print'\n                &&    ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'EMAIL'\n                    || $gProfileFields->getPropertyById($usfId, 'usf_type') === 'PHONE'\n                    || $gProfileFields->getPropertyById($usfId, 'usf_type') === 'URL')) {\n                    $outputContent = $content;\n                } else {\n                    // checkbox must set a sorting value\n                    if ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'CHECKBOX') {\n                        $outputContent = array('value' => $gProfileFields->getHtmlValue($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $content, $userUuid), 'order' => $content);\n                    } else {\n                        $outputContent = $gProfileFields->getHtmlValue($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $content, $userUuid);\n                    }\n                }\n            }\n        }\n\n        return $outputContent;\n    }\n\n    /**\n     * Delete pointed columns out of configuration\n     * @param int  $number\n     * @param bool $all    Define all columns to be deleted\n     * @return bool\n     */\n    public function deleteColumn($number, $all = false)\n    {\n        if ($number > $this->countColumns()) {\n            return false;\n        }\n\n        if ($all) {\n            // Delete all columns starting with number\n            for ($newColumnNumber = $this->countColumns(); $newColumnNumber >= $number; --$newColumnNumber) {\n                $this->columns[$newColumnNumber]->delete();\n                array_pop($this->columns);\n            }\n        } else {\n            // only 1 columns is deleted and following are going 1 step up\n            for ($newColumnNumber = $number, $max = $this->countColumns(); $newColumnNumber < $max; ++$newColumnNumber) {\n                $newColumn = $this->columns[$newColumnNumber];\n                $oldColumn = $this->columns[$newColumnNumber + 1];\n                $newColumn->setValue('lsc_usf_id', $oldColumn->getValue('lsc_usf_id'));\n                $newColumn->setValue('lsc_special_field', $oldColumn->getValue('lsc_special_field'));\n                $newColumn->setValue('lsc_sort', $oldColumn->getValue('lsc_sort'));\n                $newColumn->setValue('lsc_filter', $oldColumn->getValue('lsc_filter'));\n                $newColumn->save();\n            }\n            $this->columns[$newColumnNumber]->delete();\n            array_pop($this->columns);\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns an array with all alignments (center, left or right) from all columns of this list.\n     * @return array Array with alignments from all columns of this list configuration.\n     */\n    public function getColumnAlignments()\n    {\n        global $gProfileFields;\n\n        $arrColumnAlignments = array();\n\n        // Array to assign names to tables\n        $arrSpecialColumnNames = array(\n            'usr_login_name'       => 'left',\n            'usr_photo'            => 'left',\n            'usr_usr_id_create'    => 'left',\n            'usr_timestamp_create' => 'left',\n            'usr_usr_id_change'    => 'left',\n            'usr_timestamp_change' => 'left',\n            'usr_uuid'             => 'left',\n            'mem_begin'            => 'left',\n            'mem_end'              => 'left',\n            'mem_leader'           => 'left',\n            'mem_approved'         => 'left',\n            'mem_usr_id_change'    => 'left',\n            'mem_timestamp_change' => 'left',\n            'mem_comment'          => 'left',\n            'mem_count_guests'     => 'right'\n        );\n\n        for ($columnNumber = 1, $iMax = $this->countColumns(); $columnNumber <= $iMax; ++$columnNumber) {\n            $column = $this->getColumnObject($columnNumber);\n\n            // Find name of the field\n            if ($column->getValue('lsc_usf_id') > 0) {\n                $usfId = (int) $column->getValue('lsc_usf_id');\n\n                if ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'CHECKBOX'\n                ||  $gProfileFields->getPropertyById($usfId, 'usf_name_intern') === 'GENDER') {\n                    $arrColumnAlignments[] = 'center';\n                } elseif ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'NUMBER'\n                ||      $gProfileFields->getPropertyById($usfId, 'usf_type') === 'DECIMAL') {\n                    $arrColumnAlignments[] = 'right';\n                } else {\n                    $arrColumnAlignments[] = 'left';\n                }\n            } else {\n                $arrColumnAlignments[] = $arrSpecialColumnNames[$column->getValue('lsc_special_field')];\n            }\n        } // End-For\n\n        return $arrColumnAlignments;\n    }\n\n    /**\n     * Returns an array with all column names of this list. The names within the array are translated\n     * to the current language.\n     * @return array Array with all column names of this list configuration.\n     */\n    public function getColumnNames()\n    {\n        global $gL10n, $gProfileFields;\n\n        $arrColumnNames = array();\n\n        // Array to assign names to tables\n        $arrSpecialColumnNames = array(\n            'usr_login_name'       => $gL10n->get('SYS_USERNAME'),\n            'usr_photo'            => $gL10n->get('SYS_PHOTO'),\n            'usr_usr_id_create'    => $gL10n->get('SYS_CREATED_BY'),\n            'usr_timestamp_create' => $gL10n->get('SYS_CREATED_AT'),\n            'usr_usr_id_change'    => $gL10n->get('SYS_CHANGED_BY'),\n            'usr_timestamp_change' => $gL10n->get('SYS_CHANGED_AT'),\n            'usr_uuid'             => $gL10n->get('SYS_UNIQUE_ID'),\n            'mem_begin'            => $gL10n->get('SYS_START'),\n            'mem_end'              => $gL10n->get('SYS_END'),\n            'mem_leader'           => $gL10n->get('SYS_LEADERS'),\n            'mem_approved'         => $gL10n->get('SYS_PARTICIPATION_STATUS'),\n            'mem_usr_id_change'    => $gL10n->get('SYS_CHANGED_BY'),\n            'mem_timestamp_change' => $gL10n->get('SYS_CHANGED_AT'),\n            'mem_comment'          => $gL10n->get('SYS_COMMENT'),\n            'mem_count_guests'     => $gL10n->get('SYS_SEAT_AMOUNT')\n        );\n\n        for ($columnNumber = 1, $iMax = $this->countColumns(); $columnNumber <= $iMax; ++$columnNumber) {\n            $column = $this->getColumnObject($columnNumber);\n\n            // Find name of the field\n            if ($column->getValue('lsc_usf_id') > 0) {\n                $arrColumnNames[] = $gProfileFields->getPropertyById((int) $column->getValue('lsc_usf_id'), 'usf_name');\n            } else {\n                $arrColumnNames[] = $arrSpecialColumnNames[$column->getValue('lsc_special_field')];\n            }\n        } // End-For\n\n        return $arrColumnNames;\n    }\n\n    /**\n     * Returns an array with all column names of the sql statement that belong to the select clause.\n     * This will be the internal profile field name e.g. **LAST_NAME** or the db column name\n     * of the special field e.g. **mem_begin**\n     * @return array Array with all column names of this sql select clause.\n     */\n    public function getColumnNamesSql()\n    {\n        global $gProfileFields;\n\n        if (count($this->columnsSqlNames) === 0) {\n            foreach ($this->columns as $listColumn) {\n                if ((int) $listColumn->getValue('lsc_usf_id') > 0) {\n                    // get internal profile field name\n                    $this->columnsSqlNames[] = $gProfileFields->getPropertyById($listColumn->getValue('lsc_usf_id'), 'usf_name_intern');\n                } else {\n                    // Special fields like usr_photo, mem_begin ...\n                    $this->columnsSqlNames[] = $listColumn->getValue('lsc_special_field');\n                }\n            }\n        }\n\n        return $this->columnsSqlNames;\n    }\n\n    /**\n     * Returns the column object with the corresponding number.\n     * The numbers will start with 1 and end with the count of all columns.\n     * If that column doesn't exists the method try to repair the\n     * column list. If that won't help then **null** will be returned.\n     * @param int $number The internal number of the column.\n     *                    This will be the position of the column in the list.\n     * @return TableAccess|null Returns a TableAccess object of the database table **adm_list_columns**.\n     */\n    public function getColumnObject($number)\n    {\n        if (array_key_exists($number, $this->columns)) {\n            return $this->columns[$number];\n        }\n\n        // column not found, then try to repair list\n        $this->repair();\n        if (array_key_exists($number, $this->columns)) {\n            return $this->columns[$number];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns an array with all list columns and a search condition for each column. Especially the null value\n     * will be replaced with a default value. This array can than be used to add it to the main sql statement.\n     * @return array<int,string> Returns an array with all list columns and a search condition for each column.\n     */\n    public function getSearchConditions()\n    {\n        global $gProfileFields, $gL10n;\n\n        $arrSearchConditions = array();\n\n        foreach ($this->columns as $listColumn) {\n            $lscUsfId = (int) $listColumn->getValue('lsc_usf_id');\n\n            // custom profile field\n            if ($lscUsfId > 0) {\n                switch ($gProfileFields->getPropertyById($lscUsfId, 'usf_type')) {\n                    case 'CHECKBOX':\n                        break;\n\n                    case 'DROPDOWN': // fallthrough\n                    case 'RADIO_BUTTON':\n                        // create \"case when\" with all values of the profile field value list\n                        $condition = ' CASE ';\n                        $arrListValues = $gProfileFields->getPropertyById($lscUsfId, 'usf_value_list', 'text');\n\n                        foreach ($arrListValues as $key => $value) {\n                            $condition .= ' WHEN ' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ' = \\'' . $key . '\\' THEN \\''.$value.'\\' ';\n                        }\n\n                        $condition .= ' ELSE \\' \\' END ';\n                        $arrSearchConditions[] = $condition;\n                        break;\n\n                    case 'NUMBER': // fallthrough\n                    case 'DECIMAL':\n                        $arrSearchConditions[] = 'COALESCE(' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ', 0)';\n                        break;\n\n                    case 'DATE':\n                        $arrSearchConditions[] = 'COALESCE(' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ', \\'1900-02-01\\')';\n                        break;\n\n                    default:\n                        $arrSearchConditions[] = 'COALESCE(' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ', \\'\\')';\n                }\n            } else {\n                switch ($listColumn->getValue('lsc_special_field')) {\n                    case 'mem_begin': // fallthrough\n                    case 'mem_end':\n                        $arrSearchConditions[] = 'COALESCE(' . $listColumn->getValue('lsc_special_field') . ', \\'1900-02-01\\')';\n                        break;\n\n                    default:\n                        $arrSearchConditions[] = 'COALESCE(' . $listColumn->getValue('lsc_special_field') . ', \\'\\')';\n                        break;\n                }\n            }\n        }\n\n        return $arrSearchConditions;\n    }\n\n    /**\n     * Prepare SQL of the current list configuration. Therefore all roles of the array and there users will be selected\n     * and joined with the columns of the list configuration. The time period of the membership will be considered and\n     * could be influenced with parameters. There is also a possiblity to join users of a relationship and hide special\n     * columns of event roles. Each profile field of the select list will have their internal profile field name as column\n     * name. The special field will still have their database column name.\n     * @param array          $options  (optional) An array with the following possible entries:\n     *                                 - **showAllMembersThisOrga** : Set to true all users with an active membership\n     *                                   to at least one role of the current organization will be shown.\n     *                                   This setting could be combined with **showFormerMembers** or **showRelationTypes**.\n     *                                 - **showAllMembersDatabase** : Set to true all users of the database will be shown\n     *                                   independent of the membership to roles or organizations\n     *                                 - **showRolesMembers** : An array with all roles ids could be set and only members\n     *                                   of this roles will be shown.\n     *                                   This setting could be combined with **showFormerMembers** or **showRelationTypes**.\n     *                                 - **showFormerMembers** : Set to true if roles members or members of the organization\n     *                                   should be shown and also former members should be listed\n     *                                 - **showRelationTypes** : An array with relation types. The sql will be expanded with\n     *                                   all users who are in such a relationship to the selected role users.\n     *                                 - **useConditions** : false - Don't add additional conditions to the SQL\n     *                                                       true  - Conditions will be added as stored in the settings\n     *                                 - **useOrderBy** : false - Don't add the sorting to the SQL\n     *                                                 true  - Sorting is added as stored in the settings\n     *                                 - **startDate** : The start date if memberships that should be considered. The time period of\n     *                                   the membership must be at least one day after this date.\n     *                                 - **endDate** : The end date if memberships that should be considered.The time period of\n     *                                   the membership must be at least one day before this date.\n     * @return string Returns a valid sql that represents all users with the columns of the list configuration.\n     */\n    public function getSQL(array $options = array())\n    {\n        global $gL10n, $gProfileFields;\n\n        // create array with all options\n        $optionsDefault = array(\n            'showAllMembersThisOrga' => false,\n            'showAllMembersDatabase' => false,\n            'showRolesMembers'  => array(),\n            'showFormerMembers' => false,\n            'showRelationTypes' => array(),\n            'useConditions'     => true,\n            'useOrderBy'           => true,\n            'startDate'         => null,\n            'endDate'           => null\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        $arrSqlColumnNames = array();\n        $arrOrderByColumns = array();\n        $sqlColumnNames = '';\n        $sqlOrderBys = '';\n        $sqlJoin  = '';\n        $sqlWhere = '';\n\n        foreach ($this->columns as $listColumn) {\n            $lscUsfId = (int) $listColumn->getValue('lsc_usf_id');\n\n            $tableAlias = '';\n            if ($lscUsfId > 0) {\n                // dynamic profile field\n                $tableAlias = 'row' . $listColumn->getValue('lsc_number') . 'id' . $lscUsfId;\n\n                // define JOIN - Syntax\n                $sqlJoin .= ' LEFT JOIN ' . TBL_USER_DATA . ' ' . $tableAlias . '\n                                     ON ' . $tableAlias . '.usd_usr_id = usr_id\n                                    AND ' . $tableAlias . '.usd_usf_id = ' . $lscUsfId;\n\n                // usf_id is prefix for the table\n                $dbColumnName = $tableAlias . '.usd_value AS ' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern');\n            } else {\n                // Special fields like usr_photo, mem_begin ...\n                $dbColumnName = $listColumn->getValue('lsc_special_field');\n            }\n\n            if (strlen($dbColumnName) > 0) {\n                $arrSqlColumnNames[] = $dbColumnName;\n\n                $userFieldType = $gProfileFields->getPropertyById($lscUsfId, 'usf_type');\n\n                // create a valid sort\n                $lscSort = $listColumn->getValue('lsc_sort');\n                if ($lscSort != '') {\n                    if (strpos($dbColumnName, ' AS') > 0) {\n                        $sortColumnName = substr($dbColumnName, 0, strpos($dbColumnName, ' AS'));\n                    } else {\n                        $sortColumnName = $dbColumnName;\n                    }\n\n                    if ($userFieldType === 'NUMBER' || $userFieldType === 'DECIMAL') {\n                        // if a field has numeric values then there must be a cast because database\n                        // column is varchar. A varchar sort of 1,10,2 will be with cast 1,2,10\n                        if (DB_ENGINE === Database::PDO_ENGINE_PGSQL) {\n                            $columnType = 'numeric';\n                        } else {\n                            // mysql\n                            $columnType = 'unsigned';\n                        }\n                        $arrOrderByColumns[] = ' CAST(' . $sortColumnName . ' AS ' . $columnType . ') ' . $lscSort;\n                    } else {\n                        $arrOrderByColumns[] = $sortColumnName . ' ' . $lscSort;\n                    }\n                }\n\n                // Handle the conditions for the columns\n                if ($optionsAll['useConditions'] && $listColumn->getValue('lsc_filter') != '') {\n                    $value = $listColumn->getValue('lsc_filter');\n                    $type = '';\n\n                    // custom profile field\n                    if ($lscUsfId > 0) {\n                        switch ($userFieldType) {\n                            case 'CHECKBOX':\n                                $type = 'checkbox';\n\n                                // 'yes' or 'no' will be replaced with 1 or 0, so that you can compare it with the database value\n                                $arrCheckboxValues = array($gL10n->get('SYS_YES'), $gL10n->get('SYS_NO'), 'true', 'false');\n                                $arrCheckboxKeys = array(1, 0, 1, 0);\n                                $value = str_replace(array_map('StringUtils::strToLower', $arrCheckboxValues), $arrCheckboxKeys, StringUtils::strToLower($value));\n                                break;\n\n                            case 'DROPDOWN': // fallthrough\n                            case 'RADIO_BUTTON':\n                                $type = 'int';\n\n                                // replace all field values with their internal numbers\n                                $arrListValues = $gProfileFields->getPropertyById($lscUsfId, 'usf_value_list', 'text');\n                                $value = array_search(StringUtils::strToLower($value), array_map('StringUtils::strToLower', $arrListValues), true);\n                                break;\n\n                            case 'NUMBER': // fallthrough\n                            case 'DECIMAL':\n                                $type = 'int';\n                                break;\n\n                            case 'DATE':\n                                $type = 'date';\n                                break;\n\n                            default:\n                                $type = 'string';\n                        }\n                    } else {\n                        switch ($listColumn->getValue('lsc_special_field')) {\n                            case 'mem_begin': // fallthrough\n                            case 'mem_end':\n                                $type = 'date';\n                                break;\n\n                            case 'usr_photo':\n                                $type = '';\n                                break;\n\n                            default:\n                                $type = 'string';\n                        }\n                    }\n\n                    $parser = new ConditionParser();\n\n                    // if profile field then add not exists condition\n                    if ($lscUsfId > 0) {\n                        $parser->setNotExistsStatement('SELECT 1\n                                                      FROM ' . TBL_USER_DATA . ' ' . $tableAlias . 's\n                                                     WHERE ' . $tableAlias . 's.usd_usr_id = usr_id\n                                                       AND ' . $tableAlias . 's.usd_usf_id = ' . $lscUsfId);\n                    }\n\n                    // now transform condition into SQL\n                    if (strpos($dbColumnName, ' AS') > 0) {\n                        $columnName = substr($dbColumnName, 0, strpos($dbColumnName, ' AS'));\n                    } else {\n                        $columnName = $dbColumnName;\n                    }\n                    $sqlWhere .= $parser->makeSqlStatement($value, $columnName, $type, $gProfileFields->getPropertyById($lscUsfId, 'usf_name')); // TODO Exception handling\n                }\n            }\n        }\n\n        if(count($arrSqlColumnNames) > 0) {\n            $sqlColumnNames = ', ' . implode(', ', $arrSqlColumnNames);\n        }\n\n        // add sorting if option is set and sorting columns are stored\n        if ($optionsAll['useOrderBy']) {\n            $sqlOrderBys = implode(', ', $arrOrderByColumns);\n\n            // if roles should be shown than sort by leaders\n            if (count($optionsAll['showRolesMembers']) > 0) {\n                if (strlen($sqlOrderBys) > 0) {\n                    $sqlOrderBys = 'mem_leader DESC, ' . $sqlOrderBys;\n                } else {\n                    $sqlOrderBys = 'mem_leader DESC';\n                }\n            }\n\n            if (strlen($sqlOrderBys) > 0) {\n                $sqlOrderBys = ' ORDER BY ' . $sqlOrderBys;\n            }\n        }\n\n        if (count($optionsAll['showRolesMembers']) > 0) {\n            $sqlRoleIds = implode(', ', $optionsAll['showRolesMembers']);\n        } else {\n            $sqlRoleIds = '(SELECT rol_id\n                              FROM ' . TBL_CATEGORIES . '\n                             INNER JOIN ' . TBL_ROLES . ' ON rol_cat_id = cat_id\n                             WHERE (  cat_org_id = '. $GLOBALS['gCurrentOrgId']. '\n                                   OR cat_org_id IS NULL )\n                               AND cat_name_intern <> \\'EVENTS\\'\n                            )';\n        }\n\n        // Set state of membership\n        if ($optionsAll['showFormerMembers']) {\n            $sqlMemberStatus = 'AND mem_end < \\''.DATE_NOW.'\\'';\n        } else {\n            if ($optionsAll['startDate'] === null) {\n                $sqlMemberStatus = 'AND mem_begin <= \\''.DATE_NOW.'\\'';\n            } else {\n                $sqlMemberStatus = 'AND mem_begin <= \\''.$optionsAll['endDate'].' 23:59:59\\'';\n            }\n\n            if ($optionsAll['endDate'] === null) {\n                $sqlMemberStatus .= ' AND mem_end >= \\''.DATE_NOW.'\\'';\n            } else {\n                $sqlMemberStatus .= ' AND mem_end >= \\''.$optionsAll['startDate'].' 00:00:00\\'';\n            }\n        }\n\n        // check if mem_leaders should be shown\n        if (count($optionsAll['showRolesMembers']) === 1) {\n            $sqlMemLeader = ' mem_leader, ';\n        } else {\n            $sqlMemLeader = ' false AS mem_leader, ';\n        }\n\n        $sqlUserJoin = 'INNER JOIN '.TBL_USERS.'\n                                ON usr_id = mem_usr_id';\n        $sqlRelationTypeWhere = '';\n        if (count($optionsAll['showRelationTypes']) > 0) {\n            $sqlUserJoin = 'INNER JOIN '.TBL_USER_RELATIONS.'\n                                    ON ure_usr_id1 = mem_usr_id\n                            INNER JOIN '.TBL_USERS.'\n                                    ON usr_id = ure_usr_id2';\n            $sqlRelationTypeWhere = 'AND ure_urt_id IN ('.implode(', ', $optionsAll['showRelationTypes']).')';\n        }\n\n        // Set SQL-Statement\n        if ($optionsAll['showAllMembersDatabase']) {\n            $sql = 'SELECT DISTINCT false AS mem_leader, usr_id, usr_uuid ' . $sqlColumnNames . '\n                      FROM '.TBL_USERS.'\n                           '.$sqlJoin.'\n                     WHERE usr_valid = true '.\n                           $sqlWhere.\n                           $sqlOrderBys;\n        } else {\n            $sql = 'SELECT DISTINCT ' . $sqlMemLeader . ' usr_id, usr_uuid ' . $sqlColumnNames . '\n                      FROM '.TBL_MEMBERS.'\n                INNER JOIN '.TBL_ROLES.'\n                        ON rol_id = mem_rol_id\n                INNER JOIN '.TBL_CATEGORIES.'\n                        ON cat_id = rol_cat_id\n                           '.$sqlUserJoin.'\n                           '.$sqlJoin.'\n                     WHERE usr_valid = true\n                       AND rol_valid = true\n                       AND rol_id IN ('.$sqlRoleIds.')\n                           '.$sqlRelationTypeWhere.'\n                       AND (  cat_org_id = '. $GLOBALS['gCurrentOrgId']. '\n                           OR cat_org_id IS NULL )\n                           '.$sqlMemberStatus.\n                           $sqlWhere.\n                           $sqlOrderBys;\n        }\n\n        return $sql;\n    }\n\n    /**\n     * Read data of responsible columns and store in object. Only columns of profile fields which the current\n     * user is allowed to view will be stored in the object. If only the role membership should be shown than\n     * remove all columns except first name, last name and assignment timestamps.\n     */\n    public function readColumns()\n    {\n        global $gCurrentUser, $gProfileFields;\n\n        $this->columns = array();\n\n        $sql = 'SELECT *\n                  FROM '.TBL_LIST_COLUMNS.'\n                 WHERE lsc_lst_id = ? -- $this->getValue(\\'lst_id\\')\n              ORDER BY lsc_number ASC';\n        $lscStatement = $this->db->queryPrepared($sql, array((int) $this->getValue('lst_id')));\n\n        while ($lscRow = $lscStatement->fetch()) {\n            $usfId = (int) $lscRow['lsc_usf_id'];\n\n            // only add columns to the array if the current user is allowed to view them\n            if ($usfId === 0\n            || $gProfileFields->isVisible($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $gCurrentUser->editUsers())) {\n                // if only names should be shown, than check if it's a name field\n                if (!$this->showOnlyNames\n                    || ($usfId > 0 && in_array($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), array('FIRST_NAME', 'LAST_NAME')))\n                    || ($usfId === 0 && in_array($lscRow['lsc_special_field'], array('mem_begin', 'mem_end', 'mem_leader', 'mem_usr_id_change', 'mem_timestamp_change', 'mem_approved', 'mem_comment', 'mem_count_guests')))) {\n                    // some user fields should only be viewed by users that could edit roles\n                    if (!in_array($lscRow['lsc_special_field'], array('usr_login_name', 'usr_usr_id_create', 'usr_timestamp_create', 'usr_usr_id_change', 'usr_timestamp_change', 'usr_login_name', 'usr_uuid'))\n                        || $gCurrentUser->editUsers()) {\n                        $lscNumber = (int)$lscRow['lsc_number'];\n                        $this->columns[$lscNumber] = new TableAccess($this->db, TBL_LIST_COLUMNS, 'lsc');\n                        $this->columns[$lscNumber]->setArray($lscRow);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Reads a record out of the table in database selected by the unique uuid column in the table.\n     * The name of the column must have the syntax table_prefix, underscore and uuid. E.g. usr_uuid.\n     * Per default all columns of the default table will be read and stored in the object.\n     * Not every Admidio table has a uuid. Please check the database structure before you use this method.\n     * @param int $uuid Unique uuid that should be searched.\n     * @return bool Returns **true** if one record is found\n     * @see TableAccess#readData\n     * @see TableAccess#readDataByColumns\n     */\n    public function readDataByUuid($uuid)\n    {\n        $returnValue = parent::readDataByUuid($uuid);\n\n        if ($returnValue) {\n            $this->readColumns();\n        }\n\n        return $returnValue;\n    }\n\n    /* Removes a column from the list configuration array, but only in the memory and not in database.\n     * @param string $columnNameOrUsfId Accept the usfId or the name of the special field that should be removed.\n     */\n    public function removeColumn($columnNameOrUsfId)\n    {\n        $currentNumber = 1;\n\n        // check for every column if the number is expected otherwise set new number\n        foreach ($this->columns as $number => $listColumn) {\n            if ($listColumn->getValue('lsc_special_field') === $columnNameOrUsfId\n            || $listColumn->getValue('lsc_usf_id') === (int) $columnNameOrUsfId) {\n                unset($this->columns[$number]);\n            } else {\n                // set new number to the columns after the removed column\n                if ($currentNumber < $number) {\n                    $this->columns[$currentNumber] = $listColumn;\n                    unset($this->columns[$number]);\n                }\n                $currentNumber++;\n            }\n        }\n    }\n\n    /**\n     * The method will clear all column data of this object and restore all\n     * columns from the database. Then the column number will be renewed for all columns.\n     * This is in some cases a necessary fix if a column number was lost.\n     */\n    public function repair()\n    {\n        // restore columns from database\n        $this->columns = array();\n        $this->readColumns();\n        $newColumnNumber = 1;\n\n        // check for every column if the number is expected otherwise set new number\n        foreach ($this->columns as $number => $listColumn) {\n            if ($number !== $newColumnNumber) {\n                $this->columns[$number]->setValue('lsc_number', $newColumnNumber);\n                $this->columns[$number]->save();\n            }\n            ++$newColumnNumber;\n        }\n\n        // now restore columns with new numbers\n        $this->columns = array();\n        $this->readColumns();\n    }\n\n    /**\n     * @param bool $updateFingerPrint\n     * @return bool\n     */\n    public function save($updateFingerPrint = true)\n    {\n        $this->db->startTransaction();\n\n        $returnValue = parent::save($updateFingerPrint);\n\n        // save columns\n        foreach ($this->columns as $listColumn) {\n            if ((int) $listColumn->getValue('lsc_lst_id') === 0) {\n                $listColumn->setValue('lsc_lst_id', (int) $this->getValue('lst_id'));\n            }\n            $listColumn->save($updateFingerPrint);\n        }\n\n        $this->db->endTransaction();\n\n        return $returnValue;\n    }\n\n    /**\n     * Set a mode that only first name and last name will be returned if the sql is called or columns should be\n     * returned. This is useful is a role has the setting that no profile information should be shown, but the\n     * membership could be viewed.\n     * @return void\n     */\n    public function setModeShowOnlyNames()\n    {\n        $this->showOnlyNames = true;\n\n        if(count($this->columns) > 0) {\n            $this->readColumns();\n        }\n    }\n}\n"], "fixing_code": ["<?php\n/**\n ***********************************************************************************************\n * Class manages the list configuration\n *\n * @copyright 2004-2023 The Admidio Team\n * @see https://www.admidio.org/\n * @license https://www.gnu.org/licenses/gpl-2.0.html GNU General Public License v2.0 only\n ***********************************************************************************************\n */\n\n/**\n * This class creates a list configuration object. With this object it's possible\n * to manage the configuration in the database. You can easily create new lists,\n * add new columns or remove columns. The object will only list columns of the configuration\n * which the current user is allowed to view.\n */\nclass ListConfiguration extends TableLists\n{\n    /**\n     * @var array<int,TableAccess> Array with all columns of the current list\n     */\n    protected $columns = array();\n    /**\n     * @var array<int,TableAccess> array with all column names of the sql statement that belong to the select clause\n     */\n    protected $columnsSqlNames = array();\n    /**\n     * @var array<int,string> Array with the usr_id as key and the first name, last name as values\n     */\n    protected $arrUserNames = array();\n    /**\n     * @var boolean Flag if only the name of the user (first name, last name) should be shown and all other fields\n     * should be removed.\n     */\n    protected $showOnlyNames = false;\n\n    /**\n     * Constructor that will create an object to handle the configuration of lists.\n     * @param Database $database Object of the class Database. This should be the default global object **$gDb**.\n     * @param int      $lstId    The id of the recordset that should be loaded. If id isn't set than an empty object of the table is created.\n     */\n    public function __construct(Database $database, $lstId = 0)\n    {\n        parent::__construct($database, $lstId);\n\n        if ($lstId > 0) {\n            $this->readColumns();\n        }\n    }\n\n    /**\n     * Add new column to column array. The number of the column will be the maximum number of the current\n     * array plus one. The special field usr_uuid could only be added by users with the right to edit all users.\n     * @param int|string $field  Usf-Id of a profile field or the name of a special field.\n     * @param int        $number Optional the number of the column. This is useful if the list already exists\n     *                           and maybe the profile field changed the position within the list.\n     * @param string     $sort   Optional the value **ASC** for ascending and **DESC** for descending.\n     * @param string     $filter Optional a filter for the values of that column.\n     * @return bool Returns true if the field was added to the column list.\n     */\n    public function addColumn($field, $number = 0, $sort = '', $filter = '')\n    {\n        global $gCurrentUser;\n\n        if($number === 0) {\n            // current number of the new column\n            $number = count($this->columns) + 1;\n        }\n\n        // can join max. 61 tables\n        // Passed parameters must be set carefully\n        if (strlen($field) === 0 || $field === 0 || count($this->columns) >= 57) {\n            return false;\n        }\n\n        // uuid could only be added by an administrator\n        if($field === 'usr_uuid' && !$gCurrentUser->editUsers()) {\n            return false;\n        }\n\n        // If column doesn't exist create object\n        if (!array_key_exists($number, $this->columns)) {\n            $this->columns[$number] = new TableAccess($this->db, TBL_LIST_COLUMNS, 'lsc');\n            $this->columns[$number]->setValue('lsc_lst_id', (int) $this->getValue('lst_id'));\n        }\n\n        // Assign content of column\n        if (is_numeric($field)) {\n            $this->columns[$number]->setValue('lsc_usf_id', $field);\n            $this->columns[$number]->setValue('lsc_special_field', '');\n        } else {\n            $this->columns[$number]->setValue('lsc_usf_id', '');\n            $this->columns[$number]->setValue('lsc_special_field', $field);\n        }\n\n        $this->columns[$number]->setValue('lsc_number', $number);\n        $this->columns[$number]->setValue('lsc_sort', $sort);\n        $this->columns[$number]->setValue('lsc_filter', $filter);\n\n        return true;\n    }\n\n    public function clear()\n    {\n        $this->columns = array();\n        $this->columnsSqlNames = array();\n\n        parent::clear();\n    }\n\n    /**\n     * Return count of columns\n     * @return int\n     */\n    public function countColumns()\n    {\n        return count($this->columns);\n    }\n\n    /**\n     * Convert the content of the column independence of the output format.\n     * Therefore, the method will check which datatype the column has and which format the\n     * output should have.\n     * @param int $columnNumber Number of the column for which the content should be converted.\n     * @param string $format    The following formats are possible 'html', 'print', 'csv' or 'pdf'\n     * @param string $content   The content that should be converted.\n     * @param string $userUuid  Uuid of the user for which the content should be converted. This is not the login user.\n     * @return string Returns the converted content.\n     */\n    public function convertColumnContentForOutput(int $columnNumber, string $format, string $content, string $userUuid)\n    {\n        global $gDb, $gProfileFields, $gL10n, $gSettingsManager;\n\n        $column = $this->getColumnObject($columnNumber);\n\n        $usfId = 0;\n        if ($column->getValue('lsc_usf_id') > 0) {\n            // check if customs field and remember\n            $usfId = (int) $column->getValue('lsc_usf_id');\n        }\n\n        // in some cases the content must have a special output format\n\n        if ($usfId > 0 && $usfId === (int) $gProfileFields->getProperty('COUNTRY', 'usf_id')) {\n            $content = $gL10n->getCountryName($content);\n        } elseif ($column->getValue('lsc_special_field') === 'usr_photo') {\n            // show user photo\n            if (in_array($format, array('html', 'print'), true)) {\n                $content = '<img src=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/profile/profile_photo_show.php', array('user_uuid' => $userUuid)).'\" style=\"vertical-align: middle;\" alt=\"'.$gL10n->get('SYS_PROFILE_PHOTO').'\" />';\n            }\n            if (in_array($format, array('csv', 'pdf'), true) && $content != null) {\n                $content = $gL10n->get('SYS_PROFILE_PHOTO');\n            }\n        } elseif ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'CHECKBOX') {\n            if (in_array($format, array('csv', 'pdf'), true)) {\n                if ($content == 1) {\n                    $content = $gL10n->get('SYS_YES');\n                } else {\n                    $content = $gL10n->get('SYS_NO');\n                }\n            } elseif ($content != 1) {\n                $content = 0;\n            }\n        } elseif ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'DATE'\n        || $column->getValue('lsc_special_field') === 'mem_begin'\n        || $column->getValue('lsc_special_field') === 'mem_end') {\n            if (strlen($content) > 0) {\n                // date must be formated\n                $date = \\DateTime::createFromFormat('Y-m-d', $content);\n                $content = $date->format($gSettingsManager->getString('system_date'));\n            }\n        } elseif (in_array($format, array('csv', 'pdf'), true)\n        &&    ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'DROPDOWN'\n            || $gProfileFields->getPropertyById($usfId, 'usf_type') === 'RADIO_BUTTON')) {\n            if (strlen($content) > 0) {\n                // show selected text of optionfield or combobox\n                $arrListValues = $gProfileFields->getPropertyById($usfId, 'usf_value_list', 'text');\n                $content = $arrListValues[$content];\n            }\n        } elseif (in_array($column->getValue('lsc_special_field'), array('usr_timestamp_create', 'usr_timestamp_change', 'mem_timestamp_change'))) {\n            if (strlen($content) > 0) {\n                // date must be formated\n                $date = \\DateTime::createFromFormat('Y-m-d H:i:s', $content);\n                $content = $date->format($gSettingsManager->getString('system_date') . ' ' . $gSettingsManager->getString('system_time'));\n            }\n        } elseif ($column->getValue('lsc_special_field') === 'mem_approved') {\n            // Assign Integer to Language strings\n            switch ((int) $content) {\n                case ModuleDates::MEMBER_APPROVAL_STATE_INVITED:\n                    $text = $gL10n->get('DAT_USER_INVITED');\n                    $htmlText = '<i class=\"fas fa-calendar-check admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = '';\n                    break;\n                case ModuleDates::MEMBER_APPROVAL_STATE_ATTEND:\n                    $text = $gL10n->get('DAT_USER_ATTEND');\n                    $htmlText = '<i class=\"fas fa-check-circle admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = 'admidio-event-approval-state-attend';\n                    break;\n                case ModuleDates::MEMBER_APPROVAL_STATE_TENTATIVE:\n                    $text = $gL10n->get('DAT_USER_TENTATIVE');\n                    $htmlText = '<i class=\"fas fa-question-circle admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = 'admidio-event-approval-state-tentative';\n                    break;\n                case ModuleDates::MEMBER_APPROVAL_STATE_REFUSED:\n                    $text = $gL10n->get('DAT_USER_REFUSED');\n                    $htmlText = '<i class=\"fas fa-times-circle admidio-icon-chain\"></i>' . $text;\n                    $buttonClass = 'admidio-event-approval-state-cancel';\n                    break;\n            }\n\n            if ($format === 'csv') {\n                $content = $text;\n            } else {\n                if ($format === 'html') {\n                    $content = '<span class=\"' . $buttonClass . '\">' . $htmlText . '</span>';\n                } else {\n                    $content = $htmlText;\n                }\n            }\n        } elseif (in_array($column->getValue('lsc_special_field'), array('usr_usr_id_create', 'usr_usr_id_change', 'mem_usr_id_change')) && (int) $content) {\n            // Get User Information and store information in array\n            $userId = (int) $content;\n\n            if(array_key_exists($userId, $this->arrUserNames)) {\n                $content = $this->arrUserNames[$userId];\n            } else {\n                $user = new User($gDb, $gProfileFields, $userId);\n                $content = $user->getValue('LAST_NAME') . ', ' . $user->getValue('FIRST_NAME');\n                $this->arrUserNames[$userId] = $content;\n            }\n        }\n\n        // format value for csv export\n        if ($format === 'csv') {\n            $content = preg_replace(\"/\\t/\", \"\\\\t\", $content);\n            $content = preg_replace(\"/\\r?\\n/\", \"\\\\n\", $content);\n            $outputContent = preg_replace(\"/^[@=+-]/\", \"#\", $content);\n        }\n        // pdf should show only text and not much html content\n        elseif ($format === 'pdf') {\n            $outputContent = $content;\n        }\n        // create output in html layout\n        else {\n            // firstname and lastname get a link to the profile\n            if ($format === 'html'\n            &&    ($usfId === (int) $gProfileFields->getProperty('LAST_NAME', 'usf_id')\n                || $usfId === (int) $gProfileFields->getProperty('FIRST_NAME', 'usf_id'))) {\n                $htmlValue = $gProfileFields->getHtmlValue($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $content, $userUuid);\n                $outputContent = '<a href=\"'.SecurityUtils::encodeUrl(ADMIDIO_URL.FOLDER_MODULES.'/profile/profile.php', array('user_uuid' => $userUuid)).'\">'.$htmlValue.'</a>';\n            } else {\n                // within print mode no links should be set\n                if ($format === 'print'\n                &&    ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'EMAIL'\n                    || $gProfileFields->getPropertyById($usfId, 'usf_type') === 'PHONE'\n                    || $gProfileFields->getPropertyById($usfId, 'usf_type') === 'URL')) {\n                    $outputContent = $content;\n                } else {\n                    // checkbox must set a sorting value\n                    if ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'CHECKBOX') {\n                        $outputContent = array('value' => $gProfileFields->getHtmlValue($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $content, $userUuid), 'order' => $content);\n                    } else {\n                        $outputContent = $gProfileFields->getHtmlValue($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $content, $userUuid);\n                    }\n                }\n            }\n        }\n\n        return $outputContent;\n    }\n\n    /**\n     * Delete pointed columns out of configuration\n     * @param int  $number\n     * @param bool $all    Define all columns to be deleted\n     * @return bool\n     */\n    public function deleteColumn($number, $all = false)\n    {\n        if ($number > $this->countColumns()) {\n            return false;\n        }\n\n        if ($all) {\n            // Delete all columns starting with number\n            for ($newColumnNumber = $this->countColumns(); $newColumnNumber >= $number; --$newColumnNumber) {\n                $this->columns[$newColumnNumber]->delete();\n                array_pop($this->columns);\n            }\n        } else {\n            // only 1 columns is deleted and following are going 1 step up\n            for ($newColumnNumber = $number, $max = $this->countColumns(); $newColumnNumber < $max; ++$newColumnNumber) {\n                $newColumn = $this->columns[$newColumnNumber];\n                $oldColumn = $this->columns[$newColumnNumber + 1];\n                $newColumn->setValue('lsc_usf_id', $oldColumn->getValue('lsc_usf_id'));\n                $newColumn->setValue('lsc_special_field', $oldColumn->getValue('lsc_special_field'));\n                $newColumn->setValue('lsc_sort', $oldColumn->getValue('lsc_sort'));\n                $newColumn->setValue('lsc_filter', $oldColumn->getValue('lsc_filter'));\n                $newColumn->save();\n            }\n            $this->columns[$newColumnNumber]->delete();\n            array_pop($this->columns);\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns an array with all alignments (center, left or right) from all columns of this list.\n     * @return array Array with alignments from all columns of this list configuration.\n     */\n    public function getColumnAlignments()\n    {\n        global $gProfileFields;\n\n        $arrColumnAlignments = array();\n\n        // Array to assign names to tables\n        $arrSpecialColumnNames = array(\n            'usr_login_name'       => 'left',\n            'usr_photo'            => 'left',\n            'usr_usr_id_create'    => 'left',\n            'usr_timestamp_create' => 'left',\n            'usr_usr_id_change'    => 'left',\n            'usr_timestamp_change' => 'left',\n            'usr_uuid'             => 'left',\n            'mem_begin'            => 'left',\n            'mem_end'              => 'left',\n            'mem_leader'           => 'left',\n            'mem_approved'         => 'left',\n            'mem_usr_id_change'    => 'left',\n            'mem_timestamp_change' => 'left',\n            'mem_comment'          => 'left',\n            'mem_count_guests'     => 'right'\n        );\n\n        for ($columnNumber = 1, $iMax = $this->countColumns(); $columnNumber <= $iMax; ++$columnNumber) {\n            $column = $this->getColumnObject($columnNumber);\n\n            // Find name of the field\n            if ($column->getValue('lsc_usf_id') > 0) {\n                $usfId = (int) $column->getValue('lsc_usf_id');\n\n                if ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'CHECKBOX'\n                ||  $gProfileFields->getPropertyById($usfId, 'usf_name_intern') === 'GENDER') {\n                    $arrColumnAlignments[] = 'center';\n                } elseif ($gProfileFields->getPropertyById($usfId, 'usf_type') === 'NUMBER'\n                ||      $gProfileFields->getPropertyById($usfId, 'usf_type') === 'DECIMAL') {\n                    $arrColumnAlignments[] = 'right';\n                } else {\n                    $arrColumnAlignments[] = 'left';\n                }\n            } else {\n                $arrColumnAlignments[] = $arrSpecialColumnNames[$column->getValue('lsc_special_field')];\n            }\n        } // End-For\n\n        return $arrColumnAlignments;\n    }\n\n    /**\n     * Returns an array with all column names of this list. The names within the array are translated\n     * to the current language.\n     * @return array Array with all column names of this list configuration.\n     */\n    public function getColumnNames()\n    {\n        global $gL10n, $gProfileFields;\n\n        $arrColumnNames = array();\n\n        // Array to assign names to tables\n        $arrSpecialColumnNames = array(\n            'usr_login_name'       => $gL10n->get('SYS_USERNAME'),\n            'usr_photo'            => $gL10n->get('SYS_PHOTO'),\n            'usr_usr_id_create'    => $gL10n->get('SYS_CREATED_BY'),\n            'usr_timestamp_create' => $gL10n->get('SYS_CREATED_AT'),\n            'usr_usr_id_change'    => $gL10n->get('SYS_CHANGED_BY'),\n            'usr_timestamp_change' => $gL10n->get('SYS_CHANGED_AT'),\n            'usr_uuid'             => $gL10n->get('SYS_UNIQUE_ID'),\n            'mem_begin'            => $gL10n->get('SYS_START'),\n            'mem_end'              => $gL10n->get('SYS_END'),\n            'mem_leader'           => $gL10n->get('SYS_LEADERS'),\n            'mem_approved'         => $gL10n->get('SYS_PARTICIPATION_STATUS'),\n            'mem_usr_id_change'    => $gL10n->get('SYS_CHANGED_BY'),\n            'mem_timestamp_change' => $gL10n->get('SYS_CHANGED_AT'),\n            'mem_comment'          => $gL10n->get('SYS_COMMENT'),\n            'mem_count_guests'     => $gL10n->get('SYS_SEAT_AMOUNT')\n        );\n\n        for ($columnNumber = 1, $iMax = $this->countColumns(); $columnNumber <= $iMax; ++$columnNumber) {\n            $column = $this->getColumnObject($columnNumber);\n\n            // Find name of the field\n            if ($column->getValue('lsc_usf_id') > 0) {\n                $arrColumnNames[] = $gProfileFields->getPropertyById((int) $column->getValue('lsc_usf_id'), 'usf_name');\n            } else {\n                $arrColumnNames[] = $arrSpecialColumnNames[$column->getValue('lsc_special_field')];\n            }\n        } // End-For\n\n        return $arrColumnNames;\n    }\n\n    /**\n     * Returns an array with all column names of the sql statement that belong to the select clause.\n     * This will be the internal profile field name e.g. **LAST_NAME** or the db column name\n     * of the special field e.g. **mem_begin**\n     * @return array Array with all column names of this sql select clause.\n     */\n    public function getColumnNamesSql()\n    {\n        global $gProfileFields;\n\n        if (count($this->columnsSqlNames) === 0) {\n            foreach ($this->columns as $listColumn) {\n                if ((int) $listColumn->getValue('lsc_usf_id') > 0) {\n                    // get internal profile field name\n                    $this->columnsSqlNames[] = $gProfileFields->getPropertyById($listColumn->getValue('lsc_usf_id'), 'usf_name_intern');\n                } else {\n                    // Special fields like usr_photo, mem_begin ...\n                    $this->columnsSqlNames[] = $listColumn->getValue('lsc_special_field');\n                }\n            }\n        }\n\n        return $this->columnsSqlNames;\n    }\n\n    /**\n     * Returns the column object with the corresponding number.\n     * The numbers will start with 1 and end with the count of all columns.\n     * If that column doesn't exists the method try to repair the\n     * column list. If that won't help then **null** will be returned.\n     * @param int $number The internal number of the column.\n     *                    This will be the position of the column in the list.\n     * @return TableAccess|null Returns a TableAccess object of the database table **adm_list_columns**.\n     */\n    public function getColumnObject($number)\n    {\n        if (array_key_exists($number, $this->columns)) {\n            return $this->columns[$number];\n        }\n\n        // column not found, then try to repair list\n        $this->repair();\n        if (array_key_exists($number, $this->columns)) {\n            return $this->columns[$number];\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns an array with all list columns and a search condition for each column. Especially the null value\n     * will be replaced with a default value. This array can than be used to add it to the main sql statement.\n     * @return array<int,string> Returns an array with all list columns and a search condition for each column.\n     */\n    public function getSearchConditions()\n    {\n        global $gProfileFields, $gL10n;\n\n        $arrSearchConditions = array();\n\n        foreach ($this->columns as $listColumn) {\n            $lscUsfId = (int) $listColumn->getValue('lsc_usf_id');\n\n            // custom profile field\n            if ($lscUsfId > 0) {\n                switch ($gProfileFields->getPropertyById($lscUsfId, 'usf_type')) {\n                    case 'CHECKBOX':\n                        break;\n\n                    case 'DROPDOWN': // fallthrough\n                    case 'RADIO_BUTTON':\n                        // create \"case when\" with all values of the profile field value list\n                        $condition = ' CASE ';\n                        $arrListValues = $gProfileFields->getPropertyById($lscUsfId, 'usf_value_list', 'text');\n\n                        foreach ($arrListValues as $key => $value) {\n                            $condition .= ' WHEN ' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ' = \\'' . $key . '\\' THEN \\''.$value.'\\' ';\n                        }\n\n                        $condition .= ' ELSE \\' \\' END ';\n                        $arrSearchConditions[] = $condition;\n                        break;\n\n                    case 'NUMBER': // fallthrough\n                    case 'DECIMAL':\n                        $arrSearchConditions[] = 'COALESCE(' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ', 0)';\n                        break;\n\n                    case 'DATE':\n                        $arrSearchConditions[] = 'COALESCE(' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ', \\'1900-02-01\\')';\n                        break;\n\n                    default:\n                        $arrSearchConditions[] = 'COALESCE(' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern') . ', \\'\\')';\n                }\n            } else {\n                switch ($listColumn->getValue('lsc_special_field')) {\n                    case 'mem_begin': // fallthrough\n                    case 'mem_end':\n                        $arrSearchConditions[] = 'COALESCE(' . $listColumn->getValue('lsc_special_field') . ', \\'1900-02-01\\')';\n                        break;\n\n                    default:\n                        $arrSearchConditions[] = 'COALESCE(' . $listColumn->getValue('lsc_special_field') . ', \\'\\')';\n                        break;\n                }\n            }\n        }\n\n        return $arrSearchConditions;\n    }\n\n    /**\n     * Prepare SQL of the current list configuration. Therefore all roles of the array and there users will be selected\n     * and joined with the columns of the list configuration. The time period of the membership will be considered and\n     * could be influenced with parameters. There is also a possiblity to join users of a relationship and hide special\n     * columns of event roles. Each profile field of the select list will have their internal profile field name as column\n     * name. The special field will still have their database column name.\n     * @param array          $options  (optional) An array with the following possible entries:\n     *                                 - **showAllMembersThisOrga** : Set to true all users with an active membership\n     *                                   to at least one role of the current organization will be shown.\n     *                                   This setting could be combined with **showFormerMembers** or **showRelationTypes**.\n     *                                 - **showAllMembersDatabase** : Set to true all users of the database will be shown\n     *                                   independent of the membership to roles or organizations\n     *                                 - **showRolesMembers** : An array with all roles ids could be set and only members\n     *                                   of this roles will be shown.\n     *                                   This setting could be combined with **showFormerMembers** or **showRelationTypes**.\n     *                                 - **showFormerMembers** : Set to true if roles members or members of the organization\n     *                                   should be shown and also former members should be listed\n     *                                 - **showRelationTypes** : An array with relation types. The sql will be expanded with\n     *                                   all users who are in such a relationship to the selected role users.\n     *                                 - **useConditions** : false - Don't add additional conditions to the SQL\n     *                                                       true  - Conditions will be added as stored in the settings\n     *                                 - **useOrderBy** : false - Don't add the sorting to the SQL\n     *                                                 true  - Sorting is added as stored in the settings\n     *                                 - **startDate** : The start date if memberships that should be considered. The time period of\n     *                                   the membership must be at least one day after this date.\n     *                                 - **endDate** : The end date if memberships that should be considered.The time period of\n     *                                   the membership must be at least one day before this date.\n     * @return string Returns a valid sql that represents all users with the columns of the list configuration.\n     */\n    public function getSQL(array $options = array())\n    {\n        global $gL10n, $gProfileFields;\n\n        // create array with all options\n        $optionsDefault = array(\n            'showAllMembersThisOrga' => false,\n            'showAllMembersDatabase' => false,\n            'showRolesMembers'  => array(),\n            'showFormerMembers' => false,\n            'showRelationTypes' => array(),\n            'useConditions'     => true,\n            'useOrderBy'           => true,\n            'startDate'         => null,\n            'endDate'           => null\n        );\n        $optionsAll = array_replace($optionsDefault, $options);\n\n        $arrSqlColumnNames = array();\n        $arrOrderByColumns = array();\n        $sqlColumnNames = '';\n        $sqlOrderBys = '';\n        $sqlJoin  = '';\n        $sqlWhere = '';\n\n        foreach ($this->columns as $listColumn) {\n            $lscUsfId = (int) $listColumn->getValue('lsc_usf_id');\n\n            $tableAlias = '';\n            if ($lscUsfId > 0) {\n                // dynamic profile field\n                $tableAlias = 'row' . $listColumn->getValue('lsc_number') . 'id' . $lscUsfId;\n\n                // define JOIN - Syntax\n                $sqlJoin .= ' LEFT JOIN ' . TBL_USER_DATA . ' ' . $tableAlias . '\n                                     ON ' . $tableAlias . '.usd_usr_id = usr_id\n                                    AND ' . $tableAlias . '.usd_usf_id = ' . $lscUsfId;\n\n                // usf_id is prefix for the table\n                $dbColumnName = $tableAlias . '.usd_value AS ' . $gProfileFields->getPropertyById($lscUsfId, 'usf_name_intern');\n            } else {\n                // Special fields like usr_photo, mem_begin ...\n                $dbColumnName = $listColumn->getValue('lsc_special_field');\n            }\n\n            if (strlen($dbColumnName) > 0) {\n                $arrSqlColumnNames[] = $dbColumnName;\n\n                $userFieldType = $gProfileFields->getPropertyById($lscUsfId, 'usf_type');\n\n                // create a valid sort\n                $lscSort = $listColumn->getValue('lsc_sort');\n                if ($lscSort != '') {\n                    if (strpos($dbColumnName, ' AS') > 0) {\n                        $sortColumnName = substr($dbColumnName, 0, strpos($dbColumnName, ' AS'));\n                    } else {\n                        $sortColumnName = $dbColumnName;\n                    }\n\n                    if ($userFieldType === 'NUMBER' || $userFieldType === 'DECIMAL') {\n                        // if a field has numeric values then there must be a cast because database\n                        // column is varchar. A varchar sort of 1,10,2 will be with cast 1,2,10\n                        if (DB_ENGINE === Database::PDO_ENGINE_PGSQL) {\n                            $columnType = 'numeric';\n                        } else {\n                            // mysql\n                            $columnType = 'unsigned';\n                        }\n                        $arrOrderByColumns[] = ' CAST(' . $sortColumnName . ' AS ' . $columnType . ') ' . $lscSort;\n                    } else {\n                        $arrOrderByColumns[] = $sortColumnName . ' ' . $lscSort;\n                    }\n                }\n\n                // Handle the conditions for the columns\n                if ($optionsAll['useConditions'] && $listColumn->getValue('lsc_filter') != '') {\n                    $value = $listColumn->getValue('lsc_filter');\n                    $type = '';\n\n                    // custom profile field\n                    if ($lscUsfId > 0) {\n                        switch ($userFieldType) {\n                            case 'CHECKBOX':\n                                $type = 'checkbox';\n\n                                // 'yes' or 'no' will be replaced with 1 or 0, so that you can compare it with the database value\n                                $arrCheckboxValues = array($gL10n->get('SYS_YES'), $gL10n->get('SYS_NO'), 'true', 'false');\n                                $arrCheckboxKeys = array(1, 0, 1, 0);\n                                $value = str_replace(array_map('StringUtils::strToLower', $arrCheckboxValues), $arrCheckboxKeys, StringUtils::strToLower($value));\n                                break;\n\n                            case 'DROPDOWN': // fallthrough\n                            case 'RADIO_BUTTON':\n                                $type = 'int';\n\n                                // replace all field values with their internal numbers\n                                $arrListValues = $gProfileFields->getPropertyById($lscUsfId, 'usf_value_list', 'text');\n                                $value = array_search(StringUtils::strToLower($value), array_map('StringUtils::strToLower', $arrListValues), true);\n                                break;\n\n                            case 'NUMBER': // fallthrough\n                            case 'DECIMAL':\n                                $type = 'int';\n                                break;\n\n                            case 'DATE':\n                                $type = 'date';\n                                break;\n\n                            default:\n                                $type = 'string';\n                        }\n                    } else {\n                        switch ($listColumn->getValue('lsc_special_field')) {\n                            case 'mem_begin': // fallthrough\n                            case 'mem_end':\n                                $type = 'date';\n                                break;\n\n                            case 'usr_photo':\n                                $type = '';\n                                break;\n\n                            default:\n                                $type = 'string';\n                        }\n                    }\n\n                    $parser = new ConditionParser();\n\n                    // if profile field then add not exists condition\n                    if ($lscUsfId > 0) {\n                        $parser->setNotExistsStatement('SELECT 1\n                                                      FROM ' . TBL_USER_DATA . ' ' . $tableAlias . 's\n                                                     WHERE ' . $tableAlias . 's.usd_usr_id = usr_id\n                                                       AND ' . $tableAlias . 's.usd_usf_id = ' . $lscUsfId);\n                    }\n\n                    // now transform condition into SQL\n                    if (strpos($dbColumnName, ' AS') > 0) {\n                        $columnName = substr($dbColumnName, 0, strpos($dbColumnName, ' AS'));\n                    } else {\n                        $columnName = $dbColumnName;\n                    }\n                    $sqlWhere .= $parser->makeSqlStatement($value, $columnName, $type, $gProfileFields->getPropertyById($lscUsfId, 'usf_name')); // TODO Exception handling\n                }\n            }\n        }\n\n        if(count($arrSqlColumnNames) > 0) {\n            $sqlColumnNames = ', ' . implode(', ', $arrSqlColumnNames);\n        }\n\n        // add sorting if option is set and sorting columns are stored\n        if ($optionsAll['useOrderBy']) {\n            $sqlOrderBys = implode(', ', $arrOrderByColumns);\n\n            // if roles should be shown than sort by leaders\n            if (count($optionsAll['showRolesMembers']) > 0) {\n                if (strlen($sqlOrderBys) > 0) {\n                    $sqlOrderBys = 'mem_leader DESC, ' . $sqlOrderBys;\n                } else {\n                    $sqlOrderBys = 'mem_leader DESC';\n                }\n            }\n\n            if (strlen($sqlOrderBys) > 0) {\n                $sqlOrderBys = ' ORDER BY ' . $sqlOrderBys;\n            }\n        }\n\n        if (count($optionsAll['showRolesMembers']) > 0) {\n            $sqlRoleIds = implode(', ', $optionsAll['showRolesMembers']);\n        } else {\n            $sqlRoleIds = '(SELECT rol_id\n                              FROM ' . TBL_CATEGORIES . '\n                             INNER JOIN ' . TBL_ROLES . ' ON rol_cat_id = cat_id\n                             WHERE (  cat_org_id = '. $GLOBALS['gCurrentOrgId']. '\n                                   OR cat_org_id IS NULL )\n                               AND cat_name_intern <> \\'EVENTS\\'\n                            )';\n        }\n\n        // Set state of membership\n        if ($optionsAll['showFormerMembers']) {\n            $sqlMemberStatus = 'AND mem_end < \\''.DATE_NOW.'\\'';\n        } else {\n            if ($optionsAll['startDate'] === null) {\n                $sqlMemberStatus = 'AND mem_begin <= \\''.DATE_NOW.'\\'';\n            } else {\n                $sqlMemberStatus = 'AND mem_begin <= \\''.$optionsAll['endDate'].' 23:59:59\\'';\n            }\n\n            if ($optionsAll['endDate'] === null) {\n                $sqlMemberStatus .= ' AND mem_end >= \\''.DATE_NOW.'\\'';\n            } else {\n                $sqlMemberStatus .= ' AND mem_end >= \\''.$optionsAll['startDate'].' 00:00:00\\'';\n            }\n        }\n\n        // check if mem_leaders should be shown\n        if (count($optionsAll['showRolesMembers']) === 1) {\n            $sqlMemLeader = ' mem_leader, ';\n        } else {\n            $sqlMemLeader = ' false AS mem_leader, ';\n        }\n\n        $sqlUserJoin = 'INNER JOIN '.TBL_USERS.'\n                                ON usr_id = mem_usr_id';\n        $sqlRelationTypeWhere = '';\n        if (count($optionsAll['showRelationTypes']) > 0) {\n            $sqlUserJoin = 'INNER JOIN '.TBL_USER_RELATIONS.'\n                                    ON ure_usr_id1 = mem_usr_id\n                            INNER JOIN '.TBL_USERS.'\n                                    ON usr_id = ure_usr_id2';\n            $sqlRelationTypeWhere = 'AND ure_urt_id IN ('.implode(', ', $optionsAll['showRelationTypes']).')';\n        }\n\n        // Set SQL-Statement\n        if ($optionsAll['showAllMembersDatabase']) {\n            $sql = 'SELECT DISTINCT false AS mem_leader, usr_id, usr_uuid ' . $sqlColumnNames . '\n                      FROM '.TBL_USERS.'\n                           '.$sqlJoin.'\n                     WHERE usr_valid = true '.\n                           $sqlWhere.\n                           $sqlOrderBys;\n        } else {\n            $sql = 'SELECT DISTINCT ' . $sqlMemLeader . ' usr_id, usr_uuid ' . $sqlColumnNames . '\n                      FROM '.TBL_MEMBERS.'\n                INNER JOIN '.TBL_ROLES.'\n                        ON rol_id = mem_rol_id\n                INNER JOIN '.TBL_CATEGORIES.'\n                        ON cat_id = rol_cat_id\n                           '.$sqlUserJoin.'\n                           '.$sqlJoin.'\n                     WHERE usr_valid = true\n                       AND rol_valid = true\n                       AND rol_id IN ('.$sqlRoleIds.')\n                           '.$sqlRelationTypeWhere.'\n                       AND (  cat_org_id = '. $GLOBALS['gCurrentOrgId']. '\n                           OR cat_org_id IS NULL )\n                           '.$sqlMemberStatus.\n                           $sqlWhere.\n                           $sqlOrderBys;\n        }\n\n        return $sql;\n    }\n\n    /**\n     * Read data of responsible columns and store in object. Only columns of profile fields which the current\n     * user is allowed to view will be stored in the object. If only the role membership should be shown than\n     * remove all columns except first name, last name and assignment timestamps.\n     */\n    public function readColumns()\n    {\n        global $gCurrentUser, $gProfileFields;\n\n        $this->columns = array();\n\n        $sql = 'SELECT *\n                  FROM '.TBL_LIST_COLUMNS.'\n                 WHERE lsc_lst_id = ? -- $this->getValue(\\'lst_id\\')\n              ORDER BY lsc_number ASC';\n        $lscStatement = $this->db->queryPrepared($sql, array((int) $this->getValue('lst_id')));\n\n        while ($lscRow = $lscStatement->fetch()) {\n            $usfId = (int) $lscRow['lsc_usf_id'];\n\n            // only add columns to the array if the current user is allowed to view them\n            if ($usfId === 0\n            || $gProfileFields->isVisible($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), $gCurrentUser->editUsers())) {\n                // if only names should be shown, than check if it's a name field\n                if (!$this->showOnlyNames\n                    || ($usfId > 0 && in_array($gProfileFields->getPropertyById($usfId, 'usf_name_intern'), array('FIRST_NAME', 'LAST_NAME')))\n                    || ($usfId === 0 && in_array($lscRow['lsc_special_field'], array('mem_begin', 'mem_end', 'mem_leader', 'mem_usr_id_change', 'mem_timestamp_change', 'mem_approved', 'mem_comment', 'mem_count_guests')))) {\n                    // some user fields should only be viewed by users that could edit roles\n                    if (!in_array($lscRow['lsc_special_field'], array('usr_login_name', 'usr_usr_id_create', 'usr_timestamp_create', 'usr_usr_id_change', 'usr_timestamp_change', 'usr_login_name', 'usr_uuid'))\n                        || $gCurrentUser->editUsers()) {\n                        $lscNumber = (int)$lscRow['lsc_number'];\n                        $this->columns[$lscNumber] = new TableAccess($this->db, TBL_LIST_COLUMNS, 'lsc');\n                        $this->columns[$lscNumber]->setArray($lscRow);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Reads a record out of the table in database selected by the unique uuid column in the table.\n     * The name of the column must have the syntax table_prefix, underscore and uuid. E.g. usr_uuid.\n     * Per default all columns of the default table will be read and stored in the object.\n     * Not every Admidio table has a uuid. Please check the database structure before you use this method.\n     * @param int $uuid Unique uuid that should be searched.\n     * @return bool Returns **true** if one record is found\n     * @see TableAccess#readData\n     * @see TableAccess#readDataByColumns\n     */\n    public function readDataByUuid($uuid)\n    {\n        $returnValue = parent::readDataByUuid($uuid);\n\n        if ($returnValue) {\n            $this->readColumns();\n        }\n\n        return $returnValue;\n    }\n\n    /* Removes a column from the list configuration array, but only in the memory and not in database.\n     * @param string $columnNameOrUsfId Accept the usfId or the name of the special field that should be removed.\n     */\n    public function removeColumn($columnNameOrUsfId)\n    {\n        $currentNumber = 1;\n\n        // check for every column if the number is expected otherwise set new number\n        foreach ($this->columns as $number => $listColumn) {\n            if ($listColumn->getValue('lsc_special_field') === $columnNameOrUsfId\n            || $listColumn->getValue('lsc_usf_id') === (int) $columnNameOrUsfId) {\n                unset($this->columns[$number]);\n            } else {\n                // set new number to the columns after the removed column\n                if ($currentNumber < $number) {\n                    $this->columns[$currentNumber] = $listColumn;\n                    unset($this->columns[$number]);\n                }\n                $currentNumber++;\n            }\n        }\n    }\n\n    /**\n     * The method will clear all column data of this object and restore all\n     * columns from the database. Then the column number will be renewed for all columns.\n     * This is in some cases a necessary fix if a column number was lost.\n     */\n    public function repair()\n    {\n        // restore columns from database\n        $this->columns = array();\n        $this->readColumns();\n        $newColumnNumber = 1;\n\n        // check for every column if the number is expected otherwise set new number\n        foreach ($this->columns as $number => $listColumn) {\n            if ($number !== $newColumnNumber) {\n                $this->columns[$number]->setValue('lsc_number', $newColumnNumber);\n                $this->columns[$number]->save();\n            }\n            ++$newColumnNumber;\n        }\n\n        // now restore columns with new numbers\n        $this->columns = array();\n        $this->readColumns();\n    }\n\n    /**\n     * @param bool $updateFingerPrint\n     * @return bool\n     */\n    public function save($updateFingerPrint = true)\n    {\n        $this->db->startTransaction();\n\n        $returnValue = parent::save($updateFingerPrint);\n\n        // save columns\n        foreach ($this->columns as $listColumn) {\n            if ((int) $listColumn->getValue('lsc_lst_id') === 0) {\n                $listColumn->setValue('lsc_lst_id', (int) $this->getValue('lst_id'));\n            }\n            $listColumn->save($updateFingerPrint);\n        }\n\n        $this->db->endTransaction();\n\n        return $returnValue;\n    }\n\n    /**\n     * Set a mode that only first name and last name will be returned if the sql is called or columns should be\n     * returned. This is useful is a role has the setting that no profile information should be shown, but the\n     * membership could be viewed.\n     * @return void\n     */\n    public function setModeShowOnlyNames()\n    {\n        $this->showOnlyNames = true;\n\n        if(count($this->columns) > 0) {\n            $this->readColumns();\n        }\n    }\n}\n"], "filenames": ["adm_program/system/classes/ListConfiguration.php"], "buggy_code_start_loc": [236], "buggy_code_end_loc": [237], "fixing_code_start_loc": [236], "fixing_code_end_loc": [239], "type": "CWE-1236", "message": "Improper Neutralization of Formula Elements in a CSV File in GitHub repository admidio/admidio prior to 4.2.9.", "other": {"cve": {"id": "CVE-2023-3302", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-23T13:15:10.517", "lastModified": "2023-06-29T13:30:44.040", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Neutralization of Formula Elements in a CSV File in GitHub repository admidio/admidio prior to 4.2.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:N", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 5.2}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1236"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:admidio:admidio:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.2.9", "matchCriteriaId": "E38D2EC2-B220-473C-ABD0-5CD26F447C2E"}]}]}], "references": [{"url": "https://github.com/admidio/admidio/commit/c87a7074a1a73c4851263060afd76aa4d5b6415f", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/5e18619f-8379-464a-aad2-65883bb4e81a", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/admidio/admidio/commit/c87a7074a1a73c4851263060afd76aa4d5b6415f"}}