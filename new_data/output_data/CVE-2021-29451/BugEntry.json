{"buggy_code": ["# Changelog\nAll notable changes to this project from version 5.0.0 upwards are documented in this file. \nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## [5.2.1] \u2013 Unreleased\n\n### Added\n- Possibility to reorder table columns in the tables section upstairs.\n\n### Changed\n- Render internal links in text pages with no target attribute (that the Quill editor adds by default).\n- The welcome page is now a standard text page.\n- Security.groovy can now have user beans injected with @Autowired.\n\n### Fixed\n- Backwards compatibility: revert `T extends Serializable` in CRUD actions, introduced in v5.2.0. [#428](https://github.com/ManyDesigns/Portofino/issues/428)\n- Authentication token refresh after expiration. [#430](https://github.com/ManyDesigns/Portofino/issues/430)\n\n## [5.2.0] \u2013 2020-11-30\n\n### Added\n\n- User interface extensibility improvements:\n  - Custom pages in HTML and JavaScript with no Angular knowledge required (example in demo-tt)\n  - All pages can load custom JavaScript (example in demo-tt)\n  - Page templates can include several sections where child pages can be embedded (like Portofino 4)\n  - demo-tt profile page (example of custom component)\n  - Progressive Web Application (PWA) using angular-pwa, example in demo-tt\n- Full support for POJO-based persistence:\n  - Export generated classes to actions and shared code\n  - Export generated classes to the file system so that your IDE can pick them up\n  - Allow to configure the entity mode of each database mapping from the UI (the default is still map-based)\n- Authentication improvements:\n  - Better support for external auth (e.g., in a microservices setting). Built-in support for authentication\n    against KeyCloak.\n  - application/json login endpoint (in addition to the existing form-based endpoint).\n  - Better handling of token expiration in the client.\n- Per-database Hibernate properties.\n- Support annotations on databases.\n- Quartz jobs now run with a working Shiro environment.\n- Ability for extensions and user code to \"mount\" actions to arbitrary mount points in the action tree.\n\n### Changed\n- Angular updated to version 11\n- Groovy updated to version 3\n- Various other dependencies updated for security & bug fixes\n- CRUD REST API versioning with X-Portofino-API-Version header\n- CRUD REST API changes (legacy behavior is still the default):\n  - Bulk update (PUT) optionally returns list of modified IDs\n  - Bulk delete (DELETE) optionally returns list of deleted IDs\n- Generated Security.groovy is now based on annotations on the model rather than hard-coded values\n\n### Removed\n- Maven profile \"portofino-development\" which has been superseded by Docker\n- Maven profile \"no-frontend-build\" (use -P-build-frontend)\n- `PortofinoRoot.mount` method and related methods, replaced by `ActionLogic.mount`. This is a breaking API change for\n  extensions making use of the removed methods, but none are known to us (also because the methods are undocumented and\n  only used internally by portofino-upstairs).\n\n### Fixed\n\n- Newly created CRUD pages don't have create/update buttons ([#406](https://github.com/ManyDesigns/Portofino/issues/406))\n- Page configuration is broken for pages using the default template implicitly ([#423](https://github.com/ManyDesigns/Portofino/issues/423)).\n- User self-registration is broken in several ways ([#414](https://github.com/ManyDesigns/Portofino/issues/414)).\n  Note that **this involves a breaking API change** in `Security.groovy`, specifically, the signature of the method\n  `saveSelfRegisteredUser` has changed to return both the token and the email of the newly saved user.\n  However, typical `Security.groovy` files (generated by the wizard) don't override that method, so most users shouldn't\n  have to do anything.\n\n## [5.1.4] \u2013 2020-07-04\n\n### Added\n- \"Fat jar\" deployment option (with embedded Tomcat)\n- Restored the profile section of demo-tt with an example custom Angular component\n- Included the MariaDB JDBC driver in the binary distribution\n\n### Changed\n- Improved wizard and UI\n- Postgres driver version updated\n- Include explicit 'tt' schema in SQL queries in demo-tt (plays nicer with Postgres)\n- Mail module as a separate artifact\n\n### Fixed\n- CRUD pages generated by wizard don't have buttons ([#372](https://github.com/ManyDesigns/Portofino/issues/372))\n- Broken blob download URL and code ([#384](https://github.com/ManyDesigns/Portofino/issues/384))\n- Pressing the Enter key on a search field does not perform a search ([#383](https://github.com/ManyDesigns/Portofino/issues/383))\n\n## [5.1.3] \u2013 2020-05-17\n\n### Added\n- Notifications bell showing up to 20 messages\n- More error reporting in the wizard\n- Spanish translation of the UI, thanks to Gabriel Mautino\n- Possibility for buttons to prevent double submit by returning an Observable\n- RestEasy support (alternative to Jersey JAX-RS)\n- Tested on WildFly 19.0.0.Final\n- Docker image for the upstairs application\n\n### Changed\n- Polished the Maven archetype\n\n### Fixed\n- Database views aren't usable in practice\n- Move page broken for text pages ([#349](https://github.com/ManyDesigns/Portofino/issues/349))\n- JWT filter eats the Authorization header even if it's not a JWT ([#367](https://github.com/ManyDesigns/Portofino/issues/367))\n- OpenAPI manifest only shows root resource ([#369](https://github.com/ManyDesigns/Portofino/issues/369)) \n\n## [5.1.2] - 2020-03-02\n\n### Added\n- API for pages to compute their navigation menu\n- Support for buttons with only an icon and no text\n- Button to refresh the CRUD search\n\n### Changed\n- Wizard is a bit more user-friendly\n- Pretty-print saved `config.json`\n\n### Fixed\n- `SendMailAction` not working ([#323](https://github.com/ManyDesigns/Portofino/issues/323))\n- Arrays in XML annotations ([#325](https://github.com/ManyDesigns/Portofino/issues/325))\n- Local API with IPv6 addresses ([#327](https://github.com/ManyDesigns/Portofino/issues/327))\n- Can't save selection providers ([#328](https://github.com/ManyDesigns/Portofino/issues/328))\n- Generated `Security.groovy` errors when loading groups ([#329](https://github.com/ManyDesigns/Portofino/issues/329))\n- OPTIONS with expired JWT fails triggering bad CORS ([#333](https://github.com/ManyDesigns/Portofino/issues/333))\n- Server-side localized info/warning/error messages ([#334](https://github.com/ManyDesigns/Portofino/issues/334))\n\n## [5.1.1] - 2020-01-10\n\n### Added\n- Text pages (client only, no I18n).\n- Support deployment behind a proxy.\n- Documentation of Docker development, debugging and deployment in the archetype.\n- Example deployment of demo-tt as Docker containers on Amazon ECS.\n- Sample Docker deployment with the backend and frontend separated into different containers. \n- Bare-bones support for mapping tables as POJO's (objects) rather than maps.\n\n### Changed\n- Give pages more control on security checks, allowing for client-only pages.\n- Improve performance of selection providers by asking for data lazily in certain cases.\n- Properly support Docker deployments using the image built by the standard pom of archetype-generated projects.\n- Several wizard improvements and fixes.\n\n### Fixed\n- Model not properly saved ([#294](https://github.com/ManyDesigns/Portofino/issues/294), [#303](https://github.com/ManyDesigns/Portofino/issues/303)).\n- Page configuration not properly saved ([#310](https://github.com/ManyDesigns/Portofino/issues/310), [#311](https://github.com/ManyDesigns/Portofino/issues/311)).\n- Names of mapped database objects not escaped ([#297](https://github.com/ManyDesigns/Portofino/issues/297)).\n- New actions added with bad class names ([#301](https://github.com/ManyDesigns/Portofino/issues/301)).\n- Database synchronization issues with MariaDB and PostgreSQL ([#283](https://github.com/ManyDesigns/Portofino/issues/283), [#298](https://github.com/ManyDesigns/Portofino/issues/298)).\n- KeyManager with no password (ported from Portofino 4).\n\n## [5.1.0] - 2019-10-31\n\n### Added\n- Map database views, by default as read-only, but overridable.\n- Support non insertable and/or non updatable entities in CRUD actions.\n- Annotations are propagated from model to annotated classes.\n- Support persistent Java 8+ Date and time API values.\n- Generic database platform for unrecognized databases.\n- Support for development and debug with Docker, both in demo-tt and in the archetype.\n- Periodically retry database connections that have failed at startup if Quartz is available.\n- Filter CRUD fields according to permissions (at the level of the ClassAccessor).\n- Filter configuration fields according to permissions.\n  In particular, the CRUD query is hidden if the user is not a developer.\n- Proper support for `@DatabaseBlob` upstairs.\n\n### Changed\n- **Update Hibernate to the 5.x branch**, in particular to version 5.4.7.Final.\n    The Hibernate Session factory is now configured with annotated Java classes generated at runtime.\n    The ad-hoc code for Hibernate 4 has been removed.\n- Deprecate the single `portofino-model.xml` file in favor of multiple `portofino-model/<database-name>/database.xml` files.\n  Legacy files are supported and converted to the new format upon save.\n- Change the format of annotations in the model and in `configuration.xml`.\n  Annotations in the legacy format are converted upon save.\n- Replace `java.io.File` with Apache Commons VFS `FileObject` in `Persistence`.\n  **This is a breaking API change.**\n- Update all uses of Commons Configuration to version 2.6, including Commons Configuration 1.x uses.\n  **This is a breaking API change.**\n- Ensure that Portofino 5 can run without a Java compiler (JDK) available.\n  \n### Fixed\n- Virtual properties not saved properly [[#269]](https://github.com/ManyDesigns/Portofino/issues/269).\n- Wizard failing on connections to Oracle databases [[#271]](https://github.com/ManyDesigns/Portofino/issues/271).\n- Minor upstairs, Spring and Security.groovy fixes.\n\n## [5.0.3] - 2019-09-25\n\n### Added\n- Support for MariaDB Connector/J.\n- Simple automatic JWT renewal (this means that user sessions do not expire during regular user activity).\n- Possibility to override buttons in subclasses [[#253]](https://github.com/ManyDesigns/Portofino/issues/253).\n\n### Changed\n- JWT expiration property is now called `jwt.expiration`.\n- Better Spring context reloading and more rational context layout w/ documentation. Still doesn't support all scenarios.\n- Ensure Portofino does not create any HTTP sessions by itself in any circumstances [[#255]](https://github.com/ManyDesigns/Portofino/issues/255). \n\n### Fixed\n- Badly broken `Security.groovy`, both the built-in one and ones generated by the wizard.\n- `mail.enabled = false` makes the application fail to start.\n- CRUD/forms:\n   - Form invalid with empty, pristine date fields.\n   - Save/update exception not handled properly.\n   - Rich text field label misplacement.\n   - Passwords visible in search results.\n   - Possibility to save configuration with missing required fields.\n   - Missing error message for max length in text fields.\n   - IDs with spaces cause exception [[#254]](https://github.com/ManyDesigns/Portofino/issues/254).\n\n## [5.0.2] - 2019-08-29\n\n### Added\n- Restored and extended some Portofino 4 features:\n    - Numbers and dates can be searched with ranges as well as with an exact value.\n    - Text properties can be searched with various operators (contains, equals, starts-with and ends-with).\n    - Sign up, change password and forgot password dialogs and REST methods.\n    - Password fields can ask to confirm the password (i.e., to type it twice).\n- Improve developer experience with better code reloading:\n    - Quartz jobs are reloaded automatically when the code changes, without restarting the application,\n      and, when they terminate execution, any open Hibernate sessions are closed even in case of exceptions.\n    - When source code changes, the user-defined Spring context is refreshed, so that services and actions can pick up the changes.\n      This only works with classes annotated `@Component`, `@Repository` or `@Service`, to avoid excessive refreshes.\n- When embedded, the crud page has now the option to open the detail in the same page instead of navigating to the detail URL.\n- Check for new versions at startup.\n- Make the JWT expiration time configurable (in minutes, defaults to 30).\n\n### Changed\n- UI improvements:\n    - Improve looks by drawing inspiration from [sb-admin-material](https://github.com/start-javascript/sb-admin-material).\n    - Use Material Typography.\n    - The user declining to log in is sent back to the home. The current page has a chance to inject another behaviour.\n    - Support the `multiplier` property of the `@DecimalFormat` annotation (for percent, per mille and similar).\n    - The rich text component is better integrated in Material forms.\n    - More comprehensive detection of links in text fields with `@HighlightLinks`.\n    - The page settings panel is reachable via the URL, by including the query parameter `settings`.\n- Important dependencies updated: Angular, Groovy, Liquibase, Shiro.\n\n### Fixed\n- Select fields with no value or disabled showing nothing or `undefined`.\n- Create new page at the top level.\n- Toolbar overflowing on mobile.\n- Support BigInteger and BigDecimal properties in the UI.\n- Properly save the crud page configuration.\n- Use the correct schema name when synchronizing an aliased schema.\n\n### Security\n- Improved code quality and security and updated insecure dependencies using automated tools.\n\n## [5.0.1] - 2019-06-07\n\n### Added\n- Created this changelog.\n- Completed the translation to Italian.\n- HQL queries support list parameters (ported from P4).\n\n### Changed\n- The no-frontend-build Maven profile skips all TypeScript/Angular builds without compromising the Java build.\n- Keep the order of databases in the model (ported from P4).\n- Updated to Angular 8.\n- Logging out redirects to the home page.\n\n### Fixed\n- CRUD bulk operations detection by the UI.\n- Inconsistent use of schemaName vs actualSchemaName.\n- Default field encrypter (ported from P4).\n- Many to many selection provider database session (ported from P4).\n- Annotations not preserved when saving CRUD configuration and tables.\n\n### Security\n- Improved code quality and security using snyk, lgtm and SpotBugs to find vulnerabilities and brittle code.\n", "package com.manydesigns.portofino.dispatcher.security.jwt;\n\nimport com.manydesigns.portofino.dispatcher.security.RolesPermission;\nimport io.jsonwebtoken.Jwt;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.io.Decoders;\nimport org.apache.commons.configuration2.Configuration;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\n\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.Serializable;\nimport java.security.Key;\nimport java.util.*;\n\n/**\n * Created by alessio on 02/08/16.\n */\npublic class JWTRealm extends AuthorizingRealm {\n    \n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        Set<String> roles = getRoles(principals);\n        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo(roles);\n        simpleAuthorizationInfo.addObjectPermission(new RolesPermission(roles));\n        return simpleAuthorizationInfo;\n    }\n\n    protected Set<String> getRoles(PrincipalCollection principals) {\n        return getRoles(principals.getPrimaryPrincipal());\n    }\n    \n    protected Set<String> getRoles(Object principal) {\n        HashSet<String> roles = new HashSet<>();\n        if(principal instanceof Map) {\n            Object rolesList = ((Map) principal).get(\"roles\");\n            if(rolesList instanceof Collection) {\n                roles.addAll((Collection<? extends String>) rolesList);\n            }\n        }\n        return roles;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n        String secret = getSecret();\n        Key key = new SecretKeySpec(Decoders.BASE64.decode(secret), getSignatureAlgorithm().getJcaName());\n        \n        Jwt jwt = Jwts.parser().\n                setSigningKey(key).\n                parse((String) token.getPrincipal());\n        Map<String, Serializable> principal = getPrincipal(jwt);\n        return new SimpleAuthenticationInfo(principal, ((String) token.getCredentials()).toCharArray(), getName());\n    }\n\n    protected SignatureAlgorithm getSignatureAlgorithm() {\n        return SignatureAlgorithm.HS512;\n    }\n\n    protected Map<String, Serializable> getPrincipal(Jwt jwt) {\n        Map<String, Serializable> principal = new HashMap<>();\n        principal.put(\"jwt\", (Serializable) jwt.getBody());\n        return principal;\n    }\n    \n    protected Configuration getConfiguration() {\n        return null; //TODO\n    }\n\n    protected String getSecret() {\n        return getConfiguration().getString(\"jwt.secret\");\n    }\n\n    @Override\n    public boolean supports(AuthenticationToken token) {\n        return token instanceof JSONWebToken;\n    }\n}\n", "/*\n * Copyright (C) 2005-2020 ManyDesigns srl.  All rights reserved.\n * http://www.manydesigns.com/\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 3 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n\npackage com.manydesigns.portofino.shiro;\n\nimport com.manydesigns.elements.reflection.ClassAccessor;\nimport com.manydesigns.elements.reflection.JavaClassAccessor;\nimport com.manydesigns.portofino.code.CodeBase;\nimport com.manydesigns.portofino.security.SecurityLogic;\nimport io.jsonwebtoken.Jwt;\nimport io.jsonwebtoken.JwtException;\nimport io.jsonwebtoken.Jwts;\nimport io.jsonwebtoken.SignatureAlgorithm;\nimport io.jsonwebtoken.io.Decoders;\nimport org.apache.commons.configuration2.Configuration;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authc.credential.PasswordMatcher;\nimport org.apache.shiro.authc.credential.PasswordService;\nimport org.apache.shiro.authz.AuthorizationException;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.Permission;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.codec.Base64;\nimport org.apache.shiro.crypto.hash.HashService;\nimport org.apache.shiro.crypto.hash.format.HashFormat;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.jetbrains.annotations.NotNull;\nimport org.joda.time.DateTime;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.*;\nimport java.security.Key;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\n/**\n * Default implementation of PortofinoRealm. Provides convenient implementations of the interface methods.\n *\n * @author Paolo Predonzani     - paolo.predonzani@manydesigns.com\n * @author Angelo Lupo          - angelo.lupo@manydesigns.com\n * @author Giampiero Granatella - giampiero.granatella@manydesigns.com\n * @author Alessio Stalla       - alessio.stalla@manydesigns.com\n */\npublic abstract class AbstractPortofinoRealm extends AuthorizingRealm implements PortofinoRealm {\n    public static final String copyright = \"Copyright (C) 2005-2020 ManyDesigns srl\";\n\n    public static final String JWT_EXPIRATION_PROPERTY = \"jwt.expiration\";\n    public static final String JWT_SECRET_PROPERTY = \"jwt.secret\";\n\n    @Autowired\n    protected Configuration portofinoConfiguration;\n\n    @Autowired\n    protected CodeBase codeBase;\n\n    protected PasswordService passwordService;\n\n    protected boolean legacyHashing = false;\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractPortofinoRealm.class);\n\n    protected AbstractPortofinoRealm() {\n        //Legacy - let the actual implementation handle hashing\n        setup(new PlaintextHashService(), new PlaintextHashFormat());\n        legacyHashing = true;\n    }\n\n    //--------------------------------------------------------------------------\n    // Authentication\n    //--------------------------------------------------------------------------\n\n    @Override\n    public boolean supports(AuthenticationToken token) {\n        return token instanceof JSONWebToken || super.supports(token);\n    }\n\n    public AuthenticationInfo loadAuthenticationInfo(JSONWebToken token) {\n        Key key = getJWTKey();\n        Jwt jwt;\n        try {\n            jwt = Jwts.parser().setSigningKey(key).parse(token.getPrincipal());\n        } catch (JwtException e) {\n            throw new AuthenticationException(e);\n        }\n        String credentials = legacyHashing ? token.getCredentials() : encryptPassword(token.getCredentials());\n        Object principal = extractPrincipalFromWebToken(jwt);\n        return new SimpleAuthenticationInfo(principal, credentials, getName());\n    }\n\n    protected Object extractPrincipalFromWebToken(Jwt jwt) {\n        Map body = (Map) jwt.getBody();\n        String base64Principal = (String) body.get(\"serialized-principal\");\n        byte[] serializedPrincipal = Base64.decode(base64Principal);\n        Object principal;\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        try {\n            Thread.currentThread().setContextClassLoader(codeBase.asClassLoader()); //In case the serialized principal is a POJO entity\n            ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(serializedPrincipal)) {\n                @Override\n                protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n                    return codeBase.loadClass(desc.getName());\n                }\n            };\n            principal = objectInputStream.readObject();\n            objectInputStream.close();\n        } catch (Exception e) {\n            throw new AuthenticationException(e);\n        } finally {\n            Thread.currentThread().setContextClassLoader(loader);\n        }\n        return principal;\n    }\n\n    public String generateWebToken(Object principal) {\n        Key key = getJWTKey();\n        Map<String, Object> claims = new HashMap<>();\n        claims.put(\"principal\", getPrincipalForWebToken(principal));\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        ObjectOutputStream objectOutputStream;\n        try {\n            objectOutputStream = new ObjectOutputStream(bytes);\n            objectOutputStream.writeObject(principal);\n            objectOutputStream.close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        claims.put(\"serialized-principal\", bytes.toByteArray());\n        int expireAfterMinutes = portofinoConfiguration.getInt(JWT_EXPIRATION_PROPERTY, 30);\n        return Jwts.builder().\n                setClaims(claims).\n                setExpiration(new DateTime().plusMinutes(expireAfterMinutes).toDate()).\n                signWith(key, SignatureAlgorithm.HS512).\n                compact();\n    }\n\n    protected Object getPrincipalForWebToken(Object principal) {\n        return cleanUserPrincipal(principal);\n    }\n\n    /**\n     * Clean the user principal making it suitable for JSON serialization. For example, if it is a map, remove\n     * circular references.\n     * @param principal the principal.\n     * @return\n     */\n    protected Object cleanUserPrincipal(Object principal) {\n        if(principal instanceof Map) {\n            Map cleanUser = new HashMap();\n            AtomicBoolean skipped = new AtomicBoolean(false);\n            ((Map<?, ?>) principal).forEach((k, v) -> {\n                if (v instanceof List || v instanceof Map) {\n                    logger.debug(\"Skipping {}\", k);\n                    skipped.set(true);\n                } else {\n                    cleanUser.put(k, v);\n                }\n            });\n            if(skipped.get()) {\n                logger.debug(\"The user entity has potential self-references that make it unusable as a principal, because it must be serializable to JSON. Returning a non-persistent map with no references.\");\n                return cleanUser;\n            } else {\n                return principal;\n            }\n        }\n        return principal;\n    }\n\n    @NotNull\n    protected Key getJWTKey() {\n        String secret = portofinoConfiguration.getString(JWT_SECRET_PROPERTY);\n        return new SecretKeySpec(Decoders.BASE64.decode(secret), SignatureAlgorithm.HS512.getJcaName());\n    }\n\n    // --------------------------------------------------------------------------\n    // Authorization\n    //--------------------------------------------------------------------------\n\n    /**\n     * {@inheritDoc}\n     * <p>This default implementation handles built-in groups (all, anonymous, registered, etc.), delegating\n     * to loadAuthorizationInfo method the actual loading of application-specific groups.</p>\n     *\n     * @return\n     */\n    public AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        Object principal = principals.getPrimaryPrincipal();\n        Set<String> groups = getGroups(principal);\n\n        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(groups);\n        if(groups.contains(SecurityLogic.getAdministratorsGroup(portofinoConfiguration))) {\n            info.addStringPermission(\"*\");\n        }\n        Permission permission = new GroupPermission(groups);\n        info.setObjectPermissions(Collections.singleton(permission));\n        return info;\n    }\n\n    @Override\n    @NotNull\n    public Set<String> getGroups(Object principal) {\n        Set<String> groups = new HashSet<>();\n        groups.add(SecurityLogic.getAllGroup(portofinoConfiguration));\n        if (principal == null) {\n            groups.add(SecurityLogic.getAnonymousGroup(portofinoConfiguration));\n        } else if (principal instanceof Serializable) {\n            groups.add(SecurityLogic.getRegisteredGroup(portofinoConfiguration));\n            groups.addAll(loadAuthorizationInfo((Serializable) principal));\n        } else {\n            throw new AuthorizationException(\"Invalid principal: \" + principal);\n        }\n        return groups;\n    }\n\n    /**\n     * Loads the groups associated to a given user.\n     * @param principal the user object.\n     * @return the groups as a collection of strings.\n     */\n    protected Collection<String> loadAuthorizationInfo(Serializable principal) {\n        return Collections.emptySet();\n    }\n\n    //--------------------------------------------------------------------------\n    // Groups CRUD\n    //--------------------------------------------------------------------------\n\n    /**\n     * {@inheritDoc}\n     * <p>This default implementation returns the built-in groups\n     * (all, anonymous, registered, administrators).\n     * You can override it to add custom groups for your application.</p>\n     * @return\n     */\n    public Set<String> getGroups() {\n        Set<String> groups = new LinkedHashSet<String>();\n        groups.add(SecurityLogic.getAllGroup(portofinoConfiguration));\n        groups.add(SecurityLogic.getAnonymousGroup(portofinoConfiguration));\n        groups.add(SecurityLogic.getRegisteredGroup(portofinoConfiguration));\n        groups.add(SecurityLogic.getAdministratorsGroup(portofinoConfiguration));\n        return groups;\n    }\n\n    //--------------------------------------------------------------------------\n    // Users CRUD\n    //--------------------------------------------------------------------------\n\n    @Override\n    public Serializable getUserById(String encodedUserId) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Serializable getUserByEmail(String email) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean supportsSelfRegistration() {\n        return false;\n    }\n\n    @Override\n    public ClassAccessor getSelfRegisteredUserClassAccessor() {\n        return JavaClassAccessor.getClassAccessor(User.class);\n    }\n\n    @Override\n    public String getUserPrettyName(Serializable user) {\n        return user.toString();\n    }\n\n    //--------------------------------------------------------------------------\n    // User workflow\n    //--------------------------------------------------------------------------\n\n    @Override\n    public void verifyUser(Serializable user) {\n        throw new UnsupportedOperationException();\n    }\n\n    //--------------------------------------------------------------------------\n    // User password management\n    //--------------------------------------------------------------------------\n\n    @Override\n    public void changePassword(Serializable user, String oldPassword, String newPassword) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public String generateOneTimeToken(Serializable user) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public String[] saveSelfRegisteredUser(Object user) {\n        throw new UnsupportedOperationException();\n    }\n\n    protected void setup(HashService hashService, HashFormat hashFormat) {\n        PortofinoPasswordService passwordService = new PortofinoPasswordService();\n        passwordService.setHashService(hashService);\n        passwordService.setHashFormat(hashFormat);\n        PasswordMatcher passwordMatcher = new PasswordMatcher();\n        passwordMatcher.setPasswordService(passwordService);\n        setCredentialsMatcher(passwordMatcher);\n        this.passwordService = passwordService;\n        this.legacyHashing = false;\n    }\n}\n"], "fixing_code": ["# Changelog\nAll notable changes to this project from version 5.0.0 upwards are documented in this file. \nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n## [5.2.1] \u2013 Unreleased\n\n### Added\n- Possibility to reorder table columns in the tables section upstairs.\n\n### Changed\n- Render internal links in text pages with no target attribute (that the Quill editor adds by default).\n- The welcome page is now a standard text page.\n- Security.groovy can now have user beans injected with @Autowired.\n\n### Fixed\n- Important security vulnerability that may have allowed access with forged tokens.\n- Authentication token refresh after expiration. [#430](https://github.com/ManyDesigns/Portofino/issues/430)\n- Backwards compatibility: revert `T extends Serializable` in CRUD actions, introduced in v5.2.0. [#428](https://github.com/ManyDesigns/Portofino/issues/428)\n\n## [5.2.0] \u2013 2020-11-30\n\n### Added\n\n- User interface extensibility improvements:\n  - Custom pages in HTML and JavaScript with no Angular knowledge required (example in demo-tt)\n  - All pages can load custom JavaScript (example in demo-tt)\n  - Page templates can include several sections where child pages can be embedded (like Portofino 4)\n  - demo-tt profile page (example of custom component)\n  - Progressive Web Application (PWA) using angular-pwa, example in demo-tt\n- Full support for POJO-based persistence:\n  - Export generated classes to actions and shared code\n  - Export generated classes to the file system so that your IDE can pick them up\n  - Allow to configure the entity mode of each database mapping from the UI (the default is still map-based)\n- Authentication improvements:\n  - Better support for external auth (e.g., in a microservices setting). Built-in support for authentication\n    against KeyCloak.\n  - application/json login endpoint (in addition to the existing form-based endpoint).\n  - Better handling of token expiration in the client.\n- Per-database Hibernate properties.\n- Support annotations on databases.\n- Quartz jobs now run with a working Shiro environment.\n- Ability for extensions and user code to \"mount\" actions to arbitrary mount points in the action tree.\n\n### Changed\n- Angular updated to version 11\n- Groovy updated to version 3\n- Various other dependencies updated for security & bug fixes\n- CRUD REST API versioning with X-Portofino-API-Version header\n- CRUD REST API changes (legacy behavior is still the default):\n  - Bulk update (PUT) optionally returns list of modified IDs\n  - Bulk delete (DELETE) optionally returns list of deleted IDs\n- Generated Security.groovy is now based on annotations on the model rather than hard-coded values\n\n### Removed\n- Maven profile \"portofino-development\" which has been superseded by Docker\n- Maven profile \"no-frontend-build\" (use -P-build-frontend)\n- `PortofinoRoot.mount` method and related methods, replaced by `ActionLogic.mount`. This is a breaking API change for\n  extensions making use of the removed methods, but none are known to us (also because the methods are undocumented and\n  only used internally by portofino-upstairs).\n\n### Fixed\n\n- Newly created CRUD pages don't have create/update buttons ([#406](https://github.com/ManyDesigns/Portofino/issues/406))\n- Page configuration is broken for pages using the default template implicitly ([#423](https://github.com/ManyDesigns/Portofino/issues/423)).\n- User self-registration is broken in several ways ([#414](https://github.com/ManyDesigns/Portofino/issues/414)).\n  Note that **this involves a breaking API change** in `Security.groovy`, specifically, the signature of the method\n  `saveSelfRegisteredUser` has changed to return both the token and the email of the newly saved user.\n  However, typical `Security.groovy` files (generated by the wizard) don't override that method, so most users shouldn't\n  have to do anything.\n\n## [5.1.4] \u2013 2020-07-04\n\n### Added\n- \"Fat jar\" deployment option (with embedded Tomcat)\n- Restored the profile section of demo-tt with an example custom Angular component\n- Included the MariaDB JDBC driver in the binary distribution\n\n### Changed\n- Improved wizard and UI\n- Postgres driver version updated\n- Include explicit 'tt' schema in SQL queries in demo-tt (plays nicer with Postgres)\n- Mail module as a separate artifact\n\n### Fixed\n- CRUD pages generated by wizard don't have buttons ([#372](https://github.com/ManyDesigns/Portofino/issues/372))\n- Broken blob download URL and code ([#384](https://github.com/ManyDesigns/Portofino/issues/384))\n- Pressing the Enter key on a search field does not perform a search ([#383](https://github.com/ManyDesigns/Portofino/issues/383))\n\n## [5.1.3] \u2013 2020-05-17\n\n### Added\n- Notifications bell showing up to 20 messages\n- More error reporting in the wizard\n- Spanish translation of the UI, thanks to Gabriel Mautino\n- Possibility for buttons to prevent double submit by returning an Observable\n- RestEasy support (alternative to Jersey JAX-RS)\n- Tested on WildFly 19.0.0.Final\n- Docker image for the upstairs application\n\n### Changed\n- Polished the Maven archetype\n\n### Fixed\n- Database views aren't usable in practice\n- Move page broken for text pages ([#349](https://github.com/ManyDesigns/Portofino/issues/349))\n- JWT filter eats the Authorization header even if it's not a JWT ([#367](https://github.com/ManyDesigns/Portofino/issues/367))\n- OpenAPI manifest only shows root resource ([#369](https://github.com/ManyDesigns/Portofino/issues/369)) \n\n## [5.1.2] - 2020-03-02\n\n### Added\n- API for pages to compute their navigation menu\n- Support for buttons with only an icon and no text\n- Button to refresh the CRUD search\n\n### Changed\n- Wizard is a bit more user-friendly\n- Pretty-print saved `config.json`\n\n### Fixed\n- `SendMailAction` not working ([#323](https://github.com/ManyDesigns/Portofino/issues/323))\n- Arrays in XML annotations ([#325](https://github.com/ManyDesigns/Portofino/issues/325))\n- Local API with IPv6 addresses ([#327](https://github.com/ManyDesigns/Portofino/issues/327))\n- Can't save selection providers ([#328](https://github.com/ManyDesigns/Portofino/issues/328))\n- Generated `Security.groovy` errors when loading groups ([#329](https://github.com/ManyDesigns/Portofino/issues/329))\n- OPTIONS with expired JWT fails triggering bad CORS ([#333](https://github.com/ManyDesigns/Portofino/issues/333))\n- Server-side localized info/warning/error messages ([#334](https://github.com/ManyDesigns/Portofino/issues/334))\n\n## [5.1.1] - 2020-01-10\n\n### Added\n- Text pages (client only, no I18n).\n- Support deployment behind a proxy.\n- Documentation of Docker development, debugging and deployment in the archetype.\n- Example deployment of demo-tt as Docker containers on Amazon ECS.\n- Sample Docker deployment with the backend and frontend separated into different containers. \n- Bare-bones support for mapping tables as POJO's (objects) rather than maps.\n\n### Changed\n- Give pages more control on security checks, allowing for client-only pages.\n- Improve performance of selection providers by asking for data lazily in certain cases.\n- Properly support Docker deployments using the image built by the standard pom of archetype-generated projects.\n- Several wizard improvements and fixes.\n\n### Fixed\n- Model not properly saved ([#294](https://github.com/ManyDesigns/Portofino/issues/294), [#303](https://github.com/ManyDesigns/Portofino/issues/303)).\n- Page configuration not properly saved ([#310](https://github.com/ManyDesigns/Portofino/issues/310), [#311](https://github.com/ManyDesigns/Portofino/issues/311)).\n- Names of mapped database objects not escaped ([#297](https://github.com/ManyDesigns/Portofino/issues/297)).\n- New actions added with bad class names ([#301](https://github.com/ManyDesigns/Portofino/issues/301)).\n- Database synchronization issues with MariaDB and PostgreSQL ([#283](https://github.com/ManyDesigns/Portofino/issues/283), [#298](https://github.com/ManyDesigns/Portofino/issues/298)).\n- KeyManager with no password (ported from Portofino 4).\n\n## [5.1.0] - 2019-10-31\n\n### Added\n- Map database views, by default as read-only, but overridable.\n- Support non insertable and/or non updatable entities in CRUD actions.\n- Annotations are propagated from model to annotated classes.\n- Support persistent Java 8+ Date and time API values.\n- Generic database platform for unrecognized databases.\n- Support for development and debug with Docker, both in demo-tt and in the archetype.\n- Periodically retry database connections that have failed at startup if Quartz is available.\n- Filter CRUD fields according to permissions (at the level of the ClassAccessor).\n- Filter configuration fields according to permissions.\n  In particular, the CRUD query is hidden if the user is not a developer.\n- Proper support for `@DatabaseBlob` upstairs.\n\n### Changed\n- **Update Hibernate to the 5.x branch**, in particular to version 5.4.7.Final.\n    The Hibernate Session factory is now configured with annotated Java classes generated at runtime.\n    The ad-hoc code for Hibernate 4 has been removed.\n- Deprecate the single `portofino-model.xml` file in favor of multiple `portofino-model/<database-name>/database.xml` files.\n  Legacy files are supported and converted to the new format upon save.\n- Change the format of annotations in the model and in `configuration.xml`.\n  Annotations in the legacy format are converted upon save.\n- Replace `java.io.File` with Apache Commons VFS `FileObject` in `Persistence`.\n  **This is a breaking API change.**\n- Update all uses of Commons Configuration to version 2.6, including Commons Configuration 1.x uses.\n  **This is a breaking API change.**\n- Ensure that Portofino 5 can run without a Java compiler (JDK) available.\n  \n### Fixed\n- Virtual properties not saved properly [[#269]](https://github.com/ManyDesigns/Portofino/issues/269).\n- Wizard failing on connections to Oracle databases [[#271]](https://github.com/ManyDesigns/Portofino/issues/271).\n- Minor upstairs, Spring and Security.groovy fixes.\n\n## [5.0.3] - 2019-09-25\n\n### Added\n- Support for MariaDB Connector/J.\n- Simple automatic JWT renewal (this means that user sessions do not expire during regular user activity).\n- Possibility to override buttons in subclasses [[#253]](https://github.com/ManyDesigns/Portofino/issues/253).\n\n### Changed\n- JWT expiration property is now called `jwt.expiration`.\n- Better Spring context reloading and more rational context layout w/ documentation. Still doesn't support all scenarios.\n- Ensure Portofino does not create any HTTP sessions by itself in any circumstances [[#255]](https://github.com/ManyDesigns/Portofino/issues/255). \n\n### Fixed\n- Badly broken `Security.groovy`, both the built-in one and ones generated by the wizard.\n- `mail.enabled = false` makes the application fail to start.\n- CRUD/forms:\n   - Form invalid with empty, pristine date fields.\n   - Save/update exception not handled properly.\n   - Rich text field label misplacement.\n   - Passwords visible in search results.\n   - Possibility to save configuration with missing required fields.\n   - Missing error message for max length in text fields.\n   - IDs with spaces cause exception [[#254]](https://github.com/ManyDesigns/Portofino/issues/254).\n\n## [5.0.2] - 2019-08-29\n\n### Added\n- Restored and extended some Portofino 4 features:\n    - Numbers and dates can be searched with ranges as well as with an exact value.\n    - Text properties can be searched with various operators (contains, equals, starts-with and ends-with).\n    - Sign up, change password and forgot password dialogs and REST methods.\n    - Password fields can ask to confirm the password (i.e., to type it twice).\n- Improve developer experience with better code reloading:\n    - Quartz jobs are reloaded automatically when the code changes, without restarting the application,\n      and, when they terminate execution, any open Hibernate sessions are closed even in case of exceptions.\n    - When source code changes, the user-defined Spring context is refreshed, so that services and actions can pick up the changes.\n      This only works with classes annotated `@Component`, `@Repository` or `@Service`, to avoid excessive refreshes.\n- When embedded, the crud page has now the option to open the detail in the same page instead of navigating to the detail URL.\n- Check for new versions at startup.\n- Make the JWT expiration time configurable (in minutes, defaults to 30).\n\n### Changed\n- UI improvements:\n    - Improve looks by drawing inspiration from [sb-admin-material](https://github.com/start-javascript/sb-admin-material).\n    - Use Material Typography.\n    - The user declining to log in is sent back to the home. The current page has a chance to inject another behaviour.\n    - Support the `multiplier` property of the `@DecimalFormat` annotation (for percent, per mille and similar).\n    - The rich text component is better integrated in Material forms.\n    - More comprehensive detection of links in text fields with `@HighlightLinks`.\n    - The page settings panel is reachable via the URL, by including the query parameter `settings`.\n- Important dependencies updated: Angular, Groovy, Liquibase, Shiro.\n\n### Fixed\n- Select fields with no value or disabled showing nothing or `undefined`.\n- Create new page at the top level.\n- Toolbar overflowing on mobile.\n- Support BigInteger and BigDecimal properties in the UI.\n- Properly save the crud page configuration.\n- Use the correct schema name when synchronizing an aliased schema.\n\n### Security\n- Improved code quality and security and updated insecure dependencies using automated tools.\n\n## [5.0.1] - 2019-06-07\n\n### Added\n- Created this changelog.\n- Completed the translation to Italian.\n- HQL queries support list parameters (ported from P4).\n\n### Changed\n- The no-frontend-build Maven profile skips all TypeScript/Angular builds without compromising the Java build.\n- Keep the order of databases in the model (ported from P4).\n- Updated to Angular 8.\n- Logging out redirects to the home page.\n\n### Fixed\n- CRUD bulk operations detection by the UI.\n- Inconsistent use of schemaName vs actualSchemaName.\n- Default field encrypter (ported from P4).\n- Many to many selection provider database session (ported from P4).\n- Annotations not preserved when saving CRUD configuration and tables.\n\n### Security\n- Improved code quality and security using snyk, lgtm and SpotBugs to find vulnerabilities and brittle code.\n", "package com.manydesigns.portofino.dispatcher.security.jwt;\n\nimport com.manydesigns.portofino.dispatcher.security.RolesPermission;\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.io.Decoders;\nimport org.apache.commons.configuration2.Configuration;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\n\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.Serializable;\nimport java.security.Key;\nimport java.util.*;\n\n/**\n * Created by alessio on 02/08/16.\n */\npublic class JWTRealm extends AuthorizingRealm {\n    \n    @Override\n    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        Set<String> roles = getRoles(principals);\n        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo(roles);\n        simpleAuthorizationInfo.addObjectPermission(new RolesPermission(roles));\n        return simpleAuthorizationInfo;\n    }\n\n    protected Set<String> getRoles(PrincipalCollection principals) {\n        return getRoles(principals.getPrimaryPrincipal());\n    }\n    \n    protected Set<String> getRoles(Object principal) {\n        HashSet<String> roles = new HashSet<>();\n        if(principal instanceof Map) {\n            Object rolesList = ((Map) principal).get(\"roles\");\n            if(rolesList instanceof Collection) {\n                roles.addAll((Collection<? extends String>) rolesList);\n            }\n        }\n        return roles;\n    }\n\n    @Override\n    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {\n        String secret = getSecret();\n        Key key = new SecretKeySpec(Decoders.BASE64.decode(secret), getSignatureAlgorithm().getJcaName());\n        \n        Jws<Claims> jwt = Jwts.parser().\n                setSigningKey(key).\n                parseClaimsJws((String) token.getPrincipal());\n        Map<String, Serializable> principal = getPrincipal(jwt);\n        return new SimpleAuthenticationInfo(principal, ((String) token.getCredentials()).toCharArray(), getName());\n    }\n\n    protected SignatureAlgorithm getSignatureAlgorithm() {\n        return SignatureAlgorithm.HS512;\n    }\n\n    protected Map<String, Serializable> getPrincipal(Jws<Claims> jwt) {\n        Map<String, Serializable> principal = new HashMap<>();\n        principal.put(\"jwt\", (Serializable) jwt.getBody());\n        return principal;\n    }\n    \n    protected Configuration getConfiguration() {\n        return null; //TODO\n    }\n\n    protected String getSecret() {\n        return getConfiguration().getString(\"jwt.secret\");\n    }\n\n    @Override\n    public boolean supports(AuthenticationToken token) {\n        return token instanceof JSONWebToken;\n    }\n}\n", "/*\n * Copyright (C) 2005-2020 ManyDesigns srl.  All rights reserved.\n * http://www.manydesigns.com/\n *\n * This is free software; you can redistribute it and/or modify it\n * under the terms of the GNU Lesser General Public License as\n * published by the Free Software Foundation; either version 3 of\n * the License, or (at your option) any later version.\n *\n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this software; if not, write to the Free\n * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n */\n\npackage com.manydesigns.portofino.shiro;\n\nimport com.manydesigns.elements.reflection.ClassAccessor;\nimport com.manydesigns.elements.reflection.JavaClassAccessor;\nimport com.manydesigns.portofino.code.CodeBase;\nimport com.manydesigns.portofino.security.SecurityLogic;\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.io.Decoders;\nimport org.apache.commons.configuration2.Configuration;\nimport org.apache.shiro.authc.AuthenticationException;\nimport org.apache.shiro.authc.AuthenticationInfo;\nimport org.apache.shiro.authc.AuthenticationToken;\nimport org.apache.shiro.authc.SimpleAuthenticationInfo;\nimport org.apache.shiro.authc.credential.PasswordMatcher;\nimport org.apache.shiro.authc.credential.PasswordService;\nimport org.apache.shiro.authz.AuthorizationException;\nimport org.apache.shiro.authz.AuthorizationInfo;\nimport org.apache.shiro.authz.Permission;\nimport org.apache.shiro.authz.SimpleAuthorizationInfo;\nimport org.apache.shiro.codec.Base64;\nimport org.apache.shiro.crypto.hash.HashService;\nimport org.apache.shiro.crypto.hash.format.HashFormat;\nimport org.apache.shiro.realm.AuthorizingRealm;\nimport org.apache.shiro.subject.PrincipalCollection;\nimport org.jetbrains.annotations.NotNull;\nimport org.joda.time.DateTime;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport javax.crypto.spec.SecretKeySpec;\nimport java.io.*;\nimport java.security.Key;\nimport java.util.*;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\n/**\n * Default implementation of PortofinoRealm. Provides convenient implementations of the interface methods.\n *\n * @author Paolo Predonzani     - paolo.predonzani@manydesigns.com\n * @author Angelo Lupo          - angelo.lupo@manydesigns.com\n * @author Giampiero Granatella - giampiero.granatella@manydesigns.com\n * @author Alessio Stalla       - alessio.stalla@manydesigns.com\n */\npublic abstract class AbstractPortofinoRealm extends AuthorizingRealm implements PortofinoRealm {\n    public static final String copyright = \"Copyright (C) 2005-2020 ManyDesigns srl\";\n\n    public static final String JWT_EXPIRATION_PROPERTY = \"jwt.expiration\";\n    public static final String JWT_SECRET_PROPERTY = \"jwt.secret\";\n\n    @Autowired\n    protected Configuration portofinoConfiguration;\n\n    @Autowired\n    protected CodeBase codeBase;\n\n    protected PasswordService passwordService;\n\n    protected boolean legacyHashing = false;\n\n    private static final Logger logger = LoggerFactory.getLogger(AbstractPortofinoRealm.class);\n\n    protected AbstractPortofinoRealm() {\n        //Legacy - let the actual implementation handle hashing\n        setup(new PlaintextHashService(), new PlaintextHashFormat());\n        legacyHashing = true;\n    }\n\n    //--------------------------------------------------------------------------\n    // Authentication\n    //--------------------------------------------------------------------------\n\n    @Override\n    public boolean supports(AuthenticationToken token) {\n        return token instanceof JSONWebToken || super.supports(token);\n    }\n\n    public AuthenticationInfo loadAuthenticationInfo(JSONWebToken token) {\n        Key key = getJWTKey();\n        Jws<Claims> jwt;\n        try {\n            jwt = Jwts.parser().setSigningKey(key).parseClaimsJws(token.getPrincipal());\n        } catch (JwtException e) {\n            throw new AuthenticationException(e);\n        }\n        String credentials = legacyHashing ? token.getCredentials() : encryptPassword(token.getCredentials());\n        Object principal = extractPrincipalFromWebToken(jwt);\n        return new SimpleAuthenticationInfo(principal, credentials, getName());\n    }\n\n    protected Object extractPrincipalFromWebToken(Jws<Claims> jwt) {\n        Map<String, Object> body = jwt.getBody();\n        String base64Principal = (String) body.get(\"serialized-principal\");\n        byte[] serializedPrincipal = Base64.decode(base64Principal);\n        Object principal;\n        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n        try {\n            Thread.currentThread().setContextClassLoader(codeBase.asClassLoader()); //In case the serialized principal is a POJO entity\n            ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(serializedPrincipal)) {\n                @Override\n                protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n                    return codeBase.loadClass(desc.getName());\n                }\n            };\n            principal = objectInputStream.readObject();\n            objectInputStream.close();\n        } catch (Exception e) {\n            throw new AuthenticationException(e);\n        } finally {\n            Thread.currentThread().setContextClassLoader(loader);\n        }\n        return principal;\n    }\n\n    public String generateWebToken(Object principal) {\n        Key key = getJWTKey();\n        Map<String, Object> claims = new HashMap<>();\n        claims.put(\"principal\", getPrincipalForWebToken(principal));\n        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n        ObjectOutputStream objectOutputStream;\n        try {\n            objectOutputStream = new ObjectOutputStream(bytes);\n            objectOutputStream.writeObject(principal);\n            objectOutputStream.close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n        claims.put(\"serialized-principal\", bytes.toByteArray());\n        int expireAfterMinutes = portofinoConfiguration.getInt(JWT_EXPIRATION_PROPERTY, 30);\n        return Jwts.builder().\n                setClaims(claims).\n                setExpiration(new DateTime().plusMinutes(expireAfterMinutes).toDate()).\n                signWith(key, SignatureAlgorithm.HS512).\n                compact();\n    }\n\n    protected Object getPrincipalForWebToken(Object principal) {\n        return cleanUserPrincipal(principal);\n    }\n\n    /**\n     * Clean the user principal making it suitable for JSON serialization. For example, if it is a map, remove\n     * circular references.\n     * @param principal the principal.\n     * @return\n     */\n    protected Object cleanUserPrincipal(Object principal) {\n        if(principal instanceof Map) {\n            Map cleanUser = new HashMap();\n            AtomicBoolean skipped = new AtomicBoolean(false);\n            ((Map<?, ?>) principal).forEach((k, v) -> {\n                if (v instanceof List || v instanceof Map) {\n                    logger.debug(\"Skipping {}\", k);\n                    skipped.set(true);\n                } else {\n                    cleanUser.put(k, v);\n                }\n            });\n            if(skipped.get()) {\n                logger.debug(\"The user entity has potential self-references that make it unusable as a principal, because it must be serializable to JSON. Returning a non-persistent map with no references.\");\n                return cleanUser;\n            } else {\n                return principal;\n            }\n        }\n        return principal;\n    }\n\n    @NotNull\n    protected Key getJWTKey() {\n        String secret = portofinoConfiguration.getString(JWT_SECRET_PROPERTY);\n        return new SecretKeySpec(Decoders.BASE64.decode(secret), SignatureAlgorithm.HS512.getJcaName());\n    }\n\n    // --------------------------------------------------------------------------\n    // Authorization\n    //--------------------------------------------------------------------------\n\n    /**\n     * {@inheritDoc}\n     * <p>This default implementation handles built-in groups (all, anonymous, registered, etc.), delegating\n     * to loadAuthorizationInfo method the actual loading of application-specific groups.</p>\n     *\n     * @return\n     */\n    public AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {\n        Object principal = principals.getPrimaryPrincipal();\n        Set<String> groups = getGroups(principal);\n\n        SimpleAuthorizationInfo info = new SimpleAuthorizationInfo(groups);\n        if(groups.contains(SecurityLogic.getAdministratorsGroup(portofinoConfiguration))) {\n            info.addStringPermission(\"*\");\n        }\n        Permission permission = new GroupPermission(groups);\n        info.setObjectPermissions(Collections.singleton(permission));\n        return info;\n    }\n\n    @Override\n    @NotNull\n    public Set<String> getGroups(Object principal) {\n        Set<String> groups = new HashSet<>();\n        groups.add(SecurityLogic.getAllGroup(portofinoConfiguration));\n        if (principal == null) {\n            groups.add(SecurityLogic.getAnonymousGroup(portofinoConfiguration));\n        } else if (principal instanceof Serializable) {\n            groups.add(SecurityLogic.getRegisteredGroup(portofinoConfiguration));\n            groups.addAll(loadAuthorizationInfo((Serializable) principal));\n        } else {\n            throw new AuthorizationException(\"Invalid principal: \" + principal);\n        }\n        return groups;\n    }\n\n    /**\n     * Loads the groups associated to a given user.\n     * @param principal the user object.\n     * @return the groups as a collection of strings.\n     */\n    protected Collection<String> loadAuthorizationInfo(Serializable principal) {\n        return Collections.emptySet();\n    }\n\n    //--------------------------------------------------------------------------\n    // Groups CRUD\n    //--------------------------------------------------------------------------\n\n    /**\n     * {@inheritDoc}\n     * <p>This default implementation returns the built-in groups\n     * (all, anonymous, registered, administrators).\n     * You can override it to add custom groups for your application.</p>\n     * @return\n     */\n    public Set<String> getGroups() {\n        Set<String> groups = new LinkedHashSet<String>();\n        groups.add(SecurityLogic.getAllGroup(portofinoConfiguration));\n        groups.add(SecurityLogic.getAnonymousGroup(portofinoConfiguration));\n        groups.add(SecurityLogic.getRegisteredGroup(portofinoConfiguration));\n        groups.add(SecurityLogic.getAdministratorsGroup(portofinoConfiguration));\n        return groups;\n    }\n\n    //--------------------------------------------------------------------------\n    // Users CRUD\n    //--------------------------------------------------------------------------\n\n    @Override\n    public Serializable getUserById(String encodedUserId) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Serializable getUserByEmail(String email) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public boolean supportsSelfRegistration() {\n        return false;\n    }\n\n    @Override\n    public ClassAccessor getSelfRegisteredUserClassAccessor() {\n        return JavaClassAccessor.getClassAccessor(User.class);\n    }\n\n    @Override\n    public String getUserPrettyName(Serializable user) {\n        return user.toString();\n    }\n\n    //--------------------------------------------------------------------------\n    // User workflow\n    //--------------------------------------------------------------------------\n\n    @Override\n    public void verifyUser(Serializable user) {\n        throw new UnsupportedOperationException();\n    }\n\n    //--------------------------------------------------------------------------\n    // User password management\n    //--------------------------------------------------------------------------\n\n    @Override\n    public void changePassword(Serializable user, String oldPassword, String newPassword) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public String generateOneTimeToken(Serializable user) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public String[] saveSelfRegisteredUser(Object user) {\n        throw new UnsupportedOperationException();\n    }\n\n    protected void setup(HashService hashService, HashFormat hashFormat) {\n        PortofinoPasswordService passwordService = new PortofinoPasswordService();\n        passwordService.setHashService(hashService);\n        passwordService.setHashFormat(hashFormat);\n        PasswordMatcher passwordMatcher = new PasswordMatcher();\n        passwordMatcher.setPasswordService(passwordService);\n        setCredentialsMatcher(passwordMatcher);\n        this.passwordService = passwordService;\n        this.legacyHashing = false;\n    }\n}\n"], "filenames": ["CHANGELOG.md", "dispatcher/src/main/java/com/manydesigns/portofino/dispatcher/security/jwt/JWTRealm.java", "portofino-core/src/main/java/com/manydesigns/portofino/shiro/AbstractPortofinoRealm.java"], "buggy_code_start_loc": [15, 4, 27], "buggy_code_end_loc": [18, 68, 116], "fixing_code_start_loc": [16, 4, 27], "fixing_code_end_loc": [18, 66, 113], "type": "CWE-347", "message": "Portofino is an open source web development framework. Portofino before version 5.2.1 did not properly verify the signature of JSON Web Tokens. This allows forging a valid JWT. The issue will be patched in the upcoming 5.2.1 release.", "other": {"cve": {"id": "CVE-2021-29451", "sourceIdentifier": "security-advisories@github.com", "published": "2021-04-16T22:15:14.233", "lastModified": "2021-04-22T21:25:21.740", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Portofino is an open source web development framework. Portofino before version 5.2.1 did not properly verify the signature of JSON Web Tokens. This allows forging a valid JWT. The issue will be patched in the upcoming 5.2.1 release."}, {"lang": "es", "value": "Portofino es un framework de desarrollo web de c\u00f3digo abierto.&#xa0;Portofino versiones anteriores a 5.2.1, no comprobaba apropiadamente la firma de JSON Web Tokens.&#xa0;Esto permite falsificar un JWT v\u00e1lido.&#xa0;El problema ser\u00e1 parcheado en la pr\u00f3xima versi\u00f3n 5.2.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 6.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-347"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:manydesigns:portofino:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0.0", "versionEndExcluding": "5.2.1", "matchCriteriaId": "D4F3540D-4427-4FCC-B9D6-90F318507E25"}]}]}], "references": [{"url": "https://github.com/ManyDesigns/Portofino/commit/8c754a0ad234555e813dcbf9e57d637f9f23d8fb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ManyDesigns/Portofino/security/advisories/GHSA-6g3c-2mh5-7q6x", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://mvnrepository.com/artifact/com.manydesigns/portofino", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ManyDesigns/Portofino/commit/8c754a0ad234555e813dcbf9e57d637f9f23d8fb"}}