{"buggy_code": ["<?php\nglobal $global, $config;\nif(!isset($global['systemRootPath'])){\n    require_once '../videos/configuration.php';\n}\nheader('Content-Type: application/json');\n\nif (!User::canUpload() || !empty($advancedCustom->doNotShowImportMP4Button)) {\n    return false;\n}\n\n$obj = new stdClass();\n\n$obj->error = true;\n\n$obj->fileURI = pathinfo($_POST['fileURI']);\n\n//get description\n$filename = $obj->fileURI['dirname'].DIRECTORY_SEPARATOR.$obj->fileURI['filename'];\n$extensions = array('txt', 'html', 'htm');\n\n$length = intval($_POST['length']);\nif(empty($length) || $length>100){\n    $length = 100;\n}\n\nforeach ($extensions as $value) {\n    $_POST['description'] = \"\";\n    $_POST['title'] = \"\";\n    if(file_exists(\"{$filename}.{$value}\")){\n        $html = file_get_contents(\"{$filename}.{$value}\");\n        $breaks = array(\"<br />\",\"<br>\",\"<br/>\");  \n        $html = str_ireplace($breaks, \"\\r\\n\", $html);\n        $_POST['description'] = $html;\n        $cleanHTML = strip_tags($html);\n        $_POST['title'] = substr($cleanHTML, 0, $length);\n        break;\n    }\n}\n\n$tmpDir = sys_get_temp_dir();\n$tmpFileName = $tmpDir.DIRECTORY_SEPARATOR.$obj->fileURI['filename'];\n$source = $obj->fileURI['dirname'].DIRECTORY_SEPARATOR.$obj->fileURI['basename'];\n\nif (!copy($source, $tmpFileName)) {\n    $obj->msg = \"failed to copy $filename...\\n\";\n    die(json_encode($obj));\n}\n\nif(!empty($_POST['delete']) && $_POST['delete']!=='false'){\n    if(is_writable($source)){\n        unlink($source);\n        foreach ($extensions as $value) {\n            if(file_exists(\"{$filename}.{$value}\")){\n                unlink(\"{$filename}.{$value}\");\n            }\n        }\n    }else{\n        $obj->msg = \"Could not delete $source...\\n\";\n    }\n}\n\n$_FILES['upl']['error'] = 0;\n$_FILES['upl']['name'] = $obj->fileURI['basename'];\n$_FILES['upl']['tmp_name'] = $tmpFileName;\n$_FILES['upl']['type'] = \"video/mp4\";\n$_FILES['upl']['size'] = filesize($tmpFileName);\n\nrequire_once $global['systemRootPath'] . 'view/mini-upload-form/upload.php';\n\n\necho json_encode($obj);"], "fixing_code": ["<?php\nglobal $global, $config;\nif(!isset($global['systemRootPath'])){\n    require_once '../videos/configuration.php';\n}\nheader('Content-Type: application/json');\n\nif (!User::canUpload() || !empty($advancedCustom->doNotShowImportMP4Button)) {\n    return false;\n}\n\nif(!preg_match(\"/.*\\\\.mp4$/i\", $_POST['fileURI'])){\n    return false;\n}\n\n$obj = new stdClass();\n\n$obj->error = true;\n\n$obj->fileURI = pathinfo($_POST['fileURI']);\n\n//get description\n$filename = $obj->fileURI['dirname'].DIRECTORY_SEPARATOR.$obj->fileURI['filename'];\n$extensions = array('txt', 'html', 'htm');\n\n$length = intval($_POST['length']);\nif(empty($length) || $length>100){\n    $length = 100;\n}\n\nforeach ($extensions as $value) {\n    $_POST['description'] = \"\";\n    $_POST['title'] = \"\";\n    if(file_exists(\"{$filename}.{$value}\")){\n        $html = file_get_contents(\"{$filename}.{$value}\");\n        $breaks = array(\"<br />\",\"<br>\",\"<br/>\");  \n        $html = str_ireplace($breaks, \"\\r\\n\", $html);\n        $_POST['description'] = $html;\n        $cleanHTML = strip_tags($html);\n        $_POST['title'] = substr($cleanHTML, 0, $length);\n        break;\n    }\n}\n\n$tmpDir = sys_get_temp_dir();\n$tmpFileName = $tmpDir.DIRECTORY_SEPARATOR.$obj->fileURI['filename'];\n$source = $obj->fileURI['dirname'].DIRECTORY_SEPARATOR.$obj->fileURI['basename'];\n\nif (!copy($source, $tmpFileName)) {\n    $obj->msg = \"failed to copy $filename...\\n\";\n    die(json_encode($obj));\n}\n\nif(!empty($_POST['delete']) && $_POST['delete']!=='false'){\n    if(is_writable($source)){\n        unlink($source);\n        foreach ($extensions as $value) {\n            if(file_exists(\"{$filename}.{$value}\")){\n                unlink(\"{$filename}.{$value}\");\n            }\n        }\n    }else{\n        $obj->msg = \"Could not delete $source...\\n\";\n    }\n}\n\n$_FILES['upl']['error'] = 0;\n$_FILES['upl']['name'] = $obj->fileURI['basename'];\n$_FILES['upl']['tmp_name'] = $tmpFileName;\n$_FILES['upl']['type'] = \"video/mp4\";\n$_FILES['upl']['size'] = filesize($tmpFileName);\n\nrequire_once $global['systemRootPath'] . 'view/mini-upload-form/upload.php';\n\n\necho json_encode($obj);"], "filenames": ["objects/import.json.php"], "buggy_code_start_loc": [8], "buggy_code_end_loc": [8], "fixing_code_start_loc": [9], "fixing_code_end_loc": [13], "type": "CWE-862", "message": "The import.json.php file before 8.9 for Avideo is vulnerable to a File Deletion vulnerability. This allows the deletion of configuration.php, which leads to certain privilege checks not being in place, and therefore a user can escalate privileges to admin.", "other": {"cve": {"id": "CVE-2020-23489", "sourceIdentifier": "cve@mitre.org", "published": "2020-11-16T18:15:12.267", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The import.json.php file before 8.9 for Avideo is vulnerable to a File Deletion vulnerability. This allows the deletion of configuration.php, which leads to certain privilege checks not being in place, and therefore a user can escalate privileges to admin."}, {"lang": "es", "value": "El archivo import.json.php anterior a versi\u00f3n 8.9 para AVideo es susceptible a una vulnerabilidad de eliminaci\u00f3n de archivos.&#xa0;Esto permite la eliminaci\u00f3n del archivo configuration.php, lo que conduce a que no se lleven a cabo determinadas comprobaciones de privilegios y, por lo tanto, un usuario puede escalar los privilegios a administrador"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wwbn:avideo:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.9", "matchCriteriaId": "EB4B561D-87E2-4ED4-AC78-F5ABAF5370CD"}]}]}], "references": [{"url": "https://cube01.io/blog/Avideo-Remote-Code-Execution.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/WWBN/AVideo/commit/ecc5f40470bbafff231133f58db1df70f47bfb33", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WWBN/AVideo/commit/ecc5f40470bbafff231133f58db1df70f47bfb33"}}