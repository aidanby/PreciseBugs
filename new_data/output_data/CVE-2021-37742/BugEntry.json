{"buggy_code": ["<?php\necho $this->element('genericElements/assetLoader', array(\n    'js' => array('d3')\n));\n$random = rand();\n$randomClass = \"relation-{$random}\";\n?>\n\n<div style=\"padding: 5px; display: flex; position: absolute; top: 0; left: 0; right: 0; bottom: 0;\">\n    <label style=\"position: absolute;\">\n        <input type=\"checkbox\" id=\"checkbox-include-inbound\" class=\"<?= $randomClass ?>\" <?= !isset($includeInbound) || !empty($includeInbound) ? \"checked=\\\"checked\\\"\" : \"\" ?>></input>\n        <?= __('Include inbound relations') ?>\n    </label>\n    <svg id=\"treeSVG\" class=\"<?= $randomClass ?>\" style=\"width: 100%; height: 100%;\"></svg>\n</div>\n\n<script>\n    var hexagonPoints = '21,10.5 15.75,19.6 5.25,19.6 0,10.5 5.25,1.4 15.75,1.4'\n    var hexagonTranslate = -10.5;\n    var treeData = <?= json_encode($tree) ?>;\n    var margin = {top: 10, right: 10, bottom: 30, left: 20};\n    var treeWidth, treeHeight;\n    var colors = d3.scale.category10();\n    var hasBeenBuilt<?= $random ?> = false;\n\n    $(document).ready(function() {\n        var $checkbox = $('#checkbox-include-inbound.<?= $randomClass ?>');\n        $checkbox.click(function() {\n            var $container = $(this).parent().parent().parent();\n            var checked = $(this).prop('checked');\n            reloadDiagram($container, checked);\n        })\n    })\n\n    function buildTree() {\n        if (hasBeenBuilt<?= $random ?>) {\n            return;\n        }\n        hasBeenBuilt<?= $random ?> = true;\n        var $tree = $('#treeSVG.<?= $randomClass ?>');\n        treeWidth = $tree.width() - margin.right - margin.left;\n        treeHeight = $tree.height() - margin.top - margin.bottom;\n        var leftShift;\n        var childrenBothSides, side;\n        if (treeData.left[0].children === undefined || treeData.left[0].children.length == 0) {\n            leftShift = 0;\n            childrenBothSides = false;\n            side = 'right';\n        } else {\n            if (treeData.right[0].children === undefined || treeData.right[0].children.length == 0) {\n                leftShift = treeWidth;\n                childrenBothSides = false;\n                side = 'left';\n            } else {\n                leftShift = treeWidth/2;\n                childrenBothSides = true;\n                side = 'both';\n            }\n        }\n        adaptContainerHeightIfNeeded(side);\n\n        var data = genHierarchy(treeData, leftShift, childrenBothSides, side);\n        drawTree(data, leftShift, childrenBothSides);\n    }\n\n    function genHierarchy(data, leftShift, childrenBothSides, side) {\n        var rightOffset = 0;\n        if (side !== 'left') {\n            var treeRight = d3.layout.tree(data.right)\n                .size([treeHeight, (childrenBothSides ? treeWidth/2 : treeWidth)]);\n            var rootRight = data.right[0];\n            rootRight.isRoot = true;\n            rootRight.x0 = treeHeight / 2;\n            rootRight.y0 = 0;\n            var nodesRight = treeRight.nodes(rootRight).reverse();\n            var linksRight = treeRight.links(nodesRight);\n            var maxDepthRight = 1;\n            var leftMaxTextLengthRight = 0;\n            nodesRight.forEach(function(d) {\n                maxDepthRight = maxDepthRight > d.depth ? maxDepthRight : d.depth;\n                if (d.GalaxyCluster !== undefined) {\n                    var clusterLength = d.GalaxyCluster.type.length > d.GalaxyCluster.value.length ? d.GalaxyCluster.type.length : d.GalaxyCluster.value.length;\n                    leftMaxTextLengthRight = leftMaxTextLengthRight > clusterLength ? leftMaxTextLengthRight : clusterLength;\n                    d.id = 'left-' + getId(d, true);\n                } else if (d.Relation !== undefined) {\n                    var tagLength = 0;\n                    if (d.Relation.Tag !== undefined) {\n                        tagLength = d.Relation.Tag.name / 2;\n                    }\n                    var relationLength = tagLength > d.Relation.referenced_galaxy_cluster_type.length ? tagLength : d.Relation.referenced_galaxy_cluster_type.length;\n                    leftMaxTextLengthRight = leftMaxTextLengthRight > relationLength ? leftMaxTextLengthRight : relationLength;\n                    d.id = 'left-' + getId(d);\n                }\n            })\n            var offsetLeafLengthRight = leftMaxTextLengthRight * 6.7; // font-size of body is 12px\n            var ratioFactor = (treeWidth - offsetLeafLengthRight) / (maxDepthRight * (childrenBothSides ? 2 : 1));\n            nodesRight.forEach(function(d) { d.y = d.depth * ratioFactor; });\n            rightOffset = side === 'right' ? -leftMaxTextLengthRight : 0;\n        }\n\n        if (side !== 'right') {\n            var treeLeft = d3.layout.tree(data.left)\n                .size([treeHeight, (childrenBothSides ? treeWidth/2 : treeWidth)]);\n            var rootLeft = data.left[0];\n            rootLeft.isRoot = true;\n            rootLeft.x0 = treeHeight / 2;\n            rootLeft.y0 = 0;\n            var nodesLeft = treeLeft.nodes(rootLeft).reverse();\n            var linksLeft = treeLeft.links(nodesLeft);\n            var maxDepthLeft = 1;\n            var leftMaxTextLengthLeft = 0;\n            nodesLeft.forEach(function(d) {\n                maxDepthLeft = maxDepthLeft > d.depth ? maxDepthLeft : d.depth;\n                if (d.GalaxyCluster !== undefined) {\n                    var clusterLength = d.GalaxyCluster.type.length > d.GalaxyCluster.value.length ? d.GalaxyCluster.type.length : d.GalaxyCluster.value.length;\n                    leftMaxTextLengthLeft = leftMaxTextLengthLeft > clusterLength ? leftMaxTextLengthLeft : clusterLength;\n                    d.id = 'right-' + getId(d, true);\n                } else if (d.Relation !== undefined) {\n                    var tagLength = 0;\n                    if (d.Relation.Tag !== undefined) {\n                        tagLength = d.Relation.Tag.name / 2;\n                    }\n                    var relationLength = tagLength > d.Relation.referenced_galaxy_cluster_type.length ? tagLength : d.Relation.referenced_galaxy_cluster_type.length;\n                    leftMaxTextLengthLeft = leftMaxTextLengthLeft > relationLength ? leftMaxTextLengthLeft : relationLength;\n                    d.id = 'right-' + getId(d);\n                }\n            })\n            var offsetLeafLengthLeft = leftMaxTextLengthLeft * 6.7; // font-size of body is 12px\n            var ratioFactor = (treeWidth - offsetLeafLengthLeft) / (maxDepthLeft  * (childrenBothSides ? 2 : 1));\n            nodesLeft.forEach(function(d) { d.y = -d.depth * ratioFactor; });\n            rightOffset = side === 'left' ? leftMaxTextLengthLeft : 0;\n        }\n\n        var nodes, links;\n        if (side === 'both') {\n            nodesLeft = nodesLeft.filter(function(d) { return d.depth !== 0}); // filter out duplicate root\n            nodes = nodesRight.concat(nodesLeft);\n            links = linksRight.concat(linksLeft);\n        } else if (side === 'right') {\n            nodes = nodesRight;\n            links = linksRight;\n        } else {\n            nodes = nodesLeft;\n            links = linksLeft;\n        }\n        return {\n            rightOffset: rightOffset,\n            nodes: nodes,\n            links: links\n        };\n    }\n    \n    function drawTree(data, leftShift, childrenBothSides) {\n        var diagonal = function link(d) {\n            return \"M\" + d.source.y + \",\" + d.source.x\n                + \"C\" + (d.source.y + d.target.y) / 2 + \",\" + d.source.x\n                + \" \" + (d.source.y + d.target.y) / 2 + \",\" + d.target.x\n                + \" \" + d.target.y + \",\" + d.target.x;\n        };\n        var svg = d3.select(\"#treeSVG.<?= $randomClass ?>\")\n            .attr(\"width\", treeWidth + margin.right + margin.left)\n            .attr(\"height\", treeHeight + margin.top + margin.bottom)\n            .append(\"g\")\n                .attr(\"transform\", \"translate(\" + (leftShift + margin.left - 2*data.rightOffset) + \",\" + margin.top + \")\");\n\n        defs = svg.append(\"defs\")\n        defs.append(\"marker\")\n            .attr({\n                \"id\":\"arrowEnd\",\n                \"viewBox\":\"0 -5 10 10\",\n                \"refX\": 10+7,\n                \"refY\": 0,\n                \"markerWidth\": 10,\n                \"markerHeight\": 10,\n                \"markerUnits\": \"userSpaceOnUse\",\n                \"orient\":\"auto\"\n            })\n            .append(\"path\")\n                .attr(\"d\", \"M0,-5L10,0L0,5\")\n                .attr(\"class\",\"arrowHead\");\n        defs.append(\"marker\")\n            .attr({\n                \"id\":\"arrowStart\",\n                \"viewBox\":\"0 -5 10 10\",\n                \"refX\": 10+7,\n                \"refY\": 0,\n                \"markerWidth\": 10,\n                \"markerHeight\": 10,\n                \"markerUnits\": \"userSpaceOnUse\",\n                \"orient\": 0\n            })\n            .append(\"path\")\n                .attr(\"d\", \"M0,-5L10,0L0,5\")\n                .attr(\"class\",\"arrowHead\");\n        var nodes = data.nodes;\n        var links = data.links;\n\n        var node = svg.selectAll(\"g.node\")\n            .data(nodes, function(d) { return d.id });\n\n        var nodeEnter = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; })\n            .on(\"mouseover\", nodeHover)\n            .on(\"dblclick\", nodeDbclick);\n\n        var gEnter = nodeEnter.append('g');\n        drawEntities(gEnter);\n\n        var link = svg.selectAll(\"path.link\")\n            .data(links, function(d) { return d.target.id; });\n\n        link.enter().insert(\"path\", \"g\")\n            .attr(\"id\",function(d,i) { return \"linkId_\" + i; })\n            .attr(\"class\", \"link\")\n            .attr(\"marker-end\", function(d) {\n                if ((d.target.children === undefined || d.target.children.length === 0) && d.target.y > 0) {\n                    return \"url(#arrowEnd)\"\n                } else {\n                    return \"\"\n                }\n            })\n            .attr(\"marker-start\", function(d) {\n                if (d.source.isRoot && d.target.y < 0) {\n                    return \"url(#arrowStart)\"\n                } else {\n                    return \"\"\n                }\n            })\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", \"#ccc\")\n            .style(\"stroke-width\", function(d) {\n                var linkWidth = 2;\n                var linkMaxWidth = 4;\n                var tag = false;\n                if (d.source.Relation !== undefined && d.source.Relation.Tag !== undefined) {\n                    tag = d.source.Relation.Tag;\n                } else if (d.target.Relation !== undefined && d.target.Relation.Tag !== undefined) {\n                    tag = d.target.Relation.Tag;\n                }\n                if (tag !== false) {\n                    var avg = getAverageNumericalValue(tag);\n                    d.numerical_avg = avg;\n                    linkWidth = avg / 100 * linkMaxWidth;\n                }\n                linkWidth = Math.max(linkWidth, 1);\n                return linkWidth + 'px';\n            })\n            .attr(\"d\", function(d) {\n                return diagonal(d);\n            });\n    }\n\n    function drawEntities(gEnter) {\n        gEnter.filter(function(d) { return d.GalaxyCluster !== undefined }).call(drawCluster);\n        gEnter.filter(function(d) { return d.Relation !== undefined }).call(drawRelation);\n    }\n\n    function drawCluster(gEnter) {\n        gEnter\n        .classed('useCursorPointer', true)\n        .on('dblclick', function(d) {\n            if (d.isRoot) {\n                return;\n            }\n            var url = \"<?= sprintf('%s/galaxy_clusters/view/', $baseurl) ?>\"\n            window.open(url + d.GalaxyCluster.id, '_blank');\n        })\n        gEnter.filter(function(node) {return !node.isRoot; }).append(\"circle\")\n            .attr(\"r\", function(d) { return d.isRoot ? 10 : 5; })\n            .style(\"fill\", function(d) { return colors(d.GalaxyCluster.type); })\n            .style(\"stroke\", \"#000\")\n            .style(\"stroke-width\", \"2px\");\n        gEnter.filter(function(node) {return node.isRoot; }).append('polygon')\n            .attr('points', hexagonPoints)\n            .attr(\"transform\", 'translate(' + hexagonTranslate + ', ' + hexagonTranslate + ')')\n            .style(\"fill\", function(d) { return colors(d.GalaxyCluster.type); })\n            .style(\"stroke\", \"#000\")\n            .style(\"stroke-width\", \"2px\");\n\n        drawLabel(gEnter, {\n            text: [function(d) { return d.GalaxyCluster.value }, function(d) { return d.GalaxyCluster.type }],\n            x: function(d) { return getLabelPlacement(d, 'x'); },\n            y: function(d) { return getLabelPlacement(d, 'y'); },\n            textAnchor: 'middle',\n            fontWeight: 'bold'\n        });\n    }\n\n    function drawRelation(gEnter) {\n        var paddingX = 9;\n        gEnter.append(\"foreignObject\")\n            .attr(\"height\", 40)\n            .attr(\"y\", -15)\n            .attr(\"x\", function(d) { return  -(getTextWidth(d.Relation.referenced_galaxy_cluster_type) + 2*paddingX/2)/2 + 'px'; })\n            .attr(\"width\", function(d) { return getTextWidth(d.Relation.referenced_galaxy_cluster_type) + 2*paddingX + 'px'; })\n            .append(\"xhtml:div\")\n            .append(\"div\")\n            .attr(\"class\", \"well well-small\")\n            .style('padding', '4px 9px')\n            .style('white-space', 'nowrap')\n            .html(function(d) { return d.Relation.referenced_galaxy_cluster_type; })\n            \n        paddingX = 8;\n        gEnter.append(\"foreignObject\")\n            .attr(\"height\", 18)\n            .attr(\"y\", 20)\n            .attr(\"x\", function(d) { return  -(d.Relation.Tag !== undefined ? getTextWidth(d.Relation.Tag, {'white-space': 'nowrap', 'font-weight': 'bold'}, 'name') - 2*paddingX : 0)/2 + 'px'; })\n            .attr(\"width\", function(d) { return  (d.Relation.Tag !== undefined ? getTextWidth(d.Relation.Tag, {'white-space': 'nowrap', 'font-weight': 'bold'}, 'name') + 2*paddingX : 0) + 'px'; })\n            .append(\"xhtml:div\")\n            .each(function(d) {\n                var tagContainer = d3.select(this);\n                if (d.Relation.Tag !== undefined) {\n                    d.Relation.Tag.forEach(function(tag) {\n                        tagContainer\n                            .append(\"span\")\n                            .attr(\"class\", \"tag\")\n                            .style('white-space', 'nowrap')\n                            .style('background-color', tag.colour)\n                            .style('color', getTextColour(tag.colour))\n                            .style('display', 'inline')\n                            .html(tag.name)\n                    });\n                }\n            });\n\n    }\n\n    function drawLabel(gEnter, options) {\n        var defaultOptions = {\n            text: '',\n            x: '',\n            dx: '',\n            y: '',\n            dy: '',\n            textAnchor: 'start',\n            fontWeight: ''\n        }\n        options = $.extend(defaultOptions, options);\n        var svgText = gEnter.append(\"text\")\n            .attr(\"dy\", options.dy)\n            .attr(\"dx\", options.dx)\n            .attr(\"x\", options.x)\n            .attr(\"y\", options.y)\n            .attr(\"text-anchor\", options.textAnchor)\n        if (Array.isArray(options.text)) {\n            options.text.forEach(function(text, i) {\n                svgText.append('tspan')\n                    .attr('font-weight', i == 0 ? 'bold' : '')\n                    .attr('font-style', i != 0 ? 'italic' : '')\n                    .attr('x', options.x)\n                    .attr('dy', i != 0 ? 16 : 0)\n                    .text(text);\n            })\n        } else {\n            svgText\n                .attr(\"font-weight\", options.fontWeight)\n                .text(options.text);\n        }\n    }\n\n    function getLabelPlacement(d, axis) {\n        if (axis === 'x') {\n            return \"0em\";\n            // if (reversed) {\n                //     return d.children ? \"1.5em\" : \"0em\";\n                // } else {\n                    //     return d.children ? \"0em\" : \"1.5em\";\n                    // }\n        } else {\n            return \"2em\";\n            // if (reversed) {\n            //     return d.children ? \"0em\" : \"2em\";\n            // } else {\n            //     return d.children ? \"2em\" : \"\";\n            // }\n        }\n    }\n\n    function getTextWidth(text, additionalStyle, pathKey) {\n        var style = {visibility: 'hidden'};\n        if (additionalStyle !== undefined) {\n            style = $.extend(style, additionalStyle);\n        }\n        var total = 0;\n        if (Array.isArray(text)) {\n            text.forEach(element => {\n                if (pathKey !== undefined) {\n                    element = element[pathKey];\n                }\n                var tmp = $('<span></span>').text(element).css(style)\n                $('body').append(tmp);\n                var bcr = tmp[0].getBoundingClientRect()\n                tmp.remove();\n                total += bcr.width;\n            });\n        } else {\n            var tmp = $('<span></span>').text(text).css(style)\n            $('body').append(tmp);\n            var bcr = tmp[0].getBoundingClientRect()\n            tmp.remove();\n            total += bcr.width;\n        }\n        return total;\n    }\n\n    function getAverageNumericalValue(tags) {\n        var total = 0;\n        var validTagCount = 0;\n        tags.forEach(function(tag) {\n            if (tag.numerical_value !== undefined) {\n                total += parseInt(tag.numerical_value);\n                validTagCount++;\n            }\n        });\n        return validTagCount > 0 ? total / validTagCount : 0;\n    }\n\n    function nodeDbclick(d) {\n    }\n\n    function nodeHover(d) {\n    }\n\n    function adaptContainerHeightIfNeeded(side) {\n        var $upperContainer = $('#treeSVG.<?= $randomClass ?>').parent().parent();\n        var leftNodeNumber = 0\n        var rightNodeNumber = 0 \n        if (side == 'left') {\n            leftNodeNumber = treeData.left[0].children.length\n        } else if (side == 'right') {\n            rightNodeNumber = treeData.right[0].children.length\n        } else {\n            leftNodeNumber = treeData.left[0].children.length\n            rightNodeNumber = treeData.right[0].children.length\n        }\n        var maxChildrenNumber = leftNodeNumber > rightNodeNumber ? leftNodeNumber : rightNodeNumber;\n        var additionalHeightPerChildren = 60; // px\n        var originalHeight = $upperContainer.height();\n        var childrenOverflow = maxChildrenNumber - Math.round(originalHeight / additionalHeightPerChildren) > 0 ? maxChildrenNumber - Math.round(originalHeight / additionalHeightPerChildren) : 0;\n        var targetHeight = originalHeight + (childrenOverflow * additionalHeightPerChildren)\n        $upperContainer.height(targetHeight);\n    }\n\n    function getId(d) {\n        var id = \"\";\n        if (d.GalaxyCluster !== undefined) {\n            id = d.GalaxyCluster.uuid;\n        } else if (d.Relation !== undefined) {\n            id = d.Relation.id;\n        }\n        return id;\n    }\n\n    function reloadDiagram($container, checked) {\n        var url = '<?= $baseurl ?>/galaxy_clusters/viewRelationTree/<?= h($cluster['GalaxyCluster']['id']) ?>/' + (checked ? '1' : '0')\n        xhr({\n            dataType: \"html\",\n            success: function (data) {\n                hasBeenBuilt<?= $random ?> = false;\n                $container.html(data);\n                buildTree()\n            },\n            url: url,\n        });\n    }\n</script>"], "fixing_code": ["<?php\necho $this->element('genericElements/assetLoader', array(\n    'js' => array('d3')\n));\n$random = rand();\n$randomClass = \"relation-{$random}\";\n?>\n\n<div style=\"padding: 5px; display: flex; position: absolute; top: 0; left: 0; right: 0; bottom: 0;\">\n    <label style=\"position: absolute;\">\n        <input type=\"checkbox\" id=\"checkbox-include-inbound\" class=\"<?= $randomClass ?>\" <?= !isset($includeInbound) || !empty($includeInbound) ? \"checked=\\\"checked\\\"\" : \"\" ?>></input>\n        <?= __('Include inbound relations') ?>\n    </label>\n    <svg id=\"treeSVG\" class=\"<?= $randomClass ?>\" style=\"width: 100%; height: 100%;\"></svg>\n</div>\n\n<script>\n    var hexagonPoints = '21,10.5 15.75,19.6 5.25,19.6 0,10.5 5.25,1.4 15.75,1.4'\n    var hexagonTranslate = -10.5;\n    var treeData = <?= json_encode($tree) ?>;\n    var margin = {top: 10, right: 10, bottom: 30, left: 20};\n    var treeWidth, treeHeight;\n    var colors = d3.scale.category10();\n    var hasBeenBuilt<?= $random ?> = false;\n\n    $(document).ready(function() {\n        var $checkbox = $('#checkbox-include-inbound.<?= $randomClass ?>');\n        $checkbox.click(function() {\n            var $container = $(this).parent().parent().parent();\n            var checked = $(this).prop('checked');\n            reloadDiagram($container, checked);\n        })\n    })\n\n    function buildTree() {\n        if (hasBeenBuilt<?= $random ?>) {\n            return;\n        }\n        hasBeenBuilt<?= $random ?> = true;\n        var $tree = $('#treeSVG.<?= $randomClass ?>');\n        treeWidth = $tree.width() - margin.right - margin.left;\n        treeHeight = $tree.height() - margin.top - margin.bottom;\n        var leftShift;\n        var childrenBothSides, side;\n        if (treeData.left[0].children === undefined || treeData.left[0].children.length == 0) {\n            leftShift = 0;\n            childrenBothSides = false;\n            side = 'right';\n        } else {\n            if (treeData.right[0].children === undefined || treeData.right[0].children.length == 0) {\n                leftShift = treeWidth;\n                childrenBothSides = false;\n                side = 'left';\n            } else {\n                leftShift = treeWidth/2;\n                childrenBothSides = true;\n                side = 'both';\n            }\n        }\n        adaptContainerHeightIfNeeded(side);\n\n        var data = genHierarchy(treeData, leftShift, childrenBothSides, side);\n        drawTree(data, leftShift, childrenBothSides);\n    }\n\n    function genHierarchy(data, leftShift, childrenBothSides, side) {\n        var rightOffset = 0;\n        if (side !== 'left') {\n            var treeRight = d3.layout.tree(data.right)\n                .size([treeHeight, (childrenBothSides ? treeWidth/2 : treeWidth)]);\n            var rootRight = data.right[0];\n            rootRight.isRoot = true;\n            rootRight.x0 = treeHeight / 2;\n            rootRight.y0 = 0;\n            var nodesRight = treeRight.nodes(rootRight).reverse();\n            var linksRight = treeRight.links(nodesRight);\n            var maxDepthRight = 1;\n            var leftMaxTextLengthRight = 0;\n            nodesRight.forEach(function(d) {\n                maxDepthRight = maxDepthRight > d.depth ? maxDepthRight : d.depth;\n                if (d.GalaxyCluster !== undefined) {\n                    var clusterLength = d.GalaxyCluster.type.length > d.GalaxyCluster.value.length ? d.GalaxyCluster.type.length : d.GalaxyCluster.value.length;\n                    leftMaxTextLengthRight = leftMaxTextLengthRight > clusterLength ? leftMaxTextLengthRight : clusterLength;\n                    d.id = 'left-' + getId(d, true);\n                } else if (d.Relation !== undefined) {\n                    var tagLength = 0;\n                    if (d.Relation.Tag !== undefined) {\n                        tagLength = d.Relation.Tag.name / 2;\n                    }\n                    var relationLength = tagLength > d.Relation.referenced_galaxy_cluster_type.length ? tagLength : d.Relation.referenced_galaxy_cluster_type.length;\n                    leftMaxTextLengthRight = leftMaxTextLengthRight > relationLength ? leftMaxTextLengthRight : relationLength;\n                    d.id = 'left-' + getId(d);\n                }\n            })\n            var offsetLeafLengthRight = leftMaxTextLengthRight * 6.7; // font-size of body is 12px\n            var ratioFactor = (treeWidth - offsetLeafLengthRight) / (maxDepthRight * (childrenBothSides ? 2 : 1));\n            nodesRight.forEach(function(d) { d.y = d.depth * ratioFactor; });\n            rightOffset = side === 'right' ? -leftMaxTextLengthRight : 0;\n        }\n\n        if (side !== 'right') {\n            var treeLeft = d3.layout.tree(data.left)\n                .size([treeHeight, (childrenBothSides ? treeWidth/2 : treeWidth)]);\n            var rootLeft = data.left[0];\n            rootLeft.isRoot = true;\n            rootLeft.x0 = treeHeight / 2;\n            rootLeft.y0 = 0;\n            var nodesLeft = treeLeft.nodes(rootLeft).reverse();\n            var linksLeft = treeLeft.links(nodesLeft);\n            var maxDepthLeft = 1;\n            var leftMaxTextLengthLeft = 0;\n            nodesLeft.forEach(function(d) {\n                maxDepthLeft = maxDepthLeft > d.depth ? maxDepthLeft : d.depth;\n                if (d.GalaxyCluster !== undefined) {\n                    var clusterLength = d.GalaxyCluster.type.length > d.GalaxyCluster.value.length ? d.GalaxyCluster.type.length : d.GalaxyCluster.value.length;\n                    leftMaxTextLengthLeft = leftMaxTextLengthLeft > clusterLength ? leftMaxTextLengthLeft : clusterLength;\n                    d.id = 'right-' + getId(d, true);\n                } else if (d.Relation !== undefined) {\n                    var tagLength = 0;\n                    if (d.Relation.Tag !== undefined) {\n                        tagLength = d.Relation.Tag.name / 2;\n                    }\n                    var relationLength = tagLength > d.Relation.referenced_galaxy_cluster_type.length ? tagLength : d.Relation.referenced_galaxy_cluster_type.length;\n                    leftMaxTextLengthLeft = leftMaxTextLengthLeft > relationLength ? leftMaxTextLengthLeft : relationLength;\n                    d.id = 'right-' + getId(d);\n                }\n            })\n            var offsetLeafLengthLeft = leftMaxTextLengthLeft * 6.7; // font-size of body is 12px\n            var ratioFactor = (treeWidth - offsetLeafLengthLeft) / (maxDepthLeft  * (childrenBothSides ? 2 : 1));\n            nodesLeft.forEach(function(d) { d.y = -d.depth * ratioFactor; });\n            rightOffset = side === 'left' ? leftMaxTextLengthLeft : 0;\n        }\n\n        var nodes, links;\n        if (side === 'both') {\n            nodesLeft = nodesLeft.filter(function(d) { return d.depth !== 0}); // filter out duplicate root\n            nodes = nodesRight.concat(nodesLeft);\n            links = linksRight.concat(linksLeft);\n        } else if (side === 'right') {\n            nodes = nodesRight;\n            links = linksRight;\n        } else {\n            nodes = nodesLeft;\n            links = linksLeft;\n        }\n        return {\n            rightOffset: rightOffset,\n            nodes: nodes,\n            links: links\n        };\n    }\n    \n    function drawTree(data, leftShift, childrenBothSides) {\n        var diagonal = function link(d) {\n            return \"M\" + d.source.y + \",\" + d.source.x\n                + \"C\" + (d.source.y + d.target.y) / 2 + \",\" + d.source.x\n                + \" \" + (d.source.y + d.target.y) / 2 + \",\" + d.target.x\n                + \" \" + d.target.y + \",\" + d.target.x;\n        };\n        var svg = d3.select(\"#treeSVG.<?= $randomClass ?>\")\n            .attr(\"width\", treeWidth + margin.right + margin.left)\n            .attr(\"height\", treeHeight + margin.top + margin.bottom)\n            .append(\"g\")\n                .attr(\"transform\", \"translate(\" + (leftShift + margin.left - 2*data.rightOffset) + \",\" + margin.top + \")\");\n\n        defs = svg.append(\"defs\")\n        defs.append(\"marker\")\n            .attr({\n                \"id\":\"arrowEnd\",\n                \"viewBox\":\"0 -5 10 10\",\n                \"refX\": 10+7,\n                \"refY\": 0,\n                \"markerWidth\": 10,\n                \"markerHeight\": 10,\n                \"markerUnits\": \"userSpaceOnUse\",\n                \"orient\":\"auto\"\n            })\n            .append(\"path\")\n                .attr(\"d\", \"M0,-5L10,0L0,5\")\n                .attr(\"class\",\"arrowHead\");\n        defs.append(\"marker\")\n            .attr({\n                \"id\":\"arrowStart\",\n                \"viewBox\":\"0 -5 10 10\",\n                \"refX\": 10+7,\n                \"refY\": 0,\n                \"markerWidth\": 10,\n                \"markerHeight\": 10,\n                \"markerUnits\": \"userSpaceOnUse\",\n                \"orient\": 0\n            })\n            .append(\"path\")\n                .attr(\"d\", \"M0,-5L10,0L0,5\")\n                .attr(\"class\",\"arrowHead\");\n        var nodes = data.nodes;\n        var links = data.links;\n\n        var node = svg.selectAll(\"g.node\")\n            .data(nodes, function(d) { return d.id });\n\n        var nodeEnter = node.enter().append(\"g\")\n            .attr(\"class\", \"node\")\n            .attr(\"transform\", function(d) { return \"translate(\" + d.y + \",\" + d.x + \")\"; })\n            .on(\"mouseover\", nodeHover)\n            .on(\"dblclick\", nodeDbclick);\n\n        var gEnter = nodeEnter.append('g');\n        drawEntities(gEnter);\n\n        var link = svg.selectAll(\"path.link\")\n            .data(links, function(d) { return d.target.id; });\n\n        link.enter().insert(\"path\", \"g\")\n            .attr(\"id\",function(d,i) { return \"linkId_\" + i; })\n            .attr(\"class\", \"link\")\n            .attr(\"marker-end\", function(d) {\n                if ((d.target.children === undefined || d.target.children.length === 0) && d.target.y > 0) {\n                    return \"url(#arrowEnd)\"\n                } else {\n                    return \"\"\n                }\n            })\n            .attr(\"marker-start\", function(d) {\n                if (d.source.isRoot && d.target.y < 0) {\n                    return \"url(#arrowStart)\"\n                } else {\n                    return \"\"\n                }\n            })\n            .style(\"fill\", \"none\")\n            .style(\"stroke\", \"#ccc\")\n            .style(\"stroke-width\", function(d) {\n                var linkWidth = 2;\n                var linkMaxWidth = 4;\n                var tag = false;\n                if (d.source.Relation !== undefined && d.source.Relation.Tag !== undefined) {\n                    tag = d.source.Relation.Tag;\n                } else if (d.target.Relation !== undefined && d.target.Relation.Tag !== undefined) {\n                    tag = d.target.Relation.Tag;\n                }\n                if (tag !== false) {\n                    var avg = getAverageNumericalValue(tag);\n                    d.numerical_avg = avg;\n                    linkWidth = avg / 100 * linkMaxWidth;\n                }\n                linkWidth = Math.max(linkWidth, 1);\n                return linkWidth + 'px';\n            })\n            .attr(\"d\", function(d) {\n                return diagonal(d);\n            });\n    }\n\n    function drawEntities(gEnter) {\n        gEnter.filter(function(d) { return d.GalaxyCluster !== undefined }).call(drawCluster);\n        gEnter.filter(function(d) { return d.Relation !== undefined }).call(drawRelation);\n    }\n\n    function drawCluster(gEnter) {\n        gEnter\n        .classed('useCursorPointer', true)\n        .on('dblclick', function(d) {\n            if (d.isRoot) {\n                return;\n            }\n            var url = \"<?= sprintf('%s/galaxy_clusters/view/', $baseurl) ?>\"\n            window.open(url + d.GalaxyCluster.id, '_blank');\n        })\n        gEnter.filter(function(node) {return !node.isRoot; }).append(\"circle\")\n            .attr(\"r\", function(d) { return d.isRoot ? 10 : 5; })\n            .style(\"fill\", function(d) { return colors(d.GalaxyCluster.type); })\n            .style(\"stroke\", \"#000\")\n            .style(\"stroke-width\", \"2px\");\n        gEnter.filter(function(node) {return node.isRoot; }).append('polygon')\n            .attr('points', hexagonPoints)\n            .attr(\"transform\", 'translate(' + hexagonTranslate + ', ' + hexagonTranslate + ')')\n            .style(\"fill\", function(d) { return colors(d.GalaxyCluster.type); })\n            .style(\"stroke\", \"#000\")\n            .style(\"stroke-width\", \"2px\");\n\n        drawLabel(gEnter, {\n            text: [function(d) { return d.GalaxyCluster.value }, function(d) { return d.GalaxyCluster.type }],\n            x: function(d) { return getLabelPlacement(d, 'x'); },\n            y: function(d) { return getLabelPlacement(d, 'y'); },\n            textAnchor: 'middle',\n            fontWeight: 'bold'\n        });\n    }\n\n    function drawRelation(gEnter) {\n        var paddingX = 9;\n        gEnter.append(\"foreignObject\")\n            .attr(\"height\", 40)\n            .attr(\"y\", -15)\n            .attr(\"x\", function(d) { return  -(getTextWidth(d.Relation.referenced_galaxy_cluster_type) + 2*paddingX/2)/2 + 'px'; })\n            .attr(\"width\", function(d) { return getTextWidth(d.Relation.referenced_galaxy_cluster_type) + 2*paddingX + 'px'; })\n            .append(\"xhtml:div\")\n            .append(\"div\")\n            .attr(\"class\", \"well well-small\")\n            .style('padding', '4px 9px')\n            .style('white-space', 'nowrap')\n            .text(function(d) { return d.Relation.referenced_galaxy_cluster_type; })\n            \n        paddingX = 8;\n        gEnter.append(\"foreignObject\")\n            .attr(\"height\", 18)\n            .attr(\"y\", 20)\n            .attr(\"x\", function(d) { return  -(d.Relation.Tag !== undefined ? getTextWidth(d.Relation.Tag, {'white-space': 'nowrap', 'font-weight': 'bold'}, 'name') - 2*paddingX : 0)/2 + 'px'; })\n            .attr(\"width\", function(d) { return  (d.Relation.Tag !== undefined ? getTextWidth(d.Relation.Tag, {'white-space': 'nowrap', 'font-weight': 'bold'}, 'name') + 2*paddingX : 0) + 'px'; })\n            .append(\"xhtml:div\")\n            .each(function(d) {\n                var tagContainer = d3.select(this);\n                if (d.Relation.Tag !== undefined) {\n                    d.Relation.Tag.forEach(function(tag) {\n                        tagContainer\n                            .append(\"span\")\n                            .attr(\"class\", \"tag\")\n                            .style('white-space', 'nowrap')\n                            .style('background-color', tag.colour)\n                            .style('color', getTextColour(tag.colour))\n                            .style('display', 'inline')\n                            .text(tag.name)\n                    });\n                }\n            });\n\n    }\n\n    function drawLabel(gEnter, options) {\n        var defaultOptions = {\n            text: '',\n            x: '',\n            dx: '',\n            y: '',\n            dy: '',\n            textAnchor: 'start',\n            fontWeight: ''\n        }\n        options = $.extend(defaultOptions, options);\n        var svgText = gEnter.append(\"text\")\n            .attr(\"dy\", options.dy)\n            .attr(\"dx\", options.dx)\n            .attr(\"x\", options.x)\n            .attr(\"y\", options.y)\n            .attr(\"text-anchor\", options.textAnchor)\n        if (Array.isArray(options.text)) {\n            options.text.forEach(function(text, i) {\n                svgText.append('tspan')\n                    .attr('font-weight', i == 0 ? 'bold' : '')\n                    .attr('font-style', i != 0 ? 'italic' : '')\n                    .attr('x', options.x)\n                    .attr('dy', i != 0 ? 16 : 0)\n                    .text(text);\n            })\n        } else {\n            svgText\n                .attr(\"font-weight\", options.fontWeight)\n                .text(options.text);\n        }\n    }\n\n    function getLabelPlacement(d, axis) {\n        if (axis === 'x') {\n            return \"0em\";\n            // if (reversed) {\n                //     return d.children ? \"1.5em\" : \"0em\";\n                // } else {\n                    //     return d.children ? \"0em\" : \"1.5em\";\n                    // }\n        } else {\n            return \"2em\";\n            // if (reversed) {\n            //     return d.children ? \"0em\" : \"2em\";\n            // } else {\n            //     return d.children ? \"2em\" : \"\";\n            // }\n        }\n    }\n\n    function getTextWidth(text, additionalStyle, pathKey) {\n        var style = {visibility: 'hidden'};\n        if (additionalStyle !== undefined) {\n            style = $.extend(style, additionalStyle);\n        }\n        var total = 0;\n        if (Array.isArray(text)) {\n            text.forEach(element => {\n                if (pathKey !== undefined) {\n                    element = element[pathKey];\n                }\n                var tmp = $('<span></span>').text(element).css(style)\n                $('body').append(tmp);\n                var bcr = tmp[0].getBoundingClientRect()\n                tmp.remove();\n                total += bcr.width;\n            });\n        } else {\n            var tmp = $('<span></span>').text(text).css(style)\n            $('body').append(tmp);\n            var bcr = tmp[0].getBoundingClientRect()\n            tmp.remove();\n            total += bcr.width;\n        }\n        return total;\n    }\n\n    function getAverageNumericalValue(tags) {\n        var total = 0;\n        var validTagCount = 0;\n        tags.forEach(function(tag) {\n            if (tag.numerical_value !== undefined) {\n                total += parseInt(tag.numerical_value);\n                validTagCount++;\n            }\n        });\n        return validTagCount > 0 ? total / validTagCount : 0;\n    }\n\n    function nodeDbclick(d) {\n    }\n\n    function nodeHover(d) {\n    }\n\n    function adaptContainerHeightIfNeeded(side) {\n        var $upperContainer = $('#treeSVG.<?= $randomClass ?>').parent().parent();\n        var leftNodeNumber = 0\n        var rightNodeNumber = 0 \n        if (side == 'left') {\n            leftNodeNumber = treeData.left[0].children.length\n        } else if (side == 'right') {\n            rightNodeNumber = treeData.right[0].children.length\n        } else {\n            leftNodeNumber = treeData.left[0].children.length\n            rightNodeNumber = treeData.right[0].children.length\n        }\n        var maxChildrenNumber = leftNodeNumber > rightNodeNumber ? leftNodeNumber : rightNodeNumber;\n        var additionalHeightPerChildren = 60; // px\n        var originalHeight = $upperContainer.height();\n        var childrenOverflow = maxChildrenNumber - Math.round(originalHeight / additionalHeightPerChildren) > 0 ? maxChildrenNumber - Math.round(originalHeight / additionalHeightPerChildren) : 0;\n        var targetHeight = originalHeight + (childrenOverflow * additionalHeightPerChildren)\n        $upperContainer.height(targetHeight);\n    }\n\n    function getId(d) {\n        var id = \"\";\n        if (d.GalaxyCluster !== undefined) {\n            id = d.GalaxyCluster.uuid;\n        } else if (d.Relation !== undefined) {\n            id = d.Relation.id;\n        }\n        return id;\n    }\n\n    function reloadDiagram($container, checked) {\n        var url = '<?= $baseurl ?>/galaxy_clusters/viewRelationTree/<?= h($cluster['GalaxyCluster']['id']) ?>/' + (checked ? '1' : '0')\n        xhr({\n            dataType: \"html\",\n            success: function (data) {\n                hasBeenBuilt<?= $random ?> = false;\n                $container.html(data);\n                buildTree()\n            },\n            url: url,\n        });\n    }\n</script>"], "filenames": ["app/View/Elements/GalaxyClusters/view_relation_tree.ctp"], "buggy_code_start_loc": [302], "buggy_code_end_loc": [323], "fixing_code_start_loc": [302], "fixing_code_end_loc": [323], "type": "CWE-79", "message": "app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships.", "other": {"cve": {"id": "CVE-2021-37742", "sourceIdentifier": "cve@mitre.org", "published": "2021-07-30T15:15:09.257", "lastModified": "2021-08-02T21:00:09.020", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "app/View/Elements/GalaxyClusters/view_relation_tree.ctp in MISP 2.4.147 allows Stored XSS when viewing galaxy cluster relationships."}, {"lang": "es", "value": "Un archivo app/View/Elements/GalaxyClusters/view_relation_tree.ctp en MISP versi\u00f3n 2.4.147, permite un ataque de tipo XSS almacenado cuando se visualizan las relaciones de los clusters galaxy"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.147:*:*:*:*:*:*:*", "matchCriteriaId": "8F7E38EF-BB9F-4739-B2A8-62BF4A7ABC77"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/af50add82433eb2a740c3621b99d9d14d2b1e192", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/af50add82433eb2a740c3621b99d9d14d2b1e192"}}