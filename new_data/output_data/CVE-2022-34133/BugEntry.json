{"buggy_code": ["<?php\n/**\n * This controller contains the actions allowing an employee to list and manage its leave requests\n * @copyright  Copyright (c) 2014-2019 Benjamin BALET\n * @license      http://opensource.org/licenses/AGPL-3.0 AGPL-3.0\n * @link            https://github.com/bbalet/jorani\n * @since         0.1.0\n */\n\nif (!defined('BASEPATH')) { exit('No direct script access allowed'); }\n\n//We can define custom triggers before saving the leave request into the database\nrequire_once FCPATH . \"local/triggers/leave.php\";\n\n/**\n * This class allows an employee to list and manage its leave requests\n * Since 0.4.3 a trigger is called at the creation, if the function triggerCreateLeaveRequest is defined\n * see content of /local/triggers/leave.php\n */\nclass Leaves extends CI_Controller {\n\n    /**\n     * Default constructor\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function __construct() {\n        parent::__construct();\n        setUserContext($this);\n        $this->load->model('leaves_model');\n        $this->load->model('types_model');\n        $this->lang->load('leaves', $this->language);\n        $this->lang->load('global', $this->language);\n    }\n\n    /**\n     * Display the list of the leave requests of the connected user\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function index() {\n        $this->auth->checkIfOperationIsAllowed('list_leaves');\n        $data = getUserContext($this);\n        $this->lang->load('datatable', $this->language);\n        if ($this->config->item('enable_history') == TRUE){\n          $data['leaves'] = $this->leaves_model->getLeavesOfEmployeeWithHistory($this->session->userdata('id'));\n        } else {\n          $data['leaves'] = $this->leaves_model->getLeavesOfEmployee($this->session->userdata('id'));\n        }\n        $data['types'] = $this->types_model->getTypes();\n        $data['title'] = lang('leaves_index_title');\n        $data['help'] = $this->help->create_help_link('global_link_doc_page_leave_requests_list');\n        $data['flash_partial_view'] = $this->load->view('templates/flash', $data, TRUE);\n        $this->load->view('templates/header', $data);\n        $this->load->view('menu/index', $data);\n        $this->load->view('leaves/index', $data);\n        $this->load->view('templates/footer');\n    }\n\n    /**\n     * Display the history of changes of a leave request\n     * @param int $id Identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function history($id) {\n        $this->auth->checkIfOperationIsAllowed('list_leaves');\n        $data = getUserContext($this);\n        $this->lang->load('datatable', $this->language);\n        $data['leave'] = $this->leaves_model->getLeaves($id);\n        $this->load->model('history_model');\n        $data['events'] = $this->history_model->getLeaveRequestsHistory($id);\n        $this->load->view('leaves/history', $data);\n    }\n\n    /**\n     * Display the details of leaves taken/entitled for the connected user\n     * @param string $refDate Date (e.g. 2011-10-05)\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function counters($refDate = NULL) {\n        $this->auth->checkIfOperationIsAllowed('counters_leaves');\n        $data = getUserContext($this);\n        $this->lang->load('datatable', $this->language);\n        if ($refDate != NULL) {\n            $data['isDefault'] = 0;\n        } else {\n            $refDate = date(\"Y-m-d\");\n            $data['isDefault'] = 1;\n        }\n        $data['refDate'] = $refDate;\n        $data['summary'] = $this->leaves_model->getLeaveBalanceForEmployee($this->user_id, FALSE, $refDate);\n\n        if (!is_null($data['summary'])) {\n            $data['title'] = lang('leaves_summary_title');\n            $data['help'] = $this->help->create_help_link('global_link_doc_page_my_summary');\n            $this->load->view('templates/header', $data);\n            $this->load->view('menu/index', $data);\n            $this->load->view('leaves/counters', $data);\n            $this->load->view('templates/footer');\n        } else {\n            $this->session->set_flashdata('msg', lang('leaves_summary_flash_msg_error'));\n            redirect('leaves');\n        }\n    }\n\n    /**\n     * Display a leave request\n     * @param string $source Page source (leaves, requests) (self, manager)\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function view($source, $id) {\n        $this->auth->checkIfOperationIsAllowed('view_leaves');\n        $this->load->model('users_model');\n        $this->load->model('status_model');\n        $this->load->helper('form');\n        $data = getUserContext($this);\n        $data['leave'] = $this->leaves_model->getLeaveWithComments($id);\n        if (empty($data['leave'])) {\n            redirect('notfound');\n        }\n        //If the user is not its not HR, not manager and not the creator of the leave\n        //the employee can't see it, redirect to LR list\n        if ($data['leave']['employee'] != $this->user_id) {\n            if ((!$this->is_hr)) {\n                $this->load->model('users_model');\n                $employee = $this->users_model->getUsers($data['leave']['employee']);\n                if ($employee['manager'] != $this->user_id) {\n                    $this->load->model('delegations_model');\n                    if (!$this->delegations_model->isDelegateOfManager($this->user_id, $employee['manager'])) {\n                        log_message('error', 'User #' . $this->user_id . ' illegally tried to view leave #' . $id);\n                        redirect('leaves');\n                    }\n                }\n            } //Admin\n        } //Current employee\n        $data['source'] = $source;\n        //overwrite source (for taking into account the tabular calendar)\n        if ($this->input->get('source') != NULL) {\n            $data['source'] = urldecode($this->input->get('source'));\n        }\n\n        $data['title'] = lang('leaves_view_html_title');\n        if ($source == 'requests') {\n            if (empty($employee)) {\n                $this->load->model('users_model');\n                $data['name'] = $this->users_model->getName($data['leave']['employee']);\n            } else {\n                $data['name'] = $employee['firstname'] . ' ' . $employee['lastname'];\n            }\n        } else {\n            $data['name'] = '';\n        }\n        if (isset($data[\"leave\"][\"comments\"])){\n          $last_comment = new stdClass();;\n          foreach ($data[\"leave\"][\"comments\"]->comments as $comments_item) {\n            if($comments_item->type == \"comment\"){\n              $comments_item->author = $this->users_model->getName($comments_item->author);\n              $comments_item->in = \"in\";\n              $last_comment->in=\"\";\n              $last_comment=$comments_item;\n            } else if($comments_item->type == \"change\"){\n              $comments_item->status = $this->status_model->getName($comments_item->status_number);\n            }\n          }\n        }\n        $this->load->view('templates/header', $data);\n        $this->load->view('menu/index', $data);\n        $this->load->view('leaves/view', $data);\n        $this->load->view('templates/footer');\n    }\n\n    /**\n     * Create a new comment or append a comment to the comments\n     * on a leave request\n     * @param int $id Id of the leave request\n     * @param string $source Page where we redirect after posting\n     * @author Emilien NICOLAS <milihhard1996@gmail.com>\n     */\n    public function createComment($id, $source = \"leaves/leaves\"){\n      $this->auth->checkIfOperationIsAllowed('view_leaves');\n      $data = getUserContext($this);\n      $oldComment = $this->leaves_model->getCommentsLeave($id);\n      $newComment = new stdClass;\n      $newComment->type = \"comment\";\n      $newComment->author = $this->session->userdata('id');\n      $newComment->value = $this->input->post('comment');\n      $newComment->date = date(\"Y-n-j\");\n      if ($oldComment != NULL){\n        array_push($oldComment->comments, $newComment);\n      }else {\n        $oldComment = new stdClass;\n        $oldComment->comments = array($newComment);\n      }\n      $json = json_encode($oldComment);\n      $this->leaves_model->addComments($id, $json);\n      if(isset($_GET['source'])){\n        $source = $_GET['source'];\n      }\n      redirect(\"/$source/$id\");\n    }\n\n    /**\n     * Create a leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function create() {\n        $this->auth->checkIfOperationIsAllowed('create_leaves');\n        $data = getUserContext($this);\n        $this->load->helper('form');\n        $this->load->library('form_validation');\n        $data['title'] = lang('leaves_create_title');\n        $data['help'] = $this->help->create_help_link('global_link_doc_page_request_leave');\n\n        $this->form_validation->set_rules('startdate', lang('leaves_create_field_start'), 'required|strip_tags');\n        $this->form_validation->set_rules('startdatetype', 'Start Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('enddate', lang('leaves_create_field_end'), 'required|strip_tags');\n        $this->form_validation->set_rules('enddatetype', 'End Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('duration', lang('leaves_create_field_duration'), 'required|strip_tags');\n        $this->form_validation->set_rules('type', lang('leaves_create_field_type'), 'required|strip_tags');\n        $this->form_validation->set_rules('cause', lang('leaves_create_field_cause'), 'strip_tags');\n        $this->form_validation->set_rules('status', lang('leaves_create_field_status'), 'required|strip_tags');\n\n        if ($this->form_validation->run() === FALSE) {\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($this->session->userdata('id'));\n            $data['defaultType'] = $leaveTypesDetails->defaultType;\n            $data['credit'] = $leaveTypesDetails->credit;\n            $data['types'] = $leaveTypesDetails->types;\n            $this->load->view('templates/header', $data);\n            $this->load->view('menu/index', $data);\n            $this->load->view('leaves/create');\n            $this->load->view('templates/footer');\n        } else {\n          //Prevent thugs to auto validate their leave requests\n          if (!$this->is_hr && !$this->is_admin) {\n            if ($this->input->post('status') > LMS_REQUESTED) {\n                log_message('error', 'User #' . $this->session->userdata('id') . \n                    ' tried to submit a LR with an wrong status = ' . $this->input->post('status'));\n                $_POST['status'] = LMS_REQUESTED;\n            }\n          }\n          \n            //Users must use an existing leave type, otherwise\n            //force leave type to default leave type\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($this->session->userdata('id'));\n            if (!array_key_exists($this->input->post('type'), $leaveTypesDetails->types)) {\n                log_message('error', 'User #' . $this->session->userdata('id') . ' tried to submit an wrong LR type = ' . \n                $this->input->post('type'));\n                $_POST['type'] = $leaveTypesDetails->defaultType;\n                log_message('debug', 'LR type forced to ' . $leaveTypesDetails->defaultType); \n            }\n\n          if (function_exists('triggerCreateLeaveRequest')) {\n              triggerCreateLeaveRequest($this);\n          }\n          $leave_id = $this->leaves_model->setLeaves($this->session->userdata('id'));\n          $this->session->set_flashdata('msg', lang('leaves_create_flash_msg_success'));\n\n          //If the status is requested, send an email to the manager\n          if ($this->input->post('status') == LMS_REQUESTED) {\n              $this->sendMailOnLeaveRequestCreation($leave_id);\n          }\n          if (isset($_GET['source'])) {\n              redirect($_GET['source']);\n          } else {\n              redirect('leaves');\n          }\n        }\n    }\n\n    /**\n     * Edit a leave request\n     * @param int $id Identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function edit($id) {\n        $this->auth->checkIfOperationIsAllowed('edit_leaves');\n        $this->load->model('users_model');\n        $this->load->model('status_model');\n        $data = getUserContext($this);\n        $data['leave'] = $this->leaves_model->getLeaveWithComments($id);\n        //Check if exists\n        if (empty($data['leave'])) {\n            redirect('notfound');\n        }\n        //If the user is not its own manager and if the leave is\n        //already requested, the employee can't modify it\n        if (!$this->is_hr) {\n            if (($this->session->userdata('manager') != $this->user_id) &&\n                    $data['leave']['status'] != LMS_PLANNED) {\n                if ($this->config->item('edit_rejected_requests') == FALSE ||\n                    $data['leave']['status'] != LMS_REJECTED) {//Configuration switch that allows editing the rejected leave requests\n                    log_message('error', 'User #' . $this->user_id . ' illegally tried to edit leave #' . $id);\n                    $this->session->set_flashdata('msg', lang('leaves_edit_flash_msg_error'));\n                    redirect('leaves');\n                 }\n            }\n        } //Admin\n\n        $this->load->helper('form');\n        $this->load->library('form_validation');\n        $this->form_validation->set_rules('startdate', lang('leaves_edit_field_start'), 'required|strip_tags');\n        $this->form_validation->set_rules('startdatetype', 'Start Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('enddate', lang('leaves_edit_field_end'), 'required|strip_tags');\n        $this->form_validation->set_rules('enddatetype', 'End Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('duration', lang('leaves_edit_field_duration'), 'required|strip_tags');\n        $this->form_validation->set_rules('type', lang('leaves_edit_field_type'), 'required|strip_tags');\n        $this->form_validation->set_rules('cause', lang('leaves_edit_field_cause'), 'strip_tags');\n        $this->form_validation->set_rules('status', lang('leaves_edit_field_status'), 'required|strip_tags');\n\n        if ($this->form_validation->run() === FALSE) {\n            $data['title'] = lang('leaves_edit_html_title');\n            $data['help'] = $this->help->create_help_link('global_link_doc_page_request_leave');\n            $data['id'] = $id;\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($data['leave']['employee'], $data['leave']['type']);\n            $data['defaultType'] = $leaveTypesDetails->defaultType;\n            $data['credit'] = $leaveTypesDetails->credit;\n            $data['types'] = $leaveTypesDetails->types;\n            $this->load->model('users_model');\n            $data['name'] = $this->users_model->getName($data['leave']['employee']);\n            if (isset($data[\"leave\"][\"comments\"])){\n              $last_comment = new stdClass();;\n              foreach ($data[\"leave\"][\"comments\"]->comments as $comments_item) {\n                if($comments_item->type == \"comment\"){\n                  $comments_item->author = $this->users_model->getName($comments_item->author);\n                  $comments_item->in = \"in\";\n                  $last_comment->in=\"\";\n                  $last_comment=$comments_item;\n                } else if($comments_item->type == \"change\"){\n                  $comments_item->status = $this->status_model->getName($comments_item->status_number);\n                }\n              }\n            }\n            $this->load->view('templates/header', $data);\n            $this->load->view('menu/index', $data);\n            $this->load->view('leaves/edit', $data);\n            $this->load->view('templates/footer');\n        } else {\n          //Prevent thugs to auto validate their leave requests\n          if (!$this->is_hr && !$this->is_admin) {\n            if ($this->input->post('status') == LMS_ACCEPTED) {\n                log_message('error', 'User #' . $this->session->userdata('id') . \n                    ' tried to submit a LR with an wrong status = ' . $this->input->post('status'));\n                $_POST['status'] = LMS_REQUESTED;\n            }\n            if ($this->input->post('status') == LMS_CANCELED) {\n                log_message('error', 'User #' . $this->session->userdata('id') . \n                    ' tried to submit a LR with an wrong status = ' . $this->input->post('status'));\n                $_POST['status'] = LMS_CANCELLATION;\n            }\n          }\n\n            //Users must use an existing leave type, otherwise\n            //force leave type to default leave type\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($this->session->userdata('id'));\n            if (!array_key_exists($this->input->post('type'), $leaveTypesDetails->types)) {\n                log_message('error', 'User #' . $this->session->userdata('id') . ' tried to submit an wrong LR type = ' . \n                $this->input->post('type'));\n                $_POST['type'] = $leaveTypesDetails->defaultType;\n                log_message('debug', 'LR type forced to ' . $leaveTypesDetails->defaultType); \n            }\n\n            $this->leaves_model->updateLeaves($id);       //We don't use the return value\n            $this->session->set_flashdata('msg', lang('leaves_edit_flash_msg_success'));\n            //If the status is requested or cancellation, send an email to the manager\n            if ($this->input->post('status') == LMS_REQUESTED) {\n                $this->sendMailOnLeaveRequestCreation($id);\n            }\n            if ($this->input->post('status') == LMS_CANCELLATION) {\n                $this->sendMailOnLeaveRequestCreation($id);\n            }\n            if (isset($_GET['source'])) {\n                redirect($_GET['source']);\n            } else {\n                redirect('leaves');\n            }\n        }\n    }\n\n    /**\n     * change a the status of a planned request to  requested\n     * @param int $id id of the leave\n     * @author Emilien NICOLAS <milihhard1996@gmail.com>\n     */\n     public function requestLeave($id){\n       $leave = $this->leaves_model->getLeaves($id);\n       if (empty($leave)) {\n           redirect('notfound');\n       } else {\n           //Only the connected user can reject its own requests\n           if ($this->user_id != $leave['employee']){\n               $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n               redirect('leaves');\n           }\n           //We can cancel a leave request only with a status 'Accepted'\n           if ($leave['status'] == LMS_PLANNED) {\n               $this->leaves_model->switchStatus($id, LMS_REQUESTED);\n               $this->sendMailOnLeaveRequestCreation($id);\n               $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_success'));\n               redirect('leaves');\n           } else {\n               $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n               redirect('leaves');\n           }\n       }\n     }\n\n    /**\n     * Send an email reminder (so as to remind to the manager that he\n     * must either accept/reject a request or a cancellation)\n     * @param int $id Identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function reminder($id) {\n        $this->auth->checkIfOperationIsAllowed('create_leaves');\n        $data = getUserContext($this);\n        $leave = $this->leaves_model->getLeaves($id);\n        switch($leave['status']) {\n            case LMS_REQUESTED: //Requested\n                $this->sendMailOnLeaveRequestCreation($id, TRUE);\n                break;\n            case LMS_CANCELLATION: //Cancellation\n                $this->sendMailOnLeaveRequestCancellation($id, TRUE);\n                break;\n        }\n        $this->session->set_flashdata('msg', lang('leaves_reminder_flash_msg_success'));\n        if (isset($_GET['source'])) {\n            redirect($_GET['source']);\n        } else {\n            redirect('leaves');\n        }\n    }\n\n    /**\n     * Send a leave request creation email to the manager of the connected employee\n     * @param int $id Leave request identifier\n     * @param int $reminder In case where the employee wants to send a reminder\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    private function sendMailOnLeaveRequestCreation($id, $reminder=FALSE) {\n        $this->load->model('users_model');\n        $this->load->model('types_model');\n        $this->load->model('delegations_model');\n        //We load everything from DB as the LR can be edited from HR/Employees\n        $leave = $this->leaves_model->getLeaves($id);\n        $user = $this->users_model->getUsers($leave['employee']);\n        $manager = $this->users_model->getUsers($user['manager']);\n        if (empty($manager['email'])) {\n            $this->session->set_flashdata('msg', lang('leaves_create_flash_msg_error'));\n        } else {\n            //Send an e-mail to the manager\n            $this->load->library('email');\n            $this->load->library('polyglot');\n            $usr_lang = $this->polyglot->code2language($manager['language']);\n\n            //We need to instance an different object as the languages of connected user may differ from the UI lang\n            $lang_mail = new CI_Lang();\n            $lang_mail->load('email', $usr_lang);\n            $lang_mail->load('global', $usr_lang);\n\n            if ($reminder) {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_creation_title'),\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_creation_subject'),\n                    'request');\n            } else {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_creation_title'),\n                    $lang_mail->line('email_leave_request_creation_subject'),\n                    'request');\n            }\n        }\n    }\n\n    /**\n     * Send a notification to the manager of the connected employee when the\n     * leave request has been canceled by its collaborator.\n     * @param int $id Leave request identifier\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    private function sendMailOnLeaveRequestCanceled($id) {\n        $this->load->model('users_model');\n        $this->load->model('types_model');\n        $this->load->model('delegations_model');\n        //We load everything from DB as the LR can be edited from HR/Employees\n        $leave = $this->leaves_model->getLeaves($id);\n        $user = $this->users_model->getUsers($leave['employee']);\n        $manager = $this->users_model->getUsers($user['manager']);\n        if (empty($manager['email'])) {\n            //TODO: create specific error message when the employee has no manager\n            $this->session->set_flashdata('msg', lang('leaves_cancel_flash_msg_error'));\n        } else {\n            //Send an e-mail to the manager\n            $this->load->library('email');\n            $this->load->library('polyglot');\n            $usr_lang = $this->polyglot->code2language($manager['language']);\n\n            //We need to instance an different object as the languages of connected user may differ from the UI lang\n            $lang_mail = new CI_Lang();\n            $lang_mail->load('email', $usr_lang);\n            $lang_mail->load('global', $usr_lang);\n\n            $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                $lang_mail->line('email_leave_request_cancellation_title'),\n                $lang_mail->line('email_leave_request_cancellation_subject'),\n                'cancelled');\n        }\n    }\n\n    /**\n     * Send a leave request cancellation email to the manager of the connected employee\n     * @param int $id Leave request identifier\n     * @param int $reminder In case where the employee wants to send a reminder\n     * @author Guillaume Blaquiere <guillaume.blaquiere@gmail.com>\n     */\n    private function sendMailOnLeaveRequestCancellation($id, $reminder=FALSE) {\n        $this->load->model('users_model');\n        $this->load->model('types_model');\n        $this->load->model('delegations_model');\n        //We load everything from DB as the LR can be edited from HR/Employees\n        $leave = $this->leaves_model->getLeaves($id);\n        $user = $this->users_model->getUsers($leave['employee']);\n        $manager = $this->users_model->getUsers($user['manager']);\n        if (empty($manager['email'])) {\n            $this->session->set_flashdata('msg', lang('leaves_cancel_flash_msg_error'));\n        } else {\n            //Send an e-mail to the manager\n            $this->load->library('email');\n            $this->load->library('polyglot');\n            $usr_lang = $this->polyglot->code2language($manager['language']);\n\n            //We need to instance an different object as the languages of connected user may differ from the UI lang\n            $lang_mail = new CI_Lang();\n            $lang_mail->load('email', $usr_lang);\n            $lang_mail->load('global', $usr_lang);\n\n            if ($reminder) {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_cancellation_title'),\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_cancellation_subject'),\n                    'request');\n            } else {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_cancellation_title'),\n                    $lang_mail->line('email_leave_request_cancellation_subject'),\n                    'cancel');\n            }\n        }\n    }\n\n    /**\n     * Send a generic email from the collaborator to the manager (delegate in copy) when a leave request is created or cancelled\n     * @param $leave Leave request\n     * @param $user Connected employee\n     * @param $manager Manger of connected employee\n     * @param $lang_mail Email language library\n     * @param $title Email Title\n     * @param $detailledSubject Email detailled Subject\n     * @param $emailModel template email to use\n     * @author Guillaume Blaquiere <guillaume.blaquiere@gmail.com>\n     *\n     */\n    private function sendGenericMail($leave, $user, $manager, $lang_mail, $title, $detailledSubject, $emailModel) {\n\n        $date = new DateTime($leave['startdate']);\n        $startdate = $date->format($lang_mail->line('global_date_format'));\n        $date = new DateTime($leave['enddate']);\n        $enddate = $date->format($lang_mail->line('global_date_format'));\n\n        $comments=$leave['comments'];\n        $comment = '';\n        if(!empty($comments)){\n          $comments=json_decode($comments);\n          foreach ($comments->comments as $comments_item) {\n            if($comments_item->type == \"comment\"){\n              $comment = $comments_item->value;\n            }\n          }\n        }\n        log_message('info', \"comment : \" . $comment);\n        $this->load->library('parser');\n        $data = array(\n            'Title' => $title,\n            'Firstname' => $user['firstname'],\n            'Lastname' => $user['lastname'],\n            'StartDate' => $startdate,\n            'EndDate' => $enddate,\n            'StartDateType' => $lang_mail->line($leave['startdatetype']),\n            'EndDateType' => $lang_mail->line($leave['enddatetype']),\n            'Type' => $this->types_model->getName($leave['type']),\n            'Duration' => $leave['duration'],\n            'Balance' => $this->leaves_model->getLeavesTypeBalanceForEmployee($leave['employee'] , $leave['type_name'], $leave['startdate']),\n            'Reason' => $leave['cause'],\n            'BaseUrl' => $this->config->base_url(),\n            'LeaveId' => $leave['id'],\n            'UserId' => $this->user_id,\n            'Comments' => $comment\n        );\n        $message = $this->parser->parse('emails/' . $manager['language'] . '/'.$emailModel, $data, TRUE);\n\n        $to = $manager['email'];\n        $subject = $detailledSubject . ' ' . $user['firstname'] . ' ' . $user['lastname'];\n        //Copy to the delegates, if any\n        $cc = NULL;\n        $delegates = $this->delegations_model->listMailsOfDelegates($manager['id']);\n        if ($delegates != '') {\n            $cc = $delegates;\n        }\n\n        sendMailByWrapper($this, $subject, $message, $to, $cc);\n    }\n\n    /**\n     * Delete a leave request\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function delete($id) {\n        $can_delete = FALSE;\n        //Test if the leave request exists\n        $leaves = $this->leaves_model->getLeaves($id);\n        if (empty($leaves)) {\n            redirect('notfound');\n        } else {\n            if ($this->is_hr) {\n                $can_delete = TRUE;\n            } else {\n                if (($leaves['status'] == LMS_PLANNED) &&\n                        $leaves['employee'] == $this->user_id) {\n                    $can_delete = TRUE;\n                }\n                if ($this->config->item('delete_rejected_requests') == TRUE ||\n                    $leaves['status'] == LMS_REJECTED) {\n                    $can_delete = TRUE;\n                }\n            }\n            if ($can_delete === TRUE) {\n                $this->leaves_model->deleteLeave($id);\n            } else {\n                $this->session->set_flashdata('msg', lang('leaves_delete_flash_msg_error'));\n                if (isset($_GET['source'])) {\n                    redirect($_GET['source']);\n                } else {\n                    redirect('leaves');\n                }\n            }\n        }\n        $this->session->set_flashdata('msg', lang('leaves_delete_flash_msg_success'));\n        if (isset($_GET['source'])) {\n            redirect($_GET['source']);\n        } else {\n            redirect('leaves');\n        }\n    }\n\n    /**\n     * Ask for the cancellation of a leave request. Extend the workflow with\n     * cancellation and canceled steps.\n     * Change of behavior (compared to prior versions):\n     *  - Manager and HR do not cancel leave requests, they reject them.\n     *  - Only the connected user can reject its own requests.\n     *  - If the cancellation request is accepted, it goes on accepted\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function cancellation($id) {\n        //Test if the leave request exists\n        $leave = $this->leaves_model->getLeaves($id);\n        if (empty($leave)) {\n            redirect('notfound');\n        } else {\n            //Only the connected user can reject its own requests\n            if ($this->user_id != $leave['employee']){\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n            //We can cancel a leave request only with a status 'Accepted'\n            if ($leave['status'] == LMS_ACCEPTED) {\n                $this->leaves_model->switchStatus($id, LMS_CANCELLATION);\n                $this->sendMailOnLeaveRequestCancellation($id);\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_success'));\n                redirect('leaves');\n            } else {\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n        }\n    }\n\n    /**\n     * Allows the employee to cancel a requested leave request.\n     * Only the connected user can reject its own requests.\n     * Send a notification to the line manager.\n     * Next status is 'Canceled'\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function cancel($id) {\n        //Test if the leave request exists\n        $leave = $this->leaves_model->getLeaves($id);\n        if (empty($leave)) {\n            redirect('notfound');\n        } else {\n            //Only the connected user can reject its own requests\n            if ($this->user_id != $leave['employee']){\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n            //We can cancel a leave request only with a status 'Requested'\n            if ($leave['status'] == LMS_REQUESTED) {\n                $this->leaves_model->switchStatus($id, LMS_CANCELED);\n                $this->sendMailOnLeaveRequestCanceled($id);\n                $this->session->set_flashdata('msg', lang('requests_cancellation_accept_flash_msg_success'));\n                redirect('leaves');\n            } else {\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n        }\n    }\n\n    /**\n     * Export the list of all leaves into an Excel file\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function export() {\n        $this->load->view('leaves/export');\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @param int $id employee id or connected user (from session)\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function individual($id = 0) {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        if ($id == 0) $id =$this->session->userdata('id');\n        echo $this->leaves_model->individual($id, $start, $end);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function workmates() {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        echo $this->leaves_model->workmates($this->session->userdata('manager'), $start, $end);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function collaborators() {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        echo $this->leaves_model->collaborators($this->user_id, $start, $end);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @param int $entity_id Entity identifier\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function organization($entity_id) {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        $children = filter_var($this->input->get('children', TRUE), FILTER_VALIDATE_BOOLEAN);\n        $statuses = $this->input->get('statuses');\n        echo $this->leaves_model->department($entity_id, $start, $end, $children, $statuses);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @param int $list_id List identifier\n     * @author Emilien NICOLAS <milihhard1996@gmail.com>\n     */\n    public function listEvents($list_id){\n      header(\"Content-Type: application/json\");\n      $start = $this->input->get('start', TRUE);\n      $end = $this->input->get('end', TRUE);\n      $statuses = $this->input->get('statuses');\n      echo $this->leaves_model->getListRequest($list_id, $start, $end, $statuses);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function department() {\n        header(\"Content-Type: application/json\");\n        $this->load->model('organization_model');\n        $department = $this->organization_model->getDepartment($this->user_id);\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        echo $this->leaves_model->department($department->id, $start, $end);\n    }\n\n    /**\n     * Ajax endpoint. Result varies according to input :\n     *  - difference between the entitled and the taken days\n     *  - try to calculate the duration of the leave\n     *  - try to detect overlapping leave requests\n     *  If the user is linked to a contract, returns end date of the yearly leave period or NULL\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function validate() {\n        header(\"Content-Type: application/json\");\n        $id = $this->input->post('id', TRUE);\n        $type = $this->input->post('type', TRUE);\n        //The above parameters could cause an SQL injection vulnerability due to the non standard\n        //SQL query in leave_model::detectOverlappingLeaves\n        $date = $this->input->post('startdate', TRUE);\n        $d = DateTime::createFromFormat('Y-m-d', $date);\n        $startdate = ($d && $d->format('Y-m-d') === $date)?$date:'1970-01-01';\n        $date = $this->input->post('enddate', TRUE);\n        $d = DateTime::createFromFormat('Y-m-d', $date);\n        $enddate = ($d && $d->format('Y-m-d') === $date)?$date:'1970-01-01';\n        $startdatetype = $this->input->post('startdatetype', TRUE);     //Mandatory field checked by frontend\n        $enddatetype = $this->input->post('enddatetype', TRUE);       //Mandatory field checked by frontend\n        $leave_id = $this->input->post('leave_id', TRUE);\n        $leaveValidator = new stdClass;\n        $deductDayOff = FALSE;\n        if (isset($id) && isset($type)) {\n            $typeObject = $this->types_model->getTypeByName($type);\n            $deductDayOff = $typeObject['deduct_days_off'];\n            if (isset($startdate) && $startdate !== \"\") {\n                $leaveValidator->credit = $this->leaves_model->getLeavesTypeBalanceForEmployee($id, $type, $startdate);\n            } else {\n                $leaveValidator->credit = $this->leaves_model->getLeavesTypeBalanceForEmployee($id, $type);\n            }\n        }\n        if (isset($id) && isset($startdate) && isset($enddate)) {\n            if (isset($leave_id)) {\n                $leaveValidator->overlap = $this->leaves_model->detectOverlappingLeaves($id, $startdate, $enddate, $startdatetype, $enddatetype, $leave_id);\n            } else {\n                $leaveValidator->overlap = $this->leaves_model->detectOverlappingLeaves($id, $startdate, $enddate, $startdatetype, $enddatetype);\n            }\n        }\n\n        //Returns end date of the yearly leave period or NULL if the user is not linked to a contract\n        $this->load->model('contracts_model');\n        $startentdate = NULL;\n        $endentdate = NULL;\n        $hasContract = $this->contracts_model->getBoundaries($id, $startentdate, $endentdate);\n        $leaveValidator->PeriodStartDate = $startentdate;\n        $leaveValidator->PeriodEndDate = $endentdate;\n        $leaveValidator->hasContract = $hasContract;\n\n        //Add non working days between the two dates (including their type: morning, afternoon and all day)\n        if (isset($id) && ($startdate!='') && ($enddate!='')  && $hasContract===TRUE) {\n            $this->load->model('dayoffs_model');\n            $leaveValidator->listDaysOff = $this->dayoffs_model->listOfDaysOffBetweenDates($id, $startdate, $enddate);\n            //Sum non-working days and overlapping with day off detection\n            $result = $this->leaves_model->actualLengthAndDaysOff($id, $startdate, $enddate, $startdatetype, $enddatetype, $leaveValidator->listDaysOff, $deductDayOff);\n            $leaveValidator->overlapDayOff = $result['overlapping'];\n            $leaveValidator->lengthDaysOff = $result['daysoff'];\n            $leaveValidator->length = $result['length'];\n        }\n        //If the user has no contract, simply compute a date difference between start and end dates\n        if (isset($id) && isset($startdate) && isset($enddate)  && $hasContract===FALSE) {\n            $leaveValidator->length = $this->leaves_model->length($id, $startdate, $enddate, $startdatetype, $enddatetype);\n        }\n\n        //Repeat start and end dates of the leave request\n        $leaveValidator->RequestStartDate = $startdate;\n        $leaveValidator->RequestEndDate = $enddate;\n\n        echo json_encode($leaveValidator);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * This controller contains the actions allowing an employee to list and manage its leave requests\n * @copyright  Copyright (c) 2014-2019 Benjamin BALET\n * @license      http://opensource.org/licenses/AGPL-3.0 AGPL-3.0\n * @link            https://github.com/bbalet/jorani\n * @since         0.1.0\n */\n\nif (!defined('BASEPATH')) { exit('No direct script access allowed'); }\n\n//We can define custom triggers before saving the leave request into the database\nrequire_once FCPATH . \"local/triggers/leave.php\";\n\n/**\n * This class allows an employee to list and manage its leave requests\n * Since 0.4.3 a trigger is called at the creation, if the function triggerCreateLeaveRequest is defined\n * see content of /local/triggers/leave.php\n */\nclass Leaves extends CI_Controller {\n\n    /**\n     * Default constructor\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function __construct() {\n        parent::__construct();\n        setUserContext($this);\n        $this->load->model('leaves_model');\n        $this->load->model('types_model');\n        $this->lang->load('leaves', $this->language);\n        $this->lang->load('global', $this->language);\n    }\n\n    /**\n     * Display the list of the leave requests of the connected user\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function index() {\n        $this->auth->checkIfOperationIsAllowed('list_leaves');\n        $data = getUserContext($this);\n        $this->lang->load('datatable', $this->language);\n        if ($this->config->item('enable_history') == TRUE){\n          $data['leaves'] = $this->leaves_model->getLeavesOfEmployeeWithHistory($this->session->userdata('id'));\n        } else {\n          $data['leaves'] = $this->leaves_model->getLeavesOfEmployee($this->session->userdata('id'));\n        }\n        $data['types'] = $this->types_model->getTypes();\n        $data['title'] = lang('leaves_index_title');\n        $data['help'] = $this->help->create_help_link('global_link_doc_page_leave_requests_list');\n        $data['flash_partial_view'] = $this->load->view('templates/flash', $data, TRUE);\n        $this->load->view('templates/header', $data);\n        $this->load->view('menu/index', $data);\n        $this->load->view('leaves/index', $data);\n        $this->load->view('templates/footer');\n    }\n\n    /**\n     * Display the history of changes of a leave request\n     * @param int $id Identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function history($id) {\n        $this->auth->checkIfOperationIsAllowed('list_leaves');\n        $data = getUserContext($this);\n        $this->lang->load('datatable', $this->language);\n        $data['leave'] = $this->leaves_model->getLeaves($id);\n        $this->load->model('history_model');\n        $data['events'] = $this->history_model->getLeaveRequestsHistory($id);\n        $this->load->view('leaves/history', $data);\n    }\n\n    /**\n     * Display the details of leaves taken/entitled for the connected user\n     * @param string $refDate Date (e.g. 2011-10-05)\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function counters($refDate = NULL) {\n        $this->auth->checkIfOperationIsAllowed('counters_leaves');\n        $data = getUserContext($this);\n        $this->lang->load('datatable', $this->language);\n        if ($refDate != NULL) {\n            $data['isDefault'] = 0;\n        } else {\n            $refDate = date(\"Y-m-d\");\n            $data['isDefault'] = 1;\n        }\n        $data['refDate'] = $refDate;\n        $data['summary'] = $this->leaves_model->getLeaveBalanceForEmployee($this->user_id, FALSE, $refDate);\n\n        if (!is_null($data['summary'])) {\n            $data['title'] = lang('leaves_summary_title');\n            $data['help'] = $this->help->create_help_link('global_link_doc_page_my_summary');\n            $this->load->view('templates/header', $data);\n            $this->load->view('menu/index', $data);\n            $this->load->view('leaves/counters', $data);\n            $this->load->view('templates/footer');\n        } else {\n            $this->session->set_flashdata('msg', lang('leaves_summary_flash_msg_error'));\n            redirect('leaves');\n        }\n    }\n\n    /**\n     * Display a leave request\n     * @param string $source Page source (leaves, requests) (self, manager)\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function view($source, $id) {\n        $this->auth->checkIfOperationIsAllowed('view_leaves');\n        $this->load->model('users_model');\n        $this->load->model('status_model');\n        $this->load->helper('form');\n        $data = getUserContext($this);\n        $data['leave'] = $this->leaves_model->getLeaveWithComments($id);\n        if (empty($data['leave'])) {\n            redirect('notfound');\n        }\n        //If the user is not its not HR, not manager and not the creator of the leave\n        //the employee can't see it, redirect to LR list\n        if ($data['leave']['employee'] != $this->user_id) {\n            if ((!$this->is_hr)) {\n                $this->load->model('users_model');\n                $employee = $this->users_model->getUsers($data['leave']['employee']);\n                if ($employee['manager'] != $this->user_id) {\n                    $this->load->model('delegations_model');\n                    if (!$this->delegations_model->isDelegateOfManager($this->user_id, $employee['manager'])) {\n                        log_message('error', 'User #' . $this->user_id . ' illegally tried to view leave #' . $id);\n                        redirect('leaves');\n                    }\n                }\n            } //Admin\n        } //Current employee\n        $data['source'] = $source;\n        //overwrite source (for taking into account the tabular calendar)\n        if ($this->input->get('source') != NULL) {\n            $data['source'] = urldecode($this->input->get('source'));\n        }\n\n        $data['title'] = lang('leaves_view_html_title');\n        if ($source == 'requests') {\n            if (empty($employee)) {\n                $this->load->model('users_model');\n                $data['name'] = $this->users_model->getName($data['leave']['employee']);\n            } else {\n                $data['name'] = $employee['firstname'] . ' ' . $employee['lastname'];\n            }\n        } else {\n            $data['name'] = '';\n        }\n        if (isset($data[\"leave\"][\"comments\"])){\n          $last_comment = new stdClass();;\n          foreach ($data[\"leave\"][\"comments\"]->comments as $comments_item) {\n            if($comments_item->type == \"comment\"){\n              $comments_item->author = $this->users_model->getName($comments_item->author);\n              $comments_item->in = \"in\";\n              $last_comment->in=\"\";\n              $last_comment=$comments_item;\n            } else if($comments_item->type == \"change\"){\n              $comments_item->status = $this->status_model->getName($comments_item->status_number);\n            }\n          }\n        }\n        $this->load->view('templates/header', $data);\n        $this->load->view('menu/index', $data);\n        $this->load->view('leaves/view', $data);\n        $this->load->view('templates/footer');\n    }\n\n    /**\n     * Create a new comment or append a comment to the comments\n     * on a leave request\n     * @param int $id Id of the leave request\n     * @param string $source Page where we redirect after posting\n     * @author Emilien NICOLAS <milihhard1996@gmail.com>\n     */\n    public function createComment($id, $source = \"leaves/leaves\"){\n      $this->auth->checkIfOperationIsAllowed('view_leaves');\n      $data = getUserContext($this);\n      $oldComment = $this->leaves_model->getCommentsLeave($id);\n      $newComment = new stdClass;\n      $newComment->type = \"comment\";\n      $newComment->author = $this->session->userdata('id');\n      $newComment->value = $this->input->post('comment', TRUE);\n      $newComment->date = date(\"Y-n-j\");\n      if ($oldComment != NULL){\n        array_push($oldComment->comments, $newComment);\n      }else {\n        $oldComment = new stdClass;\n        $oldComment->comments = array($newComment);\n      }\n      $json = json_encode($oldComment);\n      $this->leaves_model->addComments($id, $json);\n      if(isset($_GET['source'])){\n        $source = $_GET['source'];\n      }\n      redirect(\"/$source/$id\");\n    }\n\n    /**\n     * Create a leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function create() {\n        $this->auth->checkIfOperationIsAllowed('create_leaves');\n        $data = getUserContext($this);\n        $this->load->helper('form');\n        $this->load->library('form_validation');\n        $data['title'] = lang('leaves_create_title');\n        $data['help'] = $this->help->create_help_link('global_link_doc_page_request_leave');\n\n        $this->form_validation->set_rules('startdate', lang('leaves_create_field_start'), 'required|strip_tags');\n        $this->form_validation->set_rules('startdatetype', 'Start Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('enddate', lang('leaves_create_field_end'), 'required|strip_tags');\n        $this->form_validation->set_rules('enddatetype', 'End Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('duration', lang('leaves_create_field_duration'), 'required|strip_tags');\n        $this->form_validation->set_rules('type', lang('leaves_create_field_type'), 'required|strip_tags');\n        $this->form_validation->set_rules('cause', lang('leaves_create_field_cause'), 'strip_tags');\n        $this->form_validation->set_rules('status', lang('leaves_create_field_status'), 'required|strip_tags');\n\n        if ($this->form_validation->run() === FALSE) {\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($this->session->userdata('id'));\n            $data['defaultType'] = $leaveTypesDetails->defaultType;\n            $data['credit'] = $leaveTypesDetails->credit;\n            $data['types'] = $leaveTypesDetails->types;\n            $this->load->view('templates/header', $data);\n            $this->load->view('menu/index', $data);\n            $this->load->view('leaves/create');\n            $this->load->view('templates/footer');\n        } else {\n          //Prevent thugs to auto validate their leave requests\n          if (!$this->is_hr && !$this->is_admin) {\n            if ($this->input->post('status') > LMS_REQUESTED) {\n                log_message('error', 'User #' . $this->session->userdata('id') . \n                    ' tried to submit a LR with an wrong status = ' . $this->input->post('status'));\n                $_POST['status'] = LMS_REQUESTED;\n            }\n          }\n          \n            //Users must use an existing leave type, otherwise\n            //force leave type to default leave type\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($this->session->userdata('id'));\n            if (!array_key_exists($this->input->post('type'), $leaveTypesDetails->types)) {\n                log_message('error', 'User #' . $this->session->userdata('id') . ' tried to submit an wrong LR type = ' . \n                $this->input->post('type'));\n                $_POST['type'] = $leaveTypesDetails->defaultType;\n                log_message('debug', 'LR type forced to ' . $leaveTypesDetails->defaultType); \n            }\n\n          if (function_exists('triggerCreateLeaveRequest')) {\n              triggerCreateLeaveRequest($this);\n          }\n          $leave_id = $this->leaves_model->setLeaves($this->session->userdata('id'));\n          $this->session->set_flashdata('msg', lang('leaves_create_flash_msg_success'));\n\n          //If the status is requested, send an email to the manager\n          if ($this->input->post('status') == LMS_REQUESTED) {\n              $this->sendMailOnLeaveRequestCreation($leave_id);\n          }\n          if (isset($_GET['source'])) {\n              redirect($_GET['source']);\n          } else {\n              redirect('leaves');\n          }\n        }\n    }\n\n    /**\n     * Edit a leave request\n     * @param int $id Identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function edit($id) {\n        $this->auth->checkIfOperationIsAllowed('edit_leaves');\n        $this->load->model('users_model');\n        $this->load->model('status_model');\n        $data = getUserContext($this);\n        $data['leave'] = $this->leaves_model->getLeaveWithComments($id);\n        //Check if exists\n        if (empty($data['leave'])) {\n            redirect('notfound');\n        }\n        //If the user is not its own manager and if the leave is\n        //already requested, the employee can't modify it\n        if (!$this->is_hr) {\n            if (($this->session->userdata('manager') != $this->user_id) &&\n                    $data['leave']['status'] != LMS_PLANNED) {\n                if ($this->config->item('edit_rejected_requests') == FALSE ||\n                    $data['leave']['status'] != LMS_REJECTED) {//Configuration switch that allows editing the rejected leave requests\n                    log_message('error', 'User #' . $this->user_id . ' illegally tried to edit leave #' . $id);\n                    $this->session->set_flashdata('msg', lang('leaves_edit_flash_msg_error'));\n                    redirect('leaves');\n                 }\n            }\n        } //Admin\n\n        $this->load->helper('form');\n        $this->load->library('form_validation');\n        $this->form_validation->set_rules('startdate', lang('leaves_edit_field_start'), 'required|strip_tags');\n        $this->form_validation->set_rules('startdatetype', 'Start Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('enddate', lang('leaves_edit_field_end'), 'required|strip_tags');\n        $this->form_validation->set_rules('enddatetype', 'End Date type', 'required|strip_tags');\n        $this->form_validation->set_rules('duration', lang('leaves_edit_field_duration'), 'required|strip_tags');\n        $this->form_validation->set_rules('type', lang('leaves_edit_field_type'), 'required|strip_tags');\n        $this->form_validation->set_rules('cause', lang('leaves_edit_field_cause'), 'strip_tags');\n        $this->form_validation->set_rules('status', lang('leaves_edit_field_status'), 'required|strip_tags');\n\n        if ($this->form_validation->run() === FALSE) {\n            $data['title'] = lang('leaves_edit_html_title');\n            $data['help'] = $this->help->create_help_link('global_link_doc_page_request_leave');\n            $data['id'] = $id;\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($data['leave']['employee'], $data['leave']['type']);\n            $data['defaultType'] = $leaveTypesDetails->defaultType;\n            $data['credit'] = $leaveTypesDetails->credit;\n            $data['types'] = $leaveTypesDetails->types;\n            $this->load->model('users_model');\n            $data['name'] = $this->users_model->getName($data['leave']['employee']);\n            if (isset($data[\"leave\"][\"comments\"])){\n              $last_comment = new stdClass();;\n              foreach ($data[\"leave\"][\"comments\"]->comments as $comments_item) {\n                if($comments_item->type == \"comment\"){\n                  $comments_item->author = $this->users_model->getName($comments_item->author);\n                  $comments_item->in = \"in\";\n                  $last_comment->in=\"\";\n                  $last_comment=$comments_item;\n                } else if($comments_item->type == \"change\"){\n                  $comments_item->status = $this->status_model->getName($comments_item->status_number);\n                }\n              }\n            }\n            $this->load->view('templates/header', $data);\n            $this->load->view('menu/index', $data);\n            $this->load->view('leaves/edit', $data);\n            $this->load->view('templates/footer');\n        } else {\n          //Prevent thugs to auto validate their leave requests\n          if (!$this->is_hr && !$this->is_admin) {\n            if ($this->input->post('status') == LMS_ACCEPTED) {\n                log_message('error', 'User #' . $this->session->userdata('id') . \n                    ' tried to submit a LR with an wrong status = ' . $this->input->post('status'));\n                $_POST['status'] = LMS_REQUESTED;\n            }\n            if ($this->input->post('status') == LMS_CANCELED) {\n                log_message('error', 'User #' . $this->session->userdata('id') . \n                    ' tried to submit a LR with an wrong status = ' . $this->input->post('status'));\n                $_POST['status'] = LMS_CANCELLATION;\n            }\n          }\n\n            //Users must use an existing leave type, otherwise\n            //force leave type to default leave type\n            $this->load->model('contracts_model');\n            $leaveTypesDetails = $this->contracts_model->getLeaveTypesDetailsOTypesForUser($this->session->userdata('id'));\n            if (!array_key_exists($this->input->post('type'), $leaveTypesDetails->types)) {\n                log_message('error', 'User #' . $this->session->userdata('id') . ' tried to submit an wrong LR type = ' . \n                $this->input->post('type'));\n                $_POST['type'] = $leaveTypesDetails->defaultType;\n                log_message('debug', 'LR type forced to ' . $leaveTypesDetails->defaultType); \n            }\n\n            $this->leaves_model->updateLeaves($id);       //We don't use the return value\n            $this->session->set_flashdata('msg', lang('leaves_edit_flash_msg_success'));\n            //If the status is requested or cancellation, send an email to the manager\n            if ($this->input->post('status') == LMS_REQUESTED) {\n                $this->sendMailOnLeaveRequestCreation($id);\n            }\n            if ($this->input->post('status') == LMS_CANCELLATION) {\n                $this->sendMailOnLeaveRequestCreation($id);\n            }\n            if (isset($_GET['source'])) {\n                redirect($_GET['source']);\n            } else {\n                redirect('leaves');\n            }\n        }\n    }\n\n    /**\n     * change a the status of a planned request to  requested\n     * @param int $id id of the leave\n     * @author Emilien NICOLAS <milihhard1996@gmail.com>\n     */\n     public function requestLeave($id){\n       $leave = $this->leaves_model->getLeaves($id);\n       if (empty($leave)) {\n           redirect('notfound');\n       } else {\n           //Only the connected user can reject its own requests\n           if ($this->user_id != $leave['employee']){\n               $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n               redirect('leaves');\n           }\n           //We can cancel a leave request only with a status 'Accepted'\n           if ($leave['status'] == LMS_PLANNED) {\n               $this->leaves_model->switchStatus($id, LMS_REQUESTED);\n               $this->sendMailOnLeaveRequestCreation($id);\n               $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_success'));\n               redirect('leaves');\n           } else {\n               $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n               redirect('leaves');\n           }\n       }\n     }\n\n    /**\n     * Send an email reminder (so as to remind to the manager that he\n     * must either accept/reject a request or a cancellation)\n     * @param int $id Identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function reminder($id) {\n        $this->auth->checkIfOperationIsAllowed('create_leaves');\n        $data = getUserContext($this);\n        $leave = $this->leaves_model->getLeaves($id);\n        switch($leave['status']) {\n            case LMS_REQUESTED: //Requested\n                $this->sendMailOnLeaveRequestCreation($id, TRUE);\n                break;\n            case LMS_CANCELLATION: //Cancellation\n                $this->sendMailOnLeaveRequestCancellation($id, TRUE);\n                break;\n        }\n        $this->session->set_flashdata('msg', lang('leaves_reminder_flash_msg_success'));\n        if (isset($_GET['source'])) {\n            redirect($_GET['source']);\n        } else {\n            redirect('leaves');\n        }\n    }\n\n    /**\n     * Send a leave request creation email to the manager of the connected employee\n     * @param int $id Leave request identifier\n     * @param int $reminder In case where the employee wants to send a reminder\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    private function sendMailOnLeaveRequestCreation($id, $reminder=FALSE) {\n        $this->load->model('users_model');\n        $this->load->model('types_model');\n        $this->load->model('delegations_model');\n        //We load everything from DB as the LR can be edited from HR/Employees\n        $leave = $this->leaves_model->getLeaves($id);\n        $user = $this->users_model->getUsers($leave['employee']);\n        $manager = $this->users_model->getUsers($user['manager']);\n        if (empty($manager['email'])) {\n            $this->session->set_flashdata('msg', lang('leaves_create_flash_msg_error'));\n        } else {\n            //Send an e-mail to the manager\n            $this->load->library('email');\n            $this->load->library('polyglot');\n            $usr_lang = $this->polyglot->code2language($manager['language']);\n\n            //We need to instance an different object as the languages of connected user may differ from the UI lang\n            $lang_mail = new CI_Lang();\n            $lang_mail->load('email', $usr_lang);\n            $lang_mail->load('global', $usr_lang);\n\n            if ($reminder) {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_creation_title'),\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_creation_subject'),\n                    'request');\n            } else {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_creation_title'),\n                    $lang_mail->line('email_leave_request_creation_subject'),\n                    'request');\n            }\n        }\n    }\n\n    /**\n     * Send a notification to the manager of the connected employee when the\n     * leave request has been canceled by its collaborator.\n     * @param int $id Leave request identifier\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    private function sendMailOnLeaveRequestCanceled($id) {\n        $this->load->model('users_model');\n        $this->load->model('types_model');\n        $this->load->model('delegations_model');\n        //We load everything from DB as the LR can be edited from HR/Employees\n        $leave = $this->leaves_model->getLeaves($id);\n        $user = $this->users_model->getUsers($leave['employee']);\n        $manager = $this->users_model->getUsers($user['manager']);\n        if (empty($manager['email'])) {\n            //TODO: create specific error message when the employee has no manager\n            $this->session->set_flashdata('msg', lang('leaves_cancel_flash_msg_error'));\n        } else {\n            //Send an e-mail to the manager\n            $this->load->library('email');\n            $this->load->library('polyglot');\n            $usr_lang = $this->polyglot->code2language($manager['language']);\n\n            //We need to instance an different object as the languages of connected user may differ from the UI lang\n            $lang_mail = new CI_Lang();\n            $lang_mail->load('email', $usr_lang);\n            $lang_mail->load('global', $usr_lang);\n\n            $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                $lang_mail->line('email_leave_request_cancellation_title'),\n                $lang_mail->line('email_leave_request_cancellation_subject'),\n                'cancelled');\n        }\n    }\n\n    /**\n     * Send a leave request cancellation email to the manager of the connected employee\n     * @param int $id Leave request identifier\n     * @param int $reminder In case where the employee wants to send a reminder\n     * @author Guillaume Blaquiere <guillaume.blaquiere@gmail.com>\n     */\n    private function sendMailOnLeaveRequestCancellation($id, $reminder=FALSE) {\n        $this->load->model('users_model');\n        $this->load->model('types_model');\n        $this->load->model('delegations_model');\n        //We load everything from DB as the LR can be edited from HR/Employees\n        $leave = $this->leaves_model->getLeaves($id);\n        $user = $this->users_model->getUsers($leave['employee']);\n        $manager = $this->users_model->getUsers($user['manager']);\n        if (empty($manager['email'])) {\n            $this->session->set_flashdata('msg', lang('leaves_cancel_flash_msg_error'));\n        } else {\n            //Send an e-mail to the manager\n            $this->load->library('email');\n            $this->load->library('polyglot');\n            $usr_lang = $this->polyglot->code2language($manager['language']);\n\n            //We need to instance an different object as the languages of connected user may differ from the UI lang\n            $lang_mail = new CI_Lang();\n            $lang_mail->load('email', $usr_lang);\n            $lang_mail->load('global', $usr_lang);\n\n            if ($reminder) {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_cancellation_title'),\n                    $lang_mail->line('email_leave_request_reminder') . ' ' .\n                    $lang_mail->line('email_leave_request_cancellation_subject'),\n                    'request');\n            } else {\n                $this->sendGenericMail($leave, $user, $manager, $lang_mail,\n                    $lang_mail->line('email_leave_request_cancellation_title'),\n                    $lang_mail->line('email_leave_request_cancellation_subject'),\n                    'cancel');\n            }\n        }\n    }\n\n    /**\n     * Send a generic email from the collaborator to the manager (delegate in copy) when a leave request is created or cancelled\n     * @param $leave Leave request\n     * @param $user Connected employee\n     * @param $manager Manger of connected employee\n     * @param $lang_mail Email language library\n     * @param $title Email Title\n     * @param $detailledSubject Email detailled Subject\n     * @param $emailModel template email to use\n     * @author Guillaume Blaquiere <guillaume.blaquiere@gmail.com>\n     *\n     */\n    private function sendGenericMail($leave, $user, $manager, $lang_mail, $title, $detailledSubject, $emailModel) {\n\n        $date = new DateTime($leave['startdate']);\n        $startdate = $date->format($lang_mail->line('global_date_format'));\n        $date = new DateTime($leave['enddate']);\n        $enddate = $date->format($lang_mail->line('global_date_format'));\n\n        $comments=$leave['comments'];\n        $comment = '';\n        if(!empty($comments)){\n          $comments=json_decode($comments);\n          foreach ($comments->comments as $comments_item) {\n            if($comments_item->type == \"comment\"){\n              $comment = $comments_item->value;\n            }\n          }\n        }\n        log_message('info', \"comment : \" . $comment);\n        $this->load->library('parser');\n        $data = array(\n            'Title' => $title,\n            'Firstname' => $user['firstname'],\n            'Lastname' => $user['lastname'],\n            'StartDate' => $startdate,\n            'EndDate' => $enddate,\n            'StartDateType' => $lang_mail->line($leave['startdatetype']),\n            'EndDateType' => $lang_mail->line($leave['enddatetype']),\n            'Type' => $this->types_model->getName($leave['type']),\n            'Duration' => $leave['duration'],\n            'Balance' => $this->leaves_model->getLeavesTypeBalanceForEmployee($leave['employee'] , $leave['type_name'], $leave['startdate']),\n            'Reason' => $leave['cause'],\n            'BaseUrl' => $this->config->base_url(),\n            'LeaveId' => $leave['id'],\n            'UserId' => $this->user_id,\n            'Comments' => $comment\n        );\n        $message = $this->parser->parse('emails/' . $manager['language'] . '/'.$emailModel, $data, TRUE);\n\n        $to = $manager['email'];\n        $subject = $detailledSubject . ' ' . $user['firstname'] . ' ' . $user['lastname'];\n        //Copy to the delegates, if any\n        $cc = NULL;\n        $delegates = $this->delegations_model->listMailsOfDelegates($manager['id']);\n        if ($delegates != '') {\n            $cc = $delegates;\n        }\n\n        sendMailByWrapper($this, $subject, $message, $to, $cc);\n    }\n\n    /**\n     * Delete a leave request\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function delete($id) {\n        $can_delete = FALSE;\n        //Test if the leave request exists\n        $leaves = $this->leaves_model->getLeaves($id);\n        if (empty($leaves)) {\n            redirect('notfound');\n        } else {\n            if ($this->is_hr) {\n                $can_delete = TRUE;\n            } else {\n                if (($leaves['status'] == LMS_PLANNED) &&\n                        $leaves['employee'] == $this->user_id) {\n                    $can_delete = TRUE;\n                }\n                if ($this->config->item('delete_rejected_requests') == TRUE ||\n                    $leaves['status'] == LMS_REJECTED) {\n                    $can_delete = TRUE;\n                }\n            }\n            if ($can_delete === TRUE) {\n                $this->leaves_model->deleteLeave($id);\n            } else {\n                $this->session->set_flashdata('msg', lang('leaves_delete_flash_msg_error'));\n                if (isset($_GET['source'])) {\n                    redirect($_GET['source']);\n                } else {\n                    redirect('leaves');\n                }\n            }\n        }\n        $this->session->set_flashdata('msg', lang('leaves_delete_flash_msg_success'));\n        if (isset($_GET['source'])) {\n            redirect($_GET['source']);\n        } else {\n            redirect('leaves');\n        }\n    }\n\n    /**\n     * Ask for the cancellation of a leave request. Extend the workflow with\n     * cancellation and canceled steps.\n     * Change of behavior (compared to prior versions):\n     *  - Manager and HR do not cancel leave requests, they reject them.\n     *  - Only the connected user can reject its own requests.\n     *  - If the cancellation request is accepted, it goes on accepted\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function cancellation($id) {\n        //Test if the leave request exists\n        $leave = $this->leaves_model->getLeaves($id);\n        if (empty($leave)) {\n            redirect('notfound');\n        } else {\n            //Only the connected user can reject its own requests\n            if ($this->user_id != $leave['employee']){\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n            //We can cancel a leave request only with a status 'Accepted'\n            if ($leave['status'] == LMS_ACCEPTED) {\n                $this->leaves_model->switchStatus($id, LMS_CANCELLATION);\n                $this->sendMailOnLeaveRequestCancellation($id);\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_success'));\n                redirect('leaves');\n            } else {\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n        }\n    }\n\n    /**\n     * Allows the employee to cancel a requested leave request.\n     * Only the connected user can reject its own requests.\n     * Send a notification to the line manager.\n     * Next status is 'Canceled'\n     * @param int $id identifier of the leave request\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function cancel($id) {\n        //Test if the leave request exists\n        $leave = $this->leaves_model->getLeaves($id);\n        if (empty($leave)) {\n            redirect('notfound');\n        } else {\n            //Only the connected user can reject its own requests\n            if ($this->user_id != $leave['employee']){\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n            //We can cancel a leave request only with a status 'Requested'\n            if ($leave['status'] == LMS_REQUESTED) {\n                $this->leaves_model->switchStatus($id, LMS_CANCELED);\n                $this->sendMailOnLeaveRequestCanceled($id);\n                $this->session->set_flashdata('msg', lang('requests_cancellation_accept_flash_msg_success'));\n                redirect('leaves');\n            } else {\n                $this->session->set_flashdata('msg', lang('leaves_cancellation_flash_msg_error'));\n                redirect('leaves');\n            }\n        }\n    }\n\n    /**\n     * Export the list of all leaves into an Excel file\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function export() {\n        $this->load->view('leaves/export');\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @param int $id employee id or connected user (from session)\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function individual($id = 0) {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        if ($id == 0) $id =$this->session->userdata('id');\n        echo $this->leaves_model->individual($id, $start, $end);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function workmates() {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        echo $this->leaves_model->workmates($this->session->userdata('manager'), $start, $end);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function collaborators() {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        echo $this->leaves_model->collaborators($this->user_id, $start, $end);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @param int $entity_id Entity identifier\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function organization($entity_id) {\n        header(\"Content-Type: application/json\");\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        $children = filter_var($this->input->get('children', TRUE), FILTER_VALIDATE_BOOLEAN);\n        $statuses = $this->input->get('statuses');\n        echo $this->leaves_model->department($entity_id, $start, $end, $children, $statuses);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @param int $list_id List identifier\n     * @author Emilien NICOLAS <milihhard1996@gmail.com>\n     */\n    public function listEvents($list_id){\n      header(\"Content-Type: application/json\");\n      $start = $this->input->get('start', TRUE);\n      $end = $this->input->get('end', TRUE);\n      $statuses = $this->input->get('statuses');\n      echo $this->leaves_model->getListRequest($list_id, $start, $end, $statuses);\n    }\n\n    /**\n     * Ajax endpoint : Send a list of fullcalendar events\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function department() {\n        header(\"Content-Type: application/json\");\n        $this->load->model('organization_model');\n        $department = $this->organization_model->getDepartment($this->user_id);\n        $start = $this->input->get('start', TRUE);\n        $end = $this->input->get('end', TRUE);\n        echo $this->leaves_model->department($department->id, $start, $end);\n    }\n\n    /**\n     * Ajax endpoint. Result varies according to input :\n     *  - difference between the entitled and the taken days\n     *  - try to calculate the duration of the leave\n     *  - try to detect overlapping leave requests\n     *  If the user is linked to a contract, returns end date of the yearly leave period or NULL\n     * @author Benjamin BALET <benjamin.balet@gmail.com>\n     */\n    public function validate() {\n        header(\"Content-Type: application/json\");\n        $id = $this->input->post('id', TRUE);\n        $type = $this->input->post('type', TRUE);\n        //The above parameters could cause an SQL injection vulnerability due to the non standard\n        //SQL query in leave_model::detectOverlappingLeaves\n        $date = $this->input->post('startdate', TRUE);\n        $d = DateTime::createFromFormat('Y-m-d', $date);\n        $startdate = ($d && $d->format('Y-m-d') === $date)?$date:'1970-01-01';\n        $date = $this->input->post('enddate', TRUE);\n        $d = DateTime::createFromFormat('Y-m-d', $date);\n        $enddate = ($d && $d->format('Y-m-d') === $date)?$date:'1970-01-01';\n        $startdatetype = $this->input->post('startdatetype', TRUE);     //Mandatory field checked by frontend\n        $enddatetype = $this->input->post('enddatetype', TRUE);       //Mandatory field checked by frontend\n        $leave_id = $this->input->post('leave_id', TRUE);\n        $leaveValidator = new stdClass;\n        $deductDayOff = FALSE;\n        if (isset($id) && isset($type)) {\n            $typeObject = $this->types_model->getTypeByName($type);\n            $deductDayOff = $typeObject['deduct_days_off'];\n            if (isset($startdate) && $startdate !== \"\") {\n                $leaveValidator->credit = $this->leaves_model->getLeavesTypeBalanceForEmployee($id, $type, $startdate);\n            } else {\n                $leaveValidator->credit = $this->leaves_model->getLeavesTypeBalanceForEmployee($id, $type);\n            }\n        }\n        if (isset($id) && isset($startdate) && isset($enddate)) {\n            if (isset($leave_id)) {\n                $leaveValidator->overlap = $this->leaves_model->detectOverlappingLeaves($id, $startdate, $enddate, $startdatetype, $enddatetype, $leave_id);\n            } else {\n                $leaveValidator->overlap = $this->leaves_model->detectOverlappingLeaves($id, $startdate, $enddate, $startdatetype, $enddatetype);\n            }\n        }\n\n        //Returns end date of the yearly leave period or NULL if the user is not linked to a contract\n        $this->load->model('contracts_model');\n        $startentdate = NULL;\n        $endentdate = NULL;\n        $hasContract = $this->contracts_model->getBoundaries($id, $startentdate, $endentdate);\n        $leaveValidator->PeriodStartDate = $startentdate;\n        $leaveValidator->PeriodEndDate = $endentdate;\n        $leaveValidator->hasContract = $hasContract;\n\n        //Add non working days between the two dates (including their type: morning, afternoon and all day)\n        if (isset($id) && ($startdate!='') && ($enddate!='')  && $hasContract===TRUE) {\n            $this->load->model('dayoffs_model');\n            $leaveValidator->listDaysOff = $this->dayoffs_model->listOfDaysOffBetweenDates($id, $startdate, $enddate);\n            //Sum non-working days and overlapping with day off detection\n            $result = $this->leaves_model->actualLengthAndDaysOff($id, $startdate, $enddate, $startdatetype, $enddatetype, $leaveValidator->listDaysOff, $deductDayOff);\n            $leaveValidator->overlapDayOff = $result['overlapping'];\n            $leaveValidator->lengthDaysOff = $result['daysoff'];\n            $leaveValidator->length = $result['length'];\n        }\n        //If the user has no contract, simply compute a date difference between start and end dates\n        if (isset($id) && isset($startdate) && isset($enddate)  && $hasContract===FALSE) {\n            $leaveValidator->length = $this->leaves_model->length($id, $startdate, $enddate, $startdatetype, $enddatetype);\n        }\n\n        //Repeat start and end dates of the leave request\n        $leaveValidator->RequestStartDate = $startdate;\n        $leaveValidator->RequestEndDate = $enddate;\n\n        echo json_encode($leaveValidator);\n    }\n}\n"], "filenames": ["application/controllers/Leaves.php"], "buggy_code_start_loc": [185], "buggy_code_end_loc": [186], "fixing_code_start_loc": [185], "fixing_code_end_loc": [186], "type": "CWE-79", "message": "Benjamin BALET Jorani v1.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the Comment parameter at application/controllers/Leaves.php.", "other": {"cve": {"id": "CVE-2022-34133", "sourceIdentifier": "cve@mitre.org", "published": "2022-06-28T00:15:08.360", "lastModified": "2022-07-06T18:54:54.287", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Benjamin BALET Jorani v1.0 was discovered to contain a cross-site scripting (XSS) vulnerability via the Comment parameter at application/controllers/Leaves.php."}, {"lang": "es", "value": "Se ha detectado que Benjamin BALET Jorani versi\u00f3n v1.0, contiene una vulnerabilidad de cross-site scripting (XSS) por medio del par\u00e1metro Comment en el archivo application/controllers/Leaves.php"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jorani_project:jorani:1.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "00665EA7-7D22-4226-801E-ABA4BD94D0D7"}]}]}], "references": [{"url": "https://github.com/bbalet/jorani/commit/3d01cef4ee9cdd70cfe1ac4fd7f5d607dda0d0ca", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/bbalet/jorani/issues/369", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/bbalet/jorani/commit/3d01cef4ee9cdd70cfe1ac4fd7f5d607dda0d0ca"}}