{"buggy_code": ["const {escapeRegExp, size, isString} = require('lodash');\nconst {SECRET_REPLACEMENT, SECRET_MIN_SIZE} = require('./definitions/constants');\n\nmodule.exports = (env) => {\n  const toReplace = Object.keys(env).filter((envVar) => {\n    // https://github.com/semantic-release/semantic-release/issues/1558\n    if (envVar === 'GOPRIVATE') {\n      return false;\n    }\n\n    return /token|password|credential|secret|private/i.test(envVar) && size(env[envVar].trim()) >= SECRET_MIN_SIZE;\n  });\n\n  const regexp = new RegExp(toReplace.map((envVar) => escapeRegExp(env[envVar])).join('|'), 'g');\n  return (output) =>\n    output && isString(output) && toReplace.length > 0 ? output.toString().replace(regexp, SECRET_REPLACEMENT) : output;\n};\n", "const test = require('ava');\nconst {repeat} = require('lodash');\nconst hideSensitive = require('../lib/hide-sensitive');\nconst {SECRET_REPLACEMENT, SECRET_MIN_SIZE} = require('../lib/definitions/constants');\n\ntest('Replace multiple sensitive environment variable values', (t) => {\n  const env = {SOME_PASSWORD: 'password', SOME_TOKEN: 'secret'};\n  t.is(\n    hideSensitive(env)(`https://user:${env.SOME_PASSWORD}@host.com?token=${env.SOME_TOKEN}`),\n    `https://user:${SECRET_REPLACEMENT}@host.com?token=${SECRET_REPLACEMENT}`\n  );\n});\n\ntest('Replace multiple occurences of sensitive environment variable values', (t) => {\n  const env = {secretKey: 'secret'};\n  t.is(\n    hideSensitive(env)(`https://user:${env.secretKey}@host.com?token=${env.secretKey}`),\n    `https://user:${SECRET_REPLACEMENT}@host.com?token=${SECRET_REPLACEMENT}`\n  );\n});\n\ntest('Replace sensitive environment variable matching specific regex for \"private\"', (t) => {\n  const env = {privateKey: 'secret', GOPRIVATE: 'host.com'};\n  t.is(hideSensitive(env)(`https://host.com?token=${env.privateKey}`), `https://host.com?token=${SECRET_REPLACEMENT}`);\n});\n\ntest('Escape regexp special characters', (t) => {\n  const env = {SOME_CREDENTIALS: 'p$^{.+}\\\\w[a-z]o.*rd'};\n  t.is(\n    hideSensitive(env)(`https://user:${env.SOME_CREDENTIALS}@host.com`),\n    `https://user:${SECRET_REPLACEMENT}@host.com`\n  );\n});\n\ntest('Accept \"undefined\" input', (t) => {\n  t.is(hideSensitive({})(), undefined);\n});\n\ntest('Return same string if no environment variable has to be replaced', (t) => {\n  t.is(hideSensitive({})('test'), 'test');\n});\n\ntest('Exclude empty environment variables from the regexp', (t) => {\n  const env = {SOME_PASSWORD: 'password', SOME_TOKEN: ''};\n  t.is(\n    hideSensitive(env)(`https://user:${env.SOME_PASSWORD}@host.com?token=`),\n    `https://user:${SECRET_REPLACEMENT}@host.com?token=`\n  );\n});\n\ntest('Exclude empty environment variables from the regexp if there is only empty ones', (t) => {\n  t.is(hideSensitive({SOME_PASSWORD: '', SOME_TOKEN: ' \\n '})(`https://host.com?token=`), 'https://host.com?token=');\n});\n\ntest('Exclude nonsensitive GOPRIVATE environment variable for Golang projects from the regexp', (t) => {\n  const env = {GOPRIVATE: 'host.com'};\n  t.is(hideSensitive(env)(`https://host.com?token=`), 'https://host.com?token=');\n});\n\ntest('Exclude environment variables with value shorter than SECRET_MIN_SIZE from the regexp', (t) => {\n  const SHORT_TOKEN = repeat('a', SECRET_MIN_SIZE - 1);\n  const LONG_TOKEN = repeat('b', SECRET_MIN_SIZE);\n  const env = {SHORT_TOKEN, LONG_TOKEN};\n  t.is(\n    hideSensitive(env)(`https://user:${SHORT_TOKEN}@host.com?token=${LONG_TOKEN}`),\n    `https://user:${SHORT_TOKEN}@host.com?token=${SECRET_REPLACEMENT}`\n  );\n});\n"], "fixing_code": ["const {escapeRegExp, size, isString} = require('lodash');\nconst {SECRET_REPLACEMENT, SECRET_MIN_SIZE} = require('./definitions/constants');\n\nmodule.exports = (env) => {\n  const toReplace = Object.keys(env).filter((envVar) => {\n    // https://github.com/semantic-release/semantic-release/issues/1558\n    if (envVar === 'GOPRIVATE') {\n      return false;\n    }\n\n    return /token|password|credential|secret|private/i.test(envVar) && size(env[envVar].trim()) >= SECRET_MIN_SIZE;\n  });\n\n  const regexp = new RegExp(\n    toReplace\n      .map((envVar) => `${escapeRegExp(env[envVar])}|${encodeURI(escapeRegExp(env[envVar]))}`)\n      .join('|'),\n    'g'\n  );\n  return (output) =>\n    output && isString(output) && toReplace.length > 0 ? output.toString().replace(regexp, SECRET_REPLACEMENT) : output;\n};\n", "const test = require('ava');\nconst {repeat} = require('lodash');\nconst hideSensitive = require('../lib/hide-sensitive');\nconst {SECRET_REPLACEMENT, SECRET_MIN_SIZE} = require('../lib/definitions/constants');\n\ntest('Replace multiple sensitive environment variable values', (t) => {\n  const env = {SOME_PASSWORD: 'password', SOME_TOKEN: 'secret'};\n  t.is(\n    hideSensitive(env)(`https://user:${env.SOME_PASSWORD}@host.com?token=${env.SOME_TOKEN}`),\n    `https://user:${SECRET_REPLACEMENT}@host.com?token=${SECRET_REPLACEMENT}`\n  );\n});\n\ntest('Replace multiple occurences of sensitive environment variable values', (t) => {\n  const env = {secretKey: 'secret'};\n  t.is(\n    hideSensitive(env)(`https://user:${env.secretKey}@host.com?token=${env.secretKey}`),\n    `https://user:${SECRET_REPLACEMENT}@host.com?token=${SECRET_REPLACEMENT}`\n  );\n});\n\ntest('Replace sensitive environment variable matching specific regex for \"private\"', (t) => {\n  const env = {privateKey: 'secret', GOPRIVATE: 'host.com'};\n  t.is(hideSensitive(env)(`https://host.com?token=${env.privateKey}`), `https://host.com?token=${SECRET_REPLACEMENT}`);\n});\n\ntest('Replace url-encoded environment variable', (t) => {\n  const env = {privateKey: 'secret '};\n  t.is(\n    hideSensitive(env)(`https://host.com?token=${encodeURI(env.privateKey)}`),\n    `https://host.com?token=${SECRET_REPLACEMENT}`\n  );\n});\n\ntest('Escape regexp special characters', (t) => {\n  const env = {SOME_CREDENTIALS: 'p$^{.+}\\\\w[a-z]o.*rd'};\n  t.is(\n    hideSensitive(env)(`https://user:${env.SOME_CREDENTIALS}@host.com`),\n    `https://user:${SECRET_REPLACEMENT}@host.com`\n  );\n});\n\ntest('Accept \"undefined\" input', (t) => {\n  t.is(hideSensitive({})(), undefined);\n});\n\ntest('Return same string if no environment variable has to be replaced', (t) => {\n  t.is(hideSensitive({})('test'), 'test');\n});\n\ntest('Exclude empty environment variables from the regexp', (t) => {\n  const env = {SOME_PASSWORD: 'password', SOME_TOKEN: ''};\n  t.is(\n    hideSensitive(env)(`https://user:${env.SOME_PASSWORD}@host.com?token=`),\n    `https://user:${SECRET_REPLACEMENT}@host.com?token=`\n  );\n});\n\ntest('Exclude empty environment variables from the regexp if there is only empty ones', (t) => {\n  t.is(hideSensitive({SOME_PASSWORD: '', SOME_TOKEN: ' \\n '})(`https://host.com?token=`), 'https://host.com?token=');\n});\n\ntest('Exclude nonsensitive GOPRIVATE environment variable for Golang projects from the regexp', (t) => {\n  const env = {GOPRIVATE: 'host.com'};\n  t.is(hideSensitive(env)(`https://host.com?token=`), 'https://host.com?token=');\n});\n\ntest('Exclude environment variables with value shorter than SECRET_MIN_SIZE from the regexp', (t) => {\n  const SHORT_TOKEN = repeat('a', SECRET_MIN_SIZE - 1);\n  const LONG_TOKEN = repeat('b', SECRET_MIN_SIZE);\n  const env = {SHORT_TOKEN, LONG_TOKEN};\n  t.is(\n    hideSensitive(env)(`https://user:${SHORT_TOKEN}@host.com?token=${LONG_TOKEN}`),\n    `https://user:${SHORT_TOKEN}@host.com?token=${SECRET_REPLACEMENT}`\n  );\n});\n"], "filenames": ["lib/hide-sensitive.js", "test/hide-sensitive.test.js"], "buggy_code_start_loc": [14, 24], "buggy_code_end_loc": [15, 24], "fixing_code_start_loc": [14, 25], "fixing_code_end_loc": [20, 33], "type": "CWE-116", "message": "In the npm package semantic-release before version 17.2.3, secrets that would normally be masked by `semantic-release` can be accidentally disclosed if they contain characters that become encoded when included in a URL. Secrets that do not contain characters that become encoded when included in a URL are already masked properly. The issue is fixed in version 17.2.3.", "other": {"cve": {"id": "CVE-2020-26226", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-18T22:15:12.197", "lastModified": "2020-12-03T16:06:32.863", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In the npm package semantic-release before version 17.2.3, secrets that would normally be masked by `semantic-release` can be accidentally disclosed if they contain characters that become encoded when included in a URL. Secrets that do not contain characters that become encoded when included in a URL are already masked properly. The issue is fixed in version 17.2.3."}, {"lang": "es", "value": "En el paquete npm semantic-release anterior a versi\u00f3n 17.2.3, los secretos que normalmente estar\u00edan enmascarados por \"semantic-release\" pueden ser revelados accidentalmente si contienen caracteres que se codifican cuando se inclu\u00edan en una URL.&#xa0;Los secretos que no contienen caracteres que vienen codificados cuando se inclu\u00edan en una URL ya est\u00e1n enmascarados correctamente.&#xa0;El problema es corregido en la versi\u00f3n 17.2.3"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:semantic-release_project:semantic-release:*:*:*:*:*:*:*:*", "versionEndExcluding": "17.2.3", "matchCriteriaId": "03D1E3D8-7DF5-4762-826A-25383CCFC8FC"}]}]}], "references": [{"url": "https://github.com/semantic-release/semantic-release/commit/ca90b34c4a9333438cc4d69faeb43362bb991e5a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/semantic-release/semantic-release/security/advisories/GHSA-r2j6-p67h-q639", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/semantic-release/semantic-release/commit/ca90b34c4a9333438cc4d69faeb43362bb991e5a"}}