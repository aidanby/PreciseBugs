{"buggy_code": ["<?php\n\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Common;\n\nrequire_once __DIR__ . \"/consts.php\";\nrequire_once __DIR__ . \"/db.php\";\n\nclass SOA2Login {\n\t/**\n\t * Generate the Scratch verification code.\n\t * @param string $username the username to generate the code for\n\t */\n\tpublic static function gen_code( $session ) {\n\t\tif (!$session->exists( 'soa2_scratch_code' )) {\n\t\t\t$code = chunk_split(hash('sha256', random_bytes(32)), 5, ':');\n\t\t\t$code = substr($code, 0, strlen($code) - 1); // chop off last colon\n\t\t\t$session->set( 'soa2_scratch_code', $code );\n\t\t\t$session->save();\n\t\t}\n\t\treturn $session->get( 'soa2_scratch_code' );\n\t}\n\t/**\n\t * Get the data needed to complete a login.\n\t * @param string $username the username to get the codes for\n\t */\n\tpublic static function codes( string $username ) {\n\t\tglobal $wgRequest;\n\t\t// get user data from API\n\t\t$user = json_decode(file_get_contents(sprintf(\n\t\t\tSOA2_USERS_API, urlencode($username))), true);\n\t\tif (!$user) return null;\n\t\t// save user data\n\t\t$username = $user['username'];\n\t\tSOA2DB::saveUser( $user['id'], $user['username'] );\n\t\t// actually do the code generation\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$csrf = $session->getToken()->toString();\n\t\t// Step 15\n\t\t$code = self::gen_code( $session ); // Step 15\n\t\treturn [ 'username' => $username, 'csrf' => $csrf, 'code' => $code ];\n\t}\n\t/**\n\t * Did the user comment this code?\n\t * @param string $code the code\n\t * @param string $username the user\n\t */\n\tpublic static function commented( string $username, string $code ) {\n\t\t$username = strtolower($username);\n\t\t// Step 20, 21\n\t\t$comments = file_get_contents(sprintf(SOA2_COMMENTS_API, $username, rand()));\n\t\t$matches = [];\n\t\tpreg_match_all(SOA2_COMMENTS_REGEX, $comments, $matches, PREG_PATTERN_ORDER);\n\t\tfor ($i = 0; $i < count($matches[0]); ++$i) {\n\t\t\tif (strtolower($matches[1][$i]) != $username) continue;\n\t\t\tif (hash_equals($code, $matches[2][$i])) return true; // Step 22\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Log in a user\n\t * @param string $username the username to login\n\t * @param string $csrf the CSRF token submitted\n\t * @return boolean whether the login was successful\n\t */\n\tpublic static function login( string $username, string $csrf ) {\n\t\tglobal $wgRequest;\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$token = $session->getToken();\n\t\tif (!$session->getToken()->match($csrf, SOA2_CODE_EXPIRY)) return false;\n\t\t$code = self::gen_code( $session ); // Step 19\n\t\tif (!self::commented( $username, $code )) return false;\n\t\t// the login's successful, set the user ID\n\t\t$user = SOA2DB::getUserByName( $username );\n\t\t$session->set( 'soa2_user_id', $user->user_id ); // Step 23\n\t\t$session->remove( 'soa2_scratch_code' );\n\t\t$session->save();\n\t\treturn true;\n\t}\n}"], "fixing_code": ["<?php\n\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Common;\n\nrequire_once __DIR__ . \"/consts.php\";\nrequire_once __DIR__ . \"/db.php\";\n\nclass SOA2Login {\n\t/**\n\t * Generate the Scratch verification code.\n\t * @param string $username the username to generate the code for\n\t */\n\tpublic static function gen_code( $session ) {\n\t\tif (!$session->exists( 'soa2_scratch_code' )) {\n\t\t\t$code = chunk_split(hash('sha256', random_bytes(32)), 5, ':');\n\t\t\t$code = substr($code, 0, strlen($code) - 1); // chop off last colon\n\t\t\t$session->set( 'soa2_scratch_code', $code );\n\t\t\t$session->save();\n\t\t}\n\t\treturn $session->get( 'soa2_scratch_code' );\n\t}\n\t/**\n\t * Get the data needed to complete a login.\n\t * @param string $username the username to get the codes for\n\t */\n\tpublic static function codes( string $username ) {\n\t\tglobal $wgRequest;\n\t\t// get user data from API\n\t\t$user = json_decode(file_get_contents(sprintf(\n\t\t\tSOA2_USERS_API, urlencode($username))), true);\n\t\tif (!$user) return null;\n\t\t// save user data\n\t\t$username = $user['username'];\n\t\tSOA2DB::saveUser( $user['id'], $user['username'] );\n\t\t// actually do the code generation\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$csrf = $session->getToken()->toString();\n\t\t// Step 15\n\t\t$code = self::gen_code( $session ); // Step 15\n\t\treturn [ 'username' => $username, 'csrf' => $csrf, 'code' => $code ];\n\t}\n\t/**\n\t * Did the user comment this code?\n\t * @param string $code the code\n\t * @param string $username the user\n\t */\n\tpublic static function commented( string $username, string $code ) {\n\t\t$username = strtolower($username);\n\t\t// Step 20, 21\n\t\t$comments = file_get_contents(sprintf(SOA2_COMMENTS_API, $username, rand()));\n\t\t$matches = [];\n\t\tpreg_match_all(SOA2_COMMENTS_REGEX, $comments, $matches, PREG_PATTERN_ORDER);\n\t\tfor ($i = 0; $i < count($matches[0]); ++$i) {\n\t\t\tif (strtolower($matches[1][$i]) !== $username) continue;\n\t\t\tif (hash_equals($code, $matches[2][$i])) return true; // Step 22\n\t\t}\n\t\treturn false;\n\t}\n\t/**\n\t * Log in a user\n\t * @param string $username the username to login\n\t * @param string $csrf the CSRF token submitted\n\t * @return boolean whether the login was successful\n\t */\n\tpublic static function login( string $username, string $csrf ) {\n\t\tglobal $wgRequest;\n\t\t$session = $wgRequest->getSession();\n\t\t$session->persist();\n\t\t$token = $session->getToken();\n\t\tif (!$session->getToken()->match($csrf, SOA2_CODE_EXPIRY)) return false;\n\t\t$code = self::gen_code( $session ); // Step 19\n\t\tif (!self::commented( $username, $code )) return false;\n\t\t// the login's successful, set the user ID\n\t\t$user = SOA2DB::getUserByName( $username );\n\t\t$session->set( 'soa2_user_id', $user->user_id ); // Step 23\n\t\t$session->remove( 'soa2_scratch_code' );\n\t\t$session->save();\n\t\treturn true;\n\t}\n}"], "filenames": ["includes/common/login.php"], "buggy_code_start_loc": [55], "buggy_code_end_loc": [56], "fixing_code_start_loc": [55], "fixing_code_end_loc": [56], "type": "NVD-CWE-noinfo", "message": "An issue in SOA2Login::commented of ScratchOAuth2 before commit a91879bd58fa83b09283c0708a1864cdf067c64a allows attackers to authenticate as other users on downstream components that rely on ScratchOAuth2.", "other": {"cve": {"id": "CVE-2021-46250", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-15T23:15:07.980", "lastModified": "2022-02-24T15:06:37.320", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue in SOA2Login::commented of ScratchOAuth2 before commit a91879bd58fa83b09283c0708a1864cdf067c64a allows attackers to authenticate as other users on downstream components that rely on ScratchOAuth2."}, {"lang": "es", "value": "Un problema en la funci\u00f3n SOA2Login::commented de ScratchOAuth2 versiones anteriores al commit a91879bd58fa83b09283c0708a1864cdf067c64a, permite a atacantes autenticarse como otros usuarios en componentes posteriores que dependen de ScratchOAuth2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratchoauth2_project:scratchoauth2:*:*:*:*:*:scratch:*:*", "versionEndExcluding": "2021-04-13", "matchCriteriaId": "FA485728-97AA-480C-BE2A-B4ACB8F6F65D"}]}]}], "references": [{"url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/a91879bd58fa83b09283c0708a1864cdf067c64a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/a91879bd58fa83b09283c0708a1864cdf067c64a"}}